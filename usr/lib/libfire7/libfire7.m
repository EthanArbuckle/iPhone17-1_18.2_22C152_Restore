uint64_t BlueFin::GlPeTimeManager::UpdateLeapSecFromGpsUtcModel(BlueFin::GlPeTimeManager *this)
{
  int DeltaUTCSec;
  uint64_t result;
  signed __int8 v4;
  __n128 v5[2];
  void v6[2];

  if (!*((_DWORD *)this + 644)) {
    return 0;
  }
  BlueFin::GlPeTimeManager::GetTime(this, 1, v5);
  v6[0] = &off_270EBC600;
  v6[1] = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v5, (BlueFin::GlGpsTime *)v6);
  v5[0].n128_u32[0] = 0;
  DeltaUTCSec = BlueFin::GlPeGpsTimeMgr::GetDeltaUTCSec((BlueFin::GlPeTimeManager *)((char *)this + 64), (const BlueFin::GlGpsTime *)v6, (int *)v5);
  result = 0;
  if (DeltaUTCSec)
  {
    v4 = 0x80;
    BlueFin::GlPeGpsTimeMgr::GetFutureLS((BlueFin::GlPeTimeManager *)((char *)this + 64), (const BlueFin::GlGpsTime *)v6, &v4);
    return BlueFin::GlPeTimeManager::updateLeapSeconds(this, v5[0].n128_u8[0], 4, 0, v4);
  }
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::GetExpiringEphemerisSvs(BlueFin::GlPeAsstMgr *this, BlueFin::GlGnssSet *a2)
{
  unsigned int v3 = 0;
  v4 = (void *)((char *)this + 384);
  uint64_t v5 = 86400;
  do
  {
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v4, v3);
    if (Mgr)
    {
      v7 = Mgr;
      uint64_t v8 = BlueFin::GlGnssSet::operator()((uint64_t)a2, v3);
      unsigned int v9 = (*(uint64_t (**)(void *, uint64_t))(*v7 + 352))(v7, v8);
      if (v9 >= v5) {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v5 = v9;
      }
    }
    ++v3;
  }
  while (v3 != 7);
  return v5;
}

uint64_t BlueFin::GlPeEphemerisMgr::GetExpiringEphemerisSvs(BlueFin::GlPeEphemerisMgr *this, int **a2)
{
  uint64_t v4 = 86400;
  __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, v17);
  (*(void (**)(const void **__return_ptr, BlueFin::GlPeEphemerisMgr *, __n128))(*(void *)this + 304))(v13, this, Time);
  v6 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v14, v16, 2u, v13);
  v10 = &v12;
  LOBYTE(v11) = 2;
  uint64_t v12 = 0;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v6, (int **)&v10, a2);
  BlueFin::GlSetBase::operator=((uint64_t)&v14, (uint64_t)&v10);
  *(void *)v16 = v12;
  bzero(*a2, ((4 * *((unsigned __int8 *)a2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  LOBYTE(v10) = v15;
  memcpy(&v11, v14, 4 * v15);
  WORD1(v10) = 0;
  BYTE1(v10) = 0;
  HIDWORD(v10) = v11;
  while (1)
  {
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v10);
    if (BYTE1(v10) == v10) {
      break;
    }
    LOBYTE(v13[0]) = BYTE2(v10);
    uint64_t v7 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, const void **))(*(void *)this + 368))(this, v13);
    unsigned int v8 = (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)v7 + 248))(v7, v17);
    if (v8 >= v4) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v8;
    }
    if (v8 <= 0x77)
    {
      if (LOBYTE(v13[0]) - 64 <= 0xFFFFFFC0)
      {
        DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      }
      *(int *)((char *)*a2 + (((unint64_t)LOBYTE(v13[0]) >> 3) & 0x1C)) |= 1 << SLOBYTE(v13[0]);
    }
  }
  return v4;
}

unsigned __int8 *BlueFin::GlPeAlmMgr::GetValidity@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 12) = 0;
  *(void *)a4 = a4 + 12;
  *(unsigned char *)(a4 + 8) = 2;
  result = (unsigned __int8 *)a1[56];
  if (*((_DWORD *)result + 644))
  {
    BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)result, 1, v13);
    v14[0] = &off_270EBC600;
    v14[1] = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v13, (BlueFin::GlGpsTime *)v14);
    uint64_t v9 = a1[54] + 48 * a2;
    v13[0].n128_u8[0] = *(unsigned char *)(v9 + 32);
    memcpy(&v13[0].n128_i8[8], *(const void **)(v9 + 24), 4 * v13[0].n128_u8[0]);
    v13[0].n128_u16[1] = 0;
    v13[0].n128_u8[1] = 0;
    v13[0].n128_u32[1] = v13[0].n128_u32[2];
    while (1)
    {
      result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)v13);
      if (v13[0].n128_u8[1] == v13[0].n128_u8[0]) {
        break;
      }
      unsigned __int8 v10 = v13[0].n128_u8[2];
      unsigned int v11 = a2;
      unsigned __int8 v12 = v13[0].n128_u8[2];
      if (BlueFin::GlPeAlmMgr::IsValid(a1, (const BlueFin::GlGpsTime *)v14, (uint64_t)&v11, a3))
      {
        if (v10 - 64 <= 0xFFFFFFC0)
        {
          DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        }
        *(_DWORD *)(*(void *)a4 + (((unint64_t)v10 >> 3) & 0x1C)) |= 1 << v10;
      }
    }
  }
  return result;
}

BOOL BlueFin::GlPeAlmMgr::IsValid(uint64_t *a1, const BlueFin::GlGpsTime *a2, uint64_t a3, int a4)
{
  uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference(a1, *(_DWORD *)a3, *(unsigned __int8 *)(a3 + 4));
  if (a4)
  {
    uint64_t v8 = *(int *)(AlmReference + 104);
    if v8 < 5 && ((0x1Du >> v8)) {
      int v9 = *(_DWORD *)&asc_263BB3AF4[4 * v8];
    }
    else {
      LOWORD(v9) = v8 == 5 ? 31 : 255;
    }
    if (((unsigned __int16)v9 & *(_WORD *)(AlmReference + 2)) != 0) {
      return 0;
    }
  }
  if (*(_DWORD *)a3 == 1) {
    return 1;
  }
  BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)AlmReference, a2, (uint64_t)&v21);
  unsigned int v11 = *((_DWORD *)a2 + 2);
  unsigned int v12 = *((_DWORD *)a2 + 3);
  if (v22)
  {
    unsigned int v13 = v12 - HIDWORD(v22);
    if (__PAIR64__(v12, v11) < v22)
    {
      unsigned int v17 = HIDWORD(v22) - v12;
      BOOL v15 = v22 >= v11;
      unsigned int v11 = v22 - v11;
      int v18 = !v15;
      unsigned int v12 = v17 - v18;
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      BOOL v15 = v11 >= v22;
      v11 -= v22;
      int v16 = !v15;
      unsigned int v12 = v13 - v16;
    }
  }
  else
  {
    char v14 = 0;
  }
  double v19 = (double)v11 * 2.32830644e-10 + (double)v12;
  if ((v14 & ((v12 | v11) != 0)) != 0) {
    double v19 = -v19;
  }
  unsigned int v20 = (int)v19;
  if ((int)v19 < 0) {
    unsigned int v20 = -v20;
  }
  return v20 < 0xEFF101;
}

uint64_t BlueFin::GlPeAlmMgr::GetAlm(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  if ((((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 432) + 48 * a2 + 24) + 4 * (a3 >> 5)) >> (a3 & 0x1F)) & 1) == 0
    || a6 && !*(_DWORD *)(*(void *)(a1 + 448) + 2576))
  {
    return 0;
  }
  uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)a1, a2, a3);
  unsigned int v12 = (BlueFin::GlPeAlmanac *)AlmReference;
  if (a5)
  {
    uint64_t v13 = *(int *)(AlmReference + 104);
    if v13 < 5 && ((0x1Du >> v13)) {
      int v14 = *(_DWORD *)&asc_263BB3AF4[4 * v13];
    }
    else {
      LOWORD(v14) = v13 == 5 ? 31 : 255;
    }
    if (((unsigned __int16)v14 & *(_WORD *)(AlmReference + 2)) != 0) {
      return 0;
    }
  }
  if (a6)
  {
    BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 448), 1, v21);
    unint64_t v22 = &off_270EBC600;
    unint64_t v23 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v21, (BlueFin::GlGpsTime *)&v22);
    BlueFin::GlPeAlmanac::GetToa(v12, (const BlueFin::GlGpsTime *)&v22, (uint64_t)v21);
    unsigned int v15 = v23;
    unsigned int v16 = HIDWORD(v23);
    if (v21[0].n128_u64[1])
    {
      if (v23 < v21[0].n128_u64[1])
      {
        unsigned int v16 = (__PAIR64__(v21[0].n128_u32[3] - HIDWORD(v23), v21[0].n128_u32[2]) - v23) >> 32;
        unsigned int v15 = v21[0].n128_u32[2] - v23;
        char v17 = 1;
      }
      else
      {
        char v17 = 0;
        unsigned int v16 = (v23 - v21[0].n128_u64[1]) >> 32;
        unsigned int v15 = v23 - v21[0].n128_u32[2];
      }
    }
    else
    {
      char v17 = 0;
    }
    if (a2 != 1)
    {
      double v18 = (double)v15 * 2.32830644e-10 + (double)v16;
      if ((v17 & ((v16 | v15) != 0)) != 0) {
        double v18 = -v18;
      }
      unsigned int v19 = (int)v18;
      if ((int)v18 < 0) {
        unsigned int v19 = -v19;
      }
      if (v19 > 0xEFF100) {
        return 0;
      }
    }
  }
  BlueFin::GlPeAlmanac::operator=(a4, (uint64_t)v12);
  return 1;
}

uint64_t BlueFin::GlPeAlmMgr::getAlmReference(uint64_t *a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 0:
      unsigned int v3 = a1 + 508;
      unsigned int v4 = 32;
      goto LABEL_9;
    case 1:
      unsigned int v3 = a1 + 2422;
      unsigned int v4 = 19;
      goto LABEL_9;
    case 2:
      unsigned int v3 = a1 + 992;
      unsigned int v4 = 24;
      goto LABEL_9;
    case 3:
      unsigned int v3 = a1 + 652;
      unsigned int v4 = 10;
      goto LABEL_9;
    case 4:
      unsigned int v3 = a1 + 3306;
      unsigned int v4 = 63;
      goto LABEL_9;
    case 5:
      unsigned int v3 = a1 + 4328;
      unsigned int v4 = 36;
      goto LABEL_9;
    case 6:
      unsigned int v3 = a1 + 4536;
      unsigned int v4 = 14;
LABEL_9:
      if (v4 < a3) {
        goto LABEL_12;
      }
      uint64_t v5 = *v3;
      if (!v5) {
        goto LABEL_12;
      }
      return v5 + 112 * (int)(a3 - 1);
    default:
LABEL_12:
      DeviceFaultNotify("glpe_almmgr.cpp", 1024, "getAlmReference", (char)"potAlmArrayBase != nullptr && (iIndex < iMaxSVs)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", 1024, "potAlmArrayBase != nullptr && (iIndex < iMaxSVs)");
  }
}

__n128 BlueFin::GlPeTimeManager::GetTime@<Q0>(BlueFin::GlPeTimeManager *this@<X0>, int a2@<W1>, __n128 *a3@<X8>)
{
  if (a2 && *((_DWORD *)this + 1201) != -7200001)
  {
    a3->n128_u64[0] = *((void *)this + 601);
    a3->n128_u32[2] = *((_DWORD *)this + 1204);
    __n128 result = *(__n128 *)((char *)this + 4824);
    a3[1] = result;
  }
  else
  {
    unsigned int v3 = *((_DWORD *)this + 642);
    double v4 = (double)(int)v3;
    if (v3 <= 0xFF9222FE) {
      double v4 = (double)v3;
    }
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, v4, a2, (uint64_t)a3);
  }
  return result;
}

__n128 BlueFin::GlPeAlmanac::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return result;
}

{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return result;
}

unsigned __int8 *BlueFin::GlPeEphemerisMgr::GetEphSet@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 2;
  if (this[104])
  {
    unsigned int v3 = this;
    unsigned int v4 = 0;
    do
    {
      unsigned __int8 v5 = ++v4;
      this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, unsigned __int8 *))(*(void *)v3 + 312))(v3, &v5);
      if (this)
      {
        if (v5 - 64 <= 0xFFFFFFC0)
        {
          DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        }
        *(_DWORD *)(*(void *)a2 + (((unint64_t)v5 >> 3) & 0x1C)) |= 1 << v5;
      }
    }
    while (v4 < v3[104]);
  }
  return this;
}

uint64_t BlueFin::GlPeEphemerisMgr::GetEph(void *a1, unsigned char *a2, int a3)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 312))(a1)) {
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(void *, unsigned char *))(*a1 + 368))(a1, a2);
  if (a3)
  {
    if (!(*(unsigned int (**)(void *, unsigned char *))(*a1 + 344))(a1, a2)) {
      return 0;
    }
  }
  if (((unint64_t)*(unsigned int *)(a1[48] + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)))
  {
    uint64_t v7 = (*(uint64_t (**)(void *, unsigned char *))(*a1 + 368))(a1, a2);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 184))(v7)) {
      BlueFin::GlSetBase::Remove((uint64_t)(a1 + 48), *a2);
    }
  }
  return v6;
}

BOOL BlueFin::GlPeEphemerisMgr::HaveEphemerisFor(uint64_t a1)
{
  return (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(a1) + 8) & 0xF) != 0;
}

unint64_t BlueFin::GlPeEphemerisMgr::GetEphemerisObj(uint64_t a1, unsigned char *a2)
{
  unsigned int v2 = *a2;
  if (!*a2 || *(unsigned __int8 *)(a1 + 104) < v2)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1191, "GetEphemerisObj", (char)"*rotGnssId >= MIN_GNSS_ID && *rotGnssId < m_ucMaxEphSVs + MIN_GNSS_ID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1191, "*rotGnssId >= MIN_GNSS_ID && *rotGnssId < m_ucMaxEphSVs + MIN_GNSS_ID");
  }
  return *(void *)(a1 + 464) + 4 * (int)(v2 - 1) * (unint64_t)*(unsigned __int8 *)(a1 + 456);
}

BOOL BlueFin::GlPeEphemerisMgr::isEphemerisGoodForNav(uint64_t a1, unsigned char *a2)
{
  unsigned int v4 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(a1);
  BOOL result = 0;
  if ((v4[8] & 0xF) != 0)
  {
    unsigned __int8 v5 = v4;
    if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 40))(v4))
    {
      if ((((unint64_t)*(unsigned int *)(*(void *)(a1 + 384)
                                               + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)) & 1) == 0
        || (uint64_t v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 368))(a1, a2),
            (*(unsigned int (**)(uint64_t))(*(void *)v6 + 184))(v6)))
      {
        if ((*(unsigned int (**)(unsigned char *))(*(void *)v5 + 144))(v5) != 2) {
          return 1;
        }
        BlueFin::GlPeLtoMgr::GetBadSvSet(*(void *)(a1 + 32), *(_DWORD *)(a1 + 12), 0, v8);
        if ((((unint64_t)*(unsigned int *)(*(void *)v8 + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)) & 1) == 0) {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeEphemeris::GetEphDataSrc(BlueFin::GlPeEphemeris *this)
{
  if ((*((unsigned char *)this + 8) & 0xF) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)this + 192))(this, 1);
  if (result >= 4)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 207, "GetEphDataSrc", (char)"ulSrc < NUM_EPH_DATA_SRC");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 207, "ulSrc < NUM_EPH_DATA_SRC");
  }
  return result;
}

BOOL BlueFin::GlPeGalEphemeris::isHealthy(BlueFin::GlPeGalEphemeris *this)
{
  return ((*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 3) & 0x1F) == 0
      && (*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 4) < 0x7E;
}

uint64_t BlueFin::GlPeGalEphemeris::ComputeAgeS(BlueFin::GlPeGalEphemeris *this, const BlueFin::GlPeGnssTime *a2, int a3)
{
  unsigned int v20 = &off_270EBF538;
  uint64_t v21 = 0;
  BlueFin::GlPeGnssTime::GetGal(a2, (BlueFin::GlGalTime *)&v20);
  unsigned int v5 = ((uint64_t (*)(void))v20[4])(&v20);
  LODWORD(v6) = v21;
  if ((double)v6 * 2.32830644e-10 + (double)v5 < 0.0) {
    return (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *))(*(void *)this + 88))(this);
  }
  unsigned __int16 v8 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
  if (a3) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = 7;
  }
  int v10 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, v9);
  unsigned int v11 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 232))(this, v9) * v10;
  char v17 = &off_270EBF538;
  double v12 = fmod((double)v11, 1.0);
  if (v12 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v13 = v12 * 4294967300.0 + 0.5;
  unsigned int v14 = v13;
  if (v13 >= 4294967300.0) {
    unsigned int v14 = -1;
  }
  unsigned int v18 = v14;
  int v19 = v11 + 604800 * v8 + 619315200;
  char v17 = &off_270EBF538;
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *))(*(void *)this + 80))(this);
  if (!result)
  {
    unsigned int v15 = ((uint64_t (*)(void))v17[4])(&v17);
    LODWORD(v16) = v18;
    return BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v20, (double)v16 * 2.32830644e-10 + (double)(v15 % 0x93A80), &v22);
  }
  return result;
}

uint64_t BlueFin::GlPeGalEphemeris::GetCmpUnsignedField(BlueFin::GlPeGalEphemeris *this, int a2)
{
  unsigned int v2 = (unsigned __int8 *)*((void *)this + 2);
  switch(a2)
  {
    case 0:
      uint64_t result = *(_DWORD *)v2 >> 26;
      break;
    case 1:
      uint64_t result = (*((_DWORD *)v2 + 15) >> 27) & 3;
      break;
    case 2:
      uint64_t result = (*((_DWORD *)v2 + 15) >> 26) & 1;
      break;
    case 3:
      uint64_t result = (unsigned __int16)*(_DWORD *)v2 >> 10;
      break;
    case 4:
      uint64_t result = v2[2];
      break;
    case 5:
      uint64_t result = *(_DWORD *)v2 & 0x3FF;
      break;
    case 7:
      uint64_t result = (*((_DWORD *)v2 + 1) >> 8) & 0x3FFF;
      break;
    case 15:
      uint64_t result = (__PAIR64__(*((_DWORD *)v2 + 6), *((_DWORD *)v2 + 7)) >> 30);
      break;
    case 17:
      uint64_t result = (__PAIR64__(*((_DWORD *)v2 + 7), *((_DWORD *)v2 + 8)) >> 14);
      break;
    case 18:
      uint64_t result = *((_DWORD *)v2 + 8) & 0x3FFF;
      break;
    case 27:
      uint64_t result = (*((_DWORD *)v2 + 14) >> 9) & 1;
      break;
    case 28:
      HIDWORD(v4) = *((_DWORD *)v2 + 14);
      LODWORD(v4) = *((_DWORD *)v2 + 15);
      uint64_t result = (v4 >> 9) >> 20;
      break;
    case 29:
      uint64_t result = *v2;
      break;
    default:
      DeviceFaultNotify("glpe_galephmgr.cpp", 560, "GetCmpUnsignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 560, "0");
  }
  return result;
}

uint64_t BlueFin::GlPeGalEphemeris::GetIntegerScaleFactor(BlueFin::GlPeGalEphemeris *this, unsigned int a2)
{
  if (a2 > 0x1F) {
    goto LABEL_6;
  }
  if (((1 << a2) & 0x9800003F) != 0) {
    return 1;
  }
  if (((1 << a2) & 0x40080) == 0)
  {
LABEL_6:
    DeviceFaultNotify("glpe_galephmgr.cpp", 729, "GetIntegerScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 729, "0");
  }
  return 60;
}

uint64_t BlueFin::GlGalTime::ctFct2fctS(BlueFin::GlGalTime *this)
{
  return (*((_DWORD *)this + 3) - 619315200);
}

void BlueFin::GlPeGnssTime::GetGal(BlueFin::GlPeGnssTime *this, BlueFin::GlGalTime *a2)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v3 = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = v2;
  *((_DWORD *)a2 + 3) = v3;
  if (*((_DWORD *)this + 2) != 3)
  {
    if (BlueFin::GlPeGnssTime::m_potConversionTable)
    {
      double v5 = *(double *)(BlueFin::GlPeGnssTime::m_potConversionTable + 24);
      double v6 = fabs(v5);
      double v7 = fmod(v6, 1.0);
      double v8 = v7 * 4294967300.0 + 0.5;
      unsigned int v9 = v8;
      if (v8 >= 4294967300.0) {
        unsigned int v9 = -1;
      }
      if (v7 < 0.0 || v7 >= 1.0)
      {
        unsigned int v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        int v19 = "glpe_timepoint.h";
        int v20 = 173;
        goto LABEL_30;
      }
      unsigned int v11 = v6;
      if (v5 >= 0.0)
      {
        uint64_t v12 = v2 + v9;
        int v13 = v3 + v11 + HIDWORD(v12);
LABEL_27:
        *((_DWORD *)a2 + 2) = v12;
        *((_DWORD *)a2 + 3) = v13;
        return;
      }
      int v14 = v3 - v11;
      if (v3 > v11 || (v3 == v11 ? (BOOL v15 = v2 >= v9) : (BOOL v15 = 0), v15))
      {
        BOOL v15 = v2 >= v9;
        LODWORD(v12) = v2 - v9;
        int v17 = !v15;
        int v13 = v14 - v17;
        goto LABEL_27;
      }
      if (v11 - v3 == v2 > v9 && v9 == v2)
      {
        int v13 = 0;
        LODWORD(v12) = 0;
        goto LABEL_27;
      }
      unsigned int v18 = "!tDelta.isNegative()";
      DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
      int v19 = "glpe_datetime.h";
      int v20 = 425;
    }
    else
    {
      unsigned int v18 = "m_potConversionTable != nullptr";
      DeviceFaultNotify("glpe_timemgr.cpp", 468, "GetGal", (char)"m_potConversionTable != nullptr");
      int v19 = "glpe_timemgr.cpp";
      int v20 = 468;
    }
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
}

BOOL BlueFin::GlPeGalEphemeris::isTimeSet(BlueFin::GlPeGalEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 27) != 0;
}

uint64_t BlueFin::GlPeGalEphemeris::GetPvt(BlueFin::GlPeEphemeris *a1, uint64_t a2, uint64_t a3, double a4)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 17);
  double v59 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 15);
  double v8 = v59 * v59;
  double v9 = v59;
  double v56 = ScaledFloatingField * ScaledFloatingField;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12) + sqrt(3.98600442e14 / (v56 * (v56 * v56)));
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9);
  double v12 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, void))(*(void *)a1 + 64))(a1, a2, 0);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 10) + v11 * v12;
  *(double *)(a3 + 48) = v13;
  double v14 = v13 - BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 6);
  double v15 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1) - v14;
  double v53 = v10;
  double v58 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v10 * v15;
  double v57 = 0.0;
  BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v58, &v59, &v57, v16);
  __double2 v17 = __sincos_stret(v57);
  double v18 = ScaledFloatingField * (v9 * -4.44280731e-10);
  *(double *)(a3 + 48) = *(double *)(a3 + 48) + v18 * v17.__sinval;
  *(double *)(a3 + 56) = v11 + v18 * v17.__cosval * v10;
  double v45 = v15 - v18 * v17.__sinval;
  double v52 = atan2(sqrt(1.0 - v8) * v17.__sinval, v17.__cosval - v9);
  double v19 = v52 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v20 = __sincos_stret(v19 + v19);
  double v47 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 16);
  double v46 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 14);
  double v49 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11);
  double v48 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 23);
  double v51 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 21);
  double v50 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 19);
  double v21 = v19 + v46 * v20.__cosval + v47 * v20.__sinval;
  double v55 = 1.0 - v9 * v17.__cosval;
  double v22 = v20.__cosval * v48 + v49 * v20.__sinval + ScaledFloatingField * ScaledFloatingField * v55;
  double v44 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 26);
  double v23 = v20.__cosval * v50 + v51 * v20.__sinval + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22) + v44 * v45;
  __double2 v24 = __sincos_stret(v21);
  double v43 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 25) + -0.0000729211515;
  double v25 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20) + v43 * (v45 + a4);
  double v26 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v27 = __sincos_stret(v25 + v26 * -0.0000729211515);
  __double2 v28 = __sincos_stret(v23);
  double v29 = v24.__sinval * v22 * v28.__cosval;
  *(double *)a3 = v24.__cosval * v22 * v27.__cosval - v29 * v27.__sinval;
  *(double *)(a3 + 8) = v29 * v27.__cosval + v24.__cosval * v22 * v27.__sinval;
  *(double *)(a3 + 16) = v24.__sinval * v22 * v28.__sinval;
  __double2 v30 = __sincos_stret(v21 + v21);
  double sinval = v30.__sinval;
  double cosval = v30.__cosval;
  __double2 v33 = __sincos_stret(v52);
  double v34 = v17.__sinval * (v53 / v55) * (v9 * v33.__cosval + 1.0) / (v55 * v33.__sinval);
  double v35 = v34 + (v47 * cosval - v46 * sinval + v47 * cosval - v46 * sinval) * v34;
  double v36 = v53 * (v56 * v9 * v17.__sinval) / v55 + (v49 * cosval - v48 * sinval + v49 * cosval - v48 * sinval) * v34;
  double v37 = v44 + (v51 * cosval - v50 * sinval + v51 * cosval - v50 * sinval) * v34;
  double v38 = v36 * v24.__cosval - v24.__sinval * v22 * v35;
  double v39 = v24.__cosval * v22 * v35 + v36 * v24.__sinval;
  double v40 = v38 - v29 * v43;
  double v41 = v28.__cosval * v39 + v24.__cosval * v22 * v43 - v24.__sinval * v22 * v28.__sinval * v37;
  *(double *)(a3 + 24) = v40 * v27.__cosval - v41 * v27.__sinval;
  *(double *)(a3 + 32) = v27.__cosval * v41 + v40 * v27.__sinval;
  *(double *)(a3 + 40) = v29 * v37 + v39 * v28.__sinval;
  *(_DWORD *)(a3 + 64) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a1 + 152))(a1);
  return 1;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetPvt(BlueFin::GlPeEphemeris *a1, uint64_t a2, uint64_t a3, double a4)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 17);
  double v59 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 15);
  double v8 = v59 * v59;
  double v9 = v59;
  double v56 = ScaledFloatingField * ScaledFloatingField;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12) + sqrt(3.986005e14 / (v56 * (v56 * v56)));
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9);
  double v12 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, void))(*(void *)a1 + 64))(a1, a2, 0);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 10) + v11 * v12;
  *(double *)(a3 + 48) = v13;
  double v14 = v13 - BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 6);
  double v15 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1) - v14;
  double v53 = v10;
  double v58 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v10 * v15;
  double v57 = 0.0;
  BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v58, &v59, &v57, v16);
  __double2 v17 = __sincos_stret(v57);
  double v18 = ScaledFloatingField * (v9 * -4.44280763e-10);
  *(double *)(a3 + 48) = *(double *)(a3 + 48) + v18 * v17.__sinval;
  *(double *)(a3 + 56) = v11 + v18 * v17.__cosval * v10;
  double v45 = v15 - v18 * v17.__sinval;
  double v52 = atan2(sqrt(1.0 - v8) * v17.__sinval, v17.__cosval - v9);
  double v19 = v52 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v20 = __sincos_stret(v19 + v19);
  double v47 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 16);
  double v46 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 14);
  double v49 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11);
  double v48 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 23);
  double v51 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 21);
  double v50 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 19);
  double v21 = v19 + v46 * v20.__cosval + v47 * v20.__sinval;
  double v55 = 1.0 - v9 * v17.__cosval;
  double v22 = v20.__cosval * v48 + v49 * v20.__sinval + ScaledFloatingField * ScaledFloatingField * v55;
  double v44 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 26);
  double v23 = v20.__cosval * v50 + v51 * v20.__sinval + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22) + v44 * v45;
  __double2 v24 = __sincos_stret(v21);
  double v43 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 25) + -0.0000729211515;
  double v25 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20) + v43 * (v45 + a4);
  double v26 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v27 = __sincos_stret(v25 + v26 * -0.0000729211515);
  __double2 v28 = __sincos_stret(v23);
  double v29 = v22 * v24.__sinval * v28.__cosval;
  *(double *)a3 = v22 * v24.__cosval * v27.__cosval - v29 * v27.__sinval;
  *(double *)(a3 + 8) = v29 * v27.__cosval + v22 * v24.__cosval * v27.__sinval;
  *(double *)(a3 + 16) = v22 * v24.__sinval * v28.__sinval;
  __double2 v30 = __sincos_stret(v21 + v21);
  double sinval = v30.__sinval;
  double cosval = v30.__cosval;
  __double2 v33 = __sincos_stret(v52);
  double v34 = v17.__sinval * (v53 / v55) * (v9 * v33.__cosval + 1.0) / (v55 * v33.__sinval);
  double v35 = v34 + (v47 * cosval - v46 * sinval + v47 * cosval - v46 * sinval) * v34;
  double v36 = v53 * (v56 * v9 * v17.__sinval) / v55 + (v49 * cosval - v48 * sinval + v49 * cosval - v48 * sinval) * v34;
  double v37 = v44 + (v51 * cosval - v50 * sinval + v51 * cosval - v50 * sinval) * v34;
  double v38 = v36 * v24.__cosval - v22 * v24.__sinval * v35;
  double v39 = v22 * v24.__cosval * v35 + v36 * v24.__sinval;
  double v40 = v38 - v29 * v43;
  double v41 = v28.__cosval * v39 + v22 * v24.__cosval * v43 - v22 * v24.__sinval * v28.__sinval * v37;
  *(double *)(a3 + 24) = v40 * v27.__cosval - v41 * v27.__sinval;
  *(double *)(a3 + 32) = v27.__cosval * v41 + v40 * v27.__sinval;
  *(double *)(a3 + 40) = v29 * v37 + v39 * v28.__sinval;
  *(_DWORD *)(a3 + 64) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a1 + 152))(a1);
  return 1;
}

double BlueFin::GlPeEphemeris::GetScaledFloatingField(BlueFin::GlPeEphemeris *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)this + 200))(this);
  uint64_t v5 = *(void *)this;
  if (v4) {
    double v6 = (double)(*(int (**)(BlueFin::GlPeEphemeris *, uint64_t))(v5 + 208))(this, a2);
  }
  else {
    double v6 = (double)(*(unsigned int (**)(BlueFin::GlPeEphemeris *, uint64_t))(v5 + 192))(this, a2);
  }
  return v6 * (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)this + 240))(this, a2);
}

uint64_t BlueFin::GlPeGpsEphemerisBase::isSignedField(BlueFin::GlPeGpsEphemerisBase *this, unsigned int a2)
{
  if (a2 >= 0x20 || ((0xDFFFFFFF >> a2) & 1) == 0)
  {
    GlCustomLog(11, "GlPeGpsEphemerisBase::isSignedField: Illegal field index:%d\n", a2);
    DeviceFaultNotify("glpe_ephmgr.cpp", 2931, "isSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 2931, "0");
  }
  return (0x7F97F40u >> a2) & 1;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetCmpSignedField(BlueFin::GlPeGpsEphemerisBase *this, int a2)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 2);
  switch(a2)
  {
    case 6:
      HIDWORD(v3) = *v2;
      LODWORD(v3) = v2[1];
      return ((int)(v3 >> 4) >> 24);
    case 8:
      return ((int)(v2[1] << 20) >> 24);
    case 9:
      HIDWORD(v6) = v2[1];
      LODWORD(v6) = v2[2];
      int v5 = v6 >> 4;
      goto LABEL_19;
    case 10:
      HIDWORD(v7) = v2[2];
      LODWORD(v7) = v2[3];
      return ((int)(v7 >> 20) >> 10);
    case 11:
      int v8 = v2[3];
      return (__int16)(v8 >> 14);
    case 12:
      unsigned int v10 = v2[3];
      unsigned int v9 = v2[4];
      goto LABEL_12;
    case 13:
      return (__PAIR64__(v2[4], v2[5]) >> 30);
    case 14:
      int v8 = v2[5];
      return (__int16)(v8 >> 14);
    case 16:
      unsigned int v10 = v2[6];
      unsigned int v9 = v2[7];
LABEL_12:
      int v5 = __PAIR64__(v10, v9) >> 14;
      goto LABEL_19;
    case 19:
      unsigned int v12 = v2[8];
      unsigned int v11 = v2[9];
      goto LABEL_18;
    case 20:
      unsigned int v14 = v2[9];
      unsigned int v13 = v2[10];
      goto LABEL_21;
    case 21:
      return (__int16)((int)v2[10] >> 13);
    case 22:
      return (__PAIR64__(v2[10], v2[11]) >> 13);
    case 23:
      unsigned int v12 = v2[11];
      unsigned int v11 = v2[12];
LABEL_18:
      int v5 = __PAIR64__(v12, v11) >> 13;
LABEL_19:
      uint64_t result = (v5 >> 16);
      break;
    case 24:
      unsigned int v14 = v2[12];
      unsigned int v13 = v2[13];
LABEL_21:
      uint64_t result = (__PAIR64__(v14, v13) >> 29);
      break;
    case 25:
      uint64_t result = (char)((int)v2[13] >> 5);
      break;
    case 26:
      HIDWORD(v15) = v2[13];
      LODWORD(v15) = v2[14];
      uint64_t result = ((int)(v15 >> 5) >> 18);
      break;
    default:
      GlCustomLog(11, "GlPeGpsEphemerisBase::GetCmpSignedField: Illegal field index:%d\n", a2);
      DeviceFaultNotify("glpe_ephmgr.cpp", 2965, "GetCmpSignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 2965, "0");
  }
  return result;
}

double BlueFin::GlPeGpsEphemerisBase::GetFloatingScaleFactor(BlueFin::GlPeGpsEphemerisBase *this, int a2)
{
  double result = 1.0;
  if ((a2 - 6) <= 0x14) {
    return dbl_263BB4458[(char)(a2 - 6)];
  }
  return result;
}

double BlueFin::GlPeGalEphemeris::GetFloatingScaleFactor(BlueFin::GlPeGalEphemeris *this, int a2)
{
  double result = 1.0;
  if ((a2 - 6) <= 0x14) {
    return dbl_263BB4750[(char)(a2 - 6)];
  }
  return result;
}

uint64_t BlueFin::GlPeGalEphemeris::isSignedField(BlueFin::GlPeGalEphemeris *this, unsigned int a2)
{
  if (a2 >= 0x1D)
  {
    DeviceFaultNotify("glpe_galephmgr.cpp", 601, "isSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 601, "0");
  }
  return (0x7F97F40u >> a2) & 1;
}

uint64_t BlueFin::GlPeGalEphemeris::GetCmpSignedField(BlueFin::GlPeGalEphemeris *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  switch(a2)
  {
    case 6:
      return (*(int *)(v2 + 4) >> 22);
    case 8:
      return ((char)*(_DWORD *)(v2 + 4) >> 2);
    case 9:
      HIDWORD(v4) = *(_DWORD *)(v2 + 4);
      LODWORD(v4) = *(_DWORD *)(v2 + 8);
      return ((int)(v4 >> 2) >> 11);
    case 10:
      HIDWORD(v5) = *(_DWORD *)(v2 + 8);
      LODWORD(v5) = *(_DWORD *)(v2 + 12);
      return ((int)(v5 >> 13) >> 1);
    case 11:
      unsigned int v7 = *(_DWORD *)(v2 + 12);
      unsigned int v6 = *(_DWORD *)(v2 + 16);
      return ((int)(__PAIR64__(v7, v6) >> 14) >> 16);
    case 12:
      int v8 = *(_DWORD *)(v2 + 16);
      return (__int16)(v8 >> 14);
    case 13:
      return (__PAIR64__(*(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20)) >> 14);
    case 14:
      unsigned int v7 = *(_DWORD *)(v2 + 20);
      unsigned int v6 = *(_DWORD *)(v2 + 24);
      return ((int)(__PAIR64__(v7, v6) >> 14) >> 16);
    case 16:
      int v8 = *(_DWORD *)(v2 + 28);
      return (__int16)(v8 >> 14);
    case 19:
      return *(__int16 *)(v2 + 38);
    case 20:
      unsigned int v10 = *(_DWORD *)(v2 + 36);
      unsigned int v9 = *(_DWORD *)(v2 + 40);
      goto LABEL_19;
    case 21:
      return *(__int16 *)(v2 + 40);
    case 22:
      return *(unsigned int *)(v2 + 44);
    case 23:
      return *(__int16 *)(v2 + 50);
    case 24:
      unsigned int v10 = *(_DWORD *)(v2 + 48);
      unsigned int v9 = *(_DWORD *)(v2 + 52);
LABEL_19:
      uint64_t result = (__PAIR64__(v10, v9) >> 16);
      break;
    case 25:
      HIDWORD(v11) = *(_DWORD *)(v2 + 52);
      LODWORD(v11) = *(_DWORD *)(v2 + 56);
      uint64_t result = ((int)(v11 >> 16) >> 8);
      break;
    case 26:
      uint64_t result = ((int)(*(_DWORD *)(v2 + 56) << 8) >> 18);
      break;
    default:
      DeviceFaultNotify("glpe_galephmgr.cpp", 633, "GetCmpSignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 633, "0");
  }
  return result;
}

double BlueFin::GlPeLtoEphemeris::GetFloatingScaleFactor(BlueFin::GlPeLtoEphemeris *this, int a2)
{
  char v3 = a2 - 6;
  if (a2 - 6) < 0x15 && ((0x1DFF8Fu >> v3)) {
    return dbl_263BB4500[v3];
  }
  unint64_t v4 = (BlueFin::GlPeGpsEphemerisBase *)(*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)this + 192))(this, 32);
  switch((int)v4)
  {
    case 0:
      return BlueFin::GlPeGpsEphemerisBase::GetFloatingScaleFactor(v4, a2);
    case 1:
      if (a2 <= 11) {
        goto LABEL_16;
      }
      if (a2 != 12) {
        goto LABEL_23;
      }
      return 2.85726187e-12;
    case 2:
      if (a2 > 11)
      {
        if (a2 != 12)
        {
          if (a2 != 23) {
            return 1.0;
          }
          return 0.03125;
        }
        return 3.57157734e-13;
      }
      else
      {
        if (a2 != 10)
        {
          if (a2 != 11) {
            return 1.0;
          }
          return 0.03125;
        }
        return 0.0000000149011612;
      }
    case 3:
      if (a2 <= 11)
      {
LABEL_16:
        if (a2 == 10) {
          return 4.65661287e-10;
        }
        if (a2 != 11) {
          return 1.0;
        }
        return 0.0625;
      }
      if (a2 != 12)
      {
LABEL_23:
        if (a2 != 23) {
          return 1.0;
        }
        return 0.0625;
      }
      double result = 9.143238e-11;
      break;
    default:
      GlCustomLog(11, "GlPeLtoEphemeris::GetFloatingScaleFactor: Illegal scale group index:%d\n", v4);
      DeviceFaultNotify("glpe_ephmgr.cpp", 3832, "GetFloatingScaleFactor", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3832, "0");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoEphemeris::isSignedField(BlueFin::GlPeLtoEphemeris *this, unsigned int a2)
{
  if (a2 - 32 >= 6) {
    return BlueFin::GlPeGpsEphemerisBase::isSignedField(this, a2);
  }
  else {
    return (((_BYTE)a2 - 32) & 0x3F) == 4;
  }
}

uint64_t BlueFin::GlPeLtoEphemeris::GetCmpSignedField(BlueFin::GlPeLtoEphemeris *this, int a2)
{
  if (a2 == 36) {
    return ((32 * *(_DWORD *)(*((void *)this + 2) + 72)) >> 28);
  }
  else {
    return BlueFin::GlPeGpsEphemerisBase::GetCmpSignedField(this, a2);
  }
}

BOOL BlueFin::GlPeEphemeris::Kepler(BlueFin::GlPeEphemeris *this, double *a2, double *a3, double *a4)
{
  unsigned int v7 = 0;
  double v8 = *(double *)this;
  *a3 = *(double *)this;
  while (1)
  {
    double v9 = v8 - *(double *)this;
    double v10 = *a2;
    double v11 = v9 - v10 * sin(v8);
    double v8 = v8 - v11;
    *a3 = v8;
    double v12 = fabs(v11);
    if (v12 < 0.00000001) {
      break;
    }
    if (v7++ > 0x12)
    {
      GlCustomLog(14, "GlPeEphMgr::Kepler did not converge in %d iterations\n", 20);
      return v12 < 0.00000001;
    }
  }
  return v12 < 0.00000001;
}

uint64_t BlueFin::GlPeGloEphemeris::GetCmpSignedField(BlueFin::GlPeGloEphemeris *this, int a2)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  switch(a2)
  {
    case 4:
      return (*v2 >> 27);
    case 11:
      unsigned int v4 = v2[4];
      unsigned int v5 = (v4 >> 6) & 0x7FF;
      int v6 = (unsigned __int16)v4 >> 6;
      BOOL v7 = (v4 & 0x10000) == 0;
      goto LABEL_21;
    case 12:
      HIDWORD(v9) = v2[6];
      LODWORD(v9) = v2[7];
      unsigned int v8 = v9 >> 11;
      unsigned int v10 = v8 >> 10;
      int v11 = (v8 >> 10) & 0x1FFFFF;
      goto LABEL_13;
    case 13:
      HIDWORD(v12) = v2[1];
      LODWORD(v12) = v2[2];
      unsigned int v8 = v12 >> 16;
      goto LABEL_8;
    case 14:
      HIDWORD(v13) = v2[3];
      LODWORD(v13) = v2[4];
      unsigned int v8 = v13 >> 13;
      goto LABEL_8;
    case 15:
      HIDWORD(v14) = v2[5];
      LODWORD(v14) = v2[6];
      unsigned int v8 = v14 >> 6;
LABEL_8:
      unsigned int v10 = v8 >> 5;
      int v11 = (v8 >> 5) & 0x3FFFFFF;
      goto LABEL_13;
    case 16:
      HIDWORD(v15) = *v2;
      LODWORD(v15) = v2[1];
      unsigned int v8 = v15 >> 13;
      goto LABEL_12;
    case 17:
      HIDWORD(v16) = v2[2];
      LODWORD(v16) = v2[3];
      unsigned int v8 = v16 >> 10;
      goto LABEL_12;
    case 18:
      HIDWORD(v17) = v2[4];
      LODWORD(v17) = v2[5];
      unsigned int v8 = v17 >> 3;
LABEL_12:
      unsigned int v10 = v8 >> 8;
      int v11 = (v8 >> 8) & 0x7FFFFF;
LABEL_13:
      if ((v8 & 0x80000000) != 0) {
        return -v11;
      }
      else {
        return v10;
      }
    case 19:
      unsigned int v18 = v2[1];
      goto LABEL_20;
    case 20:
      unsigned int v19 = v2[3];
      unsigned int v5 = (v19 >> 13) & 0x1F;
      int v6 = (v19 >> 13) & 0xF;
      BOOL v7 = (v19 & 0x20000) == 0;
      goto LABEL_21;
    case 21:
      unsigned int v20 = v2[5];
      unsigned int v5 = (v20 >> 6) & 0x1F;
      int v6 = (v20 >> 6) & 0xF;
      BOOL v7 = (v20 & 0x400) == 0;
      goto LABEL_21;
    case 28:
      unsigned int v18 = v2[7];
LABEL_20:
      unsigned int v5 = HIWORD(v18) & 0x1F;
      int v6 = HIWORD(v18) & 0xF;
      BOOL v7 = (v18 & 0x100000) == 0;
LABEL_21:
      if (v7) {
        return v5;
      }
      else {
        return -v6;
      }
    default:
      DeviceFaultNotify("glpe_glnephmgr.cpp", 520, "GetCmpSignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 520, "0");
  }
}

double BlueFin::GlPeGloEphemeris::GetFloatingScaleFactor(BlueFin::GlPeGloEphemeris *this, int a2)
{
  double result = 1.0;
  if ((a2 - 8) <= 0x14) {
    return dbl_263BB4C18[(char)(a2 - 8)];
  }
  return result;
}

unint64_t BlueFin::GlPeGloEphemeris::isSignedField(BlueFin::GlPeGloEphemeris *this, int a2)
{
  char v2 = a2 - 2;
  if ((a2 - 2) >= 0x26 || ((0x37FFFFFFFDuLL >> v2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 492, "isSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 492, "0");
  }
  return (0x40FFE04uLL >> v2) & 1;
}

uint64_t BlueFin::GlPeLtoEphemeris::ComputeAgeS(BlueFin::GlPeLtoEphemeris *this, const BlueFin::GlPeGnssTime *a2, int a3)
{
  double v23 = &off_270EBC600;
  uint64_t v24 = 0;
  BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v23);
  unsigned int v5 = ((uint64_t (*)(void))v23[4])(&v23);
  LODWORD(v6) = v24;
  if ((double)v6 * 2.32830644e-10 + (double)v5 < 0.0) {
    return (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *))(*(void *)this + 88))(this);
  }
  if (a3) {
    uint64_t v8 = 28;
  }
  else {
    uint64_t v8 = 34;
  }
  if (a3) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = 7;
  }
  unsigned __int16 v10 = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)this + 192))(this, v8);
  int v11 = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)this + 192))(this, v9);
  unsigned int v12 = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)this + 232))(this, v9) * v11;
  unsigned int v20 = &off_270EBC600;
  double v13 = fmod((double)v12, 1.0);
  if (v13 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v14 = v13 * 4294967300.0 + 0.5;
  unsigned int v15 = v14;
  if (v14 >= 4294967300.0) {
    unsigned int v15 = -1;
  }
  unsigned int v21 = v15;
  unsigned int v22 = v12 + 604800 * v10;
  unsigned int v20 = &off_270EBC600;
  if ((*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *))(*(void *)this + 80))(this))
  {
    unsigned int v16 = ((uint64_t (*)(void))v20[4])(&v20);
    unsigned int v26 = v21;
    unsigned int v27 = v16;
    unsigned int v17 = ((uint64_t (*)(void))v23[4])(&v23);
    v25[0] = v24;
    v25[1] = v17;
    BlueFin::GlTimePoint::resolveAmbiguity(&v26, v25, 0x24EA0000u);
    return ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v23[3])(&v23, v27);
  }
  else
  {
    unsigned int v18 = ((uint64_t (*)(void))v20[4])(&v20);
    LODWORD(v19) = v21;
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v23, (double)v19 * 2.32830644e-10 + (double)(v18 % 0x93A80), &v26);
    return v27;
  }
}

uint64_t BlueFin::GlPeLtoEphemeris::GetCmpUnsignedField(BlueFin::GlPeLtoEphemeris *this, int a2)
{
  char v2 = (_DWORD *)*((void *)this + 2);
  switch(a2)
  {
    case ' ':
      uint64_t result = (v2[17] >> 7) & 0xF;
      break;
    case '!':
      uint64_t result = (v2[17] >> 6) & 1;
      break;
    case '""':
      HIDWORD(v4) = v2[17];
      LODWORD(v4) = v2[18];
      uint64_t result = (v4 >> 6) >> 22;
      break;
    case '#':
      uint64_t result = (v2[18] >> 27) & 1;
      break;
    case '$':
      uint64_t result = (v2[18] >> 23) & 0xF;
      break;
    case '%':
      HIDWORD(v5) = v2[14];
      LODWORD(v5) = v2[15];
      uint64_t result = (v5 >> 4) >> 9;
      break;
    default:
      uint64_t result = BlueFin::GlPeGpsEphemerisBase::GetCmpUnsignedField(this, a2);
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::ComputeAgeS(BlueFin::GlPeGpsEphemerisBase *this, const BlueFin::GlPeGnssTime *a2, int a3)
{
  unsigned int v22 = &off_270EBC600;
  uint64_t v23 = 0;
  BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v22);
  unsigned int v5 = ((uint64_t (*)(void))v22[4])(&v22);
  LODWORD(v6) = v23;
  if ((double)v6 * 2.32830644e-10 + (double)v5 < 0.0) {
    return (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)this + 88))(this);
  }
  unsigned __int16 v8 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 28);
  if (a3) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = 7;
  }
  int v10 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, v9);
  unsigned int v11 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 232))(this, v9) * v10;
  unint64_t v19 = &off_270EBC600;
  double v12 = fmod((double)v11, 1.0);
  if (v12 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v13 = v12 * 4294967300.0 + 0.5;
  unsigned int v14 = v13;
  if (v13 >= 4294967300.0) {
    unsigned int v14 = -1;
  }
  unsigned int v20 = v14;
  unsigned int v21 = v11 + 604800 * v8;
  unint64_t v19 = &off_270EBC600;
  if ((*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)this + 80))(this))
  {
    unsigned int v15 = ((uint64_t (*)(void))v19[4])(&v19);
    unsigned int v25 = v20;
    unsigned int v26 = v15;
    unsigned int v16 = ((uint64_t (*)(void))v22[4])(&v22);
    v24[0] = v23;
    v24[1] = v16;
    BlueFin::GlTimePoint::resolveAmbiguity(&v25, v24, 0x24EA0000u);
    return ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v22[3])(&v22, v26);
  }
  else
  {
    unsigned int v17 = ((uint64_t (*)(void))v19[4])(&v19);
    LODWORD(v18) = v20;
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v22, (double)v18 * 2.32830644e-10 + (double)(v17 % 0x93A80), &v25);
    return v26;
  }
}

uint64_t BlueFin::GlGpsTime::ctFct2fctS(BlueFin::GlGpsTime *this)
{
  return *((unsigned int *)this + 3);
}

void BlueFin::GlPeGnssTime::GetGps(BlueFin::GlPeGnssTime *this, BlueFin::GlGpsTime *a2)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v3 = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = v2;
  *((_DWORD *)a2 + 3) = v3;
  if (*((_DWORD *)this + 2))
  {
    if (BlueFin::GlPeGnssTime::m_potConversionTable)
    {
      double v5 = *(double *)BlueFin::GlPeGnssTime::m_potConversionTable;
      double v6 = fabs(*(double *)BlueFin::GlPeGnssTime::m_potConversionTable);
      double v7 = fmod(v6, 1.0);
      double v8 = v7 * 4294967300.0 + 0.5;
      unsigned int v9 = v8;
      if (v8 >= 4294967300.0) {
        unsigned int v9 = -1;
      }
      if (v7 < 0.0 || v7 >= 1.0)
      {
        unint64_t v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        unint64_t v19 = "glpe_timepoint.h";
        int v20 = 173;
        goto LABEL_30;
      }
      unsigned int v11 = v6;
      if (v5 >= 0.0)
      {
        uint64_t v12 = v2 + v9;
        int v13 = v3 + v11 + HIDWORD(v12);
LABEL_28:
        *((_DWORD *)a2 + 2) = v12;
        *((_DWORD *)a2 + 3) = v13;
        return;
      }
      int v14 = v3 - v11;
      if (v3 > v11 || (v3 == v11 ? (BOOL v15 = v2 >= v9) : (BOOL v15 = 0), v15))
      {
        BOOL v15 = v2 >= v9;
        LODWORD(v12) = v2 - v9;
        int v17 = !v15;
        int v13 = v14 - v17;
        goto LABEL_28;
      }
      if (v11 - v3 == v2 > v9 && v9 == v2)
      {
        int v13 = 0;
        LODWORD(v12) = 0;
        goto LABEL_28;
      }
      unint64_t v18 = "!tDelta.isNegative()";
      DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
      unint64_t v19 = "glpe_datetime.h";
      int v20 = 425;
    }
    else
    {
      unint64_t v18 = "m_potConversionTable != nullptr";
      DeviceFaultNotify("glpe_timemgr.cpp", 426, "GetGps", (char)"m_potConversionTable != nullptr");
      unint64_t v19 = "glpe_timemgr.cpp";
      int v20 = 426;
    }
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetIntegerScaleFactor(BlueFin::GlPeGpsEphemerisBase *this, unsigned int a2)
{
  if (a2 >= 0x20 || ((0xF80400BF >> a2) & 1) == 0)
  {
    GlCustomLog(11, "GlPeGpsEphemerisBase::GetIntegerScaleFactor: Illegal field index:%d\n", a2);
    DeviceFaultNotify("glpe_ephmgr.cpp", 3072, "GetIntegerScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3072, "0");
  }
  return dword_263BB43D8[(char)a2];
}

BOOL BlueFin::GlPeGpsEphemerisBase::isTimeSet(BlueFin::GlPeGpsEphemerisBase *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 27) != 0;
}

uint64_t BlueFin::GlPeAlmanac::GetToa@<X0>(BlueFin::GlPeAlmanac *this@<X0>, const BlueFin::GlGpsTime *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *((_DWORD *)a2 + 2);
  unsigned int v5 = *((_DWORD *)a2 + 3);
  unsigned int v16 = v6;
  unsigned int v17 = v5;
  BOOL v15 = &off_270EBC600;
  if (*((_DWORD *)this + 23) == 2)
  {
    unsigned int v5 = BlueFin::GlSettingsImpl::m_ulActiveBuildFct;
    double v7 = fmod((double)(BlueFin::GlSettingsImpl::m_ulActiveBuildFct % 0x93A80u), 1.0);
    if (v7 >= 1.0) {
      goto LABEL_11;
    }
    double v8 = v7 * 4294967300.0 + 0.5;
    if (v8 >= 4294967300.0) {
      unsigned int v6 = -1;
    }
    else {
      unsigned int v6 = v8;
    }
    unsigned int v16 = v6;
    unsigned int v17 = v5;
  }
  int v9 = *((unsigned __int16 *)this + 44);
  unsigned int v10 = *((_DWORD *)this + 4);
  double v11 = fmod((double)v10, 1.0);
  if (v11 >= 1.0)
  {
LABEL_11:
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v12 = v11 * 4294967300.0 + 0.5;
  unsigned int v13 = v12;
  if (v12 >= 4294967300.0) {
    unsigned int v13 = -1;
  }
  unsigned int v19 = v13;
  unsigned int v20 = v10 + 604800 * v9;
  v18[0] = v6;
  v18[1] = v5;
  BlueFin::GlTimePoint::resolveAmbiguity(&v19, v18, 0x93A8000u);
  uint64_t result = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v15[3])(&v15, v20);
  *(_DWORD *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 12) = result;
  *(void *)a3 = &off_270EBC600;
  return result;
}

unsigned int *BlueFin::GlTimePoint::resolveAmbiguity(unsigned int *result, unsigned int *a2, unsigned int a3)
{
  unsigned int v3 = *a2;
  if (!*a2 || (unsigned int v4 = *result) == 0)
  {
    unsigned int v5 = result[1] % a3 + a2[1] / a3 * a3;
    result[1] = v5;
    int v13 = a2[1] - v5;
    if (v13 <= (int)(a3 >> 1))
    {
      if (v13 > (signed int)-(a3 >> 1)) {
        return result;
      }
      goto LABEL_39;
    }
    goto LABEL_16;
  }
  unsigned int v5 = result[1] % a3 + a2[1] / a3 * a3;
  result[1] = v5;
  unsigned int v6 = a2[1];
  if (v6 > v5 || v3 >= v4 && v6 == v5)
  {
    BOOL v7 = v3 >= v4;
    unsigned int v8 = v3 - v4;
    if (v7) {
      int v9 = 0;
    }
    else {
      int v9 = -1;
    }
    unsigned int v10 = v9 - v5 + v6;
    unsigned int v11 = a3 >> 1;
    BOOL v12 = a3 < 2;
  }
  else
  {
    BOOL v7 = v4 >= v3;
    unsigned int v8 = v4 - v3;
    int v15 = !v7;
    unsigned int v10 = v5 - v15 - v6;
    unsigned int v11 = a3 >> 1;
    BOOL v12 = a3 < 2;
    if (v10 | v8)
    {
      char v16 = 1;
      goto LABEL_24;
    }
  }
  if (v11 < v10) {
    goto LABEL_16;
  }
  if (v11 == v10)
  {
    if (v8) {
      goto LABEL_16;
    }
    char v16 = 0;
    goto LABEL_25;
  }
  char v16 = 0;
LABEL_24:
  if (v11 == v10)
  {
LABEL_25:
    unsigned int v10 = v11;
    if ((v16 & 1) != 0 || v8) {
      goto LABEL_27;
    }
LABEL_16:
    unsigned int v14 = v5 + a3;
LABEL_40:
    result[1] = v14;
    return result;
  }
LABEL_27:
  char v17 = v12 ^ v16;
  if ((v17 & 1) == 0) {
    goto LABEL_34;
  }
  if (v10 < v11)
  {
    if ((v16 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_35:
    if (v10 != v11) {
      return result;
    }
    goto LABEL_36;
  }
  if (v10 != v11)
  {
LABEL_34:
    if ((v16 & 1) == 0) {
      goto LABEL_35;
    }
LABEL_39:
    unsigned int v14 = v5 - a3;
    goto LABEL_40;
  }
  if (v16) {
    goto LABEL_39;
  }
LABEL_36:
  BOOL v18 = v8 == 0;
  char v19 = v17 ^ 1;
  if (!v18) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0) {
    goto LABEL_39;
  }
  return result;
}

uint64_t BlueFin::GlGpsTime::fct2CtFctS(BlueFin::GlGpsTime *this, uint64_t a2)
{
  return a2;
}

BOOL BlueFin::GlPeGpsEphemerisBase::isHealthy(BlueFin::GlPeGpsEphemerisBase *this)
{
  unint64_t v2 = *((unsigned __int8 *)this + 8);
  if ((v2 & 0xF) == 2)
  {
    int v3 = 63;
  }
  else
  {
    unint64_t v4 = v2 >> 4;
    if v2 < 0x50 && ((0x1Du >> v4))
    {
      int v3 = dword_263BB43C4[v4];
    }
    else if (v4 == 5)
    {
      int v3 = 31;
    }
    else
    {
      int v3 = 255;
    }
  }
  return ((*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 3) & v3) == 0&& (*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 4) < 0xF;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetCmpUnsignedField(BlueFin::GlPeGpsEphemerisBase *this, int a2)
{
  unint64_t v2 = (_DWORD *)*((void *)this + 2);
  switch(a2)
  {
    case 0:
      uint64_t result = *v2 >> 26;
      break;
    case 1:
      uint64_t result = (v2[14] >> 10) & 3;
      break;
    case 2:
      uint64_t result = (v2[17] >> 12) & 1;
      break;
    case 3:
      uint64_t result = (*v2 >> 14) & 0x3F;
      break;
    case 4:
      uint64_t result = (*v2 >> 20) & 0xF;
      break;
    case 5:
      uint64_t result = (*v2 >> 4) & 0x3FF;
      break;
    case 7:
      uint64_t result = (unsigned __int16)(v2[1] >> 12);
      break;
    case 15:
      uint64_t result = (__PAIR64__(v2[5], v2[6]) >> 14);
      break;
    case 17:
      uint64_t result = (__PAIR64__(v2[7], v2[8]) >> 30);
      break;
    case 18:
      uint64_t result = (unsigned __int16)(v2[8] >> 14);
      break;
    case 27:
      uint64_t result = (v2[14] >> 22) & 1;
      break;
    case 28:
      uint64_t result = (v2[14] >> 12) & 0x3FF;
      break;
    case 29:
      uint64_t result = (*v2 >> 4);
      break;
    case 30:
      uint64_t result = (v2[8] >> 13) & 1;
      break;
    case 31:
      uint64_t result = (v2[17] >> 11) & 1;
      break;
    default:
      GlCustomLog(11, "GlPeGpsEphemerisBase::GetCmpUnsignedField: Illegal field index:%d\n", a2);
      DeviceFaultNotify("glpe_ephmgr.cpp", 2886, "GetCmpUnsignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 2886, "0");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoEphemeris::GetIntegerScaleFactor(BlueFin::GlPeLtoEphemeris *this, unsigned int a2)
{
  if (a2 - 32 >= 5) {
    return BlueFin::GlPeGpsEphemerisBase::GetIntegerScaleFactor(this, a2);
  }
  else {
    return 1;
  }
}

uint64_t BlueFin::GlPeGpsEphemeris::GetSrc(BlueFin::GlPeGpsEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 3430, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3430, "false");
  }
  return dword_263BB2E60[v1];
}

uint64_t BlueFin::GlPeGalEphemeris::GetSrc(BlueFin::GlPeGalEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_galephmgr.cpp", 509, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 509, "false");
  }
  return dword_263BB2E60[v1];
}

double BlueFin::GlPeBdsEphemeris::GetFloatingScaleFactor(BlueFin::GlPeBdsEphemeris *this, int a2)
{
  double result = 1.0;
  if ((a2 - 6) <= 0x14) {
    return dbl_263BB3DE8[(char)(a2 - 6)];
  }
  return result;
}

unint64_t BlueFin::GlPeBdsEphemeris::isSignedField(BlueFin::GlPeBdsEphemeris *this, unsigned int a2)
{
  if (a2 >= 0x22 || ((0x31FFFFFFFuLL >> a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_bdephmgr.cpp", 624, "isSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 624, "0");
  }
  return (0x7F97F40uLL >> a2) & 1;
}

uint64_t BlueFin::GlPeNicEphemeris::GetCmpUnsignedField(BlueFin::GlPeNicEphemeris *this, int a2)
{
  uint64_t v2 = *((void *)this + 2);
  switch(a2)
  {
    case 0:
      return *(_DWORD *)v2 >> 26;
    case 1:
      return (*(_DWORD *)(v2 + 56) >> 23) & 3;
    case 2:
      return (*(_DWORD *)(v2 + 56) >> 22) & 1;
    case 3:
      return *(_WORD *)(v2 + 58) & 0x3F;
    case 4:
      HIDWORD(v4) = *(_DWORD *)(v2 + 4);
      LODWORD(v4) = *(_DWORD *)(v2 + 8);
      return (v4 >> 2) >> 28;
    case 5:
    case 29:
      return *(unsigned __int8 *)(v2 + 13);
    case 7:
      return (unsigned __int16)(*(_DWORD *)(v2 + 8) >> 14);
    case 15:
      unsigned int v6 = *(_DWORD *)(v2 + 32);
      unsigned int v5 = *(_DWORD *)(v2 + 36);
      goto LABEL_11;
    case 17:
      unsigned int v6 = *(_DWORD *)(v2 + 36);
      unsigned int v5 = *(_DWORD *)(v2 + 40);
LABEL_11:
      uint64_t result = (__PAIR64__(v6, v5) >> 16);
      break;
    case 18:
      uint64_t result = *(unsigned __int16 *)(v2 + 34);
      break;
    case 27:
      uint64_t result = (*(_DWORD *)(v2 + 56) >> 25) & 1;
      break;
    case 28:
      uint64_t result = *(_WORD *)(v2 + 2) & 0x3FF;
      break;
    case 32:
      uint64_t result = (*(_DWORD *)(v2 + 56) >> 15) & 1;
      break;
    default:
      DeviceFaultNotify("glpe_nicephmgr.cpp", 968, "GetCmpUnsignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 968, "0");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoEphemeris::GetSrc(BlueFin::GlPeLtoEphemeris *this)
{
  if ((*((unsigned char *)this + 8) & 0xF) == 2) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t BlueFin::GlPeQzssEphemeris::GetSrc(BlueFin::GlPeQzssEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeQzssEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 3511, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3511, "false");
  }
  return dword_263BB2E60[v1];
}

double BlueFin::GlPeNicEphemeris::GetFloatingScaleFactor(BlueFin::GlPeNicEphemeris *this, int a2)
{
  double result = 1.0;
  if ((a2 - 6) <= 0x14) {
    return dbl_263BB3080[(char)(a2 - 6)];
  }
  return result;
}

unint64_t BlueFin::GlPeNicEphemeris::isSignedField(BlueFin::GlPeNicEphemeris *this, unsigned int a2)
{
  if (a2 >= 0x21 || ((0x13FFFFFDFuLL >> a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1010, "isSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 1010, "0");
  }
  return (0x7F97F40uLL >> a2) & 1;
}

uint64_t BlueFin::GlPeGpsTimeMgr::GetDeltaUTCSec(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlGpsTime *a2, int *a3)
{
  double v14 = 0.0;
  Utc__n128 Time = BlueFin::GlPeGpsTimeMgr::getUtcTime(this, a2, &v14);
  if (UtcTime)
  {
    unsigned int v6 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
    LODWORD(v7) = *((_DWORD *)a2 + 2);
    long double v8 = fmod((double)v7 * 2.32830644e-10 + (double)(v6 % 0x93A80), 86400.0);
    double v9 = v8 - v14;
    double v10 = 0.5;
    if (v9 <= 0.0)
    {
      double v10 = -0.5;
      if (v9 >= 0.0)
      {
        int v12 = 0;
        goto LABEL_9;
      }
    }
    int v11 = (int)(v9 + v10);
    *a3 = v11;
    if (v11 >= 43201)
    {
      int v12 = v11 - 86400;
LABEL_9:
      *a3 = v12;
      return UtcTime;
    }
    if (v11 <= -43201)
    {
      int v12 = v11 + 86400;
      goto LABEL_9;
    }
  }
  return UtcTime;
}

uint64_t BlueFin::GlPeGpsTimeMgr::getUtcTime(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlGpsTime *a2, double *a3)
{
  if (!*((_DWORD *)this + 18) || BlueFin::GlPeGpsTimeMgr::isExpired(this, a2) || !*((unsigned char *)this + 108)) {
    return 0;
  }
  unsigned int v6 = (BlueFin::GlPeGpsTimeMgr *)((char *)this + 64);
  int v7 = ((*(unsigned int (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2)
                       / 0x93A80)
     - *((unsigned __int8 *)this + 107);
  if (v7 >= 0) {
    LOWORD(v8) = v7;
  }
  else {
    int v8 = -v7;
  }
  __int16 v9 = v7 + 256;
  if (v7 >= -127) {
    __int16 v9 = v7;
  }
  if (v7 >= 128) {
    __int16 v10 = v7 - 256;
  }
  else {
    __int16 v10 = v9;
  }
  if ((unsigned __int16)v8 == 128) {
    __int16 v11 = 0;
  }
  else {
    __int16 v11 = v10;
  }
  unsigned int v12 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
  LODWORD(v13) = *((_DWORD *)a2 + 2);
  double v14 = (double)v13 * 2.32830644e-10 + (double)(v12 % 0x93A80);
  int v15 = (int)v14;
  if (v11 > 0)
  {
    BOOL v17 = v15 < 21600 && *((unsigned char *)this + 108) == 7 && v11 == 1;
    BOOL v18 = (char *)this + 106;
    char v19 = (char *)this + 109;
    if (!v17)
    {
      BOOL v21 = 0;
      unsigned int v22 = v19;
      goto LABEL_37;
    }
    BOOL v21 = 1;
    goto LABEL_36;
  }
  if (v11)
  {
    BOOL v21 = 0;
    BOOL v18 = (char *)this + 106;
    char v19 = (char *)this + 109;
LABEL_36:
    unsigned int v22 = v18;
    goto LABEL_37;
  }
  int v23 = 86400 * *((char *)this + 108);
  BOOL v24 = __OFSUB__(v15, v23);
  int v25 = v15 - v23;
  if ((v25 < 0) ^ v24 | (v25 == 0)) {
    char v26 = 1;
  }
  else {
    char v26 = 0;
  }
  if (v25 < 0) {
    int v25 = -v25;
  }
  unsigned int v27 = v25 >> 5;
  BOOL v21 = v27 < 0x2A3;
  if (v27 < 0x2A3) {
    char v26 = 1;
  }
  BOOL v18 = (char *)this + 106;
  char v19 = (char *)this + 109;
  unsigned int v22 = v19;
  if (v26) {
    goto LABEL_36;
  }
LABEL_37:
  double v28 = (double)*v22;
  BlueFin::GlPeGpsUtcModel::computeUtcSysOffsetS(v6, a2);
  double v30 = v29 + v28;
  if (v21)
  {
    int v31 = *v19 + 86400 - *v18;
    double v32 = fmod(v14 - v30 + -43200.0, 86400.0);
    if (v32 < 0.0) {
      double v32 = v32 + 86400.0;
    }
    double v33 = fmod(v32 + 43200.0, (double)v31);
    goto LABEL_43;
  }
  double v34 = fmod(v14 - v30, 86400.0);
  *a3 = v34;
  if (v34 < 0.0)
  {
    double v33 = v34 + 86400.0;
LABEL_43:
    *a3 = v33;
  }
  return 1;
}

uint64_t BlueFin::GlPeAlmMgr::Eph2Alm(BlueFin::GlPeAlmMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 27);
  if (result)
  {
    if (*(_DWORD *)(*((void *)this + 56) + 2576))
    {
      unint64_t v5 = (unint64_t)*((unsigned __int8 *)a2 + 8) >> 4;
      (*(void (**)(__n128 *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(v20, a2);
      int v21 = v5;
      unint64_t v6 = v20[0].n128_u8[0];
      unsigned __int8 v22 = v20[0].n128_u8[0];
      uint64_t result = BlueFin::GlPeAlmMgr::IsFresh((uint64_t)this, (uint64_t)&v21);
      if ((result & 1) == 0)
      {
        __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 56), 1, v20);
        if (v5 != 2
          || (uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, __n128))(*(void *)a2 + 152))(a2, Time), result == 3)&& ((*(unsigned int *)(*(void *)(*((void *)this + 54) + 120) + ((v6 >> 3) & 0x1C)) >> (v6 & 0x1F)) & 1) != 0)
        {
          BlueFin::GlPeEphemeris::GetEphTime(a2, (const BlueFin::GlPeGnssTime *)v20, (uint64_t)v19);
          BlueFin::GlPeEphemeris::GetEphTime(a2, (const BlueFin::GlPeGnssTime *)v20, (uint64_t)v18);
          double v8 = BlueFin::GlPeGnssTime::operator-(v19, (uint64_t)v18);
          uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, v5, v6);
          char v16 = &off_270EBC600;
          uint64_t v17 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v19, (BlueFin::GlGpsTime *)&v16);
          *(_DWORD *)(AlmReference + 104) = v5;
          *(unsigned char *)(AlmReference + 108) = v6;
          *(_WORD *)uint64_t AlmReference = BlueFin::GlPeAlmanacPlainOldData::Gnss2almId(v5, v6);
          *(_WORD *)(AlmReference + 2) = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 3);
          *(double *)(AlmReference + 8) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 15);
          unsigned int v10 = ((uint64_t (*)(void))v16[4])(&v16);
          LODWORD(v11) = v17;
          double v12 = (double)v11 * 2.32830644e-10 + (double)(v10 % 0x93A80);
          double v13 = fmod(v12, 4294967300.0);
          if (v12 <= 4294967300.0) {
            double v13 = v12;
          }
          if (v13 < -4294967300.0) {
            double v13 = -fmod(-v13, 4294967300.0);
          }
          if (v13 < 0.0) {
            unsigned int v14 = --v13;
          }
          else {
            unsigned int v14 = v13;
          }
          *(_DWORD *)(AlmReference + 16) = v14;
          *(double *)(AlmReference + 24) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 22);
          *(double *)(AlmReference + 32) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 25);
          *(double *)(AlmReference + 40) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 17);
          *(double *)(AlmReference + 48) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 20);
          *(double *)(AlmReference + 56) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 24);
          *(double *)(AlmReference + 64) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 13);
          *(double *)(AlmReference + 80) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 9);
          *(double *)(AlmReference + 72) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 10)
                                         + *(double *)(AlmReference + 80) * v8;
          *(_WORD *)(AlmReference + 88) = (((unsigned int (*)(void))v16[4])(&v16) / 0x93A80);
          *(_DWORD *)(AlmReference + 92) = 3;
          if ((v6 - 64) <= 0xC0u)
          {
            DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          }
          uint64_t v15 = *((void *)this + 54) + 48 * v5;
          *(_DWORD *)(*(void *)(v15 + 24) + ((v6 >> 3) & 0x1C)) |= 1 << v6;
          uint64_t result = BlueFin::GlSetBase::Remove(v15, v6);
          *((unsigned char *)this + 36712) = 0;
        }
      }
    }
  }
  return result;
}

unsigned char *BlueFin::GlPeGnssSatPosTriplet::GlPeGnssSatPosTriplet(unsigned char *a1, uint64_t a2, unsigned int *a3, int a4, char a5, uint64_t a6, double a7)
{
  *a1 = 0;
  char v26 = a5;
  Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a2 + 384), a4);
  if (Mgr)
  {
    double v12 = Mgr;
    uint64_t v13 = (*(uint64_t (**)(void *, char *, uint64_t))(*Mgr + 112))(Mgr, &v26, 1);
    if (v13)
    {
      uint64_t v14 = v13;
      if (!(*(unsigned int (**)(void *, uint64_t, void, double))(*v12 + 72))(v12, v13, 0, a7 + -15000.0)&& !(*(unsigned int (**)(void *, uint64_t, void, double))(*v12 + 72))(v12, v14, 0, a7)&& !(*(unsigned int (**)(void *, uint64_t, void, double))(*v12 + 72))(v12, v14, 0, a7 + 15000.0))
      {
        BlueFin::GlPeTimeManager::GetTime(a3, a7, 0, (uint64_t)&v23);
        uint64_t v20 = v23;
        int v21 = v24;
        long long v22 = v25;
        BlueFin::GlPeGnssTime::operator-=((unsigned int *)&v20, 15.0);
        *a1 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double))(*(void *)v14 + 112))(v14, &v20, a6, 0.0);
        char v15 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double))(*(void *)v14 + 112))(v14, &v23, a6 + 80, 0.0);
        if (*a1) {
          char v16 = v15;
        }
        else {
          char v16 = 0;
        }
        *a1 = v16;
        long long v22 = v25;
        LODWORD(v20) = v23;
        HIDWORD(v20) = HIDWORD(v23) + 15;
        int v21 = v24;
        char v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, double))(*(void *)v14 + 112))(v14, &v20, a6 + 160, 0.0);
        if (*a1) {
          char v18 = v17;
        }
        else {
          char v18 = 0;
        }
        *a1 = v18;
      }
    }
  }
  return a1;
}

uint64_t BlueFin::GlPeSatPos::GetSatPos(BlueFin::GlPeTimeMgrUtil *a1, unsigned __int8 *a2, double *a3, int *a4, uint64_t a5, double a6)
{
  double v12 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)a1 + 2215) + 119744);
  int v16 = 7;
  LOBYTE(v17) = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v12, a2, (uint64_t)&v16);
  uint64_t result = 0;
  char v14 = v17;
  if (v17 - 1 <= 0x3E)
  {
    int v15 = v16;
    LOBYTE(v16) = *a2;
    int v17 = v15;
    char v18 = v14;
    return BlueFin::GlPeSatPos::GetSatPosInternal(a1, (unsigned __int8 *)&v16, a3, a4, a5, a6);
  }
  return result;
}

BOOL BlueFin::GlPeSvIdConverter::SvId2Gnss(BlueFin::GlPeGloFcnOsnMgr **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
  if (v5 == 7)
  {
    unsigned __int8 v10 = 0;
    BOOL result = 0;
  }
  else if (v5 == 2)
  {
    unint64_t v6 = *a1;
    if (v6)
    {
      unsigned int v7 = v4 - 52;
      char v8 = v4 - 59;
      if (v7 >= 0xE) {
        char v8 = -8;
      }
      unsigned __int8 v14 = 0;
      BOOL result = BlueFin::GlPeGloFcnOsnMgr::FCN2OSN(v6, v8, &v14);
      unsigned __int8 v10 = v14;
    }
    else
    {
      unsigned int v12 = 24;
      char v11 = 52;
LABEL_15:
      unsigned __int8 v13 = v4 - v11;
      BOOL result = v13 < v12;
      if (v13 < v12) {
        unsigned __int8 v10 = v13 + 1;
      }
      else {
        unsigned __int8 v10 = 0;
      }
    }
  }
  else
  {
    unsigned __int8 v10 = 0;
    char v11 = BlueFin::GlSvId::s_aucGnss2minSvId[v5];
    unsigned int v12 = 32;
    BOOL result = 0;
    switch(BlueFin::GlSvId::s_aucSvId2gnss[v4])
    {
      case 0:
        goto LABEL_15;
      case 1:
        unsigned int v12 = 19;
        goto LABEL_15;
      case 2:
        break;
      case 3:
        unsigned int v12 = 10;
        goto LABEL_15;
      case 4:
        unsigned int v12 = 63;
        goto LABEL_15;
      case 5:
        unsigned int v12 = 36;
        goto LABEL_15;
      case 6:
        unsigned int v12 = 14;
        goto LABEL_15;
      default:
        BOOL result = 0;
        break;
    }
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 4) = v10;
  return result;
}

uint64_t BlueFin::GlPeSatPos::GetSatPosInternal(BlueFin::GlPeTimeMgrUtil *DefaultAlmSatPos, unsigned __int8 *a2, double *a3, int *a4, uint64_t a5, double a6)
{
  char v11 = DefaultAlmSatPos;
  int v12 = *a4;
  if ((*a4 & 0x20) != 0)
  {
    uint64_t v13 = *((void *)DefaultAlmSatPos + 2215) + 34112;
    double v14 = fmod(a6, 4294967300.0);
    if (a6 <= 4294967300.0) {
      double v14 = a6;
    }
    if (v14 < -4294967300.0) {
      double v14 = -fmod(-v14, 4294967300.0);
    }
    if (v14 < 0.0) {
      unsigned int v15 = --v14;
    }
    else {
      unsigned int v15 = v14;
    }
    DefaultAlmSatPos = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeAlmMgr::GetDefaultAlmSatPos(v13, (uint64_t)(a2 + 4), v15, a5);
    if (DefaultAlmSatPos) {
      return 1;
    }
    int v12 = *a4;
  }
  char v16 = v12;
  if ((v12 & 0x4A) != 0)
  {
    uint64_t v17 = *((void *)v11 + 2215);
    double v18 = *a3;
    if ((v12 & 0x80) == 0 && !*(unsigned char *)(v17 + 120021))
    {
      unint64_t v19 = *a2;
      if (v19 >= 0xBD)
      {
        DeviceFaultNotify("glpe_satpos.cpp", 390, "getMiniEph", (char)"*rtSvID <= MAX_SVID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 390, "*rtSvID <= MAX_SVID");
      }
      unint64_t v20 = *((unsigned __int8 *)v11 + v19 + 17512);
      if (v20 <= 0x5A)
      {
        double v21 = *((double *)v11 + 24 * v20 + 8);
        if (((int)(a6 - v21) + 15000) <= 0x6F54)
        {
          long long v22 = (char *)v11 + 192 * v20;
          *(_DWORD *)(a5 + 64) = *((_DWORD *)v22 + 13);
          double v23 = (v21 + 15000.0 - a6) / 15000.0;
          double v24 = v23 * 0.5 * (v23 + -1.0);
          double v25 = *((double *)v22 + 9) + v23 * *((double *)v22 + 10) + v24 * *((double *)v22 + 11);
          double v26 = *((double *)v22 + 12) + v23 * *((double *)v22 + 13) + v24 * *((double *)v22 + 14);
          double v27 = *((double *)v22 + 15) + v23 * *((double *)v22 + 16) + v24 * *((double *)v22 + 17);
          double v28 = v26 + v25 * -0.0000729211515 * v18;
          if (v18 != 0.0)
          {
            double v25 = v25 + v26 * 0.0000729211515 * v18;
            double v26 = v28;
          }
          *(double *)a5 = v25;
          *(double *)(a5 + 8) = v26;
          *(double *)(a5 + 16) = v27;
          double v29 = 0.0;
          double v30 = 0.0;
          double v31 = 0.0;
          if ((v16 & 0x10) == 0)
          {
            double v32 = (double *)((char *)v11 + 192 * v20);
            double v29 = v32[18] + v23 * v32[19] + v24 * v32[20];
            double v30 = v32[21] + v23 * v32[22] + v24 * v32[23];
            double v31 = v32[24] + v23 * v32[25] + v24 * v32[26];
            if (v18 != 0.0)
            {
              double v33 = v29 * -0.0000729211515;
              double v29 = v29 + v30 * 0.0000729211515 * v18;
              double v30 = v30 + v33 * v18;
            }
          }
          *(double *)(a5 + 24) = v29;
          *(double *)(a5 + 32) = v30;
          *(double *)(a5 + 40) = v31;
          double v34 = (double *)((char *)v11 + 192 * v20);
          *(double *)(a5 + 48) = v34[27] + v23 * v34[28];
          *(double *)(a5 + 56) = v34[28] * 0.0666666667;
          return 1;
        }
      }
    }
    DefaultAlmSatPos = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeGnssSatPos::GlPeGnssSatPos(&v40, v17, *((unsigned int **)v11 + 2216), *((_DWORD *)a2 + 1), a2[8], a5, a6, v18);
    if (v40) {
      return 1;
    }
    int v12 = *a4;
  }
  if ((v12 & 4) == 0) {
    return 0;
  }
  uint64_t v36 = *((void *)v11 + 2215) + 34112;
  unsigned int v37 = *((_DWORD *)a2 + 1);
  unsigned int v38 = a2[8];
  unsigned int v39 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(DefaultAlmSatPos, a6);
  return BlueFin::GlPeAlmMgr::GetSatPos(v36, v37, v38, v39, a5);
}

unsigned char *BlueFin::GlPeGnssSatPos::GlPeGnssSatPos(unsigned char *a1, uint64_t a2, unsigned int *a3, int a4, char a5, uint64_t a6, double a7, double a8)
{
  *a1 = 0;
  char v19 = a5;
  Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a2 + 384), a4);
  if (Mgr)
  {
    double v14 = Mgr;
    uint64_t v15 = (*(uint64_t (**)(void *, char *, uint64_t))(*Mgr + 112))(Mgr, &v19, 1);
    if (v15)
    {
      uint64_t v16 = v15;
      if (!(*(unsigned int (**)(void *, uint64_t, void, double))(*v14 + 72))(v14, v15, 0, a7))
      {
        BlueFin::GlPeTimeManager::GetTime(a3, a7, 0, (uint64_t)v18);
        *a1 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, double))(*(void *)v16 + 112))(v16, v18, a6, a8);
      }
    }
  }
  return a1;
}

unsigned int *BlueFin::GlPeTimeManager::GetTime@<X0>(unsigned int *this@<X0>, double a2@<D0>, int a3@<W1>, uint64_t a4@<X8>)
{
  double v5 = a2;
  uint64_t v6 = (uint64_t)this;
  if (a3 && (unsigned int v8 = this[1201], v8 != -7200001) && (double)v8 == a2)
  {
    *(void *)a4 = *((void *)this + 601);
    *(_DWORD *)(a4 + 8) = this[1204];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(this + 1206);
  }
  else
  {
    *(void *)a4 = *((void *)this + 326);
    unsigned int v9 = this[654];
    *(_DWORD *)(a4 + 8) = v9;
    double v10 = *((double *)this + 328);
    double v11 = *((double *)this + 329);
    *(double *)(a4 + 16) = v10;
    *(double *)(a4 + 24) = v11;
    if (v9 == -1 || v11 == 4294967300.0)
    {
      *(void *)(a4 + 16) = 0;
      double v12 = floor(v5 * 0.001) * 1000.0;
      double v5 = v12;
    }
    else
    {
      double v12 = v5 - v10;
    }
    this = BlueFin::GlPeGnssTime::operator+=((unsigned int *)a4, v12 * 0.001);
    *(double *)(a4 + 16) = v5;
    if (a3
      && *(_DWORD *)(a4 + 8) != -1
      && *(double *)(a4 + 24) != 4294967300.0
      && *(double *)(v6 + 2736) != 4294967300.0)
    {
      double v13 = (v5 - *(double *)(v6 + 2720)) * 0.001;
      uint64_t v14 = *(void *)(v6 + 32);
      double v15 = (double)*(__int16 *)(v14 + 2) * 0.000000001;
      double v16 = (double)*(__int16 *)(v14 + 10) * 0.000000001;
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
      }
      this = BlueFin::GlPeGnssTime::operator-=((unsigned int *)a4, *(double *)(v6 + 2728) + v13 * v15);
      *(double *)(a4 + 24) = *(double *)(v6 + 2736) + fabs(v13) * 1000000.0 * (v16 + 0.000000005);
    }
  }
  return this;
}

unsigned int *BlueFin::GlPeGnssTime::operator+=(unsigned int *a1, double a2)
{
  double v4 = fabs(a2);
  double v5 = fmod(v4, 1.0);
  double v6 = v5 * 4294967300.0 + 0.5;
  unsigned int v7 = v6;
  if (v6 >= 4294967300.0) {
    unsigned int v7 = -1;
  }
  if (v5 < 0.0 || v5 >= 1.0)
  {
    double v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    char v19 = "glpe_timepoint.h";
    int v20 = 173;
    goto LABEL_26;
  }
  unsigned int v9 = v4;
  uint64_t v10 = *a1;
  unsigned int v11 = a1[1];
  if (a2 < 0.0)
  {
    if (v11 > v9 || (v11 == v9 ? (BOOL v14 = v10 >= v7) : (BOOL v14 = 0), v14))
    {
      BOOL v14 = v10 >= v7;
      LODWORD(v12) = v10 - v7;
      int v16 = !v14;
      int v13 = v11 - v9 - v16;
    }
    else
    {
      if (v9 - v11 != v10 > v7 || v7 != v10)
      {
        double v18 = "!otTmp.isNegative()";
        DeviceFaultNotify("glpe_datetime.h", 1360, "operator+=", (char)"!otTmp.isNegative()");
        char v19 = "glpe_datetime.h";
        int v20 = 1360;
LABEL_26:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
      }
      int v13 = 0;
      LODWORD(v12) = 0;
    }
  }
  else
  {
    uint64_t v12 = v10 + v7;
    int v13 = v11 + v9 + HIDWORD(v12);
  }
  *a1 = v12;
  a1[1] = v13;
  return a1;
}

unsigned int *BlueFin::GlPeGnssTime::operator-=(unsigned int *a1, double a2)
{
  double v4 = fabs(a2);
  double v5 = fmod(v4, 1.0);
  double v6 = v5 * 4294967300.0 + 0.5;
  unsigned int v7 = v6;
  if (v6 >= 4294967300.0) {
    unsigned int v7 = -1;
  }
  if (v5 < 0.0 || v5 >= 1.0)
  {
    double v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    char v19 = "glpe_timepoint.h";
    int v20 = 173;
    goto LABEL_27;
  }
  unsigned int v9 = v4;
  uint64_t v10 = *a1;
  unsigned int v11 = a1[1];
  if (a2 >= 0.0 && v4 | v7)
  {
    if (v11 > v9 || (v11 == v9 ? (BOOL v12 = v10 >= v7) : (BOOL v12 = 0), v12))
    {
      BOOL v12 = v10 >= v7;
      LODWORD(v15) = v10 - v7;
      int v16 = !v12;
      int v14 = v11 - v9 - v16;
    }
    else
    {
      if (v9 - v11 != v10 > v7 || v7 != v10)
      {
        double v18 = "!otTmp.isNegative()";
        DeviceFaultNotify("glpe_datetime.h", 1372, "operator-=", (char)"!otTmp.isNegative()");
        char v19 = "glpe_datetime.h";
        int v20 = 1372;
LABEL_27:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
      }
      int v14 = 0;
      LODWORD(v15) = 0;
    }
  }
  else
  {
    uint64_t v15 = v10 + v7;
    int v14 = v11 + v9 + HIDWORD(v15);
  }
  *a1 = v15;
  a1[1] = v14;
  return a1;
}

void *BlueFin::GlPeGnssEphemerisMgr::GetMgr(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      BOOL result = a1 + 1;
      break;
    case 1:
      BOOL result = (void *)a1[872];
      break;
    case 2:
      BOOL result = (void *)a1[873];
      break;
    case 3:
      BOOL result = (void *)a1[874];
      break;
    case 4:
      BOOL result = (void *)a1[875];
      break;
    case 5:
      BOOL result = (void *)a1[876];
      break;
    case 6:
      BOOL result = (void *)a1[877];
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

{
  void *result;

  switch(a2)
  {
    case 0:
      BOOL result = a1 + 1;
      break;
    case 1:
      BOOL result = (void *)a1[872];
      break;
    case 2:
      BOOL result = (void *)a1[873];
      break;
    case 3:
      BOOL result = (void *)a1[874];
      break;
    case 4:
      BOOL result = (void *)a1[875];
      break;
    case 5:
      BOOL result = (void *)a1[876];
      break;
    case 6:
      BOOL result = (void *)a1[877];
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::IsEphValid(BlueFin::GlPeEphemerisMgr *this, const BlueFin::GlPeEphemeris *a2, double a3)
{
  if (!*(_DWORD *)(*((void *)this + 2) + 2576)) {
    return 3;
  }
  (*(void (**)(__int16 *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(v25, a2);
  if ((*(unsigned int (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 144))(a2) == 2)
  {
    BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)this + 4), *((_DWORD *)this + 3), 0, (unsigned int *)&v23);
    if (((unint64_t)*(unsigned int *)(v23.n128_u64[0] + (((unint64_t)LOBYTE(v25[0]) >> 3) & 0x1C)) >> (v25[0] & 0x1F))) {
      return 2;
    }
  }
  if (!(*(unsigned int (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 40))(a2)) {
    return 6;
  }
  unsigned int v7 = *((_DWORD *)a2 + 6);
  if (v7 != -7200001) {
    goto LABEL_25;
  }
  __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, &v23);
  double v9 = (*(double (**)(const BlueFin::GlPeEphemeris *, __n128 *, uint64_t, __n128))(*(void *)a2 + 64))(a2, &v23, 1, Time);
  if (v9 <= 0.0)
  {
    if (v9 >= 0.0)
    {
      int v11 = 0;
      goto LABEL_15;
    }
    double v10 = -0.5;
  }
  else
  {
    double v10 = 0.5;
  }
  int v11 = (int)(v9 + v10);
LABEL_15:
  BOOL v12 = (BlueFin::GlPeTimeMgrUtil *)(*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 88))(a2);
  if ((int)v12 >= 0) {
    int v13 = (int)v12;
  }
  else {
    int v13 = v12 + 1;
  }
  int v14 = v13 >> 1;
  if (v11 < -(v13 >> 1) || v14 < v11)
  {
    unsigned int v7 = *((_DWORD *)a2 + 6);
  }
  else
  {
    int v16 = v14 - v11;
    double v17 = v24;
    double v18 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeMgrUtil::DoubleToLms(v12, v24 - (double)(unint64_t)(1000 * (v14 + v11)));
    unsigned int v7 = v18;
    *((_DWORD *)a2 + 6) = v18;
    *((_DWORD *)a2 + 7) = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v18, v17 + (double)(unint64_t)(1000 * v16));
  }
  if (v7 == -7200001) {
    return 1;
  }
LABEL_25:
  double v19 = (double)(int)v7;
  if (v7 <= 0xFF9222FE) {
    double v19 = (double)v7;
  }
  if (v19 > a3) {
    return 1;
  }
  unsigned int v20 = *((_DWORD *)a2 + 7);
  double v21 = (double)(int)v20;
  if (v20 <= 0xFF9222FE) {
    double v21 = (double)v20;
  }
  if (v21 < a3) {
    return 1;
  }
  if (((unint64_t)*(unsigned int *)(*((void *)this + 48) + (((unint64_t)LOBYTE(v25[0]) >> 3) & 0x1C)) >> (v25[0] & 0x1F)))
  {
    uint64_t v22 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, __int16 *))(*(void *)this + 368))(this, v25);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 184))(v22)) {
      return 2;
    }
    BlueFin::GlSetBase::Remove((uint64_t)this + 384, LOBYTE(v25[0]));
  }
  return 0;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetGnssId@<X0>(BlueFin::GlPeGpsEphemerisBase *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, void))(*(void *)this + 192))(this, 0);
  *a2 = result;
  return result;
}

BOOL BlueFin::GlPeBdsEphemeris::isHealthy(BlueFin::GlPeBdsEphemeris *this)
{
  return ((*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 3) & 1) == 0;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetGnssId@<X0>(BlueFin::GlPeBdsEphemeris *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, void))(*(void *)this + 192))(this, 0);
  *a2 = result;
  return result;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetBdUncmprsdEph(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a2 = 0;
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 36) = 0u;
  *(_OWORD *)(a2 + 52) = 0u;
  *(_OWORD *)(a2 + 68) = 0u;
  *(_OWORD *)(a2 + 84) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4);
  *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 3);
  *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 5);
  *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 29);
  *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 6);
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 7);
  *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 8);
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 9);
  *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 10);
  *(_DWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 11);
  *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 12);
  *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 13);
  *(_DWORD *)(a2 + 68) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 14);
  *(_DWORD *)(a2 + 80) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 15);
  *(_DWORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 16);
  *(_DWORD *)(a2 + 84) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 17);
  *(_DWORD *)(a2 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 18);
  *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 19);
  *(_DWORD *)(a2 + 92) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 20);
  *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 21);
  *(_DWORD *)(a2 + 96) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 22);
  *(_DWORD *)(a2 + 60) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 23);
  *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 24);
  *(_DWORD *)(a2 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 25);
  *(_DWORD *)(a2 + 108) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 26);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 28);
  *(_DWORD *)(a2 + 24) = result;
  return result;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetCmpSignedField(BlueFin::GlPeBdsEphemeris *this, int a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (BlueFin::GlPeBdsEphemeris::isD2Format(this))
  {
    switch(a2)
    {
      case 6:
        HIDWORD(v4) = *(_DWORD *)v3;
        LODWORD(v4) = *(_DWORD *)(v3 + 4);
        return ((int)(v4 >> 6) >> 22);
      case 8:
        return ((4 * *(_DWORD *)(v3 + 16)) >> 21);
      case 9:
        HIDWORD(v9) = *(_DWORD *)(v3 + 12);
        LODWORD(v9) = *(_DWORD *)(v3 + 16);
        int v8 = v9 >> 20;
        return (v8 >> 10);
      case 10:
        HIDWORD(v11) = *(_DWORD *)(v3 + 8);
        LODWORD(v11) = *(_DWORD *)(v3 + 12);
        int v10 = v11 >> 12;
        return (v10 >> 8);
      case 11:
        return ((int)(*(_DWORD *)(v3 + 48) << 11) >> 14);
      case 12:
        HIDWORD(v12) = *(_DWORD *)(v3 + 16);
        LODWORD(v12) = *(_DWORD *)(v3 + 20);
        return ((int)(v12 >> 14) >> 16);
      case 13:
        goto LABEL_6;
      case 14:
        return ((4 * *(_DWORD *)(v3 + 20)) >> 14);
      case 16:
        HIDWORD(v14) = *(_DWORD *)(v3 + 20);
        LODWORD(v14) = *(_DWORD *)(v3 + 24);
        int v13 = v14 >> 12;
        return (v13 >> 14);
      case 19:
        return *(unsigned __int8 *)(v3 + 37) | ((int)(*(_DWORD *)(v3 + 32) << 6) >> 22 << 8);
      case 20:
        unsigned int v6 = *(_DWORD *)(v3 + 56);
        unsigned int v7 = *(_DWORD *)(v3 + 60);
        goto LABEL_39;
      case 21:
        HIDWORD(v15) = *(_DWORD *)(v3 + 36);
        LODWORD(v15) = *(_DWORD *)(v3 + 40);
        int v13 = v15 >> 8;
        return (v13 >> 14);
      case 22:
        HIDWORD(v16) = *(_DWORD *)(v3 + 40);
        LODWORD(v16) = *(_DWORD *)(v3 + 44);
        return (v16 >> 5) & 0xFFFFF800 | ((unsigned __int16)v16 >> 7) | (*(_DWORD *)(v3 + 68) >> 7) & 0x600;
      case 23:
        HIDWORD(v17) = *(_DWORD *)(v3 + 44);
        LODWORD(v17) = *(_DWORD *)(v3 + 48);
        int v13 = v17 >> 7;
        return (v13 >> 14);
      case 24:
        HIDWORD(v18) = *(_DWORD *)(v3 + 52);
        LODWORD(v18) = *(_DWORD *)(v3 + 56);
        return (v18 >> 11) & 0xFFFFFFE0 | *(_DWORD *)(v3 + 60) & 0x1F;
      case 25:
        HIDWORD(v19) = *(_DWORD *)(v3 + 48);
        LODWORD(v19) = *(_DWORD *)(v3 + 52);
        int v10 = v19 >> 3;
        return (v10 >> 8);
      case 26:
        return (*(int *)(v3 + 64) >> 18);
      default:
        DeviceFaultNotify("glpe_bdephmgr.cpp", 658, "GetCmpSignedField", (char)"0");
        int v26 = 658;
        goto LABEL_45;
    }
  }
  switch(a2)
  {
    case 6:
      return ((2 * *(_DWORD *)(v3 + 8)) >> 22);
    case 8:
      return ((__int16)*(_DWORD *)(v3 + 8) >> 5);
    case 9:
      HIDWORD(v20) = *(_DWORD *)v3;
      LODWORD(v20) = *(_DWORD *)(v3 + 4);
      int v8 = v20 >> 16;
      return (v8 >> 10);
    case 10:
      HIDWORD(v21) = *(_DWORD *)(v3 + 12);
      LODWORD(v21) = *(_DWORD *)(v3 + 16);
      int v10 = v21 >> 16;
      return (v10 >> 8);
    case 11:
      HIDWORD(v22) = *(_DWORD *)(v3 + 32);
      LODWORD(v22) = *(_DWORD *)(v3 + 36);
      int v13 = v22 >> 2;
      return (v13 >> 14);
    case 12:
      return *(__int16 *)(v3 + 28);
    case 13:
LABEL_6:
      unsigned int v6 = *(_DWORD *)(v3 + 24);
      unsigned int v7 = *(_DWORD *)(v3 + 28);
      goto LABEL_39;
    case 14:
      return (*(int *)(v3 + 32) >> 14) & 0xFFFFFFFC | *(unsigned char *)(v3 + 43) & 3;
    case 16:
      unsigned int v23 = *(_DWORD *)(v3 + 36);
      unsigned int v24 = *(_DWORD *)(v3 + 40);
      goto LABEL_34;
    case 19:
      unsigned int v23 = *(_DWORD *)(v3 + 56);
      unsigned int v24 = *(_DWORD *)(v3 + 60);
      goto LABEL_34;
    case 20:
      unsigned int v6 = *(_DWORD *)(v3 + 40);
      unsigned int v7 = *(_DWORD *)(v3 + 44);
      goto LABEL_39;
    case 21:
      unsigned int v23 = *(_DWORD *)(v3 + 48);
      unsigned int v24 = *(_DWORD *)(v3 + 52);
LABEL_34:
      int v13 = __PAIR64__(v23, v24) >> 16;
      return (v13 >> 14);
    case 22:
      unsigned int v6 = *(_DWORD *)(v3 + 52);
      unsigned int v7 = *(_DWORD *)(v3 + 56);
      goto LABEL_39;
    case 23:
      return ((4 * *(_DWORD *)(v3 + 40)) >> 14) & 0xFFFFC000 | ((unsigned __int16)*(_DWORD *)(v3 + 32) >> 2);
    case 24:
      unsigned int v6 = *(_DWORD *)(v3 + 44);
      unsigned int v7 = *(_DWORD *)(v3 + 48);
LABEL_39:
      uint64_t result = (__PAIR64__(v6, v7) >> 16);
      break;
    case 25:
      HIDWORD(v25) = *(_DWORD *)(v3 + 60);
      LODWORD(v25) = *(_DWORD *)(v3 + 64);
      uint64_t result = (char)(SHIDWORD(v25) >> 6) & 0xFFFFE000 | ((v25 >> 1) >> 19);
      break;
    case 26:
      uint64_t result = ((4 * *(_DWORD *)(v3 + 52)) >> 18);
      break;
    default:
      DeviceFaultNotify("glpe_bdephmgr.cpp", 683, "GetCmpSignedField", (char)"0");
      int v26 = 683;
LABEL_45:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", v26, "0");
  }
  return result;
}

BOOL BlueFin::GlPeBdsEphemeris::isD2Format(BlueFin::GlPeBdsEphemeris *this)
{
  int v2 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 32);
  uint64_t v3 = *(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192);
  if (v2 == 1) {
    return v3(this, 33) == 0;
  }
  unsigned __int8 v5 = v3(this, 0);
  return v5 - 1 < 5 || v5 - 59 < 5;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetCmpUnsignedField(BlueFin::GlPeBdsEphemeris *this, int a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (a2 > 26)
  {
    switch(a2)
    {
      case 27:
        return (*(_DWORD *)(v3 + 68) >> 13) & 1;
      case 32:
        return (*(_DWORD *)v3 >> 17) & 1;
      case 33:
        return HIWORD(*(_DWORD *)v3) & 1;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        return *(unsigned __int8 *)(v3 + 3);
      case 1:
        return (*(_DWORD *)v3 >> 18) & 0x3F;
      case 2:
        return (*(_DWORD *)(v3 + 68) >> 14) & 1;
    }
  }
  if (BlueFin::GlPeBdsEphemeris::isD2Format(this))
  {
    switch(a2)
    {
      case 3:
        return (*(_DWORD *)v3 >> 15) & 1;
      case 4:
        return (*(_DWORD *)v3 >> 6) & 0xF;
      case 5:
        return (*(_DWORD *)v3 >> 10) & 0x1F;
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
        goto LABEL_42;
      case 7:
        HIDWORD(v6) = *(_DWORD *)(v3 + 4);
        LODWORD(v6) = *(_DWORD *)(v3 + 8);
        unsigned int v5 = v6 >> 3;
        return v5 >> 15;
      case 15:
        HIDWORD(v7) = *(_DWORD *)(v3 + 28);
        LODWORD(v7) = *(_DWORD *)(v3 + 32);
        return (*(_DWORD *)(v3 + 24) << 6) & 0xFFC00000 | ((v7 >> 16) >> 10);
      case 17:
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        unsigned int v9 = *(_DWORD *)(v3 + 36);
        return (__PAIR64__(v8, v9) >> 16);
      case 18:
        return (*(_DWORD *)(v3 + 40) >> 5) & 0x1FFFF;
      default:
        if (a2 != 28)
        {
          if (a2 == 29) {
            return (*(_DWORD *)(v3 + 16) >> 14) & 0x1F;
          }
LABEL_42:
          DeviceFaultNotify("glpe_bdephmgr.cpp", 563, "GetCmpUnsignedField", (char)"0");
          int v12 = 563;
LABEL_44:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", v12, "0");
        }
        uint64_t result = (unsigned __int16)*(_DWORD *)(v3 + 4) >> 3;
        break;
    }
  }
  else
  {
    switch(a2)
    {
      case 3:
        return (*(_DWORD *)(v3 + 16) >> 23) & 1;
      case 4:
        HIDWORD(v10) = *(_DWORD *)(v3 + 8);
        LODWORD(v10) = *(_DWORD *)(v3 + 12);
        return (v10 >> 1) >> 28;
      case 5:
        return (*(_DWORD *)(v3 + 16) >> 18) & 0x1F;
      case 6:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 16:
        goto LABEL_43;
      case 7:
        HIDWORD(v11) = *(_DWORD *)(v3 + 4);
        LODWORD(v11) = *(_DWORD *)(v3 + 8);
        unsigned int v5 = v11 >> 16;
        return v5 >> 15;
      case 15:
        unsigned int v8 = *(_DWORD *)(v3 + 20);
        unsigned int v9 = *(_DWORD *)(v3 + 24);
        return (__PAIR64__(v8, v9) >> 16);
      case 17:
        unsigned int v8 = *(_DWORD *)(v3 + 16);
        unsigned int v9 = *(_DWORD *)(v3 + 20);
        return (__PAIR64__(v8, v9) >> 16);
      case 18:
        return (*(_DWORD *)(v3 + 40) >> 7) & 0x18000 | ((unsigned __int16)*(_DWORD *)(v3 + 60) >> 1);
      default:
        if (a2 == 28)
        {
          uint64_t result = *(_WORD *)(v3 + 14) & 0x1FFF;
        }
        else
        {
          if (a2 != 29)
          {
LABEL_43:
            DeviceFaultNotify("glpe_bdephmgr.cpp", 580, "GetCmpUnsignedField", (char)"0");
            int v12 = 580;
            goto LABEL_44;
          }
          uint64_t result = *(_WORD *)(v3 + 10) & 0x1F;
        }
        break;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::GetSatPos(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  int v29 = 7;
  char v30 = 0;
  int v19 = -65536;
  uint64_t v20 = 0;
  int v21 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  __int16 v26 = 0;
  int v27 = -1;
  char v28 = 0;
  int Alm = BlueFin::GlPeAlmMgr::GetAlm(a1, a2, a3, (uint64_t)&v19, 1, 1);
  uint64_t result = 0;
  if (Alm)
  {
    BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(a1 + 448), a4, 1, (uint64_t)&v15);
    unint64_t v17 = &off_270EBC600;
    unint64_t v18 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v15, (BlueFin::GlGpsTime *)&v17);
    uint64_t Toa = BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&v19, (const BlueFin::GlGpsTime *)&v17, (uint64_t)&v15);
    unsigned int v11 = v18;
    unsigned int v12 = HIDWORD(v18);
    if (v16)
    {
      if (v18 < v16)
      {
        unsigned int v12 = (__PAIR64__(HIDWORD(v16) - HIDWORD(v18), v16) - v18) >> 32;
        unsigned int v11 = v16 - v18;
        char v13 = 1;
      }
      else
      {
        char v13 = 0;
        unsigned int v12 = (v18 - v16) >> 32;
        unsigned int v11 = v18 - v16;
      }
    }
    else
    {
      char v13 = 0;
    }
    double v14 = (double)v11 * 2.32830644e-10 + (double)v12;
    if ((v13 & ((v12 | v11) != 0)) != 0) {
      double v14 = -v14;
    }
    return BlueFin::GlPeAlmMgr::GetSatPos(v14, Toa, (uint64_t)&v19, a5, 0);
  }
  return result;
}

BOOL BlueFin::GlPeGloFcnOsnMgr::FCN2OSN(BlueFin::GlPeGloFcnOsnMgr *this, int a2, unsigned __int8 *a3)
{
  if ((a2 - 7) <= 0xF1u)
  {
    DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 322, "FCN2OSN", (char)"IS_GLONASS_FCN(cFcn)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 322, "IS_GLONASS_FCN(cFcn)");
  }
  unsigned int v6 = (a2 + 7);
  if (*((unsigned char *)this + 1249)) {
    goto LABEL_3;
  }
  unsigned int v8 = (const BlueFin::GlPeTimeManager *)*((void *)this + 2);
  unsigned int v9 = *((_DWORD *)v8 + 642);
  unsigned int v10 = *((_DWORD *)this + 276);
  BOOL v11 = v10 != -7200001 && v10 >= v9;
  if (!v11)
  {
    unsigned int v12 = (BlueFin::GlPeGloFcnOsnMgr *)((char *)this + 1104);
    if (*((unsigned char *)this + 1108))
    {
      int v13 = *((unsigned __int8 *)this + 1164);
      BlueFin::GlPeGloFcnOsnMgr::stCachedPositionAndTime::Update(v12, *(const BlueFin::GlPeAsstMgr **)this, v8);
      if (v13) {
        goto LABEL_19;
      }
    }
    else
    {
      BlueFin::GlPeGloFcnOsnMgr::stCachedPositionAndTime::Update(v12, *(const BlueFin::GlPeAsstMgr **)this, v8);
    }
    if (*((unsigned char *)this + 1108) && *((unsigned char *)this + 1164))
    {
      for (uint64_t i = 0; i != 280; i += 20)
        *(_DWORD *)((char *)this + i + 432) = -7200001;
      for (uint64_t j = 0; j != 384; j += 16)
        *(_DWORD *)((char *)this + j + 716) = -7200001;
    }
  }
LABEL_19:
  unint64_t v16 = (unsigned int *)((char *)this + 20 * v6 + 432);
  unint64_t v17 = (char *)this + 20 * v6;
  if (v17[448]) {
    BOOL v18 = *((_DWORD *)this + 5 * v6 + 111) == 1;
  }
  else {
    BOOL v18 = 1;
  }
  if (*v16 == v9)
  {
    if (!*((_DWORD *)this + 5 * v6 + 111)) {
      BOOL v18 = 0;
    }
    if (v18) {
      int v19 = *((unsigned __int8 *)this + 20 * v6 + 440);
    }
    else {
      int v19 = 0;
    }
    *a3 = v19;
    return v19 != 0;
  }
  *unint64_t v16 = v9;
  uint64_t v20 = (_DWORD *)((char *)this + 20 * v6 + 444);
  uint64_t v21 = *v20;
  if (v21)
  {
    if (v9 - *((_DWORD *)this + 5 * v6 + 109) >= BlueFin::GlPeGloFcnOsnMgr::m_aulMaxFcnToOsnMs[v21])
    {
      *uint64_t v20 = 0;
    }
    else if (v18)
    {
LABEL_3:
      *a3 = *((unsigned char *)this + 20 * v6 + 440);
      return 1;
    }
  }
  int v22 = *((_DWORD *)this + 304);
  if (v22 != -7200001)
  {
    if (v9 - v22 >= 0x1B7740)
    {
      int v23 = 0;
      int v24 = 0;
      char v25 = 0;
      *((_DWORD *)this + 304) = -7200001;
      goto LABEL_50;
    }
    *((unsigned char *)this + 712) = 1;
    BlueFin::GlPeGloFcnOsnMgr::GetPossibleOsnsForFcn(this, a2, &v80, v81);
    *((unsigned char *)this + 712) = 0;
    int v24 = v80;
    if (v80)
    {
      unint64_t v26 = *((unsigned int *)this + 305);
      int v23 = v81[0];
      if ((v26 >> v80))
      {
        if (!v81[0] || ((v26 >> v81[0]) & 1) == 0) {
          goto LABEL_100;
        }
        goto LABEL_49;
      }
    }
    else
    {
      int v23 = v81[0];
    }
    if (v23)
    {
      unint64_t v27 = *((unsigned int *)this + 305);
      if ((v27 >> v23) & 1) == 0 || v80 && ((v27 >> v80))
      {
        char v25 = 1;
        goto LABEL_50;
      }
      LOBYTE(v24) = v23;
LABEL_100:
      *uint64_t v20 = 3;
      double v52 = (char *)this + 20 * v6;
      v52[440] = v24;
      *((_DWORD *)v52 + 109) = v9;
      *a3 = v24;
      return 1;
    }
LABEL_49:
    char v25 = 1;
    goto LABEL_50;
  }
  int v23 = 0;
  int v24 = 0;
  char v25 = 0;
LABEL_50:
  char v28 = v17 + 448;
  if (*v28) {
    goto LABEL_51;
  }
  *((_DWORD *)this + 5 * v6 + 109) = v9;
  if (!*((unsigned char *)this + 1164)) {
    goto LABEL_51;
  }
  if ((v25 & 1) == 0)
  {
    *((unsigned char *)this + 712) = 1;
    BlueFin::GlPeGloFcnOsnMgr::GetPossibleOsnsForFcn(this, a2, &v80, v81);
    *((unsigned char *)this + 712) = 0;
    int v24 = v80;
    int v23 = v81[0];
  }
  if (!(v24 | v23)) {
    goto LABEL_51;
  }
  double v58 = v28;
  uint64_t v30 = 0;
  v60 = (char *)this + 1168;
  char v31 = 1;
  do
  {
    char v32 = v31;
    unsigned __int8 v33 = v81[v30 - 1];
    if (v33)
    {
      LOBYTE(v64) = v81[v30 - 1];
      uint64_t v34 = (*(uint64_t (**)(void, float *, uint64_t))(**((void **)this + 1) + 112))(*((void *)this + 1), &v64, 1);
      if (v34)
      {
        double v35 = (_DWORD *)v34;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 152))(v34) == 1
          && (BlueFin::GlPeEphemeris::isExpired(v35, (uint64_t)v60) & 1) == 0)
        {
          double v53 = (char *)this + 20 * v6;
          v53[440] = v33;
          if (!(*(unsigned int (**)(_DWORD *))(*(void *)v35 + 184))(v35))
          {
            int v56 = 2;
            goto LABEL_108;
          }
          double v55 = v28;
          v54 = (int *)((char *)this + 20 * v6 + 444);
          *double v58 = 0;
          int v56 = 1;
LABEL_109:
          int *v54 = v56;
LABEL_110:
          BlueFin::GlPeGloFcnOsnMgr::checkForDuplicateOsns((uint64_t)this, v9, v6);
          int v57 = *v54;
          if (*v54)
          {
            if (v57 == 1 || !*v55)
            {
              LOBYTE(v57) = v53[440];
              BOOL v7 = 1;
              goto LABEL_116;
            }
            LOBYTE(v57) = 0;
          }
          BOOL v7 = 0;
LABEL_116:
          *a3 = v57;
          return v7;
        }
      }
    }
    char v31 = 0;
    uint64_t v30 = 1;
  }
  while ((v32 & 1) != 0);
  if (*((unsigned char *)this + 1108))
  {
    uint64_t v36 = 0;
    BOOL v7 = 0;
    signed int v37 = *((_DWORD *)this + 290) / 0x12Cu;
    if (v37 >= 4) {
      signed int v37 = 4;
    }
    float v38 = (float)BlueFin::GlPeGloFcnOsnMgr::FCN2OSN(signed char,unsigned char &)const::scMaskAngles[v37];
    char v39 = 1;
    while (1)
    {
      char v40 = v39;
      unsigned __int8 v41 = v81[v36 - 1];
      if (v41) {
        break;
      }
LABEL_97:
      char v39 = 0;
      uint64_t v36 = 1;
      if ((v40 & 1) == 0) {
        goto LABEL_52;
      }
    }
    char v61 = v39;
    unsigned __int8 v79 = v81[v36 - 1];
    uint64_t v78 = 0;
    memset(v76, 0, sizeof(v76));
    int v77 = 0;
    v42 = (_DWORD *)(*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**((void **)this + 1) + 112))(*((void *)this + 1), &v79, 1);
    double v43 = v42;
    if (!v42) {
      goto LABEL_79;
    }
    if (BlueFin::GlPeEphemeris::isExpired(v42, (uint64_t)v60))
    {
      LODWORD(v43) = 0;
      goto LABEL_79;
    }
    if ((v43[8] & 0xF) == 1
      && (*(unsigned int (**)(unsigned char *, uint64_t))(*(void *)v43 + 208))(v43, 4) == -8)
    {
      BlueFin::GlPeGloEphMgr::SetEphFcn(*((BlueFin::GlPeEphemerisMgr **)this + 1), (uint64_t)&v79, a2);
    }
    char v59 = (*(uint64_t (**)(unsigned char *, char *, _OWORD *, double))(*(void *)v43 + 112))(v43, v60, v76, 0.0);
    LODWORD(v43) = (*(unsigned int (**)(unsigned char *))(*(void *)v43 + 152))(v43) - 1 > 1
                 ? 0
                 : (*(uint64_t (**)(unsigned char *))(*(void *)v43 + 184))(v43);
    if (v59)
    {
LABEL_94:
      float v64 = -90.0;
      (*(void (**)(void, _OWORD *, char *, char *, void, void, void, float *))(**((void **)this + 3)
                                                                                                + 80))(*((void *)this + 3), v76, (char *)this + 1136, (char *)this + 1112, 0, 0, 0, &v64);
      if (v64 > v38)
      {
        double v53 = (char *)this + 20 * v6;
        v53[440] = v41;
        if (v43 && *((_DWORD *)this + 290) <= 9u)
        {
          double v55 = v58;
          v54 = (int *)((char *)this + 20 * v6 + 444);
          int *v54 = 1;
          *double v58 = 0;
          goto LABEL_110;
        }
        int v56 = 3;
LABEL_108:
        double v55 = v58;
        v54 = (int *)((char *)this + 20 * v6 + 444);
        goto LABEL_109;
      }
      BOOL v7 = 1;
    }
    else
    {
LABEL_79:
      int v74 = 7;
      char v75 = 0;
      float v64 = NAN;
      uint64_t v65 = 0;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      __int16 v71 = 0;
      int v66 = 0;
      int v72 = -1;
      char v73 = 0;
      if (BlueFin::GlPeAlmMgr::GetAlm(*(void *)this + 34112, 2u, v79, (uint64_t)&v64, 1, 1))
      {
        BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&v64, (BlueFin::GlPeGloFcnOsnMgr *)((char *)this + 1200), (uint64_t)v62);
        unsigned int v44 = *((_DWORD *)this + 302);
        unsigned int v45 = *((_DWORD *)this + 303);
        if (v63)
        {
          unsigned int v46 = v45 - HIDWORD(v63);
          if (__PAIR64__(v45, v44) < v63)
          {
            unsigned int v49 = HIDWORD(v63) - v45;
            BOOL v11 = v63 >= v44;
            unsigned int v44 = v63 - v44;
            int v50 = !v11;
            unsigned int v45 = v49 - v50;
            char v47 = 1;
          }
          else
          {
            char v47 = 0;
            BOOL v11 = v44 >= v63;
            v44 -= v63;
            int v48 = !v11;
            unsigned int v45 = v46 - v48;
          }
        }
        else
        {
          char v47 = 0;
        }
        double v51 = (double)v44 * 2.32830644e-10 + (double)v45;
        if ((v47 & ((v45 | v44) != 0)) != 0) {
          double v51 = -v51;
        }
        if (BlueFin::GlPeAlmMgr::GetSatPos(v51, *(void *)this + 34112, (uint64_t)&v64, (uint64_t)v76, 0))goto LABEL_94; {
      }
        }
    }
    char v40 = v61;
    goto LABEL_97;
  }
LABEL_51:
  BOOL v7 = 0;
LABEL_52:
  *a3 = 0;
  return v7;
}

uint64_t BlueFin::GlPeAlmMgr::GetSatPos(double a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (fabs(a1) > 15724800.0) {
    int v6 = (*(_DWORD *)(a3 + 104) != 1) & ~a5;
  }
  else {
    int v6 = 0;
  }
  if ((v6 & 1) == 0)
  {
    uint64_t v8 = a3 + 8;
    double v9 = *(double *)(a3 + 8);
    __double2 v10 = __sincos_stret(*(double *)(a3 + 24));
    __double2 v11 = __sincos_stret(*(double *)(v8 + 48));
    double v12 = *(double *)(v8 + 32) * *(double *)(v8 + 32);
    double v32 = sqrt(v12 * (1.0 - v9 * v9) * 3.986005e14);
    double v34 = *(double *)(v8 + 56) + sqrt(3.986005e14 / (v12 * (v12 * v12))) * a1;
    double v33 = 0.0;
    BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v34, (double *)v8, &v33, v13);
    __double2 v14 = __sincos_stret(v33);
    double v15 = *(double *)v8;
    double v16 = 1.0 - v15 * v15;
    long double v17 = atan2(v14.__sinval * sqrt(v16), v14.__cosval - *(double *)v8);
    double v18 = v17 + *(double *)(v8 + 48);
    long double v19 = v12 * (v16 / (v15 * cos(v17) + 1.0));
    __double2 v20 = __sincos_stret(v18);
    long double v21 = v20.__cosval * v19;
    long double v22 = v20.__sinval * v19;
    double v23 = *(double *)(v8 + 24) + -0.0000729211515;
    LODWORD(v24) = *(_DWORD *)(v8 + 8);
    __double2 v25 = __sincos_stret(*(double *)(v8 + 40) + v23 * a1 + (double)v24 * -0.0000729211515);
    long double v26 = v21 * v25.__cosval - v10.__cosval * v22 * v25.__sinval;
    long double v27 = v10.__cosval * v22 * v25.__cosval + v21 * v25.__sinval;
    *(long double *)a4 = v26;
    *(long double *)(a4 + 8) = v27;
    double v28 = -3.986005e14 / v32 * (v20.__sinval + v15 * v11.__sinval);
    double v29 = v10.__cosval * (-3.986005e14 / v32 * (v20.__cosval + v15 * v11.__cosval));
    *(long double *)(a4 + 16) = v10.__sinval * v22;
    *(long double *)(a4 + 24) = v29 * v25.__sinval + v25.__cosval * v28 - v23 * v27;
    *(long double *)(a4 + 32) = v25.__sinval * v28 - v25.__cosval * v29 + v23 * v26;
    *(double *)(a4 + 40) = -(v29 * v10.__sinval) / v10.__cosval;
    double v30 = *(double *)(v8 + 72);
    *(double *)(a4 + 48) = *(double *)(v8 + 64) + v30 * a1;
    *(double *)(a4 + 56) = v30;
    *(_DWORD *)(a4 + 64) = 4;
  }
  return v6 ^ 1u;
}

uint64_t BlueFin::GlPeLtoEphemeris::GetEphDataSrc(BlueFin::GlPeLtoEphemeris *this)
{
  if ((*((unsigned char *)this + 8) & 0xF) == 2) {
    return 2;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t BlueFin::GlPeGloEphMgr::GetEph(uint64_t a1, unsigned char *a2, int a3)
{
  if (*(unsigned char *)(a1 + 7969)) {
    return 0;
  }
  else {
    return BlueFin::GlPeEphemerisMgr::GetEph((void *)a1, a2, a3);
  }
}

uint64_t BlueFin::GlPeGalEphemeris::GetCurveFitIntervalS(BlueFin::GlPeGalEphemeris *this)
{
  (*(void (**)(char *__return_ptr))(*(void *)this + 136))((char *)&v3 + 1);
  if (BYTE1(v3) == 14) {
    return 10800;
  }
  (*(void (**)(uint64_t *__return_ptr, BlueFin::GlPeGalEphemeris *))(*(void *)this + 136))(&v3, this);
  if (v3 == 18) {
    return 10800;
  }
  else {
    return 28800;
  }
}

uint64_t BlueFin::GlPeGalEphemeris::GetGnssId@<X0>(BlueFin::GlPeGalEphemeris *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, void))(*(void *)this + 192))(this, 0);
  *a2 = result;
  return result;
}

uint64_t BlueFin::GlPeBdsEphemeris::ComputeAgeS(BlueFin::GlPeBdsEphemeris *this, const BlueFin::GlPeGnssTime *a2, int a3)
{
  __double2 v20 = &off_270EBF588;
  uint64_t v21 = 0;
  BlueFin::GlPeGnssTime::GetBds(a2, (BlueFin::GlBdsTime *)&v20);
  unsigned int v5 = ((uint64_t (*)(void))v20[4])(&v20);
  LODWORD(v6) = v21;
  if ((double)v6 * 2.32830644e-10 + (double)v5 < 0.0) {
    return (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *))(*(void *)this + 88))(this);
  }
  unsigned __int16 v8 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
  if (a3) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = 7;
  }
  int v10 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, v9);
  unsigned int v11 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 232))(this, v9) * v10;
  long double v17 = &off_270EBF588;
  double v12 = fmod((double)v11, 1.0);
  if (v12 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v13 = v12 * 4294967300.0 + 0.5;
  unsigned int v14 = v13;
  if (v13 >= 4294967300.0) {
    unsigned int v14 = -1;
  }
  unsigned int v18 = v14;
  int v19 = v11 + 604800 * v8 + 820108814;
  long double v17 = &off_270EBF588;
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *))(*(void *)this + 80))(this);
  if (!result)
  {
    unsigned int v15 = ((uint64_t (*)(void))v17[4])(&v17);
    LODWORD(v16) = v18;
    return BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v20, (double)v16 * 2.32830644e-10 + (double)(v15 % 0x93A80), &v22);
  }
  return result;
}

BOOL BlueFin::GlPeBdsEphemeris::GetPvt(uint64_t a1, BlueFin::GlPeGnssTime *a2, uint64_t a3, double a4)
{
  v23[0] = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  BlueFin::GlPeBdsEphemeris::GetBdUncmprsdEph(a1, (uint64_t)v23);
  v21[0].i64[0] = (uint64_t)&off_270EBF588;
  v21[0].i64[1] = 0;
  BlueFin::GlPeGnssTime::GetBds(a2, (BlueFin::GlBdsTime *)v21);
  unsigned int v7 = (*(uint64_t (**)(int8x16_t *))(v21[0].i64[0] + 32))(v21);
  LODWORD(v8) = v21[0].i32[2];
  double v22 = ((double)v8 * 2.32830644e-10 + (double)(v7 % 0x93A80)) * 1000.0;
  memset(v21, 0, sizeof(v21));
  unsigned __int8 v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 192))(a1, 0);
  BOOL v11 = v9 - 1 < 5 || v9 - 59 < 5;
  int SatPos = BlueFin::BdSvStateCompute::GetSatPos(v11, (uint64_t)v23, (unint64_t *)&v22, (double *)v21[0].i64);
  if (!SatPos)
  {
    uint64_t v13 = v21[1].i64[0];
    int8x16_t v14 = (int8x16_t)vmulq_f64((float64x2_t)v21[0], (float64x2_t)xmmword_263BB3C00);
    int8x16_t v15 = (int8x16_t)vmlaq_n_f64((float64x2_t)v21[0], (float64x2_t)vextq_s8(v14, v14, 8uLL), a4);
    *(int32x2_t *)v14.i8 = vdup_n_s32(a4 != 0.0);
    v16.i64[0] = v14.u32[0];
    v16.i64[1] = v14.u32[1];
    int8x16_t v17 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v16, 0x3FuLL));
    *(int8x16_t *)a3 = vbslq_s8(v17, v15, v21[0]);
    *(void *)(a3 + 16) = v13;
    int8x16_t v18 = (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)&v21[1] + 8), (float64x2_t)xmmword_263BB3C00);
    *(int8x16_t *)(a3 + 24) = vbslq_s8(v17, (int8x16_t)vmlaq_n_f64(*(float64x2_t *)((char *)&v21[1] + 8), (float64x2_t)vextq_s8(v18, v18, 8uLL), a4), *(int8x16_t *)((char *)&v21[1] + 8));
    *(int8x16_t *)(a3 + 40) = *(int8x16_t *)((char *)&v21[2] + 8);
    *(void *)(a3 + 56) = v21[3].i64[1];
    *(_DWORD *)(a3 + 64) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  }
  return SatPos == 0;
}

uint64_t BlueFin::GlBdsTime::ctFct2fctS(BlueFin::GlBdsTime *this)
{
  return (*((_DWORD *)this + 3) - 820108814);
}

void BlueFin::GlPeGnssTime::GetBds(BlueFin::GlPeGnssTime *this, BlueFin::GlBdsTime *a2)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v3 = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = v2;
  *((_DWORD *)a2 + 3) = v3;
  if (*((_DWORD *)this + 2) != 4)
  {
    if (BlueFin::GlPeGnssTime::m_potConversionTable)
    {
      double v5 = *(double *)(BlueFin::GlPeGnssTime::m_potConversionTable + 32);
      double v6 = fabs(v5);
      double v7 = fmod(v6, 1.0);
      double v8 = v7 * 4294967300.0 + 0.5;
      unsigned int v9 = v8;
      if (v8 >= 4294967300.0) {
        unsigned int v9 = -1;
      }
      if (v7 < 0.0 || v7 >= 1.0)
      {
        int8x16_t v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        int v19 = "glpe_timepoint.h";
        int v20 = 173;
        goto LABEL_30;
      }
      unsigned int v11 = v6;
      if (v5 >= 0.0)
      {
        uint64_t v12 = v2 + v9;
        int v13 = v3 + v11 + HIDWORD(v12);
LABEL_27:
        *((_DWORD *)a2 + 2) = v12;
        *((_DWORD *)a2 + 3) = v13;
        return;
      }
      int v14 = v3 - v11;
      if (v3 > v11 || (v3 == v11 ? (BOOL v15 = v2 >= v9) : (BOOL v15 = 0), v15))
      {
        BOOL v15 = v2 >= v9;
        LODWORD(v12) = v2 - v9;
        int v17 = !v15;
        int v13 = v14 - v17;
        goto LABEL_27;
      }
      if (v11 - v3 == v2 > v9 && v9 == v2)
      {
        int v13 = 0;
        LODWORD(v12) = 0;
        goto LABEL_27;
      }
      int8x16_t v18 = "!tDelta.isNegative()";
      DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
      int v19 = "glpe_datetime.h";
      int v20 = 425;
    }
    else
    {
      int8x16_t v18 = "m_potConversionTable != nullptr";
      DeviceFaultNotify("glpe_timemgr.cpp", 489, "GetBds", (char)"m_potConversionTable != nullptr");
      int v19 = "glpe_timemgr.cpp";
      int v20 = 489;
    }
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
}

uint64_t BlueFin::GlPeBdsEphemeris::GetSrc(BlueFin::GlPeBdsEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_bdephmgr.cpp", 396, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 396, "false");
  }
  return dword_263BB2E60[v1];
}

uint64_t BlueFin::BdSvStateCompute::GetSatPos(int a1, uint64_t a2, unint64_t *a3, double *a4)
{
  BlueFin::BdNavMsgMgr::UnpackEphPara(a2, (uint64_t)v11);
  if (v11[0])
  {
    if (v11[0]) {
      return 1;
    }
    else {
      return 2;
    }
  }
  else
  {
    double v8 = *(double *)a3 / 1000.0 - (double)(v12 | 0x408F400000000000uLL);
    double v9 = v8 + 604800.0;
    if (v8 >= -302400.0) {
      double v9 = *(double *)a3 / 1000.0 - (double)(v12 | 0x408F400000000000uLL);
    }
    if (v8 <= 302400.0) {
      double v10 = v9;
    }
    else {
      double v10 = v8 + -604800.0;
    }
    uint64_t result = 2;
    if (v10 <= 7200.0 && v10 >= -7200.0)
    {
      if (a1 == 1) {
        BlueFin::BdNavMsgMgr::svd_computeSVSatate_D2((uint64_t)v11, a3, a4);
      }
      else {
        BlueFin::BdNavMsgMgr::svd_computeSVSatate_D1((uint64_t)v11, (double *)a3, a4);
      }
      return 0;
    }
  }
  return result;
}

double BlueFin::BdNavMsgMgr::svd_computeSVSatate_D1(uint64_t a1, double *a2, double *a3)
{
  HIDWORD(v6) = 1083129856;
  LODWORD(v6) = *(_DWORD *)(a1 + 8);
  double v7 = *a2 / 1000.0 - (double)v6;
  double v8 = v7 + 604800.0;
  if (v7 >= -302400.0) {
    double v8 = *a2 / 1000.0 - (double)v6;
  }
  if (v7 <= 302400.0) {
    double v9 = v8;
  }
  else {
    double v9 = v7 + -604800.0;
  }
  BlueFin::BdNavMsgMgr::setEphemerisConstants((uint64_t)&v58, a1);
  double v57 = v59;
  __double2 v10 = __sincos_stret(*(double *)(a1 + 88) + v59 * v9);
  double v11 = v10.__sinval * (v10.__sinval * v10.__sinval);
  double v12 = v10.__sinval * (v10.__sinval * v11);
  double v56 = v74;
  double v45 = v78;
  double v54 = v74
      * (v10.__cosval * (v61 * v10.__sinval)
       + v60 * v10.__sinval
       + v62 * v11
       + v63 * v11 * v10.__cosval
       + v64 * v12
       + v65 * v12 * v10.__cosval
       + v66 * (v10.__sinval * (v10.__sinval * v12)));
  double v55 = v10.__cosval
      + v67 * (v10.__sinval * v10.__sinval)
      + v10.__sinval * v10.__sinval * v68 * v10.__cosval
      + v69 * (v10.__sinval * v11)
      + v10.__sinval * v11 * v70 * v10.__cosval
      + v71 * (v10.__sinval * v12)
      + v10.__sinval * v12 * v72 * v10.__cosval;
  double v13 = v55 * v76 + v54 * v77;
  double v14 = v55 * v77 - v54 * v76;
  double v15 = v14 * (v13 + v13);
  double v16 = v14 * v14 - v13 * v13;
  double v52 = *(double *)(a1 + 128);
  double v53 = *(double *)(a1 + 136);
  double v17 = v52 * v16 + v53 * v15;
  double v18 = v17 * v17 * -0.5 + 1.0;
  double v50 = v14 * v18 - v13 * v17;
  double v51 = v14 * v17 + v13 * v18;
  double v49 = *(double *)(a1 + 64);
  double v19 = v49 * v55 + 1.0;
  double v43 = *(double *)(a1 + 144);
  double v44 = *(double *)(a1 + 152);
  double v20 = v73 / v19 + v16 * v43 + v44 * v15;
  double v21 = v20 * v50;
  double v22 = v20 * v51;
  double v47 = *(double *)(a1 + 160);
  double v48 = *(double *)(a1 + 168);
  double v46 = *(double *)(a1 + 120);
  double v23 = *(double *)(a1 + 112) + v16 * v47 + v48 * v15 + v46 * v9;
  __double2 v24 = __sincos_stret(*(double *)(a1 + 96) + v78 * v9 - v79);
  __double2 v25 = __sincos_stret(v23);
  *a3 = v21 * v24.__cosval - v22 * v25.__cosval * v24.__sinval;
  a3[1] = v22 * v25.__cosval * v24.__cosval + v21 * v24.__sinval;
  double v26 = v19 * (v57 * v19) / v75;
  double v27 = v26 + v26;
  double v28 = v26 + (v26 + v26) * (v53 * v16 - v52 * v15);
  double v29 = (v44 * v16 - v43 * v15) * v27 + v57 * (v49 * v58) / v56 * v54;
  double v30 = v29 * v50 - v22 * v28;
  double v31 = v21 * v28 + v29 * v51;
  double v32 = v46 + v27 * (v48 * v16 - v47 * v15);
  double v33 = v30 + -(v22 * v45) * v25.__cosval;
  double v34 = v31 * v25.__cosval - v22 * v25.__sinval * v32 + v21 * v45;
  a3[2] = v22 * v25.__sinval;
  a3[3] = v33 * v24.__cosval - v34 * v24.__sinval;
  a3[4] = v24.__cosval * v34 + v33 * v24.__sinval;
  a3[5] = v25.__cosval * (v22 * v32) + v31 * v25.__sinval;
  HIDWORD(v35) = 1083129856;
  LODWORD(v35) = *(_DWORD *)(a1 + 12);
  double v36 = *a2 / 1000.0 - (double)v35;
  double v37 = v36 + 604800.0;
  if (v36 >= -302400.0) {
    double v37 = *a2 / 1000.0 - (double)v35;
  }
  if (v36 <= 302400.0) {
    double v38 = v37;
  }
  else {
    double v38 = v36 + -604800.0;
  }
  double v39 = *(double *)(a1 + 24);
  double v40 = *(double *)(a1 + 32);
  double result = v54 * (v56 * (v80 / v19)) + *(double *)(a1 + 16) + v38 * (v39 + v38 * v40);
  double v42 = (v55 + v49) * (v57 * (v80 / v19)) + v39 + (v40 + v40) * v38;
  a3[6] = result;
  a3[7] = v42;
  return result;
}

double BlueFin::BdNavMsgMgr::setEphemerisConstants(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a2 + 56);
  double v5 = v4 * v4;
  *(double *)a1 = v4 * v4;
  if (v4 * v4 == 0.0) {
    double v6 = *(double *)(a2 + 80);
  }
  else {
    double v6 = 19964980.4 / (v4 * v5) + *(double *)(a2 + 80);
  }
  *(double *)(a1 + 8) = v6;
  double v8 = *(double *)(a2 + 64);
  double v7 = *(double *)(a2 + 72);
  double v9 = v8 * (v8 * v8);
  double v10 = v8 * (v8 * v9);
  *(double *)(a1 + 16) = v8 * v8 * 3.0 + 1.0 + v8 * v9 * 5.0 + v8 * v10 * 7.0;
  *(double *)(a1 + 24) = v9 * 4.0 + v8 * 2.0 + v10 * 6.0;
  *(double *)(a1 + 32) = -(v8 * v9 * 28.3333333 + v8 * v8 * 4.5 + v8 * v10 * 96.8333333);
  *(double *)(a1 + 40) = -(v10 * 52.0 + v9 * 10.6666667);
  *(double *)(a1 + 48) = v8 * v10 * 247.975 + v8 * v9 * 26.0416667;
  *(double *)(a1 + 56) = v10 * 64.8;
  double v11 = v8 * v10 * -163.401389;
  *(double *)(a1 + 64) = v11;
  *(double *)(a1 + 72) = -(v9 * 8.0 + v8 * 2.0 + v10 * 18.0);
  *(double *)(a1 + 80) = -(v8 * v9 * 12.5 + v8 * v8 * 4.5 + v8 * v10 * 24.5);
  *(double *)(a1 + 88) = v10 * 78.0 + v9 * 10.6666667;
  *(double *)(a1 + 96) = v8 * v10 * 151.083333 + v8 * v9 * 26.0416667;
  *(double *)(a1 + 104) = -(v10 * 64.8);
  double v12 = 1.0 - v8 * v8;
  *(double *)(a1 + 112) = v11;
  *(double *)(a1 + 120) = v12;
  double v13 = sqrt(v12);
  *(double *)(a1 + 128) = v5 * v12;
  *(double *)(a1 + 136) = v13;
  *(double *)(a1 + 144) = v12 * v13;
  *(__double2 *)(a1 + 152) = __sincos_stret(v7);
  double v14 = *(double *)(a2 + 104);
  LODWORD(v15) = *(_DWORD *)(a2 + 8);
  double v16 = (double)v15;
  *(double *)(a1 + 168) = *(double *)(a2 + 96) - v14 * v16;
  *(double *)(a1 + 176) = v14 + -0.00007292115;
  double result = v16 * 0.00007292115;
  *(double *)(a1 + 184) = v16 * 0.00007292115;
  *(double *)(a1 + 192) = v4 * (v8 * -4.44280763e-10);
  return result;
}

double BlueFin::BdNavMsgMgr::UnpackEphPara(uint64_t a1, uint64_t a2)
{
  int v6 = *(_DWORD *)(a1 + 4);
  int v7 = *(_DWORD *)(a1 + 8);
  int v8 = *(_DWORD *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 20);
  int v10 = *(_DWORD *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 28);
  int v13 = *(_DWORD *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 36);
  int v14 = *(_DWORD *)(a1 + 48);
  int v31 = *(_DWORD *)(a1 + 52);
  int v36 = *(_DWORD *)(a1 + 56);
  int v34 = *(_DWORD *)(a1 + 60);
  int v33 = *(_DWORD *)(a1 + 64);
  int v32 = *(_DWORD *)(a1 + 68);
  int v37 = *(_DWORD *)(a1 + 72);
  int v35 = *(_DWORD *)(a1 + 76);
  int v16 = *(_DWORD *)(a1 + 88);
  int v15 = *(_DWORD *)(a1 + 92);
  int v18 = *(_DWORD *)(a1 + 96);
  int v17 = *(_DWORD *)(a1 + 100);
  int v19 = *(_DWORD *)(a1 + 104);
  int v30 = *(_DWORD *)(a1 + 108);
  LODWORD(v2) = *(_DWORD *)(a1 + 80);
  LODWORD(v3) = *(_DWORD *)(a1 + 84);
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(unsigned char *)(a2 + 1) = v6;
  *(unsigned char *)(a2 + 2) = v7;
  *(unsigned char *)(a2 + 3) = v8;
  *(_WORD *)(a2 + 4) = v10;
  *(_DWORD *)(a2 + 12) = 8 * v9;
  double v20 = (double)v12;
  double v21 = ldexp(1.0, -33);
  *(double *)(a2 + 16) = v21 * v20;
  *(long double *)(a2 + 24) = ldexp(1.0, -50) * (double)v13;
  *(long double *)(a2 + 32) = ldexp(1.0, -66) * (double)v11;
  double v22 = ldexp(1.0e-10, 0);
  uint64_t v23 = *(void *)(a1 + 40);
  v24.i64[0] = (int)v23;
  v24.i64[1] = SHIDWORD(v23);
  *(float64x2_t *)(a2 + 40) = vmulq_n_f64(vcvtq_f64_s64(v24), v22);
  *(_DWORD *)(a2 + 8) = 8 * v16;
  *(long double *)(a2 + 56) = ldexp(1.0, -19) * (double)v3;
  *(double *)(a2 + 64) = v21 * (double)v2;
  double v25 = ldexp(3.14159265, -31);
  *(double *)(a2 + 72) = v25 * (double)v17;
  long double v26 = ldexp(3.14159265, -43);
  *(long double *)(a2 + 80) = v26 * (double)v14;
  *(double *)(a2 + 88) = v25 * (double)v31;
  *(double *)(a2 + 96) = v25 * (double)v15;
  *(long double *)(a2 + 104) = v26 * (double)v19;
  *(double *)(a2 + 112) = v25 * (double)v18;
  *(long double *)(a2 + 120) = v26 * (double)v30;
  double v27 = ldexp(1.0, -31);
  *(double *)(a2 + 128) = v27 * (double)v32;
  *(double *)(a2 + 136) = v27 * (double)v33;
  long double v28 = ldexp(1.0, -6);
  *(long double *)(a2 + 144) = v28 * (double)v34;
  *(long double *)(a2 + 152) = v28 * (double)v36;
  double result = v27 * (double)v35;
  *(double *)(a2 + 160) = result;
  *(double *)(a2 + 168) = v27 * (double)v37;
  return result;
}

BOOL BlueFin::GlPeBdsEphemeris::isTimeSet(BlueFin::GlPeBdsEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 27) != 0;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetIntegerScaleFactor(BlueFin::GlPeBdsEphemeris *this, unsigned int a2)
{
  if (a2 >= 0x22 || ((0x3F80400BFuLL >> a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_bdephmgr.cpp", 858, "GetIntegerScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 858, "0");
  }
  return dword_263BB3D5C[(char)a2];
}

uint64_t BlueFin::GlPeGloEphemeris::GetGnssId@<X0>(BlueFin::GlPeGloEphemeris *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 27);
  *a2 = result;
  return result;
}

BOOL BlueFin::GlPeAlmMgr::IsFresh(uint64_t a1, uint64_t a2)
{
  int v22 = 7;
  char v23 = 0;
  int v12 = -65536;
  uint64_t v13 = 0;
  int v14 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  __int16 v19 = 0;
  int v20 = -1;
  char v21 = 0;
  if (!*(_DWORD *)(*(void *)(a1 + 448) + 2576)
    || !BlueFin::GlPeAlmMgr::GetAlm(a1, *(_DWORD *)a2, *(unsigned __int8 *)(a2 + 4), (uint64_t)&v12, 1, 1)
    || v20 == 2)
  {
    return 0;
  }
  BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 448), 1, v9);
  int v10 = &off_270EBC600;
  unint64_t v11 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v9, (BlueFin::GlGpsTime *)&v10);
  BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&v12, (const BlueFin::GlGpsTime *)&v10, (uint64_t)v9);
  unsigned int v3 = v11;
  unsigned int v4 = HIDWORD(v11);
  if (v9[0].n128_u64[1])
  {
    if (v11 < v9[0].n128_u64[1])
    {
      unsigned int v4 = (__PAIR64__(v9[0].n128_u32[3] - HIDWORD(v11), v9[0].n128_u32[2]) - v11) >> 32;
      unsigned int v3 = v9[0].n128_u32[2] - v11;
      char v5 = 1;
    }
    else
    {
      char v5 = 0;
      unsigned int v4 = (v11 - v9[0].n128_u64[1]) >> 32;
      unsigned int v3 = v11 - v9[0].n128_u32[2];
    }
  }
  else
  {
    char v5 = 0;
  }
  double v6 = (double)v3 * 2.32830644e-10 + (double)v4;
  if ((v5 & ((v4 | v3) != 0)) != 0) {
    double v6 = -v6;
  }
  unsigned int v7 = (int)v6;
  if ((int)v6 < 0) {
    unsigned int v7 = -v7;
  }
  return v7 < 0x93A80;
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::checkForDuplicateOsns(uint64_t this, int a2, unsigned int a3)
{
  uint64_t v4 = this;
  uint64_t v5 = 0;
  uint64_t v6 = a3;
  uint64_t v7 = this + 20 * a3;
  int v8 = (unsigned __int8 *)(v7 + 440);
  int v9 = (int *)(v7 + 444);
  int v10 = (char)a3 - 7;
  unint64_t v11 = (unsigned char *)(this + 448);
  __int16 v19 = (unsigned char *)(v7 + 448);
  do
  {
    if (v6 != v5)
    {
      uint64_t v12 = *((unsigned int *)v11 - 1);
      if (v12)
      {
        if ((a2 - *((_DWORD *)v11 - 3)) >= BlueFin::GlPeGloFcnOsnMgr::m_aulMaxFcnToOsnMs[v12]) {
          goto LABEL_13;
        }
        int v13 = *(v11 - 8);
        if (v13 != *v8) {
          goto LABEL_14;
        }
        int v14 = *v9;
        if (v12 == 1 && v14 == 1)
        {
          char v20 = *(v11 - 8);
          int v15 = (*(uint64_t (**)(void, char *))(**(void **)(v4 + 8) + 312))(*(void *)(v4 + 8), &v20);
          long long v16 = (const char *)&unk_263B6E70D;
          if (v15)
          {
            (*(void (**)(void, char *, void))(**(void **)(v4 + 8) + 288))(*(void *)(v4 + 8), &v20, 0);
            long long v16 = " and reported a bad decode";
          }
          *int v9 = 0;
          *__int16 v19 = 1;
          *((_DWORD *)v11 - 1) = 0;
          *unint64_t v11 = 1;
          this = GlCustomLog(12, "FCN2OSN: LMS:%u  FCN:%+d  Msg: Duplicate OSN %d found on two verified SVs! Reset both caches%s.  CmpFCN:%d  CmpSrc:%d\n", a2, v10, *v8, v16, (int)v5 - 7, 0);
        }
        else
        {
          this = GlCustomLog(13, "FCN2OSN: LMS:%u  FCN:%+d  Msg: Duplicate OSN %d found on unverified data. NewDataSrc:%d  CmpFCN:%d  CmpSrc:%d\n", a2, v10, v13, v14, (int)v5 - 7, v12);
          int v17 = *((_DWORD *)v11 - 1);
          if (*v9 == 1)
          {
            if (v17 == 1) {
              goto LABEL_14;
            }
LABEL_13:
            *((_DWORD *)v11 - 1) = 0;
            goto LABEL_14;
          }
          if (v17 == 1)
          {
            *int v9 = 0;
            if (*((_DWORD *)v11 - 1) == 1) {
              goto LABEL_14;
            }
          }
          else
          {
            *__int16 v19 = 1;
          }
          *unint64_t v11 = 1;
        }
      }
    }
LABEL_14:
    ++v5;
    v11 += 20;
  }
  while (v5 != 14);
  return this;
}

void BlueFin::GlPeGloFcnOsnMgr::stCachedPositionAndTime::Update(BlueFin::GlPeGloFcnOsnMgr::stCachedPositionAndTime *this, const BlueFin::GlPeAsstMgr *a2, const BlueFin::GlPeTimeManager *a3)
{
  uint64_t v5 = (char *)a2 + 119952;
  unsigned int v6 = *((_DWORD *)a3 + 642);
  if (*((unsigned char *)a2 + 120021)) {
    goto LABEL_20;
  }
  *((unsigned char *)this + 4) = 0;
  if (*((_DWORD *)a2 + 25) != -1)
  {
    unsigned int AgeS = BlueFin::stTimeOfAsstPos::GetAgeS((const BlueFin::GlPeAsstMgr *)((char *)a2 + 112), *((BlueFin::GlPeTimeManager **)a2 + 44));
    if (AgeS >> 6 <= 0x2A2)
    {
      double v9 = (double)AgeS / 3600.0 * 150.0;
      double v10 = fmod(v9, 4294967300.0);
      if (v9 <= 4294967300.0) {
        double v10 = v9;
      }
      if (v10 < -4294967300.0) {
        double v10 = -fmod(-v10, 4294967300.0);
      }
      if (v10 < 0.0) {
        unsigned int v11 = --v10;
      }
      else {
        unsigned int v11 = v10;
      }
      if (v11 <= 1) {
        unsigned int v11 = 1;
      }
      *((_DWORD *)this + 14) = v11;
      if (*((_DWORD *)a2 + 25) == -1)
      {
        DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 1111, "Update", (char)"bGotXYZ");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 1111, "bGotXYZ");
      }
      *((void *)this + 4) = *((void *)a2 + 18);
      *((void *)this + 5) = *((void *)a2 + 19);
      *((void *)this + 6) = *((void *)a2 + 20);
      *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 168);
      *((void *)this + 3) = *((void *)a2 + 23);
      *((unsigned char *)this + 4) = 1;
LABEL_17:
      if (v11 < 0x3E9) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }
    if (*((unsigned char *)this + 4))
    {
      unsigned int v11 = *((_DWORD *)this + 14);
      goto LABEL_17;
    }
  }
LABEL_18:
  if (*v5)
  {
    uint64_t v12 = *((void *)v5 + 6);
    uint64_t v13 = *((void *)v5 + 3);
    unsigned int v14 = *((_DWORD *)v5 + 14);
    *((_OWORD *)this + 2) = *((_OWORD *)v5 + 2);
    *((void *)this + 6) = v12;
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)(v5 + 8);
    *((void *)this + 3) = v13;
    *((_DWORD *)this + 14) = v14 / 0x3E8;
    *((unsigned char *)this + 4) = 1;
  }
LABEL_20:
  *((unsigned char *)this + 60) = 0;
  if (*((_DWORD *)a3 + 644))
  {
    *((unsigned char *)this + 60) = 1;
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)a3, v6, 1, (uint64_t)&v15);
    if ((void (***)(BlueFin::GlGpsTime *__hidden))((char *)this + 64) != &v15)
    {
      *((void *)this + 8) = v15;
      *((_DWORD *)this + 18) = v16;
      *((_OWORD *)this + 5) = v17;
    }
    int v15 = &off_270EBC600;
    uint64_t v16 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGloFcnOsnMgr::stCachedPositionAndTime *)((char *)this + 64), (BlueFin::GlGpsTime *)&v15);
    *((void *)this + 13) = v16;
  }
  if (*((unsigned char *)this + 4))
  {
    if (*((unsigned char *)this + 60)) {
      *(_DWORD *)this = v6;
    }
  }
}

unsigned __int8 *BlueFin::GlSignalIdSet::RemoveSvIds(BlueFin::GlSignalIdSet *this, const BlueFin::GlSvIdSet *a2)
{
  unsigned __int8 v10 = *((unsigned char *)a2 + 8);
  memcpy(v14, *(const void **)a2, 4 * v10);
  __int16 v12 = 0;
  unsigned __int8 v11 = 0;
  int v13 = v14[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v10); v11 != v10; uint64_t result = BlueFin::GlSetIterator::operator++(&v10))
  {
    uint64_t v4 = 0;
    uint64_t v5 = v12;
    unsigned __int8 v6 = v12 + 67;
    uint64_t v7 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
    do
    {
      if (v6 >= 0x44u)
      {
        uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
        if (v7[v8] != 255)
        {
          unsigned __int16 v9 = BlueFin::GlSignalId::s_ausGnss2signalId[v8]
             + v5
             - BlueFin::GlSvId::s_aucGnss2minSvId[v8]
             + BlueFin::GlSvId::s_aucGnss2numSvId[v8] * (_WORD)v4;
          if (v9 <= 0x23Eu) {
            BlueFin::GlSetBase::Remove((uint64_t)this, (__int16)v9);
          }
        }
      }
      ++v4;
      v7 += 7;
    }
    while (v4 != 4);
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::SetEphFromBuffer(BlueFin::GlPeEphemerisMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  (*(void (**)(uint64_t *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(&v13, a2);
  if (!(_BYTE)v13 || v13 >= (*((unsigned char *)this + 104) + 1))
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1905, "SetEphFromBuffer", (char)"otGnssId >= MIN_GNSS_ID && otGnssId < m_ucMaxEphSVs + MIN_GNSS_ID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1905, "otGnssId >= MIN_GNSS_ID && otGnssId < m_ucMaxEphSVs + MIN_GNSS_ID");
  }
  uint64_t v4 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, unint64_t, void))(*(void *)this + 16))(this, *((void *)this + 58) + 4 * (v13 - 1) * (unint64_t)*((unsigned __int8 *)this + 456), *((unsigned char *)a2 + 8) & 0xF);
  BlueFin::GlPeEphemeris::operator=(v4, (uint64_t)a2);
  if (*(_DWORD *)(*((void *)this + 2) + 2576)
    && ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4) & 1) == 0)
  {
    __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, v12);
    (*(void (**)(uint64_t, __n128 *, __n128))(*(void *)v4 + 72))(v4, v12, Time);
  }
  BlueFin::GlSetBase::Remove((uint64_t)this + 480, v13);
  BlueFin::GlSetBase::Remove((uint64_t)this + 504, v13);
  v12[0].n128_u32[0] = *((_DWORD *)this + 3);
  v12[0].n128_u8[4] = v13;
  uint64_t v6 = *((void *)this + 6);
  uint64_t v7 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 152))(a2);
  (*(void (**)(uint64_t, __n128 *, uint64_t))(*(void *)v6 + 88))(v6, v12, v7);
  uint64_t v8 = (BlueFin::GlPeGloFcnOsnMgr *)*((void *)this + 8);
  BlueFin::GlPeSvIdConverter::Gnss2SvId(v8, (unsigned int *)v12, &v11);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256))(v4);
  return BlueFin::GlPeSvIdConverter::SetOrbitType((uint64_t)v8, &v11, v9);
}

BOOL BlueFin::GlPeEphemerisMgr::processCandidateEphemeris(BlueFin::GlPeEphemerisMgr *this, const BlueFin::GlPeEphemeris *a2, char a3)
{
  if (*((_DWORD *)this + 3) != *((unsigned __int8 *)a2 + 8) >> 4)
  {
    BOOL result = 0;
    int v14 = -7;
    goto LABEL_10;
  }
  (*(void (**)(unsigned __int8 *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(v57, a2);
  if ((*((unsigned char *)a2 + 8) & 0xF) == 0 || v57[0] - 1 >= 0x3F)
  {
    BOOL result = 0;
    int v14 = -6;
    goto LABEL_10;
  }
  uint64_t v6 = (const BlueFin::GlPeEphemeris *)(*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, unsigned char *, void))(*(void *)this + 16))(this, v56, *((unsigned char *)a2 + 8) & 0xF);
  uint64_t v7 = BlueFin::GlPeEphemeris::operator=((uint64_t)v6, (uint64_t)a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 144))(v7);
  unsigned int v9 = (unsigned int *)*((void *)this + 2);
  unsigned int v10 = v9[644];
  if (v10)
  {
    unsigned int v11 = v9[642];
    double v12 = (double)(int)v11;
    if (v11 <= 0xFF9222FE) {
      double v12 = (double)v11;
    }
    BlueFin::GlPeTimeManager::GetTime(v9, v12 + (double)*(unsigned int *)(*((void *)this + 5) + 824), 1, (uint64_t)&v53);
  }
  else
  {
    uint64_t v53 = 0;
    int v54 = -1;
    long long v55 = xmmword_263BB40A0;
  }
  WritableEphemerisObuint64_t j = BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj((uint64_t)this, v57);
  unint64_t v16 = WritableEphemerisObj;
  int v17 = *(unsigned char *)(WritableEphemerisObj + 8) & 0xF;
  if (v8 == 2)
  {
    if (!(*(unsigned int (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v6 + 192))(v6, 33))
    {
      uint64_t v18 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v6 + 192))(v6, 28);
      (*(void (**)(const BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)v6 + 216))(v6, 34, v18);
    }
  }
  else
  {
    if ((*(unsigned char *)(WritableEphemerisObj + 8) & 0xF) == 0 || v10 == 0) {
      unint64_t v20 = 0;
    }
    else {
      unint64_t v20 = WritableEphemerisObj;
    }
    if (((*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, unint64_t, const BlueFin::GlPeEphemeris *))(*(void *)this + 384))(this, v20, v6) & 1) == 0)
    {
      BOOL result = 0;
      int v14 = -4;
      goto LABEL_10;
    }
  }
  uint64_t v21 = *(void *)v6;
  if (v10) {
    unsigned int v22 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t *))(v21 + 248))(v6, &v53);
  }
  else {
    unsigned int v22 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(v21 + 88))(v6);
  }
  unsigned int v23 = v22;
  if (!v22)
  {
    if ((a3 & 1) == 0)
    {
      int v26 = *((_DWORD *)this + 3);
      double v27 = "BDS";
      long double v28 = "GPS";
      switch(v26)
      {
        case 0:
          break;
        case 1:
          long double v28 = "SBAS";
          break;
        case 2:
          long double v28 = "GLNS";
          break;
        case 3:
          long double v28 = "QZSS";
          break;
        case 4:
          goto LABEL_98;
        default:
          double v27 = "<->";
          if (v26 == 6) {
            double v27 = "NIC";
          }
          if (v26 == 5) {
            double v27 = "GAL";
          }
LABEL_98:
          long double v28 = v27;
          break;
      }
      int v48 = v57[0];
      double v49 = (*(double (**)(const BlueFin::GlPeEphemeris *, uint64_t *, uint64_t))(*(void *)v6 + 64))(v6, &v53, 1);
      unsigned int v50 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v6 + 88))(v6);
      GlCustomLog(12, "GlPeEphemerisMgr::processCandidateEphemeris: EXPIRED ephemeris received!  Gnss:%s %02d  Age(min):%.0lf  MaxAge(min):%u\n", v28, v48, v49 / 60.0, v50 / 0x78);
      if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        (*(void (**)(const BlueFin::GlPeEphemeris *, void, void))(*(void *)v6 + 24))(v6, 0, 0);
      }
    }
    BOOL result = 0;
    int v14 = -5;
    goto LABEL_10;
  }
  if (v8) {
    (*(void (**)(const BlueFin::GlPeEphemeris *))(*(void *)v6 + 168))(v6);
  }
  if (v17)
  {
    uint64_t v24 = *(void *)v16;
    if (v10) {
      unsigned int v25 = (*(uint64_t (**)(unint64_t, uint64_t *))(v24 + 248))(v16, &v53);
    }
    else {
      unsigned int v25 = (*(uint64_t (**)(unint64_t))(v24 + 88))(v16);
    }
    unsigned int v33 = v25;
    BOOL v51 = v25 == 0;
    uint64_t v34 = (*(uint64_t (**)(unint64_t))(*(void *)v16 + 144))(v16);
    int v35 = (*(uint64_t (**)(unint64_t))(*(void *)v16 + 40))(v16);
    BOOL v29 = v34 == 2;
    if (v33 && v35 && (v8 == 2) != v29) {
      (*(void (**)(BlueFin::GlPeEphemerisMgr *, const BlueFin::GlPeEphemeris *, unint64_t))(*(void *)this + 392))(this, v6, v16);
    }
    int v30 = (unsigned __int8 *)this + 9;
    unsigned int v31 = *((unsigned __int8 *)this + 9);
    if (v33 >= 0x78)
    {
      unsigned int v31 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, uint64_t))(*(void *)this + 104))(this, v34);
      int v32 = 0;
    }
    else
    {
      int v32 = v51;
    }
  }
  else
  {
    BOOL v29 = 0;
    int v30 = (unsigned __int8 *)this + 9;
    unsigned int v31 = *((unsigned __int8 *)this + 9);
    int v32 = 1;
  }
  if (v23 > 0x77) {
    unsigned int v36 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, uint64_t))(*(void *)this + 104))(this, v8);
  }
  else {
    unsigned int v36 = *v30;
  }
  int v37 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v6 + 40))(v6);
  char v38 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v6 + 184))(v6);
  BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)this + 4), *((_DWORD *)this + 3), 0, (unsigned int *)v52);
  if ((v37 & 1) == 0)
  {
    if (v8 == 2) {
      int v40 = v32;
    }
    else {
      int v40 = 1;
    }
    if ((v40 | v29))
    {
      int v39 = 0;
      goto LABEL_59;
    }
    BOOL result = 0;
    int v14 = -3;
LABEL_10:
    *((_DWORD *)this + 134) = v14;
    return result;
  }
  if ((v38 & 1) == 0)
  {
    if (*((unsigned char *)this + 533) && v36 <= v31)
    {
      int v39 = 1;
      goto LABEL_59;
    }
LABEL_80:
    if (v31 >= v36)
    {
      if (*((unsigned char *)this + 533)) {
        int v42 = -1;
      }
      else {
        int v42 = -2;
      }
    }
    else
    {
      int v42 = -3;
    }
    if ((a3 & 1) == 0 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(const BlueFin::GlPeEphemeris *, void, void))(*(void *)v6 + 24))(v6, 0, 0);
    }
    goto LABEL_93;
  }
  if (v36 > v31) {
    goto LABEL_80;
  }
  int v39 = 2;
LABEL_59:
  if (((1 << (v57[0] & 0x1F)) & *(unsigned int *)(v52[0] + (((unint64_t)v57[0] >> 3) & 0x1C))) != 0
    && v8 == 2)
  {
    int v42 = 3;
  }
  else
  {
    int v42 = v39;
  }
  if (v8 != 2)
  {
    uint64_t v43 = *((void *)this + 7);
    LODWORD(v52[0]) = *((_DWORD *)this + 3);
    BYTE4(v52[0]) = v57[0];
    BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded((unsigned char *)(v43 + 32), v37, (uint64_t)v52);
    double v44 = (BlueFin::GlPeAlmMgr *)*((void *)this + 11);
    if (v44) {
      BlueFin::GlPeAlmMgr::Eph2Alm(v44, v6);
    }
    if ((*(unsigned int (**)(const BlueFin::GlPeEphemeris *))(*(void *)v6 + 184))(v6)) {
      BlueFin::GlSetBase::Remove((uint64_t)this + 432, v57[0]);
    }
  }
  BlueFin::GlPeEphemerisMgr::SetEphFromBuffer(this, v6);
  if ((a3 & 1) == 0)
  {
    BlueFin::GlSetBase::Remove((uint64_t)this + 408, v57[0]);
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        (*(void (**)(const BlueFin::GlPeEphemeris *, void, void))(*(void *)v6 + 24))(v6, 0, 0);
      }
    }
  }
  if (v37)
  {
    LODWORD(v52[0]) = 0;
    if (v8 != 2
      || BlueFin::GlPeLtoMgr::GetLtoDataAgeS(*((void *)this + 4), *((_DWORD *)this + 3), *(_DWORD *)(*((void *)this + 2) + 2568), v52)&& SLODWORD(v52[0]) <= 86399)
    {
      int v45 = v57[0];
      *((_DWORD *)this + v57[0] + 26) = 0;
      BlueFin::GlSetBase::Remove((uint64_t)this + 360, v45);
    }
  }
  else
  {
    *((_DWORD *)this + v57[0] + 26) = *(_DWORD *)(*((void *)this + 2) + 2568);
    BlueFin::GlGnssIdSet::Add((void *)this + 45, v57);
    uint64_t v46 = *((void *)this + 4);
    if ((*(unsigned char *)(v46 + 1636) & 4) == 0)
    {
      unsigned int v47 = *((_DWORD *)this + 3);
      LOBYTE(v52[0]) = v57[0];
      BlueFin::GlGnssSet::Add(v46 + 576, v47, (unsigned __int8 *)v52);
    }
  }
  if (v8) {
    BlueFin::GlPeStartupMgr::Update(*((BlueFin::GlPeStartupMgr **)this + 9));
  }
LABEL_93:
  *((_DWORD *)this + 134) = v42;
  return v42 >= 0;
}

uint64_t BlueFin::GlSetBase::Remove(uint64_t this, int a2)
{
  if (a2 >> 5 >= *(unsigned __int8 *)(this + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 592, "Remove", (char)"uiArrayIndex < m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 592, "uiArrayIndex < m_ucUlongSize");
  }
  *(_DWORD *)(*(void *)this + 4 * (a2 >> 5)) &= ~(1 << a2);
  return this;
}

uint64_t BlueFin::GlPeEphemeris::TimeToExpirationS(uint64_t a1, uint64_t a2)
{
  double v3 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (v4 >= 0) {
    int v5 = v4;
  }
  else {
    int v5 = v4 + 1;
  }
  double v6 = (double)(v5 >> 1) - v3;
  if (v6 <= 0.0)
  {
    if (v6 >= 0.0)
    {
      int v8 = 0;
      goto LABEL_10;
    }
    double v7 = -0.5;
  }
  else
  {
    double v7 = 0.5;
  }
  int v8 = (int)(v6 + v7);
LABEL_10:
  if (v8 > v4 || v8 < 0) {
    return 0;
  }
  else {
    return v8;
  }
}

unint64_t BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj(uint64_t a1, unsigned char *a2)
{
  unsigned int v2 = *a2;
  if (!*a2 || *(unsigned __int8 *)(a1 + 104) < v2)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1201, "GetWritableEphemerisObj", (char)"*rotGnssId >= MIN_GNSS_ID && *rotGnssId < m_ucMaxEphSVs + MIN_GNSS_ID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1201, "*rotGnssId >= MIN_GNSS_ID && *rotGnssId < m_ucMaxEphSVs + MIN_GNSS_ID");
  }
  return *(void *)(a1 + 464) + 4 * (int)(v2 - 1) * (unint64_t)*(unsigned __int8 *)(a1 + 456);
}

BlueFin::GlSetBase *BlueFin::GlPeLtoMgr::GetBadSvSet@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, unsigned int *a4@<X8>)
{
  int v8 = (const void **)BlueFin::GlGnssSet::operator()(a1 + 576, a2);
  if (a3)
  {
    return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a4, a4 + 3, 2u, v8);
  }
  else
  {
    unsigned int v10 = (int **)BlueFin::GlGnssSet::operator()(a1 + 768, a2);
    unsigned int v11 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a4, a4 + 3, 2u, v8);
    double v12 = &v14;
    char v13 = 2;
    uint64_t v14 = 0;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v11, (int **)&v12, v10);
    BOOL result = (BlueFin::GlSetBase *)BlueFin::GlSetBase::operator=((uint64_t)a4, (uint64_t)&v12);
    *(void *)(a4 + 3) = v14;
  }
  return result;
}

uint64_t BlueFin::GlGnssSet::operator()(uint64_t a1, unsigned int a2)
{
  if (a2 >= 7)
  {
    DeviceFaultNotify("glgnss.cpp", 237, "operator()", (char)"(GlIntU32)eGnss < NUM_GNSS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 237, "(GlIntU32)eGnss < NUM_GNSS");
  }
  return *(void *)(a1 + 168) + 24 * a2;
}

{
  if (a2 >= 7)
  {
    DeviceFaultNotify("glgnss.cpp", 230, "operator()", (char)"(GlIntU32)eGnss < NUM_GNSS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 230, "(GlIntU32)eGnss < NUM_GNSS");
  }
  return *(void *)(a1 + 168) + 24 * a2;
}

uint64_t BlueFin::GlPeEphemeris::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9))
    {
      DeviceFaultNotify("glpe_ephmgr.cpp", 148, "operator=", (char)"NumWords() == rotRight.NumWords()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 148, "NumWords() == rotRight.NumWords()");
    }
    char v3 = *(unsigned char *)(a2 + 8);
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 8) & 0xF0 | v3 & 0xF;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8) & 0xF0 | v3 & 0xF;
    uint64_t v4 = *(unsigned __int8 *)(a2 + 9);
    *(unsigned char *)(a1 + 9) = v4;
    memcpy(*(void **)(a1 + 16), *(const void **)(a2 + 16), 4 * v4);
  }
  return a1;
}

uint64_t BlueFin::GlPeEphemerisMgr::GetEphDataSrcPriority(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case -1:
      uint64_t result = *(unsigned __int8 *)(a1 + 9);
      break;
    case 0:
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 3;
      break;
    case 3:
      return result;
    default:
      DeviceFaultNotify("glpe_ephmgr.cpp", 1514, "GetEphDataSrcPriority", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1514, "false");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoEphemeris::GetCurveFitIntervalS(BlueFin::GlPeLtoEphemeris *this)
{
  if ((*((unsigned char *)this + 8) & 0xF0) == 0x50
    && (((*(void (**)(char *__return_ptr))(*(void *)this + 136))((char *)&v3 + 1), BYTE1(v3) == 14)
     || ((*(void (**)(uint64_t *__return_ptr, BlueFin::GlPeLtoEphemeris *))(*(void *)this + 136))(&v3, this), v3 == 18)))
  {
    return 10800;
  }
  else
  {
    return 21600;
  }
}

BOOL BlueFin::GlPeGpsEphemerisBase::isVerified(BlueFin::GlPeGpsEphemerisBase *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 2) != 0;
}

uint64_t BlueFin::GlPeGpsEphemeris::GetCurveFitIntervalS(BlueFin::GlPeGpsEphemeris *this)
{
  if (!(*(unsigned int (**)(BlueFin::GlPeGpsEphemeris *, uint64_t))(*(void *)this + 192))(this, 30)) {
    return 15000;
  }
  unsigned __int16 v2 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemeris *, uint64_t))(*(void *)this + 192))(this, 5);
  int v3 = v2 & 0xFFF8;
  if (v3 == 240) {
    return 28800;
  }
  unsigned __int16 v5 = v2;
  uint64_t result = 50400;
  if (v3 != 248 && v5 != 496)
  {
    if (v5 - 497 >= 7)
    {
      if (v5 - 504 >= 7)
      {
        uint64_t result = 266400;
        if (v5 - 752 >= 5 && v5 != 511)
        {
          if (v5 - 757 >= 7)
          {
            uint64_t result = 439200;
            if ((v5 & 0xFFFC) != 0x2FC && v5 - 1008 >= 3)
            {
              if (v5 - 1011 >= 0xA) {
                return 21600;
              }
              else {
                return 525600;
              }
            }
          }
          else
          {
            return 352800;
          }
        }
      }
      else
      {
        return 180000;
      }
    }
    else
    {
      return 93600;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetCurveFitIntervalS(BlueFin::GlPeBdsEphemeris *this)
{
  return 14400;
}

#error "2638DC9F4: call analysis failed (funcsize=124)"

unint64_t BlueFin::GlPeStartupMgr::updateTimeToEphemeris(unint64_t this)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unsigned int v1 = (_DWORD *)this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xD);
    if (this)
    {
      uint64_t v2 = 0;
      unsigned __int8 v3 = 0;
      uint64_t v4 = *(void *)(*(void *)v1 + 120968);
      do
      {
        this = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v4 + v2));
        v3 += this;
        v2 += 24;
      }
      while (v2 != 168);
      unsigned int v5 = v3 >= 0xCu ? 12 : v3;
      if (v5 >= 2)
      {
        uint64_t v6 = v5 - 1;
        if (v1[v6 + 14] == -7200001)
        {
          uint64_t v7 = BlueFin::GlUtils::m_pInstance;
          uint64_t v8 = v6 + 14;
          do
          {
            if (v1[v8] != -7200001) {
              break;
            }
            v1[v8] = *(_DWORD *)(v7 + 1092) - v1[10];
            uint64_t v9 = v8 - 14;
            --v8;
          }
          while (v9 > 0);
        }
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeSvIdConverter::SetOrbitType(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (a3 == 1)
  {
    BlueFin::GlSetBase::Remove(a1 + 8, *a2);
    *(_DWORD *)(*(void *)(a1 + 56) + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
  }
  else if (a3)
  {
    BlueFin::GlSetBase::Remove(a1 + 8, *a2);
    BlueFin::GlSetBase::Remove(a1 + 56, *a2);
    if (a3 >= 3)
    {
      DeviceFaultNotify("glpe_svid_converter.cpp", 252, "SetOrbitType", (char)"eOrbitType < _DIM(cOrbitNames)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svid_converter.cpp", 252, "eOrbitType < _DIM(cOrbitNames)");
    }
  }
  else
  {
    unint64_t v6 = *a2;
    int v7 = *a2;
    *(_DWORD *)(*(void *)(a1 + 8) + ((v6 >> 3) & 0x1C)) |= 1 << v6;
    BlueFin::GlSetBase::Remove(a1 + 56, v7);
  }
  return GlCustomLog(14, "SetOrbitType %d %s\n", *a2, __const__ZN7BlueFin17GlPeSvIdConverter12SetOrbitTypeERKNS_6GlSvIdENS_13GlPeOrbitTypeE_cOrbitNames[a3]);
}

void *BlueFin::GlPeSatPos::ReportNewOrbitalData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 2)
  {
    uint64_t result = BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 17704) + 119744), (unsigned int *)a2, &v7);
    unsigned int v6 = *(unsigned __int8 *)(a1 + v7 + 17512);
    if (v6 >= 0x5B) {
      return result;
    }
    goto LABEL_9;
  }
  unsigned __int8 v7 = *(unsigned char *)(a1 + 24);
  memcpy(v11, *(const void **)(a1 + 16), 4 * v7);
  unsigned __int16 v9 = 0;
  unsigned __int8 v8 = 0;
  int v10 = v11[0];
  uint64_t result = BlueFin::GlSetIterator::operator++(&v7);
  if (v8 != v7)
  {
    int v5 = *(unsigned __int8 *)(a2 + 4);
    while (*(_DWORD *)(a1 + 192 * (__int16)v9 + 44) != 2 || *(unsigned __int8 *)(a1 + 192 * (__int16)v9 + 48) != v5)
    {
      uint64_t result = BlueFin::GlSetIterator::operator++(&v7);
      if (v8 == v7) {
        return result;
      }
    }
    if (((__int16)v9 & 0x80000000) == 0)
    {
      unsigned int v6 = v9;
LABEL_9:
      return (void *)BlueFin::GlPeMiniEphMgr::remove((BlueFin::GlPeMiniEphMgr *)(a1 + 8), v6);
    }
  }
  return result;
}

uint64_t *BlueFin::GlPeLtoEphemeris::PutCmpUnsignedField(BlueFin::GlPeLtoEphemeris *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = (unsigned int *)*((void *)this + 2);
  int v7 = 4 * *((unsigned __int8 *)this + 9);
  int v14 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v13, v6, v7);
  switch(a2)
  {
    case ' ':
      unsigned int v8 = 565;
      goto LABEL_9;
    case '!':
      unsigned int v10 = 569;
      goto LABEL_7;
    case '""':
      BlueFin::GlBitBuffer::Position((uint64_t)v13, 0x23Au);
      unsigned int v11 = a3;
      unsigned int v12 = 10;
      goto LABEL_11;
    case '#':
      unsigned int v10 = 580;
LABEL_7:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, v10);
      unsigned int v11 = a3;
      unsigned int v12 = 1;
      goto LABEL_11;
    case '$':
      unsigned int v8 = 581;
LABEL_9:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, v8);
      unsigned int v11 = a3;
      unsigned int v12 = 4;
      goto LABEL_11;
    case '%':
      BlueFin::GlBitBuffer::Position((uint64_t)v13, 0x1DCu);
      unsigned int v11 = a3;
      unsigned int v12 = 23;
LABEL_11:
      uint64_t result = BlueFin::GlBitBuffer::PutU(v13, v11, v12);
      break;
    default:
      uint64_t result = BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField(this, a2, a3);
      break;
  }
  return result;
}

uint64_t BlueFin::GlGnssSet::operator|@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  *(void *)(a3 + 168) = a3;
  do
  {
    uint64_t v7 = *(void *)(a3 + 168) + v6;
    *(void *)(v7 + 12) = 0;
    *(void *)uint64_t v7 = v7 + 12;
    *(unsigned char *)(v7 + 8) = 2;
    v6 += 24;
  }
  while (v6 != 168);
  for (uint64_t i = 0; i != 168; i += 24)
  {
    unsigned __int16 v9 = (int **)(*(void *)(a2 + 168) + i);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v11, v12, 2u, (const void **)(*(void *)(a1 + 168) + i));
    char v13 = &v15;
    char v14 = 2;
    uint64_t v15 = 0;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v11, (int **)&v13, v9);
    BlueFin::GlSetBase::operator=((uint64_t)v11, (uint64_t)&v13);
    *(void *)unsigned int v12 = v15;
    uint64_t result = BlueFin::GlSetBase::operator=(*(void *)(a3 + 168) + i, (uint64_t)v11);
    *(void *)(result + 12) = *(void *)v12;
  }
  return result;
}

uint64_t BlueFin::GlSetBase::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 8);
  if (v2 != *(unsigned __int8 *)(a2 + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 555, "operator=", (char)"m_ucUlongSize == otRightOperand.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 555, "m_ucUlongSize == otRightOperand.m_ucUlongSize");
  }
  if (*(unsigned char *)(result + 8))
  {
    unsigned __int8 v3 = *(int **)a2;
    uint64_t v4 = *(_DWORD **)result;
    do
    {
      int v5 = *v3++;
      *v4++ = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

BlueFin::GlSetBase *BlueFin::GlSetBase::GlSetBase(BlueFin::GlSetBase *this, unsigned int *__dst, unsigned int a3, const void **a4)
{
  *(void *)this = __dst;
  *((unsigned char *)this + 8) = a3;
  if (!__dst || !a3)
  {
    DeviceFaultNotify("glutl_set.cpp", 122, "GlSetBase", (char)"m_paulBits != nullptr && m_ucUlongSize >= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 122, "m_paulBits != nullptr && m_ucUlongSize >= 1");
  }
  unsigned int v5 = *((unsigned __int8 *)a4 + 8);
  if (v5 == a3)
  {
    memcpy(__dst, *a4, 4 * a3);
  }
  else
  {
    if (v5 >= a3) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = *((unsigned __int8 *)a4 + 8);
    }
    if (v6)
    {
      uint64_t v7 = (unsigned int *)*a4;
      unsigned int v8 = __dst;
      uint64_t v9 = v6;
      do
      {
        unsigned int v10 = *v7++;
        *v8++ = v10;
        --v9;
      }
      while (v9);
    }
    if (v5 < a3) {
      bzero(&__dst[v6], 4 * (~(_BYTE)v6 + a3) + 4);
    }
  }
  return this;
}

uint64_t BlueFin::GlSetBase::OperatorBinaryOr(uint64_t this, int **a2, int **a3)
{
  uint64_t v3 = *(unsigned __int8 *)(this + 8);
  int v4 = *((unsigned __int8 *)a3 + 8);
  if (v3 != v4 || *((unsigned __int8 *)a2 + 8) != v4)
  {
    DeviceFaultNotify("glutl_set.cpp", 509, "OperatorBinaryOr", (char)"m_ucUlongSize == otRightOperand.m_ucUlongSize && otResult.m_ucUlongSize == otRightOperand.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 509, "m_ucUlongSize == otRightOperand.m_ucUlongSize && otResult.m_ucUlongSize == otRightOperand.m_ucUlongSize");
  }
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v6 = *(int **)this;
    uint64_t v7 = *a3;
    unsigned int v8 = *a2;
    do
    {
      int v10 = *v6++;
      int v9 = v10;
      int v11 = *v7++;
      *v8++ = v11 | v9;
      --v3;
    }
    while (v3);
  }
  return this;
}

char *BlueFin::GlUtlGlSysLogEntryCodec::DecodeLine(BlueFin::GlUtlGlSysLogEntryCodec *this, char *__s1, const char *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t result = strstr(__s1, "@^@");
  if (result)
  {
    uint64_t v7 = (uint64_t)result;
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)__source = 0u;
    long long v22 = 0u;
    for (__int16 i = strlen(__s1); ; --i)
    {
      __int16 v10 = i;
      int v11 = __s1[i - 1];
      if (v11 != 13 && v11 != 10) {
        break;
      }
    }
    if ((__int16)(v7 - (_WORD)__s1) + 3 >= i)
    {
      unint64_t v16 = "Error decoding SLOG entry. Line missing entry tag and body.";
LABEL_22:
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0xC8, (unsigned __int8 *)v16, v9, v19, v20);
      *((unsigned char *)this + 4) = 1;
      int v17 = (BlueFin::GlUtlGlSysLogEntryCodec *)((char *)this + 5);
      BlueFin::GlFormat::glsnprintf(v17, (char *)0x100, "DecodeLine: SLOG entry corrupt on Line Number:%d", v18, a3);
      GlCustomLog(11, "%s\n", (const char *)v17);
      GlCustomLog(11, "%s\n", __source);
      strlcat((char *)v17, "  Error:", 0x100uLL);
      strlcat((char *)v17, __source, 0x100uLL);
      return 0;
    }
    else
    {
      uint64_t v13 = 0;
      while (strncmp((const char *)(v7 + 3), (const char *)&BlueFin::GlUtlGlSysLogEntryCodec::_tagEntry[v13 + 1], 2uLL))
      {
        v13 += 2;
        if (v13 == 262)
        {
          int v14 = *(unsigned __int8 *)(v7 + 3);
          if (v14 == 97 || v14 == 100)
          {
            int v15 = *(unsigned __int8 *)(v7 + 4);
            if (v15 == 108) {
              return 0;
            }
          }
          else
          {
            LOBYTE(v15) = *(unsigned char *)(v7 + 4);
          }
          uint64_t v19 = (char)v14;
          uint64_t v20 = (char)v15;
          unint64_t v16 = "Error decoding SLOG entry. Unrecognized tag \"%c%c\".";
          goto LABEL_22;
        }
      }
      if (!BlueFin::GlUtlGlSysLogEntryCodec::ParseEntry(this, (const char *)(v7 + 5), (const char *)(__int16)(v10 - (v7 - (_WORD)__s1) - 5), a3))return 0; {
      uint64_t result = (char *)this + 264;
      }
      *((_WORD *)this + 142) = 1;
      *((unsigned char *)this + 276) = *((unsigned char *)this + 288);
      *((_DWORD *)this + 68) = BlueFin::GlUtlGlSysLogEntryCodec::_tagEntry[v13];
      *((_DWORD *)this + 70) = a3;
    }
  }
  return result;
}

BOOL BlueFin::GlUtlGlSysLogEntryCodec::ParseEntry(BlueFin::GlUtlGlSysLogEntryCodec *this, const char *a2, const char *a3, const char *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)__source = 0u;
  long long v34 = 0u;
  *((unsigned char *)this + 4) = 0;
  if ((int)a3 <= 3)
  {
    *(_WORD *)this = 0;
    *(_WORD *)((char *)this + 3) = 256;
    *((_WORD *)this + 143) = 0;
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0xC8, "Error decoding SLOG entry. Line missing header.", a4);
    goto LABEL_47;
  }
  int v7 = *(unsigned __int8 *)a2;
  unsigned int v8 = v7 - 48;
  unsigned __int8 v9 = v7 - 55;
  if (v8 < 0xA) {
    unsigned __int8 v9 = v8;
  }
  int v10 = *((unsigned __int8 *)a2 + 1);
  unsigned int v11 = v10 - 48;
  unsigned __int8 v12 = v10 - 55;
  if (v11 < 0xA) {
    unsigned __int8 v12 = v11;
  }
  int v13 = *((unsigned __int8 *)a2 + 2);
  unsigned __int8 v14 = v13 - 65;
  if ((v13 - 65) >= 0x1A)
  {
    if ((v13 - 97) > 0x19)
    {
      if ((v13 - 48) > 9)
      {
        if (v13 == 43) {
          unsigned __int8 v14 = 62;
        }
        else {
          unsigned __int8 v14 = 63;
        }
      }
      else
      {
        unsigned __int8 v14 = v13 + 4;
      }
    }
    else
    {
      unsigned __int8 v14 = v13 - 71;
    }
  }
  unint64_t v15 = v12 | (16 * v9);
  int v16 = *((unsigned __int8 *)a2 + 3);
  unsigned __int8 v17 = v16 - 65;
  if ((v16 - 65) >= 0x1A)
  {
    if ((v16 - 97) > 0x19)
    {
      if ((v16 - 48) > 9)
      {
        if (v16 == 43) {
          unsigned __int8 v17 = 62;
        }
        else {
          unsigned __int8 v17 = 63;
        }
      }
      else
      {
        unsigned __int8 v17 = v16 + 4;
      }
    }
    else
    {
      unsigned __int8 v17 = v16 - 71;
    }
  }
  unsigned __int16 v18 = (_WORD)a3 - 4;
  if (v15 <= (unsigned __int16)((_WORD)a3 - 4))
  {
    __int16 v19 = v18 - v15;
  }
  else
  {
    *((unsigned char *)this + 4) = 1;
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0xC8, "Line missing bytes. Expected %d bytes but only %d were found.", a4, v15, (unsigned __int16)((_WORD)a3 - 4));
    __int16 v19 = 0;
  }
  *((_WORD *)this + 131) = v19;
  if (v17 == 1)
  {
    uint64_t v20 = *(unsigned __int8 *)this;
    if (*(unsigned char *)this)
    {
      *((unsigned char *)this + 4) = 1;
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0xC8, "Error decoding SLOG entry. Missing line %d of %d lines", a4, (v20 - 1), v20);
    }
    *((_WORD *)this + 143) = 0;
    *(unsigned char *)this = v14;
    *((unsigned char *)this + 3) = v15 > v18;
    *((unsigned char *)this + 2) = v15;
  }
  else
  {
    uint64_t v21 = *((unsigned __int8 *)this + 1);
    if (*((unsigned char *)this + 1))
    {
      if (v21 != v17)
      {
        *(_WORD *)((char *)this + 3) = 257;
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0xC8, "Error decoding SLOG entry. Expected line %d but found line %d of %d lines.", a4, v21, v17, *(unsigned __int8 *)this);
      }
    }
    else
    {
      *(unsigned char *)this = v14;
      *(_WORD *)((char *)this + 3) = 257;
      BlueFin::GlFormat::glsprintf((BlueFin::GlFormat *)__source, "Error decoding SLOG entry. Missing line 1 of %d lines.", a3, v14);
    }
  }
  if (v17 == 63) {
    char v22 = 63;
  }
  else {
    char v22 = v17 + 1;
  }
  *((unsigned char *)this + 1) = v22;
  uint64_t v23 = *((unsigned __int16 *)this + 143);
  if (v23 + ((3 * v15) >> 2) > 0x2800)
  {
    *(_WORD *)((char *)this + 3) = 257;
    uint64_t v29 = v23 + ((3 * v15) >> 2);
    uint64_t v30 = 10240;
    long long v25 = "Error decoding SLOG entry. Entry size is %d.  Max supported size is %u.";
    goto LABEL_42;
  }
  if (!*((unsigned char *)this + 3))
  {
    unsigned __int16 v24 = (unsigned __int16)BlueFin::GlUtlB64::b64_decode_((unsigned __int8 *)a2 + 4, v15, (unsigned char *)this + *((unsigned __int16 *)this + 143) + 288, 10240 - v23, 768, &v32, &v31);
    if (v24)
    {
      *((_WORD *)this + 143) += v24;
      goto LABEL_43;
    }
    *(_WORD *)((char *)this + 3) = 257;
    long long v25 = "Error decoding SLOG entry. Error in b64 decode.";
LABEL_42:
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0xC8, (unsigned __int8 *)v25, a4, v29, v30);
  }
LABEL_43:
  if (v14 == v17 && (v14 != 63 || v15 < *((unsigned __int8 *)this + 2)))
  {
    BOOL v26 = *((unsigned char *)this + 3) == 0;
    *(_WORD *)this = 0;
    *((unsigned char *)this + 3) = 0;
    goto LABEL_48;
  }
LABEL_47:
  BOOL v26 = 0;
LABEL_48:
  if (*((unsigned char *)this + 4))
  {
    long long v27 = (BlueFin::GlUtlGlSysLogEntryCodec *)((char *)this + 5);
    BlueFin::GlFormat::glsnprintf(v27, (char *)0x100, "ParseEntry: SLOG entry corrupt on Line Number:%d", a4, a4);
    GlCustomLog(11, "%s\n", (const char *)v27);
    GlCustomLog(11, "%s\n", __source);
    strlcat((char *)v27, "  Error:", 0x100uLL);
    strlcat((char *)v27, __source, 0x100uLL);
  }
  return v26;
}

unsigned char *BlueFin::GlUtlB64::b64_decode_(unsigned __int8 *a1, unint64_t a2, unsigned char *a3, unint64_t a4, __int16 a5, unsigned __int8 **a6, _DWORD *a7)
{
  unint64_t v7 = a2 >> 2;
  if ((a2 & 3) != 0) {
    ++v7;
  }
  unint64_t v8 = 3 * v7;
  *a6 = 0;
  *a7 = 0;
  if (a3)
  {
    if (v8 > a4)
    {
      unint64_t v8 = 0;
      *a7 = 1;
      return (unsigned char *)v8;
    }
    unsigned __int8 v9 = a3;
    if (!a2) {
      return (unsigned char *)(v9 - a3);
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned __int8 v9 = a3;
    while (1)
    {
      unsigned int v12 = (char)*a1;
      if (v12 == 61)
      {
        *(&v15 + v11) = 0;
        ++v10;
        goto LABEL_12;
      }
      int v13 = BlueFin::GlUtlB64::b64_indexes[*a1];
      if (v13 != 255)
      {
        uint64_t v10 = 0;
        *(&v15 + v11) = v13;
LABEL_12:
        if (++v11 == 4)
        {
          *unsigned __int8 v9 = (4 * v15) | (v16 >> 4) & 3;
          if (v10 == 2) {
            return (unsigned char *)(++v9 - a3);
          }
          v9[1] = (16 * v16) | (v17 >> 2) & 0xF;
          if (v10 == 1)
          {
            v9 += 2;
            return (unsigned char *)(v9 - a3);
          }
          __n128 v9[2] = v18 + (v17 << 6);
          if (v10)
          {
            v9 += 3;
            return (unsigned char *)(v9 - a3);
          }
          uint64_t v11 = 0;
          v9 += 3;
        }
        goto LABEL_23;
      }
      if (v12 <= 0x20)
      {
        if (((1 << v12) & 0x100000B00) != 0)
        {
          if ((a5 & 0x200) != 0) {
            goto LABEL_30;
          }
          goto LABEL_23;
        }
        if (((1 << v12) & 0x2400) != 0) {
          goto LABEL_23;
        }
      }
      if ((a5 & 0x100) != 0)
      {
LABEL_30:
        unint64_t v8 = 0;
        *a7 = 3;
        *a6 = a1;
        return (unsigned char *)v8;
      }
LABEL_23:
      ++a1;
      if (!--a2) {
        return (unsigned char *)(v9 - a3);
      }
    }
  }
  return (unsigned char *)v8;
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::MakeEphemerisObj(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 12);
  if (a3 == 1)
  {
    if (v3)
    {
      int v4 = &unk_270EC03F0;
      __int16 v5 = 4657;
    }
    else
    {
      int v4 = &unk_270EC02B8;
      __int16 v5 = 4609;
    }
    *(_WORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 16) = a2 + 32;
    *(int32x2_t *)(a2 + 24) = vdup_n_s32(0xFF9222FF);
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    int v4 = &unk_270EC0528;
    *(unsigned char *)(a2 + 8) = (16 * v3) | 2;
    *(unsigned char *)(a2 + 9) = 19;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 16) = a2 + 32;
    *(int32x2_t *)(a2 + 24) = vdup_n_s32(0xFF9222FF);
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 92) = 0u;
  }
  *(void *)a2 = v4;
  return a2;
}

uint64_t BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded(unsigned char *a1, int a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 40))(a1, a3);
  if (a2 && result == 2)
  {
    uint64_t v7 = 0;
LABEL_7:
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a3, v7);
    goto LABEL_8;
  }
  if ((a2 & 1) == 0 && !result)
  {
    uint64_t v7 = 2;
    goto LABEL_7;
  }
LABEL_8:
  if (a1[2272] && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    uint64_t result = (*(uint64_t (**)(unsigned char *, void, void))(*(void *)a1 + 24))(a1, 0, 0);
  }
  a1[2272] = 0;
  return result;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::MarkVerified(BlueFin::GlPeGpsEphemerisBase *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, uint64_t))(*(void *)this + 216))(this, 2, 1);
}

uint64_t BlueFin::GlPeBdsEphMgr::MakeEphemerisObj(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    int v3 = &unk_270EBFA28;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 18;
    char v6 = 65;
  }
  else
  {
    char v7 = *(unsigned char *)(a1 + 12);
    int v3 = &unk_270EC0528;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 92) = 0u;
    char v6 = (16 * v7) | 2;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 19;
  }
  *(unsigned char *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 9) = v5;
  *(void *)(a2 + 16) = v4;
  *(int32x2_t *)(a2 + 24) = vdup_n_s32(0xFF9222FF);
  *(void *)a2 = v3;
  return a2;
}

uint64_t BlueFin::GlPeGalEphMgr::MakeEphemerisObj(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    int v3 = &unk_270EC0C88;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 16;
    char v6 = 81;
  }
  else
  {
    char v7 = *(unsigned char *)(a1 + 12);
    int v3 = &unk_270EC0528;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 92) = 0u;
    char v6 = (16 * v7) | 2;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 19;
  }
  *(unsigned char *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 9) = v5;
  *(void *)(a2 + 16) = v4;
  *(int32x2_t *)(a2 + 24) = vdup_n_s32(0xFF9222FF);
  *(void *)a2 = v3;
  return a2;
}

BOOL BlueFin::GlPeBdsEphemeris::isVerified(BlueFin::GlPeBdsEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 2) != 0;
}

BOOL BlueFin::GlPeGalEphemeris::isVerified(BlueFin::GlPeGalEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 2) != 0;
}

uint64_t BlueFin::GlPeGloEphemeris::GetCurveFitIntervalS(BlueFin::GlPeGloEphemeris *this)
{
  return 3600;
}

uint64_t BlueFin::GlPeEphemerisMgr::validateLtoWithBE(BlueFin::GlPeEphemerisMgr *this, const BlueFin::GlPeEphemeris *a2, const BlueFin::GlPeEphemeris *a3)
{
  int v6 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 144))(a2);
  int v7 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a3 + 144))(a3);
  if ((v6 == 2) == (v7 == 2))
  {
    char v15 = "bEphA_is_LTO != bEphB_is_LTO";
    DeviceFaultNotify("glpe_ephmgr.cpp", 2233, "validateLtoWithBE", (char)"bEphA_is_LTO != bEphB_is_LTO");
    int v16 = 2233;
    goto LABEL_36;
  }
  int v8 = v7;
  if (v6 == 2) {
    unsigned __int8 v9 = a2;
  }
  else {
    unsigned __int8 v9 = a3;
  }
  if (v7 == 2) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = a3;
  }
  if ((*((unsigned char *)v10 + 8) & 0xF) != 1)
  {
    char v15 = "rotBE.GetFormat() == GlPeEphemeris::FORMAT_NATIVE";
    DeviceFaultNotify("glpe_ephmgr.cpp", 2238, "validateLtoWithBE", (char)"rotBE.GetFormat() == GlPeEphemeris::FORMAT_NATIVE");
    int v16 = 2238;
LABEL_36:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", v16, v15);
  }
  uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v9 + 40))(v9);
  if (!result) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v10 + 40))(v10);
  if (!result || (*((unsigned char *)v10 + 8) & 0xF0) == 0x20 && *(unsigned char *)(*((void *)this + 2) + 2589)) {
    return result;
  }
  (*(void (**)(char *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)v9 + 136))((char *)&v30 + 1, v9);
  uint64_t result = (uint64_t)(*(void *(**)(uint64_t *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)v10 + 136))(&v30, v10);
  if (BYTE1(v30) != v30) {
    return result;
  }
  BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 2), 1, v29);
  uint64_t result = BlueFin::GlPeEphemeris::isExpired(v10, (uint64_t)v29);
  if (result) {
    return result;
  }
  uint64_t result = BlueFin::GlPeEphemeris::isExpired(v9, (uint64_t)v29);
  if (result) {
    return result;
  }
  if (v6 == 2)
  {
    uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a3 + 184))(a3);
    if (!result) {
      return result;
    }
  }
  if (v8 == 2)
  {
    uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 184))(a2);
    if (!result) {
      return result;
    }
  }
  uint64_t v28 = 0;
  memset(v26, 0, sizeof(v26));
  int v27 = 0;
  uint64_t v25 = 0;
  memset(v23, 0, sizeof(v23));
  int v24 = 0;
  uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, __n128 *, _OWORD *, double))(*(void *)v10 + 112))(v10, v29, v23, 0.0);
  if (!result) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, __n128 *, _OWORD *, double))(*(void *)v9 + 112))(v9, v29, v26, 0.0);
  if (!result) {
    return result;
  }
  int v12 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, char *, _OWORD *, _OWORD *))(*(void *)this + 400))(this, (char *)&v30 + 1, v26, v23);
  if (v12 == 1)
  {
    BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)this + 4), *((_DWORD *)this + 3), 1, v22);
    if ((((unint64_t)*(unsigned int *)(*(void *)v22 + (((unint64_t)BYTE1(v30) >> 3) & 0x1C)) >> (BYTE1(v30) & 0x1F)) & 1) == 0)
    {
      uint64_t v13 = *((void *)this + 4);
      unsigned int v14 = *((_DWORD *)this + 3);
      if ((*(unsigned char *)(v13 + 1636) & 4) != 0) {
        goto LABEL_30;
      }
      LOBYTE(v22[0]) = BYTE1(v30);
      BlueFin::GlGnssSet::Add(v13 + 576, v14, (unsigned __int8 *)v22);
    }
    unsigned int v14 = *((_DWORD *)this + 3);
LABEL_30:
    if (v14 == 4)
    {
      (*(void (**)(BlueFin::GlPeEphemerisMgr *, char *, void))(*(void *)this + 288))(this, (char *)&v30 + 1, 0);
      GlCustomLog(14, "SuspectBE did not match Lto (%s,%d), mark Lto Bad, suspected bad decode BE.\n");
    }
    else
    {
      if ((*(unsigned int (**)(const BlueFin::GlPeEphemeris *))(*(void *)v10 + 184))(v10))
      {
        GlCustomLog(14, "suspected Lto (%s,%d)\n");
      }
      else
      {
        BlueFin::GlGnssIdSet::Add((void *)this + 48, (unsigned __int8 *)&v30 + 1);
        BlueFin::GlGnssIdSet::Add((void *)this + 54, (unsigned __int8 *)&v30 + 1);
        GlCustomLog(14, "SuspectBE did not match Lto (%s,%d), mark Lto Bad, requiring verification of BE.\n");
      }
      BlueFin::GlPeRangeAidGen::RemoveSvFromEph(*((void *)this + 10), *((_DWORD *)this + 3), BYTE1(v30));
    }
    goto LABEL_39;
  }
  if (!v12)
  {
    BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)this + 4), *((_DWORD *)this + 3), 0, v22);
    if (((unint64_t)*(unsigned int *)(*(void *)v22 + (((unint64_t)BYTE1(v30) >> 3) & 0x1C)) >> (BYTE1(v30) & 0x1F)))
    {
      BlueFin::GlPeLtoMgr::RemoveSvFromBadSet(*((void *)this + 4), *((_DWORD *)this + 3), BYTE1(v30), 0);
      GlCustomLog(14, "rehabilitate the suspected LTO(%s,%d)!\n");
    }
  }
LABEL_39:
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, char *, _OWORD *, _OWORD *))(*(void *)this + 408))(this, (char *)&v30 + 1, v26, v23);
  if (result != 1) {
    return result;
  }
  BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)this + 4), *((_DWORD *)this + 3), 1, v22);
  if (((unint64_t)*(unsigned int *)(*(void *)v22 + (((unint64_t)BYTE1(v30) >> 3) & 0x1C)) >> (BYTE1(v30) & 0x1F))) {
    goto LABEL_43;
  }
  uint64_t v17 = *((void *)this + 4);
  unsigned int v18 = *((_DWORD *)this + 3);
  if ((*(unsigned char *)(v17 + 1636) & 4) == 0)
  {
    LOBYTE(v22[0]) = BYTE1(v30);
    BlueFin::GlGnssSet::Add(v17 + 576, v18, (unsigned __int8 *)v22);
LABEL_43:
    unsigned int v18 = *((_DWORD *)this + 3);
  }
  __int16 v19 = "BDS";
  uint64_t v20 = "GPS";
  switch(v18)
  {
    case 0u:
      return GlCustomLog(14, "suspected Lto (%s,%d) because range exceeds limit\n", v20, BYTE1(v30));
    case 1u:
      uint64_t v20 = "SBAS";
      break;
    case 2u:
      uint64_t v20 = "GLNS";
      break;
    case 3u:
      uint64_t v20 = "QZSS";
      break;
    case 4u:
      goto LABEL_52;
    default:
      uint64_t v21 = "<->";
      if (v18 == 6) {
        uint64_t v21 = "NIC";
      }
      __int16 v19 = "GAL";
      if (v18 != 5) {
        __int16 v19 = v21;
      }
LABEL_52:
      uint64_t v20 = v19;
      break;
  }
  return GlCustomLog(14, "suspected Lto (%s,%d) because range exceeds limit\n", v20, BYTE1(v30));
}

uint64_t BlueFin::GlPeEphemeris::isExpired(_DWORD *a1, uint64_t a2)
{
  unsigned int v2 = a1[6];
  if (v2 == -7200001) {
    return (*(unsigned int (**)(_DWORD *))(*(void *)a1 + 248))(a1) == 0;
  }
  double v4 = (double)(int)v2;
  double v5 = *(double *)(a2 + 16);
  if (v2 <= 0xFF9222FE) {
    double v4 = (double)v2;
  }
  if (v4 > v5) {
    return 1;
  }
  unsigned int v6 = a1[7];
  double v7 = (double)(int)v6;
  if (v6 <= 0xFF9222FE) {
    double v7 = (double)v6;
  }
  return v7 < v5;
}

uint64_t BlueFin::GlPeEphemerisMgr::CompareLtoBeGeometricRange(uint64_t a1, unsigned __int8 *a2, double *a3, double *a4)
{
  unsigned int v24 = 0;
  if (!BlueFin::GlPeLtoMgr::GetLtoDataAgeS(*(void *)(a1 + 32), *(_DWORD *)(a1 + 12), *(_DWORD *)(*(void *)(a1 + 16) + 2568), &v24)|| (int)v24 < 604800)
  {
    return 2;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (*(_DWORD *)(v9 + 44) == -1) {
    return 2;
  }
  double v10 = *(double *)(v9 + 88);
  double v11 = *(double *)(v9 + 96);
  double v12 = *(double *)(v9 + 104);
  double v13 = sqrt((a3[1] - v11) * (a3[1] - v11) + (*a3 - v10) * (*a3 - v10) + (a3[2] - v12) * (a3[2] - v12));
  double v14 = sqrt((a4[1] - v11) * (a4[1] - v11) + (*a4 - v10) * (*a4 - v10) + (a4[2] - v12) * (a4[2] - v12));
  double v15 = (double)(v24 / 0x15180) + (double)(v24 / 0x15180);
  double v16 = vabdd_f64(v13, v14);
  uint64_t v17 = "<";
  BOOL v18 = v16 >= v15;
  if (v16 >= v15) {
    uint64_t v17 = ">=";
  }
  int v19 = *(_DWORD *)(a1 + 12);
  uint64_t v20 = "BDS";
  uint64_t v21 = "GPS";
  switch(v19)
  {
    case 0:
      break;
    case 1:
      uint64_t v21 = "SBAS";
      break;
    case 2:
      uint64_t v21 = "GLNS";
      break;
    case 3:
      uint64_t v21 = "QZSS";
      break;
    case 4:
      goto LABEL_15;
    default:
      char v22 = "<->";
      if (v19 == 6) {
        char v22 = "NIC";
      }
      uint64_t v20 = "GAL";
      if (v19 != 5) {
        uint64_t v20 = v22;
      }
LABEL_15:
      uint64_t v21 = v20;
      break;
  }
  GlCustomLog(14, "CompareLtoBEGeoRng(%s,%d): deltaRng:%.1f m %s %.1f m\n", v21, *a2, v16, v17, v15);
  return v18;
}

BOOL BlueFin::GlPeEphemerisMgr::CompareLtoBEPos(uint64_t a1, unsigned __int8 *a2, double *a3, double *a4)
{
  int v4 = *(_DWORD *)(a1 + 12);
  double v5 = "BDS";
  unsigned int v6 = "GPS";
  switch(v4)
  {
    case 0:
      break;
    case 1:
      unsigned int v6 = "SBAS";
      break;
    case 2:
      unsigned int v6 = "GLNS";
      break;
    case 3:
      unsigned int v6 = "QZSS";
      break;
    case 4:
      goto LABEL_7;
    default:
      double v7 = "<->";
      if (v4 == 6) {
        double v7 = "NIC";
      }
      double v5 = "GAL";
      if (v4 != 5) {
        double v5 = v7;
      }
LABEL_7:
      unsigned int v6 = v5;
      break;
  }
  double v8 = vabdd_f64(a3[6], a4[6]) * 299792458.0;
  double v9 = (a3[1] - a4[1]) * (a3[1] - a4[1]) + (*a3 - *a4) * (*a3 - *a4) + (a3[2] - a4[2]) * (a3[2] - a4[2]);
  BOOL v10 = v8 >= 70.0 || v9 >= 40000.0;
  GlCustomLog(14, "CompareLtoBEPos(%s,%d): deltaPos:%.1f m  deltaClk:%.1f m\n", v6, *a2, sqrt(v9), v8);
  return v10;
}

uint64_t BlueFin::GlPeGloEphMgr::MakeEphemerisObj(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    int v3 = &unk_270EC0F88;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(unsigned char *)(a2 + 8) = 33;
    *(_OWORD *)(a2 + 48) = 0u;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = a1 + 5856;
    char v5 = 10;
  }
  else
  {
    char v6 = *(unsigned char *)(a1 + 12);
    int v3 = &unk_270EC0528;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(unsigned char *)(a2 + 8) = (16 * v6) | 2;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 92) = 0u;
    char v5 = 19;
  }
  *(unsigned char *)(a2 + 9) = v5;
  *(void *)(a2 + 16) = v4;
  *(int32x2_t *)(a2 + 24) = vdup_n_s32(0xFF9222FF);
  *(void *)a2 = v3;
  return a2;
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::validateCandidateEphemeris(BlueFin::GlPeGpsQzssEphMgr *this, const BlueFin::GlPeEphemeris *a2, BlueFin::GlPeEphemeris *a3)
{
  (*(void (**)(uint64_t *__return_ptr, BlueFin::GlPeEphemeris *, const BlueFin::GlPeEphemeris *))(*(void *)a3 + 136))(&v53, a3, a2);
  if (!(*(unsigned int (**)(BlueFin::GlPeEphemeris *))(*(void *)a3 + 40))(a3)) {
    return 1;
  }
  int v5 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 7);
  int v6 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 232))(a3, 7);
  int v7 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 18);
  int v8 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 232))(a3, 18);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 17);
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 25);
  BOOL v11 = *((_DWORD *)this + 3) == 0;
  double v12 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 15);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 22);
  int v14 = *((_DWORD *)this + 3);
  double v15 = 0.0;
  double v16 = 0.03;
  if (v14 == 3)
  {
    if (v13 <= 0.314159265)
    {
      double v17 = -0.196349541;
      uint64_t v18 = 2;
    }
    else
    {
      double v17 = 0.589048623;
      uint64_t v18 = 1;
      double v15 = 0.06;
      double v16 = 0.09125;
    }
  }
  else
  {
    uint64_t v18 = 0;
    double v17 = 0.746128255;
  }
  double v19 = dbl_263BB40B0[v11];
  BOOL v20 = v17 < v13 && v13 < dbl_263BB45A8[v18];
  unsigned int v21 = v6 * v5;
  unsigned int v22 = v8 * v7;
  BOOL v23 = ScaledFloatingField >= v19;
  if (v14)
  {
    BOOL v24 = v21 < 0x93A80;
    BOOL v25 = v22 < 0x93A80;
    BOOL v26 = v12 <= v16;
    BOOL v27 = 1;
  }
  else
  {
    BOOL v24 = v21 < 0x93A71;
    BOOL v25 = v22 < 0x93A71;
    BOOL v23 = ScaledFloatingField >= v19 && ScaledFloatingField <= 8192.0;
    BOOL v27 = v10 <= 0.0 && v10 >= -0.00000198862815;
    BOOL v26 = v12 >= v15 && v12 <= v16;
  }
  if (v24 && v26 && v27 && v25 && v23 && v20) {
    return 1;
  }
  int v29 = *(_DWORD *)(*((void *)this + 2) + 2568);
  if (v24)
  {
    if (v25) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v30 = "BDS";
    int v31 = "GPS";
    switch(v14)
    {
      case 0:
        break;
      case 1:
        int v31 = "SBAS";
        break;
      case 2:
        int v31 = "GLNS";
        break;
      case 3:
        int v31 = "QZSS";
        break;
      case 4:
        goto LABEL_36;
      default:
        long long v32 = "<->";
        if (v14 == 6) {
          long long v32 = "NIC";
        }
        uint64_t v30 = "GAL";
        if (v14 != 5) {
          uint64_t v30 = v32;
        }
LABEL_36:
        int v31 = v30;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d)[%u]: Toc out of range (%u). Bad decode.\n", v31, v53, v29, v21);
    if (v25)
    {
LABEL_25:
      if (v23) {
        goto LABEL_26;
      }
      goto LABEL_50;
    }
  }
  int v33 = *((_DWORD *)this + 3);
  long long v34 = "BDS";
  long long v35 = "GPS";
  switch(v33)
  {
    case 0:
      break;
    case 1:
      long long v35 = "SBAS";
      break;
    case 2:
      long long v35 = "GLNS";
      break;
    case 3:
      long long v35 = "QZSS";
      break;
    case 4:
      goto LABEL_46;
    default:
      long long v36 = "<->";
      if (v33 == 6) {
        long long v36 = "NIC";
      }
      long long v34 = "GAL";
      if (v33 != 5) {
        long long v34 = v36;
      }
LABEL_46:
      long long v35 = v34;
      break;
  }
  GlCustomLog(14, "EphMgr(%s,%d)[%u]: Toe out of range (%u). Bad decode.\n", v35, v53, v29, v22);
  if (v23)
  {
LABEL_26:
    if (v26) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_50:
  int v37 = *((_DWORD *)this + 3);
  long long v38 = "BDS";
  long long v39 = "GPS";
  switch(v37)
  {
    case 0:
      break;
    case 1:
      long long v39 = "SBAS";
      break;
    case 2:
      long long v39 = "GLNS";
      break;
    case 3:
      long long v39 = "QZSS";
      break;
    case 4:
      goto LABEL_56;
    default:
      long long v40 = "<->";
      if (v37 == 6) {
        long long v40 = "NIC";
      }
      long long v38 = "GAL";
      if (v37 != 5) {
        long long v38 = v40;
      }
LABEL_56:
      long long v39 = v38;
      break;
  }
  GlCustomLog(14, "EphMgr(%s,%d)[%u]: ASqrt out of range (%.8g). Bad decode.\n", v39, v53, v29, ScaledFloatingField);
  if (v26)
  {
LABEL_27:
    if (v27) {
      goto LABEL_28;
    }
LABEL_70:
    int v45 = *((_DWORD *)this + 3);
    uint64_t v46 = "BDS";
    unsigned int v47 = "GPS";
    switch(v45)
    {
      case 0:
        break;
      case 1:
        unsigned int v47 = "SBAS";
        break;
      case 2:
        unsigned int v47 = "GLNS";
        break;
      case 3:
        unsigned int v47 = "QZSS";
        break;
      case 4:
        goto LABEL_76;
      default:
        int v48 = "<->";
        if (v45 == 6) {
          int v48 = "NIC";
        }
        uint64_t v46 = "GAL";
        if (v45 != 5) {
          uint64_t v46 = v48;
        }
LABEL_76:
        unsigned int v47 = v46;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d)[%u]: Omegadot out of range (%.8g). Bad decode.\n", v47, v53, v29, v10);
    if (v20) {
      return 0;
    }
    goto LABEL_80;
  }
LABEL_60:
  int v41 = *((_DWORD *)this + 3);
  long long v42 = "BDS";
  long long v43 = "GPS";
  switch(v41)
  {
    case 0:
      break;
    case 1:
      long long v43 = "SBAS";
      break;
    case 2:
      long long v43 = "GLNS";
      break;
    case 3:
      long long v43 = "QZSS";
      break;
    case 4:
      goto LABEL_66;
    default:
      long long v44 = "<->";
      if (v41 == 6) {
        long long v44 = "NIC";
      }
      long long v42 = "GAL";
      if (v41 != 5) {
        long long v42 = v44;
      }
LABEL_66:
      long long v43 = v42;
      break;
  }
  GlCustomLog(14, "EphMgr(%s,%d)[%u]: Ecc out of range (%.8g). Bad decode.\n", v43, v53, v29, v12);
  if (!v27) {
    goto LABEL_70;
  }
LABEL_28:
  if (!v20)
  {
LABEL_80:
    int v49 = *((_DWORD *)this + 3);
    unsigned int v50 = "BDS";
    BOOL v51 = "GPS";
    switch(v49)
    {
      case 0:
        break;
      case 1:
        BOOL v51 = "SBAS";
        break;
      case 2:
        BOOL v51 = "GLNS";
        break;
      case 3:
        BOOL v51 = "QZSS";
        break;
      case 4:
        goto LABEL_86;
      default:
        double v52 = "<->";
        if (v49 == 6) {
          double v52 = "NIC";
        }
        unsigned int v50 = "GAL";
        if (v49 != 5) {
          unsigned int v50 = v52;
        }
LABEL_86:
        BOOL v51 = v50;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d)[%u]: I0 out of range (%.8g). Bad decode.\n", v51, v53, v29, v13);
  }
  return 0;
}

BOOL BlueFin::GlPeGloEphemeris::isVerified(BlueFin::GlPeGloEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 2) != 0;
}

uint64_t BlueFin::GlPeGpsEphemeris::GetOrbitType(BlueFin::GlPeGpsEphemeris *this)
{
  return 2;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetOrbitType(BlueFin::GlPeBdsEphemeris *this)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 17);
  BOOL v3 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 22) > 0.2;
  if (ScaledFloatingField <= 6400.0) {
    return 2;
  }
  else {
    return v3;
  }
}

uint64_t BlueFin::GlPeBdsEphemeris::MarkVerified(BlueFin::GlPeBdsEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 2, 1);
}

__n128 BlueFin::GlPeBdsEphMgr::validateCandidateEphemeris(BlueFin::GlPeBdsEphMgr *this, const BlueFin::GlPeEphemeris *a2, __n128 *a3)
{
  if ((a3->n128_u8[8] & 0xF) == 1)
  {
    (*(void (**)(int *__return_ptr, __n128 *))(a3->n128_u64[0] + 136))(&v61, a3);
    int v6 = (BlueFin::GlPeBdsEphMgr *)v61;
    if ((v61 - 64) <= 0xC0u)
    {
      DeviceFaultNotify("glpe_bdephmgr.cpp", 1301, "validateCandidateEphemeris", (char)"IS_GNSS_ID(ucGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(ucGnssId))");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 1301, "IS_GNSS_ID(ucGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(ucGnssId))");
    }
    LOWORD(v61) = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    memset(v67, 0, sizeof(v67));
    BlueFin::GlPeBdsEphemeris::GetBdUncmprsdEph((uint64_t)a3, (uint64_t)&v61);
    BOOL v7 = (v6 - 1) >= 5 && (v6 - 59) >= 5;
    BOOL v8 = !v7;
    if (BlueFin::BdNavMsgMgr::EphRangeCheck(&v61, v8) <= 1)
    {
      double v10 = (char *)this + 104 * (int)v6 + 9520;
      int v11 = (*(uint64_t (**)(__n128 *))(a3->n128_u64[0] + 144))(a3);
      if ((v11 & 0xFFFFFFFD) == 1)
      {
        (*(void (**)(int *__return_ptr, char *))(*(void *)v10 + 136))(&v61, (char *)this + 104 * (int)v6 + 9520);
        if (v61 - 64 > 0xFFFFFFC0) {
          return result;
        }
LABEL_31:
        BlueFin::GlPeEphemeris::operator=((uint64_t)this + 104 * (int)v6 + 9520, (uint64_t)a3);
        BOOL v26 = (char *)this + 104 * (int)v6 - 104;
        goto LABEL_32;
      }
      if (v11) {
        return result;
      }
      (*(void (**)(int *__return_ptr, char *))(*(void *)v10 + 136))(&v61, (char *)this + 104 * (int)v6 + 9520);
      if (v61 - 1 >= 0x3F) {
        goto LABEL_31;
      }
      int v60 = v6 - 1;
      if ((*(unsigned int (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 27)&& (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 27)&& (int v12 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 28), v12 != (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 28)))
      {
        BOOL v59 = 0;
      }
      else
      {
        int v13 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 18);
        int v14 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 232))((char *)this + 104 * (int)v6 + 9520, 18)* v13;
        int v15 = (*(uint64_t (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 18);
        BOOL v59 = v14 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 232))(a3, 18) * v15;
      }
      int v16 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 5);
      int v17 = (*(uint64_t (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 5);
      int v18 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 3);
      int v19 = (*(uint64_t (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 3);
      int v20 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 7);
      int v21 = (*(uint64_t (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 7);
      if (v59 && v16 == v17 && v18 == v19 && v20 == v21)
      {
        int v30 = (*(uint64_t (**)(char *, void))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 0);
        if (v30 == (*(unsigned int (**)(__n128 *, void))(a3->n128_u64[0] + 192))(a3, 0))
        {
          int v31 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 4);
          if (v31 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 4))
          {
            int v32 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 3);
            if (v32 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 3))
            {
              int v33 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 6);
              if (v33 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 6))
              {
                int v34 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 5);
                if (v34 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 5))
                {
                  int v35 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 7);
                  if (v35 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 7))
                  {
                    int v36 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 8);
                    if (v36 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 8))
                    {
                      int v37 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 9);
                      if (v37 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 9))
                      {
                        int v38 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 10);
                        if (v38 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 10))
                        {
                          int v39 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 11);
                          if (v39 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 11))
                          {
                            int v40 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 12);
                            if (v40 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 12))
                            {
                              int v41 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 13);
                              if (v41 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 13))
                              {
                                int v42 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 14);
                                if (v42 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 14))
                                {
                                  int v43 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 15);
                                  if (v43 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 15))
                                  {
                                    int v44 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 16);
                                    if (v44 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 16))
                                    {
                                      int v45 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 17);
                                      if (v45 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 17))
                                      {
                                        int v46 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 192))((char *)this + 104 * (int)v6 + 9520, 18);
                                        if (v46 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 192))(a3, 18))
                                        {
                                          int v47 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 19);
                                          if (v47 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 19))
                                          {
                                            int v48 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 20);
                                            if (v48 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 20))
                                            {
                                              int v49 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 21);
                                              if (v49 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 21))
                                              {
                                                int v50 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 22);
                                                if (v50 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 22))
                                                {
                                                  int v51 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 23);
                                                  if (v51 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 23))
                                                  {
                                                    int v52 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 24);
                                                    if (v52 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 24))
                                                    {
                                                      int v53 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 25);
                                                      if (v53 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 25))
                                                      {
                                                        int v54 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v10 + 208))((char *)this + 104 * (int)v6 + 9520, 26);
                                                        if (v54 == (*(unsigned int (**)(__n128 *, uint64_t))(a3->n128_u64[0] + 208))(a3, 26))
                                                        {
                                                          (*(void (**)(char *))(*(void *)v10 + 168))((char *)this + 104 * (int)v6 + 9520);
                                                          (*(void (**)(__n128 *))(a3->n128_u64[0] + 168))(a3);
                                                          return result;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (BlueFin::GlPeBdsEphMgr::NewEphSet(v6, (uint64_t)this + 104 * (int)v6 + 9520, (const BlueFin::GlPeBdsEphemeris *)a3, v22))
      {
        BlueFin::GlPeEphemeris::operator=((uint64_t)this + 104 * (int)v6 + 9520, (uint64_t)a3);
        BOOL v26 = (char *)this + 104 * v60;
LABEL_32:
        __n128 result = a3[3];
        __n128 v27 = a3[4];
        __n128 v28 = a3[5];
        *((void *)v26 + 1215) = a3[6].n128_u64[0];
        __n128 v29 = a3[2];
        *(__n128 *)(v26 + 9688) = v27;
        *(__n128 *)(v26 + 9704) = v28;
        *(__n128 *)(v26 + 9656) = v29;
        *(__n128 *)(v26 + 9672) = result;
        return result;
      }
      if (a2
        && !(*(unsigned int (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 144))(a2)
        && ((*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 184))(a2) & 1) == 0)
      {
        LOBYTE(v61) = (_BYTE)v6;
        (*(void (**)(BlueFin::GlPeBdsEphMgr *, int *, void))(*(void *)this + 288))(this, &v61, 0);
      }
      if ((*(uint64_t (**)(char *))(*(void *)v10 + 184))((char *)this + 104 * (int)v6 + 9520))
      {
        (*(void (**)(char *))(*(void *)v10 + 176))((char *)this + 104 * (int)v6 + 9520);
      }
      else
      {
        BlueFin::GlPeEphemeris::operator=((uint64_t)this + 104 * (int)v6 + 9520, (uint64_t)a3);
        long long v55 = (__n128 *)((char *)this + 104 * v60);
        __n128 result = a3[3];
        __n128 v56 = a3[4];
        __n128 v57 = a3[5];
        v55[607].n128_u64[1] = a3[6].n128_u64[0];
        long long v55 = (__n128 *)((char *)v55 + 9624);
        __n128 v58 = a3[2];
        v55[4] = v56;
        v55[5] = v57;
        v55[2] = v58;
        v55[3] = result;
      }
    }
  }
  return result;
}

uint64_t BlueFin::BdNavMsgMgr::EphRangeCheck(_DWORD *a1, int a2)
{
  int v4 = a1[3];
  double v5 = (double)(int)a1[24];
  *(double *)&unint64_t v6 = ldexp(3.14159265, -31);
  double v7 = *(double *)&v6 * v5;
  LODWORD(v6) = a1[20];
  double v8 = (double)v6;
  *(double *)&unint64_t v9 = ldexp(1.0, -33);
  double v10 = *(double *)&v9 * v8;
  LODWORD(v9) = a1[21];
  double v11 = ldexp(1.0, -19) * (double)v9;
  BOOL v12 = v10 > 0.03 || v10 < 0.0;
  unsigned int v13 = v4 & 1 | 2;
  if (!v12) {
    unsigned int v13 = v4 & 1;
  }
  BOOL v15 = v7 < 1.1 && v7 > 0.8 || a2 == 1;
  int v16 = v13 | 8;
  if (!v15) {
    v13 |= 8u;
  }
  if (a2 != 1) {
    int v16 = v13;
  }
  if (v7 >= 0.13 || v7 < 0.0) {
    unsigned int v13 = v16;
  }
  if (v11 >= 6700.0 || v11 <= 5100.0) {
    v13 |= 4u;
  }
  if ((8 * a1[22]) > 0x93A78) {
    v13 |= 0x20u;
  }
  if ((8 * a1[5]) <= 0x93A78) {
    return v13;
  }
  else {
    return v13 | 0x40;
  }
}

uint64_t BlueFin::GlPeGalEphemeris::GetOrbitType(BlueFin::GlPeGalEphemeris *this)
{
  return 2;
}

uint64_t BlueFin::GlPeGalEphemeris::MarkVerified(BlueFin::GlPeGalEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 2, 1);
}

uint64_t BlueFin::GlPeGalEphMgr::validateCandidateEphemeris(BlueFin::GlPeGalEphMgr *this, const BlueFin::GlPeEphemeris *a2, BlueFin::GlPeEphemeris *a3)
{
  (*(void (**)(uint64_t *__return_ptr, BlueFin::GlPeEphemeris *))(*(void *)a3 + 136))(&v84, a3);
  int v6 = v84;
  int v7 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 7);
  unsigned int v8 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 232))(a3, 7) * v7;
  int v9 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 18);
  unsigned int v10 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 232))(a3, 18) * v9;
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 17);
  double v12 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 15);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 22);
  if (v8 <= 0x93A44)
  {
    if (v10 > 0x93A44)
    {
LABEL_29:
      int v23 = *((_DWORD *)this + 3);
      BOOL v24 = "BDS";
      BOOL v25 = "GPS";
      switch(v23)
      {
        case 0:
          break;
        case 1:
          BOOL v25 = "SBAS";
          break;
        case 2:
          BOOL v25 = "GLNS";
          break;
        case 3:
          BOOL v25 = "QZSS";
          break;
        case 4:
          goto LABEL_36;
        default:
          BOOL v26 = "<->";
          if (v23 == 6) {
            BOOL v26 = "NIC";
          }
          BOOL v24 = "GAL";
          if (v23 != 5) {
            BOOL v24 = v26;
          }
LABEL_36:
          BOOL v25 = v24;
          break;
      }
      GlCustomLog(14, "EphMgr(%s,%d): Toe out of range (%u). Bad decode.\n", v25, v6, v10);
      goto LABEL_39;
    }
    BOOL v17 = ScaledFloatingField >= 2530.0 && ScaledFloatingField <= 8192.0;
    if (v17 && v12 >= 0.0)
    {
      BOOL v18 = v6 == 18 || v6 == 14;
      double v19 = 0.03;
      if (v18) {
        double v19 = 0.17;
      }
      if (v12 <= v19 && v13 >= 0.802 && v13 <= 1.152)
      {
        int v20 = 0;
        uint64_t v21 = 1;
        if (!a2) {
          return v21;
        }
        goto LABEL_81;
      }
    }
  }
  else
  {
    int v14 = *((_DWORD *)this + 3);
    BOOL v15 = "BDS";
    int v16 = "GPS";
    switch(v14)
    {
      case 0:
        break;
      case 1:
        int v16 = "SBAS";
        break;
      case 2:
        int v16 = "GLNS";
        break;
      case 3:
        int v16 = "QZSS";
        break;
      case 4:
        goto LABEL_26;
      default:
        unsigned int v22 = "<->";
        if (v14 == 6) {
          unsigned int v22 = "NIC";
        }
        BOOL v15 = "GAL";
        if (v14 != 5) {
          BOOL v15 = v22;
        }
LABEL_26:
        int v16 = v15;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d): Toc out of range (%u). Bad decode.\n", v16, v6, v8);
    if (v10 > 0x93A44) {
      goto LABEL_29;
    }
  }
LABEL_39:
  if (ScaledFloatingField < 2530.0 || ScaledFloatingField > 8192.0)
  {
    int v27 = *((_DWORD *)this + 3);
    __n128 v28 = "BDS";
    __n128 v29 = "GPS";
    switch(v27)
    {
      case 0:
        break;
      case 1:
        __n128 v29 = "SBAS";
        break;
      case 2:
        __n128 v29 = "GLNS";
        break;
      case 3:
        __n128 v29 = "QZSS";
        break;
      case 4:
        goto LABEL_48;
      default:
        int v30 = "<->";
        if (v27 == 6) {
          int v30 = "NIC";
        }
        __n128 v28 = "GAL";
        if (v27 != 5) {
          __n128 v28 = v30;
        }
LABEL_48:
        __n128 v29 = v28;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d): ASqrt out of range (%.8g). Bad decode.\n", v29, v6, ScaledFloatingField);
  }
  if (v12 < 0.0) {
    goto LABEL_138;
  }
  BOOL v31 = v6 == 18 || v6 == 14;
  double v32 = 0.03;
  if (v31) {
    double v32 = 0.17;
  }
  if (v12 > v32)
  {
LABEL_138:
    int v33 = *((_DWORD *)this + 3);
    int v34 = "BDS";
    int v35 = "GPS";
    switch(v33)
    {
      case 0:
        break;
      case 1:
        int v35 = "SBAS";
        break;
      case 2:
        int v35 = "GLNS";
        break;
      case 3:
        int v35 = "QZSS";
        break;
      case 4:
        goto LABEL_66;
      default:
        int v36 = "<->";
        if (v33 == 6) {
          int v36 = "NIC";
        }
        int v34 = "GAL";
        if (v33 != 5) {
          int v34 = v36;
        }
LABEL_66:
        int v35 = v34;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d): Ecc out of range (%.8g). Bad decode.\n", v35, v6, v12);
  }
  if (v13 < 0.802 || v13 > 1.152)
  {
    int v37 = *((_DWORD *)this + 3);
    int v38 = "BDS";
    int v39 = "GPS";
    switch(v37)
    {
      case 0:
        break;
      case 1:
        int v39 = "SBAS";
        break;
      case 2:
        int v39 = "GLNS";
        break;
      case 3:
        int v39 = "QZSS";
        break;
      case 4:
        goto LABEL_77;
      default:
        int v40 = "<->";
        if (v37 == 6) {
          int v40 = "NIC";
        }
        int v38 = "GAL";
        if (v37 != 5) {
          int v38 = v40;
        }
LABEL_77:
        int v39 = v38;
        break;
    }
    GlCustomLog(14, "EphMgr(%s,%d): I0 out of range (%.8g). Bad decode.\n", v39, v6, v13);
  }
  uint64_t v21 = 0;
  int v20 = 1;
  if (a2)
  {
LABEL_81:
    int v41 = *((unsigned char *)a2 + 8) & 0xF;
    if ((*((unsigned char *)a2 + 8) & 0xF) != 0)
    {
      BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 2), 1, &v80);
      int isExpired = BlueFin::GlPeEphemeris::isExpired(a3, (uint64_t)&v80);
      if (v41 == 1)
      {
        v80.n128_u16[4] = 4177;
        v81 = v83;
        int32x2_t v82 = vdup_n_s32(0xFF9222FF);
        long long v43 = *((_OWORD *)a3 + 3);
        v83[0] = *((_OWORD *)a3 + 2);
        v83[1] = v43;
        long long v44 = *((_OWORD *)a3 + 5);
        v83[2] = *((_OWORD *)a3 + 4);
        v83[3] = v44;
        v80.n128_u64[0] = (unint64_t)&unk_270EC0C88;
        BOOL v45 = BlueFin::GlPeGalEphemeris::CompareEphSetFields((BlueFin::GlPeGalEphemeris *)&v80, a2);
        uint64_t v21 = v21 | (v45 | isExpired) ^ 1;
        if ((*(unsigned int (**)(BlueFin::GlPeGalEphMgr *, uint64_t *))(*(void *)this + 264))(this, &v84))
        {
          if (v45)
          {
            if (!BlueFin::GlPeGalEphemeris::CompareEphSetFields(a2, (const BlueFin::GlPeGalEphemeris *)&v80)) {
              goto LABEL_112;
            }
            int v46 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, void))(*(void *)a2 + 192))(a2, 0);
            if (v46 != (*(unsigned int (**)(__n128 *, void))(v80.n128_u64[0] + 192))(&v80, 0)) {
              goto LABEL_112;
            }
            int v47 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 4);
            if (v47 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 4)) {
              goto LABEL_112;
            }
            int v48 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 3);
            if (v48 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 3)) {
              goto LABEL_112;
            }
            int v49 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 6);
            if (v49 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 6)) {
              goto LABEL_112;
            }
            int v50 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 5);
            if (v50 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 5)) {
              goto LABEL_112;
            }
            int v51 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 7);
            if (v51 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 7)) {
              goto LABEL_112;
            }
            int v52 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 8);
            if (v52 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 8)) {
              goto LABEL_112;
            }
            int v53 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 9);
            if (v53 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 9)) {
              goto LABEL_112;
            }
            int v54 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 10);
            if (v54 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 10)) {
              goto LABEL_112;
            }
            int v55 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 11);
            if (v55 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 11)) {
              goto LABEL_112;
            }
            int v56 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 12);
            if (v56 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 12)) {
              goto LABEL_112;
            }
            int v57 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 13);
            if (v57 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 13)) {
              goto LABEL_112;
            }
            int v58 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 14);
            if (v58 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 14)) {
              goto LABEL_112;
            }
            int v59 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 15);
            if (v59 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 15)) {
              goto LABEL_112;
            }
            int v60 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 16);
            if (v60 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 16)) {
              goto LABEL_112;
            }
            int v61 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 17);
            if (v61 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 17)) {
              goto LABEL_112;
            }
            int v62 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 18);
            if (v62 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 192))(&v80, 18)) {
              goto LABEL_112;
            }
            int v63 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 19);
            if (v63 != (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 19)) {
              goto LABEL_112;
            }
            int v64 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 20);
            if (v64 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 20)
              && (int v65 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 21), v65 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 21))&& (v66 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 22), v66 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 22))&& (v67 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 23), v67 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 23))&& (v68 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 24), v68 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 24))&& (v69 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 25), v69 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 25))
              && (int v70 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 26), v70 == (*(unsigned int (**)(__n128 *, uint64_t))(v80.n128_u64[0] + 208))(&v80, 26)))
            {
              uint64_t v21 = 1;
              (*(void (**)(__n128 *, uint64_t, uint64_t))(v80.n128_u64[0] + 216))(&v80, 2, 1);
            }
            else
            {
LABEL_112:
              int v71 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 184))(a2);
              int v72 = *((_DWORD *)this + 3);
              if (v71)
              {
                double v73 = "BDS";
                double v74 = "GPS";
                switch(v72)
                {
                  case 0:
                    break;
                  case 1:
                    double v74 = "SBAS";
                    break;
                  case 2:
                    double v74 = "GLNS";
                    break;
                  case 3:
                    double v74 = "QZSS";
                    break;
                  case 4:
                    goto LABEL_123;
                  default:
                    double v77 = "<->";
                    if (v72 == 6) {
                      double v77 = "NIC";
                    }
                    double v73 = "GAL";
                    if (v72 != 5) {
                      double v73 = v77;
                    }
LABEL_123:
                    double v74 = v73;
                    break;
                }
                GlCustomLog(14, "EphMgr(%s,%d): Compare with existing external eph which is verified did not match.  Reject this new broadcast.\n", v74, v6);
                uint64_t v21 = 0;
              }
              else
              {
                double v75 = "BDS";
                double v76 = "GPS";
                switch(v72)
                {
                  case 0:
                    break;
                  case 1:
                    double v76 = "SBAS";
                    break;
                  case 2:
                    double v76 = "GLNS";
                    break;
                  case 3:
                    double v76 = "QZSS";
                    break;
                  case 4:
                    goto LABEL_130;
                  default:
                    double v78 = "<->";
                    if (v72 == 6) {
                      double v78 = "NIC";
                    }
                    double v75 = "GAL";
                    if (v72 != 5) {
                      double v75 = v78;
                    }
LABEL_130:
                    double v76 = v75;
                    break;
                }
                GlCustomLog(14, "EphMgr(%s,%d): Compare with existing external eph which is unverified did not match. Possible bad decode.\n", v76, v6);
                uint64_t v21 = 0;
                int v20 = 1;
              }
            }
          }
        }
      }
      if ((v20 | isExpired) == 1)
      {
        (*(void (**)(BlueFin::GlPeGalEphMgr *, uint64_t *, void))(*(void *)this + 288))(this, &v84, 0);
        return v21 & (isExpired ^ 1);
      }
    }
  }
  return v21;
}

BOOL BlueFin::GlPeGalEphemeris::CompareEphSetFields(BlueFin::GlPeGalEphemeris *this, const BlueFin::GlPeGalEphemeris *a2)
{
  if ((*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 27)
    && (*(unsigned int (**)(const BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 27)
    && (int v4 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 28),
        v4 != (*(unsigned int (**)(const BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 28)))
  {
    BOOL v8 = 0;
  }
  else
  {
    int v5 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 18);
    int v6 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 232))(this, 18) * v5;
    int v7 = (*(uint64_t (**)(const BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 18);
    BOOL v8 = v6 == (*(unsigned int (**)(const BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 18)* v7;
  }
  int v9 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 5);
  int v10 = (*(uint64_t (**)(const BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 5);
  int v11 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 3);
  int v12 = (*(uint64_t (**)(const BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 3);
  BOOL v13 = v9 == v10 && v8;
  return v11 == v12 && v13;
}

BOOL BlueFin::GlPeGloEphMgr::validateCandidateEphemeris(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeEphemeris *a2, BlueFin::GlPeEphemeris *a3)
{
  return BlueFin::GlPeGloEphMgr::validateEph(this, a3);
}

uint64_t BlueFin::GlPeGloEphemeris::MarkVerified(BlueFin::GlPeGloEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 2, 1);
}

uint64_t BlueFin::GlPeGloEphemeris::GetOrbitType(BlueFin::GlPeGloEphemeris *this)
{
  return 2;
}

uint64_t BlueFin::GlPeLtoEphemeris::GetOrbitType(BlueFin::GlPeLtoEphemeris *this)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 22);
  if (BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 17) <= 6000.0) {
    return 2;
  }
  else {
    return ScaledFloatingField > 0.314159265;
  }
}

BOOL BlueFin::GlPeNicEphemeris::isVerified(BlueFin::GlPeNicEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 2) != 0;
}

BOOL BlueFin::GlPeQzssEphemeris::GetOrbitType(BlueFin::GlPeQzssEphemeris *this)
{
  return BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 22) > 0.314159265;
}

uint64_t BlueFin::GlPeNicEphemeris::GetSrc(BlueFin::GlPeNicEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 905, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 905, "false");
  }
  return dword_263BB2E60[v1];
}

uint64_t BlueFin::GlPeNicEphemeris::MarkVerified(BlueFin::GlPeNicEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 2, 1);
}

BOOL BlueFin::GlPeRtoReader::isRtoEphEnabledAndRequested(BlueFin::GlPeRtoReader *this)
{
  uint64_t v1 = *((int *)this + 1);
  if (v1 > 7 || ((0xEFu >> v1) & 1) == 0) {
    return 0;
  }
  int v3 = dword_263BB9378[v1];
  char v4 = 1;
  return BlueFin::GlPeRtoReader::getRtoUncmprsdEphBuffer(this, &v3) != 0;
}

BOOL BlueFin::GlPeRtoReader::ParseEph(BlueFin::GlPeRtoReader *a1, uint64_t a2, unsigned int a3, int a4, _DWORD *a5)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_rtoreader.cpp", 1380, "ParseEph", (char)"pucBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rtoreader.cpp", 1380, "pucBuffer != nullptr");
  }
  if (a4 < 1)
  {
    unsigned int v11 = 0;
  }
  else
  {
    int v10 = 0;
    unsigned int v11 = 0;
    int v12 = (unsigned __int8 *)(a2 + a3);
    do
    {
      v11 ^= *v12;
      int v13 = 8;
      do
      {
        if (v11) {
          unsigned int v11 = (v11 >> 1) ^ 0x48;
        }
        else {
          v11 >>= 1;
        }
        --v13;
      }
      while (v13);
      ++v12;
      ++v10;
    }
    while (v10 != a4);
  }
  int v22 = 1;
  uint64_t v23 = a2 + a3;
  uint64_t v24 = 0;
  __int16 v14 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v22, 5u);
  int v15 = BlueFin::GlPeBitReader::uint((BlueFin::GlPeBitReader *)&v22, 0x1Bu);
  if (v15 + v14 >= 0)
  {
    int v16 = v15 + v14 + 1;
    do
    {
      BlueFin::GlPeRtoReader::parseSatEph(a1, (BlueFin::GlPeBitReader *)&v22);
      --v16;
    }
    while (v16);
  }
  int v17 = *(_DWORD *)(a2 + a4 + a3);
  if (v11 == v17)
  {
    *a5 = BlueFin::GlPeRtoReader::getFlag(a1);
  }
  else
  {
    BOOL v18 = "<->";
    double v19 = "NIC";
    int v20 = "BDS";
    switch(*((_DWORD *)a1 + 1))
    {
      case 0:
        int v20 = "GPS";
        goto LABEL_25;
      case 1:
        int v20 = "SBAS";
        goto LABEL_25;
      case 2:
        int v20 = "GLNS";
        goto LABEL_25;
      case 3:
        int v20 = "QZSS";
        goto LABEL_25;
      case 5:
        goto LABEL_25;
      case 6:
        BOOL v18 = "GAL";
        goto LABEL_23;
      case 7:
        goto LABEL_24;
      default:
LABEL_23:
        double v19 = v18;
LABEL_24:
        int v20 = v19;
LABEL_25:
        GlCustomLog(11, "%s RTO eph section integrity check failure!\n", v20);
        break;
    }
  }
  return v11 == v17;
}

double BlueFin::GlPeRtoReader::parseSatEph(BlueFin::GlPeRtoReader *this, BlueFin::GlPeBitReader *a2)
{
  unsigned int v2 = *((_DWORD *)this + 1);
  if (v2 <= 7)
  {
    if (((1 << v2) & 0xE9) != 0)
    {
      memset(&v16[4], 0, 140);
      *(_DWORD *)int v16 = 255;
      if (v2 == 3 || !v2)
      {
        BlueFin::GlPeRtoReader::load_rto_ephemeris_elements((int)this, (uint64_t)v16, a2);
        unsigned int v2 = *((_DWORD *)this + 1);
      }
      if (v2 == 5)
      {
        BlueFin::GlPeRtoReader::load_rto_bdsephemeris_elements((int)this, (uint64_t)v16, a2);
        unsigned int v2 = *((_DWORD *)this + 1);
      }
      if (v2 == 6)
      {
        BlueFin::GlPeRtoReader::load_rto_galephemeris_elements((int)this, (uint64_t)v16, a2);
        unsigned int v2 = *((_DWORD *)this + 1);
      }
      if (v2 == 7) {
        BlueFin::GlPeRtoReader::load_rto_nicephemeris_elements((int)this, (uint64_t)v16, a2);
      }
      char v5 = v16[0];
      if (!BlueFin::GlPeRtoReader::isEphSatBad(this, *(int *)v16))
      {
        *(_DWORD *)&v16[12] = 0;
        *(_OWORD *)&v16[28] = xmmword_263BB9120;
        *(_DWORD *)&v16[44] = 51966;
        *(_DWORD *)&v16[104] = 49344;
        RtoUncmprsdEphBuffer = (_OWORD *)BlueFin::GlPeRtoReader::getRtoUncmprsdEphBuffer(this, v5);
        if (RtoUncmprsdEphBuffer)
        {
          long long v8 = *(_OWORD *)&v16[112];
          RtoUncmprsdEphBuffer[6] = *(_OWORD *)&v16[96];
          RtoUncmprsdEphBuffer[7] = v8;
          RtoUncmprsdEphBuffer[8] = *(_OWORD *)&v16[128];
          long long v9 = *(_OWORD *)&v16[48];
          RtoUncmprsdEphBuffer[2] = *(_OWORD *)&v16[32];
          RtoUncmprsdEphBuffer[3] = v9;
          long long v10 = *(_OWORD *)&v16[80];
          RtoUncmprsdEphBuffer[4] = *(_OWORD *)&v16[64];
          RtoUncmprsdEphBuffer[5] = v10;
          long long v6 = *(_OWORD *)&v16[16];
          _OWORD *RtoUncmprsdEphBuffer = *(_OWORD *)v16;
          RtoUncmprsdEphBuffer[1] = v6;
        }
      }
    }
    else if (v2 == 2)
    {
      BlueFin::GlPeRtoReader::load_rto_gloephemeris_elements((int)this, (uint64_t)v16, a2);
      char v11 = v16[60];
      if (!BlueFin::GlPeRtoReader::isEphSatBad(this, v16[60]))
      {
        uint64_t v12 = BlueFin::GlPeRtoReader::getRtoUncmprsdEphBuffer(this, v11);
        if (v12)
        {
          long long v13 = *(_OWORD *)&v16[48];
          *(_OWORD *)(v12 + 32) = *(_OWORD *)&v16[32];
          *(_OWORD *)(v12 + 48) = v13;
          *(_OWORD *)(v12 + 64) = *(_OWORD *)&v16[64];
          *(void *)(v12 + 80) = *(void *)&v16[80];
          *(void *)&long long v6 = *(void *)v16;
          long long v14 = *(_OWORD *)&v16[16];
          *(_OWORD *)uint64_t v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v14;
        }
      }
    }
  }
  return *(double *)&v6;
}

BOOL BlueFin::GlPeRtoReader::isEphSatBad(BlueFin::GlPeRtoReader *this, int a2)
{
  if (a2 == 255) {
    return 1;
  }
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  uint64_t v6 = *((int *)this + 1);
  BOOL result = 1;
  if v6 <= 7 && ((0xEFu >> v6))
  {
    uint64_t v7 = *((void *)this + 29);
    if (!v7) {
      return 0;
    }
    unsigned int v8 = dword_263BB9378[v6];
    unsigned __int8 v9 = a2 + 1;
    long long v10 = (const void **)BlueFin::GlGnssSet::operator()(v7 + 1024, v8);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v11, v12, 2u, v10);
    if ((((unint64_t)*(unsigned int *)(v11 + 4 * (v9 >> 5)) >> (v9 & 0x1F)) & 1) == 0)
    {
      if (BlueFin::GlAidMask::AllowSV(*((void *)this + 29), v8, v9)) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlAidMask::AllowSV(uint64_t a1, int a2, int a3)
{
  if (!*(unsigned char *)(a1 + 64)
    || ((*(void *)(a1 + 8 * BlueFin::GlImplGnss::m_aucEnabledGnssTable[a2]) >> (a3 - 1)) & 1) == 0)
  {
    return 1;
  }
  GlCustomLog(14, "AidMask.%s: suppress %u %u\n", *(const char **)(a1 + 72), BlueFin::GlImplGnss::m_aucEnabledGnssTable[a2], a3);
  return 0;
}

uint64_t BlueFin::GlPeRtoReader::getRtoUncmprsdEphBuffer(BlueFin::GlPeRtoReader *this, char a2)
{
  uint64_t v2 = *((int *)this + 1);
  if (v2 > 7 || ((0xEFu >> v2) & 1) == 0) {
    return 0;
  }
  int v4 = dword_263BB9378[v2];
  char v5 = a2 + 1;
  return BlueFin::GlPeRtoReader::getRtoUncmprsdEphBuffer(this, &v4);
}

uint64_t BlueFin::GlPeRtoReader::getRtoUncmprsdEphBuffer(void *a1, int *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 4);
  if (!*((unsigned char *)a2 + 4)) {
    return 0;
  }
  int v3 = *a2;
  if (*a2 > 6 || v2 > ((0xE243F0A181320uLL >> (8 * v3)) & 0x3F)) {
    return 0;
  }
  uint64_t result = 0;
  LOBYTE(v2) = v2 - 1;
  switch(v3)
  {
    case 0:
      uint64_t v6 = a1[1];
      goto LABEL_12;
    case 2:
      uint64_t v6 = a1[2];
      unsigned int v2 = v2;
      unsigned int v7 = 88;
      goto LABEL_13;
    case 3:
      uint64_t v6 = a1[3];
      goto LABEL_12;
    case 4:
      uint64_t v6 = a1[4];
      goto LABEL_12;
    case 5:
      uint64_t v6 = a1[5];
      goto LABEL_12;
    case 6:
      uint64_t v6 = a1[6];
LABEL_12:
      unsigned int v2 = v2;
      unsigned int v7 = 144;
LABEL_13:
      uint64_t v8 = v6 + v2 * (unint64_t)v7;
      if (v6) {
        uint64_t result = v8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BlueFin::GlPeRtoReader::getFlag(BlueFin::GlPeRtoReader *this)
{
  int v1 = *(_DWORD *)this;
  uint64_t result = 84;
  if (v1 > 13406804)
  {
    if (v1 > 447547837)
    {
      if (v1 <= 447592893)
      {
        int v3 = 447547838;
        unsigned int v4 = 65;
        int v5 = 447574462;
        int v6 = 67;
        BOOL v7 = v1 == 447584702;
        int v8 = 63;
        goto LABEL_8;
      }
      if (v1 == 447592894) {
        return 64;
      }
      if (v1 != 582741694)
      {
        int v21 = 582746046;
LABEL_50:
        if (v1 == v21) {
          return 59;
        }
        return result;
      }
      return 58;
    }
    int v10 = 13417257;
    if (v1 == 286344382) {
      int v18 = 62;
    }
    else {
      int v18 = 84;
    }
    if (v1 == 286340030) {
      int v19 = 61;
    }
    else {
      int v19 = v18;
    }
    if (v1 == 13417258) {
      unsigned int v13 = 75;
    }
    else {
      unsigned int v13 = v19;
    }
    int v14 = 13406805;
    int v15 = 74;
    BOOL v16 = v1 == 13417146;
    int v17 = 73;
  }
  else
  {
    if (v1 > 12311832)
    {
      if (v1 <= 12316349)
      {
        int v3 = 12311833;
        unsigned int v4 = 69;
        int v5 = 12311998;
        int v6 = 57;
        BOOL v7 = v1 == 12316185;
        int v8 = 70;
LABEL_8:
        if (!v7) {
          int v8 = 84;
        }
        if (v1 == v5) {
          unsigned int v9 = v6;
        }
        else {
          unsigned int v9 = v8;
        }
        if (v1 == v3) {
          return v4;
        }
        else {
          return v9;
        }
      }
      if (v1 != 12316350)
      {
        if (v1 == 12320537) {
          return 71;
        }
        int v21 = 12320702;
        goto LABEL_50;
      }
      return 58;
    }
    int v10 = 12298941;
    if (v1 == 12307646) {
      int v11 = 56;
    }
    else {
      int v11 = 84;
    }
    if (v1 == 12307481) {
      int v12 = 68;
    }
    else {
      int v12 = v11;
    }
    if (v1 == 12298942) {
      unsigned int v13 = 60;
    }
    else {
      unsigned int v13 = v12;
    }
    int v14 = 12284350;
    int v15 = 66;
    BOOL v16 = v1 == 12298777;
    int v17 = 72;
  }
  if (!v16) {
    int v17 = 84;
  }
  if (v1 == v14) {
    unsigned int v20 = v15;
  }
  else {
    unsigned int v20 = v17;
  }
  if (v1 <= v10) {
    return v20;
  }
  else {
    return v13;
  }
}

void BlueFin::GlPeRtoReader::load_rto_nicephemeris_elements(int a1, uint64_t a2, BlueFin::GlPeBitReader *this)
{
  uint64_t v5 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v6 = BlueFin::GlPeRtoReader::rto_nicephemeris_elements[v5 * 4];
    uint64_t v7 = BlueFin::GlPeBitReader::uint(this, v6 >> 1);
    int v9 = (int)(v7 << -(char)(v6 >> 1)) >> -(char)(v6 >> 1);
    if ((v6 & 1) == 0) {
      int v9 = v7;
    }
    v10[v5++] = v9;
  }
  while (v5 != 30);
  BlueFin::GlPeRtoReader::rto_eph_element_array_to_structure(v7, v8, v10, a2);
}

uint64_t BlueFin::GlPeRtoReader::ParseL5Health(BlueFin::GlPeRtoReader *this, unsigned __int8 *a2, int a3, int a4)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_rtoreader.cpp", 2030, "ParseL5Health", (char)"pucBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rtoreader.cpp", 2030, "pucBuffer != nullptr");
  }
  unsigned int v4 = &a2[a3];
  int v15 = 1;
  BOOL v16 = v4;
  uint64_t v17 = 0;
  int v5 = a4 - 4;
  if (a4 - 4 < 1)
  {
    unsigned int v7 = 0;
  }
  else
  {
    int v6 = 0;
    unsigned int v7 = 0;
    do
    {
      v7 ^= *v4;
      int v8 = 8;
      do
      {
        if (v7) {
          unsigned int v7 = (v7 >> 1) ^ 0x48;
        }
        else {
          v7 >>= 1;
        }
        --v8;
      }
      while (v8);
      ++v4;
      ++v6;
    }
    while (v6 != v5);
  }
  int v9 = *(_DWORD *)this;
  uint64_t v10 = 84;
  if (*(int *)this <= 355708576)
  {
    if (v9 == 352366241)
    {
      uint64_t v11 = (uint64_t *)((char *)this + 152);
      unsigned int v12 = 77;
      unsigned int v13 = 32;
    }
    else
    {
      if (v9 != 354594465) {
        return v10;
      }
      uint64_t v11 = (uint64_t *)((char *)this + 160);
      unsigned int v12 = 78;
      unsigned int v13 = 10;
    }
  }
  else
  {
    switch(v9)
    {
      case 355708577:
        uint64_t v11 = (uint64_t *)((char *)this + 168);
        unsigned int v12 = 79;
        unsigned int v13 = 63;
        break;
      case 356822689:
        uint64_t v11 = (uint64_t *)((char *)this + 176);
        unsigned int v12 = 80;
        unsigned int v13 = 36;
        break;
      case 357936801:
        uint64_t v11 = (uint64_t *)((char *)this + 184);
        unsigned int v12 = 81;
        unsigned int v13 = 14;
        break;
      default:
        return v10;
    }
  }
  if (BlueFin::GlPeRtoReader::parseL5Health((int)this, (BlueFin::GlPeBitReader *)&v15, *v11, v7, v13)) {
    return v12;
  }
  else {
    return 84;
  }
}

BOOL BlueFin::GlPeRtoReader::parseL5Health(int a1, BlueFin::GlPeBitReader *this, uint64_t a3, int a4, unsigned int a5)
{
  if (!a3) {
    return 0;
  }
  BlueFin::GlPeBitReader::uint(this, 0x10u);
  unsigned __int16 v8 = BlueFin::GlPeBitReader::uint(this, 0x10u);
  __int16 v9 = 0;
  int v10 = 0;
  do
  {
    unsigned __int8 v11 = BlueFin::GlPeBitReader::uint(this, 6u);
    int v12 = BlueFin::GlPeBitReader::uint(this, 2u);
    __int16 v13 = BlueFin::GlPeBitReader::uint(this, 0xBu);
    __int16 v14 = BlueFin::GlPeBitReader::uint(this, 0xDu);
    if (*((_DWORD *)this + 5) != 32) {
      *((_DWORD *)this + 5) = 0;
    }
    if (a5 > v11)
    {
      uint64_t v15 = a3 + 12 * v11;
      *(unsigned char *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12 != 0;
      *(_WORD *)(v15 + 8) = v13;
      *(_WORD *)(v15 + 10) = v14;
      ++v9;
    }
    ++v10;
  }
  while ((unsigned __int16)v10 <= v8);
  if (BlueFin::GlPeBitReader::uint(this, 0x20u) == a4) {
    return v9 != 0;
  }
  GlCustomLog(11, "RTO L5 Health section integrity check failure!\n");
  return 0;
}

BOOL BlueFin::GlPeRtoReader::parseClkErrTgd(int a1, BlueFin::GlPeBitReader *this, uint64_t a3, int a4, unsigned int a5)
{
  if (a3)
  {
    BlueFin::GlPeBitReader::uint(this, 0x10u);
    unsigned __int16 v7 = BlueFin::GlPeBitReader::uint(this, 0x10u);
    int v8 = 0;
    __int16 v9 = 0;
    do
    {
      unsigned __int8 v10 = BlueFin::GlPeBitReader::uint(this, 6u);
      int v11 = BlueFin::GlPeBitReader::uint(this, 4u);
      if (v11) {
        int v12 = 2 * (v11 == 1);
      }
      else {
        int v12 = 1;
      }
      __int16 v13 = BlueFin::GlPeBitReader::uint(this, 0xBu);
      __int16 v14 = BlueFin::GlPeBitReader::uint(this, 0xCu);
      __int16 v15 = BlueFin::GlPeBitReader::uint(this, 0xCu);
      __int16 v16 = BlueFin::GlPeBitReader::uint(this, 0xDu);
      if (*((_DWORD *)this + 5) != 32) {
        *((_DWORD *)this + 5) = 0;
      }
      if (a5 > v10 && (v12 - 1) <= 1)
      {
        uint64_t v17 = a3 + 16 * v10;
        *(unsigned char *)uint64_t v17 = v10;
        *(_DWORD *)(v17 + 4) = v12;
        *(_WORD *)(v17 + 8) = v13;
        *(_WORD *)(v17 + 10) = (__int16)(16 * v14) >> 4;
        *(_WORD *)(v17 + 12) = (__int16)(16 * v15) >> 4;
        *(_WORD *)(v17 + 14) = v16;
        ++v9;
      }
      ++v8;
    }
    while ((unsigned __int16)v8 <= v7);
    if (BlueFin::GlPeBitReader::uint(this, 0x20u) == a4) {
      return v9 != 0;
    }
    GlCustomLog(11, "RTO BDS Clk Err TGD section integrity check failure!\n");
  }
  return 0;
}

double BlueFin::GlPeRtoReader::load_rto_gloephemeris_elements(int a1, uint64_t a2, BlueFin::GlPeBitReader *this)
{
  uint64_t v5 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v6 = BlueFin::GlPeRtoReader::rto_gloephemeris_elements[v5];
    int v7 = BlueFin::GlPeBitReader::uint(this, v6 >> 1);
    int v8 = v7 << -(char)(v6 >> 1) >> -(char)(v6 >> 1);
    if ((v6 & 1) == 0) {
      int v8 = v7;
    }
    *(int *)((char *)&v14 + v5) = v8;
    v5 += 4;
  }
  while (v5 != 104);
  *(unsigned char *)(a2 + 60) = v14;
  long long v9 = v16;
  *(_OWORD *)a2 = v15;
  *(_OWORD *)(a2 + 16) = v9;
  *(_OWORD *)(a2 + 32) = v17;
  int v10 = (v19 >> 2) & 1;
  *(_DWORD *)(a2 + 48) = v18;
  *(_DWORD *)(a2 + 52) = v10;
  int v11 = v20;
  *(_DWORD *)(a2 + 56) = v21;
  double result = *(double *)&v22;
  *(_OWORD *)(a2 + 64) = v22;
  int v13 = v23;
  *(_DWORD *)(a2 + 80) = v11;
  *(_DWORD *)(a2 + 84) = v13;
  return result;
}

void BlueFin::GlPeRtoReader::load_rto_bdsephemeris_elements(int a1, uint64_t a2, BlueFin::GlPeBitReader *this)
{
  uint64_t v5 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v6 = BlueFin::GlPeRtoReader::rto_bdsephemeris_elements[v5 * 4];
    uint64_t v7 = BlueFin::GlPeBitReader::uint(this, v6 >> 1);
    int v9 = (int)(v7 << -(char)(v6 >> 1)) >> -(char)(v6 >> 1);
    if ((v6 & 1) == 0) {
      int v9 = v7;
    }
    v10[v5++] = v9;
  }
  while (v5 != 30);
  BlueFin::GlPeRtoReader::rto_eph_element_array_to_structure(v7, v8, v10, a2);
}

void BlueFin::GlPeRtoReader::load_rto_galephemeris_elements(int a1, uint64_t a2, BlueFin::GlPeBitReader *this)
{
  uint64_t v5 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v6 = BlueFin::GlPeRtoReader::rto_galephemeris_elements[v5 * 4];
    uint64_t v7 = BlueFin::GlPeBitReader::uint(this, v6 >> 1);
    int v9 = (int)(v7 << -(char)(v6 >> 1)) >> -(char)(v6 >> 1);
    if ((v6 & 1) == 0) {
      int v9 = v7;
    }
    v10[v5++] = v9;
  }
  while (v5 != 30);
  BlueFin::GlPeRtoReader::rto_eph_element_array_to_structure(v7, v8, v10, a2);
}

void BlueFin::GlPeRtoReader::load_rto_ephemeris_elements(int a1, uint64_t a2, BlueFin::GlPeBitReader *this)
{
  uint64_t v5 = 0;
  uint64_t v11 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v6 = BlueFin::GlPeRtoReader::rto_ephemeris_elements[v5 * 4];
    uint64_t v7 = BlueFin::GlPeBitReader::uint(this, v6 >> 1);
    int v9 = (int)(v7 << -(char)(v6 >> 1)) >> -(char)(v6 >> 1);
    if ((v6 & 1) == 0) {
      int v9 = v7;
    }
    v10[v5++] = v9;
  }
  while (v5 != 30);
  BlueFin::GlPeRtoReader::rto_eph_element_array_to_structure(v7, v8, v10, a2);
}

uint64_t BlueFin::GlPeBitReader::uint(BlueFin::GlPeBitReader *this, unsigned int a2)
{
  unsigned int v2 = a2;
  unsigned int v4 = *((_DWORD *)this + 5);
  if (v4) {
    BOOL v5 = a2 > v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    unsigned int v2 = a2 - v4;
    uint64_t v6 = (*((_DWORD *)this + 4) & (0xFFFFFFFF >> -(char)v4)) << (a2 - v4);
    *((_DWORD *)this + 5) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
    if (v4) {
      goto LABEL_9;
    }
  }
  int v8 = BlueFin::GlPeBitReader::getword(this);
  *((void *)this + 1) += 4;
  unsigned int v4 = 32;
  *((_DWORD *)this + 4) = v8;
  *((_DWORD *)this + 5) = 32;
  uint64_t result = v6;
LABEL_9:
  unsigned int v9 = v4 - v2;
  if (v4 >= v2)
  {
    uint64_t result = ((*((_DWORD *)this + 4) & ((-1 << -(char)v2) >> -(char)v4)) >> v9) | result;
    *((_DWORD *)this + 5) = v9;
  }
  return result;
}

uint64_t BlueFin::GlPeBitReader::getword(BlueFin::GlPeBitReader *this)
{
  if (*(_DWORD *)this == 1) {
    return **((unsigned int **)this + 1);
  }
  if (*(_DWORD *)this)
  {
    DeviceFaultNotify("glpe_bitreader.cpp", 118, "getword", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bitreader.cpp", 118, "false");
  }
  return bswap32(**((_DWORD **)this + 1));
}

void BlueFin::GlPeRtoReader::rto_eph_element_array_to_structure(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  *(_DWORD *)a4 = *a3;
  *(_DWORD *)(a4 + 4) = a3[1];
  *(_DWORD *)(a4 + 16) = a3[2];
  *(_DWORD *)(a4 + 20) = a3[3];
  *(_DWORD *)(a4 + 24) = a3[4];
  *(_DWORD *)(a4 + 48) = a3[5];
  *(_DWORD *)(a4 + 52) = a3[6];
  *(_DWORD *)(a4 + 56) = a3[7];
  *(_DWORD *)(a4 + 60) = a3[8];
  *(_DWORD *)(a4 + 64) = a3[9];
  *(_DWORD *)(a4 + 68) = a3[10];
  *(_DWORD *)(a4 + 72) = a3[11];
  *(_DWORD *)(a4 + 76) = a3[12];
  *(_DWORD *)(a4 + 80) = a3[13];
  *(_DWORD *)(a4 + 84) = a3[14];
  *(_DWORD *)(a4 + 88) = a3[15];
  *(_DWORD *)(a4 + 92) = a3[16];
  *(_DWORD *)(a4 + 96) = a3[17];
  *(_DWORD *)(a4 + 100) = a3[18];
  *(_DWORD *)(a4 + 108) = a3[19];
  *(_DWORD *)(a4 + 112) = a3[20];
  *(_DWORD *)(a4 + 116) = a3[21];
  *(_DWORD *)(a4 + 120) = a3[22];
  *(_DWORD *)(a4 + 124) = a3[23];
  *(_DWORD *)(a4 + 128) = a3[24];
  *(_DWORD *)(a4 + 132) = a3[25];
  *(_DWORD *)(a4 + 136) = a3[26];
  *(_WORD *)(a4 + 140) = a3[27];
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10>,void ()(BlueFin::GlNvStorageReader *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void **__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(&__p);
  FireDeviceLog::DeviceLogBase(6, "GlEngCbOnNvStgReadImpl,recall,size,%zu", v4, v5, v6, v7, v8, v9, (_BYTE)v30 - (_BYTE)__p);
  long long v16 = (char *)__p;
  if (__p != v30)
  {
    unint64_t v17 = 0;
    unint64_t v18 = v30 - (unsigned char *)__p;
    unsigned int v19 = v30 - __p;
    do
    {
      unint64_t v20 = v17 + 256;
      if (v18 >= v17 + 256) {
        uint64_t v21 = 256;
      }
      else {
        uint64_t v21 = v19;
      }
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v2 + 64))(v2, &v16[v17], v21);
      v19 -= 256;
      unint64_t v17 = v20;
    }
    while (v18 > v20);
  }
  FireDeviceLog::DeviceLogBase(6, "GlEngCbOnNvStgReadImpl,PRIVATE_DATA,recall,size,%zu", v10, v11, v12, v13, v14, v15, *(unsigned char *)(v3 + 1160) - *(unsigned char *)(v3 + 1152));
  uint64_t v22 = *(void *)(v3 + 1152);
  uint64_t v23 = *(void *)(v3 + 1160);
  if (v22 != v23)
  {
    unint64_t v24 = 0;
    unint64_t v25 = v23 - v22;
    unsigned int v26 = v23 - v22;
    do
    {
      unint64_t v27 = v24 + 256;
      if (v25 >= v24 + 256) {
        uint64_t v28 = 256;
      }
      else {
        uint64_t v28 = v26;
      }
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v2 + 64))(v2, v22 + v24, v28);
      v26 -= 256;
      unint64_t v24 = v27;
    }
    while (v25 > v27);
  }
  if (__p)
  {
    int v30 = __p;
    operator delete(__p);
  }
}

void sub_2638E2FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BlueFin::GlDbgNvStorageReader::FromStorageToGll(BlueFin::GlDbgNvStorageReader *this, char *a2, uint64_t a3)
{
  int v10 = a3;
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 2566);
    BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v10);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void, char *, uint64_t))(**((void **)this + 2) + 64))(*((void *)this + 2), a2, a3);
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 2566);
    uint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return v7();
  }
  else
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)v4 + 104);
    return v9();
  }
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnTimerRq(BlueFin::GlDbgProxy *this)
{
  if (!*((void *)this + 101))
  {
    *((_DWORD *)this + 1642) = (*((uint64_t (**)(char *))this + 113))((char *)this + 608);
    BlueFin::GlDbgCodec::WriteStart(this, 533);
    (*(void (**)(BlueFin::GlDbgProxy *, void))(*(void *)this + 32))(this, 0);
    BlueFin::GlDbgCodec::WriteFinal(this, 533);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (unsigned int *)this + 1642);
    }
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
  }
  return *((unsigned int *)this + 1642);
}

char *BlueFin::GlDbgProxy::End(BlueFin::GlDbgProxy *this, uint64_t a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this);
  if (result)
  {
    uint64_t result = BlueFin::GlDbgCodecBase::End(this, a2);
    *((_DWORD *)this + 1649) = 255;
    *((void *)this + 825) = 0;
    *((void *)this + 827) = 0;
    *((void *)this + 826) = 0;
  }
  return result;
}

char *BlueFin::GlDbgCodec::WriteStart(BlueFin::GlDbgCodec *this, __int16 a2)
{
  __int16 v4 = a2;
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, (const BOOL *)this + 566);
  }
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result) {
    return BlueFin::GlDbgCodec::Write(this, &v4);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::Writable(BlueFin::GlDbgProxy *this)
{
  return *((unsigned __int8 *)this + 6576);
}

char *BlueFin::GlDbgCodec::WriteFinal(BlueFin::GlDbgCodec *this, __int16 a2)
{
  __int16 v4 = a2 | 0x8000;
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, (const BOOL *)this + 566);
  }
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result) {
    return BlueFin::GlDbgCodec::Write(this, &v4);
  }
  return result;
}

uint64_t FireCallback::GlEngineOnTimerRq(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 440);
    if (v9)
    {
      uint64_t v13 = a1;
      return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v13);
    }
    uint64_t v11 = "fcb,fEngineOnTimerRqCb,nullptr";
  }
  else
  {
    uint64_t v11 = "fcb,GlEngineOnTimerRq,nullptr";
  }
  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, v12);
  return 0;
}

unint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3>,unsigned int ()(BlueFin::GlEngine *)>::operator()(DeviceCommon *a1)
{
  DeviceCommon::GetMachContinuousTime(a1);
  return ((unint64_t)(v1 * 1000000000.0) + 500000) / 0xF4240;
}

uint64_t DeviceCommon::GetMachContinuousTime(DeviceCommon *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  double v1 = *(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 8) + 40);

  return v1();
}

char *BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *this, char *a2, unsigned int *a3)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, a3);
    }
    int v7 = *a3;
    return BlueFin::GlDbgCodecBase::Encode((char *)this, a2, v7, 0, 0);
  }
  return result;
}

#error "2638E403C: call analysis failed (funcsize=713)"

_DWORD *BlueFin::GlCryptoMd5::update(_DWORD *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  LODWORD(v6) = 0;
  if (a3)
  {
    LOBYTE(v7) = *((unsigned char *)result + 104);
    if ((_BYTE)v7)
    {
      unint64_t v6 = 0;
      do
      {
        *((unsigned char *)result + v7 + 40) = *(unsigned char *)(a2 + v6++);
        int v7 = (*((unsigned char *)result + 104) + 1) & 0x3F;
        *((unsigned char *)result + 104) = v7;
        if (v7) {
          BOOL v8 = v6 >= a3;
        }
        else {
          BOOL v8 = 1;
        }
      }
      while (!v8);
      if (!v7 && v6 != 0) {
        uint64_t result = BlueFin::GlCryptoMd5::md5_dgst_blk(result, (const char *)result + 40);
      }
    }
  }
  if ((int)v6 + 64 <= a3)
  {
    do
    {
      uint64_t result = BlueFin::GlCryptoMd5::md5_dgst_blk(v5, (const char *)(a2 + v6));
      unsigned int v10 = v6 + 64;
      unsigned int v11 = v6 + 128;
      LODWORD(v6) = v6 + 64;
    }
    while (v11 <= a3);
  }
  else
  {
    unsigned int v10 = v6;
  }
  if (v10 < a3)
  {
    char v12 = (char *)(a2 + v10);
    unint64_t v13 = a3 - (unint64_t)v10;
    do
    {
      char v14 = *v12++;
      uint64_t v15 = *((unsigned __int8 *)v5 + 104);
      *((unsigned char *)v5 + 104) = v15 + 1;
      *((unsigned char *)v5 + v15 + 40) = v14;
      --v13;
    }
    while (v13);
  }
  int v16 = v5[8];
  int v17 = v16 + a3;
  if (__CFADD__(v16, a3)) {
    ++v5[9];
  }
  BOOL v8 = __CFADD__(v17, a3);
  int v18 = v17 + a3;
  if (v8) {
    ++v5[9];
  }
  BOOL v8 = __CFADD__(v18, a3);
  int v19 = v18 + a3;
  if (v8) {
    ++v5[9];
  }
  BOOL v8 = __CFADD__(v19, a3);
  int v20 = v19 + a3;
  if (v8) {
    ++v5[9];
  }
  BOOL v8 = __CFADD__(v20, a3);
  int v21 = v20 + a3;
  if (v8) {
    ++v5[9];
  }
  BOOL v8 = __CFADD__(v21, a3);
  int v22 = v21 + a3;
  if (v8) {
    ++v5[9];
  }
  BOOL v8 = __CFADD__(v22, a3);
  int v23 = v22 + a3;
  if (v8) {
    ++v5[9];
  }
  if (__CFADD__(v23, a3)) {
    ++v5[9];
  }
  v5[8] = v16 + 8 * a3;
  return result;
}

_DWORD *BlueFin::GlCryptoMd5::md5_dgst_blk(_DWORD *result, const char *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  int v2 = result[4];
  int8x16x4_t v46 = vld4q_s8(a2);
  uint16x8_t v3 = vmovl_u8(*(uint8x8_t *)v46.val[3].i8);
  uint16x8_t v4 = vmovl_high_u8((uint8x16_t)v46.val[3]);
  _Q16 = vmovl_u8(*(uint8x8_t *)v46.val[2].i8);
  _Q17 = vmovl_high_u8((uint8x16_t)v46.val[2]);
  __asm
  {
    SHLL2           V18.4S, V17.8H, #0x10
    SHLL2           V19.4S, V16.8H, #0x10
  }
  uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v46.val[1]);
  uint16x8_t v14 = vmovl_u8(*(uint8x8_t *)v46.val[1].i8);
  int8x16_t v15 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v14.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v3.i8), 0x18uLL));
  uint16x8_t v16 = vmovl_high_u8((uint8x16_t)v46.val[0]);
  v46.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v46.val[0].i8);
  v44[3] = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v13, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v4), 0x18uLL)), (int8x16_t)vmovl_high_u16(v16));
  v44[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v13.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8));
  v44[1] = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v14, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v3), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v46.val[0]));
  v44[0] = vorrq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)v46.val[0].i8));
  int v17 = result[5];
  int v18 = result[6];
  unint64_t v19 = -4;
  uint64_t v20 = 8u;
  int v21 = result[7];
  int v22 = v21;
  int v23 = v18;
  int v24 = v17;
  int v25 = v2;
  do
  {
    HIDWORD(v26) = (v24 & v23)
                 + v25
                 + (v22 & ~v24)
                 + *(_DWORD *)((char *)v44 + v20 - 8)
                 + *(_DWORD *)((char *)&BlueFin::GlCryptoMd5::MD5_T + v20 - 8);
    LODWORD(v26) = HIDWORD(v26);
    int v25 = (v26 >> 25) + v24;
    HIDWORD(v26) = *(_DWORD *)((char *)v44 + v20 - 4)
                 + v22
                 + *(_DWORD *)((char *)&BlueFin::GlCryptoMd5::MD5_T + v20 - 4)
                 + (v23 & ~v25)
                 + (v25 & v24);
    LODWORD(v26) = HIDWORD(v26);
    int v22 = (v26 >> 20) + v25;
    HIDWORD(v26) = *(_DWORD *)((char *)v44 + v20)
                 + v23
                 + *(_DWORD *)((char *)&BlueFin::GlCryptoMd5::MD5_T + v20)
                 + (v24 & ~v22)
                 + (v22 & v25);
    LODWORD(v26) = HIDWORD(v26);
    int v23 = (v26 >> 15) + v22;
    HIDWORD(v26) = *(_DWORD *)((char *)v44 + v20 + 4)
                 + v24
                 + *(_DWORD *)((char *)&BlueFin::GlCryptoMd5::MD5_T + v20 + 4)
                 + (v25 & ~v23)
                 + (v23 & v22);
    LODWORD(v26) = HIDWORD(v26);
    int v24 = (v26 >> 10) + v23;
    v19 += 4;
    v20 += 16;
  }
  while (v19 < 0xC);
  uint64_t v27 = 0;
  uint64_t v28 = &dword_263BAADDC;
  do
  {
    unint64_t v29 = v27 + 16;
    int v30 = &BlueFin::GlCryptoMd5::MD5_K[v27 + 16];
    HIDWORD(v31) = v25 + (v23 & ~v22) + (v24 & v22) + *(v28 - 3) + *((_DWORD *)v44 + *v30);
    LODWORD(v31) = HIDWORD(v31);
    int v25 = (v31 >> 27) + v24;
    HIDWORD(v31) = (v24 & ~v23) + v22 + *(v28 - 2) + *((_DWORD *)v44 + v30[1]) + (v25 & v23);
    LODWORD(v31) = HIDWORD(v31);
    int v22 = (v31 >> 23) + v25;
    HIDWORD(v31) = (v25 & ~v24) + v23 + *((_DWORD *)v44 + v30[2]) + *(v28 - 1) + (v22 & v24);
    LODWORD(v31) = HIDWORD(v31);
    int v23 = (v31 >> 18) + v22;
    int v32 = *v28;
    v28 += 4;
    HIDWORD(v31) = *((_DWORD *)v44 + v30[3]) + v24 + v32 + (v22 & ~v25) + (v23 & v25);
    LODWORD(v31) = HIDWORD(v31);
    int v24 = (v31 >> 12) + v23;
    v27 += 4;
  }
  while (v29 < 0x1C);
  uint64_t v33 = 0;
  int v34 = &dword_263BAAE1C;
  do
  {
    unint64_t v35 = v33 + 32;
    int v36 = &BlueFin::GlCryptoMd5::MD5_K[v33 + 32];
    HIDWORD(v37) = (v24 ^ v23 ^ v22) + v25 + *(v34 - 3) + *((_DWORD *)v44 + *v36);
    LODWORD(v37) = HIDWORD(v37);
    int v25 = (v37 >> 28) + v24;
    HIDWORD(v37) = *((_DWORD *)v44 + v36[1]) + v22 + *(v34 - 2) + (v25 ^ v24 ^ v23);
    LODWORD(v37) = HIDWORD(v37);
    int v22 = (v37 >> 21) + v25;
    HIDWORD(v37) = *((_DWORD *)v44 + v36[2]) + v23 + *(v34 - 1) + (v22 ^ v25 ^ v24);
    LODWORD(v37) = HIDWORD(v37);
    int v23 = (v37 >> 16) + v22;
    int v38 = *v34;
    v34 += 4;
    HIDWORD(v37) = *((_DWORD *)v44 + v36[3]) + v24 + v38 + (v22 ^ v25 ^ v23);
    LODWORD(v37) = HIDWORD(v37);
    int v24 = (v37 >> 9) + v23;
    v33 += 4;
  }
  while (v35 < 0x2C);
  int v39 = &dword_263BAAE5C;
  uint64_t v40 = 0x33u;
  do
  {
    HIDWORD(v41) = ((v24 | ~v22) ^ v23) + v25 + *(v39 - 3) + *((_DWORD *)v44 + BlueFin::GlCryptoMd5::MD5_K[v40 - 3]);
    LODWORD(v41) = HIDWORD(v41);
    int v25 = (v41 >> 26) + v24;
    HIDWORD(v41) = *((_DWORD *)v44 + BlueFin::GlCryptoMd5::MD5_K[v40 - 2]) + v22 + *(v39 - 2) + ((v25 | ~v23) ^ v24);
    LODWORD(v41) = HIDWORD(v41);
    int v22 = (v41 >> 22) + v25;
    HIDWORD(v41) = *((_DWORD *)v44 + BlueFin::GlCryptoMd5::MD5_K[v40 - 1]) + v23 + *(v39 - 1) + ((v22 | ~v24) ^ v25);
    LODWORD(v41) = HIDWORD(v41);
    int v23 = (v41 >> 17) + v22;
    int v42 = *v39;
    v39 += 4;
    HIDWORD(v41) = *((_DWORD *)v44 + BlueFin::GlCryptoMd5::MD5_K[v40]) + v24 + v42 + ((v23 | ~v25) ^ v22);
    LODWORD(v41) = HIDWORD(v41);
    int v24 = (v41 >> 11) + v23;
    unint64_t v43 = v40 - 3;
    v40 += 4;
  }
  while (v43 < 0x39);
  result[4] = v25 + v2;
  result[5] = v24 + v17;
  result[6] = v23 + v18;
  result[7] = v22 + v21;
  return result;
}

uint64_t BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry(uint64_t result, uint64_t a2, int a3)
{
  uint16x8_t v4 = (unsigned __int16 *)result;
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    LOWORD(v5) = *(_WORD *)(result + 22);
    if ((unsigned __int16)v5 % 0xA2u) {
      unsigned int v6 = *(unsigned __int16 *)(result + 22) / 0xA2u + 1;
    }
    else {
      unsigned int v6 = *(unsigned __int16 *)(result + 22) / 0xA2u;
    }
    if (v6 > 0x3F)
    {
      DeviceFaultNotify("glutl_slog_codec.cpp", 1342, "PrintEntry", (char)"sLinesCount < 64");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 1342, "sLinesCount < 64");
    }
    if (*(_WORD *)(result + 22))
    {
      int v7 = 0;
      __int16 v8 = 0;
      uint64_t v9 = &BlueFin::GlUtlGlSysLogEntryCodec::_tagEntry[2 * *(unsigned int *)(result + 8) + 1];
      unsigned int v10 = v6;
      char v11 = v6 - 4;
      if (v6 == 62) {
        char v12 = 43;
      }
      else {
        char v12 = 47;
      }
      char v13 = v6 + 71;
      unsigned __int8 v14 = v6 + 65;
      unsigned int v26 = a3 | 0x18;
      if (v10 >= 0x3E) {
        char v11 = v12;
      }
      if (v10 < 0x34) {
        char v11 = v13;
      }
      if (v10 >= 0x1A) {
        unsigned __int8 v14 = v11;
      }
      uint64_t v15 = v14;
      unsigned __int8 v16 = 1;
      do
      {
        int v17 = (__int16)(v5 - v8);
        if (v17 >= 162) {
          int v18 = 162;
        }
        else {
          int v18 = v17;
        }
        uint64_t v19 = (*(uint64_t (**)(unsigned __int16 *))(*(void *)v4 + 32))(v4);
        unint64_t v20 = BlueFin::GlUtlB64::b64_encode_((unsigned __int8 *)(v19 + v7), v18, v29, 0xD8uLL, 0, &v27);
        unint64_t v22 = v20;
        if (v16 > 0x19u)
        {
          if (v16 > 0x33u)
          {
            if (v16 > 0x3Du)
            {
              if (v16 == 62) {
                unsigned __int8 v23 = 43;
              }
              else {
                unsigned __int8 v23 = 47;
              }
            }
            else
            {
              unsigned __int8 v23 = v16 - 4;
            }
          }
          else
          {
            unsigned __int8 v23 = v16 + 71;
          }
        }
        else
        {
          unsigned __int8 v23 = v16 + 65;
        }
        char v24 = v29[0];
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v28, (char *)0xA, "%s%s%02X%c%c", v21, "@^@", v9, v20, v15, v23);
        v29[0] = v24;
        unint64_t v25 = v22 + 9;
        if (a2)
        {
          v28[v25] = 10;
          v28[v22 + 10] = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, char *, void))(*(void *)a2 + 72))(a2, 1, v28, (__int16)(v22 + 10));
        }
        else
        {
          v28[v25] = 0;
          uint64_t result = GlCustomLog(v26, "%s\n", v28);
        }
        ++v16;
        __int16 v8 = v7 + 162;
        int v7 = (__int16)(v7 + 162);
        int v5 = v4[11];
      }
      while (v7 < v5);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::DeserializeLto(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  switch(*((_DWORD *)a2 + 2))
  {
    case 0x77:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoSlice(this, a2);
      break;
    case 0x78:
      uint64_t result = BlueFin::GlPeLtoFileContentStorageMgr::DeserializeLtoInfo((BlueFin::GlPeLtoMgr *)((char *)this + 1648), a2);
      break;
    case 0x79:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoAlm(this, a2);
      break;
    case 0x7A:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoUtc(this, a2);
      break;
    case 0x7B:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoSysTime(this, a2);
      break;
    case 0x7C:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoIono(this, a2);
      break;
    case 0x7D:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoGnssGpsTimeoffs(this, a2);
      break;
    case 0x7E:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoGnssL5Health(this, a2);
      break;
    case 0x7F:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoGnssL5HealthInfo(this, a2);
      break;
    case 0x80:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoGnssAltNav(this, a2);
      break;
    case 0x81:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoGpsQzsL1CaIscAltNav(this, a2);
      break;
    case 0x82:
      uint64_t result = BlueFin::GlPeLtoMgr::deserializeLtoGnssSigType(this, a2);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::Deserialize(BlueFin::GlPeAlmMgr *this, BlueFin::GlSysLogEntry *a2)
{
  if (!a2)
  {
    unint64_t v22 = "pEntry";
    DeviceFaultNotify("glpe_almmgr.cpp", 2670, "Deserialize", (char)"pEntry");
    unsigned __int8 v23 = "glpe_almmgr.cpp";
    int v24 = 2670;
    goto LABEL_46;
  }
  unint64_t v37 = &unk_270EBF948;
  unsigned int v46 = 7;
  unsigned __int8 v47 = 0;
  int v38 = -65536;
  uint64_t v39 = 0;
  int v40 = 0;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  __int16 v43 = 0;
  unsigned int v44 = -1;
  unsigned __int8 v45 = 0;
  uint64_t result = BlueFin::GlPeAlmanacData::Deserialize((BlueFin::GlPeAlmanacData *)&v37, a2);
  if (!result || *(double *)v42 * *(double *)v42 < 7078137.0) {
    return result;
  }
  uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, v46, v47);
  unsigned int v5 = v46;
  uint64_t v6 = *((void *)this + 54) + 48 * v46;
  uint64_t v8 = *(void *)(v6 + 24);
  int v7 = (void *)(v6 + 24);
  if (((unint64_t)*(unsigned int *)(v8 + (((unint64_t)v47 >> 3) & 0x1C)) >> (v47 & 0x1F)))
  {
    int v35 = 7;
    char v36 = 0;
    int v25 = -65536;
    uint64_t v26 = 0;
    int v27 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    __int16 v32 = 0;
    int v33 = -1;
    char v34 = 0;
    uint64_t result = BlueFin::GlPeAlmMgr::GetAlm((uint64_t)this, v46, v47, (uint64_t)&v25, 1, 1);
    if (result && v33 != 2) {
      return result;
    }
    unsigned int v5 = v46;
  }
  char v9 = v45;
  if (v5 == 2 && v45 == 248)
  {
    uint64_t v10 = BlueFin::GlPeAlmMgr::m_iDefaultAlmGlnsArrayDim;
    if (BlueFin::GlPeAlmMgr::m_iDefaultAlmGlnsArrayDim < 1)
    {
LABEL_14:
      char v9 = -8;
    }
    else
    {
      char v11 = BlueFin::GlPeAlmMgr::m_potDefaultAlmGlnsPlainOldData;
      while ((unsigned __int16)*v11 != (unsigned __int16)v38)
      {
        v11 += 52;
        if (!--v10) {
          goto LABEL_14;
        }
      }
      char v9 = *((unsigned char *)v11 + 96);
      unsigned __int8 v45 = v9;
    }
  }
  double v12 = *(double *)v42;
  if (v12 * v12 < 7078137.0)
  {
    char v13 = "BDS";
    unsigned __int8 v14 = "GPS";
    switch(v5)
    {
      case 0u:
        break;
      case 1u:
        unsigned __int8 v14 = "SBAS";
        break;
      case 2u:
        unsigned __int8 v14 = "GLNS";
        break;
      case 3u:
        unsigned __int8 v14 = "QZSS";
        break;
      case 4u:
        goto LABEL_26;
      default:
        int v18 = "<->";
        if (v5 == 6) {
          int v18 = "NIC";
        }
        char v13 = "GAL";
        if (v5 != 5) {
          char v13 = v18;
        }
LABEL_26:
        unsigned __int8 v14 = v13;
        break;
    }
    if (v44 > 4) {
      uint64_t v19 = "INV";
    }
    else {
      uint64_t v19 = BlueFin::GlPeAlmanac::GetSourceStr(void)const::aacSourceStr[v44];
    }
    return GlCustomLog(11, "GlPeAlmMgr::Deserialize:Rejected Alm %s %02d  Source:NVMEM  Reason:Invalid ASqrt(%.0lf)  OrgSrc:%s\n", v14, v47, *(double *)v42, v19);
  }
  *(_DWORD *)(AlmReference + 104) = v5;
  *(unsigned char *)(AlmReference + 108) = v47;
  *(_DWORD *)uint64_t AlmReference = v38;
  *(void *)(AlmReference + 8) = v39;
  *(_DWORD *)(AlmReference + 16) = v40;
  *(_OWORD *)(AlmReference + 24) = v41;
  *(double *)(AlmReference + 40) = v12;
  *(_OWORD *)(AlmReference + 48) = *(_OWORD *)((char *)v42 + 8);
  *(_OWORD *)(AlmReference + 64) = *(_OWORD *)((char *)&v42[1] + 8);
  *(void *)(AlmReference + 80) = *((void *)&v42[2] + 1);
  *(_WORD *)(AlmReference + 88) = v43;
  *(_DWORD *)(AlmReference + 92) = v44;
  *(unsigned char *)(AlmReference + 96) = v9;
  int v15 = v47;
  if (v47 - 64 <= 0xFFFFFFC0)
  {
    unint64_t v22 = "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID";
    DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
    unsigned __int8 v23 = "glgnss.h";
    int v24 = 115;
LABEL_46:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v23, v24, v22);
  }
  *(_DWORD *)(*v7 + (((unint64_t)v47 >> 3) & 0x1C)) |= 1 << v47;
  unsigned __int8 v16 = "BDS";
  int v17 = "GPS";
  switch(v46)
  {
    case 0u:
      break;
    case 1u:
      int v17 = "SBAS";
      break;
    case 2u:
      int v17 = "GLNS";
      break;
    case 3u:
      int v17 = "QZSS";
      break;
    case 4u:
      goto LABEL_37;
    default:
      unint64_t v20 = "<->";
      if (v46 == 6) {
        unint64_t v20 = "NIC";
      }
      unsigned __int8 v16 = "GAL";
      if (v46 != 5) {
        unsigned __int8 v16 = v20;
      }
LABEL_37:
      int v17 = v16;
      break;
  }
  if (v44 > 4) {
    int v21 = "INV";
  }
  else {
    int v21 = BlueFin::GlPeAlmanac::GetSourceStr(void)const::aacSourceStr[v44];
  }
  uint64_t result = GlCustomLog(14, "GlPeAlmMgr::Deserialize:Read Alm:%s %02d  Source:NVMEM  OrgSrc:%s\n", v17, v15, v21);
  *((unsigned char *)this + 36712) = 0;
  return result;
}

BOOL BlueFin::GlPeAlmanacData::Deserialize(BlueFin::GlPeAlmanacData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 40) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 4 < 0xFFFFFFFD) {
    return 0;
  }
  *((_DWORD *)this + 28) = 0;
  if (v3 >= 2) {
    *((_DWORD *)this + 28) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
  }
  unsigned __int8 S16 = BlueFin::GlSysLogEntry::GetS16(a2);
  *((unsigned char *)this + 116) = S16;
  *((_WORD *)this + 4) = BlueFin::GlPeAlmanacPlainOldData::Gnss2almId(*((_DWORD *)this + 28), S16);
  *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetS16(a2);
  double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 2) = D64;
  if (*((_DWORD *)this + 28) == 3 && D64 < 0.06 && *((unsigned __int8 *)this + 116) - 6 >= 5) {
    *((double *)this + 2) = D64 + 0.06;
  }
  *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 6) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 7) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 8) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 9) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 10) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 11) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((_WORD *)this + 48) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + 25) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) < 3u)
  {
    if (*((_DWORD *)this + 28) == 2) {
      *((unsigned char *)this + 104) = -8;
    }
    else {
      *((unsigned char *)this + 104) = 0;
    }
  }
  else
  {
    *((unsigned char *)this + 104) = BlueFin::GlSysLogEntry::GetS8(a2);
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 2656);
  return *((_DWORD *)this + 28) != 7;
}

uint64_t BlueFin::GlSysLogEntry::GetS8(BlueFin::GlSysLogEntry *this)
{
  if (*((unsigned __int16 *)this + 10) >= *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 118, "GetS8", (char)"m_sReadIdx + sizeof(GlIntS8) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 118, "m_sReadIdx + sizeof(GlIntS8) <= m_sDataSize");
  }
  uint64_t v2 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v3 = *((unsigned __int16 *)this + 10);
  *((_WORD *)this + 10) = v3 + 1;
  return *(char *)(v2 + v3);
}

uint64_t BlueFin::GlPeAlmanacPlainOldData::Gnss2almId(unsigned int a1, unsigned __int8 a2)
{
  unsigned __int8 v2 = a2;
  if (!a2 || a1 > 6 || ((0xE243F0A181320uLL >> (8 * a1)) & 0x3F) < a2)
  {
    DeviceFaultNotify("glpe_almmgr.cpp", 89, "Gnss2almId", (char)"*rotGnss.otGnssId != INVALID_GNSS_ID && rotGnss.otGnssId <= GlGnssId::MaxGnssId(rotGnss.eGnss)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", 89, "*rotGnss.otGnssId != INVALID_GNSS_ID && rotGnss.otGnssId <= GlGnssId::MaxGnssId(rotGnss.eGnss)");
  }
  switch(a1)
  {
    case 0u:
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      return v2;
    case 1u:
      unsigned __int8 v2 = a2 + 119;
      break;
    case 3u:
      unsigned __int8 v2 = a2 - 64;
      break;
    default:
      unsigned __int8 v2 = 0;
      break;
  }
  return v2;
}

BOOL BlueFin::GlSysLogEntry::CheckConsumed(BlueFin::GlSysLogEntry *this, int a2)
{
  int v2 = *((unsigned __int16 *)this + 11);
  int v3 = *((unsigned __int16 *)this + 10);
  if (v2 != v3)
  {
    GlCustomLog(11, "SysLogEntry %hu != %hu from %d\n", v2, *((unsigned __int16 *)this + 10), a2);
    if (*((unsigned __int16 *)this + 11) != *((unsigned __int16 *)this + 10))
    {
      DeviceFaultNotify("glutl_slog_codec.cpp", 755, "CheckConsumed", (char)"DataSize() == ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 755, "DataSize() == ReadIdx()");
    }
  }
  return v2 == v3;
}

uint64_t BlueFin::GlPeLtoAlmDataInterface::Deserialize(BlueFin::GlPeLtoAlmDataInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 121 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v6 = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
  *((_DWORD *)this + 2) = v6;
  switch(v6)
  {
    case 0:
    case 3:
    case 4:
      *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 7) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((unsigned char *)this + 16) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 9) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 10) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
      *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 8) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_WORD *)this + 20) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 21) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 22) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 23) = BlueFin::GlSysLogEntry::GetU16(a2);
      break;
    case 1:
      *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((float *)this + 4) = (float)(int)BlueFin::GlSysLogEntry::GetS16(a2) / 10.0;
      *((_WORD *)this + 10) = 0;
      break;
    case 2:
      *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((unsigned char *)this + 14) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 15) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
      *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((unsigned char *)this + 32) = BlueFin::GlSysLogEntry::GetS8(a2);
      *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_WORD *)this + 17) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)this + 18) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 19) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((unsigned char *)this + 40) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 41) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 42) = BlueFin::GlSysLogEntry::GetU8(a2);
      break;
    case 5:
      *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 7) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)this + 8) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)this + 9) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 10) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 11) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 12) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 13) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 14) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 15) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 16) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((unsigned char *)this + 34) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 35) = BlueFin::GlSysLogEntry::GetU8(a2);
      break;
    default:
      return 0;
  }
  return 1;
}

uint64_t BlueFin::GlSysLogEntry::GetU16(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 2 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 601, "GetU16", (char)"m_sReadIdx + sizeof(GlIntU16) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 601, "m_sReadIdx + sizeof(GlIntU16) <= m_sDataSize");
  }
  uint64_t v2 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v3 = *((unsigned __int16 *)this + 10);
  *((_WORD *)this + 10) = v3 + 1;
  __int16 v4 = *(unsigned __int8 *)(v2 + v3);
  uint64_t v5 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v6 = *((unsigned __int16 *)this + 10);
  *((_WORD *)this + 10) = v6 + 1;
  return (unsigned __int16)(v4 | (*(unsigned __int8 *)(v5 + v6) << 8));
}

uint64_t BlueFin::GlSysLogEntry::GetS32(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 4 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 506, "GetS32", (char)"m_sReadIdx + sizeof(GlIntS32) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 506, "m_sReadIdx + sizeof(GlIntS32) <= m_sDataSize");
  }
  uint64_t v2 = 0;
  unsigned int v6 = 0;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v4 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v4 + 1;
    *((unsigned char *)&v6 + v2++) = *(unsigned char *)(v3 + v4);
  }
  while (v2 != 4);
  return v6;
}

BOOL BlueFin::GlPeEphemeris::DeserializeHeader(BlueFin::GlSysLogEntry *this, int *a2, int *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 2) != 35) {
    return 0;
  }
  unsigned int v4 = *((unsigned __int8 *)this + 12);
  if (v4 - 12 < 0xFFFFFFF9) {
    return 0;
  }
  *((_WORD *)this + 10) = 1;
  if (v4 >= 0xB)
  {
    *a2 = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(this)];
    *a3 = BlueFin::GlSysLogEntry::GetU8(this);
    return *a2 != 7;
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  if (v4 < 8
    || (*a2 = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(this)],
        *((unsigned __int8 *)this + 12) < 9u))
  {
    unsigned int U8 = 18;
  }
  else
  {
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(this);
    if (U8 > 0x1C) {
      return 0;
    }
    if (!U8) {
      goto LABEL_14;
    }
  }
  uint64_t v9 = U8;
  uint64_t v10 = v17;
  do
  {
    *v10++ = BlueFin::GlSysLogEntry::GetU32(this);
    --v9;
  }
  while (v9);
LABEL_14:
  unsigned int v11 = *((unsigned __int8 *)this + 12);
  if (v11 >= 7)
  {
    if (v11 != 7)
    {
      BOOL result = *a2 != 7;
      char v12 = 20;
      goto LABEL_22;
    }
    char v13 = (char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
        + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
    unsigned int v14 = v13[(unint64_t)LODWORD(v17[0]) >> 25];
    if (v13[(unint64_t)LODWORD(v17[0]) >> 25])
    {
      if (v14 < 0x21)
      {
        int v15 = 0;
LABEL_28:
        *a2 = v15;
        char v12 = 21;
        goto LABEL_16;
      }
      if (v14 - 66 <= 9)
      {
        int v15 = 3;
        goto LABEL_28;
      }
    }
    return 0;
  }
  *a2 = 0;
  char v12 = 20;
LABEL_16:
  BOOL result = 1;
LABEL_22:
  if (DWORD2(v18) << v12 >> 30 == 2) {
    int v16 = 2;
  }
  else {
    int v16 = 1;
  }
  *a3 = v16;
  return result;
}

uint64_t BlueFin::GlSysLogEntry::GetU8(BlueFin::GlSysLogEntry *this)
{
  if (*((unsigned __int16 *)this + 10) >= *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 134, "GetU8", (char)"m_sReadIdx + sizeof(GlIntU8) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 134, "m_sReadIdx + sizeof(GlIntU8) <= m_sDataSize");
  }
  uint64_t v2 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v3 = *((unsigned __int16 *)this + 10);
  *((_WORD *)this + 10) = v3 + 1;
  return *(unsigned __int8 *)(v2 + v3);
}

uint64_t BlueFin::GlSysLogEntry::GetS16(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 2 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 581, "GetS16", (char)"m_sReadIdx + sizeof(GlIntS16) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 581, "m_sReadIdx + sizeof(GlIntS16) <= m_sDataSize");
  }
  uint64_t v2 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v3 = *((unsigned __int16 *)this + 10);
  *((_WORD *)this + 10) = v3 + 1;
  __int16 v4 = *(unsigned __int8 *)(v2 + v3);
  uint64_t v5 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v6 = *((unsigned __int16 *)this + 10);
  *((_WORD *)this + 10) = v6 + 1;
  return (__int16)(v4 | (*(unsigned __int8 *)(v5 + v6) << 8));
}

double BlueFin::GlSysLogEntry::GetD64(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 8 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 717, "GetD64", (char)"m_sReadIdx + sizeof(dValue) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 717, "m_sReadIdx + sizeof(dValue) <= m_sDataSize");
  }
  uint64_t v2 = 0;
  double v6 = 0.0;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v4 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v4 + 1;
    *((unsigned char *)&v6 + v2++) = *(unsigned char *)(v3 + v4);
  }
  while (v2 != 8);
  return v6;
}

uint64_t BlueFin::GlSysLogEntry::GetU32(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 4 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 483, "GetU32", (char)"m_sReadIdx + sizeof(GlIntU32) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 483, "m_sReadIdx + sizeof(GlIntU32) <= m_sDataSize");
  }
  uint64_t v2 = 0;
  unsigned int v6 = 0;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v4 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v4 + 1;
    *((unsigned char *)&v6 + v2++) = *(unsigned char *)(v3 + v4);
  }
  while (v2 != 4);
  return v6;
}

uint64_t BlueFin::GlSysLogEntryExtraLong::Buf(BlueFin::GlSysLogEntryExtraLong *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoAlm(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v8 = &unk_270EC14B8;
  unsigned int v9 = 7;
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  int v12 = 0;
  int v3 = BlueFin::GlPeLtoAlmDataInterface::Deserialize((BlueFin::GlPeLtoAlmDataInterface *)&v8, a2);
  uint64_t result = 0;
  if (v3)
  {
    switch(v9)
    {
      case 0u:
        if (v10[0] > 0x3Eu) {
          goto LABEL_18;
        }
        unsigned __int8 v5 = v10[0] + 1;
        BlueFin::GlPeLtoMgr::UpdateGpsAlmanac((uint64_t)this, v10);
        goto LABEL_16;
      case 1u:
        if (v10[0] - 120 > 0x3E) {
          goto LABEL_18;
        }
        unsigned __int8 v5 = v10[0] - 119;
        BlueFin::GlPeLtoMgr::UpdateSbasAlmanac(this, *((_DWORD *)this + 6615) / 0x93A80u, v10[0], *(float *)&v10[4]);
        goto LABEL_16;
      case 2u:
        unsigned __int8 v5 = v10[2];
        if (v10[2] - 1 > 0x3E) {
          goto LABEL_18;
        }
        BlueFin::GlPeLtoMgr::UpdateGloAlmanac((uint64_t)this, (uint64_t)v10);
        goto LABEL_16;
      case 3u:
        if (v10[0] > 0x3Eu) {
          goto LABEL_18;
        }
        unsigned __int8 v5 = v10[0] + 1;
        BlueFin::GlPeLtoMgr::UpdateQzssAlmanac((uint64_t)this, v10);
        goto LABEL_16;
      case 4u:
        if (v10[0] > 0x3Eu) {
          goto LABEL_18;
        }
        unsigned __int8 v5 = v10[0] + 1;
        BlueFin::GlPeLtoMgr::UpdateBdsAlmanac((uint64_t)this, v10);
        goto LABEL_16;
      case 5u:
        if (v10[0] > 0x3Eu) {
          goto LABEL_18;
        }
        unsigned __int8 v5 = v10[0] + 1;
        BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeTimeManager **)(*((void *)this + 10) + 34112), v10, *((_DWORD *)this + 6615));
        if (v10[0] <= 0x3EuLL)
        {
          unsigned int v6 = (char *)this + 24 * v10[0] + 18876;
          *(_OWORD *)unsigned int v6 = *(_OWORD *)v10;
          *((void *)v6 + 2) = v11;
        }
LABEL_16:
        if (v9 > 6) {
          int v7 = "INV";
        }
        else {
          int v7 = off_2655DF758[v9];
        }
        GlCustomLog(14, "LtoMgr: read LTO Alm (%s %d) from NVMEM!\n", v7, v5);
        uint64_t result = 1;
        break;
      default:
LABEL_18:
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoSlice(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 2) != 119) {
    goto LABEL_32;
  }
  double v74 = (void (**)(BlueFin::GlGpsTime *__hidden))&unk_270EC17A0;
  memset(v77, 0, 76);
  int v3 = *((_DWORD *)this + 412);
  if (v3 == 2) {
    goto LABEL_32;
  }
  if (v3 != 1)
  {
    if (v3) {
      goto LABEL_91;
    }
    int v4 = BlueFin::GlPeLtoSliceInterface::Deserialize((BlueFin::GlPeLtoSliceInterface *)&v74, a2);
    if (v75) {
      int v5 = 0;
    }
    else {
      int v5 = v4;
    }
    if (v5 == 1)
    {
      switch(HIDWORD(v75))
      {
        case 0:
          unsigned int v6 = (char *)this + 4096;
          goto LABEL_27;
        case 2:
          uint64_t v18 = 5944;
          goto LABEL_26;
        case 3:
          uint64_t v18 = 6728;
          goto LABEL_26;
        case 4:
          uint64_t v18 = 11544;
          goto LABEL_26;
        case 5:
          uint64_t v18 = 14304;
LABEL_26:
          unsigned int v6 = (char *)this + v18;
LABEL_27:
          *((void *)this + 207) = v6;
          if (!v76) {
            goto LABEL_32;
          }
          char v19 = BYTE4(v76);
          unint64_t v20 = *((unsigned int *)v6 + 2);
          char v21 = v20 >= 7 ? 0 : 0xE243F0A181320uLL >> (8 * v20);
          if ((v21 & 0x3Fu) < BYTE4(v76)) {
            goto LABEL_32;
          }
          *(_DWORD *)unsigned int v6 = v76;
          v6[4] = v19;
          v6[5] = 0;
          uint64_t v22 = 1;
          *((_DWORD *)this + 412) = 1;
          break;
        default:
          *((void *)this + 207) = 0;
          goto LABEL_32;
      }
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  char v7 = BlueFin::GlPeLtoSliceInterface::Deserialize((BlueFin::GlPeLtoSliceInterface *)&v74, a2);
  if (v75 == 1) {
    char v8 = v7;
  }
  else {
    char v8 = 0;
  }
  if ((v8 & 1) == 0)
  {
    *((_DWORD *)this + 412) = 0;
    uint64_t v17 = *((void *)this + 207);
    if (v17) {
      BlueFin::GlPeLtoSlice::Clear(v17);
    }
    goto LABEL_32;
  }
  uint64_t v9 = *((void *)this + 207);
  if (!v9 || (v10 = *(unsigned __int8 *)(v9 + 5), unsigned int v11 = *(unsigned __int8 *)(v9 + 4), v10 >= v11))
  {
LABEL_32:
    uint64_t v22 = 0;
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(v9 + 16) + 76 * *(unsigned __int8 *)(v9 + 5);
  if ((unsigned char *)v12 == v77)
  {
    int v16 = (int *)*((void *)this + 207);
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v77;
    long long v13 = *(_OWORD *)&v77[16];
    long long v14 = *(_OWORD *)&v77[32];
    long long v15 = *(_OWORD *)&v77[48];
    *(_OWORD *)(v12 + 60) = *(_OWORD *)&v77[60];
    *(_OWORD *)(v12 + 32) = v14;
    *(_OWORD *)(v12 + 48) = v15;
    *(_OWORD *)(v12 + 16) = v13;
    LOBYTE(v10) = *(unsigned char *)(v9 + 5);
    int v16 = (int *)*((void *)this + 207);
    unsigned int v11 = *((unsigned __int8 *)v16 + 4);
  }
  *(unsigned char *)(v9 + 5) = v10 + 1;
  if (*((unsigned __int8 *)v16 + 5) < v11) {
    goto LABEL_91;
  }
  int v66 = v16;
  *((void *)this + 207) = 0;
  *((_DWORD *)this + 412) = 0;
  BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 11), 1, v78);
  double v74 = &off_270EBC600;
  uint64_t v75 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v78, (BlueFin::GlGpsTime *)&v74);
  unsigned int v25 = ((uint64_t (*)(void))v74[4])(&v74);
  LODWORD(v26) = v75;
  double v27 = (double)v26 * 2.32830644e-10 + (double)v25;
  double v28 = fmod(v27, 4294967300.0);
  if (v27 <= 4294967300.0) {
    double v28 = v27;
  }
  if (v28 < -4294967300.0) {
    double v28 = -fmod(-v28, 4294967300.0);
  }
  long long v29 = v66;
  if (v28 < 0.0) {
    unsigned int v30 = --v28;
  }
  else {
    unsigned int v30 = v28;
  }
  LOBYTE(v75) = (16 * *((unsigned char *)v66 + 8)) | 2;
  BYTE1(v75) = 19;
  double v76 = &v77[8];
  *(int32x2_t *)double v77 = vdup_n_s32(0xFF9222FF);
  memset(&v77[8], 0, 76);
  double v74 = (void (**)(BlueFin::GlGpsTime *__hidden))&unk_270EC0528;
  uint64_t v31 = v66[2];
  int v32 = *v66;
  if (!*((unsigned char *)v66 + 4))
  {
    *((_DWORD *)this + v31 + 240) = v32;
    goto LABEL_88;
  }
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  unsigned int v64 = v30;
  unsigned int v65 = 0;
  int v63 = v30 - v32;
  int v61 = (char *)this + 26496;
  int v62 = v66[2];
  do
  {
    uint64_t v35 = BYTE1(v75);
    if (BYTE1(v75))
    {
      char v36 = v76;
      unint64_t v37 = (int *)(*((void *)v66 + 2) + v33);
      do
      {
        int v38 = *v37++;
        *v36++ = v38;
        --v35;
      }
      while (v35);
    }
    BOOL v39 = v31 == 0;
    unint64_t v40 = v75;
    ((void (*)(void (***__return_ptr)(BlueFin::GlGpsTime *__hidden), void (***)(BlueFin::GlGpsTime *__hidden)))v74[17])(&v69, &v74);
    unint64_t v41 = v40 >> 4;
    int v72 = v40 >> 4;
    int v42 = v69;
    char v73 = (char)v69;
    int CmpUnsignedField = BlueFin::GlPeGpsEphemerisBase::GetCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)&v74, 28);
    int v44 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), uint64_t))v74[24])(&v74, 18);
    unsigned int v45 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), uint64_t))v74[29])(&v74, 18)
        * v44;
    if ((BlueFin::GlPeLtoMgr::UpdateEphemeris(this, (BlueFin::GlPeLtoEphemeris *)&v74, v39, v64, v63) & 1) == 0)
    {
      int v47 = BlueFin::GlPeEphemeris::TimeToExpirationS((uint64_t)&v74, (uint64_t)v78);
      if (v41 == 5 && (v42 == 18 || v42 == 14))
      {
        BOOL v48 = v47 == 0;
        if (BlueFin::GlPeLtoEphemeris::GetCurveFitIntervalS((BlueFin::GlPeLtoEphemeris *)&v74) >> 5 <= 0x2A2
          || !v48)
        {
          uint64_t v50 = 70;
LABEL_72:
          int v51 = "GAL";
LABEL_78:
          GlCustomLog(14, "LtoMgr: read LTO (%s %d) from NVMEM, but rejected by EphMgr! Exp: %c\n", v51, v42, v50);
          goto LABEL_79;
        }
      }
      else if (v47)
      {
        uint64_t v50 = 70;
        goto LABEL_70;
      }
      BlueFin::GlGnssSet::Add((uint64_t)v61, &v72);
      uint64_t v50 = 84;
LABEL_70:
      int v51 = "GPS";
      switch((int)v41)
      {
        case 0:
          goto LABEL_78;
        case 1:
          int v51 = "SBS";
          break;
        case 2:
          int v51 = "GLO";
          break;
        case 3:
          int v51 = "QZS";
          break;
        case 4:
          int v51 = "BDS";
          break;
        case 5:
          goto LABEL_72;
        case 6:
          int v51 = "NIC";
          break;
        default:
          int v51 = "INV";
          break;
      }
      goto LABEL_78;
    }
    BlueFin::GlGnssSet::Remove((uint64_t)v61, (uint64_t)&v72);
    unsigned int v46 = "INV";
    if (v40 <= 0x6F) {
      unsigned int v46 = off_2655DF758[v41];
    }
    GlCustomLog(14, "LtoMgr: read LTO (%s %d) from NVMEM! Trunc Wn: %d Toe: %ds\n", v46, v42, CmpUnsignedField, v45);
LABEL_79:
    if (!v65)
    {
      int v69 = &off_270EBC600;
      double v52 = fmod((double)v45, 1.0);
      if (v52 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v53 = v52 * 4294967300.0 + 0.5;
      unsigned int v54 = v53;
      if (v53 >= 4294967300.0) {
        unsigned int v54 = -1;
      }
      unsigned int v70 = v54;
      unsigned int v71 = v45 + 604800 * (unsigned __int16)CmpUnsignedField;
      uint64_t v68 = 0;
      int v69 = &off_270EBC600;
      int v67 = &off_270EBC600;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v78, (BlueFin::GlGpsTime *)&v67);
      unsigned int v55 = ((uint64_t (*)(void))v69[4])(&v69);
      unsigned int v80 = v70;
      unsigned int v81 = v55;
      unsigned int v56 = ((uint64_t (*)(void))v67[4])(&v67);
      v79[0] = v68;
      v79[1] = v56;
      BlueFin::GlTimePoint::resolveAmbiguity(&v80, v79, 0x24EA0000u);
      __n128 v57 = ((__n128 (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v67[3])(&v67, v81);
      v57.n128_u32[0] = v80;
      unsigned int v65 = ((double)v57.n128_u64[0] * 2.32830644e-10 + (double)v58);
    }
    BlueFin::GlGnssSet::Add((uint64_t)this + 1216, &v72);
    ++v34;
    v33 += 76;
    LODWORD(v31) = v62;
  }
  while (v34 < *((unsigned __int8 *)v66 + 4));
  long long v29 = v66;
  uint64_t v31 = v66[2];
  *((_DWORD *)this + v31 + 240) = *v66;
  unsigned int v59 = v65;
  if (!v65) {
LABEL_88:
  }
    unsigned int v59 = *v29 + 10800;
  int v60 = (char *)this + 4 * v31;
  if (*((_DWORD *)v60 + 247) < v59) {
    *((_DWORD *)v60 + 247) = v59;
  }
LABEL_91:
  uint64_t v22 = 1;
LABEL_33:
  if (*(_OWORD *)((char *)this + 26443) != 0
    && (*(void *)((char *)this + 26443) != *((void *)this + 200)
     || *(void *)((char *)this + 26451) != *((void *)this + 201)))
  {
    BlueFin::GlPeLtoMgr::SetLtoDigest(this, (BlueFin::GlPeLtoMgr *)((char *)this + 26443), 0);
    BlueFin::GlPeLtoMgr::UpdateDigest(this);
    *((_DWORD *)this + 410) = *((_DWORD *)this + 6615);
  }
  return v22;
}

uint64_t BlueFin::GlPeLtoSliceInterface::Deserialize(BlueFin::GlPeLtoSliceInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) == 119)
  {
    unsigned int v3 = *((unsigned __int8 *)a2 + 12);
    if (v3 <= 1)
    {
      int v5 = *((unsigned __int16 *)a2 + 11);
      if (BlueFin::GlPeLtoSliceInterface::ExpectedSize(0, v3) == v5)
      {
        *((_DWORD *)this + 2) = 0;
        *((_DWORD *)this + 3) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
        *((unsigned char *)this + 20) = BlueFin::GlSysLogEntry::GetU8(a2);
        *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
        return 1;
      }
      if (BlueFin::GlPeLtoSliceInterface::ExpectedSize(1, *((unsigned __int8 *)a2 + 12)) == v5)
      {
        *((_DWORD *)this + 2) = 1;
        for (uint64_t i = 24; i != 100; i += 4)
          *(_DWORD *)((char *)this + i) = BlueFin::GlSysLogEntry::GetU32(a2);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t BlueFin::GlPeLtoSliceInterface::ExpectedSize(int a1, unsigned int a2)
{
  if (a2 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 328, "ExpectedSize", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 328, "ucVersion == 1");
  }
  if (a1 == 1) {
    unsigned int v2 = 77;
  }
  else {
    unsigned int v2 = 0;
  }
  if (a1) {
    return v2;
  }
  else {
    return 7;
  }
}

uint64_t BlueFin::GlPeLtoMgr::UpdateEphemeris(BlueFin::GlPeLtoMgr *this, BlueFin::GlPeLtoEphemeris *a2, int a3, unsigned int a4, int a5)
{
  Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 10) + 384), *((unsigned __int8 *)a2 + 8) >> 4);
  if (!Mgr) {
    return 0;
  }
  unsigned int v11 = Mgr;
  if (a3)
  {
    int v12 = BlueFin::GlPeClkCalibrateMgr::ApplyClockCalibrationParameters(*((BlueFin::GlPeClkCalibrateMgr **)this + 13), a2, a4, a5);
    if (a5 >= 604800)
    {
      if (v12) {
        return 0;
      }
    }
  }
  long long v14 = *(uint64_t (**)(void *, BlueFin::GlPeLtoEphemeris *))(*v11 + 24);

  return v14(v11, a2);
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoGnssAltNav(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  unsigned int v10 = &unk_270EC16B0;
  unsigned int v11 = 7;
  v12[0] = -1;
  int v13 = -1;
  int v16 = 0;
  memset(v15, 0, sizeof(v15));
  uint64_t v14 = 0;
  v17[0] = -1;
  uint64_t v18 = 0;
  int v19 = 0;
  v20[0] = -1;
  int v21 = -1;
  uint64_t v23 = 0;
  uint64_t v22 = 0;
  int v24 = 0;
  int v4 = BlueFin::GlPeLtoGnssAltNavInterface::Deserialize((BlueFin::GlPeLtoGnssAltNavInterface *)&v10, a2);
  uint64_t result = 0;
  if (v4)
  {
    uint64_t result = 0;
    unsigned int v6 = v12;
    switch(v11)
    {
      case 0u:
        if (v13 == 1) {
          char v7 = v12;
        }
        else {
          char v7 = 0;
        }
        BlueFin::GlPeLtoMgr::UpdateNonL1ClkErrTgd((uint64_t)this, v3, v7, 0, 1);
        goto LABEL_13;
      case 3u:
        if (v13 == 1) {
          char v8 = v12;
        }
        else {
          char v8 = 0;
        }
        BlueFin::GlPeLtoMgr::UpdateQzsNonL1ClkErrTgd((uint64_t)this, v3, v8, 0, 1);
        goto LABEL_13;
      case 4u:
        unsigned int v6 = v17;
        BlueFin::GlPeLtoMgr::UpdateBdsClkErrTgd((uint64_t)this, (uint64_t)v17, 0, 1);
        goto LABEL_13;
      case 5u:
        unsigned int v6 = v20;
        BlueFin::GlPeLtoMgr::UpdateNonL1ClkErrTgd((uint64_t)this, v3, v20, 0, 1);
LABEL_13:
        if (v11 > 6) {
          uint64_t v9 = "INV";
        }
        else {
          uint64_t v9 = off_2655DF758[v11];
        }
        GlCustomLog(14, "LtoMgr: read LTO (%s %d) AltNav Info from NVMEM!\n", v9, (*v6 + 1));
        uint64_t result = 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoGnssAltNavInterface::Deserialize(BlueFin::GlPeLtoGnssAltNavInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 128 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t result = 0;
  int v7 = BlueFin::GlImplGnss::m_aucImplGnssTable[U8];
  *((_DWORD *)this + 2) = v7;
  switch(v7)
  {
    case 0:
    case 3:
      *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_WORD *)this + 16) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)this + 17) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 18) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((unsigned char *)this + 38) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 20) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 21) = BlueFin::GlSysLogEntry::GetU16(a2);
      goto LABEL_10;
    case 4:
      *((unsigned char *)this + 44) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_WORD *)this + 26) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)this + 27) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 28) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 29) = BlueFin::GlSysLogEntry::GetU16(a2);
      goto LABEL_10;
    case 5:
      *((unsigned char *)this + 60) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)this + 16) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)this + 17) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 18) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_DWORD *)this + 19) = BlueFin::GlSysLogEntry::GetS32(a2);
      *((_WORD *)this + 40) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)this + 41) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 42) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((_WORD *)this + 43) = BlueFin::GlSysLogEntry::GetU16(a2);
LABEL_10:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::SetLtoEph(BlueFin::GlPeGpsQzssEphMgr *this, const BlueFin::GlPeLtoEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeGpsQzssEphMgr *, const BlueFin::GlPeLtoEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

__n128 BlueFin::GlPeLtoMgr::UpdateGpsAlmanac(uint64_t a1, unsigned __int8 *a2)
{
  int v17 = 7;
  char v18 = 0;
  int v7 = -65536;
  uint64_t v8 = 0;
  int v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  __int16 v14 = 0;
  int v15 = -1;
  char v16 = 0;
  if (BlueFin::GlPeAlmanac::Import((uint64_t)&v7, a2, 0, 4, 0.0)) {
    BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeAlmMgr *)(*(void *)(a1 + 80) + 34112), (const BlueFin::GlPeAlmanac *)&v7);
  }
  if (*a2 <= 0x3EuLL)
  {
    uint64_t v5 = a1 + 36 * *a2;
    __n128 result = *(__n128 *)a2;
    long long v6 = *((_OWORD *)a2 + 1);
    *(_DWORD *)(v5 + 14360) = *((_DWORD *)a2 + 8);
    *(__n128 *)(v5 + 14328) = result;
    *(_OWORD *)(v5 + 14344) = v6;
  }
  return result;
}

uint64_t BlueFin::GlPeGalEphMgr::SetLtoEph(BlueFin::GlPeGalEphMgr *this, const BlueFin::GlPeLtoEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, const BlueFin::GlPeLtoEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

__n128 BlueFin::GlPeLtoMgr::UpdateGloAlmanac(uint64_t a1, uint64_t a2)
{
  BlueFin::GlPeAlmMgr::SetAsstAlm(*(void *)(a1 + 80) + 34112, (unsigned __int16 *)a2, 1);
  int v5 = *(unsigned __int8 *)(a2 + 2);
  if ((v5 - 1) <= 0x17)
  {
    __n128 result = *(__n128 *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    int v7 = (_OWORD *)(a1 + 32 * (v5 - 1) + 15480);
    _OWORD *v7 = *(_OWORD *)a2;
    v7[1] = v6;
  }
  return result;
}

uint64_t BlueFin::GlGnssSet::Remove(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)a2;
  if (*(int *)a2 > 6 || (int v3 = *(unsigned __int8 *)(a2 + 4), (v3 - 1) >= 0x3F))
  {
    DeviceFaultNotify("glgnss.cpp", 279, "Remove", (char)"rtGnss.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 279, "rtGnss.isValid()");
  }
  uint64_t v4 = *(void *)(a1 + 168) + 24 * v2;

  return BlueFin::GlSetBase::Remove(v4, v3);
}

BOOL BlueFin::GlPeLtoMgr::UpdateSbasAlmanac(BlueFin::GlPeLtoMgr *this, __int16 a2, int a3, double a4)
{
  int v23 = 1;
  char v24 = a3 - 119;
  v10[0] = a3;
  v10[1] = 0;
  uint64_t v11 = 0;
  int v12 = 0;
  long long v13 = xmmword_263BB8B50;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0x40B95D8000000000;
  double v17 = a4 * -0.0174532925;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  __int16 v20 = a2;
  int v21 = 4;
  char v22 = 0;
  BOOL result = BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeAlmMgr *)(*((void *)this + 10) + 34112), (const BlueFin::GlPeAlmanac *)v10);
  if ((a3 - 120) <= 0x3E)
  {
    uint64_t v8 = (float *)((char *)this + 12 * (a3 - 120) + 19740);
    *(unsigned char *)uint64_t v8 = a3;
    float v9 = a4;
    v8[1] = v9;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::DeserializeLtoInfo(BlueFin::GlPeLtoFileContentStorageMgr *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v10 = 0uLL;
  float v9 = &unk_270EC17E8;
  uint64_t v3 = BlueFin::GlPeLtoInfoInterface::Deserialize((BlueFin::GlPeLtoInfoInterface *)&v9, a2);
  if (v3)
  {
    int v5 = &v7;
    char v6 = 3;
    uint64_t v7 = -1;
    int v8 = -1;
    BlueFin::GlPeLtoFileContentStorageMgr::Clear((uint64_t)this, (int **)&v5);
    if ((long long *)((char *)this + 24795) != &v10) {
      *(_OWORD *)((char *)this + 24795) = v10;
    }
    *((_DWORD *)this + 6203) = v11;
  }
  return v3;
}

double BlueFin::GlPeEnvironmentMonitor::Deserialize(BlueFin::GlPeEnvironmentMonitor *this, BlueFin::GlSysLogEntry *a2)
{
  memset(&v5[1], 0, 20);
  v5[0] = &unk_270EC2380;
  long long v6 = 0uLL;
  if (BlueFin::GlPeEnvMonitorData::Deserialize((BlueFin::GlPeEnvMonitorData *)v5, a2))
  {
    *((_DWORD *)this + 330) = v5[1];
    double result = *(double *)((char *)&v5[1] + 4);
    long long v4 = v6;
    *(_OWORD *)((char *)this + 1288) = *(_OWORD *)((char *)&v5[1] + 4);
    *(_OWORD *)((char *)this + 1304) = v4;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoInfoInterface::Deserialize(BlueFin::GlPeLtoInfoInterface *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 120 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    BlueFin::GlSysLogEntry::GetBuffer(a2, (unsigned __int8 *)this + 8, 0x10u);
    *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 382);
  }
  return v3;
}

uint64_t BlueFin::stPeStoredDoppler::Deserialize(void **this, BlueFin::GlSysLogEntry *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 12);
  BOOL v4 = (v3 - 1) < 2 && *((_DWORD *)a2 + 2) == 54;
  uint64_t result = v4;
  if (v4)
  {
    unsigned int v21 = result;
    if (v3 == 1) {
      int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    }
    else {
      int U8 = BlueFin::GlSysLogEntry::GetU16(a2);
    }
    int v8 = U8;
    bzero(this[2305], ((4 * *((unsigned __int8 *)this + 18448) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    if (!v8)
    {
LABEL_34:
      BlueFin::GlSysLogEntry::CheckConsumed(a2, 361);
      return v21;
    }
    int v9 = 0;
    while (1)
    {
      int v10 = *((unsigned __int8 *)a2 + 12);
      if (v10 == 2)
      {
        int v12 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
              + BlueFin::GlSysLogEntry::GetU8(a2));
        unsigned int v11 = BlueFin::GlSysLogEntry::GetU8(a2);
      }
      else if (v10 == 1)
      {
        unsigned int v11 = 0;
        int v12 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
              + BlueFin::GlSysLogEntry::GetU8(a2));
      }
      else
      {
        int v12 = 0;
        unsigned int v11 = 0;
      }
      double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
      if (v12)
      {
        if (v9 != 575) {
          break;
        }
      }
LABEL_31:
      if (!--v8) {
        goto LABEL_34;
      }
    }
    unsigned int v14 = (v12 + 67);
    if (v14 >= 0x44)
    {
      uint64_t v16 = BlueFin::GlSvId::s_aucSvId2gnss[v12];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v11 - v11 + v16] == 255)
      {
        __int16 v15 = 575;
        int v17 = -1;
LABEL_26:
        uint64_t v18 = (uint64_t)this[2304] + 32 * v9;
        *(unsigned char *)uint64_t v18 = v12;
        *(_DWORD *)(v18 + 4) = v17;
        *(_WORD *)(v18 + 8) = v15;
        *(double *)(v18 + 16) = D64;
        if (v14 < 0x44
          || (uint64_t v19 = BlueFin::GlSvId::s_aucSvId2gnss[v12],
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v11 - v11 + v19] == 255))
        {
          __int16 v20 = 575;
        }
        else
        {
          __int16 v20 = BlueFin::GlSignalId::s_ausGnss2signalId[v19]
              + v12
              - BlueFin::GlSvId::s_aucGnss2minSvId[v19]
              + v11 * BlueFin::GlSvId::s_aucGnss2numSvId[v19];
        }
        ++v9;
        *((_DWORD *)this[2305] + (v20 >> 5)) |= 1 << v20;
        goto LABEL_31;
      }
      __int16 v15 = BlueFin::GlSignalId::s_ausGnss2signalId[v16]
          + v12
          - BlueFin::GlSvId::s_aucGnss2minSvId[v16]
          + v11 * BlueFin::GlSvId::s_aucGnss2numSvId[v16];
    }
    else
    {
      __int16 v15 = 575;
    }
    int v17 = v11;
    goto LABEL_26;
  }
  return result;
}

uint64_t BlueFin::GlNvMemImplData::Deserialize(BlueFin::GlNvMemImplData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 28) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 6) < 0xFFFFFFFB) {
    return 0;
  }
  if (v3 == 5) {
    char U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  else {
    char U8 = 0;
  }
  *((unsigned char *)this + 8) = U8;
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) <= 1u)
  {
    *((unsigned char *)this + 16) = 0;
  }
  else
  {
    *((unsigned char *)this + 16) = BlueFin::GlSysLogEntry::GetU8(a2);
    if (*((unsigned __int8 *)a2 + 12) > 2u)
    {
      *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU8(a2);
      if (*((unsigned __int8 *)a2 + 12) < 4u) {
        int U32 = -7200001;
      }
      else {
        int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      }
      goto LABEL_13;
    }
  }
  int U32 = -7200001;
  *((_DWORD *)this + 5) = 0;
LABEL_13:
  *((_DWORD *)this + 6) = U32;
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 1384);
  return 1;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoGnssL5HealthInfo(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 127 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    int v5 = (unsigned int *)((char *)this + 21808);
    unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
    GlCustomLog(14, "LtoMgr: read LTO L5Health Info from NVMEM!\n", &unk_270EC1668);
    unsigned int v6 = U32;
    if (!U32)
    {
      for (uint64_t i = 0; i != 28; i += 4)
      {
        if (v6 <= *(_DWORD *)((char *)this + i + 988)) {
          unsigned int v6 = *(_DWORD *)((char *)this + i + 988);
        }
      }
    }
    uint64_t v8 = *((void *)this + 15);
    if ((BlueFin::GlPeLtoMgr *)(v8 + 2272) != (BlueFin::GlPeLtoMgr *)((char *)this + 1600)) {
      *(_OWORD *)(v8 + 2272) = *((_OWORD *)this + 100);
    }
    *(_DWORD *)(v8 + 2288) = v6;
    *int v5 = v6;
    v5[1164] |= 0x8000u;
  }
  return v3;
}

void BlueFin::GlPeLtoMgr::SetLtoDigest(BlueFin::GlPeLtoMgr *this, void *a2, int a3)
{
  unsigned int v6 = (void *)((char *)this + 1600);
  uint64_t v7 = *((void *)this + 200) | *((void *)this + 201);
  if (*((_OWORD *)this + 100) != 0)
  {
    if (*v6 == *a2 && *((void *)this + 201) == a2[1])
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      BlueFin::GlPeLtoMgr::Clear(this, 0);
      LOBYTE(v7) = 1;
    }
  }
  *((unsigned char *)this + 1616) = v7;
  if (v6 != a2) {
    *(_OWORD *)unsigned int v6 = *(_OWORD *)a2;
  }
  if (a3)
  {
    if ((void *)((char *)this + 26443) != a2) {
      *(_OWORD *)((char *)this + 26443) = *(_OWORD *)a2;
    }
  }
}

uint64_t BlueFin::GlPeLtoMgr::Deserialize(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2, char a3, int a4, int a5)
{
  if (a5) {
    int v8 = 4;
  }
  else {
    int v8 = 0;
  }
  *((_DWORD *)this + 409) = *((_DWORD *)this + 409) & 0xFFFFFFFB | v8;
  BlueFin::GlPeLtoData::Deserialize((BlueFin::GlPeLtoMgr *)((char *)this + 128), a2);
  if (a3)
  {
    int v9 = 3;
  }
  else
  {
    if ((a4 - 1) > 0x26) {
      goto LABEL_9;
    }
    int v9 = 2;
  }
  *((_DWORD *)this + 409) |= v9;
LABEL_9:

  return BlueFin::GlPeLtoMgr::MakeNvMemDataActive(this, 0);
}

void BlueFin::GlPeRangeAidGen::GetSatelliteInterSignalBiasNs(BlueFin::GlPeRangeAidGen *this, const BlueFin::GlSignalId *a2, int a3, double *a4, double *a5)
{
  *a4 = (*(double (**)(void, const BlueFin::GlSignalId *, void))(**((void **)this + 2420) + 88))(*((void *)this + 2420), a2, 0)/ 299792.458* 1000000.0;
  *a5 = 1.0;
  if (a3)
  {
    int v10 = BlueFin::GlPeGnssTime::Gnss2TimeSystem(BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]);
    if (v10 != -1)
    {
      double SystemConversionS = BlueFin::GlPeTimeManager::GetSystemConversionS(*(void *)this, v10);
      double v12 = SystemConversionS - BlueFin::GlPeTimeManager::GetSystemConversionS(*(void *)this, 0);
      double v13 = v12 / 0.001;
      if (v12 / 0.001 <= 0.0)
      {
        double v14 = 0.0;
        if (v12 / 0.001 < 0.0) {
          double v14 = ceil(v13 + -0.5);
        }
      }
      else
      {
        double v14 = floor(v13 + 0.5);
      }
      *a4 = *a4 + (v12 + v14 * -0.001) * 1000000000.0;
      *a5 = *a5
          + BlueFin::GlPeTimeManager::GetSystemConversionUncUs(*(void *)this, BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2])* 1000.0;
    }
  }
}

float BlueFin::GlMeReceiverParametersIfc::GetBbHwInterSysBiasS(BlueFin::GlMeReceiverParametersIfc *this, const BlueFin::GlSignalId *a2)
{
  uint64_t v3 = (BlueFin::GlMeBbHwInterSysBias *)(*(uint64_t (**)(BlueFin::GlMeReceiverParametersIfc *))(*(void *)this + 64))(this);

  return BlueFin::GlMeBbHwInterSysBias::GetBias(v3, a2);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetBbHwInterSysBiasStruct(BlueFin::GlMeSrdReceiverParameters *this)
{
  double v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 64);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetBbHwInterSysBiasStruct(int **this)
{
  return *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 5);
}

BOOL BlueFin::GlPeAlmMgr::SetAsstAlm(uint64_t a1, unsigned __int16 *a2, int a3)
{
  double v12 = &off_270EBF4E8;
  double v13 = 0.0;
  if (BlueFin::GlPeTimeManager::TimeKnown(*(void *)(a1 + 448), 1, 0x3938700u))
  {
    BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 448), 1, v9);
    int v10 = &off_270EBF4E8;
    double v11 = 0.0;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v9, (BlueFin::GlGlnsTime *)&v10);
    double v6 = v11;
    double v13 = v11;
  }
  else
  {
    BOOL result = BlueFin::GlPeTimeManager::GetTimeOfGlnsAsst(*(BlueFin::GlPeTimeManager **)(a1 + 448), (BlueFin::GlGlnsTime *)&v12);
    if (!result) {
      return result;
    }
  }
  if (a3) {
    int v8 = 4;
  }
  else {
    int v8 = 0;
  }
  return BlueFin::GlPeAlmMgr::ApplyDecodedGlonassAlmanac(a1, &v12, a2, v8, v6);
}

BOOL BlueFin::GlPeTimeManager::TimeKnown(uint64_t a1, int a2, unsigned int a3)
{
  if (*(_DWORD *)(a1 + 2616) == -1 || *(double *)(a1 + 2632) == 4294967300.0) {
    return 0;
  }
  if (*(double *)(a1 + 2736) == 4294967300.0) {
    double v3 = *(double *)(a1 + 2632);
  }
  else {
    double v3 = *(double *)(a1 + 2736);
  }
  return v3
       + *(float *)(BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeGnssTime *)(a1 + 2608)) + 4 * a2 + 48) <= (double)a3;
}

uint64_t BlueFin::GlMeRxParamStd::GetRootGearIdFromCnstlAndMode(int **a1, int a2, int a3)
{
  if (a3 >= 6)
  {
    uint64_t v7 = "eMode < GetMaxAllowedModes()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 505, "GetRootGearIdFromCnstlAndMode", (char)"eMode < GetMaxAllowedModes()");
    int v8 = 505;
    goto LABEL_12;
  }
  if ((int)BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(*a1[1]) <= a2)
  {
    uint64_t v7 = "eCnstl < GetMaxAllowedCnstls()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 506, "GetRootGearIdFromCnstlAndMode", (char)"eCnstl < GetMaxAllowedCnstls()");
    int v8 = 506;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v8, v7);
  }
  if (!**((unsigned char **)BlueFin::GlMeRxParamStd::rMap(a1) + 2))
  {
LABEL_8:
    uint64_t v7 = "0";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 515, "GetRootGearIdFromCnstlAndMode", (char)"0");
    int v8 = 515;
    goto LABEL_12;
  }
  int v6 = 0;
  while ((*((unsigned int (**)(int **, void))*a1 + 10))(a1, v6) != a2
       || (*((unsigned int (**)(int **, void))*a1 + 9))(a1, v6) != a3)
  {
    if (++v6 >= **((unsigned __int8 **)BlueFin::GlMeRxParamStd::rMap(a1) + 2)) {
      goto LABEL_8;
    }
  }
  return v6;
}

uint64_t BlueFin::GlMeRxParamStd::GetGearTrkParamsFromGearId(int **this, uint64_t a2)
{
  uint64_t v4 = *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 6);
  unsigned int v5 = (*((uint64_t (**)(int **, uint64_t))*this + 10))(this, a2);
  uint64_t v6 = *(void *)(v4 + 208 * v5 + 8 * (*((unsigned int (**)(int **, uint64_t))*this + 9))(this, a2) + 232);
  if (!*(void *)(v6 + 8 * BlueFin::GlMeRxParamStd::GetGearIndexNotGearId(this, a2) + 168))
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 601, "GetGearTrkParamsFromGearId", (char)"rMap().m_pstTrkParams->astCnstlParams[GetCnstl(ucGearId)].pastModeParams[GetMode(ucGearId)]->apstGearParams[GetGearIndexNotGearId(ucGearId)] != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 601, "rMap().m_pstTrkParams->astCnstlParams[GetCnstl(ucGearId)].pastModeParams[GetMode(ucGearId)]->apstGearParams[GetGearIndexNotGearId(ucGearId)] != nullptr");
  }
  uint64_t v7 = *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 6);
  unsigned int v8 = (*((uint64_t (**)(int **, uint64_t))*this + 10))(this, a2);
  uint64_t v9 = *(void *)(v7 + 208 * v8 + 8 * (*((unsigned int (**)(int **, uint64_t))*this + 9))(this, a2) + 232);
  return *(void *)(v9 + 8 * BlueFin::GlMeRxParamStd::GetGearIndexNotGearId(this, a2) + 168);
}

uint64_t BlueFin::GlMeRxParamStd::GetCnstl(int **this, unsigned int a2)
{
  uint64_t v4 = BlueFin::GlMeRxParamStd::rMap(this);
  if (**((unsigned __int8 **)v4 + 2) <= a2)
  {
    unsigned int v8 = "ucGearid < *rMp.m_pucGsNum";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 490, "GetCnstl", (char)"ucGearid < *rMp.m_pucGsNum");
    int v9 = 490;
    goto LABEL_6;
  }
  unsigned int v5 = v4;
  int v6 = *(_DWORD *)(*((void *)v4 + 7) + 12 * a2);
  if (v6 >= (int)BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(*this[1]))
  {
    unsigned int v8 = "rMp.m_pastGearInfoLookup[ucGearid].etCnstl < GetMaxAllowedCnstls()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 491, "GetCnstl", (char)"rMp.m_pastGearInfoLookup[ucGearid].etCnstl < GetMaxAllowedCnstls()");
    int v9 = 491;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v9, v8);
  }
  return *(unsigned int *)(*((void *)v5 + 7) + 12 * a2);
}

int *BlueFin::GlMeRxParamStd::rMap(int **this)
{
  if (*this[1] >= 6)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.h", 153, "rMap", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.h", 153, "IsValid()");
  }
  return this[2];
}

uint64_t BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(int a1)
{
  if (a1 >= 6)
  {
    BOOL v2 = "etRxType < GLME_RX_NUM_TYPES";
    DeviceFaultNotify("glme_receiver_parameters_ifc.h", 984, "GetMaxAllowedCnstls", (char)"etRxType < GLME_RX_NUM_TYPES");
    int v3 = 984;
    goto LABEL_5;
  }
  if (a1 >= 6)
  {
    BOOL v2 = "0";
    DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1000, "GetMaxAllowedCnstls", (char)"0");
    int v3 = 1000;
LABEL_5:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_receiver_parameters_ifc.h", v3, v2);
  }
  return word_263BABA30[a1];
}

uint64_t BlueFin::GlMeRxParamStd::GetMode(int **this, unsigned int a2)
{
  int v3 = BlueFin::GlMeRxParamStd::rMap(this);
  if (**((unsigned __int8 **)v3 + 2) <= a2)
  {
    unsigned int v5 = "ucGearid < *rMp.m_pucGsNum";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 482, "GetMode", (char)"ucGearid < *rMp.m_pucGsNum");
    int v6 = 482;
    goto LABEL_6;
  }
  uint64_t result = *(unsigned int *)(*((void *)v3 + 7) + 12 * a2 + 4);
  if ((int)result >= 6)
  {
    unsigned int v5 = "rMp.m_pastGearInfoLookup[ucGearid].etMode < GetMaxAllowedModes()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 483, "GetMode", (char)"rMp.m_pastGearInfoLookup[ucGearid].etMode < GetMaxAllowedModes()");
    int v6 = 483;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v6, v5);
  }
  return result;
}

uint64_t BlueFin::GlMeRxParamStd::GetGearIndexNotGearId(int **this, unsigned int a2)
{
  int v3 = BlueFin::GlMeRxParamStd::rMap(this);
  if (**((unsigned __int8 **)v3 + 2) <= a2)
  {
    unsigned int v5 = "ucGearid < *rMp.m_pucGsNum";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 779, "GetGearIndexNotGearId", (char)"ucGearid < *rMp.m_pucGsNum");
    int v6 = 779;
    goto LABEL_6;
  }
  uint64_t result = *(unsigned __int8 *)(*((void *)v3 + 7) + 12 * a2 + 8);
  if (result >= 5)
  {
    unsigned int v5 = "rMp.m_pastGearInfoLookup[ucGearid].ucZeroBasedGearNum < MAX_GEARS_PER_MODE";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 780, "GetGearIndexNotGearId", (char)"rMp.m_pastGearInfoLookup[ucGearid].ucZeroBasedGearNum < MAX_GEARS_PER_MODE");
    int v6 = 780;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v6, v5);
  }
  return result;
}

BOOL BlueFin::GlPeLtoMgr::GetLtoDataAgeS(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  unsigned int v5 = *(unsigned int **)(a1 + 88);
  unsigned int v6 = v5[644];
  if (v6)
  {
    int v8 = *(_DWORD *)(a1 + 4 * a2 + 960);
    BlueFin::GlPeTimeManager::GetTime(v5, a3, 1, (uint64_t)v12);
    double v13 = &off_270EBC600;
    uint64_t v14 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v12, (BlueFin::GlGpsTime *)&v13);
    unsigned int v9 = ((uint64_t (*)(void))v13[4])(&v13);
    LODWORD(v10) = v14;
    *a4 = (int)((double)v10 * 2.32830644e-10 + (double)v9) - v8;
  }
  return v6 != 0;
}

void BlueFin::GlPeRangeAidGen::AddRngAid(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, double a5)
{
  if (((unint64_t)*(unsigned int *)(*(void *)(a1 + 19032) + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F))) {
    return;
  }
  uint64_t v10 = a1 + 32;
  BlueFin::GlPeSatAidInfo::Add(a1 + 32, a2);
  if (!v11) {
    return;
  }
  uint64_t v12 = v11;
  uint64_t v73 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  float64x2_t v70 = 0u;
  long long v71 = 0u;
  int v72 = 0;
  uint64_t v13 = *(void *)a1;
  double v61 = 0.0;
  BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(v13, a2, (uint64_t *)&v61, v59);
  double v14 = v61 * 0.001;
  double v67 = v61 * 0.001;
  if ((*(unsigned int (**)(void, unsigned __int8 *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a2))
  {
    *(unsigned char *)uint64_t v12 = *a2;
    *(_DWORD *)(v12 + 4) = *(_DWORD *)a3;
    *(unsigned char *)(v12 + 8) = *(unsigned char *)(a3 + 4);
    *(_DWORD *)(v12 + 24) |= 0x100u;
    *(_DWORD *)(v12 + 72) = 0;
    *(_DWORD *)(v12 + 12) = 0;
    return;
  }
  __int16 v15 = (BlueFin::GlPeTimeMgrUtil *)(*(uint64_t (**)(void, unsigned __int8 *, double *, uint64_t, long long *, double))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, &v67, a4, &v68, a5 + v14 * -1000.0);
  if ((v15 & 1) == 0) {
    goto LABEL_14;
  }
  if (v72 == 4 && (**(unsigned char **)(*(void *)(a1 + 18056) + 160) & 4) == 0)
  {
    uint64_t v16 = (unsigned int *)(a1 + 4 * *a2 + 18268);
    unsigned int v17 = *v16;
    double v18 = (double)(int)*v16;
    if (*v16 <= 0xFF9222FE) {
      double v18 = (double)v17;
    }
    if (v17 == -1 || (double v19 = a5 - v18, v19 > 600000.0))
    {
      *uint64_t v16 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v15, a5);
    }
    else if (v19 > 300000.0)
    {
LABEL_14:
      uint64_t v20 = v10;
LABEL_49:
      BlueFin::GlPeSatAidInfo::Remove(v20, a2);
      return;
    }
  }
  uint64_t v21 = *(void *)(a1 + 18048);
  if (*(_DWORD *)(v21 + 100) == -1)
  {
    double v52 = "bGotXYZ";
    DeviceFaultNotify("glpe_raidgen.cpp", 971, "AddRngAid", (char)"bGotXYZ");
    int v53 = 971;
    goto LABEL_52;
  }
  double v22 = *(double *)(v21 + 144);
  double v23 = *(double *)(v21 + 152);
  v66[0] = v22;
  v66[1] = v23;
  double v24 = *(double *)(v21 + 160);
  v66[2] = v24;
  long long v64 = *(_OWORD *)(v21 + 168);
  uint64_t v65 = *(void *)(v21 + 184);
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  double v25 = (*(double *)&v68 - v22) * (*(double *)&v68 - v22)
      + (*((double *)&v68 + 1) - v23) * (*((double *)&v68 + 1) - v23)
      + (*(double *)&v69 - v24) * (*(double *)&v69 - v24);
  for (char i = 1; ; char i = 0)
  {
    double v67 = sqrt(v25) / 299792458.0;
    (*(void (**)(void, unsigned __int8 *, double *, uint64_t, long long *, double))(**(void **)(a1 + 8)
                                                                                             + 32))(*(void *)(a1 + 8), a2, &v67, a4, &v68, a5 + v67 * -1000.0);
    if ((i & 1) == 0) {
      break;
    }
    double v25 = (*(double *)&v68 - v22) * (*(double *)&v68 - v22)
        + (*((double *)&v68 + 1) - v23) * (*((double *)&v68 + 1) - v23)
        + (*(double *)&v69 - v24) * (*(double *)&v69 - v24);
  }
  uint64_t v54 = a3;
  double v27 = (*(double (**)(void, long long *, double *, long long *, double *, int *, char *, uint64_t *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), &v68, v66, &v64, &v61, v59, (char *)&v58 + 4, &v58);
  uint64_t v28 = 0;
  *(double *)(v12 + 32) = -(v27 + *(double *)&v71 * -299792458.0);
  long long v29 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
  uint64_t v30 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  do
  {
    if (*(unsigned __int8 *)(*(void *)(a1 + 18056) + v30 + 256) >> v28)
    {
      uint64_t v31 = *a2;
      v55[0] = v31;
      int v56 = v28;
      __int16 v57 = 575;
      if ((v31 + 67) >= 0x44u)
      {
        uint64_t v32 = BlueFin::GlSvId::s_aucSvId2gnss[v31];
        if (v29[v32] == 255) {
          int v56 = -1;
        }
        else {
          __int16 v57 = BlueFin::GlSignalId::s_ausGnss2signalId[v32]
        }
              + v31
              - BlueFin::GlSvId::s_aucGnss2minSvId[v32]
              + v28 * BlueFin::GlSvId::s_aucGnss2numSvId[v32];
      }
      float CarrierBasedBiases = BlueFin::GlPeComputeZRH::getCarrierBasedBiases(*(void **)(a1 + 19360), v55, *(_DWORD *)(*(void *)a1 + 2568), &v64, (_DWORD *)(v12 + 16), *((float *)&v58 + 1), *(float *)&v58);
      *(float *)(v12 + 4 * v28 + 56) = -CarrierBasedBiases;
    }
    ++v28;
    v29 += 7;
  }
  while (v28 != 4);
  float v34 = v61 * *((double *)&v69 + 1)
      + v62.f64[0] * v70.f64[0]
      + v62.f64[1] * v70.f64[1]
      - *((double *)&v71 + 1) * 299792458.0;
  float v35 = -v34;
  *(float *)(v12 + 44) = v35;
  double v67 = v27 / 299792458.0;
  if ((v72 - 1) < 3) {
    goto LABEL_31;
  }
  if (v72 != 4)
  {
    if (v72 == 5)
    {
LABEL_31:
      uint64_t v36 = *(void *)(a1 + 18048);
      double v37 = *(double *)(v36 + 80);
      double v38 = *(double *)(v36 + 88);
      (*(void (**)(void, unsigned __int8 *, double *, uint64_t, long long *, double))(**(void **)(a1 + 8)
                                                                                               + 32))(*(void *)(a1 + 8), a2, &v67, a4, &v68, a5 + -1000.0);
      (*(void (**)(void, long long *, double *, long long *, double *, void, void, void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), &v68, v66, &v64, &v61, 0, 0, 0);
      float64x2_t v39 = vmulq_f64(v62, v70);
      double v40 = v61 * *((double *)&v69 + 1) + v39.f64[0] + v39.f64[1];
      (*(void (**)(void, unsigned __int8 *, double *, uint64_t, long long *, double))(**(void **)(a1 + 8)
                                                                                               + 32))(*(void *)(a1 + 8), a2, &v67, a4, &v68, a5 + 1000.0);
      (*(void (**)(void, long long *, double *, long long *, double *, int *, char *, uint64_t *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), &v68, v66, &v64, &v61, v59, (char *)&v58 + 4, &v58);
      float64x2_t v41 = vmulq_f64(v62, v70);
      float v42 = (v61 * *((double *)&v69 + 1) + v41.f64[0] + v41.f64[1] - v40) * -0.5;
      unsigned int v43 = *(_DWORD *)(v12 + 24) | 0x20;
      __double2 v44 = __sincos_stret(*(float *)&v58 * 0.0174532925);
      float v45 = (v38 * v44.__sinval + v44.__cosval * v37) / 299792458.0;
      *(float *)(v12 + 40) = v45;
      float v46 = sqrt(v38 * v38 + v37 * v37) * 0.00019 / 299792458.0;
      *(float *)(v12 + 48) = v46;
      *(_DWORD *)(v12 + 24) = v43;
      float v35 = *(float *)(v12 + 44);
      goto LABEL_32;
    }
    double v52 = "false";
    DeviceFaultNotify("glpe_raidgen.cpp", 1083, "AddRngAid", (char)"false");
    int v53 = 1083;
LABEL_52:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_raidgen.cpp", v53, v52);
  }
  *(_DWORD *)(v12 + 40) = 980151802;
  *(_DWORD *)(v12 + 48) = 869711765;
  unsigned int v43 = *(_DWORD *)(v12 + 24) & 0xFFFFFFDF;
  *(_DWORD *)(v12 + 24) = v43;
  float v42 = 0.0;
LABEL_32:
  *(double *)(v12 + 32) = *(double *)(v12 + 32) / 299792458.0;
  *(float *)(v12 + 44) = v35 / 299790000.0;
  *(float *)(v12 + 52) = v42 / 299790000.0;
  if (fabsf(v35 / 299790000.0) > 0.000003 || fabsf(v42 / 299790000.0) > 0.000000004)
  {
    if (v72 == 1) {
      BlueFin::GlPeAsstMgr::MarkUnverified(*(void *)(a1 + 18048), a2);
    }
    uint64_t v20 = v10;
    goto LABEL_49;
  }
  double v47 = *((float *)&v58 + 1) + 0.5;
  double v48 = fmod(v47, 4294967300.0);
  if (v47 <= 4294967300.0) {
    double v48 = v47;
  }
  if (v48 < -4294967300.0) {
    double v48 = -fmod(-v48, 4294967300.0);
  }
  if (v48 < 0.0) {
    unsigned int v49 = --v48;
  }
  else {
    LOWORD(v49) = v48;
  }
  *(_WORD *)(v12 + 72) = v49;
  double v50 = -0.5;
  if (*(float *)&v58 >= 0.0) {
    double v50 = 0.5;
  }
  *(_WORD *)(v12 + 74) = (int)(v50 + *(float *)&v58);
  *(unsigned char *)uint64_t v12 = *a2;
  *(_DWORD *)(v12 + 4) = *(_DWORD *)v54;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v54 + 4);
  *(_DWORD *)(v12 + 20) = 0;
  int v51 = v72;
  if (v72 == 2) {
    int v51 = 1;
  }
  *(_DWORD *)(v12 + 12) = v51;
  *(_DWORD *)(v12 + 24) = v43 | 0xDE;
}

uint64_t BlueFin::GlPeAsstMgr::computeAzElCommon(uint64_t *a1, unsigned int *a2, unsigned int a3, long long *a4, uint64_t a5, _DWORD *a6, float *a7)
{
  if (a6) {
    *a6 = 0;
  }
  if (a7) {
    *a7 = -90.0;
  }
  if (!*(_DWORD *)(*a1 + 2576)) {
    return 0;
  }
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  if (!a4)
  {
    if (*((_DWORD *)a1 + 25) != -1)
    {
      long long v26 = *((_OWORD *)a1 + 9);
      uint64_t v27 = a1[20];
      long long v24 = *(_OWORD *)(a1 + 21);
      uint64_t v25 = a1[23];
      goto LABEL_10;
    }
    return 0;
  }
  long long v26 = *a4;
  uint64_t v27 = *((void *)a4 + 2);
  BlueFin::ecef2lla((double *)&v26, (uint64_t)&v24);
LABEL_10:
  if (a3 == -7200001) {
    a3 = *(_DWORD *)(*a1 + 2568);
  }
  double v23 = 0.0;
  BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(a1 + 14968), a2, &v21);
  BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(*a1, &v21, (uint64_t *)&v23, &v22);
  double v13 = (double)(int)a3;
  if (a3 <= 0xFF9222FE) {
    double v13 = (double)a3;
  }
  uint64_t v20 = 0;
  memset(v18, 0, sizeof(v18));
  int v19 = 0;
  uint64_t v14 = a1[4];
  double v17 = v23 * 0.001;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, unsigned int *, double *, uint64_t, _OWORD *, double))(*(void *)v14 + 40))(v14, a2, &v17, a5, v18, v13 - v23);
  if (v15)
  {
    (*(void (**)(uint64_t, _OWORD *, long long *, long long *, void, void, _DWORD *, float *))(*(void *)a1[4] + 80))(a1[4], v18, &v26, &v24, 0, 0, a6, a7);
    if (*a7 < 0.0) {
      (*(void (**)(uint64_t, unsigned __int8 *, float))(*(void *)a1[4] + 64))(a1[4], &v21, *a7);
    }
  }
  return v15;
}

double BlueFin::GlPeSatPosUtil::svvis(BlueFin::Matrix *a1, double *a2, double *a3, double *a4, const BlueFin::Matrix *a5, double *a6, float *a7, float *a8)
{
  uint64_t v47 = 0;
  int v8 = (const BlueFin::Matrix *)v46;
  if (a5) {
    unsigned int v9 = a5;
  }
  else {
    unsigned int v9 = (const BlueFin::Matrix *)v46;
  }
  double v10 = *a2 - *a3;
  double v11 = a2[1] - a3[1];
  double v12 = a2[2] - a3[2];
  double v13 = sqrt(v10 * v10 + v11 * v11 + v12 * v12);
  if (v13 == 0.0)
  {
    DeviceFaultNotify("glpe_satposif.h", 177, "svrange", (char)"dGeometricRangeM != 0.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satposif.h", 177, "dGeometricRangeM != 0.0");
  }
  double v17 = a1;
  double v18 = v10 * (1.0 / v13);
  double v19 = v11 * (1.0 / v13);
  if (a5) {
    int v8 = a5;
  }
  *((void *)v8 + 16) = 0x300000001;
  *(double *)unsigned int v9 = v18;
  *((double *)v8 + 1) = v19;
  *((double *)v8 + 2) = v12 * (1.0 / v13);
  if (a6 || a7 || a8)
  {
    uint64_t v45 = 0;
    uint64_t v20 = *(uint64_t *)a4;
    if (!*((_DWORD *)a1 + 32)
      || vabdd_f64(*(double *)&v20, *((double *)a1 + 17)) >= 0.001
      || vabdd_f64(a4[1], *((double *)a1 + 18)) >= 0.001
      || vabdd_f64(a4[2], *((double *)a1 + 19)) >= 100.0)
    {
      double v21 = a4[1] * 0.0174532925;
      __double2 v22 = __sincos_stret(*(double *)&v20 * 0.0174532925);
      __double2 v23 = __sincos_stret(v21);
      v44[0] = -(v22.__sinval * v23.__cosval);
      v44[1] = -(v22.__sinval * v23.__sinval);
      v44[2] = v22.__cosval;
      _OWORD v44[4] = -v23.__sinval;
      v44[5] = v23.__cosval;
      v44[6] = 0.0;
      v44[8] = -(v22.__cosval * v23.__cosval);
      v44[9] = -(v22.__cosval * v23.__sinval);
      uint64_t v20 = 0x300000003;
      v44[10] = -v22.__sinval;
      uint64_t v45 = 0x300000003;
      double v17 = (const BlueFin::Matrix *)v44;
    }
    v43[8] = 0;
    if (a6) {
      long long v24 = (BlueFin::Matrix *)a6;
    }
    else {
      long long v24 = (BlueFin::Matrix *)&v39;
    }
    BlueFin::Matrix::mult(v24, v9, 1, v17, *(double *)&v20);
    if (a8)
    {
      if (a6) {
        uint64_t v25 = a6;
      }
      else {
        uint64_t v25 = (double *)&v39;
      }
      int v26 = *((_DWORD *)v25 + 32);
      uint64_t v27 = (double *)&v41;
      if (a6) {
        uint64_t v27 = a6 + 2;
      }
      uint64_t v28 = (double *)v43;
      if (a6) {
        uint64_t v28 = a6 + 8;
      }
      if (v26 == 1) {
        long long v29 = v27;
      }
      else {
        long long v29 = v28;
      }
      float v30 = *v29;
      *a8 = asinf(-v30) * 57.296;
    }
    if (a7)
    {
      if (a6) {
        uint64_t v31 = a6;
      }
      else {
        uint64_t v31 = (double *)&v39;
      }
      int v32 = *((_DWORD *)v31 + 32);
      uint64_t v33 = (double *)&v40;
      if (a6) {
        uint64_t v33 = a6 + 1;
      }
      float v34 = (double *)&v42;
      if (a6) {
        float v34 = a6 + 4;
      }
      if (v32 == 1) {
        float v34 = v33;
      }
      float v35 = *v34;
      float v36 = *(double *)v24;
      float v37 = atan2f(v35, v36);
      *a7 = fmodf(v37 + 6.2832, 6.2832) * 57.296;
    }
  }
  return v13;
}

double BlueFin::GlPeSatPos::svvis(uint64_t a1, double *a2, double *a3, double *a4, const BlueFin::Matrix *a5, double *a6, float *a7, float *a8)
{
  return BlueFin::GlPeSatPosUtil::svvis((BlueFin::Matrix *)(a1 + 17736), a2, a3, a4, a5, a6, a7, a8);
}

double BlueFin::Matrix::mult(BlueFin::Matrix *this, const BlueFin::Matrix *a2, BOOL a3, const BlueFin::Matrix *a4, double result)
{
  uint64_t v5 = *((unsigned int *)a2 + 33);
  if (v5 != *((_DWORD *)a4 + 33))
  {
    DeviceFaultNotify("glpe_matrix_olympic.cpp", 61, "mult", (char)"mLeft.m_NbCols == mRight.m_NbCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix_olympic.cpp", 61, "mLeft.m_NbCols == mRight.m_NbCols");
  }
  uint64_t v6 = *((unsigned int *)a2 + 32);
  uint64_t v7 = *((unsigned int *)a4 + 32);
  if (v5 == 3 && v6 == 1 && v7 == 3)
  {
    double v19 = *((double *)a2 + 1);
    double v20 = *((double *)a2 + 2);
    double v21 = *(double *)a2 * *((double *)a4 + 4) + *((double *)a4 + 5) * v19;
    double v22 = *(double *)a2 * *((double *)a4 + 8) + *((double *)a4 + 9) * v19;
    double v23 = *(double *)a2 * *(double *)a4 + *((double *)a4 + 1) * v19 + *((double *)a4 + 2) * v20;
    double v24 = v21 + *((double *)a4 + 6) * v20;
    uint64_t result = v22 + *((double *)a4 + 10) * v20;
    *((void *)this + 16) = 0x300000001;
    *(double *)this = v23;
    *((double *)this + 1) = v24;
    *((double *)this + 2) = result;
  }
  else
  {
    if ((int)v6 >= 1)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if ((int)v7 >= 1)
        {
          uint64_t v11 = 0;
          double v12 = a4;
          do
          {
            uint64_t result = 0.0;
            if ((int)v5 >= 1)
            {
              double v13 = a2;
              uint64_t v14 = (double *)v12;
              uint64_t v15 = v5;
              do
              {
                double v16 = *(double *)v13;
                double v13 = (const BlueFin::Matrix *)((char *)v13 + 8);
                double v17 = v16;
                double v18 = *v14++;
                uint64_t result = result + v17 * v18;
                --v15;
              }
              while (v15);
            }
            *((double *)this + 4 * i + v11++) = result;
            double v12 = (const BlueFin::Matrix *)((char *)v12 + 32);
          }
          while (v11 != v7);
        }
        a2 = (const BlueFin::Matrix *)((char *)a2 + 32);
      }
    }
    *((_DWORD *)this + 32) = v6;
    *((_DWORD *)this + 33) = *((_DWORD *)a4 + 32);
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(uint64_t result, unsigned __int8 *a2, uint64_t *a3, int *a4)
{
  unint64_t v4 = *a2;
  int v5 = 12000;
  uint64_t v6 = 0x4053400000000000;
  switch(BlueFin::GlSvId::s_aucSvId2gnss[v4])
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_6;
    case 2:
      int v5 = 11000;
      uint64_t v6 = 0x4052400000000000;
      goto LABEL_9;
    case 3:
      int v5 = 22000;
      goto LABEL_6;
    case 4:
      uint64_t v7 = *(void *)(result + 40);
      unint64_t v8 = v4 >> 5;
      uint64_t v9 = *(unsigned int *)(*(void *)(v7 + 8) + 4 * (v4 >> 5));
      uint64_t v10 = 1 << (v4 & 0x1F);
      if ((v10 & v9) != 0) {
        goto LABEL_5;
      }
      uint64_t v6 = qword_263BBE250[(v10 & *(_DWORD *)(*(void *)(v7 + 56) + 4 * v8)) == 0];
      int v5 = 11000;
      goto LABEL_9;
    case 5:
      int v5 = 11000;
      uint64_t v6 = 0x4055C00000000000;
      goto LABEL_9;
    case 6:
LABEL_5:
      int v5 = 11000;
LABEL_6:
      uint64_t v6 = 0x4060200000000000;
LABEL_9:
      *a3 = v6;
      *a4 = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BlueFin::GlPeSatPos::RemoveSvId(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = *a2;
  if (v2 >= 0xBD)
  {
    DeviceFaultNotify("glpe_satpos.cpp", 628, "RemoveSvId", (char)"*rotSvId <= MAX_SVID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 628, "*rotSvId <= MAX_SVID");
  }
  unsigned int v3 = *(unsigned __int8 *)(result + v2 + 17512);
  if (v3 <= 0x5A)
  {
    unint64_t v4 = (BlueFin::GlPeMiniEphMgr *)(result + 8);
    return BlueFin::GlPeMiniEphMgr::remove(v4, v3);
  }
  return result;
}

uint64_t BlueFin::GlPeSatPos::GetSatPos(BlueFin::GlPeTimeMgrUtil *a1, uint64_t a2, double *a3, int *a4, uint64_t a5, double a6)
{
  BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*((void *)a1 + 2215) + 119744), (unsigned int *)a2, &v16);
  if (!v16) {
    return 0;
  }
  v13[0] = v16;
  unsigned int v14 = *(_DWORD *)a2;
  char v15 = *(unsigned char *)(a2 + 4);
  return BlueFin::GlPeSatPos::GetSatPosInternal(a1, v13, a3, a4, a5, a6);
}

double BlueFin::GlPeTimeManager::GetSystemConversionS(uint64_t a1, unsigned int a2, double *a3)
{
  *a3 = 0.0;
  if (!*(_DWORD *)(a1 + 2576)) {
    return 4294967300.0;
  }
  unsigned int v5 = BlueFin::GlPeGnssTime::Gnss2TimeSystem(a2);
  *a3 = BlueFin::GlPeTimeManager::GetSystemConversionS(a1, v5);
  uint64_t ConversionTable = BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeGnssTime *)(a1 + 2608));
  double v7 = 0.0;
  if (v5 - 1 <= 1)
  {
    LOBYTE(v7) = *(unsigned char *)(a1 + 2589);
    double v7 = (double)*(unint64_t *)&v7;
  }
  return *(float *)(ConversionTable + 4 * v5 + 48) + v7 * 1000000.0;
}

double BlueFin::GlPeComputeZRH::getCarrierBasedBiases(void *a1, unsigned __int8 *a2, unsigned int a3, long long *a4, _DWORD *a5, float a6, float a7)
{
  double InterSystemHwBiasM = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(a1[541], a2, 0, 0);
  int v15 = BlueFin::GlPeGnssTime::Gnss2TimeSystem(BlueFin::GlSvId::s_aucSvId2gnss[*a2]);
  if (a7 >= 0.0 && v15 != -1)
  {
    double SystemConversionS = BlueFin::GlPeTimeManager::GetSystemConversionS(a1[536], v15);
    double v19 = SystemConversionS - BlueFin::GlPeTimeManager::GetSystemConversionS(a1[536], 0);
    double v20 = v19 / 0.001;
    if (v19 / 0.001 <= 0.0)
    {
      double v21 = 0.0;
      if (v19 / 0.001 < 0.0) {
        double v21 = ceil(v20 + -0.5);
      }
    }
    else
    {
      double v21 = floor(v20 + 0.5);
    }
    double v22 = (v19 + v21 * -0.001) * 299792458.0;
    double AtmosDelay = BlueFin::GlPeComputeZRH::GetAtmosDelay(a1, a2, a3, a4, a6, a7, v18, 0, 0, a5);
    return AtmosDelay
         + v22
         + InterSystemHwBiasM
         - (*(double (**)(void *, unsigned __int8 *, void))(*a1 + 88))(a1, a2, 0);
  }
  return InterSystemHwBiasM;
}

double BlueFin::GlPeTimeManager::GetSystemConversionS(uint64_t a1, int a2)
{
  double v4 = *(double *)(BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeGnssTime *)(a1 + 2608)) + 8 * a2);
  int v6 = *(_DWORD *)(a1 + 2616);
  if (a2 == 1 || v6 != 1)
  {
    double result = -v4;
    if (a2 == 1 && v6 != 1)
    {
      LOBYTE(v5) = *(unsigned char *)(a1 + 4872);
      double v5 = 10800.0 - (double)*(unint64_t *)&v5;
      double result = result - v5;
    }
    if (a2 != 2 && v6 == 2)
    {
      LOBYTE(v5) = *(unsigned char *)(a1 + 4872);
      double result = result - (double)*(unint64_t *)&v5;
      goto LABEL_16;
    }
  }
  else
  {
    LOBYTE(v5) = *(unsigned char *)(a1 + 4872);
    double v5 = 10800.0 - (double)*(unint64_t *)&v5;
    double result = v5 - v4;
  }
  if (a2 == 2 && v6 != 2)
  {
    LOBYTE(v5) = *(unsigned char *)(a1 + 4872);
    double result = result + (double)*(unint64_t *)&v5;
  }
  if (a2 != 4 && v6 == 4) {
    return result + -14.0;
  }
LABEL_16:
  if (v6 != 4 && a2 == 4) {
    return result + 14.0;
  }
  return result;
}

uint64_t BlueFin::GlPeGnssTime::GetConversionTable(BlueFin::GlPeGnssTime *this)
{
  uint64_t result = BlueFin::GlPeGnssTime::m_potConversionTable;
  if (!BlueFin::GlPeGnssTime::m_potConversionTable)
  {
    DeviceFaultNotify("glpe_timemgr.h", 188, "GetConversionTable", (char)"m_potConversionTable != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.h", 188, "m_potConversionTable != nullptr");
  }
  return result;
}

uint64_t BlueFin::GlPeGnssTime::Gnss2TimeSystem(unsigned int a1)
{
  if (a1 >= 7)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 313, "Gnss2TimeSystem", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 313, "0");
  }
  return dword_263BBE3F0[a1];
}

float BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 168))
  {
    if (a3) {
      goto LABEL_3;
    }
    goto LABEL_15;
  }
  int v9 = *(_DWORD *)(*(void *)(a1 + 144) + 2616);
  if (v9 == 4)
  {
    uint64_t v11 = (int *)(a1 + 36);
  }
  else
  {
    int v10 = 0;
    if (v9 != 1) {
      goto LABEL_14;
    }
    uint64_t v11 = (int *)(a1 + 24);
  }
  int v10 = *v11;
LABEL_14:
  *(_DWORD *)(a1 + 172) = v10;
  *(unsigned char *)(a1 + 168) = 1;
  if (a3)
  {
LABEL_3:
    int v4 = *((_DWORD *)a2 + 1);
    uint64_t v5 = *a2;
    uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
    if (a4 && v4 == 2)
    {
      float v7 = *(float *)(a1 + 4 * BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v6 + 14] + 12);
      float v8 = *(double *)(a1 + 128);
    }
    else
    {
      float v7 = *(float *)(a1 + 4 * BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v4 - v4 + v6] + 12);
      float v8 = 0.0;
      if ((v5 - 66) >= 0xFFFFFFF2) {
        float v8 = *(float *)(a1 + 4 * v5 - 136);
      }
    }
    return v7 + v8;
  }
LABEL_15:
  uint64_t v13 = *a2;
  float v14 = 0.0;
  if ((v13 - 66) >= 0xFFFFFFF2) {
    float v14 = *(float *)(a1 + 4 * v13 - 136);
  }
  return (float)(*(float *)(a1
                          + 4
                          * BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                                                   - *((int *)a2 + 1)
                                                                                   + BlueFin::GlSvId::s_aucSvId2gnss[*a2]]
                          + 12)
               + v14)
       - *(float *)(a1 + 172);
}

double BlueFin::GlPeComputeZRH::GetSatHwBiasM(BlueFin::GlPeGnssHwBiasMgr **this, const BlueFin::GlSignalId *a2, int a3)
{
  return BlueFin::GlPeGnssHwBiasMgr::GetSatHwBiasM(this[541], a2, a3);
}

float BlueFin::GlPeGnssHwBiasMgr::GetSatHwBiasM(BlueFin::GlPeGnssHwBiasMgr *this, const BlueFin::GlSignalId *a2, int a3)
{
  int v6 = *(_DWORD *)(*((void *)this + 20) + 120012);
  if (((unint64_t)*(unsigned int *)(*((void *)this + 310) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)))
  {
    float FullSatHwBiasM = *((float *)this + *((unsigned __int16 *)a2 + 4) + 44);
    if (!a3) {
      return FullSatHwBiasM;
    }
  }
  else
  {
    float FullSatHwBiasM = BlueFin::GlPeGnssHwBiasMgr::GetFullSatHwBiasM(this, a2);
    int v8 = *((__int16 *)a2 + 4);
    *((float *)this + (unsigned __int16)v8 + 44) = FullSatHwBiasM;
    *(_DWORD *)(*((void *)this + 310) + 4 * (v8 >> 5)) |= 1 << v8;
    if (!a3) {
      return FullSatHwBiasM;
    }
  }
  if (v6 != 1)
  {
    float FullSatHwBiasM = FullSatHwBiasM + BlueFin::GlPeGnssHwBiasMgr::GetForceIChannelIscHwBiasM(this, a2);
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                                - *((int *)a2 + 1)
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]] == 2)
    {
      float HardcodedIsc = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc((BlueFin::GlPeTimeManager **)this, a2, 0);
      int v10 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2];
      uint64_t v11 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)this + 20) + 119744);
      int v15 = 7;
      v16[0] = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss(v11, (unsigned __int8 *)a2, (uint64_t)&v15);
      Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 20) + 384), v10);
      float v14 = 0.0;
      if (Mgr
        && (*(unsigned int (**)(void *, unsigned char *, uint64_t, float *))(*Mgr + 48))(Mgr, v16, 4, &v14))
      {
        float HardcodedIsc = v14;
      }
      return FullSatHwBiasM - HardcodedIsc;
    }
  }
  return FullSatHwBiasM;
}

double BlueFin::GlPeComputeZRH::GetAtmosDelay(void *a1, unsigned __int8 *a2, unsigned int a3, long long *a4, float a5, float a6, uint64_t a7, char a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v44 = 0;
  int v43 = 0;
  uint64_t v41 = 0;
  __int16 v42 = 0;
  uint64_t v18 = (float *)(*(uint64_t (**)(void *))(*a1 + 112))(a1);
  if (!v18)
  {
    double v19 = (double)(int)a3;
    if (a3 <= 0xFF9222FE) {
      double v19 = (double)a3;
    }
    uint64_t v18 = (float *)&v41;
    BlueFin::GlPeComputeZRH::CalcIonoDelay((uint64_t)a1, a4, (uint64_t)&v41, v19, a5, a6);
    BlueFin::GlPeUnbTropoModel::getTropoDelayInMeters((BlueFin::GlPeUnbTropoModel *)((char *)a1 + 4348), a6);
    int v43 = v20;
    HIBYTE(v42) = 1;
  }
  if (*(_DWORD *)v18) {
    float v21 = (float)(v18[5] * (float)(a3 - *(_DWORD *)v18)) * 0.001;
  }
  else {
    float v21 = 0.0;
  }
  int v22 = *((_DWORD *)v18 + 1);
  double v23 = 0.0;
  double v24 = 0.0;
  if (v22) {
    double v24 = (float)(v21 + v18[4]);
  }
  *a10 = v22;
  if ((a8 & 1) == 0)
  {
    uint64_t v25 = *a2;
    uint64_t v26 = BlueFin::GlSvId::s_aucSvId2gnss[v25];
    double v27 = 1.0;
    if (v26 == 2) {
      double v27 = BlueFin::GlPeComputeZRH::m_dGlnsIonoFactor[(char)(v25 - 59) + 7];
    }
    uint64_t v28 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + v26] - 1;
    if v28 <= 0xB && ((0x8BBu >> v28)) {
      double v27 = dbl_263BBA308[v28];
    }
    double v24 = v24 * v27;
    double v23 = v24 + 0.0;
  }
  if (*((unsigned char *)v18 + 9))
  {
    double v29 = v18[3];
    double v30 = v29;
  }
  else
  {
    double v30 = 0.0;
    double v29 = -0.0;
  }
  uint64_t v31 = a1[2];
  if (v31)
  {
    unsigned __int16 v32 = *((_WORD *)a2 + 4);
    uint64_t v33 = v31 + 56 * v32;
    int v34 = *(_DWORD *)(v33 + 12);
    double v35 = *(double *)(v33 + 24);
    double v36 = *(double *)(v33 + 40);
    int v37 = *((_DWORD *)a2 + 1);
    if (v34)
    {
      double v38 = (double)(a3 - v34) * 0.001;
      if (v38 > 0.0 && v38 < 60.0)
      {
        double v35 = (v30 - *(double *)(v33 + 16)) / v38;
        double v36 = (v24 - *(double *)(v33 + 32)) / v38;
      }
    }
    *(unsigned char *)uint64_t v33 = *a2;
    *(_DWORD *)(v33 + 4) = v37;
    *(_WORD *)(v33 + 8) = v32;
    *(_DWORD *)(v33 + 12) = a3;
    *(double *)(v33 + 16) = v30;
    *(double *)(v33 + 24) = v35;
    *(double *)(v33 + 32) = v24;
    *(double *)(v33 + 40) = v36;
    *(unsigned char *)(v33 + 48) = v22;
  }
  return v23 + v29;
}

uint64_t BlueFin::GlPeComputeZRH::GetAtmosDelayCacheSlot(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 1568);
  if (!*(unsigned char *)(a1 + 1568)) {
    return 0;
  }
  int v3 = 0;
  for (uint64_t result = a1 + 1572; *(unsigned __int8 *)(result + 8) != *a2; result += 24)
  {
    if (++v3 >= v2) {
      return 0;
    }
  }
  return result;
}

float BlueFin::GlPeUnbTropoModel::getTropoDelayInMeters(BlueFin::GlPeUnbTropoModel *this, float a2)
{
  v5[0] = 0;
  v5[1] = 0;
  float v2 = a2 * 0.017453;
  BlueFin::GlPeUnbTropoModel::getDryAndWetDelayViaUNBabcMappingFunction(this, *((float *)this + 2), *((float *)this + 3), a2 * 0.017453, *(float *)this, *((float *)this + 1), (float *)v5, (float *)v5 + 1);
  float v3 = *(float *)v5;
  if (v2 <= 1.57079633 && v2 > 0.0) {
    sinf(v2);
  }
  return v3;
}

float BlueFin::GlPeUnbTropoModel::getDryAndWetDelayViaUNBabcMappingFunction(BlueFin::GlPeUnbTropoModel *this, float a2, float a3, float a4, float a5, float a6, float *a7, float *a8)
{
  float v14 = 1.0;
  if (a4 <= 1.5708)
  {
    float v14 = 0.0;
    if (a4 > 0.0) {
      float v14 = sinf(a4);
    }
  }
  float v15 = cosf(a5);
  float v16 = (float)((float)((float)((float)(a6 * -0.026855) * 0.001) + 1.1897) + (float)(v15 * 0.10664)) / 1000.0;
  *a7 = (float)((float)((float)(v16 / 1.0033) + 1.0)
              / (float)(v14 + (float)(v16 / (float)(v14 + (float)(0.0035716 / (float)(v14 + 0.082456))))))
      * a2;
  float v17 = (float)((float)((float)((float)(a6 * -0.035348) * 0.001) + 0.6112) + (float)(v15 * -0.01526)) / 1000.0;
  float result = (float)((float)((float)(v17 / 1.0017) + 1.0)
                 / (float)(v14 + (float)(v17 / (float)(v14 + (float)(0.0018576 / (float)(v14 + 0.062741))))))
         * a3;
  *a8 = result;
  return result;
}

uint64_t BlueFin::GlPeComputeZRH::CalcIonoDelay(uint64_t a1, long long *a2, uint64_t a3, double a4, float a5, float a6)
{
  double v19 = 0.0;
  int v18 = 0;
  uint64_t v12 = *(void *)(a1 + 4296);
  if ((*(unsigned char *)(v12 + 48509) & 2) != 0)
  {
    uint64_t v13 = *((void *)a2 + 2);
    long long v21 = *a2;
    uint64_t v22 = v13;
    if (BlueFin::GlPeIONXMgr::GetIonoDelayInMeter(v12 + 384, a4, (double *)&v21, &v19, &v20, a6 * 0.0174532925, a5 * 0.0174532925))
    {
      double v14 = v19;
      *(_DWORD *)(a3 + 4) = 9;
      *(float *)&double v14 = v14;
      *(_DWORD *)(a3 + 16) = LODWORD(v14);
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 4296);
    if (!v12)
    {
      DeviceFaultNotify("glpe_computezrh.cpp", 1875, "CalcIonoDelay", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_computezrh.cpp", 1875, "false");
    }
  }
  BlueFin::GlPeIonoMgr::GetIonoDelay(v12, (double *)a2, &v18, a4, a5, a6);
  uint64_t v15 = v18;
  *(float *)&double v16 = v16;
  *(_DWORD *)(a3 + 16) = LODWORD(v16);
  *(_DWORD *)(a3 + 4) = 1;
  if (v15 <= 5) {
    *(_DWORD *)(a3 + 4) = dword_263BBA368[v15];
  }
  return 0;
}

uint64_t BlueFin::GlPeIONXMgr::GetIonoDelayInMeter(uint64_t a1, unsigned int a2, double *a3, double *a4, void *a5, double a6, double a7)
{
  if (a6 < 0.0 || *(unsigned char *)(a1 + 25) == 0) {
    return 0;
  }
  float v12 = a6;
  float v13 = a7;
  BlueFin::GlPeIONXMgr::GetIppLla(a3, (uint64_t)v21, v12, v13, *(float *)(a1 + 72), *(float *)(a1 + 76));
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  float v20 = 0.0;
  int BestFitTec = BlueFin::GlPeIONXMgr::FindBestFitTec(a1, v21, a2, &v20);
  uint64_t v15 = 0;
  if (BestFitTec)
  {
    float v16 = v20;
    float v17 = *(float *)(a1 + 72) / (float)(*(float *)(a1 + 72) + *(float *)(a1 + 76));
    float v18 = cosf(v12);
    *a4 = (float)((float)(v16 * (float)(1.0 / sqrtf(1.0 - (float)((float)(v18 * v17) * (float)(v18 * v17))))) * 0.16237);
    *a5 = 0;
    uint64_t v15 = 1;
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x47);
  }
  return v15;
}

uint64_t BlueFin::GlPeIONXMgr::FindBestFitTec(uint64_t a1, double *a2, unsigned int a3, float *a4)
{
  BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(a1 + 8), a3, 1, (uint64_t)v25);
  double v23 = &off_270EBC600;
  uint64_t v24 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v25, (BlueFin::GlGpsTime *)&v23);
  unsigned int v7 = ((uint64_t (*)(void))v23[4])(&v23);
  uint64_t v9 = *(unsigned __int16 *)(a1 + 32);
  if (v9 > 4)
  {
    DeviceFaultNotify("glpe_ionxmgr.cpp", 484, "FindBestFitTec", (char)"m_stIONXTecOpt.usNumTecSets <= GL_MAX_IONEX_SETS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 484, "m_stIONXTecOpt.usNumTecSets <= GL_MAX_IONEX_SETS");
  }
  if (!*(_WORD *)(a1 + 32)) {
    return 0;
  }
  uint64_t v10 = 0;
  LODWORD(v8) = v24;
  float v11 = (double)v8 * 2.32830644e-10 + (double)v7;
  unsigned int v12 = v11;
  unsigned int v13 = *(_DWORD *)(a1 + 28);
  double v14 = *(_DWORD **)(a1 + 46176);
  for (uint64_t i = v14; ; i += 2880)
  {
    unsigned int v16 = *i - v12;
    if (*i < v12) {
      goto LABEL_8;
    }
    if (*i == v12) {
      break;
    }
    unsigned __int16 v17 = v10 - 1;
    if ((unsigned __int16)(v10 - 1) <= 2u && v16 < v13) {
      goto LABEL_12;
    }
LABEL_8:
    if (v9 == ++v10) {
      return 0;
    }
  }
  unsigned int v16 = v13 >> 1;
  unsigned __int16 v17 = v10;
LABEL_12:
  uint64_t result = 0;
  if (v17 != 5 && (unsigned __int16)v10 != 5)
  {
    uint64_t v22 = 0;
    double v19 = *a2;
    double v20 = a2[1];
    int v21 = BlueFin::GlPeIONXMgr::InterpolTecs((float *)a1, v14[2880 * v17], *(void *)&v14[2880 * v17 + 2874], (float *)&v22 + 1, *a2, v20, v11);
    uint64_t result = 0;
    if (v21)
    {
      uint64_t result = BlueFin::GlPeIONXMgr::InterpolTecs((float *)a1, v14[2880 * (unsigned __int16)v10], *(void *)&v14[2880 * (unsigned __int16)v10 + 2874], (float *)&v22, v19, v20, v11);
      if (result)
      {
        *a4 = (float)((float)(1.0 - (float)((float)v16 / (float)v13)) * *(float *)&v22)
            + (float)(*((float *)&v22 + 1) * (float)((float)v16 / (float)v13));
        return 1;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeIONXMgr::InterpolTecs(float *a1, unsigned int a2, uint64_t a3, float *a4, double a5, double a6, float a7)
{
  float v7 = a1[11];
  float v8 = a1[13];
  float v9 = a1[14];
  float v10 = a1[16];
  int v11 = (int)(float)((float)(a1[15] - v9) / v10);
  float v12 = a6;
  float v13 = (float)((float)(a7 - (float)a2) / 240.0) + v12;
  float v14 = a5;
  float v15 = (float)(v14 - v7) / v8;
  float v16 = (float)(v13 - v9) / v10;
  int v17 = (int)v15;
  int v18 = (int)v16;
  int v19 = v11 - 1;
  if ((int)v16 + 1 < v11) {
    int v19 = v18 + 1;
  }
  uint64_t v20 = 0;
  if ((v17 & 0x80000000) == 0
    && (v18 & 0x80000000) == 0
    && (int)(float)((float)(a1[12] - v7) / v8) - 1 > v17
    && v11 > v18)
  {
    uint64_t v21 = a3 + 200 * (v17 + 1) + 36;
    float v22 = v15 - (float)v17;
    float v23 = v16 - (float)v18;
    *a4 = a1[17]
        * (float)((float)((float)((float)((float)(v22 * (float)(1.0 - v23))
                                        * (float)*(__int16 *)(v21 + 2 * v18))
                                + (float)((float)((float)(1.0 - v22) * (float)(1.0 - v23))
                                        * (float)*(__int16 *)(a3
                                                            + 200 * v17
                                                            + 36
                                                            + 2 * v18)))
                        + (float)((float)((float)(1.0 - v22) * v23)
                                * (float)*(__int16 *)(a3 + 200 * v17 + 36 + 2 * v19)))
                + (float)((float)(v22 * v23) * (float)*(__int16 *)(v21 + 2 * v19)));
    return 1;
  }
  return v20;
}

unsigned int *BlueFin::GlPeTimeManager::GetTime@<X0>(unsigned int *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 && this[1201] == a2)
  {
    *(void *)a4 = *((void *)this + 601);
    *(_DWORD *)(a4 + 8) = this[1204];
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(this + 1206);
  }
  else
  {
    double v4 = (double)(int)a2;
    if (a2 <= 0xFF9222FE) {
      double v4 = (double)a2;
    }
    return BlueFin::GlPeTimeManager::GetTime(this, v4, a3, a4);
  }
  return this;
}

double BlueFin::GlPeIONXMgr::GetIppLla@<D0>(double *a1@<X1>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>)
{
  *(void *)(a2 + 16) = 0;
  float v11 = 1.5708 - a3;
  float v12 = cosf(a3);
  float v13 = asinf((float)(v12 * a5) / (float)(a5 + a6));
  __float2 v14 = __sincosf_stret(v11 - v13);
  float v15 = *a1;
  __float2 v16 = __sincosf_stret(v15 * 0.017453);
  __float2 v17 = __sincosf_stret(a4);
  float v18 = asinf((float)(v17.__cosval * (float)(v14.__sinval * v16.__cosval)) + (float)(v16.__sinval * v14.__cosval))
      * 57.296;
  *(double *)a2 = v18;
  float v19 = a1[1];
  float v20 = cosf(v18 * 0.017453);
  double result = (float)(v19 + (float)(asinf((float)(v17.__sinval * v14.__sinval) / v20) * 57.296));
  *(double *)(a2 + 8) = result;
  return result;
}

void DeviceFaultNotify(char *__s, int a2, char *a3, char a4)
{
  std::string::basic_string[abi:ne180100]<0>(v19, __s);
  int v21 = a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  int v17 = 0;
  __int16 v18 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  char v16 = 0;
  uint64_t v14 = std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__emplace_back_slow_path<GnssHal::ExtensionsFire::RecoveryPoint&>(&v13, (long long *)v19);
  FireDeviceLog::DeviceLogBase(2, "DeviceFaultNotify,msg,%s,file,%s,line,%d,func,%s", v7, v8, v9, v10, v11, v12, a4);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void, uint64_t *))(**(void **)(FireResourceMgr::fInstance + 40) + 120))(*(void *)(FireResourceMgr::fInstance + 40), &v13);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 16) + 48))(*(void *)(FireResourceMgr::fInstance + 16));
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 24) + 56))(*(void *)(FireResourceMgr::fInstance + 24));
  usleep(0xC350u);
  uint64_t v24 = (void **)&v13;
  std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__destroy_vector::operator()[abi:ne180100](&v24);
  if (v23 < 0) {
    operator delete(__p);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_2638EA794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float BlueFin::GlPeGnssHwBiasMgr::GetFullSatHwBiasM(BlueFin::GlPeGnssHwBiasMgr *this, const BlueFin::GlSignalId *a2)
{
  double Tgd = BlueFin::GlPeGnssHwBiasMgr::GetTgd((uint64_t)this, (unsigned __int8 *)a2);
  uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2];
  float HardcodedIsc = 0.0;
  double v7 = Tgd * 299792458.0;
  uint64_t v8 = *((void *)this + 20);
  int v9 = *(_DWORD *)(v8 + 120012);
  int v10 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + v5];
  switch(BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2])
  {
    case 0:
    case 3:
      int v25 = 7;
      v26[0] = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(v8 + 119744), (unsigned __int8 *)a2, (uint64_t)&v25);
      Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 20) + 384), v5);
      uint64_t v12 = Mgr;
      float v24 = 0.0;
      if (Mgr)
      {
        if ((*(unsigned int (**)(void *, unsigned char *, uint64_t, float *))(*Mgr + 48))(Mgr, v26, 1, &v24))
        {
          float v13 = v7 - v24;
          if (fabsf(v13) <= 1.0) {
            double v7 = v24;
          }
        }
      }
      if (v10 <= 1)
      {
        if (v10)
        {
          if (v10 == 1)
          {
            double v14 = -1.6469;
            return v7 * v14;
          }
          return HardcodedIsc;
        }
        if (v9 != 1)
        {
          float HardcodedIsc = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc((BlueFin::GlPeTimeManager **)this, a2, 0);
          float v23 = 0.0;
          if (v12)
          {
            int v18 = (*(uint64_t (**)(void *, unsigned char *, uint64_t, float *))(*v12 + 48))(v12, v26, 2, &v23);
            goto LABEL_30;
          }
        }
        return HardcodedIsc - v7;
      }
      if (v10 == 2)
      {
        if (v9 != 1)
        {
          float HardcodedIsc = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc((BlueFin::GlPeTimeManager **)this, a2, 0);
          float v23 = 0.0;
          if (v12)
          {
            int v18 = (*(uint64_t (**)(void *, unsigned char *, uint64_t, float *))(*v12 + 48))(v12, v26, 4, &v23);
LABEL_30:
            if (v18) {
              float HardcodedIsc = v23;
            }
          }
        }
        return HardcodedIsc - v7;
      }
      if (v10 == 14) {
        goto LABEL_22;
      }
      return HardcodedIsc;
    case 2:
      goto LABEL_22;
    case 4:
      int v25 = 7;
      v26[0] = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(v8 + 119744), (unsigned __int8 *)a2, (uint64_t)&v25);
      uint64_t v16 = *(void *)(*((void *)this + 20) + 7384);
      switch(v10)
      {
        case 13:
          float v24 = 0.0;
          v15.n128_u64[0] = 0;
          if (v9 != 1 && v16 != 0)
          {
            (*(void (**)(uint64_t, unsigned char *, uint64_t, float *, __n128))(*(void *)v16 + 48))(v16, v26, 5, &v24, v15);
            v15.n128_f32[0] = v24;
          }
          return -v15.n128_f32[0];
        case 8:
          if (v9 != 1)
          {
            uint64_t v21 = *(unsigned __int8 *)a2;
            if (BlueFin::GlSvId::s_aucSvId2gnss[v21] == 4 && *((_DWORD *)a2 + 1) == 2) {
              float HardcodedIsc = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedTgd(BlueFin::GlSignalId const&,BOOL)const::afTgdB2apInMeters[v21 - 76];
            }
            float v24 = 0.0;
            if (v16
              && (*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, float *))(*(void *)v16 + 48))(v16, v26, 7, &v24))
            {
              float HardcodedIsc = v24;
            }
          }
          return -HardcodedIsc;
        case 6:
          goto LABEL_22;
      }
      return HardcodedIsc;
    case 5:
      switch(v10)
      {
        case 4:
          double v14 = -1.7032;
          return v7 * v14;
        case 5:
          double v14 = -1.7933;
          return v7 * v14;
        case 11:
LABEL_22:
          v15.n128_f32[0] = v7;
          return -v15.n128_f32[0];
      }
      return HardcodedIsc;
    case 6:
      double v14 = -4.48702911;
      return v7 * v14;
    default:
      return HardcodedIsc;
  }
}

double BlueFin::GlPeGnssHwBiasMgr::GetTgd(uint64_t a1, unsigned __int8 *a2)
{
  float v3 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 160) + 119744);
  int v9 = 7;
  unsigned __int8 v10 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v3, a2, (uint64_t)&v9);
  double v4 = 0.0;
  if (v10 - 1 <= 0x3E)
  {
    unsigned __int8 v8 = v10;
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(a1 + 160) + 384), v9);
    if (Mgr)
    {
      uint64_t v6 = (*(uint64_t (**)(void *, unsigned __int8 *, uint64_t))(*Mgr + 112))(Mgr, &v8, 1);
      if (v6) {
        return (*(double (**)(uint64_t))(*(void *)v6 + 104))(v6);
      }
    }
  }
  return v4;
}

double BlueFin::GlPeEphemeris::GetTgd(BlueFin::GlPeEphemeris *this)
{
  return BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 6);
}

uint64_t BlueFin::GlPeGpsEphMgr::GetLtoAltNavData(uint64_t a1, unsigned __int8 *a2, int a3, float *a4)
{
  int v4 = *a2;
  if ((v4 - 33) < 0xE0u) {
    return 0;
  }
  unsigned int v6 = v4 - 1;
  if (a3 != 2) {
    return BlueFin::GlPeGpsQzssAltNavData::GetLtoAltNavData(a1 + 36 * v6 + 5624, v4, a3, a4);
  }
  if (v4 != (*(unsigned char *)(a1 + 6 * v6 + 6776) + 1)) {
    return 0;
  }
  float v7 = (double)*(__int16 *)(a1 + 6 * v6 + 6778) * 2.91038305e-11 * 299792458.0;
  *a4 = v7;
  if (v7 < 0.0) {
    float v7 = -v7;
  }
  if (v7 > 29.9792458) {
    *a4 = 0.0;
  }
  return 1;
}

uint64_t BlueFin::GlPeGpsQzssAltNavData::GetLtoAltNavData(uint64_t a1, unsigned __int8 a2, int a3, float *a4)
{
  if ((*(unsigned char *)a1 + 1) == a2)
  {
    switch(a3)
    {
      case 1:
        int v4 = *(__int16 *)(a1 + 22);
        goto LABEL_7;
      case 3:
        if (*(unsigned char *)(a1 + 26))
        {
          float v5 = (double)*(__int16 *)(a1 + 28) * 2.91038305e-11 * 299792458.0;
          float v6 = -v5;
          if (v5 >= 0.0) {
            float v6 = (double)*(__int16 *)(a1 + 28) * 2.91038305e-11 * 299792458.0;
          }
          if (v6 > 29.9792458) {
            float v5 = 0.0;
          }
          goto LABEL_13;
        }
        break;
      case 4:
        int v4 = *(__int16 *)(a1 + 24);
LABEL_7:
        float v5 = (double)v4 * 2.91038305e-11 * 299792458.0;
LABEL_13:
        *a4 = v5;
        return 1;
    }
  }
  return 0;
}

double BlueFin::GlPeSatAidInfo::Add(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = (unsigned __int8 *)(a1 + 9120);
  int v5 = *a2;
  BlueFin::GlArray::EnsureValidHandle(a1 + 9120, v5);
  int v6 = *(unsigned __int8 *)(*(void *)(a1 + 9136) + v5 - v4[36]);
  float v7 = (char *)BlueFin::GlArray::Add((BlueFin::GlArray *)v4, *a2);
  if (v7)
  {
    if (v6 == 255)
    {
      char *v7 = 0;
      *((_DWORD *)v7 + 1) = 7;
      v7[8] = 0;
      *(void *)&double result = 4;
      *(_OWORD *)(v7 + 12) = xmmword_263BA9ED0;
      *((void *)v7 + 4) = 0;
      *((void *)v7 + 5) = 0;
      *((void *)v7 + 10) = 0;
      *((void *)v7 + 11) = 0xBF80000000000000;
      *((void *)v7 + 8) = 0;
      *((void *)v7 + 9) = 0;
      *((void *)v7 + 6) = 0;
      *((void *)v7 + 7) = 0;
    }
  }
  return result;
}

void *BlueFin::GlArray::Add(BlueFin::GlArray *this, int a2)
{
  char v2 = a2;
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this, a2);
  unsigned __int8 v4 = v2 - *((unsigned char *)this + 36);
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = v4;
  unsigned int v7 = *(unsigned __int8 *)(v5 + v4);
  if (v7 == 255)
  {
    uint64_t v9 = *((unsigned __int8 *)this + 39);
    if (v9 == 255)
    {
      return 0;
    }
    else
    {
      if (v9 >= *((unsigned __int8 *)this + 38))
      {
        DeviceFaultNotify("glutl_array.cpp", 88, "Add", (char)"m_ucStackTop < m_ucNumSlots");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_array.cpp", 88, "m_ucStackTop < m_ucNumSlots");
      }
      *(unsigned char *)(v5 + v4) = *(unsigned char *)(*((void *)this + 3) + v9);
      *(unsigned char *)(*((void *)this + 3) + (*((unsigned char *)this + 39))--) = v4;
      BlueFin::GlArray::EnsureValidSlot((uint64_t)this, *(unsigned __int8 *)(*((void *)this + 2) + v4));
      size_t v10 = *((unsigned int *)this + 8);
      unsigned __int8 v8 = (void *)(*((void *)this + 1) + v10 * *(unsigned __int8 *)(*((void *)this + 2) + v6));
      bzero(v8, v10);
    }
  }
  else
  {
    BlueFin::GlArray::EnsureValidSlot((uint64_t)this, v7);
    return (void *)(*((void *)this + 1)
                  + *((_DWORD *)this + 8) * *(unsigned __int8 *)(*((void *)this + 2) + v6));
  }
  return v8;
}

void *BlueFin::GlPeSatPos::SatMarkedUnhealthy(uint64_t a1, unsigned __int8 *a2)
{
  float v3 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 17720) + 119744);
  int v6 = 7;
  unsigned __int8 v7 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v3, a2, (uint64_t)&v6);
  double result = 0;
  unint64_t v5 = v7;
  if (v7 - 1 <= 0x3E)
  {
    double result = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(a1 + 17720) + 384), v6);
    if (result) {
      return (void *)((*(unsigned int *)(*(void *)(*(uint64_t (**)(void *))(*result + 144))(result)
    }
                                         + ((v5 >> 3) & 0x1C)) >> (v5 & 0x1F)) & 1);
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::GetUnhealthy(BlueFin::GlPeEphemerisMgr *this)
{
  return (uint64_t)this + 360;
}

double BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlPeTimeManager **this, const BlueFin::GlSignalId *a2, int a3)
{
  uint64_t v3 = *(unsigned __int8 *)a2;
  double v4 = 0.0;
  uint64_t v5 = *((int *)a2 + 1);
  switch(BlueFin::GlSvId::s_aucSvId2gnss[v3])
  {
    case 0:
      if (v5 == 2)
      {
        uint64_t v8 = v3 - 1;
        if (a3) {
          uint64_t v9 = (float *)&BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlSignalId const&,BOOL)const::afIscL5IInMeters;
        }
        else {
          uint64_t v9 = (float *)&BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlSignalId const&,BOOL)const::afIscL5QInMeters;
        }
        goto LABEL_25;
      }
      if (v5) {
        goto LABEL_17;
      }
      BlueFin::GlPeTimeManager::GetTime(this[18], 1, v13);
      v14[0] = &off_270EBC600;
      v14[1] = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v13, (BlueFin::GlGpsTime *)v14);
      if ((*(unsigned int (**)(void *))(v14[0] + 32))(v14) / 0x93A80 >= 0x7BD)
      {
        float v6 = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlSignalId const&,BOOL)const::afIscL1CAInMeters[v3 - 1];
        goto LABEL_26;
      }
      break;
    case 3:
      if (v5 == 2)
      {
        uint64_t v8 = v3 - 66;
        if (a3) {
          uint64_t v9 = (float *)&BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlSignalId const&,BOOL)const::afIscQzssL5IInMeters;
        }
        else {
          uint64_t v9 = (float *)&BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlSignalId const&,BOOL)const::afIscQzssL5QInMeters;
        }
LABEL_25:
        float v6 = v9[v8];
        goto LABEL_26;
      }
LABEL_17:
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v5
                                                                  - v5
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[v3]] == 1)
      {
        double Tgd = BlueFin::GlPeGnssHwBiasMgr::GetTgd((uint64_t)this, (unsigned __int8 *)a2);
        double v11 = -0.6469;
        goto LABEL_22;
      }
      break;
    case 4:
      if (v5 == 2 && a3 != 0)
      {
        float v6 = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc(BlueFin::GlSignalId const&,BOOL)const::afIscBdsB2adIInMeters[v3 - 76];
LABEL_26:
        double v4 = v6;
      }
      break;
    case 5:
      if ((int)v5 >= 1)
      {
        double Tgd = BlueFin::GlPeGnssHwBiasMgr::GetTgd((uint64_t)this, (unsigned __int8 *)a2);
        if (v5 == 1) {
          double v11 = -0.7032;
        }
        else {
          double v11 = -0.7933;
        }
LABEL_22:
        double v4 = Tgd * v11 * 299792458.0;
      }
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t BlueFin::GlPeBdsEphMgr::GetLtoAltNavData(uint64_t a1, unsigned __int8 *a2, int a3, float *a4)
{
  int v4 = *a2;
  if ((v4 - 64) < 0xC1u) {
    return 0;
  }
  if (BlueFin::GlPeBdsAltNavData::GetLtoAltNavData(a1 + 20 * (v4 - 1) + 16176, *a2, a3, a4)) {
    return 1;
  }

  return BlueFin::GlPeBdsAltNavData::GetLtoAltNavData(a1 + 20 * (v4 - 1) + 17436, v4, a3, a4);
}

uint64_t BlueFin::GlPeBdsAltNavData::GetLtoAltNavData(uint64_t a1, unsigned __int8 a2, int a3, float *a4)
{
  if ((*(unsigned char *)a1 + 1) != a2) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 == 2)
  {
    if (a3 == 5) {
      goto LABEL_10;
    }
    if (a3 == 6) {
      goto LABEL_6;
    }
    return 0;
  }
  if (v4 != 1) {
    return 0;
  }
  if (a3 == 7)
  {
LABEL_10:
    uint64_t v5 = (__int16 *)(a1 + 10);
    goto LABEL_11;
  }
  if (a3 != 8) {
    return 0;
  }
LABEL_6:
  uint64_t v5 = (__int16 *)(a1 + 12);
LABEL_11:
  float v7 = (double)*v5 * 5.82076609e-11 * 299792458.0;
  *a4 = v7;
  return 1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    float v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    float v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t BlueFin::GlPeMiniEphMgr::remove(BlueFin::GlPeMiniEphMgr *this, int a2)
{
  unint64_t v2 = *((unsigned __int8 *)this + 192 * a2 + 32);
  if (v2 >= 0xBD)
  {
    DeviceFaultNotify("glpe_satpos.cpp", 1008, "remove", (char)"ucSvId <= MAX_SVID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 1008, "ucSvId <= MAX_SVID");
  }
  *((unsigned char *)this + v2 + 17504) = 91;
  uint64_t v3 = (char *)this + 8;

  return BlueFin::GlSetBase::Remove((uint64_t)v3, (__int16)a2);
}

uint64_t BlueFin::GlPeQzssEphMgr::GetLtoAltNavData(uint64_t a1, unsigned __int8 *a2, int a3, float *a4)
{
  int v4 = *a2;
  if ((v4 - 11) < 0xF6u) {
    return 0;
  }
  unsigned int v6 = v4 - 1;
  if (a3 != 2) {
    return BlueFin::GlPeGpsQzssAltNavData::GetLtoAltNavData(a1 + 36 * v6 + 2072, v4, a3, a4);
  }
  if (v4 != (*(unsigned char *)(a1 + 6 * v6 + 2432) + 1)) {
    return 0;
  }
  float v7 = (double)*(__int16 *)(a1 + 6 * v6 + 2434) * 2.91038305e-11 * 299792458.0;
  *a4 = v7;
  if (v7 < 0.0) {
    float v7 = -v7;
  }
  if (v7 > 29.9792458) {
    *a4 = 0.0;
  }
  return 1;
}

double BlueFin::GlPeGloEphemeris::GetTgd(BlueFin::GlPeGloEphemeris *this)
{
  float v2 = (float)(*(char (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 208))(this, 4);
  float v3 = (float)(v2 * 562500.0) + 1602000000.0;
  float v4 = (float)((float)(v2 * 437500.0) + 1246000000.0) * (float)((float)(v2 * 437500.0) + 1246000000.0);
  return BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 28) * (float)(v4 / (float)(v4 - (float)(v3 * v3)));
}

void BlueFin::GlPeIonoMgr::GetIonoDelay(uint64_t a1, double *a2, _DWORD *a3, double a4, float a5, float a6)
{
  int v10 = *(_DWORD *)(a1 + 48508);
  if ((v10 & 8) != 0 && *(_DWORD *)(a1 + 120))
  {
    uint64_t v11 = a1 + 64;
  }
  else
  {
    uint64_t v11 = a1;
    if ((v10 & 0x40) != 0)
    {
      if (*(_DWORD *)(a1 + 312)) {
        uint64_t v11 = a1 + 256;
      }
      else {
        uint64_t v11 = a1;
      }
    }
  }
  float32x4_t v12 = vcvtq_f32_s32(*(int32x4_t *)(v11 + 40));
  v18[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 8)), *(float64x2_t *)(v11 + 24));
  v18[1] = v12;
  float v13 = *(unsigned int **)(a1 + 352);
  unsigned int v14 = BlueFin::GlPeTimeMgrUtil::DoubleToLms((BlueFin::GlPeTimeMgrUtil *)a1, a4);
  double v15 = (double)(int)v14;
  if (v14 <= 0xFF9222FE) {
    double v15 = (double)v14;
  }
  BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v13, 0, 0, (uint64_t)v17, v15);
  int v16 = *(_DWORD *)(v11 + 56);
  if (v17[3] != -1) {
    BlueFin::iono_delay((uint64_t)v17, a2, (float *)v18, v16 == 2, a5, a6);
  }
  *a3 = v16;
}

#error "2638EB7FC: call analysis failed (funcsize=54)"

unint64_t BlueFin::GlReqSm::OnRtiReceived(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  int v76 = a3;
  uint64_t v59 = 0;
  a57 = *MEMORY[0x263EF8340];
  a51 = &a30;
  do
  {
    uint64_t v60 = &a51[v59];
    double v61 = &a51[v59];
    *(void *)(v61 + 12) = 0;
    *(void *)uint64_t v60 = v61 + 12;
    v60[8] = 2;
    v59 += 24;
  }
  while (v59 != 168);
  for (unsigned int i = 0; i != 7; ++i)
    BlueFin::GlGnssSet::SetAll((uint64_t)&a30, i);
  unint64_t result = (unint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v82, (const BlueFin::GlGnssSet *)&a30);
  uint64_t v64 = a25;
  unsigned __int8 v65 = a26;
  if (a25 != 6 || a26 != 14)
  {
    uint64_t v67 = a2 + 8;
    uint64_t v68 = a2 + 72;
    long long v69 = (void *)(a1 + 54632);
    do
    {
      unsigned int v80 = v64;
      unsigned __int8 v81 = v65;
      if (!v65)
      {
        DeviceFaultNotify("glreqsm.cpp", 6453, "OnRtiReceived", (char)"*otCurGnss.otGnssId != INVALID_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glreqsm.cpp", 6453, "*otCurGnss.otGnssId != INVALID_GNSS_ID");
      }
      uint64_t v70 = 1 << (v65 - 1);
      uint64_t v71 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v64];
      if ((*(void *)(v67 + 8 * v71) & v70) == 0 || (*(void *)(v68 + 8 * v71) & v70) == 0) {
        goto LABEL_30;
      }
      BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 6288) + 119744), &v80, &v79);
      unint64_t v72 = v79;
      unsigned int v73 = (v79 - 1);
      if (v64 == 2)
      {
        if (v73 > 0xBB)
        {
          if (!v76) {
            goto LABEL_30;
          }
          int HardcodedFcn = BlueFin::GlPeGloFcnOsnMgr::GetHardcodedFcn((BlueFin::GlPeGloFcnOsnMgr *)v65);
          if (HardcodedFcn == -8) {
            goto LABEL_30;
          }
          if ((HardcodedFcn + 7) >= 0xE) {
            LOBYTE(v72) = 0;
          }
          else {
            LOBYTE(v72) = HardcodedFcn + 59;
          }
          unsigned __int8 v79 = v72;
          goto LABEL_29;
        }
        double v74 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 6288) + 119744);
        int v77 = 7;
        unsigned __int8 v78 = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss(v74, &v79, (uint64_t)&v77);
        if (v77 <= 6 && v78 - 1 < 0x3F && v78 != v65) {
          goto LABEL_30;
        }
      }
      else if (v73 > 0xBB)
      {
        goto LABEL_30;
      }
      if (!v76)
      {
        if ((*(unsigned int *)(*v69 + ((v72 >> 3) & 0x1C)) >> (v72 & 0x1F))) {
          BlueFin::GlSetBase::Remove(a1 + 54632, v72);
        }
        goto LABEL_30;
      }
LABEL_29:
      *(_DWORD *)(*v69 + 4 * (v72 >> 5)) |= 1 << v72;
LABEL_30:
      unint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&v82);
      uint64_t v64 = a25;
      unsigned __int8 v65 = a26;
    }
    while (a25 != 6 || a26 != 14);
  }
  return result;
}

uint64_t BlueFin::GlReqSm::UpdateGrids(BlueFin::GlReqSm *this)
{
  uint64_t result = BlueFin::GlSvIdArray::GetSvIdSet((BlueFin::GlSvIdArray *)(*((void *)this + 788) + 93072), (uint64_t)v9);
  unsigned __int8 v3 = *((unsigned char *)this + 4942);
  if (v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 618);
    do
    {
      __int16 v7 = *(_WORD *)(v6 + v4);
      unsigned __int8 v8 = v7;
      if ((*(unsigned char *)(v6 + v4 + 5) & 4) != 0
        && (((unint64_t)*(unsigned int *)(v9[0] + (((unint64_t)v7 >> 3) & 0x1C)) >> (v7 & 0x1F)) & 1) != 0)
      {
        uint64_t result = BlueFin::GlPeKF::GetGridConfig(*((void *)this + 788), &v8);
        uint64_t v6 = *((void *)this + 618);
        *(_DWORD *)(v6 + v4 + 4) |= result << 24;
        unsigned __int8 v3 = *((unsigned char *)this + 4942);
      }
      ++v5;
      v4 += 8;
    }
    while (v5 < v3);
  }
  return result;
}

uint64_t BlueFin::GlSvIdArray::GetSvIdSet@<X0>(BlueFin::GlSvIdArray *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  uint64_t v4 = (char *)this + 200;
  for (unsigned int i = 1; i != 189; ++i)
  {
    uint64_t result = BlueFin::GlArray::EnsureValidHandle((uint64_t)v4, i);
    if (*(unsigned __int8 *)(*((void *)this + 27) + i - *((unsigned __int8 *)this + 236)) != 255) {
      *(_DWORD *)(*(void *)a2 + 4 * (i >> 5)) |= 1 << i;
    }
  }
  return result;
}

uint64_t BlueFin::GlReqSm::initializeAiding(BlueFin::GlReqSm *this)
{
  float v2 = (char *)this + 54352;
  unsigned __int8 v3 = (_DWORD *)((char *)this + 53528);
  BlueFin::GlSvIdSet::operator~((const void **)(*((void *)this + 784) + 208), (uint64_t)&__src);
  unsigned __int8 v34 = v33;
  memcpy(v38, __src, 4 * v33);
  unsigned __int16 v36 = 0;
  unsigned __int8 v35 = 0;
  int v37 = v38[0];
  BlueFin::GlSetIterator::operator++(&v34);
  if (v35 != v34)
  {
    uint64_t v4 = *(void *)v2;
    uint64_t v5 = *((void *)v2 + 18);
    do
    {
      int v6 = 1 << v36;
      unint64_t v7 = ((unint64_t)v36 >> 3) & 0x1C;
      *(_DWORD *)(v4 + v7) |= 1 << v36;
      *(_DWORD *)(v5 + v7) |= v6;
      BlueFin::GlSetIterator::operator++(&v34);
    }
    while (v35 != v34);
  }
  for (unsigned int i = 33; i != 52; ++i)
  {
    *(_DWORD *)(*(void *)v2 + 4 * (i >> 5)) |= 1 << i;
    uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)this + 54400, (__int16)i);
  }
  uint64_t v10 = *((void *)this + 784);
  int v11 = *(unsigned __int8 *)(v10 + 26286);
  if (*(unsigned char *)(v10 + 26286)) {
    int v11 = *(_DWORD *)(v10 + 88) > 36;
  }
  int v12 = *(unsigned __int8 *)(v10 + 26290);
  if (!*(unsigned char *)(v10 + 26290))
  {
LABEL_14:
    if (!v11) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)v2;
  uint64_t v14 = *((void *)v2 + 18);
  for (unsigned int j = 52; j != 66; ++j)
  {
    unsigned int v16 = j >> 5;
    *(_DWORD *)(v13 + 4 * v16) |= 1 << j;
    *(_DWORD *)(v14 + 4 * v16) |= 1 << j;
  }
  if ((v11 & 1) == 0)
  {
    for (unsigned int k = 76; k != 139; ++k)
    {
      unsigned int v18 = k >> 5;
      *(_DWORD *)(v13 + 4 * v18) |= 1 << k;
      *(_DWORD *)(v14 + 4 * v18) |= 1 << k;
    }
    goto LABEL_14;
  }
LABEL_15:
  unsigned int v19 = 76;
  unsigned __int8 v34 = 76;
  do
  {
    uint64_t result = BlueFin::GlSettingsImpl::DoesSvSupportBand5(v10, &v34);
    if ((result & 1) == 0)
    {
      unsigned int v20 = v19 >> 5;
      *(_DWORD *)(*(void *)v2 + 4 * v20) |= 1 << v19;
      *(_DWORD *)(*((void *)v2 + 18) + 4 * v20) |= 1 << v19;
    }
    unsigned __int8 v34 = ++v19;
  }
  while (v19 != 139);
LABEL_19:
  uint64_t v21 = 0;
  float v22 = (char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
      + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
  do
  {
    if (v21 != 1)
    {
      unsigned int v23 = BlueFin::GlSvId::s_aucGnss2minSvId[v21];
      unsigned int v24 = BlueFin::GlSvId::s_aucGnss2maxSvId[v21];
      if (v23 <= v24)
      {
        do
        {
          if (v21 != 2 || !v12 && (v23 - 55) <= 0xFDu)
          {
            uint64_t v25 = *((void *)this + 453);
            uint64_t v26 = v25 + 24 * v21;
            unsigned int v29 = *(unsigned __int16 *)(v26 + 14);
            double v27 = (_WORD *)(v26 + 14);
            uint64_t v28 = v29;
            uint64_t result = *((unsigned __int8 *)v27 - 2);
            if (v29 < result)
            {
              uint64_t result = v22[v23];
              if (v22[v23])
              {
                uint64_t result = *((unsigned int *)v2 + 53);
                uint64_t v30 = *(void *)(v25 + 24 * v21 + 16);
                *double v27 = v28 + 1;
                uint64_t v31 = v30 + 8 * v28;
                *(_WORD *)uint64_t v31 = v23;
                *(_DWORD *)(v31 + 4) = result;
              }
            }
          }
          LOBYTE(v23) = v23 + 1;
        }
        while (v24 >= v23);
      }
    }
    ++v21;
  }
  while (v21 != 7);
  *unsigned __int8 v3 = 4;
  return result;
}

uint64_t BlueFin::GlPeSvHealthMgr::OnHeartBeat(BlueFin::GlPeSvHealthMgr *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void (**a32)(BlueFin::GlGpsTime *__hidden this),long long a33,long long a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void (***a51)(BlueFin::GlGpsTime *__hidden this),uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  a57 = *MEMORY[0x263EF8340];
  uint64_t v60 = (char *)this + 32;
  unsigned int v61 = *((_DWORD *)this + 573);
  if (a2 >= v61)
  {
    unsigned int v62 = (a2 - v61) / 0x3E8;
    unsigned int v63 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 573) = v61 + 1000 * v62;
    int v64 = v63 - v62;
    if (v63 < v62) {
      int v64 = 0;
    }
    *((_DWORD *)this + 102) = v64;
    if (v63 - 1 < v62)
    {
      uint64_t v65 = 0;
      a51 = &a32;
      do
      {
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a51[v65], (unsigned int *)&a51[v65 + 1] + 1, 2u, (const void **)(qword_26B434168 + v65 * 8));
        v65 += 3;
      }
      while (v65 != 21);
      bzero(*a51, ((4 * *((unsigned __int8 *)a51 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v92, (const BlueFin::GlGnssSet *)&a32);
      int v66 = 10801;
      while (a27 != 6 || a28 != 14)
      {
        LODWORD(v89) = a27;
        BYTE4(v89) = a28;
        if ((*(unsigned int (**)(char *, uint64_t **))(*(void *)v60 + 40))(v60, &v89) == 4)
        {
          int v68 = (*(uint64_t (**)(char *, uint64_t **))(*(void *)v60 + 56))(v60, &v89);
          if (v68)
          {
            if (v66 >= v68) {
              int v66 = v68;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t **, uint64_t))(*(void *)v60 + 32))(v60, &v89, 2);
          }
        }
        BlueFin::GlGnssSetIterator::operator++((uint64_t)&v92);
      }
      BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v92, (const BlueFin::GlGnssSet *)&a32);
      while (a27 != 6 || a28 != 14)
      {
        LODWORD(v89) = a27;
        BYTE4(v89) = a28;
        if ((*(unsigned int (**)(char *, uint64_t **))(*(void *)v60 + 40))(v60, &v89) == 4)
        {
          int v70 = (*(uint64_t (**)(char *, uint64_t **))(*(void *)v60 + 56))(v60, &v89);
          (*(void (**)(char *, uint64_t **, void))(*(void *)v60 + 48))(v60, &v89, (v70 - v66));
        }
        BlueFin::GlGnssSetIterator::operator++((uint64_t)&v92);
      }
      if (v66 < 10801) {
        *((_DWORD *)this + 102) = v66;
      }
    }
    if (!*((unsigned char *)this + 2306) && !*((unsigned char *)this + 2305))
    {
      LODWORD(v92) = 5;
      BYTE4(v92) = 14;
      (*(void (**)(char *, long long **, uint64_t))(*(void *)v60 + 32))(v60, &v92, 1);
      LODWORD(v92) = 5;
      BYTE4(v92) = 18;
      (*(void (**)(char *, long long **, uint64_t))(*(void *)v60 + 32))(v60, &v92, 1);
    }
  }
  BlueFin::GlSetBase::operator=((uint64_t)this + 2992, (uint64_t)this + 2944);
  *(_OWORD *)((char *)this + 3004) = *(_OWORD *)((char *)this + 2956);
  *(_OWORD *)((char *)this + 3020) = *(_OWORD *)((char *)this + 2972);
  bzero(*((void **)this + 368), ((4 * *((unsigned __int8 *)this + 2952) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v71 = (unsigned int *)*((void *)this + 343);
  if (v71[644])
  {
    unsigned int v72 = *(_DWORD *)(*((void *)this + 340) + 48);
    BOOL v73 = v72 > 8;
    unsigned int v74 = (0x1F4u >> v72) & 1;
    if (v73) {
      unsigned int v75 = 0;
    }
    else {
      unsigned int v75 = v74;
    }
  }
  else
  {
    unsigned int v75 = 0;
  }
  BlueFin::GlPeTimeManager::GetTime(v71, a2, 1, (uint64_t)&v92);
  *(void *)&a33 = 0;
  a32 = &off_270EBC600;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v92, (BlueFin::GlGpsTime *)&a32);
  unsigned int v76 = ((uint64_t (*)(void))a32[4])(&a32);
  LODWORD(v57) = a33;
  v89 = &v91;
  char v90 = 2;
  uint64_t v91 = 0;
  BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v92, (BlueFin::GlPeSvHealthMgr *)((char *)this + 2752));
  unsigned int v77 = (int)((double)v57 * 2.32830644e-10 + (double)v76);
  while (a27 != 6 || a28 != 14)
  {
    LODWORD(a32) = a27;
    BYTE4(a32) = a28;
    if (v75)
    {
      BYTE4(v86) = 0;
      int GnssSvL5Health = BlueFin::GlPeSvHealthMgr::GetGnssSvL5Health((uint64_t)this, (unsigned int *)&a32, v77, (BOOL *)&v86 + 4);
      if (BYTE4(v86)) {
        int v79 = 1;
      }
      else {
        int v79 = 2;
      }
      if (GnssSvL5Health) {
        int v80 = v79;
      }
      else {
        int v80 = 0;
      }
    }
    else
    {
      int v80 = 0;
    }
    if ((BlueFin::GlPeSvHealthHelper::IsBadByRti((uint64_t)v60, (int *)&a32) & 1) != 0
      || (int State = BlueFin::GlPeSvHealthData::GetState((uint64_t)v60, (unsigned int *)&a32), v80 == 2)
      || State == 2)
    {
      BlueFin::GlPeSvIdConverter::Gnss2SvId(*((BlueFin::GlPeGloFcnOsnMgr **)this + 341), (unsigned int *)&a32, &v88);
      if (a32 != 2) {
        goto LABEL_55;
      }
      HIDWORD(v86) = 7;
      unsigned __int8 v87 = 0;
      BOOL v81 = BlueFin::GlPeSvIdConverter::SvId2Gnss(*((BlueFin::GlPeGloFcnOsnMgr ***)this + 341), &v88, (uint64_t)&v86 + 4);
      int v82 = BYTE4(a32);
      if (BYTE4(a32) - 64 <= 0xFFFFFFC0)
      {
        DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      }
      *((_DWORD *)v89 + (BYTE4(a32) >> 5)) |= 1 << SBYTE4(a32);
      if (!v81 || SHIDWORD(v86) > 6 || v87 - 1 > 0x3E || v87 == v82 && HIDWORD(v86) == a32) {
LABEL_55:
      }
        *(_DWORD *)(*((void *)this + 368) + (((unint64_t)v88 >> 3) & 0x1C)) |= 1 << v88;
    }
    BlueFin::GlGnssSetIterator::operator++((uint64_t)&v92);
  }
  *(void *)&long long v94 = 33554430;
  v92 = &v94;
  char v93 = 2;
  if (BlueFin::GlSetBase::operator==((uint64_t)&v89, (uint64_t)&v92))
  {
    v92 = &v94;
    char v93 = 8;
    long long v94 = xmmword_263BAA87C;
    long long var8_4 = unk_263BAA88C;
    BlueFin::GlSetBase::operator|=((uint64_t)this + 2944, (uint64_t)&v92);
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a32, (unsigned int *)&a33 + 1, 8u, (const void **)this + 374);
  v92 = &v94;
  char v93 = 8;
  long long v94 = 0u;
  long long var8_4 = 0u;
  BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&a32, (int **)&v92, (int **)this + 368);
  BlueFin::GlSetBase::operator=((uint64_t)&a32, (uint64_t)&v92);
  *(long long *)((char *)&a33 + 4) = v94;
  *(long long *)((char *)&a34 + 4) = var8_4;
  uint64_t result = BlueFin::GlSetBase::operator=((uint64_t)this + 3040, (uint64_t)&a32);
  long long v85 = *(long long *)((char *)&a34 + 4);
  *(_OWORD *)(result + 12) = *(long long *)((char *)&a33 + 4);
  *(_OWORD *)(result + 28) = v85;
  return result;
}

unint64_t BlueFin::GlPeSvHealthHelper::IsBadByRti(uint64_t a1, int *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1) == 1
    || (BlueFin::GlGnssSet::Has(a1 + 2304, a2) & 1) != 0)
  {
    return 1;
  }

  return BlueFin::GlGnssSet::Has(a1 + 2496, a2);
}

uint64_t BlueFin::GlPeSvHealthMgr::GetGnssSvL5Health(uint64_t a1, unsigned int *a2, unsigned int a3, BOOL *a4)
{
  BlueFin::GlPeSvIdConverter::Gnss2SvId(*(BlueFin::GlPeGloFcnOsnMgr **)(a1 + 2728), a2, &v11);
  if (v11 - 1 > 0xBB) {
    return 0;
  }
  uint64_t result = BlueFin::GlSettingsImpl::DoesSvSupportBand5(*(void *)(a1 + 2720), &v11);
  if (result)
  {
    uint64_t result = BlueFin::GlPeGnssL5HealthData::getL5HealthData(a1 + 412, a2);
    if (result)
    {
      uint64_t v9 = (unsigned int *)result;
      uint64_t result = 0;
      unsigned int v10 = v9[2];
      if (v10)
      {
        if (*v9 && v9[1] && *v9 > a3)
        {
          *a4 = v10 != 2;
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL BlueFin::GlSettingsImpl::DoesSvSupportBand5(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a2;
  BOOL v3 = 1;
  switch(BlueFin::GlSvId::s_aucSvId2gnss[v2])
  {
    case 0:
      BOOL v3 = *(unsigned __int8 *)(v2 + a1 + 1007) > 2u;
      break;
    case 3:
    case 5:
      return v3;
    case 4:
      if (*(int *)(a1 + 88) < 37) {
        goto LABEL_5;
      }
      BOOL v3 = *(unsigned __int8 *)(v2 + a1 + 964) == 3;
      break;
    default:
LABEL_5:
      BOOL v3 = 0;
      break;
  }
  return v3;
}

uint64_t BlueFin::GlPeGnssL5HealthData::getL5HealthData(uint64_t a1, unsigned int *a2)
{
  uint64_t result = 0;
  v8[7] = *MEMORY[0x263EF8340];
  v8[2] = 0;
  v8[3] = a1 + 384;
  v8[4] = a1 + 504;
  v8[5] = a1 + 1260;
  v8[0] = a1;
  v8[1] = 0;
  unsigned int v8[6] = a1 + 1692;
  uint64_t v4 = *a2;
  if ((int)v4 <= 6)
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 4);
    if (v5 - 1 <= 0x3E && (uint64_t v6 = v8[v4]) != 0)
    {
      unsigned int v7 = 32;
      switch((int)v4)
      {
        case 0:
          goto LABEL_10;
        case 1:
          unsigned int v7 = 19;
          goto LABEL_10;
        case 2:
          unsigned int v7 = 24;
          goto LABEL_10;
        case 3:
          unsigned int v7 = 10;
          goto LABEL_10;
        case 4:
          goto LABEL_13;
        case 5:
          unsigned int v7 = 36;
          goto LABEL_10;
        case 6:
          unsigned int v7 = 14;
LABEL_10:
          if (v5 > v7) {
            return 0;
          }
LABEL_13:
          uint64_t result = v6 + 12 * *((unsigned __int8 *)a2 + 4) - 12;
          break;
        default:
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  void v8[8];

  uint64_t result = 0;
  v8[7] = *MEMORY[0x263EF8340];
  v8[2] = 0;
  v8[3] = a1 + 384;
  v8[4] = a1 + 504;
  v8[5] = a1 + 1260;
  v8[0] = a1;
  v8[1] = 0;
  unsigned int v8[6] = a1 + 1692;
  uint64_t v4 = *a2;
  if ((int)v4 <= 6)
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 4);
    if (v5 - 1 <= 0x3E && (uint64_t v6 = v8[v4]) != 0)
    {
      unsigned int v7 = 32;
      switch((int)v4)
      {
        case 0:
          goto LABEL_10;
        case 1:
          unsigned int v7 = 19;
          goto LABEL_10;
        case 2:
          unsigned int v7 = 24;
          goto LABEL_10;
        case 3:
          unsigned int v7 = 10;
          goto LABEL_10;
        case 4:
          goto LABEL_13;
        case 5:
          unsigned int v7 = 36;
          goto LABEL_10;
        case 6:
          unsigned int v7 = 14;
LABEL_10:
          if (v5 > v7) {
            return 0;
          }
LABEL_13:
          uint64_t result = v6 + 12 * *((unsigned __int8 *)a2 + 4) - 12;
          break;
        default:
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRangeAidGen::update(uint64_t a1, unsigned int a2, BlueFin::GlGnssSet *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, int a15, uint64_t a16, void *a17, void *__src, unsigned __int8 a19, unsigned int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,char a44,int a45,char a46,uint64_t a47,uint64_t a48,long long a49,long long a50,long long a51,long long a52,long long a53,long long a54,long long a55,long long a56,long long a57,long long a58,long long a59,long long a60,long long a61,long long a62)
{
  STACK[0xF78] = *MEMORY[0x263EF8340];
  uint64_t v65 = a1 + 18072;
  switch(*(_DWORD *)(a1 + 19352))
  {
    case 0:
      goto LABEL_9;
    case 1:
      uint64_t v66 = 0;
      uint64_t v67 = *(void *)(a1 + 18248);
      do
      {
        bzero(*(void **)(v67 + v66), ((4 * *(unsigned __int8 *)(v67 + v66 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        v66 += 24;
      }
      while (v66 != 168);
      BlueFin::GlPeSatAidInfo::Clear(a1 + 32, 1);
      bzero(*(void **)(a1 + 19032), ((4 * *(unsigned __int8 *)(v65 + 968) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      break;
    case 2:
      char v68 = 1;
      goto LABEL_7;
    case 3:
      char v68 = 0;
LABEL_7:
      BlueFin::GlPeRangeAidGen::clear((BlueFin::GlPeRangeAidGen *)a1, v68);
      break;
    default:
      break;
  }
  *(_DWORD *)(v65 + 1280) = 0;
LABEL_9:
  if (!*(unsigned char *)(v65 + 1013))
  {
    uint64_t v69 = 0;
    uint64_t v70 = *(void *)(a1 + 19272);
    do
    {
      bzero(*(void **)(v70 + v69), ((4 * *(unsigned __int8 *)(v70 + v69 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v69 += 24;
    }
    while (v69 != 168);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, &a20, 8u, (const void **)(*(void *)(a1 + 18056) + 208));
    LOBYTE(a49) = a19;
    memcpy((char *)&a49 + 8, __src, 4 * a19);
    WORD1(a49) = 0;
    BYTE1(a49) = 0;
    DWORD1(a49) = DWORD2(a49);
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a49);
    while (BYTE1(a49) != a49)
    {
      int v71 = BYTE2(a49);
      LOBYTE(STACK[0xD00]) = BYTE2(a49);
      if ((v71 - 52) >= 0xE)
      {
        unsigned int v72 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 18048) + 119744);
        LODWORD(STACK[0xE80]) = 7;
        LOBYTE(STACK[0xE84]) = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss(v72, (unsigned __int8 *)&STACK[0xD00], (uint64_t)&STACK[0xE80]);
        LODWORD(STACK[0xDC0]) = STACK[0xE80];
        int v73 = LOBYTE(STACK[0xE84]);
        LOBYTE(STACK[0xDC4]) = v73;
        if ((v73 - 1) <= 0x3E)
        {
          BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 18048) + 119744), (unsigned int *)&STACK[0xDC0], &STACK[0xC40]);
          if (LOBYTE(STACK[0xC40]) == v71) {
            BlueFin::GlGnssSet::Add(a1 + 19104, (int *)&STACK[0xDC0]);
          }
        }
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a49);
    }
    for (int i = 1; i != 25; ++i)
    {
      LODWORD(a49) = 2;
      BYTE4(a49) = i;
      BlueFin::GlGnssSet::Add(a1 + 19104, (int *)&a49);
    }
    *(unsigned char *)(v65 + 1013) = 1;
  }
  int v75 = *(_DWORD *)(a1 + 356);
  if (v75 == -7200001) {
    int v76 = 0;
  }
  else {
    int v76 = a2 - v75;
  }
  unsigned int v77 = *(unsigned int **)a1;
  if (*(_DWORD *)(v65 + 1008) != *(_DWORD *)(*(void *)a1 + 2568)) {
    bzero(*(void **)(a1 + 19032), ((4 * *(unsigned __int8 *)(v65 + 968) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  *(_DWORD *)(a1 + 356) = a2;
  BlueFin::GlPeTimeManager::GetTime(v77, a2, 1, (uint64_t)&a13);
  v210 = (BlueFin::GlPeSatAidInfo *)(a1 + 32);
  if (a15 == -1 || *(double *)&a17 == 4294967300.0)
  {
    BlueFin::GlPeSatAidInfo::Clear((uint64_t)v210, 1);
    return 0;
  }
  a11 = (uint64_t)&off_270EBC600;
  a12 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&a13, (BlueFin::GlGpsTime *)&a11);
  double v79 = v78;
  a9 = (uint64_t)&off_270EBF4E8;
  a10 = 0;
  BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&a13, (BlueFin::GlGlnsTime *)&a9);
  double v81 = v80;
  unsigned int v83 = BlueFin::GlPeTimeMgrUtil::precUsToUlong(v82, *(double *)&a17);
  unsigned int v84 = v83;
  uint64_t v85 = *(unsigned int *)(v65 + 952);
  if (v83 == -1 || v85 != -1)
  {
    int v87 = *(_DWORD *)(*(void *)a1 + 2568);
    if ((v87 - *(_DWORD *)(v65 + 1224)) >> 4 < 0xB3B
      || (v87 - *(_DWORD *)(v65 + 1008)) >> 4 < 0xB3B)
    {
      uint64_t v88 = v85 - v83;
      if (v88 <= 100000 && (v83 >> 5 > 0xC34 || v88 < 15001)) {
        goto LABEL_40;
      }
      GlCustomLog(15, "GlPeRangeAidGen: recomputing aiding GPS due to improvement in time.  NewUnc:%u(us)  PrevUnc:%u(us)\n", v83, v85);
    }
    else
    {
      GlCustomLog(15, "GlPeRangeAidGen: recomputing aiding due to aged aiding LastKfUpdate:%u(ms), LMS:%u(ms)", *(_DWORD *)(v65 + 1008), v87);
    }
  }
  else
  {
    GlCustomLog(15, "GlPeRangeAidGen: recomputing aiding GPS due to 1st time update.  tUnc:%u(us)\n", v83);
  }
  *(_DWORD *)(v65 + 1224) = *(_DWORD *)(*(void *)a1 + 2568);
  BlueFin::GlPeRangeAidGen::clear((BlueFin::GlPeRangeAidGen *)a1, 1);
LABEL_40:
  *(_DWORD *)(v65 + 952) = v84;
  unsigned int v89 = (*(uint64_t (**)(uint64_t *))(a11 + 32))(&a11);
  BOOL v90 = 0;
  LODWORD(v91) = a12;
  *(double *)(a1 + 328) = (double)v91 * 2.32830644e-10 + (double)(v89 % 0x93A80);
  float v92 = v79 * 0.000001;
  *(float *)(a1 + 336) = v92;
  if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
    && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
  {
    BOOL v90 = HIDWORD(a10) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  }
  unsigned int v93 = (*(uint64_t (**)(uint64_t *))(a9 + 32))(&a9);
  if (v90) {
    double v95 = 10799.0;
  }
  else {
    double v95 = (double)(v93 % 0x15180);
  }
  LODWORD(v94) = a10;
  *(double *)(a1 + 344) = v95 + (double)v94 * 2.32830644e-10;
  float v96 = v81 * 0.000001;
  *(float *)(a1 + 352) = v96;
  *(_DWORD *)(a1 + 9120) = a4;
  if (a2 <= 0xFF9222FE) {
    double v97 = (double)a2;
  }
  else {
    double v97 = (double)(int)a2;
  }
  double vars0 = 0.0;
  double vars8 = 0.0;
  BlueFin::GlPeTimeManager::GetDtsS(*(void *)a1, v97, &vars8, &vars0, 0, 0);
  v207 = (unsigned __int8 *)(a1 + 9190);
  unsigned int v98 = *(_DWORD *)(v65 + 1008);
  if (v98)
  {
    unsigned int v99 = *(_DWORD *)(*(void *)a1 + 2568);
    BOOL v100 = v99 >= v98;
    unsigned int v101 = v99 - v98;
    if (v101 != 0 && v100 && v101 >= 0x927C1)
    {
      float v102 = *(float *)(a1 + 336);
      if (v102 < 0.0015) {
        float v102 = 0.0015;
      }
      *(float *)(a1 + 336) = v102;
      float v103 = *(float *)(a1 + 352);
      if (v103 < 0.0015) {
        float v103 = 0.0015;
      }
      *(float *)(a1 + 352) = v103;
    }
  }
  double v104 = vars8;
  unsigned __int8 v215 = 0;
  unsigned int v105 = *v207;
  int v106 = *(unsigned __int8 *)(a1 + 9191) + 1;
  int v202 = v106;
  unsigned int v203 = v105;
  if (v106 == v105)
  {
    LOBYTE(v209) = 0;
    int v107 = 0x7FFFFFFF;
  }
  else
  {
    *(void *)&a49 = a1 + 9152;
    BYTE8(a49) = v106;
    if (v105 <= v106)
    {
      LOBYTE(v209) = 0;
      int v107 = 0x7FFFFFFF;
    }
    else
    {
      v206 = a3;
      int v209 = 0;
      double v108 = (double)v76 / 1000.0;
      int v107 = 0x7FFFFFFF;
      do
      {
        int v109 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&a49);
        LOBYTE(__src) = v109;
        uint64_t v110 = BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), v109);
        int v111 = *(_DWORD *)(v110 + 20) + v76;
        *(_DWORD *)(v110 + 20) = v111;
        if (v111 < 46001
          || (((unint64_t)*(unsigned int *)(*(void *)(a1 + 19032) + 4 * (v109 >> 5)) >> (v109 & 0x1F)) & 1) != 0)
        {
          if (*(__int16 *)(v110 + 74) < 0)
          {
            BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, (unsigned __int8 *)&__src);
            GlCustomLog(14, "Raidegen: removed due to setting: %d  elev:%d\n");
          }
          else
          {
            int v112 = *(unsigned __int16 *)(v110 + 74);
            int v113 = v209;
            if (v107 > v112) {
              int v113 = v109;
            }
            int v209 = v113;
            if (v107 >= v112) {
              int v107 = *(unsigned __int16 *)(v110 + 74);
            }
            if (*(_DWORD *)(v110 + 12) == 4)
            {
              uint64_t v114 = v109 >> 5;
              uint64_t v115 = 1 << (v109 & 0x1F);
              if ((v115 & *(_DWORD *)(*(void *)v206 + 4 * v114)) != 0) {
                *(_DWORD *)(a1 + 4 * v109 + 18268) = a2;
              }
            }
            else
            {
              uint64_t v114 = v109 >> 5;
              uint64_t v115 = 1 << (v109 & 0x1F);
            }
            if ((v115 & *(_DWORD *)(*(void *)(a1 + 19032) + 4 * v114)) == 0)
            {
              float v116 = *(float *)(v110 + 40);
              double v117 = *(float *)(v110 + 44);
              float v118 = *(float *)(v110 + 48);
              double v119 = *(float *)(v110 + 52);
              *(double *)(v110 + 32) = *(double *)(v110 + 32) + v117 * v108 + v108 * (v119 * 0.5) * v108;
              float v120 = v116 + v118 * v108;
              *(float *)&double v117 = v117 + v119 * v108;
              *(float *)(v110 + 40) = v120;
              *(_DWORD *)(v110 + 44) = LODWORD(v117);
            }
          }
        }
        else
        {
          BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, (unsigned __int8 *)&__src);
          GlCustomLog(14, "Raidegen: removed due to expired: %d  ageMs:%d\n");
        }
      }
      while (BYTE8(a49) < *(unsigned __int8 *)(a49 + 38));
    }
    unsigned __int8 v215 = v209;
  }
  uint64_t v121 = *(void *)(a1 + 18048);
  if (*(_DWORD *)(v121 + 100) != -1 && *(_DWORD *)(*(void *)a1 + 2576))
  {
    uint64_t v122 = 0;
    double v123 = v97 - v104;
    int v214 = 70;
    STACK[0xF28] = (unint64_t)&STACK[0xE80];
    v124 = (void *)(v121 + 120968);
    do
    {
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)(STACK[0xF28] + v122), (unsigned int *)(STACK[0xF28] + v122 + 12), 2u, (const void **)(*v124 + v122));
      v122 += 24;
    }
    while (v122 != 168);
    for (uint64_t j = 0; j != 168; j += 24)
      BlueFin::GlSetBase::operator&=(STACK[0xF28] + j, *(void *)(a1 + 19272) + j);
    BlueFin::GlGnssSet::operator^((uint64_t)&STACK[0xE80], a1 + 18080, (uint64_t)&STACK[0xDC0]);
    BlueFin::GlGnssSet::operator&((uint64_t)&STACK[0xE80], (uint64_t)&STACK[0xDC0], (uint64_t)&STACK[0xD00]);
    uint64_t v126 = 0;
    STACK[0xCE8] = (unint64_t)&STACK[0xC40];
    do
    {
      uint64_t v127 = STACK[0xCE8] + v126;
      *(void *)(v127 + 12) = 0;
      *(void *)uint64_t v127 = v127 + 12;
      *(unsigned char *)(v127 + 8) = 2;
      v126 += 24;
    }
    while (v126 != 168);
    for (uint64_t k = 0; k != 168; k += 24)
      BlueFin::GlSetBase::operator&=(*(void *)(a1 + 18248) + k, STACK[0xF28] + k);
    if (!*(unsigned char *)(v65 + 1284) && *(unsigned __int8 *)(a1 + 9191) + 1 == *(unsigned __int8 *)(a1 + 9190))
    {
      uint64_t v129 = 0;
      int v130 = 0;
      unint64_t v131 = STACK[0xDA8];
      do
      {
        v130 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v131 + v129));
        v129 += 24;
      }
      while (v129 != 168);
      if ((_BYTE)v130) {
        *(unsigned char *)(v65 + 1284) = 1;
      }
    }
    uint64_t v132 = 0;
    char v133 = 1;
    unint64_t v134 = STACK[0xDA8];
    do
    {
      while ((v133 & 1) == 0)
      {
        char v133 = 0;
        if (++v132 == 7) {
          goto LABEL_104;
        }
      }
      BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v134 + 24 * v132));
      char v133 = !HasAny;
      ++v132;
    }
    while (v132 != 7);
    if (!HasAny) {
      goto LABEL_160;
    }
LABEL_104:
    uint64_t v136 = 0;
    *(_OWORD *)&STACK[0xB40] = 0u;
    *(_OWORD *)&STACK[0xB50] = 0u;
    *(_OWORD *)&STACK[0xB20] = 0u;
    *(_OWORD *)&STACK[0xB30] = 0u;
    *(_OWORD *)&STACK[0xB00] = 0u;
    *(_OWORD *)&STACK[0xB10] = 0u;
    *(_OWORD *)&STACK[0xAE0] = 0u;
    *(_OWORD *)&STACK[0xAF0] = 0u;
    *(_OWORD *)&STACK[0xAC0] = 0u;
    *(_OWORD *)&STACK[0xAD0] = 0u;
    *(_OWORD *)&STACK[0xAA0] = 0u;
    *(_OWORD *)&STACK[0xAB0] = 0u;
    *(_OWORD *)&STACK[0xA80] = 0u;
    *(_OWORD *)&STACK[0xA90] = 0u;
    *(_OWORD *)&STACK[0xA60] = 0u;
    *(_OWORD *)&STACK[0xA70] = 0u;
    *(_OWORD *)&STACK[0xA40] = 0u;
    *(_OWORD *)&STACK[0xA50] = 0u;
    a61 = 0u;
    a62 = 0u;
    a59 = 0u;
    a60 = 0u;
    a57 = 0u;
    a58 = 0u;
    a55 = 0u;
    a56 = 0u;
    a53 = 0u;
    a54 = 0u;
    a51 = 0u;
    a52 = 0u;
    a49 = 0u;
    a50 = 0u;
    do
    {
      v137 = (char *)&a49 + v136;
      char *v137 = 0;
      *((_DWORD *)v137 + 1) = 0;
      v136 += 8;
    }
    while (v136 != 728);
    __src = (void *)(a1 + 9152);
    a19 = *(unsigned char *)(a1 + 9191) + 1;
    if (*v207 <= a19)
    {
      unint64_t v139 = 0;
    }
    else
    {
      uint64_t v138 = 0;
      unint64_t v139 = 0;
      do
      {
        LOBYTE(STACK[0xF58]) = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&__src);
        AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId((uint64_t)v210, (unsigned __int8 *)&STACK[0xF58]);
        if (AidBySvId)
        {
          v141 = (unsigned __int8 *)&a49 + 8 * v138;
          unsigned __int8 *v141 = *AidBySvId;
          *((_DWORD *)v141 + 1) = *((__int16 *)AidBySvId + 37);
          unint64_t v139 = (v139 + 1);
        }
        if (a19 >= *((unsigned __int8 *)__src + 38)) {
          break;
        }
        uint64_t v138 = v139;
      }
      while (v139 < 0x5B);
    }
    int v142 = v107;
    BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&__src, (const BlueFin::GlGnssSet *)&STACK[0xD00]);
    while (1)
    {
      char v143 = a44;
      BOOL v144 = a44 == 14 && a43 == 6;
      if (v144 || v139 >= 0x5B)
      {
        int v107 = v142;
LABEL_160:
        uint64_t v163 = a1 + 19104;
        if (v202 == v203)
        {
          uint64_t v164 = 0;
          *(_OWORD *)&STACK[0xB40] = 0u;
          *(_OWORD *)&STACK[0xB50] = 0u;
          *(_OWORD *)&STACK[0xB20] = 0u;
          *(_OWORD *)&STACK[0xB30] = 0u;
          *(_OWORD *)&STACK[0xB00] = 0u;
          *(_OWORD *)&STACK[0xB10] = 0u;
          *(_OWORD *)&STACK[0xAE0] = 0u;
          *(_OWORD *)&STACK[0xAF0] = 0u;
          *(_OWORD *)&STACK[0xAC0] = 0u;
          *(_OWORD *)&STACK[0xAD0] = 0u;
          *(_OWORD *)&STACK[0xAA0] = 0u;
          *(_OWORD *)&STACK[0xAB0] = 0u;
          *(_OWORD *)&STACK[0xA80] = 0u;
          *(_OWORD *)&STACK[0xA90] = 0u;
          *(_OWORD *)&STACK[0xA60] = 0u;
          *(_OWORD *)&STACK[0xA70] = 0u;
          *(_OWORD *)&STACK[0xA40] = 0u;
          *(_OWORD *)&STACK[0xA50] = 0u;
          a61 = 0u;
          a62 = 0u;
          a59 = 0u;
          a60 = 0u;
          a57 = 0u;
          a58 = 0u;
          a55 = 0u;
          a56 = 0u;
          a53 = 0u;
          a54 = 0u;
          a51 = 0u;
          a52 = 0u;
          a49 = 0u;
          a50 = 0u;
          do
          {
            v165 = (char *)&a49 + v164;
            char *v165 = 0;
            *((_DWORD *)v165 + 1) = 0;
            v164 += 8;
          }
          while (v164 != 728);
          __src = (void *)(a1 + 9152);
          a19 = *(unsigned char *)(a1 + 9191) + 1;
          if (*v207 <= a19)
          {
            unint64_t v167 = 0;
          }
          else
          {
            uint64_t v166 = 0;
            unint64_t v167 = 0;
            do
            {
              LOBYTE(STACK[0xF58]) = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&__src);
              v168 = BlueFin::GlPeSatAidInfo::GetAidBySvId((uint64_t)v210, (unsigned __int8 *)&STACK[0xF58]);
              if (v168)
              {
                v169 = (unsigned __int8 *)&a49 + 8 * v166;
                unsigned __int8 *v169 = *v168;
                *((_DWORD *)v169 + 1) = *((__int16 *)v168 + 37);
                unint64_t v167 = (v167 + 1);
              }
              if (a19 >= *((unsigned __int8 *)__src + 38)) {
                break;
              }
              uint64_t v166 = v167;
            }
            while (v167 < 0x5B);
          }
          int v170 = v107;
          BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&__src, (const BlueFin::GlGnssSet *)(a1 + 19104));
          while (1)
          {
            BOOL v171 = a44 == 14 && a43 == 6;
            if (v171 || v167 >= 0x5B) {
              break;
            }
            a45 = a43;
            a46 = a44;
            int v212 = a43;
            char v213 = a44;
            BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 18048) + 119744), (unsigned int *)&v212, (unsigned char *)&v211[1] + 3);
            if (HIBYTE(v211[1]) - 1 < 0xBC
              && (HIBYTE(v211[1]) - 52 > 0xD
               || BlueFin::GlPeRangeAidGen::SvIdIsConsistentWithGnss(*(void *)(a1 + 18048), (unsigned __int8 *)&v211[1] + 3, (uint64_t)&v212))&& !BlueFin::GlPeSatAidInfo::GetAidBySvId((uint64_t)v210, (unsigned __int8 *)&v211[1] + 3))
            {
              unsigned int v172 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(0, v123);
              float v173 = BlueFin::GlPeAsstMgr::ComputeElevation(*(void *)(a1 + 18048), (unsigned __int8 *)&v211[1] + 3, (uint64_t)&v214, v172, 0);
              float v175 = fmodf(v173, 4295000000.0);
              if (v173 <= 4295000000.0) {
                float v175 = v173;
              }
              if (v175 < -4295000000.0) {
                float v175 = -fmodf(-v175, 4295000000.0);
              }
              if (v175 < 0.0) {
                signed int v176 = -(float)-v175;
              }
              else {
                signed int v176 = v175;
              }
              if (v176 < 0)
              {
                if (v176 != -90) {
                  (*(void (**)(void, char *))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), (char *)&v211[1] + 3);
                }
              }
              else
              {
                if (*(unsigned __int8 *)(a1 + 9191) == 255 && v167)
                {
                  BlueFin::GlStdLib::QsortImpl((char *)&a49, (void *)v167, 8u, (uint64_t (*)(char *, char *))GlPeRngAidGen_SortSvIds, (int (*)(const void *, const void *))&STACK[0xF58], v174);
                  LOBYTE(v209) = a49;
                  unsigned __int8 v215 = a49;
                  if (SDWORD1(a49) >= v176)
                  {
                    int v170 = DWORD1(a49);
                  }
                  else
                  {
                    BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, &v215);
                    if (v167 < 2)
                    {
                      LOBYTE(v209) = 0;
                      unint64_t v167 = 0;
                      unsigned __int8 v215 = 0;
                      int v170 = 0x7FFFFFFF;
                    }
                    else
                    {
                      unint64_t v167 = (v167 - 1);
                      v177 = (_DWORD *)((unint64_t)&a49 | 0xC);
                      uint64_t v178 = 1;
                      do
                      {
                        if (v178 != (v178 - 1))
                        {
                          v179 = (char *)&a49 + 8 * (v178 - 1);
                          char *v179 = *((unsigned char *)v177 - 4);
                          *((_DWORD *)v179 + 1) = *v177;
                        }
                        BOOL v158 = (int)v167 <= v178++;
                        v177 += 2;
                      }
                      while (!v158);
                      LOBYTE(v209) = a49;
                      unsigned __int8 v215 = a49;
                      int v170 = DWORD1(a49);
                    }
                  }
                }
                BlueFin::GlPeRangeAidGen::AddRngAid(a1, (unsigned __int8 *)&v211[1] + 3, (uint64_t)&v212, (uint64_t)&v214, v123);
                if (v180)
                {
                  BlueFin::GlGnssSet::Add((uint64_t)&STACK[0xC40], &v212);
                  uint64_t v181 = BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), HIBYTE(v211[1]));
                  v182 = (char *)&a49 + 8 * (int)v167;
                  char *v182 = *(unsigned char *)v181;
                  int v183 = *(__int16 *)(v181 + 74);
                  *((_DWORD *)v182 + 1) = v183;
                  unint64_t v167 = (v167 + 1);
                  if (v170 > v183)
                  {
                    LOBYTE(v209) = HIBYTE(v211[1]);
                    unsigned __int8 v215 = HIBYTE(v211[1]);
                    int v170 = v183;
                  }
                }
              }
            }
            BlueFin::GlGnssSetIterator::operator++((uint64_t)&__src);
          }
          int v107 = v170;
          uint64_t v163 = a1 + 19104;
        }
        int v184 = *(_DWORD *)v65;
        if (*(int *)v65 > 6 || (int v185 = *(unsigned __int8 *)(v65 + 4), (v185 - 1) >= 0x3F))
        {
          BlueFin::GlGnss::operator++(v65);
          int v184 = *(_DWORD *)v65;
          int v185 = *(unsigned __int8 *)(v65 + 4);
        }
        int v204 = v107;
        if (*(unsigned char *)(*(void *)(a1 + 18064) + 32)) {
          BOOL v205 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a1 + 19032)) > 0xCu;
        }
        else {
          BOOL v205 = 0;
        }
        char v186 = 0;
        while (2)
        {
          BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 18048) + 119744), (unsigned int *)v65, &a49);
          if (a49 - 1 <= 0xBB
            && BlueFin::GlGnssSet::Has(v163, (int *)v65)
            && BlueFin::GlGnssSet::Missing((uint64_t)&STACK[0xC40], (int *)v65)
            && BlueFin::GlPeRangeAidGen::SvIdIsConsistentWithGnss(*(void *)(a1 + 18048), (unsigned __int8 *)&a49, v65))
          {
            uint64_t v187 = BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), a49);
            uint64_t v188 = v187;
            if (((*(unsigned int *)(*(void *)(a1 + 19032) + (((unint64_t)a49 >> 3) & 0x1C)) >> (a49 & 0x1F)) & 1) != 0
              && v187)
            {
              *(_DWORD *)(v187 + 20) = 0;
              int v189 = *(__int16 *)(v187 + 74);
              if (v189 < 0)
              {
LABEL_243:
                if (v189 != -90) {
                  (*(void (**)(void, long long *))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), &a49);
                }
                char v186 = 0;
                goto LABEL_246;
              }
            }
            else
            {
              unsigned int v190 = BlueFin::GlPeTimeMgrUtil::DoubleToLms((BlueFin::GlPeTimeMgrUtil *)v187, v123);
              int v189 = (int)BlueFin::GlPeAsstMgr::ComputeElevation(*(void *)(a1 + 18048), (unsigned __int8 *)&a49, (uint64_t)&v214, v190, 0);
              if (v189 < 0) {
                goto LABEL_243;
              }
              if (!v188 || *(_DWORD *)(v188 + 12) != 2)
              {
                BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, (unsigned __int8 *)&a49);
                if ((v209 - 1) <= 0xBBu && *(unsigned __int8 *)(a1 + 9191) == 255 && v204 < v189)
                {
                  BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, &v215);
                  LOBYTE(v209) = a49;
                  unsigned __int8 v215 = a49;
                  int v204 = v189;
                }
                BlueFin::GlPeRangeAidGen::AddRngAid(a1, (unsigned __int8 *)&a49, v65, (uint64_t)&v214, v123);
              }
            }
            int v191 = (*(uint64_t (**)(void))(**(void **)(a1 + 18056) + 1088))(*(void *)(a1 + 18056)) ^ 1;
            if (a2 <= 0x2BF20) {
              LOBYTE(v191) = 0;
            }
            v186 |= v205 | v191;
LABEL_246:
            uint64_t v163 = a1 + 19104;
          }
          else
          {
            char v186 = 0;
          }
          if (*(_DWORD *)v65 == 6 && *(unsigned char *)(v65 + 4) == 14)
          {
            *(_DWORD *)uint64_t v65 = 7;
            *(unsigned char *)(v65 + 4) = 0;
          }
          BlueFin::GlGnss::operator++(v65);
          if (v184 == *(_DWORD *)v65)
          {
            if ((v185 == *(unsigned __int8 *)(v65 + 4)) | v186 & 1) {
              goto LABEL_247;
            }
          }
          else if (v186)
          {
            goto LABEL_247;
          }
          continue;
        }
      }
      a45 = a43;
      a46 = a44;
      int v212 = a43;
      char v213 = a44;
      uint64_t v145 = *(void *)(a1 + 18048);
      LODWORD(STACK[0xF58]) = a43;
      LOBYTE(STACK[0xF5C]) = v143;
      BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(v145 + 119744), (unsigned int *)&STACK[0xF58], (unsigned char *)&v211[1] + 3);
      unsigned int v146 = HIBYTE(v211[1]);
      if (HIBYTE(v211[1]) - 1 < 0xBC)
      {
        if (HIBYTE(v211[1]) - 52 <= 0xD)
        {
          if (!BlueFin::GlPeRangeAidGen::SvIdIsConsistentWithGnss(*(void *)(a1 + 18048), (unsigned __int8 *)&v211[1] + 3, (uint64_t)&v212))goto LABEL_158; {
          unsigned int v146 = HIBYTE(v211[1]);
          }
        }
        if ((((unint64_t)*(unsigned int *)(*(void *)(a1 + 19032) + 4 * (v146 >> 5)) >> (v146 & 0x1F)) & 1) == 0) {
          break;
        }
      }
LABEL_158:
      BlueFin::GlGnssSetIterator::operator++((uint64_t)&__src);
    }
    v147 = BlueFin::GlPeSatAidInfo::GetAidBySvId((uint64_t)v210, (unsigned __int8 *)&v211[1] + 3);
    v148 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), HIBYTE(v211[1]));
    v149 = v148;
    if (v148 && *((_DWORD *)v148 + 3) != 2) {
      v148 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, (unsigned __int8 *)&v211[1] + 3);
    }
    unsigned int v150 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v148, v123);
    float v151 = BlueFin::GlPeAsstMgr::ComputeElevation(*(void *)(a1 + 18048), (unsigned __int8 *)&v211[1] + 3, (uint64_t)&v214, v150, 0);
    float v153 = fmodf(v151, 4295000000.0);
    if (v151 <= 4295000000.0) {
      float v153 = v151;
    }
    if (v153 < -4295000000.0) {
      float v153 = -fmodf(-v153, 4295000000.0);
    }
    if (v153 < 0.0) {
      signed int v154 = -(float)-v153;
    }
    else {
      signed int v154 = v153;
    }
    if (v154 < 0)
    {
      if (v154 != -90) {
        (*(void (**)(void, char *))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), (char *)&v211[1] + 3);
      }
      goto LABEL_157;
    }
    if (*(unsigned __int8 *)(a1 + 9191) == 255)
    {
      if (v139)
      {
        BlueFin::GlStdLib::QsortImpl((char *)&a49, (void *)v139, 8u, (uint64_t (*)(char *, char *))GlPeRngAidGen_SortSvIds, (int (*)(const void *, const void *))&STACK[0xF58], v152);
        LOBYTE(v209) = a49;
        unsigned __int8 v215 = a49;
        int v142 = DWORD1(a49);
        if (SDWORD1(a49) < v154)
        {
          BlueFin::GlPeSatAidInfo::Remove((uint64_t)v210, &v215);
          if (v139 < 2)
          {
            LOBYTE(v209) = 0;
            unint64_t v139 = 0;
            unsigned __int8 v215 = 0;
            int v142 = 0x7FFFFFFF;
            if (!v149)
            {
LABEL_147:
              BlueFin::GlPeRangeAidGen::AddRngAid(a1, (unsigned __int8 *)&v211[1] + 3, (uint64_t)&v212, (uint64_t)&v214, v123);
              if (v159)
              {
                BlueFin::GlGnssSet::Add((uint64_t)&STACK[0xC40], &v212);
                uint64_t v160 = BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), HIBYTE(v211[1]));
                if (v147)
                {
                  int v161 = *(__int16 *)(v160 + 74);
                }
                else
                {
                  v162 = (char *)&a49 + 8 * (int)v139;
                  char *v162 = *(unsigned char *)v160;
                  int v161 = *(__int16 *)(v160 + 74);
                  *((_DWORD *)v162 + 1) = v161;
                  unint64_t v139 = (v139 + 1);
                }
                if (v142 > v161)
                {
                  int v142 = v161;
                  LOBYTE(v209) = HIBYTE(v211[1]);
                  unsigned __int8 v215 = HIBYTE(v211[1]);
                }
              }
            }
LABEL_157:
            BlueFin::GlGnssSet::Add(a1 + 18080, &v212);
            goto LABEL_158;
          }
          unint64_t v139 = (v139 - 1);
          v155 = (_DWORD *)((unint64_t)&a49 | 0xC);
          uint64_t v156 = 1;
          do
          {
            if (v156 != (v156 - 1))
            {
              v157 = (char *)&a49 + 8 * (v156 - 1);
              char *v157 = *((unsigned char *)v155 - 4);
              *((_DWORD *)v157 + 1) = *v155;
            }
            BOOL v158 = (int)v139 <= v156++;
            v155 += 2;
          }
          while (!v158);
          LOBYTE(v209) = a49;
          unsigned __int8 v215 = a49;
          int v142 = DWORD1(a49);
        }
      }
    }
    if (!v149) {
      goto LABEL_147;
    }
    goto LABEL_157;
  }
LABEL_247:
  *(void *)&a49 = a1 + 9152;
  BYTE8(a49) = *(unsigned char *)(a1 + 9191) + 1;
  if (*v207 > BYTE8(a49))
  {
    do
    {
      int v192 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&a49);
      v193 = (unsigned __int8 *)BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), v192);
      unint64_t v194 = *v193;
      if (((*(unsigned int *)(*(void *)(a1 + 19032) + ((v194 >> 3) & 0x1C)) >> (v194 & 0x1F)) & 1) == 0)
      {
        uint64_t v195 = *(void *)(a1 + 18056);
        if (!*(unsigned char *)(v195 + 26057)
          || ((int v196 = *(_DWORD *)(v195 + 48), (v196 - 4) >= 5) ? (v197 = v196 == 2) : (v197 = 1), !v197))
        {
          if ((!*(unsigned char *)(v195 + 26286) || (v194 - 76) > 0x3E || *(int *)(v195 + 88) <= 36)
            && *((float *)v193 + 10) < 0.000004)
          {
            *((_DWORD *)v193 + 10) = 914765757;
          }
        }
      }
    }
    while (BYTE8(a49) < *(unsigned __int8 *)(a49 + 38));
  }
  if (*(unsigned char *)(v65 + 1012))
  {
    *(void *)&a49 = a1 + 9152;
    BYTE8(a49) = *(unsigned char *)(a1 + 9191) + 1;
    if (*v207 > BYTE8(a49))
    {
      do
      {
        int v198 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&a49);
        v199 = (float *)BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9152), v198);
        float v200 = flt_263BB93F0[*(unsigned __int8 *)v199 - 52 < 0xE];
        float v201 = v199[10];
        if (v201 < v200) {
          v199[10] = v201 + v200;
        }
      }
      while (BYTE8(a49) < *(unsigned __int8 *)(a49 + 38));
    }
  }
  return 1;
}

BlueFin::GlPeGloFcnOsnMgr *BlueFin::GlPeSvIdConverter::Gnss2SvId@<X0>(BlueFin::GlPeGloFcnOsnMgr *result@<X0>, unsigned int *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = *a2;
  if (v4 != 2
    || (unsigned int v5 = (BlueFin::GlPeGloFcnOsnMgr **)result, (result = *(BlueFin::GlPeGloFcnOsnMgr **)result) == 0))
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 4);
    if (v8 <= BlueFin::GlSvId::s_aucGnss2numSvId[v4])
    {
      char v7 = v8 + BlueFin::GlSvId::s_aucGnss2minSvId[v4] - 1;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 4);
  uint64_t result = (BlueFin::GlPeGloFcnOsnMgr *)BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(result, v6);
  if ((int)result < -7
    || (uint64_t result = (BlueFin::GlPeGloFcnOsnMgr *)BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(*v5, v6), (int)result > 6))
  {
LABEL_7:
    char v7 = 0;
    goto LABEL_9;
  }
  uint64_t result = (BlueFin::GlPeGloFcnOsnMgr *)BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(*v5, v6);
  char v7 = (_BYTE)result + 59;
LABEL_9:
  *a3 = v7;
  return result;
}

unint64_t BlueFin::GlGnssSetIterator::operator++(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 192);
  do
  {
    unint64_t result = BlueFin::GlGnss::operator++((uint64_t)v2);
    if (*v2 == 6 && *(unsigned char *)(a1 + 196) == 14) {
      break;
    }
    unint64_t result = BlueFin::GlGnssSet::Has(a1, v2);
  }
  while ((result & 1) == 0);
  return result;
}

unint64_t BlueFin::GlGnssSet::Has(uint64_t a1, int *a2)
{
  if (*a2 > 6 || (unint64_t v2 = *((unsigned __int8 *)a2 + 4), (v2 - 1) >= 0x3F))
  {
    DeviceFaultNotify("glgnss.cpp", 286, "Has", (char)"rtGnss.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 286, "rtGnss.isValid()");
  }
  return (*(unsigned int *)(*(void *)(*(void *)(a1 + 168) + 24 * *a2) + ((v2 >> 3) & 0x1C)) >> (v2 & 0x1F)) & 1;
}

uint64_t BlueFin::GlGnss::operator++(uint64_t result)
{
  int v1 = *(_DWORD *)result;
  if (*(int *)result > 6 || (int v2 = *(unsigned __int8 *)(result + 4), (v2 - 1) >= 0x3F))
  {
    *(_DWORD *)unint64_t result = 0;
LABEL_13:
    char v5 = 1;
    goto LABEL_14;
  }
  if (v1 > 6 || v2 >= ((0xE243F0A181320uLL >> (8 * v1)) & 0x3F))
  {
    if (v1 < 6) {
      int v4 = v1 + 1;
    }
    else {
      int v4 = 0;
    }
    *(_DWORD *)unint64_t result = v4;
    goto LABEL_13;
  }
  char v5 = v2 + 1;
LABEL_14:
  *(unsigned char *)(result + 4) = v5;
  return result;
}

unsigned __int8 *BlueFin::GlPeSatAidInfo::GetAidBySvId(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = (unsigned __int8 *)(a1 + 9120);
  int v5 = *a2;
  BlueFin::GlArray::EnsureValidHandle(a1 + 9120, v5);
  if (*(unsigned __int8 *)(*(void *)(a1 + 9136) + v5 - v4[36]) == 255) {
    return 0;
  }
  unint64_t result = (unsigned __int8 *)BlueFin::GlArray::Get((BlueFin::GlArray *)v4, *a2);
  if (*a2 != *result) {
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlArray::Get(BlueFin::GlArray *this, int a2)
{
  char v2 = a2;
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this, a2);
  uint64_t v4 = (v2 - *((unsigned char *)this + 36));
  unsigned int v5 = *(unsigned __int8 *)(*((void *)this + 2) + v4);
  if (v5 == 255) {
    return 0;
  }
  BlueFin::GlArray::EnsureValidSlot((uint64_t)this, v5);
  return *((void *)this + 1) + *((_DWORD *)this + 8) * *(unsigned __int8 *)(*((void *)this + 2) + v4);
}

uint64_t BlueFin::GlArray::EnsureValidHandle(uint64_t this, int a2)
{
  if (a2 - *(unsigned __int8 *)(this + 36) >= *(unsigned __int8 *)(this + 37))
  {
    DeviceFaultNotify("glutl_array.cpp", 133, "EnsureValidHandle", (char)"handle - m_ucMinHandle < m_ucNumHandles");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_array.cpp", 133, "handle - m_ucMinHandle < m_ucNumHandles");
  }
  return this;
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(BlueFin::GlPeGloFcnOsnMgr *this, unsigned int a2)
{
  if ((a2 - 25) <= 0xE7u)
  {
    DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 628, "OSN2FCN", (char)"IS_GLONASS_OSN(ucOsn)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 628, "IS_GLONASS_OSN(ucOsn)");
  }
  uint64_t v4 = a2 - 1;
  if (*((unsigned char *)this + 1249)) {
    goto LABEL_3;
  }
  int v8 = *(_DWORD *)(*((void *)this + 2) + 2568);
  uint64_t v9 = (int *)((char *)this + 16 * v4 + 716);
  if (*v9 == v8)
  {
    unsigned int v5 = (char *)this + 16 * v4;
    if (!*((_DWORD *)v5 + 181)) {
      return -8;
    }
    return v5[728];
  }
  *uint64_t v9 = v8;
  unsigned int v10 = (char *)this + 16 * v4;
  unsigned __int8 v11 = (int *)(v10 + 724);
  uint64_t v12 = *((unsigned int *)v10 + 181);
  if (v12)
  {
    if ((v8 - *((_DWORD *)v10 + 180)) < BlueFin::GlPeGloFcnOsnMgr::m_aulMaxFcnToOsnMs[v12])
    {
LABEL_3:
      unsigned int v5 = (char *)this + 16 * v4;
      return v5[728];
    }
    *unsigned __int8 v11 = 0;
  }
  if (*((unsigned char *)this + 1224) && *((unsigned __int8 *)this + v4 + 1225) != 248)
  {
    *unsigned __int8 v11 = 2;
    signed __int8 v6 = *((unsigned char *)this + v4 + 1225);
LABEL_36:
    uint64_t v26 = (char *)this + 16 * v4;
    v26[728] = v6;
    *((_DWORD *)v26 + 180) = v8;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = *((void *)this + 53);
      BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::UpdateCache((_DWORD *)(v15 + v13), v8, 0);
      if (*(unsigned char *)(v15 + v13))
      {
        if (*(unsigned __int8 *)(v15 + v13 + 2) == a2) {
          break;
        }
      }
      ++v14;
      v13 += 28;
      if (v14 == 14)
      {
        signed __int8 v28 = -8;
        char v27 = a2;
        int v16 = (*(uint64_t (**)(void, char *))(**((void **)this + 1) + 328))(*((void *)this + 1), &v27);
        uint64_t v17 = **((void **)this + 1);
        if (v16)
        {
          unsigned int v18 = (BlueFin::GlPeLtoEphemeris *)(*(uint64_t (**)(void))(v17 + 112))();
          if (v18 && BlueFin::GlPeLtoEphemeris::GetFcn(v18, &v28))
          {
            *unsigned __int8 v11 = 3;
            signed __int8 v6 = v28;
            goto LABEL_36;
          }
LABEL_31:
          FcnFromGlonassint Alm = BlueFin::GlPeAlmMgr::GetFcnFromGlonassAlm((BlueFin::GlPeAlmMgr *)(*(void *)this + 34112), a2);
          signed __int8 v6 = FcnFromGlonassAlm;
          if (FcnFromGlonassAlm == -8)
          {
            if (*(_DWORD *)(*(void *)this + 120012) != 1) {
              return -8;
            }
            signed __int8 v6 = BlueFin::GlPeGloFcnOsnMgr::m_acSimulationOsn2Fcn[(int)v4];
          }
          int v25 = 3;
        }
        else
        {
          if (!(*(unsigned int (**)(void))(v17 + 320))()) {
            goto LABEL_31;
          }
          uint64_t v21 = (unsigned char *)(*(uint64_t (**)(void, char *, void))(**((void **)this + 1) + 112))(*((void *)this + 1), &v27, 0);
          if (!v21) {
            goto LABEL_31;
          }
          float v22 = v21;
          if ((v21[8] & 0xF) != 1) {
            goto LABEL_31;
          }
          unsigned __int8 v23 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v21 + 208))(v21, 4);
          if (v23 == 248) {
            goto LABEL_31;
          }
          signed __int8 v6 = v23;
          if ((*(unsigned int (**)(unsigned char *))(*(void *)v22 + 184))(v22)) {
            int v25 = 1;
          }
          else {
            int v25 = 2;
          }
        }
        *unsigned __int8 v11 = v25;
        goto LABEL_36;
      }
    }
    if (*(unsigned char *)(v15 + v13 + 1)) {
      int v19 = 1;
    }
    else {
      int v19 = 2;
    }
    *unsigned __int8 v11 = v19;
    signed __int8 v6 = v14 - 7;
    unsigned int v20 = (char *)this + 16 * v4;
    v20[728] = v14 - 7;
    *((_DWORD *)v20 + 180) = *(_DWORD *)(v15 + v13 + 8);
  }
  return v6;
}

uint64_t BlueFin::GlPeTimeMgrUtil::DoubleToLms(BlueFin::GlPeTimeMgrUtil *this, double a2)
{
  uint64_t result = 4287767294;
  if (a2 >= 0.0)
  {
    double v4 = floor(a2 + 0.5);
    if (v4 > 4287767290.0) {
      return result;
    }
    double v5 = v4 + 0.1;
    double v6 = fmod(v4 + 0.1, 4294967300.0);
    if (v5 <= 4294967300.0) {
      double v6 = v5;
    }
  }
  else
  {
    double v3 = ceil(a2 + -0.5);
    if (v3 < -7200000.0) {
      return 4287767296;
    }
    double v7 = v3 + 4294967300.0 + 0.1;
    double v6 = fmod(v7, 4294967300.0);
    if (v7 <= 4294967300.0) {
      double v6 = v7;
    }
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  if (v6 < 0.0) {
    return --v6;
  }
  else {
    return v6;
  }
}

uint64_t BlueFin::GlArray::EnsureValidSlot(uint64_t this, unsigned int a2)
{
  if (*(unsigned __int8 *)(this + 38) <= a2)
  {
    DeviceFaultNotify("glutl_array.cpp", 140, "EnsureValidSlot", (char)"slot < m_ucNumSlots");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_array.cpp", 140, "slot < m_ucNumSlots");
  }
  return this;
}

uint64_t BlueFin::GlGnssSet::Add(uint64_t result, int *a2)
{
  if (*a2 > 6 || (unint64_t v2 = *((unsigned __int8 *)a2 + 4), (v2 - 1) >= 0x3F))
  {
    DeviceFaultNotify("glgnss.cpp", 272, "Add", (char)"rtGnss.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 272, "rtGnss.isValid()");
  }
  uint64_t v3 = *(void *)(*(void *)(result + 168) + 24 * *a2);
  *(_DWORD *)(v3 + ((v2 >> 3) & 0x1C)) |= 1 << v2;
  return result;
}

BOOL BlueFin::GlGnssSet::Missing(uint64_t a1, int *a2)
{
  if (*a2 > 6 || (unint64_t v2 = *((unsigned __int8 *)a2 + 4), (v2 - 1) >= 0x3F))
  {
    DeviceFaultNotify("glgnss.cpp", 293, "Missing", (char)"rtGnss.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 293, "rtGnss.isValid()");
  }
  return ((*(unsigned int *)(*(void *)(*(void *)(a1 + 168) + 24 * *a2) + ((v2 >> 3) & 0x1C)) >> (v2 & 0x1F)) & 1) == 0;
}

float BlueFin::GlPeAsstMgr::ComputeElevation(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4, long long *a5)
{
  unsigned int v13 = 7;
  unsigned __int8 v14 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744), a2, (uint64_t)&v13);
  unsigned int v11 = v13;
  unsigned __int8 v12 = v14;
  if (v14 - 1 > 0x3E) {
    return -90.0;
  }
  unsigned int v13 = 0;
  int v9 = BlueFin::GlPeAsstMgr::computeAzElCommon((uint64_t *)a1, &v11, a4, a5, a3, 0, (float *)&v13);
  float result = *(float *)&v13;
  if (!v9) {
    return -90.0;
  }
  return result;
}

uint64_t BlueFin::GlArrayIterator::Next(BlueFin::GlArrayIterator *this)
{
  uint64_t v2 = *((unsigned __int8 *)this + 8);
  uint64_t v3 = *(void *)this;
  if (v2 >= *(unsigned __int8 *)(v3 + 38))
  {
    double v7 = "HasNext()";
    DeviceFaultNotify("glutl_array.cpp", 172, "Next", (char)"HasNext()");
    int v8 = 172;
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  *((unsigned char *)this + 8) = v2 + 1;
  uint64_t v5 = (*(unsigned char *)(v3 + 36) + *(unsigned char *)(v4 + v2));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v5) & 1) == 0)
  {
    double v7 = "m_potArray->Has(handle)";
    DeviceFaultNotify("glutl_array.cpp", 174, "Next", (char)"m_potArray->Has(handle)");
    int v8 = 174;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_array.cpp", v8, v7);
  }
  return v5;
}

BOOL BlueFin::GlArray::Has(BlueFin::GlArray *this, int a2)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + a2 - *((unsigned __int8 *)this + 36)) != 255;
}

BOOL BlueFin::GlPeRangeAidGen::SvIdIsConsistentWithGnss(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = 7;
  unsigned __int8 v7 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744), a2, (uint64_t)&v6);
  BOOL result = 0;
  if (v7 - 1 <= 0x3E && v6 == *(_DWORD *)a3) {
    return v7 == *(unsigned __int8 *)(a3 + 4);
  }
  return result;
}

_DWORD *BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::UpdateCache(_DWORD *this, int a2, char a3)
{
  uint64_t v5 = this;
  unsigned int v16[3] = *MEMORY[0x263EF8340];
  int v6 = this[1];
  if (v6 == -7200001 || (a2 - v6) >= 0x2711) {
    this = (_DWORD *)BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::ageCache((BlueFin::GlPeGloFcnOsnMgr::OsnVerifier *)this, a2);
  }
  if ((a3 & 1) != 0 || ((int v8 = v5[2], v8 != -7200001) ? (v9 = (a2 - v8) >= 0x2711) : (v9 = 1), v9))
  {
    uint64_t v10 = 0;
    char v11 = 0;
    unsigned __int8 v12 = 0;
    unsigned __int8 v13 = 0;
    *(_WORD *)uint64_t v5 = 0;
    *((unsigned char *)v5 + 2) = 0;
    memset(v16, 0, 24);
    do
    {
      if (v5[v10 + 3] != -7200001)
      {
        uint64_t v14 = *((unsigned __int8 *)v5 + v10 + 24);
        int v15 = *((unsigned __int8 *)v16 + v14 - 1);
        *((unsigned char *)v16 + v14 - 1) = v15 + 1;
        if (!v15) {
          ++v13;
        }
        if ((v15 + 1) > v12)
        {
          unsigned __int8 v12 = v15 + 1;
          char v11 = v14;
        }
      }
      ++v10;
    }
    while (v10 != 3);
    if ((v13 - 3) >= 0xFEu && v13 <= v12)
    {
      *(unsigned char *)uint64_t v5 = 1;
      *((unsigned char *)v5 + 1) = v12 > 1u;
      *((unsigned char *)v5 + 2) = v11;
    }
    void v5[2] = a2;
  }
  return this;
}

uint64_t BlueFin::GlArray::Remove(BlueFin::GlArray *this, int a2)
{
  char v2 = a2;
  uint64_t result = BlueFin::GlArray::EnsureValidHandle((uint64_t)this, a2);
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = (v2 - *((unsigned char *)this + 36));
  if (*(unsigned __int8 *)(v5 + v6) != 255)
  {
    unsigned __int8 v7 = *((unsigned char *)this + 39) + 1;
    *((unsigned char *)this + 39) = v7;
    unsigned int v8 = *((unsigned __int8 *)this + 38);
    if (v8 > v7)
    {
      uint64_t v9 = *((void *)this + 3);
      uint64_t v10 = v7;
      while (*(unsigned __int8 *)(v9 + v10) != v6)
      {
        if (v8 == ++v10) {
          goto LABEL_8;
        }
      }
      char v11 = *(unsigned char *)(v5 + v6);
      *(unsigned char *)(v9 + v10) = *(unsigned char *)(v9 + v7);
      *(unsigned char *)(*((void *)this + 3) + *((unsigned __int8 *)this + 39)) = v11;
      uint64_t v5 = *((void *)this + 2);
    }
LABEL_8:
    *(unsigned char *)(v5 + v6) = -1;
  }
  return result;
}

uint64_t BlueFin::GlSetBase::operator&=(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(result + 8);
  if (v2 != *(unsigned __int8 *)(a2 + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 694, "operator&=", (char)"m_ucUlongSize == otRightOperand.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 694, "m_ucUlongSize == otRightOperand.m_ucUlongSize");
  }
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v3 = *(int **)a2;
    uint64_t v4 = *(_DWORD **)result;
    do
    {
      int v5 = *v3++;
      *v4++ &= v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t BlueFin::GlSettingsImpl::IsUsingOnChipMe(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 25967);
}

unsigned char *BlueFin::GlPeSatAidInfo::Remove(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (BlueFin::GlArray *)(a1 + 9120);
  uint64_t result = (unsigned char *)BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 9120), *a2);
  if (result)
  {
    unsigned char *result = 0;
    int v5 = *a2;
    return (unsigned char *)BlueFin::GlArray::Remove(v3, v5);
  }
  return result;
}

BOOL BlueFin::GlPeEphemerisMgr::HaveLtoEphemerisFor(uint64_t a1)
{
  return (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(a1) + 8) & 0xF) == 2;
}

BOOL BlueFin::GlPeEphemerisMgr::HaveNativeEphemerisFor(uint64_t a1)
{
  return (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(a1) + 8) & 0xF) == 1;
}

BlueFin::GlGnssSetIterator *BlueFin::GlGnssSetIterator::GlGnssSetIterator(BlueFin::GlGnssSetIterator *this, const BlueFin::GlGnssSet *a2)
{
  uint64_t v4 = 0;
  *((void *)this + 21) = this;
  do
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)(*((void *)this + 21) + v4), (unsigned int *)(*((void *)this + 21) + v4 + 12), 2u, (const void **)(*((void *)a2 + 21) + v4));
    v4 += 24;
  }
  while (v4 != 168);
  *((_DWORD *)this + 48) = 7;
  *((unsigned char *)this + 196) = 0;
  *((_DWORD *)this + 50) = 7;
  *((unsigned char *)this + 204) = 0;
  BlueFin::GlGnssSetIterator::Reset((uint64_t)this);
  return this;
}

uint64_t BlueFin::GlGnssSetIterator::Reset(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    while ((v3 & 1) == 0)
    {
      char v3 = 0;
      if (++v2 == 7) {
        goto LABEL_8;
      }
    }
    this = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*(void *)(v1 + 168) + 24 * v2));
    char v3 = this ^ 1;
    ++v2;
  }
  while (v2 != 7);
  if ((this & 1) == 0)
  {
    *(_DWORD *)(v1 + 192) = 6;
    *(unsigned char *)(v1 + 196) = 14;
    return this;
  }
LABEL_8:
  int v4 = 0;
  *(_DWORD *)(v1 + 192) = 0;
  *(unsigned char *)(v1 + 196) = 1;
  while (v4 != 6 || *(unsigned char *)(v1 + 196) != 14)
  {
    this = BlueFin::GlGnssSet::Has(v1, (int *)(v1 + 192));
    if (this) {
      break;
    }
    this = BlueFin::GlGnss::operator++(v1 + 192);
    int v4 = *(_DWORD *)(v1 + 192);
  }
  return this;
}

uint64_t BlueFin::GlPeAlmMgr::GetFcnFromGlonassAlm(BlueFin::GlPeAlmMgr *this, unsigned int a2)
{
  if ((((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 54) + 120) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) != 0
    && *(_DWORD *)(*((void *)this + 56) + 2576))
  {
    uint64_t AlmReference = (BlueFin::GlPeAlmanac *)BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, 2, a2);
    BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 56), 1, v11);
    unsigned __int8 v12 = &off_270EBC600;
    unint64_t v13 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v11, (BlueFin::GlGpsTime *)&v12);
    BlueFin::GlPeAlmanac::GetToa(AlmReference, (const BlueFin::GlGpsTime *)&v12, (uint64_t)v11);
    unsigned int v4 = v13;
    unsigned int v5 = HIDWORD(v13);
    if (v11[0].n128_u64[1])
    {
      if (v13 < v11[0].n128_u64[1])
      {
        unsigned int v5 = (__PAIR64__(v11[0].n128_u32[3] - HIDWORD(v13), v11[0].n128_u32[2]) - v13) >> 32;
        unsigned int v4 = v11[0].n128_u32[2] - v13;
        char v6 = 1;
      }
      else
      {
        char v6 = 0;
        unsigned int v5 = (v13 - v11[0].n128_u64[1]) >> 32;
        unsigned int v4 = v13 - v11[0].n128_u32[2];
      }
    }
    else
    {
      char v6 = 0;
    }
    double v8 = (double)v4 * 2.32830644e-10 + (double)v5;
    if ((v6 & ((v5 | v4) != 0)) != 0) {
      double v8 = -v8;
    }
    unsigned int v9 = (int)v8;
    if ((int)v8 < 0) {
      unsigned int v9 = -v9;
    }
    if (v9 <= 0xEFF100) {
      return (char)*((unsigned char *)AlmReference + 96);
    }
    else {
      return -8;
    }
  }
  else
  {
    return -8;
  }
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::ageCache(BlueFin::GlPeGloFcnOsnMgr::OsnVerifier *this, int a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = 0;
  unsigned int v4 = (char *)this + 12;
  char v5 = -1;
  char v6 = -1;
  do
  {
    int v7 = *(_DWORD *)&v4[4 * v2];
    if (v7 == -7200001) {
      goto LABEL_5;
    }
    unsigned int v8 = a2 - v7;
    if (v8 >= 0x36EE81)
    {
      *(_DWORD *)&v4[4 * v2] = -7200001;
LABEL_5:
      char v9 = v2;
      goto LABEL_9;
    }
    if (v8 > v3)
    {
      char v5 = v2;
      unsigned int v3 = v8;
    }
    char v9 = -1;
LABEL_9:
    if (v6 == -1) {
      char v6 = v9;
    }
    ++v2;
  }
  while (v2 != 3);
  if (v6 == -1)
  {
    char v6 = v5;
    if (v5 == -1)
    {
      DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 138, "ageCache", (char)"scOldestIndex != -1");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 138, "scOldestIndex != -1");
    }
  }
  *((_DWORD *)this + 1) = a2;
  return v6;
}

uint64_t BlueFin::GlPeLtoEphemeris::GetFcn(BlueFin::GlPeLtoEphemeris *this, signed __int8 *a2)
{
  if ((*((unsigned char *)this + 8) & 0xF0) != 0x20) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)this + 192))(this, 35);
  if (result)
  {
    *a2 = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)this + 208))(this, 36);
    return 1;
  }
  return result;
}

void BlueFin::GlPeRangeAidGen::clear(BlueFin::GlPeRangeAidGen *this, char a2)
{
  uint64_t v4 = 0;
  char v5 = (char *)this + 18072;
  *((_DWORD *)this + 4518) = 7;
  *((unsigned char *)this + 18076) = 0;
  uint64_t v6 = *((void *)this + 2281);
  do
  {
    bzero(*(void **)(v6 + v4), ((4 * *(unsigned __int8 *)(v6 + v4 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v4 += 24;
  }
  while (v4 != 168);
  memset_pattern16((char *)this + 18272, &memset_pattern_1, 0x2F0uLL);
  *((_DWORD *)v5 + 238) = -1;
  *((_DWORD *)v5 + 252) = 0;
  (*(void (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
  BlueFin::GlPeSatAidInfo::Clear((uint64_t)this + 32, a2);
  int v7 = (void *)*((void *)this + 2379);
  size_t v8 = ((4 * v5[968] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;

  bzero(v7, v8);
}

uint64_t BlueFin::GlPeSatAidInfo::Clear(uint64_t this, char a2)
{
  uint64_t v2 = this;
  unsigned int v3 = (unsigned __int8 *)(this + 9158);
  uint64_t v4 = (BlueFin::GlArray *)(this + 9120);
  uint64_t v9 = this + 9120;
  int v5 = *(unsigned __int8 *)(this + 9159);
  unsigned __int8 v10 = v5 + 1;
  unsigned int v6 = *(unsigned __int8 *)(this + 9158);
  if (v6 > (v5 + 1))
  {
    do
    {
      int v8 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v9);
      this = BlueFin::GlArray::Get(v4, v8);
      if (this && (*(_DWORD *)(this + 12) != 2 || (a2 & 1) == 0))
      {
        *(unsigned char *)this = 0;
        this = BlueFin::GlArray::Remove(v4, v8);
      }
    }
    while (v10 < *(unsigned __int8 *)(v9 + 38));
    unsigned int v6 = *v3;
    int v5 = v3[1];
  }
  if (v5 + 1 == v6)
  {
    *(void *)(v2 + 296) = 0;
    *(_DWORD *)(v2 + 304) = 1226024960;
    *(void *)(v2 + 312) = 0;
    *(_DWORD *)(v2 + 320) = 1202241536;
  }
  return this;
}

__n128 BlueFin::GlPeSatPos::Clear(void **this)
{
  uint64_t v1 = (char *)(this + 1);
  bzero(this[2], ((4 * *((unsigned __int8 *)this + 24) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  result.n128_u64[0] = 0x5B5B5B5B5B5B5B5BLL;
  result.n128_u64[1] = 0x5B5B5B5B5B5B5B5BLL;
  *(__n128 *)(v1 + 17677) = result;
  *((__n128 *)v1 + 1104) = result;
  *((__n128 *)v1 + 1103) = result;
  *((__n128 *)v1 + 1102) = result;
  *((__n128 *)v1 + 1101) = result;
  *((__n128 *)v1 + 1100) = result;
  *((__n128 *)v1 + 1099) = result;
  *((__n128 *)v1 + 1098) = result;
  *((__n128 *)v1 + 1097) = result;
  *((__n128 *)v1 + 1096) = result;
  *((__n128 *)v1 + 1095) = result;
  *((__n128 *)v1 + 1094) = result;
  return result;
}

uint64_t BlueFin::GlGnssSet::operator&@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  *(void *)(a3 + 168) = a3;
  do
  {
    uint64_t v7 = *(void *)(a3 + 168) + v6;
    *(void *)(v7 + 12) = 0;
    *(void *)uint64_t v7 = v7 + 12;
    *(unsigned char *)(v7 + 8) = 2;
    v6 += 24;
  }
  while (v6 != 168);
  for (uint64_t i = 0; i != 168; i += 24)
  {
    uint64_t v9 = (int **)(*(void *)(a2 + 168) + i);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v11, v12, 2u, (const void **)(*(void *)(a1 + 168) + i));
    unint64_t v13 = &v15;
    char v14 = 2;
    uint64_t v15 = 0;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v11, (int **)&v13, v9);
    BlueFin::GlSetBase::operator=((uint64_t)v11, (uint64_t)&v13);
    *(void *)unsigned __int8 v12 = v15;
    uint64_t result = BlueFin::GlSetBase::operator=(*(void *)(a3 + 168) + i, (uint64_t)v11);
    *(void *)(result + 12) = *(void *)v12;
  }
  return result;
}

#error "2638EF70C: call analysis failed (funcsize=81)"

uint64_t BlueFin::GlEngineImplStd::EnablePowerSave(BlueFin::GlEngineImplStd *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v66 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v66[273] = (*(uint64_t (**)(void))(**(void **)v66 + 48))();
    uint64_t v67 = 70;
    if (a2)
    {
      uint64_t v67 = 84;
      char v68 = "ON";
    }
    else
    {
      char v68 = "OFF";
    }
    GlCustomLog(14, "GlEngine::EnablePowerSave(%c), Max RF On Time %d\n", v67, a3);
    GlCustomLog(14, "\tPWM %s\n", v68);
    BlueFin::GlReqSm::EnableLowPower((BlueFin::GlReqSm *)(*((void *)this + 3) + 126144), a2, a3);
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v69, v70, v71, v72, v73, v74, v75, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    if (a2) {
      uint64_t v77 = 84;
    }
    else {
      uint64_t v77 = 70;
    }
    if (*((void *)this + 1))
    {
      uint64_t result = GlCustomLog(14, "GlEngine::EnablePowerSave(%c), Max RF On Time %d. Engine is not loaded. GlSettings is set\n", v77, a3);
      uint64_t v78 = *((void *)this + 1);
      char v79 = (*(unsigned int *)(v78 + 88) < 0x22uLL) & (0x301E00000uLL >> *(_DWORD *)(v78 + 88));
      if (a3 < 0)
      {
        double v80 = (unsigned char *)(v78 + 11564);
        *double v80 = a2 & ~v79;
        v80[1] = 1;
      }
      else
      {
        if (!a3) {
          char v79 = 1;
        }
        if ((v79 & 1) == 0) {
          *(_WORD *)(v78 + 26054) = a3;
        }
      }
      if (!*((unsigned char *)this + 32))
      {
        return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)this + 600, 100000000, 0);
      }
    }
    else
    {
      return GlCustomLog(14, "GlEngine::EnablePowerSave(%c), Max RF On Time %d. Engine is not loaded. GlSettings is not set\n", v77, a3);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::OnRtiReceived(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned int a29,unsigned __int8 a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v62 = 0;
  a61 = *MEMORY[0x263EF8340];
  uint64_t v63 = *(void *)(a1 + 1192);
  do
  {
    bzero(*(void **)(v63 + v62), ((4 * *(unsigned __int8 *)(v63 + v62 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v62 += 24;
  }
  while (v62 != 168);
  uint64_t v64 = 0;
  a55 = &a34;
  do
  {
    uint64_t v65 = &a55[v64];
    uint64_t v66 = &a55[v64];
    *(void *)(v66 + 12) = 0;
    *(void *)uint64_t v65 = v66 + 12;
    v65[8] = 2;
    v64 += 24;
  }
  while (v64 != 168);
  for (unsigned int i = 0; i != 7; ++i)
    BlueFin::GlGnssSet::SetAll((uint64_t)&a34, i);
  uint64_t result = (uint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v85, (const BlueFin::GlGnssSet *)&a34);
  unsigned int v69 = a29;
  unsigned int v70 = a30;
  BOOL v71 = a29 == 6;
  if (a29 != 6 || a30 != 14)
  {
    char v81 = 0;
    uint64_t v72 = a2 + 8;
    uint64_t v73 = a2 + 72;
    uint64_t v74 = a1 + 576;
    do
    {
      if (!v70)
      {
        DeviceFaultNotify("glpe_ltomgr.cpp", 3820, "OnRtiReceived", (char)"*otCurGnss.otGnssId != INVALID_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 3820, "*otCurGnss.otGnssId != INVALID_GNSS_ID");
      }
      uint64_t v75 = 1 << (v70 - 1);
      uint64_t v76 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v69];
      if ((*(void *)(v72 + 8 * v76) & v75) != 0 && (*(void *)(v73 + 8 * v76) & v75) != 0)
      {
        LOBYTE(v83) = v70;
        BlueFin::GlGnssSet::Add(a1 + 1024, v69, (unsigned __int8 *)&v83);
        uint64_t v77 = (const void **)BlueFin::GlGnssSet::operator()(v74, v69);
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v83, (unsigned int *)&v84 + 1, 2u, v77);
        if ((((unint64_t)*(unsigned int *)(v83 + 4 * (v70 >> 5)) >> (v70 & 0x1F)) & 1) == 0)
        {
          if ((*(unsigned char *)(a1 + 1636) & 4) == 0)
          {
            LOBYTE(v83) = v70;
            BlueFin::GlGnssSet::Add(v74, v69, (unsigned __int8 *)&v83);
          }
          uint64_t v78 = "BDS";
          char v79 = "GPS";
          switch(v69)
          {
            case 0u:
              break;
            case 1u:
              char v79 = "SBAS";
              break;
            case 2u:
              char v79 = "GLNS";
              break;
            case 3u:
              char v79 = "QZSS";
              break;
            case 4u:
              goto LABEL_24;
            default:
              double v80 = "<->";
              if (v71) {
                double v80 = "NIC";
              }
              uint64_t v78 = "GAL";
              if (v69 != 5) {
                uint64_t v78 = v80;
              }
LABEL_24:
              char v79 = v78;
              break;
          }
          GlCustomLog(14, "LtoMgr [%s, %02d] marked bad LTO from RTI\n", v79, v70);
          char v81 = 1;
        }
      }
      uint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&v85);
      unsigned int v69 = a29;
      unsigned int v70 = a30;
      BOOL v71 = a29 == 6;
    }
    while (a29 != 6 || a30 != 14);
    if (v81) {
      return GlCustomLog(14, "LtoMgr Bad SV flags updated RTI\n");
    }
  }
  return result;
}

uint64_t BlueFin::GlGnssSet::Add(uint64_t result, unsigned int a2, unsigned __int8 *a3)
{
  if (a2 > 6 || (unint64_t v3 = *a3, (v3 - 64) <= 0xFFFFFFC0))
  {
    DeviceFaultNotify("glgnss.cpp", 244, "Add", (char)"(GlIntU32)eGnss < NUM_GNSS && rtGnssId.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 244, "(GlIntU32)eGnss < NUM_GNSS && rtGnssId.isValid()");
  }
  uint64_t v4 = *(void *)(*(void *)(result + 168) + 24 * a2);
  *(_DWORD *)(v4 + ((v3 >> 3) & 0x1C)) |= 1 << v3;
  return result;
}

#error "2638EFDC4: call analysis failed (funcsize=57)"

uint64_t BlueFin::GlPeSvHealthHelper::OnNewIntegrityInfo(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unsigned int a27,char a28)
{
  uint64_t result = (uint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v44, (const BlueFin::GlGnssSet *)&BlueFin::GlPeSvHealthHelper::s_otAllSvs);
  uint64_t v31 = a27;
  char v32 = a28;
  if (a27 != 6 || a28 != 14)
  {
    uint64_t v34 = a2 + 8;
    uint64_t v35 = a2 + 72;
    do
    {
      int v42 = v31;
      char v43 = v32;
      uint64_t v36 = 1 << (v32 - 1);
      uint64_t v37 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v31];
      if ((*(void *)(v34 + 8 * v37) & v36) != 0)
      {
        uint64_t v38 = *(void *)(v35 + 8 * v37);
        int v39 = (*(uint64_t (**)(unsigned char *, int *))(*(void *)a1 + 40))(a1, &v42);
        if ((v38 & v36) != 0)
        {
          uint64_t v40 = 1;
LABEL_11:
          (*(void (**)(unsigned char *, int *, uint64_t))(*(void *)a1 + 32))(a1, &v42, v40);
          goto LABEL_12;
        }
        if ((v39 & 0xFFFFFFFD) == 1)
        {
          uint64_t v40 = 0;
          goto LABEL_11;
        }
      }
LABEL_12:
      uint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&v44);
      uint64_t v31 = a27;
      char v32 = a28;
    }
    while (a27 != 6 || a28 != 14);
  }
  a1[2274] = 1;
  if (a1[2272] && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    uint64_t result = (*(uint64_t (**)(unsigned char *, void, void))(*(void *)a1 + 24))(a1, 0, 0);
  }
  a1[2272] = 0;
  return result;
}

uint64_t BlueFin::GlPeSvHealthHelper::DeserializeHelper(BlueFin::GlPeSvHealthHelper *this, BlueFin::GlSysLogEntry *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unsigned int a29,unsigned __int8 a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  STACK[0x13F8] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 2273))
  {
    *((unsigned char *)this + 2273) = 1;
    BlueFin::GlPeSvHealthData::GlPeSvHealthData((BlueFin::GlPeSvHealthData *)&a34);
    uint64_t v35 = BlueFin::GlPeSvHealthData::Deserialize((BlueFin::GlPeSvHealthData *)&a34, a2);
    if (!v35) {
      return v35;
    }
    if (*((unsigned char *)this + 2274))
    {
      BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v60, (const BlueFin::GlGnssSet *)&BlueFin::GlPeSvHealthHelper::s_otAllSvs);
      while (a29 != 6 || a30 != 14)
      {
        unsigned int v58 = a29;
        unsigned __int8 v59 = a30;
        int v40 = (*(uint64_t (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *))(*(void *)this + 40))(this, &v58);
        uint64_t State = BlueFin::GlPeSvHealthData::GetState((uint64_t)&a34, &v58);
        if (v40 != 1 && State != 1) {
          (*(void (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *, uint64_t))(*(void *)this + 32))(this, &v58, State);
        }
        BlueFin::GlGnssSetIterator::operator++((uint64_t)&v60);
      }
    }
    else if (&a34 != (char *)this)
    {
      memcpy((char *)this + 8, &a35, 0x174uLL);
      BlueFin::GlPeGnssL5HealthData::operator=((uint64_t)this + 380, (uint64_t)&STACK[0xC9C]);
    }
    if (!*((_DWORD *)this + 569)) {
      *((_DWORD *)this + 569) = a3;
    }
    unsigned int v43 = *((_DWORD *)this + 94);
    BOOL v44 = v43 >= a3;
    int v45 = v43 - a3;
    if (v45 == 0 || !v44) {
      int v45 = 1;
    }
    *((_DWORD *)this + 94) = v45;
    BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v60, (const BlueFin::GlGnssSet *)&BlueFin::GlPeSvHealthHelper::s_otAllSvs);
    while (1)
    {
      if (a29 == 6 && a30 == 14)
      {
        BlueFin::GlPeGnssL5HealthData::operator=((uint64_t)this + 380, (uint64_t)&STACK[0xC9C]);
        return v35;
      }
      unsigned int v58 = a29;
      unsigned __int8 v59 = a30;
      int v47 = (*(uint64_t (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *))(*(void *)this + 40))(this, &v58);
      int v48 = *(_DWORD *)(*((void *)this + 283) + 32);
      BOOL v49 = (v47 & 0xFFFFFFFD) == 1;
      if ((v48 & 0x40000) == 0) {
        BOOL v49 = v47 == 4;
      }
      if (v49)
      {
        double v50 = "BDS";
        int v51 = "GPS";
        switch(v58)
        {
          case 0u:
            break;
          case 1u:
            int v51 = "SBAS";
            break;
          case 2u:
            int v51 = "GLNS";
            break;
          case 3u:
            int v51 = "QZSS";
            break;
          case 4u:
            goto LABEL_36;
          default:
            double v52 = "<->";
            if (v58 == 6) {
              double v52 = "NIC";
            }
            double v50 = "GAL";
            if (v58 != 5) {
              double v50 = v52;
            }
LABEL_36:
            int v51 = v50;
            break;
        }
        int v53 = (v48 & 0x40000) != 0 ? "un" : (const char *)&unk_263B6E70D;
        GlCustomLog(11, "SVHM: Health(%s,%2d): Inconsistent state %d on %sconnected device!\n", v51, v59, v47, v53);
        (*(void (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *, void))(*(void *)this + 32))(this, &v58, 0);
        if (v58) {
          break;
        }
      }
LABEL_54:
      BlueFin::GlPeSvHealthHelper::LogState((uint64_t)this, (uint64_t)&v58);
      BlueFin::GlGnssSetIterator::operator++((uint64_t)&v60);
    }
    if (!(*(unsigned int (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *))(*(void *)this + 40))(this, &v58))
    {
      uint64_t v54 = *(void (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *, uint64_t))(*(void *)this + 32);
      if ((*(unsigned char *)(*((void *)this + 283) + 34) & 4) == 0)
      {
        uint64_t v55 = 3;
LABEL_48:
        v54(this, &v58, v55);
        goto LABEL_49;
      }
      v54(this, &v58, 4);
      int v56 = *((_DWORD *)this + 94);
      if (v56)
      {
        uint64_t v55 = (10800 - v56);
        uint64_t v54 = *(void (**)(BlueFin::GlPeSvHealthHelper *, unsigned int *, uint64_t))(*(void *)this + 48);
        goto LABEL_48;
      }
      *((_DWORD *)this + 94) = 10800;
    }
LABEL_49:
    if (*((unsigned char *)this + 2272) && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(BlueFin::GlPeSvHealthHelper *, void, void))(*(void *)this + 24))(this, 0, 0);
    }
    *((unsigned char *)this + 2272) = 0;
    goto LABEL_54;
  }
  return 0;
}

uint64_t BlueFin::GlPeSvHealthHelper::LogState(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  int v5 = v4;
  int v6 = *(_DWORD *)a2;
  uint64_t v7 = "BDS";
  int v8 = "GPS";
  switch(*(_DWORD *)a2)
  {
    case 0:
      break;
    case 1:
      int v8 = "SBAS";
      break;
    case 2:
      int v8 = "GLNS";
      break;
    case 3:
      int v8 = "QZSS";
      break;
    case 4:
      goto LABEL_7;
    default:
      uint64_t v7 = "<->";
      if (v6 == 6) {
        uint64_t v7 = "NIC";
      }
      if (v6 == 5) {
        uint64_t v7 = "GAL";
      }
LABEL_7:
      int v8 = v7;
      break;
  }
  int v9 = *(unsigned __int8 *)(a2 + 4);
  unsigned __int8 v10 = BlueFin::GlPeSvHealthHelper::LogState(BlueFin::GlGnss const&)const::acState[v4];
  int v11 = BlueFin::GlGnssSet::Has(a1 + 2304, (int *)a2);
  int v12 = BlueFin::GlGnssSet::Has(a1 + 2496, (int *)a2);
  uint64_t v13 = 78;
  if (v12) {
    uint64_t v14 = 89;
  }
  else {
    uint64_t v14 = 78;
  }
  if (v11) {
    uint64_t v13 = 89;
  }
  GlCustomLog(14, "SVHM: Health(%s,%2d):  State:%s  InEmergencySet:%c  InBlocklistSet:%c", v8, v9, v10, v13, v14);
  if (v5 == 4 && *(_DWORD *)a2 != 0)
  {
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2);
    GlCustomLog(14, "  TimeOut:%d", v16);
  }

  return GlCustomLog(14, "\n");
}

uint64_t GlCustomLog(uint64_t result, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int *)(FireDeviceLog::StaticSetting::fInstance + 4);
  if (v2) {
    BOOL v3 = ((1 << (result & 7)) & v2) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v4 = *(unsigned int *)(FireDeviceLog::StaticSetting::fInstance + 8);
    if (v4 && ((1 << (result >> 3)) & v4) != 0)
    {
      uint64_t v7 = (result & 7) - 4;
      if (v7 > 3) {
        uint64_t v8 = 2;
      }
      else {
        uint64_t v8 = dword_263BA65A0[v7];
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_0, memory_order_acquire) & 1) == 0)
      {
        int v15 = result;
        int v16 = __cxa_guard_acquire((__guard *)&_MergedGlobals_0);
        LODWORD(result) = v15;
        if (v16)
        {
          *(void *)&byte_26B4345B8[16] = 0;
          *(_OWORD *)byte_26B4345B8 = 0uLL;
          __cxa_atexit(MEMORY[0x263F8C0B8], byte_26B4345B8, &dword_2638D2000);
          __cxa_guard_release((__guard *)&_MergedGlobals_0);
          LODWORD(result) = v15;
        }
      }
      uint64_t v9 = *(void *)&byte_26B4345B8[8];
      if (byte_26B4345B8[23] >= 0) {
        uint64_t v9 = byte_26B4345B8[23];
      }
      if (!v9)
      {
        unsigned int v10 = result >> 3;
        uint64_t v11 = 35;
        switch(v10)
        {
          case 0u:
            goto LABEL_20;
          case 1u:
            break;
          case 2u:
            uint64_t v11 = 36;
            break;
          case 3u:
            uint64_t v11 = 64;
            break;
          default:
            if (v10 == 15)
            {
              uint64_t v11 = 37;
            }
            else if (v10 == 29)
            {
LABEL_20:
              uint64_t v11 = 61;
            }
            else
            {
              uint64_t v11 = 63;
            }
            break;
        }
        FireDeviceLog::GetLineLeading((DeviceCommon *)v11, v8, __str);
        if (byte_26B4345B8[23] < 0) {
          operator delete(*(void **)byte_26B4345B8);
        }
        *(std::string *)byte_26B4345B8 = __str[0];
      }
      int v12 = vsnprintf((char *)__str, 0x100uLL, __format, va);
      uint64_t result = (uint64_t)std::string::append((std::string *)byte_26B4345B8, (const std::string::value_type *)__str);
      if (v12 >= 255) {
        uint64_t result = (uint64_t)std::string::append((std::string *)byte_26B4345B8, "...");
      }
      if (byte_26B4345B8[23] < 0)
      {
        uint64_t v14 = *(char **)byte_26B4345B8;
        if (*(unsigned char *)(*(void *)byte_26B4345B8 + *(void *)&byte_26B4345B8[8] - 1) != 10) {
          return result;
        }
        uint64_t v13 = --*(void *)&byte_26B4345B8[8];
      }
      else
      {
        if (*((unsigned char *)&_MergedGlobals_0 + byte_26B4345B8[23] + 7) != 10) {
          return result;
        }
        uint64_t v13 = byte_26B4345B8[23] - 1;
        byte_26B4345B8[23] = (byte_26B4345B8[23] - 1) & 0x7F;
        uint64_t v14 = byte_26B4345B8;
      }
      v14[v13] = 0;
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(FireResourceMgr::fInstance + 16) + 16))(*(void *)(FireResourceMgr::fInstance + 16), v8, byte_26B4345B8);
      if (byte_26B4345B8[23] < 0)
      {
        **(unsigned char **)byte_26B4345B8 = 0;
        *(void *)&byte_26B4345B8[8] = 0;
      }
      else
      {
        byte_26B4345B8[0] = 0;
        byte_26B4345B8[23] = 0;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeSvHealthHelper::SetState(unsigned char *a1, unsigned int *a2, unsigned int a3)
{
  int v6 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 40))(a1);
  BlueFin::GlPeSvHealthData::SetState((uint64_t)a1, a2, a3);
  a1[2272] = v6 != a3;

  return BlueFin::GlPeSvHealthHelper::LogState((uint64_t)a1, (uint64_t)a2);
}

uint64_t *BlueFin::GlPeSvHealthData::SetState(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  int Index = BlueFin::GlPeSvHealthData::getIndex(a1, a2);
  if (Index < 0)
  {
    DeviceFaultNotify("glpe_svhealthmgr.cpp", 158, "SetState", (char)"iIndex >= 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svhealthmgr.cpp", 158, "iIndex >= 0");
  }
  v7[0] = a1 + 8;
  v7[1] = 0;
  char v8 = 0;
  int v10 = 0;
  long long v9 = xmmword_263BB9590;
  char v11 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v7, 3 * Index);
  return BlueFin::GlBitBuffer::PutU(v7, a3, 3u);
}

uint64_t BlueFin::GlPeGloEphemeris::GlPeGloEphemeris(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_WORD *)(a1 + 8) = 2593;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 16) = a1 + 32;
  *(int32x2_t *)(a1 + 24) = vdup_n_s32(0xFF9222FF);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_270EC0F88;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a2;
  if ((a4 + 8) >= 0xF)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 66, "GlPeGloEphemeris", (char)"IS_GLONASS_FCN(cFcn) || cFcn == INVALID_FCN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 66, "IS_GLONASS_FCN(cFcn) || cFcn == INVALID_FCN");
  }
  BlueFin::GlPeGloEphemeris::PutCmpSignedField((BlueFin::GlPeGloEphemeris *)a1, 4, a4);
  int v12 = *a3;
  unsigned int v13 = 900 * *a3;
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 216))(a1, 6, v13 / 0xE10uLL);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 7, ((v13 % 0xE10) & 0xFFFC) / 0x3C);
  HIDWORD(v14) = 60 * v12;
  LODWORD(v14) = 60 * v12;
  (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)a1 + 216))(a1, 8, (v14 >> 2) > 0x4444444);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 9, *a3);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 10, a3[1]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 11, a3[2]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 12, a3[3]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 13, a3[4]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 14, a3[5]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 15, a3[6]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 16, a3[7]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 17, a3[8]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 18, a3[9]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 19, a3[10]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 20, a3[11]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 21, a3[12]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 23, a3[13]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 24, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 25, a6);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 26, a3[14]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 27, *((unsigned __int8 *)a3 + 60) + 1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 28, a3[16]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 29, a3[17]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 30, a3[18]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 31, a3[19]);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 32, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 33, 0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 34, v15);
  (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)a1 + 216))(a1, 35, a5 != 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 36, a5);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 37, 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 38, a7 ^ 1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 2, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 39, a7);
  return a1;
}

uint64_t *BlueFin::GlPeGloEphemeris::PutCmpUnsignedField(BlueFin::GlPeGloEphemeris *this, int a2, unsigned int a3)
{
  int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  char v7 = a2 - 2;
  if ((a2 - 2) >= 0x26 || ((0x3FFFFFFFFDuLL >> v7) & 1) == 0)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 572, "PutCmpUnsignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 572, "0");
  }
  unsigned int v8 = byte_263BB4B58[v7];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, dword_263BB4AC0[v7]);
  return BlueFin::GlBitBuffer::PutU(v10, a3, v8);
}

uint64_t *BlueFin::GlPeGloEphemeris::PutCmpSignedField(BlueFin::GlPeGloEphemeris *this, int a2, int a3)
{
  int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v14 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v13, v5, v6);
  switch(a2)
  {
    case 4:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, 0);
      unsigned int v7 = a3 + 32;
      goto LABEL_32;
    case 11:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, 0x8Fu);
      if (a3 >= 0) {
        unsigned int v7 = a3;
      }
      else {
        unsigned int v7 = 1024 - a3;
      }
      unsigned int v8 = 11;
      return BlueFin::GlBitBuffer::PutU(v13, v7, v8);
    case 12:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, 0xD5u);
      if (a3 >= 0) {
        unsigned int v7 = a3;
      }
      else {
        unsigned int v7 = 0x200000 - a3;
      }
      unsigned int v8 = 22;
      return BlueFin::GlBitBuffer::PutU(v13, v7, v8);
    case 13:
      unsigned int v9 = 48;
      goto LABEL_14;
    case 14:
      unsigned int v9 = 115;
      goto LABEL_14;
    case 15:
      unsigned int v9 = 186;
LABEL_14:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, v9);
      if (a3 >= 0) {
        unsigned int v7 = a3;
      }
      else {
        unsigned int v7 = 0x4000000 - a3;
      }
      unsigned int v8 = 27;
      return BlueFin::GlBitBuffer::PutU(v13, v7, v8);
    case 16:
      unsigned int v10 = 19;
      goto LABEL_21;
    case 17:
      unsigned int v10 = 86;
      goto LABEL_21;
    case 18:
      unsigned int v10 = 157;
LABEL_21:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, v10);
      if (a3 >= 0) {
        unsigned int v7 = a3;
      }
      else {
        unsigned int v7 = 0x800000 - a3;
      }
      unsigned int v8 = 24;
      return BlueFin::GlBitBuffer::PutU(v13, v7, v8);
    case 19:
      unsigned int v11 = 43;
      goto LABEL_29;
    case 20:
      unsigned int v11 = 110;
      goto LABEL_29;
    case 21:
      unsigned int v11 = 181;
      goto LABEL_29;
    case 28:
      unsigned int v11 = 235;
LABEL_29:
      BlueFin::GlBitBuffer::Position((uint64_t)v13, v11);
      if (a3 >= 0) {
        unsigned int v7 = a3;
      }
      else {
        unsigned int v7 = 16 - a3;
      }
LABEL_32:
      unsigned int v8 = 5;
      return BlueFin::GlBitBuffer::PutU(v13, v7, v8);
    default:
      DeviceFaultNotify("glpe_glnephmgr.cpp", 597, "PutCmpSignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 597, "0");
  }
}

uint64_t BlueFin::GlPeGalEphemeris::GlPeGalEphemeris(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 8) = 4177;
  *(void *)(a1 + 16) = a1 + 32;
  *(int32x2_t *)(a1 + 24) = vdup_n_s32(0xFF9222FF);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)a1 = &unk_270EC0C88;
  if (*(_DWORD *)(a2 + 4))
  {
    DeviceFaultNotify("glpe_galephmgr.cpp", 62, "GlPeGalEphemeris", (char)"rotUncmprsdEph.ExtensionBit == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 62, "rotUncmprsdEph.ExtensionBit == 0");
  }
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 0, (*(unsigned char *)a2 + 1));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 4u, *(_DWORD *)(a2 + 16));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 3u, *(_DWORD *)(a2 + 20));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 5u, *(_DWORD *)(a2 + 24));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 6, *(_DWORD *)(a2 + 48));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 7u, *(_DWORD *)(a2 + 52));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 8, *(_DWORD *)(a2 + 56));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 9, *(_DWORD *)(a2 + 60));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 10, *(_DWORD *)(a2 + 64));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 11, *(_DWORD *)(a2 + 68));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 12, *(_DWORD *)(a2 + 72));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 13, *(_DWORD *)(a2 + 76));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 14, *(_DWORD *)(a2 + 80));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 0xFu, *(_DWORD *)(a2 + 84));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 16, *(_DWORD *)(a2 + 88));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 0x11u, *(_DWORD *)(a2 + 92));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 0x12u, *(_DWORD *)(a2 + 96));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 19, *(_DWORD *)(a2 + 108));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 20, *(_DWORD *)(a2 + 112));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 21, *(_DWORD *)(a2 + 116));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 22, *(_DWORD *)(a2 + 120));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 23, *(_DWORD *)(a2 + 124));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 24, *(_DWORD *)(a2 + 128));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 25, *(_DWORD *)(a2 + 132));
  BlueFin::GlPeGalEphemeris::PutCmpSignedField((BlueFin::GlPeGalEphemeris *)a1, 26, *(_DWORD *)(a2 + 136));
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 0x1Bu, a3 != 0);
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 0x1Cu, a3);
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 1u, 1u);
  BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)a1, 2u, 1u);
  return a1;
}

uint64_t *BlueFin::GlPeGalEphemeris::PutCmpSignedField(BlueFin::GlPeGalEphemeris *this, int a2, int a3)
{
  int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  char v7 = a2 - 6;
  if ((a2 - 6) >= 0x15 || ((0x1FE5FDu >> v7) & 1) == 0)
  {
    DeviceFaultNotify("glpe_galephmgr.cpp", 707, "PutCmpSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 707, "0");
  }
  unsigned int v8 = byte_263BB4738[v7];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, dword_263BB46E4[v7]);
  return BlueFin::GlBitBuffer::PutU(v10, a3 + (0xFFFFFFFFuLL >> (32 - v8)) + 1, v8);
}

uint64_t *BlueFin::GlPeGalEphemeris::PutCmpUnsignedField(BlueFin::GlPeGalEphemeris *this, unsigned int a2, unsigned int a3)
{
  int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  if (a2 >= 0x1D)
  {
    DeviceFaultNotify("glpe_galephmgr.cpp", 677, "PutCmpUnsignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", 677, "0");
  }
  unsigned int v7 = dword_263BB4650[(char)a2];
  unsigned int v8 = byte_263BB46C4[(char)a2];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, v7);
  return BlueFin::GlBitBuffer::PutU(v10, a3, v8);
}

uint64_t BlueFin::GlPeBdsEphemeris::GlPeBdsEphemeris(uint64_t a1, int *a2, unsigned int a3)
{
  *(unsigned char *)(a1 + 8) = 65;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v4 = a2[14];
  unsigned int v16 = a2[15];
  unsigned int v17 = a2[16];
  unsigned int v21 = a2[20];
  unsigned int v22 = a2[23];
  unsigned int v23 = a2[21];
  unsigned int v24 = a2[22];
  int v28 = a2[30];
  unsigned int v29 = a2[29];
  unsigned int v5 = a2[6];
  uint64_t v6 = v5 & 0x1F;
  uint64_t v7 = (v5 >> 5) & 0x1F;
  unsigned int v18 = a2[17];
  unsigned int v19 = a2[18];
  unsigned int v20 = a2[19];
  unsigned int v30 = a2[31];
  unsigned int v31 = a2[32];
  unsigned int v26 = a2[27];
  unsigned int v27 = a2[28];
  unsigned int v32 = a2[33];
  unsigned int v33 = a2[34];
  unsigned int v25 = a2[24];
  uint64_t v9 = a2[12];
  uint64_t v8 = a2[13];
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  int v12 = *a2;
  *(_WORD *)(a1 + 8) = 4673;
  *(void *)(a1 + 16) = a1 + 32;
  *(int32x2_t *)(a1 + 24) = vdup_n_s32(0xFF9222FF);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = &unk_270EBFA28;
  unsigned __int8 v13 = v12 + 1;
  BlueFin::GlPeBdsEphemeris::PutCmpUnsignedField((BlueFin::GlPeBdsEphemeris *)a1, 32, 1u);
  BOOL v14 = (double)v28 * 0.00000000146291808 > 0.2 || (double)v22 * 0.00000190734863 <= 6400.0;
  (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)a1 + 216))(a1, 33, v14);
  (*(void (**)(uint64_t, void, void))(*(void *)a1 + 216))(a1, 0, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 4, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 3, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 29, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, 6, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, 8, v4);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 9, v16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 10, v17);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 11, v18);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 12, v19);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 13, v20);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 14, v21);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 15, v23);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 16, v24);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 17, v22);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 18, v25);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 19, v26);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 20, v27);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 21, v29);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 22, v28);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 23, v30);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 24, v31);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 25, v32);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 26, v33);
  (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)a1 + 216))(a1, 27, a3 != 0);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 28, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 1, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 2, 1);
  return a1;
}

uint64_t *BlueFin::GlPeBdsEphemeris::PutCmpUnsignedField(BlueFin::GlPeBdsEphemeris *this, signed int a2, unsigned int a3)
{
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  int v7 = 4 * *((unsigned __int8 *)this + 9);
  int v12 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v11, v6, v7);
  if (a2 > 26)
  {
    switch(a2)
    {
      case 27:
        a2 = 1;
        unsigned int v8 = 562;
        goto LABEL_17;
      case 32:
        a2 = 1;
        unsigned int v8 = 14;
        goto LABEL_17;
      case 33:
        a2 = 1;
        unsigned int v8 = 15;
        goto LABEL_17;
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        unsigned int v8 = 0;
        a2 = 8;
        goto LABEL_17;
      case 1:
        a2 = 6;
        unsigned int v8 = 8;
        goto LABEL_17;
      case 2:
        a2 = 1;
        unsigned int v8 = 561;
        goto LABEL_17;
    }
  }
  if (BlueFin::GlPeBdsEphemeris::isD2Format(this))
  {
    unsigned int v8 = 22;
    switch(a2)
    {
      case 3:
        a2 = 1;
        goto LABEL_50;
      case 4:
        goto LABEL_17;
      case 5:
        a2 = 5;
        unsigned int v8 = 17;
        goto LABEL_17;
      case 6:
        a2 = 10;
        unsigned int v8 = 26;
        goto LABEL_17;
      case 7:
        a2 = 17;
        unsigned int v8 = 61;
        goto LABEL_17;
      case 8:
        a2 = 11;
        unsigned int v8 = 130;
        goto LABEL_17;
      case 9:
        a2 = 22;
        unsigned int v8 = 108;
        goto LABEL_17;
      case 10:
        a2 = 24;
        unsigned int v8 = 84;
        goto LABEL_17;
      case 11:
        a2 = 18;
        unsigned int v8 = 395;
        goto LABEL_17;
      case 12:
        a2 = 16;
        unsigned int v8 = 146;
        goto LABEL_17;
      case 13:
        goto LABEL_20;
      case 14:
        a2 = 18;
        unsigned int v8 = 162;
        goto LABEL_17;
      case 15:
        BlueFin::GlBitBuffer::Position((uint64_t)v11, 0xC6u);
        BlueFin::GlBitBuffer::PutU(v11, a3 >> 22, 0xAu);
        a2 = 22;
        goto LABEL_54;
      case 16:
        a2 = 18;
        unsigned int v8 = 180;
        goto LABEL_17;
      case 17:
        a2 = 32;
        goto LABEL_67;
      case 18:
        a2 = 17;
        unsigned int v8 = 330;
        goto LABEL_17;
      case 19:
        BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x106u);
        BlueFin::GlBitBuffer::PutU(v11, a3 >> 8, 0xAu);
        a2 = 8;
        goto LABEL_58;
      case 20:
        a2 = 32;
        goto LABEL_62;
      case 21:
        a2 = 18;
        unsigned int v8 = 312;
        goto LABEL_17;
      case 22:
        BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x15Bu);
        BlueFin::GlBitBuffer::PutU(v11, a3 >> 11, 0x15u);
        BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x22Eu);
        BlueFin::GlBitBuffer::PutU(v11, a3 >> 9, 2u);
        a2 = 9;
        goto LABEL_69;
      case 23:
        a2 = 18;
        unsigned int v8 = 377;
        goto LABEL_17;
      case 24:
        BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x1B5u);
        BlueFin::GlBitBuffer::PutU(v11, a3 >> 5, 0x1Bu);
        a2 = 5;
        unsigned int v8 = 507;
        goto LABEL_17;
      case 25:
        a2 = 24;
        unsigned int v8 = 413;
        goto LABEL_17;
      case 26:
        a2 = 14;
        unsigned int v8 = 512;
        goto LABEL_17;
      case 28:
        a2 = 13;
        goto LABEL_47;
      case 29:
        a2 = 5;
        unsigned int v8 = 141;
        goto LABEL_17;
      default:
        DeviceFaultNotify("glpe_bdephmgr.cpp", 738, "PutCmpUnsignedField", (char)"0");
        int v10 = 738;
        goto LABEL_76;
    }
  }
  unsigned int v8 = 95;
  switch(a2)
  {
    case 3:
      a2 = 1;
      unsigned int v8 = 136;
      break;
    case 4:
      break;
    case 5:
      a2 = 5;
      unsigned int v8 = 137;
      break;
    case 6:
      a2 = 10;
      unsigned int v8 = 65;
      break;
    case 7:
      a2 = 17;
LABEL_47:
      unsigned int v8 = 48;
      break;
    case 8:
      a2 = 11;
      unsigned int v8 = 80;
      break;
    case 9:
      a2 = 22;
LABEL_50:
      unsigned int v8 = 16;
      break;
    case 10:
      a2 = 24;
      unsigned int v8 = 112;
      break;
    case 11:
      a2 = 18;
      unsigned int v8 = 286;
      break;
    case 12:
      a2 = 16;
LABEL_54:
      unsigned int v8 = 240;
      break;
    case 13:
LABEL_20:
      a2 = 32;
      unsigned int v8 = 208;
      break;
    case 14:
      BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x100u);
      BlueFin::GlBitBuffer::PutU(v11, a3 >> 2, 0x10u);
      a2 = 2;
      unsigned int v8 = 326;
      break;
    case 15:
      a2 = 32;
      unsigned int v8 = 176;
      break;
    case 16:
      a2 = 18;
LABEL_58:
      unsigned int v8 = 304;
      break;
    case 17:
      a2 = 32;
      unsigned int v8 = 144;
      break;
    case 18:
      BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x148u);
      BlueFin::GlBitBuffer::PutU(v11, a3 >> 15, 2u);
      a2 = 15;
      unsigned int v8 = 496;
      break;
    case 19:
      a2 = 18;
LABEL_62:
      unsigned int v8 = 464;
      break;
    case 20:
      a2 = 32;
      unsigned int v8 = 336;
      break;
    case 21:
      a2 = 18;
      unsigned int v8 = 400;
      break;
    case 22:
      a2 = 32;
      unsigned int v8 = 432;
      break;
    case 23:
      BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x142u);
      BlueFin::GlBitBuffer::PutU(v11, a3 >> 14, 4u);
      a2 = 14;
LABEL_67:
      unsigned int v8 = 272;
      break;
    case 24:
      a2 = 32;
LABEL_69:
      unsigned int v8 = 368;
      break;
    case 25:
      BlueFin::GlBitBuffer::Position((uint64_t)v11, 0x1E2u);
      BlueFin::GlBitBuffer::PutU(v11, a3 >> 13, 0xBu);
      a2 = 13;
      unsigned int v8 = 511;
      break;
    case 26:
      a2 = 14;
      unsigned int v8 = 418;
      break;
    case 28:
      a2 = 13;
      unsigned int v8 = 99;
      break;
    case 29:
      a2 = 5;
      unsigned int v8 = 75;
      break;
    default:
      DeviceFaultNotify("glpe_bdephmgr.cpp", 772, "PutCmpUnsignedField", (char)"0");
      int v10 = 772;
LABEL_76:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", v10, "0");
  }
LABEL_17:
  BlueFin::GlBitBuffer::Position((uint64_t)v11, v8);
  return BlueFin::GlBitBuffer::PutU(v11, a3, a2);
}

uint64_t *BlueFin::GlPeBdsEphemeris::PutCmpSignedField(BlueFin::GlPeBdsEphemeris *this, int a2, int a3)
{
  uint64_t v6 = (unsigned int *)*((void *)this + 2);
  int v7 = 4 * *((unsigned __int8 *)this + 9);
  int v21 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v20, v6, v7);
  if (BlueFin::GlPeBdsEphemeris::isD2Format(this))
  {
    switch(a2)
    {
      case 6:
        unsigned int v8 = 26;
        goto LABEL_6;
      case 8:
        unsigned int v12 = 130;
        goto LABEL_24;
      case 9:
        unsigned int v13 = 108;
        goto LABEL_26;
      case 10:
        unsigned int v14 = 84;
        goto LABEL_28;
      case 11:
        unsigned int v15 = 395;
        goto LABEL_37;
      case 12:
        unsigned int v16 = 146;
        goto LABEL_31;
      case 13:
        goto LABEL_7;
      case 14:
        unsigned int v15 = 162;
        goto LABEL_37;
      case 16:
        unsigned int v15 = 180;
        goto LABEL_37;
      case 19:
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x106u);
        BlueFin::GlBitBuffer::PutU(v20, (a3 >> 8) + 1024, 0xAu);
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x130u);
        unsigned int v9 = a3;
        unsigned int v10 = 8;
        return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
      case 20:
        unsigned int v11 = 464;
        goto LABEL_41;
      case 21:
        unsigned int v15 = 312;
        goto LABEL_37;
      case 22:
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x15Bu);
        BlueFin::GlBitBuffer::PutU(v20, (a3 >> 11) + 0x200000, 0x15u);
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x22Eu);
        BlueFin::GlBitBuffer::PutU(v20, a3 >> 9, 2u);
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x170u);
        unsigned int v9 = a3;
        unsigned int v10 = 9;
        return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
      case 23:
        unsigned int v15 = 377;
        goto LABEL_37;
      case 24:
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x1B5u);
        BlueFin::GlBitBuffer::PutU(v20, (a3 >> 5) + 0x8000000, 0x1Bu);
        BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x1FBu);
        unsigned int v9 = a3;
        unsigned int v10 = 5;
        return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
      case 25:
        unsigned int v14 = 413;
        goto LABEL_28;
      case 26:
        unsigned int v17 = 512;
        goto LABEL_44;
      default:
        DeviceFaultNotify("glpe_bdephmgr.cpp", 805, "PutCmpSignedField", (char)"0");
        int v19 = 805;
        goto LABEL_49;
    }
  }
  switch(a2)
  {
    case 6:
      unsigned int v8 = 65;
LABEL_6:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v8);
      unsigned int v9 = a3 + 1024;
      unsigned int v10 = 10;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 8:
      unsigned int v12 = 80;
LABEL_24:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v12);
      unsigned int v9 = a3 + 2048;
      unsigned int v10 = 11;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 9:
      unsigned int v13 = 16;
LABEL_26:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v13);
      unsigned int v9 = a3 + 0x400000;
      unsigned int v10 = 22;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 10:
      unsigned int v14 = 112;
LABEL_28:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v14);
      unsigned int v9 = a3 + 0x1000000;
      unsigned int v10 = 24;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 11:
      unsigned int v15 = 286;
      goto LABEL_37;
    case 12:
      unsigned int v16 = 240;
LABEL_31:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v16);
      unsigned int v9 = a3 + 0x10000;
      unsigned int v10 = 16;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 13:
LABEL_7:
      unsigned int v11 = 208;
      goto LABEL_41;
    case 14:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x100u);
      BlueFin::GlBitBuffer::PutU(v20, (a3 >> 2) + 0x10000, 0x10u);
      BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x146u);
      unsigned int v9 = a3;
      unsigned int v10 = 2;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 16:
      unsigned int v15 = 304;
      goto LABEL_37;
    case 19:
      unsigned int v15 = 464;
      goto LABEL_37;
    case 20:
      unsigned int v11 = 336;
      goto LABEL_41;
    case 21:
      unsigned int v15 = 400;
LABEL_37:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v15);
      unsigned int v9 = a3 + 0x40000;
      unsigned int v10 = 18;
      return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
    case 22:
      unsigned int v11 = 432;
      goto LABEL_41;
    case 23:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x142u);
      BlueFin::GlBitBuffer::PutU(v20, (a3 >> 14) + 16, 4u);
      BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x110u);
      unsigned int v9 = a3;
      goto LABEL_45;
    case 24:
      unsigned int v11 = 368;
LABEL_41:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v11);
      unsigned int v9 = a3;
      unsigned int v10 = 32;
      break;
    case 25:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x1E2u);
      BlueFin::GlBitBuffer::PutU(v20, (a3 >> 13) + 2048, 0xBu);
      BlueFin::GlBitBuffer::Position((uint64_t)v20, 0x1FFu);
      unsigned int v9 = a3;
      unsigned int v10 = 13;
      break;
    case 26:
      unsigned int v17 = 418;
LABEL_44:
      BlueFin::GlBitBuffer::Position((uint64_t)v20, v17);
      unsigned int v9 = a3 + 0x4000;
LABEL_45:
      unsigned int v10 = 14;
      break;
    default:
      DeviceFaultNotify("glpe_bdephmgr.cpp", 830, "PutCmpSignedField", (char)"0");
      int v19 = 830;
LABEL_49:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", v19, "0");
  }
  return BlueFin::GlBitBuffer::PutU(v20, v9, v10);
}

uint64_t *BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField(BlueFin::GlPeGpsEphemerisBase *this, int a2, int a3)
{
  unsigned int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  char v7 = a2 - 6;
  if ((a2 - 6) >= 0x15 || ((0x1FE5FDu >> v7) & 1) == 0)
  {
    GlCustomLog(11, "GlPeGpsEphemerisBase::PutCmpSignedField: Illegal field index:%d\n", a2);
    DeviceFaultNotify("glpe_ephmgr.cpp", 3046, "PutCmpSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3046, "0");
  }
  unsigned int v8 = byte_263BB43AC[v7];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, dword_263BB4358[v7]);
  return BlueFin::GlBitBuffer::PutU(v10, a3 + (0xFFFFFFFFuLL >> (32 - v8)) + 1, v8);
}

uint64_t *BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField(BlueFin::GlPeGpsEphemerisBase *this, unsigned int a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  if (a2 >= 0x20)
  {
    GlCustomLog(11, "GlPeGpsEphemerisBase::PutCmpUnsignedField: Illegal field index:%d\n", a2);
    DeviceFaultNotify("glpe_ephmgr.cpp", 3014, "PutCmpUnsignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3014, "0");
  }
  unsigned int v7 = dword_263BB42B8[(char)a2];
  unsigned int v8 = byte_263BB4338[(char)a2];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, v7);
  return BlueFin::GlBitBuffer::PutU(v10, a3, v8);
}

uint64_t *BlueFin::GlBitBuffer::PutU(uint64_t *this, unsigned int a2, unsigned int a3)
{
  if (*((unsigned char *)this + 16))
  {
    int v21 = "!m_bReadOnly";
    DeviceFaultNotify("glutl_bitbuffer.cpp", 365, "PutU", (char)"!m_bReadOnly");
    int v22 = 365;
    goto LABEL_22;
  }
  if (a3 >= 0x21)
  {
    int v21 = "ucBits <= 32";
    DeviceFaultNotify("glutl_bitbuffer.cpp", 366, "PutU", (char)"ucBits <= 32");
    int v22 = 366;
    goto LABEL_22;
  }
  if (!a3) {
    return this;
  }
  int v3 = *((_DWORD *)this + 9);
  unsigned int v5 = *((_DWORD *)this + 6);
  int v4 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v4 + a3;
  if (v4 + a3 > v5)
  {
    int v21 = "m_ulPosition <= m_ulLimit";
    DeviceFaultNotify("glutl_bitbuffer.cpp", 373, "PutU", (char)"m_ulPosition <= m_ulLimit");
    int v22 = 373;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", v22, v21);
  }
  unsigned int v6 = v4 + v3;
  unsigned int v7 = *((_DWORD *)this + 5);
  if (v7 > v6) {
    unsigned int v7 = 0;
  }
  unsigned int v8 = v6 - v7;
  unsigned int v9 = v8 >> 5;
  int v10 = v8 & 0x1F;
  if (v10) {
    int v11 = -1 << -(char)v10;
  }
  else {
    int v11 = 0;
  }
  unsigned int v12 = 32 - v10;
  unsigned int v13 = a2 & ~(0xFFFFFFFFLL << a3);
  unsigned int v14 = (~v11 >> a3) | v11;
  if (a3 == 32)
  {
    unsigned int v14 = v11;
    unsigned int v13 = a2;
  }
  uint64_t v15 = *this;
  unsigned int v16 = (unsigned int *)(*this + 4 * v9);
  unsigned int v17 = *v16 & v14;
  *unsigned int v16 = v17;
  char v18 = v12 - a3;
  if (v12 < a3)
  {
    char v19 = a3 - v12;
    if (v9 + 1 == *((_DWORD *)this + 5) >> 5) {
      unsigned int v20 = 0;
    }
    else {
      unsigned int v20 = v9 + 1;
    }
    *unsigned int v16 = v17 | (v13 >> v19);
    unsigned int v16 = (unsigned int *)(v15 + 4 * v20);
    unsigned int v17 = *v16 & (0xFFFFFFFFuLL >> v19);
    char v18 = 32 - v19;
  }
  *unsigned int v16 = v17 | (v13 << v18);
  return this;
}

uint64_t BlueFin::GlBitBuffer::Initialize(uint64_t this, unsigned int *a2, int a3)
{
  if ((a3 & 3) != 0)
  {
    DeviceFaultNotify("glutl_bitbuffer.cpp", 67, "Initialize", (char)"(ulChars & 0x03) == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", 67, "(ulChars & 0x03) == 0");
  }
  *(void *)this = a2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(_DWORD *)(this + 36) = 0;
  *(void *)(this + 24) = (8 * a3);
  *(_DWORD *)(this + 20) = 8 * a3;
  *(unsigned char *)(this + 40) = 0;
  return this;
}

uint64_t BlueFin::GlPeSvHealthData::GetState(uint64_t a1, unsigned int *a2)
{
  int Index = BlueFin::GlPeSvHealthData::getIndex(a1, a2);
  if (Index < 0)
  {
    DeviceFaultNotify("glpe_svhealthmgr.cpp", 168, "GetState", (char)"iIndex >= 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svhealthmgr.cpp", 168, "iIndex >= 0");
  }
  v5[0] = 0;
  v5[1] = a1 + 8;
  char v6 = 1;
  int v8 = 0;
  long long v7 = xmmword_263BB9590;
  char v9 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v5, 3 * Index);
  return BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v5, 3u);
}

uint64_t BlueFin::GlBitBuffer::Position(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 24) < a2)
  {
    DeviceFaultNotify("glutl_bitbuffer.cpp", 145, "Position", (char)"ulNewPosition <= m_ulLimit");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", 145, "ulNewPosition <= m_ulLimit");
  }
  *(_DWORD *)(this + 28) = a2;
  char v2 = *(unsigned char *)(this + 40);
  if (v2) {
    char v2 = *(_DWORD *)(this + 32) <= a2;
  }
  *(unsigned char *)(this + 40) = v2;
  return this;
}

uint64_t BlueFin::GlPeSvHealthData::getIndex(uint64_t a1, unsigned int *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 4);
  uint64_t v3 = *a2;
  BOOL v4 = v3 > 6 || v2 == 0;
  if (v4 || v2 > ((0xE243F0A181320uLL >> (8 * v3)) & 0x3F)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v2
  }
                        + BlueFin::GlPeSvHealthData::s_auiGnssBaseIndex[BlueFin::GlImplGnss::m_aucEnabledGnssTable[v3]]
                        - 1);
}

uint64_t BlueFin::GlBitBuffer::GetU(BlueFin::GlBitBuffer *this, unsigned int a2)
{
  if (a2 >= 0x21)
  {
    uint64_t v15 = "ucBits <= 32";
    DeviceFaultNotify("glutl_bitbuffer.cpp", 330, "GetU", (char)"ucBits <= 32");
    int v16 = 330;
    goto LABEL_16;
  }
  if (!a2) {
    return 0;
  }
  int v2 = *((_DWORD *)this + 9);
  unsigned int v4 = *((_DWORD *)this + 6);
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v3 + a2;
  if (v3 + a2 > v4)
  {
    uint64_t v15 = "m_ulPosition <= m_ulLimit";
    DeviceFaultNotify("glutl_bitbuffer.cpp", 337, "GetU", (char)"m_ulPosition <= m_ulLimit");
    int v16 = 337;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", v16, v15);
  }
  unsigned int v5 = v3 + v2;
  unsigned int v6 = *((_DWORD *)this + 5);
  if (v6 <= v5) {
    int v7 = *((_DWORD *)this + 5);
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = v5 - v7;
  unsigned int v9 = v8 >> 5;
  unsigned int v10 = 32 - (v8 & 0x1F);
  uint64_t v11 = *((void *)this + *((unsigned __int8 *)this + 16));
  unsigned int v12 = *(_DWORD *)(v11 + 4 * (v8 >> 5)) << v8;
  if (v10 < a2)
  {
    if (v9 + 1 == v6 >> 5) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v9 + 1;
    }
    v12 |= *(_DWORD *)(v11 + 4 * v13) >> v10;
  }
  return v12 >> -(char)a2;
}

uint64_t BlueFin::GlPeSvHealthData::Deserialize(BlueFin::GlPeSvHealthData *this, BlueFin::GlSysLogEntry *a2)
{
  v30[10] = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 2) != 63) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 1 > 5) {
    return 0;
  }
  if (v3 == 1)
  {
    BlueFin::GlSysLogEntry::GetU8(a2);
    unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  }
  if (v3 < 3) {
    unsigned int U8 = 29;
  }
  else {
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  if (U8 >= 0x5C) {
    uint64_t v7 = 92;
  }
  else {
    uint64_t v7 = U8;
  }
  unsigned int v8 = (_DWORD *)((char *)this + 8);
  bzero((char *)this + 8, 0x8B8uLL);
  *((_OWORD *)this + 140) = 0u;
  *((_DWORD *)this + 564) = 0;
  if (v7)
  {
    do
    {
      *v8++ = BlueFin::GlSysLogEntry::GetU32(a2);
      --v7;
    }
    while (v7);
  }
  if (*((unsigned char *)a2 + 12) == 1) {
    BlueFin::GlSysLogEntry::GetU32(a2);
  }
  *((_DWORD *)this + 94) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 5u)
  {
    uint64_t v9 = 0;
    v30[0] = (char *)this + 380;
    v30[1] = 32;
    v30[2] = (char *)this + 764;
    v30[3] = 0x30000000ALL;
    v30[4] = (char *)this + 884;
    v30[5] = 0x40000003FLL;
    v30[6] = (char *)this + 1640;
    v30[7] = 0x500000024;
    v30[8] = (char *)this + 2072;
    v30[9] = 0x60000000ELL;
    do
    {
      unsigned int v10 = &v30[2 * v9];
      uint64_t v11 = *((int *)v10 + 2);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = 0;
        do
        {
          int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
          unsigned int v14 = (_DWORD *)(*v10 + 12 * v12);
          _DWORD *v14 = U32;
          void v14[2] = BlueFin::GlSysLogEntry::GetU32(a2);
          int v15 = BlueFin::GlSysLogEntry::GetU32(a2);
          v14[1] = v15;
          int v16 = v14[2];
          if (v16)
          {
            int v17 = *((_DWORD *)v10 + 3);
            char v18 = "BDS";
            char v19 = "GPS";
            switch(v17)
            {
              case 0:
                break;
              case 1:
                char v19 = "SBAS";
                break;
              case 2:
                char v19 = "GLNS";
                break;
              case 3:
                char v19 = "QZSS";
                break;
              case 4:
                goto LABEL_28;
              default:
                unsigned int v20 = "<->";
                if (v17 == 6) {
                  unsigned int v20 = "NIC";
                }
                char v18 = "GAL";
                if (v17 != 5) {
                  char v18 = v20;
                }
LABEL_28:
                char v19 = v18;
                break;
            }
            ++v12;
            int v21 = "LTO";
            if (v15 == 1) {
              int v21 = "RTO";
            }
            BOOL v22 = v16 == 1;
            uint64_t v23 = 85;
            if (v22) {
              uint64_t v23 = 72;
            }
            GlCustomLog(15, "Deserial L5Health (%s %d) Health: %c Src: %s\n", v19, v12, v23, v21);
          }
          else
          {
            ++v12;
          }
        }
        while (v12 < v11);
      }
      ++v9;
    }
    while (v9 != 5);
    BlueFin::GlSysLogEntry::GetBuffer(a2, (unsigned __int8 *)this + 2240, 0x10u);
    int v24 = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 564) = v24;
    if (*((unsigned __int8 *)a2 + 12) <= 5u)
    {
      uint64_t v25 = 0;
      while (1)
      {
        uint64_t v26 = LODWORD(v30[2 * v25 + 1]);
        if ((int)v26 >= 1) {
          break;
        }
LABEL_48:
        if (++v25 == 5) {
          goto LABEL_49;
        }
      }
      unsigned int v27 = (int *)v30[2 * v25];
      while (1)
      {
        if (*v27)
        {
          int v28 = v27[1];
          int v29 = v24;
          if (v28 == 2) {
            goto LABEL_46;
          }
          if (v28 == 1) {
            break;
          }
        }
LABEL_47:
        v27 += 3;
        if (!--v26) {
          goto LABEL_48;
        }
      }
      int v29 = *v27 + 14400;
LABEL_46:
      *unsigned int v27 = v29;
      goto LABEL_47;
    }
  }
LABEL_49:
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 269);
  return 1;
}

uint64_t BlueFin::GlSysLogEntry::GetBuffer(BlueFin::GlSysLogEntry *this, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t U16 = BlueFin::GlSysLogEntry::GetU16(this);
  if (U16 > a3
    || (uint64_t v7 = U16, *((unsigned __int16 *)this + 11) - *((unsigned __int16 *)this + 10) < (int)U16))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 314, "GetBuffer", (char)"(usLength <= usSize) && (usLength <= (m_sDataSize - m_sReadIdx))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 314, "(usLength <= usSize) && (usLength <= (m_sDataSize - m_sReadIdx))");
  }
  if (U16)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
      uint64_t v10 = *((unsigned __int16 *)this + 10);
      *((_WORD *)this + 10) = v10 + 1;
      a2[(__int16)v8++] = *(unsigned char *)(v9 + v10);
    }
    while ((int)v7 > (__int16)v8);
  }
  return v7;
}

__n128 BlueFin::GlPeGnssL5HealthData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    for (uint64_t i = 0; i != 384; i += 12)
    {
      uint64_t v3 = a1 + i;
      *(void *)uint64_t v3 = *(void *)(a2 + i);
      *(_DWORD *)(v3 + 8) = *(_DWORD *)(a2 + i + 8);
    }
    for (uint64_t j = 0; j != 120; j += 12)
    {
      uint64_t v5 = a1 + j;
      *(void *)(v5 + 384) = *(void *)(a2 + j + 384);
      *(_DWORD *)(v5 + 392) = *(_DWORD *)(a2 + j + 392);
    }
    for (uint64_t k = 0; k != 756; k += 12)
    {
      uint64_t v7 = a1 + k;
      *(void *)(v7 + 504) = *(void *)(a2 + k + 504);
      *(_DWORD *)(v7 + 512) = *(_DWORD *)(a2 + k + 512);
    }
    for (uint64_t m = 0; m != 432; m += 12)
    {
      *(void *)(a1 + m + 1260) = *(void *)(a2 + m + 1260);
      *(_DWORD *)(a1 + m + 1268) = *(_DWORD *)(a2 + m + 1268);
    }
    for (uint64_t n = 0; n != 168; n += 12)
    {
      *(void *)(a1 + n + 1692) = *(void *)(a2 + n + 1692);
      *(_DWORD *)(a1 + n + 1700) = *(_DWORD *)(a2 + n + 1700);
    }
    __n128 result = *(__n128 *)(a2 + 1860);
    *(__n128 *)(a1 + 1860) = result;
    *(_DWORD *)(a1 + 1876) = *(_DWORD *)(a2 + 1876);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetCoexGpio(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1492);
}

uint64_t BlueFin::GlMeSrdAsicConfig::HealthProfileSupported(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1602);
}

uint64_t BlueFin::MinnowEswRpcJdEncImp::esw_jd_rpc_mc_gp_set_all(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU16(v11, *a3);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 2));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU16(v11, a3[6]);
  BlueFin::GlStream::PutU16(v11, a3[2]);
  BlueFin::GlStream::PutU16(v11, a3[4]);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 10));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 6));
  BlueFin::MinnowEswRpcJdEncImp::AddGpConstComToStream((BlueFin::GlStream *)v11, (uint64_t)(a3 + 8), *((unsigned __int8 *)a3 + 10));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 144));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 145));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 147));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 148));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 150));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 151));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU32(v11, *((_DWORD *)a3 + 39));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 80));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 83));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 86));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 89));
  BlueFin::MinnowEswRpcJdEncImp::AddGpConstComToStream((BlueFin::GlStream *)v11, (uint64_t)(a3 + 92), *((unsigned __int8 *)a3 + 10));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 312));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 313));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU32(v11, *((_DWORD *)a3 + 79));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 160));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 163));
  BlueFin::MinnowEswRpcJdEncImp::AddGpConstComToStream((BlueFin::GlStream *)v11, (uint64_t)(a3 + 166), *((unsigned __int8 *)a3 + 10));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 460));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 461));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  for (uint64_t i = 0; i != 28; i += 2)
    BlueFin::GlStream::PutU32(v11, *(_DWORD *)&a3[i + 232]);
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 260));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 263));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 266));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 269));
  BlueFin::MinnowEswRpcJdEncImp::AddGpConstComToStream((BlueFin::GlStream *)v11, (uint64_t)(a3 + 272), *((unsigned __int8 *)a3 + 10));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 672));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 673));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 675));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 676));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 678));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 679));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU32(v11, *((_DWORD *)a3 + 171));
  BlueFin::GlStream::PutU16(v11, a3[344]);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 690));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 691));
  BlueFin::MinnowEswRpcJdEncImp::AddDelayControl((BlueFin::GlStream *)v11, (uint64_t)(a3 + 346), *((unsigned __int8 *)a3 + 10));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 354));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 357));
  BlueFin::MinnowEswRpcJdEncImp::AddGpConstComToStream((BlueFin::GlStream *)v11, (uint64_t)(a3 + 360), *((unsigned __int8 *)a3 + 10));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 848));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 849));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 851));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 852));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 854));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 855));
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU32(v11, *((_DWORD *)a3 + 215));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 432));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 435));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 438));
  BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(v11, (uint64_t)(a3 + 441));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 888));
  BlueFin::GlStream::PutU08(v11, *((unsigned char *)a3 + 889));
  BlueFin::GlStream::PutU16(v11, a3[445]);
  BlueFin::GlStream::PutU16(v11, a3[446]);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 0xFu, v12, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 1089, "esw_jd_rpc_mc_gp_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 1089, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

unsigned int *BlueFin::CarpEswRpcJdEncImp::AddGpModeToStream(unsigned int *a1, uint64_t a2)
{
  BlueFin::GlStream::PutU16(a1, *(unsigned __int16 *)(a2 + 2));
  BlueFin::GlStream::PutU08(a1, *(unsigned char *)a2);
  BlueFin::GlStream::PutU08(a1, *(unsigned char *)(a2 + 1));
  BlueFin::GlStream::PutU08(a1, *(unsigned char *)(a2 + 4));
  BlueFin::GlStream::PutU08(a1, 0);
  BlueFin::GlStream::PutU08(a1, 0);

  return BlueFin::GlStream::PutU08(a1, 0);
}

unsigned int *BlueFin::MinnowEswRpcJdEncImp::AddGpConstComToStream(BlueFin::GlStream *this, uint64_t a2, int a3)
{
  for (uint64_t i = 6; i != 118; i += 16)
    BlueFin::MinnowEswRpcJdEncImp::AddDelayControl(this, a2 + i, a3);
  BlueFin::GlStream::PutU32((unsigned int *)this, *(_DWORD *)(a2 + 120));
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)a2);
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)(a2 + 1));
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)(a2 + 2));
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)(a2 + 3));
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)(a2 + 4));
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)(a2 + 5));
  unsigned int v7 = *(unsigned __int16 *)(a2 + 124);

  return BlueFin::GlStream::PutU16((unsigned int *)this, v7);
}

unsigned int *BlueFin::MinnowEswRpcJdEncImp::AddDelayControl(BlueFin::GlStream *this, uint64_t a2, int a3)
{
  __int16 v5 = *(unsigned __int8 *)(a2 + 4);
  unsigned int v6 = *(unsigned __int16 *)(a2 + 2);
  unsigned int v7 = (v6 << 14) & 0x30000 | (((v6 >> 4) & 3) << 20) | ((v6 & 3) << 12);
  unsigned int v8 = v6 & 0x3C0;
  unsigned int v9 = *(_WORD *)a2 & 0xF00;
  int v10 = *(_WORD *)a2 & 0xF0;
  int v11 = *(_WORD *)a2 & 0xF;
  if (v9 == 3840) {
    unsigned int v9 = 16128;
  }
  unsigned int v12 = v9 >> 8;
  if (v10 == 240) {
    int v13 = 4032;
  }
  else {
    int v13 = 4 * v10;
  }
  unsigned int v14 = v13 & 0xFFFC0FFF | ((v12 & 0x3F) << 12);
  if (v11 == 15) {
    int v11 = 63;
  }
  int v15 = v14 | v11;
  int v16 = *(unsigned __int8 *)(a2 + 5);
  int v17 = (v14 >> 6) | (a3 << 12);
  if (*(unsigned char *)(a2 + 5)) {
    char v18 = 2;
  }
  else {
    char v18 = 3;
  }
  if (*(unsigned char *)(a2 + 5)) {
    int v19 = 28;
  }
  else {
    int v19 = 56;
  }
  if (*(unsigned char *)(a2 + 5)) {
    unsigned int v20 = ((v15 & 0x3F) << 12) | 0xFFF;
  }
  else {
    unsigned int v20 = 0x3FFFF;
  }
  if (v16) {
    unsigned int v21 = v17;
  }
  else {
    unsigned int v21 = v15;
  }
  if (v16) {
    unsigned int v22 = v7 >> 4;
  }
  else {
    unsigned int v22 = v7;
  }
  if (v16) {
    unsigned int v23 = v8 >> 2;
  }
  else {
    unsigned int v23 = v8;
  }
  int v24 = (*(unsigned __int8 *)(a2 + 14) << v18) & v19;
  char v25 = *(unsigned char *)(a2 + 7);
  unsigned int v26 = *(unsigned __int16 *)(a2 + 8);
  char v27 = *(unsigned char *)(a2 + 10);
  unsigned int v30 = *(unsigned __int16 *)(a2 + 12);
  unsigned __int16 v28 = (16 * v5) | (4 * v5) | (v5 << 6) | (v5 << 8) | (v5 << 10) | v5;
  BlueFin::GlStream::PutU32((unsigned int *)this, v20);
  BlueFin::GlStream::PutU32((unsigned int *)this, v21);
  BlueFin::GlStream::PutU32((unsigned int *)this, v22);
  BlueFin::GlStream::PutU16((unsigned int *)this, v23);
  BlueFin::GlStream::PutU16((unsigned int *)this, v28);
  BlueFin::GlStream::PutU08((unsigned int *)this, v24);
  BlueFin::GlStream::PutU08((unsigned int *)this, *(unsigned char *)(a2 + 6));
  BlueFin::GlStream::PutU08((unsigned int *)this, v25);
  BlueFin::GlStream::PutU08((unsigned int *)this, v27);
  BlueFin::GlStream::PutU16((unsigned int *)this, v26);

  return BlueFin::GlStream::PutU16((unsigned int *)this, v30);
}

uint64_t BlueFin::MinnowEswRpcJdEncImp::esw_jd_rpc_aid_set_all(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, uint64_t a5)
{
  LODWORD(v7) = a3;
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v20, v21, 1800, v10);
  BlueFin::GlStream::PutU08(v20, v7);
  if (!v7) {
    goto LABEL_9;
  }
  uint64_t v7 = v7;
  uint64_t v11 = v7;
  do
  {
    unsigned int v13 = *a4++;
    char v12 = v13;
    if (v13 >= 0xCB)
    {
      char v18 = "bAidIdInRange";
      DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 503, "esw_jd_rpc_aid_set_all", (char)"bAidIdInRange");
      int v19 = 503;
      goto LABEL_12;
    }
    BlueFin::GlStream::PutU08(v20, v12);
    --v11;
  }
  while (v11);
  uint64_t v14 = a5 + 16;
  do
  {
    BlueFin::GlStream::PutS16(v20, *(_WORD *)(v14 - 16));
    BlueFin::GlStream::PutS16(v20, *(_WORD *)(v14 - 14));
    BlueFin::GlStream::PutU16(v20, *(unsigned __int16 *)(v14 - 8));
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)(v14 - 10));
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)(v14 - 6));
    BlueFin::GlStream::PutU16(v20, *(unsigned __int16 *)(v14 - 12));
    BlueFin::GlStream::PutU16(v20, *(unsigned __int16 *)(v14 - 4));
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)(v14 - 2));
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)(v14 - 1));
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)v14);
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)(v14 + 1));
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 920))())
    {
      BlueFin::GlStream::PutS16(v20, *(_WORD *)(v14 + 2));
      BlueFin::GlStream::PutS16(v20, *(_WORD *)(v14 + 4));
      BlueFin::GlStream::PutS16(v20, *(_WORD *)(v14 + 6));
      BlueFin::GlStream::PutS16(v20, *(_WORD *)(v14 + 8));
      BlueFin::GlStream::PutS32(v20, *(_DWORD *)(v14 + 12));
      BlueFin::GlStream::PutS32(v20, *(_DWORD *)(v14 + 16));
    }
    v14 += 36;
    --v7;
  }
  while (v7);
LABEL_9:
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v20);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 7u, v21, Offset);
  unsigned int v16 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v16)
  {
    char v18 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 538, "esw_jd_rpc_aid_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v19 = 538;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v19, v18);
  }
  return result;
}

unsigned int *BlueFin::GlStream::PutS16(unsigned int *this, __int16 a2)
{
  if (this[6])
  {
    uint64_t v7 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 68, "PutS16", (char)"m_uiBitOffset == 0");
    int v8 = 68;
    goto LABEL_11;
  }
  if (this[7])
  {
    uint64_t v7 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 69, "PutS16", (char)"m_uiBitsRemainingInWord == 0");
    int v8 = 69;
    goto LABEL_11;
  }
  uint64_t v2 = *this;
  if ((int)v2 + 2 > this[4])
  {
    uint64_t v7 = "m_uiOffset+2<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 71, "PutS16", (char)"m_uiOffset+2<=m_uiMaxOffset");
    int v8 = 71;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v8, v7);
  }
  if (*((unsigned char *)this + 20))
  {
    uint64_t v3 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v3 + v2) = HIBYTE(a2);
  }
  else
  {
    uint64_t v4 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v4 + v2) = a2;
    LOBYTE(a2) = HIBYTE(a2);
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *this;
  *this = v6 + 1;
  *(unsigned char *)(v5 + v6) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetClockAdjustEnable(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1419);
}

uint64_t BlueFin::MinnowEswRpcSatEncImp::esw_sat_rpc_init_multi_carr(void **a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, char *a5, char a6, uint64_t a7, unsigned __int16 *a8, uint64_t a9, char a10)
{
  char v15 = a3;
  uint64_t v40 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1[1] + 384))(a1[1]) <= a3)
  {
    uint64_t v36 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 47, "esw_sat_rpc_init_multi_carr", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v37 = 47;
    goto LABEL_23;
  }
  if ((a7 - 4) <= 0xFCu)
  {
    uint64_t v36 = "bIsNumSignals";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 50, "esw_sat_rpc_init_multi_carr", (char)"bIsNumSignals");
    int v37 = 50;
    goto LABEL_23;
  }
  char v18 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v38, v39, 1800, v18);
  BlueFin::GlStream::PutU08(v38, v15);
  BlueFin::GlStream::PutU08(v38, a7);
  char v19 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
        + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
        + *a4);
  if (!v19)
  {
    uint64_t v36 = "ucImplSvId != INVALID_SVID";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 60, "esw_sat_rpc_init_multi_carr", (char)"ucImplSvId != INVALID_SVID");
    int v37 = 60;
    goto LABEL_23;
  }
  BlueFin::GlStream::PutU08(v38, v19);
  BlueFin::GlStream::PutU08(v38, a4[4]);
  BlueFin::GlStream::PutU08(v38, 0);
  BlueFin::GlStream::PutU08(v38, 0);
  uint64_t v20 = a7;
  unsigned int v21 = (unsigned int *)(a4 + 8);
  uint64_t v22 = a7;
  do
  {
    unsigned int v23 = *v21++;
    BlueFin::GlStream::PutU32(v38, v23);
    --v22;
  }
  while (v22);
  uint64_t v24 = a7;
  do
  {
    char v25 = *a5++;
    BlueFin::GlStream::PutU08(v38, v25);
    --v24;
  }
  while (v24);
  BlueFin::GlStream::PutU08(v38, a6);
  uint64_t v26 = a7;
  do
  {
    BlueFin::GlStream::CarpPutBits(v38, *a8 & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 1) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 2) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 3) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 4) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 5) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 6) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 7) & 1, 1u, 8u);
    int v27 = *a8;
    unsigned int v28 = v27 & 0xFFFF3FFF | (*((unsigned __int8 *)a8 + 2) << 16);
    *a8 = v27 & 0x3FFF;
    *((unsigned char *)a8 + 2) = BYTE2(v28);
    if ((*(unsigned int (**)(void))(*a1[1] + 736))())
    {
      BlueFin::GlStream::CarpPutBits(v38, 1u, 1u, 8u);
      unsigned int v29 = 0;
    }
    else
    {
      BlueFin::GlStream::CarpPutBits(v38, *(unsigned __int16 *)((char *)a8 + 1) & 1, 1u, 8u);
      unsigned int v29 = (*a8 >> 9) & 1;
    }
    BlueFin::GlStream::CarpPutBits(v38, v29, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 10) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 11) & 1, 1u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, (*a8 >> 12) & 3, 2u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, *a8 >> 14, 2u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, a8[1] & 0x1F, 5u, 8u);
    BlueFin::GlStream::CarpPutBits(v38, *((unsigned __int8 *)a8 + 2) >> 5, 3u, 8u);
    BlueFin::GlStream::PutU08(v38, 0);
    a8 = (unsigned __int16 *)((char *)a8 + 3);
    --v26;
  }
  while (v26);
  unsigned int v30 = (char *)(a9 + 5);
  do
  {
    BlueFin::GlStream::PutU08(v38, *(v30 - 5));
    BlueFin::GlStream::PutU08(v38, *(v30 - 1));
    char v31 = *v30;
    v30 += 8;
    BlueFin::GlStream::PutU08(v38, v31);
    BlueFin::GlStream::PutU08(v38, 0);
    --v20;
  }
  while (v20);
  BlueFin::GlStream::PutU08(v38, a10);
  int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v38);
  if (Offset != ((unsigned int (*)(void **, uint64_t))(*a1)[7])(a1, a7))
  {
    uint64_t v36 = "otStream.GetOffset() == esw_sat_rpc_init_multi_carr_msg_length(num_signals)";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 133, "esw_sat_rpc_init_multi_carr", (char)"otStream.GetOffset() == esw_sat_rpc_init_multi_carr_msg_length(num_signals)");
    int v37 = 133;
    goto LABEL_23;
  }
  unsigned int v33 = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v38);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 6, 6u, v39, v33);
  unsigned int v34 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(*a1[1] + 416))();
  if (result < v34)
  {
    uint64_t v36 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 135, "esw_sat_rpc_init_multi_carr", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v37 = 135;
LABEL_23:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v37, v36);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_sp_set_all(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v6 = *a3;
  if (v6 >= (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 432))(*(void *)(a1 + 8)))
  {
    uint64_t v11 = "sp_param_ptr->sp_id < m_rAsicConfigIfc.GetMaxSearchParamIndex()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 548, "esw_jd_rpc_sp_set_all", (char)"sp_param_ptr->sp_id < m_rAsicConfigIfc.GetMaxSearchParamIndex()");
    int v12 = 548;
    goto LABEL_6;
  }
  char v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v7);
  BlueFin::GlStream::PutU08(v13, *a3);
  BlueFin::GlStream::PutU08(v13, a3[1]);
  BlueFin::GlStream::PutU16(v13, *((unsigned __int16 *)a3 + 2));
  BlueFin::GlStream::PutU16(v13, *((unsigned __int16 *)a3 + 4));
  BlueFin::GlStream::PutU16(v13, *((unsigned __int16 *)a3 + 6));
  BlueFin::GlStream::CarpPutBits(v13, *((_WORD *)a3 + 7) & 7, 3u, 0x10u);
  BlueFin::GlStream::CarpPutBits(v13, *((unsigned __int16 *)a3 + 7) >> 3, 0xDu, 0x10u);
  BlueFin::GlStream::CarpPutBits(v13, a3[17] & 0xF, 4u, 0x10u);
  BlueFin::GlStream::CarpPutBits(v13, *((_WORD *)a3 + 9) & 0x3FF, 0xAu, 0x10u);
  BlueFin::GlStream::CarpPutBits(v13, (*((unsigned __int16 *)a3 + 9) >> 10) & 3, 2u, 0x10u);
  BlueFin::GlStream::PutU08(v13, a3[6]);
  BlueFin::GlStream::CarpPutBits(v13, a3[2] & 0x1F, 5u, 8u);
  BlueFin::GlStream::CarpPutBits(v13, a3[2] >> 5, 3u, 8u);
  BlueFin::GlStream::CarpPutBits(v13, a3[10] & 0xF, 4u, 8u);
  BlueFin::GlStream::CarpPutBits(v13, (a3[10] >> 4) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v13, (a3[10] >> 5) & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v13, a3[10] >> 7, 1u, 8u);
  BlueFin::GlStream::PutU08(v13, a3[16]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 0, v14, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    uint64_t v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 581, "esw_jd_rpc_sp_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 581;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v12, v11);
  }
  return result;
}

unsigned int *BlueFin::GlStream::CarpPutBits(unsigned int *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!a3)
  {
    unsigned int v13 = "ulNumBits > 0";
    DeviceFaultNotify("glutl_stream.cpp", 433, "CarpPutBits", (char)"ulNumBits > 0");
    int v14 = 433;
    goto LABEL_28;
  }
  if (a3 > a4)
  {
    unsigned int v13 = "ulNumBits <= ulNumBitsInWord";
    DeviceFaultNotify("glutl_stream.cpp", 434, "CarpPutBits", (char)"ulNumBits <= ulNumBitsInWord");
    int v14 = 434;
    goto LABEL_28;
  }
  if (a4 > 0x20 || ((1 << a4) & 0x100010100) == 0)
  {
    unsigned int v13 = "ulNumBitsInWord==NUM_BITS_PER_BYTE*2 || ulNumBitsInWord==NUM_BITS_PER_BYTE*4 || ulNumBitsInWord==NUM_BITS_PER_BYTE";
    DeviceFaultNotify("glutl_stream.cpp", 435, "CarpPutBits", (char)"ulNumBitsInWord==NUM_BITS_PER_BYTE*2 || ulNumBitsInWord==NUM_BITS_PER_BYTE*4 || ulNumBitsInWord==NUM_BITS_PER_BYTE");
    int v14 = 435;
    goto LABEL_28;
  }
  if (this[6] || this[7]) {
    goto LABEL_16;
  }
  this[6] = 7;
  this[7] = a4;
  if (a4 == 16)
  {
    uint64_t v6 = *this;
    if ((int)v6 + 1 < this[4])
    {
      uint64_t v5 = this + 2;
      *(unsigned char *)(*((void *)this + 1) + v6) = 0;
      unsigned int v4 = *this + 1;
      goto LABEL_15;
    }
    unsigned int v13 = "m_uiOffset+1 < m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 461, "CarpPutBits", (char)"m_uiOffset+1 < m_uiMaxOffset");
    int v14 = 461;
LABEL_28:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v14, v13);
  }
  if (a4 != 8)
  {
    uint64_t v7 = *this;
    if ((int)v7 + 3 < this[4])
    {
      uint64_t v5 = this + 2;
      *(unsigned char *)(*((void *)this + 1) + v7) = 0;
      *(unsigned char *)(*((void *)this + 1) + *this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      *(unsigned char *)(*((void *)this + 1) + *this + 2) = 0;
      unsigned int v4 = *this + 3;
      goto LABEL_15;
    }
    unsigned int v13 = "m_uiOffset+3 < m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 467, "CarpPutBits", (char)"m_uiOffset+3 < m_uiMaxOffset");
    int v14 = 467;
    goto LABEL_28;
  }
  unsigned int v4 = *this;
  if (*this >= this[4])
  {
    unsigned int v13 = "m_uiOffset+0 < m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 456, "CarpPutBits", (char)"m_uiOffset+0 < m_uiMaxOffset");
    int v14 = 456;
    goto LABEL_28;
  }
  uint64_t v5 = this + 2;
LABEL_15:
  *(unsigned char *)(*v5 + v4) = 0;
LABEL_16:
  unsigned int v8 = a3 - 1;
  do
  {
    if ((v8 & 0x80000000) != 0)
    {
      unsigned int v13 = "slShiftVal >= 0";
      DeviceFaultNotify("glutl_stream.cpp", 479, "CarpPutBits", (char)"slShiftVal >= 0");
      int v14 = 479;
      goto LABEL_28;
    }
    uint64_t v9 = *this;
    if (v9 >= this[4])
    {
      unsigned int v13 = "m_uiOffset < m_uiMaxOffset";
      DeviceFaultNotify("glutl_stream.cpp", 484, "CarpPutBits", (char)"m_uiOffset < m_uiMaxOffset");
      int v14 = 484;
      goto LABEL_28;
    }
    *(unsigned char *)(*((void *)this + 1) + v9) |= ((a2 >> v8) & 1) << this[6];
    unsigned int v10 = this[6];
    if (v10)
    {
      int v11 = v10 - 1;
    }
    else
    {
      ++*this;
      int v11 = 7;
    }
    int v12 = this[7] - 1;
    this[6] = v11;
    this[7] = v12;
    --v8;
  }
  while (v8 != -1);
  if (!v12) {
    this[6] = 0;
  }
  return this;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_bs_set_all(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v6 = *a3;
  if (v6 >= (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 440))(*(void *)(a1 + 8)))
  {
    int v11 = "bs_param_ptr->bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 784, "esw_jd_rpc_bs_set_all", (char)"bs_param_ptr->bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()");
    int v12 = 784;
    goto LABEL_6;
  }
  char v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v7);
  BlueFin::GlStream::PutU08(v13, *a3);
  BlueFin::GlStream::PutU08(v13, a3[1]);
  BlueFin::GlStream::PutU08(v13, a3[2]);
  BlueFin::GlStream::PutU08(v13, a3[3]);
  BlueFin::GlStream::PutU08(v13, a3[4]);
  BlueFin::GlStream::PutU08(v13, a3[5]);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 1u, v14, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    int v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 803, "esw_jd_rpc_bs_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 803;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::GlStream::GlStream(uint64_t this, unsigned __int8 *a2, int a3, char a4)
{
  *(_DWORD *)this = 0;
  *(void *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(unsigned char *)(this + 20) = 1;
  *(void *)(this + 24) = 0;
  if ((a4 & 1) == 0)
  {
    DeviceFaultNotify("glutl_stream.cpp", 37, "GlStream", (char)"bBigEndian");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", 37, "bBigEndian");
  }
  return this;
}

uint64_t BlueFin::GlStream::GetOffset(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v2 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 42, "GetOffset", (char)"m_uiBitOffset == 0");
    int v3 = 42;
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v2 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 43, "GetOffset", (char)"m_uiBitsRemainingInWord == 0");
    int v3 = 43;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v3, v2);
  }
  return *(unsigned int *)this;
}

uint64_t BlueFin::GlMeSrdTransactionBuilder::IsBigEndian(BlueFin::GlMeSrdTransactionBuilder *this)
{
  return *((unsigned __int8 *)this + 32);
}

uint64_t BlueFin::GlMeSrdTransaction::Add(BlueFin::GlMeSrdTransaction *this, char a2, unsigned __int8 a3, unsigned __int8 *a4, unsigned int a5)
{
  v9[0] = a5;
  v9[1] = ((a5 >> 2) & 0xC0) + a2 + ((a5 >> 5) & 0x20);
  __n128 v9[2] = a3;
  BlueFin::GlMeSrdTransaction::AddMethodData(this, v9, 3u);
  return BlueFin::GlMeSrdTransaction::AddMethodData(this, a4, a5);
}

uint64_t BlueFin::GlMeSrdTransaction::AddMethodData(BlueFin::GlMeSrdTransaction *this, unsigned __int8 *a2, unsigned int a3)
{
  if (*((unsigned char *)this + 18))
  {
    int v14 = "!m_bComplete";
    DeviceFaultNotify("glmesrd_transaction_builder.cpp", 148, "AddMethodData", (char)"!m_bComplete");
    int v15 = 148;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_builder.cpp", v15, v14);
  }
  if (a3)
  {
    uint64_t v4 = a3;
    while (1)
    {
      int v6 = *((unsigned __int16 *)this + 16);
      *((_WORD *)this + 16) = v6 + 1;
      int v7 = *((unsigned __int16 *)this + 17);
      int v8 = v6 - v7;
      if (!v8) {
        break;
      }
      if ((unsigned __int16)v8 != 1)
      {
        int v11 = *((unsigned __int16 *)this + 18);
        if (v11 + 2 != (unsigned __int16)v8) {
          goto LABEL_12;
        }
        __int16 v9 = 0;
        *((_WORD *)this + 17) = v7 + v11 + 3;
        goto LABEL_6;
      }
      *((_WORD *)this + 18) += 32 * (*a2 & 0x20) + 4 * (*a2 & 0xC0);
      uint64_t v10 = *(void *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
      if (((*(uint64_t (**)(void))(v10 + 376))() & 1) == 0)
      {
        int v14 = "GetAsicConfigIfc().IsRpcClassValid(ucClassId)";
        DeviceFaultNotify("glmesrd_transaction_builder.cpp", 168, "AddMethodData", (char)"GetAsicConfigIfc().IsRpcClassValid(ucClassId)");
        int v15 = 168;
        goto LABEL_16;
      }
LABEL_12:
      ++a2;
      if (!--v4) {
        goto LABEL_13;
      }
    }
    __int16 v9 = *a2;
LABEL_6:
    *((_WORD *)this + 18) = v9;
    goto LABEL_12;
  }
LABEL_13:
  int v12 = *(uint64_t (**)(void))(**((void **)this + 3) + 24);

  return v12();
}

void *BlueFin::GlMeSrdTransactionBuilder::AppendData(BlueFin::GlMeSrdTransactionBuilder *this, int a2, unsigned __int8 *a3, unsigned __int16 a4)
{
  uint64_t v4 = (BlueFin::GlMeSrdPacketManager *)*((void *)this + 1);
  if (a2) {
    return BlueFin::GlMeSrdPacketManager::AppendReliableData(v4, a3, a4);
  }
  else {
    return (void *)BlueFin::GlMeSrdPacketManager::AppendData(v4, a3, a4);
  }
}

void *BlueFin::GlMeSrdPacketManager::AppendReliableData(BlueFin::GlMeSrdPacketManager *this, unsigned __int8 *__src, size_t __n)
{
  if (!*((unsigned char *)this + 13874))
  {
    int v8 = "m_bMessageReliableStarted";
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 51, "AppendReliableData", (char)"m_bMessageReliableStarted");
    int v9 = 51;
    goto LABEL_12;
  }
  __int16 v3 = __n;
  uint64_t v4 = __src;
  int v6 = (char *)*((void *)this + 1733);
  unint64_t v7 = *((void *)this + 1732);
  if ((unint64_t)v6 < v7)
  {
    if (__n >= (int)v7 - (int)v6)
    {
      int v8 = "usLen < ulRemaining";
      DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 74, "AppendReliableData", (char)"usLen < ulRemaining");
      int v9 = 74;
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  if ((int)v7 - (int)v6 + 7168 <= __n)
  {
    int v8 = "usLen < ulRemaining";
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 57, "AppendReliableData", (char)"usLen < ulRemaining");
    int v9 = 57;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", v9, v8);
  }
  int v10 = this + 13844;
  if (&v6[__n] >= (char *)this + 13844)
  {
    unsigned int v12 = v10 - v6;
    memcpy(v6, __src, (v10 - v6));
    v4 += v12;
    *((void *)this + 1733) = (char *)this + 6676;
    size_t v11 = (unsigned __int16)(v3 - v12);
    int v6 = (char *)this + 6676;
    goto LABEL_9;
  }
LABEL_7:
  size_t v11 = __n;
LABEL_9:
  uint64_t result = memcpy(v6, v4, v11);
  *((void *)this + 1733) += v11;
  return result;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsRpcClassValid(BlueFin::GlMeSrdAsicConfig *this, int a2)
{
  if ((a2 & 0xFFFFFFEF) == 0 || *((unsigned __int8 *)this + 1434) <= a2 && *((unsigned __int8 *)this + 1432) > a2) {
    return 1;
  }
  if (*((unsigned __int8 *)this + 1435) <= a2) {
    return *((unsigned __int8 *)this + 1433) > a2;
  }
  return 0;
}

uint64_t BlueFin::GlMeSrdTransactionBuilder::GetAsicConfigIfc(BlueFin::GlMeSrdTransactionBuilder *this)
{
  return *((void *)this + 3);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxSearchParamIndex(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1424);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxBinningStepIndex(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1426);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxEswTransBufSize(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 363);
}

uint64_t BlueFin::GlMeSrdAsicConfig::VERIFY(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 1423))
  {
    if (*(_DWORD *)(result + 8)) {
      return result;
    }
    uint64_t v2 = "IsAsicTypeValid()";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4862, "VERIFY", (char)"IsAsicTypeValid()");
    int v3 = 4862;
    goto LABEL_11;
  }
  if (a2 == 1)
  {
    if (*(_DWORD *)(result + 8)) {
      return result;
    }
    uint64_t v2 = "IsAsicTypeValid()";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4875, "VERIFY", (char)"IsAsicTypeValid()");
    int v3 = 4875;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v3, v2);
  }
  if (a2)
  {
    uint64_t v2 = "0";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4884, "VERIFY", (char)"0");
    int v3 = 4884;
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 232))(result);
  if ((result & 1) == 0)
  {
    uint64_t v2 = "IsAsicCfgValid()";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4870, "VERIFY", (char)"IsAsicCfgValid()");
    int v3 = 4870;
    goto LABEL_11;
  }
  return result;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsAsicCfgValid(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((_DWORD *)this + 2)
      && (*(unsigned int (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 184))(this) != -1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetHwAsicVersion(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t BlueFin::PikeEswRpcJdEncImp::esw_jd_rpc_tp_set_all(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 424))(*(void *)(a1 + 8)))
  {
    int v10 = "m_rAsicConfigIfc.GetMaxTrackParamIndex()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 229, "esw_jd_rpc_tp_set_all", (char)"m_rAsicConfigIfc.GetMaxTrackParamIndex()");
    int v11 = 229;
    goto LABEL_6;
  }
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 1800, v6);
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)a3);
  BlueFin::GlStream::PutU08(v12, 0);
  BlueFin::GlStream::PutU08(v12, 0);
  BlueFin::GlStream::PutU08(v12, 0);
  BlueFin::GlStream::PutU32(v12, *(_DWORD *)(a3 + 28));
  BlueFin::GlStream::PutU32(v12, *(_DWORD *)(a3 + 32));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 6));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 8));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 10));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 12));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 14));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 20));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 22));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 26));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 38));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 1));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 2));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 3));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 4));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 5));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 16));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 17));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 18));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 24));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 36));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 37));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 40));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 42));
  BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + 44));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 46));
  BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + 47));
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 5u, v13, Offset);
  unsigned int v8 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v8)
  {
    int v10 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 280, "esw_jd_rpc_tp_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v11 = 280;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v11, v10);
  }
  return result;
}

unsigned int *BlueFin::GlStream::PutU08(unsigned int *this, char a2)
{
  if (this[6])
  {
    uint64_t v4 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 112, "PutU08", (char)"m_uiBitOffset == 0");
    int v5 = 112;
    goto LABEL_8;
  }
  if (this[7])
  {
    uint64_t v4 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 113, "PutU08", (char)"m_uiBitsRemainingInWord == 0");
    int v5 = 113;
    goto LABEL_8;
  }
  uint64_t v2 = *this;
  if ((int)v2 + 1 > this[4])
  {
    uint64_t v4 = "m_uiOffset+1<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 115, "PutU08", (char)"m_uiOffset+1<=m_uiMaxOffset");
    int v5 = 115;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v5, v4);
  }
  uint64_t v3 = *((void *)this + 1);
  *this = v2 + 1;
  *(unsigned char *)(v3 + v2) = a2;
  return this;
}

unsigned int *BlueFin::GlStream::PutU16(unsigned int *this, unsigned int a2)
{
  if (this[6])
  {
    unint64_t v7 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 122, "PutU16", (char)"m_uiBitOffset == 0");
    int v8 = 122;
    goto LABEL_11;
  }
  if (this[7])
  {
    unint64_t v7 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 123, "PutU16", (char)"m_uiBitsRemainingInWord == 0");
    int v8 = 123;
    goto LABEL_11;
  }
  uint64_t v2 = *this;
  if ((int)v2 + 2 > this[4])
  {
    unint64_t v7 = "m_uiOffset+2<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 125, "PutU16", (char)"m_uiOffset+2<=m_uiMaxOffset");
    int v8 = 125;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v8, v7);
  }
  if (*((unsigned char *)this + 20))
  {
    uint64_t v3 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v3 + v2) = BYTE1(a2);
  }
  else
  {
    uint64_t v4 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v4 + v2) = a2;
    a2 >>= 8;
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *this;
  *this = v6 + 1;
  *(unsigned char *)(v5 + v6) = a2;
  return this;
}

unsigned int *BlueFin::GlStream::PutU32(unsigned int *this, unsigned int a2)
{
  if (this[6])
  {
    int v15 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 164, "PutU32", (char)"m_uiBitOffset == 0");
    int v16 = 164;
    goto LABEL_11;
  }
  if (this[7])
  {
    int v15 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 165, "PutU32", (char)"m_uiBitsRemainingInWord == 0");
    int v16 = 165;
    goto LABEL_11;
  }
  uint64_t v2 = *this;
  if ((int)v2 + 4 > this[4])
  {
    int v15 = "m_uiOffset+4<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 167, "PutU32", (char)"m_uiOffset+4<=m_uiMaxOffset");
    int v16 = 167;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v16, v15);
  }
  if (*((unsigned char *)this + 20))
  {
    uint64_t v3 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v3 + v2) = HIBYTE(a2);
    uint64_t v4 = *((void *)this + 1);
    uint64_t v5 = *this;
    *this = v5 + 1;
    *(unsigned char *)(v4 + v5) = BYTE2(a2);
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = *this;
    *this = v7 + 1;
    *(unsigned char *)(v6 + v7) = BYTE1(a2);
  }
  else
  {
    uint64_t v8 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v8 + v2) = a2;
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *this;
    *this = v10 + 1;
    *(unsigned char *)(v9 + v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BYTE1(a2);
    uint64_t v11 = *((void *)this + 1);
    uint64_t v12 = *this;
    *this = v12 + 1;
    *(unsigned char *)(v11 + v12) = BYTE2(a2);
    a2 >>= 24;
  }
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = *this;
  *this = v14 + 1;
  *(unsigned char *)(v13 + v14) = a2;
  return this;
}

uint64_t BlueFin::MinnowEswRpcSatEncImp::esw_sat_rpc_init_multi_carr_msg_length(BlueFin::MinnowEswRpcSatEncImp *this, int a2)
{
  return (13 * a2 + 8);
}

_WORD *BlueFin::GlMeSrdCtrlSmRpcSatEvt::gll_satevt_rpc_rm_event_report(_WORD *result, unsigned int a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned __int8 a10, int a11, __int16 a12, void *a13, char a14, uint64_t a15, uint64_t a16, long long a17, unsigned __int8 *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  a21 = *MEMORY[0x263EF8340];
  a13 = &unk_270EBE618;
  a18 = (unsigned __int8 *)&a17;
  LOWORD(a17) = 0;
  *(void *)((char *)&a17 + 4) = 0;
  HIDWORD(a17) = 0;
  a14 = a2;
  if (a2 > 1)
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3784, "gll_satevt_rpc_rm_event_report", (char)"num <= RM_REPORT_SIZE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 3784, "num <= RM_REPORT_SIZE");
  }
  if (a2 == 1 && a3[6] != 253)
  {
    uint64_t v22 = result;
    unsigned int v23 = *a3;
    if (v23 >= (*(unsigned int (**)(void))(**(void **)(*((void *)result + 1) + 136) + 384))(*(void *)(*((void *)result + 1) + 136)))
    {
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3792, "gll_satevt_rpc_rm_event_report", (char)"array_rm_reports[i].sat_id < m_rCtrlSm.m_rAsicConfig.GetMaxNumSats()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 3792, "array_rm_reports[i].sat_id < m_rCtrlSm.m_rAsicConfig.GetMaxNumSats()");
    }
    unsigned int v24 = a3[6];
    BOOL v26 = v24 != 253 && v24 > 0xFB;
    *(_WORD *)a18 = *(_WORD *)a3;
    int Lms16ToLms32 = BlueFin::GlMeSrdAsicUnitConverter::GetLms16ToLms32((BlueFin::GlMeSrdAsicUnitConverter *)*((unsigned __int16 *)a3 + 1), *(_DWORD *)(*((void *)v22 + 1) + 3544));
    unsigned int v28 = a18;
    *((_DWORD *)a18 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = Lms16ToLms32;
    int v29 = a3[4];
    v28[8] = v29;
    char v28[9] = v29;
    *((_WORD *)v28 + 5) = 0;
    int v30 = a3[7];
    v28[14] = v30;
    if (v29) {
      char v31 = v26;
    }
    else {
      char v31 = 1;
    }
    if ((v31 & 1) == 0)
    {
      if (v30)
      {
        GlSignalint Index = BlueFin::GlMeSrdAsicUnitConverter::GetGlSignalIndex(v28[1], v30);
        unsigned int v28 = a18;
      }
      else
      {
        GlSignalint Index = 0;
      }
      uint64_t v33 = v28[1];
      a10 = v28[1];
      a11 = GlSignalIndex;
      a12 = 575;
      if (GlSignalIndex != -1 && (v33 + 67) >= 0x44u)
      {
        uint64_t v34 = BlueFin::GlSvId::s_aucSvId2gnss[v33];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * GlSignalIndex
                                                                                     - GlSignalIndex
                                                                                     + v34] == 255)
          a11 = -1;
        else {
          a12 = BlueFin::GlSignalId::s_ausGnss2signalId[v34]
        }
              + v33
              - BlueFin::GlSvId::s_aucGnss2minSvId[v34]
              + GlSignalIndex * BlueFin::GlSvId::s_aucGnss2numSvId[v34];
      }
      unsigned __int8 v35 = (*(uint64_t (**)(void, void, void, unsigned __int8 *))(**(void **)(*((void *)v22 + 1)
                                                                                               + 168)
                                                                                 + 24))(*(void *)(*((void *)v22 + 1) + 168), a3[5], v28[8], &a10);
      uint64_t v36 = a18;
      a18[9] = v35;
      __int16 v37 = (*(uint64_t (**)(void, void, void, void, unsigned __int8 *))(**(void **)(*((void *)v22 + 1) + 168)
                                                                                         + 16))(*(void *)(*((void *)v22 + 1) + 168), *(void *)(*((void *)v22 + 1) + 136), a3[5], v36[8], &a10);
      unsigned int v28 = a18;
      *((_WORD *)a18 + 5) = v37;
    }
    uint64_t v38 = a3[5];
    v28[12] = v38;
    v28[13] = a3[6];
    v28[15] = a3[8];
    if (v26) {
      goto LABEL_52;
    }
    int v39 = *v28;
    int v40 = *((_DWORD *)v28 + 1);
    if (v28[8])
    {
      unsigned __int8 v75 = v28[8];
      uint64_t vars0 = *((unsigned int *)v28 + 1);
      uint64_t vars8 = v38;
      unsigned int v41 = 0;
      uint64_t v42 = 0;
      char v43 = 0;
      unsigned int v44 = 0;
      uint64_t v45 = *((void *)v22 + 20);
      unsigned int v46 = -1;
      do
      {
        if (*(unsigned char *)(v45 + v42 + 6) && *(unsigned __int8 *)(v45 + v42 + 7) == v39)
        {
          GlCustomLog(12, "ResourceMonitor:Warning! Resource not freed, probably notification lost!(sat%u, svid%u)\n", v39, v28[1]);
          uint64_t v45 = *((void *)v22 + 20);
          *(unsigned char *)(v45 + v42 + 6) = 0;
        }
        if (v43)
        {
          char v43 = 1;
        }
        else if (*(unsigned char *)(v45 + v42 + 6))
        {
          char v43 = 0;
          if (*(_DWORD *)(v45 + v42) < v46)
          {
            unsigned int v44 = v41;
            unsigned int v46 = *(_DWORD *)(v45 + v42);
          }
        }
        else
        {
          char v43 = 1;
          unsigned int v44 = v41;
        }
        v42 += 8;
        ++v41;
      }
      while (v42 != 128);
      if (v44 > 0xF)
      {
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3864, "SetHistoryOnAllocation", (char)"uiAvailable < _DIM(m_aResourceHistory)");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 3864, "uiAvailable < _DIM(m_aResourceHistory)");
      }
      uint64_t v47 = v45 + 8 * v44;
      *(_DWORD *)uint64_t v47 = vars0;
      *(unsigned char *)(v47 + 4) = vars8;
      *(unsigned char *)(v47 + 5) = v75;
      *(unsigned char *)(v47 + 6) = v28[1];
      *(unsigned char *)(v47 + 7) = v39;
      goto LABEL_52;
    }
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = *((void *)v22 + 20);
    while (!*(unsigned char *)(v50 + v48 + 6) || *(unsigned __int8 *)(v50 + v48 + 7) != v39)
    {
      ++v49;
      v48 += 8;
      if (v49 == 16)
      {
        GlCustomLog(12, "ResourceMonitor:Warning! Resource release but allocation message not received, probably notification lost!(sat%u, svid%u)\n", *v28, v28[1]);
        LODWORD(v49) = 0;
        goto LABEL_51;
      }
    }
    int v51 = v28[1];
    if (*(unsigned __int8 *)(v50 + v48 + 6) == v51 && *(unsigned __int8 *)(v50 + v48 + 4) == v38)
    {
      int v52 = *(_DWORD *)(v50 + v48);
      unsigned int v53 = v40 - v52;
      if (v40 != v52)
      {
        int v54 = v38;
        uint64_t v55 = (*(uint64_t (**)(void))(**(void **)(*((void *)v22 + 1) + 176) + 248))(*(void *)(*((void *)v22 + 1) + 176));
        unsigned int v56 = *(unsigned __int8 *)(*((void *)v22 + 20) + v48 + 5);
        unsigned int v57 = (v56 + ((*(unsigned __int16 *)(v55 + 26) * *(unsigned __int8 *)(v55 + 12)) >> 1) - 1) / v56;
        LOWORD(v58) = *(_WORD *)(v55 + 8);
        double v59 = (float)(*(float *)(v55 + 4) * (float)v58) * 1000.0;
        if (v59 <= 0.0)
        {
          if (v59 >= 0.0)
          {
            int v62 = 0;
LABEL_61:
            float v63 = (float)v53;
            float v64 = (float)v62;
            unsigned int v65 = v57;
            if (*(_WORD *)(v55 + 24))
            {
              double v66 = v64 * 0.001 + 1.0;
              int v67 = (int)(v66 + -0.5);
              if (v66 >= 0.0) {
                int v67 = 0;
              }
              if (v66 > 0.0) {
                int v67 = (int)(v66 + 0.5);
              }
              unsigned int v65 = v67 * v57;
            }
            if (*(_DWORD *)(*((void *)v22 + 1) + 5440) == 1) {
              unsigned int v68 = 5;
            }
            else {
              unsigned int v68 = 1;
            }
            float v69 = (float)v57 * v64;
            float v70 = (float)(v63 - (float)(v69 * (float)v68)) / (float)v65;
            if (v70 >= 400.0)
            {
              double v71 = v64;
              int v72 = (int)(v71 + -0.5);
              if (v62 >= 0) {
                int v72 = 0;
              }
              if (v62 >= 1) {
                int v73 = (int)(v71 + 0.5);
              }
              else {
                int v73 = v72;
              }
              int v74 = (int)(v69 + -0.5);
              if (v69 >= 0.0) {
                int v74 = 0;
              }
              if (v69 > 0.0) {
                int v74 = (int)(v69 + 0.5);
              }
              GlCustomLog(12, "ResourceMonitor:WARNING! big delays detected(SatId %u, SvId %u, Lms %u, search with BsId %u ran for %u ms, with %u sequence of %u ms (total %u ms), fDelayPerProgrammingMs %.1fms (max %.1fms))\n", v39, v28[1], v40, v54, (int)(v63 + 0.5), v57, v73, v74, v70, *((float *)v22 + 42));
            }
            if (v70 > *((float *)v22 + 42)) {
              *((float *)v22 + 42) = v70;
            }
            goto LABEL_51;
          }
          double v60 = -0.5;
        }
        else
        {
          double v60 = 0.5;
        }
        int v62 = (int)(v59 + v60);
        goto LABEL_61;
      }
    }
    else
    {
      GlCustomLog(12, "ResourceMonitor:Warning! Resource release inconsistent with allocation message, probably notification lost!(sat%u, svid%u)\n", *v28, v51);
    }
LABEL_51:
    *(void *)(*((void *)v22 + 20) + 8 * v49) = 0;
LABEL_52:
    unsigned int v61 = (_WORD *)(*(void *)(*((void *)v22 + 1) + 200) + 928);
    a10 = a3[1];
    uint64_t result = BlueFin::GlPfaStat::SetPfaData(v61, &a10, a3[4], a3[5], a3[8]);
  }
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (_WORD *)(*((uint64_t (**)(void **, void, void))a13 + 3))(&a13, 0, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxNumSats(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1429);
}

uint64_t BlueFin::GlMeSrdSvMgrRpcSatEvt::gll_satevt_rpc_rm_event_report(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    unsigned int v32 = (unsigned __int8 *)(a3 + 5);
    uint64_t v33 = a2;
    do
    {
      uint64_t v6 = (unsigned __int8 *)(a3 + 10 * v5);
      unint64_t v7 = *v6;
      int v9 = v6[6];
      uint64_t v8 = v6 + 6;
      uint64_t v10 = *(v8 - 5);
      char v38 = *(v8 - 5);
      int v11 = v9 - 252;
      if ((v9 - 252) > 3 || v11 == 1)
      {
        int v34 = 0;
        BOOL v14 = 0;
        int v13 = *(unsigned __int8 *)(a3 + 10 * v5 + 4);
      }
      else
      {
        int v13 = *(unsigned __int8 *)(a3 + 10 * v5 + 4);
        BOOL v14 = v13 == 255;
        int v34 = 1;
      }
      uint64_t v15 = a3 + 10 * v5;
      if (*(unsigned char *)(v15 + 7)) {
        GlSignalint Index = BlueFin::GlMeSrdAsicUnitConverter::GetGlSignalIndex(v10, *(unsigned __int8 *)(v15 + 7));
      }
      else {
        GlSignalint Index = 0;
      }
      v35[0] = v10;
      int v36 = GlSignalIndex;
      __int16 v37 = 575;
      if ((v10 + 67) >= 0x44u && GlSignalIndex != -1)
      {
        uint64_t v18 = BlueFin::GlSvId::s_aucSvId2gnss[v10];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * GlSignalIndex
                                                                                     - GlSignalIndex
                                                                                     + v18] == 255)
          int v36 = -1;
        else {
          __int16 v37 = BlueFin::GlSignalId::s_ausGnss2signalId[v18]
        }
              + v10
              - BlueFin::GlSvId::s_aucGnss2minSvId[v18]
              + GlSignalIndex * BlueFin::GlSvId::s_aucGnss2numSvId[v18];
      }
      char v19 = (unsigned char *)(v15 + 4);
      uint64_t result = BlueFin::GlMeSrdAsicUnitConverter::GetLms16ToLms32((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned __int16 *)(a3 + 10 * v5 + 2), *(_DWORD *)(*(void *)(v4 + 8) + 22768));
      if (*v8 == 253)
      {
        uint64_t v20 = (BOOL *)(*(void *)(v4 + 8) + 21604);
        *uint64_t v20 = (*v19 & 0xFE) == 0x90;
      }
      else
      {
        uint64_t v21 = result;
        uint64_t result = BlueFin::GlMeSrdSatMgr::RmReport(*(void *)(v4 + 8) + 3520, v7, (const BlueFin::GlSignalId *)v35, *(unsigned char *)(a3 + 10 * v5 + 5), *v19, result);
        uint64_t v22 = *(void *)(v4 + 8);
        unint64_t v23 = v7 >> 5;
        uint64_t v24 = 1 << (v7 & 0x1F);
        if ((v24 & *(_DWORD *)(*(void *)(v22 + 3640) + 4 * (v7 >> 5))) != 0
          || (v24 & *(_DWORD *)(*(void *)(v22 + 3608) + 4 * v23)) != 0)
        {
          if (v14)
          {
            BlueFin::GlMeSrdSatTrackMgr::RemoveSat((BlueFin::GlMeSrdSatMgr **)(v22 + 14352), v7);
            uint64_t result = BlueFin::GlMeSrdSatMgr::EswKilledSat((BlueFin::GlMeSrdSatMgr *)(*(void *)(v4 + 8) + 3520), v7);
          }
          else
          {
            if (!BlueFin::GlMeSrdSatMgr::CheckCoherence((void *)(v22 + 3520), v7, &v38))
            {
              int v30 = "0";
              DeviceFaultNotify("glmesrd_acq_mgr.cpp", 550, "gll_satevt_rpc_rm_event_report", (char)"0");
              int v31 = 550;
LABEL_43:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", v31, v30);
            }
            uint64_t result = BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(*(void *)(v4 + 8) + 14352), v7);
            if (result)
            {
              if ((v34 & 1) == 0)
              {
                int v30 = "bIsTrackEngine";
                DeviceFaultNotify("glmesrd_acq_mgr.cpp", 556, "gll_satevt_rpc_rm_event_report", (char)"bIsTrackEngine");
                int v31 = 556;
                goto LABEL_43;
              }
            }
            else
            {
              int v25 = v34;
              if (!v13) {
                int v25 = 0;
              }
              uint64_t result = *(void *)(v4 + 8);
              if (v25 == 1)
              {
                uint64_t result = BlueFin::GlMeSrdAcqMgrSm::MoveSatFromSSE2STE((BlueFin::GlMeSrdAcqMgrSm *)result, v7);
              }
              else if ((v24 & *(_DWORD *)(*(void *)(result + 13920) + 4 * v23)) == 0)
              {
                uint64_t v26 = 0;
                uint64_t v27 = result + 22688;
                unsigned int v28 = v32;
                while (1)
                {
                  int v29 = *(void **)(v27 + v26);
                  if ((v24 & *(_DWORD *)(v29[16] + 4 * v23)) != 0) {
                    break;
                  }
                  v28 += 10;
                  v26 += 8;
                  if (v26 == 80)
                  {
                    int v30 = "0";
                    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 587, "gll_satevt_rpc_rm_event_report", (char)"0");
                    int v31 = 587;
                    goto LABEL_43;
                  }
                }
                uint64_t result = (*(uint64_t (**)(void *, unint64_t, void, void, uint64_t))(*v29 + 40))(v29, v7, *v28, *(v28 - 1), v21);
              }
            }
          }
        }
      }
      ++v5;
    }
    while (v5 != v33);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetLms16ToLms32(BlueFin::GlMeSrdAsicUnitConverter *this, int a2)
{
  if (!a2)
  {
    uint64_t v3 = "0";
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 318, "GetLms16ToLms32", (char)"0");
    int v4 = 318;
LABEL_5:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", v4, v3);
  }
  if (this != (unsigned __int16)this)
  {
    uint64_t v3 = "(ulLms32 & 0xffff) == usLms16";
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 309, "GetLms16ToLms32", (char)"(ulLms32 & 0xffff) == usLms16");
    int v4 = 309;
    goto LABEL_5;
  }
  return (a2 + (__int16)((_WORD)this - a2));
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetGlSignalIndex(uint64_t a1, int a2)
{
  uint64_t result = (a2 - 1);
  if (result >= 4)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1609, "GetGlSignalIndex", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1609, "0");
  }
  return result;
}

BOOL BlueFin::GlMeSrdSatMgr::CheckCoherence(void *a1, unsigned int a2, unsigned char *a3)
{
  uint64_t v4 = a2 >> 5;
  uint64_t v5 = 1 << (a2 & 0x1F);
  if ((v5 & *(_DWORD *)(a1[15] + 4 * v4)) == 0
    && (v5 & *(_DWORD *)(a1[11] + 4 * v4)) == 0)
  {
    return 0;
  }
  BlueFin::GlMeSrdSatMgr::GetSvid(a1, a2, &v7);
  return v7 == *a3;
}

void *BlueFin::GlMeSrdSatMgr::GetSvid@<X0>(void *this@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = a2 >> 5;
  uint64_t v4 = 1 << (a2 & 0x1F);
  if ((v4 & *(_DWORD *)(this[15] + 4 * v3)) == 0
    && (v4 & *(_DWORD *)(this[11] + 4 * v3)) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 859, "GetSvid", (char)"IsSatAllocated(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 859, "IsSatAllocated(ucSatid)");
  }
  *a3 = *(unsigned char *)(this[786] + 52 * a2);
  return this;
}

BOOL BlueFin::GlMeSrdSatTrackMgr::HasSat(BlueFin::GlMeSrdSatTrackMgr *this, unsigned int a2)
{
  unsigned int v4 = 0;
  BOOL v5 = 1;
  do
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v7, a2, v4);
    if (((unint64_t)*(unsigned int *)(*((void *)this + 500) + 4 * ((v7[0] + 100 * v8) >> 5)) >> ((v7[0] + 100 * v8) & 0x1F))) {
      break;
    }
    BOOL v5 = v4++ < 3;
  }
  while (v4 != 4);
  return v5;
}

uint64_t BlueFin::GlSatCarrId::GlSatCarrId(uint64_t result, unsigned int a2, int a3)
{
  *(unsigned char *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  if (a2 >= 0x64)
  {
    DeviceFaultNotify("glmesrd_sat_carr_id.cpp", 36, "GlSatCarrId", (char)"ucSatId < GlMeSrdAsicConfigConstants::GLL_SAT_ARRAY_SIZE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_carr_id.cpp", 36, "ucSatId < GlMeSrdAsicConfigConstants::GLL_SAT_ARRAY_SIZE");
  }
  return result;
}

_WORD *BlueFin::GlPfaStat::SetPfaData(_WORD *result, unsigned char *a2, int a3, unsigned int a4, char a5)
{
  BOOL v6 = a4 < 0xFE && a4 != 252;
  unsigned int v7 = *a2;
  if (*a2)
  {
    if (v7 >= 0x21)
    {
      if (v7 < 0x34) {
        return result;
      }
      if (v7 > 0x41)
      {
        if (v7 < 0x4C) {
          return result;
        }
        if (v7 > 0x8A)
        {
          if (v7 >= 0xAF) {
            return result;
          }
          result += 24;
        }
        else
        {
          result += 16;
        }
      }
      else
      {
        result += 8;
      }
    }
    else if (!result)
    {
      return result;
    }
    BOOL v8 = a3 != 0;
    if (!a3) {
      BOOL v6 = 0;
    }
    if (v6) {
      goto LABEL_28;
    }
    if (!a3 && (a5 & 1) != 0)
    {
      BOOL v8 = 0;
      ++result[1];
    }
    if ((a5 & 0x10) != 0 && !v8)
    {
      result += 2;
LABEL_28:
      ++*result;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::RmReport(uint64_t this, unsigned int a2, const BlueFin::GlSignalId *a3, char a4, int a5, int a6)
{
  uint64_t v7 = this;
  uint64_t v8 = a2 >> 5;
  uint64_t v9 = 1 << (a2 & 0x1F);
  if ((v9 & *(_DWORD *)(*(void *)(this + 120) + 4 * v8)) == 0
    && (v9 & *(_DWORD *)(*(void *)(this + 88) + 4 * v8)) == 0)
  {
    this = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)this, a2);
    if (this)
    {
      if ((v9 & *(_DWORD *)(*(void *)(v7 + 360) + 4 * v8)) == 0) {
        return this;
      }
      BOOL v14 = "m_otSetSatidActive.Missing(ucSatid)";
      DeviceFaultNotify("glmesrd_sat_mgr.cpp", 253, "RmReport", (char)"m_otSetSatidActive.Missing(ucSatid)");
      int v15 = 253;
    }
    else
    {
      BOOL v14 = "0";
      DeviceFaultNotify("glmesrd_sat_mgr.cpp", 251, "RmReport", (char)"0");
      int v15 = 251;
    }
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v15, v14);
  }
  uint64_t v10 = *(void *)(this + 6288);
  if (*(unsigned __int8 *)(v10 + 52 * a2) != *(unsigned __int8 *)a3)
  {
    BOOL v14 = "m_aotSatData[ucSatid].otSvid == rotSignalId.GetSvId()";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 221, "RmReport", (char)"m_aotSatData[ucSatid].otSvid == rotSignalId.GetSvId()");
    int v15 = 221;
    goto LABEL_15;
  }
  *(unsigned char *)(v10 + 52 * a2 + 44) = a5;
  *(unsigned char *)(*(void *)(this + 6288) + 52 * a2 + 45) = a4;
  *(_DWORD *)(*(void *)(this + 6288) + 52 * a2 + 48) = a6;
  if (a5)
  {
    *(_DWORD *)(*(void *)(this + 360) + 4 * v8) |= 1 << (a2 & 0x1F);
  }
  else
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v16, a2, *((_DWORD *)a3 + 1));
    unsigned int v11 = v16[0] + 100 * v16[4];
    if (((unint64_t)*(unsigned int *)(*(void *)(v7 + 6464) + 4 * (v11 >> 5)) >> (v11 & 0x1F)))
    {
      uint64_t v12 = v7 + 6464;
      int v13 = (__int16)v11;
    }
    else
    {
      uint64_t v12 = v7 + 360;
      int v13 = a2;
    }
    return BlueFin::GlSetBase::Remove(v12, v13);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::Is5HzSubTrkEnabledFromAPI(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1605);
}

void *BlueFin::GlMeSrdSearchMgrBase::RmReport(void *this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  uint64_t v3 = 1 << (a2 & 0x1F);
  if ((v3 & *(_DWORD *)(this[16] + 4 * v2)) == 0)
  {
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 354, "RmReport", (char)"GetSatidInUse().Has(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 354, "GetSatidInUse().Has(ucSatid)");
  }
  if ((v3 & *(_DWORD *)(this[28] + 4 * v2)) != 0)
  {
    *(_DWORD *)(this[24] + 4 * v2) |= 1 << (a2 & 0x1F);
    uint64_t v4 = (uint64_t)(this + 28);
    return (void *)BlueFin::GlSetBase::Remove(v4, a2);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::AddSat(BlueFin::GlMeSrdSatMgr **this, unsigned int a2)
{
  uint64_t result = BlueFin::GlMeSrdSatMgr::GetNumSignals(this[1], a2);
  if (result)
  {
    unsigned int v5 = result;
    int v6 = 0;
    do
    {
      Signalint Index = BlueFin::GlMeSrdSatMgr::GetSignalIndex(this[1], a2, v6);
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v8, a2, SignalIndex);
      uint64_t result = (uint64_t)BlueFin::GlMeSrdSatTrackMgr::AddSatCarr((BlueFin::GlMeSrdSatTrackMgr *)this, (const BlueFin::GlSatCarrId *)v8);
      ++v6;
    }
    while (v5 > v6);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::GetSignalIndex(BlueFin::GlMeSrdSatMgr *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = a2 >> 5;
  uint64_t v4 = 1 << (a2 & 0x1F);
  if ((v4 & *(_DWORD *)(*((void *)this + 15) + 4 * v3)) == 0
    && (v4 & *(_DWORD *)(*((void *)this + 11) + 4 * v3)) == 0)
  {
    uint64_t v7 = "IsSatAllocated(ucSatId)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 922, "GetSignalIndex", (char)"IsSatAllocated(ucSatId)");
    int v8 = 922;
    goto LABEL_9;
  }
  if (a2 >= 0x64)
  {
    uint64_t v7 = "ucSatId < _DIM(m_aotSatData)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 923, "GetSignalIndex", (char)"ucSatId < _DIM(m_aotSatData)");
    int v8 = 923;
    goto LABEL_9;
  }
  uint64_t v5 = *((void *)this + 786);
  if (*(unsigned __int8 *)(v5 + 52 * a2 + 5) <= a3)
  {
    uint64_t v7 = "ucIdx < m_aotSatData[ucSatId].ucNumCarriers";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 924, "GetSignalIndex", (char)"ucIdx < m_aotSatData[ucSatId].ucNumCarriers");
    int v8 = 924;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v8, v7);
  }
  return *(unsigned int *)(v5 + 52 * a2 + 4 * a3 + 8);
}

uint64_t BlueFin::GlMeSrdSatMgr::GetNumSignals(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  uint64_t v3 = 1 << (a2 & 0x1F);
  if ((v3 & *(_DWORD *)(*((void *)this + 15) + 4 * v2)) == 0
    && (v3 & *(_DWORD *)(*((void *)this + 11) + 4 * v2)) == 0)
  {
    uint64_t v5 = "IsSatAllocated(ucSatId)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 913, "GetNumSignals", (char)"IsSatAllocated(ucSatId)");
    int v6 = 913;
    goto LABEL_7;
  }
  if (a2 >= 0x64)
  {
    uint64_t v5 = "ucSatId < _DIM(m_aotSatData)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 914, "GetNumSignals", (char)"ucSatId < _DIM(m_aotSatData)");
    int v6 = 914;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v6, v5);
  }
  return *(unsigned __int8 *)(*((void *)this + 786) + 52 * a2 + 5);
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::MoveSatFromSSE2STE(BlueFin::GlMeSrdAcqMgrSm *this, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v4 = a2 >> 5;
  uint64_t v5 = 1 << (a2 & 0x1F);
  if ((v5 & *(_DWORD *)(*((void *)this + 1740) + 4 * v4)) != 0)
  {
    BlueFin::GlSetBase::Remove((uint64_t)this + 13920, a2);
  }
  else
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void **)((char *)this + v6 + 22688);
      if ((v5 & *(_DWORD *)(v7[16] + 4 * v4)) != 0) {
        break;
      }
      v6 += 8;
      if (v6 == 80)
      {
        DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 2904, "MoveSatFromSSE2STE", (char)"bFound");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", 2904, "bFound");
      }
    }
    (*(void (**)(void *, uint64_t))(*v7 + 24))(v7, a2);
  }

  return BlueFin::GlMeSrdSatTrackMgr::AddSat((BlueFin::GlMeSrdSatMgr **)this + 1794, v2);
}

#error "2638F8ECC: call analysis failed (funcsize=1730)"

uint64_t BlueFin::GlPeGpsTimeMgr::GetFutureLS(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlGpsTime *a2, signed __int8 *a3)
{
  if (!*((_DWORD *)this + 18) || BlueFin::GlPeGpsTimeMgr::isExpired(this, a2)) {
    return 0;
  }
  unsigned int FctOfFutureLS = BlueFin::GlPeGpsTimeMgr::GetFctOfFutureLS(this, a2);
  unsigned int v7 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
  LODWORD(v8) = *((_DWORD *)a2 + 2);
  double v9 = (double)v8 * 2.32830644e-10 + (double)v7;
  double v10 = fmod(v9, 4294967300.0);
  if (v9 <= 4294967300.0) {
    double v10 = v9;
  }
  if (v10 < -4294967300.0) {
    double v10 = -fmod(-v10, 4294967300.0);
  }
  unsigned int v11 = v10 < 0.0 ? --v10 : v10;
  if (FctOfFutureLS < v11) {
    return 0;
  }
  *a3 = *((unsigned char *)this + 109);
  return 1;
}

uint64_t BlueFin::GlPeGpsTimeMgr::GetFctOfFutureLS(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlGpsTime *a2)
{
  if (!*((_DWORD *)this + 18) || BlueFin::GlPeGpsTimeMgr::isExpired(this, a2) || !*((unsigned char *)this + 108)) {
    return 0;
  }
  unsigned int v4 = (*(unsigned int (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
  int v5 = v4 - *((unsigned __int8 *)this + 107);
  if (v5 >= 0) {
    __int16 v6 = v4 - *((unsigned __int8 *)this + 107);
  }
  else {
    __int16 v6 = *((unsigned __int8 *)this + 107) - v4;
  }
  __int16 v7 = v5 + 256;
  if (v5 >= -127) {
    __int16 v7 = v4 - *((unsigned __int8 *)this + 107);
  }
  if (v5 >= 128) {
    __int16 v8 = v5 - 256;
  }
  else {
    __int16 v8 = v7;
  }
  if (v6 == 128) {
    __int16 v8 = 0;
  }
  return *((char *)this + 109) + 86400 * *((char *)this + 108) + 604800 * (v4 - v8);
}

uint64_t BlueFin::GlPeGalTimeMgr::GetFutureLS(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlGalTime *a2, signed __int8 *a3, double a4)
{
  if (*((_DWORD *)this + 6) && !BlueFin::GlPeGalTimeMgr::isExpired(this, a2, a4))
  {
    unsigned int v16 = 0;
    int FctOfFutureLS = BlueFin::GlPeGalTimeMgr::GetFctOfFutureLS(this, a2, &v16, v7);
    uint64_t result = 0;
    if (!FctOfFutureLS) {
      return result;
    }
    unsigned int v10 = v16;
    unsigned int v11 = (*(uint64_t (**)(const BlueFin::GlGalTime *))(*(void *)a2 + 32))(a2);
    LODWORD(v12) = *((_DWORD *)a2 + 2);
    double v13 = (double)v12 * 2.32830644e-10 + (double)v11;
    double v14 = fmod(v13, 4294967300.0);
    if (v13 <= 4294967300.0) {
      double v14 = v13;
    }
    if (v14 < -4294967300.0) {
      double v14 = -fmod(-v14, 4294967300.0);
    }
    if (v14 < 0.0) {
      unsigned int v15 = --v14;
    }
    else {
      unsigned int v15 = v14;
    }
    if (v10 >= v15)
    {
      *a3 = *((unsigned char *)this + 49);
      return 1;
    }
  }
  return 0;
}

uint64_t BlueFin::GlPeGalTimeMgr::GetFctOfFutureLS(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlGalTime *a2, unsigned int *a3, double a4)
{
  *a3 = 0;
  if (!*((_DWORD *)this + 6) || BlueFin::GlPeGalTimeMgr::isExpired(this, a2, a4) || *((char *)this + 48) < 1) {
    return 0;
  }
  unsigned int v7 = (*(unsigned int (**)(const BlueFin::GlGalTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
  int v8 = v7 - *((unsigned __int8 *)this + 47);
  if (v8 >= 0) {
    __int16 v9 = v7 - *((unsigned __int8 *)this + 47);
  }
  else {
    __int16 v9 = *((unsigned __int8 *)this + 47) - v7;
  }
  __int16 v10 = v8 + 256;
  if (v8 >= -127) {
    __int16 v10 = v7 - *((unsigned __int8 *)this + 47);
  }
  if (v8 >= 128) {
    __int16 v11 = v8 - 256;
  }
  else {
    __int16 v11 = v10;
  }
  if (v9 == 128) {
    __int16 v11 = 0;
  }
  *a3 = *((char *)this + 49) + 86400 * *((char *)this + 48) + 604800 * (v7 - v11);
  return 1;
}

BOOL BlueFin::GlPeGalTimeMgr::isExpired(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlGalTime *a2, double a3)
{
  int v3 = *((_DWORD *)this + 6);
  if (!v3) {
    return 1;
  }
  if (v3 == 4) {
    return 0;
  }
  int v7 = *((unsigned __int16 *)this + 14);
  LODWORD(a3) = *((_DWORD *)this + 8);
  double v8 = (double)*(unint64_t *)&a3 * 0.001;
  int v29 = &off_270EBF538;
  double v9 = fmod(v8, 1.0);
  if (v9 < 0.0 || v9 >= 1.0)
  {
LABEL_34:
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v11 = v9 * 4294967300.0 + 0.5;
  unsigned int v12 = v11;
  if (v11 >= 4294967300.0) {
    unsigned int v12 = -1;
  }
  unsigned int v13 = v8 + 604800 * v7;
  unsigned int v30 = v12;
  unsigned int v31 = v13 + 619315200;
  int v29 = &off_270EBF538;
  if (v13 < 0x93A80)
  {
    unsigned int v14 = (*(unsigned int (**)(const BlueFin::GlGalTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
    int v15 = v14 - *((unsigned __int8 *)this + 45);
    if (v15 >= 0) {
      __int16 v16 = v14 - *((unsigned __int8 *)this + 45);
    }
    else {
      __int16 v16 = *((unsigned __int8 *)this + 45) - v14;
    }
    __int16 v17 = v15 + 256;
    if (v15 >= -127) {
      __int16 v17 = v14 - *((unsigned __int8 *)this + 45);
    }
    if (v15 >= 128) {
      __int16 v18 = v15 - 256;
    }
    else {
      __int16 v18 = v17;
    }
    if (v16 == 128) {
      __int16 v19 = 0;
    }
    else {
      __int16 v19 = v18;
    }
    if (*((_DWORD *)this + 6)) {
      double v20 = (double)(*((unsigned __int8 *)this + 44) << 12);
    }
    else {
      double v20 = 0.0;
    }
    double v21 = fmod(v20, 1.0);
    if (v21 < 0.0 || v21 >= 1.0) {
      goto LABEL_34;
    }
    double v22 = v21 * 4294967300.0 + 0.5;
    unsigned int v23 = v22;
    if (v22 >= 4294967300.0) {
      unsigned int v23 = -1;
    }
    unsigned int v30 = v23;
    unsigned int v31 = v20 + 604800 * (unsigned __int16)(v14 - v19) + 619315200;
  }
  unsigned int v24 = (*(uint64_t (**)(const BlueFin::GlGalTime *))(*(void *)a2 + 32))(a2);
  LODWORD(v25) = *((_DWORD *)a2 + 2);
  double v26 = (double)v25 * 2.32830644e-10 + (double)v24;
  unsigned int v27 = ((uint64_t (*)(void))v29[4])(&v29);
  LODWORD(v28) = v30;
  return vabdd_f64(v26, (double)v28 * 2.32830644e-10 + (double)v27) > 4838400.0;
}

uint64_t BlueFin::GlPeBdsTimeMgr::GetFutureLS(BlueFin::GlPeBdsTimeMgr *this, const BlueFin::GlBdsTime *a2, signed __int8 *a3)
{
  if ((*((unsigned char *)this + 8) & 0x40) != 0)
  {
    signed int v6 = *((unsigned __int16 *)this + 14)
       - (*(unsigned int (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
    if (v6 < 0) {
      signed int v6 = -v6;
    }
    if ((604800 * v6) <= 0x24EA00)
    {
      unsigned int v15 = 0;
      int FctOfFutureLS = BlueFin::GlPeBdsTimeMgr::GetFctOfFutureLS(this, a2, &v15);
      uint64_t result = 0;
      if (!FctOfFutureLS) {
        return result;
      }
      unsigned int v9 = v15;
      unsigned int v10 = (*(uint64_t (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2);
      LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)a2 + 2);
      double v12 = (double)v11 * 2.32830644e-10 + (double)v10;
      double v13 = fmod(v12, 4294967300.0);
      if (v12 <= 4294967300.0) {
        double v13 = v12;
      }
      if (v13 < -4294967300.0) {
        double v13 = -fmod(-v13, 4294967300.0);
      }
      if (v13 < 0.0) {
        unsigned int v14 = --v13;
      }
      else {
        unsigned int v14 = v13;
      }
      if (v9 >= v14)
      {
        *a3 = *((unsigned char *)this + 27);
        return 1;
      }
    }
  }
  return 0;
}

uint64_t BlueFin::GlPeBdsTimeMgr::GetFctOfFutureLS(BlueFin::GlPeBdsTimeMgr *this, const BlueFin::GlBdsTime *a2, unsigned int *a3)
{
  uint64_t result = 0;
  *a3 = 0;
  if ((*((unsigned char *)this + 8) & 0x40) != 0)
  {
    signed int v7 = *((unsigned __int16 *)this + 14)
       - (*(unsigned int (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
    if (v7 < 0) {
      signed int v7 = -v7;
    }
    if ((604800 * v7) <= 0x24EA00)
    {
      unsigned int v8 = (*(unsigned int (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
      int v9 = v8 - *((unsigned __int8 *)this + 25);
      if (v9 >= 0) {
        __int16 v10 = v8 - *((unsigned __int8 *)this + 25);
      }
      else {
        __int16 v10 = *((unsigned __int8 *)this + 25) - v8;
      }
      __int16 v11 = v9 + 256;
      if (v9 >= -127) {
        __int16 v11 = v8 - *((unsigned __int8 *)this + 25);
      }
      if (v9 >= 128) {
        __int16 v12 = v9 - 256;
      }
      else {
        __int16 v12 = v11;
      }
      if (v10 == 128) {
        __int16 v12 = 0;
      }
      *a3 = *((char *)this + 27) + 86400 * *((unsigned __int8 *)this + 26) + 604800 * (v8 - v12) + 86400;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::UseHardCodedData(BlueFin::GlPeTimeManager **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__n128 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,unsigned __int8 a53,int a54,unsigned __int8 a55,uint64_t a56,uint64_t a57,void (**a58)(BlueFin::GlGpsTime *__hidden this),unint64_t a59)
{
  double v59 = (BlueFin::GlPeAlmMgr *)this;
  STACK[0x5F8] = *MEMORY[0x263EF8340];
  int v107 = &off_270EBC600;
  unint64_t v108 = 0;
  double v60 = this[56];
  if (*((_DWORD *)v60 + 644))
  {
    BlueFin::GlPeTimeManager::GetTime(v60, 1, &a29);
    a59 = 0;
    a58 = &off_270EBC600;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&a29, (BlueFin::GlGpsTime *)&a58);
    unint64_t v108 = a59;
  }
  else
  {
    int v61 = BlueFin::GlSettingsImpl::m_ulActiveBuildFct;
    a29.n128_u64[0] = (unint64_t)&off_270EBC600;
    double v62 = fmod((double)(BlueFin::GlSettingsImpl::m_ulActiveBuildFct % 0x93A80u), 1.0);
    if (v62 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v63 = v62 * 4294967300.0 + 0.5;
    unsigned int v64 = v63;
    if (v63 >= 4294967300.0) {
      unsigned int v64 = -1;
    }
    unint64_t v108 = __PAIR64__(v61, v64);
  }
  uint64_t v65 = 0;
  STACK[0x5C8] = (unint64_t)&a58;
  do
  {
    uint64_t v66 = STACK[0x5C8] + v65;
    *(void *)(v66 + 12) = 0;
    *(void *)uint64_t v66 = v66 + 12;
    *(unsigned char *)(v66 + 8) = 2;
    v65 += 24;
  }
  while (v65 != 168);
  for (uint64_t i = 0; i != 168; i += 24)
  {
    unsigned int v68 = (char *)&v109 + i;
    *(unint64_t *)((char *)&v111 + i + 4) = 0;
    *(void *)unsigned int v68 = (char *)&v111 + i + 4;
    v68[8] = 2;
  }
  for (unsigned int j = 0; j != 7; ++j)
    BlueFin::GlGnssSet::SetAll((uint64_t)&v109, j);
  BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&a29, (const BlueFin::GlGnssSet *)&v109);
  while (a52 != 6 || a53 != 14)
  {
    a54 = a52;
    a55 = a53;
    int v109 = a52;
    unsigned __int8 v110 = a53;
    if (BlueFin::GlPeAlmMgr::GetDefaultAlm((unsigned int *)&v109))
    {
      a54 = a52;
      a55 = a53;
      int v109 = a52;
      unsigned __int8 v110 = a53;
      BlueFin::GlGnssSet::Add((uint64_t)&a58, &v109);
    }
    BlueFin::GlGnssSetIterator::operator++((uint64_t)&a29);
  }
  BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&a29, (const BlueFin::GlGnssSet *)&a58);
  unsigned int v98 = v59;
  while (1)
  {
    unsigned int v71 = a52;
    unint64_t v72 = a53;
    if (a52 == 6 && a53 == 14) {
      break;
    }
    a54 = a52;
    a55 = a53;
    int v105 = a52;
    unsigned __int8 v106 = a53;
    Defaultint Alm = BlueFin::GlPeAlmMgr::GetDefaultAlm((unsigned int *)&v105);
    if (DefaultAlm)
    {
      __int16 v75 = *DefaultAlm;
      LOWORD(v109) = *DefaultAlm;
      __int16 v76 = DefaultAlm[1];
      HIWORD(v109) = v76;
      unint64_t v77 = *((void *)DefaultAlm + 1);
      unint64_t v111 = v77;
      int v78 = *((_DWORD *)DefaultAlm + 4);
      LODWORD(varsBlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v78;
      uint64_t v80 = *((void *)DefaultAlm + 3);
      uint64_t v79 = *((void *)DefaultAlm + 4);
      uint64_t vars8 = v80;
      uint64_t v100 = v79;
      uint64_t v81 = *((void *)DefaultAlm + 5);
      uint64_t v82 = *((void *)DefaultAlm + 6);
      uint64_t v83 = *((void *)DefaultAlm + 7);
      uint64_t v84 = *((void *)DefaultAlm + 8);
      uint64_t v85 = *((void *)DefaultAlm + 9);
      uint64_t v86 = *((void *)DefaultAlm + 10);
      __int16 v87 = DefaultAlm[44];
      int v88 = *((_DWORD *)DefaultAlm + 23);
      char v89 = *((unsigned char *)DefaultAlm + 96);
      uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)v59, v71, v72);
      if (((*(unsigned int *)(*(void *)(*((void *)v59 + 54) + 48 * v71 + 24) + 4 * (v72 >> 5)) >> (v72 & 0x1F)) & 1) == 0) {
        goto LABEL_29;
      }
      uint64_t v99 = v80;
      BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&v109, (const BlueFin::GlGpsTime *)&v107, (uint64_t)&v103);
      unint64_t v91 = v77;
      unsigned int v92 = (*(uint64_t (**)(uint64_t *))(v103 + 32))(&v103);
      LODWORD(v77) = v104;
      BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)AlmReference, (const BlueFin::GlGpsTime *)&v107, (uint64_t)&v101);
      unsigned int v93 = (*(uint64_t (**)(uint64_t *))(v101 + 32))(&v101);
      LODWORD(v94) = v102;
      double v95 = (double)v77 * 2.32830644e-10 + (double)v92 - ((double)v94 * 2.32830644e-10 + (double)v93);
      double v59 = v98;
      unint64_t v77 = v91;
      uint64_t v80 = v99;
      if (v95 >= 604800.0)
      {
LABEL_29:
        *(_DWORD *)(AlmReference + 104) = v71;
        *(unsigned char *)(AlmReference + 108) = v72;
        *(_WORD *)uint64_t AlmReference = v75;
        *(_WORD *)(AlmReference + 2) = v76;
        *(void *)(AlmReference + 8) = v77;
        *(_DWORD *)(AlmReference + 16) = v78;
        *(void *)(AlmReference + 24) = v80;
        *(void *)(AlmReference + 32) = v100;
        *(void *)(AlmReference + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v81;
        *(void *)(AlmReference + 48) = v82;
        *(void *)(AlmReference + 56) = v83;
        *(void *)(AlmReference + 64) = v84;
        *(void *)(AlmReference + 72) = v85;
        *(void *)(AlmReference + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v86;
        *(_DWORD *)(AlmReference + 92) = v88;
        *(unsigned char *)(AlmReference + 96) = v89;
        *(_WORD *)(AlmReference + 88) = v87;
        if ((v72 - 64) <= 0xC0u)
        {
          DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        }
        uint64_t v96 = *((void *)v59 + 54) + 48 * v71;
        *(_DWORD *)(*(void *)(v96 + 24) + 4 * (v72 >> 5)) |= 1 << (v72 & 0x1F);
        BlueFin::GlSetBase::Remove(v96, v72);
      }
    }
    BlueFin::GlGnssSetIterator::operator++((uint64_t)&a29);
  }
  *((unsigned char *)v59 + 36712) = 0;
  return 1;
}

uint64_t BlueFin::GlDbgProxy::WriteDbgMetaData(BlueFin::GlDbgProxy *this, BOOL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,char a52,int a53,char a54,uint64_t a55,uint64_t a56,char a57)
{
  STACK[0x548] = *MEMORY[0x263EF8340];
  v83[7] = a2;
  BlueFin::GlDbgCodec::WriteStart(this, 5121);
  if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, (unsigned int *)this + 1643);
  }
  BlueFin::GlDbgCodec::Write(this, &BlueFin::GlVersion::ulChangeList);
  uint64_t v59 = 0;
  double v60 = "11561015,10000000,00000000,00000000,00000080";
  do
  {
    int v61 = 0;
    double v62 = v60;
    uint64_t v63 = 32;
    do
    {
      int v65 = *v62++;
      int v64 = v65;
      if (v65 >= 58) {
        int v66 = -55;
      }
      else {
        int v66 = -48;
      }
      v63 -= 4;
      v61 |= (v66 + v64) << v63;
    }
    while (v63);
    a27 = v61;
    BlueFin::GlDbgCodec::Write(this, (unsigned int *)&a27);
    ++v59;
    v60 += 9;
  }
  while (v59 != 5);
  int v67 = (*(uint64_t (**)(char *))(*((void *)this + 122) + 704))((char *)this + 976);
  if (!v67)
  {
    DeviceFaultNotify("gldebug_proxy.cpp", 7309, "WriteDbgMetaData", (char)"eEngineType != GL_ENGINE_TYPE_UNSET");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_proxy.cpp", 7309, "eEngineType != GL_ENGINE_TYPE_UNSET");
  }
  unsigned int v68 = "unset";
  if (v67 == 2) {
    unsigned int v68 = "hairtail";
  }
  if (v67 == 1) {
    float v69 = "sardine";
  }
  else {
    float v69 = (char *)v68;
  }
  *(_DWORD *)uint64_t v83 = strlen(v69);
  BlueFin::GlDbgCodec::WriteArray(this, v69, (unsigned int *)v83);
  if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, &v83[7]);
  }
  if (a2)
  {
    uint64_t v70 = 0;
    STACK[0x518] = (unint64_t)&a57;
    do
    {
      uint64_t v71 = STACK[0x518] + v70;
      *(void *)(v71 + 12) = 0;
      *(void *)uint64_t v71 = v71 + 12;
      *(unsigned char *)(v71 + 8) = 2;
      v70 += 24;
    }
    while (v70 != 168);
    for (uint64_t i = 0; i != 168; i += 24)
    {
      int v73 = (char *)&v84 + i;
      *(uint64_t *)((char *)&v86 + i + 4) = 0;
      *(void *)int v73 = (char *)&v86 + i + 4;
      v73[8] = 2;
    }
    for (unsigned int j = 0; j != 7; ++j)
      BlueFin::GlGnssSet::SetAll((uint64_t)&v84, j);
    BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&a27, (const BlueFin::GlGnssSet *)&v84);
    while (a51 != 6 || a52 != 14)
    {
      a53 = a51;
      a54 = a52;
      int v84 = a51;
      char v85 = a52;
      if (BlueFin::GlPeAlmMgr::GetDefaultAlm((unsigned int *)&v84))
      {
        a53 = a51;
        a54 = a52;
        int v84 = a51;
        char v85 = a52;
        BlueFin::GlGnssSet::Add((uint64_t)&a57, &v84);
      }
      BlueFin::GlGnssSetIterator::operator++((uint64_t)&a27);
    }
    uint64_t v76 = 0;
    int v77 = 0;
    unint64_t v78 = STACK[0x518];
    do
    {
      v77 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v78 + v76));
      v76 += 24;
    }
    while (v76 != 168);
    v82[3] = v77;
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, &v82[3]);
    }
    BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&a27, (const BlueFin::GlGnssSet *)&a57);
    while (a51 != 6 || a52 != 14)
    {
      a53 = a51;
      a54 = a52;
      int v84 = a51;
      char v85 = a52;
      Defaultint Alm = BlueFin::GlPeAlmMgr::GetDefaultAlm((unsigned int *)&v84);
      if (DefaultAlm)
      {
        a53 = a51;
        a54 = a52;
        int v84 = -65536;
        uint64_t v86 = 0;
        long long var8 = 0u;
        *(void *)&long long _2F8 = 0;
        LODWORD(v87) = 0;
        int v84 = *(_DWORD *)DefaultAlm;
        uint64_t v86 = *((void *)DefaultAlm + 1);
        LODWORD(v87) = *((_DWORD *)DefaultAlm + 4);
        long long var8 = *(_OWORD *)(DefaultAlm + 12);
        long long _2F8 = *(_OWORD *)(DefaultAlm + 20);
        if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this))
        {
          *((_DWORD *)this + 143) = 2;
          BlueFin::GlDbgCodec::Rvw(this, (BlueFin::GlPeAlmanac *)&v84);
        }
      }
      BlueFin::GlGnssSetIterator::operator++((uint64_t)&a27);
    }
  }
  return (*(uint64_t (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
}

_WORD *BlueFin::GlPeAlmMgr::GetDefaultAlm(unsigned int *a1)
{
  uint64_t v2 = *a1;
  if (v2 > 6) {
    return 0;
  }
  int v3 = *(&off_2655DF610)[(int)v2];
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)*(&off_2655DF5D8 + (int)v2);
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          BlueFin::GlPeAlmanacPlainOldData::AlmId2Gnss(v2, *v3, (uint64_t)&v6);
          uint64_t v2 = v6;
          if (v6 == *a1)
          {
            if (v7 == *((unsigned char *)a1 + 4)) {
              return v3;
            }
          }
          else
          {
            uint64_t v2 = *a1;
          }
        }
        v3 += 52;
        --v4;
      }
      while (v4);
    }
    return 0;
  }
  return v3;
}

uint64_t BlueFin::GlPeAlmanacPlainOldData::AlmId2Gnss@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (result > 6) {
    goto LABEL_11;
  }
  char v3 = a2 - 119;
  if (result != 1) {
    char v3 = a2 + 64;
  }
  unsigned __int8 v4 = ((1 << result) & 0x75) != 0 ? a2 : v3;
  if (!v4)
  {
LABEL_11:
    DeviceFaultNotify("glpe_almmgr.cpp", 137, "AlmId2Gnss", (char)"ucGnssId != INVALID_GNSS_ID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", 137, "ucGnssId != INVALID_GNSS_ID");
  }
  if (((0xE243F0A181320uLL >> (8 * result)) & 0x3F) < v4) {
    unsigned __int8 v4 = 0;
  }
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = v4;
  return result;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, unsigned int *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    *(_DWORD *)int v5 = bswap32(*a2);
    return BlueFin::GlDbgCodecBase::Encode((char *)this, (char *)v5, 4, 0, 0);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::GetEngineType(BlueFin::GlEngineImplStd *this)
{
  return *((unsigned int *)this + 1232);
}

BOOL BlueFin::GlPosEng::needToReadLto(BlueFin::GlPosEng *this)
{
  uint64_t v2 = 0;
  char v3 = (char *)this + 34091;
  do
  {
    unsigned __int8 v4 = (char *)&v12 + v2;
    *(uint64_t *)((char *)&v12 + v2 + 12) = 0;
    *(void *)unsigned __int8 v4 = (char *)&v12 + v2 + 12;
    v4[8] = 2;
    v2 += 24;
  }
  while (v2 != 168);
  for (unsigned int i = 0; i != 7; ++i)
    BlueFin::GlGnssSet::SetAll((uint64_t)&v12, i);
  if (BlueFin::GlPeAsstMgr::GetExpiringEphemerisSvs((BlueFin::GlPosEng *)((char *)this + 224), (BlueFin::GlGnssSet *)&v12) < 0x78|| *(_OWORD *)v3 == 0)
  {
    return 1;
  }
  uint64_t v6 = 0;
  char v7 = 1;
  do
  {
    while ((v7 & 1) == 0)
    {
      char v7 = 0;
      if (++v6 == 7) {
        goto LABEL_14;
      }
    }
    BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 1129) + 24 * v6));
    char v7 = !HasAny;
    ++v6;
  }
  while (v6 != 7);
  if (!HasAny) {
    return 1;
  }
LABEL_14:
  uint64_t v9 = 0;
  char v10 = 1;
  do
  {
    while ((v10 & 1) == 0)
    {
      char v10 = 0;
      if (++v9 == 7) {
        return 1;
      }
    }
    BOOL result = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*(void *)(v3 + 221) + 24 * v9));
    char v10 = !result;
    ++v9;
  }
  while (v9 != 7);
  if (result) {
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlGnssSet::SetAll(uint64_t a1, unsigned int a2)
{
  if (a2 >= 7)
  {
    DeviceFaultNotify("glgnss.cpp", 221, "SetAll", (char)"(GlIntU32)eGnss < NUM_GNSS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 221, "(GlIntU32)eGnss < NUM_GNSS");
  }
  uint64_t result = *(void *)(a1 + 168) + 24 * a2;
  unint64_t v3 = ~(-1 << *(void *)&asc_263BA9E10[8 * a2]);
  *(_DWORD *)(result + 12) = 2 * v3;
  *(void *)uint64_t result = result + 12;
  *(unsigned char *)(result + 8) = 2;
  *(_DWORD *)(result + 16) = v3 >> 31;
  return result;
}

void BlueFin::GlMeSrdReceiverParametersProgrammer::OnReliableAck(BlueFin::GlMeSrdReceiverParametersProgrammer *this, void *a2)
{
  int v2 = (int)a2;
  uint64_t v188 = *MEMORY[0x263EF8340];
  (*(void (**)(void))(**((void **)this + 1) + 264))(*((void *)this + 1));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 264))();
  int MaxAllowedCnstls = BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(v4);
  if (MaxAllowedCnstls)
  {
    int v6 = MaxAllowedCnstls;
    uint64_t v7 = 0;
    int v8 = 0;
    do
    {
      if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 1) + 128))(*((void *)this + 1), v7))
      {
        uint64_t v9 = 0;
        do
        {
          if ((*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 120))(*((void *)this + 1), v7, v9))
          {
            if (v8 == v2)
            {
              uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 15) + 80))(*((void *)this + 15));
              char v13 = *((unsigned char *)this + 102);
              *((unsigned char *)this + 102) = v13 + 1;
              v168[0] = BlueFin::GlMeSrdReceiverParametersProgrammer::OnReliableAck;
              v168[1] = this;
              char v169 = v13;
              __int16 v170 = 1;
              uint64_t v171 = v12;
              int v172 = 0;
              __int16 v173 = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, 1);
              (*(void (**)(void))(**((void **)this + 1) + 264))();
              int v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 264))(*((void *)this + 1));
              if (v7 >= BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(v14))
              {
                uint64_t v156 = "eCnstl < GlMeRxParamLimits::GetMaxAllowedCnstls(m_rRxParams.GetRxType())";
                int v157 = 445;
                DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 445, "ProgramTrackParameters", (char)"eCnstl < GlMeRxParamLimits::GetMaxAllowedCnstls(m_rRxParams.GetRxType())");
                goto LABEL_269;
              }
              if (((*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 120))(*((void *)this + 1), v7, v9) & 1) == 0)
              {
                uint64_t v156 = "m_rRxParams.IsModeSupported(eCnstl, eMode)";
                int v157 = 446;
                DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 446, "ProgramTrackParameters", (char)"m_rRxParams.IsModeSupported(eCnstl, eMode)");
                goto LABEL_269;
              }
              uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 96))(*((void *)this + 1), v7, v9);
              unsigned int v166 = v15;
              int v162 = v15
                   + *(unsigned __int8 *)((*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 168))(*((void *)this + 1), v15)+ 8)- 1;
              if (v15 > v162) {
                goto LABEL_17;
              }
              BOOL v17 = v7 == 3 && v9 == 0;
              BOOL v18 = v7 == 4 && v9 == 1;
              BOOL v159 = v17;
              if (v18) {
                BOOL v17 = 1;
              }
              BOOL v158 = v17;
              int v19 = v15;
              char v20 = v15 + 1;
              float v21 = 3.0;
              if (v9 != 3) {
                float v21 = 1.0;
              }
              float v160 = -v21;
              float v161 = v21 * 4.0;
              double v22 = 0.5;
              while (2)
              {
                int v167 = v19;
                int v164 = v19;
                uint64_t v23 = (*(uint64_t (**)(void))(**((void **)this + 1) + 168))(*((void *)this + 1));
                if (!*(unsigned char *)(v23 + 8)) {
                  goto LABEL_259;
                }
                unsigned int v163 = *(unsigned __int8 *)(v23 + 8);
                int v165 = (*(uint64_t (**)(void, void))(**((void **)this + 1) + 88))(*((void *)this + 1), v167);
                if (v165 != v166)
                {
                  uint64_t v156 = "ucGearidRoot == ucFirstGearid";
                  int v157 = 459;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 459, "ProgramTrackParameters", (char)"ucGearidRoot == ucFirstGearid");
                  goto LABEL_269;
                }
                uint64_t v24 = (*(uint64_t (**)(void, void))(**((void **)this + 1) + 184))(*((void *)this + 1), v167);
                long long v181 = 0u;
                long long v182 = 0u;
                long long v180 = 0u;
                LOBYTE(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v167;
                BYTE1(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(v24 + 4);
                double v25 = v22 + *(float *)(v24 + 12) * 256.0;
                double v26 = fmod(v25, 4294967300.0);
                if (v25 <= 4294967300.0) {
                  double v26 = v25;
                }
                if (v26 < -4294967300.0) {
                  double v26 = -fmod(-v26, 4294967300.0);
                }
                if (v26 < 0.0) {
                  unsigned int v27 = --v26;
                }
                else {
                  LOBYTE(v27) = v26;
                }
                BYTE2(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v27;
                float v28 = *(float *)(*(uint64_t (**)(void, void))(**((void **)this + 1) + 168))(*((void *)this + 1), v167);
                int v29 = (float *)(*(uint64_t (**)(void, void))(**((void **)this + 1) + 168))(*((void *)this + 1), v167);
                float v30 = v29[12];
                EswCoherentTableint Index = (BlueFin::GlMeSrdReceiverParametersProgrammer *)BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex((BlueFin::GlMeSrdReceiverParametersProgrammer *)v29, *(float *)(v24 + 8), v28);
                BYTE3(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (_BYTE)EswCoherentTableIndex;
                unsigned int v32 = (BlueFin::GlMeSrdReceiverParametersProgrammer *)BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(EswCoherentTableIndex, v30, v28);
                HIBYTE(v182) = (_BYTE)v32;
                BYTE4(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(v32, *(float *)(v24 + 24), v28);
                BYTE5(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v24 + 48);
                if (*(unsigned char *)(v24 + 28) != 3)
                {
                  uint64_t v156 = "ucLpOrder == 3";
                  int v157 = 1038;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1038, "GetPllLoopCoefficients", (char)"ucLpOrder == 3");
                  goto LABEL_269;
                }
                float v33 = *(float *)(v24 + 24);
                double v34 = *(float *)(v24 + 32);
                double v35 = v34 * 2.4 * v28;
                double v36 = v34 * 1.2;
                *(float *)&double v34 = v34 * 1.2;
                float v37 = powf(*(float *)&v34, 3.0);
                double v38 = v35 * 65536.0;
                if (v35 * 65536.0 < 0.0
                  || v38 > 65535.0
                  || (float v39 = v36 * v28, v40 = (float)((float)(v39 * v39) + (float)(v39 * v39)) * 65536.0, v40 < 0.0)
                  || v40 > 65535.0
                  || (double v41 = (float)(v33 * (float)((float)(v28 * v28) * v37)) * 524288.0, v41 < 0.0)
                  || v41 > 65535.0)
                {
                  uint64_t v156 = "dCoeff0 >= 0.0 && dCoeff0 <= MAX_USHORT && dCoeff1 >= 0.0 && dCoeff1 <= MAX_USHORT && dCoeff2 >"
                         "= 0.0 && dCoeff2 <= MAX_USHORT";
                  int v157 = 1049;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1049, "GetPllLoopCoefficients", (char)"dCoeff0 >= 0.0 && dCoeff0 <= MAX_USHORT && dCoeff1 >= 0.0 && dCoeff1 <= MAX_USHORT && dCoeff2 >= 0.0 && dCoeff2 <= MAX_USHORT");
                  goto LABEL_269;
                }
                double v42 = v38 + 0.5;
                double v43 = fmod(v38 + 0.5, 4294967300.0);
                if (v42 <= 4294967300.0) {
                  double v43 = v42;
                }
                if (v43 < -4294967300.0) {
                  double v43 = -fmod(-v43, 4294967300.0);
                }
                if (v43 < 0.0) {
                  unsigned int v44 = --v43;
                }
                else {
                  LOWORD(v44) = v43;
                }
                WORD3(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v44;
                double v45 = fmod(v40 + 0.5, 4294967300.0);
                if (v40 + 0.5 <= 4294967300.0) {
                  double v45 = v40 + 0.5;
                }
                if (v45 < -4294967300.0) {
                  double v45 = -fmod(-v45, 4294967300.0);
                }
                if (v45 < 0.0) {
                  unsigned int v46 = --v45;
                }
                else {
                  LOWORD(v46) = v45;
                }
                WORD4(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v46;
                double v47 = fmod(v41 + 0.5, 4294967300.0);
                if (v41 + 0.5 <= 4294967300.0) {
                  double v47 = v41 + 0.5;
                }
                if (v47 < -4294967300.0) {
                  double v47 = -fmod(-v47, 4294967300.0);
                }
                if (v47 < 0.0) {
                  unsigned int v48 = --v47;
                }
                else {
                  LOWORD(v48) = v47;
                }
                WORD5(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v48;
                float v49 = *(float *)(v23 + 76);
                float EramToCopReQuantScaleFactor = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(*(_DWORD *)(v24 + 4));
                WORD5(v182) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPllPedZeroThresh((uint64_t)this, v7, v9, v49, v33, EramToCopReQuantScaleFactor);
                float v51 = *(float *)(v23 + 80);
                float v52 = *(float *)(v24 + 24);
                float v53 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(*(_DWORD *)(v24 + 4));
                WORD6(v182) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPllPedZeroThresh((uint64_t)this, v7, v9, v51, v52, v53);
                double v54 = *(float *)(v24 + 36) + 0.5;
                double v55 = fmod(v54, 4294967300.0);
                if (v54 <= 4294967300.0) {
                  double v55 = v54;
                }
                if (v55 < -4294967300.0) {
                  double v55 = -fmod(-v55, 4294967300.0);
                }
                if (v55 < 0.0) {
                  unsigned int v56 = --v55;
                }
                else {
                  LOWORD(v56) = v55;
                }
                WORD6(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v56;
                uint64_t v57 = (*(uint64_t (**)(void, void))(**((void **)this + 1) + 184))(*((void *)this + 1), v167);
                float v58 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(*(_DWORD *)(v57 + 4));
                float v59 = sqrtf(BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswLowMagThres((uint64_t)this, v7, v9, v58, v28));
                float v60 = fmodf(v59, 4295000000.0);
                if (v59 <= 4295000000.0) {
                  float v60 = v59;
                }
                HIWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v60;
                float v61 = *(float *)(v24 + 44) + 0.5;
                float v63 = fmodf(v61, 4295000000.0);
                if (v61 <= 4295000000.0) {
                  float v63 = v61;
                }
                if (v63 < -4295000000.0) {
                  float v63 = -fmodf(-v63, 4295000000.0);
                }
                if (v63 < 0.0) {
                  unsigned int v64 = -(float)-v63;
                }
                else {
                  LOBYTE(v64) = v63;
                }
                LOBYTE(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v64;
                int v65 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(v62, *(float *)(v24 + 52), v28);
                BYTE1(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v65;
                BYTE14(v182) = 0;
                if (v7 <= 4
                  && ((1 << v7) & 0x19) != 0
                  && (v9 & 0x7FFFFFFE) == 2
                  && (v65 == 10 || BYTE4(v180) - 9 <= 1))
                {
                  BYTE14(v182) = 32;
                }
                BYTE2(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v24 + 76);
                float v66 = *(float *)(v24 + 60);
                int v67 = *(unsigned __int8 *)(v24 + 56);
                if (v67 == 1)
                {
                  float v69 = v66 * 4.0;
                  double v70 = 0.0;
                  goto LABEL_97;
                }
                if (v67 != 2)
                {
                  uint64_t v156 = "0";
                  int v157 = 1084;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1084, "GetFllLoopCoefficients", (char)"0");
                  goto LABEL_269;
                }
                float v68 = (float)(v66 + v66) / 1.0607;
                float v69 = v68 * 1.4142;
                double v70 = (float)((float)(v28 * (float)(v68 * v68)) * *(float *)(v24 + 52)) * 2097152.0;
LABEL_97:
                double v71 = (float)(v28 * v69) * 1048576.0 / 3.14159265;
                if (v71 < 0.0 || v71 > 65535.0 || (double v72 = v70 / 3.14159265, v70 / 3.14159265 < 0.0) || v72 > 65535.0)
                {
                  uint64_t v156 = "dCoeff0 >= 0.0 && dCoeff0 <= MAX_USHORT && dCoeff1 >= 0.0 && dCoeff1 <= MAX_USHORT";
                  int v157 = 1091;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1091, "GetFllLoopCoefficients", (char)"dCoeff0 >= 0.0 && dCoeff0 <= MAX_USHORT && dCoeff1 >= 0.0 && dCoeff1 <= MAX_USHORT");
                  goto LABEL_269;
                }
                double v73 = v71 + 0.5;
                double v74 = fmod(v71 + 0.5, 4294967300.0);
                if (v73 <= 4294967300.0) {
                  double v74 = v73;
                }
                if (v74 < -4294967300.0) {
                  double v74 = -fmod(-v74, 4294967300.0);
                }
                if (v74 < 0.0) {
                  unsigned int v75 = --v74;
                }
                else {
                  LOWORD(v75) = v74;
                }
                WORD2(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v75;
                double v76 = fmod(v72 + 0.5, 4294967300.0);
                if (v72 + 0.5 <= 4294967300.0) {
                  double v76 = v72 + 0.5;
                }
                if (v76 < -4294967300.0) {
                  double v76 = -fmod(-v76, 4294967300.0);
                }
                if (v76 < 0.0) {
                  unsigned int v77 = --v76;
                }
                else {
                  LOWORD(v77) = v76;
                }
                WORD3(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v77;
                int v78 = *(_DWORD *)(v24 + 80);
                if (v78 == 1)
                {
                  LOBYTE(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
                  goto LABEL_125;
                }
                if (v78)
                {
                  uint64_t v156 = "0";
                  int v157 = 520;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 520, "ProgramTrackParameters", (char)"0");
                  goto LABEL_269;
                }
                float v79 = (float)(*(float *)(v24 + 72) * 0.5) + 0.5;
                float v80 = fmodf(v79, 4295000000.0);
                if (v79 <= 4295000000.0) {
                  float v80 = v79;
                }
                if (v80 < -4295000000.0) {
                  float v80 = -fmodf(-v80, 4295000000.0);
                }
                if (v80 < 0.0) {
                  unsigned int v81 = -(float)-v80;
                }
                else {
                  LOBYTE(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v80;
                }
LABEL_125:
                BYTE8(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v81;
                double v82 = (float)(*(float *)(v24 + 68) * 16.0) + 0.5;
                double v83 = fmod(v82, 4294967300.0);
                if (v82 <= 4294967300.0) {
                  double v83 = v82;
                }
                if (v83 < -4294967300.0) {
                  double v83 = -fmod(-v83, 4294967300.0);
                }
                if (v83 < 0.0) {
                  unsigned int v84 = --v83;
                }
                else {
                  LOWORD(v84) = v83;
                }
                WORD5(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v84;
                float EswLowMagThres = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswLowMagThres((uint64_t)this, v7, v9, v58, v28);
                float v86 = fmodf(EswLowMagThres, 4295000000.0);
                if (EswLowMagThres <= 4295000000.0) {
                  float v86 = EswLowMagThres;
                }
                if (v86 < -4295000000.0) {
                  float v86 = -fmodf(-v86, 4295000000.0);
                }
                if (v86 < 0.0) {
                  unsigned int v87 = -(float)-v86;
                }
                else {
                  unsigned int v87 = v86;
                }
                HIDWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v87;
                float v88 = *(float *)(v24 + 72);
                float v89 = *(float *)(v24 + 52) / v28;
                float v90 = fmodf(v89 + 0.5, 4295000000.0);
                if ((float)(v89 + 0.5) <= 4295000000.0) {
                  float v90 = v89 + 0.5;
                }
                if (v90 < -4295000000.0) {
                  float v90 = -fmodf(-v90, 4295000000.0);
                }
                if (v90 < 0.0) {
                  unsigned int v91 = -(float)-v90;
                }
                else {
                  LOBYTE(v9BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v90;
                }
                float v92 = (float)v91;
                if (vabds_f32(v92, v89) >= 0.000001)
                {
                  uint64_t v156 = "FABS_D((FLOAT)ucNumAcqSamPerFrqErrDetOut - (fErrDetCohIntInSec / fAcqSamIntInSec))<1e-6f";
                  int v157 = 388;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 388, "CalcHiLoSlopeForZeroErrAtUnitAcqSigPwr", (char)"FABS_D((FLOAT)ucNumAcqSamPerFrqErrDetOut - (fErrDetCohIntInSec / fAcqSamIntInSec))<1e-6f");
                  goto LABEL_269;
                }
                float v93 = v28 * (float)((float)(v88 * 0.5) * 6.2832);
                __float2 v94 = __sincosf_stret((float)(v93 * (float)v91) * 0.5);
                __float2 v95 = __sincosf_stret(v93 * 0.5);
                double v22 = 0.5;
                long double v96 = (float)((float)((float)((float)(12.566 / (float)(v92 * v92)) * (float)(v94.__sinval / v95.__sinval))
                                    * (float)((float)(v95.__sinval * (float)-(float)(v94.__cosval * v92))
                                            + (float)(v94.__sinval * v95.__cosval)))
                            / (float)(v95.__sinval * v95.__sinval))
                    + 0.5;
                double v98 = fmod(v96, 4294967300.0);
                if (v96 <= 4294967300.0) {
                  double v98 = (float)((float)((float)((float)(12.566 / (float)(v92 * v92))
                }
                                              * (float)(v94.__sinval / v95.__sinval))
                                      * (float)((float)(v95.__sinval * (float)-(float)(v94.__cosval * v92))
                                              + (float)(v94.__sinval * v95.__cosval)))
                              / (float)(v95.__sinval * v95.__sinval))
                      + 0.5;
                if (v98 < -4294967300.0) {
                  double v98 = -fmod(-v98, 4294967300.0);
                }
                if (v98 < 0.0) {
                  unsigned int v99 = --v98;
                }
                else {
                  unsigned int v99 = v98;
                }
                if (v99 <= 1) {
                  unsigned int v99 = 1;
                }
                if (*(_DWORD *)(v24 + 80) == 1) {
                  unsigned int v99 = 1;
                }
                LODWORD(v182) = v99;
                uint64_t v100 = (BlueFin::GlMeSrdReceiverParametersProgrammer *)BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(v97, *(float *)(v24 + 16), v28);
                BYTE4(v182) = (_BYTE)v100;
                BYTE5(v182) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(v100, *(float *)(v24 + 20), v28);
                float v101 = *(float *)(v24 + 88);
                float v102 = *(float *)(*(uint64_t (**)(void))(**((void **)this + 1) + 136))(*((void *)this + 1));
                float v103 = *(float *)(v24 + 92);
                int v104 = *(_DWORD *)(v24 + 4);
                (*(void (**)(void))(**((void **)this + 1) + 136))(*((void *)this + 1));
                double v105 = (float)((float)(v101 * 4.0) * v102)
                     / (float)(v161 * (float)((float)(v160 * (float)(v103 * 0.5)) + 1.0));
                if (v104)
                {
                  if (v104 != 2)
                  {
                    if (v104 == 4)
                    {
                      double v106 = 16.0;
                      goto LABEL_163;
                    }
                    uint64_t v156 = "0";
                    int v157 = 1138;
                    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1138, "GetDllLoopCoefficients", (char)"0");
LABEL_269:
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v157, v156);
                  }
                  double v106 = 4.0;
LABEL_163:
                  double v105 = v105 * v106;
                }
                int v107 = (*(uint64_t (**)(void))(**((void **)this + 2) + 328))(*((void *)this + 2));
                double v108 = 20.0;
                if (v107) {
                  double v108 = 16.0;
                }
                double v109 = v105 * v108 * 8.0;
                if (v109 < 0.0 || v109 > 65535.0)
                {
                  uint64_t v156 = "dCoeff0 >= 0.0 && dCoeff0 <= MAX_USHORT";
                  int v157 = 1152;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1152, "GetDllLoopCoefficients", (char)"dCoeff0 >= 0.0 && dCoeff0 <= MAX_USHORT");
                  goto LABEL_269;
                }
                double v110 = v109 + 0.5;
                double v111 = fmod(v109 + 0.5, 4294967300.0);
                if (v110 <= 4294967300.0) {
                  double v111 = v110;
                }
                if (v111 < -4294967300.0) {
                  double v111 = -fmod(-v111, 4294967300.0);
                }
                if (v111 < 0.0) {
                  unsigned int v112 = --v111;
                }
                else {
                  LOWORD(v112) = v111;
                }
                if (!(_WORD)v112) {
                  LOWORD(v112) = 1;
                }
                WORD3(v182) = v112;
                uint64_t v113 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 1) + 176))(*((void *)this + 1), v7, v9);
                unsigned int v114 = *(_DWORD *)(v113 + 148);
                if (v114 > 8)
                {
LABEL_292:
                  uint64_t v156 = "0";
                  int v157 = 631;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 631, "ProgramTrackParameters", (char)"0");
                  goto LABEL_269;
                }
                if (((1 << v114) & 0x1AB) != 0)
                {
                  unsigned int v115 = *(unsigned __int8 *)(v113 + 155);
                  if (v115 >= 8)
                  {
                    uint64_t v156 = "(late_offset & DLL_OFFSET_MASK) == late_offset";
                    int v157 = 608;
                    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 608, "ProgramTrackParameters", (char)"(late_offset & DLL_OFFSET_MASK) == late_offset");
                    goto LABEL_269;
                  }
                  unsigned int v116 = *(unsigned __int8 *)(v113 + 154);
                  if (v116 >= 8)
                  {
                    uint64_t v156 = "(early_offset & DLL_OFFSET_MASK) == early_offset";
                    int v157 = 609;
                    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 609, "ProgramTrackParameters", (char)"(early_offset & DLL_OFFSET_MASK) == early_offset");
                    goto LABEL_269;
                  }
                  char v117 = v116 | (8 * (v115 & 7));
                  BYTE8(v182) = v117;
                  if (v114 == 5)
                  {
                    char v118 = v117 | 0x40;
                    goto LABEL_193;
                  }
                }
                else
                {
                  if (v114 == 2)
                  {
                    if (*(unsigned char *)(v113 + 153) != 1)
                    {
                      uint64_t v156 = "stCvecTapConfig.ucIdxOfPromptSample == 1";
                      int v157 = 589;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 589, "ProgramTrackParameters", (char)"stCvecTapConfig.ucIdxOfPromptSample == 1");
                      goto LABEL_269;
                    }
                    unsigned int v119 = *(unsigned __int8 *)(v113 + 155);
                    if (v119 >= 8)
                    {
                      uint64_t v156 = "(late_offset & DLL_OFFSET_MASK) == late_offset";
                      int v157 = 592;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 592, "ProgramTrackParameters", (char)"(late_offset & DLL_OFFSET_MASK) == late_offset");
                      goto LABEL_269;
                    }
                    unsigned int v120 = *(unsigned __int8 *)(v113 + 154);
                    if (v120 >= 8)
                    {
                      uint64_t v156 = "(early_offset & DLL_OFFSET_MASK) == early_offset";
                      int v157 = 593;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 593, "ProgramTrackParameters", (char)"(early_offset & DLL_OFFSET_MASK) == early_offset");
                      goto LABEL_269;
                    }
                  }
                  else
                  {
                    if (v114 != 6) {
                      goto LABEL_292;
                    }
                    if (*(unsigned char *)(v113 + 153) != 6)
                    {
                      uint64_t v156 = "stCvecTapConfig.ucIdxOfPromptSample == 6";
                      int v157 = 619;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 619, "ProgramTrackParameters", (char)"stCvecTapConfig.ucIdxOfPromptSample == 6");
                      goto LABEL_269;
                    }
                    unsigned int v119 = *(unsigned __int8 *)(v113 + 155);
                    if (v119 >= 8)
                    {
                      uint64_t v156 = "(late_offset & DLL_OFFSET_MASK) == late_offset";
                      int v157 = 623;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 623, "ProgramTrackParameters", (char)"(late_offset & DLL_OFFSET_MASK) == late_offset");
                      goto LABEL_269;
                    }
                    unsigned int v120 = *(unsigned __int8 *)(v113 + 154);
                    if (v120 >= 8)
                    {
                      uint64_t v156 = "(early_offset & DLL_OFFSET_MASK) == early_offset";
                      int v157 = 624;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 624, "ProgramTrackParameters", (char)"(early_offset & DLL_OFFSET_MASK) == early_offset");
                      goto LABEL_269;
                    }
                  }
                  char v118 = v120 | (8 * (v119 & 7));
LABEL_193:
                  BYTE8(v182) = v118;
                }
                unsigned int v121 = v180;
                if (v121 >= (*(unsigned int (**)(void))(**((void **)this + 2) + 424))(*((void *)this + 2)))
                {
                  uint64_t v156 = "otTpParam.tp_id < m_rAsicConfigIfc.GetMaxTrackParamIndex()";
                  int v157 = 635;
                  DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 635, "ProgramTrackParameters", (char)"otTpParam.tp_id < m_rAsicConfigIfc.GetMaxTrackParamIndex()");
                  goto LABEL_269;
                }
                uint64_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v171 + 48))(v171);
                uint64_t v123 = (*(uint64_t (**)(uint64_t))(*(void *)v122 + 48))(v122);
                (*(void (**)(uint64_t, void *, long long *))(*(void *)v123 + 56))(v123, v168, &v180);
                uint64_t v124 = 0;
                v174[0] = v167;
                v174[1] = v166;
                uint64_t v125 = (v164 - v165);
                float v126 = *(float *)(v23 + 16);
LABEL_196:
                float v127 = *(float *)(v23 + 4 * v124 + 28);
                v187[v124] = v127;
                if (v124 == v125)
                {
                  float v128 = v126 + v127;
                  uint64_t v129 = v125 + 1;
                  goto LABEL_200;
                }
                uint64_t v129 = v124 + 1;
                if (v124 + 1 == v125)
                {
                  float v128 = v127 - v126;
                  uint64_t v129 = (v164 - v165);
LABEL_200:
                  v187[v124] = v128;
                }
                uint64_t v124 = v129;
                if (v129 == 4)
                {
                  for (uint64_t i = 0; i != 4; ++i)
                  {
                    float v131 = *(float *)((*(uint64_t (**)(void, void))(**((void **)this + 1) + 184))(*((void *)this + 1), (v20 + i))+ 8);
                    uint64_t v132 = (*(uint64_t (**)(void, void))(**((void **)this + 1) + 184))(*((void *)this + 1), (v20 + i));
                    float v133 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(*(_DWORD *)(v132 + 4));
                    float v134 = v187[i];
                    uint64_t v135 = (v20 + i);
                    uint64_t v136 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 80))(*((void *)this + 1), v135);
                    int v137 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 72))(*((void *)this + 1), v135);
                    BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold((uint64_t)this, v136, v137, v134, v131, v133);
                    float v139 = (float)(v138 * 16.0) * 0.000000059605;
                    *(&v183 + i) = v139;
                    if (v139 <= 0.0)
                    {
                      uint64_t v156 = "afThresholdEsw[k] > 0.0f";
                      int v157 = 678;
                      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 678, "ProgramTrackParameters", (char)"afThresholdEsw[k] > 0.0f");
                      goto LABEL_269;
                    }
                    if (v139 > 255.0)
                    {
                      GlCustomLog(12, "WARNING: Cnst %u, Mode %u, Gear %u, threshold_g%u :Threshold over 255 (%f)\n", v7, v9, v125, i + 2, v139);
                      *(&v183 + i) = 255.0;
                    }
                  }
                  if (v163 <= 1)
                  {
                    char v177 = 0;
                    goto LABEL_217;
                  }
                  float v140 = v183 + 0.5;
                  float v141 = fmodf(v183 + 0.5, 4295000000.0);
                  if (v140 <= 4295000000.0) {
                    float v141 = v140;
                  }
                  if (v141 < -4295000000.0) {
                    float v141 = -fmodf(-v141, 4295000000.0);
                  }
                  if (v141 < 0.0) {
                    unsigned int v142 = -(float)-v141;
                  }
                  else {
                    LOBYTE(v142) = v141;
                  }
                  char v177 = v142;
                  if (v163 < 3)
                  {
LABEL_217:
                    char v176 = 0;
                    goto LABEL_218;
                  }
                  float v144 = v184 + 0.5;
                  float v145 = fmodf(v184 + 0.5, 4295000000.0);
                  if (v144 <= 4295000000.0) {
                    float v145 = v144;
                  }
                  if (v145 < -4295000000.0) {
                    float v145 = -fmodf(-v145, 4295000000.0);
                  }
                  if (v145 < 0.0) {
                    unsigned int v146 = -(float)-v145;
                  }
                  else {
                    LOBYTE(v146) = v145;
                  }
                  char v176 = v146;
                  if (v163 < 4)
                  {
LABEL_218:
                    LOBYTE(v143) = 0;
                    char v175 = 0;
                  }
                  else
                  {
                    float v147 = v185 + 0.5;
                    float v148 = fmodf(v185 + 0.5, 4295000000.0);
                    if (v147 <= 4295000000.0) {
                      float v148 = v147;
                    }
                    if (v148 < -4295000000.0) {
                      float v148 = -fmodf(-v148, 4295000000.0);
                    }
                    if (v148 < 0.0) {
                      unsigned int v149 = -(float)-v148;
                    }
                    else {
                      LOBYTE(v149) = v148;
                    }
                    char v175 = v149;
                    if (v163 >= 5)
                    {
                      float v154 = v186 + 0.5;
                      float v155 = fmodf(v186 + 0.5, 4295000000.0);
                      if (v154 <= 4295000000.0) {
                        float v155 = v154;
                      }
                      if (v155 < -4295000000.0) {
                        float v155 = -fmodf(-v155, 4295000000.0);
                      }
                      if (v155 < 0.0) {
                        unsigned int v143 = -(float)-v155;
                      }
                      else {
                        LOBYTE(v143) = v155;
                      }
                    }
                    else
                    {
                      LOBYTE(v143) = 0;
                    }
                  }
                  v174[2] = v143;
                  unsigned __int8 v178 = v180;
                  if (v166 > v167)
                  {
                    uint64_t v156 = "ucGearid >= ucGearidRoot";
                    int v157 = 710;
                    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 710, "ProgramTrackParameters", (char)"ucGearid >= ucGearidRoot");
                    goto LABEL_269;
                  }
                  if (v9 == 2
                    && !v7
                    && v166 == v167
                    && (((*(uint64_t (**)(void))(**((void **)this + 2) + 256))(*((void *)this + 2)) & 1) != 0
                     || ((*(uint64_t (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)) & 1) != 0))
                  {
                    goto LABEL_255;
                  }
                  if (v166 != v167)
                  {
                    if (v9 == 2
                      && !v7
                      && v125 == 1
                      && (((*(uint64_t (**)(void))(**((void **)this + 2) + 256))(*((void *)this + 2)) & 1) != 0
                       || ((*(uint64_t (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)) & 1) != 0))
                    {
LABEL_255:
                      __int16 v179 = 0;
                      goto LABEL_256;
                    }
                    LOBYTE(v179) = 0;
LABEL_253:
                    HIBYTE(v179) = 0;
                    goto LABEL_254;
                  }
                  __int16 v179 = -256;
                  if (((*(uint64_t (**)(void))(**((void **)this + 2) + 256))(*((void *)this + 2)) & 1) == 0)
                  {
                    if ((v158 & (*(unsigned int (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)) & 1) == 0) {
                      goto LABEL_254;
                    }
                    goto LABEL_253;
                  }
                  if (v158) {
                    goto LABEL_253;
                  }
LABEL_254:
                  if (v159) {
                    goto LABEL_255;
                  }
LABEL_256:
                  unsigned int v150 = v174[0];
                  if (v150 >= (*(unsigned int (**)(void))(**((void **)this + 2) + 408))(*((void *)this + 2)))
                  {
                    uint64_t v156 = "otGsParam.gs_id < m_rAsicConfigIfc.GetMaxGearStepIndex()";
                    int v157 = 771;
                    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 771, "ProgramTrackParameters", (char)"otGsParam.gs_id < m_rAsicConfigIfc.GetMaxGearStepIndex()");
                    goto LABEL_269;
                  }
                  unsigned int v151 = v178;
                  if (v151 >= (*(unsigned int (**)(void))(**((void **)this + 2) + 424))(*((void *)this + 2)))
                  {
                    uint64_t v156 = "otGsParam.tp_id < m_rAsicConfigIfc.GetMaxTrackParamIndex()";
                    int v157 = 772;
                    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 772, "ProgramTrackParameters", (char)"otGsParam.tp_id < m_rAsicConfigIfc.GetMaxTrackParamIndex()");
                    goto LABEL_269;
                  }
                  uint64_t v152 = (*(uint64_t (**)(uint64_t))(*(void *)v171 + 48))(v171);
                  uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 48))(v152);
                  (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v153 + 64))(v153, v168, v174);
LABEL_259:
                  int v19 = v167 + 1;
                  if ((v167 + 1) > v162)
                  {
LABEL_17:
                    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v168);
                    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v168);
                    return;
                  }
                  continue;
                }
                goto LABEL_196;
              }
            }
            ++v8;
          }
          uint64_t v9 = (v9 + 1);
        }
        while (v9 != 6);
      }
      uint64_t v7 = (v7 + 1);
    }
    while (v7 != v6);
  }
  if (v2 + 1 == *((unsigned __int8 *)this + 102))
  {
    __int16 v11 = (void (*)(uint64_t))*((void *)this + 13);
    uint64_t v10 = *((void *)this + 14);
    v11(v10);
  }
}

void sub_2638FC504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetGearTrkParamsFromGearId(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 184);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllCnstlTrkParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 136);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::rRxIfc(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 256))(*((void *)this + 2));
    if ((*(unsigned int (**)(void))(**((void **)this + 2) + 264))()) {
      uint64_t v4 = 84;
    }
    else {
      uint64_t v4 = 70;
    }
    if (v3) {
      uint64_t v5 = 84;
    }
    else {
      uint64_t v5 = 70;
    }
    GlCustomLog(14, "DEF_4755x:%c DEF_MNW:%c  IsPikeAsicType:%c IsMinnowAsicType:%c\n", 70, 84, v5, v4);
    if ((*(uint64_t (**)(void))(**((void **)this + 2) + 264))())
    {
      if ((*(unsigned int (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)))
      {
        *((_DWORD *)this + 12) = 5;
        *((void *)this + 3) = &unk_270EBD688;
        *((void *)this + 4) = (char *)this + 48;
        *((void *)this + 7) = &BlueFin::GlMeRxParamMNWImp::m_stSrdRxParamData + 3397;
        *((void *)this + 8) = &unk_2655D8AB0;
        *((void *)this + 9) = &BlueFin::GlMeRxParamMNWImp::m_stSrdRxParamData;
        *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_2655D8578;
        *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &BlueFin::GlMeRxParamMNWImp::m_oEditedConfig;
        *((void *)this + 12) = &unk_2655D8588;
        *((void *)this + 13) = &unk_2655D8AB4;
        *((void *)this + 14) = (char *)&BlueFin::GlMeRxParamMNWImp::m_stSrdRxParamData + 27177;
        *((void *)this + 5) = (char *)this + 48;
        *((void *)this + 15) = (char *)&BlueFin::GlMeRxParamMNWImp::m_stSrdRxParamData + 28137;
        *((void *)this + 16) = (char *)&BlueFin::GlMeRxParamMNWImp::m_stSrdRxParamData + 28138;
        *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 24;
        int v6 = BlueFin::GlMeRxParamStd::rMap((int **)this + 3);
        uint64_t v7 = **((int **)this + 4);
        if ((int)v7 >= 6)
        {
          uint64_t v15 = "etRxType < GLME_RX_NUM_TYPES";
          DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1008, "GetMaxAllowedGearIds", (char)"etRxType < GLME_RX_NUM_TYPES");
          __int16 v16 = "glme_receiver_parameters_ifc.h";
          int v17 = 1008;
        }
        else if (v7 >= 6)
        {
          uint64_t v15 = "0";
          DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1024, "GetMaxAllowedGearIds", (char)"0");
          __int16 v16 = "glme_receiver_parameters_ifc.h";
          int v17 = 1024;
        }
        else if ((unsigned __int16)aFfZ[v7] < **((unsigned __int8 **)v6 + 2))
        {
          uint64_t v15 = "*rMap().m_pucGsNum <= GetMaxAllowedGearIds()";
          DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 788, "CheckTrackIntegrity", (char)"*rMap().m_pucGsNum <= GetMaxAllowedGearIds()");
          __int16 v16 = "glmesrd_receiver_parameters.cpp";
          int v17 = 788;
        }
        else
        {
          int v8 = (int **)*((void *)this + 1);
          uint64_t v9 = BlueFin::GlMeRxParamStd::rMap(v8);
          uint64_t v10 = BlueFin::GlMeRxParamStd::rMap(v8);
          int v11 = *v8[1];
          if (v11 >= 6)
          {
            uint64_t v15 = "etRxType < GLME_RX_NUM_TYPES";
            DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1080, "GetMaxAllowedBinningSteps", (char)"etRxType < GLME_RX_NUM_TYPES");
            __int16 v16 = "glme_receiver_parameters_ifc.h";
            int v17 = 1080;
          }
          else if (v11 >= 6)
          {
            uint64_t v15 = "0";
            DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1096, "GetMaxAllowedBinningSteps", (char)"0");
            __int16 v16 = "glme_receiver_parameters_ifc.h";
            int v17 = 1096;
          }
          else if (**((unsigned __int8 **)v10 + 2) > ((0xA0628A8A9090uLL >> (8 * v11)) & 0x1FE))
          {
            uint64_t v15 = "*rMap().m_pucGsNum <= GetMaxAllowedBinningSteps()";
            DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 797, "CheckSearchIntegrity", (char)"*rMap().m_pucGsNum <= GetMaxAllowedBinningSteps()");
            __int16 v16 = "glmesrd_receiver_parameters.cpp";
            int v17 = 797;
          }
          else
          {
            uint64_t v12 = *(void *)(*((void *)v9 + 3) + 16);
            unsigned int MaxAllowedSrchParamIds = BlueFin::GlMeRxParamLimits::GetMaxAllowedSrchParamIds(v11);
            int v14 = *v8[1];
            if (v14 >= 6)
            {
              uint64_t v15 = "etRxType < GLME_RX_NUM_TYPES";
              DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1032, "GetMaxAllowedSrchMgrs", (char)"etRxType < GLME_RX_NUM_TYPES");
              __int16 v16 = "glme_receiver_parameters_ifc.h";
              int v17 = 1032;
            }
            else if (v14 >= 6)
            {
              uint64_t v15 = "0";
              DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1048, "GetMaxAllowedSrchMgrs", (char)"0");
              __int16 v16 = "glme_receiver_parameters_ifc.h";
              int v17 = 1048;
            }
            else
            {
              if (BlueFin::GlMeRxParamUtl::CheckSearchIntegrity(v12, MaxAllowedSrchParamIds, *(void *)(*((void *)v9 + 3) + 24), **((unsigned __int8 **)v9 + 1), 9u))return *((void *)this + 1); {
              uint64_t v15 = "m_poRxParamImp->CheckSearchIntegrity()";
              }
              DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 91, "rRxIfc", (char)"m_poRxParamImp->CheckSearchIntegrity()");
              __int16 v16 = "glmesrd_receiver_parameters.cpp";
              int v17 = 91;
            }
          }
        }
      }
      else
      {
        uint64_t v15 = "0";
        DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 86, "rRxIfc", (char)"0");
        __int16 v16 = "glmesrd_receiver_parameters.cpp";
        int v17 = 86;
      }
    }
    else
    {
      uint64_t v15 = "bIsAsicConfigConsistent";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 54, "rRxIfc", (char)"bIsAsicConfigConsistent");
      __int16 v16 = "glmesrd_receiver_parameters.cpp";
      int v17 = 54;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v16, v17, v15);
  }
  return result;
}

uint64_t BlueFin::GlMeRxParamStd::IsModeSupported(int **a1, int a2, int a3)
{
  uint64_t result = (*((uint64_t (**)(int **))*a1 + 16))(a1);
  if (result)
  {
    if (a3 >= 6)
    {
      uint64_t v7 = "eMode < GetMaxAllowedModes()";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 532, "IsModeSupported", (char)"eMode < GetMaxAllowedModes()");
      int v8 = 532;
    }
    else
    {
      if ((int)BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(*a1[1]) > a2) {
        return *(void *)(*((void *)BlueFin::GlMeRxParamStd::rMap(a1) + 6)
      }
                         + 208 * a2
                         + 8 * a3
                         + 232) != 0;
      uint64_t v7 = "eCnstl < GetMaxAllowedCnstls()";
      DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 533, "IsModeSupported", (char)"eCnstl < GetMaxAllowedCnstls()");
      int v8 = 533;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v8, v7);
  }
  return result;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsConstellationSupported(uint64_t a1, unsigned int a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    int v3 = "m_eAsicType != ASIC_TYPE_UNKNOWN";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4892, "IsConstellationSupported", (char)"m_eAsicType != ASIC_TYPE_UNKNOWN");
    int v4 = 4892;
    goto LABEL_5;
  }
  if (a2 >= 7)
  {
    int v3 = "0";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4918, "IsConstellationSupported", (char)"0");
    int v4 = 4918;
LABEL_5:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v4, v3);
  }
  return (*(_DWORD *)(a1 + 1444) & dword_263BAC490[a2]) != 0;
}

uint64_t BlueFin::GlMeRxParamStd::IsConstellationSupported(BlueFin::GlUtils *a1, unsigned int a2)
{
  uint64_t AsicConfigIfc = BlueFin::GlUtils::GetAsicConfigIfc(a1);
  if (a2 >= 6)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 556, "IsConstellationSupported", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 556, "0");
  }
  int v4 = *(uint64_t (**)(void))(*(void *)AsicConfigIfc + 464);

  return v4();
}

uint64_t BlueFin::GlUtils::GetAsicConfigIfc(BlueFin::GlUtils *this)
{
  if (!BlueFin::GlUtils::m_pInstance || (uint64_t result = *(void *)(BlueFin::GlUtils::m_pInstance + 1576)) == 0)
  {
    DeviceFaultNotify("glutils.h", 617, "GetAsicConfigIfc", (char)"Instance() != NULL && Instance()->m_potAsicConfigIfc != NULL");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutils.h", 617, "Instance() != NULL && Instance()->m_potAsicConfigIfc != NULL");
  }
  return result;
}

float BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(int a1)
{
  if (!a1) {
    return 0.0625;
  }
  if (a1 == 4) {
    return 1.0;
  }
  if (a1 != 2)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 834, "GetEramToCopReQuantScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", 834, "0");
  }
  return 0.25;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::IsModeSupported(BlueFin::GlMeSrdReceiverParameters *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 120);

  return v1();
}

uint64_t BlueFin::EswRpcEnc::GetEswJdRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(BlueFin::GlMeSrdReceiverParametersProgrammer *this, float a2, float a3)
{
  double v3 = (float)(a2 / a3) + 0.5;
  double v4 = fmod(v3, 4294967300.0);
  if (v3 <= 4294967300.0) {
    double v4 = v3;
  }
  if (v4 < -4294967300.0) {
    double v4 = -fmod(-v4, 4294967300.0);
  }
  if (v4 < 0.0) {
    unsigned int v5 = --v4;
  }
  else {
    unsigned int v5 = v4;
  }
  if (!v5)
  {
    uint64_t v7 = "uiRatio > 0";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 365, "GetEswCoherentTableIndex", (char)"uiRatio > 0");
    int v8 = 365;
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v8, v7);
  }
  uint64_t v6 = 0;
  while (v5 != byte_263BAFEF6[v6])
  {
    if (++v6 == 11)
    {
      uint64_t v7 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 374, "GetEswCoherentTableIndex", (char)"0");
      int v8 = 374;
      goto LABEL_15;
    }
  }
  return v6;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetCnstl(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 80);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetMode(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 72);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllGearsTrkParamsFromGearId(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 168);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetAllGearsTrkParamsFromGearId(int **this, uint64_t a2)
{
  uint64_t v4 = *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 6);
  unsigned int v5 = (*((uint64_t (**)(int **, uint64_t))*this + 10))(this, a2);
  return *(void *)(v4
                   + 208 * v5
                   + 8 * (*((unsigned int (**)(int **, uint64_t))*this + 9))(this, a2)
                   + 232);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxTrackParamIndex(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1425);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPllPedZeroThresh(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6)
{
  if (a4 <= 5.0)
  {
    LOWORD(v19) = 0;
    return (unsigned __int16)v19;
  }
  BlueFin::GlMeReceiverParametersIfc::GetDefaultSignalId((uint64_t)v39, a2, a3);
  if (v41 >= 0x23Fu)
  {
    double v36 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    float v37 = "glsignalid.h";
    int v38 = 692;
    goto LABEL_43;
  }
  if (v40 != 1
    || ((double v12 = 1.5, v39[0] - 1 >= 0x20) ? (v13 = v39[0] - 66 >= 0xA) : (v13 = 0), v13))
  {
    if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v40
                                                                - v40
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[v39[0]]])
    {
      double v36 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      float v37 = "glsignalid.h";
      int v38 = 685;
LABEL_43:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v37, v38, v36);
    }
    double v12 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v40
                                                                                         - v40
                                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[v39[0]]]
        * 0.001;
  }
  double v14 = a5 / v12;
  float v15 = *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a2)
                 + 24);
  if (!a2 && a3 == 2)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v18 = (*(float (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v16 + 40))(v16, v17, 0, 2);
LABEL_23:
    float v15 = v18;
    goto LABEL_24;
  }
  if (!a2 && a3 == 3)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v18 = (*(float (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v20 + 40))(v20, v21, 0, 3);
    goto LABEL_23;
  }
  if (a2 == 3 && (a3 == 5 || a3 == 3))
  {
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v18 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v22 + 40))(v22, v23, 4, 3);
    goto LABEL_23;
  }
LABEL_24:
  float v24 = v14;
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 256))(*(void *)(a1 + 16)))
  {
    if (a2 != 4) {
      goto LABEL_31;
    }
  }
  else
  {
    char v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))(*(void *)(a1 + 16));
    if (a2 != 4 || (v25 & 1) == 0) {
      goto LABEL_31;
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 1032))(*(void *)(a1 + 16)))
  {
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v15 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v26 + 40))(v26, v27, 5, 0);
  }
LABEL_31:
  float v28 = log10f(a5);
  float v29 = (float)((float)((float)(v15 * v24)
                      + (float)(__exp10f((float)(a4 + (float)(v28 * 10.0)) / 10.0) * (float)(v15 * v24)))
              * a6)
      + 0.166666667;
  LOWORD(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8)) + 24);
  float v31 = v29 * (float)v30;
  if (v31 < 0.0)
  {
    double v36 = "fPedThreshPllCopTotPwr >= 0.0f";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 955, "GetEswPllPedZeroThresh", (char)"fPedThreshPllCopTotPwr >= 0.0f");
    float v37 = "glmesrd_receiver_parameters_programmer.cpp";
    int v38 = 955;
    goto LABEL_43;
  }
  float v32 = sqrtf(v31);
  if (v32 <= 0.0)
  {
    double v36 = "fThresholdEsw > 0.0f";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 960, "GetEswPllPedZeroThresh", (char)"fThresholdEsw > 0.0f");
    float v37 = "glmesrd_receiver_parameters_programmer.cpp";
    int v38 = 960;
    goto LABEL_43;
  }
  float v33 = v32 + 0.5;
  if ((float)(v32 + 0.5) >= 65535.0)
  {
    double v36 = "(fThresholdEsw + 0.5f) < MAX_USHORT";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 961, "GetEswPllPedZeroThresh", (char)"(fThresholdEsw + 0.5f) < MAX_USHORT");
    float v37 = "glmesrd_receiver_parameters_programmer.cpp";
    int v38 = 961;
    goto LABEL_43;
  }
  float v34 = fmodf(v33, 4295000000.0);
  if (v33 <= 4295000000.0) {
    float v34 = v33;
  }
  return (unsigned __int16)v34;
}

float BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswLowMagThres(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  unsigned int v10 = *(unsigned __int16 *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8))
                            + 24);
  BlueFin::GlMeReceiverParametersIfc::GetDefaultSignalId((uint64_t)v36, a2, a3);
  if (v38 >= 0x23Fu)
  {
    float v34 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    int v35 = 692;
    goto LABEL_47;
  }
  if (v37 != 1
    || ((double v11 = 1.5, v36[0] - 1 >= 0x20) ? (v12 = v36[0] - 66 >= 0xA) : (v12 = 0), v12))
  {
    if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v37
                                                               - v37
                                                               + BlueFin::GlSvId::s_aucSvId2gnss[v36[0]]])
    {
      double v11 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v37
                                                                                           - v37
                                                                                           + BlueFin::GlSvId::s_aucSvId2gnss[v36[0]]]
          * 0.001;
      goto LABEL_10;
    }
    float v34 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v35 = 685;
LABEL_47:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v35, v34);
  }
LABEL_10:
  double v13 = a5 / v11;
  float v14 = *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a2)
                 + 24);
  if (!a2 && a3 == 2)
  {
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v17 = (*(float (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v15 + 40))(v15, v16, 0, 2);
LABEL_20:
    float v14 = v17;
    goto LABEL_21;
  }
  if (!a2 && a3 == 3)
  {
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v17 = (*(float (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v18 + 40))(v18, v19, 0, 3);
    goto LABEL_20;
  }
  if (a2 == 3 && (a3 == 5 || a3 == 3))
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v17 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 40))(v20, v21, 4, 3);
    goto LABEL_20;
  }
LABEL_21:
  float v22 = v13;
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 256))(*(void *)(a1 + 16)))
  {
    if (a2 != 4) {
      goto LABEL_28;
    }
  }
  else
  {
    char v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))(*(void *)(a1 + 16));
    if (a2 != 4 || (v23 & 1) == 0) {
      goto LABEL_28;
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 1032))(*(void *)(a1 + 16)))
  {
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v14 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v24 + 40))(v24, v25, 5, 0);
  }
LABEL_28:
  LOBYTE(v26) = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a2)+ 8);
  float v27 = (float)v26 / v22;
  float v28 = fmodf(v27, 4295000000.0);
  if (v27 <= 4295000000.0) {
    float v28 = v27;
  }
  if (v28 < -4295000000.0) {
    float v28 = -fmodf(-v28, 4295000000.0);
  }
  if (v28 < 0.0) {
    unsigned int v29 = -(float)-v28;
  }
  else {
    LOBYTE(v29) = v28;
  }
  if (a2 == 2)
  {
    float v30 = 2.0;
LABEL_40:
    float v31 = v30 / 10.0;
LABEL_43:
    float v32 = __exp10f(v31);
    return (float)((float)((float)((float)((float)(v14 * v22) * (float)(v32 * v22)) * (float)v29)
                         * (float)v29)
                 * (float)v10)
         * a4;
  }
  if (a2 == 1)
  {
    float v30 = -8.0;
    if (a3 == 2) {
      LOBYTE(v29) = 2 * v29;
    }
    goto LABEL_40;
  }
  float v32 = __exp10f(-0.8);
  if (a2 == 4)
  {
    float v31 = -0.2;
    goto LABEL_43;
  }
  return (float)((float)((float)((float)((float)(v14 * v22) * (float)(v32 * v22)) * (float)v29)
                       * (float)v29)
               * (float)v10)
       * a4;
}

float *BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold(uint64_t a1, uint64_t a2, int a3, float a4, float a5, float a6)
{
  BlueFin::GlMeReceiverParametersIfc::GetDefaultSignalId((uint64_t)v35, a2, a3);
  if (v37 >= 0x23Fu)
  {
    float v32 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    float v33 = "glsignalid.h";
    int v34 = 692;
    goto LABEL_34;
  }
  if (v36 != 1
    || ((double v12 = 1.5, v35[0] - 1 >= 0x20) ? (v13 = v35[0] - 66 >= 0xA) : (v13 = 0), v13))
  {
    if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v36
                                                                - v36
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[v35[0]]])
    {
      float v32 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      float v33 = "glsignalid.h";
      int v34 = 685;
LABEL_34:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v33, v34, v32);
    }
    double v12 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v36
                                                                                         - v36
                                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[v35[0]]]
        * 0.001;
  }
  double v14 = a5 / v12;
  float v15 = *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a2)
                 + 24);
  if (!a2 && a3 == 2)
  {
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v18 = (*(float (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v16 + 40))(v16, v17, 0, 2);
LABEL_21:
    float v15 = v18;
    goto LABEL_22;
  }
  if (!a2 && a3 == 3)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v18 = (*(float (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v19 + 40))(v19, v20, 0, 3);
    goto LABEL_21;
  }
  if (a2 == 3 && (a3 == 5 || a3 == 3))
  {
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v18 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 40))(v21, v22, 4, 3);
    goto LABEL_21;
  }
LABEL_22:
  float v23 = v14;
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 256))(*(void *)(a1 + 16)))
  {
    if (a2 != 4) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  char v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))(*(void *)(a1 + 16));
  if a2 == 4 && (v24)
  {
LABEL_27:
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 1032))(*(void *)(a1 + 16)))
    {
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
      float v15 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 40))(v25, v26, 5, 0);
    }
  }
LABEL_29:
  float v27 = log10f(a5);
  float v28 = (float)((float)((float)(v15 * v23)
                      + (float)(__exp10f((float)(a4 + (float)(v27 * 10.0)) / 10.0) * (float)(v15 * v23)))
              * a6)
      + 0.166666667;
  LOWORD(v29) = *(_WORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8)) + 24);
  float v30 = (float)v29;
  uint64_t result = (float *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8));
  if ((float)((float)(v28 * v30) * (float)(*result / a5)) <= 0.0)
  {
    float v32 = "fThresholdEsw > 0.0";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 895, "GetEswPowerThreshold", (char)"fThresholdEsw > 0.0");
    float v33 = "glmesrd_receiver_parameters_programmer.cpp";
    int v34 = 895;
    goto LABEL_34;
  }
  return result;
}

uint64_t BlueFin::GlMeRxParamStd::GetAllCnstlTrkParams(int **this)
{
  return *((void *)BlueFin::GlMeRxParamStd::rMap(this) + 6);
}

uint64_t BlueFin::GlMeRxParamStd::GetAllModesTrkParamsFromCnstl(int **a1, int a2)
{
  if ((int)BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(*a1[1]) <= a2)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 579, "GetAllModesTrkParamsFromCnstl", (char)"eCnstl < GetMaxAllowedCnstls()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 579, "eCnstl < GetMaxAllowedCnstls()");
  }
  return *((void *)BlueFin::GlMeRxParamStd::rMap(a1) + 6) + 208 * a2 + 72;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllModesTrkParamsFromCnstl(BlueFin::GlMeSrdReceiverParameters *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 152);

  return v1();
}

BOOL BlueFin::GlMeSrdAsicConfig::IsPikeAsicType(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4436, "IsPikeAsicType", (char)"m_eAsicType != ASIC_TYPE_UNKNOWN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 4436, "m_eAsicType != ASIC_TYPE_UNKNOWN");
  }
  return v1 == 3;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsMinnowAsicType(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4442, "IsMinnowAsicType", (char)"m_eAsicType != ASIC_TYPE_UNKNOWN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 4442, "m_eAsicType != ASIC_TYPE_UNKNOWN");
  }
  return v1 == 5;
}

uint64_t BlueFin::GlMeReceiverParametersIfc::GetDefaultSignalId(uint64_t result, int a2, int a3)
{
  if (a2) {
    BOOL v3 = a2 == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    int v4 = 3;
  }
  else {
    int v4 = 0;
  }
  int v5 = 2 * (a2 == 0);
  if (a3 != 2) {
    int v5 = 0;
  }
  if (a3 != 3) {
    int v4 = v5;
  }
  if (a3 == 5) {
    int v6 = 3;
  }
  else {
    int v6 = v4;
  }
  switch(a2)
  {
    case 0:
      *(unsigned char *)uint64_t result = 1;
      *(_DWORD *)(result + 4) = v6;
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6] == 255) {
        goto LABEL_28;
      }
      __int16 v7 = 32 * v6;
      goto LABEL_27;
    case 1:
      *(unsigned char *)uint64_t result = 52;
      *(_DWORD *)(result + 4) = 0;
      __int16 v7 = 147;
      goto LABEL_27;
    case 2:
      *(unsigned char *)uint64_t result = 33;
      *(_DWORD *)(result + 4) = v6;
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + 1] == 255) {
        goto LABEL_28;
      }
      __int16 v7 = (19 * v6) | 0x80;
      goto LABEL_27;
    case 3:
      *(unsigned char *)uint64_t result = 76;
      *(_DWORD *)(result + 4) = v6;
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + 4] == 255) {
        goto LABEL_28;
      }
      __int16 v7 = 63 * v6 + 201;
      goto LABEL_27;
    case 4:
      *(unsigned char *)uint64_t result = -117;
      *(_DWORD *)(result + 4) = v6;
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + 5] == 255) {
        goto LABEL_28;
      }
      __int16 v8 = 36;
      __int16 v9 = 453;
      goto LABEL_26;
    case 5:
      *(unsigned char *)uint64_t result = -81;
      *(_DWORD *)(result + 4) = v6;
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + 6] == 255)
      {
LABEL_28:
        *(_DWORD *)(result + 4) = -1;
      }
      else
      {
        __int16 v8 = 14;
        __int16 v9 = 561;
LABEL_26:
        __int16 v7 = v9 + v6 * v8;
LABEL_27:
        *(_WORD *)(result + 8) = v7;
      }
      return result;
    default:
      DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1197, "GetDefaultSignalId", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_receiver_parameters_ifc.h", 1197, "0");
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsLTEFilterEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 531);
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_gs_set_all(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v6 = *a3;
  if (v6 >= (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 408))(*(void *)(a1 + 8)))
  {
    double v11 = "gs_param_ptr->gs_id < m_rAsicConfigIfc.GetMaxGearStepIndex()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 520, "esw_jd_rpc_gs_set_all", (char)"gs_param_ptr->gs_id < m_rAsicConfigIfc.GetMaxGearStepIndex()");
    int v12 = 520;
    goto LABEL_6;
  }
  char v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v7);
  BlueFin::GlStream::PutU08(v13, *a3);
  BlueFin::GlStream::PutU08(v13, a3[1]);
  BlueFin::GlStream::PutU08(v13, a3[2]);
  BlueFin::GlStream::PutU08(v13, a3[3]);
  BlueFin::GlStream::PutU08(v13, a3[4]);
  BlueFin::GlStream::PutU08(v13, a3[5]);
  BlueFin::GlStream::PutU08(v13, a3[6]);
  BlueFin::GlStream::PutU08(v13, a3[7]);
  BlueFin::GlStream::PutU08(v13, a3[8]);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 6u, v14, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    double v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 541, "esw_jd_rpc_gs_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 541;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxGearStepIndex(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1427);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetBandNoisePowerAtCaEpoch(BlueFin::GlMeSrdReceiverParameters *a1)
{
  int v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 40);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetAllGearsTrkParamsFromCnstlAndMode(BlueFin::GlMeSrdReceiverParameters *a1)
{
  int v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 176);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetAllGearsTrkParamsFromCnstlAndMode(int **a1, int a2, int a3)
{
  if (a3 >= 6)
  {
    char v7 = "eMode < GetMaxAllowedModes()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 593, "GetAllGearsTrkParamsFromCnstlAndMode", (char)"eMode < GetMaxAllowedModes()");
    int v8 = 593;
    goto LABEL_6;
  }
  if ((int)BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(*a1[1]) <= a2)
  {
    char v7 = "eCnstl < GetMaxAllowedCnstls()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 594, "GetAllGearsTrkParamsFromCnstlAndMode", (char)"eCnstl < GetMaxAllowedCnstls()");
    int v8 = 594;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v8, v7);
  }
  return *(void *)(*((void *)BlueFin::GlMeRxParamStd::rMap(a1) + 6)
                   + 208 * a2
                   + 8 * a3
                   + 232);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::IsConstellationSupported(BlueFin::GlMeSrdReceiverParameters *a1)
{
  int v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 128);

  return v1();
}

BOOL BlueFin::GlMeSrdAsicConfig::Is16thChipResolution(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned char *)this + 1458) == 16;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetRxType(BlueFin::GlMeSrdReceiverParameters *this)
{
  int v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 264);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetRootGearIdFromGearId(BlueFin::GlMeSrdReceiverParameters *this)
{
  int v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 88);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetRootGearIdFromGearId(int **this, unsigned int a2)
{
  if (**((unsigned __int8 **)BlueFin::GlMeRxParamStd::rMap(this) + 2) <= a2)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 497, "GetRootGearIdFromGearId", (char)"ucGearid < *rMap().m_pucGsNum");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 497, "ucGearid < *rMap().m_pucGsNum");
  }
  return (a2 - BlueFin::GlMeRxParamStd::GetGearIndexNotGearId(this, a2));
}

uint64_t BlueFin::GlMeRxParamUtl::CheckSearchIntegrity(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  if (a2)
  {
    uint64_t v6 = 0;
    char v7 = (float *)(a1 + 24);
    LODWORD(v8) = 1;
    uint64_t v58 = a2;
    do
    {
      unsigned int v9 = *((unsigned __int16 *)v7 - 7);
      BOOL v10 = v6 == *((unsigned __int8 *)v7 - 24);
      float v11 = *(v7 - 5);
      double v12 = fmod((float)(v11 * 1000.0) + 0.5, 4294967300.0);
      if ((float)(v11 * 1000.0) + 0.5 <= 4294967300.0) {
        double v12 = (float)(v11 * 1000.0) + 0.5;
      }
      if (v12 < -4294967300.0) {
        double v12 = -fmod(-v12, 4294967300.0);
      }
      if (v12 < 0.0) {
        unsigned int v13 = --v12;
      }
      else {
        unsigned int v13 = v12;
      }
      double v14 = ((double)v13 / 1000.0 - v11) / v11;
      if (v14 < 0.0) {
        double v14 = -v14;
      }
      float v15 = v14;
      if (v15 >= 0.000001) {
        int v16 = 0;
      }
      else {
        int v16 = v10 & v8;
      }
      if (v13 - 1 < 0x14) {
        int v17 = v16;
      }
      else {
        int v17 = 0;
      }
      unsigned int v18 = *((unsigned __int8 *)v7 - 11);
      if (v18 <= 1 && *((unsigned char *)v7 - 12) != 1) {
        int v17 = 0;
      }
      if (*((unsigned __int16 *)v7 - 8) < 0x1000u) {
        int v19 = v17;
      }
      else {
        int v19 = 0;
      }
      if ((unsigned __int16)v9 >= 0x21u)
      {
        if ((unsigned __int16)(31711 * v9) > 0x842u
          || (vmaxv_u16(vcgt_u16((uint16x4_t)0x1F001F001F001FLL, (uint16x4_t)vadd_s16(vdup_n_s16(v9), (int16x4_t)0xD80AF004FC01F802))) & 1) == 0&& (unsigned __int16)(v9 - 31) >= 0x1B2u)
        {
          int v19 = 0;
        }
      }
      else
      {
        HIDWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9;
        LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (v9 << 16) - 0x80000;
        if ((unsigned __int16)(v20 >> 19) >= 4u) {
          int v19 = 0;
        }
      }
      unsigned __int8 v21 = *((unsigned char *)v7 - 12);
      BOOL v23 = (v18 - 1) < v21 && (v21 - 1) < 0xC7u;
      float v24 = *(v7 - 2);
      double v25 = fmod(v24 + 0.5, 4294967300.0);
      if (v24 + 0.5 <= 4294967300.0) {
        double v25 = v24 + 0.5;
      }
      if (v25 < -4294967300.0) {
        double v25 = -fmod(-v25, 4294967300.0);
      }
      if (v25 < 0.0) {
        unsigned int v26 = --v25;
      }
      else {
        unsigned int v26 = v25;
      }
      float v27 = (float)((float)v26 - v24) / v24;
      if (v27 < 0.0) {
        float v27 = -v27;
      }
      BOOL v28 = v27 < 1.0e-15 && v23;
      unsigned int v29 = *(unsigned __int16 *)v7;
      if (v29 >= 0x800) {
        BOOL v28 = 0;
      }
      int v30 = v28 & v19;
      int v31 = v29 & 0x48;
      if ((v29 & 0x48) != 0) {
        int v32 = 0;
      }
      else {
        int v32 = v30;
      }
      if (v31 == 64) {
        int v32 = v30;
      }
      if (v31 == 8) {
        int v32 = v30;
      }
      int v33 = *((unsigned __int16 *)v7 + 1);
      if (v33 != 2 && v33 != 4) {
        int v32 = 0;
      }
      unsigned int v34 = *((unsigned __int8 *)v7 + 4);
      if (v34 > 0xA || ((1 << v34) & 0x437) == 0) {
        int v32 = 0;
      }
      if (v18 == v21) {
        int v35 = v32;
      }
      else {
        int v35 = 0;
      }
      if (v29) {
        int v32 = v35;
      }
      if (v18 == v21) {
        int v36 = v32;
      }
      else {
        int v36 = 0;
      }
      if ((v29 & 0x40) != 0) {
        int v32 = v36;
      }
      float v37 = v7[2];
      BOOL v38 = v37 > 1.0;
      if (v37 > 3.99609387) {
        BOOL v38 = 0;
      }
      if (*((unsigned __int8 *)v7 + 12) >= 0x10u) {
        BOOL v38 = 0;
      }
      int v39 = v38 & v32;
      if ((unsigned __int16)v9 >= 0x21u)
      {
        uint16x4_t v40 = vcgt_u16((uint16x4_t)0x1F001F001F001FLL, (uint16x4_t)vadd_s16(vdup_n_s16(v9), (int16x4_t)0xD80AF004FC01F802));
        v40.i16[0] = vmaxv_u16(v40);
        v39 &= v40.i32[0] | ((unsigned __int16)(v9 - 31) < 0x174u);
      }
      v7 += 10;
      if ((unsigned __int16)v9 >= 0x1F0u
        && (unsigned __int16)(v9 - 4092) >= 0x1Fu
        && (unsigned __int16)(v9 - 10230) >= 0x1Fu)
      {
        int v43 = 0;
      }
      else
      {
        int v43 = v39;
      }
      if (v33 != 4) {
        int v43 = v39;
      }
      unsigned int v44 = (v33 * v18) >> 1;
      if (v13 > 0x14 || ((1 << v13) & 0x100404) == 0) {
        int v46 = 0;
      }
      else {
        int v46 = v43;
      }
      BOOL v47 = v34 == 0;
      if (v34) {
        unsigned int v48 = v46;
      }
      else {
        unsigned int v48 = v43;
      }
      if (!v47) {
        v44 *= v13;
      }
      if (v44 < 0x101) {
        uint64_t v8 = v48;
      }
      else {
        uint64_t v8 = 0;
      }
      ++v6;
    }
    while (v58 != v6);
  }
  else
  {
    uint64_t v8 = 1;
  }
  if (a4)
  {
    uint64_t v49 = 0;
    uint64_t v50 = (unsigned __int8 *)(a3 + 5);
    do
    {
      unsigned int v51 = (v49 == *(v50 - 5)) & v8;
      int v52 = *(v50 - 3);
      if (v52 == 255) {
        int v53 = (v49 == *(v50 - 5)) & v8;
      }
      else {
        int v53 = 0;
      }
      if (v52 == 252) {
        int v53 = (v49 == *(v50 - 5)) & v8;
      }
      if (a5 <= *(v50 - 3)) {
        unsigned int v51 = v53;
      }
      if (v52 != 252 && v52 != 255 && *(v50 - 1) >= a4) {
        unsigned int v51 = 0;
      }
      unsigned int v54 = *v50;
      v50 += 6;
      if (v54 < a4) {
        uint64_t v8 = v51;
      }
      else {
        uint64_t v8 = 0;
      }
      ++v49;
    }
    while (a4 != v49);
  }
  return v8;
}

uint64_t BlueFin::GlMeSrdAsicInitPatchLoader::CopyPacketIntoBuffer(BlueFin::GlMeSrdAsicInitPatchLoader *this, unsigned int a2)
{
  int v4 = (char *)this + 40 * a2;
  *((void *)v4 + 12) = *((void *)this + 8);
  v4[104] = *((unsigned char *)this + 72);
  *((_DWORD *)v4 + 27) = *((_DWORD *)this + 19);
  *((void *)v4 + 14) = *((void *)this + 10);
  *((_DWORD *)v4 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)this + 22);
  v4[124] = BlueFin::GlMeSrdAsicInitPatchLoader::GetBlockCRCBuf((uint64_t)this, a2);
  uint64_t result = BlueFin::GlMeSrdAsicInitPatchLoader::GetBlockCheckSumBuf(this, a2);
  *((_DWORD *)v4 + 32) = result;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicInitPatchLoader::GetBlockCheckSumBuf(BlueFin::GlMeSrdAsicInitPatchLoader *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 40 * a2;
  uint64_t v3 = *((unsigned int *)v2 + 25);
  LODWORD(v4) = *((_DWORD *)v2 + 30) - v3;
  unsigned int v5 = *((unsigned __int16 *)this + 18);
  if (v4 - v5 >= 4) {
    __int16 v6 = *((_WORD *)this + 18);
  }
  else {
    __int16 v6 = v5 - 4;
  }
  if (v4 > v5) {
    LOWORD(v4) = v6;
  }
  uint64_t result = 0;
  uint64_t v4 = (unsigned __int16)v4;
  if ((_WORD)v4)
  {
    uint64_t v8 = (unsigned __int8 *)(*((void *)v2 + 14) + v3);
    do
    {
      int v9 = *v8++;
      uint64_t result = (result + v9);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicInitPatchLoader::GetBlockCRCBuf(uint64_t this, unsigned int a2)
{
  uint64_t v2 = this + 40 * a2;
  uint64_t v3 = *(unsigned int *)(v2 + 100);
  unsigned int v4 = *(_DWORD *)(v2 + 120) - v3;
  unsigned int v5 = *(unsigned __int16 *)(this + 36);
  if (v4 - v5 >= 4) {
    unsigned int v6 = *(unsigned __int16 *)(this + 36);
  }
  else {
    unsigned int v6 = v5 + 65532;
  }
  if (v4 > v5) {
    unsigned int v4 = v6;
  }
  if (!(_WORD)v4) {
    return 0;
  }
  uint64_t v7 = this;
  LOBYTE(this) = 0;
  uint64_t v8 = (char *)(*(void *)(v7 + 40 * a2 + 112) + v3);
  do
  {
    char v9 = *v8++;
    --v4;
    this = BlueFin::GlUtlCrc::ucCrcTable[(v9 ^ this)];
  }
  while ((_WORD)v4);
  return this;
}

unsigned __int8 *BlueFin::GlMeSrdSatTrackMgr::ProcessPending(void *a1, int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v4 = a1;
  *((_DWORD *)a1 + 1812) = a2;
  long long v181 = (BlueFin::GlSetBase *)(a1 + 689);
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 689))
    || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v4 + 678)))
  {
    LODWORD(v199) = *((unsigned __int8 *)v4 + 4008);
    memcpy(v200, (const void *)v4[500], 4 * v199);
    HIDWORD(v199) = *(_DWORD *)v200;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v199);
    if (BYTE1(v199) != v199)
    {
      unsigned int v5 = (char *)(v4 + 678);
      do
      {
        unsigned int v6 = WORD1(v199);
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&__src, WORD1(v199));
        unsigned int v7 = __src;
        BlueFin::GlMeSrdSatMgr::GetSvid((void *)v4[1], __src, &v240);
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&__src, v6);
        int v8 = HIDWORD(__src);
        __int16 v9 = 575;
        if (HIDWORD(__src) != -1 && ((_BYTE)v240 + 67) >= 0x44u)
        {
          uint64_t v10 = BlueFin::GlSvId::s_aucSvId2gnss[v240];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * SHIDWORD(__src)
                                                                                       - SHIDWORD(__src)
                                                                                       + v10] != 255)
            __int16 v9 = BlueFin::GlSignalId::s_ausGnss2signalId[v10]
               + v240
               - BlueFin::GlSvId::s_aucGnss2minSvId[v10]
               + WORD2(__src) * BlueFin::GlSvId::s_aucGnss2numSvId[v10];
        }
        LOBYTE(v237) = (_BYTE)v240;
        BlueFin::GlSignalIdSet::GetSignalIdSetForSv(v5, (unsigned __int8 *)&v237, (uint64_t)&__src);
        LOBYTE(v216) = v208;
        memcpy(&v217, __src, 4 * v208);
        WORD1(v216) = 0;
        BYTE1(v216) = 0;
        HIDWORD(v216) = v217;
        while (1)
        {
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v216);
          if (BYTE1(v216) == v216) {
            break;
          }
          uint64_t v11 = WORD1(v216);
          if (WORD1(v216) >= 0x23FuLL)
          {
            BOOL v159 = "usIndex < NUM_SIGNAL_IDS";
            DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
            float v160 = "glsignalid.h";
            int v161 = 577;
LABEL_288:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v160, v161, v159);
          }
          int v12 = *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v216) + 1);
          BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v243, v7, v12);
          if ((((unint64_t)*(unsigned int *)(v4[500]
                                                   + 4
                                                   * ((v243 + 100 * BYTE4(v243)) >> 5)) >> (((_BYTE)v243 + 100 * BYTE4(v243)) & 0x1F)) & 1) == 0)
          {
            unsigned int v13 = (BlueFin::GlMeSrdAidingMgr *)v4[2];
            LOBYTE(v247) = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v11);
            uint64_t v14 = v247;
            HIDWORD(v247) = v12;
            __int16 v248 = v11;
            char AidIdFromSignalId = BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId(v13, (const BlueFin::GlSignalId *)&v247);
            char v16 = 25;
            switch(BlueFin::GlSvId::s_aucSvId2gnss[v14])
            {
              case 0:
              case 1:
              case 3:
              case 6:
                goto LABEL_14;
              case 2:
                char v16 = 46;
                goto LABEL_14;
              case 4:
                if ((v14 + 122) >= 5u && (v14 - 76) >= 5u) {
                  char v16 = 59;
                }
                else {
                  char v16 = 60;
                }
                goto LABEL_14;
              case 5:
                char v16 = 71;
LABEL_14:
                unsigned int v4 = a1;
                BlueFin::GlMeSrdSatMgr::AddCarrier(a1[1], v7, v16, AidIdFromSignalId, v12);
                BlueFin::GlMeSrdSatTrackMgr::AddSatCarr((BlueFin::GlMeSrdSatTrackMgr *)a1, (const BlueFin::GlSatCarrId *)&v243);
                break;
              default:
                BOOL v159 = "0";
                DeviceFaultNotify("glmesrd_track_mgr.cpp", 549, "GetDirectToTrkBsid", (char)"0");
                float v160 = "glmesrd_track_mgr.cpp";
                int v161 = 549;
                goto LABEL_288;
            }
          }
          BlueFin::GlSetBase::Remove((uint64_t)v5, (__int16)v11);
        }
        if (((unint64_t)*(unsigned int *)(*(void *)v181 + 4 * (v9 >> 5)) >> (v9 & 0x1F)))
        {
          BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v216, v7, v8);
          if ((((unint64_t)*(unsigned int *)(v4[590]
                                                   + 4
                                                   * ((v216 + 100 * BYTE4(v216)) >> 5)) >> (((_BYTE)v216 + 100 * BYTE4(v216)) & 0x1F)) & 1) == 0)
          {
            BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v247, v7, v8);
            uint64_t v18 = a1[1];
            BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v216, v7, v8);
            uint64_t v19 = *(void *)(v18 + 6384);
            unsigned int v4 = a1;
            *(_DWORD *)(v19 + 4 * ((v216 + 100 * BYTE4(v216)) >> 5)) |= 1 << ((_BYTE)v216 + 100 * BYTE4(v216));
            BlueFin::GlMeSrdSatTrackMgr::RemoveSatCarr((BlueFin::GlMeSrdSatTrackMgr *)a1, (const BlueFin::GlSatCarrId *)&v247);
            *(_DWORD *)(a1[590] + 4 * ((v247 + 100 * BYTE4(v247)) >> 5)) |= 1 << ((_BYTE)v247 + 100 * BYTE4(v247));
            BlueFin::GlSetBase::Remove((uint64_t)v181, v9);
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v199);
      }
      while (BYTE1(v199) != v199);
    }
    uint64_t v3 = a3;
  }
  unint64_t v20 = (unsigned __int8 *)(v4 + 521);
  uint64_t v21 = (uint64_t)(v4 + 600);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)v4 + 600);
  __src = v209;
  LOBYTE(v208) = 16;
  uint64_t v22 = a1;
  memset(v209, 0, 64);
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v199, (int **)&__src);
  BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
  *(_OWORD *)&v200[4] = *(_OWORD *)v209;
  *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
  *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
  *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
  BlueFin::GlSetBase::operator&=((uint64_t)(a1 + 590), (uint64_t)&v199);
  BlueFin::GlSetBase::operator=(v21, (uint64_t)(a1 + 590));
  *(_OWORD *)(v21 + 12) = *(_OWORD *)((char *)a1 + 4732);
  *(_OWORD *)(v21 + 28) = *(_OWORD *)((char *)a1 + 4748);
  *(_OWORD *)(v21 + 44) = *(_OWORD *)((char *)a1 + 4764);
  *(_OWORD *)(v21 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)((char *)a1 + 4780);
  __int16 v179 = (const void **)(a1 + 638);
  unint64_t v23 = 0x26B433000;
  if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 638)))
  {
    unsigned __int8 v178 = (int **)(a1 + 658);
    if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 658)))
    {
      v199 = BlueFin::GlMeSrdSatTrackMgr::OnReliableTransactionAck;
      *(void *)float v200 = a1;
      *(_WORD *)&v200[8] = 256;
      v200[10] = 0;
      *(void *)&v200[16] = v3;
      *(_DWORD *)&v200[24] = 0;
      *(_WORD *)&v200[28] = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
      LOBYTE(__src) = *v20;
      float v24 = (void *)a1[520];
      size_t v25 = 4 * __src;
      memcpy(&v208, v24, v25);
      WORD1(__src) = 0;
      BYTE1(__src) = 0;
      HIDWORD(__src) = v208;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
      if (BYTE1(__src) != __src)
      {
        do
        {
          BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v247, WORD1(__src));
          uint64_t v26 = v247;
          EswSignalint Index = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(HIDWORD(v247));
          BOOL v28 = (BlueFin::GlMeSrdAidingMgr *)a1[2];
          BlueFin::GlMeSrdSatMgr::GetSignalIndex((void *)a1[1], (unsigned __int8 *)&v247, (uint64_t)&v216);
          uint64_t v29 = BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId(v28, (const BlueFin::GlSignalId *)&v216);
          if ((*(unsigned int (**)(void))(*(void *)a1[3] + 352))(a1[3]))
          {
            uint64_t v30 = (*(uint64_t (**)(void))(**(void **)&v200[16] + 48))(*(void *)&v200[16]);
            uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 64))(v30);
            (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 80))(v31, &v199, v26, EswSignalIndex, v29);
          }
          else
          {
            if (EswSignalIndex != 1)
            {
              DeviceFaultNotify("glmesrd_track_mgr.cpp", 732, "UpdateAidingId", (char)"carrier_band == ESW_CARRIER_BAND_1");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 732, "carrier_band == ESW_CARRIER_BAND_1");
            }
            uint64_t v32 = (*(uint64_t (**)(void))(**(void **)&v200[16] + 48))(*(void *)&v200[16]);
            uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 64))(v32);
            (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v33 + 72))(v33, &v199, v26, v29);
          }
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        }
        while (BYTE1(__src) != __src);
        float v24 = (void *)a1[520];
        size_t v25 = 4 * *v20;
      }
      bzero(v24, ((v25 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v199);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v199);
      v184[0] = BlueFin::GlMeSrdSatTrackMgr::OnReliableTransactionAck;
      v184[1] = a1;
      __int16 v185 = 256;
      char v186 = 0;
      uint64_t v187 = v3;
      int v188 = 0;
      __int16 v189 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
      v247 = &v249;
      LOBYTE(v248) = 16;
      long long v249 = 0u;
      long long v250 = 0u;
      long long v251 = 0u;
      long long v252 = 0u;
      v243 = (void (*)(int **, void *))&v244[4];
      v244[0] = 16;
      memset(&v244[4], 0, 32);
      long long v245 = 0u;
      long long v246 = 0u;
      v240 = v242;
      char v241 = 16;
      memset(v242, 0, 64);
      v237 = v239;
      char v238 = 16;
      memset(v239, 0, 64);
      v234 = (int *)v236;
      char v235 = 16;
      memset(v236, 0, 64);
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v216, (unsigned int *)&v218, 0x10u, v179);
      __src = v209;
      LOBYTE(v208) = 16;
      memset(v209, 0, 64);
      char v175 = (int **)(a1 + 648);
      BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v216, (int **)&__src, (int **)a1 + 648);
      BlueFin::GlSetBase::operator=((uint64_t)&v216, (uint64_t)&__src);
      long long v218 = *(_OWORD *)v209;
      long long v219 = *(_OWORD *)&v209[16];
      long long v220 = *(_OWORD *)&v209[32];
      long long v221 = *(_OWORD *)&v209[48];
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)&v216);
      __src = v209;
      LOBYTE(v208) = 16;
      memset(v209, 0, 64);
      BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v199, (int **)&__src, v178);
      BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
      *(_OWORD *)&v200[4] = *(_OWORD *)v209;
      *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
      *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
      *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v232, (unsigned int *)v233, 0x10u, (const void **)&v199);
      __src = v209;
      LOBYTE(v208) = 16;
      memset(v209, 0, 64);
      uint64_t v171 = (int **)(a1 + 668);
      BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v232, (int **)&__src, (int **)a1 + 668);
      BlueFin::GlSetBase::operator=((uint64_t)&v232, (uint64_t)&__src);
      v233[0] = *(_OWORD *)v209;
      v233[1] = *(_OWORD *)&v209[16];
      v233[2] = *(_OWORD *)&v209[32];
      v233[3] = *(_OWORD *)&v209[48];
      v223 = &unk_270EBF258;
      uint64_t v224 = 0;
      uint64_t v225 = 0x36A7C5AC00000000;
      uint64_t v226 = 0;
      int v227 = 2139095039;
      uint64_t v228 = 0;
      int v229 = 2139095039;
      uint64_t v230 = 0;
      uint64_t v231 = 0x36A7C5AC7F7FFFFFLL;
      (*(void (**)(void, void **, void))(*(void *)*a1 + 96))(*a1, &v223, *((unsigned int *)a1 + 1812));
      int v222 = 0;
      char v173 = (*(uint64_t (**)(void, void, int *))(*(void *)*a1 + 16))(*a1, *((unsigned int *)a1 + 1812), &v222);
      LOBYTE(v216) = *((unsigned char *)a1 + 4008);
      memcpy(&v217, (const void *)a1[500], 4 * v216);
      WORD1(v216) = 0;
      BYTE1(v216) = 0;
      HIDWORD(v216) = v217;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v216);
      long long v182 = (int **)(a1 + 570);
      __dst = (int **)(a1 + 560);
      if (BYTE1(v216) == v216)
      {
LABEL_39:
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v216, (unsigned int *)&v218, 0x10u, v179);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v216, (int **)&__src, v175);
        BlueFin::GlSetBase::operator=((uint64_t)&v216, (uint64_t)&__src);
        long long v218 = *(_OWORD *)v209;
        long long v219 = *(_OWORD *)&v209[16];
        long long v220 = *(_OWORD *)&v209[32];
        long long v221 = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)&v216);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v199, (int **)&__src);
        BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
        *(_OWORD *)&v200[4] = *(_OWORD *)v209;
        *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
        *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
        *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::operator&=((uint64_t)v182, (uint64_t)&v199);
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v216, (unsigned int *)&v218, 0x10u, v179);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v216, (int **)&__src, v175);
        BlueFin::GlSetBase::operator=((uint64_t)&v216, (uint64_t)&__src);
        long long v218 = *(_OWORD *)v209;
        long long v219 = *(_OWORD *)&v209[16];
        long long v220 = *(_OWORD *)&v209[32];
        long long v221 = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)&v216);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v199, (int **)&__src);
        BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
        *(_OWORD *)&v200[4] = *(_OWORD *)v209;
        *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
        *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
        *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::operator&=((uint64_t)(a1 + 540), (uint64_t)&v199);
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v190, (unsigned int *)v191, 0x10u, (const void **)&v247);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v190, (int **)&__src, (int **)&v243);
        BlueFin::GlSetBase::operator=((uint64_t)&v190, (uint64_t)&__src);
        v191[0] = *(_OWORD *)v209;
        v191[1] = *(_OWORD *)&v209[16];
        v191[2] = *(_OWORD *)&v209[32];
        v191[3] = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v192, (unsigned int *)v193, 0x10u, &v190);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v192, (int **)&__src, &v234);
        BlueFin::GlSetBase::operator=((uint64_t)v192, (uint64_t)&__src);
        v193[0] = *(_OWORD *)v209;
        v193[1] = *(_OWORD *)&v209[16];
        v193[2] = *(_OWORD *)&v209[32];
        v193[3] = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v194, (unsigned int *)v196, 0x10u, (const void **)v192);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v194, (int **)&__src, v182);
        BlueFin::GlSetBase::operator=((uint64_t)&v194, (uint64_t)&__src);
        v196[0] = *(_OWORD *)v209;
        v196[1] = *(_OWORD *)&v209[16];
        v196[2] = *(_OWORD *)&v209[32];
        v196[3] = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v216, (unsigned int *)&v218, 0x10u, &v194);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v216, (int **)&__src, (int **)a1 + 540);
        BlueFin::GlSetBase::operator=((uint64_t)&v216, (uint64_t)&__src);
        long long v218 = *(_OWORD *)v209;
        long long v219 = *(_OWORD *)&v209[16];
        long long v220 = *(_OWORD *)&v209[32];
        long long v221 = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)&v216);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v199, (int **)&__src, __dst);
        BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
        *(_OWORD *)&v200[4] = *(_OWORD *)v209;
        *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
        *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
        *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
        LOBYTE(__src) = v200[0];
        memcpy(&v208, v199, 4 * v200[0]);
        WORD1(__src) = 0;
        BYTE1(__src) = 0;
        HIDWORD(__src) = v208;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        while (BYTE1(__src) != __src)
        {
          BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v216, WORD1(__src));
          unsigned int v34 = HIDWORD(v216);
          uint64_t v35 = (v216 + 100 * BYTE4(v216)) >> 5;
          char v36 = ((_BYTE)v216 + 100 * BYTE4(v216)) & 0x1F;
          uint64_t v37 = 1 << v36;
          if (((1 << v36) & *(unsigned int *)(a1[540] + 4 * v35)) != 0)
          {
            if ((v37 & *(_DWORD *)&v240[4 * v35]) != 0) {
              char v38 = -33;
            }
            else {
              char v38 = 95;
            }
          }
          else
          {
            char v38 = 0;
          }
          if ((v37 & (*__dst)[v35]) != 0) {
            v38 |= 0xBu;
          }
          if ((v37 & (*v182)[v35]) != 0) {
            v38 |= 3u;
          }
          char v39 = v38 | 0x40;
          if (SHIDWORD(v216) > 0) {
            char v39 = -5;
          }
          if ((v37 & *((_DWORD *)v247 + v35)) != 0) {
            char v38 = v39;
          }
          if ((v37 & *((_DWORD *)v243 + v35)) != 0)
          {
            if ((v37 & *(_DWORD *)&v237[4 * v35]) != 0) {
              char v40 = -53;
            }
            else {
              char v40 = -64;
            }
            v38 |= v40;
          }
          if ((v37 & v234[v35]) != 0) {
            char v41 = -60;
          }
          else {
            char v41 = v38;
          }
          if ((v41 & 0x40) != 0) {
            *((_DWORD *)*v179 + v35) |= 1 << v36;
          }
          unsigned __int8 v42 = v41;
          if (v41 < 0) {
            (*v178)[v35] |= 1 << v36;
          }
          uint64_t v43 = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(v34);
          if ((*(unsigned int (**)(void))(*(void *)a1[3] + 352))(a1[3]))
          {
            uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v187 + 48))(v187);
            uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 64))(v44);
            (*(void (**)(uint64_t, void *, void, uint64_t, void))(*(void *)v45 + 96))(v45, v184, v216, v43, v42);
          }
          else
          {
            if (v43 != 1)
            {
              DeviceFaultNotify("glmesrd_track_mgr.cpp", 1337, "UpdateAidingCtrl", (char)"carrier_band == ESW_CARRIER_BAND_1");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 1337, "carrier_band == ESW_CARRIER_BAND_1");
            }
            uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v187 + 48))(v187);
            uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 64))(v46);
            (*(void (**)(uint64_t, void *, void, void))(*(void *)v47 + 88))(v47, v184, v216, v42);
          }
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        }
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v184);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v184);
        v243 = BlueFin::GlMeSrdSatTrackMgr::OnReliableTransactionAck;
        *(void *)v244 = a1;
        *(_WORD *)&v244[8] = 256;
        v244[10] = 0;
        uint64_t v48 = a3;
        *(void *)&v244[16] = a3;
        *(_DWORD *)&v244[24] = 0;
        *(_WORD *)&v244[28] = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, 1);
        unint64_t v23 = 0x26B433000;
        if (((*(uint64_t (**)(void))(*(void *)a1[3] + 248))(a1[3]) & 1) == 0
          && ((*(uint64_t (**)(void))(*(void *)a1[3] + 240))(a1[3]) & 1) == 0)
        {
          uint64_t v49 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v247, (unsigned int *)&v249, 0x10u, v179);
          __src = v209;
          LOBYTE(v208) = 16;
          memset(v209, 0, 64);
          BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v49, (int **)&__src, v175);
          BlueFin::GlSetBase::operator=((uint64_t)&v247, (uint64_t)&__src);
          long long v249 = *(_OWORD *)v209;
          long long v250 = *(_OWORD *)&v209[16];
          long long v251 = *(_OWORD *)&v209[32];
          long long v252 = *(_OWORD *)&v209[48];
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v216, (unsigned int *)&v218, 0x10u, (const void **)&v247);
          __src = v209;
          LOBYTE(v208) = 16;
          memset(v209, 0, 64);
          BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v216, (int **)&__src, v178);
          BlueFin::GlSetBase::operator=((uint64_t)&v216, (uint64_t)&__src);
          long long v218 = *(_OWORD *)v209;
          long long v219 = *(_OWORD *)&v209[16];
          long long v220 = *(_OWORD *)&v209[32];
          long long v221 = *(_OWORD *)&v209[48];
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)&v216);
          __src = v209;
          LOBYTE(v208) = 16;
          memset(v209, 0, 64);
          BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v199, (int **)&__src, v171);
          BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
          *(_OWORD *)&v200[4] = *(_OWORD *)v209;
          *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
          *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
          *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
          LOBYTE(__src) = *((unsigned char *)a1 + 4008);
          memcpy(&v208, (const void *)a1[500], 4 * __src);
          WORD1(__src) = 0;
          BYTE1(__src) = 0;
          HIDWORD(__src) = v208;
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
          while (BYTE1(__src) != __src)
          {
            BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v216, WORD1(__src));
            if ((((unint64_t)*(unsigned int *)(a1[510] + (((unint64_t)v216 >> 3) & 0x1C)) >> (v216 & 0x1F)) & 1) == 0
              && (((unint64_t)*((unsigned int *)v199
                                     + ((v216 + 100 * BYTE4(v216)) >> 5)) >> (((_BYTE)v216 + 100 * BYTE4(v216)) & 0x1F)) & 1) == 0)
            {
              uint64_t v50 = &a1[4 * BlueFin::GlMeSrdSatMgr::GetTrackChannel(a1[1], (unsigned __int8 *)&v216)];
              if (*((_WORD *)v50 + 16))
              {
                unsigned int v51 = *((_DWORD *)v50 + 10);
                BOOL v52 = v51 > 0x11;
                int v53 = (1 << v51) & 0x21C00;
                if (!v52 && v53 != 0) {
                  BlueFin::GlMeSrdSatTrackMgr::UpdateMPFSettings((uint64_t)a1, (uint64_t)&v243, (unsigned __int8 *)&v216);
                }
              }
            }
            BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
          }
        }
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v243);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v243);
        v243 = BlueFin::GlMeSrdSatTrackMgr::OnReliableTransactionAck;
        *(void *)v244 = a1;
        *(_WORD *)&v244[8] = 256;
        v244[10] = 0;
        *(void *)&v244[16] = a3;
        *(_DWORD *)&v244[24] = 0;
        *(_WORD *)&v244[28] = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, 1);
        if (!(*(unsigned int (**)(void))(*(void *)a1[3] + 1048))()) {
          goto LABEL_85;
        }
        double v55 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v247, (unsigned int *)&v249, 0x10u, v179);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v55, (int **)&__src, v175);
        BlueFin::GlSetBase::operator=((uint64_t)&v247, (uint64_t)&__src);
        long long v249 = *(_OWORD *)v209;
        long long v250 = *(_OWORD *)&v209[16];
        long long v251 = *(_OWORD *)&v209[32];
        long long v252 = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v216, (unsigned int *)&v218, 0x10u, (const void **)&v247);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v216, (int **)&__src, v178);
        BlueFin::GlSetBase::operator=((uint64_t)&v216, (uint64_t)&__src);
        long long v218 = *(_OWORD *)v209;
        long long v219 = *(_OWORD *)&v209[16];
        long long v220 = *(_OWORD *)&v209[32];
        long long v221 = *(_OWORD *)&v209[48];
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v199, (unsigned int *)&v200[4], 0x10u, (const void **)&v216);
        __src = v209;
        LOBYTE(v208) = 16;
        memset(v209, 0, 64);
        BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v199, (int **)&__src, v171);
        BlueFin::GlSetBase::operator=((uint64_t)&v199, (uint64_t)&__src);
        *(_OWORD *)&v200[4] = *(_OWORD *)v209;
        *(_OWORD *)&v200[20] = *(_OWORD *)&v209[16];
        *(_OWORD *)&v200[36] = *(_OWORD *)&v209[32];
        *(_OWORD *)&v200[52] = *(_OWORD *)&v209[48];
        LOBYTE(__src) = *((unsigned char *)a1 + 4008);
        memcpy(&v208, (const void *)a1[500], 4 * __src);
        WORD1(__src) = 0;
        BYTE1(__src) = 0;
        HIDWORD(__src) = v208;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        if (BYTE1(__src) == __src)
        {
LABEL_84:
          uint64_t v48 = a3;
          unint64_t v23 = 0x26B433000uLL;
LABEL_85:
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v243);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v243);
          v199 = BlueFin::GlMeSrdSatTrackMgr::OnReliableTransactionAck;
          *(void *)float v200 = a1;
          *(_WORD *)&v200[8] = 256;
          v200[10] = 0;
          *(void *)&v200[16] = v48;
          *(_DWORD *)&v200[24] = 0;
          *(_WORD *)&v200[28] = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, 1);
          __src = v209;
          LOBYTE(v208) = 4;
          *(void *)&v209[8] = 0;
          *(void *)int v209 = 0;
          BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)(a1 + 630), (int **)&__src);
          v216 = &v218;
          LOBYTE(v217) = 4;
          unsigned int v56 = a1 + 634;
          long long v218 = 0uLL;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)(a1 + 634), (int **)&v216, (int **)&__src);
          __src = v209;
          LOBYTE(v208) = 4;
          *(void *)&v209[8] = 0;
          *(void *)int v209 = 0;
          BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)(a1 + 634), (int **)&__src);
          v247 = &v249;
          LOBYTE(v248) = 4;
          long long v249 = 0uLL;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)(a1 + 630), (int **)&v247, (int **)&__src);
          if (*(_DWORD *)v247) {
            goto LABEL_86;
          }
          if (v248 < 2uLL) {
            goto LABEL_267;
          }
          if (*((_DWORD *)v247 + 1))
          {
LABEL_86:
            if (*(unsigned char *)(v23 + 2920)) {
              BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
            }
          }
          else
          {
            uint64_t v147 = 2;
            while (v248 != v147)
            {
              if (*((_DWORD *)v247 + v147++))
              {
                if (v147 - 1 < (unint64_t)v248) {
                  goto LABEL_86;
                }
                break;
              }
            }
          }
LABEL_267:
          unsigned int v149 = v216;
          if (!*(_DWORD *)v216)
          {
            if (v217 < 2uLL)
            {
LABEL_276:
              LOBYTE(__src) = v217;
              memcpy(&v208, v149, 4 * v217);
              WORD1(__src) = 0;
              BYTE1(__src) = 0;
              HIDWORD(__src) = v208;
              while (1)
              {
                BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
                if (BYTE1(__src) == __src) {
                  break;
                }
                uint64_t v152 = (*(uint64_t (**)(void))(**(void **)&v200[16] + 48))(*(void *)&v200[16]);
                uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 64))(v152);
                __int16 v154 = WORD1(__src);
                (*(void (**)(uint64_t, void **, void, uint64_t))(*(void *)v153 + 64))(v153, &v199, BYTE2(__src), 1);
                BlueFin::GlSetBase::Remove((uint64_t)v56, v154);
              }
              LOBYTE(__src) = v248;
              memcpy(&v208, v247, 4 * v248);
              WORD1(__src) = 0;
              BYTE1(__src) = 0;
              HIDWORD(__src) = v208;
              BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
              while (BYTE1(__src) != __src)
              {
                uint64_t v155 = (*(uint64_t (**)(void))(**(void **)&v200[16] + 48))(*(void *)&v200[16]);
                uint64_t v156 = (*(uint64_t (**)(uint64_t))(*(void *)v155 + 64))(v155);
                __int16 v157 = WORD1(__src);
                (*(void (**)(uint64_t, void **, void, uint64_t))(*(void *)v156 + 64))(v156, &v199, BYTE2(__src), 2);
                *(_DWORD *)(*v56 + 4 * (v157 >> 5)) |= 1 << v157;
                BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
              }
              bzero((void *)a1[630], ((4 * v20[880] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
              BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v199);
              BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v199);
              uint64_t v22 = a1;
              goto LABEL_282;
            }
            if (!*((_DWORD *)v216 + 1))
            {
              uint64_t v150 = 2;
              while (v217 != v150)
              {
                if (*((_DWORD *)v216 + v150++))
                {
                  if (v150 - 1 < (unint64_t)v217) {
                    goto LABEL_268;
                  }
                  goto LABEL_276;
                }
              }
              goto LABEL_276;
            }
          }
LABEL_268:
          if (*(unsigned char *)(v23 + 2920))
          {
            BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
            unsigned int v149 = v216;
          }
          goto LABEL_276;
        }
        while (1)
        {
          BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v247, WORD1(__src));
          unint64_t v162 = v247;
          if (((*(unsigned int *)(a1[510] + ((v162 >> 3) & 0x1C)) >> (v162 & 0x1F)) & 1) == 0
            && (((unint64_t)*((unsigned int *)v199
                                   + ((v247 + 100 * BYTE4(v247)) >> 5)) >> (((_BYTE)v247 + 100 * BYTE4(v247)) & 0x1F)) & 1) == 0)
          {
            uint64_t TrackChannel = BlueFin::GlMeSrdSatMgr::GetTrackChannel(a1[1], (unsigned __int8 *)&v247);
            int v164 = &a1[4 * TrackChannel];
            if (*((_WORD *)v164 + 16))
            {
              if (*((_DWORD *)v164 + 10) == 12)
              {
                BlueFin::GlMeSrdSatMgr::GetSvid((void *)a1[1], v162, &v240);
                LOBYTE(v216) = (_BYTE)v240;
                HIDWORD(v216) = HIDWORD(v247);
                LOWORD(v217) = 575;
                if (HIDWORD(v247) == -1 || ((_BYTE)v240 + 67) < 0x44u) {
                  goto LABEL_299;
                }
                uint64_t v165 = BlueFin::GlSvId::s_aucSvId2gnss[v240];
                if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * SHIDWORD(v247)
                                                                                             - SHIDWORD(v247)
                                                                                             + v165] != 255)
                  break;
              }
            }
          }
LABEL_291:
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
          if (BYTE1(__src) == __src) {
            goto LABEL_84;
          }
        }
        LOWORD(v217) = BlueFin::GlSignalId::s_ausGnss2signalId[v165]
                     + v240
                     - BlueFin::GlSvId::s_aucGnss2minSvId[v165]
                     + WORD2(v247) * BlueFin::GlSvId::s_aucGnss2numSvId[v165];
LABEL_299:
        if (HIDWORD(v247) == 2 && BYTE1(a1[4 * TrackChannel + 7])) {
          BlueFin::GlMeSrdSatTrackMgr::UpdateGridCtrl((BlueFin::GlMeSrdSatTrackMgr *)a1, (BlueFin::GlMeSrdTransaction *)&v243, (const BlueFin::GlSignalId *)&v216, (BlueFin::GlMeSrdTransaction *)v162);
        }
        goto LABEL_291;
      }
      while (1)
      {
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v192, WORD1(v216));
        uint64_t v57 = (BlueFin::GlMeSrdTransaction *)v192[0];
        if ((((unint64_t)*(unsigned int *)(a1[510] + (((unint64_t)v192[0] >> 3) & 0x1C)) >> (v192[0] & 0x1F)) & 1) != 0
          || (((unint64_t)*(unsigned int *)(v232 + 4 * ((v192[0] + 100 * v192[4]) >> 5)) >> ((v192[0] + 100 * v192[4]) & 0x1F)) & 1) != 0)
        {
          goto LABEL_90;
        }
        BlueFin::GlMeSrdSatMgr::GetSvid((void *)a1[1], v192[0], &v190);
        int v58 = v190;
        LOBYTE(v194) = (_BYTE)v190;
        HIDWORD(v194) = *(_DWORD *)&v192[4];
        unsigned __int16 v195 = 575;
        if (*(_DWORD *)&v192[4] != -1 && ((_BYTE)v190 + 67) >= 0x44u)
        {
          uint64_t v59 = BlueFin::GlSvId::s_aucSvId2gnss[v190];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)&v192[4]
                                                                                       - *(int *)&v192[4]
                                                                                       + v59] == 255)
            HIDWORD(v194) = -1;
          else {
            unsigned __int16 v195 = BlueFin::GlSignalId::s_ausGnss2signalId[v59]
          }
                 + v190
                 - BlueFin::GlSvId::s_aucGnss2minSvId[v59]
                 + *(_WORD *)&v192[4] * BlueFin::GlSvId::s_aucGnss2numSvId[v59];
        }
        uint64_t v176 = BlueFin::GlMeSrdSatMgr::GetTrackChannel(a1[1], v192);
        float v60 = &a1[4 * v176];
        if (!*((_WORD *)v60 + 16)) {
          goto LABEL_90;
        }
        unsigned int v62 = *((_DWORD *)v60 + 10);
        float v61 = v60 + 5;
        int v63 = (1 << v62) & 0x21C00;
        if (v62 > 0x11 || v63 == 0) {
          goto LABEL_90;
        }
        __src = &off_270EBF450;
        LOBYTE(v208) = 0;
        *(_DWORD *)int v209 = -1;
        *(_WORD *)&v209[4] = 575;
        *(void *)&v209[12] = 0;
        HIDWORD(v65) = 0;
        *(_OWORD *)&v209[24] = xmmword_263BABE60;
        *(_DWORD *)&v209[20] = 0;
        *(_DWORD *)&v209[40] = 2139095039;
        *(void *)&v209[44] = 0;
        *(_DWORD *)&v209[52] = 2139095039;
        *(_WORD *)&v209[56] = 0;
        *(void *)&v209[60] = 0x7FEFFFFFFFFFFFFFLL;
        int v210 = -1;
        __int16 v211 = -1;
        uint64_t v213 = 0;
        uint64_t v214 = 0;
        uint64_t v212 = 0;
        int v215 = 0;
        v199 = &off_270EBF450;
        v200[0] = 0;
        *(_DWORD *)&v200[4] = -1;
        *(_WORD *)&v200[8] = 575;
        *(void *)&v200[16] = 0;
        *(_OWORD *)&v200[28] = xmmword_263BABE60;
        *(_DWORD *)&v200[24] = 0;
        *(_DWORD *)&v200[44] = 2139095039;
        *(void *)&v200[48] = 0;
        *(_DWORD *)&v200[56] = 2139095039;
        *(_WORD *)&v200[60] = 0;
        *(void *)&v200[64] = 0x7FEFFFFFFFFFFFFFLL;
        int v201 = -1;
        __int16 v202 = -1;
        uint64_t v204 = 0;
        uint64_t v205 = 0;
        uint64_t v203 = 0;
        int v206 = 0;
        char v198 = v173;
        if ((v58 - 52) <= 0xD) {
          char v198 = v173 & ((v222 & 0x80) >> 7);
        }
        uint64_t v66 = *a1;
        int v197 = 16;
        LODWORD(v65) = *((_DWORD *)a1 + 1812);
        __n128 v67 = ((__n128 (*)(uint64_t, const void **, void **, int *, void **, char *, double, double, double))*(void *)(*(void *)v66 + 24))(v66, &v194, &__src, &v197, &v223, &v198, (double)v65, 0.0, 0.0);
        v67.n128_u32[0] = *((_DWORD *)a1 + 1812);
        int AcqWindow = BlueFin::GlMeSrdAidingMgr::GetAcqWindow((void *)a1[2], (uint64_t)&v199, (unsigned __int8 *)&v194, (uint64_t)&v223, (uint64_t)&v198, (double)v67.n128_u64[0]);
        char v68 = v209[20];
        int v174 = (*(_DWORD *)&v209[20] >> 3) & 1 | ((v200[24] & 8) >> 3);
        unsigned int v69 = v192[0] + 100 * v192[4];
        uint64_t v70 = v69 >> 5;
        uint64_t v71 = *(unsigned int *)(a1[610] + 4 * v70);
        char v72 = v69 & 0x1F;
        uint64_t v73 = *(unsigned int *)(a1[620] + 4 * v70);
        v74.n128_u32[0] = *(_DWORD *)&v209[52];
        if ((v58 - 52) <= 0xDu && *(float *)&v209[52] < 0.005) {
          break;
        }
        LODWORD(v75) = 0;
        if ((v58 + 117) > 0x23u || *(float *)&v209[52] >= 0.005) {
          goto LABEL_107;
        }
        int v170 = 0;
        unint64_t v172 = (unint64_t)(*(_WORD *)&v209[20] & 0x400) >> 10;
        BOOL v168 = (*(_WORD *)&v209[20] & 0x400) == 0;
        char v76 = (char)v194;
        if ((*(_WORD *)&v209[20] & 0x400) != 0 && ((_BYTE)v194 + 117) < 0x24u)
        {
          LODWORD(v172) = 1;
LABEL_128:
          *(_DWORD *)&v240[4 * v70] |= 1 << v72;
          goto LABEL_129;
        }
LABEL_108:
        if ((v76 - 1) < 0x20u || (v76 - 66) <= 9u)
        {
          if (SHIDWORD(v194) >= 1)
          {
            if (HIDWORD(v194) == 1)
            {
              if ((*(_WORD *)&v209[20] & 0x800) == 0) {
                goto LABEL_129;
              }
            }
            else
            {
              char v77 = ((v209[20] & 8) != 0) | ((v200[24] & 8) >> 3);
              if (HIDWORD(v194) != 2) {
                char v77 = 0;
              }
              if ((v77 & 1) == 0 && (HIDWORD(v194) != 3 || (*(_WORD *)&v209[20] & 0x2000) == 0)) {
                goto LABEL_129;
              }
            }
            goto LABEL_128;
          }
        }
        else if ((*(_WORD *)&v209[20] & 0x1000) != 0 && (v76 - 76) <= 0x3Eu && SHIDWORD(v194) >= 1)
        {
          goto LABEL_128;
        }
LABEL_129:
        if (((*(uint64_t (**)(void, __n128))(*(void *)a1[3] + 256))(a1[3], v74) & 1) != 0
          || (*(unsigned int (**)(void))(*(void *)a1[3] + 264))(a1[3]))
        {
          BlueFin::GlMeSrdSatTrackMgr::UpdateMPFSettings((uint64_t)a1, (uint64_t)v184, v192);
        }
        uint64_t v78 = 1 << v72;
        uint64_t v79 = (1 << v72) & v71;
        uint64_t v80 = v78 & v73;
        switch(*v61)
        {
          case 0xA:
            unsigned int v81 = &a1[4 * v176];
            int v83 = *((unsigned __int8 *)v81 + 57);
            double v82 = (char *)v81 + 57;
            if (v83) {
              int v84 = 0;
            }
            else {
              int v84 = AcqWindow;
            }
            int v85 = v174;
            if ((v68 & 0x1A) != 0) {
              int v85 = 1;
            }
            if (v84 == 1 && v85 && SHIDWORD(v194) >= 1)
            {
              if (BlueFin::GlSvId::s_aucSvId2gnss[v194] != 3
                && BlueFin::GlSvId::s_aucSvId2gnss[v194])
              {
                if (((_BYTE)v194 + 117) <= 0x23u)
                {
                  if ((v209[21] & 4) == 0) {
                    goto LABEL_239;
                  }
LABEL_256:
                  unsigned int v142 = v192[0] + 100 * v192[4];
                  unsigned int v143 = v142 >> 5;
                  int v144 = 1 << v142;
                  *((_DWORD *)v247 + v143) |= v144;
                  *((_DWORD *)v243 + v143) |= v144;
                  *double v82 = 1;
                  goto LABEL_239;
                }
                if (v194 - 76 <= 0x3E && (v209[21] & 0x10) != 0) {
                  goto LABEL_256;
                }
              }
              else if (HIDWORD(v194) == 2)
              {
                if (((*(uint64_t (**)(void))(*(void *)*a1 + 128))() & 1) == 0) {
                  *((_DWORD *)v247 + ((v192[0] + 100 * v192[4]) >> 5)) |= 1 << (v192[0] + 100 * v192[4]);
                }
                *double v82 = 1;
              }
              else if (HIDWORD(v194) == 1 && (v209[21] & 8) != 0)
              {
                goto LABEL_256;
              }
            }
            else if ((v68 & 0x1A) != 0)
            {
              unsigned int v130 = v192[0] + 100 * v192[4];
              uint64_t v131 = v130 >> 5;
              int v132 = 1 << v130;
              *((_DWORD *)v247 + v131) |= v132;
              (*v182)[v131] |= v132;
              if ((v172 | v170)) {
                *((_DWORD *)v243 + v131) |= v132;
              }
              if (v194 - 81 <= 0x34) {
                (*__dst)[v131] |= v132;
              }
            }
            goto LABEL_239;
          case 0xB:
            if ((v68 & 0x1A) != 0 && v79) {
              *((_DWORD *)v247 + ((v192[0] + 100 * v192[4]) >> 5)) |= 1 << (v192[0] + 100 * v192[4]);
            }
            int v106 = v170;
            if (!v174) {
              goto LABEL_201;
            }
            int v107 = (float *)&a1[4 * v176];
            if (v107[9] <= 22.0 && *((_DWORD *)v107 + 11) != 2) {
              goto LABEL_196;
            }
            if (!v80) {
              goto LABEL_197;
            }
            double v108 = &a1[4 * v176];
            if (*((_DWORD *)v108 + 11) == 2) {
              goto LABEL_197;
            }
            double v109 = *((double *)v108 + 6);
            double v110 = *(double *)&v209[44];
            char EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)&v194);
            if (v195 >= 0x23Fu) {
              goto LABEL_305;
            }
            char v112 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * SHIDWORD(v194)
                                                                         - SHIDWORD(v194)
                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[v194]];
            if (!v112) {
              goto LABEL_306;
            }
            BOOL v113 = BlueFin::GlMeSrdSatTrackMgr::MeasVsAidingBitTimeNotEqual((BlueFin::GlMeSrdSatTrackMgr *)(v112 * EpochPerSymbol), v109, v110);
            int v106 = v170;
            if (v113)
            {
LABEL_196:
              *((_DWORD *)v247 + ((v192[0] + 100 * v192[4]) >> 5)) |= 1 << (v192[0] + 100 * v192[4]);
              int v106 = v170;
            }
LABEL_197:
            if (v79 && v194 - 81 <= 0x34 && !HIDWORD(v194))
            {
              unsigned int v114 = v192[0] + 100 * v192[4];
              unsigned int v115 = v114 >> 5;
              int v116 = 1 << v114;
              *((_DWORD *)v247 + v115) |= v116;
              (*v182)[v115] |= v116;
              (*__dst)[v115] |= v116;
              int v106 = v170;
            }
LABEL_201:
            if (((v172 | v106) & 1) == 0) {
              goto LABEL_235;
            }
            char v117 = v106 ^ 1;
            if ((v58 - 52) > 0xDu) {
              char v117 = 1;
            }
            if ((v117 & 1) == 0)
            {
              unsigned int v118 = v192[0] + 100 * v192[4];
              int v119 = 1 << v118;
              unsigned int v120 = (int *)((char *)v243 + 4 * (v118 >> 5));
              int v121 = *v120;
LABEL_234:
              *unsigned int v120 = v119 | v121;
              goto LABEL_235;
            }
            char v133 = v168;
            if ((v58 + 81) < 0xDCu) {
              char v133 = 1;
            }
            if ((v133 & 1) == 0)
            {
              unsigned int v134 = v192[0] + 100 * v192[4];
              uint64_t v135 = v134 >> 5;
              int v121 = 1 << v134;
              *((_DWORD *)v243 + v135) |= v121;
              if ((AcqWindow & 1) != 0 || (v224 & 0x10) != 0 && *((float *)&v225 + 1) < 0.000000016)
              {
                unsigned int v120 = (int *)&v237[4 * v135];
                int v119 = *v120;
                goto LABEL_234;
              }
            }
LABEL_235:
            if ((BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * SHIDWORD(v194)
                                                                                       - SHIDWORD(v194)
                                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[v194]]
                              - 13) <= 1
              && (v209[21] & 0x30) != 0)
            {
              unsigned int v136 = v192[0] + 100 * v192[4];
              unsigned int v127 = v136 >> 5;
              int v128 = 1 << v136;
              *((_DWORD *)v243 + v127) |= v128;
              uint64_t v129 = (int *)v247;
LABEL_238:
              v129[v127] |= v128;
            }
            goto LABEL_239;
          case 0xC:
            if ((v68 & 0x1A) != 0 && v79 && !HIDWORD(v194))
            {
              unsigned int v86 = v192[0] + 100 * v192[4];
              uint64_t v87 = v86 >> 5;
              int v88 = 1 << v86;
              *((_DWORD *)v247 + v87) |= v88;
              if (v170) {
                *((_DWORD *)v243 + v87) |= v88;
              }
              if (v172)
              {
                *((_DWORD *)v243 + v87) |= v88;
                (*v182)[v87] |= v88;
                (*__dst)[v87] |= v88;
              }
            }
            int v89 = HIDWORD(v194);
            int v90 = v174;
            if (HIDWORD(v194)) {
              int v90 = 0;
            }
            if (v90 != 1) {
              goto LABEL_166;
            }
            unsigned int v91 = (float *)&a1[4 * v176];
            if (v91[9] <= 22.0 && *((_DWORD *)v91 + 11) != 2) {
              goto LABEL_164;
            }
            if (!v80) {
              goto LABEL_165;
            }
            float v92 = &a1[4 * v176];
            if (*((_DWORD *)v92 + 11) == 2) {
              goto LABEL_165;
            }
            double v93 = *((double *)v92 + 6);
            double v94 = *(double *)&v209[44];
            char v95 = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)&v194);
            if (v195 > 0x23Eu)
            {
LABEL_305:
              unsigned int v166 = "IsValid()";
              int v167 = 678;
              DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
              goto LABEL_307;
            }
            char v96 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * SHIDWORD(v194)
                                                                        - SHIDWORD(v194)
                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[v194]];
            if (!v96)
            {
LABEL_306:
              unsigned int v166 = "ucMsPerEpoch != 0";
              int v167 = 685;
              DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
LABEL_307:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v167, v166);
            }
            if (BlueFin::GlMeSrdSatTrackMgr::MeasVsAidingBitTimeNotEqual((BlueFin::GlMeSrdSatTrackMgr *)(v96 * v95), v93, v94))
            {
LABEL_164:
              *((_DWORD *)v247 + ((v192[0] + 100 * v192[4]) >> 5)) |= 1 << (v192[0] + 100 * v192[4]);
            }
LABEL_165:
            int v89 = HIDWORD(v194);
LABEL_166:
            if ((v172 & (v89 == 0)) == 1)
            {
              unsigned int v97 = v192[0] + 100 * v192[4];
              uint64_t v98 = v97 >> 5;
              char v99 = v97 & 0x1F;
              if (((1 << v99) & *((unsigned int *)v247 + v98)) == 0
                && ((1 << v99) & *((unsigned int *)v243 + v98)) == 0
                && LOBYTE(a1[4 * v176 + 7]))
              {
                v234[v98] |= 1 << v99;
              }
            }
            uint64_t v100 = &a1[4 * v176];
            int v103 = *((unsigned __int8 *)v100 + 57);
            float v101 = (char *)v100 + 57;
            int v102 = v103;
            if (v103) {
              int v104 = 0;
            }
            else {
              int v104 = AcqWindow;
            }
            int v105 = v174;
            if ((v68 & 0x1A) != 0) {
              int v105 = 1;
            }
            if (v104 != 1 || !v105)
            {
              if (v89 == 2 && v102 && (*(unsigned int (**)(void))(*(void *)a1[3] + 1048))(a1[3])) {
                BlueFin::GlMeSrdSatTrackMgr::UpdateGridCtrl((BlueFin::GlMeSrdSatTrackMgr *)a1, (BlueFin::GlMeSrdTransaction *)v184, (const BlueFin::GlSignalId *)&v194, v57);
              }
              goto LABEL_239;
            }
            if (v89 < 1) {
              goto LABEL_239;
            }
            if (BlueFin::GlSvId::s_aucSvId2gnss[v194] != 3
              && BlueFin::GlSvId::s_aucSvId2gnss[v194])
            {
              if (((_BYTE)v194 + 117) <= 0x23u)
              {
                if ((v209[21] & 4) == 0) {
                  goto LABEL_239;
                }
LABEL_259:
                unsigned int v145 = v192[0] + 100 * v192[4];
                unsigned int v139 = v145 >> 5;
                int v146 = 1 << v145;
                *((_DWORD *)v247 + v139) |= v146;
                float v140 = (int *)v243;
                int v141 = *((_DWORD *)v243 + v139) | v146;
LABEL_260:
                v140[v139] = v141;
                *float v101 = 1;
                goto LABEL_239;
              }
              if (v194 - 76 <= 0x3E && (v209[21] & 0x10) != 0) {
                goto LABEL_259;
              }
            }
            else
            {
              if (v89 == 2)
              {
                unsigned int v138 = v192[0] + 100 * v192[4];
                unsigned int v139 = v138 >> 5;
                float v140 = (int *)v247;
                int v141 = (1 << v138) | *((_DWORD *)v247 + (v138 >> 5));
                goto LABEL_260;
              }
              if (v89 == 1 && (v209[21] & 8) != 0) {
                goto LABEL_259;
              }
            }
LABEL_239:
            if (((unint64_t)*((unsigned int *)v247 + ((v192[0] + 100 * v192[4]) >> 5)) >> ((v192[0] + 100 * v192[4]) & 0x1F)))
            {
              if (v174) {
                int v137 = 2;
              }
              else {
                int v137 = 1;
              }
              HIDWORD(a1[4 * v176 + 5]) = v137;
            }
LABEL_90:
            BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v216);
            if (BYTE1(v216) == v216) {
              goto LABEL_39;
            }
            break;
          case 0x11:
            if ((v68 & 0x1A) != 0 && v79)
            {
              char v122 = v168;
              if (HIDWORD(v194)) {
                char v122 = 1;
              }
              if ((v122 & 1) == 0)
              {
                unsigned int v123 = v192[0] + 100 * v192[4];
                unsigned int v124 = v123 >> 5;
                int v125 = 1 << v123;
                *((_DWORD *)v247 + v124) |= v125;
                *((_DWORD *)v243 + v124) |= v125;
                (*v182)[v124] |= v125;
                (*__dst)[v124] |= v125;
              }
            }
            if (v194 - 76 >= 0x3F
              && ((_BYTE)v194 - 1) >= 0x20u
              && ((_BYTE)v194 - 76) < 0xF6u
              || !v79
              || (v209[21] & 0x30) == 0)
            {
              goto LABEL_239;
            }
            unsigned int v126 = v192[0] + 100 * v192[4];
            unsigned int v127 = v126 >> 5;
            int v128 = 1 << v126;
            *((_DWORD *)v247 + v127) |= v128;
            *((_DWORD *)v243 + v127) |= v128;
            (*v182)[v127] |= v128;
            uint64_t v129 = *__dst;
            goto LABEL_238;
          default:
            goto LABEL_239;
        }
      }
      unint64_t v75 = ((unint64_t)*(unsigned int *)&v209[20] >> 7) & 1;
LABEL_107:
      int v170 = v75;
      LODWORD(v172) = 0;
      BOOL v168 = 1;
      char v76 = (char)v194;
      goto LABEL_108;
    }
  }
LABEL_282:
  bzero((void *)v22[648], ((4 * v20[1024] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[668], ((4 * v20[1184] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[580], ((4 * v20[480] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[530], ((4 * v20[80] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[540], ((4 * v20[160] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[560], ((4 * v20[320] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[570], ((4 * v20[400] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[610], ((4 * v20[720] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[620], ((4 * v20[800] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[678], ((4 * v20[1264] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero((void *)v22[689], ((4 * v20[1352] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)(v22 + 500), (uint64_t)&v199);
  BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet((void *)v22[1], (uint64_t)&v199, (uint64_t)&__src);
  if (*(unsigned char *)(v23 + 2920)) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
  }
  uint64_t result = BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)(v22 + 500), (uint64_t)&__src);
  if (*(unsigned char *)(v23 + 2920)) {
    return (unsigned __int8 *)BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
  }
  return result;
}

void sub_263901E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t BlueFin::GlMeSrdTransactionBuilder::StartTransaction(BlueFin::GlMeSrdTransactionBuilder *this, int a2)
{
  uint64_t v2 = (BlueFin::GlMeSrdPacketManager *)*((void *)this + 1);
  if (a2) {
    return BlueFin::GlMeSrdPacketManager::StartReliablePacket((uint64_t)v2);
  }
  else {
    return BlueFin::GlMeSrdPacketManager::StartPacket(v2);
  }
}

uint64_t BlueFin::GlMeSrdTransaction::Complete(BlueFin::GlMeSrdTransaction *this)
{
  if (*((unsigned char *)this + 18))
  {
    uint64_t v3 = "!m_bComplete";
    DeviceFaultNotify("glmesrd_transaction_builder.cpp", 183, "Complete", (char)"!m_bComplete");
    int v4 = 183;
    goto LABEL_7;
  }
  if (*((_WORD *)this + 16) && *((unsigned __int16 *)this + 17) != *((unsigned __int16 *)this + 16))
  {
    uint64_t v3 = "m_usTransLen == 0 || m_usLastRpcBaseIndex == m_usTransLen";
    DeviceFaultNotify("glmesrd_transaction_builder.cpp", 186, "Complete", (char)"m_usTransLen == 0 || m_usLastRpcBaseIndex == m_usTransLen");
    int v4 = 186;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_builder.cpp", v4, v3);
  }
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(**((void **)this + 3) + 32))(*((void *)this + 3), *((unsigned __int8 *)this + 17), *(void *)this, *((void *)this + 1), *((unsigned __int8 *)this + 16));
  *((unsigned char *)this + 18) = 1;
  return result;
}

unint64_t BlueFin::GlMeSrdTransactionBuilder::SendTransaction(BlueFin::GlMeSrdTransactionBuilder *this, int a2, void (*a3)(void *, unsigned __int8), void *a4, char a5)
{
  unsigned int v5 = (BlueFin::GlMeSrdPacketManager *)*((void *)this + 1);
  if (a2) {
    return BlueFin::GlMeSrdPacketManager::SendReliablePacket((unint64_t)v5, a3, a4, a5);
  }
  else {
    return BlueFin::GlMeSrdPacketManager::SendPacket(v5);
  }
}

void BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction(BlueFin::GlMeSrdTransaction *this)
{
  if (!*((unsigned char *)this + 18))
  {
    DeviceFaultNotify("glmesrd_transaction_builder.cpp", 202, "~GlMeSrdTransaction", (char)"m_bComplete");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_builder.cpp", 202, "m_bComplete");
  }
}

unint64_t BlueFin::GlMeSrdPacketManager::SendReliablePacket(unint64_t this, void (*a2)(void *, unsigned __int8), void *a3, char a4)
{
  if (!*(unsigned char *)(this + 13874))
  {
    uint64_t v22 = "m_bMessageReliableStarted";
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 84, "SendReliablePacket", (char)"m_bMessageReliableStarted");
    int v23 = 84;
    goto LABEL_38;
  }
  uint64_t v4 = this;
  *(unsigned char *)(this + 13874) = 0;
  unint64_t v5 = *(void *)(this + 13864);
  unint64_t v6 = *(void *)(this + 13848);
  if (v5 >= v6) {
    unsigned int v7 = v5 - v6;
  }
  else {
    unsigned int v7 = v5 - v6 + 7168;
  }
  if (!v7)
  {
    *(void *)(this + 13864) = v6;
    return this;
  }
  unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(this + 120) + 416))(*(void *)(this + 120));
  if (v7 < 3 || v7 > v11)
  {
    uint64_t v22 = "uiSize <= m_rAsicConfigIfc.GetMaxEswTransBufSize() && uiSize >= ESW_RPC_HDR_SZ";
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 104, "SendReliablePacket", (char)"uiSize <= m_rAsicConfigIfc.GetMaxEswTransBufSize() && uiSize >= ESW_RPC_HDR_SZ");
    int v23 = 104;
LABEL_38:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", v23, v22);
  }
  uint64_t v13 = *(void *)(v4 + 13888);
  if (v13)
  {
    *(void *)(v4 + 13888) = *(void *)(v13 + 88);
    *(void *)(v13 + 64) = a2;
    *(void *)(v13 + 72) = a3;
    *(unsigned char *)(v13 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4;
    *(void *)(v13 + 56) = *(void *)(v4 + 13848);
    *(_WORD *)(v13 + 54) = v7;
    *(unsigned char *)(v13 + 49) = 0;
    *(void *)(v13 + 88) = 0;
    uint64_t v14 = *(void *)(v4 + 13880);
    if (v14)
    {
      unsigned __int16 v15 = 1;
      do
      {
        uint64_t v16 = v14;
        ++v15;
        uint64_t v14 = *(void *)(v14 + 88);
      }
      while (v14);
      int v17 = (void *)(v16 + 88);
    }
    else
    {
      int v17 = (void *)(v4 + 13880);
      unsigned __int16 v15 = 1;
    }
    *int v17 = v13;
    if (*(unsigned __int16 *)(v4 + 6594) < v15) {
      *(_WORD *)(v4 + 6594) = v15;
    }
    unint64_t v19 = *(void *)(v4 + 13864);
    *(void *)(v4 + 13848) = v19;
    unint64_t v20 = *(void *)(v4 + 13856);
    if (v19 >= v20) {
      unsigned int v21 = v19 - v20;
    }
    else {
      unsigned int v21 = v19 - v20 + 7168;
    }
    if (v21 > *(unsigned __int16 *)(v4 + 6590)) {
      *(_WORD *)(v4 + 659BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v21;
    }
    LOBYTE(v24) = 11;
    HIBYTE(v24) = *(unsigned char *)v13;
    uint64_t v18 = *(void *)(v4 + 32);
    this = *(void *)(v4 + 8);
    *(void *)(v4 + 32) = this;
    do
    {
      unint64_t v25 = 0;
      if (BlueFin::patch_dispatch(this, v4, (unsigned __int8 *)&v24, &v25)) {
        this = v25;
      }
      else {
        this = (*(uint64_t (**)(uint64_t, __int16 *))(v4 + 32))(v4, &v24);
      }
      *(void *)(v4 + 32) = this;
    }
    while (this);
  }
  else
  {
    __int16 v24 = 7694;
    uint64_t v18 = *(void *)(v4 + 32);
    this = *(void *)(v4 + 8);
    *(void *)(v4 + 32) = this;
    do
    {
      unint64_t v25 = 0;
      if (BlueFin::patch_dispatch(this, v4, (unsigned __int8 *)&v24, &v25)) {
        this = v25;
      }
      else {
        this = (*(uint64_t (**)(uint64_t, __int16 *))(v4 + 32))(v4, &v24);
      }
      *(void *)(v4 + 32) = this;
    }
    while (this);
  }
  *(void *)(v4 + 32) = v18;
  return this;
}

uint64_t (*BlueFin::GlMeSrdPacketManager::wait4ack(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v4 = (unsigned char *)(a1 + 13873);
  unsigned int v5 = *a2;
  if (v5 > 0xA)
  {
    if (v5 == 14)
    {
      if (a2[1] > 0x1Du)
      {
        GlCustomLog(10, "PacketMgr::SendReliablePacket out of available reliable units, Comm Dead\n");
LABEL_27:
        (*(void (**)(void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128));
        BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdPacketManager::wait4kill, (uint64_t)"&GlMeSrdPacketManager::wait4kill");
        return 0;
      }
LABEL_26:
      GlCustomLog(10, "PacketMgr::Reliable retransmission failed(%u) (trial %u for reliable %u), Comm Dead\n");
      goto LABEL_27;
    }
    if (v5 == 11)
    {
      unint64_t v22 = a2[1];
      if (v22 < 0x1E)
      {
        uint64_t v23 = *(void *)(a1 + 16800) + 96 * a2[1];
        char v24 = *(unsigned char *)(a1 + 13875);
        *(unsigned char *)(a1 + 13875) = v24 + 1;
        *(unsigned char *)(v23 + 48) = v24;
        unsigned int v25 = *(unsigned __int16 *)(a1 + 6522) + 750;
        *(void *)(v23 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1;
        BlueFin::GlTimer::arm((BlueFin::GlTimer *)(v23 + 8), 5, v22, v25);
        *(unsigned char *)(v23 + 32) = 1;
        char v26 = BlueFin::GlMeSrdPacketManager::SendReliableElement((unsigned char *)a1, v23);
        uint64_t result = 0;
        uint64_t v27 = *(unsigned __int8 *)(v23 + 49);
        *(unsigned char *)(v23 + 49) = v27 + 1;
        *(unsigned char *)(v23 + v27 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v26;
        return result;
      }
      BOOL v28 = "e->par < TL_MAX_RELIABLE_PARRALEL";
      DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 430, "wait4ack", (char)"e->par < TL_MAX_RELIABLE_PARRALEL");
      int v29 = 430;
LABEL_30:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", v29, v28);
    }
    return BlueFin::QHsm::top;
  }
  if (v5 - 2 < 2) {
    return 0;
  }
  if (v5 != 5) {
    return BlueFin::QHsm::top;
  }
  if (*v4) {
    return 0;
  }
  if (a2[1] >= 0x1Eu)
  {
    BOOL v28 = "e->par < TL_MAX_RELIABLE_PARRALEL";
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 451, "wait4ack", (char)"e->par < TL_MAX_RELIABLE_PARRALEL");
    int v29 = 451;
    goto LABEL_30;
  }
  *(int32x2_t *)(a1 + 6544) = vadd_s32(*(int32x2_t *)(a1 + 6544), (int32x2_t)0x100000001);
  GlCustomLog(12, "PacketMgr::Reliable retransmission as ack was not received!\n");
  if (v4[1])
  {
    BOOL v28 = "!m_bMessageReliableStarted";
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 199, "ResendElement", (char)"!m_bMessageReliableStarted");
    int v29 = 199;
    goto LABEL_30;
  }
  uint64_t v6 = *(void *)(a1 + 16800);
  unsigned int v7 = a2[1];
  int v8 = *(unsigned __int8 **)(a1 + 13880);
  if (!v8)
  {
    if (*(unsigned char *)(v6 + 96 * v7 + 49) != 4) {
      return 0;
    }
    goto LABEL_26;
  }
  __int16 v9 = (unsigned __int8 *)(v6 + 96 * v7);
  unsigned int v10 = 4;
  uint64_t v11 = *(void *)(a1 + 13880);
  do
  {
    unsigned int v12 = *(unsigned __int8 *)(v11 + 49);
    if (v10 < v12)
    {
      BOOL v28 = "ucMaxTrial >= pReliableElment->ucTrial";
      DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 207, "ResendElement", (char)"ucMaxTrial >= pReliableElment->ucTrial");
      int v29 = 207;
      goto LABEL_30;
    }
    uint64_t v11 = *(void *)(v11 + 88);
    unsigned int v10 = v12;
  }
  while (v11);
  uint64_t v13 = v6 + 96 * v7;
  int v15 = *(unsigned __int8 *)(v13 + 49);
  uint64_t v14 = (unsigned __int8 *)(v13 + 49);
  if (v15 == 4) {
    goto LABEL_26;
  }
  while (1)
  {
    int v16 = *v14;
    if (v16 == v8[49])
    {
      unsigned int v17 = *(unsigned __int16 *)(a1 + 6522) + 750;
      GlCustomLog(12, "PacketMgr::ResendElement(%u), resending (trial %u for reliable %u, timer %u)\n", *v8, v16, v8[48], v17);
      BlueFin::GlMeSrdPacketManager::RemoveEventFromQueue((BlueFin::GlMeSrdPacketManager *)a1, 5, *v8);
      char v18 = *v8;
      *((void *)v8 + 5) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(v8 + 8), 5, v18, v17);
      v8[32] = 1;
      unsigned __int8 v19 = BlueFin::GlMeSrdPacketManager::SendReliableElement((unsigned char *)a1, (uint64_t)v8);
      uint64_t v20 = v8[49];
      v8[49] = v20 + 1;
      v8[v20 + 50] = v19;
    }
    if (v8 == v9) {
      break;
    }
    uint64_t result = 0;
    int v8 = (unsigned __int8 *)*((void *)v8 + 11);
    if (!v8) {
      return result;
    }
  }
  return 0;
}

uint64_t BlueFin::GlMeSrdPacketManager::StartReliablePacket(uint64_t this)
{
  if (*(unsigned char *)(this + 13874))
  {
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 44, "StartReliablePacket", (char)"!m_bMessageReliableStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", 44, "!m_bMessageReliableStarted");
  }
  *(unsigned char *)(this + 13874) = 1;
  return this;
}

uint64_t BlueFin::GlMeSrdPacketManager::SendReliableElement(unsigned char *a1, uint64_t a2)
{
  if (a1[13872])
  {
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 172, "SendReliableElement", (char)"!m_bPacketStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", 172, "!m_bPacketStarted");
  }
  uint64_t v4 = a1 + 6514;
  a1[13872] = 1;
  v10[0] = 1;
  v10[1] = *(unsigned char *)(a2 + 48);
  BlueFin::GlMeSrdPacketManager::AppendData((BlueFin::GlMeSrdPacketManager *)a1, v10, 2);
  uint64_t v5 = *(unsigned __int16 *)(a2 + 54);
  uint64_t v6 = *(unsigned __int8 **)(a2 + 56);
  __int16 v7 = (_WORD)a1 + 13844;
  if (&v6[v5] > a1 + 13844)
  {
    __int16 v8 = v7 - (_WORD)v6;
    BlueFin::GlMeSrdPacketManager::AppendData((BlueFin::GlMeSrdPacketManager *)a1, v6, (unsigned __int16)(v7 - (_WORD)v6));
    LOWORD(v5) = v5 - v8;
    uint64_t v6 = a1 + 6676;
  }
  BlueFin::GlMeSrdPacketManager::AppendData((BlueFin::GlMeSrdPacketManager *)a1, v6, (unsigned __int16)v5);
  BlueFin::GlMeSrdPacketManager::SendPacket((BlueFin::GlMeSrdPacketManager *)a1);
  GlCustomLog(15, "PacketMgr::Reliable Packet Sent with SeqId %u(Reliable SeqId %u)\n", (*v4 - 1), *(unsigned __int8 *)(a2 + 48));
  return (*v4 - 1);
}

uint64_t BlueFin::GlMeSrdPacketManager::SendPacket(BlueFin::GlMeSrdPacketManager *this)
{
  int v1 = (char *)this + 13872;
  if (!*((unsigned char *)this + 13872))
  {
    unsigned int v12 = "m_bPacketStarted";
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 596, "SendPacket", (char)"m_bPacketStarted");
    int v13 = 596;
    goto LABEL_18;
  }
  if (!*((_WORD *)this + 3256))
  {
    unsigned int v12 = "m_usTxDataLen > 0";
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 598, "SendPacket", (char)"m_usTxDataLen > 0");
    int v13 = 598;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", v13, v12);
  }
  uint64_t v3 = (_WORD *)((char *)this + 4240);
  BlueFin::GlMeSrdPacketManager::EscapeAndAppend((uint64_t)this, (*((unsigned char *)this + 6515) >> 4) | (16 * *((unsigned char *)this + 6515)));
  uint64_t v4 = (unsigned char *)*((void *)this + 813);
  *((void *)this + 813) = v4 + 1;
  unsigned char *v4 = -32;
  uint64_t v5 = (unsigned char *)*((void *)this + 813);
  *((void *)this + 813) = v5 + 1;
  *uint64_t v5 = 1;
  uint64_t v6 = *((void *)this + 813) - (void)v3;
  uint64_t v14 = &unk_270EBDF10;
  __int16 v15 = v6;
  int v16 = (char *)this + 4240;
  if (*((unsigned char *)this + 6516) && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    BlueFin::GlMeHost2SrdData::SerializeImpl((uint64_t)&v14, 0);
  }
  (*(void (**)(void, char *, void))(**((void **)this + 16) + 24))(*((void *)this + 16), (char *)this + 4240, (unsigned __int16)v6);
  ++*((_DWORD *)this + 1635);
  *((_DWORD *)this + 1632) += (unsigned __int16)v6;
  if ((unsigned __int16)v6 > *((unsigned __int16 *)this + 3294)) {
    *((_WORD *)this + 3294) = v6;
  }
  int v7 = *((unsigned __int8 *)this + 6514);
  if (!*((unsigned char *)this + 6520))
  {
    __int16 v8 = (char *)this + 6596;
    uint64_t v9 = 10;
    while (*(_DWORD *)v8)
    {
      v8 += 8;
      if (!--v9) {
        goto LABEL_15;
      }
    }
    *(_DWORD *)__int16 v8 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    v8[4] = v7;
  }
LABEL_15:
  GlCustomLog(15, "PacketMgr::Packet Sent with SeqId %u\n", v7);
  *int v1 = 0;
  unsigned __int8 v10 = *((unsigned char *)this + 6514) + 1;
  *((unsigned char *)this + 6514) = v10;
  *uint64_t v3 = 224;
  *((void *)this + 813) = (char *)this + 4242;
  *((unsigned char *)this + 6515) = 0;
  uint64_t result = BlueFin::GlMeSrdPacketManager::EscapeAndAppend((uint64_t)this, v10);
  *((unsigned char *)this + 6515) = BlueFin::GlUtlCrc::ucCrcTable[*((unsigned char *)this + 6515) ^ *((unsigned char *)this + 6514)];
  *((_WORD *)this + 3256) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdPacketManager::AppendData(BlueFin::GlMeSrdPacketManager *this, unsigned __int8 *a2, int a3)
{
  if (!*((unsigned char *)this + 13872))
  {
    uint64_t v9 = "m_bPacketStarted";
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 576, "AppendData", (char)"m_bPacketStarted");
    int v10 = 576;
    goto LABEL_10;
  }
  int v3 = a3;
  unsigned __int16 v6 = *((_WORD *)this + 3256) + a3;
  *((_WORD *)this + 3256) = v6;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 416))(*((void *)this + 15));
  if (result < v6)
  {
    uint64_t v9 = "m_usTxDataLen <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 581, "AppendData", (char)"m_usTxDataLen <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v10 = 581;
    goto LABEL_10;
  }
  if (v3)
  {
    do
    {
      --v3;
      *((unsigned char *)this + 6515) = BlueFin::GlUtlCrc::ucCrcTable[*((unsigned char *)this + 6515) ^ *a2];
      int v8 = *a2++;
      uint64_t result = BlueFin::GlMeSrdPacketManager::EscapeAndAppend((uint64_t)this, v8);
    }
    while ((_WORD)v3);
  }
  if ((unint64_t)(*((void *)this + 813) - (void)this - 4240) >= 0x8BE)
  {
    uint64_t v9 = "(m_pucTxMsg-m_aucTxMessageBuf)<(sizeof(m_aucTxMessageBuf)-20)";
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 588, "AppendData", (char)"(m_pucTxMsg-m_aucTxMessageBuf)<(sizeof(m_aucTxMessageBuf)-20)");
    int v10 = 588;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", v10, v9);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdPacketManager::EscapeAndAppend(uint64_t this, int a2)
{
  if (a2 == 224)
  {
    uint64_t v2 = *(unsigned char **)(this + 6504);
    *(void *)(this + 6504) = v2 + 1;
    *uint64_t v2 = -32;
    int v3 = *(char **)(this + 6504);
    *(void *)(this + 6504) = v3 + 1;
    char v4 = 2;
LABEL_8:
    *int v3 = v4;
    return this;
  }
  if (*(unsigned char *)(this + 6517))
  {
    if (*(unsigned __int8 *)(this + 6518) == a2)
    {
      uint64_t v5 = *(unsigned char **)(this + 6504);
      *(void *)(this + 6504) = v5 + 1;
      *uint64_t v5 = -32;
      int v3 = *(char **)(this + 6504);
      *(void *)(this + 6504) = v3 + 1;
      char v4 = 3;
      goto LABEL_8;
    }
    if (*(unsigned __int8 *)(this + 6519) == a2)
    {
      unsigned __int16 v6 = *(unsigned char **)(this + 6504);
      *(void *)(this + 6504) = v6 + 1;
      unsigned char *v6 = -32;
      int v3 = *(char **)(this + 6504);
      *(void *)(this + 6504) = v3 + 1;
      char v4 = 4;
      goto LABEL_8;
    }
  }
  int v7 = *(unsigned char **)(this + 6504);
  *(void *)(this + 6504) = v7 + 1;
  unsigned char *v7 = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdPacketManagerCallbackImpl::OnData2Asic(BlueFin::GlMeSrdPacketManagerCallbackImpl *this, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(*((void *)this + 1) + 17024) + 24))(*(void *)(*((void *)this + 1) + 17024), a2);
}

uint64_t BlueFin::GlMeSrdTransportCallback::OnAsicData(BlueFin::GlMeSrdTransportCallback *this, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(*((void *)this + 1) + 8) + 112))(*(void *)(*((void *)this + 1) + 8), a2);
}

uint64_t BlueFin::GlMeSrdSatMgr::GetTrackChannel(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2 + 100 * *((_DWORD *)a2 + 1);
  if ((((unint64_t)*(unsigned int *)(*(void *)(a1 + 280) + 4 * (v2 >> 5)) >> (v2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 905, "GetTrackChannel", (char)"m_otSetSatCarrIdHaveTrackChannel.Has(otSatCarrId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 905, "m_otSetSatCarrIdHaveTrackChannel.Has(otSatCarrId)");
  }
  return *(unsigned __int8 *)(*(void *)(a1 + 6288) + 52 * *a2 + *((int *)a2 + 1) + 24);
}

char *BlueFin::GlSignalIdSet::GetSignalIdSetForSv@<X0>(char *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 12) = 0u;
  uint64_t v3 = a3 + 12;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 19;
  *(_OWORD *)(a3 + 28) = 0u;
  *(_OWORD *)(a3 + 44) = 0u;
  *(_OWORD *)(a3 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  uint64_t v4 = *a2;
  uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
  uint64_t v6 = BlueFin::GlSignalId::s_aucGnss2numSignals[v5];
  if (BlueFin::GlSignalId::s_aucGnss2numSignals[v5])
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)result;
    uint64_t v9 = &BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v5];
    uint64_t result = BlueFin::GlSvId::s_aucGnss2numSvId;
    do
    {
      if ((v4 + 67) < 0x44u || *v9 == 255) {
        __int16 v10 = 575;
      }
      else {
        __int16 v10 = BlueFin::GlSignalId::s_ausGnss2signalId[v5]
      }
            + v4
            - BlueFin::GlSvId::s_aucGnss2minSvId[v5]
            + BlueFin::GlSvId::s_aucGnss2numSvId[v5] * (_WORD)v7;
      char v11 = v10;
      int v12 = v10 >> 5;
      char v13 = v11 & 0x1F;
      if (((unint64_t)*(unsigned int *)(v8 + 4 * v12) >> v13)) {
        *(_DWORD *)(v3 + 4 * v12) |= 1 << v13;
      }
      ++v7;
      v9 += 7;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::UpdateMPFSettings(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = *a3;
  BlueFin::GlMeSrdSatMgr::GetSvid(*(void **)(a1 + 8), *a3, &v14);
  int v7 = *((_DWORD *)a3 + 1);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 256))();
  if ((result & (v7 == 3)) != 0) {
    int v9 = 1;
  }
  else {
    int v9 = v7;
  }
  uint64_t v10 = a1 + 16 * v6 + 4 * v9;
  if (((unint64_t)*(unsigned int *)(*(void *)(a1 + 5600) + (((unint64_t)v14 >> 3) & 0x1C)) >> (v14 & 0x1F))) {
    int v11 = -1805320152;
  }
  else {
    int v11 = 0;
  }
  if (v11 != *(_DWORD *)(v10 + 5648))
  {
    *(_DWORD *)(v10 + 5648) = v11;
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 48))(*(void *)(a2 + 24));
    char v13 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) + 144);
    return v13();
  }
  return result;
}

void *BlueFin::GlMeSrdSatMgr::GetSignalIndex@<X0>(void *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = *a2;
  uint64_t v4 = 1 << (v3 & 0x1F);
  if ((v4 & *(_DWORD *)(result[15] + 4 * (v3 >> 5))) == 0
    && (v4 & *(_DWORD *)(result[11] + 4 * (v3 >> 5))) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 869, "GetSignalIndex", (char)"IsSatAllocated(ucSatId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 869, "IsSatAllocated(ucSatId)");
  }
  uint64_t v5 = *(unsigned __int8 *)(result[786] + 52 * *a2);
  uint64_t v6 = *((int *)a2 + 1);
  *(unsigned char *)a3 = v5;
  *(_DWORD *)(a3 + 4) = v6;
  *(_WORD *)(a3 + 8) = 575;
  if (v6 != -1 && (v5 + 67) >= 0x44u)
  {
    uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + v7] == 255) {
      *(_DWORD *)(a3 + 4) = -1;
    }
    else {
      *(_WORD *)(a3 + 8) = BlueFin::GlSignalId::s_ausGnss2signalId[v7]
    }
                         + v5
                         - BlueFin::GlSvId::s_aucGnss2minSvId[v7]
                         + v6 * BlueFin::GlSvId::s_aucGnss2numSvId[v7];
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcSatEncImp::esw_sat_rpc_set_aid_id_multi_carr(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned __int8 a4, unsigned __int8 a5)
{
  unsigned __int8 v7 = a3;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 384))(*(void *)(a1 + 8)) <= a3)
  {
    uint64_t v12 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 162, "esw_sat_rpc_set_aid_id_multi_carr", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v13 = 162;
    goto LABEL_6;
  }
  v14[0] = v7;
  v14[1] = a4;
  void v14[2] = a5;
  *(_WORD *)__int16 v15 = 1539;
  char v16 = 8;
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)a2, v15, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)a2, v14, 3u);
  unsigned int v10 = a2[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    uint64_t v12 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 167, "esw_sat_rpc_set_aid_id_multi_carr", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v13 = 167;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v13, v12);
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcJdEncImp::esw_jd_rpc_tm_set_mpf_params(uint64_t a1, uint64_t a2, char a3, char a4, unint64_t a5)
{
  uint64_t v8 = (unsigned __int16 *)a2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v10);
  BlueFin::GlStream::PutU08(v13, a3);
  BlueFin::GlStream::PutU08(v13, a4);
  BlueFin::GlStream::PutU16(v13, 0);
  BlueFin::GlStream::CarpPutBits(v13, a5 & 7, 3u, 0x20u);
  BlueFin::GlStream::CarpPutBits(v13, a5 >> 3, 5u, 0x20u);
  BlueFin::GlStream::CarpPutBits(v13, (a5 >> 8) & 0x1F, 5u, 0x20u);
  BlueFin::GlStream::CarpPutBits(v13, (a5 >> 13) & 0x1F, 5u, 0x20u);
  BlueFin::GlStream::CarpPutBits(v13, (a5 >> 18) & 0x3F, 6u, 0x20u);
  BlueFin::GlStream::CarpPutBits(v13, BYTE3(a5) & 0x7F, 7u, 0x20u);
  BlueFin::GlStream::CarpPutBits(v13, (a5 >> 31) & 1, 1u, 0x20u);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v8, 4, 0x10u, v14, Offset);
  LODWORD(v8) = v8[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 911, "esw_jd_rpc_tm_set_mpf_params", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 911, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsGridSupported(BlueFin::GlMeSrdAsicConfig *this)
{
  return ((*(unint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 184))(this) & 0xF000FFFE)
       - 805306386 < 4;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateEphemeris(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = a2 + v4;
    if (*(unsigned __int8 *)(a2 + v4 + 60) != 255)
    {
      int v7 = *(_DWORD *)(v6 + 84);
      if ((v7 & 0xF0) != 0) {
        LOBYTE(v7) = v7 - 32;
      }
      if (BlueFin::GlPeGloEphMgr::SetAsstEph(*(void *)(*(void *)(a1 + 80) + 7368), a2 + v4, (char)v7, 0, *(unsigned __int16 *)(v6 + 80), 1))BOOL v8 = v5 == 0; {
      else
      }
        BOOL v8 = 0;
      if (v8)
      {
        char v17 = *(unsigned char *)(v6 + 60) + 1;
        uint64_t v5 = (*(uint64_t (**)(void, char *, uint64_t))(**(void **)(*(void *)(a1 + 80) + 7368) + 112))(*(void *)(*(void *)(a1 + 80) + 7368), &v17, 1);
        if (v5)
        {
          __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*(void *)(a1 + 88), 1, v16);
          double v10 = (*(double (**)(uint64_t, __n128 *, uint64_t, __n128))(*(void *)v5 + 64))(v5, v16, 1, Time);
          unsigned __int8 v14 = &off_270EBC600;
          uint64_t v15 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v16, (BlueFin::GlGpsTime *)&v14);
          unsigned int v11 = ((uint64_t (*)(void))v14[4])(&v14);
          LODWORD(v12) = v15;
          uint64_t v5 = (int)((double)v12 * 2.32830644e-10
                                 + (double)v11
                                 - v10
                                 + (double)(*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) * 0.5);
        }
      }
    }
    v4 += 88;
  }
  while (v4 != 2112);
  return v5;
}

uint64_t BlueFin::GlPeGloEphMgr::SetAsstEph(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 60);
  if (v6 >= 0x18)
  {
    GlCustomLog(12, "GlPeGloEphMgr::SetAsstEph: Assisted ephemeris with invalid OSN:%d received and has been rejected\n", v6 + 1);
    return 0;
  }
  else
  {
    BlueFin::GlPeGloEphemeris::GlPeGloEphemeris((uint64_t)v9, a1 + 5856, (unsigned int *)a2, a3, a4, a5, a6);
    return (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 32))(a1, v9);
  }
}

BOOL BlueFin::GlPeGloEphMgr::SetAsstEph(BlueFin::GlPeGloEphMgr **this, const BlueFin::GlPeEphemeris *a2)
{
  if ((*((unsigned char *)a2 + 8) & 0xF0) != 0x20)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 1219, "SetAsstEph", (char)"rotAsstEph.GetGnss() == GNSS_GLONASS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 1219, "rotAsstEph.GetGnss() == GNSS_GLONASS");
  }
  __int16 v13 = 2593;
  unsigned __int8 v14 = (int *)v16;
  int32x2_t v15 = vdup_n_s32(0xFF9222FF);
  long long v3 = *((_OWORD *)a2 + 3);
  v16[0] = *((_OWORD *)a2 + 2);
  v16[1] = v3;
  unint64_t v12 = &unk_270EC0F88;
  uint64_t v4 = *((void *)a2 + 9);
  uint64_t v17 = *((void *)a2 + 8);
  uint64_t v18 = v4;
  int v5 = (*((uint64_t (**)(BlueFin::GlPeGloEphMgr **, void **, void))*this + 47))(this, &v12, 0);
  BOOL result = 0;
  if (v5)
  {
    int v7 = this[2];
    if (!*((_DWORD *)v7 + 644)
      || (BOOL result = BlueFin::GlPeGloEphMgr::quarterCheck(v7, (const BlueFin::GlPeEphemeris *)&v12)))
    {
      int v8 = *v14 >> 27;
      if (v8 == 248)
      {
        unsigned int v9 = v14[8];
        int v10 = (v9 >> 22) & 0x1F;
        unsigned int v11 = this[68];
        if (v11) {
          int v8 = BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(v11, (v9 >> 22) & 0x1F);
        }
        if (v8 == -8) {
          GlCustomLog(12, "GlPeGloEphMgr::SetAsstEph: Assisted ephemeris for OSN:%d cannot be used until its FCN is known.\n", v10);
        }
        else {
          BlueFin::GlPeGloEphemeris::PutCmpSignedField((BlueFin::GlPeGloEphemeris *)&v12, 4, v8);
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphMgr::SetLtoEph(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeLtoEphemeris *a2)
{
  if (!(*(unsigned int (**)(const BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 35))
  {
    (*(void (**)(uint64_t *__return_ptr, const BlueFin::GlPeLtoEphemeris *))(*(void *)a2 + 136))(&v5, a2);
    GlCustomLog(12, "GlPeGloEphMgr::SetLtoEph: LTO ephemeris for OSN:%d cannot be used until its FCN is known.\n", v5);
  }
  return (*(uint64_t (**)(BlueFin::GlPeGloEphMgr *, const BlueFin::GlPeLtoEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

BOOL BlueFin::GlPeGloEphMgr::processCandidateEphemeris(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeEphemeris *a2, char a3)
{
  BOOL v5 = BlueFin::GlPeEphemerisMgr::processCandidateEphemeris(this, a2, a3);
  if (v5 && *((void *)this + 68))
  {
    (*(void (**)(uint64_t *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(&v12, a2);
    uint64_t v6 = v12;
    int v7 = *((unsigned char *)a2 + 8) & 0xF;
    if (v7 == 1)
    {
      uint64_t v8 = 4;
    }
    else
    {
      if (v7 != 2
        || !(*(unsigned int (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 35))
      {
        return v5;
      }
      uint64_t v8 = 36;
    }
    unsigned __int8 v9 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, v8);
    if (v9 != 248)
    {
      uint64_t v10 = *((void *)this + 68);
      *(_DWORD *)(v10 + 20 * (char)v9 + 572) = -7200001;
      *(_DWORD *)(v10 + 16 * v6 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -7200001;
    }
  }
  return v5;
}

unsigned __int8 *BlueFin::GlPeAsstMgr::OnInitialTime(BlueFin::GlPeAsstMgr *this, const BlueFin::GlPeGnssTime *a2)
{
  int v4 = 0;
  BOOL v5 = (void *)((char *)this + 384);
  do
  {
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v5, v4);
    if (Mgr) {
      (*(void (**)(void *, const BlueFin::GlPeGnssTime *))(*Mgr + 40))(Mgr, a2);
    }
    ++v4;
  }
  while (v4 != 7);
  BlueFin::GlPeAsstMgr::UpdateEphValidityCache(this);

  return BlueFin::GlPeAlmMgr::OnInitialTime((BlueFin::GlPeAsstMgr *)((char *)this + 34112), a2);
}

unsigned __int8 *BlueFin::GlPeEphemerisMgr::OnInitialTime(BlueFin::GlPeEphemerisMgr *this, const BlueFin::GlPeGnssTime *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 304))(&__src);
  unsigned __int8 v8 = v7;
  memcpy(v12, __src, 4 * v7);
  __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  int v11 = v12[0];
  while (1)
  {
    BOOL result = BlueFin::GlSetIterator::operator++(&v8);
    if (v9 == v8) {
      break;
    }
    LOBYTE(__src) = v10;
    WritableEphemerisObunsigned int j = BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj((uint64_t)this, &__src);
    (*(void (**)(unint64_t, const BlueFin::GlPeGnssTime *))(*(void *)WritableEphemerisObj + 72))(WritableEphemerisObj, a2);
  }
  return result;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::SetEphTime(BlueFin::GlPeGpsEphemerisBase *this, const BlueFin::GlPeGnssTime *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)this + 80))(this);
  if ((result & 1) == 0)
  {
    double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 18);
    (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, uint64_t))(*(void *)this + 216))(this, 27, 1);
    v6[0] = &off_270EBC600;
    v6[1] = 0;
    BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)v6);
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v6, ScaledFloatingField, &v9);
    int v7 = v9;
    unsigned int v8 = v10;
    v6[2] = &off_270EBC600;
    return (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, unint64_t))(*(void *)this
                                                                                                 + 216))(this, 28, v10 / 0x93A80uLL);
  }
  return result;
}

uint64_t BlueFin::GlPeBdsEphemeris::SetEphTime(BlueFin::GlPeBdsEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 27);
  if (!result)
  {
    double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 18);
    (*(void (**)(BlueFin::GlPeBdsEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 27, 1);
    v6[0] = &off_270EBF588;
    v6[1] = 0;
    BlueFin::GlPeGnssTime::GetBds(a2, (BlueFin::GlBdsTime *)v6);
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v6, ScaledFloatingField, &v9);
    int v7 = v9;
    int v8 = v10;
    v6[2] = &off_270EBF588;
    return (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t, unint64_t))(*(void *)this + 216))(this, 28, (v10 - 820108814) / 0x93A80uLL);
  }
  return result;
}

uint64_t BlueFin::GlPeGalEphemeris::SetEphTime(BlueFin::GlPeGalEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *))(*(void *)this + 80))(this);
  if ((result & 1) == 0)
  {
    double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 18);
    (*(void (**)(BlueFin::GlPeGalEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 27, 1);
    v6[0] = &off_270EBF538;
    v6[1] = 0;
    BlueFin::GlPeGnssTime::GetGal(a2, (BlueFin::GlGalTime *)v6);
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v6, ScaledFloatingField, &v9);
    int v7 = v9;
    int v8 = v10;
    v6[2] = &off_270EBF538;
    return (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t, unint64_t))(*(void *)this + 216))(this, 28, (v10 - 619315200) / 0x93A80uLL);
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphemeris::SetEphTime(BlueFin::GlPeGloEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *))(*(void *)this + 80))(this);
  if ((result & 1) == 0)
  {
    v13[0] = &off_270EBF4E8;
    v13[1] = 0;
    BlueFin::GlPeGnssTime::GetGlns(a2, (BlueFin::GlGlnsTime *)v13);
    BlueFin::GlPeGloEphemeris::computeTk((BlueFin::GlPeGloEphemeris *)&v14, this, (BlueFin::GlGlnsTime *)v13);
    (*(void (**)(BlueFin::GlPeGloEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 35, 1);
    BOOL v7 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
      && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
      && v15 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    int v8 = (*(uint64_t (**)(uint64_t *))(v14 + 32))(&v14);
    (*(void (**)(BlueFin::GlPeGloEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 36, (v8 - v7) / 0x7861F80u + 1);
    BOOL v11 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && v15 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    int v12 = (*(uint64_t (**)(uint64_t *))(v14 + 32))(&v14);
    return (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 25, (((203613265 * (unint64_t)((v12 - v11) % 0x7861F80u)) >> 32) >> 12) + 1);
  }
  return result;
}

uint64_t BlueFin::GlPeNicEphemeris::SetEphTime(BlueFin::GlPeNicEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *))(*(void *)this + 80))(this);
  if ((result & 1) == 0)
  {
    double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 18);
    (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 27, 1);
    v6[0] = &off_270EBF080;
    v6[1] = 0;
    BlueFin::GlPeGnssTime::GetNic(a2, (BlueFin::GlNicTime *)v6);
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v6, ScaledFloatingField, &v9);
    int v7 = v9;
    int v8 = v10;
    v6[2] = &off_270EBF080;
    return (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t, unint64_t))(*(void *)this + 216))(this, 28, (v10 - 619315200) / 0x93A80uLL);
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeGloEphMgr::OnInitialTime(BlueFin::GlPeGloEphMgr **this, const BlueFin::GlPeGnssTime *a2)
{
  BlueFin::GlPeEphemerisMgr::OnInitialTime((BlueFin::GlPeEphemerisMgr *)this, a2);
  (*((void (**)(void **__return_ptr, BlueFin::GlPeGloEphMgr **))*this + 38))(&__src, this);
  unsigned __int8 v7 = v6;
  memcpy(v11, __src, 4 * v6);
  __int16 v9 = 0;
  unsigned __int8 v8 = 0;
  int v10 = v11[0];
  while (1)
  {
    uint64_t result = BlueFin::GlSetIterator::operator++(&v7);
    if (v8 == v7) {
      break;
    }
    LOBYTE(__src) = v9;
    int v4 = (const BlueFin::GlPeEphemeris *)(*((uint64_t (**)(BlueFin::GlPeGloEphMgr **, void **))*this + 46))(this, &__src);
    if ((*((unsigned char *)v4 + 8) & 0xF) == 1 && !BlueFin::GlPeGloEphMgr::quarterCheck(this[2], v4)) {
      (*((void (**)(BlueFin::GlPeGloEphMgr **, void **))*this + 42))(this, &__src);
    }
  }
  return result;
}

BOOL BlueFin::GlPeGloEphMgr::quarterCheck(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  BlueFin::GlPeTimeManager::GetTime(this, 1, v33);
  uint64_t v31 = &off_270EBF4E8;
  uint64_t v32 = 0;
  BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v33, (BlueFin::GlGlnsTime *)&v31);
  BOOL v5 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
    && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
    && HIDWORD(v32) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  BOOL v6 = 0;
  unint64_t v7 = (203613265 * (unint64_t)((((unsigned int (*)(void))v31[4])(&v31) - v5) % 0x7861F80)) >> 44;
  if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
    && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
  {
    BOOL v6 = HIDWORD(v32) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  }
  double v8 = (double)(((unsigned int (*)(void))v31[4])(&v31) % 0x15180);
  if (v6) {
    double v8 = 10799.0;
  }
  LODWORD(v9) = v32;
  double v10 = v8 + (double)v9 * 2.32830644e-10;
  if (v7) {
    __int16 v11 = v7;
  }
  else {
    __int16 v11 = 1461;
  }
  if (v10 >= 10800.0) {
    unsigned __int16 v12 = v7 + 1;
  }
  else {
    unsigned __int16 v12 = v11;
  }
  BlueFin::GlPeEphemeris::GetEphTime(a2, (const BlueFin::GlPeGnssTime *)v33, (uint64_t)v28);
  int v29 = &off_270EBF4E8;
  uint64_t v30 = 0;
  BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v28, (BlueFin::GlGlnsTime *)&v29);
  BOOL v15 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
     && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
     && HIDWORD(v30) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  BOOL v16 = 0;
  unsigned int v17 = (((unsigned int (*)(void))v29[4])(&v29) - v15) % 0x7861F80 / 0x15180;
  if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
    && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
  {
    BOOL v16 = HIDWORD(v30) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  }
  unsigned int v18 = ((uint64_t (*)(void))v29[4])(&v29);
  uint64_t v20 = 0;
  int v21 = 0;
  int v22 = 0;
  double v23 = (double)(v18 % 0x15180);
  if (v16) {
    double v23 = 10799.0;
  }
  LODWORD(v19) = v30;
  double v24 = v23 + (double)v19 * 2.32830644e-10;
  if ((_WORD)v17) {
    unsigned __int16 v25 = v17;
  }
  else {
    unsigned __int16 v25 = 1461;
  }
  if (v24 >= 10800.0) {
    unsigned __int16 v25 = v17 + 1;
  }
  do
  {
    if (v22 && v21) {
      break;
    }
    unsigned int v26 = BlueFin::GlPeGloEphMgr::quarterCheck(BlueFin::GlPeEphemeris const&)const::ausNtStartOfQuarter[v20];
    if (v26 <= v12
      && BlueFin::GlPeGloEphMgr::quarterCheck(BlueFin::GlPeEphemeris const&)const::ausNtStartOfQuarter[v20 + 1] > v12)
    {
      int v22 = (v20 & 3) + 1;
    }
    if (v26 <= v25
      && BlueFin::GlPeGloEphMgr::quarterCheck(BlueFin::GlPeEphemeris const&)const::ausNtStartOfQuarter[v20 + 1] > v25)
    {
      int v21 = (v20 & 3) + 1;
    }
    ++v20;
  }
  while (v20 != 16);
  return v22 == v21;
}

unsigned int *BlueFin::GlPeEphemeris::GetEphTime@<X0>(BlueFin::GlPeEphemeris *this@<X0>, const BlueFin::GlPeGnssTime *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(BlueFin::GlPeEphemeris *))(*(void *)this + 64))(this);
  *(void *)a3 = *(void *)a2;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
  *(_OWORD *)(a3 + 16) = *((_OWORD *)a2 + 1);

  return BlueFin::GlPeGnssTime::operator-=((unsigned int *)a3, v5);
}

BOOL BlueFin::GlPeGloEphMgr::validateEph(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeGloEphemeris *a2)
{
  int v4 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 4);
  char v5 = v4;
  if (((v4 << 24) + 0x7FFFFFF) >= 0xEFFFFFF) {
    unsigned __int8 v6 = 0;
  }
  else {
    unsigned __int8 v6 = v4 + 59;
  }
  unsigned __int8 v7 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 27);
  int v8 = *(_DWORD *)(*((void *)this + 2) + 2568);
  char v9 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 6);
  unsigned __int8 v10 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 6) * v9;
  char v11 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 7);
  unsigned __int8 v12 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 7) * v11;
  int v13 = v10;
  BOOL v15 = v10 > 0x17u || (v12 & 0xFCu) > 0x3B;
  if (v15) {
    GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: Tk: Hour:%d  Min:%d\n", v6, v7, v8, v13, v12);
  }
  __int16 v16 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 9);
  __int16 v17 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 9);
  if ((unsigned __int16)(v17 * v16) - 1426 <= 0xFFFFFA7C)
  {
    GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: Osn:%d  Tb:%d\n", v6, v7, v8, (unsigned __int16)(v17 * v16), v81);
    LOBYTE(v15) = 1;
  }
  unsigned __int16 v18 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 25);
  if (v18 >= 0x5B6u)
  {
    GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: Nt:%d\n", v6, v7, v8, v18);
    return 0;
  }
  if (v15) {
    return 0;
  }
  if ((*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *))(*(void *)a2 + 40))(a2))
  {
    double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 12);
    double v21 = fabs(ScaledFloatingField);
    BOOL v22 = v21 > 0.001953125;
    if (v21 > 0.001953125) {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: TauN:%.6f\n", v6, v7, v8, ScaledFloatingField);
    }
    double v23 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 28);
    if (fabs(v23) > 0.00000001397)
    {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: deltaTauN:%.6f\n", v6, v7, v8, v23);
      BOOL v22 = 1;
    }
    double v24 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 11);
    if (fabs(v24) > 9.31322575e-10)
    {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: gamma:%.15e\n", v6, v7, v8, v24);
      BOOL v22 = 1;
    }
    double v25 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 13);
    double v26 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 14);
    double v27 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 15);
    if (fabs(v25) > 27000.0 || fabs(v26) > 27000.0 || fabs(v27) > 24000.0)
    {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: XYZ: X0:%.3f  Y0:%.3f  Z0:%.3f\n", v6, v7, v8, v25, v26, v27);
      BOOL v22 = 1;
    }
    double v28 = v26 * v26 + v25 * v25 + v27 * v27;
    double v29 = sqrt(v28);
    if (v29 < 6378.137)
    {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: Semi-major axis too small: (%.1lf < %.1lf)\n", v6, v7, v8, v29, 6378.137);
      BOOL v22 = 1;
    }
    double v30 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 16);
    double v31 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 17);
    double v32 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 18);
    if (fabs(v30) > 4.3 || fabs(v31) > 4.3 || fabs(v32) > 4.3)
    {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: XYZ': X1:%.6f  Y1:%.6f  Z1:%.6f\n", v6, v7, v8, v30, v31, v32);
      BOOL v22 = 1;
    }
    double v33 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 19);
    double v34 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 20);
    double v36 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a2, 21);
    if (fabs(v33) > 0.000000007 || fabs(v34) > 0.000000007 || fabs(v36) > 0.0000000062)
    {
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation error: XYZ'': X2:%.9f  Y2:%.9f  Z2:%.9f\n", v6, v7, v8, v33, v34, v36);
      BOOL v22 = 1;
    }
    float v37 = v28;
    float v38 = v31 * v31 + v30 * v30 + v32 * v32;
    float v39 = v34 * v34 + v33 * v33 + v36 * v36;
    if (v37 < 642620000.0 || v37 >= 657920000.0 || v38 < 9.0 || v38 >= 13.69 || v39 >= 8.1e-17)
    {
      (*(void (**)(void *__return_ptr, const BlueFin::GlPeGloEphemeris *))(*(void *)a2 + 136))(v111, a2);
      if (LOBYTE(v111[0]) - 64 <= 0xFFFFFFC0) {
        goto LABEL_93;
      }
      *(_DWORD *)(*((void *)this + 48) + (((unint64_t)LOBYTE(v111[0]) >> 3) & 0x1C)) |= 1 << SLOBYTE(v111[0]);
      GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validation requires verification: XYZ Magnitude Outside of Limits SatPosKm(%.3f<%.3f<%.3f) SatVelKmps(%.6f<%.6f<%.6f) SatAccKmpss(%.9f<%.9f<%.9f)\n", v6, v7, v8, 25350.0, sqrtf(v37), 25650.0, 3.0, sqrtf(v38), 3.70000005, 0.0, sqrtf(v39), 0.00000000899999986);
    }
    *(_WORD *)int v83 = 0;
    char v40 = (BlueFin::GlPeGloFcnOsnMgr *)*((void *)this + 68);
    if (v40)
    {
      PossibleOsnsForFcuint64_t n = BlueFin::GlPeGloFcnOsnMgr::GetPossibleOsnsForFcn(v40, v5, &v83[1], v83);
      if (!PossibleOsnsForFcn) {
        goto LABEL_58;
      }
    }
    else
    {
      PossibleOsnsForFcuint64_t n = BlueFin::GlPeGloFcnOsnMgr::GetHcPossibleOsnsForFcn((BlueFin::GlPeGloFcnOsnMgr *)v5, &v83[1], v83, v35);
      if (!PossibleOsnsForFcn) {
        goto LABEL_58;
      }
    }
    if (v83[1] != v7 && (PossibleOsnsForFcn != 2 || v83[0] != v7))
    {
      if (v7 - 64 <= 0xFFFFFFC0) {
        goto LABEL_93;
      }
      *(_DWORD *)(*((void *)this + 48) + 4 * (v7 >> 5)) |= 1 << v7;
    }
LABEL_58:
    if (v22) {
      return !v22;
    }
    int v120 = 7;
    char v121 = 0;
    LODWORD(v111[0]) = -65536;
    v111[1] = 0;
    unsigned int v112 = 0;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    unsigned __int16 v117 = 0;
    int v118 = -1;
    char v119 = 0;
    uint64_t v45 = *((void *)this + 69);
    unsigned __int8 v46 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 27);
    if (!BlueFin::GlPeAlmMgr::GetAlm(v45, 2u, v46, (uint64_t)v111, 1, 1)) {
      return !v22;
    }
    if (v119 != v5) {
      return !v22;
    }
    if (v118 == 2) {
      return !v22;
    }
    uint64_t v47 = (BlueFin::GlPeTimeManager *)*((void *)this + 2);
    if (!*((_DWORD *)v47 + 644)) {
      return !v22;
    }
    BlueFin::GlPeTimeManager::GetTime(v47, 1, (__n128 *)&v96);
    v110[1] = 0;
    v110[0] = &off_270EBF4E8;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&v96, (BlueFin::GlGlnsTime *)v110);
    BlueFin::GlPeGloEphemeris::computeTk((BlueFin::GlPeGloEphemeris *)v109, a2, (BlueFin::GlGlnsTime *)v110);
    int v48 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 9);
    int v49 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 9);
    BlueFin::GlGlnsTime::ResolveAmbiguity((BlueFin::GlGlnsTime *)v109, (double)(60 * v48 * v49), (uint64_t)v108);
    BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 2), (const BlueFin::GlGlnsTime *)v108, 1, (uint64_t)v107);
    unint64_t v106 = 0;
    int v105 = &off_270EBC600;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v107, (BlueFin::GlGpsTime *)&v105);
    int v50 = v117;
    unsigned int v51 = v112;
    *(void *)&v96.f64[0] = &off_270EBC600;
    double v52 = fmod((double)v112, 1.0);
    if (v52 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v53 = v52 * 4294967300.0 + 0.5;
    unsigned int v54 = v53;
    if (v53 >= 4294967300.0) {
      unsigned int v54 = -1;
    }
    LODWORD(v96.f64[1]) = v54;
    HIDWORD(v96.f64[1]) = v51 + 604800 * v50;
    *(void *)&v96.f64[0] = &off_270EBC600;
    *(void *)&v90.f64[0] = __PAIR64__(HIDWORD(v96.f64[1]), v54);
    unsigned int v55 = ((uint64_t (*)(void))v105[4])(&v105);
    *(void *)&v84.f64[0] = __PAIR64__(v55, v106);
    BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v90, (unsigned int *)&v84, 0x93A8000u);
    unsigned int v56 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v105[3])(&v105, HIDWORD(v90.f64[0]));
    int v103 = LODWORD(v90.f64[0]);
    unsigned int v104 = v56;
    int v102 = &off_270EBC600;
    unsigned int v57 = v106;
    unsigned int v58 = HIDWORD(v106);
    char v59 = v56 | LOBYTE(v90.f64[0]);
    if (v56 | LODWORD(v90.f64[0]))
    {
      if (v106 < __PAIR64__(v56, LODWORD(v90.f64[0])))
      {
        unsigned int v58 = (__PAIR64__(v56 - HIDWORD(v106), LODWORD(v90.f64[0])) - v106) >> 32;
        unsigned int v57 = LODWORD(v90.f64[0]) - v106;
        char v59 = 1;
      }
      else
      {
        char v59 = 0;
        unsigned int v58 = (v106 - __PAIR64__(v56, LODWORD(v90.f64[0]))) >> 32;
        unsigned int v57 = v106 - LODWORD(v90.f64[0]);
      }
    }
    double v60 = (double)v57 * 2.32830644e-10;
    double v61 = v60 + (double)v58;
    double v62 = (v59 & ((v58 | v57) != 0)) != 0 ? -v61 : v60 + (double)v58;
    if ((BlueFin::GlPeEphemeris::isExpired(a2, (uint64_t)v107) & 1) != 0 || v61 >= 4838400.0) {
      return !v22;
    }
    uint64_t v101 = 0;
    float64x2_t v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    int v100 = 0;
    BlueFin::GlPeAlmMgr::GetSatPos(v62, *((void *)this + 69), (uint64_t)v111, (uint64_t)&v96, 0);
    uint64_t v95 = 0;
    float64x2_t v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    int v94 = 0;
    (*(void (**)(const BlueFin::GlPeGloEphemeris *, unsigned char *, float64x2_t *, double))(*(void *)a2 + 112))(a2, v107, &v90, 0.0);
    double v63 = ceil(v61 / 86400.0) + 7.0;
    float64x2_t v64 = vsubq_f64(v90, v96);
    double v65 = sqrt(vaddvq_f64(vmulq_f64(v64, v64)) + (*(double *)&v91 - *(double *)&v97)
                                               * (*(double *)&v91 - *(double *)&v97));
    double v66 = sqrt((*(double *)&v92 - *(double *)&v98) * (*(double *)&v92 - *(double *)&v98)+ (*((double *)&v91 + 1) - *((double *)&v97 + 1)) * (*((double *)&v91 + 1) - *((double *)&v97 + 1))+ (*((double *)&v92 + 1) - *((double *)&v98 + 1)) * (*((double *)&v92 + 1) - *((double *)&v98 + 1)));
    double v67 = *((double *)&v93 + 1);
    double v68 = *((double *)&v99 + 1);
    double v69 = vabdd_f64(*(double *)&v93, *(double *)&v99) * 1000000.0;
    uint64_t v70 = *((void *)this + 2);
    if (*(unsigned char *)(v70 + 2589))
    {
      double v71 = v63 * 1.70000005 + 60.0;
      double v72 = v63 + 60.0;
      double v73 = v63 * 6.0 + 60.0;
    }
    else
    {
      double v82 = *((double *)&v93 + 1);
      uint64_t v89 = 0;
      float64x2_t v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      int v88 = 0;
      BlueFin::GlPeAlmMgr::GetSatPos(v62 - (double)*(char *)(v70 + 2588), *((void *)this + 69), (uint64_t)v111, (uint64_t)&v84, 0);
      double v71 = v63 * 1.70000005;
      float64x2_t v74 = vsubq_f64(v90, v84);
      double v75 = sqrt(vaddvq_f64(vmulq_f64(v74, v74))+ (*(double *)&v91 - *(double *)&v85) * (*(double *)&v91 - *(double *)&v85));
      if (v65 >= v75) {
        double v65 = v75;
      }
      double v73 = v63 * 6.0;
      double v76 = sqrt((*(double *)&v92 - *(double *)&v86) * (*(double *)&v92 - *(double *)&v86)+ (*((double *)&v91 + 1) - *((double *)&v85 + 1)) * (*((double *)&v91 + 1) - *((double *)&v85 + 1))+ (*((double *)&v92 + 1) - *((double *)&v86 + 1)) * (*((double *)&v92 + 1) - *((double *)&v86 + 1)));
      if (v66 >= v76) {
        double v66 = v76;
      }
      double v77 = vabdd_f64(*(double *)&v93, *(double *)&v87) * 1000000.0;
      if (v69 >= v77) {
        double v69 = v77;
      }
      double v72 = v63;
      double v67 = v82;
    }
    double v78 = vabdd_f64(v67, v68) * 1000000000.0;
    double v79 = v73 * 1000.0;
    if (v65 < v79 && v66 < v72 && v69 < v71 && v78 < 1000.0) {
      return !v22;
    }
    int v80 = v5 + 59;
    if ((v5 + 7) >= 0xEu) {
      int v80 = 0;
    }
    GlCustomLog(14, "GlnsEph(%d)[%u]: AlmanacCrossCheck failed! Forcing verification.  AlmAgeDays:%.0lf PosDiffM(%.1lf:%.1lf) VelDiffMps(%.1lf:%.1lf) ClkErrDiffUs(%.1lf:%.1lf) ClkErrRateDiffPpb(%.1lf:%.1lf)\n", v80, *(_DWORD *)(*((void *)this + 2) + 2568), v63, v65, v79, v66, v72, v69, v71, v78, 1000.0);
    if (v7 - 64 > 0xFFFFFFC0)
    {
      *(_DWORD *)(*((void *)this + 48) + 4 * (v7 >> 5)) |= 1 << v7;
      return !v22;
    }
LABEL_93:
    DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
  }
  int v42 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 23);
  int v43 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 34);
  uint64_t v44 = 78;
  if (v7 - 1 < 0x18) {
    uint64_t v44 = 121;
  }
  GlCustomLog(13, "GlnsEph(%d,%d)[%u]: Validated unhealthy BnMsb:%u Ln:%u OsnValid:%c\n", v6, v7, v8, v42, v43, v44);
  return 1;
}

uint64_t BlueFin::GlPeGloEphemeris::GetPvt(BlueFin::GlPeEphemeris *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  double v6 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  if (fabs(v6) >= 7200.0)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 257, "GetPvt", (char)"FABS_D(dDtSecs) < 7200.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 257, "FABS_D(dDtSecs) < 7200.0");
  }
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12);
  double v8 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11);
  int v9 = (*(unsigned __int8 (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a1 + 192))(a1, 27);
  if ((v9 - 1) > 0x17) {
    return 0;
  }
  uint64_t v10 = *((void *)a1 + 9);
  if (!v10) {
    return 0;
  }
  double v11 = ScaledFloatingField - v8 * v6;
  int v12 = v9 - 1;
  int v13 = (unsigned char *)(v10 + 88 * (v9 - 1));
  int v14 = (*(unsigned __int8 (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a1 + 192))(a1, 9);
  int v15 = *v13;
  if (v15 != 255 && v15 == v14)
  {
    double v18 = *(double *)(v10 + 88 * v12 + 80);
  }
  else
  {
    *int v13 = v14;
    uint64_t v17 = v10 + 88 * v12;
    *(void *)(v17 + 8) = 0;
    *(double *)(v17 + 16) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13);
    *(double *)(v17 + 24) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 14);
    *(double *)(v17 + 32) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 15);
    *(double *)(v17 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 16);
    *(double *)(v17 + 48) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 17);
    *(double *)(v17 + 56) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
    *(double *)(v17 + 64) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 19);
    *(double *)(v17 + 72) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20);
    double v18 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 21);
    *(double *)(v17 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v18;
  }
  double v20 = v6 + v11;
  memset(v114, 0, sizeof(v114));
  memset(v113, 0, sizeof(v113));
  memset(v112, 0, sizeof(v112));
  memset(v111, 0, sizeof(v111));
  uint64_t v21 = v10 + 88 * v12;
  float64x2_t v24 = *(float64x2_t *)(v21 + 16);
  long long v23 = *(_OWORD *)(v21 + 32);
  uint64_t v22 = v21 + 16;
  long long v25 = *(_OWORD *)(v22 + 32);
  float64x2_t v108 = v24;
  *(_OWORD *)double v109 = v23;
  *(_OWORD *)&unsigned char v109[16] = v25;
  memset(v110, 0, sizeof(v110));
  float64x2_t v26 = *(float64x2_t *)(v22 + 48);
  double v27 = *(double *)(v22 - 8);
  if (v27 > v6 + v11) {
    double v28 = -60.0;
  }
  else {
    double v28 = 60.0;
  }
  __asm { FMOV            V1.2D, #2.0 }
  double v33 = *(double *)(v22 - 8);
  if (_NF == _VF)
  {
    float64x2_t v34 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v28 * 0.5), 0);
    float64x2_t v35 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28, 0);
    float64x2_t v36 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v28 / 6.0), 0);
    double v33 = *(double *)(v22 - 8);
    do
    {
      uint64_t v37 = 0;
      double v38 = 1.0
          / (vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v108, v108).f64[1]), v108.f64[0], v108.f64[0])
           + *(double *)v109 * *(double *)v109);
      double v39 = v38 * sqrt(v38);
      double v40 = *(double *)v109 * (*(double *)v109 * -5.0) * v38 + 1.0;
      double v41 = v38 * -2.63327758e10;
      double v42 = (v40 * v41 + -398600.44) * v39;
      *(void *)&v114[1] = *(void *)&v109[24];
      *((double *)&v114[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 + (v42 + (v41 + v41) * v39) * *(double *)v109;
      v114[0] = *(_OWORD *)&v109[8];
      int8x16_t v43 = (int8x16_t)vmulq_f64(*(float64x2_t *)&v109[8], (float64x2_t)xmmword_263BB48A0);
      *(float64x2_t *)((char *)&v114[1] + 8) = vaddq_f64(v26, vmlaq_n_f64((float64x2_t)vextq_s8(v43, v43, 8uLL), v108, v42 + 0.00000000531749412));
      do
      {
        v110[v37] = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v37 * 16), (float64x2_t)v114[v37], v34);
        ++v37;
      }
      while (v37 != 3);
      uint64_t v44 = 0;
      double v45 = 1.0
          / (vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(*v110, *v110).f64[1]), v110[0].f64[0], v110[0].f64[0])
           + v110[1].f64[0] * v110[1].f64[0]);
      double v46 = v45 * sqrt(v45);
      float64_t v47 = v110[1].f64[0] * (v110[1].f64[0] * -5.0) * v45 + 1.0;
      double v48 = v45 * -2.63327758e10;
      float64_t v49 = (v47 * v48 + -398600.44) * v46;
      *(float64_t *)&v113[1] = v110[2].f64[1];
      *((double *)&v113[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 + (v49 + (v48 + v48) * v46) * v110[1].f64[0];
      v113[0] = *(float64x2_t *)((char *)&v110[1] + 8);
      int8x16_t v50 = (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)&v110[1] + 8), (float64x2_t)xmmword_263BB48A0);
      *(float64x2_t *)((char *)&v113[1] + 8) = vaddq_f64(v26, vmlaq_n_f64((float64x2_t)vextq_s8(v50, v50, 8uLL), v110[0], v49 + 0.00000000531749412));
      do
      {
        v110[v44] = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v44 * 16), (float64x2_t)v113[v44], v34);
        ++v44;
      }
      while (v44 != 3);
      uint64_t v51 = 0;
      double v52 = 1.0
          / (vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(*v110, *v110).f64[1]), v110[0].f64[0], v110[0].f64[0])
           + v110[1].f64[0] * v110[1].f64[0]);
      double v53 = v52 * sqrt(v52);
      float64_t v54 = v110[1].f64[0] * (v110[1].f64[0] * -5.0) * v52 + 1.0;
      double v55 = v52 * -2.63327758e10;
      float64_t v56 = (v54 * v55 + -398600.44) * v53;
      *(float64_t *)&v112[1] = v110[2].f64[1];
      *((double *)&v112[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 + (v56 + (v55 + v55) * v53) * v110[1].f64[0];
      v112[0] = *(float64x2_t *)((char *)&v110[1] + 8);
      int8x16_t v57 = (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)&v110[1] + 8), (float64x2_t)xmmword_263BB48A0);
      *(float64x2_t *)((char *)&v112[1] + 8) = vaddq_f64(v26, vmlaq_n_f64((float64x2_t)vextq_s8(v57, v57, 8uLL), v110[0], v56 + 0.00000000531749412));
      do
      {
        v110[v51] = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v51 * 16), (float64x2_t)v112[v51], v35);
        ++v51;
      }
      while (v51 != 3);
      uint64_t v58 = 0;
      *(float64_t *)&v111[1] = v110[2].f64[1];
      double v59 = 1.0
          / (vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(*v110, *v110).f64[1]), v110[0].f64[0], v110[0].f64[0])
           + v110[1].f64[0] * v110[1].f64[0]);
      double v60 = v59 * sqrt(v59);
      float64_t v61 = ((v110[1].f64[0] * (v110[1].f64[0] * -5.0) * v59 + 1.0) * (v59 * -2.63327758e10) + -398600.44) * v60;
      *((double *)&v111[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 + (v61 + (v59 * -2.63327758e10 + v59 * -2.63327758e10) * v60) * v110[1].f64[0];
      v111[0] = *(float64x2_t *)((char *)&v110[1] + 8);
      int8x16_t v62 = (int8x16_t)vmulq_f64(*(float64x2_t *)((char *)&v110[1] + 8), (float64x2_t)xmmword_263BB48A0);
      *(float64x2_t *)((char *)&v111[1] + 8) = vaddq_f64(v26, vmlaq_n_f64((float64x2_t)vextq_s8(v62, v62, 8uLL), v110[0], v61 + 0.00000000531749412));
      do
      {
        *(float64x2_t *)((char *)&v108 + v58 * 16) = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v58 * 16), vaddq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)v114[v58], _Q1, (float64x2_t)v113[v58]), _Q1, (float64x2_t)v112[v58]), (float64x2_t)v111[v58]), v36);
        ++v58;
      }
      while (v58 != 3);
      double v33 = v28 + v33;
    }
    while (vabdd_f64(v20, v33) >= 60.0);
  }
  if (v33 == v27)
  {
    double v64 = v20 - v27;
  }
  else
  {
    *(double *)(v22 - 8) = v33;
    long long v63 = *(_OWORD *)v109;
    *(float64x2_t *)uint64_t v22 = v108;
    *(_OWORD *)(v22 + 16) = v63;
    *(_OWORD *)(v22 + 32) = *(_OWORD *)&v109[16];
    double v64 = v20 - v33;
  }
  float64x2_t v65 = v108;
  double v66 = *(double *)v109;
  float64x2_t v67 = *(float64x2_t *)&v109[8];
  double v68 = *(double *)&v109[24];
  if (v64 != 0.0)
  {
    uint64_t v69 = 0;
    double v70 = 1.0
        / (vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v108, v108).f64[1]), v108.f64[0], v108.f64[0])
         + *(double *)v109 * *(double *)v109);
    double v71 = v70 * sqrt(v70);
    double v72 = ((*(double *)v109 * (*(double *)v109 * -5.0) * v70 + 1.0) * (v70 * -2.63327758e10) + -398600.44) * v71;
    v114[0] = *(_OWORD *)&v109[8];
    *((double *)&v114[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 + (v72 + (v70 * -2.63327758e10 + v70 * -2.63327758e10) * v71) * *(double *)v109;
    *(void *)&v114[1] = *(void *)&v109[24];
    int8x16_t v73 = (int8x16_t)vmulq_f64(*(float64x2_t *)&v109[8], (float64x2_t)xmmword_263BB48A0);
    *(float64x2_t *)((char *)&v114[1] + 8) = vaddq_f64(v26, vmlaq_n_f64((float64x2_t)vextq_s8(v73, v73, 8uLL), v108, v72 + 0.00000000531749412));
    float64x2_t v74 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v64 * 0.5), 0);
    do
    {
      v110[v69] = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v69 * 16), (float64x2_t)v114[v69], v74);
      ++v69;
    }
    while (v69 != 3);
    uint64_t v75 = 0;
    double v76 = 1.0 / (v110[0].f64[1] * v110[0].f64[1] + v110[0].f64[0] * v110[0].f64[0] + v110[1].f64[0] * v110[1].f64[0]);
    double v77 = v76 * sqrt(v76);
    float64_t v78 = v110[1].f64[0] * (v110[1].f64[0] * -5.0) * v76 + 1.0;
    double v79 = v76 * -2.63327758e10;
    float64_t v80 = (v78 * v79 + -398600.44) * v77;
    double v81 = v18 + (v80 + (v79 + v79) * v77) * v110[1].f64[0];
    *(float64x2_t *)((char *)v113 + 8) = v110[2];
    float64_t v82 = v80 + 0.00000000531749412;
    *(float64_t *)long long v113 = v110[1].f64[1];
    *((double *)&v113[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v81;
    *((double *)&v113[1] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v26.f64[0] + 0.0001458423 * v110[2].f64[0] + v82 * v110[0].f64[0];
    *(double *)&v113[2] = v26.f64[1] + v110[1].f64[1] * -0.0001458423 + v82 * v110[0].f64[1];
    do
    {
      v110[v75] = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v75 * 16), (float64x2_t)v113[v75], v74);
      ++v75;
    }
    while (v75 != 3);
    uint64_t v83 = 0;
    double v84 = 1.0 / (v110[0].f64[1] * v110[0].f64[1] + v110[0].f64[0] * v110[0].f64[0] + v110[1].f64[0] * v110[1].f64[0]);
    double v85 = v84 * sqrt(v84);
    float64_t v86 = v110[1].f64[0] * (v110[1].f64[0] * -5.0) * v84 + 1.0;
    double v87 = v84 * -2.63327758e10;
    float64_t v88 = (v86 * v87 + -398600.44) * v85;
    double v89 = v18 + (v88 + (v87 + v87) * v85) * v110[1].f64[0];
    *(float64x2_t *)((char *)v112 + 8) = v110[2];
    float64_t v90 = v88 + 0.00000000531749412;
    *(float64_t *)unsigned int v112 = v110[1].f64[1];
    *((double *)&v112[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v89;
    *((double *)&v112[1] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v26.f64[0] + 0.0001458423 * v110[2].f64[0] + v90 * v110[0].f64[0];
    *(double *)&v112[2] = v26.f64[1] + v110[1].f64[1] * -0.0001458423 + v90 * v110[0].f64[1];
    float64x2_t v91 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v64, 0);
    do
    {
      v110[v83] = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v83 * 16), (float64x2_t)v112[v83], v91);
      ++v83;
    }
    while (v83 != 3);
    uint64_t v92 = 0;
    double v93 = 1.0 / (v110[0].f64[1] * v110[0].f64[1] + v110[0].f64[0] * v110[0].f64[0] + v110[1].f64[0] * v110[1].f64[0]);
    double v94 = v93 * sqrt(v93);
    float64_t v95 = ((v110[1].f64[0] * (v110[1].f64[0] * -5.0) * v93 + 1.0) * (v93 * -2.63327758e10) + -398600.44) * v94;
    *((double *)&v111[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18 + (v95 + (v93 * -2.63327758e10 + v93 * -2.63327758e10) * v94) * v110[1].f64[0];
    *(float64_t *)double v111 = v110[1].f64[1];
    *(float64x2_t *)((char *)v111 + 8) = v110[2];
    *((double *)&v111[1] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v26.f64[0]
                              + 0.0001458423 * v110[2].f64[0]
                              + (v95 + 0.00000000531749412) * v110[0].f64[0];
    *(double *)&void v111[2] = v26.f64[1] + v110[1].f64[1] * -0.0001458423 + (v95 + 0.00000000531749412) * v110[0].f64[1];
    float64x2_t v96 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v64 / 6.0), 0);
    do
    {
      *(float64x2_t *)((char *)&v108 + v92 * 16) = vmlaq_f64(*(float64x2_t *)((char *)&v108 + v92 * 16), vaddq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)v114[v92], _Q1, (float64x2_t)v113[v92]), _Q1, (float64x2_t)v112[v92]), (float64x2_t)v111[v92]), v96);
      ++v92;
    }
    while (v92 != 3);
    float64x2_t v65 = v108;
    double v66 = *(double *)v109;
    float64x2_t v67 = *(float64x2_t *)&v109[8];
    double v68 = *(double *)&v109[24];
  }
  float64x2_t v97 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
  float64x2_t v98 = vmulq_f64(v65, v97);
  float64x2_t v99 = vmulq_f64(v98, (float64x2_t)xmmword_263BB48B0);
  float64x2_t v100 = (float64x2_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL);
  int8x16_t v101 = (int8x16_t)vmlaq_n_f64(v100, v99, a4);
  *(int32x2_t *)&v99.f64[0] = vdup_n_s32(a4 != 0.0);
  v102.i64[0] = LODWORD(v99.f64[0]);
  v102.i64[1] = HIDWORD(v99.f64[0]);
  int8x16_t v103 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v102, 0x3FuLL));
  int8x16_t v104 = vbslq_s8(v103, v101, (int8x16_t)v100);
  *(int8x16_t *)a3 = vextq_s8(v104, v104, 8uLL);
  *(double *)(a3 + 16) = v66 * 1000.0;
  float64x2_t v105 = vmulq_f64(v67, v97);
  int8x16_t v106 = (int8x16_t)vmulq_f64(v105, (float64x2_t)xmmword_263BB48B0);
  *(int8x16_t *)(a3 + 24) = vbslq_s8(v103, (int8x16_t)vmlaq_n_f64(v105, (float64x2_t)vextq_s8(v106, v106, 8uLL), a4), (int8x16_t)v105);
  *(double *)(a3 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v68 * 1000.0;
  *(double *)(a3 + 48) = -v11;
  *(double *)(a3 + 56) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11);
  *(_DWORD *)(a3 + 64) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a1 + 152))(a1);
  return 1;
}

uint64_t BlueFin::GlPeGloEphemeris::GetSrc(BlueFin::GlPeGloEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 380, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 380, "false");
  }
  return dword_263BB2E60[v1];
}

uint64_t BlueFin::GlPeGloEphemeris::GetEphDataSrc(BlueFin::GlPeGloEphemeris *this)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 38);
  if (result != 1)
  {
    if ((*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 39) == 1) {
      return 3;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphemeris::computeTk(BlueFin::GlPeGloEphemeris *this, const BlueFin::GlGlnsTime *a2, BlueFin::GlGlnsTime *a3)
{
  *(void *)this = &off_270EBF4E8;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  unsigned __int16 v6 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 192))(a2, 25);
  int v7 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 192))(a2, 6);
  int v8 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 232))(a2, 6);
  int v9 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 192))(a2, 7);
  int v10 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 232))(a2, 7);
  int v11 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 192))(a2, 8);
  unsigned int v12 = 3600 * v7 * v8
      + 60 * v9 * v10
      + (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 232))(a2, 8) * v11;
  if ((*(unsigned int (**)(const BlueFin::GlGlnsTime *))(*(void *)a2 + 80))(a2))
  {
    unsigned __int8 v13 = (*(uint64_t (**)(const BlueFin::GlGlnsTime *, uint64_t))(*(void *)a2 + 192))(a2, 36);
    uint64_t result = BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)&v20, v13, v6, (double)v12);
LABEL_10:
    *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v22;
    return result;
  }
  int v15 = v6;
  if (!v6)
  {
    uint64_t result = BlueFin::GlGlnsTime::ResolveAmbiguity(a3, (double)v12, (uint64_t)&v20);
    goto LABEL_10;
  }
  double v16 = fmod((double)v12, 1.0);
  if (v16 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v17 = v16 * 4294967300.0 + 0.5;
  if (v17 >= 4294967300.0) {
    unsigned int v18 = -1;
  }
  else {
    unsigned int v18 = v17;
  }
  unsigned int v20 = v18;
  unsigned int v21 = v12 + 86400 * v15 - 86400;
  unsigned int v19 = (*(uint64_t (**)(BlueFin::GlGlnsTime *))(*(void *)a3 + 32))(a3);
  v23[0] = *((_DWORD *)a3 + 2);
  v23[1] = v19;
  BlueFin::GlTimePoint::resolveAmbiguity(&v20, v23, 0x7861F80u);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlGlnsTime *, void))(*(void *)a3 + 24))(a3, v21);
  *((_DWORD *)this + 2) = v18;
  *((_DWORD *)this + 3) = result;
  return result;
}

uint64_t BlueFin::GlPeGloEphemeris::GetIntegerScaleFactor(BlueFin::GlPeGloEphemeris *this, int a2)
{
  char v2 = a2 - 2;
  if ((a2 - 2) >= 0x26 || ((0x37FBF001FDuLL >> v2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 632, "GetIntegerScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 632, "0");
  }
  return dword_263BB4B80[v2];
}

uint64_t BlueFin::GlPeGloEphemeris::isTimeSet(BlueFin::GlPeGloEphemeris *this)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 35);
  if (result) {
    return (*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 25) != 0;
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphemeris::isHealthy(BlueFin::GlPeGloEphemeris *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 23)
    || (*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 34)
    || (*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 26) > 0xE)
  {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 27);
  if (result) {
    return (*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 27) < 0x19;
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphemeris::GetCmpUnsignedField(BlueFin::GlPeGloEphemeris *this, int a2)
{
  char v2 = (unsigned int *)*((void *)this + 2);
  switch(a2)
  {
    case 2:
      return (v2[9] >> 12) & 1;
    case 5:
      return (*v2 >> 13) & 0xFFF;
    case 6:
      return (*v2 >> 20) & 0x1F;
    case 7:
      return (*v2 >> 14) & 0x3F;
    case 8:
      unsigned int v4 = *v2;
      goto LABEL_24;
    case 9:
      return (v2[2] >> 10) & 0x7F;
    case 10:
      return (v2[8] >> 20) & 3;
    case 22:
      return (v2[2] >> 18) & 7;
    case 23:
      return (v2[2] >> 20) & 1;
    case 24:
      return (v2[4] >> 4) & 3;
    case 25:
      HIDWORD(v5) = v2[7];
      LODWORD(v5) = v2[8];
      return (v5 >> 6) >> 21;
    case 26:
      return (v2[7] >> 6) & 0xF;
    case 27:
      return (v2[8] >> 22) & 0x1F;
    case 29:
      return (unsigned __int16)v2[7] >> 11;
    case 30:
      return (*v2 >> 25) & 3;
    case 31:
      return (v2[2] >> 17) & 1;
    case 32:
      return (v2[4] >> 15) & 1;
    case 33:
      return (v2[7] >> 10) & 1;
    case 34:
      return (v2[4] >> 3) & 1;
    case 35:
      return (v2[8] >> 19) & 1;
    case 36:
      return (v2[8] >> 14) & 0x1F;
    case 38:
      unsigned int v4 = v2[9];
LABEL_24:
      uint64_t result = (v4 >> 13) & 1;
      break;
    case 39:
      uint64_t result = (v2[9] >> 11) & 1;
      break;
    default:
      DeviceFaultNotify("glpe_glnephmgr.cpp", 441, "GetCmpUnsignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 441, "0");
  }
  return result;
}

double BlueFin::GlPeGloEphemeris::ComputeAgeS(BlueFin::GlPeGloEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  int v14 = &off_270EBF4E8;
  unint64_t v15 = 0;
  BlueFin::GlPeGnssTime::GetGlns(a2, (BlueFin::GlGlnsTime *)&v14);
  unsigned int v3 = ((uint64_t (*)(void))v14[4])(&v14);
  LODWORD(v4) = v15;
  if ((double)v4 * 2.32830644e-10 + (double)v3 < 0.0) {
    return (double)(*(unsigned int (**)(BlueFin::GlPeGloEphemeris *))(*(void *)this + 88))(this) * 4.0;
  }
  BlueFin::GlPeGloEphemeris::computeTk((BlueFin::GlPeGloEphemeris *)v13, this, (BlueFin::GlGlnsTime *)&v14);
  int v6 = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 9);
  int v7 = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 232))(this, 9);
  BlueFin::GlGlnsTime::ResolveAmbiguity((BlueFin::GlGlnsTime *)v13, (double)(60 * v6 * v7), (uint64_t)&v11);
  unsigned int v8 = v15;
  unsigned int v9 = HIDWORD(v15);
  if (v12)
  {
    if (v15 < v12)
    {
      unsigned int v9 = (__PAIR64__(HIDWORD(v12) - HIDWORD(v15), v12) - v15) >> 32;
      unsigned int v8 = v12 - v15;
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      unsigned int v9 = (v15 - v12) >> 32;
      unsigned int v8 = v15 - v12;
    }
  }
  else
  {
    char v10 = 0;
  }
  double result = (double)v8 * 2.32830644e-10 + (double)v9;
  if ((v10 & ((v9 | v8) != 0)) != 0) {
    return -result;
  }
  return result;
}

void BlueFin::GlPeGnssTime::GetGlns(BlueFin::GlPeGnssTime *this, BlueFin::GlGlnsTime *a2)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v3 = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = v2;
  *((_DWORD *)a2 + 3) = v3;
  if (*((_DWORD *)this + 2) != 1)
  {
    if (BlueFin::GlPeGnssTime::m_potConversionTable)
    {
      double v5 = *(double *)(BlueFin::GlPeGnssTime::m_potConversionTable + 8);
      double v6 = fabs(v5);
      double v7 = fmod(v6, 1.0);
      double v8 = v7 * 4294967300.0 + 0.5;
      unsigned int v9 = v8;
      if (v8 >= 4294967300.0) {
        unsigned int v9 = -1;
      }
      if (v7 < 0.0 || v7 >= 1.0)
      {
        unsigned int v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        unsigned int v19 = "glpe_timepoint.h";
        int v20 = 173;
        goto LABEL_30;
      }
      unsigned int v11 = v6;
      if (v5 >= 0.0)
      {
        uint64_t v12 = v2 + v9;
        int v13 = v3 + v11 + HIDWORD(v12);
LABEL_27:
        *((_DWORD *)a2 + 2) = v12;
        *((_DWORD *)a2 + 3) = v13;
        return;
      }
      int v14 = v3 - v11;
      if (v3 > v11 || (v3 == v11 ? (BOOL v15 = v2 >= v9) : (BOOL v15 = 0), v15))
      {
        BOOL v15 = v2 >= v9;
        LODWORD(v12) = v2 - v9;
        int v17 = !v15;
        int v13 = v14 - v17;
        goto LABEL_27;
      }
      if (v11 - v3 == v2 > v9 && v9 == v2)
      {
        int v13 = 0;
        LODWORD(v12) = 0;
        goto LABEL_27;
      }
      unsigned int v18 = "!tDelta.isNegative()";
      DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
      unsigned int v19 = "glpe_datetime.h";
      int v20 = 425;
    }
    else
    {
      unsigned int v18 = "m_potConversionTable != nullptr";
      DeviceFaultNotify("glpe_timemgr.cpp", 447, "GetGlns", (char)"m_potConversionTable != nullptr");
      unsigned int v19 = "glpe_timemgr.cpp";
      int v20 = 447;
    }
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
}

uint64_t BlueFin::GlGlnsTime::ResolveAmbiguity@<X0>(BlueFin::GlGlnsTime *this@<X0>, long double a2@<D0>, uint64_t a3@<X8>)
{
  double v6 = fmod(a2, 1.0);
  double v7 = v6 * 4294967300.0 + 0.5;
  unsigned int v8 = v7;
  if (v7 >= 4294967300.0) {
    unsigned int v8 = -1;
  }
  unsigned int v15 = v8;
  if (v6 < 0.0 || v6 >= 1.0)
  {
    uint64_t v12 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v13 = 173;
    goto LABEL_11;
  }
  unsigned int v16 = a2;
  if (a2 < 0.0)
  {
    uint64_t v12 = "dCtFctS >= 0.0";
    DeviceFaultNotify("glpe_timepoint.h", 463, "GlTimePoint", (char)"dCtFctS >= 0.0");
    int v13 = 463;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", v13, v12);
  }
  unsigned int v10 = (*(uint64_t (**)(BlueFin::GlGlnsTime *))(*(void *)this + 32))(this);
  v14[0] = *((_DWORD *)this + 2);
  v14[1] = v10;
  BlueFin::GlTimePoint::resolveAmbiguity(&v15, v14, 0x15180u);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlGlnsTime *, void))(*(void *)this + 24))(this, v16);
  *(_DWORD *)(a3 + 8) = v15;
  *(_DWORD *)(a3 + 12) = result;
  *(void *)a3 = &off_270EBF4E8;
  return result;
}

uint64_t BlueFin::GlGlnsTime::ctFct2fctS(BlueFin::GlGlnsTime *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v1) {
    uint64_t v2 = &BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    uint64_t v2 = &BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  return v1 - *v2 - 504478800;
}

uint64_t BlueFin::GlGlnsTime::fct2CtFctS(BlueFin::GlGlnsTime *this, int a2)
{
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= a2
                                                           + 504478800
                                                           + BlueFin::GlWeekTowTime::m_ucCurrentLs)
    unsigned __int8 v2 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v2 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  return a2 + 504478800 + v2;
}

uint64_t BlueFin::GlGlnsTime::GlGlnsTime(uint64_t this, int a2, unsigned int a3, double a4)
{
  *(void *)this = &off_270EBF4E8;
  double v4 = a4 - floor(a4);
  if (v4 < 0.0 || v4 >= 1.0)
  {
    unsigned int v10 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    unsigned int v11 = "glpe_timepoint.h";
    int v12 = 173;
    goto LABEL_22;
  }
  double v6 = v4 * 4294967300.0 + 0.5;
  unsigned int v7 = v6;
  if (v6 >= 4294967300.0) {
    unsigned int v7 = -1;
  }
  unsigned int v8 = 86400 * a3 + 126230400 * a2 + a4 + 378162000;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= v8 + BlueFin::GlWeekTowTime::m_ucCurrentLs) {
    unsigned __int8 v9 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v9 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  *(_DWORD *)(this + 8) = v7;
  *(_DWORD *)(this + 12) = v8 + v9;
  *(void *)this = &off_270EBF4E8;
  if (!a2)
  {
    unsigned int v10 = "ucN4 >= 1";
    DeviceFaultNotify("glpe_datetime.h", 676, "GlGlnsTime", (char)"ucN4 >= 1");
    unsigned int v11 = "glpe_datetime.h";
    int v12 = 676;
    goto LABEL_22;
  }
  if (!a3)
  {
    unsigned int v10 = "usNt >= 1";
    DeviceFaultNotify("glpe_datetime.h", 677, "GlGlnsTime", (char)"usNt >= 1");
    unsigned int v11 = "glpe_datetime.h";
    int v12 = 677;
    goto LABEL_22;
  }
  if (a3 >= 0x5B6)
  {
    unsigned int v10 = "usNt <= 1461";
    DeviceFaultNotify("glpe_datetime.h", 678, "GlGlnsTime", (char)"usNt <= 1461");
    unsigned int v11 = "glpe_datetime.h";
    int v12 = 678;
    goto LABEL_22;
  }
  if (a4 < 0.0)
  {
    unsigned int v10 = "dTodS >= 0.0";
    DeviceFaultNotify("glpe_datetime.h", 679, "GlGlnsTime", (char)"dTodS >= 0.0");
    unsigned int v11 = "glpe_datetime.h";
    int v12 = 679;
    goto LABEL_22;
  }
  if (a4 >= 86400.0)
  {
    unsigned int v10 = "dTodS < 86400.0";
    DeviceFaultNotify("glpe_datetime.h", 680, "GlGlnsTime", (char)"dTodS < 86400.0");
    unsigned int v11 = "glpe_datetime.h";
    int v12 = 680;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v11, v12, v10);
  }
  return this;
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::GetPossibleOsnsForFcn(BlueFin::GlPeGloFcnOsnMgr *this, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  *a3 = 0;
  *a4 = 0;
  unsigned __int8 v8 = 1;
  while (1)
  {
    unsigned int v9 = v8;
    if (BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(this, v8) == a2) {
      break;
    }
    ++v8;
    if (v9 >= 0x18)
    {
      uint64_t v10 = 0;
      unsigned __int8 v8 = 25;
      goto LABEL_6;
    }
  }
  *a3 = v8;
  uint64_t v10 = 1;
LABEL_6:
  while (v8 <= 0x17u)
  {
    if (BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(this, ++v8) == a2)
    {
      *a4 = v8;
      return (v10 + 1);
    }
  }
  return v10;
}

unsigned __int8 *BlueFin::GlPeAlmMgr::OnInitialTime(BlueFin::GlPeAlmMgr *this, const BlueFin::GlPeGnssTime *a2)
{
  v16[0] = &off_270EBC600;
  v16[1] = 0;
  BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)v16);
  for (uint64_t i = 0; i != 7; ++i)
  {
    uint64_t v4 = *((void *)this + 54) + 48 * i;
    unsigned __int8 v11 = *(unsigned char *)(v4 + 8);
    memcpy(v15, *(const void **)v4, 4 * v11);
    __int16 v13 = 0;
    unsigned __int8 v12 = 0;
    int v14 = v15[0];
    while (1)
    {
      uint64_t result = BlueFin::GlSetIterator::operator++(&v11);
      if (v12 == v11) {
        break;
      }
      unsigned __int8 v6 = v13;
      uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, i, v13);
      LODWORD(v8) = *(_DWORD *)(AlmReference + 16);
      BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v16, (double)v8, &v17);
      *(_WORD *)(AlmReference + 88) = (v18 / 0x93A80);
      if ((v6 - 64) <= 0xC0u)
      {
        DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      }
      uint64_t v9 = *((void *)this + 54) + 48 * i;
      *(_DWORD *)(*(void *)(v9 + 24) + (((unint64_t)v6 >> 3) & 0x1C)) |= 1 << v6;
      BlueFin::GlSetBase::Remove(v9, v6);
      char v10 = *(unsigned char *)(AlmReference + 108);
      int v17 = *(_DWORD *)(AlmReference + 104);
      LOBYTE(v18) = v10;
      BlueFin::GlPeAlmMgr::Serialize((uint64_t)this, (uint64_t)&v17, 0);
    }
  }
  return result;
}

BlueFin::GlPeSvIdConverter *BlueFin::GlPeSvIdConverter::GlPeSvIdConverter(BlueFin::GlPeSvIdConverter *this, const BlueFin::GlPeGloFcnOsnMgr *a2, const BlueFin::GlSvIdSet *a3)
{
  *(_OWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 20;
  uint64_t v4 = (uint64_t *)((char *)this + 8);
  *(void *)this = a2;
  *((unsigned char *)this + 16) = 8;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((void *)this + 7) = (char *)this + 68;
  double v5 = (char *)this + 56;
  *((unsigned char *)this + 64) = 8;
  *(_OWORD *)((char *)this + 84) = 0u;
  unsigned __int8 v17 = *((unsigned char *)a3 + 8);
  memcpy(v21, *(const void **)a3, 4 * v17);
  __int16 v19 = 0;
  unsigned __int8 v18 = 0;
  int v20 = v21[0];
  BlueFin::GlSetIterator::operator++(&v17);
  while (v18 != v17)
  {
    unsigned int v6 = v19;
    unsigned __int8 v16 = v19;
    switch(BlueFin::GlImplGnss::m_aucEnabledGnssTable[BlueFin::GlSvId::s_aucSvId2gnss[v19]])
    {
      case 1:
        *(_DWORD *)(*v4 + 4 * (v19 >> 5)) |= 1 << v19;
        break;
      case 3:
        unsigned __int8 v15 = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)this, &v16, (uint64_t)v14);
        unsigned int v9 = v6 >> 5;
        if (v15 == 3) {
          uint64_t v10 = 8;
        }
        else {
          uint64_t v10 = 56;
        }
        uint64_t v11 = *(void *)((char *)this + v10);
        int v12 = 1 << v6;
        goto LABEL_21;
      case 5:
        unsigned __int8 v15 = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)this, &v16, (uint64_t)v14);
        BOOL v7 = v6 - 76 > 0x3E || ((1 << (v6 - 76)) & 0x7C0000000000001FLL) == 0;
        unint64_t v8 = v4;
        if (v7)
        {
          unint64_t v8 = (uint64_t *)v5;
          if (v15 >= 0xBu)
          {
            if (v15 > 0x28u) {
              break;
            }
            unint64_t v8 = (uint64_t *)v5;
            if (((1 << v15) & 0x1C000012000) == 0) {
              break;
            }
          }
        }
        goto LABEL_20;
      case 7:
        unsigned __int8 v15 = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)this, &v16, (uint64_t)v14);
        if (v15 > 7u || (unint64_t v8 = v4, ((1 << v15) & 0xC8) == 0)) {
          unint64_t v8 = (uint64_t *)v5;
        }
LABEL_20:
        unsigned int v9 = v6 >> 5;
        int v12 = 1 << v6;
        uint64_t v11 = *v8;
LABEL_21:
        *(_DWORD *)(v11 + 4 * v9) |= v12;
        break;
      default:
        break;
    }
    BlueFin::GlSetIterator::operator++(&v17);
  }
  return this;
}

unsigned __int8 *BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided@<X0>(BlueFin::GlMeSrdSatTrackMgr *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (const void **)((char *)this + 4000);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)v11, 0x10u, (const void **)this + 530);
  unsigned __int8 v18 = &v20;
  char v19 = 16;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v10, (int **)&v18);
  BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v18);
  v11[0] = v20;
  v11[1] = v21;
  __n128 v11[2] = v22;
  v11[3] = v23;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v12, (unsigned int *)v13, 0x10u, v4);
  unsigned __int8 v18 = &v20;
  char v19 = 16;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v12, (int **)&v18, &v10);
  BlueFin::GlSetBase::operator=((uint64_t)&v12, (uint64_t)&v18);
  v13[0] = v20;
  v13[1] = v21;
  void v13[2] = v22;
  v13[3] = v23;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v14, (unsigned int *)v15, 0x10u, &v12);
  unsigned __int8 v18 = &v20;
  char v19 = 16;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v14, (int **)&v18, (int **)this + 540);
  BlueFin::GlSetBase::operator=((uint64_t)&v14, (uint64_t)&v18);
  v15[0] = v20;
  v15[1] = v21;
  unsigned __int8 v15[2] = v22;
  v15[3] = v23;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v8, (unsigned int *)v9, 0x10u, (const void **)this + 580);
  unsigned __int8 v18 = &v20;
  char v19 = 16;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v8, (int **)&v18);
  BlueFin::GlSetBase::operator=((uint64_t)&v8, (uint64_t)&v18);
  v9[0] = v20;
  v9[1] = v21;
  __n128 v9[2] = v22;
  unsigned __int8 v9[3] = v23;
  double v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v16, (unsigned int *)v17, 0x10u, &v14);
  unsigned __int8 v18 = &v20;
  char v19 = 16;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v5, (int **)&v18, &v8);
  unsigned int v6 = (BlueFin::GlSatCarrIdSet *)BlueFin::GlSetBase::operator=((uint64_t)v16, (uint64_t)&v18);
  v17[0] = v20;
  v17[1] = v21;
  __n128 v17[2] = v22;
  _OWORD v17[3] = v23;
  BlueFin::GlSatCarrIdSet::GetSatIdSetPrimaryCarrier(v6, (uint64_t)&v18);
  if ((*(unsigned int (**)(void))(**((void **)this + 3) + 264))())
  {
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)v16, (uint64_t)&v14);
    BlueFin::GlSetBase::operator=((uint64_t)&v18, (uint64_t)&v14);
    long long v20 = v15[0];
  }
  return BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*((void **)this + 1), (uint64_t)&v18, a2);
}

unsigned __int8 *BlueFin::GlPeSatPos::Update(BlueFin::GlPeSatPos *this, const BlueFin::GlSignalIdSet *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__dst, int a13, unsigned __int8 a14, int a15, unsigned __int8 a16, __int16 a17, __int16 a18, char a19, unsigned __int8 a20,unsigned __int8 a21,unsigned __int8 a22,unsigned __int16 a23,int a24,int a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__src,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,long long a50,long long a51,uint64_t a52,uint64_t a53)
{
  a53 = *MEMORY[0x263EF8340];
  double v55 = *(const void **)a2;
  LODWORD(v53) = *(_DWORD *)(*((void *)this + 2214) + 2568);
  a21 = *((unsigned char *)a2 + 8);
  memcpy(&a25, v55, 4 * a21);
  a23 = 0;
  a22 = 0;
  a24 = a25;
  uint64_t result = BlueFin::GlSetIterator::operator++(&a21);
  if (a22 != a21)
  {
    double v57 = (double)v53;
    double v58 = (double)v53 + 13500.0;
    if ((int)((double)v53 - v58) <= 7500) {
      double v59 = (double)v53 + 13500.0;
    }
    else {
      double v59 = v58 + 15000.0;
    }
    while (1)
    {
      if (a23 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v60 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * a23);
      a20 = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * a23);
      float64_t v61 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)this + 2213) + 119744);
      LODWORD(a37) = 7;
      BYTE4(a37) = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss(v61, &a20, (uint64_t)&a37);
      if (BYTE4(a37) - 1 > 0x3E) {
        goto LABEL_89;
      }
      a14 = v60;
      a15 = a37;
      a16 = BYTE4(a37);
      unsigned int v62 = *(_DWORD *)(*((void *)this + 2214) + 2568);
      if (v62 > *((_DWORD *)this + 2))
      {
        LOBYTE(a37) = *((unsigned char *)this + 24);
        memcpy((char *)&a37 + 8, *((const void **)this + 2), 4 * a37);
        WORD1(a37) = 0;
        BYTE1(a37) = 0;
        DWORD1(a37) = DWORD2(a37);
        while (1)
        {
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a37);
          if (BYTE1(a37) == a37) {
            break;
          }
          if (((int)(v57 - *((double *)this + 24 * SWORD1(a37) + 8)) - 15000) <= 0xFFFF8ACF) {
            BlueFin::GlPeMiniEphMgr::remove((BlueFin::GlPeSatPos *)((char *)this + 8), SWORD1(a37));
          }
        }
        *((_DWORD *)this + 2) = v62;
      }
      if (v60 >= 0xBD)
      {
        DeviceFaultNotify("glpe_satpos.cpp", 454, "getMiniEphAndUpdateCache", (char)"*rtSvID <= MAX_SVID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 454, "*rtSvID <= MAX_SVID");
      }
      unsigned int v63 = *((unsigned __int8 *)this + v60 + 17512);
      if (v63 > 0x5A) {
        goto LABEL_73;
      }
      double v64 = (double *)((char *)this + 192 * *((unsigned __int8 *)this + v60 + 17512));
      double v66 = v64[8];
      float64x2_t v65 = v64 + 8;
      int v67 = (int)(v57 - v66);
      if ((v67 + 15000) >= 0x6F55) {
        break;
      }
LABEL_89:
      uint64_t result = BlueFin::GlSetIterator::operator++(&a21);
      if (a22 == a21) {
        return result;
      }
    }
    if ((v67 - 15000) >= 0xFFFF8AD0)
    {
      uint64_t vars8 = (int *)v65 - 5;
      Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 2213) + 384), *((_DWORD *)v65 - 5));
      if (Mgr)
      {
        uint64_t v69 = Mgr;
        uint64_t vars0 = (char *)(v65 - 2);
        if ((*(unsigned int (**)(void *))(*Mgr + 312))(Mgr))
        {
          uint64_t v70 = (*(uint64_t (**)(void *, char *, uint64_t))(*v69 + 112))(v69, vars0, 1);
          uint64_t v142 = v70;
          if (v70)
          {
            double v71 = (double *)((char *)this + 192 * v63);
            double v73 = v71[11];
            double v72 = v71 + 11;
            double v74 = v73;
            double v75 = v72[3];
            unsigned int v136 = v72 + 3;
            double v76 = v72[6];
            int v137 = v72 + 6;
            double v77 = v72[16];
            unsigned int v138 = v72 + 16;
            double v78 = *v65;
            float v140 = v72 - 4;
            int v141 = *((_DWORD *)v72 - 8);
            unsigned int v79 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 152))(v70) - 1;
            if (v79 > 4) {
              int v139 = 0;
            }
            else {
              int v139 = dword_263BBCBC0[v79];
            }
            int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v142 + 152))(v142);
            double v81 = v78 + 15000.0;
            if (v141 != v139
              || (float64_t v82 = (char *)this + 192 * v63, v84 = *((_DWORD *)v82 + 13), v83 = v82 + 52, v84 != v80))
            {
              for (uint64_t i = 0; i != 240; i += 80)
              {
                double v89 = (char *)&a37 + i;
                *((void *)v89 + 9) = 0;
                *(_OWORD *)double v89 = 0uLL;
                *((_OWORD *)v89 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
                *((_OWORD *)v89 + 2) = 0uLL;
                *((_OWORD *)v89 + 3) = 0uLL;
                *((_DWORD *)v89 + 16) = 0;
              }
              BlueFin::GlPeGnssSatPosTriplet::GlPeGnssSatPosTriplet(&__src, *((void *)this + 2213), *((unsigned int **)this + 2214), *vars8, *vars0, (uint64_t)&a37, v81);
              if ((_BYTE)__src) {
                BlueFin::GlPeMiniEph::create((uint64_t)(v65 - 3), (uint64_t)(v65 - 3), (uint64_t)&a37, v81);
              }
              double v90 = *v72;
              double v91 = *v136;
              double v92 = *v137;
              double v93 = *v138;
              int v94 = *(_DWORD *)v140;
LABEL_36:
              double v112 = vabdd_f64(v74, v90);
              double v113 = vabdd_f64(v75, v91);
              double v114 = vabdd_f64(v76, v92);
              double v115 = vabdd_f64(v77, v93) * 299792458.0;
              BOOL v116 = v141 != 3;
              BOOL v117 = v94 == 3;
              if (v117) {
                BOOL v116 = 1;
              }
              int v118 = *vars8;
              double v119 = 10.0;
              if (*vars8 == 2 && v117) {
                double v119 = 30.0;
              }
              if (!v116) {
                double v119 = 100.0;
              }
              if (v112 <= v119 && v113 <= v119 && v114 <= v119 && v115 <= v119) {
                goto LABEL_89;
              }
              unsigned int v123 = "BDS";
              unsigned int v124 = "GPS";
              switch(v118)
              {
                case 0:
                  break;
                case 1:
                  unsigned int v124 = "SBAS";
                  break;
                case 2:
                  unsigned int v124 = "GLNS";
                  break;
                case 3:
                  unsigned int v124 = "QZSS";
                  break;
                case 4:
                  goto LABEL_61;
                default:
                  int v125 = "<->";
                  if (v118 == 6) {
                    int v125 = "NIC";
                  }
                  unsigned int v123 = "GAL";
                  if (v118 != 5) {
                    unsigned int v123 = v125;
                  }
LABEL_61:
                  unsigned int v124 = v123;
                  break;
              }
              GlCustomLog(14, "MiniEph:  lms:%u  SV:(%4s,%2d)  Model Update: Bad fit     DeltaCoeff:[%.0lf %.0lf %.0lf %.0lf]", *(_DWORD *)(*((void *)this + 2214) + 2568), v124, *vars0, v112, v113, v114, v115);
              int v126 = *(_DWORD *)v140;
              if (*(_DWORD *)v140 == 3)
              {
                if (!(*(unsigned int (**)(uint64_t))(*(void *)v142 + 184))(v142))
                {
                  BlueFin::GlPeAsstMgr::MarkSuspectedBadDecode(*((void *)this + 2213), (uint64_t)vars8);
                  int v128 = " BE Marked Bad!";
                  goto LABEL_70;
                }
                int v126 = *(_DWORD *)v140;
              }
              if (v141 != 2 && v126 != 2) {
                goto LABEL_71;
              }
              uint64_t v127 = *((void *)this + 2213);
              int v128 = " LTO Marked Bad!";
              if ((*(unsigned char *)(v127 + 9060) & 4) == 0)
              {
                unsigned int v129 = *vars8;
                LOBYTE(a37) = *vars0;
                BlueFin::GlGnssSet::Add(v127 + 8000, v129, (unsigned __int8 *)&a37);
                GlCustomLog(14, " LTO Marked Bad!");
LABEL_71:
                GlCustomLog(14, "\n");
                goto LABEL_72;
              }
LABEL_70:
              GlCustomLog(14, v128);
              goto LABEL_71;
            }
            unsigned int v145 = v83;
            *((void *)&a41 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            a37 = 0u;
            a38 = 0u;
            a39 = 0u;
            a40 = 0u;
            LODWORD(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            BlueFin::GlPeGnssSatPos::GlPeGnssSatPos(&__src, *((void *)this + 2213), *((unsigned int **)this + 2214), *vars8, *vars0, (uint64_t)&a37, v81 + 15000.0, 0.0);
            if ((_BYTE)__src)
            {
              *float64x2_t v65 = *v65 + 15000.0;
              int v85 = a41;
              *(_DWORD *)unsigned int v145 = a41;
              unsigned int v86 = v85 - 1;
              if (v86 > 4) {
                int v87 = 0;
              }
              else {
                int v87 = dword_263BBCBC0[v86];
              }
              int v94 = *(_DWORD *)v140;
              if (*(_DWORD *)v140 != v87)
              {
                DeviceFaultNotify("glpe_satpos.cpp", 289, "propagate", (char)"m_eOrbitQual == rotSatPos.GetOrbitQuality()");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 289, "m_eOrbitQual == rotSatPos.GetOrbitQuality()");
              }
              float64_t v95 = (double *)((char *)this + 192 * v63);
              double v96 = v95[10];
              double v97 = v95[9] - *(double *)&a37;
              *((void *)v95 + 9) = a37;
              v95[10] = v97;
              double v90 = v96 - v97;
              *double v72 = v90;
              double v98 = v95[13];
              double v99 = *(double *)&a38;
              double v100 = v95[12] - *((double *)&a37 + 1);
              v95[12] = *((double *)&a37 + 1);
              v95[13] = v100;
              double v91 = v98 - v100;
              *unsigned int v136 = v91;
              double v101 = v95[16];
              double v102 = v95[15] - v99;
              v95[15] = v99;
              v95[16] = v102;
              double v92 = v101 - v102;
              double *v137 = v92;
              double v103 = v95[19];
              double v104 = *(double *)&a39;
              double v105 = v95[18] - *((double *)&a38 + 1);
              v95[18] = *((double *)&a38 + 1);
              v95[19] = v105;
              double v106 = v103 - v105;
              double v107 = v95[21];
              double v108 = v95[22];
              v95[20] = v106;
              v95[21] = v104;
              v95[22] = v107 - v104;
              v95[23] = v108 - (v107 - v104);
              double v109 = v95[25];
              double v93 = *(double *)&a40;
              double v110 = v95[24] - *((double *)&a39 + 1);
              v95[24] = *((double *)&a39 + 1);
              v95[25] = v110;
              v95[26] = v109 - v110;
              double v111 = *v138;
              *unsigned int v138 = v93;
              v95[28] = v111 - v93;
              goto LABEL_36;
            }
          }
        }
      }
    }
LABEL_72:
    BlueFin::GlPeMiniEphMgr::remove((BlueFin::GlPeSatPos *)((char *)this + 8), v63);
LABEL_73:
    __src = (char *)&a36 + 4;
    LOBYTE(a36) = 3;
    *(void *)((char *)&a36 + 4) = 0;
    HIDWORD(a36) = 0;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)this + 16, (int **)&__src);
    LOBYTE(a37) = a36;
    memcpy((char *)&a37 + 8, __src, 4 * a36);
    WORD1(a37) = 0;
    BYTE1(a37) = 0;
    DWORD1(a37) = DWORD2(a37);
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a37);
    unsigned int v130 = SWORD1(a37);
    if (SWORD1(a37) < 91)
    {
      uint64_t v133 = 0;
      a50 = 0u;
      a51 = 0u;
      a48 = 0u;
      a49 = 0u;
      a46 = 0u;
      a47 = 0u;
      a44 = 0u;
      a45 = 0u;
      a42 = 0u;
      a43 = 0u;
      a40 = 0u;
      a41 = 0u;
      a38 = 0u;
      a39 = 0u;
      a37 = 0u;
      do
      {
        unsigned int v134 = (char *)&a37 + v133;
        *((void *)v134 + 9) = 0;
        *(_OWORD *)unsigned int v134 = 0uLL;
        *((_OWORD *)v134 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
        *((_OWORD *)v134 + 2) = 0uLL;
        *((_OWORD *)v134 + 3) = 0uLL;
        v133 += 80;
        *((_DWORD *)v134 + 16) = 0;
      }
      while (v133 != 240);
      if (v130 >= 0x5B)
      {
        DeviceFaultNotify("glpe_satpos.cpp", 970, "create", (char)"iIndex >= 0 && iIndex < MAX_AID_SATS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 970, "iIndex >= 0 && iIndex < MAX_AID_SATS");
      }
      BlueFin::GlPeGnssSatPosTriplet::GlPeGnssSatPosTriplet(&__src, *((void *)this + 2213), *((unsigned int **)this + 2214), a15, a16, (uint64_t)&a37, v59);
      if ((_BYTE)__src)
      {
        BlueFin::GlPeMiniEph::create((uint64_t)this + 192 * v130 + 40, (uint64_t)&a14, (uint64_t)&a37, v59);
        *(_DWORD *)(*((void *)this + 2) + 4 * (v130 >> 5)) |= 1 << v130;
        *((unsigned char *)this + a14 + 17512) = v130;
      }
    }
    else
    {
      uint64_t v131 = "BDS";
      int v132 = "GPS";
      switch(a15)
      {
        case 0:
          break;
        case 1:
          int v132 = "SBAS";
          break;
        case 2:
          int v132 = "GLNS";
          break;
        case 3:
          int v132 = "QZSS";
          break;
        case 4:
          goto LABEL_87;
        default:
          uint64_t v135 = "<->";
          if (a15 == 6) {
            uint64_t v135 = "NIC";
          }
          uint64_t v131 = "GAL";
          if (a15 != 5) {
            uint64_t v131 = v135;
          }
LABEL_87:
          int v132 = v131;
          break;
      }
      GlCustomLog(14, "MiniEph:  lms:%u  SV:(%4s,%2d)  Slot:--  No slots available!\n", v62, v132, a16);
    }
    goto LABEL_89;
  }
  return result;
}

uint64_t BlueFin::GlSetBase::OperatorBinaryInversion(uint64_t this, int **a2)
{
  uint64_t v2 = *(unsigned __int8 *)(this + 8);
  if (v2 != *((unsigned __int8 *)a2 + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 525, "OperatorBinaryInversion", (char)"m_ucUlongSize == otResult.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 525, "m_ucUlongSize == otResult.m_ucUlongSize");
  }
  if (*(unsigned char *)(this + 8))
  {
    unsigned int v3 = *(int **)this;
    uint64_t v4 = *a2;
    do
    {
      int v5 = *v3++;
      *v4++ = ~v5;
      --v2;
    }
    while (v2);
  }
  return this;
}

double BlueFin::GlPeMiniEph::create(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(double *)(a1 + 24) = a4;
  int v4 = *(_DWORD *)(a3 + 64);
  *(_DWORD *)(a1 + 12) = v4;
  unsigned int v5 = v4 - 1;
  if (v5 > 4) {
    int v6 = 0;
  }
  else {
    int v6 = dword_263BBCBC0[v5];
  }
  *(_DWORD *)(a1 + 16) = v6;
  int v7 = *(_DWORD *)(a3 + 144) - 1;
  if (v7 > 4) {
    int v8 = 0;
  }
  else {
    int v8 = dword_263BBCBC0[v7];
  }
  if (v6 != v8)
  {
    int v12 = "m_eOrbitQual == raotSatPos[1].GetOrbitQuality()";
    DeviceFaultNotify("glpe_satpos.cpp", 253, "create", (char)"m_eOrbitQual == raotSatPos[1].GetOrbitQuality()");
    int v13 = 253;
    goto LABEL_15;
  }
  int v9 = *(_DWORD *)(a3 + 224) - 1;
  if (v9 > 4) {
    int v10 = 0;
  }
  else {
    int v10 = dword_263BBCBC0[v9];
  }
  if (v6 != v10)
  {
    int v12 = "m_eOrbitQual == raotSatPos[2].GetOrbitQuality()";
    DeviceFaultNotify("glpe_satpos.cpp", 254, "create", (char)"m_eOrbitQual == raotSatPos[2].GetOrbitQuality()");
    int v13 = 254;
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", v13, v12);
  }
  *(void *)(a1 + 32) = *(void *)(a3 + 160);
  *(double *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)(a3 + 80) - *(double *)(a3 + 160);
  *(double *)(a1 + 48) = *(double *)a3 + *(double *)(a3 + 80) * -2.0 + *(double *)(a3 + 160);
  *(void *)(a1 + 56) = *(void *)(a3 + 168);
  *(double *)(a1 + 64) = *(double *)(a3 + 88) - *(double *)(a3 + 168);
  *(double *)(a1 + 72) = *(double *)(a3 + 8) + *(double *)(a3 + 88) * -2.0 + *(double *)(a3 + 168);
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a3 + 176);
  *(double *)(a1 + 88) = *(double *)(a3 + 96) - *(double *)(a3 + 176);
  *(double *)(a1 + 96) = *(double *)(a3 + 16) + *(double *)(a3 + 96) * -2.0 + *(double *)(a3 + 176);
  *(void *)(a1 + 104) = *(void *)(a3 + 184);
  *(double *)(a1 + 112) = *(double *)(a3 + 104) - *(double *)(a3 + 184);
  *(double *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)(a3 + 24) + *(double *)(a3 + 104) * -2.0 + *(double *)(a3 + 184);
  *(void *)(a1 + 128) = *(void *)(a3 + 192);
  *(double *)(a1 + 136) = *(double *)(a3 + 112) - *(double *)(a3 + 192);
  *(double *)(a1 + 144) = *(double *)(a3 + 32) + *(double *)(a3 + 112) * -2.0 + *(double *)(a3 + 192);
  *(void *)(a1 + 152) = *(void *)(a3 + 200);
  *(double *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)(a3 + 120) - *(double *)(a3 + 200);
  *(double *)(a1 + 168) = *(double *)(a3 + 40) + *(double *)(a3 + 120) * -2.0 + *(double *)(a3 + 200);
  *(void *)(a1 + 176) = *(void *)(a3 + 128);
  double result = *(double *)(a3 + 128) - *(double *)(a3 + 48);
  *(double *)(a1 + 184) = result;
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::SetSignalAiding(BlueFin::GlPeAlmMgr *this, const void **a2, BlueFin::GlMeSignalAidInfo *a3, const BOOL *a4, BlueFin::GlMeSignalAidInfo *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, long long a18, long long a19, uint64_t a20,unsigned int a21,char a22,void *a23,unsigned __int8 a24,uint64_t a25,int a26,int a27,int a28,float a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,uint64_t a37,uint64_t a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,uint64_t a50,uint64_t a51,long long *a52,unsigned int *a53,long long a54,long long a55,uint64_t a56,uint64_t a57,long long a58,long long a59)
{
  STACK[0x11F8] = *MEMORY[0x263EF8340];
  if (!a3 || !a4)
  {
    DeviceFaultNotify("glpe_almmgr.cpp", 3166, "SetSignalAiding", (char)"paotGnssSigAid != 0 && abIncludeGnss != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", 3166, "paotGnssSigAid != 0 && abIncludeGnss != 0");
  }
  *((_WORD *)a5 + 7) = 0;
  v240 = (long long *)((char *)&a18 + 4);
  a17 = (char *)&a18 + 4;
  LOBYTE(a18) = 8;
  *(long long *)((char *)&a18 + 4) = 0u;
  *(long long *)((char *)&a19 + 4) = 0u;
  uint64_t v55 = *((unsigned __int8 *)a2 + 8);
  LOBYTE(STACK[0xBC0]) = v55;
  memcpy(&STACK[0xBC8], *a2, 4 * v55);
  LOWORD(STACK[0xBC2]) = 0;
  LOBYTE(STACK[0xBC1]) = 0;
  LODWORD(STACK[0xBC4]) = STACK[0xBC8];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
  while (LOBYTE(STACK[0xBC1]) != LOBYTE(STACK[0xBC0]))
  {
    if (LOWORD(STACK[0xBC2]) - 33 >= 0xFFFFFFE0) {
      *(_DWORD *)((char *)&a18 + (((unint64_t)LOWORD(STACK[0xBC2]) >> 3) & 0x1C) + 4) |= 1 << LOWORD(STACK[0xBC2]);
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
  }
  char v241 = a3;
  v242 = a4;
  v239 = a5;
  v243 = this;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)var18_4, 8u, (const void **)&a17);
  STACK[0xBC0] = (unint64_t)&STACK[0xBCC];
  LOBYTE(STACK[0xBC8]) = 8;
  *(_OWORD *)&STACK[0xBCC] = 0u;
  *(_OWORD *)&STACK[0xBDC] = 0u;
  char v238 = (BlueFin::GlPeAlmMgr *)((char *)this + 36720);
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, (int **)&STACK[0xBC0], (int **)this + 4590);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&STACK[0xBC0]);
  float64_t v56 = this;
  v237 = (char *)this + 36704;
  long long v57 = *(_OWORD *)&STACK[0xBDC];
  var18_4[0] = *(_OWORD *)&STACK[0xBCC];
  var18_4[1] = v57;
  a52 = &a39;
  a53 = (unsigned int *)&a54 + 1;
  LOBYTE(a54) = 8;
  *(long long *)((char *)&a54 + 4) = 0u;
  *(long long *)((char *)&a55 + 4) = 0u;
  a39 = 0u;
  a40 = 0u;
  a41 = 0u;
  a42 = 0u;
  a43 = 0u;
  a44 = 0u;
  a45 = 0u;
  a46 = 0u;
  a47 = 0u;
  a48 = 0u;
  a49 = 0u;
  double v58 = (BlueFin::GlSetBase *)(*((void *)this + 54) + 24);
  *(long long *)((char *)&a49 + 12) = 0u;
  if (!BlueFin::GlSetBase::HasAny(v58)) {
    goto LABEL_80;
  }
  float64_t v56 = this;
  if (!BlueFin::GlPeAlmMgr::Alm2Plane(this, v59, v60, v61, v62, v63, v64, v65, v235, (uint64_t)v237, v238, SHIDWORD(v238), v239, HIDWORD(v239), (char)&a18 + 4))goto LABEL_80; {
  if (!BlueFin::GlSetBase::HasAny(v238) || v237[320] != (*(_DWORD *)(*((void *)this + 56) + 2576) != 0))
  }
    goto LABEL_17;
  if (v237[320] && BlueFin::GlSetBase::Cnt(v238) > 2u) {
    goto LABEL_80;
  }
  if (!v237[8]) {
    goto LABEL_17;
  }
  STACK[0x11A0] = (unint64_t)&STACK[0x11AC];
  LOBYTE(STACK[0x11A8]) = 8;
  *(_OWORD *)&STACK[0x11AC] = 0u;
  *(_OWORD *)&STACK[0x11BC] = 0u;
  if (!BlueFin::GlSetBase::operator==((uint64_t)&a17, (uint64_t)this + 37032))
  {
    BlueFin::GlSvIdSet::operator~((const void **)this + 4629, (uint64_t)&a58);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a30, (unsigned int *)&a30 + 3, 8u, (const void **)&a17);
    STACK[0xBC0] = (unint64_t)&STACK[0xBCC];
    LOBYTE(STACK[0xBC8]) = 8;
    *(_OWORD *)&STACK[0xBCC] = 0u;
    *(_OWORD *)&STACK[0xBDC] = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&a30, (int **)&STACK[0xBC0], (int **)&a58);
    BlueFin::GlSetBase::operator=((uint64_t)&a30, (uint64_t)&STACK[0xBC0]);
    long long v72 = *(_OWORD *)&STACK[0xBDC];
    *(long long *)((char *)&a30 + 12) = *(_OWORD *)&STACK[0xBCC];
    *(long long *)((char *)&a31 + 12) = v72;
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x11A0], (uint64_t)&a30);
    long long v73 = *(long long *)((char *)&a31 + 12);
    *(_OWORD *)&STACK[0x11AC] = *(long long *)((char *)&a30 + 12);
    *(_OWORD *)&STACK[0x11BC] = v73;
  }
  unint64_t v74 = STACK[0x11A0];
  float64_t v56 = this;
  if (*(_DWORD *)STACK[0x11A0]) {
    goto LABEL_17;
  }
  unint64_t v232 = LOBYTE(STACK[0x11A8]);
  if (v232 <= 1) {
    goto LABEL_80;
  }
  if (*(_DWORD *)(v74 + 4))
  {
LABEL_17:
    if (*(_DWORD *)__src)
    {
LABEL_18:
      if (*(_DWORD *)(*((void *)v56 + 56) + 2576))
      {
        LOBYTE(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v246;
        memcpy((char *)&a30 + 8, __src, 4 * v246);
        WORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        BYTE1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        DWORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = DWORD2(a30);
        while (1)
        {
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
          if (BYTE1(a30) == a30) {
            break;
          }
          LOBYTE(STACK[0xBC0]) = BYTE2(a30);
          BlueFin::GlPeAlmSvIdList::Add((uint64_t)&a39, &STACK[0xBC0]);
        }
        uint64_t v75 = 0;
        STACK[0xBA8] = 0;
        a58 = 0u;
        a59 = 0u;
        *(_OWORD *)&STACK[0xB80] = 0u;
        *(_OWORD *)&STACK[0xB90] = 0u;
        LODWORD(STACK[0xBA0]) = 0;
        *(_OWORD *)&STACK[0xCA0] = 0u;
        *(_OWORD *)&STACK[0xCB0] = 0u;
        *(_OWORD *)&STACK[0xC80] = 0u;
        *(_OWORD *)&STACK[0xC90] = 0u;
        *(_OWORD *)&STACK[0xC60] = 0u;
        *(_OWORD *)&STACK[0xC70] = 0u;
        *(_OWORD *)&STACK[0xC40] = 0u;
        *(_OWORD *)&STACK[0xC50] = 0u;
        *(_OWORD *)&STACK[0xC20] = 0u;
        *(_OWORD *)&STACK[0xC30] = 0u;
        *(_OWORD *)&STACK[0xC00] = 0u;
        *(_OWORD *)&STACK[0xC10] = 0u;
        *(_OWORD *)&STACK[0xBE0] = 0u;
        *(_OWORD *)&STACK[0xBF0] = 0u;
        *(_OWORD *)&STACK[0xBC0] = 0u;
        *(_OWORD *)&STACK[0xBD0] = 0u;
        do
        {
          double v76 = (char *)&STACK[0xBC0] + v75;
          *double v76 = 0;
          *((_DWORD *)v76 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          v75 += 8;
        }
        while (v75 != 256);
        WORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        BYTE1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        DWORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = DWORD2(a30);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
        if (BYTE1(a30) != a30)
        {
          int v77 = 0;
          double v78 = 0.0;
          double v79 = 0.0;
          double v80 = 0.0;
          do
          {
            if (BlueFin::GlPeAlmMgr::GetSatPos((uint64_t)v56, 0, BYTE2(a30), *(_DWORD *)(*((void *)v56 + 56) + 2568), (uint64_t)&a58))
            {
              double v80 = v80 + *(double *)&a58;
              double v79 = v79 + *((double *)&a58 + 1);
              double v78 = v78 + *(double *)&a59;
              ++v77;
            }
            float64_t v56 = v243;
            BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
          }
          while (BYTE1(a30) != a30);
          if (v77)
          {
            unint64_t v82 = 0;
            double v83 = (double)v77;
            double v84 = v80 / (double)v77;
            double v85 = v79 / (double)v77;
            unsigned int v86 = 1;
            unsigned int v87 = BYTE2(a30);
            double v88 = v78 / v83;
            do
            {
              if ((((unint64_t)a53[v86 >> 5] >> (v86 & 0x1F)) & 1) == 0
                && BlueFin::GlPeAlmMgr::GetSatPos((uint64_t)v243, 0, v87, *(_DWORD *)(*((void *)v243 + 56) + 2568), (uint64_t)&a58))
              {
                double v89 = *(double *)&a58 - v84;
                double v90 = *((double *)&a58 + 1) - v85;
                double v91 = *(double *)&a59 - v88;
                double v92 = &STACK[0xBC0] + (int)v82;
                *(unsigned char *)double v92 = v86;
                *((_DWORD *)v92 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (int)sqrt(v90 * v90 + v89 * v89 + v91 * v91);
                unint64_t v82 = (v82 + 1);
              }
              ++v86;
            }
            while (v86 != 33);
            BlueFin::GlStdLib::QsortImpl((char *)&STACK[0xBC0], (void *)v82, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&STACK[0x11A0], v81);
            float64_t v56 = v243;
            if ((int)v82 >= 1)
            {
              uint64_t v93 = v82;
              int v94 = &STACK[0xBC0];
              do
              {
                BlueFin::GlPeAlmSvIdList::Add((uint64_t)&a39, v94++);
                --v93;
              }
              while (v93);
            }
          }
        }
        goto LABEL_80;
      }
      *(void *)&a58 = (char *)&a58 + 12;
      BYTE8(a58) = 2;
      *(void *)((char *)&a58 + 12) = 0;
      BlueFin::GlPeAlmMgr::Alm2Plane(v56, (uint64_t)__src, v66, v67, v68, v69, v70, v71, v236, (uint64_t)v237, v238, SHIDWORD(v238), v239, HIDWORD(v239), (char)v240);
      double v97 = (const void **)((char *)this + 37032);
      *(_OWORD *)&STACK[0xC60] = 0u;
      *(_OWORD *)&STACK[0xC70] = 0u;
      *(_OWORD *)&STACK[0xC40] = 0u;
      *(_OWORD *)&STACK[0xC50] = 0u;
      *(_OWORD *)&STACK[0xC20] = 0u;
      *(_OWORD *)&STACK[0xC30] = 0u;
      *(_OWORD *)&STACK[0xC00] = 0u;
      *(_OWORD *)&STACK[0xC10] = 0u;
      *(_OWORD *)&STACK[0xBE0] = 0u;
      *(_OWORD *)&STACK[0xBF0] = 0u;
      *(_OWORD *)&STACK[0xBC0] = 0u;
      *(_OWORD *)&STACK[0xBD0] = 0u;
      uint64_t v98 = *(void *)v237;
      uint64_t v99 = *(void *)v237 + 16;
      uint64_t v100 = 1;
      double v101 = (char *)a17;
      do
      {
        uint64_t v102 = v98 + ((v100 - 1) << 6);
        uint64_t v103 = *(unsigned __int8 *)(v102 + 40);
        if (*(unsigned char *)(v102 + 40))
        {
          double v104 = *(unsigned __int8 **)(v102 + 8);
          uint64_t v105 = a58;
          unsigned int v106 = v103 + 1;
          double v107 = v104;
          double v108 = (_DWORD *)v99;
          uint64_t v109 = v103;
          do
          {
            unsigned int v111 = *v107++;
            char v110 = v111;
            if (((unint64_t)*(unsigned int *)&v101[((unint64_t)v111 >> 3) & 0x1C] >> (v111 & 0x1F)))
            {
              if (v100 - 64 <= 0xFFFFFFC0)
              {
                DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
              }
              *(_DWORD *)(v105 + 4 * (v100 >> 5)) |= 1 << v100;
            }
            int v112 = (int)(v106 - 2) % (int)v103;
            unsigned __int8 v113 = v104[v112];
            uint64_t v114 = v106 % v103;
            uint64_t v115 = v98 + ((v100 - 1) << 6);
            int v116 = *(_DWORD *)(v115 + 4 * v112 + 16) - *v108;
            double v117 = (double)v116 / 360.0;
            double v118 = ceil(v117 + -0.5);
            if (v117 >= 0.0) {
              double v118 = 0.0;
            }
            double v119 = floor(v117 + 0.5);
            if (v117 > 0.0) {
              double v120 = v119;
            }
            else {
              double v120 = v118;
            }
            double v121 = (double)(*(_DWORD *)(v115 + 4 * v114 + 16) - *v108);
            double v122 = v121 / 360.0;
            if (v121 / 360.0 <= 0.0)
            {
              double v123 = 0.0;
              if (v121 / 360.0 < 0.0) {
                double v123 = ceil(v122 + -0.5);
              }
            }
            else
            {
              double v123 = floor(v122 + 0.5);
            }
            if ((int)fabs(v121 + v123 * -360.0) < (int)fabs((double)v116 - v120 * 360.0)) {
              unsigned __int8 v113 = v104[v114];
            }
            *((unsigned char *)&STACK[0xBC0] + (v110 - 1)) = v113;
            ++v108;
            ++v106;
            --v109;
          }
          while (v109);
        }
        ++v100;
        v99 += 64;
      }
      while (v100 != 7);
      LOBYTE(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a18;
      memcpy((char *)&a30 + 8, v101, 4 * a18);
      WORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      BYTE1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      DWORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = DWORD2(a30);
      while (1)
      {
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
        if (BYTE1(a30) == a30) {
          break;
        }
        LOBYTE(STACK[0x11A0]) = BYTE2(a30);
        BlueFin::GlPeAlmSvIdList::Add((uint64_t)&a39, &STACK[0x11A0]);
      }
      LOBYTE(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((unsigned char *)v97 + 8);
      memcpy((char *)&a30 + 8, *v97, 4 * a30);
      WORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      BYTE1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      DWORD1(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = DWORD2(a30);
      while (1)
      {
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
        if (BYTE1(a30) == a30) {
          break;
        }
        LOBYTE(STACK[0x11A0]) = BYTE2(a30);
        BlueFin::GlPeAlmSvIdList::Add((uint64_t)&a39, &STACK[0x11A0]);
      }
      unsigned int v129 = 0;
      unsigned int v130 = &a53[a54 - 1];
      do
      {
        if (*v130)
        {
          unsigned int v131 = *v130 - (((*v130 >> 1) & 0x5B6DB6DB) + ((*v130 >> 2) & 0x9249249));
          unsigned int v129 = ((v131 + (v131 >> 3)) & 0xC71C71C7) + v129 - 63 * (((v131 + (v131 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v130;
      }
      while (v130 >= a53);
      uint64_t v132 = v129;
      if ((_BYTE)v129)
      {
        uint64_t v133 = 0;
        do
        {
          LOBYTE(a3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((unsigned char *)&STACK[0xBC0] + *((unsigned __int8 *)a52 + v133) - 1);
          BlueFin::GlPeAlmSvIdList::Add((uint64_t)&a39, &a30);
          ++v133;
        }
        while (v132 != v133);
      }
      BlueFin::GlPeAlmMgr::ChooseInitialOppPairs(v243, (uint64_t)&a39, &a58, v124, v125, v126, v127, v128);
LABEL_79:
      float64_t v56 = v243;
      goto LABEL_80;
    }
    if (v246 >= 2uLL)
    {
      if (*((_DWORD *)__src + 1)) {
        goto LABEL_18;
      }
      uint64_t v95 = 2;
      while (v246 != v95)
      {
        if (*((_DWORD *)__src + v95++))
        {
          if (v95 - 1 < (unint64_t)v246) {
            goto LABEL_18;
          }
          break;
        }
      }
    }
    STACK[0xBC0] = (unint64_t)&STACK[0xBCC];
    LOBYTE(STACK[0xBC8]) = 2;
    STACK[0xBCC] = 0;
    BlueFin::GlPeAlmMgr::ChooseInitialOppPairs(v56, (uint64_t)&a39, &STACK[0xBC0], v67, v68, v69, v70, v71);
    goto LABEL_79;
  }
  uint64_t v233 = 2;
  while (v232 != v233)
  {
    if (*(_DWORD *)(v74 + 4 * v233++))
    {
      if (v233 - 1 < v232) {
        goto LABEL_17;
      }
      break;
    }
  }
LABEL_80:
  if (*a53) {
    goto LABEL_81;
  }
  if (a54 > 1uLL)
  {
    if (a53[1])
    {
LABEL_81:
      uint64_t v134 = (uint64_t)v56 + 36768;
LABEL_82:
      BlueFin::GlPeAlmSvIdList::operator=(v134, (uint64_t)&a39);
      goto LABEL_92;
    }
    uint64_t v135 = 2;
    while (a54 != v135)
    {
      if (a53[v135++])
      {
        uint64_t v134 = (uint64_t)v56 + 36768;
        if (v135 - 1 < (unint64_t)a54) {
          goto LABEL_82;
        }
        goto LABEL_91;
      }
    }
  }
  uint64_t v134 = (uint64_t)v56 + 36768;
LABEL_91:
  BlueFin::GlPeAlmSvIdList::operator=((uint64_t)&a39, v134);
LABEL_92:
  *(void *)&a58 = (char *)&a58 + 12;
  BYTE8(a58) = 8;
  *(long long *)((char *)&a58 + 12) = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  *(long long *)((char *)&a59 + 12) = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a30, (unsigned int *)&a30 + 3, 8u, (const void **)&a53);
  STACK[0xBC0] = (unint64_t)&STACK[0xBCC];
  LOBYTE(STACK[0xBC8]) = 8;
  *(_OWORD *)&STACK[0xBCC] = 0u;
  *(_OWORD *)&STACK[0xBDC] = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&a30, (int **)&STACK[0xBC0], (int **)&a58);
  BlueFin::GlSetBase::operator=((uint64_t)&a30, (uint64_t)&STACK[0xBC0]);
  unsigned int v138 = 0;
  int32x4_t v139 = *(int32x4_t *)&STACK[0xBDC];
  *(long long *)((char *)&a30 + 12) = *(_OWORD *)&STACK[0xBCC];
  *(long long *)((char *)&a31 + 12) = (__int128)v139;
  float v140 = (_DWORD *)(a30 + 4 * BYTE8(a30) - 4);
  int v141 = v243;
  uint64_t v142 = (uint64_t)v239;
  do
  {
    if (*v140)
    {
      unsigned int v143 = *v140 - (((*v140 >> 1) & 0x5B6DB6DB) + ((*v140 >> 2) & 0x9249249));
      unsigned int v138 = ((v143 + (v143 >> 3)) & 0xC71C71C7) + v138 - 63 * (((v143 + (v143 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v140;
  }
  while ((unint64_t)v140 >= (unint64_t)a30);
  if ((v138 & 0xE0) == 0)
  {
    unsigned int v144 = 1;
    LOBYTE(STACK[0xBC0]) = 1;
    do
    {
      BlueFin::GlPeAlmSvIdList::Add((uint64_t)&a39, &STACK[0xBC0]);
      LOBYTE(STACK[0xBC0]) = v144 + 1;
      BOOL v173 = v144++ > 0x1F;
    }
    while (!v173);
  }
  uint64_t v145 = 0;
  uint64_t v244 = 0x4200000004;
  a35 = 0u;
  a36 = 0u;
  a33 = 0u;
  a34 = 0u;
  a31 = 0u;
  a32 = 0u;
  a30 = 0u;
  do
  {
    int v146 = (char *)&a30 + v145;
    *int v146 = 0;
    *((_DWORD *)v146 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    v145 += 8;
  }
  while (v145 != 112);
  if (v242[2])
  {
    if (*(_DWORD *)(*((void *)v243 + 55) + 100) == -1)
    {
      LODWORD(v148) = 0;
      int v149 = 0x3FFF;
    }
    else
    {
      int v147 = 0;
      unint64_t v148 = 0;
      LOBYTE(STACK[0xBC0]) = 52;
      int v149 = 0x3FFF;
      do
      {
        float v150 = BlueFin::GlPeAsstMgr::ComputeElevation(*((void *)v243 + 55), (unsigned __int8 *)&STACK[0xBC0], (uint64_t)&v244 + 4, 0xFF9222FF, 0);
        float v152 = fmodf(v150, 4295000000.0);
        if (v150 <= 4295000000.0) {
          float v152 = v150;
        }
        if (v152 < -4295000000.0) {
          float v152 = -fmodf(-v152, 4295000000.0);
        }
        if (v152 < 0.0) {
          unsigned int v153 = -(float)-v152;
        }
        else {
          unsigned int v153 = v152;
        }
        if ((v153 & 0x80000000) != 0)
        {
          if (v153 != -90) {
            (*(void (**)(void, unint64_t *))(**((void **)v243 + 57) + 64))(*((void *)v243 + 57), &STACK[0xBC0]);
          }
        }
        else
        {
          __int16 v154 = (char *)&a30 + 8 * (int)v148;
          char v155 = STACK[0xBC0];
          *__int16 v154 = STACK[0xBC0];
          *((_DWORD *)v154 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 90 - v153;
          unint64_t v148 = (v148 + 1);
          ++v147;
          v149 &= ~(1 << (v155 - 52));
        }
        unsigned int v156 = ++LOBYTE(STACK[0xBC0]);
      }
      while (v156 < 0x42);
      BlueFin::GlStdLib::QsortImpl((char *)&a30, (void *)v148, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&STACK[0xBC0], v151);
      int v141 = v243;
      if (*(_DWORD *)(*((void *)v243 + 55) + 100) != -1)
      {
        LODWORD(STACK[0xBC8]) = v149;
        LODWORD(STACK[0xBC0]) = 1;
        LODWORD(STACK[0xBC4]) = v149;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
        uint64_t v142 = (uint64_t)v239;
        if (LOBYTE(STACK[0xBC1]) == LOBYTE(STACK[0xBC0])) {
          goto LABEL_137;
        }
        unint64_t v157 = 0;
        do
        {
          LOBYTE(a58) = LOBYTE(STACK[0xBC2]) + 52;
          float v158 = BlueFin::GlPeAsstMgr::ComputeElevation(*((void *)v243 + 55), (unsigned __int8 *)&a58, (uint64_t)&v244, 0xFF9222FF, 0);
          float v159 = fmodf(v158, 4295000000.0);
          if (v158 <= 4295000000.0) {
            float v159 = v158;
          }
          if (v159 < -4295000000.0) {
            float v159 = -fmodf(-v159, 4295000000.0);
          }
          if (v159 < 0.0) {
            unsigned int v160 = -(float)-v159;
          }
          else {
            unsigned int v160 = v159;
          }
          if ((v160 & 0x80000000) != 0)
          {
            if (v160 != -90) {
              (*(void (**)(void, long long *))(**((void **)v243 + 57) + 64))(*((void *)v243 + 57), &a58);
            }
          }
          else
          {
            int v161 = (char *)&a30 + 8 * (int)v148;
            char v162 = a58;
            *int v161 = a58;
            *((_DWORD *)v161 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 90 - v160;
            LODWORD(v148) = v148 + 1;
            unint64_t v157 = (v157 + 1);
            v149 &= ~(1 << (v162 - 52));
          }
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
        }
        while (LOBYTE(STACK[0xBC1]) != LOBYTE(STACK[0xBC0]));
        if ((int)v157 > 0) {
          BlueFin::GlStdLib::QsortImpl((char *)&a30 + 8 * v147, (void *)v157, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&STACK[0xBC0], v163);
        }
        int v141 = v243;
      }
      uint64_t v142 = (uint64_t)v239;
    }
LABEL_137:
    LODWORD(STACK[0xBC8]) = v149;
    LODWORD(STACK[0xBC0]) = 1;
    LODWORD(STACK[0xBC4]) = v149;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
    if (LOBYTE(STACK[0xBC1]) != LOBYTE(STACK[0xBC0]))
    {
      int v164 = (_DWORD *)(((unint64_t)&a30 + 8 * (int)v148) | 4);
      do
      {
        *((unsigned char *)v164 - 4) = LOBYTE(STACK[0xBC2]) + 52;
        *int v164 = 0;
        v164 += 2;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
      }
      while (LOBYTE(STACK[0xBC1]) != LOBYTE(STACK[0xBC0]));
    }
  }
  unsigned int v165 = 0;
  unsigned int v166 = &a53[a54 - 1];
  do
  {
    if (*v166)
    {
      unsigned int v167 = *v166 - (((*v166 >> 1) & 0x5B6DB6DB) + ((*v166 >> 2) & 0x9249249));
      unsigned int v165 = ((v167 + (v167 >> 3)) & 0xC71C71C7) + v165 - 63 * (((v167 + (v167 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v166;
  }
  while (v166 >= a53);
  *(_DWORD *)(v142 + 8) = *(_DWORD *)(*((void *)v141 + 56) + 2568);
  uint64_t v168 = v165;
  if ((_BYTE)v165)
  {
    uint64_t v169 = 0;
    LODWORD(i) = 0;
    do
    {
      if (*v242)
      {
        uint64_t v171 = *((unsigned __int16 *)v241 + 7);
        if (*((_WORD *)v241 + 7))
        {
          unint64_t v172 = (__int16 *)*((void *)v241 + 2);
          while (*v172 != *((unsigned __int8 *)a52 + v169))
          {
            v172 += 4;
            if (!--v171) {
              goto LABEL_153;
            }
          }
          BlueFin::GlMeSignalAidInfo::AddSignal(v142, v172);
        }
      }
LABEL_153:
      if ((v169 & 0x7FFFFFFD) != 0)
      {
        BOOL v173 = !v242[2] || i > 0xD;
        if (!v173)
        {
          uint64_t v174 = *((unsigned __int16 *)v241 + 31);
          if (*((_WORD *)v241 + 31))
          {
            char v175 = (__int16 *)*((void *)v241 + 8);
            while (*v175 != *((unsigned __int8 *)&a30 + 8 * i))
            {
              v175 += 4;
              if (!--v174) {
                goto LABEL_164;
              }
            }
            BlueFin::GlMeSignalAidInfo::AddSignal(v142, v175);
            LODWORD(i) = i + 1;
          }
        }
      }
LABEL_164:
      ++v169;
    }
    while (v169 != v168);
  }
  else
  {
    LODWORD(i) = 0;
  }
  if (v242[2] && i <= 0xD)
  {
    for (uint64_t i = i; i != 14; ++i)
    {
      uint64_t v176 = *((unsigned __int16 *)v241 + 31);
      if (*((_WORD *)v241 + 31))
      {
        char v177 = (__int16 *)*((void *)v241 + 8);
        while (*v177 != *((unsigned __int8 *)&a30 + 8 * i))
        {
          v177 += 4;
          if (!--v176) {
            goto LABEL_176;
          }
        }
        BlueFin::GlMeSignalAidInfo::AddSignal(v142, v177);
      }
LABEL_176:
      ;
    }
  }
  uint64_t v178 = 0;
  a27 = 4;
  a28 = 66;
  STACK[0x11A0] = (unint64_t)&STACK[0x11AC];
  LOBYTE(STACK[0x11A8]) = 8;
  *(_OWORD *)&STACK[0x11AC] = 0u;
  *(_OWORD *)&STACK[0x11BC] = 0u;
  v139.i32[0] = *(_DWORD *)(*((void *)v141 + 55) + 120012);
  *(int8x16_t *)&STACK[0x11D0] = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v139, (int32x4_t)1u), 0), (int8x16_t)xmmword_263BB39E0, (int8x16_t)xmmword_263BB39D0);
  LODWORD(STACK[0x11E0]) = 6;
  do
  {
    uint64_t v179 = *((int *)&STACK[0x11D0] + v178);
    if (v242[v179])
    {
      char v180 = 0;
      unsigned int v181 = 32;
      switch((int)v179)
      {
        case 0:
          break;
        case 1:
          char v180 = 0;
          unsigned int v181 = 19;
          break;
        case 2:
          char v180 = 0;
          unsigned int v181 = 24;
          break;
        case 3:
          char v180 = 0;
          unsigned int v181 = 10;
          break;
        case 4:
          char v180 = 0;
          unsigned int v181 = 63;
          break;
        case 5:
          char v180 = 0;
          unsigned int v181 = 36;
          break;
        case 6:
          char v180 = 0;
          unsigned int v181 = 14;
          break;
        default:
          unsigned int v181 = 0;
          char v180 = 1;
          break;
      }
      uint64_t v182 = *((void *)v141 + 55);
      uint64_t v183 = *((void *)v141 + 54) + 48 * v179 + 24;
      *(void *)&a58 = (char *)&a58 + 12;
      BYTE8(a58) = 2;
      *(void *)((char *)&a58 + 12) = 0;
      if (*(_DWORD *)(v182 + 120012) == 1 || !BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v183))
      {
        if ((v180 & 1) == 0)
        {
          int v184 = 0;
          if (v181 <= 1) {
            int v185 = 1;
          }
          else {
            int v185 = v181;
          }
          do
          {
            ++v184;
            *((_DWORD *)&a58 + (v184 >> 5) + 3) |= 1 << v184;
          }
          while (v185 != v184);
        }
      }
      else
      {
        BlueFin::GlSetBase::operator=((uint64_t)&a58, v183);
        *(void *)((char *)&a58 + 12) = *(void *)(v183 + 12);
      }
      if (v179 == 5)
      {
        int v186 = *(_DWORD *)(*((void *)v243 + 58) + 88);
        if ((v186 - 36) < 5 || v186 == 34)
        {
          BlueFin::GlSetBase::operator=((uint64_t)&a58, v183);
          unsigned int v187 = 2;
          *(void *)((char *)&a58 + 12) = *(void *)(v183 + 12);
          int v188 = 1;
          LODWORD(v189) = 25;
          unsigned int v190 = (unsigned __int8 *)&BlueFin::GlPeAlmMgr::SetRemainingSignalAiding(BlueFin::GlSet32 const&,BlueFin::GlSvIdSet const&,BlueFin::GlMeSignalAidInfo *,BOOL const*,BlueFin::GlMeSignalAidInfo&)::aucAddGnssIds;
          int v191 = &BlueFin::GlPeAlmMgr::SetRemainingSignalAiding(BlueFin::GlSet32 const&,BlueFin::GlSvIdSet const&,BlueFin::GlMeSignalAidInfo *,BOOL const*,BlueFin::GlMeSignalAidInfo&)::aucRemoveGnssIds;
        }
        else
        {
          bzero((void *)a58, ((4 * BYTE8(a58) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          int v188 = 0;
          unsigned int v187 = 0;
          int v191 = 0;
          LODWORD(v189) = 11;
          unsigned int v190 = (unsigned __int8 *)&BlueFin::GlPeAlmMgr::SetRemainingSignalAiding(BlueFin::GlSet32 const&,BlueFin::GlSvIdSet const&,BlueFin::GlMeSignalAidInfo *,BOOL const*,BlueFin::GlMeSignalAidInfo&)::aucAddGnssIds;
        }
      }
      else
      {
        LODWORD(v189) = 0;
        unsigned int v190 = 0;
        int v188 = 0;
        unsigned int v187 = 0;
        int v191 = 0;
      }
      if (v179 == 3)
      {
        LODWORD(v189) = 1;
        unsigned int v190 = (unsigned __int8 *)&BlueFin::GlPeAlmMgr::SetRemainingSignalAiding(BlueFin::GlSet32 const&,BlueFin::GlSvIdSet const&,BlueFin::GlMeSignalAidInfo *,BOOL const*,BlueFin::GlMeSignalAidInfo&)::aucAddGnssIds;
      }
      if (v179 == 6) {
        uint64_t v189 = 2;
      }
      else {
        uint64_t v189 = v189;
      }
      if (v179 == 6) {
        unsigned int v190 = (unsigned __int8 *)&BlueFin::GlPeAlmMgr::SetRemainingSignalAiding(BlueFin::GlSet32 const&,BlueFin::GlSvIdSet const&,BlueFin::GlMeSignalAidInfo *,BOOL const*,BlueFin::GlMeSignalAidInfo&)::aucAddGnssIds;
      }
      if (v189)
      {
        uint64_t v192 = a58;
        do
        {
          unsigned int v194 = *v190++;
          unint64_t v193 = v194;
          if (v194 - 64 <= 0xFFFFFFC0)
          {
            DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          }
          *(_DWORD *)(v192 + ((v193 >> 3) & 0x1C)) |= 1 << v193;
          --v189;
        }
        while (v189);
      }
      if (v188)
      {
        if (v187 <= 1) {
          uint64_t v195 = 1;
        }
        else {
          uint64_t v195 = v187;
        }
        do
        {
          int v196 = *v191++;
          BlueFin::GlSetBase::Remove((uint64_t)&a58, v196);
          --v195;
        }
        while (v195);
      }
      uint64_t v197 = BYTE8(a58);
      LOBYTE(STACK[0xBC0]) = BYTE8(a58);
      memcpy(&STACK[0xBC8], (const void *)a58, 4 * v197);
      LOWORD(STACK[0xBC2]) = 0;
      LOBYTE(STACK[0xBC1]) = 0;
      LODWORD(STACK[0xBC4]) = STACK[0xBC8];
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
      int v141 = v243;
      while (LOBYTE(STACK[0xBC1]) != LOBYTE(STACK[0xBC0]))
      {
        uint64_t v198 = *((void *)v243 + 55);
        char v199 = STACK[0xBC2];
        LODWORD(a23) = v179;
        BYTE4(a23) = v199;
        BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(v198 + 119744), (unsigned int *)&a23, &a21);
        *(_DWORD *)(STACK[0x11A0] + (((unint64_t)a21 >> 3) & 0x1C)) |= 1 << a21;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0xBC0]);
      }
    }
    ++v178;
  }
  while (v178 != 5);
  uint64_t v200 = 0;
  *(_OWORD *)&STACK[0xDA0] = 0u;
  *(_OWORD *)&STACK[0xDB0] = 0u;
  *(_OWORD *)&STACK[0xD80] = 0u;
  *(_OWORD *)&STACK[0xD90] = 0u;
  *(_OWORD *)&STACK[0xD60] = 0u;
  *(_OWORD *)&STACK[0xD70] = 0u;
  *(_OWORD *)&STACK[0xD40] = 0u;
  *(_OWORD *)&STACK[0xD50] = 0u;
  *(_OWORD *)&STACK[0xD20] = 0u;
  *(_OWORD *)&STACK[0xD30] = 0u;
  *(_OWORD *)&STACK[0xD00] = 0u;
  *(_OWORD *)&STACK[0xD10] = 0u;
  *(_OWORD *)&STACK[0xCE0] = 0u;
  *(_OWORD *)&STACK[0xCF0] = 0u;
  *(_OWORD *)&STACK[0xCC0] = 0u;
  *(_OWORD *)&STACK[0xCD0] = 0u;
  *(_OWORD *)&STACK[0xCA0] = 0u;
  *(_OWORD *)&STACK[0xCB0] = 0u;
  *(_OWORD *)&STACK[0xC80] = 0u;
  *(_OWORD *)&STACK[0xC90] = 0u;
  *(_OWORD *)&STACK[0xC60] = 0u;
  *(_OWORD *)&STACK[0xC70] = 0u;
  *(_OWORD *)&STACK[0xC40] = 0u;
  *(_OWORD *)&STACK[0xC50] = 0u;
  *(_OWORD *)&STACK[0xC20] = 0u;
  *(_OWORD *)&STACK[0xC30] = 0u;
  *(_OWORD *)&STACK[0xC00] = 0u;
  *(_OWORD *)&STACK[0xC10] = 0u;
  *(_OWORD *)&STACK[0xBE0] = 0u;
  *(_OWORD *)&STACK[0xBF0] = 0u;
  *(_OWORD *)&STACK[0xBC0] = 0u;
  *(_OWORD *)&STACK[0xBD0] = 0u;
  do
  {
    int v201 = (char *)&STACK[0xBC0] + v200;
    *int v201 = 0;
    *((_DWORD *)v201 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    v200 += 8;
  }
  while (v200 != 1504);
  uint64_t v202 = (uint64_t)v239;
  if (*(_DWORD *)(*((void *)v141 + 55) + 100) != -1)
  {
    uint64_t v203 = 0;
    int v204 = 0;
    unint64_t v205 = 0;
    do
    {
      uint64_t v206 = *((int *)&STACK[0x11D0] + v203);
      if (v242[v206])
      {
        BlueFin::GlPeAlmMgr::GetValidity((uint64_t *)v243, *((_DWORD *)&STACK[0x11D0] + v203), 1, (uint64_t)&a23);
        LOBYTE(a58) = a24;
        memcpy((char *)&a58 + 8, a23, 4 * a24);
        WORD1(a58) = 0;
        BYTE1(a58) = 0;
        DWORD1(a58) = DWORD2(a58);
        while (1)
        {
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a58);
          if (BYTE1(a58) == a58) {
            break;
          }
          a21 = v206;
          a22 = BYTE2(a58);
          v207 = (uint64_t *)*((void *)v243 + 55);
          a29 = 0.0;
          if (BlueFin::GlPeAsstMgr::computeAzElCommon(v207, &a21, 0xFF9222FF, 0, (uint64_t)&a28, 0, &a29))float v208 = a29; {
          else
          }
            float v208 = -90.0;
          float v209 = fmodf(v208, 4295000000.0);
          if (v208 <= 4295000000.0) {
            float v209 = v208;
          }
          if (v209 < -4295000000.0) {
            float v209 = -fmodf(-v209, 4295000000.0);
          }
          if (v209 < 0.0) {
            unsigned int v210 = -(float)-v209;
          }
          else {
            unsigned int v210 = v209;
          }
          BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*((void *)v243 + 55) + 119744), &a21, &a29);
          if ((v210 & 0x80000000) != 0)
          {
            if (v210 != -90) {
              (*(void (**)(void, float *))(**((void **)v243 + 57) + 64))(*((void *)v243 + 57), &a29);
            }
          }
          else
          {
            __int16 v211 = &STACK[0xBC0] + (int)v205;
            *(unsigned char *)__int16 v211 = LOBYTE(a29);
            *((_DWORD *)v211 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 90 - v210;
            unint64_t v205 = (v205 + 1);
            ++v204;
          }
        }
      }
      ++v203;
    }
    while (v203 != 5);
    if (v204 > 1)
    {
      BlueFin::GlStdLib::QsortImpl((char *)&STACK[0xBC0], (void *)v205, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&a58, v137);
      if ((int)v205 >= 1)
      {
        uint64_t v212 = 0;
        do
        {
          uint64_t v213 = *((unsigned __int8 *)&STACK[0xBC0] + 8 * v212);
          uint64_t v214 = *((unsigned __int16 *)v241 + 12 * BlueFin::GlSvId::s_aucSvId2gnss[v213] + 7);
          if (*((_WORD *)v241 + 12 * BlueFin::GlSvId::s_aucSvId2gnss[v213] + 7))
          {
            int v215 = (__int16 *)*((void *)v241 + 3 * BlueFin::GlSvId::s_aucSvId2gnss[v213] + 2);
            while ((unsigned __int16)*v215 != v213)
            {
              v215 += 4;
              if (!--v214) {
                goto LABEL_251;
              }
            }
            BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)v239, v215);
            BlueFin::GlSetBase::Remove((uint64_t)&STACK[0x11A0], v213);
          }
LABEL_251:
          ++v212;
        }
        while (v212 != v205);
      }
    }
    uint64_t v216 = 0;
    unint64_t v217 = 0;
    do
    {
      uint64_t v218 = *((int *)&STACK[0x11D0] + v216);
      if (v242[v218])
      {
        BlueFin::GlPeAlmMgr::GetValidity((uint64_t *)v243, *((_DWORD *)&STACK[0x11D0] + v216), 1, (uint64_t)&a23);
        LOBYTE(a58) = a24;
        memcpy((char *)&a58 + 8, a23, 4 * a24);
        WORD1(a58) = 0;
        BYTE1(a58) = 0;
        DWORD1(a58) = DWORD2(a58);
        while (1)
        {
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a58);
          if (BYTE1(a58) == a58) {
            break;
          }
          a21 = v218;
          a22 = BYTE2(a58);
          long long v219 = (uint64_t *)*((void *)v243 + 55);
          a29 = 0.0;
          if (BlueFin::GlPeAsstMgr::computeAzElCommon(v219, &a21, 0xFF9222FF, 0, (uint64_t)&a27, 0, &a29))float v220 = a29; {
          else
          }
            float v220 = -90.0;
          float v221 = fmodf(v220, 4295000000.0);
          if (v220 <= 4295000000.0) {
            float v221 = v220;
          }
          if (v221 < -4295000000.0) {
            float v221 = -fmodf(-v221, 4295000000.0);
          }
          if (v221 < 0.0) {
            unsigned int v222 = -(float)-v221;
          }
          else {
            unsigned int v222 = v221;
          }
          BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*((void *)v243 + 55) + 119744), &a21, &a29);
          if (((unint64_t)*(unsigned int *)(STACK[0x11A0] + (((unint64_t)LOBYTE(a29) >> 3) & 0x1C)) >> (LOBYTE(a29) & 0x1F)))
          {
            if ((v222 & 0x80000000) != 0)
            {
              if (v222 != -90) {
                (*(void (**)(void, float *))(**((void **)v243 + 57) + 64))(*((void *)v243 + 57), &a29);
              }
            }
            else
            {
              v223 = &STACK[0xBC0] + (int)v205;
              *(unsigned char *)v223 = LOBYTE(a29);
              *((_DWORD *)v223 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 90 - v222;
              LODWORD(v205) = v205 + 1;
              unint64_t v217 = (v217 + 1);
            }
          }
        }
      }
      ++v216;
    }
    while (v216 != 5);
    uint64_t v202 = (uint64_t)v239;
    if ((int)v217 > 1)
    {
      BlueFin::GlStdLib::QsortImpl((char *)&STACK[0xBC0] + 8 * v204, (void *)v217, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&a58, v137);
      uint64_t v202 = (uint64_t)v239;
      if (v204 < (int)v205)
      {
        uint64_t v224 = v204;
        do
        {
          uint64_t v225 = *((unsigned __int8 *)&STACK[0xBC0] + 8 * v224);
          uint64_t v226 = *((unsigned __int16 *)v241 + 12 * BlueFin::GlSvId::s_aucSvId2gnss[v225] + 7);
          if (*((_WORD *)v241 + 12 * BlueFin::GlSvId::s_aucSvId2gnss[v225] + 7))
          {
            int v227 = (__int16 *)*((void *)v241 + 3 * BlueFin::GlSvId::s_aucSvId2gnss[v225] + 2);
            while ((unsigned __int16)*v227 != v225)
            {
              v227 += 4;
              if (!--v226) {
                goto LABEL_281;
              }
            }
            BlueFin::GlMeSignalAidInfo::AddSignal(v202, v227);
            BlueFin::GlSetBase::Remove((uint64_t)&STACK[0x11A0], v225);
            uint64_t v202 = (uint64_t)v239;
          }
LABEL_281:
          ++v224;
        }
        while (v205 != v224);
      }
    }
  }
  LOBYTE(a58) = STACK[0x11A8];
  memcpy((char *)&a58 + 8, (const void *)STACK[0x11A0], 4 * a58);
  WORD1(a58) = 0;
  BYTE1(a58) = 0;
  DWORD1(a58) = DWORD2(a58);
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a58);
  while (BYTE1(a58) != a58)
  {
    uint64_t v228 = *((unsigned __int16 *)v241 + 12 * BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(a58)] + 7);
    if (*((_WORD *)v241 + 12 * BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(a58)] + 7))
    {
      int v229 = (__int16 *)*((void *)v241 + 3 * BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(a58)] + 2);
      while (*v229 != BYTE2(a58))
      {
        v229 += 4;
        if (!--v228) {
          goto LABEL_289;
        }
      }
      BlueFin::GlMeSignalAidInfo::AddSignal(v202, v229);
    }
LABEL_289:
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a58);
  }
  v237[320] = *(_DWORD *)(*((void *)v243 + 56) + 2576) != 0;
  BlueFin::GlSetBase::operator=((uint64_t)v238, (uint64_t)&a17);
  long long v230 = v240[1];
  *(_OWORD *)((char *)v243 + 36732) = *v240;
  *(_OWORD *)((char *)v243 + 36748) = v230;
  return BlueFin::GlSetBase::operator|=((uint64_t)v243 + 37032, (uint64_t)&a17);
}

uint64_t BlueFin::GlMeSignalAidInfo::AddSignal(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(a1 + 14);
  if (v2 >= *(unsigned __int8 *)(a1 + 12)) {
    return 0;
  }
  __int16 v3 = *a2;
  if (!*((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
        + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
        + *a2))
    return 0;
  uint64_t v4 = *(void *)(a1 + 16);
  *(_WORD *)(a1 + 14) = v2 + 1;
  uint64_t v5 = v4 + 8 * v2;
  *(_WORD *)uint64_t v5 = v3;
  *(_DWORD *)(v5 + 4) = *((_DWORD *)a2 + 1);
  return 1;
}

char *BlueFin::GlStdLib::QsortImpl(char *this, void *a2, unsigned int a3, uint64_t (*a4)(char *, char *), int (*a5)(const void *, const void *), unsigned __int8 *a6)
{
  if (a2 >= 2)
  {
    unsigned int v9 = a2;
    int v10 = this;
    size_t v11 = a3;
    uint64_t v12 = -(uint64_t)a3;
    do
    {
      int v13 = &v10[v11];
      if ((a4(v10, &v10[v11]) & 0x80000000) != 0)
      {
        memcpy(a5, &v10[v11], v11);
        memcpy(&v10[v11], v10, v11);
        memcpy(v10, a5, v11);
      }
      uint64_t v14 = (v9 - 1) * a3;
      unsigned __int8 v15 = &v10[v14];
      if (v14 <= a3)
      {
        unsigned int v9 = 0;
        uint64_t v16 = 1;
      }
      else
      {
        unsigned int v9 = 0;
        uint64_t v16 = 1;
        do
        {
          do
          {
            if ((int)a4(v10, v15) > 0) {
              break;
            }
            v15 += v12;
            ++v9;
          }
          while (v13 < v15);
          while (v13 < v15)
          {
            if ((int)a4(v13, v10) > 0)
            {
              memcpy(a5, v13, v11);
              memcpy(v13, v15, v11);
              memcpy(v15, a5, v11);
              break;
            }
            v13 += v11;
            uint64_t v16 = (v16 + 1);
          }
        }
        while (v13 < v15);
      }
      memcpy(a5, v13, v11);
      memcpy(v13, v10, v11);
      memcpy(v10, a5, v11);
      this = (char *)BlueFin::GlStdLib::QsortImpl((BlueFin::GlStdLib *)v10, (void *)v16, a3, a4, a5, v17);
      int v10 = &v15[v11];
    }
    while (v9 > 1);
  }
  return this;
}

uint64_t AlmMgr_SortSvIds(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 4) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1) {
    return 1;
  }
  else {
    return (v2 >> 31);
  }
}

unsigned __int8 *BlueFin::GlSignalIdSet::GetSvIdSet@<X0>(BlueFin::GlSignalIdSet *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  uint64_t v3 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  double result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    unsigned __int8 v6 = *((unsigned char *)this + 8);
    memcpy(v10, *(const void **)this, 4 * v6);
    unsigned __int16 v8 = 0;
    unsigned __int8 v7 = 0;
    int v9 = v10[0];
    for (double result = BlueFin::GlSetIterator::operator++(&v6); v7 != v6; double result = BlueFin::GlSetIterator::operator++(&v6))
    {
      if (v8 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 586, "GetSvIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 586, "usIndex < NUM_SIGNAL_IDS");
      }
      unint64_t v5 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v8);
      *(_DWORD *)(v3 + ((v5 >> 3) & 0x1C)) |= 1 << v5;
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlSetIterator::operator++(unsigned __int8 *result)
{
  int v1 = *((_DWORD *)result + 1);
  uint64_t v2 = result[1];
  if (v1)
  {
LABEL_6:
    unsigned int v5 = v1 & -v1;
    *((_DWORD *)result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v5 ^ v1;
    *((_WORD *)result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 32 * v2 - __clz(v5) + 31;
  }
  else
  {
    unint64_t v3 = *result;
    while (1)
    {
      __int16 v4 = v2 + 1;
      if (v2 + 1 >= v3) {
        break;
      }
      int v1 = *(_DWORD *)&result[4 * v2++ + 12];
      if (v1)
      {
        result[1] = v4;
        LOWORD(v2) = v4;
        goto LABEL_6;
      }
    }
    result[1] = v3;
  }
  return result;
}

BOOL BlueFin::GlPeAlmMgr::Alm2Plane(BlueFin::GlPeAlmMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(BlueFin::GlGpsTime *__hidden this), uint64_t a10, unsigned int a11, int a12, unsigned int a13, unsigned int a14, char a15)
{
  STACK[0xAB8] = *MEMORY[0x263EF8340];
  unsigned __int8 v15 = (void *)((char *)this + 36704);
  if (*((unsigned char *)this + 36712)) {
    return 1;
  }
  bzero(&a15, 0x400uLL);
  for (uint64_t i = 0; i != 1024; i += 32)
  {
    char v19 = &a15 + i;
    *(_WORD *)char v19 = 0;
    *((void *)v19 + 2) = 0;
    *((void *)v19 + 3) = 0;
    *((void *)v19 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = *v15;
  uint64_t v22 = *v15 + 16;
  do
  {
    uint64_t v23 = 0;
    uint64_t v24 = *(void *)(v21 + (v20 << 6) + 8);
    do
    {
      *(_DWORD *)(v22 + 4 * v23) = 0;
      *(unsigned char *)(v24 + v23++) = 0;
    }
    while (v23 != 6);
    *(unsigned char *)(v21 + (v20++ << 6) + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    v22 += 64;
  }
  while (v20 != 6);
  double v101 = v15;
  char v25 = 0;
  a9 = &off_270EBC600;
  a10 = 0;
  int vars8 = 7;
  char vars8_4 = 0;
  LODWORD(v102[0]) = -65536;
  v102[1] = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  int v26 = 1;
  long long v106 = 0u;
  long long v107 = 0u;
  LODWORD(v103) = 0;
  unsigned __int16 v108 = 0;
  int v109 = -1;
  LOBYTE(varsBlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  do
  {
    if (!BlueFin::GlPeAlmMgr::GetAlm((uint64_t)this, 0, v26, (uint64_t)v102, 1, 0)) {
      goto LABEL_38;
    }
    unsigned __int16 v108 = v108;
    double v27 = (BlueFin::GlPeTimeManager *)*((void *)this + 56);
    if (*((_DWORD *)v27 + 644))
    {
      BlueFin::GlPeTimeManager::GetTime(v27, 1, (__n128 *)&STACK[0xA20]);
      STACK[0xAA0] = 0;
      STACK[0xA98] = (unint64_t)&off_270EBC600;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&STACK[0xA20], (BlueFin::GlGpsTime *)&STACK[0xA98]);
      BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)v102, (const BlueFin::GlGpsTime *)&STACK[0xA98], (uint64_t)&STACK[0xA20]);
      unsigned int v28 = ((uint64_t (*)(void))a9[4])(&a9);
      a13 = a10;
      a14 = v28;
      int v29 = (*(uint64_t (**)(unint64_t *))(STACK[0xA98] + 32))(&STACK[0xA98]);
      a11 = STACK[0xAA0];
      a12 = v29;
      BlueFin::GlTimePoint::resolveAmbiguity(&a13, &a11, 0x93A8000u);
      unsigned int v30 = (*(uint64_t (**)(unint64_t *, void))(STACK[0xA98] + 24))(&STACK[0xA98], a14);
      unsigned int v31 = a13;
      unsigned int v32 = STACK[0xA28];
      unsigned int v33 = STACK[0xA2C];
      if (LODWORD(STACK[0xA2C]) | LODWORD(STACK[0xA28]))
      {
        unsigned int v34 = v30 - v33;
        if (v30 > v33 || v30 == v33 && a13 >= v32)
        {
          char v35 = 0;
          unsigned int v30 = (__PAIR64__(v34, a13) - v32) >> 32;
          unsigned int v31 = a13 - v32;
        }
        else
        {
          uint64_t v51 = __PAIR64__(v33 - v30, v32) - a13;
          unsigned int v30 = HIDWORD(v51);
          unsigned int v31 = v51;
          char v35 = 1;
        }
      }
      else
      {
        char v35 = 0;
      }
      double v45 = (double)v31 * 2.32830644e-10 + (double)v30;
      if ((v35 & ((v30 | v31) != 0)) != 0) {
        double v45 = -v45;
      }
      if ((v25 & ((int)v45 >= 0)) == 0)
      {
        LOWORD(v42) = v108;
        goto LABEL_33;
      }
      goto LABEL_37;
    }
    unsigned int v36 = ((uint64_t (*)(void))a9[4])(&a9);
    unsigned int v37 = ((uint64_t (*)(void))a9[4])(&a9);
    LODWORD(v38) = a10;
    double v39 = (double)v38 * 2.32830644e-10 + (double)(v37 % 0x93A80);
    double v40 = fmod(v39, 4294967300.0);
    if (v39 <= 4294967300.0) {
      double v40 = v39;
    }
    if (v40 < -4294967300.0) {
      double v40 = -fmod(-v40, 4294967300.0);
    }
    unsigned int v41 = v40;
    if (v40 < 0.0) {
      unsigned int v41 = --v40;
    }
    LOWORD(v42) = v108;
    if ((v25 & 1) == 0) {
      goto LABEL_33;
    }
    unsigned int v43 = v36 / 0x93A80;
    unsigned int v44 = v36 / 0x93A80 - v108;
    if ((v44 & 0x80000000) != 0)
    {
      if (v44 + 127 < 0x80) {
        goto LABEL_33;
      }
    }
    else if (v43 != v108 && v44 > 0x80)
    {
      goto LABEL_33;
    }
    char v25 = 1;
    if (v108 == (unsigned __int16)v43 && v41 < v103)
    {
      unsigned int v42 = v36 / 0x93A80;
LABEL_33:
      int v46 = v103;
      long double v47 = (double)v103;
      STACK[0xA20] = (unint64_t)&off_270EBC600;
      double v48 = fmod(v47, 1.0);
      if (v48 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v49 = v48 * 4294967300.0 + 0.5;
      unsigned int v50 = v49;
      if (v49 >= 4294967300.0) {
        unsigned int v50 = -1;
      }
      LODWORD(a1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v50;
      HIDWORD(a1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v46 + 604800 * (unsigned __int16)v42;
LABEL_37:
      char v25 = 1;
    }
LABEL_38:
    ++v26;
  }
  while (v26 != 33);
  double v52 = (_OWORD *)((unint64_t)&a15 | 0x10);
  double v53 = 3.14159265;
  for (uint64_t j = 1; j != 33; ++j)
  {
    if (BlueFin::GlPeAlmMgr::GetAlm((uint64_t)this, 0, j, (uint64_t)v102, 1, 0))
    {
      unsigned __int16 v108 = v108;
      unsigned int v55 = ((uint64_t (*)(void))a9[4])(&a9);
      int v56 = v108;
      unsigned int v57 = ((uint64_t (*)(void))a9[4])(&a9);
      LODWORD(v58) = a10;
      double v59 = (double)v58 * 2.32830644e-10 + (double)(v57 % 0x93A80);
      double v60 = fmod(v59, 4294967300.0);
      if (v59 <= 4294967300.0) {
        double v60 = v59;
      }
      if (v60 < -4294967300.0) {
        double v60 = -fmod(-v60, 4294967300.0);
      }
      int v61 = v55 / 0x93A80 - v56;
      int v62 = v103;
      LODWORD(STACK[0xA88]) = 7;
      LOBYTE(STACK[0xA8C]) = 0;
      LODWORD(STACK[0xA20]) = -65536;
      STACK[0xA28] = 0;
      *(_OWORD *)&STACK[0xA38] = 0u;
      *(_OWORD *)&STACK[0xA48] = 0u;
      if (v60 < 0.0) {
        unsigned int v63 = --v60;
      }
      else {
        unsigned int v63 = v60;
      }
      int v64 = v61 + 256;
      *(_OWORD *)&STACK[0xA58] = 0uLL;
      *(_OWORD *)&STACK[0xA68] = 0uLL;
      if (v61 >= -128) {
        int v64 = v61;
      }
      LOWORD(STACK[0xA78]) = 0;
      if (v61 <= 128) {
        int v65 = v64;
      }
      else {
        int v65 = v61 - 256;
      }
      LODWORD(STACK[0xA30]) = 0;
      LODWORD(STACK[0xA7C]) = -1;
      LOBYTE(STACK[0xA80]) = 0;
      if (BlueFin::GlPeAlmMgr::GetAlm((uint64_t)this, 0, j, (uint64_t)&STACK[0xA20], 1, 0))
      {
        *((unsigned char *)v52 - 16) = j;
        double v66 = *(double *)&STACK[0xA60];
        *((void *)v52 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = STACK[0xA60];
        long long v67 = *(_OWORD *)&STACK[0xA50];
        *double v52 = *(_OWORD *)&STACK[0xA50];
        int v68 = 604800 * v65 - v62 + v63;
        if (v68)
        {
          double v69 = (double)v68;
          double v70 = *(double *)&v67
              + *(double *)&STACK[0xA40] * v69
              + v69 * -0.0000729211515
              + ((double)v68
               + (double)LODWORD(STACK[0xA30])
               - (double)(604800 * (int)(((double)v68 + (double)LODWORD(STACK[0xA30])) / 604800.0)
                                      - LODWORD(STACK[0xA30])))
              * 0.0000729211515;
          double v71 = v70 / 6.28318531;
          if (v70 / 6.28318531 <= 0.0)
          {
            double v72 = 0.0;
            if (v70 / 6.28318531 < 0.0) {
              double v72 = ceil(v71 + -0.5);
            }
          }
          else
          {
            double v72 = floor(v71 + 0.5);
          }
          *(double *)&long long v67 = v70 - v72 * 6.28318531;
          *(void *)double v52 = v67;
          double v73 = v66
              + sqrt(3.986005e14/ (*(double *)&STACK[0xA48]* *(double *)&STACK[0xA48]* (*(double *)&STACK[0xA48]* *(double *)&STACK[0xA48]* (*(double *)&STACK[0xA48]* *(double *)&STACK[0xA48]))))* v69;
          double v74 = v73 / 6.28318531;
          double v75 = ceil(v73 / 6.28318531 + -0.5);
          if (v73 / 6.28318531 >= 0.0) {
            double v75 = 0.0;
          }
          double v76 = floor(v74 + 0.5);
          if (v74 > 0.0) {
            double v77 = v76;
          }
          else {
            double v77 = v75;
          }
          *((double *)v52 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v73 + v77 * -6.28318531;
        }
      }
      else
      {
        *(void *)&long long v67 = *(void *)v52;
      }
      if (*(double *)&v67 < v53) {
        double v53 = *(double *)&v67;
      }
    }
    v52 += 2;
  }
  BOOL v16 = v53 < 3.14159265;
  if (v53 < 3.14159265)
  {
    double v78 = (double *)((unint64_t)&a15 | 0x10);
    uint64_t v79 = 1;
    while (1)
    {
      if (BlueFin::GlPeAlmMgr::GetAlm((uint64_t)this, 0, v79, (uint64_t)v102, 1, 0))
      {
        double v81 = (*v78 - v53) / 3.14159265 * 3.0;
        double v82 = 0.5;
        if (v81 <= 0.0 && (double v82 = -0.5, v81 >= 0.0))
        {
          LOBYTE(v83) = 6;
        }
        else
        {
          int v83 = (int)(v81 + v82);
          if (!(_BYTE)v83) {
            LOBYTE(v83) = 6;
          }
          if ((v83 - 1) > 5u) {
            goto LABEL_85;
          }
        }
        *((unsigned char *)v78 - 15) = v83;
      }
LABEL_85:
      ++v79;
      v78 += 4;
      if (v79 == 33)
      {
        uint64_t v84 = 1;
        uint64_t v85 = 16;
        do
        {
          uint64_t v86 = 0;
          *(_OWORD *)&STACK[0xA40] = 0u;
          *(_OWORD *)&STACK[0xA30] = 0u;
          *(_OWORD *)&STACK[0xA20] = 0u;
          do
          {
            unsigned int v87 = (char *)&STACK[0xA20] + v86;
            *unsigned int v87 = 0;
            *((_DWORD *)v87 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            v86 += 8;
          }
          while (v86 != 48);
          uint64_t v88 = 0;
          unsigned __int8 v89 = 0;
          uint64_t v90 = v84 - 1;
          do
          {
            int v91 = *(&a15 + v88);
            if ((v91 - 33) >= 0xFFFFFFE0 && v84 == *(&a15 + v88 + 1))
            {
              double v92 = &STACK[0xA20] + v89;
              *(unsigned char *)double v92 = v91;
              double v93 = (*(double *)(&a15 + v88 + 24) + *(double *)(&a15 + v88 + 8)) * 57.2957795;
              *((_DWORD *)v92 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (int)(v93 - floor(v93 / 360.0) * 360.0);
              if (++v89 > 5u) {
                break;
              }
            }
            v88 += 32;
          }
          while (v88 != 1024);
          BlueFin::GlStdLib::QsortImpl((char *)&STACK[0xA20], (void *)v89, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&STACK[0xA98], v80);
          uint64_t v94 = *v101;
          if (v89)
          {
            uint64_t v95 = *(unsigned char **)(v94 + (v90 << 6) + 8);
            uint64_t v96 = v89;
            double v97 = (_DWORD *)(v94 + v85);
            uint64_t v98 = &STACK[0xA24];
            do
            {
              *v95++ = *((unsigned char *)v98 - 4);
              int v99 = *(_DWORD *)v98++;
              *v97++ = v99;
              --v96;
            }
            while (v96);
          }
          *(unsigned char *)(v94 + (v90 << 6) + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v89;
          ++v84;
          v85 += 64;
        }
        while (v84 != 7);
        *((unsigned char *)v101 + 8) = 1;
        return v16;
      }
    }
  }
  return v16;
}

uint64_t BlueFin::GlPeAlmSvIdList::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    __int16 v4 = (BlueFin::GlSetBase *)(a2 + 200);
    BlueFin::GlSetBase::operator=(a1 + 200, a2 + 200);
    long long v5 = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
    *(_OWORD *)(a1 + 212) = v5;
    unsigned __int8 v6 = BlueFin::GlSetBase::Cnt(v4);
    uint64_t v7 = v6;
    if (v6)
    {
      unsigned __int16 v8 = *(char **)(a2 + 192);
      int v9 = *(unsigned char **)(a1 + 192);
      do
      {
        char v10 = *v8++;
        *v9++ = v10;
        --v7;
      }
      while (v7);
    }
  }
  return a1;
}

unsigned __int8 *BlueFin::GlSatCarrIdSet::GetSatIdSetPrimaryCarrier@<X0>(BlueFin::GlSatCarrIdSet *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 4;
  *(void *)(a2 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  unsigned __int8 v7 = *((unsigned char *)this + 8);
  memcpy(v11, *(const void **)this, 4 * v7);
  unsigned __int16 v9 = 0;
  unsigned __int8 v8 = 0;
  int v10 = v11[0];
  for (double result = BlueFin::GlSetIterator::operator++(&v7); v8 != v7; double result = BlueFin::GlSetIterator::operator++(&v7))
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v5, v9);
    if (v6 == 3 || v6 == 0) {
      *(_DWORD *)(*(void *)a2 + (((unint64_t)v5[0] >> 3) & 0x1C)) |= 1 << v5[0];
    }
  }
  return result;
}

void *BlueFin::QHsm::tran(void *a1, uint64_t (*a2)(), uint64_t a3)
{
  v33[1] = *MEMORY[0x263EF8340];
  if (a2 == BlueFin::QHsm::top)
  {
    uint64_t v20 = "target != &QHsm::top";
    DeviceFaultNotify("glhsm_dyn.cpp", 32, "tran", (char)"target != &QHsm::top");
    int v21 = 32;
    goto LABEL_86;
  }
  __int16 v4 = a2;
  int v6 = (uint64_t (*)())a1[1];
  if (v6 != (uint64_t (*)())a1[4])
  {
    while (1)
    {
      if (!v6)
      {
        uint64_t v20 = "s != 0";
        DeviceFaultNotify("glhsm_dyn.cpp", 38, "tran", (char)"s != 0");
        int v21 = 38;
        goto LABEL_86;
      }
      if (BlueFin::patch_trigger((unint64_t)v6, (uint64_t)a1, byte_263BAB11E, &BlueFin::_patched_state))
      {
        unsigned __int8 v7 = (uint64_t (*)())BlueFin::_patched_state;
        if (!BlueFin::_patched_state) {
          goto LABEL_8;
        }
      }
      else
      {
        unsigned __int8 v7 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))v6)(a1, byte_263BAB11E);
        if (!v7)
        {
LABEL_8:
          if (BlueFin::patch_trigger((unint64_t)v6, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
            unsigned __int8 v7 = (uint64_t (*)())BlueFin::_patched_state;
          }
          else {
            unsigned __int8 v7 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))v6)(a1, BlueFin::__pkgStdEvt);
          }
        }
      }
      int v6 = v7;
      if (v7 == (uint64_t (*)())a1[4]) {
        goto LABEL_14;
      }
    }
  }
  unsigned __int8 v7 = (uint64_t (*)())a1[1];
LABEL_14:
  memset(v32, 0, sizeof(v32));
  uint64_t v30 = 0;
  unsigned int v31 = v4;
  if (v7 == v4)
  {
    BOOL v9 = BlueFin::patch_trigger((unint64_t)v4, (uint64_t)a1, byte_263BAB11E, &BlueFin::_patched_state);
    int v10 = (unint64_t *)&v31;
    unint64_t v11 = (unint64_t)v4;
    if (v9)
    {
      if (!v4) {
        goto LABEL_64;
      }
      goto LABEL_61;
    }
    goto LABEL_33;
  }
  if (BlueFin::patch_trigger((unint64_t)v4, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
    unsigned __int8 v8 = (uint64_t (*)())BlueFin::_patched_state;
  }
  else {
    unsigned __int8 v8 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))v4)(a1, BlueFin::__pkgStdEvt);
  }
  unint64_t v12 = a1[4];
  int v10 = (unint64_t *)&v31;
  if ((uint64_t (*)())v12 == v8) {
    goto LABEL_60;
  }
  if (BlueFin::patch_trigger(v12, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
    int v13 = (uint64_t (*)())BlueFin::_patched_state;
  }
  else {
    int v13 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))a1[4])(a1, BlueFin::__pkgStdEvt);
  }
  if (v13 == v8)
  {
    int v10 = (unint64_t *)&v31;
    if (BlueFin::patch_trigger(a1[4], (uint64_t)a1, byte_263BAB11E, &BlueFin::_patched_state)) {
      goto LABEL_60;
    }
LABEL_33:
    ((void (*)(void *, unsigned __int8 *))a1[4])(a1, byte_263BAB11E);
    goto LABEL_60;
  }
  if (v13 == v4)
  {
    int v10 = (unint64_t *)&v30;
    if (BlueFin::patch_trigger(a1[4], (uint64_t)a1, byte_263BAB11E, &BlueFin::_patched_state)) {
      goto LABEL_60;
    }
    goto LABEL_33;
  }
  int v10 = (unint64_t *)v32;
  *(void *)&v32[0] = v8;
  if (BlueFin::patch_trigger((unint64_t)v8, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state))
  {
    uint64_t v14 = (uint64_t (*)(void *, unsigned __int8 *))BlueFin::_patched_state;
    if (BlueFin::_patched_state) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v14 = (uint64_t (*)(void *, unsigned __int8 *))((uint64_t (*)(void *, unsigned __int8 *))v8)(a1, BlueFin::__pkgStdEvt);
    if (v14)
    {
LABEL_35:
      while ((uint64_t (*)(void *, unsigned __int8 *))a1[4] != v14)
      {
        v10[1] = (unint64_t)v14;
        ++v10;
        if (BlueFin::patch_trigger((unint64_t)v14, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state))
        {
          uint64_t v14 = (uint64_t (*)(void *, unsigned __int8 *))BlueFin::_patched_state;
          if (!BlueFin::_patched_state) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v14 = (uint64_t (*)(void *, unsigned __int8 *))v14(a1, BlueFin::__pkgStdEvt);
          if (!v14) {
            goto LABEL_40;
          }
        }
      }
      goto LABEL_59;
    }
  }
LABEL_40:
  if (!BlueFin::patch_trigger(a1[4], (uint64_t)a1, byte_263BAB11E, &BlueFin::_patched_state)) {
    ((void (*)(void *, unsigned __int8 *))a1[4])(a1, byte_263BAB11E);
  }
  unsigned __int8 v15 = (uint64_t (*)())*v10;
  if (*v10)
  {
    BOOL v16 = v10 - 1;
    while (v13 != v15)
    {
      unsigned __int8 v17 = (uint64_t (*)())*v16--;
      unsigned __int8 v15 = v17;
      if (!v17) {
        goto LABEL_46;
      }
    }
  }
  else
  {
LABEL_46:
    if (!v13)
    {
LABEL_57:
      uint64_t v20 = "0";
      DeviceFaultNotify("glhsm_dyn.cpp", 101, "tran", (char)"0");
      int v21 = 101;
      goto LABEL_86;
    }
    while (1)
    {
      unsigned __int8 v18 = (uint64_t (*)())*v10;
      if (*v10) {
        break;
      }
LABEL_51:
      if (!BlueFin::patch_trigger((unint64_t)v13, (uint64_t)a1, byte_263BAB11E, &BlueFin::_patched_state)) {
        ((void (*)(void *, unsigned __int8 *))v13)(a1, byte_263BAB11E);
      }
      if (BlueFin::patch_trigger((unint64_t)v13, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state))
      {
        int v13 = (uint64_t (*)())BlueFin::_patched_state;
        if (!BlueFin::_patched_state) {
          goto LABEL_57;
        }
      }
      else
      {
        int v13 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))v13)(a1, BlueFin::__pkgStdEvt);
        if (!v13) {
          goto LABEL_57;
        }
      }
    }
    BOOL v16 = v10 - 1;
    while (v13 != v18)
    {
      char v19 = (uint64_t (*)())*v16--;
      unsigned __int8 v18 = v19;
      if (!v19) {
        goto LABEL_51;
      }
    }
  }
  int v10 = v16;
LABEL_59:
  if (v10 >= v33)
  {
    uint64_t v20 = "e < &entry[_DIM(entry)]";
    DeviceFaultNotify("glhsm_dyn.cpp", 104, "tran", (char)"e < &entry[_DIM(entry)]");
    int v21 = 104;
    goto LABEL_86;
  }
LABEL_60:
  unint64_t v11 = *v10;
  if (!*v10) {
    goto LABEL_64;
  }
  do
  {
LABEL_61:
    if (!BlueFin::patch_trigger(v11, (uint64_t)a1, byte_263BAB11C, &BlueFin::_patched_state)) {
      ((void (*)(void *, unsigned __int8 *))*v10)(a1, byte_263BAB11C);
    }
    unint64_t v22 = *--v10;
    unint64_t v11 = v22;
  }
  while (v22);
LABEL_64:
  a1[1] = v4;
  uint64_t v23 = a1[2];
  if (a1[3] != v23) {
    a1[3] = v23;
  }
  a1[2] = a3;
  if (!v4)
  {
    uint64_t v20 = "s";
    DeviceFaultNotify("glhsm_dyn.cpp", 119, "tran", (char)"s");
    int v21 = 119;
LABEL_86:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_dyn.cpp", v21, v20);
  }
  while (BlueFin::patch_trigger((unint64_t)v4, (uint64_t)a1, byte_263BAB11A, &BlueFin::_patched_state))
  {
    double result = BlueFin::_patched_state;
    if (BlueFin::_patched_state) {
      return result;
    }
LABEL_71:
    char v25 = (uint64_t (*)())a1[1];
    unsigned int v31 = v25;
    if (BlueFin::patch_trigger((unint64_t)v25, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
      int v26 = (uint64_t (*)())BlueFin::_patched_state;
    }
    else {
      int v26 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))v25)(a1, BlueFin::__pkgStdEvt);
    }
    double v27 = &v31;
    while (v26 != v4)
    {
      v27[1] = v26;
      ++v27;
      if (BlueFin::patch_trigger((unint64_t)v26, (uint64_t)a1, BlueFin::__pkgStdEvt, &BlueFin::_patched_state)) {
        int v26 = (uint64_t (*)())BlueFin::_patched_state;
      }
      else {
        int v26 = (uint64_t (*)())((uint64_t (*)(void *, unsigned __int8 *))v26)(a1, BlueFin::__pkgStdEvt);
      }
    }
    unsigned int v28 = *v27;
    do
    {
      if (!BlueFin::patch_trigger((unint64_t)v28, (uint64_t)a1, byte_263BAB11C, &BlueFin::_patched_state)) {
        ((void (*)(void *, unsigned __int8 *))*v27)(a1, byte_263BAB11C);
      }
      int v29 = *--v27;
      unsigned int v28 = v29;
    }
    while (v29);
    __int16 v4 = (uint64_t (*)())a1[1];
  }
  double result = (void *)((uint64_t (*)(void *, unsigned __int8 *))v4)(a1, byte_263BAB11A);
  if (!result) {
    goto LABEL_71;
  }
  return result;
}

BOOL BlueFin::patch_trigger(unint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  int v4 = BlueFin::ulglme_qstate_patch_table_size;
  if (!BlueFin::ulglme_qstate_patch_table_size) {
    return 0;
  }
  uint64_t v5 = BlueFin::glme_qstate_patch_table;
  *a4 = 0;
  int v6 = v4 - 1;
  if (v6 < 0) {
    return 0;
  }
  int v7 = 0;
  while (1)
  {
    unint64_t v8 = *(void *)(v5 + 16 * ((v7 + v6) / 2));
    if (v8 >= a1) {
      break;
    }
    int v7 = (v7 + v6) / 2 + 1;
LABEL_8:
    if (v7 > v6) {
      return 0;
    }
  }
  if (v8 > a1)
  {
    int v6 = (v7 + v6) / 2 - 1;
    goto LABEL_8;
  }
  int v10 = *(unsigned __int8 **)(v5 + 16 * ((uint64_t)(v7 + v6 + (v7 + v6 < 0)) >> 1) + 8);
  unint64_t v11 = (uint64_t (*)(uint64_t, unsigned __int8 *, char *))*((void *)v10 + 1);
  if (!v11) {
    return 0;
  }
  if (!a3 || (int v12 = *a3, v12 == *v10))
  {
LABEL_16:
    char v15 = 1;
    *a4 = v11(a2, a3, &v15);
    return v15 != 0;
  }
  else
  {
    int v13 = v10 + 24;
    while (1)
    {
      unint64_t v11 = *(uint64_t (**)(uint64_t, unsigned __int8 *, char *))v13;
      if (!*(void *)v13) {
        return 0;
      }
      int v14 = *(v13 - 8);
      v13 += 16;
      if (v12 == v14) {
        goto LABEL_16;
      }
    }
  }
}

uint64_t (*BlueFin::GlMeSrdAsicinit::bri_wait4patchblockload(BlueFin::GlMeSrdAsicinit *this, BlueFin::GlMeSrdAsicinit *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7))()
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unsigned int v8 = *(unsigned __int8 *)a2;
  BOOL v9 = BlueFin::GlMeSrdAsicinit::bri_wait4patchload;
  if (v8 <= 4)
  {
    if (v8 != 2)
    {
      if (v8 == 3)
      {
        BlueFin::GlQueue::Remove((uint64_t)this + 40, 5);
        BlueFin::GlTimer::disarm((uint64_t)this + 656);
        return 0;
      }
      return v9;
    }
    int v14 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 200);
    long double v47 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
    double v48 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 200);
LABEL_13:
    if (!BlueFin::GlMeSrdAsicInitPatchLoader::QueuePacketIntoBuffer(v14)) {
      return 0;
    }
    char v15 = (char *)this + 40 * *((unsigned __int8 *)this + 619);
    uint64_t v16 = *((unsigned int *)v15 + 75);
    unsigned int v17 = *((_DWORD *)v15 + 80) - v16;
    unsigned int v18 = *((unsigned __int16 *)this + 118);
    if (v17 - v18 >= 4) {
      __int16 v19 = *((_WORD *)this + 118);
    }
    else {
      __int16 v19 = v18 - 4;
    }
    if (v17 > v18) {
      LOWORD(v17) = v19;
    }
    unsigned int v20 = (unsigned __int16)v17;
    if ((unsigned __int16)v17 <= 3u)
    {
      double v40 = "ulSize >= 4";
      DeviceFaultNotify("glmesrd_asicinit.cpp", 2680, "Bri_EswLoadBlockAndRequestCrc", (char)"ulSize >= 4");
      int v41 = 2680;
      goto LABEL_58;
    }
    __int16 v49 = v17;
    uint64_t v21 = *((void *)v15 + 39) + v16;
    int v22 = *((_DWORD *)v15 + 77) + v16;
    *((unsigned char *)this + 732) = 0;
    int v23 = v22;
    while (1)
    {
      if (v20 >= 0x3FC) {
        unsigned int v24 = 1020;
      }
      else {
        unsigned int v24 = v20;
      }
      unsigned int v25 = v24 & 0x3FC;
      if ((v24 & 0x3FC) == 0)
      {
        double v40 = "ulLen >= 4";
        DeviceFaultNotify("glmesrd_asicinit.cpp", 2700, "Bri_EswLoadBlockAndRequestCrc", (char)"ulLen >= 4");
        int v41 = 2700;
        goto LABEL_58;
      }
      int v26 = *(_DWORD *)(*((void *)this + 16) + 8);
      if ((v26 - 2) >= 2)
      {
        if (v26 == 1)
        {
          v51[0] = -2;
          v51[1] = v24 >> 2;
          *(_DWORD *)&v51[2] = -568892931;
          v51[6] = -64;
          *(_WORD *)double v52 = v23;
          BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v51);
          do
          {
            if (v25 >= 0x800) {
              int v28 = 2048;
            }
            else {
              int v28 = v25;
            }
            BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, (const unsigned __int8 *)(v21 + (v23 - v22)));
            v23 += v28;
            v25 -= v28;
          }
          while (v25);
          goto LABEL_39;
        }
        if (v26 != 5)
        {
          double v40 = "0";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 2761, "Bri_EswLoadBlockAndRequestCrc", (char)"0");
          int v41 = 2761;
          goto LABEL_58;
        }
      }
      v51[0] = -2;
      v51[1] = (v24 >> 2) - 1;
      *(_WORD *)&v51[2] = 19709;
      *(_WORD *)&v51[4] = v23;
      v51[6] = BYTE2(v23);
      v52[0] = HIBYTE(v23);
      BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v51);
      do
      {
        if (v25 >= 0x800) {
          int v27 = 2048;
        }
        else {
          int v27 = v25;
        }
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, (const unsigned __int8 *)(v21 + (v23 - v22)));
        v23 += v27;
        v25 -= v27;
      }
      while (v25);
LABEL_39:
      unsigned __int8 v50 = -4;
      BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, &v50);
      ++*((_DWORD *)this + 187);
      if ((v24 & 3) != 0)
      {
        int v29 = *(_DWORD *)(*((void *)this + 16) + 8);
        if ((v29 - 2) < 2 || v29 == 5)
        {
          *(_DWORD *)uint64_t v51 = 1291649278;
          *(_WORD *)&v51[4] = v23 + (v24 | 0xFFFC);
          v51[6] = BYTE2(v23);
          v52[0] = HIBYTE(v23);
          unsigned __int8 v50 = -4;
          unsigned int v31 = this;
        }
        else
        {
          if (v29 != 1)
          {
            double v40 = "0";
            DeviceFaultNotify("glmesrd_asicinit.cpp", 2793, "Bri_EswLoadBlockAndRequestCrc", (char)"0");
            int v41 = 2793;
            goto LABEL_58;
          }
          *(_DWORD *)uint64_t v51 = 1643971070;
          *(_WORD *)&v51[4] = -8681;
          v51[6] = -64;
          *(_WORD *)double v52 = v23 + (v24 | 0xFFFC);
          unsigned __int8 v50 = -4;
          unsigned int v31 = this;
        }
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(v31, v51);
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, (const unsigned __int8 *)(v21 + v23 + (v24 | 0xFFFFFFFC) - v22));
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, &v50);
        ++*((_DWORD *)this + 187);
      }
      v20 -= v24;
      if (!v20)
      {
        int v32 = *(_DWORD *)(*((void *)this + 16) + 8);
        if ((v32 - 2) < 2) {
          goto LABEL_53;
        }
        if (v32 != 1)
        {
          if (v32 == 5)
          {
LABEL_53:
            *(_DWORD *)uint64_t v51 = 1258094846;
            *(_WORD *)&v51[4] = v22;
            v51[6] = BYTE2(v22);
            v52[0] = HIBYTE(v22);
            *(_WORD *)&v52[1] = v49;
            char v53 = -4;
            unsigned int v33 = this;
            goto LABEL_55;
          }
          double v40 = "0";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 2819, "Bri_EswLoadBlockAndRequestCrc", (char)"0");
          int v41 = 2819;
LABEL_58:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v41, v40);
        }
        *(_DWORD *)uint64_t v51 = 570228990;
        v51[4] = 24;
        *(_WORD *)&v51[5] = v22;
        *(_WORD *)double v52 = v49;
        v52[2] = -4;
        unsigned int v33 = this;
LABEL_55:
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(v33, v51);
        ++*((_DWORD *)this + 187);
        int v14 = v48;
        BlueFin::GlMeSrdAsicInitPatchLoader::IncLastPacketSent(v48, v34, v35, v36, v37, v38, v39);
        *((void *)this + 86) = this;
        BlueFin::GlTimer::arm(v47, 5, 0, 0x5DCu);
        *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        if (*((unsigned __int8 *)this + 617) + *((unsigned __int8 *)this + 620) == 8) {
          return 0;
        }
        goto LABEL_13;
      }
    }
  }
  if (v8 == 5) {
    goto LABEL_64;
  }
  if (v8 != 12) {
    return v9;
  }
  if (*((unsigned char *)a2 + 1) != 14) {
    return 0;
  }
  int v10 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 200);
  unsigned __int8 v11 = *((unsigned char *)this + 618);
  if (*((unsigned __int8 *)this + 40 * v11 + 324) != *((unsigned __int8 *)this + 776)) {
    goto LABEL_64;
  }
  int v12 = *((_DWORD *)this + 10 * *((unsigned __int8 *)this + 618) + 82);
  int v13 = *((_DWORD *)this + 193);
  if (!*((unsigned char *)this + 638) && v12 == v13)
  {
    int v12 = *((_DWORD *)this + 10 * *((unsigned __int8 *)this + 618) + 75)
        + *((_DWORD *)this + 10 * *((unsigned __int8 *)this + 618) + 77);
    int v13 = *((_DWORD *)this + 192);
    goto LABEL_60;
  }
  if (!*((unsigned char *)this + 638))
  {
LABEL_64:
    BlueFin::GlMeSrdAsicinit::RetryBri(this, a2);
    return 0;
  }
LABEL_60:
  if (v12 != v13) {
    goto LABEL_64;
  }
  int v42 = *((unsigned __int8 *)this + 40 * *((unsigned __int8 *)this + 618) + 304);
  char v43 = *((unsigned char *)this + 620) - 1;
  *((unsigned char *)this + 62BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v43;
  *((unsigned char *)this + 618) = (v11 + 1) & 7;
  *((_DWORD *)this + 192) = 0;
  if (*((unsigned char *)this + 639))
  {
    if (v43) {
      return 0;
    }
    BOOL v9 = 0;
    *((unsigned char *)this + 639) = 0;
  }
  else
  {
    if (BlueFin::GlMeSrdAsicInitPatchLoader::SetNextBlock(v10, (uint64_t)a2, a3, a4, a5, a6, a7))
    {
      if (v42 != *((unsigned __int8 *)this + 272)) {
        return 0;
      }
      double v45 = "&GlMeSrdAsicinit::bri_wait4patchblockload";
      int v46 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4patchblockload;
    }
    else
    {
      if (*((unsigned char *)this + 620)) {
        return 0;
      }
      if ((*(unsigned int (**)(void))(**((void **)this + 16) + 256))(*((void *)this + 16))
        && ((*(uint64_t (**)(void))(**((void **)this + 16) + 32))(*((void *)this + 16)) & 1) == 0)
      {
        *(unsigned char *)(*((void *)this + 16) + 555) = 1;
      }
      BlueFin::GlMeSrdAsicinit::Bri_GetOutOfLegacy(this);
      double v45 = "&GlMeSrdAsicinit::esw_wait4version";
      int v46 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::esw_wait4version;
    }
    BlueFin::QHsm::tran(this, v46, (uint64_t)v45);
    return 0;
  }
  return v9;
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(BlueFin::GlMeSrdAsicinit *this, const unsigned __int8 *a2)
{
  uint64_t v2 = (unsigned __int8 *)MEMORY[0x270FA5388](this, a2);
  LOWORD(v4) = v3;
  int v6 = v5;
  int v7 = v2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (v2[698])
  {
    if (v3)
    {
      uint64_t v8 = v3;
      int v4 = 0;
      while (1)
      {
        int v10 = *v6++;
        int v9 = v10;
        if (v10 == 224) {
          break;
        }
        if (v9 == v2[696])
        {
          LOBYTE(v9) = 3;
          goto LABEL_10;
        }
        if (v9 == v2[697])
        {
          LOBYTE(v9) = 4;
          goto LABEL_10;
        }
LABEL_11:
        v15[(unsigned __int16)v4++] = v9;
        if ((unsigned __int16)v4 >= 0x1000u)
        {
          DeviceFaultNotify("glmesrd_asicinit.cpp", 3433, "Bri_SendAsicData", (char)"usEscSize < sizeof(aucBuffer)");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 3433, "usEscSize < sizeof(aucBuffer)");
        }
        if (!--v8) {
          goto LABEL_13;
        }
      }
      LOBYTE(v9) = 2;
LABEL_10:
      v15[(unsigned __int16)v4++] = -32;
      goto LABEL_11;
    }
LABEL_13:
    int v6 = v15;
  }
  if (v2[736])
  {
    int v12 = &unk_270EBE660;
    __int16 v13 = v4;
    int v14 = v6;
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        off_270EBE678((uint64_t)&v12, 0);
      }
    }
  }
  *((_DWORD *)v7 + 186) += (unsigned __int16)v4;
  return (*(uint64_t (**)(void, unsigned __int8 *, void))(**((void **)v7 + 14) + 40))(*((void *)v7 + 14), v6, (unsigned __int16)v4);
}

uint64_t BlueFin::GlDbgPeIf::SendAsicData(BlueFin::GlDbgPeIf *this, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this + 2) + 112))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlPosEng::SendAsicData(uint64_t this, unsigned __int8 *a2, __int16 a3)
{
  if (!*(unsigned char *)(*(void *)(this + 16) + 25964)) {
    return (*(uint64_t (**)(void, unsigned __int8 *, void))(**(void **)(this + 32) + 16))(*(void *)(this + 32), a2, a3);
  }
  return this;
}

uint64_t BlueFin::GlPeEngineCallBacks::OnAsicData(uint64_t this, unsigned __int8 *a2, int a3)
{
  unsigned int v3 = *(uint64_t (**)(uint64_t, unsigned __int8 *, void))(this + 40);
  if (v3)
  {
    unsigned __int16 v4 = a3;
    uint64_t v6 = this;
    if (a3 >= 2049)
    {
      do
      {
        (*(void (**)(void, unsigned __int8 *, uint64_t))(v6 + 40))(*(void *)(v6 + 8), a2, 2048);
        a2 += 2048;
        unsigned int v7 = v4;
        v4 -= 2048;
      }
      while (v7 > 0x1000);
      unsigned int v3 = *(uint64_t (**)(uint64_t, unsigned __int8 *, void))(v6 + 40);
    }
    uint64_t v8 = *(void *)(v6 + 8);
    return v3(v8, a2, (__int16)v4);
  }
  return this;
}

uint64_t BlueFin::GlDbgProxyGlEngineOnAsicData(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnAsicData(v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnAsicData(uint64_t this, char *a2, uint64_t a3)
{
  __int16 v8 = a3;
  if (!*(void *)(this + 808))
  {
    uint64_t v5 = this;
    *(unsigned char *)(this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    if (*(_DWORD *)(this + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)this, 522);
      BlueFin::GlDbgCodec::WriteArray((BlueFin::GlDbgCodec *)v5, a2, &v8);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 1);
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 784);
    if (v6) {
      this = v6(v5 + 608, a2, a3);
    }
    *(unsigned char *)(v5 + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    if (*(_DWORD *)(v5 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)v5, 522);
      unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32);
      return v7(v5, 1);
    }
  }
  return this;
}

void FireCallback::GlEngineOnAsicData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 504);
    if (v9)
    {
      uint64_t v12 = a2;
      __int16 v11 = a3;
      (*(void (**)(uint64_t, uint64_t *, __int16 *))(*(void *)v9 + 48))(v9, &v12, &v11);
      return;
    }
    int v10 = "fcb,fEngineOnAsicDataCb,nullptr";
  }
  else
  {
    int v10 = "fcb,GlEngineOnAsicData,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2>,void ()(unsigned char *,short)>::operator()()
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  v0 = *(uint64_t (**)(void))(**(void **)FireResourceMgr::fInstance + 96);

  return v0();
}

uint64_t BlueFin::GlMeSrdAsicInitCallback::OnAsicData(BlueFin::GlMeSrdAsicInitCallback *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, const unsigned __int8 *))(**(void **)(*((void *)this + 1) + 160)
                                                                    + 112))(*(void *)(*((void *)this + 1) + 160), a2);
}

uint64_t BlueFin::GlEventPump::Run(BlueFin::GlEventPump *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  v6[273] = (*(uint64_t (**)(void))(**(void **)v6 + 48))();
  if (a2) {
    *a2 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  }
  for (uint64_t i = 0; i != 112; i += 8)
  {
    uint64_t v8 = *(void *)((char *)this + i);
    if (v8) {
      BlueFin::GlActive::UpdateTimers(v8);
    }
  }
  for (uint64_t j = 0; j != 14; ++j)
  {
    while (1)
    {
      uint64_t v10 = *((void *)this + j);
      if (!v10 || !*(unsigned char *)(v10 + 87)) {
        break;
      }
      if ((_WORD)j == 0xFFFF) {
        goto LABEL_18;
      }
      uint64_t v11 = *((void *)this + (__int16)j);
      BlueFin::GlQueue::get((char *)(v11 + 40), v20);
      uint64_t v12 = *(void *)(v11 + 32);
      unint64_t v13 = *(void *)(v11 + 8);
      *(void *)(v11 + 32) = v13;
      do
      {
        unint64_t v21 = 0;
        if (BlueFin::patch_dispatch(v13, v11, v20, &v21)) {
          unint64_t v13 = v21;
        }
        else {
          unint64_t v13 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(v11 + 32))(v11, v20);
        }
        *(void *)(v11 + 32) = v13;
      }
      while (v13);
      uint64_t j = 0;
      *(void *)(v11 + 32) = v12;
    }
  }
LABEL_18:
  int v14 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  v14[273] = (*(uint64_t (**)(void))(**(void **)v14 + 48))();
  if (a3) {
    *a3 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 100000000;
  do
  {
    unsigned int v17 = *(BlueFin::GlActive **)((char *)this + v15);
    if (v17)
    {
      unsigned int CurrentTimeoutPeriod = BlueFin::GlActive::GetCurrentTimeoutPeriod(v17);
      if (CurrentTimeoutPeriod >= v16) {
        uint64_t v16 = v16;
      }
      else {
        uint64_t v16 = CurrentTimeoutPeriod;
      }
    }
    v15 += 8;
  }
  while (v15 != 112);
  return v16;
}

uint64_t BlueFin::GlActive::GetCurrentTimeoutPeriod(BlueFin::GlActive *this)
{
  unsigned int v1 = 99999999;
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    int v3 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    while (1)
    {
      int v4 = *(_DWORD *)(v2 + 20) + *(_DWORD *)(v2 + 16);
      if (v4 - v3 <= 0) {
        break;
      }
      if (v4 - v3 < v1) {
        unsigned int v1 = v4 - v3;
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return v1 + 1;
      }
    }
    unsigned int v1 = v4 == v3;
  }
  return v1 + 1;
}

uint64_t BlueFin::GlActive::UpdateTimers(uint64_t this)
{
  unsigned int v1 = (void *)(this + 96);
  uint64_t v2 = *(void *)(this + 96);
  if (v2)
  {
    uint64_t v3 = this;
    int v4 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    uint64_t v5 = (BlueFin::GlQueue *)(this + 40);
    do
    {
      int v6 = v4 - *(_DWORD *)(v2 + 20);
      if (v6 < 0)
      {
        uint64_t v11 = "slDeltaMs >= 0";
        DeviceFaultNotify("glhsm_active.cpp", 78, "UpdateTimers", (char)"slDeltaMs >= 0");
        int v12 = 78;
        goto LABEL_20;
      }
      int v7 = *(_DWORD *)(v2 + 16);
      if (v6 - v7 > *(_DWORD *)(v3 + 104)) {
        *(_DWORD *)(v3 + 104) = v6 - v7;
      }
      if (v6 > v7)
      {
        this = BlueFin::GlQueue::putFIFO(v5, *(unsigned __int8 *)(v2 + 25), *(unsigned char *)(v2 + 26));
        if (!this)
        {
          uint64_t v11 = "myQueue.putFIFO(t->myToutEvt.sig, t->myToutEvt.par)";
          DeviceFaultNotify("glhsm_active.cpp", 86, "UpdateTimers", (char)"myQueue.putFIFO(t->myToutEvt.sig, t->myToutEvt.par)");
          int v12 = 86;
          goto LABEL_20;
        }
        int v8 = *(unsigned __int8 *)(v2 + 24);
        if (v8 == 1)
        {
          uint64_t v9 = *(void **)(v2 + 8);
          uint64_t v10 = v1;
          if (v2 != *v1)
          {
            if (v9) {
              *uint64_t v9 = *(void *)v2;
            }
            uint64_t v10 = (void *)(*(void *)v2 + 8);
          }
          void *v10 = v9;
          *(unsigned char *)(v2 + 24) = 0;
        }
        else
        {
          if (v8 != 2)
          {
            uint64_t v11 = "0";
            DeviceFaultNotify("glhsm_active.cpp", 110, "UpdateTimers", (char)"0");
            int v12 = 110;
LABEL_20:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_active.cpp", v12, v11);
          }
          *(_DWORD *)(v2 + 20) += *(_DWORD *)(v2 + 16);
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  return this;
}

BOOL BlueFin::patch_dispatch(unint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4)
{
  if (BlueFin::ulglme_qstate_patch_table_size + 0x7FFFFFFF >= 0) {
    return 0;
  }
  int v4 = 0;
  int v5 = BlueFin::ulglme_qstate_patch_table_size - 1;
  while (1)
  {
    unint64_t v6 = *(void *)(BlueFin::glme_qstate_patch_table + 16 * ((v4 + v5) / 2));
    if (v6 >= a1) {
      break;
    }
    int v4 = (v4 + v5) / 2 + 1;
LABEL_7:
    if (v4 > v5) {
      return 0;
    }
  }
  if (v6 > a1)
  {
    int v5 = (v4 + v5) / 2 - 1;
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 **)(BlueFin::glme_qstate_patch_table + 16 * ((uint64_t)(v4 + v5 + (v4 + v5 < 0)) >> 1) + 8);
  uint64_t v9 = (uint64_t (*)(uint64_t, unsigned __int8 *, char *))*((void *)v8 + 1);
  if (!v9) {
    return 0;
  }
  int v10 = *a3;
  if (v10 == *v8)
  {
LABEL_14:
    char v13 = 1;
    *a4 = v9(a2, a3, &v13);
    return v13 != 0;
  }
  else
  {
    uint64_t v11 = v8 + 24;
    while (1)
    {
      uint64_t v9 = *(uint64_t (**)(uint64_t, unsigned __int8 *, char *))v11;
      if (!*(void *)v11) {
        return 0;
      }
      int v12 = *(v11 - 8);
      v11 += 16;
      if (v10 == v12) {
        goto LABEL_14;
      }
    }
  }
}

uint64_t BlueFin::GlDbgProxyGlEngineOnTimerRq(uint64_t a1)
{
  unsigned int v1 = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnTimerRq(v1);
}

uint64_t BlueFin::GlEngineImplStd::GetUserData(BlueFin::GlEngineImplStd *this)
{
  return *((void *)this + 73);
}

uint64_t BlueFin::GlPeEngineCallBacks::OnTimerRq(BlueFin::GlPeEngineCallBacks *this)
{
  unsigned int v1 = (uint64_t (*)(void))*((void *)this + 4);
  if (v1) {
    return v1(*((void *)this + 1));
  }
  else {
    return 0;
  }
}

uint64_t BlueFin::GlPeUtilsCallbacks::OnTimerRq(BlueFin::GlPeUtilsCallbacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 56))();
}

char *BlueFin::GlQueue::get@<X0>(char *this@<X0>, unsigned char *a2@<X8>)
{
  char v2 = *this;
  if (*this)
  {
    char v3 = this[1];
    if (*((_WORD *)this + 21))
    {
      --*((_WORD *)this + 21);
      int v4 = (__int16 *)*((void *)this + 4);
      __int16 v5 = *v4++;
      *(_WORD *)this = v5;
      *((void *)this + 4) = v4;
      if (v4 == *((__int16 **)this + 2)) {
        *((void *)this + 4) = *((void *)this + 1);
      }
    }
    else
    {
      *this = 0;
      this[47] &= ~this[46];
    }
    *a2 = v2;
  }
  else
  {
    *a2 = 0;
    char v3 = this[1];
  }
  a2[1] = v3;
  return this;
}

uint64_t (*BlueFin::GlReqSm::on(BlueFin::GlReqSm *this, const char *a2))()
{
  double result = 0;
  __int16 v5 = (BlueFin::GlPeRtiRequestor **)((char *)this + 54832);
  unint64_t v6 = (char *)this + 53561;
  int v7 = (BlueFin::GlRequestImpl **)((char *)this + 33184);
  switch(*a2)
  {
    case 2:
    case 0x2A:
      return result;
    case 3:
      if (*v6)
      {
        (*(void (**)(void, void, void, void, void, void, void, void))(**((void **)this + 39)
                                                                                               + 280))(*((void *)this + 39), 0, 0, 0, 0, 0, 0, 0);
        unsigned char *v6 = 0;
        (*(void (**)(void, void))(**((void **)this + 4149) + 120))(*((void *)this + 4149), 0);
        GlCustomLog(14, "Burst mode disabled\n");
      }
      return 0;
    case 7:
    case 0xA:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x1A:
    case 0x1C:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x29:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      GlCustomLog(14, "GlReqSm::Error: Substates of ON didnot handle the event %i\n");
      return 0;
    case 8:
      BlueFin::GlPeReqBag::TerminateRequest((uint64_t)this + 10880, *v7);
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *v7);
      GlCustomLog(14, "GlReqSm::Error: Substates of ON didnot handle the event %i causing the ON to Handle StopRequest\n");
      return 0;
    case 9:
      BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      BlueFin::GlTimer::disarm((uint64_t)this + 31584);
      BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      GlCustomLog(14, "GlReqSm::Error: Substates of ON didnot handle the event %i causing the ON to Handle Stop All requests\n", *(unsigned __int8 *)a2);
      BlueFin::QHsm::tran(this, (uint64_t (*)())BlueFin::GlReqSm::standby, (uint64_t)"&GlReqSm::standby");
      return 0;
    case 0xC:
      BlueFin::GlReqSm::ProcessChipData((__int16 *)this, a2);
      return 0;
    case 0x2D:
      if (BlueFin::GlPePendingBag::HasNILRReq((BlueFin::GlReqSm *)((char *)this + 6496))) {
        goto LABEL_17;
      }
      unint64_t v8 = 0;
      BOOL v9 = 1;
      do
      {
        uint64_t v10 = *((void *)this + v8 + 1360);
        if (v10 && (*(_DWORD *)(*(void *)(v10 + 8) + 16) - 1) < 2) {
          break;
        }
        BOOL v9 = v8++ < 0x47;
      }
      while (v8 != 72);
      if (v9)
      {
LABEL_17:
        GlCustomLog(13, "GlReqSm::CheckRtiEmergencyActive (LMS:%d): still in NILR session!\n");
        return 0;
      }
      if (!*((unsigned char *)this + 54680)) {
        return 0;
      }
      BlueFin::GlPeRtiRequestor::onRtiExitEmergencySession(*v5);
      double result = 0;
      *((unsigned char *)this + 5468BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      return result;
    case 0x2E:
      if (!*((unsigned char *)this + 54824) || *((unsigned char *)this + 54680)) {
        return 0;
      }
      BlueFin::GlPeRtiRequestor::onRtiEnterEmergencySession(*v5, (char *)this + 54688);
      double result = 0;
      *((unsigned char *)this + 5468BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    case 0x40:
      *((unsigned char *)this + 53968) = 1;
      GlCustomLog(14, "MI2: enable timer\n");
      return 0;
    case 0x41:
      GlCustomLog(14, "MI2: check disable timer\n");
      if (!BlueFin::GlPePendingBag::HasPosReq((BlueFin::GlReqSm *)((char *)this + 6496)))
      {
        unint64_t v11 = 0;
        BOOL v12 = 1;
        do
        {
          uint64_t v13 = *((void *)this + v11 + 1360);
          if (v13 && !*(_DWORD *)(*(void *)(v13 + 8) + 16)) {
            break;
          }
          BOOL v12 = v11++ < 0x47;
        }
        while (v11 != 72);
        if (!v12)
        {
          *((unsigned char *)this + 53968) = 0;
          BlueFin::GlTimer::disarm((uint64_t)this + 53928);
          GlCustomLog(14, "MI2: disable timer @Lms: %d\n");
        }
      }
      return 0;
    default:
      return BlueFin::QHsm::top;
  }
}

uint64_t (*(*BlueFin::GlReqSm::host_based_positioning(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlReqSm *this, const char *a2))()
{
  int v3 = *a2;
  if (v3 == 3)
  {
    *(_DWORD *)(*(void *)(a1 + 31800) + 4068) &= ~0x20u;
    uint64_t v7 = *(void *)(a1 + 33192);
    unint64_t v8 = *(void (**)(void))(v7 + 160);
    if (v8) {
      v8(*(void *)(v7 + 8));
    }
    BlueFin::GlNvMemImpl::Write(*(BlueFin::GlNvMemImpl **)(a1 + 6336));
    BlueFin::GlPeCntinMgr::StopCntin(*(BlueFin::GlPeCntinMgr **)(a1 + 6328));
  }
  else
  {
    double result = BlueFin::GlReqSm::on;
    if (v3 != 2) {
      return result;
    }
    uint64_t v5 = *(void *)(a1 + 33192);
    unint64_t v6 = *(void (**)(void, void, void))(v5 + 256);
    if (v6) {
      v6(*(void *)(v5 + 8), 0, *(void *)(a1 + 31800));
    }
  }
  return 0;
}

__int16 *BlueFin::GlReqSm::ProcessChipData(__int16 *this, const char *a2)
{
  int v2 = this[169];
  if (v2 >= 268) {
    __int16 v3 = 268;
  }
  else {
    __int16 v3 = this[169];
  }
  if (v2 >= 1)
  {
    int v4 = this;
    this = (__int16 *)(*(uint64_t (**)(void, __int16 *, void))(**((void **)this + 39) + 200))(*((void *)this + 39), this + 170, v3);
    int v5 = (__int16)(v4[169] - v3);
    v4[169] -= v3;
    if (v5 >= 1) {
      this = (__int16 *)memcpy(v4 + 170, (char *)v4 + (unsigned __int16)v3 + 340, (unsigned __int16)v5);
    }
  }
  if (*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) >= *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1232))
  {
    return (__int16 *)BlueFin::GlUtils::Report((uint64_t)"timeout_60s", a2);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdCtrlSm::SetAsicData(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2, int a3)
{
  if (!*((unsigned char *)this + 219)) {
    return BlueFin::GlMeSrdAsicinit::SetAsicData((uint64_t)this + 1760, a2, a3);
  }
  int v4 = (uint64_t (***)(void, unsigned __int8 *))*((void *)this + 15);
  if (!v4) {
    int v4 = (uint64_t (***)(void, unsigned __int8 *))*((void *)this + 14);
  }
  return (**v4)(v4, a2);
}

uint64_t (*(*(*BlueFin::GlReqSm::wait4me(BlueFin::GlReqSm *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlReqSm *this, const char *a2))()
{
  double result = 0;
  switch(*a2)
  {
    case 2:
      *((unsigned char *)this + 54569) = 0;
      int v8 = *((unsigned __int8 *)this + 54596);
      *((void *)this + 6705) = this;
      if (v8) {
        unsigned int v9 = 20000;
      }
      else {
        unsigned int v9 = 10000;
      }
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53608), 31, 0, v9);
      double result = 0;
      *((unsigned char *)this + 53632) = 1;
      return result;
    case 3:
      uint64_t v10 = 53608;
      goto LABEL_17;
    case 6:
    case 7:
    case 0xB:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x26:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      return result;
    case 8:
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *((BlueFin::GlRequestImpl **)this + 4148));
      return 0;
    case 9:
      GlCustomLog(14, "GlReqSm: remove all requests\n");
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      uint64_t v10 = 31584;
LABEL_17:
      BlueFin::GlTimer::disarm((uint64_t)this + v10);
      return 0;
    case 0xA:
      BlueFin::GlReqSm::SetAsstFromPend(this, 0, 0);
      return 0;
    case 0x11:
      if (*((unsigned char *)this + 54569)) {
        goto LABEL_20;
      }
      BlueFin::GlPePendingBag::GetPendingRequestTypes((uint64_t)this + 6496, &v13);
      if ((v13 & 0xFFFFCFFF) == 0
        && ((unsigned __int16)v13 & 0x3000) != 0
        && !*(unsigned char *)(*((void *)this + 784) + 1318))
      {
        goto LABEL_20;
      }
      if (*((__int16 *)this + 5132) <= 0
        && !*((unsigned char *)this + 31608)
        && !*((unsigned char *)this + 31648)
        && !*((unsigned char *)this + 31688))
      {
        BlueFin::GlReqSm::SetAsstFromPend(this, 1, 0);
LABEL_20:
        unint64_t v11 = "&GlReqSm::standby";
        BOOL v12 = (uint64_t (*)())BlueFin::GlReqSm::standby;
        goto LABEL_34;
      }
      BlueFin::GlReqSm::CreateMeJob(this);
      if ((*(unsigned int (**)(void))(**((void **)this + 784) + 1104))(*((void *)this + 784))
        && ((*(uint64_t (**)(void))(**((void **)this + 784) + 1088))(*((void *)this + 784)) & 1) == 0)
      {
        goto LABEL_20;
      }
      unint64_t v11 = "&GlReqSm::processing";
      BOOL v12 = (uint64_t (*)())BlueFin::GlReqSm::processing;
LABEL_34:
      BlueFin::QHsm::tran(this, v12, (uint64_t)v11);
      return 0;
    case 0x1A:
      BlueFin::GlTimer::disarm((uint64_t)this + 31584);
      double result = 0;
      *((_DWORD *)this + 2712) = 0;
      return result;
    case 0x1F:
    case 0x25:
      int v4 = *((_DWORD *)this + 3048);
      uint64_t v13 = &v15;
      char v14 = 3;
      int v15 = v4;
      uint64_t v16 = 0;
      if ((v4 & 0x100) != 0 || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 8))
      {
        int v5 = (const BlueFin::GlMePlatfStat *)*((void *)this + 4131);
        GlCustomLog(14, "GlReqSm::wait4me calling HandleFactoryTestFailure\n");
        if ((*((unsigned char *)v13 + 1) & 1) == 0) {
          BlueFin::GlReqSm::CreateNewReqFromPend(this);
        }
        BlueFin::GlPeReqBag::HandleFactoryTestFailure((BlueFin::GlReqSm *)((char *)this + 10880), v5);
        BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
        BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      }
      *((_DWORD *)this + 2712) = 0;
      uint64_t v6 = *((void *)this + 4149);
      if (*(unsigned char *)(v6 + 296))
      {
        uint64_t v7 = *(void (**)(void, void))(v6 + 80);
        if (v7)
        {
          v7(*(void *)(v6 + 8), 0);
          *(unsigned char *)(v6 + 296) = 0;
        }
      }
      BlueFin::QHsm::tran(this, (uint64_t (*)())BlueFin::GlReqSm::restart, (uint64_t)"&GlReqSm::restart");
      (*(void (**)(void, uint64_t, void))(**((void **)this + 4149) + 80))(*((void *)this + 4149), 6, 0);
      GlCustomLog(11, "GlReqSm::communication breakdown at %s: %d. GLL will be restarted!\n", "wait4me", 3335);
      return 0;
    default:
      return BlueFin::GlReqSm::host_based_positioning;
  }
}

uint64_t BlueFin::GlTimer::arm(BlueFin::GlTimer *this, char a2, char a3, unsigned int a4)
{
  if (*((unsigned __int8 *)this + 24) >= 3u)
  {
    uint64_t v13 = "GL_TIMER_ST_FREE == myState || GL_TIMER_ST_ONE_SHOT == myState || GL_TIMER_ST_PERIODIC == myState";
    DeviceFaultNotify("glhsm_timer.cpp", 51, "arm", (char)"GL_TIMER_ST_FREE == myState || GL_TIMER_ST_ONE_SHOT == myState || GL_TIMER_ST_PERIODIC == myState");
    int v14 = 51;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_timer.cpp", v14, v13);
  }
  if (!*((void *)this + 4))
  {
    uint64_t v13 = "mypActive";
    DeviceFaultNotify("glhsm_timer.cpp", 52, "arm", (char)"mypActive");
    int v14 = 52;
    goto LABEL_11;
  }
  if (a4 >= 0x7FFFFFFF)
  {
    uint64_t v13 = "deltaT < ulMaxDeltaT";
    DeviceFaultNotify("glhsm_timer.cpp", 54, "arm", (char)"deltaT < ulMaxDeltaT");
    int v14 = 54;
    goto LABEL_11;
  }
  int v8 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v8 + 48))();
  v8[273] = result;
  *((unsigned char *)this + 25) = a2;
  *((unsigned char *)this + 26) = a3;
  int v10 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  *((_DWORD *)this + 4) = a4;
  *((_DWORD *)this + 5) = v10;
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v11 = *((void *)this + 4);
    BOOL v12 = *(void **)(v11 + 96);
    *(void *)this = 0;
    *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12;
    if (v12) {
      *BOOL v12 = this;
    }
    *(void *)(v11 + 96) = this;
  }
  return result;
}

uint64_t BlueFin::GlTimer::disarm(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    uint64_t v1 = *(void *)(this + 32);
    if (v1)
    {
      if (*(unsigned __int8 *)(this + 24) - 3 <= 0xFFFFFFFD)
      {
        DeviceFaultNotify("glhsm_timer.cpp", 150, "disarm", (char)"myState == GL_TIMER_ST_ONE_SHOT || myState == GL_TIMER_ST_PERIODIC");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_timer.cpp", 150, "myState == GL_TIMER_ST_ONE_SHOT || myState == GL_TIMER_ST_PERIODIC");
      }
      uint64_t v3 = *(void *)(v1 + 96);
      int v2 = (void *)(v1 + 96);
      int v4 = *(void **)(this + 8);
      if (v3 != this)
      {
        if (v4) {
          void *v4 = *(void *)this;
        }
        int v2 = (void *)(*(void *)this + 8);
      }
      *int v2 = v4;
      *(unsigned char *)(this + 24) = 0;
    }
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicinit::SetAsicData(uint64_t this, unsigned __int8 *a2, int a3)
{
  uint64_t v5 = this;
  if (!*(unsigned char *)(this + 737))
  {
    int v65 = ***(uint64_t (****)(void))(this + 120);
    return v65();
  }
  uint64_t v6 = *(void *)(this + 128);
  if (*(_DWORD *)(v6 + 8) != 3
    || !*(unsigned char *)(v6 + 1418)
    || (this = BlueFin::QHsm::isIn(this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAsicinit::wait4Mcuversion), !this))
  {
    double v71 = &unk_270EBE6A8;
    __int16 v72 = a3;
    double v73 = a2;
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      this = off_270EBE6C0((uint64_t)&v71, 0);
    }
    *(_DWORD *)(v5 + 752) += a3;
    if (!a3) {
      return this;
    }
    uint64_t v31 = 0;
    int v32 = (_DWORD *)(v5 + 705);
    uint64_t v33 = v5 + 701;
    while (1)
    {
      LODWORD(v34) = *(unsigned __int8 *)(v5 + 732);
      if (v34 == 32)
      {
        uint64_t v34 = 0;
        while (*(unsigned __int8 *)(v33 + v34) != 254)
        {
          if (++v34 == 31) {
            goto LABEL_69;
          }
        }
        if (v34 == 31)
        {
LABEL_69:
          LOBYTE(v34) = 0;
          goto LABEL_73;
        }
        unint64_t v35 = 0;
        do
        {
          *(unsigned char *)(v5 + 700 + v35) = *(unsigned char *)(v5 + (v34 + v35 + 1) + 700);
          ++v35;
          int v36 = *(unsigned __int8 *)(v5 + 732);
        }
        while (v35 < (~v34 + v36));
        LOBYTE(v34) = ~(_BYTE)v34 + v36;
LABEL_73:
        *(unsigned char *)(v5 + 732) = v34;
      }
      if (!(_BYTE)v34 && a2[v31] != 254)
      {
        ++*(_DWORD *)(v5 + 760);
        goto LABEL_144;
      }
      if (!*(unsigned char *)(v5 + 698))
      {
        LOBYTE(v38) = a2[v31];
        goto LABEL_91;
      }
      if (!*(unsigned char *)(v5 + 735))
      {
        int v38 = a2[v31];
        if (v38 == 224)
        {
          *(unsigned char *)(v5 + 735) = 1;
          goto LABEL_144;
        }
        goto LABEL_90;
      }
      *(unsigned char *)(v5 + 735) = 0;
      int v37 = a2[v31];
      switch(v37)
      {
        case 4:
          LOBYTE(v38) = *(unsigned char *)(v5 + 697);
          break;
        case 3:
          LOBYTE(v38) = *(unsigned char *)(v5 + 696);
          break;
        case 2:
          LOBYTE(v38) = -32;
          break;
        default:
          this = GlCustomLog(11, "GlMeSrdAsicinit::Bri_EswLoadSetAsicData received unknown escaped character!\n");
          *(unsigned char *)(v5 + 732) = 0;
          ++*(_DWORD *)(v5 + 760);
          LOBYTE(v38) = a2[v31];
          goto LABEL_90;
      }
      a2[v31] = v38;
LABEL_90:
      LOBYTE(v34) = *(unsigned char *)(v5 + 732);
LABEL_91:
      *(unsigned char *)(v5 + 732) = v34 + 1;
      *(unsigned char *)(v5 + v34 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v38;
      int v39 = *(_DWORD *)(*(void *)(v5 + 128) + 8);
      if ((v39 - 2) >= 2)
      {
        if (v39 == 1)
        {
          unsigned int v44 = *(unsigned __int8 *)(v5 + 732);
          if (v44 != 10)
          {
            if (v44 >= 0x20)
            {
              uint64_t v54 = 0;
              int v55 = 0;
              *(unsigned char *)(v5 + 732) = 0;
              ++*(_DWORD *)(v5 + 760);
              do
              {
                int v56 = *(unsigned __int8 *)(v33 + v54);
                v55 |= v56 == 254;
                if (v55)
                {
                  uint64_t v57 = *(unsigned __int8 *)(v5 + 732);
                  *(unsigned char *)(v5 + 732) = v57 + 1;
                  *(unsigned char *)(v5 + v57 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v56;
                }
                ++v54;
              }
              while (v54 != 31);
            }
            goto LABEL_144;
          }
          if (*(unsigned __int8 *)(v5 + 700) == 254
            && !*(unsigned char *)(v5 + 701)
            && *(unsigned __int8 *)(v5 + 702) == 253
            && *(unsigned __int8 *)(v5 + 709) == 252)
          {
            int v45 = *(unsigned __int8 *)(v5 + 703);
            int v46 = *(unsigned __int8 *)(v5 + 704);
            if (v45 == 47 && v46 == 21)
            {
              long double v47 = v32;
              *(_DWORD *)(v5 + 768) = 0;
              *(_DWORD *)(v5 + 772) = *(unsigned __int16 *)(v5 + 705) | (*(unsigned __int8 *)(v5 + 707) << 16);
              *(unsigned char *)(v5 + 776) = *(unsigned char *)(v5 + 708);
              __int16 v74 = 3596;
              uint64_t v48 = *(void *)(v5 + 32);
              this = *(void *)(v5 + 8);
              *(void *)(v5 + 32) = this;
              do
              {
                uint64_t v75 = 0;
                if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
                  this = v75;
                }
                else {
                  this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
                }
                *(void *)(v5 + 32) = this;
              }
              while (this);
              goto LABEL_185;
            }
            if (v45 == 31)
            {
              *(unsigned char *)(v5 + 768) = v46;
              *(unsigned char *)(v5 + 769) = *(unsigned char *)(v5 + 705);
              __int16 v59 = 3340;
              goto LABEL_178;
            }
            if (!*(unsigned char *)(v5 + 703))
            {
              *(unsigned char *)(v5 + 768) = v46;
              *(_DWORD *)(v5 + 772) = *v32;
              __int16 v59 = 3084;
              goto LABEL_178;
            }
            if (v45 == 33 && !*(unsigned char *)(v5 + 704))
            {
              *(_DWORD *)(v5 + 768) = *v32;
              __int16 v59 = 3852;
LABEL_178:
              LOWORD(v75) = v59;
              this = BlueFin::QHsm::dispatch(v5, (unsigned __int8 *)&v75);
            }
LABEL_186:
            *(unsigned char *)(v5 + 732) = 0;
            ++*(_DWORD *)(v5 + 756);
            goto LABEL_144;
          }
          goto LABEL_144;
        }
        if (v39 != 5)
        {
          double v66 = "0";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 3545, "Bri_EswLoadSetAsicData", (char)"0");
          int v67 = 3545;
          goto LABEL_192;
        }
      }
      unsigned int v40 = *(unsigned __int8 *)(v5 + 732);
      if (v40 > 0x20)
      {
        double v66 = "m_aucEswLoadAsicDataSize <= _DIM(m_aucEswLoadAsicData)";
        DeviceFaultNotify("glmesrd_asicinit.cpp", 3587, "Bri_CheckForReceivedPacket_Carp", (char)"m_aucEswLoadAsicDataSize <= _DIM(m_aucEswLoadAsicData)");
        int v67 = 3587;
        goto LABEL_192;
      }
      if (v40 == 9)
      {
        if (*(unsigned __int8 *)(v5 + 700) != 254
          || *(unsigned char *)(v5 + 701)
          || *(unsigned __int8 *)(v5 + 702) != 253
          || *(unsigned __int8 *)(v5 + 708) != 252)
        {
          goto LABEL_144;
        }
        int v49 = *(unsigned __int8 *)(v5 + 703);
        if (v49 == 14)
        {
          int v42 = v32;
          __int16 v74 = 7436;
          uint64_t v43 = *(void *)(v5 + 32);
          this = *(void *)(v5 + 8);
          *(void *)(v5 + 32) = this;
          do
          {
            uint64_t v75 = 0;
            if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
              this = v75;
            }
            else {
              this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
            }
            *(void *)(v5 + 32) = this;
          }
          while (this);
          goto LABEL_159;
        }
        if (v49 == 15)
        {
          int v42 = v32;
          *(unsigned char *)(v5 + 772) = 0;
          *(_DWORD *)(v5 + 768) = *(_DWORD *)(v5 + 704);
          __int16 v74 = 3852;
          uint64_t v43 = *(void *)(v5 + 32);
          this = *(void *)(v5 + 8);
          *(void *)(v5 + 32) = this;
          do
          {
            uint64_t v75 = 0;
            if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
              this = v75;
            }
            else {
              this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
            }
            *(void *)(v5 + 32) = this;
          }
          while (this);
LABEL_159:
          *(void *)(v5 + 32) = v43;
          *(unsigned char *)(v5 + 732) = 0;
          ++*(_DWORD *)(v5 + 756);
          int v32 = v42;
        }
      }
      else
      {
        if (v40 != 13)
        {
          if (v40 >= 0x20)
          {
            uint64_t v50 = 0;
            int v51 = 0;
            *(unsigned char *)(v5 + 732) = 0;
            ++*(_DWORD *)(v5 + 760);
            do
            {
              int v52 = *(unsigned __int8 *)(v33 + v50);
              v51 |= v52 == 254;
              if (v51)
              {
                uint64_t v53 = *(unsigned __int8 *)(v5 + 732);
                *(unsigned char *)(v5 + 732) = v53 + 1;
                *(unsigned char *)(v5 + v53 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v52;
              }
              ++v50;
            }
            while (v50 != 31);
          }
          goto LABEL_144;
        }
        if (*(unsigned __int8 *)(v5 + 700) == 254
          && !*(unsigned char *)(v5 + 701)
          && *(unsigned __int8 *)(v5 + 702) == 253
          && *(unsigned __int8 *)(v5 + 712) == 252)
        {
          int v41 = *(unsigned __int8 *)(v5 + 703);
          if (v41 != 31)
          {
            int v58 = v41 & 0xF;
            if (v58 == 9)
            {
              int v60 = *(unsigned __int8 *)(v5 + 704);
              unsigned int v61 = v60 | (*(unsigned __int8 *)(v5 + 705) << 8);
              int v62 = *(unsigned __int8 *)(v5 + 708);
              int v63 = (*(unsigned __int8 *)(v5 + 710) << 16) | (*(unsigned __int8 *)(v5 + 709) << 8) | (*(unsigned __int8 *)(v5 + 711) << 24) | v62;
              if (((*(unsigned __int8 *)(v5 + 707) << 24) | (*(unsigned __int8 *)(v5 + 706) << 16) | v61) == 0xC0000A6C
                || (unsigned int v64 = (*(unsigned __int8 *)(v5 + 707) << 24) | (*(unsigned __int8 *)(v5 + 706) << 16) | v61 & 0xFFFFFC00,
                    v64 == -1073741824))
              {
                if ((v60 & 3) != 0)
                {
                  double v66 = "(usOffsetInBytes & 0x03) == 0";
                  DeviceFaultNotify("glmesrd_asicinit.cpp", 3686, "Bri_CheckForReceivedPacket_Carp", (char)"(usOffsetInBytes & 0x03) == 0");
                  int v67 = 3686;
                  goto LABEL_192;
                }
                long double v47 = v32;
                *(unsigned char *)(v5 + 768) = v61 >> 2;
                *(_DWORD *)(v5 + 772) = v63;
                __int16 v74 = 3084;
                uint64_t v48 = *(void *)(v5 + 32);
                this = *(void *)(v5 + 8);
                *(void *)(v5 + 32) = this;
                do
                {
                  uint64_t v75 = 0;
                  if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
                    this = v75;
                  }
                  else {
                    this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
                  }
                  *(void *)(v5 + 32) = this;
                }
                while (this);
              }
              else
              {
                if (v64 != -1073739776)
                {
                  double v66 = "0";
                  DeviceFaultNotify("glmesrd_asicinit.cpp", 3721, "Bri_CheckForReceivedPacket_Carp", (char)"0");
                  int v67 = 3721;
LABEL_192:
                  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v67, v66);
                }
                if ((v60 & 3) != 0)
                {
                  double v66 = "(usOffsetInBytes & 0x03) == 0";
                  DeviceFaultNotify("glmesrd_asicinit.cpp", 3703, "Bri_CheckForReceivedPacket_Carp", (char)"(usOffsetInBytes & 0x03) == 0");
                  int v67 = 3703;
                  goto LABEL_192;
                }
                if (v63 != v62)
                {
                  double v66 = "(ulData & 0xff) == ulData";
                  DeviceFaultNotify("glmesrd_asicinit.cpp", 3704, "Bri_CheckForReceivedPacket_Carp", (char)"(ulData & 0xff) == ulData");
                  int v67 = 3704;
                  goto LABEL_192;
                }
                long double v47 = v32;
                *(unsigned char *)(v5 + 768) = v61 >> 2;
                *(unsigned char *)(v5 + 769) = v62;
                __int16 v74 = 3340;
                uint64_t v48 = *(void *)(v5 + 32);
                this = *(void *)(v5 + 8);
                *(void *)(v5 + 32) = this;
                do
                {
                  uint64_t v75 = 0;
                  if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
                    this = v75;
                  }
                  else {
                    this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
                  }
                  *(void *)(v5 + 32) = this;
                }
                while (this);
              }
LABEL_185:
              *(void *)(v5 + 32) = v48;
              int v32 = v47;
            }
            else if (v58 == 10)
            {
              long double v47 = v32;
              *(_DWORD *)(v5 + 772) = *(unsigned __int16 *)(v5 + 708) | (*(unsigned __int8 *)(v5 + 710) << 16);
              *(unsigned char *)(v5 + 776) = *(unsigned char *)(v5 + 711);
              *(_DWORD *)(v5 + 768) = *(_DWORD *)(v5 + 704);
              __int16 v74 = 3596;
              uint64_t v48 = *(void *)(v5 + 32);
              this = *(void *)(v5 + 8);
              *(void *)(v5 + 32) = this;
              do
              {
                uint64_t v75 = 0;
                if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
                  this = v75;
                }
                else {
                  this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
                }
                *(void *)(v5 + 32) = this;
              }
              while (this);
              goto LABEL_185;
            }
            goto LABEL_186;
          }
          int v42 = v32;
          *(unsigned char *)(v5 + 772) = 1;
          *(_DWORD *)(v5 + 768) = *(_DWORD *)(v5 + 704);
          *(unsigned char *)(v5 + 773) = *(unsigned char *)(v5 + 708);
          __int16 v74 = 3852;
          uint64_t v43 = *(void *)(v5 + 32);
          this = *(void *)(v5 + 8);
          *(void *)(v5 + 32) = this;
          do
          {
            uint64_t v75 = 0;
            if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v74, &v75)) {
              this = v75;
            }
            else {
              this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
            }
            *(void *)(v5 + 32) = this;
          }
          while (this);
          goto LABEL_159;
        }
      }
LABEL_144:
      if (++v31 == a3) {
        return this;
      }
    }
  }
  double v71 = &unk_270EBE6A8;
  __int16 v72 = a3;
  double v73 = a2;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    this = off_270EBE6C0((uint64_t)&v71, 0);
  }
  *(_DWORD *)(v5 + 752) += a3;
  if (a3)
  {
    uint64_t v7 = 0;
    int v8 = "A0";
    int8x16_t v9 = (int8x16_t)xmmword_263BAC4B0;
    int8x16_t v10 = (int8x16_t)xmmword_263BAC4C0;
    int8x16_t v11 = (int8x16_t)xmmword_263BAC4D0;
    do
    {
      uint64_t v12 = *(unsigned __int8 *)(v5 + 732);
      int v13 = a2[v7];
      if (*(unsigned char *)(v5 + 732))
      {
        if ((v13 | 2) == 0x13) {
          goto LABEL_56;
        }
      }
      else
      {
        if (v13 != 176) {
          goto LABEL_56;
        }
        int v16 = v7 > a3 - 2 ? v7 : (int)v7 + 1;
        if (a3 != 1 && a2[v16]) {
          goto LABEL_56;
        }
      }
      *(unsigned char *)(v5 + 732) = v12 + 1;
      *(unsigned char *)(v5 + v12 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v13;
      unsigned int v14 = *(unsigned __int8 *)(v5 + 732);
      if (v14 >= 0x21)
      {
        double v66 = "m_aucEswLoadAsicDataSize <= _DIM(m_aucEswLoadAsicData)";
        DeviceFaultNotify("glmesrd_asicinit.cpp", 3574, "Mcu_EswLoadSetMcuData", (char)"m_aucEswLoadAsicDataSize <= _DIM(m_aucEswLoadAsicData)");
        int v67 = 3574;
        goto LABEL_192;
      }
      if (v14 == 2)
      {
        if (*(unsigned __int8 *)(v5 + 700) == 176 && !*(unsigned char *)(v5 + 701)) {
          goto LABEL_56;
        }
LABEL_27:
        *(unsigned char *)(v5 + 732) = 0;
        goto LABEL_56;
      }
      if (v14 == 32)
      {
        if (*(unsigned __int8 *)(v5 + 730) != 176 || *(unsigned char *)(v5 + 731) == 1) {
          goto LABEL_27;
        }
        int v15 = 32;
      }
      else
      {
        if (v14 < 4) {
          goto LABEL_56;
        }
        int v15 = *(unsigned __int8 *)(v5 + 732);
      }
      if (*(unsigned __int8 *)(v5 + (v15 - 2) + 700) == 176)
      {
        unsigned int v17 = *(unsigned __int8 *)(v5 + (v15 - 1) + 700) - 3;
        if (v17 <= 2)
        {
          unsigned __int8 v18 = v14 - 1;
          *(unsigned char *)(v5 + 732) = v18;
          *(unsigned char *)(v5 + v18 + 699) = 0x1311B0u >> (8 * v17);
          unsigned int v14 = *(unsigned __int8 *)(v5 + 732);
        }
      }
      if (v14 < 0x16 || *(unsigned __int8 *)(v5 + v14 - 2 + 700) != 176 || *(unsigned char *)(v5 + v14 - 1 + 700) != 1) {
        goto LABEL_56;
      }
      unsigned int v19 = *(unsigned __int8 *)(v5 + 704);
      if (*(unsigned char *)(v5 + 704))
      {
        int8x16_t v20 = (int8x16_t)vdupq_n_s32(v19);
        int16x8_t v21 = (int16x8_t)vbicq_s8(v11, (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v20, v9)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v20, v10))));
        v21.i32[0] = vaddvq_s16(v21);
        *(int8x8_t *)v21.i8 = vcnt_s8(*(int8x8_t *)v21.i8);
        v21.i16[0] = vaddlv_u8(*(uint8x8_t *)v21.i8);
        unsigned int v19 = v21.i32[0];
      }
      if (*(unsigned char *)(v5 + v19 + 5 + 700) != 3) {
        goto LABEL_27;
      }
      int v22 = *(unsigned __int8 *)(v5 + v19 + 8 + 700);
      int8x16_t v69 = v10;
      int8x16_t v70 = v9;
      int8x16_t v68 = v11;
      if (v22 == 160)
      {
        int v23 = v8;
        unsigned int v24 = *(void (**)(void))(**(void **)(v5 + 128) + 1248);
      }
      else if (v22 == 177)
      {
        int v23 = v8;
        unsigned int v24 = *(void (**)(void))(**(void **)(v5 + 128) + 1248);
      }
      else
      {
        if (*(unsigned __int8 *)(v5 + v19 + 7 + 700) != 176)
        {
          double v66 = "m_aucEswLoadAsicData[5 + flag_payload_size + 3] == 0xA0 || m_aucEswLoadAsicData[5 + flag_payload_size + "
                "3] == 0xB1 || m_aucEswLoadAsicData[5 + flag_payload_size + 2] == 0xB0";
          DeviceFaultNotify("glmesrd_asicinit.cpp", 3884, "mcuCheckForReceivedPacket_Pike", (char)"m_aucEswLoadAsicData[5 + flag_payload_size + 3] == 0xA0 || m_aucEswLoadAsicData[5 + flag_payload_size + 3] == 0xB1 || m_aucEswLoadAsicData[5 + flag_payload_size + 2] == 0xB0");
          int v67 = 3884;
          goto LABEL_192;
        }
        int v23 = v8;
        unsigned int v24 = *(void (**)(void))(**(void **)(v5 + 128) + 1248);
      }
      v24();
      __int16 v74 = 7692;
      uint64_t v25 = *(void *)(v5 + 32);
      unint64_t v26 = *(void *)(v5 + 8);
      *(void *)(v5 + 32) = v26;
      do
      {
        uint64_t v75 = 0;
        if (BlueFin::patch_dispatch(v26, v5, (unsigned __int8 *)&v74, &v75)) {
          unint64_t v26 = v75;
        }
        else {
          unint64_t v26 = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v74);
        }
        *(void *)(v5 + 32) = v26;
      }
      while (v26);
      *(void *)(v5 + 32) = v25;
      *(unsigned char *)(v5 + 732) = 0;
      ++*(_DWORD *)(v5 + 756);
      int v27 = *(unsigned __int8 *)(*(void *)(v5 + 128) + 1418);
      int v8 = v23;
      if (v27 == 2) {
        int v28 = "B1";
      }
      else {
        int v28 = v23;
      }
      BOOL v29 = v27 == 1;
      uint64_t v30 = "B0";
      if (!v29) {
        uint64_t v30 = v28;
      }
      this = GlCustomLog(15, "Received Mcu Version %s in response to Mcu Version Query\n", v30);
      int8x16_t v10 = v69;
      int8x16_t v9 = v70;
      int8x16_t v11 = v68;
LABEL_56:
      ++v7;
    }
    while (v7 != a3);
  }
  return this;
}

BOOL BlueFin::GlMeSrdAsicInitPatchLoader::SetNextBlock(BlueFin::GlMeSrdAsicInitPatchLoader *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  if (*((unsigned char *)this + 416))
  {
    unsigned int v8 = *((_DWORD *)this + 22);
    int v9 = *((_DWORD *)this + 17);
    unsigned int v10 = v8 - v9;
    unsigned int v11 = *((unsigned __int16 *)this + 18);
    if (v8 - v9 - v11 >= 4) {
      __int16 v12 = *((_WORD *)this + 18);
    }
    else {
      __int16 v12 = v11 - 4;
    }
    if (v10 > v11) {
      LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
    }
    unsigned int v13 = v9 + (unsigned __int16)v10;
    *((_DWORD *)this + 17) = v13;
    if (v13 >= v8)
    {
      unsigned int v14 = *((_DWORD *)this + 16) + 1;
      *((_DWORD *)this + 16) = v14;
      if (v14 < *((_DWORD *)this + 10)) {
        BlueFin::GlMeSrdAsicInitPatchLoader::InitSegment(this, a2, a3, a4, a5, a6, a7);
      }
    }
    *((unsigned char *)this + 416) = 0;
  }
  return *((_DWORD *)this + 16) < *((_DWORD *)this + 10);
}

uint64_t BlueFin::GlMeSrdTransactionManager::SetAsicData(BlueFin::GlMeSrdTransactionManager *this, unsigned __int8 *a2, int a3)
{
  return BlueFin::GlMeSrdPacketManager::SetAsicData((BlueFin::GlMeSrdTransactionManager *)((char *)this + 96), a2, a3);
}

uint64_t BlueFin::GlMeSrdPacketManager::SetAsicData(BlueFin::GlMeSrdPacketManager *this, unsigned __int8 *a2, int a3)
{
  uint64_t v7 = &unk_270EBDEC8;
  __int16 v8 = a3;
  int v9 = a2;
  if (*((unsigned char *)this + 6516) && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    BlueFin::GlMeSrd2HostData::SerializeImpl((uint64_t)&v7, 0);
  }
  return BlueFin::GlMeSrdPacketManager::ParseAsicData((uint64_t)this, a2, a3);
}

uint64_t BlueFin::GlMeSrdPacketManager::ParseAsicData(uint64_t this, unsigned __int8 *a2, int a3)
{
  int v3 = a3;
  uint64_t v4 = this;
  uint64_t v5 = (BOOL *)(this + 4236);
  if (*(unsigned char *)(this + 4237))
  {
    int v6 = 224;
    uint64_t v7 = a2;
  }
  else
  {
    uint64_t v7 = a2 + 1;
    int v6 = *a2;
  }
  __int16 v8 = &a2[a3];
  if (*(unsigned char *)(this + 4236)) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = *(_DWORD *)(this + 4232);
  }
  if (v7 > v8)
  {
    *(_DWORD *)(this + 4232) = v9;
    *(unsigned char *)(this + 4237) = 0;
    goto LABEL_122;
  }
  int v10 = 0;
  unsigned int v11 = (char *)(this + 136);
  BOOL v12 = *(unsigned char *)(this + 4236) != 0;
  unsigned int v13 = (unsigned __int8 *)(this + 138);
  unsigned int v14 = (int *)(this + 6596);
  long long v15 = xmmword_263BB1CB0;
  uint32x4_t v16 = (uint32x4_t)xmmword_263BB1C90;
  uint32x4_t v17 = (uint32x4_t)xmmword_263BB1CA0;
  while (v6 != 224)
  {
    if (!v12 && (!v5[2281] || v6 != v5[2282] && v6 != v5[2283]))
    {
      if (v9 > 0xFFF) {
        goto LABEL_44;
      }
      BOOL v12 = 0;
LABEL_42:
      v11[v9] = v6;
LABEL_43:
      ++v9;
      goto LABEL_45;
    }
    ++v10;
LABEL_45:
    int v25 = *v7++;
    int v6 = v25;
    if (v7 > v8)
    {
      char v67 = 0;
      goto LABEL_120;
    }
  }
  if (v7 != v8)
  {
    int v19 = *v7++;
    int v18 = v19;
    if (v12)
    {
      BOOL v12 = v18 != 0;
      if (v18) {
        v10 += 2;
      }
      goto LABEL_45;
    }
    if (v18 == 2)
    {
      if (v9 > 0xFFF) {
        goto LABEL_44;
      }
      BOOL v12 = 0;
      v11[v9] = -32;
      goto LABEL_43;
    }
    if (v18 != 1)
    {
      if (v5[2281] && v18 == 3)
      {
        if (v9 > 0xFFF) {
          goto LABEL_44;
        }
        BOOL v12 = 0;
        LOBYTE(v6) = v5[2282];
      }
      else
      {
        if (!v5[2281] || v18 != 4 || v9 > 0xFFF) {
          goto LABEL_44;
        }
        BOOL v12 = 0;
        LOBYTE(v6) = v5[2283];
      }
      goto LABEL_42;
    }
    if (v9 > *(unsigned __int16 *)(v4 + 6592)) {
      *(_WORD *)(v4 + 6592) = v9;
    }
    if (v9 < 3)
    {
LABEL_44:
      v10 += v9 + 4;
      BOOL v12 = 1;
      unsigned int v9 = 0;
      goto LABEL_45;
    }
    unsigned int v20 = v9 - 1;
    *(_DWORD *)(v4 + 4232) = v9 - 1;
    if ((_WORD)v9 == 1)
    {
      unsigned int v21 = 0;
    }
    else
    {
      LOBYTE(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      unsigned int v22 = v9 - 1;
      int v23 = v11;
      do
      {
        char v24 = *v23++;
        --v22;
        unsigned int v21 = BlueFin::GlUtlCrc::ucCrcTable[(v24 ^ v21)];
      }
      while ((_WORD)v22);
    }
    if (*(unsigned __int8 *)(v4 + v20 + 136) != ((v21 >> 4) | (16 * v21))) {
      goto LABEL_118;
    }
    unsigned int v26 = *(unsigned __int8 *)(v4 + 137);
    if (v26 > 0x1F) {
      goto LABEL_118;
    }
    if (*(unsigned char *)(v4 + 137))
    {
      uint32x4_t v27 = (uint32x4_t)vdupq_n_s32(v26);
      unsigned int v26 = vaddvq_s32(vaddq_s32((int32x4_t)(*(_OWORD *)&vshlq_u32(v27, v17) & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)(*(_OWORD *)&vshlq_u32(v27, v16) & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01))));
    }
    unsigned int v28 = v26 + 2;
    uint64_t v79 = (unsigned int *)v14;
    int8x16_t v80 = (int8x16_t)v15;
    uint32x4_t v77 = v17;
    uint32x4_t v78 = v16;
    unsigned int v70 = v9 - 1;
    if (v20 >= v26 + 5)
    {
      unsigned int v29 = (unsigned __int16)(v9 - v26 - 3);
      if ((_WORD)v9 - (_WORD)v26 == 3)
      {
        unsigned int v30 = 0;
        int v36 = 1;
      }
      else
      {
        double v71 = v13;
        double v73 = v11;
        int v75 = v3;
        unsigned int v30 = 0;
        unsigned __int16 v31 = 0;
        uint64_t v32 = v4 + v28 + 136;
        int v33 = 1;
        do
        {
          unsigned int v34 = *(unsigned __int8 *)(v32 + v30 + 1);
          int v35 = *(unsigned __int8 *)(v32 + v31) | (v34 >> 6 << 8) & 0xFBFF | (((v34 >> 5) & 1) << 10);
          this = (*(uint64_t (**)(void, void))(**(void **)(v4 + 120) + 376))(*(void *)(v4 + 120), v34 & 0x1F);
          if (!this) {
            int v33 = 0;
          }
          v31 += v35 + 3;
          unsigned int v30 = v31;
        }
        while (v29 > v31);
        int v36 = v33;
        int v3 = v75;
        unsigned int v13 = v71;
        unsigned int v11 = v73;
        long long v15 = (__int128)v80;
        uint32x4_t v17 = v77;
        uint32x4_t v16 = v78;
        unsigned int v20 = v70;
      }
      BOOL v37 = v29 != v30 || v36 == 0;
      unsigned int v14 = (int *)v79;
      if (v37) {
        goto LABEL_118;
      }
    }
    else
    {
      if (v20 != v28) {
        goto LABEL_118;
      }
      if (!v26) {
        GlCustomLog(12, "PacketMgr::Received Empty Packet from ESW!\n");
      }
    }
    unsigned int v38 = v5[2];
    int v39 = *v11;
    unsigned __int8 v40 = v39 - v38;
    if (v39 != v38)
    {
      GlCustomLog(12, "PacketMgr::Message Lost detected(%u)\n", (v39 - v38));
      *(_DWORD *)(v4 + 6544) += v40;
      unsigned int v38 = *(unsigned __int8 *)(v4 + 136);
    }
    __int16 v74 = v11;
    int v76 = v3;
    this = GlCustomLog(15, "PacketMgr::Received Packet with SeqId %u\n", v38);
    void v5[2] = *(unsigned char *)(v4 + 136) + 1;
    int v41 = *(unsigned __int8 *)(v4 + 137);
    unsigned __int16 v42 = *(_WORD *)(v4 + 4232) - 2;
    __int16 v72 = v13;
    if (*(unsigned char *)(v4 + 137))
    {
      char v81 = *(unsigned char *)(v4 + 137);
      int v82 = *(unsigned __int16 *)(v4 + 4232) - 2;
      unsigned int v43 = 0;
      while (2)
      {
        switch((1 << v43) & v41)
        {
          case 1:
            ++v13;
            --v82;
            v41 &= 0xFEu;
            goto LABEL_108;
          case 2:
            unsigned int v46 = *v13++;
            unsigned int v45 = v46;
            char v47 = v5[3];
            unsigned __int8 v48 = v46 + ~v47;
            if (v48)
            {
              GlCustomLog(12, "PacketMgr::Acknowlegment lost(%u)!\n", v48);
              if (v5[2284]) {
                goto LABEL_106;
              }
              uint64_t v49 = 0;
              unsigned int v50 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
              unsigned int v51 = (v45 - v47 - 2);
              int v52 = ((_WORD)v51 + 4) & 0x1FC;
              uint32x4_t v53 = (uint32x4_t)vdupq_n_s32(v51);
              int16x4_t v54 = vdup_n_s16(v45);
              do
              {
                uint64_t v55 = v4 + 8 * v49;
                if (*(_DWORD *)(v55 + 6596))
                {
                  unsigned int v56 = 0;
                  int16x4_t v57 = vdup_n_s16(*(unsigned __int8 *)(v55 + 6600));
                  int16x4_t v58 = (int16x4_t)0x3000200010000;
                  do
                  {
                    int8x8_t v59 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)vcgeq_u32(v53, (uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v56), v80))), (int8x8_t)vceq_s16((int16x4_t)(*(void *)&v57 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&vadd_s16(v54, (int16x4_t)veor_s8((int8x8_t)v58, (int8x8_t)0xFF00FF00FF00FFLL)) & 0xFF00FF00FF00FFLL)));
                    if (v59.i8[0] & 1) != 0 || (v59.i8[2] & 1) != 0 || (v59.i8[4] & 1) != 0 || (v59.i8[6]) {
                      *(_DWORD *)(v55 + 6596) = 0;
                    }
                    v56 += 4;
                    int16x4_t v58 = vadd_s16(v58, (int16x4_t)0x4000400040004);
                  }
                  while (v52 != v56);
                }
                ++v49;
              }
              while (v49 != 10);
            }
            else
            {
              if (v5[2284]) {
                goto LABEL_106;
              }
              unsigned int v50 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
            }
            int v62 = v79;
            uint64_t v63 = 10;
            while (1)
            {
              unsigned int v64 = *v62;
              if (*v62)
              {
                if (*((unsigned __int8 *)v62 + 4) == v45) {
                  break;
                }
              }
              v62 += 2;
              if (!--v63) {
                goto LABEL_106;
              }
            }
            unsigned int v65 = v50 - v64;
            if (v50 >= v64)
            {
              if (v65 < 0x3A99)
              {
                unsigned int v66 = (unsigned __int16)v65 / 0xFAu;
                if (v66 >= 8) {
                  unsigned int v66 = 8;
                }
                ++*(_DWORD *)(v4 + 4 * v66 + 6552);
              }
              else
              {
                GlCustomLog(11, "PacketMgr::Latency incoherent(%u for ack %u)\n", v65, v45);
              }
              *int v62 = 0;
            }
            else
            {
              GlCustomLog(11, "PacketMgr::Latency timestamp incoherent(%u, %u)\n", *v62, v50);
            }
LABEL_106:
            --v82;
            v41 &= 0xFDu;
            v5[3] = v45;
            this = GlCustomLog(15, "PacketMgr::Acknowledgement Received for SeqId %u\n", v45);
            if ((v81 & 4) == 0) {
              this = BlueFin::GlMeSrdPacketManager::ReliableAckReceived(v4, v5[3]);
            }
            goto LABEL_108;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_108;
          case 4:
            int v60 = *v13;
            GlCustomLog(12, "PacketMgr::ESW reported Wrong Reliable SeqId(Last Valid: %u)!\n", v60);
            if ((v81 & 2) == 0)
            {
              int8x16_t v68 = "bAckReceived";
              DeviceFaultNotify("glmesrd_packet_manager.cpp", 339, "PacketReceived", (char)"bAckReceived");
              int v69 = 339;
              break;
            }
            v41 &= 0xFBu;
            --v82;
            ++v13;
            this = BlueFin::GlMeSrdPacketManager::ReliableNackReceived((BlueFin::GlMeSrdPacketManager *)v4, v5[3], v60);
LABEL_108:
            if (v43 <= 6)
            {
              ++v43;
              if (v41) {
                continue;
              }
            }
            unsigned __int16 v42 = v82;
            if (!v41) {
              goto LABEL_111;
            }
            int8x16_t v68 = "ucFlags == 0";
            DeviceFaultNotify("glmesrd_packet_manager.cpp", 343, "PacketReceived", (char)"ucFlags == 0");
            int v69 = 343;
            break;
          case 8:
            int v61 = *v13++;
            --v82;
            v41 &= 0xF7u;
            this = GlCustomLog(12, "PacketMgr::ESW reported message lost (%u messages)!\n", v61);
            *(_DWORD *)(v4 + 6548) += v61;
            goto LABEL_108;
          default:
            if (((1 << v43) & v41) == 0x10)
            {
              int v44 = *v13++;
              --v82;
              v41 &= 0xEFu;
              this = GlCustomLog(12, "PacketMgr::ESW reported Garbage(%uB)!\n", v44);
            }
            goto LABEL_108;
        }
        break;
      }
LABEL_126:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", v69, v68);
    }
LABEL_111:
    unsigned int v14 = (int *)v79;
    if ((v42 & 0x8000) != 0)
    {
      int8x16_t v68 = "sLen >= 0";
      DeviceFaultNotify("glmesrd_packet_manager.cpp", 344, "PacketReceived", (char)"sLen >= 0");
      int v69 = 344;
      goto LABEL_126;
    }
    ++*(_DWORD *)(v4 + 6536);
    int v3 = v76;
    if (v42)
    {
      this = (*(uint64_t (**)(void, unsigned __int8 *, void))(**(void **)(v4 + 128) + 16))(*(void *)(v4 + 128), v13, v42);
      if ((this & 1) == 0)
      {
        this = GlCustomLog(12, "PacketMgr::Garbage detected in packet!\n");
        unsigned int v13 = v72;
        unsigned int v11 = v74;
        long long v15 = (__int128)v80;
        uint32x4_t v17 = v77;
        uint32x4_t v16 = v78;
        unsigned int v20 = v70;
LABEL_118:
        unsigned int v9 = 0;
        v10 += v20 + 4;
        BOOL v12 = 1;
        goto LABEL_45;
      }
      unsigned int v9 = 0;
      BOOL v12 = 1;
      unsigned int v13 = v72;
      unsigned int v11 = v74;
    }
    else
    {
      unsigned int v9 = 0;
      BOOL v12 = 1;
      unsigned int v13 = v72;
      unsigned int v11 = v74;
    }
    long long v15 = (__int128)v80;
    uint32x4_t v17 = v77;
    uint32x4_t v16 = v78;
    goto LABEL_45;
  }
  char v67 = 1;
LABEL_120:
  *(_DWORD *)(v4 + 4232) = v9;
  *uint64_t v5 = v12;
  v5[1] = v67;
  if ((_WORD)v10)
  {
    this = GlCustomLog(12, "PacketMgr::Garbage received  (%uB)\n", (unsigned __int16)v10);
    *(_DWORD *)(v4 + 6532) += (unsigned __int16)v10;
  }
LABEL_122:
  *(_DWORD *)(v4 + 6524) += v3;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicInitPatchLoader::QueuePacketIntoBuffer(BlueFin::GlMeSrdAsicInitPatchLoader *this)
{
  uint64_t v1 = this;
  if (!*((unsigned char *)this + 417))
  {
    if (*((unsigned char *)this + 421))
    {
      if (*((unsigned __int8 *)this + 72) == *((unsigned __int8 *)this + 40 * *((unsigned __int8 *)this + 418) + 104))
      {
        if (!BlueFin::GlMeSrdAsicInitPatchLoader::IsSamePacket(this) && *((_DWORD *)v1 + 16) < *((_DWORD *)v1 + 10)) {
          goto LABEL_7;
        }
      }
      else if (!*((unsigned char *)this + 420))
      {
        for (uint64_t i = 0; i != 320; i += 40)
        {
          uint64_t v5 = (char *)this + i;
          *((_DWORD *)v5 + 27) = 0;
          *((_DWORD *)v5 + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
          *((void *)v5 + 12) = 0;
          v5[104] = 0;
        }
        *((_WORD *)this + 209) = 0;
        *((unsigned char *)this + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((unsigned char *)this + 422) = 0;
        uint64_t v2 = 1;
        *((unsigned char *)this + 416) = 1;
        unsigned int v3 = 0;
        goto LABEL_13;
      }
      return 0;
    }
LABEL_7:
    unsigned int v3 = *((unsigned __int8 *)v1 + 419);
    uint64_t v2 = 1;
    *((unsigned char *)v1 + 416) = 1;
    this = v1;
LABEL_13:
    BlueFin::GlMeSrdAsicInitPatchLoader::CopyPacketIntoBuffer(this, v3);
    return v2;
  }
  --*((unsigned char *)this + 417);
  return 1;
}

BlueFin::GlMeSrdAsicInitPatchLoader *BlueFin::GlMeSrdAsicInitPatchLoader::IncLastPacketSent(BlueFin::GlMeSrdAsicInitPatchLoader *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7)
{
  ++*((unsigned char *)this + 420);
  ++*((unsigned char *)this + 421);
  unsigned int v7 = ++*((unsigned char *)this + 422);
  *((unsigned char *)this + 419) = (*((unsigned char *)this + 419) + 1) & 7;
  if (v7 <= 7 && !*((unsigned char *)this + 417)) {
    return (BlueFin::GlMeSrdAsicInitPatchLoader *)BlueFin::GlMeSrdAsicInitPatchLoader::SetNextBlock(this, a2, a3, a4, a5, a6, a7);
  }
  return this;
}

BOOL BlueFin::GlMeSrdAsicInitPatchLoader::IsSamePacket(BlueFin::GlMeSrdAsicInitPatchLoader *this)
{
  char v1 = *((unsigned char *)this + 419) - 1;
  if (v1 < 0) {
    char v1 = 7;
  }
  uint64_t v2 = (char *)this + 40 * v1;
  return *((_DWORD *)v2 + 25) == *((_DWORD *)this + 17)
      && *((unsigned __int8 *)this + 40 * v1 + 104) == *((unsigned __int8 *)this + 72)
      && *((_DWORD *)v2 + 24) == *((_DWORD *)this + 16)
      && *((_DWORD *)this + 10 * v1 + 27) == *((_DWORD *)this + 19)
      && *((_DWORD *)this + 10 * v1 + 30) == *((_DWORD *)this + 22);
}

uint64_t BlueFin::GlMeSrdPacketManager::ReliableAckReceived(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 13874))
  {
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 347, "ReliableAckReceived", (char)"!m_bMessageReliableStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", 347, "!m_bMessageReliableStarted");
  }
  uint64_t v2 = *(void *)(this + 13880);
  if (v2)
  {
    while (!*(unsigned char *)(v2 + 49))
    {
LABEL_7:
      uint64_t v2 = *(void *)(v2 + 88);
      if (!v2) {
        return this;
      }
    }
    uint64_t v3 = 0;
    while (*(unsigned __int8 *)(v2 + v3 + 50) != a2)
    {
      if (*(unsigned __int8 *)(v2 + 49) == ++v3) {
        goto LABEL_7;
      }
    }
    return BlueFin::GlMeSrdPacketManager::ProcessAckedElement((void *)this, v2);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdPacketManager::ProcessAckedElement(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 *)a1[1735];
  do
  {
    uint64_t v5 = (void (*)(void, void))*((void *)v4 + 8);
    if (v5) {
      v5(*((void *)v4 + 9), v4[80]);
    }
    BlueFin::GlTimer::disarm((uint64_t)(v4 + 8));
    uint64_t result = BlueFin::GlMeSrdPacketManager::RemoveEventFromQueue((BlueFin::GlMeSrdPacketManager *)a1, 5, *v4);
    if (v4 == (unsigned __int8 *)a2) {
      break;
    }
    uint64_t v4 = (unsigned __int8 *)*((void *)v4 + 11);
  }
  while (v4);
  uint64_t v7 = a1[1736];
  a1[1736] = a1[1735];
  a1[1735] = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v7;
  __int16 v8 = (void *)(*(void *)(a2 + 56) + *(unsigned __int16 *)(a2 + 54));
  if (v8 == (void *)((char *)a1 + 13844)) {
    __int16 v8 = (void *)((char *)a1 + 6676);
  }
  a1[1732] = v8;
  return result;
}

uint64_t BlueFin::GlMeSrdPacketManager::RemoveEventFromQueue(BlueFin::GlMeSrdPacketManager *this, int a2, int a3)
{
  unsigned __int8 v5 = 0;
  int v6 = (char *)this + 40;
  memset(var10, 0, sizeof(var10));
  int v7 = 31;
  do
  {
    uint64_t result = (uint64_t)BlueFin::GlQueue::get(v6, &v17);
    unsigned int v9 = (char *)var10 + 2 * v5;
    int v10 = v17;
    *unsigned int v9 = v17;
    int v11 = v18;
    v9[1] = v18;
    if (!v10) {
      break;
    }
    if (v10 != a2 || v11 != a3) {
      ++v5;
    }
    --v7;
  }
  while (v7);
  if (v5)
  {
    uint64_t v13 = v5;
    unsigned int v14 = (char *)var10 + 1;
    do
    {
      int v15 = *(v14 - 1);
      char v16 = *v14;
      v14 += 2;
      uint64_t result = BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)v6, v15, v16);
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t (*BlueFin::GlMeSrdAsicinit::bri_startup_asic(BlueFin::GlMeSrdAsicinit *this, unsigned __int8 *a2))()
{
  uint64_t result = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  if (v4 <= 5)
  {
    if (v4 != 2)
    {
      if (v4 != 3) {
        return BlueFin::QHsm::top;
      }
      return result;
    }
    int v5 = *(unsigned __int8 *)(*((void *)this + 16) + 1418);
    if ((v5 | 4) == 4)
    {
LABEL_40:
      *((void *)this + 86) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdAsicinit *)((char *)this + 656), 6, 0, 0xFu);
      uint64_t result = 0;
      *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    }
    *((unsigned char *)this + 732) = 0;
    v36[2] = xmmword_263BAC5CF;
    v36[3] = unk_263BAC5DF;
    v37[0] = xmmword_263BAC5EF;
    *(_OWORD *)((char *)v37 + 9) = *(long long *)((char *)&xmmword_263BAC5EF + 9);
    v36[0] = xmmword_263BAC5AF;
    v36[1] = unk_263BAC5BF;
    v34[6] = xmmword_263BAC668;
    v34[7] = unk_263BAC678;
    v34[8] = xmmword_263BAC688;
    v34[2] = xmmword_263BAC628;
    v34[3] = unk_263BAC638;
    v34[5] = unk_263BAC658;
    v34[4] = xmmword_263BAC648;
    v34[1] = unk_263BAC618;
    v34[0] = xmmword_263BAC608;
    int v35 = 28350213;
    memcpy(__dst, &unk_263BAC69C, sizeof(__dst));
    memcpy(v32, &unk_263BAC7D7, 0x13FuLL);
    long long v28 = xmmword_263BAC996;
    long long v29 = unk_263BAC9A6;
    long long v30 = xmmword_263BAC9B6;
    long long v31 = unk_263BAC9C6;
    long long v24 = xmmword_263BAC956;
    long long v25 = unk_263BAC966;
    long long v26 = xmmword_263BAC976;
    long long v27 = unk_263BAC986;
    *(_OWORD *)unsigned int v20 = xmmword_263BAC916;
    long long v21 = unk_263BAC926;
    long long v22 = xmmword_263BAC936;
    long long v23 = unk_263BAC946;
    v18[8] = xmmword_263BACA56;
    v18[9] = unk_263BACA66;
    v18[10] = xmmword_263BACA76;
    _OWORD v18[4] = xmmword_263BACA16;
    v18[5] = unk_263BACA26;
    v18[6] = xmmword_263BACA36;
    v18[7] = unk_263BACA46;
    v18[0] = xmmword_263BAC9D6;
    v18[1] = unk_263BAC9E6;
    __int16 v19 = 432;
    _OWORD v18[2] = xmmword_263BAC9F6;
    v18[3] = unk_263BACA06;
    if ((v5 - 4) > 0xFFFFFFFC)
    {
      int v6 = "A0";
      if (v5 == 2) {
        int v6 = "B1";
      }
      if (v5 == 1) {
        int v6 = "B0";
      }
      GlCustomLog(15, "GlMeSrdAsicinit::Mcu_SendAutobaudBypassSequnce() MCU %s Bypass Enabled\n", v6);
      int v7 = (*(uint64_t (**)(void))(**((void **)this + 16) + 1368))();
      if (v5 == 1 && v7)
      {
        __int16 v8 = (unsigned __int8 *)v34;
        unsigned int v9 = this;
      }
      else if (v5 == 1)
      {
        __int16 v8 = (unsigned __int8 *)v36;
        unsigned int v9 = this;
      }
      else
      {
        int v17 = (*(uint64_t (**)(void))(**((void **)this + 16) + 1368))(*((void *)this + 16));
        if (v5 == 2 && v17)
        {
          __int16 v8 = v32;
          unsigned int v9 = this;
        }
        else if (v5 == 2)
        {
          __int16 v8 = __dst;
          unsigned int v9 = this;
        }
        else
        {
          if ((*(unsigned int (**)(void))(**((void **)this + 16) + 1368))(*((void *)this + 16))) {
            __int16 v8 = (unsigned __int8 *)v18;
          }
          else {
            __int16 v8 = v20;
          }
          unsigned int v9 = this;
        }
      }
      BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(v9, v8);
      goto LABEL_40;
    }
    BOOL v12 = "ucMcuByass == MCU_BYPASS_75B0 || ucMcuByass == MCU_BYPASS_75B1 || ucMcuByass == MCU_BYPASS_76A0";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3103, "Mcu_SendAutobaudBypassSequnce", (char)"ucMcuByass == MCU_BYPASS_75B0 || ucMcuByass == MCU_BYPASS_75B1 || ucMcuByass == MCU_BYPASS_76A0");
    int v13 = 3103;
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v13, v12);
  }
  if (v4 == 6)
  {
    uint64_t v10 = *((void *)this + 16);
    int v11 = *(_DWORD *)(v10 + 8);
    if ((v11 - 1) >= 3)
    {
      if (v11 == 5)
      {
        *((unsigned char *)this + 638) = 0;
        *((unsigned char *)this + 696) = *(unsigned char *)(v10 + 356);
        *((unsigned char *)this + 697) = *(unsigned char *)(v10 + 357);
        BOOL v14 = *(_DWORD *)(v10 + 352) == 2;
        *((unsigned char *)this + 698) = v14;
        if (v14) {
          (*(void (**)(void))(**((void **)this + 15) + 16))(*((void *)this + 15));
        }
        *((unsigned char *)this + 737) = 1;
        memset(v32, 128, 16);
        *((unsigned char *)this + 732) = 0;
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v32);
        if ((*(_DWORD *)(*((void *)this + 16) + 352) - 1) > 1)
        {
          int v15 = "&GlMeSrdAsicinit::bri_wait4version";
          char v16 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4version;
        }
        else
        {
          int v15 = "&GlMeSrdAsicinit::bri_wait4flowcontrol";
          char v16 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4flowcontrol;
        }
        BlueFin::QHsm::tran(this, v16, (uint64_t)v15);
        return 0;
      }
      BOOL v12 = "ERROR :Asic Type Not Supported: Check your RfType\n";
      DeviceFaultNotify("glmesrd_asicinit.cpp", 490, "bri_startup_asic", (char)"ERROR :Asic Type Not Supported: Check your RfType\n");
      int v13 = 490;
    }
    else
    {
      BOOL v12 = "ERROR :Asic Type Not Supported: Check your RfType\n";
      DeviceFaultNotify("glmesrd_asicinit.cpp", 508, "bri_startup_asic", (char)"ERROR :Asic Type Not Supported: Check your RfType\n");
      int v13 = 508;
    }
    goto LABEL_19;
  }
  if (v4 != 12) {
    return BlueFin::QHsm::top;
  }
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::bri_wait4asic_ready(BlueFin::GlMeSrdAsicinit *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t result = BlueFin::GlMeSrdAsicinit::loading;
  switch(*a2)
  {
    case 2:
      int v5 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 40);
      char v6 = 0;
      goto LABEL_15;
    case 3:
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 5);
      BlueFin::GlTimer::disarm((uint64_t)this + 656);
      return 0;
    case 5:
      unsigned int v7 = a2[1];
      if (v7 >= 3)
      {
        (*(void (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
        __int16 v8 = "&GlMeSrdAsicinit::off";
        unsigned int v9 = BlueFin::GlMeSrdAsicinit::off;
        goto LABEL_42;
      }
      *((_DWORD *)this + 158) &= 0xFE19FFFF;
      int v5 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 40);
      char v6 = v7 + 1;
LABEL_15:
      BlueFin::GlQueue::putFIFO(v5, 6, v6);
      return 0;
    case 6:
      *((unsigned char *)this + 732) = 0;
      int v10 = *(_DWORD *)(*((void *)this + 16) + 8);
      if ((v10 - 2) < 2) {
        goto LABEL_9;
      }
      if (v10 == 1)
      {
        *(_WORD *)&_OWORD v23[4] = -875;
        *(_DWORD *)long long v23 = 536674559;
        int v11 = this;
      }
      else
      {
        if (v10 != 5)
        {
          DeviceFaultNotify("glmesrd_asicinit.cpp", 2850, "Bri_RequestDebugSfr", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 2850, "0");
        }
LABEL_9:
        char v24 = -4;
        *(void *)long long v23 = 0xC0000A5409FD00FFLL;
        int v11 = this;
      }
      BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(v11, v23);
      ++*((_DWORD *)this + 187);
      char v15 = a2[1];
      *((void *)this + 86) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdAsicinit *)((char *)this + 656), 5, v15, 0x1F4u);
      uint64_t result = 0;
      *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    case 0xC:
      int v12 = a2[1];
      if (v12 != 13) {
        goto LABEL_19;
      }
      if (*((unsigned __int8 *)this + 768) != 149) {
        goto LABEL_36;
      }
      int v13 = *((_DWORD *)this + 158);
      if ((*((unsigned char *)this + 769) & 4) == 0)
      {
        int v14 = v13 | 0x40000;
LABEL_25:
        *((_DWORD *)this + 158) = v14;
        goto LABEL_36;
      }
      *((_DWORD *)this + 158) = v13 | 0x20000;
      *((unsigned char *)this + 636) = 1;
      (*(void (**)(void, uint64_t))(**((void **)this + 14) + 72))(*((void *)this + 14), 1);
      int v12 = a2[1];
LABEL_19:
      if (v12 == 29 || v12 == 27)
      {
        int v14 = *((_DWORD *)this + 158) | 0x100000;
        goto LABEL_25;
      }
      if (v12 != 12 || *((unsigned char *)this + 768) != 77) {
        goto LABEL_36;
      }
      int v17 = *((_DWORD *)this + 193);
      if ((v17 & 0xF7) == 0x80)
      {
        int v18 = *((_DWORD *)this + 158);
        if ((v18 & 0x1800000) != 0)
        {
          BOOL v19 = (v17 & 8) == 0;
          int v20 = 0x400000;
          int v21 = 0x200000;
          goto LABEL_33;
        }
      }
      else if ((v17 & 0xF7) == 0x40)
      {
        int v18 = *((_DWORD *)this + 158);
        BOOL v19 = (v17 & 8) == 0;
        int v20 = 0x1000000;
        int v21 = 0x800000;
LABEL_33:
        if (v19) {
          int v20 = v21;
        }
        int v14 = v18 | v20;
        goto LABEL_25;
      }
LABEL_36:
      uint64_t result = 0;
      int v22 = *((_DWORD *)this + 158);
      if ((v22 & 0x60000) != 0 && (*(void *)&v22 & 0x180000) != 0x80000)
      {
        if ((v22 & 0x20000) != 0 || !*(unsigned char *)(*((void *)this + 16) + 556))
        {
          GlCustomLog(12, "GlMeSrdAsicinit::Debbugger detected or run without loading is enabled. Exiting Legacy!\n");
          BlueFin::GlMeSrdAsicinit::Bri_GetOutOfLegacy(this);
          __int16 v8 = "&GlMeSrdAsicinit::esw_wait4version";
          unsigned int v9 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::esw_wait4version;
        }
        else
        {
          __int16 v8 = "&GlMeSrdAsicinit::bri_wait4patchload";
          unsigned int v9 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4patchload;
        }
LABEL_42:
        BlueFin::QHsm::tran(this, v9, (uint64_t)v8);
        return 0;
      }
      return result;
    default:
      return result;
  }
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::bri_wait4version(BlueFin::GlMeSrdAsicinit *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t result = BlueFin::GlMeSrdAsicinit::loading;
  switch(*a2)
  {
    case 2:
      BlueFin::GlMeSrdAsicinit::Bri_RequestHwVersion(this);
      unsigned int v5 = *((_DWORD *)this + 185) + 300;
      *((void *)this + 86) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdAsicinit *)((char *)this + 656), 6, 0, v5);
      uint64_t result = 0;
      *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      *((_DWORD *)this + 158) = 0;
      return result;
    case 3:
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 6);
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 5);
      BlueFin::GlTimer::disarm((uint64_t)this + 656);
      return 0;
    case 5:
      unsigned int v6 = ++*((unsigned char *)this + 733);
      if (v6 < 2)
      {
        unsigned int v7 = "&GlMeSrdAsicinit::bri_wait4bri";
        __int16 v8 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4bri;
      }
      else
      {
        (*(void (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
        unsigned int v7 = "&GlMeSrdAsicinit::off";
        __int16 v8 = BlueFin::GlMeSrdAsicinit::off;
      }
      goto LABEL_27;
    case 6:
      if (a2[1] > 1u)
      {
        unsigned int v9 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
        *((void *)this + 86) = this;
        char v13 = 5;
        char v12 = 0;
        unsigned int v11 = 300;
      }
      else
      {
        memset(v21, 128, sizeof(v21));
        *((unsigned char *)this + 732) = 0;
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v21);
        BlueFin::GlMeSrdAsicinit::Bri_RequestHwVersion(this);
        unsigned int v9 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
        char v10 = a2[1] + 1;
        unsigned int v11 = *((_DWORD *)this + 185) + 200;
        *((void *)this + 86) = this;
        char v12 = v10;
        char v13 = 6;
      }
      BlueFin::GlTimer::arm(v9, v13, v12, v11);
      uint64_t result = 0;
      *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    case 0xC:
      if (a2[1] != 12 || *((unsigned char *)this + 768)) {
        return 0;
      }
      uint64_t v14 = *((unsigned int *)this + 193);
      (*(void (**)(void, uint64_t))(**((void **)this + 14) + 48))(*((void *)this + 14), v14);
      (*(void (**)(void, uint64_t))(**((void **)this + 16) + 176))(*((void *)this + 16), v14);
      uint64_t v15 = *((void *)this + 16);
      *(unsigned char *)(v15 + 1423) = 1;
      int v16 = v14 & 0xF000FFFE;
      if ((v14 & 0xF000FFFE) - 805306382 > 6 || ((1 << ((v14 & 0xFE) - 14)) & 0x55) == 0) {
        BlueFin::GlImplGnss::m_ucActiveSvIdMapVersiouint64_t n = 0;
      }
      if (v16 != 805306386 && v16 != 805306388)
      {
        BOOL v19 = "GlMeSrdAsicinit::HW Asic Version Not Supported(0x%x)\n";
        DeviceFaultNotify("glmesrd_asicinit.cpp", 902, "bri_wait4version", (char)"GlMeSrdAsicinit::HW Asic Version Not Supported(0x%x)\n");
        int v20 = 902;
        goto LABEL_36;
      }
      if (*(_DWORD *)(v15 + 352) == 1)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15) & 0xF0FFFFFE) == 0x30FE0012
          || ((*(uint64_t (**)(void))(**((void **)this + 16) + 16))(*((void *)this + 16)) & 0xF0FFFFFE) == 0x30FE0014)
        {
          (*(void (**)(void))(**((void **)this + 15) + 64))(*((void *)this + 15));
        }
        (*(void (**)(void, void, void))(**((void **)this + 16) + 200))(*((void *)this + 16), 0, 0);
        int v18 = *(_DWORD *)(*((void *)this + 16) + 8);
        if ((v18 - 1) < 3 || v18 == 5)
        {
          if (v16 == 805306386)
          {
            unsigned int v7 = "&GlMeSrdAsicinit::bri_wait4gpioconfig";
            __int16 v8 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4gpioconfig;
          }
          else
          {
            unsigned int v7 = "&GlMeSrdAsicinit::bri_wait4asic_ready";
            __int16 v8 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4asic_ready;
          }
          goto LABEL_27;
        }
        BOOL v19 = "GlMeSrdAsicinit::Need to add support for unknown asic type\n";
        DeviceFaultNotify("glmesrd_asicinit.cpp", 956, "bri_wait4version", (char)"GlMeSrdAsicinit::Need to add support for unknown asic type\n");
        int v20 = 956;
LABEL_36:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v20, v19);
      }
      *(_DWORD *)(v15 + 352) = 1;
      *(_WORD *)(v15 + 356) = 4881;
      unsigned int v7 = "&GlMeSrdAsicinit::bri_wait4flowcontrol";
      __int16 v8 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4flowcontrol;
LABEL_27:
      BlueFin::QHsm::tran(this, v8, (uint64_t)v7);
      return 0;
    default:
      return result;
  }
}

uint64_t (*BlueFin::GlReqSm::idle(uint64_t a1, unsigned char *a2))()
{
  uint64_t result = 0;
  switch(*a2)
  {
    case 2:
      unsigned int v11 = (unsigned char *)(a1 + 54568);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 6272) + 1072))(*(void *)(a1 + 6272))
        && *(void *)(a1 + 312))
      {
        int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 6272) + 1104))(*(void *)(a1 + 6272));
        uint64_t v13 = 70;
        if (v12) {
          uint64_t v13 = 84;
        }
        GlCustomLog(14, "GlReqSm::idle ShouldBeUsingOnChipMe = %c\n", v13);
        BlueFin::GlPosEng::ReinitMeasEng(*(BlueFin::GlPosEng **)(a1 + 6264), v14);
      }
      if (*v11)
      {
        BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)(a1 + 40), 7, 0);
        uint64_t result = 0;
        *unsigned int v11 = 0;
      }
      else
      {
        if (*(_DWORD *)(a1 + 10848)) {
          goto LABEL_33;
        }
        *(void *)(a1 + 31616) = a1;
        BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 31584), 26, 0, 0x3E8u);
        uint64_t result = 0;
        *(unsigned char *)(a1 + 31608) = 1;
      }
      return result;
    case 3:
    case 6:
    case 0xB:
    case 0xC:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x2A:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      return result;
    case 7:
    case 0xA:
    case 0x31:
      BlueFin::GlTimer::disarm(a1 + 31584);
      if (BlueFin::GlPePendingBag::HasReq(a1 + 6496, 8)
        && BlueFin::GlPePendingBag::GetFactTestItem((BlueFin::GlPePendingBag *)(a1 + 6496)) == 4)
      {
        uint64_t v5 = *(void *)(a1 + 6272);
        *(void *)(v5 + 128) = 0x3E63DD3DC0000000;
        *(_WORD *)(v5 + 138) = 1000;
      }
      if (BlueFin::GlPePendingBag::HasReq(a1 + 6496, 8)
        && !BlueFin::GlPePendingBag::GetFactTestItem((BlueFin::GlPePendingBag *)(a1 + 6496)))
      {
        *(_WORD *)(*(void *)(a1 + 6272) + 138) = 250;
      }
      BlueFin::GlPePendingBag::GetPendingRequestTypes(a1 + 6496, &v15);
      BOOL v6 = (v15 & 0x3000) != 0 && (v15 & 0xFFFFCFFF) == 0;
      *(unsigned char *)(*(void *)(a1 + 6272) + 1318) = v6;
      BlueFin::GlReqSm::SetAsicParams((BlueFin::GlReqSm *)a1);
      unsigned int v7 = *(_DWORD **)(a1 + 6272);
      int v8 = v7[6504];
      if (v8) {
        *(_DWORD *)(*(void *)(a1 + 6280) + 342BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
      }
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v7 + 1040))(v7))
      {
        if (*a2 == 10) {
          BlueFin::GlReqSm::SetAsstFromPend((BlueFin::GlReqSm *)a1, 0, 0);
        }
        unsigned int v9 = "&GlReqSm::wait4nullme";
        char v10 = (uint64_t (*)())BlueFin::GlReqSm::wait4nullme;
      }
      else
      {
        (*(void (**)(void))(**(void **)(a1 + 312) + 208))(*(void *)(a1 + 312));
        if (*a2 == 10) {
          BlueFin::GlReqSm::SetAsstFromPend((BlueFin::GlReqSm *)a1, 0, 0);
        }
        unsigned int v9 = "&GlReqSm::wait4me";
        char v10 = (uint64_t (*)())BlueFin::GlReqSm::wait4me;
      }
      goto LABEL_32;
    case 8:
      BlueFin::GlPePendingBag::TerminateRequest(a1 + 6496, *(BlueFin::GlRequestImpl **)(a1 + 33184));
      goto LABEL_33;
    case 9:
      BlueFin::GlPePendingBag::TerminateAll(a1 + 6496);
      BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlPeReqBag *)(a1 + 10880));
      BlueFin::GlTimer::disarm(a1 + 31584);
      goto LABEL_33;
    case 0x1A:
      BlueFin::GlTimer::disarm(a1 + 31584);
      if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 11504)))
      {
        unsigned int v9 = "&GlReqSm::restart";
        char v10 = (uint64_t (*)())BlueFin::GlReqSm::restart;
LABEL_32:
        BlueFin::QHsm::tran((void *)a1, v10, (uint64_t)v9);
      }
LABEL_33:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = BlueFin::QHsm::top;
      break;
  }
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::bri_wait4patchload(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  unsigned int v4 = BlueFin::GlMeSrdAsicinit::loading;
  if (v3 != 3)
  {
    if (v3 == 2)
    {
      uint64_t v6 = *(void *)(a1 + 128);
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v6);
      if (*(unsigned char *)(v6 + 1212)) {
        int v7 = *(_DWORD *)(v6 + 1216);
      }
      *(_DWORD *)(v6 + 16) = v7;
      if (v7 == 805437445)
      {
        int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 184))(*(void *)(a1 + 128));
        uint64_t v9 = *(void *)(a1 + 128);
        int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 184))(v9);
        if (*(unsigned char *)(v9 + 1212)) {
          int v10 = *(_DWORD *)(v9 + 1216);
        }
        *(_DWORD *)(v9 + 16) = v10;
        BOOL v11 = v8 == v10;
      }
      else
      {
        BOOL v11 = 0;
      }
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 128) + 256))(*(void *)(a1 + 128)) & 1) != 0
        || ((*(uint64_t (**)(void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128)) & 1) != 0)
      {
        int v12 = *(unsigned char **)(a1 + 128);
        BOOL v13 = v12[555] != 0;
      }
      else
      {
        BOOL v13 = 0;
        int v12 = *(unsigned char **)(a1 + 128);
      }
      if ((*(uint64_t (**)(unsigned char *))(*(void *)v12 + 256))(v12))
      {
        uint64_t v14 = *(void *)(a1 + 128);
        unsigned int v15 = 1020;
        if (*(unsigned char *)(a1 + 738))
        {
          if (*(unsigned char *)(v14 + 555)) {
            unsigned int v15 = 4096;
          }
          else {
            unsigned int v15 = 1020;
          }
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 128);
        unsigned int v15 = 1020;
      }
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 184))(v14);
      if (*(unsigned char *)(v14 + 1212)) {
        int v17 = *(_DWORD *)(v14 + 1216);
      }
      else {
        int v17 = v16;
      }
      *(_DWORD *)(v14 + 16) = v17;
      int v18 = *(_DWORD **)(a1 + 128);
      int v19 = v18[2];
      int v20 = (*(uint64_t (**)(_DWORD *))(*(void *)v18 + 40))(v18);
      if (!BlueFin::GlMeSrdAsicInitPatchLoader::Init((BlueFin::GlMeSrdAsicInitPatchLoader *)(a1 + 200), v17, v15, (const char *)(v11 | v13), v19, v20))
      {
        DeviceFaultNotify("glmesrd_asicinit.cpp", 1299, "bri_wait4patchload", (char)"bPatchFound");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 1299, "bPatchFound");
      }
      int v21 = "Patch loading";
      if (v13) {
        int v21 = "Retention Check";
      }
      GlCustomLog(12, "GlMeSrdAsicinit::Starting %s: %s\n", v21, *(const char **)(a1 + 248));
      if (v11) {
        GlCustomLog(12, "GlMeSrdAsicinit:: Patch will jump to ROM\n");
      }
      *(unsigned char *)(a1 + 733) = 0;
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
      }
      *(unsigned char *)(a1 + 736) = 0;
      GlCustomLog(12, "Disabling @ha\n");
    }
    else
    {
      if (v3 != 1) {
        return v4;
      }
      if (!*(unsigned char *)(a1 + 638))
      {
        *(void *)(a1 + 8) = BlueFin::GlMeSrdAsicinit::bri_wait4patchblockload;
        uint64_t v5 = *(void *)(a1 + 16);
        if (*(void *)(a1 + 24) != v5) {
          *(void *)(a1 + 24) = v5;
        }
        unsigned int v4 = 0;
        *(void *)(a1 + 16) = "&GlMeSrdAsicinit::bri_wait4patchblockload";
        return v4;
      }
    }
    return 0;
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
  }
  *(unsigned char *)(a1 + 736) = 1;
  GlCustomLog(12, "Renabling @ha\n");
  unsigned int v4 = 0;
  *(unsigned char *)(a1 + 733) = 0;
  return v4;
}

uint64_t (*BlueFin::GlMeSrdAsicinit::loading(uint64_t a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) < 2) {
    return 0;
  }
  if (v2 == 25)
  {
LABEL_5:
    BlueFin::QHsm::tran((void *)a1, BlueFin::GlMeSrdAsicinit::off, (uint64_t)"&GlMeSrdAsicinit::off");
    return 0;
  }
  if (v2 == 5)
  {
    (*(void (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112));
    goto LABEL_5;
  }
  return BlueFin::QHsm::top;
}

uint64_t (*(*BlueFin::GlMeSrdSyncIn::wait4arm(BlueFin::GlMeSrdSyncIn *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t result = 0;
  unsigned int v4 = *a2;
  if (v4 > 0x27)
  {
    if (v4 == 40) {
      return result;
    }
    if (v4 == 41)
    {
      BlueFin::GlMeSrdSyncIn::DisarmESW(this);
      (*(void (**)(void, uint64_t, double))(**((void **)this + 15) + 184))(*((void *)this + 15), 5, 0.0);
      uint64_t v5 = "&GlMeSrdSyncIn::wait4disarm";
      uint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdSyncIn::wait4disarm;
      goto LABEL_9;
    }
  }
  else
  {
    if (v4 - 2 < 2) {
      return result;
    }
    if (v4 == 13)
    {
      if (a2[1]) {
        return 0;
      }
      uint64_t v5 = "&GlMeSrdSyncIn::wait4pulse";
      uint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdSyncIn::wait4pulse;
LABEL_9:
      BlueFin::QHsm::tran(this, v6, (uint64_t)v5);
      return 0;
    }
  }
  return BlueFin::GlMeSrdSyncIn::running;
}

uint64_t (*(*BlueFin::GlMeSrdSyncIn::wait4pulse(BlueFin::GlMeSrdSyncIn *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 > 0x27)
  {
    if (v3 != 40)
    {
      if (v3 == 41)
      {
        BlueFin::GlMeSrdSyncIn::DisarmESW(this);
        (*(void (**)(void, uint64_t, double))(**((void **)this + 15) + 184))(*((void *)this + 15), 5, 0.0);
        goto LABEL_16;
      }
      if (v3 != 43) {
        return BlueFin::GlMeSrdSyncIn::running;
      }
      if (*((double *)this + 28) == -1.0)
      {
        DeviceFaultNotify("glmesrd_syncin_ctrl.cpp", 246, "wait4pulse", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_syncin_ctrl.cpp", 246, "0");
      }
      GlCustomLog(14, "Received Sync In: Lms %.6f\n", *((double *)this + 28));
      (*(void (**)(void, uint64_t, double))(**((void **)this + 15) + 184))(*((void *)this + 15), 1, *((double *)this + 28));
      *((void *)this + 28) = 0xBFF0000000000000;
      if (!*((unsigned char *)this + 216))
      {
        uint64_t v5 = "&GlMeSrdSyncIn::idle";
        uint64_t v6 = BlueFin::GlMeSrdSyncIn::idle;
        goto LABEL_17;
      }
      BlueFin::GlTimer::rearm((BlueFin::GlMeSrdSyncIn *)((char *)this + 176));
    }
  }
  else
  {
    if (v3 == 2)
    {
      (*(void (**)(void, void, double))(**((void **)this + 15) + 184))(*((void *)this + 15), 0, 0.0);
      *((void *)this + 26) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdSyncIn *)((char *)this + 176), 5, 0, 0x3A98u);
      uint64_t result = 0;
      *((unsigned char *)this + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    }
    if (v3 != 3)
    {
      if (v3 == 5)
      {
        (*(void (**)(void, uint64_t, double))(**((void **)this + 15) + 184))(*((void *)this + 15), 3, 0.0);
        BlueFin::GlMeSrdSyncIn::DisarmESW(this);
LABEL_16:
        uint64_t v5 = "&GlMeSrdSyncIn::wait4disarm";
        uint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdSyncIn::wait4disarm;
LABEL_17:
        BlueFin::QHsm::tran(this, v6, (uint64_t)v5);
        return 0;
      }
      return BlueFin::GlMeSrdSyncIn::running;
    }
    BlueFin::GlTimer::disarm((uint64_t)this + 176);
  }
  return 0;
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::esw_loading(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  if (v3 == 3)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 96))(*(void *)(a1 + 120), a1 + 152);
  }
  else
  {
    uint64_t result = BlueFin::GlMeSrdAsicinit::loading;
    if (v3 != 2) {
      return result;
    }
    *(unsigned char *)(a1 + 737) = 0;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120), a1 + 152);
    (*(void (**)(void))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120));
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdCtrlSm::idle(BlueFin::GlMeSrdCtrlSm *this, unsigned char *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  uint64_t result = BlueFin::GlMeSrdCtrlSm::running;
  if (v3 > 0xF)
  {
    switch(*a2)
    {
      case 0x17:
        BlueFin::GlMeSrdCtrlSm::GotRadioReport(this);
        return 0;
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1F:
        return result;
      case 0x1C:
        BOOL v11 = "&GlMeSrdCtrlSm::steady";
        int v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::steady;
        goto LABEL_29;
      case 0x1E:
        if (*((unsigned char *)this + 34500))
        {
          BOOL v11 = "&GlMeSrdCtrlSm::wait4spectrum";
          int v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4spectrum;
        }
        else
        {
          BOOL v11 = "&GlMeSrdCtrlSm::wait4cw";
          int v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4cw;
        }
        goto LABEL_29;
      case 0x20:
        BOOL v11 = "&GlMeSrdCtrlSm::platform_test";
        int v12 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::platform_test;
LABEL_29:
        BlueFin::QHsm::tran(this, v12, (uint64_t)v11);
        return 0;
      default:
        if (v3 != 16) {
          return result;
        }
        BlueFin::GlMeSrdMeasTimingMgr::SetSubHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 898));
        (*(void (**)(void, void, uint64_t))(**((void **)this + 19) + 24))(*((void *)this + 19), *((unsigned int *)this + 842), 200);
        break;
    }
    return 0;
  }
  switch(v3)
  {
    case 2u:
      if (*((unsigned char *)this + 216))
      {
        uint64_t v9 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 40);
        int v10 = 30;
      }
      else if (*((unsigned char *)this + 218))
      {
        uint64_t v9 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 40);
        int v10 = 32;
      }
      else
      {
        if (!*((_WORD *)this + 807)) {
          return 0;
        }
        uint64_t v9 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 40);
        int v10 = 28;
      }
      BlueFin::GlQueue::putLIFO(v9, v10, 0);
      return 0;
    case 3u:
      BlueFin::GlTimer::disarm((uint64_t)this + 1656);
      return 0;
    case 0xFu:
      unsigned __int32 v5 = *((_DWORD *)this + 886);
      BlueFin::GlMeSrdStats::SetHeartbeatMs(*((int32x2_t **)this + 25), v5);
      (*(void (**)(void, uint64_t))(**((void **)this + 20) + 176))(*((void *)this + 20), *((void *)this + 25) + 8);
      BlueFin::GlMeSrdMeasTimingMgr::SetHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), v5);
      uint64_t v6 = *((void *)this + 19);
      uint64_t ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, ReportingLms, 1000);
      if (*((unsigned char *)this + 3324))
      {
        int v8 = (char *)this + 3332;
      }
      else if (*((unsigned char *)this + 3340))
      {
        int v8 = (char *)this + 3348;
      }
      else
      {
        int v8 = (char *)this + 3356;
      }
      unsigned int v13 = *(unsigned __int16 *)v8;
      if (*((unsigned __int16 *)this + 1678) > v13) {
        unsigned int v13 = *((unsigned __int16 *)this + 1678);
      }
      unsigned int v14 = 5 * v13;
      if (v14 >= 0x4E20) {
        unsigned int v14 = 20000;
      }
      *((void *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1656), 5, 0, v14 + 250);
      uint64_t result = 0;
      *((unsigned char *)this + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      break;
  }
  return result;
}

unint64_t BlueFin::GlMeSrdAsicinit::OnReliableAck(BlueFin::GlMeSrdAsicinit *this, void *a2)
{
  unsigned __int8 v2 = a2;
  GlCustomLog(14, "OnReliableAck: %u\n", a2);
  v6[0] = 13;
  v6[1] = v2;
  uint64_t v4 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v6, &v7)) {
      unint64_t result = v7;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, unsigned __int8 *))this + 4))(this, v6);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v4;
  return result;
}

uint64_t (*BlueFin::GlMeSrdSyncIn::running(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v2 = *a2;
  if (v2 > 0x2B) {
    return BlueFin::QHsm::top;
  }
  if (((1 << v2) & 0xB0000002000) == 0)
  {
    if (((1 << v2) & 0xC) != 0) {
      return 0;
    }
    return BlueFin::QHsm::top;
  }
  GlCustomLog(12, "GlMeSrdSyncIn::running the following msg %d was discarded because it was not expected to be received!!! \n", *a2);
  return 0;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsFpgaFrontEndEmu(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2180);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SendAsicVersion(BlueFin::GlDbgPeIf *this, int a2)
{
  int v6 = a2;
  unint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4629);
    uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
      BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v6);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4629);
    unsigned __int32 v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v5();
  }
  return result;
}

uint64_t BlueFin::GlDbgMeIf::TurnAsicOn(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 208))();
}

uint64_t BlueFin::GlMeSrdAsicInitCallback::OnAsicVersion(BlueFin::GlMeSrdAsicInitCallback *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 160) + 128))();
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_RequestHwVersion(BlueFin::GlMeSrdAsicinit *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(*((void *)this + 16) + 8);
  if ((v2 - 2) >= 2)
  {
    if (v2 == 1)
    {
      *(_WORD *)&v4[4] = -1024;
      *(_DWORD *)uint64_t v4 = 16580863;
      goto LABEL_6;
    }
    if (v2 != 5)
    {
      DeviceFaultNotify("glmesrd_asicinit.cpp", 3186, "Bri_RequestHwVersion", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 3186, "0");
    }
  }
  char v5 = -4;
  *(void *)uint64_t v4 = 0xC000000009FD00FFLL;
LABEL_6:
  uint64_t result = BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v4);
  ++*((_DWORD *)this + 187);
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterMisc(uint64_t this, BlueFin::GlRpcMiscIf *a2)
{
  if (!a2)
  {
    unsigned int v3 = "nullptr != pMiscIf";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 225, "UnregisterMisc", (char)"nullptr != pMiscIf");
    int v4 = 225;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", v4, v3);
  }
  int v2 = *(BlueFin::GlRpcMiscIf **)(this + 17048);
  if (*(BlueFin::GlRpcMiscIf **)(this + 17040) == a2)
  {
    *(void *)(this + 1704BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v2;
  }
  else if (v2 != a2)
  {
    unsigned int v3 = "0";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 237, "UnregisterMisc", (char)"0");
    int v4 = 237;
    goto LABEL_8;
  }
  *(void *)(this + 17048) = 0;
  return this;
}

uint64_t BlueFin::GlMeSrdTransactionManager::ResetSeqIds(uint64_t this)
{
  *(unsigned char *)(this + 661BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(this + 4334) = -256;
  *(unsigned char *)(this + 1397BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  return this;
}

void BlueFin::GlMeSrdSatTrackMgr::OnReliableTransactionAck(int **this, void *a2)
{
  unsigned int v3 = (unsigned __int8 *)(this + 639);
  BlueFin::GlSetBase::Add((uint64_t)(this + 648), this + 638);
  BlueFin::GlSetBase::Add((uint64_t)(this + 668), this + 658);
  bzero(this[638], ((4 * *v3 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  int v4 = this[658];
  size_t v5 = ((4 * v3[160] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;

  bzero(v4, v5);
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_GetOutOfLegacy(BlueFin::GlMeSrdAsicinit *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(*((void *)this + 16) + 8);
  if ((v2 - 2) >= 2)
  {
    if (v2 == 1)
    {
      __int16 v5 = -769;
      *(void *)int v4 = 0xAA550000FD00FELL;
      goto LABEL_6;
    }
    if (v2 != 5)
    {
      DeviceFaultNotify("glmesrd_asicinit.cpp", 3156, "Bri_GetOutOfLegacy", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 3156, "0");
    }
  }
  LOBYTE(v5) = -4;
  *(void *)int v4 = 0xFF00AA5505FD00FFLL;
LABEL_6:
  uint64_t result = BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v4);
  ++*((_DWORD *)this + 187);
  return result;
}

uint64_t BlueFin::GlMeSrdSyncIn::OnReliableAck(BlueFin::GlMeSrdSyncIn *this, void *a2)
{
  return BlueFin::GlQueue::putFIFO((BlueFin::GlMeSrdSyncIn *)((char *)this + 40), 13, (char)a2);
}

uint64_t BlueFin::GlMeSrdSatMgr::OnReliableTransactionAck(BlueFin::GlMeSrdSatMgr *this, void *a2)
{
  int v2 = (char *)this + 6548;
  unsigned int v3 = *((unsigned __int8 *)this + 6548);
  if (!*((unsigned char *)this + 6548)
    || (unsigned int v4 = a2,
        uint64_t v6 = (char *)this + 184,
        uint64_t result = BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSatMgr *)((char *)this + 184)),
        (result & 1) == 0))
  {
    int v12 = "m_ucAckNum > 0 && !m_otSetSatidKilledWaiting4Ack.IsEmpty()";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 131, "OnReliableTransactionAck", (char)"m_ucAckNum > 0 && !m_otSetSatidKilledWaiting4Ack.IsEmpty()");
    int v13 = 131;
    goto LABEL_19;
  }
  if (v3 < v4)
  {
    int v12 = "ucParam <= m_ucAckNum";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 132, "OnReliableTransactionAck", (char)"ucParam <= m_ucAckNum");
    int v13 = 132;
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v13, v12);
  }
  if (v3 == v4)
  {
    *int v2 = 0;
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
    BlueFin::GlSetBase::operator|=((uint64_t)this + 216, (uint64_t)v6);
    bzero(*((void **)this + 23), ((4 * *((unsigned __int8 *)this + 192) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
    int v20 = &v22;
    unsigned __int8 v21 = 4;
    long long v22 = 0uLL;
    unsigned int v14 = (int *)v16;
    char v15 = 4;
    v16[1] = 0;
    v16[0] = 0;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)this + 56, &v14, (int **)this + 27);
    int v17 = &v19;
    char v18 = 4;
    long long v19 = 0uLL;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v14, (int **)&v17, (int **)this + 31);
    BlueFin::GlSetBase::operator=((uint64_t)&v20, (uint64_t)&v17);
    unsigned int v8 = 0;
    uint64_t v9 = (long long *)((char *)&v20[v21 / 4u - 1] + 12);
    long long v22 = v19;
    do
    {
      if (*(_DWORD *)v9)
      {
        unsigned int v10 = *(_DWORD *)v9 - (((*(_DWORD *)v9 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v9 >> 2) & 0x9249249));
        unsigned int v8 = ((v10 + (v10 >> 3)) & 0xC71C71C7) + v8 - 63 * (((v10 + (v10 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      uint64_t v9 = (long long *)((char *)v9 - 4);
    }
    while (v9 >= v20);
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 819) + 384))(*((void *)this + 819));
    if (result == (unsigned __int16)v8)
    {
      BOOL v11 = (uint64_t (*)(void))*((void *)this + 821);
      if (v11) {
        return v11(*((void *)this + 822));
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdPacketManagerCallbackImpl::OnPacket(BlueFin::GlMeSrdPacketManagerCallbackImpl *this, unsigned __int8 *a2, unsigned int a3)
{
  if (a3)
  {
    int v6 = 0;
    do
    {
      unint64_t v7 = &a2[(unsigned __int16)v6];
      unsigned int v8 = v7[1];
      uint64_t v9 = v7[2];
      uint64_t v10 = *v7 | (v8 >> 6 << 8) & 0xFBFF | (((v8 >> 5) & 1) << 10);
      (*(void (**)(void))(**(void **)(*((void *)this + 1) + 17024) + 32))(*(void *)(*((void *)this + 1) + 17024));
      uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 1) + 200))(*((void *)this + 1));
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      (*(void (**)(uint64_t, void, uint64_t, unsigned __int8 *, uint64_t))(*(void *)v12 + 16))(v12, v8 & 0x1F, v9, &a2[(unsigned __int16)v6 + 3], v10);
      v6 += v10 + 3;
    }
    while (a3 > (unsigned __int16)v6);
  }
  return 1;
}

uint64_t BlueFin::GllRpcDec::GetGllRpcParserIf(BlueFin::GllRpcDec *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    if ((*(uint64_t (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)))
    {
      if ((*(uint64_t (**)(void))(**((void **)this + 2) + 264))(*((void *)this + 2)))
      {
        uint64_t result = (uint64_t)this + 32;
        uint64_t v3 = *((void *)this + 3);
        *((void *)this + 4) = &unk_270EBAAF8;
        *((void *)this + 5) = v3;
        *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 32;
        return result;
      }
      unsigned int v4 = "0";
      DeviceFaultNotify("glmesrd_transaction_rpc_decoder.cpp", 82, "MakeGllRpcParserImp", (char)"0");
      int v5 = 82;
    }
    else
    {
      unsigned int v4 = "bIsAsicConfigConsistent";
      DeviceFaultNotify("glmesrd_transaction_rpc_decoder.cpp", 62, "MakeGllRpcParserImp", (char)"bIsAsicConfigConsistent");
      int v5 = 62;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder.cpp", v5, v4);
  }
  return result;
}

uint64_t BlueFin::GlDbgPeIf::SendAsicDacData(BlueFin::GlDbgPeIf *this, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this + 2) + 136))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlPosEng::SendAsicDacData(BlueFin::GlPosEng *this, unsigned __int8 *a2, __int16 a3)
{
  return (*(uint64_t (**)(void, unsigned __int8 *, void))(**((void **)this + 4) + 104))(*((void *)this + 4), a2, a3);
}

uint64_t BlueFin::GlMeSrdTransactionManager::GetGllRpcDecIf(BlueFin::GlMeSrdTransactionManager *this)
{
  return (uint64_t)this + 17272;
}

uint64_t BlueFin::GlMeSrdTransportCallback::OnDacData(BlueFin::GlMeSrdTransportCallback *this, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(*((void *)this + 1) + 8) + 136))(*(void *)(*((void *)this + 1) + 8), a2);
}

uint64_t BlueFin::GlPeEngineCallBacks::OnAsicDacData(uint64_t this, unsigned __int8 *a2)
{
  int v2 = *(uint64_t (**)(void, unsigned __int8 *))(this + 48);
  if (v2) {
    return v2(*(void *)(this + 8), a2);
  }
  return this;
}

void BlueFin::GlMeSrdAidingMgr::CleanupUnusedAidIds(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  unsigned int v4 = v3;
  uint64_t v6 = v5;
  unsigned int v8 = v7;
  uint64_t v9 = v2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  bzero(v18, 0x1C8CuLL);
  uint64_t v15 = v9 + 2632;
  unsigned __int16 v16 = *(_WORD *)(v9 + 2666) + 1;
  if (*(unsigned __int16 *)(v9 + 2664) > v16)
  {
    unsigned __int8 v10 = 0;
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v15, (uint64_t)v13);
      if ((((unint64_t)*(unsigned int *)(*v8 + (((unint64_t)v13[0] >> 3) & 0x1C)) >> (v13[0] & 0x1F)) & 1) == 0)
      {
        v17[v10] = *(unsigned char *)BlueFin::GlSignalIdArray::Get(v9 + 1480, (uint64_t)v13);
        uint64_t v11 = (BlueFin::GlMeSrdAidingMgr *)BlueFin::GlSignalIdArray::Get(v9 + 1480, (uint64_t)v13);
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          BlueFin::GlMeSrdAidingMgr::LogMappingChange(v11, 0, (const BlueFin::GlSignalId *)v13);
        }
        ++v10;
        BlueFin::GlBigArray::Remove(v9 + 2632, (unsigned __int16)v14);
        unint64_t v12 = (unint64_t)v13[0] >> 5;
        if (((unint64_t)*(unsigned int *)(*v4 + 4 * v12) >> (v13[0] & 0x1F))) {
          *(_DWORD *)(*(void *)(v9 + 1376) + 4 * v12) |= 1 << (v13[0] & 0x1F);
        }
      }
    }
    while (v16 < *(unsigned __int16 *)(v15 + 32));
    if (v10) {
      BlueFin::GlMeSrdAidingMgr::SendAidingBatch(v6, v10, (uint64_t)v17, (uint64_t)v18);
    }
  }
}

BOOL BlueFin::GlSignalIdArrayIterator::Next@<W0>(BlueFin::GlSignalIdArrayIterator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((unsigned __int16 *)this + 4);
  uint64_t v5 = *(void *)this;
  if (v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    uint64_t v11 = "HasNext()";
    DeviceFaultNotify("glinc_array.h", 360, "Next", (char)"HasNext()");
    unint64_t v12 = "glinc_array.h";
    int v13 = 360;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(v5 + 16);
  *((_WORD *)this + 4) = v4 + 1;
  unsigned __int16 v7 = *(_WORD *)(v5 + 28) + *(_WORD *)(v6 + 2 * v4);
  BOOL result = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)v5, v7);
  if (!result)
  {
    uint64_t v11 = "m_potArray->Has(handle)";
    DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
    unint64_t v12 = "glinc_array.h";
    int v13 = 362;
    goto LABEL_8;
  }
  if (v7 >= 0x23Fu)
  {
    uint64_t v11 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    unint64_t v12 = "glsignalid.h";
    int v13 = 577;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v12, v13, v11);
  }
  uint64_t v9 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v7;
  char v10 = *v9;
  LODWORD(v9) = v9[1];
  *(unsigned char *)a2 = v10;
  *(_DWORD *)(a2 + 4) = v9;
  *(_WORD *)(a2 + 8) = v7;
  return result;
}

uint64_t BlueFin::GlPeComputeZRH::Compute(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, BlueFin::GlSetBase *this)
{
  if (BlueFin::GlSetBase::HasAny(this))
  {
    uint64_t v288 = a1;
    uint64_t v303 = 0;
    long long v299 = 0u;
    memset(v300, 0, 25);
    memset(v298, 0, sizeof(v298));
    long long v296 = 0u;
    float64x2_t v297 = 0u;
    memset(v295, 0, sizeof(v295));
    uint64_t v301 = 0x4008000000000000;
    char v10 = *(double ***)a2;
    double v11 = (double)*(int *)(a2 + 24) * 0.001;
    switch(*(_DWORD *)(a2 + 28))
    {
      case 0:
      case 6:
        uint64_t v12 = *((void *)*v10 + 3);
        uint64_t v13 = *((void *)*v10 + 7);
        *(double *)v345 = (*v10)[1];
        *((void *)&v345[0] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12;
        *(void *)&v345[1] = v13;
        BlueFin::ned2lla(*(double **)(a2 + 8), (double *)v345, (double *)&v336);
        v295[0] = v336;
        *(void *)&v295[1] = v337;
        BlueFin::lla2ecef((double *)v295, (uint64_t)&v336);
        *(long long *)((char *)&v295[1] + 8) = v336;
        *((void *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v337;
        unsigned int v14 = *v10;
        v297.f64[0] = (*v10)[2];
        v297.f64[1] = v14[4];
        v298[0] = v14[9];
        int v15 = *(_DWORD *)(a2 + 32);
        double v16 = *(double *)(a2 + 16);
        if ((v15 & 0x8000) != 0)
        {
          *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v16 / 299792458.0 + (double)*(int *)(a2 + 24) * 0.001;
          *(void *)&long long v296 = 0;
          LOBYTE(v300[3]) = 1;
        }
        else
        {
          *(double *)&long long v296 = v16 + v14[5];
          if ((v15 & 0x800) != 0) {
            *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
          }
          else {
            *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11 + v14[8];
          }
        }
        *(double *)&long long v299 = v14[6];
        double v39 = *(double *)(a2 + 72);
        *((double *)&v299 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(double *)(a2 + 64) + v14[11];
        v300[0] = v39 + v14[9];
        double v40 = *(double *)(a2 + 88);
        v300[1] = *(double *)(a2 + 80) + v14[12];
        v300[2] = v40 + v14[10];
        goto LABEL_33;
      case 1:
        uint64_t v19 = *(void *)(a2 + 8);
        v295[0] = *(_OWORD *)v19;
        *(void *)&v295[1] = *(void *)(v19 + 16);
        BlueFin::lla2ecef((double *)v295, (uint64_t)v345);
        *(long long *)((char *)&v295[1] + 8) = v345[0];
        *((void *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)&v345[1];
        int v20 = *v10;
        *(double *)&long long v296 = (*v10)[4];
        *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
        float64x2_t v297 = *(float64x2_t *)(v20 + 5);
        v298[0] = 0.0;
        *(double *)&long long v299 = v20[7];
        int v18 = 7;
        goto LABEL_37;
      case 2:
        uint64_t v21 = *(void *)(a2 + 8);
        v295[0] = *(_OWORD *)v21;
        *(void *)&v295[1] = *(void *)(v21 + 16);
        BlueFin::lla2ecef((double *)v295, (uint64_t)v345);
        *(long long *)((char *)&v295[1] + 8) = v345[0];
        *((void *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)&v345[1];
        *(void *)&long long v296 = *(void *)(a2 + 16);
        *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
        long long v22 = *v10;
        float64x2_t v297 = *(float64x2_t *)(*v10 + 1);
        v298[0] = v22[3];
        *(double *)&long long v299 = v22[4];
        int v18 = 4;
        goto LABEL_37;
      case 3:
        long long v23 = *(float64x2_t **)(a2 + 40);
        if (!v23)
        {
          v266 = "rotInput.m_potNedVel";
          DeviceFaultNotify("glpe_computezrh.cpp", 2484, "CalcMeasState", (char)"rotInput.m_potNedVel");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2484;
          goto LABEL_332;
        }
        if (!*(void *)(a2 + 56))
        {
          v266 = "rotInput.m_pdBcDot";
          DeviceFaultNotify("glpe_computezrh.cpp", 2485, "CalcMeasState", (char)"rotInput.m_pdBcDot");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2485;
          goto LABEL_332;
        }
        char v24 = *v10;
        if (fabs((*v10)[2]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_VX)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2486, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_VX)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2486;
          goto LABEL_332;
        }
        if (fabs(v24[4]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_VY)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2487, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_VY)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2487;
          goto LABEL_332;
        }
        if (fabs(v24[6]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_VZ)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2488, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_VZ)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2488;
          goto LABEL_332;
        }
        if (fabs(v24[1]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_X)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2489, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_X)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2489;
          goto LABEL_332;
        }
        if (fabs(v24[3]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_Y)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2490, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_Y)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2490;
          goto LABEL_332;
        }
        if (fabs(v24[5]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_Z)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2491, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_Z)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2491;
          goto LABEL_332;
        }
        if ((*(unsigned char *)(a2 + 34) & 2) != 0)
        {
          uint64_t v41 = *(void *)(a2 + 48);
          if (!v41)
          {
            v266 = "rotInput.m_potNedAcc";
            DeviceFaultNotify("glpe_computezrh.cpp", 2495, "CalcMeasState", (char)"rotInput.m_potNedAcc");
            v267 = "glpe_computezrh.cpp";
            int v268 = 2495;
            goto LABEL_332;
          }
          *(_OWORD *)&v298[1] = *(_OWORD *)v41;
          v298[3] = *(double *)(v41 + 16);
          double v42 = v23[1].f64[0];
          double v43 = *(double *)(a2 + 96);
          v345[0] = vmulq_n_f64(*v23, v43);
          *(double *)&v345[1] = v42 * v43;
          BlueFin::ned2lla(*(double **)(a2 + 8), (double *)v345, (double *)&v336);
          v295[0] = v336;
          *(void *)&v295[1] = v337;
          BlueFin::lla2ecef((double *)v295, (uint64_t)&v336);
          *(long long *)((char *)&v295[1] + 8) = v336;
          *((void *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v337;
          double v44 = *(double *)(a2 + 96);
          unsigned int v45 = *(float64x2_t **)(a2 + 40);
          unsigned int v46 = *(float64x2_t **)(a2 + 48);
          float64x2_t v297 = vmlaq_n_f64(*v45, *v46, v44);
          v298[0] = v45[1].f64[0] + v44 * v46[1].f64[0];
          int v18 = 13;
        }
        else
        {
          uint64_t v25 = *(void *)(a2 + 8);
          v295[0] = *(_OWORD *)v25;
          *(void *)&v295[1] = *(void *)(v25 + 16);
          BlueFin::lla2ecef((double *)v295, (uint64_t)v345);
          *(long long *)((char *)&v295[1] + 8) = v345[0];
          *((void *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)&v345[1];
          long long v26 = *(float64x2_t **)(a2 + 40);
          float64x2_t v297 = *v26;
          v298[0] = v26[1].f64[0];
          int v18 = 12;
        }
        char v47 = *v10;
        double v48 = (*v10)[8];
        *(double *)&long long v296 = *(double *)(a2 + 16) + (*v10)[7];
        *(double *)&long long v299 = **(double **)(a2 + 56) + v48;
        *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
        double v49 = *(double *)(a2 + 72);
        *((double *)&v299 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(double *)(a2 + 64) + v47[11];
        v300[0] = v49 + v47[9];
        double v50 = *(double *)(a2 + 88);
        v300[1] = *(double *)(a2 + 80) + v47[12];
        v300[2] = v50 + v47[10];
        uint64_t v301 = *(void *)(a2 + 104);
LABEL_37:
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x47);
        }
        unsigned int v51 = (_DWORD *)*a3;
        if (*(unsigned __int8 *)(*a3 + 12) >= 0x15u) {
          int v52 = 21;
        }
        else {
          int v52 = *(unsigned __int8 *)(*a3 + 12);
        }
        if (a3[2]) {
          unsigned int v53 = v52;
        }
        else {
          unsigned int v53 = *(unsigned __int8 *)(*a3 + 12);
        }
        if (!v18)
        {
          v266 = "ucNbStates > 0";
          DeviceFaultNotify("glpe_computezrh.cpp", 117, "Compute", (char)"ucNbStates > 0");
          v267 = "glpe_computezrh.cpp";
          int v268 = 117;
          goto LABEL_332;
        }
        unsigned __int8 v54 = BlueFin::GlSetBase::Cnt(this);
        unsigned int v289 = v53;
        if (v53 >= v54) {
          unsigned __int8 v55 = v54;
        }
        else {
          unsigned __int8 v55 = v53;
        }
        int v56 = v55;
        v51[2] = v55;
        size_t v57 = 8 * v55;
        bzero((void *)(*(void *)v51 + 8), v57);
        int16x4_t v58 = (_DWORD *)a3[1];
        v58[2] = v56;
        bzero((void *)(*(void *)v58 + 8), v57);
        int8x8_t v59 = (_DWORD *)a3[3];
        if (v59)
        {
          v59[2] = v56;
          bzero((void *)(*(void *)v59 + 8), v57);
        }
        int v60 = (BlueFin::BigMatrix *)a3[2];
        uint64_t v61 = a1;
        if (v60) {
          BlueFin::BigMatrix::Null(v60, v56, v18);
        }
        unsigned __int8 v290 = *((unsigned char *)this + 8);
        v287 = this;
        memcpy(v294, *(const void **)this, 4 * v290);
        __int16 v292 = 0;
        unsigned __int8 v291 = 0;
        int v293 = v294[0];
        BlueFin::GlSetIterator::operator++(&v290);
        uint64_t v17 = 0;
        unsigned int v62 = v289;
        if (v291 == v290) {
          return v17;
        }
        unsigned __int8 v64 = 0;
        uint64_t v17 = 0;
        v279 = (unsigned __int8 *)(a1 + 296);
        uint64_t v280 = a1 + 24;
        uint64_t v65 = 0x300000001;
        double v66 = 299792458.0;
        *(double *)&uint64_t v67 = 299792.458;
        *(double *)&uint64_t v68 = 2500.0;
        break;
      case 4:
        if (!*(void *)(a2 + 40))
        {
          v266 = "rotInput.m_potNedVel";
          DeviceFaultNotify("glpe_computezrh.cpp", 2531, "CalcMeasState", (char)"rotInput.m_potNedVel");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2531;
          goto LABEL_332;
        }
        if (!*(void *)(a2 + 56))
        {
          v266 = "rotInput.m_pdBcDot";
          DeviceFaultNotify("glpe_computezrh.cpp", 2532, "CalcMeasState", (char)"rotInput.m_pdBcDot");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2532;
          goto LABEL_332;
        }
        long long v27 = *v10;
        if (fabs((*v10)[2]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_VX)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2533, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_VX)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2533;
          goto LABEL_332;
        }
        if (fabs(v27[4]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_VY)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2534, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_VY)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2534;
          goto LABEL_332;
        }
        if (fabs(v27[6]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_VZ)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2535, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_VZ)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2535;
          goto LABEL_332;
        }
        if (fabs(v27[1]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_X)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2536, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_X)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2536;
          goto LABEL_332;
        }
        if (fabs(v27[3]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_Y)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2537, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_Y)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2537;
          goto LABEL_332;
        }
        if (fabs(v27[5]) >= 0.00000011920929)
        {
          v266 = "FABS_D(rotXHat(DKF_STATE_Z)) < FLT_EPSILON";
          DeviceFaultNotify("glpe_computezrh.cpp", 2538, "CalcMeasState", (char)"FABS_D(rotXHat(DKF_STATE_Z)) < FLT_EPSILON");
          v267 = "glpe_computezrh.cpp";
          int v268 = 2538;
          goto LABEL_332;
        }
        uint64_t v28 = *(void *)(a2 + 8);
        v295[0] = *(_OWORD *)v28;
        *(void *)&v295[1] = *(void *)(v28 + 16);
        BlueFin::lla2ecef((double *)v295, (uint64_t)v345);
        *(long long *)((char *)&v295[1] + 8) = v345[0];
        *((void *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(void *)&v345[1];
        long long v29 = *(float64x2_t **)(a2 + 40);
        float64x2_t v297 = *v29;
        v298[0] = v29[1].f64[0];
        double v30 = (*v10)[8];
        *(double *)&long long v296 = *(double *)(a2 + 16) + (*v10)[7];
        *(double *)&long long v299 = **(double **)(a2 + 56) + v30;
        *((double *)&v296 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
        int v18 = 12;
        goto LABEL_37;
      case 5:
        uint64_t v31 = *(void *)(a2 + 8);
        v295[0] = *(_OWORD *)v31;
        *(void *)&v295[1] = *(void *)(v31 + 16);
        *(void *)&long long v296 = *(void *)(a2 + 16);
        *(void *)&long long v299 = 0;
        float v32 = *(double *)v31;
        __float2 v33 = __sincosf_stret(v32 * 0.017453);
        float v34 = *(double *)(v31 + 8);
        __float2 v35 = __sincosf_stret(v34 * 0.017453);
        v302[0] = -(float)(v33.__sinval * v35.__cosval);
        v302[1] = -(float)(v33.__sinval * v35.__sinval);
        v302[2] = v33.__cosval;
        v302[4] = -v35.__sinval;
        v302[5] = v35.__cosval;
        v302[6] = 0.0;
        v302[8] = -(float)(v33.__cosval * v35.__cosval);
        v302[9] = -(float)(v33.__cosval * v35.__sinval);
        v302[10] = -v33.__sinval;
        uint64_t v303 = 0x300000003;
        float v36 = 6378100.0 / sqrtf((float)((float)(v33.__sinval * -0.0066944) * v33.__sinval) + 1.0);
        float v37 = *(double *)(v31 + 16);
        float v38 = v33.__cosval * (float)(v36 + v37);
        *((double *)&v295[1] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (float)(v35.__cosval * v38);
        *(double *)&v295[2] = (float)(v35.__sinval * v38);
        *((double *)&v295[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (float)(v33.__sinval * (float)(v37 + (float)(v36 * 0.99331)));
LABEL_33:
        int v18 = 8;
        goto LABEL_37;
      default:
        int v18 = 0;
        goto LABEL_37;
    }
    while (1)
    {
      if (v62 < ++v64) {
        return v17;
      }
      unsigned int v69 = v292;
      unint64_t v70 = *(unsigned int *)(a2 + 32);
      if ((v70 & 0x800) != 0)
      {
        int v71 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8
                                                                     * *(int *)(a4 + 56 * v292 + 36)
                                                                     - *(int *)(a4 + 56 * v292 + 36)
                                                                     + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a4 + 56 * v292 + 32)]];
        if (v71 == 11 || v71 == 5) {
          *(double *)&long long v296 = *(double *)(**(void **)a2 + 64) + *(double *)&v296;
        }
      }
      uint64_t v73 = a4 + 56 * v292;
      switch(*(_DWORD *)(v73 + 44))
      {
        case 0:
          if (*(_DWORD *)(a2 + 28) != 5)
          {
            uint64_t v286 = *(unsigned int *)(a2 + 28);
            uint64_t v138 = a4 + 56 * v292;
            unsigned int v140 = *(_DWORD *)(v138 + 16);
            int32x4_t v139 = (unsigned int *)(v138 + 16);
            uint64_t v141 = v61;
            uint64_t v142 = (void *)a3[1];
            uint64_t v334 = 0;
            long long v331 = 0u;
            long long v332 = 0u;
            int v333 = 0;
            float64x2_t v329 = 0u;
            long long v330 = 0u;
            uint64_t v17 = (*(uint64_t (**)(uint64_t, unsigned int *, void, long long *, float64x2_t *, unint64_t, BOOL, unint64_t, uint64_t))(*(void *)v141 + 24))(v141, v139 + 4, v140, v295, &v329, v70 & 1, (v70 & 0x18000) != 0, (v70 >> 5) & 1, v73 & ((uint64_t)(__int16)v70 >> 15));
            if (v17) {
              goto LABEL_305;
            }
            v276 = v142;
            v278 = (unsigned __int8 *)(v139 + 4);
            uint64_t v350 = 0;
            uint64_t v344 = 0;
            LODWORD(v304) = 0;
            LODWORD(v319[0].f64[0]) = 0;
            if ((~*(_DWORD *)(a2 + 32) & 0x40008) != 0)
            {
              int v146 = (unsigned __int8 *)(v139 + 4);
              int v147 = (uint64_t *)v288;
              if ((((unint64_t)*(unsigned int *)(*(void *)(v288 + 1512)
                                                       + (((unint64_t)*v278 >> 3) & 0x1C)) >> (*v278 & 0x1F)) & 1) != 0)
              {
                if (BlueFin::GlPeSatPosCache::GetLOSFromCache(v280, v278, (uint64_t)&v336))
                {
                  float64x2_t v152 = vsubq_f64(v329, *(float64x2_t *)((char *)&v295[1] + 8));
                  double v153 = *(double *)&v330 - *((double *)&v295[2] + 1);
                  double v144 = sqrt(vaddvq_f64(vmulq_f64(v152, v152)) + v153 * v153);
                  if (v144 == 0.0)
                  {
LABEL_329:
                    v266 = "dGeometricRangeM != 0.0";
                    DeviceFaultNotify("glpe_satposif.h", 177, "svrange", (char)"dGeometricRangeM != 0.0");
                    v267 = "glpe_satposif.h";
                    int v268 = 177;
                    goto LABEL_332;
                  }
                  uint64_t v350 = v65;
                  v345[0] = vmulq_n_f64(v152, 1.0 / v144);
                  *(double *)&v345[1] = v153 * (1.0 / v144);
                }
                else
                {
                  double v144 = (*(double (**)(void, float64x2_t *, char *, long long *, _OWORD *, long long *, void, void))(**(void **)(v288 + 4264) + 80))(*(void *)(v288 + 4264), &v329, (char *)&v295[1] + 8, v295, v345, &v336, 0, 0);
                }
                uint64_t v176 = BlueFin::GlPeElAzCache::Get(v279, v278);
                if (!v176)
                {
                  v266 = "pElAz != nullptr";
                  DeviceFaultNotify("glpe_computezrh.cpp", 512, "getZRH_FromPRMeas", (char)"pElAz != nullptr");
                  v267 = "glpe_computezrh.cpp";
                  int v268 = 512;
                  goto LABEL_332;
                }
                int v177 = *((_DWORD *)v176 + 1);
                LODWORD(v304) = *((_DWORD *)v176 + 2);
                LODWORD(v319[0].f64[0]) = v177;
              }
              else
              {
                double v144 = (*(double (**)(void, float64x2_t *, char *, long long *, _OWORD *, long long *, long long *, float64x2_t *))(**(void **)(v288 + 4264) + 80))(*(void *)(v288 + 4264), &v329, (char *)&v295[1] + 8, v295, v345, &v336, &v304, v319);
              }
              double v145 = 0.0;
              if (v286 <= 6 && ((1 << v286) & 0x43) != 0) {
                double v145 = -(*(double *)&v331 * *((double *)v345 + 1)
              }
                       + *((double *)&v330 + 1) * *(double *)v345
                       + *((double *)&v331 + 1) * *(double *)&v345[1]);
            }
            else
            {
              float64x2_t v143 = vsubq_f64(v329, *(float64x2_t *)((char *)&v295[1] + 8));
              double v144 = sqrt(vaddvq_f64(vmulq_f64(v143, v143))+ (*(double *)&v330 - *((double *)&v295[2] + 1)) * (*(double *)&v330 - *((double *)&v295[2] + 1)));
              double v145 = 0.0;
              int v146 = (unsigned __int8 *)(v139 + 4);
              int v147 = (uint64_t *)v288;
            }
            uint64_t v178 = a3[4];
            if (v178) {
              *(_DWORD *)(v178 + 4 * v64 - 4) = LODWORD(v319[0].f64[0]);
            }
            uint64_t v179 = a3[5];
            if (v179) {
              *(_DWORD *)(v179 + 4 * v64 - 4) = v304;
            }
            double v283 = *(double *)&v68;
            uint64_t v180 = a3[6];
            if (v180)
            {
              int v181 = v64 - 1;
              uint64_t v182 = (long long *)(v180 + 136 * v181);
              if (v182 != &v336)
              {
                long long v183 = v336;
                long long v184 = v337;
                long long v185 = v339;
                v182[2] = v338;
                v182[3] = v185;
                long long *v182 = v183;
                v182[1] = v184;
                long long v186 = v340;
                long long v187 = v341;
                long long v188 = v343;
                v182[6] = v342;
                v182[7] = v188;
                v182[4] = v186;
                v182[5] = v187;
                *(void *)(v180 + 136 * v181 + 128) = v344;
              }
            }
            uint64_t v189 = BlueFin::GlSvId::s_aucSvId2gnss[*v146];
            if ((*(unsigned char *)(a2 + 33) & 4) != 0
              && ((*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t))(*v147 + 72))(v147, v146, v286) & 1) == 0)
            {
              GlCustomLog(13, "<ZRH> Time Unc Fail Sig %02d %d\n", *v146, *(_DWORD *)(a4 + 56 * v69 + 36));
              uint64_t v17 = 2;
              goto LABEL_305;
            }
            double v190 = v66;
            double v191 = *(double *)&v332 * v66;
            v272 = (unsigned char *)(a4 + 56 * v69 + 49);
            double v269 = v145;
            double v192 = *(double *)&v67;
            if (!*v272) {
              double v191 = v191
            }
                   + (*(double (**)(uint64_t *, unsigned __int8 *, void))(*v147 + 88))(v147, v146, 0);
            uint64_t v193 = v65;
            double v194 = (*(double (**)(uint64_t *, uint64_t))(*v147 + 96))(v147, v189);
            double v195 = v194;
            if (v189 == 5)
            {
              if ((*(unsigned char *)(a2 + 33) & 8) != 0) {
                double v195 = 0.0;
              }
              else {
                double v195 = v194 + *((double *)&v299 + 1);
              }
            }
            int v274 = v189;
            if (v189 == 4) {
              double v196 = v300[1];
            }
            else {
              double v196 = -0.0;
            }
            v200.n128_f32[0] = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(v147[541], v146, 0, 0);
            uint64_t v199 = BlueFin::GlSvId::s_aucSvId2gnss[*v146];
            v200.n128_f64[0] = v200.n128_f32[0];
            uint64_t v201 = a4 + 56 * v69;
            uint64_t v202 = *(int *)(v201 + 36);
            v270 = (int *)(v201 + 36);
            int v203 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v202 - v202 + v199];
            double v204 = v300[2];
            if (v203 != 6) {
              double v204 = -0.0;
            }
            BOOL v205 = v203 == 12 || v202 == 2;
            double v206 = v204 + v200.n128_f64[0];
            double v207 = v300[0];
            if (!v205) {
              double v207 = -0.0;
            }
            double v208 = v206 + v207;
            if ((int)v202 < 1)
            {
              float v209 = v276;
            }
            else
            {
              float v209 = v276;
              if (v202 != 3 && *v272) {
                double v208 = 0.0;
              }
            }
            *(double *)(*v209 + 8 * v64) = v208 + v195 + v196 + v144 + *(double *)&v296 - v191;
            int v210 = *(_DWORD *)(a2 + 32);
            if ((v210 & 0x40000) != 0)
            {
              unsigned int v211 = BlueFin::GlPeComputeZRHUtil::computeBitResolution(v278, (*(_DWORD *)(a2 + 32) >> 4) & 1);
              uint64_t v197 = (BlueFin *)BlueFin::GlPeComputeZRHUtil::resolveIntegers(v287, v69, v211, v64, v209, a4);
              *(_DWORD *)(a4 + 56 * v69 + 24) = v197;
              int v210 = *(_DWORD *)(a2 + 32);
            }
            double v66 = v190;
            uint64_t v65 = v193;
            int v212 = v286;
            *(double *)&uint64_t v67 = v192;
            *(double *)&uint64_t v68 = v283;
            if ((v210 & 8) != 0) {
              goto LABEL_304;
            }
            if (v286 != 1 && (v210 & 0x40) != 0)
            {
              char v213 = (int)v202 >= 1 && *v272 != 0;
              *(double *)(*v276 + 8 * v64) = BlueFin::GlPeComputeZRH::GetAtmosDelay(v147, v278, *v139, v295, *(float *)&v304, *(float *)v319[0].f64, v198, v213, 0, v316)+ *(double *)(*v276 + 8 * v64);
              int v212 = v286;
            }
            *(double *)(*(void *)*a3 + 8 * v64) = *(double *)v73 + (double)*(int *)(a4 + 56 * v69 + 24) * v192;
            v200.n128_u64[0] = *(void *)(*(void *)a3[1] + 8 * v64);
            uint64_t v232 = a3[2];
            if (!v232)
            {
LABEL_248:
              v240 = (uint64_t *)a3[3];
              if (v240)
              {
                if (v212 != 1)
                {
                  unint64_t v241 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *v270
                                                                                                 - *v270
                                                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*v278]];
                  int v242 = *(_DWORD *)(a2 + 32);
                  if ((v242 & 4) != 0)
                  {
                    v200.n128_u64[0] = 30.0;
                    if ((v242 & 0x200) == 0) {
                      v200.n128_f64[0] = 20.0;
                    }
                    if (v200.n128_f64[0] <= *(float *)v319[0].f64)
                    {
                      double v243 = 1.0;
                      double v244 = 0.0;
                    }
                    else
                    {
                      double v244 = 0.0;
                      v200.n128_f64[0] = BlueFin::SmoothThresh(v197, 0.0, v200.n128_f64[0] + -5.0, v200.n128_f64[0] - *(float *)v319[0].f64);
                      double v243 = v200.n128_f64[0];
                    }
                  }
                  else
                  {
                    double v243 = 1.0;
                    double v244 = 0.0;
                    if ((v242 & 2) != 0)
                    {
                      v200.n128_u32[0] = LODWORD(v319[0].f64[0]);
                      if (*(float *)v319[0].f64 <= 15.0)
                      {
                        if (*(float *)v319[0].f64 >= 5.0)
                        {
                          v200.n128_f64[0] = ((*(float *)v319[0].f64 + -5.0) * -5.0 + 50.0)
                                           * ((*(float *)v319[0].f64 + -5.0) * -5.0 + 50.0);
                          double v244 = v200.n128_f64[0] * 4.0;
                        }
                        else
                        {
                          double v244 = v283;
                        }
                      }
                    }
                  }
                  if ((v242 & 0x2000) != 0)
                  {
                    float v246 = 0.17453;
                    if (*(float *)v319[0].f64 > 10.0) {
                      float v246 = *(float *)v319[0].f64 * 0.017453;
                    }
                    v200.n128_f64[0] = (float)(1.0 / sinf(v246));
                    if (v243 <= v200.n128_f64[0]) {
                      double v243 = v200.n128_f64[0];
                    }
                  }
                  float v247 = (*(float (**)(uint64_t *, unsigned __int8 *, __n128))(*v147 + 40))(v147, v278, v200);
                  if (*v278 - 76 <= 0x3E)
                  {
                    BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)v147[536], 1, v323);
                    BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v323, (BlueFin::GlUtcTime *)&v325);
                    BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v323, 0x7E3u, 9u, 1u, 0.0);
                    BlueFin::GlUtcTime::operator-((uint64_t)&v310, LODWORD(v325.f64[1]), HIDWORD(v325.f64[1]), v323[0].n128_u32[2], v323[0].n128_u32[3]);
                    if (BYTE8(v310)) {
                      float v247 = v247 + 10.0;
                    }
                  }
                  unsigned int v248 = (v241 < 9) & (0x134u >> v241);
                  MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)v147[540], (const BlueFin::GlSignalId *)v278, 0, 0);
                  if (!MeMeas)
                  {
                    int v252 = 0;
                    int v253 = *(_DWORD *)(a2 + 32);
                    goto LABEL_291;
                  }
                  long long v250 = MeMeas;
                  double v251 = 0.0;
                  if (*(float *)v319[0].f64 <= 85.0)
                  {
                    if (*(float *)v319[0].f64 <= 40.0) {
                      double v251 = 60.0;
                    }
                    else {
                      double v251 = (float)(50.0 / tanf(*(float *)v319[0].f64 * 0.017453));
                    }
                  }
                  int v253 = *(_DWORD *)(a2 + 32);
                  if ((v253 & 0x80) != 0)
                  {
                    int v254 = *((_DWORD *)v250 + 5);
                    switch(v254)
                    {
                      case 4:
                        goto LABEL_280;
                      case 3:
                        double v255 = 30.0;
                        goto LABEL_283;
                      case 0:
LABEL_280:
                        double v255 = 60.0;
LABEL_283:
                        if (v251 >= v255 || (v253 & 0x200) != 0) {
                          double v251 = v255;
                        }
                        if (v248) {
                          double v251 = v251 * 0.1;
                        }
                        int v252 = (int)(v251 * v251);
LABEL_291:
                        uint64_t v257 = a4 + 56 * v69;
                        double v259 = *(double *)(v257 + 8);
                        v258 = (double *)(v257 + 8);
                        double v260 = (double)v252;
                        double v261 = (float)(v247 * v247) + v259 * v259 + (double)v252;
                        uint64_t v262 = *v240;
                        *(double *)(*v240 + 8 * v64) = v261;
                        if ((v253 & 4) != 0 || ((v253 & 0x2000) == 0 ? (char v263 = 1) : (char v263 = v248), (v263 & 1) == 0))
                        {
                          double v264 = v243 * v261;
                        }
                        else if ((v253 & 2) != 0)
                        {
                          double v264 = v244 + v261;
                        }
                        else
                        {
                          if ((v253 & 0x100) == 0)
                          {
LABEL_301:
                            if ((v253 & 0x10000) != 0)
                            {
                              double v265 = v260 + *v258 * *v258;
                              *(double *)(v262 + 8 * v64) = v265;
                              if ((v253 & 0x100) != 0) {
                                *(double *)(v262 + 8 * v64) = fmin(v265, 100.0);
                              }
                            }
                            goto LABEL_304;
                          }
                          double v264 = fmin(v261, 100.0);
                        }
                        *(double *)(v262 + 8 * v64) = v264;
                        goto LABEL_301;
                    }
                  }
                  int v252 = 0;
                  goto LABEL_291;
                }
                double v245 = *(double *)(a4 + 56 * v69 + 8);
                *(double *)(*v240 + 8 * v64) = v245 * v245;
              }
LABEL_304:
              uint64_t v17 = 0;
LABEL_305:
              unsigned int v62 = v289;
              uint64_t v61 = v288;
              if (v17) {
                goto LABEL_223;
              }
              goto LABEL_225;
            }
            switch(v212)
            {
              case 0:
              case 6:
                uint64_t v233 = *(void *)(*(void *)(v232 + 8) + 8 * v64);
                *(double *)(v233 + 8) = -*(double *)&v336;
                *(double *)(v233 + 24) = -*((double *)&v336 + 1);
                *(void *)(v233 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x3FF0000000000000;
                v200.n128_f64[0] = v269;
                *(double *)(v233 + 56) = -*(double *)&v337;
                *(double *)(v233 + 64) = v269;
                goto LABEL_248;
              case 1:
                uint64_t v234 = *(void *)(*(void *)(v232 + 8) + 8 * v64);
                *(double *)(v234 + 8) = -*(double *)v345;
                *(double *)(v234 + 16) = -*((double *)v345 + 1);
                *(double *)(v234 + 24) = -*(double *)&v345[1];
                *(void *)(v234 + 32) = 0x3FF0000000000000;
                v200.n128_f64[0] = v269;
                *(double *)(v234 + 56) = v269;
                goto LABEL_248;
              case 3:
                v200.n128_f64[0] = -*(double *)&v336;
                uint64_t v235 = *(void *)(*(void *)(v232 + 8) + 8 * v64);
                *(double *)(v235 + 8) = -*(double *)&v336;
                double v236 = -*((double *)&v336 + 1);
                *(double *)(v235 + 24) = -*((double *)&v336 + 1);
                *(void *)(v235 + 56) = 0x3FF0000000000000;
                double v237 = -*(double *)&v337;
                *(double *)(v235 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -*(double *)&v337;
                if (v274 == 5) {
                  *(void *)(v235 + 88) = 0x3FF0000000000000;
                }
                if (v202 != 2 || v274 == 4)
                {
                  if (v274 != 4) {
                    goto LABEL_246;
                  }
                  if ((*v270 - 2) >= 2)
                  {
                    if (*v270) {
                      goto LABEL_246;
                    }
                    uint64_t v238 = 10;
                  }
                  else
                  {
                    uint64_t v238 = 12;
                  }
                }
                else
                {
                  uint64_t v238 = 9;
                }
                *(void *)(v235 + 8 * v238) = 0x3FF0000000000000;
LABEL_246:
                if ((*(unsigned char *)(a2 + 34) & 2) != 0)
                {
                  v200.n128_f64[0] = v297.f64[1] * v236 + v297.f64[0] * v200.n128_f64[0] + v298[0] * v237;
                  *(void *)(v235 + 104) = v200.n128_u64[0];
                }
                goto LABEL_248;
              case 4:
                uint64_t v239 = *(void *)(*(void *)(v232 + 8) + 8 * v64);
                *(double *)(v239 + 8) = -*(double *)&v336;
                *(double *)(v239 + 24) = -*((double *)&v336 + 1);
                *(void *)(v239 + 56) = 0x3FF0000000000000;
                v200.n128_f64[0] = -*(double *)&v337;
                *(double *)(v239 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -*(double *)&v337;
                goto LABEL_248;
              default:
                goto LABEL_248;
            }
          }
          uint64_t v74 = a3[2];
          if (!v74)
          {
            uint64_t v17 = 1;
LABEL_223:
            long long v230 = (void *)a3[8];
            if (!v230) {
              return v17;
            }
            unint64_t v231 = *(unsigned __int8 *)(a4 + 56 * v69 + 32);
            *(_DWORD *)(*v230 + ((v231 >> 3) & 0x1C)) |= 1 << v231;
            goto LABEL_225;
          }
          int v75 = (unsigned __int8 *)(a4 + 56 * v292 + 32);
          if (BlueFin::GlPeSatPosCache::GetHFromCache(v280, v75, v64, v74))
          {
LABEL_98:
            uint64_t v17 = 0;
          }
          else
          {
            uint64_t v349 = 0;
            long long v346 = 0u;
            long long v347 = 0u;
            int v348 = 0;
            memset(v345, 0, sizeof(v345));
            uint64_t v17 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void, long long *, _OWORD *, void, unint64_t, unint64_t, void))(*(void *)v61 + 24))(v61, v75, *(unsigned int *)(a4 + 56 * v69 + 16), v295, v345, *(_DWORD *)(a2 + 32) & 1, ((unint64_t)*(unsigned int *)(a2 + 32) >> 15) & 1, ((unint64_t)*(unsigned int *)(a2 + 32) >> 5) & 1, 0);
            if (v17) {
              goto LABEL_223;
            }
            float v76 = *(double *)v345 - *((double *)&v295[1] + 1);
            float v77 = *((double *)v345 + 1) - *(double *)&v295[2];
            float v78 = *(double *)&v345[1] - *((double *)&v295[2] + 1);
            float v79 = 1.0 / sqrtf((float)((float)(v77 * v77) + (float)(v76 * v76)) + (float)(v78 * v78));
            float v80 = v79 * v76;
            float v81 = v79 * v77;
            *(void *)&long long v340 = v65;
            float v82 = v79 * v78;
            *(float *)&long long v336 = v79 * v76;
            *((float *)&v336 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v79 * v77;
            *((float *)&v336 + 2) = v79 * v78;
            BlueFin::FMatrix::FMatrix((uint64_t)&v329, (float *)&v336, 0, (uint64_t)v302);
            float v83 = *((double *)&v345[1] + 1);
            float v84 = *(double *)&v346;
            float v85 = (float)-(float)(v81 * v84) - (float)(v83 * v80);
            float v86 = *((double *)&v346 + 1);
            float v87 = v85 - (float)(v86 * v82);
            float v88 = *((float *)v329.f64 + 1);
            uint64_t v89 = *(void *)(*(void *)(a3[2] + 8) + 8 * v64);
            *(double *)(v89 + 8) = (float)-*(float *)v329.f64;
            *(double *)(v89 + 24) = (float)-v88;
            double v90 = (float)-*(float *)&v329.f64[1];
            *(void *)(v89 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x3FF0000000000000;
            *(double *)(v89 + 56) = v90;
            *(double *)(v89 + 64) = v87;
          }
LABEL_225:
          BlueFin::GlSetIterator::operator++(&v290);
          if (v291 == v290) {
            return v17;
          }
          break;
        case 1:
          if ((v70 & 8) != 0) {
            goto LABEL_222;
          }
          uint64_t v91 = *((void *)&v296 + 1);
          *(void *)(*(void *)*a3 + 8 * v64) = *(void *)v73;
          *(void *)(*(void *)a3[1] + 8 * v64) = v91;
          double v92 = (void *)a3[3];
          if (v92) {
            *(double *)(*v92 + 8 * v64) = *(double *)(a4 + 56 * v69 + 8) * *(double *)(a4 + 56 * v69 + 8);
          }
          uint64_t v93 = a3[2];
          if (!v93) {
            goto LABEL_98;
          }
          uint64_t v17 = 0;
          *(void *)(*(void *)(*(void *)(v93 + 8) + 8 * v64) + 64) = 0x3FF0000000000000;
          goto LABEL_225;
        case 2:
          if ((v70 & 8) != 0) {
            goto LABEL_222;
          }
          uint64_t v281 = a2;
          v284 = a3;
          int v94 = *(_DWORD *)(a2 + 28);
          uint64_t v322 = 0;
          long long v320 = 0u;
          int v321 = 0;
          memset(v319, 0, sizeof(v319));
          uint64_t v95 = a4 + 56 * v292;
          unsigned int v97 = *(_DWORD *)(v95 + 16);
          uint64_t v96 = v95 + 16;
          uint64_t v98 = (unsigned char *)(v96 + 16);
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *, float64x2_t *, unint64_t, unint64_t, unint64_t, void))(*(void *)v61 + 24))(v61, v96 + 16, v97, v295, v319, v70 & 1, (v70 >> 15) & 1, (v70 >> 5) & 1, 0);
          if (v17) {
            goto LABEL_209;
          }
          v273 = (_DWORD *)v96;
          uint64_t v350 = 0;
          uint64_t v344 = 0;
          uint64_t v335 = 0;
          float v328 = -91.0;
          int v318 = 0;
          LOBYTE(v316[0]) = *v98;
          uint64_t v99 = a4 + 56 * v69;
          v316[1] = *(_DWORD *)(v99 + 36);
          __int16 v317 = *(_WORD *)(v99 + 40);
          if ((((unint64_t)*(unsigned int *)(*(void *)(v61 + 1512)
                                                   + (((unint64_t)LOBYTE(v316[0]) >> 3) & 0x1C)) >> (v316[0] & 0x1F)) & 1) != 0)
          {
            BOOL LOSFromCache = BlueFin::GlPeSatPosCache::GetLOSFromCache(v280, (unsigned __int8 *)(v96 + 16), (uint64_t)&v329);
            double v101 = v284;
            if (LOSFromCache)
            {
              float64x2_t v102 = vsubq_f64(v319[0], *(float64x2_t *)((char *)&v295[1] + 8));
              double v103 = v319[1].f64[0] - *((double *)&v295[2] + 1);
              double v104 = sqrt(vaddvq_f64(vmulq_f64(v102, v102)) + v103 * v103);
              if (v104 == 0.0) {
                goto LABEL_329;
              }
              uint64_t v344 = v65;
              long long v336 = (__int128)vmulq_n_f64(v102, 1.0 / v104);
              *(double *)&long long v337 = v103 * (1.0 / v104);
            }
            else
            {
              double v104 = (*(double (**)(void, float64x2_t *, char *, long long *, long long *, float64x2_t *, void, void))(**(void **)(v61 + 4264) + 80))(*(void *)(v61 + 4264), v319, (char *)&v295[1] + 8, v295, &v336, &v329, 0, 0);
            }
            unsigned int v156 = BlueFin::GlPeElAzCache::Get(v279, (unsigned __int8 *)v316);
            float v157 = *((float *)v156 + 1);
            int v318 = *((_DWORD *)v156 + 2);
            float v328 = v157;
          }
          else
          {
            double v101 = v284;
            if (v284[5]) {
              __int16 v154 = &v318;
            }
            else {
              __int16 v154 = 0;
            }
            if (v284[4]) {
              char v155 = &v328;
            }
            else {
              char v155 = 0;
            }
            double v104 = (*(double (**)(void, float64x2_t *, char *, long long *, long long *, float64x2_t *, int *, float *))(**(void **)(v61 + 4264) + 80))(*(void *)(v61 + 4264), v319, (char *)&v295[1] + 8, v295, &v336, &v329, v154, v155);
          }
          *(void *)(*(void *)*v101 + 8 * v64) = *(void *)v73;
          double v158 = -(v319[2].f64[0] * *((double *)&v336 + 1)
                 + v319[1].f64[1] * *(double *)&v336
                 + v319[2].f64[1] * *(double *)&v337);
          if (*(unsigned char *)(*(void *)(v61 + 4272) + 120021))
          {
            uint64_t v314 = 0;
            long long v310 = 0u;
            memset(v311, 0, sizeof(v311));
            long long v312 = 0u;
            int v313 = 0;
            uint64_t v327 = 0;
            uint64_t v324 = 0;
            int v271 = (*(uint64_t (**)(uint64_t, unsigned char *, void, long long *, long long *, void, unint64_t, unint64_t, void))(*(void *)v61 + 24))(v61, v98, (*v273 - 100), v295, &v310, 0, ((unint64_t)*(unsigned int *)(v281 + 32) >> 15) & 1, ((unint64_t)*(unsigned int *)(v281 + 32) >> 5) & 1, 0);
            double v159 = (*(double (**)(void, long long *, char *, long long *, float64x2_t *, __n128 *, void, void))(**(void **)(v61 + 4264) + 80))(*(void *)(v61 + 4264), &v310, (char *)&v295[1] + 8, v295, &v325, v323, 0, 0);
            int v160 = (*(uint64_t (**)(uint64_t, unsigned char *, void, long long *, long long *, void, unint64_t, unint64_t, void))(*(void *)v61 + 24))(v61, v98, (*v273 + 100), v295, &v310, 0, ((unint64_t)*(unsigned int *)(v281 + 32) >> 15) & 1, ((unint64_t)*(unsigned int *)(v281 + 32) >> 5) & 1, 0);
            (*(void (**)(void, long long *, char *, long long *, float64x2_t *, __n128 *, void, void))(**(void **)(v61 + 4264) + 80))(*(void *)(v61 + 4264), &v310, (char *)&v295[1] + 8, v295, &v325, v323, 0, 0);
            if (!(v271 | v160)) {
              double v158 = (v159 - v161) * 1000.0 / 200.0;
            }
            int v162 = v94;
            double v101 = v284;
          }
          else
          {
            int v162 = v94;
          }
          uint64_t v327 = v65;
          float64x2_t v325 = v297;
          double v326 = v298[0];
          BlueFin::Matrix::mult((BlueFin::Matrix *)v323, (const BlueFin::Matrix *)&v325, 1, (const BlueFin::Matrix *)&v329, v298[0]);
          uint64_t v163 = v64;
          *(double *)(*(void *)v101[1] + 8 * v64) = -v158
                                                      - v323[0].n128_f64[0]
                                                      + *(double *)&v299
                                                      + *((double *)&v320 + 1) * -299792458.0;
          int v164 = (uint64_t *)v101[3];
          if (v164)
          {
            double v165 = *(double *)(a4 + 56 * v69 + 8);
            double v166 = v165 * v165;
            uint64_t v167 = *v164;
            *(double *)(*v164 + 8 * v64) = v165 * v165;
            if ((*(unsigned char *)(v281 + 33) & 0x40) != 0)
            {
              float v328 = fmaxf(v328, 1.0);
              float v168 = 0.34907;
              if (v328 > 20.0) {
                float v168 = v328 * 0.017453;
              }
              float v169 = sinf(v168);
              uint64_t v163 = v64;
              *(double *)(v167 + 8 * v64) = v166 * (float)(1.0 / v169);
            }
          }
          uint64_t v170 = v101[2];
          if (v170)
          {
            switch(v162)
            {
              case 0:
              case 6:
                uint64_t v171 = *(void *)(*(void *)(v170 + 8) + 8 * v163);
                *(double *)(v171 + 16) = -v329.f64[0];
                *(double *)(v171 + 32) = -v329.f64[1];
                *(void *)(v171 + 48) = 0x3FF0000000000000;
                break;
              case 1:
                uint64_t v315 = v65;
                long long v310 = *(long long *)((char *)&v319[1] + 8);
                v311[0] = *(void *)&v319[2].f64[1];
                uint64_t v214 = v163;
                BlueFin::Matrix::mult((BlueFin::Matrix *)&v304, (const BlueFin::Matrix *)&v310, 1, (const BlueFin::Matrix *)&v336, v319[2].f64[1]);
                BlueFin::Matrix::mult((uint64_t)v345, (const BlueFin::Matrix *)&v304, (const BlueFin::Matrix *)&v336);
                BlueFin::Matrix::operator-=((uint64_t)v345, (uint64_t)&v310);
                BlueFin::Matrix::operator/=((uint64_t)v345, v104);
                uint64_t v215 = *(void *)(*(void *)(v170 + 8) + 8 * v214);
                *(_OWORD *)(v215 + 8) = v345[0];
                *(void *)(v215 + 24) = *(void *)&v345[1];
                *(float64x2_t *)(v215 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vnegq_f64(v329);
                *(void *)(v215 + 56) = 0x3FF0000000000000;
                break;
              case 2:
                uint64_t v216 = *(void *)(*(void *)(v170 + 8) + 8 * v163);
                *(double *)(v216 + 8) = -v329.f64[0];
                *(double *)(v216 + 16) = -v329.f64[1];
                *(double *)(v216 + 24) = -*(double *)&v330;
                *(void *)(v216 + 32) = 0x3FF0000000000000;
                break;
              case 3:
                double v217 = -v329.f64[0];
                uint64_t v218 = *(void *)(*(void *)(v170 + 8) + 8 * v163);
                *(double *)(v218 + 16) = -v329.f64[0];
                double v219 = -v329.f64[1];
                *(double *)(v218 + 32) = -v329.f64[1];
                double v220 = -*(double *)&v330;
                *(double *)(v218 + 48) = -*(double *)&v330;
                *(void *)(v218 + 64) = 0x3FF0000000000000;
                if ((*(unsigned char *)(v281 + 34) & 2) != 0) {
                  *(double *)(v218 + 104) = v298[2] * v219 + v298[1] * v217 + v298[3] * v220;
                }
                break;
              case 4:
                uint64_t v221 = *(void *)(*(void *)(v170 + 8) + 8 * v163);
                *(double *)(v221 + 16) = -v329.f64[0];
                *(double *)(v221 + 32) = -v329.f64[1];
                *(double *)(v221 + 48) = -*(double *)&v330;
                *(void *)(v221 + 64) = 0x3FF0000000000000;
                break;
              default:
                break;
            }
          }
          uint64_t v222 = v101[4];
          uint64_t v61 = v288;
          if (v222) {
            *(float *)(v222 + 4 * v64 - 4) = v328;
          }
          uint64_t v223 = v101[5];
          if (v223) {
            *(_DWORD *)(v223 + 4 * v64 - 4) = v318;
          }
LABEL_209:
          unsigned int v62 = v289;
          a2 = v281;
          a3 = v284;
          if (!v17) {
            goto LABEL_225;
          }
          goto LABEL_223;
        case 3:
          if ((v70 & 8) != 0) {
            goto LABEL_222;
          }
          int v105 = *(_DWORD *)(a2 + 28);
          *(double *)(*(void *)*a3 + 8 * v64) = *(double *)&v295[1] - *(double *)v73;
          *(void *)(*(void *)a3[1] + 8 * v64) = 0;
          long long v106 = (void *)a3[3];
          if (v106) {
            *(double *)(*v106 + 8 * v64) = *(double *)(a4 + 56 * v69 + 8) * *(double *)(a4 + 56 * v69 + 8);
          }
          uint64_t v107 = a3[2];
          if (!v107) {
            goto LABEL_115;
          }
          if (v105 == 1)
          {
            double v148 = *((double *)v295 + 1) * 0.0174532925;
            __double2 v149 = __sincos_stret(*(double *)v295 * 0.0174532925);
            __double2 v150 = __sincos_stret(v148);
            uint64_t v17 = 0;
            unsigned int v151 = *(double **)(*(void *)(v107 + 8) + 8 * v64);
            v151[1] = -(v149.__cosval * v150.__cosval);
            v151[2] = -(v149.__cosval * v150.__sinval);
            v151[3] = -v149.__sinval;
          }
          else
          {
            if (v105)
            {
              v266 = "false";
              DeviceFaultNotify("glpe_computezrh.cpp", 296, "getZRH_FromAlMeas", (char)"false");
              v267 = "glpe_computezrh.cpp";
              int v268 = 296;
              goto LABEL_332;
            }
            uint64_t v17 = 0;
            *(void *)(*(void *)(*(void *)(v107 + 8) + 8 * v64) + 56) = 0x3FF0000000000000;
          }
LABEL_116:
          unsigned int v62 = v289;
          goto LABEL_225;
        case 4:
          int v108 = *(_DWORD *)(a2 + 28);
          float64_t v109 = v297.f64[0];
          *(void *)(*(void *)*a3 + 8 * v64) = *(void *)v73;
          *(float64_t *)(*(void *)a3[1] + 8 * v64) = v109;
          char v110 = (void *)a3[3];
          if (v110) {
            *(double *)(*v110 + 8 * v64) = *(double *)(a4 + 56 * v69 + 8) * *(double *)(a4 + 56 * v69 + 8);
          }
          uint64_t v111 = a3[2];
          if (!v111) {
            goto LABEL_98;
          }
          if (v108)
          {
            v266 = "eCallingFunction == CALLING_FROMKF";
            DeviceFaultNotify("glpe_computezrh.cpp", 326, "getZRH_FromVxMeas", (char)"eCallingFunction == CALLING_FROMKF");
            v267 = "glpe_computezrh.cpp";
            int v268 = 326;
            goto LABEL_332;
          }
          uint64_t v17 = 0;
          *(void *)(*(void *)(*(void *)(v111 + 8) + 8 * v64) + 16) = 0x3FF0000000000000;
          goto LABEL_225;
        case 5:
          int v112 = *(_DWORD *)(a2 + 28);
          float64_t v113 = v297.f64[1];
          *(void *)(*(void *)*a3 + 8 * v64) = *(void *)v73;
          *(float64_t *)(*(void *)a3[1] + 8 * v64) = v113;
          uint64_t v114 = (void *)a3[3];
          if (v114) {
            *(double *)(*v114 + 8 * v64) = *(double *)(a4 + 56 * v69 + 8) * *(double *)(a4 + 56 * v69 + 8);
          }
          uint64_t v115 = a3[2];
          if (!v115) {
            goto LABEL_98;
          }
          if (v112)
          {
            v266 = "eCallingFunction == CALLING_FROMKF";
            DeviceFaultNotify("glpe_computezrh.cpp", 357, "getZRH_FromVyMeas", (char)"eCallingFunction == CALLING_FROMKF");
            v267 = "glpe_computezrh.cpp";
            int v268 = 357;
            goto LABEL_332;
          }
          uint64_t v17 = 0;
          *(void *)(*(void *)(*(void *)(v115 + 8) + 8 * v64) + 32) = 0x3FF0000000000000;
          goto LABEL_225;
        case 8:
          if ((v70 & 8) != 0) {
            goto LABEL_222;
          }
          int v135 = *(_DWORD *)(a2 + 28);
          *(void *)&v345[0] = *(void *)v73;
          *(_OWORD *)((char *)v345 + 8) = *(long long *)((char *)v295 + 8);
          BlueFin::lla2ned((double *)v345, (double *)v295, 0, (double *)&v336);
          *(void *)(*(void *)*a3 + 8 * v64) = v336;
          *(void *)(*(void *)a3[1] + 8 * v64) = 0;
          unsigned int v136 = (void *)a3[3];
          if (v136) {
            *(double *)(*v136 + 8 * v64) = *(double *)(a4 + 56 * v69 + 8) * *(double *)(a4 + 56 * v69 + 8);
          }
          uint64_t v137 = a3[2];
          if (!v137) {
            goto LABEL_115;
          }
          if (v135)
          {
            v266 = "eCallingFunction == CALLING_FROMKF";
            DeviceFaultNotify("glpe_computezrh.cpp", 390, "getZRH_FromLatMeas", (char)"eCallingFunction == CALLING_FROMKF");
            v267 = "glpe_computezrh.cpp";
            int v268 = 390;
            goto LABEL_332;
          }
          *(void *)(*(void *)(*(void *)(v137 + 8) + 8 * v64) + 8) = 0x3FF0000000000000;
LABEL_115:
          uint64_t v17 = 0;
          goto LABEL_116;
        case 9:
          if ((v70 & 8) != 0) {
            goto LABEL_222;
          }
          int v116 = *(_DWORD *)(a2 + 28);
          double v117 = *(double *)v73;
          *(void *)&v345[0] = *(void *)&v295[0];
          *((double *)v345 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v117;
          *(void *)&v345[1] = *(void *)&v295[1];
          BlueFin::lla2ned((double *)v345, (double *)v295, 0, (double *)&v336);
          *(void *)(*(void *)*a3 + 8 * v64) = *((void *)&v336 + 1);
          *(void *)(*(void *)a3[1] + 8 * v64) = 0;
          double v118 = (void *)a3[3];
          if (v118) {
            *(double *)(*v118 + 8 * v64) = *(double *)(a4 + 56 * v69 + 8) * *(double *)(a4 + 56 * v69 + 8);
          }
          uint64_t v119 = a3[2];
          if (!v119) {
            goto LABEL_115;
          }
          if (v116)
          {
            v266 = "eCallingFunction == CALLING_FROMKF";
            DeviceFaultNotify("glpe_computezrh.cpp", 423, "getZRH_FromLonMeas", (char)"eCallingFunction == CALLING_FROMKF");
            v267 = "glpe_computezrh.cpp";
            int v268 = 423;
            goto LABEL_332;
          }
          *(void *)(*(void *)(*(void *)(v119 + 8) + 8 * v64) + 24) = 0x3FF0000000000000;
          goto LABEL_115;
        case 0xA:
          int v285 = *(_DWORD *)(a2 + 28);
          uint64_t v314 = 0;
          long long v310 = 0u;
          memset(v311, 0, sizeof(v311));
          long long v312 = 0u;
          int v313 = 0;
          uint64_t v309 = 0;
          long long v306 = 0u;
          long long v307 = 0u;
          int v308 = 0;
          uint64_t v120 = v61;
          uint64_t v121 = a4 + 56 * v292;
          unsigned int v123 = *(_DWORD *)(v121 + 16);
          uint64_t v122 = v121 + 16;
          long long v304 = 0u;
          long long v305 = 0u;
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *, long long *, uint64_t, void, void, void))(*(void *)v120 + 24))(v120, v122 + 16, v123, v295, &v310, 1, 0, 0, 0);
          if (v17) {
            goto LABEL_221;
          }
          uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *, long long *, void, void, void, void))(*(void *)v288 + 24))(v288, v122 + 16, (*(_DWORD *)v122 - *(_DWORD *)(a4 + 56 * v69 + 20)), v295, &v304, 0, 0, 0, 0);
          if (v17) {
            goto LABEL_221;
          }
          uint64_t v282 = v68;
          uint64_t v275 = v67;
          v277 = (BlueFin::GlSignalId *)v65;
          double v124 = v66;
          uint64_t v350 = 0;
          uint64_t v344 = 0;
          uint64_t v335 = 0;
          v316[0] = -1028259840;
          float v328 = 0.0;
          LOBYTE(v319[0].f64[0]) = *(unsigned char *)(v122 + 16);
          uint64_t v125 = a4 + 56 * v69;
          HIDWORD(v319[0].f64[0]) = *(_DWORD *)(v125 + 36);
          LOWORD(v319[0].f64[1]) = *(_WORD *)(v125 + 40);
          long long v126 = v304;
          double v128 = *((double *)&v295[1] + 1);
          double v127 = *(double *)&v295[2];
          double v129 = *(double *)&v305;
          double v130 = *((double *)&v295[2] + 1);
          unsigned int v131 = *(double (**)(void))(**(void **)(v288 + 4264) + 80);
          if ((((unint64_t)*(unsigned int *)(*(void *)(v288 + 1512)
                                                   + (((unint64_t)LOBYTE(v319[0].f64[0]) >> 3) & 0x1C)) >> (LOBYTE(v319[0].f64[0]) & 0x1F)) & 1) != 0)
          {
            double v132 = v131();
            uint64_t v133 = BlueFin::GlPeElAzCache::Get(v279, (unsigned __int8 *)v319);
            int v134 = *((_DWORD *)v133 + 1);
            float v328 = *((float *)v133 + 2);
            v316[0] = v134;
          }
          else
          {
            double v132 = v131();
          }
          *(void *)(*(void *)*a3 + 8 * v64) = *(void *)v73;
          *(double *)(*(void *)a3[1] + 8 * v64) = sqrt((*(double *)&v126 - v128) * (*(double *)&v126 - v128)+ (*((double *)&v126 + 1) - v127)* (*((double *)&v126 + 1) - v127)+ (v129 - v130) * (v129 - v130))- v132+ (*(double *)&v307 - *(double *)&v312) * -299792458.0- *(double *)v73;
          unint64_t v172 = (void *)a3[3];
          if (v172)
          {
            double v173 = *(double *)(a4 + 56 * v69 + 8);
            *(double *)(*v172 + 8 * v64) = v173 * v173 + 0.0000999999975;
          }
          uint64_t v174 = a3[2];
          double v66 = v124;
          uint64_t v67 = v275;
          uint64_t v65 = (uint64_t)v277;
          uint64_t v68 = v282;
          if (v174)
          {
            switch(v285)
            {
              case 0:
                uint64_t v175 = *(void *)(*(void *)(v174 + 8) + 8 * v64);
                *(double *)(v175 + 16) = -v329.f64[0];
                *(double *)(v175 + 32) = -v329.f64[1];
                *(void *)(v175 + 48) = 0x3FF0000000000000;
                goto LABEL_216;
              case 1:
                uint64_t v327 = (uint64_t)v277;
                float64x2_t v325 = *(float64x2_t *)&v311[1];
                double v326 = *(double *)&v311[3];
                BlueFin::Matrix::mult((BlueFin::Matrix *)v323, (const BlueFin::Matrix *)&v325, 1, (const BlueFin::Matrix *)&v336, *(double *)&v311[3]);
                BlueFin::Matrix::mult((uint64_t)v345, (const BlueFin::Matrix *)v323, (const BlueFin::Matrix *)&v336);
                BlueFin::Matrix::operator-=((uint64_t)v345, (uint64_t)&v325);
                BlueFin::Matrix::operator/=((uint64_t)v345, v132);
                uint64_t v224 = *(void *)(*(void *)(v174 + 8) + 8 * v64);
                *(_OWORD *)(v224 + 8) = v345[0];
                *(void *)(v224 + 24) = *(void *)&v345[1];
                *(float64x2_t *)(v224 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vnegq_f64(v329);
                *(void *)(v224 + 56) = 0x3FF0000000000000;
                goto LABEL_216;
              case 2:
                uint64_t v225 = *(void *)(*(void *)(v174 + 8) + 8 * v64);
                *(double *)(v225 + 8) = -v329.f64[0];
                *(double *)(v225 + 16) = -v329.f64[1];
                *(double *)(v225 + 24) = -*(double *)&v330;
                *(void *)(v225 + 32) = 0x3FF0000000000000;
                goto LABEL_216;
              case 3:
                uint64_t v226 = *(void *)(*(void *)(v174 + 8) + 8 * v64);
                *(double *)(v226 + 16) = -v329.f64[0];
                *(double *)(v226 + 32) = -v329.f64[1];
                *(double *)(v226 + 48) = -*(double *)&v330;
                *(void *)(v226 + 64) = 0x3FF0000000000000;
                if (v172) {
                  goto LABEL_216;
                }
                v266 = "rotOutput.m_potR";
                DeviceFaultNotify("glpe_computezrh.cpp", 1217, "getZRH_FromADRMeas", (char)"rotOutput.m_potR");
                v267 = "glpe_computezrh.cpp";
                int v268 = 1217;
                break;
              case 4:
                uint64_t v227 = *(void *)(*(void *)(v174 + 8) + 8 * v64);
                *(double *)(v227 + 16) = -v329.f64[0];
                *(double *)(v227 + 32) = -v329.f64[1];
                *(double *)(v227 + 48) = -*(double *)&v330;
                *(void *)(v227 + 64) = 0x3FF0000000000000;
                if (v172) {
                  goto LABEL_216;
                }
                v266 = "rotOutput.m_potR";
                DeviceFaultNotify("glpe_computezrh.cpp", 1232, "getZRH_FromADRMeas", (char)"rotOutput.m_potR");
                v267 = "glpe_computezrh.cpp";
                int v268 = 1232;
                break;
              default:
                goto LABEL_216;
            }
LABEL_332:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v267, v268, v266);
          }
LABEL_216:
          uint64_t v228 = a3[4];
          if (v228) {
            *(_DWORD *)(v228 + 4 * v64 - 4) = v316[0];
          }
          uint64_t v229 = a3[5];
          if (v229) {
            *(float *)(v229 + 4 * v64 - 4) = v328;
          }
          uint64_t v17 = 0;
LABEL_221:
          uint64_t v61 = v288;
          unsigned int v62 = v289;
LABEL_222:
          if (v17) {
            goto LABEL_223;
          }
          goto LABEL_225;
        default:
          v266 = "0";
          DeviceFaultNotify("glpe_computezrh.cpp", 207, "Compute", (char)"0");
          v267 = "glpe_computezrh.cpp";
          int v268 = 207;
          goto LABEL_332;
      }
    }
  }
  return 0;
}

uint64_t BlueFin::GlPeComputeZRH::GetSatPos(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, float64x2_t *a5, int a6, int a7, int a8, __n128 a9, uint64_t a10)
{
  double v16 = (double)(int)a3;
  if (a3 <= 0xFF9222FE) {
    double v16 = (double)a3;
  }
  double v17 = *(double *)(a4 + 56);
  double v18 = fabs(v17);
  if (a10) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = *(unsigned char *)(a4 + 152) == 0;
  }
  if (v19 && v18 <= 0.5)
  {
    double v21 = v16 - (double)**(int **)(a1 + 4336);
    if (!a6) {
      goto LABEL_17;
    }
  }
  else
  {
    double v21 = v16 + v17 * -1000.0;
    if (!a6) {
      goto LABEL_17;
    }
  }
  if ((a8 & 1) == 0
    && (a7 & 1) == 0
    && (BlueFin::GlPeSatPosCache::GetSatPosFromCache(a1 + 24, a2, (uint64_t)a5, v21) & 1) != 0)
  {
    return 0;
  }
LABEL_17:
  if (a8)
  {
    int v23 = 32;
    goto LABEL_23;
  }
  a9.n128_f64[0] = v21;
  uint64_t result = BlueFin::GlPeComputeZRH::GetSatPosWithFullPr(a1, a2, a4, a7, 1, (uint64_t)a5, a10, a9);
  if (result)
  {
    if (*(unsigned char *)(a1 + 4344)) {
      int v23 = 2;
    }
    else {
      int v23 = 66;
    }
LABEL_23:
    int v30 = v23;
    uint64_t v24 = *(void *)(a1 + 4288);
    double v32 = 0.0;
    BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(v24, a2, (uint64_t *)&v32, &v31);
    double v25 = v32 * 0.001;
    double v32 = v32 * 0.001;
    char v26 = 1;
    while (1)
    {
      char v27 = v26;
      if (!(*(unsigned int (**)(void, unsigned __int8 *, double *, int *, float64x2_t *, double))(**(void **)(a1 + 4264) + 32))(*(void *)(a1 + 4264), a2, &v32, &v30, a5, v21 + v25 * -1000.0))break; {
      char v26 = 0;
      }
      float64_t v28 = a5[1].f64[0] - *(double *)(a4 + 40);
      float64x2_t v29 = vsubq_f64(*a5, *(float64x2_t *)(a4 + 24));
      double v25 = sqrt(vaddvq_f64(vmulq_f64(v29, v29)) + v28 * v28) / 299792458.0;
      double v32 = v25;
      if ((v27 & 1) == 0)
      {
        uint64_t result = 0;
        goto LABEL_28;
      }
    }
    uint64_t result = 6;
  }
LABEL_28:
  a5[4].f64[1] = v21;
  return result;
}

uint64_t BlueFin::GlPeComputeZRH::GetSatPosWithFullPr(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, __n128 a8)
{
  double v9 = a8.n128_f64[0];
  if (!a7 && *(unsigned char *)(a3 + 152)) {
    return 4;
  }
  double v13 = 0.0;
  if (!a7)
  {
LABEL_8:
    char v15 = 0;
    int v14 = 0;
    goto LABEL_10;
  }
  int v14 = *(unsigned __int8 *)(a7 + 48);
  if (*(unsigned char *)(a7 + 48))
  {
    int v14 = *(_DWORD *)(a7 + 24);
    if (v14 != -1)
    {
      double v13 = *(double *)a7;
      char v15 = 1;
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  char v15 = 0;
LABEL_10:
  uint64_t v16 = BlueFin::GlSignalId::s_aucGnss2numSignals[BlueFin::GlSvId::s_aucSvId2gnss[*a2]];
  if (BlueFin::GlSignalId::s_aucGnss2numSignals[BlueFin::GlSvId::s_aucSvId2gnss[*a2]])
  {
    int v29 = a5;
    int v30 = a4;
    uint64_t v31 = a6;
    uint64_t v17 = 7 * v16;
    for (int i = v16 - 1; ; --i)
    {
      uint64_t v19 = *a2;
      LOBYTE(v33) = v19;
      HIDWORD(v33) = i;
      __int16 v20 = 575;
      __int16 v34 = 575;
      if ((v19 + 67) >= 0x44u)
      {
        uint64_t v21 = BlueFin::GlSvId::s_aucSvId2gnss[v19];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v17 - 7 + v21] == 255)
        {
          HIDWORD(v33) = -1;
          __int16 v20 = 575;
        }
        else
        {
          __int16 v20 = BlueFin::GlSignalId::s_ausGnss2signalId[v21]
              + v19
              - BlueFin::GlSvId::s_aucGnss2minSvId[v21]
              + BlueFin::GlSvId::s_aucGnss2numSvId[v21] * (_WORD)i;
          __int16 v34 = v20;
        }
      }
      long long v22 = *(BlueFin::GlPeMsmtMgr **)(a1 + 4320);
      if (((unint64_t)*(unsigned int *)(*((void *)v22 + 1) + 4 * (v20 >> 5)) >> (v20 & 0x1F)))
      {
        PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(v22, (const BlueFin::GlSignalId *)&v33, 0);
        if (*((_DWORD *)PeMeas + 16) != -1)
        {
          uint64_t v24 = PeMeas;
          if (BlueFin::stPeSigMeasKF::IsPRValid(PeMeas)) {
            break;
          }
        }
      }
      v17 -= 7;
      if (!v17) {
        return 5;
      }
    }
    int v14 = *((_DWORD *)v24 + 16);
    double v13 = *((double *)v24 + 4);
    a6 = v31;
    a5 = v29;
    a4 = v30;
    goto LABEL_24;
  }
LABEL_21:
  if ((v15 & 1) == 0) {
    return 5;
  }
LABEL_24:
  double v25 = v13 + (double)v14 * 299792.458;
  double v26 = (v25 - *(double *)(a3 + 48)) / 299792458.0;
  a8.n128_f64[0] = v9 - v25 / 299792.458;
  if (!a5) {
    double v26 = 0.0;
  }
  int v27 = *(unsigned __int8 *)(a1 + 4344);
  double v33 = v26;
  if (v27) {
    int v28 = 2;
  }
  else {
    int v28 = 66;
  }
  int v32 = v28;
  if (a4 && !*(unsigned char *)(*(void *)(a1 + 4272) + 120021)) {
    int v32 = v28 | 0x80;
  }
  if ((*(unsigned int (**)(void, unsigned __int8 *, double *, int *, uint64_t, __n128))(**(void **)(a1 + 4264) + 32))(*(void *)(a1 + 4264), a2, &v33, &v32, a6, a8))
  {
    return 0;
  }
  else
  {
    return 6;
  }
}

uint64_t BlueFin::GlPeMsmtMgr::GetPeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2, char a3)
{
  uint64_t v6 = BlueFin::GlSignalIdArray::Get(*((void *)this + 2397), (uint64_t)a2);
  if (!v6
    || (((unint64_t)*(unsigned int *)(*((void *)this + 1) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1) == 0
    && (a3 & 1) == 0)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 931, "GetPeMeas", (char)"potMePeMeas != nullptr && (m_otValidMeasSignalIds.Has(rotSignalId) || bAllowInvalidMeas)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 931, "potMePeMeas != nullptr && (m_otValidMeasSignalIds.Has(rotSignalId) || bAllowInvalidMeas)");
  }
  return v6 + 144;
}

uint64_t BlueFin::GlSignalIdArray::Get(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 8) - *(unsigned __int16 *)(a1 + 1180) >= *(unsigned __int16 *)(a1 + 1182))
  {
    uint64_t v4 = "handle - m_usMinHandle < m_usNumHandles";
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    int v5 = 313;
    goto LABEL_8;
  }
  unsigned int v2 = *(unsigned __int16 *)(*(void *)(a1 + 1160)
                           + 2 * (unsigned __int16)(*(_WORD *)(a2 + 8) - *(_WORD *)(a1 + 1180)));
  if (v2 == 0xFFFF) {
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 1184) <= v2)
  {
    uint64_t v4 = "slot < m_usNumSlots";
    DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
    int v5 = 319;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", v5, v4);
  }
  return *(void *)(a1 + 1152) + *(_DWORD *)(a1 + 1176) * v2;
}

unint64_t BlueFin::stPeSigMeasKF::IsPRValid(BlueFin::stPeSigMeasKF *this)
{
  if ((*((unsigned char *)this + 72) & 2) == 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 37);
  if (v2) {
    return BlueFin::stSkfTestParam::UseSigId(*((BlueFin::stSkfTestParam **)this + 37), (BlueFin::stPeSigMeasKF *)((char *)this + 252), (const BlueFin::GlSignalIdSet *)(v2 + 112), (const BlueFin::GlSignalIdSet *)(v2 + 376));
  }
  else {
    return 1;
  }
}

BOOL BlueFin::GlPeSatPosCache::GetHFromCache(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4 = *a2;
  uint64_t v5 = (1 << (v4 & 0x1F)) & *(unsigned int *)(*(void *)(a1 + 24) + ((v4 >> 3) & 0x1C));
  if (v5)
  {
    uint64_t v6 = (float *)(**(void **)(a1 + 264) + 104 * *(unsigned __int8 *)(v4 + a1 + 71));
    float v7 = v6[24];
    uint64_t v8 = *(void *)(*(void *)(a4 + 8) + 8 * a3);
    *(double *)(v8 + 8) = v6[23];
    *(double *)(v8 + 24) = v7;
    *(double *)(v8 + 56) = v6[25];
    *(void *)(v8 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x3FF0000000000000;
  }
  return v5 != 0;
}

uint64_t BlueFin::GlPeSatPosCache::GetSatPosFromCache(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double a4)
{
  unint64_t v4 = *a2;
  if (((*(unsigned int *)(*(void *)(a1 + 24) + ((v4 >> 3) & 0x1C)) >> (v4 & 0x1F)) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = **(void **)(a1 + 264);
  if (*(unsigned __int8 *)(v5 + 104 * *(unsigned __int8 *)(v4 + a1 + 71)) != v4) {
    return 0;
  }
  double v6 = *(double *)(v5 + 104 * *(unsigned __int8 *)(v4 + a1 + 71) + 80);
  if (vabdd_f64(v6, a4) >= 0.001) {
    return 0;
  }
  uint64_t v7 = v5 + 104 * *(unsigned __int8 *)(v4 + a1 + 71);
  *(void *)a3 = *(void *)(v7 + 8);
  *(void *)(a3 + 8) = *(void *)(v7 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v7 + 24);
  *(void *)(a3 + 32) = *(void *)(v7 + 40);
  *(_OWORD *)(a3 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(v7 + 48);
  *(void *)(a3 + 56) = *(void *)(v7 + 64);
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(v7 + 72);
  *(double *)(a3 + 72) = v6;
  return 1;
}

uint64_t BlueFin::FMatrix::FMatrix(uint64_t result, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *((unsigned int *)a2 + 17);
  if (v4 != *(_DWORD *)(a4 + 68))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 91, "FMatrix", (char)"mLeft.m_NbCols == mRight.m_NbCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 91, "mLeft.m_NbCols == mRight.m_NbCols");
  }
  uint64_t v5 = *((unsigned int *)a2 + 16);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(unsigned int *)(a4 + 64);
    do
    {
      if ((int)v7 >= 1)
      {
        uint64_t v8 = 0;
        double v9 = (float *)a4;
        do
        {
          float v10 = 0.0;
          if ((int)v4 >= 1)
          {
            double v11 = a2;
            uint64_t v12 = v9;
            uint64_t v13 = v4;
            do
            {
              float v14 = *v11++;
              float v15 = v14;
              float v16 = *v12++;
              float v10 = v10 + (float)(v15 * v16);
              --v13;
            }
            while (v13);
          }
          *(float *)(result + 16 * v6 + 4 * v8++) = v10;
          v9 += 4;
        }
        while (v8 != v7);
      }
      ++v6;
      a2 += 4;
    }
    while (v6 != v5);
  }
  *(_DWORD *)(result + 64) = v5;
  *(_DWORD *)(result + 68) = *(_DWORD *)(a4 + 64);
  return result;
}

unsigned __int8 *BlueFin::GlPeMsmtMgr::GetMeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2, int a3, unsigned int a4)
{
  uint64_t result = (unsigned __int8 *)BlueFin::GlSignalIdArray::Get(*((void *)this + 2397), (uint64_t)a2);
  if (result
    && ((((unint64_t)*(unsigned int *)(*((void *)this + 1) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) | a4) & 1) == 0)
  {
    uint64_t result = 0;
  }
  if (!result && a3) {
    uint64_t result = (unsigned __int8 *)BlueFin::GlPeMsmtMgr::GetPropagatedMeMeas(this, a2);
  }
  if (result && (*result != *(unsigned __int8 *)a2 || *((_DWORD *)result + 1) != *((_DWORD *)a2 + 1)))
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 821, "GetMeMeas", (char)"potMeMeas->m_otSignalId == rotSignalId");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 821, "potMeMeas->m_otSignalId == rotSignalId");
  }
  return result;
}

double BlueFin::GlPeComputeZRH::GetTimeSystemConversionM(uint64_t a1, unsigned int a2)
{
  double v10 = 0.0;
  BlueFin::GlPeTimeManager::GetSystemConversionS(*(void *)(a1 + 4288), a2, &v10);
  double v4 = v10 / 0.001;
  if (v10 / 0.001 <= 0.0)
  {
    double v5 = 0.0;
    if (v10 / 0.001 < 0.0) {
      double v5 = ceil(v4 + -0.5);
    }
  }
  else
  {
    double v5 = floor(v4 + 0.5);
  }
  double v6 = v10 + v5 * -0.001;
  if (a2 == 3)
  {
    uint64_t v7 = *(void *)(a1 + 4280);
    if (*(unsigned char *)(v7 + 920))
    {
      double v6 = *(float *)(v7 + 996) * -0.000000001;
      uint64_t v8 = *(void *)(a1 + 4288);
      if (*(_DWORD *)(v8 + 2616) == 1)
      {
        if (*(unsigned char *)(v8 + 344)) {
          double v6 = v6 - *(double *)(v8 + 352);
        }
      }
    }
  }
  return v6 * 299792458.0;
}

BOOL BlueFin::GlPeComputeZRH::IsTimeUncValid(uint64_t a1, unsigned __int8 *a2, int a3)
{
  double v3 = dbl_263BBA250[a3 == 1];
  return BlueFin::GlPeTimeManager::GetSystemConversionUncUs(*(void *)(a1 + 4288), BlueFin::GlSvId::s_aucSvId2gnss[*a2]) <= v3;
}

double BlueFin::GlPeTimeManager::GetSystemConversionUncUs(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = BlueFin::GlPeGnssTime::Gnss2TimeSystem(a2);
  uint64_t ConversionTable = BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeGnssTime *)(a1 + 2608));
  double v5 = 0.0;
  if (v3 - 1 <= 1)
  {
    LOBYTE(v5) = *(unsigned char *)(a1 + 2589);
    double v5 = (double)*(unint64_t *)&v5;
  }
  return *(float *)(ConversionTable + 4 * v3 + 48) + v5 * 1000000.0;
}

double BlueFin::GlPeComputeZRH::GetUraM(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = *a2;
  if (((*(unsigned int *)(*(void *)(a1 + 48) + ((v2 >> 3) & 0x1C)) >> (v2 & 0x1F)) & 1) == 0) {
    return BlueFin::GlPeAsstMgr::GetUraM(*(void *)(a1 + 4272), a2);
  }
  LODWORD(result) = *(_DWORD *)(**(void **)(a1 + 288) + 104 * *(unsigned __int8 *)(a1 + v2 + 95) + 88);
  return result;
}

double BlueFin::GlPeAsstMgr::GetUraM(uint64_t a1, unsigned __int8 *a2)
{
  int v7 = 7;
  unsigned __int8 v8 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744), a2, (uint64_t)&v7);
  if (v8 - 1 > 0x3E) {
    return 1.58456366e29;
  }
  unsigned __int8 v6 = v8;
  Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1 + 384), v7);
  if (!Mgr) {
    return 1.58456366e29;
  }
  uint64_t v4 = (*(uint64_t (**)(void *, unsigned __int8 *, uint64_t))(*Mgr + 112))(Mgr, &v6, 1);
  if (!v4) {
    return 1.58456366e29;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 96))(v4);
  return result;
}

float BlueFin::GlPeGpsEphemerisBase::GetAccuracyM(BlueFin::GlPeGpsEphemerisBase *this)
{
  unsigned int v1 = (*(unsigned __int8 (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 4);
  if (v1 <= 0xE) {
    return BlueFin::GlPeGpsEphemerisBase::GetUraM(unsigned char)::afUraTbl[v1];
  }
  else {
    return 8192.0;
  }
}

void BlueFin::BigMatrix::Null(BlueFin::BigMatrix *this, int a2, int a3)
{
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  if (*((_DWORD *)this + 6) < a2 || *((_DWORD *)this + 7) < a3)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 921, "Null", (char)"m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 921, "m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
  }
  if (a2 >= 1)
  {
    uint64_t v4 = 0;
    do
      bzero((void *)(*(void *)(*((void *)this + 1) + 8 * v4++ + 8) + 8), 8 * *((int *)this + 5));
    while (v4 < *((int *)this + 4));
  }
}

void BlueFin::ned2lla(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v6 = a1[2];
  double v7 = (v6 + 6367426.73) * 0.0174532925;
  double v8 = *a1;
  long double v9 = cos(*a1 * 0.0174532925);
  double v10 = v8 + *a2 / v7;
  double v11 = a1[1] + a2[1] / (v7 * v9);
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v6 - a2[2];
  unint64_t v12 = 0x4056800000000000;
  if (v10 > 90.0 || (unint64_t v12 = 0xC056800000000000, v10 < -90.0)) {
    *(void *)a3 = v12;
  }
  double v13 = -v11;
  if (v11 >= 0.0) {
    double v13 = v11;
  }
  if (v13 > 180.0)
  {
    double v14 = v11 / 360.0;
    if (v11 / 360.0 <= 0.0)
    {
      double v15 = 0.0;
      if (v11 / 360.0 < 0.0) {
        double v15 = ceil(v14 + -0.5);
      }
    }
    else
    {
      double v15 = floor(v14 + 0.5);
    }
    a3[1] = v11 + v15 * -360.0;
  }
}

uint64_t BlueFin::GlBigArray::Remove(uint64_t this, int a2)
{
  if (a2 - *(unsigned __int16 *)(this + 28) >= *(unsigned __int16 *)(this + 30))
  {
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", 313, "handle - m_usMinHandle < m_usNumHandles");
  }
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v3 = (unsigned __int16)(a2 - *(_WORD *)(this + 28));
  if (*(__int16 *)(v2 + 2 * v3) != -1)
  {
    unsigned __int16 v4 = *(_WORD *)(this + 34) + 1;
    *(_WORD *)(this + 34) = v4;
    unsigned int v5 = *(unsigned __int16 *)(this + 32);
    if (v5 > v4)
    {
      uint64_t v6 = *(void *)(this + 16);
      uint64_t v7 = v4;
      while (*(unsigned __int16 *)(v6 + 2 * v7) != v3)
      {
        if (v5 == (unsigned __int16)++v7) {
          goto LABEL_9;
        }
      }
      __int16 v8 = *(_WORD *)(v2 + 2 * v3);
      *(_WORD *)(v6 + 2 * v7) = *(_WORD *)(v6 + 2 * v4);
      *(_WORD *)(v6 + 2 * *(unsigned __int16 *)(this + 34)) = v8;
    }
LABEL_9:
    *(_WORD *)(v2 + 2 * v3) = -1;
  }
  return this;
}

void BlueFin::lla2ecef(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = BlueFin::GlPeConvUtilCache::m_potThis;
  double v5 = *a1;
  double v6 = a1[1];
  if (*a1 == *(double *)(BlueFin::GlPeConvUtilCache::m_potThis + 72)
    && v6 == *(double *)(BlueFin::GlPeConvUtilCache::m_potThis + 80)
    && a1[2] == *(double *)(BlueFin::GlPeConvUtilCache::m_potThis + 88))
  {
    *(_OWORD *)a2 = *(_OWORD *)(BlueFin::GlPeConvUtilCache::m_potThis + 48);
    *(void *)(a2 + 16) = *(void *)(v4 + 64);
  }
  else
  {
    __double2 v7 = __sincos_stret(v5 * 0.0174532925);
    __double2 v8 = __sincos_stret(v6 * 0.0174532925);
    double v9 = 1.0 / sqrt(v7.__sinval * -0.00669438 * v7.__sinval + 1.0) * 6378137.0;
    double v10 = a1[2];
    double v11 = v7.__cosval * (v9 + v10);
    *(double *)a2 = v8.__cosval * v11;
    *(double *)(a2 + 8) = v8.__sinval * v11;
    double v12 = v7.__sinval * (v10 + v9 * 0.99330562);
    *(double *)(a2 + 16) = v12;
    *(double *)(v4 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6;
    *(double *)(v4 + 88) = v10;
    *(double *)(v4 + 48) = v8.__cosval * v11;
    *(double *)(v4 + 56) = v8.__sinval * v11;
    *(double *)(v4 + 64) = v12;
    *(double *)(v4 + 72) = v5;
  }
}

uint64_t BlueFin::GlPeComputeZRHUtil::computeBitResolution(unsigned __int8 *a1, int a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *a1;
  int v3 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[BlueFin::GlSvId::s_aucSvId2gnss[v2]];
  if (BlueFin::GlImplGnss::m_aucEnabledGnssTable[BlueFin::GlSvId::s_aucSvId2gnss[v2]]) {
    BOOL v4 = v3 == 3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 20;
  }
  if (v3 == 8)
  {
    DeviceFaultNotify("glpe_computezrhif.cpp", 188, "computeBitResolution", (char)"eImplGnss != IMPL_GNSS_INVALID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_computezrhif.cpp", 188, "eImplGnss != IMPL_GNSS_INVALID");
  }
  if ((v2 - 81) < 0x35) {
    return 20;
  }
  switch(v3)
  {
    case 1:
      return 2;
    case 6:
      return 4;
    case 2:
      return 10;
  }
  uint64_t result = 1;
  unsigned int v6 = v2 - 76;
  if (v6 <= 0x3E && ((1 << v6) & 0x7C0000000000001FLL) != 0) {
    return 2;
  }
  return result;
}

uint64_t BlueFin::GlPeComputeZRHUtil::resolveIntegers(BlueFin::GlSetBase *a1, unsigned int a2, unsigned int a3, unsigned int a4, void *a5, uint64_t a6)
{
  uint64_t v6 = a6 + 56 * a2;
  if ((*(unsigned char *)(v6 + 32) + 67) < 0x44u || *(_DWORD *)(a6 + 56 * a2 + 44)) {
    return 0xFFFFFFFFLL;
  }
  if ((BlueFin::GlSetBase::Cnt(a1) & 0xFE) == 0) {
    goto LABEL_16;
  }
  unsigned __int8 v23 = *((unsigned char *)a1 + 8);
  memcpy(v27, *(const void **)a1, 4 * v23);
  __int16 v25 = 0;
  unsigned __int8 v24 = 0;
  int v26 = v27[0];
  BlueFin::GlSetIterator::operator++(&v23);
  if (v24 == v23) {
    goto LABEL_16;
  }
  unsigned __int8 v15 = 0;
  while (1)
  {
    ++v15;
    if (!*(_DWORD *)(a6 + 56 * v25 + 44)) {
      break;
    }
    BlueFin::GlSetIterator::operator++(&v23);
    if (v24 == v23) {
      goto LABEL_16;
    }
  }
  if (v25 == 255 || v25 == a2) {
LABEL_16:
  }
    double v22 = (*(double *)(*a5 + 8 * a4) - *(double *)v6) / 299792.458;
  else {
    double v22 = (*(double *)(a6 + 56 * (char)v25)
  }
         - *(double *)v6
         + *(double *)(*a5 + 8 * a4)
         - *(double *)(*a5 + 8 * v15))
        / 299792.458
        + (double)*(int *)(a6 + 56 * (char)v25 + 24);
  if (v22 <= 0.0)
  {
    if (v22 >= 0.0)
    {
      uint64_t result = 0;
      goto LABEL_23;
    }
    double v17 = -0.5;
  }
  else
  {
    double v17 = 0.5;
  }
  uint64_t result = (int)(v22 + v17);
LABEL_23:
  if (a3 >= 2)
  {
    int v18 = *(_DWORD *)(a6 + 56 * a2 + 28);
    double v19 = (v22 - (double)v18) / (double)a3;
    if (v19 <= 0.0)
    {
      if (v19 >= 0.0)
      {
        int v21 = 0;
        return v18 + v21 * a3;
      }
      double v20 = -0.5;
    }
    else
    {
      double v20 = 0.5;
    }
    int v21 = (int)(v19 + v20);
    return v18 + v21 * a3;
  }
  return result;
}

uint64_t BlueFin::GnssConstellationMaskPrinter::Print(BlueFin::GnssConstellationMaskPrinter *this, uint64_t a2, uint64_t a3, const char *a4)
{
  unint64_t v5 = 0;
  size_t v6 = 0;
  do
  {
    if (v5 & 0xFFFFFFF8) == 0 && ((0xAFu >> v5))
    {
      __double2 v7 = off_2655D82B0[v5];
    }
    else
    {
      __double2 v7 = "<->";
      if (v5 == 6) {
        __double2 v7 = "GAL";
      }
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GnssConstellationMaskPrinter *)((char *)this + v6 + 8), (char *)(128 - v6), "%s:", a4, v7);
    size_t v9 = strlen((const char *)this + v6 + 8) + v6;
    int v10 = BlueFin::GlImplGnss::m_aucNumSatsPerImplGnss[v5];
    strcpy(v15, "%00x%s");
    if (v5 - 5 <= 1)
    {
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v15, (char *)7, "%%0%dx", v8, (v10 - 29) >> 2);
      BlueFin::GlFormat::glsnprintf((BlueFin::GnssConstellationMaskPrinter *)((char *)this + v9 + 8), (char *)(128 - v9), (unsigned __int8 *)v15, v11, *(unsigned int *)(*(void *)this + 8 * v5 + 4) & (unint64_t)~(-1 << (v10 - 32)));
      v9 += strlen((const char *)this + v9 + 8);
      int v10 = 32;
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v15, (char *)7, "%%0%dx%%s", v8, (v10 + 3) >> 2);
    double v13 = (const char *)&str_5_3;
    if (v5 < 7) {
      double v13 = ",";
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GnssConstellationMaskPrinter *)((char *)this + v9 + 8), (char *)(128 - v9), (unsigned __int8 *)v15, v12, *(void *)(*(void *)this + 8 * v5) & ~(-1 << v10), v13);
    size_t v6 = strlen((const char *)this + v9 + 8) + v9;
    ++v5;
  }
  while (v5 != 8);
  return (uint64_t)this + 8;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaNEW(uint64_t a1, _DWORD *a2, int a3, BlueFin::GlFormat *a4, int a5, int *a6, int *a7, int a8)
{
  uint64_t v58 = 0;
  int8x8_t v59 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  v54[0] = 1;
  int v55 = a3;
  BlueFin::GlPeNmeaGen::GetRequestParams(a1, a2, &v59, v54);
  double v14 = v59;
  if (!v59)
  {
    unsigned int v51 = "acNmeaNewList";
    DeviceFaultNotify("glpe_nmeagen.cpp", 4767, "FormatNmeaNEW", (char)"acNmeaNewList");
    int v52 = 4767;
    goto LABEL_87;
  }
  unsigned __int8 v15 = (char *)a5;
  float v16 = (char *)a4 + a5;
  unint64_t v17 = (unint64_t)(v16 - 1);
  if (v16 - 1 <= (char *)a4) {
    int v18 = 0;
  }
  else {
    int v18 = v15;
  }
  unsigned int v53 = a4;
  double v20 = (BlueFin::GlFormat *)((char *)a4
                            + BlueFin::GlFormat::glsnprintf(a4, v18, "$PGLOR,%d,NEW", v13, 2));
  uint64_t v21 = v54[0];
  if (v54[0])
  {
    double v22 = (unsigned int *)&v55;
    while (1)
    {
      unsigned __int8 v23 = *v14;
      if (!*v14) {
        break;
      }
      if (v17 <= (unint64_t)v20) {
        unsigned __int8 v24 = 0;
      }
      else {
        unsigned __int8 v24 = (char *)(v16 - (char *)v20);
      }
      ++v14;
      unsigned int v25 = *v22++;
      double v20 = (BlueFin::GlFormat *)((char *)v20
                                + BlueFin::GlFormat::glsnprintf(v20, v24, ",%s,%d", v19, v23, v25));
      if (!--v21) {
        goto LABEL_12;
      }
    }
    unsigned int v51 = "*acNmeaNewList";
    DeviceFaultNotify("glpe_nmeagen.cpp", 4779, "FormatNmeaNEW", (char)"*acNmeaNewList");
    int v52 = 4779;
LABEL_87:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nmeagen.cpp", v52, v51);
  }
LABEL_12:
  if ((a8 - 1) > 2) {
    int v26 = "C";
  }
  else {
    int v26 = off_2655E0298[a8 - 1];
  }
  if (v17 <= (unint64_t)v20) {
    int v27 = 0;
  }
  else {
    int v27 = (char *)(v16 - (char *)v20);
  }
  unsigned int v28 = BlueFin::GlFormat::glsnprintf(v20, v27, ",%s,", v19, v26);
  int v30 = (BlueFin::GlFormat *)((char *)v20 + v28);
  int v31 = *a7;
  if ((*a7 & 0x100) != 0)
  {
    if (v17 <= (unint64_t)v30) {
      int v32 = 0;
    }
    else {
      int v32 = (char *)(v16 - (char *)v30);
    }
    int v30 = (BlueFin::GlFormat *)((char *)v30
                              + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v20 + v28), v32, "L", v29));
    int v31 = *a7;
  }
  if ((v31 & 0x200) != 0)
  {
    if (v17 <= (unint64_t)v30) {
      double v42 = 0;
    }
    else {
      double v42 = (char *)(v16 - (char *)v30);
    }
    int v30 = (BlueFin::GlFormat *)((char *)v30 + BlueFin::GlFormat::glsnprintf(v30, v42, "T", v29));
    int v31 = *a7;
    if ((*a7 & 4) == 0)
    {
LABEL_25:
      if ((v31 & 0x400000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_56;
    }
  }
  else if ((v31 & 4) == 0)
  {
    goto LABEL_25;
  }
  if (v17 <= (unint64_t)v30) {
    double v43 = 0;
  }
  else {
    double v43 = (char *)(v16 - (char *)v30);
  }
  int v30 = (BlueFin::GlFormat *)((char *)v30 + BlueFin::GlFormat::glsnprintf(v30, v43, "E", v29));
  int v31 = *a7;
  if ((*a7 & 0x400000) == 0)
  {
LABEL_26:
    if ((v31 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_56:
  if (v17 <= (unint64_t)v30) {
    double v44 = 0;
  }
  else {
    double v44 = (char *)(v16 - (char *)v30);
  }
  int v30 = (BlueFin::GlFormat *)((char *)v30 + BlueFin::GlFormat::glsnprintf(v30, v44, "e", v29));
  int v31 = *a7;
  if ((*a7 & 0x800) == 0)
  {
LABEL_27:
    if ((v31 & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
LABEL_60:
  if (v17 <= (unint64_t)v30) {
    unsigned int v45 = 0;
  }
  else {
    unsigned int v45 = (char *)(v16 - (char *)v30);
  }
  int v30 = (BlueFin::GlFormat *)((char *)v30 + BlueFin::GlFormat::glsnprintf(v30, v45, "C", v29));
  if ((*a7 & 2) != 0)
  {
LABEL_28:
    if (v17 <= (unint64_t)v30) {
      double v33 = 0;
    }
    else {
      double v33 = (char *)(v16 - (char *)v30);
    }
    int v30 = (BlueFin::GlFormat *)((char *)v30 + BlueFin::GlFormat::glsnprintf(v30, v33, "O", v29));
  }
LABEL_32:
  if (v17 <= (unint64_t)v30) {
    __int16 v34 = 0;
  }
  else {
    __int16 v34 = (char *)(v16 - (char *)v30);
  }
  unsigned int v35 = BlueFin::GlFormat::glsnprintf(v30, v34, ",", v29);
  float v38 = (BlueFin::GlFormat *)((char *)v30 + v35);
  int v39 = *a6;
  if ((*a6 & 0x100) != 0)
  {
    if (v17 <= (unint64_t)v38) {
      unsigned int v46 = 0;
    }
    else {
      unsigned int v46 = (char *)(v16 - (char *)v38);
    }
    float v38 = (BlueFin::GlFormat *)((char *)v38
                              + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v30 + v35), v46, "L", v37));
    int v39 = *a6;
    if ((*a6 & 0x200) == 0)
    {
LABEL_37:
      if ((v39 & 4) == 0) {
        goto LABEL_38;
      }
      goto LABEL_73;
    }
  }
  else if ((v39 & 0x200) == 0)
  {
    goto LABEL_37;
  }
  if (v17 <= (unint64_t)v38) {
    char v47 = 0;
  }
  else {
    char v47 = (char *)(v16 - (char *)v38);
  }
  float v38 = (BlueFin::GlFormat *)((char *)v38 + BlueFin::GlFormat::glsnprintf(v38, v47, "T", v37));
  int v39 = *a6;
  if ((*a6 & 4) == 0)
  {
LABEL_38:
    if ((v39 & 0x800) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_73:
  if (v17 <= (unint64_t)v38) {
    double v48 = 0;
  }
  else {
    double v48 = (char *)(v16 - (char *)v38);
  }
  float v38 = (BlueFin::GlFormat *)((char *)v38 + BlueFin::GlFormat::glsnprintf(v38, v48, "E", v37));
  int v39 = *a6;
  if ((*a6 & 0x800) == 0)
  {
LABEL_39:
    if ((v39 & 0x40) == 0) {
      goto LABEL_40;
    }
LABEL_81:
    if (v17 <= (unint64_t)v38) {
      double v50 = 0;
    }
    else {
      double v50 = (char *)(v16 - (char *)v38);
    }
    float v38 = (BlueFin::GlFormat *)((char *)v38 + BlueFin::GlFormat::glsnprintf(v38, v50, "A", v37));
    if ((*a6 & 2) == 0) {
      goto LABEL_45;
    }
    goto LABEL_41;
  }
LABEL_77:
  if (v17 <= (unint64_t)v38) {
    double v49 = 0;
  }
  else {
    double v49 = (char *)(v16 - (char *)v38);
  }
  float v38 = (BlueFin::GlFormat *)((char *)v38 + BlueFin::GlFormat::glsnprintf(v38, v49, "C", v37));
  int v39 = *a6;
  if ((*a6 & 0x40) != 0) {
    goto LABEL_81;
  }
LABEL_40:
  if ((v39 & 2) != 0)
  {
LABEL_41:
    if (v17 <= (unint64_t)v38) {
      double v40 = 0;
    }
    else {
      double v40 = (char *)(v16 - (char *)v38);
    }
    BlueFin::GlFormat::glsnprintf(v38, v40, "O", v37);
  }
LABEL_45:

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(v53, v16 - 1, v36);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaSAT(uint64_t a1, uint64_t a2, BlueFin::GlFormat *a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 1736);
  if (*(unsigned char *)(a1 + 329))
  {
    uint64_t v5 = 0;
    int v6 = 0;
    do
    {
      v6 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v4 + v5));
      v5 += 24;
    }
    while (v5 != 168);
    unsigned int v8 = v6;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v75 = a1 + 1568;
    do
    {
      bzero(*(void **)(v4 + v11), ((4 * *(unsigned __int8 *)(v4 + v11 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      v11 += 24;
    }
    while (v11 != 168);
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 1552);
    do
    {
      uint64_t v14 = v13 + v12;
      *(_DWORD *)uint64_t v14 = 8;
      *(unsigned char *)(v14 + 4) = 0;
      *(_DWORD *)(v14 + 8) = 0;
      v12 += 12;
    }
    while (v12 != 1200);
    uint64_t v15 = v75;
    unsigned int v8 = 0;
    if (*(__int16 *)(a2 + 44) >= 1)
    {
      unsigned __int8 v16 = 0;
      uint64_t v73 = a2 + 5624;
      uint64_t v74 = a2 + 6072;
      while (1)
      {
        unsigned int v17 = v16;
        uint64_t v18 = a2 + 40 * v16;
        unsigned int v21 = *(unsigned __int8 *)(v18 + 50);
        double v20 = (unsigned __int8 *)(v18 + 50);
        uint64_t v19 = v21;
        if (v21 >= 8uLL) {
          break;
        }
        unsigned __int8 v76 = v16;
        uint64_t v22 = a2 + 40 * v16;
        unsigned __int8 v24 = *(unsigned char *)(v22 + 51);
        int v23 = v24;
        float v77 = (unsigned __int8 *)(v22 + 51);
        uint64_t v25 = a2;
        int v26 = BlueFin::GlImplGnss::m_aucImplGnssTable[v19];
        char v27 = v24 - 1;
        uint64_t v28 = 1 << (v24 - 1);
        int v80 = v26;
        unsigned __int8 v81 = v24;
        if (BlueFin::GlGnssSet::Has(v15, &v80))
        {
          if (!v8)
          {
LABEL_77:
            unsigned int v69 = "pSatsMsg";
            DeviceFaultNotify("glpe_nmeagen.cpp", 3765, "FormatNmeaSAT", (char)"pSatsMsg");
            int v70 = 3765;
LABEL_76:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nmeagen.cpp", v70, v69);
          }
          unsigned __int8 v29 = 0;
          while (1)
          {
            int v30 = (unsigned __int8 *)(*(void *)(a1 + 1552) + 12 * v29);
            if (v26 == BlueFin::GlImplGnss::m_aucImplGnssTable[*v30] && v30[1] == v23) {
              break;
            }
            if (v8 <= ++v29) {
              goto LABEL_77;
            }
          }
          a2 = v25;
        }
        else
        {
          BlueFin::GlGnssSet::Add(v15, &v80);
          int v30 = (unsigned __int8 *)(*(void *)(a1 + 1552) + 12 * v8);
          *(_DWORD *)int v30 = 8;
          v30[4] = 0;
          ++v8;
          *((_DWORD *)v30 + 2) = (16 * (*(_DWORD *)(v25 + 4 * *(unsigned __int8 *)(v25 + 40 * v17 + 49) + 6132) & 3)) | (((*(void *)(v73 + 8 * *v20) & (unint64_t)v28) >> v27) << 6);
          a2 = v25;
        }
        uint64_t v32 = *(unsigned __int8 *)(a2 + 40 * v17 + 82);
        if (v32 == 3 || v32 == 0)
        {
          float v34 = *(float *)(a2 + 4 * v76 + 7432) + 0.5;
          float v35 = fmodf(v34, 4295000000.0);
          if (v34 <= 4295000000.0) {
            float v35 = v34;
          }
          if (v35 < -4295000000.0) {
            float v35 = -fmodf(-v35, 4295000000.0);
          }
          if (v35 < 0.0) {
            unsigned int v36 = -(float)-v35;
          }
          else {
            LOWORD(v36) = v35;
          }
          *((_WORD *)v30 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v36;
        }
        uint64_t v37 = *v20;
        *int v30 = v37;
        v30[1] = *v77;
        v30[4] = *(v20 - 2);
        char v38 = byte_263BBCEA4[v32];
        unint64_t v39 = (*(void *)(v74 + 8 * v37) & (unint64_t)v28) >> v27;
        double v40 = (void *)(a2 + (v32 << 6) + 8 * v37);
        *((_DWORD *)v30 + 2) |= ((v40[575] & (unint64_t)v28) >> v27 << v38) | ((v40[727] & (unint64_t)v28) >> v27 << (v32 + 15)) | (v39 << 18) | ((v40[671] & (unint64_t)v28) >> v27 << (v38 + 3)) | ((v40[607] & (unint64_t)v28) >> v27 << (v38 + 2)) | ((v40[639] & (unint64_t)v28) >> v27 << (v38 + 1));
        unsigned __int8 v16 = v17 + 1;
        uint64_t v15 = v75;
        if (*(__int16 *)(a2 + 44) <= (int)(v17 + 1)) {
          goto LABEL_37;
        }
      }
      unsigned int v69 = "rotSvInfo.ucImplGnss < NUM_IMPL_GNSS";
      DeviceFaultNotify("glpe_nmeagen.cpp", 3735, "FormatNmeaSAT", (char)"rotSvInfo.ucImplGnss < NUM_IMPL_GNSS");
      int v70 = 3735;
      goto LABEL_76;
    }
  }
LABEL_37:
  uint64_t v41 = (char *)a3 + a4 - 1;
  double v42 = (char *)a3 + a4;
  if (v41 <= (char *)a3) {
    double v43 = 0;
  }
  else {
    double v43 = (char *)a4;
  }
  unsigned int v46 = (BlueFin::GlFormat *)((char *)a3 + BlueFin::GlFormat::glsnprintf(a3, v43, "$PGLOR,%d,SAT", v7, 2));
  unsigned int v78 = ((v8 + 5) / 6);
  if (((v8 + 5) / 6))
  {
    if (v41 <= (char *)v46) {
      char v47 = 0;
    }
    else {
      char v47 = (char *)(v42 - (char *)v46);
    }
    uint64_t v48 = a1;
    unsigned int v46 = (BlueFin::GlFormat *)((char *)v46
                              + BlueFin::GlFormat::glsnprintf(v46, v47, ",%d,%d", v45, ((v8 + 5) / 6), *(unsigned __int8 *)(a1 + 329) + 1));
  }
  else
  {
    uint64_t v48 = a1;
  }
  unsigned __int8 v49 = 6 * *(unsigned char *)(v48 + 329);
  if (v8 > v49)
  {
    unsigned int v50 = 0;
    do
    {
      uint64_t v51 = *(void *)(a1 + 1552);
      unsigned int v52 = v49;
      unint64_t v53 = *(char *)(v51 + 12 * v49);
      if (v53 > 7) {
        uint64_t v54 = 120;
      }
      else {
        uint64_t v54 = dword_263BBCFA0[v53];
      }
      if (v41 <= (char *)v46) {
        int v55 = 0;
      }
      else {
        int v55 = (char *)(v42 - (char *)v46);
      }
      uint64_t v56 = v51 + 12 * v52;
      uint64_t v58 = (BlueFin::GlFormat *)((char *)v46
                                + BlueFin::GlFormat::glsnprintf(v46, v55, ",%c%02d,", v45, v54, *(unsigned __int8 *)(v56 + 1)));
      if (*(unsigned char *)(v56 + 4) && *(__int16 *)(v51 + 12 * v52 + 2) >= 1)
      {
        if (v41 <= (char *)v58) {
          int8x8_t v59 = 0;
        }
        else {
          int8x8_t v59 = (char *)(v42 - (char *)v58);
        }
        uint64_t v58 = (BlueFin::GlFormat *)((char *)v58
                                  + BlueFin::GlFormat::glsnprintf(v58, v59, "%02d", v57, *(unsigned __int16 *)(v51 + 12 * v52 + 2)));
      }
      unsigned int v60 = *(_DWORD *)(v51 + 12 * v52 + 8);
      if (v60 >> 15)
      {
        uint64_t v61 = 3;
      }
      else if (v60 <= 0x7FF)
      {
        uint64_t v61 = v60 > 0x7F;
      }
      else
      {
        uint64_t v61 = 2;
      }
      if (v41 <= (char *)v58) {
        unsigned int v62 = 0;
      }
      else {
        unsigned int v62 = (char *)(v42 - (char *)v58);
      }
      unsigned int v63 = BlueFin::GlFormat::glsnprintf(v58, v62, (unsigned __int8 *)off_2655E0250[v61], v57, *(unsigned int *)(v51 + 12 * v52 + 8));
      unsigned __int8 v49 = v52 + 1;
      if (v8 <= (v52 + 1)) {
        break;
      }
      unsigned int v46 = (BlueFin::GlFormat *)((char *)v58 + v63);
    }
    while (v50++ < 5);
  }
  uint64_t result = BlueFin::GlPeNmeaGen::nmeaAddChksum(a3, v41, v44);
  char v66 = *(unsigned char *)(a1 + 329);
  BOOL v67 = v78 <= (v66 + 1);
  if (v78 > (v66 + 1)) {
    char v68 = v66 + 1;
  }
  else {
    char v68 = 0;
  }
  *(unsigned char *)(a1 + 329) = v68;
  *(unsigned char *)(a1 + 33BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v67;
  return result;
}

BOOL BlueFin::GlPeNmeaGen::FormatNmeaGSA(uint64_t a1, uint64_t a2, BlueFin::GlFormat *a3, int a4)
{
  uint64_t v5 = (char *)a3 + a4 - 1;
  *(unsigned char *)a3 = 0;
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248))
  {
    qword_26A9A17A2 = 0x100010001;
    BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasGNGSA = xmmword_263BBCF02;
  }
  uint64_t v6 = 0;
  unsigned __int8 v7 = 0;
  unsigned __int8 v8 = 0;
  size_t v9 = (char *)&BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasXXGSA;
  int v10 = &BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasGNGSA;
  do
  {
    uint64_t v11 = *(void *)(a1 + 320) + 48 * v6;
    *(_DWORD *)(v11 + 16) = 0;
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 7) = 0;
    bzero(*(void **)(v11 + 24), ((4 * *(unsigned __int8 *)(v11 + 32) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(a1 + 1832);
    int v14 = *(unsigned __int8 *)(v13 + 26248);
    do
    {
      if (!*(unsigned char *)(v13 + 26248)) {
        v7 += v9[v12];
      }
      v8 += *((unsigned char *)v10 + v12++);
    }
    while (v12 != 4);
    ++v6;
    v9 += 4;
    int v10 = (long long *)((char *)v10 + 4);
  }
  while (v6 != 6);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 328);
  unsigned int v16 = v7 + v8;
  if (v16 <= v15)
  {
    int v31 = "m_ucGsaMsgCnt < (ucNumGNGSA + ucNumXXGSA)";
    DeviceFaultNotify("glpe_nmeagen.cpp", 1303, "FormatNmeaGSA", (char)"m_ucGsaMsgCnt < (ucNumGNGSA + ucNumXXGSA)");
    int v32 = 1303;
LABEL_89:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nmeagen.cpp", v32, v31);
  }
  strcpy((char *)v87, "GN");
  if (v14)
  {
    uint64_t v17 = 0;
    LODWORD(v18) = 6;
    int v19 = 7;
    int v20 = -1;
    signed int v73 = -1;
    unsigned int v21 = &BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasGNGSA;
    do
    {
      uint64_t v22 = 0;
      while (1)
      {
        if (*((unsigned char *)v21 + v22))
        {
          if (++v20 == v15) {
            break;
          }
        }
        if (++v22 == 4) {
          goto LABEL_18;
        }
      }
      int v19 = BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::aePrimaryGnss[v17];
      LODWORD(v18) = v17;
      signed int v73 = v22;
      int v20 = v15;
LABEL_18:
      ++v17;
      unsigned int v21 = (long long *)((char *)v21 + 4);
    }
    while (v17 != 6);
    int v23 = (char *)v87;
    goto LABEL_38;
  }
  if (v15 >= v7)
  {
    uint64_t v18 = 0;
    int v28 = -1;
    unsigned __int8 v29 = &BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasGNGSA;
    while (1)
    {
      int v30 = *(unsigned __int8 *)v29;
      unsigned __int8 v29 = (long long *)((char *)v29 + 4);
      if (v30)
      {
        if (++v28 == v15 - v7) {
          break;
        }
      }
      if (++v18 == 6) {
        goto LABEL_34;
      }
    }
    signed int v73 = 0;
    int v19 = BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::aePrimaryGnss[v18];
    int v23 = (char *)v87;
  }
  else
  {
    uint64_t v24 = 0;
    int v23 = 0;
    LODWORD(v18) = 6;
    int v19 = 7;
    int v25 = -1;
    int v26 = (char *)&BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasXXGSA;
    signed int v73 = -1;
    do
    {
      uint64_t v27 = 0;
      while (1)
      {
        if (v26[v27])
        {
          if (++v25 == v15) {
            break;
          }
        }
        if (++v27 == 4) {
          goto LABEL_28;
        }
      }
      int v23 = (char *)&BlueFin::GlPeNmeaGen::m_acTalkerCodes + 3 * v24;
      int v19 = BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::aePrimaryGnss[v24];
      LODWORD(v18) = v24;
      signed int v73 = v27;
      int v25 = v15;
LABEL_28:
      ++v24;
      v26 += 4;
    }
    while (v24 != 6);
  }
  if (!v23 || v18 == 6)
  {
LABEL_34:
    int v31 = "pacCurGsaTalker != 0 && eOutputTalker != INVALID_TALKER";
    DeviceFaultNotify("glpe_nmeagen.cpp", 1381, "FormatNmeaGSA", (char)"pacCurGsaTalker != 0 && eOutputTalker != INVALID_TALKER");
    int v32 = 1381;
    goto LABEL_89;
  }
LABEL_38:
  if (!BlueFin::GlPeNmeaGen::IsGnssSupportedForReport(v13, BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::aePrimaryGnss[v18]))goto LABEL_84; {
  unsigned int v68 = v19;
  }
  unsigned int v67 = v16;
  uint64_t v34 = v18;
  if (v5 > (char *)a3) {
    float v35 = (char *)(v5 - (char *)a3 + 1);
  }
  else {
    float v35 = 0;
  }
  uint64_t v36 = 3;
  if (!*(unsigned char *)(a2 + 4048)) {
    uint64_t v36 = 1;
  }
  unsigned int v37 = BlueFin::GlFormat::glsnprintf(a3, v35, "$%sGSA,A,%d", v33, v23, v36);
  uint64_t v38 = 0;
  unsigned int v39 = 0;
  double v40 = (BlueFin::GlFormat *)((char *)a3 + v37);
  uint64_t v41 = v34;
  unsigned int v72 = v34;
  double v42 = v5 + 1;
  double v43 = (char *)&BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasGNGSA
      + 4 * v34
      + v73;
  int v71 = (char *)&BlueFin::GlPeNmeaGen::FormatNmeaGSA(BlueFin::GL_FIX_STATUS const*,char *,short)::abTalkerHasXXGSA
      + 4 * v41
      + v73;
  do
  {
    for (int i = 0; i != 4; ++i)
    {
      int v84 = 0;
      unsigned int v85 = v38;
      char v86 = 1;
      char v83 = 0;
      if (BlueFin::GlPeNmeaGen::ToNmeaId(a1, &v85, &v84, &v83) && v84 == v41 && (*v43 || *v71) && v73 == i)
      {
        unint64_t v46 = *(void *)(a2
                        + ((uint64_t)v73 << 6)
                        + 4344
                        + 8 * BlueFin::GlImplGnss::m_aucEnabledGnssTable[v38]);
        BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v81, v46 >> 31, 2 * v46);
        unsigned __int8 v76 = v82;
        memcpy(v80, v81, 4 * v82);
        __int16 v78 = 0;
        unsigned __int8 v77 = 0;
        int v79 = v80[0];
        BlueFin::GlSetIterator::operator++(&v76);
        if (v77 != v76)
        {
          unsigned int v47 = v39;
          if (v39 <= 0xB)
          {
            do
            {
              unsigned int v74 = v38;
              char v75 = v78;
              v87[1] = 0;
              HIBYTE(v87[0]) = 0;
              BlueFin::GlPeNmeaGen::ToNmeaId(a1, &v74, &v87[1], (unsigned char *)v87 + 3);
              if (v5 <= (char *)v40) {
                unsigned __int8 v49 = 0;
              }
              else {
                unsigned __int8 v49 = (char *)(v42 - (char *)v40);
              }
              double v40 = (BlueFin::GlFormat *)((char *)v40
                                        + BlueFin::GlFormat::glsnprintf(v40, v49, ",%02d", v48, HIBYTE(v87[0])));
              unsigned int v39 = v47 + 1;
              BlueFin::GlSetIterator::operator++(&v76);
              if (v77 == v76) {
                break;
              }
            }
            while (v47++ <= 0xA);
          }
        }
        LODWORD(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v72;
      }
    }
    ++v38;
  }
  while (v38 != 7);
  if (v39 <= 0xB)
  {
    unsigned int v51 = v39 - 12;
    do
    {
      if (v5 <= (char *)v40) {
        unsigned int v52 = 0;
      }
      else {
        unsigned int v52 = (char *)(v42 - (char *)v40);
      }
      double v40 = (BlueFin::GlFormat *)((char *)v40 + BlueFin::GlFormat::glsnprintf(v40, v52, ",", v45));
    }
    while (!__CFADD__(v51++, 1));
  }
  double v54 = *(double *)(a2 + 4128);
  double v55 = sqrt(v54 * v54 + *(double *)(a2 + 4120) * *(double *)(a2 + 4120));
  if (v5 <= (char *)v40) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = (char *)(v42 - (char *)v40);
  }
  unsigned int v58 = BlueFin::GlFormat::glsnprintf(v40, v56, ",%02.1lf,%02.1lf,%02.1lf", v45, *(void *)&v55, *(void *)(a2 + 4120), *(void *)&v54);
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248))
  {
    if (v68 >= 7) {
      LOBYTE(v59) = 0;
    }
    else {
      unint64_t v59 = 0x6030405020101uLL >> (8 * v68);
    }
    unsigned int v16 = v67;
    goto LABEL_79;
  }
  uint64_t v60 = *(void *)(a1 + 320) + 48 * v72;
  int NmeaSignalID = BlueFin::GlPeNmeaGsvSatsNum::GetNmeaSignalID(v60, v68, v73);
  LOBYTE(v59) = NmeaSignalID;
  unsigned int v16 = v67;
  if (BlueFin::GlPeNmeaGsvSatsNum::OutputNmeaSignalID(v60, NmeaSignalID))
  {
LABEL_79:
    unsigned int v63 = (BlueFin::GlFormat *)((char *)v40 + v58);
    if (v5 <= (char *)v63) {
      unsigned __int8 v64 = 0;
    }
    else {
      unsigned __int8 v64 = (char *)(v42 - (char *)v63);
    }
    BlueFin::GlFormat::glsnprintf(v63, v64, ",%01d", v57, v59);
  }
  BlueFin::GlPeNmeaGen::nmeaAddChksum(a3, v5, v62);
  LOBYTE(v15) = *(unsigned char *)(a1 + 328);
LABEL_84:
  BOOL result = v16 == (v15 + 1);
  if (v16 == (v15 + 1)) {
    char v66 = 0;
  }
  else {
    char v66 = v15 + 1;
  }
  *(unsigned char *)(a1 + 328) = v66;
  return result;
}

uint64_t BlueFin::GlFormat::glsnprintf(BlueFin::GlFormat *this, char *a2, unsigned __int8 *a3, const char *a4, ...)
{
  va_start(va, a4);
  return BlueFin::GlFormat::gl_format(this, a2, a3, va, 0, (char *)1, (void *)1);
}

uint64_t BlueFin::GlFormat::gl_format(BlueFin::GlFormat *this, char *a2, unsigned __int8 *a3, const char *a4, char *__s, char *a6, void *a7)
{
  uint64_t result = 0;
  unsigned __int8 v82 = a4;
  if (!a2 || !this || !a3) {
    return result;
  }
  int v10 = *a3;
  if (!*a3)
  {
    unint64_t v14 = 0;
    uint64_t result = 0;
    if ((a7 & 1) == 0) {
      return result;
    }
    goto LABEL_152;
  }
  int v11 = (int)a6;
  unint64_t v14 = 0;
LABEL_6:
  if (v10 != 37)
  {
    unsigned int v15 = a3 + 1;
    if (!a7) {
      goto LABEL_141;
    }
    *(unsigned char *)this = v10;
    this = (BlueFin::GlFormat *)((char *)this + 1);
    goto LABEL_12;
  }
  unsigned int v15 = a3 + 2;
  int v16 = a3[1];
  if (v16 == 37)
  {
    if (!a7) {
      goto LABEL_141;
    }
    *(unsigned char *)this = 37;
    this = (BlueFin::GlFormat *)((char *)this + 1);
LABEL_12:
    unint64_t v14 = (v14 + 1);
    goto LABEL_141;
  }
  unsigned int v17 = 0;
  while (2)
  {
    switch((char)v16)
    {
      case '\'':
        goto LABEL_22;
      case '(':
      case ')':
      case '*':
      case ',':
      case '.':
      case '/':
        goto LABEL_39;
      case '+':
        v17 |= 0x10u;
        goto LABEL_22;
      case '-':
        v17 |= 4u;
        goto LABEL_22;
      case '0':
        v17 |= 2u;
        goto LABEL_22;
      default:
        if ((char)v16 == 32)
        {
          v17 |= 8u;
          goto LABEL_22;
        }
        if ((char)v16 == 35)
        {
          v17 |= 1u;
LABEL_22:
          int v18 = *v15++;
          LOBYTE(v16) = v18;
          if (!v18)
          {
            int v19 = 0;
            int v20 = 0;
            goto LABEL_24;
          }
          continue;
        }
LABEL_39:
        if (v16 == 42)
        {
          if (v11)
          {
            int v23 = (int *)v82;
            v82 += 8;
            int v24 = *v23;
          }
          else
          {
            int v51 = *__s;
            int v52 = __s[1];
            __s += 2;
            int v24 = v51 | (v52 << 8);
          }
          if (v24 >= 0) {
            int v20 = v24;
          }
          else {
            int v20 = -v24;
          }
          if (v24 < 0) {
            v17 |= 4u;
          }
          int v19 = 0;
          if ((a7 & 1) == 0)
          {
            *(unsigned char *)this = v20;
            unint64_t v53 = (BlueFin::GlFormat *)((char *)this + 1);
            unint64_t v54 = (v14 + 1);
            if (v54 < (unint64_t)a2)
            {
              BYTE1(v55) = BYTE1(v20);
              goto LABEL_102;
            }
LABEL_134:
            LOBYTE(v16) = 42;
            unint64_t v14 = v54;
            this = v53;
            goto LABEL_24;
          }
          goto LABEL_131;
        }
        if ((v16 - 48) > 9u)
        {
          int v20 = 0;
        }
        else
        {
          int v20 = 0;
          do
          {
            int v20 = 10 * v20 + v16 - 48;
            int v40 = *v15++;
            LOBYTE(v16) = v40;
          }
          while ((v40 - 48) < 0xA);
        }
        if (v16 != 46) {
          goto LABEL_126;
        }
        v17 |= 0x20u;
        int v56 = *v15++;
        int v16 = v56;
        if (v56 == 42)
        {
          if (v11)
          {
            long long v57 = (int *)v82;
            v82 += 8;
            int v58 = *v57;
          }
          else
          {
            int v58 = 0;
            int v66 = *__s;
            int v67 = __s[1];
            __s += 2;
            int v20 = v66 | (v67 << 16);
          }
          int v19 = v58 & ~(v58 >> 31);
          if ((a7 & 1) == 0)
          {
            *(unsigned char *)this = v19;
            unint64_t v53 = (BlueFin::GlFormat *)((char *)this + 1);
            unint64_t v54 = (v14 + 1);
            if (v54 >= (unint64_t)a2) {
              goto LABEL_134;
            }
            int v55 = v58 & ~(v58 >> 31);
LABEL_102:
            *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BYTE1(v55);
            this = (BlueFin::GlFormat *)((char *)this + 2);
            unint64_t v14 = (v14 + 2);
          }
LABEL_131:
          LOBYTE(v16) = 42;
          goto LABEL_24;
        }
        if ((v16 - 48) > 9)
        {
LABEL_126:
          int v19 = 0;
          goto LABEL_24;
        }
        int v19 = 0;
        do
        {
          int v19 = 10 * v19 + v16 - 48;
          int v65 = *v15++;
          LOBYTE(v16) = v65;
        }
        while ((v65 - 48) < 0xA);
LABEL_24:
        while (2)
        {
          int v21 = (char)v16;
          if ((char)v16 > 87)
          {
            switch((char)v16)
            {
              case 'c':
                v81[0] = 0;
                if (v11)
                {
                  double v44 = v82;
                  v82 += 8;
                  int v45 = *(_DWORD *)v44;
                }
                else
                {
                  char v60 = *__s;
                  __s += 2;
                  LOBYTE(v45) = v60;
                }
                v81[0] = v45;
                goto LABEL_138;
              case 'd':
              case 'i':
                *(void *)unsigned __int8 v81 = 0;
                if ((v17 & 0x800) != 0)
                {
                  if (!v11) {
                    goto LABEL_92;
                  }
LABEL_91:
                  unsigned __int8 v49 = v82;
                  v82 += 8;
                  unint64_t v42 = *(void *)v49;
                }
                else
                {
                  if ((v17 & 0x400) != 0)
                  {
                    if (!v11)
                    {
                      *(void *)unsigned __int8 v81 = *__s;
                      unint64_t v43 = *(void *)v81 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)__s[1] << 8);
                      *(void *)unsigned __int8 v81 = v43;
                      goto LABEL_111;
                    }
                    goto LABEL_136;
                  }
                  if ((v17 & 0x200) != 0 || (v17 & 0x100) == 0)
                  {
                    if (!v11)
                    {
                      unint64_t v37 = *__s;
                      __int16 v38 = __s[1];
                      __s += 2;
                      uint64_t v39 = (__int16)(v38 << 8);
                      goto LABEL_112;
                    }
                    goto LABEL_136;
                  }
                  if (v11)
                  {
LABEL_136:
                    unsigned int v68 = v82;
                    v82 += 8;
                    unint64_t v42 = *(int *)v68;
                    goto LABEL_137;
                  }
                  unint64_t v71 = *__s;
                  __s += 2;
                  unint64_t v42 = v71;
                }
LABEL_137:
                *(void *)unsigned __int8 v81 = v42;
LABEL_138:
                uint64_t v48 = &a2[-v14];
LABEL_139:
                unsigned int v47 = v81;
LABEL_140:
                unsigned int v69 = BlueFin::GlFormat::gl_format_param(this, v48, v21, v17, v20, v19, (char *)v47, a7, v81[0]);
                unint64_t v14 = v69 + v14;
                this = (BlueFin::GlFormat *)((char *)this + v69);
                goto LABEL_141;
              case 'e':
              case 'f':
              case 'g':
                goto LABEL_44;
              case 'h':
                if ((v17 & 0x200) != 0)
                {
                  v17 |= 0x100u;
                }
                else
                {
                  if ((v17 & 0x100) != 0) {
                    goto LABEL_37;
                  }
                  v17 |= 0x200u;
                }
                goto LABEL_36;
              case 'j':
              case 'k':
              case 'm':
              case 'n':
              case 'p':
              case 'q':
              case 'r':
              case 't':
              case 'v':
              case 'w':
                goto LABEL_37;
              case 'l':
                if ((v17 & 0x400) != 0)
                {
                  unsigned int v17 = v17 & 0xFFFFF3FF | 0x800;
                }
                else
                {
                  if ((v17 & 0x800) != 0) {
                    goto LABEL_37;
                  }
                  v17 |= 0x400u;
                }
                goto LABEL_36;
              case 'o':
              case 'u':
              case 'x':
                goto LABEL_80;
              case 's':
                if (v11)
                {
                  unint64_t v46 = (BOOL **)v82;
                  v82 += 8;
                  unsigned int v47 = *v46;
                  uint64_t v48 = &a2[-v14];
                  goto LABEL_140;
                }
                unsigned int v61 = BlueFin::GlFormat::gl_format_param(this, &a2[-v14], (char)v16, v17, v20, v19, __s, a7, v81[0]);
                LODWORD(v62) = *__s;
                if (*__s)
                {
                  uint64_t v62 = 0;
                  while (__s[++v62])
                    ;
                }
                unint64_t v14 = v61 + v14;
                this = (BlueFin::GlFormat *)((char *)this + v61);
                if (((_BYTE)v62 + 1)) {
                  uint64_t v64 = (v62 + 2);
                }
                else {
                  uint64_t v64 = (v62 + 1);
                }
                __s += v64;
                goto LABEL_141;
              default:
                if ((char)v16 != 88) {
                  goto LABEL_37;
                }
LABEL_80:
                *(void *)unsigned __int8 v81 = 0;
                if (v11)
                {
                  if ((v17 & 0x800) != 0) {
                    goto LABEL_91;
                  }
                  uint64_t v41 = v82;
                  v82 += 8;
                  unint64_t v42 = *(unsigned int *)v41;
                }
                else if ((v17 & 0x800) != 0)
                {
LABEL_92:
                  *(void *)unsigned __int8 v81 = *__s;
                  *(void *)unsigned __int8 v81 = *(void *)v81 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)__s[1] << 8);
                  *(void *)unsigned __int8 v81 = *(void *)v81 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)__s[2] << 16);
                  *(void *)v81 |= __s[3] << 24;
                  *(void *)unsigned __int8 v81 = *(void *)v81 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)__s[4] << 32);
                  *(void *)unsigned __int8 v81 = *(void *)v81 & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)__s[5] << 40);
                  *(void *)unsigned __int8 v81 = *(void *)v81 & 0xFF00FFFFFFFFFFFFLL | ((unint64_t)__s[6] << 48);
                  uint64_t v50 = __s[7];
                  __s += 8;
                  unint64_t v42 = *(void *)v81 | (v50 << 56);
                }
                else
                {
                  *(void *)unsigned __int8 v81 = *__s;
                  unint64_t v43 = *(void *)v81 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)__s[1] << 8);
                  *(void *)unsigned __int8 v81 = v43;
                  if ((v17 & 0x400) == 0)
                  {
                    __s += 2;
                    goto LABEL_138;
                  }
LABEL_111:
                  unint64_t v37 = v43 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)__s[2] << 16);
                  *(void *)unsigned __int8 v81 = v37;
                  int v59 = __s[3];
                  __s += 4;
                  uint64_t v39 = (v59 << 24);
LABEL_112:
                  unint64_t v42 = v39 | v37;
                }
                goto LABEL_137;
            }
          }
          if ((char)v16 == 76)
          {
LABEL_36:
            int v22 = *v15++;
            LOBYTE(v16) = v22;
            if (!v22) {
              goto LABEL_37;
            }
            continue;
          }
          break;
        }
        if ((char)v16 == 69 || (char)v16 == 71)
        {
LABEL_44:
          *(void *)unsigned __int8 v81 = 0;
          if (v11)
          {
            int v25 = v82;
            v82 += 8;
            double v26 = *(double *)v25;
          }
          else
          {
            double v27 = *(double *)__s;
            __s += 8;
            double v26 = v27;
          }
          *(double *)unsigned __int8 v81 = v26;
          if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            if (v16 == 102)
            {
              if (fabs(v26) <= 1.0e17)
              {
                LOBYTE(v16) = 102;
              }
              else if (v14 >= (unint64_t)a2)
              {
                LOBYTE(v16) = 103;
              }
              else
              {
                char v28 = 45;
                unsigned __int8 v29 = "[%f -> %g as number too big!]-";
                do
                {
                  *(unsigned char *)this = v28;
                  this = (BlueFin::GlFormat *)((char *)this + 1);
                  unint64_t v14 = (v14 + 1);
                  int v30 = *v29++;
                  char v28 = v30;
                  if (v30) {
                    BOOL v31 = v14 >= (unint64_t)a2;
                  }
                  else {
                    BOOL v31 = 1;
                  }
                }
                while (!v31);
                LOBYTE(v16) = 103;
              }
            }
            uint64_t v48 = &a2[-v14];
            int v21 = (char)v16;
            goto LABEL_139;
          }
          char v32 = a1Finite[0];
          if (a1Finite[0]) {
            BOOL v33 = v14 >= (unint64_t)a2;
          }
          else {
            BOOL v33 = 1;
          }
          if (!v33)
          {
            uint64_t v34 = ".!FINITE";
            do
            {
              *(unsigned char *)this = v32;
              this = (BlueFin::GlFormat *)((char *)this + 1);
              unint64_t v14 = (v14 + 1);
              int v35 = *v34++;
              char v32 = v35;
              if (v35) {
                BOOL v36 = v14 >= (unint64_t)a2;
              }
              else {
                BOOL v36 = 1;
              }
            }
            while (!v36);
          }
LABEL_141:
          int v10 = *v15;
          if (*v15) {
            BOOL v70 = v14 >= (unint64_t)a2;
          }
          else {
            BOOL v70 = 1;
          }
          a3 = v15;
          if (v70)
          {
            if ((a7 & 1) == 0) {
              return v14;
            }
            if (v14 >= (unint64_t)a2)
            {
LABEL_150:
              *((unsigned char *)this - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
              return (v14 - 1);
            }
LABEL_152:
            *(unsigned char *)this = 0;
            return v14;
          }
          goto LABEL_6;
        }
LABEL_37:
        if (!a7) {
          goto LABEL_141;
        }
        int v72 = v14;
        if (v14 < (unint64_t)a2)
        {
          uint64_t v73 = 0;
          LODWORD(v14) = v14 + 26;
          while (v73 != 26)
          {
            *((unsigned char *)this + v73) = aUnsupportedFor[v73];
            unint64_t v74 = (v72 + v73++ + 1);
            if (v74 >= (unint64_t)a2)
            {
              this = (BlueFin::GlFormat *)((char *)this + v73);
              LODWORD(v14) = v72 + v73;
              goto LABEL_161;
            }
          }
          this = (BlueFin::GlFormat *)((char *)this + 26);
        }
LABEL_161:
        uint64_t v75 = 0;
        do
          int v76 = v15[v75-- - 2];
        while (v76 != 37);
        unint64_t v77 = v14;
        if (v14 < (unint64_t)a2 && v75 != 1)
        {
          LODWORD(v77) = v14;
          do
          {
            *(unsigned char *)this = v15[v75 - 1];
            this = (BlueFin::GlFormat *)((char *)this + 1);
            unint64_t v77 = (v77 + 1);
            BOOL v78 = v77 >= (unint64_t)a2 || v75++ == 0;
            LODWORD(v14) = v77;
          }
          while (!v78);
        }
        if (v77 >= (unint64_t)a2) {
          goto LABEL_150;
        }
        uint64_t v79 = 0;
        uint64_t result = (v14 + 2);
        while (v79 != 2)
        {
          *((unsigned char *)this + v79) = asc_263B7338C[v79];
          unint64_t v80 = (v14 + v79++ + 1);
          if (v80 >= (unint64_t)a2)
          {
            this = (BlueFin::GlFormat *)((char *)this + v79);
            LODWORD(v14) = v14 + v79;
            goto LABEL_150;
          }
        }
        *((unsigned char *)this + 2) = 0;
        return result;
    }
  }
}

unint64_t BlueFin::GlFormat::gl_format_param(BlueFin::GlFormat *this, char *a2, int a3, unsigned int a4, int a5, int a6, char *__s, void *a8, BOOL a9)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  char v9 = (char)a8;
  int v12 = a5;
  char v14 = a3;
  unint64_t result = 0;
  if (a3 <= 98)
  {
    if (a3 != 69 && a3 != 71)
    {
      if (a3 != 88) {
        return result;
      }
LABEL_13:
      unint64_t v19 = *(void *)__s;
      if (a8)
      {
        int v21 = this;
        char v20 = 1;
        goto LABEL_15;
      }
      *(unsigned char *)this = v19;
      BOOL v33 = (char *)this + 1;
      if ((unint64_t)a2 < 2)
      {
        unint64_t result = 1;
      }
      else
      {
        if ((a4 & 0x100) != 0) {
          char v34 = 0;
        }
        else {
          char v34 = BYTE1(v19);
        }
        BOOL v33 = (char *)this + 2;
        *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v34;
        unint64_t result = 2;
      }
      unint64_t v40 = result;
      if ((a4 & 0x400) != 0 && result < (unint64_t)a2)
      {
        *BOOL v33 = BYTE2(v19);
        unint64_t v40 = (result + 1);
        if (v40 >= (unint64_t)a2)
        {
          unint64_t result = (result + 1);
          ++v33;
        }
        else
        {
          v33[1] = BYTE3(v19);
          v33 += 2;
          unint64_t v40 = (result + 2);
          unint64_t result = v40;
        }
      }
      if ((a4 & 0x800) == 0 || v40 >= (unint64_t)a2) {
        return result;
      }
      *BOOL v33 = BYTE4(v19);
      int v52 = v33 + 1;
      unint64_t v53 = (result + 1);
      if (v53 < (unint64_t)a2)
      {
        int v52 = v33 + 2;
        v33[1] = BYTE5(v19);
        unint64_t v53 = (result + 2);
      }
      unint64_t result = v53;
      if (v53 < (unint64_t)a2)
      {
        *v52++ = BYTE6(v19);
        unint64_t v53 = (v53 + 1);
        unint64_t result = (result + 1);
      }
      if (v53 >= (unint64_t)a2) {
        return result;
      }
      unint64_t v54 = HIBYTE(v19);
LABEL_305:
      *int v52 = v54;
      return (result + 1);
    }
LABEL_18:
    double v22 = *(double *)__s;
    uint64_t __src = *(void *)__s;
    if ((a8 & 1) == 0)
    {
      uint64_t v31 = (uint64_t)(a2 - 1);
      if ((unint64_t)(a2 - 1) >= 7) {
        uint64_t v31 = 7;
      }
      uint64_t v32 = v31 + 1;
      memcpy(this, &__src, v31 + 1);
      return v32;
    }
    if (v22 < 0.0) {
      double v23 = -v22;
    }
    else {
      double v23 = v22;
    }
    if (a6 >= 17) {
      int v24 = 17;
    }
    else {
      int v24 = a6;
    }
    char v25 = a4 & 0xDF;
    if (a6 > 0) {
      char v25 = a4;
    }
    else {
      int v24 = 0;
    }
    if ((a4 & 0x20) != 0) {
      unsigned int v26 = v24;
    }
    else {
      unsigned int v26 = 6;
    }
    if ((a4 & 0x20) != 0) {
      char v27 = v25;
    }
    else {
      char v27 = a4 | 0x20;
    }
    char v114 = v27;
    double __y = 0.0;
    unsigned int v28 = a3 & 0xFFFFFFDF;
    if ((a3 & 0xFFFFFFDF) != 0x47)
    {
LABEL_83:
      if ((v14 & 0xDF) == 0x45)
      {
        if (v23 == 0.0)
        {
          int v43 = 0;
        }
        else
        {
          int v43 = vcvtmd_s64_f64(log10(v23));
          if (v43 < -299) {
            double v23 = v23 * __exp10((double)(-100 - v43)) * 1.0e100;
          }
          else {
            double v23 = v23 * __exp10((double)-v43);
          }
        }
        v12 -= 5;
      }
      else
      {
        int v43 = 0;
      }
      long double v55 = modf(v23, &__y);
      double v56 = BlueFin::dPow10[v26];
      long double v57 = v55 + 0.5 / v56;
      double v58 = v56 * v57;
      long double v59 = __y;
      if (v56 * v57 >= v56)
      {
        long double v59 = __y + 1.0;
        double v58 = 0.0;
        if ((v14 & 0xDF) == 0x45 && v59 >= 10.0)
        {
          ++v43;
          long double v59 = v59 / 10.0;
        }
      }
      char v112 = v14 & 0xDF;
      int v113 = v43;
      if (v59 <= 1000000000.0)
      {
        double v68 = fmod(v59, 4294967300.0);
        if (v59 <= 4294967300.0) {
          double v68 = v59;
        }
        if (v68 < -4294967300.0) {
          double v68 = -fmod(-v68, 4294967300.0);
        }
        if (v68 < 0.0) {
          unint64_t v69 = --v68;
        }
        else {
          unint64_t v69 = v68;
        }
        int v67 = BlueFin::GlFormat::gl_output_num((BlueFin::GlFormat *)v120, (char *)0x14, 117, 0, 0, v69, 1);
      }
      else
      {
        double v60 = fmod(v59 * 0.000000001, 4294967300.0);
        if (v59 * 0.000000001 <= 4294967300.0) {
          double v60 = v59 * 0.000000001;
        }
        if (v60 < -4294967300.0) {
          double v60 = -fmod(-v60, 4294967300.0);
        }
        if (v60 < 0.0) {
          unsigned int v61 = --v60;
        }
        else {
          unsigned int v61 = v60;
        }
        double v62 = v59 + (double)v61 * -1000000000.0;
        double v63 = fmod(v62, 4294967300.0);
        if (v62 <= 4294967300.0) {
          double v63 = v62;
        }
        if (v63 < -4294967300.0) {
          double v63 = -fmod(-v63, 4294967300.0);
        }
        if (v63 < 0.0) {
          unsigned int v64 = --v63;
        }
        else {
          unsigned int v64 = v63;
        }
        if (v64 > 0x3B9AC9FF) {
          unint64_t v65 = v64 + 1000000000;
        }
        else {
          unint64_t v65 = v64;
        }
        int v66 = BlueFin::GlFormat::gl_output_num((BlueFin::GlFormat *)v120, (char *)0x14, 117, 0, 0, v61 - (v64 > 0x3B9AC9FF), 1);
        int v67 = BlueFin::GlFormat::gl_output_num((BlueFin::GlFormat *)&v120[v66], (char *)(20 - v66), 117, 2, 9, v65, 1)
            + v66;
      }
      if (v58 <= 1000000000.0)
      {
        double v79 = fmod(v58, 4294967300.0);
        if (v58 <= 4294967300.0) {
          double v79 = v58;
        }
        if (v79 < -4294967300.0) {
          double v79 = -fmod(-v79, 4294967300.0);
        }
        if (v79 < 0.0) {
          unint64_t v80 = --v79;
        }
        else {
          unint64_t v80 = v79;
        }
        int v78 = BlueFin::GlFormat::gl_output_num((BlueFin::GlFormat *)v119, (char *)0x14, 117, 0, 0, v80, 1);
      }
      else
      {
        double v70 = fmod(v58 * 0.000000001, 4294967300.0);
        if (v58 * 0.000000001 <= 4294967300.0) {
          double v70 = v58 * 0.000000001;
        }
        if (v70 < -4294967300.0) {
          double v70 = -fmod(-v70, 4294967300.0);
        }
        if (v70 < 0.0) {
          unsigned int v71 = --v70;
        }
        else {
          unsigned int v71 = v70;
        }
        double v72 = v58 + (double)v71 * -1000000000.0;
        double v73 = fmod(v72, 4294967300.0);
        if (v72 <= 4294967300.0) {
          double v73 = v72;
        }
        unsigned int v74 = v28;
        if (v73 < -4294967300.0) {
          double v73 = -fmod(-v73, 4294967300.0);
        }
        if (v73 < 0.0) {
          unsigned int v75 = --v73;
        }
        else {
          unsigned int v75 = v73;
        }
        if (v75 > 0x3B9AC9FF) {
          unint64_t v76 = v75 + 1000000000;
        }
        else {
          unint64_t v76 = v75;
        }
        int v77 = BlueFin::GlFormat::gl_output_num((BlueFin::GlFormat *)v119, (char *)0x14, 117, 0, 0, v71 - (v75 > 0x3B9AC9FF), 1);
        int v78 = BlueFin::GlFormat::gl_output_num((BlueFin::GlFormat *)&v119[v77], (char *)(20 - v77), 117, 2, 9, v76, 1)
            + v77;
        unsigned int v28 = v74;
      }
      if (v26) {
        int v81 = v78;
      }
      else {
        int v81 = 0;
      }
      if (v26) {
        int v82 = v26 - v78;
      }
      else {
        int v82 = 0;
      }
      int v83 = v12 - (v67 + v81 + v82);
      if (v28 == 71)
      {
        if (v81 < 1)
        {
LABEL_197:
          char v85 = v114;
          if (v114 & 1 | v81)
          {
            int v78 = v81;
          }
          else
          {
            char v85 = v114 & 0xDF;
            int v78 = 0;
            if (v82 >= 1)
            {
              int v83 = v82 + v83 - 1;
              int v82 = 1;
            }
          }
          goto LABEL_204;
        }
        int v84 = &v119[v81 - 1];
        int v83 = v12 - v67 - v82;
        while (*v84 == 48)
        {
          if (((v81 - 2) & 0x80000000) == 0)
          {
            --v84;
            --v81;
            BOOL v46 = v78-- <= 1;
            if (!v46) {
              continue;
            }
          }
          int v81 = 0;
          goto LABEL_197;
        }
        int v83 = v12 - v82 - v67 - v81;
      }
      else
      {
        int v78 = v81;
      }
      char v85 = v114;
LABEL_204:
      unint64_t v86 = 0;
      BOOL v87 = (v85 & 0x18) == 0 && v22 >= 0.0;
      int v88 = v83 - ((v85 & 0x20) >> 5) - !v87;
      int v89 = v88 & ~(v88 >> 31);
      int v90 = v85 & 6;
      if ((v85 & 6) == 0 && v88 >= 1)
      {
        if ((unint64_t)a2 <= 1) {
          uint64_t v91 = 1;
        }
        else {
          uint64_t v91 = (uint64_t)a2;
        }
        unint64_t v92 = v91 - 1;
        if (v92 >= (v89 - 1)) {
          unint64_t v93 = (v89 - 1);
        }
        else {
          unint64_t v93 = v92;
        }
        char v115 = v85;
        char v111 = v14;
        int v94 = v85 & 6;
        memset(this, 32, v93 + 1);
        int v90 = v94;
        char v14 = v111;
        this = (BlueFin::GlFormat *)((char *)this + v93 + 1);
        int v89 = v89 - v93 - 2;
        unint64_t v86 = v93 + 1;
        char v85 = v115;
      }
      char v95 = v86 >= (unint64_t)a2 || v87;
      if ((v95 & 1) == 0)
      {
        if ((v85 & 0x10) != 0) {
          char v96 = 43;
        }
        else {
          char v96 = 32;
        }
        if (v22 < 0.0) {
          char v96 = 45;
        }
        *(unsigned char *)this = v96;
        this = (BlueFin::GlFormat *)((char *)this + 1);
        unint64_t v86 = (v86 + 1);
      }
      if (v90 == 2 && v89 >= 1)
      {
        if (v86 >= (unint64_t)a2)
        {
          --v89;
        }
        else
        {
          if ((unint64_t)&a2[~(unint64_t)v86] >= (v89 - 1)) {
            unint64_t v97 = (v89 - 1);
          }
          else {
            unint64_t v97 = (unint64_t)&a2[~(unint64_t)v86];
          }
          char v116 = v85;
          memset(this, 48, v97 + 1);
          this = (BlueFin::GlFormat *)((char *)this + v97 + 1);
          char v85 = v116;
          int v89 = v89 - v97 - 2;
          unint64_t v86 = (v86 + v97 + 1);
        }
      }
      BOOL v98 = v86 < (unint64_t)a2;
      if (v67 >= 1 && v86 < (unint64_t)a2)
      {
        uint64_t v99 = v120;
        do
        {
          char v100 = *v99++;
          *(unsigned char *)this = v100;
          this = (BlueFin::GlFormat *)((char *)this + 1);
          unint64_t v86 = (v86 + 1);
          BOOL v98 = v86 < (unint64_t)a2;
          if (v67 < 2) {
            break;
          }
          --v67;
        }
        while (v86 < (unint64_t)a2);
      }
      if ((v85 & 0x20) != 0)
      {
        int v101 = v113;
        if (v98)
        {
          *(unsigned char *)this = 46;
          this = (BlueFin::GlFormat *)((char *)this + 1);
          unint64_t v102 = (v86 + 1);
          unint64_t v103 = v102;
          if (v82 < 1)
          {
            char i = v112;
          }
          else
          {
            for (char i = v112; v102 < (unint64_t)a2; --v82)
            {
              *(unsigned char *)this = 48;
              this = (BlueFin::GlFormat *)((char *)this + 1);
              unint64_t v102 = (v103 + 1);
              unint64_t v103 = v102;
              if (v82 < 2) {
                break;
              }
            }
          }
          if (v78 >= 1 && v102 < (unint64_t)a2)
          {
            int v105 = v119;
            do
            {
              char v106 = *v105++;
              *(unsigned char *)this = v106;
              this = (BlueFin::GlFormat *)((char *)this + 1);
              unint64_t v103 = (v103 + 1);
              if (v78 < 2) {
                break;
              }
              --v78;
            }
            while (v103 < (unint64_t)a2);
          }
        }
        else
        {
          unint64_t v103 = v86;
          char i = v112;
        }
      }
      else
      {
        unint64_t v103 = v86;
        char i = v112;
        int v101 = v113;
      }
      if (i != 69) {
        goto LABEL_272;
      }
      unint64_t v107 = v103;
      if (v103 < (unint64_t)a2)
      {
        *(unsigned char *)this = v14;
        this = (BlueFin::GlFormat *)((char *)this + 1);
        unint64_t v107 = (v103 + 1);
        unint64_t v103 = v107;
      }
      if (v107 < (unint64_t)a2)
      {
        if (v101 >= 0) {
          char v108 = 43;
        }
        else {
          char v108 = 45;
        }
        if (v101 < 0) {
          int v101 = -v101;
        }
        *(unsigned char *)this = v108;
        this = (BlueFin::GlFormat *)((char *)this + 1);
        unint64_t v107 = (v103 + 1);
        unint64_t v103 = v107;
      }
      if (v107 < (unint64_t)a2 && v101 >= 100)
      {
        *(unsigned char *)this = v101 / 0x64u + 48;
        this = (BlueFin::GlFormat *)((char *)this + 1);
        unint64_t v107 = (v103 + 1);
        v101 %= 0x64u;
        unint64_t v103 = v107;
      }
      if (v107 < (unint64_t)a2)
      {
        *(unsigned char *)this = v101 / 10 + 48;
        this = (BlueFin::GlFormat *)((char *)this + 1);
        unint64_t v107 = (v103 + 1);
        v101 %= 10;
        unint64_t v103 = v107;
      }
      if (v107 < (unint64_t)a2)
      {
        *(unsigned char *)this = v101 + 48;
        this = (BlueFin::GlFormat *)((char *)this + 1);
        unint64_t result = (v103 + 1);
      }
      else
      {
LABEL_272:
        unint64_t result = v103;
      }
      if ((v85 & 4) != 0 && v89 >= 1 && result < (unint64_t)a2)
      {
        do
        {
          *(unsigned char *)this = 32;
          this = (BlueFin::GlFormat *)((char *)this + 1);
          unint64_t result = (result + 1);
          if (v89 < 2) {
            break;
          }
          --v89;
        }
        while (result < (unint64_t)a2);
      }
      return result;
    }
    if (v23 >= 1000000.0)
    {
      if (v23 == 0.0)
      {
LABEL_40:
        char v14 = 102;
LABEL_76:
        if (v26) {
          BOOL v41 = v14 == 102;
        }
        else {
          BOOL v41 = 1;
        }
        int v42 = !v41;
        v26 -= v42;
        goto LABEL_83;
      }
    }
    else
    {
      double v29 = pow(0.1, (double)(v26 / 3u));
      if (v23 == 0.0 || v23 >= v29) {
        goto LABEL_40;
      }
    }
    v14 -= 2;
    goto LABEL_76;
  }
  switch(a3)
  {
    case 'c':
      *(unsigned char *)this = *__s;
      unint64_t result = 1;
      if (unint64_t)a2 < 2 || (a8) {
        return result;
      }
      goto LABEL_111;
    case 'd':
    case 'i':
      uint64_t v18 = *(void *)__s;
      if (a8)
      {
        if (v18 >= 0) {
          unint64_t v19 = *(void *)__s;
        }
        else {
          unint64_t v19 = -v18;
        }
        char v20 = v18 >= 0;
        int v21 = this;
LABEL_15:
        return BlueFin::GlFormat::gl_output_num(v21, a2, a3, a4, a5, v19, v20);
      }
      if ((a4 & 0x100) != 0)
      {
        *(unsigned char *)this = v18;
        if ((unint64_t)a2 >= 2)
        {
LABEL_111:
          *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          return 2;
        }
        return 1;
      }
      if ((a4 & 0x400) != 0)
      {
        *(unsigned char *)this = v18;
        int v52 = (char *)this + 1;
        if ((unint64_t)a2 < 2)
        {
          unint64_t result = 1;
        }
        else
        {
          int v52 = (char *)this + 2;
          *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BYTE1(v18);
          unint64_t result = 2;
        }
        unint64_t v109 = result;
        if (result < (unint64_t)a2)
        {
          *v52++ = BYTE2(v18);
          unint64_t v109 = (result + 1);
          unint64_t result = v109;
        }
        if (v109 >= (unint64_t)a2) {
          return result;
        }
        unint64_t v54 = (unint64_t)v18 >> 24;
        goto LABEL_305;
      }
      if ((a4 & 0x800) == 0)
      {
        *(unsigned char *)this = v18;
        if ((unint64_t)a2 >= 2)
        {
          *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BYTE1(v18);
          return 2;
        }
        return 1;
      }
      *(unsigned char *)this = v18;
      int v52 = (char *)this + 1;
      if ((unint64_t)a2 < 2)
      {
        unint64_t result = 1;
      }
      else
      {
        int v52 = (char *)this + 2;
        *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BYTE1(v18);
        unint64_t result = 2;
      }
      unint64_t v110 = result;
      if (result < (unint64_t)a2)
      {
        *v52++ = BYTE2(v18);
        unint64_t v110 = (result + 1);
        unint64_t result = v110;
      }
      if (v110 < (unint64_t)a2)
      {
        *v52++ = BYTE3(v18);
        unint64_t v110 = (result + 1);
        unint64_t result = v110;
      }
      if (v110 < (unint64_t)a2)
      {
        *v52++ = BYTE4(v18);
        unint64_t v110 = (result + 1);
        unint64_t result = v110;
      }
      if (v110 < (unint64_t)a2)
      {
        *v52++ = BYTE5(v18);
        unint64_t v110 = (result + 1);
        unint64_t result = v110;
      }
      if (v110 < (unint64_t)a2)
      {
        *v52++ = BYTE6(v18);
        unint64_t v110 = (result + 1);
        unint64_t result = v110;
      }
      if (v110 < (unint64_t)a2)
      {
        unint64_t v54 = HIBYTE(v18);
        goto LABEL_305;
      }
      return result;
    case 'e':
    case 'f':
    case 'g':
      goto LABEL_18;
    case 'o':
    case 'u':
    case 'x':
      goto LABEL_13;
    case 's':
      size_t v35 = strlen(__s);
      unint64_t v36 = 0;
      if (((a6 >= 0) & (a4 >> 5) & (a6 < (unint64_t)a2)) != 0) {
        unint64_t v37 = a6;
      }
      else {
        unint64_t v37 = (unint64_t)a2;
      }
      if (v12 < 1 || (size_t v38 = v12 - v35, v12 <= v35))
      {
        size_t v38 = 0;
      }
      else
      {
        unint64_t v36 = 0;
        if ((a4 & 4) == 0 && v37 && v38)
        {
          unint64_t v36 = 0;
          do
          {
            unint64_t v39 = v36;
            *((unsigned char *)this + v36++) = 32;
          }
          while (v38 - 1 != v39 && v37 > v36);
          v38 -= v36;
          this = (BlueFin::GlFormat *)((char *)this + v36);
        }
      }
      char v44 = *__s;
      unint64_t v45 = v36;
      if (*__s) {
        BOOL v46 = v37 > v36;
      }
      else {
        BOOL v46 = 0;
      }
      if (v46)
      {
        unsigned int v47 = __s + 1;
        LODWORD(v45) = v36;
        do
        {
          *(unsigned char *)this = v44;
          this = (BlueFin::GlFormat *)((char *)this + 1);
          unint64_t v45 = (v45 + 1);
          int v48 = *v47++;
          char v44 = v48;
          if (v48) {
            BOOL v49 = v37 > v45;
          }
          else {
            BOOL v49 = 0;
          }
          unint64_t v36 = v45;
        }
        while (v49);
      }
      if (v38 && v37 > v45)
      {
        size_t v50 = v38 - 1;
        do
        {
          *(unsigned char *)this = 32;
          this = (BlueFin::GlFormat *)((char *)this + 1);
          unint64_t v45 = (v36 + 1);
          unint64_t v36 = v45;
          BOOL v51 = v50-- != 0;
        }
        while (v51 && v37 > v45);
      }
      if (v9) {
        return v36;
      }
      if (v45 >= (unint64_t)a2)
      {
        *((unsigned char *)this - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        if (v36)
        {
          *((unsigned char *)this - 2) = 0;
          return (v36 - 1);
        }
        else
        {
          return v36;
        }
      }
      else
      {
        *(unsigned char *)this = 0;
        unint64_t result = (v36 + 1);
        if ((((_BYTE)v36 + 1) & 1) != 0 && result < (unint64_t)a2)
        {
          *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          return (v36 + 2);
        }
      }
      return result;
    default:
      return result;
  }
}

unint64_t BlueFin::GlFormat::gl_output_num(BlueFin::GlFormat *this, char *a2, int a3, __int16 a4, int a5, unint64_t a6, char a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  char v7 = a4;
  char v9 = this;
  v34[39] = 0;
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  uint64_t v11 = (a3 - 88);
  if ((a4 & 0x800) != 0)
  {
    if (v11 > 0x20) {
      goto LABEL_40;
    }
    if (((1 << (a3 - 88)) & 0x20021000) != 0)
    {
      uint64_t v12 = 0;
      do
      {
        v34[v12-- + 38] = (a6 % 0xA) | 0x30;
        BOOL v29 = a6 >= 0xA;
        a6 /= 0xAuLL;
      }
      while (v29);
    }
    else if (((1 << (a3 - 88)) & 0x100000001) != 0)
    {
      uint64_t v12 = 0;
      if (a3 == 88) {
        char v16 = 65;
      }
      else {
        char v16 = 97;
      }
      do
      {
        if ((a6 & 0xF) >= 0xA) {
          char v17 = (a6 & 0xF) + v16 - 10;
        }
        else {
          char v17 = a6 & 0xF | 0x30;
        }
        v34[v12-- + 38] = v17;
        BOOL v29 = a6 >= 0x10;
        a6 >>= 4;
      }
      while (v29);
    }
    else
    {
      if (v11 != 23) {
        goto LABEL_40;
      }
      uint64_t v12 = 0;
      do
      {
        v34[v12-- + 38] = a6 & 7 | 0x30;
        BOOL v29 = a6 >= 8;
        a6 >>= 3;
      }
      while (v29);
    }
  }
  else
  {
    if (v11 > 0x20) {
      goto LABEL_40;
    }
    if (((1 << (a3 - 88)) & 0x20021000) != 0)
    {
      uint64_t v12 = 0;
      do
      {
        v34[v12-- + 38] = (a6 % 0xA) | 0x30;
        BOOL v29 = a6 >= 0xA;
        LODWORD(a6) = a6 / 0xA;
      }
      while (v29);
    }
    else if (((1 << (a3 - 88)) & 0x100000001) != 0)
    {
      uint64_t v12 = 0;
      if (a3 == 88) {
        char v13 = 65;
      }
      else {
        char v13 = 97;
      }
      do
      {
        if ((a6 & 0xF) >= 0xA) {
          char v14 = (a6 & 0xF) + v13 - 10;
        }
        else {
          char v14 = a6 & 0xF | 0x30;
        }
        v34[v12-- + 38] = v14;
        BOOL v29 = a6 >= 0x10;
        LODWORD(a6) = a6 >> 4;
      }
      while (v29);
    }
    else
    {
      if (v11 != 23) {
        goto LABEL_40;
      }
      uint64_t v12 = 0;
      do
      {
        v34[v12-- + 38] = a6 & 7 | 0x30;
        BOOL v29 = a6 >= 8;
        LODWORD(a6) = a6 >> 3;
      }
      while (v29);
    }
  }
  uint64_t v10 = -v12;
  if ((int)v10 >= 40)
  {
    DeviceFaultNotify("glutl_str_format.cpp", 1041, "gl_output_num", (char)"len < 40");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_str_format.cpp", 1041, "len < 40");
  }
LABEL_40:
  uint64_t v18 = (39 - v10);
  int v19 = a5 - v10;
  if ((a3 - 100) <= 0x11 && ((1 << (a3 - 100)) & 0x20021) != 0)
  {
    if ((a7 & 1) == 0)
    {
      char v20 = 45;
      goto LABEL_52;
    }
    if ((a4 & 0x10) != 0)
    {
      char v20 = 43;
      goto LABEL_52;
    }
    if ((a4 & 8) != 0)
    {
      char v20 = 32;
LABEL_52:
      *(unsigned char *)this = v20;
      char v9 = (BlueFin::GlFormat *)((char *)this + 1);
      --v19;
LABEL_53:
      unint64_t v15 = 1;
      goto LABEL_54;
    }
    goto LABEL_50;
  }
  if ((a4 & 1) == 0)
  {
LABEL_50:
    unint64_t v15 = 0;
    goto LABEL_54;
  }
  if (a3 == 111)
  {
    if (v34[v18] != 48)
    {
      *(unsigned char *)this = 48;
      char v9 = (BlueFin::GlFormat *)((char *)this + 1);
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  *(unsigned char *)this = 48;
  if ((unint64_t)a2 < 2)
  {
    unint64_t v15 = 1;
    char v9 = (BlueFin::GlFormat *)((char *)this + 1);
  }
  else
  {
    *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
    char v9 = (BlueFin::GlFormat *)((char *)this + 2);
    unint64_t v15 = 2;
  }
LABEL_54:
  int v21 = v19 & ~(v19 >> 31);
  if ((a4 & 4) == 0 && v19 >= 1)
  {
    unsigned int v22 = v21 - 1;
    if ((a4 & 2) != 0)
    {
      if (v15 < (unint64_t)a2)
      {
        if ((unint64_t)&a2[~(unint64_t)v15] >= v22) {
          unint64_t v23 = (v21 - 1);
        }
        else {
          unint64_t v23 = (unint64_t)&a2[~(unint64_t)v15];
        }
        size_t v24 = v23 + 1;
        char v25 = v9;
        int v26 = 48;
        goto LABEL_67;
      }
    }
    else if (v15 < (unint64_t)a2)
    {
      if ((unint64_t)&a2[~(unint64_t)v15] >= v22) {
        unint64_t v23 = (v21 - 1);
      }
      else {
        unint64_t v23 = (unint64_t)&a2[~(unint64_t)v15];
      }
      size_t v24 = v23 + 1;
      char v25 = v9;
      int v26 = 32;
LABEL_67:
      memset(v25, v26, v24);
      char v9 = (BlueFin::GlFormat *)((char *)v9 + v24);
      int v21 = v21 - v23 - 2;
      unint64_t v15 = (v15 + v23 + 1);
      goto LABEL_69;
    }
    --v21;
  }
LABEL_69:
  char v27 = v34[v18];
  unint64_t v28 = v15;
  if (v27) {
    BOOL v29 = v15 >= (unint64_t)a2;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29)
  {
    int v30 = &v34[v18 + 1];
    LODWORD(v28) = v15;
    do
    {
      *(unsigned char *)char v9 = v27;
      char v9 = (BlueFin::GlFormat *)((char *)v9 + 1);
      unint64_t v28 = (v28 + 1);
      int v31 = *v30++;
      char v27 = v31;
      if (v31) {
        BOOL v32 = v28 >= (unint64_t)a2;
      }
      else {
        BOOL v32 = 1;
      }
      unint64_t v15 = v28;
    }
    while (!v32);
  }
  if ((v7 & 4) != 0 && v21 >= 1 && v28 < (unint64_t)a2)
  {
    do
    {
      *(unsigned char *)char v9 = 32;
      char v9 = (BlueFin::GlFormat *)((char *)v9 + 1);
      unint64_t v15 = (v15 + 1);
      if (v21 < 2) {
        break;
      }
      --v21;
    }
    while (v15 < (unint64_t)a2);
  }
  return v15;
}

BOOL BlueFin::GlPeNmeaGen::FormatNmeaGSV(uint64_t a1, uint64_t a2, BlueFin::GlPeNmeaGen *a3, int a4, uint8x8_t a5, uint32x4_t a6)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  *(unsigned char *)a3 = 0;
  if (*(unsigned char *)(a1 + 4))
  {
    char v9 = a3;
    uint64_t v10 = 0;
    LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    do
    {
      a5.i32[0] = *(_DWORD *)(*(void *)(a1 + 320) + v10);
      a5 = (uint8x8_t)vmovl_u8(a5).u64[0];
      LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11 + (unsigned __int16)vaddv_s16((int16x4_t)a5);
      v10 += 48;
    }
    while (v10 != 288);
  }
  else
  {
    for (uint64_t i = 0; i != 288; i += 48)
    {
      uint64_t v76 = *(void *)(a1 + 320) + i;
      *(_DWORD *)(v76 + 16) = 0;
      *(void *)uint64_t v76 = 0;
      *(void *)(v76 + 7) = 0;
      bzero(*(void **)(v76 + 24), ((4 * *(unsigned __int8 *)(v76 + 32) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    }
    uint64_t v77 = 0;
    LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    int v78 = (unsigned __int8 *)(a2 + 50);
    do
    {
      if (v77 >= *(__int16 *)(a2 + 44)) {
        break;
      }
      unsigned __int8 v79 = v78[1];
      unsigned int v103 = BlueFin::GlImplGnss::m_aucImplGnssTable[*v78];
      LOBYTE(v104) = v79;
      LODWORD(v106) = 0;
      if (BlueFin::GlPeNmeaGen::ToNmeaId(a1, &v103, &v106, &v101))
      {
        unint64_t v80 = v78[32];
        if (v80 <= 3)
        {
          uint64_t v81 = *(void *)(a1 + 320) + 48 * v106;
          ++*(unsigned char *)(v81 + v80);
        }
        if (v80 < 4) {
          LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11 + 1;
        }
      }
      ++v77;
      v78 += 40;
    }
    while (v77 != 100);
    char v9 = a3;
    if (BlueFin::GlUtils::m_ucEnabled
      && (BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF) & 1) != 0)
    {
      int v98 = a4;
      GlCustomLog(15, "GlPeNmeaGen::FormatNmeaGSV  TotalSats:%d ", v11);
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      int v84 = BlueFin::GlPeNmeaGen::FormatNmeaGSV(BlueFin::GL_FIX_STATUS const*,char *,short)::acTalker2String;
      do
      {
        for (uint64_t j = 0; j != 4; ++j)
        {
          unint64_t v86 = v84[j];
          if (!strstr(v86, "NA"))
          {
            if ((j & 0xFFFFFFFC) != 0) {
              int v87 = 0;
            }
            else {
              int v87 = *(unsigned __int8 *)(*(void *)(a1 + 320) + v82 + j);
            }
            GlCustomLog(15, "%s %d ", v86, v87);
          }
        }
        ++v83;
        v82 += 48;
        v84 += 4;
      }
      while (v83 != 6);
      GlCustomLog(15, "\n");
      char v9 = a3;
      a4 = v98;
    }
  }
  uint64_t v12 = 0;
  unint64_t v13 = (unint64_t)v9 + a4 - 1;
  long long v106 = 0uLL;
  uint64_t v107 = 0;
  char v14 = *(unsigned __int32 **)(a1 + 320);
  v15.i64[0] = 0x300000003;
  v15.i64[1] = 0x300000003;
  char v16 = v14;
  do
  {
    unsigned __int32 v17 = *v16;
    v16 += 12;
    a6.i32[0] = v17;
    a6 = vshrq_n_u32(vaddw_u16(v15, (uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a6.i8)), 2uLL);
    a6.i32[0] = vaddvq_s32((int32x4_t)a6);
    *(_DWORD *)((char *)&v106 + v12) = a6.i32[0];
    v12 += 4;
  }
  while (v12 != 24);
  signed int v18 = 0;
  uint64_t v19 = 0;
  unsigned int v103 = 0;
  uint8x8_t v20 = (uint8x8_t)v106;
  long long v104 = v106;
  uint64_t v105 = v107;
  signed int v21 = *(unsigned __int8 *)(a1 + 4);
  int v22 = -1;
  do
  {
    unint64_t v23 = &v103 + v19;
    signed int v24 = v23[1] + v18;
    if (v24 > v21 && v18 <= v21) {
      int v22 = v19;
    }
    v23[1] = v24;
    signed int v18 = v24;
    ++v19;
  }
  while (v19 != 6);
  BOOL result = 1;
  if (v22 == -1)
  {
    char v74 = 0;
    goto LABEL_100;
  }
  int v27 = v22;
  BlueFin::GlPeNmeaGsvSatsNum::Update((uint64_t)&v14[12 * v22], v20, (uint16x8_t)a6);
  int v90 = HIDWORD(v105);
  if (v13 > (unint64_t)v9) {
    int v30 = (char *)(v13 - (void)v9 + 1);
  }
  else {
    int v30 = 0;
  }
  v29.i32[0] = *(_DWORD *)(*(void *)(a1 + 320) + 48 * v22);
  uint64_t v31 = BlueFin::GlFormat::glsnprintf(v9, v30, "$%sGSV,%01d,%01d,%02d", v28, (char *)&BlueFin::GlPeNmeaGen::m_acTalkerCodes + 3 * v22, *((unsigned int *)&v106 + v22), *(unsigned __int8 *)(a1 + 4) - *(&v103 + v22) + 1, (unsigned __int16)vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v29)));
  uint64_t v32 = 0;
  BOOL v33 = v9;
  uint64_t v34 = 0;
  uint64_t v35 = (char *)v13;
  int v36 = 0;
  unint64_t v37 = (BlueFin::GlFormat *)((char *)v33 + v31);
  unint64_t v97 = v35;
  uint64_t v94 = a2;
  char v95 = v35 + 1;
  uint64_t v11 = (int)v11;
  uint64_t v91 = (int)v11;
  while (v34 < v11 && v36 < 4)
  {
    size_t v38 = (unsigned char *)(a2 + v32);
    unsigned int v39 = BlueFin::GlImplGnss::m_aucImplGnssTable[*(unsigned __int8 *)(a2 + v32 + 50)];
    char v40 = *(unsigned char *)(a2 + v32 + 51);
    int v100 = 0;
    unsigned int v101 = v39;
    char v102 = v40;
    unsigned __int8 v99 = 0;
    uint64_t v31 = BlueFin::GlPeNmeaGen::ToNmeaId(a1, &v101, &v100, &v99);
    if (v100 == v22) {
      int v42 = v31;
    }
    else {
      int v42 = 0;
    }
    if (v42 != 1) {
      goto LABEL_67;
    }
    uint64_t v43 = *(void *)(a1 + 320);
    if (*(unsigned __int8 *)(v43 + 48 * v27 + 14) != *(unsigned __int8 *)(a2 + v32 + 82)) {
      goto LABEL_67;
    }
    uint64_t v44 = v43 + 48 * v27;
    int v45 = *(_DWORD *)(v44 + 16);
    *(_DWORD *)(v44 + 16) = v45 - 1;
    if (v45 > 0) {
      goto LABEL_67;
    }
    BOOL v46 = v97;
    if (v97 <= (char *)v37) {
      unsigned int v47 = 0;
    }
    else {
      unsigned int v47 = (char *)(v95 - (char *)v37);
    }
    BOOL v49 = (BlueFin::GlFormat *)((char *)v37 + BlueFin::GlFormat::glsnprintf(v37, v47, ",%02d", v41, v99));
    unint64_t v50 = v38[50];
    if (v50 >= 7) {
      char v51 = -1;
    }
    else {
      char v51 = 0xFFFFFFFFFF1FFFuLL >> (8 * v50);
    }
    unsigned __int8 v52 = v38[51] + v51;
    char v92 = v52 & 0x1F;
    uint64_t v93 = v52 >> 5;
    if (((unint64_t)*(unsigned int *)(*(void *)(*(void *)(a1 + 320) + 48 * v27 + 24) + 4 * v93) >> (v52 & 0x1F)))
    {
      if (v97 <= (char *)v49) {
        unint64_t v53 = 0;
      }
      else {
        unint64_t v53 = (char *)(v95 - (char *)v49);
      }
      unsigned int v54 = BlueFin::GlFormat::glsnprintf(v49, v53, ",,", v48);
      double v56 = v95;
      a2 = v94;
      goto LABEL_60;
    }
    int v57 = *(__int16 *)(v94 + v32 + 52);
    double v56 = v95;
    if (v57 <= 0)
    {
      BOOL v58 = *(__int16 *)(v94 + v32 + 54) > 0;
LABEL_42:
      a2 = v94;
      goto LABEL_43;
    }
    if (v57 != 1)
    {
      BOOL v58 = 1;
      goto LABEL_42;
    }
    a2 = v94;
    BOOL v58 = *(_WORD *)(v94 + v32 + 54) != 0;
LABEL_43:
    float v59 = *(float *)(a2 + v32 + 56);
    float v60 = *(float *)(a2 + v32 + 60);
    BOOL v61 = v59 > 0.0;
    if (v60 > 0.0) {
      BOOL v61 = 1;
    }
    if (v61 || !v58)
    {
      if (!v61)
      {
        if (v97 <= (char *)v49) {
          double v63 = 0;
        }
        else {
          double v63 = (char *)(v95 - (char *)v49);
        }
        if (v58) {
          unsigned int v54 = BlueFin::GlFormat::glsnprintf(v49, v63, ",%02d,%03d", v48, *(__int16 *)(v94 + v32 + 52), *(__int16 *)(a2 + v32 + 54));
        }
        else {
          unsigned int v54 = BlueFin::GlFormat::glsnprintf(v49, v63, ",,", v48, v88, v89);
        }
        BOOL v46 = v97;
        goto LABEL_60;
      }
    }
    else
    {
      float v59 = (float)v57;
      float v60 = (float)*(__int16 *)(a2 + v32 + 54);
    }
    BOOL v46 = v97;
    if (v97 <= (char *)v49) {
      double v62 = 0;
    }
    else {
      double v62 = (char *)(v95 - (char *)v49);
    }
    unsigned int v54 = BlueFin::GlFormat::glsnprintf(v49, v62, ",%04.1f,%05.1f", v48, v59, v60);
LABEL_60:
    unsigned int v64 = (BlueFin::GlFormat *)((char *)v49 + v54);
    if (v46 <= (char *)v64) {
      unint64_t v65 = 0;
    }
    else {
      unint64_t v65 = (char *)(v56 - (char *)v64);
    }
    if (v38[48]) {
      uint64_t v31 = BlueFin::GlFormat::glsnprintf(v64, v65, ",%04.1f", v55, *(float *)(a2 + v32 + 64));
    }
    else {
      uint64_t v31 = BlueFin::GlFormat::glsnprintf(v64, v65, ",", v55, v88);
    }
    uint64_t v11 = v91;
    int v27 = v22;
    uint64_t v66 = *(void *)(*(void *)(a1 + 320) + 48 * v22 + 24);
    *(_DWORD *)(v66 + 4 * v93) |= 1 << v92;
    unint64_t v37 = (BlueFin::GlFormat *)((char *)v64 + v31);
    ++v36;
LABEL_67:
    ++v34;
    v32 += 40;
    if (v32 == 4000) {
      break;
    }
  }
  uint64_t v67 = *(void *)(a1 + 320);
  uint64_t v68 = v67 + 48 * v27;
  ++*(unsigned char *)(v68 + 13);
  unsigned int NmeaSignalID = BlueFin::GlPeNmeaGsvSatsNum::GetNmeaSignalID(v31, *(_DWORD *)(v68 + 20), *(char *)(v68 + 14));
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248)
    || BlueFin::GlPeNmeaGsvSatsNum::OutputNmeaSignalID((BlueFin::GlPeNmeaGsvSatsNum *)(v67 + 48 * v27), NmeaSignalID))
  {
    if (v97 <= (char *)v37) {
      double v72 = 0;
    }
    else {
      double v72 = (char *)(v95 - (char *)v37);
    }
    BlueFin::GlFormat::glsnprintf(v37, v72, ",%01d", v69, NmeaSignalID);
  }
  BlueFin::GlPeNmeaGen::nmeaAddChksum(a3, v97, v71);
  char v73 = *(unsigned char *)(a1 + 4);
  BOOL result = v90 <= (v73 + 1);
  if (v90 > (v73 + 1)) {
    char v74 = v73 + 1;
  }
  else {
    char v74 = 0;
  }
LABEL_100:
  *(unsigned char *)(a1 + 4) = v74;
  return result;
}

BOOL BlueFin::GlPeNmeaGen::ToNmeaId(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned char *a4)
{
  *a3 = 6;
  *a4 = 0;
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 1832);
  int IsGnssSupportedForReport = BlueFin::GlPeNmeaGen::IsGnssSupportedForReport(v8, *a2);
  BOOL result = 0;
  if (IsGnssSupportedForReport)
  {
    if (v7 >= 7)
    {
      DeviceFaultNotify("glpe_nmeagen.cpp", 922, "ToNmeaId", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nmeagen.cpp", 922, "0");
    }
    char v11 = *((unsigned char *)a2 + 4);
    *a3 = dword_263BBCF6C[(int)v7];
    if (*(unsigned char *)(v8 + 26248))
    {
      char v12 = v11 + 64;
      if (v7 != 2) {
        char v12 = v11;
      }
      char v13 = v11 + 32;
      if (v7 != 1) {
        char v13 = v12;
      }
    }
    else
    {
      int v14 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v7];
      char v15 = v11 - 56;
      char v16 = v11 + 64;
      char v17 = v11 + 100;
      if (v7 != 5) {
        char v17 = v11;
      }
      char v13 = v11 + 32;
      if (v14 != 1) {
        char v13 = v17;
      }
      if (v14 == 2) {
        char v13 = v16;
      }
      if (v14 == 5) {
        char v13 = v15;
      }
    }
    *a4 = v13;
    return *a3 != 6;
  }
  return result;
}

uint64_t BlueFin::GlPeNmeaGen::IsGnssSupportedForReport(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + a2 + 276)) {
    return 1;
  }
  uint64_t result = 0;
  unsigned int v4 = *(unsigned __int16 *)(a1 + 26012);
  switch(a2)
  {
    case 0u:
      uint64_t result = v4 & 1;
      break;
    case 2u:
      uint64_t result = (v4 >> 1) & 1;
      break;
    case 3u:
      uint64_t result = (v4 >> 5) & 1;
      break;
    case 4u:
      uint64_t result = (v4 >> 3) & 1;
      break;
    case 5u:
      uint64_t result = (v4 >> 2) & 1;
      break;
    case 6u:
      uint64_t result = (v4 >> 4) & 1;
      break;
    default:
      return result;
  }
  return result;
}

char *BlueFin::GlPeNmeaGen::nmeaAddChksum(BlueFin::GlPeNmeaGen *this, char *a2, char *a3)
{
  unsigned int v3 = 0;
  *a2 = 0;
  unsigned int v4 = (char *)this + 1;
  do
  {
    unsigned int v5 = v3;
    int v6 = *v4++;
    v3 ^= v6;
  }
  while (v6);
  if (v4 - 1 <= a2) {
    *(v4 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 42;
  }
  else {
    --v4;
  }
  if (v4 <= a2)
  {
    int v7 = (v5 >> 4) + 55;
    if (v5 < 0xA0) {
      LOBYTE(v7) = (v5 >> 4) | 0x30;
    }
    *v4++ = v7;
  }
  if (v4 <= a2)
  {
    unsigned int v8 = v5 & 0xF;
    char v9 = v5 & 0xF | 0x30;
    char v10 = (v5 & 0xF) + 55;
    if (v8 < 0xA) {
      char v10 = v9;
    }
    *v4++ = v10;
  }
  if (v4 <= a2) {
    *v4++ = 13;
  }
  if (v4 <= a2) {
    *v4++ = 10;
  }
  if (v4 > a2 || (char *v4 = 0, v4 == a2) && *a2)
  {
    GlCustomLog(19, "GlPeNmeaGen::nmeaAddChksum:  Buffer overflow while trying to output NMEA message $%c%c%c%c%c\n", *((char *)this + 1), *((char *)this + 2), *((char *)this + 3), *((char *)this + 4), *((char *)this + 5));
    DeviceFaultNotify("glpe_nmeagen.cpp", 308, "nmeaAddChksum", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nmeagen.cpp", 308, "0");
  }
  return v4;
}

uint64_t BlueFin::GlPeNmeaGsvSatsNum::GetNmeaSignalID(uint64_t a1, int a2, unsigned int a3)
{
  int v8 = 151520769;
  char v7 = 1;
  int v6 = 50659329;
  switch(a2)
  {
    case 0:
    case 1:
    case 3:
      if (a3 >= 4) {
        goto LABEL_14;
      }
      unsigned int v3 = &v8;
      goto LABEL_12;
    case 2:
      if (a3) {
        goto LABEL_14;
      }
      unsigned int v4 = &v7;
      goto LABEL_13;
    case 4:
      if (a3 >= 4) {
        goto LABEL_14;
      }
      unsigned int v3 = &v6;
      goto LABEL_12;
    case 5:
      if (a3 >= 3) {
        goto LABEL_14;
      }
      unsigned int v3 = (int *)&__const__ZN7BlueFin18GlPeNmeaGsvSatsNum15GetNmeaSignalIDENS_6teGNSSENS_13GlSignalIndexE_aucGalNmeaSigId;
      goto LABEL_12;
    case 6:
      if (a3 > 2) {
        goto LABEL_14;
      }
      unsigned int v3 = (int *)&__const__ZN7BlueFin18GlPeNmeaGsvSatsNum15GetNmeaSignalIDENS_6teGNSSENS_13GlSignalIndexE_aucNicNmeaSigId;
LABEL_12:
      unsigned int v4 = (char *)v3 + a3;
LABEL_13:
      uint64_t result = *v4;
      break;
    default:
LABEL_14:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL BlueFin::GlPeNmeaGsvSatsNum::OutputNmeaSignalID(BlueFin::GlPeNmeaGsvSatsNum *this, int a2)
{
  switch(*((_DWORD *)this + 5))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      BOOL v2 = a2 == 1;
      goto LABEL_3;
    case 5:
      BOOL v2 = a2 == 7;
      goto LABEL_3;
    case 6:
      BOOL v2 = a2 == 5;
LABEL_3:
      BOOL result = !v2;
      break;
    default:
      BOOL result = 1;
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeNmeaGsvSatsNum::Update(uint64_t this, uint8x8_t a2, uint16x8_t a3)
{
  uint64_t v3 = 0;
  a2.i32[0] = *(_DWORD *)this;
  a3.i32[0] = 196611;
  a3.i16[2] = 3;
  a3.i16[3] = 3;
  int16x8_t v4 = (int16x8_t)vaddw_u8(a3, a2);
  *(uint16x4_t *)v4.i8 = vshr_n_u16(*(uint16x4_t *)v4.i8, 2uLL);
  v4.i32[0] = vmovn_s16(v4).u32[0];
  *(_DWORD *)(this + 9) = v4.i32[0];
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 5) = v4.i32[0];
  *(unsigned char *)(this + 14) = -1;
  do
  {
    unsigned int v5 = *(unsigned __int8 *)(this + v3 + 4);
    unsigned __int8 v6 = *(unsigned char *)(this + v3 + 5) + v5;
    *(unsigned char *)(this + v3 + 5) = v6;
    unsigned int v7 = *(unsigned __int8 *)(this + 13);
    if (v5 <= v7 && v7 < v6) {
      *(unsigned char *)(this + 14) = v3;
    }
    ++v3;
  }
  while (v3 != 4);
  *(_DWORD *)(this + 16) = 4 * (v7 - *(unsigned __int8 *)(this + *(char *)(this + 14) + 4));
  return this;
}

uint64_t BlueFin::GlPeNmeaGsvSatsNum::OutputNmeaSignalID(uint64_t a1, int a2)
{
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      BOOL v2 = a2 == 1;
      goto LABEL_3;
    case 5:
      BOOL v2 = a2 == 7;
      goto LABEL_3;
    case 6:
      BOOL v2 = a2 == 5;
LABEL_3:
      uint64_t result = !v2;
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

void BlueFin::GlPeNmeaGen::GetRequestParams(uint64_t a1, _DWORD *a2, char ***a3, unsigned char *a4)
{
  int v6 = a2[4];
  switch(v6)
  {
    case 0:
      *a3 = off_26B4339C8;
      int v8 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 184))(a2);
      uint64_t v9 = *a4;
      if (v9 <= 0xA)
      {
        *a4 = v9 + 1;
        *(_DWORD *)&a4[4 * v9 + 4] = v8;
      }
      int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 152))(a2);
      goto LABEL_12;
    case 1:
      *a3 = off_26B4339E8;
      uint64_t v11 = *a4;
      if (v11 <= 0xA)
      {
        int v12 = *((__int16 *)a2 + 11);
        *a4 = v11 + 1;
        *(_DWORD *)&a4[4 * v11 + 4] = v12;
      }
      int v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 152))(a2);
      uint64_t v14 = *a4;
      if (v14 <= 0xA)
      {
        *a4 = v14 + 1;
        *(_DWORD *)&a4[4 * v14 + 4] = v13;
      }
      int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 200))(a2);
      goto LABEL_12;
    case 2:
      char v15 = off_26B433968;
      goto LABEL_17;
    case 3:
      *a3 = off_26B433950;
      int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 184))(a2);
LABEL_12:
      uint64_t v16 = *a4;
      if (v16 > 0xA) {
        return;
      }
      *a4 = v16 + 1;
      char v17 = &a4[4 * v16];
      goto LABEL_70;
    case 4:
      signed int v18 = &_MergedGlobals;
      goto LABEL_40;
    case 5:
      signed int v18 = &off_26B433910;
      goto LABEL_40;
    case 6:
      char v15 = off_26B433980;
LABEL_17:
      *a3 = v15;
      uint64_t v19 = *a4;
      if (v19 > 0xA) {
        return;
      }
      int v20 = *((__int16 *)a2 + 11);
      goto LABEL_29;
    case 8:
      unsigned __int16 v61 = 0;
      unsigned int v60 = 0;
      unsigned int v62 = 0;
      int v63 = 16776961;
      memset(v53, 0, sizeof(v53));
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v59 = 0;
      (*(void (**)(_DWORD *, _OWORD *))(*(void *)a2 + 456))(a2, v53);
      if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 360))(a2))
      {
        *a3 = off_26B433A10;
        int v22 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 320))(a2);
        uint64_t v23 = *a4;
        if (v23 <= 0xA)
        {
          *a4 = v23 + 1;
          *(_DWORD *)&a4[4 * v23 + 4] = v22;
        }
        int v24 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 360))(a2);
        uint64_t v25 = *a4;
        if (v25 <= 0xA)
        {
          *a4 = v25 + 1;
          *(_DWORD *)&a4[4 * v25 + 4] = v24;
        }
        goto LABEL_68;
      }
      if ((v62 & 0x62) != 0)
      {
        GlCustomLog(20, "<FTCW> GlPeNmeaGen::GetRequestParams for SvId %d\n", v63);
        if ((v62 & 0x20) != 0) {
          BOOL v33 = v63 >= 0x34u && v63 < 0x42u;
        }
        else {
          BOOL v33 = 0;
        }
        if ((v62 & 0x40) != 0)
        {
          int v44 = v63 >= 0x8Bu ? v33 : 2;
          if (v63 >= 0x4Cu) {
            BOOL v33 = v44;
          }
        }
        *a3 = off_26B433A38;
        uint64_t v45 = *a4;
        if (v45 <= 0xA)
        {
          int v46 = *(_DWORD *)((unint64_t)v53 | (4 * v33));
          *a4 = v45 + 1;
          *(_DWORD *)&a4[4 * v45 + 4] = v46;
          if (v45 != 10)
          {
            int v47 = *(_DWORD *)(((unint64_t)v53 | (4 * v33)) + 0x28);
            *a4 = v45 + 2;
            *(_DWORD *)&a4[4 * v45 + 8] = v47;
            if (v45 <= 8)
            {
              int v48 = *(_DWORD *)(((unint64_t)v53 | (4 * v33)) + 0x50);
              *a4 = v45 + 3;
              *(_DWORD *)&a4[4 * v45 + 12] = v48;
              if (v45 != 8)
              {
                *a4 = v45 + 4;
                *(_DWORD *)&a4[4 * v45 + 16] = 1000;
                if (v45 <= 6)
                {
                  int v49 = v63;
                  *a4 = v45 + 5;
                  *(_DWORD *)&a4[4 * v45 + 20] = v49;
                }
              }
            }
          }
        }
LABEL_68:
        int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 368))(a2);
        unsigned int v50 = *a4;
        if (v50 >= 0xB) {
          return;
        }
        goto LABEL_69;
      }
      *a3 = off_26B433AC0;
      uint64_t v34 = *a4;
      if (v34 <= 0xA)
      {
        int v35 = v53[0];
        *a4 = v34 + 1;
        *(_DWORD *)&a4[4 * v34 + 4] = v35;
        if (v34 != 10)
        {
          int v36 = DWORD2(v54);
          *a4 = v34 + 2;
          *(_DWORD *)&a4[4 * v34 + 8] = v36;
          if (v34 <= 8)
          {
            int v37 = v57;
            *a4 = v34 + 3;
            *(_DWORD *)&a4[4 * v34 + 12] = v37;
            if (v34 != 8)
            {
              int v38 = v63;
              *a4 = v34 + 4;
              *(_DWORD *)&a4[4 * v34 + 16] = v38;
            }
          }
        }
      }
      int v39 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 368))(a2);
      uint64_t v40 = *a4;
      if (v40 <= 0xA)
      {
        BOOL v41 = &a4[4 * v40];
        LODWORD(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v40 + 1;
        *a4 = v40;
        *((_DWORD *)v41 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v39;
      }
      unsigned int v42 = v60;
      if (v60) {
        unsigned int v43 = 0xF4240 / v60;
      }
      else {
        unsigned int v43 = 0;
      }
      if (v40 <= 0xA)
      {
        char v51 = &a4[4 * v40];
        LODWORD(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v40 + 1;
        *a4 = v40;
        *((_DWORD *)v51 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v43;
      }
      unsigned int v52 = v42 * v61;
      if (v52) {
        unsigned int v52 = 0xF4240 / v52;
      }
      if (v40 > 0xA) {
        return;
      }
      unsigned int v50 = v40 + 1;
      *a4 = v40 + 1;
      *(_DWORD *)&a4[4 * v40 + 4] = v52;
      if (v40 == 10) {
        return;
      }
      int v10 = (v62 >> 2) & 3;
LABEL_69:
      *a4 = v50 + 1;
      char v17 = &a4[4 * v50];
LABEL_70:
      *((_DWORD *)v17 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10;
      return;
    case 9:
      signed int v18 = &off_26B433920;
      goto LABEL_40;
    case 10:
      *a3 = off_26B433998;
      uint64_t v19 = *a4;
      if (v19 > 0xA) {
        return;
      }
      int v20 = a2[22];
LABEL_29:
      *a4 = v19 + 1;
      *(_DWORD *)&a4[4 * v19 + 4] = v20;
      return;
    case 11:
      int v26 = (int *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 536))(a2);
      if (v26)
      {
        *a3 = off_26B433A78;
        uint64_t v27 = *a4;
        if (v27 <= 0xA)
        {
          int v28 = *v26;
          uint8x8_t v29 = &a4[4 * v27];
          LODWORD(v27) = v27 + 1;
          *a4 = v27;
          *((_DWORD *)v29 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v28;
        }
        for (uint64_t i = 1; i != 7; ++i)
        {
          if (v27 <= 0xA)
          {
            int v31 = v26[i];
            uint64_t v32 = &a4[4 * v27];
            LODWORD(v27) = v27 + 1;
            *a4 = v27;
            *((_DWORD *)v32 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v31;
          }
        }
      }
      return;
    case 12:
      signed int v18 = &off_26B433930;
      goto LABEL_40;
    case 13:
      signed int v18 = &off_26B433940;
LABEL_40:
      *a3 = v18;
      return;
    default:
      *a3 = off_26B4339B0;
      uint64_t v21 = *a4;
      if (v21 <= 0xA)
      {
        *a4 = v21 + 1;
        *(_DWORD *)&a4[4 * v21 + 4] = v6;
      }
      return;
  }
}

void BlueFin::GlMeas::init(BlueFin::GlMeas *this)
{
  uint64_t v2 = 0;
  *(_DWORD *)this = 0;
  uint64_t v3 = 100;
  do
  {
    uint64_t v4 = *((void *)this + 2188) + v2;
    v5[0] = 0;
    int v6 = -1;
    __int16 v7 = 575;
    BlueFin::GlSigMeas::init(v4, (uint64_t)v5);
    v2 += 144;
    --v3;
  }
  while (v3);
}

uint64_t BlueFin::GlMeSrdAidingMgr::GetAcqWindow(void *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, double a6)
{
  if ((*(uint64_t (**)(void))(*(void *)a1[2] + 976))(a1[2])) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)a1[2] + 992))(a1[2]);
  }
  int v13 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, double))(*(void *)*a1 + 40))(*a1, a3, v12, a6);
  if (v13) {
    int v14 = 17;
  }
  else {
    int v14 = 16;
  }
  uint64_t v15 = *a1;
  double v16 = a6 + 0.5;
  double v17 = fmod(v16, 4294967300.0);
  if (v16 <= 4294967300.0) {
    double v18 = v16;
  }
  else {
    double v18 = v17;
  }
  double v19 = v18;
  if (v18 < -4294967300.0) {
    double v19 = -fmod(-v18, 4294967300.0);
  }
  if (v19 < 0.0) {
    signed int v20 = --v19;
  }
  else {
    signed int v20 = v19;
  }
  int v46 = v14;
  int v21 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, int *, uint64_t, uint64_t, double, double, double))(*(void *)v15 + 24))(v15, a3, a2, &v46, a4, a5, (double)v20, 0.0, 0.0);
  LODWORD(v22) = *((_DWORD *)a3 + 1);
  if (v13 & v21)
  {
    uint64_t result = 1;
    if ((v22 & 0x80000000) != 0) {
      return result;
    }
  }
  else
  {
    if ((v22 - 1) < 2 || BlueFin::GlSvId::s_aucSvId2gnss[*a3] == 5)
    {
      double v24 = (*(double (**)(void))(*(void *)a1[2] + 856))(a1[2]);
      double v25 = (*(double (**)(void))(*(void *)a1[2] + 872))();
      uint64_t v26 = *a1;
      if (v18 < -4294967300.0) {
        double v18 = -fmod(-v18, 4294967300.0);
      }
      if (v18 < 0.0) {
        signed int v27 = --v18;
      }
      else {
        signed int v27 = v18;
      }
      int v45 = 32;
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, int *, uint64_t, uint64_t, double, double, double))(*(void *)v26 + 24))(v26, a3, a2, &v45, a4, a5, (double)v27, v24, v25);
      int v28 = (*(uint64_t (**)(void))(*(void *)a1[2] + 976))();
      float v29 = 1.5;
      if (v28) {
        float v29 = 4.0;
      }
      if (*((unsigned __int16 *)a3 + 4) >= 0x23Fu)
      {
        unsigned int v43 = "IsValid()";
        DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
        int v44 = 806;
      }
      else
      {
        uint64_t v30 = BlueFin::GlSvId::s_aucSvId2gnss[*a3];
        uint64_t v22 = *((int *)a3 + 1);
        int v31 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v22 + v30];
        if (v31)
        {
          unsigned int v32 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v22 - v22 + v30];
          if (v32)
          {
            BOOL v33 = (float)(*(float *)(a2 + 64) * (float)(1000 * v31 / v32)) < v29;
            uint64_t result = *(float *)(a2 + 44) < 0.000000025 && v33;
            if ((v22 & 0x80000000) != 0) {
              return result;
            }
            goto LABEL_36;
          }
        }
        unsigned int v43 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
        int v44 = 814;
      }
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v44, v43);
    }
    uint64_t result = 0;
    if ((v22 & 0x80000000) != 0) {
      return result;
    }
  }
LABEL_36:
  unsigned __int8 v34 = *a3;
  if (v22)
  {
    unsigned int v35 = (v34 + 117);
    BOOL v36 = v35 >= 0xC1;
    if (v35 < 0xC1) {
      char v37 = 1;
    }
    else {
      char v37 = result ^ 1;
    }
    if (v36) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = result;
    }
    if ((v37 & 1) == 0) {
      uint64_t v38 = (*(unsigned __int8 *)(a2 + 33) >> 4) & 1;
    }
    if (v22 != 3) {
      return v38;
    }
    if ((v34 - 1) < 0x20u)
    {
      if (!v38) {
        return 0;
      }
      return (*(unsigned __int8 *)(a2 + 33) >> 5) & 1;
    }
    unsigned int v42 = (v34 - 76);
    if (v42 < 0xF6) {
      uint64_t result = v38;
    }
    else {
      uint64_t result = 0;
    }
    if (v42 >= 0xF6 && ((v38 ^ 1) & 1) == 0) {
      return (*(unsigned __int8 *)(a2 + 33) >> 5) & 1;
    }
  }
  else
  {
    unsigned int v39 = (v34 + 81);
    BOOL v40 = v39 >= 0xDC;
    if (v39 < 0xDC) {
      char v41 = 1;
    }
    else {
      char v41 = result ^ 1;
    }
    if (v40) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = result;
    }
    if ((v41 & 1) == 0) {
      return (*(unsigned __int8 *)(a2 + 33) >> 2) & 1;
    }
  }
  return result;
}

BOOL BlueFin::GlMeAcqWindowProvider::GetMeAcqWindow(uint64_t a1, const BlueFin::GlSignalId *a2, uint64_t a3, int *a4, uint64_t a5, unsigned char *a6, double a7, double a8, double a9)
{
  uint64_t v9 = *(void *)(a1 + 8) + 32;
  int v11 = *a4;
  return BlueFin::GlMeWinMgr::GetMeAcqWindow(v9, a2, a3, &v11, a5, a6, a7, a8, a9);
}

BOOL BlueFin::GlMeWinMgr::GetMeAcqWindow(uint64_t a1, const BlueFin::GlSignalId *a2, uint64_t a3, unsigned char *a4, uint64_t a5, unsigned char *a6, double a7, double a8, double a9)
{
  double CurrTimeLms = a7;
  uint64_t v17 = a1 + 9824;
  if (a7 == 0.0) {
    double CurrTimeLms = (double)BlueFin::GlMeMsmtMgr::GetCurrTimeLms(*(BlueFin::GlMeMsmtMgr **)(a1 + 8));
  }
  if (*(unsigned __int16 *)(v17 + 32) - 1 > 3 || *(unsigned __int8 *)(v17 + 34) - 1 >= 4)
  {
    *(unsigned char *)(v17 + 35) = 0;
    double v18 = (unsigned char *)(v17 + 35);
  }
  else
  {
    *(unsigned char *)(v17 + 35) = 1;
    double v18 = (unsigned char *)(v17 + 35);
    *(_DWORD *)a4 &= ~1u;
  }
  uint64_t v19 = *(unsigned __int8 *)a2;
  v222[0] = v19;
  int v223 = 0;
  __int16 v224 = 575;
  if ((v19 + 67) >= 0x44u)
  {
    uint64_t v20 = BlueFin::GlSvId::s_aucSvId2gnss[v19];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v20] == 255) {
      int v223 = -1;
    }
    else {
      __int16 v224 = BlueFin::GlSignalId::s_ausGnss2signalId[v20]
    }
           + v19
           - BlueFin::GlSvId::s_aucGnss2minSvId[v20];
  }
  if ((*a4 & 0x20) != 0) {
    int v21 = (const BlueFin::GlSignalId *)v222;
  }
  else {
    int v21 = a2;
  }
  SigMeas = BlueFin::GlMeMsmtMgr::GetSigMeas(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), v21, CurrTimeLms, 0);
  v210[0] = 0;
  int v211 = 7;
  char v212 = 0;
  long long v213 = xmmword_263BA9ED0;
  uint64_t v214 = 0;
  uint64_t v215 = 0;
  uint64_t v220 = 0;
  unint64_t v221 = 0xBF80000000000000;
  uint64_t v218 = 0;
  uint64_t v219 = 0;
  uint64_t v216 = 0;
  uint64_t v217 = 0;
  uint64_t v165 = a1 + 320;
  BlueFin::GlMeSatAidMgr::GetSatAid(a1 + 320, (unsigned __int8 *)a2, (uint64_t)v210, CurrTimeLms);
  double v24 = v23;
  if (v23)
  {
    double v25 = v23[4];
    double v26 = *((float *)v23 + 10);
  }
  else
  {
    double v25 = 0.0;
    double v26 = 1.79769313e308;
  }
  if (a6)
  {
    int v27 = *a6 != 0;
  }
  else
  {
    uint64_t v190 = 0;
    LODWORD(v20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    uint64_t v172 = 0x3FF0000000000000;
    double v28 = fmod(CurrTimeLms, 4294967300.0);
    if (CurrTimeLms <= 4294967300.0) {
      double v28 = CurrTimeLms;
    }
    if (v28 < -4294967300.0) {
      double v28 = -fmod(-v28, 4294967300.0);
    }
    if (v28 < 0.0) {
      unsigned int v29 = --v28;
    }
    else {
      unsigned int v29 = v28;
    }
    int CbGoodQuality = BlueFin::GlMeMiniKF::mskfGetCbGoodQuality(a1 + 9312, v29, (double *)&v190, &v201, (double *)&v172, 0);
    unsigned int v31 = *(unsigned __int8 *)a2;
    int v27 = CbGoodQuality;
    if (v31 >= 0x34)
    {
      int v27 = v31 > 0x41 ? CbGoodQuality : 0;
      if (v31 <= 0x41 && ((CbGoodQuality ^ 1) & 1) == 0) {
        int v27 = v201 >> 7;
      }
    }
  }
  int v164 = v27;
  double v32 = 0.0;
  if (!v24 || (unsigned int v33 = *(unsigned __int8 *)a2, v33 < 0x34))
  {
    int v36 = 0;
LABEL_47:
    int v37 = 0;
    goto LABEL_48;
  }
  if (v33 <= 0x41 && *(unsigned char *)v17)
  {
    LOBYTE(v19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    HIDWORD(v19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 7;
    char v191 = 0;
    long long v192 = xmmword_263BA9ED0;
    uint64_t v193 = 0;
    uint64_t v194 = 0;
    uint64_t v199 = 0;
    unint64_t v200 = 0xBF80000000000000;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    uint64_t v195 = 0;
    uint64_t v196 = 0;
    BlueFin::GlMeSatAidMgr::GetSatAid(v165, (unsigned __int8 *)(a1 + 9808), (uint64_t)&v190, CurrTimeLms);
    if (!v34 || *((_DWORD *)v24 + 3) == 4 || *(_DWORD *)(v34 + 12) == 4) {
      goto LABEL_81;
    }
    double v35 = *(double *)(a1 + 9816) - CurrTimeLms;
    if (v35 < 0.0) {
      double v35 = -v35;
    }
    if (v35 >= 180000.0)
    {
LABEL_81:
      int v36 = 0;
    }
    else
    {
      int v36 = 0;
      if (*(float *)(v34 + 40) < 0.001 && v26 < 0.001)
      {
        double v32 = (*(double *)(v34 + 32) - v25) * 1000.0;
        int v36 = 1;
      }
    }
    LOBYTE(v33) = *(unsigned char *)a2;
  }
  else
  {
    int v36 = 0;
  }
  if ((v33 + 117) > 0x23u) {
    goto LABEL_47;
  }
  if (!*(unsigned char *)(v17 + 24)) {
    goto LABEL_47;
  }
  LOBYTE(v19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  HIDWORD(v19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 7;
  char v191 = 0;
  long long v192 = xmmword_263BA9ED0;
  uint64_t v193 = 0;
  uint64_t v194 = 0;
  uint64_t v199 = 0;
  unint64_t v200 = 0xBF80000000000000;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  uint64_t v195 = 0;
  uint64_t v196 = 0;
  BlueFin::GlMeSatAidMgr::GetSatAid(v165, (unsigned __int8 *)(a1 + 9832), (uint64_t)&v190, CurrTimeLms);
  if (!v66 || *((_DWORD *)v24 + 3) == 4 || *(_DWORD *)(v66 + 12) == 4) {
    goto LABEL_47;
  }
  double v67 = *(double *)(a1 + 9840) - CurrTimeLms;
  if (v67 < 0.0) {
    double v67 = -v67;
  }
  if (v67 >= 180000.0) {
    goto LABEL_47;
  }
  int v37 = 0;
  if (*(float *)(v66 + 40) < 0.001 && v26 < 0.001)
  {
    double v32 = (*(double *)(v66 + 32) - v25) * 1000.0;
    int v37 = 1;
  }
LABEL_48:
  uint64_t v201 = &unk_270EBF258;
  uint64_t v202 = 0;
  uint64_t v203 = 0x36A7C5AC00000000;
  uint64_t v204 = 0;
  uint64_t v206 = 0;
  float v205 = 3.4028e38;
  int v207 = 2139095039;
  uint64_t v208 = 0;
  uint64_t v209 = 0x36A7C5AC7F7FFFFFLL;
  int v163 = v37;
  if (a5)
  {
    uint64_t v38 = *(void *)(a5 + 16);
    uint64_t v202 = *(void *)(a5 + 8);
    uint64_t v203 = v38;
    uint64_t v204 = *(void *)(a5 + 24);
    float v39 = *(float *)(a5 + 32);
    uint64_t v206 = *(void *)(a5 + 40);
    LODWORD(v38) = *(_DWORD *)(a5 + 48);
    float v205 = v39;
    int v207 = v38;
    uint64_t v40 = *(void *)(a5 + 64);
    uint64_t v208 = *(void *)(a5 + 56);
    uint64_t v209 = v40;
    goto LABEL_58;
  }
  if (CurrTimeLms > 0.0)
  {
    double v41 = 0.5;
LABEL_56:
    uint64_t v42 = (int)(CurrTimeLms + v41);
    goto LABEL_57;
  }
  if (CurrTimeLms < 0.0)
  {
    double v41 = -0.5;
    goto LABEL_56;
  }
  uint64_t v42 = 0;
LABEL_57:
  BlueFin::GlMeClkModMgr::GetClkMod((BlueFin::GlMeClkModMgr *)(a1 + 144), (BlueFin::GlMeClkMod *)&v201, v42);
LABEL_58:
  BlueFin::GlMeAcqWinComputer::GlMeAcqWinComputer((uint64_t)&v190, (uint64_t)SigMeas, (uint64_t)v24, (uint64_t)&v201, a1 + 16);
  uint64_t v172 = (uint64_t)&off_270EBF450;
  char v173 = 0;
  int v174 = -1;
  __int16 v175 = 575;
  uint64_t v176 = 0;
  int v177 = 0;
  long long v178 = xmmword_263BABE60;
  int v179 = 2139095039;
  double v180 = 0.0;
  int v181 = 2139095039;
  __int16 v182 = 0;
  double v183 = 1.79769313e308;
  int v184 = -1;
  unsigned __int16 v185 = -1;
  uint64_t v187 = 0;
  uint64_t v188 = 0;
  uint64_t v186 = 0;
  int v189 = 0;
  if ((*(_DWORD *)a4 & 0x20) != 0) {
    unsigned int v43 = (const BlueFin::GlSignalId *)v222;
  }
  else {
    unsigned int v43 = a2;
  }
  int IsDspNavBitQuality = BlueFin::GlMeMsmtMgr::IsDspNavBitQuality(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), v43);
  int v45 = v202 & 0x84;
  BOOL v46 = *(unsigned __int16 *)(v17 + 32) - 1 <= 3 && *(unsigned __int8 *)(v17 + 34) - 1 < 4;
  *double v18 = v46;
  BlueFin::GlMeAcqWinComputer::ComputeAcqWin(&v190, (uint64_t)&v172, a4, IsDspNavBitQuality, v45 != 0, v46, (unsigned __int8 *)a2, CurrTimeLms, *(double *)(a1 + 120));
  LODWORD(v188) = *(_DWORD *)(a1 + 9120);
  if ((SigMeas[12] & 0x20) != 0) {
    v177 |= 0x100u;
  }
  float v171 = 3.4028e38;
  unsigned int v49 = *(unsigned __int8 *)a2;
  BOOL v50 = v49 > 0x33;
  if (v49 > 0x33)
  {
    unsigned __int16 v185 = -1;
    int v184 = -1;
    if (v49 > 0x41)
    {
      BOOL v50 = 0;
      long long v56 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6;
      int v57 = v164;
      goto LABEL_119;
    }
    unsigned __int8 v170 = -1;
    char v51 = v36 & v164;
    if ((v36 & v164) == 1)
    {
      BlueFin::GlMeSatAidMgr::GetSatAid(v165, (unsigned __int8 *)(a1 + 9808), 0, CurrTimeLms);
      long long v56 = "meManager::SetCurrentAsicLms(%u)  TimeSources:{";
      double v52 = (v32 + *(double *)(a1 + 9816)) * 0.001;
      double v54 = 1.0 - *(float *)(v53 + 44);
      if (v180 >= v52) {
        double v55 = fmod((v180 - v52) * v54, 2.0);
      }
      else {
        double v55 = 2.0 - fmod((v52 - v180) * v54, 2.0);
      }
      int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(a2);
      if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
      {
        char v155 = "IsValid()";
        int v156 = 678;
        DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
      }
      else
      {
        if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                   - *((int *)a2 + 1)
                                                                   + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
        {
          double v71 = v55
              / ((double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]]
                        * EpochPerSymbol)
               * 0.001);
          if (v71 <= 0.0)
          {
            if (v71 >= 0.0)
            {
              LOBYTE(v69) = 0;
LABEL_104:
              char v68 = 0;
              goto LABEL_105;
            }
            double v72 = -0.5;
          }
          else
          {
            double v72 = 0.5;
          }
          int v69 = (int)(v71 + v72);
          goto LABEL_104;
        }
        char v155 = "ucMsPerEpoch != 0";
        int v156 = 685;
        DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      }
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v156, v155);
    }
    if ((v164 & 1) != 0
      || (float v167 = 0.0,
          AidSysTuint64_t m = BlueFin::GlMeSatAidMgr::GetAidSysTm(v165, &v167, 1, a5, v180 * 1000.0, 1000.0, v48),
          !v24))
    {
      char v68 = 0;
      LOBYTE(v69) = -1;
      long long v56 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6;
      goto LABEL_105;
    }
    double v59 = AidSysTm;
    long long v56 = "meManager::SetCurrentAsicLms(%u)  TimeSources:{";
    if ((float)(v167 + *((float *)v24 + 10)) >= 0.005)
    {
      char v68 = 0;
      LOBYTE(v69) = -1;
      goto LABEL_105;
    }
    double v60 = v24[4];
    float v61 = *((float *)v24 + *((int *)a2 + 1) + 14);
    int v62 = BlueFin::GlSignalId::GetEpochPerSymbol(a2);
    if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
    {
      double v161 = "IsValid()";
      int v162 = 678;
      DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    }
    else
    {
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                 - *((int *)a2 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
      {
        int v63 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                                     - *((int *)a2 + 1)
                                                                                     + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]];
        double v64 = fmod(v59 + v60 + v61 / 299792458.0, 2.0) / ((double)(v63 * v62) * 0.001);
        if (v64 <= 0.0)
        {
          if (v64 >= 0.0)
          {
            LOBYTE(v69) = 0;
LABEL_175:
            char v68 = 1;
LABEL_105:
            GlnsStrPhsInSyuint64_t m = BlueFin::GlMeMsmtMgr::GetGlnsStrPhsInSym(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), (unsigned __int8 *)a2, (uint64_t)&v172, &v170);
            if ((v51 & 1) == 0)
            {
              if (GlnsStrPhsInSym)
              {
                LOBYTE(v69) = v170;
              }
              else if ((v68 & 1) == 0)
              {
                LOBYTE(v69) = -1;
                LOBYTE(v184) = -1;
                if ((v177 & 0x80) != 0) {
                  goto LABEL_111;
                }
                goto LABEL_115;
              }
            }
            LOBYTE(v184) = v69;
            if ((_BYTE)v69 == 0xFF)
            {
              LOBYTE(v69) = -1;
              if ((v177 & 0x80) != 0) {
                goto LABEL_111;
              }
            }
            else
            {
              v177 |= 0x80u;
              if (v69)
              {
LABEL_111:
                if ((v69 + 1) <= 0xC7u) {
                  char v74 = v69 + 1;
                }
                else {
                  char v74 = v69 + 57;
                }
                LOBYTE(v184) = v74;
                double v47 = v180;
                double v180 = v180 + (float)((float)(1.0 - *((float *)&v178 + 1)) * 0.01);
              }
            }
LABEL_115:
            unsigned int v49 = *(unsigned __int8 *)a2;
            goto LABEL_116;
          }
          double v65 = -0.5;
        }
        else
        {
          double v65 = 0.5;
        }
        int v69 = (int)(v64 + v65);
        goto LABEL_175;
      }
      double v161 = "ucMsPerEpoch != 0";
      int v162 = 685;
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v162, v161);
  }
  unsigned __int16 v185 = -1;
  int v184 = -1;
  long long v56 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6;
LABEL_116:
  int v57 = v164;
  if (!v49) {
    goto LABEL_206;
  }
  if (v49 < 0x21) {
    goto LABEL_120;
  }
  if (v49 < 0x42) {
    goto LABEL_178;
  }
LABEL_119:
  if (v49 > 0x4B)
  {
    if ((v49 + 117) > 0x23u) {
      goto LABEL_178;
    }
    if ((*a4 & 0x20) != 0 && *((int *)a2 + 1) >= 1) {
      double v180 = a8 / 299792458.0 + v180;
    }
    LOBYTE(v75) = BYTE1(v184);
    unsigned __int8 v170 = BYTE1(v184);
    int v76 = v163 & v57;
    if ((v163 & v57) != 1) {
      goto LABEL_144;
    }
    BlueFin::GlMeSatAidMgr::GetSatAid(v165, (unsigned __int8 *)(a1 + 9832), 0, CurrTimeLms);
    double v77 = v32 + *(double *)(a1 + 9840);
    double v78 = *((double *)v56 + 209);
    double v79 = v77 * v78;
    double v81 = 1.0 - *(float *)(v80 + 44);
    if (v180 >= v79) {
      double v82 = fmod((v180 - v79) * v81, 0.1);
    }
    else {
      double v82 = 0.1 - fmod((v79 - v180) * v81, 0.1);
    }
    int v83 = BlueFin::GlSignalId::GetEpochPerSymbol(a2);
    if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
    {
      double v159 = "IsValid()";
      int v160 = 678;
      DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    }
    else
    {
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                 - *((int *)a2 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
      {
        double v84 = v82
            / ((double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]]
                      * v83)
             * v78);
        if (v84 <= 0.0)
        {
          if (v84 >= 0.0)
          {
            LOBYTE(v75) = 0;
            goto LABEL_144;
          }
          double v85 = -0.5;
        }
        else
        {
          double v85 = 0.5;
        }
        int v75 = (int)(v84 + v85);
LABEL_144:
        GalSecCodePhsInSyuint64_t m = BlueFin::GlMeMsmtMgr::GetGalSecCodePhsInSym(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), a2, (const BlueFin::GlMeAcqWin *)&v172, &v170);
        unsigned __int8 v88 = v170;
        if (!GalSecCodePhsInSym) {
          unsigned __int8 v88 = -1;
        }
        if (v76) {
          unsigned __int8 v88 = v75;
        }
        BYTE1(v184) = v88;
        double v89 = v180 * 1000.0;
        double v90 = BlueFin::GlMeSatAidMgr::GetAidSysTm(v165, &v171, v50, (uint64_t)&v201, v180 * 1000.0, 1000.0, v87);
        if (v24)
        {
          double v91 = v24[4];
          float v92 = *((float *)v24 + *((int *)a2 + 1) + 14);
          uint64_t v93 = *(unsigned __int8 *)a2;
          LOBYTE(v167) = v93;
          int v168 = 0;
          __int16 v169 = 575;
          if ((v93 + 67) >= 0x44u)
          {
            uint64_t v94 = BlueFin::GlSvId::s_aucSvId2gnss[v93];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v94] == 255) {
              int v168 = -1;
            }
            else {
              __int16 v169 = BlueFin::GlSignalId::s_ausGnss2signalId[v94]
            }
                   + v93
                   - BlueFin::GlSvId::s_aucGnss2minSvId[v94];
          }
          BlueFin::GlMeMsmtMgr::GetSigMeas(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)&v167, v89, 0);
          double v47 = 299792458.0;
          double v48 = v90 + v91;
          double v90 = v90 + v91 + v92 / 299792458.0;
        }
        if (BYTE1(v184) != 255) {
          v177 |= 0x400u;
        }
        if (!v24) {
          goto LABEL_177;
        }
        double v47 = v205;
        if (v205 >= 0.0005) {
          goto LABEL_177;
        }
        double v47 = v171;
        if (v171 >= 0.0005) {
          goto LABEL_177;
        }
        double v95 = v90 + 604800.0;
        if (v90 >= 0.0) {
          double v95 = v90;
        }
        double v96 = fmod(v95, 0.1);
        if (*((_DWORD *)a2 + 1)) {
          double v47 = *((double *)v56 + 209);
        }
        else {
          double v47 = 0.004;
        }
        double v97 = v96 / v47;
        if (v97 <= 0.0)
        {
          if (v97 >= 0.0)
          {
            LOBYTE(v98) = 0;
LABEL_176:
            BYTE1(v184) = v98;
            v177 |= 0x400u;
LABEL_177:
            unsigned int v49 = *(unsigned __int8 *)a2;
            goto LABEL_178;
          }
          double v47 = -0.5;
        }
        else
        {
          double v47 = 0.5;
        }
        int v98 = (int)(v97 + v47);
        goto LABEL_176;
      }
      double v159 = "ucMsPerEpoch != 0";
      int v160 = 685;
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v160, v159);
  }
LABEL_120:
  if ((*a4 & 0x20) != 0 && *((_DWORD *)a2 + 1) == 2)
  {
    double v47 = v180;
    double v180 = a8 / 299792458.0 + v180;
  }
LABEL_178:
  if (v49 - 76 > 0x3E) {
    goto LABEL_206;
  }
  uint64_t v99 = *((int *)a2 + 1);
  if (!v99) {
    goto LABEL_206;
  }
  double v100 = v180 * 1000.0;
  double v101 = BlueFin::GlMeSatAidMgr::GetAidSysTm(v165, &v171, v50, (uint64_t)&v201, v180 * 1000.0, v47, v48);
  if (v24)
  {
    double v102 = v101 + -14.0;
    double v103 = v102 >= 0.0 ? v102 : v102 + 604800.0;
    double v104 = v24[4];
    float v105 = *((float *)v24 + v99 + 14);
    LOBYTE(v167) = v49;
    int v168 = 0;
    __int16 v169 = 575;
    uint64_t v106 = BlueFin::GlSvId::s_aucSvId2gnss[v49];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v106] == 255) {
      int v168 = -1;
    }
    else {
      __int16 v169 = BlueFin::GlSignalId::s_ausGnss2signalId[v106]
    }
           + v49
           - BlueFin::GlSvId::s_aucGnss2minSvId[v106];
    BlueFin::GlMeMsmtMgr::GetSigMeas(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)&v167, v100, 0);
    if (v205 < 0.0005 && v171 < 0.0005)
    {
      double v107 = 0.1;
      if (*((_DWORD *)a2 + 1) != 2) {
        double v107 = 18.0;
      }
      double v108 = dbl_263BB3390[*((_DWORD *)a2 + 1) == 2];
      double v109 = fmod(v103 + v104 + v105 / 299792458.0, v107) / v108;
      if (v109 <= 0.0)
      {
        if (v109 >= 0.0)
        {
          LOWORD(v11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
LABEL_197:
          HIWORD(v184) = v111;
          v177 |= 0x1000u;
          goto LABEL_198;
        }
        double v110 = -0.5;
      }
      else
      {
        double v110 = 0.5;
      }
      int v111 = (int)(v109 + v110);
      goto LABEL_197;
    }
  }
LABEL_198:
  __int16 v112 = v177;
  if ((v177 & 0x1000) == 0
    && BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1)
                                                              - *((int *)a2 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]] == 13)
  {
    B1cL1cSecCodePhsInSyuint64_t m = BlueFin::GlMeMsmtMgr::GetB1cL1cSecCodePhsInSym(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), a2, (const BlueFin::GlMeAcqWin *)&v172, (unsigned __int16 *)&v184 + 1);
    __int16 v112 = v177;
    if (B1cL1cSecCodePhsInSym)
    {
      __int16 v112 = v177 | 0x1000;
      v177 |= 0x1000u;
    }
  }
  if ((v112 & 0x1000) == 0)
  {
    uint64_t v114 = *(unsigned __int8 *)a2;
    LOBYTE(v167) = v114;
    int v168 = 0;
    __int16 v169 = 575;
    if ((v114 + 67) >= 0x44u)
    {
      uint64_t v115 = BlueFin::GlSvId::s_aucSvId2gnss[v114];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v115] == 255) {
        int v168 = -1;
      }
      else {
        __int16 v169 = BlueFin::GlSignalId::s_ausGnss2signalId[v115]
      }
             + v114
             - BlueFin::GlSvId::s_aucGnss2minSvId[v115];
    }
    unsigned int v123 = BlueFin::GlMeMsmtMgr::GetSigMeas(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)&v167, v180 * 1000.0, 0);
    if (v123)
    {
      if ((~*((_DWORD *)v123 + 3) & 0x22) == 0)
      {
        int v124 = *((_DWORD *)a2 + 1);
        if ((*a4 & 0x20) != 0)
        {
          if (v124 == 2)
          {
            double v128 = a8 / 299792458.0;
            double v180 = a8 / 299792458.0 + v180 - a9 / 299792458.0;
            double v129 = *((double *)v123 + 7);
            uint64_t v125 = (double *)(v123 + 56);
            double v127 = a9 / 299792458.0 + v129;
            goto LABEL_227;
          }
          double v151 = *((double *)v123 + 7);
          uint64_t v125 = (double *)(v123 + 56);
          double v127 = a9 / 299792458.0 + v151;
        }
        else
        {
          double v126 = *((double *)v123 + 7);
          uint64_t v125 = (double *)(v123 + 56);
          double v127 = a9 / 299792458.0 + v126;
          if (v124 == 2)
          {
            double v128 = a8 / 299792458.0;
LABEL_227:
            double v127 = v127 - v128;
            long double v130 = 0.1;
            double v131 = *((double *)v56 + 209);
            goto LABEL_273;
          }
        }
        long double v130 = 18.0;
        double v131 = 0.01;
LABEL_273:
        *uint64_t v125 = v127;
        double v152 = fmod(v127, v130) / v131;
        if (v152 <= 0.0)
        {
          if (v152 >= 0.0)
          {
            LOWORD(v154) = 0;
LABEL_279:
            HIWORD(v184) = v154;
            v177 |= 0x1000u;
            goto LABEL_206;
          }
          double v153 = -0.5;
        }
        else
        {
          double v153 = 0.5;
        }
        int v154 = (int)(v152 + v153);
        goto LABEL_279;
      }
    }
  }
LABEL_206:
  double v116 = v180 * 1000.0;
  double v117 = BlueFin::GlMeSatAidMgr::GetAidSysTm(v165, &v171, v50, (uint64_t)&v201, v180 * 1000.0, 1000.0, v48);
  double v183 = v117;
  if (!v24) {
    goto LABEL_264;
  }
  unsigned int v118 = *(unsigned __int8 *)v24;
  if (v118 >= 0x34 && v118 <= 0x41 && v171 > 0.0005) {
    HIBYTE(v182) = 0;
  }
  LODWORD(v119) = *((_DWORD *)a2 + 1);
  double v120 = v117 + v24[4] + *((float *)v24 + (int)v119 + 14) / 299792458.0;
  double v183 = v120;
  uint64_t v121 = *(unsigned __int8 *)a2;
  if (v120 < 0.0)
  {
    double v120 = v120 + dbl_263BB33A0[(v121 - 52) < 0xE];
    double v183 = v120;
  }
  uint64_t v122 = BlueFin::GlSvId::s_aucSvId2gnss[v121];
  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (int)v119 - (int)v119 + v122] == 1
    && *((float *)v24 + 10) < 0.0000001
    && v171 < 0.0000001)
  {
    LOBYTE(v167) = v121;
    int v168 = 0;
    __int16 v169 = 575;
    if ((v121 + 67) >= 0x44u)
    {
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v122] == 255) {
        int v168 = -1;
      }
      else {
        __int16 v169 = BlueFin::GlSignalId::s_ausGnss2signalId[v122]
      }
             + v121
             - BlueFin::GlSvId::s_aucGnss2minSvId[v122];
    }
    BlueFin::GlMeMsmtMgr::GetSigMeas(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)&v167, v116, 0);
    if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
    {
      float v157 = "IsValid()";
      int v158 = 678;
      DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    }
    else
    {
      uint64_t v119 = *((int *)a2 + 1);
      uint64_t v132 = *(unsigned __int8 *)a2;
      uint64_t v122 = BlueFin::GlSvId::s_aucSvId2gnss[v132];
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v119 - v119 + v122])
      {
        double v133 = *((double *)v56 + 209);
        double v134 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v119 - v119 + v122]
             * v133;
        double v120 = v183;
        long double v135 = fmod(v183, v134);
        double v136 = (float)(1.0 - *((float *)&v178 + 1));
        double v137 = v180 + v136 * (v134 - v135);
        double v180 = v137;
        double v138 = vabdd_f64(v137, CurrTimeLms * v133);
        if (v138 > v134 * 0.5)
        {
          double v139 = (v134 * 0.5 + v138) / v134;
          double v140 = fmod(v139, 4294967300.0);
          if (v139 <= 4294967300.0) {
            double v140 = v139;
          }
          if (v140 < -4294967300.0) {
            double v140 = -fmod(-v140, 4294967300.0);
          }
          if (v140 < 0.0) {
            unsigned int v141 = --v140;
          }
          else {
            unsigned int v141 = v140;
          }
          double v142 = -1.0;
          if (v137 - CurrTimeLms * v133 >= 0.0) {
            double v142 = 1.0;
          }
          double v180 = v137 - v142 * (v134 * (double)v141 * v136);
        }
        v177 |= 0x800u;
        LODWORD(v12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v132;
        goto LABEL_243;
      }
      float v157 = "ucMsPerEpoch != 0";
      int v158 = 685;
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v158, v157);
  }
LABEL_243:
  if (v205 < 0.0005 && v171 < 0.0005)
  {
    unsigned int v143 = v121 - 1;
    unsigned int v144 = v121 - 66;
    BOOL v145 = v143 >= 0x20 && v144 >= 0xA;
    BOOL v146 = !v145;
    if (v119 == 3 && v146)
    {
      double v147 = fmod(v120, 18.0) / 0.01;
      if (v147 <= 0.0)
      {
        if (v147 >= 0.0)
        {
          LOWORD(v149) = 0;
LABEL_259:
          unsigned __int16 v185 = v149;
          v177 |= 0x2000u;
          goto LABEL_260;
        }
        double v148 = -0.5;
      }
      else
      {
        double v148 = 0.5;
      }
      int v149 = (int)(v147 + v148);
      goto LABEL_259;
    }
  }
LABEL_260:
  if ((v177 & 0x2000) == 0
    && BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (int)v119 - (int)v119 + v122] == 14
    && BlueFin::GlMeMsmtMgr::GetB1cL1cSecCodePhsInSym(*(BlueFin::GlMeMsmtMgr **)(a1 + 8), a2, (const BlueFin::GlMeAcqWin *)&v172, &v185))
  {
    v177 |= 0x2000u;
  }
LABEL_264:
  BlueFin::GlMeAcqWin::operator=(a3, (uint64_t)&v172);
  if ((const BlueFin::GlSignalId *)(a3 + 8) != a2)
  {
    *(unsigned char *)(a3 + 8) = *(unsigned char *)a2;
    *(_DWORD *)(a3 + 12) = *((_DWORD *)a2 + 1);
    *(_WORD *)(a3 + 16) = *((_WORD *)a2 + 4);
  }
  *(double *)(a3 + 24) = CurrTimeLms * *((double *)v56 + 209);
  if ((*a4 & 4) != 0 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(uint64_t, void, void))(*(void *)a3 + 24))(a3, 0, 0);
  }
  return v24 != 0;
}

double BlueFin::GlMeAcqWin::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
    *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(a2 + 80);
    *(unsigned char *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a2 + 81);
    *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
    *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
    double result = *(double *)(a2 + 108);
    *(double *)(a1 + 108) = result;
  }
  return result;
}

double BlueFin::GlMeSatAidMgr::GetAidSysTm(uint64_t a1, _DWORD *a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v7 = 8;
  if (a3) {
    uint64_t v7 = 24;
  }
  double v8 = *(double *)(a1 + v7);
  LODWORD(a7) = *(_DWORD *)(a1 + 36);
  double v9 = (double)*(unint64_t *)&a7;
  if (a2)
  {
    uint64_t v10 = 16;
    if (a3) {
      uint64_t v10 = 32;
    }
    *a2 = *(_DWORD *)(a1 + v10);
  }
  double v11 = (a5 - v9) / 1000.0;
  if (a4 && *(float *)(a4 + 20) < 0.00000001) {
    double v11 = v11 * (float)(1.0 - *(float *)(a4 + 16));
  }
  double result = v8 + v11;
  if (a3)
  {
    if (result < 0.0) {
      double result = result + 86400.0;
    }
    if (result >= 86400.0)
    {
      double v13 = -86400.0;
      return result + v13;
    }
  }
  else
  {
    if (result < 0.0) {
      double result = result + 604800.0;
    }
    if (result >= 604800.0)
    {
      double v13 = -604800.0;
      return result + v13;
    }
  }
  return result;
}

void BlueFin::GlMeSatAidMgr::GetSatAid(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double a4)
{
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = a1 + 8832;
  }
  uint64_t v7 = *(float **)(a1 + 8808);
  uint64_t v8 = 91;
  while (*(unsigned __int8 *)v7 != *a2)
  {
    v7 += 24;
    if (!--v8) {
      return;
    }
  }
  BlueFin::GlSatAid::operator=(v6, (uint64_t)v7);
  if (a4 > 0.0)
  {
    LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a1 + 36);
    double v11 = a4 - (double)v10;
    double v12 = v11 / 1000.0;
    int v13 = (int)(v11 + -0.5);
    if (v11 >= 0.0) {
      int v13 = 0;
    }
    if (v11 > 0.0) {
      int v13 = (int)(v11 + 0.5);
    }
    *(_DWORD *)(v9 + 20) += v13;
    float v14 = v12;
    *(float *)(v9 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(float *)(v9 + 40) + (float)(*(float *)(v9 + 48) * fabsf(v14));
    *(float *)(v9 + 48) = v7[12] + (float)(v14 * 3.6111e-11);
    if ((*(unsigned char *)(v9 + 24) & 0x20) != 0)
    {
      float v16 = *(float *)(v9 + 52);
      float v17 = *(float *)(v9 + 44) + (float)(v16 * v14);
      *(float *)(v9 + 44) = v17;
      double v15 = *(double *)(v9 + 32) + v17 * v12 + v12 * (v16 * 0.5) * v12;
    }
    else
    {
      double v15 = *(double *)(v9 + 32) + *(float *)(v9 + 44) * v12;
    }
    *(double *)(v9 + 32) = v15;
  }
}

char *BlueFin::GlMeMsmtMgr::GetSigMeas(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, double a3, int a4)
{
  uint64_t v8 = (char *)this + 240;
  BlueFin::GlSigMeas::init((uint64_t)this + 240, (uint64_t)a2);
  uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(this, a2, 1, 1);
  if (!MsmtSlotPtr) {
    return v8;
  }
  uint64_t v10 = MsmtSlotPtr;
  if ((*(unsigned char *)(MsmtSlotPtr + 84) & 0x10) == 0) {
    return v8;
  }
  if (*(unsigned __int8 *)(MsmtSlotPtr + 100) != *(unsigned __int8 *)a2
    || *(_DWORD *)(MsmtSlotPtr + 104) != *((_DWORD *)a2 + 1))
  {
    double v137 = "pMeDspMeas->otSignalId == rotSignalId";
    DeviceFaultNotify("glme_meas.cpp", 377, "GetSigMeas", (char)"pMeDspMeas->otSignalId == rotSignalId");
    double v138 = "glme_meas.cpp";
    int v139 = 377;
    goto LABEL_269;
  }
  *((_WORD *)this + 128) = *(unsigned __int8 *)(MsmtSlotPtr + 112);
  unsigned int v11 = *(_DWORD *)(MsmtSlotPtr + 140);
  if (v11 > 0xF || ((1 << v11) & 0x8300) == 0) {
    unsigned int v13 = *((_DWORD *)this + 63) & 0xFFFF7FFF;
  }
  else {
    unsigned int v13 = *((_DWORD *)this + 63) | 0x8000;
  }
  *((_DWORD *)this + 63) = v13;
  unsigned int v14 = v13 & 0xFFFFF7FF | (((*(_DWORD *)(MsmtSlotPtr + 84) >> 15) & 1) << 11);
  *((_DWORD *)this + 63) = v14;
  unsigned int v15 = v14 & 0xFFFEFFFF | (((*(_DWORD *)(MsmtSlotPtr + 84) >> 12) & 1) << 16);
  *((_DWORD *)this + 63) = v15;
  unsigned int v16 = (*(_DWORD *)(MsmtSlotPtr + 84) >> 4) & 0x40000 | ((v11 == 14) << 22) | v15 & 0xFFBBFFFF;
  *((_DWORD *)this + 63) = v16;
  double v149 = 0.0;
  *(void *)((char *)this + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(MsmtSlotPtr + 88);
  *((_DWORD *)this + 67) = *(_DWORD *)(MsmtSlotPtr + 96);
  *((_DWORD *)this + 68) = *(_DWORD *)(MsmtSlotPtr + 132);
  *((_DWORD *)this + 69) = *(_DWORD *)(MsmtSlotPtr + 136);
  if ((*(_DWORD *)(MsmtSlotPtr + 84) & 0x800080) != 0)
  {
    unsigned int v17 = v16 | 0x1000;
    *((_DWORD *)this + 63) = v17;
    if ((*(unsigned char *)(MsmtSlotPtr + 84) & 0x80) != 0)
    {
      v17 &= ~0x40u;
      *((_DWORD *)this + 63) = v17;
    }
    double v18 = -*(double *)(MsmtSlotPtr + 8);
    *((_DWORD *)this + 83) = *(_DWORD *)(MsmtSlotPtr + 60);
  }
  else
  {
    double v18 = -*(double *)(MsmtSlotPtr + 8);
    unsigned int v17 = v16 & 0xFFFFEFBF | 0x40;
    *((_DWORD *)this + 63) = v17;
  }
  double v19 = -*(double *)(MsmtSlotPtr + 120);
  if (*(unsigned char *)(MsmtSlotPtr + 87))
  {
    unsigned int v20 = v17 | 0x100000;
    *((_DWORD *)this + 89) = *(_DWORD *)(MsmtSlotPtr + 128);
  }
  else
  {
    unsigned int v20 = v17 & 0xFFEFFFFF;
  }
  *((_DWORD *)this + 63) = v20;
  *((double *)this + 45) = v19;
  double v21 = (v18 + 262144.0) * 0.00000190734863;
  double v22 = floor(v21);
  double v23 = ceil(v21);
  if (v21 < 0.0) {
    double v22 = v23;
  }
  double v24 = (v21 - v22) * 524288.0;
  if (v24 < 0.0) {
    double v24 = v24 + 524288.0;
  }
  *((_DWORD *)this + 88) = *(_DWORD *)(MsmtSlotPtr + 44);
  *((double *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v24 + -262144.0;
  int v25 = *(_DWORD *)(MsmtSlotPtr + 84);
  if ((v25 & 0x40000) != 0)
  {
    v20 |= 0x4000u;
    *((_DWORD *)this + 63) = v20;
    *((_DWORD *)this + 87) = *(_DWORD *)(MsmtSlotPtr + 40);
    int v25 = *(_DWORD *)(MsmtSlotPtr + 84);
  }
  if ((v25 & 0x100) != 0)
  {
    *((void *)this + 35) = *(void *)(MsmtSlotPtr + 48);
    v20 |= 0x100u;
    *((_DWORD *)this + 63) = v20;
    int v25 = *(_DWORD *)(MsmtSlotPtr + 84);
  }
  if ((v25 & 4) != 0)
  {
    *((_DWORD *)this + 86) = (int)(*(double *)(MsmtSlotPtr + 16) * 1000.0);
    v20 |= 0x400u;
    *((_DWORD *)this + 63) = v20;
    int v25 = *(_DWORD *)(MsmtSlotPtr + 84);
  }
  if ((v25 & 0x40) != 0)
  {
    *((_DWORD *)this + 84) = *(_DWORD *)(MsmtSlotPtr + 32);
    *((_DWORD *)this + 85) = *(_DWORD *)(MsmtSlotPtr + 56);
    *((void *)this + 46) = *(void *)(MsmtSlotPtr + 148);
  }
  if ((v25 & 0x2000) != 0)
  {
    v20 |= 0x80u;
    *((_DWORD *)this + 63) = v20;
    int v25 = *(_DWORD *)(MsmtSlotPtr + 84);
  }
  double v26 = *(double *)(MsmtSlotPtr + 24);
  if ((v25 & 0x20) != 0)
  {
    unsigned int v27 = v20 | 2;
    double v26 = v26 + *(float *)(MsmtSlotPtr + 64);
  }
  else
  {
    unsigned int v27 = v20 & 0xFFFFFFFD;
  }
  *((_DWORD *)this + 63) = v27;
  *((_DWORD *)this + 82) = *(_DWORD *)(MsmtSlotPtr + 68);
  if (*(unsigned __int16 *)(*((void *)this + 24) + 9856) - 1 > 3
    || *(unsigned __int8 *)(*((void *)this + 24) + 9858) - 1 > 3)
  {
    *(unsigned char *)(*((void *)this + 24) + 9859) = 0;
    unsigned int v29 = *(_DWORD *)(MsmtSlotPtr + 164);
    if (v29 == -1)
    {
      int v32 = *(_DWORD *)(MsmtSlotPtr + 84);
      goto LABEL_60;
    }
    float v30 = a3 * 0.001;
    float v31 = (double)v29 * 0.001;
    float v28 = v30 - v31;
  }
  else
  {
    *(unsigned char *)(*((void *)this + 24) + 9859) = 1;
    float v28 = 0.0;
  }
  int v32 = *(_DWORD *)(MsmtSlotPtr + 84);
  BOOL v33 = v28 > 600.0 || a4 == 0;
  if (!v33 && (*(_DWORD *)(MsmtSlotPtr + 84) & 0x608) == 0x608
    || (v28 <= 600.0 ? (BOOL v34 = a4 == 0) : (BOOL v34 = 0), v34 ? (v35 = (~v32 & 0x408) == 0) : (v35 = 0), v35))
  {
    if (*(unsigned __int8 *)(MsmtSlotPtr + 100) - 52 > 0xD || (v32 & 0x80000) != 0) {
      unsigned int v36 = v27 | 8;
    }
    else {
      unsigned int v36 = v27 & 0xFFFFFFF7;
    }
    unsigned int v27 = v36 | 4;
    *((_DWORD *)this + 63) = v27;
    goto LABEL_61;
  }
LABEL_60:
  if ((v32 & 0x408) == 8)
  {
    double v137 = "0";
    DeviceFaultNotify("glme_meas.cpp", 633, "GetSigMeas", (char)"0");
    double v138 = "glme_meas.cpp";
    int v139 = 633;
    goto LABEL_269;
  }
LABEL_61:
  if ((v27 & 0x100) == 0
    || (LOBYTE(v147) = 0, *((_DWORD *)this + 63) = v27 & 0xFFFFFFCF, unsigned int v37 = *(unsigned __int8 *)a2, !*(unsigned char *)a2))
  {
    unsigned int v56 = -1;
    double v38 = 0.0;
    goto LABEL_140;
  }
  double v38 = 0.0;
  if (v37 < 0x21 || v37 - 66 <= 9)
  {
    uint64_t v39 = BlueFin::GlMeSlots::GpsFrameMgr(MsmtSlotPtr, (unsigned __int8 *)a2);
    int TowMeas = BlueFin::GlMeFrameMgr::GetTowMeas(v39, (uint64_t)&v147);
    if (TowMeas)
    {
      if (*(unsigned __int8 *)a2 != LOBYTE(v147))
      {
        double v137 = "rotSignalId.GetSvId() == stTowMeas.otSvId";
        DeviceFaultNotify("glme_meas.cpp", 705, "GetSigMeas", (char)"rotSignalId.GetSvId() == stTowMeas.otSvId");
        double v138 = "glme_meas.cpp";
        int v139 = 705;
        goto LABEL_269;
      }
      int v43 = TowMeas;
      LODWORD(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)this + 70);
      LODWORD(v42) = HIDWORD(v147);
      double v38 = ((double)v41 - (double)v42) * 0.001 + (double)(v148 + 604800);
      double v149 = v38;
      SubBit__n128 Time = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v149, a2, 0);
      double v45 = fmod(SubBitTime, 4294967300.0);
      if (SubBitTime > 4294967300.0) {
        SubBit__n128 Time = v45;
      }
      double v46 = SubBitTime;
      if (SubBitTime < -4294967300.0) {
        double v46 = -fmod(-SubBitTime, 4294967300.0);
      }
      if (v46 < 0.0) {
        unsigned int v47 = --v46;
      }
      else {
        unsigned int v47 = v46;
      }
      if (v47)
      {
        if (SubBitTime < -4294967300.0) {
          SubBit__n128 Time = -fmod(-SubBitTime, 4294967300.0);
        }
        if (SubBitTime < 0.0) {
          unsigned int v48 = --SubBitTime;
        }
        else {
          unsigned int v48 = SubBitTime;
        }
        int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)(v10 + 100));
        if (*(unsigned __int16 *)(v10 + 108) >= 0x23Fu)
        {
          double v137 = "IsValid()";
          DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
          double v138 = "glsignalid.h";
          int v139 = 678;
          goto LABEL_269;
        }
        if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(v10 + 104)
                                                                    - *(int *)(v10 + 104)
                                                                    + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v10 + 100)]])
        {
          double v137 = "ucMsPerEpoch != 0";
          DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
          double v138 = "glsignalid.h";
          int v139 = 685;
          goto LABEL_269;
        }
        double v50 = (double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(v10 + 104) - *(int *)(v10 + 104) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v10 + 100)]]
                     * EpochPerBit)
            * 0.001;
        double v51 = fmod(v50, 4294967300.0);
        if (v50 <= 4294967300.0) {
          double v51 = v50;
        }
        if (v51 < -4294967300.0) {
          double v51 = -fmod(-v51, 4294967300.0);
        }
        unsigned int v52 = v51 < 0.0 ? --v51 : v51;
        if (v48 != v52)
        {
          double v137 = "REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime)==REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPerBit()*SEC_PER_MS)";
          DeviceFaultNotify("glme_meas.cpp", 722, "GetSigMeas", (char)"REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime)==REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPerBit()*SEC_PER_MS)");
          double v138 = "glme_meas.cpp";
          int v139 = 722;
          goto LABEL_269;
        }
      }
      int v53 = *((_DWORD *)this + 63);
      *((_DWORD *)this + 63) = v53 | 0x10;
      if (v43 == 2) {
        *((_DWORD *)this + 63) = v53 | 0x30;
      }
    }
  }
  unsigned int v54 = *(unsigned __int8 *)a2;
  if (v54 < 0x34)
  {
    unsigned int v56 = -1;
    goto LABEL_140;
  }
  if (v54 > 0x41)
  {
    unsigned int v56 = -1;
    goto LABEL_204;
  }
  uint64_t v146 = 0;
  int v144 = 0;
  int v145 = 0;
  double v55 = (BlueFin::GlMeGlonassFrameMgr *)BlueFin::GlMeSlots::GlonassFrameMgr(v10, (unsigned __int8 *)a2);
  unsigned int v56 = -1;
  if (BlueFin::GlMeGlonassFrameMgr::GetSystemTime(v55, (_DWORD *)&v146 + 1, &v146, (unsigned char *)&v145 + 3, (unsigned char *)&v145 + 2, (unsigned char *)&v145 + 1, &v145, &v144)&& HIBYTE(v145))
  {
    unsigned int v56 = v146;
    int v57 = *((_DWORD *)this + 70) - HIDWORD(v146);
    if ((_BYTE)v145)
    {
      double v38 = fmod((double)(v57 + (int)v146), 30000.0) * 0.001;
      double v149 = v38;
      *((_DWORD *)this + 63) |= 0x10u;
    }
    if (BYTE2(v145))
    {
      uint64_t v58 = (int)v56 + (uint64_t)v57 + 86400000;
      HIDWORD(v59) = 1062232653;
      double v38 = (double)v58 * 0.001;
      double v149 = v38;
      if (!BYTE1(v145))
      {
        uint64_t v60 = *((void *)this + 24);
        float v61 = *(float *)(v60 + 352);
        if (v61 < 43200.0)
        {
          LODWORD(v59) = *(_DWORD *)(v60 + 356);
          float v62 = v26 + (double)v59 * -0.001;
          float v63 = *(double *)(v60 + 344) + (float)((float)(*(float *)(v10 + 32) + 1.0) * v62);
          float v141 = fabsf(v62);
          float v64 = *(float *)(v10 + 56);
          float v65 = fmodf(v63, 86400.0);
          if (v63 < 86400.0) {
            float v65 = v63;
          }
          if (v65 < 0.0) {
            float v65 = 86400.0 - fmodf(-v65, 86400.0);
          }
          float v66 = v61 + (float)(v141 * v64);
          double v67 = v65 * 1000.0;
          double v68 = fmod(v67, 4294967300.0);
          if (v67 <= 4294967300.0) {
            double v68 = v67;
          }
          if (v68 < -4294967300.0) {
            double v68 = -fmod(-v68, 4294967300.0);
          }
          if (v68 < 0.0) {
            unsigned int v69 = --v68;
          }
          else {
            unsigned int v69 = v68;
          }
          double v70 = fmod(v66 * 1000.0, 4294967300.0);
          if (v66 * 1000.0 <= 4294967300.0) {
            double v70 = v66 * 1000.0;
          }
          if (v70 < -4294967300.0) {
            double v70 = -fmod(-v70, 4294967300.0);
          }
          if (v70 < 0.0) {
            unsigned int v71 = --v70;
          }
          else {
            unsigned int v71 = v70;
          }
          unsigned int v142 = v71;
          double v72 = fmod((double)v58, 4294967300.0);
          if (v58 <= 0x100000000) {
            double v72 = (double)v58;
          }
          if (v72 < -4294967300.0) {
            double v72 = -fmod(-v72, 4294967300.0);
          }
          if (v72 < 0.0) {
            unsigned int v73 = --v72;
          }
          else {
            unsigned int v73 = v72;
          }
          if (v73 > 0x5265BFF) {
            v73 -= 86400000;
          }
          unsigned int v74 = v73 - v69;
          BOOL v75 = v69 >= v73;
          unsigned int v76 = v69 - v73;
          if (!v75) {
            unsigned int v76 = v74;
          }
          if (v76 > 0x2932E00) {
            unsigned int v76 = 86400000 - v76;
          }
          if (v76 >= 10 * v142 + 880) {
            goto LABEL_135;
          }
        }
        BYTE1(v145) = 1;
      }
      *((_DWORD *)this + 63) |= 0x20u;
LABEL_135:
      if (BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]]])
      {
        int v77 = v144;
        if (v144)
        {
          int v78 = *((_DWORD *)this + 63);
          *((_DWORD *)this + 63) = v78 | 0x20000;
          if (v77 == 2)
          {
            *((_DWORD *)this + 63) = v78 | 0x220000;
            *((double *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((double *)this + 40) + BlueFin::GlSignalId::GetRfCarrierWavelengthM(a2) * -0.5;
          }
          else
          {
            *((_DWORD *)this + 63) = v78 & 0xFFDDFFFF | 0x20000;
          }
        }
      }
    }
  }
  unsigned int v54 = *(unsigned __int8 *)a2;
LABEL_204:
  if (v54 < 0x4C) {
    goto LABEL_140;
  }
  if (v54 <= 0x8A)
  {
    uint64_t v99 = *((int *)a2 + 1);
    if (!v99)
    {
      uint64_t v146 = 0;
      double v100 = (BlueFin::GlMeBeidouDecodeMgr *)BlueFin::GlMeSlots::BeidouBitDecoder(v10, (unsigned __int8 *)a2);
      if (!BlueFin::GlMeBeidouDecodeMgr::GetSecondOfWeek(v100, (unsigned __int8 *)a2, (int *)&v146 + 1, (unsigned int *)&v146))goto LABEL_140; {
      LODWORD(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)this + 70);
      }
      LODWORD(v102) = HIDWORD(v146);
      double v38 = ((double)v101 - (double)v102) * 0.001 + (double)(v146 + 604800);
      double v149 = v38;
      long double v103 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v149, a2, 0);
      double v104 = fmod(v103, 4294967300.0);
      if (v103 > 4294967300.0) {
        long double v103 = v104;
      }
      double v105 = v103;
      if (v103 < -4294967300.0) {
        double v105 = -fmod(-v103, 4294967300.0);
      }
      if (v105 < 0.0) {
        unsigned int v106 = --v105;
      }
      else {
        unsigned int v106 = v105;
      }
      if (!v106) {
        goto LABEL_229;
      }
      if (v103 < -4294967300.0) {
        long double v103 = -fmod(-v103, 4294967300.0);
      }
      if (v103 < 0.0) {
        unsigned int v107 = --v103;
      }
      else {
        unsigned int v107 = v103;
      }
      double v108 = (double)BlueFin::GlSignalId::GetMsPerBit((BlueFin::GlSignalId *)(v10 + 100)) * 0.001;
      double v109 = fmod(v108, 4294967300.0);
      if (v108 <= 4294967300.0) {
        double v109 = v108;
      }
      if (v109 < -4294967300.0) {
        double v109 = -fmod(-v109, 4294967300.0);
      }
      unsigned int v110 = v109 < 0.0 ? --v109 : v109;
      if (v107 == v110)
      {
LABEL_229:
        unsigned int v111 = *((_DWORD *)this + 63) | 0x30;
LABEL_267:
        *((_DWORD *)this + 63) = v111;
        goto LABEL_140;
      }
      double v137 = "REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime)==REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPerBit()*SEC_PER_MS)";
      DeviceFaultNotify("glme_meas.cpp", 862, "GetSigMeas", (char)"REAL_TO_INT(dSubBitTime)==0 || REAL_TO_INT(dSubBitTime)==REAL_TO_INT(pMeDspMeas->otSignalId.GetMsPerBit()*SEC_PER_MS)");
      double v138 = "glme_meas.cpp";
      int v139 = 862;
LABEL_269:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v138, v139, v137);
    }
LABEL_232:
    if (BlueFin::GlSignalId::s_aucSignalType2halfCycleAmbiguity[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v99 - v99 + BlueFin::GlSvId::s_aucSvId2gnss[v54]]]) {
      goto LABEL_140;
    }
    int v112 = *((_DWORD *)this + 63);
    *((_DWORD *)this + 63) = v112 & 0xFFDDFFFF | 0x20000;
    if ((v112 & 2) != 0) {
      unsigned int v111 = v112 & 0xFFDDFFEF | 0x20010;
    }
    else {
      unsigned int v111 = v112 & 0xFFDDFFEF | 0x20000;
    }
    goto LABEL_267;
  }
  if (v54 <= 0xAE)
  {
    uint64_t v99 = *((int *)a2 + 1);
    if (!v99)
    {
      uint64_t v119 = BlueFin::GlMeSlots::GalileoINavDecoder(v10, (unsigned __int8 *)a2);
      int v120 = *(_DWORD *)(v119 + 756);
      if (*(unsigned char *)(v119 + 752) && *(unsigned char *)(v119 + 753))
      {
        uint64_t v121 = (int *)(v119 + 764);
        uint64_t v122 = (int *)(v119 + 760);
        int v123 = 1;
        int v124 = 1;
        char v125 = 1;
      }
      else
      {
        uint64_t v121 = (int *)(v119 + 388);
        uint64_t v122 = (int *)(v119 + 384);
        int v123 = *(unsigned __int8 *)(v119 + 376);
        int v124 = *(unsigned __int8 *)(v119 + 377);
        if (*(unsigned char *)(v119 + 376)) {
          BOOL v128 = v124 == 0;
        }
        else {
          BOOL v128 = 1;
        }
        char v125 = !v128;
      }
      uint64_t v129 = *v122;
      int v130 = *v121;
      int v131 = *((_DWORD *)this + 63);
      *((_DWORD *)this + 63) = v131 & 0xFFFDFFFF;
      if (v120 == 2)
      {
        *((_DWORD *)this + 63) = v131 | 0x220000;
        uint64_t v143 = v129;
        int v140 = v130;
        double RfCarrierWavelengthM = BlueFin::GlSignalId::GetRfCarrierWavelengthM(a2);
        int v130 = v140;
        uint64_t v129 = v143;
        *((double *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((double *)this + 40) + RfCarrierWavelengthM * -0.5;
      }
      else if (v120 == 1)
      {
        *((_DWORD *)this + 63) = v131 & 0xFFDDFFFF | 0x20000;
      }
      char v133 = v125 ^ 1;
      if (!v123) {
        char v133 = 1;
      }
      if (v133)
      {
        uint64_t v136 = BlueFin::GlMeSlots::GalileoPilotSecCodeDecoder(v10, (unsigned __int8 *)a2);
        if (!*(unsigned char *)(v136 + 8)) {
          goto LABEL_140;
        }
        double v134 = (double)((*((_DWORD *)this + 70) - *(_DWORD *)(v136 + 4)) % 100);
        int v135 = 16;
      }
      else
      {
        if (!v124) {
          goto LABEL_140;
        }
        double v134 = (double)(v129 + *((_DWORD *)this + 70) - v130 + 604800000);
        int v135 = 48;
      }
      double v38 = v134 * 0.001;
      unsigned int v111 = *((_DWORD *)this + 63) | v135;
      goto LABEL_267;
    }
    goto LABEL_232;
  }
  if (v54 > 0xBC) {
    goto LABEL_140;
  }
  uint64_t v113 = BlueFin::GlMeSlots::NavICDecoder(v10, (unsigned __int8 *)a2);
  if (*(unsigned __int8 *)(v113 + 368) | *(unsigned __int8 *)(v113 + 744)) {
    *((_DWORD *)this + 63) |= 0x10u;
  }
  uint64_t v114 = (unsigned char *)BlueFin::GlMeSlots::NavICDecoder(v10, (unsigned __int8 *)a2);
  if (v114[368] && v114[369])
  {
    double v117 = v114 + 380;
    unsigned int v118 = v114 + 376;
LABEL_248:
    LODWORD(v115) = *((_DWORD *)this + 70);
    LODWORD(v116) = *v117;
    *(double *)&unint64_t v126 = (double)v116;
    double v127 = (double)v115 - *(double *)&v126;
    *((_DWORD *)this + 63) |= 0x20u;
    LODWORD(v126) = *v118;
    double v38 = (double)v126 * 0.001 + v127 * 0.001;
    goto LABEL_140;
  }
  if (v114[744] && v114[745])
  {
    double v117 = v114 + 756;
    unsigned int v118 = v114 + 752;
    goto LABEL_248;
  }
LABEL_140:
  double v79 = a3 * 0.001 - v26;
  double v80 = fmod(v79 * 1000.0, 4294967300.0);
  if (v79 * 1000.0 <= 4294967300.0) {
    double v80 = v79 * 1000.0;
  }
  if (v80 < -4294967300.0) {
    double v80 = -fmod(-v80, 4294967300.0);
  }
  signed int v81 = v80;
  if (v80 < 0.0) {
    signed int v81 = --v80;
  }
  if (v81 >= 0) {
    unsigned int v82 = v81;
  }
  else {
    unsigned int v82 = -v81;
  }
  int v83 = *((_DWORD *)this + 86);
  if (v82 >= 0x7D0)
  {
    v83 += v81;
    *((_DWORD *)this + 86) = v83;
  }
  if (v83 < 0) {
    int v83 = -v83;
  }
  if (v83 >= 0x1F4) {
    *((_DWORD *)this + 63) |= 0x400u;
  }
  if ((*(unsigned char *)(v10 + 84) & 0x40) != 0)
  {
    float v84 = v79;
    float v85 = fabsf(v84);
    float v86 = dbl_263BB2AD0[*(unsigned char *)(*((void *)this + 24) + 32) == 0] * v85;
    float v87 = *((float *)this + 85) + v86;
    *((float *)this + 85) = v87;
    if (v79 < 2.0 && *(_DWORD *)(v10 + 140) == 15 && v87 > 0.000000014) {
      *((_DWORD *)this + 85) = 846234790;
    }
    *((float *)this + 82) = *((float *)this + 82) + (float)(*(float *)(v10 + 56) * v85);
    double v88 = *(float *)(v10 + 32);
    *((double *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((double *)this + 40) + v88 * 299792458.0 * v79;
    double v89 = v79 * (1.0 / (1.0 - v88));
    SubBitAndEpoch__n128 Time = v38 + v89;
    double v147 = v38 + v89;
    unsigned int v91 = *(unsigned __int8 *)a2;
    if ((v91 + 117) <= 0x23u && (*((_DWORD *)this + 63) & 0x30) == 0x10)
    {
      double v92 = fmod(SubBitAndEpochTime, 0.1);
      if (v92 < 0.0) {
        double v92 = v92 + 0.1;
      }
      SubBitAndEpoch__n128 Time = v92 + 604800.0;
      double v147 = SubBitAndEpochTime;
    }
    if (v56 == -1)
    {
LABEL_172:
      if (v89 * 1000.0 <= 0.0)
      {
        if (v89 * 1000.0 >= 0.0)
        {
          unsigned int v94 = 0;
          goto LABEL_179;
        }
        double v93 = -0.5;
      }
      else
      {
        double v93 = 0.5;
      }
      unsigned int v94 = (int)(v89 * 1000.0 + v93);
LABEL_179:
      *((int32x2_t *)this + 35) = vadd_s32(*(int32x2_t *)((char *)this + 280), vdup_n_s32(v94));
      if (SubBitAndEpochTime < 0.0)
      {
        SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v147, a2, 1u);
        unsigned int v91 = *(unsigned __int8 *)a2;
        if (v91 - 52 >= 0xE) {
          unsigned int v95 = *((_DWORD *)this + 63) & 0xFFFFFFCF;
        }
        else {
          unsigned int v95 = *((_DWORD *)this + 63);
        }
        *((_DWORD *)this + 63) = v95 & 0xFFFFFFDF;
      }
      *((double *)this + 37) = SubBitAndEpochTime;
      if (!v91) {
        goto LABEL_196;
      }
      if (v91 >= 0x21)
      {
        if (v91 < 0x42)
        {
          if (v91 < 0x34) {
            goto LABEL_196;
          }
          if (SubBitAndEpochTime >= 86400.0)
          {
            SubBitAndEpoch__n128 Time = SubBitAndEpochTime + -86400.0;
            *((double *)this + 37) = SubBitAndEpochTime;
          }
          if ((*((_DWORD *)this + 63) & 0x30) != 0x10) {
            goto LABEL_196;
          }
          double v96 = fmod(SubBitAndEpochTime, 30.0);
          goto LABEL_190;
        }
        if (v91 > 0xBC) {
          goto LABEL_196;
        }
      }
      if (SubBitAndEpochTime < 604800.0) {
        goto LABEL_196;
      }
      double v96 = SubBitAndEpochTime + -604800.0;
LABEL_190:
      *((double *)this + 37) = v96;
      goto LABEL_196;
    }
    if (v56 < 0xA4CF69)
    {
      if (SubBitAndEpochTime >= 97199.0)
      {
LABEL_171:
        double v147 = v89;
        *((_DWORD *)this + 63) &= 0xFFFFFFCF;
        SubBitAndEpoch__n128 Time = v89;
        goto LABEL_172;
      }
      if (v56 < 0xA4C798) {
        goto LABEL_172;
      }
    }
    if (SubBitAndEpochTime > 97201.0) {
      goto LABEL_172;
    }
    goto LABEL_171;
  }
  BlueFin::GlSigMeas::init((uint64_t)v8, (uint64_t)a2);
LABEL_196:
  int v97 = *(_DWORD *)(v10 + 140) - 10;
  if v97 < 8 && ((0xDFu >> v97))
  {
    *((_DWORD *)this + 94) = dword_263BB2B00[v97];
    *((unsigned char *)this + 38BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v10 + 144);
  }
  else
  {
    *((_DWORD *)this + 94) = 0;
  }
  return v8;
}

uint64_t BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, char a3, int a4)
{
  if (BlueFin::GlBigArray::Has(*((BlueFin::GlBigArray **)this + 112), *((unsigned __int16 *)a2 + 4)))
  {
    uint64_t v8 = *((void *)this + 112);
    if (*((unsigned __int16 *)a2 + 4) - *(unsigned __int16 *)(v8 + 28) >= *(unsigned __int16 *)(v8 + 30))
    {
LABEL_61:
      unint64_t v42 = "handle - m_usMinHandle < m_usNumHandles";
      DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
      int v43 = "glinc_array.h";
      int v44 = 313;
      goto LABEL_65;
    }
    unsigned int v9 = *(unsigned __int16 *)(*(void *)(v8 + 8) + 2 * (unsigned __int16)(*((_WORD *)a2 + 4) - *(_WORD *)(v8 + 28)));
    if (v9 != 0xFFFF)
    {
      if (*(unsigned __int16 *)(v8 + 32) > v9) {
        return *(void *)v8 + *(_DWORD *)(v8 + 24) * v9;
      }
LABEL_64:
      unint64_t v42 = "slot < m_usNumSlots";
      DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
      int v43 = "glinc_array.h";
      int v44 = 319;
LABEL_65:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v43, v44, v42);
    }
    return 0;
  }
  if (a3) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 112);
  unsigned int v13 = *(unsigned __int16 *)(v12 + 32);
  __int16 v14 = *(_WORD *)(v12 + 34);
  if (*((_DWORD *)this + 256) > (int)(unsigned __int16)(v13 + ~v14)) {
    goto LABEL_10;
  }
  unsigned __int16 v23 = v14 + 1;
  if (v13 <= v23)
  {
    if ((a4 & 1) == 0) {
      return 0;
    }
LABEL_46:
    unint64_t v42 = "0";
    DeviceFaultNotify("glme_msmtmgr.cpp", 534, "GetMsmtSlotPtr", (char)"0");
    int v43 = "glme_msmtmgr.cpp";
    int v44 = 534;
    goto LABEL_65;
  }
  int v24 = 0;
  int v25 = 0;
  int v45 = 0;
  int v46 = 0;
  unint64_t v26 = v23;
  __int16 v27 = 575;
  double v28 = 4294967300.0;
  double v29 = 4294967300.0;
  double v30 = 4294967300.0;
  __int16 v47 = 575;
  __int16 v48 = 575;
  do
  {
    unsigned int v31 = (unsigned __int16)(*(_WORD *)(v12 + 28) + *(_WORD *)(*(void *)(v12 + 16) + 2 * v26));
    if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)v12, v31))
    {
      unint64_t v42 = "m_potArray->Has(handle)";
      DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
      int v43 = "glinc_array.h";
      int v44 = 362;
      goto LABEL_65;
    }
    if (v31 >= 0x23F)
    {
      unint64_t v42 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      int v43 = "glsignalid.h";
      int v44 = 577;
      goto LABEL_65;
    }
    uint64_t v32 = *((void *)this + 112);
    unsigned int v33 = v31 - *(unsigned __int16 *)(v32 + 28);
    unsigned int v34 = *(unsigned __int16 *)(v32 + 30);
    if (((unint64_t)*(unsigned int *)(*((void *)this + 101) + 4 * (v31 >> 5)) >> (v31 & 0x1F)))
    {
      if (v33 >= v34) {
        goto LABEL_61;
      }
      unsigned int v35 = *(unsigned __int16 *)(*(void *)(v32 + 8) + 2 * (unsigned __int16)(v31 - *(_WORD *)(v32 + 28)));
      if (v35 == 0xFFFF)
      {
        uint64_t v36 = 0;
      }
      else
      {
        if (*(unsigned __int16 *)(v32 + 32) <= v35) {
          goto LABEL_64;
        }
        uint64_t v36 = *(void *)v32 + *(_DWORD *)(v32 + 24) * v35;
      }
      double v39 = *(double *)(v36 + 24);
      if (v39 < v28)
      {
        int v25 = *(unsigned __int8 *)(v36 + 100);
        __int16 v27 = *(_WORD *)(v36 + 108);
        goto LABEL_39;
      }
    }
    else
    {
      if (v33 >= v34) {
        goto LABEL_61;
      }
      unsigned int v37 = *(unsigned __int16 *)(*(void *)(v32 + 8) + 2 * (unsigned __int16)(v31 - *(_WORD *)(v32 + 28)));
      if (v37 == 0xFFFF)
      {
        uint64_t v38 = 0;
      }
      else
      {
        if (*(unsigned __int16 *)(v32 + 32) <= v37) {
          goto LABEL_64;
        }
        uint64_t v38 = *(void *)v32 + *(_DWORD *)(v32 + 24) * v37;
      }
      double v40 = *(double *)(v38 + 24);
      if (v40 < v30)
      {
        int v45 = *(unsigned __int8 *)(v38 + 100);
        __int16 v47 = *(_WORD *)(v38 + 108);
        double v30 = *(double *)(v38 + 24);
      }
      int v24 = 1;
      if ((*(unsigned char *)(v38 + 84) & 0x60) == 0 && v40 < v29)
      {
        int v46 = *(unsigned __int8 *)(v38 + 100);
        __int16 v48 = *(_WORD *)(v38 + 108);
        double v29 = *(double *)(v38 + 24);
      }
    }
    double v39 = v28;
LABEL_39:
    ++v26;
    double v28 = v39;
  }
  while (v26 < *(unsigned __int16 *)(v12 + 32));
  __int16 v49 = v27;
  v51[0] = v47;
  __int16 v50 = v48;
  if (((a4 | v24) & 1) == 0) {
    return 0;
  }
  if ((v24 & 1) == 0)
  {
    if (v25)
    {
      unint64_t v41 = &v49;
      goto LABEL_56;
    }
    goto LABEL_46;
  }
  if (v46 && v29 - v30 < 1.0)
  {
    unint64_t v41 = &v50;
    goto LABEL_56;
  }
  if (v45)
  {
    unint64_t v41 = v51;
LABEL_56:
    BlueFin::GlBigArray::Remove(v32, (unsigned __int16)*v41);
    BlueFin::GlSetBase::Remove((uint64_t)this, *v41);
    BlueFin::GlSetBase::Remove((uint64_t)this + 88, *v41);
    uint64_t v32 = *((void *)this + 112);
  }
  uint64_t v12 = v32;
LABEL_10:
  unsigned int v15 = BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)v12, *((unsigned __int16 *)a2 + 4));
  uint64_t v10 = (uint64_t)v15;
  if (v15)
  {
    unsigned int v16 = (BlueFin::GlMeWinMgr *)*((void *)this + 24);
    unsigned int v17 = (BlueFin::GlPeIf *)*((void *)this + 22);
    uint64_t v18 = *((void *)this + 121);
    char v19 = *((unsigned char *)this + 1012);
    LOBYTE(v51[0]) = -1;
    int v52 = 0;
    __int16 v53 = 575;
    *(void *)unsigned int v15 = &unk_270EBECA8;
    v15[21] = 0;
    *((unsigned char *)v15 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    v15[26] = -1;
    *((_WORD *)v15 + 54) = 575;
    BlueFin::GlMeDSPMeas::init((uint64_t)v15, (uint64_t)v51);
    *(unsigned char *)(v10 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
    *(_DWORD *)(v10 + 164) = -1;
    *(_WORD *)(v10 + 168) = 255;
    *(_DWORD *)(v10 + 172) = -1;
    *(unsigned char *)(v10 + 1504) = *(unsigned char *)a2;
    int v20 = *((_DWORD *)a2 + 1);
    *(_WORD *)(v10 + 1512) = *((_WORD *)a2 + 4);
    *(_DWORD *)(v10 + 1508) = v20;
    BlueFin::GlMeDSPMeas::init(v10, (uint64_t)a2);
    *(unsigned char *)(v10 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)a2;
    *(_DWORD *)(v10 + 164) = -1;
    *(_WORD *)(v10 + 168) = 255;
    *(_DWORD *)(v10 + 172) = -1;
    unsigned int v21 = *(unsigned __int8 *)a2;
    if (*(unsigned char *)a2)
    {
      if (v21 < 0x21) {
        goto LABEL_15;
      }
      if (v21 < 0x42)
      {
        if (v21 >= 0x34)
        {
          *(_OWORD *)(v10 + 196) = 0u;
          *(_DWORD *)(v10 + 192) = 0;
          *(unsigned char *)(v10 + 476) = v21;
          *(void *)(v10 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v17;
          *(void *)(v10 + 488) = v16;
          *(void *)(v10 + 496) = v18;
          *(_OWORD *)(v10 + 212) = 0u;
          *(_OWORD *)(v10 + 228) = 0u;
          *(_OWORD *)(v10 + 244) = 0u;
          *(_OWORD *)(v10 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 276) = 0u;
          *(_OWORD *)(v10 + 292) = 0u;
          *(_OWORD *)(v10 + 308) = 0u;
          *(_OWORD *)(v10 + 324) = 0u;
          *(_OWORD *)(v10 + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 356) = 0u;
          *(_OWORD *)(v10 + 372) = 0u;
          *(_OWORD *)(v10 + 388) = 0u;
          *(_OWORD *)(v10 + 404) = 0u;
          *(_OWORD *)(v10 + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 436) = 0u;
          *(_OWORD *)(v10 + 452) = 0u;
          *(void *)(v10 + 468) = 0;
        }
      }
      else if (v21 > 0x4B)
      {
        if (v21 < 0x8B)
        {
          *(_OWORD *)(v10 + 192) = 0u;
          *(_OWORD *)(v10 + 368) = 0u;
          *(_DWORD *)(v10 + 328) = 0;
          *(_OWORD *)(v10 + 208) = 0u;
          *(_OWORD *)(v10 + 224) = 0u;
          *(_OWORD *)(v10 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 256) = 0u;
          *(_OWORD *)(v10 + 272) = 0u;
          *(_OWORD *)(v10 + 284) = 0u;
          *(void *)(v10 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBEC00;
          *(_WORD *)(v10 + 332) = 0;
          *(_DWORD *)(v10 + 344) = 0;
          *(void *)(v10 + 336) = &unk_270EBEC00;
          *(_WORD *)(v10 + 348) = 0;
          *(_OWORD *)(v10 + 384) = 0u;
          *(_OWORD *)(v10 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 416) = 0u;
          *(_OWORD *)(v10 + 432) = 0u;
          *(_OWORD *)(v10 + 448) = 0u;
          *(_OWORD *)(v10 + 464) = 0u;
          *(_OWORD *)(v10 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 496) = 0u;
          *(_OWORD *)(v10 + 512) = 0u;
          *(_OWORD *)(v10 + 528) = 0u;
          *(_OWORD *)(v10 + 54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(void *)(v10 + 359) = 0;
          *(void *)(v10 + 352) = 0;
          *(_OWORD *)(v10 + 576) = 0u;
          *(_OWORD *)(v10 + 592) = 0u;
          *(_OWORD *)(v10 + 608) = 0u;
          *(_OWORD *)(v10 + 624) = 0u;
          *(_OWORD *)(v10 + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 656) = 0u;
          *(_OWORD *)(v10 + 672) = 0u;
          *(_OWORD *)(v10 + 688) = 0u;
          *(_OWORD *)(v10 + 704) = 0u;
          *(_OWORD *)(v10 + 72BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 736) = 0u;
          *(_OWORD *)(v10 + 752) = 0u;
          *(_OWORD *)(v10 + 768) = 0u;
          *(_OWORD *)(v10 + 784) = 0u;
          *(_OWORD *)(v10 + 80BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 816) = 0u;
          *(_OWORD *)(v10 + 832) = 0u;
          *(_OWORD *)(v10 + 848) = 0u;
          *(_OWORD *)(v10 + 864) = 0u;
          *(_OWORD *)(v10 + 88BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 896) = 0u;
        }
        else if (v21 > 0xAE)
        {
          if (v21 <= 0xBC) {
            BlueFin::GlMeNavICDecoder::GlMeNavICDecoder(v10 + 192, (uint64_t)v17);
          }
        }
        else
        {
          BlueFin::GlMeGalileoINavDecoder::GlMeGalileoINavDecoder((BlueFin::GlMeGalileoINavDecoder *)(v10 + 192), v17, v16);
          *(unsigned char *)(v10 + 100BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
          *(void *)(v10 + 992) = 0;
          *(void *)(v10 + 1008) = v16;
          *(_OWORD *)(v10 + 1016) = 0u;
          *(_OWORD *)(v10 + 1032) = 0u;
          *(_OWORD *)(v10 + 1048) = 0u;
          *(_OWORD *)(v10 + 1064) = 0u;
          *(_OWORD *)(v10 + 108BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
          *(_OWORD *)(v10 + 1096) = 0u;
          *(_DWORD *)(v10 + 1112) = 0;
        }
      }
      else
      {
LABEL_15:
        *(void *)(v10 + 576) = v16;
        *(void *)(v10 + 584) = (char *)this + 912;
        *(void *)(v10 + 592) = v18;
        *(unsigned char *)(v10 + 60BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v21;
        *(_DWORD *)(v10 + 992) = 0;
        *(unsigned char *)(v10 + 996) = v19;
        *(_DWORD *)(v10 + 604) = 0xFFFF;
        *(void *)(v10 + 608) = 0xFFFFFFFF0000FFFFLL;
        *(void *)(v10 + 888) = 0;
        *(_OWORD *)(v10 + 616) = 0u;
        *(_OWORD *)(v10 + 632) = 0u;
        *(_OWORD *)(v10 + 648) = 0u;
        *(_OWORD *)(v10 + 664) = 0u;
        *(_OWORD *)(v10 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v10 + 696) = 0u;
        *(_OWORD *)(v10 + 712) = 0u;
        *(_OWORD *)(v10 + 728) = 0u;
        *(_OWORD *)(v10 + 744) = 0u;
        *(_OWORD *)(v10 + 76BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v10 + 776) = 0u;
        *(_OWORD *)(v10 + 792) = 0u;
        *(_OWORD *)(v10 + 808) = 0u;
        *(_OWORD *)(v10 + 824) = 0u;
        *(_OWORD *)(v10 + 84BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v10 + 856) = 0u;
        *(_OWORD *)(v10 + 872) = 0u;
        *(void *)&long long v22 = 0xF0F0F0F0F0F0F0F0;
        *((void *)&v22 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xF0F0F0F0F0F0F0F0;
        *(_OWORD *)(v10 + 96BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v22;
        *(_OWORD *)(v10 + 976) = v22;
        *(_OWORD *)(v10 + 928) = v22;
        *(_OWORD *)(v10 + 944) = v22;
        *(_OWORD *)(v10 + 896) = v22;
        *(_OWORD *)(v10 + 912) = v22;
        BlueFin::GlMeFrameMgr::SetState(v10 + 192, 0);
      }
    }
  }
  return v10;
}

BOOL BlueFin::GlBigArray::Has(BlueFin::GlBigArray *this, int a2)
{
  unsigned int v2 = a2 - *((unsigned __int16 *)this + 14);
  if (v2 >= *((unsigned __int16 *)this + 15))
  {
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", 313, "handle - m_usMinHandle < m_usNumHandles");
  }
  return *(__int16 *)(*((void *)this + 1) + 2 * v2) != -1;
}

double BlueFin::GlSigMeas::init(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 16) = -1;
  *(unsigned char *)(a1 + 18) = 0;
  *(_OWORD *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = xmmword_263BA9EE0;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 108) = 0xBF80000000000000;
  *(_DWORD *)(a1 + 116) = 2139095039;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  double result = 5.33097249e-35;
  *(void *)(a1 + 128) = 0x38D1B71700000000;
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return result;
}

double BlueFin::GlMeAcqWinComputer::GlMeAcqWinComputer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = &off_270EBF450;
  *(void *)(a1 + 152) = &off_270EBF450;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 44) = -1;
  *(_WORD *)(a1 + 48) = 575;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)&double result = 3240099840;
  *(_OWORD *)(a1 + 68) = xmmword_263BABE60;
  *(_DWORD *)(a1 + 84) = 2139095039;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2139095039;
  *(_WORD *)(a1 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 104) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 112) = -1;
  *(_WORD *)(a1 + 116) = -1;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 164) = -1;
  *(_WORD *)(a1 + 168) = 575;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 188) = xmmword_263BABE60;
  *(_DWORD *)(a1 + 204) = 2139095039;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 2139095039;
  *(_WORD *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 224) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 232) = -1;
  *(_WORD *)(a1 + 236) = -1;
  *(void *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 272) = 0;
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::IsDspNavBitQuality(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2)
{
  uint64_t result = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(this, a2, 1, 1);
  if (result)
  {
    int v4 = *(_DWORD *)(result + 84);
    if ((v4 & 0x10) != 0)
    {
      if (*(unsigned __int8 *)(result + 100) != *(unsigned __int8 *)a2
        || *(_DWORD *)(result + 104) != *((_DWORD *)a2 + 1))
      {
        DeviceFaultNotify("glme_meas.cpp", 80, "IsDspNavBitQuality", (char)"pMeDspMeas->otSignalId == rotSignalId");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_meas.cpp", 80, "pMeDspMeas->otSignalId == rotSignalId");
      }
      return (~v4 & 0x608) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsL5MsaEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 562);
}

BOOL BlueFin::GlMeAcqWindowProvider::IsAidingGoodForTrack(BlueFin::GlMeAcqWindowProvider *this, const BlueFin::GlSignalId *a2, double a3, int a4)
{
  return BlueFin::GlMeWinMgr::IsAidingGoodForTrack(*((void *)this + 1) + 32, (unsigned __int8 *)a2, a4, a3);
}

BOOL BlueFin::GlMeWinMgr::IsAidingGoodForTrack(uint64_t a1, unsigned __int8 *a2, int a3, double a4)
{
  if (a4 - *(double *)(a1 + 10400) <= 500.0)
  {
    uint64_t v8 = 1 << (*((_WORD *)a2 + 4) & 0x1F);
    if ((v8 & *(_DWORD *)(*(void *)(a1 + 10496) + 4 * (*((__int16 *)a2 + 4) >> 5))) != 0) {
      return (v8 & *(_DWORD *)(*(void *)(a1 + 10408) + 4 * ((uint64_t)*((__int16 *)a2 + 4) >> 5))) != 0;
    }
  }
  else
  {
    bzero(*(void **)(a1 + 10408), ((4 * *(unsigned __int8 *)(a1 + 10416) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(a1 + 10496), ((4 * *(unsigned __int8 *)(a1 + 10504) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  unint64_t v26 = &off_270EBF450;
  char v27 = 0;
  int v28 = -1;
  __int16 v29 = 575;
  uint64_t v30 = 0;
  int v31 = 0;
  long long v32 = xmmword_263BABE60;
  int v33 = 2139095039;
  uint64_t v34 = 0;
  float v35 = 3.4028e38;
  __int16 v36 = 0;
  uint64_t v37 = 0x7FEFFFFFFFFFFFFFLL;
  int v38 = -1;
  __int16 v39 = -1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  int v43 = 0;
  int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void (***)(BlueFin::GlMeAcqWin *__hidden), double))(*(void *)a1 + 32))(a1, a2, &v26, a4);
  BOOL result = 0;
  int v11 = *((__int16 *)a2 + 4);
  if (v10)
  {
    if (v11 >= 0x23F)
    {
      int v24 = "IsValid()";
      DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
      int v25 = 806;
    }
    else
    {
      int v12 = *a2;
      uint64_t v13 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
      uint64_t v14 = *((int *)a2 + 1);
      int v15 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v14 + v13];
      if (v15)
      {
        unsigned int v16 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v14 - v14 + v13];
        if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v14 - v14 + v13])
        {
          unsigned int v17 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v14 - v14 + v13];
          float v18 = 2.0;
          if (a3) {
            float v18 = 10.0;
          }
          if (((1 << v17) & 0x134) == 0) {
            float v18 = 1.0;
          }
          if (v17 > 8) {
            float v18 = 1.0;
          }
          BOOL result = (float)(*((float *)&v32 + 2) * 1000000000.0) <= 25.0
                && (float)(v35 * (float)(1000 * v15 / v16)) <= v18;
          if ((int)v14 >= 1 && ((v12 - 1) < 0x20 || (v12 - 66) <= 9))
          {
            BOOL v19 = v14 == 2;
            BOOL v20 = v14 != 2 && result;
            if (v19)
            {
              BOOL v21 = !result;
              BOOL result = v20;
              if (!v21) {
                BOOL result = (v31 >> 4) & 1;
              }
            }
            else
            {
              BOOL result = v20;
            }
          }
          goto LABEL_28;
        }
      }
      int v24 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
      int v25 = 814;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v25, v24);
  }
LABEL_28:
  *(double *)(a1 + 1040BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4;
  uint64_t v22 = (v11 >> 5);
  int v23 = 1 << v11;
  *(_DWORD *)(*(void *)(a1 + 10496) + 4 * v22) |= v23;
  if (result) {
    *(_DWORD *)(*(void *)(a1 + 10408) + 4 * v22) |= v23;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsL5MsbEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 563);
}

double BlueFin::GlMeSrdAsicConfig::GetHardwareL5DelayInMeters(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((float *)this + 85);
}

double BlueFin::GlMeSrdAsicConfig::GetHardwareBdsDelayInMeters(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((float *)this + 83);
}

uint64_t BlueFin::GlMeMsmtMgr::GetGalSecCodePhsInSym(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, const BlueFin::GlMeAcqWin *a3, unsigned __int8 *a4)
{
  uint64_t v7 = *(unsigned __int8 *)a2;
  v15[0] = v7;
  int v16 = 0;
  __int16 v17 = 575;
  if ((v7 + 67) >= 0x44u)
  {
    uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v7];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v8] == 255) {
      int v16 = -1;
    }
    else {
      __int16 v17 = BlueFin::GlSignalId::s_ausGnss2signalId[v8] + v7 - BlueFin::GlSvId::s_aucGnss2minSvId[v8];
    }
  }
  uint64_t result = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(this, (const BlueFin::GlSignalId *)v15, 1, 1);
  if (result)
  {
    if ((~*(_DWORD *)(result + 84) & 0x150) != 0) {
      return 0;
    }
    double v10 = (*((double *)a3 + 7) - *(double *)(result + 24)) * 1000.0 * (float)(*((float *)a3 + 10) + 1.0);
    if (v10 <= 0.0)
    {
      if (v10 >= 0.0)
      {
        int v12 = 0;
LABEL_14:
        unsigned int v13 = v12 + *(_DWORD *)(result + 48);
        uint64_t v14 = BlueFin::GlMeSlots::GalileoPilotSecCodeDecoder(result, (unsigned __int8 *)a2);
        return BlueFin::GlMeGalileoPilotSecCodeDecoder::GetSecCodePhsInSym(v14, v13, a4, *((_DWORD *)a2 + 1));
      }
      double v11 = -0.5;
    }
    else
    {
      double v11 = 0.5;
    }
    int v12 = (int)(v10 + v11);
    goto LABEL_14;
  }
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::GetB1cL1cSecCodePhsInSym(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, const BlueFin::GlMeAcqWin *a3, unsigned __int16 *a4)
{
  uint64_t result = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(this, a2, 1, 1);
  if (result)
  {
    if ((~*(_DWORD *)(result + 84) & 0x150) != 0) {
      return 0;
    }
    double v9 = (*((double *)a3 + 7) - *(double *)(result + 24)) * 1000.0 * (float)(*((float *)a3 + 10) + 1.0);
    if (v9 <= 0.0)
    {
      if (v9 >= 0.0)
      {
        int v11 = 0;
LABEL_9:
        unsigned int v12 = *(unsigned __int8 *)a2;
        if (*(unsigned char *)a2)
        {
          int v13 = *(_DWORD *)(result + 48);
          if (v12 <= 0x20)
          {
            uint64_t v14 = *((void *)this + 24);
            unsigned __int8 v15 = v12 - 1;
            if (*(unsigned char *)(v14 + v15 + 9868))
            {
              uint64_t v16 = v14 + 4 * v15;
              uint64_t v17 = 9900;
              goto LABEL_20;
            }
            return 0;
          }
          unsigned __int8 v18 = v12 - 66;
          if (v12 >= 0x42)
          {
            if (v12 > 0x4B)
            {
              if (v12 <= 0x8A)
              {
                uint64_t v20 = *((void *)this + 24);
                unsigned __int8 v21 = v12 - 76;
                if (*(unsigned char *)(v20 + v21 + 10080))
                {
                  uint64_t v16 = v20 + 4 * v21;
                  uint64_t v17 = 10144;
LABEL_20:
                  int v22 = v11 + v13;
                  unsigned int v23 = *(_DWORD *)(v16 + v17);
                  unsigned int v24 = v11 + v13 - v23;
                  if (v11 + v13 >= v23)
                  {
                    unsigned int MsPerSecFrame = BlueFin::GlSignalId::GetMsPerSecFrame(a2);
                    if (*((unsigned __int16 *)a2 + 4) < 0x23Fu)
                    {
                      unsigned int v27 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]];
                      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                                 - *((int *)a2 + 1)
                                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
                      {
                        unsigned int v28 = (unsigned __int16)(v24 % MsPerSecFrame);
                        goto LABEL_29;
                      }
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    int v25 = BlueFin::GlSignalId::GetMsPerSecFrame(a2);
                    unsigned int v26 = BlueFin::GlSignalId::GetMsPerSecFrame(a2);
                    if (*((unsigned __int16 *)a2 + 4) < 0x23Fu)
                    {
                      unsigned int v27 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]];
                      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                                 - *((int *)a2 + 1)
                                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
                      {
                        unsigned int v28 = v25 + v22 - v23 + (v23 - v22) / v26 * v26;
LABEL_29:
                        *a4 = v28 / v27;
                        return 1;
                      }
LABEL_31:
                      uint64_t v30 = "ucMsPerEpoch != 0";
                      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
                      int v31 = 685;
LABEL_32:
                      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v31, v30);
                    }
                  }
                  uint64_t v30 = "IsValid()";
                  DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
                  int v31 = 678;
                  goto LABEL_32;
                }
              }
            }
            else
            {
              uint64_t v19 = *((void *)this + 24);
              if (*(unsigned char *)(v19 + v18 + 10028))
              {
                uint64_t v16 = v19 + 4 * v18;
                uint64_t v17 = 10040;
                goto LABEL_20;
              }
            }
          }
        }
        return 0;
      }
      double v10 = -0.5;
    }
    else
    {
      double v10 = 0.5;
    }
    int v11 = (int)(v9 + v10);
    goto LABEL_9;
  }
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::GetGlnsStrPhsInSym(BlueFin::GlMeMsmtMgr *a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v7 = *a2;
  v15[0] = v7;
  int v16 = 0;
  __int16 v17 = 575;
  if ((v7 + 67) >= 0x44u)
  {
    uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v7];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v8] == 255) {
      int v16 = -1;
    }
    else {
      __int16 v17 = BlueFin::GlSignalId::s_ausGnss2signalId[v8] + v7 - BlueFin::GlSvId::s_aucGnss2minSvId[v8];
    }
  }
  uint64_t result = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(a1, (const BlueFin::GlSignalId *)v15, 1, 0);
  if (result)
  {
    if ((~*(_DWORD *)(result + 84) & 0x570) != 0) {
      return 0;
    }
    double v10 = (*(double *)(a3 + 56) - *(double *)(result + 24)) * 1000.0 * (float)(*(float *)(a3 + 40) + 1.0);
    if (v10 <= 0.0)
    {
      if (v10 >= 0.0)
      {
        int v12 = 0;
LABEL_14:
        unsigned int v13 = v12 + *(_DWORD *)(result + 48);
        uint64_t v14 = (BlueFin::GlMeGlonassFrameMgr *)BlueFin::GlMeSlots::GlonassFrameMgr(result, a2);
        return BlueFin::GlMeGlonassFrameMgr::GetGlnsStrPhsInSym(v14, v13, a4);
      }
      double v11 = -0.5;
    }
    else
    {
      double v11 = 0.5;
    }
    int v12 = (int)(v10 + v11);
    goto LABEL_14;
  }
  return result;
}

BOOL BlueFin::GlPeLtoReaderBase::isDcb(void *a1, int a2, int *a3)
{
  for (unsigned __int16 i = 0; ; ++i)
  {
    int v9 = 0;
    uint64_t v10 = 0;
    int v11 = -1;
    unsigned int v7 = i;
    if (BlueFin::GlPeLtoReaderBase::getGnssDcbInfo(a1, (uint64_t)&v9, i) && v9 == a2) {
      break;
    }
    if (v7 >= 0xD) {
      return 0;
    }
  }
  if (a3) {
    *a3 = v11;
  }
  return v10 != 0;
}

BOOL BlueFin::GlPeLtoReaderBase::getGnssDcbInfo(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[1319];
  v19[0] = 269487563;
  uint64_t v20 = v3;
  uint64_t v21 = 0x2900000000;
  uint64_t v4 = a1[1320];
  int v22 = 0;
  int v23 = 269557195;
  uint64_t v24 = v4;
  uint64_t v25 = 0x2A00000001;
  uint64_t v5 = a1[1321];
  int v26 = 0;
  int v27 = 269626827;
  uint64_t v28 = v5;
  uint64_t v29 = 0x2B00000002;
  uint64_t v6 = a1[1322];
  int v30 = 0;
  int v31 = 269696459;
  uint64_t v32 = v6;
  uint64_t v33 = 0x2C00000003;
  uint64_t v7 = a1[1323];
  int v34 = 0;
  int v35 = 538971595;
  uint64_t v36 = v7;
  uint64_t v37 = 0x2D00000004;
  uint64_t v8 = a1[1324];
  int v38 = 2;
  int v39 = 539041227;
  uint64_t v40 = v8;
  uint64_t v41 = 0x2E00000005;
  uint64_t v9 = a1[1325];
  int v42 = 2;
  int v43 = 808455627;
  uint64_t v44 = v9;
  uint64_t v45 = 0x2F00000006;
  uint64_t v10 = a1[1326];
  int v46 = 3;
  int v47 = 808525259;
  uint64_t v48 = v10;
  uint64_t v49 = 0x3000000007;
  uint64_t v11 = a1[1327];
  int v50 = 3;
  int v51 = 808594891;
  uint64_t v52 = v11;
  uint64_t v53 = 0x3100000008;
  int v54 = 3;
  uint64_t v12 = a1[1328];
  int v55 = 1077939659;
  uint64_t v56 = v12;
  uint64_t v57 = 0x3200000009;
  int v58 = 4;
  uint64_t v13 = a1[1329];
  int v59 = 1078009291;
  uint64_t v60 = v13;
  uint64_t v61 = 0x330000000ALL;
  int v62 = 4;
  uint64_t v14 = a1[1330];
  int v63 = 1078078923;
  uint64_t v64 = v14;
  uint64_t v65 = 0x340000000BLL;
  int v66 = 4;
  uint64_t v15 = a1[1331];
  int v67 = 1347423691;
  uint64_t v68 = v15;
  uint64_t v69 = 0x350000000CLL;
  int v70 = 5;
  uint64_t v16 = a1[1332];
  int v71 = 1347493323;
  uint64_t v72 = v16;
  uint64_t v73 = 0x360000000DLL;
  int v74 = 5;
  if (a3 <= 0xD)
  {
    __int16 v17 = &v19[8 * a3];
    if (v17 != (_DWORD *)a2)
    {
      *(_DWORD *)a2 = *v17;
      *(void *)(a2 + 8) = *((void *)v17 + 1);
      *(void *)(a2 + 16) = *((void *)v17 + 2);
      *(_DWORD *)(a2 + 24) = v17[6];
    }
  }
  return a3 < 0xE;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetRootGearIdFromCnstlAndMode(BlueFin::GlMeSrdReceiverParameters *a1)
{
  unsigned int v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 96);

  return v1();
}

uint64_t BlueFin::GlMeSrdCtrlSm::GotRadioReport(BlueFin::GlMeSrdCtrlSm *this)
{
  int v2 = *((_DWORD *)this + 912);
  uint64_t v3 = *((int *)this + 913);
  int v4 = *((_DWORD *)this + 917);
  int v48 = *((_DWORD *)this + 918);
  int v5 = *((_DWORD *)this + 919);
  int v6 = *((_DWORD *)this + 923);
  int v7 = *((_DWORD *)this + 924);
  unsigned int v8 = *((_DWORD *)this + 925);
  unsigned int v9 = *((_DWORD *)this + 926);
  int v49 = *((_DWORD *)this + 929);
  unsigned int v10 = *((unsigned __int16 *)this + 1866);
  if ((*(unsigned int (**)(void))(**((void **)this + 17) + 264))(*((void *)this + 17))
    && (((*(uint64_t (**)(void))(**((void **)this + 17) + 24))(*((void *)this + 17)) & 1) != 0
     || (*(unsigned int (**)(void))(**((void **)this + 17) + 40))(*((void *)this + 17))))
  {
    unsigned int v11 = v6 & 0x3F;
    float v12 = (float)v11;
    float v13 = BlueFin::GlMeSrdCtrlSm::DagcDecode4777((BlueFin::GlMeSrdCtrlSm *)BYTE1(v8), (char)v8);
    GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, "GPS_GAL", (double)v11, v13);
    uint64_t v14 = *((void *)this + 25);
    *(float *)(v14 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (float)v11;
    *(float *)(v14 + 184) = v13;
    if ((v6 & 0x3F) != 0 && v13 > 0.0)
    {
      if (*(_WORD *)(v14 + 1528))
      {
        float v15 = *(float *)(v14 + 1532);
        if (v15 > 0.0)
        {
          if (v15 <= (float)(v12 + v13)) {
            int v16 = 0;
          }
          else {
            int v16 = *(_DWORD *)(v14 + 1504) + 1;
          }
          *(_DWORD *)(v14 + 1504) = v16;
        }
      }
    }
    float v28 = BlueFin::GlMeSrdCtrlSm::DagcDecode4777((BlueFin::GlMeSrdCtrlSm *)HIBYTE(v8), (int)(v8 << 8) >> 24);
    GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, "GLO", (double)v11, v28);
    uint64_t v29 = *((void *)this + 25);
    *(float *)(v29 + 188) = v12;
    *(float *)(v29 + 192) = v28;
    if ((v6 & 0x3F) != 0 && v28 > 0.0)
    {
      if (*(_WORD *)(v29 + 1528))
      {
        float v30 = *(float *)(v29 + 1536);
        if (v30 > 0.0)
        {
          if (v30 <= (float)(v12 + v28)) {
            int v31 = 0;
          }
          else {
            int v31 = *(_DWORD *)(v29 + 1508) + 1;
          }
          *(_DWORD *)(v29 + 1508) = v31;
        }
      }
    }
    float v32 = BlueFin::GlMeSrdCtrlSm::DagcDecode4777((BlueFin::GlMeSrdCtrlSm *)BYTE1(v9), (char)v9);
    GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, "BDS", (double)v11, v32);
    uint64_t v33 = *((void *)this + 25);
    *(float *)(v33 + 196) = v12;
    *(float *)(v33 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v32;
    if ((v6 & 0x3F) != 0 && v32 > 0.0)
    {
      if (*(_WORD *)(v33 + 1528))
      {
        float v34 = *(float *)(v33 + 1540);
        if (v34 > 0.0)
        {
          if (v34 <= (float)(v12 + v32)) {
            int v35 = 0;
          }
          else {
            int v35 = *(_DWORD *)(v33 + 1512) + 1;
          }
          *(_DWORD *)(v33 + 1512) = v35;
        }
      }
    }
    float v36 = (float)(v7 & 0x3F);
    float v37 = BlueFin::GlMeSrdCtrlSm::DagcDecode4777((BlueFin::GlMeSrdCtrlSm *)HIBYTE(v9), (int)(v9 << 8) >> 24);
    GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, "L5_E5A", (double)(v7 & 0x3F), v37);
    uint64_t v38 = *((void *)this + 25);
    *(float *)(v38 + 204) = v36;
    *(float *)(v38 + 208) = v37;
    if ((v7 & 0x3F) != 0 && v37 > 0.0)
    {
      if (*(_WORD *)(v38 + 1528))
      {
        float v39 = *(float *)(v38 + 1544);
        if (v39 > 0.0)
        {
          if (v39 <= (float)(v36 + v37)) {
            int v40 = 0;
          }
          else {
            int v40 = *(_DWORD *)(v38 + 1516) + 1;
          }
          *(_DWORD *)(v38 + 1516) = v40;
        }
      }
    }
    float v41 = BlueFin::GlMeSrdCtrlSm::DagcDecode4777((BlueFin::GlMeSrdCtrlSm *)HIBYTE(v9), (int)(v9 << 8) >> 24);
    GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, "E5B_BDS2", (double)(v7 & 0x3F), v41);
    uint64_t v42 = *((void *)this + 25);
    *(float *)(v42 + 204) = v36;
    *(float *)(v42 + 212) = v41;
    if ((v7 & 0x3F) != 0 && v41 > 0.0)
    {
      if (*(_WORD *)(v42 + 1528))
      {
        float v43 = *(float *)(v42 + 1548);
        if (v43 > 0.0)
        {
          if (v43 <= (float)(v36 + v41)) {
            int v44 = 0;
          }
          else {
            int v44 = *(_DWORD *)(v42 + 1520) + 1;
          }
          *(_DWORD *)(v42 + 152BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v44;
        }
      }
    }
    GlCustomLog(15, "AGC report:: LMS %u LTE_Count: %u\n", v2, v5);
    uint64_t v45 = *((void *)this + 25);
    *(_DWORD *)(v45 + 796) = *(_DWORD *)(v45 + 784);
    *(_DWORD *)(v45 + 784) = v5;
    GlCustomLog(15, "AGC report:: LMS %u L1_PM_Count: %u\n", v2, v48);
    uint64_t v46 = *((void *)this + 25);
    *(_DWORD *)(v46 + 80BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(v46 + 788);
    *(_DWORD *)(v46 + 788) = v48;
    uint64_t result = GlCustomLog(15, "AGC report:: LMS %u L5_PM_Count: %u\n", v2, v49);
    uint64_t v47 = *((void *)this + 25);
    *(_DWORD *)(v47 + 804) = *(_DWORD *)(v47 + 792);
    *(_DWORD *)(v47 + 792) = v49;
  }
  else
  {
    double v17 = BlueFin::GlMeSrdCtrlSm::AagcDecode4775(v3, v10);
    if ((_BYTE)v4) {
      float v18 = (float)((float)(log10f((float)v4) + (float)((float)(v4 << 19 >> 27) / 3.3219)) + -1.8062)
    }
          * 20.0;
    else {
      float v18 = 0.0;
    }
    float v19 = v17;
    if (v3 >= 5)
    {
      int v23 = "XXXXXXXX";
      if (v3 == 5) {
        int v23 = "L2";
      }
      uint64_t result = GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, v23, v19, v18);
      if (v3 != 5)
      {
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 2199, "GotRadioReport", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 2199, "0");
      }
      uint64_t v21 = 9;
      uint64_t v20 = 6;
    }
    else
    {
      uint64_t v20 = qword_263BACEB8[v3];
      uint64_t v21 = qword_263BACEE0[v3];
      uint64_t result = GlCustomLog(15, "AGC report:: LMS %u %s AAGC %.2f dB DAGC %.2f\n", v2, off_2655D83E0[v3], v19, v18);
    }
    uint64_t v24 = *((void *)this + 25);
    *(float *)(v24 + 180 + 4 * v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v19;
    *(float *)(v24 + 180 + 4 * v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18;
    if (v19 > 0.0 && v18 > 0.0)
    {
      if (*(_WORD *)(v24 + 1528))
      {
        float v25 = *(float *)(v24 + 4 * v3 + 1532);
        if (v25 > 0.0)
        {
          uint64_t v26 = v24 + 1504;
          if (v25 <= (float)(v18 + v19)) {
            int v27 = 0;
          }
          else {
            int v27 = *(_DWORD *)(v26 + 4 * v3) + 1;
          }
          *(_DWORD *)(v26 + 4 * v3) = v27;
        }
      }
    }
  }
  return result;
}

double BlueFin::GlMeSrdCtrlSm::DagcDecode4777(BlueFin::GlMeSrdCtrlSm *this, int a2)
{
  if (!this)
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 2352, "DagcDecode4777", (char)"ulFracPart != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 2352, "ulFracPart != 0");
  }
  return (float)((float)((float)(log10f((float)this) + (float)((float)a2 / 3.3219)) + -1.8062) * 20.0);
}

void BlueFin::GlMeSrdSatMgr::ProcessPending(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6 = a1;
  uint64_t v196 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a1 + 6544) != a2)
  {
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
    BlueFin::GlSetBase::operator|=(v6 + 56, v6 + 248);
    *(_OWORD *)(BlueFin::GlSetBase::operator=(v6 + 424, v6 + 248) + 12) = *(_OWORD *)(v6 + 260);
    *(void *)double v183 = v185;
    LOBYTE(v184) = 4;
    v185[1] = 0;
    v185[0] = 0;
    BlueFin::GlSetBase::OperatorBinaryInversion(v6 + 248, (int **)v183);
    BlueFin::GlSetBase::operator&=(v6 + 216, (uint64_t)v183);
    BlueFin::GlSetBase::operator=(v6 + 248, v6 + 216);
    *(_OWORD *)(v6 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(v6 + 228);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
  }
  *(_DWORD *)(v6 + 6544) = a2;
  BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v6 + 152));
  unsigned int v8 = (unsigned char *)(v6 + 6296);
  float v157 = (unsigned char *)(v6 + 6296);
  if (HasAny && (!*(unsigned char *)(v6 + 6548) || a4 != 0))
  {
    char v10 = *(unsigned char *)(v6 + 6548) + 1;
    *(unsigned char *)(v6 + 6548) = v10;
    uint64_t v186 = BlueFin::GlMeSrdSatMgr::OnReliableTransactionAck;
    uint64_t v187 = v6;
    v188[0] = v10;
    *(_WORD *)&v188[1] = 1;
    uint64_t v189 = a3;
    int v190 = 0;
    __int16 v191 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, 1);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
    v183[0] = *(unsigned char *)(v6 + 160);
    memcpy(&v184, *(const void **)(v6 + 152), 4 * v183[0]);
    *(_WORD *)&v183[2] = 0;
    v183[1] = 0;
    *(_DWORD *)&v183[4] = v184;
    while (1)
    {
      BlueFin::GlSetIterator::operator++(v183);
      if (v183[1] == v183[0]) {
        break;
      }
      unsigned __int8 v11 = v183[2];
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
      (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *), void))(*(void *)v13 + 120))(v13, &v186, v11);
    }
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v186);
    BlueFin::GlSetBase::operator|=(v6 + 184, v6 + 152);
    bzero(*(void **)(v6 + 152), ((4 * *(unsigned __int8 *)(v6 + 160) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v186);
    unsigned int v8 = (unsigned char *)(v6 + 6296);
  }
  if (*v8)
  {
    uint64_t v14 = v194;
    long long v192 = v194;
    LOBYTE(v193) = 4;
    v194[1] = 0;
    v194[0] = 0;
    v183[0] = *(unsigned char *)(v6 + 128);
    memcpy(&v184, *(const void **)(v6 + 120), 4 * v183[0]);
    *(_WORD *)&v183[2] = 0;
    v183[1] = 0;
    *(_DWORD *)&v183[4] = v184;
    BlueFin::GlSetIterator::operator++(v183);
    if (v183[1] == v183[0])
    {
      unsigned int v15 = 4;
    }
    else
    {
      do
      {
        unsigned int v18 = v183[2];
        BlueFin::GlMeSrdSatMgr::GetSvid((void *)v6, v183[2], &v186);
        unint64_t v19 = (unint64_t)v186 >> 5;
        uint64_t v20 = 1 << (v186 & 0x1F);
        if (((_BYTE)v186 + 117) >= 0x24u) {
          uint64_t v21 = 552;
        }
        else {
          uint64_t v21 = 648;
        }
        int v22 = (v20 & *(_DWORD *)(*(void *)(v6 + v21) + 4 * v19)) != 0;
        uint64_t v23 = *(void *)(v6 + 6288);
        uint64_t v24 = v23 + 52 * v18;
        int v26 = *(unsigned __int8 *)(v24 + 30);
        float v25 = (unsigned char *)(v24 + 30);
        if (v26 != v22)
        {
          *float v25 = v22;
          v192[v18 >> 5] |= 1 << v18;
        }
        int v27 = (v20 & *(_DWORD *)(*(void *)(v6 + 600) + 4 * v19)) != 0;
        uint64_t v28 = v23 + 52 * v18;
        int v30 = *(unsigned __int8 *)(v28 + 31);
        uint64_t v29 = (unsigned char *)(v28 + 31);
        if (v30 != v27)
        {
          *uint64_t v29 = v27;
          v192[v18 >> 5] |= 1 << v18;
        }
        int v31 = (v20 & (*(_DWORD *)(*(void *)(v6 + 984) + 4 * v19) | *(_DWORD *)(*(void *)(v6 + 888)
                                                                                             + 4 * v19) | *(_DWORD *)(*(void *)(v6 + 1032) + 4 * v19))) != 0;
        uint64_t v32 = v23 + 52 * v18;
        int v34 = *(unsigned __int8 *)(v32 + 32);
        uint64_t v33 = (unsigned char *)(v32 + 32);
        if (v34 != v31)
        {
          *uint64_t v33 = v31;
          v192[v18 >> 5] |= 1 << v18;
        }
        BlueFin::GlSetIterator::operator++(v183);
      }
      while (v183[1] != v183[0]);
      uint64_t v14 = v192;
      if (*v192)
      {
LABEL_37:
        *(_WORD *)uint64_t v188 = 256;
        uint64_t v186 = 0;
        uint64_t v187 = 0;
        v188[2] = 0;
        uint64_t v189 = a3;
        int v190 = 0;
        __int16 v191 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, 1);
        v183[0] = v193;
        memcpy(&v184, v192, 4 * v193);
        *(_WORD *)&v183[2] = 0;
        v183[1] = 0;
        *(_DWORD *)&v183[4] = v184;
        BlueFin::GlSetIterator::operator++(v183);
        while (v183[1] != v183[0])
        {
          uint64_t v35 = v183[2];
          unsigned __int8 v174 = 0;
          unsigned __int16 v173 = 0;
          BlueFin::GlMeSrdSatMgr::GetSvid((void *)v6, v183[2], &v179);
          BlueFin::GlMeSrdSatMgr::GetSatControl(v6, v35, (uint64_t)&v179, (uint64_t)&v173);
          BlueFin::GlMeSrdSatMgr::GetSvid((void *)v6, v35, &v179);
          if ((v179 + 117) <= 0x23u)
          {
            int v36 = v173 & 0xFFEF | (v174 << 16);
            v173 &= ~0x10u;
            unsigned __int8 v174 = BYTE2(v36);
          }
          if ((*(unsigned int (**)(void))(**(void **)(v6 + 6552) + 352))(*(void *)(v6 + 6552)))
          {
            uint64_t v37 = *(void *)(v6 + 6288) + 52 * v35;
            uint64_t v38 = *(unsigned __int8 *)(v37 + 5);
            if (!*(unsigned char *)(v37 + 5))
            {
              int v154 = "ucNumCarriers >= 1";
              int v155 = 1267;
              DeviceFaultNotify("glmesrd_sat_mgr.cpp", 1267, "UpdateSatControl", (char)"ucNumCarriers >= 1");
              goto LABEL_205;
            }
            if (v38 > 4)
            {
              int v154 = "ucNumCarriers <= _DIM(m_aotSatData[ucSatid].aetSignalIndex)";
              int v155 = 1268;
              DeviceFaultNotify("glmesrd_sat_mgr.cpp", 1268, "UpdateSatControl", (char)"ucNumCarriers <= _DIM(m_aotSatData[ucSatid].aetSignalIndex)");
LABEL_205:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v155, v154);
            }
            uint64_t v39 = 52 * v35 + 8;
            do
            {
              unsigned int v40 = *(_DWORD *)(*(void *)(v6 + 6288) + v39);
              EswSignalint Index = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(v40);
              LOWORD(v179) = v173;
              BYTE2(v179) = v174;
              if (v40)
              {
                int v42 = v179 & 0xFFF7 | (BYTE2(v179) << 16);
                LOWORD(v179) = v179 & 0xFFF7;
                BYTE2(v179) = BYTE2(v42);
              }
              uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
              uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 64))(v43);
              (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *), uint64_t, uint64_t, uint64_t *))(*(void *)v44 + 112))(v44, &v186, v35, EswSignalIndex, &v179);
              v39 += 4;
              --v38;
            }
            while (v38);
          }
          else
          {
            uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
            uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 64))(v45);
            (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *), uint64_t, unsigned __int16 *))(*(void *)v46 + 104))(v46, &v186, v35, &v173);
          }
          BlueFin::GlSetIterator::operator++(v183);
        }
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v186);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v186);
        goto LABEL_51;
      }
      unsigned int v15 = v193;
      if (v193 < 2u)
      {
LABEL_51:
        unsigned char *v157 = 0;
        goto LABEL_52;
      }
    }
    if (!*((_DWORD *)v14 + 1))
    {
      uint64_t v16 = 2;
      while (v15 != v16)
      {
        if (*((_DWORD *)v14 + v16++))
        {
          if (v16 - 1 < (unint64_t)v15) {
            goto LABEL_37;
          }
          goto LABEL_51;
        }
      }
      goto LABEL_51;
    }
    goto LABEL_37;
  }
LABEL_52:
  uint64_t v47 = (BlueFin::GlSetBase *)(v6 + 88);
  uint64_t v161 = v6;
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v6 + 88)))
  {
    int v162 = (void *)(v6 + 792);
    double v159 = (void *)(v6 + 840);
    int v160 = (BlueFin::GlSetBase *)(v6 + 88);
    do
    {
      *(_WORD *)uint64_t v188 = 256;
      uint64_t v186 = 0;
      uint64_t v187 = 0;
      v188[2] = 0;
      uint64_t v189 = a3;
      int v190 = 0;
      __int16 v191 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, 1);
      v183[0] = *(unsigned char *)(v6 + 96);
      memcpy(&v184, *(const void **)(v6 + 88), 4 * v183[0]);
      *(_WORD *)&v183[2] = 0;
      v183[1] = 0;
      *(_DWORD *)&v183[4] = v184;
      BlueFin::GlSetIterator::operator++(v183);
      if (v183[1] != v183[0])
      {
        int v164 = 6;
        while (1)
        {
          uint64_t v48 = v183[2];
          double v166 = *(unsigned char **)(v6 + 6288);
          int v49 = &v166[52 * v183[2]];
          unint64_t v50 = *v49;
          uint64_t v51 = 1 << (v50 & 0x1F);
          if ((v50 + 117) >= 0x24u) {
            uint64_t v52 = 552;
          }
          else {
            uint64_t v52 = 648;
          }
          uint64_t v53 = (v50 >> 3) & 0x1C;
          v49[30] = (v51 & *(_DWORD *)(*(void *)(v6 + v52) + v53)) != 0;
          v49[31] = (v51 & *(_DWORD *)(*(void *)(v6 + 600) + v53)) != 0;
          unsigned __int8 v182 = 0;
          unsigned __int16 v181 = 0;
          BlueFin::GlMeSrdSatMgr::GetSatControl(v6, v48, (uint64_t)v49, (uint64_t)&v181);
          int v54 = BlueFin::GlMeSrdAsicUnitConverter::Svid2SvParamType(v49);
          uint64_t v55 = *(void *)v54;
          int v180 = *((_DWORD *)v54 + 2);
          uint64_t v179 = v55;
          if ((*v49 + 117) <= 0x23u)
          {
            if ((*(unsigned int (**)(void))(**(void **)(v6 + 6552) + 552))(*(void *)(v6 + 6552)))
            {
              char v56 = v166[52 * v48 + 44];
              if (v56) {
                char v56 = v166[52 * v48 + 1] != 71;
              }
            }
            else
            {
              char v56 = 0;
            }
            if ((((unint64_t)*(unsigned int *)(*(void *)(v6 + 648) + (((unint64_t)*v49 >> 3) & 0x1C)) >> (*v49 & 0x1F)) & 1) != 0
              && (v56 & 1) == 0
              && ((*(uint64_t (**)(void))(**(void **)(v6 + 6552) + 256))(*(void *)(v6 + 6552)) & 1) == 0
              && ((*(uint64_t (**)(void))(**(void **)(v6 + 6552) + 264))(*(void *)(v6 + 6552)) & 1) == 0)
            {
              LOWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v180 | 0xFF00;
              char v57 = 2 * *v49 - 21;
              HIDWORD(v179) = 10;
              LOWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)&v57 | 0xFF00;
            }
            int v58 = v181 & 0xFFE7 | (v182 << 16);
            v181 &= 0xFFE7u;
            unsigned __int8 v182 = BYTE2(v58);
          }
          *(void *)int v168 = v48;
          if (v166[52 * v48 + 44])
          {
            unint64_t v59 = *v49;
            if ((v59 + 117) >= 0x24u && (v59 - 52) >= 0xEu) {
              char v61 = 64;
            }
            else {
              char v61 = -64;
            }
            int v62 = v162;
            if ((v59 - 76) < 0x3F
              || ((v59 - 1) >= 0x20u ? (BOOL v63 = (v59 - 66) > 9u) : (BOOL v63 = 0),
                  int v62 = v159,
                  !v63))
            {
              if ((*(unsigned int *)(*v62 + ((v59 >> 3) & 0x1C)) >> (v59 & 0x1F))) {
                char v61 = -64;
              }
            }
          }
          else
          {
            char v61 = 0;
          }
          if ((*(unsigned int (**)(void))(**(void **)(v6 + 6552) + 352))(*(void *)(v6 + 6552))) {
            break;
          }
          uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
          uint64_t v90 = (*(uint64_t (**)(uint64_t))(*(void *)v89 + 64))(v89);
          int v91 = (*(uint64_t (**)(uint64_t))(*(void *)v90 + 24))(v90);
          if (v164 + v91 + 3 > (*(unsigned int (**)(void))(**(void **)(v6 + 6552) + 416))(*(void *)(v6 + 6552))) {
            goto LABEL_130;
          }
          if (v166[52 * *(unsigned int *)v168 + 5] != 1)
          {
            double v152 = "ucNumCarriers == 1";
            int v153 = 763;
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 763, "CreateDeferredSat", (char)"ucNumCarriers == 1");
            goto LABEL_199;
          }
          if (*(_DWORD *)&v166[52 * *(unsigned int *)v168 + 8])
          {
            double v152 = "rotSatData.aetSignalIndex[0] == SIGNAL_INDEX_0";
            int v153 = 764;
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 764, "CreateDeferredSat", (char)"rotSatData.aetSignalIndex[0] == SIGNAL_INDEX_0");
            goto LABEL_199;
          }
          uint64_t v92 = *(void *)(v6 + 6288);
          if (!*(unsigned char *)(v92 + 52 * *(unsigned int *)v168 + 34))
          {
            double v152 = "m_aotSatData[ucSatid].stAidIds.astAidId[SIGNAL_INDEX_0].bValid";
            int v153 = 765;
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 765, "CreateDeferredSat", (char)"m_aotSatData[ucSatid].stAidIds.astAidId[SIGNAL_INDEX_0].bValid");
LABEL_199:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v153, v152);
          }
          v164 += v91 + 3;
          uint64_t v93 = *(void *)(v6 + 6560);
          uint64_t v94 = *(void *)(v6 + 6552);
          uint64_t v95 = *(unsigned __int8 *)(v92 + 52 * *(unsigned int *)v168 + 1);
          uint64_t v96 = *v49;
          LOBYTE(v192) = v96;
          HIDWORD(v192) = 0;
          __int16 v193 = 575;
          if ((v96 + 67) >= 0x44u)
          {
            uint64_t v97 = BlueFin::GlSvId::s_aucSvId2gnss[v96];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v97] == 255) {
              HIDWORD(v192) = -1;
            }
            else {
              __int16 v193 = BlueFin::GlSignalId::s_ausGnss2signalId[v97]
            }
                   + v96
                   - BlueFin::GlSvId::s_aucGnss2minSvId[v97];
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD **, void))(*(void *)v93 + 72))(v93, v94, v95, &v192, 0) & 1) == 0)
          {
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 769, "CreateDeferredSat", (char)"bSearchWithinSystemLimits");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 769, "bSearchWithinSystemLimits");
          }
          uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
          uint64_t v99 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 64))(v98);
          (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *)))(*(void *)v99 + 16))(v99, &v186);
LABEL_125:
          *(_DWORD *)(*(void *)(v6 + 120) + 4 * (*(_DWORD *)v168 >> 5)) |= 1 << SLOBYTE(v168[0]);
          BlueFin::GlSetBase::Remove((uint64_t)v47, *(int *)v168);
          for (uint64_t i = 0; i != 4; ++i)
            *(unsigned char *)(*(void *)(v6 + 6288) + 52 * *(unsigned int *)v168 + 24 + i) = 0;
          *(unsigned char *)(*(void *)(v6 + 6288) + 52 * *(unsigned int *)v168 + 44) = 0;
          *(unsigned char *)(*(void *)(v6 + 6288) + 52 * *(unsigned int *)v168 + 45) = -1;
          *(_DWORD *)(*(void *)(v6 + 6288) + 52 * *(unsigned int *)v168 + 48) = 0;
          BlueFin::GlSetIterator::operator++(v183);
          if (v183[1] == v183[0]) {
            goto LABEL_130;
          }
        }
        uint64_t v64 = &v166[52 * *(unsigned int *)v168];
        uint64_t v65 = v64[5];
        if (!v64[5])
        {
          __double2 v150 = "ucNumCarriers >= 1";
          int v151 = 662;
          DeviceFaultNotify("glmesrd_sat_mgr.cpp", 662, "CreateDeferredSat", (char)"ucNumCarriers >= 1");
          goto LABEL_195;
        }
        if (v65 >= 4)
        {
          __double2 v150 = "ucNumCarriers <= _DIM(sat_init_aid_array)";
          int v151 = 663;
          DeviceFaultNotify("glmesrd_sat_mgr.cpp", 663, "CreateDeferredSat", (char)"ucNumCarriers <= _DIM(sat_init_aid_array)");
LABEL_195:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v151, v150);
        }
        uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
        uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 64))(v66);
        int v68 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v67 + 56))(v67, v65);
        if (v164 + v68 + 3 <= (*(unsigned int (**)(void))(**(void **)(v6 + 6552) + 416))(*(void *)(v6 + 6552)))
        {
          v164 += v68 + 3;
          unint64_t v69 = 0;
          uint64_t v70 = v65;
          uint64_t v71 = 0;
          LOBYTE(v173) = v179;
          if ((HIDWORD(v179) & 0xFFFFFFFE) == 4) {
            int v72 = (__int16)v180;
          }
          else {
            int v72 = (unsigned __int16)v180;
          }
          int v175 = HIDWORD(v179);
          int v176 = v72;
          uint64_t v73 = (uint64_t)&v166[52 * *(unsigned int *)v168 + 33];
          uint64_t v177 = 0;
          int v178 = 0;
          uint64_t v163 = v70;
          uint64_t v74 = 8 * v70;
          uint64_t v75 = (unsigned __int16 *)v195;
          uint64_t v76 = 8;
          while (1)
          {
            signed int v77 = *(_DWORD *)&v49[v76];
            LODWORD((&v192)[v69 / 8]) = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(v77);
            if (!*(unsigned char *)(v73 + 2 * v77 + 1))
            {
              DeviceFaultNotify("glmesrd_sat_mgr.cpp", 689, "CreateDeferredSat", (char)"rotSatData.stAidIds.astAidId[etSignalIndex].bValid");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 689, "rotSatData.stAidIds.astAidId[etSignalIndex].bValid");
            }
            double v79 = (char *)&(&v192)[v69 / 8];
            v79[4] = *(unsigned char *)(v73 + 2 * v77);
            v79[5] = v61;
            if (v77 == 2)
            {
              if (*v49 - 76 <= 0x3E) {
                v79[5] = v61 & 0x7F;
              }
              *uint64_t v75 = v181;
              *((unsigned char *)v75 + 2) = v182;
              double v80 = v75;
            }
            else
            {
              *uint64_t v75 = v181;
              *((unsigned char *)v75 + 2) = v182;
              if (!v77) {
                goto LABEL_101;
              }
              double v80 = (unsigned __int16 *)&v195[3 * v71];
            }
            int v81 = *v80;
            unsigned int v82 = v81 & 0xFFFFFFE7 | (*((unsigned __int8 *)v80 + 2) << 16);
            *double v80 = v81 & 0xFFE7;
            *((unsigned char *)v80 + 2) = BYTE2(v82);
LABEL_101:
            uint64_t v83 = *v49;
            v170[0] = *v49;
            int v171 = v77;
            __int16 v172 = 575;
            if (v77 != -1 && (v83 + 67) >= 0x44u)
            {
              uint64_t v84 = BlueFin::GlSvId::s_aucSvId2gnss[v83];
              if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v77 - v77 + v84] == 255) {
                int v171 = -1;
              }
              else {
                __int16 v172 = BlueFin::GlSignalId::s_ausGnss2signalId[v84]
              }
                     + v83
                     - BlueFin::GlSvId::s_aucGnss2minSvId[v84]
                     + v77 * BlueFin::GlSvId::s_aucGnss2numSvId[v84];
            }
            *(_DWORD *)((char *)&v173 + v76) = BlueFin::GlMeSrdAsicUnitConverter::SignalId2MultiCarrType((BlueFin::GlMeSrdAsicUnitConverter *)v170, v78);
            ++v71;
            uint64_t v75 = (unsigned __int16 *)((char *)v75 + 3);
            v69 += 8;
            v76 += 4;
            if (v74 == v69)
            {
              uint64_t v85 = v166[52 * *(unsigned int *)v168 + 28];
              uint64_t v6 = v161;
              if (*(unsigned char *)(v73 + 2 * v85 + 1))
              {
                uint64_t v86 = *(int *)&v166[52 * *(unsigned int *)v168 + 8 + 4 * v85];
                uint64_t v87 = *v49;
                v170[0] = *v49;
                int v171 = v86;
                __int16 v172 = 575;
                if (v86 != -1 && (v87 + 67) >= 0x44u)
                {
                  uint64_t v88 = BlueFin::GlSvId::s_aucSvId2gnss[v87];
                  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v86 - v86 + v88] == 255) {
                    int v171 = -1;
                  }
                  else {
                    __int16 v172 = BlueFin::GlSignalId::s_ausGnss2signalId[v88]
                  }
                         + v87
                         - BlueFin::GlSvId::s_aucGnss2minSvId[v88]
                         + v86 * BlueFin::GlSvId::s_aucGnss2numSvId[v88];
                }
                if (((*(uint64_t (**)(void, void, void, unsigned char *, void))(**(void **)(v161 + 6560)
                                                                                         + 72))(*(void *)(v161 + 6560), *(void *)(v161 + 6552), *(unsigned __int8 *)(*(void *)(v161 + 6288) + 52 * *(unsigned int *)v168 + v85 + 1), v170, 0) & 1) == 0)
                {
                  DeviceFaultNotify("glmesrd_sat_mgr.cpp", 727, "CreateDeferredSat", (char)"bSearchWithinSystemLimits");
                  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 727, "bSearchWithinSystemLimits");
                }
              }
              uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
              uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)v100 + 64))(v100);
              LOBYTE(v156) = v85;
              (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *), __int16 *, unsigned __int16 *, uint64_t, uint64_t, uint64_t, unsigned char *, _DWORD **, int))(*(void *)v101 + 32))(v101, &v186, *(__int16 **)v168, &v173, *(void *)(v161 + 6288) + 52 * *(unsigned int *)v168 + 1, 1, v163, v195, &v192, v156);
              uint64_t v47 = v160;
              goto LABEL_125;
            }
          }
        }
        uint64_t v47 = v160;
      }
LABEL_130:
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v186);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v186);
    }
    while (BlueFin::GlSetBase::HasAny(v47));
  }
  long double v103 = (void **)(v6 + 6384);
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v6 + 6384))
    || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v6 + 6304)))
  {
    *(_WORD *)uint64_t v188 = 256;
    uint64_t v186 = 0;
    uint64_t v187 = 0;
    v188[2] = 0;
    uint64_t v189 = a3;
    int v190 = 0;
    __int16 v191 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, 1);
    v183[0] = v157[16];
    unint64_t v104 = *(void *)(v6 + 6304);
    size_t v105 = 4 * v183[0];
    memcpy(&v184, (const void *)v104, v105);
    *(_WORD *)&v183[2] = 0;
    v183[1] = 0;
    *(_DWORD *)&v183[4] = v184;
    BlueFin::GlSetIterator::operator++(v183);
    if (v183[1] == v183[0])
    {
      unsigned int v106 = v157;
    }
    else
    {
      uint64_t v165 = (void **)(v6 + 6384);
      float v167 = (void *)(v6 + 840);
      *(void *)__int16 v169 = v6 + 792;
      do
      {
        unsigned int v107 = *(unsigned __int16 *)&v183[2];
        uint64_t v108 = BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v192, *(unsigned __int16 *)&v183[2]);
        unint64_t v109 = v192;
        if ((*(unsigned int *)(*(void *)(v6 + 360) + ((v109 >> 3) & 0x1C)) >> (v109 & 0x1F)))
        {
          BlueFin::GlSatCarrId::GlSatCarrId(v108, v107);
          signed int v110 = HIDWORD(v192);
          BlueFin::GlMeSrdSatMgr::GetSvid((void *)v6, v109, &v179);
          uint64_t v111 = *(void *)(v6 + 6288);
          BlueFin::GlMeSrdSatMgr::GetSatControl(v6, v109, (uint64_t)&v179, (uint64_t)&v173);
          if (v110 || (v179 + 117) <= 0x23u)
          {
            int v112 = v173 & 0xFFE7 | (v174 << 16);
            v173 &= 0xFFE7u;
            unsigned __int8 v174 = BYTE2(v112);
          }
          uint64_t v113 = v111 + 52 * v109 + 33;
          if (!*(unsigned char *)(v113 + 2 * v110 + 1))
          {
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 407, "UpdateCarrierTypes", (char)"rotSatData.stAidIds.astAidId[etSignalIndex].bValid");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 407, "rotSatData.stAidIds.astAidId[etSignalIndex].bValid");
          }
          uint64_t v114 = *(unsigned __int8 *)(v113 + 2 * v110);
          unsigned int v116 = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(v110);
          if ((v179 + 117) >= 0x24u && (v179 - 52) >= 0xEu) {
            unsigned __int8 v118 = 95;
          }
          else {
            unsigned __int8 v118 = -33;
          }
          uint64_t v119 = *(void **)v169;
          if ((v179 - 76) < 0x3Fu
            || (uint64_t v119 = v167, (v179 - 1) < 0x20u)
            || (uint64_t v119 = v167, (v179 - 66) <= 9u))
          {
            if (((unint64_t)*(unsigned int *)(*v119 + (((unint64_t)v179 >> 3) & 0x1C)) >> (v179 & 0x1F))) {
              unsigned __int8 v118 = -33;
            }
          }
          uint64_t v120 = *(unsigned __int8 *)(v111 + 52 * v109 + 5);
          if (*(unsigned char *)(v111 + 52 * v109 + 5))
          {
            uint64_t v121 = 0;
            uint64_t v122 = v111 + 52 * v109;
            unsigned __int8 v123 = -6;
            do
            {
              if (*(_DWORD *)(v122 + 4 * v121 + 8) == v110) {
                unsigned __int8 v123 = *(unsigned char *)(v122 + v121 + 1);
              }
              ++v121;
            }
            while (v120 != v121);
          }
          else
          {
            unsigned __int8 v123 = -6;
          }
          LOBYTE(v192) = v179;
          if (v110) {
            BOOL v124 = v110 == 3;
          }
          else {
            BOOL v124 = 1;
          }
          if (v124) {
            unsigned __int8 v125 = 2;
          }
          else {
            unsigned __int8 v125 = 1;
          }
          HIDWORD(v192) = v110;
          __int16 v193 = 575;
          if (v110 != -1 && (v179 + 67) >= 0x44u)
          {
            uint64_t v126 = BlueFin::GlSvId::s_aucSvId2gnss[v179];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v110 - v110 + v126] == 255) {
              HIDWORD(v192) = -1;
            }
            else {
              __int16 v193 = BlueFin::GlSignalId::s_ausGnss2signalId[v126]
            }
                   + v179
                   - BlueFin::GlSvId::s_aucGnss2minSvId[v126]
                   + v110 * BlueFin::GlSvId::s_aucGnss2numSvId[v126];
          }
          unsigned int v127 = BlueFin::GlMeSrdAsicUnitConverter::SignalId2MultiCarrType((BlueFin::GlMeSrdAsicUnitConverter *)&v192, v115);
          uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
          uint64_t v129 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 64))(v128);
          unint64_t v104 = v104 & 0xFFFFFFFFFF000000 | v173 | ((unint64_t)v174 << 16);
          (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *), unint64_t, void, void, void, unint64_t, void, unint64_t))(*(void *)v129 + 40))(v129, &v186, v109, v179, v123, v125, v104, v127, (v114 << 32) | ((unint64_t)v118 << 40) | v116);
          uint64_t v6 = v161;
        }
        BlueFin::GlSetIterator::operator++(v183);
      }
      while (v183[1] != v183[0]);
      unint64_t v104 = *(void *)(v6 + 6304);
      unsigned int v106 = v157;
      size_t v105 = 4 * v157[16];
      long double v103 = v165;
    }
    bzero((void *)v104, ((v105 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v183[0] = v106[96];
    int v130 = *(void **)(v6 + 6384);
    size_t v131 = 4 * v183[0];
    memcpy(&v184, v130, v131);
    *(_WORD *)&v183[2] = 0;
    v183[1] = 0;
    *(_DWORD *)&v183[4] = v184;
    BlueFin::GlSetIterator::operator++(v183);
    if (v183[1] != v183[0])
    {
      do
      {
        unsigned int v132 = *(unsigned __int16 *)&v183[2];
        uint64_t v133 = BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v192, *(unsigned __int16 *)&v183[2]);
        uint64_t v134 = v192;
        BlueFin::GlSatCarrId::GlSatCarrId(v133, v132);
        int v135 = HIDWORD(v192);
        uint64_t v136 = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(HIDWORD(v192));
        uint64_t v137 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 48))(v189);
        uint64_t v138 = (*(uint64_t (**)(uint64_t))(*(void *)v137 + 64))(v137);
        (*(void (**)(uint64_t, uint64_t (**)(BlueFin::GlMeSrdSatMgr *, void *), uint64_t, uint64_t))(*(void *)v138 + 48))(v138, &v186, v134, v136);
        BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v192, v134, v135);
        *(_DWORD *)(*(void *)(v6 + 6464) + 4 * ((v192 + 100 * BYTE4(v192)) >> 5)) |= 1 << ((_BYTE)v192 + 100 * BYTE4(v192));
        uint64_t v139 = *(void *)(v6 + 6288);
        if (*(unsigned char *)(v139 + 52 * v134 + 5))
        {
          unint64_t v140 = 0;
          uint64_t v141 = 52 * v134;
          int v142 = -1;
          do
          {
            uint64_t v143 = v139 + v141 + 4 * v140;
            int v144 = *(_DWORD *)(v143 + 8);
            if (v135 == v144) {
              int v142 = v140;
            }
            if (v142 != -1 && (uint64_t)v140 > v142)
            {
              *(_DWORD *)(v143 + 4) = v144;
              *(unsigned char *)(v139 + v141 + v14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v139 + v141 + v140 + 1);
              uint64_t v139 = *(void *)(v6 + 6288);
            }
            ++v140;
            uint64_t v146 = v139 + 52 * v134;
            unsigned int v149 = *(unsigned __int8 *)(v146 + 5);
            double v147 = (unsigned char *)(v146 + 5);
            char v148 = v149;
          }
          while (v140 < v149);
          if (v142 != -1)
          {
            unsigned char *v147 = v148 - 1;
            --*(unsigned char *)(v6 + 49);
          }
        }
        BlueFin::GlSetIterator::operator++(v183);
      }
      while (v183[1] != v183[0]);
      int v130 = *v103;
      size_t v131 = 4 * v157[96];
    }
    bzero(v130, ((v131 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v186);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v186);
  }
}

void sub_263920594(_Unwind_Exception *a1)
{
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)(v1 - 184));
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::IsSearchWithinSystemLimits(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5)
{
  if (a5 > 1) {
    return 1;
  }
  char v5 = a5;
  if (*(unsigned __int8 *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), a3)+ 2) == 255|| *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), a3)+ 2) == 7|| *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), a3)+ 2) == 8)
  {
    return 1;
  }
  unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)a1 + 48))(a1, a2, a3, a4);
  unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)a1 + 64))(a1, a2, a3, a4);
  if (!*(unsigned char *)(a1 + 24))
  {
    float v41 = "m_bRmLimitsProgrammed";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1483, "GetMaxNumParallelSsbs", (char)"m_bRmLimitsProgrammed");
    int v42 = 1483;
    goto LABEL_71;
  }
  if (!*(unsigned char *)(a1 + 38))
  {
    float v41 = "m_bSmLimitsProgrammed";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1484, "GetMaxNumParallelSsbs", (char)"m_bSmLimitsProgrammed");
    int v42 = 1484;
    goto LABEL_71;
  }
  unsigned int v13 = v12;
  unint64_t v14 = *(unsigned __int8 *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), a3)+ 2);
  if (v14 >= 9)
  {
    float v41 = "ucJmId < NUM_OF_SM_PARAMS";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1489, "GetMaxNumParallelSsbs", (char)"ucJmId < NUM_OF_SM_PARAMS");
    int v42 = 1489;
    goto LABEL_71;
  }
  uint64_t v15 = a1 - v14 + 8 * v14;
  unint64_t v16 = *(unsigned __int8 *)(v15 + 40);
  if (v16 >= 4)
  {
    float v41 = "ucGroupId < NUM_SEARCH_MANAGER_GROUPS";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1494, "GetMaxNumParallelSsbs", (char)"ucGroupId < NUM_SEARCH_MANAGER_GROUPS");
    int v42 = 1494;
LABEL_71:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v42, v41);
  }
  unsigned int v17 = *(unsigned __int8 *)(v15 + 43);
  unsigned int v18 = *(unsigned __int8 *)(a1 + v16 + 28);
  if (v17 >= v18) {
    unsigned int v19 = v18;
  }
  else {
    unsigned int v19 = v17;
  }
  uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 248))(*(void *)(a1 + 8), a3);
  uint64_t v21 = *a4;
  unsigned int v22 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a4 + 1)
                                                               - *((int *)a4 + 1)
                                                               + BlueFin::GlSvId::s_aucSvId2gnss[v21]];
  BOOL v23 = 1;
  if (v22 == 11 || (v24 = 1, v22 != 14) && ((BOOL v23 = v22 == 13, v22 > 0xD) || ((1 << v22) & 0x2124) == 0)) {
    BOOL v24 = v22 == 4;
  }
  unsigned int v43 = v13;
  int v25 = *(unsigned __int16 *)(v20 + 26);
  if ((v21 - 52) < 0xE)
  {
    if (v25 == 2)
    {
      int v26 = 1;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  char v27 = (v21 + 117) < 0xC1u || v23;
  int v26 = 1;
  if ((v27 & 1) == 0 && v25 != 2) {
LABEL_27:
  }
    int v26 = 0;
LABEL_28:
  float v28 = ceilf((float)v11 * 0.03125);
  unsigned int v29 = *(unsigned __int16 *)(v20 + 10);
  int v30 = 1;
  if (v29 > 0xFFB)
  {
    if (v29 == 4092 || v29 == 10230) {
      goto LABEL_35;
    }
  }
  else if (v29 == 1023 || v29 == 2046)
  {
    goto LABEL_35;
  }
  int v30 = 0;
LABEL_35:
  unsigned int v31 = v21 - 76;
  if (v29 == 372) {
    int v32 = 1;
  }
  else {
    int v32 = v30;
  }
  if (v23) {
    BOOL v33 = v32;
  }
  else {
    BOOL v33 = v29 != 372;
  }
  if (v31 >= 0x3F) {
    int v34 = v33;
  }
  else {
    int v34 = v30;
  }
  if (v29 == 310) {
    int v35 = 1;
  }
  else {
    int v35 = v30;
  }
  if (v24) {
    int v36 = v35;
  }
  else {
    int v36 = v34;
  }
  (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), a3);
  if (v28 > (float)v19 || v43 > v19 || (v26 & v36) == 0)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1644, "IsSearchWithinSystemLimits", (char)"IsSearchWithinSystemLimits1");
    goto LABEL_66;
  }
  uint64_t v39 = *(unsigned __int8 *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), a3)+ 4);
  uint64_t v40 = *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))() + 5);
  if (v39 != a3
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, void))(*(void *)a1 + 72))(a1, a2, v39, a4, (v5 + 1)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1664, "IsSearchWithinSystemLimits", (char)"IsSearchWithinSystemLimits2");
    goto LABEL_66;
  }
  uint64_t result = 1;
  if (v40 != a3 && v40 != v39)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *, void))(*(void *)a1 + 72))(a1, a2, v40, a4, (v5 + 1)))return 1; {
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1676, "IsSearchWithinSystemLimits", (char)"IsSearchWithinSystemLimits3");
    }
LABEL_66:
    CrashData();
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlMeRxParamStd::GetEswBinningStepParams(int **this, unsigned int a2)
{
  uint64_t v3 = BlueFin::GlMeRxParamStd::rMap(this);
  if (**((unsigned __int8 **)v3 + 1) <= a2)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 686, "GetEswBinningStepParams", (char)"ucBsid < *rMp.m_pucBsNum");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 686, "ucBsid < *rMp.m_pucBsNum");
  }
  return *(void *)(*((void *)v3 + 3) + 24) + 6 * a2;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetEswBinningStepParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 256);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetFftThroughputFromBsId(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, BlueFin::GlSignalId *a5)
{
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 248))(*(void *)(a1 + 8), a3);
  double v10 = (float)(*(float *)(v9 + 4) * 1000.0) + 0.5;
  double v11 = fmod(v10, 4294967300.0);
  if (v10 <= 4294967300.0) {
    double v11 = v10;
  }
  if (v11 < -4294967300.0) {
    double v11 = -fmod(-v11, 4294967300.0);
  }
  if (v11 < 0.0) {
    unsigned int v12 = --v11;
  }
  else {
    unsigned int v12 = v11;
  }
  unsigned int v13 = v12 - 1;
  if (v12 - 1 > 0x13 || ((v14 = *(unsigned __int16 *)(v9 + 26), v14 != 2) ? (BOOL v15 = v14 == 4) : (BOOL v15 = 1), !v15))
  {
    unsigned int v29 = "uiCoherentMs >= 1 && uiCoherentMs <= 20 && (rSrchParams.usDelaysPerChip == 2 || rSrchParams.usDelaysPerChip == 4)";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1322, "GetFftThroughputFromBsId", (char)"uiCoherentMs >= 1 && uiCoherentMs <= 20 && (rSrchParams.usDelaysPerChip == 2 || rSrchParams.usDelaysPerChip == 4)");
    int v30 = "glmesrd_receiver_parameters_programmer.cpp";
    int v31 = 1322;
    goto LABEL_36;
  }
  RmPivot = (unsigned __int8 *)BlueFin::GlMeSrdReceiverParametersProgrammer::GetRmPivot(a1, a2);
  unsigned int v17 = RmPivot[1];
  if (v17 >= 6)
  {
    unsigned int v29 = "ptRmPivot->g.q <= 5";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1325, "GetFftThroughputFromBsId", (char)"ptRmPivot->g.q <= 5");
    int v30 = "glmesrd_receiver_parameters_programmer.cpp";
    int v31 = 1325;
    goto LABEL_36;
  }
  if (RmPivot[22] <= 2u)
  {
    unsigned int v29 = "ptRmPivot->inv_g.q >= 3";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1326, "GetFftThroughputFromBsId", (char)"ptRmPivot->inv_g.q >= 3");
    int v30 = "glmesrd_receiver_parameters_programmer.cpp";
    int v31 = 1326;
LABEL_36:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v30, v31, v29);
  }
  int v18 = RmPivot[v13 + 2];
  int v19 = *(unsigned __int16 *)(v9 + 26);
  int v20 = *(unsigned __int8 *)a5;
  char EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(a5);
  if (*((unsigned __int16 *)a5 + 4) >= 0x23Fu) {
    goto LABEL_32;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a5 + 1)
                                                              - *((int *)a5 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]])
  {
LABEL_33:
    unsigned int v29 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v30 = "glsignalid.h";
    int v31 = 685;
    goto LABEL_36;
  }
  if (*(unsigned __int8 *)a5 - 76 <= 0x3E)
  {
    char EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(a5);
    if (*((unsigned __int16 *)a5 + 4) < 0x23Fu)
    {
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a5 + 1)
                                                                 - *((int *)a5 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]])
      {
        unsigned __int8 v23 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a5 + 1)
                                                                    - *((int *)a5 + 1)
                                                                    + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]]
            * EpochPerBit;
        goto LABEL_23;
      }
      goto LABEL_33;
    }
LABEL_32:
    unsigned int v29 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v30 = "glsignalid.h";
    int v31 = 678;
    goto LABEL_36;
  }
  unsigned __int8 v23 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a5 + 1)
                                                              - *((int *)a5 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]]
      * EpochPerSymbol;
LABEL_23:
  __int16 v24 = v23 / *(unsigned __int8 *)(v9 + 28);
  if (!*(unsigned char *)(v9 + 28)) {
    __int16 v24 = 1;
  }
  int v25 = v18 << (5 - v17);
  if (v19 == 4) {
    LOWORD(v25) = 2 * v25;
  }
  __int16 v26 = v25 * a4;
  if ((v20 - 76) < 0x3F) {
    char v27 = 1;
  }
  else {
    char v27 = 2 * ((v20 + 117) < 0x24u);
  }
  return (unsigned __int16)(v24 * (v26 << v27));
}

void *BlueFin::GlMeSrdReceiverParametersProgrammer::GetRmPivot(uint64_t a1, uint64_t a2)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) || *(unsigned char *)(a1 + 103))
  {
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1306, "GetRmPivot", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", 1306, "0");
  }
  if ((((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) & 0xF000FFFF) == 0x30000013
     || ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) & 0xF000FFFF) == 0x30000015)
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 1112))(a2) == 1
    && !(*(unsigned int (**)(uint64_t))(*(void *)a2 + 1144))(a2))
  {
    return &BlueFin::GlMeSrdReceiverParametersProgrammer::m_otRmPivot200Mhz4777;
  }
  else
  {
    return &BlueFin::GlMeSrdReceiverParametersProgrammer::m_otRmPivot4752;
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetImageAsicVersion(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsAsic(BlueFin::GlMeSrdAsicConfig *this)
{
  return (*(unsigned int (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 32))(this) ^ 1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsFpga(BlueFin::GlMeSrdAsicConfig *this)
{
  if ((*(unsigned int (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 16))(this) == -1)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 966, "IsFpga", (char)"GetImageAsicVersion() != ASIC_VERSION_UNKNOWN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 966, "GetImageAsicVersion() != ASIC_VERSION_UNKNOWN");
  }
  return *((unsigned __int8 *)this + 22);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetDspModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 539);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetSrchModeSetting(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 543);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetMemoryBinFromBsId(BlueFin::GlMeSrdReceiverParametersProgrammer *this, unsigned __int8 a2, int a3, const BlueFin::GlSignalId *a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 248))(*((void *)this + 1));
  uint64_t v7 = v6;
  int v8 = *(unsigned __int16 *)(v6 + 10);
  if (v8 != 1023 && v8 != 2046 && v8 != 4092)
  {
    int v9 = (((((v8 - ((2115 * v8) >> 16)) >> 1) + ((2115 * v8) >> 16)) >> 4)
                         - 1);
    if (*(_WORD *)(v6 + 26) == 4) {
      double v10 = (unsigned __int16 *)&unk_263BAFF58;
    }
    else {
      double v10 = (unsigned __int16 *)&unk_263BAFF76;
    }
    unsigned int v11 = v10[v9];
    int v12 = (v11 >> 8) * a3;
    LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11 * a3;
    unsigned int v13 = v12 + v11;
    unsigned int v14 = v13 >> 8;
    char v15 = v13 | v11;
    if (((BYTE1(v13) + 1) & 0x100) != 0) {
      char v16 = -1;
    }
    else {
      char v16 = BYTE1(v13) + 1;
    }
    if (v15) {
      LOBYTE(a3) = v16;
    }
    else {
      LOBYTE(a3) = v14;
    }
  }
  int v17 = *(unsigned __int8 *)a4;
  char EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(a4);
  if (*((unsigned __int16 *)a4 + 4) >= 0x23Fu) {
    goto LABEL_27;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a4 + 1)
                                                              - *((int *)a4 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a4]])
  {
LABEL_28:
    __int16 v24 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v25 = 685;
LABEL_29:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v25, v24);
  }
  if (*(unsigned __int8 *)a4 - 76 <= 0x3E)
  {
    char EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(a4);
    if (*((unsigned __int16 *)a4 + 4) < 0x23Fu)
    {
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a4 + 1)
                                                                 - *((int *)a4 + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a4]])
      {
        unsigned __int8 v20 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a4 + 1)
                                                                    - *((int *)a4 + 1)
                                                                    + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a4]]
            * EpochPerBit;
        goto LABEL_20;
      }
      goto LABEL_28;
    }
LABEL_27:
    __int16 v24 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v25 = 678;
    goto LABEL_29;
  }
  unsigned __int8 v20 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a4 + 1)
                                                              - *((int *)a4 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a4]]
      * EpochPerSymbol;
LABEL_20:
  if (*(unsigned char *)(v7 + 28)) {
    char v21 = v20 / *(unsigned char *)(v7 + 28);
  }
  else {
    char v21 = 1;
  }
  if ((v17 - 76) < 0x3F) {
    char v22 = 1;
  }
  else {
    char v22 = 2 * ((v17 + 117) < 0x24u);
  }
  return (v21 * ((_BYTE)a3 << v22));
}

uint64_t BlueFin::GlMeRxParamStd::GetEswSrchParamFromSpid(BlueFin::GlMeRxParamStd *this, unsigned int a2)
{
  if (BlueFin::GlMeRxParamLimits::GetMaxAllowedSrchParamIds(**((_DWORD **)this + 1)) <= a2)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 670, "GetEswSrchParamFromSpid", (char)"ucSpid < GetMaxAllowedSrchParamIds()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 670, "ucSpid < GetMaxAllowedSrchParamIds()");
  }
  return *(void *)(*((void *)BlueFin::GlMeRxParamStd::rMap((int **)this) + 3) + 16) + 40 * a2;
}

unint64_t BlueFin::GlMeRxParamLimits::GetMaxAllowedSrchParamIds(int a1)
{
  if (a1 >= 6)
  {
    int v2 = "etRxType < GLME_RX_NUM_TYPES";
    DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1056, "GetMaxAllowedSrchParamIds", (char)"etRxType < GLME_RX_NUM_TYPES");
    int v3 = 1056;
    goto LABEL_5;
  }
  if (a1 >= 6)
  {
    int v2 = "0";
    DeviceFaultNotify("glme_receiver_parameters_ifc.h", 1072, "GetMaxAllowedSrchParamIds", (char)"0");
    int v3 = 1072;
LABEL_5:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_receiver_parameters_ifc.h", v3, v2);
  }
  return (0x7E45683E6F59uLL >> (8 * a1)) & 0x7F;
}

uint64_t BlueFin::GlMeRxParamStd::GetEswSrchParamFromBsid(int **this, unsigned int a2)
{
  int v4 = BlueFin::GlMeRxParamStd::rMap(this);
  if (**((unsigned __int8 **)v4 + 1) <= a2)
  {
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 678, "GetEswSrchParamFromBsid", (char)"ucBsid < *rMp.m_pucBsNum");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", 678, "ucBsid < *rMp.m_pucBsNum");
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*((void *)v4 + 3) + 24) + 6 * a2 + 1);
  uint64_t v6 = (uint64_t (*)(int **, uint64_t))*((void *)*this + 30);

  return v6(this, v5);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetEswSrchParamFromBsid(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 248);

  return v1();
}

uint64_t BlueFin::GlSignalId::GetEpochPerSymbol(BlueFin::GlSignalId *this)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    uint64_t v7 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 744, "GetEpochPerSymbol", (char)"IsValid()");
    int v8 = 744;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v8, v7);
  }
  uint64_t v1 = *(unsigned __int8 *)this;
  if ((v1 - 76) > 0x3E || ((1 << (v1 - 76)) & 0x7C0000000000001FLL) == 0)
  {
    int v3 = *((_DWORD *)this + 1);
  }
  else
  {
    int v3 = *((_DWORD *)this + 1);
    if (!v3) {
      return 2;
    }
  }
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[v1];
  uint64_t v5 = (char *)&BlueFin::GlSignalId::s_aucSignalIndexAndGnss2epochPerSymbol + 8 * v3 - v3;
  uint64_t result = v5[v4];
  if (!v5[v4])
  {
    uint64_t v7 = "ucEpochPerSymbol != 0";
    DeviceFaultNotify("glsignalid.h", 756, "GetEpochPerSymbol", (char)"ucEpochPerSymbol != 0");
    int v8 = 756;
    goto LABEL_13;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetMinMemBinResourceForBsId(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(unsigned __int8 *)((*(uint64_t (**)(void *, uint64_t))(*a1[1] + 248))(a1[1], a3) + 13);
  int v8 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[3];

  return v8(a1, a3, v7, a4);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetMinFFTResourceForBsId(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned __int8 *)((*(uint64_t (**)(void *, uint64_t))(*a1[1] + 248))(a1[1], a3) + 13);
  int v9 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[2];

  return v9(a1, a2, a3, v8, a4);
}

uint64_t BlueFin::EswRpcEnc::GetEswSatRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 64);

  return v3();
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswSatRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 104;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(unsigned int a1)
{
  if (a1 >= 4)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1631, "GetEswSignalIndex", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1631, "0");
  }
  return a1 + 1;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::SignalId2MultiCarrType(BlueFin::GlMeSrdAsicUnitConverter *this, const BlueFin::GlSignalId *a2)
{
  uint64_t v2 = *(unsigned __int8 *)this;
  uint64_t v3 = BlueFin::GlSvId::s_aucSvId2gnss[v2];
  uint64_t v4 = 0;
  switch(BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)this + 1) - *((int *)this + 1) + v3])
  {
    case 0:
    case 6:
    case 11:
      return BlueFin::GlMeSrdAsicUnitConverter::m_stLookUpSvid2SvParam[6 * *(unsigned __int8 *)this + 4];
    case 1:
      if (v3 == 3)
      {
        return BlueFin::GlMeSrdAsicUnitConverter::GetQzssL2CInitShiftRegisterState(this);
      }
      else
      {
        if (BlueFin::GlSvId::s_aucSvId2gnss[v2]) {
          return 0;
        }
        return BlueFin::GlMeSrdAsicUnitConverter::GetGpsL2CInitShiftRegisterState((unsigned __int8 *)this);
      }
    case 2:
      if (v3 == 3) {
        return BlueFin::GlMeSrdAsicUnitConverter::GetQzssL5XbCodeAdvance(this);
      }
      if (BlueFin::GlSvId::s_aucSvId2gnss[v2]) {
        return 0;
      }
      return BlueFin::GlMeSrdAsicUnitConverter::GetGpsL5XbCodeAdvance((unsigned __int8 *)this);
    case 3:
      return (__int16)BlueFin::GlMeSrdAsicUnitConverter::m_stLookUpSvid2SvParam[6
                                                                                            * *(unsigned __int8 *)this
                                                                                            + 4];
    case 4:
      return BlueFin::GlMeSrdAsicUnitConverter::GetGalE5bQCodeOffset(this);
    case 5:
      return BlueFin::GlMeSrdAsicUnitConverter::GetGalE5aQCodeOffset(this);
    case 7:
      return v4;
    case 8:
      return BlueFin::GlMeSrdAsicUnitConverter::GetBdsB2aPCodeOffset(this);
    case 12:
      return BlueFin::GlMeSrdAsicUnitConverter::GetNavicL5CodeOffset(this);
    case 13:
      return BlueFin::GlMeSrdAsicUnitConverter::GetBdsPrnIndex(this);
    case 14:
      if (v3 == 3) {
        return BlueFin::GlMeSrdAsicUnitConverter::GetQzssPrnIndex(this);
      }
      if (BlueFin::GlSvId::s_aucSvId2gnss[v2]) {
        return 0;
      }
      return BlueFin::GlMeSrdAsicUnitConverter::GetGpsPrnIndex(this);
    default:
      DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 957, "SignalId2MultiCarrType", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 957, "0");
  }
}

uint64_t BlueFin::GlMeSrdSatMgr::GetSatControl(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  __int16 v7 = *(unsigned __int8 *)(*(void *)(a1 + 6288) + 52 * a2 + 30) | *(_WORD *)a4 & 0xFFF8 | 6;
  *(_WORD *)a4 = v7;
  __int16 v8 = v7 & 0xFFF7 | (8 * (*(unsigned char *)(*(void *)(a1 + 6288) + 52 * a2 + 31) & 0x1F));
  *(_WORD *)a4 = v8;
  *(_WORD *)a4 = v8 & 0xF34F | (16 * (*(unsigned char *)(*(void *)(a1 + 6288) + 52 * a2 + 29) & 0xF)) | 0x800;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 6552) + 704))())
  {
    int v9 = *(_WORD *)a4 & 0xFEFF | (*(unsigned __int8 *)(a4 + 2) << 16) | (*(unsigned __int8 *)(*(void *)(a1 + 6288)
                                                                                            + 52 * a2
                                                                                            + 32) << 8);
    *(_WORD *)a4 = *(_WORD *)a4 & 0xFEFF | (*(unsigned __int8 *)(*(void *)(a1 + 6288) + 52 * a2 + 32) << 8);
    unsigned int v10 = v9 & 0xFFFFFDFF | (*(unsigned __int8 *)(*(void *)(a1 + 6288) + 52 * a2 + 32) << 9);
    *(_WORD *)a4 = v10;
    *(unsigned char *)(a4 + 2) = BYTE2(v10);
    __int16 v11 = v10 & 0xFFBF | ((*(unsigned char *)(*(void *)(a1 + 6288) + 52 * a2 + 32) & 3) << 6);
    *(unsigned char *)(a4 + 2) = BYTE2(v10);
    *(_WORD *)a4 = v11;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 6552) + 704))();
    __int16 v13 = *(_WORD *)a4 & 0xCFFF | ((result & 3) << 12);
  }
  else
  {
    char v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 6552) + 688))(*(void *)(a1 + 6552));
    int v15 = *(_WORD *)a4 & 0xCFFF | (*(unsigned __int8 *)(a4 + 2) << 16);
    *(_WORD *)a4 = *(_WORD *)a4 & 0xCFFF | ((v14 & 3) << 12);
    *(unsigned char *)(a4 + 2) = BYTE2(v15);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 6552) + 680))()) {
      __int16 v16 = 64;
    }
    else {
      __int16 v16 = 0;
    }
    int v17 = *(_WORD *)a4 & 0xFFBF | (*(unsigned __int8 *)(a4 + 2) << 16);
    *(_WORD *)a4 = *(_WORD *)a4 & 0xFFBF | v16;
    *(unsigned char *)(a4 + 2) = BYTE2(v17);
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 6552) + 744))()) {
      __int16 v18 = 256;
    }
    else {
      __int16 v18 = 0;
    }
    int v19 = *(_WORD *)a4 & 0xFEFF | (*(unsigned __int8 *)(a4 + 2) << 16);
    *(_WORD *)a4 = *(_WORD *)a4 & 0xFEFF | v18;
    *(unsigned char *)(a4 + 2) = BYTE2(v19);
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 6552) + 752))();
    if (result) {
      __int16 v20 = 512;
    }
    else {
      __int16 v20 = 0;
    }
    __int16 v13 = *(_WORD *)a4 & 0xFDFF | v20;
  }
  *(unsigned char *)(a4 + 2) = 7;
  *(_WORD *)a4 = v13 & 0x3FFF;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::Is5HzSubTrkMinEnabledForThisSvId(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1607);
}

uint64_t BlueFin::GlMeSrdAsicConfig::Is5HzSubTrkEnabledForThisSvId(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1606);
}

unint64_t BlueFin::GlMeSrdAsicConfig::IsIqDumEnabledForThisSvId(uint64_t a1, unsigned char *a2)
{
  return ((unint64_t)*(unsigned int *)(*(void *)(a1 + 2008)
                                            + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)) & 1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetTstGridIqConfig(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1610);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetIqDumpConfig(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1608);
}

char *BlueFin::GlMeSrdAsicUnitConverter::Svid2SvParamType(unsigned char *a1)
{
  if ((*a1 + 67) <= 0x43u)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 861, "Svid2SvParamType", (char)"*otSvid >= MIN_SVID && *otSvid <= MAX_SVID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 861, "*otSvid >= MIN_SVID && *otSvid <= MAX_SVID");
  }
  return (char *)&BlueFin::GlMeSrdAsicUnitConverter::m_stLookUpSvid2SvParam + 12 * *a1;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetGpsL5XbCodeAdvance(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  if ((v1 - 1) >= 0x20)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1435, "GetGpsL5XbCodeAdvance", (char)"otSvId.IsGps()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1435, "otSvId.IsGps()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_ausGpsL5XbCodeAdvance[v1];
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_kill(BlueFin::CarpEswRpcSatEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3)
{
  unsigned __int8 v3 = a3;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 384))(*((void *)this + 1)) <= a3)
  {
    __int16 v8 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1106, "esw_sat_rpc_kill", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v9 = 1106;
    goto LABEL_6;
  }
  unsigned __int8 v10 = v3;
  *(_WORD *)__int16 v11 = 1537;
  char v12 = 5;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v11, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, &v10, 1u);
  unsigned int v6 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v6)
  {
    __int16 v8 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1111, "esw_sat_rpc_kill", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v9 = 1111;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v9, v8);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetQzssL5XbCodeAdvance(unsigned char *a1)
{
  if (*a1 - 66 >= 0xA)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1443, "GetQzssL5XbCodeAdvance", (char)"otSvId.IsQzss()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1443, "otSvId.IsQzss()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_ausQzssL5XbCodeAdvance[(*a1 - 66)];
}

uint64_t FireMessageHandler::setAssistanceTime(FireMessageHandler *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = a3 / 0xF4240;
  unint64_t v10 = a2 / 0x2260FF9290000;
  unint64_t v11 = a2 % 0x2260FF9290000 / 0xF4240;
  FireDeviceLog::DeviceLogBase(6, "%s, gpsWeek, %llu, gpsTowMs, %llu", a3, a4, a5, a6, a7, a8, (char)"setAssistanceTime");
  if (!*((unsigned char *)this + 1692))
  {
    *((_DWORD *)this + 356) = v11;
    *((_WORD *)this + 714) = v10;
    *((_WORD *)this + 843) = 0;
    *(_OWORD *)((char *)this + 143BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)((char *)this + 1446) = 0u;
    *(_OWORD *)((char *)this + 1462) = 0u;
    *(_OWORD *)((char *)this + 1478) = 0u;
    *(_OWORD *)((char *)this + 1494) = 0u;
    *(_OWORD *)((char *)this + 151BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)((char *)this + 1526) = 0u;
    *(_OWORD *)((char *)this + 1542) = 0u;
    *(_OWORD *)((char *)this + 1558) = 0u;
    *(_OWORD *)((char *)this + 1574) = 0u;
    *(_OWORD *)((char *)this + 159BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)((char *)this + 1606) = 0u;
    *(_OWORD *)((char *)this + 1622) = 0u;
    *(_OWORD *)((char *)this + 1638) = 0u;
    *(_OWORD *)((char *)this + 1654) = 0u;
    *(_OWORD *)((char *)this + 167BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *((_DWORD *)this + 422) = v9;
LABEL_5:
    *((unsigned char *)this + 1692) = 1;
    goto LABEL_6;
  }
  FireDeviceLog::DeviceLogBase(5, "#Warning overwriting,oldWeek,%u,oldTowMs,%u,oldUncMs,%u,newWeek,%u,newTowMs,%u,newUncMs,%u", v12, v13, v14, v15, v16, v17, *((_WORD *)this + 714));
  int v18 = *((unsigned __int8 *)this + 1692);
  *((_DWORD *)this + 356) = v11;
  *((_WORD *)this + 714) = v10;
  *(_OWORD *)((char *)this + 143BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1446) = 0u;
  *(_OWORD *)((char *)this + 1462) = 0u;
  *(_OWORD *)((char *)this + 1478) = 0u;
  *(_OWORD *)((char *)this + 1494) = 0u;
  *(_OWORD *)((char *)this + 151BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1526) = 0u;
  *(_OWORD *)((char *)this + 1542) = 0u;
  *(_OWORD *)((char *)this + 1558) = 0u;
  *(_OWORD *)((char *)this + 1574) = 0u;
  *(_OWORD *)((char *)this + 159BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1606) = 0u;
  *(_OWORD *)((char *)this + 1622) = 0u;
  *(_OWORD *)((char *)this + 1638) = 0u;
  *(_OWORD *)((char *)this + 1654) = 0u;
  *(_OWORD *)((char *)this + 167BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_WORD *)this + 843) = 0;
  *((_DWORD *)this + 422) = v9;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_6:
  FireDeviceLog::DeviceLogBase(6, "SetAllowGnssDwellDutyCycling,%d", v12, v13, v14, v15, v16, v17, *((unsigned char *)this + 1352));
  FireMessageHandler::send((uint64_t)this, 1073741827, v19, v20, v21, v22, v23, v24);
  return 1;
}

__int16 *BlueFin::GlDbgEngine::SetExtSensInfo(uint64_t a1, __int16 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1577);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = (__int16 *)BlueFin::GlEngineImplStd::SetExtSensInfo((BlueFin::GlEngineImplStd *)(a1 + 368));
    BOOL v8 = (char)v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1577);
    unsigned int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1301");
  }
  return v2;
}

#error "26392270C: call analysis failed (funcsize=86)"

uint64_t FireMessageHandler::send(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v24 = a2;
  if (*(_DWORD *)(a1 + 1356) != 3 && (a2 == 1073741850 || a2 == 1073741825))
  {
    std::deque<FireMessageHandler::Message>::push_back((void *)(a1 + 1080), &v24);
    FireDeviceLog::DeviceLogBase(5, "send,message,StartCompletedd,%d,queued", v10, v11, v12, v13, v14, v15, v24);
  }
  else
  {
    FireMessageHandler::ExclusiveEntryCheck::enter((unsigned int *)(a1 + 1008), 1, a3, a4, a5, a6, a7, a8);
    FireMessageHandler::messageHandler(a1, a2, v16, v17, v18, v19, v20, v21, v23);
    FireMessageHandler::ExclusiveEntryCheck::exit((FireMessageHandler::ExclusiveEntryCheck *)(a1 + 1008));
  }
  return 1;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnTimerSet(uint64_t this, uint64_t a2, uint64_t a3, BOOL a4)
{
  int v12 = a2;
  __int16 v11 = a3;
  BOOL v10 = a4;
  if (!*(void *)(this + 808))
  {
    uint64_t v7 = this;
    *(unsigned char *)(this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    if (*(_DWORD *)(this + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)this, 534);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 120))(v7)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)v7, (unsigned int *)&v12);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 120))(v7)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)v7, &v11);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 120))(v7)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)v7, &v10);
      }
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, 1);
    }
    BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL))(v7 + 912);
    if (v8) {
      this = v8(v7 + 608, a2, a3, a4);
    }
    *(unsigned char *)(v7 + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    if (*(_DWORD *)(v7 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)v7, 534);
      unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 32);
      return v9(v7, 1);
    }
  }
  return this;
}

void FireCallback::GlEngineOnTimerSet(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 472);
    if (v10)
    {
      uint64_t v15 = a1;
      int v14 = a2;
      __int16 v13 = a3;
      char v12 = a4;
      (*(void (**)(uint64_t, uint64_t *, int *, __int16 *, char *))(*(void *)v10 + 48))(v10, &v15, &v14, &v13, &v12);
      return;
    }
    __int16 v11 = "fcb,fEngineOnTimerSetCb,nullptr";
  }
  else
  {
    __int16 v11 = "fcb,GlEngineOnTimerSet,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4>,void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  v6[4] = *MEMORY[0x263EF8340];
  int v3 = *a3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 936);
  void v6[3] = 0;
  FireMessageHandler::Tick::appendCallback(v4, (uint64_t)v6, v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
}

void sub_263922B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void FireMessageHandler::Tick::appendCallback(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 <= 10) {
    uint64_t v5 = 10;
  }
  else {
    uint64_t v5 = a3;
  }
  DeviceCommon::GetMachContinuousTime((DeviceCommon *)a1);
  double v13 = v12 * 1000.0 + (double)(int)v5;
  if (*(void *)(a2 + 24))
  {
    std::vector<std::function<void ()(void)>>::emplace_back<std::function<void ()(void)>&>((uint64_t *)(a1 + 32), a2);
    uint64_t v20 = *(void *)(a2 + 24);
    if (v20) {
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 64))(v20);
    }
    else {
      uint64_t v21 = MEMORY[0x263F8C288];
    }
    FireDeviceLog::DeviceLogBase(6, "timer,appendCallback,%s,tickTimeMs,%d", v14, v15, v16, v17, v18, v19, *(unsigned char *)(v21 + 8));
  }
  double v22 = *(double *)(a1 + 56);
  if (v22 + 10.0 <= v13)
  {
    FireDeviceLog::DeviceLogBase(8, "timer,appendCallback,alreadyScheduled,%.2f,current,%.2f,timeout,%d", v6, v7, v8, v9, v10, v11, SLOBYTE(v22));
  }
  else
  {
    *(double *)(a1 + 56) = v13;
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(void, uint64_t, void))(**(void **)(FireResourceMgr::fInstance + 8) + 24))(*(void *)(FireResourceMgr::fInstance + 8), v5, 0);
    FireDeviceLog::DeviceLogBase(6, "timer,appendCallback,startTimer,%d", v23, v24, v25, v26, v27, v28, v5);
  }
}

void std::__function::__func<FireMessageHandler::createGlEngine(void)::$_1,std::allocator<FireMessageHandler::createGlEngine(void)::$_1>,void ()(unsigned char *,unsigned long)>::operator()(uint64_t a1, gnss::fire **a2, const unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(_DWORD *)(v10 + 1356);
  if ((v11 - 1) >= 3)
  {
    gnss::fire::charToHex(*a2, *a3, 44, &__p);
    FireDeviceLog::DeviceLogBase(2, "chipData,outOfSession,state,%d,size,%zu,data,%s", v16, v17, v18, v19, v20, v21, v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    FireMessageHandler::ExclusiveEntryCheck::enter((unsigned int *)(v10 + 1008), 2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = (unint64_t)v9;
      do
      {
        unint64_t v14 = v13 - 268;
        if (v13 >= 0x10C) {
          uint64_t v15 = 268;
        }
        else {
          uint64_t v15 = v13;
        }
        (*(void (**)(void, char *, uint64_t))(**(void **)(v10 + 1296) + 184))(*(void *)(v10 + 1296), (char *)v8 + v12, v15);
        v12 += 268;
        unint64_t v13 = v14;
      }
      while (v12 < (unint64_t)v9);
    }
    FireMessageHandler::ExclusiveEntryCheck::exit((FireMessageHandler::ExclusiveEntryCheck *)(v10 + 1008));
  }
}

void sub_263922EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FireMessageHandler::ExclusiveEntryCheck::exit(FireMessageHandler::ExclusiveEntryCheck *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void))(**(void **)FireResourceMgr::fInstance + 112))();
  char v2 = atomic_load((unsigned int *)this);
  FireDeviceLog::DeviceLogBase(8, "ExclusiveEntryCheck,exit,%d", v3, v4, v5, v6, v7, v8, v2);
  atomic_store(3u, (unsigned int *)this);
}

void FireMessageHandler::ExclusiveEntryCheck::enter(unsigned int *a1, signed int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  unsigned int v9 = atomic_load(a1);
  if (v9 == 3)
  {
    atomic_store(a2, a1);
    uint64_t v10 = &a1[2 * a2];
    uint64_t v11 = *((void *)v10 + 1);
    *((void *)v10 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11 + 1;
    if (!v11) {
      FireDeviceLog::DeviceLogBase(5, "ExclusiveEntryCheck,firstEntryofType,%d,recorded", a3, a4, a5, a6, a7, a8, a2);
    }
    FireDeviceLog::DeviceLogBase(8, "ExclusiveEntryCheck,enter,%d", a3, a4, a5, a6, a7, a8, v8);
  }
  else
  {
    char v12 = atomic_load(a1);
    FireDeviceLog::DeviceLogBase(1, "ExclusiveEntryCheck,failed,active,%d,new,%d,", a3, a4, a5, a6, a7, a8, v12);
    DeviceFaultNotify("FireMessageHandler.cpp", 825, "enter", (char)"ExclusiveEntryCheck,failed,active,%d,new,%d,");
  }
}

void FireDeviceLog::DeviceLogBase(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)FireDeviceLog::StaticSetting::fInstance >= a1)
  {
    FireDeviceLog::GetLineLeading((DeviceCommon *)0x26, a1, &v11);
    LODWORD(a2) = vsnprintf(__str, 0x100uLL, a2, &a9);
    std::string::append(&v11, __str);
    if ((int)a2 >= 255) {
      std::string::append(&v11, "...");
    }
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(void, uint64_t, std::string *))(**(void **)(FireResourceMgr::fInstance + 16) + 16))(*(void *)(FireResourceMgr::fInstance + 16), a1, &v11);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
}

void sub_26392316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t BlueFin::GlEngineImplStd::CommonAPIcode(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *__src,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a66 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(this + 592))
  {
    uint64_t v66 = this;
    *(unsigned char *)(this + 592) = 1;
    a16 = 0;
    this = BlueFin::GlEventPump::Run(*(BlueFin::GlEventPump **)(this + 16), (unsigned int *)&a16 + 1, (unsigned int *)&a16);
    uint64_t v67 = *(void *)(v66 + 24);
    if (v67)
    {
      int v68 = this;
      unint64_t v69 = (unsigned int *)(v67 + 157980);
      uint64_t v70 = v67 + 123784;
      int v71 = HIDWORD(a16);
      *(_DWORD *)(v67 + 159304) = HIDWORD(a16);
      int v72 = *(_DWORD *)(v67 + 159308);
      if (v72 == -1)
      {
        *(_DWORD *)(v67 + 157984) = 0;
        *(_DWORD *)(v67 + 157992) = 0;
      }
      else
      {
        unsigned int v73 = v71 - v72;
        *(_DWORD *)(v67 + 157992) += v73;
        if (v73 <= *(_DWORD *)(v67 + 157984)) {
          unsigned int v73 = *(_DWORD *)(v67 + 157984);
        }
        *(_DWORD *)(v67 + 157984) = v73;
      }
      int v74 = a16;
      if (v71 != -1)
      {
        unsigned int v75 = a16 - v71;
        *(_DWORD *)(v67 + 157988) += v75;
        if (v75 <= *v69) {
          unsigned int v75 = *v69;
        }
        *unint64_t v69 = v75;
      }
      *(_DWORD *)(v67 + 159308) = v74;
      unsigned int v76 = *(_DWORD *)v70 + 7201002;
      if (v76 >= 0x3E8) {
        int v77 = *(unsigned char *)(*(void *)(v66 + 8) + 34) & 1;
      }
      else {
        int v77 = 1;
      }
      int v78 = *(unsigned __int8 *)(v67 + 123984);
      if (*(unsigned char *)(v67 + 123984)) {
        int v79 = v77;
      }
      else {
        int v79 = 0;
      }
      int v80 = *(unsigned __int8 *)(v67 + 126252);
      if (*(unsigned char *)(v67 + 126252)) {
        int v81 = 1;
      }
      else {
        int v81 = v79;
      }
      if (*(unsigned char *)(v66 + 33))
      {
        int v68 = 0;
        *(unsigned char *)(v66 + 33) = 1;
        goto LABEL_181;
      }
      char v82 = v77 ^ 1;
      if (!*(unsigned char *)(v67 + 123984)) {
        char v82 = 0;
      }
      *(unsigned char *)(v66 + 33) = v82;
      if (v82)
      {
        int v68 = 0;
        goto LABEL_181;
      }
      if (v81)
      {
        uint64_t v83 = *(void *)(v66 + 8);
        if (!v83)
        {
          DeviceFaultNotify("glengine_std.cpp", 384, "ReloadComponents", (char)"m_ptGlSettingsImpl != nullptr");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", 384, "m_ptGlSettingsImpl != nullptr");
        }
        int v84 = *(_DWORD *)(v83 + 32);
        int v85 = *(unsigned __int8 *)(v70 + 2469);
        if (v76 >= 0x3E8) {
          uint64_t v86 = 78;
        }
        else {
          uint64_t v86 = 89;
        }
        if (v85) {
          uint64_t v87 = 89;
        }
        else {
          uint64_t v87 = 78;
        }
        uint64_t v200 = v87;
        if (v80) {
          uint64_t v88 = 89;
        }
        else {
          uint64_t v88 = 78;
        }
        if (v78) {
          uint64_t v89 = 89;
        }
        else {
          uint64_t v89 = 78;
        }
        uint64_t v199 = v88;
        if ((v84 & 0x10000) != 0) {
          uint64_t v90 = 89;
        }
        else {
          uint64_t v90 = 78;
        }
        if ((v84 & 0x4000) != 0) {
          uint64_t v91 = 89;
        }
        else {
          uint64_t v91 = 78;
        }
        GlCustomLog(14, "ReloadComponents() PSF={DERATE_TIME:%c  RECOVER_JOBS:%c}  Reset:%c  Restart:%c  CloseCom:%c  Abort:%c  LmsRollover:%c\n", v91, v90, v89, v199, v200, 78, v86);
        uint64_t v202 = *(void (**)(uint64_t))(v66 + 440);
        uint64_t v92 = (*(uint64_t (**)(uint64_t))(v66 + 432))(31680);
        uint64_t v93 = v92;
        int v205 = v79;
        if (!v92)
        {
          DeviceFaultNotify("glmemalloc.h", 74, "GlStackAlloc", (char)"m_ptr != nullptr");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmemalloc.h", 74, "m_ptr != nullptr");
        }
        uint64_t v94 = *(void *)(v66 + 24);
        *(_DWORD *)uint64_t v92 = 0;
        *(unsigned char *)(v92 + 8) = 0;
        bzero((void *)(v92 + 16), 0x362uLL);
        uint64_t v204 = (BlueFin::GlPePendingBag *)(v93 + 896);
        BlueFin::GlPePendingBag::GlPePendingBag((BlueFin::GlPePendingBag *)(v93 + 896));
        uint64_t v95 = (unsigned char *)(v93 + 21188);
        uint64_t v96 = (unsigned __int16 *)(v94 + 136408);
        *(unsigned char *)(v93 + 528BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        uint64_t v201 = (BlueFin::GlPeGnssTime *)(v93 + 5288);
        *(void *)(v93 + 5288) = 0;
        *(_DWORD *)(v93 + 5296) = -1;
        *(_OWORD *)(v93 + 5304) = xmmword_263BB40A0;
        *(_DWORD *)(v93 + 532BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *(unsigned char *)(v93 + 5344) = 0;
        uint64_t v97 = 5348;
        do
        {
          uint64_t v98 = v93 + v97;
          *(_WORD *)uint64_t v98 = 112;
          *(_OWORD *)(v98 + 4) = 0uLL;
          *(_OWORD *)(v98 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
          *(_OWORD *)(v98 + 36) = 0uLL;
          *(_OWORD *)(v98 + 52) = 0uLL;
          *(_OWORD *)(v98 + 64) = 0uLL;
          v97 += 80;
        }
        while ((unsigned char *)(v98 + 80) != v95);
        *uint64_t v95 = 0;
        *(void *)(v93 + 22368) = v93 + 21216;
        bzero((void *)(v93 + 5348), 0x3DE0uLL);
        bzero((void *)(v93 + 21216), 0x480uLL);
        *(_OWORD *)(v93 + 22768) = 0u;
        uint64_t v203 = (unsigned int *)(v93 + 22400);
        *(_OWORD *)(v93 + 22752) = 0u;
        *(_OWORD *)(v93 + 22736) = 0u;
        *(_OWORD *)(v93 + 2272BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v93 + 22704) = 0u;
        *(_OWORD *)(v93 + 22688) = 0u;
        *(_OWORD *)(v93 + 22672) = 0u;
        *(_OWORD *)(v93 + 22656) = 0u;
        *(_OWORD *)(v93 + 2264BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v93 + 22624) = 0u;
        *(_OWORD *)(v93 + 22608) = 0u;
        *(_OWORD *)(v93 + 22592) = 0u;
        *(_OWORD *)(v93 + 22576) = 0u;
        *(_OWORD *)(v93 + 2256BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v93 + 22544) = 0u;
        *(_OWORD *)(v93 + 22528) = 0u;
        *(_OWORD *)(v93 + 22512) = 0u;
        *(_OWORD *)(v93 + 22496) = 0u;
        *(_OWORD *)(v93 + 2248BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(_OWORD *)(v93 + 22464) = 0u;
        *(_OWORD *)(v93 + 22448) = 0u;
        *(_OWORD *)(v93 + 22432) = 0u;
        *(_OWORD *)(v93 + 22416) = 0u;
        *(_OWORD *)(v93 + 2240BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        BlueFin::GlSatAidInfo::GlSatAidInfo(v93 + 22784);
        *(_OWORD *)(v93 + 31628) = 0u;
        *(void *)(v93 + 31616) = v93 + 31628;
        *(unsigned char *)(v93 + 31624) = 8;
        *(_OWORD *)(v93 + 31644) = 0u;
        *(_WORD *)(v93 + 88BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)(v94 + 140258);
        *(unsigned char *)(v93 + 8) = 0;
        do
        {
          uint64_t v99 = BlueFin::GlPeReqBag::PopRequest((BlueFin::GlPeReqBag *)(v94 + 137024));
          uint64_t v100 = v99;
          if (!v99) {
            break;
          }
          uint64_t v101 = *(unsigned __int8 *)(v93 + 8);
          *(void *)(v93 + 8 + 8 * v101 + 8) = v99;
          int v102 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(v99 + 28);
          *(_DWORD *)(v93 + 8 + 4 * v101 + 584) = v102;
          GlCustomLog(14, "GlEngineImplStd::RecoverAllJobs: ActiveReq Id:%2hu  Type:%2u  ElapsedTime(ms):%u\n", *(unsigned __int16 *)(v99 + 24), *(unsigned __int8 *)(v99 + 16), v102);
          unsigned int v103 = ++*(unsigned char *)(v93 + 8);
          *(_DWORD *)v93 |= 1 << *(_WORD *)(v100 + 16);
        }
        while (v103 < 0x48);
        BlueFin::GlPePendingBag::operator=((uint64_t)v204, v94 + 132640);
        if (*(unsigned char *)(v94 + 180968))
        {
          a27 = *(void *)(v94 + 180960);
          long long v105 = *(_OWORD *)(v94 + 180928);
          a24 = *(_OWORD *)(v94 + 180912);
          long long v104 = a24;
          a25 = v105;
          a26 = *(_OWORD *)(v94 + 180944);
          long long v106 = *(_OWORD *)(v94 + 180848);
          long long v107 = *(_OWORD *)(v94 + 180880);
          a21 = *(_OWORD *)(v94 + 180864);
          a22 = v107;
          a23 = *(_OWORD *)(v94 + 180896);
          a19 = *(_OWORD *)(v94 + 180832);
          a20 = v106;
          *(_DWORD *)(v93 + 5248) |= 0x10000u;
          *(_OWORD *)(v93 + 4544) = v106;
          *(_OWORD *)(v93 + 4608) = v104;
          long long v108 = a21;
          long long v109 = a22;
          *(_OWORD *)(v93 + 4528) = a19;
          *(_OWORD *)(v93 + 4592) = a23;
          *(_OWORD *)(v93 + 4576) = v109;
          *(_OWORD *)(v93 + 456BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v108;
          *(void *)(v93 + 4656) = a27;
          *(_OWORD *)(v93 + 464BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a26;
          *(_OWORD *)(v93 + 4624) = a25;
          *(unsigned char *)(v93 + 452BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        }
        int v110 = (__int16)*v96;
        if (v110 >= 1)
        {
          do
          {
            unsigned __int16 v111 = v110 - 1;
            *uint64_t v96 = v111;
            uint64_t v112 = v94 + 8 * v111;
            uint64_t v113 = *(void *)(v112 + 136416);
            *(void *)(v112 + 136416) = 0;
            GlCustomLog(14, "GlEngineImplStd::RecoverAllJobs: PendingReq Id:%2hu  Type:%2u\n", *(unsigned __int16 *)(v113 + 24), *(unsigned __int8 *)(v113 + 16));
            *(_DWORD *)v93 |= 1 << *(_WORD *)(v113 + 16);
            int v110 = (__int16)*v96;
          }
          while (v110 > 0);
        }
        int v114 = *(_DWORD *)(v94 + 124816);
        if (v114 == -1)
        {
          char v117 = 0;
          unsigned int v116 = (char *)(v93 + 5280);
        }
        else
        {
          double v115 = *(double *)(v94 + 124832);
          unsigned int v116 = (char *)(v93 + 5280);
          if (v115 == 4294967300.0)
          {
            char v117 = 0;
          }
          else
          {
            if ((BlueFin::GlPeGnssTime *)(v94 + 124808) != v201)
            {
              *(void *)(v93 + 5288) = *(void *)(v94 + 124808);
              *(_DWORD *)(v93 + 5296) = v114;
              *(void *)(v93 + 5304) = *(void *)(v94 + 124824);
              *(double *)(v93 + 5312) = v115;
            }
            *(_DWORD *)(v93 + 532BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(v94 + 124800);
            char v117 = 1;
          }
        }
        *unsigned int v116 = v117;
        v116[64] = 0;
        BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&__src, (const BlueFin::GlGnssSet *)(v93 + 992));
        int v119 = a53;
        for (char i = a54; a53 != 6 || a54 != 14; char i = a54)
        {
          a55 = v119;
          a56 = i;
          LODWORD(a17) = v119;
          BYTE4(a17) = i;
          Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(v94 + 608), v119);
          if (Mgr)
          {
            uint64_t v122 = (unsigned char *)(*(uint64_t (**)(void *, char *, uint64_t))(*Mgr + 112))(Mgr, (char *)&a17 + 4, 1);
            if (v122)
            {
              if ((v122[8] & 0xF) == 1)
              {
                unsigned int v123 = v116[64];
                v116[64] = v123 + 1;
                (*(void (**)(unsigned char *, uint64_t))(*(void *)v122 + 264))(v122, v93 + 80 * v123 + 5348);
                if (v116[64] == 198) {
                  break;
                }
              }
            }
          }
          BlueFin::GlGnssSetIterator::operator++((uint64_t)&__src);
          int v119 = a53;
        }
        uint64_t v125 = 0;
        uint64_t v126 = *(void *)(v93 + 1160);
        do
        {
          bzero(*(void **)(v126 + v125), ((4 * *(unsigned __int8 *)(v126 + v125 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          v125 += 24;
        }
        while (v125 != 168);
        *uint64_t v95 = 0;
        LOBYTE(__src) = *(unsigned char *)(v93 + 1336);
        unsigned int v127 = *(void **)(v93 + 1328);
        size_t v128 = 4 * __src;
        memcpy(&a30, v127, v128);
        WORD1(__src) = 0;
        BYTE1(__src) = 0;
        HIDWORD(__src) = a30;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        if (BYTE1(__src) != __src)
        {
          do
          {
            if (BlueFin::GlPeAlmMgr::GetAsstAlm((uint64_t *)(v94 + 34336), 0, (BYTE2(__src) + 1), (int32x2_t *)(*(void *)(v93 + 22368) + 36 * *v95)))
            {
              ++*v95;
            }
            BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
          }
          while (BYTE1(__src) != __src);
          unsigned int v127 = *(void **)(v93 + 1328);
          size_t v128 = 4 * *(unsigned __int8 *)(v93 + 1336);
        }
        bzero(v127, ((v128 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        BlueFin::GlPeReqBag::GetPreviousPositionBuffer((BlueFin::GlPeReqBag *)(v94 + 137024), v203, 380, (unsigned int *)(v93 + 22780));
        *(unsigned char *)(v93 + 31664) = 0;
        if (*(float *)(v94 + 304976) < 10.0)
        {
          BlueFin::GlSatAidInfo::operator=(v93 + 22784, v94 + 304960);
          BlueFin::GlSetBase::operator=(v93 + 31616, v94 + 315048);
          long long v131 = *(_OWORD *)(v94 + 315076);
          *(_OWORD *)(v93 + 31628) = *(_OWORD *)(v94 + 315060);
          *(_OWORD *)(v93 + 31644) = v131;
          *(unsigned char *)(v93 + 31664) = 1;
        }
        if (v205)
        {
          unsigned int v132 = *(_DWORD *)(*(void *)(v66 + 24) + 123784) + 7201002;
          BOOL v133 = v132 >= 0x3E8;
          if (v132 >= 0x3E8) {
            uint64_t v134 = "Abnormal";
          }
          else {
            uint64_t v134 = "Normal";
          }
          int v135 = "Time is bad";
          if (!v133) {
            int v135 = "LMS Rollover";
          }
          uint64_t v136 = 89;
          if (!*v116) {
            uint64_t v136 = 78;
          }
          GlCustomLog(10, "%s GlEngine restart. %s. Restarting.  RecoveryTimeValid:%c\n", v134, v135, v136);
        }
        int v137 = *(_DWORD *)v93;
        BlueFin::GlEngineImplStd::DisposeComponents((void *)v66, (const char *)(*(_DWORD *)v93 == 0), v129, v130);
        BlueFin::GlEngineImplStd::setOnChipMeSetting(v66, (int *)v93, 0);
        if (v137)
        {
          if (BlueFin::GlEngineImplStd::LoadComponents((BlueFin::GlEngineImplStd *)v66, 0))
          {
            uint64_t v138 = *(void *)(v66 + 24);
            *(_WORD *)(v138 + 140258) = *(_WORD *)(v93 + 880);
            *(_WORD *)(v138 + 180714) = 1;
            if (*(unsigned char *)(v93 + 8))
            {
              unint64_t v139 = 0;
              uint64_t v140 = v93 + 592;
              do
              {
                uint64_t v141 = (void *)(v140 + 8 * v139 - 576);
                (*(void (**)(void, BOOL))(*(void *)*v141 + 464))(*v141, *(_DWORD *)(v140 + 4 * v139) > 0x3E8u);
                uint64_t __src = (BlueFin::GlRequestImpl *)*v141;
                BlueFin::GlPosEng::StartRequest(*(void *)(v66 + 24), &__src);
                ++v139;
              }
              while (v139 < *(unsigned __int8 *)(v93 + 8));
            }
            int v142 = *(__int16 *)(v93 + 4664);
            if (v142 >= 1)
            {
              do
              {
                *(_WORD *)(v93 + 4664) = --v142;
                uint64_t v143 = v93 + 8 * (unsigned __int16)v142;
                int v144 = *(BlueFin::GlRequestImpl **)(v143 + 4672);
                *(void *)(v143 + 4672) = 0;
                if (v144)
                {
                  uint64_t __src = v144;
                  BlueFin::GlPosEng::StartRequest(*(void *)(v66 + 24), &__src);
                  int v142 = *(unsigned __int16 *)(v93 + 4664);
                }
              }
              while ((__int16)v142 > 0);
            }
            BlueFin::GlPeReqBag::SetPreviousPositionBuffer((BlueFin::GlPeReqBag *)(*(void *)(v66 + 24) + 137024), v203, 380, *(_DWORD *)(v93 + 22780));
            uint64_t v145 = *(void *)(v66 + 24);
            *(unsigned char *)(v145 + 180714) = 0;
            BlueFin::GlReqSm::SetPendingBag((BlueFin::GlReqSm *)(v145 + 126144), v204);
            for (int j = 0; j != 7; ++j)
            {
              double v147 = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(v66 + 24) + 608), j);
              if (v147) {
                (*(void (**)(void *, uint64_t, void, uint64_t))(*v147 + 224))(v147, v93 + 5348, *(unsigned __int8 *)(v93 + 5344), 1);
              }
            }
            if (*v95)
            {
              uint64_t v148 = 0;
              unint64_t v149 = 0;
              do
              {
                BlueFin::GlReqSm::SetAsstAlm(*(void *)(v66 + 24) + 126144, (unsigned __int8 *)(*(void *)(v93 + 22368) + v148));
                ++v149;
                v148 += 36;
              }
              while (v149 < *v95);
            }
            if (v205 && *(unsigned char *)(v93 + 5280))
            {
              int v150 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
              *(void *)&a19 = &off_270EBC600;
              *((void *)&a19 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
              BlueFin::GlPeGnssTime::GetGps(v201, (BlueFin::GlGpsTime *)&a19);
              long double UncUs = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)v201, 0);
              double v152 = fmod(UncUs, 4294967300.0);
              if (UncUs <= 4294967300.0) {
                double v152 = UncUs;
              }
              if (v152 < -4294967300.0) {
                double v152 = -fmod(-v152, 4294967300.0);
              }
              unsigned int v153 = -v152;
              unsigned int v154 = v152;
              BOOL v163 = v152 < 0.0;
              double v155 = (double)(v150 - *(_DWORD *)(v93 + 5320));
              if (v163) {
                unsigned int v156 = -v153;
              }
              else {
                unsigned int v156 = v154;
              }
              double v157 = v155 * 0.001;
              uint64_t v158 = DWORD2(a19);
              unsigned int v159 = HIDWORD(a19);
              a18 = *((void *)&a19 + 1);
              a17 = &off_270EBC600;
              double v160 = fmod(v155 * 0.001, 1.0);
              double v161 = v160 * 4294967300.0 + 0.5;
              unsigned int v162 = v161;
              if (v161 >= 4294967300.0) {
                unsigned int v162 = -1;
              }
              BOOL v163 = v160 >= 0.0 && v160 < 1.0;
              if (!v163)
              {
                uint64_t v196 = "dFracSec >= 0.0 && dFracSec < 1.0";
                int v197 = 173;
                uint64_t v198 = "glpe_timepoint.h";
                DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                goto LABEL_188;
              }
              unsigned int v164 = v157;
              if (v157 < 0.0)
              {
                int v178 = v159 - v164;
                if (v159 > v164 || (v159 == v164 ? (BOOL v179 = v158 >= v162) : (BOOL v179 = 0), v179))
                {
                  BOOL v133 = v158 >= v162;
                  LODWORD(v165) = v158 - v162;
                  int v181 = !v133;
                  unsigned int v166 = v178 - v181;
                }
                else
                {
                  if (v164 - v159 != v158 > v162 || v162 != v158)
                  {
                    uint64_t v196 = "!tDelta.isNegative()";
                    int v197 = 425;
                    uint64_t v198 = "glpe_datetime.h";
                    DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
LABEL_188:
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v198, v197, v196);
                  }
                  unsigned int v166 = 0;
                  LODWORD(v165) = 0;
                }
              }
              else
              {
                uint64_t v165 = v158 + v162;
                unsigned int v166 = v159 + v164 + HIDWORD(v165);
              }
              a18 = __PAIR64__(v166, v165);
              GlCustomLog(14, "TimeRecovery(%u): GlEngineImplStd::ReloadComponents:  OsTime:%u  Lms:%.0lf  GpsWeek:%d  GpsTow:%.6lf\n", *(_DWORD *)(*(void *)(v66 + 24) + 123784), v150, *(double *)(v93 + 5304), v166 / 0x93A80, (double)v165 * 2.32830644e-10 + (double)(v166 % 0x93A80));
              BYTE6(__src) = 0;
              unsigned int v182 = ((uint64_t (*)(void))a17[4])(&a17);
              LODWORD(v183) = a18;
              double v184 = ((double)v183 * 2.32830644e-10 + (double)(v182 % 0x93A80)) * 1000.0;
              double v185 = fmod(v184, 4294967300.0);
              if (v184 <= 4294967300.0) {
                double v185 = v184;
              }
              if (v185 < -4294967300.0) {
                double v185 = -fmod(-v185, 4294967300.0);
              }
              if (v185 < 0.0) {
                unsigned int v186 = --v185;
              }
              else {
                unsigned int v186 = v185;
              }
              LODWORD(__src) = v186;
              unsigned int v187 = ((unsigned int (*)(void))a17[4])(&a17) / 0x93A80;
              WORD2(__src) = v187;
              if (v156 <= 0x30D40) {
                unsigned int v188 = 200000;
              }
              else {
                unsigned int v188 = v156;
              }
              if (*(_DWORD *)(v93 + 5296)) {
                uint64_t v189 = v188 + 5000000;
              }
              else {
                uint64_t v189 = v188;
              }
              unsigned int v190 = (*(uint64_t (**)(long long *))(a19 + 32))(&a19);
              unsigned int v191 = (*(uint64_t (**)(long long *))(a19 + 32))(&a19);
              LODWORD(v192) = DWORD2(a19);
              GlCustomLog(10, "Abnormal restart recover time [%d %.0f] + %.0f = [%hu %u]\n", v190 / 0x93A80, ((double)v192 * 2.32830644e-10 + (double)(v191 % 0x93A80)) * 1000.0, v157 * 1000.0, v187, v186);
              uint64_t v193 = *(void *)(v66 + 24);
              if ((((unint64_t)(v189 + 999) * (unsigned __int128)0x4189374BC6A7F0uLL) >> 64) <= 1) {
                int v194 = 1;
              }
              else {
                int v194 = ((unint64_t)(v189 + 999) * (unsigned __int128)0x4189374BC6A7F0uLL) >> 64;
              }
              *(unsigned char *)(v193 + 382024) = 1;
              BlueFin::GlReqSm::SetAsstTime(v193 + 126144, &__src, v194);
            }
          }
          else
          {
            if (*(unsigned char *)(v93 + 8))
            {
              unint64_t v167 = 0;
              uint64_t v168 = v93 + 16;
              do
              {
                uint64_t v169 = *(void *)(v168 + 8 * v167);
                unsigned __int8 v170 = *(void (**)(void))(v169 + 56);
                if (v170)
                {
                  v170();
                  uint64_t v169 = *(void *)(v168 + 8 * v167);
                }
                BlueFin::GlRequestBase::Destroy(v169);
                ++v167;
              }
              while (v167 < *(unsigned __int8 *)(v93 + 8));
            }
            while (1)
            {
              int v174 = *(__int16 *)(v93 + 4664);
              BOOL v175 = __OFSUB__(v174, 1);
              int v176 = v174 - 1;
              if (v176 < 0 != v175) {
                break;
              }
              *(_WORD *)(v93 + 4664) = v176;
              uint64_t v171 = v93 + 8 * (unsigned __int16)v176;
              uint64_t v172 = *(void *)(v171 + 4672);
              *(void *)(v171 + 4672) = 0;
              unsigned __int16 v173 = *(void (**)(uint64_t))(v172 + 56);
              if (v173) {
                v173(v172);
              }
              BlueFin::GlRequestBase::Destroy(v172);
            }
          }
        }
        v202(v93);
        if (*(unsigned char *)(v66 + 32)) {
          int v68 = BlueFin::GlEventPump::Run(*(BlueFin::GlEventPump **)(v66 + 16), (unsigned int *)&a16 + 1, (unsigned int *)&a16);
        }
        else {
          int v68 = 100000000;
        }
      }
      else if (*(unsigned char *)(v66 + 560) && *(unsigned char *)(v67 + 126253) && !*(unsigned char *)(*(void *)(v66 + 8) + 25964))
      {
        uint64_t v177 = *(void (**)(void, void))(v66 + 344);
        if (v177)
        {
          v177(*(void *)(v66 + 272), 0);
          *(unsigned char *)(v66 + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        }
      }
      else if (*(unsigned char *)(v67 + 180178))
      {
        BlueFin::GlPeReqBag::GetNonInstantaneousRequests(v67 + 137024, &a19);
        BlueFin::GlPePendingBag::GetNonInstantaneousRequests(*(void *)(v66 + 24) + 132640, &a17);
        LODWORD(__src) = a17 | a19;
        BlueFin::GlEngineImplStd::setOnChipMeSetting(v66, (int *)&__src, 0);
        uint64_t v118 = *(void *)(v66 + 24);
        *(unsigned char *)(v118 + 180178) = 0;
        goto LABEL_182;
      }
LABEL_181:
      uint64_t v118 = *(void *)(v66 + 24);
      if (!v118)
      {
        BOOL v195 = 0;
        goto LABEL_184;
      }
LABEL_182:
      BOOL v195 = *(unsigned __int8 *)(v118 + 179704) != 0;
LABEL_184:
      this = BlueFin::GlPeTimerMgr::UpdateExpirationTime(v66 + 600, v68, v195);
      *(unsigned char *)(v66 + 592) = 0;
    }
  }
  return this;
}

void sub_26392430C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void (*a26)(uint64_t))
{
  a26(v26);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeTimerMgr::UpdateExpirationTime(uint64_t this, int a2, int a3)
{
  uint64_t v5 = this;
  if (BlueFin::GlUtils::m_pInstance)
  {
    int v6 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  }
  else
  {
    this = (*(uint64_t (**)(void))(**(void **)this + 56))();
    int v6 = this;
  }
  if (*(_DWORD *)(v5 + 16))
  {
    uint64_t v7 = *(_DWORD **)(v5 + 24);
    int v8 = v7[7];
    this = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 184))(v7);
    if (v8 - v6 + (int)this < a2) {
      a2 = v8 - v6 + this;
    }
  }
  int v9 = a2 + v6;
  if (!*(unsigned char *)(v5 + 8) || v9 != *(_DWORD *)(v5 + 12) || *(unsigned __int8 *)(v5 + 9) != a3)
  {
    *(unsigned char *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 12) = v9;
    if (a2 == 100000000) {
      char v10 = 1;
    }
    else {
      char v10 = a3;
    }
    *(unsigned char *)(v5 + 9) = v10;
    std::string v11 = *(uint64_t (**)(void))(**(void **)v5 + 48);
    return v11();
  }
  return this;
}

char *BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *this, char *a2, __int16 *a3)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, a3);
    }
    int v7 = *a3;
    return BlueFin::GlDbgCodecBase::Encode((char *)this, a2, v7, 0, 0);
  }
  return result;
}

uint64_t BlueFin::GlReqSm::ReceiveChipData(BlueFin::GlReqSm *this, void *a2, int a3)
{
  if (a3 < 0 || (__int16 v3 = a3, *((__int16 *)this + 169) + (unsigned __int16)a3 >= 1609))
  {
    DeviceFaultNotify("glreqsm.cpp", 574, "ReceiveChipData", (char)"(sSize >= 0) && (sSize+m_sPendingAsicDataSize <= (GlIntS16)sizeof(m_aucPendingAsicData))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glreqsm.cpp", 574, "(sSize >= 0) && (sSize+m_sPendingAsicDataSize <= (GlIntS16)sizeof(m_aucPendingAsicData))");
  }
  memcpy((char *)this + *((__int16 *)this + 169) + 340, a2, (unsigned __int16)a3);
  *((_WORD *)this + 169) += v3;
  uint64_t result = BlueFin::GlQueue::putFIFO((BlueFin::GlReqSm *)((char *)this + 40), 12, 0);
  *((_DWORD *)this + 1371BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  return result;
}

uint64_t BlueFin::GlQueue::putFIFO(BlueFin::GlQueue *this, int a2, char a3)
{
  if (!a2)
  {
    DeviceFaultNotify("glhsm_queue.cpp", 87, "putFIFO", (char)"sig != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_queue.cpp", 87, "sig != 0");
  }
  if (!*(unsigned char *)this)
  {
    *(unsigned char *)this = a2;
    *((unsigned char *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
    *((unsigned char *)this + 47) |= *((unsigned char *)this + 46);
    return 1;
  }
  unsigned int v3 = *((unsigned __int16 *)this + 21);
  if (v3 < *((unsigned __int16 *)this + 20))
  {
    *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v3 + 1;
    if (v3 >= *((unsigned __int16 *)this + 22)) {
      *((_WORD *)this + 22) = v3 + 1;
    }
    uint64_t v5 = (unsigned char *)*((void *)this + 2);
    uint64_t v4 = (unsigned char *)*((void *)this + 3);
    unsigned char *v4 = a2;
    v4[1] = a3;
    v4 += 2;
    *((void *)this + 3) = v4;
    if (v4 == v5) {
      *((void *)this + 3) = *((void *)this + 1);
    }
    return 1;
  }
  return 0;
}

uint64_t BlueFin::GlDbgProxyGlEngineOnTimerSet(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnTimerSet(v7, a2, a3, a4);
}

uint64_t BlueFin::GlPeEngineCallBacks::OnTimerSet(uint64_t this, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(uint64_t (**)(void, uint64_t, void, uint64_t))(this + 96);
  if (v3) {
    return v3(*(void *)(this + 8), a2, 0, a3);
  }
  return this;
}

void FireMessageHandler::messageHandler(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (a2 == 1073741831)
  {
    if (*(void *)(a1 + 1784))
    {
      memcpy(__dst, (const void *)(*(void *)(*(void *)(a1 + 1752) + ((*(void *)(a1 + 1776) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 3560 * (*(void *)(a1 + 1776) & 0xFLL)), sizeof(__dst));
      FireMessageHandler::logFireOnMsg(1073741831, *(int *)__dst);
      (*(void (**)(void))(**(void **)(a1 + 1296) + 520))();
      int64x2_t v10 = vaddq_s64(*(int64x2_t *)(a1 + 1776), (int64x2_t)xmmword_263BA7BD0);
      *(int64x2_t *)(a1 + 1776) = v10;
      if (v10.i64[0] >= 0x20uLL)
      {
        operator delete(**(void ***)(a1 + 1752));
        *(void *)(a1 + 1752) += 8;
        *(void *)(a1 + 1776) -= 16;
      }
    }
    else
    {
      uint64_t v13 = "fAssistanceExternalSensor.empty()";
LABEL_10:
      uint64_t v14 = 2;
LABEL_65:
      FireDeviceLog::DeviceLogBase(v14, v13, a3, a4, a5, a6, a7, a8, v61);
    }
  }
  else
  {
    FireMessageHandler::logFireOnMsg(a2, -1);
    switch(a2)
    {
      case 1073741824:
        FireMessageHandler::EngineState::update((int *)(a1 + 1356), 1, a3, a4, a5, a6, a7, a8);
        if (FireConfig::isSvIqDataEnabled((FireConfig *)(a1 + 1048))) {
          uint64_t v15 = FireCallback::GlReqOnSvIqData;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t GlRequestImplGnssMeasData = BlueFin::GlDbgRequest::CreateGlRequestImplGnssMeasData((uint64_t (*)(uint64_t))CbGlOnMemAlloc, (void (*)(uint64_t))CbGlOnMemFree, (uint64_t)FireCallback::GlReqOnStart, (uint64_t)FireCallback::GlReqOnGnssMeasData, 0, (uint64_t)FireCallback::GlReqOnGnssSvInfoData, 0, (uint64_t)v15, 0);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplGnssMeasData + 72))(GlRequestImplGnssMeasData, FireCallback::GlReqOnStop);
        (*(void (**)(uint64_t, void))(*(void *)GlRequestImplGnssMeasData + 16))(GlRequestImplGnssMeasData, 0);
        FireMessageHandler::startRequest(a1, 2, GlRequestImplGnssMeasData);
        uint64_t GlRequestImplPosPeriodic = BlueFin::GlDbgRequest::CreateGlRequestImplPosPeriodic((uint64_t (*)(uint64_t))CbGlOnMemAlloc, (void (*)(uint64_t))CbGlOnMemFree, (uint64_t)FireCallback::GlReqOnStart, 0x3E8u, 60, 400);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplPosPeriodic + 72))(GlRequestImplPosPeriodic, FireCallback::GlReqOnStop);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplPosPeriodic + 24))(GlRequestImplPosPeriodic, FireCallback::GlReqOnFixStatus);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplPosPeriodic + 16))(GlRequestImplPosPeriodic, FireCallback::GlReqOnNmea);
        FireMessageHandler::startRequest(a1, 0, GlRequestImplPosPeriodic);
        return;
      case 1073741825:
        FireMessageHandler::stopRequest(a1, 1);
        FireMessageHandler::stopRequest(a1, 0);
        FireMessageHandler::stopRequest(a1, 2);
        return;
      case 1073741826:
        FireDeviceLog::DeviceLogBase(6, "#fmh SetAllowGnssDwellDutyCycling,%d", a3, a4, a5, a6, a7, a8, *(unsigned char *)(a1 + 1352));
        uint64_t v18 = *(void (**)(void))(**(void **)(a1 + 1296) + 208);
        v18();
        return;
      case 1073741827:
        if (*(unsigned char *)(a1 + 1692))
        {
          memcpy(__dst, (const void *)(a1 + 1424), 0x108uLL);
          (*(void (**)(void))(**(void **)(a1 + 1296) + 360))();
          if (*(unsigned char *)(a1 + 1692)) {
            *(unsigned char *)(a1 + 1692) = 0;
          }
        }
        return;
      case 1073741828:
        if (*(void *)(a1 + 1736))
        {
          uint64_t v19 = (long long *)(*(void *)(*(void *)(a1 + 1704) + 8 * (*(void *)(a1 + 1728) / 0x55uLL))
                           + 48 * (*(void *)(a1 + 1728) % 0x55uLL));
          long long v20 = *v19;
          long long v21 = v19[2];
          *(_OWORD *)&__dst[16] = v19[1];
          *(_OWORD *)&__dst[32] = v21;
          *(_OWORD *)__dst = v20;
          (*(void (**)(void))(**(void **)(a1 + 1296) + 392))();
          *(int64x2_t *)(a1 + 1728) = vaddq_s64(*(int64x2_t *)(a1 + 1728), (int64x2_t)xmmword_263BA7BD0);
          std::deque<FireMessageHandler::GLRefPositionExtended>::__maybe_remove_front_spare[abi:ne180100](a1 + 1696);
          return;
        }
        double v22 = "fAsstPosition.empty()";
        goto LABEL_73;
      case 1073741829:
        goto LABEL_44;
      case 1073741830:
        switch((*(unsigned int (**)(void))(**(void **)(a1 + 1296) + 640))(*(void *)(a1 + 1296)))
        {
          case 0u:
            double v22 = "#fmh,injectAssistanceFile,GL_READ_LTO_SUCCESS";
            goto LABEL_59;
          case 1u:
            double v22 = "#fmh,#warning,injectAssistanceFile,GL_READ_LTO_NOT_READY";
            goto LABEL_71;
          case 2u:
            double v22 = "#fmh,#warning,injectAssistanceFile,GL_READ_LTO_IGNORED";
LABEL_71:
            uint64_t v54 = 5;
            goto LABEL_74;
          case 3u:
            double v22 = "#fmh,injectAssistanceFile,GL_READ_LTO_FAILURE";
            goto LABEL_73;
          default:
            return;
        }
      case 1073741832:
        return;
      case 1073741833:
        if (!*(void *)(a1 + 1880)) {
          return;
        }
        uint64_t v53 = (void *)(a1 + 1840);
        goto LABEL_55;
      case 1073741834:
        if (!*(void *)(a1 + 1928)) {
          return;
        }
        uint64_t v53 = (void *)(a1 + 1888);
LABEL_55:
        FireMessageHandler::SetAssistanceRawSensor(a1, v53, a3, a4, a5, a6, a7, a8, a9);
        return;
      case 1073741835:
        uint64_t v23 = *(_DWORD **)(a1 + 2120);
        uint64_t v24 = *(_DWORD **)(a1 + 2128);
        *(_OWORD *)(a1 + 212BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
        *(void *)(a1 + 2136) = 0;
        if (v23 != v24)
        {
          uint64_t v25 = v23;
          do
          {
            (*(uint64_t (**)(void, _DWORD *, void))(**(void **)(a1 + 1296) + 400))(*(void *)(a1 + 1296), v25, 0);
            FireDeviceLog::DeviceLogBase(6, "setAssistanceNetworkGpsEphemeris,SatID,%d,pass,%d", v26, v27, v28, v29, v30, v31, *v25);
            v25 += 35;
          }
          while (v25 != v24);
        }
        if (v23)
        {
          operator delete(v23);
        }
        return;
      case 1073741836:
        uint64_t v32 = *(void *)(a1 + 1960);
        (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 1296) + 672))(*(void *)(a1 + 1296), v32, *(unsigned __int8 *)(a1 + 1968));
        LOBYTE(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
        uint64_t v13 = "#fmh,SetThermalRiskState,time,%llu,ns,pass,%d,level,%d";
        goto LABEL_42;
      case 1073741837:
        GlRequestImplSynciuint64_t n = BlueFin::GlDbgRequest::CreateGlRequestImplSyncin((uint64_t (*)(uint64_t))CbGlOnMemAlloc, (void (*)(uint64_t))CbGlOnMemFree, (uint64_t)FireCallback::GlReqOnStart, -1, (uint64_t)FireCallback::GlReqOnSyncinReport, (uint64_t)FireCallback::GlReqOnSyncInStatus, (uint64_t)FireCallback::GlReqOnSyncInLatched);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplSyncin + 72))(GlRequestImplSyncin, FireCallback::GlReqOnStop);
        (*(void (**)(uint64_t, void (*)(double, uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplSyncin + 80))(GlRequestImplSyncin, FireCallback::GlReqOnSyncinReportCurrentTime);
        FireMessageHandler::startRequest(a1, 1, GlRequestImplSyncin);
        DeviceCommon::GetMachContinuousTime(v34);
        LOBYTE(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v35;
        uint64_t v13 = "#tt,RequestOneShotTimeSync,StartRequest,%.3lf,preq,%p";
        goto LABEL_64;
      case 1073741840:
        *(void *)(a1 + 1048) = *(void *)(a1 + 2192);
        return;
      case 1073741841:
        double v22 = "kUpdateCoexConfig,notSupported";
        goto LABEL_73;
      case 1073741842:
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 1296) + 744))(*(void *)(a1 + 1296), a1 + 2144);
        int v61 = *(_DWORD *)(a1 + 2144);
        uint64_t v13 = "#fmh,kUpdateRfBandEnable,fBandConstraints,%d,pass,%d";
LABEL_42:
        uint64_t v14 = 5;
        goto LABEL_65;
      case 1073741843:
        double v22 = "SetAssistanceAlongTrackVelocity not available on this platform.";
        goto LABEL_59;
      case 1073741844:
        FireMessageHandler::EngineState::update((int *)(a1 + 1356), 1, a3, a4, a5, a6, a7, a8);
        uint64_t v63 = *(__int16 *)(a1 + 1182);
        __int16 v62 = *(_WORD *)(a1 + 1180);
        FireDeviceLog::DeviceLogBase(6, "factoryTestConf,gps,%d,glo,%d,%d,%d,bds,%d,nic,%d,item,%d,mode,%d,duraSec,%d,nOffset,%d,extend,%d,L5a(%d,%d),L5b(%d,%d)", *(unsigned __int8 *)(a1 + 1196), *(unsigned int *)(a1 + 1200), *(unsigned int *)(a1 + 1204), v55, v56, v57, *(_WORD *)(a1 + 1176));
        uint64_t GlRequestImplFactoryTest = BlueFin::GlDbgRequest::CreateGlRequestImplFactoryTest((uint64_t (*)(uint64_t))CbGlOnMemAlloc, (void (*)(uint64_t))CbGlOnMemFree, (uint64_t)FireCallback::GlReqOnStart, *(_WORD *)(a1 + 1176), *(__int16 *)(a1 + 1178), *(_WORD *)(a1 + 1184), *(_WORD *)(a1 + 1186), *(_DWORD *)(a1 + 1200), *(void *)(a1 + 1204), WORD2(*(void *)(a1 + 1204)), HIWORD(*(void *)(a1 + 1204)), *(_DWORD *)(a1 + 1240), HIWORD(*(_DWORD *)(a1 + 1240)), *(_WORD *)(a1 + 1244), HIBYTE(*(_WORD *)(a1 + 1244)), *(_WORD *)(a1 + 1190), HIBYTE(*(_WORD *)(a1 + 1190)), *(unsigned char *)(a1 + 1192), SHIBYTE(v62),
                                     *(_WORD *)(a1 + 1194),
                                     HIBYTE(*(_WORD *)(a1 + 1194)),
                                     *(unsigned char *)(a1 + 1196),
                                     0,
                                     0,
                                     *(_DWORD *)(a1 + 1180),
                                     HIWORD(*(_DWORD *)(a1 + 1180)),
                                     *(_WORD *)(a1 + 1188),
                                     HIBYTE(*(_WORD *)(a1 + 1188)),
                                     *(unsigned char *)(a1 + 1246),
                                     SHIBYTE(v63),
                                     255);
        uint64_t v59 = GlRequestImplFactoryTest;
        if (*(_WORD *)(a1 + 1184) != 255) {
          *(unsigned char *)(a1 + 1073) = 1;
        }
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplFactoryTest + 72))(GlRequestImplFactoryTest, FireCallback::GlReqOnStop);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)v59 + 64))(v59, FireCallback::GlReqOnFactTest);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)v59 + 16))(v59, FireCallback::GlReqOnNmea);
        FireMessageHandler::startRequest(a1, 3, v59);
        LOBYTE(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v59;
        uint64_t v13 = "#fmh,factoryTestRequest,0x%p";
        goto LABEL_64;
      case 1073741845:
      case 1073741847:
        char v12 = *(void (**)(void))(**(void **)(a1 + 1296) + 352);
        v12();
        return;
      case 1073741846:
        FireDeviceLog::DeviceLogBase(6, "#fmh,start,freqScan,init,%d,end,%d,step,%d,rbw,%d,vbw,%d,flags,0x%X", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a1 + 1248));
        uint64_t v60 = BlueFin::GlDbgRequest::CreateGlRequestImplFactoryTest((uint64_t (*)(uint64_t))CbGlOnMemAlloc, (void (*)(uint64_t))CbGlOnMemFree, (uint64_t)FireCallback::GlReqOnStart, *(_DWORD *)(a1 + 1248), *(_DWORD *)(a1 + 1252), *(_DWORD *)(a1 + 1256), *(_DWORD *)(a1 + 1260), *(_DWORD *)(a1 + 1264), *(_DWORD *)(a1 + 1268), *(_DWORD *)(a1 + 1272));
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)v60 + 72))(v60, FireCallback::GlReqOnStop);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)v60 + 64))(v60, FireCallback::GlReqOnFactTest);
        FireMessageHandler::startRequest(a1, 4, v60);
        LOBYTE(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v60;
        uint64_t v13 = "#fmh,freqScan,0x%p";
LABEL_64:
        uint64_t v14 = 6;
        goto LABEL_65;
      case 1073741848:
        FireDeviceLog::DeviceLogBase(5, "#fftd,kStartCommStressRequest,duration,%d,loops,%u,maxKb,%u,startup,%u", a3, a4, a5, a6, a7, a8, *(_WORD *)(a1 + 1276));
        *(void *)__dst = *(void *)(a1 + 1280);
        *(void *)&__dst[8] = *(unsigned int *)(a1 + 1288);
        uint64_t GlRequestImplComStressTest = BlueFin::GlDbgRequest::CreateGlRequestImplComStressTest((uint64_t (*)(uint64_t))CbGlOnMemAlloc, (void (*)(uint64_t, __n128))CbGlOnMemFree, (uint64_t)FireCallback::GlReqOnStart, (uint64_t)FireCallback::GlReqOnStressTest, *(_WORD *)(a1 + 1276), (__n128 *)__dst);
        (*(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char)))(*(void *)GlRequestImplComStressTest + 72))(GlRequestImplComStressTest, FireCallback::GlReqOnStop);
        FireMessageHandler::startRequest(a1, 5, GlRequestImplComStressTest);
        FireDeviceLog::DeviceLogBase(6, "#fmh,commStress,0x%p", v37, v38, v39, v40, v41, v42, GlRequestImplComStressTest);
LABEL_44:
        uint64_t v43 = *(void *)(a1 + 1936);
        uint64_t v44 = *(void *)(a1 + 1944);
        if (v43 != v44)
        {
          int v45 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 1296) + 512))(*(void *)(a1 + 1296), v43, (v44 - v43));
          *(void *)(a1 + 1944) = *(void *)(a1 + 1936);
          uint64_t v52 = "SetFail";
          if (v45) {
            uint64_t v52 = "SetSuccess";
          }
          FireDeviceLog::DeviceLogBase(6, "GnssRTI,%s", v46, v47, v48, v49, v50, v51, (char)v52);
        }
        return;
      case 1073741850:
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 1296) + 504))(*(void *)(a1 + 1296), a1 + 1976))
        {
          double v22 = "setNWRtiInfo,pass";
LABEL_59:
          uint64_t v54 = 6;
        }
        else
        {
          double v22 = "setNWRtiInfo,fail";
LABEL_73:
          uint64_t v54 = 2;
        }
LABEL_74:
        FireDeviceLog::DeviceLogBase(v54, v22, a3, a4, a5, a6, a7, a8, a9);
        break;
      default:
        LOBYTE(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
        uint64_t v13 = "Unsupported message type: %d";
        goto LABEL_10;
    }
  }
}

void sub_263925794(_Unwind_Exception *exception_object)
{
}

void FireMessageHandler::logFireOnMsg(int a1, int a2)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  if ((*(unsigned int (**)(void))(**(void **)(FireResourceMgr::fInstance + 16) + 56))(*(void *)(FireResourceMgr::fInstance + 16)) >= 6)
  {
    if ((a1 - 0x40000000) > 0x1A)
    {
      if (a2 < 0) {
        goto LABEL_6;
      }
    }
    else if (a2 < 0)
    {
LABEL_6:
      FireDeviceLog::DeviceLogBase(6, "msg,%d,%s", v4, v5, v6, v7, v8, v9, a1);
      return;
    }
    FireDeviceLog::DeviceLogBase(6, "msg,%d,%s,type,%d", v4, v5, v6, v7, v8, v9, a1);
  }
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnStop(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  unsigned int v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3080);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t)))(**(void **)(a1 + 24) + 72))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnStop);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3080);
    uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

uint64_t BlueFin::GlRequestImpl::SetOnStop(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnNmea(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v4)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 3077);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v13 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v13);
    int v12 = a2 != 0;
    uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v12);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  if (a2) {
    uint64_t v7 = BlueFin::GlDbgProxyGlReqOnNmea;
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, char *, uint64_t)))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v7);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3077);
    int v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v11 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v11);
    int64x2_t v10 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v10();
  }
  return result;
}

uint64_t BlueFin::GlRequestImplNmea::SetOnNmea(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t BlueFin::GlDbgEngine::SetAsstTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v13 = a3;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1559);
    uint64_t v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7))
    {
      *((_DWORD *)v7 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v7, a2);
    }
    int v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v13);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v9 = BlueFin::GlEngineImplStd::SetAsstTime(a1 + 368, a2, a3);
    BOOL v12 = v9;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1559);
    int64x2_t v10 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, &v12);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:838");
    return 0;
  }
  return v9;
}

#error "263925EC4: call analysis failed (funcsize=125)"

uint64_t BlueFin::GlReqSm::SetAsstTime(uint64_t a1, void *__src, int a3)
{
  *(_DWORD *)(a1 + 10848) |= 0x200u;
  uint64_t v6 = *(BlueFin::GlPeTimeManagerData **)(a1 + 6280);
  if (*((_DWORD *)v6 + 642) == -7200001 && (*(unsigned char *)(*(void *)(a1 + 6272) + 33) & 0x40) == 0) {
    BlueFin::GlPeTimeManager::TimeAsstPending(v6);
  }
  memcpy((void *)(a1 + 8288), __src, 0x108uLL);
  *(_DWORD *)(a1 + 8564) = a3;
  *(_DWORD *)(a1 + 10076) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  __int16 v10 = 10;
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v8;
  do
  {
    unint64_t v11 = 0;
    if (BlueFin::patch_dispatch(v8, a1, (unsigned __int8 *)&v10, &v11)) {
      unint64_t v8 = v11;
    }
    else {
      unint64_t v8 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v10);
    }
    *(void *)(a1 + 32) = v8;
  }
  while (v8);
  *(void *)(a1 + 32) = v7;
  return 1;
}

uint64_t BlueFin::validateAsstTime(uint64_t result)
{
  if (*(_DWORD *)result > 0x240C83FFu) {
    return 0;
  }
  if (*(unsigned __int16 *)(result + 4) > 0xFFCu) {
    return 0;
  }
  uint64_t v1 = *(unsigned __int8 *)(result + 6);
  if (v1 > 0x20) {
    return 0;
  }
  if (!*(unsigned char *)(result + 6)) {
    return 1;
  }
  char v2 = (unsigned __int8 *)(result + 14);
  LOBYTE(result) = 1;
  do
  {
    uint64_t result = (result & 1) != 0
          && *(v2 - 6) <= 0x3Fu
          && (*((_WORD *)v2 - 2) & 0xC000) == 0
          && *(v2 - 2) <= 1u
          && *(v2 - 1) <= 1u
          && *v2 < 4u;
    v2 += 8;
    --v1;
  }
  while (v1);
  return result;
}

void std::deque<FireMessageHandler::GLRefPositionExtended>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1)
{
  if (*(void *)(a1 + 32) >= 0xAAuLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 85;
  }
}

BlueFin::GlPeTimeManagerData *BlueFin::GlPeTimeManager::TimeAsstPending(BlueFin::GlPeTimeManagerData *this)
{
  if (*((_DWORD *)this + 642) == -7200001)
  {
    *((unsigned char *)this + 2564) = 1;
    this = BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v1);
    v2 |= 0x20u;
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        return (BlueFin::GlPeTimeManagerData *)(*(uint64_t (**)(uint64_t *, void, void))(v1 + 24))(&v1, 0, 0);
      }
    }
  }
  return this;
}

unint64_t FireConfig::isSvIqDataEnabled(FireConfig *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 64))(*(void *)(FireResourceMgr::fInstance + 40));
  unint64_t v2 = (unint64_t)v1 >> 63;
  FireDeviceLog::DeviceLogBase(5, "#fc,isSvIqDataEnabled,%d", v3, v4, v5, v6, v7, v8, v1 < 0);
  return v2;
}

uint64_t std::vector<std::function<void ()(void)>>::emplace_back<std::function<void ()(void)>&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(void)>>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[32 * v9];
    uint64_t v18 = &v13[32 * v12];
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    uint64_t v17 = v16 + 32;
    std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return v8 - 32;
}

void sub_263926374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0,std::allocator<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0>,void ()(void)>::target_type()
{
}

uint64_t BlueFin::GlPeAsstMgr::DeserializeEph(uint64_t this, BlueFin::GlSysLogEntry *a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_asstmgr.cpp", 1030, "DeserializeEph", (char)"potEntry != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_asstmgr.cpp", 1030, "potEntry != nullptr");
  }
  uint64_t v3 = (void *)this;
  int v4 = *((_DWORD *)a2 + 2);
  if (v4 > 37)
  {
    if (v4 == 38)
    {
      unint64_t v7 = &unk_270EC1D10;
      __int16 v9 = 2065;
      uint64_t v10 = &v12;
      int32x2_t v11 = vdup_n_s32(0xFF9222FF);
      long long v12 = 0u;
      long long v13 = 0u;
      uint64_t v8 = &unk_270EC1BF0;
      this = BlueFin::GlPeLegacySbasEph::Deserialize((BlueFin::GlPeLegacySbasEph *)&v7, a2);
      if (!this) {
        return this;
      }
      uint64_t v6 = v3[920];
    }
    else
    {
      if (v4 != 66) {
        return this;
      }
      unint64_t v7 = &unk_270EBFDC8;
      __int16 v9 = 4673;
      uint64_t v10 = &v12;
      int32x2_t v11 = vdup_n_s32(0xFF9222FF);
      long long v12 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      uint64_t v16 = 0;
      uint64_t v8 = &unk_270EBFA28;
      this = BlueFin::GlPeLegacyBdsEph::Deserialize((BlueFin::GlPeLegacyBdsEph *)&v7, a2);
      if (!this) {
        return this;
      }
      uint64_t v6 = v3[923];
    }
    return (*(uint64_t (**)(uint64_t, void **))(*(void *)v6 + 192))(v6, &v8);
  }
  if (v4 == 35)
  {
    LODWORD(v7) = 0;
    this = BlueFin::GlPeEphemeris::DeserializeHeader(a2, (int *)&v7, &v17);
    if (this)
    {
      this = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr(v3 + 48, (int)v7);
      if (this) {
        return (*(uint64_t (**)(uint64_t, BlueFin::GlSysLogEntry *))(*(void *)this + 184))(this, a2);
      }
    }
  }
  else if (v4 == 37)
  {
    uint64_t v5 = *(void *)(this + 7368);
    unint64_t v7 = &unk_270EC1270;
    __int16 v9 = 2593;
    uint64_t v10 = &v12;
    int32x2_t v11 = vdup_n_s32(0xFF9222FF);
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v8 = &unk_270EC0F88;
    *(void *)&long long v14 = 0;
    *((void *)&v14 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v5 + 5856;
    this = BlueFin::GlPeLegacyGloEph::Deserialize((BlueFin::GlPeLegacyGloEph *)&v7, a2);
    if (this) {
      return (*(uint64_t (**)(uint64_t, void **))(*(void *)v5 + 192))(v5, &v8);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeEphemerisMgr::DeserializeEph(BlueFin::GlPeEphemerisMgr *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 35)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1823, "DeserializeEph", (char)"rotEntry.eType == GLPE_LOG_ENTRY_EPH");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1823, "rotEntry.eType == GLPE_LOG_ENTRY_EPH");
  }
  uint64_t v8 = 0;
  BOOL v4 = BlueFin::GlPeEphemeris::DeserializeHeader(a2, (int *)&v8 + 1, (int *)&v8);
  uint64_t result = 0;
  if (v4)
  {
    if (HIDWORD(v8) == *((_DWORD *)this + 3))
    {
      uint64_t v6 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, unsigned char *, void))(*(void *)this + 16))(this, v7, v8);
      uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlSysLogEntry *))(*(void *)v6 + 16))(v6, a2);
      if (result) {
        return (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, uint64_t))(*(void *)this + 192))(this, v6);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::DeserializeEph(BlueFin::GlPeEphemerisMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  (*(void (**)(uint64_t *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(&v10, a2);
  uint64_t result = BlueFin::GlPeEphemerisMgr::AllowSV((uint64_t)this, (unsigned __int8 *)&v10);
  if (result)
  {
    if ((_BYTE)v10
      && v10 < (*((unsigned char *)this + 104) + 1)
      && (*(unsigned int (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 144))(a2) != 2)
    {
      uint64_t result = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)this + 376))(this, a2, 1);
      if (result)
      {
        int v5 = v10;
        if (v10 - 64 <= 0xFFFFFFC0)
        {
          DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        }
        *(_DWORD *)(*((void *)this + 51) + (((unint64_t)v10 >> 3) & 0x1C)) |= 1 << v10;
        int v6 = *((_DWORD *)this + 3);
        unint64_t v7 = "BDS";
        uint64_t v8 = "GPS";
        switch(v6)
        {
          case 0:
            break;
          case 1:
            uint64_t v8 = "SBAS";
            break;
          case 2:
            uint64_t v8 = "GLNS";
            break;
          case 3:
            uint64_t v8 = "QZSS";
            break;
          case 4:
            goto LABEL_15;
          default:
            __int16 v9 = "<->";
            if (v6 == 6) {
              __int16 v9 = "NIC";
            }
            unint64_t v7 = "GAL";
            if (v6 != 5) {
              unint64_t v7 = v9;
            }
LABEL_15:
            uint64_t v8 = v7;
            break;
        }
        GlCustomLog(14, "Read %s Ephemeris(%s,%d)\n", "NVMEM", v8, v5);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL BlueFin::GlPeEphemerisMgr::AllowSV(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = (1 << (v2 - 1)) & *(unsigned int *)(a1 + 528);
  if (v3) {
    GlCustomLog(14, "NVS: suppress BE from %d %d\n", *(_DWORD *)(a1 + 12), v2);
  }
  return v3 == 0;
}

uint64_t BlueFin::GlPeEphemeris::Deserialize(BlueFin::GlPeEphemeris *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v21 = 0;
  BOOL v4 = BlueFin::GlPeEphemeris::DeserializeHeader(a2, (int *)&v21 + 1, (int *)&v21);
  uint64_t result = 0;
  if (v4)
  {
    unsigned int v6 = *((unsigned __int8 *)this + 8);
    if (v21 == __PAIR64__(v6 >> 4, v6 & 0xF))
    {
      *((_WORD *)a2 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      unsigned int v7 = *((unsigned __int8 *)a2 + 12);
      if (v7 >= 9)
      {
        BlueFin::GlSysLogEntry::GetU8(a2);
        if (*((unsigned __int8 *)a2 + 12) >= 0xBu) {
          BlueFin::GlSysLogEntry::GetU8(a2);
        }
        unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
        if (*((unsigned __int8 *)a2 + 12) > 0xAu || v6 >> 4 && v6 >> 4 != 3)
        {
          if (U8 <= *((unsigned __int8 *)this + 9))
          {
            if (!U8)
            {
LABEL_32:
              if ((*(unsigned int (**)(BlueFin::GlPeEphemeris *))(*(void *)this + 144))(this) != 2) {
                return 1;
              }
              unsigned int v19 = *((unsigned __int8 *)a2 + 12);
              if (v19 == 9)
              {
                (*(void (**)(BlueFin::GlPeEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 32, 0);
                unsigned int v19 = *((unsigned __int8 *)a2 + 12);
              }
              if (v19 >= 0xB) {
                return 1;
              }
              goto LABEL_36;
            }
LABEL_30:
            uint64_t v17 = 0;
            uint64_t v18 = U8;
            do
              *(_DWORD *)(*((void *)this + 2) + 4 * v17++) = BlueFin::GlSysLogEntry::GetU32(a2);
            while (v18 != v17);
            goto LABEL_32;
          }
        }
        else if (*((unsigned __int8 *)this + 9) >= 0x12u)
        {
          unsigned int U8 = 18;
          goto LABEL_30;
        }
        return 0;
      }
      if (v7 == 8) {
        BlueFin::GlSysLogEntry::GetU8(a2);
      }
      if (*((unsigned __int8 *)this + 9) >= 0x12u)
      {
        for (uint64_t i = 0; i != 18; ++i)
        {
          unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
          int32x2_t v11 = (unsigned int *)*((void *)this + 2);
          v11[i] = U32;
        }
        if (*((unsigned char *)a2 + 12) != 7) {
          goto LABEL_24;
        }
        unint64_t v12 = *v11;
        unsigned int v13 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
              + (v12 >> 25));
        if (*((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
             + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
             + (v12 >> 25)))
        {
          if (v13 < 0x21) {
            goto LABEL_21;
          }
          if (v13 - 66 <= 9)
          {
            LOBYTE(v13) = v13 - 65;
LABEL_21:
            uint64_t v14 = 0;
            unsigned int v15 = v12 & 0x1FFFFFF | (v13 << 25);
            *int32x2_t v11 = v15;
            do
            {
              unsigned int v16 = v11[v14 + 1];
              v11[v14++] = __PAIR64__(v15, v16) >> 31;
              unsigned int v15 = v16;
            }
            while (v14 != 17);
            v11[17] *= 2;
LABEL_24:
            if ((*(unsigned int (**)(BlueFin::GlPeEphemeris *))(*(void *)this + 144))(this) != 2) {
              return 1;
            }
            (*(void (**)(BlueFin::GlPeEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 32, 0);
LABEL_36:
            (*(void (**)(BlueFin::GlPeEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 33, 0);
            uint64_t v20 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
            (*(void (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 34, v20);
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t BlueFin::GlPeNicEphMgr::MakeEphemerisObj(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v3 = &unk_270EBED80;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 76) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    char v5 = 15;
    char v6 = 97;
  }
  else
  {
    char v7 = *(unsigned char *)(a1 + 12);
    uint64_t v3 = &unk_270EC0528;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 92) = 0u;
    char v6 = (16 * v7) | 2;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 19;
  }
  *(unsigned char *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 9) = v5;
  *(void *)(a2 + 16) = v4;
  *(int32x2_t *)(a2 + 24) = vdup_n_s32(0xFF9222FF);
  *(void *)a2 = v3;
  return a2;
}

uint64_t BlueFin::GlPeGloEphMgr::DeserializeEph(BlueFin::GlPeGloEphMgr **this, const BlueFin::GlPeEphemeris *a2)
{
  uint64_t result = BlueFin::GlPeGloEphMgr::quarterCheck(this[2], a2);
  if (result)
  {
    return BlueFin::GlPeEphemerisMgr::DeserializeEph((BlueFin::GlPeEphemerisMgr *)this, a2);
  }
  return result;
}

BOOL BlueFin::GlPeAsstMgr::DetermineSystemMode(BlueFin::GlPeAsstMgr *this, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char *a53,uint64_t a54,uint64_t a55,char a56)
{
  STACK[0x518] = *MEMORY[0x263EF8340];
  uint64_t v56 = (int *)((char *)this + 120012);
  if (*((_DWORD *)this + 30003)) {
    return 1;
  }
  int v59 = *(_DWORD *)(*((void *)this + 3) + 36);
  if (v59 == 3) {
    goto LABEL_40;
  }
  if (v59 != 2 && ((a2 & 0x40) == 0 || v59) && !a3)
  {
    uint64_t v61 = 0;
    STACK[0x4F8] = (unint64_t)&a56;
    do
    {
      uint64_t v62 = STACK[0x4F8] + v61;
      *(void *)(v62 + 12) = 0;
      *(void *)uint64_t v62 = v62 + 12;
      *(unsigned char *)(v62 + 8) = 2;
      v61 += 24;
    }
    while (v61 != 168);
    uint64_t v63 = 0;
    a53 = &a32;
    do
    {
      uint64_t v64 = &a53[v63];
      uint64_t v65 = &a53[v63];
      *(void *)(v65 + 12) = 0;
      *(void *)uint64_t v64 = v65 + 12;
      v64[8] = 2;
      v63 += 24;
    }
    while (v63 != 168);
    BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v85, (BlueFin::GlPeAsstMgr *)((char *)this + 120800));
    int v66 = a27;
    char v67 = a28;
    if (a27 != 6 || a28 != 14)
    {
      unint64_t v69 = (void *)((char *)this + 384);
      do
      {
        int v83 = v66;
        char v84 = v67;
        Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v69, v66);
        if (Mgr)
        {
          uint64_t v71 = (*(uint64_t (**)(void *, char *, void))(*Mgr + 112))(Mgr, &v84, 0);
          uint64_t v72 = v71;
          if (v71)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v71 + 40))(v71)
              && (*(unsigned int (**)(uint64_t))(*(void *)v72 + 48))(v72))
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)v72 + 56))(v72)) {
                unsigned int v73 = &a56;
              }
              else {
                unsigned int v73 = &a32;
              }
              BlueFin::GlGnssSet::Add((uint64_t)v73, &v83);
            }
          }
        }
        BlueFin::GlGnssSetIterator::operator++((uint64_t)&v85);
        int v66 = a27;
        char v67 = a28;
      }
      while (a27 != 6 || a28 != 14);
    }
    uint64_t v75 = 0;
    int v76 = 0;
    unint64_t v77 = STACK[0x4F8];
    do
    {
      v76 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v77 + v75));
      v75 += 24;
    }
    while (v75 != 168);
    uint64_t v78 = 0;
    int v79 = 0;
    int v80 = a53;
    do
    {
      v79 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&v80[v78]);
      v78 += 24;
    }
    while (v78 != 168);
    if ((v79 + v76) < 3u)
    {
      int v60 = *v56;
      return v60 != 0;
    }
    uint64_t v81 = 0;
    int v82 = 0;
    do
    {
      v82 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v77 + v81));
      v81 += 24;
    }
    while (v81 != 168);
    if (v82 >= 2u)
    {
      int v60 = 1;
LABEL_41:
      *uint64_t v56 = v60;
      return v60 != 0;
    }
LABEL_40:
    int v60 = 2;
    goto LABEL_41;
  }
  *uint64_t v56 = 1;
  int v60 = 2;
  return v60 != 0;
}

uint64_t BlueFin::GlPeEphemeris::isSimulatedDeterminable(BlueFin::GlPeEphemeris *this)
{
  return 1;
}

BOOL BlueFin::GlPeGpsEphemerisBase::isSimulated(BlueFin::GlPeGpsEphemerisBase *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 3)) {
    return 0;
  }
  int v3 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 11);
  int v4 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 23);
  if (v3) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (v4) {
    unsigned __int8 v6 = v3 == 0;
  }
  else {
    unsigned __int8 v6 = v5;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 21)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 19)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 14)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 16)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 26)) {
    ++v6;
  }
  if ((*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 25)) {
    unsigned __int8 v7 = v6;
  }
  else {
    unsigned __int8 v7 = v6 + 1;
  }
  return v7 > 5u;
}

BOOL BlueFin::GlPeBdsEphemeris::isSimulated(BlueFin::GlPeBdsEphemeris *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 3)) {
    return 0;
  }
  int v3 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 11);
  int v4 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 23);
  if (v3) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (v4) {
    unsigned __int8 v6 = v3 == 0;
  }
  else {
    unsigned __int8 v6 = v5;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 21)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 19)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 14)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 16)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 26)) {
    ++v6;
  }
  if ((*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 208))(this, 25)) {
    unsigned __int8 v7 = v6;
  }
  else {
    unsigned __int8 v7 = v6 + 1;
  }
  return v7 > 5u;
}

BOOL BlueFin::GlPeGalEphemeris::isSimulated(BlueFin::GlPeGalEphemeris *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 3)) {
    return 0;
  }
  int v3 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 11);
  int v4 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 23);
  if (v3) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (v4) {
    unsigned __int8 v6 = v3 == 0;
  }
  else {
    unsigned __int8 v6 = v5;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 21)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 19)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 14)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 16)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 26)) {
    ++v6;
  }
  if ((*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 208))(this, 25)) {
    unsigned __int8 v7 = v6;
  }
  else {
    unsigned __int8 v7 = v6 + 1;
  }
  return v7 > 5u;
}

BOOL BlueFin::GlPeNicEphemeris::isHealthy(BlueFin::GlPeNicEphemeris *this)
{
  uint64_t v2 = (*(unsigned __int8 (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 4);
  return v2 <= 0xE
      && (unint64_t)(v2 - 7) >= 8
      && (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 3) == 0;
}

uint64_t BlueFin::GlPeGloEphemeris::isSimulatedDeterminable(BlueFin::GlPeGloEphemeris *this)
{
  return 0;
}

double BlueFin::GlPeSubsets::ComputeScatterWidthK(BlueFin::GlPeSubsets *this, int a2)
{
  double v27 = 0.0;
  double v28 = 0.0;
  uint64_t v29 = 0;
  double v24 = 0.0;
  double v25 = 0.0;
  uint64_t v26 = 0;
  BlueFin::GlPeSubsetIterator::GlPeSubsetIterator(&v22, (unint64_t *)this);
  unint64_t v3 = BlueFin::GlPeSubsetIterator::operator->(&v22);
  double v4 = 4000.0;
  if (v23 < v22)
  {
    char v5 = 0;
    int v6 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v3 + 24)) - a2;
    uint64_t v7 = 0;
    double v8 = 0.0;
    double v9 = 0.0;
    uint64_t v10 = 0;
    double v11 = 0.0;
    double v12 = 0.0;
LABEL_3:
    double v13 = v12;
    char v14 = v5;
    do
    {
      if (!a2
        || (unint64_t v15 = BlueFin::GlPeSubsetIterator::operator->(&v22),
            v6 == BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v15 + 24))))
      {
        unint64_t v16 = BlueFin::GlPeSubsetIterator::operator->(&v22);
        double v12 = *(double *)v16;
        if (v14)
        {
          if (v13 < v12) {
            double v12 = v13;
          }
          unint64_t v18 = BlueFin::GlPeSubsetIterator::operator->(&v22);
          if (v11 >= *(double *)(v18 + 8)) {
            double v11 = *(double *)(v18 + 8);
          }
          unsigned int v19 = (double *)BlueFin::GlPeSubsetIterator::operator->(&v22);
          if (*v19 >= v9) {
            double v9 = *v19;
          }
          unint64_t v20 = BlueFin::GlPeSubsetIterator::operator->(&v22);
          if (*(double *)(v20 + 8) >= v8) {
            double v8 = *(double *)(v20 + 8);
          }
          v23 += 160;
          char v5 = 1;
          if (v23 >= v22)
          {
            double v27 = v12;
            double v28 = v11;
            uint64_t v29 = v10;
            double v24 = v9;
            double v25 = v8;
            uint64_t v26 = v7;
            goto LABEL_21;
          }
          goto LABEL_3;
        }
        double v11 = *(double *)(v16 + 8);
        uint64_t v10 = *(void *)(v16 + 16);
        unint64_t v17 = BlueFin::GlPeSubsetIterator::operator->(&v22);
        double v9 = *(double *)v17;
        double v8 = *(double *)(v17 + 8);
        uint64_t v7 = *(void *)(v17 + 16);
        char v14 = 1;
        double v13 = v12;
      }
      v23 += 160;
    }
    while (v23 < v22);
    double v27 = v12;
    double v28 = v11;
    uint64_t v29 = v10;
    double v24 = v9;
    double v25 = v8;
    uint64_t v26 = v7;
    if ((v5 & 1) == 0) {
      return v4;
    }
LABEL_21:
    BlueFin::lla2ned(&v27, &v24, 0, &v30);
    return sqrt(v31 * v31 + v30 * v30);
  }
  return v4;
}

uint64_t BlueFin::GlPeLsq::LsPosCalc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, unsigned char *a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v212 = v12;
  uint64_t v14 = v13;
  int v16 = v15;
  uint64_t v211 = v17;
  unint64_t v18 = v11;
  uint64_t v20 = v19;
  uint64_t v208 = v10;
  uint64_t v278 = *MEMORY[0x263EF8340];
  int v21 = *(_DWORD *)(v19 + 48);
  uint64_t v22 = v21 & 0x300;
  uint64_t v202 = v23;
  if (v22 == 512)
  {
    char v24 = 5;
  }
  else
  {
    if ((v21 & 0x1400000) == 0x400000) {
      char v24 = 5;
    }
    else {
      char v24 = 4;
    }
    if ((v21 & 0x100) != 0)
    {
      int v25 = *v11;
      if (v25 <= 3)
      {
        if ((v21 & 0x400) == 0) {
          *a10 = 1;
        }
        char v24 = v25;
      }
    }
  }
  int v26 = *v11;
  double v27 = (char *)&v258 + 8;
  long long v258 = xmmword_263BBC3E0;
  v256 = &v259;
  uint64_t v257 = &v260;
  uint64_t v260 = 0;
  for (uint64_t i = 1; i != 21; ++i)
  {
    v257[i] = (uint64_t)v27;
    v27 += 40;
  }
  *(void *)uint64_t v214 = v24;
  BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v256, v26, v24);
  BlueFin::BigMatrixDim<20,1>::BigMatrixDim((BlueFin::BigMatrix *)&v254, (char)*v18);
  BlueFin::SKFVectorDim<16>::SKFVectorDim((uint64_t)v253, (char)*v18);
  uint64_t v30 = *(void *)(v20 + 8);
  uint64_t v29 = *(void *)(v20 + 16);
  memset(v272, 0, sizeof(v272));
  long long v274 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  long long v277 = 0u;
  if (v30) {
    BOOL v31 = v29 == 0;
  }
  else {
    BOOL v31 = 0;
  }
  int v32 = !v31;
  double v251 = 0.0;
  double v250 = 0.0;
  double v252 = 0.0;
  if (v31 || v29)
  {
    *a10 = 0;
    BlueFin::lla2ecef((double *)v212, (uint64_t)&v245);
    double v33 = v245;
    double v34 = v246;
    double v250 = v245;
    double v251 = v246;
    double v35 = *(double *)&v247;
    double v252 = *(double *)&v247;
    int v210 = 10;
    int v209 = 1;
  }
  else
  {
    int v209 = 0;
    int v210 = *(unsigned __int8 *)(v20 + 44);
    double v35 = 0.0;
    double v34 = 0.0;
    double v33 = 0.0;
  }
  int v36 = (char *)&v247 + 8;
  long long v247 = xmmword_263BBC3F0;
  double v245 = COERCE_DOUBLE(&v248);
  double v246 = COERCE_DOUBLE(v249);
  v249[0] = 0;
  for (uint64_t j = 8; j != 136; j += 8)
  {
    *(void *)(*(void *)&v246 + j) = v36;
    v36 += 64;
  }
  v242[0] = v243;
  v242[1] = 0x1000000000;
  memset(v243, 0, sizeof(v243));
  uint64_t v244 = 0;
  v239[0] = v240;
  v239[1] = 0x1000000000;
  memset(v240, 0, sizeof(v240));
  uint64_t v241 = 0;
  v236[0] = v237;
  v236[1] = 0x1000000000;
  memset(v237, 0, sizeof(v237));
  uint64_t v238 = 0;
  unsigned int v38 = *(_DWORD *)(v20 + 48);
  v232[0] = v239;
  v232[1] = v236;
  v232[2] = &v245;
  v232[3] = v242;
  long long v233 = 0u;
  long long v234 = 0u;
  uint64_t v235 = 0;
  uint64_t v229 = v231;
  char v230 = 4;
  v231[1] = 0;
  v231[0] = 0;
  int v39 = v214[0] + 1;
  if (v214[0] + 1 >= (char)*v18)
  {
    int v40 = (v38 >> 4) & 1;
  }
  else
  {
    int v40 = (v38 >> 4) & 1;
    if ((~v38 & 0x2000800) == 0)
    {
      unsigned int v41 = 0;
      int v213 = 1;
      goto LABEL_37;
    }
  }
  uint64_t v42 = *v18;
  if ((char)v42 < 1)
  {
    unsigned int v41 = 0;
  }
  else
  {
    unsigned int v41 = 0;
    unsigned int v43 = 0;
    uint64_t v44 = 0;
    unsigned int v45 = 0;
    uint64_t v46 = (unsigned __int8 *)(v211 + 32);
    do
    {
      unsigned int v47 = *v46;
      v46 += 56;
      if (((1 << (v47 & 0x1F)) & *(unsigned int *)(*(void *)(v20 + 64) + (((unint64_t)v47 >> 3) & 0x1C))) != 0)
      {
        unsigned int v41 = v45 | (1 << v44);
        unsigned int v43 = v41;
        unsigned int v45 = v41;
      }
      ++v44;
    }
    while (v42 != v44);
    if (v43)
    {
      int v213 = 0;
      int v40 = 2;
      goto LABEL_37;
    }
  }
  int v213 = 0;
LABEL_37:
  uint64_t v203 = v14;
  if (!v210)
  {
    BOOL v114 = 0;
    double v51 = 0.0;
    double v53 = 0.0;
    double v52 = 0.0;
LABEL_218:
    if (*(void *)(v20 + 16)) {
      char v195 = 0;
    }
    else {
      char v195 = v32;
    }
    if ((v195 & 1) == 0)
    {
      *(_OWORD *)uint64_t v203 = *(_OWORD *)v212;
      *(void *)(v203 + 16) = *(void *)(v212 + 16);
      return v114;
    }
    double v196 = v53 / (double)BlueFin::GlSetBase::Cnt(v202);
    if (v196 > 0.0)
    {
      *(unsigned char *)(v203 + 227) = v114;
      *(double *)(v203 + 232) = sqrt(v196);
      *(double *)(v203 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = sqrt(v52);
      float v197 = v51;
      *(float *)(v203 + 256) = v197;
      return 1;
    }
    uint64_t v199 = "fRmsRangeMeasUnc > 0.0";
    DeviceFaultNotify("glpe_lsq.cpp", 1213, "LsPosCalc", (char)"fRmsRangeMeasUnc > 0.0");
    int v200 = 1213;
LABEL_228:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", v200, v199);
  }
  unsigned int v204 = v41;
  double v205 = v33;
  double v206 = v35;
  int v48 = 0;
  unsigned int v207 = v38 & 1 | (32 * ((v38 >> 15) & 1)) & 0xFFFBDFFF | (v38 >> 11) & 0x800 | (((v38 >> 5) & 1) << 13) & 0xFFFBFFFF | ((HIWORD(v38) & 1) << 18) | 0x4C0;
  if (v39 <= 2) {
    uint64_t v49 = 2;
  }
  else {
    uint64_t v49 = v39;
  }
  double v50 = 0.25;
  double v51 = 0.0;
  double v52 = 0.0;
  double v53 = 0.0;
  while (1)
  {
    uint64_t v54 = *(void *)(v20 + 32);
    unsigned int v55 = *(_DWORD *)(v20 + 40);
    *(void *)&long long v215 = a9;
    *((void *)&v215 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v212;
    *(void *)&long long v216 = v54;
    *((void *)&v216 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = __PAIR64__(v209, v55);
    unsigned int v217 = v207;
    long long v218 = 0u;
    long long v219 = 0u;
    long long v220 = 0u;
    long long v221 = 0u;
    uint64_t v222 = 0x4008000000000000;
    BlueFin::GlSetBase::SetAllLower(&v229, (char)*v18);
    if ((char)*v18 > v16)
    {
      uint64_t v199 = "cNumMeas <= lSkfMeasNum";
      DeviceFaultNotify("glpe_lsq.cpp", 850, "LsPosCalc", (char)"cNumMeas <= lSkfMeasNum");
      int v200 = 850;
      goto LABEL_228;
    }
    if ((*(unsigned int (**)(void, long long *, void *, uint64_t, void **))(**(void **)(v208 + 8)
                                                                                          + 16))(*(void *)(v208 + 8), &v215, v232, v211, &v229))
    {
      return 0;
    }
    if ((char)*v18 >= 1)
    {
      uint64_t v56 = 0;
      int v57 = *(_DWORD *)(v20 + 48);
      uint64_t v58 = v253[0] + 8;
      uint64_t v59 = v242[0] + 8;
      uint64_t v60 = v239[0] + 8;
      uint64_t v61 = v257 + 1;
      uint64_t v62 = (void *)(*(void *)&v246 + 8);
      uint64_t v63 = v255 + 8;
      uint64_t v64 = v236[0] + 8;
      uint64_t v65 = (_DWORD *)(v211 + 44);
      do
      {
        *(double *)(*(void *)(v63 + 8 * v56) + 8) = *(double *)(v60 + 8 * v56) - *(double *)(v64 + 8 * v56);
        if (*(void *)(v20 + 16)) {
          char v66 = 0;
        }
        else {
          char v66 = v32;
        }
        char v67 = (double *)v62[v56];
        int v68 = (double *)v61[v56];
        v68[1] = v67[1];
        if (v66)
        {
          v68[2] = v67[3];
          v68[3] = v67[7];
          v68[4] = v67[5];
          if (v22 == 512) {
            v68[5] = v67[8];
          }
          if ((v57 & 0x1400000) == 0x400000)
          {
            if ((BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(v65 - 2)
                                                                         - *(v65 - 2)
                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)v65 - 12)]] & 0xFD) != 0)
              double v69 = 1.0;
            else {
              double v69 = 0.0;
            }
            goto LABEL_58;
          }
        }
        else
        {
          v68[2] = v67[2];
          v68[3] = v67[3];
          v68[4] = v67[4];
          if (v22 == 512)
          {
            double v69 = v67[7];
LABEL_58:
            v68[5] = v69;
          }
        }
        if (!v48 && !*v65)
        {
          double v70 = *(double *)(v59 + 8 * v56);
          double v53 = v53 + v70;
          if (v70 >= v52) {
            double v52 = *(double *)(v59 + 8 * v56);
          }
        }
        if (v40 == 1)
        {
          double v72 = *(double *)(v59 + 8 * v56);
          double v71 = 1.0;
          goto LABEL_69;
        }
        double v71 = 1.0;
        if (v40 == 2)
        {
          if (((unint64_t)v204 >> v56))
          {
            double v71 = 0.25;
            if ((v57 & 0x10) != 0) {
              double v71 = v50 / *(double *)(v59 + 8 * v56);
            }
          }
          else if ((v57 & 0x10) != 0)
          {
            double v72 = *(double *)(v59 + 8 * v56);
LABEL_69:
            if (v72 > v71) {
              double v71 = 1.0 / v72;
            }
          }
        }
        *(double *)(v58 + 8 * v56++) = v71;
        v65 += 14;
      }
      while (v56 < (char)*v18);
    }
    long long v269 = xmmword_263BBC400;
    unsigned int v73 = (char *)&v269 + 8;
    v267 = &v270;
    int v268 = &v271;
    uint64_t v74 = 1;
    uint64_t v271 = 0;
    do
    {
      v268[v74] = (uint64_t)v73;
      v73 += 64;
      ++v74;
    }
    while (v74 != 9);
    long long v225 = xmmword_263BBC410;
    *(void *)&long long v224 = v226;
    uint64_t v75 = (char *)&v225 + 8;
    *((void *)&v224 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &v228;
    uint64_t v76 = 8;
    uint64_t v228 = 0;
    do
    {
      *(void *)(*((void *)&v224 + 1) + v76) = v75;
      v75 += 128;
      v76 += 8;
    }
    while (v76 != 72);
    if (v40)
    {
      int v77 = DWORD1(v258);
      *(void *)&long long v225 = __PAIR64__(v258, DWORD1(v258));
      if ((int)v258 >= 1)
      {
        uint64_t v78 = v253[0];
        int v79 = v257;
        uint64_t v80 = v258 + 1;
        uint64_t v81 = *((void *)&v224 + 1) + 8;
        uint64_t v82 = 1;
        do
        {
          if (v77 >= 1)
          {
            double v83 = *(double *)(v78 + 8 * v82);
            char v84 = (double *)(v79[v82] + 8);
            uint64_t v85 = (uint64_t *)v81;
            uint64_t v86 = (v77 + 1) - 1;
            do
            {
              double v87 = *v84++;
              double v88 = v83 * v87;
              uint64_t v89 = *v85++;
              *(double *)(v89 + 8 * v82) = v88;
              --v86;
            }
            while (v86);
          }
          ++v82;
        }
        while (v82 != v80);
      }
      BlueFin::BigMatrix::mult((uint64_t)&v267, (const BlueFin::BigMatrix *)&v224, (const BlueFin::BigMatrix *)&v254);
    }
    else
    {
      BlueFin::BigMatrix::mult((uint64_t)&v267, 1, (const BlueFin::BigMatrix *)&v256, (const BlueFin::BigMatrix *)&v254);
    }
    if (v214[0] >= 1)
    {
      uint64_t v90 = v268 + 1;
      uint64_t v91 = v272;
      uint64_t v92 = *(void *)v214;
      do
      {
        uint64_t v93 = *v90++;
        *v91++ = *(double *)(v93 + 8);
        --v92;
      }
      while (v92);
    }
    if (v40) {
      BlueFin::BigMatrix::mult_sym((uint64_t)&v267, (const BlueFin::BigMatrix *)&v224, (const BlueFin::BigMatrix *)&v256);
    }
    else {
      BlueFin::BigMatrix::mult_sym((uint64_t)&v267, 1, (const BlueFin::BigMatrix *)&v256, (const BlueFin::BigMatrix *)&v256);
    }
    BOOL v94 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v267, v272, (double *)&v274, 0, v266);
    if ((v94 & v213) == 1)
    {
      long long v263 = xmmword_263BBC400;
      uint64_t v95 = (char *)&v263 + 8;
      double v261 = &v264;
      uint64_t v262 = &v265;
      uint64_t v96 = 1;
      uint64_t v265 = 0;
      do
      {
        v262[v96] = (uint64_t)v95;
        v95 += 64;
        ++v96;
      }
      while (v96 != 9);
      if (BlueFin::BigMatrix::inv((BlueFin::BigMatrix *)&v267, (BlueFin::BigMatrix *)&v261, v266))
      {
        long long v216 = xmmword_263BBC3F0;
        uint64_t v97 = (char *)&v216 + 8;
        *(void *)&long long v215 = &v217;
        *((void *)&v215 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &v223;
        uint64_t v98 = 8;
        uint64_t v223 = 0;
        do
        {
          *(void *)(*((void *)&v215 + 1) + v98) = v97;
          v97 += 64;
          v98 += 8;
        }
        while (v98 != 136);
        BlueFin::BigMatrix::mult((uint64_t)&v215, (const BlueFin::BigMatrix *)&v256, (const BlueFin::BigMatrix *)&v261);
        if ((char)*v18 < 1)
        {
LABEL_122:
          int v213 = 1;
        }
        else
        {
          uint64_t v99 = *v18;
          uint64_t v100 = *((void *)&v215 + 1);
          uint64_t v101 = v257;
          uint64_t v102 = *((void *)&v224 + 1) + 8;
          uint64_t v103 = 1;
          do
          {
            v273[v103 - 1] = 0;
            if (v214[0] >= 1)
            {
              double v104 = 0.0;
              long long v105 = (uint64_t *)v102;
              for (uint64_t k = 1; k != v49; ++k)
              {
                if (v40) {
                  long long v107 = v105;
                }
                else {
                  long long v107 = &v101[v103];
                }
                if (v40) {
                  uint64_t v108 = v103;
                }
                else {
                  uint64_t v108 = k;
                }
                double v104 = v104 + *(double *)(*(void *)(v100 + 8 * v103) + 8 * k) * *(double *)(*v107 + 8 * v108);
                ++v105;
              }
              *(double *)&v273[v103 - 1] = v104;
            }
            BOOL v31 = v103++ == v99;
          }
          while (!v31);
          long long v109 = (double *)v273;
          while (1)
          {
            double v110 = *v109;
            int v213 = 0;
            BOOL v111 = *v109 >= -1.79769313e308;
            if (*v109 > 1.79769313e308) {
              BOOL v111 = 0;
            }
            if (v110 <= 0.0) {
              BOOL v111 = 1;
            }
            if (v110 >= 1.0 || !v111) {
              break;
            }
            ++v109;
            if (!--v99) {
              goto LABEL_122;
            }
          }
        }
      }
      else
      {
        int v213 = 0;
      }
    }
    if (!v94) {
      return 0;
    }
    double v112 = *((double *)&v275 + 1);
    double v113 = *(double *)&v274 * *(double *)&v274
         + *((double *)&v274 + 1) * *((double *)&v274 + 1)
         + *(double *)&v275 * *(double *)&v275
         + v112 * v112;
    BOOL v114 = v113 < 1.0;
    if (*(void *)(v20 + 16)) {
      char v115 = 0;
    }
    else {
      char v115 = v32;
    }
    if (v115)
    {
      long long v215 = v274;
      *(void *)&long long v216 = v275;
      BlueFin::ned2lla((double *)v212, (double *)&v215, (double *)&v224);
      *(_OWORD *)uint64_t v212 = v224;
      *(void *)(v212 + 16) = v225;
      uint64_t v116 = *a9;
      *(double *)(*a9 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v112 + *(double *)(*a9 + 40);
      if (v22 == 512 || (*(_DWORD *)(v20 + 48) & 0x1400000) == 0x400000) {
        *(double *)(v116 + 64) = *(double *)&v276 + *(double *)(v116 + 64);
      }
    }
    else
    {
      double v34 = *((double *)&v274 + 1) + v34;
      double v250 = *(double *)&v274 + v205;
      double v251 = v34;
      double v205 = *(double *)&v274 + v205;
      double v206 = *(double *)&v275 + v206;
      double v252 = v206;
      BlueFin::ecef2lla(&v250, v212);
      *(double *)(*a9 + 32) = *((double *)&v275 + 1) + *(double *)(*a9 + 32);
    }
    if (*(void *)(v20 + 16)) {
      int v117 = 0;
    }
    else {
      int v117 = v32;
    }
    unsigned int v118 = v210;
    if (v117 == 1)
    {
      if (v113 < 1.0 || v210 - 1 <= v48)
      {
        *(void *)(v203 + 248) = 0;
        if ((*(unsigned char *)(v20 + 49) & 8) != 0)
        {
          BlueFin::BigMatrixDim<20,1>::BigMatrixDim((BlueFin::BigMatrix *)&v215, (char)*v18);
          uint64_t v120 = 0;
          long long v225 = xmmword_263BBC420;
          *(void *)&long long v224 = v226;
          *((void *)&v224 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &v227;
          uint64_t v227 = 0;
          do
          {
            *(void *)(*((void *)&v224 + 1) + v120 + 8) = &v226[v120 - 8];
            v120 += 8;
          }
          while (v120 != 64);
          BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v224, v214[0], 1);
          if (v214[0] >= 1)
          {
            uint64_t v121 = (uint64_t *)(*((void *)&v224 + 1) + 8);
            uint64_t v122 = (uint64_t *)&v274;
            uint64_t v123 = *(void *)v214;
            do
            {
              uint64_t v124 = *v122++;
              uint64_t v125 = v124;
              uint64_t v126 = *v121++;
              *(void *)(v126 + 8) = v125;
              --v123;
            }
            while (v123);
          }
          BlueFin::BigMatrix::mult((uint64_t)&v215, (const BlueFin::BigMatrix *)&v256, (const BlueFin::BigMatrix *)&v224);
          int v127 = (char)*v18;
          if (v127 < 1)
          {
            char v129 = 0;
            double v133 = 0.0;
          }
          else
          {
            uint64_t v128 = 0;
            char v129 = 0;
            float v130 = *(float *)(v203 + 248);
            uint64_t v131 = *((void *)&v215 + 1) + 8;
            uint64_t v132 = v255 + 8;
            double v133 = 0.0;
            uint64_t v134 = (int *)(v211 + 44);
            do
            {
              int v135 = *v134;
              v134 += 14;
              BOOL v136 = v135 == 3;
              float v137 = *(double *)(*(void *)(v132 + 8 * v128) + 8) - *(double *)(*(void *)(v131 + 8 * v128) + 8);
              if (v137 < 0.0) {
                float v137 = -v137;
              }
              if (v130 < v137)
              {
                *(float *)(v203 + 248) = v137;
                LOBYTE(v127) = *v18;
                float v130 = v137;
              }
              v129 |= v136;
              float v138 = v137 * v137;
              *((float *)v266 + v128) = v138;
              double v133 = v133 + v138;
              ++v128;
            }
            while (v128 < (char)v127);
          }
          float v139 = sqrt(v133);
          *(float *)(v203 + 252) = v139;
          if (v113 < 1.0)
          {
            double v50 = 0.25;
            if ((v213 & 1) == 0)
            {
              int v213 = 0;
              BOOL v114 = 1;
              goto LABEL_215;
            }
            int v140 = (char)*v18;
            int v141 = v140 - v214[0];
            int v142 = v140 - v214[0] - 1;
            double v143 = 1.78;
            if (v142 <= 0x10)
            {
              LOWORD(v143) = word_263BBC4B0[v141 - 2];
              double v143 = (double)*(unint64_t *)&v143 * 0.01;
            }
            uint64_t v144 = *v18;
            if ((char)v140 < 1)
            {
              double v146 = 0.0;
            }
            else
            {
              uint64_t v145 = (double *)(v253[0] + 8);
              double v146 = 0.0;
              double v147 = (float *)v266;
              do
              {
                float v148 = *v147++;
                double v149 = v148;
                double v150 = *v145++;
                double v51 = v51 + v150 * v149;
                double v146 = v146 + v149;
                --v144;
              }
              while (v144);
            }
            int v151 = (char)(v140 - (v129 & 1));
            double v152 = (double)v141;
            double v153 = (double)v141 + -1.0;
            double v51 = v51 / v153;
            if (v151 < 1)
            {
LABEL_193:
              int v173 = 0;
              goto LABEL_205;
            }
            unsigned int v154 = (double *)(v253[0] + 8);
            double v155 = (double *)&v267;
            unsigned int v156 = (double *)v273;
            double v157 = (float *)v266;
            uint64_t v158 = v151;
            double v159 = v146 / v152;
            do
            {
              float v160 = *v157++;
              double v161 = v160;
              double v162 = *v154++;
              double v163 = v162 * v161;
              double v164 = *v156++;
              *v155++ = v163 / (v51 * (1.0 - v164));
              --v158;
            }
            while (v158);
            char v165 = 0;
            int v166 = 0;
LABEL_177:
            uint64_t v167 = v158;
            while (1)
            {
              double v168 = *(double *)&(&v267)[v167];
              double v169 = v152 - v168;
              double v170 = -(v152 - v168);
              if (v152 - v168 >= 0.0) {
                double v170 = v152 - v168;
              }
              if (v170 <= 0.001)
              {
                double v171 = 99.0;
              }
              else
              {
                if (v153 * v169 <= 0.0)
                {
                  int v173 = 0;
                  char v165 = 1;
                  uint64_t v174 = 1 << v167;
                  if (v143 >= 99.0) {
                    LODWORD(v174) = 0;
                  }
                  v166 |= v174;
                  uint64_t v158 = v167 + 1;
                  if (v151 - 1 != v167) {
                    goto LABEL_177;
                  }
LABEL_205:
                  int v201 = v16;
                  LODWORD(v268) = v173;
                  LODWORD(v267) = 1;
                  HIDWORD(v267) = v173;
                  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v267);
                  if (BYTE1(v267) == v267)
                  {
                    int v192 = 0;
                  }
                  else
                  {
                    int v192 = 0;
                    uint64_t v193 = *(void *)(v203 + 264);
                    do
                    {
                      unint64_t v194 = *(unsigned __int8 *)(v211 + 56 * SWORD1(v267) + 32);
                      if ((v194 - 1) > 0xBB) {
                        v192 |= 1 << SBYTE2(v267);
                      }
                      else {
                        *(_DWORD *)(v193 + ((v194 >> 3) & 0x1C)) |= 1 << v194;
                      }
                      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v267);
                    }
                    while (BYTE1(v267) != v267);
                  }
                  if (v192 != v173)
                  {
                    unsigned int v204 = v192 ^ v173;
                    BOOL v114 = 0;
                    int v213 = 0;
                    LOBYTE(v21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v210 + v48;
                    unsigned int v118 = v210;
                    int v40 = 2;
                    int v16 = v201;
                    goto LABEL_158;
                  }
                  unsigned int v204 = 0;
                  int v213 = 1;
                  BOOL v114 = 1;
                  int v16 = v201;
LABEL_215:
                  unsigned int v118 = v210;
                  goto LABEL_158;
                }
                double v171 = v168 * (v153 / v169);
              }
              uint64_t v172 = 1 << v167;
              if (v171 <= v143) {
                LODWORD(v172) = 0;
              }
              v166 |= v172;
              if (v151 == ++v167)
              {
                if (v165) {
                  goto LABEL_193;
                }
                double v175 = 0.0;
                int v176 = (double *)&v261;
                uint64_t v177 = (double *)v273;
                int v178 = (float *)v266;
                uint64_t v179 = v151;
                do
                {
                  float v180 = *v178++;
                  double v181 = v180;
                  double v182 = *v177++;
                  double v183 = v182 * v181 / (v159 * (double)v214[0] * ((1.0 - v182) * (1.0 - v182)));
                  *v176++ = v183;
                  double v175 = v175 + v183;
                  --v179;
                }
                while (v179);
                uint64_t v184 = 0;
                int v185 = 0;
                double v186 = v175 / (double)v151;
                double v187 = (double)v142;
                double v188 = v186 * 3.0;
                do
                {
                  double v189 = *(double *)&(&v261)[v184];
                  BOOL v190 = v189 <= v188 && v189 * v187 <= 4.0;
                  uint64_t v191 = 1 << v184;
                  if (v190) {
                    LODWORD(v19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
                  }
                  v185 |= v191;
                  ++v184;
                }
                while (v151 != v184);
                int v173 = v185 & v166;
                goto LABEL_205;
              }
            }
          }
          BOOL v114 = 0;
          double v50 = 0.25;
          goto LABEL_215;
        }
      }
      else
      {
        BOOL v114 = 0;
      }
    }
    double v50 = 0.25;
LABEL_158:
    if (++v48 >= v118 || v114) {
      goto LABEL_218;
    }
  }
}

uint64_t BlueFin::GlPeDops::GetDops(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  double v4 = v3;
  int v6 = v5;
  uint64_t v93 = v7;
  double v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = (uint64_t)v12;
  int v15 = v14;
  uint64_t v16 = v2;
  uint64_t v18 = v17;
  uint64_t v142 = *MEMORY[0x263EF8340];
  int v19 = (char)BlueFin::GlSetBase::Cnt(v12);
  if (v19 >= 12) {
    char v20 = 12;
  }
  else {
    char v20 = v19;
  }
  unint64_t v21 = *v6;
  uint64_t v22 = (v21 >> 3) & 1;
  float v23 = 2000.0;
  if ((v21 & 0x10) != 0) {
    float v23 = 10.0;
  }
  float v24 = v4;
  float v25 = fmaxf(v24, 10.0);
  if (v19 > 11)
  {
    float v25 = 2000.0;
    LOBYTE(v22) = 0;
  }
  if ((v21 & 2) == 0)
  {
    float v25 = 2000.0;
    LOBYTE(v22) = 0;
  }
  if ((v21 & 8) != 0)
  {
    unsigned __int8 v26 = v22;
  }
  else
  {
    float v25 = v23;
    unsigned __int8 v26 = (v21 & 0x10) >> 4;
  }
  if ((v21 & 0x10) != 0) {
    float v27 = v23;
  }
  else {
    float v27 = v25;
  }
  if ((v21 & 0x10) != 0) {
    unsigned __int8 v28 = (v21 & 0x10) >> 4;
  }
  else {
    unsigned __int8 v28 = v26;
  }
  BlueFin::GlSetBase::operator=(v16 + 8, v13);
  long long v29 = *(_OWORD *)(v13 + 12);
  *(_OWORD *)(v16 + 36) = *(_OWORD *)(v13 + 28);
  int32x4_t v30 = vdupq_n_s32(0x42C60000u);
  *(_OWORD *)(v16 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v29;
  *(int32x4_t *)(v16 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v30;
  *(void *)(v16 + 76) = v30.i64[0];
  *(float *)(v16 + 56) = v27;
  if (v20 > 2)
  {
    *(void *)uint64_t v97 = 0;
    uint64_t v95 = 0;
    uint64_t v32 = -4;
    uint64_t v33 = 1776;
    do
    {
      *(void *)&v94[v33] = &v94[v32];
      v32 += 84;
      v33 += 8;
    }
    while (v32 != 1760);
    int v91 = v20;
    uint64_t v92 = v18;
    double v34 = (char *)&v124 + 8;
    long long v124 = xmmword_263BBBC90;
    uint64_t v122 = &v125;
    uint64_t v123 = &v126;
    uint64_t v126 = 0;
    for (uint64_t i = 1; i != 13; ++i)
    {
      v123[i] = (uint64_t)v34;
      v34 += 64;
    }
    BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v122, 12, 8);
    int v36 = *v6;
    LOBYTE(v129[0]) = *(unsigned char *)(v13 + 8);
    memcpy(&v130, *(const void **)v13, 4 * LOBYTE(v129[0]));
    HIWORD(v129[0]) = 0;
    BYTE1(v129[0]) = 0;
    LODWORD(v129[1]) = v130;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v129);
    if (BYTE1(v129[0]) != LOBYTE(v129[0]))
    {
      unsigned int v50 = 0;
      while (1)
      {
        uint64_t v51 = *(void *)(v16 + 88);
        LOBYTE(v139[0]) = BYTE2(v129[0]);
        if (!(*(unsigned int (**)(uint64_t, void *, void, uint64_t **))(*(void *)v51 + 128))(v51, v139, (v50 + 1), &v122))break; {
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v129);
        }
        if (BYTE1(v129[0]) == LOBYTE(v129[0]) || v50++ >= 0xB) {
          goto LABEL_53;
        }
      }
      if (v50) {
        goto LABEL_53;
      }
    }
    v139[0] = v140;
    v139[1] = 0xC00000000;
    memset(v140, 0, sizeof(v140));
    uint64_t v141 = 0;
    *(void *)&long long v136 = v137;
    *((void *)&v136 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xC00000000;
    memset(v137, 0, sizeof(v137));
    uint64_t v138 = 0;
    v119[0] = v120;
    v119[1] = 0x800000000;
    memset(v120, 0, sizeof(v120));
    uint64_t v121 = 0;
    uint64_t v37 = *v9;
    int v38 = *v93;
    v110[0] = v119;
    v110[1] = v11;
    void v110[2] = v37;
    int v111 = v38;
    int v112 = 5;
    int v113 = v36 & 0x20 | 0x81;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    uint64_t v118 = 0x4008000000000000;
    v106[0] = v139;
    v106[1] = &v136;
    v106[2] = &v122;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    uint64_t v103 = v105;
    char v104 = 4;
    v105[1] = 0;
    v105[0] = 0;
    unsigned int v39 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v13);
    if (v39 >= 0xC) {
      unsigned __int16 v40 = 12;
    }
    else {
      unsigned __int16 v40 = v39;
    }
    BlueFin::GlSetBase::SetAllLower(&v103, v40);
    for (uint64_t j = 0; j != 168; j += 14)
    {
      uint64_t v42 = &v129[j];
      *((unsigned char *)v42 + 32) = 0;
      v42[9] = NAN;
      *((_WORD *)v42 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 575;
    }
    unsigned __int8 v98 = *(unsigned char *)(v13 + 8);
    memcpy(v102, *(const void **)v13, 4 * v98);
    __int16 v100 = 0;
    unsigned __int8 v99 = 0;
    int v101 = v102[0];
    BlueFin::GlSetIterator::operator++(&v98);
    if (v99 != v98)
    {
      unint64_t v43 = 0;
      uint64_t v44 = (char *)&v133[3] + 2;
      do
      {
        char v45 = v100;
        uint64_t v46 = v100;
        *(void *)(v44 - 42) = 0;
        *(void *)(v44 - 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *(void *)(v44 - 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v44 - 22) = -1;
        *(_WORD *)(v44 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        *(_DWORD *)(v44 - 6) = 0;
        *(_DWORD *)(v44 - 34) = v15;
        if ((v45 + 67) >= 0x44u)
        {
          uint64_t v49 = BlueFin::GlSvId::s_aucSvId2gnss[v46];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v49] == 255)
          {
            __int16 v48 = 575;
            int v47 = -1;
          }
          else
          {
            int v47 = 0;
            __int16 v48 = BlueFin::GlSignalId::s_ausGnss2signalId[v49]
                + v46
                - BlueFin::GlSvId::s_aucGnss2minSvId[v49];
          }
        }
        else
        {
          int v47 = 0;
          __int16 v48 = 575;
        }
        *(v44 - 18) = v46;
        *(_DWORD *)(v44 - 14) = v47;
        *((_WORD *)v44 - 5) = v48;
        *(v44 - 2) = 1;
        BlueFin::GlSetIterator::operator++(&v98);
        if (v43 > 0xA) {
          break;
        }
        ++v43;
        v44 += 56;
      }
      while (v99 != v98);
    }
    if ((*(unsigned int (**)(void, void *, void *, float *, void **))(**(void **)(v16 + 88) + 16))(*(void *)(v16 + 88), v110, v106, v129, &v103))
    {
      v129[0] = 0.0;
      float v130 = &v132;
      char v131 = 8;
      long long v132 = 0u;
      *(_OWORD *)double v133 = 0u;
      *(_OWORD *)&v133[5] = xmmword_263BBA380;
      int32x2_t v134 = vdup_n_s32(0x42C60000u);
      int v135 = 1120272384;
      BlueFin::stDops::operator=(v16, (uint64_t)v129);
    }
    else
    {
LABEL_53:
      uint64_t v53 = 0;
      uint64_t v54 = v123 + 1;
      do
      {
        unsigned int v55 = (double *)v54[v53];
        float v56 = v55[1];
        int v57 = (float *)v96[v53];
        v57[1] = v56;
        float v58 = v55[3];
        v57[2] = v58;
        float v59 = v55[7];
        v57[3] = v59;
        float v60 = v55[5];
        v57[4] = v60;
        float v61 = v55[8];
        v57[5] = v61;
        ++v53;
      }
      while ((v91 + 1) - 1 != v53);
      BlueFin::BigMatrix_F::ReShape((uint64_t)v94, v91, 5);
      if ((v28 & (v19 < 12)) == 1)
      {
        BlueFin::BigMatrix_F::AddRow((BlueFin::BigMatrix_F *)v94);
        *(float *)(*(void *)&v94[8 * v97[0] + 1768] + 12) = 10.0 / v27;
      }
      int v62 = *v6;
      if (*v6)
      {
        unsigned int v63 = 5;
      }
      else
      {
        unsigned int v63 = 4;
        BlueFin::BigMatrix_F::ReShape((uint64_t)v94, v97[0], 4);
      }
      *(void *)uint64_t v128 = 0;
      v127[0] = 0;
      uint64_t v64 = -4;
      uint64_t v65 = 222;
      do
      {
        (&v122)[v65] = (uint64_t *)((char *)&v122 + v64);
        v64 += 84;
        ++v65;
      }
      while (v64 != 1760);
      BlueFin::BigMatrix_F::mult_sym((const BlueFin::BigMatrix_F *)&v122, 1, (const BlueFin::BigMatrix_F *)v94, (const BlueFin::BigMatrix_F *)v94);
      unint64_t v66 = v128[1];
      if (v128[1] != v63)
      {
        DeviceFaultNotify("glpe_dops.cpp", 104, "Solve", (char)"otHtH.GetColSize() == cNumStates");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_dops.cpp", 104, "otHtH.GetColSize() == cNumStates");
      }
      if (BlueFin::BigMatrix_F::choldci((BlueFin::BigMatrix_F *)&v122, v128[1], v129))
      {
        uint64_t v67 = 0;
        unint64_t v68 = v63;
        double v69 = &v127[v63 + 1];
        double v70 = (char *)v139 + 4 * v63;
        do
        {
          bzero(v139, 4 * v66);
          uint64_t v71 = v67;
          do
          {
            if (v71 == v67) {
              float v72 = 1.0;
            }
            else {
              float v72 = 0.0;
            }
            if (v71)
            {
              uint64_t v73 = v71 + 1;
              uint64_t v74 = v71;
              do
              {
                float v75 = *(float *)(v127[v71 + 1] + 4 * v74);
                BOOL v76 = v74-- <= 1;
                float v72 = v72 - (float)(v75 * *((float *)v139 + v74));
              }
              while (!v76);
            }
            else
            {
              uint64_t v73 = 1;
            }
            *((float *)v139 + v7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v72 * v129[v71];
            uint64_t v71 = v73;
          }
          while (v73 != v66);
          int v77 = v69;
          uint64_t v78 = v70;
          unint64_t v79 = v68;
          do
          {
            uint64_t v80 = v79 - 1;
            float v81 = *((float *)v139 + v79 - 1);
            uint64_t v82 = v77;
            unint64_t v83 = v66;
            char v84 = v78;
            if (v79 < v66)
            {
              do
              {
                uint64_t v85 = *v82++;
                float v86 = *(float *)(v85 + 4 * v79);
                LODWORD(v85) = *v84++;
                float v81 = v81 - (float)(v86 * *(float *)&v85);
                --v83;
              }
              while (v79 != v83);
            }
            *((float *)v139 + v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v81 * v129[v80];
            --v78;
            --v77;
            --v79;
          }
          while (v80 > v67);
          v137[v67 - 4] = *((float *)v139 + v67);
          ++v67;
        }
        while (v67 != v66);
        v89.f32[0] = *(float *)&v136 + *((float *)&v136 + 1);
        float v87 = sqrtf(*((float *)&v136 + 3));
        float v88 = sqrtf(v137[0]);
        v89.i32[1] = v136;
        float32x4_t v90 = (float32x4_t)vdupq_n_s32(0x42C60000u);
        if ((v62 & 1) == 0) {
          float v88 = 99.0;
        }
        v89.i64[1] = *(void *)((char *)&v136 + 4);
        *(float32x4_t *)(v16 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vminnmq_f32(vsqrtq_f32(v89), v90);
        *(float *)(v16 + 76) = fminf(v87, 99.0);
        *(float *)(v16 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = fminf(v88, 99.0);
      }
    }
    return BlueFin::stDops::stDops(v92, v16);
  }
  else
  {
    return BlueFin::stDops::stDops(v18, v16);
  }
}

void BlueFin::BigMatrix::Clone(BlueFin::BigMatrix *this, int a2, int a3)
{
  *((_DWORD *)this + 4) = a2;
  *((_DWORD *)this + 5) = a3;
  if (*((_DWORD *)this + 6) < a2 || (int v3 = *((_DWORD *)this + 7), v3 < a3))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 883, "Clone", (char)"m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 883, "m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
  }
  double v4 = (void *)(*(void *)(*((void *)this + 1) + 8) + 8);
  size_t v5 = 8 * v3 * a2;

  bzero(v4, v5);
}

uint64_t BlueFin::stDops::stDops(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)(a1 + 8), (unsigned int *)(a1 + 20), 8u, (const void **)(a2 + 8));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a2 + 80);
  return a1;
}

void *BlueFin::GlSetBase::SetAllLower(void *this, unsigned __int16 a2)
{
  char v2 = a2;
  unsigned int v3 = (a2 >> 5);
  if (v3 > *((unsigned __int8 *)this + 8))
  {
    DeviceFaultNotify("glutl_set.cpp", 165, "SetAllLower", (char)"ucNumFullLongs <= m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 165, "ucNumFullLongs <= m_ucUlongSize");
  }
  double v4 = this;
  if ((a2 >> 5)) {
    this = memset((void *)*this, 255, 4 * (a2 >> 5));
  }
  *(_DWORD *)(*v4 + 4 * v3) |= ~(-1 << v2);
  return this;
}

uint64_t BlueFin::BigMatrix_F::ReShape(uint64_t this, int a2, int a3)
{
  if ((a2 - 1) > 0x14 || (a3 - 1) >= 0x15)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 1779, "ReShape", (char)"bCond");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 1779, "bCond");
  }
  *(_DWORD *)(this + 1944) = a2;
  *(_DWORD *)(this + 1948) = a3;
  return this;
}

const BlueFin::BigMatrix_F *BlueFin::BigMatrix_F::mult_sym(const BlueFin::BigMatrix_F *this, BOOL a2, const BlueFin::BigMatrix_F *a3, const BlueFin::BigMatrix_F *a4)
{
  if (this == a3)
  {
    uint64_t v16 = "this != &mLeft";
    DeviceFaultNotify("glpe_matrix.cpp", 1695, "mult_sym", (char)"this != &mLeft");
    int v17 = 1695;
    goto LABEL_18;
  }
  if (this == a4)
  {
    uint64_t v16 = "this != &mRight";
    DeviceFaultNotify("glpe_matrix.cpp", 1696, "mult_sym", (char)"this != &mRight");
    int v17 = 1696;
    goto LABEL_18;
  }
  uint64_t v4 = *((unsigned int *)a3 + 486);
  if (v4 != *((_DWORD *)a4 + 486))
  {
    uint64_t v16 = "mLeft.m_NbRows == mRight.m_NbRows";
    DeviceFaultNotify("glpe_matrix.cpp", 1699, "mult_sym", (char)"mLeft.m_NbRows == mRight.m_NbRows");
    int v17 = 1699;
    goto LABEL_18;
  }
  unint64_t v5 = *((unsigned int *)a3 + 487);
  if (v5 != *((_DWORD *)a4 + 487))
  {
    uint64_t v16 = "mLeft.m_NbCols == mRight.m_NbCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1701, "mult_sym", (char)"mLeft.m_NbCols == mRight.m_NbCols");
    int v17 = 1701;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v17, v16);
  }
  if ((int)v5 >= 1)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      uint64_t v7 = a4;
      unint64_t v8 = i;
      if (i < v5)
      {
        do
        {
          float v9 = 0.0;
          if ((int)v4 >= 1)
          {
            uint64_t v10 = a3;
            uint64_t v11 = (float *)v7;
            uint64_t v12 = v4;
            do
            {
              float v13 = *(float *)v10;
              uint64_t v10 = (const BlueFin::BigMatrix_F *)((char *)v10 + 84);
              float v14 = v13;
              float v15 = *v11;
              v11 += 21;
              float v9 = v9 + (float)(v14 * v15);
              --v12;
            }
            while (v12);
          }
          *((float *)this + 21 * i + v8) = v9;
          *((float *)this + 21 * v8++ + i) = v9;
          uint64_t v7 = (const BlueFin::BigMatrix_F *)((char *)v7 + 4);
        }
        while (v8 != v5);
      }
      a4 = (const BlueFin::BigMatrix_F *)((char *)a4 + 4);
      a3 = (const BlueFin::BigMatrix_F *)((char *)a3 + 4);
    }
  }
  *((_DWORD *)this + 486) = v5;
  *((_DWORD *)this + 487) = v5;
  return this;
}

BOOL BlueFin::GlPeComputeZRH::GetHFromCache(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  return BlueFin::GlPeSatPosCache::GetHFromCache(a1 + 24, a2, a3, a4);
}

BOOL BlueFin::BigMatrix_F::choldci(BlueFin::BigMatrix_F *this, int a2, float *a3)
{
  if (a2 < 1)
  {
    return 1;
  }
  else
  {
    unint64_t v5 = a2;
    bzero(a3, 4 * a2);
    unint64_t v6 = 0;
    BOOL v7 = 0;
    int v8 = -2;
    float v9 = this;
    do
    {
      uint64_t v10 = v9;
      unint64_t v11 = v6;
      do
      {
        float v12 = *((float *)this + 21 * v6 + v11);
        unsigned int v13 = v6 - 1;
        unsigned int v14 = v8;
        if (v6 >= 2)
        {
          do
          {
            float v12 = (float)(v12 - (float)(*((float *)this + 21 * v6 + v14 + 1) * *((float *)this + 21 * v11 + v14 + 1)))
                - (float)(*((float *)this + 21 * v6 + v14) * *((float *)this + 21 * v11 + v14));
            unsigned int v15 = v14 - 2;
            int v16 = v14 + 2;
            v14 -= 2;
          }
          while (v16 > 3);
          unsigned int v13 = v15 + 1;
        }
        if ((v13 & 0x80000000) == 0)
        {
          uint64_t v17 = 4 * v13;
          do
          {
            float v12 = v12 - (float)(*(float *)((char *)v9 + v17) * *(float *)((char *)v10 + v17));
            v17 -= 4;
          }
          while (v17 != -4);
        }
        if (v6 == v11)
        {
          if (v12 <= 0.0) {
            return v7;
          }
          a3[v6] = 1.0 / sqrtf(v12);
        }
        else
        {
          *((float *)this + 21 * v11 + v6) = v12 * a3[v6];
        }
        ++v11;
        uint64_t v10 = (BlueFin::BigMatrix_F *)((char *)v10 + 84);
      }
      while (v11 < v5);
      ++v6;
      ++v8;
      float v9 = (BlueFin::BigMatrix_F *)((char *)v9 + 84);
      BOOL v7 = v6 >= v5;
    }
    while (v6 != v5);
    return 1;
  }
}

BlueFin::BigMatrix *BlueFin::BigMatrixDim<20,1>::BigMatrixDim(BlueFin::BigMatrix *this, int a2)
{
  uint64_t v3 = 0;
  *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = xmmword_263BBC4A0;
  *((void *)this + 24) = 0;
  *(void *)this = (char *)this + 32;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 192;
  do
  {
    *(void *)(*((void *)this + 1) + v3 + 8) = (char *)this + v3 + 24;
    v3 += 8;
  }
  while (v3 != 160);
  BlueFin::BigMatrix::Clone(this, a2, 1);
  return this;
}

uint64_t BlueFin::BigMatrix::mult(uint64_t this, const BlueFin::BigMatrix *a2, const BlueFin::BigMatrix *a3)
{
  if ((const BlueFin::BigMatrix *)this == a2)
  {
    uint64_t v18 = "this != &mLeft";
    DeviceFaultNotify("glpe_matrix.cpp", 990, "mult", (char)"this != &mLeft");
    int v19 = 990;
    goto LABEL_22;
  }
  if ((const BlueFin::BigMatrix *)this == a3)
  {
    uint64_t v18 = "this != &mRight";
    DeviceFaultNotify("glpe_matrix.cpp", 991, "mult", (char)"this != &mRight");
    int v19 = 991;
    goto LABEL_22;
  }
  int v3 = *((_DWORD *)a2 + 5);
  if (v3 != *((_DWORD *)a3 + 4))
  {
    uint64_t v18 = "mLeft.m_NbCols == mRight.m_NbRows";
    DeviceFaultNotify("glpe_matrix.cpp", 994, "mult", (char)"mLeft.m_NbCols == mRight.m_NbRows");
    int v19 = 994;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v19, v18);
  }
  uint64_t v4 = *((unsigned int *)a2 + 4);
  if ((int)v4 > *(_DWORD *)(this + 24) || (int v5 = *((_DWORD *)a3 + 5), v5 > *(_DWORD *)(this + 28)))
  {
    uint64_t v18 = "mLeft.m_NbRows <= m_NbMaxRows && mRight.m_NbCols <= m_NbMaxCols";
    DeviceFaultNotify("glpe_matrix.cpp", 996, "mult", (char)"mLeft.m_NbRows <= m_NbMaxRows && mRight.m_NbCols <= m_NbMaxCols");
    int v19 = 996;
    goto LABEL_22;
  }
  if ((int)v4 >= 1)
  {
    uint64_t v6 = 1;
    do
    {
      if (v5 >= 1)
      {
        uint64_t v7 = *((void *)a2 + 1);
        uint64_t v8 = *(void *)(*(void *)(this + 8) + 8 * v6);
        uint64_t v9 = *((void *)a3 + 1) + 8;
        uint64_t v10 = 1;
        do
        {
          if (v3 < 1)
          {
            double v12 = 0.0;
          }
          else
          {
            unint64_t v11 = (double *)(*(void *)(v7 + 8 * v6) + 8);
            double v12 = 0.0;
            unsigned int v13 = (uint64_t *)v9;
            uint64_t v14 = (v3 + 1) - 1;
            do
            {
              double v15 = *v11++;
              double v16 = v15;
              uint64_t v17 = *v13++;
              double v12 = v12 + v16 * *(double *)(v17 + 8 * v10);
              --v14;
            }
            while (v14);
          }
          *(double *)(v8 + 8 * v10++) = v12;
        }
        while (v10 != v5 + 1);
      }
      ++v6;
    }
    while (v6 != v4 + 1);
  }
  *(_DWORD *)(this + 16) = v4;
  *(_DWORD *)(this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v5;
  return this;
}

BOOL BlueFin::BigMatrix::cholsl(BlueFin::BigMatrix *this, double *a2, double *a3, double *a4, double *a5)
{
  v36[21] = *(double *)MEMORY[0x263EF8340];
  uint64_t v5 = *((unsigned int *)this + 4);
  if (v5 != *((_DWORD *)this + 5))
  {
    double v34 = "m_NbRows == m_NbCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1227, "cholsl", (char)"m_NbRows == m_NbCols");
    int v35 = 1227;
    goto LABEL_32;
  }
  if ((int)v5 >= 22)
  {
    double v34 = "m_NbCols <= BIG_MATR_MAX_COL_DIM";
    DeviceFaultNotify("glpe_matrix.cpp", 1228, "cholsl", (char)"m_NbCols <= BIG_MATR_MAX_COL_DIM");
    int v35 = 1228;
LABEL_32:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v35, v34);
  }
  if ((int)v5 >= 1) {
    bzero(a3, 8 * v5);
  }
  BOOL v11 = BlueFin::BigMatrix::choldci(this, v5, v36);
  if (v11)
  {
    if (a4)
    {
      double v12 = 1.0;
      if ((int)v5 >= 1)
      {
        unsigned int v13 = v36;
        uint64_t v14 = v5;
        do
        {
          double v15 = *v13++;
          double v12 = v12 * (v15 * v15);
          --v14;
        }
        while (v14);
      }
      *a4 = 1.0 / v12;
    }
    if (a5 && (int)v5 >= 1)
    {
      memcpy(a5, v36, 8 * v5);
    }
    else if ((int)v5 < 1)
    {
      return v11;
    }
    uint64_t v16 = 0;
    do
    {
      double v17 = a2[v16];
      if (v16)
      {
        uint64_t v18 = v16 + 1;
        uint64_t v19 = v16;
        do
        {
          double v20 = *(double *)(*(void *)(*((void *)this + 1) + 8 * (v16 + 1)) + 8 * v19);
          BOOL v21 = v19-- <= 1;
          double v17 = v17 - v20 * a3[v19];
        }
        while (!v21);
      }
      else
      {
        uint64_t v18 = 1;
      }
      a3[v16] = v17 * v36[v16];
      uint64_t v16 = v18;
    }
    while (v18 != v5);
    uint64_t v22 = &a3[v5];
    int v23 = 0;
    uint64_t v24 = 8 * v5 + 8;
    uint64_t v25 = v5;
    do
    {
      double v26 = a3[v25 - 1];
      if (v25 < v5)
      {
        float v27 = (uint64_t *)(*((void *)this + 1) + v24);
        int v28 = v23;
        long long v29 = v22;
        do
        {
          uint64_t v30 = *v27++;
          double v31 = *(double *)(v30 + 8 * v25);
          double v32 = *v29++;
          double v26 = v26 - v31 * v32;
          --v28;
        }
        while (v28);
      }
      a3[v25 - 1] = v26 * v36[v25 - 1];
      --v22;
      ++v23;
      v24 -= 8;
      BOOL v21 = v25-- <= 1;
    }
    while (!v21);
  }
  return v11;
}

BOOL BlueFin::BigMatrix::choldci(BlueFin::BigMatrix *this, int a2, double *a3)
{
  if (a2 >= 1)
  {
    unint64_t v5 = a2;
    bzero(a3, 8 * a2);
    unint64_t v6 = 0;
    BOOL v7 = 0;
    uint64_t v8 = *((void *)this + 1);
    int v9 = -1;
    while (1)
    {
      unint64_t v10 = v6 + 1;
      uint64_t v11 = *(void *)(v8 + 8 * (v6 + 1));
      unint64_t v12 = v6;
      do
      {
        unint64_t v13 = v12 + 1;
        double v14 = *(double *)(v11 + 8 * (v12 + 1));
        if (v6 < 2)
        {
          unsigned int v15 = v6 - 1;
          if (v6 - 1 < 0) {
            goto LABEL_12;
          }
LABEL_10:
          uint64_t v17 = 8 * v15 + 8;
          do
          {
            double v14 = v14 - *(double *)(v11 + v17) * *(double *)(*(void *)(v8 + 8 * v13) + v17);
            v17 -= 8;
          }
          while (v17);
          goto LABEL_12;
        }
        unsigned int v15 = v9;
        do
        {
          int v16 = v15 + 1;
          double v14 = v14
              - *(double *)(v11 + 8 * v16)
              * *(double *)(*(void *)(v8 + 8 * v13) + 8 * v16)
              - *(double *)(v11 + 8 * v15) * *(double *)(*(void *)(v8 + 8 * v13) + 8 * v15);
          v15 -= 2;
        }
        while (v16 > 3);
        if ((v15 & 0x80000000) == 0) {
          goto LABEL_10;
        }
LABEL_12:
        if (v6 == v12)
        {
          if (v14 <= 0.0) {
            return v7;
          }
          a3[v6] = 1.0 / sqrt(v14);
        }
        else
        {
          *(double *)(*(void *)(v8 + 8 * v13) + 8 * v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v14 * a3[v6];
        }
        ++v12;
      }
      while (v13 < v5);
      ++v9;
      ++v6;
      BOOL v7 = v10 >= v5;
      if (v10 == v5) {
        return 1;
      }
    }
  }
  return 1;
}

BOOL BlueFin::GlPeLsqSubsets::RunLsqSubset(uint64_t *a1, uint64_t a2, char a3, int a4, uint64_t a5, int a6)
{
  memset(v62, 0, 42);
  unsigned int v63 = &v65;
  char v64 = 19;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  memset(v68, 0, sizeof(v68));
  double v69 = v71;
  char v70 = 8;
  memset(v71, 0, 32);
  long long v72 = xmmword_263BBA380;
  int32x2_t v73 = vdup_n_s32(0x42C60000u);
  float v74 = 99.0;
  int v75 = 0;
  double v76 = 0.0;
  uint64_t v77 = 0;
  int v79 = 0;
  uint64_t v78 = 0;
  long long v82 = 0u;
  uint64_t v80 = &v82;
  char v81 = 8;
  long long v83 = 0u;
  unsigned int v10 = *((_DWORD *)a1 + 12);
  if ((v10 & 0x80) != 0) {
    int v11 = 2049;
  }
  else {
    int v11 = 2048;
  }
  if (a6) {
    int v12 = 0x2000000;
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = a1[11];
  int v14 = *((_DWORD *)a1 + 24);
  uint64_t v15 = (uint64_t)(a1 + 13);
  v55[0] = a2;
  v55[1] = 0;
  v55[2] = 0;
  v55[3] = a1 + 8;
  unsigned __int8 v55[4] = v13;
  int v56 = v14;
  char v57 = a3;
  unsigned int v58 = v12 & 0xFFEAC9FF | ((v10 & 3) << 9) & 0xCFFF | (((v10 >> 2) & 3) << 12) & 0xFFEAFFFF | (((v10 >> 4) & 1) << 16) & 0xFFEBFFFF | (((v10 >> 5) & 1) << 18) & 0xFFEFFFFF | (((v10 >> 6) & 1) << 20) | (v10 >> 4) & 0x30 | v11;
  uint64_t v59 = 0;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v60, v61, 8u, (const void **)a1 + 13);
  uint64_t v59 = a1[7];
  int v16 = BlueFin::GlPeLsq::LsPos((uint64_t)(a1 + 1), (uint64_t)v55, (uint64_t)v62);
  float v17 = *((float *)&v72 + 1);
  if (a5 && v16 && *((float *)&v72 + 1) < 50.0)
  {
    *(unsigned char *)(a5 + 137) = 1;
    *(unsigned char *)(a5 + 136) = HIBYTE(v75);
    double v18 = *(float *)&v78;
    long long v19 = v62[1];
    *(_OWORD *)(a5 + 88) = v62[0];
    *(_OWORD *)(a5 + 104) = v19;
    *(void *)(a5 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)&v62[2];
    *(double *)(a5 + 128) = v18;
    BlueFin::GlSetBase::operator=(a5, (uint64_t)&v63);
    long long v20 = v65;
    *(_OWORD *)(a5 + 28) = v66;
    long long v21 = v68[0];
    *(_OWORD *)(a5 + 44) = v67;
    *(_OWORD *)(a5 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v21;
    *(_OWORD *)(a5 + 72) = *(_OWORD *)((char *)v68 + 12);
    *(_OWORD *)(a5 + 12) = v20;
    float v17 = *((float *)&v72 + 1);
  }
  BOOL v22 = 0;
  int v23 = BYTE1(v75);
  if (a4 && v17 >= 15.0) {
    BOOL v22 = (*((unsigned char *)a1 + 49) & 4) == 0;
  }
  if (BYTE1(v75) && !v22)
  {
    unsigned int v39 = &v41;
    char v40 = 19;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    memset(v44, 0, sizeof(v44));
    long long v37 = v62[0];
    uint64_t v38 = *(void *)&v62[1];
    BlueFin::GlSetBase::operator=((uint64_t)&v39, (uint64_t)&v63);
    long long v42 = v66;
    long long v43 = v67;
    *(_OWORD *)uint64_t v44 = v68[0];
    *(_OWORD *)&v44[12] = *(_OWORD *)((char *)v68 + 12);
    long long v41 = v65;
    float v45 = *((float *)&v72 + 1);
    __int32 v46 = v73.i32[0];
    int32x2_t v47 = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)((char *)&v62[1] + 8)));
    double RngUncMetric = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)v62);
    *(float *)&double RngUncMetric = RngUncMetric * *((float *)&v72 + 1);
    float v48 = *(float *)&RngUncMetric;
    double v25 = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)v62);
    *(float *)&double v25 = v25 * *(float *)v73.i32;
    int v49 = LODWORD(v25);
    double v26 = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)v62);
    *(float *)&double v26 = v26 * *((float *)&v72 + 2);
    int v50 = LODWORD(v26);
    double v27 = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)v62);
    *(float *)&double v27 = v27 * *((float *)&v72 + 3);
    int v51 = LODWORD(v27);
    double v28 = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)v62);
    *(float *)&double v28 = v28 * *(float *)&v73.i32[1];
    int v52 = LODWORD(v28);
    double v29 = BlueFin::stLsPosState::GetRngUncMetric((BlueFin::stLsPosState *)v62);
    *(float *)&double v29 = v29 * v74;
    int v53 = LODWORD(v29);
    float v30 = *((float *)&v78 + 1);
    uint64_t v54 = v78;
    if (*((unsigned char *)a1 + 49))
    {
      float v31 = v76 * v45;
      float v48 = v31;
    }
    if (v59 && *(unsigned char *)(v59 + 72) == 1)
    {
      float v32 = v76;
      if (*((float *)&v78 + 1) > v32) {
        float v30 = v76;
      }
      float v48 = v45 * v30;
    }
    if (a6)
    {
      BlueFin::GlSetBase::operator=(v15, (uint64_t)&v80);
      long long v33 = v83;
      *(_OWORD *)((char *)a1 + 116) = v82;
      *(_OWORD *)((char *)a1 + 132) = v33;
    }
    uint64_t v34 = *a1;
    unint64_t v35 = *(void *)(v34 + 8);
    if (v35 >= *(void *)(v34 + 16))
    {
      DeviceFaultNotify("glpe_navutil.cpp", 204, "Submit", (char)"m_potWritePtr < m_potBufEnd");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", 204, "m_potWritePtr < m_potBufEnd");
    }
    BlueFin::stSubset::operator=(v35, (uint64_t)&v37);
    *(void *)(v34 + 8) += 160;
  }
  return v23 != 0;
}

double BlueFin::stLsPosState::GetRngUncMetric(BlueFin::stLsPosState *this)
{
  unsigned int v2 = BlueFin::GlSetBase::Cnt((BlueFin::stLsPosState *)((char *)this + 48));
  if (v2 <= (*((unsigned __int8 *)this + 40) | 4u)) {
    return *((double *)this + 30);
  }
  if (v2 < 0xA) {
    return *((double *)this + 29);
  }
  return *((float *)this + 62);
}

BOOL BlueFin::GlPeStartupMgr::checkAsstAndRtoEph(BlueFin::GlPeStartupMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  BlueFin::GlGnssSet::operator|(*(void *)this + 120224, *(void *)this + 120608, (uint64_t)&v27);
  uint64_t v24 = 0;
  int v25 = 0;
  do
  {
    v25 += BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a24 + v24));
    v24 += 24;
  }
  while (v24 != 168);
  return v25 > 3u;
}

uint64_t BlueFin::GlSetBase::Cnt(BlueFin::GlSetBase *this)
{
  unsigned int v1 = 0;
  unsigned int v2 = (_DWORD *)(*(void *)this + 4 * *((unsigned __int8 *)this + 8) - 4);
  do
  {
    if (*v2)
    {
      unsigned int v3 = *v2 - (((*v2 >> 2) & 0x9249249) + ((*v2 >> 1) & 0x5B6DB6DB));
      unsigned int v1 = ((v3 + (v3 >> 3)) & 0xC71C71C7) + v1 - 63 * (((v3 + (v3 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v2;
  }
  while ((unint64_t)v2 >= *(void *)this);
  return (unsigned __int16)v1;
}

uint64_t BlueFin::stSubset::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  BlueFin::GlSetBase::operator=(a1 + 24, a2 + 24);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
  long long v4 = *(_OWORD *)(a2 + 52);
  long long v5 = *(_OWORD *)(a2 + 68);
  long long v6 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 84) = v6;
  *(_OWORD *)(a1 + 68) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  return a1;
}

uint64_t BlueFin::GlPeLsq::LsPos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 16))
  {
    DeviceFaultNotify("glpe_lsq.cpp", 1311, "LsPos", (char)"m_potAlMeas != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", 1311, "m_potAlMeas != nullptr");
  }
  uint64_t v6 = 0;
  long long v19 = v21;
  char v20 = 19;
  memset(v21, 0, sizeof(v21));
  do
  {
    BOOL v7 = &v22[v6];
    v7[32] = 0;
    *((_DWORD *)v7 + 9) = -1;
    *((_WORD *)v7 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 575;
    v6 += 56;
  }
  while (v6 != 896);
  __int16 v18 = 0;
  v15[1] = 0xC00000008;
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  v15[0] = (uint64_t)v16;
  uint64_t v8 = *(long long **)(a2 + 24);
  long long v13 = *v8;
  v9.n128_u64[1] = *((void *)&v13 + 1);
  unint64_t v14 = *((void *)v8 + 2);
  v9.n128_u64[0] = v14;
  BOOL v10 = BlueFin::GlPeLsq::LsPosInit((BlueFin::GlPeMsmtMgr **)a1, a2, (BlueFin::GlSignalIdSet *)&v19, (unsigned char *)&v18 + 1, (uint64_t)v22, v9);
  uint64_t result = 0;
  if (v10)
  {
    uint64_t result = BlueFin::GlPeLsq::LsPosCalc(a1, a2, (uint64_t)&v19, (uint64_t)&v18 + 1, (uint64_t)v22, 16, a3, (uint64_t)&v13, v15, &v18);
    if (result)
    {
      BlueFin::GlPeLsq::LsPosFinish((unsigned int **)a1, a2, (uint64_t)&v19, (char *)&v18 + 1, (uint64_t)v22, v12, a3, (uint64_t)&v13, v15, &v18);
      return 1;
    }
  }
  return result;
}

BOOL BlueFin::GlPeLsq::LsPosInit(BlueFin::GlPeMsmtMgr **a1, uint64_t a2, BlueFin::GlSignalIdSet *a3, unsigned char *a4, uint64_t a5, __n128 a6)
{
  uint64_t v6 = a5;
  BOOL v7 = a1;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v8 = *(BlueFin::GlPeMsmtMgr **)(a2 + 16);
  if (v9) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    if (v8)
    {
      if (v9)
      {
        if (a1[2])
        {
          uint64_t v11 = *(void *)(a2 + 24);
          uint64_t v112 = *(void *)(v9 + 8808);
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v132, v134, 0x13u, *(const void ***)a2);
          unsigned __int8 v120 = v133;
          memcpy(v124, v132, 4 * v133);
          unsigned __int16 v122 = 0;
          unsigned __int8 v121 = 0;
          int v123 = v124[0];
          BlueFin::GlSetIterator::operator++(&v120);
          if (v121 == v120)
          {
            LOBYTE(v12) = 0;
LABEL_10:
            long long v13 = a1[2];
            if (v13)
            {
              *((unsigned char *)v13 + 48) = 1;
              *((void *)v13 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x4049000000000000;
              *((_DWORD *)v13 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 3;
              unint64_t v14 = (int *)((char *)v13 + 44);
              *((_DWORD *)v13 + 7) = -1;
              *(void *)long long v13 = *(void *)(v11 + 16);
              int v15 = *(_DWORD *)v8;
              long long v16 = *((_OWORD *)v13 + 1);
              *(_OWORD *)uint64_t v6 = *(_OWORD *)v13;
              *(_OWORD *)(v6 + 16) = v16;
              if (v13 != (BlueFin::GlPeMsmtMgr *)v6)
              {
                *(unsigned char *)(v6 + 32) = *((unsigned char *)v13 + 32);
                *(_DWORD *)(v6 + 36) = *((_DWORD *)v13 + 9);
                *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)v13 + 20);
              }
              int v17 = *v14;
              *(_DWORD *)(v6 + 47) = *(int *)((char *)v14 + 3);
              *(_DWORD *)(v6 + 44) = v17;
              *(_DWORD *)(v6 + 16) = v15;
              LOBYTE(v12) = v12 + 1;
            }
          }
          else
          {
            uint64_t v110 = v11;
            int v12 = 0;
            double v41 = 0.0;
            do
            {
              unint64_t v42 = v122;
              if (v122 > 0x23EuLL) {
                goto LABEL_165;
              }
              int v43 = v12;
              uint64_t v44 = *(unsigned __int8 **)(v9 + 8808);
              int v45 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v122);
              uint64_t v46 = 91;
              while (*v44 != v45)
              {
                v44 += 96;
                if (!--v46) {
                  goto LABEL_60;
                }
              }
              BlueFin::GlSatAid::operator=(v112, (uint64_t)v44);
LABEL_60:
              int v47 = vcvtmd_s64_f64(*(double *)(v112 + 32) * -1000.0);
              int v48 = *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v42 + 1);
              v117[0] = v45;
              int v118 = v48;
              __int16 v119 = v42;
              MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v8, (const BlueFin::GlSignalId *)v117, 0, 0);
              LODWORD(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)v8;
              double v51 = (double)v50 + *((double *)MeMeas + 7) * -1000.0;
              double v52 = v51 - floor(v51) + (double)v47;
              double v53 = v52 + *(double *)(v112 + 32) * 1000.0;
              if ((_BYTE)v43)
              {
                if (vabdd_f64(v53, v41) > 0.5)
                {
                  if (v53 <= v41) {
                    double v54 = 1.0;
                  }
                  else {
                    double v54 = -1.0;
                  }
                  double v52 = v52 + v54;
                }
              }
              else
              {
                double v41 = v52 + *(double *)(v112 + 32) * 1000.0;
              }
              *(void *)(v6 + 8) = 0;
              *(_DWORD *)(v6 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
              *(_WORD *)(v6 + 49) = 0;
              *(long double *)uint64_t v6 = fmod(v52, 1.0) * 299792.458;
              *(double *)(v6 + 8) = *((float *)MeMeas + 22) * 299792458.0;
              *(_DWORD *)(v6 + 44) = 0;
              *(_DWORD *)(v6 + 16) = *(_DWORD *)v8;
              double v55 = fmod(v52, 4294967300.0);
              if (v52 <= 4294967300.0) {
                double v55 = v52;
              }
              if (v55 < -4294967300.0) {
                double v55 = -fmod(-v55, 4294967300.0);
              }
              if (v55 < 0.0) {
                unsigned int v56 = --v55;
              }
              else {
                unsigned int v56 = v55;
              }
              *(_DWORD *)(v6 + 24) = v56;
              *(_DWORD *)(v6 + 28) = -1;
              *(unsigned char *)(v6 + 48) = 1;
              *(unsigned char *)(v6 + 32) = v45;
              *(_DWORD *)(v6 + 36) = v48;
              *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v42;
              *(_DWORD *)(*(void *)a3 + ((v42 >> 3) & 0x1FFC)) |= 1 << v42;
              if (v43 >= 0xBu)
              {
                LOBYTE(v12) = 12;
                goto LABEL_153;
              }
              int v12 = v43 + 1;
              v6 += 56;
              BlueFin::GlSetIterator::operator++(&v120);
            }
            while (v121 != v120);
            uint64_t v11 = v110;
            if (v43 <= 2u) {
              goto LABEL_10;
            }
          }
          goto LABEL_153;
        }
        long long v106 = "m_potAlMeas != nullptr";
        DeviceFaultNotify("glpe_lsq.cpp", 431, "getGeoFenceMeasForLsPos", (char)"m_potAlMeas != nullptr");
        long long v107 = "glpe_lsq.cpp";
        int v108 = 431;
      }
      else
      {
        long long v106 = "pAcqAsst";
        DeviceFaultNotify("glpe_lsq.cpp", 554, "LsPosInit", (char)"pAcqAsst");
        long long v107 = "glpe_lsq.cpp";
        int v108 = 554;
      }
LABEL_166:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v107, v108, v106);
    }
    float v30 = *(const void ***)a2;
    uint64_t v31 = *(void *)(a2 + 56);
    if (v31 && *(unsigned char *)v31 && *(int *)(v31 + 64) >= 2)
    {
      double v32 = *(double *)(v31 + 8);
      double v33 = *(double *)(v31 + 16);
      uint64_t v34 = (unsigned char *)(a5 + 50);
      uint64_t v35 = *(void *)(v31 + 32);
      char v36 = 1;
      do
      {
        *(void *)(v34 - 42) = 0;
        *(void *)(v34 - 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xFFFFFFFF00000000;
        *(_DWORD *)(v34 - 22) = -1;
        *uint64_t v34 = 0;
        *(v34 - 18) = 0;
        *(_DWORD *)(v34 - 14) = -1;
        *((_WORD *)v34 - 5) = 575;
        int v37 = v36 & 1;
        if (v36) {
          int v38 = 8;
        }
        else {
          int v38 = 9;
        }
        *(_DWORD *)(v34 - 6) = v38;
        if (v37) {
          double v39 = v32;
        }
        else {
          double v39 = v33;
        }
        *(double *)(v34 - 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v39;
        *(_DWORD *)(v34 - 34) = *(_DWORD *)*a1;
        *(void *)(v34 - 42) = v35;
        *((_WORD *)v34 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        v34 += 56;
        char v36 = 0;
      }
      while (v37);
      uint64_t v6 = a5 + 112;
      *(unsigned char *)(v31 + 72) = 1;
      BOOL v109 = ((*(unsigned char *)(a2 + 49) & 0x10) == 0
           || (char v40 = a1[2], *((unsigned char *)v40 + 48)) && *((double *)v40 + 1) > *(double *)(v31 + 56))
          && *(double *)(v31 + 24) > -999.0
          && *(double *)(v31 + 56) > 0.0;
      LOBYTE(v12) = 2;
    }
    else
    {
      BOOL v109 = 0;
      LOBYTE(v12) = 0;
    }
    uint64_t v113 = v31;
    LODWORD(v132) = *((unsigned __int8 *)v30 + 8);
    memcpy(&v133, *v30, 4 * v132);
    HIDWORD(v132) = v133;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v132);
    if (BYTE1(v132) != v132)
    {
      while (1)
      {
        unint64_t v57 = WORD1(v132);
        if (WORD1(v132) >= 0x23FuLL) {
          break;
        }
        unsigned int v58 = *v7;
        uint64_t v59 = 1 << (BYTE2(v132) & 0x1F);
        if ((v59 & *(_DWORD *)(*((void *)*v7 + 1) + 4 * ((unint64_t)WORD1(v132) >> 5))) != 0)
        {
          uint64_t v60 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v132);
          int v61 = (char)v60[1];
          unsigned __int8 v62 = *v60;
          unsigned __int8 v120 = *v60;
          int v123 = v61;
          LOWORD(v124[0]) = WORD1(v132);
          uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(v58, (const BlueFin::GlSignalId *)&v120, 0);
          int v64 = *(_DWORD *)(a2 + 48);
          if ((v64 & 0x400000) != 0
            && ((unsigned int v65 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(PeMeas + 256)
                                                                              - *(int *)(PeMeas + 256)
                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(PeMeas + 252)]],
                 BOOL v66 = v65 > 8,
                 int v67 = (1 << v65) & 0x134,
                 !v66)
              ? (BOOL v68 = v67 == 0)
              : (BOOL v68 = 1),
                v68)
            || (v64 & 0x800000) != 0
            && ((int v69 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(PeMeas + 256)
                                                                              - *(int *)(PeMeas + 256)
                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(PeMeas + 252)]],
                 v69 != 11)
              ? (BOOL v70 = v69 == 0)
              : (BOOL v70 = 1),
                !v70))
          {
            BOOL v7 = a1;
          }
          else
          {
            unsigned __int8 v120 = v62;
            int v123 = v61;
            LOWORD(v124[0]) = v57;
            BOOL v7 = a1;
            if ((v59 & *(_DWORD *)(*((void *)*a1 + 1) + 4 * (v57 >> 5))) != 0)
            {
              uint64_t v71 = BlueFin::GlPeMsmtMgr::GetPeMeas(*a1, (const BlueFin::GlSignalId *)&v120, 0);
              *(void *)uint64_t v6 = 0;
              *(void *)(v6 + 8) = 0;
              *(void *)(v6 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xFFFFFFFF00000000;
              *(_DWORD *)(v6 + 28) = -1;
              *(_WORD *)(v6 + 48) = 0;
              *(unsigned char *)(v6 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
              *(unsigned char *)(v6 + 32) = 0;
              *(_DWORD *)(v6 + 36) = -1;
              *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 575;
              *(_DWORD *)(v6 + 44) = 0;
              long long v72 = *a1;
              *(_DWORD *)(v6 + 16) = *(_DWORD *)*a1;
              int v73 = v120;
              if ((unsigned __int8 *)(v6 + 32) != &v120)
              {
                *(unsigned char *)(v6 + 32) = v120;
                *(_DWORD *)(v6 + 36) = v123;
                *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v124[0];
              }
              if ((v73 - 33) > 0x12)
              {
                *(void *)uint64_t v6 = *(void *)(v71 + 32);
                double v74 = *(double *)(v71 + 40);
              }
              else
              {
                *(double *)uint64_t v6 = *(double *)v71 * 299792.458;
                double v74 = *((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(v72, (const BlueFin::GlSignalId *)&v120, 0, 0) + 22)
                    * 299792458.0;
              }
              *(double *)(v6 + 8) = v74;
              *(unsigned char *)(v6 + 48) = 1;
              uint64_t v75 = *(void *)(v71 + 64);
              *(void *)(v6 + 24) = v75;
              if v75 != -1 || (*(unsigned char *)(a2 + 50))
              {
                if (WORD1(v132) >= 0x23Fu) {
                  break;
                }
                *(_DWORD *)(*(void *)a3 + (((unint64_t)WORD1(v132) >> 3) & 0x1FFC)) |= 1 << SBYTE2(v132);
                int v12 = (char)(v12 + 1);
                v6 += 56;
                if (v12 > 15) {
                  goto LABEL_105;
                }
              }
            }
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v132);
        if (BYTE1(v132) == v132) {
          goto LABEL_105;
        }
      }
LABEL_165:
      long long v106 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      long long v107 = "glsignalid.h";
      int v108 = 577;
      goto LABEL_166;
    }
LABEL_105:
    int v76 = *(_DWORD *)(a2 + 48);
    if ((v76 & 0x2000) != 0)
    {
      if ((v76 & 0x200) != 0) {
        int v78 = 4;
      }
      else {
        int v78 = 3;
      }
      uint64_t v77 = v113;
      if (v78 < (char)v12) {
        goto LABEL_121;
      }
    }
    else
    {
      uint64_t v77 = v113;
      if ((v76 & 0x100) != 0 || (char)v12 < 3 || (char)v12 > 15) {
        goto LABEL_121;
      }
    }
    if ((v76 & 0x1400) == 0x1000)
    {
      int v79 = v7[2];
      if (!v79)
      {
        long long v106 = "m_potAlMeas != nullptr";
        DeviceFaultNotify("glpe_lsq.cpp", 190, "PackSkfMeas_AL", (char)"m_potAlMeas != nullptr");
        long long v107 = "glpe_lsq.cpp";
        int v108 = 190;
        goto LABEL_166;
      }
      if (*((unsigned char *)v79 + 48) && *((double *)v79 + 1) < 100.0)
      {
        int v80 = *(_DWORD *)*v7;
        long long v81 = *((_OWORD *)v79 + 1);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v79;
        *(_OWORD *)(v6 + 16) = v81;
        if (v79 != (BlueFin::GlPeMsmtMgr *)v6)
        {
          *(unsigned char *)(v6 + 32) = *((unsigned char *)v79 + 32);
          *(_DWORD *)(v6 + 36) = *((_DWORD *)v79 + 9);
          *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)v79 + 20);
        }
        int v82 = *((_DWORD *)v79 + 11);
        *(_DWORD *)(v6 + 47) = *(_DWORD *)((char *)v79 + 47);
        *(_DWORD *)(v6 + 44) = v82;
        *(_DWORD *)(v6 + 16) = v80;
        v6 += 56;
        LOBYTE(v12) = v12 + 1;
      }
    }
LABEL_121:
    if (v77)
    {
      if (*(unsigned char *)v77 && (char)v12 <= 14 && *(int *)(v77 + 64) <= 1)
      {
        double v83 = *(double *)(v77 + 8);
        double v84 = *(double *)(v77 + 16);
        uint64_t v85 = (unsigned char *)(v6 + 50);
        uint64_t v86 = *(void *)(v77 + 32);
        char v87 = 1;
        do
        {
          *(void *)(v85 - 42) = 0;
          *(void *)(v85 - 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xFFFFFFFF00000000;
          *(_DWORD *)(v85 - 22) = -1;
          *uint64_t v85 = 0;
          *(v85 - 18) = 0;
          *(_DWORD *)(v85 - 14) = -1;
          *((_WORD *)v85 - 5) = 575;
          int v88 = v87 & 1;
          if (v87) {
            int v89 = 8;
          }
          else {
            int v89 = 9;
          }
          *(_DWORD *)(v85 - 6) = v89;
          if (v88) {
            double v90 = v83;
          }
          else {
            double v90 = v84;
          }
          *(double *)(v85 - 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v90;
          *(_DWORD *)(v85 - 34) = *(_DWORD *)*a1;
          *(void *)(v85 - 42) = v86;
          *((_WORD *)v85 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
          v85 += 56;
          char v87 = 0;
        }
        while (v88);
        LOBYTE(v12) = v12 + 2;
        *(unsigned char *)(v77 + 72) = 1;
        if ((*(unsigned char *)(a2 + 49) & 0x10) != 0
          && ((int v91 = a1[2], !*((unsigned char *)v91 + 48)) || *((double *)v91 + 1) <= *(double *)(v77 + 56))
          || *(double *)(v77 + 24) <= -999.0)
        {
          char v92 = 0;
LABEL_152:
          *(unsigned char *)(v77 + 73) = v92;
          goto LABEL_153;
        }
        v6 += 112;
        BOOL v109 = *(double *)(v77 + 56) > 0.0;
      }
      char v92 = 0;
      if (!v109 || (char)v12 >= 15) {
        goto LABEL_152;
      }
    }
    else
    {
      BOOL v93 = v109;
      if ((char)v12 >= 15) {
        BOOL v93 = 0;
      }
      if (!v93) {
        goto LABEL_153;
      }
    }
    BOOL v94 = a1[2];
    *((unsigned char *)v94 + 48) = 1;
    double v95 = *(double *)(v77 + 56);
    *((double *)v94 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v95;
    *((_DWORD *)v94 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 3;
    uint64_t v96 = (int *)((char *)v94 + 44);
    *((_DWORD *)v94 + 7) = -1;
    *(void *)BOOL v94 = *(void *)(v77 + 24);
    if (v95 >= 100.0) {
      goto LABEL_153;
    }
    int v97 = *(_DWORD *)*a1;
    long long v98 = *((_OWORD *)v94 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v94;
    *(_OWORD *)(v6 + 16) = v98;
    if (v94 != (BlueFin::GlPeMsmtMgr *)v6)
    {
      *(unsigned char *)(v6 + 32) = *((unsigned char *)v94 + 32);
      *(_DWORD *)(v6 + 36) = *((_DWORD *)v94 + 9);
      *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)v94 + 20);
    }
    int v99 = *v96;
    *(_DWORD *)(v6 + 47) = *(int *)((char *)v96 + 3);
    *(_DWORD *)(v6 + 44) = v99;
    *(_DWORD *)(v6 + 16) = v97;
    LOBYTE(v12) = v12 + 1;
    char v92 = 1;
    goto LABEL_152;
  }
  if (!a1[3])
  {
    long long v106 = "m_pGpsEphMgr != nullptr";
    DeviceFaultNotify("glpe_lsq.cpp", 376, "getAsstMeasForLsPos", (char)"m_pGpsEphMgr != nullptr");
    long long v107 = "glpe_lsq.cpp";
    int v108 = 376;
    goto LABEL_166;
  }
  uint64_t v18 = 0;
  LOBYTE(v12) = 0;
  int v19 = *(_DWORD *)(a2 + 48);
  for (uint64_t i = 91; i; --i)
  {
    uint64_t v21 = *(void *)(v9 + 8808);
    if (*(unsigned __int8 *)(v21 + v18) - 1 > 0xBB) {
      break;
    }
    if ((v19 & 0x4000) != 0) {
      goto LABEL_21;
    }
    BOOL v22 = a1[3];
    LOBYTE(v132) = *(unsigned char *)(v21 + v18);
    unsigned int v23 = *(_DWORD *)(v9 + 36);
    a6.n128_f64[0] = (double)(int)v23;
    if (v23 <= 0xFF9222FE) {
      a6.n128_f64[0] = (double)v23;
    }
    if (!(*(unsigned int (**)(BlueFin::GlPeMsmtMgr *, const void **, uint64_t, __n128))(*(void *)v22 + 64))(v22, &v132, 1, a6))
    {
LABEL_21:
      double v24 = *(double *)(v21 + v18 + 32) * -1000.0;
      *(void *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *(_WORD *)(v6 + 49) = 0;
      *(unsigned char *)(v6 + 32) = 0;
      *(long double *)uint64_t v6 = fmod(v24, 1.0) * 299792.458;
      *(double *)(v6 + 8) = *(float *)(v21 + v18 + 40) * 299792458.0;
      *(_DWORD *)(v6 + 44) = 0;
      *(_DWORD *)(v6 + 16) = *(_DWORD *)(v9 + 36);
      a6.n128_f64[0] = fmod(v24, 4294967300.0);
      if (v24 <= 4294967300.0) {
        a6.n128_f64[0] = v24;
      }
      if (a6.n128_f64[0] < -4294967300.0) {
        a6.n128_f64[0] = -fmod(-a6.n128_f64[0], 4294967300.0);
      }
      if (a6.n128_f64[0] < 0.0) {
        unsigned int v25 = --a6.n128_f64[0];
      }
      else {
        unsigned int v25 = a6.n128_f64[0];
      }
      *(_DWORD *)(v6 + 24) = v25;
      *(_DWORD *)(v6 + 28) = 0;
      *(unsigned char *)(v6 + 48) = 1;
      uint64_t v26 = *(unsigned __int8 *)(v21 + v18);
      if ((v26 + 67) >= 0x44u)
      {
        uint64_t v29 = BlueFin::GlSvId::s_aucSvId2gnss[v26];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v29] == 255)
        {
          __int16 v28 = 575;
          int v27 = -1;
        }
        else
        {
          int v27 = 0;
          __int16 v28 = BlueFin::GlSignalId::s_ausGnss2signalId[v29]
              + v26
              - BlueFin::GlSvId::s_aucGnss2minSvId[v29];
        }
      }
      else
      {
        int v27 = 0;
        __int16 v28 = 575;
      }
      *(unsigned char *)(v6 + 32) = v26;
      *(_DWORD *)(v6 + 36) = v27;
      *(_WORD *)(v6 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v28;
      *(_DWORD *)(*(void *)a3 + 4 * (v28 >> 5)) |= 1 << v28;
      int v12 = (char)(v12 + 1);
      if (v12 > 11) {
        break;
      }
      v6 += 56;
    }
    v18 += 96;
  }
LABEL_153:
  BOOL result = 0;
  *a4 = v12;
  int v101 = *(_DWORD *)(a2 + 48);
  if ((v101 & 0x100) != 0) {
    int v102 = 3;
  }
  else {
    int v102 = 4;
  }
  if ((v101 & 0x300) == 0x200 || (v101 & 0x1400000) == 0x400000) {
    ++v102;
  }
  if ((char)v12 <= 16 && v102 <= (char)v12)
  {
    char v104 = a1[1];
    int v125 = 0;
    uint64_t v126 = v128;
    char v127 = 8;
    memset(v128, 0, 32);
    long long v129 = xmmword_263BBA380;
    int32x2_t v130 = vdup_n_s32(0x42C60000u);
    int v131 = 1120272384;
    BlueFin::stDops::stDops((uint64_t)&v132, (uint64_t)&v125);
    int v135 = v104;
    uint64_t v105 = *(unsigned int *)*a1;
    BlueFin::GlSignalIdSet::GetSvIdSet(a3, (uint64_t)v117);
    BlueFin::GlPeDops::GetDops((uint64_t)&v132, v105);
    return *(float *)&v124[13] <= 98.5;
  }
  return result;
}

double BlueFin::SKFVectorDim<16>::SKFVectorDim(uint64_t a1, int a2)
{
  unsigned int v2 = (_OWORD *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 16;
  if (a2 >= 17)
  {
    DeviceFaultNotify("glpe_matrix.h", 497, "SKFVectorDim", (char)"LEN >= len");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 497, "LEN >= len");
  }
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *unsigned int v2 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)a1 = v2;
  return result;
}

uint64_t BlueFin::BigMatrix::mult_sym(uint64_t this, BOOL a2, const BlueFin::BigMatrix *a3, const BlueFin::BigMatrix *a4)
{
  if ((const BlueFin::BigMatrix *)this == a3)
  {
    char v20 = "this != &mLeft";
    DeviceFaultNotify("glpe_matrix.cpp", 1097, "mult_sym", (char)"this != &mLeft");
    int v21 = 1097;
    goto LABEL_22;
  }
  if ((const BlueFin::BigMatrix *)this == a4)
  {
    char v20 = "this != &mRight";
    DeviceFaultNotify("glpe_matrix.cpp", 1098, "mult_sym", (char)"this != &mRight");
    int v21 = 1098;
    goto LABEL_22;
  }
  int v4 = *((_DWORD *)a3 + 4);
  if (v4 != *((_DWORD *)a4 + 4))
  {
    char v20 = "mLeft.m_NbRows == mRight.m_NbRows";
    DeviceFaultNotify("glpe_matrix.cpp", 1101, "mult_sym", (char)"mLeft.m_NbRows == mRight.m_NbRows");
    int v21 = 1101;
    goto LABEL_22;
  }
  unint64_t v5 = *((unsigned int *)a3 + 5);
  if (v5 != *((_DWORD *)a4 + 5))
  {
    char v20 = "mLeft.m_NbCols == mRight.m_NbCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1103, "mult_sym", (char)"mLeft.m_NbCols == mRight.m_NbCols");
    int v21 = 1103;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v21, v20);
  }
  if ((int)v5 > *(_DWORD *)(this + 24) || (int)v5 > *(_DWORD *)(this + 28))
  {
    char v20 = "mLeft.m_NbCols <= m_NbMaxRows && mRight.m_NbCols <= m_NbMaxCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1104, "mult_sym", (char)"mLeft.m_NbCols <= m_NbMaxRows && mRight.m_NbCols <= m_NbMaxCols");
    int v21 = 1104;
    goto LABEL_22;
  }
  if ((int)v5 >= 1)
  {
    unint64_t v6 = v5 + 1;
    unint64_t v7 = 1;
    do
    {
      if (v7 <= v5)
      {
        uint64_t v8 = *(void *)(this + 8);
        uint64_t v9 = *(void *)(v8 + 8 * v7);
        uint64_t v10 = *((void *)a4 + 1) + 8;
        uint64_t v11 = *((void *)a3 + 1) + 8;
        unint64_t v12 = v7;
        do
        {
          double v13 = 0.0;
          if (v4 >= 1)
          {
            unint64_t v14 = (uint64_t *)v11;
            int v15 = (uint64_t *)v10;
            uint64_t v16 = (v4 + 1) - 1;
            do
            {
              uint64_t v17 = *v14++;
              double v18 = *(double *)(v17 + 8 * v7);
              uint64_t v19 = *v15++;
              double v13 = v13 + v18 * *(double *)(v19 + 8 * v12);
              --v16;
            }
            while (v16);
          }
          *(double *)(v9 + 8 * v12) = v13;
          *(double *)(*(void *)(v8 + 8 * v12++) + 8 * v7) = v13;
        }
        while (v12 != v6);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  *(_DWORD *)(this + 16) = v5;
  *(_DWORD *)(this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v5;
  return this;
}

BOOL BlueFin::BigMatrix::inv(BlueFin::BigMatrix *this, BlueFin::BigMatrix *a2, const double *__src)
{
  v28[21] = *(double *)MEMORY[0x263EF8340];
  uint64_t v3 = *((unsigned int *)this + 4);
  if (v3 != *((_DWORD *)this + 5))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 1352, "inv", (char)"bCond");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 1352, "bCond");
  }
  if (__src)
  {
    if ((int)v3 > 0)
    {
      memcpy(v28, __src, 8 * v3);
      BlueFin::BigMatrix::Null(a2, v3, v3);
LABEL_7:
      uint64_t v7 = 0;
      uint64_t v8 = *((void *)a2 + 1);
      do
      {
        uint64_t v9 = 0;
        uint64_t v10 = *((void *)a2 + 1);
        uint64_t v11 = v7 + 1;
        do
        {
          if (v9 == v7) {
            double v12 = 1.0;
          }
          else {
            double v12 = 0.0;
          }
          if (v9)
          {
            uint64_t v13 = v9 + 1;
            uint64_t v14 = v9;
            do
            {
              double v12 = v12
                  - *(double *)(*(void *)(*((void *)this + 1) + 8 * (v9 + 1)) + 8 * v14)
                  * *(double *)(*(void *)(v10 + 8 * v14) + 8 * v11);
              BOOL v15 = v14-- <= 1;
            }
            while (!v15);
          }
          else
          {
            uint64_t v13 = 1;
          }
          *(double *)(*(void *)(v8 + 8 * v13) + 8 * v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12 * v28[v9];
          uint64_t v9 = v13;
        }
        while (v13 != v3);
        uint64_t v16 = 8 * v3 + 8;
        uint64_t v17 = (uint64_t *)(v8 + v16);
        int v18 = 0;
        uint64_t v19 = v3;
        do
        {
          uint64_t v20 = *(void *)(v8 + 8 * v19);
          double v21 = *(double *)(v20 + 8 * v11);
          if (v19 < v3)
          {
            BOOL v22 = (uint64_t *)(*((void *)this + 1) + v16);
            unsigned int v23 = v17;
            int v24 = v18;
            do
            {
              uint64_t v25 = *v22++;
              double v26 = *(double *)(v25 + 8 * v19);
              uint64_t v27 = *v23++;
              double v21 = v21 - v26 * *(double *)(v27 + 8 * v11);
              --v24;
            }
            while (v24);
          }
          *(double *)(v20 + 8 * v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v21 * v28[(v19 - 1)];
          ++v18;
          --v17;
          v16 -= 8;
          BOOL v15 = v19-- <= 1;
        }
        while (!v15);
        uint64_t v7 = v11;
      }
      while (v11 != v3);
      return 1;
    }
    BlueFin::BigMatrix::Null(a2, v3, v3);
  }
  else
  {
    BOOL result = BlueFin::BigMatrix::choldci(this, *((_DWORD *)this + 4), v28);
    if (!result) {
      return result;
    }
    BlueFin::BigMatrix::Null(a2, v3, v3);
    if ((int)v3 >= 1) {
      goto LABEL_7;
    }
  }
  return 1;
}

uint64_t BlueFin::GlGnssSet::operator~@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  *(void *)(a2 + 168) = a2;
  do
  {
    uint64_t v5 = *(void *)(a2 + 168) + v4;
    *(void *)(v5 + 12) = 0;
    *(void *)uint64_t v5 = v5 + 12;
    *(unsigned char *)(v5 + 8) = 2;
    v4 += 24;
  }
  while (v4 != 168);
  uint64_t v6 = 0;
  for (uint64_t i = 0; i != 7; ++i)
  {
    if (i > 6) {
      LOBYTE(v8) = 0;
    }
    else {
      uint64_t v8 = *(void *)&asc_263BA9E10[8 * i];
    }
    uint64_t v9 = (BlueFin::GlSetBase *)(*(void *)(a1 + 168) + v6);
    uint64_t ULong = BlueFin::GlSetBase::GetULong(v9, 1u);
    uint64_t v11 = (2 * ~(-1 << v8)) & ~(BlueFin::GlSetBase::GetULong(v9, 0) | (unint64_t)(ULong << 32));
    BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)v13, SBYTE4(v11), v11);
    uint64_t result = BlueFin::GlSetBase::operator=(*(void *)(a2 + 168) + v6, (uint64_t)v13);
    *(void *)(result + 12) = v14;
    v6 += 24;
  }
  return result;
}

unint64_t BlueFin::GlMeSrdSearchMgr::ProcessPending(BlueFin::GlMeSrdSearchMgr *this)
{
  unsigned int v2 = (const void **)((char *)this + 80);
  uint64_t v3 = (const void **)((char *)this + 256);
  BlueFin::GlSvIdSet::operator~((const void **)this + 32, (uint64_t)&__src);
  char v36 = v2;
  uint64_t v4 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v49, (unsigned int *)&v51, 8u, v2);
  *(void *)&v41[1] = &v43;
  LOBYTE(v42) = 8;
  long long v43 = 0u;
  long long v44 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v4, (int **)&v41[1], (int **)&__src);
  BlueFin::GlSetBase::operator=((uint64_t)&v49, (uint64_t)&v41[1]);
  long long v51 = v43;
  long long v52 = v44;
  if (*v49) {
    goto LABEL_2;
  }
  if (v50 < 2uLL) {
    goto LABEL_12;
  }
  if (v49[1])
  {
LABEL_2:
    v41[1] = *((unsigned char *)this + 136);
    memcpy(&v42, *((const void **)this + 16), 4 * v41[1]);
    *(_WORD *)&v41[3] = 0;
    v41[2] = 0;
    *(_DWORD *)&v41[5] = v42;
    while (1)
    {
      BlueFin::GlSetIterator::operator++(&v41[1]);
      if (v41[2] == v41[1]) {
        break;
      }
      unsigned int v5 = v41[3];
      BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), v41[3], &__src);
      if (((unint64_t)*(unsigned int *)((char *)v49 + (((unint64_t)__src >> 3) & 0x1C)) >> (__src & 0x1F))) {
        BlueFin::GlMeSrdSearchMgrBase::StopSat(this, v5);
      }
    }
  }
  else
  {
    uint64_t v6 = 2;
    while (v50 != v6)
    {
      if (v49[v6++])
      {
        if (v6 - 1 < (unint64_t)v50) {
          goto LABEL_2;
        }
        break;
      }
    }
  }
LABEL_12:
  uint64_t __src = &v47;
  unsigned __int8 v46 = 4;
  long long v47 = 0uLL;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)this + 160, (int **)&__src, (int **)this + 24);
  v41[1] = v46;
  memcpy(&v42, __src, 4 * v46);
  *(_WORD *)&v41[3] = 0;
  v41[2] = 0;
  *(_DWORD *)&v41[5] = v42;
  while (1)
  {
    BlueFin::GlSetIterator::operator++(&v41[1]);
    if (v41[2] == v41[1]) {
      break;
    }
    BlueFin::GlMeSrdSearchMgrBase::StopSat(this, v41[3]);
  }
  BlueFin::GlSvIdSet::operator~(v36, (uint64_t)&__src);
  uint64_t v8 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v49, (unsigned int *)&v51, 8u, v3);
  *(void *)&v41[1] = &v43;
  LOBYTE(v42) = 8;
  long long v43 = 0u;
  long long v44 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v8, (int **)&v41[1], (int **)&__src);
  unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)&v49, (uint64_t)&v41[1]);
  long long v51 = v43;
  long long v52 = v44;
  if (*v49) {
    goto LABEL_91;
  }
  if (v50 >= 2uLL)
  {
    if (v49[1]) {
      goto LABEL_91;
    }
    uint64_t v34 = 2;
    do
    {
      if (v50 == v34) {
        goto LABEL_85;
      }
    }
    while (!v49[v34++]);
    if (v34 - 1 < (unint64_t)v50)
    {
LABEL_91:
      uint64_t v10 = *((void *)this + 1);
      if (*(_WORD *)(v10 + 14))
      {
        for (unint64_t i = 0; i < *(unsigned __int16 *)(v10 + 14); ++i)
        {
          unint64_t result = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 2) + 56));
          if (!result) {
            break;
          }
          v41[0] = *(unsigned char *)(*(void *)(v10 + 16) + 8 * i);
          if (((*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this + 4) + 472))(*((void *)this + 4), v41) & 1) == 0)goto LABEL_76; {
          unint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 1016))(*((void *)this + 4));
          }
          int v12 = *((_DWORD *)this + 18);
          if (result)
          {
            unsigned int v13 = v41[0];
            if (v12 != 4) {
              goto LABEL_42;
            }
            if (v41[0] - 52 <= 0xD
              && (((unint64_t)v49[v41[0] >> 5] >> (v41[0] & 0x1F)) & 1) != 0)
            {
              int v37 = &v39;
              char v38 = 8;
              long long v39 = xmmword_263BAA87C;
              long long v40 = unk_263BAA88C;
              BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v47, 8u, v36);
              *(void *)&v41[1] = &v43;
              LOBYTE(v42) = 8;
              long long v43 = 0u;
              long long v44 = 0u;
              BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v41[1], (int **)&v37);
              unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v41[1]);
              unsigned int v14 = 0;
              long long v47 = v43;
              long long v48 = v44;
              BOOL v15 = (char *)__src + 4 * v46 - 4;
              do
              {
                if (*v15)
                {
                  unsigned int v16 = *v15 - (((*v15 >> 1) & 0x5B6DB6DB) + ((*v15 >> 2) & 0x9249249));
                  unsigned int v14 = ((v16 + (v16 >> 3)) & 0xC71C71C7) + v14 - 63 * (((v16 + (v16 >> 3)) & 0xC71C71C7) / 0x3F);
                }
                --v15;
              }
              while (v15 >= __src);
              if (v14 >= 5u) {
                unint64_t result = BlueFin::GlSetBase::Remove((uint64_t)&v49, v41[0]);
              }
              int v12 = *((_DWORD *)this + 18);
            }
            else
            {
              int v12 = 4;
            }
          }
          unsigned int v13 = v41[0];
          uint64_t v17 = v49;
          if (v12 == 4
            && v41[0] - 76 <= 0x3E
            && (((unint64_t)v49[v41[0] >> 5] >> (v41[0] & 0x1F)) & 1) != 0)
          {
            int v37 = &v39;
            char v38 = 8;
            long long v39 = xmmword_263BAA8BC;
            long long v40 = unk_263BAA8CC;
            BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v47, 8u, v36);
            *(void *)&v41[1] = &v43;
            LOBYTE(v42) = 8;
            long long v43 = 0u;
            long long v44 = 0u;
            BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v41[1], (int **)&v37);
            unint64_t result = BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v41[1]);
            unsigned int v18 = 0;
            long long v47 = v43;
            long long v48 = v44;
            uint64_t v19 = (char *)__src + 4 * v46 - 4;
            do
            {
              if (*v19)
              {
                unsigned int v20 = *v19 - (((*v19 >> 1) & 0x5B6DB6DB) + ((*v19 >> 2) & 0x9249249));
                unsigned int v18 = ((v20 + (v20 >> 3)) & 0xC71C71C7) + v18 - 63 * (((v20 + (v20 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              --v19;
            }
            while (v19 >= __src);
            if (v18 >= 3u) {
              unint64_t result = BlueFin::GlSetBase::Remove((uint64_t)&v49, v41[0]);
            }
            unsigned int v13 = v41[0];
LABEL_42:
            uint64_t v17 = v49;
          }
          uint64_t v21 = v13 >> 5;
          uint64_t v22 = 1 << (v13 & 0x1F);
          if ((v22 & v17[v21]) == 0) {
            goto LABEL_77;
          }
          int v23 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 16) + 8 * i + 4);
          if ((v23 & 0x200) != 0)
          {
            BOOL v24 = (v22 & *(_DWORD *)(*(void *)(*((void *)this + 3) + 880) + 4 * v21)) != 0;
            if ((v23 & 0x400) != 0)
            {
LABEL_46:
              BOOL v25 = (v22 & *(_DWORD *)(*(void *)(*((void *)this + 3) + 928) + 4 * v21)) != 0;
              goto LABEL_49;
            }
          }
          else
          {
            BOOL v24 = 0;
            if ((v23 & 0x400) != 0) {
              goto LABEL_46;
            }
          }
          BOOL v25 = 0;
LABEL_49:
          if ((*(unsigned int (**)(void))(**((void **)this + 4) + 1200))(*((void *)this + 4))) {
            BOOL v26 = !v25;
          }
          else {
            BOOL v26 = 1;
          }
          if (!v26)
          {
            v41[1] = 1;
            *(_DWORD *)&v41[5] = 2;
            LOWORD(v42) = 64;
            unint64_t result = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v41[1]);
            if (result == 250) {
              goto LABEL_77;
            }
          }
          int v27 = *(_DWORD *)(*(void *)(*((void *)this + 1) + 16) + 8 * i + 4);
          if ((v27 & 0x10000) != 0)
          {
            unint64_t v28 = ((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 3) + 976)
                                                     + (((unint64_t)v41[0] >> 3) & 0x1C)) >> (v41[0] & 0x1F)) & 1;
            if ((v27 & 0x1000000) != 0)
            {
LABEL_56:
              unint64_t v29 = ((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 3) + 1024)
                                                       + 4 * (v41[0] >> 5)) >> (v41[0] & 0x1F)) & 1;
              goto LABEL_59;
            }
          }
          else
          {
            LODWORD(v28) = 0;
            if ((v27 & 0x1000000) != 0) {
              goto LABEL_56;
            }
          }
          LODWORD(v29) = 0;
LABEL_59:
          unsigned int v30 = v41[0] - 76;
          if (v30 < 0x3F) {
            int v31 = v28;
          }
          else {
            int v31 = 0;
          }
          if ((v27 & 0x100000) != 0 && v31)
          {
            DeviceFaultNotify("glmesrd_search_mgr.cpp", 116, "ProcessPending", (char)"!m_rSigAid.signals[i].EnableBdsB1I()");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr.cpp", 116, "!m_rSigAid.signals[i].EnableBdsB1I()");
          }
          LOBYTE(__src) = 1;
          BYTE1(__src) = v24;
          BYTE2(__src) = v25;
          if (v30 >= 0x3F) {
            int v32 = v29;
          }
          else {
            int v32 = v28;
          }
          BYTE3(__src) = v32;
          if ((v28 | v29) != 1) {
            goto LABEL_70;
          }
          v41[1] = 1;
          *(_DWORD *)&v41[5] = 3;
          LOWORD(v42) = 96;
          unint64_t result = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v41[1]);
          if (result != 250)
          {
            int v32 = BYTE3(__src);
LABEL_70:
            if (v32)
            {
              int v33 = 3;
            }
            else if ((*(unsigned int (**)(void))(**((void **)this + 4) + 1200))(*((void *)this + 4)))
            {
              int v33 = 2;
            }
            else
            {
              int v33 = 0;
            }
            BlueFin::GlMeSrdSearchMgrBase::CreateSatAndStartSat((uint64_t)this, v41, v33, &__src);
LABEL_76:
            unint64_t result = BlueFin::GlSetBase::Remove((uint64_t)&v49, v41[0]);
          }
LABEL_77:
          uint64_t v10 = *((void *)this + 1);
        }
      }
    }
  }
LABEL_85:
  if (BlueFin::GlUtils::m_ucEnabled) {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
  }
  return result;
}

BOOL BlueFin::GlSetBase::HasAny(BlueFin::GlSetBase *this)
{
  unsigned int v1 = *(_DWORD **)this;
  if (**(_DWORD **)this) {
    return 1;
  }
  unint64_t v3 = *((unsigned __int8 *)this + 8);
  if (v3 < 2) {
    return 0;
  }
  if (v1[1]) {
    return 1;
  }
  uint64_t v4 = 2;
  do
  {
    unint64_t v5 = v4;
    if (v3 == v4) {
      break;
    }
  }
  while (!v1[v4++]);
  return v5 < v3;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsConstellationSupported(uint64_t a1, unsigned char *a2)
{
  unsigned int v2 = *a2;
  if (v2 < 0xBD) {
    int v3 = 6;
  }
  else {
    int v3 = 7;
  }
  if (v2 >= 0xAF) {
    int v4 = v3;
  }
  else {
    int v4 = 5;
  }
  if (v2 >= 0x8B) {
    int v5 = v4;
  }
  else {
    int v5 = 4;
  }
  if (v2 >= 0x4C) {
    int v6 = v5;
  }
  else {
    int v6 = 3;
  }
  if (v2 >= 0x42) {
    int v7 = v6;
  }
  else {
    int v7 = 2;
  }
  if (v2 >= 0x34) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 1;
  }
  if (v2 < 0x21) {
    unsigned int v8 = 0;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 7;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 464))(a1, v9);
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsLowGainAntenna(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1612);
}

BOOL BlueFin::GlMeSrdAsicConfig::IsL5PrecedenceSet(BlueFin::GlMeSrdAsicConfig *this)
{
  int v2 = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 184))(this) & 0xF000FFFF;
  return (v2 == 805306389 || v2 == 805306387) && *((unsigned char *)this + 2198) != 0;
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::CreateSatAndStartSat(uint64_t a1, unsigned __int8 *a2, int a3, unsigned char *a4)
{
  int v7 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  uint64_t v48 = 0;
  LOBYTE(v46) = *a4;
  for (uint64_t i = 1; i != 4; ++i)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 352))(*(void *)(a1 + 32))) {
      char v10 = a4[i];
    }
    else {
      char v10 = 0;
    }
    v47[i - 4] = v10;
  }
  v9.i32[0] = v46;
  unsigned __int8 v11 = vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v9));
  uint64_t result = BlueFin::GlMeSrdSatMgr::GetNumSatTrkChnAvailable(*(BlueFin::GlMeSrdSatMgr **)(a1 + 16));
  if (result >= v11)
  {
    uint64_t v13 = *a2;
    v43[0] = v13;
    int v44 = 0;
    __int16 v45 = 575;
    if ((v13 + 67) >= 0x44u)
    {
      uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[v13];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v14] == 255) {
        int v44 = -1;
      }
      else {
        __int16 v45 = BlueFin::GlSignalId::s_ausGnss2signalId[v14]
      }
            + v13
            - BlueFin::GlSvId::s_aucGnss2minSvId[v14];
    }
    uint64_t StrategyId = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v43);
    int v16 = HIBYTE(v46);
    int v39 = a3;
    if (HIBYTE(v46))
    {
      uint64_t v17 = *a2;
      v43[0] = v17;
      int v44 = 3;
      __int16 v45 = 575;
      if ((v17 + 67) >= 0x44u)
      {
        uint64_t v18 = BlueFin::GlSvId::s_aucSvId2gnss[v17];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v18 + 21] == 255) {
          int v44 = -1;
        }
        else {
          __int16 v45 = BlueFin::GlSignalId::s_ausGnss2signalId[v18]
        }
              + v17
              - BlueFin::GlSvId::s_aucGnss2minSvId[v18]
              + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v18];
      }
      unsigned int v41 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v43);
    }
    else
    {
      unsigned int v41 = 250;
    }
    int v19 = BYTE2(v46);
    if (BYTE2(v46))
    {
      uint64_t v20 = *a2;
      v43[0] = v20;
      int v44 = 2;
      __int16 v45 = 575;
      if ((v20 + 67) >= 0x44u)
      {
        uint64_t v21 = BlueFin::GlSvId::s_aucSvId2gnss[v20];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v21 + 14] == 255) {
          int v44 = -1;
        }
        else {
          __int16 v45 = BlueFin::GlSignalId::s_ausGnss2signalId[v21]
        }
              + v20
              - BlueFin::GlSvId::s_aucGnss2minSvId[v21]
              + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v21];
      }
      unsigned int v40 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v43);
    }
    else
    {
      unsigned int v40 = 250;
    }
    v47[0] = StrategyId;
    if (!v16) {
      goto LABEL_31;
    }
    if (v7)
    {
      if (v7 == 4)
      {
        if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 832))(*(void *)(a1 + 32), 9))
        {
LABEL_31:
          if (v19 && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 1200))(*(void *)(a1 + 32))) {
            LOBYTE(v46) = 0;
          }
          uint64_t v22 = 0;
          int v23 = (char *)&v48 + 1;
          LOBYTE(v24) = 1;
          BOOL v25 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
          while (1)
          {
            uint64_t v26 = *a2;
            v43[0] = v26;
            int v44 = v22;
            __int16 v45 = 575;
            if ((v26 + 67) >= 0x44u)
            {
              uint64_t v27 = BlueFin::GlSvId::s_aucSvId2gnss[v26];
              if (v25[v27] == 255) {
                int v44 = -1;
              }
              else {
                __int16 v45 = BlueFin::GlSignalId::s_ausGnss2signalId[v27]
              }
                    + v26
                    - BlueFin::GlSvId::s_aucGnss2minSvId[v27]
                    + BlueFin::GlSvId::s_aucGnss2numSvId[v27] * (_WORD)v22;
            }
            char v28 = v47[v22 - 4];
            if (v28)
            {
              unsigned __int8 v29 = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdSearchMgrBase *)a1, (const BlueFin::GlSignalId *)v43);
              int v30 = v29;
              v47[v22] = v29;
              uint64_t v31 = StrategyId;
              if (v22)
              {
                if (v22 == 2)
                {
                  int v33 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 1200))(*(void *)(a1 + 32), StrategyId);
                  uint64_t v31 = v40;
                  if (!v33)
                  {
LABEL_46:
                    char v28 = 1;
                    char v32 = StrategyId;
                    goto LABEL_47;
                  }
                }
                else
                {
                  uint64_t v31 = v41;
                  if (v22 != 3) {
                    goto LABEL_46;
                  }
                }
              }
              char v32 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 72))(a1, v31, v43);
              char v28 = 1;
            }
            else
            {
              char v32 = 0;
              int v30 = 250;
              v47[v22] = -6;
            }
LABEL_47:
            *(v23 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
            *int v23 = v28;
            v23 += 2;
            int v24 = (v30 == 250) & v24;
            ++v22;
            v25 += 7;
            if (v22 == 4)
            {
              if (!v24)
              {
                if (v39 == 2)
                {
                  LODWORD(StrategyId) = v40;
                }
                else if (v39 == 3)
                {
                  LODWORD(StrategyId) = v41;
                }
                char v34 = 0;
                switch((int)StrategyId)
                {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 13:
                  case 14:
                  case 16:
                  case 17:
                  case 18:
                  case 26:
                  case 27:
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                  case 32:
                  case 33:
                  case 34:
                  case 35:
                  case 38:
                  case 41:
                  case 42:
                  case 43:
                  case 47:
                  case 50:
                  case 51:
                  case 52:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 61:
                  case 62:
                  case 63:
                  case 64:
                  case 66:
                  case 67:
                  case 69:
                  case 70:
                  case 72:
                  case 73:
                  case 74:
                  case 75:
                  case 76:
                  case 77:
                  case 78:
                  case 85:
                  case 86:
                  case 87:
                  case 88:
                  case 89:
                  case 90:
                  case 92:
                  case 93:
                  case 94:
                  case 95:
                  case 96:
                  case 97:
                    goto LABEL_55;
                  case 10:
                  case 11:
                  case 12:
                  case 15:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 36:
                  case 37:
                  case 39:
                  case 40:
                  case 44:
                  case 45:
                  case 46:
                  case 53:
                  case 54:
                  case 59:
                  case 60:
                  case 65:
                  case 68:
                  case 71:
                  case 81:
                  case 82:
                  case 83:
                  case 91:
                    char v34 = 1;
LABEL_55:
                    unsigned int v35 = BlueFin::GlMeSrdSatMgr::CreateSat(*(void *)(a1 + 16), a2, v47, &v48, v39, v34, 1, (unsigned __int8 *)&v46);
                    *(_DWORD *)(*(void *)(a1 + 80) + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
                    *(_DWORD *)(*(void *)(a1 + 128) + 4 * (v35 >> 5)) |= 1 << v35;
                    BlueFin::GlSetBase::Remove(a1 + 160, v35);
                    BlueFin::GlSetBase::Remove(a1 + 192, v35);
                    return BlueFin::GlSetBase::Remove(a1 + 224, v35);
                  default:
                    int v37 = "0";
                    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 921, "IsAlignedSearch", (char)"0");
                    int v38 = 921;
                    goto LABEL_60;
                }
              }
              Name = BlueFin::GlMeSrdSearchMgrBase::GetName((BlueFin::GlMeSrdSearchMgrBase *)*(unsigned int *)(a1 + 72));
              GlCustomLog(14, "%s::CreateSatAndStartSat(svid %u) All Invalid Strategies!\n", Name, *a2);
              int v37 = "!bNoValidStrategies";
              DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 450, "CreateSatAndStartSat", (char)"!bNoValidStrategies");
              int v38 = 450;
LABEL_60:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", v38, v37);
            }
          }
        }
LABEL_30:
        LOBYTE(v46) = 0;
        goto LABEL_31;
      }
      if (v7 != 3) {
        goto LABEL_31;
      }
    }
    if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 832))(*(void *)(a1 + 32), 10) & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::GetAidId(uint64_t a1, int a2, BlueFin::GlSignalId *a3)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
    case 1:
      return result;
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 39:
    case 40:
    case 43:
    case 44:
    case 45:
    case 46:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 75:
    case 76:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 86:
    case 87:
    case 90:
    case 91:
    case 92:
    case 97:
      int v5 = *(BlueFin::GlMeSrdAidingMgr **)(a1 + 24);
      return BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId(v5, a3);
    case 4:
    case 5:
    case 6:
    case 7:
    case 13:
    case 16:
    case 17:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 41:
    case 42:
    case 47:
    case 50:
    case 51:
    case 52:
    case 61:
    case 62:
    case 63:
    case 72:
    case 73:
    case 74:
    case 85:
    case 88:
    case 89:
    case 93:
    case 94:
    case 95:
    case 96:
      unsigned int v6 = *(unsigned __int8 *)a3;
      if (v6 < 0x34) {
        return 0;
      }
      if (v6 < 0x42) {
        return 1;
      }
      if (v6 - 76 >= 0x3F) {
        return 0;
      }
      return 2;
    default:
      DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 774, "GetAidId", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 774, "0");
  }
}

uint64_t BlueFin::GlMeSrdSatMgr::GetNumSatTrkChnAvailable(BlueFin::GlMeSrdSatMgr *this)
{
  unsigned int v1 = *((unsigned __int8 *)this + 48);
  unsigned int v2 = *((unsigned __int8 *)this + 49);
  BOOL v3 = v1 >= v2;
  unsigned __int8 v4 = v1 - v2;
  if (!v3)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 272, "GetNumSatTrkChnAvailable", (char)"m_ucMaxNumSatChn >= m_ucNumSatChnUsed");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 272, "m_ucMaxNumSatChn >= m_ucNumSatChnUsed");
  }
  return v4;
}

uint64_t BlueFin::GlMeSrdSatMgr::CreateSat(uint64_t a1, unsigned char *a2, unsigned char *a3, void *a4, int a5, char a6, char a7, unsigned __int8 *a8)
{
  unint64_t v8 = *a2;
  if (((*(unsigned int *)(*(void *)a1 + ((v8 >> 3) & 0x1C)) >> (v8 & 0x1F)) & 1) == 0)
  {
    long long v47 = "m_otSvidSupported.Has(rotSvid)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 292, "CreateSat", (char)"m_otSvidSupported.Has(rotSvid)");
    int v48 = 292;
    goto LABEL_54;
  }
  uint64_t v16 = a1 + 56;
  if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 56)))
  {
    long long v47 = "HasSatAvailable()";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 293, "CreateSat", (char)"HasSatAvailable()");
    int v48 = 293;
    goto LABEL_54;
  }
  int v49 = a4;
  unsigned __int8 v52 = *(unsigned char *)(a1 + 64);
  memcpy(v56, *(const void **)(a1 + 56), 4 * v52);
  __int16 v54 = 0;
  unsigned __int8 v53 = 0;
  int v55 = v56[0];
  BlueFin::GlSetIterator::operator++(&v52);
  char v50 = a7;
  if (v53 == v52)
  {
LABEL_7:
    __int16 v54 = 0;
    unsigned __int8 v53 = 0;
    int v55 = v56[0];
    BlueFin::GlSetIterator::operator++(&v52);
    unsigned __int8 v18 = v54;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 6288);
    while (*(unsigned __int8 *)(v17 + 52 * v54) == v8)
    {
      BlueFin::GlSetIterator::operator++(&v52);
      if (v53 == v52) {
        goto LABEL_7;
      }
    }
    unsigned __int8 v18 = v54;
  }
  uint64_t v19 = v18;
  if (v18 != 255)
  {
    BlueFin::GlSetBase::Remove(v16, v18);
    uint64_t v20 = 0;
    *(_DWORD *)(*(void *)(a1 + 88) + 4 * (v18 >> 5)) |= 1 << v18;
    uint64_t v21 = 52 * v18;
    *(unsigned char *)(*(void *)(a1 + 6288) + v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *a2;
    do
      *(unsigned char *)(*(void *)(a1 + 6288) + v21 + 24 + v20++) = 0;
    while (v20 != 4);
    if (v18 >= 0x64u)
    {
      long long v47 = "ucSatId < _DIM(m_aotSatData)";
      DeviceFaultNotify("glmesrd_sat_mgr.cpp", 487, "AssignCarriers", (char)"ucSatId < _DIM(m_aotSatData)");
      int v48 = 487;
      goto LABEL_54;
    }
    uint64_t v22 = *(void *)(a1 + 6288);
    int v23 = (unsigned __int8 *)(v22 + 52 * v18);
    int v24 = *a8;
    int v25 = a8[1];
    int v26 = a8[2];
    int v27 = a8[3];
    v23[5] = 0;
    char v28 = v23 + 5;
    if (v24)
    {
      uint64_t v29 = v22 + 52 * v19;
      *(unsigned char *)(v29 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *a3;
      *char v28 = 1;
      *(_DWORD *)(v29 + 8) = 0;
    }
    if (v26 | v25 | v27)
    {
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 6552) + 352))(*(void *)(a1 + 6552)) & 1) == 0)
      {
        long long v47 = "m_rAsicConfigIfc.IsMultiCarrSatSupported()";
        DeviceFaultNotify("glmesrd_sat_mgr.cpp", 506, "AssignCarriers", (char)"m_rAsicConfigIfc.IsMultiCarrSatSupported()");
        int v48 = 506;
        goto LABEL_54;
      }
      LODWORD(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *v23;
      if (v27)
      {
        if ((v30 - 66) < 0x49 || (v30 - 1) <= 0x1F)
        {
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 6552) + 832))(*(void *)(a1 + 6552), 9) & 1) == 0&& ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 6552) + 832))(*(void *)(a1 + 6552), 10) & 1) == 0)
          {
            long long v47 = "m_rAsicConfigIfc.IsFeatureSupported(GLME_B1C_SUPPORTED) || m_rAsicConfigIfc.IsFeatureSupported(GLME_L1C_SUPPORTED)";
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 517, "AssignCarriers", (char)"m_rAsicConfigIfc.IsFeatureSupported(GLME_B1C_SUPPORTED) || m_rAsicConfigIfc.IsFeatureSupported(GLME_L1C_SUPPORTED)");
            int v48 = 517;
            goto LABEL_54;
          }
          unint64_t v30 = *v23;
          uint64_t v32 = 1 << (v30 & 0x1F);
          if ((v32 & *(_DWORD *)(*(void *)(a1 + 792) + 4 * (v30 >> 5))) == 0
            && (v32 & *(_DWORD *)(*(void *)(a1 + 840) + 4 * (v30 >> 5))) == 0)
          {
            long long v47 = "m_otSetSvidB1CEnabled.Has(otSvId) || m_otSetSvidL1CEnabled.Has(otSvId)";
            DeviceFaultNotify("glmesrd_sat_mgr.cpp", 518, "AssignCarriers", (char)"m_otSetSvidB1CEnabled.Has(otSvId) || m_otSetSvidL1CEnabled.Has(otSvId)");
            int v48 = 518;
            goto LABEL_54;
          }
          *char v28 = 0;
          uint64_t v33 = v22 + 52 * v19;
          *(unsigned char *)(v33 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3[3];
          *char v28 = 1;
          *(_DWORD *)(v33 + 8) = 3;
        }
      }
      if (v25)
      {
        uint64_t v34 = v30 >> 5;
        uint64_t v35 = 1 << (v30 & 0x1F);
        if ((v35 & *(_DWORD *)(*(void *)(a1 + 696) + 4 * v34)) == 0)
        {
          long long v47 = "m_otSetSvidL2Enabled.Has(otSvId)";
          DeviceFaultNotify("glmesrd_sat_mgr.cpp", 530, "AssignCarriers", (char)"m_otSetSvidL2Enabled.Has(otSvId)");
          int v48 = 530;
          goto LABEL_54;
        }
        uint64_t v36 = v22 + 52 * v19;
        *(unsigned char *)(v36 + *v28 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3[1];
        uint64_t v37 = *v28;
        *char v28 = v37 + 1;
        *(_DWORD *)(v36 + 4 * v37 + 8) = 1;
        goto LABEL_32;
      }
    }
    else
    {
      LODWORD(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *v23;
    }
    uint64_t v34 = v30 >> 5;
    uint64_t v35 = 1 << (v30 & 0x1F);
    if ((v35 & *(_DWORD *)(*(void *)(a1 + 696) + 4 * v34)) != 0)
    {
      long long v47 = "m_otSetSvidL2Enabled.Missing(otSvId)";
      DeviceFaultNotify("glmesrd_sat_mgr.cpp", 537, "AssignCarriers", (char)"m_otSetSvidL2Enabled.Missing(otSvId)");
      int v48 = 537;
      goto LABEL_54;
    }
LABEL_32:
    uint64_t v38 = v35 & *(_DWORD *)(*(void *)(a1 + 744) + 4 * v34);
    if (v26)
    {
      if (v38)
      {
        if ((v30 - 76) > 0x3E
          || (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 6552) + 832))(*(void *)(a1 + 6552), 7))
        {
          uint64_t v39 = v22 + 52 * v19;
          *(unsigned char *)(v39 + *v28 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3[2];
          uint64_t v40 = *v28;
          unsigned __int8 v41 = v40 + 1;
          *char v28 = v40 + 1;
          *(_DWORD *)(v39 + 4 * v40 + 8) = 2;
LABEL_39:
          uint64_t v42 = v22 + 52 * v19;
          *(unsigned char *)(v42 + 28) = 0;
          long long v43 = (unsigned char *)(v42 + 28);
          if (v41)
          {
            for (uint64_t i = 0; i != v41; ++i)
            {
              if (*(_DWORD *)(v22 + 52 * v19 + 8 + 4 * i) == a5) {
                *long long v43 = i;
              }
            }
          }
          *(void *)(*(void *)(a1 + 6288) + 52 * v19 + 33) = *v49;
          *(unsigned char *)(*(void *)(a1 + 6288) + 52 * v19 + 44) = a6;
          uint64_t v45 = *(void *)(a1 + 6288) + 52 * v19;
          *(unsigned char *)(v45 + 29) = v50;
          *(unsigned char *)(a1 + 49) += *(unsigned char *)(v45 + 5);
          return v19;
        }
LABEL_38:
        unsigned __int8 v41 = *v28;
        goto LABEL_39;
      }
      long long v47 = "m_otSetSvidL5Enabled.Has(otSvId)";
      DeviceFaultNotify("glmesrd_sat_mgr.cpp", 543, "AssignCarriers", (char)"m_otSetSvidL5Enabled.Has(otSvId)");
      int v48 = 543;
    }
    else
    {
      if (!v38) {
        goto LABEL_38;
      }
      long long v47 = "m_otSetSvidL5Enabled.Missing(otSvId)";
      DeviceFaultNotify("glmesrd_sat_mgr.cpp", 553, "AssignCarriers", (char)"m_otSetSvidL5Enabled.Missing(otSvId)");
      int v48 = 553;
    }
LABEL_54:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v48, v47);
  }
  return v19;
}

double BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(BlueFin::GlMeSrdSearchMgrBase *this, BlueFin::GlSvIdSet *a2)
{
  v46[0] = xmmword_263BAA85C;
  v46[1] = *(_OWORD *)algn_263BAA86C;
  v43[0] = xmmword_263BAA89C;
  v43[1] = unk_263BAA8AC;
  v40[0] = BlueFin::GlSvIdSet::csm_aulBeidouGeoSvIds;
  v40[1] = unk_263BAA92C;
  long long v12 = xmmword_263BAA8BC;
  int v44 = v46;
  char v45 = 8;
  unsigned __int8 v41 = (int *)v43;
  char v42 = 8;
  uint64_t v38 = v40;
  unsigned __int8 v39 = 8;
  char v10 = &v12;
  LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 8;
  *(_OWORD *)uint64_t v13 = unk_263BAA8CC;
  BlueFin::GlSvIdSet::operator~((const void **)&v38, (uint64_t)&v32);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v37, 8u, (const void **)&v10);
  uint64_t v14 = &v16;
  LOBYTE(v15) = 8;
  long long v16 = 0u;
  long long v17 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v14, &v32);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v14);
  v37[0] = v16;
  v37[1] = v17;
  v34[0] = xmmword_263BAA8DC;
  v34[1] = unk_263BAA8EC;
  v31[0] = xmmword_263BAA8FC;
  uint64_t v32 = (int *)v34;
  char v33 = 8;
  uint64_t v29 = (int *)v31;
  char v30 = 8;
  v31[1] = unk_263BAA90C;
  LOBYTE(v14) = 1;
  HIDWORD(v14) = 0;
  LOWORD(v15) = 0;
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v14) == 250)
  {
    unsigned __int8 v18 = v20;
    char v19 = 8;
    v20[0] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
    v20[1] = *(_OWORD *)algn_263BAA84C;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v21, (unsigned int *)v22, 8u, (const void **)&v18);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v21, (int **)&v14, &v41);
    BlueFin::GlSetBase::operator=((uint64_t)&v21, (uint64_t)&v14);
    v22[0] = v16;
    v22[1] = v17;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v23, (unsigned int *)&v25, 8u, &v21);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v23, (int **)&v14, &v29);
    BlueFin::GlSetBase::operator=((uint64_t)&v23, (uint64_t)&v14);
    long long v25 = v16;
    long long v26 = v17;
    BlueFin::GlSvIdSet::operator~((const void **)&v23, (uint64_t)&v27);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)&v12, 8u, (const void **)a2);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, (int **)&v14, &v27);
    BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v14);
    long long v12 = v16;
    *(_OWORD *)uint64_t v13 = v17;
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v10);
    *(_OWORD *)((char *)a2 + 12) = v12;
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v13;
  }
  LOBYTE(v14) = 52;
  HIDWORD(v14) = 0;
  LOWORD(v15) = 147;
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v14) == 250)
  {
    int v23 = &v25;
    LOBYTE(v24) = 8;
    long long v25 = xmmword_263BAA87C;
    long long v26 = unk_263BAA88C;
    BlueFin::GlSvIdSet::operator~((const void **)&v23, (uint64_t)&v27);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)&v12, 8u, (const void **)a2);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, (int **)&v14, &v27);
    BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v14);
    long long v12 = v16;
    *(_OWORD *)uint64_t v13 = v17;
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v10);
    *(_OWORD *)((char *)a2 + 12) = v12;
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v13;
  }
  LOBYTE(v14) = v36;
  memcpy(&v15, __src, 4 * v36);
  WORD1(v14) = 0;
  BYTE1(v14) = 0;
  HIDWORD(v14) = v15;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v14);
  LOBYTE(v27) = BYTE2(v14);
  HIDWORD(v27) = 0;
  __int16 v28 = 575;
  if ((BYTE2(v14) + 67) >= 0x44u)
  {
    uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v14)];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v4] == 255) {
      HIDWORD(v27) = -1;
    }
    else {
      __int16 v28 = BlueFin::GlSignalId::s_ausGnss2signalId[v4]
    }
          + BYTE2(v14)
          - BlueFin::GlSvId::s_aucGnss2minSvId[v4];
  }
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v27) == 250
    && !BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 3) + 976)))
  {
    goto LABEL_17;
  }
  LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v36;
  memcpy(&v11, __src, 4 * v36);
  WORD1(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BYTE1(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  HIDWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v10);
  LOBYTE(v23) = BYTE2(v10);
  HIDWORD(v23) = 3;
  __int16 v24 = 575;
  if ((BYTE2(v10) + 67) >= 0x44u)
  {
    uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v10)];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v5 + 21] == 255) {
      HIDWORD(v23) = -1;
    }
    else {
      __int16 v24 = BlueFin::GlSignalId::s_ausGnss2signalId[v5]
    }
          + BYTE2(v10)
          - BlueFin::GlSvId::s_aucGnss2minSvId[v5]
          + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v5];
  }
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v23) == 250
    && BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 3) + 976)))
  {
LABEL_17:
    BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v27);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)&v12, 8u, (const void **)a2);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, (int **)&v14, &v27);
    BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v14);
    long long v12 = v16;
    *(_OWORD *)uint64_t v13 = v17;
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v10);
    *(_OWORD *)((char *)a2 + 12) = v12;
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v13;
  }
  LOBYTE(v14) = v39;
  memcpy(&v15, v38, 4 * v39);
  WORD1(v14) = 0;
  BYTE1(v14) = 0;
  HIDWORD(v14) = v15;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v14);
  LOBYTE(v27) = BYTE2(v14);
  HIDWORD(v27) = 0;
  __int16 v28 = 575;
  if ((BYTE2(v14) + 67) >= 0x44u)
  {
    uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v14)];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v6] == 255) {
      HIDWORD(v27) = -1;
    }
    else {
      __int16 v28 = BlueFin::GlSignalId::s_ausGnss2signalId[v6]
    }
          + BYTE2(v14)
          - BlueFin::GlSvId::s_aucGnss2minSvId[v6];
  }
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v27) == 250
    && !BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 3) + 976)))
  {
    goto LABEL_30;
  }
  LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v39;
  memcpy(&v11, v38, 4 * v39);
  WORD1(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BYTE1(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  HIDWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v10);
  LOBYTE(v23) = BYTE2(v10);
  HIDWORD(v23) = 3;
  __int16 v24 = 575;
  if ((BYTE2(v10) + 67) >= 0x44u)
  {
    uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v10)];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v7 + 21] == 255) {
      HIDWORD(v23) = -1;
    }
    else {
      __int16 v24 = BlueFin::GlSignalId::s_ausGnss2signalId[v7]
    }
          + BYTE2(v10)
          - BlueFin::GlSvId::s_aucGnss2minSvId[v7]
          + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v7];
  }
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v23) == 250
    && BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)this + 3) + 976)))
  {
LABEL_30:
    BlueFin::GlSvIdSet::operator~((const void **)&v38, (uint64_t)&v27);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)&v12, 8u, (const void **)a2);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, (int **)&v14, &v27);
    BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v14);
    long long v12 = v16;
    *(_OWORD *)uint64_t v13 = v17;
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v10);
    *(_OWORD *)((char *)a2 + 12) = v12;
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v13;
  }
  LOBYTE(v14) = -117;
  HIDWORD(v14) = 0;
  LOWORD(v15) = 453;
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v14) == 250 {
    || (uint64_t v8 = *((void *)this + 4),
  }
        LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -117,
        ((*(uint64_t (**)(uint64_t, long long **))(*(void *)v8 + 472))(v8, &v10) & 1) == 0))
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v32, (uint64_t)&v27);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)&v12, 8u, (const void **)a2);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, (int **)&v14, &v27);
    BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v14);
    long long v12 = v16;
    *(_OWORD *)uint64_t v13 = v17;
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v10);
    *(_OWORD *)((char *)a2 + 12) = v12;
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v13;
  }
  LOBYTE(v14) = 33;
  HIDWORD(v14) = 0;
  LOWORD(v15) = 128;
  if (BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(this, (const BlueFin::GlSignalId *)&v14) == 250)
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v44, (uint64_t)&v27);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)&v12, 8u, (const void **)a2);
    uint64_t v14 = &v16;
    LOBYTE(v15) = 8;
    long long v16 = 0u;
    long long v17 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v10, (int **)&v14, &v27);
    BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v14);
    long long v12 = v16;
    *(_OWORD *)uint64_t v13 = v17;
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v10);
    *(_OWORD *)((char *)a2 + 12) = v12;
    double result = v13[0];
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v13;
  }
  return result;
}

uint64_t BlueFin::GlSetBase::OperatorBinaryAnd(uint64_t this, int **a2, int **a3)
{
  uint64_t v3 = *(unsigned __int8 *)(this + 8);
  int v4 = *((unsigned __int8 *)a3 + 8);
  if (v3 != v4 || *((unsigned __int8 *)a2 + 8) != v4)
  {
    DeviceFaultNotify("glutl_set.cpp", 498, "OperatorBinaryAnd", (char)"m_ucUlongSize == otRightOperand.m_ucUlongSize && otResult.m_ucUlongSize == otRightOperand.m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 498, "m_ucUlongSize == otRightOperand.m_ucUlongSize && otResult.m_ucUlongSize == otRightOperand.m_ucUlongSize");
  }
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v6 = *(int **)this;
    uint64_t v7 = *a3;
    uint64_t v8 = *a2;
    do
    {
      int v10 = *v6++;
      int v9 = v10;
      int v11 = *v7++;
      *v8++ = v11 & v9;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::GetStrategyId(BlueFin::GlMeSrdSearchMgrBase *this, const BlueFin::GlSignalId *a2)
{
  uint64_t v2 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2];
  switch(BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a2 + 1) - *((int *)a2 + 1) + v2])
  {
    case -1:
    case 9:
    case 10:
    case 15:
      DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 618, "GetStrategyId", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 618, "0");
    case 0:
    case 12:
      if (v2 == 1) {
        uint64_t result = *((unsigned int *)this + 15);
      }
      else {
        uint64_t result = *((unsigned int *)this + 10);
      }
      break;
    case 1:
    case 2:
    case 4:
    case 5:
    case 7:
    case 8:
      uint64_t result = *((unsigned int *)this + 16);
      break;
    case 3:
      uint64_t result = *((unsigned int *)this + 11);
      break;
    case 6:
      if (*(unsigned __int8 *)a2 - 81 > 0x34) {
        uint64_t result = *((unsigned int *)this + 13);
      }
      else {
        uint64_t result = *((unsigned int *)this + 12);
      }
      break;
    case 11:
      uint64_t result = *((unsigned int *)this + 14);
      break;
    case 13:
    case 14:
      uint64_t result = *((unsigned int *)this + 17);
      break;
    default:
      uint64_t result = 250;
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeGnssSvsInfoMgr::generate(uint64_t a1, int *a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,uint64_t a40,void (**a41)(BlueFin::GlGpsTime *__hidden this),uint64_t a42,long long a43,double a44,long long __srca,long long a46,long long a47,long long a48,long long a49,long long a50)
{
  STACK[0x738] = *MEMORY[0x263EF8340];
  uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(a1 + 32) + 384), *a2);
  if (result)
  {
    uint64_t v48 = result;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)result + 304))(&v180);
    uint64_t v49 = *a2;
    if (v49 > 6) {
      LOBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    }
    else {
      uint64_t v50 = qword_263BBD2F8[v49];
    }
    uint64_t ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v180, 1u);
    uint64_t v52 = (2 * ~(-1 << v50)) & ~((ULong << 32) | BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v180, 0));
    BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&__srca, SBYTE4(v52), v52);
    LOBYTE(a17) = BYTE8(__srca);
    memcpy((char *)&a17 + 8, (const void *)__srca, 4 * BYTE8(__srca));
    WORD1(a17) = 0;
    BYTE1(a17) = 0;
    DWORD1(a17) = DWORD2(a17);
    while (1)
    {
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a17);
      if (BYTE1(a17) == a17) {
        break;
      }
      BlueFin::GlPeGnssSvsInfoMgr::removeSvInfo(a1, v49, BYTE2(a17));
    }
    unsigned __int8 v53 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, int *, void))(*(void *)v48 + 112))(v48, a2 + 1, 0);
    if (!v53) {
      goto LABEL_15;
    }
    if (BlueFin::GlGnssSet::Has(a1 + 96, a2)) {
      return 0;
    }
    int Index = BlueFin::GlPeGnssSvsInfoMgr::getIndex((unsigned int *)a1, *a2, *((unsigned char *)a2 + 4));
    unsigned __int16 v55 = Index;
    if (Index < 0) {
      return 0;
    }
    unsigned int v56 = (uint64_t *)(a1 + 66192);
    uint64_t v57 = *(void *)(a1 + 66768);
    unsigned int v58 = (BlueFin::GlSetBase *)(v57 + 56 * *(unsigned __int8 *)(a1 + 288));
    uint64_t v59 = v55 >> 5;
    uint64_t v60 = 1 << (v55 & 0x1F);
    if ((v60 & *(_DWORD *)(*(void *)v58 + 4 * v59)) == 0)
    {
      for (uint64_t i = 0; i != 560; i += 56)
      {
        if ((v60 & *(_DWORD *)(*(void *)(v57 + i) + 4 * v59)) != 0) {
          return 0;
        }
      }
      if (BlueFin::GlSetBase::Cnt(v58) > 0xE) {
        return 0;
      }
    }
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a34 = 0u;
    a35 = 0u;
    a32 = 0u;
    a33 = 0u;
    a30 = 0u;
    a31 = 0u;
    a28 = 0u;
    a29 = 0u;
    a26 = 0u;
    a27 = 0u;
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a17 = 0u;
    uint64_t v61 = *a2;
    LODWORD(a17) = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v61];
    unsigned int v62 = *((unsigned __int8 *)a2 + 4);
    BYTE4(a17) = *((unsigned char *)a2 + 4);
    BYTE5(a17) = -8;
    if (v61 == 2)
    {
      unsigned int v63 = *(BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 32) + 48);
      if (!v63 || (int v64 = BlueFin::GlPeGloFcnOsnMgr::OSN2FCN(v63, v62), BYTE5(a17) = v64, v64 == -8))
      {
LABEL_15:
        BlueFin::GlPeGnssSvsInfoMgr::removeSvInfo(a1, *a2, *((unsigned char *)a2 + 4));
        return 0;
      }
    }
    unsigned int v65 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v53 + 144))(v53);
    if (v65 > 3) {
      int v66 = 0;
    }
    else {
      int v66 = dword_263BBD290[v65];
    }
    DWORD2(a17) = v66;
    int v68 = BlueFin::GlPeGnssSvsInfoMgr::getIndex((unsigned int *)a1, *a2, *((unsigned char *)a2 + 4));
    if (v68 < 0) {
      goto LABEL_37;
    }
    uint64_t v69 = *v56;
    if (!*v56) {
      goto LABEL_37;
    }
    int v70 = 0;
    unsigned int v71 = (unsigned __int16)v68;
    int v72 = *(_DWORD *)(v69 + 368 * (unsigned __int16)v68 + 8);
    if (!v72 || v66 != v72) {
      goto LABEL_38;
    }
    if ((*(void *)&__srca = 0,
          BlueFin::GlPeGnssSvsInfoMgr::getSvPosToa(v53[8] >> 4, (BlueFin::GlPeGnssTime *)a3, (double *)&__srca, (double *)&a41))&& ((double v73 = *(double *)(v69 + 368 * v71 + 112) - *(double *)&__srca, v74 = 0.5, v73 > 0.0)|| (v74 = -0.5, v73 < 0.0))&& (int)(v73 + v74) == 5)
    {
      uint64_t v75 = 0;
      uint64_t v76 = v69 + 368 * v71 + 48;
      do
      {
        uint64_t v77 = (long long *)((char *)&a18 + v75);
        long long v78 = *(_OWORD *)(v76 + v75 + 16);
        *uint64_t v77 = *(_OWORD *)(v76 + v75);
        v77[1] = v78;
        v75 += 32;
      }
      while (v75 != 96);
      int v70 = 1;
    }
    else
    {
LABEL_37:
      int v70 = 0;
    }
LABEL_38:
    uint64_t v79 = 0;
    LODWORD(v183) = *(_DWORD *)(a3 + 8);
    unsigned int v179 = *(unsigned __int8 *)(a1 + 288);
    double v182 = *(void (***)(BlueFin::GlGpsTime *__hidden))a3;
    long long vars0 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&STACK[0x700] = 0u;
    *(_OWORD *)&STACK[0x710] = 0u;
    *(_OWORD *)&STACK[0x6E0] = 0u;
    *(_OWORD *)&STACK[0x6F0] = 0u;
    *(_OWORD *)&STACK[0x6C0] = 0u;
    *(_OWORD *)&STACK[0x6D0] = 0u;
    *(_OWORD *)&STACK[0x6A0] = 0u;
    *(_OWORD *)&STACK[0x6B0] = 0u;
    *(_OWORD *)&STACK[0x680] = 0u;
    *(_OWORD *)&STACK[0x690] = 0u;
    *(_OWORD *)&STACK[0x660] = 0u;
    *(_OWORD *)&STACK[0x670] = 0u;
    *(_OWORD *)&STACK[0x640] = 0u;
    *(_OWORD *)&STACK[0x650] = 0u;
    a49 = 0u;
    a50 = 0u;
    a47 = 0u;
    a48 = 0u;
    __srca = 0u;
    a46 = 0u;
    do
    {
      int v80 = (char *)&__srca + v79;
      *((void *)v80 + 9) = 0;
      *(_OWORD *)int v80 = 0uLL;
      *((_OWORD *)v80 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0uLL;
      *((_OWORD *)v80 + 2) = 0uLL;
      *((_OWORD *)v80 + 3) = 0uLL;
      v79 += 80;
      *((_DWORD *)v80 + 16) = 0;
    }
    while (v79 != 320);
    if (v70) {
      uint64_t v81 = 3;
    }
    else {
      uint64_t v81 = 0;
    }
    uint64_t v82 = (16 * v81) | (v81 << 6);
    double v83 = (double *)((char *)&BlueFin::GlPeGnssSvsInfoMgr::getSvAnchorPos(BlueFin::GlPeEphemeris const&,BlueFin::GlPeGnssTime const&,BlueFin::GlGnssSvInfo &,BOOL)::adDeltaTimeS
                   + 8 * v81);
    do
    {
      double v84 = *v83;
      a41 = v182;
      LODWORD(a42) = v183;
      a43 = vars0;
      BlueFin::GlPeGnssTime::operator+=((unsigned int *)&a41, v84);
      if (BlueFin::GlPeEphemeris::isExpired(v53, (uint64_t)&a41)
        || ((*(uint64_t (**)(unsigned __int8 *, void (***)(BlueFin::GlGpsTime *__hidden), char *, double))(*(void *)v53 + 112))(v53, &a41, (char *)&__srca + v82, 0.0) & 1) == 0)
      {
        goto LABEL_15;
      }
      v82 += 80;
      ++v83;
    }
    while (v82 != 320);
    (*(void (**)(unsigned __int8 *))(*(void *)v53 + 144))(v53);
    uint64_t v85 = 32 * v81;
    uint64_t v86 = &__srca + 5 * v81 + 1;
    char v87 = (double *)((char *)&BlueFin::GlPeGnssSvsInfoMgr::getSvAnchorPos(BlueFin::GlPeEphemeris const&,BlueFin::GlPeGnssTime const&,BlueFin::GlGnssSvInfo &,BOOL)::adDeltaTimeS
                   + 8 * v81);
    do
    {
      unsigned int v88 = v53[8];
      double v89 = *v87;
      a41 = v182;
      LODWORD(a42) = v183;
      a43 = vars0;
      BlueFin::GlPeGnssTime::operator+=((unsigned int *)&a41, v89);
      if (!BlueFin::GlPeGnssSvsInfoMgr::getSvPosToa(v88 >> 4, (BlueFin::GlPeGnssTime *)&a41, (double *)((char *)&a17 + v85 + 16), &a44))goto LABEL_15; {
      double v90 = (char *)&a17 + v85;
      }
      *(_OWORD *)(v90 + 24) = *(v86 - 1);
      uint64_t v91 = *(void *)v86;
      v86 += 5;
      *((void *)v90 + 5) = v91;
      v85 += 32;
      ++v87;
    }
    while (v85 != 128);
    if (a17 == 8 || !BYTE4(a17)) {
      goto LABEL_15;
    }
    *(double *)&unint64_t v92 = -4.44280763e-10;
    double v93 = 3.986005e14;
    if (a17 == 6)
    {
      int v100 = DWORD2(a17) - 1;
      if ((DWORD2(a17) - 1) <= 4)
      {
        double v93 = dbl_263BBD330[v100];
        unint64_t v92 = qword_263BBD358[v100];
      }
    }
    else if (a17 == 2 && DWORD2(a17) <= 5 && ((1 << SBYTE8(a17)) & 0x26) != 0)
    {
      double v94 = (*(double (**)(unsigned __int8 *, void (***)(BlueFin::GlGpsTime *__hidden), uint64_t, double))(*(void *)v53 + 64))(v53, &v182, 1, -4.44280763e-10);
      double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 12);
      double v96 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 11);
      double v97 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 11);
      double v98 = v94 * v96 - ScaledFloatingField;
      double v99 = 0.0;
      goto LABEL_60;
    }
    double v176 = *(double *)&v92;
    double v101 = (*(double (**)(unsigned __int8 *, void (***)(BlueFin::GlGpsTime *__hidden), void))(*(void *)v53 + 64))(v53, &v182, 0);
    double v102 = (*(double (**)(unsigned __int8 *, void (***)(BlueFin::GlGpsTime *__hidden), uint64_t))(*(void *)v53 + 64))(v53, &v182, 1);
    double v177 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 17);
    double v103 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 12)
         + sqrt(v93 / (v177 * v177 * (v177 * v177 * (v177 * v177))));
    double v104 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 13) + v103 * v102;
    *(double *)&__srca = v104;
    double v105 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 15);
    a41 = *(void (***)(BlueFin::GlGpsTime *__hidden))&v105;
    a44 = v104;
    BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&__srca, (double *)&a41, &a44, v106);
    __double2 v107 = __sincos_stret(a44);
    double v108 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 10);
    double v109 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 9);
    double v110 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 8);
    double v111 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 9);
    double v112 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 8);
    double v113 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)v53, 8);
    double v114 = v177 * (v176 * v105);
    double v98 = v108 + v109 * v101 + v101 * v110 * v101 + v114 * v107.__sinval;
    double v97 = v111 + (v112 + v112) * v101 + v114 * v107.__cosval * v103;
    double v99 = (v113 + v113) * 1000000000.0;
LABEL_60:
    *(double *)&a26 = v98 * 1000000000.0;
    *((double *)&a26 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v97 * 1000000000.0;
    *(double *)&a27 = v99;
    double v115 = (*(float (**)(unsigned __int8 *))(*(void *)v53 + 96))(v53) / 1.41421356;
    float v116 = v115;
    *(float *)&double v115 = v115 * 3.33564095;
    *((float *)&a27 + 2) = v116;
    HIDWORD(a27) = LODWORD(v115);
    if ((DWORD2(a17) - 1) > 1)
    {
      LODWORD(STACK[0x648]) = 7;
      LOBYTE(STACK[0x64C]) = 0;
      LODWORD(__srca) = -65536;
      *((void *)&__srca + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      LODWORD(a46) = 0;
      *(long long *)((char *)&a46 + 8) = 0u;
      *(long long *)((char *)&a47 + 8) = 0u;
      *(long long *)((char *)&a48 + 8) = 0u;
      *(long long *)((char *)&a49 + 8) = 0u;
      WORD4(a5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      HIDWORD(a5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
      LOBYTE(STACK[0x640]) = 0;
      if (BlueFin::GlPeAlmMgr::GetAlm(*(void *)(a1 + 32) + 34112, *a2, *((unsigned __int8 *)a2 + 4), (uint64_t)&__srca, 1, 1))
      {
        uint64_t v118 = SLODWORD(STACK[0x648]);
        if v118 < 5 && ((0x1Du >> v118))
        {
          int v119 = dword_263BBD380[v118];
        }
        else if (v118 == 5)
        {
          LOWORD(v119) = 31;
        }
        else
        {
          LOWORD(v119) = 255;
        }
        if (((unsigned __int16)v119 & WORD1(__srca)) != 0) {
          int v120 = 2;
        }
        else {
          int v120 = 1;
        }
        DWORD1(a28) = v120;
      }
    }
    else
    {
      if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)v53 + 40))(v53)) {
        int v117 = 1;
      }
      else {
        int v117 = 2;
      }
      LODWORD(a28) = v117;
    }
    if (DWORD2(a17) == 5 || DWORD2(a17) == 3)
    {
      if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)v53 + 40))(v53)) {
        int v121 = 1;
      }
      else {
        int v121 = 2;
      }
      DWORD2(a28) = v121;
    }
    if (BlueFin::GlPeSvHealthHelper::IsBadByRti(*(void *)(a1 + 80) + 32, a2)) {
      int v122 = 2;
    }
    else {
      int v122 = 1;
    }
    LODWORD(a29) = v122;
    if (BlueFin::GlPeSvHealthData::GetState(*(void *)(a1 + 80) + 32, (unsigned int *)a2) == 3)
    {
      int v123 = 2;
    }
    else
    {
      if (!BlueFin::GlPeSvHealthHelper::IsUsable(*(void *)(a1 + 80) + 32, a2)) {
        goto LABEL_90;
      }
      int v123 = 1;
    }
    HIDWORD(a28) = v123;
LABEL_90:
    LOBYTE(a44) = 0;
    uint64_t v124 = *(void *)(a1 + 80);
    BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 40), 1, (__n128 *)&__srca);
    a42 = 0;
    a41 = &off_270EBC600;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&__srca, (BlueFin::GlGpsTime *)&a41);
    unsigned int v125 = ((uint64_t (*)(void))a41[4])(&a41);
    LODWORD(v126) = a42;
    double v127 = (double)v126 * 2.32830644e-10 + (double)v125;
    double v128 = fmod(v127, 4294967300.0);
    if (v127 <= 4294967300.0) {
      double v128 = v127;
    }
    if (v128 < -4294967300.0) {
      double v128 = -fmod(-v128, 4294967300.0);
    }
    if (v128 < 0.0) {
      unsigned int v129 = --v128;
    }
    else {
      unsigned int v129 = v128;
    }
    int GnssSvL5Health = BlueFin::GlPeSvHealthMgr::GetGnssSvL5Health(v124, (unsigned int *)a2, v129, (BOOL *)&a44);
    BYTE4(a29) = GnssSvL5Health;
    if (*a2 == 6)
    {
      v131.i64[1] = *(void *)((char *)&a28 + 12);
      v131.i64[0] = __PAIR64__(DWORD2(a28), a28);
      v132.i64[0] = 0x200000002;
      v132.i64[1] = 0x200000002;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(v131, v132))) & 1) == 0 && DWORD1(a28) != 2)
      {
        v133.i64[0] = __PAIR64__(DWORD2(a28), a28);
        v133.i64[1] = *(void *)((char *)&a28 + 12);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v133, v133))) & 1) == 0 && !DWORD1(a28))
        {
          GlCustomLog(15, "GlPeGnssSvsInfoMgr: Health info is not available for NavIC SV %d\n", BYTE4(a17));
          BYTE4(a29) = 0;
LABEL_110:
          BYTE12(a29) = 0;
          uint64_t v135 = *(void *)(a1 + 64);
          uint64_t v136 = *(void *)(v135 + 92368);
          double v178 = 0.0;
          if (v136 && *(unsigned char *)(v136 + 4048) && *(double *)(v136 + 6952) < 40000.0)
          {
            LODWORD(__srca) = 0;
            int v137 = 0;
            double v138 = 0.0;
            if (BlueFin::GlPeGnssSvsInfoMgr::getSvAzEl(v136, *a2, *((unsigned char *)a2 + 4), (float *)&__srca, (float *)&a41)&& *(float *)&__srca > 0.0)
            {
              BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 32) + 119744), (unsigned int *)a2, (unsigned char *)&v181 + 7);
              uint64_t v139 = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v135 + 17416) + 112))(v135 + 17416, (char *)&v181 + 7);
              if (v139)
              {
                if (*(_DWORD *)v139) {
                  float v140 = (float)(*(float *)(v139 + 20)
                }
                               * (float)(*(_DWORD *)(*(void *)(a1 + 40) + 2568) - *(_DWORD *)v139))
                       * 0.001;
                else {
                  float v140 = 0.0;
                }
                int v137 = *(_DWORD *)(v139 + 4);
                if (v137)
                {
                  double v178 = (float)(v140 + *(float *)(v139 + 16));
                  if (*(unsigned char *)(v139 + 9))
                  {
                    double v138 = *(float *)(v139 + 12);
                    char v141 = 1;
                  }
                  else
                  {
                    char v141 = 0;
                  }
                  goto LABEL_119;
                }
              }
              else
              {
                int v137 = 0;
              }
              char v141 = 0;
              double v178 = 0.0;
            }
            else
            {
              double v178 = 0.0;
              char v141 = 0;
            }
          }
          else
          {
            int v137 = 0;
            char v141 = 0;
            double v138 = 0.0;
          }
LABEL_119:
          uint64_t v142 = *a2;
          if (v142 > 6) {
            int v143 = 0;
          }
          else {
            int v143 = dword_263BBD394[v142];
          }
          *((_DWORD *)&a30 + 10 * BYTE12(a29)) = v143;
          BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 32) + 119744), (unsigned int *)a2, (unsigned char *)&v181 + 7);
          uint64_t v144 = HIBYTE(v181);
          LOBYTE(__srca) = HIBYTE(v181);
          DWORD1(__srca) = 0;
          WORD4(__srca) = 575;
          unsigned __int8 v145 = HIBYTE(v181) + 67;
          if ((HIBYTE(v181) + 67) >= 0x44u)
          {
            uint64_t v146 = BlueFin::GlSvId::s_aucSvId2gnss[HIBYTE(v181)];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v146] == 255) {
              DWORD1(__srca) = -1;
            }
            else {
              WORD4(__srca) = BlueFin::GlSignalId::s_ausGnss2signalId[v146]
            }
                            + HIBYTE(v181)
                            - BlueFin::GlSvId::s_aucGnss2minSvId[v146];
          }
          float FullSatHwBiasM = BlueFin::GlPeGnssHwBiasMgr::GetFullSatHwBiasM(*(BlueFin::GlPeGnssHwBiasMgr **)(a1 + 88), (const BlueFin::GlSignalId *)&__srca);
          unsigned int v148 = BYTE12(a29);
          v149.f64[0] = v178;
          v149.f64[1] = FullSatHwBiasM;
          double v150 = (char *)&a17 + 40 * BYTE12(a29);
          float64x2_t v151 = vmulq_f64(vdivq_f64(v149, (float64x2_t)xmmword_263BB3450), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
          *(float64x2_t *)(v150 + 232) = v151;
          double v152 = (double *)(v150 + 232);
          if (*((_DWORD *)v152 - 6) == 5) {
            double *v152 = 1.0184 * v151.f64[0];
          }
          double v153 = v138 / 299792458.0 * 1000000000.0;
          unsigned int v154 = (double *)&a17 + 5 * v148;
          v154[28] = v153;
          *((unsigned char *)v154 + 212) = v141;
          unsigned int v155 = v137 - 2;
          if ((v137 - 2) > 8) {
            int v156 = 0;
          }
          else {
            int v156 = dword_263BBD3C8[v155];
          }
          *((_DWORD *)&a30 + 10 * v148 + 2) = v156;
          unsigned __int8 v157 = v148 + 1;
          BYTE12(a29) = v148 + 1;
          uint64_t v158 = *(void *)(a1 + 72);
          if (*(unsigned char *)(v158 + 26286))
          {
            if ((v144 - 76) <= 0x3E && *(int *)(v158 + 88) >= 37)
            {
              float64_t v175 = v151.f64[0];
              if (BlueFin::GlSettingsImpl::DoesSvSupportBand5(v158, (unsigned __int8 *)&v181 + 7))
              {
                *((_DWORD *)&a30 + 10 * v157) = 11;
                LOBYTE(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v144;
                HIDWORD(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 3;
                LOWORD(a42) = 575;
                if (v145 >= 0x44u)
                {
                  uint64_t v159 = BlueFin::GlSvId::s_aucSvId2gnss[v144];
                  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v159 + 21] == 255) {
                    HIDWORD(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
                  }
                  else {
                    LOWORD(a42) = BlueFin::GlSignalId::s_ausGnss2signalId[v159]
                  }
                                + v144
                                - BlueFin::GlSvId::s_aucGnss2minSvId[v159]
                                + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v159];
                }
                float v160 = BlueFin::GlPeGnssHwBiasMgr::GetFullSatHwBiasM(*(BlueFin::GlPeGnssHwBiasMgr **)(a1 + 88), (const BlueFin::GlSignalId *)&a41);
                unsigned int v161 = BYTE12(a29);
                double v162 = (float64_t *)&a17 + 5 * BYTE12(a29);
                v162[29] = v175;
                v162[30] = v160 / -299792458.0 * 1000000000.0;
                v162[28] = v153;
                *((unsigned char *)v162 + 212) = v141;
                if (v155 > 8) {
                  int v163 = 0;
                }
                else {
                  int v163 = dword_263BBD3C8[v155];
                }
                *((_DWORD *)&a30 + 10 * v161 + 2) = v163;
                unsigned __int8 v157 = v161 + 1;
                BYTE12(a29) = v161 + 1;
                uint64_t v158 = *(void *)(a1 + 72);
              }
            }
          }
          if (BlueFin::GlSettingsImpl::DoesSvSupportBand5(v158, (unsigned __int8 *)&v181 + 7))
          {
            uint64_t v164 = *a2;
            if (v164 > 5) {
              int v165 = 0;
            }
            else {
              int v165 = dword_263BBD3B0[v164];
            }
            *((_DWORD *)&a30 + 10 * v157) = v165;
            LOBYTE(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v144;
            HIDWORD(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 2;
            LOWORD(a42) = 575;
            if (v145 >= 0x44u)
            {
              uint64_t v166 = BlueFin::GlSvId::s_aucSvId2gnss[v144];
              if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v166 + 14] == 255) {
                HIDWORD(a4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
              }
              else {
                LOWORD(a42) = BlueFin::GlSignalId::s_ausGnss2signalId[v166]
              }
                            + v144
                            - BlueFin::GlSvId::s_aucGnss2minSvId[v166]
                            + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v166];
            }
            float v167 = BlueFin::GlPeGnssHwBiasMgr::GetFullSatHwBiasM(*(BlueFin::GlPeGnssHwBiasMgr **)(a1 + 88), (const BlueFin::GlSignalId *)&a41);
            unsigned int v168 = BYTE12(a29);
            v169.f64[0] = v178 * 1.7933;
            double v170 = (char *)&a17 + 40 * BYTE12(a29);
            v169.f64[1] = v167;
            *(float64x2_t *)(v170 + 232) = vmulq_f64(vdivq_f64(v169, (float64x2_t)xmmword_263BB3450), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
            *((double *)v170 + 28) = v153;
            v170[212] = v141;
            if (v155 > 8) {
              int v171 = 0;
            }
            else {
              int v171 = dword_263BBD3C8[v155];
            }
            *((_DWORD *)&a30 + 10 * v168 + 2) = v171;
            BYTE12(a29) = v168 + 1;
          }
          if (v179 <= 9)
          {
            int v172 = BlueFin::GlPeGnssSvsInfoMgr::getIndex((unsigned int *)a1, BlueFin::GlImplGnss::m_aucImplGnssTable[a17], BYTE4(a17));
            unsigned __int16 v173 = v172;
            if ((v172 & 0x80000000) == 0)
            {
              memcpy((void *)(*v56 + 368 * (unsigned __int16)v172), &a17, 0x170uLL);
              uint64_t result = 1;
              uint64_t v174 = *(void *)(*(void *)(a1 + 66768) + 56 * v179);
              *(_DWORD *)(v174 + 4 * (v173 >> 5)) |= 1 << v173;
              return result;
            }
          }
          goto LABEL_15;
        }
        int v134 = 1;
        BYTE4(a29) = 1;
LABEL_109:
        DWORD2(a29) = v134;
        goto LABEL_110;
      }
      BYTE4(a29) = 1;
    }
    else
    {
      if (!GnssSvL5Health) {
        goto LABEL_110;
      }
      if (LOBYTE(a44))
      {
        int v134 = 1;
        goto LABEL_109;
      }
    }
    int v134 = 2;
    goto LABEL_109;
  }
  return result;
}

BlueFin::GlGnssIdSet *BlueFin::GlGnssIdSet::GlGnssIdSet(BlueFin::GlGnssIdSet *this, char a2, char a3)
{
  *(void *)((char *)this + 12) = 0;
  *(void *)this = (char *)this + 12;
  *((unsigned char *)this + 8) = 2;
  if (a3)
  {
    DeviceFaultNotify("glgnss.cpp", 60, "GlGnssIdSet", (char)"(ulWord0 & 0x1) == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 60, "(ulWord0 & 0x1) == 0");
  }
  BlueFin::GlSetBase::SetULong((uint64_t)this, 0, a3);
  BlueFin::GlSetBase::SetULong((uint64_t)this, 1u, a2);
  return this;
}

uint64_t BlueFin::GlSvIdSet::operator~@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, (unsigned int *)(a2 + 12), 8u, a1);
  int v11 = &v13;
  char v12 = 8;
  long long v13 = 0u;
  long long v14 = 0u;
  BlueFin::GlSetBase::OperatorBinaryInversion(a2, (int **)&v11);
  uint64_t v3 = (BlueFin::GlSetBase *)BlueFin::GlSetBase::operator=(a2, (uint64_t)&v11);
  *(_OWORD *)(a2 + 12) = v13;
  *(_OWORD *)(a2 + 28) = v14;
  int ULong = BlueFin::GlSetBase::GetULong(v3, 0);
  uint64_t result = BlueFin::GlSetBase::SetULong(a2, 0, ULong & 0xFFFFFFFE);
  unsigned int v6 = (unsigned __int16)(32 * (*(unsigned char *)(a2 + 8) & 0x3F) - 1);
  if (v6 >= 0xBE)
  {
    unsigned int v7 = 189;
    char v8 = -67;
    do
    {
      __int16 v9 = v8 & 0x1F;
      if ((v8 & 0x1F) != 0)
      {
        int v10 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)a2, (v7 >> 5));
        uint64_t result = BlueFin::GlSetBase::SetULong(a2, (v7 >> 5), v10 & ~(-1 << v9));
        LOWORD(v7) = v7 - v9;
      }
      else
      {
        uint64_t result = BlueFin::GlSetBase::SetULong(a2, (v7 >> 5), 0);
      }
      char v8 = v7 + 32;
      unsigned int v7 = (unsigned __int16)(v7 + 32);
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t BlueFin::GlSetBase::SetULong(uint64_t this, unsigned int a2, int a3)
{
  if (*(unsigned __int8 *)(this + 8) <= a2)
  {
    DeviceFaultNotify("glutl_set.cpp", 246, "SetULong", (char)"ucIndex < m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 246, "ucIndex < m_ucUlongSize");
  }
  *(_DWORD *)(*(void *)this + 4 * a2) = a3;
  return this;
}

uint64_t BlueFin::GlSetBase::GetULong(BlueFin::GlSetBase *this, unsigned int a2)
{
  if (*((unsigned __int8 *)this + 8) <= a2)
  {
    DeviceFaultNotify("glutl_set.cpp", 239, "GetULong", (char)"ucIndex < m_ucUlongSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 239, "ucIndex < m_ucUlongSize");
  }
  return *(unsigned int *)(*(void *)this + 4 * a2);
}

uint64_t BlueFin::GlPeGnssSvsInfoMgr::removeSvInfo(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t result = BlueFin::GlPeGnssSvsInfoMgr::getIndex((unsigned int *)a1, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(*(void *)(a1 + 66192) + 368 * (unsigned __int16)result) = 8;
    uint64_t v6 = *(void *)(a1 + 66768);
    while (((1 << (result & 0x1F)) & *(unsigned int *)(*(void *)(v6 + v5) + 4 * ((unsigned __int16)result >> 5))) == 0)
    {
      v5 += 56;
      if (v5 == 560) {
        return result;
      }
    }
    return BlueFin::GlSetBase::Remove(v6 + v5, result);
  }
  return result;
}

uint64_t BlueFin::GlPeGnssSvsInfoMgr::getIndex(unsigned int *a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[a2];
  if (((unint64_t)*a1 >> v3))
  {
    if (a2 > 6 || !a3 || ((0xE243F0A181320uLL >> (8 * a2)) & 0x3F) < a3)
    {
      DeviceFaultNotify("glpe_reqhdlr_gnss_meas_svsinfo.cpp", 673, "getIndex", (char)"(rotGnss.eGnss < NUM_GNSS) && (ucGnssId >= MIN_GNSS_ID && ucGnssId <= GlGnssId::MaxGnssId(rotGnss.eGnss))");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_svsinfo.cpp", 673, "(rotGnss.eGnss < NUM_GNSS) && (ucGnssId >= MIN_GNSS_ID && ucGnssId <= GlGnssId::MaxGnssId(rotGnss.eGnss))");
    }
    int v4 = a1[BlueFin::GlPeGnssSvsInfoMgr::m_aeImplGnss2Supported[v3] + 1] + a3 - 1;
  }
  else
  {
    LOWORD(v4) = -1;
  }
  return (__int16)v4;
}

uint64_t BlueFin::GlPeGnssSvsInfoMgr::getSvPosToa(int a1, BlueFin::GlPeGnssTime *this, double *a3, double *a4)
{
  uint64_t result = 0;
  switch(BlueFin::GlImplGnss::m_aucEnabledGnssTable[a1])
  {
    case 0:
    case 3:
      uint64_t v27 = 0;
      long long v26 = &off_270EBC600;
      BlueFin::GlPeGnssTime::GetGps(this, (BlueFin::GlGpsTime *)&v26);
      unsigned int v9 = ((uint64_t (*)(void))v26[4])(&v26);
      LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v27;
      *a3 = (double)v10 * 2.32830644e-10 + (double)v9;
      uint64_t v27 = 0;
      long long v26 = &off_270EBC600;
      BlueFin::GlPeGnssTime::GetGps(this, (BlueFin::GlGpsTime *)&v26);
      goto LABEL_11;
    case 2:
      uint64_t v27 = 0;
      long long v26 = &off_270EBF4E8;
      BlueFin::GlPeGnssTime::GetGlns(this, (BlueFin::GlGlnsTime *)&v26);
      unsigned int v11 = ((uint64_t (*)(void))v26[4])(&v26);
      LODWORD(v12) = v27;
      *a3 = (double)v12 * 2.32830644e-10 + (double)v11;
      uint64_t v27 = 0;
      long long v26 = &off_270EBF4E8;
      BlueFin::GlPeGnssTime::GetGlns(this, (BlueFin::GlGlnsTime *)&v26);
      BOOL v13 = 0;
      if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
      {
        BOOL v13 = HIDWORD(v27) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      }
      unsigned int v14 = ((uint64_t (*)(void))v26[4])(&v26);
      if (v13) {
        double v16 = 10799.0;
      }
      else {
        double v16 = (double)(v14 % 0x15180);
      }
      LODWORD(v15) = v27;
      double v25 = v16 + (double)v15 * 2.32830644e-10;
      goto LABEL_12;
    case 5:
      uint64_t v27 = 0;
      long long v26 = &off_270EBF588;
      BlueFin::GlPeGnssTime::GetBds(this, (BlueFin::GlBdsTime *)&v26);
      unsigned int v19 = ((uint64_t (*)(void))v26[4])(&v26);
      LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v27;
      *a3 = (double)v20 * 2.32830644e-10 + (double)v19;
      uint64_t v27 = 0;
      long long v26 = &off_270EBF588;
      BlueFin::GlPeGnssTime::GetBds(this, (BlueFin::GlBdsTime *)&v26);
      goto LABEL_11;
    case 6:
      uint64_t v27 = 0;
      long long v26 = &off_270EBF538;
      BlueFin::GlPeGnssTime::GetGal(this, (BlueFin::GlGalTime *)&v26);
      unsigned int v21 = ((uint64_t (*)(void))v26[4])(&v26);
      LODWORD(v22) = v27;
      *a3 = (double)v22 * 2.32830644e-10 + (double)v21;
      uint64_t v27 = 0;
      long long v26 = &off_270EBF538;
      BlueFin::GlPeGnssTime::GetGal(this, (BlueFin::GlGalTime *)&v26);
      goto LABEL_11;
    case 7:
      uint64_t v27 = 0;
      long long v26 = &off_270EBF080;
      BlueFin::GlPeGnssTime::GetNic(this, (BlueFin::GlNicTime *)&v26);
      unsigned int v17 = ((uint64_t (*)(void))v26[4])(&v26);
      LODWORD(v18) = v27;
      *a3 = (double)v18 * 2.32830644e-10 + (double)v17;
      uint64_t v27 = 0;
      long long v26 = &off_270EBF080;
      BlueFin::GlPeGnssTime::GetNic(this, (BlueFin::GlNicTime *)&v26);
LABEL_11:
      unsigned int v23 = ((uint64_t (*)(void))v26[4])(&v26);
      LODWORD(v24) = v27;
      double v25 = (double)v24 * 2.32830644e-10 + (double)(v23 % 0x93A80);
LABEL_12:
      *a4 = v25;
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::StopSat(BlueFin::GlMeSrdSearchMgrBase *this, unsigned int a2)
{
  BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), a2, &v6);
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 10)
                                           + (((unint64_t)v6 >> 3) & 0x1C)) >> (v6 & 0x1F)) & 1) == 0
    || (((unint64_t)*(unsigned int *)(*((void *)this + 16) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 523, "StopSat", (char)"m_otSetSvidInUse.Has(otSvid) && m_otSetSatIdInUse.Has(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 523, "m_otSetSvidInUse.Has(otSvid) && m_otSetSatIdInUse.Has(ucSatid)");
  }
  BlueFin::GlSetBase::Remove((uint64_t)this + 80, v6);
  BlueFin::GlSetBase::Remove((uint64_t)this + 128, a2);
  BlueFin::GlSetBase::Remove((uint64_t)this + 160, a2);
  BlueFin::GlSetBase::Remove((uint64_t)this + 192, a2);
  BlueFin::GlSetBase::Remove((uint64_t)this + 224, a2);
  int v4 = (BlueFin::GlMeSrdSatMgr *)*((void *)this + 2);

  return BlueFin::GlMeSrdSatMgr::KillSat(v4, a2);
}

uint64_t BlueFin::GlSatCarrIdSet::RemoveAllCarr(BlueFin::GlSatCarrIdSet *this, unsigned int a2)
{
  for (int i = 0; i != 4; ++i)
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v6, a2, i);
    uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)this, (__int16)(v6[0] + 100 * v6[4]));
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::KillSat(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  uint64_t v3 = 1 << (a2 & 0x1F);
  uint64_t v4 = *(unsigned int *)(*((void *)this + 11) + 4 * v2);
  if ((v3 & (*(_DWORD *)(*((void *)this + 15) + 4 * v2) | v4)) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 820, "KillSat", (char)"IsSatAllocated(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 820, "IsSatAllocated(ucSatid)");
  }
  BOOL v7 = (v3 & v4) == 0;
  uint64_t v8 = 56;
  if (v7)
  {
    uint64_t v8 = 152;
    unsigned int v9 = (char *)this + 120;
  }
  else
  {
    unsigned int v9 = (char *)this + 88;
  }
  *(_DWORD *)(*(void *)((char *)this + v8) + 4 * v2) |= 1 << (a2 & 0x1F);
  BlueFin::GlSetBase::Remove((uint64_t)v9, a2);
  *((unsigned char *)this + 49) -= *(unsigned char *)(*((void *)this + 786) + 52 * a2 + 5);
  BlueFin::GlSetBase::Remove((uint64_t)this + 360, a2);

  return BlueFin::GlSatCarrIdSet::RemoveAllCarr((BlueFin::GlMeSrdSatMgr *)((char *)this + 280), a2);
}

float BlueFin::GlPeGloEphemeris::GetAccuracyM(BlueFin::GlPeGloEphemeris *this)
{
  return flt_263BB48D0[(*(unsigned int (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 26)];
}

uint64_t BlueFin::GlMeSrdAidingMgr::PackSvIdAiding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v39[0] = &unk_270EBF258;
  v39[1] = 0;
  v39[2] = 0x36A7C5AC00000000;
  v39[3] = 0;
  int v40 = 2139095039;
  uint64_t v41 = 0;
  int v42 = 2139095039;
  uint64_t v43 = 0;
  HIDWORD(v6) = 916964780;
  uint64_t v44 = 0x36A7C5AC7F7FFFFFLL;
  uint64_t v7 = *(void *)a1;
  LODWORD(v6) = *(_DWORD *)(a1 + 24);
  double v8 = (double)v6 + 0.5;
  double v9 = fmod(v8, 4294967300.0);
  if (v8 <= 4294967300.0) {
    double v9 = v8;
  }
  __n128 v10 = ((__n128 (*)(uint64_t, void *, void))*(void *)(*(void *)v7 + 96))(v7, v39, v9);
  int v38 = 0;
  uint64_t v11 = *(void *)a1;
  v10.n128_u32[0] = *(_DWORD *)(a1 + 24);
  double v12 = (double)v10.n128_u64[0] + 0.5;
  double v13 = fmod(v12, 4294967300.0);
  if (v12 <= 4294967300.0) {
    double v13 = v12;
  }
  char v14 = (*(uint64_t (**)(uint64_t, void, int *))(*(void *)v11 + 16))(v11, v13, &v38);
  unsigned __int8 v33 = *(unsigned char *)(a1 + 1192);
  memcpy(v37, *(const void **)(a1 + 1184), 4 * v33);
  __int16 v35 = 0;
  unsigned __int8 v34 = 0;
  int v36 = v37[0];
  BlueFin::GlSetIterator::operator++(&v33);
  uint64_t v15 = 0;
  if (v34 != v33)
  {
    LODWORD(v15) = 0;
    while (1)
    {
      char v16 = v35;
      uint64_t v17 = v35;
      BlueFin::GlSetBase::Remove(a1 + 1184, v35);
      char v32 = v14;
      if ((v16 - 52) <= 0xDu) {
        break;
      }
      v29[0] = v17;
      int v30 = 0;
      __int16 v31 = 575;
      if ((v17 + 67) >= 0x44u) {
        goto LABEL_11;
      }
      char v18 = 1;
LABEL_14:
      int AidIdAndAiding = BlueFin::GlMeSrdAidingMgr::GetAidIdAndAiding(a1, v29, (unsigned char *)(a2 + v15), a3 + 36 * v15, (uint64_t)v39, (uint64_t)&v32);
      v29[0] = v17;
      int v30 = 1;
      __int16 v31 = 575;
      if ((v18 & 1) == 0)
      {
        uint64_t v21 = BlueFin::GlSvId::s_aucSvId2gnss[v17];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v21 + 7] == 255) {
          int v30 = -1;
        }
        else {
          __int16 v31 = BlueFin::GlSignalId::s_ausGnss2signalId[v21]
        }
              + v17
              + BlueFin::GlSvId::s_aucGnss2numSvId[v21]
              - BlueFin::GlSvId::s_aucGnss2minSvId[v21];
      }
      unsigned int v22 = v15 + AidIdAndAiding;
      int v23 = BlueFin::GlMeSrdAidingMgr::GetAidIdAndAiding(a1, v29, (unsigned char *)(a2 + v22), a3 + 36 * v22, (uint64_t)v39, (uint64_t)&v32);
      v29[0] = v17;
      int v30 = 2;
      __int16 v31 = 575;
      if ((v18 & 1) == 0)
      {
        uint64_t v24 = BlueFin::GlSvId::s_aucSvId2gnss[v17];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v24 + 14] == 255) {
          int v30 = -1;
        }
        else {
          __int16 v31 = BlueFin::GlSignalId::s_ausGnss2signalId[v24]
        }
              + v17
              - BlueFin::GlSvId::s_aucGnss2minSvId[v24]
              + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v24];
      }
      unsigned int v25 = v22 + v23;
      int v26 = BlueFin::GlMeSrdAidingMgr::GetAidIdAndAiding(a1, v29, (unsigned char *)(a2 + v25), a3 + 36 * v25, (uint64_t)v39, (uint64_t)&v32);
      v29[0] = v17;
      int v30 = 3;
      __int16 v31 = 575;
      if ((v18 & 1) == 0)
      {
        uint64_t v27 = BlueFin::GlSvId::s_aucSvId2gnss[v17];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v27 + 21] == 255) {
          int v30 = -1;
        }
        else {
          __int16 v31 = BlueFin::GlSignalId::s_ausGnss2signalId[v27]
        }
              + v17
              - BlueFin::GlSvId::s_aucGnss2minSvId[v27]
              + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v27];
      }
      uint64_t v15 = v25
          + v26
          + BlueFin::GlMeSrdAidingMgr::GetAidIdAndAiding(a1, v29, (unsigned char *)(a2 + v25 + v26), a3 + 36 * (v25 + v26), (uint64_t)v39, (uint64_t)&v32);
      BlueFin::GlSetIterator::operator++(&v33);
      if (v34 == v33) {
        return v15;
      }
    }
    char v32 = v14 & ((v38 & 0x80) >> 7);
    v29[0] = v17;
    int v30 = 0;
    __int16 v31 = 575;
LABEL_11:
    uint64_t v19 = BlueFin::GlSvId::s_aucSvId2gnss[v17];
    char v18 = 0;
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v19] == 255) {
      int v30 = -1;
    }
    else {
      __int16 v31 = BlueFin::GlSignalId::s_ausGnss2signalId[v19]
    }
          + v17
          - BlueFin::GlSvId::s_aucGnss2minSvId[v19];
    goto LABEL_14;
  }
  return v15;
}

uint64_t BlueFin::GlMeSrdAidingMgr::GetAidIdAndAiding(uint64_t a1, unsigned __int8 *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*((unsigned __int16 *)a2 + 4) > 0x23Eu) {
    return 0;
  }
  switch(*((_DWORD *)a2 + 1))
  {
    case 0:
      unint64_t v10 = *a2;
      uint64_t v11 = *(void *)(a1 + 832);
      goto LABEL_6;
    case 1:
      unint64_t v10 = *a2;
      uint64_t v11 = *(void *)(a1 + 880);
      goto LABEL_6;
    case 2:
      unint64_t v10 = *a2;
      uint64_t v11 = *(void *)(a1 + 928);
LABEL_6:
      if (((*(unsigned int *)(v11 + ((v10 >> 3) & 0x1C)) >> (v10 & 0x1F)) & 1) == 0) {
        return 0;
      }
      goto LABEL_10;
    case 3:
      unint64_t v13 = *a2;
      unint64_t v14 = v13 >> 5;
      uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 976) + 4 * (v13 >> 5));
      uint64_t v16 = 1 << (v13 & 0x1F);
      if ((v16 & v15) == 0 && (v16 & *(_DWORD *)(*(void *)(a1 + 1024) + 4 * v14)) == 0) {
        return 0;
      }
      goto LABEL_10;
    default:
LABEL_10:
      uint64_t v21 = &off_270EBF450;
      char v22 = 0;
      int v23 = -1;
      __int16 v24 = 575;
      uint64_t v25 = 0;
      int v26 = 0;
      long long v27 = xmmword_263BABE60;
      float v28 = 3.4028e38;
      uint64_t v29 = 0;
      int v30 = 2139095039;
      __int16 v31 = 0;
      uint64_t v32 = 0x7FEFFFFFFFFFFFFFLL;
      int v33 = -1;
      __int16 v34 = -1;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      unsigned int v17 = *(_DWORD *)(a1 + 24);
      int v38 = 0;
      int AcqWindow = BlueFin::GlMeSrdAidingMgr::GetAcqWindow((void *)a1, (uint64_t)&v21, a2, a5, a6, (double)v17);
      if ((v26 & 4) != 0 || *((float *)&v27 + 2) < 0.000001 || (uint64_t result = 0, v28 < 0.000001))
      {
        if (*a2 - 52 > 0xD
          || (BlueFin::GlMeSrdAsicUnitConverter::CalcPpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)a2, *((float *)&v27 + 1), v18), uint64_t result = 0, v20 > -32768.0)&& v20 < 32767.0)
        {
          LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a1 + 24);
          BlueFin::GlMeSrdAidingMgr::FormatAidingForEsw(a1, a4, (uint64_t)&v21, AcqWindow, (int *)a2, (double)*(unint64_t *)&v20);
          *a3 = BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId((BlueFin::GlMeSrdAidingMgr *)a1, (const BlueFin::GlSignalId *)a2);
          *(_DWORD *)(a1 + 4 * *a2 + 28) = *(_DWORD *)(a1 + 24);
          uint64_t result = 1;
        }
      }
      break;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId(BlueFin::GlMeSrdAidingMgr *this, const BlueFin::GlSignalId *a2)
{
  char v3 = (char)this;
  uint64_t v4 = (BlueFin::GlMeSrdAidingMgr *)((char *)this + 2632);
  BOOL v5 = BlueFin::GlBigArray::Has((BlueFin::GlMeSrdAidingMgr *)((char *)this + 2632), *((unsigned __int16 *)a2 + 4));
  unint64_t v6 = (BlueFin::GlMeSrdAidingMgr *)BlueFin::GlBigArray::Add(v4, *((unsigned __int16 *)a2 + 4));
  if (!v6)
  {
    DeviceFaultNotify("glmesrd_aiding_mgr.cpp", 95, "GetAidIdFromSignalId", (char)"nullptr != pAidId");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_aiding_mgr.cpp", 95, "nullptr != pAidId");
  }
  uint64_t v7 = v6;
  unsigned __int8 v8 = v3 - (_BYTE)v6 + 58;
  *(unsigned char *)unint64_t v6 = v8;
  if (!v5 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    BlueFin::GlMeSrdAidingMgr::LogMappingChange(v6, 1, a2);
    return *(unsigned __int8 *)v7;
  }
  return v8;
}

void *BlueFin::GlBigArray::Add(BlueFin::GlBigArray *this, int a2)
{
  unsigned int v2 = a2 - *((unsigned __int16 *)this + 14);
  if (v2 >= *((unsigned __int16 *)this + 15))
  {
    double v12 = "handle - m_usMinHandle < m_usNumHandles";
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    unint64_t v13 = "glinc_array.h";
    int v14 = 313;
    goto LABEL_14;
  }
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = (unsigned __int16)(a2 - *((_WORD *)this + 14));
  unsigned int v5 = *(unsigned __int16 *)(v3 + 2 * v4);
  if (v5 != 0xFFFF)
  {
    if (*((unsigned __int16 *)this + 16) > v5) {
      return (void *)(*(void *)this + *((_DWORD *)this + 6) * v5);
    }
    goto LABEL_12;
  }
  uint64_t v6 = *((unsigned __int16 *)this + 17);
  if (v6 != 0xFFFF)
  {
    if (v6 >= *((unsigned __int16 *)this + 16))
    {
      double v12 = "m_usStackTop < m_usNumSlots";
      DeviceFaultNotify("glutl_array.cpp", 223, "Add", (char)"m_usStackTop < m_usNumSlots");
      unint64_t v13 = "glutl_array.cpp";
      int v14 = 223;
LABEL_14:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v13, v14, v12);
    }
    uint64_t v8 = *((void *)this + 2);
    *(_WORD *)(v3 + 2 * v4) = *(_WORD *)(v8 + 2 * v6);
    *(_WORD *)(v8 + 2 * (unsigned __int16)(*((_WORD *)this + 17))--) = v2;
    unsigned int v9 = *(unsigned __int16 *)(v3 + 2 * v4);
    if (*((unsigned __int16 *)this + 16) > v9)
    {
      size_t v10 = *((unsigned int *)this + 6);
      uint64_t v7 = (void *)(*(void *)this + v10 * v9);
      bzero(v7, v10);
      return v7;
    }
LABEL_12:
    double v12 = "slot < m_usNumSlots";
    DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
    unint64_t v13 = "glinc_array.h";
    int v14 = 319;
    goto LABEL_14;
  }
  return 0;
}

void BlueFin::GlMeSrdAidingMgr::FormatAidingForEsw(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, double a6)
{
  double v11 = a6 + 0.5;
  double v13 = fmod(a6 + 0.5, 4294967300.0);
  if (v11 <= 4294967300.0) {
    double v13 = v11;
  }
  if (v13 < -4294967300.0) {
    double v13 = -fmod(-v13, 4294967300.0);
  }
  if (v13 < 0.0) {
    unsigned int v14 = --v13;
  }
  else {
    unsigned int v14 = v13;
  }
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_WORD *)(a2 + 12) = v14;
  *(unsigned char *)(a2 + 14) = 5;
  *(_WORD *)a2 = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)a5, *(float *)(a3 + 40), v12);
  *(_WORD *)(a2 + 2) = BlueFin::GlMeSrdAsicUnitConverter::PpuPerSecToEswAidingAcceleration((BlueFin::GlMeSrdAsicUnitConverter *)a5, *(float *)(a3 + 48), v15);
  __int16 v16 = vcvts_n_s32_f32(*(float *)(a3 + 92), 0xFuLL);
  *(_WORD *)(a2 + 18) = vcvts_n_s32_f32(*(float *)(a3 + 88), 0xFuLL);
  *(_WORD *)(a2 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v16;
  *(_WORD *)(a2 + 22) = vcvts_n_s32_f32(*(float *)(a3 + 96), 0xFuLL);
  if (a4)
  {
    *(unsigned char *)(a2 + 14) |= 0xAu;
    float32x2_t v17 = *(float32x2_t *)(a3 + 100);
    v17.i32[1] = *(_DWORD *)(a3 + 112);
    int32x2_t v18 = vcvt_s32_f32(vmul_f32(v17, (float32x2_t)vdup_n_s32(0x526E6B28u)));
  }
  else
  {
    int32x2_t v18 = 0;
  }
  *(int32x2_t *)(a2 + 28) = v18;
  *(_WORD *)(a2 + 24) = 0;
  int v19 = a5[1];
  int v20 = *(unsigned __int8 *)a5;
  if (v19 > 0 || (BOOL v21 = 0, !v19) && (v20 + 117) <= 0x23u) {
    BOOL v21 = (*(_DWORD *)(a3 + 104) - 1) < 2;
  }
  *(unsigned char *)(a2 + 17) = v21;
  if (((v20 - 76) > 0x3E || ((1 << (v20 - 76)) & 0x7C0000000000001FLL) == 0)
    && (v20 - 33) >= 0x13)
  {
    if ((*(_DWORD *)(a3 + 104) & 0xFFFFFFFE) == 4) {
      char v82 = 3;
    }
    else {
      char v82 = v21;
    }
    *(unsigned char *)(a2 + 17) = v82;
  }
  if (*(float *)(a3 + 64) < 0.005)
  {
    float v22 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), a3 + 8);
    double v23 = *(double *)(a3 + 56);
    double InterSignalBiasInMs = BlueFin::GlSignalId::GetInterSignalBiasInMs((unsigned __int8 *)a5, *(void *)(a1 + 16));
    unsigned int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)a5);
    (*(void (**)(void))(**(void **)(a1 + 16) + 848))();
    if (*((unsigned __int16 *)a5 + 4) < 0x23Fu)
    {
      uint64_t v27 = a5[1];
      uint64_t v28 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5];
      uint64_t v29 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v27 - v27];
      int v30 = v29[v28];
      if (!v29[v28])
      {
LABEL_124:
        uint64_t v41 = "ucMsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
        int v42 = 685;
        goto LABEL_125;
      }
      unsigned int v31 = BlueFin::GlSignalId::s_ausSignalIndexAndGnss2symbolsPerSecFrame[7 * (int)v27 + v28];
      if (!v31)
      {
        uint64_t v41 = "usSymbolsPerSecFrame != 0";
        DeviceFaultNotify("glsignalid.h", 770, "GetSymbolsPerSecFrame", (char)"usSymbolsPerSecFrame != 0");
        int v42 = 770;
        goto LABEL_125;
      }
      double v32 = v26;
      unsigned int v91 = v31;
      float v33 = *(float *)(a3 + 40);
      v92[0] = 1;
      int v93 = 0;
      unsigned __int16 v94 = 0;
      int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v92);
      if (v94 <= 0x23Eu)
      {
        int v35 = EpochPerBit;
        long double v36 = fmod(v32 * (double)v14 / 299792458.0, (float)((float)(1.0 - v33) * (float)(v30 * EpochPerSymbol)));
        unsigned int v37 = 0;
        double v38 = (double)v14 + (v23 + v22 + InterSignalBiasInMs * 0.001) * -1000.0 + v36;
        while (1)
        {
          uint64_t v39 = BlueFin::GlSvId::s_aucSvId2gnss[v92[0]];
          int v40 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v93];
          if (!v40[8 * v93 + v39]) {
            goto LABEL_124;
          }
          if (v37 > v40[8 * v93 + v39] * v35 || v38 >= 0.0) {
            break;
          }
          if (*((unsigned __int16 *)a5 + 4) >= 0x23Fu) {
            goto LABEL_29;
          }
          if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * a5[1]
                                                                      - a5[1]
                                                                      + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]])
            goto LABEL_124;
          double v38 = v38
              + (float)((float)(1.0 - *(float *)(a3 + 40))
                      * (float)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * a5[1] - a5[1] + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]]
                              * EpochPerSymbol));
          int v35 = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v92);
          ++v37;
          if (v94 >= 0x23Fu) {
            goto LABEL_29;
          }
        }
        double v43 = v38 * (float)(*(float *)(a3 + 40) + 1.0);
        if (v43 < 0.0)
        {
          BlueFin::GlSignalId::GetMsPerEpoch((BlueFin::GlSignalId *)a5);
          BlueFin::GlSignalId::GetInterSignalBiasInSec((unsigned __int8 *)a5, *(void *)(a1 + 16));
          DeviceFaultNotify("glmesrd_aiding_mgr.cpp", 746, "FormatAidingForEsw", (char)"TestChanTimeOffsetAssert");
          CrashData();
          DeviceFaultNotify("glmesrd_aiding_mgr.cpp", 751, "FormatAidingForEsw", (char)"dChannelTimeToaOffsetMs >= 0.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_aiding_mgr.cpp", 751, "dChannelTimeToaOffsetMs >= 0.0");
        }
        if (*((unsigned __int16 *)a5 + 4) >= 0x23Fu)
        {
          uint64_t v41 = "IsValid()";
          DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
          int v42 = 806;
        }
        else
        {
          uint64_t v44 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5];
          uint64_t v45 = a5[1];
          unsigned int v46 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v45 + v44];
          unsigned int v47 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v45 - v45 + v44];
          if (v46) {
            BOOL v48 = v47 == 0;
          }
          else {
            BOOL v48 = 1;
          }
          if (!v48)
          {
            double v49 = (double)(1000 * v46 / v47) / 1000.0;
            unsigned int v50 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 320))(*(void *)(a1 + 16));
            double v51 = v43 * v49;
            double v52 = (double)v50;
            double v53 = fmod(v43 * v49 * (double)v50, (double)v50);
            double v54 = fmod(v49 * (double)v50 + 0.5, 4294967300.0);
            if (v49 * (double)v50 + 0.5 <= 4294967300.0) {
              double v54 = v49 * v52 + 0.5;
            }
            if (v54 < -4294967300.0) {
              double v54 = -fmod(-v54, 4294967300.0);
            }
            if (v54 < 0.0) {
              unsigned int v55 = --v54;
            }
            else {
              unsigned int v55 = v54;
            }
            double v56 = (double)v55;
            if (v52 - v53 <= 0.5) {
              double v57 = v43 * v56;
            }
            else {
              double v57 = v43 * v56 + 0.5;
            }
            double v58 = fmod(v57, 4294967300.0);
            if (v57 <= 4294967300.0) {
              double v58 = v57;
            }
            if (v58 < -4294967300.0) {
              double v58 = -fmod(-v58, 4294967300.0);
            }
            unsigned int v59 = v58;
            if (v58 < 0.0) {
              unsigned int v59 = --v58;
            }
            unsigned int v60 = v59 / v50;
            *(unsigned char *)(a2 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v59 % v50;
            int v61 = a5[1];
            if (v61 == 1
              && (BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5] == 3
               || !BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5]))
            {
              double v62 = (double)v59 / v52;
              long double v63 = fmod(v62, v49);
              double v64 = fmod(v63, 4294967300.0);
              if (v63 <= 4294967300.0) {
                double v64 = v63;
              }
              *(_WORD *)(a2 + 8) = v64;
              long double v65 = fmod(v62 / v49, 20.0);
              double v66 = fmod(v65, 4294967300.0);
              if (v65 <= 4294967300.0) {
                double v66 = v65;
              }
              *(unsigned char *)(a2 + 6) = v66;
              double v67 = v63 * 256.0 + 0.5;
              double v68 = fmod(v67, 4294967300.0);
              if (v67 <= 4294967300.0) {
                double v68 = v67;
              }
              if (v68 < -4294967300.0) {
                double v68 = -fmod(-v68, 4294967300.0);
              }
              if (v68 < 0.0) {
                unsigned int v69 = --v68;
              }
              else {
                LOBYTE(v69) = v68;
              }
              *(unsigned char *)(a2 + 16) = v69;
              double v70 = v62 / (v49 * 20.0);
              double v71 = fmod(v70, 4294967300.0);
              if (v70 <= 4294967300.0) {
                double v71 = v70;
              }
              if (v71 < -4294967300.0) {
                double v71 = -fmod(-v71, 4294967300.0);
              }
              unsigned int v72 = v91;
              if (v71 < 0.0) {
                signed int v73 = --v71;
              }
              else {
                signed int v73 = v71;
              }
              int v74 = v73 % 75;
            }
            else
            {
              *(_WORD *)(a2 + 8) = v60 % v46;
              unsigned int v75 = v60 / v46 / EpochPerSymbol;
              *(unsigned char *)(a2 + 6) = v60 / v46 % EpochPerSymbol;
              double v76 = fmod(v51 * 256.0 + 0.5, 4294967300.0);
              if (v51 * 256.0 + 0.5 <= 4294967300.0) {
                double v76 = v51 * 256.0 + 0.5;
              }
              if (v76 < -4294967300.0) {
                double v76 = -fmod(-v76, 4294967300.0);
              }
              unsigned int v72 = v91;
              if (v76 < 0.0) {
                unsigned int v77 = --v76;
              }
              else {
                LOBYTE(v77) = v76;
              }
              *(unsigned char *)(a2 + 16) = v77;
              int v74 = v75 % v91;
            }
            *(_WORD *)(a2 + 4) = v74;
            int v78 = *(_DWORD *)(a3 + 32);
            if ((v78 & 0x1A) != 0)
            {
              char v79 = *(unsigned char *)(a2 + 14);
              *(unsigned char *)(a2 + 14) = v79 | 0x40;
              if (BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5] == 3
                || !BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5])
              {
                if (v61 == 1)
                {
                  if ((v78 & 0x800) == 0) {
                    goto LABEL_90;
                  }
                }
                else if (v61 != 2)
                {
                  goto LABEL_90;
                }
                *(unsigned char *)(a2 + 14) = v79 | 0xC0;
              }
            }
LABEL_90:
            if ((v78 & 0x80) != 0)
            {
              char v80 = *(unsigned char *)(a2 + 14);
              __int16 v81 = *(unsigned __int8 *)(a3 + 80);
            }
            else
            {
              char v80 = *(unsigned char *)(a2 + 14);
              if ((v78 & 0x3400) == 0)
              {
                int v83 = a4;
                goto LABEL_119;
              }
              if ((v78 & 0x400) != 0)
              {
                __int16 v81 = *(unsigned __int8 *)(a3 + 81);
              }
              else if ((v78 & 0x1000) != 0)
              {
                __int16 v81 = *(_WORD *)(a3 + 82);
              }
              else
              {
                __int16 v81 = *(_WORD *)(a3 + 84);
              }
            }
            v80 |= 0x80u;
            unsigned __int16 v84 = v81 + v74;
            if (v72 <= v84) {
              __int16 v85 = v72;
            }
            else {
              __int16 v85 = 0;
            }
            unsigned __int16 v86 = v84 - v85;
            if (v37 <= v86) {
              __int16 v87 = 0;
            }
            else {
              __int16 v87 = v72;
            }
            __int16 v88 = v86 - v37 + v87;
            *(_WORD *)(a2 + 4) = v88;
            int v89 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a5];
            if (v89 == 4)
            {
              int v83 = a4;
              if (v61 != 2 || (v78 & 0x1000) == 0)
              {
LABEL_119:
                if (v83) {
                  char v90 = 48;
                }
                else {
                  char v90 = 32;
                }
                *(unsigned char *)(a2 + 14) = v80 | v90;
                return;
              }
            }
            else
            {
              BOOL v48 = v89 == 5;
              int v83 = a4;
              if (!v48 || v61 < 1 || (v78 & 0x400) == 0) {
                goto LABEL_119;
              }
            }
            *(unsigned char *)(a2 + 6) = v88;
            *(_WORD *)(a2 + 4) = 0;
            goto LABEL_119;
          }
          uint64_t v41 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
          DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
          int v42 = 814;
        }
LABEL_125:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v42, v41);
      }
    }
LABEL_29:
    uint64_t v41 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v42 = 678;
    goto LABEL_125;
  }
}

void BlueFin::GlMeClkModMgr::GetClkMod(BlueFin::GlMeClkModMgr *this, BlueFin::GlMeClkMod *a2, uint64_t a3)
{
  unsigned int v3 = a3;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)a2 + 2) = v5;
  unsigned int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)a2 + 3) = v6;
  float v7 = *((float *)this + 6);
  *((float *)a2 + 4) = v7;
  float v8 = *((float *)this + 7);
  *((float *)a2 + 5) = v8;
  double v9 = *((double *)this + 4);
  *((double *)a2 + 3) = v9;
  float v10 = *((float *)this + 10);
  *((float *)a2 + 8) = v10;
  double v11 = *((double *)this + 6);
  *((double *)a2 + 5) = v11;
  float v12 = *((float *)this + 14);
  *((float *)a2 + 12) = v12;
  double v13 = *((double *)this + 8);
  *((double *)a2 + 7) = v13;
  uint64_t v14 = *((void *)this + 9);
  *((void *)a2 + 8) = v14;
  if (!v5)
  {
    *((_DWORD *)a2 + 3) = a3;
    return;
  }
  uint64_t v16 = *((void *)this + 18);
  unsigned __int16 v17 = *(_WORD *)(v16 + 9856) - 1;
  if (v17 <= 3u && *(unsigned __int8 *)(v16 + 9858) - 1 <= 3)
  {
    *(unsigned char *)(v16 + 9859) = 1;
    goto LABEL_106;
  }
  *(unsigned char *)(v16 + 9859) = 0;
  double v79 = 0.0;
  int v78 = 0;
  double v77 = 1.0;
  if ((*(unsigned int (**)(void, uint64_t, double *, int *, double *, void))(**((void **)this + 16)
                                                                                          + 40))(*((void *)this + 16), a3, &v79, &v78, &v77, 0))
  {
    __int16 v18 = v78;
    *((_DWORD *)a2 + 2) |= v78;
    if ((v18 & 2) == 0)
    {
      if ((v18 & 0x20) == 0)
      {
        if ((v18 & 0x400) != 0)
        {
          double v76 = v79;
          v73[0] = -117;
          int v74 = 0;
          __int16 v75 = 453;
          *((double *)a2 + 7) = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
          float v19 = v77;
          *((float *)a2 + 16) = v19;
          unsigned int v20 = *((_DWORD *)this + 29);
          double v21 = (double)(*(unsigned int (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16))
              * 0.001;
          double v22 = fmod(v21, 4294967300.0);
          if (v21 <= 4294967300.0) {
            double v22 = v21;
          }
          if (v20 == -1)
          {
            if (v22 < -4294967300.0) {
              double v22 = -fmod(-v22, 4294967300.0);
            }
            if (v22 < 0.0) {
              unsigned int v23 = --v22;
            }
            else {
              unsigned int v23 = v22;
            }
          }
          else
          {
            if (v22 < -4294967300.0) {
              double v22 = -fmod(-v22, 4294967300.0);
            }
            if (v22 < 0.0) {
              unsigned int v23 = --v22;
            }
            else {
              unsigned int v23 = v22;
            }
            if (v23 <= v20) {
              unsigned int v23 = v20;
            }
          }
          *((_DWORD *)this + 29) = v23;
        }
        goto LABEL_86;
      }
      double v76 = *((double *)a2 + 5);
      v73[0] = 52;
      int v74 = 0;
      __int16 v75 = 147;
      SubEpoch__n128 Time = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 0);
      double v76 = v79;
      v73[0] = 52;
      int v74 = 0;
      __int16 v75 = 147;
      double v29 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 0);
      *((double *)a2 + 5) = SubEpochTime;
      double v76 = v79;
      v73[0] = 52;
      int v74 = 0;
      __int16 v75 = 147;
      double v30 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 0)
          + *((double *)a2 + 5);
      *((double *)a2 + 5) = v30;
      if (SubEpochTime - v29 <= 0.0005)
      {
        if (SubEpochTime - v29 >= -0.0005)
        {
LABEL_52:
          unsigned int v42 = *((_DWORD *)this + 28);
          double v43 = (double)(*(unsigned int (**)(void))(**((void **)this + 16) + 72))(*((void *)this + 16))
              * 0.001;
          double v44 = fmod(v43, 4294967300.0);
          if (v43 <= 4294967300.0) {
            double v44 = v43;
          }
          if (v42 == -1)
          {
            if (v44 < -4294967300.0) {
              double v44 = -fmod(-v44, 4294967300.0);
            }
            if (v44 < 0.0) {
              unsigned int v45 = --v44;
            }
            else {
              unsigned int v45 = v44;
            }
          }
          else
          {
            if (v44 < -4294967300.0) {
              double v44 = -fmod(-v44, 4294967300.0);
            }
            if (v44 < 0.0) {
              unsigned int v45 = --v44;
            }
            else {
              unsigned int v45 = v44;
            }
            if (v45 <= v42) {
              unsigned int v45 = v42;
            }
          }
          *((_DWORD *)this + 28) = v45;
          double v76 = *((double *)a2 + 5);
          v73[0] = 52;
          int v74 = 0;
          __int16 v75 = 147;
          SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
          *((double *)a2 + 5) = SubBitAndEpochTime;
          if ((v78 & 0x80) != 0)
          {
            int v47 = *((_DWORD *)this + 28);
            *((_DWORD *)this + 27) = v47;
            *((_DWORD *)this + 29) = v47;
            if ((*((unsigned char *)a2 + 8) & 8) != 0)
            {
              double v76 = SubBitAndEpochTime;
              v73[0] = 1;
              int v74 = 0;
              __int16 v75 = 0;
              SubBit__n128 Time = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
              double v76 = *((double *)a2 + 3);
              v73[0] = 1;
              int v74 = 0;
              __int16 v75 = 0;
              double v49 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
              double v76 = *((double *)a2 + 5);
              v73[0] = 1;
              int v74 = 0;
              __int16 v75 = 0;
              double v50 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
              double v51 = v50 - v49;
              if (v50 - v49 < 0.0) {
                double v51 = -(v50 - v49);
              }
              if (v51 > 0.0005)
              {
                if (v50 <= v49) {
                  SubBit__n128 Time = SubBitTime + -0.001;
                }
                else {
                  SubBit__n128 Time = SubBitTime + 0.001;
                }
              }
              double v76 = v49 + SubBitTime;
              v73[0] = 1;
              int v74 = 0;
              __int16 v75 = 0;
              SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
            }
            *((double *)a2 + 3) = SubBitAndEpochTime;
            double v76 = SubBitAndEpochTime;
            v73[0] = -117;
            int v74 = 0;
            __int16 v75 = 453;
            *((double *)a2 + 7) = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
          }
          goto LABEL_86;
        }
        double v31 = 0.001;
      }
      else
      {
        double v31 = -0.001;
      }
      *((double *)a2 + 5) = v30 + v31;
      goto LABEL_52;
    }
    double v76 = *((double *)a2 + 3);
    v73[0] = 1;
    int v74 = 0;
    __int16 v75 = 0;
    double v24 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
    double v76 = v79;
    v73[0] = 1;
    int v74 = 0;
    __int16 v75 = 0;
    double v25 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
    *((double *)a2 + 3) = v24;
    double v76 = v79;
    v73[0] = 1;
    int v74 = 0;
    __int16 v75 = 0;
    double v26 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u)
        + *((double *)a2 + 3);
    *((double *)a2 + 3) = v26;
    if (v24 - v25 <= 0.0005)
    {
      if (v24 - v25 >= -0.0005)
      {
LABEL_27:
        unsigned int v32 = *((_DWORD *)this + 27);
        double v33 = (double)(*(unsigned int (**)(void))(**((void **)this + 16) + 64))(*((void *)this + 16))
            * 0.001;
        double v34 = fmod(v33, 4294967300.0);
        if (v33 <= 4294967300.0) {
          double v34 = v33;
        }
        if (v32 == -1)
        {
          if (v34 < -4294967300.0) {
            double v34 = -fmod(-v34, 4294967300.0);
          }
          if (v34 < 0.0) {
            unsigned int v35 = --v34;
          }
          else {
            unsigned int v35 = v34;
          }
        }
        else
        {
          if (v34 < -4294967300.0) {
            double v34 = -fmod(-v34, 4294967300.0);
          }
          if (v34 < 0.0) {
            unsigned int v35 = --v34;
          }
          else {
            unsigned int v35 = v34;
          }
          if (v35 <= v32) {
            unsigned int v35 = v32;
          }
        }
        *((_DWORD *)this + 27) = v35;
        *((_DWORD *)this + 28) = v35;
        double v76 = *((double *)a2 + 3);
        v73[0] = 1;
        int v74 = 0;
        __int16 v75 = 0;
        double v36 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
        *((double *)a2 + 3) = v36;
        double v76 = v36;
        v73[0] = -117;
        int v74 = 0;
        __int16 v75 = 453;
        *((double *)a2 + 7) = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
        *((_DWORD *)this + 29) = *((_DWORD *)this + 27);
        if (*((unsigned char *)a2 + 9))
        {
          double v76 = *((double *)a2 + 3);
          v73[0] = 52;
          int v74 = 0;
          __int16 v75 = 147;
          double v38 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
          double v76 = *((double *)a2 + 3);
          v73[0] = 52;
          int v74 = 0;
          __int16 v75 = 147;
          double v39 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
          double v76 = *((double *)a2 + 5);
          v73[0] = 52;
          int v74 = 0;
          __int16 v75 = 147;
          double v40 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
          double v41 = v40 - v39;
          if (v40 - v39 < 0.0) {
            double v41 = -(v40 - v39);
          }
          if (v41 > 0.0005)
          {
            if (v40 <= v39) {
              double v38 = v38 + 0.001;
            }
            else {
              double v38 = v38 + -0.001;
            }
          }
          double v76 = v40 + v38;
          v73[0] = 52;
          int v74 = 0;
          __int16 v75 = 147;
          double v37 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v76, (const BlueFin::GlSignalId *)v73, 1u);
        }
        else
        {
          double v37 = *((double *)a2 + 3);
        }
        *((double *)a2 + 5) = v37;
        goto LABEL_86;
      }
      double v27 = 0.001;
    }
    else
    {
      double v27 = -0.001;
    }
    *((double *)a2 + 3) = v26 + v27;
    goto LABEL_27;
  }
LABEL_86:
  int v52 = *((_DWORD *)a2 + 2);
  if ((v52 & 2) != 0)
  {
    unsigned int v53 = *((_DWORD *)this + 27);
    if (v53 == -1)
    {
      double v71 = "m_ulBitMeasTimeStampLsGps != INVALID_TIMESTAMP";
      DeviceFaultNotify("glme_clkmodmgr.cpp", 241, "GetClkMod", (char)"m_ulBitMeasTimeStampLsGps != INVALID_TIMESTAMP");
      int v72 = 241;
      goto LABEL_123;
    }
    float v54 = (double)v3 * 0.001;
    if ((float)(v54 - (float)v53) >= 600.0)
    {
      v52 &= 0xFFFFFFF9;
      *((_DWORD *)a2 + 2) = v52;
    }
  }
  if ((v52 & 0x20) != 0)
  {
    unsigned int v55 = *((_DWORD *)this + 28);
    if (v55 == -1)
    {
      double v71 = "m_ulBitMeasTimeStampLsGlns != INVALID_TIMESTAMP";
      DeviceFaultNotify("glme_clkmodmgr.cpp", 256, "GetClkMod", (char)"m_ulBitMeasTimeStampLsGlns != INVALID_TIMESTAMP");
      int v72 = 256;
      goto LABEL_123;
    }
    float v56 = (double)v3 * 0.001;
    if ((float)(v56 - (float)v55) >= 600.0)
    {
      v52 &= 0xFFFFFF5F;
      *((_DWORD *)a2 + 2) = v52;
    }
  }
  if ((v52 & 0x422) == 0x400)
  {
    if (*((_DWORD *)this + 29) != -1)
    {
      double v58 = (double)(*(unsigned int (**)(void))(**((void **)this + 16) + 80))(*((void *)this + 16))
          * 0.001;
      double v59 = fmod(v58, 4294967300.0);
      if (v58 <= 4294967300.0) {
        double v59 = v58;
      }
      if (v59 < -4294967300.0) {
        double v59 = -fmod(-v59, 4294967300.0);
      }
      if (v59 < 0.0) {
        signed int v60 = --v59;
      }
      else {
        signed int v60 = v59;
      }
      float v57 = (double)v3 * 0.001;
      if ((float)(v57 - (float)v60) >= 30.0) {
        *((_DWORD *)a2 + 2) &= ~0x400u;
      }
      goto LABEL_105;
    }
    double v71 = "m_ulEpochMeasTimeStampLsGal != INVALID_TIMESTAMP";
    DeviceFaultNotify("glme_clkmodmgr.cpp", 273, "GetClkMod", (char)"m_ulEpochMeasTimeStampLsGal != INVALID_TIMESTAMP");
    int v72 = 273;
LABEL_123:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_clkmodmgr.cpp", v72, v71);
  }
LABEL_105:
  unsigned int v6 = *((_DWORD *)a2 + 3);
  double v9 = *((double *)a2 + 3);
  float v7 = *((float *)a2 + 4);
  float v8 = *((float *)a2 + 5);
  float v10 = *((float *)a2 + 8);
  double v11 = *((double *)a2 + 5);
  float v12 = *((float *)a2 + 12);
  double v13 = *((double *)a2 + 7);
  LODWORD(v14) = *((_DWORD *)a2 + 16);
  uint64_t v16 = *((void *)this + 18);
  unsigned __int16 v17 = *(_WORD *)(v16 + 9856) - 1;
LABEL_106:
  int v61 = (unsigned __int8 *)(v16 + 9858);
  double v62 = ((double)v3 - (double)v6) / 1000.0;
  *((_DWORD *)a2 + 3) = v3;
  double v63 = v7;
  *((double *)a2 + 3) = v9 - v62 * v7;
  float v64 = v62;
  float v65 = fabsf(v64);
  float v66 = v10 + (float)(v65 * v8);
  *((float *)a2 + 8) = v66;
  *((double *)a2 + 5) = v11 - v62 * v63;
  float v67 = v12 + (float)(v65 * v8);
  *((float *)a2 + 12) = v67;
  *((double *)a2 + 7) = v13 - v62 * v63;
  *((float *)a2 + 16) = *(float *)&v14 + (float)(v65 * v8);
  if (v17 > 3u || *v61 - 1 > 3)
  {
    v61[1] = 0;
    float v8 = v8 + (float)(v65 * 5.0e-10);
    *((float *)a2 + 5) = v8;
  }
  else
  {
    v61[1] = 1;
  }
  float v68 = *((float *)this + 23);
  if (v8 > v68)
  {
    *((float *)a2 + 5) = v68;
    float v8 = v68;
  }
  unsigned int v69 = (8 * (v66 < 0.00015152)) | ((v67 < 0.00030333) << 8) | (16 * (v8 < 0.000005)) | *((_DWORD *)a2 + 2) & 0xFFFFFEE7;
  *((_DWORD *)a2 + 2) = v69;
  double v70 = v67;
  if (v66 > 0.001 || v70 > 0.001)
  {
    if (v66 > 0.001) {
      v69 &= 0xFFFFFFF9;
    }
    if (v70 > 0.001) {
      v69 &= 0xFFFFFF5F;
    }
    *((_DWORD *)a2 + 2) = v69;
  }
}

uint64_t BlueFin::GlMeWinMgr::GetMeAidParams(BlueFin::GlMeWinMgr *this, const BlueFin::GlSignalId *a2, BlueFin::GlMeAcqWin *a3, double a4)
{
  BlueFin::GlMeSatAidMgr::GetSatAid((uint64_t)this + 320, (unsigned __int8 *)a2, 0, a4);
  uint64_t v9 = v8;
  int v46 = 0;
  double v45 = 1.0;
  double v10 = fmod(a4, 4294967300.0);
  if (a4 <= 4294967300.0) {
    double v10 = a4;
  }
  if (v10 < -4294967300.0) {
    double v10 = -fmod(-v10, 4294967300.0);
  }
  double v47 = 0.0;
  if (v10 < 0.0) {
    unsigned int v11 = --v10;
  }
  else {
    unsigned int v11 = v10;
  }
  int CbGoodQuality = BlueFin::GlMeMiniKF::mskfGetCbGoodQuality((uint64_t)this + 9312, v11, &v47, &v46, &v45, 0);
  if (v9)
  {
    if ((~*(_DWORD *)(v9 + 24) & 0x12) != 0) {
      return 0;
    }
    int v13 = CbGoodQuality;
    double v36 = &unk_270EBF258;
    uint64_t v37 = 0;
    uint64_t v38 = 0x36A7C5AC00000000;
    uint64_t v39 = 0;
    uint64_t v41 = 0;
    int v40 = 2139095039;
    int v42 = 2139095039;
    uint64_t v43 = 0;
    uint64_t v44 = 0x36A7C5AC7F7FFFFFLL;
    unsigned int v14 = (int)(a4 + -0.5);
    if (a4 >= 0.0) {
      unsigned int v14 = 0;
    }
    if (a4 > 0.0) {
      uint64_t v15 = (int)(a4 + 0.5);
    }
    else {
      uint64_t v15 = v14;
    }
    BlueFin::GlMeClkModMgr::GetClkMod((BlueFin::GlMeWinMgr *)((char *)this + 144), (BlueFin::GlMeClkMod *)&v36, v15);
    BOOL v16 = *((float *)this + 84) < 0.0000001;
    if (*((float *)this + 88) < 0.0000001) {
      BOOL v16 = 1;
    }
    BOOL v17 = *((float *)&v38 + 1) < 0.00000005 && v16;
    unsigned int v18 = *(unsigned __int8 *)a2;
    if (v18 < 0x34)
    {
      char v20 = 0;
      BOOL v21 = 0;
      goto LABEL_33;
    }
    int v19 = v18 > 0x41 || v17;
    if (v19 & 1) != 0 || ((v13 ^ 1))
    {
      v13 &= v19;
      if (v18 > 0x41)
      {
        char v20 = 0;
        goto LABEL_32;
      }
    }
    else
    {
      int v13 = v46 >> 7;
    }
    if (((BYTE1(v37) | v17) & 1) == 0) {
      return 0;
    }
    char v20 = 1;
LABEL_32:
    BOOL v21 = (v18 + 117) < 0x24u;
    if (v20)
    {
LABEL_35:
      if (!v21 || (v17 | ((BYTE1(v37) & 4) >> 2)) == 1)
      {
        SigMeas = BlueFin::GlMeMsmtMgr::GetSigMeas(*((BlueFin::GlMeMsmtMgr **)this + 1), a2, a4, 0);
        BlueFin::GlMeAcqWinComputer::GlMeAcqWinComputer((uint64_t)v35, (uint64_t)SigMeas, v9, (uint64_t)&v36, (uint64_t)this + 16);
        int v34 = 24;
        int IsDspNavBitQuality = BlueFin::GlMeMsmtMgr::IsDspNavBitQuality(*((BlueFin::GlMeMsmtMgr **)this + 1), a2);
        BOOL v24 = *((unsigned __int16 *)this + 4928) - 1 <= 3
           && *((unsigned __int8 *)this + 9858) - 1 < 4;
        *((unsigned char *)this + 9859) = v24;
        uint64_t v9 = BlueFin::GlMeAcqWinComputer::ComputeAcqWin(v35, (uint64_t)a3, &v34, IsDspNavBitQuality, 0, v24, (unsigned __int8 *)a2, a4, *((double *)this + 15));
        *((_DWORD *)a3 + 26) = *((_DWORD *)this + 2280);
        if (v20)
        {
          if ((v13 | v17))
          {
LABEL_54:
            *((double *)a3 + 3) = a4 * 0.001;
            if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              (*(void (**)(BlueFin::GlMeAcqWin *, void, void))(*(void *)a3 + 24))(a3, 0, 0);
            }
            return v9;
          }
          int v26 = *(unsigned __int8 *)a2;
        }
        else
        {
          int v26 = *(unsigned __int8 *)a2;
          if ((v26 + 81) < 0xDCu) {
            int v27 = 1;
          }
          else {
            int v27 = v13;
          }
          if ((v27 | v17)) {
            goto LABEL_54;
          }
        }
        if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
        {
          unsigned int v32 = "IsValid()";
          DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
          int v33 = 806;
        }
        else
        {
          uint64_t v28 = *((int *)a2 + 1);
          uint64_t v29 = BlueFin::GlSvId::s_aucSvId2gnss[v26];
          int v30 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v28 + v29];
          if (v30)
          {
            unsigned int v31 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v28 - v28 + v29];
            if (v31)
            {
              GlCustomLog(15, "GlMeWinMgr::GetMeAidParams: Svid %d Band %s Force GLN/BDS/GAL unc %.6f sec(%f chips) to 1ms\n", v26, BlueFin::GlSignalId::s_ausSignalIndex2str[v28], *((float *)a3 + 16), (float)(*((float *)a3 + 16) * (float)(1000 * v30 / v31)));
              *((_DWORD *)a3 + 16) = 981668463;
              goto LABEL_54;
            }
          }
          unsigned int v32 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
          DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
          int v33 = 814;
        }
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v33, v32);
      }
      return 0;
    }
LABEL_33:
    if (!v21 && (v17 | ((v37 & 8) >> 3)) != 1) {
      return 0;
    }
    goto LABEL_35;
  }
  return v9;
}

BOOL BlueFin::GlMeAcqWinComputer::ComputeAcqWin(uint64_t *a1, uint64_t a2, unsigned char *a3, int a4, int a5, int a6, unsigned __int8 *a7, double a8, double a9)
{
  *((unsigned char *)a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
  *((_WORD *)a1 + 24) = 575;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  *(_OWORD *)((char *)a1 + 68) = xmmword_263BABE60;
  *((_DWORD *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 2139095039;
  a1[11] = 0;
  *((_DWORD *)a1 + 24) = 2139095039;
  *((_WORD *)a1 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  a1[13] = 0x7FEFFFFFFFFFFFFFLL;
  *((_DWORD *)a1 + 28) = -1;
  *((_WORD *)a1 + 58) = -1;
  a1[16] = 0;
  a1[17] = 0;
  a1[15] = 0;
  *((_DWORD *)a1 + 36) = 0;
  *((_DWORD *)a1 + 68) = 0;
  uint64_t v14 = *a1;
  if (*a1)
  {
    int v15 = *(_DWORD *)(v14 + 104);
    if (v15 <= 29999 && (*(unsigned char *)(v14 + 12) & 2) != 0)
    {
      char v16 = 1;
      *((_DWORD *)a1 + 68) = 1;
      int v17 = 3;
    }
    else
    {
      char v16 = 0;
      int v17 = 2;
    }
    if (v15 <= 599999 && (*(_DWORD *)(v14 + 12) & 0xC) != 0)
    {
      *((_DWORD *)a1 + 68) = v17;
      char v16 = v17;
    }
  }
  else
  {
    char v16 = 0;
  }
  *((unsigned char *)a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
  *((_WORD *)a1 + 84) = 575;
  a1[22] = 0;
  *((_DWORD *)a1 + 46) = 0;
  *(_OWORD *)((char *)a1 + 188) = xmmword_263BABE60;
  *((_DWORD *)a1 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 2139095039;
  *((_WORD *)a1 + 11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  a1[28] = 0x7FEFFFFFFFFFFFFFLL;
  *((_DWORD *)a1 + 58) = -1;
  *((_WORD *)a1 + 118) = -1;
  a1[31] = 0;
  a1[32] = 0;
  a1[30] = 0;
  *((_DWORD *)a1 + 66) = 0;
  *((_DWORD *)a1 + 69) = 0;
  uint64_t v18 = a1[2];
  float v19 = 0.0;
  int v20 = *(_DWORD *)(v18 + 8);
  if ((v20 & 0x10) != 0)
  {
    float v19 = 0.0 - *(float *)(v18 + 16);
    *((float *)a1 + 48) = v19;
  }
  a1[26] = 0;
  *((_DWORD *)a1 + 54) = 2139095039;
  BOOL v21 = (unsigned __int8 *)a1[1];
  if (!v21)
  {
    if (v14)
    {
      if (a2 + 8 == v14)
      {
        LOBYTE(v23) = 0;
        int v31 = 0;
        double v24 = 0.0;
        float v32 = 3.4028e38;
        float v33 = 3.4028e38;
        goto LABEL_83;
      }
      LOBYTE(v23) = 0;
      *(unsigned char *)(a2 + 8) = *(unsigned char *)v14;
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v14 + 4);
      __int16 v25 = *(_WORD *)(v14 + 8);
    }
    else
    {
      LOBYTE(v23) = 0;
      *(unsigned char *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 12) = -1;
      __int16 v25 = 575;
    }
    int v31 = 0;
    double v24 = 0.0;
    float v32 = 3.4028e38;
    float v33 = 3.4028e38;
    goto LABEL_82;
  }
  int v22 = *((_DWORD *)v21 + 6);
  if ((v22 & 2) == 0)
  {
    LOBYTE(v23) = 0;
    double v24 = 0.0;
    goto LABEL_75;
  }
  if ((v20 & 2) == 0)
  {
    if ((v20 & 0x20) != 0)
    {
      double v27 = *(double *)(v18 + 40);
      LODWORD(v26) = *v21;
      if ((v26 - 52) <= 0xD) {
        goto LABEL_33;
      }
      if (*((unsigned __int16 *)a7 + 4) >= 0x23Fu) {
        goto LABEL_232;
      }
      if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a7 + 1)
                                                                  - *((int *)a7 + 1)
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[*a7]])
        goto LABEL_233;
      double v35 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a7 + 1)
                                                                                           - *((int *)a7 + 1)
                                                                                           + BlueFin::GlSvId::s_aucSvId2gnss[*a7]]
          * 0.001;
      double v36 = 10.0;
    }
    else
    {
      if ((v20 & 0x400) == 0)
      {
        LODWORD(v26) = *v21;
        if ((v26 - 52) <= 0xD)
        {
          double v27 = *(double *)(v18 + 40);
LABEL_33:
          float v34 = *(float *)(v18 + 48);
LABEL_47:
          float v29 = 1.0;
LABEL_48:
          if (v34 >= v29) {
            float v34 = v29;
          }
          double v30 = v34;
          goto LABEL_51;
        }
        if ((v26 + 117) > 0x23u)
        {
          double v27 = *(double *)(v18 + 24);
          float v34 = *(float *)(v18 + 32);
          goto LABEL_47;
        }
        double v27 = *(double *)(v18 + 56);
LABEL_45:
        float v34 = *(float *)(v18 + 64);
        goto LABEL_47;
      }
      double v27 = *(double *)(v18 + 56);
      LODWORD(v26) = *v21;
      if ((v26 + 117) <= 0x23u) {
        goto LABEL_45;
      }
      if (*((unsigned __int16 *)a7 + 4) >= 0x23Fu) {
        goto LABEL_232;
      }
      if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a7 + 1)
                                                                  - *((int *)a7 + 1)
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[*a7]])
        goto LABEL_233;
      double v35 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a7 + 1)
                                                                                           - *((int *)a7 + 1)
                                                                                           + BlueFin::GlSvId::s_aucSvId2gnss[*a7]]
          * 0.001;
      double v36 = 16.0;
    }
    double v30 = v35 * v36;
    goto LABEL_51;
  }
  double v27 = *(double *)(v18 + 24);
  float v28 = *(float *)(v18 + 32);
  float v29 = 1.0;
  if (v28 >= 1.0) {
    float v28 = 1.0;
  }
  double v30 = v28;
  uint64_t v26 = *v21;
  if ((v20 & 0x20) != 0 && BlueFin::GlSvId::s_aucSvId2gnss[v26] == 2)
  {
    double v27 = *(double *)(v18 + 40);
    if ((v20 & 0x100) == 0)
    {
      double v30 = 0.0005;
      goto LABEL_51;
    }
    float v34 = *(float *)(v18 + 48);
    goto LABEL_48;
  }
LABEL_51:
  uint64_t v37 = *((int *)a7 + 1);
  double v24 = v27 + *((double *)v21 + 4) + *(float *)&v21[4 * v37 + 56] / 299792458.0;
  *((double *)a1 + 26) = v24;
  if ((*a3 & 8) == 0)
  {
    double v24 = v24 + a8 * 0.001;
    *((double *)a1 + 26) = v24;
  }
  float v38 = v30;
  if (a6) {
    float v38 = 0.0004;
  }
  float v39 = v38 + *((float *)v21 + 10);
  *((float *)a1 + 54) = v39;
  if ((v26 - 52) > 0xD)
  {
    if ((v26 + 117) > 0x23u)
    {
      if ((v20 & 8) != 0 && v39 < 0.00015152)
      {
        int v23 = 1;
        goto LABEL_67;
      }
    }
    else if ((v20 & 0x400) != 0)
    {
      float v40 = 0.00015152;
LABEL_61:
      if (v39 < v40)
      {
        int v23 = 1;
        *((_DWORD *)a1 + 69) = 1;
        goto LABEL_68;
      }
    }
  }
  else if ((v20 & 0x100) != 0)
  {
    float v40 = 0.00030333;
    goto LABEL_61;
  }
  int v23 = 0;
LABEL_67:
  *((_DWORD *)a1 + 69) = v23;
  if ((v26 - 33) < 0x13)
  {
LABEL_69:
    if (*((unsigned __int16 *)a7 + 4) >= 0x23Fu) {
      goto LABEL_232;
    }
    uint64_t v41 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v37 - v37];
    if (!v41[BlueFin::GlSvId::s_aucSvId2gnss[*a7]]) {
      goto LABEL_233;
    }
    if ((double)v41[BlueFin::GlSvId::s_aucSvId2gnss[*a7]] * 0.001 > v39
      && (*(_WORD *)(v18 + 8) & 0x422) != 0)
    {
      v23 |= 2u;
    }
    goto LABEL_74;
  }
LABEL_68:
  if (*((_DWORD *)v21 + 3) != 4) {
    goto LABEL_69;
  }
LABEL_74:
  *((_DWORD *)a1 + 69) = v23;
  int v22 = *((_DWORD *)v21 + 6);
LABEL_75:
  int v31 = 0;
  if ((v22 & 0x10) != 0)
  {
    float v19 = *((float *)v21 + 11);
    *((float *)a1 + 48) = v19;
    if (*((_DWORD *)v21 + 3) != 6)
    {
      if (a9 == 0.0 || (*(_DWORD *)a3 & 4) == 0) {
        float v75 = *(float *)(v18 + 16);
      }
      else {
        float v75 = a9;
      }
      float v19 = v19 - v75;
      *((float *)a1 + 48) = v19;
      float v32 = *((float *)v21 + 12);
      float v33 = *(float *)(v18 + 20) + v32;
      *((float *)a1 + 49) = v33;
      *((float *)a1 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
      *((float *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
      if ((v22 & 0x20) != 0)
      {
        int v31 = *((_DWORD *)v21 + 13);
        *((_DWORD *)a1 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v31;
        *((_DWORD *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v31;
      }
      goto LABEL_80;
    }
    float v32 = *((float *)v21 + 12);
    *((float *)a1 + 49) = v32;
    *((float *)a1 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
    *((float *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
  }
  else
  {
    float v32 = 3.4028e38;
  }
  float v33 = v32;
LABEL_80:
  if ((unsigned __int8 *)(a2 + 8) == a7) {
    goto LABEL_83;
  }
  *(unsigned char *)(a2 + 8) = *a7;
  *(_DWORD *)(a2 + 12) = *((_DWORD *)a7 + 1);
  __int16 v25 = *((_WORD *)a7 + 4);
LABEL_82:
  *(_WORD *)(a2 + 16) = v25;
LABEL_83:
  char v42 = *(unsigned char *)(a2 + 8);
  BOOL v43 = v42 == 0;
  BOOL v44 = *(_DWORD *)(a2 + 12) == -1;
  BOOL v45 = !v43 || !v44;
  if (v43 && v44) {
    int v46 = 0;
  }
  else {
    int v46 = *(_DWORD *)(a2 + 12);
  }
  if (v45) {
    __int16 v47 = *(_WORD *)(a2 + 16);
  }
  else {
    __int16 v47 = 0;
  }
  if (!v45) {
    char v42 = 1;
  }
  *((unsigned char *)a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v42;
  *((_DWORD *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v46;
  *((_WORD *)a1 + 24) = v47;
  if ((*(_DWORD *)a3 & 9) != 0)
  {
    if ((*(_DWORD *)a3 & 8) == 0 && v33 < 0.000000006)
    {
      *((_DWORD *)a1 + 49) = 835594383;
      float v33 = 0.000000006;
    }
    goto LABEL_95;
  }
  if (v21)
  {
    if (!v14) {
      goto LABEL_187;
    }
    float v55 = *(float *)(v14 + 100);
    if (v55 >= 0.00000001 && v55 > v33) {
      goto LABEL_95;
    }
    int v56 = *(_DWORD *)(v14 + 12);
    if ((v56 & 2) == 0 || (v56 & 0x8000) != 0 && *(float *)(v14 + 108) <= 25.0) {
      goto LABEL_95;
    }
    unsigned int v57 = *(_DWORD *)(a1[3] + 8);
    if (v57 >= 4)
    {
      double v97 = "0";
      DeviceFaultNotify("glme_userdynamic.h", 78, "State", (char)"0");
      double v98 = "glme_userdynamic.h";
      int v99 = 78;
LABEL_234:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v98, v99, v97);
    }
    if (v57 >= 2 && *(int *)(v14 + 104) > 5000) {
      goto LABEL_95;
    }
  }
  else if ((*(unsigned char *)(v18 + 8) & 0x10) != 0)
  {
    if (!v14) {
      goto LABEL_187;
    }
    int v56 = *(_DWORD *)(v14 + 12);
    float v19 = -*(float *)(v18 + 16);
    *((float *)a1 + 48) = v19;
    if ((v56 & 2) == 0)
    {
LABEL_95:
      *((float *)a1 + 18) = v19;
      *((float *)a1 + 19) = v33;
      *((_DWORD *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v31;
      *((float *)a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v32;
      int v48 = 32;
      *((_DWORD *)a1 + 16) = 32;
      goto LABEL_96;
    }
  }
  else
  {
    if (!v14) {
      goto LABEL_187;
    }
    int v56 = *(_DWORD *)(v14 + 12);
  }
  if ((v56 & 2) != 0)
  {
    float v77 = *(float *)(v14 + 100);
    if (v77 <= 0.000005)
    {
      int v48 = 0;
      *((_DWORD *)a1 + 18) = *(_DWORD *)(v14 + 96);
      *((float *)a1 + 19) = v77;
      goto LABEL_96;
    }
  }
LABEL_187:
  if ((*(unsigned char *)(v18 + 8) & 0x10) != 0 && *(float *)(v18 + 20) <= 0.0000005)
  {
    int v48 = 0;
    *((float *)a1 + 18) = -*(float *)(v18 + 16);
  }
  else
  {
    int v48 = 0;
  }
LABEL_96:
  if (v23)
  {
    if ((*a3 & 9) != 0)
    {
      BOOL v49 = 1;
      if ((v23 & 2) == 0) {
        goto LABEL_98;
      }
    }
    else
    {
      BOOL v49 = (v16 & 1) == 0;
      if ((v23 & 2) == 0) {
        goto LABEL_98;
      }
    }
  }
  else
  {
    BOOL v49 = 0;
    if ((v23 & 2) == 0)
    {
LABEL_98:
      BOOL v50 = 0;
      goto LABEL_106;
    }
  }
  BOOL v50 = (v16 & 2) == 0 || (*(_DWORD *)a3 & 9) != 0;
  if ((*(_DWORD *)a3 & 0x30) != 0)
  {
    int v51 = a5 & ~a4;
    goto LABEL_107;
  }
LABEL_106:
  int v51 = 0;
LABEL_107:
  uint64_t v52 = *(unsigned __int8 *)(a2 + 8);
  v101[0] = v52;
  int v102 = 0;
  unsigned __int16 v103 = 575;
  if ((v52 + 67) < 0x44u) {
    goto LABEL_110;
  }
  uint64_t v53 = BlueFin::GlSvId::s_aucSvId2gnss[v52];
  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v53] != 255)
  {
    unsigned __int16 v103 = BlueFin::GlSignalId::s_ausGnss2signalId[v53] + v52 - BlueFin::GlSvId::s_aucGnss2minSvId[v53];
LABEL_110:
    if (v49) {
      goto LABEL_111;
    }
    goto LABEL_132;
  }
  int v102 = -1;
  if (v49)
  {
LABEL_111:
    if (v51)
    {
      int v54 = v48 | 0x18;
    }
    else
    {
      if (!v50)
      {
        if ((v16 & 2) != 0)
        {
          if (a4) {
            int v78 = 26;
          }
          else {
            int v78 = 18;
          }
          *((_DWORD *)a1 + 16) = v48 | v78;
          double v100 = v24;
          SubEpoch__n128 Time = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
          if (*a1)
          {
            double v100 = *(double *)(*a1 + 56);
            double v59 = SubEpochTime
                + BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 0);
            if (*a1)
            {
              double v100 = *(double *)(*a1 + 56);
              double v80 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
            }
            else
            {
              double v80 = 0.0;
            }
          }
          else
          {
            double v80 = 0.0;
            double v59 = SubEpochTime + 0.0;
          }
          if (v103 >= 0x23Fu) {
            goto LABEL_232;
          }
          uint64_t v88 = BlueFin::GlSvId::s_aucSvId2gnss[v101[0]];
          int v89 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v102];
          if (!v89[8 * v102 + v88]) {
            goto LABEL_233;
          }
          double v90 = (double)v89[8 * v102 + v88] * 0.001;
          if (vabdd_f64(SubEpochTime, v80) > v90 * 0.5)
          {
            if (SubEpochTime - v80 >= 0.0) {
              double v59 = v59 - v90;
            }
            else {
              double v59 = v59 + v90;
            }
          }
          goto LABEL_128;
        }
        *((_DWORD *)a1 + 16) = v48;
        double v100 = v24;
        SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 0);
LABEL_127:
        double v59 = SubBitAndEpochTime;
LABEL_128:
        *((_DWORD *)a1 + 16) |= 0x200u;
LABEL_135:
        float v60 = *((float *)a1 + 54);
        goto LABEL_136;
      }
      int v54 = v48 | 0x10;
    }
    *((_DWORD *)a1 + 16) = v54;
    double v100 = v24;
    SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 0);
    goto LABEL_127;
  }
LABEL_132:
  if (v16)
  {
    if (v51)
    {
      *((_DWORD *)a1 + 16) = v48 | 0x18;
      if (v14)
      {
        double v100 = *(double *)(v14 + 56);
        double v63 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
        double v24 = *((double *)a1 + 26);
      }
      else
      {
        double v63 = 0.0;
      }
      double v100 = v24;
      SubBit__n128 Time = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 0);
      double v100 = *((double *)a1 + 26);
      double v84 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
      if (v103 >= 0x23Fu) {
        goto LABEL_232;
      }
      uint64_t v85 = BlueFin::GlSvId::s_aucSvId2gnss[v101[0]];
      unsigned __int16 v86 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v102];
      if (!v86[8 * v102 + v85]) {
        goto LABEL_233;
      }
      double v59 = v63 + SubBitTime;
      double v87 = (double)v86[8 * v102 + v85] * 0.001;
      if (vabdd_f64(v63, v84) > v87 * 0.5)
      {
        if (v63 - v84 >= 0.0) {
          double v59 = v59 - v87;
        }
        else {
          double v59 = v59 + v87;
        }
      }
      goto LABEL_229;
    }
    if ((v16 & 2) != 0)
    {
      if (a4) {
        int v81 = 26;
      }
      else {
        int v81 = 18;
      }
      *((_DWORD *)a1 + 16) = v48 | v81;
      if (v14)
      {
        double v100 = *(double *)(v14 + 56);
        double v82 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
LABEL_210:
        double v59 = v82;
        goto LABEL_229;
      }
    }
    else
    {
      if (v50)
      {
        *((_DWORD *)a1 + 16) = v48 | 0x12;
        if (v14)
        {
          double v100 = *(double *)(v14 + 56);
          double v76 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
          double v24 = *((double *)a1 + 26);
        }
        else
        {
          double v76 = 0.0;
        }
        double v100 = v24;
        double v91 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 0);
        double v100 = *((double *)a1 + 26);
        double v92 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
        if (v103 >= 0x23Fu) {
          goto LABEL_232;
        }
        uint64_t v93 = BlueFin::GlSvId::s_aucSvId2gnss[v101[0]];
        unsigned __int16 v94 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v102];
        if (!v94[8 * v102 + v93]) {
          goto LABEL_233;
        }
        double v59 = v76 + v91;
        if (vabdd_f64(v76, v92) > (double)v94[8 * v102 + v93] * 0.001 * 0.5)
        {
          double v95 = v76 - v92;
          double SecPerEpoch = BlueFin::GlSignalId::GetSecPerEpoch((BlueFin::GlSignalId *)v101);
          if (v95 >= 0.0) {
            double v59 = v59 - SecPerEpoch;
          }
          else {
            double v59 = v59 + SecPerEpoch;
          }
        }
        goto LABEL_229;
      }
      *((_DWORD *)a1 + 16) = v48;
      if (v14)
      {
        double v100 = *(double *)(v14 + 56);
        double v82 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 1u);
        goto LABEL_210;
      }
    }
    double v59 = 0.0;
LABEL_229:
    *((_DWORD *)a1 + 16) |= 0x200u;
    if (*a1) {
      float v60 = *(float *)(*a1 + 88);
    }
    else {
      float v60 = 1.0;
    }
    goto LABEL_136;
  }
  if (v50)
  {
    *((_DWORD *)a1 + 16) = v48 | 0x10;
    double v100 = v24;
    double v59 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)(a1 + 5), 0);
    goto LABEL_135;
  }
  *((_DWORD *)a1 + 16) = v48;
  double v59 = 0.0;
  float v60 = 3.4028e38;
LABEL_136:
  *((double *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a8 * 0.001;
  *((float *)a1 + 24) = v60;
  uint64_t v61 = *(unsigned __int8 *)(a2 + 8);
  v101[0] = v61;
  int v102 = 0;
  unsigned __int16 v103 = 575;
  if ((v61 + 67) >= 0x44u)
  {
    uint64_t v62 = BlueFin::GlSvId::s_aucSvId2gnss[v61];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v62] == 255) {
      int v102 = -1;
    }
    else {
      unsigned __int16 v103 = BlueFin::GlSignalId::s_ausGnss2signalId[v62]
    }
           + v61
           - BlueFin::GlSvId::s_aucGnss2minSvId[v62];
  }
  double v100 = v59;
  double v64 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v100, (const BlueFin::GlSignalId *)v101, 0);
  if ((a1[8] & 0x10) != 0)
  {
    if (v103 < 0x23Fu)
    {
      uint64_t v65 = BlueFin::GlSvId::s_aucSvId2gnss[v101[0]];
      float v66 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[-v102];
      if (v66[8 * v102 + v65])
      {
        unsigned int v67 = v66[8 * v102 + v65];
        double v68 = (double)v67
            * 0.001
            * (double)BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v101);
        if (v64 >= v68 * 0.5)
        {
          double v64 = v64 - v68;
        }
        else if (v64 <= -(v68 * 0.5))
        {
          double v64 = v64 + v68;
        }
        goto LABEL_150;
      }
LABEL_233:
      double v97 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      double v98 = "glsignalid.h";
      int v99 = 685;
      goto LABEL_234;
    }
LABEL_232:
    double v97 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    double v98 = "glsignalid.h";
    int v99 = 678;
    goto LABEL_234;
  }
LABEL_150:
  double v69 = *((double *)a1 + 11) - v64 * (float)(1.0 - *((float *)a1 + 18));
  if (v69 < 0.0) {
    double v69 = v69 + 1.0;
  }
  *((double *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v69;
  uint64_t v70 = *a1;
  if (*a1 && (*(unsigned char *)(v70 + 13) & 0x40) != 0)
  {
    *((_DWORD *)a1 + 17) = *(_DWORD *)(v70 + 108);
    *((_DWORD *)a1 + 16) |= 4u;
  }
  if ((*a3 & 8) != 0)
  {
    *((_DWORD *)a1 + 16) |= 0x40u;
    long double v72 = fmod(*((long double *)a1 + 26), 0.001);
    *((double *)a1 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = fabs(fmod(v72 + 0.001, 0.001));
    float v71 = *((float *)a1 + 54);
    *((float *)a1 + 24) = v71;
  }
  else
  {
    float v71 = *((float *)a1 + 54);
  }
  *((unsigned char *)a1 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v50 && v49;
  if (*((unsigned __int16 *)a7 + 4) >= 0x23Fu) {
    goto LABEL_232;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a7 + 1)
                                                              - *((int *)a7 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*a7]])
    goto LABEL_233;
  signed int v73 = (unsigned __int8 *)a1[1];
  if ((double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a7 + 1)
                                                                                      - *((int *)a7 + 1)
                                                                                      + BlueFin::GlSvId::s_aucSvId2gnss[*a7]]
     * 0.001 <= v71)
  {
    if (v73)
    {
LABEL_165:
      *(_OWORD *)(a1 + 15) = *(_OWORD *)(v73 + 76);
      *((_DWORD *)a1 + 35) = 1082130432;
      *((_DWORD *)a1 + 36) = *(_DWORD *)(a1[2] + 16);
    }
  }
  else if (v73)
  {
    if (*v73 - 52 <= 0xD) {
      *((unsigned char *)a1 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    }
    goto LABEL_165;
  }
  BlueFin::GlMeAcqWin::operator=(a2, (uint64_t)(a1 + 4));
  return a1[1] != 0;
}

double BlueFin::GlSystemTime::getSubBitAndEpochTime(BlueFin::GlSystemTime *this, const BlueFin::GlSignalId *a2, unsigned __int8 a3)
{
  int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(a2);
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    uint64_t v9 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v10 = 678;
    goto LABEL_8;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                              - *((int *)a2 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
  {
    uint64_t v9 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v10 = 685;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v10, v9);
  }
  unsigned int v7 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                              - *((int *)a2 + 1)
                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]]
     * EpochPerBit;
  double result = *(double *)this
         - (double)((*(double *)this * dbl_263BB2AE0[*(double *)this < 0.0]) / v7 * v7)
         * dbl_263BB2AF0[*(double *)this < 0.0];
  if ((a3 & (result < 0.0)) != 0) {
    return result + (double)v7 * 0.001;
  }
  return result;
}

uint64_t BlueFin::GlSignalId::GetEpochPerBit(BlueFin::GlSignalId *this)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    unsigned int v7 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 725, "GetEpochPerBit", (char)"IsValid()");
    int v8 = 725;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v8, v7);
  }
  uint64_t v1 = *(unsigned __int8 *)this;
  if ((v1 - 76) > 0x3E || ((1 << (v1 - 76)) & 0x7C0000000000001FLL) == 0)
  {
    int v3 = *((_DWORD *)this + 1);
  }
  else
  {
    int v3 = *((_DWORD *)this + 1);
    if (!v3) {
      return 2;
    }
  }
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[v1];
  int v5 = (char *)&BlueFin::GlSignalId::s_aucSignalIndexAndGnss2epochPerBit + 8 * v3 - v3;
  uint64_t result = v5[v4];
  if (!v5[v4])
  {
    unsigned int v7 = "ucEpochPerBit != 0";
    DeviceFaultNotify("glsignalid.h", 737, "GetEpochPerBit", (char)"ucEpochPerBit != 0");
    int v8 = 737;
    goto LABEL_13;
  }
  return result;
}

uint64_t BlueFin::GlMeMiniKF::mskfGetCbGoodQuality(uint64_t a1, unsigned int a2, double *a3, _DWORD *a4, double *a5, unsigned int a6)
{
  BlueFin::GlMeMiniKF::GenerateClockModFlags(a1, -1, &v34);
  if (a6 <= 1 && (v34 & 4) != 0)
  {
    LODWORD(v12) = *(_DWORD *)(a1 + 216);
    double v13 = ((double)a2 - (double)v12) / 1000.0;
    if (v13 > 600.0) {
      return 0;
    }
    double v33 = *(double *)(a1 + 120) - v13 * *(double *)(a1 + 24);
    v30[0] = 1;
    int v31 = 0;
    __int16 v32 = 0;
    *a3 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v33, (const BlueFin::GlSignalId *)v30, 1u);
    float v14 = *(double *)(a1 + 136);
    float v15 = v13;
    float v16 = *(double *)(a1 + 40);
    double v17 = (float)(sqrtf(v14) + (float)(fabsf(v15) * sqrtf(v16)));
    *a5 = v17;
    if (v17 >= 0.001) {
      return 0;
    }
LABEL_10:
    *a4 |= 0x4A6u;
    return 1;
  }
  if ((a6 & 0xFFFFFFFD) != 0 || (v34 & 0x80) == 0)
  {
    if ((v34 & 0x400) == 0 || a6 != 3 && a6) {
      return 0;
    }
    LODWORD(v12) = *(_DWORD *)(a1 + 484);
    double v24 = ((double)a2 - (double)v12) / 1000.0;
    *a4 |= 0x400u;
    if (v24 > 600.0) {
      return 0;
    }
    double v33 = *(double *)(a1 + 376) - v24 * *(double *)(a1 + 24);
    v30[0] = -117;
    int v31 = 0;
    __int16 v32 = 453;
    uint64_t v19 = 1;
    *a3 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v33, (const BlueFin::GlSignalId *)v30, 1u);
    float v25 = *(double *)(a1 + 392);
    float v26 = v24;
    float v27 = *(double *)(a1 + 40);
    double v28 = (float)(sqrtf(v25) + (float)(fabsf(v26) * sqrtf(v27)));
    *a5 = v28;
    if (v28 > 0.001) {
      return 0;
    }
  }
  else
  {
    LODWORD(v12) = *(_DWORD *)(a1 + 344);
    double v18 = ((double)a2 - (double)v12) / 1000.0;
    if (v18 > 600.0) {
      return 0;
    }
    double v33 = *(double *)(a1 + 248) - v18 * *(double *)(a1 + 24);
    v30[0] = 52;
    int v31 = 0;
    __int16 v32 = 147;
    uint64_t v19 = 0;
    *a3 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v33, (const BlueFin::GlSignalId *)v30, 1u);
    float v20 = *(double *)(a1 + 264);
    float v21 = v18;
    float v22 = *(double *)(a1 + 40);
    double v23 = (float)(sqrtf(v20) + (float)(fabsf(v21) * sqrtf(v22)));
    *a5 = v23;
    if (v23 < 0.001) {
      goto LABEL_10;
    }
  }
  return v19;
}

uint64_t BlueFin::GlMeMiniKF::GenerateClockModFlags@<X0>(uint64_t this@<X0>, int a2@<W1>, unsigned int *a3@<X8>)
{
  *a3 = 0;
  if (a2 == -1 || *(_DWORD *)(this + 64) == a2)
  {
    if (*(unsigned char *)(this + 104))
    {
      unsigned int v3 = 16;
      *a3 = 16;
    }
    else
    {
      unsigned int v3 = 0;
    }
    if (a2 == -1)
    {
LABEL_9:
      unsigned int v4 = *(_DWORD *)(this + 200);
      v3 |= (4 * v4) & 8 | (v4 >> 2) & 6;
      if ((v4 & 0x1A) != 0) {
        *a3 = v3;
      }
      if (a2 == -1) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  if (*(_DWORD *)(this + 160) == a2) {
    goto LABEL_9;
  }
LABEL_12:
  if (*(_DWORD *)(this + 288) != a2) {
    goto LABEL_16;
  }
LABEL_13:
  unsigned int v5 = *(_DWORD *)(this + 328);
  unsigned int v3 = v3 & 0xFFFFFE1F | (((v5 >> 1) & 1) << 8) | (32 * ((v5 >> 3) & 1)) & 0xFFFFFF3F | (((v5 >> 4) & 1) << 7) | (((v5 >> 5) & 1) << 6);
  if ((v5 & 0x3A) != 0) {
    *a3 = v3;
  }
  if (a2 != -1)
  {
LABEL_16:
    if (*(_DWORD *)(this + 416) != a2) {
      return this;
    }
  }
  if ((~*(_DWORD *)(this + 456) & 6) == 0) {
    *a3 = v3 | 0x400;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency(BlueFin::GlMeSrdAsicUnitConverter *this, float a2, const BlueFin::GlSignalId *a3)
{
  BlueFin::GlMeSrdAsicUnitConverter::CalcPpuToEswAidingFrequency(this, a2, a3);
  if (v3 <= -32768.0 || v3 >= 32767.0)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 168, "PpuToEswAidingFrequency", (char)"dEswAidFreqInHwUnits > SHRT_MIN && dEswAidFreqInHwUnits < SHRT_MAX");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 168, "dEswAidFreqInHwUnits > SHRT_MIN && dEswAidFreqInHwUnits < SHRT_MAX");
  }
  return (int)v3;
}

void BlueFin::GlMeSrdAsicUnitConverter::CalcPpuToEswAidingFrequency(BlueFin::GlMeSrdAsicUnitConverter *this, float a2, const BlueFin::GlSignalId *a3)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    int v10 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v11 = 806;
    goto LABEL_12;
  }
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this];
  uint64_t v5 = *((int *)this + 1);
  if (BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v5 + v4]) {
    BOOL v6 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v5 - v5 + v4] == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    int v10 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v11 = 814;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v11, v10);
  }
  BlueFin::GlMeSrdAsicUnitConverter::PpuToHz(this, a2, a3);
  uint64_t v9 = *((int *)this + 1);
  if (v9 == 2
    || BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v9
                                                              - v9
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]] == 4)
  {
    BlueFin::GlMeSrdAsicUnitConverter::PpuToHz(this, a2, v8);
  }
}

float BlueFin::GlMeSrdAsicUnitConverter::PpuToHz(BlueFin::GlMeSrdAsicUnitConverter *this, float a2, const BlueFin::GlSignalId *a3)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
  }
  uint64_t v3 = *(unsigned __int8 *)this;
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[v3];
  double v5 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)this + 1) - *((int *)this + 1) + v4]];
  if (v4 == 2)
  {
    double v6 = (double)(char)(v3 - 59);
    if ((v3 - 52) >= 0xE) {
      double v6 = -8.0;
    }
    double v5 = v5 + v6 * 562500.0;
  }
  float v7 = v5;
  return v7 * a2;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::PpuPerSecToEswAidingAcceleration(BlueFin::GlMeSrdAsicUnitConverter *this, float a2, const BlueFin::GlSignalId *a3)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu) {
    goto LABEL_20;
  }
  uint64_t v4 = *(unsigned __int8 *)this;
  uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
  uint64_t v6 = *((int *)this + 1);
  int v7 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v6 + v5];
  unsigned int v8 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v6 - v6 + v5];
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_19;
  }
  if (v6)
  {
    if ((v4 + 67) >= 0x44u
      && BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v5] != 255
      && (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v5]
                          + v4
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v5]) < 0x23Fu)
    {
      int v10 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[v5];
      if (v10)
      {
        unsigned int v11 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[v5];
        if (v11)
        {
          unsigned int v12 = 1000 * v10 / v11;
          goto LABEL_14;
        }
      }
LABEL_19:
      float v15 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
      float v16 = "glsignalid.h";
      int v17 = 814;
      goto LABEL_22;
    }
LABEL_20:
    float v15 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    float v16 = "glsignalid.h";
    int v17 = 806;
    goto LABEL_22;
  }
  unsigned int v12 = 1000 * v7 / v8;
LABEL_14:
  double v13 = BlueFin::GlMeSrdAsicUnitConverter::PpuToHz(this, a2, a3) * 8.79609302e12 / (double)v12 / (double)v12 + 0.5;
  if (*((_DWORD *)this + 1) == 2) {
    double v13 = v13 * 0.64;
  }
  if (v13 <= -32768.0 || v13 >= 32767.0)
  {
    float v15 = "dEswAccInHwUnits > SHRT_MIN && dEswAccInHwUnits < SHRT_MAX";
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 266, "PpuPerSecToEswAidingAcceleration", (char)"dEswAccInHwUnits > SHRT_MIN && dEswAccInHwUnits < SHRT_MAX");
    float v16 = "glmesrd_asic_unit_converter.cpp";
    int v17 = 266;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v16, v17, v15);
  }
  return (int)v13;
}

double BlueFin::GlSystemTime::getSubEpochTime(BlueFin::GlSystemTime *this, const BlueFin::GlSignalId *a2, unsigned __int8 a3)
{
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    uint64_t v5 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v6 = 678;
    goto LABEL_8;
  }
  unsigned int v3 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                              - *((int *)a2 + 1)
                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                              - *((int *)a2 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
  {
    uint64_t v5 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v6 = 685;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v6, v5);
  }
  double result = *(double *)this
         - (double)((*(double *)this * dbl_263BB2AE0[*(double *)this < 0.0]) / v3 * v3)
         * dbl_263BB2AF0[*(double *)this < 0.0];
  if ((a3 & (result < 0.0)) != 0) {
    return result + (double)v3 * 0.001;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetTrkSubChipResolution(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1458);
}

uint64_t BlueFin::GlMeAcqWindowProvider::mskfGetCbGoodQuality(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = 0x3FF0000000000000;
  uint64_t v6 = 0;
  return BlueFin::GlMeMiniKF::mskfGetCbGoodQuality(v3 + 9344, a2, (double *)&v6, a3, (double *)&v5, 0);
}

__n128 BlueFin::GlPeLtoMgr::UpdateQzssAlmanac(uint64_t a1, unsigned __int8 *a2)
{
  int v17 = 7;
  char v18 = 0;
  int v7 = -65536;
  uint64_t v8 = 0;
  int v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  __int16 v14 = 0;
  int v15 = -1;
  char v16 = 0;
  if (BlueFin::GlPeAlmanac::Import((uint64_t)&v7, a2, 3u, 4, 0.0)) {
    BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeAlmMgr *)(*(void *)(a1 + 80) + 34112), (const BlueFin::GlPeAlmanac *)&v7);
  }
  if (*a2 <= 0x3EuLL)
  {
    uint64_t v5 = a1 + 36 * *a2;
    __n128 result = *(__n128 *)a2;
    long long v6 = *((_OWORD *)a2 + 1);
    *(_DWORD *)(v5 + 1628BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a2 + 8);
    *(__n128 *)(v5 + 16248) = result;
    *(_OWORD *)(v5 + 16264) = v6;
  }
  return result;
}

BOOL BlueFin::GlPeAlmMgr::ApplyDecodedGlonassAlmanac(uint64_t a1, _DWORD *a2, unsigned __int16 *a3, int a4, double a5)
{
  if (!*(_DWORD *)(*(void *)(a1 + 448) + 2576)) {
    return 0;
  }
  LODWORD(a5) = *((_DWORD *)a3 + 2);
  double v9 = (double)*(unint64_t *)&a5 * 0.03125;
  int v10 = *a3;
  double v11 = fmod(v9, 1.0);
  if (v11 < 0.0 || v11 >= 1.0)
  {
LABEL_47:
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v13 = v11 * 4294967300.0 + 0.5;
  if (v13 >= 4294967300.0) {
    unsigned int v14 = -1;
  }
  else {
    unsigned int v14 = v13;
  }
  LODWORD(v79[0]) = v14;
  HIDWORD(v79[0]) = v9 + 86400 * v10 - 86400;
  int v15 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 32))(a2);
  LODWORD(v75) = a2[2];
  HIDWORD(v75) = v15;
  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)v79, (unsigned int *)&v75, 0x7861F80u);
  int v16 = (*(uint64_t (**)(_DWORD *, void))(*(void *)a2 + 24))(a2, HIDWORD(v79[0]));
  unsigned int v91 = v14;
  int v92 = v16;
  double v90 = &off_270EBF4E8;
  unint64_t v18 = *((unsigned __int8 *)a3 + 2);
  unsigned int v19 = *((unsigned __int8 *)a3 + 3);
  if (v19 <= 0xF) {
    char v20 = *((unsigned char *)a3 + 3);
  }
  else {
    char v20 = v19 - 32;
  }
  BOOL v22 = (v18 - 1) < 0x18u && (v20 + 7) < 0xEu;
  if (v22)
  {
    int v73 = a4;
    int v69 = *((_DWORD *)a3 + 1);
    int v23 = *((_DWORD *)a3 + 3);
    int v24 = *((_DWORD *)a3 + 4);
    LOWORD(v17) = a3[11];
    double v25 = (double)v17 * 0.000000953674316;
    int v26 = (__int16)a3[12];
    int v71 = (__int16)a3[13];
    int v27 = *((unsigned __int8 *)a3 + 28);
    unsigned int v80 = 0;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    __int16 v85 = 0;
    int v86 = -1;
    int v88 = 2;
    char v89 = v18;
    LOWORD(v79[0]) = v18;
    char v87 = v20;
    if (v27) {
      __int16 v28 = 0;
    }
    else {
      __int16 v28 = 63;
    }
    __int16 v65 = v28;
    char v66 = v20;
    WORD1(v79[0]) = v28;
    v79[1] = (double)v17 * 0.000000953674316;
    BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 448), (const BlueFin::GlGlnsTime *)&v90, 1, (uint64_t)&v75);
    unint64_t v78 = 0;
    float v77 = &off_270EBC600;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v75, (BlueFin::GlGpsTime *)&v77);
    unsigned int v29 = (((unsigned int (*)(void))v77[4])(&v77) % 0x93A80 + 2048) & 0x1FF000;
    unint64_t v76 = 0;
    float v75 = &off_270EBC600;
    if (v29 >= 0x93A80)
    {
      unsigned int v34 = ((uint64_t (*)(void))v77[4])(&v77);
      LODWORD(v76) = 0;
      HIDWORD(v76) = 604800 * (v34 / 0x93A80) + 604800;
    }
    else
    {
      unsigned int v30 = ((uint64_t (*)(void))v77[4])(&v77);
      int v74 = &off_270EBC600;
      double v31 = fmod((double)v29, 1.0);
      if (v31 >= 1.0) {
        goto LABEL_47;
      }
      double v32 = v31 * 4294967300.0 + 0.5;
      unsigned int v33 = v32;
      if (v32 >= 4294967300.0) {
        unsigned int v33 = -1;
      }
      LODWORD(v76) = v33;
      HIDWORD(v76) = v29 + 604800 * (v30 / 0x93A80);
    }
    double v70 = (double)v69 * 0.000000953674316;
    double v35 = (double)v24 * 0.001953125;
    double v36 = (double)v26 * 0.0000305175781;
    __int16 v37 = (((unsigned int (*)(void))v75[4])(&v75) / 0x93A80);
    __int16 v85 = v37;
    unsigned int v38 = ((unsigned int (*)(void))v75[4])(&v75) % 0x93A80;
    unsigned int v80 = v38;
    unsigned int v39 = v76;
    unsigned int v40 = HIDWORD(v76);
    if (v78)
    {
      if (v76 < v78)
      {
        unsigned int v40 = (__PAIR64__(HIDWORD(v78) - HIDWORD(v76), v78) - v76) >> 32;
        unsigned int v39 = v78 - v76;
        char v41 = 1;
      }
      else
      {
        char v41 = 0;
        unsigned int v40 = (v76 - v78) >> 32;
        unsigned int v39 = v76 - v78;
      }
    }
    else
    {
      char v41 = 0;
    }
    double v42 = (double)v39 * 2.32830644e-10 + (double)v40;
    if ((v41 & ((v40 | v39) != 0)) != 0) {
      double v42 = -v42;
    }
    double v67 = v42;
    double v68 = (double)v71;
    double v43 = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)v79, (double)v23 * 0.000000953674316);
    *(double *)&long long v81 = v43;
    double v44 = v36 * 3.14159265;
    long double v45 = tan(v36 * 3.14159265 * 0.5);
    long double v46 = atan(sqrt((1.0 - v25) / (v25 + 1.0)) * v45);
    double v47 = v46 + v46;
    double v48 = v35 + 43200.0;
    double v72 = v44;
    if (v44 >= 3.14159265) {
      double v49 = v35 + 43200.0;
    }
    else {
      double v49 = 0.0;
    }
    double v50 = 6.28318531;
    double v51 = 6.28318531 / v48;
    double v64 = v25;
    double v52 = v49 + (v47 - v25 * sin(v47)) / (6.28318531 / v48);
    double v53 = pow(3.9860044e14 / (v51 * v51), 0.333333333);
    long double v54 = pow(6378136.0 / v53, 3.5) * -10.0 * 0.0000002020057;
    double v63 = v43;
    double v55 = v54 * cos(v43);
    double v56 = sqrt(v53);
    *((double *)&v81 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v55;
    *(double *)&long long v82 = v56;
    unsigned int v57 = ((uint64_t (*)(void))v77[4])(&v77);
    LODWORD(v58) = v78;
    double v59 = fmod(((double)v58 * 2.32830644e-10 + (double)(v57 % 0x93A80)) * 0.00007292115 + v70 * 3.14159265 + v55 * v67, 6.28318531);
    *((double *)&v82 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v59;
    if (v59 <= 3.14159265)
    {
      if (v59 >= -3.14159265) {
        goto LABEL_44;
      }
    }
    else
    {
      double v50 = -6.28318531;
    }
    double v59 = v59 + v50;
    *((double *)&v82 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v59;
LABEL_44:
    *(double *)&long long v83 = v72;
    *((double *)&v83 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v51 * (v67 - v52);
    *((void *)&v84 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(double *)&long long v84 = v68 * -0.00000381469727;
    int v86 = v73;
    uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)a1, 2, v18);
    if (!BlueFin::GlPeAlmanac::operator==(v79, (double *)AlmReference))
    {
      *(_DWORD *)(AlmReference + 104) = 2;
      *(unsigned char *)(AlmReference + 108) = v18;
      *(_WORD *)uint64_t AlmReference = v18;
      *(_WORD *)(AlmReference + 2) = v65;
      *(double *)(AlmReference + 8) = v64;
      *(_DWORD *)(AlmReference + 16) = v38;
      *(double *)(AlmReference + 24) = v63;
      *(double *)(AlmReference + 32) = v55;
      *(double *)(AlmReference + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v56;
      *(double *)(AlmReference + 48) = v59;
      *(double *)(AlmReference + 56) = v72;
      *(double *)(AlmReference + 64) = v51 * (v67 - v52);
      *(double *)(AlmReference + 72) = v68 * -0.00000381469727;
      *(void *)(AlmReference + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *(_WORD *)(AlmReference + 88) = v37;
      *(_DWORD *)(AlmReference + 92) = v73;
      *(unsigned char *)(AlmReference + 96) = v66;
      LODWORD(v74) = 2;
      BYTE4(v74) = v18;
      uint64_t v61 = *(void *)(a1 + 432);
      *(_DWORD *)(*(void *)(v61 + 120) + ((v18 >> 3) & 0x1C)) |= 1 << v18;
      BlueFin::GlSetBase::Remove(v61 + 96, v18);
      BlueFin::GlPeAlmMgr::Serialize(a1, (uint64_t)&v74, 0);
    }
  }
  return v22;
}

uint64_t BlueFin::GlPeTimeManager::GetTime@<X0>(BlueFin::GlPeTimeManager *this@<X0>, const BlueFin::GlGlnsTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v10 = 0.0;
  uint64_t v9 = *((void *)a2 + 1);
  BlueFin::GlPeTimeManager::dateTimeToLms((uint64_t)this, 1, (unsigned int *)&v9, &v10);
  double v7 = v10;

  return BlueFin::GlPeTimeManager::commonGnssToLms(this, v7, a3, a4);
}

BOOL BlueFin::GlPeAlmMgr::SetAsstAlm(BlueFin::GlPeTimeManager **a1, unsigned __int8 *a2, unsigned int a3)
{
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  int v64 = -1;
  char v65 = 0;
  int v66 = 5;
  unsigned int v3 = *a2;
  char v67 = v3 + 1;
  if (v3 >= 0x24)
  {
    char v41 = "IS_GALILEO_GNSSID(ucGnssId)";
    DeviceFaultNotify("glpe_almmgr.cpp", 495, "Import", (char)"IS_GALILEO_GNSSID(ucGnssId)");
    double v42 = "glpe_almmgr.cpp";
    int v43 = 495;
    goto LABEL_38;
  }
  double v5 = (double)*((__int16 *)a2 + 5) * 0.001953125 + 5440.7074;
  unsigned int v6 = *((unsigned __int16 *)a2 + 2);
  double v7 = v5 * v5;
  BOOL v8 = v5 >= 8192.0;
  if (v5 * v5 < 7078137.0) {
    BOOL v8 = 1;
  }
  __int16 v9 = *((_WORD *)a2 + 9);
  if (v6 > 0x3FF || v8 || (unsigned __int16)(v9 - 4096) < 0xE000u)
  {
    if (v6 <= 0x3FF) {
      double v35 = (const char *)&unk_263B6E70D;
    }
    else {
      double v35 = "toa ";
    }
    if (v8) {
      double v36 = "Asqrt ";
    }
    else {
      double v36 = (const char *)&unk_263B6E70D;
    }
    if ((unsigned __int16)(v9 - 4096) >= 0xE000u) {
      __int16 v37 = (const char *)&unk_263B6E70D;
    }
    else {
      __int16 v37 = "a_f1 ";
    }
    GlCustomLog(14, "Reject GAL Alm %d [ %s%s%s%s%s%s%s%s]\n", (v3 + 1), (const char *)&unk_263B6E70D, v35, v36, (const char *)&unk_263B6E70D, (const char *)&unk_263B6E70D, (const char *)&unk_263B6E70D, (const char *)&unk_263B6E70D, v37);
    return 0;
  }
  int v12 = 4 * (a3 != 0);
  v56[0] = v3 + 1;
  int v13 = a2[22] & 3;
  __int16 v63 = a2[22] & 3;
  v56[1] = a2[23];
  LOWORD(v7) = *((_WORD *)a2 + 1);
  double v57 = (double)*(unint64_t *)&v7 * 0.0000152587891 + 0.0;
  double v14 = (double)v6 * 600.0;
  double v15 = fmod(v14, 4294967300.0);
  if (v14 <= 4294967300.0) {
    double v15 = v14;
  }
  if (v15 < -4294967300.0) {
    double v15 = -fmod(-v15, 4294967300.0);
  }
  if (v15 < 0.0) {
    unsigned int v16 = --v15;
  }
  else {
    unsigned int v16 = v15;
  }
  unsigned int v58 = v16;
  double v17 = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)v56, (double)*((__int16 *)a2 + 3) * 0.0000610351562);
  double v18 = (double)*((__int16 *)a2 + 4) * 3.6572952e-10;
  double v19 = (double)*((__int16 *)a2 + 6);
  *(double *)&long long v59 = v17;
  *((double *)&v59 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v18;
  *(double *)&long long v60 = v5;
  *((double *)&v60 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v19 * 0.0000958737992;
  double v20 = (double)*((__int16 *)a2 + 8) * 0.0000958737992;
  double v21 = (double)*((__int16 *)a2 + 10);
  *(double *)&long long v61 = (double)*((__int16 *)a2 + 7) * 0.0000958737992;
  *((double *)&v61 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v20;
  *(double *)&long long v62 = v21 * 0.00000190734863;
  *((double *)&v62 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (double)v9 * 3.63797881e-12;
  int v64 = v12;
  char v65 = 0;
  long double v54 = &off_270EBC600;
  unint64_t v55 = 0;
  BOOL v22 = a1[56];
  int v23 = *((_DWORD *)v22 + 644);
  BOOL v24 = v23 != 0;
  if (v23)
  {
    double v51 = &off_270EBF538;
    double v25 = fmod((double)v16, 1.0);
    if (v25 < 1.0)
    {
      double v26 = v25 * 4294967300.0 + 0.5;
      unsigned int v27 = v26;
      if (v26 >= 4294967300.0) {
        unsigned int v27 = -1;
      }
      unsigned int v52 = v27;
      int v53 = v16 + 604800 * v13 + 619315200;
      unint64_t v50 = 0;
      double v51 = &off_270EBF538;
      double v49 = &off_270EBF538;
      if (a3)
      {
        double v47 = &off_270EBC600;
        double v28 = fmod((double)(a3 % 0x93A80), 1.0);
        if (v28 >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        double v29 = v28 * 4294967300.0 + 0.5;
        unsigned int v30 = v29;
        if (v29 >= 4294967300.0) {
          unsigned int v30 = -1;
        }
        unint64_t v48 = __PAIR64__(a3, v30);
        double v47 = &off_270EBC600;
        BlueFin::GlPeTimeManager::GetTime(v22, (const BlueFin::GlGpsTime *)&v47, 1, (uint64_t)v44);
        long double v45 = &off_270EBF538;
        uint64_t v46 = 0;
        BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v44, (BlueFin::GlGalTime *)&v45);
        unsigned int v31 = ((uint64_t (*)(void))v51[4])(&v51);
        unsigned int v69 = v52;
        unsigned int v70 = v31;
        unsigned int v32 = ((uint64_t (*)(void))v45[4])(&v45);
        v68[0] = v46;
        v68[1] = v32;
        BlueFin::GlTimePoint::resolveAmbiguity(&v69, v68, 0x24EA00u);
        unsigned int v33 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v45[3])(&v45, v70);
        unsigned int v34 = v69;
      }
      else
      {
        BlueFin::GlPeTimeManager::GetTime(v22, 1, v44);
        double v47 = &off_270EBF538;
        unint64_t v48 = 0;
        BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v44, (BlueFin::GlGalTime *)&v47);
        unsigned int v38 = ((uint64_t (*)(void))v51[4])(&v51);
        long double v45 = (void (**)(BlueFin::GlGalTime *__hidden))__PAIR64__(v38, v52);
        unsigned int v39 = ((uint64_t (*)(void))v47[4])(&v47);
        unsigned int v69 = v48;
        unsigned int v70 = v39;
        BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v45, &v69, 0x24EA00u);
        unsigned int v33 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v47[3])(&v47, HIDWORD(v45));
        unsigned int v34 = v45;
      }
      unint64_t v50 = __PAIR64__(v33, v34);
      BlueFin::GlPeTimeManager::GetTime(a1[56], (const BlueFin::GlGalTime *)&v49, 1, (uint64_t)v44);
      double v47 = &off_270EBC600;
      unint64_t v48 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v44, (BlueFin::GlGpsTime *)&v47);
      unint64_t v55 = v48;
      __int16 v63 = (((unsigned int (*)(void))v54[4])(&v54) / 0x93A80);
      unsigned int v58 = ((unsigned int (*)(void))v54[4])(&v54) % 0x93A80;
      BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeAlmMgr *)a1, (const BlueFin::GlPeAlmanac *)v56);
      return v24;
    }
    char v41 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    double v42 = "glpe_timepoint.h";
    int v43 = 173;
LABEL_38:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v42, v43, v41);
  }
  return v24;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateBdsAlmanac(uint64_t result, unsigned __int8 *a2)
{
  if (*(_DWORD *)(*(void *)(result + 88) + 2576))
  {
    uint64_t v3 = result;
    int v34 = 7;
    char v35 = 0;
    int v24 = -65536;
    uint64_t v25 = 0;
    unsigned int v26 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    unsigned __int16 v31 = 0;
    int v32 = -1;
    char v33 = 0;
    __n128 result = BlueFin::GlPeAlmanac::Import((uint64_t)&v24, a2, 4u, 4, 0.0);
    if (result)
    {
      int v4 = v31;
      unsigned int v5 = v26;
      double v21 = &off_270EBF588;
      double v6 = fmod((double)v26, 1.0);
      if (v6 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v7 = v6 * 4294967300.0 + 0.5;
      unsigned int v8 = v7;
      if (v7 >= 4294967300.0) {
        unsigned int v8 = -1;
      }
      unsigned int v22 = v8;
      int v23 = v5 + 604800 * v4 + 820108814;
      double v21 = &off_270EBF588;
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v3 + 88), 1, v15);
      unsigned int v16 = &off_270EBF588;
      uint64_t v17 = 0;
      BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)v15, (BlueFin::GlBdsTime *)&v16);
      unsigned int v9 = ((uint64_t (*)(void))v21[4])(&v21);
      unsigned int v37 = v22;
      unsigned int v38 = v9;
      unsigned int v10 = ((uint64_t (*)(void))v16[4])(&v16);
      v36[0] = v17;
      v36[1] = v10;
      BlueFin::GlTimePoint::resolveAmbiguity(&v37, v36, 0x93A8000u);
      int v11 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v16[3])(&v16, v38);
      unsigned int v19 = v37;
      int v20 = v11;
      double v18 = &off_270EBF588;
      BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v3 + 88), (const BlueFin::GlBdsTime *)&v18, 1, (uint64_t)v15);
      unsigned int v16 = &off_270EBC600;
      uint64_t v17 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v15, (BlueFin::GlGpsTime *)&v16);
      unsigned __int16 v31 = (((unsigned int (*)(void))v16[4])(&v16) / 0x93A80);
      unsigned int v26 = ((unsigned int (*)(void))v16[4])(&v16) % 0x93A80;
      __n128 result = BlueFin::GlPeAlmMgr::SetAsstAlm((BlueFin::GlPeAlmMgr *)(*(void *)(v3 + 80) + 34112), (const BlueFin::GlPeAlmanac *)&v24);
      if (*a2 <= 0x3EuLL)
      {
        uint64_t v12 = v3 + 36 * *a2;
        int v13 = *((_DWORD *)a2 + 8);
        long long v14 = *(_OWORD *)a2;
        *(_OWORD *)(v12 + 16624) = *((_OWORD *)a2 + 1);
        *(_OWORD *)(v12 + 16608) = v14;
        *(_DWORD *)(v12 + 1664BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v13;
      }
    }
  }
  return result;
}

BOOL BlueFin::GlPeAlmMgr::SetAsstAlm(BlueFin::GlPeAlmMgr *this, const BlueFin::GlPeAlmanac *a2)
{
  int v5 = *((_DWORD *)a2 + 23);
  if (*(_DWORD *)(*((void *)this + 56) + 2576)) {
    BOOL v6 = v5 == 2;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v31 = 7;
    char v32 = 0;
    LODWORD(v25) = -65536;
    uint64_t v26 = 0;
    LODWORD(v27) = 0;
    memset(v28, 0, 66);
    *(_DWORD *)&v28[68] = -1;
    LOBYTE(v29) = 0;
    if (BlueFin::GlPeAlmMgr::GetAlm((uint64_t)this, *((_DWORD *)a2 + 26), *((unsigned __int8 *)a2 + 108), (uint64_t)&v25, 1, 1))
    {
      BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 56), 1, v37);
      v38[0] = &off_270EBC600;
      v38[1] = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v37, (BlueFin::GlGpsTime *)v38);
      BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&v25, (const BlueFin::GlGpsTime *)v38, (uint64_t)v37);
      unsigned int v7 = (*(uint64_t (**)(__n128 *))(v37[0].n128_u64[0] + 32))(v37);
      LODWORD(v2) = v37[0].n128_u32[2];
      BlueFin::GlPeAlmanac::GetToa(a2, (const BlueFin::GlGpsTime *)v38, (uint64_t)&v35);
      unsigned int v8 = (*(uint64_t (**)(uint64_t *))(v35 + 32))(&v35);
      if ((double)v2 * 2.32830644e-10 + (double)v7 > (double)(v36 | 0x3DEFFFFF00000000uLL) * 2.32830644e-10
                                                    + (double)v8)
        return 0;
    }
    int v5 = *((_DWORD *)a2 + 23);
  }
  uint64_t v25 = &unk_270EBF948;
  int v9 = *((_DWORD *)a2 + 26);
  int v33 = v9;
  unsigned int v10 = *((unsigned __int8 *)a2 + 108);
  char v34 = *((unsigned char *)a2 + 108);
  LODWORD(v26) = *(_DWORD *)a2;
  uint64_t v27 = *((void *)a2 + 1);
  *(_DWORD *)long long v28 = *((_DWORD *)a2 + 4);
  long long v11 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)&v28[8] = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)&v28[24] = v11;
  long long v12 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)&v28[40] = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)&v28[56] = v12;
  __int16 v29 = *((_WORD *)a2 + 44);
  int v30 = v5;
  LOBYTE(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((unsigned char *)a2 + 96);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    BlueFin::GlPeAlmanacData::SerializeImpl();
    int v9 = *((_DWORD *)a2 + 26);
    unsigned int v10 = *((unsigned __int8 *)a2 + 108);
  }
  uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, v9, v10);
  double v14 = *((double *)a2 + 5) * *((double *)a2 + 5);
  BOOL v15 = v14 >= 7078137.0;
  if (v14 < 7078137.0)
  {
    int v18 = *((_DWORD *)a2 + 26);
    unsigned int v19 = "BDS";
    int v20 = "GPS";
    switch(v18)
    {
      case 0:
        break;
      case 1:
        int v20 = "SBAS";
        break;
      case 2:
        int v20 = "GLNS";
        break;
      case 3:
        int v20 = "QZSS";
        break;
      case 4:
        goto LABEL_23;
      default:
        double v21 = "<->";
        if (v18 == 6) {
          double v21 = "NIC";
        }
        unsigned int v19 = "GAL";
        if (v18 != 5) {
          unsigned int v19 = v21;
        }
LABEL_23:
        int v20 = v19;
        break;
    }
    uint64_t v22 = *((unsigned int *)a2 + 23);
    if (v22 > 4) {
      int v23 = "INV";
    }
    else {
      int v23 = BlueFin::GlPeAlmanac::GetSourceStr(void)const::aacSourceStr[v22];
    }
    GlCustomLog(11, "GlPeAlmMgr::SetAsstAlm:Rejected Alm %s %02d  Source:%s  Reason:Invalid ASqrt(%.0lf)\n", v20, *((unsigned __int8 *)a2 + 108), v23, *((double *)a2 + 5));
  }
  else
  {
    BlueFin::GlPeAlmanac::operator=(AlmReference, (uint64_t)a2);
    unsigned int v16 = *((unsigned __int8 *)a2 + 108);
    if (v16 - 64 <= 0xFFFFFFC0)
    {
      DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
    }
    uint64_t v17 = *((void *)this + 54) + 48 * *((unsigned int *)a2 + 26);
    *(_DWORD *)(*(void *)(v17 + 24) + 4 * (v16 >> 5)) |= 1 << v16;
    BlueFin::GlSetBase::Remove(v17, v16);
    *((unsigned char *)this + 36712) = 0;
  }
  return v15;
}

uint64_t BlueFin::GlPeAlmanac::Import(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4, double a5)
{
  unsigned int v8 = 7078137;
  *(_DWORD *)(a1 + 104) = a3;
  unsigned int v9 = *a2;
  *(unsigned char *)(a1 + 108) = v9 + 1;
  switch(a3)
  {
    case 0u:
      if (v9 > 0x1F) {
        return 0;
      }
      uint64_t v52 = a3;
      unsigned __int8 v53 = v9 + 1;
      int v54 = a4;
      unsigned int v8 = 6400900;
      *(_WORD *)a1 = v9 + 1;
      LOWORD(a5) = *((_WORD *)a2 + 1);
      double v10 = (double)*(unint64_t *)&a5 * 0.000000476837158 + 0.0;
      BOOL v11 = v10 >= 0.0;
      if (v10 > 0.03) {
        BOOL v11 = 0;
      }
      int v55 = v11;
      a5 = (double)*((__int16 *)a2 + 4) * 1.14290475e-11;
      BOOL v12 = a5 >= -0.00000198862815 && a5 <= 0.0;
      unsigned int v13 = 0x2000;
      break;
    case 1u:
      if (v9 > 0x12) {
        return 0;
      }
      goto LABEL_13;
    case 2u:
      DeviceFaultNotify("glpe_almmgr.cpp", 394, "Import", (char)"0");
      int v51 = 394;
      goto LABEL_94;
    case 3u:
      if (v9 > 9) {
        return 0;
      }
LABEL_13:
      uint64_t v52 = a3;
      unsigned __int8 v53 = v9 + 1;
      *(_WORD *)a1 = v9 + 193;
      unsigned int v13 = 10000;
      int v54 = a4;
      int v55 = 1;
      goto LABEL_18;
    case 4u:
      if (v9 > 0x3E) {
        return 0;
      }
      uint64_t v52 = a3;
      unsigned __int8 v53 = v9 + 1;
      *(_WORD *)a1 = v9 + 1;
      LOWORD(a5) = *((_WORD *)a2 + 1);
      a5 = (double)*(unint64_t *)&a5 * 0.000000476837158 + 0.0;
      BOOL v14 = a5 >= 0.0;
      if (a5 > 0.0625) {
        BOOL v14 = 0;
      }
      int v54 = a4;
      int v55 = v14;
      unsigned int v13 = 0x2000;
LABEL_18:
      BOOL v12 = 1;
      break;
    case 5u:
      DeviceFaultNotify("glpe_almmgr.cpp", 429, "Import", (char)"0");
      int v51 = 429;
      goto LABEL_94;
    case 6u:
      DeviceFaultNotify("glpe_almmgr.cpp", 434, "Import", (char)"0");
      int v51 = 434;
LABEL_94:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", v51, "0");
    default:
      uint64_t v52 = a3;
      unsigned __int8 v53 = v9 + 1;
      int v54 = a4;
      int v55 = 0;
      BOOL v12 = 0;
      unsigned int v13 = 10000;
      break;
  }
  LODWORD(a5) = *((_DWORD *)a2 + 3);
  double v15 = (double)*(unint64_t *)&a5 * 0.00048828125;
  double v16 = fmod(v15, 4294967300.0);
  if (v15 <= 4294967300.0) {
    double v16 = v15;
  }
  if (v16 < -4294967300.0) {
    double v16 = -fmod(-v16, 4294967300.0);
  }
  if (v16 < 0.0) {
    unsigned int v17 = --v16;
  }
  else {
    unsigned int v17 = v16;
  }
  unsigned int v18 = v17 + 1;
  unsigned int v19 = a2[4];
  unint64_t v20 = *((void *)a2 + 2);
  int v21 = *((_DWORD *)a2 + 6);
  __int16 v22 = *((_WORD *)a2 + 15);
  __int16 v23 = *((_WORD *)a2 + 14);
  BOOL v24 = v18 > v13 || v8 > v18 * v18;
  int v25 = v24;
  BOOL v26 = v24 || v19 > 0x93;
  if ((*((void *)a2 + 2) - 0x800000) >> 24 != 255) {
    BOOL v26 = 1;
  }
  uint64_t v27 = (const char *)&unk_263B6E70D;
  char v28 = (HIDWORD(*((void *)a2 + 2)) - 0x800000) >> 24 != 255 || v26;
  if ((v28 & (v19 > 0x93)) != 0) {
    __int16 v29 = "toa ";
  }
  else {
    __int16 v29 = (const char *)&unk_263B6E70D;
  }
  unsigned int v30 = (unsigned __int16)(v22 - 1024) >> 11;
  unsigned int v31 = (unsigned __int16)(v23 - 1024) >> 11;
  if ((v28 & 1) != 0
    || (v21 - 0x800000) >> 24 != 255
    || v30 < 0x1F
    || v31 < 0x1F
    || ((v55 ^ 1) & 1) != 0
    || !v12)
  {
    if (a3 > 4)
    {
      char v41 = "<->";
      unsigned __int8 v43 = v53;
LABEL_65:
      double v42 = v41;
    }
    else
    {
      char v41 = "BDS";
      double v42 = "GPS";
      unsigned __int8 v43 = v53;
      switch(v52)
      {
        case 1:
          double v42 = "SBAS";
          break;
        case 2:
          double v42 = "GLNS";
          break;
        case 3:
          double v42 = "QZSS";
          break;
        case 4:
          goto LABEL_65;
        default:
          break;
      }
    }
    if (v25) {
      double v44 = "Asqrt ";
    }
    else {
      double v44 = (const char *)&unk_263B6E70D;
    }
    if ((*((void *)a2 + 2) - 0x800000) >> 24 == 255) {
      long double v45 = (const char *)&unk_263B6E70D;
    }
    else {
      long double v45 = "omega0 ";
    }
    if ((HIDWORD(*((void *)a2 + 2)) - 0x800000) >> 24 == 255) {
      uint64_t v46 = (const char *)&unk_263B6E70D;
    }
    else {
      uint64_t v46 = "omega ";
    }
    double v47 = "M0 ";
    if ((v21 - 0x800000) >> 24 == 255) {
      double v47 = (const char *)&unk_263B6E70D;
    }
    if (v30 >= 0x1F) {
      unint64_t v48 = (const char *)&unk_263B6E70D;
    }
    else {
      unint64_t v48 = "a_f0 ";
    }
    if (v31 >= 0x1F) {
      double v49 = (const char *)&unk_263B6E70D;
    }
    else {
      double v49 = "a_f1 ";
    }
    unint64_t v50 = "e ";
    if (v55) {
      unint64_t v50 = (const char *)&unk_263B6E70D;
    }
    if (!v12) {
      uint64_t v27 = "omega_dot ";
    }
    GlCustomLog(14, "Reject Alm %s %d [ %s%s%s%s%s%s%s%s%s]\n", v42, v43, v29, v44, v45, v46, v47, v48, v49, v50, v27);
    return 0;
  }
  else
  {
    *(void *)double v56 = *((void *)a2 + 2);
    *(_WORD *)(a1 + 88) = a2[32];
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 17);
    LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)a2 + 1);
    double v32 = (double)v20;
    double v33 = 0.06;
    if (v9 - 5 < 5) {
      double v33 = 0.0;
    }
    if (a3 != 3) {
      double v33 = 0.0;
    }
    *(double *)(a1 + 8) = v33 + v32 * 0.000000476837158;
    double v34 = (double)v19 * 4096.0;
    double v35 = fmod(v34, 4294967300.0);
    if (v34 <= 4294967300.0) {
      double v35 = v34;
    }
    if (v35 < -4294967300.0) {
      double v35 = -fmod(-v35, 4294967300.0);
    }
    if (v35 < 0.0) {
      unsigned int v36 = --v35;
    }
    else {
      unsigned int v36 = v35;
    }
    *(_DWORD *)(a1 + 16) = v36;
    double v37 = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)a1, (double)*((__int16 *)a2 + 3) * 0.00000190734863);
    double v38 = (double)*((__int16 *)a2 + 4) * 1.14290475e-11;
    v39.i64[0] = v56[0];
    v39.i64[1] = v56[1];
    *(double *)(a1 + 24) = v37;
    *(double *)(a1 + 32) = v38;
    *(double *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v15;
    *(float64x2_t *)(a1 + 48) = vmulq_f64(vcvtq_f64_s64(v39), (float64x2_t)vdupq_n_s64(0x3E9921FB54442D19uLL));
    *(double *)(a1 + 64) = (double)v21 * 0.000000374507028;
    *(double *)(a1 + 72) = (double)v22 * 0.000000953674316;
    *(double *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (double)v23 * 3.63797881e-12;
    *(_DWORD *)(a1 + 92) = v54;
    *(unsigned char *)(a1 + 96) = 0;
    return 1;
  }
}

double BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad(BlueFin::GlPeAlmanac *this, double a2)
{
  double v2 = 0.0;
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      double v2 = 0.3;
      break;
    case 2:
      double v2 = 0.35;
      break;
    case 3:
      BOOL v3 = *((unsigned __int8 *)this + 108) - 6 >= 5;
      double v2 = 0.25;
      goto LABEL_9;
    case 4:
      int v4 = *((unsigned __int8 *)this + 108);
      BOOL v3 = (v4 - 59) >= 5 && (v4 - 1) >= 5;
      double v2 = 0.3;
LABEL_9:
      if (!v3) {
        double v2 = 0.0;
      }
      break;
    case 5:
      double v2 = 0.311111111;
      break;
    default:
      return (v2 + a2) * 3.14159265;
  }
  return (v2 + a2) * 3.14159265;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoGnssL5Health(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v6 = &unk_270EC1620;
  unsigned int v7 = 7;
  v8[0] = -1;
  uint64_t v9 = 0xFFFFFFFFLL;
  uint64_t v3 = BlueFin::GlPeLtoGnssL5HealthDataInterface::Deserialize((BlueFin::GlPeLtoGnssL5HealthDataInterface *)&v6, a2);
  if (v3)
  {
    if (v7 > 6) {
      int v4 = "INV";
    }
    else {
      int v4 = off_2655DF758[v7];
    }
    GlCustomLog(14, "LtoMgr: read LTO (%s %d) L5Health from NVMEM!\n", v4, v8[0] + 1);
    BlueFin::GlPeLtoMgr::UpdateGnssL5Health((uint64_t)this, v7, (uint64_t)v8, 1u, 1);
  }
  return v3;
}

void BlueFin::GlPeLtoMgr::UpdateGnssL5Health(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if (a3)
  {
    BOOL v6 = *(BlueFin::GlPeTimeManager **)(a1 + 88);
    if (*((_DWORD *)v6 + 644))
    {
      uint64_t v67 = a1;
      BlueFin::GlPeTimeManager::GetTime(v6, 1, v69);
      if (a4)
      {
        uint64_t v10 = 0;
        char v65 = (unsigned int *)(v67 + 4 * a2 + 988);
        uint64_t v11 = a4;
        uint64_t v66 = a4;
        do
        {
          BOOL v12 = (unsigned char *)(a3 + 12 * v10);
          if (*v12 != 255)
          {
            uint64_t v13 = a3 + 12 * v10;
            int v15 = *(_DWORD *)(v13 + 4);
            BOOL v14 = (int *)(v13 + 4);
            if (v15 != -1)
            {
              uint64_t v16 = a3 + 12 * v10;
              int v19 = *(unsigned __int16 *)(v16 + 10);
              unsigned int v17 = (_WORD *)(v16 + 10);
              int v18 = v19;
              unsigned int v20 = 300 * (unsigned __int16)*(v17 - 1);
              switch(a2)
              {
                case 0:
                case 3:
                  float v77 = &off_270EBC600;
                  uint64_t v78 = 0;
                  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v69, (BlueFin::GlGpsTime *)&v77);
                  float v75 = &off_270EBC600;
                  double v21 = fmod((double)v20, 1.0);
                  if (v21 >= 1.0)
                  {
                    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
                  }
                  double v22 = v21 * 4294967300.0 + 0.5;
                  unsigned int v23 = v22;
                  if (v22 >= 4294967300.0) {
                    unsigned int v23 = -1;
                  }
                  LODWORD(v76) = v23;
                  HIDWORD(v76) = v20 + 604800 * v18;
                  float v75 = &off_270EBC600;
                  double v72 = (void (**)(BlueFin::GlGalTime *__hidden))__PAIR64__(HIDWORD(v76), v23);
                  unsigned int v24 = ((uint64_t (*)(void))v77[4])(&v77);
                  unsigned int v70 = (void (**)(BlueFin::GlGpsTime *__hidden))__PAIR64__(v24, v78);
                  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v72, (unsigned int *)&v70, 0x27500000u);
                  unsigned int v25 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v77[3])(&v77, HIDWORD(v72));
                  unint64_t v76 = __PAIR64__(v25, v72);
                  double v26 = (double)((unsigned int (*)(void))v75[4])(&v75);
                  LODWORD(v27) = v76;
                  goto LABEL_25;
                case 4:
                  float v75 = &off_270EBF588;
                  unint64_t v76 = 0;
                  BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)v69, (BlueFin::GlBdsTime *)&v75);
                  double v72 = &off_270EBF588;
                  double v28 = fmod((double)v20, 1.0);
                  if (v28 >= 1.0)
                  {
                    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
                  }
                  double v29 = v28 * 4294967300.0 + 0.5;
                  unsigned int v30 = v29;
                  if (v29 >= 4294967300.0) {
                    unsigned int v30 = -1;
                  }
                  unsigned int v73 = v30;
                  int v74 = v20 + 604800 * v18 + 820108814;
                  double v72 = &off_270EBF588;
                  LODWORD(v77) = v30;
                  HIDWORD(v77) = v20 + 604800 * v18;
                  unsigned int v31 = ((uint64_t (*)(void))v75[4])(&v75);
                  unsigned int v70 = (void (**)(BlueFin::GlGpsTime *__hidden))__PAIR64__(v31, v76);
                  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v77, (unsigned int *)&v70, 0x27500000u);
                  int v32 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v75[3])(&v75, HIDWORD(v77));
                  unsigned int v73 = v77;
                  int v74 = v32;
                  BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v67 + 88), (const BlueFin::GlBdsTime *)&v72, 1, (uint64_t)&v77);
                  unsigned int v70 = &off_270EBC600;
                  uint64_t v71 = 0;
                  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v77, (BlueFin::GlGpsTime *)&v70);
                  unsigned int v33 = ((uint64_t (*)(void))v70[4])(&v70);
                  goto LABEL_24;
                case 5:
                  float v75 = &off_270EBF538;
                  unint64_t v76 = 0;
                  BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v69, (BlueFin::GlGalTime *)&v75);
                  double v72 = &off_270EBF538;
                  double v34 = fmod((double)v20, 1.0);
                  if (v34 >= 1.0)
                  {
                    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
                  }
                  double v35 = v34 * 4294967300.0 + 0.5;
                  unsigned int v36 = v35;
                  if (v35 >= 4294967300.0) {
                    unsigned int v36 = -1;
                  }
                  unsigned int v73 = v36;
                  int v74 = v20 + 604800 * v18 + 619315200;
                  double v72 = &off_270EBF538;
                  LODWORD(v77) = v36;
                  HIDWORD(v77) = v20 + 604800 * v18;
                  unsigned int v37 = ((uint64_t (*)(void))v75[4])(&v75);
                  unsigned int v70 = (void (**)(BlueFin::GlGpsTime *__hidden))__PAIR64__(v37, v76);
                  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v77, (unsigned int *)&v70, 0x27500000u);
                  int v38 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v75[3])(&v75, HIDWORD(v77));
                  unsigned int v73 = v77;
                  int v74 = v38;
                  BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v67 + 88), (const BlueFin::GlGalTime *)&v72, 1, (uint64_t)&v77);
                  unsigned int v70 = &off_270EBC600;
                  uint64_t v71 = 0;
                  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v77, (BlueFin::GlGpsTime *)&v70);
                  unsigned int v33 = ((uint64_t (*)(void))v70[4])(&v70);
                  goto LABEL_24;
                case 6:
                  float v75 = &off_270EBF080;
                  unint64_t v76 = 0;
                  BlueFin::GlPeGnssTime::GetNic((BlueFin::GlPeGnssTime *)v69, (BlueFin::GlNicTime *)&v75);
                  double v72 = &off_270EBF080;
                  double v39 = fmod((double)v20, 1.0);
                  if (v39 >= 1.0)
                  {
                    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
                  }
                  double v40 = v39 * 4294967300.0 + 0.5;
                  unsigned int v41 = v40;
                  if (v40 >= 4294967300.0) {
                    unsigned int v41 = -1;
                  }
                  unsigned int v73 = v41;
                  int v74 = v20 + 604800 * v18 + 619315200;
                  double v72 = &off_270EBF080;
                  LODWORD(v77) = v41;
                  HIDWORD(v77) = v20 + 604800 * v18;
                  unsigned int v42 = ((uint64_t (*)(void))v75[4])(&v75);
                  unsigned int v70 = (void (**)(BlueFin::GlGpsTime *__hidden))__PAIR64__(v42, v76);
                  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v77, (unsigned int *)&v70, 0x27500000u);
                  int v43 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v75[3])(&v75, HIDWORD(v77));
                  unsigned int v73 = v77;
                  int v74 = v43;
                  BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(v67 + 88), (const BlueFin::GlNicTime *)&v72, 1, (uint64_t)&v77);
                  unsigned int v70 = &off_270EBC600;
                  uint64_t v71 = 0;
                  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v77, (BlueFin::GlGpsTime *)&v70);
                  unsigned int v33 = ((uint64_t (*)(void))v70[4])(&v70);
LABEL_24:
                  double v26 = (double)v33;
                  LODWORD(v27) = v71;
LABEL_25:
                  double v44 = (double)v27 * 2.32830644e-10 + v26;
                  double v45 = fmod(v44, 4294967300.0);
                  if (v44 <= 4294967300.0) {
                    double v45 = v44;
                  }
                  if (v45 < -4294967300.0) {
                    double v45 = -fmod(-v45, 4294967300.0);
                  }
                  if (v45 < 0.0) {
                    unsigned int v46 = --v45;
                  }
                  else {
                    unsigned int v46 = v45;
                  }
                  char v47 = *v12 + 1;
                  LODWORD(v75) = a2;
                  BYTE4(v75) = v47;
                  if (a5)
                  {
                    unsigned int v48 = *v65;
                    if (!*v65) {
                      unsigned int v48 = v46;
                    }
                    unsigned int v49 = v48 + 10800;
                    if (v48 != -10800) {
LABEL_36:
                    }
                      BlueFin::GlPeSvHealthMgr::SetGnssSvL5Health(*(void *)(v67 + 120), (unsigned int *)&v75, v49, *v14 == 0, a5);
                  }
                  else
                  {
                    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(v67 + 80) + 384), a2);
                    if (Mgr)
                    {
                      uint64_t v51 = (*(uint64_t (**)(void *, char *, uint64_t))(*Mgr + 112))(Mgr, (char *)&v75 + 4, 1);
                      uint64_t v52 = v51;
                      if (v51)
                      {
                        if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 144))(v51) == 3)
                        {
                          float v77 = &off_270EBC600;
                          uint64_t v78 = 0;
                          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v69, (BlueFin::GlGpsTime *)&v77);
                          unsigned int v53 = ((uint64_t (*)(void))v77[4])(&v77);
                          LODWORD(v44) = v78;
                          unsigned int v54 = (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)v52 + 248))(v52, v69)
                              + ((double)*(unint64_t *)&v44 * 2.32830644e-10 + (double)v53);
                          unsigned int v49 = v46 <= v54 ? v54 : v46;
                          if (v49) {
                            goto LABEL_36;
                          }
                        }
                      }
                    }
                  }
                  uint64_t v11 = v66;
LABEL_45:
                  if (a5)
                  {
                    unsigned int v55 = *v12;
                    if (v55 <= 0x3E && a2 <= 6)
                    {
                      int v57 = *v14;
                      if (v55 != 255 && v57 != -1)
                      {
                        uint64_t v59 = 0;
                        float v77 = (void (**)(BlueFin::GlGpsTime *__hidden))(v67 + 20116);
                        uint64_t v78 = 0xB00000000;
                        uint64_t v79 = v67 + 20500;
                        uint64_t v80 = 0xC00000003;
                        uint64_t v81 = v67 + 20620;
                        uint64_t v82 = 0xD00000004;
                        uint64_t v83 = v67 + 21376;
                        uint64_t v84 = 0xE00000005;
                        while (1)
                        {
                          long long v60 = &(&v77)[v59];
                          if (LODWORD((&v77)[v59 + 1]) == a2) {
                            break;
                          }
                          v59 += 2;
                          if (v59 == 8) {
                            goto LABEL_64;
                          }
                        }
                        long long v61 = *v60;
                        long long v62 = (char *)*v60 + 12 * v55;
                        *(_DWORD *)(v67 + 26464) |= 1 << *((_WORD *)v60 + 6);
                        if (v61) {
                          BOOL v63 = v62 == v12;
                        }
                        else {
                          BOOL v63 = 1;
                        }
                        if (!v63)
                        {
                          *long long v62 = v55;
                          uint64_t v64 = (uint64_t)v61 + 12 * v55;
                          *(_DWORD *)(v64 + 4) = v57;
                          *(_WORD *)(v64 + 8) = *(v17 - 1);
                          *(_WORD *)(v64 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *v17;
                        }
                      }
                    }
                  }
                  break;
                default:
                  goto LABEL_45;
              }
            }
          }
LABEL_64:
          ++v10;
        }
        while (v10 != v11);
      }
    }
  }
}

uint64_t BlueFin::GlPeTimeManager::commonGnssToLms@<X0>(BlueFin::GlPeTimeManager *this@<X0>, double a2@<D0>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t result = (uint64_t)BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, a2, 0, a4);
  if (a3)
  {
    if (*(_DWORD *)(a4 + 8) != -1 && *(double *)(a4 + 24) != 4294967300.0)
    {
      double v9 = *((double *)this + 342);
      if (v9 != 4294967300.0)
      {
        double v10 = *((double *)this + 341);
        double v11 = a2 - *((double *)this + 340);
        uint64_t v12 = *((void *)this + 4);
        double v13 = (double)*(__int16 *)(v12 + 2) * 0.000000001;
        double v14 = (double)*(__int16 *)(v12 + 10) * 0.000000001;
        if (BlueFin::GlUtils::m_ucEnabled)
        {
          uint64_t result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
          double v9 = *((double *)this + 342);
        }
        *(double *)(a4 + 16) = *(double *)(a4 + 16) + (v10 + v11 * v13 * 0.001) * 1000.0;
        *(double *)(a4 + 24) = v9 + fabs(v11) * 1000.0 * (v14 + 0.000000005);
      }
    }
  }
  return result;
}

BlueFin::GlPeTimeManager *BlueFin::GlPeSvHealthMgr::SetGnssSvL5Health(uint64_t a1, unsigned int *a2, unsigned int a3, int a4, int a5)
{
  uint64_t result = *(BlueFin::GlPeTimeManager **)(a1 + 2744);
  if (!*((_DWORD *)result + 644)) {
    return result;
  }
  BlueFin::GlPeTimeManager::GetTime(result, 1, v17);
  int v18 = &off_270EBC600;
  uint64_t v19 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v17, (BlueFin::GlGpsTime *)&v18);
  uint64_t result = (BlueFin::GlPeTimeManager *)((uint64_t (*)(void))v18[4])(&v18);
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v19;
  unsigned int v12 = (int)((double)v11 * 2.32830644e-10 + (double)result);
  if (!a5)
  {
    if (v12 >= a3) {
      return result;
    }
    uint64_t result = (BlueFin::GlPeTimeManager *)BlueFin::GlPeGnssL5HealthData::getL5HealthData(a1 + 412, a2);
    if (!result) {
      return result;
    }
    int v15 = 1;
    goto LABEL_13;
  }
  uint64_t v13 = a1 + 412;
  uint64_t result = (BlueFin::GlPeTimeManager *)BlueFin::GlPeGnssL5HealthData::getL5HealthData(v13, a2);
  if (result)
  {
    int v14 = *((_DWORD *)result + 1);
    if (!v14 || v14 == 2 || v14 == 1 && *(_DWORD *)result - 120 < v12)
    {
      uint64_t result = (BlueFin::GlPeTimeManager *)BlueFin::GlPeGnssL5HealthData::getL5HealthData(v13, a2);
      if (result)
      {
        int v15 = 2;
LABEL_13:
        if (a4) {
          int v16 = 1;
        }
        else {
          int v16 = 2;
        }
        *((_DWORD *)result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v15;
        *((_DWORD *)result + 2) = v16;
        *(_DWORD *)uint64_t result = a3;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlGalTime::fct2CtFctS(BlueFin::GlGalTime *this, int a2)
{
  return (a2 + 619315200);
}

uint64_t BlueFin::GlPeTimeManager::GetTime@<X0>(BlueFin::GlPeTimeManager *this@<X0>, const BlueFin::GlGalTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v10 = 0.0;
  uint64_t v9 = *((void *)a2 + 1);
  BlueFin::GlPeTimeManager::dateTimeToLms((uint64_t)this, 3, (unsigned int *)&v9, &v10);
  double v7 = v10;

  return BlueFin::GlPeTimeManager::commonGnssToLms(this, v7, a3, a4);
}

double BlueFin::GlPeGnssTime::operator-(unsigned int *a1, uint64_t a2)
{
  int v2 = a1[2];
  if (v2 != *(_DWORD *)(a2 + 8) && BlueFin::GlPeGnssTime::m_potConversionTable == 0)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 367, "operator-", (char)"m_potConversionTable != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 367, "m_potConversionTable != nullptr");
  }
  unint64_t v14 = 0;
  BlueFin::GlPeGnssTime::getDateTime((double *)a2, v2, &v14);
  unsigned int v5 = *a1;
  unsigned int v6 = a1[1];
  if (v14)
  {
    unsigned int v7 = v6 - HIDWORD(v14);
    if (__PAIR64__(v6, v5) < v14)
    {
      unsigned int v12 = HIDWORD(v14) - v6;
      BOOL v9 = v14 >= v5;
      unsigned int v5 = v14 - v5;
      int v13 = !v9;
      unsigned int v6 = v12 - v13;
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      BOOL v9 = v5 >= v14;
      v5 -= v14;
      int v10 = !v9;
      unsigned int v6 = v7 - v10;
    }
  }
  else
  {
    char v8 = 0;
  }
  double result = (double)v5 * 2.32830644e-10 + (double)v6;
  if ((v8 & ((v6 | v5) != 0)) != 0) {
    return -result;
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::GetTime@<X0>(BlueFin::GlPeTimeManager *this@<X0>, const BlueFin::GlBdsTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v10 = 0.0;
  uint64_t v9 = *((void *)a2 + 1);
  BlueFin::GlPeTimeManager::dateTimeToLms((uint64_t)this, 4, (unsigned int *)&v9, &v10);
  double v7 = v10;

  return BlueFin::GlPeTimeManager::commonGnssToLms(this, v7, a3, a4);
}

void BlueFin::GlPeTimeManager::dateTimeToLms(uint64_t a1, int a2, unsigned int *a3, double *a4)
{
  if (*(_DWORD *)(a1 + 2576))
  {
    unint64_t v16 = 0;
    BlueFin::GlPeGnssTime::getDateTime((double *)(a1 + 2608), a2, &v16);
    unsigned int v7 = *a3;
    unsigned int v8 = a3[1];
    if (v16)
    {
      unsigned int v9 = v8 - HIDWORD(v16);
      if (__PAIR64__(v8, v7) < v16)
      {
        unsigned int v13 = HIDWORD(v16) - v8;
        BOOL v11 = v16 >= v7;
        unsigned int v7 = v16 - v7;
        int v14 = !v11;
        unsigned int v8 = v13 - v14;
        char v10 = 1;
      }
      else
      {
        char v10 = 0;
        BOOL v11 = v7 >= v16;
        v7 -= v16;
        int v12 = !v11;
        unsigned int v8 = v9 - v12;
      }
    }
    else
    {
      char v10 = 0;
    }
    double v15 = (double)v7 * 2.32830644e-10 + (double)v8;
    if ((v10 & ((v8 | v7) != 0)) != 0) {
      double v15 = -v15;
    }
    *a4 = *(double *)(a1 + 2624) + v15 * 1000.0;
  }
}

double BlueFin::GlPeGnssTime::getDateTime(double *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = *(unsigned int *)a1;
  unsigned int v7 = *((_DWORD *)a1 + 1);
  *a3 = v6;
  a3[1] = v7;
  uint64_t v8 = BlueFin::GlPeGnssTime::m_potConversionTable;
  double v9 = *(double *)(BlueFin::GlPeGnssTime::m_potConversionTable + 8 * a2);
  double v10 = fabs(v9);
  double v11 = fmod(v10, 1.0);
  double v12 = v11 * 4294967300.0 + 0.5;
  unsigned int v13 = v12;
  if (v12 >= 4294967300.0) {
    unsigned int v13 = -1;
  }
  if (v11 < 0.0 || v11 >= 1.0)
  {
    unsigned int v23 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    unsigned int v24 = "glpe_timepoint.h";
    int v25 = 173;
    goto LABEL_26;
  }
  unsigned int v15 = v10;
  if (v9 < 0.0)
  {
    unsigned int v18 = v7 - v15;
    if (v7 > v15 || (v7 == v15 ? (BOOL v19 = v6 >= v13) : (BOOL v19 = 0), v19))
    {
      BOOL v19 = v6 >= v13;
      LODWORD(v16) = v6 - v13;
      int v21 = !v19;
      int v17 = v18 - v21;
    }
    else
    {
      if (v15 - v7 != v6 > v13 || v13 != v6)
      {
        unsigned int v23 = "!otTmp.isNegative()";
        DeviceFaultNotify("glpe_datetime.h", 1360, "operator+=", (char)"!otTmp.isNegative()");
        unsigned int v24 = "glpe_datetime.h";
        int v25 = 1360;
LABEL_26:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v24, v25, v23);
      }
      int v17 = 0;
      LODWORD(v16) = 0;
    }
  }
  else
  {
    uint64_t v16 = v6 + v13;
    int v17 = v7 + v15 + HIDWORD(v16);
  }
  *a3 = v16;
  a3[1] = v17;
  return a1[3] + *(float *)(v8 + 4 * a2 + 48);
}

uint64_t BlueFin::GlPeLtoGnssL5HealthDataInterface::Deserialize(BlueFin::GlPeLtoGnssL5HealthDataInterface *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 126 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
    *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU16(a2);
  }
  return v3;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateBdsClkErrTgd(uint64_t result, uint64_t a2, char a3, int a4)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    if (a4) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 63;
    }
    unint64_t v42 = result + 23324;
    int v43 = off_270EC1848;
    uint64_t v41 = result + 24332;
    double v40 = (_DWORD *)(result + 26464);
    do
    {
      double v9 = (unsigned __int8 *)(a2 + 16 * v7);
      unsigned int v10 = *v9;
      if (v10 != 255)
      {
        double v11 = (unsigned __int32 *)(v9 + 4);
        if (*((_DWORD *)v9 + 1))
        {
          if (v10 <= 0x3E)
          {
            unsigned int v49 = &unk_270EC1830;
            int v50 = 6;
            *(void *)&v52[15] = 0;
            uint64_t v53 = 0;
            char v54 = 0;
            *(_OWORD *)uint64_t v52 = *(_OWORD *)v9;
            char v51 = a3;
            if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              ((void (*)(void **, void, void))v43)(&v49, 0, 0);
            }
            if ((a3 & 1) == 0)
            {
              unint64_t v12 = *v9;
              if (v12 <= 0x3E)
              {
                uint64_t v13 = 0;
                v55.n128_u64[0] = v42;
                v55.n128_u64[1] = 0x1600000001;
                uint64_t v56 = v41;
                uint64_t v57 = 0x1700000002;
                char v14 = 1;
                unsigned __int32 v15 = *v11;
                while (1)
                {
                  char v16 = v14;
                  int v17 = &v55 + v13;
                  if (v17->n128_u32[2] == v15) {
                    break;
                  }
                  char v14 = 0;
                  uint64_t v13 = 1;
                  if ((v16 & 1) == 0) {
                    goto LABEL_23;
                  }
                }
                unint64_t v18 = v17->n128_u64[0];
                uint64_t v19 = v17->n128_u64[0] + 16 * v12;
                *v40 |= 1 << v17->n128_u16[6];
                if (v18) {
                  BOOL v20 = v19 == (void)v9;
                }
                else {
                  BOOL v20 = 1;
                }
                if (!v20)
                {
                  *(unsigned char *)uint64_t v19 = v12;
                  *(_DWORD *)(v19 + 4) = v15;
                  *(void *)(v19 + 8) = *(void *)(a2 + 16 * v7 + 8);
                }
              }
            }
LABEL_23:
            int v21 = *(BlueFin::GlPeTimeManager **)(v6 + 88);
            if (!*((_DWORD *)v21 + 644)) {
              goto LABEL_38;
            }
            BlueFin::GlPeTimeManager::GetTime(v21, 1, &v55);
            double v44 = &off_270EBF588;
            unint64_t v45 = 0;
            BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)&v55, (BlueFin::GlBdsTime *)&v44);
            uint64_t v22 = a2 + 16 * v7;
            int v23 = *(unsigned __int16 *)(v22 + 14);
            int v24 = 300 * *(unsigned __int16 *)(v22 + 8);
            v55.n128_u64[0] = (unint64_t)&off_270EBF588;
            double v25 = fmod((double)v24, 1.0);
            if (v25 < 0.0 || v25 >= 1.0)
            {
              DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
            }
            double v27 = v25 * 4294967300.0 + 0.5;
            unsigned int v28 = v27;
            if (v27 >= 4294967300.0) {
              unsigned int v28 = -1;
            }
            v55.n128_u32[2] = v28;
            v55.n128_u32[3] = v24 + 604800 * v23 + 820108814;
            v55.n128_u64[0] = (unint64_t)&off_270EBF588;
            unsigned int v47 = v28;
            unsigned int v48 = v24 + 604800 * v23;
            unsigned int v29 = ((uint64_t (*)(void))v44[4])(&v44);
            double v11 = (unsigned __int32 *)(v9 + 4);
            v46[0] = v45;
            v46[1] = v29;
            BlueFin::GlTimePoint::resolveAmbiguity(&v47, v46, 0x27500000u);
            double result = ((uint64_t (*)(void (***)(BlueFin::GlBdsTime *__hidden), void))v44[3])(&v44, v48);
            unsigned int v30 = v45;
            unsigned int v31 = HIDWORD(v45);
            char v32 = result | v47;
            if (result | v47)
            {
              if (v45 < __PAIR64__(result, v47))
              {
                unsigned int v31 = (__PAIR64__((int)result - HIDWORD(v45), v47) - v45) >> 32;
                unsigned int v30 = v47 - v45;
                char v32 = 1;
              }
              else
              {
                char v32 = 0;
                unsigned int v31 = (v45 - __PAIR64__(result, v47)) >> 32;
                unsigned int v30 = v45 - v47;
              }
            }
            double v33 = (double)v30 * 2.32830644e-10 + (double)v31;
            if ((v32 & ((v31 | v30) != 0)) != 0) {
              double v33 = -v33;
            }
            if (v33 <= 604800.0)
            {
LABEL_38:
              int v34 = (v10 + 76);
              v55.n128_u8[0] = *v9;
              v55.n128_u32[1] = *v11;
              double v35 = v11;
              uint64_t v36 = a2 + 16 * v7;
              v55.n128_u64[1] = *(void *)(v36 + 8);
              LOBYTE(v56) = a3;
              BlueFin::GlPeBdsEphMgr::SetLtoAltNavData(*(void *)(*(void *)(v6 + 80) + 7384), (unsigned __int8 *)&v55);
              double v39 = "BDS_B1C";
              if (*v35 == 1) {
                double v39 = "BDS_B2A";
              }
              float v37 = (double)*(__int16 *)(v36 + 12) * 5.82076609e-11 * 299792458.0;
              float v38 = (double)*(__int16 *)(v36 + 10) * 5.82076609e-11 * 299792458.0;
              double result = GlCustomLog(14, "Update %s: SVID:%d (TGD: %e(m) ISC: %e(m)) \n", v39, v34, v38, v37);
            }
          }
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t BlueFin::GlBdsTime::fct2CtFctS(BlueFin::GlBdsTime *this, int a2)
{
  return (a2 + 820108814);
}

uint64_t BlueFin::GlPeBdsEphMgr::SetLtoAltNavData(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = *a2;
  if (v2 > 0x3E) {
    return 0;
  }
  int v6 = *((_DWORD *)a2 + 1);
  uint64_t v7 = a1 + 20 * *a2;
  if (v6 == 2)
  {
    uint64_t v8 = v7 + 17436;
    uint64_t result = BlueFin::GlPeBdsAltNavData::IsBetterThan(a2, (unsigned __int8 *)(v7 + 17436));
    if (!result) {
      return result;
    }
    if ((unsigned __int8 *)v8 != a2)
    {
      *(unsigned char *)uint64_t v8 = v2;
      *(_DWORD *)(v8 + 4) = 2;
      *(void *)(v8 + 8) = *((void *)a2 + 1);
    }
    unsigned __int8 v9 = a2[16];
    uint64_t v10 = a1 + 20 * v2;
    uint64_t v11 = 17452;
  }
  else
  {
    uint64_t v12 = v7 + 16176;
    uint64_t result = BlueFin::GlPeBdsAltNavData::IsBetterThan(a2, (unsigned __int8 *)(v7 + 16176));
    if (!result) {
      return result;
    }
    if ((unsigned __int8 *)v12 != a2)
    {
      *(unsigned char *)uint64_t v12 = v2;
      *(_DWORD *)(v12 + 4) = v6;
      *(void *)(v12 + 8) = *((void *)a2 + 1);
    }
    unsigned __int8 v9 = a2[16];
    uint64_t v10 = a1 + 20 * v2;
    uint64_t v11 = 16192;
  }
  *(unsigned char *)(v10 + v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v9;
  return 1;
}

uint64_t BlueFin::GlPeBdsAltNavData::IsBetterThan(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == 255) {
    return 0;
  }
  if (*a2 == 255) {
    return 1;
  }
  unsigned int v2 = *((unsigned __int16 *)a2 + 7);
  unsigned int v3 = *((unsigned __int16 *)a1 + 7);
  BOOL v4 = v2 > v3 || v2 == v3 && *((unsigned __int16 *)a2 + 4) > *((unsigned __int16 *)a1 + 4);
  BOOL v6 = v2 != v3 || *((unsigned __int16 *)a2 + 4) != *((unsigned __int16 *)a1 + 4);
  if (v4 && a2[16]) {
    return 0;
  }
  int v7 = a1[16];
  if (v4)
  {
    if (!a1[16]) {
      return 0;
    }
    int v7 = 1;
  }
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a2[16] == 0;
  }
  return v8 || v6;
}

uint64_t BlueFin::GlPeTimeManager::GetTime@<X0>(BlueFin::GlPeTimeManager *this@<X0>, const BlueFin::GlGpsTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v22 = 0.0;
  unsigned int v8 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
  int v9 = BlueFin::GlPeTimeManager::handleGps1023WeekRollovers(this, v8 / 0x93A80);
  unsigned int v10 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)a2 + 2);
  double v12 = (double)v11 * 2.32830644e-10 + (double)(v10 % 0x93A80);
  uint64_t v19 = &off_270EBC600;
  double v13 = fmod(v12, 1.0);
  if (v13 < 0.0 || v13 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v15 = v13 * 4294967300.0 + 0.5;
  unsigned int v16 = v15;
  if (v15 >= 4294967300.0) {
    unsigned int v16 = -1;
  }
  unsigned int v20 = v16;
  unsigned int v21 = v12 + 604800 * v9;
  uint64_t v19 = &off_270EBC600;
  v18[0] = v16;
  v18[1] = v21;
  BlueFin::GlPeTimeManager::dateTimeToLms((uint64_t)this, 0, v18, &v22);
  return BlueFin::GlPeTimeManager::commonGnssToLms(this, v22, a3, a4);
}

uint64_t BlueFin::GlPeTimeManager::handleGps1023WeekRollovers(BlueFin::GlPeTimeManager *this, unsigned int a2)
{
  if (a2 <= 0x3FF)
  {
    int v2 = *((unsigned __int8 *)this + 3424);
    if (v2 == 255)
    {
      DeviceFaultNotify("glpe_timemgr.cpp", 4912, "handleGps1023WeekRollovers", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 4912, "false");
    }
    unsigned __int16 v3 = a2 + ((_WORD)v2 << 10);
    if (*((unsigned __int16 *)this + 1713) <= v3) {
      LOWORD(a2) = v3;
    }
    else {
      LOWORD(a2) = v3 + 1024;
    }
  }
  return (unsigned __int16)a2;
}

BOOL BlueFin::GlPeAlmanac::operator==(double *a1, double *a2)
{
  return *(unsigned __int16 *)a1 == *(unsigned __int16 *)a2
      && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
      && a1[1] == a2[1]
      && *((_DWORD *)a1 + 4) == *((_DWORD *)a2 + 4)
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && *((unsigned __int16 *)a1 + 44) == *((unsigned __int16 *)a2 + 44)
      && *((_DWORD *)a1 + 23) == *((_DWORD *)a2 + 23)
      && *((unsigned __int8 *)a1 + 96) == *((unsigned __int8 *)a2 + 96);
}

uint64_t BlueFin::GlPeTimeManager::GetTime@<X0>(BlueFin::GlPeTimeManager *this@<X0>, const BlueFin::GlNicTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v23 = 0.0;
  if ((*(unsigned int (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2) >= 0x24EA0000)
  {
    unsigned int v20 = (void (**)(BlueFin::GlGpsTime *__hidden))*((void *)a2 + 1);
    int v17 = (unsigned int *)&v20;
  }
  else
  {
    unsigned int v8 = (*(uint64_t (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2);
    int v9 = BlueFin::GlPeTimeManager::handleGps1023WeekRollovers(this, v8 / 0x93A80);
    unsigned int v10 = (*(uint64_t (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2);
    LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)a2 + 2);
    double v12 = (double)v11 * 2.32830644e-10 + (double)(v10 % 0x93A80);
    unsigned int v20 = &off_270EBC600;
    double v13 = fmod(v12, 1.0);
    if (v13 < 0.0 || v13 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v15 = v13 * 4294967300.0 + 0.5;
    unsigned int v16 = v15;
    if (v15 >= 4294967300.0) {
      unsigned int v16 = -1;
    }
    unsigned int v21 = v16;
    unsigned int v22 = v12 + 604800 * v9;
    unsigned int v20 = &off_270EBC600;
    v19[0] = v16;
    v19[1] = v22;
    int v17 = v19;
  }
  BlueFin::GlPeTimeManager::dateTimeToLms((uint64_t)this, 5, v17, &v23);
  return BlueFin::GlPeTimeManager::commonGnssToLms(this, v23, a3, a4);
}

uint64_t BlueFin::GlPeReqBag::GenerateNMEAForReqHdlr(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v56 = &unk_270EC4BC0;
  uint64_t v57 = (unsigned char *)(result + 3233);
  char v58 = *(unsigned char *)(result + 3233);
  *(unsigned char *)(result + 3233) = 0;
  if (a6 <= 0x47)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(void ***)(result + 8 * a6);
    int v12 = *((unsigned __int16 *)v11 + 24);
    uint64_t result = (*(uint64_t (**)(void *))(*v11[1] + 512))(v11[1]);
    if ((result & 1) != 0
      || BlueFin::GlUtils::m_ucEnabled
      && (uint64_t result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x14), (result & 1) != 0))
    {
      *(_DWORD *)(v10 + 1344) = 1;
      *(unsigned char *)(v10 + 1348) = 0;
      *(_WORD *)(v10 + 1672) = 0;
      *(unsigned char *)(v10 + 1674) = 0;
      double v15 = (_DWORD *)(v10 + 3104);
      *(_WORD *)(v10 + 3216) = 0;
      *(_DWORD *)(v10 + 3104) = 0;
      *(_DWORD *)(v10 + 3107) = 0;
      BlueFin::GlPeNmeaGen::FormatTimeTag((BlueFin::GlPeNmeaGen *)(v10 + 1344), *a2, v13, v14);
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      *(_OWORD *)__s = 0u;
      long long v60 = 0u;
      uint64_t v17 = BlueFin::GlPeNmeaGen::FormatNmea(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140, 0, v16);
      __int16 v18 = strlen(__s);
      if (((unsigned int (*)(void **, uint64_t, unsigned int *, char *, void))(*v11)[5])(v11, v17, a2, __s, v18))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      BlueFin::GlPeNmeaGen::FormatNmeaSTA(v10 + 1344, a2, *(void *)(v10 + 576), (BlueFin::GlFormat *)__s, 320);
      __int16 v19 = strlen(__s);
      if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v19))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      if (!*(unsigned char *)(v10 + 20700))
      {
        uint64_t v48 = *(void *)(v10 + 600);
        if (*(_DWORD *)(v48 + 2816) != -1 && *(double *)(v48 + 2832) != 4294967300.0)
        {
          LODWORD(v52) = *(double *)(v48 + 2552);
          double v49 = *(double *)(v48 + 2848) * 1000000000.0;
          *(void *)&long long v53 = *(void *)(v48 + 2856);
          *((double *)&v53 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v49;
          double v54 = *(double *)(v48 + 2864) * 1000.0;
          *(double *)&unint64_t v50 = v54;
          LODWORD(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(v48 + 2872);
          LODWORD(v55) = ((double)v50 * 0.001);
          BlueFin::GlPeNmeaGen::FormatNmeaRTC(v10 + 1344, (unsigned int *)&v52, (BlueFin::GlFormat *)__s, (const char *)0x140);
          __int16 v51 = strlen(__s);
          if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v51))
          {
            GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
          }
          *(unsigned char *)(v10 + 2070BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        }
      }
      BlueFin::GlPeNmeaGen::FormatNmeaUNC(v10 + 1344, a2, *(void *)(v10 + 600), (BlueFin::GlFormat *)__s, 320);
      __int16 v20 = strlen(__s);
      if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v20))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      while (!*(unsigned char *)(v10 + 1674))
      {
        BlueFin::GlPeNmeaGen::FormatNmeaSAT(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, 320);
        __int16 v21 = strlen(__s);
        if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v21))
        {
          GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
      }
      while (*v15 != 7)
      {
        BlueFin::GlPeNmeaGen::FormatNmeaSVC(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140);
        if ((__int16)strlen(__s) >= 1
          && ((unsigned int (*)(void **, void, unsigned int *, char *))(*v11)[5])(v11, 0, a2, __s))
        {
          GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
      }
      BlueFin::GlPeNmeaGen::FormatNmeaGLO((char *)(v10 + 1344), (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140);
      if ((__int16)strlen(__s) >= 1
        && ((unsigned int (*)(void **, void, unsigned int *, char *))(*v11)[5])(v11, 0, a2, __s))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      BlueFin::GlPeNmeaGen::FormatNmeaSIO((BlueFin::GlPeNmeaGen *)a3, (const BlueFin::GlPePlatfStat *)__s, (char *)0x140, v22);
      __int16 v23 = strlen(__s);
      if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v23))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      if (*(unsigned char *)(*(void *)(v10 + 584) + 54026))
      {
        BlueFin::GlPeNmeaGen::FormatNmeaHLA(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140);
        __int16 v24 = strlen(__s);
        if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v24))
        {
          GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
      }
      uint64_t v25 = *(void *)(v10 + 20016) + 92928;
      char v26 = *(unsigned char *)(*(void *)(v10 + 20016) + 92952);
      long long v27 = *(_OWORD *)(*(void *)(v10 + 20016) + 92936);
      uint64_t v28 = *(void *)v25;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 0;
      *(void *)uint64_t v25 = 0;
      *(unsigned char *)(v25 + 24) = 0;
      uint64_t v29 = *(void *)(*(void *)(v10 + 20016) + 88840);
      uint64_t v52 = v28;
      long long v53 = v27;
      LOBYTE(v54) = v26;
      uint64_t v55 = v29;
      if (v28 || *(_DWORD *)(v29 + 16))
      {
        BlueFin::GlPeNmeaGen::FormatNmeaCTX(v10 + 1344, (int)a2, (BlueFin::GlFormat *)__s, (const char *)0x140, (unsigned int *)&v52);
        __int16 v30 = strlen(__s);
        if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v30))
        {
          GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
      }
      BlueFin::GlPeNmeaGen::FormatNmeaLSQ((char *)(v10 + 1344), (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140);
      if ((__int16)strlen(__s) >= 1
        && ((unsigned int (*)(void **, void, unsigned int *, char *))(*v11)[5])(v11, 0, a2, __s))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      BlueFin::GlPeNmeaGen::FormatNmeaPWR(v10 + 1344, (unsigned __int16 *)(a4 + 56400), *a2, (BlueFin::GlFormat *)__s, 320);
      if ((__int16)strlen(__s) >= 1
        && ((unsigned int (*)(void **, void, unsigned int *, char *))(*v11)[5])(v11, 0, a2, __s))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      if (*(unsigned char *)(a3 + 232))
      {
        BlueFin::GlPeNmeaGen::FormatNmeaPFM((BlueFin::GlPeNmeaGen *)(v10 + 1344), (const BlueFin::GlPePlatfStat *)a3, (BlueFin::GlFormat *)__s, (const char *)0x140);
        __int16 v31 = strlen(__s);
        if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v31))
        {
          GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
      }
      if (*(unsigned char *)(*(void *)(v10 + 584) + 54559))
      {
        BlueFin::GlPeNmeaGen::FormatNmeaSyncin(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140);
        __int16 v32 = strlen(__s);
        if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v32))
        {
          GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
        *(unsigned char *)(*(void *)(v10 + 584) + 54559) = 0;
      }
      if ((**(unsigned char **)(a5 + 160) & 2) != 0)
      {
        double v33 = *(const BlueFin::GlMePlatfStat **)(a3 + 1240);
        if (v33)
        {
          BlueFin::GlPeNmeaGen::FormatNmeaSVD((BlueFin::GlPeNmeaGen *)(v10 + 1344), v33, (BlueFin::GlFormat *)__s, (const char *)0x140);
          __int16 v34 = strlen(__s);
          if (((unsigned int (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v34))
          {
            GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
          }
        }
      }
      if (*(unsigned char *)(*(void *)(v10 + 584) + 54025))
      {
        BlueFin::GlPeNmeaGen::FormatNmeaPPS(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140);
        if ((__int16)strlen(__s) >= 1)
        {
          if (((unsigned int (*)(void **, void, unsigned int *, char *))(*v11)[5])(v11, 0, a2, __s)) {
            GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
          }
        }
      }
      BlueFin::GlPeNmeaGen::FormatNmeaAGC(v10 + 1344, a3, (uint64_t)a2, (BlueFin::GlFormat *)__s, 320);
      __int16 v35 = strlen(__s);
      uint64_t result = ((uint64_t (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v35);
      if (result) {
        uint64_t result = GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
      }
      uint64_t v38 = *(void *)(a3 + 1240);
      if (v38)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v38 + 804;
        do
        {
          if (*(unsigned char *)(v40 + v39))
          {
            BlueFin::GlPeNmeaGen::FormatNmeaCN0(v10 + 1344, v40 + v39, (BlueFin::GlFormat *)__s, (const char *)0x140);
            __int16 v41 = strlen(__s);
            uint64_t result = ((uint64_t (*)(void **, void, unsigned int *, char *, void))(*v11)[5])(v11, 0, a2, __s, v41);
            if (result) {
              uint64_t result = GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
            }
          }
          v39 += 20;
        }
        while (v39 != 80);
      }
      uint64_t v42 = *(void *)(v10 + 608);
      int v43 = *(_DWORD *)(v42 + 12);
      if (v43 != -1)
      {
        double v44 = (const char *)*(unsigned int *)(v42 + 8);
        uint64_t result = ((uint64_t (*)(void **))(*v11)[42])(v11);
        if (result)
        {
          if (BlueFin::GlPeTimeManager::GetSleepTimeSec(*(BlueFin::GlPeTimeManager **)(v10 + 20008)) >= 0x259
            && (*(unsigned char *)(*(void *)(v10 + 608) + 8) & 4) == 0)
          {
            v43 &= ~4u;
          }
          if (*(__int16 *)(*(void *)(v10 + 20080) + 10) >= 302
            && (*(unsigned char *)(*(void *)(v10 + 608) + 8) & 0x10) == 0)
          {
            v43 &= ~0x10u;
          }
          if (*(unsigned char *)(*(void *)(v10 + 20112) + 31)) {
            int v45 = v43 | 2;
          }
          else {
            int v45 = v43;
          }
          BlueFin::GlPeNmeaGen::FormatNmeaNVM((BlueFin::GlPeNmeaGen *)(v10 + 1344), (BlueFin::GlFormat *)__s, 320, v44, v45);
          __int16 v46 = strlen(__s);
          (*(void (**)(void *, char *, void))(*v11[1] + 504))(v11[1], __s, v46);
          uint64_t result = GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
        }
      }
      while (!*(unsigned char *)(v10 + 3110))
      {
        uint64_t v47 = BlueFin::GlPeNmeaGen::FormatNmea(v10 + 1344, (uint64_t)a2, (BlueFin::GlFormat *)__s, (const char *)0x140, v36, v37);
        uint64_t result = strlen(__s);
        if ((__int16)result >= 1)
        {
          uint64_t result = ((uint64_t (*)(void **, uint64_t, unsigned int *, char *))(*v11)[5])(v11, v47, a2, __s);
          if (result) {
            uint64_t result = GlCustomLog(20, "GL_NMEA[%d][%s", v12, __s);
          }
        }
      }
    }
  }
  *uint64_t v57 = v58;
  return result;
}

void sub_263938C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned char *a19, char a20)
{
  *a19 = a20;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::SetNmeaSentence(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  __int16 v4 = v3;
  BOOL v6 = v5;
  uint64_t v8 = v7;
  int v10 = v9;
  uint64_t v11 = v2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (strstr(v5, "$PGLOR,"))
  {
    if (strstr(v6, ",FIN,") || strstr(v6, ",PFM,"))
    {
      BOOL v12 = 1;
      goto LABEL_10;
    }
    BOOL v12 = strstr(v6, ",PFA,") != 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  if (*(unsigned char *)(v11 + 20)) {
    BOOL v13 = !v12;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13) {
    return 0;
  }
LABEL_10:
  memcpy(__dst, (const void *)v8, sizeof(__dst));
  memcpy(v18, (const void *)(v8 + 7432), sizeof(v18));
  LOBYTE(__dst[506]) = *(unsigned char *)(v11 + 168);
  int v14 = LOBYTE(__dst[506]);
  LODWORD(v15) = *(_DWORD *)(v11 + 72);
  __dst[863] = (double)v15;
  LODWORD(__dst[877]) = *(_DWORD *)(v11 + 172);
  if (!LOBYTE(__dst[506]))
  {
    LOBYTE(__dst[506]) = 0;
    memset(&__dst[535], 0, 64);
    memset(&__dst[607], 0, 256);
    memset(&__dst[671], 0, 256);
  }
  if (!BlueFin::GlPeRqHdlrPosPeriodic::IsPeriodExpired(v11) && !v12) {
    return 0;
  }
  if (v10 == 8)
  {
    if (v14) {
      BlueFin::GlPeRqHdlrPosPeriodic::SendPglorFix(v11, (uint64_t)__dst);
    }
  }
  return BlueFin::GlPeRqHdlr::SetNmeaSentence((BlueFin::GlPeRqHdlr *)v11, v10, (int)__dst, v6, v4);
}

BOOL BlueFin::GlPeRqHdlrPosPeriodic::IsPeriodExpired(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 20)) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 80) == 1 && *(unsigned char *)(a1 + 168)) {
    return 1;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 68) + *(__int16 *)(a1 + 42);
  return v2 > (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
}

uint64_t BlueFin::GlPeRqHdlr::SetNmeaSentence(BlueFin::GlPeRqHdlr *this, int a2, int a3, char *a4, __int16 a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 16))
  {
    *((unsigned char *)this + 16) = 1;
    BlueFin::GlPeNmeaGen::FormatNmeaRID(**((BlueFin::GlPeNmeaGen ***)this + 7), (BlueFin::GlFormat *)__s, 80, a4);
    GlCustomLog(20, "GL_NMEA[%d][%s", *((unsigned __int16 *)this + 24), __s);
    __int16 v9 = strlen(__s);
    BlueFin::GlPeRqHdlr::OnNmea(this, __s, v9, v10);
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      int v11 = (unsigned __int16)++*((_WORD *)this + 20);
      if (v11 == (*(unsigned __int16 (**)(void))(**((void **)this + 1) + 520))(*((void *)this + 1))) {
        *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      }
    }
    goto LABEL_8;
  }
  if (!*((_WORD *)this + 20)) {
LABEL_8:
  }
    BlueFin::GlPeRqHdlr::OnNmea(this, a4, a5, a4);
  return 1;
}

uint64_t BlueFin::GlRequestImplNmea::OnNmea(uint64_t this, char *a2)
{
  unsigned int v2 = *(uint64_t (**)(void))(this + 72);
  if (v2) {
    return v2();
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlr::OnNmea(BlueFin::GlPeRqHdlr *this, char *a2, __int16 a3, const char *a4)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*(void *)(*((void *)this + 7) + 56) + 11569))
  {
    __int16 v5 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v8, (char *)0xB4, "GL_NMEA[%d][%s", a4, *(unsigned __int16 *)(*((void *)this + 1) + 24), a2);
    return (*(uint64_t (**)(void, unsigned char *, void))(**((void **)this + 1) + 504))(*((void *)this + 1), v8, v5);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 504);
    return v7();
  }
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnNmea(BlueFin::GlDbgProxy *this, uint64_t (**a2)(BlueFin::GlDbgRequest *, char *, uint64_t), char *a3, uint64_t a4)
{
  __int16 v12 = a4;
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a2, 0);
  int v11 = result;
  if (!*((void *)this + 101))
  {
    *((unsigned char *)this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    if (*((_DWORD *)this + 144) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart(this, 542);
      if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
        BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v11);
      }
      BlueFin::GlDbgCodec::WriteArray(this, a3, &v12);
      uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
    }
    uint64_t v9 = a2[4];
    if (v9) {
      uint64_t result = v9((BlueFin::GlDbgRequest *)a2, a3, a4);
    }
    *((unsigned char *)this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    if (*((_DWORD *)this + 144) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal(this, 542);
      if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
        BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v11);
      }
      int v10 = *(uint64_t (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32);
      return v10(this, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgRequest::Id(BlueFin::GlDbgRequest *this, int a2)
{
  uint64_t result = 0;
  if (a2) {
    __int16 v4 = 0;
  }
  else {
    __int16 v4 = this;
  }
  uint64_t v5 = *((void *)this + 1);
  while (v4 != *(BlueFin::GlDbgRequest **)(v5 + 5928 + 8 * result))
  {
    if (++result == 73)
    {
      DeviceFaultNotify("gldebug_request.cpp", 76, "Id", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_request.cpp", 76, "false");
    }
  }
  if (a2) {
    *(void *)(v5 + 5928 + 8 * result) = this;
  }
  return result;
}

uint64_t BlueFin::GlDbgProxyGlReqOnNmea(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  BOOL v6 = *(BlueFin::GlDbgProxy **)(v5 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnNmea(v6, (uint64_t (**)(BlueFin::GlDbgRequest *, char *, uint64_t))v5, a2, a3);
}

uint64_t BlueFin::GlRequestImpl::GetUserData(BlueFin::GlRequestImpl *this)
{
  return *((void *)this + 1);
}

uint64_t BlueFin::GlRequestImplPosPeriodic::GetPeriodMs(BlueFin::GlRequestImplPosPeriodic *this)
{
  return *((unsigned int *)this + 27);
}

void FireCallback::GlReqOnNmea(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 216);
    if (v9)
    {
      uint64_t v12 = a2;
      __int16 v11 = a3;
      (*(void (**)(uint64_t, uint64_t *, __int16 *))(*(void *)v9 + 48))(v9, &v12, &v11);
      return;
    }
    int v10 = "fcb,fReqOnNmeaCb,nullptr";
  }
  else
  {
    int v10 = "fcb,GlReqOnNmea,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1>,void ()(char const*,short)>::operator()(uint64_t a1, void **a2, __int16 *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 216))
  {
    __int16 v4 = *a2;
    size_t v5 = *a3;
    memset(&v8, 0, sizeof(v8));
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v8.__end_cap_;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)operator new(0x18uLL);
    __v.__begin_ = __v.__first_;
    __v.__end_ = __v.__first_;
    __v.__end_cap_.__value_ = __v.__first_ + 1;
    std::string::basic_string[abi:ne180100](__v.__first_->__r_.__value_.__r.__words, v4, v5);
    ++__v.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(&v8, &__v);
    end = v8.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v8.__end_ = end;
    memset(&__v, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__v, (long long *)v8.__begin_, (long long *)end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v8.__begin_) >> 3));
    uint64_t v7 = *(void *)(v3 + 216);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v7 + 48))(v7, &__v);
    p_v = (void **)&__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_v);
    p_v = (void **)&v8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_v);
  }
}

void sub_263939658(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__split_buffer<std::string> *a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14)
{
  a13 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begiuint64_t n = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_263939820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  __n128 v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  __int16 v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  __n128 v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    BOOL v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      BOOL v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2639399E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      size_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        size_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    BOOL v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  size_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    size_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    size_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t BlueFin::GlPeNmeaGen::FormatNmea(uint64_t a1, uint64_t a2, BlueFin::GlFormat *a3, const char *a4, uint8x8_t a5, uint32x4_t a6)
{
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248))
  {
    word_26A9A1790 = 73;
    a5 = *(uint8x8_t *)&__const__ZN7BlueFin11GlPeNmeaGen10FormatNmeaEPKNS_13GL_FIX_STATUSEPcs_acTalkerCodesv411;
    BlueFin::GlPeNmeaGen::m_acTalkerCodes = __const__ZN7BlueFin11GlPeNmeaGen10FormatNmeaEPKNS_13GL_FIX_STATUSEPcs_acTalkerCodesv411;
    int v7 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      BlueFin::GlPeNmeaGen::FormatNmeaGNS(a1, a2, a3, a4);
LABEL_11:
      uint64_t result = 1;
      goto LABEL_12;
    }
  }
  else
  {
    int v7 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      BlueFin::GlPeNmeaGen::FormatNmeaGGA(a1, a2, a3, a4);
      goto LABEL_11;
    }
  }
  if ((v7 & 8) != 0)
  {
    BlueFin::GlPeNmeaGen::FormatNmeaRMC(a1, a2, a3, a4);
    uint64_t result = 8;
  }
  else if ((v7 & 4) != 0)
  {
    BOOL v9 = BlueFin::GlPeNmeaGen::FormatNmeaGSA(a1, a2, a3, (int)a4);
    uint64_t result = 4;
    if (!v9) {
      goto LABEL_13;
    }
  }
  else if ((v7 & 2) != 0)
  {
    BOOL v10 = BlueFin::GlPeNmeaGen::FormatNmeaGSV(a1, a2, a3, (int)a4, a5, a6);
    uint64_t result = 2;
    if (!v10) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t result = 0;
  }
LABEL_12:
  *(_DWORD *)a1 *= 2;
LABEL_13:
  *(unsigned char *)(a1 + 1766) = (*(_DWORD *)a1 & 0xF) == 0;
  return result;
}

uint64_t BlueFin::GlPeNmeaGen::FormatNmeaSVC(uint64_t result, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v5 = result;
  v42[0] = 0;
  uint64_t __src = v41;
  unsigned __int8 v40 = 8;
  memset(v41, 0, sizeof(v41));
  if (*(__int16 *)(a2 + 44) < 1)
  {
    unsigned __int8 v6 = 0;
  }
  else
  {
    unsigned __int8 v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(unsigned __int16 *)(a2 + 44);
    BOOL v9 = (unsigned __int8 *)(a2 + 84);
    BOOL v10 = (char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
        + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
    do
    {
      uint64_t result = *(v9 - 34);
      if (result != 4 && result != 8)
      {
        uint64_t result = BlueFin::GlImplGnss::m_aucImplGnssTable[result];
        if (*(_DWORD *)(v5 + 1760) == result)
        {
          uint64_t result = *(v9 - 2);
          if (result == *(unsigned __int8 *)(v5 + 1764))
          {
            uint64_t result = *(unsigned __int8 *)(v5 + 1765);
            if (result <= v6)
            {
              uint64_t result = (result + 4);
              if (result > v6)
              {
                unint64_t v12 = v10[*(v9 - 35)];
                *(_DWORD *)((char *)v41 + ((v12 >> 3) & 0x1C)) |= 1 << v12;
                uint64_t v13 = v7;
                *((unsigned char *)v42 + v7 + 4) = *(v9 - 1);
                uint64_t result = *v9;
                ++v7;
                *((unsigned char *)v42 + v13) = result;
              }
            }
            ++v6;
          }
        }
      }
      v9 += 40;
      --v8;
    }
    while (v8);
    if (*(void *)&v41[0]) {
      goto LABEL_24;
    }
  }
  unint64_t v14 = 0;
  while (v14 != 6)
  {
    if (*((_DWORD *)v41 + v14++ + 2))
    {
      if (v14 < 7) {
        goto LABEL_24;
      }
      break;
    }
  }
  if (*(_DWORD *)(v5 + 1760) || *(unsigned char *)(v5 + 1764))
  {
    *(unsigned char *)this = 0;
    goto LABEL_44;
  }
LABEL_24:
  uint32x4_t v16 = (char *)this + (int)a4;
  uint64_t v17 = v16 - 1;
  if ((int)a4 != 1 && v16 - 1 >= (char *)this) {
    __int16 v18 = (char *)(int)a4;
  }
  else {
    __int16 v18 = 0;
  }
  unsigned int v19 = BlueFin::GlFormat::glsnprintf(this, v18, "$PGLOR,%d,SVC,", a4, 2);
  __int16 v21 = (char *)this + v19;
  if (v17 <= v21) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = (char *)(v16 - v21);
  }
  uint64_t v23 = *(int *)(v5 + 1760);
  if (v23 >= 5)
  {
    uint64_t v25 = "<->";
    if (v23 == 6) {
      uint64_t v25 = "NIC";
    }
    if (v23 == 5) {
      __int16 v24 = "GAL";
    }
    else {
      __int16 v24 = v25;
    }
  }
  else
  {
    __int16 v24 = off_2655E0270[v23];
  }
  int v26 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v19), v22, "%s,%d,%d,%d,%02d", v20, v24, *(unsigned __int8 *)(v5 + 1764), (v6 + 3) >> 2, (*(unsigned __int8 *)(v5 + 1765) >> 2) + 1, v6);
  unsigned __int8 v34 = v40;
  memcpy(v38, __src, 4 * v40);
  __int16 v36 = 0;
  unsigned __int8 v35 = 0;
  int v37 = v38[0];
  BlueFin::GlSetIterator::operator++(&v34);
  if (v35 != v34)
  {
    int v29 = 0;
    __int16 v30 = (BlueFin::GlFormat *)&v21[v26];
    do
    {
      if (v17 <= (char *)v30) {
        __int16 v31 = 0;
      }
      else {
        __int16 v31 = (char *)(v16 - (char *)v30);
      }
      __int16 v30 = (BlueFin::GlFormat *)((char *)v30
                                + BlueFin::GlFormat::glsnprintf(v30, v31, ",%03d,%4s,%4s", v28, v36, BlueFin::stPeSigMeasKF::m_aacSvUseCodeImage[*((unsigned __int8 *)v42+ v29+ 4)], BlueFin::stPeSigMeasKF::m_aacSvUseCodeImage[*((unsigned __int8 *)v42+ v29)]));
      ++v29;
      BlueFin::GlSetIterator::operator++(&v34);
    }
    while (v35 != v34);
  }
  uint64_t result = (uint64_t)BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v16 - 1, v27);
LABEL_44:
  unsigned int v32 = (*(unsigned char *)(v5 + 1765) + 4);
  *(unsigned char *)(v5 + 1765) += 4;
  if (v32 >= v6)
  {
    *(unsigned char *)(v5 + 1765) = 0;
    unsigned int v33 = ++*(unsigned char *)(v5 + 1764);
    if (v33 >= 3)
    {
      *(_DWORD *)(v5 + 176BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned __int8 *)(v5 + 1760) + 1;
      *(unsigned char *)(v5 + 1764) = 0;
    }
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

uint64_t BlueFin::GlPeNmeaGen::FormatTimeTag(BlueFin::GlPeNmeaGen *this, unsigned int a2, uint64_t a3, const char *a4)
{
  uint64_t v5 = (BlueFin::GlPeTimeManager *)*((void *)this + 230);
  if (*((_DWORD *)v5 + 644))
  {
    Utc__n128 Time = BlueFin::GlPeTimeManager::GetUtcTime(v5, a2, (uint64_t)v30);
    LODWORD(UtcTime) = v31;
    double v8 = floor((double)*(unint64_t *)&UtcTime * 2.32830644e-10 * 100.0 + 0.5) * 0.01;
    if (v8 >= 1.0)
    {
      unsigned int v9 = v32 + v8;
      unsigned int v32 = v9;
      double v8 = fmod(v8, 1.0);
      int v10 = BlueFin::GlWeekTowTime::m_ucNextLs;
      BOOL v13 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && v9 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v9) {
        int v10 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
      }
      unsigned int v14 = v9 - v13 - v10 + 432000;
      unsigned int v15 = v14 % 0x7861F80;
      unsigned int v16 = v14 % 0x7861F80 / 0x15180;
      if (v14 % 0x7861F80 > 0x5A4EBFF)
      {
        int v17 = 3;
      }
      else if (v15 <= 0x3C3B87F)
      {
        int v17 = v15 > 0x1E284FF;
      }
      else
      {
        int v17 = 2;
      }
      int v19 = v17;
      __int16 v20 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v17];
      if (v16 >= v20[9])
      {
        int v21 = 9;
      }
      else if (v16 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v17 + 6])
      {
        int v21 = 6;
      }
      else if (v16 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v17 + 3])
      {
        int v21 = 3;
      }
      else
      {
        int v21 = 0;
      }
      unsigned __int16 v33 = (v19 | (4 * (v14 / 0x7861F80))) + 1980;
      __int16 v34 = v16 - *v20 + 1;
      if (v16 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v19 + v21 + 2])
      {
        int v22 = 3;
      }
      else if (v16 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v19 + v21 + 1])
      {
        int v22 = 1;
      }
      else
      {
        int v22 = 2;
      }
      int v23 = v22 + v21;
      unsigned __int8 v35 = v23;
      unsigned __int8 v36 = v16 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v19 + v23 - 1] + 1;
      LOBYTE(v16) = 60;
      if (v13)
      {
        LOBYTE(v24) = 59;
        LOBYTE(v25) = 23;
      }
      else
      {
        unint64_t v25 = (1193047 * (unint64_t)(v14 % 0x15180)) >> 32;
        unsigned int v24 = (2185 * (v14 % 0xE10)) >> 17;
        unsigned int v16 = v14 % 0x3C;
      }
      unsigned __int8 v37 = v25;
      unsigned __int8 v38 = v24;
      char v39 = v16;
    }
    if (v8 < 0.0 || v8 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 260, "setFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 260, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v27 = v8 * 4294967300.0 + 0.5;
    unsigned int v28 = v27;
    if (v27 >= 4294967300.0) {
      unsigned int v28 = -1;
    }
    unsigned int v31 = v28;
    LOBYTE(v27) = v39;
    BlueFin::GlFormat::glsnprintf((BlueFin::GlPeNmeaGen *)((char *)this + 1767), (char *)0x20, "%02hd%02hd%05.2lf", v6, v37, v38, (double)v28 * 2.32830644e-10 + (double)*(unint64_t *)&v27);
    return BlueFin::GlFormat::glsnprintf((BlueFin::GlPeNmeaGen *)((char *)this + 1799), (char *)0x20, "%02hd%02hd%02hd", v29, v36, v35, v33 % 0x64u);
  }
  else
  {
    uint64_t result = BlueFin::GlFormat::glsnprintf((BlueFin::GlPeNmeaGen *)((char *)this + 1767), (char *)0x20, "%02d%02d%02d.00", a4, a2 / 0x36EE80uLL, (2185 * (a2 / 0x3E8 - 3600 * (((2386093 * (unint64_t)(a2 / 0x3E8)) >> 32) >> 1))) >> 17, (a2 / 0x3E8 - 60 * ((71582789 * (unint64_t)(a2 / 0x3E8)) >> 32)));
    *((unsigned char *)this + 1799) = 0;
  }
  return result;
}

BOOL BlueFin::GlRequestImplNmea::HasOnNmea(BlueFin::GlRequestImplNmea *this)
{
  return *((void *)this + 9) != 0;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaUNC(uint64_t a1, void *a2, uint64_t a3, BlueFin::GlFormat *this, int a5)
{
  if (*(_DWORD *)(a3 + 2576))
  {
    double v6 = *(double *)(a3 + 2736);
    if (v6 == 4294967300.0) {
      double v6 = *(double *)(a3 + 2632);
    }
  }
  else
  {
    double v6 = 4294967300.0;
  }
  int v7 = (char *)this + a5 - 1;
  if (a5 != 1 && v7 >= (char *)this) {
    double v8 = (char *)a5;
  }
  else {
    double v8 = 0;
  }
  BlueFin::GlFormat::glsnprintf(this, v8, "$PGLOR,%d,UNC,%s,%.3lf,%.1lf,%.1lf,%.2lf,%.2lf,%.1lf,%.1lf,%.1lf", (const char *)this, 1, a1 + 1767, *(void *)&v6, a2[518], a2[520], a2[873], a2[872], a2[869], a2[870], a2[871]);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7, v9);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaSTA(uint64_t a1, unsigned int *a2, uint64_t a3, BlueFin::GlFormat *this, int a5)
{
  double v8 = a2 + 1819;
  unsigned int v9 = (char *)this + a5 - 1;
  uint64_t v10 = aDfshwtf[a2[1728] & 7];
  int v11 = *((__int16 *)a2 + 22);
  if (v11 <= 10) {
    int v12 = 10;
  }
  else {
    int v12 = *((__int16 *)a2 + 22);
  }
  if (v12 >= *(_DWORD *)(a3 + 272)) {
    int v12 = *(_DWORD *)(a3 + 272);
  }
  int v13 = 9 * v12 / 10;
  uint64_t v14 = a2[1820];
  if (v11 < 1)
  {
    int v17 = a2[1820];
  }
  else
  {
    uint64_t v15 = *((unsigned __int16 *)a2 + 22);
    unsigned int v16 = (unsigned __int8 *)a2 + 49;
    int v17 = a2[1820];
    do
    {
      unsigned int v19 = *v16;
      v16 += 40;
      uint64_t v18 = v19;
      if (*((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                         + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                         + v19)
         - 33 <= 0x12)
      {
        if (a2[v18 + 1534]) {
          BOOL v20 = v17 <= 0;
        }
        else {
          BOOL v20 = 1;
        }
        int v21 = !v20;
        v17 -= v21;
      }
      --v15;
    }
    while (v15);
  }
  int v22 = (char *)this + a5;
  if (v9 <= (char *)this) {
    int v23 = 0;
  }
  else {
    int v23 = (char *)a5;
  }
  HIDWORD(v24) = 1062232653;
  LODWORD(v24) = a2[1043];
  double v25 = (double)v24 * 0.000001;
  uint64_t v80 = v14;
  uint64_t v26 = 70;
  if (!*v8) {
    uint64_t v26 = 102;
  }
  BOOL v20 = v13 <= v17;
  uint64_t v27 = 69;
  if (!v20) {
    uint64_t v27 = 101;
  }
  uint64_t v28 = 80;
  if (!v8[1]) {
    uint64_t v28 = 112;
  }
  uint64_t v79 = v27;
  uint64_t v29 = 84;
  if (!v8[2]) {
    uint64_t v29 = 116;
  }
  unsigned int v30 = BlueFin::GlFormat::glsnprintf(this, v23, "$PGLOR,%d,STA,%s,%4.3f,%4.3f,%hd,%hu,%d,%d,P,%c,L,%u,C,%1d,S,%08X,%d,%hd,R,%08X,%c%c%c%c,%d,%u,", (const char *)v8[1], 14, a1 + 1767, (double)(int)a2[1042] * 0.001, *(void *)&v25, a2[1056], *((unsigned __int16 *)a2 + 2128), (int)*((double *)a2 + 518), a2[1017] & 3, v10, (a2[1017] >> 2) & 1, a2[1753], a2[1752], (int)*((float *)a2 + 1754), *((__int16 *)a2 + 20), a2[1787],
          v29,
          v28,
          v79,
          v26,
          v80,
          *a2);
  unsigned int v32 = (char *)this + v30;
  if (*((unsigned char *)a2 + 4052))
  {
    if (v9 <= v32) {
      unsigned __int16 v33 = 0;
    }
    else {
      unsigned __int16 v33 = (char *)(v22 - v32);
    }
    if (a2[1014])
    {
      int v34 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v30), v33, "LC,%+d,", v31, a2[1014]);
      goto LABEL_42;
    }
    uint64_t v70 = 0;
    unsigned __int8 v36 = "LC,%d,";
  }
  else
  {
    if (v9 <= v32) {
      unsigned __int16 v33 = 0;
    }
    else {
      unsigned __int16 v33 = (char *)(v22 - v32);
    }
    unsigned __int8 v36 = "LC,,";
  }
  int v34 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v30), v33, (unsigned __int8 *)v36, v31, v70);
LABEL_42:
  unsigned __int8 v37 = (BlueFin::GlFormat *)&v32[v34];
  if (v8[36])
  {
    if (v9 <= (char *)v37) {
      unsigned __int8 v38 = 0;
    }
    else {
      unsigned __int8 v38 = (char *)(v22 - (char *)v37);
    }
    unsigned int v39 = BlueFin::GlFormat::glsnprintf(v37, v38, "%x,", v35, v8[36]);
  }
  else
  {
    if (v9 <= (char *)v37) {
      __int16 v41 = 0;
    }
    else {
      __int16 v41 = (char *)(v22 - (char *)v37);
    }
    unsigned int v39 = BlueFin::GlFormat::glsnprintf(v37, v41, ",", v35, v71);
  }
  uint64_t v42 = (BlueFin::GlFormat *)((char *)v37 + v39);
  if (v9 <= (char *)v42) {
    int v43 = 0;
  }
  else {
    int v43 = (char *)(v22 - (char *)v42);
  }
  int v45 = (BlueFin::GlFormat *)((char *)v42
                            + BlueFin::GlFormat::glsnprintf(v42, v43, "DR,%d,", v40, v8[74]));
  float v46 = *((float *)a2 + 1839);
  if (v46 >= 0.0)
  {
    if (v9 <= (char *)v45) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = (char *)(v22 - (char *)v45);
    }
    double v75 = *((float *)a2 + 1838);
    double v78 = v46;
    uint64_t v72 = (v8[84] << 8) | (a2[1017] >> 9) & 7;
    uint64_t v48 = "%x,%.1f,%.1f,";
  }
  else
  {
    if (v9 <= (char *)v45) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = (char *)(v22 - (char *)v45);
    }
    uint64_t v48 = ",,,";
  }
  double v49 = (BlueFin::GlFormat *)((char *)v45
                            + BlueFin::GlFormat::glsnprintf(v45, v47, (unsigned __int8 *)v48, v44, v72, *(void *)&v75, *(void *)&v78));
  if (v9 <= (char *)v49) {
    unint64_t v50 = 0;
  }
  else {
    unint64_t v50 = (char *)(v22 - (char *)v49);
  }
  double v51 = *((double *)a2 + 517);
  BOOL HasAny = BlueFin::GnssConstellationMaskHelper::HasAny((void *)a2 + 671, 4);
  uint64_t v54 = 102;
  if (HasAny) {
    uint64_t v54 = 70;
  }
  uint64_t v55 = 116;
  if (v51 < 99.0) {
    uint64_t v55 = 84;
  }
  uint64_t v56 = (BlueFin::GlFormat *)((char *)v49 + BlueFin::GlFormat::glsnprintf(v49, v50, "%c%c,", v53, v55, v54));
  int RtcCurTimeEstimate = BlueFin::GlPeTimeManager::GetRtcCurTimeEstimate(*(BlueFin::GlPeTimeManager **)(a1 + 1840), (uint64_t)&v81);
  if (v9 <= (char *)v56) {
    long long v60 = 0;
  }
  else {
    long long v60 = (char *)(v22 - (char *)v56);
  }
  if (RtcCurTimeEstimate)
  {
    double v61 = 1.0;
    if (v82 >= 1.0) {
      double v61 = v82;
    }
    unsigned int v62 = BlueFin::GlFormat::glsnprintf(v56, v60, "%.0f,%.0f,", v58, v81 * 1000.0, v81 * 1000.0, *(void *)&v61);
  }
  else
  {
    unsigned int v62 = BlueFin::GlFormat::glsnprintf(v56, v60, ",,", v58, v59, v73, v76);
  }
  long long v63 = (BlueFin::GlFormat *)((char *)v56 + v62);
  uint64_t v64 = *(void *)(a1 + 1840);
  if (BlueFin::GlPeRtcModel::IsValid((BlueFin::GlPeRtcModel *)(v64 + 3640)) && !*(unsigned char *)(v64 + 3648))
  {
    if (v9 <= (char *)v63) {
      long long v66 = 0;
    }
    else {
      long long v66 = (char *)(v22 - (char *)v63);
    }
    double v74 = *(double *)(v64 + 3672) * 1000000000.0;
    uint64_t v77 = *(void *)(v64 + 3680);
    long long v67 = "%.0f,%.0f,";
  }
  else
  {
    if (v9 <= (char *)v63) {
      long long v66 = 0;
    }
    else {
      long long v66 = (char *)(v22 - (char *)v63);
    }
    long long v67 = ",,";
  }
  BlueFin::GlFormat::glsnprintf(v63, v66, (unsigned __int8 *)v67, v65, *(void *)&v74, v77);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v9, v68);
}

uint64_t BlueFin::GlPeRtcModel::IsValid(BlueFin::GlPeRtcModel *this)
{
  if (*((_DWORD *)this + 3) != -7200001) {
    return *((double *)this + 5) != 1.79769313e308;
  }
  if (*((unsigned char *)this + 8)) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 2) + 32))();
  if (result) {
    return *((double *)this + 5) != 1.79769313e308;
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::GetRtcCurTimeEstimate(BlueFin::GlPeTimeManager *this, uint64_t a2)
{
  if (!*((_DWORD *)this + 644) || *((_DWORD *)this + 704) == -1 || *((double *)this + 354) == 4294967300.0) {
    return 0;
  }
  uint64_t v4 = 1;
  BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *((double *)this + 353), 1, (uint64_t)v9);
  BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *((double *)this + 353), 1, (uint64_t)v8);
  double v5 = BlueFin::GlPeGnssTime::operator-(v8, (uint64_t)this + 2808);
  uint64_t v6 = v10;
  *(double *)a2 = v5 * 1000.0;
  *(void *)(a2 + 8) = v6;
  return v4;
}

BOOL BlueFin::GnssConstellationMaskHelper::HasAny(void *a1, int a2)
{
  if (a2 < 1)
  {
    return 0;
  }
  else if (*a1)
  {
    return 1;
  }
  else
  {
    uint64_t v3 = 0;
    BOOL v2 = 1;
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = 1;
      while (v5 != 8)
      {
        if (v4[v5++])
        {
          if ((unint64_t)(v5 - 2) <= 6) {
            return v2;
          }
          break;
        }
      }
      BOOL v2 = ++v3 < (unint64_t)a2;
      if (v3 == a2) {
        break;
      }
      v4 += 8;
    }
    while (!a1[8 * v3]);
  }
  return v2;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaSIO(BlueFin::GlPeNmeaGen *this, const BlueFin::GlPePlatfStat *a2, char *a3, const char *a4)
{
  int v4 = (int)a3;
  BlueFin::GlFormat::glsnprintf(a2, (char *)(int)a3, "$PGLOR,%d,SIO,TxERR,%d,RxERR,%d,TxCNT,%u,RxCNT,%u,MLFRMPKT,%u,DTMS,%u,DTIN,%u,%u,DTOUT,%u,%u,HATMD,%d", a4, 2, *((__int16 *)this + 2), *((__int16 *)this + 3), *((unsigned int *)this + 4), *((unsigned int *)this + 5), *((unsigned int *)this + 3), *((unsigned int *)this + 6), *((unsigned int *)this + 7), *((unsigned int *)this + 9), *((unsigned int *)this + 8), *((unsigned int *)this + 10), *((unsigned int *)this + 40));

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a2, (char *)a2 + v4 - 1, v6);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaRMC(uint64_t a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  int v7 = (char *)this + (int)a4;
  double v8 = v7 - 1;
  *(unsigned char *)this = 0;
  if (v7 - 1 <= (char *)this) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = (char *)(int)a4;
  }
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248)) {
    uint64_t v10 = "$GNRMC,%s,";
  }
  else {
    uint64_t v10 = "$GPRMC,%s,";
  }
  unsigned int v11 = BlueFin::GlFormat::glsnprintf(this, v9, (unsigned __int8 *)v10, a4, a1 + 1767);
  int v13 = (BlueFin::GlFormat *)((char *)this + v11);
  if (!*(unsigned char *)(a2 + 4048) || (*(unsigned char *)(a2 + 4068) & 8) != 0)
  {
    unsigned int v32 = "V,,,,,,,%s,,,%c";
    unsigned int v33 = 78;
  }
  else
  {
    double v14 = *(double *)(a2 + 4072);
    double v15 = *(double *)(a2 + 4080);
    double v16 = fabs(v14);
    double v17 = fabs(v15);
    uint64_t v18 = (int)v16;
    uint64_t v19 = (int)v17;
    double v20 = (v16 - (double)(int)v18) * 60.0;
    uint64_t v21 = (int)v20;
    uint64_t v22 = (int)((v20 - (double)(int)v21) * 1000000.0);
    double v23 = (v17 - (double)(int)v19) * 60.0;
    uint64_t v24 = (int)v23;
    double v25 = (v23 - (double)(int)v24) * 1000000.0;
    if (v8 <= (char *)v13) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = (char *)(v7 - (char *)v13);
    }
    uint64_t v43 = v18;
    uint64_t v27 = 87;
    if (v15 >= 0.0) {
      uint64_t v27 = 69;
    }
    uint64_t v44 = v27;
    uint64_t v28 = 83;
    if (v14 >= 0.0) {
      uint64_t v28 = 78;
    }
    uint64_t v29 = (BlueFin::GlFormat *)((char *)v13
                              + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v11), v26, "A,%02d%02d.%06d,%c,%03d%02d.%06d,%c,", v12, v43, v21, v22, v28, v19, v24, (int)v25, v44));
    if (*(unsigned char *)(a2 + 4192))
    {
      if (v8 <= (char *)v29) {
        unsigned int v30 = 0;
      }
      else {
        unsigned int v30 = (char *)(v7 - (char *)v29);
      }
      unsigned int v31 = (BlueFin::GlFormat *)((char *)v29
                                + BlueFin::GlFormat::glsnprintf(v29, v30, "%05.1f,", v12, *(void *)(a2 + 4200)));
    }
    else
    {
      *(unsigned char *)uint64_t v29 = 44;
      unsigned int v31 = (BlueFin::GlFormat *)((char *)v29 + 1);
    }
    if (*(unsigned char *)(a2 + 4208))
    {
      if (v8 <= (char *)v31) {
        int v34 = 0;
      }
      else {
        int v34 = (char *)(v7 - (char *)v31);
      }
      int v13 = (BlueFin::GlFormat *)((char *)v31
                                + BlueFin::GlFormat::glsnprintf(v31, v34, "%05.1f,", v12, *(void *)(a2 + 4216)));
    }
    else
    {
      *(unsigned char *)unsigned int v31 = 44;
      int v13 = (BlueFin::GlFormat *)((char *)v31 + 1);
    }
    if (*(__int16 *)(a2 + 4274) <= 0) {
      unsigned int v33 = 69;
    }
    else {
      unsigned int v33 = 65;
    }
    unsigned int v32 = "%s,,,%c";
  }
  int v35 = *(_DWORD *)(a2 + 4060);
  if (v35 == 7 || v35 == 4) {
    unsigned int v33 = 77;
  }
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248) && *(void *)(a2 + 5624)) {
    unsigned int v33 = 68;
  }
  if (v8 <= (char *)v13) {
    unsigned __int8 v36 = 0;
  }
  else {
    unsigned __int8 v36 = (char *)(v7 - (char *)v13);
  }
  unsigned int v37 = BlueFin::GlFormat::glsnprintf(v13, v36, (unsigned __int8 *)v32, v12, a1 + 1799, v33);
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 26248))
  {
    unsigned __int8 v40 = (BlueFin::GlFormat *)((char *)v13 + v37);
    if (v8 <= (char *)v40) {
      __int16 v41 = 0;
    }
    else {
      __int16 v41 = (char *)(v7 - (char *)v40);
    }
    BlueFin::GlFormat::glsnprintf(v40, v41, ",%c", v39, 86);
  }

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7 - 1, v38);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaPWR(uint64_t a1, unsigned __int16 *a2, uint64_t a3, BlueFin::GlFormat *a4, int a5)
{
  int v9 = *(_DWORD *)(*(void *)(a1 + 1832) + 140);
  unsigned int v10 = *((_DWORD *)a2 + 20);
  float v11 = 0.0;
  if (v10) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12) {
    goto LABEL_15;
  }
  if (v9 == 805371913 || v9 == 1006829577)
  {
    int32x4_t v14 = *((int32x4_t *)a2 + 6);
    v14.i32[2] = *((_DWORD *)a2 + 26);
    v14.i32[3] = *((_DWORD *)a2 + 21);
    int32x4_t v15 = vmulq_s32(v14, (int32x4_t)xmmword_263BBCEC0);
    int v16 = 286;
    int v17 = *((_DWORD *)a2 + 22);
    int v18 = *((_DWORD *)a2 + 23);
    int v19 = 86;
LABEL_13:
    unsigned int v21 = vaddvq_s32(v15) + v17 * v16 + v18 * v19;
LABEL_14:
    float v11 = (double)v21 / ((double)v10 * 1000.0);
    goto LABEL_15;
  }
  if (v9 == 805502985)
  {
    int32x4_t v20 = *((int32x4_t *)a2 + 6);
    v20.i32[2] = *((_DWORD *)a2 + 26);
    v20.i32[3] = *((_DWORD *)a2 + 21);
    int32x4_t v15 = vmulq_s32(v20, (int32x4_t)xmmword_263BBCED0);
    int v16 = 278;
    int v17 = *((_DWORD *)a2 + 22);
    int v18 = *((_DWORD *)a2 + 23);
    int v19 = 62;
    goto LABEL_13;
  }
  if ((v9 & 0xF000FFFE) == 0x30000010 || (v9 & 0xF000FFFE) == 805306382)
  {
    int32x4_t v26 = *((int32x4_t *)a2 + 6);
    v26.i32[2] = *((_DWORD *)a2 + 26);
    v26.i32[3] = *((_DWORD *)a2 + 21);
    unsigned int v21 = vaddvq_s32(vmulq_s32(v26, (int32x4_t)xmmword_263BBCEE0)) + 100 * *((_DWORD *)a2 + 23);
    goto LABEL_14;
  }
LABEL_15:
  GlCustomLog(14, "MCU_PWR: HwVersion 0x%x, %.3fmA, Total(%u), InIdle(%u) InLP(%u) InSl(%u) In26Mhz(%u) In52MHz(%u) In100MHz(%u)\n", v9, v11, v10, *((_DWORD *)a2 + 21), *((_DWORD *)a2 + 22), *((_DWORD *)a2 + 23), *((_DWORD *)a2 + 24), *((_DWORD *)a2 + 25), *((_DWORD *)a2 + 26));
  float v22 = *((float *)a2 + 3);
  if ((*(_DWORD *)(*(void *)(a1 + 1832) + 88) - 39) > 1) {
    BlueFin::GlFormat::glsnprintf(a4, (char *)a5, "$PGLOR,%d,PWR,mA,%.1f,RFTm,%u,OscTm,%u,MeasTm,%u,UTC,%s,GNSSmA,%.1f,CPUTm,%u,COPTm,%u,COPMargTm,%u,SrchTm,%u,TrkTm,%u,RpcTm,%u,McuTotalTm,%u,McuSleepTm,%u,McuIdleTm,%u,Mcu26Tm,%u,Mcu52Tm,%u,McuTurboTm,%u", (const char *)*((unsigned int *)a2 + 24), 6, (float)(v11 + v22), *a2, a2[2], a2[5], a1 + 1767, v22, a2[4], a2[24], *((unsigned __int8 *)a2 + 108), a2[25], a2[26], a2[27], *((unsigned int *)a2 + 20),
  }
      *((unsigned int *)a2 + 23),
      *((unsigned int *)a2 + 21),
      *((unsigned int *)a2 + 24),
      *((unsigned int *)a2 + 25),
      *((unsigned int *)a2 + 26));
  else {
    BlueFin::GlFormat::glsnprintf(a4, (char *)a5, "$PGLOR,%d,PWR,mA_PMU,%.2f,RFTm,%u,OscTm,%u,MeasTm,%u,UTC,%s,CpuETm,%u,CpuLmTm,%u,Cop0Tm,%u,Cop1Tm,%u,COPMargTm,%u,SrchTm,%u,Trk0Tm,%u,Trk1Tm,%u,RpcTm,%u,CpuClk,%u,DspClk,%u,IdleClk,%u,Temp,%.1f,DspLoad,%.2f,SrchMcm,%u", (const char *)a2[33], 9, v22, *a2, a2[2], a2[5], a1 + 1767, a2[4], a2[30], a2[24], a2[31], *((unsigned __int8 *)a2 + 108), a2[25], a2[26], a2[32],
  }
      a2[27],
      a2[33],
      a2[34],
      a2[35],
      *((float *)a2 + 18),
      *((float *)a2 + 19),
      *((unsigned int *)a2 + 28));

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a4, (char *)a4 + a5 - 1, v23);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaLSQ(char *result, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v5 = (unsigned char *)(a2 + 7152);
  uint64_t v6 = (char *)this + (int)a4 - 1;
  if ((*(char *)(a2 + 7152) & 0x80000000) == 0)
  {
    if ((int)a4 != 1 && v6 >= (char *)this) {
      double v8 = (char *)(int)a4;
    }
    else {
      double v8 = 0;
    }
    unsigned int v9 = BlueFin::GlFormat::glsnprintf(this, v8, "$PGLOR,%d,LSQ,%s,", a4, 1, result + 1767);
    float v11 = (BlueFin::GlFormat *)((char *)this + v9);
    if (*v5)
    {
      double v12 = fabs(*(double *)(a2 + 7160));
      double v13 = fabs(*(double *)(a2 + 7168));
      uint64_t v14 = (int)v12;
      uint64_t v15 = (int)v13;
      double v16 = (v12 - (double)(int)v14) * 60.0;
      uint64_t v17 = (int)v16;
      uint64_t v18 = (int)((v16 - (double)(int)v17) * 1000000.0);
      double v19 = (v13 - (double)(int)v15) * 60.0;
      uint64_t v20 = (int)v19;
      uint64_t v21 = (int)((v19 - (double)(int)v20) * 1000000.0);
      float v22 = v6 + 1;
      if (v6 <= (char *)v11) {
        double v23 = 0;
      }
      else {
        double v23 = (char *)(v6 + 1 - (char *)v11);
      }
      uint64_t v24 = 83;
      if (*(double *)(a2 + 4072) >= 0.0) {
        uint64_t v24 = 78;
      }
      int32x4_t v26 = (BlueFin::GlFormat *)((char *)v11
                                + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v9), v23, "%02d%02d.%06d,%c,", v10, v14, v17, v18, v24));
      if (v6 <= (char *)v26) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = (char *)(v22 - (char *)v26);
      }
      uint64_t v28 = 87;
      if (*(double *)(a2 + 4080) >= 0.0) {
        uint64_t v28 = 69;
      }
      float v11 = (BlueFin::GlFormat *)((char *)v26
                                + BlueFin::GlFormat::glsnprintf(v26, v27, "%03d%02d.%06d,%c,%.1f,%.1f,", v25, v15, v20, v21, v28, *(float *)(a2 + 7176), *(float *)(a2 + 7180)));
      if (v6 <= (char *)v11) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = (char *)(v22 - (char *)v11);
      }
      if (v5[32])
      {
        unsigned int v30 = BlueFin::GlFormat::glsnprintf(v11, v29, "%.1f,%.1f,%.1f,", v10, *(float *)(a2 + 7188), *(float *)(a2 + 7192), *(float *)(a2 + 7196));
LABEL_32:
        unsigned int v33 = (BlueFin::GlFormat *)((char *)v11 + v30);
        if (v6 <= (char *)v33) {
          int v34 = 0;
        }
        else {
          int v34 = (char *)(v22 - (char *)v33);
        }
        if (v5[60]) {
          unsigned int v35 = BlueFin::GlFormat::glsnprintf(v33, v34, "%.1f,%.1f,", v31, *(float *)(a2 + 7216), *(float *)(a2 + 7220));
        }
        else {
          unsigned int v35 = BlueFin::GlFormat::glsnprintf(v33, v34, ",,", v31, v53, v58);
        }
        unsigned int v37 = (BlueFin::GlFormat *)((char *)v33 + v35);
        if (v6 <= (char *)v37) {
          unsigned __int8 v38 = 0;
        }
        else {
          unsigned __int8 v38 = (char *)(v22 - (char *)v37);
        }
        if (v5[72]) {
          unsigned int v39 = BlueFin::GlFormat::glsnprintf(v37, v38, "%.1f,%.1f,", v36, *(float *)(a2 + 7228), *(float *)(a2 + 7232));
        }
        else {
          unsigned int v39 = BlueFin::GlFormat::glsnprintf(v37, v38, ",,", v36, v54, v59);
        }
        __int16 v41 = (BlueFin::GlFormat *)((char *)v37 + v39);
        if (v6 <= (char *)v41) {
          uint64_t v42 = 0;
        }
        else {
          uint64_t v42 = (char *)(v22 - (char *)v41);
        }
        if (v5[48]) {
          unsigned int v43 = BlueFin::GlFormat::glsnprintf(v41, v42, "%.1f,%.1f,", v40, *(float *)(a2 + 7204), *(float *)(a2 + 7208));
        }
        else {
          unsigned int v43 = BlueFin::GlFormat::glsnprintf(v41, v42, ",,", v40, v55, v60);
        }
        int v45 = (BlueFin::GlFormat *)((char *)v41 + v43);
        if (v6 <= (char *)v45) {
          float v46 = 0;
        }
        else {
          float v46 = (char *)(v22 - (char *)v45);
        }
        uint64_t v47 = (BlueFin::GlFormat *)((char *)v45
                                  + BlueFin::GlFormat::glsnprintf(v45, v46, "%02d,", v44, *(__int16 *)(a2 + 7236)));
        float v49 = *(float *)(a2 + 7244);
        if (v6 <= (char *)v47) {
          unint64_t v50 = 0;
        }
        else {
          unint64_t v50 = (char *)(v22 - (char *)v47);
        }
        if (v49 == 0.0) {
          BlueFin::GlFormat::glsnprintf(v47, v50, ",", v48, v56, v61);
        }
        else {
          BlueFin::GlFormat::glsnprintf(v47, v50, "%.1f,%.1f", v48, *(float *)(a2 + 7240), v49);
        }
        return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v6, v51);
      }
      unsigned int v32 = ",,,";
    }
    else
    {
      float v22 = v6 + 1;
      if (v6 <= (char *)v11) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = (char *)(v6 + 1 - (char *)v11);
      }
      unsigned int v32 = ",,,,,,,,,";
    }
    unsigned int v30 = BlueFin::GlFormat::glsnprintf(v11, v29, (unsigned __int8 *)v32, v10, v52, v57, v62);
    goto LABEL_32;
  }
  if ((int)a4 != 1 && v6 >= (char *)this && (((int)a4 - 1) & 0x8000000000000000) == 0) {
    *(unsigned char *)this = 0;
  }
  return result;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaHLA(uint64_t a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v6 = (unsigned char *)(a2 + 7032);
  int v7 = (char *)this + (int)a4;
  double v8 = v7 - 1;
  if (v7 - 1 <= (char *)this) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = (char *)(int)a4;
  }
  unsigned int v10 = BlueFin::GlFormat::glsnprintf(this, v9, "$PGLOR,%d,HLA,%s,", a4, 2, a1 + 1767);
  double v12 = (char *)this + v10;
  if ((*(unsigned char *)(a2 + 7024) & 4) != 0)
  {
    if (v8 <= v12) {
      double v13 = 0;
    }
    else {
      double v13 = (char *)(v7 - v12);
    }
    if (*v6)
    {
      int v15 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v10), v13, "L,%1d,Al,%d,", v11, *(unsigned int *)(a2 + 7036), *(__int16 *)(a2 + 7034));
      goto LABEL_16;
    }
    uint64_t v78 = *(unsigned int *)(a2 + 7036);
    uint64_t v14 = "L,%1d,Al,,";
  }
  else
  {
    if (v8 <= v12) {
      double v13 = 0;
    }
    else {
      double v13 = (char *)(v7 - v12);
    }
    uint64_t v14 = "L,,Al,,";
  }
  int v15 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v10), v13, (unsigned __int8 *)v14, v11, v78, v90);
LABEL_16:
  uint64_t v17 = (BlueFin::GlFormat *)&v12[v15];
  if (v8 <= (char *)v17) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = (char *)(v7 - (char *)v17);
  }
  if ((*(unsigned char *)(a2 + 7024) & 0x10) != 0)
  {
    uint64_t v79 = *(__int16 *)(a2 + 7064);
    double v19 = "A,%d,";
  }
  else
  {
    double v19 = "A,,";
  }
  uint64_t v21 = (BlueFin::GlFormat *)((char *)v17
                            + BlueFin::GlFormat::glsnprintf(v17, v18, (unsigned __int8 *)v19, v16, v79));
  if ((*(unsigned char *)(a2 + 7024) & 0x20) != 0 && (uint64_t v22 = *(unsigned int *)(a2 + 7072), v22 <= 2))
  {
    if (v8 <= (char *)v21) {
      double v23 = 0;
    }
    else {
      double v23 = (char *)(v7 - (char *)v21);
    }
    unsigned int v24 = BlueFin::GlFormat::glsnprintf(v21, v23, "H,%d,%c,", v20, *(__int16 *)(a2 + 7068), byte_263BBCF67[v22]);
  }
  else
  {
    if (v8 <= (char *)v21) {
      int32x4_t v26 = 0;
    }
    else {
      int32x4_t v26 = (char *)(v7 - (char *)v21);
    }
    unsigned int v24 = BlueFin::GlFormat::glsnprintf(v21, v26, "H,,,", v20, v80, v91);
  }
  uint64_t v27 = (BlueFin::GlFormat *)((char *)v21 + v24);
  if (v8 <= (char *)v27) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = (char *)(v7 - (char *)v27);
  }
  if ((*(unsigned char *)(a2 + 7024) & 0x40) != 0)
  {
    uint64_t v81 = *(unsigned int *)(a2 + 7076);
    uint64_t v29 = "M,%1d,";
  }
  else
  {
    uint64_t v29 = "M,,";
  }
  unsigned int v31 = (BlueFin::GlFormat *)((char *)v27
                            + BlueFin::GlFormat::glsnprintf(v27, v28, (unsigned __int8 *)v29, v25, v81));
  if (v8 <= (char *)v31) {
    unsigned int v32 = 0;
  }
  else {
    unsigned int v32 = (char *)(v7 - (char *)v31);
  }
  if ((*(unsigned char *)(a2 + 7024) & 0x80) != 0)
  {
    uint64_t v82 = *(unsigned int *)(a2 + 7080);
    unsigned int v33 = "Ac,%1d,";
  }
  else
  {
    unsigned int v33 = "Ac,,";
  }
  unsigned int v35 = (BlueFin::GlFormat *)((char *)v31
                            + BlueFin::GlFormat::glsnprintf(v31, v32, (unsigned __int8 *)v33, v30, v82));
  if (v8 <= (char *)v35) {
    unsigned __int8 v36 = 0;
  }
  else {
    unsigned __int8 v36 = (char *)(v7 - (char *)v35);
  }
  if (*(unsigned char *)(a2 + 7025))
  {
    uint64_t v83 = *(unsigned int *)(a2 + 7084);
    unsigned int v37 = "Gr,%1d,";
  }
  else
  {
    unsigned int v37 = "Gr,,";
  }
  unsigned int v39 = (BlueFin::GlFormat *)((char *)v35
                            + BlueFin::GlFormat::glsnprintf(v35, v36, (unsigned __int8 *)v37, v34, v83));
  if ((*(unsigned char *)(a2 + 7025) & 2) != 0 && (uint64_t v40 = *(unsigned int *)(a2 + 7092), v40 <= 2))
  {
    if (v8 <= (char *)v39) {
      __int16 v41 = 0;
    }
    else {
      __int16 v41 = (char *)(v7 - (char *)v39);
    }
    unsigned int v42 = BlueFin::GlFormat::glsnprintf(v39, v41, "S,%.1f,%c,", v38, *(float *)(a2 + 7088), byte_263BBCF67[v40]);
  }
  else
  {
    if (v8 <= (char *)v39) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = (char *)(v7 - (char *)v39);
    }
    unsigned int v42 = BlueFin::GlFormat::glsnprintf(v39, v44, "S,,,", v38, v84, v92);
  }
  int v45 = (BlueFin::GlFormat *)((char *)v39 + v42);
  if ((*(unsigned char *)(a2 + 7025) & 4) != 0 && (uint64_t v46 = *(unsigned int *)(a2 + 7100), v46 <= 2))
  {
    if (v8 <= (char *)v45) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = (char *)(v7 - (char *)v45);
    }
    unsigned int v48 = BlueFin::GlFormat::glsnprintf(v45, v47, "Sx,%.1f,%c,", v43, *(float *)(a2 + 7096), byte_263BBCF67[v46]);
  }
  else
  {
    if (v8 <= (char *)v45) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = (char *)(v7 - (char *)v45);
    }
    unsigned int v48 = BlueFin::GlFormat::glsnprintf(v45, v50, "Sx,,,", v43, v85, v93);
  }
  double v51 = (BlueFin::GlFormat *)((char *)v45 + v48);
  if (v8 <= (char *)v51) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = (char *)(v7 - (char *)v51);
  }
  if ((*(unsigned char *)(a2 + 7025) & 0x10) != 0)
  {
    uint64_t v86 = *(unsigned int *)(a2 + 7104);
    uint64_t v53 = "T,%1d,";
  }
  else
  {
    uint64_t v53 = "T,,";
  }
  uint64_t v55 = (BlueFin::GlFormat *)((char *)v51
                            + BlueFin::GlFormat::glsnprintf(v51, v52, (unsigned __int8 *)v53, v49, v86));
  if (v8 <= (char *)v55) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = (char *)(v7 - (char *)v55);
  }
  if ((*(unsigned char *)(a2 + 7025) & 0x20) != 0)
  {
    uint64_t v87 = *(__int16 *)(a2 + 7108);
    uint64_t v57 = "Tr,%d,";
  }
  else
  {
    uint64_t v57 = "Tr,,";
  }
  uint64_t v59 = (BlueFin::GlFormat *)((char *)v55
                            + BlueFin::GlFormat::glsnprintf(v55, v56, (unsigned __int8 *)v57, v54, v87));
  if (v8 <= (char *)v59) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = (char *)(v7 - (char *)v59);
  }
  if ((*(unsigned char *)(a2 + 7025) & 0x40) != 0)
  {
    uint64_t v88 = *(unsigned int *)(a2 + 7112);
    uint64_t v61 = "Mn,%1d,";
  }
  else
  {
    uint64_t v61 = "Mn,,";
  }
  long long v63 = (BlueFin::GlFormat *)((char *)v59
                            + BlueFin::GlFormat::glsnprintf(v59, v60, (unsigned __int8 *)v61, v58, v88));
  if (v8 <= (char *)v63) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = (char *)(v7 - (char *)v63);
  }
  if ((*(unsigned char *)(a2 + 7026) & 8) != 0)
  {
    uint64_t v89 = *(__int16 *)(a2 + 7116);
    long long v65 = "Ap,%1d,";
  }
  else
  {
    long long v65 = "Ap,,";
  }
  long long v67 = (BlueFin::GlFormat *)((char *)v63
                            + BlueFin::GlFormat::glsnprintf(v63, v64, (unsigned __int8 *)v65, v62, v89));
  if (v8 <= (char *)v67) {
    long long v68 = 0;
  }
  else {
    long long v68 = (char *)(v7 - (char *)v67);
  }
  if (v6[88]) {
    unsigned int v69 = BlueFin::GlFormat::glsnprintf(v67, v68, "Ta,%1d,%c,%c", v66, (char)v6[88], byte_263BBCF67[*(unsigned int *)(a2 + 7124)], byte_263BBCF67[*(unsigned int *)(a2 + 7128)]);
  }
  else {
    unsigned int v69 = BlueFin::GlFormat::glsnprintf(v67, v68, "Ta,%1d,,", v66, 0, v94);
  }
  uint64_t v71 = (BlueFin::GlFormat *)((char *)v67 + v69);
  if (v8 <= (char *)v71) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = (char *)(v7 - (char *)v71);
  }
  uint64_t v73 = (BlueFin::GlFormat *)((char *)v71
                            + BlueFin::GlFormat::glsnprintf(v71, v72, ",Aa,%1d,", v70, *(unsigned int *)(a2 + 7132)));
  if (v8 <= (char *)v73) {
    double v75 = 0;
  }
  else {
    double v75 = (char *)(v7 - (char *)v73);
  }
  BlueFin::GlFormat::glsnprintf(v73, v75, "Ga,%1d,", v74, *(unsigned int *)(a2 + 7136));

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7 - 1, v76);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaGLO(char *result, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  if (*((void *)result + 231) == *(void *)(a2 + 7408)
    && *((void *)result + 232) == *(void *)(a2 + 7416)
    && *((void *)result + 233) == *(void *)(a2 + 7424))
  {
    *(unsigned char *)this = 0;
  }
  else
  {
    int v7 = (char *)this + (int)a4 - 1;
    double v8 = result + 1848;
    long long v9 = *(_OWORD *)(a2 + 7408);
    *((void *)result + 233) = *(void *)(a2 + 7424);
    *(_OWORD *)(result + 1848) = v9;
    if ((int)a4 != 1 && v7 >= (char *)this) {
      unsigned int v10 = (char *)(int)a4;
    }
    else {
      unsigned int v10 = 0;
    }
    uint64_t v11 = 0;
    double v13 = (BlueFin::GlFormat *)((char *)this
                              + BlueFin::GlFormat::glsnprintf(this, v10, "$PGLOR,%d,GLO", a4, 1));
    do
    {
      if (v7 <= (char *)v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = (char *)(v7 + 1 - (char *)v13);
      }
      double v13 = (BlueFin::GlFormat *)((char *)v13
                                + BlueFin::GlFormat::glsnprintf(v13, v14, ",%+d", v12, v8[v11++]));
    }
    while (v11 != 24);
    return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7, v15);
  }
  return result;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaGGA(uint64_t a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v6 = (char *)this + (int)a4 - 1;
  *(unsigned char *)this = 0;
  uint64_t v7 = *(__int16 *)(a2 + 4274);
  if (!*(unsigned char *)(a2 + 4048) || (*(unsigned char *)(a2 + 4068) & 8) != 0)
  {
    if (v6 > (char *)this) {
      uint64_t v20 = (char *)(int)a4;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = (BlueFin::GlFormat *)((char *)this
                              + BlueFin::GlFormat::glsnprintf(this, v20, "$GPGGA,%s,", a4, a1 + 1767));
    if (v6 > (char *)v21) {
      double v23 = (char *)(v6 - (char *)v21 + 1);
    }
    else {
      double v23 = 0;
    }
    if (*(unsigned char *)(a2 + 4049)) {
      BlueFin::GlFormat::glsnprintf(v21, v23, ",,,,%d,%02d,%.1f,%.1f,M,%.1f,M,,", v22, 0, v7, *(double *)(a2 + 4144) / 10.0, *(void *)(a2 + 4096), *(float *)(a2 + 4112));
    }
    else {
      BlueFin::GlFormat::glsnprintf(v21, v23, ",,,,%d,%02d,%.1f,,M,,M,,", v22, 0, v7, *(double *)(a2 + 4144) / 10.0);
    }
  }
  else
  {
    double v8 = *(double *)(a2 + 4072);
    double v9 = fabs(v8);
    double v10 = fabs(*(double *)(a2 + 4080));
    uint64_t v11 = (int)v9;
    uint64_t v12 = (int)v10;
    double v13 = (v9 - (double)(int)v11) * 60.0;
    uint64_t v14 = (int)v13;
    double v15 = (v10 - (double)(int)v12) * 60.0;
    uint64_t v16 = (int)v15;
    double v17 = (v13 - (double)(int)v14) * 1000000.0;
    double v18 = (v15 - (double)(int)v16) * 1000000.0;
    if ((int)v7 < 1)
    {
      uint64_t v19 = 6;
    }
    else if (*(void *)(a2 + 5624))
    {
      uint64_t v19 = 2;
    }
    else
    {
      uint64_t v19 = 1;
    }
    uint64_t v25 = (int)v18;
    int v26 = *(_DWORD *)(a2 + 4060);
    if (v26 == 7 || v26 == 4) {
      uint64_t v19 = 7;
    }
    if (v6 > (char *)this) {
      uint64_t v27 = (char *)(int)a4;
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v43 = v11;
    uint64_t v28 = 83;
    if (v8 >= 0.0) {
      uint64_t v28 = 78;
    }
    unsigned int v29 = BlueFin::GlFormat::glsnprintf(this, v27, "$GPGGA,%s,%02d%02d.%06d,%c,", a4, a1 + 1767, v43, v14, (int)v17, v28);
    unsigned int v31 = (char *)this + v29;
    unsigned int v32 = v6 + 1;
    if (v6 <= v31) {
      unsigned int v33 = 0;
    }
    else {
      unsigned int v33 = (char *)(v6 + 1 - v31);
    }
    uint64_t v34 = 87;
    if (*(double *)(a2 + 4080) >= 0.0) {
      uint64_t v34 = 69;
    }
    unsigned __int8 v36 = (BlueFin::GlFormat *)&v31[BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v29), v33, "%03d%02d.%06d,%c,%d,%02d,", v30, v12, v16, v25, v34, v19, v7)];
    if (v6 <= (char *)v36) {
      unsigned int v37 = 0;
    }
    else {
      unsigned int v37 = (char *)(v32 - (char *)v36);
    }
    unsigned __int8 v38 = (BlueFin::GlFormat *)((char *)v36
                              + BlueFin::GlFormat::glsnprintf(v36, v37, "%.1f,%.1f,M,%.1f,M,", v35, *(double *)(a2 + 4144) / 10.0, *(void *)(a2 + 4096), *(float *)(a2 + 4112)));
    if (v6 <= (char *)v38) {
      uint64_t v40 = 0;
    }
    else {
      uint64_t v40 = (char *)(v32 - (char *)v38);
    }
    if (v19 == 2) {
      BlueFin::GlFormat::glsnprintf(v38, v40, "%.1f,%04d", v39, *(float *)(a2 + 7300), *(unsigned __int16 *)(a2 + 7296), v45, v46, v47);
    }
    else {
      BlueFin::GlFormat::glsnprintf(v38, v40, ",", v39, v42, v44, v45, v46, v47);
    }
  }

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v6, v24);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaCTX(uint64_t a1, int a2, BlueFin::GlFormat *this, const char *a4, unsigned int *a5)
{
  uint64_t v7 = (char *)this + (int)a4;
  double v8 = v7 - 1;
  if ((int)a4 != 1 && v7 - 1 >= (char *)this) {
    double v9 = (char *)(int)a4;
  }
  else {
    double v9 = 0;
  }
  unsigned int v10 = BlueFin::GlFormat::glsnprintf(this, v9, "$PGLOR,%d,CTX,%s,", a4, 3, a1 + 1767);
  uint64_t v12 = (char *)this + v10;
  double v13 = (unsigned int *)*((void *)a5 + 4);
  LODWORD(v14) = v13[4];
  if (v14 == 7) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v14;
  }
  uint64_t v15 = v13[2];
  uint64_t v16 = v13[3];
  if (v8 <= v12) {
    double v17 = 0;
  }
  else {
    double v17 = (char *)(v7 - v12);
  }
  uint64_t v19 = (BlueFin::GlFormat *)&v12[BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v10), v17, "E,%1d,%1d,", v11, v14, v13[5])];
  if (v8 <= (char *)v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = (char *)(v7 - (char *)v19);
  }
  if (*a5) {
    unsigned int v21 = BlueFin::GlFormat::glsnprintf(v19, v20, "%1d,%1d,", v18, *a5, a5[1]);
  }
  else {
    unsigned int v21 = BlueFin::GlFormat::glsnprintf(v19, v20, ",,", v18, v31, v33);
  }
  double v23 = (BlueFin::GlFormat *)((char *)v19 + v21);
  if (v8 <= (char *)v23) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = (char *)(v7 - (char *)v23);
  }
  uint64_t v25 = (BlueFin::GlFormat *)((char *)v23
                            + BlueFin::GlFormat::glsnprintf(v23, v24, "V,%1d,%1d,", v22, v15, v16));
  if (*((unsigned char *)a5 + 24))
  {
    if (v8 <= (char *)v25) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = (char *)(v7 - (char *)v25);
    }
    BlueFin::GlFormat::glsnprintf(v25, v27, "S,%f,%f,%d", v26, *((void *)a5 + 1), *((void *)a5 + 2), *((unsigned __int8 *)a5 + 24));
  }
  else
  {
    if (v8 <= (char *)v25) {
      unsigned int v29 = 0;
    }
    else {
      unsigned int v29 = (char *)(v7 - (char *)v25);
    }
    BlueFin::GlFormat::glsnprintf(v25, v29, "S,,,", v26, v32, v34);
  }

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7 - 1, v28);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaAGC(uint64_t a1, uint64_t a2, uint64_t a3, BlueFin::GlFormat *this, int a5)
{
  double v9 = (char *)this + a5;
  unsigned int v10 = v9 - 1;
  if (v9 - 1 <= (char *)this) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (char *)a5;
  }
  unsigned int v12 = BlueFin::GlFormat::glsnprintf(this, v11, "$PGLOR,%d,AGC", (const char *)this, 3);
  uint64_t v15 = (char *)this + v12;
  if (!*(unsigned char *)(a2 + 251))
  {
    uint64_t v18 = *(void *)(a1 + 1832);
    int v19 = *(_DWORD *)(v18 + 88);
    if ((v19 - 36) >= 5 && v19 != 34)
    {
      if (v10 <= v15) {
        unsigned int v30 = 0;
      }
      else {
        unsigned int v30 = (char *)(v9 - v15);
      }
      double v58 = (float)(*(float *)(a2 + 260) + *(float *)(a2 + 264));
      double v59 = (float)(*(float *)(a2 + 268) + *(float *)(a2 + 272));
      double v54 = (float)(*(float *)(a2 + 252) + *(float *)(a2 + 256));
      uint64_t v31 = ",G,%.1lf,R,%.1lf,B,%.1lf,EA5,,AL1,,AL5,,LTE,,PM1,,PM5,";
      goto LABEL_33;
    }
    unsigned int v20 = *(_DWORD *)(v18 + 48);
    if (v10 <= v15) {
      unsigned int v21 = 0;
    }
    else {
      unsigned int v21 = (char *)(v9 - v15);
    }
    double v23 = (BlueFin::GlFormat *)&v15[BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v12), v21, ",G,%.1lf", v14, (float)(*(float *)(a2 + 252) + *(float *)(a2 + 256)))];
    if (v10 <= (char *)v23) {
      unsigned int v24 = 0;
    }
    else {
      unsigned int v24 = (char *)(v9 - (char *)v23);
    }
    int v26 = (BlueFin::GlFormat *)((char *)v23
                              + BlueFin::GlFormat::glsnprintf(v23, v24, ",R,%.1lf", v22, (float)(*(float *)(a2 + 260) + *(float *)(a2 + 264))));
    if (v20 <= 5 && ((1 << v20) & 0x26) != 0)
    {
      if (v10 <= (char *)v26) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = (char *)(v9 - (char *)v26);
      }
      unsigned int v28 = BlueFin::GlFormat::glsnprintf(v26, v27, ",B,%.1lf", v25, (float)(*(float *)(a2 + 268) + *(float *)(a2 + 272)));
    }
    else
    {
      if (v10 <= (char *)v26) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = (char *)(v9 - (char *)v26);
      }
      unsigned int v28 = BlueFin::GlFormat::glsnprintf(v26, v32, ",B,", v25, v55);
    }
    uint64_t v33 = (BlueFin::GlFormat *)((char *)v26 + v28);
    if (v20 <= 8 && ((1 << v20) & 0x1B4) != 0)
    {
      if (v10 <= (char *)v33) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (char *)(v9 - (char *)v33);
      }
      double v56 = (float)(*(float *)(a2 + 276) + *(float *)(a2 + 280));
      unsigned int v35 = ",E5A,%.1lf";
    }
    else
    {
      if (v10 <= (char *)v33) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = (char *)(v9 - (char *)v33);
      }
      unsigned int v35 = ",E5A,";
    }
    unsigned int v37 = (BlueFin::GlFormat *)((char *)v33
                              + BlueFin::GlFormat::glsnprintf(v33, v34, (unsigned __int8 *)v35, v29, *(void *)&v56));
    if (v10 <= (char *)v37) {
      unsigned __int8 v38 = 0;
    }
    else {
      unsigned __int8 v38 = (char *)(v9 - (char *)v37);
    }
    uint64_t v40 = (BlueFin::GlFormat *)((char *)v37
                              + BlueFin::GlFormat::glsnprintf(v37, v38, ",AL1,%.1lf", v36, *(float *)(a2 + 252)));
    if (v20 <= 8 && ((1 << v20) & 0x1B4) != 0)
    {
      if (v10 <= (char *)v40) {
        __int16 v41 = 0;
      }
      else {
        __int16 v41 = (char *)(v9 - (char *)v40);
      }
      double v57 = *(float *)(a2 + 276);
      uint64_t v42 = ",AL5,%.1lf";
    }
    else
    {
      if (v10 <= (char *)v40) {
        __int16 v41 = 0;
      }
      else {
        __int16 v41 = (char *)(v9 - (char *)v40);
      }
      uint64_t v42 = ",AL5,";
    }
    uint64_t v43 = 0;
    uint64_t v45 = (BlueFin::GlFormat *)((char *)v40
                              + BlueFin::GlFormat::glsnprintf(v40, v41, (unsigned __int8 *)v42, v39, *(void *)&v57));
    while (1)
    {
      int v46 = *(_DWORD *)(a2 + 320);
      if (v46 == byte_263BBCF64[v43])
      {
        int v47 = 64665;
      }
      else if (v46 != 1 {
             || (uint64_t v50 = a2 + 4 * v43, (v51 = *(_DWORD *)(v50 + 308)) == 0)
      }
             || (int v47 = *(_DWORD *)(v50 + 296) - v51, v47 < 1))
      {
        if (v10 <= (char *)v45) {
          uint64_t v52 = 0;
        }
        else {
          uint64_t v52 = (char *)(v9 - (char *)v45);
        }
        unsigned int v49 = BlueFin::GlFormat::glsnprintf(v45, v52, ",%s,", v44, off_2655E0238[v43], *(void *)&v58);
        goto LABEL_67;
      }
      if (v10 <= (char *)v45) {
        unsigned int v48 = 0;
      }
      else {
        unsigned int v48 = (char *)(v9 - (char *)v45);
      }
      unsigned int v49 = BlueFin::GlFormat::glsnprintf(v45, v48, ",%s,%.1lf", v44, off_2655E0238[v43], (float)((float)v47 / 64.665));
LABEL_67:
      uint64_t v45 = (BlueFin::GlFormat *)((char *)v45 + v49);
      if (++v43 == 3) {
        goto LABEL_68;
      }
    }
  }
  int v16 = *(unsigned __int8 *)(a3 + 49);
  if ((v16 - 1) < 0x20)
  {
    if (v10 <= v15) {
      double v17 = 0;
    }
    else {
      double v17 = (char *)(v9 - v15);
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v12), v17, ",G,%.1lf", v14, (float)(*(float *)(a2 + 252) + *(float *)(a2 + 256)));
    goto LABEL_68;
  }
  if ((v16 - 52) < 0xE)
  {
    if (v10 <= v15) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = (char *)(v9 - v15);
    }
    uint64_t v31 = ",R,";
LABEL_33:
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v12), v30, (unsigned __int8 *)v31, v14, *(void *)&v54, *(void *)&v58, *(void *)&v59);
  }
LABEL_68:

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v9 - 1, v13);
}

BOOL BlueFin::GlPeRqHdlr::SendNvMemInfo(BlueFin::GlPeRqHdlr *this)
{
  BOOL v1 = *((unsigned char *)this + 17) == 0;
  *((unsigned char *)this + 17) = 1;
  return v1;
}

uint64_t BlueFin::GlRequestImplNmea::GetGsvRate(BlueFin::GlRequestImplNmea *this)
{
  return *((__int16 *)this + 32);
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::SendPglorFix(uint64_t result, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 20))
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result + 104);
    if (v4 == -1)
    {
      int v7 = *(_DWORD *)(result + 36);
      if (v7 == -1)
      {
        int v9 = *(_DWORD *)(result + 32);
        int v6 = 1;
      }
      else
      {
        unsigned int v8 = *(_DWORD *)(*(void *)(result + 8) + 28);
        int v9 = *(_DWORD *)(result + 32);
        unsigned int v10 = v9 + v7;
        BOOL v11 = v10 >= v8;
        int v12 = v10 - v8;
        if (v11) {
          int v6 = v12;
        }
        else {
          int v6 = 1;
        }
      }
      unsigned int v5 = v9 - *(_DWORD *)(result + 28);
    }
    else
    {
      unsigned int v5 = *(_DWORD *)a2 - v4;
      int v6 = v5;
    }
    BlueFin::GlPeNmeaGen::FormatNmeaFIX(**(BlueFin::GlPeNmeaGen ***)(result + 56), v6, v5, (BlueFin::GlFormat *)__s, 80);
    GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v3 + 48), __s);
    __int16 v13 = strlen(__s);
    uint64_t result = BlueFin::GlPeRqHdlr::OnNmea((BlueFin::GlPeRqHdlr *)v3, __s, v13, v14);
    *(_DWORD *)(v3 + 104) = *(_DWORD *)a2;
    if (!*(_DWORD *)(v3 + 80))
    {
      GlCustomLog(13, "\tTTFF=%u:%02u.%01u\n", (v6 + 50) / 0xEA60u, (v6 + 50) / 0x3E8u - 60 * ((71582789 * (unint64_t)((v6 + 50) / 0x3E8u)) >> 32), (v6 + 50) / 0x64u - 10 * ((429496730 * (unint64_t)((v6 + 50) / 0x64u)) >> 32));
      return GlCustomLog(14, "TTFF @ <gps_time WeekNum=\"%hu\" TowMs=\"%u\"/>\n", *(unsigned __int16 *)(a2 + 24), *(_DWORD *)(a2 + 28));
    }
  }
  return result;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaFIX(BlueFin::GlPeNmeaGen *this, int a2, unsigned int a3, BlueFin::GlFormat *a4, int a5)
{
  BlueFin::GlFormat::glsnprintf(a4, (char *)a5, "$PGLOR,%d,FIX,%.1f,%.1f", (const char *)a4, 1, (float)(a2 + 10) * 0.001, (float)a3 * 0.001);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a4, (char *)a4 + a5 - 1, v7);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaRID(BlueFin::GlPeNmeaGen *this, BlueFin::GlFormat *a2, int a3, const char *a4)
{
  uint64_t v6 = *(unsigned int *)(*((void *)this + 229) + 88);
  if (v6 <= 0x28) {
    uint64_t v7 = BlueFin::ulRfType2AsicNumber[v6];
  }
  else {
    uint64_t v7 = 0;
  }
  BlueFin::GlFormat::glsnprintf(a2, (char *)a3, "$PGLOR,%d,RID,%u,%d,%d,%d,%u", a4, 0, v7, 161, 20, 24, 612249);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a2, (char *)a2 + a3 - 1, v8);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaNVM(BlueFin::GlPeNmeaGen *this, BlueFin::GlFormat *a2, int a3, const char *a4, int a5)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    char v8 = BlueFin::GlPeNmeaGen::FormatNmeaNVM(char *,short,unsigned int,unsigned int)::pcIdentifier[i];
    int v9 = __const__ZN7BlueFin11GlPeNmeaGen13FormatNmeaNVMEPcsjj_aulCheck[i];
    if ((v9 & a4) != 0) {
      char v10 = -32;
    }
    else {
      char v10 = 0;
    }
    v15[i] = v10 + v8;
    if ((v9 & a5) != 0) {
      char v11 = -32;
    }
    else {
      char v11 = 0;
    }
    v14[i] = v11 + v8;
  }
  BlueFin::GlFormat::glsnprintf(a2, (char *)a3, "$PGLOR,%d,NVM,%s,%s", a4, 0, v15, v14);
  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a2, (char *)a2 + a3 - 1, v12);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaSyncin(int a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  unsigned int v5 = (char *)this + (int)a4 - 1;
  if ((int)a4 != 1 && v5 >= (char *)this) {
    uint64_t v6 = (char *)(int)a4;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 84;
  if (!*(unsigned char *)(a2 + 7400)) {
    uint64_t v7 = 70;
  }
  BlueFin::GlFormat::glsnprintf(this, v6, "$PGLOR,%d,SYN,%hd,SynLms,%.6f,Week,%d,TOW,%u.%03d%03d,U,%u,Leap,%c,%d", a4, 0, *(unsigned int *)(a2 + 7388), *(void *)(a2 + 7392), *(unsigned __int16 *)(a2 + 7368), *(unsigned int *)(a2 + 7372), *(unsigned __int16 *)(a2 + 7376), *(unsigned __int16 *)(a2 + 7378), *(unsigned int *)(a2 + 7380), v7, *(char *)(a2 + 7401));

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v5, v8);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaRTC(uint64_t a1, unsigned int *a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v6 = (char *)this + (int)a4 - 1;
  if ((int)a4 != 1 && v6 >= (char *)this) {
    uint64_t v7 = (char *)(int)a4;
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = (BlueFin::GlFormat *)((char *)this
                           + BlueFin::GlFormat::glsnprintf(this, v7, "$PGLOR,%d,RTC,%s,", a4, 1, a1 + 1767));
  if (v6 > (char *)v8) {
    char v10 = (char *)(v6 - (char *)v8 + 1);
  }
  else {
    char v10 = 0;
  }
  BlueFin::GlFormat::glsnprintf(v8, v10, "%lu,%.3f,%+.0f,%.0f,%lu,", v9, *a2, *((void *)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 3), a2[8]);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v6, v11);
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::processEph@<X0>(BlueFin::GlPeNavGnssMeasMgr *this@<X0>, const BlueFin::GlSignalIdSet *a2@<X1>, BlueFin::GlSvIdSet *a3@<X3>, unsigned int a4@<W2>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 12) = 0u;
  *(void *)a5 = a5 + 12;
  *(unsigned char *)(a5 + 8) = 19;
  *(_OWORD *)(a5 + 28) = 0u;
  *(_OWORD *)(a5 + 44) = 0u;
  *(_OWORD *)(a5 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a5 + 72) = 0u;
  unsigned __int8 v21 = *((unsigned char *)a2 + 8);
  memcpy(v25, *(const void **)a2, 4 * v21);
  unsigned __int16 v23 = 0;
  unsigned __int8 v22 = 0;
  int v24 = v25[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v21); v22 != v21; uint64_t result = BlueFin::GlSetIterator::operator++(&v21))
  {
    int v20 = 0;
    unint64_t v10 = v23;
    if (v23 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    char v11 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v23;
    unsigned __int8 v12 = *v11;
    int v13 = (char)v11[1];
    v17[0] = *v11;
    int v18 = v13;
    __int16 v19 = v23;
    if (BlueFin::GlPeNavGnssMeasMgr::checkMeasEphValid((uint64_t *)this, v17, a4, a3, &v20))
    {
      *(_DWORD *)(*(void *)a5 + ((v10 >> 3) & 0x1FFC)) |= 1 << v10;
    }
    else
    {
      uint64_t v14 = *((void *)this + 1);
      v17[0] = v12;
      int v18 = v13;
      __int16 v19 = v10;
      char v15 = v20;
      uint64_t v16 = BlueFin::GlSignalIdArray::Get(*(void *)(v14 + 19176), (uint64_t)v17);
      if (v16)
      {
        *(unsigned char *)(v16 + 448) = v15;
        *(unsigned char *)(v16 + 449) = v15;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeNavGnssMeasMgr::checkMeasEphValid(uint64_t *a1, unsigned __int8 *a2, unsigned int a3, void *a4, int *a5)
{
  unint64_t v10 = (BlueFin::GlPeGloFcnOsnMgr **)(a1[2] + 119744);
  int v21 = 7;
  v22[0] = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v10, a2, (uint64_t)&v21);
  if (v21 > 6 || v22[0] - 1 >= 0x3F)
  {
    uint64_t result = 0;
    int v13 = 1;
    goto LABEL_8;
  }
  if (!BlueFin::GlPeSvHealthHelper::IsUsable(a1[7] + 32, &v21))
  {
    uint64_t result = 0;
    int v13 = 6;
    goto LABEL_8;
  }
  int ValidEphCacheSrc = BlueFin::GlPeAsstMgr::GetValidEphCacheSrc(a1[2], &v21);
  if (ValidEphCacheSrc == -1)
  {
    uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1[2] + 384), v21);
    if (!result
      || (uint64_t v14 = result,
          (uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, void))(*(void *)result + 112))(result, v22, 0)) == 0))
    {
LABEL_24:
      int v13 = 2;
      goto LABEL_8;
    }
    uint64_t v16 = result;
    v15.n128_f64[0] = (double)(int)a3;
    if (a3 <= 0xFF9222FE) {
      v15.n128_f64[0] = (double)a3;
    }
    int v17 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, __n128))(*(void *)v14 + 64))(v14, v22, 1, v15);
    if (v17 == 6)
    {
      *a5 = 4;
      uint64_t v19 = a1[3];
      unsigned __int8 v20 = *a2;
      BlueFin::GlPeLtoMgr::IdentifyBadLtoSvId(v19, &v20, 0);
      return 0;
    }
    if (v17 != 1)
    {
      if (v17)
      {
        uint64_t result = 0;
      }
      else
      {
        int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 152))(v16);
        uint64_t result = 1;
        if (v18 == 3) {
          *(_DWORD *)(*a4 + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
        }
      }
      goto LABEL_24;
    }
    uint64_t result = 0;
    int v13 = 3;
LABEL_8:
    *a5 = v13;
    return result;
  }
  if (ValidEphCacheSrc != 2) {
    return 1;
  }
  uint64_t result = 1;
  *(_DWORD *)(*a4 + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::GetValidEphCacheSrc(uint64_t a1, int *a2)
{
  if (BlueFin::GlGnssSet::Has(a1 + 120416, a2)) {
    return 2;
  }
  if (BlueFin::GlGnssSet::Has(a1 + 120032, a2)) {
    return 0;
  }
  if (BlueFin::GlGnssSet::Has(a1 + 120224, a2)) {
    return 1;
  }
  if (BlueFin::GlGnssSet::Has(a1 + 120608, a2)) {
    return 3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t BlueFin::GlPeLtoData::Deserialize(BlueFin::GlPeLtoData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 44) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 13 < 0xFFFFFFF4) {
    return 0;
  }
  if (v3 >= 5)
  {
    if (v3 >= 9)
    {
      if (v3 == 9) {
        unsigned int U8 = 5;
      }
      else {
        unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
      }
    }
    else
    {
      unsigned int U8 = 4;
    }
  }
  else
  {
    unsigned int U8 = 1;
  }
  BlueFin::GlPeLtoData::GlPeLtoData((uint64_t)&v36);
  BlueFin::GlPeLtoData::operator=((uint64_t)this, (uint64_t)&v36);
  unsigned __int8 v36 = &v38;
  char v37 = 3;
  uint64_t v38 = 0;
  int v39 = 0;
  unsigned int v7 = *((unsigned __int8 *)a2 + 12);
  if (v7 >= 7)
  {
    if (U8)
    {
      for (uint64_t i = 0; i != U8; ++i)
      {
        unsigned int v12 = BlueFin::GlImplGnss::m_aucImplGnssTable[i];
        BlueFin::GlSysLogEntry::GetGlSet(a2, (void **)&v36);
        if (i == 4 || i == 8)
        {
          BlueFin::GlSysLogEntry::GetGlSet(a2, (void **)&v36);
        }
        else
        {
          char ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
          char v14 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
          BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v33, ULong, v14);
          uint64_t v15 = BlueFin::GlGnssSet::operator()((uint64_t)this + 32, v12);
          uint64_t v16 = BlueFin::GlSetBase::operator=(v15, (uint64_t)&v33);
          *(void *)(v16 + 12) = v34;
          BlueFin::GlSysLogEntry::GetGlSet(a2, (void **)&v36);
          char v17 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
          char v18 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
          BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v33, v17, v18);
          uint64_t v19 = BlueFin::GlGnssSet::operator()((uint64_t)this + 224, v12);
          uint64_t v20 = BlueFin::GlSetBase::operator=(v19, (uint64_t)&v33);
          *(void *)(v20 + 12) = v34;
        }
      }
    }
  }
  else
  {
    if (v7 - 3 < 2)
    {
      BlueFin::GlSysLogEntry::GetGlSet(a2, (void **)&v36);
      char v21 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
      char v22 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
      BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v33, v21, v22);
      uint64_t v10 = BlueFin::GlSetBase::operator=(*((void *)this + 49), (uint64_t)&v33);
      goto LABEL_26;
    }
    if (v7 == 1)
    {
      BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete(a2, (uint64_t)&v33);
      BlueFin::GlSetBase::operator=((uint64_t)&v36, (uint64_t)&v33);
      uint64_t v38 = v34;
      int v39 = v35;
      char v23 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
      char v24 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
      BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v33, v23, v24);
      uint64_t v10 = BlueFin::GlSetBase::operator=(*((void *)this + 49), (uint64_t)&v33);
      goto LABEL_26;
    }
    if (v7 == 2)
    {
      BlueFin::GlSysLogEntry::GetGlSet96BitsObsolete(a2, (uint64_t)&v33);
      BlueFin::GlSetBase::operator=((uint64_t)&v36, (uint64_t)&v33);
      uint64_t v38 = v34;
      int v39 = v35;
      char v8 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
      char v9 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
      BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v33, v8, v9);
      uint64_t v10 = BlueFin::GlSetBase::operator=(*((void *)this + 49), (uint64_t)&v33);
LABEL_26:
      *(void *)(v10 + 12) = v34;
      goto LABEL_27;
    }
    if (U8)
    {
      for (uint64_t j = 0; j != U8; ++j)
      {
        unsigned int v28 = BlueFin::GlImplGnss::m_aucImplGnssTable[j];
        BlueFin::GlSysLogEntry::GetGlSet(a2, (void **)&v36);
        if (j != 4 && j != 8)
        {
          char v29 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
          char v30 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
          BlueFin::GlGnssIdSet::GlGnssIdSet((BlueFin::GlGnssIdSet *)&v33, v29, v30);
          uint64_t v31 = BlueFin::GlGnssSet::operator()((uint64_t)this + 224, v28);
          uint64_t v32 = BlueFin::GlSetBase::operator=(v31, (uint64_t)&v33);
          *(void *)(v32 + 12) = v34;
        }
      }
    }
  }
LABEL_27:
  BlueFin::GlSysLogEntry::GetBuffer(a2, (unsigned __int8 *)this + 8, 0x10u);
  unsigned int v25 = *((unsigned __int8 *)a2 + 12);
  if (v25 - 4 > 7)
  {
LABEL_35:
    if (v25 >= 8)
    {
      *((_DWORD *)this + 104) = BlueFin::GlSysLogEntry::GetU32(a2);
      if (*((unsigned char *)a2 + 12) == 11) {
        BlueFin::GlSysLogEntry::GetU32(a2);
      }
    }
    goto LABEL_38;
  }
  BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 6u)
  {
    if (U8 >= 2)
    {
      unsigned int v26 = U8 - 1;
      do
      {
        BlueFin::GlSysLogEntry::GetU32(a2);
        --v26;
      }
      while (v26);
    }
    for (; U8; --U8)
      BlueFin::GlSysLogEntry::GetU32(a2);
    unsigned int v25 = *((unsigned __int8 *)a2 + 12);
    goto LABEL_35;
  }
LABEL_38:
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 3532);
  return 1;
}

void BlueFin::GlSysLogEntry::GetGlSet(BlueFin::GlSysLogEntry *this, void **a2)
{
  unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(this);
  if (*((unsigned __int16 *)this + 10) + U8 > *((unsigned __int16 *)this + 11))
  {
    char v11 = "m_sReadIdx + ucByteNum <= m_sDataSize";
    DeviceFaultNotify("glutl_slog_codec.cpp", 353, "GetGlSet", (char)"m_sReadIdx + ucByteNum <= m_sDataSize");
    int v12 = 353;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", v12, v11);
  }
  unsigned int v5 = U8;
  if (!U8 || (U8 & 3) != 0 || (uint64_t v6 = *((unsigned __int8 *)a2 + 8), (v6 & 0x3F) == 0))
  {
    char v11 = "ucByteNum > 0 && ucByteNum%4 == 0 && otBase.GetMaxByteSize()>0 && otBase.GetMaxByteSize()%4 == 0";
    DeviceFaultNotify("glutl_slog_codec.cpp", 356, "GetGlSet", (char)"ucByteNum > 0 && ucByteNum%4 == 0 && otBase.GetMaxByteSize()>0 && otBase.GetMaxByteSize()%4 == 0");
    int v12 = 356;
    goto LABEL_17;
  }
  bzero(*a2, ((4 * v6 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (v5 >= 4)
  {
    unsigned int v7 = 0;
    if (v5 >> 2 <= 1) {
      int v8 = 1;
    }
    else {
      int v8 = v5 >> 2;
    }
    do
    {
      unsigned int v9 = (_BYTE)a2[1] & 0x3F;
      int U32 = BlueFin::GlSysLogEntry::GetU32(this);
      if (v7 >= v9)
      {
        if (U32)
        {
          char v11 = "GetU32() == 0";
          DeviceFaultNotify("glutl_slog_codec.cpp", 369, "GetGlSet", (char)"GetU32() == 0");
          int v12 = 369;
          goto LABEL_17;
        }
      }
      else
      {
        BlueFin::GlSetBase::SetULong((uint64_t)a2, v7, U32);
      }
      ++v7;
    }
    while (v8 != v7);
  }
}

uint64_t BlueFin::GlPeAsstMgr::UpdateEphValidityCache(BlueFin::GlPeAsstMgr *this)
{
  uint64_t v2 = 0;
  unsigned int v3 = (uint64_t *)((char *)this + 120200);
  uint64_t v4 = *((void *)this + 15121);
  do
  {
    bzero(*(void **)(v4 + v2), ((4 * *(unsigned __int8 *)(v4 + v2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v2 += 24;
  }
  while (v2 != 168);
  uint64_t v5 = 0;
  unsigned int v26 = (char *)this + 120800;
  uint64_t v6 = *v3;
  do
  {
    bzero(*(void **)(v6 + v5), ((4 * *(unsigned __int8 *)(v6 + v5 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v5 += 24;
  }
  while (v5 != 168);
  uint64_t v7 = 0;
  int v8 = (char *)this + 120032;
  uint64_t v9 = v3[24];
  do
  {
    bzero(*(void **)(v9 + v7), ((4 * *(unsigned __int8 *)(v9 + v7 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v7 += 24;
  }
  while (v7 != 168);
  uint64_t v10 = 0;
  char v11 = (char *)this + 120224;
  uint64_t v12 = v3[48];
  do
  {
    bzero(*(void **)(v12 + v10), ((4 * *(unsigned __int8 *)(v12 + v10 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v10 += 24;
  }
  while (v10 != 168);
  uint64_t v13 = 0;
  char v14 = (char *)this + 120416;
  uint64_t v15 = v3[72];
  do
  {
    bzero(*(void **)(v15 + v13), ((4 * *(unsigned __int8 *)(v15 + v13 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v13 += 24;
  }
  while (v13 != 168);
  unsigned int v16 = 0;
  char v17 = (char *)this + 120608;
  char v18 = (void *)((char *)this + 384);
  do
  {
    uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr(v18, v16);
    if (result)
    {
      uint64_t v20 = result;
      uint64_t v21 = BlueFin::GlGnssSet::operator()((uint64_t)v8, v16);
      uint64_t v22 = BlueFin::GlGnssSet::operator()((uint64_t)v11, v16);
      uint64_t v23 = BlueFin::GlGnssSet::operator()((uint64_t)v14, v16);
      uint64_t v24 = BlueFin::GlGnssSet::operator()((uint64_t)v17, v16);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 120))(v27, v20, v21, v22, v23, v24);
      uint64_t v25 = BlueFin::GlGnssSet::operator()((uint64_t)v26, v16);
      uint64_t result = BlueFin::GlSetBase::operator=(v25, (uint64_t)v27);
      *(void *)(result + 12) = *(void *)((char *)&v27[1] + 4);
    }
    ++v16;
  }
  while (v16 != 7);
  return result;
}

BlueFin::GlPeEphemerisMgr *BlueFin::GlPeGloEphMgr::GetValidity@<X0>(BlueFin::GlPeEphemerisMgr *this@<X0>, BlueFin::GlGnssIdSet *a2@<X1>, BlueFin::GlGnssIdSet *a3@<X2>, BlueFin::GlGnssIdSet *a4@<X3>, BlueFin::GlGnssIdSet *a5@<X4>, uint64_t a6@<X8>)
{
  if (*((unsigned char *)this + 7969))
  {
    if (a2)
    {
      char v11 = &v13;
      char v12 = 2;
      uint64_t v13 = 0;
      this = (BlueFin::GlPeEphemerisMgr *)BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v11);
      *(void *)((char *)a2 + 12) = v13;
    }
    if (a3)
    {
      char v11 = &v13;
      char v12 = 2;
      uint64_t v13 = 0;
      this = (BlueFin::GlPeEphemerisMgr *)BlueFin::GlSetBase::operator=((uint64_t)a3, (uint64_t)&v11);
      *(void *)((char *)a3 + 12) = v13;
    }
    if (a4)
    {
      char v11 = &v13;
      char v12 = 2;
      uint64_t v13 = 0;
      this = (BlueFin::GlPeEphemerisMgr *)BlueFin::GlSetBase::operator=((uint64_t)a4, (uint64_t)&v11);
      *(void *)((char *)a4 + 12) = v13;
    }
    if (a5)
    {
      char v11 = &v13;
      char v12 = 2;
      uint64_t v13 = 0;
      this = (BlueFin::GlPeEphemerisMgr *)BlueFin::GlSetBase::operator=((uint64_t)a5, (uint64_t)&v11);
      *(void *)((char *)a5 + 12) = v13;
    }
    *(void *)(a6 + 12) = 0;
    *(void *)a6 = a6 + 12;
    *(unsigned char *)(a6 + 8) = 2;
  }
  else
  {
    return (BlueFin::GlPeEphemerisMgr *)BlueFin::GlPeEphemerisMgr::GetValidity(this, a2, a3, a4, a5, (unsigned int *)a6);
  }
  return this;
}

uint64_t BlueFin::GlReqSm::TurnOffDataBitsIfNotNeeded(uint64_t this)
{
  if (!*(unsigned char *)(*(void *)(this + 6272) + 26218))
  {
    uint64_t v1 = this;
    char v14 = v16;
    char v15 = 8;
    memset(v16, 0, sizeof(v16));
    uint64_t v2 = *(_DWORD **)(this + 6280);
    if (v2[644])
    {
      this = BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeGnssTime *)(v2 + 652));
      BOOL v3 = *(float *)(this + 60) + 0.0 >= 0.005;
      uint64_t v2 = *(_DWORD **)(v1 + 6280);
    }
    else
    {
      BOOL v3 = 1;
    }
    if (*(unsigned char *)(v1 + 4942))
    {
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      unsigned int v6 = v2[642];
      do
      {
        unsigned __int8 v13 = *(unsigned char *)(*(void *)(v1 + 4944) + v4);
        char v7 = (v13 + 81) < 0xDCu || v3;
        if ((v7 & 1) == 0)
        {
          int v8 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(v1 + 6288) + 119744);
          int v19 = 7;
          unsigned __int8 v20 = 0;
          this = BlueFin::GlPeSvIdConverter::SvId2Gnss(v8, &v13, (uint64_t)&v19);
          int v17 = v19;
          unsigned __int8 v18 = v20;
          if (v20 - 1 <= 0x3E)
          {
            this = BlueFin::GlPeAsstMgr::IsEphValid(*(void *)(v1 + 6288), &v13, v6);
            if (this)
            {
              this = (uint64_t)BlueFin::GlPeAsstMgr::EphBeExpirationS(*(void *)(v1 + 6288), &v17, 1);
              if (this >= 0x3D) {
                *(_DWORD *)((char *)v14 + (((unint64_t)v13 >> 3) & 0x1C)) |= 1 << v13;
              }
            }
          }
        }
        ++v5;
        v4 += 8;
      }
      while (v5 < *(_WORD *)(v1 + 4942));
      if (*(_WORD *)(v1 + 4942))
      {
        uint64_t v9 = v14;
        uint64_t v10 = *(_WORD *)(v1 + 4942);
        char v11 = (unsigned int *)(*(void *)(v1 + 4944) + 4);
        do
        {
          __int16 v12 = *((_WORD *)v11 - 2);
          if ((_BYTE)v12) {
            *char v11 = *v11 & 0xFFFFFFFD | (2
          }
                                      * ((((unint64_t)*(unsigned int *)((char *)v9
                                                                             + (((unint64_t)v12 >> 3) & 0x1C)) >> (v12 & 0x1F)) & 1) == 0));
          v11 += 2;
          --v10;
        }
        while (v10);
      }
    }
  }
  return this;
}

void *BlueFin::GlPeAsstMgr::EphBeExpirationS(uint64_t a1, int *a2, int a3)
{
  uint64_t result = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1 + 384), *a2);
  if (result)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *, int *, uint64_t))(*result + 112))(result, a2 + 1, 1);
    if (result)
    {
      char v7 = result;
      if ((*(unsigned int (**)(void *))(*result + 152))(result) != 1)
      {
        int v8 = (*(uint64_t (**)(void *))(*v7 + 152))(v7);
        if (v8 == 2 || a3 == 0)
        {
          if (v8 != 2) {
            return 0;
          }
        }
        else if ((*(unsigned int (**)(void *))(*v7 + 152))(v7) != 3)
        {
          return 0;
        }
      }
      __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*(void *)a1, 1, v11);
      return (void *)(*(uint64_t (**)(void *, __n128 *, __n128))(*v7 + 248))(v7, v11, Time);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::IsEphValid(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v9 = 7;
  unsigned __int8 v10 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744), a2, (uint64_t)&v9);
  uint64_t result = 0;
  if (v9 <= 6)
  {
    if (v10 - 1 > 0x3E)
    {
      return 0;
    }
    else
    {
      uint64_t result = BlueFin::GlPeSvHealthHelper::IsUsable(*(void *)(a1 + 40) + 32, &v9);
      if (result)
      {
        uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1 + 384), v9);
        if (result)
        {
          uint64_t v6 = result;
          unsigned __int8 v8 = v10;
          uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void))(*(void *)result + 112))(result, &v8, 0);
          if (result)
          {
            v7.n128_f64[0] = (double)(int)a3;
            if (a3 <= 0xFF9222FE) {
              v7.n128_f64[0] = (double)a3;
            }
            return (*(unsigned int (**)(uint64_t, unsigned __int8 *, uint64_t, __n128))(*(void *)v6 + 64))(v6, &v8, 1, v7) == 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::GetValidity@<X0>(BlueFin::GlPeEphemerisMgr *this@<X0>, BlueFin::GlGnssIdSet *a2@<X1>, BlueFin::GlGnssIdSet *a3@<X2>, BlueFin::GlGnssIdSet *a4@<X3>, BlueFin::GlGnssIdSet *a5@<X4>, unsigned int *a6@<X8>)
{
  unsigned __int8 v36 = &v38;
  char v37 = 2;
  uint64_t v38 = 0;
  uint64_t v33 = &v35;
  char v34 = 2;
  uint64_t v35 = 0;
  char v30 = &v32;
  char v31 = 2;
  uint64_t v32 = 0;
  uint64_t v27 = &v29;
  char v28 = 2;
  unsigned int v12 = *(_DWORD *)(*((void *)this + 2) + 2568);
  uint64_t v29 = 0;
  if (v12 <= 0xFF9222FE) {
    double v13 = (double)v12;
  }
  else {
    double v13 = (double)(int)v12;
  }
  (*(void (**)(void **__return_ptr))(*(void *)this + 304))(&__src);
  LOBYTE(v24) = v22;
  memcpy(&v25, __src, 4 * v22);
  WORD1(v24) = 0;
  BYTE1(v24) = 0;
  HIDWORD(v24) = v25;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v24);
  while (BYTE1(v24) != v24)
  {
    LOBYTE(__src) = BYTE2(v24);
    if (!(*(unsigned int (**)(BlueFin::GlPeEphemerisMgr *, void **, uint64_t, double))(*(void *)this + 64))(this, &__src, 1, v13))
    {
      uint64_t v14 = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *, void **))(*(void *)this + 368))(this, &__src);
      switch((*(unsigned int (**)(uint64_t))(*(void *)v14 + 144))(v14))
      {
        case 0u:
          unsigned int v15 = __src;
          if (__src - 64 <= 0xFFFFFFC0) {
            goto LABEL_26;
          }
          unsigned int v16 = (int **)&v36;
          goto LABEL_15;
        case 1u:
          unsigned int v15 = __src;
          if (__src - 64 <= 0xFFFFFFC0) {
            goto LABEL_26;
          }
          unsigned int v16 = (int **)&v33;
          goto LABEL_15;
        case 2u:
          unsigned int v15 = __src;
          if (__src - 64 <= 0xFFFFFFC0) {
            goto LABEL_26;
          }
          unsigned int v16 = (int **)&v30;
          goto LABEL_15;
        case 3u:
          unsigned int v15 = __src;
          if (__src - 64 <= 0xFFFFFFC0)
          {
LABEL_26:
            DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          }
          unsigned int v16 = (int **)&v27;
LABEL_15:
          (*v16)[v15 >> 5] |= 1 << v15;
          break;
        default:
          break;
      }
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v24);
  }
  if (a2)
  {
    BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)&v36);
    *(void *)((char *)a2 + 12) = v38;
  }
  if (a3)
  {
    BlueFin::GlSetBase::operator=((uint64_t)a3, (uint64_t)&v33);
    *(void *)((char *)a3 + 12) = v35;
  }
  if (a4)
  {
    BlueFin::GlSetBase::operator=((uint64_t)a4, (uint64_t)&v30);
    *(void *)((char *)a4 + 12) = v32;
  }
  if (a5)
  {
    BlueFin::GlSetBase::operator=((uint64_t)a5, (uint64_t)&v27);
    *(void *)((char *)a5 + 12) = v29;
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v19, v20, 2u, (const void **)&v36);
  uint64_t v24 = (int *)v26;
  LOBYTE(v25) = 2;
  v26[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v19, &v24, (int **)&v33);
  BlueFin::GlSetBase::operator=((uint64_t)&v19, (uint64_t)&v24);
  *(void *)unsigned __int8 v20 = v26[0];
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v23, 2u, &v19);
  uint64_t v24 = (int *)v26;
  LOBYTE(v25) = 2;
  v26[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, &v24, (int **)&v30);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v24);
  *(void *)uint64_t v23 = v26[0];
  int v17 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a6, a6 + 3, 2u, (const void **)&__src);
  uint64_t v24 = (int *)v26;
  LOBYTE(v25) = 2;
  v26[0] = 0;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v17, &v24, (int **)&v27);
  uint64_t result = BlueFin::GlSetBase::operator=((uint64_t)a6, (uint64_t)&v24);
  *(void *)(a6 + 3) = v26[0];
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::IsEphValid(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 312))(a1)) {
    return 2;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 368))(a1, a2);
  int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1 + 72);
  v10.n128_f64[0] = a4;

  return v9(a1, v8, a3, v10);
}

uint64_t BlueFin::GlPeGloEphMgr::IsEphValid(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeEphemeris *a2, double a3)
{
  if (*((unsigned char *)this + 7969)) {
    return 2;
  }
  if ((*((unsigned char *)a2 + 8) & 0xF0) != 0x20)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 2201, "IsEphValid", (char)"rotEph.GetGnss() == GNSS_GLONASS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 2201, "rotEph.GetGnss() == GNSS_GLONASS");
  }
  uint64_t IsEphValid = BlueFin::GlPeEphemerisMgr::IsEphValid(this, a2, a3);
  if (IsEphValid == 1)
  {
    if ((*((unsigned char *)a2 + 8) & 0xF) == 1)
    {
      if (*((unsigned char *)this + 533))
      {
        unsigned __int8 v7 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 4);
        if (v7 != 248)
        {
          uint64_t v8 = *((void *)this + 730);
          unsigned int v9 = (v7 + 7);
          uint64_t v10 = v8 + 184 * (v7 + 7);
          if ((*(unsigned char *)(v10 + 88) & 0xF) != 0)
          {
            char v11 = (const BlueFin::GlPeEphemeris *)(v10 + 80);
            unsigned int v12 = *(_DWORD *)(v10 + 104);
            if (v12 == -7200001)
            {
              uint64_t IsEphValid = 1;
              BlueFin::GlPeTimeManager::GetTime(*((unsigned int **)this + 2), a3, 1, (uint64_t)v17);
              if (BlueFin::GlPeEphemeris::isExpired(v11, (uint64_t)v17)) {
                return IsEphValid;
              }
            }
            else
            {
              double v13 = (double)(int)v12;
              if (v12 <= 0xFF9222FE) {
                double v13 = (double)v12;
              }
              if (v13 > a3) {
                return 1;
              }
              unsigned int v14 = *(_DWORD *)(v10 + 108);
              double v15 = (double)(int)v14;
              if (v14 <= 0xFF9222FE) {
                double v15 = (double)v14;
              }
              if (v15 < a3) {
                return 1;
              }
            }
            if (BlueFin::GlPeGloEphMgr::updateEph(this, *(_DWORD *)(*((void *)this + 2) + 2568), *(double *)(v8 + 184 * v9 + 168), v11, 0))return BlueFin::GlPeEphemerisMgr::IsEphValid(this, v11, a3); {
          }
            }
        }
      }
    }
    return 1;
  }
  return IsEphValid;
}

uint64_t BlueFin::GlPeGloEphMgr::IsEphValid(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 7969)) {
    return 2;
  }
  else {
    return BlueFin::GlPeEphemerisMgr::IsEphValid(a1, a2, a3, a4);
  }
}

#error "26393F478: call analysis failed (funcsize=1125)"

BOOL BlueFin::GlPeSvHealthHelper::IsUsable(uint64_t a1, int *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)
    || !BlueFin::GlGnssSet::Missing(a1 + 2304, a2))
  {
    return 0;
  }

  return BlueFin::GlGnssSet::Missing(a1 + 2496, a2);
}

uint64_t BlueFin::GlPeDisabledSvs::Remove(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v3 = *a2;
  if (((*(unsigned int *)(*(void *)(result + 144) + ((v3 >> 3) & 0x1C)) >> (v3 & 0x1F)) & 1) == 0)
  {
    uint64_t v4 = result;
    BlueFin::GlSetBase::Remove(result, v3);
    int v5 = *a2;
    return BlueFin::GlSetBase::Remove(v4 + 48, v5);
  }
  return result;
}

double BlueFin::GlPeDisabledSvs::GetDisabledSvIds(BlueFin::GlPeDisabledSvs *this, const void **a2)
{
  unint64_t v3 = (int **)(a2 + 12);
  uint64_t v4 = BlueFin::GlSetBase::GlSetBase(this, (unsigned int *)this + 3, 8u, a2);
  uint64_t v6 = &v8;
  char v7 = 8;
  long long v8 = 0u;
  *(_OWORD *)unsigned int v9 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v4, (int **)&v6, v3);
  BlueFin::GlSetBase::operator=((uint64_t)this, (uint64_t)&v6);
  *(_OWORD *)((char *)this + 12) = v8;
  double result = v9[0];
  *(_OWORD *)((char *)this + 28) = *(_OWORD *)v9;
  return result;
}

BlueFin::GlMeSrdEstLowTow *BlueFin::GlMeSrdEstLowTow::GlMeSrdEstLowTow(BlueFin::GlMeSrdEstLowTow *this)
{
  *(void *)this = &unk_270EBD218;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 164) = (char *)this + 32;
  for (uint64_t i = 116; i != 1396; i += 320)
  {
    unint64_t v3 = (void *)(*((void *)this + 164) + i);
    *((_DWORD *)v3 - 28) = -1;
    *((_WORD *)v3 - 54) = 575;
    *(void *)((char *)v3 - 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)((char *)v3 - 68) = 0;
    *((unsigned char *)v3 - 52) = 0;
    *(v3 - 6) = 0;
    *(v3 - 5) = 0;
    *(void *)((char *)v3 - 35) = 0;
    *(void *)((char *)v3 - 12) = 0;
    *(void *)((char *)v3 - 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *((unsigned char *)v3 - 4) = 0;
    *unint64_t v3 = 0;
    v3[1] = 0;
    *(void *)((char *)v3 + 13) = 0;
    *((unsigned char *)v3 - 116) = 0;
    BlueFin::GlMeSrdLowTowMgr::Initialize((BlueFin::GlMeSrdLowTowMgr *)((char *)v3 - 116));
  }
  return this;
}

int32x2_t BlueFin::GlMeSrdLowTowMgr::Initialize(BlueFin::GlMeSrdLowTowMgr *this)
{
  *((_OWORD *)this + 14) = 0u;
  uint64_t v1 = (char *)this + 224;
  *(v1 - 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)v1 - 24) = 0;
  *((void *)v1 - 23) = 0;
  *((_DWORD *)v1 - 52) = -8388611;
  *(v1 - 204) = 0;
  *((void *)v1 - 25) = 0;
  *((_OWORD *)v1 - 4) = 0u;
  *((_OWORD *)v1 - 3) = 0u;
  *((_OWORD *)v1 - 2) = 0u;
  *((_OWORD *)v1 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)v1 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 - 5) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((void *)v1 - 16) = v1;
  *((void *)v1 - 15) = 0;
  *(v1 - 112) = 0;
  *((_DWORD *)v1 - 23) = 0;
  *((_DWORD *)v1 - 25) = 0;
  int32x2_t result = vdup_n_s32(0x280u);
  *(int32x2_t *)(v1 - 108) = result;
  *(v1 - 88) = 0;
  *((void *)v1 - 22) = v1 - 80;
  *((void *)v1 - 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(v1 - 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)v1 - 35) = 0;
  *((_DWORD *)v1 - 37) = 0;
  *(int32x2_t *)(v1 - 156) = result;
  *(v1 - 136) = 0;
  v1[80] = 0;
  *((_WORD *)v1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(v1 - 212) = -1;
  *(void *)(v1 + 84) = 0;
  v1[92] = 0;
  return result;
}

uint64_t BlueFin::GlPeSubsets::GetIntegrityGeometry(float *a1, uint64_t a2, int *a3)
{
  int v6 = 0;
  *a3 = 0;
  while (1)
  {
    int v7 = v6;
    if ((unsigned __int16)v6 > 1u) {
      break;
    }
    v9[0] = *(unsigned char *)(a2 + 8);
    memcpy(v12, *(const void **)a2, 4 * v9[0]);
    __int16 v10 = 0;
    v9[1] = 0;
    int v11 = v12[0];
    BlueFin::GlSetIterator::operator++(v9);
    BlueFin::GlPeSubsets::RecurseIntegrityGeometry(a1, (const BlueFin::GlSignalIdSet *)a2, (uint64_t)v9, a3, (__int16)v7);
    int v6 = v7 + 1;
    if (*a3) {
      return (__int16)(v7 - 1);
    }
  }
  LOWORD(v7) = 2;
  return (__int16)(v7 - 1);
}

float *BlueFin::GlPeSubsets::RecurseIntegrityGeometry(float *result, const BlueFin::GlSignalIdSet *a2, uint64_t a3, int *a4, int a5)
{
  int v7 = result;
  if (a5 < 1)
  {
    int32x2_t result = (float *)BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)result, a2);
    if (result)
    {
      if (result[28] <= 15.0) {
        return result;
      }
      int v13 = 1;
    }
    else
    {
      int v13 = 2;
    }
    *a4 = v13;
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    long long v9 = *(_OWORD *)(a3 + 64);
    unsigned int v16[3] = *(_OWORD *)(a3 + 48);
    void v16[4] = v9;
    int v17 = *(_DWORD *)(a3 + 80);
    long long v10 = *(_OWORD *)(a3 + 16);
    v16[0] = *(_OWORD *)a3;
    v16[1] = v10;
    _OWORD v16[2] = v8;
    if (BYTE1(v16[0]) != LOBYTE(v16[0]) && !*a4)
    {
      uint64_t v11 = (__int16)(a5 - 1);
      do
      {
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v14, v15, 0x13u, (const void **)a2);
        if (WORD1(v16[0]) >= 0x23Fu)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        BlueFin::GlSetBase::Remove((uint64_t)v14, SWORD1(v16[0]));
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v16);
        int32x2_t result = (float *)BlueFin::GlPeSubsets::RecurseIntegrityGeometry(v7, v14, v16, a4, v11);
      }
      while (BYTE1(v16[0]) != LOBYTE(v16[0]) && *a4 == 0);
    }
  }
  return result;
}

void BlueFin::GlPeFirstFix::ClassicFix(BlueFin::GlPeFirstFix *this, const BlueFin::GlSignalIdSet *a2, BlueFin::GlPeSubsets *a3, BlueFin::GlPeSubsets *a4, unsigned int a5)
{
  *(void *)this = 0;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 36;
  *((unsigned char *)this + 32) = 19;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  int32x4_t v10 = vdupq_n_s32(0x43C80000u);
  *((_OWORD *)this + 7) = 0u;
  *((int32x4_t *)this + 8) = v10;
  *((int32x4_t *)this + 9) = v10;
  unint64_t v11 = BlueFin::GlPeSubsets::Find(a4, a3);
  if (v11)
  {
    unsigned int v12 = (double *)v11;
    int v13 = BlueFin::GlPeFirstFix::ComputeNumDof((unsigned __int8 *)a2, (float *)a4, v11, a3);
    if ((unsigned __int16)(-13107 * ((*((_DWORD *)a4 + 2) - *(_DWORD *)a4) >> 5)) == 1 || v13 == 0)
    {
      v38[0] = 0;
      v38[1] = 0;
      uint64_t v39 = 0;
      int32x2_t v40 = vdup_n_s32(0x44FA0000u);
      int v41 = -1;
      if (BlueFin::GlPeKFAltAsst::altAsstFirstFix(*((void *)a2 + 4), (uint64_t)v38, v12, 0x3E8u))
      {
        uint64_t v15 = *((void *)a2 + 5);
        *(unsigned char *)(v15 + 48) = 1;
        *(double *)(v15 + 8) = *(float *)v40.i32;
        *(void *)uint64_t v15 = v39;
        *(_DWORD *)(v15 + 44) = 3;
        *((_DWORD *)a2 + 66) |= 4u;
        *(void *)a4 = (char *)a4 + 24;
        *((void *)a4 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)a4 + 24;
        *((void *)a4 + 2) = (char *)a4 + 28184;
        uint64_t v16 = 24;
        int32x4_t v17 = vdupq_n_s32(0x43C80000u);
        do
        {
          unsigned __int8 v18 = (char *)a4 + v16;
          *(void *)unsigned __int8 v18 = 0;
          *((void *)v18 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          *(_OWORD *)((char *)a4 + v16 + 36) = 0uLL;
          *((void *)v18 + 2) = 0;
          *((void *)v18 + 3) = (char *)a4 + v16 + 36;
          unsigned char v18[32] = 19;
          *(_OWORD *)(v18 + 52) = 0uLL;
          *(_OWORD *)(v18 + 68) = 0uLL;
          *(_OWORD *)(v18 + 84) = 0uLL;
          *(_OWORD *)(v18 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
          *((_OWORD *)v18 + 7) = 0uLL;
          *((int32x4_t *)v18 + 8) = v17;
          v16 += 160;
          *((int32x4_t *)v18 + 9) = v17;
        }
        while (v18 + 160 != (char *)a4 + 28184);
        int v19 = (unsigned char *)*((void *)a2 + 5);
        unsigned __int8 v20 = (char *)a2 + *(void *)(*(void *)a2 - 24);
        uint64_t v21 = *((void *)v20 + 11);
        int v22 = *((_DWORD *)a2 + 60);
        int v23 = *((_DWORD *)a2 + 66);
        char v34 = a4;
        long long v35 = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)char v37 = 0uLL;
        unsigned __int8 v36 = v19;
        *(_DWORD *)&v37[16] = v23;
        *(void *)&v37[24] = 0;
        *(_OWORD *)&v37[32] = *(_OWORD *)(v20 + 8);
        *(void *)&v37[48] = *((void *)v20 + 3);
        *(void *)&v37[56] = v21;
        *(_DWORD *)&v37[64] = v22;
        *(void *)&v37[72] = &v37[84];
        v37[80] = 8;
        memset(&v37[84], 0, 32);
        BlueFin::GlPeLsqSubsets::RunLsqSubsets((uint64_t)&v34, a3, 3u, *((void *)a2 + 32), 0);
        if ((__int16)(-13107 * ((*((_DWORD *)a4 + 2) - *(_DWORD *)a4) >> 5)) >= 177)
        {
          DeviceFaultNotify("glpe_firstfix.cpp", 1256, "ClassicFix", (char)"rotSubsets.Count() <= GLPE_LSQ_MAX_NUM_SUBSETS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_firstfix.cpp", 1256, "rotSubsets.Count() <= GLPE_LSQ_MAX_NUM_SUBSETS");
        }
        unint64_t v24 = BlueFin::GlPeSubsets::Find(a4, a3);
        if (v24)
        {
          int v25 = (char *)a2 + *(void *)(*(void *)a2 - 24);
          *(_OWORD *)(v25 + 8) = *(_OWORD *)v24;
          *((void *)v25 + 3) = *(void *)(v24 + 16);
          if (*((unsigned char *)a2 + 264)) {
            *((_DWORD *)a2 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (int)(*(float *)(v24 + 120) * 1000.0);
          }
        }
        else
        {
          BlueFin::GlSignalIdSet::Print(a3, 0x6Fu);
        }
      }
      if ((*((unsigned char *)a2 + 265) & 4) != 0)
      {
        unint64_t v26 = BlueFin::GlPeSubsets::Find(a4, a3);
        if (v26) {
          BlueFin::stSubset::operator=((uint64_t)this, v26);
        }
      }
    }
  }
  unint64_t v27 = BlueFin::GlPeSubsets::Find(a4, a3);
  if (v27)
  {
    uint64_t v28 = v27;
    *((_DWORD *)a2 + 75) = *(_DWORD *)(v27 + 120);
    *((_DWORD *)a2 + 76) = *(_DWORD *)(v27 + 148);
    int v29 = (__int16)(-13107 * ((*((_DWORD *)a4 + 2) - *(_DWORD *)a4) >> 5));
    if (v29 > 1 || v29 == 1 && BlueFin::GlSetBase::Cnt(a3) >= a5)
    {
      BlueFin::stSubset::operator=((uint64_t)this, v28);
      if ((__int16)(-13107 * ((*((_DWORD *)a4 + 2) - *(_DWORD *)a4) >> 5)) < 2)
      {
        float v33 = *((float *)this + 32);
        if ((float)(*(float *)(v28 + 152) * *(float *)(v28 + 112)) >= v33) {
          float v33 = *(float *)(v28 + 152) * *(float *)(v28 + 112);
        }
        *((float *)this + 32) = v33;
      }
      else
      {
        char v34 = 0;
        long long v35 = 0uLL;
        unsigned __int8 v36 = &v37[4];
        v37[0] = 19;
        memset(&v37[4], 0, 92);
        *(int32x4_t *)&v37[96] = vdupq_n_s32(0x43C80000u);
        *(_OWORD *)&v37[112] = *(_OWORD *)&v37[96];
        BlueFin::GlPeSubsets::ComputeScatterWidthK((unint64_t *)a4, 1, (uint64_t)&v34);
        float v30 = *((float *)this + 32);
        float v31 = *(float *)&v37[116];
        if ((float)(*(float *)&v37[96] * 0.5) >= v30) {
          float v30 = *(float *)&v37[96] * 0.5;
        }
        *((float *)this + 32) = v30;
        float v32 = *((float *)a2 + 76);
        if (v31 >= v32) {
          float v32 = v31;
        }
        *((float *)a2 + 76) = v32;
      }
    }
  }
}

uint64_t BlueFin::GlPeLsqSubsets::RunLsqSubsets(uint64_t a1, BlueFin::GlSetBase *this, unsigned int a3, uint64_t a4, int a5)
{
  if (a3 >= 4)
  {
    unsigned int v12 = "ucDepth<=3";
    DeviceFaultNotify("glpe_navutil.cpp", 515, "RunLsqSubsets", (char)"ucDepth<=3");
    int v13 = 515;
    goto LABEL_11;
  }
  if (a3 >= 2 && BlueFin::GlSetBase::Cnt(this) >= 0xB)
  {
    unsigned int v12 = "ucDepth<=1 || rotBase.Cnt() <=GLPE_SUBSETS_MAX_PR_ISOL";
    DeviceFaultNotify("glpe_navutil.cpp", 516, "RunLsqSubsets", (char)"ucDepth<=1 || rotBase.Cnt() <=GLPE_SUBSETS_MAX_PR_ISOL");
    int v13 = 516;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", v13, v12);
  }
  bzero(*(void **)(a1 + 104), ((4 * *(unsigned __int8 *)(a1 + 112) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)a1, (uint64_t)this, 3, a5, a4, (*(_DWORD *)(a1 + 48) >> 11) & 1);
  unint64_t v10 = BlueFin::GlPeSubsets::Find(*(BlueFin::GlPeSubsets **)a1, this);
  if (v10)
  {
    if (*(float *)(v10 + 128) < 800.0)
    {
      *(_OWORD *)(a1 + 64) = *(_OWORD *)v10;
      *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(v10 + 16);
      if (*(unsigned char *)(a1 + 48)) {
        *(_DWORD *)(a1 + 96) = (int)(*(float *)(v10 + 120) * 1000.0);
      }
    }
  }
  v14[0] = *((unsigned char *)this + 8);
  memcpy(v17, *(const void **)this, 4 * v14[0]);
  __int16 v15 = 0;
  v14[1] = 0;
  int v16 = v17[0];
  BlueFin::GlSetIterator::operator++(v14);
  return BlueFin::GlPeLsqSubsets::RecurseLsqSubsets(a1, (const void **)this, (uint64_t)v14, a3);
}

uint64_t BlueFin::GlPeLsqSubsets::RecurseLsqSubsets(uint64_t result, const void **a2, uint64_t a3, int a4)
{
  if (a4)
  {
    long long v4 = *(_OWORD *)(a3 + 32);
    long long v5 = *(_OWORD *)(a3 + 64);
    void v12[3] = *(_OWORD *)(a3 + 48);
    unsigned char v12[4] = v5;
    int v13 = *(_DWORD *)(a3 + 80);
    long long v6 = *(_OWORD *)(a3 + 16);
    v12[0] = *(_OWORD *)a3;
    v12[1] = v6;
    __n128 v12[2] = v4;
    if (BYTE1(v12[0]) != LOBYTE(v12[0]))
    {
      long long v8 = (uint64_t *)result;
      uint64_t v9 = (a4 - 1);
      do
      {
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v10, v11, 0x13u, a2);
        if (WORD1(v12[0]) >= 0x23Fu)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        BlueFin::GlSetBase::Remove((uint64_t)v10, SWORD1(v12[0]));
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v12);
        BlueFin::GlPeLsqSubsets::RunLsqSubset(v8, (uint64_t)v10, 1, 1, 0, 0);
        int32x2_t result = BlueFin::GlPeLsqSubsets::RecurseLsqSubsets(v8, v10, v12, v9);
      }
      while (BYTE1(v12[0]) != LOBYTE(v12[0]));
    }
  }
  return result;
}

unint64_t BlueFin::GlPeSubsets::Find(BlueFin::GlPeSubsets *this, const BlueFin::GlSignalIdSet *a2)
{
  BlueFin::GlPeSubsetIterator::GlPeSubsetIterator(&v7, (unint64_t *)this);
  unint64_t v4 = v7;
  unint64_t v3 = v8;
  while (1)
  {
    if (v3 >= v4) {
      return 0;
    }
    unint64_t v5 = BlueFin::GlPeSubsetIterator::operator->(&v7);
    if (BlueFin::GlSetBase::operator==(v5 + 24, (uint64_t)a2)) {
      break;
    }
    unint64_t v4 = v7;
    unint64_t v3 = v8 + 160;
    v8 += 160;
  }
  return BlueFin::GlPeSubsetIterator::operator->(&v7);
}

unint64_t *BlueFin::GlPeSubsetIterator::GlPeSubsetIterator(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  void *result = v2;
  result[1] = v3;
  if (!v2)
  {
    unint64_t v4 = "m_potWritePtr";
    DeviceFaultNotify("glpe_navutil.cpp", 128, "GlPeSubsetIterator", (char)"m_potWritePtr");
    int v5 = 128;
    goto LABEL_8;
  }
  if (!v3)
  {
    unint64_t v4 = "m_potReadPtr";
    DeviceFaultNotify("glpe_navutil.cpp", 129, "GlPeSubsetIterator", (char)"m_potReadPtr");
    int v5 = 129;
    goto LABEL_8;
  }
  if (v2 < v3)
  {
    unint64_t v4 = "m_potWritePtr>=m_potReadPtr";
    DeviceFaultNotify("glpe_navutil.cpp", 130, "GlPeSubsetIterator", (char)"m_potWritePtr>=m_potReadPtr");
    int v5 = 130;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", v5, v4);
  }
  return result;
}

void BlueFin::GlPeSubsets::ComputeScatterWidthK(unint64_t *a1, int a2, uint64_t a3)
{
  double v54 = 0.0;
  double v55 = 0.0;
  double v56 = 0.0;
  double v57 = v59;
  char v58 = 19;
  memset(v59, 0, sizeof(v59));
  int32x4_t v60 = vdupq_n_s32(0x43C80000u);
  int32x4_t v61 = v60;
  double v46 = 0.0;
  double v47 = 0.0;
  double v48 = 0.0;
  unsigned int v49 = v51;
  char v50 = 19;
  memset(v51, 0, sizeof(v51));
  int32x4_t v52 = v60;
  int32x4_t v53 = v60;
  double v40 = 0.0;
  double v41 = 0.0;
  uint64_t v42 = 0;
  uint64_t v43 = v45;
  char v44 = 19;
  memset(v45, 0, 92);
  *(int32x4_t *)&v45[23] = v60;
  *(int32x4_t *)&v45[27] = v60;
  BlueFin::stSubset::operator=(a3, (uint64_t)&v40);
  BlueFin::GlPeSubsetIterator::GlPeSubsetIterator(&v38, a1);
  unint64_t v6 = BlueFin::GlPeSubsetIterator::operator->(&v38);
  if (v39 >= v38)
  {
LABEL_34:
    *(int32x2_t *)(a3 + 128) = vdup_n_s32(0x457A0000u);
    *(_DWORD *)(a3 + 144) = 1165623296;
    float v37 = 4000.0;
    goto LABEL_35;
  }
  char v7 = 0;
  int v8 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v6 + 24)) - a2;
  while (2)
  {
    char v9 = v7;
    while (1)
    {
      if (a2)
      {
        unint64_t v10 = BlueFin::GlPeSubsetIterator::operator->(&v38);
        if (v8 > (int)BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v10 + 24))) {
          goto LABEL_8;
        }
      }
      if (v9) {
        break;
      }
      uint64_t v11 = v39;
      BlueFin::GlPeSubsetIterator::operator*(v38, v39);
      BlueFin::stSubset::operator=((uint64_t)&v54, v11);
      uint64_t v12 = v39;
      BlueFin::GlPeSubsetIterator::operator*(v38, v39);
      BlueFin::stSubset::operator=((uint64_t)&v46, v12);
      char v9 = 1;
LABEL_8:
      v39 += 160;
      if (v39 >= v38)
      {
        if ((v7 & 1) == 0) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }
    double v13 = v54;
    double v14 = *(double *)BlueFin::GlPeSubsetIterator::operator->(&v38);
    if (v13 < v14) {
      double v14 = v13;
    }
    double v54 = v14;
    double v15 = v55;
    double v16 = *(double *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 8);
    if (v15 < v16) {
      double v16 = v15;
    }
    double v55 = v16;
    double v17 = v56;
    double v18 = *(double *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 16);
    if (v17 < v18) {
      double v18 = v17;
    }
    double v56 = v18;
    float v19 = *(float *)&v59[88];
    float v20 = *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 124);
    if (v19 < v20) {
      float v20 = v19;
    }
    *(float *)&v59[88] = v20;
    float v21 = *(float *)&v59[84];
    float v22 = *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 120);
    if (v21 < v22) {
      float v22 = v21;
    }
    *(float *)&v59[84] = v22;
    double v23 = v46;
    double v24 = *(double *)BlueFin::GlPeSubsetIterator::operator->(&v38);
    if (v24 < v23) {
      double v24 = v23;
    }
    double v46 = v24;
    double v25 = v47;
    double v26 = *(double *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 8);
    if (v26 < v25) {
      double v26 = v25;
    }
    double v47 = v26;
    double v27 = v48;
    double v28 = *(double *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 16);
    if (v28 < v27) {
      double v28 = v27;
    }
    double v48 = v28;
    float v29 = *(float *)&v51[22];
    float v30 = *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 124);
    if (v30 < v29) {
      float v30 = v29;
    }
    *(float *)&v51[22] = v30;
    float v31 = *(float *)&v51[21];
    float v32 = *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v38) + 120);
    if (v32 < v31) {
      float v32 = v31;
    }
    *(float *)&v51[21] = v32;
    v39 += 160;
    char v7 = 1;
    if (v39 < v38) {
      continue;
    }
    break;
  }
LABEL_33:
  BlueFin::lla2ned(&v46, &v54, 0, &v40);
  float v33 = sqrt(v41 * v41 + v40 * v40);
  float v34 = v48 - v56;
  *(float *)(a3 + 128) = v33;
  *(float *)(a3 + 132) = v34;
  float v35 = *(float *)&v51[21];
  float v36 = *(float *)&v59[84];
  *(float *)(a3 + 144) = *(float *)&v51[22] - *(float *)&v59[88];
  float v37 = v35 - v36;
LABEL_35:
  *(float *)(a3 + 148) = v37;
}

unint64_t BlueFin::GlPeSubsetIterator::operator*(unint64_t a1, unint64_t a2)
{
  if (a2 > a1)
  {
    DeviceFaultNotify("glpe_navutil.cpp", 145, "operator*", (char)"m_potReadPtr <= m_potWritePtr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", 145, "m_potReadPtr <= m_potWritePtr");
  }
  return a2;
}

uint64_t BlueFin::GlPeSubsets::ComputeWeightedMeanPos@<X0>(BlueFin::GlPeSubsets *this@<X0>, const BlueFin::GlSignalIdSet *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = BlueFin::GlSetBase::Cnt(a2);
  uint64_t result = (uint64_t)BlueFin::GlPeSubsetIterator::GlPeSubsetIterator(&v28, (unint64_t *)this);
  if (v29 >= v28)
  {
    char v8 = 0;
    double v14 = 0.0;
    double v13 = 0.0;
    double v12 = 0.0;
    double v11 = 0.0;
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v10 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    char v8 = 0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v24 = 0.0;
    double v25 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    do
    {
      if (!v6
        || (unint64_t v15 = BlueFin::GlPeSubsetIterator::operator->(&v28),
            uint64_t result = BlueFin::GlSetBase::HasAny(a2, (const BlueFin::GlSetBase *)(v15 + 24)),
            (result & 1) == 0))
      {
        double v16 = 1.0 / *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 136);
        double v9 = v9 + *(double *)BlueFin::GlPeSubsetIterator::operator->(&v28) * v16;
        double v14 = v14 + v16;
        double v17 = 1.0 / *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 140);
        double v13 = v13 + *(double *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 8) * v17;
        double v12 = v12 + v17;
        double v18 = 1.0 / *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 132);
        double v11 = v11 + *(double *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 16) * v18;
        double v24 = v24 + v18;
        double v19 = 1.0 / *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 144);
        double v25 = v25 + *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 124) * v19;
        double v26 = v26 + v19;
        double v20 = 1.0 / *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v28) + 148);
        uint64_t result = BlueFin::GlPeSubsetIterator::operator->(&v28);
        double v27 = v27 + *(float *)(result + 120) * v20;
        double v10 = v10 + v20;
        ++v8;
      }
      v29 += 160;
    }
    while (v29 < v28);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 36) = 0u;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = a3 + 36;
  *(unsigned char *)(a3 + 32) = 19;
  *(_OWORD *)(a3 + 52) = 0u;
  *(_OWORD *)(a3 + 68) = 0u;
  *(_OWORD *)(a3 + 84) = 0u;
  *(_OWORD *)(a3 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  int32x4_t v21 = vdupq_n_s32(0x43C80000u);
  *(_OWORD *)(a3 + 112) = 0u;
  *(int32x4_t *)(a3 + 128) = v21;
  *(int32x4_t *)(a3 + 144) = v21;
  if (v8)
  {
    *(double *)a3 = v9 / v14;
    *(double *)(a3 + 8) = v13 / v12;
    *(double *)(a3 + 16) = v11 / v24;
    float v22 = v25 / v26;
    float v23 = v27 / v10;
    *(float *)(a3 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v23;
    *(float *)(a3 + 124) = v22;
  }
  return result;
}

unint64_t BlueFin::GlPeSubsetIterator::operator->(unint64_t *a1)
{
  unint64_t result = a1[1];
  if (result > *a1)
  {
    DeviceFaultNotify("glpe_navutil.cpp", 151, "operator->", (char)"m_potReadPtr <= m_potWritePtr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", 151, "m_potReadPtr <= m_potWritePtr");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::deserializeLtoGpsQzsL1CaIscAltNav(BlueFin::GlPeLtoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  int v6 = &unk_270EC16F8;
  unsigned int v7 = 7;
  v8[0] = -1;
  __int16 v9 = 0;
  int v3 = BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface::Deserialize((BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface *)&v6, a2);
  uint64_t result = 0;
  if (v3)
  {
    if (v7 == 3)
    {
      BlueFin::GlPeLtoMgr::UpdateQzsL1CaIsc((uint64_t)this, v8, 0, 1);
    }
    else
    {
      if (v7) {
        return 0;
      }
      BlueFin::GlPeLtoMgr::UpdateL1CaIsc((uint64_t)this, v8, 0, 1);
    }
    if (v7 > 6) {
      int v5 = "INV";
    }
    else {
      int v5 = off_2655DF758[v7];
    }
    GlCustomLog(14, "LtoMgr: read LTO (%s %d) L1CA Isc Info from NVMEM!\n", v5, (v8[0] + 1));
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface::Deserialize(BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 129 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v5 = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
  *((_DWORD *)this + 2) = v5;
  if (v5 != 3 && v5 != 0) {
    return 0;
  }
  *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_WORD *)this + 7) = BlueFin::GlSysLogEntry::GetS16(a2);
  return 1;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateL1CaIsc(uint64_t result, unsigned __int8 *a2, char a3, int a4)
{
  if (a2)
  {
    int v5 = a2;
    uint64_t v6 = result;
    uint64_t v7 = result + 1648;
    if (a4) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 32;
    }
    __int16 v9 = off_270EC1848;
    do
    {
      if (*v5 <= 0x1Fu)
      {
        unsigned int v10 = *(_DWORD *)v5;
        int v11 = HIWORD(*(_DWORD *)v5);
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
        {
          uint64_t result = v9();
          unsigned int v10 = *v5;
          LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)v5 + 1);
        }
        if (v10 <= 0x1F)
        {
          uint64_t v12 = *(void *)(v6 + 80);
          double v13 = (unsigned char *)(v12 + 6 * v10 + 7168);
          if (*v13 == 255 || (a3 & 1) != 0 || !*(unsigned char *)(v12 + 6 * v10 + 7172))
          {
            *double v13 = v10;
            *(_WORD *)(v12 + 6 * v10 + 717BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
            *(unsigned char *)(v12 + 6 * v10 + 7172) = a3;
            *(unsigned char *)(v12 + 6 * v10 + 7173) = 0;
          }
        }
        if ((a3 & 1) == 0) {
          uint64_t result = BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(v7, 0, v5);
        }
      }
      v5 += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(uint64_t result, int a2, unsigned __int8 *a3)
{
  _OWORD v11[4] = *MEMORY[0x263EF8340];
  if (a2 <= 6)
  {
    uint64_t v3 = *a3;
    if (v3 <= 0x3E)
    {
      uint64_t v4 = 0;
      v11[0] = result + 21188;
      v11[1] = 0x1200000000;
      __n128 v11[2] = result + 21636;
      v11[3] = 0x1500000003;
      for (char i = 1; ; char i = 0)
      {
        char v6 = i;
        if (LODWORD(v11[2 * v4 + 1]) == a2) {
          break;
        }
        uint64_t v4 = 1;
        if ((v6 & 1) == 0) {
          return result;
        }
      }
      uint64_t v7 = &v11[2 * v4];
      uint64_t v8 = *v7;
      uint64_t v9 = *v7 + 4 * v3;
      *(_DWORD *)(result + 24816) |= 1 << *((_WORD *)v7 + 6);
      if (v8) {
        BOOL v10 = v9 == (void)a3;
      }
      else {
        BOOL v10 = 1;
      }
      if (!v10)
      {
        *(unsigned char *)uint64_t v9 = v3;
        *(_WORD *)(v9 + 2) = *((_WORD *)a3 + 1);
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateQzsL1CaIsc(uint64_t result, unsigned __int8 *a2, char a3, int a4)
{
  if (a2)
  {
    int v5 = a2;
    uint64_t v6 = result;
    uint64_t v7 = result + 1648;
    if (a4) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 10;
    }
    uint64_t v9 = off_270EC1848;
    do
    {
      if (*v5 <= 9u)
      {
        unsigned int v10 = *(_DWORD *)v5;
        int v11 = HIWORD(*(_DWORD *)v5);
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
        {
          uint64_t result = v9();
          unsigned int v10 = *v5;
          LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)v5 + 1);
        }
        if (v10 <= 9)
        {
          uint64_t v12 = *(void *)(*(void *)(v6 + 80) + 7376);
          uint64_t v13 = v12 + 6 * v10;
          if (*(unsigned __int8 *)(v13 + 2432) == 255 || (a3 & 1) != 0 || !*(unsigned char *)(v12 + 6 * v10 + 2436))
          {
            uint64_t v14 = v13 + 2432;
            *(unsigned char *)uint64_t v14 = v10;
            *(_WORD *)(v14 + 2) = v11;
            *(unsigned char *)(v14 + 4) = a3;
            *(unsigned char *)(v14 + 5) = 1;
          }
        }
        if ((a3 & 1) == 0) {
          uint64_t result = BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(v7, 3, v5);
        }
      }
      v5 += 4;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::ChooseInitialOppPairs(BlueFin::GlPeAlmMgr *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1;
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v61 = 0;
  memset(v60, 0, sizeof(v60));
  BlueFin::GlPeAlmMgr::Alm2Plane(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v47, v48, v50, SHIDWORD(v50), a2, HIDWORD(a2), v53);
  unsigned int v10 = (uint64_t *)((char *)v9 + 36704);
  uint64_t v11 = 20;
  uint64_t v12 = 1;
  double v54 = v9;
  do
  {
    if ((((unint64_t)*(unsigned int *)(*a3 + 4 * (v12 >> 5)) >> v12) & 1) == 0)
    {
      uint64_t v13 = v12 - 1;
      *(void *)double v57 = v59;
      char v58 = 8;
      memset(v59, 0, 32);
      uint64_t v14 = *v10;
      unint64_t v15 = *(unsigned __int8 *)(*v10 + ((v12 - 1) << 6) + 40);
      uint64_t v49 = v12;
      uint64_t v51 = v11;
      if (*(unsigned char *)(*v10 + ((v12 - 1) << 6) + 40))
      {
        uint64_t v16 = 0;
        int v17 = 0;
        unint64_t v18 = v15 - 1;
        uint64_t v19 = v14 + v11;
        int v20 = -1;
        int v21 = 1;
        int v22 = -1;
        do
        {
          uint64_t v23 = v16 + 1;
          if (v16 + 1 < v15)
          {
            uint64_t v24 = 0;
            do
            {
              double v25 = (double)(*(_DWORD *)(v14 + (v13 << 6) + 4 * v16 + 16) - *(_DWORD *)(v19 + 4 * v24));
              double v26 = v25 / 360.0;
              if (v25 / 360.0 <= 0.0)
              {
                double v27 = 0.0;
                if (v25 / 360.0 < 0.0) {
                  double v27 = ceil(v26 + -0.5);
                }
              }
              else
              {
                double v27 = floor(v26 + 0.5);
              }
              int v28 = (int)fabs(v25 + v27 * -360.0);
              if (v22 == -1 || v17 < v28)
              {
                int v22 = v16;
                int v20 = v21 + v24;
                int v17 = v28;
              }
              ++v24;
            }
            while (v18 != v24);
          }
          ++v21;
          --v18;
          v19 += 4;
          ++v16;
        }
        while (v23 != v15);
        if (v22 == -1)
        {
          unsigned int v32 = 0;
        }
        else
        {
          unint64_t v31 = *(unsigned __int8 *)(*(void *)(v14 + (v13 << 6) + 8) + v22);
          *((unsigned char *)v60 + 6 * v13) = v31;
          unsigned int v32 = 1;
          *(_DWORD *)&v59[(v31 >> 3) & 0x1C] |= 1 << v31;
        }
        if (v20 != -1)
        {
          unint64_t v33 = *(unsigned __int8 *)(*(void *)(v14 + (v13 << 6) + 8) + v20);
          *(unsigned char *)(((unint64_t)v60 + 6 * v13) | v32) = v33;
          *(_DWORD *)&v59[(v33 >> 3) & 0x1C] |= 1 << v33;
          ++v32;
        }
      }
      else
      {
        unsigned int v32 = 0;
        int v22 = -1;
        int v20 = -1;
      }
      if (v32 < v15)
      {
        int v34 = v22 + 1;
        int v35 = v20 + 1;
        do
        {
          BlueFin::GlPeAlmMgr::GetNextSvId(&v56, v9, *(uint64_t *)v57, v13, (v34 + (int)v15) % (int)v15);
          unint64_t v15 = v56;
          *((unsigned char *)v60 + 6 * v13 + v32) = v56;
          *(_DWORD *)(*(void *)v57 + ((v15 >> 3) & 0x1C)) |= 1 << v15;
          unsigned int v36 = v32 + 1;
          LODWORD(v15) = *(unsigned __int8 *)(*v10 + (v13 << 6) + 40);
          if (v32 + 1 < v15)
          {
            BlueFin::GlPeAlmMgr::GetNextSvId(&v55, v9, *(uint64_t *)v57, v13, (v35 + (int)v15) % (int)v15);
            unint64_t v15 = v55;
            *((unsigned char *)v60 + 6 * v13 + v36) = v55;
            *(_DWORD *)(*(void *)v57 + ((v15 >> 3) & 0x1C)) |= 1 << v15;
            unsigned int v36 = v32 + 2;
            LODWORD(v15) = *(unsigned __int8 *)(*v10 + (v13 << 6) + 40);
          }
          unsigned int v32 = v36;
          uint64_t v9 = v54;
        }
        while (v36 < v15);
      }
      uint64_t v12 = v49;
      uint64_t v11 = v51;
    }
    ++v12;
    v11 += 64;
  }
  while (v12 != 7);
  float v37 = (BlueFin::GlSetBase *)((char *)v52 + 200);
  unint64_t v38 = 1;
  while (2)
  {
    for (uint64_t i = 0; ; ++i)
    {
      unint64_t v40 = i + 1;
      unint64_t v41 = byte_263BB3A50[i];
      if (((*(unsigned int *)(*a3 + ((v41 >> 3) & 0x1C)) >> (v41 & 0x1F)) & 1) == 0)
      {
        unint64_t v42 = v41 - 1;
        unint64_t v43 = *(unsigned __int8 *)(*v10 + ((v41 - 1) << 6) + 40);
        if (v38 <= v43 && *((unsigned __int8 *)v60 + 6 * (int)v42 + v38 - 1) - 33 >= 0xFFFFFFE0)
        {
          LOBYTE(v57[0]) = *((unsigned char *)v60 + 6 * (int)v42 + v38 - 1);
          BlueFin::GlPeAlmSvIdList::Add((uint64_t)v52, v57);
          if (BlueFin::GlSetBase::Cnt(v37) == 188) {
            goto LABEL_47;
          }
          unint64_t v43 = *(unsigned __int8 *)(*v10 + (v42 << 6) + 40);
        }
        if (v38 < v43 && *((unsigned __int8 *)v60 + 6 * (int)v42 + v38) - 33 >= 0xFFFFFFE0) {
          break;
        }
      }
      if (v40 > 5) {
        goto LABEL_47;
      }
LABEL_44:
      ;
    }
    LOBYTE(v57[0]) = *((unsigned char *)v60 + 6 * (int)v42 + v38);
    BlueFin::GlPeAlmSvIdList::Add((uint64_t)v52, v57);
    unsigned __int8 v44 = BlueFin::GlSetBase::Cnt(v37);
    if (v40 <= 5 && v44 != 188) {
      goto LABEL_44;
    }
LABEL_47:
    uint64_t result = BlueFin::GlSetBase::Cnt(v37);
    if (result != 188)
    {
      BOOL v46 = v38 >= 5;
      v38 += 2;
      if (!v46) {
        continue;
      }
    }
    return result;
  }
}

uint64_t BlueFin::GlPeAlmSvIdList::Add(uint64_t this, unsigned char *a2)
{
  unsigned int v2 = *a2;
  if (v2 - 33 >= 0xFFFFFFE0)
  {
    uint64_t v3 = *(void *)(this + 200);
    if ((((unint64_t)*(unsigned int *)(v3 + 4 * (v2 >> 5)) >> (v2 & 0x1F)) & 1) == 0)
    {
      uint64_t v5 = *(void *)(this + 192);
      this = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(this + 200));
      *(unsigned char *)(v5 + this) = v2;
      *(_DWORD *)(v3 + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
    }
  }
  return this;
}

unsigned char *BlueFin::GlPeAlmMgr::GetNextSvId(unsigned char *this, const BlueFin::GlSvIdSet *a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  if (a4 >= 6)
  {
    unsigned int v10 = "iPlaneIndex >= GLPE_ALM_MIN_PRN_PLANE-1 && iPlaneIndex < GLPE_ALM_MAX_PRN_PLANE";
    DeviceFaultNotify("glpe_almmgr.cpp", 4356, "GetNextSvId", (char)"iPlaneIndex >= GLPE_ALM_MIN_PRN_PLANE-1 && iPlaneIndex < GLPE_ALM_MAX_PRN_PLANE");
    int v11 = 4356;
    goto LABEL_13;
  }
  if (a5 >= 6)
  {
    unsigned int v10 = "i0 >= GLPE_ALM_MIN_PRN_POS-1 && i0 < GLPE_ALM_MAX_PRN_POS";
    DeviceFaultNotify("glpe_almmgr.cpp", 4357, "GetNextSvId", (char)"i0 >= GLPE_ALM_MIN_PRN_POS-1 && i0 < GLPE_ALM_MAX_PRN_POS");
    int v11 = 4357;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", v11, v10);
  }
  int v5 = 0;
  unint64_t v6 = *((void *)a2 + 4588) + ((unint64_t)a4 << 6);
  unsigned int v7 = *(unsigned __int8 *)(v6 + 40);
  uint64_t v8 = *(void *)(v6 + 8);
  while (1)
  {
    unint64_t v9 = *(unsigned __int8 *)(v8 + (int)a5);
    if (((*(unsigned int *)(a3 + ((v9 >> 3) & 0x1C)) >> (v9 & 0x1F)) & 1) == 0) {
      break;
    }
    if ((int)(a5 + 1) < (int)v7) {
      ++a5;
    }
    else {
      a5 = 0;
    }
    if (v7 < ++v5)
    {
      LOBYTE(v9) = 0;
      break;
    }
  }
  *this = v9;
  return this;
}

void BlueFin::GlMeSrdReceiverParametersProgrammer::ProgramReceiverParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v361 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(unsigned char *)(a1 + 102) = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
  char v9 = *(unsigned char *)(a1 + 102);
  *(unsigned char *)(a1 + 102) = v9 + 1;
  v256[0] = BlueFin::GlMeSrdReceiverParametersProgrammer::OnReliableAck;
  v256[1] = a1;
  char v257 = v9;
  __int16 v258 = 1;
  uint64_t v259 = v8;
  int v260 = 0;
  __int16 v261 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 88))(a1, v256, a3);
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  LOWORD(v5) = *(_WORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8)) + 24);
  bzero(__dst, 0x380uLL);
  LOWORD(__dst[0]) = 1000;
  WORD2(__dst[0]) = 200;
  BYTE2(__dst[1]) = 15;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 328))()) {
    __int16 v11 = 390;
  }
  else {
    __int16 v11 = 480;
  }
  WORD2(__dst[1]) = v11;
  LOWORD(__dst[2]) = 0;
  BYTE2(__dst[2]) = 0;
  WORD2(__dst[17]) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetSniffDFThreshold(a1, 0, 200.0);
  BYTE3(__dst[2]) = 0;
  uint64_t v12 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 0, 0);
  uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), 0, 1);
  float v14 = *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), v12)+ 8);
  float v15 = *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), v13)+ 8);
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), v12);
  float EramToCopReQuantScaleFactor = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(*(_DWORD *)(v16 + 4));
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8), v13);
  float v19 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEramToCopReQuantScaleFactor(*(_DWORD *)(v18 + 4));
  uint64_t v255 = a1;
  if ((*(double (**)(void))(**(void **)(a1 + 16) + 888))(*(void *)(a1 + 16)) >= 0.0) {
    float v20 = (*(double (**)(void))(**(void **)(a1 + 16) + 888))(*(void *)(a1 + 16));
  }
  else {
    float v20 = *(float *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 12);
  }
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold(a1, 0, 1, v20, v14, EramToCopReQuantScaleFactor);
  float v22 = v21;
  if ((*(double (**)(void))(**(void **)(a1 + 16) + 888))(*(void *)(a1 + 16)) >= 0.0) {
    float v23 = (*(double (**)(void))(**(void **)(a1 + 16) + 888))(*(void *)(a1 + 16));
  }
  else {
    float v23 = *(float *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 12);
  }
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold(a1, 0, 1, v23, v15, v19);
  float v25 = v24;
  if ((*(double (**)(void))(**(void **)(a1 + 16) + 904))(*(void *)(a1 + 16)) >= 0.0) {
    float v26 = (*(double (**)(void))(**(void **)(a1 + 16) + 904))(*(void *)(a1 + 16));
  }
  else {
    float v26 = *(float *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 16);
  }
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold(a1, 0, 1, v26, v14, EramToCopReQuantScaleFactor);
  float v28 = v27;
  if ((*(double (**)(void))(**(void **)(a1 + 16) + 904))(*(void *)(a1 + 16)) >= 0.0) {
    float v29 = (*(double (**)(void))(**(void **)(a1 + 16) + 904))(*(void *)(a1 + 16));
  }
  else {
    float v29 = *(float *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 16);
  }
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold(a1, 0, 1, v29, v15, v19);
  float v31 = v30;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 240))(*(void *)(a1 + 16))) {
    float v32 = 0.00000011921;
  }
  else {
    float v32 = 0.00000095367;
  }
  float v33 = v22 * v32;
  if (vabds_f32(v22 * v32, v25 * v32) >= 0.5)
  {
    double v251 = "FABS_F(fXcorStrongThreshGpsPrebit - fXcorStrongThreshGpsPostbit) < 0.5";
    int v252 = 2082;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2082, "ProgramCommonParameters", (char)"FABS_F(fXcorStrongThreshGpsPrebit - fXcorStrongThreshGpsPostbit) < 0.5");
    goto LABEL_459;
  }
  float v34 = v28 * v32;
  if (vabds_f32(v28 * v32, v31 * v32) >= 0.5)
  {
    double v251 = "FABS_F(fXcorWeakThreshGpsPrebit - fXcorWeakThreshGpsPostbit) < 0.5";
    int v252 = 2083;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2083, "ProgramCommonParameters", (char)"FABS_F(fXcorWeakThreshGpsPrebit - fXcorWeakThreshGpsPostbit) < 0.5");
    goto LABEL_459;
  }
  if (v33 < 0.0)
  {
    double v251 = "fXcorStrongThresh >= 0";
    int v252 = 2089;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2089, "ProgramCommonParameters", (char)"fXcorStrongThresh >= 0");
    goto LABEL_459;
  }
  if (v33 <= 254.0) {
    float v35 = v22 * v32;
  }
  else {
    float v35 = 254.0;
  }
  if (v34 < 0.0)
  {
    double v251 = "fXcorWeakThresh >= 0";
    int v252 = 2095;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2095, "ProgramCommonParameters", (char)"fXcorWeakThresh >= 0");
    goto LABEL_459;
  }
  if (v34 <= 254.0) {
    float v36 = v28 * v32;
  }
  else {
    float v36 = 254.0;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 544))(*(void *)(a1 + 16)))
  {
    LOBYTE(v37) = 0;
    BYTE4(__dst[2]) = -1;
    goto LABEL_43;
  }
  if (v35 <= 0.0)
  {
    if (v35 >= 0.0)
    {
      LOBYTE(v39) = 0;
      goto LABEL_37;
    }
    double v38 = -0.5;
  }
  else
  {
    double v38 = 0.5;
  }
  int v39 = (int)(v35 + v38);
LABEL_37:
  BYTE4(__dst[2]) = v39;
  if (v36 <= 0.0)
  {
    if (v36 >= 0.0)
    {
      LOBYTE(v37) = 0;
      goto LABEL_43;
    }
    double v40 = -0.5;
  }
  else
  {
    double v40 = 0.5;
  }
  int v37 = (int)(v36 + v40);
LABEL_43:
  BYTE5(__dst[2]) = v37;
  uint64_t v41 = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), 0, 0);
  uint64_t v42 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), 0, 1);
  if (!BlueFin::GlMeTrkCvecTapConfig::operator==(v41 + 148, v42 + 148))
  {
    double v251 = "m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GPS, PREBIT_MODE).stCvecTapConfig == m_rRxParams."
           "GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GPS, POSTBIT_MODE).stCvecTapConfig";
    int v252 = 2115;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2115, "ProgramCommonParameters", (char)"m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GPS, PREBIT_MODE).stCvecTapConfig == m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GPS, POSTBIT_MODE).stCvecTapConfig");
    goto LABEL_459;
  }
  int v43 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 816))(*(void *)(a1 + 16));
  *(void *)((char *)&__dst[2] + 6) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(a1, 0, 0);
  *(void *)((char *)&__dst[3] + 6) = v44;
  if (v43)
  {
    *(void *)((char *)&__dst[4] + 6) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(a1, 0, 1);
    *(void *)((char *)&__dst[5] + 6) = v45;
    *(void *)((char *)&__dst[6] + 6) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(a1, 0, 2);
    *(void *)((char *)&__dst[7] + 6) = v46;
  }
  LODWORD(__dst[17]) = 1677720;
  LOBYTE(__dst[18]) = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 20);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 672))(*(void *)(a1 + 16))
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 328))(*(void *)(a1 + 16)) & 1) != 0)
  {
    char v47 = 3;
  }
  else
  {
    char v47 = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 21);
  }
  BYTE1(__dst[18]) = v47;
  BYTE2(__dst[18]) = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 22);
  BYTE3(__dst[18]) = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 20);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 672))(*(void *)(a1 + 16))
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 328))(*(void *)(a1 + 16)) & 1) != 0)
  {
    char v48 = 3;
  }
  else
  {
    char v48 = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 21);
  }
  BYTE4(__dst[18]) = v48;
  BYTE5(__dst[18]) = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 22);
  BYTE6(__dst[18]) = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), 0)+ 20);
  unsigned int v49 = v10 & 0xF000FFFE;
  if ((v10 & 0xF000FFFE) == 0x30000010)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 672))(*(void *)(a1 + 16)))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 328))(*(void *)(a1 + 16))) {
        char v53 = 2;
      }
      else {
        char v53 = 80;
      }
    }
    else
    {
      char v53 = 80;
    }
    goto LABEL_72;
  }
  if (v49 != 805306388)
  {
    if (v49 == 805306386)
    {
      int v50 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 1064))(*(void *)(a1 + 16));
      int v51 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 672))(*(void *)(a1 + 16));
      if (v50) {
        char v52 = 32;
      }
      else {
        char v52 = -26;
      }
      if (v51 && (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
        char v52 = 2;
      }
      goto LABEL_65;
    }
    char v53 = 2;
LABEL_72:
    HIBYTE(__dst[18]) = v53;
    goto LABEL_73;
  }
  char v52 = 0;
LABEL_65:
  HIBYTE(__dst[18]) = v52;
  BYTE6(__dst[18]) = 6;
LABEL_73:
  uint64_t v54 = v255;
  LOBYTE(__dst[19]) = *(unsigned char *)((*(uint64_t (**)(void, void))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 0)+ 22);
  LODWORD(__dst[20]) = 1024;
  BYTE4(__dst[20]) = (*(uint64_t (**)(void, void, void))(**(void **)(v54 + 8) + 96))(*(void *)(v54 + 8), 0, 0);
  *(_DWORD *)((char *)&__dst[20] + 6) = 1024;
  BYTE2(__dst[21]) = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v54 + 8) + 96))(*(void *)(v54 + 8), 0, 1);
  BYTE5(__dst[21]) = 4;
  HIWORD(__dst[21]) = 0;
  if (((*(uint64_t (**)(void))(**(void **)(v54 + 16) + 256))(*(void *)(v54 + 16)) & 1) != 0
    || (int v55 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16))) != 0)
  {
    uint64_t v56 = v255;
    uint64_t v57 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v255 + 8) + 96))(*(void *)(v255 + 8), 0, 2);
    LOBYTE(__dst[22]) = v57;
    float v58 = *(float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v56 + 8) + 168))(*(void *)(v56 + 8), v57);
    uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v56 + 8) + 168))(*(void *)(v56 + 8), v57);
    LOBYTE(v55) = 0;
    if (v49 - 805306384 <= 4 && ((1 << (v49 - 16)) & 0x15) != 0) {
      LOBYTE(v55) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(0, *(float *)(v59 + 48), v58);
    }
  }
  else
  {
    LOBYTE(__dst[22]) = -1;
  }
  BYTE4(__dst[21]) = v55;
  *(_DWORD *)((char *)&__dst[22] + 2) = 1024;
  if (((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 256))(*(void *)(v255 + 16)) & 1) != 0
    || (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16)))
  {
    if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 920))(*(void *)(v255 + 16))) {
      LOWORD(__dst[1]) |= 0x800u;
    }
  }
  else
  {
    BYTE6(__dst[22]) = -1;
  }
  float v60 = (float)v5;
  if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16)))
  {
    double v61 = fmod((float)(v60 * 3.598) + 0.5, 4294967300.0);
    if ((float)(v60 * 3.598) + 0.5 <= 4294967300.0) {
      double v62 = (float)(v60 * 3.598) + 0.5;
    }
    else {
      double v62 = v61;
    }
    double v63 = -v62;
    if (v62 >= -4294967300.0)
    {
      unsigned int v65 = -v63;
      unsigned int v66 = v62;
      if (v62 < 0.0) {
        unsigned int v67 = -v63;
      }
      else {
        unsigned int v67 = v62;
      }
    }
    else
    {
      double v64 = fmod(v63, 4294967300.0);
      double v62 = -v64;
      unsigned int v65 = -v64;
      unsigned int v66 = -v64;
      if (v64 > 0.0) {
        unsigned int v67 = -v64;
      }
      else {
        unsigned int v67 = -v64;
      }
    }
    if (v62 >= 0.0) {
      unsigned int v65 = v66;
    }
    HIDWORD(__dst[19]) = v67;
    HIDWORD(__dst[39]) = v65;
    double v68 = fmod((float)(v60 * 3.5809) + 0.5, 4294967300.0);
    if ((float)(v60 * 3.5809) + 0.5 <= 4294967300.0) {
      double v68 = (float)(v60 * 3.5809) + 0.5;
    }
    if (v68 < -4294967300.0) {
      double v68 = -fmod(-v68, 4294967300.0);
    }
    uint64_t v69 = 0;
    if (v68 < 0.0) {
      unsigned int v70 = --v68;
    }
    else {
      unsigned int v70 = v68;
    }
    do
    {
      *(_DWORD *)&v277[v69] = v70;
      v69 += 4;
    }
    while (v69 != 56);
    double v71 = fmod((float)(v60 * 3.8152) + 0.5, 4294967300.0);
    if ((float)(v60 * 3.8152) + 0.5 <= 4294967300.0) {
      double v71 = (float)(v60 * 3.8152) + 0.5;
    }
    if (v71 < -4294967300.0) {
      double v71 = -fmod(-v71, 4294967300.0);
    }
    if (v71 < 0.0) {
      unsigned int v72 = --v71;
    }
    else {
      unsigned int v72 = v71;
    }
    unsigned int v307 = v72;
    double v73 = (float)((float)(*(float *)&BlueFin::GlMeSrdConstants::_4777_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT * v60)
                * 0.25)
        + 0.5;
    double v74 = fmod(v73, 4294967300.0);
    if (v73 <= 4294967300.0) {
      double v74 = v73;
    }
    if (v74 < -4294967300.0) {
      double v74 = -fmod(-v74, 4294967300.0);
    }
    if (v74 < 0.0) {
      unsigned int v75 = --v74;
    }
    else {
      unsigned int v75 = v74;
    }
    unsigned int v342 = v75;
  }
  if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16)))
  {
    __int16 v286 = 0;
    char v287 = 0;
    LOWORD(v76) = WORD2(__dst[0]);
    __int16 SniffDFThreshold = BlueFin::GlMeSrdReceiverParametersProgrammer::GetSniffDFThreshold(v255, 3, (float)v76);
    __int16 v288 = -256;
    char v289 = 0;
    if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 816))(*(void *)(v255 + 16)))
    {
      uint64_t EswTrackDelayType = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 3, 0);
      uint64_t v291 = v77;
      uint64_t v292 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 3, 1);
      uint64_t v293 = v78;
      if (((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 256))(*(void *)(v255 + 16)) & 1) != 0
        || (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16)))
      {
        uint64_t v294 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 3, 3);
        uint64_t v295 = v79;
      }
    }
    else
    {
      uint64_t EswTrackDelayType = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 3, 1);
      uint64_t v291 = v80;
    }
    int v296 = 1677720;
    char v298 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 3)+ 20);
    if (v49 - 805306384 <= 4 && ((1 << (v49 - 16)) & 0x15) != 0) {
      char v81 = 40;
    }
    else {
      char v81 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 3)+ 21);
    }
    char v299 = v81;
    uint64_t v82 = v255;
    char v300 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 3)+ 22);
    char v301 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v82 + 8) + 152))(*(void *)(v82 + 8), 3)+ 20);
    char v303 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v82 + 8) + 152))(*(void *)(v82 + 8), 3)+ 22);
    char v304 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v82 + 8) + 152))(*(void *)(v82 + 8), 3)+ 20);
    if (v49 == 805306384)
    {
      if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16)))
      {
        if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
          char v87 = 2;
        }
        else {
          char v87 = 80;
        }
      }
      else
      {
        char v87 = 80;
      }
      char v305 = v87;
      if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16)))
      {
        if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
          char v86 = 2;
        }
        else {
          char v86 = 80;
        }
      }
      else
      {
        char v86 = 80;
      }
    }
    else
    {
      if (v49 != 805306388 && v49 != 805306386)
      {
        if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16))
          && ((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16)) & 1) != 0)
        {
          char v88 = 2;
        }
        else
        {
          char v88 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 3)+ 21);
        }
        char v305 = v88;
LABEL_150:
        uint64_t v89 = v255;
        char v306 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 3)+ 22);
        __int16 v308 = 44;
        char v309 = 9;
        char v310 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v89 + 8) + 96))(*(void *)(v89 + 8), 3, 0);
        uint64_t v311 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 3, 0);
        uint64_t v312 = v90;
        int v313 = 1024;
        char v314 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v89 + 8) + 96))(*(void *)(v89 + 8), 3, 1);
        if (((*(uint64_t (**)(void))(**(void **)(v89 + 16) + 256))(*(void *)(v89 + 16)) & 1) != 0
          || (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16)))
        {
          if (v49 == 805306388 || v49 == 805306386)
          {
            int v284 = 512;
            char v285 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 96))(*(void *)(v255 + 8), 3, 5);
          }
          int v315 = 256;
          uint64_t v91 = v255;
          uint64_t v92 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 96))(*(void *)(v255 + 8), 3, 3);
          char v316 = v92;
          float v93 = *(float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v91 + 8) + 168))(*(void *)(v91 + 8), v92);
          uint64_t v94 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v91 + 8) + 168))(*(void *)(v91 + 8), v92);
          EswCoherentTableint Index = 0;
          if (v49 - 805306384 <= 4 && ((1 << (v49 - 16)) & 0x15) != 0) {
            EswCoherentTableint Index = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex(0, *(float *)(v94 + 48), v93);
          }
          LOBYTE(v315) = EswCoherentTableIndex;
        }
        goto LABEL_159;
      }
      int v83 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 1064))(*(void *)(v255 + 16));
      int v84 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16));
      if (v83) {
        char v85 = 32;
      }
      else {
        char v85 = -26;
      }
      if (v84 && (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
        char v85 = 2;
      }
      char v305 = v85;
      char v86 = 20;
    }
    char v302 = v86;
    goto LABEL_150;
  }
LABEL_159:
  if (!(*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
    goto LABEL_191;
  }
  uint64_t v96 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 176))(*(void *)(v255 + 8), 4, 1);
  uint64_t v97 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 176))(*(void *)(v255 + 8), 4, 2);
  if (!BlueFin::GlMeTrkCvecTapConfig::operator==(v96 + 148, v97 + 148))
  {
    double v251 = "(m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GALILEO, POSTBIT_MODE).stCvecTapConfig == m_rRxP"
           "arams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GALILEO, POSTFRAME_MODE).stCvecTapConfig)";
    int v252 = 2405;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2405, "ProgramCommonParameters", (char)"(m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GALILEO, POSTBIT_MODE).stCvecTapConfig == m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GALILEO, POSTFRAME_MODE).stCvecTapConfig)");
    goto LABEL_459;
  }
  __int16 v317 = 4;
  char v318 = 0;
  LOWORD(v98) = WORD2(__dst[0]);
  __int16 v332 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetSniffDFThreshold(v255, 4, (float)v98);
  __int16 v319 = -255;
  char v320 = 0;
  int v99 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 816))(*(void *)(v255 + 16));
  uint64_t v100 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 4, 3);
  if (v99)
  {
    uint64_t v323 = v100;
    uint64_t v324 = v101;
    uint64_t v325 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 4, 3);
    uint64_t v326 = v102;
    uint64_t v329 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 4, 3);
    uint64_t v330 = v103;
    uint64_t v327 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 4, 3);
    uint64_t v328 = v104;
  }
  else
  {
    uint64_t v321 = v100;
    uint64_t v322 = v101;
  }
  int v331 = 3355440;
  uint64_t v105 = v255;
  char v333 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 4)+ 20);
  char v334 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v105 + 8) + 152))(*(void *)(v105 + 8), 4)+ 21);
  char v335 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v105 + 8) + 152))(*(void *)(v105 + 8), 4)+ 22);
  char v336 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v105 + 8) + 152))(*(void *)(v105 + 8), 4)+ 20);
  char v338 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v105 + 8) + 152))(*(void *)(v105 + 8), 4)+ 22);
  char v339 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v105 + 8) + 152))(*(void *)(v105 + 8), 4)+ 20);
  if (v49 == 805306384)
  {
    char v337 = 2;
    if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16)))
    {
      if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
        char v109 = 2;
      }
      else {
        char v109 = 80;
      }
    }
    else
    {
      char v109 = 80;
    }
  }
  else
  {
    if (v49 == 805306388 || v49 == 805306386)
    {
      int v106 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 1064))(*(void *)(v255 + 16));
      int v107 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16));
      if (v106) {
        char v108 = 32;
      }
      else {
        char v108 = -26;
      }
      if (v107 && (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16))) {
        char v108 = 2;
      }
      char v340 = v108;
      char v337 = v108;
      goto LABEL_187;
    }
    char v109 = 2;
  }
  char v340 = v109;
LABEL_187:
  uint64_t v110 = v255;
  char v341 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 4)+ 22);
  int v343 = 256;
  char v344 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v110 + 8) + 96))(*(void *)(v110 + 8), 4, 1);
  char v346 = 1;
  __int16 v347 = 0;
  uint64_t v111 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v110 + 8) + 96))(*(void *)(v110 + 8), 4, 2);
  char v348 = v111;
  float v112 = *(float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v110 + 8) + 168))(*(void *)(v110 + 8), v111);
  double v113 = (float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v110 + 8) + 168))(*(void *)(v110 + 8), v111);
  char v114 = 0;
  if (v49 - 805306384 <= 4 && ((1 << (v49 - 16)) & 0x15) != 0) {
    char v114 = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswCoherentTableIndex((BlueFin::GlMeSrdReceiverParametersProgrammer *)v113, v113[12], v112);
  }
  char v345 = v114;
  char v349 = v114;
  char v350 = 1;
  __int16 v351 = 0;
  char v352 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 96))(*(void *)(v255 + 8), 4, 3);
  char v353 = v114;
  char v354 = 1;
  __int16 v355 = 0;
  char v356 = -1;
LABEL_191:
  WORD2(__dst[38]) = 0;
  LODWORD(__dst[23]) = 0;
  WORD2(__dst[23]) = 255;
  uint64_t v115 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v255 + 8) + 176))(*(void *)(v255 + 8), 2, 0);
  uint64_t v116 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 176))(*(void *)(v255 + 8), 2, 1);
  if (!BlueFin::GlMeTrkCvecTapConfig::operator==(v115 + 148, v116 + 148))
  {
    double v251 = "m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_SBAS, PREBIT_MODE).stCvecTapConfig == m_rRxParams"
           ".GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_SBAS, POSTBIT_MODE).stCvecTapConfig";
    int v252 = 2523;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2523, "ProgramCommonParameters", (char)"m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_SBAS, PREBIT_MODE).stCvecTapConfig == m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_SBAS, POSTBIT_MODE).stCvecTapConfig");
    goto LABEL_459;
  }
  int v117 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 816))(*(void *)(v255 + 16));
  *(void *)((char *)&__dst[23] + 6) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 2, 0);
  *(void *)((char *)&__dst[24] + 6) = v118;
  if (v117)
  {
    *(void *)((char *)&__dst[25] + 6) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 2, 1);
    *(void *)((char *)&__dst[26] + 6) = v119;
  }
  LODWORD(__dst[38]) = 3355440;
  LOBYTE(__dst[39]) = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 2)+ 20);
  if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16))
    && ((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16)) & 1) != 0)
  {
    char v120 = 3;
    uint64_t v121 = v255;
  }
  else
  {
    char v120 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 2)+ 21);
    uint64_t v121 = v255;
  }
  BYTE1(__dst[39]) = v120;
  BYTE2(__dst[39]) = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v121 + 8) + 152))(*(void *)(v121 + 8), 2)+ 22);
  LODWORD(__dst[40]) = 512;
  BYTE4(__dst[40]) = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v121 + 8) + 96))(*(void *)(v121 + 8), 2, 0);
  *(_DWORD *)((char *)&__dst[40] + 6) = 512;
  BYTE2(__dst[41]) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v121 + 8) + 96))(*(void *)(v121 + 8), 2, 1);
  __int16 v273 = 0;
  HIDWORD(__dst[41]) = 0;
  LOWORD(__dst[42]) = 255;
  uint64_t v122 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v121 + 8) + 176))(*(void *)(v121 + 8), 1, 0);
  uint64_t v123 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v121 + 8) + 176))(*(void *)(v121 + 8), 1, 1);
  if (!BlueFin::GlMeTrkCvecTapConfig::operator==(v122 + 148, v123 + 148)
    || (uint64_t v124 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 176))(*(void *)(v255 + 8), 1, 1), v125 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v255 + 8) + 176))(*(void *)(v255 + 8), 1, 2), !BlueFin::GlMeTrkCvecTapConfig::operator==(v124 + 148, v125 + 148)))
  {
    double v251 = "(m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, PREBIT_MODE).stCvecTapConfig == m_rRxParams"
           ".GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, POSTBIT_MODE).stCvecTapConfig) && (m_rRxParams.GetAllGe"
           "arsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, POSTBIT_MODE).stCvecTapConfig == m_rRxParams.GetAllGearsTrkParam"
           "sFromCnstlAndMode(CNSTL_TYPE_GLN, POSTFRAME_MODE).stCvecTapConfig)";
    int v252 = 2576;
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2576, "ProgramCommonParameters", (char)"(m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, PREBIT_MODE).stCvecTapConfig == m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, POSTBIT_MODE).stCvecTapConfig) && (m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, POSTBIT_MODE).stCvecTapConfig == m_rRxParams.GetAllGearsTrkParamsFromCnstlAndMode(CNSTL_TYPE_GLN, POSTFRAME_MODE).stCvecTapConfig)");
    goto LABEL_459;
  }
  int v126 = (*(uint64_t (**)(void))(**(void **)(v255 + 16) + 816))(*(void *)(v255 + 16));
  *(void *)((char *)&__dst[42] + 2) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 1, 0);
  *(void *)((char *)&__dst[43] + 2) = v127;
  if (v126)
  {
    *(void *)((char *)&__dst[44] + 2) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 1, 1);
    *(void *)((char *)&__dst[45] + 2) = v128;
    *(void *)((char *)&__dst[46] + 2) = BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(v255, 1, 2);
    *(void *)((char *)&__dst[47] + 2) = v129;
  }
  int v272 = 1677720;
  char v274 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 1)+ 20);
  if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 672))(*(void *)(v255 + 16))
    && ((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 328))(*(void *)(v255 + 16)) & 1) != 0)
  {
    char v130 = 10;
    uint64_t v131 = v255;
  }
  else
  {
    char v130 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v255 + 8) + 152))(*(void *)(v255 + 8), 1)+ 21);
    uint64_t v131 = v255;
  }
  char v275 = v130;
  char v276 = *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v131 + 8) + 152))(*(void *)(v131 + 8), 1)+ 22);
  int v278 = 512;
  char v279 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v131 + 8) + 96))(*(void *)(v131 + 8), 1, 0);
  int v280 = 512;
  char v281 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v131 + 8) + 96))(*(void *)(v131 + 8), 1, 1);
  int v282 = 1024;
  char v283 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v131 + 8) + 96))(*(void *)(v131 + 8), 1, 2);
  if (v49 != 805306386 && v49 != 805306388)
  {
    int v284 = 512;
    char v285 = -1;
  }
  char v357 = 8;
  if (((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 256))(*(void *)(v255 + 16)) & 1) != 0
    || (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16)))
  {
    uint64_t v132 = v255;
    double v133 = (*(double (**)(void))(**(void **)(v255 + 16) + 856))(*(void *)(v255 + 16));
    double v134 = v133
         / 29.3052256
         * (double)(*(unsigned int (**)(void))(**(void **)(v132 + 16) + 320))(*(void *)(v132 + 16))
         + 0.5;
    __int16 v359 = -(__int16)(int)v134 - (((((__int16)-(int)v134 >> 27) & 0xF) - (int)v134) & 0xFFF0);
    LOBYTE(v262) = 1;
    HIDWORD(v262) = 2;
    LOWORD(v263) = 64;
    __int16 v360 = ((__int16)((((__int16)-(int)v134 >> 27) & 0xF) - (int)v134) >> 4)
         - (int)(BlueFin::GlSignalId::GetInterSignalBiasInMs((unsigned __int8 *)&v262, *(void *)(v255 + 16)) * 10230.0);
    double InterSignalBiasInMs = BlueFin::GlSignalId::GetInterSignalBiasInMs((unsigned __int8 *)&v262, *(void *)(v255 + 16));
    unsigned int v136 = (*(uint64_t (**)(void))(**(void **)(v132 + 16) + 320))(*(void *)(v132 + 16));
    char v358 = -(int)(fmod(InterSignalBiasInMs * 10230.0, 1.0) * (double)v136 + 0.5);
  }
  uint64_t v137 = (*(uint64_t (**)(uint64_t))(*(void *)v259 + 48))(v259);
  uint64_t v138 = (*(uint64_t (**)(uint64_t))(*(void *)v137 + 48))(v137);
  (*(void (**)(uint64_t, void *, void *))(*(void *)v138 + 96))(v138, v256, __dst);
  if (((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 256))(*(void *)(v255 + 16)) & 1) != 0
    || (*(unsigned int (**)(void))(**(void **)(v255 + 16) + 264))(*(void *)(v255 + 16)))
  {
    uint64_t v264 = 0;
    uint64_t v265 = 0;
    int v267 = 0;
    uint64_t v266 = 0;
    double v139 = (float)(*(float *)&BlueFin::GlMeSrdConstants::_4755_GPS_L1_COH_NOI_PWR_AT_CA_EPOCH_INT * v60) + 0.5;
    double v140 = fmod(v139, 4294967300.0);
    if (v139 <= 4294967300.0) {
      double v140 = v139;
    }
    if (v140 < -4294967300.0) {
      double v140 = -fmod(-v140, 4294967300.0);
    }
    if (v140 < 0.0) {
      unsigned int v141 = --v140;
    }
    else {
      unsigned int v141 = v140;
    }
    LODWORD(v262) = v141;
    double v142 = fmod((float)(v60 * 1.915) + 0.5, 4294967300.0);
    if ((float)(v60 * 1.915) + 0.5 <= 4294967300.0) {
      double v142 = (float)(v60 * 1.915) + 0.5;
    }
    if (v142 < -4294967300.0) {
      double v142 = -fmod(-v142, 4294967300.0);
    }
    if (v142 < 0.0) {
      unsigned int v143 = --v142;
    }
    else {
      unsigned int v143 = v142;
    }
    HIDWORD(v262) = v143;
    unsigned int v144 = v10 & 0xF000FFFF;
    if (v144 != 805306383)
    {
      switch(v144)
      {
        case 0x3000000Eu:
          float v145 = 4.005;
          goto LABEL_236;
        case 0x30000010u:
          float v145 = 1.035;
          goto LABEL_236;
        case 0x30000011u:
          float v145 = 1.05;
          goto LABEL_236;
        case 0x30000012u:
        case 0x30000014u:
          float v145 = 2.86;
          goto LABEL_236;
        case 0x30000013u:
        case 0x30000015u:
          float v145 = 2.893;
          goto LABEL_236;
        default:
          double v251 = "0";
          int v252 = 2690;
          DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2690, "ProgramCommonParameters", (char)"0");
          goto LABEL_459;
      }
    }
    float v145 = 3.694;
LABEL_236:
    double v146 = (float)(v60 * v145) + 0.5;
    double v147 = fmod(v146, 4294967300.0);
    if (v146 <= 4294967300.0) {
      double v147 = v146;
    }
    if (v147 < -4294967300.0) {
      double v147 = -fmod(-v147, 4294967300.0);
    }
    if (v147 < 0.0) {
      unsigned int v148 = --v147;
    }
    else {
      unsigned int v148 = v147;
    }
    LODWORD(v263) = v148;
    double v149 = fmod((float)(v60 * 3.5809) + 0.5, 4294967300.0);
    if ((float)(v60 * 3.5809) + 0.5 <= 4294967300.0) {
      double v149 = (float)(v60 * 3.5809) + 0.5;
    }
    if (v149 < -4294967300.0) {
      double v149 = -fmod(-v149, 4294967300.0);
    }
    if (v149 < 0.0) {
      unsigned int v150 = --v149;
    }
    else {
      unsigned int v150 = v149;
    }
    HIDWORD(v263) = v150;
    double v151 = fmod((float)(v60 * 3.8152) + 0.5, 4294967300.0);
    if ((float)(v60 * 3.8152) + 0.5 <= 4294967300.0) {
      double v151 = (float)(v60 * 3.8152) + 0.5;
    }
    if (v151 < -4294967300.0) {
      double v151 = -fmod(-v151, 4294967300.0);
    }
    if (v151 < 0.0) {
      unsigned int v152 = --v151;
    }
    else {
      unsigned int v152 = v151;
    }
    LODWORD(v265) = v152;
    double v153 = fmod((float)(v60 * 4.244) + 0.5, 4294967300.0);
    if ((float)(v60 * 4.244) + 0.5 <= 4294967300.0) {
      double v154 = (float)(v60 * 4.244) + 0.5;
    }
    else {
      double v154 = v153;
    }
    double v155 = v154;
    if (v154 < -4294967300.0) {
      double v155 = -fmod(-v154, 4294967300.0);
    }
    if (v155 < 0.0) {
      unsigned int v156 = --v155;
    }
    else {
      unsigned int v156 = v155;
    }
    HIDWORD(v265) = v156;
    switch(v144)
    {
      case 0x30000011u:
        goto LABEL_266;
      case 0x30000010u:
        float v157 = 1.035;
        break;
      case 0x30000015u:
      case 0x30000013u:
        float v157 = 2.893;
        break;
      default:
LABEL_266:
        float v157 = 3.816;
        break;
    }
    double v158 = (float)(v60 * v157) + 0.5;
    double v159 = fmod(v158, 4294967300.0);
    if (v158 <= 4294967300.0) {
      double v159 = v158;
    }
    if (v159 < -4294967300.0) {
      double v159 = -fmod(-v159, 4294967300.0);
    }
    if (v159 < 0.0) {
      unsigned int v160 = --v159;
    }
    else {
      unsigned int v160 = v159;
    }
    LODWORD(v266) = v160;
    double v161 = (float)((float)(*(float *)&BlueFin::GlMeSrdConstants::_4755_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT * v60)
                 * 0.25)
         + 0.5;
    double v162 = fmod(v161, 4294967300.0);
    if (v161 <= 4294967300.0) {
      double v162 = v161;
    }
    if (v162 < -4294967300.0) {
      double v162 = -fmod(-v162, 4294967300.0);
    }
    if (v162 < 0.0) {
      unsigned int v163 = --v162;
    }
    else {
      unsigned int v163 = v162;
    }
    unsigned int v268 = v163;
    switch(v144)
    {
      case 0x3000000Eu:
      case 0x30000010u:
        goto LABEL_290;
      case 0x3000000Fu:
      case 0x30000011u:
        double v164 = fmod((float)(v60 * 3.59) + 0.5, 4294967300.0);
        if ((float)(v60 * 3.59) + 0.5 <= 4294967300.0) {
          double v154 = (float)(v60 * 3.59) + 0.5;
        }
        else {
          double v154 = v164;
        }
LABEL_290:
        if (v154 < -4294967300.0) {
          double v154 = -fmod(-v154, 4294967300.0);
        }
        if (v154 < 0.0) {
          unsigned int v165 = --v154;
        }
        else {
          unsigned int v165 = v154;
        }
        LODWORD(v264) = v165;
        if (v144 == 805306383)
        {
          float v166 = 3.678;
LABEL_316:
          double v172 = (float)(v60 * v166) + 0.5;
          double v173 = fmod(v172, 4294967300.0);
          if (v172 <= 4294967300.0) {
            double v173 = v172;
          }
          if (v173 < -4294967300.0) {
            double v173 = -fmod(-v173, 4294967300.0);
          }
          if (v173 < 0.0) {
            unsigned int v174 = --v173;
          }
          else {
            unsigned int v174 = v173;
          }
          HIDWORD(v264) = v174;
          double v175 = fmod((float)(v60 * 3.062) + 0.5, 4294967300.0);
          if ((float)(v60 * 3.062) + 0.5 <= 4294967300.0) {
            double v175 = (float)(v60 * 3.062) + 0.5;
          }
          if (v175 < -4294967300.0) {
            double v175 = -fmod(-v175, 4294967300.0);
          }
          if (v175 < 0.0) {
            unsigned int v176 = --v175;
          }
          else {
            unsigned int v176 = v175;
          }
          unsigned int v269 = v176;
          double v177 = (float)((float)(*(float *)&BlueFin::GlMeSrdConstants::_4755_BEIDOU_B1C_COH_NOI_PWR_AT_CA_EPOCH_INT * v60)
                       / 10.0)
               + 0.5;
          double v178 = fmod(v177, 4294967300.0);
          if (v177 <= 4294967300.0) {
            double v178 = v177;
          }
          if (v178 < -4294967300.0) {
            double v178 = -fmod(-v178, 4294967300.0);
          }
          if (v178 < 0.0) {
            unsigned int v179 = --v178;
          }
          else {
            unsigned int v179 = v178;
          }
          unsigned int v270 = v179;
          uint64_t v180 = (*(uint64_t (**)(uint64_t))(*(void *)v259 + 48))(v259);
          uint64_t v181 = (*(uint64_t (**)(uint64_t))(*(void *)v180 + 48))(v180);
          (*(void (**)(uint64_t, void *, void (**)(BlueFin::GlMeSrdReceiverParametersProgrammer *, void *)))(*(void *)v181 + 104))(v181, v256, &v262);
          goto LABEL_338;
        }
        if (v144 == 805306385)
        {
          float v166 = 1.067;
          goto LABEL_316;
        }
LABEL_307:
        char v171 = v144 - 14;
        if (v144 - 805306382 <= 7)
        {
          if (((1 << v171) & 5) != 0)
          {
            float v166 = 3.816;
            goto LABEL_316;
          }
          if (((1 << v171) & 0x50) != 0)
          {
            float v166 = 2.86;
            goto LABEL_316;
          }
          if (((1 << v171) & 0xA0) != 0)
          {
            float v166 = 2.893;
            goto LABEL_316;
          }
        }
        double v251 = "0";
        int v252 = 2788;
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2788, "ProgramCommonParameters", (char)"0");
        break;
      case 0x30000012u:
      case 0x30000014u:
        float v167 = 0.92448;
        goto LABEL_299;
      case 0x30000013u:
      case 0x30000015u:
        float v167 = 2.893;
LABEL_299:
        double v168 = (float)(v60 * v167) + 0.5;
        double v169 = fmod(v168, 4294967300.0);
        if (v168 <= 4294967300.0) {
          double v169 = v168;
        }
        if (v169 < -4294967300.0) {
          double v169 = -fmod(-v169, 4294967300.0);
        }
        if (v169 < 0.0) {
          unsigned int v170 = --v169;
        }
        else {
          unsigned int v170 = v169;
        }
        LODWORD(v264) = v170;
        goto LABEL_307;
      default:
        double v251 = "0";
        int v252 = 2753;
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 2753, "ProgramCommonParameters", (char)"0");
        break;
    }
LABEL_459:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v252, v251);
  }
LABEL_338:
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v256);
  uint64_t v182 = v255;
  if ((((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 184))(*(void *)(v255 + 16)) & 0xF000FFFE) == 0x30000012
     || ((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 184))(*(void *)(v255 + 16)) & 0xF000FFFE) == 0x30000014)
    && ((*(uint64_t (**)(void))(**(void **)(v255 + 16) + 48))(*(void *)(v255 + 16)) & 1) == 0)
  {
    uint64_t v183 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
    char v184 = *(unsigned char *)(v255 + 102);
    *(unsigned char *)(v255 + 102) = v184 + 1;
    uint64_t v262 = BlueFin::GlMeSrdReceiverParametersProgrammer::OnReliableAck;
    uint64_t v263 = v255;
    LOBYTE(v264) = v184;
    *(_WORD *)((char *)&v264 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    uint64_t v265 = v183;
    LODWORD(v266) = 0;
    WORD2(v266) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v183 + 16))(v183, 1);
    uint64_t v185 = (*(uint64_t (**)(void))(**(void **)(v255 + 8) + 136))(*(void *)(v255 + 8));
    memcpy(__dst, *(const void **)(v185 + 64), 0x18CuLL);
    uint64_t v186 = (*(uint64_t (**)(uint64_t))(*(void *)v265 + 48))(v265);
    uint64_t v187 = (*(uint64_t (**)(uint64_t))(*(void *)v186 + 48))(v186);
    (*(void (**)(uint64_t, void (**)(BlueFin::GlMeSrdReceiverParametersProgrammer *, void *), void *))(*(void *)v187 + 152))(v187, &v262, __dst);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v262);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v262);
  }
  char v188 = (*(uint64_t (**)(void))(**(void **)(v255 + 8) + 200))(*(void *)(v255 + 8));
  unsigned __int8 v253 = v188 - 1;
  if (v188 != 1)
  {
    unsigned __int8 v189 = 0;
    while (1)
    {
      unsigned __int8 v190 = v253 - v189 >= 28 ? 28 : v253 - v189;
      uint64_t v191 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
      char v192 = *(unsigned char *)(v182 + 102);
      *(unsigned char *)(v182 + 102) = v192 + 1;
      __dst[0] = BlueFin::GlMeSrdReceiverParametersProgrammer::OnReliableAck;
      __dst[1] = v182;
      LOBYTE(__dst[2]) = v192;
      *(_WORD *)((char *)&__dst[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
      __dst[3] = v191;
      LODWORD(__dst[4]) = 0;
      WORD2(__dst[4]) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v191 + 16))(v191, 1);
      unsigned __int8 v193 = v189 + v190;
      if (((v189 + (unsigned __int16)v190) & 0x100) == 0) {
        break;
      }
LABEL_428:
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)__dst);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)__dst);
      unsigned __int8 v189 = v193;
      if (v253 <= v193) {
        goto LABEL_429;
      }
    }
    while (1)
    {
      unint64_t v194 = (float *)(*(uint64_t (**)(void, void))(**(void **)(v182 + 8) + 240))(*(void *)(v182 + 8), v189);
      char v195 = v194;
      int v196 = *((unsigned __int16 *)v194 + 5);
      if (v196 == 4092 || v196 == 2046 || v196 == 10230) {
        int v196 = 1023;
      }
      if (v196 == 310) {
        int v199 = 31;
      }
      else {
        int v199 = v196;
      }
      if (v196 == 372) {
        unsigned int v200 = 93;
      }
      else {
        unsigned int v200 = v199;
      }
      unsigned int v201 = (((unsigned __int16)(v200 - ((2115 * v200) >> 16)) >> 1) + ((2115 * v200) >> 16)) >> 4;
      BOOL v202 = v200 == 16 || v200 == 32;
      unsigned int v203 = v200 >> 3;
      if (v202) {
        char v204 = v203;
      }
      else {
        char v204 = v201;
      }
      LOWORD(v262) = *(unsigned __int8 *)v194;
      if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 1184))(*(void *)(v255 + 16)) == *(unsigned __int8 *)v194) {
        BYTE1(v262) |= 7u;
      }
      int v205 = *((unsigned __int16 *)v195 + 12);
      if ((v205 & 0x100) != 0)
      {
        BYTE1(v262) |= 4u;
        if ((v205 & 2) == 0)
        {
LABEL_372:
          if ((v205 & 0x80) == 0) {
            goto LABEL_373;
          }
          goto LABEL_416;
        }
      }
      else if ((v205 & 2) == 0)
      {
        goto LABEL_372;
      }
      BYTE1(v262) |= 1u;
      if ((v205 & 0x80) == 0)
      {
LABEL_373:
        if ((v205 & 0x400) == 0) {
          goto LABEL_375;
        }
LABEL_374:
        BYTE1(v262) |= 8u;
        goto LABEL_375;
      }
LABEL_416:
      BYTE1(v262) |= 2u;
      if ((v205 & 0x400) != 0) {
        goto LABEL_374;
      }
LABEL_375:
      unsigned int v206 = *((unsigned __int16 *)v195 + 4);
      if (v206 >= 0x1000)
      {
        long long v249 = "rSpParam.usNumNonCohSum <= 4095";
        int v250 = 244;
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 244, "ProgramSearchParameters", (char)"rSpParam.usNumNonCohSum <= 4095");
        goto LABEL_450;
      }
      double v207 = (float)(v195[1] * 1000.0) + 0.5;
      double v208 = fmod(v207, 4294967300.0);
      if (v207 <= 4294967300.0) {
        double v208 = v207;
      }
      if (v208 < -4294967300.0) {
        double v208 = -fmod(-v208, 4294967300.0);
      }
      uint64_t v209 = 0;
      unsigned int v210 = v208;
      if (v208 < 0.0) {
        unsigned int v210 = --v208;
      }
      BYTE2(v262) = BYTE2(v262) & 0xE0 | v210 & 0x1F;
      int v211 = *((unsigned __int8 *)v195 + 28);
      while (byte_263BAFEF0[v209] != v211)
      {
        if (++v209 == 6)
        {
          long long v249 = "0";
          int v250 = 335;
          DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 335, "GetEswFocalPhaseStepIndex", (char)"0");
          goto LABEL_450;
        }
      }
      BYTE2(v262) = v210 & 0x1F | (32 * v209);
      WORD2(v262) = v206;
      BYTE6(v262) = *((unsigned char *)v195 + 12);
      double v212 = v195[4] + 0.5;
      double v213 = fmod(v212, 4294967300.0);
      if (v212 <= 4294967300.0) {
        double v213 = v212;
      }
      if (v213 < -4294967300.0) {
        double v213 = -fmod(-v213, 4294967300.0);
      }
      if (v213 < 0.0) {
        unsigned int v214 = --v213;
      }
      else {
        LOWORD(v214) = v213;
      }
      LOWORD(v263) = v214;
      if (v204 == 33) {
        char v215 = 0;
      }
      else {
        char v215 = v204 & 0xF;
      }
      char v216 = (8 * v205) & 0x20;
      if (v211) {
        char v216 = 64;
      }
      BYTE2(v263) = v215 | ((v211 == 0) << 7) | v216 | (16 * (*((_WORD *)v195 + 13) == 4));
      float v217 = v195[5] * 256.0;
      float v218 = fmodf(v217, 4295000000.0);
      if (v217 <= 4295000000.0) {
        float v218 = v217;
      }
      if (v218 < -4295000000.0) {
        float v218 = -fmodf(-v218, 4295000000.0);
      }
      if (v218 < 0.0) {
        unsigned int v219 = -(float)-v218;
      }
      else {
        unsigned int v219 = v218;
      }
      WORD2(v263) = v219;
      unsigned int v220 = (v219 & 0xFFFFFFF8) + 8;
      int v221 = (v205 << 31 >> 31) & v220;
      if ((v205 & 8) != 0) {
        LOWORD(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      }
      HIWORD(v263) = v221 & 0xFFFE | v205 & 1;
      if ((v205 & 0x40) != 0)
      {
        WORD2(v263) = -1;
        HIWORD(v263) = v220 | 1;
      }
      LOBYTE(v264) = *((unsigned char *)v195 + 13);
      BYTE1(v264) = BYTE1(v264) & 0xF0 | (_BYTE)v195[9] & 0xF;
      if ((*(unsigned int (**)(void))(**(void **)(v255 + 16) + 520))(*(void *)(v255 + 16)))
      {
        double v222 = v195[8] * 256.0;
        double v223 = 0.5;
        uint64_t v224 = v255;
        if (v222 <= 0.0 && (double v223 = -0.5, v222 >= 0.0))
        {
          int v225 = 0;
        }
        else
        {
          int v225 = (int)(v222 + v223);
          if (v225 < 0)
          {
            long long v249 = "slXcorrRatio >= 0";
            int v250 = 277;
            DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 277, "ProgramSearchParameters", (char)"slXcorrRatio >= 0");
            goto LABEL_450;
          }
        }
        __int16 v227 = *((_WORD *)v195 + 12);
        if ((v227 & 0x200) != 0)
        {
          __int16 v226 = WORD1(v264) | 0x3FF;
        }
        else
        {
          if (v225 >= 1023) {
            LOWORD(v225) = 1023;
          }
          __int16 v226 = WORD1(v264) & 0xFC00 | v225;
        }
      }
      else
      {
        __int16 v226 = WORD1(v264) | 0x3FF;
        __int16 v227 = *((_WORD *)v195 + 12);
        uint64_t v224 = v255;
      }
      WORD1(v264) = (v227 << 6) & 0xC00 | v226 & 0xF3FF;
      if ((v264 & 0xF00) != 0)
      {
        long long v249 = "otSpParam.xcorr_check_threshold == 0";
        int v250 = 309;
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 309, "ProgramSearchParameters", (char)"otSpParam.xcorr_check_threshold == 0");
        goto LABEL_450;
      }
      unsigned int v228 = v262;
      if (v228 >= (*(unsigned int (**)(void))(**(void **)(v224 + 16) + 432))(*(void *)(v224 + 16)))
      {
        long long v249 = "otSpParam.sp_id < m_rAsicConfigIfc.GetMaxSearchParamIndex()";
        int v250 = 311;
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 311, "ProgramSearchParameters", (char)"otSpParam.sp_id < m_rAsicConfigIfc.GetMaxSearchParamIndex()");
LABEL_450:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v250, v249);
      }
      uint64_t v229 = (*(uint64_t (**)(void))(*(void *)__dst[3] + 48))(__dst[3]);
      uint64_t v230 = (*(uint64_t (**)(uint64_t))(*(void *)v229 + 48))(v229);
      (*(void (**)(uint64_t, void *, void (**)(BlueFin::GlMeSrdReceiverParametersProgrammer *, void *)))(*(void *)v230 + 16))(v230, __dst, &v262);
      ++v189;
      uint64_t v182 = v255;
      if (v189 > v193) {
        goto LABEL_428;
      }
    }
  }
LABEL_429:
  char v231 = (*(uint64_t (**)(void))(**(void **)(v182 + 8) + 208))(*(void *)(v182 + 8));
  unsigned __int8 v232 = v231 - 1;
  if (v231 != 1)
  {
    unsigned __int8 v233 = 0;
    do
    {
      if (v232 - v233 >= 100) {
        char v234 = 100;
      }
      else {
        char v234 = v232 - v233;
      }
      uint64_t v235 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 80))(a2);
      char v236 = *(unsigned char *)(v182 + 102);
      *(unsigned char *)(v182 + 102) = v236 + 1;
      __dst[0] = BlueFin::GlMeSrdReceiverParametersProgrammer::OnReliableAck;
      __dst[1] = v182;
      LOBYTE(__dst[2]) = v236;
      *(_WORD *)((char *)&__dst[2] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
      __dst[3] = v235;
      LODWORD(__dst[4]) = 0;
      WORD2(__dst[4]) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v235 + 16))(v235, 1);
      unsigned int v237 = v233;
      v233 += v234;
      if (v237 <= (v237 + v234))
      {
        while (1)
        {
          uint64_t v238 = (*(uint64_t (**)(void, void))(**(void **)(v182 + 8) + 256))(*(void *)(v182 + 8), v237);
          LOWORD(v262) = *(_WORD *)v238;
          unsigned int v239 = v262;
          v240.i32[0] = *(_DWORD *)(v238 + 2);
          int16x8_t v241 = (int16x8_t)vmovl_u8(v240);
          *(int16x4_t *)v241.i8 = vuzp1_s16(*(int16x4_t *)v241.i8, (int16x4_t)vext_s8(*(int8x8_t *)v241.i8, *(int8x8_t *)v241.i8, 6uLL));
          *(_DWORD *)((char *)&v262 + 2) = vmovn_s16(v241).u32[0];
          if (v239 >= (*(unsigned int (**)(void))(**(void **)(v182 + 16) + 440))(*(void *)(v182 + 16)))
          {
            long long v247 = "otBsParam.bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()";
            int v248 = 1179;
            DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1179, "ProgramBinningSteps", (char)"otBsParam.bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()");
            goto LABEL_449;
          }
          unsigned int v242 = BYTE1(v262);
          if (v242 >= (*(unsigned int (**)(void))(**(void **)(v182 + 16) + 432))(*(void *)(v182 + 16)))
          {
            long long v247 = "otBsParam.sp_id < m_rAsicConfigIfc.GetMaxSearchParamIndex()";
            int v248 = 1180;
            DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1180, "ProgramBinningSteps", (char)"otBsParam.sp_id < m_rAsicConfigIfc.GetMaxSearchParamIndex()");
            goto LABEL_449;
          }
          unsigned int v243 = BYTE3(v262);
          if (v243 >= (*(unsigned int (**)(void))(**(void **)(v182 + 16) + 440))(*(void *)(v182 + 16))) {
            break;
          }
          unsigned int v244 = BYTE4(v262);
          if (v244 >= (*(unsigned int (**)(void))(**(void **)(v182 + 16) + 440))(*(void *)(v182 + 16)))
          {
            long long v247 = "otBsParam.fail_bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()";
            int v248 = 1182;
            DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1182, "ProgramBinningSteps", (char)"otBsParam.fail_bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()");
LABEL_449:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v248, v247);
          }
          uint64_t v245 = (*(uint64_t (**)(void))(*(void *)__dst[3] + 48))(__dst[3]);
          uint64_t v246 = (*(uint64_t (**)(uint64_t))(*(void *)v245 + 48))(v245);
          (*(void (**)(uint64_t, void *, void (**)(BlueFin::GlMeSrdReceiverParametersProgrammer *, void *)))(*(void *)v246 + 24))(v246, __dst, &v262);
          if (v233 + 1 == ++v237) {
            goto LABEL_440;
          }
        }
        long long v247 = "otBsParam.det_bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()";
        int v248 = 1181;
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 1181, "ProgramBinningSteps", (char)"otBsParam.det_bs_id < m_rAsicConfigIfc.GetMaxBinningStepIndex()");
        goto LABEL_449;
      }
LABEL_440:
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)__dst);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)__dst);
    }
    while (v232 > v233);
  }
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v256);
}

void sub_263945534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdTransactionBuilder::GetEswRpcEncIf(BlueFin::GlMeSrdTransactionBuilder *this)
{
  return *((void *)this + 2);
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswJdRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 72;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetEswSrchParamFromSpid(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 240);

  return v1();
}

uint64_t BlueFin::GlMeSrdAsicConfig::EnableSearchXcorrTest(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1483);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetSPForERAMDump(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 550);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswTrackDelayType(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = *(int *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8)) + 148);
  if (v6 >= 9 || ((0x1EFu >> v6) & 1) == 0)
  {
    uint64_t v16 = "0";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 3104, "GetEswTrackDelayType", (char)"0");
    int v17 = 3104;
    goto LABEL_39;
  }
  uint64_t v7 = qword_263BB0050[v6];
  uint64_t v8 = byte_263BB0098[v6];
  uint64_t v9 = byte_263BB00A1[v6];
  uint64_t v10 = word_263BB00AA[v6];
  uint64_t v11 = word_263BB00BC[v6];
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 16) + 328))(*(void *)(a1 + 16)))
  {
    uint64_t v16 = "0";
    DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 3195, "GetEswTrackDelayType", (char)"0");
    int v17 = 3195;
LABEL_39:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v17, v16);
  }
  switch(a2)
  {
    case 0:
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000012)
      {
        if (a3 == 2) {
          goto LABEL_27;
        }
      }
      else
      {
        int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16));
        if (a3 == 2 && (v12 & 0xF000FFFE) == 0x30000014) {
          goto LABEL_27;
        }
      }
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) != 0x30000012
        && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) != 0x30000014
        && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) != 0x3000000E)
      {
LABEL_35:
        (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16));
      }
LABEL_27:
      if ((~v11 & 0xF0) != 0) {
        unsigned int v13 = ((v10 >> 2) & 3) + 1;
      }
      else {
        unsigned int v13 = 0;
      }
      if ((~v11 & 0xF) != 0) {
        int v14 = (v10 & 3) + 1;
      }
      else {
        int v14 = 0;
      }
      if (((v10 >> 4) & 3) + v13 + v14 + v9 != v8)
      {
        uint64_t v16 = "num_taps == (otTrackTap.delay_number+1)";
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 3203, "GetEswTrackDelayType", (char)"num_taps == (otTrackTap.delay_number+1)");
        int v17 = 3203;
        goto LABEL_39;
      }
      return v7 | (v8 << 48) | (v9 << 40) | (v10 << 16) | v11;
    case 1:
      (*(void (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16));
      goto LABEL_27;
    case 2:
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000012
        || ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000014
        || ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x3000000E)
      {
        goto LABEL_27;
      }
      goto LABEL_35;
    case 3:
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000012
        || ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x30000014
        || ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) == 0x3000000E)
      {
        goto LABEL_27;
      }
      goto LABEL_35;
    case 4:
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) != 0x30000012
        && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) != 0x30000014
        && ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16)) & 0xF000FFFE) != 0x3000000E)
      {
        goto LABEL_35;
      }
      goto LABEL_27;
    default:
      uint64_t v16 = "0";
      DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 3189, "GetEswTrackDelayType", (char)"0");
      int v17 = 3189;
      goto LABEL_39;
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetHighPwrCwTestEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 554);
}

BOOL BlueFin::GlMeTrkCvecTapConfig::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 4);
  BOOL v3 = *(_DWORD *)a1 == *(_DWORD *)a2 && v2 == *(unsigned __int8 *)(a2 + 4);
  BOOL v4 = v3
    && *(unsigned __int8 *)(a1 + 5) == *(unsigned __int8 *)(a2 + 5)
    && *(unsigned __int8 *)(a1 + 6) == *(unsigned __int8 *)(a2 + 6)
    && *(unsigned __int8 *)(a1 + 7) == *(unsigned __int8 *)(a2 + 7)
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
    && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10);
  if (*(unsigned char *)(a1 + 4))
  {
    unsigned int v5 = (unsigned __int8 *)(a2 + 11);
    uint64_t v6 = (unsigned __int8 *)(a1 + 11);
    do
    {
      int v8 = *v6++;
      int v7 = v8;
      int v9 = *v5++;
      BOOL v4 = (v7 == v9) & v4;
      --v2;
    }
    while (v2);
  }
  return v4;
}

uint64_t BlueFin::GlMeSrdAsicConfig::ConfigureCvecPerTrkMode(BlueFin::GlMeSrdAsicConfig *this)
{
  BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1);
  if ((*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 264))(this)) {
    return 1;
  }
  BOOL v3 = *(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 256);

  return v3(this);
}

double BlueFin::GlMeSrdAsicConfig::GetStrongThreshInDbHz(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((double *)this + 264);
}

double BlueFin::GlMeSrdAsicConfig::GetWeakThreshInDbHz(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((double *)this + 265);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetSniffDFThreshold(uint64_t a1, uint64_t a2, float a3)
{
  BlueFin::GlMeReceiverParametersIfc::GetDefaultSignalId((uint64_t)v15, a2, 1);
  float v6 = *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a2)
                + 24);
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 256))())
  {
    if (a2 != 4) {
      goto LABEL_8;
    }
  }
  else
  {
    char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))(*(void *)(a1 + 16));
    if (a2 != 4 || (v7 & 1) == 0) {
      goto LABEL_8;
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 1032))(*(void *)(a1 + 16)))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    float v6 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 40))(v8, v9, 5, 0);
  }
LABEL_8:
  if (v17 >= 0x23Fu)
  {
    unsigned int v13 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    int v14 = 692;
    goto LABEL_19;
  }
  if (v16 == 1)
  {
    float v10 = 1500.0;
    if (v15[0] - 1 < 0x20 || v15[0] - 66 < 0xA) {
      goto LABEL_14;
    }
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v16
                                                              - v16
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[v15[0]]])
  {
    unsigned int v13 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v14 = 685;
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v14, v13);
  }
  float v10 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v16
                                                                                       - v16
                                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[v15[0]]]
      * 0.001
      * 1000.0;
LABEL_14:
  unsigned int v11 = (16130
       * (float)((float)((float)(v6 / v10) * (float)((float)((float)(__exp10f(2.5) * 10.0) / 1000.0) + 1.0))
                             * a3)) >> 15;
  if (v11 >= 0xFFFF) {
    return 0xFFFFLL;
  }
  else {
    return v11;
  }
}

uint64_t BlueFin::GlMeSrdAsicConfig::HasL5ShortBuffer(BlueFin::GlMeSrdAsicConfig *this)
{
  return 0;
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetNumBinningStepParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 208);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetNumSrchParams(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 200);

  return v1();
}

uint64_t BlueFin::GlMeRxParamStd::GetNumBinningStepParams(int **this)
{
  return **((unsigned __int8 **)BlueFin::GlMeRxParamStd::rMap(this) + 1);
}

unint64_t BlueFin::GlMeRxParamStd::GetNumSrchParams(BlueFin::GlMeRxParamStd *this)
{
  return BlueFin::GlMeRxParamLimits::GetMaxAllowedSrchParamIds(**((_DWORD **)this + 1));
}

uint64_t BlueFin::MinnowEswRpcJdEncImp::esw_jd_rpc_set_grid_config_lut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 1800, v6);
  for (uint64_t i = 0; i != 8; ++i)
    BlueFin::GlStream::PutU08(v12, *(unsigned char *)(a3 + i));
  BlueFin::GlStream::PutU32(v12, *(_DWORD *)(a3 + 8));
  for (uint64_t j = 0; j != 384; j += 12)
  {
    BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + j + 12));
    BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + j + 14));
    BlueFin::GlStream::PutU32(v12, *(_DWORD *)(a3 + j + 16));
    BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + j + 20));
    BlueFin::GlStream::PutU16(v12, *(unsigned __int16 *)(a3 + j + 22));
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 0x12u, v13, Offset);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 457, "esw_jd_rpc_set_grid_config_lut", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 457, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcJdEncImp::esw_jd_rpc_band_noise_set_all(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  BOOL v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU32(v9, *a3);
  BlueFin::GlStream::PutU32(v9, a3[1]);
  BlueFin::GlStream::PutU32(v9, a3[2]);
  BlueFin::GlStream::PutU32(v9, a3[3]);
  BlueFin::GlStream::PutU32(v9, a3[4]);
  BlueFin::GlStream::PutU32(v9, a3[5]);
  BlueFin::GlStream::PutU32(v9, a3[6]);
  BlueFin::GlStream::PutU32(v9, a3[7]);
  BlueFin::GlStream::PutU32(v9, a3[8]);
  BlueFin::GlStream::PutU32(v9, a3[9]);
  BlueFin::GlStream::PutU32(v9, a3[10]);
  BlueFin::GlStream::PutU32(v9, a3[11]);
  BlueFin::GlStream::PutU32(v9, a3[12]);
  BlueFin::GlStream::PutU32(v9, a3[13]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 4, 0xEu, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 479, "esw_jd_rpc_band_noise_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 479, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateNonL1ClkErrTgd(uint64_t result, uint64_t a2, unsigned __int8 *a3, char a4, int a5)
{
  uint64_t v20 = result;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a3)
  {
    char v6 = a3;
    uint64_t v19 = result + 25340;
    uint64_t v18 = (_DWORD *)(result + 26464);
    if (a5) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = 36;
    }
    uint64_t v8 = off_270EC1848;
    uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss;
    do
    {
      unsigned int v10 = *v6;
      if (v10 <= 0x23 && *((_DWORD *)v6 + 1) == 1)
      {
        float v22 = &unk_270EC1830;
        int v23 = 5;
        *(_DWORD *)&v25[27] = 0;
        char v26 = 0;
        *(_OWORD *)&v25[12] = *(_OWORD *)(v6 + 12);
        *(_OWORD *)float v25 = *(_OWORD *)v6;
        char v24 = a4;
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
        {
          uint64_t result = v8();
          unsigned int v10 = *v6;
        }
        if (v10 - 50 >= 0x44)
        {
          unsigned __int8 v11 = v10 - 117;
          uint64_t v12 = v9[v11];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v12 + 14] != 255
            && (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v12]
                                + v11
                                - BlueFin::GlSvId::s_aucGnss2minSvId[v12]
                                + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v12]) <= 0x23Eu)
          {
            unsigned int v13 = v8;
            uint64_t v14 = v9;
            *(_OWORD *)float v21 = *(_OWORD *)v6;
            *(_OWORD *)&v21[12] = *(_OWORD *)(v6 + 12);
            v21[28] = a4;
            if (v21[0] <= 0x23uLL)
            {
              uint64_t v15 = *(void *)(*(void *)(v20 + 80) + 7392) + 32 * v21[0] + 6616;
              uint64_t result = BlueFin::GlPeGalAltNavData::IsBetterThan(v21, (unsigned __int8 *)v15);
              if (result)
              {
                *(_OWORD *)uint64_t v15 = *(_OWORD *)v21;
                *(_OWORD *)(v15 + 13) = *(_OWORD *)&v21[13];
              }
            }
            if ((a4 & 1) == 0 && *v6 <= 0x3EuLL && *((_DWORD *)v6 + 1) == 1)
            {
              int v16 = (_OWORD *)(v19 + 28 * *v6);
              *v18 |= 0x1000000u;
              long long v17 = *(_OWORD *)v6;
              *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)(v6 + 12);
              *int v16 = v17;
            }
            uint64_t v9 = v14;
            uint64_t v8 = v13;
          }
        }
      }
      v6 += 28;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t BlueFin::GlPeGalAltNavData::IsBetterThan(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == 255) {
    return 0;
  }
  if (*a2 == 255) {
    return 1;
  }
  unsigned int v2 = *((unsigned __int16 *)a2 + 13);
  unsigned int v3 = *((unsigned __int16 *)a1 + 13);
  BOOL v4 = v2 > v3 || v2 == v3 && *((unsigned __int16 *)a2 + 10) > *((unsigned __int16 *)a1 + 10);
  BOOL v6 = v2 != v3 || *((unsigned __int16 *)a2 + 10) != *((unsigned __int16 *)a1 + 10);
  if (v4 && a2[28]) {
    return 0;
  }
  int v7 = a1[28];
  if (v4)
  {
    if (!a1[28]) {
      return 0;
    }
    int v7 = 1;
  }
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a2[28] == 0;
  }
  return v8 || v6;
}

void *BlueFin::GlStackAlloc<BlueFin::GlPeLtoReader>::~GlStackAlloc(void *a1)
{
  return a1;
}

uint64_t BlueFin::GlPeReqBag::GlPeReqBag(uint64_t a1, BlueFin::GlSettingsImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, BlueFin::GlPeTimeManager *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v23 = a1 + 20256;
  *(void *)(a1 + 576) = a2;
  *(void *)(a1 + 584) = a3;
  *(void *)(a1 + 592) = a5;
  *(void *)(a1 + 60BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a8;
  *(void *)(a1 + 608) = a9;
  *(void *)(a1 + 616) = a4;
  *(_OWORD *)(a1 + 636) = 0u;
  *(void *)(a1 + 624) = a1 + 636;
  *(unsigned char *)(a1 + 632) = 4;
  *(void *)(a1 + 1272) = &unk_270EBA640;
  *(void *)(a1 + 128BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 672;
  *(void *)(a1 + 1288) = a1 + 1072;
  *(void *)(a1 + 1296) = a1 + 1260;
  *(_DWORD *)(a1 + 1304) = 40;
  *(_WORD *)(a1 + 1308) = -17407;
  *(unsigned char *)(a1 + 131BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 10;
  BlueFin::GlArray::Clear(a1 + 1272);
  *(_DWORD *)(a1 + 1312) = 0;
  BlueFin::GlPeNmeaGen::GlPeNmeaGen((BlueFin::GlPeNmeaGen *)(a1 + 1344), a2, a8);
  *(unsigned char *)(a1 + 3233) = 1;
  *(unsigned char *)(a1 + 3236) = a7;
  *(void *)(a1 + 3237) = 0;
  *(void *)(a1 + 3244) = 0;
  *(_DWORD *)(a1 + 3252) = -1;
  *(_WORD *)(a1 + 3256) = 0;
  *(void *)(a1 + 3264) = 0;
  BlueFin::GlPeMeasStatus::GlPeMeasStatus(a1 + 3296, a1 + 20000);
  *(void *)(a1 + 2000BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 1344;
  *(void *)(a1 + 20008) = a8;
  *(void *)(a1 + 20016) = a11;
  *(void *)(a1 + 20024) = a5;
  *(void *)(a1 + 20032) = a5 + 34112;
  *(void *)(a1 + 2004BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a5 + 392;
  *(void *)(a1 + 20048) = a10;
  *(void *)(a1 + 20056) = a2;
  *(void *)(a1 + 20064) = a6;
  *(void *)(a1 + 20072) = a13;
  *(void *)(a1 + 2008BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a17;
  *(void *)(a1 + 20088) = a3;
  *(void *)(a1 + 20096) = a12;
  *(void *)(a1 + 20104) = a14;
  *(void *)(a1 + 20112) = a15;
  *(void *)(a1 + 2012BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a16;
  *(_WORD *)uint64_t v23 = 0;
  *(_DWORD *)(v23 + 432) = 0;
  *(unsigned char *)(a1 + 20656) = 0;
  *(_OWORD *)(a1 + 2064BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(v23 + 412) = 0;
  *(void *)(a1 + 20673) = 0;
  *(void *)(a1 + 2066BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v23 + 436) = 1;
  *(_DWORD *)(v23 + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v23 + 444) = 0;
  GlCustomLog(127, "Size,GlPeReqBag,%u\n", 20704);
  GlCustomLog(127, "Size of all request handlers %u\n", 4608);
  *(_DWORD *)(a1 + 1316) = -1;
  bzero((void *)a1, 0x240uLL);
  *(_WORD *)(a1 + 3234) = 0;
  *(_OWORD *)(a1 + 2026BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20276) = 0u;
  *(_OWORD *)(a1 + 20292) = 0u;
  *(_OWORD *)(a1 + 20308) = 0u;
  *(_OWORD *)(a1 + 20324) = 0u;
  *(_OWORD *)(a1 + 2034BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20356) = 0u;
  *(_OWORD *)(a1 + 20372) = 0u;
  *(_OWORD *)(a1 + 20388) = 0u;
  *(_OWORD *)(a1 + 20404) = 0u;
  *(_OWORD *)(a1 + 2042BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20436) = 0u;
  *(_OWORD *)(a1 + 20452) = 0u;
  *(_OWORD *)(a1 + 20468) = 0u;
  *(_OWORD *)(a1 + 20484) = 0u;
  *(_OWORD *)(a1 + 2050BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20516) = 0u;
  *(_OWORD *)(a1 + 20532) = 0u;
  *(_OWORD *)(a1 + 20548) = 0u;
  *(_OWORD *)(a1 + 20564) = 0u;
  *(_OWORD *)(a1 + 2058BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20596) = 0u;
  *(_OWORD *)(a1 + 20612) = 0u;
  *(_OWORD *)(a1 + 20624) = 0u;
  *(_OWORD *)(a1 + 2024BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20224) = 0u;
  *(_OWORD *)(a1 + 20208) = 0u;
  *(_OWORD *)(a1 + 20192) = 0u;
  *(_OWORD *)(a1 + 20176) = 0u;
  *(_OWORD *)(a1 + 2016BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 20144) = 0u;
  *(_OWORD *)(a1 + 20128) = 0u;
  *(void *)(a1 + 2064BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 20260;
  *(void *)(a1 + 20648) = 0;
  *(unsigned char *)(v23 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(v23 + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(v23 + 412) = 0;
  *(int32x2_t *)(a1 + 2066BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vdup_n_s32(0xBE0u);
  uint64_t v24 = a1 + 13120;
  uint64_t v25 = 20;
  *(unsigned char *)(v23 + 424) = 0;
  do
  {
    unsigned __int8 v28 = 0;
    BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v24, &v28, 0);
    v24 += 344;
    --v25;
  }
  while (v25);
  return a1;
}

uint64_t BlueFin::GL_FACT_TEST_STATUS_wrapper::init(uint64_t a1, unsigned __int8 *a2, char a3)
{
  *(_WORD *)(a1 + 12) = *a2;
  *(void *)a1 = 0x800000008;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 14) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 232) = 0;
  *(void *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0;
  *(void *)(a1 + 98) = 0;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0xC069000000000000;
  *(void *)(a1 + 56) = 0;
  uint64_t v3 = *a2;
  int v4 = BlueFin::GlSvId::s_aucSvId2gnss[v3];
  *(_DWORD *)(a1 + 276) = v4;
  if (v4 == 2) {
    __int16 v5 = (char)(v3 - 59);
  }
  else {
    __int16 v5 = BlueFin::GlSvId::s_aucSvId2prn[v3];
  }
  *(_OWORD *)(a1 + 236) = 0uLL;
  uint64_t result = a1 + 236;
  *(_WORD *)(result + 44) = v5;
  *(_DWORD *)(result + 92) = 0;
  *(_WORD *)(result + 96) = 0;
  *(_DWORD *)(result + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(result + 16) = 0uLL;
  *(void *)(result + 32) = 0;
  *(void *)(result + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(result + 52) = 0;
  *(_WORD *)(result + 68) = 2;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(result + 84) = a3;
  *(unsigned char *)(result + 85) = 0;
  return result;
}

uint64_t BlueFin::GlPeMeasStatus::GlPeMeasStatus(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  uint64_t v3 = (unsigned char *)(a1 + 9768);
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 604800000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = xmmword_263BBD410;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 52) = 100000000;
  *(_WORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 456) = &unk_270EBA640;
  *(void *)(a1 + 464) = a1 + 62;
  *(void *)(a1 + 472) = a1 + 162;
  *(void *)(a1 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 350;
  *(_DWORD *)(a1 + 488) = 1;
  *(_WORD *)(a1 + 492) = -17407;
  *(unsigned char *)(a1 + 494) = 100;
  BlueFin::GlArray::Clear(a1 + 456);
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(void *)(a1 + 496) = a1 + 508;
  *(unsigned char *)(a1 + 504) = 8;
  *(_OWORD *)(a1 + 572) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(void *)(a1 + 544) = a1 + 556;
  *(unsigned char *)(a1 + 552) = 8;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_DWORD *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = &unk_270EBA640;
  *(void *)(a1 + 624) = a1 + 672;
  *(void *)(a1 + 632) = a1 + 9472;
  *(void *)(a1 + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 9660;
  *(_DWORD *)(a1 + 648) = 88;
  *(_WORD *)(a1 + 652) = -17407;
  *(unsigned char *)(a1 + 654) = 100;
  BlueFin::GlArray::Clear(a1 + 616);
  *(_OWORD *)(a1 + 9788) = 0u;
  *(_OWORD *)(a1 + 9772) = 0u;
  *(void *)(a1 + 976BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 9772;
  *uint64_t v3 = 8;
  v3[40] = 0;
  bzero(*(void **)(a1 + 496), ((4 * *(unsigned __int8 *)(a1 + 504) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(a1 + 544), ((4 * *(unsigned __int8 *)(a1 + 552) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  return a1;
}

uint64_t BlueFin::GlReqSm::GlReqSm(uint64_t a1, uint64_t a2, BlueFin::GlEventPump *a3, BlueFin::GlSettingsImpl *a4, uint64_t a5, BlueFin::GlPeTimeManager *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v27 = a1 + 54448;
  uint64_t v28 = a1 + 54160;
  float v29 = (int32x2_t *)(a1 + 53280);
  uint64_t v46 = a1 + 33504;
  uint64_t v44 = a1 + 31744;
  uint64_t v41 = (unsigned char *)(a1 + 6400);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EC64D8;
  *(_WORD *)(a1 + 108) = 0;
  *(unsigned char *)(a1 + 11BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 116) = 0;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x10000EA60;
  *(void *)(a1 + 128) = a3;
  *(void *)(a1 + 304) = a1 + 160;
  *(void *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 3624) = a1 + 3456;
  *(_WORD *)(a1 + 338) = 0;
  BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(a1 + 4928, 0xA0u, a1 + 3648);
  BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(a1 + 6240, 0xA0u, a1 + 4960);
  *(void *)(a1 + 6264) = a5;
  *(void *)(a1 + 6272) = a4;
  *(void *)(a1 + 628BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a6;
  *(void *)(a1 + 6288) = a7;
  *(void *)(a1 + 6296) = a8;
  *(void *)(a1 + 6304) = a9;
  *(void *)(a1 + 6312) = a10;
  *(void *)(a1 + 632BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a11;
  *(void *)(a1 + 6328) = a14;
  *(void *)(a1 + 6336) = a13;
  *(void *)(a1 + 6344) = a6;
  *(void *)(a1 + 6352) = a12;
  *(void *)(a1 + 636BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a15;
  *(void *)(a1 + 6392) = 0;
  *uint64_t v41 = 0;
  *(void *)(a1 + 6408) = 0;
  *(void *)(a1 + 6416) = 0x41EFFFFFFFE00000;
  *(_OWORD *)(a1 + 6368) = 0u;
  *(_DWORD *)(a1 + 6384) = -1;
  *(void *)(a1 + 6424) = a17;
  *(void *)(a1 + 6432) = a18;
  *(void *)(a1 + 644BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a19;
  *(void *)(a1 + 6448) = a20;
  *(void *)(a1 + 6456) = a22;
  v41[64] = a23;
  *(_DWORD *)(a1 + 6468) = 0;
  BlueFin::GlPePendingBag::GlPePendingBag((BlueFin::GlPePendingBag *)(a1 + 6496));
  BlueFin::GlPeReqBag::GlPeReqBag(a1 + 10880, a4, a1, a15, a7, a7 + 56, a23, a6, a13, a10, a9, a11, a8, a18, a19, a21, a22);
  *(_DWORD *)(a1 + 31607) = 0;
  *(void *)(a1 + 3160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(a1 + 31584) = 0u;
  *(void *)(a1 + 31736) = 0;
  *(unsigned char *)uint64_t v44 = 0;
  *(void *)(a1 + 31784) = 0;
  *(void *)(a1 + 31752) = 0;
  *(_OWORD *)(a1 + 3176BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_DWORD *)(a1 + 31775) = 0;
  *(_DWORD *)(v44 + 48) = 0;
  *(unsigned char *)(v44 + 52) = 0;
  *(_OWORD *)(a1 + 31616) = 0u;
  *(_OWORD *)(a1 + 31632) = 0u;
  *(_DWORD *)(a1 + 31647) = 0;
  *(_OWORD *)(a1 + 31656) = 0u;
  *(_OWORD *)(a1 + 31672) = 0u;
  *(_DWORD *)(a1 + 31727) = 0;
  *(_DWORD *)(a1 + 31687) = 0;
  *(_OWORD *)(a1 + 31712) = 0u;
  *(_OWORD *)(a1 + 31696) = 0u;
  *(void *)(a1 + 3180BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a12;
  BlueFin::GlPePlatfStatMgr::GlPePlatfStatMgr((BlueFin::GlPePlatfStatMgr *)(a1 + 31808));
  *(void *)(v44 + 144BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v44 + 1448) = a15;
  *(void *)(v44 + 1456) = a16;
  BlueFin::GlPePwrStateMgr::GlPePwrStateMgr((BlueFin::GlPePwrStateMgr *)(a1 + 33216), 0x7Fu, a3, (const BlueFin::GlPeKF *)(a5 + 184416), (BlueFin::GlReqSm *)a1);
  *(_OWORD *)(v46 + 12) = 0u;
  *(void *)uint64_t v46 = v46 + 12;
  *(unsigned char *)(v46 + 8) = 8;
  *(_OWORD *)(v46 + 28) = 0u;
  BlueFin::GlPeSatAidInfo::GlPeSatAidInfo((BlueFin::GlPeSatAidInfo *)(a1 + 33568));
  *(_DWORD *)(v46 + 9248) = 0;
  BlueFin::GlPeSatAidInfo::GlPeSatAidInfo((BlueFin::GlPeSatAidInfo *)(a1 + 42784));
  BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(a1 + 51968, 0xA0u, a1 + 52000);
  uint64_t v30 = 0;
  unsigned int v31 = 0;
  *float v29 = vdup_n_s32(0xFF9222FF);
  v29[1].i8[0] = 0;
  *(_OWORD *)(a1 + 53308) = 0u;
  __n128 v29[2] = (int32x2_t)(a1 + 53308);
  v29[3].i8[0] = 8;
  *(_OWORD *)(a1 + 53324) = 0u;
  *(_OWORD *)(a1 + 53356) = 0u;
  v29[8] = (int32x2_t)(a1 + 53356);
  v29[9].i8[0] = 8;
  *(_OWORD *)(a1 + 53372) = 0u;
  *(_OWORD *)(a1 + 53404) = 0u;
  v29[14] = (int32x2_t)(a1 + 53404);
  v29[15].i8[0] = 8;
  *(_OWORD *)(a1 + 5342BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  v29[20] = (int32x2_t)(a1 + 53452);
  v29[21].i8[0] = 19;
  *(_OWORD *)(a1 + 53544) = 0u;
  *(void *)(a1 + 53557) = 0;
  *(void *)(a1 + 53584) = 0;
  *(_DWORD *)(a1 + 5359BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 53568) = 0u;
  *(void *)(a1 + 53992) = 0;
  *(_DWORD *)(a1 + 53999) = 0;
  *(_OWORD *)(a1 + 53976) = 0u;
  *(_DWORD *)(a1 + 5402BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 54023) = 0;
  *(_OWORD *)(a1 + 53452) = 0u;
  *(_OWORD *)(a1 + 53468) = 0u;
  *(_OWORD *)(a1 + 53484) = 0u;
  *(_OWORD *)(a1 + 5350BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53516) = 0u;
  *(_OWORD *)(a1 + 53525) = 0u;
  v29[85] = 0;
  v29[86].i16[0] = 0;
  v29[91] = 0;
  v29[92].i8[0] = 0;
  *(_OWORD *)(a1 + 5360BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53616) = 0u;
  *(_DWORD *)(a1 + 5363BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_DWORD *)(a1 + 5367BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 5364BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53656) = 0u;
  *(_DWORD *)(a1 + 5371BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 53696) = 0u;
  *(_OWORD *)(a1 + 5368BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_DWORD *)(a1 + 5375BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 5372BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53736) = 0u;
  *(_DWORD *)(a1 + 5379BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 53776) = 0u;
  *(_OWORD *)(a1 + 5376BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_DWORD *)(a1 + 5383BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 5380BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53816) = 0u;
  *(_DWORD *)(a1 + 5387BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 5384BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53856) = 0u;
  *(_DWORD *)(a1 + 5391BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 5388BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 53896) = 0u;
  *(_DWORD *)(a1 + 5395BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)(a1 + 53936) = 0u;
  *(_OWORD *)(a1 + 5392BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  v29[93].i32[1] = -7200001;
  v29[94].i16[0] = 0;
  v29[94].i8[2] = 0;
  v29[94].i32[1] = 0;
  v29[95].i8[0] = 0;
  v29[108] = (int32x2_t)(a1 + 54048);
  v29[109].i8[0] = 0;
  *(_OWORD *)(v28 + 12) = 0u;
  *(void *)uint64_t v28 = v28 + 12;
  *(unsigned char *)(v28 + 8) = 8;
  *(_OWORD *)(v28 + 28) = 0u;
  *(void *)(v28 + 48) = v28 + 60;
  *(unsigned char *)(v28 + 56) = 8;
  *(_OWORD *)(v28 + 76) = 0u;
  *(_OWORD *)(v28 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(v28 + 96) = v28 + 108;
  *(unsigned char *)(v28 + 104) = 8;
  *(_OWORD *)(v28 + 124) = 0u;
  *(_OWORD *)(v28 + 108) = 0u;
  *(void *)(v28 + 144) = v28 + 156;
  *(unsigned char *)(v28 + 152) = 8;
  *(_OWORD *)(v28 + 172) = 0u;
  *(_OWORD *)(v28 + 156) = 0u;
  *(void *)(v28 + 192) = a1 + 54364;
  *(unsigned char *)(v28 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 5438BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 54364) = 0u;
  *(void *)(v28 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 54412;
  *(unsigned char *)(v28 + 248) = 8;
  *(_OWORD *)(a1 + 54428) = 0u;
  *(_OWORD *)(a1 + 54412) = 0u;
  *(void *)uint64_t v27 = a1 + 54460;
  *(unsigned char *)(v27 + 8) = 8;
  *(_OWORD *)(a1 + 54476) = 0u;
  *(_OWORD *)(a1 + 5446BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(v27 + 48) = a1 + 54508;
  *(unsigned char *)(v27 + 56) = 8;
  *(_OWORD *)(a1 + 54524) = 0u;
  *(_OWORD *)(a1 + 54508) = 0u;
  *(_WORD *)(v27 + 96) = 0;
  *(_DWORD *)(a1 + 54556) = 0;
  *(void *)(a1 + 54548) = 0;
  *(_WORD *)(v27 + 112) = 1;
  *(_DWORD *)(v27 + 116) = 14;
  *(_DWORD *)(v27 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000;
  *(unsigned char *)(v27 + 124) = 0;
  *(_DWORD *)(v27 + 128) = 0;
  *(unsigned char *)(v27 + 132) = 0;
  *(_DWORD *)(v27 + 136) = 0;
  *(_WORD *)(v27 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v27 + 142) = 0;
  *(_DWORD *)(v27 + 144) = 0;
  *(unsigned char *)(v27 + 148) = 0;
  *(_OWORD *)(a1 + 5460BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(unsigned char *)(v27 + 168) = 1;
  *(void *)(v27 + 172) = 0x32000000C8;
  *(_DWORD *)(v27 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3600;
  uint64_t v32 = *(void *)(a1 + 6264);
  *(void *)(v27 + 184) = a1 + 54644;
  *(unsigned char *)(v27 + 192) = 8;
  *(_OWORD *)(a1 + 5466BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 54644) = 0u;
  *(unsigned char *)(v27 + 232) = 0;
  *(unsigned char *)(v27 + 376) = 0;
  *(void *)(v27 + 384) = v32 + 181056;
  *(void *)(a1 + 54816) = 0;
  *(_OWORD *)(a1 + 5480BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 54784) = 0u;
  *(_OWORD *)(a1 + 54768) = 0u;
  *(_OWORD *)(a1 + 54752) = 0u;
  *(_OWORD *)(a1 + 54736) = 0u;
  *(_OWORD *)(a1 + 5472BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 54704) = 0u;
  *(_OWORD *)(a1 + 54688) = 0u;
  *(_DWORD *)(v27 + 392) = 0;
  *(unsigned char *)(v27 + 396) = 0;
  *(void *)(a1 + 54877) = 0;
  *(void *)(a1 + 54895) = 0;
  *(void *)(a1 + 54888) = 0;
  float v33 = *(_OWORD **)(a1 + 304);
  v33[7] = 0u;
  v33[8] = 0u;
  v33[5] = 0u;
  v33[6] = 0u;
  v33[3] = 0u;
  v33[4] = 0u;
  v33[1] = 0u;
  void v33[2] = 0u;
  float v34 = BlueFin::GlSvId::s_aucGnss2numSvId;
  *float v33 = 0u;
  do
  {
    unsigned int v35 = *v34++;
    BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(*(void *)(a1 + 3624) + v30, v35, a1 + 1952 + 8 * v31);
    v31 += v35;
    v30 += 24;
  }
  while (v30 != 168);
  for (uint64_t i = 0; i != 96; i += 32)
  {
    uint64_t v37 = *(void *)&v29[108] + i;
    *(unsigned char *)uint64_t v37 = 0;
    *(void *)(v37 + 4) = 0;
    *(void *)(v37 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(v37 + 12) = 0;
    *(_DWORD *)(v37 + 28) = 0;
  }
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlReqSm::initial);
  uint64_t v38 = *(void *)(a1 + 304);
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 48) = v38;
  *(void *)(a1 + 56) = v38 + 144;
  *(void *)(a1 + 64) = v38;
  *(void *)(a1 + 72) = v38;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000048;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 128), (BlueFin::GlActive *)a1);
  BlueFin::GlReqSm::initializeAiding((BlueFin::GlReqSm *)a1);
  *(_OWORD *)(a1 + 54845) = 0u;
  *(_OWORD *)(a1 + 5486BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  GlCustomLog(127, "Size,GlReqSm,%u\n", 54912);
  GlCustomLog(127, "    ->Size,GlPePendingBag,%u\n", 4384);
  GlCustomLog(127, "    ->Size,GlPeReqBag,%u\n", 20704);
  GlCustomLog(127, "    ->Size,GlTimer,%u\n", 40);
  GlCustomLog(127, "    ->Size,GlPeGfcMgr,%u\n", 136);
  GlCustomLog(127, "    ->Size,GlPeFlpLocationStatus,%u\n", 31296);
  GlCustomLog(127, "    ->Size,GlPePlatfStatMgr,%u\n", 1376);
  GlCustomLog(127, "    ->Size,GlPePwrStateMgr,%u\n", 288);
  GlCustomLog(127, "    ->Size,GlPeSatAidInfo,%u\n", 9184);
  GlCustomLog(127, "    ->Size,GlPeSatAidInfo,%u\n", 9184);
  GlCustomLog(127, "    ->Size,GlMeSignalAidInfo,%u\n", 24);
  GlCustomLog(127, "    ->Size,GlPePpsGen,%u\n", 80);
  return a1;
}

uint64_t BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(void *)uint64_t result = &unk_270EBA358;
  *(_DWORD *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = a2;
  *(_WORD *)(result + 14) = 0;
  *(void *)(result + 16) = a3;
  if ((a2 + 95) <= 0x5Fu)
  {
    __int16 v5 = "ucMaxSignals > 0 && ucMaxSignals <= GL_MAX_SIG_AID_SIZE";
    DeviceFaultNotify("glmepeif_types.cpp", 89, "GlMeSignalAidInfo", (char)"ucMaxSignals > 0 && ucMaxSignals <= GL_MAX_SIG_AID_SIZE");
    int v6 = 89;
    goto LABEL_8;
  }
  if (!a3)
  {
    __int16 v5 = "pastSignalBuffer != 0";
    DeviceFaultNotify("glmepeif_types.cpp", 90, "GlMeSignalAidInfo", (char)"pastSignalBuffer != 0");
    int v6 = 90;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", v6, v5);
  }
  uint64_t v3 = a2;
  int v4 = (_DWORD *)(a3 + 4);
  do
  {
    *((_WORD *)v4 - 2) = 0;
    _DWORD *v4 = 0;
    v4 += 2;
    --v3;
  }
  while (v3);
  return result;
}

void *BlueFin::GlReqSm::UpdateSatAiding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, unsigned __int8 a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v67 = MEMORY[0x270FA5388](a1, a2);
  int v69 = v68;
  uint64_t v70 = v67;
  STACK[0x24D8] = *MEMORY[0x263EF8340];
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(*(void *)(v67 + 6320) + 8), (uint64_t)&a20);
  uint64_t v71 = *(void *)(v70 + 6304);
  if (*(unsigned char *)(v71 + 92341))
  {
    int v72 = *(char *)(v71 + 92343);
    int v73 = *(unsigned __int8 *)(v71 + 92342);
    if (v72 <= *(char *)(v70 + 54900)) {
      LOBYTE(v72) = *(unsigned char *)(v70 + 54900);
    }
    *(unsigned char *)(v70 + 5490BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v72;
    if (v73) {
      int v74 = 4;
    }
    else {
      int v74 = 5;
    }
  }
  else
  {
    int v72 = *(char *)(v70 + 54900);
    if (v72 < 1)
    {
      int v74 = 5;
    }
    else
    {
      *(unsigned char *)(v70 + 5490BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v72 - 1;
      int v74 = 5;
      LOBYTE(v72) = v72 - 1;
    }
  }
  if (!(_BYTE)v72)
  {
    if (*(_DWORD *)(v71 + 92336) < 0x1Fu) {
      goto LABEL_20;
    }
    uint64_t v75 = *(void *)(v71 + 88840);
    if (*(unsigned char *)(v75 + 1988))
    {
      int v74 = 1;
      goto LABEL_21;
    }
    int v76 = *(_DWORD *)(v75 + 8) - 1;
    if (v76 < 3)
    {
      int v74 = dword_263BBD64C[v76];
      goto LABEL_21;
    }
    if (BlueFin::GlPeKF::IsVdrValid((BlueFin::GlPeKF *)v71))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)(v71 + 27744) + 336))(v71 + 27744)) {
        int v74 = 6;
      }
      else {
        int v74 = 0;
      }
    }
    else
    {
LABEL_20:
      int v74 = 0;
    }
  }
LABEL_21:
  BlueFin::GlPeRangeAidGen::RecomputeAidingNow(*(void *)(v70 + 6312), 0, v69, (int)&a20, v74);
  uint64_t v77 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(void))(**(void **)(*(void *)(v70 + 6264) + 32)
                                                                           + 88))(*(void *)(*(void *)(v70 + 6264)
                                                                                              + 32));
  a19 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v70 + 6264) + 32) + 96))(*(void *)(*(void *)(v70 + 6264) + 32));
  uint64_t v78 = v77(8832);
  uint64_t v79 = (uint64_t *)v78;
  a18 = v78;
  if (!v78)
  {
    DeviceFaultNotify("glmemalloc.h", 74, "GlStackAlloc", (char)"m_ptr != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmemalloc.h", 74, "m_ptr != nullptr");
  }
  uint64_t v80 = BlueFin::GlSatAidInfo::GlSatAidInfo(v78);
  BlueFin::GlSatAidInfo::operator=(v80, *(void *)(v70 + 6312) + 320);
  char v81 = (BlueFin::GlSvIdSet *)(*(void *)(v70 + 6288) + 119904);
  BlueFin::GlReqSm::SatelliteSelection((BlueFin::GlReqSm *)v70, v81, 0, 0);
  uint64_t v82 = 0;
  int v83 = 0;
  uint64_t v84 = 91;
  do
  {
    uint64_t v85 = v79[1101];
    unsigned int v86 = *(unsigned __int8 *)(v85 + v82);
    if (*(unsigned char *)(v85 + v82))
    {
      if (((unint64_t)*(unsigned int *)(*(void *)v81 + 4 * (v86 >> 5)) >> (v86 & 0x1F)))
      {
        if (v86 - 76 <= 0x3E && *(unsigned char *)(v70 + 54040))
        {
          *(unsigned char *)(v85 + v82) = 0;
          GlCustomLog(14, "UpdateSatAiding: removed aiding for BDS Svid: %d %s\n", 0, "T");
        }
        else if (*(_DWORD *)(v85 + v82 + 24))
        {
          ++v83;
        }
      }
      else
      {
        *(unsigned char *)(v85 + v82) = 0;
      }
    }
    v82 += 96;
    --v84;
  }
  while (v84);
  BlueFin::GlPeSatAidInfo::GlPeSatAidInfo((BlueFin::GlPeSatAidInfo *)&a26);
  uint64_t v87 = *(void *)(v70 + 6320);
  if (*(unsigned char *)(v87 + 19200) && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v87 + 37672)))
  {
    BOOL v88 = *(_DWORD *)v87 != -7200001 && *(_DWORD *)v87 >> 5 > 0x270u;
    if (!v88 && v83 == 0)
    {
      int v90 = *((_DWORD *)v79 + 4);
      uint64_t v91 = v79[3];
      int v92 = *((_DWORD *)v79 + 8);
      int v93 = *((_DWORD *)v79 + 9);
      a63 = v79[1];
      a64 = v90;
      a65 = v91;
      a66 = v92;
      a67 = v93;
      uint64_t v94 = 91;
      double v95 = (unsigned char *)STACK[0x2468];
      do
      {
        *double v95 = 0;
        v95 += 96;
        --v94;
      }
      while (v94);
      a16 = v70 + 42688;
      a17 = *(unsigned char *)(v70 + 42727) + 1;
      if (*(unsigned __int8 *)(v70 + 42726) > a17)
      {
        do
        {
          a15 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&a16);
          BlueFin::GlPeSatAidInfo::Add((uint64_t)&a26, &a15);
          uint64_t v97 = v96;
          AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v70 + 33568, &a15);
          if (!v97 || !AidBySvId)
          {
            DeviceFaultNotify("glpe_reqsm_aiding.cpp", 3079, "UpdateSatAiding", (char)"potSatAid != nullptr && potIniSatAid != nullptr");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqsm_aiding.cpp", 3079, "potSatAid != nullptr && potIniSatAid != nullptr");
          }
          BlueFin::GlSatAid::operator=(v97, (uint64_t)AidBySvId);
        }
        while (a17 < *(unsigned __int8 *)(a16 + 38));
      }
      uint64_t v79 = &a62;
    }
  }
  BlueFin::GlReqSm::sendMeSatAiding((BlueFin::GlReqSm *)v70, (const BlueFin::GlSatAidInfo *)v79);
  GlCustomLog(15, "GlReqSm::UpdateSatAiding:\n");
  GlCustomLog(15, "           LMS:%10u\n", *((_DWORD *)v79 + 9));
  GlCustomLog(15, "    GpsSysTmMs: %16.6lf   GpsSysTmUncMs:%12.6lf\n", *((double *)v79 + 1) * 1000.0, *((float *)v79 + 4) * 1000.0);
  GlCustomLog(15, "   GlnsSysTmMs: %16.6lf  GlnsSysTmUncMs:%12.6lf\n", *((double *)v79 + 3) * 1000.0, *((float *)v79 + 8) * 1000.0);
  GlCustomLog(15, "               SvId  RcvdST(ms)  Unc(ms)  Dpplr(ppb) Unc(ppb)  ProbLOS  SatAidFlags\n");
  uint64_t v99 = 0;
  uint64_t v100 = 91;
  do
  {
    uint64_t v101 = v79[1101];
    int v102 = *(unsigned __int8 *)(v101 + v99);
    if (*(unsigned char *)(v101 + v99))
    {
      uint64_t v103 = v101 + v99;
      double v104 = *(double *)(v103 + 32) * 1000.0;
      double v105 = *(float *)(v103 + 40) * 1000.0;
      double v106 = *(float *)(v103 + 44) * 1000000000.0;
      double v107 = *(float *)(v103 + 48) * 1000000000.0;
      double v108 = *(float *)(v103 + 92);
      int v109 = *(_DWORD *)(v103 + 24);
      uint64_t v110 = *(__int16 *)(v103 + 74);
      uint64_t v111 = 69;
      if ((v109 & 0x80) == 0) {
        uint64_t v111 = 101;
      }
      uint64_t vars0 = v111;
      uint64_t vars8 = v110;
      uint64_t v112 = 65;
      if ((v109 & 0x40) == 0) {
        uint64_t v112 = 97;
      }
      uint64_t v113 = 82;
      if ((v109 & 0x20) == 0) {
        uint64_t v113 = 114;
      }
      uint64_t v120 = v113;
      uint64_t v121 = v112;
      uint64_t v114 = 68;
      if ((v109 & 0x10) == 0) {
        uint64_t v114 = 100;
      }
      if ((v109 & 8) != 0) {
        uint64_t v115 = 84;
      }
      else {
        uint64_t v115 = 116;
      }
      uint64_t v119 = v114;
      if ((v109 & 4) != 0) {
        uint64_t v116 = 66;
      }
      else {
        uint64_t v116 = 98;
      }
      if ((v109 & 2) != 0) {
        uint64_t v117 = 67;
      }
      else {
        uint64_t v117 = 99;
      }
      GlCustomLog(15, "        SATAID: %02d  %+10.6lf  %8.6lf  %+9.3f  %8.6lf  %.3f  %c%c%c%c%c%c%c %d\n", v102, v104, v105, v106, v107, v108, v117, v116, v115, v119, v120, v121, vars0, vars8);
    }
    v99 += 96;
    --v100;
  }
  while (v100);
  return BlueFin::GlStackAlloc<BlueFin::GlSatAidInfo>::~GlStackAlloc(&a18);
}

void sub_263947F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BlueFin::GlPeSatAidInfo *BlueFin::GlPeSatAidInfo::GlPeSatAidInfo(BlueFin::GlPeSatAidInfo *this)
{
  unsigned int v2 = (char *)this + 9156;
  BlueFin::GlSatAidInfo::GlSatAidInfo((uint64_t)this + 288);
  uint64_t v3 = *((void *)this + 1137);
  *((void *)this + 114BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBA640;
  *((void *)this + 114BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v3;
  *((void *)this + 1142) = (char *)this + 91;
  *((void *)this + 1143) = this;
  *((_DWORD *)this + 2288) = 96;
  *(_WORD *)unsigned int v2 = -17407;
  uint64_t v4 = 91;
  v2[2] = 91;
  BlueFin::GlArray::Clear((uint64_t)this + 9120);
  *((void *)this + 37) = 0;
  *((_DWORD *)this + 76) = 1226024960;
  *((void *)this + 39) = 0;
  *((void *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1202241536;
  __int16 v5 = (unsigned char *)*((void *)this + 1137);
  do
  {
    *__int16 v5 = 0;
    v5 += 96;
    --v4;
  }
  while (v4);
  return this;
}

uint64_t BlueFin::GlArray::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 37))
  {
    unint64_t v1 = 0;
    do
      *(unsigned char *)(*(void *)(this + 16) + v1++) = -1;
    while (v1 < *(unsigned __int8 *)(this + 37));
  }
  if (*(unsigned char *)(this + 38))
  {
    unint64_t v2 = 0;
    do
    {
      *(unsigned char *)(*(void *)(this + 24) + v2) = v2;
      ++v2;
      unint64_t v3 = *(unsigned __int8 *)(this + 38);
    }
    while (v2 < v3);
    char v4 = v3 - 1;
  }
  else
  {
    char v4 = -1;
  }
  *(unsigned char *)(this + 39) = v4;
  return this;
}

uint64_t BlueFin::GlSatAidInfo::GlSatAidInfo(uint64_t this)
{
  uint64_t v1 = 0;
  *(void *)this = &unk_270EBA388;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 1226024960;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 1202241536;
  *(_DWORD *)(this + 880BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(this + 8808) = this + 64;
  uint64_t v2 = 91;
  do
  {
    uint64_t v3 = *(void *)(this + 8808) + v1;
    *(unsigned char *)uint64_t v3 = 0;
    *(_DWORD *)(v3 + 4) = 7;
    *(unsigned char *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 12) = xmmword_263BA9ED0;
    *(void *)(v3 + 32) = 0;
    *(void *)(v3 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(v3 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(v3 + 88) = 0xBF80000000000000;
    *(void *)(v3 + 64) = 0;
    *(void *)(v3 + 72) = 0;
    v1 += 96;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    --v2;
  }
  while (v2);
  return this;
}

uint64_t BlueFin::GlSatAidInfo::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 880BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a2 + 8800);
  uint64_t v5 = 91;
  do
  {
    BlueFin::GlSatAid::operator=(*(void *)(a1 + 8808) + v4, *(void *)(a2 + 8808) + v4);
    v4 += 96;
    --v5;
  }
  while (v5);
  return a1;
}

float BlueFin::GlSatAid::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  for (uint64_t i = 56; i != 72; i += 4)
  {
    float result = *(float *)(a2 + i);
    *(float *)(a1 + i) = result;
  }
  return result;
}

uint64_t BlueFin::GlPeEngineCallBacks::GetCbOnMemFree(BlueFin::GlPeEngineCallBacks *this)
{
  return *((void *)this + 22);
}

#error "2639482EC: call analysis failed (funcsize=30)"

uint64_t BlueFin::GlDbgMeIf::SetSatAiding(BlueFin::GlDbgMeIf *this, const BlueFin::GlSatAidInfo *a2)
{
  return (*(uint64_t (**)(void, const BlueFin::GlSatAidInfo *))(**((void **)this + 2) + 240))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlReqSm::sendMeSatAiding(BlueFin::GlReqSm *this, const BlueFin::GlSatAidInfo *a2)
{
  BlueFin::GlReqSm::AutoSelectSatForIQDump((uint64_t)this, a2);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(const BlueFin::GlSatAidInfo *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 39) + 240);

  return v4();
}

uint64_t BlueFin::GlReqSm::AutoSelectSatForIQDump(uint64_t this, const BlueFin::GlSatAidInfo *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(this + 54902))
  {
    uint64_t v27 = (unsigned char *)(this + 54902);
    unsigned int v2 = 0;
    uint64_t v28 = *(void *)(this + 6272);
    unsigned int v3 = *(_DWORD *)(v28 + 48);
    uint64_t v4 = this + 33504;
    BOOL v5 = v3 >= 9;
    memset(&v35[80], 0, 44);
    unsigned int v6 = 0x1F4u >> v3;
    int v7 = !v5;
    int v8 = v7 & v6;
    memset(v35, 0, 320);
    memset(v33, 0, 91);
    uint64_t v9 = 91;
    uint64_t v10 = *((void *)a2 + 1101);
    do
    {
      if (*(unsigned char *)v10 && v2 <= 0x5A)
      {
        *((unsigned char *)v33 + v2) = *(unsigned char *)v10;
        v35[v2++] = -*(__int16 *)(v10 + 74);
      }
      v10 += 96;
      --v9;
    }
    while (v9);
    v34[0] = 0;
    uint64_t v11 = v2;
    if (v2 >= 2)
    {
      for (uint64_t i = 1; i != v2; v34[v14] = i++)
      {
        int v13 = v35[i];
        unsigned __int8 v14 = i;
        while (1)
        {
          uint64_t v15 = v34[v14 - 1];
          if (v35[v15] <= v13) {
            break;
          }
          v34[v14--] = v15;
          if (!v14)
          {
            unsigned __int8 v14 = 0;
            break;
          }
        }
      }
    }
    uint64_t v26 = this;
    if (v2)
    {
      int v16 = 0;
      int v17 = 0;
      int v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = v34;
      do
      {
        unsigned int v21 = *v20++;
        unint64_t v22 = *((unsigned __int8 *)v33 + v21);
        LOBYTE(v29) = *((unsigned char *)v33 + v21);
        if (!v8 || BlueFin::GlSettingsImpl::DoesSvSupportBand5(v28, (unsigned __int8 *)&v29))
        {
          if ((v22 - 1) <= 0x1Fu && v19 <= 2)
          {
            *(_DWORD *)(*(void *)v4 + ((v22 >> 3) & 0x1C)) |= 1 << v22;
            ++v19;
            goto LABEL_37;
          }
          if ((v22 - 81) <= 0x34u && v18 == 0)
          {
            int v18 = 1;
            *(_DWORD *)(*(void *)v4 + ((v22 >> 3) & 0x1C)) |= 1 << v22;
LABEL_37:
            if (++v16 == 5) {
              break;
            }
            goto LABEL_38;
          }
          if ((v22 + 117) <= 0x23u && v17 == 0)
          {
            int v17 = 1;
            *(_DWORD *)(*(void *)v4 + 4 * (v22 >> 5)) |= 1 << v22;
            goto LABEL_37;
          }
        }
LABEL_38:
        --v11;
      }
      while (v11);
    }
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v4))
    {
      GlCustomLog(126, "IQDUMP_LIST ");
      LOBYTE(v29) = *(unsigned char *)(v4 + 8);
      memcpy(&v30, *(const void **)v4, 4 * v29);
      WORD1(v29) = 0;
      BYTE1(v29) = 0;
      HIDWORD(v29) = v30;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v29);
      while (BYTE1(v29) != v29)
      {
        GlCustomLog(126, " %3d   ", BYTE2(v29));
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v29);
      }
      GlCustomLog(126, "\n");
      float v29 = &v31;
      LOBYTE(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3;
      uint64_t v31 = 0;
      int v32 = 0;
      this = (*(uint64_t (**)(void))(**(void **)(v26 + 312) + 784))();
      *uint64_t v27 = 0;
    }
    else
    {
      return GlCustomLog(126, "IQDUMP_LIST NO SVs selected\n");
    }
  }
  return this;
}

void *BlueFin::GlStackAlloc<BlueFin::GlSatAidInfo>::~GlStackAlloc(void *a1)
{
  return a1;
}

uint64_t BlueFin::GlDbgMemory::Deallocate(BlueFin::GlDbgMemory *this, void *a2)
{
  return (*(uint64_t (**)(BlueFin::GlDbgMemory *))(BlueFin::GlDbgMemory::m_pInstance + 8))(this);
}

uint64_t BlueFin::GlPeReqBag::AddNewRequest(BlueFin::GlPeReqBag *this, BlueFin::GlRequestImpl *a2, unsigned int a3, unsigned __int16 *a4, BOOL *a5)
{
  uint64_t v36 = (char *)this + 3233;
  char v37 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  if (a5) {
    *a5 = 0;
  }
  int v10 = *((_DWORD *)a2 + 4);
  if (v10 == 6)
  {
    if ((*((unsigned char *)this + 1312) & 0x40) == 0) {
      goto LABEL_10;
    }
  }
  else if ((v10 & 0xFFFFFFFE) != 0xE || (*((unsigned char *)this + 1313) & 0xC0) == 0)
  {
LABEL_10:
    if (*((_DWORD *)this + 813) == -1 && !*((unsigned char *)this + 3236))
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - a3;
      *(void *)uint64_t v38 = (char *)this + 3233;
      unsigned int v38[8] = *((unsigned char *)this + 3233);
      *((unsigned char *)this + 3233) = 0;
      *((_DWORD *)this + 813) = v14;
      do
      {
        uint64_t v15 = *(void *)((char *)this + v13);
        if (v15) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 168))(v15, v14);
        }
        v13 += 8;
      }
      while (v13 != 576);
      **(unsigned char **)uint64_t v38 = v38[8];
    }
    int v16 = 0;
    for (uint64_t i = 0; i != 72; ++i)
    {
      if (!*((void *)this + i))
      {
        uint64_t v19 = *((void *)this + 77);
        uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)v19 + 88);
        if ((*((_DWORD *)a2 + 4) & 0xFFFFFFFE) == 0xE)
        {
          unsigned int v21 = (uint64_t (*)(uint64_t))v20(v19);
          uint64_t v22 = 175712;
          int v23 = 46;
        }
        else
        {
          unsigned int v21 = (uint64_t (*)(uint64_t))v20(v19);
          uint64_t v22 = 512;
          int v23 = 45;
        }
        Memory = BlueFin::GlMemAlloc::glAllocateMemory(v23, v22, v21);
        uint64_t v25 = (uint64_t)Memory;
        if (!Memory)
        {
          DeviceFaultNotify("glpe_reqbag.cpp", 464, "AddNewRequest", (char)"pInPlaceMemBuff != nullptr");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqbag.cpp", 464, "pInPlaceMemBuff != nullptr");
        }
        int v26 = *((unsigned __int16 *)a2 + 12);
        if (v26 == 0xFFFF)
        {
          uint64_t v27 = 0;
          int v26 = *((unsigned __int16 *)this + 1617);
          *((_WORD *)a2 + 12) = v26;
          if (v26 == 95) {
            __int16 v28 = 0;
          }
          else {
            __int16 v28 = v26 + 1;
          }
          *((_WORD *)this + 1617) = v28;
          *(void *)&v38[4] = 0;
          int v39 = 0;
          do
          {
            uint64_t v29 = *(void *)((char *)this + v27);
            if (v29)
            {
              uint64_t v30 = *(void *)(v29 + 8);
              if (v30) {
                *(_DWORD *)&v38[4 * (*(__int16 *)(v30 + 24) >> 5) + 4] |= 1 << *(_WORD *)(v30 + 24);
              }
            }
            v27 += 8;
          }
          while (v27 != 576);
          if (*(_DWORD *)&v38[4] == -1 && *(_DWORD *)&v38[8] == -1 && v39 == -1)
          {
            DeviceFaultNotify("glpe_reqbag.cpp", 475, "AddNewRequest", (char)"!otUsedReqIds.IsFull()");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqbag.cpp", 475, "!otUsedReqIds.IsFull()");
          }
          if (((unint64_t)*(unsigned int *)&v38[4 * (v28 >> 5) + 4] >> (v28 & 0x1F)))
          {
            do
            {
              if ((unsigned __int16)(v28 + 1) == 96) {
                __int16 v28 = 0;
              }
              else {
                ++v28;
              }
            }
            while ((((unint64_t)*(unsigned int *)&v38[4 * (v28 >> 5) + 4] >> (v28 & 0x1F)) & 1) != 0);
            *((_WORD *)this + 1617) = v28;
          }
        }
        switch(*((_DWORD *)a2 + 4))
        {
          case 0:
            if (!*((void *)this + 408)) {
              *((void *)this + 408) = 0;
            }
            v33.n128_f64[0] = BlueFin::GlPeRqHdlrPosPeriodic::GlPeRqHdlrPosPeriodic((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500, 0);
            break;
          case 1:
            BlueFin::GlPeRqHdlrPosSigleShot::GlPeRqHdlrPosSigleShot((uint64_t)Memory, (uint64_t)a2);
            break;
          case 2:
            BlueFin::GlPeRqHdlrMeas::GlPeRqHdlrMeas((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500, (uint64_t)this + 3296);
            float v34 = &unk_270EC5CE8;
            goto LABEL_62;
          case 3:
            BlueFin::GlPeRqHdlrMeas::GlPeRqHdlrMeas((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500, (uint64_t)this + 3296);
            *(void *)uint64_t v25 = &unk_270EC5B60;
            *(unsigned char *)(v25 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
            *(_DWORD *)(v25 + 84) = a3;
            break;
          case 4:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            *(void *)uint64_t v25 = &unk_270EC5110;
            *(void *)(v25 + 76) = 0;
            *(void *)(v25 + 64) = v25 + 76;
            *(unsigned char *)(v25 + 72) = 3;
            *(void *)(v25 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            *(_DWORD *)(v25 + 92) = a3 + 3700000;
            break;
          case 5:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            float v34 = &unk_270EC4F88;
            goto LABEL_62;
          case 6:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            *(void *)uint64_t v25 = &unk_270EC6308;
            *(void *)(v25 + 64) = &unk_270EC6478;
            *(void *)(v25 + 72) = 0;
            v33.n128_u64[0] = 0xFFFFFFFFLL;
            *(void *)(v25 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xFFFFFFFFLL;
            *(_DWORD *)(v25 + 88) = 0;
            *(void *)(v25 + 96) = 0;
            *(void *)(v25 + 104) = a2;
            *(_DWORD *)(v25 + 112) = 0;
            break;
          case 8:
            BlueFin::GlPeRqHdlrFactTest::GlPeRqHdlrFactTest((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500, (uint64_t)this + 13120);
            int v35 = (*((_DWORD *)a2 + 58) >> 25) & 1;
            *((unsigned char *)this + 3256) = (*((_DWORD *)a2 + 58) & 0x2000000) != 0;
            *((unsigned char *)this + 3257) = v35;
            break;
          case 9:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            float v34 = &unk_270EC4E00;
            goto LABEL_62;
          case 0xA:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            float v34 = &unk_270EC5680;
            goto LABEL_62;
          case 0xB:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            float v34 = &unk_270EC5E70;
LABEL_62:
            *(void *)uint64_t v25 = v34;
            break;
          case 0xE:
            BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            *(void *)uint64_t v25 = &unk_270EC59D8;
            memset((void *)(v25 + 7848), 255, 0x2F0uLL);
            bzero((void *)(v25 + 64), 0x1E68uLL);
            bzero((void *)(v25 + 8600), 0xBC0uLL);
            break;
          case 0xF:
            BlueFin::GlPeRqHdlrGnssMeasData::GlPeRqHdlrGnssMeasData((uint64_t)Memory, a2, a3, v26, (uint64_t *)this + 2500);
            break;
          default:
            DeviceFaultNotify("glpe_reqbag.cpp", 568, "AddNewRequest", (char)"0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqbag.cpp", 568, "0");
        }
        (*(void (**)(BlueFin::GlRequestImpl *, uint64_t, __n128))(*(void *)a2 + 136))(a2, 14, v33);
        *((void *)this + i) = v25;
        if (*((_DWORD *)this + 813) != -1) {
          (*(void (**)(uint64_t))(*(void *)v25 + 168))(v25);
        }
        *((_DWORD *)this + 328) |= 1 << *((_WORD *)a2 + 8);
        *(_DWORD *)(*((void *)this + 78) + 4 * (v16 >> 21)) |= 1 << i;
        if (*(unsigned char *)(v25 + 23))
        {
          if (a5) {
            *a5 = 1;
          }
        }
        else
        {
          BlueFin::GlPeRqHdlr::ToSlog(v25);
          BlueFin::GlPeReqBag::DetermineEarliestPositionRequestTimeout((uint64_t)this);
        }
        if (a4) {
          *a4 = *((_WORD *)a2 + 12);
        }
        uint64_t result = 1;
        goto LABEL_72;
      }
      v16 += 0x10000;
    }
    uint64_t v11 = (void (*)(BlueFin::GlRequestImpl *, uint64_t))*((void *)a2 + 5);
    if (!v11) {
      goto LABEL_23;
    }
    uint64_t v12 = 3;
    goto LABEL_22;
  }
  uint64_t v11 = (void (*)(BlueFin::GlRequestImpl *, uint64_t))*((void *)a2 + 5);
  if (v11)
  {
    uint64_t v12 = 4;
LABEL_22:
    v11(a2, v12);
  }
LABEL_23:
  uint64_t result = 0;
LABEL_72:
  *uint64_t v36 = v37;
  return result;
}

void sub_263948FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10, char a11)
{
  *a10 = a11;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeEngineCallBacks::GetCbOnMemAlloc(BlueFin::GlPeEngineCallBacks *this)
{
  return *((void *)this + 21);
}

uint64_t BlueFin::GlPeRqHdlr::ToSlog(uint64_t this)
{
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      uint64_t v1 = this;
      v2[0] = &unk_270EC4D70;
      this = (*(uint64_t (**)(void, void *))(**(void **)(this + 8) + 232))(*(void *)(this + 8), v2);
      int v3 = *(_DWORD *)(v1 + 32);
      if (BlueFin::GlUtils::m_pInstance)
      {
        if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          return (*(uint64_t (**)(void *, void, void))(v2[0] + 24))(v2, 0, 0);
        }
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlr::SetLmsToLiveOsTimer(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

unint64_t BlueFin::GlDineCtrl::SetSatAiding(BlueFin::GlDineCtrl *this, const BlueFin::GlSatAidInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, long long a14, long long a15, uint64_t a16, int *a17, long long a18, long long a19)
{
  uint64_t v19 = MEMORY[0x270FA5388](this, a2);
  unsigned int v21 = v20;
  uint64_t v22 = v19;
  STACK[0x2338] = *MEMORY[0x263EF8340];
  a13 = (char *)&a14 + 4;
  LOBYTE(a14) = 8;
  *(long long *)((char *)&a14 + 4) = 0u;
  *(long long *)((char *)&a15 + 4) = 0u;
  int v23 = (unsigned __int8 *)*((void *)v20 + 1101);
  uint64_t v24 = 91;
  do
  {
    unsigned int v26 = *v23;
    v23 += 96;
    unint64_t v25 = v26;
    if (v26) {
      *(_DWORD *)((char *)&a14 + ((v25 >> 3) & 0x1C) + 4) |= 1 << v25;
    }
    --v24;
  }
  while (v24);
  BlueFin::GlMeSrdAidingMgr::GetAidIdSvIdSet(v19 + 49776, (uint64_t)&vars0);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v49, (unsigned int *)v51, 8u, (const void **)&a13);
  a17 = (int *)&a18 + 1;
  LOBYTE(a18) = 8;
  *(long long *)((char *)&a18 + 4) = 0u;
  *(long long *)((char *)&a19 + 4) = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v49, &a17, &vars0);
  BlueFin::GlSetBase::operator=((uint64_t)&v49, (uint64_t)&a17);
  unsigned int v27 = 0;
  v51[0] = *(long long *)((char *)&a18 + 4);
  v51[1] = *(long long *)((char *)&a19 + 4);
  __int16 v28 = &vars0[vars8 - 1];
  do
  {
    if (*v28)
    {
      unsigned int v29 = *v28 - (((*v28 >> 1) & 0x5B6DB6DB) + ((*v28 >> 2) & 0x9249249));
      unsigned int v27 = ((v29 + (v29 >> 3)) & 0xC71C71C7) + v27 - 63 * (((v29 + (v29 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v28;
  }
  while (v28 >= vars0);
  unsigned int v30 = 0;
  uint64_t v31 = (_DWORD *)(v49 + 4 * v50 - 4);
  do
  {
    if (*v31)
    {
      unsigned int v32 = *v31 - (((*v31 >> 1) & 0x5B6DB6DB) + ((*v31 >> 2) & 0x9249249));
      unsigned int v30 = ((v32 + (v32 >> 3)) & 0xC71C71C7) + v30 - 63 * (((v32 + (v32 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v31;
  }
  while ((unint64_t)v31 >= v49);
  unsigned int v33 = 0;
  char v34 = v30 - v27;
  int v35 = &a13[4 * a14 - 4];
  do
  {
    if (*(_DWORD *)v35)
    {
      unsigned int v36 = *(_DWORD *)v35 - (((*(_DWORD *)v35 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v35 >> 2) & 0x9249249));
      unsigned int v33 = ((v36 + (v36 >> 3)) & 0xC71C71C7) + v33 - 63 * (((v36 + (v36 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v35 -= 4;
  }
  while (v35 >= a13);
  signed int v37 = (v34 + 91);
  if (v37 >= v33)
  {
    (*(void (**)(uint64_t, const BlueFin::GlSatAidInfo *))(*(void *)(v22 + 29560) + 24))(v22 + 29560, v21);
    return BlueFin::GlMeSrdCtrlSm::SetSatAiding((BlueFin::GlMeSrdCtrlSm *)(v22 + 75168), v21);
  }
  else
  {
    BlueFin::GlSatAidInfo::GlSatAidInfo((BlueFin::GlSatAidInfo *)&a17, v21);
    uint64_t v38 = 0;
    int v39 = 0;
    uint64_t v40 = 91;
    do
    {
      if (v39 < v37)
      {
        uint64_t v41 = (unsigned char *)(*((void *)v21 + 1101) + v38);
        if (*v41)
        {
          if (((unint64_t)*(unsigned int *)(v49 + (((unint64_t)*v41 >> 3) & 0x1C)) >> (*v41 & 0x1F))) {
            BlueFin::GlSatAid::operator=(STACK[0x2308] + 96 * v39++, (uint64_t)v41);
          }
        }
      }
      v38 += 96;
      --v40;
    }
    while (v40);
    uint64_t v42 = 0;
    uint64_t v43 = 91;
    do
    {
      if (v39 < v37)
      {
        uint64_t v44 = (unsigned char *)(*((void *)v21 + 1101) + v42);
        if (*v44)
        {
          if ((((unint64_t)*(unsigned int *)(v49 + (((unint64_t)*v44 >> 3) & 0x1C)) >> (*v44 & 0x1F)) & 1) == 0) {
            BlueFin::GlSatAid::operator=(STACK[0x2308] + 96 * v39++, (uint64_t)v44);
          }
        }
      }
      v42 += 96;
      --v43;
    }
    while (v43);
    if (v39 <= 90)
    {
      uint64_t v45 = v39 + 1;
      uint64_t v46 = (unsigned char *)(STACK[0x2308] + 96 * v39);
      do
      {
        *uint64_t v46 = 0;
        v46 += 96;
      }
      while (v45++ != 91);
    }
    (*(void (**)(uint64_t, int **))(*(void *)(v22 + 29560) + 24))(v22 + 29560, &a17);
    return BlueFin::GlMeSrdCtrlSm::SetSatAiding((BlueFin::GlMeSrdCtrlSm *)(v22 + 75168), (const BlueFin::GlSatAidInfo *)&a17);
  }
}

BlueFin::GlMeClkModMgr *BlueFin::GlMeAidingListener::SetSatAiding(BlueFin::GlMeAidingListener *this, const BlueFin::GlSatAidInfo *a2)
{
  return BlueFin::GlMeWinMgr::SetSatAidInfo((BlueFin::GlMeWinMgr *)(*((void *)this + 1) + 32), a2);
}

uint64_t BlueFin::GlMeSrdAidingMgr::GetAidIdSvIdSet@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  uint64_t v4 = this + 2632;
  unsigned __int16 v5 = *(_WORD *)(this + 2666) + 1;
  if (*(unsigned __int16 *)(this + 2664) > v5)
  {
    do
    {
      this = BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v4, (uint64_t)v3);
      *(_DWORD *)(*(void *)a2 + (((unint64_t)v3[0] >> 3) & 0x1C)) |= 1 << v3[0];
    }
    while (v5 < *(unsigned __int16 *)(v4 + 32));
  }
  return this;
}

unint64_t BlueFin::GlMeSrdCtrlSm::SetSatAiding(BlueFin::GlMeSrdCtrlSm *this, const BlueFin::GlSatAidInfo *a2)
{
  __int16 v5 = 29;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v5);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v3;
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdCtrlSm::wait4loading(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  uint64_t v4 = BlueFin::GlMeSrdCtrlSm::my_top;
  if (v3 > 0xC)
  {
    if (v3 == 13)
    {
      if (a2[1])
      {
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 1497, "wait4loading", (char)"PARAM_ACK_WAIT4LOADING == e->par");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 1497, "PARAM_ACK_WAIT4LOADING == e->par");
      }
      if (*(unsigned char *)(a1 + 221))
      {
        __int16 v5 = "&GlMeSrdCtrlSm::wait4standby";
        unint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4standby;
      }
      else
      {
        __int16 v5 = "&GlMeSrdCtrlSm::idle";
        unint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::idle;
      }
    }
    else
    {
      if (v3 != 21)
      {
        if (v3 == 25)
        {
          uint64_t v4 = 0;
          *(unsigned char *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        }
        return v4;
      }
      __int16 v5 = "&GlMeSrdCtrlSm::wait4memdump";
      unint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4memdump;
    }
    BlueFin::QHsm::tran((void *)a1, v6, (uint64_t)v5);
    return 0;
  }
  if (v3 == 2)
  {
    if (*(unsigned char *)(*(void *)(a1 + 136) + 2136)) {
      BlueFin::GlQueue::putLIFO((BlueFin::GlQueue *)(a1 + 2600), 40, 2);
    }
    uint64_t v7 = *(void *)(a1 + 120);
    if (!v7) {
      uint64_t v7 = *(void *)(a1 + 112);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 168))(v7, a1 + 3904);
    uint64_t v8 = *(void *)(a1 + 120);
    if (!v8) {
      uint64_t v8 = *(void *)(a1 + 112);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 152))(v8, a1 + 4096);
    uint64_t v9 = *(void *)(a1 + 120);
    if (!v9) {
      uint64_t v9 = *(void *)(a1 + 112);
    }
    (***(void (****)(void, uint64_t, void))(a1 + 168))(*(void *)(a1 + 168), v9, *(void *)(a1 + 136));
    uint64_t v10 = *(void *)(a1 + 120);
    if (!v10) {
      uint64_t v10 = *(void *)(a1 + 112);
    }
    (*(void (**)(void, uint64_t, void, unint64_t (*)(BlueFin::GlMeSrdCtrlSm *, void *), uint64_t))(**(void **)(a1 + 168) + 8))(*(void *)(a1 + 168), v10, *(void *)(a1 + 136), BlueFin::GlMeSrdCtrlSm::ReceiverParameterProgrammed, a1);
    uint64_t v11 = *(void *)(a1 + 120);
    if (!v11) {
      uint64_t v11 = *(void *)(a1 + 112);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(v11);
    v23[0] = 0;
    v23[1] = 0;
    char v24 = 0;
    __int16 v25 = 1;
    uint64_t v26 = v12;
    int v27 = 0;
    __int16 v28 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, 1);
    v18[0] = 8;
    uint64_t v19 = 0;
    int v20 = 0;
    __int16 v22 = 0;
    v21[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 608))();
    uint64_t v13 = *(unsigned char **)(a1 + 136);
    if (v13[1176])
    {
      v18[0] = v13[1179];
      unsigned int v14 = v13[1180];
      if (!v14) {
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v14 = 25;
    }
    (*(void (**)(void, uint64_t *, __int16 *, unsigned char *, float))(**(void **)(a1 + 168) + 80))(*(void *)(a1 + 168), &v19, &v22, v21, (float)v14);
LABEL_30:
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 48))(v26);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
    (*(void (**)(uint64_t, void *, char *))(*(void *)v16 + 40))(v16, v23, v18);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v23);
    if (*(unsigned char *)(a1 + 34518)) {
      BlueFin::GlMeSrdMeasTimingMgr::SetLimitMaxRfOnTime((BlueFin::GlMeSrdMeasTimingMgr *)(a1 + 3072), *(unsigned __int8 *)(a1 + 34519), *(_WORD *)(a1 + 34520));
    }
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v23);
    return 0;
  }
  if (v3 == 3)
  {
    uint64_t v4 = 0;
    *(unsigned char *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  }
  return v4;
}

void sub_263949A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

BlueFin::GlMeClkModMgr *BlueFin::GlMeWinMgr::SetSatAidInfo(BlueFin::GlMeWinMgr *this, const BlueFin::GlSatAidInfo *a2)
{
  BlueFin::GlMeSatAidMgr::SetSatAidInfo((BlueFin::GlMeWinMgr *)((char *)this + 320), a2);
  unint64_t result = (BlueFin::GlMeClkModMgr *)BlueFin::GlSetBase::Cnt((BlueFin::GlMeWinMgr *)((char *)this + 9248));
  *((unsigned char *)this + 9858) = (_BYTE)result;
  unsigned int v5 = *((_DWORD *)a2 + 9);
  if (v5)
  {
    uint64_t v13 = &unk_270EBF258;
    uint64_t v14 = 0;
    uint64_t v15 = 0x36A7C5AC00000000;
    SubBitAndEpoch__n128 Time = 0.0;
    float v17 = 3.4028e38;
    double v18 = 0.0;
    int v19 = 2139095039;
    uint64_t v20 = 0;
    uint64_t v21 = 0x36A7C5AC7F7FFFFFLL;
    double v12 = *((double *)a2 + 1) - (double)v5 * 0.001;
    v9[0] = 1;
    int v10 = 0;
    __int16 v11 = 0;
    SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v12, (const BlueFin::GlSignalId *)v9, 1u);
    HIDWORD(v14) = *((_DWORD *)a2 + 9);
    float v17 = *((float *)a2 + 4);
    double v12 = *((double *)a2 + 3) - (double)HIDWORD(v14) * 0.001;
    v9[0] = 52;
    int v10 = 0;
    __int16 v11 = 147;
    double v18 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v12, (const BlueFin::GlSignalId *)v9, 1u);
    int v6 = *((_DWORD *)a2 + 9);
    HIDWORD(v14) = v6;
    float v7 = *((float *)a2 + 8);
    int v19 = LODWORD(v7);
    if (v17 < 0.001) {
      LODWORD(v14) = v14 | 2;
    }
    if (v17 < 0.0005) {
      LODWORD(v14) = v14 | 4;
    }
    if (v17 < 0.00015152) {
      LODWORD(v14) = v14 | 8;
    }
    if (v7 < 0.001) {
      LODWORD(v14) = v14 | 0x20;
    }
    if (v7 < 0.0005) {
      LODWORD(v14) = v14 | 0x80;
    }
    if (v7 < 0.00030333) {
      LODWORD(v14) = v14 | 0x100;
    }
    if (v7 < 10.0)
    {
      int v8 = v14;
      if ((v14 & 0x22) == 2)
      {
        int v8 = v14 | 0x20;
        LODWORD(v14) = v14 | 0x20;
        int v19 = 973279855;
      }
      if ((v8 & 0x108) == 8)
      {
        v8 |= 0x100u;
        LODWORD(v14) = v8;
        int v19 = 973279855;
      }
      if ((v8 & 0x22) == 0x20)
      {
        v8 |= 2u;
        LODWORD(v14) = v8;
        float v17 = 0.0005;
      }
      if ((v8 & 0x108) == 0x100)
      {
        LODWORD(v14) = v8 | 8;
        float v17 = 0.0005;
      }
    }
    return BlueFin::GlMeClkModMgr::SetClkModFromPe((BlueFin::GlMeWinMgr *)((char *)this + 144), v6, (BlueFin::GlMeClkMod *)&v13);
  }
  return result;
}

BlueFin::GlMeClkModMgr *BlueFin::GlMeClkModMgr::SetClkModFromPe(BlueFin::GlMeClkModMgr *this, int a2, BlueFin::GlMeClkMod *a3)
{
  uint64_t v4 = this;
  int v5 = *((_DWORD *)a3 + 2);
  if ((v5 & 0x10) != 0)
  {
    *((_DWORD *)a3 + 2) = v5 & 0xFFFFFED5;
    this = (BlueFin::GlMeClkModMgr *)BlueFin::GlMeClkModMgr::SetClkMod(this, a3, 0);
    if (*((float *)a3 + 5) <= 0.000000025) {
      *((unsigned char *)v4 + 96) = 1;
    }
    *((_DWORD *)v4 + 25) = a2;
  }
  else if ((v5 & 0x12A) != 0)
  {
    *((_DWORD *)a3 + 2) = v5 & 0xFFFFFFEF;
    return (BlueFin::GlMeClkModMgr *)BlueFin::GlMeClkModMgr::SetClkMod(this, a3, 0);
  }
  return this;
}

uint64_t BlueFin::GlMeSatAidMgr::SetSatAidInfo(BlueFin::GlMeSatAidMgr *this, const BlueFin::GlSatAidInfo *a2)
{
  BlueFin::GlMeMeasSelfAidFilter::SetSatAidInfo(a2, a2);
  uint64_t v4 = (char *)*((void *)this + 1116);
  bzero(v4, ((4 * *((unsigned __int8 *)this + 8936) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  int v5 = (unsigned __int8 *)*((void *)a2 + 1101);
  uint64_t v6 = 91;
  do
  {
    if (*v5 && (~*((_DWORD *)v5 + 6) & 0x12) == 0) {
      *(_DWORD *)&v4[((unint64_t)*v5 >> 3) & 0x1C] |= 1 << *v5;
    }
    v5 += 96;
    --v6;
  }
  while (v6);

  return BlueFin::GlSatAidInfo::operator=((uint64_t)this, (uint64_t)a2);
}

void BlueFin::GlMeMeasSelfAidFilter::SetSatAidInfo(BlueFin::GlMeMeasSelfAidFilter *this, const BlueFin::GlSatAidInfo *a2)
{
  bzero(BlueFin::GlMeMeasSelfAidFilter::m_otPeAidSigLst, ((4 * byte_26B433B78 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  unsigned int v3 = BlueFin::GlMeMeasSelfAidFilter::m_otPeAidSigLst;
  uint64_t v4 = *((void *)this + 1101) + 12;
  uint64_t v5 = BlueFin::GlMeMeasSelfAidFilter::m_otSelfAidSigLst;
  uint64_t v6 = 91;
  do
  {
    uint64_t v7 = *(unsigned __int8 *)(v4 - 12);
    if (*(unsigned char *)(v4 - 12) && (*(unsigned char *)(v4 + 12) & 0x10) != 0)
    {
      unsigned int v8 = (v7 + 67);
      if (*(_DWORD *)v4 == 6)
      {
        if (v8 < 0x44
          || (uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss[v7],
              int v10 = (_DWORD *)v5,
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v9] == 255))
        {
          __int16 v11 = 575;
          int v10 = (_DWORD *)v5;
LABEL_12:
          v10[v11 >> 5] |= 1 << v11;
          goto LABEL_13;
        }
      }
      else if (v8 < 0x44 {
             || (uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss[v7],
      }
                 int v10 = v3,
                 BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v9] == 255))
      {
        __int16 v11 = 575;
        int v10 = v3;
        goto LABEL_12;
      }
      __int16 v11 = BlueFin::GlSignalId::s_ausGnss2signalId[v9] + v7 - BlueFin::GlSvId::s_aucGnss2minSvId[v9];
      goto LABEL_12;
    }
LABEL_13:
    v4 += 96;
    --v6;
  }
  while (v6);
}

uint64_t BlueFin::GlPeRqHdlr::GlPeRqHdlr(uint64_t a1, _DWORD *a2, int a3, int a4, uint64_t *a5)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_270EC4BF0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a3;
  *(void *)(a1 + 36) = 0x3E80000FFFFFFFFLL;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = a5;
  int v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__s = 0u;
  long long v10 = 0u;
  BlueFin::GlPeNmeaGen::FormatNmeaNEW(*a5, a2, a4, (BlueFin::GlFormat *)__s, 100, (int *)(a5[11] + 54608), (int *)(*(void *)(a5[11] + 6336) + 11920), *(_DWORD *)(*(void *)(a5[11] + 6440) + 36));
  GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(a1 + 48), __s);
  __int16 v6 = strlen(__s);
  BlueFin::GlPeRqHdlr::OnNmea((BlueFin::GlPeRqHdlr *)a1, __s, v6, v7);
  return a1;
}

unint64_t BlueFin::GlRequestImplSyncin::Print(unint64_t this, unsigned __int8 a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        uint64_t v5 = 76;
        if (!*(void *)(v3 + 96)) {
          uint64_t v5 = 108;
        }
        uint64_t v6 = 68;
        if (!*(void *)(v3 + 80)) {
          uint64_t v6 = 100;
        }
        uint64_t v7 = 89;
        if (!*(void *)(v3 + 88)) {
          uint64_t v7 = 121;
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v8, (char *)0x32, "cbSync(%c%c%c) %hds", v4, v7, v6, v5, *(__int16 *)(v3 + 22));
        return BlueFin::GlRequestImplNmea::Print(v3, a2, v8);
      }
    }
  }
  return this;
}

BlueFin::GlPePlatfStatMgr *BlueFin::GlPePlatfStatMgr::GlPePlatfStatMgr(BlueFin::GlPePlatfStatMgr *this)
{
  *(_OWORD *)((char *)this + 77) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_WORD *)this + 84) = -180;
  *((_DWORD *)this + 48) = 0;
  *((unsigned char *)this + 196) = 0;
  *(_DWORD *)((char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 174) = 0;
  *((void *)this + 22) = 0;
  *(void *)((char *)this + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_OWORD *)((char *)this + 236) = 0u;
  unsigned int v2 = (char *)this + 236;
  *((_DWORD *)this + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1148829696;
  *(_OWORD *)((char *)this + 204) = xmmword_263BBCFE0;
  *(void *)((char *)this + 332) = 0;
  *(void *)((char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 225) = 0;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 313) = 0u;
  *((unsigned char *)this + 512) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 404) = 0u;
  *((void *)this + 63) = 0;
  *((unsigned char *)this + 432) = 0;
  *((void *)this + 53) = 0;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_OWORD *)((char *)this + 468) = 0u;
  *(_OWORD *)((char *)this + 452) = 0u;
  *(_OWORD *)((char *)this + 436) = 0u;
  bzero((char *)this + 516, 0x275uLL);
  uint64_t v3 = 0;
  *((void *)v2 + 124) = 0;
  *((_OWORD *)v2 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)v2 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)v2 + 58) = 0u;
  *((_OWORD *)v2 + 59) = 0u;
  *((_OWORD *)v2 + 57) = 0u;
  *(void *)(v2 + 1004) = 0;
  *((_DWORD *)v2 + 253) = 60000;
  *(void *)(v2 + 102BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v2 + 1032;
  v2[1028] = 8;
  *(void *)(v2 + 1068) = 0;
  *((_WORD *)v2 + 538) = 0;
  *(_OWORD *)(v2 + 1084) = 0u;
  *(void *)(v2 + 110BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3240099840;
  *((_DWORD *)v2 + 277) = 0;
  *(void *)(v2 + 1116) = -1;
  *(void *)(v2 + 1124) = -1;
  *((_DWORD *)v2 + 283) = 0;
  *(_OWORD *)(v2 + 1048) = 0u;
  *(_OWORD *)(v2 + 1032) = 0u;
  uint64_t v4 = BlueFin::GlUtils::m_pInstance;
  *((_DWORD *)v2 + 278) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  while (1)
  {
    uint64_t v5 = v4 + v3;
    uint64_t v6 = *(_DWORD *(**)(_DWORD *, void *, const char *))(v4 + v3 + 1248);
    if (!v6 || v6 == BlueFin::GlPePlatfStatMgr::ReportStatic && *(BlueFin::GlPePlatfStatMgr **)(v4 + v3 + 1408) == this) {
      break;
    }
    v3 += 8;
    if (v3 == 160) {
      return this;
    }
  }
  *(void *)(v5 + 1248) = BlueFin::GlPePlatfStatMgr::ReportStatic;
  *(void *)(v5 + 1408) = this;
  return this;
}

BlueFin::GlPePwrStateMgr *BlueFin::GlPePwrStateMgr::GlPePwrStateMgr(BlueFin::GlPePwrStateMgr *this, unsigned int a2, BlueFin::GlEventPump *a3, const BlueFin::GlPeKF *a4, BlueFin::GlReqSm *a5)
{
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 2) = "STARTING";
  *((void *)this + 3) = "OFF";
  *((void *)this + 4) = 0;
  *((_WORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  *(void *)this = &unk_270EC4B40;
  *((void *)this + 14) = a3;
  *((void *)this + 15) = a5;
  *((void *)this + 18) = (char *)this + 128;
  *((void *)this + 19) = a4;
  *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)this + 172;
  *((unsigned char *)this + 168) = 8;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *((_DWORD *)this + 52) = 0;
  *((_WORD *)this + 106) = 1;
  *(void *)((char *)this + 228) = 0;
  *((void *)this + 27) = (char *)this + 228;
  *((unsigned char *)this + 224) = 3;
  *((_DWORD *)this + 63) = 0;
  *(_DWORD *)((char *)this + 255) = 0;
  *(void *)((char *)this + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 265) = 0;
  *(void *)((char *)this + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)((char *)this + 236) = 0;
  *((unsigned char *)this + 273) = 1;
  *(_DWORD *)((char *)this + 274) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  BlueFin::QHsm::ctor((uint64_t)this, (uint64_t)BlueFin::GlPePwrStateMgr::initial);
  uint64_t v6 = *((void *)this + 18);
  *((unsigned char *)this + 88) = 1;
  *((void *)this + 6) = v6;
  *((void *)this + 7) = v6 + 16;
  *((void *)this + 8) = v6;
  *((void *)this + 9) = v6;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000008;
  *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init((uint64_t)this, 0);
  BlueFin::GlEventPump::AddActive(*((void *)this + 14), this);
  return this;
}

BlueFin::GlPePendingBag *BlueFin::GlPePendingBag::GlPePendingBag(BlueFin::GlPePendingBag *this)
{
  uint64_t v2 = 0;
  *(_WORD *)this = 112;
  *(_OWORD *)((char *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 33) = (char *)this + 96;
  do
  {
    uint64_t v3 = *((void *)this + 33) + v2;
    *(void *)(v3 + 12) = 0;
    *(void *)uint64_t v3 = v3 + 12;
    *(unsigned char *)(v3 + 8) = 2;
    v2 += 24;
  }
  while (v2 != 168);
  *(void *)((char *)this + 396) = 0;
  *((void *)this + 48) = (char *)this + 396;
  *((unsigned char *)this + 392) = 3;
  *((_DWORD *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)((char *)this + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 420;
  *((unsigned char *)this + 416) = 3;
  *((_DWORD *)this + 107) = 0;
  *(void *)((char *)this + 444) = 0;
  *((void *)this + 54) = (char *)this + 444;
  *((unsigned char *)this + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3;
  *((_DWORD *)this + 113) = 0;
  *(_OWORD *)((char *)this + 2068) = 0u;
  BlueFin::GlPeAsstPosReqDataFifo::GlPeAsstPosReqDataFifo((uint64_t)this + 2112);
  *((_DWORD *)this + 895) = 0;
  *((void *)this + 448) = 0xFF9222FF00000000;
  *((_OWORD *)this + 198) = 0u;
  *((_DWORD *)this + 796) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  bzero((char *)this + 456, 0x64CuLL);
  *(_OWORD *)((char *)this + 3252) = 0u;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 324BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *(_OWORD *)((char *)this + 332BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 340BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3416) = 0u;
  *(_OWORD *)((char *)this + 3432) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *(_OWORD *)((char *)this + 348BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 3496) = 0u;
  *(_OWORD *)((char *)this + 3512) = 0u;
  *(_OWORD *)((char *)this + 3528) = 0u;
  *(_OWORD *)((char *)this + 3544) = 0u;
  *(_OWORD *)((char *)this + 356BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((unsigned char *)this + 3576) = 0;
  *((unsigned char *)this + 3624) = 0;
  *(_OWORD *)((char *)this + 3592) = 0u;
  *(_OWORD *)((char *)this + 3608) = 0u;
  *((_OWORD *)this + 227) = 0u;
  *((_OWORD *)this + 228) = 0u;
  *((_OWORD *)this + 229) = 0u;
  *((_OWORD *)this + 23BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_OWORD *)this + 23BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *((_OWORD *)this + 232) = 0u;
  *((_OWORD *)this + 233) = 0u;
  *((_OWORD *)this + 234) = 0u;
  *(_OWORD *)((char *)this + 3754) = 0u;
  bzero((char *)this + 3776, 0x244uLL);
  return this;
}

uint64_t BlueFin::GlPeAsstPosReqDataFifo::GlPeAsstPosReqDataFifo(uint64_t this)
{
  uint64_t v1 = 0;
  *(void *)(this + 1024) = this;
  *(unsigned char *)(this + 1032) = 0;
  do
  {
    uint64_t v2 = *(void *)(this + 1024) + v1;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_DWORD *)(v2 + 48) = -1;
    *(unsigned char *)(v2 + 52) = 0;
    *(_DWORD *)(v2 + 56) = 0;
    *(_OWORD *)uint64_t v2 = 0uLL;
    *(_OWORD *)(v2 + 16) = 0uLL;
    v1 += 64;
  }
  while (v1 != 1024);
  return this;
}

BlueFin::GlPeNmeaGen *BlueFin::GlPeNmeaGen::GlPeNmeaGen(BlueFin::GlPeNmeaGen *this, BlueFin::GlSettingsImpl *a2, BlueFin::GlPeTimeManager *a3)
{
  uint64_t v4 = 0;
  *((void *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (char *)this + 32;
  *((void *)this + 194) = (char *)this + 352;
  *((void *)this + 217) = (char *)this + 1568;
  do
  {
    uint64_t v5 = *((void *)this + 217) + v4;
    *(void *)(v5 + 12) = 0;
    *(void *)uint64_t v5 = v5 + 12;
    *(unsigned char *)(v5 + 8) = 2;
    v4 += 24;
  }
  while (v4 != 168);
  unsigned int v6 = 0;
  uint64_t v7 = 0;
  *((void *)this + 229) = a2;
  *((void *)this + 23BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(_OWORD *)((char *)this + 1767) = 0u;
  *(_OWORD *)((char *)this + 1783) = 0u;
  *(_OWORD *)((char *)this + 1799) = 0u;
  *(_OWORD *)((char *)this + 1815) = 0u;
  *(_DWORD *)this = 1;
  *((_DWORD *)this + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)((char *)this + 1763) = 0;
  memset((char *)this + 1848, 248, 24);
  *((unsigned char *)this + 4) = 0;
  *((_WORD *)this + 164) = 0;
  *((unsigned char *)this + 33BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_WORD *)this + 936) = 0;
  do
  {
    BlueFin::GlPeNmeaGsvSatsNum::GlPeNmeaGsvSatsNum(*((void *)this + 40) + v7, v6);
    v7 += 48;
    ++v6;
  }
  while (v7 != 288);
  uint64_t v8 = 0;
  uint64_t v9 = *((void *)this + 194);
  do
  {
    uint64_t v10 = v9 + v8;
    *(_DWORD *)uint64_t v10 = 8;
    *(unsigned char *)(v10 + 4) = 0;
    *(_DWORD *)(v10 + 8) = 0;
    v8 += 12;
  }
  while (v8 != 1200);
  return this;
}

uint64_t BlueFin::GlPeNmeaGsvSatsNum::GlPeNmeaGsvSatsNum(uint64_t result, unsigned int a2)
{
  *(void *)(result + 24) = result + 36;
  *(unsigned char *)(result + 32) = 2;
  *(_DWORD *)(result + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 7;
  if (a2 <= 5) {
    *(_DWORD *)(result + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = dword_263BBCFC8[a2];
  }
  *(_DWORD *)(result + 16) = 0;
  *(void *)unint64_t result = 0;
  *(void *)(result + 7) = 0;
  *(void *)(result + 36) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterRmRpt(uint64_t result, uint64_t a2)
{
  if (!a2 || *(void *)(result + 17080))
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 286, "RegisterRmRpt", (char)"m_pRmRptIf == nullptr && pRmRptIf != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 286, "m_pRmRptIf == nullptr && pRmRptIf != nullptr");
  }
  *(void *)(result + 1708BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return result;
}

double BlueFin::GlPeRqHdlrPosPeriodic::GlPeRqHdlrPosPeriodic(uint64_t a1, _DWORD *a2, int a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8 = BlueFin::GlPeRqHdlr::GlPeRqHdlr(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_270EC5FF8;
  *(unsigned char *)(v8 + 64) = 0;
  *(void *)(v8 + 76) = 0;
  *(void *)(v8 + 68) = 0;
  *(_DWORD *)(v8 + 84) = a3;
  *(void *)&double result = 0x19000000000;
  *(void *)(v8 + 88) = 0x19000000000;
  *(_DWORD *)(v8 + 96) = 0;
  *(_DWORD *)(v8 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(_DWORD *)(v8 + 104) = -1;
  *(_WORD *)(v8 + 108) = 0;
  *(_DWORD *)(v8 + 112) = 50;
  *(_DWORD *)(v8 + 172) = 0;
  *(void *)(v8 + 152) = 0;
  *(void *)(v8 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v8 + 168) = 0;
  *(void *)(v8 + 176) = a6;
  *(void *)(v8 + 136) = 0;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 128) = 0;
  *(_DWORD *)(v8 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -7200001;
  return result;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_tm_set_suspend_limits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU32(v9, *(_DWORD *)(a3 + 4));
  BlueFin::GlStream::PutU32(v9, *(_DWORD *)(a3 + 8));
  BlueFin::GlStream::PutU32(v9, *(_DWORD *)(a3 + 12));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)a3);
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 16));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 18));
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 4, 3u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 466, "esw_jd_rpc_tm_set_suspend_limits", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 466, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_Search(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  *(void *)&v65[2611] = *MEMORY[0x263EF8340];
  char U08 = BlueFin::GlStream::GetU08(a2);
  int v58 = 16843009;
  if (U08 < 0)
  {
    unsigned __int8 v46 = 1;
    int v4 = 1;
  }
  else
  {
    int v4 = BlueFin::GlStream::GetU08(a2);
    LOBYTE(v58) = v4;
    unsigned __int8 v46 = BlueFin::GlStream::GetU08(a2);
    BYTE2(v58) = v46;
  }
  char v43 = U08;
  unint64_t v5 = 0;
  int v6 = 0;
  char v60 = BlueFin::GlStream::GetU08(a2);
  uint64_t v7 = v63;
  uint64_t v8 = v64;
  uint64_t v9 = &v65[1];
  int v55 = v65;
  uint64_t v56 = 32;
  LOBYTE(v49) = 1;
  char v45 = 1;
  do
  {
    char v52 = v9;
    uint64_t v10 = &v62[108 * v5];
    unsigned int U16 = BlueFin::GlStream::GetU16(a2);
    char v12 = U16;
    BOOL *v10 = (U16 & 2) != 0;
    if (!v5) {
      int v6 = (U16 >> 9) & 1;
    }
    int v13 = (U16 >> 4) & 3;
    if ((U16 & 0x40) != 0) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if ((U16 & 0x100) != 0) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v14;
    }
    v10[1] = v15;
    uint64_t v54 = v8;
    int v51 = (U16 >> 4) & 3;
    char v48 = v10 + 88;
    int v53 = (U16 >> 1) & 1;
    if ((U16 & 0x20) != 0)
    {
      if (!v5)
      {
        if (v4 >= 0xB0u)
        {
          uint64_t v41 = "search_info.number_of_bit_phases <= MAX_SRCH_BIT_PHASES";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1548, "Handle_SatRpt_Search", (char)"search_info.number_of_bit_phases <= MAX_SRCH_BIT_PHASES");
          int v42 = 1548;
          goto LABEL_61;
        }
        if ((v46 & 0xFu) > (v4 & 0xFu))
        {
          uint64_t v41 = "search_info.peak_bin_id <= search_info.number_of_bins";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1549, "Handle_SatRpt_Search", (char)"search_info.peak_bin_id <= search_info.number_of_bins");
          int v42 = 1549;
          goto LABEL_61;
        }
        unsigned int v49 = v4 >> 4;
        if (v46 >> 4 > v49)
        {
          uint64_t v41 = "search_info.peak_bit_phase_id <= search_info.number_of_bit_phases";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1550, "Handle_SatRpt_Search", (char)"search_info.peak_bit_phase_id <= search_info.number_of_bit_phases");
          int v42 = 1550;
          goto LABEL_61;
        }
        char v45 = v46 >> 4;
        v46 &= 0xFu;
        v4 &= 0xFu;
      }
      unsigned int v19 = BlueFin::GlStream::GetU08(a2);
      uint64_t v20 = &v62[108 * v5];
      v20[5] = v19 >> 4;
      uint64_t v20[4] = v19 & 0xF;
      if ((v19 & 0xF) > v4)
      {
        uint64_t v41 = "satrpt_search[corvec_id].bin_id <= search_info.number_of_bins";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1555, "Handle_SatRpt_Search", (char)"satrpt_search[corvec_id].bin_id <= search_info.number_of_bins");
        int v42 = 1555;
        goto LABEL_61;
      }
      int v16 = v6;
      if (v19 >> 4 > v49)
      {
        uint64_t v41 = "satrpt_search[corvec_id].bit_phase_id <= search_info.number_of_bit_phases";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1556, "Handle_SatRpt_Search", (char)"satrpt_search[corvec_id].bit_phase_id <= search_info.number_of_bit_phases");
        int v42 = 1556;
        goto LABEL_61;
      }
    }
    else
    {
      int v16 = v6;
      if (v13)
      {
        if (v13 == 1)
        {
          unsigned int v17 = BlueFin::GlStream::GetU08(a2);
          double v18 = &v62[108 * v5];
          char v18[4] = v17;
          v18[5] = 1;
          if (v17 > v4)
          {
            uint64_t v41 = "satrpt_search[corvec_id].bin_id <= search_info.number_of_bins";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1562, "Handle_SatRpt_Search", (char)"satrpt_search[corvec_id].bin_id <= search_info.number_of_bins");
            int v42 = 1562;
            goto LABEL_61;
          }
        }
      }
      else
      {
        *(_WORD *)&v62[108 * v5 + 4] = 257;
      }
    }
    int v50 = v4;
    char v47 = v12;
    *((_WORD *)v10 + 4) = BlueFin::GlStream::GetU16(a2);
    uint64_t v21 = (uint32x2_t *)&v62[108 * v5];
    v21[1].i16[1] = BlueFin::GlStream::GetU16(a2);
    v21[1].i16[2] = BlueFin::GlStream::GetU16(a2);
    v21[1].i8[6] = BlueFin::GlStream::GetU08(a2);
    unsigned int v22 = BlueFin::GlStream::GetU16(a2);
    unsigned int v23 = BlueFin::GlStream::GetU16(a2);
    uint64_t v24 = 0;
    unsigned char v21[2] = vshl_u32((uint32x2_t)(*(void *)&vshl_n_s32((int32x2_t)__PAIR64__(v23, v22), 0x10uLL) & 0xFFE0FFFFFFE0FFFFLL), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v23, v22), (int8x8_t)0x1F0000001FLL)));
    if ((v12 & 1) == 0) {
      uint64_t v15 = 1;
    }
    do
      *(_WORD *)&v7[2 * v24++] = BlueFin::GlStream::GetS16(a2);
    while (v15 != v24);
    uint64_t v25 = v56;
    do
    {
      int v26 = BlueFin::GlStream::GetU16(a2);
      *(_DWORD *)&v62[v25] = ((v26 << 16) & 0xFFE00000) >> v26;
      v25 += 4;
      --v15;
    }
    while (v15);
    int v4 = v50;
    int v6 = v16;
    if (v53)
    {
      char v27 = BlueFin::GlStream::GetU08(a2);
      uint64_t v28 = v27 & 0x7F;
      v63[108 * v5 + 24] = v27 & 0x7F;
      if ((v27 & 0x80) == 0)
      {
        uint64_t v41 = "(ucNbAltPksAnd14BitDelays & HAS_14BIT_DELAY_FIELD_BIT_MASK) == HAS_14BIT_DELAY_FIELD_BIT_MASK";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1592, "Handle_SatRpt_Search", (char)"(ucNbAltPksAnd14BitDelays & HAS_14BIT_DELAY_FIELD_BIT_MASK) == HAS_14BIT_DELAY_FIELD_BIT_MASK");
        int v42 = 1592;
        goto LABEL_61;
      }
      if ((v27 & 0x7F) != 0)
      {
        unsigned int v29 = v54;
        do
        {
          *v29++ = BlueFin::GlStream::GetU32(a2);
          --v28;
        }
        while (v28);
      }
      *(_WORD *)&v64[108 * v5 + 32] = BlueFin::GlStream::GetU16(a2);
    }
    if (v12)
    {
      char v32 = BlueFin::GlStream::GetU08(a2);
      *char v48 = v32;
      unsigned int v33 = v32 & 0x1F;
      if (v33 >= 8)
      {
        uint64_t v41 = "ucNumSamp <= SATRPT_SCV_NSAMP";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1606, "Handle_SatRpt_Search", (char)"ucNumSamp <= SATRPT_SCV_NSAMP");
        int v42 = 1606;
        goto LABEL_61;
      }
      uint64_t v34 = v33 + 1;
      v62[108 * v5 + 3] = v33 + 1;
      int v35 = v55;
      uint64_t v36 = v34;
      do
      {
        *int v35 = BlueFin::GlStream::GetU08(a2);
        v35 += 2;
        --v36;
      }
      while (v36);
      uint64_t v31 = v52;
      signed int v37 = v52;
      do
      {
        *signed int v37 = BlueFin::GlStream::GetBits(a2, 4u);
        v37 += 2;
        --v34;
      }
      while (v34);
    }
    else
    {
      unsigned int v30 = &v62[108 * v5];
      v30[3] = 1;
      v30[89] = BlueFin::GlStream::GetU08(a2);
      v30[90] = BlueFin::GlStream::GetU08(a2);
      uint64_t v31 = v52;
    }
    char v38 = v49 + v50 - 1;
    if (v51 != 2) {
      char v38 = 1;
    }
    if (v51 == 1) {
      char v38 = v50;
    }
    if (v51) {
      unsigned __int8 v39 = v38;
    }
    else {
      unsigned __int8 v39 = 1;
    }
    ++v5;
    v7 += 108;
    uint64_t v8 = v54 + 108;
    v55 += 108;
    v56 += 108;
    uint64_t v9 = v31 + 108;
  }
  while (v5 < v39);
  BOOL v59 = (v47 & 4) != 0;
  char v61 = v6;
  v57[0] = v51;
  LOBYTE(v58) = v50;
  BYTE1(v58) = v49;
  BYTE2(v58) = v46;
  HIBYTE(v58) = v45;
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    uint64_t v41 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1637, "Handle_SatRpt_Search", (char)"otStream.GetAvailableSize() == 0");
    int v42 = 1637;
LABEL_61:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v42, v41);
  }
  int v57[2] = v39;
  return (*(uint64_t (**)(void, void, unsigned char *, unsigned char *))(**(void **)(*((void *)this + 1) + 17072)
                                                                     + 24))(*(void *)(*((void *)this + 1) + 17072), v43 & 0x7F, v57, v62);
}

uint64_t BlueFin::GlStream::GetU08(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    int v4 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.h", 77, "GetU08", (char)"m_uiBitOffset == 0");
    int v5 = 77;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 7))
  {
    int v4 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.h", 78, "GetU08", (char)"m_uiBitsRemainingInWord == 0");
    int v5 = 78;
    goto LABEL_8;
  }
  uint64_t v1 = *(unsigned int *)this;
  if ((v1 + 1) > *((_DWORD *)this + 4))
  {
    int v4 = "m_uiOffset + 1 <= m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.h", 80, "GetU08", (char)"m_uiOffset + 1 <= m_uiMaxOffset");
    int v5 = 80;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.h", v5, v4);
  }
  uint64_t v2 = *((void *)this + 1);
  *(_DWORD *)this = v1 + 1;
  return *(unsigned __int8 *)(v2 + v1);
}

uint64_t BlueFin::GlStream::GetBits(BlueFin::GlStream *this, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)this;
  int v3 = *((_DWORD *)this + 6);
  unsigned int v4 = *((_DWORD *)this + 4);
  if (*(_DWORD *)this + ((a2 + v3 + 7) >> 3) > v4)
  {
    uint64_t v11 = "m_uiOffset+((m_uiBitOffset+ulNumBits+7)/8)<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 314, "GetBits", (char)"m_uiOffset+((m_uiBitOffset+ulNumBits+7)/8)<=m_uiMaxOffset");
    int v12 = 314;
    goto LABEL_17;
  }
  if (a2 > 0x20)
  {
    uint64_t v11 = "ulNumBits <= 32";
    DeviceFaultNotify("glutl_stream.cpp", 315, "GetBits", (char)"ulNumBits <= 32");
    int v12 = 315;
    goto LABEL_17;
  }
  if (a2)
  {
    int v5 = 0;
    LODWORD(v6) = 0;
    while (1)
    {
      if (v2 >= v4)
      {
        uint64_t v11 = "m_uiOffset < m_uiMaxOffset";
        DeviceFaultNotify("glutl_stream.cpp", 331, "GetBits", (char)"m_uiOffset < m_uiMaxOffset");
        int v12 = 331;
        goto LABEL_17;
      }
      unsigned int v7 = 8 - v3;
      if (8 - v3 >= a2) {
        unsigned int v7 = a2;
      }
      unsigned int v8 = *(unsigned __int8 *)(*((void *)this + 1) + v2);
      int v9 = v7 + v3;
      *((_DWORD *)this + 6) = v7 + v3;
      if (v7 + v3 >= 9) {
        break;
      }
      if (v9 == 8)
      {
        int v9 = 0;
        *((_DWORD *)this + 6) = 0;
        *(_DWORD *)this = ++v2;
      }
      uint64_t v6 = (((v8 >> v3) & ~(-1 << v7)) << v5) | v6;
      v5 += v7;
      int v3 = v9;
      a2 -= v7;
      if (!a2) {
        return v6;
      }
    }
    uint64_t v11 = "m_uiBitOffset <= 8";
    DeviceFaultNotify("glutl_stream.cpp", 340, "GetBits", (char)"m_uiBitOffset <= 8");
    int v12 = 340;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v12, v11);
  }
  return 0;
}

uint64_t BlueFin::MinnowGllRpcParserImp::ParseMethod(BlueFin::MinnowGllRpcParserImp *this, int a2, int a3, unsigned __int8 *a4, int a5)
{
  uint64_t v227 = *MEMORY[0x263EF8340];
  uint64_t result = BlueFin::GlStream::GlStream((uint64_t)&v172, a4, a5, *(unsigned char *)(*((void *)this + 1) + 8));
  switch(a2)
  {
    case 16:
      uint64_t result = *(void *)(*((void *)this + 1) + 17040);
      if (!result) {
        goto LABEL_215;
      }
      if (a3 > 85)
      {
        switch(a3)
        {
          case 'V':
            unsigned int U08 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v127 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t U32 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            uint64_t v129 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            uint64_t v130 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            if ((v130 - 21) < 0xECu)
            {
              unsigned int v150 = "agc_values > 0 && agc_values <= 20";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 202, "ParseMethod", (char)"agc_values > 0 && agc_values <= 20");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 202;
            }
            else
            {
              uint64_t v131 = v130;
              uint64_t v132 = 0;
              uint64_t v133 = v130;
              do
              {
                if (v175) {
                  goto LABEL_270;
                }
                if (v176) {
                  goto LABEL_271;
                }
                uint64_t v134 = v172;
                if (v172 + 1 > v174) {
                  goto LABEL_226;
                }
                ++v172;
                *((unsigned char *)v226 + v132) = *(unsigned char *)(v173 + v134);
                *((_WORD *)&__dst + v132++) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
              }
              while (v133 != v132);
              int v135 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
              {
                (*(void (**)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, uint64_t *, int))(**(void **)(*((void *)this + 1) + 17040) + 64))(*(void *)(*((void *)this + 1) + 17040), U08, v127, U32, v129, v131, v226, &__dst, v135);
                uint64_t result = *(void *)(*((void *)this + 1) + 17048);
                if (result) {
                  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, _WORD *, uint64_t *, int))(*(void *)result + 64))(result, U08, v127, U32, v129, v131, v226, &__dst, v135);
                }
                goto LABEL_215;
              }
              unsigned int v150 = "otStream.GetAvailableSize() == 0";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 212, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 212;
            }
            break;
          case 'W':
            BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            unsigned int v136 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            int v137 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            if (4 * v136 + 4 == a5)
            {
              LODWORD(__dst) = v137 | (v136 << 8);
              if (v136)
              {
                uint64_t v138 = v136;
                double v139 = (_DWORD *)&__dst + 1;
                do
                {
                  *v139++ = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                  --v138;
                }
                while (v138);
              }
              uint64_t v140 = (v136 + 1);
              (*(void (**)(void, uint64_t *, uint64_t))(**(void **)(*((void *)this + 1) + 17040) + 80))(*(void *)(*((void *)this + 1) + 17040), &__dst, v140);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)result + 80))(result, &__dst, v140);
              }
              goto LABEL_215;
            }
            unsigned int v150 = "usMethodLen == GlIntU16(regsnum * sizeof(GlIntU32) + 4)";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 156, "ParseMethod", (char)"usMethodLen == GlIntU16(regsnum * sizeof(GlIntU32) + 4)");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 156;
            break;
          case 'X':
            uint64_t U16 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            uint64_t v49 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            if (a5 == (unsigned __int16)(v49 + 4))
            {
              uint64_t v50 = v49;
              int v51 = a4 + 4;
              (*(void (**)(void, uint64_t, uint64_t, unsigned __int8 *))(**(void **)(*((void *)this + 1)
                                                                                                + 17040)
                                                                                  + 72))(*(void *)(*((void *)this + 1) + 17040), U16, v49, v51);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)result
              }
                                                                                                 + 72))(result, U16, v50, v51);
              goto LABEL_215;
            }
            unsigned int v150 = "usMethodLen == GlIntU16(data_size+4)";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 226, "ParseMethod", (char)"usMethodLen == GlIntU16(data_size+4)");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 226;
            break;
          default:
LABEL_215:
            if (*(void *)(*((void *)this + 1) + 17104))
            {
              switch(a3)
              {
                case 6:
                  uint64_t result = BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_Fixes(this, (BlueFin::GlStream *)&v172);
                  break;
                case 7:
                  uint64_t result = BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_InternalState(this, (BlueFin::GlStream *)&v172);
                  break;
                case 9:
                  uint64_t result = BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_AreaTriggered(this, (BlueFin::GlStream *)&v172);
                  break;
                case 10:
                  uint64_t result = BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_DebugMsg(this, (BlueFin::GlStream *)&v172);
                  break;
                case 11:
                  uint64_t v141 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
                  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 17104)
                                                                      + 56))(*(void *)(*((void *)this + 1) + 17104), v141);
                  break;
                case 12:
                  uint64_t result = BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_RawRpcs(this, (BlueFin::GlStream *)&v172);
                  break;
                default:
                  return result;
              }
            }
            return result;
        }
      }
      else
      {
        switch(a3)
        {
          case 0:
            if (*a4 + 1 == a5)
            {
              (*(void (**)(uint64_t))(*(void *)result + 16))(result);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, void, unsigned __int8 *))(*(void *)result + 16))(result, *a4, a4 + 1);
              }
              goto LABEL_215;
            }
            unsigned int v150 = "usMethodLen == GlIntU16(pucMethodData[0]+1)";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 67, "ParseMethod", (char)"usMethodLen == GlIntU16(pucMethodData[0]+1)");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 67;
            break;
          case 1:
            uint64_t v108 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v109 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            uint64_t v110 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
            {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17040)
                                                                        + 24))(*(void *)(*((void *)this + 1) + 17040), v108, v109, v110);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 24))(result, v108, v109, v110);
              }
              goto LABEL_215;
            }
            unsigned int v150 = "otStream.GetAvailableSize() == 0";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 81, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 81;
            goto LABEL_227;
          case 2:
            uint64_t v111 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v112 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v113 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v114 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
            {
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void))(**(void **)(*((void *)this + 1) + 17040) + 32))(*(void *)(*((void *)this + 1) + 17040), v111, v112, v113, v114, 0, 0, 0, 0);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void))(*(void *)result + 32))(result, v111, v112, v113, v114, 0, 0, 0, 0);
              }
              goto LABEL_215;
            }
            unsigned int v150 = "otStream.GetAvailableSize() == 0";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 100, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 100;
            goto LABEL_227;
          case 3:
            uint64_t v115 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v116 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            if (v116 > 8)
            {
              unsigned int v150 = "size <= _DIM(aulNvRam)";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 114, "ParseMethod", (char)"size <= _DIM(aulNvRam)");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 114;
            }
            else
            {
              uint64_t v117 = v116;
              if (v116)
              {
                uint64_t v118 = v116;
                p_dst = &__dst;
                do
                {
                  *(_DWORD *)p_dst = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                  p_dst = (uint64_t *)((char *)p_dst + 4);
                  --v118;
                }
                while (v118);
              }
              if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
              {
                (*(void (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(*((void *)this + 1)
                                                                                          + 17040)
                                                                            + 40))(*(void *)(*((void *)this + 1) + 17040), v115, v117, &__dst);
                uint64_t result = *(void *)(*((void *)this + 1) + 17048);
                if (result) {
                  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)result + 40))(result, v115, v117, &__dst);
                }
                goto LABEL_215;
              }
              unsigned int v150 = "otStream.GetAvailableSize() == 0";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 121, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 121;
            }
            goto LABEL_227;
          case 4:
            uint64_t v120 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            uint64_t v121 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
            {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17040) + 48))(*(void *)(*((void *)this + 1) + 17040), v120, v121);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 48))(result, v120, v121);
              }
              goto LABEL_215;
            }
            unsigned int v150 = "otStream.GetAvailableSize() == 0";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 134, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 134;
            goto LABEL_227;
          case 5:
            uint64_t v122 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            uint64_t v123 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            uint64_t v124 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            if (v124 + 5 == a5)
            {
              uint64_t v125 = v124;
              int v126 = a4 + 5;
              (*(void (**)(void, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(**(void **)(*((void *)this + 1) + 17040)
                                                                                           + 56))(*(void *)(*((void *)this + 1) + 17040), v122, v123, v124, v126);
              uint64_t result = *(void *)(*((void *)this + 1) + 17048);
              if (result) {
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)result + 56))(result, v122, v123, v125, v126);
              }
              goto LABEL_215;
            }
            unsigned int v150 = "usMethodLen == GlIntU16(data_size+5)";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 181, "ParseMethod", (char)"usMethodLen == GlIntU16(data_size+5)");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 181;
            goto LABEL_227;
          default:
            goto LABEL_215;
        }
      }
      goto LABEL_227;
    case 17:
      switch(a3)
      {
        case 0:
          uint64_t v11 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          LODWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          HIDWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          int v178 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          int v179 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(*((void *)this + 1) + 17072)
          }
                                                                         + 16))(*(void *)(*((void *)this + 1) + 17072), v11, &__dst);
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 564, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 564;
          goto LABEL_227;
        case 1:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_Search(this, (BlueFin::GlStream *)&v172);
        case 2:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkMsmt(this, (BlueFin::GlStream *)&v172);
        case 3:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkBits(this, (BlueFin::GlStream *)&v172);
        case 4:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_EramDump(this, (BlueFin::GlStream *)&v172);
        case 5:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_AcquisitionWindow(this, (BlueFin::GlStream *)&v172);
        case 6:
          uint64_t v153 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          uint64_t v154 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          if (v154)
          {
            v226[0] = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            __int16 v155 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          }
          else
          {
            __int16 v155 = 0;
            v226[0] = 0;
          }
          v226[1] = v155;
          v226[2] = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          v226[3] = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          if ((v154 & 2) != 0)
          {
            v171[0] = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            char v156 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          }
          else
          {
            char v156 = 0;
            v171[0] = 0;
          }
          v171[1] = v156;
          if ((v154 & 4) != 0)
          {
            int v179 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            int v157 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            LODWORD(__dst) = v157;
            HIDWORD(__dst) = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            if (v157 == 4) {
              LOBYTE(v178) = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
            }
          }
          else
          {
            int v179 = 0;
            uint64_t __dst = 0;
            LOBYTE(v178) = 0;
          }
          if ((v154 & 8) != 0)
          {
            uint64_t v158 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            uint64_t v160 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 616))(*(void *)(*((void *)this + 1) + 17032));
            uint64_t v161 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 624))();
            uint64_t v159 = v161;
            if (v160) {
              int v162 = v160;
            }
            else {
              int v162 = v161;
            }
            unsigned int v163 = *(uint64_t **)(*((void *)this + 1) + 17032);
            uint64_t v164 = *v163;
            if (v158 == v162)
            {
              char v165 = (*(uint64_t (**)(uint64_t *, uint64_t))(v164 + 656))(v163, v153);
              (*(void (**)(uint64_t *, uint64_t, void))(*v163 + 648))(v163, v153, (v165 + 1));
              if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 656))() >= 3) {
                (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17032) + 632))(*(void *)(*((void *)this + 1) + 17032), v153, 1);
              }
            }
            else
            {
              (*(void (**)(uint64_t *, uint64_t, void))(v164 + 648))(v163, v153, 0);
            }
            if (v160)
            {
              (*(void (**)(void, uint64_t, double))(**(void **)(*((void *)this + 1) + 17032) + 640))(*(void *)(*((void *)this + 1) + 17032), v153, (double)v158 * 100.0 / (double)v160);
              GlCustomLog(14, "ADCSat %s %.1f%%\n", off_2655D8310[v153], (double)v158 * 100.0 / (double)v160);
              uint64_t v159 = v160;
            }
            else
            {
              if (v159) {
                double v169 = (double)v158 * 100.0 / (double)v159;
              }
              else {
                double v169 = 0.0;
              }
              GlCustomLog(14, "BlankCnt: %s %u, %.1f%% \n", off_2655D8310[v153], v158, v169);
            }
          }
          else
          {
            uint64_t v158 = 0;
            uint64_t v159 = 0;
          }
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
          {
            (*(void (**)(void, uint64_t, uint64_t, _WORD *, unsigned char *, uint64_t *, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17072) + 40))(*(void *)(*((void *)this + 1) + 17072), v153, v154, v226, v171, &__dst, v158, v159);
            return (*(uint64_t (**)(void, uint64_t, uint64_t, _WORD *, unsigned char *, uint64_t *, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17056) + 96))(*(void *)(*((void *)this + 1) + 17056), v153, v154, v226, v171, &__dst, v158, v159);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 726, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 726;
          break;
        case 7:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_SubTrkMsmt(this, (BlueFin::GlStream *)&v172);
        case 9:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridData(this, (BlueFin::GlStream *)&v172);
        case 10:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridMsmt(this, (BlueFin::GlStream *)&v172);
        case 11:
          return BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridTapCfg(this, (BlueFin::GlStream *)&v172);
        default:
          return result;
      }
      goto LABEL_227;
    case 18:
      if (!*(void *)(*((void *)this + 1) + 17088)) {
        return result;
      }
      if (a3 != 1)
      {
        if (a3) {
          return result;
        }
        if (v175) {
          goto LABEL_270;
        }
        if (!v176)
        {
          uint64_t v12 = v172;
          if (v172 + 1 <= v174)
          {
            ++v172;
            unint64_t v13 = *(unsigned __int8 *)(v173 + v12);
            if (v13 > 0xA)
            {
              unsigned int v150 = "num <= _DIM(a_rm_report)";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2297, "Handle_SatEvt_RmEventReport", (char)"num <= _DIM(a_rm_report)");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 2297;
            }
            else
            {
              if (*(unsigned char *)(v173 + v12))
              {
                uint64_t v14 = 0;
                uint64_t v15 = &v178;
                uint64_t v16 = *(unsigned __int8 *)(v173 + v12);
                do
                {
                  *((_WORD *)v15 - 3) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
                  if (v175) {
                    goto LABEL_270;
                  }
                  if (v176) {
                    goto LABEL_271;
                  }
                  uint64_t v17 = v172;
                  unsigned int v18 = v174;
                  unsigned int v19 = v172 + 1;
                  if (v172 + 1 > v174) {
                    goto LABEL_226;
                  }
                  uint64_t v20 = v173;
                  ++v172;
                  *((unsigned char *)v15 - 8) = *(unsigned char *)(v173 + v17);
                  if ((int)v17 + 2 > v18) {
                    goto LABEL_226;
                  }
                  unsigned int v172 = v17 + 2;
                  *((unsigned char *)v15 - 7) = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                                        + 256
                                        * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                                        + *(unsigned __int8 *)(v20 + v19));
                  if ((int)v17 + 3 > v18) {
                    goto LABEL_226;
                  }
                  unsigned int v172 = v17 + 3;
                  int v21 = *(char *)(v20 + (v17 + 2));
                  *((unsigned char *)v15 - 4) = v21;
                  if ((int)v17 + 4 > v18) {
                    goto LABEL_226;
                  }
                  unsigned int v172 = v17 + 4;
                  *((unsigned char *)v15 - 3) = *(unsigned char *)(v20 + (v17 + 3));
                  unsigned int v22 = v17 + 5;
                  if ((int)v17 + 5 > v18) {
                    goto LABEL_226;
                  }
                  unsigned int v172 = v17 + 5;
                  unsigned int v23 = *(unsigned __int8 *)(v20 + (v17 + 4));
                  *((unsigned char *)v15 - 2) = v23;
                  unsigned int v24 = v17 + 6;
                  if (v24 > v18) {
                    goto LABEL_226;
                  }
                  unsigned int v172 = v24;
                  *((unsigned char *)v15 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v20 + v22);
                  uint64_t v25 = v15;
                  if (v23 <= 0xFC)
                  {
                    int v26 = (char *)&__dst + 10 * v14;
                    if (v21 < 0)
                    {
                      uint64_t v25 = (int *)(v26 + 4);
                      *(unsigned char *)uint64_t v15 = v21 & 0x7F;
                    }
                    else
                    {
                      uint64_t v25 = (int *)(v26 + 8);
                    }
                  }
                  *(unsigned char *)uint64_t v25 = 0;
                  ++v14;
                  uint64_t v15 = (int *)((char *)v15 + 10);
                }
                while (--v16);
              }
              if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
              {
                (*(void (**)(void, unint64_t, uint64_t *))(**(void **)(*((void *)this + 1)
                                                                                          + 17088)
                                                                            + 16))(*(void *)(*((void *)this + 1) + 17088), v13, &__dst);
                uint64_t result = *(void *)(*((void *)this + 1) + 17096);
                if (result) {
                  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(void *)result + 16))(result, v13, &__dst);
                }
                return result;
              }
              unsigned int v150 = "otStream.GetAvailableSize() == 0";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2336, "Handle_SatEvt_RmEventReport", (char)"otStream.GetAvailableSize() == 0");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 2336;
            }
LABEL_227:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v151, v152, v150);
          }
          goto LABEL_226;
        }
        goto LABEL_271;
      }
      if (v175) {
        goto LABEL_270;
      }
      if (v176) {
        goto LABEL_271;
      }
      uint64_t v52 = v172;
      unsigned int v53 = v174;
      unsigned int v54 = v172 + 1;
      if (v172 + 1 > v174) {
        goto LABEL_226;
      }
      uint64_t v55 = v173;
      ++v172;
      uint64_t v56 = *(unsigned __int8 *)(v173 + v52);
      if (*(unsigned char *)(v173 + v52))
      {
        uint64_t v57 = 0;
        unsigned __int8 v58 = 0;
        while (1)
        {
          unsigned int v59 = v54 + 1;
          if (v54 + 1 > v53) {
            goto LABEL_226;
          }
          unsigned int v172 = v54 + 1;
          *((unsigned char *)&__dst + 16 * v57) = *(unsigned char *)(v55 + v54);
          v54 += 2;
          if (v54 > v53) {
            goto LABEL_226;
          }
          unsigned int v172 = v54;
          uint64_t v60 = *(unsigned __int8 *)(v55 + v59);
          char v61 = &__dst + 2 * v57;
          *((unsigned char *)v61 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v60;
          double v62 = (char *)v226 + v58;
          v61[1] = (uint64_t)v62;
          uint64_t v63 = v60;
          if (v60) {
            break;
          }
LABEL_93:
          v58 += v60;
          if (++v57 == v56) {
            goto LABEL_94;
          }
        }
        while (v54 + 1 <= v53)
        {
          unsigned int v172 = v54 + 1;
          *v62++ = *(unsigned char *)(v55 + v54++);
          if (!--v63) {
            goto LABEL_93;
          }
        }
        goto LABEL_226;
      }
LABEL_94:
      if (BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
      {
        unsigned int v150 = "otStream.GetAvailableSize() == 0";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2360, "Handle_SatEvt_SmSatIdListReport", (char)"otStream.GetAvailableSize() == 0");
        double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
        int v152 = 2360;
        goto LABEL_227;
      }
      (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(*((void *)this + 1) + 17088) + 24))(*(void *)(*((void *)this + 1) + 17088), v56, &__dst);
      uint64_t result = *(void *)(*((void *)this + 1) + 17096);
      if (result) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)result + 24))(result, v56, &__dst);
      }
      return result;
    case 19:
      if (!*(void *)(*((void *)this + 1) + 17064)) {
        return result;
      }
      if (a3 == 2)
      {
        long long v225 = 0u;
        long long v224 = 0u;
        long long v223 = 0u;
        long long v222 = 0u;
        long long v221 = 0u;
        long long v220 = 0u;
        long long v219 = 0u;
        long long v218 = 0u;
        long long v217 = 0u;
        LODWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
        HIDWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
        int v178 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
        int v179 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
        int v180 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
        int v181 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
        __int16 v182 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
        __int16 v183 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
        LOWORD(v184) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
        HIWORD(v184) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
        __int16 v185 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
        if (!v175)
        {
          if (v176) {
            goto LABEL_271;
          }
          uint64_t v64 = v172;
          unsigned int v65 = v172 + 1;
          if (v172 + 1 > v174) {
            goto LABEL_226;
          }
          ++v172;
          char v186 = *(unsigned char *)(v173 + v64);
          if ((int)v64 + 2 > v174) {
            goto LABEL_226;
          }
          unsigned int v172 = v64 + 2;
          char v187 = *(unsigned char *)(v173 + v65);
          unsigned int v66 = v64 + 3;
          if ((int)v64 + 3 > v174) {
            goto LABEL_226;
          }
          unsigned int v172 = v64 + 3;
          LOBYTE(v188) = *(unsigned char *)(v173 + (v64 + 2));
          unsigned int v67 = v64 + 4;
          if (v67 > v174) {
            goto LABEL_226;
          }
          unsigned int v172 = v67;
          BYTE1(v188) = *(unsigned char *)(v173 + v66);
          HIWORD(v188) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          __int16 v189 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          __int16 v190 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          int v191 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          int v192 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          int v193 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          __int16 v194 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          __int16 v195 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          int v196 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          __int16 v197 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          __int16 S16 = BlueFin::GlStream::GetS16((BlueFin::GlStream *)&v172);
          if (!v175)
          {
            if (v176) {
              goto LABEL_271;
            }
            uint64_t v68 = v172;
            unsigned int v69 = v172 + 1;
            if (v172 + 1 > v174) {
              goto LABEL_226;
            }
            ++v172;
            char v199 = *(unsigned char *)(v173 + v68);
            unsigned int v70 = v68 + 2;
            if (v70 > v174) {
              goto LABEL_226;
            }
            unsigned int v172 = v70;
            char v200 = *(unsigned char *)(v173 + v69);
            __int16 v201 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            if (!v175)
            {
              if (v176) {
                goto LABEL_271;
              }
              uint64_t v71 = v172;
              unsigned int v72 = v172 + 1;
              if (v172 + 1 > v174) {
                goto LABEL_226;
              }
              ++v172;
              char v202 = *(unsigned char *)(v173 + v71);
              if ((int)v71 + 2 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v71 + 2;
              char v203 = *(unsigned char *)(v173 + v72);
              if ((int)v71 + 3 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v71 + 3;
              char v204 = *(unsigned char *)(v173 + (v71 + 2));
              if ((int)v71 + 4 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v71 + 4;
              char v205 = *(unsigned char *)(v173 + (v71 + 3));
              if ((int)v71 + 5 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v71 + 5;
              char v206 = *(unsigned char *)(v173 + (v71 + 4));
              if ((int)v71 + 6 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v71 + 6;
              char v207 = *(unsigned char *)(v173 + (v71 + 5));
              unsigned int v73 = v71 + 7;
              if ((int)v71 + 7 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v71 + 7;
              char v208 = *(unsigned char *)(v173 + (v71 + 6));
              unsigned int v74 = v71 + 8;
              if (v74 > v174) {
                goto LABEL_226;
              }
              unsigned int v172 = v74;
              char v209 = *(unsigned char *)(v173 + v73);
              int v210 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v211 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v212 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v213 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v214 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v215 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v216 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              LODWORD(v217) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              DWORD1(v217) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              DWORD2(v217) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              HIDWORD(v217) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              LODWORD(v218) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              DWORD1(v218) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              DWORD2(v218) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              WORD6(v218) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
              HIWORD(v218) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
              LODWORD(v219) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              WORD2(v219) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
              WORD3(v219) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
              DWORD2(v219) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              if (!v175)
              {
                if (!v176)
                {
                  uint64_t v75 = v172;
                  unsigned int v76 = v172 + 1;
                  if (v172 + 1 <= v174)
                  {
                    ++v172;
                    BYTE12(v219) = *(unsigned char *)(v173 + v75);
                    if ((int)v75 + 2 <= v174)
                    {
                      unsigned int v172 = v75 + 2;
                      BYTE13(v219) = *(unsigned char *)(v173 + v76);
                      if ((int)v75 + 3 <= v174)
                      {
                        unsigned int v172 = v75 + 3;
                        BYTE14(v219) = *(unsigned char *)(v173 + (v75 + 2));
                        if ((int)v75 + 4 <= v174)
                        {
                          unsigned int v172 = v75 + 4;
                          HIBYTE(v219) = *(unsigned char *)(v173 + (v75 + 3));
                          unsigned int v77 = v75 + 5;
                          if ((int)v75 + 5 <= v174)
                          {
                            unsigned int v172 = v75 + 5;
                            LOBYTE(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v173 + (v75 + 4));
                            unsigned int v78 = v75 + 6;
                            if (v78 <= v174)
                            {
                              unsigned int v172 = v78;
                              BYTE1(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v173 + v77);
                              WORD1(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlStream::GetS16((BlueFin::GlStream *)&v172);
                              DWORD1(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                              DWORD2(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                              HIDWORD(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                              if (BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172))
                              {
                                LODWORD(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD1(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD2(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                HIDWORD(v22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                LODWORD(v222) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD1(v222) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD2(v222) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                HIDWORD(v222) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                LODWORD(v223) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD1(v223) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD2(v223) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                HIDWORD(v223) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                LODWORD(v224) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD1(v224) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD2(v224) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                HIDWORD(v224) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                LODWORD(v225) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD1(v225) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                DWORD2(v225) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                                HIDWORD(v225) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                              }
                              if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
                                return (*(uint64_t (**)(void, uint64_t *))(**(void **)(*((void *)this + 1)
                              }
                                                                                                  + 17064)
                                                                                    + 32))(*(void *)(*((void *)this + 1) + 17064), &__dst);
                              unsigned int v150 = "otStream.GetAvailableSize() == 0";
                              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2043, "Handle_Utils_HealthProfile", (char)"otStream.GetAvailableSize() == 0");
                              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
                              int v152 = 2043;
                              goto LABEL_227;
                            }
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_226;
                }
                goto LABEL_271;
              }
            }
          }
        }
      }
      else
      {
        if (a3 != 1)
        {
          if (a3) {
            return result;
          }
          if (v175) {
            goto LABEL_270;
          }
          if (!v176)
          {
            uint64_t v27 = v172;
            if (v172 + 1 <= v174)
            {
              ++v172;
              LODWORD(v28) = *(unsigned __int8 *)(v173 + v27);
              Str = (unsigned __int8 *)BlueFin::GlStream::GetStr((BlueFin::GlStream *)&v172, v28);
              if (v28 >= 0x7F) {
                size_t v28 = 127;
              }
              else {
                size_t v28 = v28;
              }
              memcpy(&__dst, Str, v28);
              *((unsigned char *)&__dst + v28) = 0;
              if (v28 == 2 && BYTE1(__dst) == 0)
              {
                LOBYTE(v28) = 2;
                char v32 = "ESW_GCM_FC";
                switch((char)__dst)
                {
                  case 65:
                    goto LABEL_52;
                  case 66:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_HRM_FC";
                    goto LABEL_52;
                  case 67:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_STM_FC";
                    goto LABEL_52;
                  case 68:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TIM_FC";
                    goto LABEL_52;
                  case 69:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_CRPC_FC";
                    goto LABEL_52;
                  case 70:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_ACQ_FC";
                    goto LABEL_52;
                  case 71:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_CAL_FC";
                    goto LABEL_52;
                  case 72:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_COP_FC";
                    goto LABEL_52;
                  case 73:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_M1_COP_FC";
                    goto LABEL_52;
                  case 74:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TRK_FC";
                    goto LABEL_52;
                  case 75:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_BTM_FC";
                    goto LABEL_52;
                  case 76:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_JD_FC";
                    goto LABEL_52;
                  case 77:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RM_FC";
                    goto LABEL_52;
                  case 78:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SAT_FC";
                    goto LABEL_52;
                  case 79:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SM_FC";
                    goto LABEL_52;
                  case 80:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TM_FC";
                    goto LABEL_52;
                  case 81:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RPC_ENGINE_FC";
                    goto LABEL_52;
                  case 82:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TRANSPORT_FC";
                    goto LABEL_52;
                  case 83:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_ISR_FC";
                    goto LABEL_52;
                  case 84:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_ISR_T0PATCH_FC";
                    goto LABEL_52;
                  case 85:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_PATCH_WRAPPER_FC";
                    goto LABEL_52;
                  case 86:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_JD_PROCESS_IFC_PATCH_FC";
                    goto LABEL_52;
                  case 87:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_CTRL_FC";
                    goto LABEL_52;
                  case 88:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_TL_FC";
                    goto LABEL_52;
                  case 89:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_SAT_FC";
                    goto LABEL_52;
                  case 90:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_LOG_FC";
                    goto LABEL_52;
                  case 91:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_GEO_FC";
                    goto LABEL_52;
                  case 93:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_MATRIX_FC";
                    goto LABEL_52;
                  case 94:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_RPC_ENGINE_FC";
                    goto LABEL_52;
                  case 95:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_MEAS_FC";
                    goto LABEL_52;
                  case 96:
                    LOBYTE(v28) = 2;
                    char v32 = "LM_PROCESSING_FC";
                    goto LABEL_52;
                  case 97:
                    LOBYTE(v28) = 2;
                    char v32 = "LM_UTILS_FC";
                    goto LABEL_52;
                  case 98:
                    LOBYTE(v28) = 2;
                    char v32 = "LM_MAIN_FC";
                    goto LABEL_52;
                  case 99:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_STATES_FC";
                    goto LABEL_52;
                  case 100:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_EVENTS_FC";
                    goto LABEL_52;
                  case 101:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_PXY_FC";
                    goto LABEL_52;
                  case 102:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_MAIN_FC";
                    goto LABEL_52;
                  case 103:
                    LOBYTE(v28) = 2;
                    char v32 = "CARP_EXCEPTIONS_FC";
                    goto LABEL_52;
                  case 104:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_LM_UTILS_FC";
                    goto LABEL_52;
                  case 105:
                    LOBYTE(v28) = 2;
                    char v32 = "LM_ERRORS_FC";
                    goto LABEL_52;
                  case 106:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RESERVED_FC";
                    goto LABEL_52;
                  case 107:
                    LOBYTE(v28) = 2;
                    char v32 = "GEO_MEM_BANK_FC";
                    goto LABEL_52;
                  case 108:
                    LOBYTE(v28) = 2;
                    char v32 = "LM_ONLY_UTILS_FC";
                    goto LABEL_52;
                  case 109:
                    LOBYTE(v28) = 2;
                    char v32 = "RM_ALLOCATE_BITVECTOR_048_PATCH_4753_FC";
                    goto LABEL_52;
                  case 110:
                    LOBYTE(v28) = 2;
                    char v32 = "COP_ALIGN_COP_226_PATCH_FC";
                    goto LABEL_52;
                  case 111:
                    LOBYTE(v28) = 2;
                    char v32 = "RM_BITVECTOR_MANAGE_115_PATCH_4753_FC";
                    goto LABEL_52;
                  case 112:
                    LOBYTE(v28) = 2;
                    char v32 = "RM_GENERAL_PATCH_ENTRY_172_PATCH_FC";
                    goto LABEL_52;
                  case 113:
                    LOBYTE(v28) = 2;
                    char v32 = "SM_DISPOSE_SAT_PATCH_4753_FC";
                    goto LABEL_52;
                  case 114:
                    LOBYTE(v28) = 2;
                    char v32 = "TRK_IS_TRACK_READY_205_PATCH_FC";
                    goto LABEL_52;
                  case 116:
                    LOBYTE(v28) = 2;
                    char v32 = "TRK_FSM_TRK_LOAD_193_PATCH_FC";
                    goto LABEL_52;
                  case 117:
                    LOBYTE(v28) = 2;
                    char v32 = "TM_TOP_CHECK_SWAP_081_PATCH_FC";
                    goto LABEL_52;
                  case 118:
                    LOBYTE(v28) = 2;
                    char v32 = "MAIN_PRE_LOOP_001_PATCH_FC";
                    goto LABEL_52;
                  case 119:
                    LOBYTE(v28) = 2;
                    char v32 = "RM_GEOFENCE_MEMORY_MGR_182_PATCH_4753_FC";
                    goto LABEL_52;
                  case 120:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_GCM_216_PATCH_4753_FC";
                    goto LABEL_52;
                  case 121:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SM_QUEUE_REPORT_ENTRY_074_FC";
                    goto LABEL_52;
                  case 123:
                    LOBYTE(v28) = 2;
                    char v32 = "MAIN_COMMON_PATCH_FC";
                    goto LABEL_52;
                  case 124:
                    LOBYTE(v28) = 2;
                    char v32 = "ASM_FC";
                    goto LABEL_52;
                  case 125:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SATRPT_FC";
                    goto LABEL_52;
                  case 126:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SAT_TRK_STATE_FC";
                    goto LABEL_52;
                  case 127:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_COP_FIFO_FC";
                    goto LABEL_52;
                  case -128:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_ACQ_COMMON_PATCH_FC";
                    goto LABEL_52;
                  case -127:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_ACQ_GET_SNR_HW_PATCH_FC";
                    goto LABEL_52;
                  case -126:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_COP_NORM_FC";
                    goto LABEL_52;
                  case -125:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_POWER_CONTROL_FC";
                    goto LABEL_52;
                  case -124:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_LM_INIT_FC";
                    goto LABEL_52;
                  case -123:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RADIO_INI_FC";
                    goto LABEL_52;
                  case -122:
                    LOBYTE(v28) = 2;
                    char v32 = "CW_TEST_HW_PATCHES_FC";
                    goto LABEL_52;
                  case -121:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TIM_PATCHES_FC";
                    goto LABEL_52;
                  case -120:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TM_PATCHES_FC";
                    goto LABEL_52;
                  case -119:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_COP_PATCHES_FC";
                    goto LABEL_52;
                  case -118:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TRK_PATCHES_FC";
                    goto LABEL_52;
                  case -117:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TRK_UTILS_PATCHES_FC";
                    goto LABEL_52;
                  case -116:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_CRPC_PATCHES_FC";
                    goto LABEL_52;
                  case -115:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RM_PATCHES_FC";
                    goto LABEL_52;
                  case -114:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_JD_PATCHES_FC";
                    goto LABEL_52;
                  case -113:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_COP_FIFO_PATCHES_FC";
                    goto LABEL_52;
                  case -112:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_GCM_PATCHES_FC";
                    goto LABEL_52;
                  case -111:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_PWR_CONTROL_PATCHES_FC";
                    goto LABEL_52;
                  case -110:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RADIO_INIT_PATCHES_FC";
                    goto LABEL_52;
                  case -109:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_STM_PATCHES_FC";
                    goto LABEL_52;
                  case -107:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_TRK_SCAN_FC";
                    goto LABEL_52;
                  case -106:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RM_SEARCH_FC";
                    goto LABEL_52;
                  case -105:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RM_TRACK_FC";
                    goto LABEL_52;
                  case -104:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_HOST_COMM_FC";
                    goto LABEL_52;
                  case -103:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_PMU_CONTROL_FC";
                    goto LABEL_52;
                  case -102:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RM_TRACK_PATCHES_FC";
                    goto LABEL_52;
                  case -101:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SAT_PATCHES_FC";
                    goto LABEL_52;
                  case -100:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SAT_TRK_STATE_PATCHES_FC";
                    goto LABEL_52;
                  case -99:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_SM_PATCHES_FC";
                    goto LABEL_52;
                  case -98:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_CAL_PATCHES_FC";
                    goto LABEL_52;
                  case -97:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_RM_SEARCH_PATCHES_FC";
                    goto LABEL_52;
                  case -96:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_LM_INIT_PATCHES_FC";
                    goto LABEL_52;
                  case -95:
                    LOBYTE(v28) = 2;
                    char v32 = "ESW_ACQ_PATCHES_FC";
                    goto LABEL_52;
                  default:
                    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&__dst, (char *)0x80, "ESW_FILE=%d", v30, *Str);
                    LOBYTE(v28) = strlen((const char *)&__dst) + 1;
                    break;
                }
              }
              char v32 = (const char *)&__dst;
              if (v28 >= 3u && __dst == 252)
              {
                unsigned int v150 = "0";
                DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1925, "Handle_Utils_Assert", (char)"0");
                double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
                int v152 = 1925;
              }
              else
              {
LABEL_52:
                uint64_t v33 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
                uint64_t v34 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                uint64_t v35 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                uint64_t v36 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
                GlCustomLog(11, "ASIC assertion at %s:%d args(%u %u %u)\n", v32, v33, v34, v35, v36);
                DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1936, "Handle_Utils_Assert", (char)"AsicCrash");
                CrashData();
                if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
                  return (*(uint64_t (**)(void, void, const char *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17064) + 16))(*(void *)(*((void *)this + 1) + 17064), v28, v32, v33, v34, v35, v36);
                }
                unsigned int v150 = "otStream.GetAvailableSize() == 0";
                DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1939, "Handle_Utils_Assert", (char)"otStream.GetAvailableSize() == 0");
                double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
                int v152 = 1939;
              }
              goto LABEL_227;
            }
            goto LABEL_226;
          }
          goto LABEL_271;
        }
        if (!v175)
        {
          if (!v176)
          {
            uint64_t v79 = v172;
            if (v172 + 1 <= v174)
            {
              ++v172;
              unsigned int v80 = *(unsigned __int8 *)(v173 + v79);
              char v81 = (const void *)BlueFin::GlStream::GetStr((BlueFin::GlStream *)&v172, v80);
              if (v80 >= 0xFE) {
                size_t v82 = 254;
              }
              else {
                size_t v82 = v80;
              }
              memcpy(&__dst, v81, v82);
              if (v82)
              {
                unsigned __int8 v83 = v82;
                if (*((unsigned char *)&__dst + (v82 - 1)) != 10)
                {
                  if (v80 + 1 < 0xFF) {
                    unsigned __int8 v83 = v80 + 1;
                  }
                  else {
                    unsigned __int8 v83 = -1;
                  }
                  *((unsigned char *)&__dst + v82) = 10;
                }
              }
              else
              {
                unsigned __int8 v83 = 0;
              }
              *((unsigned char *)&__dst + v83) = 0;
              uint64_t v142 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              uint64_t v143 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              uint64_t v144 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              uint64_t v145 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              uint64_t v146 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              unsigned int v147 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              unsigned int v148 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              int v149 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
              if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
                return (*(uint64_t (**)(void, void, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, int))(**(void **)(*((void *)this + 1) + 17064) + 24))(*(void *)(*((void *)this + 1) + 17064), v83, &__dst, v142, v143, v144, v145, v146, __PAIR64__(v148, v147), v149);
              }
              unsigned int v150 = "otStream.GetAvailableSize() == 0";
              DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1789, "Handle_Utils_Printf", (char)"otStream.GetAvailableSize() == 0");
              double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
              int v152 = 1789;
              goto LABEL_227;
            }
LABEL_226:
            unsigned int v150 = "m_uiOffset + 1 <= m_uiMaxOffset";
            DeviceFaultNotify("glutl_stream.h", 80, "GetU08", (char)"m_uiOffset + 1 <= m_uiMaxOffset");
            double v151 = "glutl_stream.h";
            int v152 = 80;
            goto LABEL_227;
          }
LABEL_271:
          unsigned int v150 = "m_uiBitsRemainingInWord == 0";
          DeviceFaultNotify("glutl_stream.h", 78, "GetU08", (char)"m_uiBitsRemainingInWord == 0");
          double v151 = "glutl_stream.h";
          int v152 = 78;
          goto LABEL_227;
        }
      }
LABEL_270:
      unsigned int v150 = "m_uiBitOffset == 0";
      DeviceFaultNotify("glutl_stream.h", 77, "GetU08", (char)"m_uiBitOffset == 0");
      double v151 = "glutl_stream.h";
      int v152 = 77;
      goto LABEL_227;
    case 20:
      switch(a3)
      {
        case 0:
          uint64_t v37 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v38 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v39 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v40 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          uint64_t v41 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          uint64_t v42 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          uint64_t v43 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 1) + 17056) + 16))(*(void *)(*((void *)this + 1) + 17056), v37, v38, v39, v40, v41, v42, v43);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 379, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 379;
          goto LABEL_227;
        case 1:
          uint64_t v92 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          uint64_t v93 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v94 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v95 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v96 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v97 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          if ((v92 - 5) > 2)
          {
            uint64_t v98 = 0;
            unsigned int v99 = 0;
            unsigned int v100 = 0;
          }
          else
          {
            uint64_t v98 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            unsigned int v99 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            unsigned int v100 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          }
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(**(void **)(*((void *)this + 1) + 17056) + 32))(*(void *)(*((void *)this + 1) + 17056), v92, v93, v94, v95, v96, v97, v98, __PAIR64__(v100, v99));
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 448, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 448;
          goto LABEL_227;
        case 2:
          HIDWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          LOWORD(v178) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          int v179 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          LOWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          int v181 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          __int16 v182 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          int v184 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          __int16 v185 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          int v188 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          LOBYTE(__dst) = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          LOBYTE(v189) = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t *))(**(void **)(*((void *)this + 1) + 17056) + 40))(*(void *)(*((void *)this + 1) + 17056), &__dst);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 529, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 529;
          goto LABEL_227;
        case 3:
          uint64_t v101 = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          uint64_t v102 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          uint64_t v103 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 1)
          }
                                                                                              + 17056)
                                                                                + 48))(*(void *)(*((void *)this + 1) + 17056), v101, v102, v103);
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 461, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 461;
          goto LABEL_227;
        case 4:
          uint64_t v104 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 17056) + 56))(*(void *)(*((void *)this + 1) + 17056), v104);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 497, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 497;
          goto LABEL_227;
        case 5:
          LOWORD(__dst) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          HIDWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          LOBYTE(v178) = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          BYTE1(v178) = BlueFin::GlStream::GetU08((BlueFin::GlStream *)&v172);
          HIWORD(v178) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          LOWORD(v179) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t *))(**(void **)(*((void *)this + 1) + 17056) + 72))(*(void *)(*((void *)this + 1) + 17056), &__dst);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 488, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 488;
          goto LABEL_227;
        case 7:
          uint64_t v105 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          if (((*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 24))(*(void *)(*((void *)this + 1) + 17032)) & 1) != 0
            || (*(unsigned int (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 40))(*(void *)(*((void *)this + 1) + 17032)))
          {
            for (uint64_t i = 0; i != 76; i += 4)
              *(_DWORD *)((char *)&__dst + i) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
              return (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(*((void *)this + 1)
            }
                                                                                         + 17056)
                                                                           + 88))(*(void *)(*((void *)this + 1) + 17056), v105, &__dst);
            unsigned int v150 = "otStream.GetAvailableSize() == 0";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 407, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 407;
          }
          else
          {
            uint64_t v166 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            for (uint64_t j = 0; j != 20; j += 4)
              *(_DWORD *)((char *)&__dst + j) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
            if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 824))(*(void *)(*((void *)this + 1) + 17032)) <= 0x7F) {
              uint64_t v168 = 0;
            }
            else {
              uint64_t v168 = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
            }
            if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
              return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *, uint64_t))(**(void **)(*((void *)this + 1) + 17056)
            }
                                                                                             + 80))(*(void *)(*((void *)this + 1) + 17056), v105, v166, &__dst, v168);
            unsigned int v150 = "otStream.GetAvailableSize() == 0";
            DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 423, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
            double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
            int v152 = 423;
          }
          break;
        case 8:
          uint64_t v107 = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)this + 1) + 17056) + 24))(*(void *)(*((void *)this + 1) + 17056), v107);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 390, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 390;
          goto LABEL_227;
        default:
          return result;
      }
      goto LABEL_227;
    case 21:
      if (!*(void *)(*((void *)this + 1) + 17080)) {
        return result;
      }
      if (a3 != 2)
      {
        if (a3 == 1)
        {
          LODWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          HIDWORD(__dst) = BlueFin::GlStream::GetU32((BlueFin::GlStream *)&v172);
          if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
            return (*(uint64_t (**)(void, uint64_t *))(**(void **)(*((void *)this + 1) + 17080) + 24))(*(void *)(*((void *)this + 1) + 17080), &__dst);
          }
          unsigned int v150 = "otStream.GetAvailableSize() == 0";
          DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 782, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
          double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
          int v152 = 782;
          goto LABEL_227;
        }
        if (a3) {
          return result;
        }
        WORD1(__dst) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
        if (v175) {
          goto LABEL_270;
        }
        if (!v176)
        {
          uint64_t v44 = v172;
          unsigned int v45 = v172 + 1;
          if (v172 + 1 <= v174)
          {
            ++v172;
            LOBYTE(__dst) = *(unsigned char *)(v173 + v44);
            if ((int)v44 + 2 <= v174)
            {
              unsigned int v172 = v44 + 2;
              BYTE4(__dst) = *(unsigned char *)(v173 + v45);
              if ((int)v44 + 3 <= v174)
              {
                unsigned int v172 = v44 + 3;
                BYTE5(__dst) = *(unsigned char *)(v173 + (v44 + 2));
                if ((int)v44 + 4 <= v174)
                {
                  unsigned int v172 = v44 + 4;
                  BYTE6(__dst) = *(unsigned char *)(v173 + (v44 + 3));
                  if ((int)v44 + 5 <= v174)
                  {
                    unsigned int v172 = v44 + 5;
                    HIBYTE(__dst) = *(unsigned char *)(v173 + (v44 + 4));
                    if ((int)v44 + 6 <= v174)
                    {
                      unsigned int v172 = v44 + 6;
                      LOBYTE(v178) = *(unsigned char *)(v173 + (v44 + 5));
                      if ((int)v44 + 7 <= v174)
                      {
                        unsigned int v172 = v44 + 7;
                        BYTE1(v178) = *(unsigned char *)(v173 + (v44 + 6));
                        if ((int)v44 + 8 <= v174)
                        {
                          unsigned int v172 = v44 + 8;
                          BYTE2(v178) = *(unsigned char *)(v173 + (v44 + 7));
                          if ((int)v44 + 9 <= v174)
                          {
                            unsigned int v172 = v44 + 9;
                            HIBYTE(v178) = *(unsigned char *)(v173 + (v44 + 8));
                            if ((int)v44 + 10 <= v174)
                            {
                              unsigned int v172 = v44 + 10;
                              LOBYTE(v179) = *(unsigned char *)(v173 + (v44 + 9));
                              unsigned int v46 = v44 + 11;
                              if ((int)v44 + 11 <= v174)
                              {
                                unsigned int v172 = v44 + 11;
                                BYTE1(v179) = *(unsigned char *)(v173 + (v44 + 10));
                                unsigned int v47 = v44 + 12;
                                if (v47 <= v174)
                                {
                                  unsigned int v172 = v47;
                                  BYTE2(v179) = *(unsigned char *)(v173 + v46);
                                  if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
                                    return (*(uint64_t (**)(void, uint64_t *))(**(void **)(*((void *)this + 1) + 17080)
                                  }
                                                                                        + 16))(*(void *)(*((void *)this + 1) + 17080), &__dst);
                                  unsigned int v150 = "otStream.GetAvailableSize() == 0";
                                  DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 771, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
                                  double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
                                  int v152 = 771;
                                  goto LABEL_227;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          goto LABEL_226;
        }
        goto LABEL_271;
      }
      WORD2(__dst) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
      if (v175) {
        goto LABEL_270;
      }
      if (!v176)
      {
        uint64_t v84 = v172;
        if (v172 + 1 <= v174)
        {
          ++v172;
          BYTE2(__dst) = *(unsigned char *)(v173 + v84);
          unsigned int v85 = v84 + 2;
          if (v85 <= v174)
          {
            uint64_t v86 = 0;
            unsigned int v172 = v85;
            do
            {
              *(_WORD *)((char *)&__dst + v86 + 8) = BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
              if (v175) {
                goto LABEL_270;
              }
              if (v176) {
                goto LABEL_271;
              }
              uint64_t v87 = v172;
              unsigned int v88 = v174;
              if (v172 + 1 > v174) {
                goto LABEL_226;
              }
              uint64_t v89 = v173;
              ++v172;
              *((unsigned char *)&__dst + v86 + 6) = *(unsigned char *)(v173 + v87);
              if ((int)v87 + 2 > v88) {
                goto LABEL_226;
              }
              unsigned int v172 = v87 + 2;
              v86 += 4;
            }
            while (v86 != 16);
            if ((int)v87 + 3 <= v88)
            {
              unsigned int v172 = v87 + 3;
              LOBYTE(__dst) = *(unsigned char *)(v89 + (v87 + 2));
              if ((int)v87 + 4 <= v88)
              {
                unsigned int v172 = v87 + 4;
                BYTE1(__dst) = *(unsigned char *)(v89 + (v87 + 3));
                if ((int)v87 + 5 <= v88)
                {
                  unsigned int v172 = v87 + 5;
                  BYTE2(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v89 + (v87 + 4));
                  if ((int)v87 + 6 <= v88)
                  {
                    unsigned int v172 = v87 + 6;
                    HIBYTE(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v89 + (v87 + 5));
                    unsigned int v90 = v87 + 7;
                    if ((int)v87 + 7 <= v88)
                    {
                      unsigned int v172 = v87 + 7;
                      LOBYTE(v182) = *(unsigned char *)(v89 + (v87 + 6));
                      unsigned int v91 = v87 + 8;
                      if (v91 <= v88)
                      {
                        unsigned int v172 = v91;
                        HIBYTE(v182) = *(unsigned char *)(v89 + v90);
                        BlueFin::GlStream::GetU16((BlueFin::GlStream *)&v172);
                        if (!BlueFin::GlStream::GetAvailableSize((BlueFin::GlStream *)&v172)) {
                          return (*(uint64_t (**)(void, uint64_t *))(**(void **)(*((void *)this + 1)
                        }
                                                                                            + 17080)
                                                                              + 32))(*(void *)(*((void *)this + 1) + 17080), &__dst);
                        unsigned int v150 = "otStream.GetAvailableSize() == 0";
                        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 814, "ParseMethod", (char)"otStream.GetAvailableSize() == 0");
                        double v151 = "glmesrd_transaction_rpc_decoder_minnow.cpp";
                        int v152 = 814;
                        goto LABEL_227;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_226;
      }
      goto LABEL_271;
    default:
      return result;
  }
}

uint64_t BlueFin::GlStream::GetU16(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v10 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.h", 87, "GetU16", (char)"m_uiBitOffset == 0");
    int v11 = 87;
    goto LABEL_13;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v10 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.h", 88, "GetU16", (char)"m_uiBitsRemainingInWord == 0");
    int v11 = 88;
    goto LABEL_13;
  }
  uint64_t v1 = *(unsigned int *)this;
  int v2 = v1 + 2;
  if ((v1 + 2) > *((_DWORD *)this + 4))
  {
    uint64_t v10 = "m_uiOffset + 2 <= m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.h", 90, "GetU16", (char)"m_uiOffset + 2 <= m_uiMaxOffset");
    int v11 = 90;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.h", v11, v10);
  }
  int v3 = *((unsigned __int8 *)this + 20);
  uint64_t v4 = *((void *)this + 1);
  unsigned int v5 = v1 + 1;
  *(_DWORD *)this = v1 + 1;
  __int16 v6 = *(unsigned __int8 *)(v4 + v1);
  *(_DWORD *)this = v2;
  BOOL v7 = v3 == 0;
  if (v3) {
    unsigned __int8 v8 = *(unsigned char *)(v4 + v5);
  }
  else {
    unsigned __int8 v8 = v6;
  }
  if (v7) {
    __int16 v6 = *(unsigned __int8 *)(v4 + v5);
  }
  return (unsigned __int16)(v8 | (unsigned __int16)(v6 << 8));
}

uint64_t BlueFin::GlStream::GetU32(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v16 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.h", 134, "GetU32", (char)"m_uiBitOffset == 0");
    int v17 = 134;
    goto LABEL_11;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v16 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.h", 135, "GetU32", (char)"m_uiBitsRemainingInWord == 0");
    int v17 = 135;
    goto LABEL_11;
  }
  uint64_t v1 = *(unsigned int *)this;
  int v2 = v1 + 4;
  if ((v1 + 4) > *((_DWORD *)this + 4))
  {
    uint64_t v16 = "m_uiOffset + 4 <= m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.h", 137, "GetU32", (char)"m_uiOffset + 4 <= m_uiMaxOffset");
    int v17 = 137;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.h", v17, v16);
  }
  int v3 = *((unsigned __int8 *)this + 20);
  uint64_t v4 = *((void *)this + 1);
  unsigned int v5 = v1 + 1;
  *(_DWORD *)this = v1 + 1;
  int v6 = *(unsigned __int8 *)(v4 + v1);
  if (v3)
  {
    unsigned int v7 = v1 + 2;
    *(_DWORD *)this = v1 + 2;
    int v8 = *(unsigned __int8 *)(v4 + v5);
    unsigned int v9 = v1 + 3;
    *(_DWORD *)this = v9;
    int v6 = (v6 << 24) | (v8 << 16) | (*(unsigned __int8 *)(v4 + v7) << 8);
    *(_DWORD *)this = v2;
    int v10 = *(unsigned __int8 *)(v4 + v9);
  }
  else
  {
    unsigned int v12 = v1 + 2;
    *(_DWORD *)this = v1 + 2;
    int v13 = *(unsigned __int8 *)(v4 + v5);
    unsigned int v14 = v1 + 3;
    *(_DWORD *)this = v14;
    int v15 = *(unsigned __int8 *)(v4 + v12) << 16;
    *(_DWORD *)this = v2;
    int v10 = v15 | (v13 << 8) | (*(unsigned __int8 *)(v4 + v14) << 24);
  }
  return v6 | v10;
}

uint64_t BlueFin::GlStream::GetAvailableSize(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    int v2 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 50, "GetAvailableSize", (char)"m_uiBitOffset == 0");
    int v3 = 50;
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 7))
  {
    int v2 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 51, "GetAvailableSize", (char)"m_uiBitsRemainingInWord == 0");
    int v3 = 51;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v3, v2);
  }
  return (*((_DWORD *)this + 4) - *(_DWORD *)this);
}

uint64_t BlueFin::GlStream::GetS16(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    int v10 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 221, "GetS16", (char)"m_uiBitOffset == 0");
    int v11 = 221;
    goto LABEL_13;
  }
  if (*((_DWORD *)this + 7))
  {
    int v10 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 222, "GetS16", (char)"m_uiBitsRemainingInWord == 0");
    int v11 = 222;
    goto LABEL_13;
  }
  uint64_t v1 = *(unsigned int *)this;
  int v2 = v1 + 2;
  if ((v1 + 2) > *((_DWORD *)this + 4))
  {
    int v10 = "m_uiOffset+2<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 224, "GetS16", (char)"m_uiOffset+2<=m_uiMaxOffset");
    int v11 = 224;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v11, v10);
  }
  int v3 = *((unsigned __int8 *)this + 20);
  uint64_t v4 = *((void *)this + 1);
  unsigned int v5 = v1 + 1;
  *(_DWORD *)this = v1 + 1;
  __int16 v6 = *(unsigned __int8 *)(v4 + v1);
  *(_DWORD *)this = v2;
  BOOL v7 = v3 == 0;
  if (v3) {
    unsigned __int8 v8 = *(unsigned char *)(v4 + v5);
  }
  else {
    unsigned __int8 v8 = v6;
  }
  if (v7) {
    __int16 v6 = *(unsigned __int8 *)(v4 + v5);
  }
  return (__int16)(v8 | (unsigned __int16)(v6 << 8));
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_search(BlueFin::GlMeSrdSatRptRpcBuffer *this, int a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v7 = *a3;
  if (v7 >= 3)
  {
    if (v7 == 3)
    {
      GlCustomLog(14, "GlMeSrdSatRptRpcBuffer::gll_satrpt_nsearch ignoring 2dbit grid!\n");
      goto LABEL_21;
    }
    unsigned int v22 = "0";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 216, "gll_satrpt_rpc_search", (char)"0");
    int v23 = 216;
LABEL_27:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", v23, v22);
  }
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId((uint64_t)this, a2);
  int v8 = *((_DWORD *)this + 2);
  if ((v8 & 8) != 0)
  {
    unsigned int v22 = "m_otFlags.Missing(FLGS_RECEIVED_SEARCH)";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 173, "gll_satrpt_rpc_search", (char)"m_otFlags.Missing(FLGS_RECEIVED_SEARCH)");
    int v23 = 173;
    goto LABEL_27;
  }
  *((_DWORD *)this + 2) = v8 | 8;
  if (a3[9]) {
    *((_DWORD *)this + 2) = v8 | 0x200008;
  }
  __int16 v9 = *((_WORD *)a3 + 4);
  *(void *)((char *)this + 105) = *(void *)a3;
  *(_WORD *)((char *)this + 113) = v9;
  unsigned int v10 = *((unsigned __int8 *)this + 108) + *((unsigned __int8 *)this + 109) - 1;
  if (v10 >= 0x11)
  {
    unsigned int v22 = "uiNsearchReportCnt <= _DIM(m_otRawdata.u.sSearch.satrpt_search)";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 186, "gll_satrpt_rpc_search", (char)"uiNsearchReportCnt <= _DIM(m_otRawdata.u.sSearch.satrpt_search)");
    int v23 = 186;
    goto LABEL_27;
  }
  *((unsigned char *)this + 104) = 0;
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = -(uint64_t)(unsigned __int16)v10;
LABEL_8:
  uint64_t v14 = 108 * v11++;
  int v15 = (_OWORD *)((char *)this + v14 + 116);
  uint64_t v16 = (unsigned __int8 *)(a4 + 4 + v14);
  do
  {
    long long v17 = *(_OWORD *)(v16 - 4);
    long long v18 = *(_OWORD *)(v16 + 28);
    v15[1] = *(_OWORD *)(v16 + 12);
    __n128 v15[2] = v18;
    *int v15 = v17;
    long long v19 = *(_OWORD *)(v16 + 44);
    long long v20 = *(_OWORD *)(v16 + 60);
    long long v21 = *(_OWORD *)(v16 + 76);
    *(_OWORD *)((char *)v15 + 92) = *(_OWORD *)(v16 + 88);
    unsigned char v15[4] = v20;
    v15[5] = v21;
    v15[3] = v19;
    if (*v16 == a3[5] && v16[1] == a3[6])
    {
      *((unsigned char *)this + 104) = v11 - 1;
      if (v12)
      {
        unsigned int v22 = "!bMaxFound";
        DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 198, "gll_satrpt_rpc_search", (char)"!bMaxFound");
        int v23 = 198;
        goto LABEL_27;
      }
      char v12 = 1;
      if (!(v13 + v11)) {
        goto LABEL_21;
      }
      goto LABEL_8;
    }
    v16 += 108;
    ++v11;
    int v15 = (_OWORD *)((char *)v15 + 108);
  }
  while (v13 + v11 != 1);
  if ((v12 & 1) == 0)
  {
LABEL_17:
    unsigned int v22 = "bMaxFound";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 203, "gll_satrpt_rpc_search", (char)"bMaxFound");
    int v23 = 203;
    goto LABEL_27;
  }
LABEL_21:
  unsigned int v24 = *(uint64_t (**)(void))(**((void **)this + 394) + 24);

  return v24();
}

void BlueFin::GlMeSrdSatRptRpcListener::gll_satrpt_rpc_noise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (*a6 >= 0xEu)
  {
    DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 526, "gll_satrpt_rpc_noise", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_mgr.cpp", 526, "0");
  }
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_noise(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 3152) + 40))(*(void *)(a1 + 3152));
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_satrpt_rpc_noise(uint64_t result)
{
  if (*(_DWORD *)(*(void *)(result + 16) + 360) == 5) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 8) + 112) + 72))();
  }
  return result;
}

void BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_time_captured(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned __int16 a5, unsigned int a6, __int16 a7)
{
  int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 320))(*(void *)(a1 + 16));
  double v15 = (double)a5 / (double)(1023 * v14)
      + (double)a3
      + (double)a4 / ((double)(1023 * v14) * 511.0 * 8388608.0)
      + 1.0 / (*(double (**)(void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16)) * -2.0 * 1000.0;
  switch(a2)
  {
    case 1:
      uint64_t v32 = *(void *)(a1 + 8);
      *(double *)(v32 + 216) = v15;
      long long v17 = *(void (**)(void))(**(void **)(v32 + 112) + 32);
      goto LABEL_25;
    case 2:
    case 5:
      uint64_t v16 = *(void *)(a1 + 8);
      *(double *)(v16 + 224) = v15;
      *(_DWORD *)(v16 + 232) = a7 & 0x7FF | (a6 << 11);
      *(_WORD *)(v16 + 236) = a6 >> 21;
      long long v17 = *(void (**)(void))(**(void **)(v16 + 112) + 40);
      goto LABEL_25;
    case 3:
    case 6:
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v19 = *(unsigned __int8 *)(v18 + 345);
      uint64_t v20 = v18 + 344 + 16 * v19;
      *(double *)(v20 + 8) = v15;
      *(_DWORD *)(v20 + 16) = a6;
      int v21 = ((_BYTE)v19 + 1) & 3;
      *(unsigned char *)(v18 + 345) = v21;
      unsigned int v22 = *(unsigned __int8 *)(v18 + 344);
      if (v22 < 3) {
        unsigned __int8 v23 = v22 + 1;
      }
      else {
        unsigned __int8 v23 = 4;
      }
      *(unsigned char *)(v18 + 344) = v23;
      if (v23 < 2u)
      {
        DeviceFaultNotify("glmesrd_evt_ctrl.cpp", 438, "CntinCaptureUpdate", (char)"0");
        int v33 = 438;
LABEL_28:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_evt_ctrl.cpp", v33, "0");
      }
      unsigned int v24 = v21 - v23 + 4 - ((v21 - v23 + 4 + (((v21 - v23 + 4) & 0xC000u) >> 14)) & 0xFFFFFFFC);
      unsigned int v25 = ((_BYTE)v21 - 1) & 3;
      uint64_t v26 = v18 + 352;
      double v27 = ((double)(*(_DWORD *)(v18 + 352 + 16 * v25 + 8) - *(_DWORD *)(v18 + 352 + 16 * v24 + 8))
           * 1000.0
           * 0.0000305175781
           - (*(double *)(v18 + 352 + 16 * v25)
            - *(double *)(v18 + 352 + 16 * v24)))
          / (*(double *)(v18 + 352 + 16 * v25) - *(double *)(v18 + 352 + 16 * v24));
      *(double *)(v18 + 416) = v27;
      if (v22 >= 3) {
        unsigned int v22 = 3;
      }
      break;
    case 4:
    case 7:
      return;
    default:
      DeviceFaultNotify("glmesrd_evt_ctrl.cpp", 168, "gll_sysevt_rpc_time_captured", (char)"0");
      int v33 = 168;
      goto LABEL_28;
  }
  while (1)
  {
    uint64_t v28 = v26 + 16 * (((_BYTE)v24 + 1) & 3);
    double v29 = ((double)(*(_DWORD *)(v28 + 8) - *(_DWORD *)(v26 + 16 * (v24 & 3) + 8))
         * 1000.0
         * 0.0000305175781
         - (*(double *)v28
          - *(double *)(v26 + 16 * (v24 & 3))))
        / (*(double *)v28 - *(double *)(v26 + 16 * (v24 & 3)));
    if (fabs(v29) > 0.00001 || vabdd_f64(v29, v27) > 0.00000004) {
      break;
    }
    LOBYTE(v24) = v24 + 1;
    if (!--v22) {
      goto LABEL_18;
    }
  }
  GlCustomLog(12, "TCXO offset from CNTIN is too big (%.1g PPB)!\n", v29 * 1000000000.0);
  for (uint64_t i = 0; i != 64; i += 16)
  {
    uint64_t v31 = v18 + i;
    *(void *)(v31 + 352) = 0xBFF0000000000000;
    *(_DWORD *)(v31 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  *(void *)(v18 + 416) = 0;
  *(_WORD *)(v18 + 344) = 0;
  uint64_t v18 = *(void *)(a1 + 8);
  unsigned __int8 v23 = *(unsigned char *)(v18 + 344);
LABEL_18:
  if (v23 >= 2u)
  {
    long long v17 = *(void (**)(void))(**(void **)(v18 + 112) + 48);
LABEL_25:
    v17();
  }
}

uint64_t BlueFin::GlStream::GetStr(BlueFin::GlStream *this, int a2)
{
  if (*((_DWORD *)this + 6))
  {
    __int16 v6 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 256, "GetStr", (char)"m_uiBitOffset == 0");
    int v7 = 256;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 7))
  {
    __int16 v6 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 257, "GetStr", (char)"m_uiBitsRemainingInWord == 0");
    int v7 = 257;
    goto LABEL_8;
  }
  uint64_t v2 = *(unsigned int *)this;
  int v3 = v2 + a2;
  if ((v2 + a2) > *((_DWORD *)this + 4))
  {
    __int16 v6 = "m_uiOffset+size<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 259, "GetStr", (char)"m_uiOffset+size<=m_uiMaxOffset");
    int v7 = 259;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v7, v6);
  }
  uint64_t v4 = *((void *)this + 1) + v2;
  *(_DWORD *)this = v3;
  return v4;
}

unint64_t BlueFin::GlMeSrdRpcMiscAsicInit::gll_misc_rpc_nvram_response(unint64_t this, int a2, int a3, unsigned int *a4)
{
  if (a2 || a3 != 6)
  {
    if (a2 != 7 || a3 != 1)
    {
      DeviceFaultNotify("glmesrd_asicinit.cpp", 4236, "gll_misc_rpc_nvram_response", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 4236, "0");
    }
  }
  else
  {
    unint64_t v4 = this;
    BlueFin::GlMeSrdNvRamReader::ProcessRpcNvRamResponse((BlueFin::GlMeSrdNvRamReader *)(*(void *)(this + 8) + 168), a4, 6);
    __int16 v7 = 264;
    uint64_t v5 = *(void *)(v4 + 8);
    uint64_t v6 = *(void *)(v5 + 32);
    this = *(void *)(v5 + 8);
    *(void *)(v5 + 32) = this;
    do
    {
      unint64_t v8 = 0;
      if (BlueFin::patch_dispatch(this, v5, (unsigned __int8 *)&v7, &v8)) {
        this = v8;
      }
      else {
        this = (*(uint64_t (**)(uint64_t, __int16 *))(v5 + 32))(v5, &v7);
      }
      *(void *)(v5 + 32) = this;
    }
    while (this);
    *(void *)(v5 + 32) = v6;
  }
  return this;
}

unint64_t BlueFin::GlMeSrdEvtListener::OnRtcCaptured(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 19;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_burst_context(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3 = result;
  int v4 = a2[5];
  int v5 = a2[6];
  if (*((unsigned __int8 *)a2 + 9) + *((unsigned __int8 *)a2 + 8) + v4 + v5) {
    unint64_t result = GlCustomLog(14, "WARNING: Troughput problems; %d packets %d bytes lost\n",
  }
               *((unsigned __int8 *)a2 + 9) + *((unsigned __int8 *)a2 + 8),
               v5 + v4);
  if (*(unsigned char *)(*(void *)(*(void *)(v3 + 8) + 120) + 544))
  {
    unint64_t result = GlCustomLog(14, "SystemEvent::BurstContext(MsecUntilNextBurst %hu TimeStamp %u NumDiscarded HpMethods %u LpMethods %u HpBytes %hu Lpbytes %hu)\n", *a2, *((_DWORD *)a2 + 1), *((unsigned __int8 *)a2 + 8), *((unsigned __int8 *)a2 + 9), a2[5], a2[6]);
    if (a2[5] || a2[6] || *((unsigned char *)a2 + 8) || *((unsigned char *)a2 + 9))
    {
      DeviceFaultNotify("glmesrd_evt_ctrl.cpp", 258, "gll_sysevt_rpc_burst_context", (char)"context->num_discarded_hp_bytes == 0 && context->num_discarded_lp_bytes == 0 && context->num_discarded_hp_methods == 0 && context->num_discarded_lp_methods == 0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_evt_ctrl.cpp", 258, "context->num_discarded_hp_bytes == 0 && context->num_discarded_lp_bytes == 0 && context->num_discarded_hp_methods == 0 && context->num_discarded_lp_methods == 0");
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_radio_report(uint64_t a1, int a2, _OWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)(v3 + 256) = a2;
  *(_DWORD *)(v3 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  long long v5 = a3[2];
  long long v4 = a3[3];
  long long v6 = *(_OWORD *)((char *)a3 + 60);
  *(_OWORD *)(v3 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3[1];
  *(_OWORD *)(v3 + 324) = v6;
  *(_OWORD *)(v3 + 312) = v4;
  *(_OWORD *)(v3 + 296) = v5;
  *(_OWORD *)(v3 + 264) = *a3;
  uint64_t v7 = *(void *)(a1 + 8);
  *(_WORD *)(v7 + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  return (*(uint64_t (**)(void))(**(void **)(v7 + 112) + 64))();
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_heartbeat(BlueFin::GlMeSrdRpcEvtCtrl *this, unsigned int a2, int a3, int a4, __int16 a5, __int16 a6, __int16 a7, char a8)
{
  uint64_t v8 = *((void *)this + 1);
  *(double *)(v8 + 136) = (double)a2 * 0.001;
  *(_DWORD *)(v8 + 152) = a2;
  *(_DWORD *)(v8 + 156) = a3;
  *(_DWORD *)(v8 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4;
  *(_WORD *)(v8 + 164) = a5;
  *(_WORD *)(v8 + 166) = a6;
  *(_WORD *)(v8 + 168) = a7;
  *(unsigned char *)(v8 + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a8;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    (*(void (**)(uint64_t, void, void))(*(void *)(v8 + 128) + 24))(v8 + 128, 0, 0);
    uint64_t v8 = *((void *)this + 1);
  }
  unsigned int v10 = *(uint64_t (**)(void))(**(void **)(v8 + 112) + 16);

  return v10();
}

unint64_t BlueFin::GlMeSrdEvtListener::OnSyncinCaptured(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 17;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdEvtListener::OnRadioReportReceived(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 23;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::RestartSATs(uint64_t a1, int **a2)
{
  if (!BlueFin::GlSetBase::HasAll((int **)(a1 + 128), a2))
  {
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 556, "RestartSATs", (char)"m_otSetSatIdInUse.HasAll(rSetSatidToRestart)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 556, "m_otSetSatIdInUse.HasAll(rSetSatidToRestart)");
  }

  return BlueFin::GlSetBase::operator|=(a1 + 192, (uint64_t)a2);
}

BOOL BlueFin::GlPeHula::SetSensorValidityMask(BlueFin::GlPeHula *this, int **a2)
{
  __int16 v4 = (char *)this + 4177;
  BlueFin::GlPeExtSensorSet::GlPeExtSensorSet((uint64_t)v11, 0, 1u, 2u, 0x22u, 0x22u, 0x22u);
  BlueFin::GlPeExtSensorSet::GlPeExtSensorSet((uint64_t)v10, 3u, 4u, 5u, 0x1Au, 0x1Bu, 0x1Cu);
  *((unsigned char *)this + 1024) = BlueFin::GlSetBase::HasAll(a2, v11);
  BOOL result = BlueFin::GlSetBase::HasAll(a2, v10);
  int v6 = 0;
  *((unsigned char *)this + 584) = result;
  uint64_t v7 = *a2;
  int v8 = **a2;
  char *v4 = BYTE2(v8) & 1;
  v4[47] = (v8 & 0x20000) != 0;
  *((unsigned char *)this + 3008) = (v8 & 0x400) != 0;
  *((unsigned char *)this + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (v8 & 0x800) != 0;
  *((unsigned char *)this + 1225) = (v8 & 0x2000) != 0;
  *((unsigned char *)this + 128BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (v8 & 0x4000) != 0;
  *((unsigned char *)this + 2985) = (v8 & 0x8000) != 0;
  *((unsigned char *)this + 3216) = (v8 & 0x800000) != 0;
  if ((v8 & 0x40000) != 0)
  {
    if ((v7[1] & 8) != 0) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
  }
  *((_DWORD *)this + 105BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6;
  if ((v8 & 0x80000) != 0)
  {
    if ((v7[1] & 0x10) != 0) {
      int v9 = 2;
    }
    else {
      int v9 = 1;
    }
  }
  else
  {
    int v9 = 0;
  }
  *((_DWORD *)this + 1066) = v9;
  *((unsigned char *)this + 316BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (v8 & 0x400000) != 0;
  *((unsigned char *)this + 316BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = HIBYTE(v8) & 1;
  return result;
}

uint64_t BlueFin::GlPeExtSensorSet::GlPeExtSensorSet(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned __int16 a5, unsigned __int16 a6, unsigned __int16 a7)
{
  *(void *)(a1 + 12) = 0;
  *(void *)a1 = a1 + 12;
  *(unsigned char *)(a1 + 8) = 5;
  *(void *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  BlueFin::GlPeExtSensorSet::Add((void *)a1, a2);
  BlueFin::GlPeExtSensorSet::Add((void *)a1, a3);
  BlueFin::GlPeExtSensorSet::Add((void *)a1, a4);
  BlueFin::GlPeExtSensorSet::Add((void *)a1, a5);
  BlueFin::GlPeExtSensorSet::Add((void *)a1, a6);
  BlueFin::GlPeExtSensorSet::Add((void *)a1, a7);
  return a1;
}

void *BlueFin::GlPeExtSensorSet::Add(void *result, unsigned __int16 a2)
{
  if (a2 < 0x22u || a2 - 100 < 3 || a2 - 35 <= 1) {
    *(_DWORD *)(*result + 4 * (a2 >> 5)) |= 1 << a2;
  }
  return result;
}

double BlueFin::GlMeSrdAcqMgr::SetSignalAiding(BlueFin::GlMeSrdAcqMgr *this, BlueFin::GlMeSignalAidInfo *a2)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 104))
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 149, "SetSignalAiding", (char)"m_bAllocated");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 149, "m_bAllocated");
  }
  unint64_t v2 = 0;
  uint64_t v122 = &v124;
  char v123 = 8;
  long long v124 = 0u;
  long long v125 = 0u;
  uint64_t v132 = &unk_270EBB880;
  v134[0] = &unk_270EBA640;
  v134[1] = &v142;
  int v135 = &v133;
  unsigned int v136 = &v141;
  int v137 = 1;
  __int16 v138 = -17407;
  unsigned __int8 v139 = 16;
  do
    *((unsigned char *)v135 + v2++) = -1;
  while (v2 < HIBYTE(v138));
  if (v139)
  {
    for (unint64_t i = 0; i < v139; ++i)
      v136[i] = i;
    char v4 = v139 - 1;
  }
  else
  {
    char v4 = -1;
  }
  unsigned __int8 v140 = v4;
  unint64_t v5 = (char *)this + 8;
  uint64_t v6 = *((void *)this + 1);
  bzero(*(void **)(v6 + 22776), ((4 * *(unsigned __int8 *)(v6 + 22784) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 22824), ((4 * *(unsigned __int8 *)(v6 + 22832) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 22872), ((4 * *(unsigned __int8 *)(v6 + 22880) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 23016), ((4 * *(unsigned __int8 *)(v6 + 23024) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 23064), ((4 * *(unsigned __int8 *)(v6 + 23072) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 23112), ((4 * *(unsigned __int8 *)(v6 + 23120) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 22968), ((4 * *(unsigned __int8 *)(v6 + 22976) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 22920), ((4 * *(unsigned __int8 *)(v6 + 22928) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v6 + 23160), ((4 * *(unsigned __int8 *)(v6 + 23168) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v119 = v121;
  unsigned __int8 v120 = 8;
  memset(v121, 0, 32);
  *(_WORD *)(v6 + 24526) = 0;
  __int16 v7 = (*(uint64_t (**)(void))(**(void **)(v6 + 64) + 392))();
  int v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v5 + 64) + 832))(*(void *)(*(void *)v5 + 64), 8);
  int v9 = this;
  if (*((_WORD *)a2 + 7))
  {
    char v10 = v8;
    unint64_t v11 = 0;
    int v12 = 0;
    unsigned __int16 v13 = v7 - 3;
    int v80 = v8 ^ 1;
    uint64_t v14 = 4;
    do
    {
      if ((unsigned __int16)v12 >= v13) {
        char v15 = v10;
      }
      else {
        char v15 = 0;
      }
      if (v15) {
        break;
      }
      uint64_t v16 = *((void *)a2 + 2);
      uint64_t v17 = *(unsigned __int8 *)(v16 + v14 - 4);
      if (BlueFin::GlSvId::s_aucSvId2gnss[v17] != 7)
      {
        if ((v17 - 76) <= 0x3E)
        {
          char v18 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*((void *)v9 + 1) + 64) + 832))(*(void *)(*((void *)v9 + 1) + 64), 7);
          uint64_t v16 = *((void *)a2 + 2);
          if ((v18 & 1) == 0) {
            *(_DWORD *)(v16 + v14) &= ~0x400u;
          }
          int v9 = this;
        }
        uint64_t v19 = *((void *)v9 + 1);
        uint64_t v20 = *(unsigned __int16 *)(v19 + 24526);
        uint64_t v21 = *(void *)(v19 + 24528);
        *(_WORD *)(v19 + 24526) = v20 + 1;
        uint64_t v22 = v21 + 8 * v20;
        *(_WORD *)uint64_t v22 = *(_WORD *)(v16 + v14 - 4);
        *(_DWORD *)(v22 + 4) = *(_DWORD *)(v16 + v14);
        uint64_t v23 = v17 >> 5;
        int v24 = 1 << v17;
        *(_DWORD *)(*(void *)(v19 + 22776) + 4 * v23) |= 1 << v17;
        int v25 = *(_DWORD *)(v16 + v14);
        if (v25)
        {
          v119[v23] |= v24;
          int v25 = *(_DWORD *)(v16 + v14);
        }
        if ((v25 & 0xE) != 0)
        {
          *(_DWORD *)(*(void *)(v19 + 22824) + 4 * v23) |= v24;
          int v25 = *(_DWORD *)(v16 + v14);
        }
        if ((v25 & 0x100100) != 0)
        {
          *(_DWORD *)(*(void *)(v19 + 23016) + 4 * v23) |= v24;
          ++v12;
        }
        int v26 = (*(uint64_t (**)(void))(**(void **)(v19 + 64) + 352))(*(void *)(v19 + 64));
        uint64_t v27 = *((void *)a2 + 2);
        if (v26)
        {
          int v28 = *(_DWORD *)(v27 + v14);
          if ((unsigned __int16)v12 < v13) {
            int v29 = 1;
          }
          else {
            int v29 = v80;
          }
          uint64_t v30 = *((void *)this + 1);
          if ((v28 & 0x200) != 0 && v29)
          {
            *(_DWORD *)(*(void *)(v30 + 23064) + 4 * v23) |= v24;
            ++v12;
            int v28 = *(_DWORD *)(v27 + v14);
          }
          int v31 = v80;
          if ((unsigned __int16)v12 < v13) {
            int v31 = 1;
          }
          if ((v28 & 0x400) != 0 && v31)
          {
            *(_DWORD *)(*(void *)(v30 + 23112) + 4 * v23) |= v24;
            ++v12;
          }
          if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v30 + 64) + 832))(*(void *)(v30 + 64), 9))
          {
            if ((unsigned __int16)v12 < v13) {
              int v32 = 1;
            }
            else {
              int v32 = v80;
            }
            uint64_t v33 = *((void *)this + 1);
            if ((*(unsigned char *)(*((void *)a2 + 2) + v14 + 2) & 1) != 0 && v32)
            {
              *(_DWORD *)(*(void *)(v33 + 22920) + 4 * v23) |= v24;
              ++v12;
            }
          }
          else
          {
            uint64_t v33 = *((void *)this + 1);
          }
          int v34 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v33 + 64) + 832))(*(void *)(v33 + 64), 10);
          uint64_t v27 = *((void *)a2 + 2);
          if (v34)
          {
            int v35 = v80;
            if ((unsigned __int16)v12 < v13) {
              int v35 = 1;
            }
            if ((*(unsigned char *)(v27 + v14 + 3) & 1) != 0 && v35)
            {
              *(_DWORD *)(*(void *)(*((void *)this + 1) + 22968) + 4 * v23) |= v24;
              ++v12;
            }
          }
        }
        int v36 = *(_DWORD *)(v27 + v14);
        if ((v36 & 2) != 0)
        {
          *(_DWORD *)(*(void *)(*((void *)this + 1) + 22872) + 4 * v23) |= v24;
          int v36 = *(_DWORD *)(v27 + v14);
        }
        if ((v36 & 0x80) != 0)
        {
          *((_DWORD *)v122 + v23) |= v24;
          int v36 = *(_DWORD *)(v27 + v14);
        }
        int v37 = v36 & 0x3E000000;
        if ((v36 & 0x3E000000) != 0)
        {
          if (v140 != 255)
          {
            uint64_t v38 = BlueFin::GlArray::Add((BlueFin::GlArray *)v134, v17);
            if (!v38)
            {
              DeviceFaultNotify("glmesrd_acq_mgr.cpp", 271, "SetSignalAiding", (char)"pucCfgId");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 271, "pucCfgId");
            }
            if (v37 <= 0x7FFFFFF)
            {
              if (v37 != 0x2000000)
              {
                int v9 = this;
                if (v37 == 0x4000000)
                {
                  char v39 = 6;
                  goto LABEL_74;
                }
LABEL_73:
                char v39 = -1;
                goto LABEL_74;
              }
              char v39 = 9;
            }
            else
            {
              if (v37 != 0x8000000)
              {
                int v9 = this;
                if (v37 == 0x10000000)
                {
                  char v39 = 13;
                  goto LABEL_74;
                }
                if (v37 == 0x20000000)
                {
                  char v39 = 14;
LABEL_74:
                  *uint64_t v38 = v39;
                  goto LABEL_75;
                }
                goto LABEL_73;
              }
              char v39 = 3;
            }
            int v9 = this;
            goto LABEL_74;
          }
          GlCustomLog(15, "SvId %d rejected by ME grid set because set is full!\n", v17);
        }
        int v9 = this;
      }
LABEL_75:
      ++v11;
      v14 += 8;
    }
    while (v11 < *((unsigned __int16 *)a2 + 7));
  }
  uint64_t v40 = (char *)v9 + 8;
  uint64_t v41 = *((void *)v9 + 1);
  BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)(v41 + 18352), (uint64_t)v126);
  BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*(void **)(v41 + 14360), (uint64_t)v126, (uint64_t)&v117);
  uint64_t v42 = *(void **)v40;
  uint64_t v43 = this;
  if (!BlueFin::GlSetBase::HasAll((int **)(*(void *)v40 + 22776), &v117)) {
    goto LABEL_82;
  }
  if (v118 >= v120) {
    unint64_t v44 = v120;
  }
  else {
    unint64_t v44 = v118;
  }
  if (!v44) {
    goto LABEL_87;
  }
  if ((*v117 & *v119) == 0)
  {
    unint64_t v77 = 0;
    while (v44 - 1 != v77)
    {
      int v78 = v119[v77 + 1];
      int v79 = v117[++v77];
      if ((v79 & v78) != 0)
      {
        if (v77 < v44) {
          goto LABEL_82;
        }
        break;
      }
    }
  }
  else
  {
LABEL_82:
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)(v42 + 2294), (uint64_t)&__src);
    LOBYTE(v126[0]) = v110;
    memcpy(&v127, __src, 4 * v110);
    v126[1] = 0;
    HIBYTE(v126[0]) = 0;
    *(_DWORD *)&v126[2] = v127;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    uint64_t v42 = (void *)*((void *)this + 1);
    while (HIBYTE(v126[0]) != LOBYTE(v126[0]))
    {
      signed __int16 v45 = v126[1];
      BlueFin::GlMeSrdSatMgr::GetSvid(v42 + 440, LOBYTE(v126[1]), &__src);
      uint64_t v42 = (void *)*((void *)this + 1);
      unint64_t v46 = (unint64_t)__src >> 5;
      uint64_t v47 = 1 << (__src & 0x1F);
      if ((v47 & *(_DWORD *)(v42[2847] + 4 * v46)) == 0 || (v47 & v119[v46]) != 0) {
        *(_DWORD *)(v42[3067] + 4 * (v45 >> 5)) |= 1 << v45;
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    }
  }
LABEL_87:
  BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(v42 + 440, (uint64_t)(v42 + 1740), (uint64_t)v116);
  uint64_t v48 = *((void *)this + 1);
  if (!BlueFin::GlSetBase::HasAll((int **)(v48 + 22776), v116))
  {
    LOBYTE(v126[0]) = *(unsigned char *)(v48 + 13928);
    memcpy(&v127, *(const void **)(v48 + 13920), 4 * LOBYTE(v126[0]));
    v126[1] = 0;
    HIBYTE(v126[0]) = 0;
    *(_DWORD *)&v126[2] = v127;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    while (HIBYTE(v126[0]) != LOBYTE(v126[0]))
    {
      signed __int16 v49 = v126[1];
      BlueFin::GlMeSrdSatMgr::GetSvid((void *)(v48 + 3520), LOBYTE(v126[1]), &__src);
      uint64_t v48 = *((void *)this + 1);
      if ((((unint64_t)*(unsigned int *)(*(void *)(v48 + 22776)
                                               + (((unint64_t)__src >> 3) & 0x1C)) >> (__src & 0x1F)) & 1) == 0)
        *(_DWORD *)(*(void *)(v48 + 24536) + 4 * (v49 >> 5)) |= 1 << v49;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    }
  }
  BlueFin::GlMeSrdAcqMgrSm::UpdateSignalAiding((BlueFin::GlMeSrdAcqMgrSm *)v48);
  uint64_t v113 = v115;
  char v114 = 8;
  memset(v115, 0, 32);
  uint64_t v50 = *((void *)this + 1);
  LOBYTE(v126[0]) = *(unsigned char *)(v50 + 22784);
  memcpy(&v127, *(const void **)(v50 + 22776), 4 * LOBYTE(v126[0]));
  v126[1] = 0;
  HIBYTE(v126[0]) = 0;
  *(_DWORD *)&v126[2] = v127;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
  if (HIBYTE(v126[0]) != LOBYTE(v126[0]))
  {
    uint64_t v51 = *(void *)(v50 + 22872);
    do
    {
      uint64_t v52 = LOBYTE(v126[1]) >> 5;
      if (((unint64_t)*(unsigned int *)(v51 + 4 * v52) >> (v126[1] & 0x1F))) {
        v115[v52] |= 1 << (v126[1] & 0x1F);
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    }
    while (HIBYTE(v126[0]) != LOBYTE(v126[0]));
  }
  BlueFin::GlMeSrdSatMgr::SetDataFrmsEnabled((BlueFin::GlMeSrdSatMgr *)(v50 + 3520), (const BlueFin::GlSvIdSet *)&v113);
  uint64_t v53 = *((void *)this + 1);
  BlueFin::GlSetBase::operator=(v53 + 19952, (uint64_t)&v122);
  long long v54 = v125;
  *(_OWORD *)(v53 + 19964) = v124;
  *(_OWORD *)(v53 + 1998BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v54;
  BlueFin::GlMeSrdSatTrackMgr::RequestGrids((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)this + 1) + 14352), (const BlueFin::GlSvIdArray *)&v132);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v111, 0x10u, (const void **)(*((void *)this + 1) + 18352));
  LOBYTE(v126[0]) = v110;
  memcpy(&v127, __src, 4 * v110);
  v126[1] = 0;
  HIBYTE(v126[0]) = 0;
  *(_DWORD *)&v126[2] = v127;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
  if (HIBYTE(v126[0]) != LOBYTE(v126[0]))
  {
    uint64_t v55 = (unsigned int *)v111;
    do
    {
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v106, v126[1]);
      unint64_t v56 = v106[0];
      BlueFin::GlMeSrdSatMgr::GetSvid((void *)(*((void *)v43 + 1) + 3520), v106[0], &v102);
      unsigned int TrackChannel = BlueFin::GlMeSrdSatMgr::GetTrackChannel(*((void *)v43 + 1) + 3520, v106);
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v55, 8u, (const void **)(*((void *)v43 + 1) + 18464));
      unsigned int v58 = v102;
      unint64_t v59 = (unint64_t)v102 >> 5;
      uint64_t v60 = *((unsigned int *)__src + v59);
      uint64_t v61 = *((void *)v43 + 1);
      uint64_t v62 = *(unsigned int *)(*(void *)(v61 + 22872) + 4 * v59);
      uint64_t v81 = *(unsigned int *)(*(void *)(v61 + 24536) + 4 * (v56 >> 5));
      __int16 v63 = *(_WORD *)(v61 + 32 * TrackChannel + 14384);
      uint64_t v64 = v55;
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v55, 4u, (const void **)(v61 + 18432));
      uint64_t v65 = *((unsigned int *)__src + (v56 >> 5));
      if (((*(uint64_t (**)(void))(**(void **)(*((void *)v43 + 1) + 64) + 256))() & 1) == 0)
      {
        char v66 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 64) + 264))(*(void *)(*((void *)this + 1) + 64));
        char v67 = v58 < 0x8B ? 1 : v66;
        if ((v67 & 1) == 0)
        {
          uint64_t v68 = 1 << (v58 & 0x1F);
          uint64_t v69 = v68 & v60;
          int v70 = (v68 & v62) != 0;
          int v71 = v69 != 0;
          if (v58 <= 0xAE)
          {
            if ((_BYTE)v63)
            {
              uint64_t v72 = 1 << (v56 & 0x1F);
              if ((v72 & v65) == 0 && (v72 & v81) == 0 && v71 != v70)
              {
                uint64_t v73 = *((void *)this + 1);
                *(_DWORD *)(*(void *)(v73 + 24536) + 4 * (v56 >> 5)) |= 1 << (v56 & 0x1F);
                *(_DWORD *)(*(void *)(v73 + 23160) + 4 * v59) |= 1 << (v58 & 0x1F);
              }
            }
          }
        }
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
      uint64_t v43 = this;
      uint64_t v55 = v64;
    }
    while (HIBYTE(v126[0]) != LOBYTE(v126[0]));
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(*((void *)v43 + 1) + 64) + 832))(*(void *)(*((void *)v43 + 1) + 64), 11))
  {
    BlueFin::GlMeSignalAidInfo::GetSignalIds((char *)a2, (uint64_t)&__src);
    *(void *)double v106 = v108;
    char v107 = 19;
    memset(v108, 0, sizeof(v108));
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v102, (unsigned int *)v104, 0x10u, (const void **)(*((void *)v43 + 1) + 18352));
    LOBYTE(v126[0]) = v103;
    memcpy(&v127, v102, 4 * v103);
    v126[1] = 0;
    HIBYTE(v126[0]) = 0;
    *(_DWORD *)&v126[2] = v127;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    while (HIBYTE(v126[0]) != LOBYTE(v126[0]))
    {
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)&v102, v126[1]);
      BlueFin::GlMeSrdSatMgr::GetSvid((void *)(*((void *)v43 + 1) + 3520), v102, &v97);
      __int16 v75 = 575;
      if (HIDWORD(v102) != -1 && ((_BYTE)v97 + 67) >= 0x44u)
      {
        uint64_t v76 = BlueFin::GlSvId::s_aucSvId2gnss[v97];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * SHIDWORD(v102)
                                                                                     - SHIDWORD(v102)
                                                                                     + v76] == 255)
          __int16 v75 = 575;
        else {
          __int16 v75 = BlueFin::GlSignalId::s_ausGnss2signalId[v76]
        }
              + v97
              - BlueFin::GlSvId::s_aucGnss2minSvId[v76]
              + WORD2(v102) * BlueFin::GlSvId::s_aucGnss2numSvId[v76];
      }
      *(_DWORD *)(*(void *)v106 + 4 * (v75 >> 5)) |= 1 << v75;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v126);
    }
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v92, (unsigned int *)&v93, 0x13u, (const void **)v43 + 2);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 19;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, sizeof(v131));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v92, (int **)v126, (int **)v106);
    BlueFin::GlSetBase::operator=((uint64_t)&v92, (uint64_t)v126);
    long long v95 = v130;
    *(_OWORD *)uint64_t v96 = *(_OWORD *)v131;
    *(_OWORD *)&v96[12] = *(_OWORD *)&v131[12];
    long long v93 = v128;
    long long v94 = v129;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v97, (unsigned int *)&v98, 0x13u, &v92);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 19;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, sizeof(v131));
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v97, (int **)v126);
    BlueFin::GlSetBase::operator=((uint64_t)&v97, (uint64_t)v126);
    long long v100 = v130;
    *(_OWORD *)uint64_t v101 = *(_OWORD *)v131;
    *(_OWORD *)&v101[12] = *(_OWORD *)&v131[12];
    long long v98 = v128;
    long long v99 = v129;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v97);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v102, (unsigned int *)v104, 0x13u, &v97);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 19;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, sizeof(v131));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v102, (int **)v126, (int **)&__src);
    BlueFin::GlSetBase::operator=((uint64_t)&v102, (uint64_t)v126);
    v104[2] = v130;
    *(_OWORD *)uint64_t v105 = *(_OWORD *)v131;
    *(_OWORD *)&v105[12] = *(_OWORD *)&v131[12];
    v104[0] = v128;
    v104[1] = v129;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v92, (unsigned int *)&v93, 0x13u, (const void **)v43 + 2);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 19;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, sizeof(v131));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v92, (int **)v126, (int **)v106);
    BlueFin::GlSetBase::operator=((uint64_t)&v92, (uint64_t)v126);
    long long v95 = v130;
    *(_OWORD *)uint64_t v96 = *(_OWORD *)v131;
    *(_OWORD *)&v96[12] = *(_OWORD *)&v131[12];
    long long v93 = v128;
    long long v94 = v129;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v87, (unsigned int *)&v88, 0x13u, (const void **)&__src);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 19;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, sizeof(v131));
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v87, (int **)v126);
    BlueFin::GlSetBase::operator=((uint64_t)&v87, (uint64_t)v126);
    long long v90 = v130;
    *(_OWORD *)unsigned int v91 = *(_OWORD *)v131;
    *(_OWORD *)&v91[12] = *(_OWORD *)&v131[12];
    long long v88 = v128;
    long long v89 = v129;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v87);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v97, (unsigned int *)&v98, 0x13u, &v92);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 19;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, sizeof(v131));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v97, (int **)v126, (int **)&v87);
    BlueFin::GlSetBase::operator=((uint64_t)&v97, (uint64_t)v126);
    long long v100 = v130;
    *(_OWORD *)uint64_t v101 = *(_OWORD *)v131;
    *(_OWORD *)&v101[12] = *(_OWORD *)&v131[12];
    long long v98 = v128;
    long long v99 = v129;
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlMeSrdAcqMgr *)((char *)v43 + 16), (uint64_t)v86);
    BlueFin::GlSvIdSet::operator~(v86, (uint64_t)&v87);
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&__src, (uint64_t)v85);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v92, (unsigned int *)&v93, 8u, &v87);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 8;
    long long v128 = 0u;
    long long v129 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v92, (int **)v126, v85);
    BlueFin::GlSetBase::operator=((uint64_t)&v92, (uint64_t)v126);
    long long v93 = v128;
    long long v94 = v129;
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlMeSrdAcqMgr *)((char *)v43 + 16), (uint64_t)v86);
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&__src, (uint64_t)v84);
    BlueFin::GlSvIdSet::operator~(v84, (uint64_t)v85);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v87, (unsigned int *)&v88, 8u, v86);
    *(void *)int v126 = &v128;
    LOBYTE(v127) = 8;
    long long v128 = 0u;
    long long v129 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v87, (int **)v126, v85);
    BlueFin::GlSetBase::operator=((uint64_t)&v87, (uint64_t)v126);
    long long v88 = v128;
    long long v89 = v129;
    BlueFin::GlSignalIdSet::RemoveSvIds((BlueFin::GlSignalIdSet *)&v102, (const BlueFin::GlSvIdSet *)&v92);
    BlueFin::GlSignalIdSet::RemoveSvIds((BlueFin::GlSignalIdSet *)&v97, (const BlueFin::GlSvIdSet *)&v87);
    BlueFin::GlMeSrdSatTrackMgr::AddCarriers((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)v43 + 1) + 14352), (const BlueFin::GlSignalIdSet *)&v102);
    BlueFin::GlMeSrdSatTrackMgr::RemoveCarriers((BlueFin::GlMeSrdSatTrackMgr *)(*((void *)v43 + 1) + 14352), (const BlueFin::GlSignalIdSet *)&v97);
    BlueFin::GlSetBase::operator=((uint64_t)v43 + 16, (uint64_t)&__src);
    *(_OWORD *)((char *)v43 + 44) = v111[1];
    *(_OWORD *)((char *)v43 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v111[2];
    *(_OWORD *)((char *)v43 + 76) = *(_OWORD *)v112;
    *(_OWORD *)((char *)v43 + 88) = *(_OWORD *)&v112[12];
    double result = *(double *)v111;
    *(_OWORD *)((char *)v43 + 28) = v111[0];
  }
  return result;
}

unint64_t BlueFin::GlMeSrdAsicConfig::IsFeatureSupported(uint64_t a1, __int16 a2)
{
  return ((unint64_t)*(unsigned int *)(*(void *)(a1 + 1616) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsMultiCarrSatSupported(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1486);
}

unsigned __int8 *BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 12) = 0u;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 8;
  *(_OWORD *)(a3 + 28) = 0u;
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  memcpy(v11, *(const void **)a2, 4 * v7);
  *(_WORD *)int v9 = 0;
  unsigned __int8 v8 = 0;
  int v10 = v11[0];
  for (double result = BlueFin::GlSetIterator::operator++(&v7); v8 != v7; double result = BlueFin::GlSetIterator::operator++(&v7))
  {
    BlueFin::GlMeSrdSatMgr::GetSvid(a1, v9[0], &v6);
    *(_DWORD *)(*(void *)a3 + (((unint64_t)v6 >> 3) & 0x1C)) |= 1 << v6;
  }
  return result;
}

BOOL BlueFin::GlSetBase::HasAll(int **this, int **a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 8);
  uint64_t v3 = *((unsigned __int8 *)this + 8);
  if (v2 >= v3) {
    uint64_t v4 = *((unsigned __int8 *)this + 8);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)a2 + 8);
  }
  if (v4)
  {
    unint64_t v5 = *this;
    unsigned __int8 v6 = *a2;
    while (1)
    {
      int v8 = *v5++;
      int v7 = v8;
      int v9 = *v6++;
      if ((v9 & ~v7) != 0) {
        return 0;
      }
      if (!--v4) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v2 <= v3)
    {
      return 1;
    }
    else
    {
      do
      {
        int v10 = (*a2)[v3];
        BOOL result = v10 == 0;
        if (v10) {
          break;
        }
        ++v3;
      }
      while (v2 != v3);
    }
  }
  return result;
}

uint64_t BlueFin::GlSignalIdSet::setSignalIdLimits(BlueFin::GlSignalIdSet *this)
{
  int ULong = BlueFin::GlSetBase::GetULong(this, 0);
  uint64_t result = BlueFin::GlSetBase::SetULong((uint64_t)this, 0, ULong);
  unsigned int v4 = (unsigned __int16)(32 * (*((unsigned char *)this + 8) & 0x3F) - 1);
  if (v4 >= 0x240)
  {
    unsigned int v5 = 575;
    unsigned int v6 = 575;
    do
    {
      int v7 = v6 & 0x1F;
      if ((v6 & 0x1F) != 0)
      {
        unsigned int v8 = (v6 >> 5);
        int v9 = BlueFin::GlSetBase::GetULong(this, v8);
        uint64_t result = BlueFin::GlSetBase::SetULong((uint64_t)this, v8, v9 & ~(-1 << v7));
        v5 -= v7;
      }
      else
      {
        uint64_t result = BlueFin::GlSetBase::SetULong((uint64_t)this, (v6 >> 5), 0);
      }
      unsigned int v6 = v5 + 32;
      unsigned int v5 = (unsigned __int16)(v5 + 32);
    }
    while (v5 < v4);
  }
  return result;
}

void *BlueFin::GlMeSrdSatTrackMgr::AddSatCarr(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSatCarrId *a2)
{
  if (((*(uint64_t (**)(void))(**((void **)this + 3) + 352))(*((void *)this + 3)) & 1) != 0
    || BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4000)) >= 0x7B)
  {
    int v4 = *(unsigned __int8 *)a2;
    SignalIndexStr = BlueFin::GlSatCarrId::GetSignalIndexStr(a2);
    GlCustomLog(14, "GlMeSrdSatTrackMgr::AddSatCarr: Sat %u CarrBand %s\n", v4, SignalIndexStr);
    unsigned __int8 v20 = *((unsigned char *)this + 4008);
    memcpy(v24, *((const void **)this + 500), 4 * v20);
    unsigned __int16 v22 = 0;
    unsigned __int8 v21 = 0;
    int v23 = v24[0];
    BlueFin::GlSetIterator::operator++(&v20);
    while (v21 != v20)
    {
      unsigned int v6 = v22;
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v19, v22);
      int v7 = v19[0];
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v18, v6);
      unsigned int v8 = BlueFin::GlSatCarrId::GetSignalIndexStr((BlueFin::GlSatCarrId *)v18);
      GlCustomLog(14, "    [AddSatCarr]InUse: Sat %u CarrBand %s\n", v7, v8);
      BlueFin::GlSetIterator::operator++(&v20);
    }
    int v9 = BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4000));
    GlCustomLog(14, "    [AddSatCarr]InUseCnt: %u of %u\n", v9, 123);
  }
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4000)) >= 0x7B)
  {
    uint64_t v16 = "m_otSetSatCarrIdInUse.Cnt() < NUM_OF_TRACKSNIFF";
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 92, "AddSatCarr", (char)"m_otSetSatCarrIdInUse.Cnt() < NUM_OF_TRACKSNIFF");
    int v17 = 92;
    goto LABEL_11;
  }
  unsigned __int8 v20 = *((unsigned char *)this + 3976);
  memcpy(v24, *((const void **)this + 496), 4 * v20);
  unsigned __int16 v22 = 0;
  unsigned __int8 v21 = 0;
  int v23 = v24[0];
  BlueFin::GlSetIterator::operator++(&v20);
  if (v21 == v20)
  {
    uint64_t v16 = "!it.last()";
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 95, "AddSatCarr", (char)"!it.last()");
    int v17 = 95;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", v17, v16);
  }
  uint64_t v10 = v22;
  BlueFin::GlSetBase::Remove((uint64_t)this + 3968, v22);
  unsigned int v11 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  unsigned int v12 = v11 >> 5;
  int v13 = 1 << v11;
  *(_DWORD *)(*((void *)this + 500) + 4 * v12) |= v13;
  *(_DWORD *)(*((void *)this + 520) + 4 * v12) |= v13;
  uint64_t v14 = (char *)this + 32 * v10;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_DWORD *)v14 + 9) = -1027080192;
  *((_DWORD *)v14 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_WORD *)v14 + 28) = 0;
  return BlueFin::GlMeSrdSatMgr::SetTrackChannel(*((void **)this + 1), a2, v10);
}

uint64_t BlueFin::GlSatCarrId::GlSatCarrId(uint64_t this, unsigned int a2)
{
  if (a2 >= 0x190)
  {
    DeviceFaultNotify("glmesrd_sat_carr_id.cpp", 41, "GlSatCarrId", (char)"usIndex < NUM_SAT_CARR_IDS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_carr_id.cpp", 41, "usIndex < NUM_SAT_CARR_IDS");
  }
  unsigned int v2 = (5243 * (a2 >> 2)) >> 17;
  *(_DWORD *)(this + 4) = v2;
  *(unsigned char *)this = a2 - 100 * v2;
  return this;
}

char *BlueFin::GlSatCarrId::GetSignalIndexStr(BlueFin::GlSatCarrId *this)
{
  uint64_t v1 = *((int *)this + 1);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glmesrd_sat_carr_id.cpp", 59, "GetSignalIndexStr", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_carr_id.cpp", 59, "0");
  }
  return off_2655D84A8[v1];
}

void *BlueFin::GlMeSrdSatMgr::SetTrackChannel(void *this, const BlueFin::GlSatCarrId *a2, char a3)
{
  unint64_t v3 = *(unsigned __int8 *)a2;
  uint64_t v4 = *((unsigned int *)a2 + 1);
  uint64_t v5 = 1 << (v3 & 0x1F);
  if ((v5 & *(_DWORD *)(this[15] + 4 * (v3 >> 5))) == 0
    && (v5 & *(_DWORD *)(this[11] + 4 * (v3 >> 5))) == 0)
  {
    unsigned int v6 = "IsSatAllocated(ucSatId)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 892, "SetTrackChannel", (char)"IsSatAllocated(ucSatId)");
    int v7 = 892;
    goto LABEL_7;
  }
  if (v4 >= 4)
  {
    unsigned int v6 = "eSignal < _DIM(m_aotSatData[ucSatId].aucTrackChannel)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 893, "SetTrackChannel", (char)"eSignal < _DIM(m_aotSatData[ucSatId].aucTrackChannel)");
    int v7 = 893;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v7, v6);
  }
  *(_DWORD *)(this[35] + 4 * ((v3 + 100 * v4) >> 5)) |= 1 << (v3 + 100 * v4);
  *(unsigned char *)(this[786] + 52 * v3 + v4 + 24) = a3;
  return this;
}

uint64_t BlueFin::GlReqSm::sendMeSignalAiding(BlueFin::GlReqSm *this, const BlueFin::GlMeSignalAidInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, char a20,__int16 a21,long long *a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48)
{
  uint64_t v50 = *((void *)this + 784);
  uint64_t v51 = (unsigned char *)(v50 + 26289);
  if (*(_DWORD *)(v50 + 26292) == 2 && *(_DWORD *)(*((void *)this + 788) + 92336) >= 0x1Fu)
  {
    return BlueFin::GlReqSm::sendMeSignalAidingSwitch2L5Only(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48);
  }
  else if (*v51 && ((int v53 = *(_DWORD *)(v50 + 48), (v53 - 4) >= 5) ? (v54 = v53 == 2) : (v54 = 1), v54))
  {
    return BlueFin::GlReqSm::sendMeSignalAidingTestFPGA(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, HIDWORD(a13), a14, a15, a16, a17, a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48);
  }
  else if (v51[44])
  {
    return BlueFin::GlReqSm::sendMeSignalAidingWithBDSPriority(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48);
  }
  else
  {
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(const BlueFin::GlMeSignalAidInfo *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
    }
    BlueFin::GlMeSignalAidInfo::Print((uint64_t)a2, 0xEu, 0);
    BlueFin::GlMeSignalAidInfo::GetSignalIds((char *)a2, (uint64_t)v55);
    (*(void (**)(void, unsigned char *))(**((void **)this + 787) + 96))(*((void *)this + 787), v55);
    return (*(uint64_t (**)(void, const BlueFin::GlMeSignalAidInfo *))(**((void **)this + 39) + 232))(*((void *)this + 39), a2);
  }
}

char *BlueFin::GlMeSignalAidInfo::GetSignalIds@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  uint64_t v2 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 19;
  *(_OWORD *)(a2 + 28) = 0u;
  *(_OWORD *)(a2 + 44) = 0u;
  *(_OWORD *)(a2 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v3 = *((unsigned __int16 *)this + 7);
  if (*((_WORD *)this + 7))
  {
    uint64_t v4 = (_DWORD *)(*((void *)this + 2) + 4);
    this = BlueFin::GlSvId::s_aucGnss2minSvId;
    do
    {
      int v5 = *v4;
      if ((*v4 & 0x100100) != 0)
      {
        if ((*((_WORD *)v4 - 2) + 67) < 0x44u
          || (uint64_t v6 = *((_WORD *)v4 - 2),
              uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[v6],
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v7] == 255))
        {
          __int16 v8 = 575;
        }
        else
        {
          __int16 v8 = BlueFin::GlSignalId::s_ausGnss2signalId[v7]
             + v6
             - BlueFin::GlSvId::s_aucGnss2minSvId[v7];
        }
        *(_DWORD *)(v2 + 4 * (v8 >> 5)) |= 1 << v8;
        int v5 = *v4;
      }
      if ((v5 & 0x200) != 0)
      {
        if ((*((_WORD *)v4 - 2) + 67) < 0x44u
          || (uint64_t v9 = *((_WORD *)v4 - 2),
              uint64_t v10 = BlueFin::GlSvId::s_aucSvId2gnss[v9],
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v10 + 7] == 255))
        {
          __int16 v11 = 575;
        }
        else
        {
          __int16 v11 = BlueFin::GlSignalId::s_ausGnss2signalId[v10]
              + v9
              + BlueFin::GlSvId::s_aucGnss2numSvId[v10]
              - BlueFin::GlSvId::s_aucGnss2minSvId[v10];
        }
        *(_DWORD *)(v2 + 4 * (v11 >> 5)) |= 1 << v11;
        int v5 = *v4;
      }
      if ((v5 & 0x400) != 0)
      {
        if ((*((_WORD *)v4 - 2) + 67) < 0x44u
          || (uint64_t v12 = *((_WORD *)v4 - 2),
              uint64_t v13 = BlueFin::GlSvId::s_aucSvId2gnss[v12],
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v13 + 14] == 255))
        {
          __int16 v14 = 575;
        }
        else
        {
          __int16 v14 = BlueFin::GlSignalId::s_ausGnss2signalId[v13]
              + v12
              - BlueFin::GlSvId::s_aucGnss2minSvId[v13]
              + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v13];
        }
        *(_DWORD *)(v2 + 4 * (v14 >> 5)) |= 1 << v14;
        int v5 = *v4;
      }
      if ((v5 & 0x1010000) != 0)
      {
        if ((*((_WORD *)v4 - 2) + 67) < 0x44u
          || (uint64_t v15 = *((_WORD *)v4 - 2),
              uint64_t v16 = BlueFin::GlSvId::s_aucSvId2gnss[v15],
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v16 + 21] == 255))
        {
          __int16 v17 = 575;
        }
        else
        {
          __int16 v17 = BlueFin::GlSignalId::s_ausGnss2signalId[v16]
              + v15
              - BlueFin::GlSvId::s_aucGnss2minSvId[v16]
              + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v16];
        }
        *(_DWORD *)(v2 + 4 * (v17 >> 5)) |= 1 << v17;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t BlueFin::GlMeSignalAidInfo::Print(uint64_t this, unsigned __int8 a2, char a3)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        GlCustomLog(a2, "SIGAID(%2u) LMS %u:", *(unsigned __int16 *)(v5 + 14), *(_DWORD *)(v5 + 8));
        uint64_t v57 = v59;
        char v58 = 8;
        memset(v59, 0, 32);
        if (*(_WORD *)(v5 + 14))
        {
          uint64_t v6 = 0;
          unint64_t v7 = 0;
          do
          {
            unint64_t v8 = *(unsigned __int16 *)(*(void *)(v5 + 16) + v6);
            *(_DWORD *)&v57[(v8 >> 3) & 0x1C] |= 1 << v8;
            GlCustomLog(a2, "%3u ", v8);
            ++v7;
            v6 += 8;
          }
          while (v7 < *(unsigned __int16 *)(v5 + 14));
        }
        this = GlCustomLog(a2, "\n");
        if (a3)
        {
          GlCustomLog(a2, "SIGAID(%02u): LMS %u SvId, ", *(unsigned __int16 *)(v5 + 14), *(_DWORD *)(v5 + 8));
          for (uint64_t i = 0; i != 7; ++i)
          {
            uint64_t v10 = &BlueFin::GlSvIdSet::csm_aulGlSvIdSet[2 * i];
            signed __int16 v49 = &v51;
            char v50 = 8;
            long long v11 = v10[1];
            long long v51 = *v10;
            long long v52 = v11;
            uint64_t v12 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v53, (unsigned int *)&v55, 8u, (const void **)&v57);
            signed __int16 v45 = &v47;
            LOBYTE(v46) = 8;
            long long v47 = 0u;
            long long v48 = 0u;
            BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v12, (int **)&v45, (int **)&v49);
            BlueFin::GlSetBase::operator=((uint64_t)&v53, (uint64_t)&v45);
            unsigned int v13 = 0;
            long long v55 = v47;
            long long v56 = v48;
            __int16 v14 = &v53[4 * v54 - 4];
            do
            {
              if (*(_DWORD *)v14)
              {
                unsigned int v15 = *(_DWORD *)v14 - (((*(_DWORD *)v14 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v14 >> 2) & 0x9249249));
                unsigned int v13 = ((v15 + (v15 >> 3)) & 0xC71C71C7) + v13 - 63 * (((v15 + (v15 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              v14 -= 4;
            }
            while (v14 >= v53);
            uint64_t v16 = "INV";
            if (i <= 6) {
              uint64_t v16 = off_2655D8250[(int)i];
            }
            __int16 v17 = "\n";
            if (i != 6) {
              __int16 v17 = ",";
            }
            GlCustomLog(a2, " %u %s%s", v13, v16, v17);
          }
          for (uint64_t j = 0; j != 7; ++j)
          {
            uint64_t v19 = &BlueFin::GlSvIdSet::csm_aulGlSvIdSet[2 * j];
            signed __int16 v49 = &v51;
            char v50 = 8;
            long long v20 = v19[1];
            long long v51 = *v19;
            long long v52 = v20;
            unsigned __int8 v21 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v53, (unsigned int *)&v55, 8u, (const void **)&v57);
            signed __int16 v45 = &v47;
            LOBYTE(v46) = 8;
            long long v47 = 0u;
            long long v48 = 0u;
            BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v21, (int **)&v45, (int **)&v49);
            BlueFin::GlSetBase::operator=((uint64_t)&v53, (uint64_t)&v45);
            long long v55 = v47;
            long long v56 = v48;
            unsigned __int16 v22 = "INV";
            if (j <= 6) {
              unsigned __int16 v22 = off_2655D8250[(int)j];
            }
            unsigned int v23 = 0;
            int v24 = &v53[4 * v54 - 4];
            do
            {
              if (*(_DWORD *)v24)
              {
                unsigned int v25 = *(_DWORD *)v24 - (((*(_DWORD *)v24 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v24 >> 2) & 0x9249249));
                unsigned int v23 = ((v25 + (v25 >> 3)) & 0xC71C71C7) + v23 - 63 * (((v25 + (v25 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              v24 -= 4;
            }
            while (v24 >= v53);
            GlCustomLog(a2, "SIGAID %s(%2d):", v22, v23);
            LOBYTE(v45) = v54;
            memcpy(&v46, v53, 4 * v54);
            WORD1(v45) = 0;
            BYTE1(v45) = 0;
            HIDWORD(v45) = v46;
            while (1)
            {
              BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v45);
              if (BYTE1(v45) == v45) {
                break;
              }
              GlCustomLog(a2, " %3d   ", BYTE2(v45));
            }
            int v26 = "INV";
            if (j <= 6) {
              int v26 = off_2655D8250[(int)j];
            }
            unsigned int v27 = 0;
            int v28 = &v53[4 * v54 - 4];
            do
            {
              if (*(_DWORD *)v28)
              {
                unsigned int v29 = *(_DWORD *)v28 - (((*(_DWORD *)v28 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v28 >> 2) & 0x9249249));
                unsigned int v27 = ((v29 + (v29 >> 3)) & 0xC71C71C7) + v27 - 63 * (((v29 + (v29 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              v28 -= 4;
            }
            while (v28 >= v53);
            GlCustomLog(a2, "\nSIGAID %s(%2d):", v26, v27);
            unsigned __int16 v30 = *(_WORD *)(v5 + 14);
            if (v30)
            {
              uint64_t v31 = 0;
              for (unint64_t k = 0; k < v30; ++k)
              {
                uint64_t v33 = *(void *)(v5 + 16);
                if (j == BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v33 + v31)])
                {
                  int v34 = *(_DWORD *)(v33 + v31 + 4);
                  uint64_t v35 = 53;
                  if ((v34 & 0x400) == 0) {
                    uint64_t v35 = 120;
                  }
                  uint64_t v36 = 50;
                  if ((v34 & 0x200) == 0) {
                    uint64_t v36 = 120;
                  }
                  uint64_t v43 = v36;
                  uint64_t v44 = v35;
                  uint64_t v37 = 65;
                  if ((v34 & 0x1000) == 0) {
                    uint64_t v37 = 97;
                  }
                  uint64_t v38 = 80;
                  if ((v34 & 0x800) == 0) {
                    uint64_t v38 = 112;
                  }
                  uint64_t v42 = v37;
                  uint64_t v39 = 70;
                  if ((v34 & 2) == 0) {
                    uint64_t v39 = 102;
                  }
                  BOOL v40 = (v34 & 1) == 0;
                  uint64_t v41 = 82;
                  if (v40) {
                    uint64_t v41 = 114;
                  }
                  GlCustomLog(a2, "%c%c%c%c%c%c ", v41, v39, v38, v42, v43, v44);
                  unsigned __int16 v30 = *(_WORD *)(v5 + 14);
                }
                v31 += 8;
              }
            }
            this = GlCustomLog(a2, "\n");
          }
        }
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlDbgMeIf::SetSignalAiding(BlueFin::GlDbgMeIf *this, const BlueFin::GlMeSignalAidInfo *a2)
{
  return (*(uint64_t (**)(void, const BlueFin::GlMeSignalAidInfo *))(**((void **)this + 2) + 232))(*((void *)this + 2), a2);
}

unint64_t BlueFin::GlMeSrdCtrlSm::SetSignalAiding(BlueFin::GlMeSrdCtrlSm *this, const BlueFin::GlMeSignalAidInfo *a2)
{
  BlueFin::GlMeSignalAidInfo::operator=((uint64_t)this + 1600, (uint64_t)a2);
  __int16 v5 = 28;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v5);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v3;
  return result;
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::steady(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2, double a3, double a4, double a5))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v6 = *a2;
  unint64_t v7 = BlueFin::GlMeSrdCtrlSm::normal;
  if (v6 > 0x23)
  {
    if (v6 == 36)
    {
      if ((*((unsigned char *)this + 3562) & 0x20) == 0)
      {
        (*(void (**)(void, void, uint64_t (*(*(*(*)(uint64_t, unsigned __int8 *))(BlueFin::GlMeSrdCtrlSm *, unsigned __int8 *))(uint64_t, unsigned __int8 *))()))(**((void **)this + 16) + 16))(*((void *)this + 16), *((unsigned int *)this + 886), BlueFin::GlMeSrdCtrlSm::normal);
        unint64_t v7 = 0;
        *((unsigned char *)this + 108) = 1;
        return v7;
      }
      return 0;
    }
    if (v6 == 37)
    {
      BlueFin::GlMeSrdCtrlSm::SetBlankingConfig(this);
      BlueFin::GlTimer::disarm((uint64_t)this + 1696);
      return 0;
    }
    if (v6 != 59) {
      return v7;
    }
    if (!(*(unsigned int (**)(void))(**((void **)this + 17) + 1392))(*((void *)this + 17))) {
      return BlueFin::GlMeSrdCtrlSm::normal;
    }
    unint64_t v8 = "&GlMeSrdCtrlSm::wait4extsuspend";
    uint64_t v9 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4extsuspend;
  }
  else
  {
    switch(*a2)
    {
      case 0xFu:
        if (((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000013)
        {
          BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdCtrlSm::extsuspend);
        }
        else
        {
          int v19 = (*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17));
          if (!BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdCtrlSm::extsuspend)&& (v19 & 0xF000FFFF) != 0x30000015)
          {
            uint64_t v20 = *((void *)this + 15);
            if (!v20) {
              uint64_t v20 = *((void *)this + 14);
            }
            uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 80))(v20);
            long long v78 = 0uLL;
            LOBYTE(v79) = 0;
            *(_WORD *)((char *)&v79 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
            *((void *)&v79 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v21;
            LODWORD(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
            WORD2(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, 1);
            long long v89 = xmmword_263BAC4E0;
            uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
            uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22);
            (*(void (**)(uint64_t, long long *, long long *))(*(void *)v23 + 16))(v23, &v78, &v89);
            BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v78);
            BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v78);
          }
        }
        ++*((unsigned char *)this + 34523);
        if (((*(uint64_t (**)(void))(**((void **)this + 17) + 264))(*((void *)this + 17)) & 1) == 0)
        {
          uint64_t v76 = "0";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 2232, "ReadAGCvalues", (char)"0");
          int v77 = 2232;
LABEL_107:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v77, v76);
        }
        BlueFin::GlMeSrdMeasTimingMgr::SetHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 886));
        uint64_t ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072));
        BlueFin::GlMeSrdStats::SetHeartbeatMs(*((int32x2_t **)this + 25), ReportingLms);
        (*(void (**)(void, uint64_t))(**((void **)this + 20) + 176))(*((void *)this + 20), *((void *)this + 25) + 8);
        (*(void (**)(void, uint64_t))(**((void **)this + 23) + 32))(*((void *)this + 23), ReportingLms);
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        uint64_t v82 = 0x2000100010000;
        long long v83 = 0u;
        long long v84 = 0u;
        int v85 = 0;
        __int16 v86 = 255;
        char v87 = 0;
        int v88 = 0;
        if (BlueFin::GlMeSrdPwrMeasController::SetHeartbeat((uint64_t)this + 5280, *((_DWORD *)this + 886), *((unsigned __int16 *)this + 1779), *((_WORD *)this + 1778), (uint64_t)&v78))(*(void (**)(void, long long *))(**((void **)this + 19) + 16))(*((void *)this + 19), &v78); {
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 19) + 24))(*((void *)this + 19), ReportingLms, 1000);
        }
        if (!*((unsigned char *)this + 108) && (*((unsigned char *)this + 3562) & 0x20) == 0)
        {
          (*(void (**)(void, void))(**((void **)this + 16) + 16))(*((void *)this + 16), *((unsigned int *)this + 886));
          *((unsigned char *)this + 108) = 1;
        }
        *((unsigned char *)this + 108) = 0;
        uint64_t v25 = *((void *)this + 17);
        if (*(unsigned char *)(v25 + 1504) || *(unsigned char *)(v25 + 1505) || *(unsigned char *)(v25 + 1506))
        {
          long long v89 = 0uLL;
          int v91 = 0;
          uint64_t v90 = 0;
          uint64_t v26 = *((void *)this + 15);
          if (!v26) {
            uint64_t v26 = *((void *)this + 14);
          }
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 80))(v26);
          long long v78 = 0uLL;
          LOBYTE(v79) = 0;
          *(_WORD *)((char *)&v79 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
          *((void *)&v79 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v27;
          LODWORD(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
          WORD2(v8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, 1);
          GlCustomLog(14, "DisableBlanking\n");
          BYTE8(v89) = 0;
          LOBYTE(v89) = 0;
          DWORD1(v89) = 0;
          uint64_t v28 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
          uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
          (*(void (**)(uint64_t, long long *, long long *))(*(void *)v29 + 136))(v29, &v78, &v89);
          DWORD1(v89) = 2;
          uint64_t v30 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
          uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30);
          (*(void (**)(uint64_t, long long *, long long *))(*(void *)v31 + 136))(v31, &v78, &v89);
          DWORD1(v89) = 1;
          uint64_t v32 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
          (*(void (**)(uint64_t, long long *, long long *))(*(void *)v33 + 136))(v33, &v78, &v89);
          DWORD1(v89) = 3;
          uint64_t v34 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
          uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
          (*(void (**)(uint64_t, long long *, long long *))(*(void *)v35 + 136))(v35, &v78, &v89);
          if ((*(unsigned int (**)(void))(**((void **)this + 17) + 256))(*((void *)this + 17)))
          {
            DWORD1(v89) = 4;
            uint64_t v36 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
            uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 16))(v36);
            (*(void (**)(uint64_t, long long *, long long *))(*(void *)v37 + 136))(v37, &v78, &v89);
            DWORD1(v89) = 5;
            uint64_t v38 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
            uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 16))(v38);
            (*(void (**)(uint64_t, long long *, long long *))(*(void *)v39 + 136))(v39, &v78, &v89);
            DWORD1(v89) = 6;
            uint64_t v40 = (*(uint64_t (**)(void))(**((void **)&v79 + 1) + 48))(*((void *)&v79 + 1));
            uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 16))(v40);
            (*(void (**)(uint64_t, long long *, long long *))(*(void *)v41 + 136))(v41, &v78, &v89);
          }
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v78);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v78);
          *((void *)this + 216) = this;
          BlueFin::GlTimer::arm((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1696), 37, 0, 0x96u);
          *((unsigned char *)this + 172BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
          uint64_t v42 = *((void *)this + 17);
          *(unsigned char *)(v42 + 1512) = 0;
          *(void *)(v42 + 1504) = 0;
          *(void *)(v42 + 1592) = 0;
          *(unsigned char *)(v42 + 160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
          uint64_t v25 = *((void *)this + 17);
        }
        if (!*(unsigned char *)(v25 + 1184)) {
          goto LABEL_62;
        }
        unsigned int v43 = *((_DWORD *)this + 886);
        if (v43 > *(_DWORD *)(v25 + 1200))
        {
          int v44 = *((_DWORD *)this + 1360);
          goto LABEL_59;
        }
        unsigned int v45 = *(_DWORD *)(v25 + 1188);
        BOOL v46 = v43 >= v45;
        unsigned int v47 = v43 - v45;
        if (v47 == 0 || !v46) {
          goto LABEL_62;
        }
        unsigned int v48 = *(_DWORD *)(v25 + 1192);
        unsigned int v49 = v47 % (*(_DWORD *)(v25 + 1196) + v48);
        int v44 = *((_DWORD *)this + 1360);
        if (v49 >= v48)
        {
LABEL_59:
          if (v44)
          {
            int v50 = 0;
            goto LABEL_61;
          }
          goto LABEL_62;
        }
        if (v44 != 1)
        {
          int v50 = 1;
LABEL_61:
          BlueFin::GlMeSrdCtrlSm::SetPowerState((uint64_t)this, v50);
        }
LABEL_62:
        if (*((unsigned char *)this + 3324))
        {
          long long v51 = (char *)this + 3332;
        }
        else if (*((unsigned char *)this + 3340))
        {
          long long v51 = (char *)this + 3348;
        }
        else
        {
          long long v51 = (char *)this + 3356;
        }
        unsigned int v52 = *(unsigned __int16 *)v51;
        if (*((unsigned __int16 *)this + 1678) > v52) {
          unsigned int v52 = *((unsigned __int16 *)this + 1678);
        }
        unsigned int v53 = 5 * v52;
        if (v53 >= 0x4E20) {
          unsigned int v53 = 20000;
        }
        *((void *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
        BlueFin::GlTimer::arm((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1656), 5, 0, v53 + 250);
        unint64_t v7 = 0;
        *((unsigned char *)this + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        return v7;
      case 0x10u:
        BlueFin::GlMeSrdMeasTimingMgr::SetSubHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 898));
        uint64_t v10 = *((unsigned int *)this + 842);
        (*(void (**)(void, uint64_t))(**((void **)this + 23) + 40))(*((void *)this + 23), v10);
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 19) + 24))(*((void *)this + 19), v10, 200);
        return 0;
      case 0x13u:
        double v11 = *((double *)this + 452);
        LODWORD(a4) = *((_DWORD *)this + 906);
        LOWORD(a5) = *((_WORD *)this + 1814);
        double v12 = ((double)*(unint64_t *)&a4 + (double)*(unint64_t *)&a5 * 4294967300.0) * 0.0000305175781;
        double v13 = v12 * 1000.0;
        double v14 = *((double *)this + 4327);
        if (v14 == 1.79769313e308 && *((double *)this + 4328) == 1.79769313e308)
        {
          if (*((double *)this + 4329) == 1.79769313e308 && *((double *)this + 4330) == 1.79769313e308)
          {
            *((double *)this + 4327) = v13;
            *((double *)this + 4328) = v11;
          }
        }
        else if (*((double *)this + 4329) == 1.79769313e308 && *((double *)this + 4330) == 1.79769313e308)
        {
          *((double *)this + 4329) = v13;
          *((double *)this + 433BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
          double v16 = (v13 - v14 - (v11 - *((double *)this + 4328))) / (v11 - *((double *)this + 4328));
          double v17 = *((double *)this + 4331);
          if (v17 == 1.79769313e308)
          {
            double v18 = 0.00000006;
          }
          else
          {
            double v54 = v17 - v16;
            if (v17 - v16 < 0.0) {
              double v54 = -(v17 - v16);
            }
            double v18 = fmax(v54, 0.00000006);
            double v16 = v17 * 0.98 + v16 * 0.02;
          }
          unsigned int v55 = *((_DWORD *)this + 8666);
          BOOL v56 = v55 < 0xA;
          if (v18 * 1000000.0 < 1.0) {
            BOOL v56 = 0;
          }
          unsigned int v57 = v55 + v56;
          BOOL v58 = v57 != 0;
          *((double *)this + 433BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v16;
          *((double *)this + 4332) = v18;
          if (v18 * 1000000.0 >= 1.0) {
            BOOL v58 = 0;
          }
          *((_DWORD *)this + 8666) = v57 - v58;
          (*(void (**)(void))(**((void **)this + 20) + 152))(*((void *)this + 20));
          *(_OWORD *)((char *)this + 34616) = *(_OWORD *)((char *)this + 34632);
          *(int64x2_t *)((char *)this + 34632) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
          double v11 = *((double *)this + 452);
          LODWORD(v59) = *((_DWORD *)this + 906);
          LOWORD(v6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)this + 1814);
          double v12 = ((double)v59 + (double)v60 * 4294967300.0) * 0.0000305175781;
        }
        double v61 = *((double *)this + 4317);
        double v62 = v12 - v61;
        double v63 = v11 / 1000.0;
        double v64 = v11 / 1000.0 - *((double *)this + 4316);
        double v65 = v64 - (v12 - v61);
        if (v65 < 0.0) {
          double v65 = -v65;
        }
        if (v62 > 0.0299999993 && v61 != 0.0 && v64 >= 0.0 && v62 >= 0.0)
        {
          double v66 = v65 / v62 * 1000000.0;
          double v67 = fmod(v66, 4294967300.0);
          if (v66 <= 4294967300.0) {
            double v67 = v66;
          }
          if (v67 < -4294967300.0) {
            double v67 = -fmod(-v67, 4294967300.0);
          }
          if (v67 < 0.0) {
            unsigned int v68 = --v67;
          }
          else {
            unsigned int v68 = v67;
          }
          GlCustomLog(15, "HS-RTC Double Difference: Lms(Sec) %.2f, deltaLmsSec %.6f deltaRtcSec %.6f deltaLmsRtcPpm %u Running Std Dev %f\n", v63, v64, v62, v68, *((double *)this + 4325));
          double v69 = 3.5;
          if (*((double *)this + 4325) * 5.0 >= 3.5) {
            double v69 = *((double *)this + 4325) * 5.0;
          }
          double v70 = *((double *)this + 4324);
          double v71 = v66 - v70 / 5.0;
          if (v71 < 0.0) {
            double v71 = -v71;
          }
          if (v71 <= v69)
          {
            uint64_t v72 = 0;
            uint64_t v73 = *((unsigned __int8 *)this + 34544);
            *((double *)this + 4324) = v70 + v66 - *((double *)this + v73 + 4319);
            *((double *)this + v73 + 4319) = v66;
            char v74 = (v73 + 1) % 5u;
            *((unsigned char *)this + 34544) = v74;
            double v75 = 0.0;
            do
            {
              double v75 = v75
                  + (*(double *)((char *)this + v72 + 34552) - *((double *)this + 4324) / 5.0)
                  * (*(double *)((char *)this + v72 + 34552) - *((double *)this + 4324) / 5.0);
              v72 += 8;
            }
            while (v72 != 40);
            if (*((unsigned char *)this + 34608))
            {
              *((double *)this + 4325) = sqrt(v75 / 5.0);
            }
            else if (!v74)
            {
              *((unsigned char *)this + 34608) = 1;
            }
          }
          else
          {
            GlCustomLog(14, "HS-RTC Double Difference: Anomaly Detected !! (%f > %f)\n", v71, v69);
          }
        }
        unint64_t v7 = 0;
        *((double *)this + 4317) = v12;
        *((double *)this + 4316) = v63;
        return v7;
      case 0x17u:
        BlueFin::GlMeSrdCtrlSm::GotRadioReport(this);
        return 0;
      case 0x1Cu:
        (*(void (**)(void, char *, uint64_t (*(*(*(*)(uint64_t, unsigned __int8 *))(BlueFin::GlMeSrdCtrlSm *, unsigned __int8 *))(uint64_t, unsigned __int8 *))()))(**((void **)this + 16) + 24))(*((void *)this + 16), (char *)this + 1600, BlueFin::GlMeSrdCtrlSm::normal);
        return 0;
      case 0x1Du:
        (*(void (**)(void))(**((void **)this + 16) + 32))(*((void *)this + 16));
        BlueFin::GlQueue::putFIFO((BlueFin::GlMeSrdCtrlSm *)((char *)this + 40), 36, 0);
        return 0;
      case 0x1Fu:
        if (a2[1] != 1)
        {
          uint64_t v76 = "e->par == 1";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 2759, "steady", (char)"e->par == 1");
          int v77 = 2759;
          goto LABEL_107;
        }
        unint64_t v8 = "&GlMeSrdCtrlSm::geofence";
        uint64_t v9 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::geofence;
        break;
      default:
        return v7;
    }
  }
  BlueFin::QHsm::tran(this, v9, (uint64_t)v8);
  return 0;
}

void sub_263953140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

unint64_t BlueFin::GlDineCtrl::SetSignalAiding(BlueFin::GlDineCtrl *this, const BlueFin::GlMeSignalAidInfo *a2)
{
  GlCustomLog(15, "GlDineCtrl::SetSignalAiding(%d)\n", *((unsigned __int16 *)a2 + 7));
  (*(void (**)(char *, const BlueFin::GlMeSignalAidInfo *))(*((void *)this + 3695) + 16))((char *)this + 29560, a2);

  return BlueFin::GlMeSrdCtrlSm::SetSignalAiding((BlueFin::GlDineCtrl *)((char *)this + 75168), a2);
}

uint64_t BlueFin::GlMeAidingListener::SetSignalAiding(uint64_t this, const BlueFin::GlMeSignalAidInfo *a2)
{
  uint64_t v2 = *(void *)(this + 8) + 9888;
  *(_WORD *)uint64_t v2 = *((_WORD *)a2 + 7);
  if (*((unsigned char *)a2 + 12))
  {
    char v3 = **((unsigned char **)a2 + 2);
    *(unsigned char *)(v2 + 4) = v3;
    *(unsigned char *)(v2 + 5) = v3;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxAidIndex(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1430);
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::RemoveCarriers(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSignalIdSet *a2)
{
  uint64_t v4 = BlueFin::GlSetBase::operator=((uint64_t)this + 5512, (uint64_t)a2);
  *(_OWORD *)(v4 + 12) = *(_OWORD *)((char *)a2 + 12);
  long long v5 = *(_OWORD *)((char *)a2 + 28);
  long long v6 = *(_OWORD *)((char *)a2 + 44);
  long long v7 = *(_OWORD *)((char *)a2 + 60);
  *((_OWORD *)this + 349) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)(v4 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v7;
  *(_OWORD *)(v4 + 44) = v6;
  *(_OWORD *)(v4 + 28) = v5;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v9, (unsigned int *)v10, 0x13u, (const void **)a2);
  double v12 = &v14;
  char v13 = 19;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v9, (int **)&v12);
  BlueFin::GlSetBase::operator=((uint64_t)v9, (uint64_t)&v12);
  v10[1] = v15;
  unsigned __int8 v10[2] = v16;
  *(_OWORD *)double v11 = *(_OWORD *)v17;
  *(_OWORD *)&unsigned char v11[12] = *(_OWORD *)&v17[12];
  v10[0] = v14;
  BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)v9);
  return BlueFin::GlSetBase::operator&=((uint64_t)this + 5424, (uint64_t)v9);
}

unsigned char *BlueFin::GlMeSrdSatTrackMgr::RequestGrids(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSvIdArray *a2)
{
  unint64_t result = (unsigned char *)(*(uint64_t (**)(void))(**((void **)this + 3) + 712))(*((void *)this + 3));
  if (result)
  {
    long long v5 = (BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 8264);
    BlueFin::GlArray::Clear((uint64_t)v5);
    unint64_t result = (*(void *(**)(uint64_t *__return_ptr, const BlueFin::GlSvIdArray *))(*(void *)a2 + 80))(&v8, a2);
    while (v9 < *(unsigned __int8 *)(v8 + 38))
    {
      unsigned __int8 v7 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v8);
      long long v6 = BlueFin::GlArray::Add(v5, v7);
      unint64_t result = (unsigned char *)(*(uint64_t (**)(const BlueFin::GlSvIdArray *, unsigned __int8 *))(*(void *)a2 + 16))(a2, &v7);
      unsigned char *v6 = *result;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsTstGridCtrlByPE(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2104);
}

uint64_t BlueFin::GlSvIdArray::Iterator@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = this + 200;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(this + 239) + 1;
  return this;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::AddCarriers(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSignalIdSet *a2)
{
  uint64_t v4 = BlueFin::GlSetBase::operator=((uint64_t)this + 5424, (uint64_t)a2);
  *(_OWORD *)(v4 + 12) = *(_OWORD *)((char *)a2 + 12);
  long long v5 = *(_OWORD *)((char *)a2 + 28);
  long long v6 = *(_OWORD *)((char *)a2 + 44);
  long long v7 = *(_OWORD *)((char *)a2 + 60);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)(v4 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v7;
  *(_OWORD *)(v4 + 44) = v6;
  *(_OWORD *)(v4 + 28) = v5;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v9, (unsigned int *)v10, 0x13u, (const void **)a2);
  double v12 = &v14;
  char v13 = 19;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v9, (int **)&v12);
  BlueFin::GlSetBase::operator=((uint64_t)v9, (uint64_t)&v12);
  v10[1] = v15;
  unsigned __int8 v10[2] = v16;
  *(_OWORD *)double v11 = *(_OWORD *)v17;
  *(_OWORD *)&unsigned char v11[12] = *(_OWORD *)&v17[12];
  v10[0] = v14;
  BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)v9);
  return BlueFin::GlSetBase::operator&=((uint64_t)this + 5512, (uint64_t)v9);
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterMisc(uint64_t this, BlueFin::GlRpcMiscIf *a2)
{
  if (!a2)
  {
    uint64_t v2 = "pMiscIf != nullptr";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 207, "RegisterMisc", (char)"pMiscIf != nullptr");
    int v3 = 207;
    goto LABEL_7;
  }
  if (*(void *)(this + 17040))
  {
    if (!*(void *)(this + 17048))
    {
      *(void *)(this + 17048) = a2;
      return this;
    }
    uint64_t v2 = "0";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 218, "RegisterMisc", (char)"0");
    int v3 = 218;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", v3, v2);
  }
  *(void *)(this + 1704BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms(BlueFin::GlMeSrdMeasTimingMgr *this)
{
  if (*((unsigned char *)this + 304))
  {
    uint64_t v1 = (char *)this + 308;
    int v2 = *((_DWORD *)this + 77) - *((_DWORD *)this + 72);
    if ((v2 - 201) <= 0xFFFFFE6E) {
      GlCustomLog(11, "ERROR: GlMeSrdMeasTimingMgr::GetReportingLms(%u), pending (%d)\n", *((_DWORD *)this + 77), v2);
    }
  }
  else
  {
    uint64_t v1 = (char *)this + 288;
  }
  return *(unsigned int *)v1;
}

uint64_t BlueFin::GlDbgPeIf::SetPlatfStats(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const char *))(*(void *)result + 104))(result, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_glpeif.cpp:320");
  }
  *(unsigned char *)(result + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  if (*(_DWORD *)(result + 576) != 1) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))();
  }
  return result;
}

uint64_t BlueFin::GlPosEng::SetPlatfStats(BlueFin::GlPosEng *this, const BlueFin::GlMePlatfStat *a2)
{
  return BlueFin::GlPePlatfStatMgr::SetMePlatfStat((BlueFin::GlPosEng *)((char *)this + 157952), a2);
}

uint64_t BlueFin::GlMeSrdPwrMeasController::SetHeartbeat(uint64_t a1, int a2, int a3, __int16 a4, uint64_t a5)
{
  int v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 760))(*(void *)(a1 + 32));
  if ((v10 & 1) == 0)
  {
    int v11 = *(_DWORD *)(a1 + 8);
    __int16 v12 = v11 + a3;
    *(_DWORD *)(a1 + 4) = v11 + a3;
    LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2 - v11;
    *(unsigned char *)a1 = 1;
    *(_DWORD *)(a1 + 8) = a2;
    *(_WORD *)a5 = a4;
    __int16 v13 = a2 - v12;
    *(_WORD *)(a5 + 2) = v11 - v13;
    *(_WORD *)(a5 + 4) = v11;
    *(_WORD *)(a5 + 6) = v13;
    *(_WORD *)(a5 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
    BlueFin::GlMeSrdPwrMeas::mA_Estimate(a1 + 8, (float *)a5, 0);
    *(unsigned char *)a1 = 0;
  }
  return v10 ^ 1u;
}

uint64_t BlueFin::GlMeMeasurementListener::MeasurementComplete(void ***this, BlueFin::GlMeMeasSelfAidFilter *a2, int a3)
{
  return BlueFin::GlMeMeasAidFilter::MeasurementComplete(this[1], a2, a3);
}

uint64_t BlueFin::GlPePlatfStatMgr::SetMePlatfStat(BlueFin::GlPePlatfStatMgr *this, const BlueFin::GlMePlatfStat *a2)
{
  uint64_t v4 = (char *)this + 344;
  if (*((_DWORD *)this + 86) > *(_DWORD *)a2)
  {
    memset(v24, 0, sizeof(v24));
    *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)((char *)this + 44) = 0u;
    *((_WORD *)this + 84) = -180;
    *((unsigned char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *((_DWORD *)this + 48) = 0;
    *((unsigned char *)this + 196) = 0;
    *(void *)((char *)this + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)this + 22) = 0;
    *((_DWORD *)this + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1148829696;
    *(_OWORD *)((char *)this + 204) = xmmword_263BBCFE0;
    *((unsigned char *)this + 25BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(void *)((char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *((_DWORD *)this + 57) = 0;
    *(void *)((char *)this + 236) = 0;
    *((_DWORD *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(_WORD *)((char *)this + 249) = 0;
    *((unsigned char *)this + 248) = 0;
    *((unsigned char *)this + 232) = 0;
    *(_OWORD *)((char *)this + 252) = *(_OWORD *)&v24[1];
    *(_OWORD *)((char *)this + 268) = *(_OWORD *)&v24[17];
    *(_OWORD *)((char *)this + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)((char *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)((char *)this + 76) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((unsigned char *)this + 92) = 0;
    *(_DWORD *)((char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((unsigned char *)this + 328) = 0;
    *((_DWORD *)this + 83) = 0;
    *((void *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
    *((_DWORD *)this + 79) = 0;
    *(void *)((char *)this + 308) = 0;
    *((void *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  long long v5 = (long long *)((char *)a2 + 744);
  uint64_t result = BlueFin::GlMePlatfStat::operator=((uint64_t)this + 344, (uint64_t)a2);
  uint64_t v7 = 0;
  *((void *)this + 155) = v4;
  *((unsigned char *)this + 25BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((unsigned char *)a2 + 168);
  do
  {
    *(_DWORD *)((char *)this + v7 + 252) = *(_DWORD *)((char *)a2 + v7 + 172);
    v7 += 4;
  }
  while (v7 != 44);
  uint64_t v8 = 0;
  int v9 = 0;
  int v10 = 0;
  *((_DWORD *)this + 45) = 0;
  *((_DWORD *)this + 46) = 0;
  do
  {
    v9 += *(_DWORD *)((char *)a2 + v8 + 624);
    *((_DWORD *)this + 46) = v9;
    v10 += *(_DWORD *)((char *)a2 + v8 + 684);
    *((_DWORD *)this + 45) = v10;
    v8 += 4;
  }
  while (v8 != 60);
  long long v11 = *v5;
  *(_OWORD *)((char *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *v5;
  long long v12 = *(_OWORD *)((char *)a2 + 760);
  *(_OWORD *)((char *)this + 76) = v12;
  unsigned int v13 = *((_DWORD *)a2 + 221);
  *((_DWORD *)this + 83) = v13;
  *((_DWORD *)this + 84) = *((_DWORD *)a2 + 222);
  if (v11 > 0xA && !*((unsigned char *)this + 171))
  {
    *((_WORD *)this + 85) = 257;
    *((unsigned char *)this + 232) = 1;
  }
  if (DWORD2(v11) >= 3 && !*((unsigned char *)this + 172))
  {
    *((unsigned char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *((unsigned char *)this + 172) = 1;
    *((unsigned char *)this + 232) = 1;
  }
  if (v12 >= 0xB && !*((unsigned char *)this + 173))
  {
    *((unsigned char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *((unsigned char *)this + 173) = 1;
    *((unsigned char *)this + 232) = 1;
  }
  if (DWORD2(v12) >= 0xB && !*((unsigned char *)this + 174))
  {
    *((unsigned char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *((unsigned char *)this + 174) = 1;
    *((unsigned char *)this + 232) = 1;
  }
  if (v13 >= 0xB && !*((unsigned char *)this + 328))
  {
    *((unsigned char *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *((unsigned char *)this + 328) = 1;
    *((unsigned char *)this + 232) = 1;
  }
  if (*((unsigned char *)this + 170))
  {
    if (v9) {
      float v14 = (float)((float)(v9 - v10) * 100.0) / (float)v9;
    }
    else {
      float v14 = 0.0;
    }
    *((float *)this + 44) = v14;
  }
  if (*((unsigned char *)a2 + 88) && (char *)a2 + 88 != (char *)this + 92)
  {
    long long v15 = *(_OWORD *)((char *)a2 + 108);
    *((_OWORD *)this + 6) = *(_OWORD *)((char *)a2 + 92);
    *((_OWORD *)this + 7) = v15;
    long long v16 = *(_OWORD *)((char *)a2 + 140);
    *((_OWORD *)this + 8) = *(_OWORD *)((char *)a2 + 124);
    *((_OWORD *)this + 9) = v16;
    *((unsigned char *)this + 92) = *((unsigned char *)a2 + 88);
  }
  uint64_t v17 = 0;
  double v18 = (char *)a2 + 788;
  do
  {
    int v19 = (_DWORD *)((char *)this + v17 + 296);
    *int v19 = *(_DWORD *)&v18[v17 - 12];
    v19[3] = *(_DWORD *)&v18[v17];
    v17 += 4;
  }
  while (v17 != 12);
  char v20 = *((unsigned char *)a2 + 800);
  if (v20) {
    int v21 = 1;
  }
  else {
    int v21 = dword_263BBCFF0[v20 & 6];
  }
  *((_DWORD *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v21;
  int v22 = v20 & 0x30;
  if (v22)
  {
    if (v22 == 32)
    {
      int v23 = 3;
    }
    else
    {
      if (v22 != 16) {
        return result;
      }
      int v23 = 2;
    }
  }
  else
  {
    int v23 = 1;
  }
  *((_DWORD *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v23;
  return result;
}

unsigned __int8 *BlueFin::GlIQSnrStatsMgr::UpdateSnrStats(unsigned __int8 *result, uint64_t a2)
{
  int v3 = (uint64_t *)(result + 40160);
  double v71 = &v73;
  char v72 = 19;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  memset(v76, 0, 28);
  uint64_t v4 = *((void *)result + 5020);
  long long v5 = (__int16 *)(v4 + 10020);
  uint64_t v6 = 4;
  do
  {
    if (*((_DWORD *)v5 - 5)) {
      *((_DWORD *)&v73 + (*v5 >> 5)) |= 1 << *v5;
    }
    v5 += 5020;
    --v6;
  }
  while (v6);
  unsigned int v7 = 0;
  uint64_t v8 = (_OWORD *)((char *)&v76[1] + 8);
  int v9 = (_OWORD *)((char *)&v76[1] + 8);
  do
  {
    if (*(_DWORD *)v9)
    {
      unsigned int v10 = *(_DWORD *)v9 - (((*(_DWORD *)v9 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v9 >> 2) & 0x9249249));
      unsigned int v11 = (v10 + (v10 >> 3)) & 0xC71C71C7;
      unint64_t v12 = (68174085 * (unint64_t)v11) >> 32;
      uint64_t result = (unsigned __int8 *)(v11 - v12);
      unsigned int v7 = v11 + v7 - 63 * ((v12 + (result >> 1)) >> 5);
    }
    int v9 = (long long *)((char *)v9 - 4);
  }
  while (v9 >= &v73);
  if ((_WORD)v7)
  {
    unsigned int v13 = 0;
    do
    {
      if (*(_DWORD *)v8)
      {
        unsigned int v14 = *(_DWORD *)v8 - (((*(_DWORD *)v8 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v8 >> 2) & 0x9249249));
        unsigned int v13 = ((v14 + (v14 >> 3)) & 0xC71C71C7) + v13 - 63 * (((v14 + (v14 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      uint64_t v8 = (long long *)((char *)v8 - 4);
    }
    while (v8 >= &v73);
    if ((unsigned __int16)v13 <= 4u)
    {
      long long v15 = (void *)v3[2];
      if (v15)
      {
        long long v67 = v73;
        long long v68 = v74;
        long long v69 = v75;
        *(_OWORD *)double v70 = v76[0];
        *(_OWORD *)&v70[12] = *(_OWORD *)((char *)v76 + 12);
        v66[0] = 19;
        v66[1] = v73;
        uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)v66);
        if (BYTE1(v66[0]) != LOBYTE(v66[0]))
        {
          double v16 = 2.0;
          double v17 = -2.0;
          do
          {
            if (HIWORD(v66[0]) >= 0x23FuLL)
            {
              DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
            }
            uint64_t v18 = 0;
            int v19 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * HIWORD(v66[0]);
            uint64_t v20 = *v19;
            uint64_t v21 = (char)v19[1];
            uint64_t v22 = 4;
            while (!*(_DWORD *)(v4 + v18 + 10000)
                 || *(unsigned __int8 *)(v4 + 10012 + v18) != v20
                 || *(_DWORD *)(v4 + v18 + 10016) != v21)
            {
              v18 += 10040;
              if (!--v22) {
                goto LABEL_25;
              }
            }
            uint64_t v23 = BlueFin::GlSvId::s_aucSvId2gnss[v20];
            uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v15[1] + 16))(v15[1]);
            (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v15 + 40))(*v15, v24, v23, v21);
            long long v15 = (void *)v3[2];
            uint64_t v26 = 5;
            switch((int)v21)
            {
              case 0:
                if ((char)v23 >= 7) {
                  goto LABEL_30;
                }
                uint64_t v26 = qword_263BADA00[(char)v23];
                break;
              case 1:
                break;
              case 2:
                uint64_t v26 = 4;
                break;
              case 3:
                uint64_t v26 = 0;
                break;
              default:
LABEL_30:
                uint64_t v26 = 9;
                break;
            }
            uint64_t v4 = *v3;
            uint64_t v27 = *v3 + v18;
            if (*(_DWORD *)(v27 + 10000))
            {
              int v28 = *(unsigned __int8 *)(v27 + 10032);
              uint64_t v29 = (unsigned int *)(v27 + 10008);
              uint64_t v30 = (unsigned int *)(v27 + 10004);
              if (v28) {
                uint64_t v30 = v29;
              }
              uint64_t v31 = *v30;
              if (v31)
              {
                uint64_t v32 = (char *)(v4 + v18);
                double v33 = 0.0;
                uint64_t v34 = v31;
                double v35 = 0.0;
                double v36 = 0.0;
                uint64_t v37 = (char *)(v4 + v18);
                do
                {
                  int v38 = *v37++;
                  double v39 = (double)v38 * (double)v38 + (double)v32[5000] * (double)v32[5000];
                  double v36 = v36 + sqrt(v39);
                  double v35 = v35 + v39;
                  double v33 = v33 + v39 * v39;
                  uint64_t v32 = v37;
                  --v34;
                }
                while (v34);
                double v40 = (double)v31;
                double v41 = v36 / (double)v31;
                uint64_t v42 = (char *)(v4 + v18);
                double v43 = 0.0;
                int v44 = (char *)(v4 + v18);
                do
                {
                  int v45 = *v44++;
                  double v46 = sqrt((double)v45 * (double)v45 + (double)v42[5000] * (double)v42[5000]);
                  double v43 = v43 + (v46 - v41) * (v46 - v41);
                  uint64_t v42 = v44;
                  --v31;
                }
                while (v31);
                double v47 = v35 / v40;
              }
              else
              {
                double v40 = 0.0;
                double v47 = NAN;
                double v33 = 0.0;
                double v43 = 0.0;
              }
              double v48 = -v33 / v40 + v47 * v47 * v16;
              if (v48 <= 0.0)
              {
                double v51 = *(double *)(v4 + v18 + 10024);
                double v52 = 0.0;
                float v54 = 0.0;
                float v65 = 0.0;
              }
              else
              {
                float v64 = v25;
                float v49 = *(float *)(v15[31] + 24 * v26 + 8);
                double v50 = sqrt(v48);
                double v51 = *(double *)(v4 + v18 + 10024);
                double v52 = 0.0;
                if (v50 > 0.0)
                {
                  double v53 = (v47 - v50) * v51;
                  if (v53 > 0.0) {
                    double v52 = log10(v50 / v53) * 10.0;
                  }
                }
                float v65 = 0.0;
                float v54 = 0.0;
                if (v50 > 0.0)
                {
                  double v55 = v51 * (v51 * v49) * 1000.0;
                  if (v55 > 0.0) {
                    float v54 = log10(v50 / v55) * 10.0;
                  }
                }
                if (v50 <= 0.0)
                {
                  double v16 = 2.0;
                  double v17 = -2.0;
                }
                else
                {
                  double v56 = v51 * (v51 * v64) * 1000.0;
                  double v17 = -2.0;
                  if (v56 > 0.0)
                  {
                    float v57 = log10(v50 / v56) * 10.0;
                    float v65 = v57;
                  }
                  double v16 = 2.0;
                }
              }
              double v58 = v47 + v43 / v40 * v17;
              if (v58 > 0.0)
              {
                double v59 = (v43 / v40 + v43 / v40) * v51;
                if (v59 > 0.0)
                {
                  double v60 = log10(v58 / v59);
                  if (v52 > 0.0)
                  {
                    double v61 = v60 * 10.0;
                    if (v61 > 0.0)
                    {
                      *(unsigned char *)a2 = 1;
                      *(unsigned char *)(a2 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v4 + v18 + 10012);
                      *(_WORD *)(a2 + 2) = *(_DWORD *)(v4 + v18 + 10016);
                      float v62 = v52;
                      float v63 = v61;
                      *(float *)(a2 + 4) = v62;
                      *(float *)(a2 + 8) = v63;
                      *(float *)(a2 + 12) = v54;
                      *(float *)(a2 + 16) = v65;
                    }
                  }
                }
              }
            }
            a2 += 20;
LABEL_25:
            uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)v66);
          }
          while (BYTE1(v66[0]) != LOBYTE(v66[0]));
        }
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlMePlatfStat::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_WORD *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)(a2 + 220);
  *(_WORD *)(a1 + 222) = *(_WORD *)(a2 + 222);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 76BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a2 + 760);
  *(_DWORD *)(a1 + 884) = *(_DWORD *)(a2 + 884);
  *(_DWORD *)(a1 + 888) = *(_DWORD *)(a2 + 888);
  memcpy((void *)(a1 + 224), (const void *)(a2 + 224), 0x190uLL);
  long long v7 = *(_OWORD *)(a2 + 640);
  long long v6 = *(_OWORD *)(a2 + 656);
  long long v8 = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 668) = *(_OWORD *)(a2 + 668);
  *(_OWORD *)(a1 + 64BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v7;
  *(_OWORD *)(a1 + 656) = v6;
  *(_OWORD *)(a1 + 624) = v8;
  long long v9 = *(_OWORD *)(a2 + 684);
  long long v10 = *(_OWORD *)(a2 + 700);
  long long v11 = *(_OWORD *)(a2 + 716);
  *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v10;
  *(_OWORD *)(a1 + 716) = v11;
  *(_OWORD *)(a1 + 684) = v9;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 188);
  long long v13 = *(_OWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 172) = v13;
  *(_OWORD *)(a1 + 188) = v12;
  if (a2 != a1)
  {
    long long v14 = *(_OWORD *)(a2 + 92);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(_OWORD *)(a1 + 92) = v14;
    long long v15 = *(_OWORD *)(a2 + 124);
    *(_OWORD *)(a1 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 124) = v15;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 160);
  uint64_t v16 = *(void *)(a2 + 776);
  *(_DWORD *)(a1 + 784) = *(_DWORD *)(a2 + 784);
  *(void *)(a1 + 776) = v16;
  uint64_t v17 = *(void *)(a2 + 788);
  *(_DWORD *)(a1 + 796) = *(_DWORD *)(a2 + 796);
  *(void *)(a1 + 788) = v17;
  *(unsigned char *)(a1 + 80BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(a2 + 800);
  *(_OWORD *)(a1 + 804) = *(_OWORD *)(a2 + 804);
  long long v18 = *(_OWORD *)(a2 + 820);
  long long v19 = *(_OWORD *)(a2 + 836);
  long long v20 = *(_OWORD *)(a2 + 868);
  *(_OWORD *)(a1 + 852) = *(_OWORD *)(a2 + 852);
  *(_OWORD *)(a1 + 868) = v20;
  *(_OWORD *)(a1 + 82BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v18;
  *(_OWORD *)(a1 + 836) = v19;
  return a1;
}

unint64_t BlueFin::GlPeTimeManager::GlPeTimeManager(unint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a8;
  long long v12 = (unsigned char *)(a1 + 4416);
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 56) = a9;
  BlueFin::GlPeGpsTimeMgr::GlPeGpsTimeMgr((BlueFin::GlPeGpsTimeMgr *)(a1 + 64));
  BlueFin::GlPeGlnTimeMgr::GlPeGlnTimeMgr(a1 + 192, a3);
  BlueFin::GlPeBdsTimeMgr::GlPeBdsTimeMgr(a1 + 2144);
  BlueFin::GlPeGalTimeMgr::GlPeGalTimeMgr((BlueFin::GlPeGalTimeMgr *)(a1 + 2336));
  BlueFin::GlPeNicTimeMgr::GlPeNicTimeMgr((BlueFin::GlPeNicTimeMgr *)(a1 + 2440));
  *(void *)(a1 + 2557) = 0;
  *(void *)(a1 + 2552) = 0;
  *(_DWORD *)(a1 + 2568) = -7200001;
  *(_OWORD *)(a1 + 2572) = 0u;
  *(unsigned char *)(a1 + 2588) = byte_26B4343F0 - 1;
  *(unsigned char *)(a1 + 2589) = 5;
  *(_DWORD *)(a1 + 2592) = 0;
  *(unsigned char *)(a1 + 2596) = 0x80;
  *(_DWORD *)(a1 + 260BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(a1 + 2604) = 0x80;
  *(void *)(a1 + 2608) = 0;
  *(_DWORD *)(a1 + 2616) = -1;
  *(_OWORD *)(a1 + 2624) = xmmword_263BB40A0;
  *(_OWORD *)(a1 + 264BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2672) = 0u;
  memset_pattern16((void *)(a1 + 2688), &unk_263BBE270, 0x18uLL);
  *(_DWORD *)(a1 + 2712) = 63;
  *(unsigned char *)(a1 + 2716) = 0;
  *(_OWORD *)(a1 + 272BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 2736) = 0x41EFFFFFFFE00000;
  *(void *)(a1 + 276BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 2744) = 0;
  *(unsigned char *)(a1 + 2752) = 0;
  *(unsigned char *)(a1 + 2768) = 0;
  *(void *)(a1 + 2776) = 0;
  *(_DWORD *)(a1 + 2784) = -1;
  *(void *)(a1 + 2792) = 0xC15B773FC0000000;
  *(void *)(a1 + 280BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x41EFFFFFFFE00000;
  *(void *)(a1 + 2808) = 0;
  *(_DWORD *)(a1 + 2816) = -1;
  *(void *)(a1 + 2824) = 0xC15B773FC0000000;
  *(void *)(a1 + 2832) = 0x41EFFFFFFFE00000;
  *(_WORD *)(a1 + 284BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 128;
  *(void *)(a1 + 2864) = 0;
  *(_OWORD *)(a1 + 2848) = 0u;
  *(_DWORD *)(a1 + 2872) = -1;
  *(void *)(a1 + 288BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 2888) = -1;
  *(_OWORD *)(a1 + 2896) = xmmword_263BB40A0;
  *(_WORD *)(a1 + 2912) = 0;
  *(_DWORD *)(a1 + 3204) = 0;
  *(unsigned char *)(a1 + 3388) = 0;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(unsigned char *)(a1 + 3424) = -1;
  *(_WORD *)(a1 + 3426) = 0;
  *(_DWORD *)(a1 + 3432) = 0;
  *(void *)(a1 + 344BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0xC15B773FC0000000;
  *(void *)(a1 + 3456) = 0;
  *(void *)(a1 + 3448) = &off_270EBC600;
  *(_DWORD *)(a1 + 3464) = 0;
  *(void *)(a1 + 3472) = 0xC15B773FC0000000;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 348BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &off_270EBC600;
  *(_DWORD *)(a1 + 3496) = 0;
  *(unsigned char *)(a1 + 3504) = 0;
  *(_DWORD *)(a1 + 3508) = 0;
  *(void *)(a1 + 3512) = 0xC15B773FC0000000;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 352BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &off_270EBC600;
  *(_DWORD *)(a1 + 3536) = 0;
  *(void *)(a1 + 3544) = 0xC15B773FC0000000;
  *(void *)(a1 + 356BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 3552) = &off_270EBC600;
  *(_DWORD *)(a1 + 3568) = 0;
  *(unsigned char *)(a1 + 3576) = 0;
  *(_DWORD *)(a1 + 3584) = 0;
  *(void *)(a1 + 3592) = 0;
  *(_DWORD *)(a1 + 360BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(void *)(a1 + 3608) = 0xC15B773FC0000000;
  *(void *)(a1 + 3616) = 0x41EFFFFFFFE00000;
  *(void *)(a1 + 3624) = 0x400000096;
  *(_DWORD *)(a1 + 3632) = 500;
  *(void *)(a1 + 364BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EC97B0;
  *(void *)(a1 + 3656) = &off_270EBC600;
  *(unsigned char *)(a1 + 3648) = 0;
  *(_DWORD *)(a1 + 3652) = -7200001;
  *(_OWORD *)(a1 + 3664) = 0u;
  *(_OWORD *)(a1 + 368BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BBE230;
  *(void *)(a1 + 3696) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(a1 + 3704) = 0;
  *(void *)(a1 + 3712) = 0;
  *(_DWORD *)(a1 + 372BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(_OWORD *)(a1 + 3728) = xmmword_263BB40A0;
  *(void *)(a1 + 3784) = a1 + 3796;
  *(unsigned char *)(a1 + 3792) = 8;
  *(void *)(a1 + 4016) = a1 + 4028;
  *(unsigned char *)(a1 + 4024) = 8;
  *(void *)(a1 + 4408) = a1 + 4420;
  *long long v12 = 8;
  *(void *)(a1 + 3776) = 0;
  *(_OWORD *)(a1 + 376BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3812) = 0u;
  *(_OWORD *)(a1 + 3796) = 0u;
  *(void *)(a1 + 4008) = 0;
  *(_OWORD *)(a1 + 3992) = 0u;
  *(_OWORD *)(a1 + 3976) = 0u;
  *(_OWORD *)(a1 + 396BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 388BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 4044) = 0u;
  *(_OWORD *)(a1 + 4028) = 0u;
  *(_OWORD *)(a1 + 4363) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_OWORD *)(a1 + 432BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4304) = 0u;
  *(_OWORD *)(a1 + 4288) = 0u;
  *(_OWORD *)(a1 + 4272) = 0u;
  *(_OWORD *)(a1 + 4256) = 0u;
  *(_OWORD *)(a1 + 424BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4224) = 0u;
  *(_OWORD *)(a1 + 4208) = 0u;
  *(_OWORD *)(a1 + 4192) = 0u;
  *(_OWORD *)(a1 + 4176) = 0u;
  *(_OWORD *)(a1 + 416BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4144) = 0u;
  *(_OWORD *)(a1 + 4128) = 0u;
  *(_OWORD *)(a1 + 4112) = 0u;
  *(_OWORD *)(a1 + 4096) = 0u;
  *(_OWORD *)(a1 + 408BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(void *)(a1 + 4396) = 0;
  *(_OWORD *)(a1 + 438BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4456) = 0u;
  *(_OWORD *)(a1 + 4472) = 0u;
  *(_OWORD *)(a1 + 4488) = 0u;
  *(_OWORD *)(a1 + 4504) = 0u;
  *(_OWORD *)(a1 + 452BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_OWORD *)(a1 + 4568) = 0u;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(_OWORD *)(a1 + 460BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4616) = 0u;
  *(_OWORD *)(a1 + 4632) = 0u;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_WORD *)(a1 + 4664) = 0;
  *(_OWORD *)(a1 + 442BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4436) = 0u;
  long long v13 = (_OWORD *)(a1 + 4804);
  uint64_t v14 = 4684;
  v12[256] = 0;
  *(void *)(a1 + 4676) = 0;
  do
  {
    unint64_t v15 = a1 + v14;
    *(void *)unint64_t v15 = -1;
    *(_WORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 12) = 0;
    *(_DWORD *)(v15 + 16) = 0;
    v14 += 20;
  }
  while ((_OWORD *)(v15 + 20) != v13);
  *long long v13 = xmmword_263BBE240;
  *(void *)(a1 + 4824) = 0xC15B773FC0000000;
  *(void *)(a1 + 4832) = 0x41EFFFFFFFE00000;
  *(void *)(a1 + 4848) = 0;
  *(void *)(a1 + 484BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct(a1 + 4840);
  *(_WORD *)(a1 + 4876) = 0;
  *(_DWORD *)(a1 + 4872) = 0;
  BlueFin::GlPeGnssTime::m_potuint64_t ConversionTable = a1 + 2640;
  *(_DWORD *)(a1 + 3204) |= 0x6C3u;
  *(_OWORD *)(a1 + 292BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 300BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(void *)(a1 + 3032) = 0;
  memset_pattern16((void *)(a1 + 3040), &unk_263BBE270, 0x3CuLL);
  BlueFin::GlPeTimeManager::resetMgr((BlueFin::GlPeTimeManager *)a1);
  BlueFin::GlPeTimeManager::resetTimeModels(a1);
  if ((a2 & 0x80000000) == 0)
  {
    v17[0] = 0;
    v17[1] = 604800 * (unsigned __int16)a2;
    __n128 v17[2] = 0;
    long long v18 = xmmword_263BACCF0;
    BlueFin::GlPeTimeManager::setNumGps1023WeekRollovers(a1, (const BlueFin::GlPeGnssTime *)v17);
    v12[458] = 1;
  }
  GlCustomLog(127, "Size,GlPeTimeManager,%u\n", 4896);
  GlCustomLog(127, "    ->Size,GlPeGlnTimeMgr,%u\n", 1952);
  GlCustomLog(127, "    ->Size,GlPeGalTimeMgr,%u\n", 104);
  GlCustomLog(127, "    ->Size,GlPeBdsTimeMgr,%u\n", 192);
  return a1;
}

uint64_t BlueFin::GlPeKF::resetDtsIfGood(uint64_t this)
{
  uint64_t v1 = (_DWORD *)(this + 88792);
  if (*(_DWORD *)(this + 88796) < 0x2EE1u)
  {
    unsigned int v3 = *(_DWORD *)(this + 88804);
    if (v3 > 0x2EE0) {
      return this;
    }
    *(_DWORD *)(this + 88796) = v3;
    int v2 = *(_DWORD *)(this + 88800);
  }
  else if (*(unsigned char *)(this + 93368))
  {
    int v2 = 0;
  }
  else
  {
    this = BlueFin::GlPeTimeMgrUtil::precUsToUlong((BlueFin::GlPeTimeMgrUtil *)this, *(double *)(*(void *)(this + 92376) + 2632));
    int v2 = 0;
    v1[1] = this;
  }
  *uint64_t v1 = v2;
  return this;
}

uint64_t BlueFin::GlPePosReport::GlPePosReport(uint64_t a1, unsigned int a2, int a3, int a4, __int16 a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, float a13)
{
  *(void *)a1 = &unk_270EC4200;
  if (a2) {
    unsigned int v24 = a2;
  }
  else {
    unsigned int v24 = *(_DWORD *)(a8 + 2568);
  }
  if (v24 <= 0xFF9222FE) {
    double v25 = (double)v24;
  }
  else {
    double v25 = (double)(int)v24;
  }
  BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)a8, 0, 1, (uint64_t)v48, v25);
  double v26 = BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)a8, 2u, 1, (uint64_t)&v43, v25);
  *(_DWORD *)(a1 + 8) = v24;
  *(_WORD *)(a1 + 16) = v48[0];
  LODWORD(v26) = v49;
  LOWORD(v27) = v50;
  *(double *)&unint64_t v28 = (double)v27 * 0.000001;
  double v29 = *(double *)&v28 + (double)*(unint64_t *)&v26 * 0.001;
  LOWORD(v28) = v51;
  *(double *)&unint64_t v30 = (double)v28;
  *(double *)(a1 + 24) = v29 + *(double *)&v30 * 0.000000001;
  *(_WORD *)(a1 + 32) = v43;
  v31.i64[0] = v44;
  *(int8x8_t *)v31.i8 = vmovn_s16(v31);
  *(_DWORD *)(a1 + 34) = v31.i32[0];
  v31.i16[0] = v45;
  LOWORD(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v46;
  *(double *)&unint64_t v32 = (double)v30;
  *(double *)v31.i64 = (double)v31.u64[0] + *(double *)&v32 * 0.001;
  LOWORD(v32) = v47;
  *(double *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)v31.i64 + (double)v32 * 0.000001;
  double v33 = *(double *)(a8 + 2736);
  if (v33 == 4294967300.0)
  {
    double v33 = 4294967300.0;
    if (*(_DWORD *)(a8 + 2576)) {
      double v33 = *(double *)(a8 + 2632);
    }
  }
  uint64_t v34 = 0;
  *(double *)(a1 + 48) = v33;
  *(unsigned char *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4;
  *(double *)(a1 + 64) = a9;
  *(double *)(a1 + 72) = a10;
  *(double *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a11;
  *(_WORD *)(a1 + 88) = a5;
  *(double *)(a1 + 608) = a12;
  *(double *)(a1 + 616) = a13;
  do
  {
    double v35 = (_OWORD *)(a1 + v34);
    long long v36 = *(_OWORD *)(a6 + v34);
    long long v37 = *(_OWORD *)(a6 + v34 + 16);
    long long v38 = *(_OWORD *)(a6 + v34 + 48);
    v35[8] = *(_OWORD *)(a6 + v34 + 32);
    v35[9] = v38;
    v35[6] = v36;
    v35[7] = v37;
    long long v39 = *(_OWORD *)(a7 + v34);
    long long v40 = *(_OWORD *)(a7 + v34 + 16);
    long long v41 = *(_OWORD *)(a7 + v34 + 48);
    v35[24] = *(_OWORD *)(a7 + v34 + 32);
    v35[25] = v41;
    v35[22] = v39;
    v35[23] = v40;
    v34 += 64;
  }
  while (v34 != 256);
  return a1;
}

void BlueFin::GlPeFixStatus::SetPosition(BlueFin::GlPeFixStatus *this, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  long long v10 = (char *)this + 7152;
  int v11 = *(unsigned __int8 *)(a2 + 8);
  *((unsigned char *)this + 4048) = v11;
  *((unsigned char *)this + 4049) = *(unsigned char *)(a2 + 9);
  *((unsigned char *)this + 405BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((unsigned char *)this + 4192) = *(unsigned char *)(a2 + 80);
  *((unsigned char *)this + 4208) = *(unsigned char *)(a2 + 68);
  *(_OWORD *)((char *)this + 4088) = *(_OWORD *)(a2 + 32);
  *((void *)this + 513) = *(void *)(a2 + 48);
  *((_DWORD *)this + 1028) = *(_DWORD *)(a2 + 56);
  *((float64x2_t *)this + 259) = vcvtq_f64_f32(*(float32x2_t *)(a2 + 780));
  *((double *)this + 52BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(float *)(a2 + 788);
  *((double *)this + 515) = *(float *)(a2 + 764);
  int8x16_t v12 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a2 + 768));
  *((int8x16_t *)this + 258) = vextq_s8(v12, v12, 8uLL);
  *(_OWORD *)((char *)this + 4072) = *(_OWORD *)(a2 + 16);
  *((double *)this + 525) = *(float *)(a2 + 72) * 1.9438445;
  *((double *)this + 527) = *(float *)(a2 + 60) * 57.2957795 - floor(*(float *)(a2 + 60) * 57.2957795 / 360.0) * 360.0;
  uint64_t v13 = *((void *)this + 980);
  *((unsigned char *)this + 405BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(v13 + 2589) == 0;
  *((unsigned char *)this + 4176) = *(unsigned char *)(v13 + 2588);
  if (v11)
  {
    double v14 = (double)*(int *)(a2 + 744) + *(double *)(a2 + 752) * 1000.0;
    double v15 = floor(v14);
    double v16 = fmod(v15, 4294967300.0);
    if (v15 <= 4294967300.0) {
      double v16 = v15;
    }
    if (v16 < -4294967300.0) {
      double v16 = -fmod(-v16, 4294967300.0);
    }
    if (v16 < 0.0) {
      signed int v17 = --v16;
    }
    else {
      signed int v17 = v16;
    }
    *((_DWORD *)this + 1042) = v17;
    double v18 = fmod((v14 - (double)v17) * 1000.0 + 0.5, 4294967300.0);
    if ((v14 - (double)v17) * 1000.0 + 0.5 <= 4294967300.0) {
      double v18 = (v14 - (double)v17) * 1000.0 + 0.5;
    }
    if (v18 < -4294967300.0) {
      double v18 = -fmod(-v18, 4294967300.0);
    }
    if (v18 < 0.0) {
      unsigned int v19 = --v18;
    }
    else {
      LOWORD(v19) = v18;
    }
    *((_WORD *)this + 3444) = v19;
    if ((unsigned __int16)v19 == 1000)
    {
      *((_WORD *)this + 3444) = 0;
      *((_DWORD *)this + 1042) = v17 + 1;
    }
    unsigned int v20 = *(_DWORD *)(a2 + 748);
    if (v20 <= 1) {
      unsigned int v20 = 1;
    }
    *((_DWORD *)this + 1043) = v20;
  }
  *((_WORD *)this + 2137) = *(_WORD *)(a2 + 106);
  *((unsigned char *)this + 4052) = 0;
  *((_DWORD *)this + 1014) = 0;
  *((void *)this + 529) = *(void *)(a2 + 1024);
  v10[160] = *(unsigned char *)(a2 + 1080);
  v10[198] = *(unsigned char *)(a2 + 1081);
  if (a5) {
    *(_DWORD *)this = *(_DWORD *)(a2 + 12);
  }
  BlueFin::GlPeFixStatus::SetTime((unsigned int **)this);
  LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((__int16 *)this + 22);
  if ((int)v21 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (char *)this + 51;
    do
    {
      uint64_t v24 = *(v23 - 1);
      if (v24 != 4 && v24 != 8)
      {
        int v26 = BlueFin::GlImplGnss::m_aucImplGnssTable[v24];
        char v27 = *v23;
        LODWORD(v95[0]) = v26;
        BYTE4(v95[0]) = v27;
        BOOL v28 = (v27 - 64) < 0xC1u || v24 == 8;
        if (!v28
          && (Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 1264) + 384), v26)) != 0
          && (uint64_t v30 = (*(uint64_t (**)(void *, char *, uint64_t))(*Mgr + 112))(Mgr, (char *)v95 + 4, 1)) != 0)
        {
          int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 152))(v30);
          if ((v31 - 1) >= 3) {
            LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          }
          else {
            LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v31;
          }
        }
        else
        {
          LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        }
        *((_DWORD *)this + *(v23 - 2) + 1533) = v21;
        LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_WORD *)this + 22);
      }
      ++v22;
      v23 += 40;
    }
    while (v22 < (__int16)v21);
  }
  double v32 = 1.0;
  if (*(double *)(a2 + 792) >= 1.0 || !*((unsigned char *)this + 4048)) {
    double v32 = *(double *)(a2 + 792);
  }
  *((double *)this + 863) = v32;
  *((void *)this + 523) = *(void *)(a2 + 752);
  unsigned int v33 = *((_DWORD *)this + 1017) & 0xFFFFFFF8 | *(unsigned char *)(a2 + 81) & 3;
  if (*((double *)this + 518) >= 50.0 || *(unsigned char *)(a2 + 92) || *(unsigned char *)(a2 + 93)) {
    v33 |= 4u;
  }
  unsigned int v34 = v33 & 0xFFFFFE07 | (32 * *(unsigned __int8 *)(a2 + 94)) | (*(unsigned __int8 *)(a2 + 95) << 6) | (8 * *(unsigned __int8 *)(a2 + 104)) | (16 * *(unsigned __int8 *)(a2 + 1064));
  if (*(_DWORD *)(*((void *)this + 1264) + 120012) == 1) {
    v34 |= 0x100u;
  }
  unsigned int v35 = v34 & 0xFFFFF3FF | (*(unsigned __int8 *)(a2 + 1347) << 11) | (*(unsigned __int8 *)(a2 + 1345) << 10);
  *((_DWORD *)this + 1017) = v35 & 0xFFFFFDFF;
  if (*(unsigned char *)(a2 + 1344)) {
    *((_DWORD *)this + 1017) = v35 | 0x200;
  }
  uint64_t v36 = 0;
  *((void *)this + 919) = *(void *)(a2 + 1352);
  v10[208] = *(unsigned char *)(a2 + 1360);
  *((_DWORD *)this + 1016) = *(_DWORD *)(a2 + 4);
  do
  {
    long long v37 = (_OWORD *)((char *)this + v36 + 4856);
    long long v38 = *(_OWORD *)(a2 + v36 + 112);
    long long v39 = *(_OWORD *)(a2 + v36 + 128);
    long long v40 = *(_OWORD *)(a2 + v36 + 160);
    __n128 v37[2] = *(_OWORD *)(a2 + v36 + 144);
    v37[3] = v40;
    *long long v37 = v38;
    v37[1] = v39;
    long long v41 = (_OWORD *)((char *)this + v36 + 5368);
    long long v42 = *(_OWORD *)(a2 + v36 + 368);
    long long v43 = *(_OWORD *)(a2 + v36 + 384);
    long long v44 = *(_OWORD *)(a2 + v36 + 416);
    _OWORD v41[2] = *(_OWORD *)(a2 + v36 + 400);
    v41[3] = v44;
    *long long v41 = v42;
    v41[1] = v43;
    v36 += 64;
  }
  while (v36 != 256);
  long long v45 = *(_OWORD *)(a2 + 672);
  long long v46 = *(_OWORD *)(a2 + 688);
  long long v47 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)((char *)this + 5656) = *(_OWORD *)(a2 + 704);
  *(_OWORD *)((char *)this + 5672) = v47;
  *(_OWORD *)((char *)this + 5624) = v45;
  *(_OWORD *)((char *)this + 564BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v46;
  *((_WORD *)this + 3648) = *(_WORD *)(a2 + 736);
  *((float *)this + 1825) = (float)*(int *)(a2 + 740) * 0.001;
  if (v10[3000]) {
    int v48 = 2;
  }
  else {
    int v48 = 3;
  }
  *((_DWORD *)this + 1015) = v48;
  if (*(unsigned char *)(a2 + 8) && !*(_WORD *)(a2 + 106) && (*(unsigned char *)(a2 + 96) & 4) != 0) {
    *((_DWORD *)this + 1015) = 7;
  }
  *((_WORD *)this + 2137) = 0;
  int v49 = (char *)this + 4280;
  v10[196] = 0;
  *(_OWORD *)((char *)this + 428BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4296) = 0u;
  *(_OWORD *)((char *)this + 4312) = 0u;
  *(_OWORD *)((char *)this + 4328) = 0u;
  *(_OWORD *)((char *)this + 4344) = 0u;
  *(_OWORD *)((char *)this + 436BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *(_OWORD *)((char *)this + 4392) = 0u;
  *(_OWORD *)((char *)this + 4408) = 0u;
  *(_OWORD *)((char *)this + 4424) = 0u;
  *(_OWORD *)((char *)this + 444BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *(_OWORD *)((char *)this + 4472) = 0u;
  *(_OWORD *)((char *)this + 4488) = 0u;
  *(_OWORD *)((char *)this + 4504) = 0u;
  *(_OWORD *)((char *)this + 452BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 4536) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *(_OWORD *)((char *)this + 4568) = 0u;
  *(_OWORD *)((char *)this + 4584) = 0u;
  if (*((unsigned char *)this + 4048) && (__int16)v21 >= 1)
  {
    int v50 = 0;
    uint64_t v21 = (unsigned __int16)v21;
    __int16 v51 = (unsigned __int8 *)this + 49;
    do
    {
      uint64_t v52 = v51[1];
      double v53 = (void *)((char *)this + 64 * (unint64_t)v51[33] + 8 * v52);
      uint64_t v54 = 1 << (v51[2] - 1);
      if ((v54 & (v53[671] | v53[607])) != 0)
      {
        *((_WORD *)this + 2137) = ++v50;
        *(void *)&v49[8 * v52] |= v54;
        v53[543] |= v54;
        if (*((_DWORD *)this + *v51 + 1533) == 2) {
          v10[196] = 1;
        }
      }
      v51 += 40;
      --v21;
    }
    while (v21);
  }
  uint64_t v55 = *((void *)this + 981);
  int v56 = *(__int16 *)(v55 + 2);
  int v57 = *(__int16 *)(v55 + 10);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  *((_DWORD *)this + 1056) = (int)((double)v56 * 0.000000001 * 1000000000.0 + 0.5);
  double v58 = fmod((double)v57 * 0.000000001 * 1000000000.0 + 0.5, 4294967300.0);
  if ((double)v57 * 0.000000001 * 1000000000.0 + 0.5 <= 4294967300.0) {
    double v58 = (double)v57 * 0.000000001 * 1000000000.0 + 0.5;
  }
  if (v58 < -4294967300.0) {
    double v58 = -fmod(-v58, 4294967300.0);
  }
  if (v58 < 0.0) {
    unsigned int v59 = --v58;
  }
  else {
    LOWORD(v59) = v58;
  }
  *((_WORD *)this + 2128) = v59;
  double v60 = (double)*(int *)this;
  if (*(_DWORD *)this <= 0xFF9222FE) {
    double v60 = (double)*(unsigned int *)this;
  }
  BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*((unsigned int **)this + 980), 0, 1, (uint64_t)this + 24, v60);
  double v61 = (double)*(int *)this;
  if (*(_DWORD *)this <= 0xFF9222FE) {
    double v61 = (double)*(unsigned int *)this;
  }
  BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(*((unsigned int **)this + 980), 2u, 1, (uint64_t)this + 4, v61);
  float v62 = *(float *)(a2 + 780);
  *((double *)this + 869) = v62;
  *((double *)this + 87BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v62;
  *((void *)this + 87BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  double v63 = *(double *)(a2 + 1040);
  double v64 = *(double *)(a2 + 1048);
  if (v63 >= 0.0001 || v64 >= 0.0001)
  {
    long double v65 = *(double *)(a2 + 1056);
    double v66 = v63 + v64;
    double v67 = (v63 + v64) * 0.5;
    double v68 = sqrt(v65 * v65 + (v64 - v63) * 0.25 * (v64 - v63));
    double v69 = sqrt(v67 + v68);
    double v70 = atan2(v65, v64 - v69 * v69) * -57.2957795 + 90.0;
    if (v70 < 0.0) {
      double v70 = v70 + 360.0;
    }
    if (v70 >= 180.0) {
      double v70 = v70 + -180.0;
    }
    *((double *)this + 87BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v70;
    double v71 = 1.0;
    double v72 = sqrt((float)(v62 * v62) / v66);
    if (v66 >= 1.0e-12) {
      double v71 = v72;
    }
    double v73 = v69 * v71;
    double v74 = sqrt(v67 - v68) * v71 * 1.49759996;
    *((double *)this + 869) = v73 * 1.49759996;
    if (v67 <= v68) {
      double v74 = 0.0;
    }
    *((double *)this + 87BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v74;
  }
  *((double *)this + 872) = fmin(sqrtf(*(float *)(a2 + 64)) * 57.2957795, 180.0);
  *((double *)this + 873) = sqrtf(*(float *)(a2 + 76));
  double v75 = (double)(*(_DWORD *)(a2 + 744) + 1000 * *(_DWORD *)(a2 + 748));
  *((double *)this + 874) = v75;
  if (v75 < 0.001) {
    double v75 = 0.001;
  }
  *((double *)this + 875) = v75;
  *((void *)this + 876) = *(void *)(a2 + 96);
  int v76 = *(_DWORD *)(a2 + 1076);
  *(void *)((char *)this + 7284) = *(void *)(a2 + 1068);
  *((_DWORD *)this + 1823) = v76;
  long long v78 = *(_OWORD *)(a2 + 880);
  long long v77 = *(_OWORD *)(a2 + 896);
  uint64_t v79 = *(void *)(a2 + 912);
  *((_OWORD *)this + 443) = *(_OWORD *)(a2 + 864);
  *((void *)this + 892) = v79;
  *((_OWORD *)this + 445) = v77;
  *((_OWORD *)this + 444) = v78;
  long long v80 = *(_OWORD *)(a2 + 800);
  long long v81 = *(_OWORD *)(a2 + 816);
  long long v82 = *(_OWORD *)(a2 + 832);
  *((_OWORD *)this + 442) = *(_OWORD *)(a2 + 848);
  *((_OWORD *)this + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v82;
  *((_OWORD *)this + 44BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v81;
  *((_OWORD *)this + 439) = v80;
  *((_DWORD *)this + 1787) = *(_DWORD *)(a2 + 920);
  if (*((unsigned char *)this + 4048))
  {
    if (!v10[3048]) {
      BlueFin::GlPeFixStatus::UpdateAccumDist((uint64_t)this, (uint64_t)this + 10160, a3, a4);
    }
    *((double *)this + 529) = *((float *)this + 2548);
  }
  char *v10 = -1;
  v10[32] = -1;
  char v83 = *(unsigned char *)(a2 + 928);
  float v84 = *(float *)(a2 + 968);
  if (v83 != 0 && v84 > 400.0)
  {
    char v83 = 0;
    char v85 = 0;
  }
  else
  {
    char v85 = *(unsigned char *)(a2 + 960);
  }
  char *v10 = v83;
  v10[32] = v85;
  *((void *)this + 895) = *(void *)(a2 + 936);
  *((void *)this + 896) = *(void *)(a2 + 944);
  *((void *)this + 897) = *(void *)(a2 + 952);
  *((float *)this + 1798) = v84;
  *((_DWORD *)this + 1799) = *(_DWORD *)(a2 + 972);
  *((_DWORD *)this + 1797) = *(_DWORD *)(a2 + 964);
  v10[48] = *(unsigned char *)(a2 + 976);
  *((_DWORD *)this + 180BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_DWORD *)(a2 + 980);
  *((_DWORD *)this + 1802) = *(_DWORD *)(a2 + 984);
  v10[60] = *(unsigned char *)(a2 + 988);
  *((void *)this + 902) = *(void *)(a2 + 992);
  v10[72] = *(unsigned char *)(a2 + 1000);
  *((_DWORD *)this + 1807) = *(_DWORD *)(a2 + 1004);
  *((_DWORD *)this + 1808) = *(_DWORD *)(a2 + 1008);
  *((_WORD *)this + 3618) = *(_WORD *)(a2 + 1012);
  *((void *)this + 905) = *(void *)(a2 + 1016);
  *((void *)this + 913) = *(void *)(a2 + 84);
  memset(v95, 0, sizeof(v95));
  if (*((__int16 *)this + 22) > 0)
  {
    uint64_t v86 = 0;
    uint64_t v87 = 40 * *((unsigned __int16 *)this + 22);
    uint64_t v88 = 7432;
    do
    {
      long long v89 = (char *)this + v86;
      int v90 = *(__int16 *)((char *)this + v86 + 52);
      if (v90 == 1)
      {
        uint64_t v91 = 1 << (v89[51] - 1);
        if (*((_WORD *)v89 + 27)) {
          goto LABEL_109;
        }
      }
      else
      {
        uint64_t v91 = 1 << (v89[51] - 1);
        if (v90 < 5) {
          goto LABEL_109;
        }
      }
      if (*(float *)((char *)this + v88) <= 7.0)
      {
LABEL_109:
        v89[48] = 0;
        uint64_t v92 = (char *)this + v86;
        *(void *)(v92 + 68) = 0xFF38000000000000;
        *((_DWORD *)v92 + 19) = 0;
        *((_WORD *)v92 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        long long v93 = (void *)((char *)this
                       + 64 * (unint64_t)*((unsigned __int8 *)this + v86 + 82)
                       + 8 * *((unsigned __int8 *)this + v86 + 50));
        v93[607] &= ~v91;
        v93[671] &= ~v91;
        v93[543] &= ~v91;
        goto LABEL_110;
      }
      *((void *)v95 + *((unsigned __int8 *)this + v86 + 50)) |= v91;
LABEL_110:
      v88 += 4;
      v86 += 40;
    }
    while (v87 != v86);
  }
  for (uint64_t i = 0; i != 4; ++i)
    *(int8x16_t *)&v49[i * 16] = vandq_s8(*(int8x16_t *)&v49[i * 16], (int8x16_t)v95[i]);
}

double BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(unsigned int *a1, unsigned int a2, int a3, uint64_t a4, double a5)
{
  if (a2 == 2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    long long v7 = (_DWORD *)(a4 + 16);
  }
  else
  {
    if (a2 > 1)
    {
      DeviceFaultNotify("glpe_timemgr.cpp", 7456, "lmsToLegacyGlStruct", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 7456, "0");
    }
    *(_DWORD *)(a4 + 8) = 0;
    *(void *)a4 = 0;
    long long v7 = (_DWORD *)(a4 + 12);
  }
  _DWORD *v7 = -1;
  BlueFin::GlPeTimeManager::GetTime(a1, a5, a3, (uint64_t)v57);
  uint64_t v56 = 0;
  uint64_t v55 = &off_270EBC600;
  uint64_t v54 = 0;
  double v53 = &off_270EBF4E8;
  uint64_t v48 = 0;
  long long v47 = &unk_270EC23C8;
  BOOL v8 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v8 = 0;
  }
  BOOL v9 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  BOOL v10 = v8 && v9;
  if (v8 && v9) {
    int v11 = 431999;
  }
  else {
    int v11 = 432000;
  }
  unsigned int v12 = v11 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  __int16 v49 = 1980;
  __int16 v50 = v12 / 0x15180 + 1;
  LOBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  BYTE1(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12 / 0x15180 + 1;
  LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 60;
  if (v10)
  {
    LOBYTE(v13) = 59;
    LOBYTE(v14) = 23;
  }
  else
  {
    unsigned int v14 = v12 % 0x15180 / 0xE10;
    unsigned int v13 = (2185 * (v12 - 3600 * ((1193047 * (unint64_t)v12) >> 32))) >> 17;
    int v11 = v12 - 60 * ((71582789 * (unint64_t)v12) >> 32);
  }
  BYTE2(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v14;
  HIBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v13;
  unsigned __int8 v52 = v11;
  if (a2 == 2)
  {
    BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v57, (BlueFin::GlUtcTime *)&v47);
    double v16 = *(double *)&v23;
    LODWORD(v23) = v48;
    *(_DWORD *)long long v46 = 0;
    BlueFin::GlPeTimeMgrUtil::BreakDownFracSec((BlueFin::GlPeTimeMgrUtil *)&v46[1], (double)v23 * 2.32830644e-10, v46, &v45, v24);
    int v26 = BlueFin::GlPeTimeMgrUtil::precUsToUlong(v25, v16);
    *(_WORD *)a4 = v49;
    v27.i32[0] = v51;
    *(void *)(a4 + 2) = vmovl_u8(v27).u64[0];
    *(_WORD *)(a4 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v52;
    *(_WORD *)(a4 + 12) = v46[1];
    *(_WORD *)(a4 + 14) = v46[0];
    *(_DWORD *)(a4 + 16) = v26;
  }
  else
  {
    if (a2 == 1)
    {
      BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v57, (BlueFin::GlGlnsTime *)&v53);
      double v16 = *(double *)&v28;
      LODWORD(v28) = v54;
      LODWORD(v54) = 0;
      *(_DWORD *)long long v46 = 0;
      unsigned __int16 v45 = 0;
      BlueFin::GlPeTimeMgrUtil::BreakDownFracSec((BlueFin::GlPeTimeMgrUtil *)&v46[1], (double)v28 * 2.32830644e-10, v46, &v45, v29);
      int v19 = BlueFin::GlPeTimeMgrUtil::precUsToUlong(v30, v16);
      BOOL v33 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && HIDWORD(v54) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      *(_WORD *)a4 = (((unsigned int (*)(void))v53[4])(&v53) - v33) / 0x7861F80 + 1;
      BOOL v36 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && HIDWORD(v54) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      BOOL v37 = 0;
      *(_WORD *)(a4 + 2) = (((unsigned int (*)(void))v53[4])(&v53) - v36) % 0x7861F80 / 0x15180 + 1;
      if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
      {
        BOOL v37 = HIDWORD(v54) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      }
      unsigned int v38 = ((uint64_t (*)(void))v53[4])(&v53);
      if (v37) {
        double v40 = 10799.0;
      }
      else {
        double v40 = (double)(v38 % 0x15180);
      }
      LODWORD(v39) = v54;
      double v22 = v40 + (double)v39 * 2.32830644e-10;
    }
    else
    {
      if (a2) {
        return 0.0;
      }
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v57, (BlueFin::GlGpsTime *)&v55);
      double v16 = *(double *)&v15;
      LODWORD(v15) = v56;
      LODWORD(v56) = 0;
      *(_DWORD *)long long v46 = 0;
      unsigned __int16 v45 = 0;
      BlueFin::GlPeTimeMgrUtil::BreakDownFracSec((BlueFin::GlPeTimeMgrUtil *)&v46[1], (double)v15 * 2.32830644e-10, v46, &v45, v17);
      int v19 = BlueFin::GlPeTimeMgrUtil::precUsToUlong(v18, v16);
      *(_WORD *)a4 = ((unsigned int (*)(void))v55[4])(&v55) / 0x93A80;
      unsigned int v20 = ((uint64_t (*)(void))v55[4])(&v55);
      LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v56;
      double v22 = (double)v21 * 2.32830644e-10 + (double)(v20 % 0x93A80);
    }
    double v41 = v22 * 1000.0 + 0.1;
    double v42 = fmod(v41, 4294967300.0);
    if (v41 <= 4294967300.0) {
      double v42 = v41;
    }
    if (v42 < -4294967300.0) {
      double v42 = -fmod(-v42, 4294967300.0);
    }
    if (v42 < 0.0) {
      unsigned int v43 = --v42;
    }
    else {
      unsigned int v43 = v42;
    }
    *(_DWORD *)(a4 + 4) = v43 + v46[1];
    *(_WORD *)(a4 + 8) = v46[0];
    *(_WORD *)(a4 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v45;
    *(_DWORD *)(a4 + 12) = v19;
  }
  return v16;
}

uint64_t BlueFin::GlPeTimeMgrUtil::precUsToUlong(BlueFin::GlPeTimeMgrUtil *this, double a2)
{
  if (a2 == 4294967300.0) {
    return 0xFFFFFFFFLL;
  }
  if (a2 < 0.5) {
    return 1;
  }
  double v3 = a2 + 0.5;
  double v4 = fmod(a2 + 0.5, 4294967300.0);
  if (v3 <= 4294967300.0) {
    double v4 = v3;
  }
  if (v4 < -4294967300.0) {
    double v4 = -fmod(-v4, 4294967300.0);
  }
  if (v4 < 0.0) {
    return --v4;
  }
  else {
    return v4;
  }
}

void BlueFin::GlPeTimeMgrUtil::BreakDownFracSec(BlueFin::GlPeTimeMgrUtil *this, double a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  if (a2 >= 0.999999999)
  {
    unsigned int v10 = 999999999;
  }
  else
  {
    double v8 = a2 * 1000000000.0 + 0.5;
    double v9 = fmod(v8, 4294967300.0);
    if (v8 <= 4294967300.0) {
      double v9 = v8;
    }
    if (v9 < -4294967300.0) {
      double v9 = -fmod(-v9, 4294967300.0);
    }
    if (v9 < 0.0) {
      unsigned int v10 = --v9;
    }
    else {
      unsigned int v10 = v9;
    }
  }
  *(_WORD *)this = v10 / 0xF4240;
  unsigned int v11 = v10 % 0xF4240;
  *a3 = v11 / 0x3E8;
  *a4 = v11 % 0x3E8;
}

double BlueFin::GlPeTimeManager::GetUtcTime@<D0>(BlueFin::GlPeTimeManager *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v4 = *((_DWORD *)this + 1201);
  if (v4 != -7200001 && v4 == a2)
  {
    double result = *((double *)this + 606);
    *(double *)(a3 + 8) = result;
    *(void *)a3 = &unk_270EC23C8;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)this + 1214);
    *(_DWORD *)(a3 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)this + 1215);
    *(unsigned char *)(a3 + 24) = *((unsigned char *)this + 4864);
  }
  else
  {
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, a2, 1, (uint64_t)v7);
    *(void *)a3 = &unk_270EC23C8;
    *(void *)(a3 + 8) = 0;
    BlueFin::GlUtcTime::breakdownFct(a3);
    BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v7, (BlueFin::GlUtcTime *)a3);
  }
  return result;
}

void BlueFin::GlPeSpecialTimeEvents::ScheduleTimeEvents(BlueFin::GlPeSpecialTimeEvents *this, BlueFin::GlPeTimeManager *a2)
{
  if (!*((_DWORD *)a2 + 644)) {
    return;
  }
  char v88 = byte_26B4343F0;
  int v89 = *((unsigned __int8 *)a2 + 2589);
  int v90 = *((_DWORD *)a2 + 648);
  BlueFin::GlPeTimeManager::GetTime(a2, 1, &v94);
  uint64_t v102 = &unk_270EC23C8;
  uint64_t v103 = 0;
  BOOL v4 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v4 = 0;
  }
  BOOL v5 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  BOOL v6 = v4 && v5;
  if (v4 && v5) {
    int v7 = 431999;
  }
  else {
    int v7 = 432000;
  }
  unsigned int v8 = v7 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  unsigned __int16 v104 = 1980;
  __int16 v105 = v8 / 0x15180 + 1;
  LOBYTE(v106) = 1;
  BYTE1(v106) = v8 / 0x15180 + 1;
  LOBYTE(v7) = 60;
  if (v6)
  {
    LOBYTE(v9) = 59;
    LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 23;
  }
  else
  {
    unsigned int v10 = v8 % 0x15180 / 0xE10;
    unsigned int v9 = (2185 * (v8 - 3600 * ((1193047 * (unint64_t)v8) >> 32))) >> 17;
    int v7 = v8 - 60 * ((71582789 * (unint64_t)v8) >> 32);
  }
  BYTE2(v106) = v10;
  HIBYTE(v106) = v9;
  char v107 = v7;
  BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)&v94, (BlueFin::GlUtcTime *)&v102);
  uint64_t v11 = BlueFin::GlPeTimeManager::GetTimeAtPreviousQuarter(BlueFin::GlPeGnssTime const&)const::aucQuarterMonths[(unsigned __int16)(((21846 * v106 - 21846) >> 16) + ((21846 * v106 - 21846) >> 31))];
  uint64_t v96 = &unk_270EC23C8;
  uint64_t v97 = 0;
  if (v104 <= 0x7BCu && (v106 < 4u || v104 != 1980)) {
    goto LABEL_137;
  }
  int v12 = v104 - 1980;
  int v13 = v104 - 1977;
  if (v12 >= 0) {
    int v13 = v104 - 1980;
  }
  int v14 = 86400 * BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * (v12 - (v13 & 0xFFFFFFFC)) - 1 + v11]
      + 126230400 * (v13 >> 2)
      - 432000;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v15 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    BOOL v15 = 0;
  }
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= v14
                                                           + BlueFin::GlWeekTowTime::m_ucCurrentLs)
    unsigned __int8 v16 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v16 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  unsigned int v17 = v14 + v16;
  HIDWORD(v97) = v17;
  uint64_t v96 = &unk_270EC23C8;
  BOOL v18 = v17 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent && v15;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v17) {
    unsigned __int8 v19 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v19 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  unsigned int v20 = v17 + 432000 - v18 - v19;
  unsigned int v21 = v20 % 0x7861F80 / 0x15180;
  if (v20 % 0x7861F80 < 0x3C3B880) {
    int v22 = v20 % 0x7861F80 > 0x1E284FF;
  }
  else {
    int v22 = 2;
  }
  if (v20 % 0x7861F80 < 0x5A4EC00) {
    int v23 = v22;
  }
  else {
    int v23 = 3;
  }
  uint64_t v24 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v23];
  if (v21 >= v24[9])
  {
    int v25 = 9;
  }
  else if (v21 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v23 + 6])
  {
    int v25 = 6;
  }
  else if (v21 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v23 + 3])
  {
    int v25 = 3;
  }
  else
  {
    int v25 = 0;
  }
  __int16 v98 = ((4 * (v20 / 0x7861F80)) | v23) + 1980;
  __int16 v99 = v21 + 1 - *v24;
  if (v21 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v23 + v25 + 2])
  {
    int v26 = 3;
  }
  else if (v21 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v23 + v25 + 1])
  {
    int v26 = 1;
  }
  else
  {
    int v26 = 2;
  }
  int v27 = v26 + v25;
  LOBYTE(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v27;
  BYTE1(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v21 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v23 + v27 - 1] + 1;
  LOBYTE(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 60;
  if (v18)
  {
    LOBYTE(v28) = 59;
    LOBYTE(v29) = 23;
  }
  else
  {
    unint64_t v29 = (1193047 * (unint64_t)(v20 % 0x15180)) >> 32;
    unsigned int v28 = (2185 * (v20 % 0xE10)) >> 17;
    unsigned int v21 = v20 % 0x3C;
  }
  BYTE2(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v29;
  HIBYTE(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v28;
  char v101 = v21;
  BlueFin::GlPeTimeManager::GetTime(a2, (const BlueFin::GlUtcTime *)&v96, 1, (uint64_t)v92);
  uint64_t v102 = &unk_270EC23C8;
  uint64_t v103 = 0;
  BOOL v30 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v30 = 0;
  }
  BOOL v31 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  BOOL v32 = v30 && v31;
  unsigned int v33 = v30 && v31 ? 431999 : 432000;
  unsigned int v34 = v33 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  unsigned __int16 v104 = 1980;
  __int16 v105 = v34 / 0x15180 + 1;
  LOBYTE(v106) = 1;
  BYTE1(v106) = v34 / 0x15180 + 1;
  LOBYTE(v33) = 60;
  if (v32)
  {
    LOBYTE(v35) = 59;
    LOBYTE(v36) = 23;
  }
  else
  {
    unsigned int v36 = v34 % 0x15180 / 0xE10;
    unsigned int v35 = (2185 * (v34 % 0xE10)) >> 17;
    unsigned int v33 = v34 % 0x3C;
  }
  BYTE2(v106) = v36;
  HIBYTE(v106) = v35;
  char v107 = v33;
  BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)&v94, (BlueFin::GlUtcTime *)&v102);
  uint64_t v37 = (unsigned __int16)(((21846 * v106 - 21846) >> 16)
                         + ((21846 * v106 - 21846) >> 31));
  unsigned __int16 v38 = v104 + BlueFin::GlPeTimeManager::GetTimeAtNextQuarter(BlueFin::GlPeGnssTime const&)const::aucRelQuarterYear[v37];
  uint64_t v39 = BlueFin::GlPeTimeManager::GetTimeAtNextQuarter(BlueFin::GlPeGnssTime const&)const::aucQuarterMonths[v37];
  uint64_t v96 = &unk_270EC23C8;
  uint64_t v97 = 0;
  if (v38 <= 0x7BCu && (v106 - 13 > 0xFFFFFFFC || v38 != 1980)) {
    goto LABEL_137;
  }
  int v40 = v38 - 1980;
  int v41 = v38 - 1977;
  if (v40 >= 0) {
    int v41 = v40;
  }
  int v42 = 126230400 * (v41 >> 2)
      - 432000
      + 86400 * BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * (v40 - (v41 & 0xFFFFFFFC)) - 1 + v39];
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v43 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    BOOL v43 = 0;
  }
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= v42
                                                           + BlueFin::GlWeekTowTime::m_ucCurrentLs)
    unsigned __int8 v44 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v44 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  unsigned int v45 = v42 + v44;
  HIDWORD(v97) = v45;
  uint64_t v96 = &unk_270EC23C8;
  BOOL v46 = v45 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent && v43;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v45) {
    unsigned __int8 v47 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v47 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  unsigned int v48 = v45 + 432000 - v46 - v47;
  unsigned int v49 = v48 % 0x7861F80;
  unsigned int v50 = v48 % 0x7861F80 / 0x15180;
  if (v48 % 0x7861F80 >= 0x5A4EC00)
  {
    int v51 = 3;
  }
  else if (v49 >= 0x3C3B880)
  {
    int v51 = 2;
  }
  else
  {
    int v51 = v49 > 0x1E284FF;
  }
  int v52 = v51;
  double v53 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v51];
  if (v50 >= v53[9])
  {
    int v54 = 9;
  }
  else if (v50 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v52 + 6])
  {
    int v54 = 6;
  }
  else if (v50 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v52 + 3])
  {
    int v54 = 3;
  }
  else
  {
    int v54 = 0;
  }
  __int16 v98 = ((4 * (v48 / 0x7861F80)) | v52) + 1980;
  __int16 v99 = v50 + 1 - *v53;
  if (v50 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v52 + v54 + 2])
  {
    int v55 = 3;
  }
  else if (v50 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v52 + v54 + 1])
  {
    int v55 = 1;
  }
  else
  {
    int v55 = 2;
  }
  int v56 = v55 + v54;
  LOBYTE(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v56;
  BYTE1(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v50 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v52 + v56 - 1] + 1;
  LOBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 60;
  if (v46)
  {
    LOBYTE(v57) = 59;
    LOBYTE(v58) = 23;
  }
  else
  {
    unint64_t v58 = (1193047 * (unint64_t)(v48 % 0x15180)) >> 32;
    unsigned int v57 = (2185 * (v48 % 0xE10)) >> 17;
    unsigned int v50 = v48 % 0x3C;
  }
  BYTE2(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v58;
  HIBYTE(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v57;
  char v101 = v50;
  BlueFin::GlPeTimeManager::GetTime(a2, (const BlueFin::GlUtcTime *)&v96, 1, (uint64_t)v91);
  uint64_t v96 = &unk_270EC23C8;
  uint64_t v97 = 0;
  BOOL v59 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v59 = 0;
  }
  BOOL v60 = v59 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  if (v60) {
    int v61 = 431999;
  }
  else {
    int v61 = 432000;
  }
  unsigned int v62 = v61 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  __int16 v98 = 1980;
  __int16 v99 = v62 / 0x15180 + 1;
  LOBYTE(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  BYTE1(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v62 / 0x15180 + 1;
  LOBYTE(v63) = 60;
  if (v60)
  {
    LOBYTE(v64) = 59;
    LOBYTE(v65) = 23;
  }
  else
  {
    unint64_t v65 = (1193047 * (unint64_t)(v62 % 0x15180)) >> 32;
    unsigned int v64 = (2185 * (v62 % 0xE10)) >> 17;
    unsigned int v63 = v62 % 0x3C;
  }
  BYTE2(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v65;
  HIBYTE(v10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v64;
  char v101 = v63;
  if (v95 - v93 >= 180000.0)
  {
    uint64_t v102 = &unk_270EC23C8;
    uint64_t v103 = 0;
    unsigned __int16 v104 = 1980;
    __int16 v105 = v62 / 0x15180 + 1;
    LOBYTE(v106) = 1;
    BYTE1(v106) = v62 / 0x15180 + 1;
    LOBYTE(v69) = 60;
    if (v60)
    {
      LOBYTE(v7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 59;
      LOBYTE(v7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 23;
    }
    else
    {
      unsigned int v71 = v62 % 0x15180 / 0xE10;
      unsigned int v70 = (2185 * (v62 % 0xE10)) >> 17;
      unsigned int v69 = v62 % 0x3C;
    }
    BYTE2(v106) = v71;
    HIBYTE(v106) = v70;
    char v107 = v69;
    double v72 = (BlueFin::GlPeGnssTime *)v91;
  }
  else
  {
    uint64_t v102 = &unk_270EC23C8;
    uint64_t v103 = 0;
    unsigned __int16 v104 = 1980;
    __int16 v105 = v62 / 0x15180 + 1;
    LOBYTE(v106) = 1;
    BYTE1(v106) = v62 / 0x15180 + 1;
    LOBYTE(v66) = 60;
    if (v60)
    {
      LOBYTE(v67) = 59;
      LOBYTE(v68) = 23;
    }
    else
    {
      unint64_t v68 = (1193047 * (unint64_t)(v62 % 0x15180)) >> 32;
      unsigned int v67 = (2185 * (v62 % 0xE10)) >> 17;
      unsigned int v66 = v62 % 0x3C;
    }
    BYTE2(v106) = v68;
    HIBYTE(v106) = v67;
    char v107 = v66;
    double v72 = (BlueFin::GlPeGnssTime *)v92;
  }
  BlueFin::GlPeGnssTime::GetUtc(v72, (BlueFin::GlUtcTime *)&v102);
  unsigned int v73 = v103;
  unsigned int v74 = HIDWORD(v103);
  uint64_t v97 = v103;
  __int16 v98 = v104;
  __int16 v99 = v105;
  v75.i32[0] = v106;
  unsigned __int8 v76 = vmovl_u8(v75).u8[0];
  __int32 v100 = v106;
  char v101 = v107;
  if (v90)
  {
    unsigned int v77 = *((unsigned __int8 *)a2 + 2588);
    int v78 = *((unsigned __int8 *)a2 + 2596);
    BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs = 0;
    BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent = 0;
    BlueFin::GlWeekTowTime::m_ucNextLs = 0;
    BlueFin::GlWeekTowTime::m_ucCurrentLs = v77;
    if (v78 != v77)
    {
      BlueFin::GlWeekTowTime::m_ucCurrentLs = 0;
      uint64_t v102 = &unk_270EC23C8;
      uint64_t v103 = 0;
      if (v104 > 0x7BCu || v76 >= 2u && v104 == 1980)
      {
        int v79 = (char)v78;
        int v80 = BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * (v104 & 3) - 1 + v76];
        BlueFin::GlWeekTowTime::m_ucCurrentLs = v77;
        unsigned __int8 v81 = v77 - 1;
        if (v79 > (char)v77) {
          unsigned __int8 v81 = v77 + 1;
        }
        BlueFin::GlWeekTowTime::m_ucNextLs = v81;
        BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs = 126230400 * ((unsigned __int16)(v104 - 1980) >> 2)
                                                  - 432000
                                                  + v81
                                                  + 86400 * v80;
        BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent = (__PAIR64__(BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs, v77)
                                                        - v81) >> 32;
        goto LABEL_122;
      }
LABEL_137:
      DeviceFaultNotify("glpe_datetime.h", 1034, "GlUtcTime", (char)"usYear > 1980 || (usYear == 1980 && (ucMonth > 1 || (ucMonth == 1 && ucDay > 5)))");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_datetime.h", 1034, "usYear > 1980 || (usYear == 1980 && (ucMonth > 1 || (ucMonth == 1 && ucDay > 5)))");
    }
  }
  else if (v89)
  {
    LOBYTE(v77) = v88 - 1;
  }
  else
  {
    LOBYTE(v77) = *((unsigned char *)a2 + 2588);
    BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs = 0;
    BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent = 0;
    BlueFin::GlWeekTowTime::m_ucNextLs = 0;
    BlueFin::GlWeekTowTime::m_ucCurrentLs = v77;
  }
  LOBYTE(v79) = v77;
LABEL_122:
  double v82 = (double)v73 * 2.32830644e-10 + (double)v74;
  if (v82 <= 0.0)
  {
    double v83 = 0.0;
    if (v82 < 0.0) {
      double v83 = ceil(v82 + -0.5);
    }
  }
  else
  {
    double v83 = floor(v82 + 0.5);
  }
  double v84 = fmod(v83, 4294967300.0);
  if (v83 <= 4294967300.0) {
    double v84 = v83;
  }
  if (v84 < -4294967300.0) {
    double v84 = -fmod(-v84, 4294967300.0);
  }
  if (v84 < 0.0) {
    unsigned int v85 = --v84;
  }
  else {
    unsigned int v85 = v84;
  }
  v86.i32[1] = 180;
  v86.i32[0] = (char)v77 - (char)v79 - 180;
  *((_DWORD *)this + 2) = v85;
  *(int32x2_t *)((char *)this + 12) = vadd_s32(v86, vdup_n_s32(v85));
  int v87 = *((unsigned __int8 *)a2 + 3424);
  if ((v87 & 0x80) == 0) {
    *((_DWORD *)this + 7) = 619315200 * v87 + 619315200;
  }
  *(unsigned char *)this = 1;
}

uint64_t BlueFin::GlPeTimeManager::GetTime@<X0>(BlueFin::GlPeTimeManager *this@<X0>, const BlueFin::GlUtcTime *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v10 = 0.0;
  uint64_t v9 = *((void *)a2 + 1);
  BlueFin::GlPeTimeManager::dateTimeToLms((uint64_t)this, 2, (unsigned int *)&v9, &v10);
  double v7 = v10;

  return BlueFin::GlPeTimeManager::commonGnssToLms(this, v7, a3, a4);
}

uint64_t BlueFin::GlPeLtoMgr::UpdateEphemeris(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a3;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = a2;
  while (1)
  {
    unint64_t v9 = a2 > 6 ? 0 : *(void *)&asc_263BB8D60[8 * v8];
    if (v6 >= v9) {
      break;
    }
    if (*(_DWORD *)v3 != 255 && !*(_DWORD *)(v3 + 4))
    {
      double v10 = BlueFin::GlPeEphemeris::ConstructFromGlUncmprsdEph(a2, (int *)v3, *(unsigned __int16 *)(v3 + 140), v22);
      if (v10)
      {
        uint64_t v11 = v10;
        (*(void (**)(int32x2_t *, uint64_t, uint64_t))(*(void *)v10 + 216))(v10, 1, 3);
        Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(a1 + 80) + 384), a2);
        if ((*(unsigned int (**)(void *, int32x2_t *))(*Mgr + 32))(Mgr, v11)) {
          BOOL v13 = v7 == 0;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13)
        {
          __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*(void *)(a1 + 88), 1, v21);
          double v15 = (*(double (**)(int32x2_t *, __n128 *, uint64_t, __n128))(*(void *)v11 + 64))(v11, v21, 1, Time);
          unsigned __int8 v19 = &off_270EBC600;
          uint64_t v20 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v21, (BlueFin::GlGpsTime *)&v19);
          unsigned int v16 = ((uint64_t (*)(void))v19[4])(&v19);
          LODWORD(v17) = v20;
          uint64_t v7 = (int)((double)v17 * 2.32830644e-10
                                 + (double)v16
                                 - v15
                                 + (double)(*(unsigned int (**)(int32x2_t *))(*(void *)v11 + 88))(v11)
                                 * 0.5);
        }
      }
    }
    ++v6;
    v3 += 144;
  }
  return v7;
}

int32x2_t *BlueFin::GlPeEphemeris::ConstructFromGlUncmprsdEph(int a1, int *a2, uint64_t a3, int32x2_t *a4)
{
  BOOL v4 = a4;
  if (a2[1])
  {
    BlueFin::GlPeLtoEphemeris::GlPeLtoEphemeris(a4, (uint64_t)a2, a3, a1);
  }
  else
  {
    switch(a1)
    {
      case 0:
        unint64_t v6 = &unk_270EC02B8;
        *a4 = (int32x2_t)&unk_270EC02B8;
        uint64_t v7 = a4 + 4;
        uint64_t v8 = a4;
        char v9 = 0;
        goto LABEL_7;
      case 1:
        DeviceFaultNotify("glpe_ephmgr.cpp", 585, "ConstructFromGlUncmprsdEph", (char)"0");
        int v10 = 585;
        goto LABEL_14;
      case 2:
        DeviceFaultNotify("glpe_ephmgr.cpp", 586, "ConstructFromGlUncmprsdEph", (char)"0");
        int v10 = 586;
LABEL_14:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", v10, "0");
      case 3:
        unint64_t v6 = &unk_270EC03F0;
        *a4 = (int32x2_t)&unk_270EC03F0;
        uint64_t v7 = a4 + 4;
        uint64_t v8 = a4;
        char v9 = 3;
LABEL_7:
        BlueFin::GlPeGpsEphemerisBase::GlPeGpsEphemerisBase(v8, (uint64_t)a2, a3, v9, 0x12u, v7);
        int32x2_t *v4 = (int32x2_t)v6;
        break;
      case 4:
        BlueFin::GlPeBdsEphemeris::GlPeBdsEphemeris((uint64_t)a4, a2, a3);
        break;
      case 5:
        BlueFin::GlPeGalEphemeris::GlPeGalEphemeris((uint64_t)a4, (uint64_t)a2, a3);
        break;
      case 6:
        BlueFin::GlPeNicEphemeris::GlPeNicEphemeris((uint64_t)a4, (uint64_t)a2, a3);
        break;
      default:
        BOOL v4 = 0;
        break;
    }
  }
  return v4;
}

uint64_t BlueFin::GlPeBdsEphMgr::setAsstEphCommon(BlueFin::GlPeBdsEphMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  BOOL v4 = (BlueFin::GlPeTimeManager *)*((void *)this + 2);
  if (!*((_DWORD *)v4 + 644)) {
    return (*(uint64_t (**)(BlueFin::GlPeBdsEphMgr *, const BlueFin::GlPeEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
  }
  BlueFin::GlPeTimeManager::GetTime(v4, 1, v6);
  v7[0] = &unk_270EC23C8;
  v7[1] = 0;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)v7);
  BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v6, (BlueFin::GlUtcTime *)v7);
  uint64_t result = 0;
  if (v8 >= 0x7D6u) {
    return (*(uint64_t (**)(BlueFin::GlPeBdsEphMgr *, const BlueFin::GlPeEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
  }
  return result;
}

uint64_t BlueFin::GlPeGnssTime::GetUtc(BlueFin::GlPeGnssTime *this, BlueFin::GlUtcTime *a2)
{
  uint64_t v4 = *(unsigned int *)this;
  unsigned int v5 = *((_DWORD *)this + 1);
  int v6 = BlueFin::GlWeekTowTime::m_ucNextLs;
  BOOL v9 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
    && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
    && v5 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v5) {
    int v6 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  unsigned int v10 = v5 - v9 - v6 + 432000;
  unsigned int v11 = v10 % 0x7861F80 / 0x15180;
  if (v10 % 0x7861F80 <= 0x3C3B87F) {
    int v12 = v10 % 0x7861F80 > 0x1E284FF;
  }
  else {
    int v12 = 2;
  }
  if (v10 % 0x7861F80 <= 0x5A4EBFF) {
    int v13 = v12;
  }
  else {
    int v13 = 3;
  }
  int v14 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v13];
  if (v11 >= v14[9])
  {
    int v15 = 9;
  }
  else if (v11 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v13 + 6])
  {
    int v15 = 6;
  }
  else if (v11 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v13 + 3])
  {
    int v15 = 3;
  }
  else
  {
    int v15 = 0;
  }
  __int16 v16 = (v13 | (4 * (v10 / 0x7861F80))) + 1980;
  __int16 v17 = v11 - *v14 + 1;
  if (v11 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v13 + v15 + 2])
  {
    int v18 = 3;
  }
  else if (v11 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v13 + v15 + 1])
  {
    int v18 = 1;
  }
  else
  {
    int v18 = 2;
  }
  int v19 = v18 + v15;
  __int16 v20 = v11 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v13 + v19 - 1] + 1;
  unint64_t v21 = (1193047 * (unint64_t)(v10 % 0x15180)) >> 32;
  uint64_t result = (2185 * (v10 % 0xE10)) >> 17;
  unsigned int v23 = v10 % 0x3C;
  BOOL v24 = !v9;
  if (v9) {
    char v25 = 23;
  }
  else {
    char v25 = v21;
  }
  if (v24) {
    char v26 = result;
  }
  else {
    char v26 = 59;
  }
  if (!v24) {
    LOBYTE(v23) = 60;
  }
  *((_DWORD *)a2 + 2) = v4;
  *((_DWORD *)a2 + 3) = v5;
  *((_WORD *)a2 + 8) = v16;
  *((_WORD *)a2 + 9) = v17;
  *((unsigned char *)a2 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v19;
  *((unsigned char *)a2 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v20;
  *((unsigned char *)a2 + 22) = v25;
  *((unsigned char *)a2 + 23) = v26;
  *((unsigned char *)a2 + 24) = v23;
  if (*((_DWORD *)this + 2) != 2)
  {
    if (BlueFin::GlPeGnssTime::m_potConversionTable)
    {
      double v27 = *(double *)(BlueFin::GlPeGnssTime::m_potConversionTable + 16);
      double v28 = fabs(v27);
      double v29 = fmod(v28, 1.0);
      double v30 = v29 * 4294967300.0 + 0.5;
      unsigned int v31 = v30;
      if (v30 >= 4294967300.0) {
        unsigned int v31 = -1;
      }
      if (v29 < 0.0 || v29 >= 1.0)
      {
        uint64_t v39 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        int v40 = "glpe_timepoint.h";
        int v41 = 173;
      }
      else
      {
        unsigned int v32 = v28;
        if (v27 >= 0.0)
        {
          uint64_t v33 = v4 + v31;
          int v34 = v5 + v32 + HIDWORD(v33);
LABEL_59:
          *((_DWORD *)a2 + 2) = v33;
          *((_DWORD *)a2 + 3) = v34;
          return BlueFin::GlUtcTime::breakdownFct((uint64_t)a2);
        }
        unsigned int v35 = v5 - v32;
        if (v5 > v32 || v5 == v32 && v4 >= v31)
        {
          BOOL v36 = v4 >= v31;
          LODWORD(v33) = v4 - v31;
          int v37 = !v36;
          int v34 = v35 - v37;
          goto LABEL_59;
        }
        if (v32 - v5 == v4 > v31 && v4 == v31)
        {
          int v34 = 0;
          LODWORD(v33) = 0;
          goto LABEL_59;
        }
        uint64_t v39 = "!tDelta.isNegative()";
        DeviceFaultNotify("glpe_datetime.h", 1078, "operator+=", (char)"!tDelta.isNegative()");
        int v40 = "glpe_datetime.h";
        int v41 = 1078;
      }
    }
    else
    {
      uint64_t v39 = "m_potConversionTable != nullptr";
      DeviceFaultNotify("glpe_timemgr.cpp", 531, "GetUtc", (char)"m_potConversionTable != nullptr");
      int v40 = "glpe_timemgr.cpp";
      int v41 = 531;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v40, v41, v39);
  }
  return result;
}

uint64_t BlueFin::GlUtcTime::breakdownFct(uint64_t this)
{
  int v1 = BlueFin::GlWeekTowTime::m_ucNextLs;
  BOOL v2 = BlueFin::GlWeekTowTime::m_ucNextLs < BlueFin::GlWeekTowTime::m_ucCurrentLs
    || BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  unsigned int v3 = *(_DWORD *)(this + 12);
  int v5 = !v2 && v3 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v3) {
    int v1 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  unsigned int v6 = v3 - v5 - v1 + 432000;
  unsigned int v7 = v6 % 0x7861F80;
  unsigned int v8 = v6 % 0x7861F80 / 0x15180;
  if (v6 % 0x7861F80 > 0x5A4EBFF)
  {
    unsigned int v9 = 3;
  }
  else if (v7 <= 0x3C3B87F)
  {
    unsigned int v9 = v7 > 0x1E284FF;
  }
  else
  {
    unsigned int v9 = 2;
  }
  unsigned int v10 = v9;
  unsigned int v11 = &BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v9];
  if (v8 >= v11[9])
  {
    int v12 = 9;
  }
  else if (v8 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v9 + 6])
  {
    int v12 = 6;
  }
  else if (v8 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v9 + 3])
  {
    int v12 = 3;
  }
  else
  {
    int v12 = 0;
  }
  *(_WORD *)(this + 16) = (v10 | (4 * (v6 / 0x7861F80))) + 1980;
  *(_WORD *)(this + 18) = v8 - *v11 + 1;
  if (v8 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v10 + v12 + 2])
  {
    int v13 = 3;
  }
  else if (v8 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v10 + v12 + 1])
  {
    int v13 = 1;
  }
  else
  {
    int v13 = 2;
  }
  int v14 = v13 + v12;
  *(unsigned char *)(this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v14;
  *(unsigned char *)(this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v10 + v14 - 1] + 1;
  LOBYTE(v8) = 60;
  if (v5)
  {
    LOBYTE(v15) = 59;
    LOBYTE(v16) = 23;
  }
  else
  {
    unint64_t v16 = (1193047 * (unint64_t)(v6 % 0x15180)) >> 32;
    unsigned int v15 = (2185 * (v6 % 0xE10)) >> 17;
    unsigned int v8 = v6 % 0x3C;
  }
  *(unsigned char *)(this + 22) = v16;
  *(unsigned char *)(this + 23) = v15;
  *(unsigned char *)(this + 24) = v8;
  return this;
}

uint64_t BlueFin::GlPeQzssEphemeris::GetCurveFitIntervalS(BlueFin::GlPeQzssEphemeris *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 192))(this, 30)) {
    return 15000;
  }
  else {
    return 7800;
  }
}

int32x2_t *BlueFin::GlPeGpsEphemerisBase::GlPeGpsEphemerisBase(int32x2_t *a1, uint64_t a2, unsigned int a3, char a4, unsigned int a5, void *a6)
{
  if (*(_DWORD *)(a2 + 4)) {
    char v9 = 2;
  }
  else {
    char v9 = 1;
  }
  a1[1].i8[0] = v9 | (16 * a4);
  a1[1].i8[1] = a5;
  a1[2] = (int32x2_t)a6;
  a1[3] = vdup_n_s32(0xFF9222FF);
  bzero(a6, 4 * a5);
  *a1 = (int32x2_t)&unk_270EC0180;
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0, (*(unsigned char *)a2 + 1));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 4u, *(_DWORD *)(a2 + 16));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 3u, *(_DWORD *)(a2 + 20));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 5u, *(_DWORD *)(a2 + 24));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 6, *(_DWORD *)(a2 + 48));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 7u, *(_DWORD *)(a2 + 52));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 8, *(_DWORD *)(a2 + 56));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 9, *(_DWORD *)(a2 + 60));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 10, *(_DWORD *)(a2 + 64));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 11, *(_DWORD *)(a2 + 68));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 12, *(_DWORD *)(a2 + 72));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 13, *(_DWORD *)(a2 + 76));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 14, *(_DWORD *)(a2 + 80));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0xFu, *(_DWORD *)(a2 + 84));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 16, *(_DWORD *)(a2 + 88));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0x11u, *(_DWORD *)(a2 + 92));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0x12u, *(_DWORD *)(a2 + 96));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0x1Eu, *(_DWORD *)(a2 + 100));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 19, *(_DWORD *)(a2 + 108));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 20, *(_DWORD *)(a2 + 112));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 21, *(_DWORD *)(a2 + 116));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 22, *(_DWORD *)(a2 + 120));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 23, *(_DWORD *)(a2 + 124));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 24, *(_DWORD *)(a2 + 128));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 25, *(_DWORD *)(a2 + 132));
  BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 26, *(_DWORD *)(a2 + 136));
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0x1Bu, a3 != 0);
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0x1Cu, a3);
  if (*(_DWORD *)(a2 + 4)) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = 1;
  }
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 1u, v10);
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 2u, 1u);
  BlueFin::GlPeGpsEphemerisBase::PutCmpUnsignedField((BlueFin::GlPeGpsEphemerisBase *)a1, 0x1Fu, 0);
  return a1;
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::SetAsstEph(BlueFin::GlPeGpsQzssEphMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeGpsQzssEphMgr *, const BlueFin::GlPeEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

uint64_t BlueFin::GlPeGalEphMgr::SetAsstEph(BlueFin::GlPeGalEphMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, const BlueFin::GlPeEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

uint64_t BlueFin::GlPeNicEphemeris::GetCurveFitIntervalS(BlueFin::GlPeNicEphemeris *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 5) >= 0x18) {
    return 14400;
  }
  else {
    return 21600;
  }
}

uint64_t BlueFin::GlPeNicEphemeris::GlPeNicEphemeris(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 8) = 3937;
  *(void *)(a1 + 16) = a1 + 32;
  *(int32x2_t *)(a1 + 24) = vdup_n_s32(0xFF9222FF);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(void *)a1 = &unk_270EBED80;
  if (*(_DWORD *)(a2 + 4))
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 436, "GlPeNicEphemeris", (char)"rotUncmprsdEph.ExtensionBit == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 436, "rotUncmprsdEph.ExtensionBit == 0");
  }
  BlueFin::GlPeNicEphemeris::PutCmpUnsignedField((BlueFin::GlPeNicEphemeris *)a1, 0, (*(unsigned char *)a2 + 1));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 4, *(unsigned int *)(a2 + 16));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 29, *(unsigned int *)(a2 + 24));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 6, *(unsigned int *)(a2 + 48));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 7, *(unsigned int *)(a2 + 52));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 8, *(unsigned int *)(a2 + 56));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 9, *(unsigned int *)(a2 + 60));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 10, *(unsigned int *)(a2 + 64));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 11, *(unsigned int *)(a2 + 68));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 12, *(unsigned int *)(a2 + 72));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 13, *(unsigned int *)(a2 + 76));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 14, *(unsigned int *)(a2 + 80));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 15, *(unsigned int *)(a2 + 84));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 16, *(unsigned int *)(a2 + 88));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 17, *(unsigned int *)(a2 + 92));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 18, *(unsigned int *)(a2 + 96));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 19, *(unsigned int *)(a2 + 108));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 20, *(unsigned int *)(a2 + 112));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 21, *(unsigned int *)(a2 + 116));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 22, *(unsigned int *)(a2 + 120));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 23, *(unsigned int *)(a2 + 124));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 24, *(unsigned int *)(a2 + 128));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 25, *(unsigned int *)(a2 + 132));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 26, *(unsigned int *)(a2 + 136));
  (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)a1 + 216))(a1, 27, a3 != 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 28, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 1, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 2, 1);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 3, *(unsigned int *)(a2 + 20));
  return a1;
}

uint64_t *BlueFin::GlPeNicEphemeris::PutCmpSignedField(BlueFin::GlPeNicEphemeris *this, int a2, int a3)
{
  int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  char v7 = a2 - 6;
  if ((a2 - 6) >= 0x15 || ((0x1FE5FDu >> v7) & 1) == 0)
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1117, "PutCmpSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 1117, "0");
  }
  unsigned int v8 = byte_263BB3064[v7];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, dword_263BB3010[v7]);
  return BlueFin::GlBitBuffer::PutU(v10, a3 + (0xFFFFFFFFuLL >> (32 - v8)) + 1, v8);
}

uint64_t *BlueFin::GlPeNicEphemeris::PutCmpUnsignedField(BlueFin::GlPeNicEphemeris *this, unsigned int a2, unsigned int a3)
{
  int v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  if (a2 >= 0x21 || ((0x13FFFFFDFuLL >> a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1087, "PutCmpUnsignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 1087, "0");
  }
  unsigned int v7 = dword_263BB2F68[(char)a2];
  unsigned int v8 = byte_263BB2FEC[(char)a2];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, v7);
  return BlueFin::GlBitBuffer::PutU(v10, a3, v8);
}

uint64_t BlueFin::GlPeNicEphMgr::SetAsstEph(BlueFin::GlPeNicEphMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeNicEphMgr *, const BlueFin::GlPeEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

uint64_t BlueFin::GlPeTimeManager::setNumGps1023WeekRollovers(uint64_t this, const BlueFin::GlPeGnssTime *a2)
{
  if (*(unsigned __int8 *)(this + 3424) == 255)
  {
    uint64_t v3 = this;
    char v26 = &off_270EBC600;
    uint64_t v27 = 0;
    BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v26);
    this = ((uint64_t (*)(void))v26[4])(&v26);
    if (this >= 0x24EA0000)
    {
      unsigned int v4 = ((uint64_t (*)(void))v26[4])(&v26);
      *(_WORD *)(v3 + 3426) = v4 / 0x93A80;
      *(unsigned char *)(v3 + 3424) = v4 / 0x24EA0000;
      int v5 = *(_DWORD *)(v3 + 2568);
      if (v5 == -7200001) {
        int v5 = 0;
      }
      this = GlCustomLog(14, "GlPeTimeManager::setNumGps1023WeekRollovers(%u):  Set number of GPS 1023 week rollovers (WNRO count) to %d at GPS week %d\n", v5, v4 / 0x24EA0000, v4 / 0x93A80);
      if (*(_DWORD *)(v3 + 2576))
      {
        if (!*(_DWORD *)(v3 + 2616))
        {
          BlueFin::GlPeTimeManager::GetTime((unsigned int *)v3, *((double *)a2 + 2), 1, (uint64_t)v25);
          v24[0] = &off_270EBC600;
          v24[1] = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v25, (BlueFin::GlGpsTime *)v24);
          this = (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
          unsigned int v6 = this / 0x93A80;
          if ((int)(*(unsigned __int16 *)(v3 + 3426) - this / 0x93A80) >= 512)
          {
            if (*((_DWORD *)a2 + 2) == 1)
            {
              int v23 = -128;
              if (BlueFin::GlPeGpsTimeMgr::GetDeltaUTCSec((BlueFin::GlPeGpsTimeMgr *)(v3 + 64), (const BlueFin::GlGpsTime *)&v26, &v23))
              {
                unsigned int LeapSecFromHardcodedSchedule = 0;
              }
              else
              {
                LOBYTE(v24[0]) = 0;
                unsigned int LeapSecFromHardcodedSchedule = BlueFin::GlPeTimeManager::getLeapSecFromHardcodedSchedule(a2, (const BlueFin::GlPeGnssTime *)v24, v7);
                int v23 = SLOBYTE(v24[0]);
              }
              char v22 = 0;
              BlueFin::GlPeTimeManager::getLeapSecFromHardcodedSchedule((BlueFin::GlPeTimeManager *)v25, (const BlueFin::GlPeGnssTime *)&v22, v7);
              int v9 = v23;
              int v10 = v22;
              BlueFin::GlTimeDelta::GlTimeDelta((BlueFin::GlTimeDelta *)v24, (double)(v23 - v22));
              BlueFin::GlWeekTowTime::operator+=((uint64_t)&v26, (unsigned int *)v24);
              int v11 = *(_DWORD *)(v3 + 2568);
              unsigned int v12 = ((uint64_t (*)(void))v26[4])(&v26);
              unsigned int v13 = ((uint64_t (*)(void))v26[4])(&v26);
              LODWORD(v14) = v27;
              GlCustomLog(14, "GlPeTimeManager::setNumGps1023WeekRollovers(%u):  Verified time in GPS:{%d %.3lf}  oldLs:%d  newLs:%d  newLsUnc:%d\n", v11, v12 / 0x93A80, (double)v14 * 2.32830644e-10 + (double)(v13 % 0x93A80), v10, v9, LeapSecFromHardcodedSchedule);
            }
            else
            {
              unsigned int LeapSecFromHardcodedSchedule = 0;
            }
            *(_DWORD *)(v3 + 3584) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
            double v15 = *((double *)a2 + 2);
            double UncUs = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)a2, 0);
            *(void *)(v3 + 3592) = v27;
            *(_DWORD *)(v3 + 360BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
            *(double *)(v3 + 3608) = v15;
            *(double *)(v3 + 3616) = UncUs + (double)LeapSecFromHardcodedSchedule * 1000000.0;
            int v17 = *(_DWORD *)(v3 + 2568);
            unsigned int v18 = -7200001;
            if (v17 != -7200001)
            {
              int v19 = *(_DWORD *)(v3 + 2572);
              if (v19) {
                unsigned int v18 = v17 - v19 + *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
              }
              else {
                unsigned int v18 = *(_DWORD *)(v3 + 2568);
              }
            }
            double v20 = (double)v18;
            BlueFin::GlPeGnssTime::operator+=((unsigned int *)(v3 + 3592), ((double)v18 - v15) * 0.001);
            *(double *)(v3 + 3608) = v20;
            *(unsigned char *)(v3 + 2768) = 1;
            int v21 = *(_DWORD *)(v3 + 2568);
            if (v21 == -7200001) {
              int v21 = 0;
            }
            return GlCustomLog(11, "GlPeTimeManager::setNumGps1023WeekRollovers(%u):  Incorrect WNRO count used!!!  initialWNRO:%d  correctWNRO:%d\n", v21, v6 >> 10, *(char *)(v3 + 3424));
          }
        }
      }
    }
  }
  return this;
}

double BlueFin::GlPeNicTimeMgr::GlPeNicTimeMgr(BlueFin::GlPeNicTimeMgr *this)
{
  *(void *)this = &unk_270EBF130;
  *((void *)this + 3) = &unk_270EBF0D0;
  *((void *)this + 9) = &unk_270EBF100;
  *((unsigned char *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *(void *)&double result = 4287767295;
  *(void *)((char *)this + 12) = 4287767295;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = 0;
  *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 44) = 0;
  *(void *)((char *)this + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_WORD *)this + 42) = 0;
  *((_DWORD *)this + 22) = 0;
  *(void *)((char *)this + 92) = 0;
  *((_DWORD *)this + 25) = 0;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 104) = 0;
  return result;
}

double BlueFin::GlPeGpsTimeMgr::GlPeGpsTimeMgr(BlueFin::GlPeGpsTimeMgr *this)
{
  *(void *)this = &unk_270EC96E0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 28) = 0u;
  *((void *)this + 2) = (char *)this + 28;
  *((unsigned char *)this + 24) = 8;
  *(_OWORD *)((char *)this + 44) = 0u;
  *((void *)this + 8) = &unk_270EC96B0;
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 57) = 0;
  *((_DWORD *)this + 18) = 0;
  *((unsigned char *)this + 76) = 0;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &off_270EBC600;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  return result;
}

__n128 BlueFin::GlPeGalTimeMgr::GlPeGalTimeMgr(BlueFin::GlPeGalTimeMgr *this)
{
  *(void *)this = &unk_270EC9588;
  *((void *)this + 2) = &unk_270EC9528;
  *((void *)this + 8) = &unk_270EC9558;
  *((unsigned char *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 8) = 0;
  __n128 result = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  *((_WORD *)this + 44) = 0;
  *((_DWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 96) = 0;
  return result;
}

uint64_t BlueFin::GlPeBdsTimeMgr::GlPeBdsTimeMgr(uint64_t this)
{
  *(void *)this = &unk_270EC9488;
  *(void *)(this + 8) = 0;
  *(void *)(this + 32) = &unk_270EC9458;
  *(void *)(this + 64) = 0;
  *(void *)(this + 72) = &unk_270EC9458;
  *(void *)(this + 104) = 0;
  *(void *)(this + 112) = &unk_270EC9458;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2;
  *(_WORD *)(this + 44) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(_DWORD *)(this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2;
  *(_WORD *)(this + 84) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 96) = 0;
  *(_DWORD *)(this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2;
  *(_WORD *)(this + 124) = 0;
  *(void *)(this + 144) = 0;
  *(void *)(this + 152) = &unk_270EC9458;
  *(void *)(this + 128) = 0;
  *(void *)(this + 136) = 0;
  *(_DWORD *)(this + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2;
  *(_WORD *)(this + 164) = 0;
  *(void *)(this + 168) = 0;
  *(void *)(this + 176) = 0;
  *(void *)(this + 184) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_WORD *)(this + 28) = 0;
  return this;
}

uint64_t BlueFin::GlPeTimeManager::SetGlnsAsst(BlueFin::GlPeTimeManager *a1, int a2, char *a3)
{
  if (*((unsigned char *)a1 + 435)) {
    BlueFin::GlPeTimeManager::updateLeapSecFromGlnsKp(a1);
  }
  BlueFin::GlPeTimeManager::updateConversionTable(a1);
  return 1;
}

BOOL BlueFin::GlPeNicEphemeris::CompareEphSetFields(BlueFin::GlPeNicEphemeris *this, const BlueFin::GlPeNicEphemeris *a2)
{
  if ((*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 27)
    && (*(unsigned int (**)(const BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 27)
    && (int v4 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 28),
        v4 != (*(unsigned int (**)(const BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 28)))
  {
    BOOL v8 = 0;
  }
  else
  {
    int v5 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 18);
    int v6 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 232))(this, 18) * v5;
    int v7 = (*(uint64_t (**)(const BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 18);
    BOOL v8 = v6 == (*(unsigned int (**)(const BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 18)* v7;
  }
  int v9 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 29);
  int v10 = (*(uint64_t (**)(const BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 29);
  int v11 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 3);
  int v12 = (*(uint64_t (**)(const BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 3);
  BOOL v13 = v9 == v10 && v8;
  return v11 == v12 && v13;
}

uint64_t BlueFin::GlPeNicEphMgr::validateCandidateEphemeris(BlueFin::GlPeNicEphMgr *this, const BlueFin::GlPeEphemeris *a2, BlueFin::GlPeEphemeris *a3)
{
  (*(void (**)(uint64_t *__return_ptr, BlueFin::GlPeEphemeris *))(*(void *)a3 + 136))(&v86, a3);
  int v5 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 7);
  unsigned int v6 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 232))(a3, 7) * v5;
  int v7 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 18);
  unsigned int v8 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 232))(a3, 18) * v7;
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 17);
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 15);
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a3, 22);
  int v12 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a3 + 256))(a3);
  BOOL v13 = ScaledFloatingField > 8192.0 || ScaledFloatingField < 2530.0;
  BOOL v14 = v10 > 0.03 || v10 < 0.0;
  BOOL v15 = v11 > dbl_263BB2E50[v12 == 1] || v11 < dbl_263BB2E40[v12 == 1];
  int v16 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a3 + 56))(a3);
  int v18 = v6 > 0x93A70 || v8 > 0x93A70 || v13;
  int v19 = (v18 | v14 | v15) ^ 1 | v16;
  if (v19) {
    goto LABEL_73;
  }
  int v20 = *(_DWORD *)(*((void *)this + 2) + 2568);
  if (v6 > 0x93A70)
  {
    int v21 = *((_DWORD *)this + 3);
    char v22 = "BDS";
    int v23 = "GPS";
    switch(v21)
    {
      case 0:
        break;
      case 1:
        int v23 = "SBAS";
        break;
      case 2:
        int v23 = "GLNS";
        break;
      case 3:
        int v23 = "QZSS";
        break;
      case 4:
        goto LABEL_24;
      default:
        BOOL v24 = "<->";
        if (v21 == 6) {
          BOOL v24 = "NIC";
        }
        char v22 = "GAL";
        if (v21 != 5) {
          char v22 = v24;
        }
LABEL_24:
        int v23 = v22;
        break;
    }
    GlCustomLog(11, "EphMgr(%s,%d)[%u]: Toc out of range (%u). Bad decode.\n", v23, v86, *(_DWORD *)(*((void *)this + 2) + 2568), v6);
  }
  if (v8 > 0x93A70)
  {
    int v25 = *((_DWORD *)this + 3);
    char v26 = "BDS";
    uint64_t v27 = "GPS";
    switch(v25)
    {
      case 0:
        break;
      case 1:
        uint64_t v27 = "SBAS";
        break;
      case 2:
        uint64_t v27 = "GLNS";
        break;
      case 3:
        uint64_t v27 = "QZSS";
        break;
      case 4:
        goto LABEL_39;
      default:
        double v28 = "<->";
        if (v25 == 6) {
          double v28 = "NIC";
        }
        char v26 = "GAL";
        if (v25 != 5) {
          char v26 = v28;
        }
LABEL_39:
        uint64_t v27 = v26;
        break;
    }
    GlCustomLog(11, "EphMgr(%s,%d)[%u]: Toe out of range (%u). Bad decode.\n", v27, v86, v20, v8);
    if (!v13)
    {
LABEL_30:
      if (!v14) {
        goto LABEL_31;
      }
      goto LABEL_53;
    }
  }
  else if (!v13)
  {
    goto LABEL_30;
  }
  int v29 = *((_DWORD *)this + 3);
  double v30 = "BDS";
  unsigned int v31 = "GPS";
  switch(v29)
  {
    case 0:
      break;
    case 1:
      unsigned int v31 = "SBAS";
      break;
    case 2:
      unsigned int v31 = "GLNS";
      break;
    case 3:
      unsigned int v31 = "QZSS";
      break;
    case 4:
      goto LABEL_49;
    default:
      unsigned int v32 = "<->";
      if (v29 == 6) {
        unsigned int v32 = "NIC";
      }
      double v30 = "GAL";
      if (v29 != 5) {
        double v30 = v32;
      }
LABEL_49:
      unsigned int v31 = v30;
      break;
  }
  GlCustomLog(11, "EphMgr(%s,%d)[%u]: ASqrt out of range (%.8g). Bad decode.\n", v31, v86, v20, ScaledFloatingField);
  if (!v14)
  {
LABEL_31:
    if (!v15) {
      goto LABEL_73;
    }
    goto LABEL_63;
  }
LABEL_53:
  int v33 = *((_DWORD *)this + 3);
  int v34 = "BDS";
  unsigned int v35 = "GPS";
  switch(v33)
  {
    case 0:
      break;
    case 1:
      unsigned int v35 = "SBAS";
      break;
    case 2:
      unsigned int v35 = "GLNS";
      break;
    case 3:
      unsigned int v35 = "QZSS";
      break;
    case 4:
      goto LABEL_59;
    default:
      BOOL v36 = "<->";
      if (v33 == 6) {
        BOOL v36 = "NIC";
      }
      int v34 = "GAL";
      if (v33 != 5) {
        int v34 = v36;
      }
LABEL_59:
      unsigned int v35 = v34;
      break;
  }
  GlCustomLog(11, "EphMgr(%s,%d)[%u]: Ecc out of range (%.8g). Bad decode.\n", v35, v86, v20, v10);
  if (v15)
  {
LABEL_63:
    int v37 = *((_DWORD *)this + 3);
    unsigned __int16 v38 = "BDS";
    uint64_t v39 = "GPS";
    switch(v37)
    {
      case 0:
        break;
      case 1:
        uint64_t v39 = "SBAS";
        break;
      case 2:
        uint64_t v39 = "GLNS";
        break;
      case 3:
        uint64_t v39 = "QZSS";
        break;
      case 4:
        goto LABEL_69;
      default:
        int v40 = "<->";
        if (v37 == 6) {
          int v40 = "NIC";
        }
        unsigned __int16 v38 = "GAL";
        if (v37 != 5) {
          unsigned __int16 v38 = v40;
        }
LABEL_69:
        uint64_t v39 = v38;
        break;
    }
    GlCustomLog(11, "EphMgr(%s,%d)[%u]: I0 out of range (%.8g). Bad decode.\n", v39, v86, v20, v11);
  }
LABEL_73:
  int v41 = a2;
  if (!a2) {
    return v19 & 1;
  }
  int v42 = *((unsigned char *)a2 + 8) & 0xF;
  if ((*((unsigned char *)a2 + 8) & 0xF) == 0) {
    return v19 & 1;
  }
  int v43 = v19 ^ 1;
  BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 2), 1, &v81);
  int isExpired = BlueFin::GlPeEphemeris::isExpired(a3, (uint64_t)&v81);
  if (v42 == 1)
  {
    v81.n128_u16[4] = 3937;
    double v82 = v84;
    int32x2_t v83 = vdup_n_s32(0xFF9222FF);
    long long v45 = *((_OWORD *)a3 + 3);
    v84[0] = *((_OWORD *)a3 + 2);
    v84[1] = v45;
    v85[0] = *((_OWORD *)a3 + 4);
    *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)((char *)a3 + 76);
    v81.n128_u64[0] = (unint64_t)&unk_270EBED80;
    BOOL v46 = BlueFin::GlPeNicEphemeris::CompareEphSetFields((BlueFin::GlPeNicEphemeris *)&v81, a2);
    LOBYTE(v19) = v19 | (v46 | isExpired) ^ 1;
    if ((*(unsigned int (**)(BlueFin::GlPeNicEphMgr *, uint64_t *))(*(void *)this + 264))(this, &v86))
    {
      if (v46)
      {
        if (BlueFin::GlPeNicEphemeris::CompareEphSetFields(a2, (const BlueFin::GlPeNicEphemeris *)&v81))
        {
          int v47 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, void))(*(void *)a2 + 192))(a2, 0);
          if (v47 == (*(unsigned int (**)(__n128 *, void))(v81.n128_u64[0] + 192))(&v81, 0))
          {
            int v48 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 4);
            if (v48 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 192))(&v81, 4))
            {
              int v49 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 6);
              if (v49 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 6))
              {
                int v50 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 29);
                if (v50 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 192))(&v81, 29))
                {
                  int v51 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 7);
                  if (v51 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 192))(&v81, 7))
                  {
                    int v52 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 8);
                    if (v52 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 8))
                    {
                      int v53 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 9);
                      if (v53 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 9))
                      {
                        int v54 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 10);
                        if (v54 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 10))
                        {
                          int v55 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 11);
                          if (v55 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 11))
                          {
                            int v56 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 12);
                            if (v56 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 12))
                            {
                              int v57 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 13);
                              if (v57 != (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 13))goto LABEL_128; {
                              int v58 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 14);
                              }
                              if (v58 != (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 14))goto LABEL_128; {
                              int v59 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 15);
                              }
                              if (v59 != (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 192))(&v81, 15))goto LABEL_128; {
                              int v60 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 16);
                              }
                              if (v60 != (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 16))goto LABEL_128; {
                              int v61 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 17);
                              }
                              if (v61 != (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 192))(&v81, 17))goto LABEL_128; {
                              int v62 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 18);
                              }
                              if (v62 != (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 192))(&v81, 18))goto LABEL_128; {
                              int v63 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 19);
                              }
                              if (v63 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 19)&& (int v64 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 20), v64 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 20))&& (v65 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 21), v65 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 21))&& (v66 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 22), v66 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81,
                                             22))
                                && (int v67 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 23), v67 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 23))&& (v68 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 24), v68 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 24))&& (v69 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 25), v69 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 25)))
                              {
                                int v41 = a2;
                                int v70 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 208))(a2, 26);
                                if (v70 == (*(unsigned int (**)(__n128 *, uint64_t))(v81.n128_u64[0] + 208))(&v81, 26))
                                {
                                  LOBYTE(v19) = 1;
                                  (*(void (**)(__n128 *, uint64_t, uint64_t))(v81.n128_u64[0] + 216))(&v81, 2, 1);
                                  goto LABEL_125;
                                }
                              }
                              else
                              {
LABEL_128:
                                int v41 = a2;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        int v71 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v41 + 184))(v41);
        int v72 = *((_DWORD *)this + 3);
        if (v71)
        {
          unsigned int v73 = "BDS";
          unsigned int v74 = "GPS";
          switch(v72)
          {
            case 0:
              break;
            case 1:
              unsigned int v74 = "SBAS";
              break;
            case 2:
              unsigned int v74 = "GLNS";
              break;
            case 3:
              unsigned int v74 = "QZSS";
              break;
            case 4:
              goto LABEL_113;
            default:
              unsigned int v77 = "<->";
              if (v72 == 6) {
                unsigned int v77 = "NIC";
              }
              unsigned int v73 = "GAL";
              if (v72 != 5) {
                unsigned int v73 = v77;
              }
LABEL_113:
              unsigned int v74 = v73;
              break;
          }
          GlCustomLog(14, "EphMgr(%s,%d): Compare with existing external eph which is verified did not match.  Reject this new broadcast.\n", v74, v86);
          LOBYTE(v19) = 0;
        }
        else
        {
          uint8x8_t v75 = "BDS";
          unsigned __int8 v76 = "GPS";
          switch(v72)
          {
            case 0:
              break;
            case 1:
              unsigned __int8 v76 = "SBAS";
              break;
            case 2:
              unsigned __int8 v76 = "GLNS";
              break;
            case 3:
              unsigned __int8 v76 = "QZSS";
              break;
            case 4:
              goto LABEL_121;
            default:
              int v78 = "<->";
              if (v72 == 6) {
                int v78 = "NIC";
              }
              uint8x8_t v75 = "GAL";
              if (v72 != 5) {
                uint8x8_t v75 = v78;
              }
LABEL_121:
              unsigned __int8 v76 = v75;
              break;
          }
          GlCustomLog(14, "EphMgr(%s,%d): Compare with existing external eph which is unverified did not match. Possible bad decode.\n", v76, v86);
          LOBYTE(v19) = 0;
          int v43 = 1;
        }
      }
    }
  }
LABEL_125:
  if ((v43 | isExpired))
  {
    (*(void (**)(BlueFin::GlPeNicEphMgr *, uint64_t *, void))(*(void *)this + 288))(this, &v86, 0);
    LOBYTE(v19) = v19 & (isExpired ^ 1);
  }
  return v19 & 1;
}

uint64_t BlueFin::GlPeNicEphemeris::GetCmpSignedField(BlueFin::GlPeNicEphemeris *this, int a2)
{
  BOOL v2 = (unsigned int *)*((void *)this + 2);
  switch(a2)
  {
    case 6:
      return ((int)(v2[2] << 18) >> 24);
    case 8:
      return ((int)(v2[1] << 22) >> 24);
    case 9:
      return (__int16)((int)v2[1] >> 10);
    case 10:
      unsigned int v5 = *v2;
      unsigned int v4 = v2[1];
      goto LABEL_20;
    case 11:
      return ((int)(8 * v2[6]) >> 17);
    case 12:
      HIDWORD(v7) = v2[2];
      LODWORD(v7) = v2[3];
      int v6 = v7 >> 6;
      goto LABEL_21;
    case 13:
      return v2[7];
    case 14:
      HIDWORD(v9) = v2[3];
      LODWORD(v9) = v2[4];
      int v8 = v9 >> 8;
      goto LABEL_16;
    case 16:
      return ((int)(v2[4] << 7) >> 17);
    case 19:
      HIDWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v2[4];
      LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v2[5];
      int v8 = v10 >> 10;
      goto LABEL_16;
    case 20:
      unsigned int v12 = v2[10];
      unsigned int v11 = v2[11];
      goto LABEL_18;
    case 21:
      return ((int)(32 * v2[5]) >> 17);
    case 22:
      return (__PAIR64__(v2[13], v2[14]) >> 26);
    case 23:
      HIDWORD(v13) = v2[5];
      LODWORD(v13) = v2[6];
      int v8 = v13 >> 12;
LABEL_16:
      uint64_t result = (v8 >> 17);
      break;
    case 24:
      unsigned int v12 = v2[11];
      unsigned int v11 = v2[12];
LABEL_18:
      uint64_t result = (__PAIR64__(v12, v11) >> 16);
      break;
    case 25:
      unsigned int v5 = v2[12];
      unsigned int v4 = v2[13];
LABEL_20:
      int v6 = __PAIR64__(v5, v4) >> 16;
LABEL_21:
      uint64_t result = (v6 >> 10);
      break;
    case 26:
      uint64_t result = ((int)(v2[6] << 18) >> 18);
      break;
    default:
      DeviceFaultNotify("glpe_nicephmgr.cpp", 1042, "GetCmpSignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 1042, "0");
  }
  return result;
}

uint64_t BlueFin::GlPeNicEphemeris::GetGnssId@<X0>(BlueFin::GlPeNicEphemeris *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, void))(*(void *)this + 192))(this, 0);
  *a2 = result;
  return result;
}

BOOL BlueFin::GlPeNicEphemeris::GetOrbitType(BlueFin::GlPeNicEphemeris *this)
{
  return BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 22) > 0.314159265;
}

void BlueFin::GlPeTimeManager::Deserialize(BlueFin::GlPeTimeManager *this, BlueFin::GlSysLogEntry *a2, int a3)
{
  int v8 = *((_DWORD *)a2 + 2);
  if (!v4 & v3)
  {
    switch(v8)
    {
      case '_':
        int8x8_t v34 = (int8x8_t)&unk_270EC9528;
        *(_DWORD *)unsigned int v35 = 0;
        *(_WORD *)&unsigned char v35[4] = 0;
        *(void *)&v35[8] = 0;
        *(void *)&v35[16] = 0;
        LODWORD(v36) = 0;
        if (BlueFin::GlPeGalUtcModelData::Deserialize((BlueFin::GlPeGalUtcModelData *)&v34, a2)) {
          BlueFin::GlPeTimeManager::SetGalUtcModel(this, (const BlueFin::GlPeGalUtcModelData *)&v34, a3);
        }
        break;
        int8x8_t v34 = (int8x8_t)&unk_270EC9558;
        *(_DWORD *)unsigned int v35 = 0;
        *(_WORD *)&unsigned char v35[4] = 0;
        *(void *)&v35[8] = 0;
        *(_WORD *)&v35[16] = 0;
        if (BlueFin::GlPeGalGpsOffsetData::Deserialize((BlueFin::GlPeGalGpsOffsetData *)&v34, a2)) {
          BlueFin::GlPeTimeManager::SetGalGpsSystemOffset(this, (const BlueFin::GlPeGalGpsOffsetData *)&v34, a3);
        }
        break;
      case 'b':
        int8x8_t v34 = (int8x8_t)&unk_270EC9780;
        LODWORD(v37) = 1333788672;
        *(void *)&v35[16] = 0;
        uint64_t v36 = 0;
        *(void *)unsigned int v35 = &off_270EBC600;
        *(void *)&v35[8] = 0;
        if (BlueFin::GlPeGnssTimeModelData::Deserialize((BlueFin::GlPeGnssTimeModelData *)&v34, a2)) {
          BlueFin::GlPeTimeManager::SetGnssTimeModel(this, &v35[16], *(float *)&v37);
        }
        break;
      case 'g':
        BlueFin::GlPeRtcModel::Deserialize((BlueFin::GlPeTimeManager *)((char *)this + 3640), a2);
        break;
      case 'k':
        int8x8_t v34 = (int8x8_t)&unk_270EBF0D0;
        *(_DWORD *)unsigned int v35 = 0;
        *(_WORD *)&unsigned char v35[4] = 0;
        *(void *)&v35[8] = 0;
        *(void *)&v35[16] = 0;
        LOWORD(v36) = 0;
        if (BlueFin::GlPeNicUtcModelData::Deserialize((BlueFin::GlPeNicUtcModelData *)&v34, a2))
        {
          BlueFin::GlPeNicTimeMgr::SetUtcModel((BlueFin::GlPeTimeManager *)((char *)this + 2440), (const BlueFin::GlPeNicUtcModelData *)&v34);
          *((unsigned char *)this + 2504) = 0;
        }
        break;
      case 'l':
        int8x8_t v34 = (int8x8_t)&unk_270EBF100;
        *(_DWORD *)unsigned int v35 = 0;
        *(_WORD *)&unsigned char v35[4] = 0;
        *(void *)&v35[8] = 0;
        *(void *)&v35[16] = 0;
        if (BlueFin::GlPeNicGpsOffsetData::Deserialize((BlueFin::GlPeNicGpsOffsetData *)&v34, a2))
        {
          BlueFin::GlPeNicTimeMgr::SetGpsOffset((BlueFin::GlPeTimeManager *)((char *)this + 2440), (const BlueFin::GlPeNicGpsOffsetData *)&v34);
          int v10 = *((unsigned __int8 *)this + 2544);
          *((unsigned char *)this + 2544) = 0;
          if (v10) {
            BlueFin::GlPeTimeManager::updateConversionTable(this);
          }
        }
        break;
      default:
LABEL_101:
        DeviceFaultNotify("glpe_timemgr.cpp", 5426, "Deserialize", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 5426, "0");
    }
  }
  else
  {
    switch(v8)
    {
      case 30:
        if (*((unsigned __int8 *)a2 + 12) - 1 <= 6)
        {
          BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v34);
          unint64_t v9 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManagerData::Deserialize((BlueFin::GlPeTimeManagerData *)&v34, a2);
          if (!v9) {
            return;
          }
          if (v45 == 1)
          {
            if (v35[0]) {
              *(_DWORD *)&v35[8] = 1;
            }
            BlueFin::GlPeTimeManager::processTimeManagerData((uint64_t)this, (const BlueFin::GlPeTimeManagerData *)&v34);
            return;
          }
          int v17 = *((_DWORD *)this + 644);
          if (v17 && (v36 == -1 || *((double *)&v37 + 1) == 4294967300.0))
          {
            char v18 = 4;
            *(_DWORD *)unsigned int v35 = 4;
            int v42 = 1;
          }
          else
          {
            char v18 = v35[0];
            *(_DWORD *)&v35[8] = 1;
            if (*((_DWORD *)this + 642) == -7200001 && (v35[0] & 1) != 0) {
              *((_DWORD *)this + 642) = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v9, *(double *)&v37);
            }
            if ((v18 & 4) == 0) {
              goto LABEL_61;
            }
          }
          *((unsigned char *)this + 4672) = 1;
LABEL_61:
          if ((v18 & 8) != 0 && !*((unsigned char *)this + 2560)) {
            *((void *)this + 319) = v43;
          }
          if (v18)
          {
            if (v17 || *(_DWORD *)&v35[8] != 1)
            {
              if (*(_DWORD *)&v35[8] == 2)
              {
                v30.n128_u8[0] = 0;
                BlueFin::GlPeTimeManager::SetTime(this, (BlueFin::GlPeGnssTime *)&v35[16], 2u, (unsigned __int8 *)&v30);
              }
            }
            else
            {
              double v19 = *((double *)this + 319);
              if (v19 > 0.0)
              {
                if (!*((unsigned char *)this + 2560)) {
                  BlueFin::GlPeGnssTime::operator-=((unsigned int *)&v35[16], v19 * 0.001);
                }
                BlueFin::GlPeTimeManager::recoverFromSleep((uint64_t)this, (uint64_t)&v35[8]);
              }
            }
            if ((v35[0] & 2) != 0 && v41 <= 0.01)
            {
              double v20 = (double)v44;
              if (v36) {
                double v21 = v20 - v39;
              }
              else {
                double v21 = -(v40 + v20);
              }
              unsigned int v32 = &off_270EBF4E8;
              uint64_t v33 = 0;
              BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&v35[16], (BlueFin::GlGlnsTime *)&v32);
              __n128 v30 = 0uLL;
              int v31 = 0;
              BOOL v24 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
                 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
                 && HIDWORD(v33) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
              v30.n128_u8[0] = (((unsigned int (*)(void))v32[4])(&v32) - v24) / 0x7861F80 + 1;
              BOOL v27 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
                 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
                 && HIDWORD(v33) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
              v30.n128_u16[1] = (((203613265
                                               * (unint64_t)((((unsigned int (*)(void))v32[4])(&v32)
                                                                   - v27)
                                                                  % 0x7861F80)) >> 32) >> 12)
                              + 1;
              v30.n128_u32[1] = 0x7FFFFFFF;
              v30.n128_u32[2] = vcvtd_n_s64_f64(v21, 0x1EuLL);
              BlueFin::GlPeGlnTimeMgr::SetAsst((uint64_t)this + 192, 3, (char *)&v30);
            }
            if (*((_DWORD *)this + 644) && (v35[0] & 0x10) != 0 && *((unsigned char *)this + 2589)) {
              BlueFin::GlPeTimeManager::updateLeapSecFromNvMem(this, (const BlueFin::GlPeGnssTime *)&v35[16], v44);
            }
          }
          return;
        }
        BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v34);
        if ((BlueFin::GlPeTimeManagerData::Deserialize((BlueFin::GlPeTimeManagerData *)&v34, a2) & 1) == 0) {
          return;
        }
        BlueFin::GlPeTimeManager::processTimeManagerData((uint64_t)this, (const BlueFin::GlPeTimeManagerData *)&v34);
        break;
      case 31:
        int8x8_t v34 = (int8x8_t)&unk_270EC9610;
        v35[0] = 0;
        *(_WORD *)&v35[2] = 0;
        *(_DWORD *)&unsigned char v35[4] = 0;
        v35[8] = 0;
        *(void *)&v35[16] = 0;
        LOBYTE(v36) = 0;
        HIDWORD(v37) = 0;
        int v38 = 0;
        *(void *)&long long v37 = 0;
        *(_DWORD *)((char *)&v37 + 7) = 0;
        int v11 = BlueFin::GlPeGlnTimeData::Deserialize((BlueFin::GlPeGlnTimeData *)&v34, a2);
        if (*((_DWORD *)this + 644))
        {
          int v12 = v35[0] ? v11 : 0;
          if (v12 == 1 && *(_WORD *)&v35[2])
          {
            if (a3)
            {
              BlueFin::GlPeTimeManager::GetTime(this, 1, &v30);
              unsigned int v32 = &off_270EBF4E8;
              uint64_t v33 = 0;
              BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&v30, (BlueFin::GlGlnsTime *)&v32);
              BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)&v30, v35[0], *(unsigned __int16 *)&v35[2], 0.0);
              BlueFin::GlWeekTowTime::operator-((uint64_t)&v32, (uint64_t)&v30, (uint64_t)v28);
              LODWORD(v14) = v28[0];
              LODWORD(v13) = v28[1];
              double v15 = (double)v14 * 2.32830644e-10 + (double)v13;
              if (v29) {
                double v15 = -v15;
              }
              unsigned int v16 = (int)v15;
              if ((int)v15 < 0) {
                unsigned int v16 = -v16;
              }
              if (v16 <= 0x93A80) {
                BlueFin::GlPeGlnTimeMgr::initializeTimeData((uint64_t)this + 192, (uint64_t)&v34, 1u);
              }
            }
            else
            {
              BlueFin::GlPeGlnTimeMgr::SetAsst((BlueFin::GlPeTimeManager *)((char *)this + 192), (const BlueFin::GlPeGlnTimeData *)&v34);
            }
          }
        }
        break;
      case 32:
        int8x8_t v34 = (int8x8_t)&unk_270EC93F8;
        *(_WORD *)unsigned int v35 = 0;
        *(_OWORD *)&unsigned char v35[4] = 0uLL;
        if (BlueFin::GlPeBdsUtcModelData::Deserialize((BlueFin::GlPeBdsUtcModelData *)&v34, a2)) {
          BlueFin::GlPeTimeManager::SetBdsUtcModel(this, *(int *)&v35[4], *(unsigned __int16 *)v35, (uint64_t *)&v35[8], a3);
        }
        break;
      case 33:
        int8x8_t v34 = (int8x8_t)&unk_270EC9428;
        *(_WORD *)unsigned int v35 = 0;
        memset(&v35[4], 0, 20);
        if (BlueFin::GlPeBdsSysOffsetsData::Deserialize((BlueFin::GlPeBdsSysOffsetsData *)&v34, a2)) {
          BlueFin::GlPeTimeManager::SetBdsSystemOffsets((int8x8_t *)this, *(int *)&v35[8], *(__int16 *)v35, *(int *)&v35[4], (uint64_t *)&v35[12], a3);
        }
        break;
      case 34:
        int8x8_t v34 = (int8x8_t)&unk_270EC9458;
        *(_DWORD *)unsigned int v35 = 2;
        *(_WORD *)&unsigned char v35[4] = 0;
        *(void *)&v35[16] = 0;
        uint64_t v36 = 0;
        *(void *)&v35[8] = 0;
        if (BlueFin::GlPeBdsSingleSysOffsetData::Deserialize((BlueFin::GlPeBdsSingleSysOffsetData *)&v34, a2))BlueFin::GlPeTimeManager::SetBdsSystemOffset((int8x8_t *)this, &v34); {
        break;
        }
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
        goto LABEL_101;
      case 43:
        int8x8_t v34 = (int8x8_t)&unk_270EC96B0;
        *(_DWORD *)unsigned int v35 = 0;
        unsigned char v35[4] = 0;
        uint64_t v36 = 0;
        *(void *)&long long v37 = 0;
        *(void *)&v35[8] = &off_270EBC600;
        *(void *)&v35[16] = 0;
        if (BlueFin::GlPeGpsUtcModel::Deserialize((BlueFin::GlPeGpsUtcModel *)&v34, a2))
        {
          if (a3) {
            BlueFin::GlPeGpsTimeMgr::RecoverFromNvMem((BlueFin::GlPeTimeManager *)((char *)this + 64), (const BlueFin::GlPeGpsUtcModel *)&v34);
          }
          else {
            BlueFin::GlPeTimeManager::SetGpsUtcModel(this, (const BlueFin::GlPeGpsUtcModel *)&v34);
          }
        }
        break;
      default:
        JUMPOUT(0);
    }
  }
  BlueFin::GlPeTimeManager::updateConversionTable(this);
}

double BlueFin::GlPeNicEphemeris::ComputeAgeS(BlueFin::GlPeNicEphemeris *this, const BlueFin::GlPeGnssTime *a2, int a3)
{
  double v28 = &off_270EBF080;
  unint64_t v29 = 0;
  BlueFin::GlPeGnssTime::GetNic(a2, (BlueFin::GlNicTime *)&v28);
  unsigned int v5 = ((uint64_t (*)(void))v28[4])(&v28);
  LODWORD(v6) = v29;
  if ((double)v6 * 2.32830644e-10 + (double)v5 < 0.0) {
    return (double)(*(unsigned int (**)(BlueFin::GlPeNicEphemeris *))(*(void *)this + 88))(this) * 4.0;
  }
  unsigned __int16 v8 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
  if (a3) {
    uint64_t v9 = 18;
  }
  else {
    uint64_t v9 = 7;
  }
  int v10 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, v9);
  unsigned int v11 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 232))(this, v9) * v10;
  int v25 = &off_270EBF080;
  double v12 = fmod((double)v11, 1.0);
  if (v12 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v13 = v12 * 4294967300.0 + 0.5;
  unsigned int v14 = v13;
  if (v13 >= 4294967300.0) {
    unsigned int v14 = -1;
  }
  unsigned int v26 = v14;
  int v27 = v11 + 604800 * v8 + 619315200;
  int v25 = &off_270EBF080;
  if ((*(uint64_t (**)(BlueFin::GlPeNicEphemeris *))(*(void *)this + 80))(this))
  {
    unsigned int v15 = ((uint64_t (*)(void))v25[4])(&v25);
    unsigned int v31 = v26;
    unsigned int v32 = v15;
    unsigned int v16 = ((uint64_t (*)(void))v28[4])(&v28);
    v30[0] = v29;
    v30[1] = v16;
    BlueFin::GlTimePoint::resolveAmbiguity(&v31, v30, 0x24EA0000u);
    int v17 = ((uint64_t (*)(void (***)(BlueFin::GlNicTime *__hidden), void))v28[3])(&v28, v32);
    unsigned int v18 = v31;
  }
  else
  {
    unsigned int v19 = ((uint64_t (*)(void))v25[4])(&v25);
    LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v26;
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v28, (double)v20 * 2.32830644e-10 + (double)(v19 % 0x93A80), &v31);
    unsigned int v18 = v31;
    int v17 = v32;
  }
  unsigned int v26 = v18;
  int v27 = v17;
  unsigned int v21 = v29;
  unsigned int v22 = HIDWORD(v29);
  char v23 = v17 | v18;
  if (v17 | v18)
  {
    if (v29 < __PAIR64__(v17, v18))
    {
      unsigned int v22 = (__PAIR64__(v17, v18) - v29) >> 32;
      unsigned int v21 = v18 - v29;
      char v23 = 1;
    }
    else
    {
      char v23 = 0;
      unsigned int v22 = (v29 - __PAIR64__(v17, v18)) >> 32;
      unsigned int v21 = v29 - v18;
    }
  }
  if ((v23 & ((v22 | v21) != 0)) != 0) {
    double v7 = -((double)v21 * 2.32830644e-10 + (double)v22);
  }
  else {
    double v7 = (double)v21 * 2.32830644e-10 + (double)v22;
  }
  if ((*(unsigned int (**)(BlueFin::GlPeNicEphemeris *))(*(void *)this + 144))(this) == 3
    && (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 32)
    && (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 5) <= 0x17
    && v7 >= 7080.0)
  {
    (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 32, 1);
  }
  return v7;
}

uint64_t BlueFin::GlNicTime::ctFct2fctS(BlueFin::GlNicTime *this)
{
  return (*((_DWORD *)this + 3) - 619315200);
}

uint64_t BlueFin::GlPeNicEphemeris::GetIntegerScaleFactor(BlueFin::GlPeNicEphemeris *this, unsigned int a2)
{
  if (a2 > 0x20) {
    goto LABEL_6;
  }
  if (((1 << a2) & 0x13800001FLL) != 0) {
    return 1;
  }
  if (((1 << a2) & 0x40080) == 0)
  {
LABEL_6:
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1139, "GetIntegerScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 1139, "0");
  }
  return 16;
}

BOOL BlueFin::GlPeNicEphemeris::isTimeSet(BlueFin::GlPeNicEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 27) != 0;
}

uint64_t BlueFin::GlNicTime::fct2CtFctS(BlueFin::GlNicTime *this, int a2)
{
  return (a2 + 619315200);
}

unint64_t BlueFin::GlPeTimeManager::updateConversionTable(BlueFin::GlPeTimeManager *this)
{
  BlueFin::GlPeTimeManager::makeConversionTable(this, *((_DWORD *)this + 654), (double *)this + 330);
  *((unsigned char *)this + 2716) = 1;
  unint64_t result = BlueFin::GlPeTimeManager::cacheGnssTime((uint64_t)this);
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xA7);
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::cacheGnssTime(uint64_t this)
{
  if (*(_DWORD *)(this + 2616) != -1)
  {
    uint64_t v1 = this;
    if (*(double *)(this + 2632) != 4294967300.0 && *(_DWORD *)(this + 2568) >= 0x3E8u)
    {
      BOOL v2 = (_OWORD *)(this + 4824);
      *(_DWORD *)(this + 4804) = -7200001;
      BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)this, 1, &v13);
      this = v1 + 4808;
      if ((__n128 *)(v1 + 4808) == &v13)
      {
        unsigned __int32 v3 = *(_DWORD *)(v1 + 4816);
      }
      else
      {
        *(void *)(v1 + 4808) = v13.n128_u64[0];
        unsigned __int32 v3 = v13.n128_u32[2];
        *(_DWORD *)(v1 + 4816) = v13.n128_u32[2];
        *BOOL v2 = v14;
      }
      if (v3 != -1 && *(double *)(v1 + 4832) != 4294967300.0)
      {
        *(_DWORD *)(v1 + 4804) = *(_DWORD *)(v1 + 2568);
        v13.n128_u64[0] = (unint64_t)&unk_270EC23C8;
        v13.n128_u64[1] = 0;
        BOOL v4 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
        if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
          BOOL v4 = 0;
        }
        BOOL v5 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
        BOOL v6 = v4 && v5;
        if (v4 && v5) {
          int v7 = 431999;
        }
        else {
          int v7 = 432000;
        }
        unsigned int v8 = v7 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
        LOWORD(v14) = 1980;
        WORD1(v14) = v8 / 0x15180 + 1;
        BYTE4(v14) = 1;
        BYTE5(v14) = v8 / 0x15180 + 1;
        LOBYTE(v7) = 60;
        if (v6)
        {
          LOBYTE(v9) = 59;
          LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 23;
        }
        else
        {
          unsigned int v10 = v8 % 0x15180 / 0xE10;
          unsigned int v9 = (2185 * (v8 - 3600 * ((1193047 * (unint64_t)v8) >> 32))) >> 17;
          int v7 = v8 - 60 * ((71582789 * (unint64_t)v8) >> 32);
        }
        BYTE6(v14) = v10;
        BYTE7(v14) = v9;
        BYTE8(v14) = v7;
        this = BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)this, (BlueFin::GlUtcTime *)&v13);
        unsigned int v11 = v13.n128_u32[3];
        *(_DWORD *)(v1 + 4848) = v13.n128_u32[2];
        *(_DWORD *)(v1 + 4852) = v11;
        *(void *)(v1 + 4856) = v14;
        *(unsigned char *)(v1 + 4864) = BYTE8(v14);
        if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= v11) {
          double v12 = &BlueFin::GlWeekTowTime::m_ucCurrentLs;
        }
        else {
          double v12 = &BlueFin::GlWeekTowTime::m_ucNextLs;
        }
        *(unsigned char *)(v1 + 4872) = *v12;
      }
    }
  }
  return this;
}

void BlueFin::GlPeTimeManager::makeConversionTable(BlueFin::GlPeTimeManager *this, int a2, double *a3)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  v74[1] = 0;
  unint64_t v75 = 0;
  unsigned __int32 v76 = -1;
  long long v77 = xmmword_263BB40A0;
  v74[0] = &off_270EBC600;
  v73[1] = 0;
  v73[0] = &off_270EBF538;
  v72[1] = 0;
  v72[0] = &off_270EBF588;
  v71[1] = 0;
  v71[0] = &off_270EBF080;
  int v6 = *((_DWORD *)this + 644);
  if (v6)
  {
    BlueFin::GlPeTimeManager::GetTime(this, 1, &v88);
    unint64_t v75 = v88.n128_u64[0];
    unsigned __int32 v76 = v88.n128_u32[2];
    long long v77 = v89;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v75, (BlueFin::GlGpsTime *)v74);
    BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)&v75, (BlueFin::GlGalTime *)v73);
    BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)&v75, (BlueFin::GlBdsTime *)v72);
    BlueFin::GlPeGnssTime::GetNic((BlueFin::GlPeGnssTime *)&v75, (BlueFin::GlNicTime *)v71);
  }
  int v7 = *((unsigned __int8 *)this + 2589);
  __n128 v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  uint64_t v95 = 0;
  memset_pattern16(&__b, &unk_263BBE260, 0x3CuLL);
  int v82 = 1140457472;
  if (*((unsigned char *)this + 400))
  {
    *((void *)&v90 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((void *)this + 51);
    int v82 = 981668463;
  }
  if (!v7)
  {
    int v79 = 1140457472;
    int32x2_t v85 = vdup_n_s32(0x43FA0000u);
    int v86 = 1140457472;
    if (!v6)
    {
      float v80 = 500.0;
      goto LABEL_20;
    }
    if (*((_DWORD *)this + 34)
      && !BlueFin::GlPeGpsTimeMgr::isExpired((BlueFin::GlPeTimeManager *)((char *)this + 64), (const BlueFin::GlGpsTime *)v74))
    {
      v88.n128_u64[1] = BlueFin::GlPeGpsTimeMgr::GetGps2UtcSysOffsetS((BlueFin::GlPeTimeManager *)((char *)this + 64), (const BlueFin::GlGpsTime *)v74);
      int v79 = 981668463;
    }
    if (*((_DWORD *)this + 590))
    {
      *((double *)&v92 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -BlueFin::GlPeGalTimeMgr::GetGal2UtcSysOffsetS((BlueFin::GlPeTimeManager *)((char *)this + 2336), (const BlueFin::GlGalTime *)v73);
      float v8 = 0.001;
      if (!*((_DWORD *)this + 590)) {
        float v8 = 4295000000.0;
      }
      *(float *)v85.i32 = v8;
    }
    if ((*((unsigned char *)this + 2152) & 0x40) != 0)
    {
      BlueFin::GlPeBdsTimeMgr::GetBds2UtcSysOffsetS((uint64_t)this + 2144, (const BlueFin::GlBdsTime *)v72);
      *(double *)&long long v93 = -v9;
      if ((*((unsigned char *)this + 2152) & 0x40) != 0) {
        double v10 = dbl_263BB3140[*((_WORD *)this + 1094) == 0];
      }
      else {
        double v10 = 4294967300.0;
      }
      *(float *)&__int32 v16 = v10;
      v85.i32[1] = v16;
    }
    if (*((_DWORD *)this + 618))
    {
      *((double *)&v93 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -BlueFin::GlPeNicTimeMgr::GetNic2UtcSysOffsetS((BlueFin::GlPeTimeManager *)((char *)this + 2440), (const BlueFin::GlNicTime *)v71);
      float v17 = 0.001;
      if (!*((_DWORD *)this + 618)) {
        float v17 = 4295000000.0;
      }
      int v86 = LODWORD(v17);
    }
    float v80 = 500.0;
LABEL_29:
    double v14 = 0.0;
    double v15 = 0.0;
    if (*((_DWORD *)this + 602))
    {
      double v15 = -BlueFin::GlPeGalTimeMgr::GetGal2GpsSysOffsetS((BlueFin::GlPeTimeManager *)((char *)this + 2336), (const BlueFin::GlGalTime *)v73);
      *(double *)&long long v89 = v15;
      if (!*((_DWORD *)this + 602)
        || *((__int16 *)this + 1210) == -1
        && *((__int16 *)this + 1211) == -1
        && *((unsigned __int8 *)this + 2424) == 255
        && *((unsigned char *)this + 2425) == 63)
      {
        int v18 = 1333788672;
      }
      else
      {
        int v18 = 981668463;
      }
      float v80 = *(float *)&v18;
    }
    v81.i32[0] = 1140457472;
    if ((*((unsigned char *)this + 2152) & 4) != 0)
    {
      BlueFin::GlPeBdsTimeMgr::GetBds2GpsSysOffsetS((uint64_t)this + 2144, (const BlueFin::GlBdsTime *)v72);
      double v14 = -v19;
      *((double *)&v89 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -v19;
      if ((*((unsigned char *)this + 2152) & 4) != 0)
      {
        if (*((_WORD *)this + 1114)) {
          float v13 = 0.001;
        }
        else {
          float v13 = 500.0;
        }
      }
      else
      {
        float v13 = 4295000000.0;
      }
      *(float *)v81.i32 = v13;
    }
    else
    {
      float v13 = 500.0;
    }
    v81.i32[1] = 1140457472;
    if (*((_DWORD *)this + 630))
    {
      double v11 = -BlueFin::GlPeNicTimeMgr::GetNic2GpsSysOffsetS((BlueFin::GlPeTimeManager *)((char *)this + 2440), (const BlueFin::GlNicTime *)v71);
      *(double *)&long long v90 = v11;
      if (*((_DWORD *)this + 630))
      {
        BOOL v20 = BlueFin::GlPeNicGpsOffsetData::ModelValid((BlueFin::GlPeTimeManager *)((char *)this + 2512));
        float v12 = 4295000000.0;
        if (v20) {
          float v12 = 0.001;
        }
      }
      else
      {
        float v12 = 4295000000.0;
      }
      *(float *)&v81.i32[1] = v12;
      if (v7) {
        goto LABEL_65;
      }
    }
    else
    {
      double v11 = 0.0;
      float v12 = 500.0;
      if (v7) {
        goto LABEL_65;
      }
    }
LABEL_55:
    int __b = 1140457472;
    int32x2_t v83 = vdup_n_s32(0x43FA0000u);
    if (*((unsigned char *)this + 344))
    {
      double v21 = *((double *)this + 44);
      int __b = 981668463;
      double v22 = v15 + v21;
      v88.n128_f64[0] = -v21;
      double v23 = v14 + v21;
      double v24 = v11 + v21;
      float v25 = v13 + 0.001;
      *(float *)v83.i32 = v80 + 0.001;
      *(float *)&v83.i32[1] = v13 + 0.001;
      *(double *)&long long v91 = v22;
      *((double *)&v91 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v23;
      *(double *)&long long v92 = v24;
      float v84 = v12 + 0.001;
      if ((float)(v13 + 0.001) <= 0.005) {
        goto LABEL_65;
      }
    }
    else
    {
      float v25 = 500.0;
    }
    if ((*((unsigned char *)this + 2152) & 8) != 0)
    {
      float v26 = *((_WORD *)this + 1134) ? 0.001 : 500.0;
      if (v25 > v26)
      {
        BlueFin::GlPeBdsTimeMgr::GetBds2GloSysOffsetS((uint64_t)this + 2144, (const BlueFin::GlBdsTime *)v72);
        *((double *)&v91 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -v27;
        *(float *)&v83.i32[1] = v26;
        float v13 = *(float *)v81.i32;
      }
    }
    goto LABEL_65;
  }
  float v80 = 500.0;
  if (v6) {
    goto LABEL_29;
  }
LABEL_20:
  int32x2_t v81 = vdup_n_s32(0x43FA0000u);
  double v11 = 0.0;
  float v12 = 500.0;
  float v13 = 500.0;
  double v14 = 0.0;
  double v15 = 0.0;
  if (!v7) {
    goto LABEL_55;
  }
LABEL_65:
  *(double *)&long long v94 = v14 - v15;
  float v87 = v80 + v13;
  if ((*((unsigned char *)this + 2152) & 0x10) != 0)
  {
    BlueFin::GlPeBdsTimeMgr::GetBds2GalSysOffsetS((uint64_t)this + 2144, (const BlueFin::GlBdsTime *)v72);
    *(double *)&long long v94 = -v28;
    if ((*((unsigned char *)this + 2152) & 0x10) != 0)
    {
      float v29 = 0.001;
      if (!*((_WORD *)this + 1154)) {
        float v29 = 500.0;
      }
    }
    else
    {
      float v29 = 4295000000.0;
    }
    float v87 = v29;
  }
  uint64_t v30 = 0;
  unint64_t v31 = *((unsigned int *)this + 801);
  unsigned int v32 = (unint64_t *)((char *)this + 2920);
  uint64_t v33 = (float *)((char *)this + 3040);
  do
  {
    float v34 = *v33;
    if (*v33 != 4295000000.0)
    {
      unint64_t v35 = *v32;
LABEL_74:
      v88.n128_u64[v30] = v35;
      *((float *)&__b + v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v34;
      goto LABEL_75;
    }
    float v34 = v33[72];
    if (v34 != 4295000000.0 && v34 < *((float *)&__b + v30))
    {
      unint64_t v35 = v32[36];
      goto LABEL_74;
    }
LABEL_75:
    if (((v31 >> v30) & 1) != 0 && v7 && *((float *)&__b + v30) < 2000000.0) {
      *(&__b + v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1240736768;
    }
    ++v30;
    ++v32;
    ++v33;
  }
  while (v30 != 15);
  int v36 = *((_DWORD *)this + 654);
  if (v36 != -1)
  {
    unsigned int v37 = 0;
    char v38 = 0;
    uint64_t v39 = 0;
    unsigned int v40 = *((_DWORD *)this + 654);
    int v41 = 8;
    int v42 = 10;
    char v43 = 1;
    uint64_t v44 = 5;
    int v45 = 10;
    do
    {
      if (v39 <= 4)
      {
        int v46 = v36 - v39 + (((11 - v39) * v39) >> 1);
        if (v40 <= v39) {
          LOBYTE(v46) = (((11 - v40) * v40) >> 1) - v36 + v39;
        }
        uint64_t v47 = (v46 - 1);
        unsigned int v48 = v42;
        int v49 = v41;
        uint64_t v50 = v44;
        uint64_t v51 = v39;
        char v52 = v43;
        do
        {
          uint64_t v53 = v51 + 1;
          if (v39 != 2 && v50 != 4 && v36 != v39 && v36 + v50 != 6)
          {
            uint64_t v54 = (v38 + (v37 >> 1) + v51);
            float v55 = *((float *)&__b + v54);
            if (v55 != 4295000000.0)
            {
              float v56 = *((float *)&__b + v47);
              if (v56 != 4295000000.0)
              {
                int v57 = v36 - 1 + v50 + (v48 >> 1) - 5;
                if (v40 < v53) {
                  LOBYTE(v57) = (((11 - v40) * v40) >> 1) - v36 + v52;
                }
                float v58 = v55 + v56;
                uint64_t v59 = (v57 - 1);
                float v60 = *((float *)&__b + v59);
                if (v60 == 4295000000.0 || v60 > v58)
                {
                  double v62 = v88.n128_f64[v47];
                  if (v40 <= v39) {
                    double v62 = -v62;
                  }
                  v88.n128_f64[v59] = v88.n128_f64[v54] - v62;
                  *((float *)&__b + v59) = v58;
                }
              }
            }
          }
          ++v52;
          v48 += v49;
          v49 -= 2;
          uint64_t v51 = v53;
          --v50;
        }
        while (v50);
      }
      ++v39;
      ++v43;
      --v38;
      v37 += v45;
      v45 -= 2;
      --v44;
      v42 += v41;
      v41 -= 2;
    }
    while (v39 != 6);
  }
  int v63 = a3 + 6;
  uint64_t v64 = -6;
  do
  {
    if (v64 - a2 == -6)
    {
      int v65 = 0;
      double v66 = 0.0;
    }
    else
    {
      int v67 = v64 + 6;
      if ((int)v64 + 6 >= a2) {
        int v68 = a2;
      }
      else {
        int v68 = v64 + 6;
      }
      if (v67 <= a2) {
        int v67 = a2;
      }
      int v69 = v67 + ~v68 + (11 - v68) * v68 / 2;
      double v66 = -v88.n128_f64[v69];
      if (v64 + 6 >= a2) {
        double v66 = v88.n128_f64[v69];
      }
      int v65 = *(&__b + v69);
    }
    *a3++ = v66;
    *v63++ = v65;
  }
  while (!__CFADD__(v64++, 1));
}

void BlueFin::GlPeGnssTime::GetNic(BlueFin::GlPeGnssTime *this, BlueFin::GlNicTime *a2)
{
  uint64_t v2 = *(unsigned int *)this;
  unsigned int v3 = *((_DWORD *)this + 1);
  *((_DWORD *)a2 + 2) = v2;
  *((_DWORD *)a2 + 3) = v3;
  if (*((_DWORD *)this + 2) != 5)
  {
    if (BlueFin::GlPeGnssTime::m_potConversionTable)
    {
      double v5 = *(double *)(BlueFin::GlPeGnssTime::m_potConversionTable + 40);
      double v6 = fabs(v5);
      double v7 = fmod(v6, 1.0);
      double v8 = v7 * 4294967300.0 + 0.5;
      unsigned int v9 = v8;
      if (v8 >= 4294967300.0) {
        unsigned int v9 = -1;
      }
      if (v7 < 0.0 || v7 >= 1.0)
      {
        int v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        double v19 = "glpe_timepoint.h";
        int v20 = 173;
        goto LABEL_30;
      }
      unsigned int v11 = v6;
      if (v5 >= 0.0)
      {
        uint64_t v12 = v2 + v9;
        int v13 = v3 + v11 + HIDWORD(v12);
LABEL_27:
        *((_DWORD *)a2 + 2) = v12;
        *((_DWORD *)a2 + 3) = v13;
        return;
      }
      int v14 = v3 - v11;
      if (v3 > v11 || (v3 == v11 ? (BOOL v15 = v2 >= v9) : (BOOL v15 = 0), v15))
      {
        BOOL v15 = v2 >= v9;
        LODWORD(v12) = v2 - v9;
        int v17 = !v15;
        int v13 = v14 - v17;
        goto LABEL_27;
      }
      if (v11 - v3 == v2 > v9 && v9 == v2)
      {
        int v13 = 0;
        LODWORD(v12) = 0;
        goto LABEL_27;
      }
      int v18 = "!tDelta.isNegative()";
      DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
      double v19 = "glpe_datetime.h";
      int v20 = 425;
    }
    else
    {
      int v18 = "m_potConversionTable != nullptr";
      DeviceFaultNotify("glpe_timemgr.cpp", 510, "GetNic", (char)"m_potConversionTable != nullptr");
      double v19 = "glpe_timemgr.cpp";
      int v20 = 510;
    }
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
}

uint64_t BlueFin::GlPeBdsTimeMgr::GetBds2GpsSysOffsetS(uint64_t this, const BlueFin::GlBdsTime *a2)
{
  if ((*(unsigned char *)(this + 8) & 4) != 0 && a2)
  {
    if (*(_WORD *)(this + 84)) {
      return (*(uint64_t (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeBdsTimeMgr::GetBds2GalSysOffsetS(uint64_t this, const BlueFin::GlBdsTime *a2)
{
  if ((*(unsigned char *)(this + 8) & 0x10) != 0 && a2)
  {
    if (*(_WORD *)(this + 164)) {
      return (*(uint64_t (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2);
    }
  }
  return this;
}

double BlueFin::GlPeGalTimeMgr::GetGal2GpsSysOffsetS(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlGalTime *a2)
{
  double v2 = 0.0;
  if (*((_DWORD *)this + 18))
  {
    unsigned int v5 = *((unsigned __int16 *)this + 42);
    if (__PAIR64__(*((__int16 *)this + 43), v5) != 0xFFFFFFFF0000FFFFLL
      || *((unsigned __int8 *)this + 88) != 255
      || *((unsigned char *)this + 89) != 63)
    {
      double v6 = (double)(__int16)v5;
      double v2 = v6 * -2.91038305e-11;
      if (a2)
      {
        if (*((_WORD *)this + 43))
        {
          int v7 = *((unsigned __int8 *)this + 89);
          LOBYTE(v6) = *((unsigned char *)this + 88);
          double v8 = (double)*(unint64_t *)&v6 * 3600.0;
          double v9 = fmod(v8, 1.0);
          if (v9 < 0.0 || v9 >= 1.0)
          {
            DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
          }
          double v11 = v9 * 4294967300.0 + 0.5;
          unsigned int v12 = v11;
          if (v11 >= 4294967300.0) {
            unsigned int v12 = -1;
          }
          unsigned int v26 = v12;
          unsigned int v27 = v8 + 604800 * v7;
          unsigned int v13 = (*(uint64_t (**)(const BlueFin::GlGalTime *))(*(void *)a2 + 32))(a2);
          v25[0] = *((_DWORD *)a2 + 2);
          v25[1] = v13;
          BlueFin::GlTimePoint::resolveAmbiguity(&v26, v25, 0x24EA000u);
          int v14 = (*(uint64_t (**)(const BlueFin::GlGalTime *, void))(*(void *)a2 + 24))(a2, v27);
          unsigned int v15 = *((_DWORD *)a2 + 2);
          unsigned int v16 = *((_DWORD *)a2 + 3);
          char v17 = v14 | v26;
          if (v14 | v26)
          {
            int v18 = v16 - v14;
            if (__PAIR64__(v16, v15) < __PAIR64__(v14, v26))
            {
              int v21 = v14 - v16;
              BOOL v19 = v26 >= v15;
              unsigned int v15 = v26 - v15;
              int v22 = !v19;
              unsigned int v16 = v21 - v22;
              char v17 = 1;
            }
            else
            {
              char v17 = 0;
              BOOL v19 = v15 >= v26;
              v15 -= v26;
              int v20 = !v19;
              unsigned int v16 = v18 - v20;
            }
          }
          double v23 = (double)v15 * 2.32830644e-10 + (double)v16;
          if ((v17 & ((v16 | v15) != 0)) != 0) {
            double v23 = -v23;
          }
          return v2 + (double)*((__int16 *)this + 43) * -4.4408921e-16 * v23;
        }
      }
    }
  }
  return v2;
}

double BlueFin::GlPeGpsTimeMgr::GetGps2UtcSysOffsetS(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlGpsTime *a2)
{
  double v2 = 0.0;
  if (*((_DWORD *)this + 18) && (!a2 || !BlueFin::GlPeGpsTimeMgr::isExpired(this, a2)))
  {
    BlueFin::GlPeGpsUtcModel::computeUtcSysOffsetS((BlueFin::GlPeGpsTimeMgr *)((char *)this + 64), a2);
    return -v5;
  }
  return v2;
}

BOOL BlueFin::GlPeGpsTimeMgr::isExpired(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlGpsTime *a2)
{
  int v2 = *((_DWORD *)this + 18);
  if (!v2) {
    return 1;
  }
  if (v2 == 4) {
    return 0;
  }
  unsigned int v6 = *((_DWORD *)this + 23);
  unsigned int v24 = *((_DWORD *)this + 22);
  unsigned int v25 = v6;
  double v23 = &off_270EBC600;
  if (v6 < 0x93A80)
  {
    unsigned int v7 = (*(unsigned int (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
    int v8 = v7 - *((unsigned __int8 *)this + 105);
    if (v8 >= 0) {
      __int16 v9 = v7 - *((unsigned __int8 *)this + 105);
    }
    else {
      __int16 v9 = *((unsigned __int8 *)this + 105) - v7;
    }
    __int16 v10 = v8 + 256;
    if (v8 >= -127) {
      __int16 v10 = v7 - *((unsigned __int8 *)this + 105);
    }
    if (v8 >= 128) {
      __int16 v11 = v8 - 256;
    }
    else {
      __int16 v11 = v10;
    }
    if (v9 == 128) {
      __int16 v12 = 0;
    }
    else {
      __int16 v12 = v11;
    }
    int v13 = *((unsigned __int8 *)this + 104) << 12;
    double v14 = fmod((double)v13, 1.0);
    if (v14 < 0.0 || v14 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v16 = v14 * 4294967300.0 + 0.5;
    unsigned int v17 = v16;
    if (v16 >= 4294967300.0) {
      unsigned int v17 = -1;
    }
    unsigned int v24 = v17;
    unsigned int v25 = v13 + 604800 * (unsigned __int16)(v12 + v7);
  }
  unsigned int v18 = (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
  LODWORD(v19) = *((_DWORD *)a2 + 2);
  double v20 = (double)v19 * 2.32830644e-10 + (double)v18;
  unsigned int v21 = ((uint64_t (*)(void))v23[4])(&v23);
  LODWORD(v22) = v24;
  return vabdd_f64(v20, (double)v22 * 2.32830644e-10 + (double)v21) > 4838400.0;
}

uint64_t BlueFin::GlPeGpsUtcModel::computeUtcSysOffsetS(BlueFin::GlPeGpsUtcModel *this, const BlueFin::GlGpsTime *a2)
{
  if (a2)
  {
    (*(void (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
    return (*(uint64_t (**)(const BlueFin::GlGpsTime *))(*(void *)a2 + 32))(a2);
  }
  return result;
}

double BlueFin::GlPeGalTimeMgr::GetGal2UtcSysOffsetS(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlGalTime *a2)
{
  if (!*((_DWORD *)this + 6)) {
    return 0.0;
  }
  double v4 = (double)*((int *)this + 10);
  double v5 = v4 * -9.31322575e-10;
  if (a2 && *((_DWORD *)this + 9))
  {
    int v6 = *((unsigned __int8 *)this + 45);
    LOBYTE(v4) = *((unsigned char *)this + 44);
    double v7 = (double)*(unint64_t *)&v4 * 3600.0;
    double v8 = fmod(v7, 1.0);
    if (v8 < 0.0 || v8 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v10 = v8 * 4294967300.0 + 0.5;
    unsigned int v11 = v10;
    if (v10 >= 4294967300.0) {
      unsigned int v11 = -1;
    }
    unsigned int v25 = v11;
    unsigned int v26 = v7 + 604800 * v6;
    unsigned int v12 = (*(uint64_t (**)(const BlueFin::GlGalTime *))(*(void *)a2 + 32))(a2);
    v24[0] = *((_DWORD *)a2 + 2);
    v24[1] = v12;
    BlueFin::GlTimePoint::resolveAmbiguity(&v25, v24, 0x93A8000u);
    int v13 = (*(uint64_t (**)(const BlueFin::GlGalTime *, void))(*(void *)a2 + 24))(a2, v26);
    unsigned int v14 = *((_DWORD *)a2 + 2);
    unsigned int v15 = *((_DWORD *)a2 + 3);
    char v16 = v13 | v25;
    if (v13 | v25)
    {
      int v17 = v15 - v13;
      if (__PAIR64__(v15, v14) < __PAIR64__(v13, v25))
      {
        int v20 = v13 - v15;
        BOOL v18 = v25 >= v14;
        unsigned int v14 = v25 - v14;
        int v21 = !v18;
        unsigned int v15 = v20 - v21;
        char v16 = 1;
      }
      else
      {
        char v16 = 0;
        BOOL v18 = v14 >= v25;
        v14 -= v25;
        int v19 = !v18;
        unsigned int v15 = v17 - v19;
      }
    }
    double v22 = (double)v14 * 2.32830644e-10 + (double)v15;
    if ((v16 & ((v15 | v14) != 0)) != 0) {
      double v22 = -v22;
    }
    return v5 + (double)*((int *)this + 9) * -8.8817842e-16 * v22;
  }
  return v5;
}

uint64_t BlueFin::GlPeBdsTimeMgr::GetBds2UtcSysOffsetS(uint64_t this, const BlueFin::GlBdsTime *a2)
{
  if ((*(unsigned char *)(this + 8) & 0x40) != 0 && a2)
  {
    if (*(_WORD *)(this + 44)) {
      return (*(uint64_t (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2);
    }
  }
  return this;
}

BOOL BlueFin::GlPeNicEphemeris::isSimulated(BlueFin::GlPeNicEphemeris *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 3)) {
    return 0;
  }
  int v3 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 11);
  int v4 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 23);
  if (v3) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (v4) {
    unsigned __int8 v6 = v3 == 0;
  }
  else {
    unsigned __int8 v6 = v5;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 21)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 19)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 14)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 16)) {
    ++v6;
  }
  if (!(*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 26)) {
    ++v6;
  }
  if ((*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 208))(this, 25)) {
    unsigned __int8 v7 = v6;
  }
  else {
    unsigned __int8 v7 = v6 + 1;
  }
  return v7 > 5u;
}

uint64_t BlueFin::GlPeBdsSingleSysOffsetData::Deserialize(BlueFin::GlPeBdsSingleSysOffsetData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 34 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 418);
  }
  return v3;
}

uint64_t BlueFin::GlWeekTowTime::operator-@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  unsigned int v4 = *(_DWORD *)(result + 12);
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  if (*(void *)(a2 + 8))
  {
    unsigned int v7 = v4 - v5;
    if (v4 > v5 || (v4 == v5 ? (BOOL v8 = v3 >= v6) : (BOOL v8 = 0), v8))
    {
      char v11 = 0;
      BOOL v8 = v3 >= v6;
      v3 -= v6;
      int v12 = !v8;
      unsigned int v4 = v7 - v12;
    }
    else
    {
      unsigned int v9 = v5 - v4;
      BOOL v8 = v6 >= v3;
      unsigned int v3 = v6 - v3;
      int v10 = !v8;
      unsigned int v4 = v9 - v10;
      char v11 = 1;
    }
  }
  else
  {
    char v11 = 0;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 4) = v4;
  if (v4 | v3) {
    char v13 = v11;
  }
  else {
    char v13 = 0;
  }
  *(unsigned char *)(a3 + 8) = v13;
  return result;
}

uint64_t BlueFin::GlPeGalGpsOffsetData::Deserialize(BlueFin::GlPeGalGpsOffsetData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 96 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 25) = BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 311);
  }
  return v3;
}

uint64_t BlueFin::GlPeTimeManagerData::Deserialize(BlueFin::GlPeTimeManagerData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 30) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 11 < 0xFFFFFFF6) {
    return 0;
  }
  if (v3 > 7)
  {
    *((_DWORD *)this + 39) = 2;
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 2) = U16;
    if (U16)
    {
      *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS8(a2);
      int S8 = BlueFin::GlSysLogEntry::GetS8(a2);
      double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
      switch(S8)
      {
        case 0:
          int v27 = BlueFin::GlSysLogEntry::GetU16(a2);
          double v28 = BlueFin::GlSysLogEntry::GetD64(a2);
          BlueFin::GlGpsTime::GlGpsTime((BlueFin::GlGpsTime *)&v74, v27, v28);
          goto LABEL_33;
        case 1:
          int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
          unsigned int v31 = BlueFin::GlSysLogEntry::GetU16(a2);
          double v32 = BlueFin::GlSysLogEntry::GetD64(a2);
          BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)&v74, U8, v31, v32);
          goto LABEL_33;
        case 2:
          unsigned int v33 = BlueFin::GlSysLogEntry::GetU16(a2);
          unsigned int v34 = BlueFin::GlSysLogEntry::GetU8(a2);
          unsigned int v35 = BlueFin::GlSysLogEntry::GetU8(a2);
          int v36 = BlueFin::GlSysLogEntry::GetU8(a2);
          int v37 = BlueFin::GlSysLogEntry::GetU8(a2);
          double v38 = BlueFin::GlSysLogEntry::GetD64(a2);
          BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)&v74, v33, v34, v35, v36, v37, v38);
          goto LABEL_33;
        case 3:
          int v39 = BlueFin::GlSysLogEntry::GetU16(a2);
          double v40 = BlueFin::GlSysLogEntry::GetD64(a2);
          BlueFin::GlGalTime::GlGalTime((BlueFin::GlGalTime *)&v74, v39, v40);
          goto LABEL_33;
        case 4:
          int v41 = BlueFin::GlSysLogEntry::GetU16(a2);
          double v42 = BlueFin::GlSysLogEntry::GetD64(a2);
          BlueFin::GlBdsTime::GlBdsTime((BlueFin::GlBdsTime *)&v74, v41, v42);
          goto LABEL_33;
        case 5:
          int v43 = BlueFin::GlSysLogEntry::GetU16(a2);
          double v44 = BlueFin::GlSysLogEntry::GetD64(a2);
          BlueFin::GlNicTime::GlNicTime((BlueFin::GlNicTime *)&v74, v43, v44);
LABEL_33:
          uint64_t v29 = *((void *)&v74 + 1);
          break;
        default:
          uint64_t v29 = 0;
          break;
      }
      uint64_t v73 = v29;
      double v23 = BlueFin::GlSysLogEntry::GetD64(a2);
      if (*((unsigned __int8 *)a2 + 12) < 0xAu) {
        int U32 = -1;
      }
      else {
        int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      }
      *((_DWORD *)this + 14) = U32;
      if ((*((_DWORD *)this + 2) & 0x40) == 0)
      {
LABEL_54:
        long long v75 = 0u;
        long long v76 = 0u;
        long long v74 = 0u;
        memset_pattern16(&v77, &unk_263BBE270, 0x18uLL);
        int v48 = *((_DWORD *)this + 2);
        if ((v48 & 2) != 0)
        {
          unsigned int v49 = BlueFin::GlSysLogEntry::GetU8(a2);
          if (v49)
          {
            unsigned int v50 = v49;
            uint64_t v51 = 0;
            uint64_t v52 = v49;
            do
            {
              double v53 = BlueFin::GlSysLogEntry::GetD64(a2);
              double v54 = BlueFin::GlSysLogEntry::GetD64(a2);
              if (v50 == 6)
              {
                *((double *)&v74 + v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v53;
                float v55 = v54;
                *((float *)&v77 + v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v55;
              }
              ++v51;
            }
            while (v52 != v51);
          }
          long long v56 = v75;
          *((_OWORD *)this + 4) = v74;
          *((_OWORD *)this + 5) = v56;
          long long v57 = v77;
          *((_OWORD *)this + 6) = v76;
          *((_OWORD *)this + 7) = v57;
          *((void *)this + 16) = v78;
          int v48 = *((_DWORD *)this + 2);
        }
        if (v48)
        {
          *((void *)this + 3) = v73;
          *((_DWORD *)this + 8) = S8;
          *((double *)this + 5) = D64;
          *((double *)this + 6) = v23;
          if ((v48 & 4) == 0)
          {
LABEL_63:
            if ((v48 & 8) == 0) {
              goto LABEL_64;
            }
            goto LABEL_69;
          }
        }
        else if ((v48 & 4) == 0)
        {
          goto LABEL_63;
        }
        *((_DWORD *)this + 34) = BlueFin::GlSysLogEntry::GetU8(a2);
        int v48 = *((_DWORD *)this + 2);
        if ((v48 & 8) == 0)
        {
LABEL_64:
          if ((v48 & 0x10) == 0)
          {
LABEL_66:
            float v58 = a2;
            int v59 = 1503;
LABEL_104:
            BlueFin::GlSysLogEntry::CheckConsumed(v58, v59);
            return 1;
          }
LABEL_65:
          *((unsigned char *)this + 152) = BlueFin::GlSysLogEntry::GetS8(a2);
          goto LABEL_66;
        }
LABEL_69:
        *((double *)this + 18) = BlueFin::GlSysLogEntry::GetD64(a2);
        if ((*((_DWORD *)this + 2) & 0x10) == 0) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v73 = 0;
      int S8 = -1;
      double v23 = 0.0;
      double D64 = 0.0;
      if ((U16 & 0x40) == 0) {
        goto LABEL_54;
      }
    }
    __int16 v46 = BlueFin::GlSysLogEntry::GetU16(a2);
    char v47 = v46;
    if (v46 < 0)
    {
      BlueFin::GlSysLogEntry::GetD64(a2);
      if ((v47 & 1) == 0)
      {
LABEL_40:
        if ((v47 & 2) == 0) {
          goto LABEL_41;
        }
        goto LABEL_48;
      }
    }
    else if ((v46 & 1) == 0)
    {
      goto LABEL_40;
    }
    BlueFin::GlSysLogEntry::GetU16(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    if ((v47 & 2) == 0)
    {
LABEL_41:
      if ((v47 & 4) == 0) {
        goto LABEL_42;
      }
      goto LABEL_49;
    }
LABEL_48:
    BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::GetU16(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    if ((v47 & 4) == 0)
    {
LABEL_42:
      if ((v47 & 8) == 0) {
        goto LABEL_43;
      }
      goto LABEL_50;
    }
LABEL_49:
    BlueFin::GlSysLogEntry::GetU16(a2);
    BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    if ((v47 & 8) == 0)
    {
LABEL_43:
      if ((v47 & 0x10) == 0) {
        goto LABEL_44;
      }
      goto LABEL_51;
    }
LABEL_50:
    BlueFin::GlSysLogEntry::GetU16(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    if ((v47 & 0x10) == 0)
    {
LABEL_44:
      if ((v47 & 0x20) == 0) {
        goto LABEL_54;
      }
      goto LABEL_52;
    }
LABEL_51:
    BlueFin::GlSysLogEntry::GetU16(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
    if ((v47 & 0x20) == 0) {
      goto LABEL_54;
    }
LABEL_52:
    if (*((unsigned __int8 *)a2 + 12) >= 9u)
    {
      BlueFin::GlSysLogEntry::GetU16(a2);
      BlueFin::GlSysLogEntry::GetD64(a2);
      BlueFin::GlSysLogEntry::GetD64(a2);
    }
    goto LABEL_54;
  }
  *((_DWORD *)this + 2) = 0;
  unsigned int v6 = BlueFin::GlSysLogEntry::GetU32(a2);
  unsigned int v7 = v6;
  unsigned int v8 = *((unsigned __int8 *)a2 + 12);
  if (v8 <= 3)
  {
    unsigned int v7 = v6 <= 0x7A120 ? 500000 : v6;
    if (v8 - 1 <= 1) {
      BlueFin::GlSysLogEntry::GetS32(a2);
    }
  }
  unsigned int v9 = BlueFin::GlSysLogEntry::GetU32(a2);
  unsigned int v72 = BlueFin::GlSysLogEntry::GetU32(a2);
  int v71 = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + 39) = 0;
  if (*((unsigned __int8 *)a2 + 12) < 2u) {
    goto LABEL_23;
  }
  int v10 = BlueFin::GlSysLogEntry::GetU32(a2);
  int v11 = BlueFin::GlSysLogEntry::GetU16(a2);
  if (v10 == -1 && v11 == 0xFFFF) {
    *((_DWORD *)this + 39) = 1;
  }
  if (*((unsigned __int8 *)a2 + 12) <= 3u)
  {
LABEL_23:
    BOOL v14 = 0;
    unsigned int v25 = 0;
    unsigned __int8 v26 = 0;
    unsigned int v20 = 0;
    BOOL v17 = 0;
    BOOL v18 = 0;
    int S32 = 1000 * (char)(byte_26B4343F0 - 1);
    BOOL v16 = v7 != -1;
    double v13 = 0.0;
    double v15 = 0.0;
  }
  else
  {
    unsigned int v12 = BlueFin::GlSysLogEntry::GetU32(a2);
    double v13 = BlueFin::GlSysLogEntry::GetD64(a2);
    unsigned __int8 v70 = BlueFin::GlSysLogEntry::GetU16(a2);
    unsigned int v69 = BlueFin::GlSysLogEntry::GetU16(a2);
    BOOL v14 = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    double v15 = (double)v12 * 0.001;
    BOOL v16 = v7 != -1;
    if (*((unsigned __int8 *)a2 + 12) < 5u)
    {
      unsigned int v20 = 0;
      BOOL v17 = 0;
      BOOL v18 = 0;
      int S32 = 1000 * (char)(byte_26B4343F0 - 1);
    }
    else
    {
      BOOL v16 = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      BOOL v17 = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      BOOL v18 = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      int S32 = BlueFin::GlSysLogEntry::GetS32(a2);
      if (*((unsigned __int8 *)a2 + 12) < 6u)
      {
        unsigned int v20 = 0;
      }
      else
      {
        unsigned int v20 = BlueFin::GlSysLogEntry::GetU32(a2);
        if (*((unsigned char *)a2 + 12) == 7) {
          BlueFin::GlSysLogEntry::GetU8(a2);
        }
      }
    }
    unsigned int v25 = v69;
    unsigned __int8 v26 = v70;
  }
  if (*((_DWORD *)this + 39) != 1) {
    goto LABEL_80;
  }
  if (!v9)
  {
    *((_DWORD *)this + 2) |= 8u;
    *((double *)this + 18) = (double)v20 * 1000.0;
    return 1;
  }
  if (v9 != 1)
  {
    if (v9 >= 0xFFFFFFF7)
    {
      *((_DWORD *)this + 2) |= 4u;
      *((_DWORD *)this + 34) = ~v9;
      return 1;
    }
LABEL_80:
    if (v18)
    {
      *((_DWORD *)this + 2) |= 0x10u;
      *((unsigned char *)this + 152) = ((unint64_t)(274877907 * S32) >> 38) + (274877907 * S32 < 0);
      if (v14) {
        float v60 = 0.001;
      }
      else {
        float v60 = 0.5;
      }
      if (v14) {
        double v61 = v13;
      }
      else {
        double v61 = 0.0;
      }
    }
    else
    {
      double v61 = 0.0;
      float v60 = 2000000.0;
    }
    double v62 = (double)S32;
    if (v16)
    {
      *(void *)&long long v74 = &off_270EBC600;
      double v63 = fmod((double)v72 * 0.001, 1.0);
      if (v63 < 0.0 || v63 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v65 = v63 * 4294967300.0 + 0.5;
      unsigned int v66 = v65;
      if (v65 >= 4294967300.0) {
        unsigned int v66 = -1;
      }
      *((void *)this + 8) = 0;
      *((_DWORD *)this + 28) = 0;
      float v67 = 2000000.0;
      if (v18) {
        float v67 = 500.0;
      }
      *((double *)this + 9) = -(v61 + v62 * 0.001);
      *((double *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v62 * -0.001;
      *((float *)this + 29) = v60;
      *((float *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v67;
      uint64_t v68 = ((double)v72 * 0.001) + 604800 * v71;
    }
    else
    {
      if (!v17)
      {
        if (v18) {
          goto LABEL_108;
        }
        goto LABEL_101;
      }
      BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)&v74, v26, v25, v15);
      unsigned int v66 = DWORD2(v74);
      uint64_t v68 = HIDWORD(v74) | 0x100000000;
      *((double *)this + 8) = v61 + v62 * 0.001;
      *((float *)this + 28) = v60;
      *((void *)this + 9) = 0;
      *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *(void *)((char *)this + 116) = 0x43FA000000000000;
    }
    *((_DWORD *)this + 2) |= 3u;
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 6) = v66;
    *(void *)((char *)this + 28) = v68;
    *((double *)this + 5) = (double)v9;
    *((double *)this + 6) = (double)v7;
    if (v18)
    {
LABEL_108:
      *((_DWORD *)this + 2) |= 0x10u;
      *((unsigned char *)this + 152) = S32 / 1000;
      if (!v20) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
LABEL_101:
    if (!v20)
    {
LABEL_103:
      float v58 = a2;
      int v59 = 7337;
      goto LABEL_104;
    }
LABEL_102:
    *((_DWORD *)this + 2) |= 8u;
    *((double *)this + 18) = (double)(1000 * (unint64_t)v20);
    goto LABEL_103;
  }
  *((_DWORD *)this + 2) |= 0x20u;
  return 1;
}

uint64_t BlueFin::GlPeGalUtcModelData::Deserialize(BlueFin::GlPeGalUtcModelData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 95 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetS32(a2);
    *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetS32(a2);
    *((unsigned char *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 28) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 29) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 32) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 33) = BlueFin::GlSysLogEntry::GetS8(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 188);
  }
  return v3;
}

uint64_t BlueFin::GlPeBdsUtcModelData::Deserialize(BlueFin::GlPeBdsUtcModelData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 32) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 4 < 0xFFFFFFFD) {
    return 0;
  }
  if (v3 < 2) {
    __int16 U16 = 0;
  }
  else {
    __int16 U16 = BlueFin::GlSysLogEntry::GetU16(a2);
  }
  *((_WORD *)this + 4) = U16;
  if (*((unsigned __int8 *)a2 + 12) < 3u) {
    int U8 = 3;
  }
  else {
    int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  *((_DWORD *)this + 3) = U8;
  *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetS8(a2);
  *((unsigned char *)this + 25) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 26) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 27) = BlueFin::GlSysLogEntry::GetS8(a2);
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 132);
  return 1;
}

uint64_t BlueFin::GlPeTimeManager::updateLeapSecFromGlnsKp(BlueFin::GlPeTimeManager *this)
{
  if (*((unsigned char *)this + 432)
    && (*((unsigned char *)this + 435) = 0, *((_DWORD *)this + 646))
    && (int v1 = *((unsigned __int8 *)this + 433), v1 != 254))
  {
    return BlueFin::GlPeTimeManager::updateLeapSeconds(this, *((unsigned char *)this + 2588), 3, 0, (char)(*((unsigned char *)this + 2588) + v1));
  }
  else
  {
    return 0;
  }
}

uint64_t BlueFin::GlPeTimeManager::processTimeManagerData(uint64_t this, const BlueFin::GlPeTimeManagerData *a2)
{
  uint64_t v3 = this;
  int v4 = *((_DWORD *)a2 + 2);
  if ((v4 & 4) != 0)
  {
    int v5 = *((_DWORD *)a2 + 34);
    switch(v5)
    {
      case 1:
      case 5:
        if (!*(unsigned char *)(this + 2560) && *(double *)(this + 2736) != 4294967300.0 && (*(unsigned char *)(this + 2744) & 2) != 0) {
          this = (uint64_t)BlueFin::GlPeTimeManager::Reset((BlueFin::GlPeTimeManager *)this, v5);
        }
        break;
      case 2:
        uint64_t v11 = *(void *)(this + 56);
        *(_DWORD *)(v11 + 11856) = 3;
        *(unsigned char *)(v11 + 11889) = 1;
        break;
      case 3:
        unsigned int v12 = (unsigned char *)(*(void *)(this + 56) + 11860);
        *unsigned int v12 = 0;
        v12[28] = 1;
        break;
      default:
        break;
    }
  }
  if ((v4 & 8) != 0 && !*(unsigned char *)(v3 + 2560))
  {
    *(void *)(v3 + 2552) = *((void *)a2 + 18);
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  if (!*(unsigned char *)(v3 + 2560)) {
    *(unsigned char *)(v3 + 2564) = 1;
  }
LABEL_13:
  if ((v4 & 1) != 0 && *((_DWORD *)a2 + 8) != -1 && *((double *)a2 + 6) != 4294967300.0)
  {
    unsigned int v6 = *((_DWORD *)a2 + 4);
    if (v6 == 1)
    {
      uint64_t v7 = 78;
      uint64_t v8 = 78;
      uint64_t v9 = 78;
      if (*(double *)(v3 + 2552) > 0.0)
      {
        if (*(unsigned char *)(v3 + 2560)
          && (*(_DWORD *)(v3 + 2784) == -1
           || *(double *)(v3 + 2800) == 4294967300.0
           || fabs(BlueFin::GlPeGnssTime::operator-((unsigned int *)a2 + 6, v3 + 2776)) >= 2.1))
        {
          uint64_t v8 = 78;
          uint64_t v9 = 78;
        }
        else
        {
          BOOL v10 = BlueFin::GlPeTimeManager::recoverFromSleep(v3, (uint64_t)a2 + 16);
          uint64_t v9 = 89;
          if (v10) {
            uint64_t v8 = 89;
          }
          else {
            uint64_t v8 = 78;
          }
        }
      }
      if (*(double *)(v3 + 2552) <= 0.0) {
        uint64_t v13 = 78;
      }
      else {
        uint64_t v13 = 89;
      }
      if (*(_DWORD *)(v3 + 2784) != -1)
      {
        if (*(double *)(v3 + 2800) == 4294967300.0) {
          uint64_t v7 = 78;
        }
        else {
          uint64_t v7 = 89;
        }
      }
      this = GlCustomLog(14, "GlPeTimeManager::processTimeManagerData(%u):  SleepTimeValid:%c  NvMemValid:Y  NvRamTimeValid:%c  RecoveryAttempted:%c  TimeRecovered:%c\n", *(_DWORD *)(v3 + 2568), v13, v7, v9, v8);
    }
    else if (!*(unsigned char *)(v3 + 2560))
    {
      unsigned __int8 v14 = 0;
      this = BlueFin::GlPeTimeManager::SetTime((BlueFin::GlPeTimeManager *)v3, (const BlueFin::GlPeTimeManagerData *)((char *)a2 + 24), v6, &v14);
    }
    if ((v4 & 0x10) != 0 && !*(unsigned char *)(v3 + 2563))
    {
      this = (uint64_t)BlueFin::GlPeTimeManager::updateLeapSecFromNvMem((BlueFin::GlPeTimeManager *)v3, (const BlueFin::GlPeTimeManagerData *)((char *)a2 + 24), *((unsigned char *)a2 + 152));
      if (*(_DWORD *)(v3 + 2584)) {
        *(unsigned char *)(v3 + 284BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v3 + 2588);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeTimeManager::SetGalUtcModel(BlueFin::GlPeTimeManager *this, const BlueFin::GlPeGalUtcModelData *a2, int a3)
{
  BlueFin::GlPeGalTimeMgr::SetUtcModel((BlueFin::GlPeTimeManager *)((char *)this + 2336), a2);
  int v6 = *((unsigned __int8 *)this + 2392);
  *((unsigned char *)this + 2392) = 0;
  if (v6)
  {
    BlueFin::GlPeTimeManager::updateConversionTable(this);
    if ((a3 & 1) == 0 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(const BlueFin::GlPeGalUtcModelData *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
    }
    uint64_t v7 = 89;
  }
  else
  {
    uint64_t v7 = 78;
  }
  int v8 = *((_DWORD *)this + 642);
  if (v8 == -7200001) {
    int v8 = 0;
  }
  double v9 = (double)*((int *)a2 + 5) * 8.8817842e-16;
  double v10 = v9 * 1000000000.0;
  uint64_t v11 = 78;
  if (a3) {
    uint64_t v11 = 89;
  }
  LOBYTE(v9) = *((unsigned char *)a2 + 28);
  return GlCustomLog(15, "GlPeTimeManager::SetGalUtcModel(%u): Updated:%c  FromNvMem:%c  Source:%s  GalWeek:%d  GalTowS:%u  Model{A0(ns):%.1lf  A1(ns/s):%.1lf  WNt:%d  Tot(s):%.0lf  Tls:%d}\n", v8, v7, v11, BlueFin::GlPeTimeManager::m_acNavDataSourceImage[*((unsigned int *)a2 + 2)], *((unsigned __int16 *)a2 + 6), *((_DWORD *)a2 + 4) / 0x3E8u, (double)*((int *)a2 + 6) * 9.31322575e-10 * 1000000000.0, v10, *((unsigned __int8 *)a2 + 29), (double)*(unint64_t *)&v9 * 3600.0, *((char *)a2 + 30));
}

uint64_t BlueFin::GlPeGpsUtcModel::Deserialize(BlueFin::GlPeGpsUtcModel *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 43) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 4) < 0xFFFFFFFD) {
    return 0;
  }
  if (v3 == 3)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetS32(a2);
    *((_DWORD *)this + 8) = BlueFin::GlSysLogEntry::GetS32(a2);
  }
  else
  {
    *((_DWORD *)this + 2) = 3;
    double v6 = BlueFin::GlSysLogEntry::GetD64(a2) * 1073741820.0;
    double v7 = fmod(v6, 4294967300.0);
    if (v6 <= 4294967300.0) {
      double v7 = v6;
    }
    if (v7 < -4294967300.0) {
      double v7 = -fmod(-v7, 4294967300.0);
    }
    if (v7 < 0.0) {
      unsigned int v8 = --v7;
    }
    else {
      unsigned int v8 = v7;
    }
    *((_DWORD *)this + 9) = v8;
    double v9 = BlueFin::GlSysLogEntry::GetD64(a2) * 1.12589991e15;
    double v10 = fmod(v9, 4294967300.0);
    if (v9 <= 4294967300.0) {
      double v10 = v9;
    }
    if (v10 < -4294967300.0) {
      double v10 = -fmod(-v10, 4294967300.0);
    }
    if (v10 < 0.0) {
      unsigned int v11 = --v10;
    }
    else {
      unsigned int v11 = v10;
    }
    *((_DWORD *)this + 8) = v11;
  }
  *((unsigned char *)this + 42) = BlueFin::GlSysLogEntry::GetS8(a2);
  if (*((unsigned __int8 *)a2 + 12) > 2u) {
    LOBYTE(v12) = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  else {
    int v12 = (int)BlueFin::GlSysLogEntry::GetS32(a2) / 4096;
  }
  *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
  *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 43) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 44) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 45) = BlueFin::GlSysLogEntry::GetS8(a2);
  if (*((unsigned __int8 *)a2 + 12) < 2u)
  {
    *((void *)this + 3) = 0;
  }
  else
  {
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    double v14 = (double)BlueFin::GlSysLogEntry::GetU32(a2) * 0.001;
    double v15 = fmod(v14, 1.0);
    if (v15 < 0.0 || v15 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v17 = v15 * 4294967300.0 + 0.5;
    unsigned int v18 = v17;
    if (v17 >= 4294967300.0) {
      unsigned int v18 = -1;
    }
    *((_DWORD *)this + 6) = v18;
    *((_DWORD *)this + 7) = v14 + 604800 * U16;
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 252);
  return 1;
}

BlueFin::GlPeGpsTimeMgr *BlueFin::GlPeGpsTimeMgr::RecoverFromNvMem(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlPeGpsUtcModel *a2)
{
  if (*((unsigned char *)a2 + 42)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *((unsigned char *)a2 + 44) == 0;
  }
  if (!v2 || *((unsigned char *)a2 + 40) != 0 || *((unsigned char *)a2 + 41) != 0)
  {
    int v5 = &unk_270EC96B0;
    int v6 = *((_DWORD *)a2 + 2);
    uint64_t v9 = *((void *)a2 + 3);
    unsigned int v8 = &off_270EBC600;
    long long v10 = *((_OWORD *)a2 + 2);
    char v7 = 1;
    return (BlueFin::GlPeGpsTimeMgr *)BlueFin::GlPeGpsTimeMgr::updateModelIfBetter(this, (const BlueFin::GlPeGpsUtcModel *)&v5, 0);
  }
  return this;
}

uint64_t BlueFin::GlPeRtcModel::Deserialize(BlueFin::GlPeRtcModel *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 103) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 4) < 0xFFFFFFFD) {
    return 0;
  }
  if (v3 == 1)
  {
    *((unsigned char *)this + 8) = 0;
    *((_DWORD *)this + 3) = -7200001;
    *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    double v7 = (double)BlueFin::GlSysLogEntry::GetU32(a2) * 0.001;
    double v8 = fmod(v7, 1.0);
    if (v8 < 0.0 || v8 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v10 = v8 * 4294967300.0 + 0.5;
    unsigned int v11 = v10;
    if (v10 >= 4294967300.0) {
      unsigned int v11 = -1;
    }
    *((_DWORD *)this + 6) = v11;
    *((_DWORD *)this + 7) = v7 + 604800 * U16;
    double D64 = 60.0;
  }
  else
  {
    *((unsigned char *)this + 8) = 1;
    *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((void *)this + 3) = 0;
    *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
    double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  *((double *)this + 5) = D64;
  if (*((unsigned __int8 *)a2 + 12) < 3u)
  {
    *((void *)this + 6) = 0;
    double v13 = 1.79769313e308;
  }
  else
  {
    *((double *)this + 6) = BlueFin::GlSysLogEntry::GetD64(a2);
    double v13 = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  *((double *)this + 7) = v13;
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 1905);
  return 1;
}

BlueFin::GlGpsTime *BlueFin::GlGpsTime::GlGpsTime(BlueFin::GlGpsTime *this, int a2, long double a3)
{
  *(void *)this = &off_270EBC600;
  double v6 = fmod(a3, 1.0);
  if (v6 < 0.0 || v6 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v8 = v6 * 4294967300.0 + 0.5;
  unsigned int v9 = v8;
  if (v8 >= 4294967300.0) {
    unsigned int v9 = -1;
  }
  *((_DWORD *)this + 2) = v9;
  *((_DWORD *)this + 3) = a3 + 604800 * a2;
  *(void *)this = &off_270EBC600;
  return this;
}

BlueFin::GlPeTimeManager *BlueFin::GlPeTimeManager::updateLeapSecFromNvMem(BlueFin::GlPeTimeManager *this, const BlueFin::GlPeGnssTime *a2, unsigned __int8 a3)
{
  if (*((_DWORD *)this + 644))
  {
    int v5 = this;
    BlueFin::GlPeTimeManager::GetUtcTime((BlueFin::GlPeTimeManager *)v24, (uint64_t)this);
    uint64_t v21 = *(void *)a2;
    int v22 = *((_DWORD *)a2 + 2);
    long long v23 = *((_OWORD *)a2 + 1);
    v13[0] = &unk_270EC23C8;
    v13[1] = 0;
    BOOL v6 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
    if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
      BOOL v6 = 0;
    }
    BOOL v7 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
    BOOL v8 = v6 && v7;
    if (v6 && v7) {
      int v9 = 431999;
    }
    else {
      int v9 = 432000;
    }
    unsigned int v10 = v9 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
    __int16 v14 = 1980;
    __int16 v15 = v10 / 0x15180 + 1;
    unsigned __int8 v16 = 1;
    char v17 = v10 / 0x15180 + 1;
    LOBYTE(v9) = 60;
    if (v8)
    {
      LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 59;
      LOBYTE(v12) = 23;
    }
    else
    {
      unsigned int v12 = v10 % 0x15180 / 0xE10;
      unsigned int v11 = (2185 * (v10 - 3600 * ((1193047 * (unint64_t)v10) >> 32))) >> 17;
      int v9 = v10 - 60 * ((71582789 * (unint64_t)v10) >> 32);
    }
    char v18 = v12;
    char v19 = v11;
    char v20 = v9;
    this = (BlueFin::GlPeTimeManager *)BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)&v21, (BlueFin::GlUtcTime *)v13);
    if (v25 == v14 && v26 / 3 == v16 / 3) {
      return (BlueFin::GlPeTimeManager *)BlueFin::GlPeTimeManager::updateLeapSeconds(v5, a3, 7, 0, -128);
    }
  }
  return this;
}

BOOL BlueFin::GlPeTimeManager::recoverFromSleep(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 2552);
  if (v2 <= 0.0)
  {
    GlCustomLog(14, "GlPeTimeManager::recoverFromSleep: could not recover due to sleep time could not be determined\n");
    return 0;
  }
  int v5 = (BlueFin::GlPeRtcModel *)(a1 + 3640);
  if (BlueFin::GlPeRtcModel::IsValid((BlueFin::GlPeRtcModel *)(a1 + 3640)))
  {
    if (*(unsigned char *)(a1 + 3648))
    {
      LODWORD(v6) = *(_DWORD *)(a1 + 3652);
      double v7 = v2 + *(double *)(a2 + 24) - (double)v6;
    }
    else
    {
      int v41 = &off_270EBC600;
      uint64_t v42 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)(a2 + 8), (BlueFin::GlGpsTime *)&v41);
      unsigned int v10 = ((uint64_t (*)(void))v41[4])(&v41);
      LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v42;
      double v12 = (double)v11 * 2.32830644e-10 + (double)v10;
      unsigned int v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 3656) + 32))();
      LODWORD(v14) = *(_DWORD *)(a1 + 3664);
      double v7 = v2 + (v12 - ((double)v14 * 2.32830644e-10 + (double)v13)) * 1000.0;
    }
    double v15 = v7 + 0.5;
    double v16 = fmod(v7 + 0.5, 4294967300.0);
    if (v15 <= 4294967300.0) {
      double v16 = v15;
    }
    if (v16 < -4294967300.0) {
      double v16 = -fmod(-v16, 4294967300.0);
    }
    if (v16 < 0.0) {
      unsigned int v9 = --v16;
    }
    else {
      unsigned int v9 = v16;
    }
  }
  else
  {
    unsigned int v9 = 604800000;
  }
  uint64_t v17 = (((unint64_t)v9 + 999) * (unsigned __int128)0x4189374BC6A7F0uLL) >> 64;
  double v18 = *(double *)(a1 + 3680);
  int IsValid = BlueFin::GlPeRtcModel::IsValid(v5);
  int v20 = 0;
  double v21 = 200000.0;
  double v22 = 100.0;
  if (!IsValid) {
    goto LABEL_19;
  }
  double v23 = v18 * 0.001;
  if (v18 * 0.001 >= 101.0) {
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 3624) < v17)
  {
    int v20 = 0;
    double v22 = 100.0;
LABEL_19:
    double v24 = 0.0;
    goto LABEL_20;
  }
  double v24 = *(double *)(a1 + 3672);
  LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_DWORD *)(a1 + 3632);
  double v21 = (double)*(unint64_t *)&v21;
  HIDWORD(v32) = 1079574528;
  if (v23 >= 100.0)
  {
    if (v21 < 1001.0) {
      double v21 = 1001.0;
    }
    int v20 = 1;
    double v22 = 50.0;
  }
  else
  {
    LODWORD(v32) = *(_DWORD *)(a1 + 3628);
    double v33 = (double)v32;
    if (v23 >= v33) {
      double v22 = v18 * 0.001;
    }
    else {
      double v22 = v33;
    }
    int v20 = 1;
  }
LABEL_20:
  double v25 = (1.0 - v24) * *(double *)(a1 + 2552);
  double v26 = *(double *)(a2 + 32);
  double v27 = v26 + v22 * v25 * 0.001;
  int v28 = *(_DWORD *)(a2 + 16);
  if (v27 >= v21) {
    double v21 = v26 + v22 * v25 * 0.001;
  }
  uint64_t v47 = *(void *)(a2 + 8);
  int v48 = v28;
  *(double *)&long long v49 = -v25;
  *((double *)&v49 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v21;
  BlueFin::GlPeGnssTime::operator+=((unsigned int *)&v47, (v25 + 0.0) * 0.001);
  *(void *)&long long v49 = 0;
  *(unsigned char *)(a1 + 284BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  if (v25 >= 604800000.0) {
    goto LABEL_53;
  }
  uint64_t v29 = *((void *)&v49 + 1);
  if (*((double *)&v49 + 1) > 0.0 && *((double *)&v49 + 1) < 600000000.0)
  {
    unsigned int v30 = *(_DWORD *)(a2 + 40) + v25;
    *(_DWORD *)(a1 + 2872) = v30;
    if ((uint64_t *)(a1 + 2808) != &v47)
    {
      *(void *)(a1 + 2808) = v47;
      *(_DWORD *)(a1 + 2816) = v48;
      *(void *)(a1 + 2824) = 0;
      *(void *)(a1 + 2832) = v29;
    }
    if (*(_DWORD *)(a1 + 2576)) {
      char v31 = v20;
    }
    else {
      char v31 = 1;
    }
    if ((v31 & 1) != 0 || *(unsigned char *)(a1 + 4875))
    {
      *(unsigned char *)(a1 + 284BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
      *(double *)(a1 + 2848) = v24;
      *(double *)(a1 + 2856) = v27;
      *(double *)(a1 + 2864) = v22;
LABEL_33:
      LOBYTE(v4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      BlueFin::GlPeTimeManager::SetTime((BlueFin::GlPeTimeManager *)a1, (BlueFin::GlPeGnssTime *)&v47, 1u, (unsigned __int8 *)&v41);
      BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v41);
      uint64_t v44 = v47;
      int v45 = v48;
      long long v46 = v49;
      int v43 = 1;
      LODWORD(v42) = v42 | 0x40;
      if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        ((void (*)(void (***)(BlueFin::GlGpsTime *__hidden), void, void))v41[3])(&v41, 0, 0);
      }
      goto LABEL_45;
    }
    *(unsigned char *)(a1 + 284BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v30 < 0x5265C00;
    *(double *)(a1 + 2848) = v24;
    *(double *)(a1 + 2856) = v27;
    *(double *)(a1 + 2864) = v22;
    if (v30 <= 0x5265BFF) {
      goto LABEL_33;
    }
  }
LABEL_45:
  unsigned int v34 = (unsigned int *)(*(void *)a1 + 37792);
  *(unsigned char *)(*(void *)a1 + 1920BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v25 < 300000.0;
  double v35 = fmod(v25, 4294967300.0);
  if (v25 <= 4294967300.0) {
    double v35 = v25;
  }
  if (v35 < -4294967300.0) {
    double v35 = -fmod(-v35, 4294967300.0);
  }
  if (v35 < 0.0) {
    unsigned int v36 = --v35;
  }
  else {
    unsigned int v36 = v35;
  }
  *unsigned int v34 = v36;
LABEL_53:
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
  }
  uint64_t v37 = 89;
  if (!*(unsigned char *)(a1 + 2841)) {
    uint64_t v37 = 78;
  }
  GlCustomLog(14, "GlPeTimeManager::recoverFromSleep: SleepTimeMs:%.3lf  TimeUncUs:%.3lf  TimeRecovered:%c\n", *(double *)(a1 + 2552), *((double *)&v49 + 1), v37);
  if (*(unsigned char *)(a1 + 2841))
  {
    if (v20)
    {
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
      }
      GlCustomLog(14, "GlPeTimeManager::recoverFromSleep: PreciseRtcUsed:Y  RtcModelAgeS:%u  RtcFreqOffsetPpb:%+.3lf  AdjustedSleepMs:%.3lf  AdjustedRtcOffsetMs:%+.3lf\n");
    }
    else
    {
      if (BlueFin::GlUtils::m_ucEnabled
        && BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF))
      {
        BlueFin::GlPeRtcModel::IsValid(v5);
      }
      BlueFin::GlPeRtcModel::IsValid(v5);
      GlCustomLog(14, "GlPeTimeManager::recoverFromSleep: PreciseRtcUsed:N  RtcModelAgeS:%lu  RtcFreqOffsetPpb:---  AdjustedSleepMs:---  AdjustedRtcOffsetMs:---\n");
    }
  }
  else
  {
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
    }
    GlCustomLog(14, "GlPeTimeManager::recoverFromSleep(%u): could not recover due to ", *(_DWORD *)(a1 + 2568));
    if (v25 >= 604800000.0)
    {
      GlCustomLog(14, "sleep time too long (%.2lf days)\n");
    }
    else if (*((double *)&v49 + 1) <= 0.0)
    {
      GlCustomLog(14, "invalid time unc (%.1g us)\n");
    }
    else if (*((double *)&v49 + 1) >= 600000000.0)
    {
      GlCustomLog(14, "time unc too big (%.1f sec)\n");
    }
    else
    {
      GlCustomLog(14, "unknown reason\n", v38, v39, v40);
    }
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
  }
  *(unsigned char *)(a1 + 2913) = 1;
  return *(unsigned char *)(a1 + 2841) != 0;
}

uint64_t BlueFin::GlPeClkCalibrateMgr::ApplyClockCalibrationParameters(BlueFin::GlPeClkCalibrateMgr *this, BlueFin::GlPeLtoEphemeris *a2, unsigned int a3, int a4)
{
  int v8 = *((unsigned __int8 *)a2 + 8) >> 4;
  (*(void (**)(void (***__return_ptr)(BlueFin::GlGpsTime *__hidden), BlueFin::GlPeLtoEphemeris *))(*(void *)a2 + 136))(&v42, a2);
  int v45 = v8;
  int v9 = v42;
  char v46 = (char)v42;
  uint64_t ValidClkCalibrateParams = BlueFin::GlPeClkCalibrateMgr::GetValidClkCalibrateParams((uint64_t)this, v8, v42);
  if (!ValidClkCalibrateParams) {
    return 1;
  }
  uint64_t v11 = ValidClkCalibrateParams;
  uint64_t v42 = &off_270EBC600;
  double v12 = fmod((double)(a3 % 0x93A80), 1.0);
  if (v12 >= 1.0) {
    goto LABEL_49;
  }
  uint64_t v38 = this;
  double v13 = v12 * 4294967300.0 + 0.5;
  unsigned int v14 = v13 >= 4294967300.0 ? -1 : v13;
  unsigned int v43 = v14;
  unsigned int v44 = a3;
  uint64_t v42 = &off_270EBC600;
  int v15 = *(unsigned __int16 *)(v11 + 28);
  unsigned int v16 = *(_DWORD *)(v11 + 24);
  double v17 = fmod((double)v16, 1.0);
  if (v17 >= 1.0)
  {
LABEL_49:
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v18 = v17 * 4294967300.0 + 0.5;
  unsigned int v19 = v18;
  if (v18 >= 4294967300.0) {
    unsigned int v19 = -1;
  }
  LODWORD(v39) = v19;
  HIDWORD(v39) = v16 + 604800 * v15;
  v47[0] = v14;
  v47[1] = a3;
  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v39, v47, 0x24EA0000u);
  unsigned int v20 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v42[3])(&v42, HIDWORD(v39));
  unsigned int v40 = v39;
  unsigned int v41 = v20;
  uint64_t v39 = &off_270EBC600;
  double v21 = (double)v40 * 2.32830644e-10 + (double)v20;
  double v22 = fmod(v21, 4294967300.0);
  if (v21 <= 4294967300.0) {
    double v22 = v21;
  }
  if (v22 < -4294967300.0) {
    double v22 = -fmod(-v22, 4294967300.0);
  }
  if (v22 < 0.0) {
    unsigned int v23 = --v22;
  }
  else {
    unsigned int v23 = v22;
  }
  int v24 = a3 - v23;
  if (v24 > 604800) {
    return 2;
  }
  if (v24 > a4) {
    return 3;
  }
  if (v24 < -7200) {
    return 4;
  }
  if (a4 >> 8 < 0x2A3) {
    return 5;
  }
  unsigned int v26 = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 4);
  uint64_t result = 6;
  if (v26 >= 0xF) {
    uint64_t v27 = 6;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v26 <= 0xE)
  {
    (*(void (**)(BlueFin::GlPeLtoEphemeris *, uint64_t, void))(*(void *)a2 + 224))(a2, 10, *(unsigned int *)(v11 + 16));
    (*(void (**)(BlueFin::GlPeLtoEphemeris *, uint64_t, void))(*(void *)a2 + 224))(a2, 9, *(unsigned int *)(v11 + 20));
    unsigned int v28 = ((uint64_t (*)(void))v39[4])(&v39);
    (*(void (**)(BlueFin::GlPeLtoEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 34, v28 / 0x93A80);
    unsigned int v29 = *(_DWORD *)(v11 + 24);
    unsigned int v30 = (*(uint64_t (**)(BlueFin::GlPeLtoEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 7);
    (*(void (**)(BlueFin::GlPeLtoEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 7, v29 / v30);
    (*(void (**)(BlueFin::GlPeLtoEphemeris *, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 33, 1);
    float v31 = (float)((float)v24 * 4.0) / 86400.0;
    if (v31 >= 0.0)
    {
      uint64_t v34 = 0;
      double v33 = v38;
      while (BlueFin::GlPeGpsEphemerisBase::GetUraM(unsigned char)::afUraTbl[v34] < v31)
      {
        if (++v34 == 15)
        {
          LOBYTE(v34) = 2;
          break;
        }
      }
      if (v34 >= 6u) {
        uint64_t v32 = 6;
      }
      else {
        uint64_t v32 = v34;
      }
    }
    else
    {
      uint64_t v32 = 2;
      double v33 = v38;
    }
    (*(void (**)(BlueFin::GlPeLtoEphemeris *, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 4, v32);
    BlueFin::GlGnssSet::Add((uint64_t)v33 + 1344, &v45);
    double v35 = "BDS";
    unsigned int v36 = "GPS";
    switch(v8)
    {
      case 0:
        break;
      case 1:
        unsigned int v36 = "SBAS";
        break;
      case 2:
        unsigned int v36 = "GLNS";
        break;
      case 3:
        unsigned int v36 = "QZSS";
        break;
      case 4:
        goto LABEL_44;
      default:
        double v35 = "<->";
        if (v8 == 6) {
          double v35 = "NIC";
        }
        if (v8 == 5) {
          double v35 = "GAL";
        }
LABEL_44:
        unsigned int v36 = v35;
        break;
    }
    unsigned int v37 = ((uint64_t (*)(void))v39[4])(&v39);
    GlCustomLog(14, "ApplyCalibrationParameters LTO (%s,%d)(%d,%d)\n", v36, v9, v37 / 0x93A80, *(_DWORD *)(v11 + 24));
    return v27;
  }
  return result;
}

uint64_t BlueFin::GlPeClkCalibrateMgr::GetValidClkCalibrateParams(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t result = 0;
  int v6 = a2;
  char v7 = a3;
  if (!a2 && a3 - 1 <= 0x1F)
  {
    if (BlueFin::GlGnssSet::Has(a1 + 1152, &v6)) {
      return *(void *)(a1 + 1120) + 32 * (a3 - 1);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgRequest::CreateGlRequestImplSyncin(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v12 = a2;
  if (BlueFin::GlDbgMemory::m_pInstance) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a1 == 0;
  }
  if (!v14 && a2 != 0)
  {
    double v18 = (uint64_t (**)(uint64_t))a1(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v18;
    unsigned int v16 = a1;
    if (v18)
    {
      *double v18 = a1;
      v18[1] = (uint64_t (*)(uint64_t))v12;
      unsigned int v16 = a1;
    }
    goto LABEL_13;
  }
  unsigned int v16 = a1;
  if (a1)
  {
LABEL_13:
    uint64_t v17 = v16(136);
    goto LABEL_14;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
LABEL_14:
  uint64_t v19 = v17;
  if (v17)
  {
    *(void *)uint64_t v17 = &unk_270EBB200;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(void *)(v17 + 72) = a3;
    *(void *)(v17 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
    *(void *)(v17 + 88) = a5;
    *(void *)(v17 + 96) = a6;
    Memory = BlueFin::GlMemAlloc::glAllocateMemory(44, 288, a1);
    uint64_t v21 = BlueFin::GlRequestImplSyncin::Create((uint64_t)Memory, v19, (uint64_t)BlueFin::GlDbgProxyGlReqOnStart, a4, (uint64_t)BlueFin::GlDbgProxyGlReqOnSyncInReport, (uint64_t)BlueFin::GlDbgProxyGlReqOnSyncInStatus, (uint64_t)BlueFin::GlDbgProxyGlReqOnSyncInLatched);
    *(void *)(v19 + 24) = v21;
    if (!v21)
    {
      if (!v12) {
        double v12 = *(void (**)(uint64_t))(BlueFin::GlDbgMemory::m_pInstance + 8);
      }
      v12(v19);
      return 0;
    }
  }
  return v19;
}

BlueFin::GlDineCtrl *BlueFin::GlDineCtrl::GlDineCtrl(BlueFin::GlDineCtrl *this, BlueFin::GlEventPump *a2, BlueFin::GlPeIf *a3, void *(*a4)(unsigned int), void (*a5)(void *), char a6, int a7, char a8)
{
  *(void *)this = &unk_270EBCA50;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
  BlueFin::GlMeMeasAidFilter::GlMeMeasAidFilter((BlueFin::GlDineCtrl *)((char *)this + 32), a3, a6, a7);
  *((void *)this + 3704) = &unk_270EBCDB8;
  *((void *)this + 3705) = this;
  *((void *)this + 3706) = &unk_270EBCD80;
  *((void *)this + 3707) = this;
  *((unsigned char *)this + 29664) = a8;
  BlueFin::GlMeSrdAsicConfig::GlMeSrdAsicConfig((BlueFin::GlDineCtrl *)((char *)this + 29672), a7);
  *((void *)this + 3989) = &unk_270EBCE38;
  *((void *)this + 399BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 399BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 29672;
  GlCustomLog(127, "Size,GlMeSrdReceiverParameters,%u\n", 136);
  *((void *)this + 4006) = &unk_270EBD7C8;
  *((void *)this + 4007) = (char *)this + 31912;
  *((void *)this + 4008) = (char *)this + 29672;
  *(_OWORD *)((char *)this + 32072) = 0u;
  *(_OWORD *)((char *)this + 32088) = 0u;
  *(_OWORD *)((char *)this + 32104) = 0u;
  *(_OWORD *)((char *)this + 3212BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 32136) = 0u;
  *(_OWORD *)((char *)this + 32152) = 0u;
  *(_OWORD *)((char *)this + 32164) = 0u;
  BlueFin::GlMeSrdTransactionManager::GlMeSrdTransactionManager((uint64_t)this + 32192, (uint64_t)this + 29632, (uint64_t)this + 29672, (uint64_t)a2);
  BlueFin::GlMeSrdAcqMgrSm::GlMeSrdAcqMgrSm((uint64_t)this + 49536, (uint64_t)this + 29520, (uint64_t)this + 32192, (uint64_t)this + 31912, (uint64_t)this + 29672, (uint64_t)this + 29536, (uint64_t)this + 32048);
  BlueFin::GlMeSrdGeofenceMgr::GlMeSrdGeofenceMgr((uint64_t)this + 74432, (uint64_t)this + 32192, (uint64_t)this + 31912, (uint64_t)this + 29520, (uint64_t)a2, *((void *)this + 1), (uint64_t)this + 29672, (uint64_t)this + 116384);
  BlueFin::GlMeSrdCtrlSm::GlMeSrdCtrlSm((uint64_t)this + 75168, *((void *)this + 1), (uint64_t)this + 29576, (uint64_t)this + 29592, (uint64_t)this + 32192, (uint64_t)this + 29672, (uint64_t)this + 49624, (uint64_t)a2, (uint64_t)this + 32048, (uint64_t)this + 116384, (uint64_t)this + 31912, (uint64_t)this + 74696, v14, (uint64_t)this + 120096);
  BlueFin::GlMeSrdSvIdReportMgr::GlMeSrdSvIdReportMgr((uint64_t)this + 109856, (uint64_t)this + 29504, (uint64_t)this + 49736, (uint64_t)this + 29672);
  BlueFin::GlMeSrdSatReportMgr::GlMeSrdSatReportMgr((uint64_t)this + 116384, (uint64_t)this + 31912, (uint64_t)this + 109856, (uint64_t)this + 29536, (uint64_t)this + 29672, (uint64_t)this + 29520, 0, 0, (uint64_t)this + 120096);
  BlueFin::GlMeSrdStats::GlMeSrdStats((uint64_t)this + 120096, (uint64_t)this + 32192, (uint64_t)this + 29672, (uint64_t)this + 31912, (uint64_t)a3);
  BlueFin::GlMeMeasSelfAidFilter::m_potGlMeIf = (uint64_t)this;
  (*(void (**)(char *, char *))(*((void *)this + 4024) + 104))((char *)this + 32192, (char *)this + 29648);
  GlCustomLog(127, "Size,GlDineCtrl,%u\n", 186112);
  GlCustomLog(127, "    ->Size,GlMeMeasAidFilter,%u\n", 29600);
  GlCustomLog(127, "    ->Size,GlMeSrdReceiverParameters,%u\n", 136);
  GlCustomLog(127, "    ->Size,GlMeSrdReceiverParametersProgrammer,%u\n", 136);
  GlCustomLog(127, "    ->Size,GlMeSrdAsicConfig,%u\n", 2240);
  GlCustomLog(127, "    ->Size,GlMeSrdTransactionManager,%u\n", 17344);
  GlCustomLog(127, "    ->Size,GlMeSrdAcqMgr,%u\n", 112);
  GlCustomLog(127, "    ->Size,GlMeSrdCtrlSm,%u\n", 34688);
  GlCustomLog(127, "    ->Size,GlMeSrdSvIdReportMgr,%u\n", 6528);
  GlCustomLog(127, "    ->Size,GlMeSrdSatReportMgr,%u\n", 3688);
  return this;
}

void sub_26395F3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, BlueFin::GlMeSrdGeofenceMgr *a16, BlueFin::GlMeSrdAcqMgrSm *a17, uint64_t a18, uint64_t a19)
{
  BlueFin::GlMeSrdSatReportMgr::~GlMeSrdSatReportMgr(*(BlueFin::GlMeSrdSatReportMgr **)(v23 - 88));
  *double v22 = &unk_270EBD590;
  BlueFin::GlMeSrdCtrlSm::~GlMeSrdCtrlSm(v21);
  BlueFin::GlMeSrdGeofenceMgr::~GlMeSrdGeofenceMgr(a16);
  BlueFin::GlMeSrdAcqMgrSm::~GlMeSrdAcqMgrSm(a17);
  BlueFin::GlMeSrdTransactionManager::~GlMeSrdTransactionManager(v20);
  v19[3989] = a18;
  v19[3990] = 0;
  v19[4] = &unk_270EBE910;
  unsigned char v19[8] = &unk_270EBF4B0;
  v19[10] = &unk_270EBF420;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdTransactionManager::GlMeSrdTransactionManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_270EBE020;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v7 = a1 + 16;
  *(void *)(a1 + 16) = &unk_270EBDFE8;
  *(void *)(a1 + 24) = a1;
  uint64_t v8 = a1 + 96;
  *(void *)(a1 + 32) = &unk_270EBDF70;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
  *(void *)(a1 + 48) = a1 + 17112;
  *(void *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 64) = 1;
  BlueFin::GlMeSrdPacketManager::GlMeSrdPacketManager(v8, v7, a3, a4);
  *(void *)(a1 + 17024) = a2;
  *(void *)(a1 + 17032) = a3;
  *(_OWORD *)(a1 + 1704BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 17056) = 0u;
  *(_OWORD *)(a1 + 17072) = 0u;
  *(_OWORD *)(a1 + 17088) = 0u;
  *(void *)(a1 + 17104) = 0;
  *(void *)(a1 + 17112) = &unk_270EBE238;
  *(void *)(a1 + 1712BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 17128) = a3;
  *(void *)(a1 + 17272) = &unk_270EBE168;
  *(void *)(a1 + 1728BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 17288) = a3;
  *(void *)(a1 + 17296) = a1;
  return a1;
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterUtils(uint64_t result, uint64_t a2)
{
  if (!a2 || *(void *)(result + 17064))
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 244, "RegisterUtils", (char)"m_pUtilsIf == nullptr && pUtilsIf != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 244, "m_pUtilsIf == nullptr && pUtilsIf != nullptr");
  }
  *(void *)(result + 17064) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdSvIdReportMgr::GlMeSrdSvIdReportMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_270EBD590;
  *(void *)(a1 + 8) = BlueFin::GlMeObjFactory::MakeSvidReportMsmtArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  *(void *)(a1 + 16) = BlueFin::GlMeObjFactory::MakeSvidReportDataBitsArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  SvidReportMultiPeakResultsArray = BlueFin::GlMeObjFactory::MakeSvidReportMultiPeakResultsArray((uint64_t (**)(uint64_t))BlueFin::GlMeObjFactory::m_ptObjFactory);
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 24) = SvidReportMultiPeakResultsArray;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::GlMeSrdSvIdMsmtHistoryBuffer((BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *)(a1 + 1536));
  uint64_t v9 = 0;
  *(void *)(a1 + 6344) = a1 + 6144;
  do
  {
    uint64_t v10 = *(void *)(a1 + 6344) + v9;
    *(_WORD *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    v9 += 2;
  }
  while (v9 != 200);
  uint64_t v11 = *(void *)(a1 + 6344);
  *(void *)(v11 + 192) = 0;
  *(_OWORD *)(v11 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(unsigned char *)(a1 + 6368) = 0;
  *(_DWORD *)(a1 + 6372) = 0;
  *(void *)(a1 + 6376) = a2;
  *(void *)(a1 + 6384) = a3;
  *(void *)(a1 + 6392) = a4;
  *(void *)(a1 + 640BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 6412;
  *(unsigned char *)(a1 + 6408) = 8;
  *(void *)(a1 + 6448) = a1 + 6460;
  *(unsigned char *)(a1 + 6456) = 8;
  *(_DWORD *)(a1 + 6496) = 0;
  bzero((void *)(a1 + 536), 0x320uLL);
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)&long long v12 = -1;
  *((void *)&v12 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = -1;
  *(_OWORD *)(a1 + 1509) = v12;
  *(_OWORD *)(a1 + 148BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
  *(_OWORD *)(a1 + 1496) = v12;
  *(_OWORD *)(a1 + 1448) = v12;
  *(_OWORD *)(a1 + 1464) = v12;
  *(_OWORD *)(a1 + 1416) = v12;
  *(_OWORD *)(a1 + 1432) = v12;
  *(_OWORD *)(a1 + 1384) = v12;
  *(_OWORD *)(a1 + 140BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
  *(_OWORD *)(a1 + 1352) = v12;
  *(_OWORD *)(a1 + 1368) = v12;
  *(_OWORD *)(a1 + 1336) = v12;
  *(_OWORD *)(a1 + 6412) = 0u;
  *(_OWORD *)(a1 + 6428) = 0u;
  *(_OWORD *)(a1 + 646BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 6476) = 0u;
  return a1;
}

BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::GlMeSrdSvIdMsmtHistoryBuffer(BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *this)
{
  *((void *)this + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this;
  *((void *)this + 57BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = this;
  *((void *)this + 57BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 3408;
  *((void *)this + 572) = (char *)this + 3208;
  *((void *)this + 573) = 0x23F000000000020;
  *((_WORD *)this + 2296) = 100;
  BlueFin::GlBigArray::Clear((uint64_t)this + 4560);
  uint64_t v2 = 0;
  uint64_t v3 = *((void *)this + 400);
  do
  {
    uint64_t v4 = v3 + v2;
    *(unsigned char *)uint64_t v4 = 0;
    *(_DWORD *)(v4 + 4) = 0;
    *(_DWORD *)(v4 + 8) = 0;
    *(void *)(v4 + 12) = 0x38D1B71700000000;
    v2 += 32;
    *(void *)(v4 + 24) = 0;
  }
  while (v2 != 3200);
  return this;
}

uint64_t BlueFin::GlMeSrdPacketManager::GlMeSrdPacketManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  uint64_t v6 = a1 + 4240;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBDEA8;
  *(void *)(a1 + 112) = a4;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(void *)(a1 + 128) = a2;
  *(_DWORD *)(a1 + 4232) = 0;
  *(_DWORD *)(a1 + 4236) = -16777215;
  *(void *)(a1 + 6504) = a1 + 4240;
  *(void *)(a1 + 6514) = 0x131101010000;
  *(_WORD *)(a1 + 6512) = 0;
  *(_WORD *)(a1 + 6522) = 1000;
  *(void *)(a1 + 13848) = a1 + 6676;
  *(void *)(a1 + 13856) = a1 + 6676;
  *(void *)(a1 + 13864) = a1 + 6676;
  *(_DWORD *)(a1 + 13872) = 0;
  *(_OWORD *)(a1 + 1388BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 1680BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 13920;
  *(void *)(a1 + 16896) = a1 + 16832;
  do
  {
    uint64_t v7 = (_OWORD *)(*(void *)(a1 + 16800) + v5);
    unsigned char v7[4] = 0uLL;
    v7[5] = 0uLL;
    void v7[2] = 0uLL;
    v7[3] = 0uLL;
    _OWORD *v7 = 0uLL;
    v7[1] = 0uLL;
    v5 += 96;
  }
  while (v5 != 2880);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = *(_OWORD **)(a1 + 16896);
  *(_OWORD *)((char *)v10 + 44) = 0u;
  uint64_t v11 = (void *)(a1 + 13888);
  v10[1] = 0u;
  unsigned __int8 v10[2] = 0u;
  _OWORD *v10 = 0u;
  do
  {
    uint64_t v12 = *(void *)(a1 + 16800) + v8;
    *uint64_t v11 = v12;
    *(unsigned char *)uint64_t v12 = v9;
    *(void *)(v12 + 88) = 0;
    uint64_t v11 = (void *)(*v11 + 88);
    ++v9;
    v8 += 96;
  }
  while (v9 != 30);
  *(void *)(a1 + 6668) = 0;
  *(_OWORD *)(a1 + 6636) = 0u;
  *(_OWORD *)(a1 + 6652) = 0u;
  *(_OWORD *)(a1 + 6604) = 0u;
  *(_OWORD *)(a1 + 662BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 6572) = 0u;
  *(_OWORD *)(a1 + 6588) = 0u;
  *(_OWORD *)(a1 + 654BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 6556) = 0u;
  *(_OWORD *)(a1 + 6524) = 0u;
  bzero((void *)(a1 + 136), 0x1000uLL);
  *(_WORD *)uint64_t v6 = 224;
  *(void *)(a1 + 6504) = a1 + 4242;
  *(unsigned char *)(v6 + 2275) = 0;
  BlueFin::GlMeSrdPacketManager::EscapeAndAppend(a1, *(unsigned __int8 *)(v6 + 2274));
  *(unsigned char *)(v6 + 2275) = BlueFin::GlUtlCrc::ucCrcTable[*(unsigned char *)(v6 + 2275) ^ *(unsigned char *)(v6 + 2274)];
  *(_WORD *)(a1 + 6512) = 0;
  if (*(void *)(a1 + 112))
  {
    BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdPacketManager::initial);
    uint64_t v13 = *(void *)(a1 + 16896);
    *(unsigned char *)(a1 + 88) = 7;
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13 + 60;
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x100000000001ELL;
    *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    BlueFin::QHsm::init(a1, 0);
    BlueFin::GlEventPump::AddActive(*(void *)(a1 + 112), (BlueFin::GlActive *)a1);
  }
  return a1;
}

uint64_t BlueFin::GlMeSrdSatReportMgr::GlMeSrdSatReportMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, uint64_t a9)
{
  *(void *)a1 = &unk_270EBD380;
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = a6;
  *(void *)(a1 + 24) = a2;
  uint64_t v10 = (BlueFin::GlMeSrdTowAssistHolder *)(a1 + 72);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v10;
  *(void *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = a7;
  *(unsigned char *)(a1 + 65) = a8;
  BlueFin::GlMeSrdTowAssistHolder::GlMeSrdTowAssistHolder(v10);
  *(void *)(a1 + 464) = &unk_270EBD3C8;
  *(void *)(a1 + 472) = a1;
  *(void *)(a1 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBD480;
  *(void *)(a1 + 3632) = a1 + 464;
  *(_DWORD *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 492) = -1;
  bzero((void *)(a1 + 496), 0xC3CuLL);
  *(void *)(a1 + 364BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a9;
  *(void *)(a1 + 3648) = BlueFin::GlMeObjFactory::MakeSatReportArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  *(void *)(a1 + 3656) = BlueFin::GlMeObjFactory::MakeSniffStateArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  *(void *)(a1 + 3664) = BlueFin::GlMeObjFactory::MakeViterbiDecoderArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  *(void *)(a1 + 3672) = BlueFin::GlMeObjFactory::MakeEstLowTowArray((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
  *(_DWORD *)(a1 + 368BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 3684) = 1000;
  GlCustomLog(127, "Size,GlMeSrdSatReportMgr,%u\n", 3688);
  GlCustomLog(127, "    ->Size,GlMeSrdTowAssistHolder,%u\n", 392);
  GlCustomLog(127, "    ->Size,GlMeSrdSatReportGlobal,%u\n", 48);
  GlCustomLog(127, "    ->Size,GlMeSrdSatRptRpcBuffer,%u\n", 3160);
  GlCustomLog(127, "    ->Size,GlMeSrdSatRptRpcListener,%u\n", 16);
  BlueFin::GlBigArray::Clear(*(void *)(a1 + 3648));
  return a1;
}

void sub_26395FCB8(_Unwind_Exception *a1)
{
  *uint64_t v2 = v1;
  _Unwind_Resume(a1);
}

BlueFin::GlMeSrdTowAssistHolder *BlueFin::GlMeSrdTowAssistHolder::GlMeSrdTowAssistHolder(BlueFin::GlMeSrdTowAssistHolder *this)
{
  *(void *)this = &unk_270EBD5F0;
  uint64_t v2 = (_OWORD *)((char *)this + 8);
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &unk_270EBA478;
  *((void *)this + 2) = &unk_270EBA640;
  *((void *)this + 3) = (char *)this + 56;
  *((void *)this + 4) = (char *)this + 344;
  *((void *)this + 5) = (char *)this + 312;
  *((_DWORD *)this + 12) = 8;
  *((_WORD *)this + 26) = 8193;
  *((unsigned char *)this + 54) = 32;
  BlueFin::GlArray::Clear((uint64_t)this + 16);
  *((void *)this + 47) = 0x240C84007FFFFFFFLL;
  *((_DWORD *)this + 96) = 0x7FFFFFFF;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[18] = 0u;
  return this;
}

uint64_t BlueFin::GlMeSrdGeofenceMgr::GlMeSrdGeofenceMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(void *)a1 = &unk_270EBC820;
  *(void *)(a1 + 144) = a1 + 128;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 175) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(void *)(a1 + 208) = a3;
  *(void *)(a1 + 216) = a4;
  *(void *)(a1 + 224) = a5;
  *(void *)(a1 + 232) = a6;
  *(void *)(a1 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a7;
  *(void *)(a1 + 248) = a8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = &unk_270EBC8B0;
  *(void *)(a1 + 272) = a1;
  *(void *)(a1 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBC840;
  *(void *)(a1 + 288) = a1;
  *(void *)(a1 + 296) = a7;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(void *)(a1 + 312) = a1 + 324;
  *(unsigned char *)(a1 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_DWORD *)(a1 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 704) = 0x100000000;
  *(_WORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 723) = 0;
  *(void *)(a1 + 716) = 0;
  *(_DWORD *)(a1 + 727) = 16777217;
  *(_WORD *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 668) = 0u;
  *(_OWORD *)(a1 + 684) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_OWORD *)(a1 + 652) = 0u;
  *(_OWORD *)(a1 + 604) = 0u;
  *(_OWORD *)(a1 + 62BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 572) = 0u;
  *(_OWORD *)(a1 + 588) = 0u;
  *(_OWORD *)(a1 + 54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 556) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 524) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 46BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 38BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdGeofenceMgr::initial);
  uint64_t v9 = *(void *)(a1 + 144);
  *(unsigned char *)(a1 + 88) = 13;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v9 + 10;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x1000000000005;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  BlueFin::QHsm::init(a1, 0);
  BlueFin::GlEventPump::AddActive(*(void *)(a1 + 224), (BlueFin::GlActive *)a1);
  return a1;
}

double BlueFin::GlMeSrdAsicConfig::GlMeSrdAsicConfig(BlueFin::GlMeSrdAsicConfig *this, int a2)
{
  *(void *)this = &unk_270EBBBA8;
  *((_DWORD *)this + 2) = 0;
  *(void *)((char *)this + 12) = -1;
  *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *((_DWORD *)this + 7) = 0;
  *(_DWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((_WORD *)this + 16) = -1;
  *(_OWORD *)((char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_DWORD *)this + 14) = 0;
  *((_WORD *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *((_WORD *)this + 134) = 0;
  *((unsigned char *)this + 27BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_DWORD *)this + 135) = 0;
  *((unsigned char *)this + 544) = 0;
  *(void *)((char *)this + 62) = 0;
  *(_DWORD *)((char *)this + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 87) = 0;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_DWORD *)((char *)this + 535) = 0;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 138) = 0;
  *((_WORD *)this + 278) = 257;
  *((_WORD *)this + 33BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 83) = 0;
  *((_DWORD *)this + 168) = 0;
  *(_DWORD *)((char *)this + 558) = 0;
  *(_DWORD *)((char *)this + 56BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 176) = 0;
  *(void *)((char *)this + 1413) = 0;
  *(_WORD *)((char *)this + 142BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  *((unsigned char *)this + 1423) = 1;
  *((_DWORD *)this + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 1448) = 0;
  *((void *)this + 178) = 0;
  *((_DWORD *)this + 358) = 0;
  *((_DWORD *)this + 363) = 796;
  *((_WORD *)this + 73BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 364) = 0;
  *((_DWORD *)this + 366) = 0x10000;
  *(_OWORD *)((char *)this + 1468) = 0u;
  *(_DWORD *)((char *)this + 1483) = 0;
  *((_DWORD *)this + 372) = 100990976;
  *((_WORD *)this + 746) = 26;
  *((void *)this + 187) = 0;
  *(void *)((char *)this + 160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(_DWORD *)((char *)this + 1609) = 524543;
  *(void *)((char *)this + 1628) = 0;
  *((void *)this + 202) = (char *)this + 1628;
  *((unsigned char *)this + 1624) = 2;
  *(_OWORD *)((char *)this + 2036) = 0u;
  *(_OWORD *)((char *)this + 202BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((void *)this + 25BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (char *)this + 2020;
  *((unsigned char *)this + 2016) = 8;
  *((void *)this + 257) = (char *)this + 2068;
  *((unsigned char *)this + 2064) = 8;
  *(_OWORD *)((char *)this + 2084) = 0u;
  *(_OWORD *)((char *)this + 2068) = 0u;
  *((unsigned char *)this + 2104) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 132) = _Q0;
  *((unsigned char *)this + 2128) = 1;
  *((_WORD *)this + 1068) = 256;
  *((_DWORD *)this + 535) = 180944;
  *((unsigned char *)this + 2144) = 0;
  *(_OWORD *)((char *)this + 2148) = xmmword_263BAC080;
  *(void *)((char *)this + 2164) = 0x100000002;
  *((unsigned char *)this + 218BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 2172) = 0;
  *(void *)((char *)this + 219BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 273) = 0;
  *((_DWORD *)this + 55BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  uint64_t v7 = 76;
  *((_DWORD *)this + 554) = 0;
  do
  {
    *((unsigned char *)this + v7) = 0;
    v7 += 8;
  }
  while (v7 != 268);
  uint64_t v8 = 0;
  *((_DWORD *)this + 359) = 0;
  *(_DWORD *)((char *)this + 1439) = 0;
  *(_OWORD *)((char *)this + 276) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(void *)((char *)this + 324) = 0;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *((unsigned char *)this + 118BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)((char *)this + 1644) = 0u;
  *(_OWORD *)((char *)this + 166BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1676) = 0u;
  *(_OWORD *)((char *)this + 1692) = 0u;
  *(_OWORD *)((char *)this + 1708) = 0u;
  *(_OWORD *)((char *)this + 1724) = 0u;
  *(_OWORD *)((char *)this + 174BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1756) = 0u;
  *(_OWORD *)((char *)this + 1772) = 0u;
  *(_OWORD *)((char *)this + 1788) = 0u;
  *(_OWORD *)((char *)this + 1804) = 0u;
  *(_OWORD *)((char *)this + 182BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1836) = 0u;
  *(_OWORD *)((char *)this + 1852) = 0u;
  *(_OWORD *)((char *)this + 1868) = 0u;
  *(_OWORD *)((char *)this + 1884) = 0u;
  *(_OWORD *)((char *)this + 190BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1916) = 0u;
  *(_OWORD *)((char *)this + 1932) = 0u;
  *(_OWORD *)((char *)this + 1948) = 0u;
  *(_OWORD *)((char *)this + 1964) = 0u;
  *(_OWORD *)((char *)this + 198BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *((_DWORD *)this + 88) = 1;
  *((_WORD *)this + 178) = 4881;
  *((_DWORD *)this + 294) = 0;
  do
  {
    *(_OWORD *)((char *)this + v8 + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BAC090;
    *(void *)((char *)this + v8 + 376) = 50000;
    v8 += 24;
  }
  while (v8 != 168);
  *((unsigned char *)this + 1512) = 0;
  *((void *)this + 188) = 0;
  *((unsigned char *)this + 1212) = 0;
  *((_DWORD *)this + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((unsigned char *)this + 1208) = 0;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((unsigned char *)this + 160BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 304) = -1;
  *((unsigned char *)this + 1184) = 0;
  *((_WORD *)this + 61BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 1196) = 0;
  *(void *)((char *)this + 1188) = 0;
  *((void *)this + 154) = -1;
  *((void *)this + 153) = -1;
  *((_DWORD *)this + 31BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *((unsigned char *)this + 1244) = 0;
  *((_WORD *)this + 624) = 0;
  *((unsigned char *)this + 1252) = 0;
  *((void *)this + 157) = 0;
  *(void *)((char *)this + 126BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 159) = 0;
  *(void *)((char *)this + 1277) = 0;
  *((void *)this + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)((char *)this + 1295) = 0;
  *((void *)this + 165) = 0;
  *(_DWORD *)((char *)this + 1327) = 0;
  *((void *)this + 163) = 0;
  *((void *)this + 164) = 0;
  *(void *)((char *)this + 1348) = 0;
  *(void *)((char *)this + 1332) = 0;
  *(void *)((char *)this + 134BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_WORD *)this + 678) = 0;
  *((void *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *((void *)this + 17BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 1383) = 0;
  *((void *)this + 172) = 0;
  *(_WORD *)((char *)this + 139BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 6144;
  *((_DWORD *)this + 349) = 0;
  *((_WORD *)this + 70BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  int v9 = a2 & 0x700;
  *((_WORD *)this + 702) = 0;
  switch(v9)
  {
    case 256:
      int v10 = 1;
      break;
    case 512:
      int v10 = 2;
      break;
    case 768:
      int v10 = 3;
      break;
    default:
      int v10 = 0;
      break;
  }
  *((_DWORD *)this + 137) = v10;
  if ((a2 & 0x8000000) != 0) {
    *((unsigned char *)this + 553) = 1;
  }
  *(void *)&long long v11 = 0x101010101010101;
  *((void *)&v11 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0x101010101010101;
  *(_OWORD *)((char *)this + 565) = v11;
  *(_OWORD *)((char *)this + 58BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v11;
  *((_DWORD *)this + 293) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 676) = 0u;
  *(_OWORD *)((char *)this + 692) = 0u;
  *(_OWORD *)((char *)this + 708) = 0u;
  *(_OWORD *)((char *)this + 724) = 0u;
  *(_OWORD *)((char *)this + 74BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 756) = 0u;
  *(_OWORD *)((char *)this + 772) = 0u;
  *(_OWORD *)((char *)this + 788) = 0u;
  *(_OWORD *)((char *)this + 804) = 0u;
  *(_OWORD *)((char *)this + 82BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 852) = 0u;
  *(_OWORD *)((char *)this + 868) = 0u;
  *(_OWORD *)((char *)this + 884) = 0u;
  *(_OWORD *)((char *)this + 90BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 916) = 0u;
  *(_OWORD *)((char *)this + 932) = 0u;
  *(_OWORD *)((char *)this + 948) = 0u;
  *(_OWORD *)((char *)this + 964) = 0u;
  *(_OWORD *)((char *)this + 98BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 996) = 0u;
  *(_OWORD *)((char *)this + 1012) = 0u;
  *(_OWORD *)((char *)this + 1028) = 0u;
  *(_OWORD *)((char *)this + 1044) = 0u;
  *(_OWORD *)((char *)this + 106BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1076) = 0u;
  *(_OWORD *)((char *)this + 1092) = 0u;
  *(_OWORD *)((char *)this + 1108) = 0u;
  *(_OWORD *)((char *)this + 1124) = 0u;
  *(_OWORD *)((char *)this + 114BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 1156) = 0u;
  *((unsigned char *)this + 1487) = 0;
  *((unsigned char *)this + 164BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((_DWORD *)this + 533) = 0;
  *((_WORD *)this + 1102) = 0;
  *((void *)this + 276) = 0;
  *(void *)(BlueFin::GlUtils::m_pInstance + 1576) = this;
  *(_OWORD *)((char *)this + 222BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *((_DWORD *)this + 559) = 0;
  return result;
}

BlueFin::GlMeMeasAidFilter *BlueFin::GlMeMeasAidFilter::GlMeMeasAidFilter(BlueFin::GlMeMeasAidFilter *this, BlueFin::GlPeIf *a2, char a3, int a4)
{
  *(void *)this = &unk_270EBE910;
  *((unsigned char *)this + 8) = a3;
  uint64_t v8 = (BlueFin::GlMeMeasAidFilter *)((char *)this + 32);
  int v9 = (BlueFin::GlMeMeasAidFilter *)((char *)this + 10624);
  BlueFin::GlMeWinMgr::GlMeWinMgr((BlueFin::GlMeMeasAidFilter *)((char *)this + 32), (BlueFin::GlMeMeasAidFilter *)((char *)this + 10624), a4);
  BlueFin::GlMeMsmtMgr::GlMeMsmtMgr(v9, (BlueFin::GlMeMeasAidFilter *)((char *)this + 9344), a2, v8, a3, a4);
  BlueFin::GlMeMsmtHolder::GlMeMsmtHolder((uint64_t)this + 11680, (uint64_t)a2, (uint64_t)v9, (uint64_t)v8, (uint64_t)this + 29504);
  *((void *)this + 3684) = &unk_270EBE888;
  *((void *)this + 3685) = this;
  *((void *)this + 3686) = &unk_270EBE720;
  *((void *)this + 3687) = this;
  *((void *)this + 3688) = &unk_270EBEA60;
  *((void *)this + 3689) = this;
  *((_DWORD *)this + 738BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 369BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = &unk_270EBE818;
  *((void *)this + 3692) = this;
  *((void *)this + 3693) = &unk_270EBEA00;
  *((void *)this + 3694) = this;
  *((void *)this + 3695) = &unk_270EBE9A0;
  *((void *)this + 3696) = this;
  BlueFin::GlMeMeasSelfAidFilter::m_potWinMgr = (uint64_t)v8;
  BlueFin::GlMeMeasSelfAidFilter::m_potMsmtMgr = (uint64_t)v9;
  bzero(BlueFin::GlMeMeasSelfAidFilter::m_otSetMsmtSignalIds, ((4 * byte_26B433B18 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  return this;
}

void sub_2639605C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = &unk_270EBF4B0;
  *(void *)(v1 + 48) = &unk_270EBF420;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::GlMeSrdAcqMgrSm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = "STARTING";
  *(void *)(a1 + 24) = "OFF";
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_270EBB940;
  *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = a7;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a6;
  *(void *)(a1 + 88) = &unk_270EBB710;
  *(void *)(a1 + 96) = a1;
  *(_OWORD *)(a1 + 116) = 0u;
  *(void *)(a1 + 104) = a1 + 116;
  *(unsigned char *)(a1 + 112) = 19;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 177) = 0u;
  *(void *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBB7B0;
  *(void *)(a1 + 208) = a1;
  *(void *)(a1 + 216) = &unk_270EBB9B8;
  *(void *)(a1 + 224) = &unk_270EBB780;
  *(void *)(a1 + 232) = a1;
  uint64_t v11 = a1 + 240;
  BlueFin::GlMeSrdAidingMgr::GlMeSrdAidingMgr(a1 + 240, a2, a4, a5);
  BlueFin::GlMeSrdSatMgr::GlMeSrdSatMgr(a1 + 3520, a5, a7);
  *(void *)(a1 + 10112) = &unk_270EBB910;
  *(void *)(a1 + 1012BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1;
  BlueFin::GlMeSrdSharedSatSearchMgr::GlMeSrdSharedSatSearchMgr(a1 + 10128, 8, a1 + 3520, a1 + 24512, a1 + 10112, v11, a5);
  BlueFin::GlMeSrdSharedSatSearchMgr::GlMeSrdSharedSatSearchMgr(a1 + 10608, 9, a1 + 3520, a1 + 24512, a1 + 10112, v11, a5);
  BlueFin::GlMeSrdSharedSatSearchMgr::GlMeSrdSharedSatSearchMgr(a1 + 11088, 0, a1 + 3520, a1 + 24512, a1 + 10112, v11, a5);
  BlueFin::GlMeSrdSharedSatSearchMgr::GlMeSrdSharedSatSearchMgr(a1 + 11568, 1, a1 + 3520, a1 + 24512, a1 + 10112, v11, a5);
  uint64_t v12 = *(void *)(a1 + 56);
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1 + 12048, 4, a1 + 3520, a1 + 24512, v11, a5);
  *(void *)(a1 + 12048) = &unk_270EBBA48;
  *(void *)(a1 + 12352) = v12;
  uint64_t v13 = *(void *)(a1 + 56);
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1 + 12360, 5, a1 + 3520, a1 + 24512, v11, a5);
  uint64_t v26 = v14;
  *(void *)(a1 + 1236BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBBA48;
  *(void *)(a1 + 12664) = v13;
  uint64_t v15 = *(void *)(a1 + 56);
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1 + 12672, 7, a1 + 3520, a1 + 24512, v11, a5);
  uint64_t v25 = v16;
  *(void *)(a1 + 12672) = &unk_270EBBA48;
  *(void *)(a1 + 12976) = v15;
  uint64_t v17 = *(void *)(a1 + 56);
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1 + 12984, 2, a1 + 3520, a1 + 24512, v11, a5);
  *(void *)(a1 + 12984) = &unk_270EBBA48;
  *(void *)(a1 + 13288) = v17;
  uint64_t v18 = *(void *)(a1 + 56);
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1 + 13296, 3, a1 + 3520, a1 + 24512, v11, a5);
  *(void *)(a1 + 13296) = &unk_270EBBA48;
  *(void *)(a1 + 1360BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v18;
  uint64_t v19 = *(void *)(a1 + 56);
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1 + 13608, 6, a1 + 3520, a1 + 24512, v11, a5);
  *(void *)(a1 + 13608) = &unk_270EBBA48;
  *(void *)(a1 + 13912) = v19;
  *(void *)(a1 + 13932) = 0;
  *(void *)(a1 + 1392BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 13932;
  *(unsigned char *)(a1 + 13928) = 4;
  *(void *)(a1 + 1394BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(a1 + 13952) = 0u;
  *(_OWORD *)(a1 + 13968) = 0u;
  *(_OWORD *)(a1 + 13984) = 0u;
  *(_OWORD *)(a1 + 1400BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 14016) = 0u;
  *(_OWORD *)(a1 + 14032) = 0u;
  *(_OWORD *)(a1 + 14048) = 0u;
  *(_OWORD *)(a1 + 14064) = 0u;
  *(_OWORD *)(a1 + 1408BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 14096) = 0u;
  *(_OWORD *)(a1 + 14112) = 0u;
  *(_OWORD *)(a1 + 14128) = 0u;
  *(_OWORD *)(a1 + 14144) = 0u;
  *(_OWORD *)(a1 + 1416BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 14176) = 0u;
  *(_OWORD *)(a1 + 14192) = 0u;
  *(_OWORD *)(a1 + 14208) = 0u;
  *(_OWORD *)(a1 + 14224) = 0u;
  *(_OWORD *)(a1 + 1424BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 14256) = 0u;
  *(_OWORD *)(a1 + 14272) = 0u;
  *(_OWORD *)(a1 + 14288) = 0u;
  *(_OWORD *)(a1 + 14304) = 0u;
  *(_OWORD *)(a1 + 1432BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 14336) = 0u;
  BlueFin::GlMeSrdSatTrackMgr::GlMeSrdSatTrackMgr(a1 + 14352, a1 + 3520, a2, v11, a5);
  *(_DWORD *)(a1 + 22768) = 0;
  *(_OWORD *)(a1 + 22804) = 0u;
  *(_OWORD *)(a1 + 22788) = 0u;
  *(void *)(a1 + 22776) = a1 + 22788;
  *(_OWORD *)(a1 + 22852) = 0u;
  *(_OWORD *)(a1 + 22836) = 0u;
  *(unsigned char *)(a1 + 22784) = 8;
  *(void *)(a1 + 22824) = a1 + 22836;
  *(unsigned char *)(a1 + 22832) = 8;
  *(_OWORD *)(a1 + 2290BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 22884) = 0u;
  *(void *)(a1 + 22872) = a1 + 22884;
  *(unsigned char *)(a1 + 2288BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 22948) = 0u;
  *(_OWORD *)(a1 + 22932) = 0u;
  *(void *)(a1 + 2292BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 22932;
  *(unsigned char *)(a1 + 22928) = 8;
  *(void *)(a1 + 22968) = a1 + 22980;
  *(unsigned char *)(a1 + 22976) = 8;
  *(_OWORD *)(a1 + 2298BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 22996) = 0u;
  *(_OWORD *)(a1 + 23044) = 0u;
  *(_OWORD *)(a1 + 23028) = 0u;
  *(void *)(a1 + 23016) = a1 + 23028;
  *(unsigned char *)(a1 + 23024) = 8;
  *(_OWORD *)(a1 + 23092) = 0u;
  *(_OWORD *)(a1 + 23076) = 0u;
  *(void *)(a1 + 23064) = a1 + 23076;
  *(unsigned char *)(a1 + 23072) = 8;
  *(_OWORD *)(a1 + 2314BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 23124) = 0u;
  *(void *)(a1 + 23112) = a1 + 23124;
  *(unsigned char *)(a1 + 2312BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 23188) = 0u;
  *(_OWORD *)(a1 + 23172) = 0u;
  *(void *)(a1 + 2316BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 23172;
  *(unsigned char *)(a1 + 23168) = 8;
  BlueFin::GlMeSignalAidInfo::GlMeSignalAidInfo(a1 + 24512, 0xA0u, a1 + 23232);
  uint64_t v20 = 0;
  *(void *)(a1 + 24556) = 0;
  *(void *)(a1 + 24548) = 0;
  *(void *)(a1 + 24536) = a1 + 24548;
  *(unsigned char *)(a1 + 24544) = 4;
  *(_DWORD *)(a1 + 24572) = 0;
  *(_DWORD *)(a1 + 24608) = 256;
  *(_WORD *)(a1 + 24612) = 257;
  *(_DWORD *)(a1 + 24624) = 0;
  *(unsigned char *)(a1 + 24628) = 0;
  *(_DWORD *)(a1 + 24614) = 0;
  *(unsigned char *)(a1 + 24618) = 0;
  *(void *)(a1 + 24652) = 0;
  *(void *)(a1 + 24644) = 0;
  *(void *)(a1 + 24632) = a1 + 24644;
  *(unsigned char *)(a1 + 2464BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4;
  *(_WORD *)(a1 + 24668) = 0;
  uint64_t v21 = a1 + 24680;
  *(_DWORD *)(a1 + 24664) = 0;
  do
  {
    *(_OWORD *)(v21 + v20 + 4) = 0uLL;
    uint64_t v22 = v21 + v20 + 4;
    *(void *)(a1 + v20 + 24672) = v22;
    *(unsigned char *)(v21 + v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
    *(_OWORD *)(v22 + 16) = 0uLL;
    v20 += 48;
  }
  while (v20 != 192);
  *(_DWORD *)(a1 + 24568) = 0;
  *(_DWORD *)(a1 + 24576) = 0;
  *(void *)(a1 + 24584) = 0;
  *(void *)(a1 + 2460BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 24592) = 0;
  *(_DWORD *)(a1 + 24864) = 0;
  *(void *)(a1 + 22752) = a1 + 10128;
  *(void *)(a1 + 2276BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 10608;
  *(void *)(a1 + 22688) = a1 + 11088;
  *(void *)(a1 + 22696) = a1 + 11568;
  *(void *)(a1 + 22728) = v26;
  *(void *)(a1 + 22744) = v25;
  *(void *)(a1 + 2272BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 12048;
  *(void *)(a1 + 22704) = a1 + 12984;
  *(void *)(a1 + 22712) = a1 + 13296;
  uint64_t v23 = 2836;
  *(void *)(a1 + 22736) = a1 + 13608;
  do
  {
    if (!*(void *)(a1 + 8 * v23))
    {
      DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 127, "GlMeSrdAcqMgrSm", (char)"m_aSearchMgr[i] != nullptr");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", 127, "m_aSearchMgr[i] != nullptr");
    }
    ++v23;
  }
  while (v23 != 2846);
  BlueFin::QHsm::ctor(a1, (uint64_t)BlueFin::GlMeSrdAcqMgrSm::initial);
  BlueFin::QHsm::init(a1, 0);
  return a1;
}

void sub_263960D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, BlueFin::GlMeSrdSatTrackMgr *a9, BlueFin::GlMeSrdSatPostSearchMgr *a10, uint64_t a11, uint64_t a12, uint64_t a13, BlueFin::GlMeSrdAcqMgr *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, BlueFin::GlMeSrdSearchMgrBase *a19, BlueFin::GlMeSrdSearchMgrBase *a20,BlueFin::GlMeSrdSearchMgrBase *a21,BlueFin::GlMeSrdSearchMgrBase *a22)
{
  BlueFin::GlMeSrdSatTrackMgr::~GlMeSrdSatTrackMgr(a9);
  BlueFin::GlMeSrdSatPostSearchMgr::~GlMeSrdSatPostSearchMgr(a10);
  *(void *)int v24 = a11;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v24);
  *(void *)uint64_t v22 = a12;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v22);
  *(void *)uint64_t v26 = a13;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v26);
  unsigned int v29 = *(BlueFin::GlMeSrdSearchMgrBase **)(v27 - 96);
  *(void *)unsigned int v29 = a15;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v29);
  unsigned int v30 = *(BlueFin::GlMeSrdSearchMgrBase **)(v27 - 88);
  *(void *)unsigned int v30 = a16;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v30);
  *(void *)a22 = a17;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(a22);
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v25);
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(v23);
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(a20);
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(a21);
  BlueFin::GlMeSrdAcqMgr::~GlMeSrdAcqMgr(a14);
  _Unwind_Resume(a1);
}

double BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_270EBBAC0;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)&long long v6 = 0xFA000000FALL;
  *((void *)&v6 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0xFA000000FALL;
  *(_OWORD *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6;
  *(_OWORD *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 72) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 92) = 0u;
  *(void *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 92;
  *(unsigned char *)(a1 + 88) = 8;
  *(_OWORD *)(a1 + 108) = 0u;
  *(void *)(a1 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 128) = a1 + 140;
  *(unsigned char *)(a1 + 136) = 4;
  *(void *)(a1 + 172) = 0;
  *(void *)(a1 + 148) = 0;
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 172;
  *(unsigned char *)(a1 + 168) = 4;
  *(void *)(a1 + 204) = 0;
  *(void *)(a1 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 192) = a1 + 204;
  *(unsigned char *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4;
  *(void *)(a1 + 236) = 0;
  *(void *)(a1 + 212) = 0;
  *(void *)(a1 + 224) = a1 + 236;
  *(unsigned char *)(a1 + 232) = 4;
  *(void *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(void *)(a1 + 256) = a1 + 268;
  *(unsigned char *)(a1 + 264) = 8;
  return result;
}

double BlueFin::GlMeSrdSharedSatSearchMgr::GlMeSrdSharedSatSearchMgr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BlueFin::GlMeSrdSearchMgrBase::GlMeSrdSearchMgrBase(a1, a2, a3, a4, a6, a7);
  *(void *)uint64_t v8 = &unk_270EBBB30;
  *(void *)(v8 + 304) = a5;
  *(unsigned char *)(v8 + 312) = 100;
  double result = 0.0;
  *(_OWORD *)(v8 + 348) = 0u;
  *(_OWORD *)(v8 + 332) = 0u;
  *(void *)(v8 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8 + 332;
  *(unsigned char *)(v8 + 328) = 8;
  *(_OWORD *)(v8 + 396) = 0u;
  *(_OWORD *)(v8 + 38BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(v8 + 368) = v8 + 380;
  *(unsigned char *)(v8 + 376) = 8;
  *(_OWORD *)(v8 + 452) = 0u;
  *(_OWORD *)(v8 + 436) = 0u;
  *(unsigned char *)(v8 + 416) = 0;
  *(void *)(v8 + 424) = v8 + 436;
  *(unsigned char *)(v8 + 432) = 8;
  *(_DWORD *)(v8 + 472) = 1;
  return result;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::GlMeSrdSatTrackMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  uint64_t v6 = a1 + 8300;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 3988) = 0;
  *(void *)(a1 + 398BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  uint64_t v7 = (unsigned __int8 *)(a1 + 4120);
  *(void *)(a1 + 3968) = a1 + 3980;
  *(unsigned char *)(a1 + 3976) = 4;
  *(_OWORD *)(a1 + 4028) = 0u;
  *(_OWORD *)(a1 + 4044) = 0u;
  *(_OWORD *)(a1 + 406BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4012) = 0u;
  *(void *)(a1 + 400BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4012;
  *(void *)(a1 + 410BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 4092) = 0;
  *(unsigned char *)(a1 + 4008) = 16;
  *(void *)(a1 + 408BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4092;
  *(unsigned char *)(a1 + 4088) = 4;
  *(_OWORD *)(a1 + 414BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4124) = 0u;
  *(void *)(a1 + 4112) = a1 + 4124;
  *(unsigned char *)(a1 + 412BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 4188) = 0u;
  *(_OWORD *)(a1 + 4204) = 0u;
  *(_OWORD *)(a1 + 422BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4172) = 0u;
  *(void *)(a1 + 416BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4172;
  *(unsigned char *)(a1 + 4168) = 16;
  *(_OWORD *)(a1 + 4268) = 0u;
  *(_OWORD *)(a1 + 4284) = 0u;
  *(_OWORD *)(a1 + 430BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4252) = 0u;
  *(void *)(a1 + 424BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4252;
  *(unsigned char *)(a1 + 4248) = 16;
  *(void *)(a1 + 432BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4332;
  *(unsigned char *)(a1 + 4328) = 16;
  *(_OWORD *)(a1 + 438BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4364) = 0u;
  *(_OWORD *)(a1 + 4348) = 0u;
  *(_OWORD *)(a1 + 4428) = 0u;
  *(_OWORD *)(a1 + 4444) = 0u;
  *(_OWORD *)(a1 + 446BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4412) = 0u;
  *(_OWORD *)(a1 + 4332) = 0u;
  *(void *)(a1 + 440BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4412;
  *(unsigned char *)(a1 + 4408) = 16;
  *(_OWORD *)(a1 + 4508) = 0u;
  *(_OWORD *)(a1 + 4524) = 0u;
  *(_OWORD *)(a1 + 454BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4492) = 0u;
  *(void *)(a1 + 448BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4492;
  *(unsigned char *)(a1 + 4488) = 16;
  *(void *)(a1 + 456BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4572;
  *(unsigned char *)(a1 + 4568) = 16;
  *(_OWORD *)(a1 + 462BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4604) = 0u;
  *(_OWORD *)(a1 + 4588) = 0u;
  *(_OWORD *)(a1 + 4572) = 0u;
  *(void *)(a1 + 464BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4652;
  *(unsigned char *)(a1 + 4648) = 16;
  *(_OWORD *)(a1 + 470BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4684) = 0u;
  *(_OWORD *)(a1 + 4668) = 0u;
  *(_OWORD *)(a1 + 4652) = 0u;
  *(void *)(a1 + 472BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4732;
  *(unsigned char *)(a1 + 4728) = 16;
  *(_OWORD *)(a1 + 478BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4764) = 0u;
  *(_OWORD *)(a1 + 4748) = 0u;
  *(_OWORD *)(a1 + 4732) = 0u;
  *(void *)(a1 + 480BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4812;
  *(unsigned char *)(a1 + 4808) = 16;
  *(_OWORD *)(a1 + 486BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4844) = 0u;
  *(_OWORD *)(a1 + 4828) = 0u;
  *(_OWORD *)(a1 + 4812) = 0u;
  *(void *)(a1 + 488BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4892;
  *(unsigned char *)(a1 + 4888) = 16;
  *(_OWORD *)(a1 + 494BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 4924) = 0u;
  *(_OWORD *)(a1 + 4908) = 0u;
  *(_OWORD *)(a1 + 4892) = 0u;
  *(void *)(a1 + 496BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 4972;
  *(unsigned char *)(a1 + 4968) = 16;
  *(_OWORD *)(a1 + 502BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 5004) = 0u;
  *(_OWORD *)(a1 + 4988) = 0u;
  *(void *)(a1 + 506BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 5052) = 0;
  *(_OWORD *)(a1 + 4972) = 0u;
  *(void *)(a1 + 504BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 5052;
  *(unsigned char *)(a1 + 5048) = 4;
  *(void *)(a1 + 5092) = 0;
  *(void *)(a1 + 5084) = 0;
  *(void *)(a1 + 5072) = a1 + 5084;
  *(unsigned char *)(a1 + 508BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4;
  *(void *)(a1 + 5104) = a1 + 5116;
  *(unsigned char *)(a1 + 5112) = 16;
  *(_OWORD *)(a1 + 5164) = 0u;
  *(_OWORD *)(a1 + 5148) = 0u;
  *(_OWORD *)(a1 + 5132) = 0u;
  *(_OWORD *)(a1 + 5116) = 0u;
  *(void *)(a1 + 5184) = a1 + 5196;
  *(unsigned char *)(a1 + 5192) = 16;
  *(_OWORD *)(a1 + 5244) = 0u;
  *(_OWORD *)(a1 + 5228) = 0u;
  *(_OWORD *)(a1 + 5212) = 0u;
  *(_OWORD *)(a1 + 5196) = 0u;
  *(void *)(a1 + 5264) = a1 + 5276;
  *(unsigned char *)(a1 + 5272) = 16;
  *(_OWORD *)(a1 + 5324) = 0u;
  *(_OWORD *)(a1 + 5308) = 0u;
  *(_OWORD *)(a1 + 5292) = 0u;
  *(_OWORD *)(a1 + 5276) = 0u;
  *(void *)(a1 + 5344) = a1 + 5356;
  *(unsigned char *)(a1 + 5352) = 16;
  *(_OWORD *)(a1 + 5404) = 0u;
  *(_OWORD *)(a1 + 5388) = 0u;
  *(_OWORD *)(a1 + 5372) = 0u;
  *(_OWORD *)(a1 + 5356) = 0u;
  *(void *)(a1 + 5424) = a1 + 5436;
  *(unsigned char *)(a1 + 5432) = 19;
  *(_OWORD *)(a1 + 5496) = 0u;
  *(_OWORD *)(a1 + 5484) = 0u;
  *(_OWORD *)(a1 + 5468) = 0u;
  *(_OWORD *)(a1 + 5452) = 0u;
  *(_OWORD *)(a1 + 5436) = 0u;
  *(void *)(a1 + 5512) = a1 + 5524;
  *(unsigned char *)(a1 + 552BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 19;
  *(_OWORD *)(a1 + 5584) = 0u;
  *(_OWORD *)(a1 + 5572) = 0u;
  *(_OWORD *)(a1 + 5556) = 0u;
  *(_OWORD *)(a1 + 554BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 5524) = 0u;
  *(void *)(a1 + 560BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 5612;
  *(unsigned char *)(a1 + 5608) = 8;
  *(_OWORD *)(a1 + 5628) = 0u;
  *(_OWORD *)(a1 + 5612) = 0u;
  *(_DWORD *)(a1 + 7248) = 0;
  *(unsigned char *)(a1 + 7252) = 0;
  *(void *)(a1 + 7256) = &unk_270EBB880;
  *(void *)(a1 + 7456) = &unk_270EBA640;
  *(void *)(a1 + 7464) = a1 + 7496;
  *(void *)(a1 + 7472) = a1 + 7264;
  *(void *)(a1 + 748BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 7872;
  *(_DWORD *)(a1 + 7488) = 2;
  *(_WORD *)(a1 + 7492) = -17407;
  *(unsigned char *)(a1 + 7494) = -68;
  BlueFin::GlArray::Clear(a1 + 7456);
  *(void *)(a1 + 8064) = &unk_270EBB880;
  *(void *)(a1 + 8264) = &unk_270EBA640;
  *(void *)(a1 + 8272) = a1 + 8304;
  *(void *)(a1 + 828BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 8072;
  *(void *)(a1 + 8288) = a1 + 8320;
  *(_DWORD *)(a1 + 8296) = 1;
  *(_WORD *)uint64_t v6 = -17407;
  *(unsigned char *)(v6 + 2) = 16;
  BlueFin::GlArray::Clear(a1 + 8264);
  bzero(*(void **)(a1 + 4112), ((4 * *v7 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v8 = 0;
  for (uint64_t i = 0; i != 123; ++i)
  {
    *(_DWORD *)(*(void *)(a1 + 3968) + 4 * ((unsigned __int16)i >> 5)) |= 1 << i;
    uint64_t v10 = a1 + v8;
    *(_OWORD *)(v10 + 32) = 0uLL;
    *(_OWORD *)(v10 + 48) = 0uLL;
    *(_DWORD *)(v10 + 36) = -1027080192;
    *(_DWORD *)(v10 + 44) = 0;
    *(_WORD *)(v10 + 56) = 0;
    v8 += 32;
  }
  memset_pattern16((void *)(a1 + 5648), "(", 0x640uLL);
  return a1;
}

uint64_t BlueFin::GlMeSrdAidingMgr::GlMeSrdAidingMgr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 812) = 0u;
  *(_OWORD *)(a1 + 796) = 0u;
  *(void *)(a1 + 784) = a1 + 796;
  *(unsigned char *)(a1 + 792) = 8;
  *(_OWORD *)(a1 + 86BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 844) = 0u;
  *(void *)(a1 + 832) = a1 + 844;
  *(unsigned char *)(a1 + 84BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 908) = 0u;
  *(_OWORD *)(a1 + 892) = 0u;
  *(void *)(a1 + 88BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 892;
  *(unsigned char *)(a1 + 888) = 8;
  *(void *)(a1 + 928) = a1 + 940;
  *(unsigned char *)(a1 + 936) = 8;
  *(_OWORD *)(a1 + 956) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 94BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 976) = a1 + 988;
  *(unsigned char *)(a1 + 984) = 8;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1036) = 0u;
  *(void *)(a1 + 1024) = a1 + 1036;
  *(unsigned char *)(a1 + 1032) = 8;
  *(_OWORD *)(a1 + 110BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 1084) = 0u;
  *(void *)(a1 + 1072) = a1 + 1084;
  *(unsigned char *)(a1 + 108BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_OWORD *)(a1 + 1132) = 0u;
  *(void *)(a1 + 112BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 1132;
  *(unsigned char *)(a1 + 1128) = 8;
  *(unsigned char *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1212) = 0u;
  *(_OWORD *)(a1 + 1196) = 0u;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1184) = a1 + 1196;
  *(unsigned char *)(a1 + 1192) = 8;
  *(_OWORD *)(a1 + 126BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 1244) = 0u;
  *(void *)(a1 + 1232) = a1 + 1244;
  *(unsigned char *)(a1 + 124BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 1308) = 0u;
  *(_OWORD *)(a1 + 1292) = 0u;
  *(void *)(a1 + 128BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 1292;
  *(unsigned char *)(a1 + 1288) = 8;
  *(_OWORD *)(a1 + 1356) = 0u;
  *(_OWORD *)(a1 + 134BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(void *)(a1 + 1328) = a1 + 1340;
  *(unsigned char *)(a1 + 1336) = 8;
  *(void *)(a1 + 1376) = a1 + 1388;
  *(unsigned char *)(a1 + 1384) = 8;
  *(_OWORD *)(a1 + 1404) = 0u;
  *(_OWORD *)(a1 + 1388) = 0u;
  *(_DWORD *)(a1 + 1424) = 0;
  *(void *)(a1 + 1432) = a1 + 1444;
  *(unsigned char *)(a1 + 144BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 8;
  *(_OWORD *)(a1 + 146BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 1444) = 0u;
  *(void *)(a1 + 2632) = a1 + 2672;
  *(void *)(a1 + 264BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a1 + 1480;
  *(void *)(a1 + 2648) = a1 + 2872;
  *(void *)(a1 + 2656) = 0x23F000000000001;
  *(_WORD *)(a1 + 2664) = 200;
  BlueFin::GlBigArray::Clear(a1 + 2632);
  bzero((void *)(a1 + 28), 0x2F4uLL);
  uint64_t v5 = 1u;
  do
  {
    if (BlueFin::GlSvId::s_aucSvId2gnss[v5] != 7) {
      *(_DWORD *)(*(void *)(a1 + 1232) + 4 * (v5 >> 5)) |= 1 << v5;
    }
    ++v5;
  }
  while (v5 != 189);
  return a1;
}

uint64_t (*BlueFin::GlMeObjFactory::MakeSvidReportMultiPeakResultsArray(uint64_t (**this)(uint64_t)))(uint64_t)
{
  Memory = BlueFin::GlMemAlloc::glAllocateMemory(11, 40, this[3]);
  if (Memory)
  {
    uint64_t v3 = (uint64_t)Memory;
    this[18] = (uint64_t (*)(uint64_t))BlueFin::GlMemAlloc::glAllocateMemory(12, 1408, this[3]);
    this[20] = (uint64_t (*)(uint64_t))BlueFin::GlMemAlloc::glAllocateMemory(13, 16, this[3]);
    uint64_t v4 = (uint64_t (*)(uint64_t))BlueFin::GlMemAlloc::glAllocateMemory(14, 189, this[3]);
    this[19] = v4;
    uint64_t v5 = this[18];
    uint64_t v6 = this[20];
    *(void *)uint64_t v3 = &unk_270EBA640;
    *(void *)(v3 + 8) = v5;
    *(void *)(v3 + 16) = v4;
    *(void *)(v3 + 24) = v6;
    *(_DWORD *)(v3 + 32) = 88;
    *(_WORD *)(v3 + 36) = -17152;
    *(unsigned char *)(v3 + 38) = 16;
    BlueFin::GlArray::Clear(v3);
    uint64_t v7 = 0;
    this[17] = (uint64_t (*)(uint64_t))v3;
    do
    {
      uint64_t v8 = (uint64_t)this[18] + 88 * v7;
      *(_WORD *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 2) = 0;
      uint64_t v9 = v8 + 4;
      uint64_t v10 = (unsigned char *)(v8 + 84);
      do
      {
        *(void *)uint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 1176492032;
        v9 += 20;
      }
      while ((unsigned char *)v9 != v10);
      unsigned char *v10 = 0;
      ++v7;
    }
    while (v7 != 16);
  }
  return this[17];
}

uint64_t BlueFin::GlMeObjFactory::MakeSvidReportDataBitsArray(BlueFin::GlMeObjFactory *this)
{
  Memory = (BlueFin::GlArray *)BlueFin::GlMemAlloc::glAllocateMemory(7, 40, *((uint64_t (**)(uint64_t))this + 3));
  if (Memory)
  {
    uint64_t v3 = Memory;
    uint64_t v4 = *((unsigned int *)this + 11);
    *((void *)this + 14) = BlueFin::GlMemAlloc::glAllocateMemory(8, (616 * v4), *((uint64_t (**)(uint64_t))this + 3));
    *((void *)this + 16) = BlueFin::GlMemAlloc::glAllocateMemory(9, v4, *((uint64_t (**)(uint64_t))this + 3));
    uint64_t v5 = (unsigned __int8 *)BlueFin::GlMemAlloc::glAllocateMemory(10, 189, *((uint64_t (**)(uint64_t))this + 3));
    *((void *)this + 15) = v5;
    BlueFin::GlArray::GlArray(v3, *((void **)this + 14), 616, 0, v5, 189, *((unsigned __int8 **)this + 16), v4);
    *((void *)this + 13) = v3;
    if ((int)v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 616 * v4;
      do
      {
        BlueFin::GlMeSrdSvIdReportDataBitsSlot::GlMeSrdSvIdReportDataBitsSlot((BlueFin::GlMeSrdSvIdReportDataBitsSlot *)(*((void *)this + 14) + v6));
        v6 += 616;
      }
      while (v7 != v6);
    }
  }
  return *((void *)this + 13);
}

double BlueFin::GlMeSrdSvIdReportDataBitsSlot::GlMeSrdSvIdReportDataBitsSlot(BlueFin::GlMeSrdSvIdReportDataBitsSlot *this)
{
  *(void *)this = &unk_270EBECD8;
  *((_DWORD *)this + 3) = 0;
  *((_WORD *)this + 8) = 0;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *(_OWORD *)((char *)this + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 204) = 0u;
  *(_OWORD *)((char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *((_WORD *)this + 4) = 0;
  *((void *)this + 38) = &unk_270EBECD8;
  *((_DWORD *)this + 79) = 0;
  *((_WORD *)this + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)((char *)this + 324) = 0;
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 38BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 444) = 0u;
  *(_OWORD *)((char *)this + 46BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *(_OWORD *)((char *)this + 492) = 0u;
  *(_OWORD *)((char *)this + 508) = 0u;
  *(_OWORD *)((char *)this + 524) = 0u;
  *(_OWORD *)((char *)this + 54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 556) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *((unsigned char *)this + 344) = 0;
  *(_OWORD *)((char *)this + 572) = 0u;
  *(_OWORD *)((char *)this + 588) = 0u;
  *((_WORD *)this + 156) = 0;
  *((unsigned char *)this + 608) = 0;
  return result;
}