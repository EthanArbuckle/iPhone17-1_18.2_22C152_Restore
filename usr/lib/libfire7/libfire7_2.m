void sub_2639F04AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  a18(a30);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdAidingMgr::PackTcxoAiding(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 1176)) {
    return 0;
  }
  *(unsigned char *)(a1 + 1176) = 0;
  BlueFin::GlMeSrdAidingMgr::FormatGpsTcxoAidingForEsw((unsigned int *)a1, a3);
  *a2 = 0;
  BlueFin::GlMeSrdAidingMgr::FormatGlnsTcxoAidingForEsw((unsigned int *)a1, a3 + 36);
  a2[1] = 1;
  BlueFin::GlMeSrdAidingMgr::FormatBdsPosTcxoAidingForEsw((unsigned int *)a1, a3 + 72);
  a2[2] = 2;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 24);
  return 3;
}

double BlueFin::GlPeNavGnssState::NormalizePos(BlueFin::GlPeNavGnssState *this)
{
  double v1 = *((double *)this + 1);
  unint64_t v2 = 0x4056800000000000;
  if (v1 > 90.0 || (unint64_t v2 = 0xC056800000000000, v1 < -90.0)) {
    *((void *)this + 1) = v2;
  }
  double result = *((double *)this + 2);
  if (result > 180.0 || result < -180.0)
  {
    double v4 = result / 360.0;
    if (result / 360.0 <= 0.0)
    {
      double v5 = 0.0;
      if (result / 360.0 < 0.0) {
        double v5 = ceil(v4 + -0.5);
      }
    }
    else
    {
      double v5 = floor(v4 + 0.5);
    }
    double result = result + v5 * -360.0;
    *((double *)this + 2) = result;
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeRepeatedIsol::Submit(BlueFin::GlPeRepeatedIsol *this, const BlueFin::GlSignalIdSet *a2, unsigned __int8 a3)
{
  unsigned __int8 v19 = a3;
  memcpy(v23, a2, 4 * a3);
  unsigned __int16 v21 = 0;
  unsigned __int8 v20 = 0;
  int v22 = v23[0];
  double result = BlueFin::GlSetIterator::operator++(&v19);
  if (v20 != v19)
  {
    double v5 = (char *)this + 8;
    do
    {
      unsigned __int16 v6 = v21;
      if (v21 > 0x23Eu)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v7 = 0;
      int v8 = -1;
      uint64_t v9 = -2;
      unsigned int v10 = -1;
      do
      {
        int v11 = *((unsigned __int16 *)this + v7 + 1);
        if (v11 == 576
          || ((unsigned int v12 = *((_DWORD *)this + 6), v13 = *((_DWORD *)this + v7 + 3), v11 != v21)
            ? (BOOL v14 = v12 - v13 >= 0x4E21)
            : (BOOL v14 = 1),
              v14))
        {
          if (v11 == v21) {
            char v18 = v5[v7] + 1;
          }
          else {
            char v18 = 1;
          }
          v17 = (char *)this - v9;
          v5[v7] = v18;
          goto LABEL_25;
        }
        if (v10 == -1 || v13 < v10)
        {
          unsigned int v10 = *((_DWORD *)this + v7 + 3);
          int v8 = v7;
        }
        ++v7;
        v9 -= 2;
      }
      while (v7 != 3);
      if (v10 >= v12) {
        goto LABEL_26;
      }
      uint64_t v7 = v8;
      *((unsigned char *)this + v8 + 8) = 1;
      v17 = (char *)this + 2 * v8 + 2;
LABEL_25:
      *(_WORD *)v17 = v6;
      *((_DWORD *)this + v7 + 3) = *((_DWORD *)this + 6);
LABEL_26:
      double result = BlueFin::GlSetIterator::operator++(&v19);
    }
    while (v20 != v19);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAidingMgr::FormatBdsPosTcxoAidingForEsw(unsigned int *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v9[0] = &unk_270EBF258;
  v9[1] = 0;
  uint64_t v10 = 0x36A7C5AC00000000;
  uint64_t v11 = 0;
  int v12 = 2139095039;
  uint64_t v13 = 0;
  int v14 = 2139095039;
  uint64_t v15 = 0;
  uint64_t v16 = 0x36A7C5AC7F7FFFFFLL;
  (*(void (**)(void, void *, void))(**(void **)a1 + 96))(*(void *)a1, v9, a1[6]);
  *(_WORD *)(a2 + 12) = a1[6];
  *(unsigned char *)(a2 + 14) = 1;
  v6[0] = 76;
  int v7 = 0;
  __int16 v8 = 201;
  uint64_t result = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)v6, -*(float *)&v10, v4);
  *(_WORD *)a2 = result;
  return result;
}

uint64_t BlueFin::GlMeSrdAidingMgr::FormatGlnsTcxoAidingForEsw(unsigned int *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v9[0] = &unk_270EBF258;
  v9[1] = 0;
  uint64_t v10 = 0x36A7C5AC00000000;
  uint64_t v11 = 0;
  int v12 = 2139095039;
  uint64_t v13 = 0;
  int v14 = 2139095039;
  uint64_t v15 = 0;
  uint64_t v16 = 0x36A7C5AC7F7FFFFFLL;
  (*(void (**)(void, void *, void))(**(void **)a1 + 96))(*(void *)a1, v9, a1[6]);
  *(_WORD *)(a2 + 12) = a1[6];
  *(unsigned char *)(a2 + 14) = 1;
  v6[0] = 59;
  int v7 = 0;
  __int16 v8 = 154;
  uint64_t result = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)v6, -*(float *)&v10, v4);
  *(_WORD *)a2 = result;
  return result;
}

uint64_t BlueFin::GlMeSrdAidingMgr::FormatGpsTcxoAidingForEsw(unsigned int *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v9[0] = &unk_270EBF258;
  v9[1] = 0;
  uint64_t v10 = 0x36A7C5AC00000000;
  uint64_t v11 = 0;
  int v12 = 2139095039;
  uint64_t v13 = 0;
  int v14 = 2139095039;
  uint64_t v15 = 0;
  uint64_t v16 = 0x36A7C5AC7F7FFFFFLL;
  (*(void (**)(void, void *, void))(**(void **)a1 + 96))(*(void *)a1, v9, a1[6]);
  *(_WORD *)(a2 + 12) = a1[6];
  *(unsigned char *)(a2 + 14) = 1;
  v6[0] = 1;
  int v7 = 0;
  __int16 v8 = 0;
  uint64_t result = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)v6, -*(float *)&v10, v4);
  *(_WORD *)a2 = result;
  return result;
}

unsigned __int8 *BlueFin::GlSignalIdSet::Print(BlueFin::GlSignalIdSet *this, unsigned __int8 a2)
{
  unsigned __int8 v4 = *((unsigned char *)this + 8);
  memcpy(v8, *(const void **)this, 4 * v4);
  unsigned __int16 v6 = 0;
  unsigned __int8 v5 = 0;
  int v7 = v8[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v4); v5 != v4; uint64_t result = BlueFin::GlSetIterator::operator++(&v4))
  {
    if (v6 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    GlCustomLog(a2, "%02d(%s) ", *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v6), BlueFin::GlSignalId::s_ausSignalIndex2str[*((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v6 + 1)]);
  }
  return result;
}

uint64_t BlueFin::GlPeFirstFix::stFirstFixReturn::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  BlueFin::GlSetBase::operator=(a1 + 24, a2 + 24);
  *(_OWORD *)(a1 + 36) = *(_OWORD *)(a2 + 36);
  long long v4 = *(_OWORD *)(a2 + 52);
  long long v5 = *(_OWORD *)(a2 + 68);
  long long v6 = *(_OWORD *)(a2 + 84);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 84) = v6;
  *(_OWORD *)(a1 + 68) = v5;
  *(_OWORD *)(a1 + 52) = v4;
  uint64_t v7 = BlueFin::GlSetBase::operator=(a1 + 200, a2 + 200);
  *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
  long long v8 = *(_OWORD *)(a2 + 228);
  long long v9 = *(_OWORD *)(a2 + 244);
  long long v10 = *(_OWORD *)(a2 + 260);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(v7 + 60) = v10;
  *(_OWORD *)(a1 + 244) = v9;
  *(_OWORD *)(a1 + 228) = v8;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(unsigned char *)(a1 + 488) = *(unsigned char *)(a2 + 488);
  *(_DWORD *)(a1 + 492) = *(_DWORD *)(a2 + 492);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(unsigned char *)(a1 + 500) = *(unsigned char *)(a2 + 500);
  *(unsigned char *)(a1 + 501) = *(unsigned char *)(a2 + 501);
  *(_WORD *)(a1 + 502) = *(_WORD *)(a2 + 502);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  *(unsigned char *)(a1 + 508) = *(unsigned char *)(a2 + 508);
  return a1;
}

BOOL BlueFin::GlPeFirstFix::IsolationFix(BlueFin::GlPeFirstFix *this, const BlueFin::GlSignalIdSet *a2, BlueFin::GlPeSubsets *a3, unint64_t *a4)
{
  uint64_t v7 = this;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((void *)this + 3) = (char *)this + 36;
  long long v8 = (const void **)((char *)this + 24);
  *((unsigned char *)this + 32) = 19;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  int32x4_t v9 = vdupq_n_s32(0x43C80000u);
  *((_OWORD *)this + 7) = 0u;
  *((int32x4_t *)this + 8) = v9;
  *(int32x4_t *)__dst = v9;
  *((int32x4_t *)this + 9) = v9;
  unsigned int v10 = BlueFin::GlSetBase::Cnt(a3);
  v90 = a3;
  unint64_t v11 = BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)a4, a3);
  BOOL v12 = v10 > 8;
  if (*((unsigned char *)a2 + 244))
  {
    LOBYTE(v13) = 1;
  }
  else
  {
    BOOL v12 = 0;
    BOOL v13 = v10 < 8;
  }
  if (v12 || (float v14 = 0.0, !v13))
  {
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    v97 = v99;
    char v98 = 19;
    memset(v99, 0, sizeof(v99));
    long long v100 = *(_OWORD *)__dst;
    long long v101 = *(_OWORD *)__dst;
    BlueFin::GlPeSubsets::ComputeScatterWidthK(a4, 2, (uint64_t)&v95);
    if (!v11
      || (*((_DWORD *)a2 + 75) = *(_DWORD *)(v11 + 120),
          float v15 = *(float *)&v100,
          *((_DWORD *)a2 + 76) = DWORD1(v101),
          v15 > 200.0))
    {
      unint64_t v86 = v11;
      uint64_t v87 = (uint64_t)v7;
      int v88 = *((unsigned __int8 *)a2 + 244);
      v91 = 0;
      *(_OWORD *)v92 = 0uLL;
      v92[2] = (char *)&v92[3] + 4;
      LOBYTE(v92[3]) = 19;
      memset((char *)&v92[3] + 4, 0, 64);
      memset((char *)&v92[11] + 4, 0, 28);
      int32x4_t v93 = vdupq_n_s32(0x43C80000u);
      int32x4_t v94 = v93;
      v120[1] = 0;
      v120[0] = 0;
      double v121 = 0.0;
      int32x2_t v122 = vdup_n_s32(0x44FA0000u);
      int v123 = -1;
      int Fix = BlueFin::GlPeKFAltAsst::altAsstFirstFix(*((void *)a2 + 4), (uint64_t)v120, (double *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8), 0x3E8u);
      float v17 = v121;
      if (!Fix) {
        float v17 = 0.0;
      }
      float v18 = 2000.0;
      if (Fix) {
        float v18 = 250.0;
      }
      float v19 = v17 - v18;
      float v20 = v18 + v17;
      uint64_t v21 = *((void *)a2 + 1);
      uint64_t v22 = *((void *)a2 + 2);
      BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v119);
      BlueFin::GlPeIsolate::GlPeIsolate((uint64_t)v111, v21, v22);
      *(void *)v111 = &unk_270EC31A8;
      v119[0] = &unk_270EC31E8;
      unsigned __int8 v23 = 1;
      int32x2_t v24 = vdup_n_s32(0x461C4000u);
      char v25 = 1;
      while (1)
      {
        v26 = a4;
        uint64_t v27 = *((void *)a2 + 1);
        uint64_t v28 = *((void *)a2 + 2);
        BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v119);
        BlueFin::GlPeIsolate::GlPeIsolate((uint64_t)v111, v27, v28);
        *(void *)v111 = &unk_270EC31A8;
        v119[0] = &unk_270EC31E8;
        float v116 = v20;
        float v117 = v19;
        v108 = (BlueFin::GlSignalIdSet *)v110;
        unsigned __int8 v109 = 19;
        memset(v110, 0, sizeof(v110));
        int32x2_t v114 = v24;
        unsigned __int8 v29 = BlueFin::GlSetBase::Cnt(v90);
        if (v29 <= 5u)
        {
          v83 = "ucNumSvs>=ucMinNumSvs";
          DeviceFaultNotify("glpe_firstfix.cpp", 476, "GetMinNumPop", (char)"ucNumSvs>=ucMinNumSvs");
          v84 = "glpe_firstfix.cpp";
          int v85 = 476;
          goto LABEL_112;
        }
        if (v29 >= 0xBu)
        {
          v83 = "ucNumSvs<=GLPE_SUBSETS_MAX_PR_ISOL";
          DeviceFaultNotify("glpe_firstfix.cpp", 477, "GetMinNumPop", (char)"ucNumSvs<=GLPE_SUBSETS_MAX_PR_ISOL");
          v84 = "glpe_firstfix.cpp";
          int v85 = 477;
LABEL_112:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v84, v85, v83);
        }
        uint64_t v30 = ((v29 - 6) & 0xFE) != 0 ? 2 : (v29 - 6);
        unsigned __int8 v118 = (43692 * byte_263BBBD70[5 * v23 - 5 + v30]) >> 16;
        v102 = (int *)&v104;
        unsigned __int8 v103 = 19;
        long long v104 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        memset(v107, 0, sizeof(v107));
        double v126 = COERCE_DOUBLE(&v127[4]);
        v127[0] = 19;
        memset(&v127[4], 0, 76);
        LOBYTE(v140) = *((unsigned char *)v90 + 8);
        memcpy(&v141, *(const void **)v90, 4 * v140);
        WORD1(v140) = 0;
        BYTE1(v140) = 0;
        HIDWORD(v140) = v141;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v140);
        a4 = v26;
        BlueFin::GlPeSubsetIterator::GlPeSubsetIterator((unint64_t *)&v135, v26);
        BlueFin::GlPeIsolate::RecurseIsolation((uint64_t)v111, (uint64_t)v26, (const void **)&v126, (long long *)&v140, v23);
        if (v112 > v118) {
          break;
        }
LABEL_25:
        v32 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v140, (unsigned int *)&v142, 0x13u, (const void **)&v102);
        double v126 = COERCE_DOUBLE(&v127[4]);
        v127[0] = 19;
        memset(&v127[4], 0, 76);
        BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v32, (int **)&v126);
        v33 = (BlueFin::GlSignalIdSet *)BlueFin::GlSetBase::operator=((uint64_t)&v140, (uint64_t)&v126);
        long long v144 = *(_OWORD *)&v127[36];
        v145[0] = *(_OWORD *)&v127[52];
        *(_OWORD *)((char *)v145 + 12) = *(_OWORD *)&v127[64];
        long long v142 = *(_OWORD *)&v127[4];
        long long v143 = *(_OWORD *)&v127[20];
        BlueFin::GlSignalIdSet::setSignalIdLimits(v33);
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v135, (unsigned int *)&v136, 0x13u, (const void **)v90);
        double v126 = COERCE_DOUBLE(&v127[4]);
        v127[0] = 19;
        memset(&v127[4], 0, 76);
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v135, (int **)&v126, (int **)&v140);
        BlueFin::GlSetBase::operator=((uint64_t)&v135, (uint64_t)&v126);
        long long v138 = *(_OWORD *)&v127[36];
        *(_OWORD *)v139 = *(_OWORD *)&v127[52];
        *(_OWORD *)&v139[12] = *(_OWORD *)&v127[64];
        long long v136 = *(_OWORD *)&v127[4];
        long long v137 = *(_OWORD *)&v127[20];
        unint64_t v34 = BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)v26, (const BlueFin::GlSignalIdSet *)&v135);
        BlueFin::GlSetBase::Add((uint64_t)&v108, &v102);
        v35 = v102;
        if (!*v102)
        {
          if (v103 < 2uLL) {
            goto LABEL_57;
          }
          if (!v102[1])
          {
            uint64_t v38 = 2;
            while (v103 != v38)
            {
              if (v102[v38++])
              {
                unint64_t v40 = v38 - 1;
                goto LABEL_67;
              }
            }
            unint64_t v40 = v103;
LABEL_67:
            if (v40 >= v103) {
              goto LABEL_57;
            }
          }
        }
        if (!v34) {
          goto LABEL_57;
        }
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v133, v134, 0x13u, (const void **)v90);
        long long v124 = *(_OWORD *)v34;
        uint64_t v125 = *(void *)(v34 + 16);
        BlueFin::GlPeNavUtil::ComputeRangeResidVec((uint64_t)v111, (uint64_t)v133, (uint64_t)&v124, (int)(*(float *)(v34 + 120) * 1000.0), 0, 0, 0, 1, 0, 1);
        v36 = *(const void **)v90;
        v37 = *(int **)&v126;
        LOBYTE(v140) = *((unsigned char *)v90 + 8);
        memcpy(&v141, v36, 4 * v140);
        WORD1(v140) = 0;
        BYTE1(v140) = 0;
        HIDWORD(v140) = v141;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v140);
        if (BYTE1(v140) == v140) {
          goto LABEL_50;
        }
        __int16 v41 = 1;
        double v42 = 0.0;
        v43 = v102;
        double v44 = 4000.0;
        do
        {
          if (WORD1(v140) >= 0x23FuLL)
          {
            v83 = "usIndex < NUM_SIGNAL_IDS";
            DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
            v84 = "glsignalid.h";
            int v85 = 577;
            goto LABEL_112;
          }
          double v45 = fabs(*(double *)&v37[2 * v41]);
          if (v45 >= v42) {
            double v46 = v45;
          }
          else {
            double v46 = v42;
          }
          uint64_t v47 = (1 << (BYTE2(v140) & 0x1F)) & *(unsigned int *)((char *)v43
                                                                + (((unint64_t)WORD1(v140) >> 3) & 0x1FFC));
          if (!v47) {
            double v42 = v46;
          }
          if (v44 >= v45 && v47 != 0) {
            double v44 = v45;
          }
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v140);
          ++v41;
        }
        while (BYTE1(v140) != v140);
        a4 = v26;
        if (v44 < v42 + v42)
        {
          v140 = &v142;
          LOBYTE(v141) = 19;
          long long v142 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          memset(v145, 0, 28);
          BlueFin::GlSetBase::operator=((uint64_t)&v102, (uint64_t)&v140);
          long long v106 = v144;
          *(_OWORD *)v107 = v145[0];
          *(_OWORD *)&v107[12] = *(_OWORD *)((char *)v145 + 12);
          long long v104 = v142;
          long long v105 = v143;
        }
LABEL_50:
        BOOL v49 = v115 > v116 || v115 < v117;
        if (v49)
        {
          v140 = &v142;
          LOBYTE(v141) = 19;
          long long v142 = 0u;
          long long v143 = 0u;
          long long v144 = 0u;
          memset(v145, 0, 28);
          BlueFin::GlSetBase::operator=((uint64_t)&v102, (uint64_t)&v140);
          long long v106 = v144;
          *(_OWORD *)v107 = v145[0];
          *(_OWORD *)&v107[12] = *(_OWORD *)((char *)v145 + 12);
          long long v104 = v142;
          long long v105 = v143;
        }
        v35 = v102;
LABEL_57:
        if (*v35) {
          goto LABEL_69;
        }
        if (v103 >= 2uLL)
        {
          if (v35[1]) {
            goto LABEL_69;
          }
          uint64_t v50 = 2;
          do
          {
            if (v103 == v50) {
              goto LABEL_64;
            }
          }
          while (!v35[v50++]);
          if (v50 - 1 < (unint64_t)v103)
          {
LABEL_69:
            BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v135, (unsigned int *)&v136, 0x13u, (const void **)&v102);
            double v126 = COERCE_DOUBLE(&v127[4]);
            v127[0] = 19;
            memset(&v127[4], 0, 76);
            BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v135, (int **)&v126);
            BlueFin::GlSetBase::operator=((uint64_t)&v135, (uint64_t)&v126);
            long long v137 = *(_OWORD *)&v127[20];
            long long v138 = *(_OWORD *)&v127[36];
            *(_OWORD *)v139 = *(_OWORD *)&v127[52];
            *(_OWORD *)&v139[12] = *(_OWORD *)&v127[64];
            long long v136 = *(_OWORD *)&v127[4];
            BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v135);
            v53 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v140, (unsigned int *)&v142, 0x13u, (const void **)v90);
            double v126 = COERCE_DOUBLE(&v127[4]);
            v127[0] = 19;
            memset(&v127[4], 0, 76);
            BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v53, (int **)&v126, &v135);
            BlueFin::GlSetBase::operator=((uint64_t)&v140, (uint64_t)&v126);
            long long v143 = *(_OWORD *)&v127[20];
            long long v144 = *(_OWORD *)&v127[36];
            v145[0] = *(_OWORD *)&v127[52];
            *(_OWORD *)((char *)v145 + 12) = *(_OWORD *)&v127[64];
            long long v142 = *(_OWORD *)&v127[4];
            unint64_t v54 = BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)a4, (const BlueFin::GlSignalIdSet *)&v140);
            if (v54)
            {
              BlueFin::stSubset::operator=((uint64_t)&v91, v54);
              float v55 = *(float *)v93.i32;
              float v56 = 0.625;
              if (!*((unsigned char *)a2 + 244)) {
                float v56 = 0.5;
              }
              if ((float)(*(float *)v114.i32 * v56) >= *(float *)v93.i32) {
                float v55 = *(float *)v114.i32 * v56;
              }
              *(float *)v93.i32 = v55;
            }
LABEL_75:
            uint64_t v7 = (BlueFin::GlPeFirstFix *)v87;
            BlueFin::stSubset::operator=(v87, (uint64_t)&v91);
            float v14 = 0.0;
            if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v8))
            {
              BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v91, (unsigned int *)v92 + 1, 0x13u, v8);
              double v126 = COERCE_DOUBLE(&v127[4]);
              v127[0] = 19;
              memset(&v127[4], 0, 76);
              BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v91, (int **)&v126);
              BlueFin::GlSetBase::operator=((uint64_t)&v91, (uint64_t)&v126);
              *(_OWORD *)((char *)&v92[2] + 4) = *(_OWORD *)&v127[20];
              *(_OWORD *)((char *)&v92[4] + 4) = *(_OWORD *)&v127[36];
              *(_OWORD *)((char *)&v92[6] + 4) = *(_OWORD *)&v127[52];
              *(_OWORD *)&v92[8] = *(_OWORD *)&v127[64];
              *(_OWORD *)((char *)v92 + 4) = *(_OWORD *)&v127[4];
              BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v91);
              BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v111, (unsigned int *)&v111[12], 0x13u, (const void **)v90);
              double v126 = COERCE_DOUBLE(&v127[4]);
              v127[0] = 19;
              memset(&v127[4], 0, 76);
              BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v111, (int **)&v126, &v91);
              BlueFin::GlSetBase::operator=((uint64_t)v111, (uint64_t)&v126);
              *(_OWORD *)&v111[28] = *(_OWORD *)&v127[20];
              *(_OWORD *)&v111[44] = *(_OWORD *)&v127[36];
              *(_OWORD *)&v111[60] = *(_OWORD *)&v127[52];
              *(_OWORD *)&v111[72] = *(_OWORD *)&v127[64];
              *(_OWORD *)&v111[12] = *(_OWORD *)&v127[4];
              BlueFin::GlPeSubsets::ComputeWeightedMeanPos((BlueFin::GlPeSubsets *)a4, (const BlueFin::GlSignalIdSet *)v111, (uint64_t)&v126);
              BlueFin::stSubset::operator=((uint64_t)&v95, (uint64_t)&v126);
              *(_OWORD *)uint64_t v87 = v95;
              uint64_t v57 = *(void *)&v99[21];
              *(void *)(v87 + 16) = v96;
              *(void *)(v87 + 120) = v57;
              if (!v86)
              {
                BlueFin::lla2ned((double *)v87, (double *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8), 0, &v126);
                float v14 = sqrt(*(double *)v127 * *(double *)v127 + v126 * v126);
                float v58 = *(float *)(v87 + 128);
                if ((float)(v14 * 0.1) >= v58) {
                  float v58 = v14 * 0.1;
                }
                goto LABEL_86;
              }
            }
            goto LABEL_87;
          }
        }
LABEL_64:
        BlueFin::GlPeRepeatedIsol::Submit((const BlueFin::GlSignalIdSet *)((char *)a2 + 272), v108, v109);
        char v52 = (v88 == 0) & v25;
        unsigned __int8 v23 = 2;
        char v25 = 0;
        if ((v52 & 1) == 0) {
          goto LABEL_75;
        }
      }
      if (v113 <= v118)
      {
        BOOL v31 = 0;
        if (!v113)
        {
LABEL_24:
          BlueFin::GlSetBase::operator=((uint64_t)&v102, (uint64_t)&v111[24]);
          long long v106 = *(_OWORD *)&v111[68];
          *(_OWORD *)v107 = *(_OWORD *)&v111[84];
          *(_OWORD *)&v107[12] = *(_OWORD *)&v111[96];
          long long v104 = *(_OWORD *)&v111[36];
          long long v105 = *(_OWORD *)&v111[52];
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v31 = *(float *)v114.i32 + *(float *)v114.i32 < *(float *)&v114.i32[1];
        if (!v113) {
          goto LABEL_24;
        }
      }
      if (!v31) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    *(void *)v111 = &v111[12];
    v111[8] = 19;
    memset(&v111[12], 0, 76);
    BlueFin::GlPeSubsets::ComputeWeightedMeanPos((BlueFin::GlPeSubsets *)a4, (const BlueFin::GlSignalIdSet *)v111, (uint64_t)&v126);
    BlueFin::stSubset::operator=((uint64_t)&v95, (uint64_t)&v126);
    BlueFin::stSubset::operator=((uint64_t)v7, v11);
    *(_OWORD *)uint64_t v7 = v95;
    uint64_t v59 = *(void *)&v99[21];
    *((void *)v7 + 2) = v96;
    *((void *)v7 + 15) = v59;
    float v60 = BlueFin::GlPeSubsets::ComputeScatterWidthK((BlueFin::GlPeSubsets *)a4, 1);
    float v61 = 0.625;
    if (!*((unsigned char *)a2 + 244)) {
      float v61 = 0.5;
    }
    float v58 = v61 * v60;
    if (v58 < *((float *)v7 + 32)) {
      float v58 = *((float *)v7 + 32);
    }
    float v14 = 0.0;
LABEL_86:
    *((float *)v7 + 32) = v58;
LABEL_87:
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v8))
    {
      if (*((unsigned char *)a2 + 176))
      {
        BlueFin::lla2ned((double *)v7, (double *)a2 + 26, 0, &v126);
        float v62 = sqrt(*(double *)v127 * *(double *)v127 + v126 * v126);
        float v63 = BlueFin::GlPeSubsets::ComputeScatterWidthK((BlueFin::GlPeSubsets *)a4, 0);
        float v64 = v63 + v63;
        BOOL v49 = v63 < 400.0;
        float v65 = 800.0;
        if (!v49) {
          float v65 = v64;
        }
        if (*((unsigned char *)a2 + 178) || v65 >= v62)
        {
          if (*((double *)a2 + 24) > v62)
          {
            float v69 = *((float *)v7 + 32);
            if (v69 <= v62) {
              float v69 = v62;
            }
            *((float *)v7 + 32) = v69;
          }
        }
        else if (!*((unsigned char *)a2 + 179))
        {
          ++*((unsigned char *)a2 + 232);
          *((unsigned char *)a2 + 179) = 1;
        }
      }
      else if (*((unsigned char *)a2 + 56))
      {
        uint64_t v66 = *((void *)a2 + 10);
        *(_OWORD *)v111 = *((_OWORD *)a2 + 4);
        *(void *)&v111[16] = v66;
        BlueFin::lla2ned((double *)v7, (double *)v111, 0, &v126);
        float v67 = sqrt(*(double *)v127 * *(double *)v127 + v126 * v126);
        if (v67 <= 200.0)
        {
          double v70 = *((double *)a2 + 11);
          float v71 = *((float *)v7 + 32);
          float v72 = v70 / (v70 + v71);
          *(float64x2_t *)uint64_t v7 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v7, v72), *((float64x2_t *)a2 + 4), 1.0 - v72);
          *(float *)&double v70 = sqrt(1.0 / (1.0 / (v70 * v70) + 1.0 / (float)(v71 * v71)));
          *((_DWORD *)v7 + 32) = LODWORD(v70);
          char v68 = 1;
        }
        else
        {
          char v68 = 2;
        }
        *((unsigned char *)a2 + 128) = v68;
      }
    }
  }
  BOOL result = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v8);
  if (result)
  {
    uint64_t v74 = *((void *)a2 + 5);
    v75 = (char *)a2 + *(void *)(*(void *)a2 - 24);
    uint64_t v76 = *((void *)v75 + 11);
    int v77 = *((_DWORD *)a2 + 60);
    int v78 = *((_DWORD *)a2 + 66);
    *(_OWORD *)v127 = *(_OWORD *)((char *)a2 + 8);
    double v126 = *(double *)&a4;
    *(void *)&v127[16] = v74;
    *(void *)&v127[32] = 0;
    *(void *)&v127[24] = 0;
    *(_DWORD *)&v127[40] = v78;
    *(void *)&v127[48] = 0;
    *(_OWORD *)&v127[56] = *(_OWORD *)(v75 + 8);
    *(void *)&v127[72] = *((void *)v75 + 3);
    uint64_t v128 = v76;
    int v129 = v77;
    v130 = v132;
    char v131 = 8;
    memset(v132, 0, 32);
    v79 = a4 + 3;
    *a4 = (unint64_t)(a4 + 3);
    a4[1] = (unint64_t)(a4 + 3);
    a4[2] = (unint64_t)(a4 + 3523);
    int32x4_t v80 = vdupq_n_s32(0x43C80000u);
    do
    {
      unint64_t *v79 = 0;
      v79[1] = 0;
      *(_OWORD *)((char *)v79 + 36) = 0uLL;
      v79[2] = 0;
      v79[3] = (unint64_t)v79 + 36;
      *((unsigned char *)v79 + 32) = 19;
      *(_OWORD *)((char *)v79 + 52) = 0uLL;
      *(_OWORD *)((char *)v79 + 68) = 0uLL;
      *(_OWORD *)((char *)v79 + 84) = 0uLL;
      *(_OWORD *)((char *)v79 + 100) = 0uLL;
      *((_OWORD *)v79 + 7) = 0uLL;
      *((int32x4_t *)v79 + 8) = v80;
      *((int32x4_t *)v79 + 9) = v80;
      v79 += 20;
    }
    while (v79 != a4 + 3523);
    BOOL result = BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)&v126, (uint64_t)v8, 3, 0, *((void *)a2 + 32), 0);
    uint64_t v81 = *((void *)a2 + 32);
    double v82 = *(double *)(v81 + 128);
    if (v82 <= v14) {
      double v82 = v14;
    }
    *(double *)(v81 + 128) = v82;
  }
  return result;
}

double BlueFin::GlPeOscMgr::SetOscOff(BlueFin::GlPeOscMgr *this, double result, double a3, int a4)
{
  if (*((unsigned char *)this + 14)) {
    return result;
  }
  double v6 = result * 1000000000.0;
  if (v6 > 0.0)
  {
    double v7 = 0.5;
LABEL_7:
    int v8 = (int)(v6 + v7);
    goto LABEL_8;
  }
  if (v6 < 0.0)
  {
    double v7 = -0.5;
    goto LABEL_7;
  }
  LOWORD(v8) = 0;
LABEL_8:
  *((_WORD *)this + 1) = v8;
  *(unsigned char *)this = a4;
  if (a4)
  {
    uint64_t v9 = *((void *)this + 2);
    if (*(_DWORD *)(v9 + 2576) == 3 || (*(unsigned char *)(v9 + 2744) & 8) != 0)
    {
      GlCustomLog(14, "CntinDebug Apply %d %d\n", *((__int16 *)this + 2), 0);
      *((_WORD *)this + 1) += *((_WORD *)this + 2);
    }
  }
  if (a3 * 1000000000.0 > 0.0)
  {
    double v10 = 0.5;
LABEL_17:
    int v11 = (int)(a3 * 1000000000.0 + v10);
    goto LABEL_18;
  }
  if (a3 * 1000000000.0 < 0.0)
  {
    double v10 = -0.5;
    goto LABEL_17;
  }
  LOWORD(v11) = 0;
LABEL_18:
  if ((__int16)v11 <= 1) {
    LOWORD(v11) = 1;
  }
  *((_WORD *)this + 5) = v11;
  BOOL v12 = (unsigned int *)*((void *)this + 2);
  unsigned int v13 = v12[642];
  if (v13 == -7200001)
  {
    GlCustomLog(14, "GlPeOscMgr::SetOscOff( Last Asic Lms is not valid\n");
  }
  else
  {
    *((_DWORD *)this + 10) = v13;
    double v14 = (double)(int)v13;
    if (v13 <= 0xFF9222FE) {
      double v14 = (double)v13;
    }
    return BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v12, 0, 0, (uint64_t)this + 24, v14);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdNvRamReader::ProcessRpcNvRamResponse(BlueFin::GlMeSrdNvRamReader *this, unsigned int *a2, int a3)
{
  if (a3 != 6)
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 118, "ProcessRpcNvRamResponse", (char)"ucNumUL == NVRAM_WORD_SIZE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 118, "ucNumUL == NVRAM_WORD_SIZE");
  }
  long long v4 = (unsigned int *)((char *)this + 4);
  uint64_t v5 = *((void *)a2 + 2);
  *(_OWORD *)((char *)this + 4) = *(_OWORD *)a2;
  *(void *)((char *)this + 20) = v5;
  *(_WORD *)this = 257;
  unsigned int v6 = *((_DWORD *)this + 1);
  *((_DWORD *)this + 1) = v6 & 0xFFFFFF;
  char v9 = 0;
  uint64_t result = BlueFin::GlUtlCrc::GlUtlCrcCalc((BlueFin::GlUtlCrc *)&v9, (const unsigned int *)this + 1, 6u);
  if ((v6 & 0xFF0000) != 0x30000 || HIBYTE(v6) != result) {
    *(unsigned char *)this = 0;
  }
  *long long v4 = v6;
  return result;
}

uint64_t BlueFin::GlUtlCrc::GlUtlCrcCalc(BlueFin::GlUtlCrc *this, const unsigned int *a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned __int8 *)this;
  if (a3)
  {
    for (unsigned int i = 0; i < a3; ++i)
    {
      int v5 = *a2++;
      uint64_t v3 = BlueFin::GlUtlCrc::ucCrcTable[BlueFin::GlUtlCrc::ucCrcTable[BlueFin::GlUtlCrc::ucCrcTable[BlueFin::GlUtlCrc::ucCrcTable[(v3 ^ v5)] ^ BYTE1(v5)] ^ BYTE2(v5)] ^ HIBYTE(v5)];
      *(unsigned char *)this = v3;
    }
  }
  return v3;
}

BOOL BlueFin::GlPeNavGnssMeasMgr::DopplerResidualCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v116 = v4;
  int v108 = v7;
  int v110 = v8;
  char v111 = v9;
  int32x2_t v114 = v10;
  uint64_t v115 = v3;
  double v11 = v6;
  uint64_t v109 = v12;
  uint64_t v112 = v13;
  uint64_t v15 = v14;
  uint64_t v118 = v2;
  uint64_t v16 = 0;
  uint64_t v171 = *MEMORY[0x263EF8340];
  do
  {
    float v17 = &v160[v16];
    *((unsigned char *)v17 + 32) = 0;
    *((_DWORD *)v17 + 9) = -1;
    *((_WORD *)v17 + 20) = 575;
    v16 += 7;
  }
  while (v16 != 84);
  uint64_t v18 = 0;
  long long v142 = &v143[4];
  v143[0] = 19;
  memset(&v143[4], 0, 76);
  do
  {
    float v19 = (char *)&v144 + v18;
    *float v19 = 0;
    *((_DWORD *)v19 + 1) = -1;
    *((_WORD *)v19 + 4) = 575;
    v18 += 12;
  }
  while (v18 != 1200);
  long long v138 = &v139[4];
  v139[0] = 19;
  memset(&v139[4], 0, 32);
  long long v140 = 0u;
  memset(v141, 0, sizeof(v141));
  float v20 = *(const void ***)(v2 + 8);
  unint64_t v21 = *(unsigned int *)v20;
  if (v6 > 3.0) {
    *(_DWORD *)(v2 + 2208) = v21;
  }
  BOOL v22 = v6 < 2.0 && (unint64_t)*(unsigned int *)(v2 + 2208) + 3000 < v21;
  unsigned int v113 = (int)(v5 * 1000.0);
  int v24 = (*(_DWORD *)(v3 + 8) - 1) < 2 || v21 < 0x493E0 || v22;
  double v25 = 2.5;
  double v26 = 0.0;
  if (v24) {
    double v25 = 0.0;
  }
  double v106 = v25;
  if (v4 && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v20 + 23)))
  {
    uint64_t v27 = *(void *)(v118 + 48);
    BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v136[16]);
    v135 = (uint64_t *)&off_270EC40B0;
    *(void *)long long v136 = v20;
    *uint64_t v28 = &unk_270EC40E8;
    *(void *)&v136[8] = v27;
    v130 = &v131[4];
    v131[0] = 19;
    *(_OWORD *)&v131[4] = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    memset(v134, 0, sizeof(v134));
    uint64_t v29 = *(void *)(v118 + 8);
    LOBYTE(v161) = *(unsigned char *)(v29 + 192);
    memcpy(&v162, *(const void **)(v29 + 184), 4 * v161);
    WORD1(v161) = 0;
    BYTE1(v161) = 0;
    HIDWORD(v161) = v162;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v161);
    if (BYTE1(v161) != v161)
    {
      unsigned int v30 = 0;
      BOOL v31 = &v134[24];
      while (1)
      {
        if (*v31)
        {
          unsigned int v32 = *v31 - (((*v31 >> 2) & 0x9249249) + ((*v31 >> 1) & 0x5B6DB6DB));
          unsigned int v30 = ((v32 + (v32 >> 3)) & 0xC71C71C7) + v30 - 63 * (((v32 + (v32 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        if (--v31 < (_DWORD *)&v131[4])
        {
          if ((v30 & 0xFFF0) != 0) {
            break;
          }
          if (WORD1(v161) >= 0x23Fu)
          {
            DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
          }
          *(_DWORD *)&v131[(((unint64_t)WORD1(v161) >> 3) & 0x1FFC) + 4] |= 1 << SBYTE2(v161);
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v161);
          unsigned int v30 = 0;
          BOOL v31 = &v134[24];
          if (BYTE1(v161) == v161) {
            break;
          }
        }
      }
    }
    long long v128 = *(_OWORD *)v114;
    uint64_t v129 = *((void *)v114 + 2);
    BlueFin::GlPeNavUtil::ComputeRrateResidVec((uint64_t)&v135, (uint64_t)&v130);
    BlueFin::SKFVector::SortAscen((uint64_t *)&v161);
    unsigned int v33 = 0;
    unint64_t v34 = &v130[4 * v131[0] - 4];
    do
    {
      if (*(_DWORD *)v34)
      {
        unsigned int v35 = *(_DWORD *)v34 - (((*(_DWORD *)v34 >> 2) & 0x9249249) + ((*(_DWORD *)v34 >> 1) & 0x5B6DB6DB));
        unsigned int v33 = ((v35 + (v35 >> 3)) & 0xC71C71C7) + v33 - 63 * (((v35 + (v35 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      v34 -= 4;
    }
    while (v34 >= v130);
    double v26 = v161[(unsigned __int16)v33 >> 1];
    float v20 = *(const void ***)(v118 + 8);
  }
  LODWORD(__src) = *((unsigned __int8 *)v20 + 192);
  memcpy(&v124, v20[23], 4 * __src);
  HIDWORD(__src) = v124;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
  v36 = &xmmword_263BAB000;
  if (BYTE1(__src) == __src)
  {
    LOBYTE(v37) = 0;
    LOBYTE(v161) = 0;
    goto LABEL_94;
  }
  LOBYTE(v37) = 0;
  int v107 = 0;
  uint64_t v38 = v15;
  do
  {
    if (WORD1(__src) >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    v39 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(__src);
    char v40 = *v39;
    LODWORD(v39) = v39[1];
    LOBYTE(v119) = v40;
    HIDWORD(v119) = v39;
    __int16 v120 = WORD1(__src);
    PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v118 + 8), (const BlueFin::GlSignalId *)&v119, 0);
    double v42 = PeMeas;
    unsigned int v43 = v119;
    if (v119 > 0x33u)
    {
      if (!((v43 > 0x41) | BlueFin::stPeSigMeasKF::IsPRValid(PeMeas) & 1))
      {
        BlueFin::stPeSigMeasKF::IsRRValid(v42);
        BlueFin::stPeSigMeasKF::IsRRValid(v42);
        goto LABEL_85;
      }
    }
    else
    {
      BlueFin::stPeSigMeasKF::IsPRValid(PeMeas);
    }
    if (BlueFin::stPeSigMeasKF::IsRRValid(v42))
    {
      if ((((unint64_t)*(unsigned int *)&v142[4 * (v120 >> 5)] >> (v120 & 0x1F)) & 1) == 0)
      {
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v118 + 8), (const BlueFin::GlSignalId *)&v119, 0, 0);
        double v46 = MeMeas;
        if (MeMeas)
        {
          uint64_t v47 = (int **)((char *)&v144 + 12 * v37);
          if (v47 != &v119)
          {
            *(unsigned char *)uint64_t v47 = (_BYTE)v119;
            v48 = (char *)&v144 + 12 * v37;
            *((_DWORD *)v48 + 1) = HIDWORD(v119);
            *((_WORD *)v48 + 4) = v120;
          }
          if (v111)
          {
            v130 = &v131[4];
            v131[0] = 19;
            *(_OWORD *)&v131[4] = 0u;
            long long v132 = 0u;
            long long v133 = 0u;
            memset(v134, 0, sizeof(v134));
            *(_DWORD *)&v131[4 * (*((__int16 *)MeMeas + 4) >> 5) + 4] |= 1 << *((_WORD *)MeMeas + 4);
            uint64_t v49 = *(void *)(v118 + 8);
            uint64_t v50 = *(void *)(v118 + 48);
            BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v136[16]);
            v135 = (uint64_t *)&off_270EC40B0;
            *(void *)long long v136 = v49;
            *(void *)&v136[8] = v50;
            *(void *)&v136[16] = &unk_270EC40E8;
            *(_OWORD *)&v126[7] = *(_OWORD *)v114;
            uint64_t v127 = *((void *)v114 + 2);
            BlueFin::GlPeNavUtil::ComputeRrateResidVec((uint64_t)&v135, (uint64_t)&v130);
            unsigned int v51 = 0;
            char v52 = &v130[4 * v131[0] - 4];
            do
            {
              if (*(_DWORD *)v52)
              {
                unsigned int v53 = *(_DWORD *)v52 - (((*(_DWORD *)v52 >> 2) & 0x9249249) + ((*(_DWORD *)v52 >> 1) & 0x5B6DB6DB));
                unsigned int v51 = ((v53 + (v53 >> 3)) & 0xC71C71C7) + v51 - 63 * (((v53 + (v53 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              v52 -= 4;
            }
            while (v52 >= v130);
            double v54 = -999.0;
            if ((_WORD)v51) {
              double v54 = v161[1];
            }
            *(double *)&v168[v37] = v54;
            if (*((int *)v46 + 5) > 2
              || (double v55 = 0.0, (*(_DWORD *)(v115 + 8) - 1) <= 4)
              && (int IsPRValidForNav = BlueFin::stPeSigMeasKF::IsPRValidForNav(v42), v11 > 1.0)
              && ((*((__int16 *)v42 + 39) < 29) & ~IsPRValidForNav) != 0)
            {
              double v55 = 2.0;
            }
            if (v116)
            {
LABEL_74:
              if (v54 == -999.0)
              {
                char v65 = 30;
              }
              else
              {
                if (!v116 || vabdd_f64(v54, v26) < 1.5)
                {
                  v138[v120 >> 5] |= 1 << v120;
                  double v64 = 15.0;
                  if (*((_DWORD *)v46 + 5) != 4) {
                    double v64 = 0.0;
                  }
                  *(double *)&v165[v37] = v64 + fabsf(*((float *)v46 + 27) + -174.0);
                  LOBYTE(v37) = v37 + 1;
                  if (v37 == 100)
                  {
                    LOBYTE(v161) = 0;
                    LOBYTE(v37) = 100;
                    uint64_t v15 = v38;
                    v36 = &xmmword_263BAB000;
                    if (v107 >= 0xCu) {
                      goto LABEL_92;
                    }
LABEL_90:
                    uint64_t v66 = (const double *)v37;
                    float v67 = v168;
                    goto LABEL_93;
                  }
                  goto LABEL_84;
                }
                char v65 = 29;
              }
              *((unsigned char *)v42 + 305) = v65;
LABEL_84:
              uint64_t v15 = v38;
              goto LABEL_85;
            }
            if (v54 == -999.0)
            {
              double v54 = -999.0;
              goto LABEL_74;
            }
            double v54 = fabs(v54) + v55;
            *(double *)&v168[v37] = v54;
            int v62 = v107;
            if (v54 < v106) {
              int v62 = v107 + 1;
            }
            int v107 = v62;
          }
          else
          {
            float v56 = *((float *)MeMeas + 27);
            BOOL v57 = v56 < 30.0 && *((_DWORD *)MeMeas + 5) == 0;
            double v58 = 100000.0;
            if (!v57) {
              double v58 = 0.0;
            }
            BOOL v59 = v56 < 16.0;
            double v60 = 1000000.0;
            if (!v59) {
              double v60 = 0.0;
            }
            double v54 = floor((v60 + v58 + *((float *)MeMeas + 25) * 299792458.0) * 10000.0 + 0.5) * 0.0001;
            *(double *)&v168[v37] = v54;
          }
          unsigned int v63 = v119 - 76;
          if (v63 <= 0x3E && ((1 << v63) & 0x7C0000000000001FLL) != 0)
          {
            double v54 = v54 + v54;
            *(double *)&v168[v37] = v54;
          }
          goto LABEL_74;
        }
      }
    }
LABEL_85:
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
  }
  while (BYTE1(__src) != __src);
  LOBYTE(v161) = 0;
  if (v107 < 0xCu)
  {
    v36 = &xmmword_263BAB000;
    if (v37 < 2u) {
      goto LABEL_94;
    }
    goto LABEL_90;
  }
  v36 = &xmmword_263BAB000;
LABEL_92:
  uint64_t v66 = (const double *)v37;
  float v67 = v165;
LABEL_93:
  BlueFin::GlSortDoubles((uint64_t)v67, v66, &v161, v45);
LABEL_94:
  v130 = &v131[4];
  v131[0] = 19;
  int v68 = *(_DWORD *)(v115 + 8);
  *(_OWORD *)&v131[4] = 0u;
  if (v37 >= 0xCu) {
    uint64_t v37 = 12;
  }
  else {
    uint64_t v37 = v37;
  }
  long long v132 = 0uLL;
  long long v133 = 0uLL;
  memset(v134, 0, sizeof(v134));
  if (v37)
  {
    unsigned __int8 v117 = 0;
    unsigned int v69 = v68 - 1;
    double v70 = v160;
    float v71 = (uint64_t *)&v161;
    double v72 = *((double *)v36 + 489);
    while (1)
    {
      unsigned int v74 = *(unsigned __int8 *)v71;
      float v71 = (uint64_t *)((char *)v71 + 1);
      unsigned int v73 = v74;
      v75 = (__int16 *)&v144 + 6 * v74;
      uint64_t v76 = *(BlueFin::GlPeMsmtMgr **)(v118 + 8);
      int v77 = v75 + 4;
      if (((unint64_t)*(unsigned int *)(*((void *)v76 + 1) + 4 * (v75[4] >> 5)) >> (v75[4] & 0x1F))) {
        break;
      }
LABEL_117:
      if (!--v37) {
        goto LABEL_120;
      }
    }
    int v78 = (double *)BlueFin::GlPeMsmtMgr::GetPeMeas(v76, (const BlueFin::GlSignalId *)v75, 0);
    *double v70 = 0.0;
    v70[1] = 0.0;
    v70[3] = NAN;
    *(_WORD *)((char *)v70 + 49) = 0;
    *((unsigned char *)v70 + 32) = 0;
    *((_DWORD *)v70 + 9) = -1;
    *((_WORD *)v70 + 20) = 575;
    *((_DWORD *)v70 + 11) = 2;
    v79 = *(BlueFin::GlPeMsmtMgr **)(v118 + 8);
    int v80 = *(_DWORD *)v79;
    *((_DWORD *)v70 + 4) = *(_DWORD *)v79;
    int v81 = -7200001;
    if (v80 != -7200001)
    {
      int v82 = *((_DWORD *)v79 + 1);
      int v83 = v80 - v82;
      if (v82 == -7200001) {
        int v81 = -7200001;
      }
      else {
        int v81 = v83;
      }
    }
    *((_DWORD *)v70 + 5) = v81;
    if (v70 + 4 != (double *)v75)
    {
      *((unsigned char *)v70 + 32) = *(unsigned char *)v75;
      *((_DWORD *)v70 + 9) = *((_DWORD *)&v144 + 3 * v73 + 1);
      *((_WORD *)v70 + 20) = *v77;
    }
    if ((*(unsigned char *)v75 + 117) >= 0x24u
      && (int v84 = *((_DWORD *)&v144 + 3 * v73 + 1), (v84 - 1) >= 2))
    {
      if (v69 <= 1 && v84 == 3) {
        goto LABEL_112;
      }
LABEL_114:
      *double v70 = v78[29] * -299792458.0;
      double v85 = v78[30];
    }
    else
    {
      if (v69 > 1) {
        goto LABEL_114;
      }
LABEL_112:
      double v85 = v78[35];
      if (v85 >= 0.0000000159999995) {
        goto LABEL_114;
      }
      *double v70 = v78[34] * -299792458.0;
    }
    v70[1] = v85 * v72;
    *((unsigned char *)v70 + 48) = 1;
    if (((unint64_t)*(unsigned int *)(*((void *)v79 + 1) + 4 * (*v77 >> 5)) >> (*v77 & 0x1F)))
    {
      uint64_t v86 = BlueFin::GlPeMsmtMgr::AccessPeMeas(v79, (const BlueFin::GlSignalId *)v75, 0);
      *(_DWORD *)&v130[4 * (*v77 >> 5)] |= 1 << *v77;
      *(_DWORD *)(v86 + 72) |= 0x40u;
      BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v118 + 8), (const BlueFin::GlSignalId *)v75, 0, 0);
      v70 += 7;
      ++v117;
    }
    goto LABEL_117;
  }
  unsigned __int8 v117 = 0;
LABEL_120:
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v119, (unsigned int *)v121, 0x13u, (const void **)&v130);
  v135 = (uint64_t *)&v136[4];
  v136[0] = 19;
  memset(&v136[4], 0, 76);
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v119, (int **)&v135);
  BlueFin::GlSetBase::operator=((uint64_t)&v119, (uint64_t)&v135);
  v121[2] = *(_OWORD *)&v136[36];
  *(_OWORD *)int32x2_t v122 = *(_OWORD *)&v136[52];
  *(_OWORD *)&v122[12] = *(_OWORD *)&v136[64];
  v121[0] = *(_OWORD *)&v136[4];
  v121[1] = *(_OWORD *)&v136[20];
  BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v119);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v125, 0x13u, (const void **)&v138);
  v135 = (uint64_t *)&v136[4];
  v136[0] = 19;
  memset(&v136[4], 0, 76);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v135, &v119);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v135);
  v125[2] = *(_OWORD *)&v136[36];
  *(_OWORD *)double v126 = *(_OWORD *)&v136[52];
  *(_OWORD *)&v126[3] = *(_OWORD *)&v136[64];
  v125[0] = *(_OWORD *)&v136[4];
  v125[1] = *(_OWORD *)&v136[20];
  LOBYTE(v135) = v124;
  memcpy(v136, __src, 4 * v124);
  WORD1(v135) = 0;
  BYTE1(v135) = 0;
  HIDWORD(v135) = *(_DWORD *)v136;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v135);
  while (BYTE1(v135) != v135)
  {
    if (WORD1(v135) >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    uint64_t v87 = *(void *)(v118 + 8);
    int v88 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v135);
    char v89 = *v88;
    LODWORD(v88) = v88[1];
    LOBYTE(__src) = v89;
    HIDWORD(__src) = v88;
    LOWORD(v124) = WORD1(v135);
    uint64_t v90 = BlueFin::GlSignalIdArray::Get(*(void *)(v87 + 19176), (uint64_t)&__src);
    if (v90) {
      *(unsigned char *)(v90 + 449) = 32;
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v135);
  }
  if ((char)v117 < 2) {
    return 0;
  }
  LOBYTE(v119) = v117;
  uint64_t v145 = 0;
  uint64_t v144 = 0;
  uint64_t v146 = 0;
  int64x2_t v149 = vdupq_n_s64(0x4079000000000000uLL);
  uint64_t v151 = 0x6400000000;
  bzero(v152, 0x328uLL);
  v150 = v152;
  v152[102] = 0x6400000000;
  bzero(v153, 0x328uLL);
  v152[101] = v153;
  v153[204] = 0;
  long long v157 = xmmword_263BBA380;
  memset(v156, 0, 32);
  v154 = v156;
  char v155 = 8;
  int32x2_t v158 = vdup_n_s32(0x42C60000u);
  int v159 = 1120272384;
  uint64_t v147 = v112;
  uint64_t v148 = v109;
  v91 = *(_DWORD **)(v118 + 8);
  uint64_t v92 = *(void *)(v118 + 16);
  v153[202] = *v91;
  v161 = (double *)v163;
  uint64_t v162 = 0xC00000000;
  memset(v163, 0, sizeof(v163));
  uint64_t v164 = 0;
  if (v110) {
    int v93 = 657555;
  }
  else {
    int v93 = 657554;
  }
  v130 = v114;
  *(void *)char v131 = v15;
  *(_DWORD *)&v131[8] = v113;
  v131[12] = 7;
  *(_DWORD *)&v131[16] = v93;
  uint64_t v94 = *(void *)(v118 + 48);
  uint64_t v95 = *(void *)(v118 + 64);
  long long v138 = v91;
  *(void *)v139 = v94;
  *(void *)&v139[8] = 0;
  *(void *)&v139[16] = v92 + 392;
  *(void *)&v139[24] = v95;
  if (BlueFin::GlPeLsq::rr2Vel((uint64_t)&v138, (uint64_t)&v130))
  {
    uint64_t v96 = (uint64_t)v161;
    uint64_t v97 = v145;
    *((void *)v161 + 2) = v144;
    *(void *)(v96 + 32) = v97;
  }
  v168[0] = v169;
  v168[1] = 0xC00000000;
  memset(v169, 0, sizeof(v169));
  uint64_t v170 = 0;
  v165[0] = v166;
  v165[1] = 0xC00000000;
  memset(v166, 0, sizeof(v166));
  uint64_t v167 = 0;
  if (v110) {
    int v98 = 1217;
  }
  else {
    int v98 = 1216;
  }
  if (!v108) {
    v98 &= 0x481u;
  }
  v135 = (uint64_t *)&v161;
  *(void *)long long v136 = v114;
  *(void *)&v136[8] = v15;
  *(void *)&v136[16] = v113;
  *(_DWORD *)&v136[24] = v98;
  memset(&v136[32], 0, 64);
  uint64_t v137 = 0x4008000000000000;
  long long v142 = v168;
  *(void *)long long v143 = v165;
  memset(&v143[8], 0, 56);
  __src = v125;
  LOBYTE(v124) = 4;
  v125[0] = 0uLL;
  BlueFin::GlSetBase::SetAllLower(&__src, v117);
  if ((*(unsigned int (**)(void, uint64_t **, unsigned char **, double *, void **))(**(void **)(v118 + 48) + 16))(*(void *)(v118 + 48), &v135, &v142, v160, &__src))
  {
    return 0;
  }
  uint64_t v100 = (char)v117 & ~((char)v117 >> 31);
  long long v101 = (double *)(v165[0] + 8);
  v102 = v160;
  do
  {
    BOOL result = v100 == 0;
    if (!v100) {
      break;
    }
    double v103 = *v101++;
    double v104 = v103 - *(double *)(v165[0] + 8);
    double v105 = *v102;
    v102 += 7;
    --v100;
  }
  while (vabdd_f64(v104, v105 - v160[0]) <= 20.0);
  return result;
}

double BlueFin::SKFVector::Median(BlueFin::SKFVector *this, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned int *)this + 2);
  if ((int)v4 < 1) {
    return 0.0;
  }
  if (v4 >= 0x65)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 1911, "Median", (char)"sLen <= GL_CHANNELS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 1911, "sLen <= GL_CHANNELS");
  }
  uint64_t v5 = *(void *)this;
  BlueFin::GlSortDoubles(*(void *)this + 8, (const double *)*((_DWORD *)this + 2), v7, a4);
  double result = *(double *)(v5 + 8 * v7[v4 >> 1] + 8);
  if ((v4 & 1) == 0) {
    return (result + *(double *)(v5 + 8 * v7[(v4 >> 1) - 1] + 8)) * 0.5;
  }
  return result;
}

uint64_t BlueFin::GlSortDoubles(uint64_t this, const double *a2, unsigned char *a3, unsigned __int8 *a4)
{
  *a3 = 0;
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    do
    {
      double v6 = *(double *)(this + 8 * v5);
      uint64_t v7 = v4;
      while (1)
      {
        uint64_t v8 = a3[v7];
        if (*(double *)(this + 8 * v8) <= v6) {
          break;
        }
        a3[v7 + 1] = v8;
        if (!(unint64_t)v7--)
        {
          unsigned __int8 v10 = 0;
          goto LABEL_8;
        }
      }
      unsigned __int8 v10 = v7 + 1;
LABEL_8:
      a3[v10] = v5++;
      ++v4;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t BlueFin::GlPeKF::InitializeKF(BlueFin::GlPeKF *this)
{
  *((unsigned char *)this + 804) = 0;
  *((unsigned char *)this + 25088) = 0;
  uint64_t v2 = (char *)this + 88560;
  *((_WORD *)this + 44280) = 0;
  *((unsigned char *)this + 88656) = 0;
  *((_DWORD *)this + 74) = 0;
  *((_DWORD *)this + 22141) = 0;
  *((void *)this + 11075) = 0;
  *((void *)this + 11076) = 0;
  *((void *)this + 11074) = 0;
  *((_WORD *)this + 44308) = 0;
  BlueFin::GlPeKF::resetDtsIfGood((uint64_t)this);
  *((_DWORD *)this + 193) = 0;
  uint64_t result = BlueFin::GlPeMsmtMgr::Init_IntPr(*((void *)v2 + 482));
  *((_DWORD *)v2 + 1014) |= 8u;
  return result;
}

BOOL BlueFin::GlPeNavMeasUtil::processNewMeas(_DWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t)*a1;
  *(unsigned char *)(v6 + 19184) = 0;
  unsigned int v7 = *(_DWORD *)v6;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v268, v270, 0x13u, (const void **)(v6 + 8));
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v266, v267, 0x13u, (const void **)*a1 + 7078);
  BlueFin::GlSignalIdSet::GetPrimarySignalSvIdSet((BlueFin::GlSignalIdSet *)&v268, (uint64_t)v265);
  BlueFin::GlSignalIdSet::GetSecondarySignalSvIdSet((BlueFin::GlSignalIdSet *)&v268, (uint64_t)v264);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v262, v263, 0x13u, &v268);
  unsigned __int8 v257 = v269;
  memcpy(v261, v268, 4 * v269);
  unsigned __int16 v259 = 0;
  unsigned __int8 v258 = 0;
  int v260 = v261[0];
  BlueFin::GlSetIterator::operator++(&v257);
  unsigned int v201 = v7;
  if (v258 != v257)
  {
    int v197 = 0;
    v191 = (void **)(a3 + 8);
    double v13 = (double)v7;
    float v8 = -10.0;
    int32x2_t v14 = vdup_n_s32(0xFF9222FF);
    double v15 = 299792458.0;
    char v199 = 1;
    uint64_t v198 = a3;
    int32x2_t v196 = v14;
    while (1)
    {
      if (v259 >= 0x23FuLL) {
        goto LABEL_346;
      }
      uint64_t v16 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v259;
      unint64_t v17 = *v16;
      LODWORD(v16) = (char)v16[1];
      v254[0] = v17;
      int v255 = (int)v16;
      unsigned __int16 v256 = v259;
      if ((v17 + 81) < 0xDCu || (*(unsigned char *)(a2 + 190) & 4) == 0) {
        break;
      }
LABEL_37:
      BlueFin::GlSetIterator::operator++(&v257);
      if (v258 == v257) {
        goto LABEL_3;
      }
    }
    uint64_t v202 = (1 << (v259 & 0x1F)) & *(unsigned int *)(*(void *)a2 + (((unint64_t)v259 >> 3) & 0x1FFC));
    if (v202)
    {
      uint64_t v18 = *(void **)(a3 + 24);
      int v19 = *(_DWORD *)(a2 + 188);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)v254, 0, 0);
      if (MeMeas)
      {
        if ((MeMeas[13] & 0x40) != 0 && ((v19 & 2) != 0 || *((float *)MeMeas + 27) > 12.0)) {
          *(_DWORD *)(*v18 + (((unint64_t)v254[0] >> 3) & 0x1C)) |= 1 << v254[0];
        }
      }
    }
    unint64_t v21 = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)v254, 0, 0);
    if (!v21)
    {
      v188 = "potMeSigMeas";
      DeviceFaultNotify("glpe_navgnssmeasutil.cpp", 140, "processNewMeas", (char)"potMeSigMeas");
      v189 = "glpe_navgnssmeasutil.cpp";
      int v190 = 140;
      goto LABEL_347;
    }
    v243[0] = *v21;
    int v22 = *((_DWORD *)v21 + 1);
    __int16 v245 = *((_WORD *)v21 + 4);
    int v244 = v22;
    unsigned int v246 = *((_DWORD *)v21 + 3);
    long long v23 = *((_OWORD *)v21 + 4);
    long long v25 = *((_OWORD *)v21 + 1);
    long long v24 = *((_OWORD *)v21 + 2);
    long long v249 = *((_OWORD *)v21 + 3);
    long long v250 = v23;
    long long v247 = v25;
    long long v248 = v24;
    long long v27 = *((_OWORD *)v21 + 6);
    long long v26 = *((_OWORD *)v21 + 7);
    long long v28 = *((_OWORD *)v21 + 5);
    *(_OWORD *)((char *)v253 + 13) = *(_OWORD *)(v21 + 125);
    long long v252 = v27;
    v253[0] = v26;
    long long v251 = v28;
    uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)v254, 0);
    BlueFin::stPeSigMeasKF::stPeSigMeasKF((uint64_t)&v218, PeMeas);
    v204[0] = 0;
    int v205 = -1;
    __int16 v206 = 575;
    *(_DWORD *)v207 = 0;
    v207[4] = 0;
    long long v216 = (unint64_t)v14;
    int v217 = 1176256512;
    if (((unint64_t)*(unsigned int *)(v266 + 4 * ((__int16)v256 >> 5)) >> (v256 & 0x1F)))
    {
      uint64_t v30 = BlueFin::GlSignalIdArray::Get(*((void *)*a1 + 7089), (uint64_t)v254);
      if (!v30)
      {
        v188 = "potGridMeas";
        DeviceFaultNotify("glpe_navgnssmeasutil.cpp", 149, "processNewMeas", (char)"potGridMeas");
        v189 = "glpe_navgnssmeasutil.cpp";
        int v190 = 149;
        goto LABEL_347;
      }
      if (v204 != (unsigned char *)v30)
      {
        v204[0] = *(unsigned char *)v30;
        int v205 = *(_DWORD *)(v30 + 4);
        __int16 v206 = *(_WORD *)(v30 + 8);
      }
      long long v31 = *(_OWORD *)(v30 + 12);
      long long v32 = *(_OWORD *)(v30 + 44);
      *(_OWORD *)&v207[16] = *(_OWORD *)(v30 + 28);
      long long v208 = v32;
      *(_OWORD *)v207 = v31;
      long long v33 = *(_OWORD *)(v30 + 60);
      long long v34 = *(_OWORD *)(v30 + 76);
      long long v35 = *(_OWORD *)(v30 + 108);
      long long v211 = *(_OWORD *)(v30 + 92);
      long long v212 = v35;
      long long v209 = v33;
      long long v210 = v34;
      long long v36 = *(_OWORD *)(v30 + 124);
      long long v37 = *(_OWORD *)(v30 + 140);
      long long v38 = *(_OWORD *)(v30 + 156);
      *(_OWORD *)&v215[12] = *(_OWORD *)(v30 + 168);
      long long v214 = v37;
      *(_OWORD *)v215 = v38;
      long long v213 = v36;
      long long v39 = *(_OWORD *)(v30 + 184);
      int v217 = *(_DWORD *)(v30 + 200);
      long long v216 = v39;
    }
    char v239 = 0;
    if ((v246 & 2) == 0) {
      BlueFin::GlSetBase::Remove((uint64_t)v262, (__int16)v256);
    }
    unint64_t v40 = (unint64_t)v243[0] >> 5;
    uint64_t v41 = 1 << (v243[0] & 0x1F);
    __int16 v42 = (v41 & *(_DWORD *)(v265[0] + 4 * v40)) != 0
       && (v41 & *(_DWORD *)(v264[0] + 4 * v40)) != 0;
    int v43 = *(_DWORD *)(a2 + 188);
    if ((v43 & 1) != 0 && v254[0] - 52 > 0xFFFFFFEC)
    {
      char v44 = 7;
    }
    else if ((v43 & 4) != 0 || (v246 & 0x40000) == 0)
    {
      if ((v246 & 2) != 0)
      {
        BOOL v48 = (~(_WORD)v43 & 0x280) == 0;
LABEL_45:
        if (!*((unsigned char *)a1 + 28))
        {
          BOOL v49 = *((float *)&v251 + 2) * v15 < 600.0 && (v246 & 0x8002) == 2;
          int v50 = v49 || v48;
          if (v50 == 1)
          {
            *((unsigned char *)a1 + 28) = 1;
            *((_DWORD *)a1 + 6) = **a1;
          }
        }
LABEL_62:
        BOOL v51 = (v43 & 4) == 0;
        double v52 = v13 + *((double *)&v249 + 1) * -1000.0;
        double v218 = v52 - floor(v52);
        unsigned int v226 = v201;
        int v228 = -1;
        int v231 = DWORD2(v248);
        LOBYTE(v273) = 0;
        LOBYTE(v279) = 0;
        BlueFin::GlPeBitMon::CheckBitValidity((uint64_t)(a1 + 4), v243, v201, (BOOL *)&v273, (BOOL *)&v279);
        int v53 = (v246 & 0x100) == 0 || v51;
        if (v53 != 1 || LOBYTE(v273) || (_BYTE)v279)
        {
          if (v243[0] < 0x34u) {
            goto LABEL_75;
          }
          if (v243[0] > 0x41u)
          {
            if ((v243[0] + 117) > 0x23u || v244) {
              goto LABEL_75;
            }
            double v55 = v52 + floor(v52 * 0.25) * -4.0;
          }
          else
          {
            if (!LOBYTE(v273))
            {
              double v54 = 10.0;
              goto LABEL_76;
            }
LABEL_75:
            double v54 = 20.0;
LABEL_76:
            double v55 = v52 - floor(v52 / v54) * v54;
          }
          int v228 = (int)v55;
          if ((v53 & 1) == 0)
          {
            if ((v243[0] + 117) > 0x23u || v244) {
              double v56 = v52 - floor(v52 / 20.0) * 20.0;
            }
            else {
              double v56 = v52 + floor(v52 * 0.25) * -4.0;
            }
            int v228 = (int)v56;
          }
        }
        if (*((float *)&v252 + 1) >= 0.0000000149999995)
        {
          float v57 = *(float *)&v252;
          float32x2_t v58 = *(float32x2_t *)&v253[1];
          HIBYTE(v242) = 17;
        }
        else
        {
          v229 |= 0x30u;
          float v57 = *(float *)&v252;
          float32x2_t v58 = *(float32x2_t *)&v253[1];
        }
        double v232 = v57;
        double v233 = *((float *)&v252 + 1);
        float64x2_t v240 = vcvtq_f64_f32(v58);
        uint64_t v59 = *(void *)(a3 + 48);
        if (v59) {
          uint64_t v60 = v59 + 72 * v256;
        }
        else {
          uint64_t v60 = 0;
        }
        v284[0] = v243[0];
        int v285 = v244;
        __int16 v286 = v245;
        int v200 = *(_DWORD *)(a2 + 180);
        uint64_t v61 = BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)v284, 0);
        uint64_t v62 = v61;
        uint64_t v63 = v251;
        double v64 = (v219 - *(double *)&v251) * 0.00000190734863;
        if (v64 > 0.0)
        {
          double v65 = 0.5;
          goto LABEL_94;
        }
        if (v64 < 0.0)
        {
          double v65 = -0.5;
LABEL_94:
          int v66 = (int)(v64 + v65);
        }
        else
        {
          int v66 = 0;
        }
        double v67 = *(double *)&v251 + (double)v66 * 524288.0 - *(double *)(v61 + 8);
        double v219 = *(double *)&v251 + (double)v66 * 524288.0;
        double v241 = 0.0;
        unsigned int v68 = *(_DWORD *)(a2 + 188);
        if ((v68 & 0x10) != 0) {
          double v69 = -v67;
        }
        else {
          double v69 = v67;
        }
        double v221 = v69;
        BOOL v236 = 0;
        if (v60 && (v68 & 4) != 0)
        {
          *(_DWORD *)uint64_t v60 = v201;
          *(double *)(v60 + 40) = v69;
          *(void *)(v60 + 48) = v63;
        }
        unsigned int v70 = v246;
        BOOL v72 = (v246 & 0x40) == 0 && *(unsigned char *)(v61 + 76) == 0;
        if (*(unsigned char *)(v61 + 248)
          && (v246 & 0x10000) != 0
          && *((float *)&v252 + 1) < 0.0000000144999995
          && *(double *)(v61 + 240) < 0.0000000144999995
          && (v73 = *(_DWORD *)(v61 + 60), v78 = v201 >= v73, unsigned int v74 = v201 - v73, v74 != 0 && v78)
          && v74 <= (__int16)v200 + 1)
        {
          double v146 = *(double *)(v61 + 232);
          float v147 = (v146 - *(float *)&v252) * 1000000000.0;
          BOOL v135 = fabsf(v147) < 10.0;
          BOOL v75 = v135;
          double v148 = (v146 + *(float *)&v252) * 0.5;
          if (v135) {
            double v76 = v148;
          }
          else {
            double v76 = *(float *)&v252;
          }
        }
        else
        {
          BOOL v75 = 0;
          double v76 = *(float *)&v252;
        }
        float v77 = 24.0;
        if ((**(_DWORD **)(a2 + 168) - 1) < 2) {
          float v77 = 30.0;
        }
        BOOL v78 = (v284[0] + 122) >= 5u && (v284[0] - 76) >= 5u;
        if (v78) {
          float v79 = v77;
        }
        else {
          float v79 = 35.0;
        }
        if (v72)
        {
          int v80 = 1;
        }
        else
        {
          int v80 = *(_DWORD *)(a2 + 156);
          if (v80)
          {
            BOOL v192 = v75;
            BOOL v194 = v72;
            v281 = v283;
            LOBYTE(v282) = 19;
            memset(v283, 0, 76);
            int v81 = 1;
            v283[v286 >> 5] |= 1 << v286;
            long long v193 = *(_OWORD *)a1;
            BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v280[1]);
            v279 = &off_270EC40B0;
            *(void *)&v280[1] = &unk_270EC40E8;
            v280[0] = v193;
            long long v271 = *(_OWORD *)(a2 + 88);
            uint64_t v272 = *(void *)(a2 + 104);
            BlueFin::GlPeNavUtil::ComputeRrateResidVec((uint64_t)&v279, (uint64_t)&v281);
            unsigned int v68 = *(_DWORD *)(a2 + 188);
            if (*(_DWORD *)(a2 + 156) >= 0xBu) {
              int v81 = (fabs(*(double *)(*(void *)&v273 + 8)) < 5.0) & (v68 >> 5);
            }
            BOOL v82 = 0;
            if ((v81 | ((*(_DWORD *)(a2 + 188) & 4u) >> 2)) == 1)
            {
              BOOL v83 = v192;
              BOOL v72 = v194;
              if (*((float *)&v252 + 3) > v79) {
                BOOL v82 = DWORD2(v248) > 0x1388;
              }
            }
            else
            {
              BOOL v83 = v192;
              BOOL v72 = v194;
            }
            int v80 = v83 & (v70 >> 8) & v82;
          }
        }
        int v84 = *(_DWORD *)(v62 + 60);
        if ((v68 & 0x200) != 0)
        {
          int v85 = DWORD1(v247) == 4 && v225 == 0;
        }
        else
        {
          int v85 = 0;
          if (DWORD1(v247) <= 4 && ((1 << SBYTE4(v247)) & 0x19) != 0) {
            int v85 = v225 < 2;
          }
        }
        if (((~v85 | (v68 >> 2)) & v80) == 1
          && (int v87 = v201 - v84, (int)(v201 - v84) <= (__int16)v200 + 1)
          && DWORD2(v248) >= *(_DWORD *)(v62 + 84)
          && (v70 & 0x100) != 0)
        {
          unsigned int v88 = v246;
          if ((v246 & 0x1000) != 0) {
            double v93 = v69;
          }
          else {
            double v93 = v76 * 0.299792458 * 1000000.0 * (double)v87;
          }
          if (!v72) {
            double v69 = v93;
          }
          if (v201 == v84) {
            int v94 = 1;
          }
          else {
            int v94 = v201 - v84;
          }
          double v95 = v69 - v76 * 0.299792458 * 1000000.0 * (double)v87;
          double v96 = (double)v94 * 0.001;
          if (!v72) {
            goto LABEL_265;
          }
          double v97 = 10.0;
          if ((*(void *)&v68 & 0x100000) == 0) {
            double v97 = 3.0;
          }
          v229 |= 0x100u;
          double v241 = v95 / v96 * 3.33564095;
          if (fabs(v241) > v97) {
            int v98 = 1;
          }
          else {
LABEL_265:
          }
            int v98 = 0;
          a3 = v198;
          if (fabs(v95) > 3.0)
          {
LABEL_269:
            double v222 = v218 * 299792.458;
            double v223 = *((float *)&v251 + 2) * v15;
            double v224 = v223;
            double v219 = *(double *)&v251;
            int v225 = 0;
            BOOL v230 = (v88 & 0x40) != 0;
            double v233 = *((float *)&v252 + 1);
            char v234 = BYTE2(v88) & 1;
          }
          else
          {
            BOOL v195 = v72;
            if ((v98 | (*(_DWORD *)(a2 + 156) > 9u) & ~BlueFin::stPeSigMeasKF::IsRRValidForNav((BlueFin::stPeSigMeasKF *)&v218)) == 1)
            {
              unsigned int v88 = v246;
              goto LABEL_269;
            }
            double v152 = v224 * v224;
            if (v195)
            {
              if (*((float *)&v251 + 3) != 3.4028e38) {
                double v152 = v152 + (float)(*((float *)&v251 + 3) * *((float *)&v251 + 3));
              }
              double v154 = 0.99;
              double v153 = 0.00012;
            }
            else
            {
              double v153 = v96 * (*((float *)&v252 + 1) * v15) * (v96 * (*((float *)&v252 + 1) * v15));
              double v152 = v152 + v153;
              double v154 = 0.95;
            }
            if (v152 >= v153) {
              double v153 = v152;
            }
            double v155 = v222 - v69;
            double v156 = v218 * 299792.458;
            if (vabdd_f64(v222 - v69, v218 * 299792.458) <= 149896.229)
            {
              double v159 = v218 * 299792.458;
            }
            else
            {
              double v157 = v155 / 299792.458;
              if (v155 / 299792.458 <= 0.0)
              {
                double v158 = 0.0;
                if (v155 / 299792.458 < 0.0) {
                  double v158 = ceil(v157 + -0.5);
                }
              }
              else
              {
                double v158 = floor(v157 + 0.5);
              }
              double v155 = v155 - v158 * 299792.458;
              double v160 = v156 / 299792.458;
              double v161 = ceil(v156 / 299792.458 + -0.5);
              if (v156 / 299792.458 >= 0.0) {
                double v161 = 0.0;
              }
              double v162 = floor(v160 + 0.5);
              if (v160 > 0.0) {
                double v163 = v162;
              }
              else {
                double v163 = v161;
              }
              double v159 = v156 + v163 * -299792.458;
            }
            double v164 = *((float *)&v251 + 2) * v15;
            if (v164 * v164 / (v164 * v164 + v153) <= v154) {
              double v154 = v164 * v164 / (v164 * v164 + v153);
            }
            double v165 = (1.0 - v154) * v159 + v154 * v155;
            if (v165 < 0.0 || v165 > 299792.458) {
              double v165 = v165 - floor(v165 / 299792.458) * 299792.458;
            }
            double v222 = v165;
            double v166 = -(v165 - v218 * 299792.458);
            if (fabs(v166) > 149896.229)
            {
              double v167 = v166 / 299792.458;
              if (v167 > 0.0)
              {
                double v168 = 0.5;
                goto LABEL_308;
              }
              if (v167 < 0.0)
              {
                double v168 = -0.5;
LABEL_308:
                int v169 = (int)(v167 + v168);
              }
              else
              {
                int v169 = 0;
              }
              double v222 = v165 + (double)v169 * 299792.458;
              double v166 = -(v222 - v218 * 299792.458);
            }
            double v170 = sqrt(v164 * v164 * ((1.0 - v154) * (1.0 - v154)) + v154 * v154 * v153);
            double v224 = v170;
            int v171 = *(_DWORD *)(a2 + 188);
            if ((v171 & 8) != 0 && v284[0] >= 0x34u && v284[0] <= 0x41u && v170 < 0.5) {
              double v224 = 0.5;
            }
            double v223 = *((float *)&v251 + 2) * v15;
            if (fabs(v166) > 90.0)
            {
              if (v166 <= -v164)
              {
                if ((v171 & 4) == 0)
                {
                  double v222 = v218 * 299792.458;
                  double v224 = *((float *)&v251 + 2) * v15;
                  double v219 = *(double *)&v251;
                  int v225 = 0;
                }
              }
              else if ((v171 & 4) == 0)
              {
                DWORD1(v247) = 4;
              }
            }
            unsigned int v88 = v246;
            BOOL v230 = (v246 & 0x40) != 0;
            BOOL v236 = (v246 & 0x1000) != 0;
            double v233 = *((float *)&v252 + 1);
            char v234 = BYTE2(v246) & 1;
            ++v225;
          }
        }
        else
        {
          double v222 = v218 * 299792.458;
          double v223 = *((float *)&v251 + 2) * v15;
          double v224 = v223;
          double v219 = *(double *)&v251;
          int v225 = 0;
          unsigned int v88 = v246;
          BOOL v230 = (v246 & 0x40) != 0;
          double v233 = *((float *)&v252 + 1);
          char v234 = BYTE2(v246) & 1;
          a3 = v198;
        }
        if ((v88 & 0x100000) == 0)
        {
          char v235 = 0;
          char v237 = 0;
          unsigned int v89 = *(_DWORD *)(a2 + 188);
          goto LABEL_178;
        }
        LOBYTE(v273) = v243[0];
        HIDWORD(v273) = v244;
        LOWORD(v274[0]) = v245;
        uint64_t v90 = BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)&v273, 0);
        double v91 = (v220 - *((double *)v253 + 1)) * 0.00000190734863;
        if (v91 > 0.0)
        {
          double v92 = 0.5;
          goto LABEL_168;
        }
        if (v91 < 0.0)
        {
          double v92 = -0.5;
LABEL_168:
          int v99 = (int)(v91 + v92);
        }
        else
        {
          int v99 = 0;
        }
        double v100 = *((double *)v253 + 1) + (double)v99 * 524288.0 - *(double *)(v90 + 16);
        double v220 = *((double *)v253 + 1) + (double)v99 * 524288.0;
        unsigned int v89 = *(_DWORD *)(a2 + 188);
        double v101 = -v100;
        if ((v89 & 0x10) == 0) {
          double v101 = v100;
        }
        char v237 = 0;
        if (*(unsigned char *)(v90 + 249))
        {
          unsigned int v102 = *(_DWORD *)(v90 + 60);
          BOOL v78 = v201 >= v102;
          unsigned int v103 = v201 - v102;
          if (v103 != 0 && v78 && v103 <= *(_DWORD *)(a2 + 180) + 1 && !v236)
          {
            double v221 = v101;
            char v237 = 1;
          }
        }
        char v235 = 1;
LABEL_178:
        if ((*(_DWORD *)&v42 & (v89 >> 17)) == 1 && v255 == 2)
        {
          unsigned __int8 v203 = v254[0];
          BlueFin::GlSignalIdSet::GetSignalIdSetForSv((char *)&v268, &v203, (uint64_t)&v279);
          BlueFin::GlSetBase::Remove((uint64_t)&v279, (__int16)v256);
          LOBYTE(v281) = v280[0];
          memcpy(&v282, v279, 4 * LOBYTE(v280[0]));
          WORD1(v281) = 0;
          BYTE1(v281) = 0;
          HIDWORD(v281) = v282;
          while (1)
          {
            while (1)
            {
              BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v281);
              if (BYTE1(v281) == v281) {
                goto LABEL_200;
              }
              if ((v246 & 2) != 0 && v227 != -1 && (DWORD1(v247) - 1) <= 1)
              {
                if (WORD1(v281) >= 0x23FuLL) {
                  goto LABEL_346;
                }
                double v104 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v281);
                char v105 = *v104;
                LODWORD(v104) = v104[1];
                LOBYTE(v271) = v105;
                DWORD1(v271) = v104;
                WORD4(v271) = WORD1(v281);
                uint64_t v106 = BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)&v271, 0);
                BlueFin::stPeSigMeasKF::stPeSigMeasKF((uint64_t)&v273, v106);
                if (v275 != -1)
                {
                  int v107 = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)&v271, 0, 0);
                  if ((v107[12] & 2) != 0 && (*((_DWORD *)v107 + 5) - 1) <= 1) {
                    break;
                  }
                }
              }
            }
            double v108 = v15;
            double v109 = v13;
            float v110 = v8;
            float v111 = *((float *)v107 + 22);
            int v112 = v275;
            double v113 = v273;
            double v114 = (*(double (**)(_DWORD *, long long *))(*(void *)a1[1] + 80))(a1[1], &v271);
            int v115 = v227;
            double v116 = v218;
            double v117 = (*(double (**)(_DWORD *, unsigned char *))(*(void *)a1[1] + 80))(a1[1], v254);
            (*(void (**)(_DWORD *, unsigned char *, void))(*(void *)a1[1] + 88))(a1[1], v254, 0);
            if (WORD4(v271) >= 0x23Fu) {
              break;
            }
            uint64_t v119 = BlueFin::GlSvId::s_aucSvId2gnss[v271];
            double v120 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * SDWORD1(v271) - SDWORD1(v271) + v119]];
            if (v119 == 2)
            {
              double v121 = (double)(char)(v271 - 59);
              if (v271 - 52 >= 0xE) {
                double v121 = -8.0;
              }
              double v120 = v120 + v121 * 562500.0;
            }
            if (v256 >= 0x23Fu) {
              break;
            }
            uint64_t v122 = BlueFin::GlSvId::s_aucSvId2gnss[v254[0]];
            double v123 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v255 - v255 + v122]];
            if (v122 == 2)
            {
              double v124 = (double)(char)(v254[0] - 59);
              if (v254[0] - 52 >= 0xE) {
                double v124 = -8.0;
              }
              double v123 = v123 + v124 * 562500.0;
            }
            double v125 = v120 * v120;
            double v126 = v123 * v123;
            double v127 = v125 - v126;
            double v128 = v125 / (v125 - v126);
            double v129 = v126 / v127;
            double v130 = v128 * (v113 + (double)v112 - v114 / 299792.458)
                 - v129 * (v116 + (double)v115 - v117 / 299792.458 + v118 / 299792.458);
            int v227 = vcvtmd_s64_f64(v130);
            double v218 = v130 - (double)v227;
            *(float *)&double v130 = sqrt(v129 * v129 * *((float *)&v251 + 2) * *((float *)&v251 + 2) + v128
                                                                                               * v128
                                                                                               * v111
                                                                                               * v111);
            DWORD2(v251) = LODWORD(v130);
            char v239 = 1;
            char v277 = 1;
            BlueFin::GlPeMsmtMgr::SetPeMeas((uint64_t)*a1, (uint64_t)&v273, 0);
            float v8 = v110;
            double v13 = v109;
            double v15 = v108;
            int32x2_t v14 = v196;
          }
          v188 = "IsValid()";
          DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
          v189 = "glsignalid.h";
          int v190 = 650;
          goto LABEL_347;
        }
LABEL_200:
        if (v244 == 3 || v244 == 0)
        {
          long long v132 = (void **)a3;
          if ((v246 & 0x20) != 0 || (long long v132 = v191, (v246 & 0x30) == 0x10)) {
            *(_DWORD *)(**v132 + ((v17 >> 3) & 0x1C)) |= 1 << v17;
          }
        }
        if (v202)
        {
          int v133 = *(_DWORD *)(a2 + 188);
          unsigned int v134 = v229 & 0xFFFFFF79 | 6;
          if (*((float *)&v252 + 1) > 0.0000000158999995) {
            unsigned int v134 = v229 | 0x86;
          }
          unsigned int v229 = v134;
          if ((v133 & 0x44) == 0 && (v133 & 2) == 0)
          {
            BOOL v135 = *((float *)&v252 + 1) > 0.0000000158999995 && *((float *)&v252 + 3) < 16.0;
            if (v135)
            {
              v134 &= 0xFFFFFFF9;
              unsigned int v229 = v134;
              LOBYTE(v242) = 13;
            }
          }
          if (v243[0] - 33 <= 0x12) {
            DWORD1(v247) = 2 * (*((float *)&v252 + 3) >= 35.0);
          }
          uint64_t v136 = 0;
          uint64_t v137 = a1[2];
          uint64_t v138 = 0x3FFFFFFFFFFFFFB0;
          while (LOBYTE(v137[v136 + 1158]) != v243[0])
          {
            v136 += 3;
            v138 += 2;
            if (!(v138 * 4)) {
              goto LABEL_227;
            }
          }
          if (*(double *)&v137[v138 + 1158] == 0.0)
          {
            int v139 = 4;
LABEL_233:
            DWORD1(v247) = v139;
            goto LABEL_234;
          }
LABEL_227:
          uint64_t v140 = 0;
          uint64_t v141 = 0x3FFFFFFFFFFFFFB0;
          while (LOBYTE(v137[v140 + 1158]) != v243[0])
          {
            v140 += 3;
            v141 += 2;
            if (!(v141 * 4)) {
              goto LABEL_234;
            }
          }
          if (*(double *)&v137[v141 + 1158] == 1.0)
          {
            int v139 = 2;
            goto LABEL_233;
          }
LABEL_234:
          if ((v133 & 0x2000) != 0 && v238 - 76 <= 0x3E)
          {
            double v142 = -(v232 * 1000000000.0);
            if (v232 * 1000000000.0 >= 0.0) {
              double v142 = v232 * 1000000000.0;
            }
            if (v142 < 150.0 && v225 <= 9)
            {
              v134 &= 0xFFFFFFF9;
              unsigned int v229 = v134;
            }
          }
          if ((v133 & 0x4000) != 0)
          {
            if (v244)
            {
              if ((BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v244
                                                                                         - v244
                                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[v243[0]]]
                                - 13) >= 2)
              {
                v134 &= 0xFFFFFFC9;
                unsigned int v229 = v134;
              }
              goto LABEL_248;
            }
            if ((v133 & 0x8000) == 0)
            {
LABEL_252:
              if ((v246 & 0xC) != 0 || v244 >= 1)
              {
                char v199 = 0;
                *((_DWORD *)a1 + 88) = v201;
              }
              else if (*((float *)&v252 + 3) >= v8)
              {
                int v197 = v254[0];
                float v8 = *((float *)&v252 + 3);
              }
              BlueFin::GlPeMsmtMgr::ValidatePeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)v254);
              goto LABEL_258;
            }
          }
          else
          {
LABEL_248:
            if ((v133 & 0x8000) == 0
              || v244
              && (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v244
                                                                                       - v244
                                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[v243[0]]]
                              - 13) > 1)
            {
              goto LABEL_252;
            }
          }
          unsigned int v229 = v134 & 0xFFFFFFC9;
          goto LABEL_252;
        }
LABEL_258:
        BlueFin::GlPeMsmtMgr::SetPeMeas((uint64_t)*a1, (uint64_t)&v218, 0);
        BlueFin::GlPeMsmtMgr::SetMeMeas((uint64_t)*a1, (uint64_t)v243);
        if ((*(unsigned char *)(a2 + 188) & 4) == 0
          && (((unint64_t)*(unsigned int *)(v266 + 4 * ((__int16)v256 >> 5)) >> (v256 & 0x1F)) & 1) != 0)
        {
          if (v207[4] >= 2u)
          {
            if (DWORD1(v216) == -7200001)
            {
              *((float *)&v216 + 2) = (*(double *)((char *)&v209 + 4) - *(double *)&v207[12]) * v15;
              HIDWORD(v216) = 0;
              int v145 = v216;
            }
            else
            {
              int v145 = v216;
              if ((v216 - DWORD1(v216)) < 0x1389)
              {
                float v149 = (float)(v216 - DWORD1(v216)) * 0.001;
                float v150 = *((float *)&v216 + 2) + (float)(v149 * *((float *)&v216 + 3));
                float v144 = (*(double *)((char *)&v209 + 4) - *(double *)&v207[12]) * v15;
                float v151 = v144 - v150;
                *((float *)&v216 + 2) = v150 + (float)(v151 * 0.5);
                *((float *)&v216 + 3) = *((float *)&v216 + 3) + (float)((float)(0.2 / v149) * v151);
              }
              else
              {
                *((float *)&v216 + 2) = (*(double *)((char *)&v209 + 4) - *(double *)&v207[12]) * v15;
                HIDWORD(v216) = 0;
              }
            }
            DWORD1(v216) = v145;
            int v217 = 1120403456;
          }
          BlueFin::GlPeMsmtMgr::SetPeGridMeas((uint64_t)*a1, (uint64_t)v204);
        }
        goto LABEL_37;
      }
      __int16 v242 = 2056;
      BOOL v48 = (v43 & 0x280) == 640;
      if ((v43 & 2) != 0 || (v43 & 0x280) == 0x280)
      {
        if ((v246 & 0x4000) != 0 && *((float *)&v252 + 3) >= 9.0) {
          goto LABEL_45;
        }
        if ((v246 & 0x4000) != 0) {
          char v44 = 12;
        }
        else {
          char v44 = 10;
        }
        LOBYTE(v242) = v44;
        HIBYTE(v242) = v44;
        if ((v43 & 4) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        char v44 = 8;
        if ((v43 & 4) == 0) {
          goto LABEL_33;
        }
      }
      if ((v246 & 0x4000) != 0) {
        goto LABEL_62;
      }
      char v44 = 10;
    }
    else
    {
      char v44 = 45;
    }
    LOBYTE(v242) = v44;
    HIBYTE(v242) = v44;
LABEL_33:
    uint64_t v45 = BlueFin::GlSignalIdArray::Get(*((void *)*a1 + 2397), (uint64_t)v254);
    if (v45) {
      *(unsigned char *)(v45 + 448) = v44;
    }
    char v46 = HIBYTE(v242);
    uint64_t v47 = BlueFin::GlSignalIdArray::Get(*((void *)*a1 + 2397), (uint64_t)v254);
    if (v47) {
      *(unsigned char *)(v47 + 449) = v46;
    }
    goto LABEL_37;
  }
  int v197 = 0;
  float v8 = -10.0;
  char v199 = 1;
LABEL_3:
  v279 = (uint64_t (**)(BlueFin::GlPeNavUtil *__hidden, float))((char *)v280 + 4);
  LOBYTE(v280[0]) = 19;
  memset((char *)v280 + 4, 0, 48);
  memset((char *)&v280[3] + 4, 0, 28);
  char v9 = (BlueFin::GlPeMsmtMgr *)*a1;
  LOBYTE(v218) = *((unsigned char *)*a1 + 16);
  memcpy(&v219, *((const void **)v9 + 1), 4 * LOBYTE(v218));
  WORD1(v218) = 0;
  BYTE1(v218) = 0;
  HIDWORD(v218) = LODWORD(v219);
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v218);
  if (BYTE1(v218) == LOBYTE(v218))
  {
    int v10 = 0;
    double v11 = 0.0;
    double v12 = 0.0;
  }
  else
  {
    __int16 v172 = 0;
    unsigned __int16 v173 = 0;
    double v12 = 0.0;
    double v11 = 0.0;
    do
    {
      if (WORD1(v218) >= 0x23FuLL) {
        goto LABEL_346;
      }
      v174 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v218);
      char v175 = *v174;
      LODWORD(v174) = v174[1];
      v204[0] = v175;
      int v205 = (int)v174;
      __int16 v206 = WORD1(v218);
      uint64_t v176 = BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)*a1, (const BlueFin::GlSignalId *)v204, 0);
      BlueFin::stPeSigMeasKF::stPeSigMeasKF((uint64_t)&v273, v176);
      if (v276)
      {
        ++v172;
        double v177 = v278;
        if (v278 != 0.0)
        {
          *((_DWORD *)v279 + (v206 >> 5)) |= 1 << v206;
          ++v173;
          double v178 = v177 - v11;
          double v11 = v11 + (v177 - v11) / (double)v173;
          double v12 = v12 + (v177 - v11) * v178;
        }
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v218);
    }
    while (BYTE1(v218) != LOBYTE(v218));
    if (v173 <= ((unsigned __int16)(v172 & 0xFFFE) >> 1))
    {
      int v10 = 0;
    }
    else
    {
      double v12 = sqrt(v12 / (double)v173);
      int v10 = 1;
    }
  }
  LOBYTE(v273) = v280[0];
  memcpy(v274, v279, 4 * LOBYTE(v280[0]));
  WORD1(v273) = 0;
  BYTE1(v273) = 0;
  HIDWORD(v273) = v274[0];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v273);
  if (BYTE1(v273) != LOBYTE(v273))
  {
    double v179 = v12 + v12;
    while (WORD1(v273) < 0x23FuLL)
    {
      v180 = (BlueFin::GlPeMsmtMgr *)*a1;
      v181 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v273);
      char v182 = *v181;
      LODWORD(v181) = v181[1];
      LOBYTE(v218) = v182;
      HIDWORD(v218) = v181;
      LOWORD(v219) = WORD1(v273);
      uint64_t v183 = BlueFin::GlPeMsmtMgr::AccessPeMeas(v180, (const BlueFin::GlSignalId *)&v218, 0);
      if (!v10 || vabdd_f64(*(double *)(v183 + 288), v11) > v179)
      {
        *(_DWORD *)(v183 + 72) &= ~0x20u;
        *(unsigned char *)(v183 + 305) = 18;
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v273);
      if (BYTE1(v273) == LOBYTE(v273)) {
        goto LABEL_338;
      }
    }
LABEL_346:
    v188 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    v189 = "glsignalid.h";
    int v190 = 577;
LABEL_347:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v189, v190, v188);
  }
LABEL_338:
  (*(void (**)(_DWORD *, _DWORD *, uint64_t, void, void, double))(*(void *)a1[1] + 120))(a1[1], *a1 + 46, a2 + 88, *(unsigned int *)(a2 + 152), v201, *(double *)(a2 + 136));
  if ((((v197 - 1) < 0xBC) & v199) == 1 && v8 > 30.0)
  {
    unsigned int v184 = *((_DWORD *)a1 + 88);
    if (v184 == -1 || (BOOL v78 = v201 >= v184, v185 = v201 - v184, v185 != 0 && v78) && v185 >= 0x249F1) {
      **(unsigned char **)(a3 + 40) = v197;
    }
  }
  v186 = (BlueFin::GlPeMsmtMgr *)*a1;
  BOOL result = BlueFin::GlSignalIdSet::CntSecondarySignalSvIdSet((BlueFin::GlSignalIdSet *)v262, 2);
  *((unsigned char *)v186 + 56601) = result;
  return result;
}

uint64_t BlueFin::stPeSigMeasKF::stPeSigMeasKF(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 78) = *(_DWORD *)(a2 + 78);
  *(void *)(a1 + 84) = *(void *)(a2 + 84);
  uint64_t v4 = *(int *)(a2 + 224);
  if (v4)
  {
    memcpy((void *)(a1 + 96), (const void *)(a2 + 96), 32 * v4);
    LODWORD(v4) = *(_DWORD *)(a2 + 224);
  }
  int v5 = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 224) = v4;
  *(_DWORD *)(a1 + 228) = v5;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 252) = *(unsigned char *)(a2 + 252);
  int v6 = *(_DWORD *)(a2 + 256);
  *(_WORD *)(a1 + 260) = *(_WORD *)(a2 + 260);
  *(_DWORD *)(a1 + 256) = v6;
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  return a1;
}

unsigned __int8 *BlueFin::GlSignalIdSet::GetPrimarySignalSvIdSet@<X0>(BlueFin::GlSignalIdSet *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  uint64_t v3 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  BOOL result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    unsigned __int8 v8 = *((unsigned char *)this + 8);
    memcpy(v12, *(const void **)this, 4 * v8);
    unsigned __int16 v10 = 0;
    unsigned __int8 v9 = 0;
    int v11 = v12[0];
    for (BOOL result = BlueFin::GlSetIterator::operator++(&v8); v9 != v8; BOOL result = BlueFin::GlSetIterator::operator++(&v8))
    {
      if (v10 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 593, "GetSignalIndexFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 593, "usIndex < NUM_SIGNAL_IDS");
      }
      int v5 = *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v10 + 1);
      if (v5 == 3 || v5 == 0)
      {
        unint64_t v7 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v10);
        *(_DWORD *)(v3 + ((v7 >> 3) & 0x1C)) |= 1 << v7;
      }
    }
  }
  return result;
}

__n128 BlueFin::GlPeMsmtMgr::SetMeMeas(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = BlueFin::GlSignalIdArray::Get(*(void *)(a1 + 19176), a2);
  if (!v3)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 896, "SetMeMeas", (char)"potMePeMeas != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 896, "potMePeMeas != nullptr");
  }
  if (v3 != a2)
  {
    *(unsigned char *)uint64_t v3 = *(unsigned char *)a2;
    *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v3 + 8) = *(_WORD *)(a2 + 8);
  }
  *(_OWORD *)(v3 + 12) = *(_OWORD *)(a2 + 12);
  long long v4 = *(_OWORD *)(a2 + 28);
  long long v5 = *(_OWORD *)(a2 + 44);
  long long v6 = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(v3 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(v3 + 60) = v6;
  *(_OWORD *)(v3 + 44) = v5;
  *(_OWORD *)(v3 + 28) = v4;
  __n128 result = *(__n128 *)(a2 + 92);
  long long v8 = *(_OWORD *)(a2 + 108);
  long long v9 = *(_OWORD *)(a2 + 124);
  *(unsigned char *)(v3 + 140) = *(unsigned char *)(a2 + 140);
  *(_OWORD *)(v3 + 124) = v9;
  *(_OWORD *)(v3 + 108) = v8;
  *(__n128 *)(v3 + 92) = result;
  return result;
}

uint64_t BlueFin::GlPeMsmtMgr::ValidatePeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2)
{
  uint64_t result = BlueFin::GlSignalIdArray::Get(*((void *)this + 2397), (uint64_t)a2);
  if (result) {
    *(_DWORD *)(*((void *)this + 23) + 4 * (*((__int16 *)a2 + 4) >> 5)) |= 1 << *((_WORD *)a2 + 4);
  }
  return result;
}

uint64_t BlueFin::GlPeBitMon::CheckBitValidity(uint64_t result, unsigned __int8 *a2, int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(result + 288);
  int v7 = *a2;
  while (1)
  {
    uint64_t v8 = v6 + v5;
    if (*(unsigned __int8 *)(v6 + v5 + 12) == v7) {
      break;
    }
    v5 += 16;
    if (v5 == 288)
    {
      uint64_t v8 = 0;
      break;
    }
  }
  int v9 = *((_DWORD *)a2 + 3);
  *a4 = (v9 & 8) != 0;
  int v10 = v9 & 4;
  *a5 = v10 != 0;
  BOOL v11 = *a4;
  if (!*a4 && v10 == 0)
  {
    if (v8)
    {
      int v14 = a3 - *(_DWORD *)(v8 + 8);
      if (v14 <= 179999)
      {
        double v15 = (*(double *)v8 - *((double *)a2 + 7)) * 1000.0;
        if (v15 <= 0.0)
        {
          double v16 = 0.0;
          if (v15 < 0.0) {
            double v16 = ceil(v15 + -0.5);
          }
        }
        else
        {
          double v16 = floor(v15 + 0.5);
        }
        float v17 = v15 - v16;
        if (fabsf((float)(*((float *)a2 + 24) * (float)v14) + v17) < 0.25)
        {
          *a4 = *(unsigned char *)(v8 + 13);
          *a5 = *(unsigned char *)(v8 + 14);
        }
      }
    }
  }
  else
  {
    if (!v8)
    {
      uint64_t v13 = 0;
      uint64_t v8 = v6;
      do
      {
        if (*(_DWORD *)(v8 + 8) > *(_DWORD *)(v6 + v13 + 24)) {
          uint64_t v8 = v6 + v13 + 16;
        }
        v13 += 16;
      }
      while (v13 != 272);
    }
    *(unsigned char *)(v8 + 12) = v7;
    *(_DWORD *)(v8 + 8) = a3;
    *(void *)uint64_t v8 = *((void *)a2 + 7);
    *(unsigned char *)(v8 + 13) = v11;
    *(unsigned char *)(v8 + 14) = *a5;
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeComputeZRH::RecomputeIntegers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v37 = v3;
  unint64_t v5 = v4;
  uint64_t v7 = v6;
  int v9 = v8;
  uint64_t v10 = v2;
  *(void *)&v84[5550] = *MEMORY[0x263EF8340];
  BlueFin::GlPeMsmtMgr::Init_IntPr(*(void *)(v2 + 4320));
  uint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v9);
  if (!result) {
    return result;
  }
  double v12 = &v83;
  uint64_t v13 = 100;
  do
  {
    *((unsigned char *)v12 - 8) = 0;
    *((_DWORD *)v12 - 1) = -1;
    *(_WORD *)double v12 = 575;
    v12 += 7;
    --v13;
  }
  while (v13);
  float v77 = &v79;
  uint64_t v14 = 4;
  unsigned __int8 v78 = 4;
  long long v79 = 0uLL;
  LODWORD(v62) = v9[8];
  memcpy(&v63, *(const void **)v9, 4 * v62);
  HIDWORD(v62) = v63;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v62);
  if (BYTE1(v62) == v62)
  {
    double v15 = &v79;
  }
  else
  {
    double v16 = v84;
    do
    {
      if (WORD1(v62) >= 0x23FuLL) {
        goto LABEL_37;
      }
      float v17 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v62);
      char v18 = *v17;
      LODWORD(v17) = v17[1];
      LOBYTE(v65) = v18;
      HIDWORD(v65) = v17;
      LOWORD(v66) = WORD1(v62);
      uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v10 + 4320), (const BlueFin::GlSignalId *)&v65, 0);
      *(void *)(v16 - 50) = 0;
      *(void *)(v16 - 42) = 0;
      *(void *)(v16 - 30) = 0xFFFFFFFF00000000;
      *((_WORD *)v16 - 1) = 0;
      *double v16 = 0;
      *(v16 - 18) = 0;
      *(_DWORD *)(v16 - 14) = -1;
      *((_WORD *)v16 - 5) = 575;
      *(_DWORD *)(v16 - 34) = v37;
      if (v16 - 18 != (unsigned char *)&v65)
      {
        *(v16 - 18) = (_BYTE)v65;
        *(_DWORD *)(v16 - 14) = HIDWORD(v65);
        *((_WORD *)v16 - 5) = v66;
      }
      *(void *)(v16 - 50) = *(void *)(PeMeas + 32);
      *(_DWORD *)(v16 - 6) = 0;
      *(_DWORD *)(v16 - 22) = *(_DWORD *)(PeMeas + 68);
      uint64_t v60 = &v61[4];
      v61[0] = 4;
      *(void *)&v61[4] = 0;
      *(void *)&v61[12] = 0;
      BlueFin::GlSetBase::OperatorLeftShift((uint64_t)&v77, (BlueFin::GlSetBase *)&v60, 1u);
      BlueFin::GlSetBase::operator=((uint64_t)&v77, (uint64_t)&v60);
      long long v79 = *(_OWORD *)&v61[4];
      double v15 = (long long *)v77;
      *(_DWORD *)v77 |= 1u;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v62);
      v16 += 56;
    }
    while (BYTE1(v62) != v62);
    uint64_t v14 = v78;
  }
  v75[1] = 0x700000007;
  memset(v76, 0, 32);
  v76[3] = 0u;
  v75[0] = v76;
  v76[2] = v5;
  int v20 = **(_DWORD **)(v10 + 4336);
  double v65 = v75;
  uint64_t v66 = v7;
  uint64_t v67 = 0;
  int v68 = v20;
  uint64_t v69 = 0x400C900000001;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v74 = 0x4008000000000000;
  uint64_t v62 = v64;
  uint64_t v63 = 0x6400000000;
  bzero(v64, 0x328uLL);
  uint64_t v60 = &v61[8];
  *(void *)uint64_t v61 = 0x6400000000;
  bzero(&v61[8], 0x328uLL);
  double v56 = &v57;
  float v57 = v59;
  char v58 = 8;
  memset(v59, 0, 32);
  v52[0] = &v62;
  v52[1] = &v60;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  int v21 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v9);
  unsigned int v22 = 0;
  long long v23 = (long long *)((char *)v15 + 4 * v14 - 4);
  do
  {
    if (*(_DWORD *)v23)
    {
      unsigned int v24 = *(_DWORD *)v23 - (((*(_DWORD *)v23 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v23 >> 2) & 0x9249249));
      unsigned int v22 = ((v24 + (v24 >> 3)) & 0xC71C71C7) + v22 - 63 * (((v24 + (v24 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    long long v23 = (long long *)((char *)v23 - 4);
  }
  while (v23 >= v15);
  if (v21 != (unsigned __int16)v22)
  {
    long long v34 = "rotSignalIdSet.Cnt() == otIndexSet.Cnt()";
    DeviceFaultNotify("glpe_computezrh.cpp", 2402, "RecomputeIntegers", (char)"rotSignalIdSet.Cnt() == otIndexSet.Cnt()");
    long long v35 = "glpe_computezrh.cpp";
    int v36 = 2402;
    goto LABEL_38;
  }
  if ((BlueFin::GlSetBase::Highest((BlueFin::GlSetBase *)&v77) & 0xFFFFFFFCuLL) >= 0x64)
  {
    long long v34 = "(GlIntU32)otIndexSet.Highest() < _DIM(aotSkfMeas)";
    DeviceFaultNotify("glpe_computezrh.cpp", 2403, "RecomputeIntegers", (char)"(GlIntU32)otIndexSet.Highest() < _DIM(aotSkfMeas)");
    long long v35 = "glpe_computezrh.cpp";
    int v36 = 2403;
LABEL_38:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v35, v36, v34);
  }
  (*(void (**)(uint64_t, void **, void *, unsigned char *, void **))(*(void *)v10 + 16))(v10, &v65, v52, v80, &v77);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v51, 0x13u, (const void **)v9);
  if (((unint64_t)*(unsigned int *)&v57[((unint64_t)v82 >> 3) & 0x1C] >> (v82 & 0x1F)))
  {
    bzero(__src, ((4 * v50 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(v77, ((4 * v78 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    unsigned __int8 v44 = v9[8];
    memcpy(v48, *(const void **)v9, 4 * v44);
    unsigned __int16 v46 = 0;
    unsigned __int8 v45 = 0;
    int v47 = v48[0];
    BlueFin::GlSetIterator::operator++(&v44);
    if (v45 != v44)
    {
      long long v25 = v80;
      while (v46 < 0x23FuLL)
      {
        long long v26 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v46;
        unint64_t v27 = *v26;
        LODWORD(v26) = (char)v26[1];
        v41[0] = v27;
        int v42 = (int)v26;
        __int16 v43 = v46;
        if ((*(unsigned int *)&v57[(v27 >> 3) & 0x1C] >> (v27 & 0x1F)))
        {
          GlCustomLog(14, "Failed to calculate integer for svId %d\n", v27);
        }
        else
        {
          uint64_t v28 = BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v10 + 4320), (const BlueFin::GlSignalId *)v41, 0);
          *(void *)long long v25 = 0;
          *((void *)v25 + 1) = 0;
          *(void *)(v25 + 20) = 0xFFFFFFFF00000000;
          *((_WORD *)v25 + 24) = 0;
          v25[50] = 0;
          v25[32] = 0;
          *((_DWORD *)v25 + 9) = -1;
          *((_WORD *)v25 + 20) = 575;
          *((_DWORD *)v25 + 4) = v37;
          if (v25 + 32 != v41)
          {
            v25[32] = v41[0];
            *((_DWORD *)v25 + 9) = v42;
            *((_WORD *)v25 + 20) = v43;
          }
          *(void *)long long v25 = *(void *)(v28 + 32);
          *((_DWORD *)v25 + 11) = 0;
          *((_DWORD *)v25 + 7) = *(_DWORD *)(v28 + 68);
          long long v38 = &v40;
          LOBYTE(v39) = 4;
          long long v40 = 0uLL;
          BlueFin::GlSetBase::OperatorLeftShift((uint64_t)&v77, (BlueFin::GlSetBase *)&v38, 1u);
          BlueFin::GlSetBase::operator=((uint64_t)&v77, (uint64_t)&v38);
          long long v79 = v40;
          *(_DWORD *)v77 |= 1u;
          v25 += 56;
          *((_DWORD *)__src + (v43 >> 5)) |= 1 << v43;
        }
        BlueFin::GlSetIterator::operator++(&v44);
        if (v45 == v44) {
          goto LABEL_28;
        }
      }
      goto LABEL_37;
    }
LABEL_28:
    (*(void (**)(uint64_t, void **, void *, unsigned char *, void **))(*(void *)v10 + 16))(v10, &v65, v52, v80, &v77);
  }
  unsigned __int8 v44 = v50;
  memcpy(v48, __src, 4 * v50);
  unsigned __int16 v46 = 0;
  unsigned __int8 v45 = 0;
  int v47 = v48[0];
  uint64_t result = BlueFin::GlSetIterator::operator++(&v44);
  if (v45 != v44)
  {
    uint64_t v29 = (int *)&v81;
    while (v46 < 0x23FuLL)
    {
      unint64_t v30 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v46);
      if ((*(unsigned int *)&v57[(v30 >> 3) & 0x1C] >> (v30 & 0x1F)))
      {
        GlCustomLog(14, "Failed to calculate integer for svId %d\n", *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v46));
      }
      else
      {
        int v31 = *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v46 + 1);
        int v32 = *v29;
        long long v33 = *(BlueFin::GlPeMsmtMgr **)(v10 + 4320);
        LOBYTE(v38) = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v46);
        HIDWORD(v38) = v31;
        unsigned __int16 v39 = v46;
        *(_DWORD *)(BlueFin::GlPeMsmtMgr::AccessPeMeas(v33, (const BlueFin::GlSignalId *)&v38, 0) + 64) = v32;
      }
      uint64_t result = BlueFin::GlSetIterator::operator++(&v44);
      v29 += 14;
      if (v45 == v44) {
        return result;
      }
    }
LABEL_37:
    long long v34 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    long long v35 = "glsignalid.h";
    int v36 = 577;
    goto LABEL_38;
  }
  return result;
}

uint64_t BlueFin::GlPeMsmtMgr::AccessPeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2, char a3)
{
  uint64_t v6 = BlueFin::GlSignalIdArray::Get(*((void *)this + 2397), (uint64_t)a2);
  if (!v6
    || (((unint64_t)*(unsigned int *)(*((void *)this + 1) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1) == 0
    && (a3 & 1) == 0)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 940, "AccessPeMeas", (char)"potMePeMeas != nullptr && (m_otValidMeasSignalIds.Has(rotSignalId) || bAllowInvalidMeas)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 940, "potMePeMeas != nullptr && (m_otValidMeasSignalIds.Has(rotSignalId) || bAllowInvalidMeas)");
  }
  return v6 + 144;
}

uint64_t BlueFin::GlSetBase::OperatorLeftShift(uint64_t this, BlueFin::GlSetBase *a2, unsigned int a3)
{
  if (a3 >= 0x20)
  {
    DeviceFaultNotify("glutl_set.cpp", 485, "OperatorLeftShift", (char)"(iShiftBits >> 5) == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_set.cpp", 485, "(iShiftBits >> 5) == 0");
  }
  int v3 = *(_DWORD **)this;
  unint64_t v4 = *(_DWORD **)a2;
  if (*(unsigned char *)(this + 8) != 1)
  {
    uint64_t v5 = (*(unsigned char *)(this + 8) - 1);
    do
    {
      v4[v5] = (v3[(v5 - 1)] >> (32 - a3)) & ~(-1 << a3) | (v3[v5] << a3);
      --v5;
    }
    while ((_BYTE)v5);
  }
  *unint64_t v4 = *v3 << a3;
  return this;
}

uint64_t BlueFin::GlPeMsmtMgr::Init_IntPr(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 19176);
  uint64_t v4 = v1 + 1152;
  unsigned __int16 v5 = *(_WORD *)(v1 + 1186) + 1;
  if (*(unsigned __int16 *)(v1 + 1184) > v5)
  {
    uint64_t v2 = this;
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v4, (uint64_t)v3);
      this = BlueFin::GlSignalIdArray::Get(*(void *)(v2 + 19176), (uint64_t)v3);
      *(_DWORD *)(this + 208) = -1;
    }
    while (v5 < *(unsigned __int16 *)(v4 + 32));
  }
  return this;
}

uint64_t BlueFin::GlSetBase::Highest(BlueFin::GlSetBase *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 8);
  __int16 v2 = 32 * v1;
  do
  {
    if (v1-- < 1) {
      return -1;
    }
    unsigned int v4 = *(_DWORD *)(*(void *)this + 4 * (unsigned __int16)v1);
    v2 -= 32;
  }
  while (!v4);
  __int16 v5 = 0;
  for (int i = 4; i != -1; --i)
  {
    int v7 = 1 << i;
    if (((~(-1 << v7) << v7) & v4) == 0) {
      LOWORD(v7) = 0;
    }
    v5 += v7;
    v4 >>= v7;
  }
  return (__int16)(v5 + v2);
}

unsigned __int8 *BlueFin::GlSignalIdSet::GetSecondarySignalSvIdSet@<X0>(BlueFin::GlSignalIdSet *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 12) = 0u;
  uint64_t v3 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 8;
  *(_OWORD *)(a2 + 28) = 0u;
  uint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    unsigned __int8 v6 = *((unsigned char *)this + 8);
    memcpy(v10, *(const void **)this, 4 * v6);
    unsigned __int16 v8 = 0;
    unsigned __int8 v7 = 0;
    int v9 = v10[0];
    for (uint64_t result = BlueFin::GlSetIterator::operator++(&v6); v7 != v6; uint64_t result = BlueFin::GlSetIterator::operator++(&v6))
    {
      if (v8 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 593, "GetSignalIndexFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 593, "usIndex < NUM_SIGNAL_IDS");
      }
      if ((*((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v8 + 1) - 1) <= 1)
      {
        unint64_t v5 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v8);
        *(_DWORD *)(v3 + ((v5 >> 3) & 0x1C)) |= 1 << v5;
      }
    }
  }
  return result;
}

float BlueFin::GlMeMiniKF::NoMsmtAvail(BlueFin::GlMeMiniKF *this, unsigned int a2, double a3, double a4)
{
  double v6 = BlueFin::GlMeSkfCb::NoMsmtAvail((BlueFin::GlMeMiniKF *)((char *)this + 112), a2, a3, a4);
  double v8 = BlueFin::GlMeSkfCb::NoMsmtAvail((BlueFin::GlMeMiniKF *)((char *)this + 240), a2, v6, v7);
  BlueFin::GlMeSkfCb::NoMsmtAvail((BlueFin::GlMeMiniKF *)((char *)this + 368), a2, v8, v9);
  LODWORD(v10) = *((_DWORD *)this + 16);
  double v11 = ((double)a2 - (double)v10) / 1000.0;
  *(float *)&unint64_t v10 = *((double *)this + 5);
  double v12 = sqrtf(*(float *)&v10);
  *(float *)&double v11 = v11;
  *(float *)&double v11 = fabsf(*(float *)&v11);
  *((double *)this + 5) = (v12 + *(float *)&v11 * 0.000000005) * (v12 + *(float *)&v11 * 0.000000005);
  *((_DWORD *)this + 16) = a2;
  uint64_t v14 = &unk_270EBF258;
  uint64_t v17 = 0x36A7C5AC00000000;
  uint64_t v18 = 0;
  int v19 = 2139095039;
  uint64_t v20 = 0;
  int v21 = 2139095039;
  uint64_t v22 = 0;
  uint64_t v23 = 0x36A7C5AC7F7FFFFFLL;
  int v15 = 0;
  unsigned int v16 = a2;
  (*(void (**)(void, void **))(**((void **)this + 1) + 32))(*((void *)this + 1), &v14);
  return BlueFin::GlMeClkMod::Print((BlueFin::GlMeClkMod *)&v14, "MKF");
}

double BlueFin::GlMeSkfCb::NoMsmtAvail(BlueFin::GlMeSkfCb *this, unsigned int a2, double a3, double a4)
{
  LODWORD(a4) = *((_DWORD *)this + 12);
  double v6 = ((double)a2 - (double)*(unint64_t *)&a4) * 0.001;
  double v17 = *((double *)this + 1) - v6 * *(double *)(*((void *)this + 12) + 8);
  v14[0] = 1;
  int v15 = 0;
  __int16 v16 = 0;
  *((double *)this + 1) = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v17, (const BlueFin::GlSignalId *)v14, 1u);
  float v7 = *((double *)this + 3);
  float v8 = sqrtf(v7);
  float v9 = v6;
  float v10 = fabsf(v9);
  float v11 = *(double *)(*((void *)this + 12) + 24);
  float v12 = sqrtf(v11);
  double result = (float)(v8 + (float)(v10 * v12)) * (float)(v8 + (float)(v10 * v12));
  *((double *)this + 3) = result;
  *((_DWORD *)this + 12) = a2;
  return result;
}

uint64_t BlueFin::GlMeClkModMgr::SetClkModFromNoMsmt(BlueFin::GlMeClkModMgr *this, BlueFin::GlMeClkMod *a2)
{
  uint64_t v4 = 84;
  if ((*((_DWORD *)a2 + 2) & 0x10) == 0) {
    uint64_t v4 = 70;
  }
  GlCustomLog(127, "SetClkModFromNoMsmt:%f,%c\n", (float)(*((float *)a2 + 5) * 1000000000.0), v4);

  return BlueFin::GlMeClkModMgr::SetClkMod(this, a2, 0);
}

uint64_t BlueFin::GlMeClkModMgr::SetClkModFromMkf(BlueFin::GlMeClkModMgr *this, BlueFin::GlMeClkMod *a2)
{
  if (*((unsigned char *)this + 96) && (int v4 = *((_DWORD *)a2 + 3) - *((_DWORD *)this + 25), v4 <= 120000))
  {
    *((_DWORD *)a2 + 2) &= 0xFFFFFFCD;
    if (*((_DWORD *)this + 30) != v4) {
      *((_DWORD *)this + 30) = v4;
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 84;
  if ((*((_DWORD *)a2 + 2) & 0x10) == 0) {
    uint64_t v6 = 70;
  }
  GlCustomLog(127, "SetClkModFromMkf:%f,%c\n", (float)(*((float *)a2 + 5) * 1000000000.0), v6);
  if ((*((unsigned char *)a2 + 8) & 0x32) != 0)
  {
    BlueFin::GlMeClkModMgr::SetClkMod(this, a2, 0);
    return 1;
  }
  return v5;
}

uint64_t BlueFin::GlMeMeasAidFilter::MeasurementComplete(void **this, BlueFin::GlMeMeasSelfAidFilter *a2, int a3)
{
  BlueFin::GlMeMsmtHolder::MsmtsComplete(this + 1460, a2, a3);
  BlueFin::GlMeMsmtMgr::MsmtsComplete((BlueFin::GlMeMsmtMgr *)(this + 1328), (uint64_t)a2);
  uint64_t result = BlueFin::GlMeUserDynamic::GlMeUserDynamicUpdate((BlueFin::GlMeUserDynamic *)(this + 6));
  if (!*((_DWORD *)this + 7331))
  {
    return BlueFin::GlMeMeasSelfAidFilter::UpdateMeSelfAid(a2, v6);
  }
  return result;
}

void BlueFin::GlMeMsmtHolder::MsmtsComplete(void **this, unsigned int a2, int a3)
{
  int v4 = (char *)(this + 2210);
  BlueFin::GlMeMsmtHolder::MsmtsCompleteInit((BlueFin::GlMeMsmtHolder *)this, a2, a3);
  (*(void (**)(void *, char *))(*(void *)*this + 16))(*this, (char *)this + 128);
  *int v4 = 0;
  bzero(this[2211], ((4 * v4[16] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v5 = this[400];
  for (uint64_t i = 16; i != 2960; i += 184)
    v5[i] = 0;
}

uint64_t BlueFin::GlDbgPeIf::SetSIGMeasuement(BlueFin::GlDbgPeIf *this, BlueFin::GlMeas *a2)
{
  uint64_t result = *((void *)this + 1);
  if (a2)
  {
    *(unsigned char *)(result + 580) = 1;
    if (*(_DWORD *)(result + 576) == 1)
    {
      if (*(void *)(result + 808)) {
        return result;
      }
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)result, 4624);
      float v7 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7))
      {
        *((_DWORD *)v7 + 143) = 2;
        BlueFin::GlDbgCodec::Rvw(v7, a2);
      }
      (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
      (*(void (**)(void, BlueFin::GlMeas *))(**((void **)this + 2) + 16))(*((void *)this + 2), a2);
      BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4624);
      unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    }
    else
    {
      unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 2) + 16);
    }
    return v6();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 104);

  return v5();
}

BOOL BlueFin::GlMeUserDynamic::GlMeUserDynamicUpdate(BlueFin::GlMeUserDynamic *this)
{
  unsigned int v2 = *(unsigned __int16 *)(*((void *)this + 6) + 1004);
  if (*((unsigned char *)this + 13))
  {
    if (v2 <= 5)
    {
      *((unsigned char *)this + 13) = 0;
LABEL_8:
      *((unsigned char *)this + 20) = 0;
LABEL_9:
      int v3 = v2 > 5;
      goto LABEL_10;
    }
  }
  else
  {
    if (v2 < 0xE) {
      goto LABEL_8;
    }
    *((unsigned char *)this + 13) = 1;
  }
  *((unsigned char *)this + 20) = v2 > 0x11;
  if (v2 > 0x53)
  {
    int v3 = 3;
    goto LABEL_10;
  }
  if (v2 <= 0x2C) {
    goto LABEL_9;
  }
  int v3 = 2;
LABEL_10:
  BlueFin::GlMeUserDynamic::Debounce((uint64_t)this, v3);

  return BlueFin::GlMeUserDynamic::UpdateTimeStamps(this);
}

uint64_t BlueFin::GlMeUserDynamic::Debounce(uint64_t result, int a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 44);
  if (v4 != a2)
  {
    *(unsigned char *)(result + 40) = 0;
    goto LABEL_7;
  }
  unsigned int v5 = *(unsigned __int8 *)(result + 40);
  if (v5 > 2 || (*(unsigned char *)(result + 40) = v5 + 1, v5 != 2))
  {
LABEL_7:
    if (v4 != 4) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(result + 8) == a2) {
    goto LABEL_10;
  }
LABEL_8:
  *(_DWORD *)(result + 8) = a2;
  uint64_t result = *(void *)(result + 56);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 24))(result, 1);
  }
LABEL_10:
  *(_DWORD *)(v3 + 44) = a2;
  return result;
}

BOOL BlueFin::GlMeUserDynamic::UpdateTimeStamps(BlueFin::GlMeUserDynamic *this)
{
  unsigned int v2 = (BlueFin::GlMeMsmtMgr *)*((void *)this + 6);
  int CurrTimeLms = BlueFin::GlMeMsmtMgr::GetCurrTimeLms(v2);
  switch(*((_DWORD *)this + 2))
  {
    case 0:
      *((_DWORD *)this + 6) = CurrTimeLms;
      break;
    case 1:
      *((_DWORD *)this + 7) = CurrTimeLms;
      break;
    case 2:
      *((_DWORD *)this + 8) = CurrTimeLms;
      break;
    case 3:
      *((_DWORD *)this + 9) = CurrTimeLms;
      break;
    default:
      DeviceFaultNotify("glme_userdynamic.cpp", 247, "UpdateTimeStamps", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_userdynamic.cpp", 247, "0");
  }
  *((unsigned char *)this + 12) = 0;
  if (BlueFin::GlMeUserDynamic::Recent(v2, *((_DWORD *)this + 7))
    || BlueFin::GlMeUserDynamic::Recent(*((BlueFin::GlMeUserDynamic **)this + 6), *((_DWORD *)this + 8))
    || BlueFin::GlMeUserDynamic::Recent(*((BlueFin::GlMeUserDynamic **)this + 6), *((_DWORD *)this + 9)))
  {
    *((unsigned char *)this + 12) = 1;
  }
  *((unsigned char *)this + 15) = 1;
  if (BlueFin::GlMeUserDynamic::VeryRecent(*((BlueFin::GlMeUserDynamic **)this + 6), *((_DWORD *)this + 7))
    || BlueFin::GlMeUserDynamic::VeryRecent(*((BlueFin::GlMeUserDynamic **)this + 6), *((_DWORD *)this + 8))
    || BlueFin::GlMeUserDynamic::VeryRecent(*((BlueFin::GlMeUserDynamic **)this + 6), *((_DWORD *)this + 9)))
  {
    *((unsigned char *)this + 15) = 0;
  }
  else if (*((unsigned char *)this + 15))
  {
    *((_WORD *)this + 9) = 0;
    goto LABEL_16;
  }
  unsigned int v4 = (unsigned __int16)++*((_WORD *)this + 9);
  if (v4 >= 0xB) {
    *((unsigned char *)this + 16) = 0;
  }
LABEL_16:
  BOOL result = BlueFin::GlMeUserDynamic::Recent(*((BlueFin::GlMeUserDynamic **)this + 6), *((_DWORD *)this + 7));
  *((unsigned char *)this + 14) = result;
  return result;
}

BOOL BlueFin::GlMeUserDynamic::Recent(BlueFin::GlMeUserDynamic *this, unsigned int a2)
{
  unsigned int CurrTimeLms = BlueFin::GlMeMsmtMgr::GetCurrTimeLms(this);
  BOOL result = a2 != -1 && CurrTimeLms - a2 < 0x2BF20;
  if (result && CurrTimeLms < a2)
  {
    DeviceFaultNotify("glme_userdynamic.cpp", 294, "Recent", (char)"ulCurrTimeMs >= ulTimeStampLms");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_userdynamic.cpp", 294, "ulCurrTimeMs >= ulTimeStampLms");
  }
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::GetCurrTimeLms(BlueFin::GlMeMsmtMgr *this)
{
  double v1 = *((double *)this + 27);
  double v2 = *((double *)this + 29);
  if (v1 <= v2) {
    double v3 = v2 * 1000.0;
  }
  else {
    double v3 = v1 * 1000.0;
  }
  double v4 = fmod(v3, 4294967300.0);
  if (v3 <= 4294967300.0) {
    double v4 = v3;
  }
  if (v4 < -4294967300.0) {
    double v4 = -fmod(-v4, 4294967300.0);
  }
  if (v4 < 0.0) {
    return --v4;
  }
  else {
    return v4;
  }
}

BOOL BlueFin::GlMeUserDynamic::VeryRecent(BlueFin::GlMeUserDynamic *this, unsigned int a2)
{
  unsigned int CurrTimeLms = BlueFin::GlMeMsmtMgr::GetCurrTimeLms(this);
  BOOL result = a2 != -1 && (CurrTimeLms - a2) >> 4 < 0x753;
  if (result && CurrTimeLms < a2)
  {
    DeviceFaultNotify("glme_userdynamic.cpp", 307, "VeryRecent", (char)"ulCurrTimeMs >= ulTimeStampLms");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_userdynamic.cpp", 307, "ulCurrTimeMs >= ulTimeStampLms");
  }
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::MsmtsComplete(BlueFin::GlMeMsmtMgr *this, uint64_t a2)
{
  BlueFin::GlSetBase::operator=((uint64_t)this + 88, (uint64_t)this);
  *(_OWORD *)((char *)this + 116) = *(_OWORD *)((char *)this + 28);
  *(_OWORD *)((char *)this + 132) = *(_OWORD *)((char *)this + 44);
  *(_OWORD *)((char *)this + 148) = *(_OWORD *)((char *)this + 60);
  *((_OWORD *)this + 10) = *(_OWORD *)((char *)this + 72);
  *(_OWORD *)((char *)this + 100) = *(_OWORD *)((char *)this + 12);
  *((_DWORD *)this + 249) = -1020657664;
  *((unsigned char *)this + 1002) = 0;
  *((unsigned char *)this + 1000) = 0;
  double v4 = v33;
  int v31 = v33;
  unsigned int v5 = 19;
  unsigned __int8 v32 = 19;
  memset(v33, 0, sizeof(v33));
  __src = v30;
  unsigned __int8 v29 = 19;
  memset(v30, 0, sizeof(v30));
  unsigned __int8 v23 = *((unsigned char *)this + 8);
  memcpy(v27, *(const void **)this, 4 * v23);
  unsigned __int16 v25 = 0;
  unsigned __int8 v24 = 0;
  int v26 = v27[0];
  BlueFin::GlSetIterator::operator++(&v23);
  if (v24 == v23)
  {
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  do
  {
    unint64_t v7 = v25;
    if (v25 >= 0x23FuLL) {
      goto LABEL_27;
    }
    float v8 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v25;
    char v9 = *v8;
    int v10 = v8[1];
    v20[0] = *v8;
    int v21 = v10;
    __int16 v22 = v25;
    float v11 = *((float *)BlueFin::GlMeMsmtMgr::GetSigMeas(this, (const BlueFin::GlSignalId *)v20, (double)a2, 1)+ 27);
    if (v11 >= 20.0)
    {
      if (v11 >= 30.0)
      {
        int v12 = 1 << v7;
        uint64_t v13 = (char *)__src;
      }
      else
      {
        if (*((unsigned char *)this + 904)) {
          goto LABEL_13;
        }
        int v12 = 1 << v7;
        uint64_t v13 = v31;
      }
      *(_DWORD *)&v13[(v7 >> 3) & 0x1FFC] |= v12;
    }
    else if (!*((unsigned char *)this + 904))
    {
      v20[0] = v9;
      int v21 = v10;
      __int16 v22 = v7;
      uint64_t v6 = BlueFin::GlMeMsmtMgr::FeedMkfMeas(this, (const BlueFin::GlSignalId *)v20, a2) | v6;
    }
LABEL_13:
    BlueFin::GlSetIterator::operator++(&v23);
  }
  while (v24 != v23);
  unsigned int v5 = v32;
  double v4 = v31;
LABEL_15:
  unsigned __int8 v23 = v5;
  memcpy(v27, v4, 4 * v5);
  unsigned __int16 v25 = 0;
  unsigned __int8 v24 = 0;
  int v26 = v27[0];
  BlueFin::GlSetIterator::operator++(&v23);
  if (v24 != v23)
  {
    while (v25 < 0x23FuLL)
    {
      uint64_t v14 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v25;
      char v15 = *v14;
      LODWORD(v14) = v14[1];
      v20[0] = v15;
      int v21 = (int)v14;
      __int16 v22 = v25;
      uint64_t v6 = BlueFin::GlMeMsmtMgr::FeedMkfMeas(this, (const BlueFin::GlSignalId *)v20, a2) | v6;
      BlueFin::GlSetIterator::operator++(&v23);
      if (v24 == v23) {
        goto LABEL_18;
      }
    }
LABEL_27:
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
  }
LABEL_18:
  unsigned __int8 v23 = v29;
  memcpy(v27, __src, 4 * v29);
  unsigned __int16 v25 = 0;
  unsigned __int8 v24 = 0;
  int v26 = v27[0];
  BlueFin::GlSetIterator::operator++(&v23);
  if (v24 != v23)
  {
    while (v25 < 0x23FuLL)
    {
      __int16 v16 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v25;
      char v17 = *v16;
      LODWORD(v16) = v16[1];
      v20[0] = v17;
      int v21 = (int)v16;
      __int16 v22 = v25;
      uint64_t v6 = BlueFin::GlMeMsmtMgr::FeedMkfMeas(this, (const BlueFin::GlSignalId *)v20, a2) | v6;
      BlueFin::GlSetIterator::operator++(&v23);
      if (v24 == v23) {
        goto LABEL_21;
      }
    }
    goto LABEL_27;
  }
LABEL_21:
  bzero(*(void **)this, ((4 * *((unsigned __int8 *)this + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (!v6
    || (*(_DWORD *)(*((void *)this + 24) + 248) = a2,
        ((*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 23) + 32))(*((void *)this + 23), a2, v6) & 1) == 0))
  {
    (*(void (**)(void, uint64_t))(**((void **)this + 23) + 16))(*((void *)this + 23), a2);
  }
  *((_DWORD *)this + 50) = a2;
  uint64_t v18 = *((void *)this + 24);
  LODWORD(v31) = 0;
  uint64_t result = *(void *)(v18 + 280);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, char **))(*(void *)result + 16))(result, 2, &v31);
  }
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::FeedMkfMeas(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, unsigned int a3)
{
  double v5 = (double)a3;
  BlueFin::GlMeMsmtMgr::GetSigMeas(this, a2, (double)a3, 1);
  SigMeasForClockModel = BlueFin::GlMeMsmtMgr::GetSigMeasForClockModel(this, a2, v5);
  BlueFin::GlMeSatAidMgr::GetSatAid(*((void *)this + 24) + 320, (unsigned __int8 *)a2, 0, v5);
  if (!v7 || *((_DWORD *)SigMeasForClockModel + 1)) {
    return 0;
  }
  char v9 = *(uint64_t (**)(void))(**((void **)this + 23) + 24);

  return v9();
}

char *BlueFin::GlMeMsmtMgr::GetSigMeasForClockModel(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, double a3)
{
  uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(this, a2, 1, 1);
  if (MsmtSlotPtr)
  {
    uint64_t v7 = MsmtSlotPtr;
    int v8 = *(_DWORD *)(MsmtSlotPtr + 140);
    uint64_t v9 = 175;
    switch(v8)
    {
      case 10:
        if (*(unsigned __int8 *)a2 - 81 > 0x34) {
          goto LABEL_3;
        }
        if ((*(_DWORD *)(MsmtSlotPtr + 84) & 8) == 0)
        {
LABEL_17:
          GlCustomLog(175, "GetSigMeasForClockModel(%u %d) %s mode %u %s\n");
          goto LABEL_9;
        }
LABEL_14:
        GlCustomLog(175, "GetSigMeasForClockModel(%u %d) %s mode %u %s\n");
LABEL_4:
        SigMeas = BlueFin::GlMeMsmtMgr::GetSigMeas(this, a2, a3, 0);
        int v11 = *((_DWORD *)SigMeas + 3);
        if ((v11 & 0x400) != 0) {
          goto LABEL_9;
        }
        int v12 = SigMeas;
        if ((*(unsigned char *)(v7 + 86) & 0x20) == 0) {
          *((_DWORD *)SigMeas + 3) = v11 & 0xFFFFFFF3;
        }
        break;
      case 11:
      case 12:
      case 13:
      case 17:
        goto LABEL_3;
      case 14:
      case 16:
        goto LABEL_8;
      case 15:
        if ((*(unsigned char *)a2 - 66) <= 0xF1u) {
          goto LABEL_14;
        }
        goto LABEL_17;
      default:
        if (v8) {
          goto LABEL_8;
        }
        uint64_t v9 = 13;
LABEL_3:
        GlCustomLog(v9, "GetSigMeasForClockModel(%u %d) %s mode %u %s\n");
        goto LABEL_4;
    }
  }
  else
  {
    uint64_t v9 = 11;
LABEL_8:
    GlCustomLog(v9, "GetSigMeasForClockModel(%u %d) %s mode %u %s\n");
LABEL_9:
    BlueFin::GlMeMsmtMgr::ReportSlotState((unint64_t)this, (BlueFin::GlUtils *)v9);
    int v12 = (char *)this + 240;
    BlueFin::GlSigMeas::init((uint64_t)this + 240, (uint64_t)a2);
  }
  return v12;
}

uint64_t BlueFin::GlMeMiniKF::NewMsmtAvail(BlueFin::GlMeMiniKF *this, unsigned int a2, float *a3, uint64_t a4, int a5, int a6)
{
  uint64_t result = 0;
  if ((~*(_DWORD *)(a4 + 24) & 0x12) == 0 && *(float *)(a4 + 40) < 0.0009)
  {
    unsigned int v13 = *(unsigned __int8 *)a3;
    if (v13 < 0x4C)
    {
      if (v13 - 33 < 0x13) {
        return 0;
      }
    }
    else if (v13 < 0x8B)
    {
      return 0;
    }
    if ((a3[3] & 0x802) == 2)
    {
      float v14 = a3[25];
      if (v14 < 3.4028e38)
      {
        float v15 = *(float *)(a4 + 44);
        float v16 = *(float *)(a4 + 48);
        float v17 = a3[24];
        double v18 = (float)-(float)(v17 - v15);
        GlCustomLog(127, "UpdateCbDot(%u) Svid %d, DopplerPpb %.3f (Unc %.3f), DopplerAidingPpb %.3f (Unc %.3f), CandOscPpb %.3f\n", a2, v13, v17 * 1000000000.0, v14 * 1000000000.0, v15 * 1000000000.0, v16 * 1000000000.0, v18 * 1000000000.0);
        if (fabs(v18) >= 0.0000069000001)
        {
          GlCustomLog(14, "GlMeMiniKF::UpdateCbDot(%u, %.1f) - Rejected!  Oscillator offset out of range. \n", a2, v18 * 1000000000.0);
        }
        else
        {
          *((_DWORD *)this + 26) |= 1u;
          BlueFin::GlMeSkfCore::NewMsmt((uint64_t)this + 16, a2, (uint64_t)a3, v18, (float)((float)(v16 * v16) + (float)(v14 * v14)));
        }
      }
      float v19 = *(float *)(a4 + 40);
      double v20 = *((double *)a3 + 7) - ((double)a2 * 0.001 + *(double *)(a4 + 32));
      float v21 = a3[22];
      int v29 = 2;
      int v22 = *(unsigned __int8 *)a3;
      if ((v22 + 117) > 0x23u)
      {
        int v23 = *((_DWORD *)a3 + 3);
        if ((v23 & 2) != 0 && ((v23 & 8) != 0 || (v23 & 4) != 0 && a6))
        {
          GlCustomLog(127, "<DMkfFlg>New meas sv%hi: Add BIT_VAL+SE_VAL\n", *(unsigned __int8 *)a3);
          double v28 = v20;
          double SubBitAndEpochTime = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v28, (const BlueFin::GlSignalId *)a3, 1u);
          int v29 = 10;
          if (a5 && ((_BYTE)a3[3] & 8) != 0)
          {
            int v27 = 58;
          }
          else
          {
            if (!a6 || ((_BYTE)a3[3] & 4) == 0) {
              goto LABEL_18;
            }
            int v27 = 42;
          }
          int v29 = v27;
          goto LABEL_18;
        }
      }
      else
      {
        int v29 = 6;
        int v23 = *((_DWORD *)a3 + 3);
      }
      if ((v23 & 2) == 0)
      {
LABEL_33:
        BlueFin::GlMeMiniKF::GenerateClockModFlags((uint64_t)this, a2, (unsigned int *)&v28);
        return LODWORD(v28);
      }
      GlCustomLog(127, "<DMkfFlg>New meas sv%hi: Add SE_VAL\n", v22);
      double v28 = v20;
      double SubBitAndEpochTime = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v28, (const BlueFin::GlSignalId *)a3, 1u);
LABEL_18:
      unsigned int v25 = *(unsigned __int8 *)a3;
      if (v25 >= 0x34)
      {
        if (v25 <= 0x41)
        {
          int v26 = (char *)this + 240;
LABEL_32:
          BlueFin::GlMeSkfCb::NewMsmt((uint64_t)v26, a2, &v29, (uint64_t)a3, SubBitAndEpochTime, (float)((float)(v19 * v19) + (float)(v21 * v21)));
          goto LABEL_33;
        }
        if ((v25 + 117) <= 0x23u)
        {
          int v26 = (char *)this + 368;
          goto LABEL_32;
        }
      }
      int v26 = (char *)this + 112;
      goto LABEL_32;
    }
    return 0;
  }
  return result;
}

unint64_t BlueFin::GlMeMsmtMgr::ReportSlotState(unint64_t this, BlueFin::GlUtils *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!BlueFin::GlUtils::m_ucEnabled) {
    return this;
  }
  double v3 = (BlueFin::GlMeMsmtMgr *)this;
  this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck(a2);
  if (!this || ((1 << (a2 >> 3)) & 0x2000800E) == 0) {
    return this;
  }
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = &byte_263BAA031;
  do
  {
    int v7 = *v6;
    __dst[0] = *(v6 - 1);
    *(_DWORD *)&__dst[4] = v7;
    *(_WORD *)&__dst[8] = v4;
    uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(v3, (const BlueFin::GlSignalId *)__dst, 1, 1);
    if (MsmtSlotPtr)
    {
      uint64_t v9 = MsmtSlotPtr;
      if (a2 == 11)
      {
        long long v24 = 0u;
        long long v25 = 0u;
        *(_OWORD *)__dst = 0u;
        long long v23 = 0u;
        if ((*(_DWORD *)(MsmtSlotPtr + 84) & 4) != 0) {
          int v10 = "prp";
        }
        else {
          int v10 = "RAW";
        }
        strlcat(__dst, v10, 0x40uLL);
        if ((*(_DWORD *)(v9 + 84) & 0x20) != 0) {
          int v11 = ".PK";
        }
        else {
          int v11 = ".pk";
        }
        strlcat(__dst, v11, 0x40uLL);
        int v12 = *(_DWORD *)(v9 + 84);
        unsigned int v13 = ".NV.BM";
        if ((v12 & 0x200) == 0) {
          unsigned int v13 = ".DC.BM";
        }
        if ((v12 & 8) != 0) {
          float v14 = v13;
        }
        else {
          float v14 = ".bl.bm";
        }
        strlcat(__dst, v14, 0x40uLL);
        int v15 = *(_DWORD *)(v9 + 84);
        float v16 = ".CPH";
        if ((v15 & 0x80) == 0) {
          float v16 = ".DOP";
        }
        if ((v15 & 0x40) != 0) {
          float v17 = v16;
        }
        else {
          float v17 = ".dop";
        }
        strlcat(__dst, v17, 0x40uLL);
        strcpy(v26, "vtea.frdxc");
        int v18 = *(_DWORD *)(v9 + 84);
        if ((v18 & 0x40002) != 0) {
          v26[0] = 86;
        }
        if ((v18 & 0x10) != 0)
        {
          v26[1] = 84;
          if ((v18 & 0x100) == 0)
          {
LABEL_27:
            if ((v18 & 0x400) == 0) {
              goto LABEL_28;
            }
            goto LABEL_47;
          }
        }
        else if ((v18 & 0x100) == 0)
        {
          goto LABEL_27;
        }
        v26[2] = 69;
        if ((v18 & 0x400) == 0)
        {
LABEL_28:
          if ((v18 & 0x800) == 0) {
            goto LABEL_29;
          }
          goto LABEL_48;
        }
LABEL_47:
        v26[3] = 65;
        if ((v18 & 0x800) == 0)
        {
LABEL_29:
          if ((v18 & 0x1000) == 0) {
            goto LABEL_30;
          }
          goto LABEL_49;
        }
LABEL_48:
        v26[4] = 66;
        if ((v18 & 0x1000) == 0)
        {
LABEL_30:
          if ((v18 & 0x2000) == 0) {
            goto LABEL_31;
          }
          goto LABEL_50;
        }
LABEL_49:
        v26[5] = 70;
        if ((v18 & 0x2000) == 0)
        {
LABEL_31:
          if ((v18 & 0x4000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_51;
        }
LABEL_50:
        v26[6] = 82;
        if ((v18 & 0x4000) == 0)
        {
LABEL_32:
          if ((v18 & 0x8000) == 0) {
            goto LABEL_33;
          }
          goto LABEL_52;
        }
LABEL_51:
        v26[7] = 68;
        if ((v18 & 0x8000) == 0)
        {
LABEL_33:
          if ((v18 & 0x10000) == 0)
          {
LABEL_35:
            BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, 11, "Slot[%hu] 0x%u Meas{%u %u %0.3f} Time{%u %u} %s:%s\n", v4, v9, *(unsigned __int8 *)(v9 + 100));
            goto LABEL_55;
          }
LABEL_34:
          v26[9] = 67;
          goto LABEL_35;
        }
LABEL_52:
        v26[8] = 88;
        if ((v18 & 0x10000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
      *(_WORD *)__dst = 0;
      __dst[2] = 0;
      if ((*(unsigned char *)(MsmtSlotPtr + 85) & 0x40) != 0) {
        __dst[0] = 68;
      }
      float v19 = "";
      if (!v5) {
        float v19 = "SlotState";
      }
      BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, (uint64_t)a2, "%s {%hu %u %0.3f%s}", v19, v4, *(unsigned __int8 *)(MsmtSlotPtr + 112), *(double *)(MsmtSlotPtr + 24), __dst);
      if (v5 >= 4)
      {
        BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, (uint64_t)a2, "\n");
        int v5 = 0;
      }
      else
      {
        ++v5;
      }
    }
    else if (a2 == 11)
    {
      BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, 11, "Slot[%hu] 0x0\n");
    }
LABEL_55:
    v6 += 2;
    ++v4;
  }
  while (v4 != 575);
  if (v5) {
    BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, (uint64_t)a2, "\n");
  }
  double v20 = (BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance;
  int v21 = BlueFin::GlSetBase::Cnt(v3);
  BlueFin::GlUtils::SysLogForce(v20, (uint64_t)a2, "DspMeas[%d] {", v21);
  __dst[0] = *((unsigned char *)v3 + 8);
  memcpy(&__dst[8], *(const void **)v3, 4 * __dst[0]);
  *(_WORD *)&__dst[2] = 0;
  __dst[1] = 0;
  *(_DWORD *)&__dst[4] = *(_DWORD *)&__dst[8];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)__dst);
  while (__dst[1] != __dst[0])
  {
    if (*(unsigned __int16 *)&__dst[2] >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, (uint64_t)a2, " %hd %d ", *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&__dst[2]), *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&__dst[2] + 1));
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)__dst);
  }
  return BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, (uint64_t)a2, " }\n");
}

uint64_t BlueFin::GlMeSkfCb::NewMsmt(uint64_t a1, int a2, int *a3, uint64_t a4, double a5, double a6)
{
  int v8 = *a3;
  if ((*a3 & 0x10) != 0)
  {
    *(unsigned char *)(a1 + 52) = 1;
    *(_DWORD *)(a1 + 104) = a2;
    goto LABEL_6;
  }
  if ((v8 & 0x20) != 0)
  {
LABEL_6:
    *(_DWORD *)(a1 + 108) = a2;
    goto LABEL_7;
  }
  if ((v8 & 8) != 0) {
    *(_DWORD *)(a1 + 112) = a2;
  }
LABEL_7:
  if ((v8 & 4) != 0) {
    *(_DWORD *)(a1 + 116) = a2;
  }
  *(_DWORD *)(a1 + 92) = *a3;
  uint64_t result = BlueFin::GlMeSkfCore::NewMsmt(a1, a2, a4, a5, a6);
  *(_DWORD *)(a1 + 88) |= *(_DWORD *)(a1 + 92);
  if ((*(unsigned char *)a3 & 0x10) != 0) {
    *(unsigned char *)(a1 + 120) = 0;
  }
  return result;
}

uint64_t BlueFin::GlMeSkfCore::NewMsmt(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  double v10 = *(double *)(a1 + 8);
  double v11 = *(double *)(a1 + 24);
  if (*(unsigned char *)(a1 + 52))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    int v12 = 0;
    *(_DWORD *)(a1 + 48) = a2;
    if (*(unsigned char *)(a1 + 52)) {
      goto LABEL_8;
    }
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = a2;
    int v12 = a2 - v13;
    if (a2 - v13 < 0)
    {
      DeviceFaultNotify("glme_skfcore.cpp", 86, "NewMsmt", (char)"lDeltaTimeLms >= 0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_skfcore.cpp", 86, "lDeltaTimeLms >= 0");
    }
  }
  if (v12)
  {
LABEL_8:
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    double v14 = *(double *)(a1 + 80);
    if (v14 <= a5) {
      double v15 = *(double *)(a1 + 80);
    }
    else {
      double v15 = a5;
    }
    if (v14 <= 0.0) {
      double v16 = a5;
    }
    else {
      double v16 = v15;
    }
    *(double *)(a1 + 40) = v16;
    double v17 = *(double *)(a1 + 72);
    double v18 = *(double *)(a1 + 64) * (double)v12 * (*(double *)(a1 + 64) * (double)v12);
    double v19 = *(double *)(a1 + 24) + v18;
    *(double *)(a1 + 16) = v18;
    *(double *)(a1 + 24) = v19;
    if (v19 > v17) {
      *(double *)(a1 + 24) = v17;
    }
    *(unsigned char *)(a1 + 52) = 0;
    goto LABEL_17;
  }
  if (*(double *)(a1 + 40) > a5) {
    *(double *)(a1 + 40) = a5;
  }
LABEL_17:
  *(double *)(a1 + 32) = *(double *)(a1 + 24) / (*(double *)(a1 + 24) + a5);
  double v20 = a4 - *(double *)(a1 + 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 40))(a1, a3, v20);
  double v22 = *(double *)(a1 + 32);
  double v23 = *(double *)(a1 + 24) * (1.0 - v22);
  *(double *)(a1 + 24) = v23;
  double v24 = *(double *)(a1 + 40);
  if (v23 < v24)
  {
    *(double *)(a1 + 24) = v24;
    double v23 = v24;
  }
  double v25 = *(double *)(a1 + 8) * 1000000000.0;
  double v26 = -v25;
  if (v25 >= 0.0) {
    double v26 = *(double *)(a1 + 8) * 1000000000.0;
  }
  if (v26 < 5000.0) {
    return GlCustomLog(127, "NewMsmt(%u) dZ %.3f, dK %.3f, dR %.3f, dX %.3f, dQ %.6f, X_ %.3f, X %.3f, P_ %.3f, P %.3f in ppb\n", a2, v20 * 1000000000.0, v22, a5 * 1.0e18, v20 * v22 * 1000000000.0, *(double *)(a1 + 16) * 1.0e18, v10 * 1000000000.0, v25, v11 * 1.0e18, v23 * 1.0e18);
  }
  return result;
}

void BlueFin::GlMeSkfCb::UpdateDx(uint64_t a1, unsigned __int8 *a2, double a3)
{
  double v24 = a3;
  v21[0] = *a2;
  int v22 = 0;
  __int16 v23 = 575;
  if ((v21[0] + 67) >= 0x44u)
  {
    uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[v21[0]];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v6] == 255) {
      int v22 = -1;
    }
    else {
      __int16 v23 = BlueFin::GlSignalId::s_ausGnss2signalId[v6]
    }
          + v21[0]
          - BlueFin::GlSvId::s_aucGnss2minSvId[v6];
  }
  double SubEpochTime = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v24, (const BlueFin::GlSignalId *)v21, 0);
  double v24 = a3;
  v21[0] = 1;
  int v22 = 0;
  __int16 v23 = 0;
  double SubBitTime = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v24, (const BlueFin::GlSignalId *)v21, 0);
  uint64_t v9 = *a2;
  if ((v9 + 67) < 0x44u
    || (uint64_t v10 = BlueFin::GlSvId::s_aucSvId2gnss[v9],
        BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v10] == 255)
    || (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v10]
                        + v9
                        - BlueFin::GlSvId::s_aucGnss2minSvId[v10]) >= 0x23Fu)
  {
    double v19 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v20 = 678;
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v20, v19);
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[v10])
  {
    double v19 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v20 = 685;
    goto LABEL_30;
  }
  double v11 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[v10] * 0.001;
  if (SubEpochTime <= v11 * 0.5)
  {
    if (SubEpochTime < v11 * -0.5)
    {
      double SubEpochTime = SubEpochTime + v11;
      double SubBitTime = SubBitTime - v11;
    }
  }
  else
  {
    double SubEpochTime = SubEpochTime - v11;
    double SubBitTime = SubBitTime + v11;
  }
  double v24 = SubBitTime;
  v21[0] = 1;
  int v22 = 0;
  __int16 v23 = 0;
  double v12 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v24, (const BlueFin::GlSignalId *)v21, 1u);
  int v13 = *(_DWORD *)(a1 + 92);
  if ((v13 & 8) != 0)
  {
    int v15 = *(_DWORD *)(a1 + 88);
    if (*(unsigned char *)(a1 + 120) && (v15 & 2) != 0)
    {
      *(void *)(a1 + 32) = 0x3FEFD70A3D70A3D7;
      *(unsigned char *)(a1 + 120) = 0;
    }
    double v16 = 1.0;
    double v17 = 0.0;
    if ((v13 & 0x10) != 0) {
      double v18 = 1.0;
    }
    else {
      double v18 = 0.0;
    }
    if ((v15 & 0x20) == 0) {
      double v17 = 1.0;
    }
    if ((v13 & 0x20) == 0) {
      double v16 = v17;
    }
    if ((v15 & 0x10) != 0) {
      double v16 = v18;
    }
    double v14 = *(double *)(a1 + 8) + SubEpochTime * *(double *)(a1 + 32) + v16 * v12;
  }
  else
  {
    double v14 = *(double *)(a1 + 8) + *(double *)(a1 + 32) * SubEpochTime;
  }
  *(double *)(a1 + 8) = v14;
}

double BlueFin::GlSystemTime::getSubBitTime(BlueFin::GlSystemTime *this, const BlueFin::GlSignalId *a2, unsigned __int8 a3)
{
  int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(a2);
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    uint64_t v10 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v11 = 678;
    goto LABEL_8;
  }
  unsigned int v7 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                              - *((int *)a2 + 1)
                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                              - *((int *)a2 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
  {
    uint64_t v10 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v11 = 685;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v11, v10);
  }
  unsigned int v8 = (*(double *)this * dbl_263BB2AE0[*(double *)this < 0.0]);
  double result = dbl_263BB2AF0[*(double *)this < 0.0] * (double)(v8 / v7 * v7 - v8 / (v7 * EpochPerBit) * v7 * EpochPerBit);
  if ((a3 & (result < 0.0)) != 0) {
    return result + (double)(v7 * EpochPerBit) * 0.001;
  }
  return result;
}

double BlueFin::GlMeSkfCore::UpdateDx(uint64_t a1, double a2)
{
  double result = *(double *)(a1 + 8) + *(double *)(a1 + 32) * a2;
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t BlueFin::GlMeClkModMgr::SetClkMod(BlueFin::GlMeClkModMgr *this, BlueFin::GlMeClkMod *a2, char a3)
{
  unsigned int v66 = 0;
  float v6 = *((float *)this + 7);
  float v57 = &unk_270EBF258;
  uint64_t v58 = 0;
  uint64_t v59 = 0x36A7C5AC00000000;
  uint64_t v60 = 0;
  int v61 = 2139095039;
  uint64_t v62 = 0;
  int v63 = 2139095039;
  uint64_t v64 = 0;
  uint64_t v65 = 0x36A7C5AC7F7FFFFFLL;
  (*(void (**)(BlueFin::GlMeClkModMgr *, void **, void))(*(void *)this + 24))(this, &v57, *((unsigned int *)a2 + 3));
  int v7 = v58;
  int v8 = HIDWORD(v58);
  uint64_t v9 = v60;
  *((void *)this + 3) = v59;
  *((void *)this + 4) = v9;
  *((_DWORD *)this + 10) = v61;
  *((void *)this + 6) = v62;
  *((_DWORD *)this + 14) = v63;
  uint64_t v10 = v65;
  *((void *)this + 8) = v64;
  *((void *)this + 9) = v10;
  unsigned int v11 = v7 & 0xFFFFFDFF;
  *((_DWORD *)this + 4) = v11;
  *((_DWORD *)this + 5) = v8;
  float v12 = *((float *)a2 + 4);
  if (fabsf(v12) > (float)(*((float *)this + 21) * 10.0))
  {
    DeviceFaultNotify("glme_clkmodmgr.cpp", 403, "SetClkMod", (char)"OscOffPpb=%f, MaxOscOffUncPpb=%f\n");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_clkmodmgr.cpp", 403, "OscOffPpb=%f, MaxOscOffUncPpb=%f\n");
  }
  if ((*((unsigned char *)a2 + 8) & 0x10) == 0)
  {
    int v13 = 0;
    BOOL v14 = 0;
    goto LABEL_39;
  }
  GlCustomLog(199, "HWDEBUG: LMS = %u, OscOffPpb=%lf, OscOffUncPpb=%lf \n", *((_DWORD *)a2 + 3), (float)(v12 * 1000000000.0), (float)(*((float *)a2 + 5) * 1000000000.0));
  unsigned int v11 = *((_DWORD *)this + 4);
  if ((v11 & 0x10) != 0)
  {
    if ((a3 & 1) != 0 || (float v15 = *((float *)a2 + 5), v15 <= 0.00000003))
    {
      float v17 = *((float *)a2 + 4);
      if (vabds_f32(*((float *)this + 6), v17) <= 0.00000002)
      {
        int v18 = 0;
      }
      else
      {
        int v18 = 2064;
        unsigned int v66 = 2064;
        v11 |= 0x200u;
        *((_DWORD *)this + 4) = v11;
      }
      float v19 = *((float *)this + 7);
      BOOL v16 = v19 > 0.00000003;
      float v15 = *((float *)a2 + 5);
      if (v15 > 0.00000003) {
        BOOL v16 = 0;
      }
      int v20 = COERCE_INT(v19 / 0.00000005) != COERCE_INT(v15 / 0.00000005) || v16;
      if (v20) {
        int v13 = v18 | 0x1020;
      }
      else {
        int v13 = v18;
      }
      if (v20 == 1) {
        unsigned int v66 = v18 | 0x1020;
      }
    }
    else
    {
      if (vabds_f32(*((float *)this + 7), v15) <= 0.000001)
      {
        float v17 = *((float *)a2 + 4);
        if (vabds_f32(*((float *)this + 6), v17) <= 0.00000005)
        {
          int v13 = 0;
        }
        else
        {
          int v13 = 16;
          unsigned int v66 = 16;
        }
      }
      else
      {
        int v13 = 4128;
        unsigned int v66 = 4128;
        float v17 = *((float *)a2 + 4);
      }
      BOOL v16 = 0;
    }
    v11 |= 0x10u;
    *((_DWORD *)this + 4) = v11;
  }
  else
  {
    float v15 = *((float *)a2 + 5);
    if (v15 > *((float *)this + 23))
    {
      int v13 = 0;
      BOOL v16 = 0;
      float v15 = *((float *)this + 7);
      goto LABEL_34;
    }
    if (v15 >= 0.0000015)
    {
      int v13 = 0;
    }
    else
    {
      int v13 = 6192;
      unsigned int v66 = 6192;
    }
    BOOL v16 = 0;
    v11 |= 0x10u;
    *((_DWORD *)this + 4) = v11;
    float v17 = *((float *)a2 + 4);
  }
  *((float *)this + 6) = v17;
  *((float *)this + 7) = v15;
LABEL_34:
  if (v15 <= *((float *)this + 22))
  {
    *((_DWORD *)this + 23) = 882970544;
    float v21 = 0.0000003;
  }
  else
  {
    float v21 = *((float *)this + 23);
  }
  BOOL v14 = v16;
  if (v15 > v21) {
    *((float *)this + 7) = v21;
  }
LABEL_39:
  int v22 = *((_DWORD *)a2 + 2);
  if ((~v22 & 0xA) != 0)
  {
    if ((v22 & 8) != 0)
    {
      if ((v22 & 2) == 0 && *((float *)a2 + 8) < 0.00015152)
      {
        if (*((float *)this + 10) >= 0.00015152)
        {
          v13 |= 8u;
          unsigned int v66 = v13;
        }
        double v50 = *((double *)this + 4) - *((double *)a2 + 3);
        LOBYTE(v54) = 1;
        int v55 = 0;
        __int16 v56 = 0;
        if (fabs(fabs(fabs(BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 0))+ -0.000500000024)+ -0.000500000024) > 0.0000757575763)
        {
          v13 |= 2u;
          unsigned int v66 = v13;
        }
        int v29 = *((_DWORD *)this + 4);
        *((_DWORD *)this + 4) = v29 | 8;
        if ((v29 & 2) != 0)
        {
          uint64_t v53 = *((void *)this + 4);
          LOBYTE(v54) = 1;
          int v55 = 0;
          __int16 v56 = 0;
          double SubBitTime = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v53, (const BlueFin::GlSignalId *)&v54, 1u);
          uint64_t v52 = *((void *)a2 + 3);
          LOBYTE(v50) = 1;
          HIDWORD(v50) = 0;
          __int16 v51 = 0;
          double SubEpochTime = SubBitTime
                       + BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v52, (const BlueFin::GlSignalId *)&v50, 1u);
        }
        else
        {
          double v50 = *((double *)a2 + 3);
          LOBYTE(v54) = 1;
          int v55 = 0;
          __int16 v56 = 0;
          double SubEpochTime = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 1u);
        }
        *((double *)this + 4) = SubEpochTime;
        *((_DWORD *)this + 10) = *((_DWORD *)a2 + 8);
      }
    }
    else if ((v22 & 2) != 0)
    {
      if ((v11 & 2) == 0)
      {
        v13 |= 0x40u;
        unsigned int v66 = v13;
      }
      *((_DWORD *)this + 4) = v11 | 2;
      *((void *)this + 4) = *((void *)a2 + 3);
      *((_DWORD *)this + 10) = *((_DWORD *)a2 + 8);
      unsigned int v27 = v11 & 0xFFFFFFF9 | 2;
      int v28 = v11 | 6;
      if ((*((_DWORD *)a2 + 2) & 4) == 0) {
        int v28 = v27;
      }
      *((_DWORD *)this + 4) = v28;
      *((_DWORD *)this + 27) = *((_DWORD *)a2 + 3) / 0x3E8u;
    }
  }
  else if (*((float *)a2 + 8) < 0.00015152)
  {
    if (*((float *)this + 10) >= 0.00015152)
    {
      v13 |= 8u;
      unsigned int v66 = v13;
    }
    double v50 = *((double *)this + 4) - *((double *)a2 + 3);
    LOBYTE(v54) = 1;
    int v55 = 0;
    __int16 v56 = 0;
    if (fabs(fabs(fabs(BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 0))+ -0.000500000024)+ -0.000500000024) > 0.0000757575763)
    {
      v13 |= 2u;
      unsigned int v66 = v13;
    }
    int v23 = *((_DWORD *)this + 4);
    if ((v23 & 2) == 0)
    {
      v13 |= 0x40u;
      unsigned int v66 = v13;
    }
    *((_DWORD *)this + 4) = v23 | 0xA;
    *((void *)this + 4) = *((void *)a2 + 3);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 8);
    double v50 = *((double *)a2 + 3);
    LOBYTE(v54) = -117;
    int v55 = 0;
    __int16 v56 = 453;
    *((double *)this + 8) = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 1u);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 8);
    unsigned int v24 = *((_DWORD *)a2 + 3) / 0x3E8u;
    *((_DWORD *)this + 27) = v24;
    *((_DWORD *)this + 29) = v24;
    int v25 = *((_DWORD *)this + 4);
    if ((*((unsigned char *)a2 + 8) & 4) != 0) {
      unsigned int v26 = v25 | 0x404;
    }
    else {
      unsigned int v26 = v25 & 0xFFFFFBFB;
    }
    *((_DWORD *)this + 4) = v26;
  }
  int v31 = *((_DWORD *)a2 + 2);
  if ((~v31 & 0x120) != 0)
  {
    if ((v31 & 0x100) != 0)
    {
      if ((v31 & 0x20) == 0 && *((float *)a2 + 12) < 0.00030333)
      {
        if (*((float *)this + 14) >= 0.00030333) {
          v13 |= 0x400u;
        }
        double v50 = *((double *)this + 6) - *((double *)a2 + 5);
        LOBYTE(v54) = 52;
        int v55 = 0;
        __int16 v56 = 147;
        if (fabs(fabs(fabs(BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 0))+ -0.000500000024)+ -0.000500000024) > 0.000151663407)
        {
          v13 |= 0x100u;
          unsigned int v66 = v13;
        }
        int v37 = *((_DWORD *)this + 4);
        *((_DWORD *)this + 4) = v37 | 0x100;
        if ((v37 & 0x20) != 0)
        {
          uint64_t v53 = *((void *)this + 6);
          LOBYTE(v54) = 52;
          int v55 = 0;
          __int16 v56 = 147;
          double v49 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v53, (const BlueFin::GlSignalId *)&v54, 1u);
          uint64_t v52 = *((void *)a2 + 5);
          LOBYTE(v50) = 52;
          HIDWORD(v50) = 0;
          __int16 v51 = 147;
          double v38 = v49
              + BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v52, (const BlueFin::GlSignalId *)&v50, 1u);
        }
        else
        {
          double v50 = *((double *)a2 + 5);
          LOBYTE(v54) = 52;
          int v55 = 0;
          __int16 v56 = 147;
          double v38 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 1u);
        }
        *((double *)this + 6) = v38;
        *((_DWORD *)this + 14) = *((_DWORD *)a2 + 12);
      }
    }
    else if ((v31 & 0x20) != 0)
    {
      int v34 = *((_DWORD *)this + 4);
      if ((v34 & 0x20) == 0)
      {
        v13 |= 0x2000u;
        unsigned int v66 = v13;
      }
      *((_DWORD *)this + 4) = v34 | 0x120;
      *((void *)this + 6) = *((void *)a2 + 5);
      *((_DWORD *)this + 14) = *((_DWORD *)a2 + 12);
      unsigned int v35 = v34 & 0xFFFFFE5F | 0x120;
      int v36 = v34 | 0x1A0;
      if ((*((_DWORD *)a2 + 2) & 0x80) == 0) {
        int v36 = v35;
      }
      *((_DWORD *)this + 4) = v36;
      *((_DWORD *)this + 28) = *((_DWORD *)a2 + 3) / 0x3E8u;
    }
  }
  else if (*((float *)a2 + 12) < 0.00030333)
  {
    if (*((float *)this + 14) >= 0.00030333) {
      v13 |= 0x400u;
    }
    double v50 = *((double *)this + 6) - *((double *)a2 + 5);
    LOBYTE(v54) = 52;
    int v55 = 0;
    __int16 v56 = 147;
    if (fabs(fabs(fabs(BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v50, (const BlueFin::GlSignalId *)&v54, 0))+ -0.000500000024)+ -0.000500000024) > 0.000151663407)v13 |= 0x100u; {
    int v32 = *((_DWORD *)this + 4);
    }
    if ((v32 & 0x20) == 0)
    {
      v13 |= 0x2000u;
      unsigned int v66 = v13;
    }
    *((_DWORD *)this + 4) = v32 | 0x120;
    *((void *)this + 6) = *((void *)a2 + 5);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 28) = *((_DWORD *)a2 + 3) / 0x3E8u;
    if ((*((unsigned char *)a2 + 8) & 0x80) != 0) {
      unsigned int v33 = v32 | 0x1A0;
    }
    else {
      unsigned int v33 = v32 & 0xFFFFFE5F | 0x120;
    }
    *((_DWORD *)this + 4) = v33;
  }
  if (*(unsigned __int16 *)(*((void *)this + 18) + 9856) - 1 > 3)
  {
    unsigned __int16 v39 = (unsigned char *)(*((void *)this + 18) + 9859);
    goto LABEL_102;
  }
  unsigned __int16 v39 = (unsigned char *)(*((void *)this + 18) + 9859);
  if (*(unsigned __int8 *)(*((void *)this + 18) + 9858) - 1 > 3)
  {
LABEL_102:
    unsigned char *v39 = 0;
    goto LABEL_103;
  }
  unsigned char *v39 = 1;
  if ((*((_DWORD *)a2 + 2) & 0xA) == 2)
  {
    int v40 = *((_DWORD *)this + 4);
    if ((v40 & 0xA) == 0)
    {
      *((_DWORD *)this + 4) = v40 | 2;
      *((void *)this + 4) = *((void *)a2 + 3);
      *((_DWORD *)this + 10) = *((_DWORD *)a2 + 8);
      *((_DWORD *)this + 27) = *((_DWORD *)a2 + 3) / 0x3E8u;
    }
  }
  unsigned char *v39 = 1;
  if ((*((_DWORD *)a2 + 2) & 0x120) == 0x20)
  {
    int v41 = *((_DWORD *)this + 4);
    if ((v41 & 0x120) == 0)
    {
      *((_DWORD *)this + 4) = v41 | 0x20;
      *((void *)this + 6) = *((void *)a2 + 5);
      *((_DWORD *)this + 14) = *((_DWORD *)a2 + 12);
      *((_DWORD *)this + 28) = *((_DWORD *)a2 + 3) / 0x3E8u;
    }
  }
LABEL_103:
  float v42 = *((float *)this + 7);
  int v43 = (int)(float)(v42 * 1000000000.0) / 50;
  if (*((unsigned __int16 *)this + 40) == (unsigned __int16)v43) {
    __int16 v44 = v13;
  }
  else {
    __int16 v44 = v13 | 0x1020;
  }
  if ((v44 & 0x1020) != 0) {
    *((_WORD *)this + 40) = v43;
  }
  unsigned int v66 = v44 & 0x1FBF;
  if ((v44 & 0x1FBF) != 0)
  {
    uint64_t v45 = *((void *)this + 17);
    if (v45)
    {
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v45 + 16))(v45, 1, &v66);
      float v42 = *((float *)this + 7);
    }
  }
  if (vabds_f32(v42, v6) <= 0.000001 && (v66 & 8) == 0 && !(v14 | (v66 >> 10) & 1))
  {
    if (*(unsigned __int16 *)(*((void *)this + 18) + 9856) - 1 > 3
      || *(unsigned __int8 *)(*((void *)this + 18) + 9858) - 1 > 3)
    {
      *(unsigned char *)(*((void *)this + 18) + 9859) = 0;
      goto LABEL_116;
    }
    *(unsigned char *)(*((void *)this + 18) + 9859) = 1;
  }
  int v54 = 0;
  uint64_t v46 = *((void *)this + 17);
  if (v46) {
    (*(void (**)(uint64_t, uint64_t, int *))(*(void *)v46 + 16))(v46, 2, &v54);
  }
LABEL_116:
  uint64_t result = (*(uint64_t (**)(BlueFin::GlMeClkModMgr *, void **, void))(*(void *)this + 24))(this, &v57, *((unsigned int *)a2 + 3));
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (*((uint64_t (**)(void **, void, void))v57 + 3))(&v57, 0, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlMeMiniKF::UpdateClkModel(BlueFin::GlMeMiniKF *this, int a2, int a3)
{
  unsigned int v27 = &unk_270EBF258;
  unint64_t v30 = 0x36A7C5AC00000000;
  double SubBitAndEpochTime = 0.0;
  float v32 = 3.4028e38;
  double v33 = 0.0;
  float v34 = 3.4028e38;
  double v35 = 0.0;
  uint64_t v36 = 0x36A7C5AC7F7FFFFFLL;
  int v28 = 0;
  int v29 = a2;
  int v5 = a3 & 0xA;
  if (v5 != 10)
  {
    if ((a3 & 8) == 0) {
      goto LABEL_21;
    }
    if (*((_DWORD *)this + 40) != a2)
    {
      int v25 = "m_otMskfCbGps.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms";
      DeviceFaultNotify("glme_mkf.cpp", 449, "mskfGetClkModUpdate", (char)"m_otMskfCbGps.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms");
      int v26 = 449;
      goto LABEL_53;
    }
    int v28 = 8;
    float v13 = *((double *)this + 17);
    float v32 = sqrtf(v13);
    double v40 = *((double *)this + 15);
    v37[0] = 1;
    int v38 = 0;
    __int16 v39 = 0;
    double SubEpochTime = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double SubBitAndEpochTime = SubEpochTime;
    int v28 = 264;
    float v34 = v32;
    goto LABEL_20;
  }
  if (*((_DWORD *)this + 40) != a2)
  {
    int v25 = "m_otMskfCbGps.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms";
    DeviceFaultNotify("glme_mkf.cpp", 367, "mskfGetClkModUpdate", (char)"m_otMskfCbGps.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms");
    int v26 = 367;
    goto LABEL_53;
  }
  int v28 = 10;
  float v6 = *((double *)this + 17);
  float v32 = sqrtf(v6);
  double v40 = *((double *)this + 15);
  v37[0] = 1;
  int v38 = 0;
  __int16 v39 = 0;
  int v28 = 298;
  float v34 = v32;
  double SubBitAndEpochTime = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
  double v33 = SubBitAndEpochTime;
  if ((a3 & 4) != 0)
  {
    int v28 = 430;
    *(float *)&uint64_t v36 = v32;
    double v16 = *((double *)this + 15);
    goto LABEL_31;
  }
  if ((~a3 & 0x160) == 0)
  {
    double v40 = *((double *)this + 15);
    v37[0] = 1;
    int v38 = 0;
    __int16 v39 = 0;
    double SubBitTime = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double v40 = *((double *)this + 15);
    v37[0] = 1;
    int v38 = 0;
    __int16 v39 = 0;
    double v8 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double v40 = *((double *)this + 31);
    v37[0] = 52;
    int v38 = 0;
    __int16 v39 = 147;
    double v9 = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double v40 = *((double *)this + 31);
    v37[0] = 52;
    int v38 = 0;
    __int16 v39 = 147;
    double v10 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    if (v9 < 0.001) {
      double v9 = v9 + 0.02;
    }
    double v11 = v9 - SubBitTime;
    if (v9 - SubBitTime < 0.0) {
      double v11 = -(v9 - SubBitTime);
    }
    if (v11 > 0.005 && fmod(0.02 - v11, 0.02) > 0.005) {
      double v9 = v9 + 0.01;
    }
    double v40 = v10 + v9;
    v37[0] = 52;
    int v38 = 0;
    __int16 v39 = 147;
    double v33 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double v12 = v10 - v8;
    if (v10 - v8 < 0.0) {
      double v12 = -(v10 - v8);
    }
    if (v12 > 0.0005)
    {
      if (v10 <= v8) {
        double v9 = v9 + -0.001;
      }
      else {
        double v9 = v9 + 0.001;
      }
    }
    double v40 = v8 + v9;
    v37[0] = 1;
    int v38 = 0;
    __int16 v39 = 0;
    double v23 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double SubEpochTime = SubBitAndEpochTime;
    double v24 = SubBitAndEpochTime - v23;
    if (SubBitAndEpochTime - v23 < 0.0) {
      double v24 = -v24;
    }
    if (v24 < 0.003 || fmod(0.02 - v24, 0.02) < 0.003)
    {
      double SubBitAndEpochTime = v23;
      v28 |= 0x84u;
      if ((a3 & 0x400) == 0) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }
LABEL_20:
    double v33 = SubEpochTime;
  }
LABEL_21:
  if ((~a3 & 0x120) == 0)
  {
    if (*((_DWORD *)this + 72) != v29)
    {
      int v25 = "m_otMskfCbGlns.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms";
      DeviceFaultNotify("glme_mkf.cpp", 464, "mskfGetClkModUpdate", (char)"m_otMskfCbGlns.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms");
      int v26 = 464;
      goto LABEL_53;
    }
    v28 |= 0x120u;
    float v15 = *((double *)this + 33);
    float v34 = sqrtf(v15);
    double v40 = *((double *)this + 31);
    v37[0] = 52;
    int v38 = 0;
    __int16 v39 = 147;
    double v16 = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    double v33 = v16;
    if ((a3 & 0x80) != 0)
    {
      v28 |= 0x8Eu;
      double SubBitAndEpochTime = v16;
      float v32 = v34;
      *(float *)&uint64_t v36 = v34;
LABEL_31:
      double v40 = v16;
      v37[0] = -117;
      int v38 = 0;
      __int16 v39 = 453;
      double v35 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
      v28 |= 0x400u;
    }
LABEL_32:
    if ((a3 & 0x400) == 0) {
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  if ((a3 & 0x100) == 0 || v5 == 10) {
    goto LABEL_32;
  }
  if (*((_DWORD *)this + 72) != v29)
  {
    int v25 = "m_otMskfCbGlns.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms";
    DeviceFaultNotify("glme_mkf.cpp", 490, "mskfGetClkModUpdate", (char)"m_otMskfCbGlns.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms");
    int v26 = 490;
    goto LABEL_53;
  }
  v28 |= 0x100u;
  float v17 = *((double *)this + 33);
  float v34 = sqrtf(v17);
  double v40 = *((double *)this + 31);
  v37[0] = 52;
  int v38 = 0;
  __int16 v39 = 147;
  double v33 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
  if ((a3 & 0x400) != 0)
  {
LABEL_33:
    if ((v28 & 0x400) == 0)
    {
      if (*((_DWORD *)this + 104) != v29)
      {
        int v25 = "m_otMskfCbGal.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms";
        DeviceFaultNotify("glme_mkf.cpp", 501, "mskfGetClkModUpdate", (char)"m_otMskfCbGal.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms");
        int v26 = 501;
        goto LABEL_53;
      }
      v28 |= 0x400u;
      float v18 = *((double *)this + 49);
      LODWORD(v36) = sqrtf(v18);
      double v40 = *((double *)this + 47);
      v37[0] = -117;
      int v38 = 0;
      __int16 v39 = 453;
      double v35 = BlueFin::GlSystemTime::getSubEpochTime((BlueFin::GlSystemTime *)&v40, (const BlueFin::GlSignalId *)v37, 1u);
    }
  }
LABEL_36:
  if ((a3 & 0x10) != 0)
  {
    if (*((_DWORD *)this + 16) == v29)
    {
      v28 |= 0x10u;
      *(float *)&unsigned int v19 = *((double *)this + 3);
      float v20 = *((double *)this + 5);
      unint64_t v30 = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v20)), v19);
      goto LABEL_39;
    }
    int v25 = "m_otMskfCbDot.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms";
    DeviceFaultNotify("glme_mkf.cpp", 511, "mskfGetClkModUpdate", (char)"m_otMskfCbDot.GetTimeStampLms() == potClkModUpdate->ulTimeStampLms");
    int v26 = 511;
LABEL_53:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_mkf.cpp", v26, v25);
  }
LABEL_39:
  uint64_t v21 = (*(uint64_t (**)(void, void **))(**((void **)this + 1) + 16))(*((void *)this + 1), &v27);
  BlueFin::GlMeClkMod::Print((BlueFin::GlMeClkMod *)&v27, "MKF");
  return v21;
}

float BlueFin::GlMeClkMod::Print(BlueFin::GlMeClkMod *this, const char *a2)
{
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xAF);
  }
  float result = fminf(*((float *)this + 5), 1.0);
  *((float *)this + 8) = fminf(*((float *)this + 8), 604800.0);
  float v4 = fminf(*((float *)this + 12), 86400.0);
  *((float *)this + 5) = result;
  *((float *)this + 12) = v4;
  *((float *)this + 16) = fminf(*((float *)this + 16), 604800.0);
  *((float *)this + 17) = result;
  return result;
}

double BlueFin::GlMeSkfCb::Init(BlueFin::GlMeSkfCb *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = *((void *)this + 7);
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 12) = 0;
  *((unsigned char *)this + 52) = 1;
  double result = *((double *)this + 10);
  *((double *)this + 5) = result;
  *((_DWORD *)this + 22) = 0;
  *((unsigned char *)this + 120) = 1;
  return result;
}

_DWORD *BlueFin::GlMeSkfCb::UpdateFlagsForFirstBlock(_DWORD *this)
{
  int v1 = 0;
  this[22] = 0;
  unsigned int v2 = this[12];
  unsigned int v3 = this[27];
  BOOL v5 = v2 >= v3;
  unsigned int v4 = v2 - v3;
  BOOL v5 = !v5 || v4 >= 0x927C0;
  if (!v5)
  {
    int v1 = 32;
    this[22] = 32;
  }
  unsigned int v6 = this[26];
  BOOL v5 = v2 >= v6;
  unsigned int v7 = v2 - v6;
  if (v5)
  {
    if (v7 >= 0x927C0) {
      return this;
    }
    int v13 = 48;
    goto LABEL_17;
  }
  unsigned int v8 = this[28];
  BOOL v5 = v2 >= v8;
  unsigned int v9 = v2 - v8;
  if (v5)
  {
    if (v9 >> 4 > 0x752) {
      return this;
    }
    int v13 = v1 | 8;
    goto LABEL_17;
  }
  unsigned int v10 = this[29];
  BOOL v5 = v2 >= v10;
  unsigned int v11 = v2 - v10;
  if (v5 && v11 < 0x927C0)
  {
    int v13 = v1 | 4;
LABEL_17:
    this[22] = v13;
  }
  return this;
}

#error "2639FA7A4: call analysis failed (funcsize=2058)"

void sub_2639FB35C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlPeLtoReader::isRto(BlueFin::GlSetBase **this)
{
  unsigned int v3 = &v5;
  char v4 = 3;
  uint64_t v5 = 0;
  int v6 = 0;
  for (unsigned int i = 56; i != 84; ++i)
    *((_DWORD *)&v5 + (i >> 5)) |= 1 << i;
  return BlueFin::GlSetBase::HasAny(this[1346], (const BlueFin::GlSetBase *)&v3);
}

BOOL BlueFin::GlSetBase::HasAny(BlueFin::GlSetBase *this, const BlueFin::GlSetBase *a2)
{
  if (*((unsigned __int8 *)a2 + 8) >= *((unsigned __int8 *)this + 8)) {
    unint64_t v2 = *((unsigned __int8 *)this + 8);
  }
  else {
    unint64_t v2 = *((unsigned __int8 *)a2 + 8);
  }
  if (!v2) {
    return 0;
  }
  if ((**(_DWORD **)a2 & **(_DWORD **)this) != 0) {
    return 1;
  }
  uint64_t v4 = 1;
  do
  {
    unint64_t v5 = v4;
    if (v2 == v4) {
      break;
    }
    int v6 = *(_DWORD *)(*(void *)this + 4 * v4);
    int v7 = *(_DWORD *)(*(void *)a2 + 4 * v4++);
  }
  while ((v7 & v6) == 0);
  return v5 < v2;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateQzsNonL1ClkErrTgd(uint64_t result, uint64_t a2, unsigned __int8 *a3, char a4, int a5)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a3)
  {
    int v6 = a3;
    uint64_t v7 = result;
    if (a5) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = 10;
    }
    unsigned int v27 = off_270EC1848;
    uint64_t v28 = result + 1648;
    unsigned int v9 = &off_270EBC600;
    do
    {
      if (*v6 <= 9u && *((_DWORD *)v6 + 1) == 1)
      {
        uint64_t v36 = &unk_270EC1830;
        int v37 = 3;
        long long v10 = *((_OWORD *)v6 + 1);
        long long v39 = *(_OWORD *)v6;
        long long v40 = v10;
        char v38 = a4;
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          ((void (*)(void **, void, void))v27)(&v36, 0, 0);
        }
        if ((a4 & 1) == 0) {
          BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(v28, 3, v6);
        }
        double result = *(void *)(v7 + 88);
        if (!*(_DWORD *)(result + 2576)) {
          goto LABEL_28;
        }
        BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)result, 1, &v29);
        float v32 = v9;
        unint64_t v33 = 0;
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v29, (BlueFin::GlGpsTime *)&v32);
        unsigned int v11 = v9;
        unint64_t v12 = (unint64_t)v9;
        int v13 = *((unsigned __int16 *)v6 + 15);
        int v14 = 300 * *((unsigned __int16 *)v6 + 10);
        unint64_t v15 = v12;
        v29.n128_u64[0] = v12;
        double v16 = fmod((double)v14, 1.0);
        if (v16 < 0.0 || v16 >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        double v18 = v16 * 4294967300.0 + 0.5;
        unsigned int v19 = v18;
        if (v18 >= 4294967300.0) {
          unsigned int v19 = -1;
        }
        v29.n128_u32[2] = v19;
        v29.n128_u32[3] = v14 + 604800 * v13;
        v29.n128_u64[0] = v15;
        unint64_t v35 = __PAIR64__(v29.n128_u32[3], v19);
        unsigned int v20 = ((uint64_t (*)(void *))v32[4])(&v32);
        unsigned int v9 = v11;
        v34[0] = v33;
        v34[1] = v20;
        BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v35, v34, 0x24EA0000u);
        double result = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v32[3])(&v32, HIDWORD(v35));
        unsigned int v21 = v33;
        unsigned int v22 = HIDWORD(v33);
        char v23 = result | v35;
        if (result | v35)
        {
          if (v33 < __PAIR64__(result, v35))
          {
            unsigned int v22 = (__PAIR64__((int)result - HIDWORD(v33), v35) - v33) >> 32;
            unsigned int v21 = v35 - v33;
            char v23 = 1;
          }
          else
          {
            char v23 = 0;
            unsigned int v22 = (v33 - __PAIR64__(result, v35)) >> 32;
            unsigned int v21 = v33 - v35;
          }
        }
        double v24 = (double)v21 * 2.32830644e-10 + (double)v22;
        if ((v23 & ((v22 | v21) != 0)) != 0) {
          double v24 = -v24;
        }
        if (v24 <= 604800.0)
        {
LABEL_28:
          long long v25 = *((_OWORD *)v6 + 1);
          __n128 v29 = *(__n128 *)v6;
          long long v30 = v25;
          LOBYTE(v31) = a4;
          HIBYTE(v31) = 1;
          if (v29.n128_u8[0] <= 9uLL)
          {
            uint64_t v26 = *(void *)(*(void *)(v7 + 80) + 7376) + 36 * v29.n128_u8[0] + 2072;
            double result = BlueFin::GlPeGpsQzssAltNavData::IsBetterThan((unsigned __int8 *)&v29, (unsigned __int8 *)v26);
            if (result)
            {
              *(__n128 *)uint64_t v26 = v29;
              *(_OWORD *)(v26 + 16) = v30;
              *(_WORD *)(v26 + 32) = v31;
            }
          }
        }
      }
      v6 += 32;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t BlueFin::GlPeGpsQzssAltNavData::IsBetterThan(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == 255) {
    return 0;
  }
  if (*a2 == 255) {
    return 1;
  }
  unsigned int v2 = *((unsigned __int16 *)a2 + 15);
  unsigned int v3 = *((unsigned __int16 *)a1 + 15);
  BOOL v4 = v2 > v3 || v2 == v3 && *((unsigned __int16 *)a2 + 10) > *((unsigned __int16 *)a1 + 10);
  BOOL v6 = v2 != v3 || *((unsigned __int16 *)a2 + 10) != *((unsigned __int16 *)a1 + 10);
  if (v4 && a2[32]) {
    return 0;
  }
  int v7 = a1[32];
  if (v4)
  {
    if (!a1[32]) {
      return 0;
    }
    int v7 = 1;
  }
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = a2[32] == 0;
  }
  return v8 || v6;
}

__n128 BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v3 = *a3;
  if (v3 <= 0x3E)
  {
    uint64_t v4 = 0;
    v12[0] = a1 + 20164;
    v12[1] = 0x1000000000;
    char v5 = 1;
    int v13 = 1;
    uint64_t v14 = a1 + 21316;
    result.n128_u64[0] = 0x1300000003;
    uint64_t v15 = 0x1300000003;
    int v16 = 1;
    while (1)
    {
      char v7 = v5;
      if (LODWORD(v12[3 * v4 + 1]) == a2 && LODWORD(v12[3 * v4 + 2]) == *((_DWORD *)a3 + 1)) {
        break;
      }
      char v5 = 0;
      uint64_t v4 = 1;
      if ((v7 & 1) == 0) {
        return result;
      }
    }
    BOOL v8 = &v12[3 * v4];
    uint64_t v9 = *v8;
    *(_DWORD *)(a1 + 24816) |= 1 << *((_WORD *)v8 + 6);
    if (v9)
    {
      __n128 result = *(__n128 *)a3;
      long long v10 = *((_OWORD *)a3 + 1);
      unsigned int v11 = (_OWORD *)(v9 + 32 * v3);
      *unsigned int v11 = *(_OWORD *)a3;
      v11[1] = v10;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::SetUncmprsdSystemOffset(_DWORD *a1, int *a2)
{
  int v2 = a2[1];
  if (*a2 == -1 || v2 == -1) {
    return 0;
  }
  BOOL v6 = &a1[5 * v2 + 1171];
  if (v6 != a2)
  {
    *BOOL v6 = *a2;
    char v7 = &a1[5 * v2];
    v7[1172] = v2;
    *((_WORD *)v7 + 2346) = *((_WORD *)a2 + 4);
    *((void *)v7 + 587) = *(void *)(a2 + 3);
  }
  if (!a1[644])
  {
    uint64_t result = 0;
    *((unsigned char *)a1 + a2[1] + 3100) = 1;
    return result;
  }
  GlCustomLog(14, "GlPeTimeManager::SetUncmprsdSystemOffset(%u): Received UncmprsdSystemOffset:  From:%s  To:%s  GpsToa: [%d %u]  A0(ns):%.2lf\n", a1[642], BlueFin::GlPeTimeManager::m_acTimeSystemImage[*a2], BlueFin::GlPeTimeManager::m_acTimeSystemImage[a2[1]], *((unsigned __int16 *)a2 + 4), a2[3], (double)a2[4] * 0.01);
  BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)a1, 1, v45);
  uint64_t v46 = &off_270EBC600;
  unint64_t v47 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlGpsTime *)&v46);
  int v8 = *((unsigned __int16 *)a2 + 4);
  unsigned int v9 = a2[3];
  float v42 = &off_270EBC600;
  double v10 = fmod((double)v9, 1.0);
  if (v10 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v11 = v10 * 4294967300.0 + 0.5;
  unsigned int v12 = v11;
  if (v11 >= 4294967300.0) {
    unsigned int v12 = -1;
  }
  unsigned __int32 v43 = v12;
  unsigned int v44 = v9 + 604800 * v8;
  float v42 = &off_270EBC600;
  v45[0].n128_u64[0] = __PAIR64__(v44, v12);
  unsigned int v13 = ((uint64_t (*)(void))v46[4])(&v46);
  float v32 = (void (**)(BlueFin::GlGalTime *__hidden))__PAIR64__(v13, v47);
  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)v45, (unsigned int *)&v32, 0x24EA0000u);
  unsigned int v14 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v46[3])(&v46, v45[0].n128_u32[1]);
  unsigned __int32 v43 = v45[0].n128_u32[0];
  unsigned int v44 = v14;
  unsigned int v15 = v47;
  unsigned int v16 = HIDWORD(v47);
  char v17 = v14 | v45[0].n128_u8[0];
  if (__PAIR64__(v45[0].n128_u32[0], v14))
  {
    if (v47 < __PAIR64__(v14, v45[0].n128_u32[0]))
    {
      unsigned int v16 = (__PAIR64__(v14 - HIDWORD(v47), v45[0].n128_u32[0]) - v47) >> 32;
      unsigned int v15 = v45[0].n128_u32[0] - v47;
      char v17 = 1;
    }
    else
    {
      char v17 = 0;
      unsigned int v16 = (v47 - __PAIR64__(v14, v45[0].n128_u32[0])) >> 32;
      unsigned int v15 = v47 - v45[0].n128_u32[0];
    }
  }
  double v19 = (double)v15 * 2.32830644e-10 + (double)v16;
  if ((v17 & ((v16 | v15) != 0)) != 0) {
    double v19 = -v19;
  }
  if (v19 > 1512000.0)
  {
    GlCustomLog(13, "GlPeTimeManager::SetUncmprsdSystemOffset(%u): data too old:  AgeWk:%.0lf  ThreshWk:%.1lf\n");
    return 0;
  }
  uint64_t v20 = *a2;
  if (v20 >= 6 || ((0x3Bu >> v20) & 1) == 0)
  {
    GlCustomLog(13, "GlPeTimeManager::SetUncmprsdSystemOffset(%u): From Time system is not supported by the build\n");
    return 0;
  }
  uint64_t v21 = a2[1];
  if (v21 >= 6 || ((0x3Bu >> v21) & 1) == 0)
  {
    GlCustomLog(13, "GlPeTimeManager::SetUncmprsdSystemOffset(%u): To Time system is not supported by the build\n");
    return 0;
  }
  uint64_t v22 = qword_263BBE410[v20];
  uint64_t v23 = qword_263BBE410[v21];
  int v24 = a2[4];
  BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)a1, (const BlueFin::GlGpsTime *)&v42, 1, (uint64_t)v45);
  switch(*a2)
  {
    case 0:
      float v32 = &off_270EBC600;
      uint64_t v33 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlGpsTime *)&v32);
      unsigned int v25 = ((uint64_t (*)(void))v32[4])(&v32);
      break;
    case 1:
      float v32 = &off_270EBF4E8;
      uint64_t v33 = 0;
      BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlGlnsTime *)&v32);
      unsigned int v25 = ((uint64_t (*)(void))v32[4])(&v32);
      break;
    case 2:
      BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlUtcTime *)&v32);
      unsigned int v25 = ((uint64_t (*)(void))v32[4])(&v32);
      break;
    case 3:
      float v32 = &off_270EBF538;
      uint64_t v33 = 0;
      BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlGalTime *)&v32);
      unsigned int v25 = ((uint64_t (*)(void))v32[4])(&v32);
      break;
    case 4:
      float v32 = &off_270EBF588;
      uint64_t v33 = 0;
      BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlBdsTime *)&v32);
      unsigned int v25 = ((uint64_t (*)(void))v32[4])(&v32);
      break;
    case 5:
      float v32 = &off_270EBF080;
      uint64_t v33 = 0;
      BlueFin::GlPeGnssTime::GetNic((BlueFin::GlPeGnssTime *)v45, (BlueFin::GlNicTime *)&v32);
      unsigned int v25 = ((uint64_t (*)(void))v32[4])(&v32);
      break;
    default:
      return 0;
  }
  LODWORD(v26) = v33;
  double v27 = (double)v26 * 2.32830644e-10 + (double)v25;
  double v28 = fmod(v27, 4294967300.0);
  if (v27 <= 4294967300.0) {
    double v28 = v27;
  }
  if (v28 < -4294967300.0) {
    double v28 = -fmod(-v28, 4294967300.0);
  }
  if (v28 < 0.0) {
    unsigned int v29 = --v28;
  }
  else {
    unsigned int v29 = v28;
  }
  v34[0] = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v22];
  char v39 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v23];
  __int16 v40 = v29 / 0x93A80;
  __int16 v35 = (v29 % 0x93A80) >> 4;
  double v30 = fmod((double)v24 * -1.0e-11 / 2.91038305e-11, 4294967300.0);
  if ((double)v24 * -1.0e-11 / 2.91038305e-11 <= 4294967300.0) {
    double v30 = (double)v24 * -1.0e-11 / 2.91038305e-11;
  }
  if (v30 < -4294967300.0) {
    double v30 = -fmod(-v30, 4294967300.0);
  }
  if (v30 < 0.0) {
    unsigned int v31 = --v30;
  }
  else {
    unsigned int v31 = v30;
  }
  unsigned int v36 = v31;
  __int16 v37 = 0;
  char v38 = 0;
  char v41 = 0x80;
  return BlueFin::GlPeTimeManager::SetGnssTimeModel((BlueFin::GlPeTimeManager *)a1, (unsigned __int8 *)v34, 0.0005);
}

uint64_t BlueFin::GlPeTimeManager::SetGnssTimeModel(BlueFin::GlPeTimeManager *this, unsigned __int8 *a2, float a3)
{
  v78[0] = &unk_270EC9780;
  float v81 = 4295000000.0;
  long long v80 = 0uLL;
  v78[1] = &off_270EBC600;
  uint64_t v79 = 0;
  if (*((_DWORD *)this + 644))
  {
    BlueFin::GlPeTimeManager::GetTime(this, 1, v77);
    uint64_t v62 = &off_270EBC600;
    uint64_t v63 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlGpsTime *)&v62);
    uint64_t v79 = v63;
  }
  long long v80 = *(_OWORD *)a2;
  float v81 = a3;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(void *, void, void))(v78[0] + 24))(v78, 0, 0);
  }
  uint64_t result = 0;
  uint64_t v7 = *a2;
  if (v7 != 4 && v7 != 8)
  {
    uint64_t v8 = a2[11];
    if (v8 != 4 && v8 != 8)
    {
      unsigned int v9 = BlueFin::GlImplGnss::m_aucImplGnssTable[v8];
      unsigned int v10 = BlueFin::GlPeGnssTime::Gnss2TimeSystem(BlueFin::GlImplGnss::m_aucImplGnssTable[v7]);
      unsigned int v11 = BlueFin::GlPeGnssTime::Gnss2TimeSystem(v9);
      if (v11 == v10)
      {
        return 0;
      }
      else
      {
        unsigned int v12 = v11;
        if (*((_DWORD *)this + 644))
        {
          int v13 = *((_DWORD *)a2 + 1);
          int v14 = *((__int16 *)a2 + 4);
          int v15 = (char)a2[10];
          BlueFin::GlPeTimeManager::GetTime(this, 1, v77);
          unsigned int v16 = *((unsigned __int16 *)a2 + 6);
          uint64_t v17 = 16 * *((unsigned __int16 *)a2 + 1);
          double v18 = (double)(unint64_t)v17;
          switch(v10)
          {
            case 0u:
              uint64_t v62 = &off_270EBC600;
              uint64_t v63 = 0;
              BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlGpsTime *)&v62);
              long long v71 = &off_270EBC600;
              double v19 = fmod(v18, 1.0);
              if (v19 >= 1.0)
              {
                DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
              }
              double v20 = v19 * 4294967300.0 + 0.5;
              unsigned int v21 = v20;
              if (v20 >= 4294967300.0) {
                unsigned int v21 = -1;
              }
              unsigned int v72 = v21;
              unsigned int v73 = v17 + 604800 * v16;
              long long v71 = &off_270EBC600;
              unsigned int v84 = v21;
              unsigned int v85 = v73;
              int v22 = ((uint64_t (*)(void))v62[4])(&v62);
              unsigned int v82 = v63;
              int v83 = v22;
              BlueFin::GlTimePoint::resolveAmbiguity(&v84, &v82, 0x24EA0000u);
              int v23 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v62[3])(&v62, v85);
              unsigned int v75 = v84;
              int v76 = v23;
              uint64_t v74 = &off_270EBC600;
              int v24 = ((uint64_t (*)(void))v62[4])(&v62);
              int v25 = ((uint64_t (*)(void))v74[4])(&v74);
              goto LABEL_39;
            case 1u:
              uint64_t v62 = &off_270EBF4E8;
              uint64_t v63 = 0;
              BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlGlnsTime *)&v62);
              double v43 = fmod(v18, 86400.0);
              BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)&v74, ((v17 / 0x15180 - v16 + 8 * v16) / 0x5B5 + 1), (unsigned __int16)((v17 / 0x15180 - v16 + 8 * v16) % 0x5B5 + 1), v43);
              int v24 = ((uint64_t (*)(void))v62[4])(&v62);
              int v25 = ((uint64_t (*)(void))v74[4])(&v74);
              goto LABEL_39;
            case 2u:
              uint64_t v62 = (void (**)(BlueFin::GlGalTime *__hidden))&unk_270EC23C8;
              uint64_t v63 = 0;
              BOOL v31 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
              if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
                BOOL v31 = 0;
              }
              BOOL v32 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
              BOOL v33 = v31 && v32;
              if (v31 && v32) {
                int v34 = 431999;
              }
              else {
                int v34 = 432000;
              }
              unsigned int v35 = v34 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
              __int16 v64 = 1980;
              __int16 v65 = v35 / 0x15180 + 1;
              char v66 = 1;
              char v67 = v35 / 0x15180 + 1;
              LOBYTE(v34) = 60;
              if (v33)
              {
                LOBYTE(v36) = 59;
                LOBYTE(v37) = 23;
              }
              else
              {
                unsigned int v37 = v35 % 0x15180 / 0xE10;
                unsigned int v36 = (2185 * (v35 - 3600 * ((1193047 * (unint64_t)v35) >> 32))) >> 17;
                int v34 = v35 - 60 * ((71582789 * (unint64_t)v35) >> 32);
              }
              char v68 = v37;
              char v69 = v36;
              char v70 = v34;
              BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlUtcTime *)&v62);
              unsigned int v60 = ((uint64_t (*)(void))v62[4])(&v62);
              LODWORD(v61) = v63;
              int v49 = (int)((double)v61 * 2.32830644e-10 + (double)v60 - (v18 + (double)v16 * 604800.0));
              goto LABEL_40;
            case 3u:
              uint64_t v62 = &off_270EBF538;
              uint64_t v63 = 0;
              BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlGalTime *)&v62);
              long long v71 = &off_270EBF538;
              double v38 = fmod(v18, 1.0);
              if (v38 >= 1.0)
              {
                DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
              }
              double v39 = v38 * 4294967300.0 + 0.5;
              unsigned int v40 = v39;
              if (v39 >= 4294967300.0) {
                unsigned int v40 = -1;
              }
              unsigned int v72 = v40;
              unsigned int v73 = v17 + 604800 * v16 + 619315200;
              long long v71 = &off_270EBF538;
              unsigned int v84 = v40;
              unsigned int v85 = v17 + 604800 * v16;
              int v41 = ((uint64_t (*)(void))v62[4])(&v62);
              unsigned int v82 = v63;
              int v83 = v41;
              BlueFin::GlTimePoint::resolveAmbiguity(&v84, &v82, 0x93A80000);
              int v42 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v62[3])(&v62, v85);
              unsigned int v75 = v84;
              int v76 = v42;
              uint64_t v74 = &off_270EBF538;
              int v24 = ((uint64_t (*)(void))v62[4])(&v62);
              int v25 = ((uint64_t (*)(void))v74[4])(&v74);
              goto LABEL_39;
            case 4u:
              uint64_t v62 = &off_270EBF588;
              uint64_t v63 = 0;
              BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlBdsTime *)&v62);
              long long v71 = &off_270EBF588;
              double v26 = fmod(v18, 1.0);
              if (v26 >= 1.0)
              {
                DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
              }
              double v27 = v26 * 4294967300.0 + 0.5;
              unsigned int v28 = v27;
              if (v27 >= 4294967300.0) {
                unsigned int v28 = -1;
              }
              unsigned int v72 = v28;
              unsigned int v73 = v17 + 604800 * v16 + 820108814;
              long long v71 = &off_270EBF588;
              unsigned int v84 = v28;
              unsigned int v85 = v17 + 604800 * v16;
              int v29 = ((uint64_t (*)(void))v62[4])(&v62);
              unsigned int v82 = v63;
              int v83 = v29;
              BlueFin::GlTimePoint::resolveAmbiguity(&v84, &v82, 0x27500000u);
              int v30 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v62[3])(&v62, v85);
              unsigned int v75 = v84;
              int v76 = v30;
              uint64_t v74 = &off_270EBF588;
              int v24 = ((uint64_t (*)(void))v62[4])(&v62);
              int v25 = ((uint64_t (*)(void))v74[4])(&v74);
              goto LABEL_39;
            case 5u:
              uint64_t v62 = &off_270EBF080;
              uint64_t v63 = 0;
              BlueFin::GlPeGnssTime::GetNic((BlueFin::GlPeGnssTime *)v77, (BlueFin::GlNicTime *)&v62);
              long long v71 = &off_270EBF080;
              double v44 = fmod(v18, 1.0);
              if (v44 >= 1.0)
              {
                DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
              }
              double v45 = v44 * 4294967300.0 + 0.5;
              unsigned int v46 = v45;
              if (v45 >= 4294967300.0) {
                unsigned int v46 = -1;
              }
              unsigned int v72 = v46;
              unsigned int v73 = v17 + 604800 * v16 + 619315200;
              long long v71 = &off_270EBF080;
              unsigned int v84 = v46;
              unsigned int v85 = v17 + 604800 * v16;
              int v47 = ((uint64_t (*)(void))v62[4])(&v62);
              unsigned int v82 = v63;
              int v83 = v47;
              BlueFin::GlTimePoint::resolveAmbiguity(&v84, &v82, 0x24EA0000u);
              int v48 = ((uint64_t (*)(void (***)(BlueFin::GlGalTime *__hidden), void))v62[3])(&v62, v85);
              unsigned int v75 = v84;
              int v76 = v48;
              uint64_t v74 = &off_270EBF080;
              int v24 = ((uint64_t (*)(void))v62[4])(&v62);
              int v25 = ((uint64_t (*)(void))v74[4])(&v74);
LABEL_39:
              int v49 = v24 - v25;
LABEL_40:
              double v50 = (double)v15 * 3.38813179e-21;
              if (v49 >= 0) {
                unsigned int v51 = v49;
              }
              else {
                unsigned int v51 = -v49;
              }
              float v52 = 5.0;
              if (v51 < 0x15180) {
                float v52 = 2.0;
              }
              if (a3 != 4295000000.0) {
                float v52 = a3 * 1000.0;
              }
              double v53 = (double)v13 * 2.91038305e-11 + (double)v14 * 4.4408921e-16 * (double)v49;
              double v54 = (double)(v49 * v49);
              double v55 = v53 + v50 * v54;
              if (v12 >= v10) {
                unsigned int v56 = v10;
              }
              else {
                unsigned int v56 = v12;
              }
              if (v12 <= v10) {
                unsigned int v57 = v10;
              }
              else {
                unsigned int v57 = v12;
              }
              double v58 = -(v53 + v50 * v54);
              if (v12 < v10) {
                double v58 = v55;
              }
              unsigned int v59 = v57 + ~v56 + (((11 - v56) * v56) >> 1);
              *((double *)this + (int)v59 + 401) = v58;
              *((float *)this + (int)v59 + 832) = v52 * 0.001;
              GlCustomLog(14, "GlPeTimeManager::SetGnssTimeModel(%u): Accepted time model  from:%s  to:%s  A0(ns):%.1lf  A0_unc(ns):%.0f\n", *((_DWORD *)this + 642), BlueFin::GlPeTimeManager::m_acTimeSystemImage[v10], BlueFin::GlPeTimeManager::m_acTimeSystemImage[v12], v58 * 1000000000.0, (float)((float)(v52 * 0.001) * 1000.0));
              BlueFin::GlPeTimeManager::updateConversionTable(this);
              uint64_t result = 1;
              break;
            default:
              return 0;
          }
        }
        else
        {
          uint64_t result = 1;
          *((unsigned char *)this + v12 + 3100) = 1;
          *(_OWORD *)((char *)this + 16 * v12 + 3108) = *(_OWORD *)a2;
        }
      }
    }
  }
  return result;
}

_DWORD *BlueFin::GlCryptoMd5::final(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v19[1] = *MEMORY[0x263EF8340];
  BlueFin::GlCryptoMd5::update((_DWORD *)a1, a2, a3);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = v4 + 1;
  *(unsigned char *)(a1 + 40 + v4) = 0x80;
  uint64_t v5 = *(unsigned __int8 *)(a1 + 104);
  if (v5 < 0x39)
  {
    if (v5 == 56) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v5 <= 0x3F)
    {
      uint64_t v6 = v5 + 40;
      do
      {
        int v7 = (v6 - 39);
        *(unsigned char *)(a1 + 104) = v6 - 39;
        *(unsigned char *)(a1 + v6++) = 0;
      }
      while (v7 != 64);
    }
    BlueFin::GlCryptoMd5::md5_dgst_blk((_DWORD *)a1, (const char *)(a1 + 40));
    LODWORD(v5) = 0;
  }
  uint64_t v8 = v5 + 40;
  do
  {
    int v9 = (v8 - 39);
    *(unsigned char *)(a1 + 104) = v8 - 39;
    *(unsigned char *)(a1 + v8++) = 0;
  }
  while (v9 != 56);
LABEL_9:
  unsigned int v10 = (const float *)(a1 + 36);
  unsigned int v11 = (const float *)(a1 + 32);
  uint32x4_t v12 = (uint32x4_t)vld1q_dup_f32(v11);
  uint32x4_t v13 = (uint32x4_t)vld1q_dup_f32(v10);
  int16x8_t v14 = (int16x8_t)vshlq_u32(v12, (uint32x4_t)xmmword_263BAAD80);
  *(int16x4_t *)v14.i8 = vmovn_s32((int32x4_t)v14);
  v14.i32[0] = vmovn_s16(v14).u32[0];
  int16x8_t v15 = (int16x8_t)vshlq_u32(v13, (uint32x4_t)xmmword_263BAAD80);
  *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)v15);
  v14.i32[1] = vmovn_s16(v15).u32[0];
  v19[0] = v14.i64[0];
  uint64_t result = BlueFin::GlCryptoMd5::update((_DWORD *)a1, (uint64_t)v19, 8u);
  uint64_t v17 = 0;
  double v18 = (unsigned char *)(a1 + 8);
  do
  {
    *(v18 - 8) = *(_DWORD *)(a1 + 16) >> v17;
    *(v18 - 4) = *(_DWORD *)(a1 + 20) >> v17;
    *double v18 = *(_DWORD *)(a1 + 24) >> v17;
    v18[4] = *(_DWORD *)(a1 + 28) >> v17;
    v17 += 8;
    ++v18;
  }
  while (v17 != 32);
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyLtoFileGpsTimestampsReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint32x4_t v13 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalLtoFileGpsTimestampsReport(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t BlueFin::GlPeLtoReader::UpdatePex(BlueFin::GlPeLtoReader *this, void *a2, int a3)
{
  if (!*((void *)this + 1399)) {
    return 0;
  }
  if (*((unsigned char *)this + 10784))
  {
    if (*((void *)this + 1245) != *a2 || *((void *)this + 1246) != a2[1])
    {
      uint64_t v6 = (_DWORD *)*((void *)this + 1349);
      if (v6) {
        *uint64_t v6 = 5;
      }
      uint64_t result = 0;
      *((_DWORD *)this + 2702) = 5;
      return result;
    }
  }
  uint64_t v8 = (BlueFin::GlPeLtoMgr *)*((void *)this + 1347);
  if (v8)
  {
    int v9 = (__n128 *)((char *)this + 9960);
    if (a3) {
      BlueFin::GlPeLtoMgr::SetRtoDigest((uint64_t)v8, v9);
    }
    else {
      BlueFin::GlPeLtoMgr::SetLtoDigest(v8, v9, 1);
    }
  }
  uint64_t result = BlueFin::GlPeLtoReader::CheckExpiration(this, (uint64_t)a2);
  if (result)
  {
    unsigned int v10 = (__int16 *)((char *)this + 50704);
    __int16 v11 = *((_WORD *)this + 25352);
    __int16 v12 = v11 & 0xFFFD;
    if (!a3) {
      __int16 v12 = *((_WORD *)this + 25352);
    }
    if ((v11 & 4) != 0)
    {
      __int16 v13 = v12 & 0xFFFB;
      BlueFin::GlPeLtoReader::SendToPex((uint64_t)this, 5u, a3, (v12 & 0xFFFB) == 0);
      __int16 v11 = *v10;
      __int16 v12 = v13;
      if ((*v10 & 8) == 0)
      {
LABEL_20:
        if ((v11 & 0x20) == 0) {
          goto LABEL_21;
        }
        goto LABEL_29;
      }
    }
    else if ((v11 & 8) == 0)
    {
      goto LABEL_20;
    }
    __int16 v14 = v12 & 0xFFF7;
    BlueFin::GlPeLtoReader::SendToPex((uint64_t)this, 4u, a3, (v12 & 0xFFF7) == 0);
    __int16 v11 = *v10;
    __int16 v12 = v14;
    if ((*v10 & 0x20) == 0)
    {
LABEL_21:
      if ((v11 & 0x10) == 0) {
        goto LABEL_22;
      }
      goto LABEL_30;
    }
LABEL_29:
    __int16 v15 = v12 & 0xFFDF;
    BlueFin::GlPeLtoReader::SendToPex((uint64_t)this, 3u, a3, (v12 & 0xFFDF) == 0);
    __int16 v11 = *v10;
    __int16 v12 = v15;
    if ((*v10 & 0x10) == 0)
    {
LABEL_22:
      if ((v11 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_31;
    }
LABEL_30:
    __int16 v16 = v12 & 0xFFEF;
    BlueFin::GlPeLtoReader::SendToPex((uint64_t)this, 6u, a3, (v12 & 0xFFEF) == 0);
    __int16 v11 = *v10;
    __int16 v12 = v16;
    if ((*v10 & 1) == 0)
    {
LABEL_23:
      if ((v11 & 2) == 0) {
        return 1;
      }
LABEL_24:
      BlueFin::GlPeLtoReader::SendToPex((uint64_t)this, 2u, a3, (v12 & 0xFFFD) == 0);
      return 1;
    }
LABEL_31:
    __int16 v17 = v12 & 0xFFFE;
    BlueFin::GlPeLtoReader::SendToPex((uint64_t)this, 0, a3, (v12 & 0xFFFE) == 0);
    __int16 v12 = v17;
    if ((*v10 & 2) == 0) {
      return 1;
    }
    goto LABEL_24;
  }
  return result;
}

__n128 BlueFin::GlPeLtoMgr::SetRtoDigest(uint64_t a1, __n128 *a2)
{
  int v2 = (__n128 *)(a1 + 1617);
  uint64_t v3 = *(void *)(a1 + 1617) | *(void *)(a1 + 1625);
  if (*(_OWORD *)(a1 + 1617) != 0) {
    LOBYTE(v3) = v2->n128_u64[0] != a2->n128_u64[0] || *(void *)(a1 + 1625) != a2->n128_u64[1];
  }
  *(unsigned char *)(a1 + 1633) = v3;
  if (v2 != a2)
  {
    __n128 result = *a2;
    *int v2 = *a2;
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalLtoFileGpsTimestampsReport(BlueFin::GlDbgCodec *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v18 = a3;
  int v19 = a2;
  int v17 = a7;
  if (!*((void *)result + 101))
  {
    __int16 v13 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 564);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, (unsigned int *)&v19);
    }
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, (unsigned int *)&v18);
    }
    unsigned int v16 = a4;
    BlueFin::GlDbgCodec::Write(v13, &v16);
    unsigned int v16 = a5;
    BlueFin::GlDbgCodec::Write(v13, &v16);
    unsigned int v16 = a6;
    BlueFin::GlDbgCodec::Write(v13, &v16);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, (unsigned int *)&v17);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v13 + 32))(v13, 1);
    __int16 v14 = (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v13 + 868);
    if (v14) {
      v14((char *)v13 + 608, a2, a3, a4, a5, a6, a7);
    }
    BlueFin::GlDbgCodec::WriteFinal(v13, 564);
    __int16 v15 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v13 + 32);
    return (BlueFin::GlDbgCodec *)v15(v13, 1);
  }
  return result;
}

uint64_t gnss::FireGnssDevice::setConfigRfBandEnable(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigRfBandEnable,L1,%d,L5,%d", a3, a4, a5, a6, a7, a8, a2);
  int updated = FireMessageHandler::updateRfBandEnable(*(FireMessageHandler **)(a1 + 40), a2, a3, v12, v13, v14, v15, v16);

  return std::function<void ()(gnss::Result)>::operator()(a4, updated);
}

uint64_t FireMessageHandler::updateRfBandEnable(FireMessageHandler *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  FireDeviceLog::DeviceLogBase(6, "#fmh,updateRfBandEnable,L1,%d,L5,%d", a3, a4, a5, a6, a7, a8, a2);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  if ((*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 56))(*(void *)(FireResourceMgr::fInstance + 40)))
  {
    if (a2 & 1) != 0 || (v8)
    {
      int v18 = a2 & v8 ^ 1;
      if (!a2) {
        int v18 = 2;
      }
      *((_DWORD *)this + 536) = v18;
      FireMessageHandler::send((uint64_t)this, 1073741842, v11, v12, v13, v14, v15, v16);
      return 1;
    }
    else
    {
      FireDeviceLog::DeviceLogBase(2, "#fmh,updateRfBandEnable,bothDisabled", v11, v12, v13, v14, v15, v16, v19);
      return 4;
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(5, "#fmh,updateRfBandEnable,noL5Support,kUnavailable", v11, v12, v13, v14, v15, v16, v19);
    return 7;
  }
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnSyncinReportCurrentTime(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 112) = a2;
  uint64_t v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3084);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, unsigned int, uint64_t, unsigned int, BOOL, BOOL, double)))(**(void **)(a1 + 24) + 80))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnSyncinReportCurrentTime);
  __n128 result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3084);
    uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

uint64_t BlueFin::GlRequestImplSyncin::SetOnSyncinReportCurrentTime(uint64_t result, uint64_t a2)
{
  *(void *)(result + 104) = a2;
  return result;
}

uint64_t BlueFin::GlPeGalTimeMgr::SetUtcModel(BlueFin::GlPeGalTimeMgr *this, const BlueFin::GlPeGalUtcModelData *a2)
{
  int v2 = *((unsigned __int16 *)a2 + 6);
  unsigned int v3 = *((_DWORD *)a2 + 4);
  int v4 = *((_DWORD *)this + 6);
  int v5 = *((_DWORD *)a2 + 2);
  if (v4) {
    BOOL v6 = v5 < v4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v3 / 0x3E8 + 604800 * v2 <= *((_DWORD *)this + 8) / 0x3E8u + 604800 * *((unsigned __int16 *)this + 14)) {
    return 0;
  }
  unsigned int v10 = (BlueFin::GlPeGalTimeMgr *)((char *)this + 16);
  if (BlueFin::GlPeGalUtcModelData::operator==((uint64_t)this + 16, (uint64_t)a2)) {
    return 0;
  }
  if (v10 != a2)
  {
    *((_DWORD *)this + 6) = v5;
    *((_WORD *)this + 14) = v2;
    *((_DWORD *)this + 8) = v3;
    *(_OWORD *)((char *)this + 36) = *(_OWORD *)((char *)a2 + 20);
  }
  uint64_t result = 1;
  *((unsigned char *)this + 56) = 1;
  return result;
}

BOOL BlueFin::GlPeGalUtcModelData::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(unsigned __int8 *)(a1 + 30) == *(unsigned __int8 *)(a2 + 30)
      && *(unsigned __int8 *)(a1 + 28) == *(unsigned __int8 *)(a2 + 28)
      && *(unsigned __int8 *)(a1 + 29) == *(unsigned __int8 *)(a2 + 29)
      && *(unsigned __int8 *)(a1 + 31) == *(unsigned __int8 *)(a2 + 31)
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33);
}

#error "2639FDA80: call analysis failed (funcsize=531)"

uint64_t BlueFin::GlPeTimeManager::outputCurrentTime(BlueFin::GlPeTimeManager *this)
{
  GlCustomLog(15, "GlPeTimeManager::CurrentTime:  LMS:%u", *((_DWORD *)this + 642));
  if (*((_DWORD *)this + 644))
  {
    BlueFin::GlPeTimeManager::GetTime(this, 1, v53);
    uint64_t v52 = 0;
    unsigned int v51 = &off_270EBC600;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v53, (BlueFin::GlGpsTime *)&v51);
    double v3 = v2;
    unsigned int v4 = ((unsigned int (*)(void))v51[4])(&v51) / 0x93A80;
    unsigned int v5 = ((uint64_t (*)(void))v51[4])(&v51);
    LODWORD(v6) = v52;
    GlCustomLog(15, "  GPS(Week:%4hu TowS:%16.9lf uncUs:%7.3lf)", v4, (double)v6 * 2.32830644e-10 + (double)(v5 % 0x93A80), v3);
    uint64_t v50 = 0;
    int v49 = &off_270EBF4E8;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v53, (BlueFin::GlGlnsTime *)&v49);
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v53, (BlueFin::GlGlnsTime *)&v49);
    double v8 = v7;
    BOOL v11 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && HIDWORD(v50) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    unsigned int v12 = (((unsigned int (*)(void))v49[4])(&v49) - v11) / 0x7861F80;
    BOOL v15 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && HIDWORD(v50) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    BOOL v16 = 0;
    unint64_t v17 = (203613265 * (unint64_t)((((unsigned int (*)(void))v49[4])(&v49) - v15) % 0x7861F80)) >> 44;
    if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
      && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
    {
      BOOL v16 = HIDWORD(v50) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    }
    unsigned int v18 = v12 + 1;
    int v19 = v17 + 1;
    unsigned int v20 = ((uint64_t (*)(void))v49[4])(&v49);
    if (v16) {
      double v22 = 10799.0;
    }
    else {
      double v22 = (double)(v20 % 0x15180);
    }
    LODWORD(v21) = v50;
    GlCustomLog(15, "  GLO(N4:%u Nt:%4hu TodS:%15.9lf uncUs:%7.3lf)", v18, v19, v22 + (double)v21 * 2.32830644e-10, v8);
    BlueFin::GlPeTimeManager::GetUtcTime((BlueFin::GlPeTimeManager *)v41, (uint64_t)this);
    double UncUs = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)v53, 2);
    LOBYTE(v25) = v48;
    LODWORD(v26) = v42;
    GlCustomLog(15, "  UTC(%4hu/%02u/%02u %02u:%02u:%012.9lf uncUs:%7.3lf)", v43, v44, v45, v46, v47, (double)v26 * 2.32830644e-10 + (double)v25, UncUs);
    uint64_t v40 = 0;
    double v39 = &off_270EBF538;
    BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v53, (BlueFin::GlGalTime *)&v39);
    double v28 = v27;
    unsigned int v29 = ((unsigned int (*)(void))v39[4])(&v39) / 0x93A80;
    unsigned int v30 = ((uint64_t (*)(void))v39[4])(&v39);
    LODWORD(v31) = v40;
    GlCustomLog(15, "  GAL(Week:%4hu TowS:%16.9lf uncUs:%7.3lf)", v29, (double)v31 * 2.32830644e-10 + (double)(v30 % 0x93A80), v28);
    uint64_t v38 = 0;
    unsigned int v37 = &off_270EBF588;
    BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)v53, (BlueFin::GlBdsTime *)&v37);
    double v33 = v32;
    unsigned int v34 = ((unsigned int (*)(void))v37[4])(&v37) / 0x93A80;
    unsigned int v35 = ((uint64_t (*)(void))v37[4])(&v37);
    LODWORD(v36) = v38;
    GlCustomLog(15, "  BDS(Week:%4hu TowS:%16.9lf uncUs:%7.3lf)", v34, (double)v36 * 2.32830644e-10 + (double)(v35 % 0x93A80), v33);
    return GlCustomLog(15, "\n");
  }
  else
  {
    return GlCustomLog(15, "  <not_initialized>\n");
  }
}

BOOL BlueFin::GlPeTimeManager::SetTime(BlueFin::GlPeTimeManager *this, BlueFin::GlPeGnssTime *a2, unsigned int a3, unsigned __int8 *a4)
{
  unsigned int v4 = a3;
  uint64_t v107 = *MEMORY[0x263EF8340];
  if (a3 - 6 <= 2)
  {
    if (!*((_DWORD *)this + 644)) {
      return 0;
    }
    if (a3 == 6)
    {
      uint64_t v7 = *a4;
      if ((v7 - 1) < 0xBC)
      {
        switch(BlueFin::GlPeGnssTime::Gnss2TimeSystem(BlueFin::GlSvId::s_aucSvId2gnss[v7]))
        {
          case 0u:
          case 5u:
            goto LABEL_10;
          case 1u:
            double v100 = &off_270EBF4E8;
            unint64_t v101 = 0;
            BlueFin::GlPeGnssTime::GetGlns(a2, (BlueFin::GlGlnsTime *)&v100);
            v100[4]((BlueFin::GlGalTime *)&v100);
            v106[0].n128_u64[0] = (unint64_t)&off_270EBF4E8;
            v106[0].n128_u64[1] = 0;
            BlueFin::GlPeGnssTime::GetGlns(a2, (BlueFin::GlGlnsTime *)v106);
            (*(void (**)(__n128 *))(v106[0].n128_u64[0] + 32))(v106);
            goto LABEL_10;
          case 3u:
            double v100 = &off_270EBF538;
            unint64_t v101 = 0;
            BlueFin::GlPeGnssTime::GetGal(a2, (BlueFin::GlGalTime *)&v100);
            if (((unsigned int (*)(void))v100[4])(&v100) < 0x93A80)
            {
              DeviceFaultNotify("glpe_timemgr.cpp", 4029, "SetTime", (char)"rtTime.GetGal().getWeek() != 0");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 4029, "rtTime.GetGal().getWeek() != 0");
            }
            goto LABEL_10;
          case 4u:
            double v100 = &off_270EBF588;
            unint64_t v101 = 0;
            BlueFin::GlPeGnssTime::GetBds(a2, (BlueFin::GlBdsTime *)&v100);
            if (((unsigned int (*)(void))v100[4])(&v100) < 0x93A80)
            {
              DeviceFaultNotify("glpe_timemgr.cpp", 4028, "SetTime", (char)"rtTime.GetBds().getWeek() != 0");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 4028, "rtTime.GetBds().getWeek() != 0");
            }
            goto LABEL_10;
          default:
            double v92 = "0";
            DeviceFaultNotify("glpe_timemgr.cpp", 4032, "SetTime", (char)"0");
            int v93 = 4032;
            goto LABEL_153;
        }
      }
      double v92 = "rotSvId.isValid()";
      DeviceFaultNotify("glpe_timemgr.cpp", 4021, "SetTime", (char)"rotSvId.isValid()");
      int v93 = 4021;
LABEL_153:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", v93, v92);
    }
  }
LABEL_10:
  int v8 = *((_DWORD *)a2 + 2);
  if (v8 == 1)
  {
    double v100 = &off_270EBF4E8;
    unint64_t v101 = 0;
    BlueFin::GlPeGnssTime::GetGlns(a2, (BlueFin::GlGlnsTime *)&v100);
    int v11 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && HIDWORD(v101) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    int v12 = ((uint64_t (*)(void))v100[4])(&v100);
    uint64_t v13 = 0;
    unsigned int v14 = (v12 + (v11 << 31 >> 31)) % 0x7861F80u / 0x15180;
    while (BlueFin::GlPeSpecialTimeEvents::IsNearQuarter(BlueFin::GlGlnsTime const&,short,short)::asGlnsNtQuarter[v13] <= (__int16)v14)
    {
      if (++v13 == 16) {
        goto LABEL_49;
      }
    }
    if (v14 + 1 != (unsigned __int16)BlueFin::GlPeSpecialTimeEvents::IsNearQuarter(BlueFin::GlGlnsTime const&,short,short)::asGlnsNtQuarter[v13]) {
      goto LABEL_49;
    }
    BOOL v16 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && HIDWORD(v101) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    unsigned int v17 = ((uint64_t (*)(void))v100[4])(&v100);
    if (v16) {
      double v19 = 10799.0;
    }
    else {
      double v19 = (double)(v17 % 0x15180);
    }
    LODWORD(v18) = v101;
    double v20 = v19 + (double)v18 * 2.32830644e-10;
    double v21 = fmod(v20, 4294967300.0);
    if (v20 <= 4294967300.0) {
      double v21 = v20;
    }
    if (v21 < -4294967300.0) {
      double v21 = -fmod(-v21, 4294967300.0);
    }
    unsigned int v22 = v21 < 0.0 ? --v21 : v21;
    int v23 = v22 - 10800;
    int v24 = v22 - 10801;
    BOOL v25 = v23 >= 0 || v24 <= -601;
    BOOL v26 = !v25;
    if (v23 >= 0xB4 && !v26)
    {
LABEL_49:
      int v8 = *((_DWORD *)a2 + 2);
      goto LABEL_50;
    }
    GlCustomLog(13, "GlPeTimeManager::SetTime(%u): near quarter boundary so use of GLONASS in TimeMgr is disallowed.", *((_DWORD *)this + 642));
    return 0;
  }
LABEL_50:
  unsigned int v27 = *(_DWORD *)a2;
  unsigned int v28 = *((_DWORD *)a2 + 1);
  LODWORD(v97) = *(_DWORD *)a2;
  HIDWORD(v97) = v28;
  int v98 = v8;
  uint64_t v30 = *((void *)a2 + 2);
  double v29 = *((double *)a2 + 3);
  *(void *)&long long v99 = v30;
  *((double *)&v99 + 1) = v29;
  if (v4 <= 0xA && ((1 << v4) & 0x40C) != 0)
  {
    *((unsigned char *)this + 2564) = 0;
    BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v100);
    LODWORD(v101) = v101 | 1;
    unsigned int v102 = v4;
    unint64_t v103 = __PAIR64__(v28, v27);
    int v104 = v8;
    *(void *)&long long v105 = v30;
    *((double *)&v105 + 1) = v29;
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      ((void (*)(void (***)(BlueFin::GlGalTime *__hidden), void, void))v100[3])(&v100, 0, 0);
      double v29 = *((double *)&v99 + 1);
    }
    if (v29 > 50000000.0)
    {
      GlCustomLog(11, "GlPeTimeManager::SetTime(%u): Coarse time assistance rejected because uncertainty too high!  SetTimeUncS:%.0lf\n", *((_DWORD *)this + 642), v29 * 0.000001);
      return 0;
    }
    if (v4 == 10)
    {
      if (v29 > 250000.0)
      {
        GlCustomLog(13, "GlPeTimeManager::SetTime(%u): Unsolicited Fine time assistance rejected because uncertainty too high!  SetTimeUncS:%.3f  ThresholdS:%.3f\n", *((_DWORD *)this + 642), v29 * 0.000001, 0.25);
        return 0;
      }
      v106[0].n128_u64[0] = (unint64_t)&off_270EBC600;
      v106[0].n128_u64[1] = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v97, (BlueFin::GlGpsTime *)v106);
      unsigned int v32 = (*(uint64_t (**)(__n128 *))(v106[0].n128_u64[0] + 32))(v106);
      LODWORD(v33) = v106[0].n128_u32[2];
      double v34 = fmod((double)v33 * 2.32830644e-10 + (double)(v32 % 0x93A80), 1.0);
      if (v34 > 0.25 && v34 < 0.75)
      {
        GlCustomLog(13, "GlPeTimeManager::SetTime(%u): Unsolicited Fine time assistance rejected because fraction of a second not in range! FracSec:%.3lf\n", *((_DWORD *)this + 642), v34);
        return 0;
      }
      if (v34 <= 0.25) {
        BlueFin::GlPeGnssTime::operator-=((unsigned int *)&v97, v34);
      }
      else {
        BlueFin::GlPeGnssTime::operator+=((unsigned int *)&v97, 1.0 - v34);
      }
      double v95 = &off_270EBC600;
      unint64_t v96 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v97, (BlueFin::GlGpsTime *)&v95);
      v106[0].n128_u64[1] = v96;
      int v36 = *((_DWORD *)this + 642);
      double v37 = *(double *)&v99;
      unsigned int v38 = (*(uint64_t (**)(__n128 *))(v106[0].n128_u64[0] + 32))(v106);
      unsigned int v39 = (*(uint64_t (**)(__n128 *))(v106[0].n128_u64[0] + 32))(v106);
      LODWORD(v40) = v106[0].n128_u32[2];
      GlCustomLog(14, "GlPeTimeManager::SetTime(%u): Unsolicited Fine time assistance accepted. LMS:%.6lf  GpsWeek:%d  GpsTowS:%.9lf\n", v36, v37, v38 / 0x93A80, (double)v40 * 2.32830644e-10 + (double)(v39 % 0x93A80));
      *((void *)&v99 + 1) = 0x3FF0000000000000;
      unsigned int v4 = 3;
    }
    int v41 = *((_DWORD *)this + 642);
    int v42 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    double v43 = *(double *)&v99;
    v106[0].n128_u64[0] = (unint64_t)&off_270EBC600;
    v106[0].n128_u64[1] = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v97, (BlueFin::GlGpsTime *)v106);
    unsigned int v44 = (*(uint64_t (**)(__n128 *))(v106[0].n128_u64[0] + 32))(v106);
    double v95 = &off_270EBC600;
    unint64_t v96 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v97, (BlueFin::GlGpsTime *)&v95);
    unsigned int v45 = ((uint64_t (*)(void))v95[4])(&v95);
    LODWORD(v46) = v96;
    GlCustomLog(14, "GlPeTimeManager::SetTime(%u): TimeAssistance: OsTime:%u  Lms:%.0lf  GpsWeek:%d  GpsTow:%.6lf\n", v41, v42, v43, v44 / 0x93A80, (double)v46 * 2.32830644e-10 + (double)(v45 % 0x93A80));
    int v8 = v98;
  }
  if (v8 == 5)
  {
    unint64_t v101 = v97;
    double v100 = &off_270EBF080;
    BOOL v47 = (HIDWORD(v97) - 1238630400) < 0xDB160000;
    if ((HIDWORD(v97) - 1238630400) < 0xDB160000) {
      goto LABEL_90;
    }
    int v48 = BlueFin::GlPeTimeManager::handleGps1023WeekRollovers(this, (HIDWORD(v97) - 619315200) / 0x93A80u);
    unsigned int v54 = ((uint64_t (*)(void))v100[4])(&v100);
    LODWORD(v55) = v101;
    double v51 = (double)v55 * 2.32830644e-10 + (double)(v54 % 0x93A80);
    v106[0].n128_u64[0] = (unint64_t)&off_270EBC600;
    double v52 = fmod(v51, 1.0);
    if (v52 < 0.0 || v52 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
  }
  else
  {
    if (v8)
    {
      BOOL v47 = 0;
      goto LABEL_90;
    }
    unint64_t v101 = v97;
    double v100 = &off_270EBC600;
    BOOL v47 = HIDWORD(v97) > 0x24E9FFFF;
    if (HIDWORD(v97) > 0x24E9FFFF) {
      goto LABEL_90;
    }
    int v48 = BlueFin::GlPeTimeManager::handleGps1023WeekRollovers(this, HIDWORD(v97) / 0x93A80);
    unsigned int v49 = ((uint64_t (*)(void))v100[4])(&v100);
    LODWORD(v50) = v101;
    double v51 = (double)v50 * 2.32830644e-10 + (double)(v49 % 0x93A80);
    v106[0].n128_u64[0] = (unint64_t)&off_270EBC600;
    double v52 = fmod(v51, 1.0);
    if (v52 < 0.0 || v52 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
  }
  double v57 = v52 * 4294967300.0 + 0.5;
  unsigned int v58 = v57;
  if (v57 >= 4294967300.0) {
    unsigned int v58 = -1;
  }
  LODWORD(v97) = v58;
  HIDWORD(v97) = v51 + 604800 * v48;
LABEL_90:
  int v59 = *((_DWORD *)this + 644);
  BOOL v31 = v59 == 0;
  if (!v59)
  {
    if ((((unint64_t)*((unsigned int *)this + 678) >> v98) & 1) == 0) {
      return 0;
    }
    if (v98 == 2)
    {
      double v100 = &off_270EBC600;
      unint64_t v101 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v97, (BlueFin::GlGpsTime *)&v100);
      double v73 = v72;
      int v98 = 0;
      unint64_t v97 = v101;
      if (v72 - *((double *)&v99 + 1) >= 1000.0) {
        GlCustomLog(12, "GlPeTimeManager::SetTime(%u): Lost precision of UTC FTA due to conv to GPS!  OrgUncUs:%.3lf  SetTimeUncUs:%.3lf\n", *((_DWORD *)this + 642), *((double *)&v99 + 1), v72);
      }
      *((double *)&v99 + 1) = v73;
      BOOL v47 = 1;
    }
    double v74 = *(double *)&v99;
    if (*(double *)&v99 <= 0.0)
    {
      double v75 = 0.0;
      if (*(double *)&v99 < 0.0) {
        double v75 = ceil(*(double *)&v99 + -0.5);
      }
    }
    else
    {
      double v75 = floor(*(double *)&v99 + 0.5);
    }
    if (vabdd_f64(*(double *)&v99, v75) > 0.0000005)
    {
      BlueFin::GlPeGnssTime::operator+=((unsigned int *)&v97, (v75 - *(double *)&v99) * 0.001);
      *(double *)&long long v99 = v75;
      GlCustomLog(15, "GlPeTimeManager::SetTime(%u): Init time LMS rounded to nearest ms: OrigInitLms:%.6lf  NewLms:%.6lf  FracMs:%.6lf\n", *((_DWORD *)this + 642), v74, v75, v74 - v75);
    }
    double v76 = BlueFin::GlPeGnssTime::GetTodS((BlueFin::GlPeGnssTime *)&v97) * 1000.0;
    if (v76 <= 0.0)
    {
      double v77 = 0.0;
      if (v76 < 0.0) {
        double v77 = ceil(v76 + -0.5);
      }
    }
    else
    {
      double v77 = floor(v76 + 0.5);
    }
    double v78 = v76 - v77;
    if ((unint64_t *)((char *)this + 2608) != &v97)
    {
      *((void *)this + 326) = v97;
      *((_DWORD *)this + 654) = v98;
      *((_OWORD *)this + 164) = v99;
    }
    BlueFin::GlPeGnssTime::operator-=((unsigned int *)this + 652, v78 * 0.001);
    BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v100);
    LODWORD(v101) = v101 | 0x40;
    unint64_t v103 = v97;
    int v104 = v98;
    long long v105 = v99;
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      ((void (*)(void (***)(BlueFin::GlGalTime *__hidden), void, void))v100[3])(&v100, 0, 0);
    }
    *((_DWORD *)this + 644) = v4;
    BlueFin::GlPeGpsTimeMgr::OnInitialTime((BlueFin::GlPeTimeManager *)((char *)this + 64), (BlueFin::GlPeTimeManager *)((char *)this + 2608));
    if (*((unsigned char *)this + 2589) && *((_DWORD *)this + 644))
    {
      LOBYTE(v95) = 0;
      BlueFin::GlPeTimeManager::GetTime(this, 1, v106);
      unsigned int LeapSecFromHardcodedSchedule = BlueFin::GlPeTimeManager::getLeapSecFromHardcodedSchedule((BlueFin::GlPeTimeManager *)v106, (const BlueFin::GlPeGnssTime *)&v95, v79);
      BlueFin::GlPeTimeManager::updateLeapSeconds(this, v95, 2, LeapSecFromHardcodedSchedule, -128);
    }
    BlueFin::GlPeTimeManager::UpdateLeapSecFromGpsUtcModel(this);
    uint64_t v81 = 3100;
    uint64_t v82 = 4684;
    uint64_t v83 = 3108;
    do
    {
      if (*((unsigned char *)this + v81))
      {
        if (*((unsigned char *)this + v83) == 7)
        {
          unsigned int v84 = (int *)((char *)this + v82);
          if (*(_DWORD *)((char *)this + v82) != -1 && v84[1] != -1) {
            BlueFin::GlPeTimeManager::SetUncmprsdSystemOffset(this, v84);
          }
        }
        else
        {
          BlueFin::GlPeTimeManager::SetGnssTimeModel(this, (unsigned __int8 *)this + v83, 4295000000.0);
        }
        *((unsigned char *)this + v81) = 0;
      }
      ++v81;
      v82 += 20;
      v83 += 16;
    }
    while (v81 != 3106);
    BlueFin::GlPeTimeManager::updateConversionTable(this);
    BlueFin::GlPeSpecialTimeEvents::ScheduleTimeEvents((BlueFin::GlPeTimeManager *)((char *)this + 3388), this);
    int v85 = *((_DWORD *)this + 642);
    uint64_t v86 = BlueFin::GlPeTimeManager::m_acTimeSourceImage[*((unsigned int *)this + 644)];
    uint64_t v87 = *((int *)this + 654);
    unsigned int v88 = BlueFin::GlPeTimeManager::m_acTimeSystemImage[v87];
    double v89 = *((double *)this + 328);
    BlueFin::GlPeGnssTime::GetStdString((BlueFin::GlPeTimeManager *)((char *)this + 2608), v87, (BlueFin::GlFormat *)v106);
    GlCustomLog(14, "GlPeTimeManager::SetTime(%u): Time Manager Initialized  Source:%s  Time(%s):[Lms:%.3lf %s]", v85, v86, v88, v89, (const char *)v106);
    unsigned int v90 = *a4;
    if (*a4)
    {
      if (v90 >= 0x21)
      {
        if (v90 < 0x34)
        {
          double v91 = "SBAS";
        }
        else if (v90 >= 0x42)
        {
          if (v90 >= 0x4C)
          {
            if (v90 < 0x8B)
            {
              double v91 = "BDS";
            }
            else
            {
              double v91 = "<->";
              if (v90 < 0xAF) {
                double v91 = "GAL";
              }
            }
          }
          else
          {
            double v91 = "QZSS";
          }
        }
        else
        {
          double v91 = "GLNS";
        }
      }
      else
      {
        double v91 = "GPS";
      }
      GlCustomLog(14, " Gnss:%s  SvId:%d", v91, v90);
    }
    GlCustomLog(14, "\n");
    BlueFin::GlPeStartupMgr::Update(*((BlueFin::GlPeStartupMgr **)this + 6));
    if (!*((_DWORD *)this + 644)) {
      return 1;
    }
  }
  if (*((unsigned __int8 *)this + 3424) == 255)
  {
    int v60 = (v98 - 1) < 4 || v47;
    if (v60 == 1) {
      BlueFin::GlPeTimeManager::setNumGps1023WeekRollovers((uint64_t)this, (const BlueFin::GlPeGnssTime *)&v97);
    }
  }
  BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *(double *)&v99, 0, (uint64_t)&v95);
  double v61 = BlueFin::GlPeGnssTime::operator-((unsigned int *)&v95, (uint64_t)&v97);
  double UncUs = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)&v97, v96);
  BlueFin::GlPeTimeManager::SetDtsS((unint64_t)this, v4, a4, *(double *)&v99, v61, UncUs);
  if (v59)
  {
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *(double *)&v99, 1, (uint64_t)v106);
    double v63 = BlueFin::GlPeGnssTime::operator-((unsigned int *)&v97, (uint64_t)v106);
    double v64 = *((double *)&v99 + 1);
    double v65 = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)v106, v98);
    int v66 = v98;
    int v67 = *((_DWORD *)this + 642);
    if (fabs(v63) * 1000000.0 >= v64 + v65) {
      char v68 = "Warning! Time outside of unc";
    }
    else {
      char v68 = "Time within unc";
    }
    double v69 = *(double *)&v99;
    BlueFin::GlPeGnssTime::GetStdString((BlueFin::GlPeGnssTime *)&v97, v98, (BlueFin::GlFormat *)&v100);
    GlCustomLog(14, "GlPeTimeManager::CheckTimeWithinExpectedUnc(%u): %s  Lms:%.6lf  TimeMgr=[%s]", v67, v68, v69, (const char *)&v100);
    char v70 = BlueFin::GlPeTimeManager::m_acTimeSystemImage[v106[0].n128_i32[2]];
    BlueFin::GlPeGnssTime::GetStdString((BlueFin::GlPeGnssTime *)v106, v66, (BlueFin::GlFormat *)&v100);
    GlCustomLog(14, "  TimeSys:%s  Time=[%s]  Delta:%.9lf sec\n", v70, (const char *)&v100, v63);
  }
  return v31;
}

double BlueFin::GlPeGnssTime::GetUncUs(uint64_t a1, int a2)
{
  if (!BlueFin::GlPeGnssTime::m_potConversionTable)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 393, "GetUncUs", (char)"m_potConversionTable != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 393, "m_potConversionTable != nullptr");
  }
  double v2 = 0.0;
  if (*(_DWORD *)(a1 + 8) != a2) {
    double v2 = *(float *)(BlueFin::GlPeGnssTime::m_potConversionTable + 4 * a2 + 48);
  }
  return *(double *)(a1 + 24) + v2;
}

BlueFin::GlPeTimeManagerData *BlueFin::GlPeTimeManagerData::GlPeTimeManagerData(BlueFin::GlPeTimeManagerData *this)
{
  *(void *)this = &unk_270EC9750;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 14) = -1;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  memset_pattern16((char *)this + 112, &unk_263BBE270, 0x18uLL);
  *((_DWORD *)this + 39) = 2;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = -1;
  *(_OWORD *)((char *)this + 40) = xmmword_263BB40A0;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 152) = 0x80;
  return this;
}

uint64_t BlueFin::GlPeTimeManager::updateLeapSeconds(BlueFin::GlPeTimeManager *this, unsigned __int8 a2, int a3, unsigned int a4, int a5)
{
  if (!a3)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 6248, "updateLeapSeconds", (char)"eSource != LEAP_SEC_SRC_INVALID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 6248, "eSource != LEAP_SEC_SRC_INVALID");
  }
  int v7 = *((_DWORD *)this + 646);
  int v8 = *((_DWORD *)this + 648);
  unsigned __int8 v9 = a2 + 14;
  if (a3 != 5) {
    unsigned __int8 v9 = a2;
  }
  int v10 = *((unsigned __int8 *)this + 2588);
  int v11 = (char)v9;
  unsigned int v12 = (v9 - 11);
  if (v10 != v9)
  {
    if (v12 < 0x13)
    {
      if (!v7) {
        goto LABEL_15;
      }
LABEL_9:
      int v14 = *((char *)this + 2588) - (char)v9;
      if (v14 < 0) {
        int v14 = (char)v9 - *((char *)this + 2588);
      }
      if (v14 == 1)
      {
        *((unsigned char *)this + 2604) = v10;
        *((_DWORD *)this + 650) = v7;
      }
      else
      {
LABEL_15:
        *((_DWORD *)this + 650) = 0;
        *((unsigned char *)this + 2604) = 0x80;
      }
      *((unsigned char *)this + 2588) = v9;
      *((unsigned char *)this + 2589) = a4;
      *((_DWORD *)this + 646) = 1 << a3;
      unsigned int v16 = *((_DWORD *)this + 848);
      if (v16 < *((_DWORD *)this + 850) || v16 > *((_DWORD *)this + 851)) {
        *((_DWORD *)this + 852) |= 4u;
      }
      int v13 = 1;
      goto LABEL_20;
    }
LABEL_14:
    GlCustomLog(11, "GlPeTimeManager::updateLeapSeconds(%u): Error! Update value out of range!  Source:%s  LeapSec:%d\n", *((_DWORD *)this + 642), off_2655E0620[a3], (char)v9);
    uint64_t v15 = 0;
    goto LABEL_34;
  }
  if (v12 >= 0x13) {
    goto LABEL_14;
  }
  if (*((unsigned __int8 *)this + 2589) > a4) {
    goto LABEL_9;
  }
  int v13 = 0;
  *((_DWORD *)this + 646) = v7 | (1 << a3);
LABEL_20:
  if (a5 == -128) {
    goto LABEL_26;
  }
  unsigned int v17 = a5 - v11;
  if (a5 - v11 < 0) {
    unsigned int v17 = v11 - a5;
  }
  if (v17 > 1)
  {
LABEL_26:
    BOOL v18 = 0;
  }
  else
  {
    if (v8) {
      BOOL v18 = *((unsigned __int8 *)this + 2596) != a5;
    }
    else {
      BOOL v18 = 0;
    }
    *((unsigned char *)this + 2596) = a5;
    *((_DWORD *)this + 648) = v8 | (1 << a3);
  }
  BlueFin::GlPeTimeManager::updateConversionTable(this);
  if (((v13 | v18) & 1) != 0 || !v7 && *((_DWORD *)this + 646) || !v8 && *((_DWORD *)this + 648)) {
    BlueFin::GlPeSpecialTimeEvents::ScheduleTimeEvents((BlueFin::GlPeTimeManager *)((char *)this + 3388), this);
  }
  GlCustomLog(14, "GlPeTimeManager::updateLeapSeconds(%u): Update:[Source:%s  LeapSec:%d]  Accepted:%c\n", *((_DWORD *)this + 642), off_2655E0620[a3], v11, 89);
  uint64_t v15 = 1;
LABEL_34:
  uint64_t v19 = 70;
  if (!*((unsigned char *)this + 2589)) {
    uint64_t v19 = 84;
  }
  GlCustomLog(14, "GlPeTimeManager::updateLeapSeconds(%u): ActiveState:[Valid:%c  LeapSec:%d  Sources:{", *((_DWORD *)this + 642), v19, *((char *)this + 2588));
  int v22 = *((_DWORD *)this + 646);
  int v23 = v22;
  int v21 = 1;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v21);
  while (BYTE1(v21) != v21)
  {
    GlCustomLog(14, "%s ", off_2655E0620[SHIWORD(v21)]);
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v21);
  }
  GlCustomLog(14, "}\n");
  return v15;
}

BlueFin::GlFormat *BlueFin::GlPeGnssTime::GetStdString(BlueFin::GlPeGnssTime *a1, int a2, BlueFin::GlFormat *a3)
{
  switch(a2)
  {
    case -1:
      *(_DWORD *)a3 = 4271950;
      return a3;
    case 0:
      unsigned int v39 = &off_270EBC600;
      uint64_t v40 = 0;
      BlueFin::GlPeGnssTime::GetGps(a1, (BlueFin::GlGpsTime *)&v39);
      goto LABEL_37;
    case 1:
      unsigned int v39 = &off_270EBF4E8;
      uint64_t v40 = 0;
      BlueFin::GlPeGnssTime::GetGlns(a1, (BlueFin::GlGlnsTime *)&v39);
      uint64_t v5 = v4;
      BOOL v8 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
        && HIDWORD(v40) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      unsigned int v9 = (((unsigned int (*)(void))v39[4])(&v39) - v8) / 0x7861F80;
      BOOL v12 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && HIDWORD(v40) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      BOOL v13 = 0;
      unint64_t v14 = (203613265 * (unint64_t)((((unsigned int (*)(void))v39[4])(&v39) - v12) % 0x7861F80)) >> 44;
      if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
      {
        BOOL v13 = HIDWORD(v40) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      }
      uint64_t v15 = v9 + 1;
      uint64_t v16 = (v14 + 1);
      unsigned int v17 = ((uint64_t (*)(void))v39[4])(&v39);
      if (v13) {
        double v20 = 10799.0;
      }
      else {
        double v20 = (double)(v17 % 0x15180);
      }
      LODWORD(v19) = v40;
      BlueFin::GlFormat::glsnprintf(a3, (char *)0x31, "N4:%d Nt:%hd TodS:%.9lf UncUs:%.0lf", v18, v15, v16, v20 + (double)v19 * 2.32830644e-10, v5);
      goto LABEL_42;
    case 2:
      unsigned int v39 = (void (**)(BlueFin::GlGalTime *__hidden))&unk_270EC23C8;
      uint64_t v40 = 0;
      BOOL v21 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
      if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
        BOOL v21 = 0;
      }
      BOOL v22 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
      BOOL v23 = v21 && v22;
      if (v21 && v22) {
        int v24 = 431999;
      }
      else {
        int v24 = 432000;
      }
      unsigned int v25 = v24 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
      unsigned __int16 v41 = 1980;
      __int16 v42 = v25 / 0x15180 + 1;
      unsigned __int8 v43 = 1;
      unsigned __int8 v44 = v25 / 0x15180 + 1;
      LOBYTE(v24) = 60;
      if (v23)
      {
        LOBYTE(v26) = 59;
        LOBYTE(v27) = 23;
      }
      else
      {
        unsigned int v27 = v25 % 0x15180 / 0xE10;
        unsigned int v26 = (2185 * (v25 - 3600 * ((1193047 * (unint64_t)v25) >> 32))) >> 17;
        int v24 = v25 - 60 * ((71582789 * (unint64_t)v25) >> 32);
      }
      unsigned __int8 v45 = v27;
      unsigned __int8 v46 = v26;
      char v47 = v24;
      BlueFin::GlPeGnssTime::GetUtc(a1, (BlueFin::GlUtcTime *)&v39);
      LOBYTE(v34) = v47;
      LODWORD(v35) = v40;
      BlueFin::GlFormat::glsnprintf(a3, (char *)0x31, "%hd/%02d/%02d %02d:%02d:%012.9lf UncUs:%.0lf", v36, v41, v43, v44, v45, v46, (double)v35 * 2.32830644e-10 + (double)v34, v37);
      goto LABEL_42;
    case 3:
      unsigned int v39 = &off_270EBF538;
      uint64_t v40 = 0;
      BlueFin::GlPeGnssTime::GetGal(a1, (BlueFin::GlGalTime *)&v39);
      goto LABEL_37;
    case 4:
      unsigned int v39 = &off_270EBF588;
      uint64_t v40 = 0;
      BlueFin::GlPeGnssTime::GetBds(a1, (BlueFin::GlBdsTime *)&v39);
      goto LABEL_37;
    case 5:
      unsigned int v39 = &off_270EBF080;
      uint64_t v40 = 0;
      BlueFin::GlPeGnssTime::GetNic(a1, (BlueFin::GlNicTime *)&v39);
LABEL_37:
      uint64_t v29 = v28;
      unint64_t v30 = ((unsigned int (*)(void))v39[4])(&v39) / 0x93A80uLL;
      unsigned int v31 = ((uint64_t (*)(void))v39[4])(&v39);
      LODWORD(v32) = v40;
      BlueFin::GlFormat::glsnprintf(a3, (char *)0x31, "Wk:%d TowS:%.9lf UncUs:%.0lf", v33, v30, (double)v32 * 2.32830644e-10 + (double)(v31 % 0x93A80), v29);
LABEL_42:
      *((unsigned char *)a3 + 49) = 0;
      break;
    default:
      return a3;
  }
  return a3;
}

uint64_t BlueFin::GlPeTimeManager::SetDtsS(unint64_t a1, unsigned int a2, unsigned __int8 *a3, double a4, double a5, double a6)
{
  if (!*(_DWORD *)(a1 + 2576))
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 4556, "SetDtsS", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 4556, "IsValid()");
  }
  double v12 = *(double *)(a1 + 2736);
  double v68 = 0.0;
  double v69 = 0.0;
  BlueFin::GlPeTimeManager::GetDtsS(a1, a4, &v69, &v68, 0, 0);
  int v13 = v68 < a6 && v68 != 4294967300.0;
  unsigned int v14 = a2 - 7;
  if (a2 > 9)
  {
LABEL_50:
    int v15 = 0;
    goto LABEL_7;
  }
  int v15 = 1;
  if (((1 << a2) & 0x268) == 0)
  {
    if (a2 == 1)
    {
      int v15 = 0;
      unsigned int v19 = *(_DWORD *)(a1 + 3628) * *(_DWORD *)(a1 + 3624);
      if (v19 <= 0x2710) {
        unsigned int v19 = 10000;
      }
      BOOL v16 = (double)v19 > a6;
      int v18 = 1;
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_7:
  BOOL v16 = 0;
  if (v14 < 3)
  {
    int v17 = 1;
    goto LABEL_18;
  }
  int v18 = 0;
LABEL_14:
  if (a2 == 3) {
    int v20 = 1;
  }
  else {
    int v20 = v15;
  }
  int v17 = v20 | v16;
  BOOL v16 = v18;
LABEL_18:
  double v21 = fabs(a5);
  if (*(_DWORD *)(a1 + 2748) != 1) {
    BOOL v16 = 0;
  }
  int v22 = v16 & v13;
  if (v12 == 4294967300.0)
  {
    if (v21 < 100.0) {
      char v27 = 1;
    }
    else {
      char v27 = v15;
    }
    if ((v27 & 1) == 0)
    {
      uint64_t v23 = 0;
      goto LABEL_46;
    }
    *(double *)(a1 + 2720) = a4;
    *(double *)(a1 + 2728) = a5;
    *(double *)(a1 + 2736) = a6;
    *(double *)(a1 + 2760) = a5;
    goto LABEL_36;
  }
  uint64_t v23 = 0;
  int v24 = v17 & ~v13;
  if (a6 < 1.0 && v14 < 3) {
    int v24 = 1;
  }
  char v26 = v15 ^ 1;
  if (v21 < 100.0) {
    char v26 = 0;
  }
  if (v26 & 1) == 0 && ((v24 | v22))
  {
    *(double *)(a1 + 2720) = a4;
    *(double *)(a1 + 2728) = a5;
    *(double *)(a1 + 2736) = a6;
LABEL_36:
    BlueFin::GlPeTimeManager::cacheGnssTime(a1);
    if (a6 <= 1.0 && !*(unsigned char *)(a1 + 2752))
    {
      BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v63);
      LODWORD(v64) = v64 | 0x40;
      BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)a1, 1, &v61);
      unint64_t v65 = v61.n128_u64[0];
      unsigned __int32 v66 = v61.n128_u32[2];
      long long v67 = v62;
      if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        ((void (*)(void (***)(BlueFin::GlGpsTime *__hidden), void, void))v63[3])(&v63, 0, 0);
      }
      *(unsigned char *)(a1 + 2752) = 1;
    }
    if (v22) {
      *(unsigned char *)(a1 + 3704) = 1;
    }
    *(_DWORD *)(a1 + 2748) = a2;
    uint64_t v23 = 1;
  }
LABEL_46:
  if (v21 >= 100.0) {
    goto LABEL_53;
  }
  int v28 = *(_DWORD *)(a1 + 2744) | (1 << a2);
  *(_DWORD *)(a1 + 2744) = v28;
  if (a2 == 5)
  {
    int v29 = 80;
  }
  else
  {
    if (a2 != 9) {
      goto LABEL_53;
    }
    int v29 = 256;
  }
  *(_DWORD *)(a1 + 2744) = v29 | v28;
LABEL_53:
  if ((v15 | v23) == 1 && (v21 >= 100.0 || *(_DWORD *)(a1 + 2580) != 5))
  {
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)a1, a4, 1, (uint64_t)&v61);
    if (a2 <= 9 && ((1 << a2) & 0x268) != 0)
    {
      BlueFin::GlPeTimeManager::GetTime((unsigned int *)a1, *(double *)&v62, 0, (uint64_t)&v63);
      double v30 = BlueFin::GlPeGnssTime::operator-((unsigned int *)&v61, (uint64_t)&v63);
      double v31 = *((double *)&v62 + 1);
      double v32 = *((double *)&v62 + 1) * 0.000001 + 100.0;
      double v33 = fabs(v30);
      if (v33 >= v32)
      {
        GlCustomLog(11, "GlPeTimeManager::verifyInitialTime(%u): Gross difference between initial time and %s time (%.3lf > %.0lf sec). Error assumed in initial time. Reset required!", *(_DWORD *)(a1 + 2568), BlueFin::GlPeTimeManager::m_acTimeSourceImage[a2], v33, *((double *)&v62 + 1) * 0.000001 + 100.0);
        if (*a3) {
          GlCustomLog(11, "  SVID:%d", *a3);
        }
        GlCustomLog(11, "\n");
        int v34 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
        *(_DWORD *)(a1 + 3584) = v34;
        if ((__n128 *)(a1 + 3592) != &v61)
        {
          *(void *)(a1 + 3592) = v61.n128_u64[0];
          *(_DWORD *)(a1 + 3600) = v61.n128_u32[2];
          *(_OWORD *)(a1 + 3608) = v62;
        }
        unsigned int v35 = -7200001;
        int v36 = *(_DWORD *)(a1 + 2568);
        if (v36 != -7200001)
        {
          int v37 = *(_DWORD *)(a1 + 2572);
          if (v37) {
            unsigned int v35 = v36 + v34 - v37;
          }
          else {
            unsigned int v35 = *(_DWORD *)(a1 + 2568);
          }
        }
        unsigned int v38 = BlueFin::GlPeGnssTime::operator+=((unsigned int *)(a1 + 3592), ((double)v35 - *(double *)(a1 + 3608)) * 0.001);
        *(double *)(a1 + 3608) = (double)v35;
        int v60 = *(_DWORD *)(a1 + 2568);
        int v59 = *(_DWORD *)(a1 + 3584);
        uint64_t v64 = 0;
        double v63 = &off_270EBC600;
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v38, (BlueFin::GlGpsTime *)&v63);
        unsigned int v58 = ((unsigned int (*)(void))v63[4])(&v63) / 0x93A80;
        uint64_t v71 = 0;
        double v70 = COERCE_DOUBLE(&off_270EBC600);
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)(a1 + 3592), (BlueFin::GlGpsTime *)&v70);
        unsigned int v39 = (*(uint64_t (**)(double *))(*(void *)&v70 + 32))(&v70);
        LODWORD(v40) = v71;
        GlCustomLog(14, "TimeRecovery(%u): GlPeTimeManager::verifyInitialTime: OsTime:%u  Lms:%u  GpsWeek:%d  GpsTow:%.6lf\n", v60, v59, v35, v58, (double)v40 * 2.32830644e-10 + (double)(v39 % 0x93A80));
        if (*(unsigned char *)(a1 + 4873)) {
          BlueFin::GlPeGnssTime::operator+=((unsigned int *)(a1 + 2608), v30);
        }
        else {
          *(unsigned char *)(a1 + 2768) = 1;
        }
      }
      else if (a2 == 5)
      {
        *(_DWORD *)(a1 + 2580) = 5;
        if (BlueFin::GlUtils::m_ucEnabled)
        {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
          double v31 = *((double *)&v62 + 1);
        }
        GlCustomLog(14, "GlPeTimeManager::VerifyInitTime(%u): TimeErrS:%+.6lf  ErrThreshS:%.0lf  Source:%s  SourceUncUs:%.3lf", *(_DWORD *)(a1 + 2568), v30, v32, "Verified Satellite", v31);
        if (*a3) {
          GlCustomLog(14, "  SVID:%d", *a3);
        }
        GlCustomLog(14, "\n");
      }
    }
  }
  if (!*(unsigned char *)(a1 + 2912))
  {
    if (BlueFin::GlUtils::m_ucEnabled
      && (BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE) & 1) != 0)
    {
      v61.n128_u64[0] = 0;
      double v70 = 0.0;
      BlueFin::GlPeTimeManager::GetDtsS(a1, 0.0, v61.n128_f64, &v70, 0, 0);
      double v41 = v70;
      if (v70 >= 1.0) {
        goto LABEL_90;
      }
      double v42 = *(double *)(a1 + 2760) - v61.n128_f64[0];
      if (BlueFin::GlUtils::m_ucEnabled)
      {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
        double v41 = v70;
      }
      GlCustomLog(14, "GlPeTimeManager::InitTimeSummary(%u):  InitTimeErrS:%+.6lf  InitTimeUncUs:%.3lf  CurTimeUncUs:%.3lf\n", *(_DWORD *)(a1 + 2568), v42, *(double *)(a1 + 2632), v41);
      if (*(_DWORD *)(a1 + 2816) != -1 && *(double *)(a1 + 2832) != 4294967300.0)
      {
        BlueFin::GlPeTimeManager::GetTime((unsigned int *)a1, *(double *)(a1 + 2824), 1, (uint64_t)&v63);
        double v43 = BlueFin::GlPeGnssTime::operator-((unsigned int *)&v63, a1 + 2808);
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
        }
        GlCustomLog(14, "GlPeTimeManager::RtcSummary(%u): SleepTimeS:%.6lf  ErrorInRtcS:%+.6lf  RtcUncUs:%.3lf  CalibratedRtcFreqOffsetPpb:%+.0lf\n", *(_DWORD *)(a1 + 2568), *(double *)(a1 + 2552) * 0.001, v43, *(double *)(a1 + 2832), *(double *)(a1 + 2848) * 1000000000.0);
      }
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
      }
    }
    *(unsigned char *)(a1 + 2912) = 1;
  }
LABEL_90:
  uint64_t v44 = 114;
  if (v21 < 100.0) {
    uint64_t v44 = 82;
  }
  uint64_t v57 = v44;
  uint64_t v45 = 116;
  if (v17) {
    uint64_t v45 = 84;
  }
  uint64_t v46 = 118;
  if (v15) {
    uint64_t v46 = 86;
  }
  uint64_t v56 = v45;
  uint64_t v47 = 110;
  if (v14 < 3) {
    uint64_t v47 = 78;
  }
  uint64_t v48 = 73;
  if (v13) {
    uint64_t v48 = 105;
  }
  uint64_t v49 = 89;
  if (!v23) {
    uint64_t v49 = 78;
  }
  GlCustomLog(14, "GlPeTimeManager::setDts(%u): Accepted:%c  Source:%s  Dt=[lms:%.3lf  dtsS:%.9lf  uncUs:%.3lf] Flags:%c%c%c%c%c", *(_DWORD *)(a1 + 2568), v49, BlueFin::GlPeTimeManager::m_acTimeSourceImage[a2], a4, a5, a6, v48, v47, v46, v56, v57);
  if (v12 == 4294967300.0) {
    int v50 = 0;
  }
  else {
    int v50 = v23;
  }
  if (v50 == 1)
  {
    double v51 = *(double *)(a1 + 2736);
    double v52 = v51 - v68;
    double v53 = vabdd_f64(v51, v68);
    unsigned int v54 = "Degraded";
    if (v52 <= 0.0) {
      unsigned int v54 = "Improved";
    }
    GlCustomLog(14, "  DeltaDtsS:%+.9lf  DeltaUncUs:%.3lf (%s)", *(double *)(a1 + 2728) - v69, v53, v54);
  }
  GlCustomLog(14, "\n");
  return v23;
}

void BlueFin::GlPeFixStatus::SetTime(unsigned int **this)
{
  BlueFin::GlPeTimeManager::GetTime(this[980], *(_DWORD *)this, 1, (uint64_t)v16);
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v16, (uint64_t)(this + 3));
  BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v16, (uint64_t)this + 4);
  double v3 = (BlueFin::GlPeTimeManager *)this[980];
  if (*((_DWORD *)v3 + 644)) {
    unsigned int v4 = *((_DWORD *)v3 + 686) | (1 << *((_DWORD *)v3 + 644));
  }
  else {
    unsigned int v4 = *((_DWORD *)v3 + 686);
  }
  if (*((_DWORD *)v3 + 645) == 5)
  {
    int v5 = 6;
  }
  else if (BlueFin::GlPeTimeManager::IsTimeUncVerified(v3))
  {
    int v5 = 5;
  }
  else if ((v4 & 0x150) != 0)
  {
    int v5 = 4;
  }
  else if ((v4 & 0x80) != 0)
  {
    int v5 = 3;
  }
  else if ((v4 & 4) != 0)
  {
    int v5 = 2;
  }
  else
  {
    int v5 = (v4 >> 1) & 1;
  }
  *((_DWORD *)this + 10) = v5;
  long long v15 = 0uLL;
  LODWORD(v2) = *(_DWORD *)this;
  BlueFin::GlPeTimeManager::GetDtsS((unint64_t)this[980], (double)v2, (double *)&v15 + 1, (double *)&v15, 0, 0);
  double v6 = *((double *)&v15 + 1) * 1000.0;
  double v7 = floor(*((double *)&v15 + 1) * 1000.0);
  double v8 = fmod(v7, 4294967300.0);
  if (v7 <= 4294967300.0) {
    double v8 = v7;
  }
  if (v8 < -4294967300.0) {
    double v8 = -fmod(-v8, 4294967300.0);
  }
  if (v8 < 0.0) {
    signed int v9 = --v8;
  }
  else {
    signed int v9 = v8;
  }
  *((_DWORD *)this + 1042) = v9;
  double v10 = fmod((v6 - (double)v9) * 1000.0 + 0.5, 4294967300.0);
  if ((v6 - (double)v9) * 1000.0 + 0.5 <= 4294967300.0) {
    double v10 = (v6 - (double)v9) * 1000.0 + 0.5;
  }
  if (v10 < -4294967300.0) {
    double v10 = -fmod(-v10, 4294967300.0);
  }
  if (v10 < 0.0) {
    unsigned int v11 = --v10;
  }
  else {
    LOWORD(v11) = v10;
  }
  *((_WORD *)this + 3444) = v11;
  if ((unsigned __int16)v11 == 1000)
  {
    *((_WORD *)this + 3444) = 0;
    *((_DWORD *)this + 1042) = v9 + 1;
  }
  double v12 = *(double *)&v15 + 0.5;
  double v13 = fmod(*(double *)&v15 + 0.5, 4294967300.0);
  if (v12 <= 4294967300.0) {
    double v13 = v12;
  }
  if (v13 < -4294967300.0) {
    double v13 = -fmod(-v13, 4294967300.0);
  }
  if (v13 < 0.0) {
    unsigned int v14 = --v13;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 1) {
    unsigned int v14 = 1;
  }
  *((_DWORD *)this + 1043) = v14;
}

unint64_t BlueFin::GlPeTimeManager::GetDtsS(unint64_t this, double a2, double *a3, double *a4, double *a5, double *a6)
{
  unint64_t v11 = this;
  double v12 = *(double *)(this + 2728);
  double v13 = *(double *)(this + 2736);
  uint64_t v14 = *(void *)(this + 32);
  double v15 = (double)*(__int16 *)(v14 + 2);
  double v16 = (double)*(__int16 *)(v14 + 10);
  double v17 = v13;
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    double v17 = *(double *)(v11 + 2736);
  }
  double v18 = v15 * 0.000000001;
  double v19 = v16 * 0.000000001;
  if (v17 != 4294967300.0)
  {
    double v20 = (a2 - *(double *)(v11 + 2720)) * 0.001;
    double v12 = v12 + v20 * v18;
    double v13 = v13 + fabs(v20) * 1000000.0 * (v19 + 0.000000005);
  }
  if (a3) {
    *a3 = v12;
  }
  if (a4) {
    *a4 = v13;
  }
  if (a5) {
    *a5 = v18;
  }
  if (a6) {
    *a6 = v19;
  }
  return this;
}

uint64_t BlueFin::GlPeTimeManager::IsTimeUncVerified(BlueFin::GlPeTimeManager *this)
{
  int v1 = *((_DWORD *)this + 686);
  uint64_t v2 = v1 & 0x200;
  int v3 = *((_DWORD *)this + 645);
  if (v3 != 5 && v2 == 0) {
    return 0;
  }
  if (v3 == 5 || v2 == 0)
  {
    if (v3 == 5) {
      goto LABEL_20;
    }
    return 0;
  }
  if (*((_DWORD *)this + 704) == -1 || *((double *)this + 354) == 4294967300.0)
  {
    BOOL v6 = 0;
    if ((v1 & 0xC) != 0) {
      goto LABEL_20;
    }
LABEL_17:
    if (v6) {
      goto LABEL_20;
    }
    return 0;
  }
  BOOL v6 = *((_DWORD *)this + 718) < 0x5265C00u;
  if ((v1 & 0xC) == 0) {
    goto LABEL_17;
  }
LABEL_20:
  uint64_t v7 = 1;
  if (!*((unsigned char *)this + 4876))
  {
    *((unsigned char *)this + 4876) = 1;
    if ((v1 & 0x200) != 0) {
      uint64_t v9 = 89;
    }
    else {
      uint64_t v9 = 78;
    }
    if (v3 == 5) {
      uint64_t v10 = 89;
    }
    else {
      uint64_t v10 = 78;
    }
    GlCustomLog(14, "GlPeTimeManager::VerifyTimeUnc(%u): FullSatVer:%c  NavSystemSync:%c  CurTimeUncUs:%.3lf\n", *((_DWORD *)this + 642), v10, v9, *((double *)this + 342));
  }
  return v7;
}

void BlueFin::GlPeGnssTime::GetUtc(BlueFin::GlPeGnssTime *a1, uint64_t a2)
{
  uint64_t v44 = &unk_270EC23C8;
  uint64_t v45 = 0;
  BOOL v3 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v3 = 0;
  }
  int v4 = v3 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  if (v4) {
    int v5 = 431999;
  }
  else {
    int v5 = 432000;
  }
  unsigned int v6 = v5 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  __int16 v46 = 1980;
  __int16 v47 = v6 / 0x15180 + 1;
  LOBYTE(v48) = 1;
  BYTE1(v48) = v6 / 0x15180 + 1;
  unsigned int v7 = v6 % 0x15180 / 0xE10;
  unsigned int v8 = (2185 * (v6 - 3600 * ((1193047 * (unint64_t)v6) >> 32))) >> 17;
  int v9 = v6 - 60 * ((71582789 * (unint64_t)v6) >> 32);
  BOOL v10 = (v4 & 1) == 0;
  if (v4) {
    char v11 = 23;
  }
  else {
    char v11 = v7;
  }
  if (v10) {
    char v12 = v8;
  }
  else {
    char v12 = 59;
  }
  BYTE2(v48) = v11;
  if (v10) {
    char v13 = v9;
  }
  else {
    char v13 = 60;
  }
  HIBYTE(v48) = v12;
  unsigned __int8 v49 = v13;
  BlueFin::GlPeGnssTime::GetUtc(a1, (BlueFin::GlUtcTime *)&v44);
  long double v15 = *(double *)&v14;
  *(_WORD *)a2 = v46;
  v14.i32[0] = v48;
  *(void *)(a2 + 2) = vmovl_u8(v14).u64[0];
  unsigned int v16 = v45;
  double v17 = (double)v45;
  *(_WORD *)(a2 + 10) = v49;
  unsigned int v18 = (v17 * 2.32830644e-10 * 1000000.0 + 0.5);
  if (v18 == 1000000)
  {
    unsigned int v19 = HIDWORD(v45);
    if (v16 > 0xFFFFF79C) {
      unsigned int v19 = HIDWORD(v45) + 1;
    }
    int v20 = BlueFin::GlWeekTowTime::m_ucNextLs;
    BOOL v23 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && v19 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v19) {
      int v20 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
    }
    unsigned int v24 = v19 + 432000 - v23 - v20;
    unsigned int v25 = v24 % 0x7861F80 / 0x15180;
    if (v24 % 0x7861F80 <= 0x3C3B87F) {
      int v26 = v24 % 0x7861F80 > 0x1E284FF;
    }
    else {
      int v26 = 2;
    }
    if (v24 % 0x7861F80 <= 0x5A4EBFF) {
      int v27 = v26;
    }
    else {
      int v27 = 3;
    }
    if (v25 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v27 + 9])
    {
      int v28 = 9;
    }
    else if (v25 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v27 + 6])
    {
      int v28 = 6;
    }
    else if (v25 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v27 + 3])
    {
      int v28 = 3;
    }
    else
    {
      int v28 = 0;
    }
    __int16 v30 = (v27 | (4 * (v24 / 0x7861F80))) + 1980;
    if (v25 >= BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v27 + v28 + 2])
    {
      int v31 = 3;
    }
    else if (v25 < BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v27 + v28 + 1])
    {
      int v31 = 1;
    }
    else
    {
      int v31 = 2;
    }
    LOWORD(v29) = 0;
    int v32 = v31 + v28;
    __int16 v33 = v25 - BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v27 + v32 - 1] + 1;
    unint64_t v34 = 1193047 * (v24 % 0x15180);
    unsigned int v35 = 2185 * (v24 % 0xE10);
    unsigned int v36 = v24 % 0x3C;
    unint64_t v37 = HIDWORD(v34);
    unsigned int v38 = v35 >> 17;
    *(_WORD *)a2 = v30;
    BOOL v39 = !v23;
    if (v23) {
      unsigned __int8 v40 = 23;
    }
    else {
      unsigned __int8 v40 = v37;
    }
    if (v39) {
      unsigned __int8 v41 = v38;
    }
    else {
      unsigned __int8 v41 = 59;
    }
    *(_WORD *)(a2 + 2) = v32;
    *(_WORD *)(a2 + 4) = v33;
    if (!v39) {
      LOBYTE(v36) = 60;
    }
    *(_WORD *)(a2 + 6) = v40;
    *(_WORD *)(a2 + 8) = v41;
    *(_WORD *)(a2 + 10) = v36;
    *(_WORD *)(a2 + 12) = 0;
  }
  else
  {
    *(_WORD *)(a2 + 12) = v18 / 0x3E8;
    unsigned int v29 = v18 % 0x3E8;
  }
  *(_WORD *)(a2 + 14) = v29;
  double v42 = fmod(v15, 4294967300.0);
  if (v15 <= 4294967300.0) {
    double v42 = v15;
  }
  if (v42 < -4294967300.0) {
    double v42 = -fmod(-v42, 4294967300.0);
  }
  if (v42 < 0.0) {
    signed int v43 = --v42;
  }
  else {
    signed int v43 = v42;
  }
  if (v43 <= 1) {
    signed int v43 = 1;
  }
  *(_DWORD *)(a2 + 16) = v43;
}

void BlueFin::GlPeGnssTime::GetGps(BlueFin::GlPeGnssTime *a1, uint64_t a2)
{
  double v17 = &off_270EBC600;
  uint64_t v18 = 0;
  BlueFin::GlPeGnssTime::GetGps(a1, (BlueFin::GlGpsTime *)&v17);
  long double v4 = v3;
  *(_WORD *)a2 = ((unsigned int (*)(void))v17[4])(&v17) / 0x93A80;
  unsigned int v5 = 1000 * (((unsigned int (*)(void))v17[4])(&v17) % 0x93A80);
  *(_DWORD *)(a2 + 4) = v5;
  unsigned int v6 = v18;
  double v7 = (double)v18 * 2.32830644e-10 * 1000000000.0 + 0.5;
  double v8 = fmod(v7, 4294967300.0);
  if (v7 <= 4294967300.0) {
    double v8 = v7;
  }
  if (v8 < -4294967300.0) {
    double v8 = -fmod(-v8, 4294967300.0);
  }
  unsigned int v9 = v8;
  if (v8 < 0.0) {
    unsigned int v9 = --v8;
  }
  if (v9 == 1000000000)
  {
    int v10 = HIDWORD(v18);
    if (v6 > 0xFFFFFFFD) {
      int v10 = HIDWORD(v18) + 1;
    }
    LODWORD(v18) = v6 + 2;
    HIDWORD(v18) = v10;
    *(_WORD *)a2 = ((unsigned int (*)(void))v17[4])(&v17) / 0x93A80;
    unsigned int v11 = ((uint64_t (*)(void))v17[4])(&v17);
    LOWORD(v12) = 0;
    LOWORD(v13) = 0;
    unsigned int v14 = 1000 * (v11 % 0x93A80);
  }
  else
  {
    unsigned int v14 = v9 / 0xF4240 + v5;
    unsigned int v12 = v9 / 0x3E8 - 1000 * (((8589935 * (unint64_t)(v9 / 0x3E8)) >> 32) >> 1);
    unsigned int v13 = v9 % 0x3E8;
  }
  *(_DWORD *)(a2 + 4) = v14;
  *(_WORD *)(a2 + 8) = v12;
  *(_WORD *)(a2 + 10) = v13;
  double v15 = fmod(v4, 4294967300.0);
  if (v4 <= 4294967300.0) {
    double v15 = v4;
  }
  if (v15 < -4294967300.0) {
    double v15 = -fmod(-v15, 4294967300.0);
  }
  if (v15 < 0.0) {
    signed int v16 = --v15;
  }
  else {
    signed int v16 = v15;
  }
  if (v16 <= 1) {
    signed int v16 = 1;
  }
  *(_DWORD *)(a2 + 12) = v16;
}

double BlueFin::GlPeTimeManager::GetUtcTime(BlueFin::GlPeTimeManager *this, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4804) == -7200001)
  {
    BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)a2, 1, v4);
    *(void *)this = &unk_270EC23C8;
    *((void *)this + 1) = 0;
    BlueFin::GlUtcTime::breakdownFct((uint64_t)this);
    BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v4, this);
  }
  else
  {
    double result = *(double *)(a2 + 4848);
    *((double *)this + 1) = result;
    *(void *)this = &unk_270EC23C8;
    *((_DWORD *)this + 4) = *(_DWORD *)(a2 + 4856);
    *((_DWORD *)this + 5) = *(_DWORD *)(a2 + 4860);
    *((unsigned char *)this + 24) = *(unsigned char *)(a2 + 4864);
  }
  return result;
}

uint64_t BlueFin::GlMeMeas::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 21;
  }
  if (v5 >= 0x16)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1599, "Serialize", (char)"ucVersion >= 1 && ucVersion <= 21");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1599, "ucVersion >= 1 && ucVersion <= 21");
  }
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v35 = v3;
    int v41 = 15;
    char v42 = v5;
    uint64_t v43 = 0x1000000000000;
    unsigned __int8 v40 = &unk_270EBA5A8;
    char v44 = v5;
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v2 + 4));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v6 + 6));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v6 + 8));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v6 + 10));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)v6);
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v6 + 14));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v6 + 16));
    if (v5 >= 0xD) {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, 100);
    }
    uint64_t v7 = 99;
    uint64_t v8 = 140;
    while (1)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(v6 + 17504);
      uint64_t v11 = v10 + v8;
      uint64_t v12 = *(unsigned __int8 *)(v10 + v8 - 140);
      if ((v12 - 1) >= 0xBC)
      {
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v40, 0xFFFF);
        if (v5 > 9)
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, 0);
          if (v5 != 10)
          {
            char v13 = 0;
LABEL_16:
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, v13);
          }
LABEL_17:
          BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v10 + v8 - 124));
          int v39 = *(_DWORD *)(v10 + v8 - 128);
          unsigned int v36 = &v39;
          char v37 = 1;
          BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v40, (const BlueFin::GlSetBase *)&v36);
          BOOL v14 = 1;
          goto LABEL_26;
        }
      }
      else
      {
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v40, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ v12));
        if (v5 > 9)
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, *(unsigned char *)(v10 + v8 - 136));
          if (v5 != 10)
          {
            char v13 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(v10 + v8 - 136)
                                                                         - *(int *)(v10 + v8 - 136)
                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v11 - 140)]];
            goto LABEL_16;
          }
          goto LABEL_17;
        }
      }
      if (v5 >= 7) {
        break;
      }
      if (v5 == 5)
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v10 + v8 - 128));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, 0);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, 0);
      }
      else
      {
        if (v5 == 6) {
          goto LABEL_22;
        }
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v10 + v8 - 128) >> (v5 == 1));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, 0);
      }
      BOOL v14 = 0;
LABEL_26:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, *(unsigned char *)(v10 + v8 - 120));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v10 + v8 - 36));
      if (v5 >= 9)
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v10 + v8 - 100));
      }
      else
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, (float)(*(float *)(v10 + v8 - 32) + -174.0) + 4.0);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v10 + v8 - 100));
        if (v5 <= 3)
        {
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(double *)(v10 + v8 - 84));
          goto LABEL_32;
        }
      }
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v10 + v8 - 96));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(double *)(v10 + v8 - 84));
      if (v5 > 0xB)
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 52));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 44));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 40));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(double *)(v10 + v8 - 60));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 48));
        goto LABEL_38;
      }
LABEL_32:
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 52));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 44));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 40));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(double *)(v10 + v8 - 60));
      if (v5 <= 2)
      {
        unsigned int v36 = v38;
        char v37 = 3;
        memset(v38, 0, 12);
LABEL_37:
        int ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, ULong);
        int v17 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, v17);
        goto LABEL_38;
      }
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 48));
      if (v5 >= 8) {
        goto LABEL_38;
      }
      unsigned int v36 = v38;
      char v37 = 3;
      memset(v38, 0, 12);
      if (v5 >= 6)
      {
        BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v40, (const BlueFin::GlSetBase *)&v36);
        goto LABEL_38;
      }
      if (v5 != 5) {
        goto LABEL_37;
      }
      int v19 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 0);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, v19);
      int v20 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 1u);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, v20);
      int v21 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v36, 2u);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, v21);
LABEL_38:
      if (v14) {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 32));
      }
      if (v5 <= 0xD)
      {
        if (v5 < 8) {
          goto LABEL_49;
        }
        int v18 = *(_DWORD *)(v10 + v8 - 116);
      }
      else
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 28));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, *(unsigned char *)(v10 + v8 - 116));
        if (v5 <= 0xF) {
          goto LABEL_49;
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, *(unsigned char *)(v10 + v8 - 108));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 104));
        if (v5 == 16) {
          goto LABEL_49;
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, *(unsigned char *)(v10 + v8 - 112));
        if (v5 <= 0x11) {
          goto LABEL_49;
        }
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 12));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *(float *)(v10 + v8 - 8));
        if (v5 == 18) {
          goto LABEL_49;
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, *(unsigned char *)(v10 + v8 - 4));
        LOBYTE(v18) = *(unsigned char *)(v10 + v8);
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, v18);
LABEL_49:
      if ((*(unsigned char *)(v11 - 140) + 67) >= 0x44u)
      {
        uint64_t v7 = v9 - 1;
        v8 += 144;
        if (v9) {
          continue;
        }
      }
      if (v5 >= 0x14)
      {
        char v22 = 0;
        for (uint64_t i = 8; i != 2952; i += 184)
        {
          if (*(unsigned __int16 *)(*(void *)(v6 + 3072) + i) < 0x23Fu) {
            ++v22;
          }
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, v22);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, 4);
        uint64_t v24 = 0;
        uint64_t v25 = 56;
        do
        {
          uint64_t v26 = *(void *)(v6 + 3072);
          int v27 = (unsigned __int8 *)(v26 + 184 * v24);
          if (*((unsigned __int16 *)v27 + 4) <= 0x23Eu)
          {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, v24);
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v40, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *v27));
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, v27[4]);
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v40, *(_DWORD *)(v26 + 184 * v24 + 12));
            uint64_t v28 = v26 + 184 * v24;
            char v30 = *(unsigned char *)(v28 + 16);
            unsigned int v29 = (unsigned __int8 *)(v28 + 16);
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v40, v30);
            unint64_t v31 = 0;
            for (j = (float *)(v26 + v25); ; j += 10)
            {
              unint64_t v33 = v5 < 0x15 ? 4 : *v29;
              if (v31 >= v33) {
                break;
              }
              BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *j);
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *((double *)j - 4));
              BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(j - 3));
              BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(j - 4));
              BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(j - 1));
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v40, *((double *)j - 3));
              BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v40, *(j - 2));
              ++v31;
            }
          }
          ++v24;
          v25 += 184;
        }
        while (v24 != 16);
      }
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v40, v35, 4);
      return 1;
    }
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v40, *(_WORD *)(v10 + v8 - 124));
LABEL_22:
    int v15 = *(_DWORD *)(v10 + v8 - 128);
    unsigned int v36 = v38;
    char v37 = 3;
    v38[0] = v15;
    *(void *)&v38[1] = 0;
    BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v40, (const BlueFin::GlSetBase *)&v36);
    BOOL v14 = v5 > 6;
    goto LABEL_26;
  }
  return 1;
}

unint64_t BlueFin::GlReqSm::SetSIGMeasuement(BlueFin::GlReqSm *this)
{
  __int16 v4 = 19;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

BOOL BlueFin::GlPeTimeManager::UpdateLeapSecFromSigMeas(BlueFin::GlPeTimeManager *this)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 2585)) {
    return 0;
  }
  BlueFin::GlSignalIdSet::GetPrimarySignalSvIdSet((BlueFin::GlSignalIdSet *)(*(void *)this + 8), (uint64_t)&__src);
  unsigned __int8 v2 = v63;
  unsigned __int8 v57 = v63;
  uint64_t v3 = __src;
  size_t v4 = 4 * v63;
  memcpy(v61, __src, v4);
  __int16 v59 = 0;
  unsigned __int8 v58 = 0;
  int v60 = v61[0];
  BlueFin::GlSetIterator::operator++(&v57);
  if (v58 != v57)
  {
    __int32 v48 = v3;
    unint64_t v9 = 0;
    unsigned __int8 v6 = 0;
    unsigned __int8 v10 = 0;
    while (1)
    {
      unsigned int v11 = v59;
      v64[v9] = -1;
      if (v11)
      {
        if (v11 < 0x21) {
          goto LABEL_8;
        }
        if (v11 < 0x42)
        {
          if (v11 >= 0x34)
          {
            v64[v9] = 1;
            ++v10;
          }
          goto LABEL_9;
        }
        if (v11 <= 0x4B)
        {
LABEL_8:
          v64[v9] = 0;
          ++v6;
        }
      }
LABEL_9:
      unsigned __int8 v12 = v9 + 1;
      BlueFin::GlSetIterator::operator++(&v57);
      if (v9 <= 0x63)
      {
        ++v9;
        if (v58 != v57) {
          continue;
        }
      }
      unsigned int v7 = v12;
      unsigned __int8 v5 = v10;
      uint64_t v3 = v48;
      goto LABEL_18;
    }
  }
  unsigned __int8 v5 = 0;
  unsigned __int8 v6 = 0;
  unsigned int v7 = 0;
LABEL_18:
  unsigned __int8 v57 = v2;
  memcpy(v61, v3, v4);
  __int16 v59 = 0;
  unsigned __int8 v58 = 0;
  int v60 = v61[0];
  BlueFin::GlSetIterator::operator++(&v57);
  int updated = 0;
  if (v58 == v57 || !v7) {
    return updated != 0;
  }
  unint64_t v14 = 0;
  uint64_t v47 = 0;
  unint64_t v49 = v7;
  double v15 = 0.0;
  int v46 = v6;
  int v45 = v5;
  double v16 = 0.0;
  while (1)
  {
    int v17 = v64[v14];
    if (v17 == -1) {
      goto LABEL_87;
    }
    unsigned int v18 = v59;
    v54[0] = v59;
    int v55 = 0;
    __int16 v56 = 575;
    if ((v59 + 67) >= 0x44u)
    {
      uint64_t v19 = BlueFin::GlSvId::s_aucSvId2gnss[v59];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v19] == 255) {
        int v55 = -1;
      }
      else {
        __int16 v56 = BlueFin::GlSignalId::s_ausGnss2signalId[v19]
      }
            + v59
            - BlueFin::GlSvId::s_aucGnss2minSvId[v19];
    }
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)this, (const BlueFin::GlSignalId *)v54, 0, 0);
    int v21 = MeMeas;
    if (!MeMeas) {
      goto LABEL_87;
    }
    if (v46 != 1 || v17)
    {
      BOOL v22 = v17 == 1;
      if (v45 == 1 && v17 == 1)
      {
        if (*((_DWORD *)this + 642) >= 0xEA61u && (MeMeas[12] & 0x20) != 0)
        {
          double v16 = *((double *)MeMeas + 7);
          BOOL v22 = 1;
          LODWORD(v47) = 1;
        }
        else
        {
          BOOL v22 = 1;
        }
      }
    }
    else if (*((_DWORD *)this + 642) >= 0xEA61u && (MeMeas[12] & 0x20) != 0)
    {
      BOOL v22 = 0;
      double v15 = *((double *)MeMeas + 7);
      BYTE4(v47) = 1;
    }
    else
    {
      BOOL v22 = 0;
    }
    LOBYTE(v52) = v63;
    memcpy(v53, __src, 4 * v63);
    WORD1(v52) = 0;
    BYTE1(v52) = 0;
    HIDWORD(v52) = v53[0];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v52);
    if (BYTE1(v52) != LOBYTE(v52))
    {
      BOOL v23 = v64;
      unint64_t v24 = v49;
      do
      {
        if (v18 <= BYTE2(v52)) {
          break;
        }
        if (!v24)
        {
          DeviceFaultNotify("glpe_timemgr.cpp", 5978, "UpdateLeapSecFromSigMeas", (char)"ucCurMeas2 < ucNumMeas");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 5978, "ucCurMeas2 < ucNumMeas");
        }
        int v25 = *v23;
        if (*v23 != -1)
        {
          LOBYTE(v50) = BYTE2(v52);
          HIDWORD(v50) = 0;
          LOWORD(v51) = 575;
          if ((BYTE2(v52) + 67) >= 0x44u)
          {
            uint64_t v26 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v52)];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v26] == 255) {
              HIDWORD(v50) = -1;
            }
            else {
              LOWORD(v51) = BlueFin::GlSignalId::s_ausGnss2signalId[v26]
            }
                          + BYTE2(v52)
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v26];
          }
          int v27 = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)this, (const BlueFin::GlSignalId *)&v50, 0, 0);
          if (v27)
          {
            if ((v21[12] & 0x20) != 0 && (v27[12] & 0x20) != 0)
            {
              if ((v22 & (v47 ^ 1) & (v25 == 1)) == 1)
              {
                double v28 = *((double *)v21 + 7);
                if (vabdd_f64(v28, *((double *)v27 + 7)) < 0.1)
                {
                  LODWORD(v47) = 1;
                  goto LABEL_59;
                }
              }
              if (!(BYTE4(v47) & 1 | ((v25 | v17) != 0)) && vabdd_f64(*((double *)v21 + 7), *((double *)v27 + 7)) < 0.1)
              {
                BYTE4(v47) = 1;
                double v28 = v16;
                double v15 = *((double *)v21 + 7);
                goto LABEL_59;
              }
            }
            if (BYTE4(v47) & v47)
            {
              uint64_t v47 = 0x100000001;
              double v28 = v16;
LABEL_59:
              double v16 = v28;
              break;
            }
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v52);
        ++v23;
        --v24;
      }
      while (BYTE1(v52) != LOBYTE(v52));
    }
    if (v47 & 0x100000000) != 0 && (v47) {
      break;
    }
    unsigned int v29 = *((_DWORD *)this + 848);
    if (v29 >= *((_DWORD *)this + 850)
      && v29 <= *((_DWORD *)this + 851)
      && ((*((unsigned char *)this + 3413) != 0) & v47) == 1)
    {
      if (*((_DWORD *)this + 646))
      {
        BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, **(_DWORD **)this, 1, (uint64_t)&v52);
        int v50 = &off_270EBF4E8;
        uint64_t v51 = 0;
        BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&v52, (BlueFin::GlGlnsTime *)&v50);
        BOOL v30 = 0;
        if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
          && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
        {
          BOOL v30 = HIDWORD(v51) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
        }
        unsigned int v31 = ((uint64_t (*)(void))v50[4])(&v50);
        double v33 = 10799.0;
        if (!v30) {
          double v33 = (double)(v31 % 0x15180);
        }
        LODWORD(v32) = v51;
        double v34 = v33 + (double)v32 * 2.32830644e-10;
        double v52 = 0.0;
        BlueFin::GlPeTimeManager::GetAvgFlightTimeMs((uint64_t)this, v54, (uint64_t *)&v52, (int *)&v50);
        if (v34 > 10800.0 && v34 < 10980.0)
        {
          double v35 = v16 + v52 * 0.001;
          if (v35 > 10800.0 && v35 < 10980.0)
          {
            double v36 = v34 - v35;
            BOOL v37 = v34 - v35 < 0.0;
            if (v34 - v35 > 0.0)
            {
              double v38 = floor(v36 + 0.5);
              goto LABEL_80;
            }
            double v38 = 0.0;
            if (v37)
            {
              double v38 = ceil(v36 + -0.5);
LABEL_80:
              if (v38 > -1.1 && v38 < -0.9)
              {
LABEL_109:
                char v44 = -1;
LABEL_112:
                int updated = 0;
                LOBYTE(v42) = *((unsigned char *)this + 2588) + v44;
                goto LABEL_113;
              }
            }
            if (v38 > -0.1 && v38 < 0.1)
            {
              char v44 = 0;
              goto LABEL_112;
            }
            if (v38 > 0.9 && v38 < 1.1) {
              goto LABEL_109;
            }
          }
        }
      }
      LODWORD(v47) = 1;
    }
LABEL_87:
    ++v14;
    BlueFin::GlSetIterator::operator++(&v57);
    if (v58 == v57 || v14 >= v49) {
      goto LABEL_106;
    }
  }
  double v40 = v15 - floor(v15 / 86400.0) * 86400.0 + 10800.0 - v16;
  double v41 = 0.5;
  if (v40 <= 0.0 && (double v41 = -0.5, v40 >= 0.0))
  {
    LOBYTE(v42) = 0;
  }
  else
  {
    int v42 = (int)(v40 + v41);
    if (v42 > 86399) {
      LOBYTE(v42) = v42 + 0x80;
    }
  }
  unsigned int v43 = *((_DWORD *)this + 848);
  if (v43 < *((_DWORD *)this + 850) || v43 > *((_DWORD *)this + 851))
  {
    int updated = BlueFin::GlPeTimeManager::updateLeapSeconds(this, v42, 8, 0, -128);
    return updated != 0;
  }
  if (!*((unsigned char *)this + 3413) || *((unsigned char *)this + 3415))
  {
LABEL_106:
    int updated = 0;
    return updated != 0;
  }
  int updated = 0;
LABEL_113:
  *((unsigned char *)this + 2596) = v42;
  *((_DWORD *)this + 648) |= 0x100u;
  return updated != 0;
}

long double BlueFin::GlPeGnssTime::GetTodS(BlueFin::GlPeGnssTime *this)
{
  switch(*((_DWORD *)this + 2))
  {
    case 0:
      int v20 = &off_270EBC600;
      uint64_t v21 = 0;
      BlueFin::GlPeGnssTime::GetGps(this, (BlueFin::GlGpsTime *)&v20);
      goto LABEL_25;
    case 1:
      int v20 = &off_270EBF4E8;
      uint64_t v21 = 0;
      BlueFin::GlPeGnssTime::GetGlns(this, (BlueFin::GlGlnsTime *)&v20);
      BOOL v1 = 0;
      if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0)
      {
        BOOL v1 = HIDWORD(v21) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      }
      unsigned int v3 = ((uint64_t (*)(void))v20[4])(&v20);
      if (v1) {
        double v5 = 10799.0;
      }
      else {
        double v5 = (double)(v3 % 0x15180);
      }
      LODWORD(v4) = v21;
      double v18 = v5 + (double)v4 * 2.32830644e-10;
      goto LABEL_27;
    case 2:
      int v20 = (void (**)(BlueFin::GlGalTime *__hidden))&unk_270EC23C8;
      uint64_t v21 = 0;
      BOOL v6 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
      if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
        BOOL v6 = 0;
      }
      int v7 = v6 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
      if (v7) {
        int v8 = 431999;
      }
      else {
        int v8 = 432000;
      }
      unsigned int v9 = v8 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
      __int16 v22 = 1980;
      __int16 v23 = v9 / 0x15180 + 1;
      char v24 = 1;
      char v25 = v9 / 0x15180 + 1;
      unsigned int v10 = v9 % 0x15180 / 0xE10;
      unsigned int v11 = (2185 * (v9 - 3600 * ((1193047 * (unint64_t)v9) >> 32))) >> 17;
      int v12 = v9 - 60 * ((71582789 * (unint64_t)v9) >> 32);
      BOOL v13 = (v7 & 1) == 0;
      if (v7)
      {
        LOBYTE(v10) = 23;
        char v14 = 59;
      }
      else
      {
        char v14 = v11;
      }
      unsigned __int8 v26 = v10;
      if (v13) {
        char v15 = v12;
      }
      else {
        char v15 = 60;
      }
      unsigned __int8 v27 = v14;
      unsigned __int8 v28 = v15;
      BlueFin::GlPeGnssTime::GetUtc(this, (BlueFin::GlUtcTime *)&v20);
      unsigned int v17 = 3600 * v26 + 60 * v27 + v28;
      goto LABEL_26;
    case 3:
      int v20 = &off_270EBF538;
      uint64_t v21 = 0;
      BlueFin::GlPeGnssTime::GetGal(this, (BlueFin::GlGalTime *)&v20);
      goto LABEL_25;
    case 4:
      int v20 = &off_270EBF588;
      uint64_t v21 = 0;
      BlueFin::GlPeGnssTime::GetBds(this, (BlueFin::GlBdsTime *)&v20);
      goto LABEL_25;
    case 5:
      int v20 = &off_270EBF080;
      uint64_t v21 = 0;
      BlueFin::GlPeGnssTime::GetNic(this, (BlueFin::GlNicTime *)&v20);
LABEL_25:
      unsigned int v17 = ((unsigned int (*)(void))v20[4])(&v20) % 0x93A80;
LABEL_26:
      LODWORD(v16) = v21;
      double v18 = (double)v16 * 2.32830644e-10 + (double)v17;
LABEL_27:
      return fmod(v18, 86400.0);
    default:
      DeviceFaultNotify("glpe_timemgr.cpp", 412, "GetTodS", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 412, "0");
  }
}

uint64_t BlueFin::GlDbgMeIf::SetSimulatorMode(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 512))();
}

uint64_t BlueFin::GlMeStateProvider::SetSimulatorMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 18) = a2;
  return this;
}

uint64_t BlueFin::GlPeGpsTimeMgr::OnInitialTime(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlPeGnssTime *a2)
{
  if (*((_DWORD *)this + 18) && (*(unsigned int (**)(void))(*((void *)this + 10) + 32))() < 0x93A80)
  {
    double v5 = &off_270EBC600;
    uint64_t v6 = 0;
    BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v5);
    *((void *)this + 11) = v6;
  }
  double v5 = &off_270EBC600;
  uint64_t v6 = 0;
  BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v5);
  uint64_t result = ((uint64_t (*)(void))v5[4])(&v5);
  *((_WORD *)this + 57) = result / 0x93A80;
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetSimulatorMode(BlueFin::GlDineCtrl *this)
{
  return (*(uint64_t (**)(char *))(*((void *)this + 3692) + 64))((char *)this + 29536);
}

uint64_t BlueFin::GlPeLtoMgr::GenerateLtoRefreshSet(BlueFin::GlPeLtoMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!*(_DWORD *)(*((void *)this + 11) + 2576)) {
    return 0;
  }
  for (uint64_t i = 12; i != 180; i += 24)
  {
    char v24 = (void *)(*((void *)this + 173) + i);
    char v25 = (void *)(*((void *)this + 197) + i);
    BlueFin::GlSetBase::operator=((uint64_t)v25 - 12, (uint64_t)v24 - 12);
    *char v25 = *v24;
  }
  BlueFin::GlGnssSet::operator~((uint64_t)this + 1024, (uint64_t)&v30);
  for (uint64_t j = 0; j != 168; j += 24)
    BlueFin::GlSetBase::operator&=(*((void *)this + 197) + j, a22 + j);
  BlueFin::GlGnssSet::operator~((uint64_t)this + 576, (uint64_t)&v30);
  for (uint64_t k = 0; k != 168; k += 24)
    BlueFin::GlSetBase::operator&=(*((void *)this + 197) + k, a22 + k);
  BlueFin::GlGnssSet::operator~((uint64_t)this + 768, (uint64_t)&v30);
  for (uint64_t m = 0; m != 168; m += 24)
    BlueFin::GlSetBase::operator&=(*((void *)this + 197) + m, a22 + m);
  return BlueFin::GlPeAsstMgr::GetExpiringEphemerisSvs(*((BlueFin::GlPeAsstMgr **)this + 10), (BlueFin::GlPeLtoMgr *)((char *)this + 1408));
}

uint64_t BlueFin::GlDbgRequest::CreateGlRequestImplGnssMeasData(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  char v15 = a2;
  if (BlueFin::GlDbgMemory::m_pInstance) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = a1 == 0;
  }
  if (!v17 && a2 != 0)
  {
    uint64_t v21 = (uint64_t (**)(uint64_t))a1(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v21;
    uint64_t v19 = a1;
    if (v21)
    {
      *uint64_t v21 = a1;
      v21[1] = (uint64_t (*)(uint64_t))v15;
      uint64_t v19 = a1;
    }
    goto LABEL_13;
  }
  uint64_t v19 = a1;
  if (a1)
  {
LABEL_13:
    uint64_t v20 = v19(136);
    goto LABEL_14;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
LABEL_14:
  uint64_t v22 = v20;
  if (v20)
  {
    *(void *)uint64_t v20 = &unk_270EBB200;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_OWORD *)(v20 + 56) = 0u;
    *(_OWORD *)(v20 + 8) = 0u;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(void *)(v20 + 72) = a3;
    *(void *)(v20 + 40) = a4;
    *(void *)(v20 + 48) = a5;
    *(void *)(v20 + 56) = a6;
    *(void *)(v20 + 120) = a7;
    *(void *)(v20 + 128) = a8;
    Memory = BlueFin::GlMemAlloc::glAllocateMemory(44, 288, a1);
    uint64_t v24 = BlueFin::GlRequestImplGnssMeasData::Create((uint64_t)Memory, v22, (uint64_t)BlueFin::GlDbgProxyGlReqOnStart, (uint64_t)BlueFin::GlDbgProxyGlReqOnGnssMeasData, (uint64_t)BlueFin::GlDbgProxyGlReqOnGnssNavData, (uint64_t)BlueFin::GlDbgProxyGlReqOnGnssSvInfoData, (uint64_t)BlueFin::GlDbgProxyGlReqOnGnssAgcInfoData, a8, a9);
    *(void *)(v22 + 24) = v24;
    if (!v24)
    {
      if (!v15) {
        char v15 = *(void (**)(uint64_t))(BlueFin::GlDbgMemory::m_pInstance + 8);
      }
      v15(v22);
      return 0;
    }
  }
  return v22;
}

uint64_t BlueFin::GlRequestImplGnssMeasData::GlRequestImplGnssMeasData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unsigned int v10 = a9;
  *(_DWORD *)(a1 + 16) = 15;
  *(_WORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 22) = -1;
  *(void *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 36) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a4;
  *(void *)a1 = &unk_270EC79D0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 88) = a5;
  *(void *)(a1 + 96) = a6;
  *(void *)(a1 + 104) = a7;
  *(void *)(a1 + 112) = a8;
  *(_DWORD *)(a1 + 120) = a9;
  if (a8)
  {
    GlCustomLog(14, "FireIQ dump feature enabled in GLL\n");
    unsigned int v10 = *(_DWORD *)(a1 + 120);
  }
  if (v10 > 0x15F90) {
    *(_DWORD *)(a1 + 120) = 90000;
  }
  return a1;
}

uint64_t BlueFin::GlRequestImplGnssMeasData::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  if (!a1)
  {
    DeviceFaultNotify("glrequest.cpp", 1231, "Create", (char)"pvBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1231, "pvBuffer != nullptr");
  }

  return BlueFin::GlRequestImplGnssMeasData::GlRequestImplGnssMeasData(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void BlueFin::GlPeMsmtMgr::SetMeasurement(BlueFin::GlPeMsmtMgr *this, BlueFin::GlMeas *a2, int a3)
{
  unint64_t v4 = this;
  uint64_t v122 = *MEMORY[0x263EF8340];
  double v5 = (char *)this + 56624;
  *((_DWORD *)this + 1) = *(_DWORD *)this;
  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + 4792) = *((_DWORD *)a2 + 4379);
  float v111 = (void *)((char *)this + 8);
  uint64_t v106 = (char *)this + 56256;
  bzero(*((void **)this + 1), ((4 * *((unsigned __int8 *)this + 16) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*((void **)v4 + 23), ((4 * *((unsigned __int8 *)v4 + 192) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*((void **)v4 + 12), ((4 * *((unsigned __int8 *)v4 + 104) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)v5, ((4 * v5[8] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  memset(v116, 0, sizeof(v116));
  v112[1] = 0;
  v112[0] = 0;
  uint64_t v107 = v4;
  if (a3 < 1)
  {
    LOWORD(v7) = 0;
    unsigned __int8 v108 = 0;
    unsigned int v9 = a2;
    goto LABEL_30;
  }
  unint64_t v6 = 0;
  unsigned __int8 v108 = 0;
  LOWORD(v7) = 0;
  uint64_t v8 = 96;
  unsigned int v9 = a2;
  while (1)
  {
    uint64_t v10 = *((void *)v9 + 2188);
    uint64_t v11 = v10 + v8;
    BOOL v13 = (unsigned char *)(v10 + v8 - 96);
    uint64_t v12 = *v13;
    if ((v12 - 1) > 0xBB) {
      break;
    }
    int v14 = *(_DWORD *)(v11 - 84);
    LOBYTE(v117) = *(unsigned char *)(v10 + v8 - 96);
    int v16 = *(_DWORD *)(v11 - 92);
    char v15 = (int *)(v11 - 92);
    LOWORD(v118[0]) = *((_WORD *)v15 + 2);
    HIDWORD(v117) = v16;
    if (BlueFin::GlSvId::s_aucSvId2gnss[v12] != 4 || !v106[344])
    {
      int inserted = BlueFin::GlPeMsmtMgr::insertMePeMeas(v107, v10 + v8 - 96, 0);
      if ((v14 & 0x4000) != 0)
      {
        int v105 = inserted;
        *((_DWORD *)v116 + (char)v108) = *(_DWORD *)(v10 + v8 + 12);
        uint64_t v19 = BlueFin::GlSignalIdArray::Get(*((void *)v107 + 2397), v10 + v8 - 96);
        if (!v19
          || ((unsigned int v20 = *(unsigned __int8 *)(v19 + 448), v21 = v20 > 6, v22 = (1 << v20) & 0x52, !v21)
            ? (BOOL v23 = v22 == 0)
            : (BOOL v23 = 1),
              v23))
        {
          int v24 = *v15;
          if (!*v15 || *(float *)(v10 + v8 + 12) > 20.0)
          {
            uint64_t v25 = v10 + v8;
            if (*(float *)(v10 + v8 + 4) < 100.0)
            {
              uint64_t v26 = *(void *)v106;
              uint64_t v27 = *(unsigned __int16 *)(v25 - 88);
              uint64_t v28 = *(void *)v106 + 32 * v27;
              if (v13 != (unsigned char *)v28)
              {
                *(unsigned char *)uint64_t v28 = *v13;
                *(_DWORD *)(v28 + 4) = v24;
                *(_WORD *)(v28 + 8) = v27;
                uint64_t v27 = *(unsigned __int16 *)(v25 - 88);
              }
              uint64_t v29 = v26 + 32 * v27;
              *(_WORD *)(v29 + 12) = *(_WORD *)(v10 + v8 - 80);
              *(double *)(v29 + 16) = *(float *)(v10 + v8);
              *(_DWORD *)(v29 + 24) = *(_DWORD *)a2;
              *(_DWORD *)(*((void *)v106 + 1) + 4 * ((__int16)v27 >> 5)) |= 1 << v27;
            }
          }
        }
        ++v108;
        if (v105)
        {
          *(_DWORD *)(*v111 + 4 * (*(__int16 *)(v10 + v8 - 88) >> 5)) |= 1 << *(_WORD *)(v10 + v8 - 88);
          LOWORD(v7) = v7 + 1;
        }
        else
        {
          *(_DWORD *)((char *)v112 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v6;
        }
      }
      else if (inserted)
      {
        uint64_t v18 = BlueFin::GlSignalIdArray::Get(*((void *)v107 + 2397), (uint64_t)&v117);
        unsigned int v9 = a2;
        if (v18) {
          *(_WORD *)(v18 + 448) = 2570;
        }
        goto LABEL_26;
      }
    }
    unsigned int v9 = a2;
LABEL_26:
    if (v6 <= 0x62)
    {
      ++v6;
      v8 += 144;
      if (a3 > (__int16)v7) {
        continue;
      }
    }
    break;
  }
  unint64_t v4 = v107;
LABEL_30:
  LODWORD(v117) = 4;
  memcpy(v118, v112, 0x10uLL);
  HIDWORD(v117) = v118[0];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v117);
  BOOL v31 = a3 > (__int16)v7;
  if (BYTE1(v117) != v117 && a3 > (__int16)v7)
  {
    do
    {
      uint64_t v32 = *((void *)v9 + 2188) + 144 * SWORD1(v117);
      if ((BlueFin::GlPeMsmtMgr::insertMePeMeas(v4, v32, 1) & 1) == 0)
      {
        unsigned int v102 = "insertMePeMeas(rotMeMeas, true)";
        DeviceFaultNotify("glpe_msmtmgr.cpp", 592, "SetMeasurement", (char)"insertMePeMeas(rotMeMeas, true)");
        unint64_t v103 = "glpe_msmtmgr.cpp";
        int v104 = 592;
        goto LABEL_115;
      }
      *(_DWORD *)(*v111 + 4 * (*(__int16 *)(v32 + 8) >> 5)) |= 1 << *(_WORD *)(v32 + 8);
      int v7 = (__int16)(v7 + 1);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v117);
      BOOL v31 = v7 < a3;
    }
    while (BYTE1(v117) != v117 && v7 < a3);
  }
  double v33 = v111;
  if (v31)
  {
    for (uint64_t i = 0; i != 16; ++i)
    {
      uint64_t v35 = *((void *)v9 + 384);
      uint64_t v36 = v35 + 184 * i;
      unsigned int v37 = *(unsigned __int16 *)(v36 + 8);
      if (v37 <= 0x23E)
      {
        int v38 = *(_DWORD *)v9;
        BOOL v39 = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(*((void *)v5 + 11) + 1152), *(unsigned __int16 *)(v36 + 8));
        uint64_t v40 = *((void *)v5 + 11);
        if (v39)
        {
          uint64_t v41 = BlueFin::GlSignalIdArray::Get(v40, v35 + 184 * i);
LABEL_49:
          if (v41 != v36)
          {
            *(unsigned char *)uint64_t v41 = *(unsigned char *)v36;
            *(_DWORD *)(v41 + 4) = *(_DWORD *)(v36 + 4);
            *(_WORD *)(v41 + 8) = *(_WORD *)(v36 + 8);
          }
          uint64_t v47 = v35 + 184 * i;
          long long v48 = *(_OWORD *)(v47 + 12);
          long long v49 = *(_OWORD *)(v47 + 28);
          *(_OWORD *)(v41 + 44) = *(_OWORD *)(v47 + 44);
          *(_OWORD *)(v41 + 28) = v49;
          *(_OWORD *)(v41 + 12) = v48;
          long long v50 = *(_OWORD *)(v47 + 60);
          long long v51 = *(_OWORD *)(v47 + 76);
          long long v52 = *(_OWORD *)(v47 + 92);
          *(_OWORD *)(v41 + 108) = *(_OWORD *)(v47 + 108);
          *(_OWORD *)(v41 + 92) = v52;
          *(_OWORD *)(v41 + 76) = v51;
          *(_OWORD *)(v41 + 60) = v50;
          long long v53 = *(_OWORD *)(v47 + 124);
          long long v54 = *(_OWORD *)(v47 + 140);
          long long v55 = *(_OWORD *)(v47 + 156);
          *(_OWORD *)(v41 + 168) = *(_OWORD *)(v47 + 168);
          *(_OWORD *)(v41 + 156) = v55;
          *(_OWORD *)(v41 + 140) = v54;
          *(_OWORD *)(v41 + 124) = v53;
          *(_DWORD *)(v41 + 184) = v38;
          *(_DWORD *)(*(void *)v5 + 4 * (*(__int16 *)(v36 + 8) >> 5)) |= 1 << *(_WORD *)(v36 + 8);
          continue;
        }
        if (BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(v40 + 1152), v37))
        {
          uint64_t v42 = *((void *)v5 + 11);
          double v117 = (_DWORD *)(v42 + 1152);
          LOWORD(v118[0]) = *(_WORD *)(v42 + 1186) + 1;
          if (*(unsigned __int16 *)(v42 + 1184) <= LOWORD(v118[0])) {
            goto LABEL_118;
          }
          int v43 = 0;
          int v44 = 575;
          unsigned int v45 = -7200002;
          do
          {
            BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v117, (uint64_t)v113);
            if ((((unint64_t)*(unsigned int *)(*(void *)v5 + 4 * ((__int16)v115 >> 5)) >> (v115 & 0x1F)) & 1) == 0)
            {
              uint64_t v46 = BlueFin::GlSignalIdArray::Get(*((void *)v5 + 11), (uint64_t)v113);
              if (*(_DWORD *)(v46 + 184) < v45)
              {
                int v43 = v113[0];
                int v44 = v115;
                unsigned int v45 = *(_DWORD *)(v46 + 184);
              }
            }
          }
          while (LOWORD(v118[0]) < *((unsigned __int16 *)v117 + 16));
          if ((v43 - 1) >= 0xBC)
          {
LABEL_118:
            unsigned int v102 = "otSignalIdOldest.GetSvId().isValid()";
            DeviceFaultNotify("glpe_msmtmgr.cpp", 1076, "insertMeGridMeas", (char)"otSignalIdOldest.GetSvId().isValid()");
            unint64_t v103 = "glpe_msmtmgr.cpp";
            int v104 = 1076;
LABEL_115:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v103, v104, v102);
          }
          BlueFin::GlBigArray::Remove(*((void *)v5 + 11) + 1152, v44);
          uint64_t v41 = (uint64_t)BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(*((void *)v5 + 11) + 1152), *(unsigned __int16 *)(v36 + 8));
          double v33 = v111;
          if (!v41)
          {
            unsigned int v102 = "potPeGridMeas != nullptr";
            DeviceFaultNotify("glpe_msmtmgr.cpp", 1082, "insertMeGridMeas", (char)"potPeGridMeas != nullptr");
            unint64_t v103 = "glpe_msmtmgr.cpp";
            int v104 = 1082;
            goto LABEL_115;
          }
          goto LABEL_49;
        }
      }
    }
  }
  __int16 v56 = v107;
  if ((char)v108 >= 4)
  {
    BlueFin::GlSortFloats((uint64_t)v116, (const float *)v108, &v117, v30);
    float v57 = 0.0;
    for (uint64_t j = -1; j != -5; --j)
      float v57 = v57 + *((float *)v116 + *((unsigned __int8 *)&v118[-2] + v108 + j));
    if (fabsf(v57) > 0.1)
    {
      float v59 = v57 * 0.25;
      float v60 = *((float *)v106 + 34);
      float v61 = *((float *)v106 + 35);
      if (v61 != 0.0) {
        float v59 = (float)(v59 * 0.016667) + (float)(v61 * 0.98333);
      }
      *((float *)v106 + 35) = v59;
      float v62 = v59 + -40.0;
      if (v60 == 0.0 || vabds_f32(v60, v62) >= 1.0)
      {
        *((float *)v106 + 34) = v62;
        if (BlueFin::GlUtils::m_pInstance)
        {
          if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
            (*(void (**)(char *, void, void))(*((void *)v106 + 16) + 24))(v106 + 128, 0, 0);
          }
        }
      }
    }
    unsigned int v9 = a2;
  }
  unsigned __int8 v63 = (const void *)*((void *)v106 + 1);
  LOBYTE(v117) = v106[16];
  memcpy(v118, v63, 4 * v117);
  WORD1(v117) = 0;
  BYTE1(v117) = 0;
  HIDWORD(v117) = v118[0];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v117);
  if (BYTE1(v117) != v117)
  {
    while (WORD1(v117) < 0x23Fu)
    {
      if ((((unint64_t)*(unsigned int *)(*v33 + (((unint64_t)WORD1(v117) >> 3) & 0x1FFC)) >> (BYTE2(v117) & 0x1F)) & 1) == 0
        && (*(_DWORD *)v9 - *(_DWORD *)(*(void *)v106 + 32 * WORD1(v117) + 24)) >= 0x927C1)
      {
        BlueFin::GlSetBase::Remove((uint64_t)(v106 + 8), SWORD1(v117));
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v117);
      if (BYTE1(v117) == v117) {
        goto LABEL_71;
      }
    }
LABEL_113:
    unsigned int v102 = "usIndex < NUM_SIGNAL_IDS";
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    unint64_t v103 = "glsignalid.h";
    int v104 = 577;
    goto LABEL_115;
  }
LABEL_71:
  *((double *)v106 + 12) = (double)*(__int16 *)(*((void *)v107 + 2399) + 2) * 0.000000001;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  uint64_t v64 = (void *)((char *)v107 + 1448);
  LOBYTE(v117) = *((unsigned char *)v107 + 1456);
  memcpy(v118, *((const void **)v107 + 181), 4 * v117);
  WORD1(v117) = 0;
  BYTE1(v117) = 0;
  HIDWORD(v117) = v118[0];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v117);
  if (BYTE1(v117) != v117)
  {
    while (WORD1(v117) < 0x23FuLL)
    {
      uint64_t v65 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v117);
      char v66 = *v65;
      LODWORD(v65) = v65[1];
      v113[0] = v66;
      int v114 = (int)v65;
      unsigned __int16 v115 = WORD1(v117);
      if (((unint64_t)*(unsigned int *)(*v33 + (((unint64_t)WORD1(v117) >> 3) & 0x1FFC)) >> (BYTE2(v117) & 0x1F)))
      {
        BlueFin::GlSetBase::Remove((uint64_t)v107 + 1448, SWORD1(v117));
        LOWORD(v67) = 0;
        uint64_t v68 = v115;
      }
      else
      {
        uint64_t v69 = BlueFin::GlPeMsmtMgr::AccessPropagatedMeMeas(v107, (const BlueFin::GlSignalId *)v113);
        uint64_t v70 = v69;
        uint64_t v68 = *(unsigned __int16 *)(v69 + 8);
        LOWORD(v71) = *((_WORD *)v107 + v68 + 148);
        double v72 = (double)(*(_DWORD *)v107 - *((_DWORD *)v107 + 384));
        double v73 = (double)v71 + v72;
        if (v73 <= 3000.0)
        {
          double v74 = v72 * 0.001;
          if ((*(unsigned char *)(v69 + 12) & 0x20) != 0) {
            double v75 = v74 + *(double *)(v69 + 56);
          }
          else {
            double v75 = *(double *)(v69 + 56);
          }
          float v76 = *(float *)(v69 + 100);
          *(double *)(v69 + 56) = v75 + *(float *)(v69 + 96) * v74;
          float v77 = v74 * v76;
          *(float *)(v69 + 88) = *(float *)(v69 + 88) + v77;
        }
        else
        {
          BlueFin::GlSetBase::Remove((uint64_t)v107 + 1448, (__int16)v68);
          BlueFin::GlBigArray::Remove(*((void *)v107 + 36) + 1152, *(unsigned __int16 *)(v70 + 8));
          uint64_t v68 = *(unsigned __int16 *)(v70 + 8);
          double v73 = 0.0;
        }
        if (v73 > 65535.0) {
          double v73 = 65535.0;
        }
        int v67 = (int)v73;
      }
      *((_WORD *)v107 + v68 + 148) = v67;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v117);
      if (BYTE1(v117) == v117) {
        goto LABEL_87;
      }
    }
    goto LABEL_113;
  }
LABEL_87:
  double v117 = &v118[1];
  LOBYTE(v118[0]) = 19;
  *(_OWORD *)&v118[1] = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  memset(v121, 0, sizeof(v121));
  float v110 = (void *)((char *)v107 + 19072);
  uint64_t v78 = 100;
  uint64_t v79 = 108;
  do
  {
    uint64_t v80 = *((void *)v56 + 2380);
    uint64_t v81 = v80 + v79;
    unint64_t v82 = *(unsigned __int16 *)(v80 + v79 - 100);
    if (v82 > 0x23E) {
      break;
    }
    if (BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v81 - 108)]) {
      goto LABEL_92;
    }
    uint64_t v83 = 1 << (v82 & 0x1F);
    if ((v83 & *(_DWORD *)(*v33 + 4 * (v82 >> 5))) != 0
      || (v83 & *(_DWORD *)(*v110 + 4 * (v82 >> 5))) == 0
      || *(float *)(v80 + v79) <= 17.0)
    {
      goto LABEL_91;
    }
    unsigned int v87 = *(_DWORD *)v56 - *((_DWORD *)v56 + 384);
    uint64_t v88 = v80 + v79;
    double v89 = (double)v87 * 0.001;
    if ((*(unsigned char *)(v80 + v79 - 96) & 0x20) != 0) {
      double v90 = v89 + *(double *)(v88 - 52);
    }
    else {
      double v90 = *(double *)(v88 - 52);
    }
    uint64_t v91 = v80 + v79;
    float v92 = *(float *)(v80 + v79 - 8);
    *(double *)(v91 - 52) = v90 + *(float *)(v80 + v79 - 12) * v89;
    float v93 = v89 * v92;
    *(float *)(v91 - 20) = *(float *)(v80 + v79 - 20) + v93;
    if (v87 >= 0xFFFF) {
      unsigned int v87 = 0xFFFF;
    }
    *((_WORD *)v56 + v82 + 148) = v87;
    if (v87 >= 0xBB9)
    {
      LODWORD(v82) = *(unsigned __int16 *)(v81 - 100);
      double v33 = v111;
LABEL_91:
      *((_WORD *)v56 + v82 + 148) = 0;
      BlueFin::GlSetBase::Remove((uint64_t)v64, *(__int16 *)(v81 - 100));
      BlueFin::GlBigArray::Remove(*((void *)v56 + 36) + 1152, *(unsigned __int16 *)(v81 - 100));
      goto LABEL_92;
    }
    uint64_t v94 = BlueFin::GlSignalIdArray::Get(*((void *)v56 + 36), v81 - 108);
    if (!v94)
    {
      double v95 = (char *)BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(*((void *)v107 + 36) + 1152), *(unsigned __int16 *)(v81 - 100));
      if (!v95)
      {
        unsigned int v102 = "pPropSigMeas";
        DeviceFaultNotify("glpe_msmtmgr.cpp", 740, "SetMeasurement", (char)"pPropSigMeas");
        unint64_t v103 = "glpe_msmtmgr.cpp";
        int v104 = 740;
        goto LABEL_115;
      }
      uint64_t v94 = (uint64_t)v95;
      *double v95 = 0;
      *((_DWORD *)v95 + 1) = -1;
      *((_WORD *)v95 + 4) = 575;
      *((_DWORD *)v95 + 3) = 0;
      *((_WORD *)v95 + 8) = -1;
      v95[18] = 0;
      *(_OWORD *)(v95 + 20) = 0u;
      *(_OWORD *)(v95 + 36) = 0u;
      *(_OWORD *)(v95 + 56) = 0u;
      *(_OWORD *)(v95 + 72) = 0u;
      *(_OWORD *)(v95 + 88) = xmmword_263BA9EE0;
      *((_DWORD *)v95 + 26) = 0;
      *(void *)(v95 + 108) = 0xBF80000000000000;
      *((_DWORD *)v95 + 29) = 2139095039;
      *((void *)v95 + 15) = 0;
      *((void *)v95 + 16) = 0x38D1B71700000000;
      *((_DWORD *)v95 + 34) = 0;
      v95[140] = 0;
      BlueFin::GlSigMeas::init((uint64_t)v95, v81 - 108);
    }
    if (v81 - 108 != v94)
    {
      *(unsigned char *)uint64_t v94 = *(unsigned char *)(v81 - 108);
      *(_DWORD *)(v94 + 4) = *(_DWORD *)(v80 + v79 - 104);
      *(_WORD *)(v94 + 8) = *(_WORD *)(v81 - 100);
    }
    *(_OWORD *)(v94 + 12) = *(_OWORD *)(v80 + v79 - 96);
    long long v96 = *(_OWORD *)(v80 + v79 - 80);
    long long v97 = *(_OWORD *)(v80 + v79 - 64);
    long long v98 = *(_OWORD *)(v80 + v79 - 48);
    *(_OWORD *)(v94 + 76) = *(_OWORD *)(v80 + v79 - 32);
    *(_OWORD *)(v94 + 60) = v98;
    *(_OWORD *)(v94 + 44) = v97;
    *(_OWORD *)(v94 + 28) = v96;
    long long v99 = *(_OWORD *)(v80 + v79 - 16);
    long long v100 = *(_OWORD *)(v80 + v79);
    long long v101 = *(_OWORD *)(v80 + v79 + 16);
    *(unsigned char *)(v94 + 140) = *(unsigned char *)(v80 + v79 + 32);
    *(_OWORD *)(v94 + 124) = v101;
    *(_OWORD *)(v94 + 108) = v100;
    *(_OWORD *)(v94 + 92) = v99;
    *(_DWORD *)(*v64 + 4 * (*(__int16 *)(v81 - 100) >> 5)) |= 1 << *(_WORD *)(v81 - 100);
    __int16 v56 = v107;
    double v33 = v111;
LABEL_92:
    if ((*(unsigned char *)(v80 + v79 - 96) & 2) != 0)
    {
      int v84 = *(__int16 *)(v81 - 100);
      int v85 = v84 >> 5;
      char v86 = v84 & 0x1F;
      if (((unint64_t)*(unsigned int *)(*v33 + 4 * v85) >> v86)) {
        v117[v85] |= 1 << v86;
      }
    }
    v79 += 144;
    --v78;
  }
  while (v78);
  BlueFin::GlSetBase::operator=((uint64_t)v110, (uint64_t)v33);
  *(_OWORD *)((char *)v56 + 19100) = *(_OWORD *)((char *)v56 + 36);
  *(_OWORD *)((char *)v56 + 19116) = *(_OWORD *)((char *)v56 + 52);
  *(_OWORD *)((char *)v56 + 19132) = *(_OWORD *)((char *)v56 + 68);
  *(_OWORD *)((char *)v56 + 19144) = *((_OWORD *)v56 + 5);
  *(_OWORD *)((char *)v56 + 19084) = *(_OWORD *)((char *)v56 + 20);
  BlueFin::GlMeas::operator=((uint64_t)v107 + 1536, (uint64_t)v9);
  *(_WORD *)((char *)v9 + 113) = 256;
  BlueFin::GlPowerMeas::operator=((uint64_t)v56 + 56400, (uint64_t)v9 + 4);
  BlueFin::GlPeMsmtMgr::SetPwrMeas((float64x2_t *)v56, (uint64_t)v56 + 56400);
}

uint64_t BlueFin::GlPeMsmtMgr::insertMePeMeas(void *a1, uint64_t a2, int a3)
{
  int v6 = *(unsigned __int16 *)(a2 + 8);
  BOOL v7 = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(a1[2397] + 1152), v6);
  uint64_t v8 = a1[2397];
  if (v7)
  {
    uint64_t v9 = BlueFin::GlSignalIdArray::Get(v8, a2);
    if (v9 != a2)
    {
      *(unsigned char *)uint64_t v9 = *(unsigned char *)a2;
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 + 4);
      *(_WORD *)(v9 + 8) = *(_WORD *)(a2 + 8);
    }
    *(_OWORD *)(v9 + 12) = *(_OWORD *)(a2 + 12);
    long long v10 = *(_OWORD *)(a2 + 28);
    long long v11 = *(_OWORD *)(a2 + 44);
    long long v12 = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(v9 + 76) = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(v9 + 60) = v12;
    *(_OWORD *)(v9 + 44) = v11;
    *(_OWORD *)(v9 + 28) = v10;
    long long v13 = *(_OWORD *)(a2 + 92);
    long long v14 = *(_OWORD *)(a2 + 108);
    long long v15 = *(_OWORD *)(a2 + 124);
    *(unsigned char *)(v9 + 140) = *(unsigned char *)(a2 + 140);
    *(_OWORD *)(v9 + 124) = v15;
    *(_OWORD *)(v9 + 108) = v14;
    *(_OWORD *)(v9 + 92) = v13;
    int v16 = a1 + 12;
    goto LABEL_18;
  }
  if (BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(v8 + 1152), v6)) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = a3 == 0;
  }
  if (!v17)
  {
    uint64_t v18 = a1[2397];
    uint64_t v39 = v18 + 1152;
    unsigned __int16 v40 = *(_WORD *)(v18 + 1186) + 1;
    if (*(unsigned __int16 *)(v18 + 1184) <= v40) {
      goto LABEL_23;
    }
    int v19 = 0;
    unsigned int v20 = (int *)(a2 + 4);
    __int16 v21 = 575;
    unsigned int v22 = -7200002;
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v39, (uint64_t)v37);
      if ((((unint64_t)*(unsigned int *)(a1[1] + 4 * (v38 >> 5)) >> (v38 & 0x1F)) & 1) == 0)
      {
        uint64_t v23 = BlueFin::GlSignalIdArray::Get(a1[2397], (uint64_t)v37);
        if (*(_DWORD *)(v23 + 204) < v22)
        {
          int v19 = v37[0];
          __int16 v21 = v38;
          unsigned int v22 = *(_DWORD *)(v23 + 204);
        }
      }
    }
    while (v40 < *(unsigned __int16 *)(v39 + 32));
    if ((v19 - 1) >= 0xBC)
    {
LABEL_23:
      uint64_t v35 = "otSignalIdOldest.GetSvId().isValid()";
      DeviceFaultNotify("glpe_msmtmgr.cpp", 1019, "insertMePeMeas", (char)"otSignalIdOldest.GetSvId().isValid()");
      int v36 = 1019;
    }
    else
    {
      BlueFin::GlBigArray::Remove(a1[2397] + 1152, (unsigned __int16)v21);
      int v16 = a1 + 12;
      BlueFin::GlSetBase::Remove((uint64_t)(a1 + 12), v21);
      int v24 = (char *)BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)(a1[2397] + 1152), *(unsigned __int16 *)(a2 + 8));
      if (v24)
      {
        uint64_t v25 = a1[7076];
        *int v24 = *(unsigned char *)a2;
        int v26 = *v20;
        *((_WORD *)v24 + 4) = *(_WORD *)(a2 + 8);
        *((_DWORD *)v24 + 1) = v26;
        *((_DWORD *)v24 + 3) = *(_DWORD *)(a2 + 12);
        long long v27 = *(_OWORD *)(a2 + 16);
        long long v28 = *(_OWORD *)(a2 + 32);
        long long v29 = *(_OWORD *)(a2 + 64);
        *((_OWORD *)v24 + 3) = *(_OWORD *)(a2 + 48);
        *((_OWORD *)v24 + 4) = v29;
        *((_OWORD *)v24 + 1) = v27;
        *((_OWORD *)v24 + 2) = v28;
        long long v30 = *(_OWORD *)(a2 + 80);
        long long v31 = *(_OWORD *)(a2 + 96);
        long long v32 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(v24 + 125) = *(_OWORD *)(a2 + 125);
        *((_OWORD *)v24 + 6) = v31;
        *((_OWORD *)v24 + 7) = v32;
        *((_OWORD *)v24 + 5) = v30;
        *((_DWORD *)v24 + 54) = 0;
        *((_DWORD *)v24 + 57) = *(_DWORD *)(a2 + 40);
        *((_DWORD *)v24 + 58) = *(_DWORD *)(a2 + 20);
        *((void *)v24 + 46) = 0;
        v24[396] = *(unsigned char *)a2;
        int v33 = *v20;
        *((_WORD *)v24 + 202) = *(_WORD *)(a2 + 8);
        *((_DWORD *)v24 + 100) = v33;
        *((_OWORD *)v24 + 9) = 0u;
        *((_OWORD *)v24 + 10) = 0u;
        *((void *)v24 + 22) = 0;
        *(int64x2_t *)(v24 + 184) = vdupq_n_s64(0x408F400000000000uLL);
        *((_DWORD *)v24 + 54) = 0;
        v24[220] = 1;
        *(_DWORD *)(v24 + 222) = 0;
        *((void *)v24 + 46) = 0;
        *((void *)v24 + 47) = 0;
        *((void *)v24 + 48) = 0x3E7AD7F29ABCAF48;
        *(_OWORD *)(v24 + 200) = xmmword_263BB9FD0;
        v24[408] = 0;
        *((_DWORD *)v24 + 98) = 0;
        *((_OWORD *)v24 + 26) = xmmword_263BB9FE0;
        *((_WORD *)v24 + 224) = 0;
        *((void *)v24 + 54) = 0;
        *((void *)v24 + 55) = v25;
LABEL_18:
        uint64_t result = 1;
        *(_DWORD *)(*v16 + 4 * (*(__int16 *)(a2 + 8) >> 5)) |= 1 << *(_WORD *)(a2 + 8);
        return result;
      }
      uint64_t v35 = "potMePeMeas != nullptr";
      DeviceFaultNotify("glpe_msmtmgr.cpp", 1026, "insertMePeMeas", (char)"potMePeMeas != nullptr");
      int v36 = 1026;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", v36, v35);
  }
  return 0;
}

uint64_t BlueFin::GlMeas::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = (_DWORD *)(a1 + 17520);
    uint64_t v5 = a2 + 17520;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    BlueFin::GlPowerMeas::operator=(a1 + 4, a2 + 4);
    for (uint64_t i = 12; i != 2956; i += 184)
    {
      uint64_t v7 = *(void *)(a2 + 3072);
      uint64_t v8 = *(void *)(a1 + 3072);
      if (v8 != v7)
      {
        uint64_t v9 = v8 + i;
        *(unsigned char *)(v9 - 12) = *(unsigned char *)(v7 + i - 12);
        *(_DWORD *)(v9 - 8) = *(_DWORD *)(v7 + i - 8);
        *(_WORD *)(v9 - 4) = *(_WORD *)(v7 + i - 4);
      }
      long long v10 = (_OWORD *)(v8 + i);
      long long v11 = (long long *)(v7 + i);
      long long v12 = *v11;
      long long v13 = v11[2];
      v10[1] = v11[1];
      v10[2] = v13;
      *long long v10 = v12;
      long long v14 = v11[3];
      long long v15 = v11[4];
      long long v16 = v11[6];
      v10[5] = v11[5];
      v10[6] = v16;
      v10[3] = v14;
      v10[4] = v15;
      long long v17 = v11[7];
      long long v18 = v11[8];
      long long v19 = v11[9];
      *(_OWORD *)((char *)v10 + 156) = *(long long *)((char *)v11 + 156);
      v10[8] = v18;
      v10[9] = v19;
      v10[7] = v17;
    }
    uint64_t v20 = 0;
    uint64_t v21 = 100;
    do
    {
      uint64_t v22 = *(void *)(a2 + 17504);
      uint64_t v23 = *(void *)(a1 + 17504);
      if (v23 != v22)
      {
        uint64_t v24 = v23 + v20;
        *(unsigned char *)uint64_t v24 = *(unsigned char *)(v22 + v20);
        *(_DWORD *)(v24 + 4) = *(_DWORD *)(v22 + v20 + 4);
        *(_WORD *)(v24 + 8) = *(_WORD *)(v22 + v20 + 8);
      }
      uint64_t v25 = v23 + v20;
      uint64_t v26 = v22 + v20;
      *(_OWORD *)(v25 + 12) = *(_OWORD *)(v26 + 12);
      long long v27 = *(_OWORD *)(v26 + 28);
      long long v28 = *(_OWORD *)(v26 + 44);
      long long v29 = *(_OWORD *)(v26 + 60);
      *(_OWORD *)(v25 + 76) = *(_OWORD *)(v26 + 76);
      *(_OWORD *)(v25 + 60) = v29;
      *(_OWORD *)(v25 + 44) = v28;
      *(_OWORD *)(v25 + 28) = v27;
      long long v30 = *(_OWORD *)(v26 + 92);
      long long v31 = *(_OWORD *)(v26 + 108);
      long long v32 = *(_OWORD *)(v26 + 124);
      *(unsigned char *)(v25 + 140) = *(unsigned char *)(v26 + 140);
      *(_OWORD *)(v25 + 124) = v32;
      *(_OWORD *)(v25 + 108) = v31;
      *(_OWORD *)(v25 + 92) = v30;
      v20 += 144;
      --v21;
    }
    while (v21);
    *(void *)(a1 + 17512) = *(void *)(a2 + 17512);
    *unint64_t v4 = *(_DWORD *)v5;
    *(unsigned char *)(a1 + 17524) = *(unsigned char *)(v5 + 4);
  }
  return a1;
}

double BlueFin::GlPowerMeas::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 109))
  {
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  if (!*(unsigned char *)(a2 + 110))
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  }
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(void *)(a1 + 60) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  double result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return result;
}

double BlueFin::GlPeMsmtMgr::SetPwrMeas(float64x2_t *a1, uint64_t a2)
{
  unint64_t v4 = (char *)&a1[3532].f64[1];
  BlueFin::GlPowerMeas::SetPwrMeas((uint64_t)&a1[3525], a2);
  uint64_t v5 = *((void *)v4 + 12);
  if (v5) {
    float v6 = flt_263BBA008[(*(_DWORD *)(v5 + 88) - 39) < 2];
  }
  else {
    float v6 = 1.3;
  }
  float v12 = v6;
  float v7 = (double)*(__int16 *)(a2 + 10) * 0.001;
  float v11 = v7;
  *(double *)unint64_t v4 = (float)((float)(v6 * *(float *)(a2 + 12)) * v7);
  BOOL v8 = BlueFin::GlSignalIdSet::CntSecondarySignalSvIdSet((BlueFin::GlSignalIdSet *)&a1[6], 1);
  double v9 = (float)((float)(v12 * *(float *)(a2 + 20)) * v11);
  if (v8)
  {
    *((double *)v4 + 2) = v9;
    *((double *)v4 + 4) = (float)((float)(v12 * *(float *)(a2 + 24)) * v11);
  }
  else
  {
    *((double *)v4 + 1) = v9;
    *((double *)v4 + 3) = (float)((float)(v12 * *(float *)(a2 + 24)) * v11);
  }
  a1[3535] = vcvtq_f64_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)(a2 + 28), v12), v11));
  a1[3536] = vcvtq_f64_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)(a2 + 36), v12), v11));
  double result = (float)((float)(v12 * *(float *)(a2 + 44)) * v11);
  *((double *)v4 + 9) = result;
  return result;
}

BOOL BlueFin::GlSignalIdSet::CntSecondarySignalSvIdSet(BlueFin::GlSignalIdSet *this, int a2)
{
  BOOL result = BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    long long v14 = v16;
    char v15 = 8;
    memset(v16, 0, sizeof(v16));
    unsigned __int8 v9 = *((unsigned char *)this + 8);
    memcpy(v13, *(const void **)this, 4 * v9);
    __int16 v11 = 0;
    unsigned __int8 v10 = 0;
    int v12 = v13[0];
    BlueFin::GlSetIterator::operator++(&v9);
    while (v10 != v9)
    {
      if (*((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v11 + 1) - 1 <= 1)
      {
        unint64_t v5 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v11);
        unint64_t v6 = v5 >> 5;
        unint64_t v7 = *((unsigned int *)v16 + (v5 >> 5));
        char v8 = v5 & 0x1F;
        if (((v7 >> v8) & 1) == 0)
        {
          if (!(_WORD)--a2) {
            return 1;
          }
          *((_DWORD *)v16 + v6) = (1 << v8) | v7;
        }
      }
      BlueFin::GlSetIterator::operator++(&v9);
    }
    return 0;
  }
  return result;
}

double BlueFin::GlPowerMeas::SetPwrMeas(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 109))
  {
    *(void *)a1 = *(void *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  }
  *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  *(void *)(a1 + 36) = *(void *)(a2 + 36);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  if (!*(unsigned char *)(a2 + 110))
  {
    *(int32x4_t *)(a1 + 80) = vaddq_s32(*(int32x4_t *)(a1 + 80), *(int32x4_t *)(a2 + 80));
    *(int32x2_t *)(a1 + 96) = vadd_s32(*(int32x2_t *)(a1 + 96), *(int32x2_t *)(a2 + 96));
    *(_DWORD *)(a1 + 104) += *(_DWORD *)(a2 + 104);
  }
  *(void *)(a1 + 60) = *(void *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  double result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return result;
}

void BlueFin::GlMeSrdEstCodePrm::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, unsigned __int8 *a7, uint64_t a8, float *a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, unsigned __int8 a13, char a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, float *a18, float *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!*(unsigned char *)a16)
  {
    double v118 = "stAsicCodePrmTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 925, "Run", (char)"stAsicCodePrmTrkMsmt.bValid");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 925;
    goto LABEL_176;
  }
  if (!*(unsigned char *)(a16 + 24))
  {
    double v118 = "stAsicCodePrmTrkMsmt.stClosedLpDll.bValid";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 926, "Run", (char)"stAsicCodePrmTrkMsmt.stClosedLpDll.bValid");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 926;
    goto LABEL_176;
  }
  int v22 = *a7;
  if ((v22 - 1) >= 0xBC)
  {
    double v118 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 927, "Run", (char)"otSignalId.GetSvId().isValid()");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 927;
    goto LABEL_176;
  }
  uint64_t v26 = a19;
  if ((unsigned __int8 *)(a1 + 8) == a7)
  {
    unsigned int v27 = *(unsigned __int16 *)(a1 + 16);
  }
  else
  {
    *(unsigned char *)(a1 + 8) = v22;
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a7 + 1);
    unsigned int v27 = *((unsigned __int16 *)a7 + 4);
    *(_WORD *)(a1 + 16) = v27;
  }
  if (v27 >= 0x23F) {
    goto LABEL_161;
  }
  uint64_t v28 = *(int *)(a1 + 12);
  uint64_t v29 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 8)];
  unsigned int v30 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v28 + v29];
  if (!v30) {
    goto LABEL_162;
  }
  unsigned int v31 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v28 - v28 + v29];
  if (!v31) {
    goto LABEL_163;
  }
  if (*(_DWORD *)a19 == 1)
  {
    float v32 = a6[12];
    if ((a15 & (*(float *)(a17 + 8) < 20.0)) != 0) {
      float v32 = 0.36;
    }
    BOOL v33 = a19[2] <= v32;
    int v34 = (*(_DWORD *)a18 == 1) & ~a11;
    if (a18[2] > v32) {
      int v34 = 0;
    }
  }
  else
  {
    BOOL v33 = 0;
    int v34 = 0;
  }
  double v35 = *(double *)(a16 + 16);
  float v36 = 1.0;
  double v37 = 0.0;
  float v38 = (float)v30;
  if ((v34 & 1) == 0 && !v33)
  {
    uint64_t v39 = a3;
    char v126 = 0;
    char v122 = 0;
    char v40 = 1;
    int v41 = 1;
LABEL_36:
    char v121 = 1;
    goto LABEL_37;
  }
  if (((v33 | v34) & 1) == 0)
  {
    double v118 = "bExtCvecOk || bNomCvecOk";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 107, "EstTrkCodePrmViaOpenLpPeakFit", (char)"bExtCvecOk || bNomCvecOk");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 107;
    goto LABEL_176;
  }
  float v42 = (double)v31 * 0.001;
  if (!v33) {
    uint64_t v26 = a18;
  }
  float v43 = v26[7];
  float v44 = fabsf(v43);
  if (*(_DWORD *)(a16 + 68) == 2) {
    float v45 = v44;
  }
  else {
    float v45 = -0.0;
  }
  if (!*(unsigned char *)(a16 + 56) || *(_DWORD *)(a16 + 60) != 2) {
    goto LABEL_34;
  }
  double v46 = *(double *)(a16 + 120) - *(double *)(a16 + 96);
  if (v46 <= 0.0)
  {
    double v118 = "dDeltaTimeStampInRxSec > 0";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1788, "CalcDllPullInCompensation", (char)"dDeltaTimeStampInRxSec > 0");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 1788;
    goto LABEL_176;
  }
  float v47 = v26[3];
  float v124 = v26[2];
  double v48 = BlueFin::GlMeSrdEstCodePrm::SubMsPart((BlueFin::GlMeSrdEstCodePrm *)a1, v46 * (*(double *)(a16 + 88) + 1.0));
  double v50 = BlueFin::GlMeSrdEstCodePrm::SubMsPart(v49, *(double *)(a16 + 128) - *(double *)(a16 + 104));
  double v51 = v42 * 0.5;
  if (v48 < v51 * -1.0001)
  {
    double v118 = "dExpectedDeltaCodePhsInSec >= (-fCaEpochInSec * 0.5 * 1.0001)";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1798, "CalcDllPullInCompensation", (char)"dExpectedDeltaCodePhsInSec >= (-fCaEpochInSec * 0.5 * 1.0001)");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 1798;
    goto LABEL_176;
  }
  if (v48 > v51 * 1.0001)
  {
    double v118 = "dExpectedDeltaCodePhsInSec <= (fCaEpochInSec * 0.5 * 1.0001)";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1799, "CalcDllPullInCompensation", (char)"dExpectedDeltaCodePhsInSec <= (fCaEpochInSec * 0.5 * 1.0001)");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 1799;
    goto LABEL_176;
  }
  if (v50 < v51 * -1.0001)
  {
    double v118 = "dActualDeltaCodePhsInSec >= (-fCaEpochInSec * 0.5 * 1.0001)";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1801, "CalcDllPullInCompensation", (char)"dActualDeltaCodePhsInSec >= (-fCaEpochInSec * 0.5 * 1.0001)");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 1801;
    goto LABEL_176;
  }
  if (v50 > v51 * 1.0001)
  {
    double v118 = "dActualDeltaCodePhsInSec <= (fCaEpochInSec * 0.5 * 1.0001)";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1802, "CalcDllPullInCompensation", (char)"dActualDeltaCodePhsInSec <= (fCaEpochInSec * 0.5 * 1.0001)");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 1802;
    goto LABEL_176;
  }
  double v52 = v50 - v48 + (v50 - v48) * -0.5;
  double v53 = v38;
  if (fabs(v52) > v51 / v38)
  {
LABEL_34:
    double v37 = 0.0;
    float v36 = 1.0;
    if (v42 > 0.0)
    {
      uint64_t v39 = a3;
      char v126 = 0;
      int v41 = 0;
      char v122 = 0;
      char v40 = 1;
      goto LABEL_36;
    }
LABEL_169:
    double v118 = "fCaEpochInSec > 0.0f";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 137, "EstTrkCodePrmViaOpenLpPeakFit", (char)"fCaEpochInSec > 0.0f");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 137;
    goto LABEL_176;
  }
  if (v42 <= 0.0) {
    goto LABEL_169;
  }
  uint64_t v39 = a3;
  float v38 = v47 + v45;
  double v37 = v35 - (v43 + v52 * (v53 / v42));
  char v40 = 0;
  if (v37 >= 0.0)
  {
    if (v37 >= v53)
    {
      double v37 = v37 - v53;
      char v121 = 0;
      char v122 = -1;
      char v126 = 1;
      int v41 = 1;
    }
    else
    {
      char v126 = 1;
      int v41 = 1;
      char v121 = 1;
      char v122 = 0;
    }
  }
  else
  {
    double v37 = v37 + v53;
    char v126 = 1;
    int v41 = 1;
    char v121 = 0;
    char v122 = 1;
  }
  float v36 = v124;
LABEL_37:
  double v54 = *(double *)(a16 + 16);
  unsigned int v55 = *((unsigned __int8 *)a6 + 16);
  char v125 = v40;
  if (!*((unsigned char *)a6 + 16))
  {
    unsigned int v59 = *((unsigned __int8 *)a6 + 24);
    if (!*((unsigned char *)a6 + 24))
    {
      double v118 = "!otEstValidityChkBitMsk32.IsEmpty()";
      DeviceFaultNotify("glmesrd_codeprm.cpp", 1474, "DetermineDllValidity", (char)"!otEstValidityChkBitMsk32.IsEmpty()");
      long long v119 = "glmesrd_codeprm.cpp";
      int v120 = 1474;
LABEL_176:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v119, v120, v118);
    }
    int v60 = 0;
    int v61 = 2;
    goto LABEL_58;
  }
  float __src = *(float *)(a16 + 32) - *(float *)(a16 + 28);
  char v132 = *(unsigned char *)(a16 + 48);
  float v56 = *(float *)(a16 + 40);
  double v57 = v56;
  if (v56 <= 0.0)
  {
    if (v56 >= 0.0)
    {
      LOWORD(v62) = 0;
      goto LABEL_46;
    }
    double v58 = -0.5;
  }
  else
  {
    double v58 = 0.5;
  }
  int v62 = (int)(v57 + v58);
LABEL_46:
  __int16 v131 = v62;
  memcpy((void *)(*(void *)(a1 + 72) + *(unsigned __int16 *)(a1 + 84) * (unint64_t)*(unsigned __int8 *)(a1 + 82)), &__src, *(unsigned __int16 *)(a1 + 84));
  unsigned __int8 v63 = *(unsigned char *)(a1 + 82) + 1;
  *(unsigned char *)(a1 + 82) = v63;
  unsigned int v64 = *(unsigned __int8 *)(a1 + 81);
  if (v64 <= v63)
  {
    *(unsigned char *)(a1 + 80) = 1;
    *(unsigned char *)(a1 + 82) = 0;
  }
  else
  {
    uint64_t v65 = 81;
    if (!*(unsigned char *)(a1 + 80)) {
      uint64_t v65 = 82;
    }
    unsigned int v64 = *(unsigned __int8 *)(a1 + v65);
  }
  int v60 = 0;
  if (v64 < v55 || !*(unsigned char *)a17) {
    goto LABEL_56;
  }
  v128[0] = *(_DWORD *)(a17 + 8);
  if (*(unsigned __int16 *)(a1 + 16) >= 0x23Fu)
  {
    double v118 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    long long v119 = "glsignalid.h";
    int v120 = 678;
    goto LABEL_176;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a1 + 12)
                                                              - *(int *)(a1 + 12)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 8)]])
  {
LABEL_163:
    double v118 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    long long v119 = "glsignalid.h";
    int v120 = 685;
    goto LABEL_176;
  }
  float v66 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a1 + 12)
                                                                                       - *(int *)(a1 + 12)
                                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 8)]]
      * 0.001;
  float v67 = *a9;
  *(float *)&v128[1] = v66;
  *(float *)&v128[2] = v67;
  v128[3] = *(_DWORD *)(a5 + 20);
  char v129 = *(unsigned char *)(a16 + 49);
  float v68 = BlueFin::GlMeSrdObsBuf::SumFcn((BlueFin::GlMeSrdObsBuf *)(a1 + 72), v55, v128, (double (*)(void *, void *))BlueFin::GlMeSrdEstCodePrm::CalcEarlyMinusLateDllValidityTestStatSummand);
  int v60 = a6[5] >= v68;
LABEL_56:
  unsigned int v59 = *((unsigned __int8 *)a6 + 24);
  if (!*((unsigned char *)a6 + 24))
  {
    int v61 = 1;
    goto LABEL_74;
  }
  int v61 = 3;
LABEL_58:
  float v69 = a9[1];
  float v70 = **(float **)(v39 + 24);
  float v71 = *(float *)(a5 + 20) / v70;
  if (a12 <= 3u) {
    float v72 = 1.0;
  }
  else {
    float v72 = *(float *)(a5 + 20) / v70;
  }
  float v73 = v71 * v72;
  float v74 = (float)(v69 * a6[9]) * (float)(v71 * v72);
  float v75 = *(float *)(a1 + 40);
  float v76 = v75 - v74;
  if ((float)(v75 - v74) < 0.0) {
    float v76 = -(float)(v75 - v74);
  }
  if (v76 >= 1.0 || v75 == 0.0 && v74 != 0.0)
  {
    *(float *)(a1 + 40) = v74;
    *(float *)double v128 = v74;
    *(unsigned char *)(a1 + 58) = 0;
    *(unsigned char *)(a1 + 56) = 1;
    if (*(unsigned char *)(a1 + 57))
    {
      unint64_t v77 = 0;
      do
      {
        memcpy((void *)(*(void *)(a1 + 48) + v77 * *(unsigned __int16 *)(a1 + 60)), v128, *(unsigned __int16 *)(a1 + 60));
        ++v77;
      }
      while (v77 < *(unsigned __int8 *)(a1 + 57));
    }
  }
  v128[0] = *(_DWORD *)(a16 + 36);
  memcpy((void *)(*(void *)(a1 + 48) + *(unsigned __int16 *)(a1 + 60) * (unint64_t)*(unsigned __int8 *)(a1 + 58)), v128, *(unsigned __int16 *)(a1 + 60));
  unsigned __int8 v78 = *(unsigned char *)(a1 + 58) + 1;
  *(unsigned char *)(a1 + 58) = v78;
  if (*(unsigned __int8 *)(a1 + 57) <= v78)
  {
    *(unsigned char *)(a1 + 56) = 1;
    *(unsigned char *)(a1 + 58) = 0;
  }
  float v79 = v73 * (float)(v69 * a6[10]);
  float v80 = BlueFin::GlMeSrdObsBuf::SumFcn((BlueFin::GlMeSrdObsBuf *)(a1 + 48), v59, 0, (double (*)(void *, void *))BlueFin::GlMeSrdEstCodePrm::CalcPromptMagSqrdDllValidityTestStatSummand)/ (double)v59;
  if (v79 <= v80) {
    v60 |= 2u;
  }
LABEL_74:
  if ((v60 & ~v61) != 0)
  {
    double v118 = "otValRslt.IsEmpty()";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1480, "DetermineDllValidity", (char)"otValRslt.IsEmpty()");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 1480;
    goto LABEL_176;
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x3F);
  }
  float v83 = __exp10f(*(float *)(a17 + 8) / 10.0);
  if (v61 != v60)
  {
    int v85 = a13;
    if (*(unsigned __int16 *)(a1 + 16) < 0x23Fu)
    {
      unsigned int v86 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * *(int *)(a1 + 12)
                                                                     + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 8)]];
      if (v86)
      {
        float v84 = (float)v86;
        goto LABEL_82;
      }
LABEL_162:
      double v118 = "ucChipsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
      long long v119 = "glsignalid.h";
      int v120 = 784;
      goto LABEL_176;
    }
LABEL_161:
    double v118 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 777, "GetChipsPerEpoch", (char)"IsValid()");
    long long v119 = "glsignalid.h";
    int v120 = 777;
    goto LABEL_176;
  }
  float v84 = sqrtf((float)((float)(*(float *)(a5 + 92) * *(float *)(a5 + 88))* (float)((float)(2.0 / (float)(v83 * (float)(*(float *)(a5 + 20) * (float)(2.0 - *(float *)(a5 + 92)))))+ 1.0))/ (float)(v83 + v83));
  int v85 = a13;
LABEL_82:
  unsigned int v87 = *(_DWORD *)(a16 + 4);
  unsigned int v88 = *(unsigned __int8 *)(a10 + 1);
  char v89 = *(unsigned char *)(a10 + 3);
  *(_WORD *)a22 = 0;
  *(unsigned char *)(a22 + 2) = 0;
  *(void *)(a22 + 8) = 0;
  *(_DWORD *)(a22 + 16) = 0;
  *(unsigned char *)(a22 + 28) = v126 & v41;
  unsigned int v90 = *((unsigned __int16 *)a6 + 22);
  int v91 = (v88 >> 5) & ~v85 & ((v89 & 0x10) >> 4);
  if (v91 == 1)
  {
    *(unsigned char *)(a1 + 20) = 1;
    *(_DWORD *)(a1 + 28) = v87;
    unsigned int v92 = *(unsigned __int16 *)(a1 + 32);
    if (v90 > v92) {
      LOWORD(v92) = v90;
    }
    *(_WORD *)(a1 + 32) = v92;
  }
  if (v87 <= v90)
  {
    int v95 = 1;
    char v96 = v125;
    if (!v41) {
      goto LABEL_137;
    }
  }
  else
  {
    if (v61 == v60) {
      char v93 = 1;
    }
    else {
      char v93 = v126;
    }
    unsigned int v94 = *(_DWORD *)(a1 + 24);
    if (v93)
    {
      if (v94 >= 4)
      {
        *(unsigned char *)(a1 + 20) = 1;
        *(_DWORD *)(a1 + 24) = 0;
      }
    }
    else
    {
      unsigned int v97 = v94 + 1;
      *(_DWORD *)(a1 + 24) = v97;
      unsigned int v98 = *(unsigned __int16 *)(a1 + 32);
      if (v90 > v98) {
        LOWORD(v98) = v90;
      }
      *(_WORD *)(a1 + 32) = v98;
      if (v97 >= 4)
      {
        *(unsigned char *)(a1 + 20) = 1;
        *(_DWORD *)(a1 + 28) = v87;
      }
    }
    unsigned int v99 = *(_DWORD *)(a1 + 28);
    BOOL v100 = v87 >= v99;
    unsigned int v101 = v87 - v99;
    char v96 = v125;
    if (!v100)
    {
      double v118 = "ulEpochCntInMs >= m_stCodePhsState.m_ulStartOfDllProbationPeriodInMs";
      DeviceFaultNotify("glmesrd_codeprm.cpp", 727, "UpdateDllProbation", (char)"ulEpochCntInMs >= m_stCodePhsState.m_ulStartOfDllProbationPeriodInMs");
      long long v119 = "glmesrd_codeprm.cpp";
      int v120 = 727;
      goto LABEL_176;
    }
    if (*(unsigned char *)(a1 + 20) && (unsigned int v102 = *(unsigned __int16 *)(a1 + 32), v101 <= v102))
    {
      if (v90 <= v102) {
        __int16 v103 = *(_WORD *)(a1 + 32);
      }
      else {
        __int16 v103 = v90;
      }
      *(_WORD *)(a1 + 32) = v103;
      int v95 = 1;
      if (!v41) {
        goto LABEL_137;
      }
    }
    else
    {
      int v95 = 0;
      *(unsigned char *)(a1 + 20) = 0;
      *(_WORD *)(a1 + 32) = 0;
      if (!v41) {
        goto LABEL_137;
      }
    }
  }
  char v104 = v85 & ~a14;
  uint64_t v82 = *(unsigned int *)a6;
  BOOL v105 = v82 != 0;
  if ((v104 & 1) == 0 && !v82) {
    goto LABEL_137;
  }
  int v106 = 0;
  int v107 = v121 & (*((_DWORD *)a6 + 13) >= v87) & ~(_BYTE)v91;
  if (*((_DWORD *)a6 + 13) < v87) {
    char v108 = 1;
  }
  else {
    char v108 = v96;
  }
  uint64_t v81 = 28;
  while (1)
  {
    uint64_t v82 = v105 ? v82 : v104 & 1u;
    BOOL v109 = v82 != 1;
    if (v82 == 1) {
      break;
    }
    if (v82 != 2)
    {
      double v118 = "0";
      DeviceFaultNotify("glmesrd_codeprm.cpp", 466, "SelectPublishedCodePrmEst", (char)"0");
      long long v119 = "glmesrd_codeprm.cpp";
      int v120 = 466;
      goto LABEL_176;
    }
    if ((v108 & 1) == 0)
    {
      *(unsigned char *)a22 = 1;
      *(_DWORD *)(a22 + 20) = 2;
      *(double *)(a22 + 8) = v37;
      *(unsigned char *)(a22 + 2) = v122;
      goto LABEL_136;
    }
LABEL_128:
    v106 += v105;
    v104 &= v105 && v109;
    uint64_t v82 = LODWORD(a6[v106]);
    BOOL v105 = v82 != 0;
    if (v82) {
      char v111 = 1;
    }
    else {
      char v111 = v104;
    }
    if ((v111 & 1) == 0) {
      goto LABEL_137;
    }
  }
  if (v96 & 1 | (v61 != v60)) {
    goto LABEL_128;
  }
  if (*(unsigned __int16 *)(a1 + 16) >= 0x23Fu) {
    goto LABEL_161;
  }
  uint64_t v82 = *(int *)(a1 + 12);
  unsigned int v110 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v82
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 8)]];
  if (!v110) {
    goto LABEL_162;
  }
  if (vabdd_f64(v37 - (double)(v110 * v122), v54) >= (double)v110 * 0.5) {
    goto LABEL_128;
  }
  if (!v95)
  {
    *(unsigned char *)a22 = 1;
    *(_DWORD *)(a22 + 20) = 1;
    *(double *)(a22 + 8) = v54;
    goto LABEL_157;
  }
  if (!v107) {
    goto LABEL_128;
  }
  if (v90 <= *(unsigned __int16 *)(a1 + 32)) {
    unsigned int v90 = *(unsigned __int16 *)(a1 + 32);
  }
  if (!v90)
  {
    double v118 = "dMaxDllPullinProbationTimeInMs > 0.0";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 403, "SelectPublishedCodePrmEst", (char)"dMaxDllPullinProbationTimeInMs > 0.0");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 403;
    goto LABEL_176;
  }
  double v112 = (double)(v87 - *(_DWORD *)(a1 + 28)) / (double)v90;
  double v113 = 1.0 - v112;
  float v114 = v112;
  float v115 = 1.0 - v112;
  float v116 = fabsf(v115);
  if (v114 > 1.0 && v116 > 1.0)
  {
    double v118 = "FABS_F((float)dWeightApplyToDLL) <= 1.0f||FABS_F((float)dWeightApplyToPkfit) <= 1.0f";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 408, "SelectPublishedCodePrmEst", (char)"FABS_F((float)dWeightApplyToDLL) <= 1.0f||FABS_F((float)dWeightApplyToPkfit) <= 1.0f");
    long long v119 = "glmesrd_codeprm.cpp";
    int v120 = 408;
    goto LABEL_176;
  }
  *(unsigned char *)a22 = 1;
  *(_DWORD *)(a22 + 20) = 1;
  *(double *)(a22 + 8) = v37 * v113 + v112 * v54;
  float v84 = v113 * v38 + v112 * v84;
LABEL_157:
  *(float *)(a22 + 16) = v84;
  if (v82 == 2)
  {
    if (v38 < v84) {
      float v38 = v84;
    }
LABEL_136:
    *(float *)(a22 + 16) = v38;
  }
LABEL_137:
  *(unsigned char *)(a22 + 1) = *(unsigned char *)(a16 + 8);
  *(unsigned char *)(a22 + 26) = 1;
  *(unsigned char *)(a22 + 27) = v96;
  *(float *)(a22 + 32) = v36;
  *(unsigned char *)(a22 + 24) = 1;
  *(unsigned char *)(a22 + 25) = v61 != v60;
  if (*((_DWORD *)a7 + 1) == 2)
  {
    BlueFin::GlMeSrdEstCodePrm::OverrideTrkCodePrmRmsev2022(a1, v81, v82, a17, (float *)a5, a22);
  }
  else
  {
    BlueFin::GlMeSrdEstCodePrm::OverrideTrkCodePrmRmse(a1, v81, v82, a17, a5, a22);
  }
}

double BlueFin::GlMeSrdEstCodePrm::SubMsPart(BlueFin::GlMeSrdEstCodePrm *this, double a2)
{
  double v2 = a2 * 1000.0 - floor(a2 * 1000.0);
  if (v2 < 0.0 || v2 >= 1.0)
  {
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1872, "SubMsPart", (char)"(0.0 <= dSubMsTimeInMs) && (dSubMsTimeInMs < 1.0)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_codeprm.cpp", 1872, "(0.0 <= dSubMsTimeInMs) && (dSubMsTimeInMs < 1.0)");
  }
  double v4 = 0.001;
  double result = v2 * 0.001;
  if (result <= 0.0005)
  {
    if (result > -0.0005) {
      return result;
    }
  }
  else
  {
    double v4 = -0.001;
  }
  return result + v4;
}

double BlueFin::GlMeSrdObsBuf::SumFcn(BlueFin::GlMeSrdObsBuf *this, unsigned int a2, void *a3, double (*a4)(void *, void *))
{
  unsigned int v6 = a2;
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned __int8 *)this + 9) >= a2)
    {
      unsigned int v8 = *((unsigned __int8 *)this + 10);
      goto LABEL_5;
    }
    long long v13 = "ucNbElemSum<=m_ucNbElem";
    DeviceFaultNotify("glmesrd_obsbuf.cpp", 78, "SumFcn", (char)"ucNbElemSum<=m_ucNbElem");
    int v14 = 78;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_obsbuf.cpp", v14, v13);
  }
  unsigned int v8 = *((unsigned __int8 *)this + 10);
  if (v8 < a2)
  {
    long long v13 = "ucNbElemSum<=m_ucElemIdx";
    DeviceFaultNotify("glmesrd_obsbuf.cpp", 80, "SumFcn", (char)"ucNbElemSum<=m_ucElemIdx");
    int v14 = 80;
    goto LABEL_16;
  }
LABEL_5:
  unsigned __int8 v9 = v8 - a2;
  if (v8 >= a2)
  {
    if (!a2) {
      return 0.0;
    }
  }
  else
  {
    v9 += *((unsigned char *)this + 9);
  }
  double v10 = 0.0;
  do
  {
    double v10 = v10 + a4(a3, (void *)(*(void *)this + *((unsigned __int16 *)this + 6) * (unint64_t)v9));
    unsigned int v11 = *((unsigned __int8 *)this + 9);
    if (v11 > (v9 + 1)) {
      LOBYTE(v11) = 0;
    }
    unsigned __int8 v9 = v9 + 1 - v11;
    --v6;
  }
  while ((_BYTE)v6);
  return v10;
}

double BlueFin::GlMeSrdEstCodePrm::CalcEarlyMinusLateDllValidityTestStatSummand(BlueFin::GlMeSrdEstCodePrm *this, float *a2, void *a3, float a4)
{
  if (!a2)
  {
    long long v18 = "potBufElem != nullptr";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1707, "CalcEarlyMinusLateDllValidityTestStatSummand", (char)"potBufElem != nullptr");
    int v19 = 1707;
    goto LABEL_15;
  }
  if (!this)
  {
    long long v18 = "potTestStatParam != nullptr";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1708, "CalcEarlyMinusLateDllValidityTestStatSummand", (char)"potTestStatParam != nullptr");
    int v19 = 1708;
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_codeprm.cpp", v19, v18);
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 2);
  LOBYTE(a4) = *((unsigned char *)a2 + 6);
  float v6 = (float)LODWORD(a4);
  LOBYTE(a4) = *((unsigned char *)this + 16);
  float v7 = *((float *)this + 1);
  float v9 = *((float *)this + 2);
  float v8 = *((float *)this + 3);
  float v10 = v6 / (float)LODWORD(a4);
  float v11 = BlueFin::GlMeSrdSatReport::CalcDbHzToTargetCohSnrInLin(this, *(float *)this, v8);
  double v12 = 0.5;
  if ((float)(v10 * 1000.0) <= 0.0)
  {
    double v12 = -0.5;
    if ((float)(v10 * 1000.0) >= 0.0) {
      goto LABEL_9;
    }
  }
  int v13 = (int)(v12 + (float)(v10 * 1000.0));
  switch(v13)
  {
    case 200:
      double v14 = 0.36;
      double v15 = 0.64;
      break;
    case 600:
      double v14 = 0.04;
      double v15 = 0.16;
      break;
    case 400:
      double v14 = 0.04;
      double v15 = 0.36;
      break;
    default:
LABEL_9:
      double v15 = (float)((float)(1.0 - v10) * (float)(1.0 - v10));
      double v14 = (float)((float)((float)(v10 * -2.0) + 1.0) * (float)((float)(v10 * -2.0) + 1.0));
      break;
  }
  double v16 = v15 * (float)((float)((float)((float)(v8 / v7) * v9) * v11) + (float)((float)((float)(v8 / v7) * v9) * v11));
  *(float *)&double v16 = ((1.0 - v14) * (float)((float)(v8 * v9) / v7) + (v16 + v16) * v10)
                 * (float)((float)((float)(v8 * v9) / v7) + (float)((float)(v8 * v9) / v7))
                 / (double)v5;
  return (float)((float)(*a2 * *a2) / *(float *)&v16);
}

float BlueFin::GlMeSrdSatReport::CalcDbHzToTargetCohSnrInLin(BlueFin::GlMeSrdSatReport *this, float a2, float a3)
{
  double v4 = 0.5;
  if ((float)(a3 * 1000000.0) <= 0.0)
  {
    double v4 = -0.5;
    if ((float)(a3 * 1000000.0) >= 0.0)
    {
LABEL_38:
      double v6 = log10f(a3);
      goto LABEL_39;
    }
  }
  int v5 = (int)(v4 + (float)(a3 * 1000000.0));
  if (v5 > 10999)
  {
    if (v5 > 15999)
    {
      if (v5 <= 17999)
      {
        if (v5 != 16000)
        {
          if (v5 == 17000)
          {
            double v6 = -1.76955108;
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        double v6 = -1.79588002;
      }
      else
      {
        switch(v5)
        {
          case 18000:
            double v6 = -1.74472749;
            break;
          case 19000:
            double v6 = -1.7212464;
            break;
          case 20000:
            double v6 = -1.69897;
            break;
          default:
            goto LABEL_38;
        }
      }
    }
    else if (v5 <= 12999)
    {
      if (v5 != 11000)
      {
        if (v5 == 12000)
        {
          double v6 = -1.92081875;
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      double v6 = -1.95860731;
    }
    else
    {
      switch(v5)
      {
        case 13000:
          double v6 = -1.88605665;
          break;
        case 14000:
          double v6 = -1.85387196;
          break;
        case 15000:
          double v6 = -1.82390874;
          break;
        default:
          goto LABEL_38;
      }
    }
  }
  else if (v5 > 5999)
  {
    if (v5 <= 7999)
    {
      if (v5 != 6000)
      {
        if (v5 == 7000)
        {
          double v6 = -2.15490196;
          goto LABEL_39;
        }
        goto LABEL_38;
      }
      double v6 = -2.22184875;
    }
    else
    {
      switch(v5)
      {
        case 8000:
          double v6 = -2.09691001;
          break;
        case 9000:
          double v6 = -2.04575749;
          break;
        case 10000:
          double v6 = -2.0;
          break;
        default:
          goto LABEL_38;
      }
    }
  }
  else
  {
    if (v5 <= 2999)
    {
      double v6 = -3.0;
      if (v5 == 1000) {
        goto LABEL_39;
      }
      if (v5 == 2000)
      {
        double v6 = -2.69897;
        goto LABEL_39;
      }
      goto LABEL_38;
    }
    switch(v5)
    {
      case 3000:
        double v6 = -2.52287875;
        break;
      case 4000:
        double v6 = -2.39794001;
        break;
      case 5000:
        double v6 = -2.30103;
        break;
      default:
        goto LABEL_38;
    }
  }
LABEL_39:
  float v7 = v6 + (float)(a2 * 0.1);

  return __exp10f(v7);
}

#error "263A08078: call analysis failed (funcsize=10069)"

unsigned __int8 *BlueFin::GlPeElAzCache::Get(unsigned __int8 *result, unsigned __int8 *a2)
{
  unint64_t v2 = *a2;
  if (((*(unsigned int *)(*((void *)result + 152) + ((v2 >> 3) & 0x1C)) >> (v2 & 0x1F)) & 1) == 0) {
    return 0;
  }
  uint64_t v3 = result[1264];
  if (!result[1264]) {
    return 0;
  }
  while (*result != v2)
  {
    result += 12;
    if (!--v3) {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeEnvironmentMonitor::GlHighestNSatellites(uint64_t this, float a2)
{
  unint64_t v2 = 0;
  char v3 = 0;
  do
  {
    uint64_t v4 = this + 4 * v2;
    if (*(float *)(v4 + 1272) < a2 && (v3 & 1) == 0)
    {
      if (v2 != 3)
      {
        uint64_t v5 = 0;
        do
        {
          *(_DWORD *)(this + 4 * v5 + 1284) = *(_DWORD *)(this + 4 * v5 + 1280);
          unint64_t v6 = v5 + 2;
          --v5;
        }
        while (v6 > v2);
      }
      *(float *)(v4 + 1272) = a2;
      char v3 = 1;
    }
    ++v2;
  }
  while (v2 != 4);
  return this;
}

uint64_t BlueFin::GlPeEnvironmentMonitor::RecordSignalStr(uint64_t result, unsigned __int8 *a2, float a3)
{
  char v3 = *(unsigned __int8 **)(result + 1680);
  int v4 = *a2;
  int v5 = *v3;
  if (v5 != v4)
  {
    float v9 = v3 + 28;
    unsigned __int8 v8 = 12;
    uint64_t v10 = -1;
    while (1)
    {
      unint64_t v11 = v10 + 1;
      if (v10 + 1 < (unint64_t)v8 && v5 == 0) {
        unsigned __int8 v8 = v10 + 1;
      }
      if (v10 == 10) {
        goto LABEL_14;
      }
      int v13 = *v9;
      v9 += 28;
      int v5 = v13;
      ++v10;
      if (v13 == v4)
      {
        BOOL v7 = v11 > 0xA;
        unint64_t v6 = v11 + 1;
        goto LABEL_12;
      }
    }
  }
  unint64_t v6 = 0;
  BOOL v7 = 0;
  unsigned __int8 v8 = 12;
LABEL_12:
  double v14 = &v3[28 * v6];
  *(_OWORD *)(v14 + 4) = *(_OWORD *)(v14 + 8);
  *((float *)v14 + 5) = a3;
  if (v7)
  {
LABEL_14:
    if (v8 <= 0xBu)
    {
      double v15 = &v3[28 * v8];
      *double v15 = v4;
      if (a3 <= 7.0) {
        a3 = 0.0;
      }
      *((float *)v15 + 5) = a3;
    }
  }
  return result;
}

uint64_t BlueFin::stSkfTestParam::GetDynModeOverride(uint64_t a1, int *a2)
{
  char v3 = (const char *)(a1 + 1220);
  if (!strcmp((const char *)(a1 + 1220), "DYN_AUTOMATIC"))
  {
    int v5 = 0;
  }
  else if (!strcmp(v3, "DYN_PEDESTRIAN"))
  {
    int v5 = 1;
  }
  else if (!strcmp(v3, "DYN_VEHICLE"))
  {
    int v5 = 2;
  }
  else
  {
    if (strcmp(v3, "DYN_CYCLING")) {
      return 0;
    }
    int v5 = 3;
  }
  *a2 = v5;
  return 1;
}

uint64_t BlueFin::GlPeKfPool::IsFirstFixConditionForExtLoc(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 160))();
}

uint64_t BlueFin::GlPeKfPool::IsExtLocAvailable(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 136))();
}

uint64_t BlueFin::GlPeKfPool::IsKFConverged(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 128))();
}

uint64_t BlueFin::GlDbgMeIf::SetLowSignalStrengthMode(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 504))();
}

unsigned __int8 *BlueFin::GlPeVlss::UpdateVlssEnabledStatus(BlueFin::GlPeVlss *this, const BlueFin::GlPeMsmtMgr *a2)
{
  double v48 = &v50;
  char v49 = 19;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  memset(v53, 0, 28);
  if (BlueFin::GlSetBase::Cnt((const BlueFin::GlPeMsmtMgr *)((char *)a2 + 96)) >= 5)
  {
    int v4 = *((_DWORD *)this + 3);
    if ((v4 + 1) < 0x12C) {
      int v5 = v4 + 1;
    }
    else {
      int v5 = 300;
    }
    *((_DWORD *)this + 3) = v5;
  }
  unsigned __int8 v43 = *((unsigned char *)a2 + 104);
  memcpy(v47, *((const void **)a2 + 12), 4 * v43);
  unsigned __int16 v45 = 0;
  unsigned __int8 v44 = 0;
  int v46 = v47[0];
  BlueFin::GlSetIterator::operator++(&v43);
  if (v44 == v43)
  {
    BlueFin::GlSetBase::operator=((uint64_t)this + 16, (uint64_t)&v48);
    long long v6 = v50;
    *(_OWORD *)((char *)this + 44) = v51;
    long long v7 = v53[0];
    *(_OWORD *)((char *)this + 60) = v52;
    *(_OWORD *)((char *)this + 76) = v7;
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)v53 + 12);
    *(_OWORD *)((char *)this + 28) = v6;
    __int16 v8 = 1700;
    __int16 v9 = -300;
    goto LABEL_34;
  }
  int v10 = 0;
  char v11 = 0;
  float v38 = (void *)((char *)this + 16);
  __int16 v12 = 1700;
  __int16 v9 = -300;
  do
  {
    unint64_t v13 = v45;
    if (v45 >= 0x23FuLL)
    {
LABEL_53:
      double v35 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      float v36 = "glsignalid.h";
      int v37 = 577;
      goto LABEL_54;
    }
    double v14 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v45;
    int v15 = *v14;
    LODWORD(v14) = (char)v14[1];
    v40[0] = v15;
    int v41 = (int)v14;
    unsigned __int16 v42 = v45;
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(a2, (const BlueFin::GlSignalId *)v40, 0, 1u);
    if (MeMeas
      && (*((_DWORD *)MeMeas + 3) & 0xC000) == 0x4000
      && !*((_DWORD *)MeMeas + 1)
      && (v15 - 1) <= 0xBB)
    {
      signed int v17 = vcvtps_s32_f32(*((float *)MeMeas + 27) * 10.0);
      if (v17 > v9) {
        __int16 v9 = v17;
      }
      if (v12 >= v17) {
        __int16 v12 = v17;
      }
      if ((*(unsigned int *)(*v38 + 4 * (v13 >> 5)) >> (v13 & 0x1F)))
      {
        int v18 = (__int16)(*((_WORD *)this + v13 + 52) - v17);
        if (v18 < 0) {
          int v18 = -v18;
        }
        int v19 = (unsigned __int16)v18;
        if ((unsigned __int16)v18 >= 0x32u) {
          int v19 = 50;
        }
        int v20 = v10 + v19;
        if ((__int16)v18 >= 1) {
          int v10 = v20;
        }
      }
      *((_WORD *)this + v13 + 52) = v17;
      char v11 = 1;
      *((_DWORD *)v48 + (v13 >> 5)) |= 1 << (v13 & 0x1F);
    }
    BlueFin::GlSetIterator::operator++(&v43);
  }
  while (v44 != v43);
  BlueFin::GlSetBase::operator=((uint64_t)v38, (uint64_t)&v48);
  long long v21 = v50;
  *(_OWORD *)((char *)this + 44) = v51;
  long long v22 = v53[0];
  *(_OWORD *)((char *)this + 60) = v52;
  *(_OWORD *)((char *)this + 76) = v22;
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)v53 + 12);
  *(_OWORD *)((char *)this + 28) = v21;
  if ((v11 & 1) != 0 && *((_DWORD *)this + 3) <= 0x12Bu)
  {
    __int16 v8 = v12;
    if ((unsigned __int16)v10 >= (unsigned __int16)(v9 - v12)) {
      unsigned int v23 = (unsigned __int16)(v9 - v12);
    }
    else {
      unsigned int v23 = (unsigned __int16)v10;
    }
    *((float *)this + 2) = (float)(*((float *)this + 2) * 0.9) + (float)((float)v23 * 0.1);
  }
  else
  {
    __int16 v8 = v12;
  }
LABEL_34:
  if (*((float *)this + 2) >= 40.0) {
    BlueFin::GlPeVlss::SetFadingStatusAuto((uint64_t)this, 2u);
  }
  if (*((_DWORD *)this + 3) >= 0xFu && !*((_DWORD *)this + 1)) {
    BlueFin::GlPeVlss::SetFadingStatusAuto((uint64_t)this, 1u);
  }
  if (*(_DWORD *)this != 2)
  {
    unsigned int v24 = *((_DWORD *)this + 1);
    if (v24)
    {
      if (v24 < 3)
      {
        *(_DWORD *)this = v24;
        goto LABEL_43;
      }
      double v35 = "rotFadingStatus == GLPE_FADING_NOT_KNOWN || rotFadingStatus == GLPE_FADING_NONE || rotFadingStatus == GLPE_FADING_DETECTED";
      DeviceFaultNotify("glpe_vlss.cpp", 44, "SetFadingStatus", (char)"rotFadingStatus == GLPE_FADING_NOT_KNOWN || rotFadingStatus == GLPE_FADING_NONE || rotFadingStatus == GLPE_FADING_DETECTED");
      float v36 = "glpe_vlss.cpp";
      int v37 = 44;
LABEL_54:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v36, v37, v35);
    }
  }
LABEL_43:
  unsigned __int8 v43 = *((unsigned char *)a2 + 104);
  memcpy(v47, *((const void **)a2 + 12), 4 * v43);
  unsigned __int16 v45 = 0;
  unsigned __int8 v44 = 0;
  int v46 = v47[0];
  double result = BlueFin::GlSetIterator::operator++(&v43);
  if (v44 != v43)
  {
    unsigned __int8 v27 = 0;
    *(void *)&long long v26 = 0;
    long long v39 = v26;
    do
    {
      if (v45 >= 0x23FuLL) {
        goto LABEL_53;
      }
      uint64_t v28 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v45;
      char v29 = *v28;
      LODWORD(v28) = v28[1];
      v40[0] = v29;
      int v41 = (int)v28;
      unsigned __int16 v42 = v45;
      unsigned int v30 = BlueFin::GlPeMsmtMgr::GetMeMeas(a2, (const BlueFin::GlSignalId *)v40, 0, 1u);
      if (v30 && (*((_DWORD *)v30 + 3) & 0xC000) == 0x4000)
      {
        ++v27;
        long long v31 = v39;
        *(float *)&long long v31 = *(float *)&v39 + *((float *)v30 + 27);
        long long v39 = v31;
      }
      double result = BlueFin::GlSetIterator::operator++(&v43);
    }
    while (v44 != v43);
    if (v27)
    {
      v32.i32[0] = v39;
      v32.f32[1] = (float)(v9 - v8);
      float32x2_t v33 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
      float32x2_t v34 = vmul_f32(v32, v33);
      v33.f32[0] = (float)v27;
      v33.i32[0] = vdiv_f32(*(float32x2_t *)&v39, v33).u32[0];
      v33.i32[1] = v34.i32[1];
      *((float32x2_t *)this + 157) = vmla_f32(vmul_f32(*(float32x2_t *)((char *)this + 1256), (float32x2_t)vdup_n_s32(0x3F666666u)), (float32x2_t)vdup_n_s32(0x3DCCCCD0u), v33);
      *((float *)this + 316) = (float)(*((float *)this + 316) * 0.9) + (float)((float)v27 * 0.1);
    }
  }
  return result;
}

float BlueFin::GlPeKF::GetRxm(BlueFin::GlPeKF *this)
{
  uint64_t v2 = *((void *)this + 11548);
  __int16 v3 = *(_WORD *)(v2 + 2);
  __int16 v4 = *(_WORD *)(v2 + 10);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  float v5 = (double)v3 * 0.000000001;
  *((float *)this + 202) = v5 * 1000000000.0;
  float result = (double)v4 * 0.000000001 * 1000000000.0 * ((double)v4 * 0.000000001 * 1000000000.0);
  *((float *)this + 203) = result;
  return result;
}

void BlueFin::GlPeNavGnssBlocked::SetGnssBlockedStatus(uint64_t a1, int **a2, float *a3)
{
  __int16 v5 = *(_WORD *)(a1 + 80);
  if (*((double *)a2 + 3) > 0.5) {
    ++v5;
  }
  int v6 = v5;
  if (v5 >= 10) {
    __int16 v5 = 10;
  }
  *(_WORD *)(a1 + 80) = v5;
  int v7 = **a2;
  if ((v7 & 1) == 0 || v6 <= 9 && a3[14099] < 20.0)
  {
    *(_DWORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 20;
    *(unsigned char *)(a1 + 6) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    *(_WORD *)(a1 + 44) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 56) = 0x3FF0000000000000;
    *(float *)(a1 + 48) = *a3;
    *(void *)(a1 + 8) = 0x271000000000;
    return;
  }
  *(unsigned char *)a1 = 1;
  if ((v7 & 0x200) != 0 || !*(_WORD *)(a1 + 2))
  {
    __int16 v8 = 0;
    *(unsigned char *)(a1 + 1) = 0;
  }
  else
  {
    __int16 v8 = *(_WORD *)(a1 + 2) - 1;
  }
  *(_WORD *)(a1 + 2) = v8;
  if ((v7 & 2) != 0 || (float v9 = 15.5, BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a3 + 46)) <= 1)) {
    float v9 = 19.5;
  }
  unsigned __int8 v51 = *((unsigned char *)a3 + 192);
  memcpy(v55, *((const void **)a3 + 23), 4 * v51);
  unsigned __int16 v53 = 0;
  unsigned __int8 v52 = 0;
  int v54 = v55[0];
  BlueFin::GlSetIterator::operator++(&v51);
  if (v52 == v51)
  {
    __int16 v10 = 0;
    unsigned __int8 v11 = 0;
    unsigned __int8 v12 = 0;
    float v13 = -4.0;
    float v14 = 0.0;
    float v15 = 0.0;
  }
  else
  {
    unsigned __int8 v12 = 0;
    unsigned __int8 v11 = 0;
    __int16 v10 = 0;
    float v47 = 0.0;
    float v13 = -4.0;
    float v15 = 0.0;
    float v14 = 0.0;
    do
    {
      unsigned __int16 v16 = v53;
      if (v53 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      signed int v17 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v53;
      int v19 = v17[1];
      v48[0] = *v17;
      char v18 = v48[0];
      int v49 = v19;
      unsigned __int16 v50 = v53;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)a3, (const BlueFin::GlSignalId *)v48, 0, 0);
      v48[0] = v18;
      int v49 = v19;
      unsigned __int16 v50 = v16;
      uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)a3, (const BlueFin::GlSignalId *)v48, 0);
      if (MeMeas)
      {
        float v22 = *((float *)MeMeas + 27);
        if (v22 > 22.0) {
          ++v12;
        }
        int v23 = *(__int16 *)(PeMeas + 78);
        if (v22 > v9)
        {
          if (v23 > v10) {
            __int16 v10 = *(_WORD *)(PeMeas + 78);
          }
          if (v11)
          {
            for (double i = v47 + (double)*(__int16 *)(PeMeas + 80) * -0.0174532925; i > 3.14159265; double i = i + -6.28318531)
              ;
            while (i <= -3.14159265)
              double i = i + 6.28318531;
            ++v11;
            float v25 = i;
            if (v15 <= v25) {
              float v15 = v25;
            }
            if (v14 >= v25) {
              float v14 = v25;
            }
          }
          else
          {
            float v26 = (double)*(__int16 *)(PeMeas + 80) * 0.0174532925;
            float v47 = v26;
            unsigned __int8 v11 = 1;
          }
        }
        if (v23 > 10 && v22 > v13) {
          float v13 = *((float *)MeMeas + 27);
        }
      }
      BlueFin::GlSetIterator::operator++(&v51);
    }
    while (v52 != v51);
  }
  double v28 = (double)v12;
  double v29 = *(double *)(a1 + 56);
  double v30 = 0.949999988;
  if (v29 < v28) {
    double v30 = 0.5;
  }
  double v31 = (1.0 - v30) * v28 + v30 * v29;
  if (v31 < 1.0) {
    double v31 = 1.0;
  }
  if (v31 > 24.0) {
    double v31 = 24.0;
  }
  *(double *)(a1 + 56) = v31;
  double v32 = v31 * 0.200000003 + 0.5;
  double v33 = fmod(v32, 4294967300.0);
  if (v32 <= 4294967300.0) {
    double v33 = v32;
  }
  if (v33 < -4294967300.0) {
    double v33 = -fmod(-v33, 4294967300.0);
  }
  if (v33 < 0.0) {
    unsigned int v34 = --v33;
  }
  else {
    LOBYTE(v34) = v33;
  }
  unsigned int v35 = v34;
  if ((v34 & 0xFC) == 0) {
    unsigned int v35 = 3;
  }
  int v36 = **a2;
  if ((v36 & 0x10) == 0) {
    unsigned int v35 = 3;
  }
  if (v11 < 2u || v10 < 1 || v10 >= 26 || (float)(v15 - v14) >= 0.663225116)
  {
    if (v35 <= v11 || v13 >= 40.0) {
      goto LABEL_66;
    }
LABEL_72:
    int v37 = 1;
    goto LABEL_73;
  }
  if (v13 < 40.0) {
    goto LABEL_72;
  }
LABEL_66:
  int v37 = 0;
LABEL_73:
  int v39 = v37 ^ 1;
  if (*((double *)a2 + 5) >= 4.0) {
    int v39 = 1;
  }
  if (v13 <= 22.0) {
    int v39 = 1;
  }
  int v40 = v37 & v39;
  if ((v36 & 0x40) != 0 || !v40 || (v36 & 0x100) != 0)
  {
    float v41 = *a3;
    *(float *)(a1 + 48) = *a3;
  }
  else
  {
    float v41 = *(float *)(a1 + 48);
  }
  if ((v36 & 6) != 0) {
    unsigned int v42 = 10000;
  }
  else {
    unsigned int v42 = 3000;
  }
  *(_DWORD *)(a1 + 12) = v42;
  if (v41 != 0.0)
  {
    int v43 = *((_DWORD *)a2 + 4);
    if (v43 - LODWORD(v41) > v42)
    {
      *(unsigned char *)(a1 + 45) = 0;
      if (!*(unsigned char *)(a1 + 1))
      {
        *(float *)(a1 + 40) = v41;
        unsigned __int8 v44 = a2[1];
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v44;
        *(void *)(a1 + 32) = *((void *)v44 + 2);
        *(int8x16_t *)(a1 + 64) = vextq_s8(*(int8x16_t *)(a2 + 3), *(int8x16_t *)(a2 + 3), 8uLL);
      }
      *(unsigned char *)(a1 + 1) = 1;
      if ((v36 & 2) != 0)
      {
        __int16 v45 = 35;
      }
      else if ((v36 & 4) != 0)
      {
        __int16 v45 = 25;
      }
      else if ((v36 & 0x20) != 0)
      {
        __int16 v45 = 10;
      }
      else
      {
        __int16 v45 = 6;
      }
      *(_WORD *)(a1 + 2) = v45;
      *(_WORD *)(a1 + 4) = v45;
      *(_DWORD *)(a1 + 8) = v43;
    }
  }
  *(unsigned char *)(a1 + 44) = v40;
}

uint64_t BlueFin::GlMeStateProvider::SetLowSignalStrengthMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 19) = a2;
  return this;
}

void BlueFin::GlPeMsmtMgr::InitMeas(BlueFin::GlPeMsmtMgr *this)
{
  bzero(*((void **)this + 23), ((4 * *((unsigned __int8 *)this + 192) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v2 = *((void *)this + 2397);
  uint64_t v5 = v2 + 1152;
  unsigned __int16 v6 = *(_WORD *)(v2 + 1186) + 1;
  if (*(unsigned __int16 *)(v2 + 1184) > v6)
  {
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v5, (uint64_t)v4);
      uint64_t v3 = BlueFin::GlSignalIdArray::Get(*((void *)this + 2397), (uint64_t)v4);
      *(_DWORD *)(v3 + 216) = 0;
      *(_WORD *)(v3 + 448) = 0;
    }
    while (v6 < *(unsigned __int16 *)(v5 + 32));
  }
}

uint64_t BlueFin::GlPeMsmtMgr::Adjust_IntPr(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 19176);
  uint64_t v7 = v2 + 1152;
  unsigned __int16 v8 = *(_WORD *)(v2 + 1186) + 1;
  if (*(unsigned __int16 *)(v2 + 1184) > v8)
  {
    uint64_t v4 = this;
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v7, (uint64_t)v6);
      this = BlueFin::GlSignalIdArray::Get(*(void *)(v4 + 19176), (uint64_t)v6);
      int v5 = *(_DWORD *)(this + 208);
      if (v5 != -1) {
        *(_DWORD *)(this + 208) = v5 + a2;
      }
    }
    while (v8 < *(unsigned __int16 *)(v7 + 32));
  }
  return this;
}

BOOL BlueFin::GlPeReqBag::IsEnhancedEmergencyReqReallyExpiring(BlueFin::GlPeReqBag *this)
{
  unint64_t v2 = 0;
  float v14 = (char *)this + 3233;
  char v15 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  BOOL v3 = 1;
  do
  {
    uint64_t v4 = *((void *)this + v2);
    if (v4)
    {
      int v5 = *(_DWORD **)(v4 + 8);
      if (v5[4] == 1)
      {
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v5 + 400))(v5))
        {
          uint64_t v6 = *((void *)this + v2);
          int v7 = *(_DWORD *)(v6 + 36);
          uint64_t v8 = *(void *)(v6 + 8);
          if (v7 == -1)
          {
            int v12 = 1;
          }
          else
          {
            unsigned int v9 = *(_DWORD *)(v8 + 28);
            unsigned int v10 = *(_DWORD *)(v6 + 32) + v7;
            BOOL v11 = v10 >= v9;
            int v12 = v10 - v9;
            if (!v11) {
              int v12 = 1;
            }
          }
          if (v12 + 1000 > (1000 * *(__int16 *)(v8 + 22))) {
            break;
          }
        }
      }
    }
    BOOL v3 = v2++ < 0x47;
  }
  while (v2 != 72);
  *float v14 = v15;
  return v3;
}

void sub_263A10F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlPeReqBag::IsEnhancedEmergencyReqExpiring(BlueFin::GlPeReqBag *this)
{
  unint64_t v2 = 0;
  char v15 = (char *)this + 3233;
  char v16 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  BOOL v3 = 1;
  do
  {
    uint64_t v4 = *((void *)this + v2);
    if (v4)
    {
      int v5 = *(_DWORD **)(v4 + 8);
      if (v5[4] == 1)
      {
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v5 + 400))(v5))
        {
          uint64_t v6 = *(void *)(*((void *)this + v2) + 8);
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 416))(v6)) {
            break;
          }
          uint64_t v7 = *((void *)this + v2);
          int v8 = *(_DWORD *)(v7 + 36);
          uint64_t v9 = *(void *)(v7 + 8);
          if (v8 == -1)
          {
            int v13 = 1;
          }
          else
          {
            unsigned int v10 = *(_DWORD *)(v9 + 28);
            unsigned int v11 = *(_DWORD *)(v7 + 32) + v8;
            BOOL v12 = v11 >= v10;
            int v13 = v11 - v10;
            if (!v12) {
              int v13 = 1;
            }
          }
          if (v13 + 1000 > (1000 * *(__int16 *)(v9 + 22))) {
            break;
          }
        }
      }
    }
    BOOL v3 = v2++ < 0x47;
  }
  while (v2 != 72);
  *char v15 = v16;
  return v3;
}

void sub_263A110D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlPeReqBag::IsEnhancedEmergencyReqPresent(BlueFin::GlPeReqBag *this)
{
  unint64_t v2 = 0;
  uint64_t v7 = (char *)this + 3233;
  char v8 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  BOOL v3 = 1;
  do
  {
    uint64_t v4 = *((void *)this + v2);
    if (v4)
    {
      int v5 = *(_DWORD **)(v4 + 8);
      if (v5[4] == 1 && ((*(uint64_t (**)(_DWORD *))(*(void *)v5 + 400))(v5) & 1) != 0) {
        break;
      }
    }
    BOOL v3 = v2++ < 0x47;
  }
  while (v2 != 72);
  *uint64_t v7 = v8;
  return v3;
}

void sub_263A111BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlDineCtrl::SetLowSignalStrengthMode(BlueFin::GlDineCtrl *this, int a2)
{
  BOOL v3 = "Disabled";
  if (a2) {
    BOOL v3 = "Enabled";
  }
  GlCustomLog(15, "GlDineCtrl::SetLowSignalStrengthMode(%s)\n", v3);
  uint64_t v4 = *(uint64_t (**)(void))(*((void *)this + 3692) + 56);

  return v4();
}

unsigned __int8 *BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex@<X0>(BlueFin::GlSetBase *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 12) = 0u;
  uint64_t v5 = a3 + 12;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 8;
  *(_OWORD *)(a3 + 28) = 0u;
  float result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(a1);
  if (result)
  {
    unsigned __int8 v8 = *((unsigned char *)a1 + 8);
    memcpy(v12, *(const void **)a1, 4 * v8);
    unsigned __int16 v10 = 0;
    unsigned __int8 v9 = 0;
    int v11 = v12[0];
    for (float result = BlueFin::GlSetIterator::operator++(&v8); v9 != v8; float result = BlueFin::GlSetIterator::operator++(&v8))
    {
      if (v10 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      if (*((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v10 + 1) == a2)
      {
        unint64_t v7 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v10);
        *(_DWORD *)(v5 + ((v7 >> 3) & 0x1C)) |= 1 << v7;
      }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeAsstMgr::ConvertSvIdSet2ConstellMask(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  unsigned __int8 v8 = *(unsigned char *)(a2 + 8);
  memcpy(v12, *(const void **)a2, 4 * v8);
  __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  int v11 = v12[0];
  float result = BlueFin::GlSetIterator::operator++(&v8);
  if (v9 != v8)
  {
    uint64_t v6 = (BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744);
    do
    {
      unsigned __int8 v7 = v10;
      int v13 = 7;
      unsigned __int8 v14 = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss(v6, &v7, (uint64_t)&v13);
      if (v14 - 1 <= 0x3E) {
        *((void *)a3 + BlueFin::GlImplGnss::m_aucEnabledGnssTable[v13]) |= 1 << (v14 - 1);
      }
      float result = BlueFin::GlSetIterator::operator++(&v8);
    }
    while (v9 != v8);
  }
  return result;
}

uint64_t BlueFin::GlPeGeoid::Compute(BlueFin::GlPeGeoid *this, float a2, float a3, float a4, float *a5, float *a6, int a7)
{
  *a5 = 0.0;
  if (*(unsigned char *)this || (float v14 = *((float *)this + 1), v14 == 0.0))
  {
    *(unsigned char *)this = 0;
LABEL_4:
    BlueFin::GlPeGeoid::get(this, a2, a3);
    *(_DWORD *)a5 = v15;
    *((float *)this + 3) = a3;
    *((_DWORD *)this + 4) = v15;
    *((float *)this + 2) = a2;
    uint64_t v16 = 1;
    goto LABEL_5;
  }
  if (vabds_f32(a2, *((float *)this + 2)) >= v14 || vabds_f32(a3, *((float *)this + 3)) >= v14) {
    goto LABEL_4;
  }
  uint64_t v16 = 0;
  *a5 = *((float *)this + 4);
LABEL_5:
  int Region = BlueFin::GlPeLatLonRegionSet::findRegion((BlueFin::GlPeGeoid *)((char *)this + 24), a2, a3);
  *((unsigned char *)this + 1) = Region >= 0;
  float v18 = a4 - *a5;
  if (Region >= 0) {
    int v19 = 1;
  }
  else {
    int v19 = a7;
  }
  if (v18 >= 0.0) {
    int v19 = 1;
  }
  if (!v19) {
    float v18 = 0.0;
  }
  *a6 = v18;
  return v16;
}

uint64_t BlueFin::GlPeSlowFilter::SubmitAltEst(uint64_t this, double a2, double a3, double a4, double a5, int a6)
{
  if (a6 && (a2 < -998.0 || a3 <= 0.0)) {
    return this;
  }
  if (a3 <= 0.0)
  {
    int v13 = "fVarAltM2 > 0.0";
    DeviceFaultNotify("glpe_slowfilter.cpp", 81, "SubmitAltEst", (char)"fVarAltM2 > 0.0");
    int v14 = 81;
    goto LABEL_22;
  }
  if (a4 < 0.0 || a4 > 1.0)
  {
    int v13 = "dCoeff >= 0.0 && dCoeff <= 1.0";
    DeviceFaultNotify("glpe_slowfilter.cpp", 82, "SubmitAltEst", (char)"dCoeff >= 0.0 && dCoeff <= 1.0");
    int v14 = 82;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_slowfilter.cpp", v14, v13);
  }
  uint64_t v7 = 32;
  if (a6) {
    uint64_t v7 = 64;
  }
  *(double *)(this + v7) = a2 * a4 + (1.0 - a4) * *(double *)(this + v7);
  if (a6) {
    uint64_t v8 = 72;
  }
  else {
    uint64_t v8 = 40;
  }
  double v9 = a4 * a4 * a3 + (1.0 - a4) * (1.0 - a4) * (*(double *)(this + v8) * *(double *)(this + v8) + a5);
  if (v9 >= a3) {
    double v9 = a3;
  }
  double v10 = sqrt(v9);
  BOOL v11 = v9 < 9.0;
  double v12 = 3.0;
  if (!v11) {
    double v12 = v10;
  }
  *(double *)(this + v8) = v12;
  return this;
}

uint64_t BlueFin::GlPeNavGnssKF::GetSlowFilter(BlueFin::GlPeNavGnssKF *this)
{
  return (uint64_t)this + 2640;
}

{
  return (uint64_t)this + 2640;
}

uint64_t BlueFin::GlPeKfPool::GetSlowFilter(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 200))();
}

{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 200))();
}

uint64_t BlueFin::GlSvIdArray::Count(BlueFin::GlSvIdArray *this)
{
  return (*((unsigned char *)this + 238) + ~*((unsigned char *)this + 239));
}

void BlueFin::GlPeGeoid::get(BlueFin::GlPeGeoid *this, float a2, float a3)
{
  if (a2 > -90.0 && a2 < 90.0)
  {
    float v5 = fmodf(a3 + 180.0, 360.0);
    float v6 = fmodf(v5 + 360.0, 360.0) + -180.0;
    float v7 = fmodf(v6, 10.0);
    fmodf((float)(v7 / 10.0) + 1.0, 1.0);
    float v8 = fmodf(a2, 10.0);
    fmodf((float)(v8 / 10.0) + 1.0, 1.0);
  }
}

uint64_t BlueFin::GlPeEnvironmentMonitor::GlPeGNSSSignalStrAnalysis(uint64_t this, double a2, double a3, unint64_t a4, int a5, int a6)
{
  double v6 = a2 - a3;
  if (a2 - a3 >= 50.0)
  {
    float v9 = 0.99;
  }
  else
  {
    double v7 = 1.0 / v6;
    if (v6 == 0.0) {
      double v7 = 0.0;
    }
    double v8 = 1.0 - v7;
    if (v7 == 0.0) {
      double v8 = 0.0;
    }
    float v9 = v8;
  }
  uint64_t v10 = 0;
  double v11 = 0.0;
  while (1)
  {
    float v12 = *(float *)(this + 4 * v10 + 1272);
    if (v12 < 5.0) {
      break;
    }
    double v11 = v11 + v12;
    if (++v10 == 4) {
      goto LABEL_13;
    }
  }
  if (!v10)
  {
    double v13 = 0.0;
    double v15 = 4.0;
    goto LABEL_18;
  }
LABEL_13:
  double v13 = v11 / (double)(int)v10;
  float v14 = vabds_f32(*(float *)(this + 1272), *(float *)(this + 1272 + 4 * (int)v10 - 4));
  if (v14 <= 4.0) {
    float v14 = 4.0;
  }
  double v15 = v14;
  if (v13 > 36.0) {
    double v13 = 36.0;
  }
LABEL_18:
  float v16 = *(float *)(this + 1288);
  if (v16 == 0.0)
  {
    float v17 = v13;
    float v16 = v17;
  }
  double v18 = 1.0 - v9;
  float v19 = (float)(v9 * v16) + v18 * v13;
  *(float *)(this + 1288) = v19;
  float v20 = *(float *)(this + 1296);
  if (v20 == 0.0)
  {
    float v21 = v15;
    float v20 = v21;
  }
  float v22 = (float)(v9 * v20) + v18 * v15;
  *(float *)(this + 1296) = v22;
  if (v6 >= 10.0000095)
  {
    double v23 = (float)(v19 + v22);
    double v24 = v23 * 0.1;
    int v25 = *(_DWORD *)(this + 1320);
    if (v25)
    {
      if (v25 < 2)
      {
        if (v25 != 1) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v13 >= (float)(v19 - v22) - v24 || (a6 & 1) != 0) {
          goto LABEL_38;
        }
        *(float *)(this + 1292) = v19;
        *(float *)(this + 1300) = v22;
        *(double *)(this + 1304) = a2;
      }
    }
    else
    {
      if (v13 >= (float)(v19 - v22)) {
        int v26 = 1;
      }
      else {
        int v26 = a6;
      }
      if (v26) {
        int v27 = 2;
      }
      else {
        int v27 = 1;
      }
      *(_DWORD *)(this + 1320) = v27;
      if (v26)
      {
        int v25 = 2;
        goto LABEL_38;
      }
    }
    int v25 = 2;
    *(_DWORD *)(this + 1320) = 2;
LABEL_38:
    *(double *)(this + 1312) = a2;
    if (a5) {
      unsigned int v28 = 60;
    }
    else {
      unsigned int v28 = 180;
    }
    if (*(float *)(this + 1264) > 4.0
      && *(float *)(this + 1256) < 20.0
      && *(_DWORD *)(this + 12) >= v28
      && ((float v29 = 9.0, (a5 & 1) != 0) || *(_DWORD *)this == 1)
      || (float v29 = 15.5, (float)(v19 + -20.0) >= 15.5)
      || (float v29 = 12.5, (float)(v19 + -20.0) < 12.5))
    {
      *(float *)(this + 1696) = v29;
    }
    uint64_t v30 = 0;
    unsigned __int8 v31 = 0;
    *(_DWORD *)(this + 1688) = 0;
    uint64_t v32 = *(void *)(this + 1680);
    float v33 = 0.0;
    uint64_t v34 = v32;
    float v35 = 0.0;
    do
    {
      if (*(unsigned char *)(v32 + 28 * v30))
      {
        unsigned __int8 v36 = 0;
        uint64_t v37 = v32 + 28 * v30;
        *(_DWORD *)(v37 + 24) = 0;
        float v38 = (float *)(v37 + 24);
        float v39 = 0.0;
        for (uint64_t i = 4; i != 24; i += 4)
        {
          float v41 = *(float *)(v34 + i);
          if (v41 <= 0.0) {
            float v41 = -0.0;
          }
          else {
            ++v36;
          }
          float v39 = v39 + v41;
        }
        if (v36 >= 4u)
        {
          float v42 = (float)v36;
          float v43 = v39 / v42;
          float v44 = 0.0;
          for (uint64_t j = 4; j != 24; j += 4)
          {
            float v46 = *(float *)(v34 + j);
            if (v46 > 0.0) {
              float v44 = v44 + (float)((float)(v46 - v43) * (float)(v46 - v43));
            }
          }
          float v47 = sqrtf(v44 / v42);
          *float v38 = v47;
          if (v47 > v35) {
            float v35 = v47;
          }
          float v33 = v33 + v47;
          *(float *)(this + 1688) = v33;
          ++v31;
        }
      }
      ++v30;
      v34 += 28;
    }
    while (v30 != 12);
    if (v31 > 5u)
    {
      float v33 = (float)(v33 - v35) / (float)(v31 - 1);
      *(float *)(this + 1688) = v33;
    }
    if (v25 >= 2)
    {
      float v48 = *(float *)(this + 1692);
      float v49 = (float)a4;
      BOOL v50 = v48 > 0.0 && (float)((float)(v49 - v48) / 1000.0) < 6.0;
      if (v33 > 1.0 || v50)
      {
        *(_DWORD *)(this + 1320) = 3;
        *(float *)(this + 1692) = v49;
      }
      else
      {
        *(_DWORD *)(this + 1320) = 2;
      }
    }
    *(unsigned char *)(this + 1700) = a5;
    if (v13 <= v23)
    {
      if (v13 < (float)(v19 - v22) - v24)
      {
        *(unsigned char *)(this + 1702) = 0;
        *(unsigned char *)(this + 1704) = 0;
        unsigned int v54 = (*(unsigned char *)(this + 1705) + 1);
        if (v54 >= 0x5A) {
          LOBYTE(v54) = 90;
        }
        *(unsigned char *)(this + 1705) = v54;
        unsigned int v55 = (*(unsigned char *)(this + 1706) + 1);
        if (v55 >= 0x5A) {
          unsigned int v55 = 90;
        }
        *(unsigned char *)(this + 1706) = v55;
        if (v55 >= 0xB)
        {
          BOOL v53 = 0;
          *(unsigned char *)(this + 1703) = 0;
LABEL_100:
          *(unsigned char *)(this + 1701) = v53;
          return this;
        }
        if (v55 == 10)
        {
LABEL_99:
          BOOL v53 = 0;
          goto LABEL_100;
        }
LABEL_97:
        if (*(unsigned __int8 *)(this + 1703) >= 0x10u)
        {
          BOOL v53 = *(unsigned __int8 *)(this + 1705) > 0xFu;
          goto LABEL_100;
        }
        goto LABEL_99;
      }
      unsigned int v52 = (*(unsigned char *)(this + 1702) + 1);
      if (v52 >= 0x5A) {
        unsigned int v52 = 90;
      }
      *(unsigned char *)(this + 1702) = v52;
      *(unsigned char *)(this + 1704) = 0;
      *(unsigned char *)(this + 1706) = 0;
      if (v52 >= 6)
      {
        BOOL v53 = 0;
        *(unsigned char *)(this + 1703) = 0;
        goto LABEL_93;
      }
    }
    else
    {
      *(unsigned char *)(this + 1702) = 0;
      unsigned int v51 = (*(unsigned char *)(this + 1703) + 1);
      if (v51 >= 0x5A) {
        LOBYTE(v51) = 90;
      }
      *(unsigned char *)(this + 1703) = v51;
      unsigned int v52 = (*(unsigned char *)(this + 1704) + 1);
      if (v52 >= 0x5A) {
        unsigned int v52 = 90;
      }
      *(unsigned char *)(this + 1704) = v52;
      *(unsigned char *)(this + 1706) = 0;
      if (v52 >= 6)
      {
        BOOL v53 = 0;
LABEL_93:
        *(unsigned char *)(this + 1705) = 0;
        goto LABEL_100;
      }
    }
    if (v52 == 5) {
      goto LABEL_99;
    }
    goto LABEL_97;
  }
  return this;
}

uint64_t BlueFin::GlPeGlnTimeMgr::GlPeGlnTimeMgr(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(void *)a1 = &unk_270EC9640;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 64) = &unk_270EC9610;
  *(unsigned char *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 74) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 111) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 181) = 0;
  *(_WORD *)(a1 + 136) = 1;
  *(void *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x737047FF9222FFLL;
  *(_WORD *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 237) = 0;
  *(_WORD *)(a1 + 192) = 1;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0x637455FF9222FFLL;
  *(void *)(a1 + 1844) = 0;
  *(void *)(a1 + 1824) = a1 + 256;
  *(void *)(a1 + 1832) = a1 + 1844;
  *(unsigned char *)(a1 + 1840) = 3;
  *(_DWORD *)(a1 + 1852) = 0;
  *(void *)(a1 + 1868) = 0;
  *(void *)(a1 + 1856) = a1 + 1868;
  *(unsigned char *)(a1 + 1864) = 3;
  *(_DWORD *)(a1 + 1876) = 0;
  *(void *)(a1 + 1892) = 0;
  *(void *)(a1 + 1880) = a1 + 1892;
  *(unsigned char *)(a1 + 1888) = 3;
  *(_DWORD *)(a1 + 1900) = 0;
  *(void *)(a1 + 1916) = 0;
  *(void *)(a1 + 1904) = a1 + 1916;
  *(unsigned char *)(a1 + 1912) = 3;
  *(_DWORD *)(a1 + 1924) = 0;
  *(void *)(a1 + 1940) = 0;
  *(void *)(a1 + 1928) = a1 + 1940;
  *(unsigned char *)(a1 + 1936) = 3;
  *(_DWORD *)(a1 + 1948) = 0;
  do
  {
    uint64_t v4 = (_OWORD *)(*(void *)(a1 + 1824) + v3);
    *(_OWORD *)((char *)v4 + 89) = 0uLL;
    v4[4] = 0uLL;
    v4[5] = 0uLL;
    __n128 v4[2] = 0uLL;
    v4[3] = 0uLL;
    *uint64_t v4 = 0uLL;
    v4[1] = 0uLL;
    v3 += 112;
  }
  while (v3 != 1568);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

unint64_t BlueFin::GlPeTimeManager::resetMgr(BlueFin::GlPeTimeManager *this)
{
  uint64_t v2 = 0;
  *((unsigned char *)this + 4672) = 0;
  *(_DWORD *)((char *)this + 2563) = 0;
  do
  {
    *(void *)((char *)this + v2 + 4684) = -1;
    uint64_t v3 = (char *)this + v2;
    *((_WORD *)v3 + 2346) = 0;
    *((void *)v3 + 587) = 0;
    v2 += 20;
  }
  while (v2 != 120);
  *((unsigned char *)this + 2716) = 0;
  *((void *)this + 322) = 0;
  if (!*((unsigned char *)this + 4874))
  {
    *((unsigned char *)this + 3424) = -1;
    *((_WORD *)this + 1713) = 0;
  }
  uint64_t v4 = 0;
  *(_OWORD *)((char *)this + 3172) = 0uLL;
  *(_OWORD *)((char *)this + 3188) = 0uLL;
  *(_OWORD *)((char *)this + 3140) = 0uLL;
  *(_OWORD *)((char *)this + 3156) = 0uLL;
  *(_OWORD *)((char *)this + 3108) = 0uLL;
  *(_OWORD *)((char *)this + 3124) = 0uLL;
  *((_DWORD *)this + 775) = 0;
  *((_WORD *)this + 1552) = 0;
  do
  {
    float v5 = (char *)this + v4;
    v5[3108] = 7;
    v5[3119] = 7;
    v4 += 16;
  }
  while (v4 != 96);
  *((void *)this + 415) = 0;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  memset_pattern16((char *)this + 3328, &unk_263BBE270, 0x3CuLL);
  *((_OWORD *)this + 170) = 0u;
  *((void *)this + 342) = 0x41EFFFFFFFE00000;
  *((void *)this + 345) = 0;
  *((unsigned char *)this + 2841) = 0;
  *((void *)this + 343) = 0;
  *((unsigned char *)this + 2752) = 0;
  *((void *)this + 360) = 0;
  *((_DWORD *)this + 722) = -1;
  *((_OWORD *)this + 181) = xmmword_263BB40A0;
  *((_WORD *)this + 1456) = 0;
  *((unsigned char *)this + 3388) = 0;
  *((void *)this + 424) = 0;
  *(_OWORD *)((char *)this + 3400) = 0u;
  *((_DWORD *)this + 854) = 0;
  *((_DWORD *)this + 858) = 0;
  *((void *)this + 430) = 0xC15B773FC0000000;
  *((void *)this + 432) = 0;
  *((_DWORD *)this + 866) = 0;
  *((void *)this + 434) = 0xC15B773FC0000000;
  *((void *)this + 436) = 0;
  *((_DWORD *)this + 874) = 0;
  *((unsigned char *)this + 3504) = 0;
  *((_DWORD *)this + 877) = 0;
  *((void *)this + 439) = 0xC15B773FC0000000;
  *((void *)this + 441) = 0;
  *((_DWORD *)this + 884) = 0;
  *((void *)this + 443) = 0xC15B773FC0000000;
  *((void *)this + 445) = 0;
  *((_DWORD *)this + 892) = 0;
  *((unsigned char *)this + 3576) = 0;
  *((_OWORD *)this + 164) = xmmword_263BB40A0;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= BlueFin::GlWeekTowTime::m_ucCurrentLs
                                                           + 1025136000)
    unsigned __int8 v6 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v6 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  *((_DWORD *)this + 652) = 0;
  *((_DWORD *)this + 653) = v6 + 1025136000;
  *((_DWORD *)this + 654) = 2;
  *((_WORD *)this + 36) = 0;
  *((_WORD *)this + 89) = 0;
  BlueFin::GlPeGlnTimeMgr::ResetMgr((BlueFin::GlPeTimeManager *)((char *)this + 192));
  *((unsigned char *)this + 2344) = 0;
  *((_WORD *)this + 1173) = 0;
  *((_DWORD *)this + 587) = 0;
  *((void *)this + 269) &= 0xFFFFFFFCFFFFFFFCLL;
  *((_WORD *)this + 1081) = 0;
  *((_DWORD *)this + 541) = 0;
  *((unsigned char *)this + 2448) = 0;
  *((_WORD *)this + 1225) = 0;
  *(void *)((char *)this + 2452) = 4287767295;

  return BlueFin::GlPeTimeManager::updateConversionTable(this);
}

void BlueFin::GlPeGlnTimeMgr::ResetMgr(BlueFin::GlPeGlnTimeMgr *this)
{
  uint64_t v2 = 0;
  *((int32x2_t *)this + 2) = vdup_n_s32(0xFF9222FF);
  *((_WORD *)this + 20) = 1;
  *((unsigned char *)this + 48) = 1;
  *(void *)((char *)this + 52) = 0x1010000000000;
  *((void *)this + 4) = 4287767295;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 0;
  do
  {
    uint64_t v3 = (_OWORD *)(*((void *)this + 228) + v2);
    *(_OWORD *)((char *)v3 + 89) = 0uLL;
    v3[4] = 0uLL;
    v3[5] = 0uLL;
    v3[2] = 0uLL;
    v3[3] = 0uLL;
    *uint64_t v3 = 0uLL;
    v3[1] = 0uLL;
    v2 += 112;
  }
  while (v2 != 1568);
  bzero(*((void **)this + 229), ((4 * *((unsigned __int8 *)this + 1840) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*((void **)this + 232), ((4 * *((unsigned __int8 *)this + 1864) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*((void **)this + 235), ((4 * *((unsigned __int8 *)this + 1888) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*((void **)this + 238), ((4 * *((unsigned __int8 *)this + 1912) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v4 = (void *)*((void *)this + 241);
  size_t v5 = ((4 * *((unsigned __int8 *)this + 1936) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;

  bzero(v4, v5);
}

unint64_t BlueFin::GlPeTimeManager::resetTimeModels(unint64_t this)
{
  if (!*(unsigned char *)(this + 4877))
  {
    uint64_t v1 = this;
    *(_DWORD *)(this + 2584) = 0;
    char v2 = byte_26B4343F0 - 1;
    *(unsigned char *)(this + 2588) = byte_26B4343F0 - 1;
    *(unsigned char *)(this + 2589) = 5;
    *(_DWORD *)(this + 2592) = 0;
    *(unsigned char *)(this + 2596) = 0x80;
    *(_DWORD *)(this + 2600) = 0;
    *(unsigned char *)(this + 2604) = 0x80;
    BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs = 0;
    BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent = 0;
    BlueFin::GlWeekTowTime::m_ucNextLs = 0;
    BlueFin::GlWeekTowTime::m_ucCurrentLs = v2;
    *(_DWORD *)(this + 136) = 0;
    *(unsigned char *)(this + 140) = 0;
    *(unsigned char *)(this + 176) = 0;
    *(void *)(this + 168) = 0;
    *(void *)(this + 152) = 0;
    *(void *)(this + 160) = 0;
    BlueFin::GlPeGlnTimeMgr::ResetModels((BlueFin::GlPeGlnTimeMgr *)(this + 192));
    *(_DWORD *)(v1 + 2360) = 0;
    *(_WORD *)(v1 + 2364) = 0;
    *(_DWORD *)(v1 + 2368) = 0;
    *(_OWORD *)(v1 + 2372) = 0u;
    *(_DWORD *)(v1 + 2408) = 0;
    *(_WORD *)(v1 + 2412) = 0;
    *(_DWORD *)(v1 + 2416) = 0;
    *(_WORD *)(v1 + 2424) = 0;
    *(_DWORD *)(v1 + 2420) = 0;
    *(unsigned char *)(v1 + 2392) = 0;
    *(unsigned char *)(v1 + 2432) = 0;
    *(void *)(v1 + 2152) &= 0xFFFFFF83FFFFFF83;
    *(_DWORD *)(v1 + 2184) = 2;
    *(_WORD *)(v1 + 2188) = 0;
    *(void *)(v1 + 2192) = 0;
    *(void *)(v1 + 2208) = 0;
    *(void *)(v1 + 2200) = 0;
    *(_DWORD *)(v1 + 2224) = 2;
    *(_WORD *)(v1 + 2228) = 0;
    *(void *)(v1 + 2232) = 0;
    *(void *)(v1 + 2248) = 0;
    *(void *)(v1 + 2240) = 0;
    *(_DWORD *)(v1 + 2264) = 2;
    *(_WORD *)(v1 + 2268) = 0;
    *(void *)(v1 + 2272) = 0;
    *(void *)(v1 + 2288) = 0;
    *(void *)(v1 + 2280) = 0;
    *(_DWORD *)(v1 + 2304) = 2;
    *(_WORD *)(v1 + 2308) = 0;
    *(void *)(v1 + 2320) = 0;
    *(void *)(v1 + 2312) = 0;
    *(void *)(v1 + 2328) = 0;
    *(_WORD *)(v1 + 2172) = 0;
    *(_DWORD *)(v1 + 2168) = 0;
    *(_DWORD *)(v1 + 2472) = 0;
    *(_WORD *)(v1 + 2476) = 0;
    *(_DWORD *)(v1 + 2480) = 0;
    *(void *)(v1 + 2484) = 0;
    *(void *)(v1 + 2490) = 0;
    *(_DWORD *)(v1 + 2520) = 0;
    *(_WORD *)(v1 + 2524) = 0;
    *(_DWORD *)(v1 + 2528) = 0;
    *(void *)(v1 + 2532) = 0;
    *(_DWORD *)(v1 + 2540) = 0;
    *(unsigned char *)(v1 + 2504) = 0;
    *(unsigned char *)(v1 + 2544) = 0;
    return BlueFin::GlPeTimeManager::updateConversionTable((BlueFin::GlPeTimeManager *)v1);
  }
  return this;
}

double BlueFin::GlPeGlnTimeMgr::ResetModels(BlueFin::GlPeGlnTimeMgr *this)
{
  *((_DWORD *)this + 32) = 0;
  *((unsigned char *)this + 182) = 0;
  *((_WORD *)this + 92) = 0;
  *((_WORD *)this + 68) = 1;
  *((void *)this + 18) = 0;
  *((_WORD *)this + 76) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = -7200001;
  *((_WORD *)this + 96) = 1;
  *((void *)this + 25) = 0;
  *((_WORD *)this + 104) = 0;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 56) = -7200001;
  *(void *)&double result = 0xFE000000FE00;
  *((_DWORD *)this + 60) = 65024;
  *((unsigned char *)this + 244) = 0;
  *((void *)this + 31) = 0;
  return result;
}

uint64_t BlueFin::GlPeComputeZRH::GlPeComputeZRH(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)a1 = &unk_270EC30E0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v16 = a1 + 24;
  ComputeZRHSatPosCacheArray = BlueFin::GlPeObjFactory::MakeComputeZRHSatPosCacheArray((BlueFin::GlPeObjFactory *)BlueFin::GlPeObjFactory::m_potGlPeObjFactory);
  double v18 = (BlueFin::GlPeUnbTropoModel *)BlueFin::GlPeSatPosCache::GlPeSatPosCache(v16, (uint64_t)ComputeZRHSatPosCacheArray);
  for (uint64_t i = 0; i != 1212; i += 12)
  {
    uint64_t v20 = a1 + i;
    *(unsigned char *)(v20 + 296) = 0;
    *(_DWORD *)(v20 + 304) = 0;
    *(_DWORD *)(v20 + 300) = 0;
  }
  uint64_t v21 = 0;
  *(_OWORD *)(a1 + 1524) = 0u;
  *(_OWORD *)(a1 + 1540) = 0u;
  *(void *)(a1 + 1512) = a1 + 1524;
  *(unsigned char *)(a1 + 1520) = 8;
  *(unsigned char *)(a1 + 1560) = 0;
  do
  {
    uint64_t v22 = a1 + v21;
    *(void *)(v22 + 1584) = 0;
    *(_DWORD *)(v22 + 1592) = 0;
    *(_WORD *)(v22 + 1580) = 0;
    *(void *)(a1 + v21 + 1572) = 0;
    v21 += 24;
  }
  while (v21 != 2688);
  *(unsigned char *)(a1 + 1568) = 0;
  *(void *)(a1 + 4264) = a3;
  *(void *)(a1 + 4272) = a4;
  *(void *)(a1 + 4280) = a7;
  *(void *)(a1 + 4288) = a5;
  *(void *)(a1 + 4296) = a4 + 71232;
  *(void *)(a1 + 4304) = a4 + 71616;
  *(void *)(a1 + 4312) = *(void *)(a4 + 7360);
  *(void *)(a1 + 4320) = a2;
  *(void *)(a1 + 4328) = a8;
  *(void *)(a1 + 4336) = a6;
  *(unsigned char *)(a1 + 4344) = 0;
  *(_OWORD *)(a1 + 4348) = 0u;
  BlueFin::GlPeUnbTropoModel::getZenithDelayValues_WAAS_Model(v18, 0.0, 0.0, 1u, (float *)(a1 + 4356), (float *)(a1 + 4360));
  return a1;
}

unsigned __int8 *BlueFin::GlPeComputeZRH::Update@<X0>(void *a1@<X0>, char a2@<W1>, const BlueFin::GlSignalIdSet *a3@<X2>, int a4@<W3>, double *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  *(_OWORD *)(a6 + 12) = 0u;
  *(void *)a6 = a6 + 12;
  *(unsigned char *)(a6 + 8) = 19;
  *(_OWORD *)(a6 + 28) = 0u;
  *(_OWORD *)(a6 + 44) = 0u;
  *(_OWORD *)(a6 + 60) = 0u;
  *(_OWORD *)(a6 + 72) = 0u;
  (*(void (**)(void, const BlueFin::GlSignalIdSet *))(*(void *)a1[533] + 96))(a1[533], a3);
  (*(void (**)(void, double *))(*(void *)a1[533] + 104))(a1[533], a5);
  (*(void (**)(void *))(*a1 + 56))(a1);
  bzero(*(void **)(a1[541] + 2480), ((4 * *(unsigned __int8 *)(a1[541] + 2488) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  *(void *)unsigned int v64 = &v64[12];
  v64[8] = 8;
  memset(&v64[12], 0, 32);
  BlueFin::GlSetBase::operator=((uint64_t)(a1 + 6), (uint64_t)v64);
  *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)&v64[12];
  *(_OWORD *)((char *)a1 + 76) = *(_OWORD *)&v64[28];
  *(void *)unsigned int v64 = &v64[12];
  v64[8] = 3;
  *(void *)&v64[12] = 0;
  *(_DWORD *)&v64[20] = 0;
  BlueFin::GlSetBase::operator=((uint64_t)(a1 + 3), (uint64_t)v64);
  *(void *)((char *)a1 + 36) = *(void *)&v64[12];
  *((_DWORD *)a1 + 11) = *(_DWORD *)&v64[20];
  uint64_t v12 = a1[36];
  if (*(_DWORD *)(v12 + 8))
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)v12 + v13;
      *(unsigned char *)uint64_t v15 = 0;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_OWORD *)(v15 + 24) = 0uLL;
      *(_OWORD *)(v15 + 40) = 0uLL;
      *(_OWORD *)(v15 + 56) = 0uLL;
      *(_DWORD *)(v15 + 72) = 0;
      *(void *)(v15 + 88) = 0;
      *(void *)(v15 + 96) = 0;
      *(void *)(v15 + 80) = 0;
      ++v14;
      v13 += 104;
    }
    while (v14 < *(unsigned int *)(v12 + 8));
  }
  Utc = (unsigned int *)a1[536];
  uint64_t v17 = Utc[642];
  if (v17 <= 0xFF9222FE) {
    double v18 = (double)v17;
  }
  else {
    double v18 = (double)(int)v17;
  }
  float v75 = &unk_270EC23C8;
  uint64_t v76 = 0;
  BOOL v19 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
  if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
    BOOL v19 = 0;
  }
  BOOL v20 = v19 && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
  if (v20) {
    int v21 = 431999;
  }
  else {
    int v21 = 432000;
  }
  unsigned int v22 = v21 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
  LOWORD(v77) = 1980;
  unsigned int v23 = v22 / 0x15180 + 1;
  WORD1(v77) = v22 / 0x15180 + 1;
  BYTE4(v77) = 1;
  BYTE5(v77) = v22 / 0x15180 + 1;
  unsigned int v24 = v22 % 0x15180 / 0xE10;
  unsigned int v25 = (2185 * (v22 - 3600 * ((1193047 * (unint64_t)v22) >> 32))) >> 17;
  int v26 = v22 - 60 * ((71582789 * (unint64_t)v22) >> 32);
  BOOL v27 = !v20;
  if (v20) {
    char v28 = 23;
  }
  else {
    char v28 = v24;
  }
  if (v27) {
    char v29 = v25;
  }
  else {
    char v29 = 59;
  }
  if (!v27) {
    LOBYTE(v26) = 60;
  }
  BYTE6(v77) = v28;
  HIBYTE(v77) = v29;
  char v78 = v26;
  if (Utc[644])
  {
    BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)Utc, 1, (__n128 *)v59);
    *(void *)unsigned int v64 = &unk_270EC23C8;
    *(void *)&v64[8] = 0;
    BOOL v30 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
    if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
      BOOL v30 = 0;
    }
    BOOL v31 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
    BOOL v32 = v30 && v31;
    if (v30 && v31) {
      unsigned int v33 = 431999;
    }
    else {
      unsigned int v33 = 432000;
    }
    unsigned int v34 = v33 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
    *(_WORD *)&v64[16] = 1980;
    *(_WORD *)&v64[18] = v34 / 0x15180 + 1;
    v64[20] = 1;
    v64[21] = v34 / 0x15180 + 1;
    LOBYTE(v33) = 60;
    if (v32)
    {
      LOBYTE(v35) = 59;
      LOBYTE(v36) = 23;
    }
    else
    {
      unsigned int v36 = v34 % 0x15180 / 0xE10;
      unsigned int v35 = (2185 * (v34 % 0xE10)) >> 17;
      unsigned int v33 = v34 % 0x3C;
    }
    uint64_t v37 = a5;
    char v38 = a2;
    v64[22] = v36;
    v64[23] = v35;
    v64[24] = v33;
    Utc = (unsigned int *)BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v59, (BlueFin::GlUtcTime *)v64);
    uint64_t v76 = *(void *)&v64[8];
    uint64_t v77 = *(void *)&v64[16];
    LOWORD(v23) = *(_WORD *)&v64[18];
    char v78 = v64[24];
  }
  else
  {
    uint64_t v37 = a5;
    char v38 = a2;
  }
  float v39 = *v37;
  float v40 = v37[2];
  float v41 = v39 * 0.017453;
  *((float *)a1 + 1087) = v41;
  *((float *)a1 + 1088) = v40;
  *((_DWORD *)a1 + 1090) = 0;
  *((_DWORD *)a1 + 1089) = 0;
  BlueFin::GlPeUnbTropoModel::getZenithDelayValues_WAAS_Model((BlueFin::GlPeUnbTropoModel *)Utc, v41, v40, (unsigned __int16)v23, (float *)a1 + 1089, (float *)a1 + 1090);
  BlueFin::GlPeCachedAtmosDelays::KeepSet((BlueFin::GlPeCachedAtmosDelays *)(a1 + 196), v17, a3);
  double result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(a3);
  if (result)
  {
    BlueFin::lla2ecef(v37, (uint64_t)&v73);
    long long v70 = 0u;
    memset(v71, 0, sizeof(v71));
    long long v68 = 0u;
    long long v69 = 0u;
    long long v67 = 0u;
    memset(v64, 0, 24);
    uint64_t v72 = 0x4008000000000000;
    double v65 = a7;
    double v66 = (double)a4 * 0.001;
    *(_OWORD *)&v64[24] = v73;
    *(void *)&v64[40] = v74;
    uint64_t v60 = 0;
    int v61 = v63;
    char v62 = 8;
    memset(v63, 0, 32);
    *((_DWORD *)a1 + 2) = 0;
    unsigned __int8 v54 = *((unsigned char *)a3 + 8);
    memcpy(v58, *(const void **)a3, 4 * v54);
    unsigned __int16 v56 = 0;
    unsigned __int8 v55 = 0;
    int v57 = v58[0];
    for (double result = BlueFin::GlSetIterator::operator++(&v54); v55 != v54; double result = BlueFin::GlSetIterator::operator++(&v54))
    {
      unsigned int v43 = v56;
      if (v56 >= 0x23Fu)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      unsigned __int8 v53 = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v56);
      if (((unint64_t)*(unsigned int *)&v61[((unint64_t)v53 >> 3) & 0x1C] >> (v53 & 0x1F)))
      {
        *(_DWORD *)(*(void *)a6 + (((unint64_t)v56 >> 3) & 0x1FFC)) |= 1 << v56;
      }
      else
      {
        uint64_t v52 = 0;
        int v51 = 0;
        memset(v50, 0, sizeof(v50));
        if (!(*(unsigned int (**)(void *, unsigned __int8 *, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void))(*a1 + 24))(a1, &v53, v17, v64, v50, 1, 0, 0, 0))
        {
          *(_DWORD *)(*(void *)a6 + 4 * (v43 >> 5)) |= 1 << v43;
          *(_DWORD *)&v61[((unint64_t)v53 >> 3) & 0x1C] |= 1 << v53;
          if ((v38 & 1) == 0)
          {
            double UraM = BlueFin::GlPeAsstMgr::GetUraM(a1[534], &v53);
            float v45 = *(float *)&UraM;
            uint64_t v49 = 0;
            (*(void (**)(void, _OWORD *, long long *, double *, void, float64x2_t *, char *, uint64_t *))(*(void *)a1[533] + 80))(a1[533], v50, &v73, v37, 0, v59, (char *)&v49 + 4, &v49);
            if (*(float *)&v49 > 0.0) {
              BlueFin::GlPeElAzCache::Add((uint64_t)(a1 + 37), &v53, *(float *)&v49, *((float *)&v49 + 1));
            }
            BlueFin::GlPeSatPosCache::AddToSatPosCache((BlueFin::GlSetBase *)(a1 + 3), &v53, (uint64_t)v50, v59, v45);
            (*(void (**)(void *, unsigned __int8 *, double *, _OWORD *, double, float, float))(*a1 + 32))(a1, &v53, v37, v50, v18, *((float *)&v49 + 1), *(float *)&v49);
          }
        }
      }
    }
  }
  int v46 = *(_DWORD *)(a1[536] + 2568);
  *(void *)unsigned int v64 = &unk_270EC3098;
  *(_DWORD *)&v64[8] = v46;
  *(void *)&v64[16] = a1 + 196;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (unsigned __int8 *)off_270EC30B0((uint64_t)v64, 0);
    }
  }
  return result;
}

void BlueFin::GlPeUnbTropoModel::getZenithDelayValues_WAAS_Model(BlueFin::GlPeUnbTropoModel *this, float a2, float a3, unsigned int a4, float *a5, float *a6)
{
  float v9 = fabsf(a2) * 57.296;
  BOOL v10 = a2 < 0.0;
  float v11 = 211.0;
  if (!v10) {
    float v11 = 28.0;
  }
  float v12 = cosf((float)((float)((float)a4 - v11) * 6.2832) / 365.25);
  int v13 = (int)v9;
  if (((int)v9 + 14) > 0x1C)
  {
    if ((v13 - 15) > 0x3B)
    {
      float v14 = (float)(v12 * 0.5) + 1013.0;
      float v15 = (float)(v12 * -14.5) + 263.65;
      float v16 = (float)(v12 * -3.39) + 4.11;
      float v17 = (float)(v12 * -0.00062) + 0.00453;
      float v18 = (float)(v12 * -0.3) + 1.55;
    }
    else
    {
      unsigned int v19 = v13 / 15;
      float v20 = (float)(v13 / 15) * 15.0;
      float v21 = (float)(v13 / 15 + 1) * 15.0;
      uint64_t v22 = (v13 / 15 - 1);
      float v23 = flt_263BB9B60[v22];
      if (vabds_f32(v21, v20) >= 0.000000001)
      {
        float v26 = (float)(v9 - v20) / (float)(v21 - v20);
        float v14 = (float)(v23 + (float)(v26 * (float)(flt_263BB9B60[v19] - v23)))
            - (float)((float)(flt_263BB9B74[v22] + (float)(v26 * (float)(flt_263BB9B74[v19] - flt_263BB9B74[v22]))) * v12);
        float v15 = (float)(flt_263BB9B88[v22] + (float)(v26 * (float)(flt_263BB9B88[v19] - flt_263BB9B88[v22])))
            - (float)((float)(flt_263BB9B9C[v22] + (float)(v26 * (float)(flt_263BB9B9C[v19] - flt_263BB9B9C[v22]))) * v12);
        float v16 = (float)(flt_263BB9BB0[v22] + (float)(v26 * (float)(flt_263BB9BB0[v19] - flt_263BB9BB0[v22])))
            - (float)((float)(flt_263BB9BC4[v22] + (float)(v26 * (float)(flt_263BB9BC4[v19] - flt_263BB9BC4[v22]))) * v12);
        float v17 = (float)(flt_263BB9BD8[v22] + (float)(v26 * (float)(flt_263BB9BD8[v19] - flt_263BB9BD8[v22])))
            - (float)((float)(flt_263BB9BEC[v22] + (float)(v26 * (float)(flt_263BB9BEC[v19] - flt_263BB9BEC[v22]))) * v12);
        float v24 = flt_263BB9C00[v22] + (float)(v26 * (float)(flt_263BB9C00[v19] - flt_263BB9C00[v22]));
        float v25 = flt_263BB9C14[v22] + (float)(v26 * (float)(flt_263BB9C14[v19] - flt_263BB9C14[v22]));
      }
      else
      {
        float v14 = v23 - (float)(flt_263BB9B74[v22] * v12);
        float v15 = flt_263BB9B88[v22] - (float)(flt_263BB9B9C[v22] * v12);
        float v16 = flt_263BB9BB0[v22] - (float)(flt_263BB9BC4[v22] * v12);
        float v17 = flt_263BB9BD8[v22] - (float)(flt_263BB9BEC[v22] * v12);
        float v24 = flt_263BB9C00[v22];
        float v25 = flt_263BB9C14[v22];
      }
      float v18 = v24 - (float)(v25 * v12);
    }
  }
  else
  {
    float v14 = (float)(v12 * -0.0) + 1013.2;
    float v15 = (float)(v12 * -0.0) + 299.65;
    float v16 = (float)(v12 * -0.0) + 26.31;
    float v17 = (float)(v12 * -0.0) + 0.0063;
    float v18 = (float)(v12 * -0.0) + 2.77;
  }
  float v27 = 0.0;
  float v28 = 0.0;
  if ((float)(v15 / v17) > a3)
  {
    float v29 = v18 + 1.0;
    float v30 = v17 * 287.05;
    float v31 = (float)(109.65 / (float)-(float)((float)(v17 * 287.05) - (float)((float)(v18 + 1.0) * 9.784)))
        * (float)(v16 / v15);
    float v32 = 1.0 - (float)((float)(v17 * a3) / v15);
    float v27 = powf(v32, 9.8067 / (float)(v17 * 287.05)) * (float)((float)(v14 * 0.022277) / 9.784);
    float v28 = v31 * powf(v32, (float)((float)(v29 * 9.8067) / v30) + -1.0);
  }
  *a5 = v27;
  *a6 = v28;
}

unint64_t BlueFin::GlPeCachedAtmosDelays::KeepSet(BlueFin::GlPeCachedAtmosDelays *this, int a2, const BlueFin::GlSignalIdSet *a3)
{
  unint64_t result = (unint64_t)BlueFin::GlSignalIdSet::GetSvIdSet(a3, (uint64_t)v14);
  uint64_t v6 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    uint64_t v7 = 0;
    unsigned __int8 v8 = 0;
    uint64_t v9 = v14[0];
    BOOL v10 = (char *)this + 8;
    char v11 = *(unsigned char *)this;
    do
    {
      unint64_t result = (1 << *(_DWORD *)v10) & 0x580;
      BOOL v12 = *(_DWORD *)v10 > 0xAu || result == 0;
      if (!v12
        && ((unint64_t result = v10[4],
             ((*(unsigned int *)(v9 + ((result >> 3) & 0x1C)) >> (result & 0x1F)) & 1) != 0)
         || (a2 - *((_DWORD *)v10 - 1)) <= 0x927C0))
      {
        if (v7 != v8)
        {
          int v13 = (char *)this + 24 * v8;
          *(void *)(v13 + 4) = *(void *)(v10 - 4);
          v13[12] = result;
          unint64_t result = *(void *)(v10 + 5);
          *(void *)(v13 + 20) = *(void *)(v10 + 12);
          *(void *)(v13 + 13) = result;
        }
        ++v8;
      }
      else
      {
        --v11;
      }
      ++v7;
      v10 += 24;
    }
    while (v6 != v7);
  }
  else
  {
    char v11 = 0;
  }
  *(unsigned char *)this = v11;
  return result;
}

double BlueFin::GlPeSatPosUtil::UpdateCe2n(uint64_t a1, double *a2)
{
  double v4 = a2[1] * 0.0174532925;
  __double2 v5 = __sincos_stret(*a2 * 0.0174532925);
  __double2 v6 = __sincos_stret(v4);
  *(double *)a1 = -(v5.__sinval * v6.__cosval);
  *(double *)(a1 + 8) = -(v5.__sinval * v6.__sinval);
  *(double *)(a1 + 16) = v5.__cosval;
  *(double *)(a1 + 32) = -v6.__sinval;
  *(double *)(a1 + 40) = v6.__cosval;
  *(void *)(a1 + 48) = 0;
  *(double *)(a1 + 64) = -(v5.__cosval * v6.__cosval);
  *(double *)(a1 + 72) = -(v5.__cosval * v6.__sinval);
  *(double *)(a1 + 80) = -v5.__sinval;
  *(void *)(a1 + 128) = 0x300000003;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a2;
  double result = a2[2];
  *(double *)(a1 + 152) = result;
  return result;
}

void BlueFin::GlPeComputeZRH::ClearElAzCache(void **this)
{
  *((unsigned char *)this + 1560) = 0;
}

double BlueFin::GlPeSatPos::UpdateCe2n(uint64_t a1, double *a2)
{
  return BlueFin::GlPeSatPosUtil::UpdateCe2n(a1 + 17736, a2);
}

uint64_t BlueFin::GlPeSatPosCache::GlPeSatPosCache(uint64_t result, uint64_t a2)
{
  *(void *)(result + 12) = 0;
  *(void *)double result = result + 12;
  *(unsigned char *)(result + 8) = 3;
  *(_DWORD *)(result + 20) = 0;
  *(_OWORD *)(result + 36) = 0u;
  *(void *)(result + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result + 36;
  *(unsigned char *)(result + 32) = 8;
  *(_OWORD *)(result + 52) = 0u;
  *(void *)(result + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  if (BlueFin::GlUtils::m_pInstance)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = BlueFin::GlUtils::m_pInstance + v2;
      double v4 = *(uint64_t (**)(BlueFin::Matrix *__hidden, void *, const char *))(BlueFin::GlUtils::m_pInstance
                                                                                     + v2
                                                                                     + 1248);
      if (!v4 || v4 == BlueFin::Matrix::Debug && !*(void *)(BlueFin::GlUtils::m_pInstance + v2 + 1408)) {
        break;
      }
      v2 += 8;
      if (v2 == 160) {
        return result;
      }
    }
    *(void *)(v3 + 1248) = BlueFin::Matrix::Debug;
    *(void *)(v3 + 1408) = 0;
  }
  return result;
}

int *BlueFin::GlPeObjFactory::MakeComputeZRHSatPosCacheArray(BlueFin::GlPeObjFactory *this)
{
  int v2 = *((_DWORD *)this + 4);
  if (v2 >= 0) {
    int v3 = *((_DWORD *)this + 4);
  }
  else {
    int v3 = v2 + 1;
  }
  Memory = (int *)BlueFin::GlMemAlloc::glAllocateMemory(58, 16, *(uint64_t (**)(uint64_t))this);
  if (!Memory)
  {
    BOOL v12 = "pvBuff != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 186, "MakeComputeZRHSatPosCacheArray", (char)"pvBuff != nullptr");
    int v13 = 186;
    goto LABEL_12;
  }
  __double2 v5 = Memory;
  int v6 = v2 + (v3 >> 1);
  uint64_t v7 = BlueFin::GlMemAlloc::glAllocateMemory(59, (104 * v6), *(uint64_t (**)(uint64_t))this);
  *((void *)this + 11) = v7;
  if (!v7)
  {
    BOOL v12 = "m_pstComputeZRHSatPosCacheArrayMemory != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 188, "MakeComputeZRHSatPosCacheArray", (char)"m_pstComputeZRHSatPosCacheArrayMemory != nullptr");
    int v13 = 188;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpeobjfact.cpp", v13, v12);
  }
  *(void *)__double2 v5 = v7;
  v5[2] = v6;
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)v5 + v8;
      ++v9;
      *(void *)(v10 + 96) = 0;
      *(_OWORD *)(v10 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
      *(_OWORD *)(v10 + 80) = 0uLL;
      *(_OWORD *)(v10 + 32) = 0uLL;
      *(_OWORD *)(v10 + 48) = 0uLL;
      *(_OWORD *)uint64_t v10 = 0uLL;
      *(_OWORD *)(v10 + 16) = 0uLL;
      v8 += 104;
    }
    while (v9 < v5[2]);
  }
  *((void *)this + 10) = v5;
  return v5;
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkBits(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t v5 = BlueFin::GlStream::GetU08(a2);
  __int16 Bits = BlueFin::GlStream::GetBits(a2, 0xCu);
  char v47 = BlueFin::GlStream::GetBits(a2, 4u);
  if ((v47 & 0xF8) != 0)
  {
    int v7 = Bits;
    char v47 = 0;
  }
  else
  {
    int v7 = Bits & 0xFFF;
  }
  __int16 v46 = v7;
  if (v7) {
    unsigned int v8 = ((v7 - 1) >> 3) + 1;
  }
  else {
    LOWORD(v8) = 0;
  }
  if ((unsigned __int16)v8 >= 0x41u)
  {
    float v29 = "usNumBytes <= _DIM(fll_bvec.word)*4";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 856, "Handle_SatRpt_TrkBits", (char)"usNumBytes <= _DIM(fll_bvec.word)*4");
    int v30 = 856;
    goto LABEL_56;
  }
  if ((v5 & 2) == 0)
  {
    uint64_t v9 = 0;
LABEL_13:
    if ((v5 & 4) != 0)
    {
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      if ((_WORD)v8)
      {
        int v13 = 0;
        int v14 = 0;
        do
        {
          int v15 = BlueFin::GlStream::GetU08(a2);
          BOOL v12 = &v41;
          *(_DWORD *)((char *)&v41 + (v14++ & 0xFFFFFFFC)) |= v15 << (v13 & 0x18);
          v13 += 8;
        }
        while ((unsigned __int16)v8 != v14);
      }
      else
      {
        BOOL v12 = &v41;
      }
    }
    else
    {
      BOOL v12 = 0;
    }
    goto LABEL_24;
  }
  memset(v45, 0, sizeof(v45));
  if ((_WORD)v8)
  {
    int v10 = 0;
    int v11 = 0;
    do
    {
      uint64_t v9 = v45;
      *(_DWORD *)((char *)v45 + (v11++ & 0xFFFFFFFC)) |= BlueFin::GlStream::GetU08(a2) << (v10 & 0x18);
      v10 += 8;
    }
    while ((unsigned __int16)v8 != v11);
    goto LABEL_13;
  }
  if ((v5 & 4) != 0)
  {
    long long v43 = 0uLL;
    long long v44 = 0uLL;
    long long v41 = 0uLL;
    long long v42 = 0uLL;
    BOOL v12 = &v41;
  }
  else
  {
    BOOL v12 = 0;
  }
  uint64_t v9 = v45;
LABEL_24:
  unsigned __int16 v34 = v8;
  unsigned int v33 = v12;
  if ((v5 & 8) != 0)
  {
    memset(v40, 0, sizeof(v40));
    if (!(_WORD)v8)
    {
      if ((v5 & 0x10) != 0)
      {
        long long v38 = 0uLL;
        long long v39 = 0uLL;
        long long v36 = 0uLL;
        long long v37 = 0uLL;
        unsigned int v19 = &v36;
      }
      else
      {
        unsigned int v19 = 0;
      }
      float v16 = v40;
      if ((v5 & 0x20) == 0) {
        goto LABEL_44;
      }
      goto LABEL_31;
    }
    int v17 = 0;
    int v18 = 0;
    do
    {
      float v16 = v40;
      *(_DWORD *)((char *)v40 + (v18++ & 0xFFFFFFFC)) |= BlueFin::GlStream::GetU08(a2) << (v17 & 0x18);
      v17 += 8;
    }
    while ((unsigned __int16)v8 != v18);
  }
  else
  {
    float v16 = 0;
  }
  if ((v5 & 0x10) == 0)
  {
    unsigned int v19 = 0;
    if ((v5 & 0x20) != 0) {
      goto LABEL_31;
    }
LABEL_44:
    float v24 = 0;
    goto LABEL_45;
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  if ((_WORD)v8)
  {
    int v25 = 0;
    int v26 = 0;
    int v27 = (unsigned __int16)v8;
    do
    {
      unsigned int v19 = &v36;
      *(_DWORD *)((char *)&v36 + (v26++ & 0xFFFFFFFC)) |= BlueFin::GlStream::GetU08(a2) << (v25 & 0x18);
      v25 += 8;
    }
    while (v27 != v26);
    if ((v5 & 0x20) != 0) {
      goto LABEL_31;
    }
    goto LABEL_44;
  }
  unsigned int v19 = &v36;
  if ((v5 & 0x20) == 0) {
    goto LABEL_44;
  }
LABEL_31:
  float v31 = this;
  unsigned int v32 = v5;
  uint64_t v20 = 0;
  memset(&v35[2], 0, 224);
  if ((v5 & 0x40) != 0) {
    uint64_t v21 = 4;
  }
  else {
    uint64_t v21 = 2;
  }
  memset(v35, 0, 32);
  do
  {
    if (v34)
    {
      int v22 = 0;
      int v23 = 0;
      do
      {
        *(_DWORD *)((char *)&v35[4 * v20] + (v23++ & 0xFFFFFFFC)) |= BlueFin::GlStream::GetU08(a2) << (v22 & 0x18);
        v22 += 8;
      }
      while (v34 != v23);
    }
    ++v20;
  }
  while (v20 != v21);
  float v24 = v35;
  uint64_t v5 = v32;
  uint64_t U08 = U08;
  this = v31;
LABEL_45:
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    float v29 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 912, "Handle_SatRpt_TrkBits", (char)"otStream.GetAvailableSize() == 0");
    int v30 = 912;
LABEL_56:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v30, v29);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, __int16 *, _OWORD *, long long *, _OWORD *, long long *, _OWORD *))(**(void **)(*((void *)this + 1) + 17072) + 72))(*(void *)(*((void *)this + 1) + 17072), U08, v5, &v46, v9, v33, v16, v19, v24);
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_trk_bits(uint64_t a1, int a2, char a3, _DWORD *a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, long long *a9)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(a1, a2);
  int v16 = *(_DWORD *)(a1 + 8);
  if ((v16 & 0x400) != 0)
  {
    float v45 = "m_otFlags.Missing(FLGS_RECEIVED_TRACKBITS)";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 275, "gll_satrpt_rpc_trk_bits", (char)"m_otFlags.Missing(FLGS_RECEIVED_TRACKBITS)");
    int v46 = 275;
    goto LABEL_22;
  }
  int v17 = v16 | 0x400;
  *(_DWORD *)(a1 + 8) = v16 | 0x400;
  *(unsigned char *)(a1 + 94bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  *(_DWORD *)(a1 + 946) = *a4;
  if (!(a5 | a6 | a7 | a8) || a9)
  {
    if (!a8 && !a7 && !a6 && !a5 && a9)
    {
      *(_DWORD *)(a1 + 8) = v16 | 0x8400;
      long long v30 = *a9;
      long long v31 = a9[1];
      long long v32 = a9[3];
      *(_OWORD *)(a1 + 98bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a9[2];
      *(_OWORD *)(a1 + 1000) = v32;
      *(_OWORD *)(a1 + 952) = v30;
      *(_OWORD *)(a1 + 968) = v31;
      long long v33 = a9[4];
      long long v34 = a9[5];
      long long v35 = a9[7];
      *(_OWORD *)(a1 + 1048) = a9[6];
      *(_OWORD *)(a1 + 106bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v35;
      *(_OWORD *)(a1 + 1016) = v33;
      *(_OWORD *)(a1 + 1032) = v34;
      long long v36 = a9[8];
      long long v37 = a9[9];
      long long v38 = a9[11];
      *(_OWORD *)(a1 + 1112) = a9[10];
      *(_OWORD *)(a1 + 1128) = v38;
      *(_OWORD *)(a1 + 1080) = v36;
      *(_OWORD *)(a1 + 1096) = v37;
      long long v39 = a9[12];
      long long v40 = a9[13];
      long long v41 = a9[15];
      *(_OWORD *)(a1 + 1176) = a9[14];
      *(_OWORD *)(a1 + 1192) = v41;
      *(_OWORD *)(a1 + 114bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v39;
      *(_OWORD *)(a1 + 1160) = v40;
      goto LABEL_18;
    }
    float v45 = "0";
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 315, "gll_satrpt_rpc_trk_bits", (char)"0");
    int v46 = 315;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", v46, v45);
  }
  if (a5)
  {
    int v17 = v16 | 0xC00;
    *(_DWORD *)(a1 + 8) = v16 | 0xC00;
    long long v18 = *(_OWORD *)a5;
    long long v19 = *(_OWORD *)(a5 + 16);
    long long v20 = *(_OWORD *)(a5 + 48);
    *(_OWORD *)(a1 + 98bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a1 + 1000) = v20;
    *(_OWORD *)(a1 + 952) = v18;
    *(_OWORD *)(a1 + 968) = v19;
  }
  if (a6)
  {
    v17 |= 0x2000u;
    *(_DWORD *)(a1 + 8) = v17;
    long long v21 = *(_OWORD *)a6;
    long long v22 = *(_OWORD *)(a6 + 16);
    long long v23 = *(_OWORD *)(a6 + 32);
    *(_OWORD *)(a1 + 106bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_OWORD *)(a6 + 48);
    *(_OWORD *)(a1 + 1048) = v23;
    *(_OWORD *)(a1 + 1032) = v22;
    *(_OWORD *)(a1 + 1016) = v21;
  }
  if (a7)
  {
    v17 |= 0x1000u;
    *(_DWORD *)(a1 + 8) = v17;
    long long v24 = *(_OWORD *)a7;
    long long v25 = *(_OWORD *)(a7 + 16);
    long long v26 = *(_OWORD *)(a7 + 32);
    *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a7 + 48);
    *(_OWORD *)(a1 + 1112) = v26;
    *(_OWORD *)(a1 + 1096) = v25;
    *(_OWORD *)(a1 + 1080) = v24;
  }
  if (a8)
  {
    *(_DWORD *)(a1 + 8) = v17 | 0x4000;
    long long v27 = *(_OWORD *)a8;
    long long v28 = *(_OWORD *)(a8 + 16);
    long long v29 = *(_OWORD *)(a8 + 32);
    *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a8 + 48);
    *(_OWORD *)(a1 + 1176) = v29;
    *(_OWORD *)(a1 + 1160) = v28;
    *(_OWORD *)(a1 + 114bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v27;
  }
LABEL_18:
  uint64_t v42 = *(void *)(a1 + 3152);
  long long v43 = *(uint64_t (**)(uint64_t))(*(void *)v42 + 72);

  return v43(v42);
}

void FireCallback::GlLTOFileGpsPredictionTimestampReport(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 760);
    if (v10)
    {
      uint64_t v18 = a1;
      int v17 = a2;
      int v15 = a4;
      int v16 = a3;
      int v13 = a6;
      int v14 = a5;
      int v12 = a7;
      (*(void (**)(uint64_t, uint64_t *, int *, int *, int *, int *, int *, int *))(*(void *)v10 + 48))(v10, &v18, &v17, &v16, &v15, &v14, &v13, &v12);
      return;
    }
    int v11 = "fcb,fLTOFileGpsPredictionTimestampReportCb,nullptr";
  }
  else
  {
    int v11 = "fcb,GlLTOFileGpsPredictionTimestampReport,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, uint64_t a5, unsigned int *a6, int *a7, uint64_t a8, char a9)
{
  uint64_t v9 = *a3;
  uint64_t v10 = *a4;
  unsigned int v11 = *a6;
  int v12 = *a7;
  uint64_t v13 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fgd,handleLtoTimeStampReport,type,%d,minFct,%u,maxFct,%u,contentStat,%d,fileStat,%d", (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8, *a7);
  uint64_t v20 = *(void *)(v13 + 288);
  if (v20)
  {
    if (v12 == 1) {
      char v21 = 3;
    }
    else {
      char v21 = 0;
    }
    if (v12 == 2) {
      char v21 = 4;
    }
    v22[0] = v21;
    uint64_t v23 = v9;
    uint64_t v24 = v10;
    char v25 = (v11 < 5) & (0x1Du >> v11);
    (*(void (**)(uint64_t, char *))(*(void *)v20 + 48))(v20, v22);
  }
  else
  {
    FireDeviceLog::DeviceLogBase(3, "#fgd,#warning,handleLtoTimeStampReport,fLtoTimeStampReportCb,nullptr", v14, v15, v16, v17, v18, v19, a9);
  }
}

BlueFin::GlNvMemImpl *BlueFin::GlNvMemImpl::GlNvMemImpl(BlueFin::GlNvMemImpl *this, BlueFin::GlPeTimeManager *a2, BlueFin::GlPeAsstMgr *a3, BlueFin::GlPeAsstPosMgr *a4, BlueFin::GlPeSvVisibilityCache *a5, BlueFin::GlPeGpsQzssEphMgr *a6, BlueFin::GlPeAlmMgr *a7, BlueFin::GlPeLtoMgr *a8, long long a9, BlueFin::GlPeMsmtMgr *a10, BlueFin::GlPeEngineCallBacks *a11, BlueFin::GlSettingsImpl *a12, BlueFin::GlPeContextMgr *a13, BlueFin::GlPeSensorsMgr *a14, const BlueFin::GlSettingsImpl *a15, BlueFin::GlPeSvHealthMgr *a16, BlueFin::GlPeRtiRequestor *a17, BlueFin::GlPeGnssHwBiasMgr *a18, BlueFin::GlPeClkCalibrateMgr *a19)
{
  uint64_t v20 = (char *)this + 11852;
  *(void *)this = &unk_270EC2FE0;
  *((void *)this + 1) = 0xFFFFFFFF00000000;
  *((void *)this + 2) = a11;
  *((void *)this + 3) = a2;
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  *((void *)this + 5) = a4;
  *((void *)this + 6) = a5;
  *((void *)this + 7) = a7;
  *((void *)this + 8) = a8;
  *(_OWORD *)((char *)this + 72) = a9;
  *((void *)this + 11) = a10;
  *((void *)this + 12) = a13;
  *((void *)this + 13) = a14;
  *((void *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a15;
  *((void *)this + 15) = a16;
  *((void *)this + 16) = a17;
  *((void *)this + 17) = a18;
  *((void *)this + 18) = a19;
  *((_WORD *)this + 76) = 0;
  *((_DWORD *)this + 39) = 0;
  BlueFin::GlUtlGlSysLogEntryCodec::GlUtlGlSysLogEntryCodec((BlueFin::GlNvMemImpl *)((char *)this + 1216));
  *(_OWORD *)((char *)this + 11833) = 0u;
  *((_OWORD *)this + 739) = 0u;
  *((_OWORD *)this + 738) = 0u;
  *((_OWORD *)this + 737) = 0u;
  *((_OWORD *)this + 736) = 0u;
  *((_OWORD *)this + 735) = 0u;
  *((_OWORD *)this + 73bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *uint64_t v20 = 0;
  *((_DWORD *)this + 296bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)((char *)this + 11859) = 0;
  *(_OWORD *)((char *)this + 1186bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *((void *)this + 1485) = a12;
  *((_WORD *)this + 594bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((unsigned char *)this + 11890) = 0;
  *((_DWORD *)this + 2973) = 1;
  *(_OWORD *)((char *)this + 11896) = 0u;
  *((void *)this + 1489) = 0;
  *((_DWORD *)this + 2980) = 0;
  *((unsigned char *)this + 1192bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  *((_WORD *)this + 5963) = 0;
  bzero((char *)this + 160, 0x41AuLL);
  return this;
}

BlueFin::GlUtlGlSysLogEntryCodec *BlueFin::GlUtlGlSysLogEntryCodec::GlUtlGlSysLogEntryCodec(BlueFin::GlUtlGlSysLogEntryCodec *this)
{
  *((_WORD *)this + 131) = 0;
  *((_DWORD *)this + 68) = 0;
  *((unsigned char *)this + 276) = 0;
  *((void *)this + 35) = 0;
  *(_DWORD *)this = 0;
  *((unsigned char *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((void *)this + 33) = &unk_270EBA5A8;
  bzero((char *)this + 288, 0x2800uLL);
  *(_OWORD *)((char *)this + 245) = 0u;
  *(_OWORD *)((char *)this + 229) = 0u;
  *(_OWORD *)((char *)this + 213) = 0u;
  *(_OWORD *)((char *)this + 197) = 0u;
  *(_OWORD *)((char *)this + 181) = 0u;
  *(_OWORD *)((char *)this + 165) = 0u;
  *(_OWORD *)((char *)this + 149) = 0u;
  *(_OWORD *)((char *)this + 133) = 0u;
  *(_OWORD *)((char *)this + 117) = 0u;
  *(_OWORD *)((char *)this + 101) = 0u;
  *(_OWORD *)((char *)this + 85) = 0u;
  *(_OWORD *)((char *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 53) = 0u;
  *(_OWORD *)((char *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 21) = 0u;
  uint64_t v2 = -1;
  int v3 = &dword_263BAB54C;
  *(_OWORD *)((char *)this + 5) = 0u;
  while (v2 != 129)
  {
    int v4 = *v3;
    v3 += 2;
    unint64_t v5 = v2 + 1;
    uint64_t v6 = v2 + 2;
    ++v2;
    if (v6 != v4)
    {
      if (v5 <= 0x81)
      {
        DeviceFaultNotify("glutl_slog_codec.cpp", 969, "GlUtlGlSysLogEntryCodec", (char)"VerifyTagEntryTable()");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 969, "VerifyTagEntryTable()");
      }
      return this;
    }
  }
  return this;
}

uint64_t BlueFin::GlDbgRequest::CreateGlRequestImplPosPeriodic(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, unsigned int a4, int a5, int a6)
{
  uint64_t v10 = a2;
  if (BlueFin::GlDbgMemory::m_pInstance) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a1 == 0;
  }
  if (!v12 && a2 != 0)
  {
    uint64_t v16 = (uint64_t (**)(uint64_t))a1(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v16;
    uint64_t v14 = a1;
    if (v16)
    {
      *uint64_t v16 = a1;
      v16[1] = (uint64_t (*)(uint64_t))v10;
      uint64_t v14 = a1;
    }
    goto LABEL_13;
  }
  uint64_t v14 = a1;
  if (a1)
  {
LABEL_13:
    uint64_t v15 = v14(136);
    goto LABEL_14;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
LABEL_14:
  uint64_t v17 = v15;
  if (v15)
  {
    *(void *)uint64_t v15 = &unk_270EBB200;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    *(void *)(v15 + 72) = a3;
    Memory = (BlueFin::GlRequestImplPos *)BlueFin::GlMemAlloc::glAllocateMemory(44, 288, a1);
    uint64_t v19 = BlueFin::GlRequestImplPosPeriodic::Create(Memory, v17, (uint64_t)BlueFin::GlDbgProxyGlReqOnStart, a4, a5, a6);
    *(void *)(v17 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v19;
    if (!v19)
    {
      if (!v10) {
        uint64_t v10 = *(void (**)(uint64_t))(BlueFin::GlDbgMemory::m_pInstance + 8);
      }
      v10(v17);
      return 0;
    }
  }
  return v17;
}

BlueFin::GlRequestImplPos *BlueFin::GlRequestImplPosPeriodic::Create(BlueFin::GlRequestImplPos *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  if (!a1)
  {
    DeviceFaultNotify("glrequest.cpp", 1279, "Create", (char)"pvBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1279, "pvBuffer != nullptr");
  }
  return BlueFin::GlRequestImplPosPeriodic::GlRequestImplPosPeriodic(a1, a2, a3, a4, a5, a6, 0, 0, 0, 0);
}

BlueFin::GlRequestImplPos *BlueFin::GlRequestImplPosPeriodic::GlRequestImplPosPeriodic(BlueFin::GlRequestImplPos *this, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6, int a7, int *a8, unsigned __int16 a9, __int16 *a10)
{
  *((void *)this + 1) = a2;
  *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((_WORD *)this + 10) = 1;
  *((_WORD *)this + 12) = -1;
  *(void *)((char *)this + 28) = -1;
  *((_DWORD *)this + 9) = -1;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)this + 32) = 1;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = a6;
  *((_WORD *)this + 11) = a5;
  *(void *)((char *)this + 92) = 0;
  *(void *)((char *)this + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)((char *)this + 98) = 0;
  *(void *)this = &unk_270EC6C08;
  *((_DWORD *)this + 27) = a4;
  *((void *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  if (a4 >> 4 >= 0x271 && a5 == -1) {
    *((_WORD *)this + 11) = a4 / 0x3E8;
  }
  BlueFin::GlRequestImplPos::InitSmartMask((uint64_t)this, a9, a10, a7, a8);
  *((_DWORD *)this + 27) = 1000;
  return this;
}

uint64_t BlueFin::GlRequestImplPos::InitSmartMask(uint64_t this, unsigned __int16 a2, __int16 *a3, int a4, int *a5)
{
  uint64_t v9 = this;
  int v10 = *(_DWORD *)(this + 80);
  if ((v10 + 399) <= 0x18D)
  {
    int v11 = -v10;
    *(_DWORD *)(this + 80) = v11;
    if (v11 <= 5)
    {
      this = GlCustomLog(12, "Warning: Requested accuracy too low, using 10m instead.\n");
      int v11 = 10;
    }
    if (v11 >= SWORD2(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default))
    {
      if (v11 > SWORD2(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default)
        && v11 < SHIWORD(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default))
      {
        LOWORD(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default) = v11;
        WORD1(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default) = v11;
        int v13 = -1;
        WORD2(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default) = v11;
        goto LABEL_17;
      }
    }
    else
    {
      LOWORD(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default) = v11;
      WORD1(BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default) = v11;
    }
    int v13 = -1;
LABEL_17:
    *(_DWORD *)(v9 + 80) = v13;
    goto LABEL_18;
  }
  if ((v10 - 401) <= 0xFFFFFCDE && *(_WORD *)(this + 22) != 0)
  {
    this = GlCustomLog(12, "Warning: Requested accuracy too large, using 400m instead.\n");
    int v13 = 400;
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v15 = 0;
  uint64_t v16 = (_WORD *)(v9 + 84);
  do
  {
    v16[v15] = *(_WORD *)((char *)&BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default + v15 * 2);
    ++v15;
  }
  while (v15 != 4);
  for (uint64_t i = 0; i != 14; i += 2)
    *(_WORD *)(v9 + 92 + i) = *(_WORD *)((char *)&BlueFin::GlRequestImplPos::m_asSmartMaskToutS_default + i);
  if (a2 - 1 <= 6 && a3)
  {
    unint64_t v18 = 0;
    uint64_t v19 = a3 + 1;
    uint64_t v20 = (__int16 *)(v9 + 94);
    do
    {
      char v21 = v18++;
      if ((v21 & 1) == 0 && v18 < a2)
      {
        int v22 = *(v19 - 1);
        if (v22 < *v19)
        {
          *(v20 - 1) = v22;
          *uint64_t v20 = *v19;
        }
      }
      ++v19;
      ++v20;
    }
    while (a2 != v18);
  }
  if (a4 == 4)
  {
    if (a5)
    {
      int v24 = *a5;
      int v23 = a5[1];
      if (*a5 <= v23)
      {
        int v25 = a5[2];
        if (v23 < v25)
        {
          int v26 = a5[3];
          if (v25 < v26)
          {
            if ((v24 - 5) <= 0x7FFA) {
              *uint64_t v16 = v24;
            }
            if (v23 <= 49) {
              *(_WORD *)(v9 + 86) = v23;
            }
            if (v26 <= 399) {
              *(_WORD *)(v9 + 90) = v26;
            }
            if (v25 < 0x8000) {
              *(_WORD *)(v9 + 88) = v25;
            }
          }
        }
      }
    }
  }
  return this;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaPFM(BlueFin::GlPeNmeaGen *this, const BlueFin::GlPePlatfStat *a2, BlueFin::GlFormat *a3, const char *a4)
{
  uint64_t v6 = (char *)a3 + (int)a4 - 1;
  if ((int)a4 != 1 && v6 >= (char *)a3) {
    int v7 = (char *)(int)a4;
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = (BlueFin::GlPeNmeaGen *)BlueFin::GlFormat::glsnprintf(a3, v7, "$PGLOR,%d,PFM,HAL,%c,%d,%d,%d,%d,RF,%c,%d,%.1f,%.0f,", a4, 2, str_104_0[*(unsigned int *)a2], *((__int16 *)a2 + 2), *((__int16 *)a2 + 3), *((__int16 *)a2 + 4), *((__int16 *)a2 + 5), str_104_0[*((unsigned int *)a2 + 41)], *((__int16 *)a2 + 84), *((float *)a2 + 44), *((float *)a2 + 48));
  uint64_t v9 = (char *)a3 + v8;
  if (v6 > v9) {
    __int16 v10 = (_WORD)v6 - (_WORD)v9 + 1;
  }
  else {
    __int16 v10 = 0;
  }
  BOOL v12 = (BlueFin::GlFormat *)&v9[(int)BlueFin::GlPeNmeaGen::FormatNmeaPFM_Rtc(v8, a2, (BlueFin::GlFormat *)((char *)a3 + v8), (const char *)v10)];
  if (v6 > (char *)v12) {
    int v13 = (char *)(v6 - (char *)v12 + 1);
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = (BlueFin::GlPeNmeaGen *)BlueFin::GlFormat::glsnprintf(v12, v13, ",STO,%c,LTO,%c,SW,%c,", v11, str_104_0[*((unsigned int *)a2 + 52)], str_104_0[*((unsigned int *)a2 + 53)], str_104_0[*((unsigned int *)a2 + 54)]);
  uint64_t v15 = (BlueFin::GlFormat *)((char *)v12 + v14);
  if (v6 > (char *)v15) {
    __int16 v16 = (_WORD)v6 - (_WORD)v15 + 1;
  }
  else {
    __int16 v16 = 0;
  }
  uint64_t v17 = (BlueFin::GlPeNmeaGen *)BlueFin::GlPeNmeaGen::FormatNmeaPFM_Cntin(v14, a2, v15, (const char *)v16);
  unint64_t v18 = (BlueFin::GlFormat *)((char *)v15 + (int)v17);
  if (v6 > (char *)v18) {
    __int16 v19 = (_WORD)v6 - (_WORD)v18 + 1;
  }
  else {
    __int16 v19 = 0;
  }
  BlueFin::GlPeNmeaGen::FormatNmeaPFM_Osc(v17, a2, v18, (const char *)v19);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a3, v6, v20);
}

uint64_t BlueFin::GlPeNmeaGen::FormatNmeaPFM_Cntin(BlueFin::GlPeNmeaGen *this, const BlueFin::GlPePlatfStat *a2, BlueFin::GlFormat *a3, const char *a4)
{
  if ((*((_DWORD *)a2 + 55) - 8) < 0xFFFFFFF9) {
    int v4 = 1;
  }
  else {
    int v4 = *((_DWORD *)a2 + 55);
  }
  if (v4 != 3) {
    return BlueFin::GlFormat::glsnprintf(a3, (char *)(int)a4, (unsigned __int8 *)BlueFin::GlPeNmeaGen::FormatNmeaPFM_Cntin(BlueFin::GlPePlatfStat const&,char *,short)::paCntinStrings[v4], a4, *((unsigned int *)a2 + 56));
  }
  unsigned int v5 = *((_DWORD *)a2 + 57);
  if (v5 >= 8) {
    unsigned int v5 = 8;
  }
  return BlueFin::GlFormat::glsnprintf(a3, (char *)(int)a4, "CNTIN,NM,%s,", a4, BlueFin::GlPeNmeaGen::FormatNmeaPFM_Cntin(BlueFin::GlPePlatfStat const&,char *,short)::paCntinErrors[v5]);
}

uint64_t BlueFin::GlPeNmeaGen::FormatNmeaPFM_Rtc(BlueFin::GlPeNmeaGen *this, const BlueFin::GlPePlatfStat *a2, BlueFin::GlFormat *a3, const char *a4)
{
  uint64_t v6 = (char *)a3 + (int)a4;
  int v7 = v6 - 1;
  int v8 = *((_DWORD *)a2 + 51);
  if (v6 - 1 <= (char *)a3) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = (char *)(int)a4;
  }
  unsigned int v10 = BlueFin::GlFormat::glsnprintf(a3, v9, "RTC,", a4);
  BOOL v12 = (BlueFin::GlFormat *)((char *)a3 + v10);
  if (*((unsigned char *)a2 + 196))
  {
    if (v7 <= (char *)v12) {
      int v13 = 0;
    }
    else {
      int v13 = (char *)(v6 - (char *)v12);
    }
    BOOL v12 = (BlueFin::GlFormat *)((char *)v12
                              + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)a3 + v10), v13, "%.1f", v11, (float)(*((float *)a2 + 50) * 1000000.0)));
  }
  if (v8 == 2) {
    LODWORD(v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 70;
  }
  else {
    LODWORD(v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 45;
  }
  if (v8 == 1) {
    uint64_t v14 = 80;
  }
  else {
    uint64_t v14 = v14;
  }
  if (v7 <= (char *)v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (char *)(v6 - (char *)v12);
  }
  return v12 + BlueFin::GlFormat::glsnprintf(v12, v15, ",%c", v11, v14) - a3;
}

uint64_t BlueFin::GlPeNmeaGen::FormatNmeaPFM_Osc(BlueFin::GlPeNmeaGen *this, const BlueFin::GlPePlatfStat *a2, BlueFin::GlFormat *a3, const char *a4)
{
  uint64_t v6 = (char *)a3 + (int)a4;
  int v7 = v6 - 1;
  if ((int)a4 != 1 && v6 - 1 >= (char *)a3) {
    int v8 = (char *)(int)a4;
  }
  else {
    int v8 = 0;
  }
  unsigned int v9 = BlueFin::GlFormat::glsnprintf(a3, v8, "OSC,", a4);
  int v11 = (char *)a3 + v9;
  if (*((_DWORD *)a2 + 59)) {
    int v12 = *((_DWORD *)a2 + 60);
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = *((unsigned int *)a2 + 61);
  if (v7 <= v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = (char *)(v6 - v11);
  }
  __int16 v16 = (BlueFin::GlFormat *)&v11[BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)a3 + v9), v14, "%c,", v10, str_125[*((unsigned int *)a2 + 59)])];
  if (v7 <= (char *)v16) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = (char *)(v6 - (char *)v16);
  }
  unsigned int v18 = BlueFin::GlFormat::glsnprintf(v16, v17, "%c,", v15, str_125[v12]);
  uint64_t v20 = (char *)v16 + v18;
  if (v12 && v13)
  {
    if (v7 <= v20) {
      char v21 = 0;
    }
    else {
      char v21 = (char *)(v6 - v20);
    }
    LODWORD(v20) = v20
                 + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v16 + v18), v21, "%c", v19, str_125[v13]);
  }
  return (v20 - a3);
}

void BlueFin::GlMeSrdReceiverParametersProgrammer::GetDutyCycleEswPowerThreshold(BlueFin::GlMeSrdReceiverParametersProgrammer *this, float a2, unsigned int *a3, unsigned __int16 *a4, unsigned __int8 *a5)
{
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold((uint64_t)this, 0, 1, a2, 0.005, 0.0625);
  float v11 = v10;
  float v12 = fmodf(v10, 4295000000.0);
  if (v11 <= 4295000000.0) {
    float v12 = v11;
  }
  if (v12 < -4295000000.0) {
    float v12 = -fmodf(-v12, 4295000000.0);
  }
  if (v12 < 0.0) {
    unsigned int v13 = -(float)-v12;
  }
  else {
    unsigned int v13 = v12;
  }
  *a3 = v13;
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold((uint64_t)this, 0, 1, a2, 0.01, 0.0625);
  float v15 = v14;
  float v16 = fmodf(v14, 4295000000.0);
  if (v15 <= 4295000000.0) {
    float v16 = v15;
  }
  if (v16 < -4295000000.0) {
    float v16 = -fmodf(-v16, 4295000000.0);
  }
  if (v16 < 0.0) {
    unsigned int v17 = -(float)-v16;
  }
  else {
    unsigned int v17 = v16;
  }
  a3[1] = v17;
  BlueFin::GlMeSrdReceiverParametersProgrammer::GetEswPowerThreshold((uint64_t)this, 0, 1, a2, 0.02, 0.0625);
  float v19 = v18;
  float v20 = fmodf(v18, 4295000000.0);
  if (v19 <= 4295000000.0) {
    float v20 = v19;
  }
  if (v20 < -4295000000.0) {
    float v20 = -fmodf(-v20, 4295000000.0);
  }
  if (v20 < 0.0) {
    unsigned int v21 = -(float)-v20;
  }
  else {
    unsigned int v21 = v20;
  }
  a3[2] = v21;
  if ((*(unsigned int (**)(void))(**((void **)this + 2) + 608))())
  {
    float v22 = __exp10f(a2 / 10.0) * 0.001;
    float v23 = v22 * 16.0;
    double v24 = 0.5;
    if (v23 <= 0.0 && (double v24 = -0.5, v23 >= 0.0))
    {
      LOWORD(v25) = 0;
    }
    else
    {
      unsigned int v25 = (int)(v24 + v23);
      if ((v25 & 0x80000000) != 0)
      {
        int v26 = "slSnrAt1MsCohQ4 >= 0";
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 805, "GetDutyCycleEswPowerThreshold", (char)"slSnrAt1MsCohQ4 >= 0");
        int v27 = 805;
LABEL_33:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_programmer.cpp", v27, v26);
      }
      if (v25 >= 0x10000)
      {
        int v26 = "slSnrAt1MsCohQ4 <= USHRT_MAX";
        DeviceFaultNotify("glmesrd_receiver_parameters_programmer.cpp", 806, "GetDutyCycleEswPowerThreshold", (char)"slSnrAt1MsCohQ4 <= USHRT_MAX");
        int v27 = 806;
        goto LABEL_33;
      }
    }
    unsigned __int8 v28 = 1;
  }
  else
  {
    LOWORD(v25) = 0;
    unsigned __int8 v28 = 0;
  }
  *a4 = v25;
  *a5 = v28;
}

uint64_t BlueFin::GlMeSrdAsicConfig::UseDutyCycleSnrThreshold(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1493);
}

void FireConfig::setEngine(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v176 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    FireDeviceLog::DeviceLogBase(1, "pSettings,null", a3, a4, a5, a6, a7, a8, v165);
    DeviceFaultNotify("FireConfig.cpp", 146, "setEngine", (char)"pSettings,null");
    DeviceFaultNotify("FireConfig.cpp", 146, "setEngine", (char)"pSettings,null");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "FireConfig.cpp", 146, "pSettings,null");
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 176))(a2, 18, 1);
  FireDeviceLog::DeviceLogBase(3, "#fc,enable feature NAVIC", v10, v11, v12, v13, v14, v15, v165);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 128))(a2, *(unsigned int *)(FireDeviceLog::StaticSetting::fInstance + 8));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 136))(a2, *(unsigned int *)(FireDeviceLog::StaticSetting::fInstance + 4));
  if (*((unsigned char *)a1 + 12))
  {
    int v16 = *((_DWORD *)a1 + 2);
    *(_WORD *)v174 = v16 & 1;
    *(_WORD *)&v174[3] = (v16 & 0x10) != 0;
    v174[5] = (v16 & 4) != 0;
    v174[6] = (v16 & 8) != 0;
    v174[2] = (v16 & 2) != 0;
    v174[7] = (v16 & 0x20) != 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 968))(a2, v174);
    FireDeviceLog::DeviceLogBase(3, "#fc,setConstellations,0x%x", v17, v18, v19, v20, v21, v22, v16);
  }
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  uint64_t v23 = *(void *)(FireResourceMgr::fInstance + 40);
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 176))(v23);
  switch(v24)
  {
    case 4:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 39);
      break;
    case 3:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 37);
      break;
    case 2:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, 34);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 392))(a2, 1);
      break;
    default:
      DeviceFaultNotify("FireConfig.cpp", 170, "setEngine", (char)"PlatformNotSupported");
      (*(void (**)(uint64_t))(*(void *)v23 + 176))(v23);
      CrashData();
      break;
  }
  if (*((unsigned char *)a1 + 16))
  {
    int v25 = *((_DWORD *)a1 + 5);
  }
  else
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    LOWORD(v25) = (*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 16))(*(void *)(FireResourceMgr::fInstance + 40));
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a2 + 728))(a2, (__int16)v25, 1);
  FireDeviceLog::DeviceLogBase(5, "#fc simulatorMode,%d,week,%d", v26, v27, v28, v29, v30, v31, *((unsigned char *)a1 + 16));
  if (*((unsigned char *)a1 + 16))
  {
    *(_OWORD *)v174 = xmmword_263BA89F0;
    *(_OWORD *)&v174[16] = unk_263BA8A00;
    v175[0] = xmmword_263BA8A10;
    *(_OWORD *)((char *)v175 + 15) = *(long long *)((char *)&xmmword_263BA8A10 + 15);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a2 + 248))(a2, v174, 63);
    FireDeviceLog::DeviceLogBase(5, "#fc,setBdsSignalType", v32, v33, v34, v35, v36, v37, v166);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 384))(a2, 2);
    FireDeviceLog::DeviceLogBase(5, "#fc,SetDbgMode,%d", v38, v39, v40, v41, v42, v43, 2);
  }
  (*(void (**)(uint64_t, float))(*(void *)a2 + 56))(a2, 4.0);
  if (*((unsigned char *)a1 + 16))
  {
    FireDeviceLog::DeviceLogBase(3, "#fc,#ws,0,simu", v44, v45, v46, v47, v48, v49, v166);
LABEL_26:
    uint64_t v56 = 14;
    goto LABEL_27;
  }
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  if (((*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 72))(*(void *)(FireResourceMgr::fInstance + 40)) & 2) == 0)
  {
    FireDeviceLog::DeviceLogBase(3, "#fc,#ws,0,noRisk", v50, v51, v52, v53, v54, v55, v166);
    goto LABEL_26;
  }
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(v174);
  if (*(void *)v174 == *(void *)&v174[8])
  {
    FireDeviceLog::DeviceLogBase(3, "#fc,#ws,1,tcxoNvItemNotAvailable", v151, v152, v153, v154, v155, v156, v166);
    BOOL v163 = 1;
  }
  else
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(&v172);
    BOOL v163 = v172.__r_.__value_.__r.__words[0] == v172.__r_.__value_.__l.__size_;
    if (v172.__r_.__value_.__r.__words[0] == v172.__r_.__value_.__l.__size_) {
      double v164 = "#fc,#ws,1,stoNvItemNotAvailable";
    }
    else {
      double v164 = "#fc,#ws,0";
    }
    FireDeviceLog::DeviceLogBase(3, v164, v157, v158, v159, v160, v161, v162, v166);
    if (v172.__r_.__value_.__r.__words[0])
    {
      v172.__r_.__value_.__l.__size_ = v172.__r_.__value_.__r.__words[0];
      operator delete(v172.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)v174)
  {
    *(void *)&v174[8] = *(void *)v174;
    operator delete(*(void **)v174);
  }
  if (v163) {
    uint64_t v56 = 51;
  }
  else {
    uint64_t v56 = 14;
  }
LABEL_27:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v56);
  int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 56))(v23);
  double v58 = *(void (**)(uint64_t, uint64_t))(*(void *)a2 + 24);
  if (v57)
  {
    v58(a2, 2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 3);
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    char v59 = (*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 72))(*(void *)(FireResourceMgr::fInstance + 40));
    *((unsigned char *)a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v59 & 1;
    if (v59)
    {
      *(void *)v174 = 0x1174C000000704;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a2 + 328))(a2, v174, 1);
      FireDeviceLog::DeviceLogBase(5, "#fc,coex,notchL5,%d,ctrl,%d,coef,%d,ncoHz,%d", v60, v61, v62, v63, v64, v65, *((unsigned char *)a1 + 24));
    }
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    double v66 = (*(double (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 104))(*(void *)(FireResourceMgr::fInstance + 40));
    *(_OWORD *)v174 = xmmword_263BA66D0;
    *(void *)&v174[16] = 0xBFF0000000000000;
    FireConfig::LearnedL5GroupDelay::readFromNv((FireConfig::LearnedL5GroupDelay *)v174);
    double v73 = *(double *)&v174[16];
    if (*(double *)&v174[16] <= 0.0)
    {
      double v83 = v66;
    }
    else
    {
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 8) + 40))(*(void *)(FireResourceMgr::fInstance + 8));
      double v74 = *(double *)&v174[8];
      if (FireConfig::LearnedL5GroupDelay::passesCrossCheckToCalibration(v75, *(double *)&v174[8], v73, v66, v76, v77, v78, v79, v80, v81, v82))double v83 = v74; {
      else
      }
        double v83 = v66;
    }
    FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,injecting delta delay,%.2f,is learned value,%d,learned value,%.2f,%.2f,age hours,%.3f,static value,%.2f", v67, v68, v69, v70, v71, v72, SLOBYTE(v83));
    float v84 = v83;
    (*(void (**)(uint64_t, float))(*(void *)a2 + 264))(a2, v84);
  }
  else
  {
    v58(a2, 1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 1);
  }
  double v85 = (*(double (**)(uint64_t))(*(void *)v23 + 96))(v23);
  double v86 = (*(double (**)(uint64_t))(*(void *)v23 + 88))(v23);
  std::string::basic_string[abi:ne180100]<0>(v174, (char *)&unk_263B6E70D);
  if (v85 < 0.0 || v86 < 0.0)
  {
    FireDeviceLog::DeviceLogBase(2, "#fc thresholds invalid maxThresh,%f,minThresh,%f", v87, v88, v89, v90, v91, v92, SLOBYTE(v85));
  }
  else
  {
    std::to_string(&v169, (int)v85);
    char v93 = std::string::insert(&v169, 0, "strong_weak:");
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v170.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    int v95 = std::string::append(&v170, ",");
    long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v171.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v168, (int)v86);
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v97 = &v168;
    }
    else {
      unsigned int v97 = (std::string *)v168.__r_.__value_.__r.__words[0];
    }
    if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v168.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v168.__r_.__value_.__l.__size_;
    }
    unsigned int v99 = std::string::append(&v171, (const std::string::value_type *)v97, size);
    long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    v172.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    unsigned int v101 = std::string::append(&v172, ";");
    std::string::size_type v102 = v101->__r_.__value_.__r.__words[0];
    v173[0] = v101->__r_.__value_.__l.__size_;
    *(void *)((char *)v173 + 7) = *(std::string::size_type *)((char *)&v101->__r_.__value_.__r.__words[1] + 7);
    char v103 = HIBYTE(v101->__r_.__value_.__r.__words[2]);
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    if ((v174[23] & 0x80000000) != 0) {
      operator delete(*(void **)v174);
    }
    *(void *)v174 = v102;
    *(void *)&v174[8] = v173[0];
    *(void *)&v174[15] = *(void *)((char *)v173 + 7);
    v174[23] = v103;
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v172.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v168.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v170.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v169.__r_.__value_.__l.__data_);
    }
  }
  std::string::append((std::string *)v174, "tstgrid:-1;");
  if ((*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23)) {
    std::string::append((std::string *)v174, "iqdump:123456;");
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23) & 2) != 0) {
    std::string::append((std::string *)v174, "tstgrid_iq_config:2;");
  }
  if (v174[23] >= 0) {
    char v104 = v174;
  }
  else {
    char v104 = *(unsigned char **)v174;
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 184))(a2, v104);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v23 + 112))(&v172, v23);
  std::string::size_type v112 = v172.__r_.__value_.__l.__size_;
  char v111 = (double *)v172.__r_.__value_.__r.__words[0];
  std::string::size_type v113 = v172.__r_.__value_.__l.__size_ - v172.__r_.__value_.__r.__words[0];
  if (v172.__r_.__value_.__l.__size_ == v172.__r_.__value_.__r.__words[0])
  {
    float v115 = 0;
  }
  else
  {
    if ((v113 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    float v114 = (float *)operator new(v113 >> 1);
    float v115 = v114;
    uint64_t v116 = 0;
    do
    {
      double v117 = *v111++;
      float v118 = v117;
      v114[v116++] = v118;
    }
    while (v111 != (double *)v112);
    std::string::size_type v113 = (std::string::size_type)&v114[v116];
  }
  uint64_t v119 = v113 - (void)v115;
  if (v119 == 56)
  {
    double v120 = *v115;
    FireDeviceLog::DeviceLogBase(5, "#fc,glonass platform delay calibration,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f", v105, v106, v107, v108, v109, v110, SLOBYTE(v120));
    (*(void (**)(uint64_t, float *))(*(void *)a2 + 232))(a2, v115);
  }
  else
  {
    FireDeviceLog::DeviceLogBase(2, "#fc,glonass platform delay size,%zu,does not match expected,%d", v105, v106, v107, v108, v109, v110, v119 >> 2);
    if (!v115) {
      goto LABEL_81;
    }
  }
  operator delete(v115);
LABEL_81:
  if (v172.__r_.__value_.__r.__words[0])
  {
    v172.__r_.__value_.__l.__size_ = v172.__r_.__value_.__r.__words[0];
    operator delete(v172.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 976))(a2, 600);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 984))(a2, 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 992))(a2, 500);
  unint64_t v126 = *a1;
  unsigned __int8 v127 = *a1;
  uint64_t v128 = v127;
  switch(v127)
  {
    case 0u:
    case 3u:
      (*(void (**)(uint64_t, void, void))(*(void *)a2 + 376))(a2, 0, 0);
      int v129 = 0;
      break;
    case 1u:
      goto LABEL_86;
    case 2u:
      uint64_t v128 = 2;
LABEL_86:
      int v129 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 376))(a2, 1, v128);
      break;
    default:
      int v129 = 0;
      break;
  }
  FireDeviceLog::DeviceLogBase(5, "#fc,decodeStartCoexConfig,lte,%hhu,en,%d", v128, v121, v122, v123, v124, v125, v127);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  if (((*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 40) + 64))(*(void *)(FireResourceMgr::fInstance + 40)) & 0x10) != 0)
  {
    if (v129) {
      std::string::value_type v136 = 19;
    }
    else {
      std::string::value_type v136 = 1;
    }
    v172.__r_.__value_.__r.__words[0] = 0x500000001;
    v172.__r_.__value_.__s.__data_[1] = v136;
    LODWORD(v172.__r_.__value_.__r.__words[1]) = 2;
    (*(void (**)(uint64_t, std::string *))(*(void *)a2 + 920))(a2, &v172);
    FireDeviceLog::DeviceLogBase(6, "#fc,enable ADC capture", v137, v138, v139, v140, v141, v142, v167);
  }
  if (BYTE1(v126) <= 5u) {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 504))(a2, dword_263BA8A30[SBYTE1(v126)]);
  }
  FireDeviceLog::DeviceLogBase(5, "#fc,decodeStartCoexConfig,blanking,%hhu", v130, v131, v132, v133, v134, v135, SBYTE1(v126));
  (*(void (**)(uint64_t, unint64_t))(*(void *)a2 + 1000))(a2, HIDWORD(v126) & 1);
  BOOL v144 = (v126 & 0x100000000) == 0 && *((unsigned char *)a1 + 25) == 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 864))(a2, v144);
  FireDeviceLog::DeviceLogBase(3, "#fc,B1i,%d,B1c,%d,B1iPri,%d", v145, v146, v147, v148, v149, v150, *((unsigned char *)a1 + 25));
  if ((v174[23] & 0x80000000) != 0) {
    operator delete(*(void **)v174);
  }
}

void sub_263A15CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v56 = *(void **)(v54 - 192);
  if (v56)
  {
    *(void *)(v54 - 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v56;
    operator delete(v56);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BlueFin::GlDbgSettings::SetRfType(uint64_t a1, uint64_t a2)
{
  unsigned int v8 = a2;
  int v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 779, "SetRfType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 779, "!m_rProxy.Normal()");
  }
  uint64_t v4 = a2;
  BlueFin::GlDbgCodec::WriteStart(v3, 3608);
  unsigned int v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
  {
    *((_DWORD *)v5 + 143) = 2;
    BlueFin::GlDbgCodec::Rvw(v5, &v8);
    uint64_t v4 = v8;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), v4);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3608);
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v6();
}

uint64_t BlueFin::GlSettingsImpl::SetRfType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t BlueFin::GlDbgSettings::SetRfMode(uint64_t a1, unsigned int a2)
{
  unsigned int v6 = a2;
  int v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 795, "SetRfMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 795, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3641);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16), v6);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3641);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v4();
}

uint64_t BlueFin::GlSettingsImpl::SetRfMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t BlueFin::GlDbgSettings::SetL5DeltaHardwareDelayInMeters(BlueFin::GlDbgSettings *this, float a2)
{
  float v7 = a2;
  int v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 294, "SetL5DeltaHardwareDelayInMeters", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 294, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3701);
  BlueFin::GlDbgCodec::Write(*((BlueFin::GlDbgCodec **)this + 1), &v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 264))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3701);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetL5DeltaHardwareDelayInMeters(uint64_t this, float a2)
{
  *(unsigned char *)(this + 918) = 1;
  *(float *)(this + 988) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetNotchFiltersConfiguration(uint64_t a1, uint64_t a2, BOOL a3)
{
  BOOL v11 = a3;
  if (!a2 || (uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8), *((void *)v4 + 101)))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 585, "SetNotchFiltersConfiguration", (char)"(!filters) || (!m_rProxy.Normal())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 585, "(!filters) || (!m_rProxy.Normal())");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3601);
  BOOL v10 = a3;
  float v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, &v11);
  }
  BlueFin::GlDbgCodec::WriteArray(*(BlueFin::GlDbgCodec **)(a1 + 8), a2, (unsigned int *)&v10);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 328))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3601);
  unsigned int v8 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v8();
}

uint64_t BlueFin::GlSettingsImpl::SetNotchFiltersConfiguration(uint64_t result, uint64_t a2, unsigned int a3)
{
  if ((a3 - 25) < 0xE8u)
  {
    float v7 = "ucNumNotches > 0 && ucNumNotches <= NUM_NOTCH_FILTERS";
    DeviceFaultNotify("glsettings.cpp", 1666, "SetNotchFiltersConfiguration", (char)"ucNumNotches > 0 && ucNumNotches <= NUM_NOTCH_FILTERS");
    int v8 = 1666;
    goto LABEL_10;
  }
  unint64_t v3 = 0;
  unsigned __int8 v4 = 0;
  uint64_t v5 = result + 1104;
  do
  {
    if (!*(unsigned char *)v5)
    {
      uint64_t v6 = a2 + 8 * v4;
      *(_WORD *)uint64_t v5 = *(_WORD *)v6;
      *(_DWORD *)(v5 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(v6 + 4);
      ++v4;
    }
    if (v3 > 0x16) {
      break;
    }
    ++v3;
    v5 += 8;
  }
  while (a3 != v4);
  if (a3 > v4)
  {
    GlCustomLog(11, "SetNotchFiltersConfiguration:: Not enough space to store all the programmed notches\n");
    float v7 = "0";
    DeviceFaultNotify("glsettings.cpp", 1685, "SetNotchFiltersConfiguration", (char)"0");
    int v8 = 1685;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", v8, v7);
  }
  return result;
}

uint64_t BlueFin::GlDbgSettings::SetGlnsHardwareDelayInMeters(BlueFin::GlDbgSettings *this, float *a2)
{
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 261, "SetGlnsHardwareDelayInMeters", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 261, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3596);
  unsigned int v7 = 14;
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, &v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float *))(**((void **)this + 2) + 232))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3596);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

float BlueFin::GlSettingsImpl::SetGlnsHardwareDelayInMeters(BlueFin::GlSettingsImpl *this, const float *a2)
{
  uint64_t v2 = 0;
  *((unsigned char *)this + 916) = 1;
  do
  {
    float result = a2[v2];
    *(float *)((char *)this + v2 * 4 + 928) = result;
    ++v2;
  }
  while (v2 != 14);
  return result;
}

uint64_t BlueFin::GlDbgSettings::SetSupportedConstellations(BlueFin::GlDbgSettings *this, BOOL (*a2)[8])
{
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1774, "SetSupportedConstellations", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1774, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3707);
  uint64_t v5 = 0;
  int v6 = 0;
  do
  {
    if ((*a2)[v5]) {
      int v7 = 1 << v5;
    }
    else {
      int v7 = 0;
    }
    v6 |= v7;
    ++v5;
  }
  while (v5 != 8);
  int v11 = v6;
  int v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v11);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 968))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3707);
  unsigned int v9 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v9();
}

unsigned char *BlueFin::GlSettingsImpl::SetSupportedConstellations(unsigned char *this, BOOL (*a2)[8])
{
  this[263] = !(*a2)[0];
  this[264] = !(*a2)[1];
  this[265] = !(*a2)[2];
  this[266] = !(*a2)[3];
  this[267] = !(*a2)[6];
  this[268] = !(*a2)[5];
  this[269] = !(*a2)[7];
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetPreciseRtcAgeRatePpm(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 2008, "SetPreciseRtcAgeRatePpm", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 2008, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3709);
  unsigned __int8 v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 984))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3709);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetPreciseRtcAgeRatePpm(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetPreciseRtcMinUncUs(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 2024, "SetPreciseRtcMinUncUs", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 2024, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3710);
  unsigned __int8 v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 992))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3710);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetPreciseRtcMinUncUs(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetMeConfigParameters(BlueFin::GlDbgSettings *this, char *a2)
{
  if (!a2 || (unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1), *((void *)v3 + 101)))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 551, "SetMeConfigParameters", (char)"(nullptr == pLine) || (!m_rProxy.Normal())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 551, "(nullptr == pLine) || (!m_rProxy.Normal())");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3600);
  int v7 = strlen(a2);
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, char *))(**((void **)this + 2) + 184))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3600);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

size_t BlueFin::GlSettingsImpl::SetMeConfigParameters(BlueFin::GlSettingsImpl *this, const char *a2)
{
  return strlcpy((char *)this + 284, a2, 0x100uLL);
}

uint64_t BlueFin::GlDbgSettings::SetPreciseRtcMaxAgeS(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1992, "SetPreciseRtcMaxAgeS", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1992, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3708);
  unsigned __int8 v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 976))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3708);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetPreciseRtcMaxAgeS(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetEnableBdsPriority(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 2040, "SetEnableBdsPriority", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 2040, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3711);
  unsigned __int8 v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 1000))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3711);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetEnableBdsPriority(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26333) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetMinGpsWeekNumber(BlueFin::GlDbgSettings *this, __int16 a2)
{
  __int16 v7 = a2;
  unint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1759, "SetMinGpsWeekNumber", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1759, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3675);
  unsigned __int8 v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 728))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3675);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetMinGpsWeekNumber(uint64_t this, __int16 a2, char a3)
{
  if ((a3 & 1) != 0 || !*(unsigned char *)(this + 26331))
  {
    *(_WORD *)(this + 68) = a2;
    *(unsigned char *)(this + 26331) = 1;
  }
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetEnableLTEFilter(BlueFin::GlDbgSettings *this, BOOL a2, int a3)
{
  BOOL v10 = a2;
  int v9 = a3;
  unsigned __int8 v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 959, "SetEnableLTEFilter", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 959, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3615);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v10);
  }
  int v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v9);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 376))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3615);
  __int16 v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlSettingsImpl::SetEnableLTEFilter(uint64_t this, char a2, int a3)
{
  *(unsigned char *)(this + 25957) = a2;
  *(_DWORD *)(this + 25960) = a3;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetFrequencyPlan(uint64_t a1, unsigned int a2)
{
  unsigned int v6 = a2;
  unint64_t v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 245, "SetFrequencyPlan", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 245, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3595);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), v6);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3595);
  unsigned __int8 v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v4();
}

BlueFin::GlSettingsImpl *BlueFin::GlPeObjFactory::MakeGlSettingImpl(uint64_t (**this)(uint64_t))
{
  float result = (BlueFin::GlSettingsImpl *)BlueFin::GlMemAlloc::glAllocateMemory(39, 26336, *this);
  if (result) {
    return BlueFin::GlSettingsImpl::GlSettingsImpl(result);
  }
  return result;
}

BlueFin::GlSettingsImpl *BlueFin::GlSettingsImpl::GlSettingsImpl(BlueFin::GlSettingsImpl *this)
{
  *(void *)this = &unk_270EC8F30;
  *((void *)this + 1) = &unk_270EC8F00;
  *((void *)this + 2) = 1;
  *((_WORD *)this + 12) = 257;
  uint64_t v2 = (_WORD *)((char *)this + 26252);
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(void *)((char *)this + 60) = 0;
  *((_WORD *)this + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 2049;
  *((unsigned char *)this + 70) = 1;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 22) = 0;
  *((unsigned char *)this + 92) = 0;
  *((_DWORD *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((_DWORD *)this + 30) = 10000000;
  *((_WORD *)this + 69) = 1000;
  *(_OWORD *)((char *)this + 140) = xmmword_263BBDCA0;
  *((_DWORD *)this + 39) = 127;
  *((void *)this + 20) = (char *)this + 172;
  unint64_t v3 = (_DWORD **)((char *)this + 160);
  *((unsigned char *)this + 168) = 3;
  *((_DWORD *)this + 45) = 0;
  *(void *)((char *)this + 172) = 0;
  *(void *)((char *)this + 196) = 0;
  *((void *)this + 23) = (char *)this + 196;
  *((unsigned char *)this + 192) = 3;
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 220) = 0u;
  *((void *)this + 26) = (char *)this + 220;
  unsigned __int8 v4 = (BlueFin::GlSettingsImpl *)((char *)this + 208);
  *((unsigned char *)this + 216) = 8;
  *(_OWORD *)((char *)this + 236) = 0u;
  *(_DWORD *)((char *)this + 263) = 0;
  *(_DWORD *)((char *)this + 266) = 0;
  *((_DWORD *)this + 68) = 100;
  *((unsigned char *)this + 283) = 0;
  *((unsigned char *)this + 796) = 1;
  *(void *)((char *)this + 829) = 0;
  *((_OWORD *)this + 50) = xmmword_263BBDCB0;
  *((_OWORD *)this + 51) = 0u;
  *(_DWORD *)((char *)this + 837) = 168;
  *((_DWORD *)this + 211) = 16000;
  *((unsigned char *)this + 856) = 0;
  *((void *)this + 106) = 0;
  *((void *)this + 109) = (char *)this + 864;
  *((_DWORD *)this + 220) = 0;
  *((_WORD *)this + 432) = 0;
  *((unsigned char *)this + 896) = 0;
  *((void *)this + 113) = 0x3FF0000000000000;
  *((void *)this + 11bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1092616192;
  *(_DWORD *)((char *)this + 919) = 0;
  *(_WORD *)((char *)this + 923) = 1;
  *((unsigned char *)this + 925) = 0;
  *((unsigned char *)this + 1296) = 0;
  *((void *)this + 125) = 0;
  *(_OWORD *)((char *)this + 98bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(int16x4_t *)((char *)this + 1298) = vdup_n_s16(0x3E8u);
  *((unsigned char *)this + 1306) = 0;
  *(void *)((char *)this + 1308) = 0x100000000;
  *((_WORD *)this + 658) = 4881;
  *((unsigned char *)this + 1318) = 0;
  *((void *)this + 1445) = 0;
  *((_WORD *)this + 578bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  *((_WORD *)this + 1293bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((_DWORD *)this + 6488) = 0;
  *((_WORD *)this + 12978) = 0;
  *(void *)((char *)this + 11578) = 0;
  *(void *)((char *)this + 11572) = 0;
  *((unsigned char *)this + 25968) = 0;
  *((void *)this + 3245) = 0;
  *(_OWORD *)((char *)this + 25972) = 0u;
  *(void *)((char *)this + 25986) = 0;
  *(_OWORD *)((char *)this + 25996) = 0u;
  *((_WORD *)this + 13006) = 3;
  *((unsigned char *)this + 2601bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((_OWORD *)this + 1626) = 0u;
  *((_OWORD *)this + 1627) = 0u;
  *(void *)((char *)this + 26045) = 0;
  *(_DWORD *)((char *)this + 2605bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0xFFFF;
  *((_DWORD *)this + 6515) = 0;
  *((unsigned char *)this + 2606bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_WORD *)((char *)this + 26163) = 0;
  *((_DWORD *)this + 6542) = 0;
  *((unsigned char *)this + 26172) = 0;
  *(_DWORD *)((char *)this + 2617bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((_DWORD *)this + 6545) = 0;
  *((_WORD *)this + 13092) = 14;
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)((char *)this + 26188) = _Q1;
  *((_DWORD *)this + 6551) = -1082130432;
  *((unsigned char *)this + 26216) = 0;
  *((void *)this + 3276) = 0;
  *(_WORD *)((char *)this + 26217) = 255;
  *((unsigned char *)this + 26219) = 25;
  *((void *)this + 3278) = (char *)this + 26236;
  *((unsigned char *)this + 26232) = 2;
  *(void *)((char *)this + 26236) = 0;
  *((unsigned char *)this + 26248) = 0;
  *((_DWORD *)this + 6570) = 300;
  *((_DWORD *)this + 6571) = 0x10000;
  *((_WORD *)this + 1314bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  *((unsigned char *)this + 26290) = 0;
  *((_DWORD *)this + 6573) = 0;
  *((_WORD *)this + 13148) = 0;
  *((void *)this + 3288) = 0;
  *((_WORD *)this + 13156) = 75;
  *((_WORD *)this + 13166) = 0;
  *((_DWORD *)this + 6582) = 0;
  *((_DWORD *)this + 36) = 5;
  (*(void (**)(BlueFin::GlSettingsImpl *, void))(*(void *)this + 40))(this, *((unsigned int *)this + 4));
  bzero(*((void **)this + 23), ((4 * *((unsigned __int8 *)this + 192) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlSetBase::Remove((uint64_t)v3, 1);
  uint64_t v10 = 0;
  **v3 |= 0x4012608u;
  *(_OWORD *)((char *)this + 76bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 780) = 0u;
  *(_OWORD *)((char *)this + 732) = 0u;
  *(_OWORD *)((char *)this + 748) = 0u;
  *(_OWORD *)((char *)this + 700) = 0u;
  *(_OWORD *)((char *)this + 716) = 0u;
  *(_OWORD *)((char *)this + 668) = 0u;
  *(_OWORD *)((char *)this + 68bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 636) = 0u;
  *(_OWORD *)((char *)this + 652) = 0u;
  *(_OWORD *)((char *)this + 60bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 620) = 0u;
  *(_OWORD *)((char *)this + 572) = 0u;
  *(_OWORD *)((char *)this + 588) = 0u;
  *(_OWORD *)((char *)this + 540) = 0u;
  *(_OWORD *)((char *)this + 556) = 0u;
  *(_OWORD *)((char *)this + 508) = 0u;
  *(_OWORD *)((char *)this + 52bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *(_OWORD *)((char *)this + 492) = 0u;
  *(_OWORD *)((char *)this + 44bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 36bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 28bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  **((_WORD **)this + 109) = 0;
  *((_DWORD *)this + 220) = 0;
  *((_DWORD *)this + 7) = 1356803128;
  BlueFin::GlSettingsImpl::m_ulActiveBuildFct = 1356803128;
  *((_DWORD *)this + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)((char *)this + 259) = 0;
  *(_DWORD *)((char *)this + 279) = 0;
  *((_DWORD *)this + 69) = 0;
  *((void *)this + 122) = 0;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 58) = 0u;
  do
  {
    int v11 = (char *)this + v10;
    *((_WORD *)v11 + 552) = 0;
    *((_DWORD *)v11 + 277) = 0;
    v10 += 8;
  }
  while (v10 != 192);
  bzero((char *)this + 11588, 0x37C8uLL);
  strcpy((char *)this + 25870, "untitled");
  bzero((char *)this + 1319, 0x2800uLL);
  *((_OWORD *)this + 63) = xmmword_263BBDCC0;
  *((_OWORD *)this + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = unk_263BBDCD0;
  *((_OWORD *)this + 65) = xmmword_263BBDCE0;
  *((_OWORD *)this + 66) = unk_263BBDCF0;
  *((_OWORD *)this + 67) = xmmword_263BBDD00;
  *(_OWORD *)((char *)this + 1087) = *(long long *)((char *)&xmmword_263BBDD00 + 15);
  *(_OWORD *)((char *)this + 26065) = xmmword_263BBDCC0;
  *(_OWORD *)((char *)this + 26081) = unk_263BBDCD0;
  *((_OWORD *)this + 163bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(long long *)((char *)&xmmword_263BBDD00 + 15);
  *(_OWORD *)((char *)this + 26113) = unk_263BBDCF0;
  *(_OWORD *)((char *)this + 26129) = xmmword_263BBDD00;
  *(_OWORD *)((char *)this + 26097) = xmmword_263BBDCE0;
  memset(*((void **)this + 26), 255, 4 * *((unsigned __int8 *)this + 216));
  int ULong = BlueFin::GlSetBase::GetULong(v4, 0);
  BlueFin::GlSetBase::SetULong((uint64_t)v4, 0, ULong & 0xFFFFFFFE);
  unsigned int v13 = (unsigned __int16)(32 * (*((unsigned char *)this + 216) & 0x3F) - 1);
  if (v13 >= 0xBE)
  {
    unsigned int v14 = 189;
    char v15 = -67;
    do
    {
      __int16 v16 = v15 & 0x1F;
      if ((v15 & 0x1F) != 0)
      {
        int v17 = BlueFin::GlSetBase::GetULong(v4, (v14 >> 5));
        BlueFin::GlSetBase::SetULong((uint64_t)v4, (v14 >> 5), v17 & ~(-1 << v16));
        LOWORD(v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v14 - v16;
      }
      else
      {
        BlueFin::GlSetBase::SetULong((uint64_t)v4, (v14 >> 5), 0);
      }
      char v15 = v14 + 32;
      unsigned int v14 = (unsigned __int16)(v14 + 32);
    }
    while (v14 < v13);
  }
  *uint64_t v2 = 0;
  *((_DWORD *)this + 6580) = 0;
  *((_DWORD *)this + 6581) = 0;
  *((void *)this + 3282) = 0;
  *((void *)this + 328bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((void *)this + 3283) = 0;
  v2[32] = 0;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetFrequencyPlan(uint64_t result, int a2)
{
  switch(a2)
  {
    case 1:
      char v2 = 0;
      int v3 = 10000000;
      goto LABEL_65;
    case 2:
      char v2 = 0;
      int v3 = 12000000;
      goto LABEL_65;
    case 3:
      char v2 = 0;
      int v3 = 13000000;
      goto LABEL_65;
    case 4:
      char v2 = 0;
      int v3 = 14400000;
      goto LABEL_65;
    case 5:
      char v2 = 0;
      int v3 = 15360000;
      goto LABEL_65;
    case 6:
      char v2 = 0;
      int v3 = 16200000;
      goto LABEL_65;
    case 7:
      char v2 = 0;
      int v3 = 16367667;
      goto LABEL_65;
    case 8:
      char v2 = 0;
      int v3 = 16369000;
      goto LABEL_65;
    case 9:
      char v2 = 0;
      int v3 = 16800000;
      goto LABEL_65;
    case 10:
      char v2 = 0;
      int v3 = 19200000;
      goto LABEL_65;
    case 11:
      char v2 = 0;
      int v3 = 19680000;
      goto LABEL_65;
    case 12:
      char v2 = 0;
      int v3 = 19800000;
      goto LABEL_65;
    case 13:
      char v2 = 0;
      int v3 = 20000000;
      goto LABEL_65;
    case 14:
      char v2 = 0;
      int v3 = 26000000;
      goto LABEL_65;
    case 15:
      char v2 = 0;
      int v3 = 33600000;
      goto LABEL_65;
    case 16:
      char v2 = 0;
      int v3 = 38400000;
      goto LABEL_65;
    case 17:
      char v2 = 0;
      int v3 = 52000000;
      goto LABEL_65;
    case 18:
      int v5 = 10000000;
      goto LABEL_37;
    case 19:
      int v13 = 16367667;
      goto LABEL_49;
    case 20:
      int v13 = 16369000;
      goto LABEL_49;
    case 21:
      int v4 = 16800000;
      goto LABEL_41;
    case 22:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 16800000;
      int v5 = 13000000;
      goto LABEL_50;
    case 23:
      int v13 = 16800000;
      goto LABEL_49;
    case 24:
      int v13 = 19200000;
      goto LABEL_49;
    case 25:
      int v4 = 26000000;
LABEL_41:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
      int v5 = 10000000;
      goto LABEL_50;
    case 26:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v5 = 19660800;
      goto LABEL_50;
    case 27:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v5 = 19200000;
      goto LABEL_50;
    case 28:
      int v5 = 26000000;
LABEL_37:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v5;
      goto LABEL_50;
    case 29:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v5 = 38400000;
      goto LABEL_50;
    case 30:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v5 = 52000000;
      goto LABEL_50;
    case 31:
      int v13 = 33600000;
LABEL_49:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v13;
      int v5 = 26000000;
LABEL_50:
      *(_DWORD *)(result + 120) = v5;
      char v2 = 1;
      goto LABEL_66;
    case 32:
      int v9 = 10000000;
      goto LABEL_59;
    case 33:
      int v7 = 16367667;
      goto LABEL_54;
    case 34:
      int v6 = 16369000;
      goto LABEL_20;
    case 35:
      int v7 = 16369000;
      goto LABEL_54;
    case 36:
      int v6 = 16800000;
      goto LABEL_20;
    case 37:
      int v8 = 16800000;
      goto LABEL_57;
    case 38:
      int v7 = 16800000;
      goto LABEL_54;
    case 39:
      int v7 = 19200000;
      goto LABEL_54;
    case 40:
      int v10 = 19200000;
      goto LABEL_68;
    case 41:
      int v6 = 26000000;
LABEL_20:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
      int v9 = 10000000;
      goto LABEL_69;
    case 42:
      int v8 = 26000000;
LABEL_57:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v8;
      int v9 = 13000000;
      goto LABEL_69;
    case 43:
      int v9 = 26000000;
LABEL_59:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v9;
      goto LABEL_69;
    case 44:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v9 = 1625000;
      goto LABEL_69;
    case 45:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v9 = 23040000;
      goto LABEL_69;
    case 46:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      int v9 = 38400000;
      goto LABEL_69;
    case 47:
      int v10 = 26000000;
      goto LABEL_68;
    case 48:
      int v7 = 33600000;
LABEL_54:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
      int v9 = 26000000;
      goto LABEL_69;
    case 49:
      int v10 = 52000000;
      goto LABEL_68;
    case 50:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 10000000;
      *(_DWORD *)(result + 120) = 10000000;
      char v2 = 1;
      uint64_t v11 = 0x3EA0C6F7A0B5ED8DLL;
      break;
    case 51:
      char v2 = 0;
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 26000000;
      uint64_t v11 = 0x3E7AD7F29ABCAF48;
      uint64_t v12 = 0x3ED92A737110E454;
      goto LABEL_71;
    case 52:
      char v2 = 0;
      int v3 = 12655000;
      goto LABEL_65;
    case 53:
      char v2 = 0;
      int v3 = 18260000;
      goto LABEL_65;
    case 54:
      char v2 = 0;
      int v3 = 25310000;
      goto LABEL_65;
    case 55:
      char v2 = 0;
      int v3 = 37400000;
LABEL_65:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
LABEL_66:
      uint64_t v11 = 0x3E7AD7F29ABCAF48;
      break;
    case 56:
      int v10 = 38400000;
LABEL_68:
      *(_DWORD *)(result + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v10;
      int v9 = 49152000;
LABEL_69:
      *(_DWORD *)(result + 120) = v9;
      char v2 = 1;
      uint64_t v11 = 0x3E9421F5F40D8376;
      break;
    default:
      DeviceFaultNotify("glsettings.cpp", 931, "SetFrequencyPlan", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 931, "0");
  }
  uint64_t v12 = 0x3EC0C6F7A0B5ED8DLL;
LABEL_71:
  *(void *)(result + 112) = v12;
  *(void *)(result + 128) = v11;
  *(_DWORD *)(result + 100) = 3;
  *(unsigned char *)(result + 136) = v2;
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t BlueFin::GlDbgSettings::SetBlankingType(uint64_t a1, unsigned __int8 a2)
{
  int v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1356, "SetBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1356, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3634);
  int v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 504))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3634);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlSettingsImpl::SetBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26020) = a2;
  return result;
}

uint64_t BlueFin::GlDbgSettings::SetLogPriMask(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  int v9 = a2;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)(v3 + 808))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 433, "SetLogPriMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 433, "!m_rProxy.Normal()");
  }
  *(_DWORD *)(v3 + 596) = a2;
  *(unsigned char *)(v3 + 600) = 1;
  if ((a2 & 0x10) != 0)
  {
    if (*(unsigned char *)(v3 + 592)) {
      BOOL v5 = (*(_DWORD *)(v3 + 588) & 0x20000001) != 0;
    }
    else {
      BOOL v5 = 1;
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  BlueFin::GlDbgProxy::DetermineWritable((BlueFin::GlDbgProxy *)v3, v5);
  BlueFin::GlDbgCodec::WriteStart(*((BlueFin::GlDbgCodec **)this + 1), 3598);
  int v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v9);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 136))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3598);
  unsigned __int8 v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

#error "263A18120: call analysis failed (funcsize=81)"

uint64_t BlueFin::GlSettingsImpl::SetLogPriMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 148) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetLogFacMask(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  int v9 = a2;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)(v3 + 808))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 411, "SetLogFacMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 411, "!m_rProxy.Normal()");
  }
  *(_DWORD *)(v3 + 588) = a2;
  BOOL v5 = (!*(unsigned char *)(v3 + 600) || (*(unsigned char *)(v3 + 596) & 0x10) != 0) && (a2 & 0x20000001) != 0;
  BlueFin::GlDbgProxy::DetermineWritable((BlueFin::GlDbgProxy *)v3, v5);
  BlueFin::GlDbgCodec::SetCodecOutputMode(*((void *)this + 1), *(_DWORD *)(*((void *)this + 1) + 588) & 1);
  BlueFin::GlDbgCodec::WriteStart(*((BlueFin::GlDbgCodec **)this + 1), 3597);
  int v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v9);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 128))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3597);
  unsigned __int8 v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlSettingsImpl::SetLogFacMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetRfLoss_dB(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  uint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 683, "SetRfLoss_dB", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 683, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3607);
  BOOL v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float))(**((void **)this + 2) + 56))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3607);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlSettingsImpl::SetRfLoss_dB(uint64_t this, float a2)
{
  *(float *)(this + 40) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetEnableB1C(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  uint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1567, "SetEnableB1C", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1567, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3693);
  int v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 864))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3693);
  BOOL v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlSettingsImpl::SetEnableB1C(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26286) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetLnaMask(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v8 = a2;
  uint64_t v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 828, "SetLnaMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 828, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3642);
  BOOL v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, BOOL))(**((void **)this + 2) + 32))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3642);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlSettingsImpl::SetLnaMask(uint64_t this, char a2)
{
  *(unsigned char *)(this + 92) = a2;
  return this;
}

uint64_t BlueFin::GlDbgSettings::SetFeature(uint64_t a1, unsigned int a2, BOOL a3)
{
  unsigned int v10 = a2;
  BOOL v9 = a3;
  int v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 212, "SetFeature", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 212, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3594);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v10);
  int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v9);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, void, BOOL))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16), v10, a3);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3594);
  BOOL v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v7();
}

uint64_t BlueFin::GlSettingsImpl::SetFeature(uint64_t result, __int16 a2, int a3)
{
  uint64_t v3 = (a2 >> 5);
  *(_DWORD *)(*(void *)(result + 184) + 4 * v3) |= 1 << a2;
  if (!a3) {
    return BlueFin::GlSetBase::Remove(result + 160, a2);
  }
  *(_DWORD *)(*(void *)(result + 160) + 4 * v3) |= 1 << a2;
  return result;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, float *a2)
{
  float result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    BlueFin::GlDbgCodecBase::External(this, v5, *a2);
    return BlueFin::GlDbgCodecBase::Encode((char *)this, (char *)v5, 4, 0, 0);
  }
  return result;
}

{
  char *result;
  uint64_t vars8;

  float result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, unsigned __int8 *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  char v2 = &v7[2 * *((unsigned int *)this + 143)];
  uint64_t v3 = (uint64_t (*)(void *, unsigned __int8 *))*v2;
  uint64_t v4 = v2[1];
  BOOL v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, unsigned __int8 *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::SetCodecOutputMode(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 576);
  if (v2 && *(unsigned char *)(this + 580))
  {
    int v3 = v2 == 2 ? a2 : 1;
    char v4 = v2 == 1 ? a2 : 0;
    if ((v4 & 1) == 0 && v3)
    {
      DeviceFaultNotify("gldebug_codec.cpp", 60, "SetCodecOutputMode", (char)"!m_bCodecOutputModeLocked ||((m_eCodecOutputMode == ALL_CODECS_OUTPUT && bOutputAllCodecs || m_eCodecOutputMode == ONLY_ESSENTIAL_CODECS_OUTPUT && !bOutputAllCodecs))");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 60, "!m_bCodecOutputModeLocked ||((m_eCodecOutputMode == ALL_CODECS_OUTPUT && bOutputAllCodecs || m_eCodecOutputMode == ONLY_ESSENTIAL_CODECS_OUTPUT && !bOutputAllCodecs))");
    }
  }
  if (a2) {
    int v5 = 1;
  }
  else {
    int v5 = 2;
  }
  *(_DWORD *)(this + 576) = v5;
  return this;
}

char *BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *this, float *a2, unsigned int *a3)
{
  float result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    float result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
    if (result) {
      float result = BlueFin::GlDbgCodec::Write(this, a3);
    }
    if (*a3)
    {
      unint64_t v7 = 0;
      do
      {
        float result = BlueFin::GlDbgCodec::Write(this, a2);
        ++v7;
        ++a2;
      }
      while (v7 < *a3);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
    if (result) {
      uint64_t result = (uint64_t)BlueFin::GlDbgCodec::Write(a1, a3);
    }
    if (*a3)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
        if (result)
        {
          *((_DWORD *)a1 + 143) = 2;
          uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
        }
        ++v7;
        a2 += 8;
      }
      while (v7 < *a3);
    }
  }
  return result;
}

void FireConfig::LearnedL5GroupDelay::readFromNv(FireConfig::LearnedL5GroupDelay *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void **__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(&__p);
  if (__p == v11)
  {
    FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,not present in NV", v2, v3, v4, v5, v6, v7, v9);
  }
  else if (v11 - (unsigned char *)__p == 64)
  {
    uint64_t v8 = *((void *)__p + 2);
    *(_OWORD *)this = *(_OWORD *)__p;
    *((void *)this + 2) = v8;
  }
  else
  {
    FireDeviceLog::DeviceLogBase(2, "#nv_group_delay,unexpected NV size,%zu,expected,%zu", v2, v3, v4, v5, v6, v7, (_BYTE)v11 - (_BYTE)__p);
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 3);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_263A18FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BlueFin::GlMeSrdAsicinit::BypassLteFilter(uint64_t a1, BlueFin::GlMeSrdTransaction *a2, int a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 264))(*(void *)(a1 + 128));
  if (result)
  {
    BlueFin::GlMeSrdRfInit4777::GlMeSrdRfInit4777((BlueFin::GlMeSrdRfInit4777 *)v20, *(const BlueFin::GlMeSrdAsicConfig **)(a1 + 128));
    char v9 = *(_DWORD **)(a1 + 128);
    int v10 = v9[546];
    int v11 = v9[547];
    int v12 = v9[548];
    unsigned __int8 v19 = 0;
    int v13 = a3 ^ 1;
    if (v10 == 3) {
      int v13 = 1;
    }
    if (v10 == 5) {
      int v13 = 1;
    }
    if (v13) {
      int v14 = v10;
    }
    else {
      int v14 = 3;
    }
    uint64_t DrRegistersForModes = BlueFin::GlMeSrdRfInit4777::GetDrRegistersForModes((uint64_t)v20, v14, v11, v12, a4, &v19);
    uint64_t v16 = (*(uint64_t (**)(void *))(**((void **)a2 + 3) + 48))(*((void **)a2 + 3));
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    (*(void (**)(uint64_t, BlueFin::GlMeSrdTransaction *, void, uint64_t, void, void, void, uint64_t))(*(void *)v17 + 56))(v17, a2, v19, 1, *(unsigned int *)(*(void *)(a1 + 128) + 2184), *(unsigned int *)(*(void *)(a1 + 128) + 2188), *(unsigned int *)(*(void *)(a1 + 128) + 2192), DrRegistersForModes);
    BlueFin::GlMeSrdTransaction::Complete(a2);
    GlCustomLog(15, "L1 PerfMode: %d", v14);
    if (v14 == 5 || v14 == 3) {
      return GlCustomLog(15, " LTE Band config: %d\n");
    }
    else {
      return GlCustomLog(15, "\n");
    }
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcGcmEncImp::esw_gcm_rpc_rf_set_dr_init_minnow(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, char a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v16 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v20, v21, 1800, v16);
  BlueFin::GlStream::PutU08(v20, a3);
  BlueFin::GlStream::PutU08(v20, a5);
  BlueFin::GlStream::PutU08(v20, a6);
  BlueFin::GlStream::PutU08(v20, a7);
  BlueFin::GlStream::PutU08(v20, a4);
  BlueFin::GlStream::PutU08(v20, 0);
  BlueFin::GlStream::PutU08(v20, 0);
  BlueFin::GlStream::PutU08(v20, 0);
  for (; a3; --a3)
  {
    BlueFin::GlStream::PutU08(v20, *(unsigned char *)a8);
    BlueFin::GlStream::PutU08(v20, 0);
    BlueFin::GlStream::PutU16(v20, *(unsigned __int16 *)(a8 + 2));
    BlueFin::GlStream::PutU32(v20, *(_DWORD *)(a8 + 4));
    a8 += 8;
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v20);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 0x14u, v21, Offset);
  unsigned int v18 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v18)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 598, "esw_gcm_rpc_rf_set_dr_init_minnow", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 598, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdRfInit4777::GetDrRegistersForModes(uint64_t a1, int a2, int a3, int a4, int a5, unsigned char *a6)
{
  BOOL v7 = a2 == 5;
  *a6 = 0;
  uint64_t result = a1 + 2136;
  *(unsigned char *)(a1 + 2136) = -64;
  *(_WORD *)(result + 8 * *a6 + 2) = 128;
  uint64_t v9 = *a6;
  *a6 = v9 + 1;
  *(_DWORD *)(result + 8 * v9 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7 | 0x606000;
  if (a5 == 2) {
    int v10 = 55;
  }
  else {
    int v10 = 23;
  }
  *(unsigned char *)(result + 8 * *a6) = -64;
  *(_WORD *)(result + 8 * *a6 + 2) = 7;
  uint64_t v11 = *a6;
  *a6 = v11 + 1;
  *(_DWORD *)(result + 8 * v11 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v10;
  if (a5 == 2)
  {
    *(unsigned char *)(result + 8 * *a6) = -64;
    *(_WORD *)(result + 8 * *a6 + 2) = 131;
    uint64_t v12 = *a6;
    *a6 = v12 + 1;
    *(_DWORD *)(result + 8 * v12 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -2004043112;
    *(unsigned char *)(result + 8 * *a6) = -64;
    *(_WORD *)(result + 8 * *a6 + 2) = 132;
    uint64_t v13 = *a6;
    *a6 = v13 + 1;
    *(_DWORD *)(result + 8 * v13 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1985229619;
  }
  int v14 = a2 - 1;
  if (!a2) {
    int v14 = 0;
  }
  int v15 = 16 * a3;
  if (a3 == 4) {
    int v15 = 32;
  }
  if (a5) {
    BOOL v16 = 0;
  }
  else {
    BOOL v16 = a2 == 3;
  }
  int v17 = 2 * v14;
  if (v16) {
    int v17 = 0;
  }
  *(unsigned char *)(result + 8 * *a6) = -64;
  *(_WORD *)(result + 8 * *a6 + 2) = 17;
  uint64_t v18 = *a6;
  *a6 = v18 + 1;
  *(_DWORD *)(result + 8 * v18 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v15 | ((a2 == 5) << 8) | ((a4 == 5) << 12) | v17 | v7;
  int v19 = *(_DWORD *)(a1 + 2216);
  if ((v19 - 3) < 2)
  {
    int v20 = 2 * (a4 == 2);
    if (a4 == 5) {
      int v20 = 1;
    }
    if (*(unsigned char *)(a1 + 2240) && *(unsigned __int8 *)(a1 + 2228) - 6 < 8) {
      v20 |= 0x10u;
    }
    __int16 v21 = 279;
    goto LABEL_22;
  }
  if (v19 == 2)
  {
    if (!a4)
    {
      int v20 = 31;
      __int16 v21 = 19;
LABEL_22:
      *(unsigned char *)(a1 + 2136 + 8 * *a6) = -64;
      *(_WORD *)(a1 + 2136 + 8 * *a6 + 2) = v21;
      uint64_t v22 = *a6;
      *a6 = v22 + 1;
      *(_DWORD *)(a1 + 2136 + 8 * v22 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20;
      int v19 = *(_DWORD *)(a1 + 2216);
      goto LABEL_27;
    }
    if (a4 == 2)
    {
      uint64_t v26 = "etL5ArPerfMode != RADIO_PERF_PM";
      DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1725, "GetDrRegistersForModes", (char)"etL5ArPerfMode != RADIO_PERF_PM");
      int v27 = 1725;
LABEL_37:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v27, v26);
    }
    int v19 = 2;
  }
LABEL_27:
  if ((v19 - 3) >= 2) {
    int v23 = 26222348;
  }
  else {
    int v23 = 30154508;
  }
  uint64_t v24 = a1 + 2136;
  *(unsigned char *)(v24 + 8 * *a6) = -64;
  if (a5 == 2) {
    int v23 = 25173772;
  }
  *(_WORD *)(v24 + 8 * *a6 + 2) = 21;
  uint64_t v25 = *a6;
  *a6 = v25 + 1;
  *(_DWORD *)(v24 + 8 * v25 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v23;
  if (*a6 >= 0xBu)
  {
    uint64_t v26 = "ucNumRegs <= MAX_NUM_BYPASS_APB_COMMANDS";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1826, "GetDrRegistersForModes", (char)"ucNumRegs <= MAX_NUM_BYPASS_APB_COMMANDS");
    int v27 = 1826;
    goto LABEL_37;
  }
  return result;
}

#error "263A1A090: call analysis failed (funcsize=3188)"

BOOL BlueFin::GlReqSm::SbasAllowed(BlueFin::GlReqSm *this)
{
  uint64_t v1 = *((void *)this + 784);
  if (!*(unsigned char *)(v1 + 277)) {
    return 0;
  }
  if (*(_DWORD *)(*((void *)this + 785) + 2568) < ((**(_DWORD **)(v1 + 160) >> 11) & 1u) - 1) {
    return 0;
  }
  BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlReqSm *)((char *)this + 33432));
  if (HasAny) {
    return 0;
  }
  if (*(_WORD *)(*((void *)this + 453) + 38)) {
    return 1;
  }
  BOOL v4 = !HasAny;
  for (uint64_t i = 33; i != 52; ++i)
  {
    unsigned __int8 v12 = i;
    if ((((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 784) + 208)
                                             + 4 * (i >> 5)) >> (i - 32)) & 1) != 0)
    {
      uint64_t v7 = *((void *)this + 453);
      uint64_t v8 = *(unsigned __int16 *)(v7 + 38);
      if (v8 < *(unsigned __int8 *)(v7 + 36)
        && *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
           + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
           + i))
      {
        int v9 = *((_DWORD *)this + 13641);
        uint64_t v10 = *(void *)(v7 + 40);
        *(_WORD *)(v7 + 38) = v8 + 1;
        uint64_t v11 = v10 + 8 * v8;
        *(_WORD *)uint64_t v11 = i;
        *(_DWORD *)(v11 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v9;
      }
      BlueFin::GlPeDisabledSvs::Remove((uint64_t)this + 54352, &v12);
    }
  }
  return v4;
}

uint64_t BlueFin::GlReqSm::ReorderSigAidBasedOnSatAidElvAndLimitChannels(BlueFin::GlReqSm *this)
{
  uint64_t v2 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 789);
  BOOL v4 = (char *)this + 53562;
  uint64_t v60 = (unsigned __int8 *)this + 4940;
  memset(v78, 0, 364);
  do
  {
    uint64_t v5 = &v77[v2];
    *uint64_t v5 = 0;
    *((_DWORD *)v5 + 1) = -1;
    *((_WORD *)v5 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 575;
    v2 += 12;
  }
  while (v2 != 1092);
  uint64_t v6 = *((void *)this + 784);
  unsigned int v61 = *(unsigned __int8 *)(v6 + 272);
  int v7 = *(unsigned __int8 *)(*((void *)this + 805) + 32);
  int v8 = *(_DWORD *)(v6 + 48);
  if ((v8 - 4) >= 5 && v8 != 2)
  {
    int v62 = 0;
    goto LABEL_32;
  }
  if (*(int *)(v6 + 88) <= 38)
  {
    if (*(unsigned char *)(*((void *)this + 805) + 32)) {
      BOOL v10 = *(_DWORD *)(*((void *)this + 786) + 120012) == 1;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(*((void *)this + 790) + 184), (uint64_t)v67);
      uint64_t v63 = v65;
      char v64 = 8;
      memset(v65, 0, sizeof(v65));
      for (unsigned int i = 52; i != 66; ++i)
        *((_DWORD *)v65 + (i >> 5)) |= 1 << i;
      BlueFin::GlSvIdSet::operator~((const void **)&v63, (uint64_t)v66);
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v68, (unsigned int *)v70, 8u, v67);
      uint64_t v71 = &v73;
      char v72 = 8;
      long long v73 = 0u;
      long long v74 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v68, (int **)&v71, v66);
      BlueFin::GlSetBase::operator=((uint64_t)&v68, (uint64_t)&v71);
      unsigned int v12 = 0;
      v70[0] = v73;
      uint64_t v13 = (_DWORD *)(v68 + 4 * v69 - 4);
      v70[1] = v74;
      do
      {
        if (*v13)
        {
          unsigned int v14 = *v13 - (((*v13 >> 1) & 0x5B6DB6DB) + ((*v13 >> 2) & 0x9249249));
          unsigned int v12 = ((v14 + (v14 >> 3)) & 0xC71C71C7) + v12 - 63 * (((v14 + (v14 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v13;
      }
      while ((unint64_t)v13 >= v68);
      if (v12 >= 0xDu)
      {
        BlueFin::GlSignalIdSet::GetSignalIdSet(*((void *)this + 790) + 184, 4, 2, (uint64_t)&v75);
        if (*(_DWORD *)v75)
        {
LABEL_21:
          char v15 = 15;
LABEL_30:
          v4[1322] = v15;
          goto LABEL_31;
        }
        if (v76 > 1uLL)
        {
          if (*(_DWORD *)(v75 + 4)) {
            goto LABEL_21;
          }
          uint64_t v16 = 2;
          while (v76 != v16)
          {
            if (*(_DWORD *)(v75 + 4 * v16++))
            {
              if (v16 - 1 < (unint64_t)v76) {
                goto LABEL_21;
              }
              break;
            }
          }
        }
      }
    }
    if (v4[1322])
    {
      char v15 = v4[1322] - 1;
      goto LABEL_30;
    }
  }
LABEL_31:
  int v62 = 1;
LABEL_32:
  if (!*((unsigned char *)this + 6254)) {
    BlueFin::GlMeSignalAidInfo::operator=((uint64_t)this + 6240, (uint64_t)this + 4928);
  }
  uint64_t v75 = v3 + 9152;
  unsigned __int8 v76 = *(unsigned char *)(v3 + 9191) + 1;
  if (*(unsigned __int8 *)(v3 + 9190) <= v76)
  {
    if (!v7) {
      return BlueFin::GlMeSignalAidInfo::operator=((uint64_t)this + 4928, (uint64_t)this + 6240);
    }
    unsigned __int8 v19 = 0;
    goto LABEL_58;
  }
  unsigned __int8 v18 = 0;
  unsigned __int8 v19 = 0;
  uint64_t v20 = v3 + 32;
  do
  {
    unsigned __int8 v21 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v75);
    LOBYTE(v71) = v21;
    AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v20, (unsigned __int8 *)&v71);
    if (AidBySvId)
    {
      uint64_t v23 = *((unsigned __int16 *)this + 3127);
      if (*((_WORD *)this + 3127))
      {
        uint64_t v24 = (unsigned __int16 *)*((void *)this + 782);
        while (1)
        {
          int v25 = *v24;
          v24 += 4;
          if (v25 == v21) {
            break;
          }
          if (!--v23) {
            goto LABEL_52;
          }
        }
        if (!v7 || *((__int16 *)AidBySvId + 37) >= 3 && *((_DWORD *)AidBySvId + 3) != 4)
        {
          if ((v21 + 67) >= 0x44u)
          {
            uint64_t v28 = BlueFin::GlSvId::s_aucSvId2gnss[v21];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v28] == 255)
            {
              __int16 v27 = 575;
              int v26 = -1;
            }
            else
            {
              int v26 = 0;
              __int16 v27 = BlueFin::GlSignalId::s_ausGnss2signalId[v28]
                  + v21
                  - BlueFin::GlSvId::s_aucGnss2minSvId[v28];
            }
          }
          else
          {
            int v26 = 0;
            __int16 v27 = 575;
          }
          uint64_t v29 = &v77[12 * v19];
          *uint64_t v29 = v21;
          *((_DWORD *)v29 + 1) = v26;
          *((_WORD *)v29 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v27;
          *((float *)v78 + v19++) = (float)-*((__int16 *)AidBySvId + 37);
          if (*((_DWORD *)AidBySvId + 3) != 4) {
            ++v18;
          }
        }
      }
    }
LABEL_52:
    ;
  }
  while (v76 < *(unsigned __int8 *)(v75 + 38));
  if (!v7)
  {
LABEL_59:
    if (v19 >= 0x12u && *(_DWORD *)(*((void *)this + 788) + 92336) >= 0x1Fu) {
      goto LABEL_61;
    }
    return BlueFin::GlMeSignalAidInfo::operator=((uint64_t)this + 4928, (uint64_t)this + 6240);
  }
  if (v18 <= 0xBu)
  {
LABEL_58:
    if (*(unsigned char *)(*((void *)this + 784) + 26313)) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }
LABEL_61:
  GlCustomLog(14, "SigAid sorted(%d), (%d) (%d) (%d) ", v19, *((unsigned __int16 *)this + 3127), 18, v61);
  GlCustomLog(14, "Blind disabled  ");
  v4[990] = *v4 ^ 1;
  *((_WORD *)this + 2471) = 0;
  BlueFin::GlSortFloats((uint64_t)v78, (const float *)v19, &v75, v30);
  uint64_t v31 = *((void *)this + 788);
  if (*(unsigned char *)(v31 + 92073) || (*(unsigned int (**)(void))(*(void *)(v31 + 27744) + 72))() >= 0x1389) {
    float v32 = 3.0;
  }
  else {
    float v32 = 45.0;
  }
  if (!v19) {
    return GlCustomLog(14, "%c (%d)\n", 70, 0);
  }
  unsigned int v33 = 0;
  uint64_t v34 = v19;
  uint64_t v35 = (unsigned __int8 *)&v75;
  uint64_t v36 = v19;
  while (1)
  {
    unsigned int v37 = *v35++;
    float v38 = *((float *)v78 + v37);
    LOBYTE(v71) = v77[12 * v37];
    uint64_t v39 = v71;
    unsigned int v40 = v71 - 52;
    if (!*v4 && v71 - 1 >= 0x20 && v40 > 0xD) {
      goto LABEL_88;
    }
    if (v71 - 76 > 0x3E
      || ((1 << (v71 - 76)) & 0x7C0000000000001FLL) == 0)
    {
      if (v71 - 33 < 0x13 || v40 <= 0xD && v4[1322] && v32 > (float)-v38) {
        goto LABEL_88;
      }
    }
    else
    {
      uint64_t v43 = *((void *)this + 784);
      if (!*(unsigned char *)(v43 + 26333) || *(unsigned char *)(v43 + 26286) && *(int *)(v43 + 88) >= 37) {
        goto LABEL_88;
      }
    }
    if (((v33 < 0x24) & ~v62) == 0 && v38 > -3.0) {
      return GlCustomLog(14, "%c (%d)\n", 84, v33);
    }
    GlCustomLog(14, "%d ", v71);
    uint64_t v44 = *((unsigned __int16 *)this + 2471);
    if (v44 < *v60
      && *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
         + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
         + v39))
    {
      uint64_t v45 = *((void *)this + 618);
      *((_WORD *)this + 2471) = v44 + 1;
      uint64_t v46 = v45 + 8 * v44;
      *(_WORD *)uint64_t v46 = v39;
      *(_DWORD *)(v46 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 14;
    }
    unsigned int v47 = v33 + 1;
    if (v62 && BlueFin::GlSettingsImpl::DoesSvSupportBand5(*((void *)this + 784), (unsigned __int8 *)&v71)) {
      unsigned int v47 = v33 + 2;
    }
    if (v47 >= v61) {
      return GlCustomLog(14, "%c (%d)\n", 84, v47);
    }
    unsigned int v33 = v47;
LABEL_88:
    if (!--v36)
    {
      uint64_t result = GlCustomLog(14, "%c (%d)\n", 70, v33);
      uint64_t v49 = 0;
      unsigned int v50 = *((unsigned __int16 *)this + 2471);
      char v59 = (char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
          + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
      while (1)
      {
        uint64_t v51 = v77[12 * *((unsigned __int8 *)&v75 + v49)];
        if (v50)
        {
          uint64_t v52 = (unsigned __int16 *)*((void *)this + 618);
          uint64_t v53 = v50;
          while (1)
          {
            int v54 = *v52;
            v52 += 4;
            if (v54 == v51) {
              break;
            }
            if (!--v53) {
              goto LABEL_100;
            }
          }
        }
        else
        {
LABEL_100:
          BOOL v55 = (v51 - 76) > 0x3E || ((1 << (v51 - 76)) & 0x7C0000000000001FLL) == 0;
          if (v55
            || (uint64_t v56 = *((void *)this + 784), *(unsigned char *)(v56 + 26333))
            && (!*(unsigned char *)(v56 + 26286) || *(int *)(v56 + 88) < 37)
            && v33 <= 0x23)
          {
            LOBYTE(v71) = v77[12 * *((unsigned __int8 *)&v75 + v49)];
            if (v50 < *v60 && v59[v51])
            {
              uint64_t v57 = *((void *)this + 618) + 8 * v50++;
              *((_WORD *)this + 2471) = v50;
              *(_WORD *)uint64_t v57 = v51;
              *(_DWORD *)(v57 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 14;
            }
            unsigned int v58 = v33 + 1;
            if (v62)
            {
              uint64_t result = BlueFin::GlSettingsImpl::DoesSvSupportBand5(*((void *)this + 784), (unsigned __int8 *)&v71);
              if (result) {
                unsigned int v58 = v33 + 2;
              }
            }
            unsigned int v33 = v58;
            if (v58 >= v61) {
              return result;
            }
          }
        }
        if (++v49 == v34) {
          return result;
        }
      }
    }
  }
}

uint64_t BlueFin::GlMeSignalAidInfo::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v2 = *(unsigned __int16 *)(a2 + 14);
  if (v2 > *(unsigned __int8 *)(result + 12))
  {
    DeviceFaultNotify("glmepeif_types.cpp", 100, "operator=", (char)"m_ucMaxSignals >= otSrc.number_of_signals");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 100, "m_ucMaxSignals >= otSrc.number_of_signals");
  }
  *(_WORD *)(result + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  if (v2)
  {
    uint64_t v3 = (_DWORD *)(*(void *)(result + 16) + 4);
    BOOL v4 = (_DWORD *)(*(void *)(a2 + 16) + 4);
    do
    {
      *((_WORD *)v3 - 2) = *((_WORD *)v4 - 2);
      int v5 = *v4;
      v4 += 2;
      *uint64_t v3 = v5;
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t BlueFin::GlReqSm::UpdateMPF(uint64_t this)
{
  uint64_t v1 = *(unsigned __int8 *)(this + 4942);
  if (*(unsigned char *)(this + 4942))
  {
    uint64_t v2 = *(_DWORD **)(*(void *)(this + 6272) + 160);
    uint64_t v3 = (unsigned int *)(*(void *)(this + 4944) + 4);
    do
    {
      *uint64_t v3 = *v3 & 0xFFFFFF7F | (((*v2 >> 12) & 1) << 7);
      v3 += 2;
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t BlueFin::GlReqSm::AddSignalTypeFlag(BlueFin::GlReqSm *this, BlueFin::GlMeSignalAidInfo *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 784);
  long long v5 = *(_OWORD *)(v4 + 1024);
  v63[0] = *(_OWORD *)(v4 + 1008);
  v63[1] = v5;
  unsigned int v6 = *(_DWORD *)(v4 + 48);
  BOOL v8 = v6 == 8 || (v6 & 0xFFFFFFFD) == 5;
  if (*(int *)(v4 + 88) < 39)
  {
    BOOL v9 = 0;
  }
  else
  {
    BOOL v9 = BlueFin::GlPeTimeManager::TimeKnown(*((void *)this + 785), 0, 1u);
    uint64_t v4 = *((void *)this + 784);
  }
  int v10 = *(unsigned __int8 *)(v4 + 26286);
  if (*(unsigned char *)(v4 + 26286)) {
    int v10 = *(_DWORD *)(v4 + 88) > 36;
  }
  int v11 = *(unsigned __int8 *)(v4 + 26287);
  if (*(unsigned char *)(v4 + 26287)) {
    int v11 = *(_DWORD *)(v4 + 88) > 37;
  }
  int v12 = **(_DWORD **)(v4 + 26224);
  int v13 = *(_DWORD *)(v4 + 26292);
  unsigned int v14 = *(_DWORD *)(*((void *)this + 788) + 92336);
  if ((v12 & 0x800) != 0 && v13 == 1)
  {
    BOOL v15 = 0;
    LOBYTE(v16) = 0;
  }
  else
  {
    unsigned int v16 = (v6 < 9) & (0x1F4u >> v6);
    BOOL v17 = v14 >= 0x1F;
    BOOL v18 = v14 < 0x1F && v8;
    BOOL v19 = !v17 && v9;
    if (v17) {
      int v20 = 0;
    }
    else {
      int v20 = v10;
    }
    if (v17) {
      int v21 = 0;
    }
    else {
      int v21 = v11;
    }
    int v22 = !v17;
    BOOL v23 = v13 == 2;
    if (v13 == 2) {
      BOOL v24 = v18;
    }
    else {
      BOOL v24 = v8;
    }
    if (v23) {
      BOOL v25 = v19;
    }
    else {
      BOOL v25 = v9;
    }
    if (v23) {
      int v26 = v20;
    }
    else {
      int v26 = v10;
    }
    if (v23) {
      int v27 = v21;
    }
    else {
      int v27 = v11;
    }
    if (!v23) {
      int v22 = 1;
    }
    BOOL v28 = (v12 & 0x800) == 0;
    if ((v12 & 0x800) != 0) {
      BOOL v15 = v24;
    }
    else {
      BOOL v15 = v8;
    }
    if (v28)
    {
      int v13 = 1;
    }
    else
    {
      BOOL v9 = v25;
      int v10 = v26;
      int v11 = v27;
      int v13 = v22;
    }
  }
  unsigned int v61 = this;
  int v29 = *((_DWORD *)this + 13722);
  if (v29 == 1)
  {
    BOOL v15 = 0;
    char v30 = 0;
  }
  else
  {
    char v30 = v16;
  }
  BOOL v31 = v29 != 2 && v15;
  BOOL v32 = v29 != 2 && v9;
  if (v29 == 2) {
    int v10 = 0;
  }
  int v58 = v10;
  if (v29 == 2) {
    int v33 = 0;
  }
  else {
    int v33 = v11;
  }
  if (v29 == 2) {
    int v34 = 0;
  }
  else {
    int v34 = v13;
  }
  if (*((unsigned char *)a2 + 14))
  {
    unint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v57 = *((void *)v61 + 789) + 32;
    BOOL v60 = v32 & v33;
    uint64_t v37 = 4;
    float v38 = BlueFin::GlSvId::s_aucSvId2gnss;
    char v59 = v30;
    do
    {
      uint64_t v39 = *((void *)a2 + 2);
      uint64_t v40 = *(unsigned __int16 *)(v39 + v37 - 4);
      unsigned __int8 v62 = *(_WORD *)(v39 + v37 - 4);
      int v41 = v38[v40];
      if (v41 == 4) {
        int v42 = 0;
      }
      else {
        int v42 = v34;
      }
      if (v42 == 1) {
        *(_DWORD *)(v39 + v37) |= 0x100u;
      }
      switch(v41)
      {
        case 0:
          int v43 = *((unsigned __int8 *)v63 + v40 - 1);
          if (v43 != 2)
          {
            if (v43 != 4)
            {
              if (v43 != 3) {
                goto LABEL_81;
              }
              unsigned int v44 = *(_DWORD *)(v39 + v37) | 0x400;
              goto LABEL_95;
            }
            *(_DWORD *)(v39 + v37) |= 0x400u;
            if (v60) {
              goto LABEL_98;
            }
          }
          break;
        case 3:
          int v45 = *(_DWORD *)(v39 + v37) | 0x400;
          *(_DWORD *)(v39 + v37) = v45;
          if (!v60)
          {
            unsigned int v44 = v45 & 0xFEFFFFFF;
            goto LABEL_95;
          }
LABEL_98:
          AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v57, &v62);
          if (AidBySvId
            && (*((_DWORD *)AidBySvId + 3) | 2) == 3
            && (AidBySvId[24] & 8) != 0
            && BlueFin::GlPeAsstMgr::EphBeExpirationS(*((void *)v61 + 786), (int *)AidBySvId + 1, 1) >= 0x2D1)
          {
            *(_DWORD *)(*((void *)a2 + 2) + v37) = *(_DWORD *)(*((void *)a2 + 2) + v37) & 0xFEFFFEFF | 0x1000000;
          }
          break;
        case 4:
          BOOL v46 = v32;
          BOOL v47 = v31;
          uint64_t v48 = v38;
          uint64_t v49 = v36;
          if (((v58 | v34 ^ 1) & 1) == 0) {
            *(_DWORD *)(v39 + v37) |= 0x100000u;
          }
          uint64_t v50 = *((void *)v61 + 784);
          if (BlueFin::GlSettingsImpl::DoesSvSupportBand5(v50, &v62))
          {
            int v51 = *(_DWORD *)(v50 + 88);
            uint64_t v36 = v49;
            BOOL v52 = v49 >= 0xA && v51 <= 38;
            int v53 = v58;
            if (v52) {
              int v53 = 0;
            }
            if (v53 == 1)
            {
              uint64_t v36 = (v49 + 1);
              unsigned int v54 = *(_DWORD *)(v39 + v37) & 0xFFFEFAFF | 0x10400;
            }
            else
            {
              unsigned int v54 = *(_DWORD *)(v39 + v37) & 0xFFFEFBFF | 0x400;
            }
            *(_DWORD *)(v39 + v37) = v54;
          }
          else
          {
            *(_DWORD *)(v39 + v37) &= 0xFFFEFBFF;
            uint64_t v36 = v49;
          }
          float v38 = v48;
          BOOL v31 = v47;
          BOOL v32 = v46;
          char v30 = v59;
          break;
        case 5:
          unsigned int v44 = *(_DWORD *)(v39 + v37) | 0x600;
          goto LABEL_95;
        default:
LABEL_81:
          unsigned int v44 = *(_DWORD *)(v39 + v37) & 0xFEFFF9FF;
LABEL_95:
          *(_DWORD *)(v39 + v37) = v44;
          break;
      }
      if (v31)
      {
        if ((v30 & 1) == 0) {
          goto LABEL_113;
        }
      }
      else
      {
        *(_DWORD *)(*((void *)a2 + 2) + v37) &= ~0x200u;
        if ((v30 & 1) == 0)
        {
LABEL_113:
          *(_DWORD *)(*((void *)a2 + 2) + v37) &= ~0x400u;
          if (v32) {
            goto LABEL_110;
          }
LABEL_109:
          *(_DWORD *)(*((void *)a2 + 2) + v37) &= ~0x1000000u;
          goto LABEL_110;
        }
      }
      if (!v32) {
        goto LABEL_109;
      }
LABEL_110:
      ++v35;
      v37 += 8;
    }
    while (v35 < *((unsigned __int8 *)a2 + 14));
  }
  if ((v30 & 1) == 0) {
    BlueFin::GlMeSignalAidInfo::RemoveConstellation((uint64_t)a2, 6u);
  }

  return BlueFin::GlMeSignalAidInfo::RemoveAllNullSignals((uint64_t)a2);
}

uint64_t BlueFin::GlMeSignalAidInfo::RemoveAllNullSignals(uint64_t this)
{
  unsigned __int16 v1 = *(_WORD *)(this + 14);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned __int16 v3 = 0;
    do
    {
      if ((*(_DWORD *)(*(void *)(v2 + 16) + 8 * v3 + 4) & 0x1110700) != 0)
      {
        ++v3;
      }
      else
      {
        this = BlueFin::GlMeSignalAidInfo::RemoveSignalByArrayIdx(v2, v3);
        unsigned __int16 v1 = *(_WORD *)(v2 + 14);
      }
    }
    while (v3 < v1);
  }
  return this;
}

uint64_t BlueFin::GlDbgMeIf::SetPowerState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 360))();
}

uint64_t BlueFin::GlMeSrdCtrlSm::SetPowerState(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 219))
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 294, "SetPowerState", (char)"m_bAsicInitDone");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 294, "m_bAsicInitDone");
  }
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 5576) && *(_DWORD *)(result + 5440) != a2)
  {
    *(_DWORD *)(result + 5440) = a2;
    if (*(unsigned char *)(result + 34512))
    {
      uint64_t v4 = 2;
      if (a2 == 1) {
        uint64_t v4 = 4;
      }
      uint64_t v5 = *(unsigned __int16 *)(result + 34512 + v4);
      (*(void (**)(void, uint64_t))(**(void **)(result + 184) + 48))(*(void *)(result + 184), v5);
      BlueFin::GlMeSrdMeasTimingMgr::SetReportingInterval((BlueFin::GlMeSrdMeasTimingMgr *)(v2 + 3072), v5);
    }
    return BlueFin::GlMeSrdMeasTimingMgr::SetPowerSaveEnabled((BlueFin::GlMeSrdMeasTimingMgr *)(v2 + 3072), a2 == 1);
  }
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetPowerState(uint64_t a1, int a2)
{
  uint64_t v4 = "UNKNOWN";
  if (a2 == 1) {
    uint64_t v4 = "GLMEIF_PWR_SAVE";
  }
  if (!a2) {
    uint64_t v4 = "GLMEIF_PWR_FULL";
  }
  GlCustomLog(14, "GlDineCtrl::SetPowerState(%s)\n", v4);

  return BlueFin::GlMeSrdCtrlSm::SetPowerState(a1 + 75168, a2);
}

double BlueFin::GlSignalIdSet::operator&(uint64_t a1, const void **a2, int **a3)
{
  uint64_t v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a1, (unsigned int *)(a1 + 12), 0x13u, a2);
  int v7 = &v9;
  char v8 = 19;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v5, (int **)&v7, a3);
  BlueFin::GlSetBase::operator=(a1, (uint64_t)&v7);
  *(_OWORD *)(a1 + 28) = v10;
  *(_OWORD *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v11;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v12[12];
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 12) = v9;
  return result;
}

double BlueFin::GlPeSvHealthMgr::GetSvHealthStatusChanged(const void **this, BlueFin::GlSvIdSet *a2, BlueFin::GlSvIdSet *a3)
{
  uint64_t v5 = (int **)this;
  unsigned int v6 = this + 368;
  BlueFin::GlSvIdSet::operator~(this + 368, (uint64_t)v8);
  v5 += 380;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v9, (unsigned int *)&v10, 8u, v8);
  int v12 = &v14;
  char v13 = 8;
  long long v14 = 0u;
  long long v15 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v9, (int **)&v12, v5);
  BlueFin::GlSetBase::operator=((uint64_t)v9, (uint64_t)&v12);
  long long v10 = v14;
  *(_OWORD *)long long v11 = v15;
  BlueFin::GlSetBase::operator=((uint64_t)a3, (uint64_t)v9);
  *(_OWORD *)((char *)a3 + 12) = v10;
  *(_OWORD *)((char *)a3 + 28) = *(_OWORD *)v11;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v9, (unsigned int *)&v10, 8u, v6);
  int v12 = &v14;
  char v13 = 8;
  long long v14 = 0u;
  long long v15 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v9, (int **)&v12, v5);
  BlueFin::GlSetBase::operator=((uint64_t)v9, (uint64_t)&v12);
  long long v10 = v14;
  *(_OWORD *)long long v11 = v15;
  BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)v9);
  *(_OWORD *)((char *)a2 + 12) = v10;
  double result = v11[0];
  *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)v11;
  return result;
}

unsigned __int8 *BlueFin::GlReqSm::GlonassNewQuarterSigAidResetLogic(BlueFin::GlReqSm *this, BlueFin::GlSignalIdSet *a2)
{
  BOOL v17 = &v19;
  char v18 = 8;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v4 = (unsigned char *)(*((void *)this + 786) + 120018);
  if (*v4)
  {
    *uint64_t v4 = 0;
    long long v9 = &v11;
    LOBYTE(v10) = 8;
    long long v11 = xmmword_263BAA87C;
    long long v12 = unk_263BAA88C;
    BlueFin::GlSetBase::operator=((uint64_t)&v17, (uint64_t)&v9);
    long long v19 = v11;
    long long v20 = v12;
  }
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(*((void *)this + 790) + 96), (uint64_t)v16);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v15, 8u, (const void **)&v17);
  long long v9 = &v11;
  LOBYTE(v10) = 8;
  long long v11 = 0u;
  long long v12 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v9, v16);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v9);
  v15[0] = v11;
  v15[1] = v12;
  LOBYTE(v9) = v14;
  memcpy(&v10, __src, 4 * v14);
  WORD1(v9) = 0;
  BYTE1(v9) = 0;
  HIDWORD(v9) = v10;
  double result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v9);
  if (BYTE1(v9) != v9)
  {
    uint64_t v6 = *(void *)a2;
    do
    {
      if ((BYTE2(v9) + 67) < 0x44u
        || (uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v9)],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v7] == 255))
      {
        __int16 v8 = 575;
      }
      else
      {
        __int16 v8 = BlueFin::GlSignalId::s_ausGnss2signalId[v7]
           + BYTE2(v9)
           - BlueFin::GlSvId::s_aucGnss2minSvId[v7];
      }
      *(_DWORD *)(v6 + 4 * (v8 >> 5)) |= 1 << v8;
      double result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v9);
    }
    while (BYTE1(v9) != v9);
  }
  return result;
}

uint64_t BlueFin::GlReqSm::AddFlagToSignalAiding(uint64_t this, int a2, BlueFin::GlSvIdSet *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(this + 4942);
  if (*(unsigned char *)(this + 4942))
  {
    uint64_t v4 = (int *)(*(void *)(this + 4944) + 4);
    do
    {
      __int16 v5 = *((_WORD *)v4 - 2);
      if ((_BYTE)v5)
      {
        if (((unint64_t)*(unsigned int *)((char *)a3 + (((unint64_t)v5 >> 3) & 0x1C)) >> (v5 & 0x1F))) {
          int v6 = *v4 | a2;
        }
        else {
          int v6 = *v4 & ~a2;
        }
        *uint64_t v4 = v6;
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return this;
}

void BlueFin::GlMeSrdAcqMgrSm::LimitOneTrackPerSv(BlueFin::GlMeSrdAcqMgrSm *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(BlueFin::GlMeSrdAcqMgrSm *))(*(void *)this + 80))(this);
  uint64_t v6 = 0;
  v7[0] = 0;
  *(_DWORD *)((char *)v7 + 7) = 0;
  v7[2] = v3;
  int v8 = 0;
  __int16 v9 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v3 + 16))(v3, 0);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 136))(v5, &v6, a2);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v6);
}

void sub_263A1E1E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_tm_set_single_svid(BlueFin::CarpEswRpcJdEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 >= 2)
  {
    __int16 v9 = "control < 2";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 885, "esw_jd_rpc_tm_set_single_svid", (char)"control < 2");
    int v10 = 885;
    goto LABEL_6;
  }
  char v3 = a3;
  uint64_t v4 = (unsigned __int16 *)a2;
  char v6 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, v3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 4, 0xCu, v12, Offset);
  LODWORD(vbzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v4)
  {
    __int16 v9 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 894, "esw_jd_rpc_tm_set_single_svid", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v10 = 894;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v10, v9);
  }
  return result;
}

void BlueFin::GlPeRqHdlr::~GlPeRqHdlr(BlueFin::GlPeRqHdlr *this)
{
  *(void *)this = &unk_270EC4BF0;
  BlueFin::GlRequestBase::Destroy(*((void *)this + 1));
}

{
  uint64_t vars8;

  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlRequestBase::Destroy(uint64_t a1)
{
  uint64_t v2 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t (*)(BlueFin::GlDbgMemory *, void *)))(*(void *)a1 + 128))(a1, BlueFin::GlDbgMemory::Deallocate);
  if (*((void *)v2 + 1)) {
    *(void *)(*((void *)v2 + 1) + 8 * BlueFin::GlDbgRequest::Id(v2, 0) + 5928) = 0;
  }
  char v3 = *(uint64_t (**)(BlueFin::GlDbgRequest *))(BlueFin::GlDbgMemory::m_pInstance + 8);

  return v3(v2);
}

uint64_t BlueFin::GlRequestImpl::Destroy(uint64_t this, uint64_t (*a2)(uint64_t))
{
  if (a2) {
    return a2(this);
  }
  return this;
}

void BlueFin::GlMeWinMgr::SetOscOffsAiding(BlueFin::GlMeWinMgr *this, uint64_t a2, float a3, float a4, int a5)
{
  double v10 = a3;
  double v11 = a4;
  uint64_t v40 = &unk_270EBF370;
  int v41 = a2;
  double v42 = a3;
  double v43 = a4;
  char v44 = a5;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    off_270EBF388((uint64_t)&v40, 0);
  }
  double v12 = fabsf(a3);
  if (v12 >= 0.0000069000001)
  {
    GlCustomLog(14, "GlMeWinMgr::SetOscOffsAiding(%u, %.1f) - Rejected!  Oscillator offset out of range. \n", a2, v10 * 1000000000.0);
    return;
  }
  double v28 = 0.0;
  int v29 = &unk_270EBF258;
  uint64_t v34 = 0;
  int v35 = 2139095039;
  uint64_t v36 = 0;
  int v37 = 2139095039;
  uint64_t v38 = 0;
  uint64_t v39 = 0x36A7C5AC7F7FFFFFLL;
  float v32 = a3;
  float v33 = a4;
  int v30 = 16;
  int v31 = a2;
  double v27 = 0.0;
  BlueFin::GlMeMiniKF::mskfGetCbDot((BlueFin::GlMeWinMgr *)((char *)this + 9312), a2, &v28, &v27, v12, 0.0000069000001);
  v19[0] = &unk_270EBF258;
  v19[1] = 0;
  uint64_t v20 = 0x36A7C5AC00000000;
  uint64_t v21 = 0;
  int v22 = 2139095039;
  uint64_t v23 = 0;
  int v24 = 2139095039;
  uint64_t v25 = 0;
  uint64_t v26 = 0x36A7C5AC7F7FFFFFLL;
  BlueFin::GlMeClkModMgr::GetClkMod((BlueFin::GlMeWinMgr *)((char *)this + 144), (BlueFin::GlMeClkMod *)v19, a2);
  int v13 = 0;
  double v14 = v27;
  if (*((_DWORD *)this + 62) == -1 && v27 <= v11) {
    int v13 = *((unsigned __int8 *)this + 9864) >> 7;
  }
  if (a4 <= 0.000000025 || v27 >= v11)
  {
    double v15 = v28;
LABEL_19:
    BlueFin::GlMeClkModMgr::SetClkModFromPe((BlueFin::GlMeWinMgr *)((char *)this + 144), a2, (BlueFin::GlMeClkMod *)&v29);
    v17.n128_f64[0] = v14 - v11;
    if (v14 - v11 > 0.000001 || v15 == 0.0 || a5)
    {
      v17.n128_f64[0] = (float)(a4 * a4);
      *((double *)this + 1167) = v10;
      *((void *)this + 1169) = v17.n128_u64[0];
      *((_DWORD *)this + 234bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
      *((unsigned char *)this + 9380) = 0;
      if (a5) {
        GlCustomLog(14, "SetOscOffsAiding(%u,%lf,%lf) forced by PE.\n", a2, (float)(a3 * 1000000000.0), (float)(a4 * 1000000000.0));
      }
    }
    if (v13)
    {
      int v45 = 0;
      uint64_t v18 = *((void *)this + 35);
      if (v18) {
        (*(void (**)(uint64_t, uint64_t, int *, __n128))(*(void *)v18 + 16))(v18, 2, &v45, v17);
      }
    }
    return;
  }
  double v15 = v28;
  if (v27 >= 0.0000000159999995 && *((float *)&v20 + 1) > a4) {
    goto LABEL_19;
  }
  BOOL v16 = a3 != 0.0;
  if (v28 != 0.0) {
    BOOL v16 = 0;
  }
  if (((v16 | v13) & 1) != 0 || a5) {
    goto LABEL_19;
  }
}

BOOL BlueFin::GlMeMiniKF::mskfGetCbDot(BlueFin::GlMeMiniKF *this, unsigned int a2, double *a3, double *a4, double a5, double a6)
{
  if (*((unsigned char *)this + 68))
  {
    uint64_t v7 = 0;
    *a3 = *((double *)this + 3);
    float v8 = *((double *)this + 5);
    *a4 = sqrtf(v8);
  }
  else
  {
    LODWORD(a6) = *((_DWORD *)this + 16);
    double v9 = ((double)a2 - (double)*(unint64_t *)&a6) / 1000.0;
    *a3 = *((double *)this + 3);
    float v10 = *((double *)this + 5);
    double v11 = sqrtf(v10);
    double v12 = v11 + fabs(v9) * 0.000000001;
    if (v9 <= 0.0) {
      double v13 = v11;
    }
    else {
      double v13 = v12;
    }
    *a4 = v13;
    double v14 = (*(double (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1)) + -0.000000002;
    double v15 = *a4;
    if (*a4 > v14)
    {
      *a4 = v14;
      double v15 = v14;
    }
    return v15 < 0.000005;
  }
  return v7;
}

double BlueFin::GlMeClkModMgr::GetCurrOscOffUncCap(BlueFin::GlMeClkModMgr *this)
{
  return *((float *)this + 23);
}

#error "263A1E900: call analysis failed (funcsize=46)"

unsigned __int8 *BlueFin::GlMeSrdStats::SetHeartbeatMs(int32x2_t *this, __int32 a2)
{
  this[1].i32[0] = a2;
  uint64_t v3 = (*(uint64_t (**)(int32x2_t))(**(void **)this + 72))(*this);
  long long v4 = *(_OWORD *)(v3 + 44);
  long long v5 = *(_OWORD *)(v3 + 28);
  this[10].i32[0] = *(_DWORD *)(v3 + 60);
  *(_OWORD *)this[6].i8 = v5;
  *(_OWORD *)this[8].i8 = v4;
  int v6 = *(_DWORD *)(v3 + 4);
  int v7 = this[114].i32[0] + *(_DWORD *)v3;
  int v8 = *(_DWORD *)(v3 + 8);
  this[2].i32[1] = this[114].i32[1] + *(_DWORD *)(v3 + 12);
  __int32 v9 = this[115].i32[0] + v8;
  this[5].i32[0] = this[113].i32[0] + v6;
  this[5].i32[1] = v7;
  int v10 = this[113].i32[1] + *(_DWORD *)(v3 + 16);
  this[1].i32[1] = v9;
  this[2].i32[0] = v10;
  this[4] = vrev64_s32(*(int32x2_t *)(v3 + 20));

  return BlueFin::GlIQSnrStatsMgr::UpdateSnrStats((unsigned __int8 *)&this[196], (uint64_t)&this[101] + 4);
}

uint64_t BlueFin::GlMeSrdTransactionManager::GetPacketStats(BlueFin::GlMeSrdTransactionManager *this)
{
  return (uint64_t)this + 6620;
}

void BlueFin::GlMeSrdAcqMgrSm::UpdateSvidToSearchForMgrs(BlueFin::GlMeSrdAcqMgrSm *this)
{
  uint64_t v3 = (char *)this + 24568;
  long long v250 = (char *)this + 21604;
  BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)&__src);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v316, (unsigned int *)v318, 8u, (const void **)&__src);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v316, (int **)v319, (int **)this + 2847);
  BlueFin::GlSetBase::operator=((uint64_t)&v316, (uint64_t)v319);
  v318[0] = v321;
  v318[1] = v322;
  long long v247 = v3;
  if ((*((_DWORD *)v3 + 1) & 0x22) != 0) {
    int v4 = 110;
  }
  else {
    int v4 = 126;
  }
  v313 = (int *)v315;
  char v314 = 8;
  v315[0] = xmmword_263BAA85C;
  v315[1] = *(_OWORD *)algn_263BAA86C;
  v310 = (int *)v312;
  char v311 = 8;
  v312[0] = xmmword_263BAA87C;
  v312[1] = unk_263BAA88C;
  v307 = (int *)v309;
  char v308 = 8;
  v309[0] = xmmword_263BAA8BC;
  v309[1] = unk_263BAA8CC;
  v304 = (int *)v306;
  char v305 = 8;
  v303[0] = xmmword_263BAA8DC;
  v303[1] = unk_263BAA8EC;
  v300[0] = xmmword_263BAA8FC;
  v306[0] = BlueFin::GlSvIdSet::csm_aulBeidouGeoSvIds;
  v306[1] = unk_263BAA92C;
  v301 = (int *)v303;
  char v302 = 8;
  v298 = (int *)v300;
  char v299 = 8;
  v300[1] = unk_263BAA90C;
  uint64_t v5 = *((void *)this + 5);
  int v295 = v4;
  (*(void (**)(long long **__return_ptr))(*(void *)v5 + 72))(&v345);
  int v6 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v6, (int **)v319, (int **)this + 2847);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v341);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v341);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)&v337);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v296, (unsigned int *)v297, 8u, (const void **)&__src);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v296, (int **)v319, (int **)&v337);
  BlueFin::GlSetBase::operator=((uint64_t)&v296, (uint64_t)v319);
  v297[0] = v321;
  v297[1] = v322;
  int v7 = (const void **)(*(uint64_t (**)(void))(**((void **)this + 5) + 64))(*((void *)this + 5));
  int v8 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, v7);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v8, (int **)v319, (int **)this + 2847);
  BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
  long long v347 = v321;
  long long v348 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v341);
  __int32 v9 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v9, (int **)v319, (int **)&v341);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  BlueFin::GlSvIdSet::operator~(&v296, (uint64_t)&v337);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v337);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)&v334);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v291, (unsigned int *)&v293, 8u, (const void **)&__src);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v291, (int **)v319, (int **)&v334);
  BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)v319);
  long long v293 = v321;
  long long v294 = v322;
  int v244 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 13864);
  int v10 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)this + 1733);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v10, (int **)v319, (int **)this + 2847);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v345);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v345);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)&v341);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v287, (unsigned int *)&v289, 8u, (const void **)&__src);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v287, (int **)v319, (int **)&v341);
  BlueFin::GlSetBase::operator=((uint64_t)&v287, (uint64_t)v319);
  long long v289 = v321;
  long long v290 = v322;
  BlueFin::GlSvIdSet::operator~(&v296, (uint64_t)&v345);
  BlueFin::GlSvIdSet::operator~((const void **)&v291, (uint64_t)&v341);
  double v11 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v11, (int **)v319, (int **)&v341);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v337);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v337);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v284, (unsigned int *)&v285, 8u, (const void **)&__src);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  __dst = (int **)((char *)this + 22776);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v284, (int **)v319, (int **)this + 2847);
  BlueFin::GlSetBase::operator=((uint64_t)&v284, (uint64_t)v319);
  long long v285 = v321;
  long long v286 = v322;
  long long v251 = this;
  if (*((_DWORD *)v250 + 291) >= 0x2711u)
  {
    double v12 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, &v296);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v12, (int **)v319, (int **)&v291);
    BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
    long long v351 = v321;
    long long v352 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, (int **)v319, (int **)&v287);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator|=((uint64_t)&v284, (uint64_t)&__src);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, &v296);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v341, (int **)v319, &v301);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v291);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v337, (int **)v319, &v301);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    double v13 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v13, (int **)v319, (int **)&v337);
    double v14 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v14, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, &v284);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v284, (uint64_t)&__src);
    long long v285 = v327;
    long long v286 = v328;
    if (!(*(unsigned int (**)(void))(**((void **)this + 8) + 1208))() || *(_DWORD *)v3 || v3[297]) {
      goto LABEL_11;
    }
    if (BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAcqMgrSm::assisted))
    {
      uint64_t v15 = *((unsigned int *)v250 + 291);
      BOOL v16 = "GlMeSrdAcqMgrSm::UpdateSvidToSearchForMgrs: m_ulLastLms: %u Enable 6PPM Acquisition in Assisted Mode\n";
    }
    else
    {
      if (!BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAcqMgrSm::autonomous))goto LABEL_11; {
      uint64_t v15 = *((unsigned int *)v250 + 291);
      }
      if (v15 < 0x7531) {
        goto LABEL_12;
      }
      if ((BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&v316) & 0xFC) != 0)
      {
LABEL_11:
        LODWORD(v15) = *((_DWORD *)v250 + 291);
LABEL_12:
        if (v15 >> 3 <= 0x55E
          && (*(unsigned int (**)(void))(**((void **)this + 8) + 1208))(*((void *)this + 8))
          && *(_DWORD *)v3)
        {
          unsigned int v17 = 0;
          uint64_t v18 = &v316[4 * v317 - 4];
          do
          {
            if (*(_DWORD *)v18)
            {
              unsigned int v19 = *(_DWORD *)v18 - (((*(_DWORD *)v18 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v18 >> 2) & 0x9249249));
              unsigned int v17 = ((v19 + (v19 >> 3)) & 0xC71C71C7) + v17 - 63 * (((v19 + (v19 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            v18 -= 4;
          }
          while (v18 >= v316);
          if ((v17 & 0xFC) == 0)
          {
            GlCustomLog(15, "GlMeSrdAcqMgrSm::UpdateSvidToSearchForMgrs: m_ulLastLms: %u 6PPM Plan Reorder Blind Search\n", *((_DWORD *)v250 + 291));
            uint64_t v20 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, &v296);
            *(void *)v319 = &v321;
            LOBYTE(v320) = 8;
            long long v321 = 0u;
            long long v322 = 0u;
            BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v20, (int **)v319, (int **)&v291);
            BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
            long long v351 = v321;
            long long v352 = v322;
            BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
            *(void *)v319 = &v321;
            LOBYTE(v320) = 8;
            long long v321 = 0u;
            long long v322 = 0u;
            BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, (int **)v319, (int **)&v287);
            BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
            long long v327 = v321;
            long long v328 = v322;
            BlueFin::GlSetBase::operator&=((uint64_t)&v284, (uint64_t)&__src);
          }
        }
        goto LABEL_21;
      }
      BOOL v16 = "GlMeSrdAcqMgrSm::UpdateSvidToSearchForMgrs: m_ulLastLms: %u Enable 6PPM Acquisition in Autonomous Mode\n";
    }
    v3[297] = 1;
    GlCustomLog(15, v16, v15);
    goto LABEL_11;
  }
LABEL_21:
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v280, (unsigned int *)&v282, 8u, &v296);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v276, (unsigned int *)&v278, 8u, &v296);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v272, (unsigned int *)&v274, 8u, &v284);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v268, (unsigned int *)&v270, 8u, &v284);
  v243 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11824);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)this + 1478);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, __dst);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v349);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v264, (unsigned int *)&v266, 8u, (const void **)&__src);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v264, (int **)v319, (int **)&v349);
  BlueFin::GlSetBase::operator=((uint64_t)&v264, (uint64_t)v319);
  long long v266 = v321;
  long long v267 = v322;
  int v260 = &v262;
  unsigned __int8 v261 = 8;
  long long v262 = 0u;
  long long v263 = 0u;
  uint64_t v21 = v3;
  int v22 = this;
  if (!v3[60] || (v3[4] & 2) != 0) {
    goto LABEL_87;
  }
  long long v351 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  unint64_t v349 = (unint64_t)&v351;
  unsigned __int8 v350 = 8;
  long long v352 = *(_OWORD *)algn_263BAA84C;
  uint64_t v23 = *((void *)this + 5);
  LODWORD(v337) = 46;
  (*(void (**)(long long **__return_ptr))(*(void *)v23 + 72))(&v345);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v345);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  unint64_t v349 = (unint64_t)&v351;
  unsigned __int8 v350 = 8;
  long long v351 = 0u;
  long long v352 = 0u;
  v319[0] = v326;
  memcpy(&v320, __src, 4 * v326);
  *(_WORD *)&v319[2] = 0;
  v319[1] = 0;
  *(_DWORD *)&v319[4] = v320;
  BlueFin::GlSetIterator::operator++(v319);
  if (v319[1] == v319[0])
  {
    unsigned int v24 = 0;
    int v25 = 0;
    goto LABEL_73;
  }
  unsigned int v24 = 0;
  int v25 = 0;
  unsigned __int8 v238 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)v22 + 24632);
  char v242 = 1;
  do
  {
    uint64_t v26 = *((void *)v22 + 5);
    unsigned int v27 = v319[2];
    LOBYTE(v345) = v319[2];
    HIDWORD(v345) = 0;
    __int16 v346 = 575;
    if ((v319[2] + 67) >= 0x44u)
    {
      uint64_t v28 = BlueFin::GlSvId::s_aucSvId2gnss[v319[2]];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v28] == 255) {
        HIDWORD(v345) = -1;
      }
      else {
        __int16 v346 = BlueFin::GlSignalId::s_ausGnss2signalId[v28]
      }
             + v319[2]
             - BlueFin::GlSvId::s_aucGnss2minSvId[v28];
    }
    uint64_t v29 = (*(uint64_t (**)(uint64_t, long long **))(*(void *)v26 + 80))(v26, &v345);
    if (!v29) {
      goto LABEL_70;
    }
    uint64_t v31 = v29;
    double v32 = *(double *)(v29 + 24);
    LODWORD(v30) = *((_DWORD *)v250 + 291);
    double v33 = (double)v30;
    double v34 = -v33;
    double v35 = -(v33 - v32 * 1000.0);
    double v36 = -(v34 + v32 * 1000.0);
    if (v35 >= 0.0) {
      long double v1 = v35;
    }
    else {
      long double v1 = v36;
    }
    double v37 = fmod(v1, 4294967300.0);
    if (v1 <= 4294967300.0) {
      double v37 = v1;
    }
    if (v37 < -4294967300.0) {
      double v37 = -fmod(-v37, 4294967300.0);
    }
    if (v37 < 0.0) {
      unsigned int v38 = --v37;
    }
    else {
      unsigned int v38 = v37;
    }
    if (v38 <= 0x7CF) {
      *(_DWORD *)(v349 + 4 * (v27 >> 5)) |= 1 << v27;
    }
    int v39 = *(_DWORD *)(v31 + 140);
    if ((v39 & 0xFFFFFFFE) == 8)
    {
      if ((*(unsigned char *)(v31 + 86) & 4) == 0 || v38 >> 3 > 0x270) {
        goto LABEL_70;
      }
      float v40 = *(float *)(v31 + 40);
      BOOL v41 = v40 < 23.0 && v38 > 0x3E8;
      if (!v41 && v40 >= 20.0) {
        goto LABEL_70;
      }
      *((_DWORD *)v260 + (v27 >> 5)) |= 1 << v27;
      LODWORD(v43) = *(unsigned __int8 *)(v31 + 112);
      uint64_t v44 = (uint64_t)v238;
      goto LABEL_55;
    }
    if (v39 == 10)
    {
      if ((*(unsigned char *)(v31 + 86) & 4) == 0) {
        goto LABEL_70;
      }
      LODWORD(v37) = *((_DWORD *)v250 + 291);
      double v45 = (double)*(unint64_t *)&v37;
      double v46 = -v45;
      double v47 = -(v45 - v32 * 1000.0);
      double v48 = -(v46 + v32 * 1000.0);
      if (v47 < 0.0) {
        double v47 = v48;
      }
      if (v47 >= 1000.0) {
        goto LABEL_70;
      }
      float v49 = *(float *)(v31 + 40);
      if (v49 > 23.0)
      {
        ++v25;
        goto LABEL_70;
      }
      if (v49 >= 20.0)
      {
        ++v24;
        goto LABEL_70;
      }
      unint64_t v43 = *(unsigned __int8 *)(v31 + 112);
      uint64_t v44 = (uint64_t)v238;
      if (((*(unsigned int *)(*(void *)v238 + ((v43 >> 3) & 0x1C)) >> (v43 & 0x1F)) & 1) == 0)
      {
LABEL_70:
        int v22 = v251;
        goto LABEL_71;
      }
      *((_DWORD *)v260 + (v27 >> 5)) |= 1 << v27;
LABEL_55:
      BlueFin::GlSetBase::Remove(v44, v43);
      goto LABEL_70;
    }
    int v22 = v251;
    if (v39 == 11 && !v3[99]) {
      char v242 = 0;
    }
LABEL_71:
    BlueFin::GlSetIterator::operator++(v319);
  }
  while (v319[1] != v319[0]);
  uint64_t v21 = v3;
  if (v242)
  {
LABEL_73:
    int v50 = v21[99];
    if (v21[99])
    {
      if (*((_DWORD *)v250 + 291) <= 0x7530u)
      {
        unsigned int v51 = 0;
        BOOL v52 = (int *)(v349 + 4 * v350 - 4);
        do
        {
          if (*v52)
          {
            unsigned int v53 = *v52 - (((*v52 >> 2) & 0x9249249) + ((*v52 >> 1) & 0x5B6DB6DB));
            unsigned int v51 = ((v53 + (v53 >> 3)) & 0xC71C71C7) + v51 - 63 * (((v53 + (v53 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          --v52;
        }
        while ((unint64_t)v52 >= v349);
        int v50 = v51 < 3u;
      }
      else
      {
        int v50 = 0;
      }
    }
    if (v25 || v24 > 1 || v50) {
      bzero(v260, ((4 * v261 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    }
    unsigned int v54 = (void *)((char *)v22 + 3520);
    v341 = &v343;
    LOBYTE(v342) = 4;
    long long v343 = 0uLL;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v251 + 11248, (int **)&v341);
    v345 = &v347;
    LOBYTE(v346) = 4;
    long long v347 = 0uLL;
    int v22 = v251;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v251 + 11216, (int **)&v345, (int **)&v341);
    BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(v54, (uint64_t)&v345, (uint64_t)v319);
    BlueFin::GlSetBase::operator|=((uint64_t)&v260, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v260, (uint64_t)__dst);
  }
  else
  {
    bzero(v260, ((4 * v261 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
LABEL_87:
  unsigned __int16 v256 = &v258;
  unsigned __int8 v257 = 8;
  unint64_t v349 = (unint64_t)&v351;
  unsigned __int8 v350 = 8;
  long long v351 = xmmword_263BAA85C;
  long long v352 = *(_OWORD *)algn_263BAA86C;
  long long v258 = 0u;
  long long v259 = 0u;
  if (v21[100])
  {
    uint64_t v55 = *((void *)v22 + 5);
    LODWORD(v331[0]) = 46;
    (*(void (**)(void **__return_ptr))(*(void *)v55 + 72))(&v341);
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdAcqMgrSm *)((char *)v22 + 18352), (uint64_t)v319);
    BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*((void **)v22 + 1795), (uint64_t)v319, (uint64_t)&v334);
    BlueFin::GlSvIdSet::operator~(&v334, (uint64_t)&v337);
    uint64_t v56 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v56, (int **)v319, (int **)&v337);
    BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v349, (uint64_t)&v332);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v345);
    *(void *)v319 = &v321;
    int v22 = v251;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v332);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator|=((uint64_t)&v256, (uint64_t)&__src);
    BlueFin::GlSetBase::operator&=((uint64_t)&v256, (uint64_t)__dst);
    if (*(_DWORD *)v256) {
      goto LABEL_89;
    }
    if (v257 >= 2uLL)
    {
      if (*((_DWORD *)v256 + 1))
      {
LABEL_89:
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v256);
        if ((*(unsigned int (**)(void))(**((void **)v251 + 8) + 32))(*((void *)v251 + 8))) {
          unsigned int v57 = 4;
        }
        else {
          unsigned int v57 = 100;
        }
        LODWORD(v1) = *((_DWORD *)v250 + 291);
        LOBYTE(__src) = v257;
        memcpy(&v326, v256, 4 * v257);
        WORD1(__src) = 0;
        BYTE1(__src) = 0;
        HIDWORD(__src) = v326;
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        if (BYTE1(__src) != __src)
        {
          unsigned int v58 = 0;
          double v59 = (double)*(unint64_t *)&v1;
          unsigned int v248 = v57;
          do
          {
            if (v58 >= v57)
            {
              int v73 = BYTE2(__src);
            }
            else
            {
              uint64_t v60 = 0;
              *(void *)v319 = &v321;
              LOBYTE(v320) = 19;
              long long v321 = 0u;
              long long v322 = 0u;
              long long v323 = 0u;
              memset(v324, 0, sizeof(v324));
              uint64_t v61 = BYTE2(__src);
              uint64_t v62 = BYTE2(__src) >> 5;
              uint64_t v63 = 1 << (BYTE2(__src) & 0x1F);
              unsigned __int8 v64 = BYTE2(__src) + 67;
              uint64_t v65 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
              while (2)
              {
                switch((char)v60)
                {
                  case 0:
                    uint64_t v66 = *((void *)v22 + 2877);
                    goto LABEL_102;
                  case 1:
                    uint64_t v66 = *((void *)v22 + 2883);
                    goto LABEL_102;
                  case 2:
                    uint64_t v66 = *((void *)v22 + 2889);
                    goto LABEL_102;
                  case 3:
                    if ((v63 & *(_DWORD *)(*((void *)v22 + 2865) + 4 * v62)) != 0) {
                      goto LABEL_103;
                    }
                    uint64_t v66 = *((void *)v22 + 2871);
LABEL_102:
                    if ((v63 & *(_DWORD *)(v66 + 4 * v62)) != 0)
                    {
LABEL_103:
                      LOBYTE(v341) = v61;
                      HIDWORD(v341) = v60;
                      if (v64 >= 0x44u)
                      {
                        uint64_t v67 = BlueFin::GlSvId::s_aucSvId2gnss[v61];
                        if (v65[v67] != 255)
                        {
                          unsigned __int16 v342 = BlueFin::GlSignalId::s_ausGnss2signalId[v67]
                               + v61
                               - BlueFin::GlSvId::s_aucGnss2minSvId[v67]
                               + BlueFin::GlSvId::s_aucGnss2numSvId[v67] * (_WORD)v60;
                          if (v342 <= 0x23Eu)
                          {
                            unint64_t v68 = v22;
                            uint64_t v69 = *((void *)v22 + 5);
                            uint64_t v70 = (*(uint64_t (**)(void))(**((void **)v68 + 10) + 24))(*((void *)v68 + 10));
                            if ((*(unsigned int (**)(uint64_t, void **, uint64_t, double))(*(void *)v69 + 40))(v69, &v341, v70, v59))
                            {
                              *(_DWORD *)(*(void *)v319 + 4 * ((__int16)v342 >> 5)) |= 1 << v342;
                              ++v58;
                            }
                            int v22 = v251;
                          }
                        }
                      }
                    }
                    ++v60;
                    v65 += 7;
                    if (v60 != 4) {
                      continue;
                    }
                    unsigned int v57 = v248;
                    if (**(_DWORD **)v319) {
                      goto LABEL_120;
                    }
                    if (v320 < 2uLL) {
                      goto LABEL_117;
                    }
                    if (*(_DWORD *)(*(void *)v319 + 4)) {
                      goto LABEL_120;
                    }
                    uint64_t v71 = 2;
                    break;
                  default:
                    goto LABEL_103;
                }
                break;
              }
              while (v320 != v71)
              {
                if (*(_DWORD *)(*(void *)v319 + 4 * v71++))
                {
                  if (v71 - 1 < (unint64_t)v320) {
                    goto LABEL_120;
                  }
                  break;
                }
              }
LABEL_117:
              int v73 = v61;
            }
            BlueFin::GlSetBase::Remove((uint64_t)&v256, v73);
LABEL_120:
            BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
          }
          while (BYTE1(__src) != __src);
        }
        uint64_t v21 = v247;
      }
      else
      {
        uint64_t v144 = 2;
        while (v257 != v144)
        {
          if (*((_DWORD *)v256 + v144++))
          {
            if (v144 - 1 < (unint64_t)v257) {
              goto LABEL_89;
            }
            break;
          }
        }
      }
    }
  }
  BlueFin::GlSetBase::Add((uint64_t)&v256, (int **)v22 + 2895);
  bzero(*((void **)v22 + 2895), ((4 * v250[1564] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (v21[99])
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v332);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v334, (unsigned int *)&v335, 8u, (const void **)__dst);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v334, (int **)v319, (int **)&v332);
    BlueFin::GlSetBase::operator=((uint64_t)&v334, (uint64_t)v319);
    long long v335 = v321;
    long long v336 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v298, (uint64_t)v331);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, &v334);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v337, (int **)v319, v331);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v330);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v341, (int **)v319, v330);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v307, (uint64_t)v329);
    long long v74 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v74, (int **)v319, v329);
    BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)v255);
    uint64_t v75 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v75, (int **)v319, v255);
    BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
    long long v351 = v321;
    long long v352 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)v254);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, v254);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&__src);
    long long v274 = v327;
    long long v275 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v345);
    unsigned __int8 v76 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)__dst);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v76, (int **)v319, (int **)&v345);
    BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
    long long v351 = v321;
    long long v352 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)&v341);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v341);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&__src);
    long long v270 = v327;
    long long v271 = v328;
    uint64_t v77 = (const void **)(*(uint64_t (**)(void))(**((void **)v22 + 5) + 64))(*((void *)v22 + 5));
    uint64_t v78 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, v77);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v78, (int **)v319, __dst);
    BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v341);
    uint64_t v79 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v79, (int **)v319, (int **)&v341);
    BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
    long long v351 = v321;
    long long v352 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)&v337);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
    *(void *)v319 = &v321;
    uint64_t v21 = v247;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v337);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&__src);
    long long v282 = v327;
    long long v283 = v328;
  }
  if (v21[299])
  {
    long long v327 = xmmword_263BAA8BC;
    float __src = &v327;
    LOBYTE(v326) = 8;
    long long v328 = unk_263BAA8CC;
    unint64_t v349 = (unint64_t)&v351;
    unsigned __int8 v350 = 8;
    long long v351 = BlueFin::GlSvIdSet::csm_aulBeidouGeoSvIds;
    long long v352 = unk_263BAA92C;
    v345 = &v347;
    LOBYTE(v346) = 8;
    long long v347 = xmmword_263BAA8DC;
    long long v348 = unk_263BAA8EC;
    v341 = &v343;
    LOBYTE(v342) = 8;
    long long v343 = xmmword_263BAA8FC;
    long long v344 = unk_263BAA90C;
    BlueFin::GlSvIdSet::operator~((const void **)&v341, (uint64_t)v331);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v332, (unsigned int *)v333, 8u, (const void **)&v280);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v332, (int **)v319, v331);
    BlueFin::GlSetBase::operator=((uint64_t)&v332, (uint64_t)v319);
    v333[0] = v321;
    v333[1] = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v345, (uint64_t)v330);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v334, (unsigned int *)&v335, 8u, &v332);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v334, (int **)v319, v330);
    BlueFin::GlSetBase::operator=((uint64_t)&v334, (uint64_t)v319);
    long long v335 = v321;
    long long v336 = v322;
    BlueFin::GlSvIdSet::operator~((const void **)&v349, (uint64_t)v329);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, &v334);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v337, (int **)v319, v329);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v287, (uint64_t)&v337);
    long long v289 = v339;
    long long v290 = v340;
    uint64_t v80 = v251;
    if (((*(uint64_t (**)(void))(**((void **)v251 + 8) + 1224))() & 1) == 0)
    {
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)v319);
      BlueFin::GlSetBase::operator&=((uint64_t)&v287, (uint64_t)v319);
    }
    BlueFin::GlSvIdSet::operator~((const void **)&v287, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
    BlueFin::GlSvIdSet::operator~((const void **)&v349, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
    p_src = &__src;
LABEL_128:
    BlueFin::GlSvIdSet::operator~((const void **)p_src, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
  }
  else
  {
    uint64_t v80 = v251;
    if (*(_DWORD *)v287) {
      goto LABEL_148;
    }
    if (v288 < 2uLL) {
      goto LABEL_129;
    }
    if (*((_DWORD *)v287 + 1))
    {
LABEL_148:
      if (*(_DWORD *)v21 == 3)
      {
        float __src = &v327;
        LOBYTE(v326) = 4;
        long long v327 = 0uLL;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v251 + 13736, (int **)&__src, (int **)v251 + 485);
        BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet((void *)v251 + 440, (uint64_t)&__src, (uint64_t)v319);
        BlueFin::GlSetBase::operator=((uint64_t)&v287, (uint64_t)v319);
        long long v289 = v321;
        long long v290 = v322;
        p_src = &v287;
        goto LABEL_128;
      }
    }
    else
    {
      uint64_t v146 = 2;
      while (v288 != v146)
      {
        if (*((_DWORD *)v287 + v146++))
        {
          if (v146 - 1 >= (unint64_t)v288) {
            break;
          }
          goto LABEL_148;
        }
      }
    }
  }
LABEL_129:
  uint64_t v82 = (unsigned __int8 *)v80 + 11400;
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
    }
  }
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 13920)))
  {
    v319[0] = *((unsigned char *)v80 + 13928);
    memcpy(&v320, *((const void **)v80 + 1740), 4 * v319[0]);
    *(_WORD *)&v319[2] = 0;
    v319[1] = 0;
    *(_DWORD *)&v319[4] = v320;
    BlueFin::GlSetIterator::operator++(v319);
    while (v319[1] != v319[0])
    {
      unsigned int v83 = v319[2];
      BlueFin::GlMeSrdSatMgr::GetSvid((void *)v251 + 440, v319[2], &__src);
      BlueFin::GlMeSrdSatPostSearchMgr::GetSearchMgrSource((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 13920), v83);
      float v84 = &v260;
      switch(&v260)
      {
        case 0u:
          goto LABEL_142;
        case 1u:
          float v84 = &v264;
          goto LABEL_142;
        case 4u:
          float v84 = &v276;
          goto LABEL_142;
        case 5u:
          float v84 = &v280;
          goto LABEL_142;
        case 6u:
          float v84 = &v287;
          goto LABEL_142;
        case 7u:
          float v84 = &v291;
          goto LABEL_142;
        case 8u:
          float v84 = &v268;
          goto LABEL_142;
        case 9u:
          float v84 = &v272;
LABEL_142:
          BlueFin::GlSetBase::Remove((uint64_t)v84, __src);
          break;
        default:
          break;
      }
      BlueFin::GlSetIterator::operator++(v319);
    }
    uint64_t v80 = v251;
  }
  if (*(_DWORD *)v256)
  {
LABEL_146:
    BlueFin::GlSvIdSet::operator~((const void **)&v256, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v291, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v276, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v272, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v268, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v264, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v287, (uint64_t)v319);
  }
  else
  {
    if (v257 >= 2uLL)
    {
      if (*((_DWORD *)v256 + 1)) {
        goto LABEL_146;
      }
      uint64_t v85 = 2;
      while (v257 != v85)
      {
        if (*((_DWORD *)v256 + v85++))
        {
          if (v85 - 1 < (unint64_t)v257) {
            goto LABEL_146;
          }
          break;
        }
      }
    }
    bzero(v256, ((4 * v257 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  if (v21[99])
  {
    if (!v21[41])
    {
      BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v319);
      BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
    }
    bzero(v276, ((4 * v277 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(v264, ((4 * v265 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    uint64_t v87 = v291;
    uint64_t v88 = v292;
LABEL_161:
    uint64_t v89 = 4 * v88 + 0x3FFFFFFFCLL;
LABEL_162:
    bzero(v87, (v89 & 0x3FFFFFFFCLL) + 4);
    goto LABEL_163;
  }
  if (!v21[48])
  {
    if (v21[40])
    {
      bzero(v280, ((4 * v281 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(v287, ((4 * v288 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(v291, ((4 * v292 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(v276, ((4 * v277 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(v272, ((4 * v273 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      uint64_t v87 = v260;
      uint64_t v88 = v261;
      goto LABEL_161;
    }
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, &v296);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, &v310);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    if (*(_DWORD *)__src) {
      goto LABEL_305;
    }
    if (v326 > 1uLL)
    {
      if (*((_DWORD *)__src + 1))
      {
LABEL_305:
        BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v319);
        BlueFin::GlSetBase::operator&=((uint64_t)&v272, (uint64_t)v319);
        goto LABEL_306;
      }
      uint64_t v232 = 2;
      while (v326 != v232)
      {
        if (*((_DWORD *)__src + v232++))
        {
          if (v232 - 1 < (unint64_t)v326) {
            goto LABEL_305;
          }
          break;
        }
      }
    }
LABEL_306:
    if (!v21[42])
    {
      BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)v319);
      BlueFin::GlSetBase::operator&=((uint64_t)&v272, (uint64_t)v319);
    }
    BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v268, (uint64_t)v319);
    if (((*(uint64_t (**)(void))(**((void **)v80 + 8) + 1224))() & 1) == 0
      && ((*(uint64_t (**)(void))(**((void **)v80 + 8) + 1200))(*((void *)v80 + 8)) & 1) == 0
      && ((*(uint64_t (**)(void))(**((void **)v80 + 8) + 1232))(*((void *)v80 + 8)) & 1) == 0)
    {
      BlueFin::GlSvIdSet::operator~((const void **)&v307, (uint64_t)v319);
      BlueFin::GlSetBase::operator&=((uint64_t)&v268, (uint64_t)v319);
    }
    if (v21[44])
    {
      if (*(_DWORD *)v21 != 3
        || ((*(uint64_t (**)(void))(**((void **)v80 + 10) + 32))(*((void *)v80 + 10)) & 1) != 0)
      {
LABEL_438:
        if (!v21[41])
        {
          BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v319);
          BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
          BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v319);
          BlueFin::GlSetBase::operator&=((uint64_t)&v291, (uint64_t)v319);
          BlueFin::GlSvIdSet::operator~((const void **)&v310, (uint64_t)v319);
          BlueFin::GlSetBase::operator&=((uint64_t)&v287, (uint64_t)v319);
        }
        goto LABEL_163;
      }
      BlueFin::GlSvIdSet::operator|((uint64_t)&v341, (const void **)&v301, &v304);
      BlueFin::GlSvIdSet::operator|((uint64_t)&v345, (const void **)&v341, &v307);
      BlueFin::GlSvIdSet::operator|((uint64_t)&v349, (const void **)&v345, &v313);
      BlueFin::GlSvIdSet::operator|((uint64_t)&__src, (const void **)&v349, &v298);
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)v319);
      BlueFin::GlSetBase::operator&=((uint64_t)&v272, (uint64_t)v319);
      BlueFin::GlSvIdSet::operator~((const void **)&v298, (uint64_t)v319);
      BlueFin::GlSetBase::operator&=((uint64_t)&v280, (uint64_t)v319);
      uint64_t v150 = &v291;
    }
    else
    {
      uint64_t v150 = &v276;
    }
    bzero(*v150, ((4 * *((unsigned __int8 *)v150 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    goto LABEL_438;
  }
  bzero(v280, ((4 * v281 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(v291, ((4 * v292 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(v276, ((4 * v277 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(v268, ((4 * v269 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(v260, ((4 * v261 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(v264, ((4 * v265 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(v287, ((4 * v288 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlSvIdSet::operator~((const void **)&v316, (uint64_t)&v345);
  long long v143 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v143, (int **)v319, __dst);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  BlueFin::GlSvIdSet::operator~((const void **)&v256, (uint64_t)&v341);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v341);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
  long long v327 = v321;
  long long v328 = v322;
  BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&__src);
  long long v274 = v327;
  long long v275 = v328;
  if (!v21[42])
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v313, (uint64_t)v319);
    BlueFin::GlSetBase::operator&=((uint64_t)&v272, (uint64_t)v319);
  }
  if (v21[50] && v21[49]) {
    bzero(v272, ((4 * v273 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  if (*v250)
  {
    uint64_t v87 = v272;
    uint64_t v89 = 4 * v273 + 0x3FFFFFFFCLL;
    goto LABEL_162;
  }
LABEL_163:
  if (!v21[99])
  {
    long long v249 = (int **)((char *)v80 + 3880);
    if (*(_DWORD *)v260) {
      goto LABEL_165;
    }
    if (v261 >= 2uLL)
    {
      if (!*((_DWORD *)v260 + 1))
      {
        uint64_t v148 = 2;
        do
        {
          if (v261 == v148) {
            goto LABEL_317;
          }
        }
        while (!*((_DWORD *)v260 + v148++));
        if (v148 - 1 >= (unint64_t)v261) {
          goto LABEL_317;
        }
      }
LABEL_165:
      uint64_t v90 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)v251 + 3520);
      v345 = &v347;
      LOBYTE(v346) = 4;
      long long v347 = 0uLL;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v251 + 11216, (int **)&v345, v249);
      unsigned int v91 = 0;
      uint64_t v92 = (int *)v345 + v346 - 1;
      do
      {
        if (*v92)
        {
          unsigned int v93 = *v92 - (((*v92 >> 2) & 0x9249249) + ((*v92 >> 1) & 0x5B6DB6DB));
          unsigned int v91 = ((v93 + (v93 >> 3)) & 0xC71C71C7) + v91 - 63 * (((v93 + (v93 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v92;
      }
      while (v92 >= (int *)v345);
      if ((unsigned __int16)v91 <= 2u && (unsigned __int16)v91 < *v82)
      {
        unsigned int v94 = 0;
        int v95 = (char *)v260 + 4 * v261 - 4;
        do
        {
          if (*v95)
          {
            unsigned int v96 = *v95 - (((*v95 >> 1) & 0x5B6DB6DB) + ((*v95 >> 2) & 0x9249249));
            unsigned int v94 = ((v96 + (v96 >> 3)) & 0xC71C71C7) + v94 - 63 * (((v96 + (v96 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          --v95;
        }
        while (v95 >= v260);
        if ((unsigned __int16)v91 < v94)
        {
          bzero(v272, ((4 * v273 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          bzero(v268, ((4 * v269 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          bzero(v276, ((4 * v277 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          bzero(v264, ((4 * v265 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          bzero(v291, ((4 * v292 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 4u, (const void **)v251 + 1561);
          *(void *)v319 = &v321;
          LOBYTE(v320) = 4;
          long long v321 = 0uLL;
          BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v249, (int **)v319);
          v337 = &v339;
          unsigned __int8 v338 = 4;
          long long v339 = 0uLL;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v251 + 12488, (int **)&v337, (int **)v319);
          BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(v90, (uint64_t)&v341, (uint64_t)v319);
          if (BlueFin::GlUtils::m_ucEnabled) {
            BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
          }
          v319[0] = 1;
          *(_DWORD *)&v319[4] = 0;
          LOWORD(v320) = 0;
          unsigned __int8 StrategyId = BlueFin::GlMeSrdSearchMgrBase::GetStrategyId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v251 + 11088), (const BlueFin::GlSignalId *)v319);
          unint64_t v349 = (unint64_t)&v351;
          unsigned __int8 v350 = 8;
          long long v351 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
          long long v352 = *(_OWORD *)algn_263BAA84C;
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v260);
          *(void *)v319 = &v321;
          LOBYTE(v320) = 8;
          long long v321 = 0u;
          long long v322 = 0u;
          BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
          BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
          unsigned int v98 = 0;
          long long v327 = v321;
          long long v328 = v322;
          unsigned int v99 = (char *)__src + 4 * v326 - 4;
          do
          {
            if (*v99)
            {
              unsigned int v100 = *v99 - (((*v99 >> 2) & 0x9249249) + ((*v99 >> 1) & 0x5B6DB6DB));
              unsigned int v98 = ((v100 + (v100 >> 3)) & 0xC71C71C7) + v98 - 63 * (((v100 + (v100 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            --v99;
          }
          while (v99 >= __src);
          unsigned int v101 = 0;
          unsigned int v241 = 2 * (StrategyId != 250);
          std::string::size_type v102 = (char *)v260 + 4 * v261 - 4;
          do
          {
            if (*v102)
            {
              unsigned int v103 = *v102 - (((*v102 >> 1) & 0x5B6DB6DB) + ((*v102 >> 2) & 0x9249249));
              unsigned int v101 = ((v103 + (v103 >> 3)) & 0xC71C71C7) + v101 - 63 * (((v103 + (v103 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            --v102;
          }
          while (v102 >= v260);
          if (v98 != v101)
          {
            DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 848, "UpdateSvidToSearchForReactivity", (char)"(rSet2DbitSearch & GlSvIdSet::Gnss(GNSS_GPS)).Cnt() == rSet2DbitSearch.Cnt()");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", 848, "(rSet2DbitSearch & GlSvIdSet::Gnss(GNSS_GPS)).Cnt() == rSet2DbitSearch.Cnt()");
          }
          char v234 = 0;
          signed int v236 = 0x80000000;
          unsigned int v240 = StrategyId;
          signed int v235 = 0x80000000;
          int v237 = 255;
          int v239 = 255;
          while (1)
          {
LABEL_188:
            unsigned int v104 = 0;
            uint64_t v105 = (char *)v341 + 4 * v342 - 4;
            do
            {
              if (*v105)
              {
                unsigned int v106 = *v105 - (((*v105 >> 2) & 0x9249249) + ((*v105 >> 1) & 0x5B6DB6DB));
                unsigned int v104 = ((v106 + (v106 >> 3)) & 0xC71C71C7) + v104 - 63 * (((v106 + (v106 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              --v105;
            }
            while (v105 >= v341);
            if ((unsigned __int16)v104 < 3u) {
              goto LABEL_316;
            }
            unsigned int v107 = 0;
            uint64_t v108 = (char *)v260 + 4 * v261 - 4;
            do
            {
              if (*v108)
              {
                unsigned int v109 = *v108 - (((*v108 >> 1) & 0x5B6DB6DB) + ((*v108 >> 2) & 0x9249249));
                unsigned int v107 = ((v109 + (v109 >> 3)) & 0xC71C71C7) + v107 - 63 * (((v109 + (v109 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              --v108;
            }
            while (v108 >= v260);
            unsigned int v107 = v107;
            if (v107 >= v241) {
              unsigned int v107 = v241;
            }
            if (!v107) {
              goto LABEL_316;
            }
            __int16 v245 = v107;
            v319[0] = v342;
            memcpy(&v320, v341, 4 * v342);
            *(_WORD *)&v319[2] = 0;
            v319[1] = 0;
            *(_DWORD *)&v319[4] = v320;
            BlueFin::GlSetIterator::operator++(v319);
            int v110 = 0;
            int v111 = 0;
            if (v319[1] != v319[0])
            {
              int v111 = 0;
              int v110 = 0;
              do
              {
                unsigned int v112 = v319[2];
                if ((((unint64_t)*(unsigned int *)((char *)*v249
                                                         + (((unint64_t)*(unsigned __int16 *)&v319[2] >> 3) & 0x1C)) >> (v319[2] & 0x1F)) & 1) != 0)
                  uint64_t ActiveBsId = BlueFin::GlMeSrdSatMgr::GetActiveBsId(v90, v319[2]);
                else {
                  uint64_t ActiveBsId = BlueFin::GlMeSrdSatMgr::GetStartupBsId(v90, v319[2]);
                }
                uint64_t v114 = ActiveBsId;
                BlueFin::GlMeSrdSatMgr::GetSvid(v90, v112, &v349);
                LOBYTE(__src) = v349;
                HIDWORD(__src) = 0;
                LOWORD(v326) = 575;
                if ((v349 + 67) >= 0x44u)
                {
                  uint64_t v115 = BlueFin::GlSvId::s_aucSvId2gnss[v349];
                  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v115] == 255) {
                    HIDWORD(__src) = -1;
                  }
                  else {
                    LOWORD(v326) = BlueFin::GlSignalId::s_ausGnss2signalId[v115]
                  }
                                 + v349
                                 - BlueFin::GlSvId::s_aucGnss2minSvId[v115];
                }
                int v116 = (*(uint64_t (**)(void, void, uint64_t, void **))(**((void **)v251 + 9) + 40))(*((void *)v251 + 9), *((void *)v251 + 8), v114, &__src);
                int v117 = (*(uint64_t (**)(void, void, uint64_t, void **))(**((void **)v251 + 9) + 56))(*((void *)v251 + 9), *((void *)v251 + 8), v114, &__src);
                if ((v111 + v116) >= 0xFFFF) {
                  int v111 = 0xFFFF;
                }
                else {
                  v111 += v116;
                }
                if ((v110 + v117) >= 0xFF) {
                  int v110 = 255;
                }
                else {
                  v110 += v117;
                }
                BlueFin::GlSetIterator::operator++(v319);
              }
              while (v319[1] != v319[0]);
            }
            uint64_t v119 = *((void *)v251 + 8);
            uint64_t v118 = *((void *)v251 + 9);
            v319[0] = 1;
            *(_DWORD *)&v319[4] = 0;
            LOWORD(v320) = 0;
            __int16 v120 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int8 *))(*(void *)v118 + 40))(v118, v119, v240, v319);
            uint64_t v122 = *((void *)v251 + 8);
            uint64_t v121 = *((void *)v251 + 9);
            v319[0] = 1;
            *(_DWORD *)&v319[4] = 0;
            LOWORD(v320) = 0;
            char v123 = (*(uint64_t (**)(uint64_t, uint64_t, void, unsigned __int8 *))(*(void *)v121 + 56))(v121, v122, v240, v319);
            double v124 = (double)(*(unsigned int (**)(void, void))(**((void **)v251 + 9) + 32))(*((void *)v251 + 9), *((void *)v251 + 8))* 0.8;
            double v125 = fmod(v124, 4294967300.0);
            if (v124 <= 4294967300.0) {
              double v125 = v124;
            }
            if (v125 < -4294967300.0) {
              double v125 = -fmod(-v125, 4294967300.0);
            }
            if (v125 < 0.0) {
              unsigned int v126 = --v125;
            }
            else {
              LOWORD(v126) = v125;
            }
            double v127 = (double)(*(unsigned int (**)(void))(**((void **)v251 + 8) + 56))(*((void *)v251 + 8))
                 * 0.8;
            double v128 = fmod(v127, 4294967300.0);
            if (v127 <= 4294967300.0) {
              double v128 = v127;
            }
            if (v128 < -4294967300.0) {
              double v128 = -fmod(-v128, 4294967300.0);
            }
            if (v111 + (unsigned __int16)(v120 * v245) <= (unsigned __int16)v126)
            {
              if (v128 < 0.0) {
                unsigned int v129 = --v128;
              }
              else {
                LOBYTE(v129) = v128;
              }
              if (v110 + (v123 * v245) <= v129)
              {
LABEL_316:
                BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(v90, (uint64_t)&v341, (uint64_t)v319);
                BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)v319);
                long long v282 = v321;
                long long v283 = v322;
                uint64_t v21 = v247;
                goto LABEL_317;
              }
            }
            if (*(_DWORD *)v337) {
              break;
            }
            if (v338 >= 2u)
            {
              if (*((_DWORD *)v337 + 1)) {
                break;
              }
              uint64_t v130 = 2;
              while (v338 != v130)
              {
                if (*((_DWORD *)v337 + v130++))
                {
                  if (v130 - 1 >= (unint64_t)v338) {
                    break;
                  }
                  goto LABEL_239;
                }
              }
            }
            uint64_t v133 = v342;
            uint64_t v134 = v341;
            if ((v234 & 1) == 0)
            {
              v319[0] = v342;
              memcpy(&v320, v341, 4 * v342);
              *(_WORD *)&v319[2] = 0;
              v319[1] = 0;
              *(_DWORD *)&v319[4] = v320;
              BlueFin::GlSetIterator::operator++(v319);
              if (v319[1] != v319[0])
              {
                do
                {
                  if ((((unint64_t)*(unsigned int *)((char *)*v249
                                                           + (((unint64_t)*(unsigned __int16 *)&v319[2] >> 3) & 0x1C)) >> (v319[2] & 0x1F)) & 1) != 0)
                  {
                    unsigned int v135 = v319[2];
                    signed int ActiveTimeMs = BlueFin::GlMeSrdSatMgr::GetActiveTimeMs(v90, v319[2], *((_DWORD *)v250 + 291));
                    BlueFin::GlMeSrdSatMgr::GetSvid(v90, v135, &__src);
                    if (__src - 1 >= 0x20) {
                      signed int v137 = ActiveTimeMs;
                    }
                    else {
                      signed int v137 = ActiveTimeMs + 10000;
                    }
                    signed int v138 = v235;
                    if (v137 > v235) {
                      signed int v138 = v137;
                    }
                    int v139 = v237;
                    if (v137 > v235) {
                      int v139 = v135;
                    }
                    BOOL v140 = v137 <= v236;
                    if (v137 > v236) {
                      signed int v138 = v236;
                    }
                    signed int v235 = v138;
                    if (v137 <= v236) {
                      signed int v137 = v236;
                    }
                    int v141 = v239;
                    if (!v140) {
                      int v139 = v239;
                    }
                    signed int v236 = v137;
                    int v237 = v139;
                    if (!v140) {
                      int v141 = v135;
                    }
                    int v239 = v141;
                  }
                  BlueFin::GlSetIterator::operator++(v319);
                }
                while (v319[1] != v319[0]);
                uint64_t v133 = v342;
                uint64_t v134 = v341;
              }
            }
            v319[0] = v133;
            memcpy(&v320, v134, 4 * v133);
            *(_WORD *)&v319[2] = 0;
            v319[1] = 0;
            *(_DWORD *)&v319[4] = v320;
            BlueFin::GlSetIterator::operator++(v319);
            if (v319[1] != v319[0])
            {
              while (*(__int16 *)&v319[2] == v239 || *(__int16 *)&v319[2] == v237)
              {
                BlueFin::GlSetIterator::operator++(v319);
                if (v319[1] == v319[0]) {
                  goto LABEL_272;
                }
              }
              BlueFin::GlSetBase::Remove((uint64_t)&v341, *(__int16 *)&v319[2]);
              BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(v90, (uint64_t)&v341, (uint64_t)&__src);
              if (BlueFin::GlUtils::m_ucEnabled) {
                BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
              }
            }
LABEL_272:
            char v234 = 1;
          }
LABEL_239:
          v319[0] = v338;
          memcpy(&v320, v337, 4 * v338);
          *(_WORD *)&v319[2] = 0;
          v319[1] = 0;
          *(_DWORD *)&v319[4] = v320;
          BlueFin::GlSetIterator::operator++(v319);
          int v132 = *(__int16 *)&v319[2];
          BlueFin::GlSetBase::Remove((uint64_t)&v341, *(__int16 *)&v319[2]);
          BlueFin::GlSetBase::Remove((uint64_t)&v337, v132);
          BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(v90, (uint64_t)&v341, (uint64_t)&__src);
          if (BlueFin::GlUtils::m_ucEnabled) {
            BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
          }
          goto LABEL_188;
        }
      }
    }
LABEL_317:
    *(void *)v319 = &v321;
    LOBYTE(v320) = 4;
    long long v321 = 0uLL;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v251 + 12176, (int **)v319, v249);
    float __src = &v327;
    LOBYTE(v326) = 4;
    long long v327 = 0uLL;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v251 + 12488, (int **)&__src, v249);
    unsigned int v151 = 0;
    uint64_t v152 = (_DWORD *)(*(void *)v319 + 4 * v320 - 4);
    do
    {
      if (*v152)
      {
        unsigned int v153 = *v152 - (((*v152 >> 2) & 0x9249249) + ((*v152 >> 1) & 0x5B6DB6DB));
        unsigned int v151 = ((v153 + (v153 >> 3)) & 0xC71C71C7) + v151 - 63 * (((v153 + (v153 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v152;
    }
    while ((unint64_t)v152 >= *(void *)v319);
    if ((unsigned __int16)v151 <= 4u)
    {
      unsigned int v154 = 0;
      uint64_t v155 = (char *)v276 + 4 * v277 - 4;
      do
      {
        if (*v155)
        {
          unsigned int v156 = *v155 - (((*v155 >> 1) & 0x5B6DB6DB) + ((*v155 >> 2) & 0x9249249));
          unsigned int v154 = ((v156 + (v156 >> 3)) & 0xC71C71C7) + v154 - 63 * (((v156 + (v156 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v155;
      }
      while (v155 >= v276);
      if (v154 > 4u) {
        goto LABEL_337;
      }
    }
    unsigned int v157 = 0;
    uint64_t v158 = (char *)__src + 4 * v326 - 4;
    do
    {
      if (*v158)
      {
        unsigned int v159 = *v158 - (((*v158 >> 2) & 0x9249249) + ((*v158 >> 1) & 0x5B6DB6DB));
        unsigned int v157 = ((v159 + (v159 >> 3)) & 0xC71C71C7) + v157 - 63 * (((v159 + (v159 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v158;
    }
    while (v158 >= __src);
    if ((unsigned __int16)v157 <= 2u)
    {
      unsigned int v160 = 0;
      uint64_t v161 = (char *)v280 + 4 * v281 - 4;
      do
      {
        if (*v161)
        {
          unsigned int v162 = *v161 - (((*v161 >> 1) & 0x5B6DB6DB) + ((*v161 >> 2) & 0x9249249));
          unsigned int v160 = ((v162 + (v162 >> 3)) & 0xC71C71C7) + v160 - 63 * (((v162 + (v162 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v161;
      }
      while (v161 >= v280);
      if (v160 >= 3u)
      {
LABEL_337:
        if (*((_DWORD *)v250 + 291) >> 4 <= 0x752u) {
          bzero(v272, ((4 * v273 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        }
        bzero(v268, ((4 * v269 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        bzero(v291, ((4 * v292 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      }
    }
    uint64_t v80 = v251;
  }
  BlueFin::GlSvIdSet::operator~((const void **)&v304, (uint64_t)v319);
  BlueFin::GlSetBase::operator&=((uint64_t)&v260, (uint64_t)v319);
  if (((*(uint64_t (**)(void))(**((void **)v80 + 8) + 256))() & 1) == 0
    && ((*(uint64_t (**)(void))(**((void **)v80 + 8) + 264))(*((void *)v80 + 8)) & 1) == 0)
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v272);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&__src);
    long long v274 = v327;
    long long v275 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v268);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&__src);
    long long v270 = v327;
    long long v271 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v280);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&__src);
    long long v282 = v327;
    long long v283 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v291);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)&__src);
    long long v293 = v327;
    long long v294 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v276);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v276, (uint64_t)&__src);
    long long v278 = v327;
    long long v279 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v260);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v260, (uint64_t)&__src);
    long long v262 = v327;
    long long v263 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v264);
    *(void *)v319 = &v321;
    uint64_t v80 = v251;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v264, (uint64_t)&__src);
    long long v266 = v327;
    long long v267 = v328;
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)v80 + 8) + 832))(*((void *)v80 + 8), 9))
  {
    float __src = &v327;
    LOBYTE(v326) = 8;
    long long v327 = 0u;
    long long v328 = 0u;
    if (((*(uint64_t (**)(void))(**((void **)v80 + 8) + 1224))(*((void *)v80 + 8)) & 1) == 0
      && ((*(uint64_t (**)(void))(**((void **)v80 + 10) + 40))(*((void *)v80 + 10)) & 1) == 0)
    {
      uint64_t v163 = *((unsigned __int16 *)v250 + 1461);
      double v164 = __src;
      if (*((_WORD *)v250 + 1461))
      {
        uint64_t v165 = *((void *)v80 + 3066) + 4;
        do
        {
          __int16 v166 = *(_WORD *)(v165 - 4);
          if (v166 - 76 <= 0x3E && (*(unsigned char *)(v165 + 2) & 0x10) == 0) {
            *(_DWORD *)((char *)v164 + (((unint64_t)v166 >> 3) & 0x1C)) |= 1 << v166;
          }
          v165 += 8;
          --v163;
        }
        while (v163);
        double v164 = __src;
      }
      if (*v164)
      {
LABEL_355:
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        char v167 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v272);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v167, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&v349);
        long long v274 = v351;
        long long v275 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        std::string v168 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v268);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v168, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&v349);
        long long v270 = v351;
        long long v271 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        std::string v169 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v280);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v169, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&v349);
        long long v282 = v351;
        long long v283 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        std::string v170 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v291);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v170, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)&v349);
        long long v293 = v351;
        long long v294 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        std::string v171 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v276);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v171, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v276, (uint64_t)&v349);
        long long v278 = v351;
        long long v279 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        std::string v172 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v260);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v172, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v260, (uint64_t)&v349);
        long long v262 = v351;
        long long v263 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        unsigned __int16 v173 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v264);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v173, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v264, (uint64_t)&v349);
        long long v266 = v351;
        long long v267 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
        v174 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v287);
        *(void *)v319 = &v321;
        uint64_t v80 = v251;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v174, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v287, (uint64_t)&v349);
        long long v289 = v351;
        long long v290 = v352;
      }
      else if (v326 >= 2uLL)
      {
        if (v164[1]) {
          goto LABEL_355;
        }
        uint64_t v205 = 2;
        while (v326 != v205)
        {
          if (v164[v205++])
          {
            if (v205 - 1 < (unint64_t)v326) {
              goto LABEL_355;
            }
            break;
          }
        }
      }
    }
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)v80 + 8) + 832))(*((void *)v80 + 8), 10))
  {
    float __src = &v327;
    LOBYTE(v326) = 8;
    long long v327 = 0u;
    long long v328 = 0u;
    uint64_t v175 = *((unsigned __int16 *)v250 + 1461);
    if (!*((_WORD *)v250 + 1461)) {
      goto LABEL_367;
    }
    uint64_t v176 = *((void *)v80 + 3066) + 4;
    do
    {
      __int16 v177 = *(_WORD *)(v176 - 4);
      BOOL v178 = v177 - 1 >= 0x20 && v177 - 66 > 9;
      if (!v178 && (*(unsigned char *)(v176 + 3) & 1) != 0) {
        *(_DWORD *)((char *)&v327 + (((unint64_t)v177 >> 3) & 0x1C)) |= 1 << v177;
      }
      v176 += 8;
      --v175;
    }
    while (v175);
    if ((void)v327)
    {
LABEL_371:
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      v181 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v272);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v181, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&v349);
      long long v274 = v351;
      long long v275 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      char v182 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v268);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v182, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&v349);
      long long v270 = v351;
      long long v271 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      uint64_t v183 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v280);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v183, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&v349);
      long long v282 = v351;
      long long v283 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      unsigned int v184 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v291);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v184, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)&v349);
      long long v293 = v351;
      long long v294 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      unsigned int v185 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v276);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v185, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v276, (uint64_t)&v349);
      long long v278 = v351;
      long long v279 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      v186 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v260);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v186, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v260, (uint64_t)&v349);
      long long v262 = v351;
      long long v263 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      v187 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v264);
      *(void *)v319 = &v321;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v187, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v264, (uint64_t)&v349);
      long long v266 = v351;
      long long v267 = v352;
      BlueFin::GlSvIdSet::operator~((const void **)&__src, (uint64_t)&v345);
      v188 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v287);
      *(void *)v319 = &v321;
      uint64_t v80 = v251;
      LOBYTE(v320) = 8;
      long long v321 = 0u;
      long long v322 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v188, (int **)v319, (int **)&v345);
      BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
      long long v351 = v321;
      long long v352 = v322;
      BlueFin::GlSetBase::operator=((uint64_t)&v287, (uint64_t)&v349);
      long long v289 = v351;
      long long v290 = v352;
    }
    else
    {
LABEL_367:
      unint64_t v179 = 0;
      while (v179 != 6)
      {
        if (*((_DWORD *)&v327 + v179++ + 2))
        {
          if (v179 >= 7) {
            break;
          }
          goto LABEL_371;
        }
      }
    }
  }
  if ((*(unsigned int (**)(void))(**((void **)v80 + 8) + 32))(*((void *)v80 + 8)))
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    v189 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v189, (int **)v319, &v313);
    int v190 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v190, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v272);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&__src);
    long long v274 = v327;
    long long v275 = v328;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    v191 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v191, (int **)v319, &v313);
    BOOL v192 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v192, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v268);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&__src);
    long long v270 = v327;
    long long v271 = v328;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    long long v193 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v193, (int **)v319, &v313);
    BOOL v194 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v194, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v291);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)&__src);
    long long v293 = v327;
    long long v294 = v328;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    BOOL v195 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v195, (int **)v319, &v313);
    int32x2_t v196 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v196, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v260);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v260, (uint64_t)&__src);
    long long v262 = v327;
    long long v263 = v328;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    int v197 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v197, (int **)v319, &v313);
    uint64_t v198 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v198, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v264);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v264, (uint64_t)&__src);
    long long v266 = v327;
    long long v267 = v328;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    char v199 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v199, (int **)v319, &v313);
    int v200 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v200, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v280);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&__src);
    long long v282 = v327;
    long long v283 = v328;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v337, (unsigned int *)&v339, 8u, (const void **)&v301);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v337, (int **)v319, &v304);
    BlueFin::GlSetBase::operator=((uint64_t)&v337, (uint64_t)v319);
    long long v339 = v321;
    long long v340 = v322;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v337);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v341, (int **)v319, &v307);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    uint64_t v80 = v251;
    unsigned int v201 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v341);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v201, (int **)v319, &v313);
    uint64_t v202 = (const void **)BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
    long long v347 = v321;
    long long v348 = v322;
    BlueFin::GlSvIdSet::operator~(v202, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v276);
    *(void *)v319 = &v321;
    uint64_t v21 = v247;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v276, (uint64_t)&__src);
    long long v278 = v327;
    long long v279 = v328;
  }
  if ((*(unsigned int (**)(void))(**((void **)v80 + 8) + 256))(*((void *)v80 + 8))
    && ((*(uint64_t (**)(void))(**((void **)v80 + 10) + 32))(*((void *)v80 + 10)) & 1) == 0)
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v272);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&__src);
    long long v274 = v327;
    long long v275 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v268);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&__src);
    long long v270 = v327;
    long long v271 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v280);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&__src);
    long long v282 = v327;
    long long v283 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v291);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)&__src);
    long long v293 = v327;
    long long v294 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v276);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v276, (uint64_t)&__src);
    long long v278 = v327;
    long long v279 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v260);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v260, (uint64_t)&__src);
    long long v262 = v327;
    long long v263 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v264);
    *(void *)v319 = &v321;
    uint64_t v80 = v251;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v264, (uint64_t)&__src);
    long long v266 = v327;
    long long v267 = v328;
  }
  if (!(*(unsigned int (**)(void))(**((void **)v80 + 8) + 264))(*((void *)v80 + 8))) {
    goto LABEL_428;
  }
  if ((*(unsigned int (**)(void))(**((void **)v80 + 8) + 1208))(*((void *)v80 + 8)))
  {
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v272);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v272, (uint64_t)&__src);
    long long v274 = v327;
    long long v275 = v328;
    BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v349);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v327, 8u, (const void **)&v268);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)v319, (int **)&v349);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)v319);
    long long v327 = v321;
    long long v328 = v322;
    BlueFin::GlSetBase::operator=((uint64_t)&v268, (uint64_t)&__src);
    long long v270 = v327;
    long long v271 = v328;
  }
  if (v21[298]) {
    goto LABEL_428;
  }
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  for (unsigned int i = 52; i != 66; ++i)
    *((_DWORD *)&v321 + (i >> 5)) |= 1 << i;
  if (v281 >= 8u) {
    unint64_t v204 = 8;
  }
  else {
    unint64_t v204 = v281;
  }
  if (v204)
  {
    if ((v321 & *(_DWORD *)v280) != 0)
    {
      LODWORD(v20bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    }
    else
    {
      unint64_t v207 = 0;
      while (v204 - 1 != v207)
      {
        int v208 = *((_DWORD *)v280 + v207 + 1);
        int v209 = *((_DWORD *)&v321 + ++v207);
        if ((v209 & v208) != 0) {
          goto LABEL_401;
        }
      }
      unint64_t v207 = v204;
LABEL_401:
      LODWORD(v20bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v207 < v204;
    }
  }
  long long v327 = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  if (*(_DWORD *)v21 == 1) {
    LODWORD(v20bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  }
  if (v204) {
    int v210 = 3000;
  }
  else {
    int v210 = 0;
  }
  if (*(_DWORD *)v21) {
    unsigned int v211 = v210;
  }
  else {
    unsigned int v211 = 6000;
  }
  float __src = &v327;
  LOBYTE(v326) = 8;
  long long v328 = *(_OWORD *)algn_263BAA84C;
  long long v212 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v345, (unsigned int *)&v347, 8u, (const void **)&v280);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v212, (int **)v319, (int **)&v287);
  BlueFin::GlSetBase::operator=((uint64_t)&v345, (uint64_t)v319);
  long long v347 = v321;
  long long v348 = v322;
  long long v213 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v345);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v213, (int **)v319, (int **)&__src);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  if (*(_DWORD *)v349)
  {
LABEL_411:
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v341, (unsigned int *)&v343, 8u, (const void **)&v316);
    *(void *)v319 = &v321;
    LOBYTE(v320) = 8;
    long long v321 = 0u;
    long long v322 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v341, (int **)v319, (int **)&__src);
    BlueFin::GlSetBase::operator=((uint64_t)&v341, (uint64_t)v319);
    long long v343 = v321;
    long long v344 = v322;
    if (!*(_DWORD *)v341)
    {
      if (v342 <= 1uLL) {
        goto LABEL_418;
      }
      if (!*((_DWORD *)v341 + 1))
      {
        uint64_t v214 = 2;
        while (v342 != v214)
        {
          if (*((_DWORD *)v341 + v214++))
          {
            if (v214 - 1 < (unint64_t)v342) {
              goto LABEL_425;
            }
            break;
          }
        }
LABEL_418:
        unsigned int v216 = *((_DWORD *)v250 + 291);
LABEL_426:
        GlCustomLog(14, "Lms %u: thd %u Remove Gal Satellites from assisted search list\n", v216, v211);
        BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v345);
        double v219 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v280);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v219, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v280, (uint64_t)&v349);
        long long v282 = v351;
        long long v283 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v345);
        double v220 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v291);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v220, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v291, (uint64_t)&v349);
        long long v293 = v351;
        long long v294 = v352;
        BlueFin::GlSvIdSet::operator~((const void **)&v301, (uint64_t)&v345);
        double v221 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v287);
        *(void *)v319 = &v321;
        LOBYTE(v320) = 8;
        long long v321 = 0u;
        long long v322 = 0u;
        BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v221, (int **)v319, (int **)&v345);
        BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
        long long v351 = v321;
        long long v352 = v322;
        BlueFin::GlSetBase::operator=((uint64_t)&v287, (uint64_t)&v349);
        long long v289 = v351;
        long long v290 = v352;
        goto LABEL_428;
      }
    }
  }
  else if (v350 > 1uLL)
  {
    if (*(_DWORD *)(v349 + 4)) {
      goto LABEL_411;
    }
    uint64_t v217 = 2;
    while (v350 != v217)
    {
      if (*(_DWORD *)(v349 + 4 * v217++))
      {
        if (v217 - 1 < (unint64_t)v350) {
          goto LABEL_411;
        }
        break;
      }
    }
  }
LABEL_425:
  unsigned int v216 = *((_DWORD *)v250 + 291);
  if (v216 < v211) {
    goto LABEL_426;
  }
  v21[298] = 1;
  double v222 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v349, (unsigned int *)&v351, 8u, (const void **)&v280);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v222, (int **)v319, (int **)&v287);
  BlueFin::GlSetBase::operator=((uint64_t)&v349, (uint64_t)v319);
  long long v351 = v321;
  long long v352 = v322;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v252, (unsigned int *)v253, 8u, (const void **)&v349);
  *(void *)v319 = &v321;
  LOBYTE(v320) = 8;
  long long v321 = 0u;
  long long v322 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v252, (int **)v319, &v301);
  BlueFin::GlSetBase::operator=((uint64_t)&v252, (uint64_t)v319);
  v253[0] = v321;
  v253[1] = v322;
  BlueFin::GlMeSrdAidingMgr::ForceAidingRefresh((uint64_t)v80 + 240, &v252);
LABEL_428:
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 10864, (uint64_t)&v272);
  long long v223 = v275;
  *(_OWORD *)((char *)v80 + 10876) = v274;
  *(_OWORD *)((char *)v80 + 10892) = v223;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 10608), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 10864));
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 10384, (uint64_t)&v268);
  long long v224 = v271;
  *(_OWORD *)((char *)v80 + 10396) = v270;
  *(_OWORD *)((char *)v80 + 10412) = v224;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 10128), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 10384));
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 12616, (uint64_t)&v280);
  long long v225 = v283;
  *(_OWORD *)((char *)v80 + 12628) = v282;
  *(_OWORD *)((char *)v80 + 1264bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v225;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12360), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12616));
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 12928, (uint64_t)&v291);
  long long v226 = v294;
  *(_OWORD *)((char *)v80 + 12940) = v293;
  *(_OWORD *)((char *)v80 + 12956) = v226;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12672), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12928));
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 12304, (uint64_t)&v276);
  long long v227 = v279;
  *(_OWORD *)((char *)v80 + 12316) = v278;
  *(_OWORD *)((char *)v80 + 12332) = v227;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12048), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12304));
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 11344, (uint64_t)&v260);
  long long v228 = v263;
  *(_OWORD *)((char *)v80 + 11356) = v262;
  *(_OWORD *)((char *)v80 + 11372) = v228;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 11088), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 11344));
  BlueFin::GlSetBase::operator=((uint64_t)v243, (uint64_t)&v264);
  long long v229 = v267;
  *(_OWORD *)((char *)v80 + 11836) = v266;
  *(_OWORD *)((char *)v80 + 11852) = v229;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 11568), v243);
  BlueFin::GlSetBase::operator=((uint64_t)v80 + 13240, (uint64_t)&v256);
  long long v230 = v259;
  *(_OWORD *)((char *)v80 + 13252) = v258;
  *(_OWORD *)((char *)v80 + 13268) = v230;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 12984), (BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 13240));
  BlueFin::GlSetBase::operator=((uint64_t)v244, (uint64_t)&v287);
  long long v231 = v290;
  *(_OWORD *)((char *)v80 + 13876) = v289;
  *(_OWORD *)((char *)v80 + 13892) = v231;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId((BlueFin::GlMeSrdAcqMgrSm *)((char *)v80 + 13608), v244);
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetDspMeas(BlueFin::GlMeAcqWindowProvider *this, const BlueFin::GlSignalId *a2)
{
  return BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)(*((void *)this + 1) + 10624), a2, 1, 1);
}

uint64_t BlueFin::GlMeSrdSatPostSearchMgr::GetSearchMgrSource(BlueFin::GlMeSrdSatPostSearchMgr *this, unsigned int a2)
{
  if ((((unint64_t)*(unsigned int *)(*(void *)this + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_post_search_mgr.cpp", 62, "GetSearchMgrSource", (char)"HasSat(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_post_search_mgr.cpp", 62, "HasSat(ucSatid)");
  }
  return *((unsigned int *)this + a2 + 8);
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsBdsPrioritized(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2219);
}

uint64_t BlueFin::GlDbgEngine::SetRealTimeIntegrity(BlueFin::GlDbgEngine *this, char *a2, unsigned int a3)
{
  int v11 = a3;
  int v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1590);
    BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v11);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    uint64_t v7 = BlueFin::GlEngineImplStd::SetRealTimeIntegrity((BlueFin::GlDbgEngine *)((char *)this + 368), (const unsigned __int8 *)a2, a3);
    BOOL v10 = v7;
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 1590);
    int v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, &v10);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1413");
    return 0;
  }
  return v7;
}

#error "263A2488C: call analysis failed (funcsize=74)"

BOOL BlueFin::GlPosEng::SetRealTimeIntegrity(BlueFin::GlPosEng *this, const unsigned __int8 *a2, unsigned int a3)
{
  LODWORD(v17[0]) = 0;
  int v4 = BlueFin::GlPeDecodeRti::ParseRtiStatus((uint64_t)a2, a3);
  if (v4)
  {
    GlCustomLog(14, "SetRealTimeIntegrity: Failed to parse RTI (%d)\n", v4);
    return 0;
  }
  else
  {
    v6.i32[0] = v15.u16[1];
    v6.i32[1] = v15.u16[0];
    int32x2_t v7 = vtst_s32(v6, (int32x2_t)0xFFFF0000FFFFLL);
    uint16x4_t v8 = vcgt_u16(v15, (uint16x4_t)0x3B0017001F000CLL);
    v8.i16[0] = vmaxv_u16(v8);
    int v9 = (v16 < 0x3Cu) & ~v8.i32[0];
    if (!v14) {
      int v9 = 0;
    }
    if (v9 & v7.i32[1]) == 1 && (v7.i8[0])
    {
      if ((v14 & 3) != 0 || !(v14 % 0x64u))
      {
        HIDWORD(v11) = -1030792151 * v14;
        LODWORD(v11) = HIDWORD(v11);
        BOOL v10 = (v11 >> 4) < 0xA3D70B;
      }
      else
      {
        BOOL v10 = 1;
      }
      if (BlueFin::GlPosEng::SetRealTimeIntegrity(unsigned char const*,unsigned int)::aucDaysInMonth[12 * v10 - 1 + v15.u16[0]] >= v15.u16[1])
      {
        uint64_t v12 = *((void *)this + 4);
        double v13 = *(void (**)(void, unsigned __int16 *))(v12 + 208);
        if (v13) {
          v13(*(void *)(v12 + 8), &v14);
        }
      }
    }
    return BlueFin::GlPosEng::SetRealTimeIntegrity(this, v17, 1);
  }
}

BOOL BlueFin::GlPosEng::SetRealTimeIntegrity(void *a1, long long *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  long long v4 = a2[7];
  long long v45 = a2[6];
  long long v46 = v4;
  uint64_t v47 = *((void *)a2 + 16);
  long long v5 = a2[1];
  long long v39 = *a2;
  long long v40 = v5;
  long long v6 = a2[3];
  long long v41 = a2[2];
  long long v42 = v6;
  long long v7 = a2[5];
  long long v43 = a2[4];
  long long v44 = v7;
  int v8 = v39;
  if (v39 == 2)
  {
    GlCustomLog(14, "RTI from BLOCKLIST\n");
  }
  else if (v39 == 1)
  {
    GlCustomLog(14, "RTI for Emergency!\n");
  }
  else
  {
    if (v39)
    {
      GlCustomLog(11, "RTI type %d UNKNOWN\n", (__int16)v39);
      return 0;
    }
    int v9 = a1 + 50843;
    BOOL v10 = (uint64_t *)&v43 + 1;
    if (a3)
    {
      GlCustomLog(14, "RTI from File\n");
      unint64_t v11 = a1 + 50851;
      uint64_t v12 = -64;
      do
      {
        uint64_t v13 = *(void *)((char *)&v43 + v12 + 8);
        if (v13)
        {
          *(v11 - 8) = v13;
          *unint64_t v11 = *(void *)&v48[v12];
        }
        ++v11;
        v12 += 8;
      }
      while (v12);
    }
    else
    {
      GlCustomLog(14, "RTI from API\n");
      uint16x4_t v15 = a1 + 50868;
      uint64_t v16 = -64;
      do
      {
        uint64_t v17 = *(void *)((char *)&v43 + v16 + 8);
        if (v17)
        {
          *(v15 - 8) = v17;
          *uint16x4_t v15 = *(void *)&v48[v16];
        }
        ++v15;
        v16 += 8;
      }
      while (v16);
    }
    for (uint64_t i = 0; i != 8; ++i)
    {
      if (*v9)
      {
        uint64_t v19 = v9[17];
        if (v19)
        {
          uint64_t v20 = (v9[25] & v19 | v9[8] & *v9) & *(v10 - 8);
          if (v20 != *v10)
          {
            GlCustomLog(14, "RTI correction\n");
            switch((int)i)
            {
              case 0:
                uint64_t v21 = "GPS";
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", "GPS", HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
              case 1:
                uint64_t v21 = "SBS";
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", "SBS", HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
              case 2:
                uint64_t v21 = "GLO";
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", "GLO", HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
              case 3:
                uint64_t v21 = "QZS";
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", "QZS", HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
              case 5:
                uint64_t v21 = "BDS";
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", "BDS", HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
              case 7:
                uint64_t v21 = "NIC";
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", "NIC", HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
              default:
                if (i == 6) {
                  uint64_t v21 = "GAL";
                }
                else {
                  uint64_t v21 = "<->";
                }
                GlCustomLog(14, "file %s RTI     %08x%08x:%08x%08x\n", v21, HIDWORD(*v9), *v9, HIDWORD(v9[8]), v9[8]);
                break;
            }
            GlCustomLog(14, "api  %s RTI     %08x%08x:%08x%08x\n", v21, HIDWORD(v9[17]), v9[17], HIDWORD(v9[25]), v9[25]);
            *BOOL v10 = v20;
          }
        }
      }
      ++v10;
      ++v9;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = (uint64_t *)&v43 + 1;
  do
  {
    if (v22 & 0xFFFFFFF8) == 0 && ((0xAFu >> v22))
    {
      unsigned int v24 = off_2655DF988[v22];
    }
    else if (v22 == 6)
    {
      unsigned int v24 = "GAL";
    }
    else
    {
      unsigned int v24 = "<->";
    }
    uint64_t v25 = *(v23 - 8);
    uint64_t v26 = *v23++;
    GlCustomLog(14, "%s RTI     %016llx:%016llx\n", v24, v25, v26);
    ++v22;
  }
  while (v22 != 8);
  if (v8 != 2) {
    return BlueFin::GlReqSm::SetRealTimeIntegrity((uint64_t)(a1 + 15768), (uint64_t)&v39);
  }
  BlueFin::GlPeSvHealthHelper::OnBlocklistIntegrityInfo((uint64_t)(a1 + 22668), (uint64_t)&v39, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, *((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41,
    *((uint64_t *)&v41 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v44,
    BYTE4(v44));
  return 1;
}

BOOL BlueFin::GlReqSm::SetRealTimeIntegrity(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(_DWORD *)a2 == 1)
    {
      *(_OWORD *)(a1 + 54688) = *(_OWORD *)a2;
      long long v4 = *(_OWORD *)(a2 + 16);
      long long v5 = *(_OWORD *)(a2 + 32);
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 54752) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 54736) = v6;
      *(_OWORD *)(a1 + 54720) = v5;
      *(_OWORD *)(a1 + 5470bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
      uint64_t v7 = *(void *)(a2 + 128);
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 54800) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 5478bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v9;
      *(_OWORD *)(a1 + 54768) = v8;
      *(void *)(a1 + 54816) = v7;
      *(unsigned char *)(a1 + 5482bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    }
    else
    {
      *(_DWORD *)(a1 + 10848) |= 0x200000u;
      *(_OWORD *)(a1 + 9768) = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      long long v12 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 9816) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 9832) = v12;
      *(_OWORD *)(a1 + 978bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v10;
      *(_OWORD *)(a1 + 9800) = v11;
      long long v13 = *(_OWORD *)(a2 + 80);
      long long v14 = *(_OWORD *)(a2 + 96);
      long long v15 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 9896) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 986bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v14;
      *(_OWORD *)(a1 + 9880) = v15;
      *(_OWORD *)(a1 + 9848) = v13;
      __int16 v19 = 10;
      uint64_t v16 = *(void *)(a1 + 32);
      unint64_t v17 = *(void *)(a1 + 8);
      *(void *)(a1 + 32) = v17;
      do
      {
        unint64_t v20 = 0;
        if (BlueFin::patch_dispatch(v17, a1, (unsigned __int8 *)&v19, &v20)) {
          unint64_t v17 = v20;
        }
        else {
          unint64_t v17 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v19);
        }
        *(void *)(a1 + 32) = v17;
      }
      while (v17);
      *(void *)(a1 + 32) = v16;
    }
  }
  return a2 != 0;
}

uint64_t BlueFin::GlPeDecodeRti::ParseRtiStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void *)MEMORY[0x270FA5388](a1, a2);
  size_t v6 = v3;
  uint64_t v57 = *MEMORY[0x263EF8340];
  if (v3 > 0x1000)
  {
    DeviceFaultNotify("glpe_decode_rti.cpp", 159, "ParseRtiStatus", (char)"ciphertext_length <= MAX_RTI_MSG_LEN");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_decode_rti.cpp", 159, "ciphertext_length <= MAX_RTI_MSG_LEN");
  }
  uint64_t v7 = v5;
  *(_OWORD *)(v4 + 8) = 0u;
  long long v8 = (_OWORD *)(v4 + 8);
  v8[4] = 0u;
  double v48 = v8 + 4;
  float v49 = v8;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v8[1] = 0u;
  memcpy(__dst, v2, v3);
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = 0;
  if ((v6 & 0x3FFFFFFF8) != 0)
  {
    unsigned int v9 = -1640531527 * (0x34u / (unsigned __int16)(v6 >> 2)) - 1253254570;
    if (-1640531527 * (0x34u / (unsigned __int16)(v6 >> 2)) != 1253254570)
    {
      unsigned int v10 = __dst[0];
      do
      {
        uint64_t v11 = (v6 >> 2) - 1;
        do
        {
          unsigned int v12 = __dst[(v11 - 1)];
          unsigned int v10 = __dst[v11]
              - ((((v12 >> 5) ^ (4 * v10)) + ((16 * v12) ^ (v10 >> 3))) ^ ((*(_DWORD *)&aRtiparserMissi[4 * (((v9 >> 2) ^ v11) & 3)] ^ v12)
                                                                         + (v10 ^ v9)));
          __dst[v11] = v10;
        }
        while (v11-- > 1);
        unsigned int v10 = __dst[0]
            - ((((__dst[(v6 >> 2) - 1] >> 5) ^ (4 * v10))
              + ((16 * __dst[(v6 >> 2) - 1]) ^ (v10 >> 3))) ^ ((*(_DWORD *)&aRtiparserMissi[4 * ((v9 >> 2) & 3)] ^ __dst[(v6 >> 2) - 1])
                                                                           + (v10 ^ v9)));
        __dst[0] = v10;
        v9 += 1640531527;
      }
      while (v9);
    }
  }
  uint64_t v55 = v7;
  *(_WORD *)((char *)__dst + v6) = 0;
  if (LOBYTE(__dst[0]))
  {
    uint64_t v53 = v7 + 4;
    uint64_t v54 = v7 + 2;
    uint64_t v51 = v7 + 8;
    uint64_t v52 = v7 + 6;
    uint64_t v50 = v7 + 10;
    long long v14 = (const char *)__dst;
    do
    {
      size_t v15 = strcspn(v14, "\n");
      size_t v16 = v15;
      if (v15)
      {
        v14[v15] = 0;
        size_t v17 = strcspn(v14, "=");
        for (uint64_t i = &v14[v17 + 1]; ; ++i)
        {
          int v19 = *(unsigned __int8 *)i;
          if (v19 != 32 && v19 != 9) {
            break;
          }
        }
        if (strncmp("Version", v14, 7uLL))
        {
          if (!strncmp("Timestamp", v14, 9uLL))
          {
            if (sscanf(i, "%hd:%hd:%hd:%hd:%hd:%hd", v55, v54, v53, v52, v51, v50) != 6)
            {
              *(void *)uint64_t v55 = 0;
              *(void *)(v55 + 8) = 0;
              *(_DWORD *)(v55 + 16) = 0;
            }
          }
          else
          {
            uint64_t v21 = 0;
            while (1)
            {
              uint64_t v22 = (&BlueFin::GlPeDecodeRti::ParseRtiStatus(unsigned char const*,unsigned long,BlueFin::GL_RTI &,BlueFin::UTC_TIME &)::aotRtiGnssKey)[v21];
              if (*v22)
              {
                size_t v23 = strlen((&BlueFin::GlPeDecodeRti::ParseRtiStatus(unsigned char const*,unsigned long,BlueFin::GL_RTI &,BlueFin::UTC_TIME &)::aotRtiGnssKey)[v21]);
                if (!strncmp(v22, v14, v23)) {
                  break;
                }
              }
              v21 += 2;
              if (v21 == 18)
              {
                v14[v17] = 0;
                goto LABEL_62;
              }
            }
            uint64_t v24 = 0;
            uint64_t v25 = LODWORD((&BlueFin::GlPeDecodeRti::ParseRtiStatus(unsigned char const*,unsigned long,BlueFin::GL_RTI &,BlueFin::UTC_TIME &)::aotRtiGnssKey)[v21 + 1]);
            unint64_t v26 = 0xE243F0A181320uLL >> (8 * v25);
            uint64_t v27 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v25];
            *((void *)v49 + v27) = ~(-1 << v26);
            int v28 = BlueFin::GlPeDecodeRti::ParseRtiStatus(unsigned char const*,unsigned long,BlueFin::GL_RTI &,BlueFin::UTC_TIME &)::aucGnssBaseId[v25];
            int v29 = (v26 + v28 - 1);
            int v30 = v29 - v28;
            while (1)
            {
              unsigned int v31 = *(unsigned __int8 *)i;
              if (v31 <= 0x1F)
              {
                if (*i) {
                  BOOL v33 = v31 == 10;
                }
                else {
                  BOOL v33 = 1;
                }
                if (v33 || v31 == 13) {
                  break;
                }
              }
              else
              {
                while (v31 == 32)
                {
                  unsigned int v32 = *(unsigned __int8 *)++i;
                  unsigned int v31 = v32;
                }
              }
              if (v31 - 58 < 0xFFFFFFF6) {
                goto LABEL_62;
              }
              int v35 = atoi(i);
              int v36 = v35 - v28;
              BOOL v37 = v30 > 30 && v36 == v29 - v28 + 1;
              BOOL v38 = v37;
              BOOL v39 = v30 < 31 && v36 == 31;
              if (v39 || v38) {
                break;
              }
              if (v35 > v29 || v36 < 0) {
                goto LABEL_62;
              }
              uint64_t v40 = 1 << v36;
              long long v41 = i - 1;
              long long v42 = i + 1;
              do
              {
                long long v43 = v42;
                int v45 = *(unsigned __int8 *)++v41;
                int v44 = v45;
                ++v42;
              }
              while ((v45 - 48) < 0xA);
              v24 |= v40;
              while (v44 == 32)
              {
                int v46 = *(unsigned __int8 *)v43++;
                int v44 = v46;
              }
              if (v44 == 44) {
                uint64_t i = v43;
              }
              else {
                uint64_t i = v43 - 1;
              }
            }
            *((void *)v48 + v27) |= v24;
          }
        }
      }
LABEL_62:
      v14 += v16 + 1;
    }
    while (*v14);
  }
  return 0;
}

uint64_t BlueFin::GlPeOscMgr::FromSlogEntry(BlueFin::GlPeOscMgr *this, BlueFin::GlSysLogEntry *a2, BlueFin::GlPeOscMgr *a3, unsigned int a4)
{
  if (!this)
  {
    DeviceFaultNotify("glpe_oscmgr.cpp", 318, "FromSlogEntry", (char)"pEntry");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_oscmgr.cpp", 318, "pEntry");
  }
  __int16 v5 = (__int16)a3;
  size_t v16 = &unk_270EC1970;
  uint64_t result = BlueFin::GlPeOscData::Deserialize((BlueFin::GlPeOscData *)&v16, this);
  if (result)
  {
    uint64_t v8 = v18;
    if ((int)v8 >= 0) {
      LOWORD(v9) = v18;
    }
    else {
      int v9 = -(int)v8;
    }
    uint64_t v10 = v17;
    if ((int)v10 >= 0) {
      LOWORD(v11) = v17;
    }
    else {
      int v11 = -(int)v10;
    }
    if ((unsigned __int16)v9 > 0x1770u || (unsigned __int16)((unsigned __int16)v11 >> 2) > 0x6BCu)
    {
      return GlCustomLog(14, "OSC_STORE not read :Warning! Out of range osc offset values found %hdppb(%hdunc).Osc values from NVMEM not updated\n");
    }
    else
    {
      *((_WORD *)a2 + 5) = v18;
      *((_WORD *)a2 + 6) = v19;
      __int16 v12 = v20;
      uint64_t v13 = v21;
      *((_WORD *)a2 + 1) = v10 + v5;
      *((_WORD *)a2 + 12) = v12;
      *((_DWORD *)a2 + 7) = v13;
      if (a4 - 1 <= 0x17123FF)
      {
        unsigned int v14 = a4 / 0x93A80;
        unsigned int v15 = v13 - 1000 * (a4 % 0x93A80);
        *((_DWORD *)a2 + 7) = v15;
        if (v15 >= 0x240C8400)
        {
          *((_DWORD *)a2 + 7) = v15 - 604800000;
          LOWORD(v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v14 + 1;
        }
        *((_WORD *)a2 + 12) = v12 - v14;
      }
      return GlCustomLog(14, "OSC_STORE read %hdppb(%hdunc)[%u,%hu] + API %dppb(0unc)[%s-%u,0] = %hdppb(%hdunc)[%u,%hu]\n", v10, v8, v13);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeOscData::Deserialize(BlueFin::GlPeOscData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 71 && *((unsigned char *)a2 + 12) == 3;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_WORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 7) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 297);
  }
  return v3;
}

BlueFin::GlPeGloFcnOsnMgr *BlueFin::GlPeFixStatus::SetSIGMeasuement(BlueFin::GlPeFixStatus *this, BlueFin::GlPeMsmtMgr *a2, const BlueFin::GlMePlatfStat *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, BlueFin::GlBigArray *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, BlueFin::GlPeMsmtMgr *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__src,long long a32,long long a33,long long a34,long long a35,long long a36,int a37,unsigned __int8 a38,unsigned __int8 a39,unsigned __int16 a40,int a41,int a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,int *a52,int a53,unsigned int a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = MEMORY[0x270FA5388](this, a2);
  uint64_t v204 = v69;
  uint64_t v70 = (_DWORD *)v68;
  uint64_t v71 = 0;
  STACK[0x1F38] = *MEMORY[0x263EF8340];
  *(_OWORD *)&STACK[0x800] = 0u;
  *(_OWORD *)&STACK[0x810] = 0u;
  *(_OWORD *)&STACK[0x7E0] = 0u;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  uint64_t v214 = v72;
  uint64_t v205 = (char *)v72 + 56400;
  uint64_t v73 = v68 + 7316;
  *(_OWORD *)&STACK[0x7C0] = 0u;
  *(_OWORD *)&STACK[0x7D0] = 0u;
  uint64_t vars8 = v68 + 6916;
  vars0 = (unsigned char *)(v68 + 4176);
  *(_OWORD *)&STACK[0x7A0] = 0u;
  *(_OWORD *)&STACK[0x7B0] = 0u;
  *(_OWORD *)&STACK[0x780] = 0u;
  *(_OWORD *)&STACK[0x790] = 0u;
  *(_OWORD *)&STACK[0x760] = 0u;
  *(_OWORD *)&STACK[0x770] = 0u;
  *(_OWORD *)&STACK[0x740] = 0u;
  *(_OWORD *)&STACK[0x750] = 0u;
  *(_OWORD *)&STACK[0x720] = 0u;
  *(_OWORD *)&STACK[0x730] = 0u;
  *(_OWORD *)&STACK[0x700] = 0u;
  *(_OWORD *)&STACK[0x710] = 0u;
  *(_OWORD *)&STACK[0x6E0] = 0u;
  *(_OWORD *)&STACK[0x6F0] = 0u;
  *(_OWORD *)&STACK[0x6C0] = 0u;
  *(_OWORD *)&STACK[0x6D0] = 0u;
  *(_OWORD *)&STACK[0x6A0] = 0u;
  *(_OWORD *)&STACK[0x6B0] = 0u;
  *(_OWORD *)&STACK[0x680] = 0u;
  *(_OWORD *)&STACK[0x690] = 0u;
  *(_OWORD *)&STACK[0x660] = 0u;
  *(_OWORD *)&STACK[0x670] = 0u;
  *(_OWORD *)&STACK[0x640] = 0u;
  *(_OWORD *)&STACK[0x650] = 0u;
  *(_OWORD *)&STACK[0x620] = 0u;
  *(_OWORD *)&STACK[0x630] = 0u;
  uint64_t v74 = 200;
  uint64_t v75 = *(void *)(v68 + 7832);
  do
  {
    unsigned __int8 v76 = (char *)&STACK[0x620] + v71;
    *unsigned __int8 v76 = 0;
    *(void *)(v76 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0x700000000;
    v76[12] = 0;
    v76[16] = 0;
    *(_DWORD *)(v76 + 18) = 0;
    *((_DWORD *)v76 + 6) = 0;
    v71 += 32;
    *((_WORD *)v76 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    --v74;
  }
  while (v74);
  bzero(&STACK[0x300], 0x320uLL);
  *(_OWORD *)(v70 + 1206) = 0u;
  *(_OWORD *)(v70 + 1210) = 0u;
  *(_OWORD *)(v70 + 1198) = 0u;
  *(_OWORD *)(v70 + 1202) = 0u;
  *(_OWORD *)(v70 + 1190) = 0u;
  *(_OWORD *)(v70 + 119bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v70 + 1182) = 0u;
  *(_OWORD *)(v70 + 1186) = 0u;
  *(_OWORD *)(v70 + 117bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v70 + 1178) = 0u;
  *(_OWORD *)(v70 + 1166) = 0u;
  *(_OWORD *)(v70 + 1170) = 0u;
  *(_OWORD *)(v70 + 1158) = 0u;
  *(_OWORD *)(v70 + 1162) = 0u;
  *(_OWORD *)(v70 + 1150) = 0u;
  *(_OWORD *)(v70 + 115bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v70 + 1278) = 0u;
  *(_OWORD *)(v70 + 1282) = 0u;
  *(_OWORD *)(v70 + 1286) = 0u;
  *(_OWORD *)(v70 + 1290) = 0u;
  *(_OWORD *)(v70 + 129bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v70 + 1298) = 0u;
  *(_OWORD *)(v70 + 1302) = 0u;
  *(_OWORD *)(v70 + 1306) = 0u;
  *(_OWORD *)(v70 + 1310) = 0u;
  *(_OWORD *)(v70 + 131bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v70 + 1318) = 0u;
  *(_OWORD *)(v70 + 1322) = 0u;
  *(_OWORD *)(v70 + 1326) = 0u;
  *(_OWORD *)(v70 + 1330) = 0u;
  *(_OWORD *)(v70 + 133bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v70 + 1338) = 0u;
  bzero(v70 + 1454, 0x430uLL);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a52, &a54, 0x13u, (const void **)v214 + 12);
  BlueFin::GlSignalIdSet::GlSignalIdSet((uint64_t)&a20, *((void *)v70 + 1264) + 119904, 0);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&a32 + 1, 0x13u, (const void **)&a20);
  a64 = (int *)&a65 + 1;
  LOBYTE(a65) = 19;
  *(long long *)((char *)&a65 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a66 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a67 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a68 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)&STACK[0x280] = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, &a64, &a52);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&a64);
  *(long long *)((char *)&a34 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(long long *)((char *)&a67 + 4);
  *(long long *)((char *)&a35 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(long long *)((char *)&a68 + 4);
  a36 = *(_OWORD *)&STACK[0x280];
  *(long long *)((char *)&a32 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(long long *)((char *)&a65 + 4);
  *(long long *)((char *)&a33 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(long long *)((char *)&a66 + 4);
  a38 = a32;
  memcpy(&a42, __src, 4 * a32);
  a40 = 0;
  a39 = 0;
  a41 = a42;
  BlueFin::GlSetIterator::operator++(&a38);
  if (a39 == a38)
  {
    unint64_t v217 = 0;
    LODWORD(v77) = 0;
    LOBYTE(v210) = 0;
    LOBYTE(a6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    goto LABEL_98;
  }
  uint64_t v78 = 0;
  int v210 = 0;
  unint64_t v217 = 0;
  uint64_t v218 = (uint64_t)(v70 + 1968);
  int v208 = (BlueFin::GlBigArray *)(v70 + 2256);
  uint64_t v209 = v75 + 32;
  do
  {
    char v79 = a40;
    if (a40 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    uint64_t v216 = v78;
    uint64_t v80 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * a40;
    uint64_t v81 = *v80;
    int v82 = (char)v80[1];
    int v83 = v80[1];
    LOBYTE(a20) = v81;
    HIDWORD(a20) = v82;
    LOWORD(a21) = a40;
    uint64_t v84 = *(unsigned int *)((char *)a52 + (((unint64_t)a40 >> 3) & 0x1FFC));
    if ((v81 - 76) <= 0x3E
      || ((v81 - 1) >= 0x20 ? (BOOL v85 = (v81 - 66) > 9) : (BOOL v85 = 0), !v85))
    {
      uint64_t v86 = BlueFin::GlSvId::s_aucSvId2gnss[v81];
      __int16 v87 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v86 + 21] == 255
          ? 575
          : BlueFin::GlSignalId::s_ausGnss2signalId[v86]
          + v81
          - BlueFin::GlSvId::s_aucGnss2minSvId[v86]
          + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v86];
      if ((((unint64_t)a52[v87 >> 5] >> (v87 & 0x1F)) & 1) != 0 && !v83)
      {
LABEL_17:
        uint64_t v77 = v216;
        goto LABEL_89;
      }
    }
    AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v209, (unsigned __int8 *)&a20);
    uint64_t v89 = AidBySvId;
    uint64_t v90 = (1 << (v79 & 0x1F)) & v84;
    if (AidBySvId)
    {
      LODWORD(v213) = *((unsigned __int16 *)AidBySvId + 37);
      HIDWORD(v213) = *((unsigned __int16 *)AidBySvId + 36);
      unsigned int v91 = *((_DWORD *)AidBySvId + 3) - 1;
      BOOL v92 = v91 >= 3;
      __int16 v212 = (v91 < 3) << 10;
      int v93 = v210;
      if (!v92) {
        int v93 = v210 + 1;
      }
      int v210 = v93;
      uint64_t v94 = *((unsigned int *)AidBySvId + 1);
      if ((int)v94 <= 6)
      {
        int v215 = AidBySvId[8];
        if ((v215 - 1) < 0x3F) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      if (!v90) {
        goto LABEL_17;
      }
      uint64_t v213 = 0;
      __int16 v212 = 0;
    }
    int v95 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)v70 + 1264) + 119744);
    LODWORD(a6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 7;
    BYTE4(a6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(v95, (unsigned __int8 *)&a20, (uint64_t)&a64);
    uint64_t v94 = a64;
    LOBYTE(v215) = BYTE4(a64);
    if ((int)a64 <= 6 && a64 == 2 && BYTE4(a64) - 1 >= 0x3F)
    {
      LODWORD(a6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 7;
      BYTE4(a6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      if (!BlueFin::GlPeSvIdConverter::SvId2PossibleGnss((BlueFin::GlPeGloFcnOsnMgr **)(*((void *)v70 + 1264) + 119744), &a20, (uint64_t)&a64, (uint64_t)&__src))goto LABEL_17; {
      LOBYTE(v215) = BYTE4(a64);
      }
      uint64_t v94 = 2u;
    }
LABEL_31:
    if (v90)
    {
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v214, (const BlueFin::GlSignalId *)&a20, 0, 1u);
      uint64_t v97 = 1 << (v215 - 1);
      unsigned int v98 = BYTE4(a20);
      unsigned int v99 = *((_DWORD *)MeMeas + 3);
      if ((v99 & 2) != 0)
      {
        unint64_t v100 = (unint64_t)&v70[16 * (unint64_t)BYTE4(a20)
                                    + 2 * BlueFin::GlImplGnss::m_aucEnabledGnssTable[v94]];
        *(void *)(v100 + 4600) |= v97;
        if (*((float *)MeMeas + 25) < 0.0000000158999995) {
          *(void *)(v100 + 5112) |= v97;
        }
      }
      if ((v99 & 0x40000) != 0)
      {
        unint64_t v101 = (unint64_t)&v70[16 * (unint64_t)v98
                                    + 2 * BlueFin::GlImplGnss::m_aucEnabledGnssTable[v94]];
        *(void *)(v101 + 5816) |= v97;
      }
      if ((v99 & 0x400000) != 0) {
        *(void *)&v70[2 * BlueFin::GlImplGnss::m_aucEnabledGnssTable[v94] + 1518] |= v97;
      }
      float v102 = 0.0;
      if ((v99 & 0x4000) != 0) {
        float v102 = *((float *)MeMeas + 27);
      }
      uint64_t v103 = BlueFin::GlSignalIdArray::Get(*((void *)v214 + 2397), (uint64_t)&a20);
      if (v103) {
        char v211 = *(unsigned char *)(v103 + 448);
      }
      else {
        char v211 = 0;
      }
      uint64_t v106 = BlueFin::GlSignalIdArray::Get(*((void *)v214 + 2397), (uint64_t)&a20);
      int v104 = (v99 >> 14) & 1;
      if (v106) {
        char v105 = *(unsigned char *)(v106 + 449);
      }
      else {
        char v105 = 0;
      }
    }
    else
    {
      int v104 = 0;
      char v211 = 8;
      float v102 = 0.0;
      char v105 = 8;
    }
    int v107 = *v70;
    uint64_t v108 = BlueFin::GlSignalIdArray::Get(v218, (uint64_t)&a20);
    if (v108)
    {
      if (v104) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v108 = (uint64_t)BlueFin::GlBigArray::Add(v208, (unsigned __int16)a21);
      if (!v108)
      {
        a64 = v70 + 2256;
        LOWORD(a65) = *(_WORD *)(v73 + 1742) + 1;
        if (*(unsigned __int16 *)(v73 + 1740) <= (unsigned __int16)a65) {
          goto LABEL_199;
        }
        int v110 = 0;
        unsigned __int16 v111 = 575;
        unsigned int v112 = -1;
        do
        {
          BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&a64, (uint64_t)&__src);
          unsigned int v113 = *(_DWORD *)(BlueFin::GlSignalIdArray::Get(v218, (uint64_t)&__src) + 4);
          BOOL v114 = v113 <= v112;
          if (v113 <= v112) {
            unsigned __int16 v111 = a32;
          }
          if (v113 < v112) {
            unsigned int v112 = v113;
          }
          v110 |= v114;
        }
        while ((unsigned __int16)a65 < *((unsigned __int16 *)a64 + 16));
        if ((v110 & 1) == 0)
        {
LABEL_199:
          DeviceFaultNotify("glpe_fixstatus.cpp", 1137, "Get", (char)"bHaveSignalIdToRemove");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_fixstatus.cpp", 1137, "bHaveSignalIdToRemove");
        }
        BlueFin::GlBigArray::Remove((uint64_t)v208, v111);
        uint64_t v108 = (uint64_t)BlueFin::GlBigArray::Add(v208, (unsigned __int16)a21);
        if (!v108)
        {
          DeviceFaultNotify("glpe_fixstatus.cpp", 1144, "Get", (char)"pSnrHist");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_fixstatus.cpp", 1144, "pSnrHist");
        }
      }
      *(void *)uint64_t v108 = 0;
      if (v104)
      {
LABEL_50:
        *(_DWORD *)(v108 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v107;
        char v109 = v211;
LABEL_67:
        *(float *)uint64_t v108 = v102;
        goto LABEL_68;
      }
    }
    char v109 = v211;
    if (v102 >= 7.0) {
      goto LABEL_67;
    }
    if ((v107 - *(_DWORD *)(v108 + 4)) > 0x3E8) {
      goto LABEL_67;
    }
    uint64_t v115 = *((void *)v70 + 1261);
    if (!*(unsigned char *)(v115 + 4048) || (*(unsigned char *)(v115 + 4068) & 8) != 0) {
      goto LABEL_67;
    }
    int v104 = 1;
LABEL_68:
    if (v102 >= 7.0) {
      int v116 = 1;
    }
    else {
      int v116 = v104;
    }
    if (v116) {
      int v117 = -2048;
    }
    else {
      int v117 = 0;
    }
    if (v213 == 1 && HIDWORD(v213) == 0) {
      __int16 v119 = 2;
    }
    else {
      __int16 v119 = v213;
    }
    if (v89) {
      int v120 = -512;
    }
    else {
      int v120 = 0;
    }
    *((_DWORD *)&STACK[0x300] + v217) = v120 - (v212 & 0x400 | v213) + v117;
    uint64_t v121 = &STACK[0x620] + 4 * v217;
    *(unsigned char *)uint64_t v121 = (_BYTE)a20;
    if (v89) {
      __int16 v122 = WORD2(v213);
    }
    else {
      __int16 v122 = 0;
    }
    if (!v89) {
      __int16 v119 = 1;
    }
    *((unsigned char *)v121 + 12) = v215;
    *((unsigned char *)v121 + 16) = v116;
    *((_WORD *)v121 + 9) = v122;
    *((_WORD *)v121 + 10) = v119;
    *((float *)v121 + 6) = v102;
    *((unsigned char *)v121 + 28) = v109;
    *((unsigned char *)v121 + 29) = v105;
    *((_DWORD *)v121 + 1) = HIDWORD(a20);
    *((_DWORD *)v121 + 2) = v94;
    uint64_t v77 = (v216 + 1);
LABEL_89:
    BlueFin::GlSetIterator::operator++(&a38);
    unint64_t v217 = v77;
    uint64_t v78 = v77;
  }
  while (a39 != a38 && v77 <= 0xC7);
  LOBYTE(a6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  if (v77 >= 2)
  {
    uint64_t v123 = 1;
    do
    {
      int v124 = *((_DWORD *)&STACK[0x300] + v123);
      unsigned __int8 v125 = v123;
      while (1)
      {
        uint64_t v126 = *((unsigned __int8 *)&a64 + v125 - 1);
        if (*((_DWORD *)&STACK[0x300] + v126) <= v124) {
          break;
        }
        *((unsigned char *)&a64 + v125--) = v126;
        if (!v125)
        {
          unsigned __int8 v125 = 0;
          break;
        }
      }
      *((unsigned char *)&a64 + v125) = v123++;
    }
    while (v123 != v77);
  }
LABEL_98:
  *uint64_t v70 = *(_DWORD *)v214;
  *((_WORD *)v70 + 2137) = 0;
  uint64_t v127 = *((void *)v70 + 980);
  *((unsigned char *)v70 + 4051) = *(unsigned char *)(v127 + 2589) == 0;
  unsigned char *vars0 = *(unsigned char *)(v127 + 2588);
  BlueFin::GlPeFixStatus::SetTime((unsigned int **)v70);
  GlCustomLog(14, "--GlPe_FixStatus::SetSIGMeasurement Setting utc time to %04hu/%02hu/%02hu %02hu:%02hu:%02hu.%03hu%03hu  UncUs:", *((unsigned __int16 *)v70 + 2), *((unsigned __int16 *)v70 + 3), *((unsigned __int16 *)v70 + 4), *((unsigned __int16 *)v70 + 5), *((unsigned __int16 *)v70 + 6), *((unsigned __int16 *)v70 + 7), *((unsigned __int16 *)v70 + 8), *((unsigned __int16 *)v70 + 9));
  if (v70[5] == -1) {
    GlCustomLog(14, "<invalid>\n");
  }
  else {
    GlCustomLog(14, "%u\n", v70[5]);
  }
  int v128 = 100;
  if (v217 < 0x64) {
    int v128 = v217;
  }
  *((_WORD *)v70 + 22) = v128;
  GlCustomLog(14, "--GlPe_FixStatus::SetSIGMeasurement  Chose best %hd out of %hd SVs LMS:%u TimeSource:%d\n", v128, v77, *v70, v70[10]);
  uint64_t v129 = *((void *)v70 + 1268);
  if (*(unsigned char *)(v129 + 25)) {
    BOOL v130 = 1;
  }
  else {
    BOOL v130 = *(_DWORD *)(v129 + 44) != -7200001;
  }
  *(unsigned char *)(vars8 + 360) = v130;
  *(unsigned char *)(vars8 + 361) = *(unsigned char *)(v129 + 26);
  *(unsigned char *)(vars8 + 362) = *(unsigned char *)(v129 + 24);
  v70[1820] = v210;
  *(unsigned char *)(v73 + 33) = 0;
  if (*((__int16 *)v70 + 22) >= 1)
  {
    uint64_t v131 = 0;
    uint64_t v132 = 1858;
    while (1)
    {
      uint64_t v133 = &v70[v131];
      uint64_t v134 = &STACK[0x620] + 4 * *((unsigned __int8 *)&a64 + v132 - 1858);
      uint64_t v135 = *(unsigned __int8 *)v134;
      *((_OWORD *)v133 + 3) = 0u;
      *((_OWORD *)v133 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *((void *)v133 + 10) = 0;
      *((unsigned char *)v133 + 49) = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
                              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                              + v135);
      int v137 = *((_DWORD *)v134 + 1);
      uint64_t v136 = *((unsigned int *)v134 + 2);
      *((unsigned char *)v133 + 50) = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v136];
      *((unsigned char *)v133 + 48) = *((unsigned char *)v134 + 16) != 0;
      __int16 v138 = *((_WORD *)v134 + 9) % 0x168u;
      int v139 = *((unsigned __int8 *)v134 + 12);
      *((unsigned char *)v133 + 51) = v139;
      *((_WORD *)v133 + 37) = -200;
      *((_WORD *)v133 + 27) = v138;
      *((_WORD *)v133 + 26) = *((_WORD *)v134 + 10);
      *((unsigned char *)v133 + 83) = *((unsigned char *)v134 + 28);
      *((unsigned char *)v133 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((unsigned char *)v134 + 29);
      *((unsigned char *)v133 + 82) = v137;
      if ((int)v136 > 6
        || (v139 - 1) > 0x3E
        || !BlueFin::GlPeSvHealthHelper::IsBadByRti(*((void *)v70 + 1267) + 32, (int *)((unint64_t)v134 | 8)))
      {
        goto LABEL_116;
      }
      uint64_t v140 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)((unint64_t)v134 | 8)];
      *(void *)&v70[2 * v140 + 1422] |= 1 << (*((unsigned char *)v133 + 51) - 1);
      int v141 = *((__int16 *)v133 + 26);
      if (v141 == 1) {
        break;
      }
      if ((v141 & 0x80000000) == 0) {
        goto LABEL_115;
      }
LABEL_116:
      v70[v132] = *((_DWORD *)v134 + 6);
      if (*(unsigned char *)((unint64_t)v134 | 0x10))
      {
        uint64_t v142 = *(int *)((unint64_t)v134 | 4);
        uint64_t v143 = *(unsigned __int8 *)v134;
        LOBYTE(__src) = *(unsigned char *)v134;
        HIDWORD(__src) = v142;
        LOWORD(a32) = 575;
        if (v142 != -1 && (v143 + 67) >= 0x44u)
        {
          uint64_t v144 = BlueFin::GlSvId::s_aucSvId2gnss[v143];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v142 - v142 + v144] == 255) {
            HIDWORD(__src) = -1;
          }
          else {
            LOWORD(a32) = BlueFin::GlSignalId::s_ausGnss2signalId[v144]
          }
                        + v143
                        - BlueFin::GlSvId::s_aucGnss2minSvId[v144]
                        + v142 * BlueFin::GlSvId::s_aucGnss2numSvId[v144];
        }
        uint64_t v145 = (int *)BlueFin::GlSignalIdArray::Get((uint64_t)(v70 + 1968), (uint64_t)&__src);
        if (v145) {
          int v146 = *v145;
        }
        else {
          int v146 = 0;
        }
        v70[v131 + 16] = v146;
        uint64_t v148 = 56;
        if (!HIDWORD(__src)) {
          uint64_t v148 = 52;
        }
        uint64_t v147 = *((void *)v70 + 1265);
        if (*(float *)(v147 + v148) >= 0.0) {
          float v149 = *(float *)(v147 + v148);
        }
        else {
          float v149 = 0.0;
        }
        uint64_t v150 = (float *)BlueFin::GlSignalIdArray::Get((uint64_t)(v70 + 1968), (uint64_t)&__src);
        if (v150) {
          float v151 = *v150;
        }
        else {
          float v151 = 0.0;
        }
        float v152 = v149 + v151;
        unsigned int v153 = (float *)&v70[v131];
        v153[17] = v152;
        *((_WORD *)v153 + 36) = (int)(float)(v152 + -174.0);
        float v154 = *(float *)((unint64_t)v134 | 0x18) + (float)(int)v149;
        *((_WORD *)v153 + 40) = (int)(float)((float)((float)(v154 + -174.0) * 10.0) + -0.5);
        v153[19] = v154 * 10.0;
        *((_WORD *)v133 + 37) = (int)(float)((float)(v154 + -174.0) + -0.5);
      }
      uint64_t v155 = v132 - 1857;
      ++v132;
      v131 += 10;
      if (v155 >= *((__int16 *)v70 + 22)) {
        goto LABEL_135;
      }
    }
    if (!*((_WORD *)v133 + 27)) {
      goto LABEL_116;
    }
LABEL_115:
    *(unsigned char *)(v73 + 33) = 1;
    goto LABEL_116;
  }
LABEL_135:
  *(void *)uint64_t v73 = *(void *)v205;
  v70[1831] = *((_DWORD *)v205 + 2);
  v70[1832] = *((_DWORD *)v205 + 3);
  *((_WORD *)v70 + 3666) = *((_WORD *)v205 + 31) + *((_WORD *)v205 + 24);
  *((_WORD *)v70 + 3667) = *((_WORD *)v205 + 25);
  *((_WORD *)v70 + 3668) = *((_WORD *)v205 + 32) + *((_WORD *)v205 + 26);
  *((_WORD *)v70 + 3669) = *((_WORD *)v205 + 27);
  v70[1835] = *((_DWORD *)v205 + 14);
  *((_WORD *)v70 + 3672) = *((_WORD *)v205 + 8);
  *((_WORD *)v70 + 3673) = *((_WORD *)v205 + 9);
  uint64_t v156 = *((void *)v70 + 981);
  int v157 = *(__int16 *)(v156 + 2);
  int v158 = *(__int16 *)(v156 + 10);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  double v159 = (double)v158 * 0.000000001;
  if (v159 != 0.0)
  {
    if ((v161 = v159 * 1000000000.0, double v162 = 0.5, v159 * 1000000000.0 <= 0.0)
      && (double v162 = -0.5, v159 * 1000000000.0 >= 0.0)
      || (int)(v161 + v162) <= 5)
    {
      uint64_t v163 = *(__int16 *)(v73 + 2968);
      if (!*(_WORD *)(v73 + 2968))
      {
        v70[1067] = 0;
        vars0[96] = 0;
        if (*(unsigned char *)(v73 + 2980)) {
          v70[1065] = 0;
        }
      }
      float v164 = (double)v157 * 0.000000001 * 1000000000.0;
      *(float *)&v70[v163 + 2551] = v164;
      float v165 = v161;
      *(float *)&v70[v163 + 2561] = v165;
      __int16 v166 = v163 + 1;
      int v167 = (__int16)(v163 + 1);
      *(_WORD *)(v73 + 2968) = v166;
      if (v159 < 0.000000005)
      {
        uint64_t v168 = *((void *)v70 + 1266);
        float v169 = *(float *)&v70[v167 + 2550];
        double v170 = v169;
        if (v169 > 0.0)
        {
          double v171 = 0.5;
          goto LABEL_164;
        }
        if (v169 < 0.0)
        {
          double v171 = -0.5;
LABEL_164:
          int v181 = (int)(v170 + v171);
        }
        else
        {
          int v181 = 0;
        }
        if (*(_DWORD *)(v168 + 220) == 4)
        {
          int v182 = v181 - *(_DWORD *)(v168 + 224);
          if ((v182 + 300) < 0x259) {
            int v183 = 6;
          }
          else {
            int v183 = 7;
          }
          *(_DWORD *)(v168 + 220) = v183;
          *(_DWORD *)(v168 + 22bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v182;
          *(unsigned char *)(v168 + 232) = 1;
        }
      }
      if (v167 >= *(__int16 *)(v73 + 2976))
      {
        vars0[96] = 1;
        float v184 = *((float *)v70 + 2551);
        float v185 = *((float *)v70 + 2561);
        if (v167 < 2)
        {
          float v190 = *((float *)v70 + 2561);
          float v189 = *((float *)v70 + 2551);
          float v191 = v189;
        }
        else
        {
          uint64_t v186 = (unsigned __int16)v167;
          v187 = (float *)(v70 + 2562);
          uint64_t v188 = v186 - 1;
          float v189 = *((float *)v70 + 2551);
          float v190 = *((float *)v70 + 2561);
          do
          {
            float v191 = *(v187 - 10);
            if (v184 <= v191)
            {
              if (v189 < v191)
              {
                float v190 = *v187;
                float v189 = *(v187 - 10);
              }
              float v191 = v184;
            }
            else
            {
              float v185 = *v187;
            }
            ++v187;
            float v184 = v191;
            --v188;
          }
          while (v188);
        }
        float v192 = v189 - v191;
        if (v192 < 0.0) {
          float v192 = -v192;
        }
        float v193 = v190 + v185;
        if (*(unsigned char *)(v73 + 2980))
        {
          *(unsigned char *)(v73 + 2980) = 0;
          *(_WORD *)(v73 + 2968) = 0;
          vars0[82] = v192 < 40.0;
          int v194 = (int)(v192 + -0.5);
          if (v192 >= 0.0) {
            int v194 = 0;
          }
          if (v192 > 0.0) {
            int v194 = (int)(v192 + 0.5);
          }
          v70[1065] = v194;
          BlueFin::GlPePlatfStat::SetOscDrift(*((void *)v70 + 1266), 0, v192 < 40.0, v192, v193);
        }
        else
        {
          vars0[88] = v192 < 10.0;
          int v195 = (int)(v192 + -0.5);
          if (v192 >= 0.0) {
            int v195 = 0;
          }
          if (v192 > 0.0) {
            int v195 = (int)(v192 + 0.5);
          }
          v70[1067] = v195;
          BlueFin::GlPePlatfStat::SetOscDrift(*((void *)v70 + 1266), 10, v192 < 10.0, v192, v193);
          int v196 = *(__int16 *)(v73 + 2968);
          int v197 = v196 - 1;
          int v198 = v196 - 2;
          float v199 = *(float *)&v70[v197 + 2551] - *(float *)&v70[v198 + 2551];
          if (v199 < 0.0) {
            float v199 = -v199;
          }
          BlueFin::GlPePlatfStat::SetOscDrift(*((void *)v70 + 1266), 1, v199 < 5.0, v199, *(float *)&v70[v197 + 2561] + *(float *)&v70[v198 + 2561]);
          if (*(unsigned __int16 *)(v73 + 2968) >= 0xAu)
          {
            *(_WORD *)(v73 + 2968) = 9;
            long long v200 = *((_OWORD *)v70 + 638);
            long long v201 = *((_OWORD *)v70 + 639);
            v70[2559] = v70[2560];
            *(_OWORD *)(v70 + 2551) = v200;
            *(_OWORD *)(v70 + 2555) = v201;
            long long v202 = *(_OWORD *)(v70 + 2562);
            long long v203 = *(_OWORD *)(v70 + 2566);
            v70[2569] = v70[2570];
            *(_OWORD *)(v70 + 2561) = v202;
            *(_OWORD *)(v70 + 2565) = v203;
          }
        }
      }
    }
  }
  if (v204)
  {
    v70[1737] = *(_DWORD *)(v204 + 36);
    v70[1733] = *(_DWORD *)(v204 + 20);
    *(void *)(vars8 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(void *)(v204 + 28);
    *(_OWORD *)uint64_t vars8 = *(_OWORD *)(v204 + 4);
    v70[1734] = *(_DWORD *)(v204 + 24);
  }
  int v160 = *(__int16 *)(v73 + 2978);
  if (v160 <= 0)
  {
    uint64_t v172 = 0;
    unsigned __int16 v173 = v70 + 1438;
    *(_OWORD *)(v70 + 1446) = 0u;
    *(_OWORD *)(v70 + 1450) = 0u;
    *(_OWORD *)(v70 + 1438) = 0u;
    *(_OWORD *)(v70 + 1442) = 0u;
    do
    {
      BlueFin::GlPeAlmMgr::GetValidity((uint64_t *)(*((void *)v70 + 1264) + 34112), v172, 0, (uint64_t)&a20);
      LOBYTE(__src) = a21;
      memcpy(&a32, a20, 4 * a21);
      WORD1(__src) = 0;
      BYTE1(__src) = 0;
      HIDWORD(__src) = a32;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
      if (BYTE1(__src) != __src)
      {
        uint64_t v174 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v172];
        uint64_t v175 = *(void *)&v173[2 * v174];
        do
        {
          v175 |= 1 << (BYTE2(__src) - 1);
          *(void *)&v173[2 * v174] = v175;
          *(_WORD *)(v73 + 2978) = 300;
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&__src);
        }
        while (BYTE1(__src) != __src);
      }
      ++v172;
    }
    while (v172 != 7);
  }
  else
  {
    *(_WORD *)(v73 + 2978) = v160 - 1;
  }
  uint64_t v176 = 0;
  __int16 v177 = (BlueFin::GlPeGloFcnOsnMgr *)(*((void *)v70 + 1264) + 119744);
  LODWORD(__src) = 2;
  BOOL v178 = v70 + 1852;
  do
  {
    BYTE4(__src) = v176 + 1;
    uint64_t result = BlueFin::GlPeSvIdConverter::Gnss2SvId(v177, (unsigned int *)&__src, &a20);
    char v180 = (_BYTE)a20 - 59;
    if (((_BYTE)a20 - 1) >= 0xBCu) {
      char v180 = -8;
    }
    *((unsigned char *)v178 + v176++) = v180;
  }
  while (v176 != 24);
  return result;
}

double BlueFin::GlSignalIdSet::GlSignalIdSet(uint64_t a1, uint64_t a2, char a3)
{
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v4 = (_OWORD *)(a1 + 12);
  *(void *)a1 = a1 + 12;
  *(unsigned char *)(a1 + 8) = 19;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  int v6 = 1 << a3;
  BlueFin::GlSignalIdSet::GlSignalIdSet((uint64_t)v7, a2, &v6);
  BlueFin::GlSetBase::operator=(a1, (uint64_t)v7);
  *(_OWORD *)(a1 + 28) = v9;
  *(_OWORD *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v10;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v11[12];
  double result = *(double *)&v8;
  *uint64_t v4 = v8;
  return result;
}

uint64_t BlueFin::GlSignalIdSet::GlSignalIdSet(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v4 = a1 + 12;
  *(void *)a1 = a1 + 12;
  *(unsigned char *)(a1 + 8) = 19;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  unsigned __int8 v14 = *(unsigned char *)(a2 + 8);
  memcpy(v18, *(const void **)a2, 4 * v14);
  __int16 v16 = 0;
  unsigned __int8 v15 = 0;
  int v17 = v18[0];
  BlueFin::GlSetIterator::operator++(&v14);
  while (v15 != v14)
  {
    int v12 = *a3;
    int v13 = v12;
    int v11 = 1;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v11);
    if (BYTE1(v11) != v11)
    {
      uint64_t v5 = v16;
      unsigned __int8 v6 = v16 + 67;
      do
      {
        if (SHIWORD(v11) != -1 && v6 >= 0x44u)
        {
          uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * SHIWORD(v11)
                                                                                       - SHIWORD(v11)
                                                                                       + v7] != 255
            && (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v7]
                                + v5
                                - BlueFin::GlSvId::s_aucGnss2minSvId[v7]
                                + HIWORD(v11) * BlueFin::GlSvId::s_aucGnss2numSvId[v7]) <= 0x23Eu)
          {
            unsigned __int16 v8 = BlueFin::GlSignalId::s_ausGnss2signalId[v7]
               + v5
               - BlueFin::GlSvId::s_aucGnss2minSvId[v7]
               + HIWORD(v11) * BlueFin::GlSvId::s_aucGnss2numSvId[v7];
            *(_DWORD *)(v4 + 4 * (v8 >> 5)) |= 1 << v8;
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v11);
      }
      while (BYTE1(v11) != v11);
    }
    BlueFin::GlSetIterator::operator++(&v14);
  }
  return a1;
}

void FireCallback::GlReqOnStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 56);
    if (v10)
    {
      uint64_t v12 = a1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 48))(v10, &v12);
      return;
    }
    int v11 = "fcb,fReqOnStopCb,nullptr";
  }
  else
  {
    int v11 = "fcb,GlReqOnStop,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8>,void ()(BlueFin::GlRequest *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  long long v9 = *(void **)(a1 + 8);
  FireDeviceLog::DeviceLogBase(5, "ReqOnStopImpl,%p", a3, a4, a5, a6, a7, a8, *a2);

  FireMessageHandler::eraseRequest(v9, v8, v10, v11, v12, v13, v14, v15);
}

void FireMessageHandler::eraseRequest(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  uint64_t v10 = a1 + 165;
  uint64_t v11 = a1 + 165;
  do
  {
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_8;
    }
  }
  while (v11[3] != a2);
  unint64_t v12 = *((int *)v11 + 4);
  if (v12 == -1)
  {
LABEL_8:
    FireDeviceLog::DeviceLogBase(2, "#fmh,eraseRequest,request,%p,notExist", a3, a4, a5, a6, a7, a8, a2);
    return;
  }
  int8x8_t v13 = (int8x8_t)a1[164];
  if (!*(void *)&v13) {
    goto LABEL_52;
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = v12;
    if (*(void *)&v13 <= v12) {
      unint64_t v15 = v12 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v13 - 1) & v12;
  }
  uint64_t v16 = a1[163];
  int v17 = *(void ***)(v16 + 8 * v15);
  if (!v17) {
    goto LABEL_52;
  }
  __int16 v18 = *v17;
  if (!*v17) {
    goto LABEL_52;
  }
  uint64_t v19 = *(void *)&v13 - 1;
  while (1)
  {
    unint64_t v20 = v18[1];
    if (v20 == v12) {
      break;
    }
    if (v14.u32[0] > 1uLL)
    {
      if (v20 >= *(void *)&v13) {
        v20 %= *(void *)&v13;
      }
    }
    else
    {
      v20 &= v19;
    }
    if (v20 != v15) {
      goto LABEL_52;
    }
LABEL_22:
    __int16 v18 = (void *)*v18;
    if (!v18) {
      goto LABEL_52;
    }
  }
  if (*((_DWORD *)v18 + 4) != v12) {
    goto LABEL_22;
  }
  uint64_t v21 = *v18;
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v22 = v12;
    if (*(void *)&v13 <= v12) {
      unint64_t v22 = v12 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v22 = v19 & v12;
  }
  size_t v23 = *(void **)(v16 + 8 * v22);
  do
  {
    uint64_t v24 = v23;
    size_t v23 = (void *)*v23;
  }
  while (v23 != v18);
  if (v24 == v10) {
    goto LABEL_41;
  }
  unint64_t v25 = v24[1];
  if (v14.u32[0] > 1uLL)
  {
    if (v25 >= *(void *)&v13) {
      v25 %= *(void *)&v13;
    }
  }
  else
  {
    v25 &= v19;
  }
  if (v25 == v22)
  {
LABEL_43:
    if (v21)
    {
      unint64_t v26 = *(void *)(v21 + 8);
      goto LABEL_45;
    }
  }
  else
  {
LABEL_41:
    if (!v21) {
      goto LABEL_42;
    }
    unint64_t v26 = *(void *)(v21 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v27 = *(void *)(v21 + 8);
      if (v26 >= *(void *)&v13) {
        unint64_t v27 = v26 % *(void *)&v13;
      }
    }
    else
    {
      unint64_t v27 = v26 & v19;
    }
    if (v27 != v22)
    {
LABEL_42:
      *(void *)(v16 + 8 * v22) = 0;
      uint64_t v21 = *v18;
      goto LABEL_43;
    }
LABEL_45:
    if (v14.u32[0] > 1uLL)
    {
      if (v26 >= *(void *)&v13) {
        v26 %= *(void *)&v13;
      }
    }
    else
    {
      v26 &= v19;
    }
    if (v26 != v22)
    {
      *(void *)(a1[163] + 8 * v26) = v24;
      uint64_t v21 = *v18;
    }
  }
  *uint64_t v24 = v21;
  *__int16 v18 = 0;
  --a1[166];
  operator delete(v18);
LABEL_52:
  FireDeviceLog::DeviceLogBase(5, "#fmh,eraseRequest,request,%p,%d,size,%zu", a3, a4, a5, a6, a7, a8, v8);
}

uint64_t BlueFin::GlDineCtrl::SetConfigParameters(BlueFin::GlDineCtrl *this, const char *a2)
{
  uint64_t v4 = (int *)((char *)this + 31848);
  GlCustomLog(14, "GlDineCtrl::SetConfigParameters(%s):\n", a2);
  uint64_t result = BlueFin::GlMeSrdAsicConfig::SetConfigParameters((BlueFin::GlDineCtrl *)((char *)this + 29672), a2);
  int v6 = *v4;
  if (*v4)
  {
    (*(void (**)(BlueFin::GlDineCtrl *, uint64_t))(*(void *)this + 496))(this, 1);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlDineCtrl *, void))(*(void *)this + 496))(this, 0);
    v4[82] = v6;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetConfigParameters(BlueFin::GlMeSrdAsicConfig *this, const char *__s)
{
  uint64_t result = strlen(__s);
  if (result >= 1)
  {
    uint64_t v3 = __s;
    uint64_t v4 = &__s[result];
    long long v274 = (void **)((char *)this + 2056);
    unsigned __int8 v273 = (_DWORD *)((char *)this + 2176);
    uint64_t v5 = "dc_ctrl:";
    do
    {
      if (!strncmp(v5, v3, 8uLL))
      {
        unint64_t v20 = (char *)(v3 + 8);
        __endptr = 0;
        unsigned int v277 = strtoul(v3 + 8, &__endptr, 0);
        if (__endptr == v3 + 8 || *__endptr != 44)
        {
          int v21 = 0;
        }
        else
        {
          int v21 = 1;
          unint64_t v20 = __endptr;
        }
        unint64_t v22 = v20 + 1;
        __endptr = 0;
        unsigned int v23 = strtoul(v22, &__endptr, 0);
        if (__endptr == v22 || *__endptr != 44)
        {
          int v24 = 0;
        }
        else
        {
          int v24 = 1;
          unint64_t v22 = __endptr;
        }
        unint64_t v25 = v22 + 1;
        __endptr = 0;
        unsigned int v26 = strtoul(v22 + 1, &__endptr, 0);
        if (__endptr == v25 || *__endptr != 44)
        {
          int v27 = 0;
        }
        else
        {
          int v27 = 1;
          unint64_t v25 = __endptr;
        }
        __endptr = 0;
        unsigned int v28 = strtoul(v25 + 1, &__endptr, 0);
        if (__endptr != v25 + 1
          && *__endptr == 59
          && (v21 & v24 & v27) != 0
          && v277 <= 5
          && v23 <= 5
          && v277 <= v23
          && v26 <= 0xFF
          && (char v29 = v28, v28 <= 0xFF))
        {
          uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetDutyCycle(Min %u,Max %u,Sats %u,PwrdBHzBlk %u)\n", v277, v23, v26, v28);
          *((unsigned char *)this + 1176) = 1;
          *((unsigned char *)this + 1177) = v277;
          *((unsigned char *)this + 1178) = v23;
          *((unsigned char *)this + 1179) = v26;
          *((unsigned char *)this + 1180) = v29;
        }
        else
        {
          uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetDutyCycle incorrect\n");
        }
        goto LABEL_276;
      }
      if (!strncmp("dbg_ctrl:", v3, 9uLL))
      {
        v286[0] = 0;
        __endptr = 0;
        if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 9), (const char *)0x3B, v286, (BOOL *)&__endptr, v6))
        {
          BOOL v30 = v286[0];
          unsigned int v31 = "ON";
          if (!v286[0]) {
            unsigned int v31 = "OFF";
          }
          uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetBurstDebugOn(bBurstDebugOn %s)\n", v31);
          *((unsigned char *)this + 54bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v30;
        }
        else
        {
          uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetBurstDebugOn failed configuration\n");
        }
        goto LABEL_276;
      }
      if (!strncmp("esw_ctrl:", v3, 9uLL))
      {
        v286[0] = 0;
        v289[4] = 0;
        v289[0] = 0;
        BYTE4(v288) = 0;
        __endptr = 0;
        Parauint64_t m = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 9), (const char *)0x2C, v286, (BOOL *)&__endptr, v7);
        int v34 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (BOOL *)&v289[4], (BOOL *)&__endptr, v33);
        int v36 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (BOOL *)v289, (BOOL *)&__endptr, v35);
        int v38 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x3B, (BOOL *)&v288 + 4, (BOOL *)&__endptr, v37);
        if (Param && v34 && v36 && v38)
        {
          BOOL v39 = v286[0];
          if (v286[0]) {
            uint64_t v40 = "Enabled";
          }
          else {
            uint64_t v40 = "Disabled";
          }
          GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetRetainEswEnabled(bRetainEswEnabled %s)\n", v40);
          *((unsigned char *)this + 555) = v39;
          char v41 = v289[4];
          if (v289[4]) {
            long long v42 = "Enabled";
          }
          else {
            long long v42 = "Disabled";
          }
          GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetLoadEswEnabled(bLoadEswEnabled %s)\n", v42);
          *((unsigned char *)this + 556) = v41;
          char v43 = v289[0];
          if (v289[0]) {
            int v44 = "Enabled";
          }
          else {
            int v44 = "Disabled";
          }
          GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetEswDynPwrControl(bEswDynPwrControl %s)\n", v44);
          *((unsigned char *)this + 557) = v43;
          char v45 = BYTE4(v288);
          if (BYTE4(v288)) {
            int v46 = "Enabled";
          }
          else {
            int v46 = "Disabled";
          }
          uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetEswPrintfEnabled(bEswPrintfEnabled %s)\n", v46);
          *((unsigned char *)this + 560) = v45;
        }
        else
        {
          uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:Set ESW Control failed configuration\n");
        }
      }
      else
      {
        if (!strncmp("dr_lp_hyb:", v3, 0xAuLL))
        {
          v286[0] = 0;
          __endptr = 0;
          if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 10), (const char *)0x3B, v286, (BOOL *)&__endptr, v8))
          {
            uint64_t v47 = "Enabled";
            if (!v286[0]) {
              uint64_t v47 = "Disabled";
            }
            GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetDRLPHybridEnable(bDrLpHybEnabled %s)\n", v47);
            uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 1240))();
          }
          else
          {
            uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetDRLPHybridEnable failed configuration\n");
          }
          goto LABEL_276;
        }
        if (!strncmp("mcu_bypass:", v3, 0xBuLL))
        {
          __endptr = 0;
          unsigned int v48 = strtoul(v3 + 11, &__endptr, 0);
          if (__endptr == v3 + 11 || *__endptr != 59)
          {
            uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetMcuBypassEnable failed configuration\n");
          }
          else
          {
            if (v48 >= 3)
            {
              int v260 = "ulMcuBypass==0 || ulMcuBypass==1 || ulMcuBypass==2";
              DeviceFaultNotify("glmesrd_asic_config.cpp", 2314, "SetConfigParameters", (char)"ulMcuBypass==0 || ulMcuBypass==1 || ulMcuBypass==2");
              int v261 = 2314;
              goto LABEL_545;
            }
            float v49 = "B1 Bypass Enabled";
            if (v48 == 1) {
              float v49 = "BO Bypass Enabled";
            }
            if (!v48) {
              float v49 = "Disabled";
            }
            GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetMcuBypassEnable(ucMcuBypass %s)\n", v49);
            uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 1248))();
          }
        }
        else
        {
          if (!strncmp("clock_adjust:", v3, 0xDuLL))
          {
            v286[0] = 0;
            __endptr = 0;
            if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 13), (const char *)0x3B, v286, (BOOL *)&__endptr, v9))
            {
              uint64_t v50 = "Enabled";
              if (!v286[0]) {
                uint64_t v50 = "Disabled";
              }
              GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetClockAdjustEnable(bClkAdjust %s)\n", v50);
              uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 928))();
            }
            else
            {
              uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetClockAdjustEnable failed configuration\n");
            }
            goto LABEL_276;
          }
          if (!strncmp("forced_dc:", v3, 0xAuLL))
          {
            uint64_t v51 = (char *)(v3 + 10);
            __endptr = 0;
            int v52 = strtoul(v3 + 10, &__endptr, 0);
            if (__endptr == v3 + 10 || *__endptr != 44)
            {
              int v278 = 0;
            }
            else
            {
              int v278 = 1;
              uint64_t v51 = __endptr;
            }
            uint64_t v53 = v51 + 1;
            __endptr = 0;
            int v54 = strtoul(v53, &__endptr, 0);
            if (__endptr == v53 || *__endptr != 44)
            {
              int v55 = 0;
            }
            else
            {
              int v55 = 1;
              uint64_t v53 = __endptr;
            }
            uint64_t v56 = v53 + 1;
            __endptr = 0;
            int v57 = strtoul(v53 + 1, &__endptr, 0);
            if (__endptr == v56 || *__endptr != 44)
            {
              int v58 = 0;
            }
            else
            {
              int v58 = 1;
              uint64_t v56 = __endptr;
            }
            __endptr = 0;
            int v59 = strtoul(v56 + 1, &__endptr, 0);
            if (__endptr != v56 + 1 && *__endptr == 59 && (v278 & v55 & v58) != 0)
            {
              int v60 = v59;
              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetForcedDutyCycle(DcStart %u ms, DcOn %u ms, DcOff %u ms, DcStop %u ms)\n", v52, v54, v57, v59);
              *((unsigned char *)this + 118bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
              *((_DWORD *)this + 297) = v52;
              *((_DWORD *)this + 298) = v54;
              *((_DWORD *)this + 299) = v57;
              *((_DWORD *)this + 300) = v60;
            }
            else
            {
              uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetForcedDutyCycle incorrect\n");
            }
            goto LABEL_276;
          }
          if (!strncmp("sniff_ctrl:", v3, 0xBuLL))
          {
            __endptr = 0;
            unsigned int v61 = strtoul(v3 + 11, &__endptr, 0);
            if (__endptr == v3 + 11 || *__endptr != 59 || (char v62 = v61, v61 > 0x14))
            {
              uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetSniffCtrl incorrect\n");
            }
            else
            {
              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetSniffCtrl(%u)\n", v61);
              *((unsigned char *)this + 120bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
              *((unsigned char *)this + 1205) = v62;
            }
          }
          else
          {
            if (!strncmp("mi_ctrl:", v3, 8uLL))
            {
              uint64_t v63 = (char *)(v3 + 8);
              __endptr = 0;
              unsigned int v64 = strtoul(v3 + 8, &__endptr, 0);
              if (__endptr == v3 + 8 || *__endptr != 44)
              {
                int v65 = 0;
              }
              else
              {
                int v65 = 1;
                uint64_t v63 = __endptr;
              }
              uint64_t v66 = v63 + 1;
              __endptr = 0;
              unsigned int v67 = strtoul(v63 + 1, &__endptr, 0);
              char v68 = v67;
              BOOL v69 = __endptr != v66 && *__endptr == 59;
              if ((v65 & v69) == 1 && v64 && v64 <= 0xA && v67 && v67 <= 0xA)
              {
                uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetMiIntervalCtrl(%u, %u)\n", v64, v67);
                *((unsigned char *)this + 1206) = 1;
                *((unsigned char *)this + 1207) = v64;
                *((unsigned char *)this + 1208) = v68;
              }
              else
              {
                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetMiIntervalCtrl incorrect\n");
              }
              goto LABEL_276;
            }
            if (!strncmp("asic_version_ctrl:", v3, 0x12uLL))
            {
              __endptr = 0;
              int v70 = strtoul(v3 + 18, &__endptr, 0);
              if (__endptr != v3 + 18 && *__endptr == 59)
              {
                int v71 = v70;
                if (v70 > 822018053)
                {
                  if (v70 > 939720710)
                  {
                    if ((v70 - 1006829576) < 2 || v70 == 939720711) {
                      goto LABEL_274;
                    }
                    int v109 = 956235783;
                  }
                  else if (v70 <= 872611846)
                  {
                    if (v70 == 822018054) {
                      goto LABEL_274;
                    }
                    int v109 = 872480775;
                  }
                  else
                  {
                    if (v70 == 872611847 || v70 == 889126919) {
                      goto LABEL_274;
                    }
                    int v109 = 939589639;
                  }
                  if (v70 == v109) {
                    goto LABEL_274;
                  }
                }
                else if ((v70 - 805502980) <= 5 && v70 != 805502983 {
                       || (v70 - 805371910) <= 3 && v70 != 805371911
                }
                       || (v70 - 805437444) < 2)
                {
LABEL_274:
                  uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetAsicVersionCtrl(0x%X)\n", v70);
                  *((unsigned char *)this + 1212) = 1;
                  *((_DWORD *)this + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v71;
                  goto LABEL_276;
                }
                unsigned int v140 = (v70 & 0xF000FFFE) - 805306382;
                if (v140 <= 6 && ((1 << v140) & 0x55) != 0) {
                  goto LABEL_274;
                }
              }
              uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetAsicVersionCtrl incorrect\n");
            }
            else if (!strncmp("geoctrl:", v3, 8uLL))
            {
              char v72 = v5;
              BOOL v290 = 0;
              *(_DWORD *)long long v286 = 0;
              *(void *)long long v289 = 0;
              uint64_t v288 = 0;
              BOOL v287 = 0;
              __endptr = 0;
              int v73 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 8), (const char *)0x2C, &v290, (BOOL *)&__endptr, v10);
              int v75 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (int *)v286, (int *)&__endptr, v74);
              int v77 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (int *)&v289[4], (int *)&__endptr, v76);
              int v79 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (int *)v289, (int *)&__endptr, v78);
              int v81 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (int *)&v288 + 1, (int *)&__endptr, v80);
              int v82 = (BlueFin::GlMeSrdAsicConfig *)(__endptr + 1);
              if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x2C, (int *)&v288, (int *)&__endptr, v83))
              {
                uint64_t v5 = v72;
                if ((BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(__endptr + 1), (const char *)0x3B, &v287, (BOOL *)&__endptr, v84) & 1) == 0)goto LABEL_180; {
              }
                }
              else
              {
                int v87 = v73 & v75 & v77 & v79 & v81;
                int v88 = BlueFin::GlMeSrdAsicConfig::GetParam(v82, (const char *)0x3B, (int *)&v288, (int *)&__endptr, v84);
                uint64_t v5 = v72;
                if (v87 != 1 || !v88)
                {
LABEL_180:
                  uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetGeofenceControl incorrect\n");
                  goto LABEL_276;
                }
              }
              BOOL v89 = v290;
              BOOL v90 = v287;
              if (v287) {
                uint64_t v91 = 84;
              }
              else {
                uint64_t v91 = 70;
              }
              int v92 = *(_DWORD *)v286;
              int v94 = *(_DWORD *)v289;
              int v93 = *(_DWORD *)&v289[4];
              int v96 = v288;
              int v95 = HIDWORD(v288);
              uint64_t v265 = v91;
              if (v290) {
                uint64_t v97 = 84;
              }
              else {
                uint64_t v97 = 70;
              }
              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetGeofenceControl(%c %d %d %d %d %d %c)\n", v97, *(_DWORD *)v286, *(_DWORD *)&v289[4], *(_DWORD *)v289, HIDWORD(v288), v288, v265);
              *((unsigned char *)this + 1220) = 1;
              *((unsigned char *)this + 1221) = v89;
              *((_DWORD *)this + 306) = v92;
              *((_DWORD *)this + 307) = v93;
              *((_DWORD *)this + 308) = v94;
              *((_DWORD *)this + 309) = v95;
              *((_DWORD *)this + 310) = v96;
              *((unsigned char *)this + 124bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v90;
            }
            else if (!strncmp("geoproxy:", v3, 9uLL))
            {
              __endptr = 0;
              int v85 = strtoul(v3 + 9, &__endptr, 0);
              if (__endptr == v3 + 9 || *__endptr != 59)
              {
                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetTriggerfish incorrect\n");
              }
              else
              {
                int v86 = v85;
                uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetTriggerfish(%u)\n", v85);
                *((unsigned char *)this + 1248) = 1;
                *((unsigned char *)this + 1249) = v86 == -1263743403;
              }
            }
            else
            {
              if (!strncmp("aagc_tggtpwr_4753:", v3, 0x12uLL))
              {
                unsigned int v98 = (char *)(v3 + 18);
                __endptr = 0;
                int v99 = strtoul(v3 + 18, &__endptr, 0);
                if (__endptr == v3 + 18 || *__endptr != 44)
                {
                  int v100 = 0;
                }
                else
                {
                  int v100 = 1;
                  unsigned int v98 = __endptr;
                }
                unint64_t v101 = v98 + 1;
                __endptr = 0;
                int v102 = strtoul(v98 + 1, &__endptr, 0);
                if (__endptr == v101 || *__endptr != 44)
                {
                  int v103 = 0;
                }
                else
                {
                  int v103 = 1;
                  unint64_t v101 = __endptr;
                }
                __endptr = 0;
                int v104 = strtoul(v101 + 1, &__endptr, 0);
                if (__endptr != v101 + 1 && *__endptr == 59 && (v100 & v103) != 0)
                {
                  int v105 = v104;
                  uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:Set4753AagcTarget(GPS %u, GLO %u, BDS %u)\n", v99, v102, v104);
                  *((unsigned char *)this + 1252) = 1;
                  *((_DWORD *)this + 31bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v99;
                  *((_DWORD *)this + 315) = v102;
                  *((_DWORD *)this + 316) = v105;
                }
                else
                {
                  uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:Set4753AagcTarget incorrect\n");
                }
                goto LABEL_276;
              }
              if (!strncmp("dagc_tggtpwr_4753:", v3, 0x12uLL))
              {
                uint64_t v106 = (char *)(v3 + 18);
                __endptr = 0;
                int v107 = strtoul(v3 + 18, &__endptr, 0);
                if (__endptr == v3 + 18 || *__endptr != 44)
                {
                  int v108 = 0;
                }
                else
                {
                  int v108 = 1;
                  uint64_t v106 = __endptr;
                }
                int v110 = v106 + 1;
                __endptr = 0;
                int v111 = strtoul(v106 + 1, &__endptr, 0);
                if (__endptr == v110 || *__endptr != 44)
                {
                  int v112 = 0;
                }
                else
                {
                  int v112 = 1;
                  int v110 = __endptr;
                }
                __endptr = 0;
                int v113 = strtoul(v110 + 1, &__endptr, 0);
                if (__endptr != v110 + 1 && *__endptr == 59 && (v108 & v112) != 0)
                {
                  int v114 = v113;
                  uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:Set4753DagcTarget(GPS %u, GLO %u, BDS %u)\n", v107, v111, v113);
                  *((unsigned char *)this + 1268) = 1;
                  *((_DWORD *)this + 318) = v107;
                  *((_DWORD *)this + 319) = v111;
                  *((_DWORD *)this + 320) = v114;
                }
                else
                {
                  uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:Set4753DagcTarget incorrect\n");
                }
                goto LABEL_276;
              }
              if (!strncmp("aagc_limit_4753:", v3, 0x10uLL))
              {
                uint64_t v118 = (char *)(v3 + 16);
                __endptr = 0;
                unsigned int v119 = strtoul(v3 + 16, &__endptr, 0);
                if (__endptr == v3 + 16 || *__endptr != 44)
                {
                  int v120 = 0;
                }
                else
                {
                  int v120 = 1;
                  uint64_t v118 = __endptr;
                }
                uint64_t v134 = v118 + 1;
                __endptr = 0;
                unsigned int v135 = strtoul(v118 + 1, &__endptr, 0);
                if (__endptr == v134 || *__endptr != 44)
                {
                  int v136 = 0;
                }
                else
                {
                  int v136 = 1;
                  uint64_t v134 = __endptr;
                }
                __endptr = 0;
                unsigned int v137 = strtoul(v134 + 1, &__endptr, 0);
                if (__endptr != v134 + 1 && *__endptr == 59 && (v120 & v136) != 0)
                {
                  if (v119 >= 0xB)
                  {
                    int v260 = "ulAagcGpsLimit <= 10";
                    DeviceFaultNotify("glmesrd_asic_config.cpp", 2624, "SetConfigParameters", (char)"ulAagcGpsLimit <= 10");
                    int v261 = 2624;
                    goto LABEL_545;
                  }
                  if (v135 >= 0x10)
                  {
                    int v260 = "ulAagcGloLimit <= 15";
                    DeviceFaultNotify("glmesrd_asic_config.cpp", 2625, "SetConfigParameters", (char)"ulAagcGloLimit <= 15");
                    int v261 = 2625;
                    goto LABEL_545;
                  }
                  unsigned int v138 = v137;
                  if (v137 >= 0x10)
                  {
                    int v260 = "ulAagcBdsLimit <= 15";
                    DeviceFaultNotify("glmesrd_asic_config.cpp", 2626, "SetConfigParameters", (char)"ulAagcBdsLimit <= 15");
                    int v261 = 2626;
                    goto LABEL_545;
                  }
                  uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:Set4753AagcLimit(GPS %u, GLO %u, BDS %u)\n", v119, v135, v137);
                  *((unsigned char *)this + 128bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
                  *((_DWORD *)this + 322) = v119;
                  *((_DWORD *)this + 323) = v135;
                  *((_DWORD *)this + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v138;
                }
                else
                {
                  uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:Set4753AagcLimit incorrect\n");
                }
              }
              else
              {
                if (!strncmp("aagc_fixed_att_4753:", v3, 0x14uLL) || !strncmp("aagc_fixed_att:", v3, 0xFuLL))
                {
                  int v115 = strncmp("aagc_fixed_att:", v3, 0xFuLL);
                  uint64_t v116 = 20;
                  if (!v115) {
                    uint64_t v116 = 15;
                  }
                  int v117 = (char *)&v3[v116];
                  __endptr = 0;
                  int v271 = strtoul(&v3[v116], &__endptr, 0);
                  if (__endptr == v117 || *__endptr != 44)
                  {
                    int v279 = 0;
                  }
                  else
                  {
                    int v279 = 1;
                    int v117 = __endptr;
                  }
                  uint64_t v121 = v117 + 1;
                  __endptr = 0;
                  unint64_t v269 = strtoul(v121, &__endptr, 0);
                  if (__endptr == v121 || *__endptr != 44)
                  {
                    int v122 = 0;
                  }
                  else
                  {
                    int v122 = 1;
                    uint64_t v121 = __endptr;
                  }
                  uint64_t v123 = v121 + 1;
                  __endptr = 0;
                  int v267 = strtoul(v123, &__endptr, 0);
                  if (__endptr == v123 || *__endptr != 44)
                  {
                    int v124 = 0;
                  }
                  else
                  {
                    int v124 = 1;
                    uint64_t v123 = __endptr;
                  }
                  unsigned __int8 v125 = v123 + 1;
                  __endptr = 0;
                  unint64_t v126 = strtoul(v125, &__endptr, 0);
                  if (__endptr == v125 || *__endptr != 44)
                  {
                    int v127 = 0;
                  }
                  else
                  {
                    int v127 = 1;
                    unsigned __int8 v125 = __endptr;
                  }
                  int v128 = v125 + 1;
                  __endptr = 0;
                  int v129 = strtoul(v128, &__endptr, 0);
                  if (__endptr == v128 || *__endptr != 44)
                  {
                    int v130 = 0;
                  }
                  else
                  {
                    int v130 = 1;
                    int v128 = __endptr;
                  }
                  uint64_t v131 = v128 + 1;
                  __endptr = 0;
                  int v132 = strtoul(v128 + 1, &__endptr, 0);
                  BOOL v133 = __endptr != v131 && *__endptr == 59;
                  GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:Set4753AagcFixedAtt( ");
                  if ((v279 & v122) != 0)
                  {
                    *((unsigned char *)this + 1300) = 1;
                    *((_DWORD *)this + 326) = v271;
                    *((_DWORD *)this + 327) = v269;
                    unint64_t v264 = v269;
                    GlCustomLog(14, "GPS (%u, %u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "GPS (inv) ");
                  }
                  if ((v124 & v127) != 0)
                  {
                    *((unsigned char *)this + 1301) = 1;
                    *((_DWORD *)this + 328) = v267;
                    *((_DWORD *)this + 329) = v126;
                    unint64_t v264 = v126;
                    GlCustomLog(14, "GLO (%u, %u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "GLO (inv) ");
                  }
                  uint64_t v5 = "dc_ctrl:";
                  if ((v130 & v133) != 0)
                  {
                    *((unsigned char *)this + 1302) = 1;
                    *((_DWORD *)this + 330) = v129;
                    int v139 = v132;
                    *((_DWORD *)this + 331) = v132;
LABEL_268:
                    uint64_t result = GlCustomLog(14, "GLO (%u, %u))\n", v129, v139);
                    goto LABEL_276;
                  }
                  goto LABEL_324;
                }
                if (!strncmp("aagc_MNW:", v3, 9uLL))
                {
                  uint64_t v147 = (char *)(v3 + 9);
                  __endptr = 0;
                  int v148 = strtoul(v3 + 9, &__endptr, 0);
                  if (__endptr == v3 + 9 || *__endptr != 44)
                  {
                    int v149 = 0;
                  }
                  else
                  {
                    int v149 = 1;
                    uint64_t v147 = __endptr;
                  }
                  int v160 = v147 + 1;
                  __endptr = 0;
                  int v161 = strtoul(v147 + 1, &__endptr, 0);
                  BOOL v162 = __endptr != v160 && *__endptr == 59;
                  GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetMNWAagcFixedGain ");
                  if (v149)
                  {
                    *((unsigned char *)this + 1356) = 1;
                    *((_DWORD *)this + 340) = v148;
                    GlCustomLog(14, "L1 (%u)");
                  }
                  else
                  {
                    GlCustomLog(14, "L1 (inv) ");
                  }
                  if (v162)
                  {
                    *((unsigned char *)this + 1357) = 1;
                    *((_DWORD *)this + 341) = v161;
                    uint64_t result = GlCustomLog(14, "L5 (%u)\n", v161);
                    goto LABEL_276;
                  }
LABEL_358:
                  uint64_t result = GlCustomLog(14, "L5 (inv)\n");
                  goto LABEL_276;
                }
                if (!strncmp("dagc_fixed_att_4753:", v3, 0x14uLL) || !strncmp("dagc_fixed_att:", v3, 0xFuLL))
                {
                  int v143 = strncmp("dagc_fixed_att:", v3, 0xFuLL);
                  uint64_t v144 = 20;
                  if (!v143) {
                    uint64_t v144 = 15;
                  }
                  uint64_t v145 = (char *)&v3[v144];
                  __endptr = 0;
                  int v270 = strtoul(&v3[v144], &__endptr, 0);
                  if (__endptr == v145 || *__endptr != 44)
                  {
                    int v146 = 0;
                  }
                  else
                  {
                    int v146 = 1;
                    uint64_t v145 = __endptr;
                  }
                  uint64_t v150 = v145 + 1;
                  __endptr = 0;
                  unint64_t v268 = strtoul(v150, &__endptr, 0);
                  if (__endptr == v150 || *__endptr != 44)
                  {
                    int v280 = 0;
                  }
                  else
                  {
                    int v280 = 1;
                    uint64_t v150 = __endptr;
                  }
                  float v151 = v150 + 1;
                  __endptr = 0;
                  int v266 = strtoul(v151, &__endptr, 0);
                  if (__endptr == v151 || *__endptr != 44)
                  {
                    int v272 = 0;
                  }
                  else
                  {
                    int v272 = 1;
                    float v151 = __endptr;
                  }
                  float v152 = v151 + 1;
                  __endptr = 0;
                  unint64_t v153 = strtoul(v152, &__endptr, 0);
                  if (__endptr == v152 || *__endptr != 44)
                  {
                    int v154 = 0;
                  }
                  else
                  {
                    int v154 = 1;
                    float v152 = __endptr;
                  }
                  uint64_t v155 = v152 + 1;
                  __endptr = 0;
                  int v129 = strtoul(v155, &__endptr, 0);
                  if (__endptr == v155 || *__endptr != 44)
                  {
                    int v156 = 0;
                  }
                  else
                  {
                    int v156 = 1;
                    uint64_t v155 = __endptr;
                  }
                  int v157 = v155 + 1;
                  __endptr = 0;
                  int v158 = strtoul(v155 + 1, &__endptr, 0);
                  BOOL v159 = __endptr != v157 && *__endptr == 59;
                  GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:Set4753DagcFixedAtt( ");
                  if ((v146 & v280) != 0)
                  {
                    *((unsigned char *)this + 1328) = 1;
                    *((_DWORD *)this + 333) = v270;
                    *((_DWORD *)this + 33bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v268;
                    unint64_t v264 = v268;
                    GlCustomLog(14, "GPS (%u, %u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "GPS (inv) ");
                  }
                  if ((v272 & v154) != 0)
                  {
                    *((unsigned char *)this + 1329) = 1;
                    *((_DWORD *)this + 335) = v266;
                    *((_DWORD *)this + 336) = v153;
                    unint64_t v264 = v153;
                    GlCustomLog(14, "GLO (%u, %u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "GLO (inv) ");
                  }
                  uint64_t v5 = "dc_ctrl:";
                  if ((v156 & v159) != 0)
                  {
                    *((unsigned char *)this + 1330) = 1;
                    *((_DWORD *)this + 337) = v129;
                    int v139 = v158;
                    *((_DWORD *)this + 338) = v158;
                    goto LABEL_268;
                  }
LABEL_324:
                  uint64_t result = GlCustomLog(14, "BDS (inv))\n");
                  goto LABEL_276;
                }
                if (!strncmp("dagc_MNW:", v3, 9uLL))
                {
                  uint64_t v163 = (char *)(v3 + 9);
                  __endptr = 0;
                  int v164 = strtoul(v3 + 9, &__endptr, 0);
                  if (__endptr == v3 + 9 || *__endptr != 44)
                  {
                    int v165 = 0;
                  }
                  else
                  {
                    int v165 = 1;
                    uint64_t v163 = __endptr;
                  }
                  __int16 v166 = v5;
                  int v167 = v163 + 1;
                  __endptr = 0;
                  int v281 = strtoul(v167, &__endptr, 0);
                  if (__endptr == v167 || *__endptr != 44)
                  {
                    int v168 = 0;
                  }
                  else
                  {
                    int v168 = 1;
                    int v167 = __endptr;
                  }
                  float v169 = v167 + 1;
                  __endptr = 0;
                  int v170 = strtoul(v169, &__endptr, 0);
                  if (__endptr == v169 || *__endptr != 44)
                  {
                    int v171 = 0;
                  }
                  else
                  {
                    int v171 = 1;
                    float v169 = __endptr;
                  }
                  uint64_t v172 = v169 + 1;
                  __endptr = 0;
                  int v173 = strtoul(v169 + 1, &__endptr, 0);
                  BOOL v174 = __endptr != v172 && *__endptr == 59;
                  GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:Set4753DagcFixedAtt ");
                  if (v165)
                  {
                    *((unsigned char *)this + 1368) = 1;
                    *((_DWORD *)this + 343) = v164;
                    GlCustomLog(14, "GPS (%u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "GPS (inv) ");
                  }
                  if (v168)
                  {
                    *((unsigned char *)this + 1369) = 1;
                    *((_DWORD *)this + 34bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v281;
                    GlCustomLog(14, "GLO (%u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "GLO (inv) ");
                  }
                  uint64_t v5 = v166;
                  if (v171)
                  {
                    *((unsigned char *)this + 1370) = 1;
                    *((_DWORD *)this + 345) = v170;
                    GlCustomLog(14, "BDS (%u) ");
                  }
                  else
                  {
                    GlCustomLog(14, "BDS (inv)");
                  }
                  if (v174)
                  {
                    *((unsigned char *)this + 1371) = 1;
                    *((_DWORD *)this + 346) = v173;
                    uint64_t result = GlCustomLog(14, "L5 (%u)\n", v173);
                    goto LABEL_276;
                  }
                  goto LABEL_358;
                }
                if (!strncmp("vdac_tp_MNW:", v3, 0xCuLL))
                {
                  v289[4] = 0;
                  v289[0] = 0;
                  BYTE4(v288) = 0;
                  LOBYTE(v288) = 0;
                  *(void *)long long v286 = 0;
                  __endptr = 0;
                  unsigned int v175 = strtoul(v3 + 12, &__endptr, 0);
                  uint64_t v176 = __endptr;
                  *(void *)long long v286 = __endptr;
                  if (__endptr == v3 + 12 || *__endptr != 44)
                  {
                    int v177 = 0;
                    *(void *)long long v286 = v3 + 12;
                    uint64_t v176 = (char *)(v3 + 12);
                  }
                  else
                  {
                    int v177 = 1;
                  }
                  BOOL v178 = v176 + 1;
                  __endptr = 0;
                  unsigned int v180 = strtoul(v176 + 1, &__endptr, 0);
                  int v181 = __endptr;
                  *(void *)long long v286 = __endptr;
                  if (__endptr == v178 || *__endptr != 44)
                  {
                    int v182 = 0;
                    *(void *)long long v286 = v178;
                    int v181 = v178;
                  }
                  else
                  {
                    int v182 = 1;
                  }
                  int v183 = v177 & v182 & BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v181 + 1), (const char *)0x2C, (BOOL *)&v289[4], v286, v179);
                  int v185 = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(*(void *)v286 + 1), (const char *)0x2C, (BOOL *)v289, v286, v184);
                  int v187 = v183 & v185 & BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(*(void *)v286 + 1), (const char *)0x2C, (BOOL *)&v288 + 4, v286, v186);
                  int v189 = v187 & BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(*(void *)v286 + 1), (const char *)0x3B, (BOOL *)&v288, v286, v188);
                  uint64_t result = GlCustomLog(14, "MNW VDAC Select: bDecodedOK %d, VDAC_SEL: %d, Gain %d\n", v189, v175, v180);
                  if (v189 == 1)
                  {
                    if (v175 >= 0x19)
                    {
                      int v260 = "bIsulTpId";
                      DeviceFaultNotify("glmesrd_asic_config.cpp", 3093, "SetConfigParameters", (char)"bIsulTpId");
                      int v261 = 3093;
                      goto LABEL_545;
                    }
                    if (v180 >= 8)
                    {
                      int v260 = "ulGain <= 7";
                      DeviceFaultNotify("glmesrd_asic_config.cpp", 3094, "SetConfigParameters", (char)"ulGain <= 7");
                      int v261 = 3094;
                      goto LABEL_545;
                    }
                    uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:IfTestPoint(%u)\n", v175);
                    *((unsigned char *)this + 1391) = 1;
                    *((unsigned char *)this + 1392) = v175;
                    *((_DWORD *)this + 349) = v180;
                    *((unsigned char *)this + 1389) = v289[4];
                    *((unsigned char *)this + 1390) = v289[0];
                    *((unsigned char *)this + 1400) = BYTE4(v288);
                    *((unsigned char *)this + 1401) = v288;
                  }
                }
                else if (!strncmp("lte_sel:", v3, 8uLL))
                {
                  __endptr = 0;
                  int v190 = strtoul(v3 + 8, &__endptr, 0);
                  if (__endptr == v3 + 8 || *__endptr != 59)
                  {
                    uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:LteFilterSelection incorrect\n");
                  }
                  else
                  {
                    char v191 = v190;
                    uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:LteFilterSelection(%u)\n", v190);
                    *((unsigned char *)this + 140bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
                    *((unsigned char *)this + 1405) = v191;
                  }
                }
                else
                {
                  if (!strncmp("srch_dump:", v3, 0xAuLL))
                  {
                    *(_DWORD *)long long v286 = 0;
                    __endptr = 0;
                    uint64_t result = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 10), ";",
                               (char *)v286,
                               (unsigned int *)&__endptr,
                               v11);
                    if (result) {
                      *((_DWORD *)this + 550) = *(_DWORD *)v286;
                    }
                    goto LABEL_276;
                  }
                  if (!strncmp("tstgrid:", v3, 8uLL))
                  {
                    __endptr = 0;
                    *((unsigned char *)this + 210bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
                    *(_DWORD *)long long v286 = 0;
                    int v192 = *((unsigned __int8 *)v3 + 8);
                    BOOL v193 = v192 == 45;
                    if (v192 == 45) {
                      int v194 = (BlueFin::GlMeSrdAsicConfig *)(v3 + 9);
                    }
                    else {
                      int v194 = (BlueFin::GlMeSrdAsicConfig *)(v3 + 8);
                    }
                    uint64_t result = BlueFin::GlMeSrdAsicConfig::GetParam(v194, ",;",
                               (char *)v286,
                               (unsigned int *)&__endptr,
                               v12);
                    if (!result) {
                      goto LABEL_276;
                    }
                    char v196 = 0;
                    while (2)
                    {
                      if (v193) {
                        int v197 = -*(_DWORD *)v286;
                      }
                      else {
                        int v197 = *(_DWORD *)v286;
                      }
                      if (v197 == -1)
                      {
                        bzero(*((void **)this + 257), ((4 * *((unsigned __int8 *)this + 2064) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
                        char v196 = 1;
                        *((unsigned char *)this + 210bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
                        GlCustomLog(14, "TSTGRID SV list to be controlled by PE\n");
                      }
                      else
                      {
                        if (v197 == 123456)
                        {
                          BlueFin::GlSvIdSet::SetAll(v274);
                          GlCustomLog(14, "Enabling TSTGRID for all SVs\n");
                          goto LABEL_387;
                        }
                        if (v196)
                        {
LABEL_387:
                          char v196 = 1;
                        }
                        else
                        {
                          *((_DWORD *)*v274 + (v197 >> 5)) |= 1 << v197;
                          GlCustomLog(14, "Enabling TSTGRID for SvId %d\n", v197);
                          char v196 = 0;
                        }
                      }
                      *(_DWORD *)long long v286 = 0;
                      BOOL v193 = __endptr[1] == 45;
                      if (__endptr[1] == 45) {
                        int v198 = __endptr + 2;
                      }
                      else {
                        int v198 = __endptr + 1;
                      }
                      uint64_t result = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)v198, ",;",
                                 (char *)v286,
                                 (unsigned int *)&__endptr,
                                 v195);
                      if ((result & 1) == 0) {
                        goto LABEL_276;
                      }
                      continue;
                    }
                  }
                  if (strncmp("iqdump_config:", v3, 0xEuLL))
                  {
                    if (!strncmp("tstgrid_config:", v3, 0xFuLL))
                    {
                      *(_DWORD *)long long v286 = 0;
                      __endptr = 0;
                      uint64_t result = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 15), ";",
                                 (char *)v286,
                                 (unsigned int *)&__endptr,
                                 v14);
                      if (result)
                      {
                        *((unsigned char *)this + 1609) = v286[0];
                        uint64_t result = GlCustomLog(14, "Enabling TSTGRID configuration %d\n");
                      }
                      goto LABEL_423;
                    }
                    if (!strncmp("tstgrid_iq_config:", v3, 0x12uLL))
                    {
                      *(_DWORD *)long long v286 = 0;
                      __endptr = 0;
                      uint64_t result = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 18), ";",
                                 (char *)v286,
                                 (unsigned int *)&__endptr,
                                 v15);
                      if (result)
                      {
                        *((unsigned char *)this + 1610) = v286[0];
                        uint64_t result = GlCustomLog(14, "Enabling TSTGRID IQ dump configuration %d\n");
                      }
                      goto LABEL_423;
                    }
                    if (!strncmp("tstgrid_iq_max_svs:", v3, 0x13uLL))
                    {
                      *(_DWORD *)long long v286 = 0;
                      __endptr = 0;
                      uint64_t result = BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 19), ";",
                                 (char *)v286,
                                 (unsigned int *)&__endptr,
                                 v16);
                      if (result)
                      {
                        *((unsigned char *)this + 1611) = v286[0];
                        uint64_t result = GlCustomLog(14, "Max allowed TSTGRID IQ dump Svs %d\n");
                      }
                      goto LABEL_423;
                    }
                    if (!strncmp("poke_ar:", v3, 8uLL) || !strncmp("poke_dr:", v3, 8uLL))
                    {
                      *(void *)long long v286 = 0;
                      *(_DWORD *)&v289[4] = 0;
                      if (!strncmp("poke_ar:", v3, 8uLL)) {
                        char v200 = 0;
                      }
                      else {
                        char v200 = -64;
                      }
                      __endptr = 0;
                      unsigned int v201 = strtoul(v3 + 8, &__endptr, 0);
                      unsigned int v202 = v201;
                      long long v203 = __endptr;
                      *(void *)long long v286 = __endptr;
                      if (__endptr == v3 + 8 || *__endptr != 44)
                      {
                        int v204 = 0;
                        *(void *)long long v286 = v3 + 8;
                        long long v203 = (char *)(v3 + 8);
                      }
                      else
                      {
                        int v204 = 1;
                      }
                      if (!v201)
                      {
LABEL_419:
                        if (v204 && *((unsigned char *)this + 1968))
                        {
                          uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:poke_ar/poke_dr(Total %u \n", v202);
                          *((unsigned char *)this + 164bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
                        }
                        else
                        {
                          uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:poke_ar/poke_dr incorrect\n", v262, v264);
                        }
                        goto LABEL_423;
                      }
                      int v205 = 0;
                      unsigned __int8 v206 = *((unsigned char *)this + 1968);
                      while (v206 < 0x28u)
                      {
                        unint64_t v207 = v203 + 1;
                        __endptr = 0;
                        __int16 v209 = strtoul(v203 + 1, &__endptr, 0);
                        *(void *)long long v286 = __endptr;
                        if (__endptr == v207 || *__endptr != 61)
                        {
                          int v210 = 0;
                          *(void *)long long v286 = v207;
                        }
                        else
                        {
                          int v210 = 1;
                          unint64_t v207 = __endptr;
                        }
                        v204 &= v210 & BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v207 + 1), ",;",
                                         &v289[4],
                                         (unsigned int *)v286,
                                         v208);
                        long long v203 = *(char **)v286;
                        uint64_t v211 = *((unsigned __int8 *)this + 1968);
                        __int16 v212 = (char *)this + 8 * v211;
                        v212[1648] = v200;
                        *((_WORD *)v212 + 825) = v209;
                        *((_DWORD *)v212 + 413) = *(_DWORD *)&v289[4];
                        unsigned __int8 v206 = v211 + 1;
                        *((unsigned char *)this + 1968) = v206;
                        if (v202 <= ++v205) {
                          goto LABEL_419;
                        }
                      }
                      int v260 = "m_sArDrRegOverride.m_ucArDrRegsIndex < _DIM(m_sArDrRegOverride.m_sArDrRegs)";
                      DeviceFaultNotify("glmesrd_asic_config.cpp", 3268, "SetConfigParameters", (char)"m_sArDrRegOverride.m_ucArDrRegsIndex < _DIM(m_sArDrRegOverride.m_sArDrRegs)");
                      int v261 = 3268;
                      goto LABEL_545;
                    }
                    if (!strncmp("esw_poll:", v3, 9uLL))
                    {
                      *(void *)long long v286 = 0;
                      *(_DWORD *)&v289[4] = 0;
                      __endptr = 0;
                      char v213 = strtoul(v3 + 9, &__endptr, 0);
                      uint64_t v214 = __endptr;
                      *(void *)long long v286 = __endptr;
                      if (__endptr == v3 + 9 || *__endptr != 44)
                      {
                        int v215 = 0;
                        *(void *)long long v286 = v3 + 9;
                        uint64_t v214 = (char *)(v3 + 9);
                      }
                      else
                      {
                        int v215 = 1;
                      }
                      uint64_t v216 = v214 + 1;
                      __endptr = 0;
                      unsigned int v217 = strtoul(v214 + 1, &__endptr, 0);
                      unsigned int v219 = v217;
                      double v220 = __endptr;
                      *(void *)long long v286 = __endptr;
                      if (__endptr == v216 || *__endptr != 44)
                      {
                        int v221 = 0;
                        *(void *)long long v286 = v216;
                        double v220 = v216;
                      }
                      else
                      {
                        int v221 = 1;
                      }
                      if (v217 >= 9)
                      {
                        int v260 = "ulNum <= _DIM(m_sEswPollConfig.addresses)";
                        DeviceFaultNotify("glmesrd_asic_config.cpp", 3312, "SetConfigParameters", (char)"ulNum <= _DIM(m_sEswPollConfig.addresses)");
                        int v261 = 3312;
                        goto LABEL_545;
                      }
                      int v222 = v215 & v221;
                      *((unsigned char *)this + 1972) = v213;
                      *((unsigned char *)this + 1973) = v217;
                      if (v217)
                      {
                        int v223 = 0;
                        do
                        {
                          v222 &= BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v220 + 1), ",;",
                                    &v289[4],
                                    (unsigned int *)v286,
                                    v218);
                          double v220 = *(char **)v286;
                          *((_DWORD *)this + v223++ + 49bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)&v289[4];
                        }
                        while (v219 > v223);
                      }
                      if (v222 && *((unsigned char *)this + 1973)) {
                        uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:esw_poll(Total %u \n");
                      }
                      else {
                        uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:esw_poll incorrect\n", v262, v264);
                      }
                      goto LABEL_423;
                    }
                    if (!strncmp("5hz_sub_trk:", v3, 0xCuLL))
                    {
                      *((unsigned char *)this + 1606) = 1;
                      uint64_t result = GlCustomLog(14, "Enablig 5Hz Sub-Trk for all SvIds\n", v262, v264);
                      goto LABEL_423;
                    }
                    if (!strncmp("5hz_sub_trk_min:", v3, 0x10uLL))
                    {
                      *((unsigned char *)this + 1607) = 1;
                      uint64_t result = GlCustomLog(14, "Enablig 5Hz Sub-Trk Min for all SvIds\n", v262, v264);
                      goto LABEL_423;
                    }
                    BOOL v17 = *(void *)v3 == 0x775F676E6F727473 && *((_DWORD *)v3 + 2) == 980115813;
                    if (v17)
                    {
                      __endptr = 0;
                      unsigned int v224 = strtoul(v3 + 12, &__endptr, 0);
                      long long v225 = __endptr;
                      if (__endptr != v3 + 12 && *__endptr == 44)
                      {
                        (*(void (**)(BlueFin::GlMeSrdAsicConfig *, double))(*(void *)this + 880))(this, (double)v224);
                        __endptr = 0;
                        unsigned int v226 = strtoul(v225 + 1, &__endptr, 0);
                        if (__endptr != v225 + 1 && *__endptr == 59)
                        {
                          uint64_t result = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *, double))(*(void *)this + 896))(this, (double)v226);
                          goto LABEL_423;
                        }
                      }
                    }
                    else
                    {
                      if (!strncmp("adr_mode:", v3, 9uLL))
                      {
                        __endptr = 0;
                        uint64_t result = strtoul(v3 + 9, &__endptr, 0);
                        if (__endptr != v3 + 9 && *__endptr == 59) {
                          *((unsigned char *)this + 2128) = result;
                        }
                        goto LABEL_423;
                      }
                      if (strncmp("rfxbar_ctrl:", v3, 0xCuLL))
                      {
                        if (!strncmp("async_fpga:", v3, 0xBuLL))
                        {
                          v286[0] = 1;
                          __endptr = 0;
                          if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 11), (const char *)0x3B, v286, (BOOL *)&__endptr, v18))
                          {
                            long long v231 = "Async";
                            if (!v286[0]) {
                              long long v231 = "Synchronous";
                            }
                            GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetAsyncFpga(bAsyncFpga %s)\n", v231);
                            uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 944))();
                          }
                          else
                          {
                            uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetAsyncFpga failed configuration\n", v262, v264);
                          }
                          goto LABEL_423;
                        }
                        if (!strncmp("glns_16mhz:", v3, 0xBuLL))
                        {
                          v286[0] = 1;
                          __endptr = 0;
                          if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 11), (const char *)0x3B, v286, (BOOL *)&__endptr, v19))
                          {
                            uint64_t v232 = "Glns16MHz";
                            if (!v286[0]) {
                              uint64_t v232 = "Glns33MHz";
                            }
                            GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetGlns16Mhz(bGlns16Mhz %s)\n", v232);
                            uint64_t result = (*(uint64_t (**)(void))(*(void *)this + 952))();
                          }
                          else
                          {
                            uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetGlns16Mhz failed configuration\n", v262, v264);
                          }
                          goto LABEL_423;
                        }
                        if (!strncmp("mtrk_xcorr_overide:", v3, 0x13uLL))
                        {
                          __endptr = 0;
                          unsigned int v233 = strtoul(v3 + 19, &__endptr, 0);
                          if (__endptr != v3 + 19 && *__endptr == 59)
                          {
                            unsigned int v234 = v233;
                            uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetMtrkXcorrOverride(%u)\n", v233);
                            if (v234 < 2)
                            {
                              *((unsigned char *)this + 214bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v234 == 1;
                              goto LABEL_423;
                            }
                            int v260 = "ulMode == 0 || ulMode == 1";
                            DeviceFaultNotify("glmesrd_asic_config.cpp", 3501, "SetConfigParameters", (char)"ulMode == 0 || ulMode == 1");
                            int v261 = 3501;
                            goto LABEL_545;
                          }
                        }
                        else
                        {
                          if (strncmp("mtrk_mode:", v3, 0xAuLL))
                          {
                            if (!strncmp("cop_mode:", v3, 9uLL))
                            {
                              __endptr = 0;
                              unsigned int v237 = strtoul(v3 + 9, &__endptr, 0);
                              if (__endptr == v3 + 9 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetCopMode failed configuration\n", v262, v264);
                                goto LABEL_423;
                              }
                              unsigned int v238 = v237;
                              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetCopMode(%u)\n", v237);
                              if (v238 < 3)
                              {
                                *((_DWORD *)this + 538) = v238;
                                goto LABEL_423;
                              }
                              int v260 = "ulMode < GLME_NUM_COP_MODES";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3543, "SetConfigParameters", (char)"ulMode < GLME_NUM_COP_MODES");
                              int v261 = 3543;
                            }
                            else if (!strncmp("dsp_mode:", v3, 9uLL))
                            {
                              __endptr = 0;
                              unsigned int v239 = strtoul(v3 + 9, &__endptr, 0);
                              if (__endptr == v3 + 9 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetDspMode failed configuration\n", v262, v264);
                                goto LABEL_423;
                              }
                              unsigned int v240 = v239;
                              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetDspMode(%u)\n", v239);
                              if (v240 < 4)
                              {
                                *((_DWORD *)this + 539) = v240;
                                goto LABEL_423;
                              }
                              int v260 = "ulMode < GLME_NUM_DSP_MODES";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3567, "SetConfigParameters", (char)"ulMode < GLME_NUM_DSP_MODES");
                              int v261 = 3567;
                            }
                            else if (!strncmp("cpu_active_mode:", v3, 0x10uLL))
                            {
                              __endptr = 0;
                              unint64_t v241 = strtoul(v3 + 16, &__endptr, 0);
                              if (__endptr == v3 + 16 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetCpuActiveMode failed configuration\n", v262, v264);
                                goto LABEL_423;
                              }
                              unint64_t v242 = v241;
                              GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetCpuActiveMode(%u)\n", v241);
                              if (v242 < 5)
                              {
                                uint64_t result = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *, unint64_t))(*(void *)this + 1168))(this, v242);
                                goto LABEL_423;
                              }
                              int v260 = "ulMode < GLME_NUM_CPU_ACTIVE_MODES";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3588, "SetConfigParameters", (char)"ulMode < GLME_NUM_CPU_ACTIVE_MODES");
                              int v261 = 3588;
                            }
                            else if (!strncmp("cpu_idle_mode:", v3, 0xEuLL))
                            {
                              __endptr = 0;
                              unsigned int v243 = strtoul(v3 + 14, &__endptr, 0);
                              if (__endptr == v3 + 14 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetCpuIdleMode failed configuration\n", v262, v264);
                                goto LABEL_423;
                              }
                              unsigned int v244 = v243;
                              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetCpuIdleMode(%u)\n", v243);
                              if (v244 < 4)
                              {
                                *((_DWORD *)this + 541) = v244;
                                goto LABEL_423;
                              }
                              int v260 = "ulMode < GLME_NUM_CPU_IDLE_MODES";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3609, "SetConfigParameters", (char)"ulMode < GLME_NUM_CPU_IDLE_MODES");
                              int v261 = 3609;
                            }
                            else if (!strncmp("dc_cpu_idle_mode:", v3, 0x11uLL))
                            {
                              __endptr = 0;
                              unsigned int v245 = strtoul(v3 + 17, &__endptr, 0);
                              if (__endptr == v3 + 17 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetDcCpuIdleMode failed configuration\n", v262, v264);
                                goto LABEL_423;
                              }
                              unsigned int v246 = v245;
                              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetDcCpuIdleMode(%u)\n", v245);
                              if (v246 < 4)
                              {
                                *((_DWORD *)this + 542) = v246;
                                goto LABEL_423;
                              }
                              int v260 = "ulMode < GLME_NUM_CPU_IDLE_MODES";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3630, "SetConfigParameters", (char)"ulMode < GLME_NUM_CPU_IDLE_MODES");
                              int v261 = 3630;
                            }
                            else if (sscanf(v3, "dbg_search_limit:%d;", v273) == 1)
                            {
                              if (*v273 == 25 || *v273 == 50)
                              {
                                uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:%s%d\n");
LABEL_423:
                                uint64_t v5 = "dc_ctrl:";
                                goto LABEL_276;
                              }
                              int v260 = "m_ulDbgSearchLimit == 25 || m_ulDbgSearchLimit == 50";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3640, "SetConfigParameters", (char)"m_ulDbgSearchLimit == 25 || m_ulDbgSearchLimit == 50");
                              int v261 = 3640;
                            }
                            else if (!strncmp("MNW_front_end_emu:", v3, 0x12uLL))
                            {
                              __endptr = 0;
                              unsigned int v248 = strtoul(v3 + 18, &__endptr, 0);
                              if (__endptr == v3 + 18 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetMNWFrontEndEmu failed configuration\n", v263, v264);
                                goto LABEL_423;
                              }
                              unsigned int v249 = v248;
                              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetMNWFrontEndEmu(%u)\n", v248);
                              if (v249 < 2)
                              {
                                *((unsigned char *)this + 2180) = v249 == 1;
                                goto LABEL_423;
                              }
                              int v260 = "ulSaturnas <= 1";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3657, "SetConfigParameters", (char)"ulSaturnas <= 1");
                              int v261 = 3657;
                            }
                            else
                            {
                              if (!strncmp("radio_perf:", v3, 0xBuLL))
                              {
                                long long v250 = (char *)(v3 + 11);
                                __endptr = 0;
                                int v251 = strtoul(v3 + 11, &__endptr, 0);
                                if (__endptr == v3 + 11 || *__endptr != 44)
                                {
                                  int v252 = 0;
                                }
                                else
                                {
                                  int v252 = 1;
                                  long long v250 = __endptr;
                                }
                                v253 = v250 + 1;
                                __endptr = 0;
                                unsigned int v254 = strtoul(v250 + 1, &__endptr, 0);
                                if (__endptr == v253 || *__endptr != 44)
                                {
                                  int v255 = 0;
                                }
                                else
                                {
                                  int v255 = 1;
                                  v253 = __endptr;
                                }
                                __endptr = 0;
                                unsigned int v256 = strtoul(v253 + 1, &__endptr, 0);
                                if (__endptr != v253 + 1 && *__endptr == 59 && (v252 & v255) != 0)
                                {
                                  unsigned int v257 = v256;
                                  BlueFin::GlMeSrdAsicConfig::SetL1PerfMode((uint64_t)this, v251);
                                  GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetL1PerfMode(ulL1PerfMode %d)\n", v251);
                                  BlueFin::GlMeSrdAsicConfig::SetL5DrPerfMode((uint64_t)this, v254);
                                  GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetL5DrPerfMode(ulL5DrPerfMode %d)\n", v254);
                                  BlueFin::GlMeSrdAsicConfig::SetL5ArPerfMode((uint64_t)this, v257);
                                  uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetL5ArPerfMode(ulL5ArPerfMode %d)\n", v257);
                                  *((unsigned char *)this + 2197) = 1;
                                }
                                else
                                {
                                  uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:Set Radio Performance failed configuration\n", v263, v264);
                                }
                                goto LABEL_423;
                              }
                              if (strncmp("srch_mode:", v3, 0xAuLL))
                              {
                                if (!strncmp("l5_only:", v3, 8uLL))
                                {
                                  v286[0] = 0;
                                  __endptr = 0;
                                  if (BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 8), (const char *)0x3B, v286, (BOOL *)&__endptr, v247))
                                  {
                                    *((unsigned char *)this + 2198) = v286[0];
                                    uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetL5Precedence(%s)\n");
                                  }
                                  else
                                  {
                                    uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetL5Precendence failed configuration\n", v263, v264);
                                  }
                                }
                                else
                                {
                                  uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:Param Index %d unknown\n");
                                }
                                goto LABEL_423;
                              }
                              __endptr = 0;
                              unsigned int v258 = strtoul(v3 + 10, &__endptr, 0);
                              if (__endptr == v3 + 10 || *__endptr != 59)
                              {
                                uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetSrchMode failed configuration\n", v263, v264);
                                goto LABEL_423;
                              }
                              unsigned int v259 = v258;
                              uint64_t result = GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetSrchMode(%u)\n", v258);
                              if (v259 < 2)
                              {
                                *((_DWORD *)this + 543) = v259;
                                goto LABEL_423;
                              }
                              int v260 = "ulMode < GLME_NUM_SRCH_MODES";
                              DeviceFaultNotify("glmesrd_asic_config.cpp", 3712, "SetConfigParameters", (char)"ulMode < GLME_NUM_SRCH_MODES");
                              int v261 = 3712;
                            }
LABEL_545:
                            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v261, v260);
                          }
                          __endptr = 0;
                          unint64_t v235 = strtoul(v3 + 10, &__endptr, 0);
                          if (__endptr != v3 + 10 && *__endptr == 59)
                          {
                            unint64_t v236 = v235;
                            GlCustomLog(14, "GlMeSrdAsicConfig::SetConfigParameters:SetMtrkMode(%u)\n", v235);
                            if (v236 < 4)
                            {
                              uint64_t result = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *, unint64_t))(*(void *)this + 1160))(this, v236);
                              goto LABEL_423;
                            }
                            int v260 = "ulMode < GLME_NUM_MTRK_MODES";
                            DeviceFaultNotify("glmesrd_asic_config.cpp", 3522, "SetConfigParameters", (char)"ulMode < GLME_NUM_MTRK_MODES");
                            int v261 = 3522;
                            goto LABEL_545;
                          }
                        }
                        uint64_t result = GlCustomLog(12, "GlMeSrdAsicConfig::SetConfigParameters:SetMtrkMode failed configuration\n", v262, v264);
                        goto LABEL_423;
                      }
                      uint64_t v227 = 0;
                      int v228 = 0;
                      __endptr = (char *)&v284;
                      char v283 = 3;
                      uint64_t v284 = 0;
                      int v285 = 0;
                      do
                      {
                        int v229 = v3[v227 + 12];
                        if ((v229 - 97) < 0x1A) {
                          LOBYTE(v229) = v229 - 32;
                        }
                        long long v230 = memchr("15RBEN", (char)v229, 7uLL);
                        if (!v230) {
                          break;
                        }
                        *((_DWORD *)&v284 + (((_BYTE)v230 - "15RBEN") >> 5)) |= 1 << ((_BYTE)v230 - "15RBEN");
                        v228 |= v227++ << dword_263BAC234[((_BYTE)v230
                                                                                  - "15RBEN")];
                      }
                      while (v227 != 6);
                      uint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&__endptr);
                      if (result == 6)
                      {
                        *((_DWORD *)this + 535) = v228;
                        goto LABEL_423;
                      }
                    }
                    uint64_t result = GlCustomLog(12, "Failed to parse %s\n");
                    goto LABEL_423;
                  }
                  *(_DWORD *)long long v286 = 0;
                  __endptr = 0;
                  if ((BlueFin::GlMeSrdAsicConfig::GetParam((BlueFin::GlMeSrdAsicConfig *)(v3 + 14), ";",
                          (char *)v286,
                          (unsigned int *)&__endptr,
                          v13) & 1) != 0)
                  {
                    int v199 = v286[0];
                    *((unsigned char *)this + 1608) = v286[0];
                  }
                  else
                  {
                    int v199 = *((unsigned __int8 *)this + 1608);
                  }
                  uint64_t result = GlCustomLog(14, "Enabling IQ dump configuration %d\n", v199);
                }
              }
            }
          }
        }
      }
      do
      {
LABEL_276:
        BOOL v17 = v3 == v4;
        int v142 = *(unsigned __int8 *)v3++;
        int v141 = v142;
      }
      while (!v17 && v141 != 59);
    }
    while (v3 < v4);
  }
  if (*((unsigned char *)this + 1610) == 2)
  {
    uint64_t result = BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdAsicConfig *)((char *)this + 2056));
    if ((result & 1) != 0 || *((unsigned char *)this + 2104)) {
      return GlCustomLog(14, "TIQ dump feature enabled in GLL\n");
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetParam(BlueFin::GlMeSrdAsicConfig *this, char *a2, char *a3, unsigned int *a4, const char **a5)
{
  __endptr = 0;
  *(_DWORD *)a3 = strtoul((const char *)this, &__endptr, 0);
  char v8 = __endptr;
  *(void *)a4 = __endptr;
  if (v8 != (char *)this && strchr(a2, *v8)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)a4 = this;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetStrongThreshInDbHz(uint64_t this, double a2)
{
  *(double *)(this + 2112) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetWeakThreshInDbHz(uint64_t this, double a2)
{
  *(double *)(this + 2120) = a2;
  return this;
}

void BlueFin::GlPeKF::IntegerQA(uint64_t a1, double *a2, int a3, const void **a4, double a5, double a6, double a7, int a8, int a9)
{
  unint64_t v15 = (char *)(a1 + 92868);
  uint64_t v16 = a1 + 88840;
  BOOL v17 = (unsigned char *)(a1 + 25088);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  if (a8) {
    unsigned __int8 v18 = BlueFin::GlPeNavGnssMeasMgr::DopplerResidualCheck(a1 + 25120, (uint64_t)a2);
  }
  else {
    unsigned __int8 v18 = 0;
  }
  int v19 = *(_DWORD *)(a1 + 264);
  int v20 = v17[2244];
  long long v32 = *(_OWORD *)(a1 + 192);
  uint64_t v33 = *(void *)(a1 + 208);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v30, v31, 0x13u, a4);
  int v21 = BlueFin::GlPeIntegers::IntegerQAAnalysis((uint64_t)v17, a9, a2, v19, v20, (double *)&v32, (unsigned char *)(a1 + 1086), (BlueFin::GlSetBase *)v30, a7, a6, v18, *(unsigned char *)(a1 + 1096), *v15);
  if (v21)
  {
    bzero(*(void **)(a1 + 408), ((4 * *(unsigned __int8 *)(a1 + 416) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(a1 + 312), ((4 * *(unsigned __int8 *)(a1 + 320) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    unsigned char *v17 = 1;
    *(_WORD *)(a1 + 108bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    *(unsigned char *)(a1 + 1152) = 0;
    bzero(*(void **)(a1 + 1160), ((4 * *(unsigned __int8 *)(a1 + 1168) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    __int16 v22 = 0;
    *(unsigned char *)(a1 + 1086) = 0;
    v17[2244] = 0;
  }
  else
  {
    unsigned char *v17 = 0;
    BlueFin::GlPeMsmtMgr::Init_IntPr(*(void *)(v16 + 3576));
    BlueFin::GlPeKF::resetDtsIfGood(a1);
    ++*(unsigned char *)(a1 + 1152);
    uint64_t v23 = a1 + 27744 + *(void *)(*(void *)(a1 + 27744) - 24);
    unsigned __int8 v34 = *(unsigned char *)(v23 + 272);
    memcpy(v38, *(const void **)(v23 + 264), 4 * v34);
    unsigned __int16 v36 = 0;
    unsigned __int8 v35 = 0;
    int v37 = v38[0];
    BlueFin::GlSetIterator::operator++(&v34);
    while (v35 != v34)
    {
      if (v36 >= 0x23Fu)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      *(_DWORD *)(*(void *)(a1 + 1160) + (((unint64_t)v36 >> 3) & 0x1FFC)) |= 1 << v36;
      BlueFin::GlSetIterator::operator++(&v34);
    }
    __int16 v22 = *(_WORD *)(a1 + 1084) + 1;
    *(_WORD *)(a1 + 108bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v22;
  }
  int v24 = *(_DWORD *)(a1 + 264);
  if (v24 == 1)
  {
    if (v22 < 5) {
      char v25 = v21;
    }
    else {
      char v25 = 0;
    }
    if (*(unsigned char *)(*(void *)(v16 + 3504) + 24) && (v25 & 1) == 0)
    {
      *(unsigned char *)(a1 + 1088) = 1;
      *(unsigned char *)(a1 + 1086) = 1;
    }
  }
  else
  {
    if (v24 == 3) {
      char v26 = v21;
    }
    else {
      char v26 = 1;
    }
    if ((v26 & 1) == 0) {
      *(unsigned char *)(a1 + 1088) = 1;
    }
  }
  int v27 = *(unsigned __int8 *)(a1 + 1089);
  BOOL v28 = *(unsigned char *)(a1 + 1089) == 0;
  if ((v21 & v28) != 0) {
    int v27 = 1;
  }
  if (!v21) {
    BOOL v28 = v27 != 0;
  }
  if (v28) {
    *(unsigned char *)(a1 + 1089) = v27 ^ (v27 != 0) & ~(_BYTE)v21;
  }
}

uint64_t BlueFin::GlPeIntegers::IntegerQAAnalysis(uint64_t a1, int a2, double *a3, int a4, int a5, double *a6, unsigned char *a7, BlueFin::GlSetBase *this, double a9, double a10, unsigned __int8 a11, char a12, char a13)
{
  signed int v23 = BlueFin::GlSetBase::Cnt(this) << 24;
  if (v23 > 50331647) {
    int v24 = a2;
  }
  else {
    int v24 = 0;
  }
  if (a9 >= 500.0) {
    int v24 = 0;
  }
  if (a9 >= 149896.229) {
    *a7 = 1;
  }
  double v25 = a3[2];
  if (v25 < -999.0) {
    goto LABEL_29;
  }
  if (v23 < 100663296 && v25 > 159999.0) {
    goto LABEL_29;
  }
  if (a4 == 4) {
    int v27 = a5;
  }
  else {
    int v27 = 1;
  }
  if (v23 > 83886079) {
    int v27 = 1;
  }
  if ((v27 & v24) != 1) {
    goto LABEL_29;
  }
  if (v23 >= 67108865)
  {
    if (a9 < 500.0) {
      goto LABEL_43;
    }
LABEL_29:
    uint64_t v30 = 0;
    goto LABEL_30;
  }
  if ((a4 | 2) != 3)
  {
LABEL_43:
    uint64_t v30 = 1;
    goto LABEL_30;
  }
  BlueFin::lla2ned(a3, a6, 0, &v50);
  double v28 = sqrt(*(double *)v51 * *(double *)v51 + v50 * v50) * 0.001;
  double v29 = 100.0;
  if (a13 < 4) {
    double v29 = 50.0;
  }
  uint64_t v30 = v28 <= v29;
  if (v28 <= v29 && (a12 & 1) == 0)
  {
    if (fabs(a10) > 90.0) {
      goto LABEL_29;
    }
    goto LABEL_43;
  }
LABEL_30:
  if (a4 == 1)
  {
    BOOL v31 = *a7 == 0;
    if (!v30) {
      return v30;
    }
  }
  else
  {
    BOOL v31 = 0;
    *a7 = 1;
    if (!v30) {
      return v30;
    }
  }
  if (v23 <= 100663295 && !v31)
  {
    uint64_t v30 = a11;
    double v50 = COERCE_DOUBLE(&v51[4]);
    v51[0] = 19;
    *(_OWORD *)&v51[4] = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    memset(v54, 0, sizeof(v54));
    uint64_t v47 = v49;
    char v48 = 19;
    memset(v49, 0, sizeof(v49));
    unsigned __int8 v42 = *((unsigned char *)this + 8);
    memcpy(v46, *(const void **)this, 4 * v42);
    unsigned __int16 v44 = 0;
    unsigned __int8 v43 = 0;
    int v45 = v46[0];
    BlueFin::GlSetIterator::operator++(&v42);
    if (v43 != v42)
    {
      while (1)
      {
        char v32 = v44;
        if (v44 >= 0x23FuLL)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        uint64_t v33 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v44;
        char v34 = *v33;
        LODWORD(v33) = v33[1];
        v39[0] = v34;
        int v40 = (int)v33;
        __int16 v41 = v44;
        unint64_t v35 = ((unint64_t)v44 >> 3) & 0x1FFC;
        *(_DWORD *)(*(void *)&v50 + v35) |= 1 << v44;
        unsigned __int16 v36 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
        if (((unint64_t)*(unsigned int *)(*((void *)v36 + 1) + v35) >> (v32 & 0x1F)))
        {
          uint64_t PeMeas = (__int16 *)BlueFin::GlPeMsmtMgr::GetPeMeas(v36, (const BlueFin::GlSignalId *)v39, 0);
          if (BlueFin::stPeSigMeasKF::IsPRValid((BlueFin::stPeSigMeasKF *)PeMeas))
          {
            *(_DWORD *)&v47[4 * (v41 >> 5)] |= 1 << v41;
            if (PeMeas[39] < 0) {
              break;
            }
          }
        }
        BlueFin::GlSetIterator::operator++(&v42);
        if (v43 == v42) {
          return v30;
        }
      }
      return 0;
    }
  }
  return v30;
}

void BlueFin::GlReqSm::HighestVisibilitySigAidOverride(BlueFin::GlReqSm *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40)
{
  uint64_t v41 = 0;
  STACK[0xB38] = *MEMORY[0x263EF8340];
  *(_OWORD *)&STACK[0x800] = 0u;
  *(_OWORD *)&STACK[0x810] = 0u;
  a39 = 0u;
  a40 = 0u;
  a37 = 0u;
  a38 = 0u;
  a35 = 0u;
  a36 = 0u;
  a33 = 0u;
  a34 = 0u;
  a31 = 0u;
  a32 = 0u;
  a29 = 0u;
  a30 = 0u;
  a27 = 0u;
  a28 = 0u;
  a25 = 0u;
  a26 = 0u;
  a23 = 0u;
  a24 = 0u;
  a21 = 0u;
  a22 = 0u;
  a19 = 0u;
  a20 = 0u;
  a17 = 0u;
  a18 = 0u;
  a15 = 0u;
  a16 = 0u;
  a13 = 0u;
  a14 = 0u;
  a11 = 0u;
  a12 = 0u;
  uint64_t v84 = &unk_270EBA358;
  int vars0 = 0;
  char vars0_4 = -96;
  __int16 vars0_6 = 0;
  uint64_t vars8 = (__int16 *)&a11;
  do
  {
    unsigned __int8 v42 = (char *)&a11 + v41;
    *(_WORD *)unsigned __int8 v42 = 0;
    *((_DWORD *)v42 + 1) = 0;
    v41 += 8;
  }
  while (v41 != 1280);
  unsigned __int8 v43 = (char *)this + 4928;
  BlueFin::GlMeSignalAidInfo::operator=((uint64_t)&v84, (uint64_t)this + 4928);
  *((_WORD *)this + 2471) = 0;
  *((_WORD *)this + 3127) = 0;
  int v82 = &v83[4];
  v83[0] = 8;
  memset(&v83[4], 0, 32);
  uint64_t v44 = *((void *)this + 784);
  int v45 = *(_DWORD *)(v44 + 48);
  if ((v45 - 4) >= 5 && v45 != 2)
  {
    int v79 = 0;
    goto LABEL_54;
  }
  a9 = *(_OWORD *)(v44 + 1008);
  a10 = *(_OWORD *)(v44 + 1024);
  BlueFin::GlPeSvVisibilityCache::GetSvIdByRank((BlueFin::GlPeSvVisibilityCache *)(*((void *)this + 788) + 25632), 0, &v80);
  unsigned int v47 = v80;
  unsigned __int8 v81 = v80;
  if (v80)
  {
    int v48 = 0;
    float v49 = (char *)this + 6312;
    while (1)
    {
      if (!(_BYTE)vars0_6) {
        goto LABEL_31;
      }
      uint64_t v50 = 0;
      uint64_t v51 = v47 >> 5;
      while (vars8[v50] != v47 || ((1 << (v47 & 0x1F)) & *(unsigned int *)&v82[4 * v51]) != 0)
      {
        v50 += 4;
        if (4 * vars0_6 == v50) {
          goto LABEL_31;
        }
      }
      AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(*((void *)this + 789) + 32, &v81);
      int v53 = *(unsigned __int8 *)(*(void *)v49 + 9190);
      int v54 = *(unsigned __int8 *)(*(void *)v49 + 9191) + 1;
      BOOL v55 = v54 == v53 || AidBySvId == 0;
      BOOL v56 = !v55 && *((__int16 *)AidBySvId + 37) > 10;
      if (v54 != v53 && !v56) {
        goto LABEL_31;
      }
      if (v47 <= 0x20) {
        break;
      }
      if (v47 - 66 <= 9) {
        goto LABEL_30;
      }
LABEL_31:
      BlueFin::GlPeSvVisibilityCache::GetSvIdByRank((BlueFin::GlPeSvVisibilityCache *)(*((void *)this + 788) + 25632), ++v48, &v80);
      unsigned int v47 = v80;
      unsigned __int8 v81 = v80;
      if (!v80) {
        goto LABEL_32;
      }
    }
    if (*((unsigned __int8 *)&a9 + v47 - 1) <= 2u) {
      goto LABEL_31;
    }
LABEL_30:
    BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)this + 4928, &vars8[v50]);
    *(_DWORD *)&v82[4 * v51] |= 1 << (v47 & 0x1F);
    goto LABEL_31;
  }
LABEL_32:
  BlueFin::GlPeSvVisibilityCache::GetSvIdByRank((BlueFin::GlPeSvVisibilityCache *)(*((void *)this + 788) + 25632), 0, &v80);
  unsigned int v58 = v80;
  unsigned __int8 v81 = v80;
  if (v80)
  {
    int v59 = 0;
    do
    {
      if ((_BYTE)vars0_6)
      {
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v62 = *((void *)this + 789);
        while (1)
        {
          uint64_t v63 = BlueFin::GlPeSatAidInfo::GetAidBySvId(v62 + 32, &v81);
          uint64_t v62 = *((void *)this + 789);
          BOOL v64 = *(unsigned __int8 *)(v62 + 9191) + 1 == *(unsigned __int8 *)(v62 + 9190) || v63 == 0;
          BOOL v65 = !v64 && *((__int16 *)v63 + 37) > 20;
          if (vars8[v60] == v58) {
            break;
          }
          ++v61;
          v60 += 4;
          if (v61 >= vars0_6) {
            goto LABEL_52;
          }
        }
        if (v58 < 0x21 || (v58 - 52 < 0xE ? (BOOL v66 = v65) : (BOOL v66 = 0), v66))
        {
          uint64_t v67 = v58 >> 5;
          char v68 = v58 & 0x1F;
          if ((((unint64_t)*(unsigned int *)&v82[4 * v67] >> v68) & 1) == 0)
          {
            BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)this + 4928, &vars8[v60]);
            *(_DWORD *)&v82[4 * v67] |= 1 << v68;
          }
        }
      }
LABEL_52:
      BlueFin::GlPeSvVisibilityCache::GetSvIdByRank((BlueFin::GlPeSvVisibilityCache *)(*((void *)this + 788) + 25632), ++v59, &v80);
      unsigned int v58 = v80;
      unsigned __int8 v81 = v80;
    }
    while (v80);
  }
  int v79 = 1;
LABEL_54:
  BlueFin::GlPeSvVisibilityCache::GetSvIdByRank((BlueFin::GlPeSvVisibilityCache *)(*((void *)this + 788) + 25632), 0, &a9);
  unsigned int v69 = a9;
  if ((_BYTE)a9)
  {
    int v70 = 0;
    do
    {
      uint64_t v71 = v69 >> 5;
      char v72 = v69 & 0x1F;
      if ((((unint64_t)*(unsigned int *)&v82[4 * v71] >> (v69 & 0x1F)) & 1) == 0
        && (!v79 || v69 - 76 > 0x3E || ((1 << (v69 - 76)) & 0x7C0000000000001FLL) == 0))
      {
        uint64_t v73 = vars0_6;
        if ((_BYTE)vars0_6)
        {
          uint64_t v74 = vars8;
          while (*v74 != v69)
          {
            v74 += 4;
            if (!--v73) {
              goto LABEL_66;
            }
          }
          BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)this + 4928, v74);
          *(_DWORD *)&v82[4 * v71] |= 1 << v72;
        }
      }
LABEL_66:
      BlueFin::GlPeSvVisibilityCache::GetSvIdByRank((BlueFin::GlPeSvVisibilityCache *)(*((void *)this + 788) + 25632), ++v70, &a9);
      unsigned int v69 = a9;
    }
    while ((_BYTE)a9);
  }
  unsigned __int8 v81 = 0;
  unsigned __int8 v75 = vars0_6;
  if ((_BYTE)vars0_6)
  {
    uint64_t v76 = 0;
    unint64_t v77 = 0;
    uint64_t v78 = vars8;
    do
    {
      if ((((unint64_t)*(unsigned int *)&v82[(unint64_t)(v78[v76] & 0xE0) >> 3] >> (v78[v76] & 0x1F)) & 1) == 0)
      {
        BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)v43, &v78[v76]);
        uint64_t v78 = vars8;
        *(_DWORD *)&v82[((unint64_t)(unsigned __int16)vars8[v76] >> 3) & 0x1C] |= 1 << vars8[v76];
        unsigned __int8 v75 = vars0_6;
      }
      ++v77;
      v76 += 4;
    }
    while (v77 < v75);
  }
}

void BlueFin::GlPeSvVisibilityCache::GetSvIdByRank(BlueFin::GlPeSvVisibilityCache *this@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)(*((void *)this + 1) + 2576) || *((unsigned char *)this + 16)) {
    goto LABEL_45;
  }
  unsigned int v33 = a2;
  char v34 = a3;
  unsigned __int8 v4 = 0;
  unsigned __int8 v5 = 10;
  double v6 = 360.0;
  for (uint64_t i = 20; i != 1620; i += 160)
  {
    BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 1), 1, &v37);
    unint64_t v35 = &off_270EBC600;
    uint64_t v36 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v37, (BlueFin::GlGpsTime *)&v35);
    char v8 = (unsigned int *)(*((void *)this + 204) + i);
    unsigned int v9 = v36;
    unsigned int v10 = HIDWORD(v36);
    unsigned int v12 = *(v8 - 1);
    unsigned int v11 = *v8;
    if (*(void *)(v8 - 1))
    {
      unsigned int v13 = HIDWORD(v36) - v11;
      if (HIDWORD(v36) > v11 || (HIDWORD(v36) == v11 ? (BOOL v14 = v36 >= v12) : (BOOL v14 = 0), v14))
      {
        char v15 = 0;
        unsigned int v10 = (__PAIR64__(v13, v36) - v12) >> 32;
        unsigned int v9 = v36 - v12;
      }
      else
      {
        unsigned int v10 = (__PAIR64__(v11 - HIDWORD(v36), v12) - v36) >> 32;
        unsigned int v9 = v12 - v36;
        char v15 = 1;
      }
    }
    else
    {
      char v15 = 0;
    }
    HIDWORD(v16) = 1039138815;
    double v17 = (double)v9 * 2.32830644e-10 + (double)v10;
    double v18 = -v17;
    if ((v15 & ((v10 | v9) != 0)) != 0) {
      double v19 = -v17;
    }
    else {
      double v19 = (double)v9 * 2.32830644e-10 + (double)v10;
    }
    if (v19 > 0.0 && v19 < v6)
    {
      unsigned int v21 = (*(uint64_t (**)(unsigned int *))(*(void *)(v8 - 3) + 32))(v8 - 3);
      LODWORD(v22) = *(v8 - 1);
      HIDWORD(v16) = 1039138815;
      double v18 = (double)v22 * 2.32830644e-10;
      if (v18 + (double)(v21 % 0x93A80) != 0.0
        && (*(unsigned int (**)(void))(*(void *)(*((void *)this + 204) + i - 12) + 32))() >= 0x93A80)
      {
        double v6 = v19;
        unsigned __int8 v5 = v4;
      }
    }
    ++v4;
  }
  a3 = v34;
  a2 = v33;
  if (v5 == 10) {
    goto LABEL_45;
  }
  uint64_t v23 = 0;
  uint64_t v24 = *(void *)(*((void *)this + 204) + 160 * v5 + 128);
  LODWORD(v25) = -1;
  do
  {
    while (1)
    {
      char v26 = *(unsigned char *)(v24 + 8 * v23);
      if (!v26) {
        goto LABEL_42;
      }
      uint64_t v27 = v24 + 8 * v23;
      LOBYTE(v18) = *(unsigned char *)(v27 + 1);
      LODWORD(v16) = *(_DWORD *)(v27 + 4);
      double v16 = (double)*(unint64_t *)&v16;
      double v18 = (double)*(unint64_t *)&v18 + v16 * -0.001;
      if (v25 != -1) {
        break;
      }
      LODWORD(v25) = 0;
      v37.n128_f64[0] = v18;
      **((unsigned char **)this + 210) = v26;
      if (++v23 == 12) {
        goto LABEL_44;
      }
    }
    double v16 = v37.n128_f64[(int)v25];
    if (v16 <= v18)
    {
      if ((v25 & 0x80000000) == 0)
      {
        uint64_t v28 = v25;
        double v16 = v37.n128_f64[v25];
        if (v16 > v18)
        {
LABEL_36:
          uint64_t v31 = (v28 + 1);
          v37.n128_f64[v31] = v18;
          double v29 = (unsigned char *)(*((void *)this + 210) + v31);
        }
        else
        {
          double v29 = (unsigned char *)*((void *)this + 210);
          uint64_t v30 = &v37.n128_f64[v25 + 1];
          while (1)
          {
            *uint64_t v30 = v16;
            v29[v28 + 1] = v29[v28];
            if (!v28) {
              break;
            }
            --v28;
            double v16 = *(v30 - 2);
            --v30;
            if (v16 > v18) {
              goto LABEL_36;
            }
          }
          v37.n128_f64[0] = v18;
        }
        *double v29 = v26;
      }
      LODWORD(v25) = v25 + 1;
    }
    else
    {
      uint64_t v25 = (int)v25 + 1;
      v37.n128_f64[v25] = v18;
      *(unsigned char *)(*((void *)this + 210) + v25) = v26;
    }
LABEL_42:
    ++v23;
  }
  while (v23 != 12);
  if (v25 == -1) {
    goto LABEL_45;
  }
LABEL_44:
  *((unsigned char *)this + 16) = 1;
LABEL_45:
  char v32 = 0;
  if (a2 <= 0xB && *((unsigned char *)this + 16)) {
    char v32 = *(unsigned char *)(*((void *)this + 210) + a2);
  }
  *a3 = v32;
}

uint64_t BlueFin::GlDbgProxy::Version(BlueFin::GlDbgProxy *this)
{
  return *((unsigned int *)this + 1643);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetRtcMeas(BlueFin::GlDbgPeIf *this, double a2, double a3)
{
  double v11 = a3;
  double v12 = a2;
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4637);
    char v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, &v12);
    }
    if (v6 >= 0xC1)
    {
      unsigned int v9 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
        BlueFin::GlDbgCodec::Write(v9, &v11);
      }
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void, double, double))(**((void **)this + 2) + 152))(*((void *)this + 2), a2, a3);
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4637);
    unsigned int v10 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v10();
  }
  return result;
}

uint64_t BlueFin::GlPosEng::SetRtcMeas(BlueFin::GlPosEng *this, double a2, double a3)
{
  return GlCustomLog(15, "GlPosEng::SetRtcMeas: RtcFreqOffPpb  %+.0f RtcFreqOffUncPpb %.0f\n", a2 * 1000000000.0, a3 * 1000000000.0);
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::GetHcPossibleOsnsForFcn(BlueFin::GlPeGloFcnOsnMgr *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  if (((_BYTE)this - 7) <= 0xF1u)
  {
    DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 1272, "GetHcPossibleOsnsForFcn", (char)"IS_GLONASS_FCN(scFcn)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 1272, "IS_GLONASS_FCN(scFcn)");
  }
  int v6 = (int)this;
  *a2 = 0;
  *a3 = 0;
  unsigned __int8 v7 = 1;
  while (1)
  {
    unsigned int v8 = v7;
    if (BlueFin::GlPeGloFcnOsnMgr::GetHardcodedFcn((BlueFin::GlPeGloFcnOsnMgr *)v7) == v6) {
      break;
    }
    ++v7;
    if (v8 >= 0x18)
    {
      uint64_t v9 = 0;
      unsigned __int8 v7 = 25;
      goto LABEL_7;
    }
  }
  *a2 = v7;
  uint64_t v9 = 1;
LABEL_7:
  while (v7 <= 0x17u)
  {
    if (BlueFin::GlPeGloFcnOsnMgr::GetHardcodedFcn((BlueFin::GlPeGloFcnOsnMgr *)++v7) == v6)
    {
      *a3 = v7;
      return (v9 + 1);
    }
  }
  return v9;
}

double BlueFin::GlPeTimeManager::inflatePreciseRtcUnc(BlueFin::GlPeTimeManager *this, double a2, double a3, double a4)
{
  if (*((double *)this + 460) >= 1000000.0) {
    return a3;
  }
  if (!*((unsigned char *)this + 3648) || (*((_DWORD *)this + 686) & 2) == 0) {
    return a3;
  }
  double v6 = *((double *)this + 342);
  if (v6 >= 10000.0 || *((double *)this + 462) >= 1000000.0) {
    return a3;
  }
  double v7 = a2 - (*((double *)this + 459) - *((double *)this + 461));
  if (v7 >= 0.0) {
    double v8 = v7;
  }
  else {
    double v8 = -v7;
  }
  if (v8 <= a3)
  {
    double v8 = a3;
  }
  else
  {
    GlCustomLog(14, "Inflating RtcVsGnssUnc(ppb): %0.1f -> %0.1f\n", (a3 + a4) * 1000000000.0, (v8 + a4) * 1000000000.0);
    double v6 = *((double *)this + 342);
  }
  if (v8 > 0.0001 && v6 < 200000.0) {
    double v11 = 200000.0;
  }
  else {
    double v11 = v6;
  }
  if (v11 > v6)
  {
    GlCustomLog(14, "Override dts unc(us): %0.1f -> %0.1f\n", v6, v11);
    double v12 = *((double *)this + 340);
    double v13 = *((double *)this + 341);
    unsigned __int8 v14 = 0;
    BlueFin::GlPeTimeManager::SetDtsS((unint64_t)this, 1u, &v14, v12, v13, v11);
  }
  return v8;
}

uint64_t BlueFin::GlPeTimeManager::UpdateRtcModel(BlueFin::GlPeTimeManager *this, double a2, double a3)
{
  double v6 = a2 * 1000000000.0;
  GlCustomLog(14, "GlPeTimeManager::UpdateRtcModel:  LMS:%u  RtcVsTcxoPpb:%+.0lf  RtcVsTcxoUncPpb:%.0lf  ", *((_DWORD *)this + 642), a2 * 1000000000.0, a3 * 1000000000.0);
  uint64_t v7 = *((void *)this + 4);
  double v8 = (double)*(__int16 *)(v7 + 2) * 0.000000001;
  double v9 = (double)*(__int16 *)(v7 + 10) * 0.000000001;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  uint64_t v10 = 78;
  if (v9 < 0.0000003) {
    uint64_t v10 = 89;
  }
  GlCustomLog(14, "TcxoVsGnssPpb:%+.0lf  TcxoVsGnssUnc(ppb):%.0lf  Corrected:%c  ", v8 * 1000000000.0, v9 * 1000000000.0, v10);
  double v11 = a2;
  if (v9 < 0.0000003)
  {
    double v11 = v8 + a2;
    double v6 = (v8 + a2) * 1000000000.0;
    GlCustomLog(14, "RtcVsGnss:%.0lf(ppb)  \n", v6);
  }
  double v12 = (v9 + BlueFin::GlPeTimeManager::inflatePreciseRtcUnc(this, a2, a3, v9)) * 1000000000.0;
  uint64_t result = GlCustomLog(14, "RtcVsGnssPpb:%+.0lf  RtcVsGnssUnc(ppb):%.0lf\n", v6, v12);
  int v14 = *((_DWORD *)this + 642);
  *((unsigned char *)this + 3648) = 0;
  *((_DWORD *)this + 913) = v14;
  *((double *)this + 459) = v11;
  *((double *)this + 460) = v12;
  *((double *)this + 461) = v8;
  *((double *)this + 462) = v9 * 1000000000.0;
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_6000(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 3) {
    return 0;
  }
  if (v2 == 2)
  {
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
    v4.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v4)) {
      int v5 = 250;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 93, 94, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v5, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 93, 94, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v7, 0xFAu, 1);
    return 0;
  }
  return BlueFin::GlMeSrdAcqMgrSm::assisted;
}

unint64_t BlueFin::GlMeSrdCtrlSm::ReceiverParameterProgrammed(BlueFin::GlMeSrdCtrlSm *this, void *a2)
{
  __int16 v5 = 13;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v5);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  return result;
}

double BlueFin::GlPeMsmtMgr::GetOscOffAdjustedInitDoppler(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2)
{
  double IniDoppler = BlueFin::GlPeMsmtMgr::GetIniDoppler(this, a2);
  __int16 v4 = *(_WORD *)(*((void *)this + 2399) + 2);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  return IniDoppler + (double)v4 * -0.000000001;
}

uint64_t BlueFin::GlPeAlmMgr::UseHardCodedDataSBAS(BlueFin::GlPeAlmMgr *this)
{
  uint64_t v2 = BlueFin::GlPeAlmMgr::m_iDefaultAlmSbasArrayDim;
  if (BlueFin::GlPeAlmMgr::m_iDefaultAlmSbasArrayDim >= 1)
  {
    uint64_t v3 = BlueFin::GlPeAlmMgr::m_potDefaultAlmSbasPlainOldData;
    do
    {
      __int16 v4 = *v3;
      if (*v3)
      {
        unsigned __int8 v5 = v4 - 119;
        uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, 1, (v4 - 119));
        if ((((unint64_t)*(unsigned int *)(*(void *)(*((void *)this + 54) + 72) + 4 * (v5 >> 5)) >> (v5 & 0x1F)) & 1) == 0)
        {
          BlueFin::GlPeAlmanac::operator=(AlmReference, (uint64_t)v3);
          *(_DWORD *)(v7 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
          *(unsigned char *)(v7 + 108) = v5;
          *(_WORD *)(v7 + 88) = *(unsigned __int8 *)(v7 + 88);
          if ((v4 + 73) <= 0xC0u)
          {
            DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          }
          uint64_t v8 = *((void *)this + 54);
          *(_DWORD *)(*(void *)(v8 + 72) + 4 * ((v4 - 119) >> 5)) |= 1 << ((v4 - 119) & 0x1F);
          BlueFin::GlSetBase::Remove(v8 + 48, (v4 - 119));
        }
      }
      v3 += 52;
      --v2;
    }
    while (v2);
  }
  *((unsigned char *)this + 36712) = 0;
  return 1;
}

uint64_t FireTranslator::translateGpsNavigationModel(unsigned __int8 *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "translateGpsNavigationModel : index (%d)", a3, a4, a5, a6, a7, a8, a2);
  *(_OWORD *)(a3 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (a2 > 0xF || *a1 <= (int)a2)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : index is invalid (%d)", v11, v12, v13, v14, v15, v16, a2);
    return 0;
  }
  double v17 = &a1[96 * a2];
  unsigned int v18 = v17[60];
  if (v18 >= 0x20)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : satId is invalid (%d)", v11, v12, v13, v14, v15, v16, v17[60]);
    return 0;
  }
  int v20 = &a1[96 * a2];
  unsigned int v21 = *((unsigned __int16 *)v20 + 18);
  if (v21 >= 0x400)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : ephemIodc is invalid (%d)", v11, v12, v13, v14, v15, v16, *((_WORD *)v20 + 18));
    return 0;
  }
  unint64_t v22 = &a1[96 * a2];
  unsigned int v23 = *((unsigned __int16 *)v22 + 19);
  if (v23 >= 0x93A8)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : ephemToc is invalid (%d)", v11, v12, v13, v14, v15, v16, *((_WORD *)v22 + 19));
    return 0;
  }
  unsigned int v24 = *(unsigned __int16 *)&a1[96 * a2 + 50];
  if (v24 >= 0x93A8)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : toe is invalid (%d)", v11, v12, v13, v14, v15, v16, *(_WORD *)&a1[96 * a2 + 50]);
    return 0;
  }
  unsigned int v25 = a1[96 * a2 + 61];
  if (v25 >= 0x10)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : ephemUra is invalid (%d)", v11, v12, v13, v14, v15, v16, a1[96 * a2 + 61]);
    return 0;
  }
  unsigned int v26 = a1[96 * a2 + 62];
  if (v26 >= 0x40)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : ephemSvHealth is invalid (%d)", v11, v12, v13, v14, v15, v16, a1[96 * a2 + 62]);
    return 0;
  }
  unsigned int v27 = a1[96 * a2 + 64];
  if (v27 >= 4)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : satStatus is invalid (%d)", v11, v12, v13, v14, v15, v16, a1[96 * a2 + 64]);
    return 0;
  }
  unsigned int v28 = a1[96 * a2 + 65];
  if (v28 >= 4)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : ephemCodeOnL2 is invalid (%d)", v11, v12, v13, v14, v15, v16, a1[96 * a2 + 65]);
    return 0;
  }
  unsigned int v29 = a1[96 * a2 + 80];
  if (v29 >= 0x20)
  {
    FireDeviceLog::DeviceLogBase(2, "translateGpsNavigationModel : ephemAODO is invalid (%d)", v11, v12, v13, v14, v15, v16, a1[96 * a2 + 80]);
    return 0;
  }
  *(_DWORD *)a3 = v18;
  *(_DWORD *)(a3 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  uint64_t v30 = &a1[96 * a2];
  *(_DWORD *)(a3 + 8) = v27;
  *(_DWORD *)(a3 + 12) = v28;
  *(_DWORD *)(a3 + 16) = v25;
  *(_DWORD *)(a3 + 20) = v26;
  int v31 = *((_DWORD *)v30 + 17);
  *(_DWORD *)(a3 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v21;
  *(_DWORD *)(a3 + 28) = v31;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v30 + 84);
  *(_DWORD *)(a3 + 48) = (char)v30[72];
  *(_DWORD *)(a3 + 52) = v23;
  int v32 = *((_DWORD *)v17 + 1);
  int v33 = *((__int16 *)v30 + 20);
  *(_DWORD *)(a3 + 56) = (char)v30[63];
  *(_DWORD *)(a3 + 60) = v33;
  int v34 = *((__int16 *)v30 + 21);
  *(_DWORD *)(a3 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v32;
  *(_DWORD *)(a3 + 68) = v34;
  int v35 = *((_DWORD *)v30 + 2);
  int v36 = *((_DWORD *)v30 + 3);
  *(_DWORD *)(a3 + 72) = *((__int16 *)v30 + 22);
  *(_DWORD *)(a3 + 76) = v35;
  *(_DWORD *)(a3 + 80) = *((__int16 *)v30 + 23);
  *(_DWORD *)(a3 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v36;
  int v37 = *((_DWORD *)v30 + 4);
  int v38 = *((_DWORD *)v30 + 5);
  *(_DWORD *)(a3 + 88) = *((__int16 *)v30 + 24);
  *(_DWORD *)(a3 + 92) = v37;
  int v39 = *((_DWORD *)v30 + 19);
  *(_DWORD *)(a3 + 96) = v24;
  *(_DWORD *)(a3 + 100) = v39;
  int v40 = *((__int16 *)v30 + 26);
  *(_DWORD *)(a3 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v29;
  *(_DWORD *)(a3 + 108) = v40;
  int v41 = *((__int16 *)v30 + 27);
  *(_DWORD *)(a3 + 112) = v38;
  *(_DWORD *)(a3 + 116) = v41;
  int v42 = *((__int16 *)v30 + 28);
  *(_DWORD *)(a3 + 120) = *((_DWORD *)v30 + 6);
  *(_DWORD *)(a3 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v42;
  *(void *)(a3 + 128) = *(void *)(v30 + 28);
  uint64_t result = 1;
  *(_DWORD *)(a3 + 136) = *((__int16 *)v30 + 29);
  return result;
}

void FireTranslator::translateGpsNavigationModel(unsigned __int8 *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LOBYTE(v9) = *a1;
  if (*a1)
  {
    unsigned int v11 = 0;
    do
    {
      if (FireTranslator::translateGpsNavigationModel(a1, v11, (uint64_t)&v38, a4, a5, a6, a7, a8))
      {
        uint64_t v12 = a2[1];
        unint64_t v13 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v13)
        {
          unint64_t v19 = 0xAF8AF8AF8AF8AF8BLL * (((char *)v12 - (unsigned char *)*a2) >> 2);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0x1D41D41D41D41D4) {
            std::vector<BlueFin::GlUncmprsdEph>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v21 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v13 - (void)*a2) >> 2);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0xEA0EA0EA0EA0EALL) {
            unint64_t v22 = 0x1D41D41D41D41D4;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22) {
            unsigned int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<BlueFin::GlUncmprsdEph>>((uint64_t)(a2 + 2), v22);
          }
          else {
            unsigned int v23 = 0;
          }
          unsigned int v24 = &v23[140 * v19];
          long long v25 = v41;
          *((_OWORD *)v24 + 2) = v40;
          *((_OWORD *)v24 + 3) = v25;
          *(_OWORD *)(v24 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_OWORD *)&v45[12];
          long long v26 = *(_OWORD *)v45;
          *((_OWORD *)v24 + 6) = v44;
          *((_OWORD *)v24 + 7) = v26;
          long long v27 = v43;
          *((_OWORD *)v24 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v42;
          *((_OWORD *)v24 + 5) = v27;
          long long v28 = v39;
          *(_OWORD *)unsigned int v24 = v38;
          *((_OWORD *)v24 + 1) = v28;
          uint64_t v30 = (char *)*a2;
          unsigned int v29 = (char *)a2[1];
          int v31 = v24;
          if (v29 != *a2)
          {
            do
            {
              *(_OWORD *)((char *)v31 - 140) = *(_OWORD *)(v29 - 140);
              long long v32 = *(_OWORD *)(v29 - 124);
              long long v33 = *(_OWORD *)(v29 - 108);
              long long v34 = *(_OWORD *)(v29 - 92);
              *(_OWORD *)((char *)v31 - 76) = *(_OWORD *)(v29 - 76);
              *(_OWORD *)((char *)v31 - 92) = v34;
              *(_OWORD *)((char *)v31 - 108) = v33;
              *(_OWORD *)((char *)v31 - 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v32;
              long long v35 = *(_OWORD *)(v29 - 60);
              long long v36 = *(_OWORD *)(v29 - 44);
              long long v37 = *(_OWORD *)(v29 - 28);
              *(v31 - 1) = *((_OWORD *)v29 - 1);
              *(_OWORD *)((char *)v31 - 28) = v37;
              *(_OWORD *)((char *)v31 - 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v36;
              *(_OWORD *)((char *)v31 - 60) = v35;
              int v31 = (_OWORD *)((char *)v31 - 140);
              v29 -= 140;
            }
            while (v29 != v30);
            unsigned int v29 = (char *)*a2;
          }
          unsigned int v18 = v24 + 140;
          *a2 = v31;
          a2[1] = v24 + 140;
          a2[2] = &v23[140 * v22];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          long long v14 = *(_OWORD *)v45;
          v12[6] = v44;
          v12[7] = v14;
          *(_OWORD *)((char *)v12 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_OWORD *)&v45[12];
          long long v15 = v41;
          void v12[2] = v40;
          v12[3] = v15;
          long long v16 = v43;
          v12[4] = v42;
          v12[5] = v16;
          long long v17 = v39;
          *uint64_t v12 = v38;
          v12[1] = v17;
          unsigned int v18 = (char *)v12 + 140;
        }
        a2[1] = v18;
      }
      ++v11;
      unsigned int v9 = *a1;
    }
    while (v11 < v9);
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd,setNwAssistanceGpsEphemeris,from,%d,to,%zu", a3, a4, a5, a6, a7, a8, v9);
}

int *FireTranslator::translateHulaAssistance(int *this, const unsigned int *a2, unint64_t *a3)
{
  int v3 = *this;
  if ((*this & 0x100) != 0)
  {
    *(void *)a2 |= 0x40uLL;
    if ((v3 & 0x80) == 0)
    {
LABEL_3:
      if ((v3 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v3 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  *(void *)a2 |= 0x80uLL;
  if ((v3 & 0x4000) == 0)
  {
LABEL_4:
    if ((v3 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  *(void *)a2 |= 0x1000uLL;
  if ((v3 & 0x40) == 0)
  {
LABEL_5:
    if ((v3 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  *(void *)a2 |= 0xC00uLL;
  if ((v3 & 0x200) == 0)
  {
LABEL_6:
    if ((v3 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  *(void *)a2 |= 0x8000uLL;
  if ((v3 & 0x400) == 0)
  {
LABEL_7:
    if ((v3 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_21:
  *(void *)a2 |= 0x10000uLL;
  if ((v3 & 0x800) != 0) {
LABEL_8:
  }
    *(void *)a2 |= 0x20000uLL;
LABEL_9:
  if ((v3 & 0x60000) != 0) {
    *(void *)a2 |= 0x200uLL;
  }
  if ((v3 & 0x1000) != 0) {
    *(void *)a2 |= 0x200000uLL;
  }
  if ((v3 & 0xC) == 4)
  {
    uint64_t v4 = 8;
  }
  else
  {
    if ((v3 & 0xC) != 0xC) {
      goto LABEL_25;
    }
    uint64_t v4 = 16;
  }
  *(void *)a2 |= v4;
LABEL_25:
  if ((v3 & 0x80000) != 0)
  {
    *(void *)a2 |= 0x20uLL;
    if ((v3 & 0x400000) == 0)
    {
LABEL_27:
      if ((v3 & 0x800000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_32;
    }
  }
  else if ((v3 & 0x400000) == 0)
  {
    goto LABEL_27;
  }
  *(void *)a2 |= 0x2000uLL;
  if ((v3 & 0x800000) == 0)
  {
LABEL_28:
    if ((v3 & 0x10) == 0) {
      return this;
    }
LABEL_33:
    *(void *)a2 |= 0x100uLL;
    return this;
  }
LABEL_32:
  *(void *)a2 |= 0x4000uLL;
  if ((v3 & 0x10) != 0) {
    goto LABEL_33;
  }
  return this;
}

void std::vector<BlueFin::GlUncmprsdEph>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2655D8108, MEMORY[0x263F8C060]);
}

void sub_263A2C1D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<BlueFin::GlUncmprsdEph>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1D41D41D41D41D5) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(140 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  long double v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

FireDeviceLog::Setting *FireDeviceLog::Setting::Setting(FireDeviceLog::Setting *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  int v2 = (*(uint64_t (**)(void))(**(void **)(FireResourceMgr::fInstance + 16) + 56))(*(void *)(FireResourceMgr::fInstance + 16));
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_DWORD *)this = v2;
  int v3 = v2 - 1;
  if ((v2 - 1) <= 8)
  {
    int v4 = *(_DWORD *)&asc_263BA6540[4 * v3];
    int v5 = dword_263BA6564[v3];
    *((_DWORD *)this + 1) = v4;
    *((_DWORD *)this + 2) = v5;
  }
  return this;
}

void FireDeviceLog::StaticSetting::Init(FireDeviceLog::StaticSetting *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!FireDeviceLog::StaticSetting::fInstance) {
    operator new();
  }
  FireDeviceLog::DeviceLogBase(5, "FireDeviceLog,Setting,level,%d,pri,0x%x,fac,0x%x", a3, a4, a5, a6, a7, a8, *(_DWORD *)FireDeviceLog::StaticSetting::fInstance);
}

void sub_263A2C3C4(_Unwind_Exception *a1)
{
  MEMORY[0x263E6DD80](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

void GnssHal::ExtensionsFire::RecoveryPoint::~RecoveryPoint(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void __clang_call_terminate(void *a1)
{
}

void std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    int v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__emplace_back_slow_path<GnssHal::ExtensionsFire::RecoveryPoint&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  unsigned int v11 = (std::string *)&v7[56 * v3];
  unint64_t v13 = &v7[56 * v6];
  std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>::construct[abi:ne180100]<GnssHal::ExtensionsFire::RecoveryPoint,GnssHal::ExtensionsFire::RecoveryPoint&>(a1 + 16, v11, a2);
  uint64_t v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<GnssHal::ExtensionsFire::RecoveryPoint>::~__split_buffer(&v10);
  return v8;
}

void sub_263A2C690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<GnssHal::ExtensionsFire::RecoveryPoint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>::construct[abi:ne180100]<GnssHal::ExtensionsFire::RecoveryPoint,GnssHal::ExtensionsFire::RecoveryPoint&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 6);
  unint64_t v6 = (std::string *)((char *)this + 32);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 4), *((void *)a3 + 5));
  }
  else
  {
    long long v7 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((void *)a3 + 6);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_263A2C724(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 56;
      long long v6 = *(_OWORD *)(v3 - 56);
      *(void *)(v4 - 40) = *(void *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v6;
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 56) = 0;
      *(_DWORD *)(v4 - 32) = *(_DWORD *)(v3 - 32);
      long long v7 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      v4 -= 56;
      v3 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void std::vector<GnssHal::ExtensionsFire::RecoveryPoint>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void **std::__split_buffer<GnssHal::ExtensionsFire::RecoveryPoint>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<GnssHal::ExtensionsFire::RecoveryPoint>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<GnssHal::ExtensionsFire::RecoveryPoint>::destroy[abi:ne180100](v4, i - 56);
  }
}

void *gnss::Device::Device(void *result)
{
  *uint64_t result = &unk_270EB83A8;
  return result;
}

uint64_t gnss::FireGnssDevice::reset(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(gnss::Result)>::operator()(a2, 7);
}

uint64_t gnss::FireGnssDevice::stop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(5, "#fgd,stop", a3, a4, a5, a6, a7, a8, v27);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v28 = a1;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v29, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v30, a3);
  long long v32 = 0;
  uint64_t v12 = operator new(0x50uLL);
  uint64_t v13 = v28;
  *uint64_t v12 = &unk_270EB8D30;
  v12[1] = v13;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v12 + 2), (uint64_t)v29);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(v12 + 6), (uint64_t)v30);
  long long v32 = v12;
  std::function<void ()(gnss::Result)>::operator=((void *)(v11 + 976), (uint64_t)v31);
  FireDeviceLog::DeviceLogBase(6, "#fmh,setOnEngineStopCompleted,%p", v14, v15, v16, v17, v18, v19, (char)v31);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v31);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v29);
  return FireMessageHandler::send(*(void *)(a1 + 40), 1073741825, v20, v21, v22, v23, v24, v25);
}

void sub_263A2CA2C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t gnss::FireGnssDevice::setPVTMReport(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  v18[3] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 152) = a2;
  *(unsigned char *)(a1 + 153) = a3;
  uint64_t v10 = (void *)a8[3];
  if (v10)
  {
    if (v10 == a8)
    {
      uint64_t v17 = v16;
      (*(void (**)(void *, void *))(*a8 + 24))(a8, v16);
    }
    else
    {
      uint64_t v17 = (void *)(*(uint64_t (**)(void *))(*v10 + 16))(v10);
    }
    uint64_t v12 = a1 + 160;
    if (v16 != (void *)(a1 + 160))
    {
      uint64_t v13 = v17;
      uint64_t v14 = *(void *)(a1 + 184);
      if (v17 == v16)
      {
        if (v14 == v12)
        {
          (*(void (**)(void *, void *))(v16[0] + 24))(v16, v18);
          (*(void (**)(void *))(*v17 + 32))(v17);
          uint64_t v17 = 0;
          (*(void (**)(void, void *))(**(void **)(a1 + 184) + 24))(*(void *)(a1 + 184), v16);
          (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
          *(void *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
          uint64_t v17 = v16;
          (*(void (**)(void *, uint64_t))(v18[0] + 24))(v18, a1 + 160);
          (*(void (**)(void *))(v18[0] + 32))(v18);
        }
        else
        {
          (*(void (**)(void *, uint64_t))(v16[0] + 24))(v16, a1 + 160);
          (*(void (**)(void *))(*v17 + 32))(v17);
          uint64_t v17 = *(void **)(a1 + 184);
        }
        *(void *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v12;
      }
      else if (v14 == v12)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v12 + 24))(a1 + 160, v16);
        (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
        *(void *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v17;
        uint64_t v17 = v16;
      }
      else
      {
        uint64_t v17 = *(void **)(a1 + 184);
        *(void *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v13;
      }
    }
    std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](v16);
    int v11 = 1;
  }
  else
  {
    int v11 = 4;
  }

  return std::function<void ()(gnss::Result)>::operator()(a9, v11);
}

void sub_263A2CD8C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t gnss::FireGnssDevice::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 24))
  {
    std::function<void ()(std::vector<std::string>)>::operator=<std::function<void ()(std::vector<std::string>&&)> &,void>((void *)(a1 + 192), a3);
    *(void *)(a1 + 22bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }

  return std::function<void ()(gnss::Result)>::operator()(a4, v7);
}

void *std::function<void ()(std::vector<std::string>)>::operator=<std::function<void ()(std::vector<std::string>&&)> &,void>(void *a1, uint64_t a2)
{
  unsigned __int8 v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(std::vector<std::string>)>::__value_func[abi:ne180100]<std::function<void ()(std::vector<std::string>&&)>,std::allocator<void ()(std::vector<std::string>&&)>>((uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<void ()(std::vector<std::string>)>::swap[abi:ne180100](v5, a1);
  std::__function::__value_func<void ()(std::vector<std::string>)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void sub_263A2CE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gnss::FireGnssDevice::deleteGnssData(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd deleteGnssData deleteFlags = %llu", a3, a4, a5, a6, a7, a8, a2);
  int v10 = FireMessageHandler::deleteSto(*(FireMessageHandler **)(a1 + 40));

  return std::function<void ()(gnss::Result)>::operator()(a3, v10);
}

uint64_t gnss::FireGnssDevice::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd clear", a3, a4, a5, a6, a7, a8, v12);
  int v10 = FireMessageHandler::clearNvStorage(*(FireMessageHandler **)(a1 + 40));

  return std::function<void ()(gnss::Result)>::operator()(a2, v10);
}

uint64_t gnss::FireGnssDevice::setAssistanceAccel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = FireMessageHandler::setAssistanceAccel(*(void *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);

  return std::function<void ()(gnss::Result)>::operator()(a3, v9);
}

uint64_t gnss::FireGnssDevice::setAssistanceGyro(uint64_t a1, float32x2_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = FireMessageHandler::setAssistanceGyro(*(void *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);

  return std::function<void ()(gnss::Result)>::operator()(a3, v9);
}

uint64_t gnss::FireGnssDevice::setAssistanceDem(uint64_t a1, unint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  bzero(v27, 0xDD8uLL);
  __src[0] = 0x30000000BLL;
  __src[1] = a2 / 0xF4240;
  v27[8] = 1;
  float v10 = a4;
  float v11 = a5;
  float v28 = v10;
  float v29 = v11;
  FireDeviceLog::DeviceLogBase(6, "#fgd DEM,feeding,dem alt,%.3f,unc,%.3f", v12, v13, v14, v15, v16, v17, SLOBYTE(a4));
  uint64_t v18 = *(void *)(a1 + 40);
  std::deque<BlueFin::GlExtSensData>::push_back((void *)(v18 + 1744), __src);
  FireMessageHandler::send(v18, 1073741831, v19, v20, v21, v22, v23, v24);
  return std::function<void ()(gnss::Result)>::operator()(a3, 1);
}

uint64_t gnss::FireGnssDevice::setAssistanceMapVector(uint64_t a1, unint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  bzero(v49, 0xDD8uLL);
  __src[0] = 0x300000017;
  __src[1] = a2 / 0xF4240;
  v49[8] = 1;
  int v57 = -1082130432;
  if (a3)
  {
    float v32 = a6;
    float v33 = v32;
  }
  else
  {
    float v33 = -999.0;
  }
  float v34 = a7;
  float v35 = a8;
  float v36 = a9;
  if (a11) {
    int v37 = 33;
  }
  else {
    int v37 = 1;
  }
  if (a13) {
    int v38 = 8;
  }
  else {
    int v38 = 0;
  }
  int v39 = v38 | v37;
  FireDeviceLog::DeviceLogBase(6, "#fgd feeding,mapVector,startLat,%.7lf,startLon,%.7lf,startAlt,%.1f,length,%.1f,azimuth,%.1f,width,%.1f,attributes,%u", v26, v27, v28, v29, v30, v31, SLOBYTE(a4));
  double v50 = a4;
  double v51 = a5;
  float v52 = v33;
  float v53 = v34;
  float v54 = v35;
  float v55 = v36;
  int v56 = v39;
  uint64_t v40 = *(void *)(a1 + 40);
  std::deque<BlueFin::GlExtSensData>::push_back((void *)(v40 + 1744), __src);
  FireMessageHandler::send(v40, 1073741831, v41, v42, v43, v44, v45, v46);
  return std::function<void ()(gnss::Result)>::operator()(a15, 1);
}

uint64_t gnss::FireGnssDevice::setAssistanceSpeedConstraint(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a2 == -1)
  {
    uint64_t v16 = "#fgd Pedometer Assistance: pedometer constraint assistance command ignored due to invalid validity time";
  }
  else
  {
    BOOL v13 = (*(uint64_t *)&a9 <= -1 || ((*(void *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
       && (unint64_t)(*(void *)&a9 - 1) >= 0xFFFFFFFFFFFFFLL;
    if (v13 || (double v15 = ceil(a9), v15 > 255.0))
    {
      uint64_t v16 = "#fgd Pedometer Assistance: pedometer constraint assistance command ignored due to invalid duration";
    }
    else if (*(uint64_t *)&a10 > -1 && ((*(void *)&a10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF {
           || (unint64_t)(*(void *)&a10 - 1) < 0xFFFFFFFFFFFFFLL
    }
           || (*(void *)&a10 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      if ((*(void *)&a11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a11 >= a10)
      {
        FireDeviceLog::DeviceLogBase(6, "#fgd Injecting Pedometer Assistance duration = %lf,speedLowerBound=%lf,speedUpperBound=%lf", a3, a4, a5, a6, a7, a8, SLOBYTE(a9));
        bzero(v33, 0xDD8uLL);
        __src[0] = 0x300000066;
        __src[1] = a2 / 0xF4240;
        v33[8] = 1;
        char v36 = (int)v15;
        double v34 = a10;
        double v35 = a11;
        uint64_t v24 = *(void *)(a1 + 40);
        std::deque<BlueFin::GlExtSensData>::push_back((void *)(v24 + 1744), __src);
        FireMessageHandler::send(v24, 1073741831, v25, v26, v27, v28, v29, v30);
        return std::function<void ()(gnss::Result)>::operator()(a3, 1);
      }
      uint64_t v16 = "#fgd Pedometer Assistance: pedometer constraint assistance command ignored due to invalid maximum speed bound";
    }
    else
    {
      uint64_t v16 = "#fgd Pedometer Assistance: pedometer constraint assistance command ignored due to invalid minimum speed bound";
    }
  }
  FireDeviceLog::DeviceLogBase(2, v16, a3, a4, a5, a6, a7, a8, v31);

  return std::function<void ()(gnss::Result)>::operator()(a3, 4);
}

uint64_t gnss::FireGnssDevice::setAssistanceAlongTrackVelocity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (a2 == -1)
  {
    uint64_t v30 = "#fgd Pedometer Assistance: pedometer speed assistance command ignored due to invalid validity time";
  }
  else if (*(uint64_t *)&a9 > -1 && ((*(void *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF {
         || (unint64_t)(*(void *)&a9 - 1) < 0xFFFFFFFFFFFFFLL
  }
         || (*(void *)&a9 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    if (*(uint64_t *)&a10 > -1 && ((*(void *)&a10 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
      || (unint64_t)(*(void *)&a10 - 1) < 0xFFFFFFFFFFFFFLL)
    {
      FireDeviceLog::DeviceLogBase(6, "#fgd Injecting Pedometer Speed Assistance = %lf,uncertainty=%lf", a3, a4, a5, a6, a7, a8, SLOBYTE(a9));
      bzero(v33, 0xDD8uLL);
      __src[0] = 0x30000000DLL;
      __src[1] = a2 / 0xF4240;
      v33[8] = 1;
      float v20 = a9;
      float v21 = a10;
      float v34 = v20;
      float v35 = v21;
      uint64_t v22 = *(void *)(a1 + 40);
      std::deque<BlueFin::GlExtSensData>::push_back((void *)(v22 + 1744), __src);
      FireMessageHandler::send(v22, 1073741831, v23, v24, v25, v26, v27, v28);
      return std::function<void ()(gnss::Result)>::operator()(a3, 1);
    }
    uint64_t v30 = "#fgd Pedometer Assistance: pedometer speed assistance command ignored due to invalid along track sppeed uncertainty";
  }
  else
  {
    uint64_t v30 = "#fgd Pedometer Assistance: pedometer speed assistance command ignored due to invalid along track speed";
  }
  FireDeviceLog::DeviceLogBase(2, v30, a3, a4, a5, a6, a7, a8, v31);

  return std::function<void ()(gnss::Result)>::operator()(a3, 4);
}

uint64_t gnss::FireGnssDevice::setThermalRiskState(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd,setThermalRiskState,time,%llu,scale,%d,ignored", a3, a4, a5, a6, a7, a8, a2);

  return std::function<void ()(gnss::Result)>::operator()(a4, 7);
}

uint64_t gnss::FireGnssDevice::setPowerReport(uint64_t a1, void *a2, uint64_t a3)
{
  v13[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v11);
    }
    else
    {
      uint64_t v12 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
    uint64_t v7 = a1 + 232;
    if (v11 != (void *)(a1 + 232))
    {
      uint64_t v8 = v12;
      uint64_t v9 = *(void *)(a1 + 256);
      if (v12 == v11)
      {
        if (v9 == v7)
        {
          (*(void (**)(void *, void *))(v11[0] + 24))(v11, v13);
          (*(void (**)(void *))(*v12 + 32))(v12);
          uint64_t v12 = 0;
          (*(void (**)(void, void *))(**(void **)(a1 + 256) + 24))(*(void *)(a1 + 256), v11);
          (*(void (**)(void))(**(void **)(a1 + 256) + 32))(*(void *)(a1 + 256));
          *(void *)(a1 + 256) = 0;
          uint64_t v12 = v11;
          (*(void (**)(void *, uint64_t))(v13[0] + 24))(v13, a1 + 232);
          (*(void (**)(void *))(v13[0] + 32))(v13);
        }
        else
        {
          (*(void (**)(void *, uint64_t))(v11[0] + 24))(v11, a1 + 232);
          (*(void (**)(void *))(*v12 + 32))(v12);
          uint64_t v12 = *(void **)(a1 + 256);
        }
        *(void *)(a1 + 256) = v7;
      }
      else if (v9 == v7)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v7 + 24))(a1 + 232, v11);
        (*(void (**)(void))(**(void **)(a1 + 256) + 32))(*(void *)(a1 + 256));
        *(void *)(a1 + 256) = v12;
        uint64_t v12 = v11;
      }
      else
      {
        uint64_t v12 = *(void **)(a1 + 256);
        *(void *)(a1 + 256) = v8;
      }
    }
    std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](v11);
    int v6 = 1;
  }
  else
  {
    int v6 = 4;
  }

  return std::function<void ()(gnss::Result)>::operator()(a3, v6);
}

void sub_263A2DA20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t gnss::FireGnssDevice::setConfigSimulatorMode(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  FireDeviceLog::DeviceLogBase(3, "#fgd,setConfigSimulatorMode,enable,%d,week,%d", a3, a4, a5, a6, a7, a8, a2);
  uint64_t v12 = *(void *)(a1 + 40);
  *(unsigned char *)(v12 + 106bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  *(_DWORD *)(v12 + 1068) = v9;

  return std::function<void ()(gnss::Result)>::operator()(a5, 1);
}

uint64_t gnss::FireGnssDevice::setConfigNetworkFreqAssistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setConfigCoexistence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd,%s,coex,0x%llu", a3, a4, a5, a6, a7, a8, (char)"setConfigCoexistence");

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

void gnss::FireGnssDevice::setNwAssistanceGpsEphemeris(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(6, "#fgd,%s", a3, a4, a5, a6, a7, a8, (char)"setNwAssistanceGpsEphemeris");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  FireTranslator::translateGpsNavigationModel(a2, __p, v11, v12, v13, v14, v15, v16);
  uint64_t v17 = *(void *)(a1 + 40);
  long long v18 = *(_OWORD *)(v17 + 2120);
  *(_OWORD *)(v17 + 2120) = *(_OWORD *)__p;
  *(_OWORD *)__p = v18;
  uint64_t v19 = *(void *)(v17 + 2136);
  *(void *)(v17 + 2136) = v27;
  uint64_t v27 = v19;
  FireMessageHandler::send(v17, 1073741835, v20, v21, v22, v23, v24, v25);
  std::function<void ()(gnss::Result)>::operator()(a3, 1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_263A2DBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void newGnssDevice()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_263A2E848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnss::Device::getObjectVersionNumber(gnss::Device *this)
{
  return 2502;
}

void gnss::FireGnssDevice::~FireGnssDevice(gnss::FireGnssDevice *this)
{
  gnss::FireGnssDevice::~FireGnssDevice(this);

  JUMPOUT(0x263E6DD80);
}

{
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  void **v6;

  *(void *)this = &unk_270EB8590;
  std::__function::__value_func<void ()(BlueFin::GlSvIqData const*)>::~__value_func[abi:ne180100]((void *)this + 50);
  std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::destroy(*((void **)this + 47));
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)this + 37);
  std::__function::__value_func<void ()(gnss::DecodedExtendedEphemeris &&)>::~__value_func[abi:ne180100]((void *)this + 33);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100]((void *)this + 29);
  std::__function::__value_func<void ()(std::vector<std::string>)>::~__value_func[abi:ne180100]((void *)this + 24);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100]((void *)this + 20);
  int v6 = (void **)((char *)this + 128);
  std::vector<gnss::SvInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    MEMORY[0x263E6DD80](v2, 0x1000C400A747E1ELL);
  }
  uint64_t v3 = (uint64_t *)*((void *)this + 14);
  *((void *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  if (v3) {
    std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](v3);
  }
  uint64_t v4 = (void *)*((void *)this + 11);
  if (v4)
  {
    *((void *)this + 12) = v4;
    operator delete(v4);
  }
  std::unique_ptr<gnss::MeasurementReport>::reset[abi:ne180100]((uint64_t *)this + 10, 0);
  std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::destroy(*((void **)this + 8));
  uint64_t v5 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__function::__value_func<void ()(gnss::Result,gnss::TimeTransferData)>::~__value_func[abi:ne180100]((void *)this + 1);
}

uint64_t gnss::FireGnssDevice::startEmergencyPreemptiveSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "startEmergencyPreemptiveSession,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::stopEmergencyPreemptiveSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "stopEmergencyPreemptiveSession,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a2, 7);
}

uint64_t gnss::Device::setEmergencyConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setEmergencySessionSummaryReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setEmergencySessionSummaryReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setEmergencyPositionReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setEmergencyPositionReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setEmergencyMeasurementReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setEmergencyMeasurementReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setEmergencyMeasurementWithEstimateReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setEmergencyMeasurementWithEstimateReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "startEmergencyPositionRequest,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a4, 7);
}

uint64_t gnss::Device::startEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::stopEmergencyPositionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "stopEmergencyPositionRequest,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setNwAssistanceNeededReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setNwAssistanceNeededReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setNwAssistanceGpsRefTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setNwAssistanceGpsRefTime,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setNwAssistanceRefPosition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setNwAssistanceRefPosition,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setNwAssistanceGpsAcquisition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setNwAssistanceGpsAcquisition,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setFtAssistanceNeededReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setFtAssistanceNeededReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::injectFTAssistance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "injectFTAssistance,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::decodeSuplInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "decodeSuplInit,illegalCall", a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t gnss::FireGnssDevice::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setSuplInit,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a4, 7);
}

uint64_t gnss::Device::setSuplInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setSuplLocationIdNeededReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setSuplLocationIdNeededReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setSuplLocationId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setSuplLocationId,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::abortSuplSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "abortSuplSession,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a2, 7);
}

uint64_t gnss::FireGnssDevice::setSuplSessionStatusReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setSuplSessionStatusReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setSuplWlanMeasurementNeededReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setSuplWlanMeasurementNeededReport,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnss::FireGnssDevice::setSuplWlanMeasurements(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  FireDeviceLog::DeviceLogBase(2, "setSuplWlanMeasurements,illegalCall", a3, a4, a5, a6, a7, a8, v10);

  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

void *std::function<void ()(BlueFin::GL_FIX_STATUS const*)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A2F4BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(char const*,short)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(char const*,short)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(char const*,short)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(char const*,short)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(char const*,short)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(char const*,short)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A2F834(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(BlueFin::GlGnssData const*)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A2FBAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A2FF24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A30204(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(BlueFin::GL_SYNCIN_STATUS)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A3057C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A308F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::function<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::operator=(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A30C6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *toString(void *a1, int a2)
{
  if ((a2 - 1) > 6) {
    uint64_t v2 = "UNK";
  }
  else {
    uint64_t v2 = off_2655D8140[(char)(a2 - 1)];
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x263E6DD80);
}

void std::default_delete<gnss::TimeConversionInfo>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    MEMORY[0x263E6DD80](v2, 0x1000C4095D96C66);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    MEMORY[0x263E6DD80](v3, 0x1000C4095D96C66);
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    MEMORY[0x263E6DD80](v4, 0x1000C4095D96C66);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    MEMORY[0x263E6DD80](v5, 0x1000C40D315E998);
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    MEMORY[0x263E6DD80](v6, 0x1000C4079AA8B5ELL);
  }

  JUMPOUT(0x263E6DD80);
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>,std::unique_ptr<gnss::MeasurementReport>,std::vector<gnss::SvInfo> &&,std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &&,std::unique_ptr<gnss::TimeConversionInfo,std::default_delete<std::vector<gnss::ReceiverBandCorrections,std::allocator<std::vector<gnss::SvInfo> &&>> &>>,std::unique_ptr<gnss::KlobucharModelParameters>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<std::string>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::PwrMeasurement>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlSvIqData const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB87A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB87A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1>,void ()(char const*,short)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1>,void ()(char const*,short)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8830;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1>,void ()(char const*,short)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8830;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1>,void ()(char const*,short)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_1>,void ()(char const*,short)>::target_type()
{
}

void *std::__function::__value_func<void ()(char const*,short)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssData const*)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssData const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB88C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssData const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB88C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssData const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssData const*)>::target_type()
{
}

void *std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_3>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::target_type()
{
}

void *std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GlSvIqData const*)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GlSvIqData const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB89E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GlSvIqData const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB89E0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GlSvIqData const*)>::operator()(uint64_t a1, _WORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v9 + 392))
  {
    *(unsigned char *)(v9 + 392) = 1;
    FireDeviceLog::DeviceLogBase(6, "fireiq,svid,constellation,signal,timePicoSec,rateMps,i,q", a3, a4, a5, a6, a7, a8, v12);
  }
  if (v8[6])
  {
    unint64_t v10 = 0;
    uint64_t v11 = (char *)v8 + 33;
    do
    {
      FireDeviceLog::DeviceLogBase(6, "fireiq,%d,%d,%d,%llu,%.1f,%d,%d", a3, a4, a5, a6, a7, a8, *v8);
      ++v10;
      v11 += 24;
    }
    while (v10 < (unsigned __int16)v8[6]);
  }
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GlSvIqData const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GlSvIqData const*)>::target_type()
{
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8A70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8A70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_5>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::target_type()
{
}

void *std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6>,void ()(void)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8B00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8B00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(void *)(v8 + 320))
  {
    FireDeviceLog::DeviceLogBase(2, "#fgd,error,%s", a3, a4, a5, a6, a7, a8, (char)"handleLtoFileErrorReport");
    uint64_t v9 = *(void *)(v8 + 320);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
    uint64_t v10 = *(void *)(v8 + 320);
    *(void *)(v8 + 320) = 0;
    if (v10 == v8 + 296)
    {
      char v12 = *(void (**)(uint64_t))(*(void *)(v8 + 296) + 32);
      v12(v8 + 296);
    }
    else if (v10)
    {
      uint64_t v11 = *(void (**)(void))(*(void *)v10 + 40);
      v11();
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(3, "#fgd,#warning,%s,fLtoErrorReportCb,nullptr", a3, a4, a5, a6, a7, a8, (char)"handleLtoFileErrorReport");
  }
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_6>,void ()(void)>::target_type()
{
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_SYNCIN_STATUS)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_SYNCIN_STATUS)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_270EB8B80;
  return result;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_SYNCIN_STATUS)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB8B80;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_SYNCIN_STATUS)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_SYNCIN_STATUS)>::target_type()
{
}

void *std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8C10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8C10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_8>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::target_type()
{
}

void *std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__func()
{
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8CA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8CA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9,std::allocator<gnss::FireGnssDevice::FireGnssDevice(std::unique_ptr<GnssHal::Interfaces>,std::function<void ()(gnss::Result)>)::$_9>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::target_type()
{
}

void *std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::~__func(void *a1)
{
  *a1 = &unk_270EB8D30;
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::~__func(void *a1)
{
  *a1 = &unk_270EB8D30;
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 2);

  JUMPOUT(0x263E6DD80);
}

void *std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x50uLL);
  *uint64_t v2 = &unk_270EB8D30;
  std::__compressed_pair_elem<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_263A321BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB8D30;
  return std::__compressed_pair_elem<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void *std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::destroy(uint64_t a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 48));

  return std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

void std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 6);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](a1 + 2);

  operator delete(a1);
}

uint64_t std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *a2;
  uint64_t v10 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fgd,ocstop,completed", a3, a4, a5, a6, a7, a8, v12);
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 328) = 0;
  std::function<void ()(gnss::Result)>::operator()(a1 + 16, v9);

  return std::function<void ()(gnss::Result)>::operator()(a1 + 48, v9);
}

uint64_t std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(gnss::Result)>::target_type()
{
}

void *std::__compressed_pair_elem<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<gnss::FireGnssDevice::stop(std::function<void ()(gnss::Result)>,std::function<void ()(gnss::Result)>)::$_0 const&,0ul>(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (uint64_t)(a1 + 5);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100](v4, (uint64_t)(a2 + 5));
  return a1;
}

void sub_263A3240C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<std::string>)>::__value_func[abi:ne180100]<std::function<void ()(std::vector<std::string>&&)>,std::allocator<void ()(std::vector<std::string>&&)>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  if (*(void *)(a2 + 24))
  {
    uint64_t v4 = operator new(0x28uLL);
    *uint64_t v4 = &unk_270EB8DC0;
    std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), a2);
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
  }
  return a1;
}

void *std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::~__func(void *a1)
{
  *a1 = &unk_270EB8DC0;
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::~__func(void *a1)
{
  *a1 = &unk_270EB8DC0;
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x263E6DD80);
}

void *std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270EB8DC0;
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_263A32624(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB8DC0;
  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<void ()(std::vector<std::string> &&)>,std::allocator<void ()(std::vector<std::string> &&)>,void ()(std::vector<std::string>)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::vector<std::string>)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_263A329D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(std::vector<std::string> &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

void *std::default_delete<gnss::MeasurementExtension>::operator()[abi:ne180100](void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)result[16];
    if (v2)
    {
      v1[17] = v2;
      operator delete(v2);
    }
    uint64_t v3 = (void *)v1[12];
    if (v3)
    {
      v1[13] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x263E6DD80);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::__map_value_compare<std::pair<gnss::SatelliteSystem,unsigned short>,std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>,std::less<std::pair<gnss::SatelliteSystem,unsigned short>>,true>,std::allocator<std::__value_type<std::pair<gnss::SatelliteSystem,unsigned short>,gnss::FireGnssDevice::PhaseTrackingState>>>::__emplace_unique_key_args<std::pair<gnss::SatelliteSystem,unsigned short>,std::piecewise_construct_t const&,std::tuple<std::pair<gnss::SatelliteSystem,unsigned short> const&>,std::tuple<>>(uint64_t **a1, int a2, unsigned __int16 a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    uint64_t v8 = a1 + 1;
    goto LABEL_11;
  }
  do
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v6;
      int v9 = *((_DWORD *)v6 + 8);
      if (v9 <= a2) {
        break;
      }
LABEL_5:
      uint64_t v6 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_11;
      }
    }
    if (v9 >= a2)
    {
      unsigned int v10 = *((unsigned __int16 *)v8 + 18);
      if (v10 > a3) {
        goto LABEL_5;
      }
      if (v10 >= a3) {
        return v8;
      }
    }
    uint64_t v6 = v8[1];
  }
  while (v6);
  uint64_t v7 = v8 + 1;
LABEL_11:
  uint64_t v11 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x40uLL);
  v8[4] = *a4;
  v8[5] = (uint64_t *)256;
  v8[6] = 0;
  v8[7] = 0;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *uint64_t v7 = (uint64_t *)v8;
  char v12 = (uint64_t *)**a1;
  uint64_t v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void gnss::fire::charToHex(gnss::fire *this@<X0>, unint64_t a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  if ((a2 & 0x8000000000000000) != 0) {
    std::string::basic_string[abi:ne180100](a4, "NegativeBufferLength,%lld", a2);
  }
  else {
    gnss::fire::charToHex(this, (const unsigned __int8 *)a2, a3, a4);
  }
}

void FireMessageHandler::FireMessageHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v162 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 32) = 0;
  int v9 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 22bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 54bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 70bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 86bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)a1 = &unk_270EB8F00;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 1008) = 3;
  *(unsigned char *)(a1 + 1060) = 0;
  *(unsigned char *)(a1 + 106bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1041) = 0u;
  *(_DWORD *)(a1 + 1068) = 2049;
  *(_WORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 114bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = xmmword_263BA7BC0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_WORD *)(a1 + 119bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 255;
  *(unsigned char *)(a1 + 1196) = 0;
  *(void *)(a1 + 1200) = 0x100000000;
  *(_DWORD *)(a1 + 1208) = 65556;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1240) = 196618;
  *(_WORD *)(a1 + 124bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 257;
  *(unsigned char *)(a1 + 1246) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_DWORD *)(a1 + 1272) = 0;
  *(void *)(a1 + 126bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_WORD *)(a1 + 1276) = 60;
  *(void *)(a1 + 1280) = 0x100000010;
  *(_DWORD *)(a1 + 1288) = 1;
  *(void *)(a1 + 1296) = a2;
  *(_OWORD *)(a1 + 130bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_DWORD *)(a1 + 1336) = 1065353216;
  *(void *)(a1 + 134bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(a1 + 1352) = 1;
  *(_DWORD *)(a1 + 1356) = 0;
  *(void *)(a1 + 138bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 1416) = 0;
  *(unsigned char *)(a1 + 142bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(a1 + 1692) = 0;
  *(unsigned char *)(a1 + 2112) = 0;
  *(void *)(a1 + 1952) = 0;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 190bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 182bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 174bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_DWORD *)(a1 + 211bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 16778216;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(void *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2128) = 0u;
  *(_DWORD *)(a1 + 214bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)(a1 + 218bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1065353216;
  *(void *)(a1 + 2192) = 0;
  *(unsigned char *)(a1 + 2200) = 0;
  *(unsigned char *)(a1 + 2208) = 0;
  *(unsigned char *)(a1 + 2240) = 0;
  FireDeviceLog::DeviceLogBase(5, "Version %s, build at %s", a3, a4, a5, a6, a7, a8, (char)"FIRE@98.0.4 GLL@612249");
  FireDeviceLog::DeviceLogBase(5, "Approximate memory size %u", v10, v11, v12, v13, v14, v15, 24);
  v157[0] = &unk_270EB8F58;
  v157[1] = a1;
  int v158 = v157;
  FireDeviceLog::DeviceLogBase(6, "fcb,setEngineOnStartCb,%p", v16, v17, v18, v19, v20, v21, (char)v157);
  uint64_t v22 = (uint64_t)v158;
  if (v158)
  {
    if (v158 == v157)
    {
      int v161 = &v160;
      (*(void (**)(void *, uint64_t *))(v157[0] + 24))(v157, &v160);
LABEL_6:
      uint64_t v23 = a1 + 360;
      if (&v160 != (uint64_t *)(a1 + 360))
      {
        uint64_t v24 = v161;
        uint64_t v25 = *(void *)(a1 + 384);
        if (v161 == &v160)
        {
          if (v25 == v23)
          {
            (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
            (*(void (**)(uint64_t *))(*v161 + 32))(v161);
            int v161 = 0;
            (*(void (**)(void, uint64_t *))(**(void **)(a1 + 384) + 24))(*(void *)(a1 + 384), &v160);
            (*(void (**)(void))(**(void **)(a1 + 384) + 32))(*(void *)(a1 + 384));
            *(void *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
            int v161 = &v160;
            (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 360);
            (*(void (**)(uint64_t *))(v159 + 32))(&v159);
          }
          else
          {
            (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 360);
            (*(void (**)(uint64_t *))(*v161 + 32))(v161);
            int v161 = *(uint64_t **)(a1 + 384);
          }
          *(void *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v23;
        }
        else if (v25 == v23)
        {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v23 + 24))(a1 + 360, &v160);
          (*(void (**)(void))(**(void **)(a1 + 384) + 32))(*(void *)(a1 + 384));
          *(void *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v161;
          int v161 = &v160;
        }
        else
        {
          int v161 = *(uint64_t **)(a1 + 384);
          *(void *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v24;
        }
      }
      std::__function::__value_func<short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::~__value_func[abi:ne180100](&v160);
      std::__function::__value_func<short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::~__value_func[abi:ne180100](v157);
      v155[0] = &unk_270EB8FE8;
      v155[1] = a1;
      int v156 = v155;
      FireDeviceLog::DeviceLogBase(6, "fcb,setEngineOnStopCb,%p", v26, v27, v28, v29, v30, v31, (char)v155);
      uint64_t v32 = (uint64_t)v156;
      if (v156)
      {
        if (v156 == v155)
        {
          int v161 = &v160;
          (*(void (**)(void *, uint64_t *))(v155[0] + 24))(v155, &v160);
LABEL_20:
          uint64_t v33 = a1 + 392;
          if (&v160 != (uint64_t *)(a1 + 392))
          {
            float v34 = v161;
            uint64_t v35 = *(void *)(a1 + 416);
            if (v161 == &v160)
            {
              if (v35 == v33)
              {
                (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                int v161 = 0;
                (*(void (**)(void, uint64_t *))(**(void **)(a1 + 416) + 24))(*(void *)(a1 + 416), &v160);
                (*(void (**)(void))(**(void **)(a1 + 416) + 32))(*(void *)(a1 + 416));
                *(void *)(a1 + 416) = 0;
                int v161 = &v160;
                (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 392);
                (*(void (**)(uint64_t *))(v159 + 32))(&v159);
              }
              else
              {
                (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 392);
                (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                int v161 = *(uint64_t **)(a1 + 416);
              }
              *(void *)(a1 + 416) = v33;
            }
            else if (v35 == v33)
            {
              (*(void (**)(uint64_t, uint64_t *))(*(void *)v33 + 24))(a1 + 392, &v160);
              (*(void (**)(void))(**(void **)(a1 + 416) + 32))(*(void *)(a1 + 416));
              *(void *)(a1 + 416) = v161;
              int v161 = &v160;
            }
            else
            {
              int v161 = *(uint64_t **)(a1 + 416);
              *(void *)(a1 + 416) = v34;
            }
          }
          std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::~__value_func[abi:ne180100](&v160);
          std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::~__value_func[abi:ne180100](v155);
          v153[0] = &unk_270EB9078;
          int v154 = v153;
          FireDeviceLog::DeviceLogBase(6, "fcb,setEngineOnAsicDataCb,%p", v36, v37, v38, v39, v40, v41, (char)v153);
          uint64_t v42 = (uint64_t)v154;
          if (v154)
          {
            if (v154 == v153)
            {
              int v161 = &v160;
              (*(void (**)(void *, uint64_t *))(v153[0] + 24))(v153, &v160);
LABEL_34:
              uint64_t v43 = a1 + 488;
              if (&v160 != (uint64_t *)(a1 + 488))
              {
                uint64_t v44 = v161;
                uint64_t v45 = *(void *)(a1 + 512);
                if (v161 == &v160)
                {
                  if (v45 == v43)
                  {
                    (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                    (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                    int v161 = 0;
                    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 512) + 24))(*(void *)(a1 + 512), &v160);
                    (*(void (**)(void))(**(void **)(a1 + 512) + 32))(*(void *)(a1 + 512));
                    *(void *)(a1 + 512) = 0;
                    int v161 = &v160;
                    (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 488);
                    (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                  }
                  else
                  {
                    (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 488);
                    (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                    int v161 = *(uint64_t **)(a1 + 512);
                  }
                  *(void *)(a1 + 512) = v43;
                }
                else if (v45 == v43)
                {
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v43 + 24))(a1 + 488, &v160);
                  (*(void (**)(void))(**(void **)(a1 + 512) + 32))(*(void *)(a1 + 512));
                  *(void *)(a1 + 512) = v161;
                  int v161 = &v160;
                }
                else
                {
                  int v161 = *(uint64_t **)(a1 + 512);
                  *(void *)(a1 + 512) = v44;
                }
              }
              std::__function::__value_func<void ()(unsigned char *,short)>::~__value_func[abi:ne180100](&v160);
              std::__function::__value_func<void ()(unsigned char *,short)>::~__value_func[abi:ne180100](v153);
              v151[0] = &unk_270EB9108;
              float v152 = v151;
              FireDeviceLog::DeviceLogBase(6, "fcb,setEngineOnTimerRqCb,%p", v46, v47, v48, v49, v50, v51, (char)v151);
              uint64_t v52 = (uint64_t)v152;
              if (v152)
              {
                if (v152 == v151)
                {
                  int v161 = &v160;
                  (*(void (**)(void *, uint64_t *))(v151[0] + 24))(v151, &v160);
LABEL_48:
                  uint64_t v53 = a1 + 424;
                  if (&v160 != (uint64_t *)(a1 + 424))
                  {
                    float v54 = v161;
                    uint64_t v55 = *(void *)(a1 + 448);
                    if (v161 == &v160)
                    {
                      if (v55 == v53)
                      {
                        (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                        (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                        int v161 = 0;
                        (*(void (**)(void, uint64_t *))(**(void **)(a1 + 448) + 24))(*(void *)(a1 + 448), &v160);
                        (*(void (**)(void))(**(void **)(a1 + 448) + 32))(*(void *)(a1 + 448));
                        *(void *)(a1 + 448) = 0;
                        int v161 = &v160;
                        (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 424);
                        (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                      }
                      else
                      {
                        (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 424);
                        (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                        int v161 = *(uint64_t **)(a1 + 448);
                      }
                      *(void *)(a1 + 448) = v53;
                    }
                    else if (v55 == v53)
                    {
                      (*(void (**)(uint64_t, uint64_t *))(*(void *)v53 + 24))(a1 + 424, &v160);
                      (*(void (**)(void))(**(void **)(a1 + 448) + 32))(*(void *)(a1 + 448));
                      *(void *)(a1 + 448) = v161;
                      int v161 = &v160;
                    }
                    else
                    {
                      int v161 = *(uint64_t **)(a1 + 448);
                      *(void *)(a1 + 448) = v54;
                    }
                  }
                  std::__function::__value_func<unsigned int ()(BlueFin::GlEngine *)>::~__value_func[abi:ne180100](&v160);
                  std::__function::__value_func<unsigned int ()(BlueFin::GlEngine *)>::~__value_func[abi:ne180100](v151);
                  v149[0] = &unk_270EB9198;
                  v149[1] = a1;
                  uint64_t v150 = v149;
                  FireDeviceLog::DeviceLogBase(6, "fcb,setEngineOnTimerSetCb,%p", v56, v57, v58, v59, v60, v61, (char)v149);
                  uint64_t v62 = (uint64_t)v150;
                  if (v150)
                  {
                    if (v150 == v149)
                    {
                      int v161 = &v160;
                      (*(void (**)(void *, uint64_t *))(v149[0] + 24))(v149, &v160);
LABEL_62:
                      uint64_t v63 = a1 + 456;
                      if (&v160 != (uint64_t *)(a1 + 456))
                      {
                        BOOL v64 = v161;
                        uint64_t v65 = *(void *)(a1 + 480);
                        if (v161 == &v160)
                        {
                          if (v65 == v63)
                          {
                            (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                            (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                            int v161 = 0;
                            (*(void (**)(void, uint64_t *))(**(void **)(a1 + 480) + 24))(*(void *)(a1 + 480), &v160);
                            (*(void (**)(void))(**(void **)(a1 + 480) + 32))(*(void *)(a1 + 480));
                            *(void *)(a1 + 480) = 0;
                            int v161 = &v160;
                            (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 456);
                            (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                          }
                          else
                          {
                            (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 456);
                            (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                            int v161 = *(uint64_t **)(a1 + 480);
                          }
                          *(void *)(a1 + 480) = v63;
                        }
                        else if (v65 == v63)
                        {
                          (*(void (**)(uint64_t, uint64_t *))(*(void *)v63 + 24))(a1 + 456, &v160);
                          (*(void (**)(void))(**(void **)(a1 + 480) + 32))(*(void *)(a1 + 480));
                          *(void *)(a1 + 480) = v161;
                          int v161 = &v160;
                        }
                        else
                        {
                          int v161 = *(uint64_t **)(a1 + 480);
                          *(void *)(a1 + 480) = v64;
                        }
                      }
                      std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::~__value_func[abi:ne180100](&v160);
                      std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::~__value_func[abi:ne180100](v149);
                      v147[0] = &unk_270EB9228;
                      v147[1] = a1;
                      int v148 = v147;
                      FireDeviceLog::DeviceLogBase(6, "fcb,setEngCbOnLTOFileReadCb,%p", v66, v67, v68, v69, v70, v71, (char)v147);
                      uint64_t v72 = (uint64_t)v148;
                      if (v148)
                      {
                        if (v148 == v147)
                        {
                          int v161 = &v160;
                          (*(void (**)(void *, uint64_t *))(v147[0] + 24))(v147, &v160);
LABEL_76:
                          uint64_t v73 = a1 + 616;
                          if (&v160 != (uint64_t *)(a1 + 616))
                          {
                            uint64_t v74 = v161;
                            uint64_t v75 = *(void *)(a1 + 640);
                            if (v161 == &v160)
                            {
                              if (v75 == v73)
                              {
                                (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                int v161 = 0;
                                (*(void (**)(void, uint64_t *))(**(void **)(a1 + 640) + 24))(*(void *)(a1 + 640), &v160);
                                (*(void (**)(void))(**(void **)(a1 + 640) + 32))(*(void *)(a1 + 640));
                                *(void *)(a1 + 640) = 0;
                                int v161 = &v160;
                                (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 616);
                                (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                              }
                              else
                              {
                                (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 616);
                                (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                int v161 = *(uint64_t **)(a1 + 640);
                              }
                              *(void *)(a1 + 640) = v73;
                            }
                            else if (v75 == v73)
                            {
                              (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 24))(a1 + 616, &v160);
                              (*(void (**)(void))(**(void **)(a1 + 640) + 32))(*(void *)(a1 + 640));
                              *(void *)(a1 + 640) = v161;
                              int v161 = &v160;
                            }
                            else
                            {
                              int v161 = *(uint64_t **)(a1 + 640);
                              *(void *)(a1 + 640) = v74;
                            }
                          }
                          std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::~__value_func[abi:ne180100](&v160);
                          std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::~__value_func[abi:ne180100](v147);
                          v145[0] = &unk_270EB92B8;
                          v145[1] = a1;
                          int v146 = v145;
                          FireDeviceLog::DeviceLogBase(6, "fcb,setEngCbOnSerialNumberCb,%p", v76, v77, v78, v79, v80, v81, (char)v145);
                          uint64_t v82 = (uint64_t)v146;
                          if (v146)
                          {
                            if (v146 == v145)
                            {
                              int v161 = &v160;
                              (*(void (**)(void *, uint64_t *))(v145[0] + 24))(v145, &v160);
LABEL_90:
                              uint64_t v83 = a1 + 648;
                              if (&v160 != (uint64_t *)(a1 + 648))
                              {
                                uint64_t v84 = v161;
                                uint64_t v85 = *(void *)(a1 + 672);
                                if (v161 == &v160)
                                {
                                  if (v85 == v83)
                                  {
                                    (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                    (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                    int v161 = 0;
                                    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 672) + 24))(*(void *)(a1 + 672), &v160);
                                    (*(void (**)(void))(**(void **)(a1 + 672) + 32))(*(void *)(a1 + 672));
                                    *(void *)(a1 + 672) = 0;
                                    int v161 = &v160;
                                    (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 648);
                                    (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                                  }
                                  else
                                  {
                                    (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 648);
                                    (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                    int v161 = *(uint64_t **)(a1 + 672);
                                  }
                                  *(void *)(a1 + 672) = v83;
                                }
                                else if (v85 == v83)
                                {
                                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v83 + 24))(a1 + 648, &v160);
                                  (*(void (**)(void))(**(void **)(a1 + 672) + 32))(*(void *)(a1 + 672));
                                  *(void *)(a1 + 672) = v161;
                                  int v161 = &v160;
                                }
                                else
                                {
                                  int v161 = *(uint64_t **)(a1 + 672);
                                  *(void *)(a1 + 672) = v84;
                                }
                              }
                              std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::~__value_func[abi:ne180100](&v160);
                              std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::~__value_func[abi:ne180100](v145);
                              v143[0] = &unk_270EB9348;
                              v143[1] = a1;
                              uint64_t v144 = v143;
                              FireDeviceLog::DeviceLogBase(6, "fcb,setReqOnStartCb,%p", v86, v87, v88, v89, v90, v91, (char)v143);
                              uint64_t v92 = (uint64_t)v144;
                              if (v144)
                              {
                                if (v144 == v143)
                                {
                                  int v161 = &v160;
                                  (*(void (**)(void *, uint64_t *))(v143[0] + 24))(v143, &v160);
LABEL_104:
                                  if (&v160 != v9)
                                  {
                                    int v93 = v161;
                                    int v94 = *(uint64_t **)(a1 + 32);
                                    if (v161 == &v160)
                                    {
                                      if (v94 == v9)
                                      {
                                        (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                        (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                        int v161 = 0;
                                        (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), &v160);
                                        (*(void (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
                                        *(void *)(a1 + 32) = 0;
                                        int v161 = &v160;
                                        (*(void (**)(uint64_t *, uint64_t *))(v159 + 24))(&v159, v9);
                                        (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                                      }
                                      else
                                      {
                                        (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, v9);
                                        (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                        int v161 = *(uint64_t **)(a1 + 32);
                                      }
                                      *(void *)(a1 + 32) = v9;
                                    }
                                    else if (v94 == v9)
                                    {
                                      (*(void (**)(uint64_t *, uint64_t *))(*v9 + 24))(v9, &v160);
                                      (*(void (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
                                      *(void *)(a1 + 32) = v161;
                                      int v161 = &v160;
                                    }
                                    else
                                    {
                                      int v161 = *(uint64_t **)(a1 + 32);
                                      *(void *)(a1 + 32) = v93;
                                    }
                                  }
                                  std::__function::__value_func<void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::~__value_func[abi:ne180100](&v160);
                                  std::__function::__value_func<void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::~__value_func[abi:ne180100](v143);
                                  v141[0] = &unk_270EB93D8;
                                  v141[1] = a1;
                                  int v142 = v141;
                                  FireDeviceLog::DeviceLogBase(6, "fcb,setReqOnStopCb,%p", v95, v96, v97, v98, v99, v100, (char)v141);
                                  uint64_t v101 = (uint64_t)v142;
                                  if (v142)
                                  {
                                    if (v142 == v141)
                                    {
                                      int v161 = &v160;
                                      (*(void (**)(void *, uint64_t *))(v141[0] + 24))(v141, &v160);
LABEL_118:
                                      uint64_t v102 = a1 + 40;
                                      if (&v160 != (uint64_t *)(a1 + 40))
                                      {
                                        int v103 = v161;
                                        uint64_t v104 = *(void *)(a1 + 64);
                                        if (v161 == &v160)
                                        {
                                          if (v104 == v102)
                                          {
                                            (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                            (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                            int v161 = 0;
                                            (*(void (**)(void, uint64_t *))(**(void **)(a1 + 64) + 24))(*(void *)(a1 + 64), &v160);
                                            (*(void (**)(void))(**(void **)(a1 + 64) + 32))(*(void *)(a1 + 64));
                                            *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
                                            int v161 = &v160;
                                            (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 40);
                                            (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                                          }
                                          else
                                          {
                                            (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 40);
                                            (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                            int v161 = *(uint64_t **)(a1 + 64);
                                          }
                                          *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v102;
                                        }
                                        else if (v104 == v102)
                                        {
                                          (*(void (**)(uint64_t, uint64_t *))(*(void *)v102 + 24))(a1 + 40, &v160);
                                          (*(void (**)(void))(**(void **)(a1 + 64) + 32))(*(void *)(a1 + 64));
                                          *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v161;
                                          int v161 = &v160;
                                        }
                                        else
                                        {
                                          int v161 = *(uint64_t **)(a1 + 64);
                                          *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v103;
                                        }
                                      }
                                      std::__function::__value_func<void ()(BlueFin::GlRequest *)>::~__value_func[abi:ne180100](&v160);
                                      std::__function::__value_func<void ()(BlueFin::GlRequest *)>::~__value_func[abi:ne180100](v141);
                                      v139[0] = &unk_270EB9468;
                                      v139[1] = a1;
                                      unsigned int v140 = v139;
                                      FireDeviceLog::DeviceLogBase(6, "fcb,setEngCbOnNvStgWriteCb,%p", v105, v106, v107, v108, v109, v110, (char)v139);
                                      uint64_t v111 = (uint64_t)v140;
                                      if (v140)
                                      {
                                        if (v140 == v139)
                                        {
                                          int v161 = &v160;
                                          (*(void (**)(void *, uint64_t *))(v139[0] + 24))(v139, &v160);
LABEL_132:
                                          uint64_t v112 = a1 + 584;
                                          if (&v160 != (uint64_t *)(a1 + 584))
                                          {
                                            int v113 = v161;
                                            uint64_t v114 = *(void *)(a1 + 608);
                                            if (v161 == &v160)
                                            {
                                              if (v114 == v112)
                                              {
                                                (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                                (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                                int v161 = 0;
                                                (*(void (**)(void, uint64_t *))(**(void **)(a1 + 608)
                                                                                          + 24))(*(void *)(a1 + 608), &v160);
                                                (*(void (**)(void))(**(void **)(a1 + 608) + 32))(*(void *)(a1 + 608));
                                                *(void *)(a1 + 608) = 0;
                                                int v161 = &v160;
                                                (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 584);
                                                (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                                              }
                                              else
                                              {
                                                (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 584);
                                                (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                                int v161 = *(uint64_t **)(a1 + 608);
                                              }
                                              *(void *)(a1 + 608) = v112;
                                            }
                                            else if (v114 == v112)
                                            {
                                              (*(void (**)(uint64_t, uint64_t *))(*(void *)v112 + 24))(a1 + 584, &v160);
                                              (*(void (**)(void))(**(void **)(a1 + 608) + 32))(*(void *)(a1 + 608));
                                              *(void *)(a1 + 608) = v161;
                                              int v161 = &v160;
                                            }
                                            else
                                            {
                                              int v161 = *(uint64_t **)(a1 + 608);
                                              *(void *)(a1 + 608) = v113;
                                            }
                                          }
                                          std::__function::__value_func<void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::~__value_func[abi:ne180100](&v160);
                                          std::__function::__value_func<void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::~__value_func[abi:ne180100](v139);
                                          v137[0] = &unk_270EB94F8;
                                          v137[1] = a1;
                                          unsigned int v138 = v137;
                                          FireDeviceLog::DeviceLogBase(6, "fcb,setEngCbOnNvStgReadCb,%p", v115, v116, v117, v118, v119, v120, (char)v137);
                                          uint64_t v121 = (uint64_t)v138;
                                          if (v138)
                                          {
                                            if (v138 == v137)
                                            {
                                              int v161 = &v160;
                                              (*(void (**)(void *, uint64_t *))(v137[0] + 24))(v137, &v160);
LABEL_146:
                                              uint64_t v122 = a1 + 520;
                                              if (&v160 != (uint64_t *)(a1 + 520))
                                              {
                                                uint64_t v123 = v161;
                                                uint64_t v124 = *(void *)(a1 + 544);
                                                if (v161 == &v160)
                                                {
                                                  if (v124 == v122)
                                                  {
                                                    (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                                    (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                                    int v161 = 0;
                                                    (*(void (**)(void, uint64_t *))(**(void **)(a1 + 544)
                                                                                              + 24))(*(void *)(a1 + 544), &v160);
                                                    (*(void (**)(void))(**(void **)(a1 + 544) + 32))(*(void *)(a1 + 544));
                                                    *(void *)(a1 + 54bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
                                                    int v161 = &v160;
                                                    (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 520);
                                                    (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                                                  }
                                                  else
                                                  {
                                                    (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 520);
                                                    (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                                    int v161 = *(uint64_t **)(a1 + 544);
                                                  }
                                                  *(void *)(a1 + 54bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v122;
                                                }
                                                else if (v124 == v122)
                                                {
                                                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v122 + 24))(a1 + 520, &v160);
                                                  (*(void (**)(void))(**(void **)(a1 + 544) + 32))(*(void *)(a1 + 544));
                                                  *(void *)(a1 + 54bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v161;
                                                  int v161 = &v160;
                                                }
                                                else
                                                {
                                                  int v161 = *(uint64_t **)(a1 + 544);
                                                  *(void *)(a1 + 54bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v123;
                                                }
                                              }
                                              std::__function::__value_func<void ()(BlueFin::GlNvStorageReader *)>::~__value_func[abi:ne180100](&v160);
                                              std::__function::__value_func<void ()(BlueFin::GlNvStorageReader *)>::~__value_func[abi:ne180100](v137);
                                              v135[0] = &unk_270EB9588;
                                              v135[1] = a1;
                                              int v136 = v135;
                                              FireDeviceLog::DeviceLogBase(6, "fcb,setEngCbOnOscReadyForStorageCb,%p", v125, v126, v127, v128, v129, v130, (char)v135);
                                              uint64_t v131 = (uint64_t)v136;
                                              if (v136)
                                              {
                                                if (v136 == v135)
                                                {
                                                  int v161 = &v160;
                                                  (*(void (**)(void *, uint64_t *))(v135[0] + 24))(v135, &v160);
LABEL_160:
                                                  uint64_t v132 = a1 + 552;
                                                  if (&v160 != (uint64_t *)(a1 + 552))
                                                  {
                                                    BOOL v133 = v161;
                                                    uint64_t v134 = *(void *)(a1 + 576);
                                                    if (v161 == &v160)
                                                    {
                                                      if (v134 == v132)
                                                      {
                                                        (*(void (**)(uint64_t *, uint64_t *))(v160 + 24))(&v160, &v159);
                                                        (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                                        int v161 = 0;
                                                        (*(void (**)(void, uint64_t *))(**(void **)(a1 + 576)
                                                                                                  + 24))(*(void *)(a1 + 576), &v160);
                                                        (*(void (**)(void))(**(void **)(a1 + 576) + 32))(*(void *)(a1 + 576));
                                                        *(void *)(a1 + 576) = 0;
                                                        int v161 = &v160;
                                                        (*(void (**)(uint64_t *, uint64_t))(v159 + 24))(&v159, a1 + 552);
                                                        (*(void (**)(uint64_t *))(v159 + 32))(&v159);
                                                      }
                                                      else
                                                      {
                                                        (*(void (**)(uint64_t *, uint64_t))(v160 + 24))(&v160, a1 + 552);
                                                        (*(void (**)(uint64_t *))(*v161 + 32))(v161);
                                                        int v161 = *(uint64_t **)(a1 + 576);
                                                      }
                                                      *(void *)(a1 + 576) = v132;
                                                    }
                                                    else if (v134 == v132)
                                                    {
                                                      (*(void (**)(uint64_t, uint64_t *))(*(void *)v132 + 24))(a1 + 552, &v160);
                                                      (*(void (**)(void))(**(void **)(a1 + 576) + 32))(*(void *)(a1 + 576));
                                                      *(void *)(a1 + 576) = v161;
                                                      int v161 = &v160;
                                                    }
                                                    else
                                                    {
                                                      int v161 = *(uint64_t **)(a1 + 576);
                                                      *(void *)(a1 + 576) = v133;
                                                    }
                                                  }
                                                  std::__function::__value_func<void ()(int,int,BlueFin::GL_TIME *)>::~__value_func[abi:ne180100](&v160);
                                                  std::__function::__value_func<void ()(int,int,BlueFin::GL_TIME *)>::~__value_func[abi:ne180100](v135);
                                                  operator new();
                                                }
                                                uint64_t v131 = (*(uint64_t (**)(void))(*v136 + 16))();
                                              }
                                              int v161 = (uint64_t *)v131;
                                              goto LABEL_160;
                                            }
                                            uint64_t v121 = (*(uint64_t (**)(void))(*v138 + 16))();
                                          }
                                          int v161 = (uint64_t *)v121;
                                          goto LABEL_146;
                                        }
                                        uint64_t v111 = (*(uint64_t (**)(void))(*v140 + 16))();
                                      }
                                      int v161 = (uint64_t *)v111;
                                      goto LABEL_132;
                                    }
                                    uint64_t v101 = (*(uint64_t (**)(void))(*v142 + 16))();
                                  }
                                  int v161 = (uint64_t *)v101;
                                  goto LABEL_118;
                                }
                                uint64_t v92 = (*(uint64_t (**)(void))(*v144 + 16))();
                              }
                              int v161 = (uint64_t *)v92;
                              goto LABEL_104;
                            }
                            uint64_t v82 = (*(uint64_t (**)(void))(*v146 + 16))();
                          }
                          int v161 = (uint64_t *)v82;
                          goto LABEL_90;
                        }
                        uint64_t v72 = (*(uint64_t (**)(void))(*v148 + 16))();
                      }
                      int v161 = (uint64_t *)v72;
                      goto LABEL_76;
                    }
                    uint64_t v62 = (*(uint64_t (**)(void))(*v150 + 16))();
                  }
                  int v161 = (uint64_t *)v62;
                  goto LABEL_62;
                }
                uint64_t v52 = (*(uint64_t (**)(void))(*v152 + 16))();
              }
              int v161 = (uint64_t *)v52;
              goto LABEL_48;
            }
            uint64_t v42 = (*(uint64_t (**)(void))(*v154 + 16))();
          }
          int v161 = (uint64_t *)v42;
          goto LABEL_34;
        }
        uint64_t v32 = (*(uint64_t (**)(void))(*v156 + 16))();
      }
      int v161 = (uint64_t *)v32;
      goto LABEL_20;
    }
    uint64_t v22 = (*(uint64_t (**)(void *))(*v158 + 16))(v158);
  }
  int v161 = (uint64_t *)v22;
  goto LABEL_6;
}

void sub_263A3553C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _Unwind_Exception *exception_object,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void FireCallback::~FireCallback(FireCallback *this)
{
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__value_func[abi:ne180100]((void *)this + 112);
  uint64_t v2 = (FireCallback *)*((void *)this + 111);
  if (v2 == (FireCallback *)((char *)this + 864))
  {
    (*(void (**)(char *))(*((void *)this + 108) + 32))((char *)this + 864);
  }
  else if (v2)
  {
    (*(void (**)(FireCallback *))(*(void *)v2 + 40))(v2);
  }
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::~__value_func[abi:ne180100]((void *)this + 104);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::~__value_func[abi:ne180100]((void *)this + 100);
  std::__function::__value_func<void ()(int,int,BlueFin::GL_TIME *)>::~__value_func[abi:ne180100]((void *)this + 96);
  std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,unsigned int,BlueFin::etReadLTOFileStat,BlueFin::GlPeLtoReadStat,BlueFin::etPredictionFileType,unsigned int)>::~__value_func[abi:ne180100]((void *)this + 92);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 88);
  std::__function::__value_func<void ()(BlueFin::GL_REFCLK_REQUEST)>::~__value_func[abi:ne180100]((void *)this + 84);
  std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::~__value_func[abi:ne180100]((void *)this + 80);
  std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::~__value_func[abi:ne180100]((void *)this + 76);
  std::__function::__value_func<void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::~__value_func[abi:ne180100]((void *)this + 72);
  std::__function::__value_func<void ()(int,int,BlueFin::GL_TIME *)>::~__value_func[abi:ne180100]((void *)this + 68);
  std::__function::__value_func<void ()(BlueFin::GlNvStorageReader *)>::~__value_func[abi:ne180100]((void *)this + 64);
  std::__function::__value_func<void ()(unsigned char *,short)>::~__value_func[abi:ne180100]((void *)this + 60);
  std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::~__value_func[abi:ne180100]((void *)this + 56);
  std::__function::__value_func<unsigned int ()(BlueFin::GlEngine *)>::~__value_func[abi:ne180100]((void *)this + 52);
  std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::~__value_func[abi:ne180100]((void *)this + 48);
  std::__function::__value_func<short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::~__value_func[abi:ne180100]((void *)this + 44);
  std::__function::__value_func<void ()(BlueFin::GlSvIqData const*)>::~__value_func[abi:ne180100]((void *)this + 40);
  std::__function::__value_func<void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::~__value_func[abi:ne180100]((void *)this + 36);
  uint64_t v3 = (FireCallback *)*((void *)this + 35);
  if (v3 == (FireCallback *)((char *)this + 256))
  {
    (*(void (**)(char *))(*((void *)this + 32) + 32))((char *)this + 256);
  }
  else if (v3)
  {
    (*(void (**)(FireCallback *))(*(void *)v3 + 40))(v3);
  }
  std::__function::__value_func<void ()(BlueFin::GlGnssData const*)>::~__value_func[abi:ne180100]((void *)this + 28);
  std::__function::__value_func<void ()(char const*,short)>::~__value_func[abi:ne180100]((void *)this + 24);
  std::__function::__value_func<void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::~__value_func[abi:ne180100]((void *)this + 20);
  std::__function::__value_func<void ()(BlueFin::GL_FACT_TEST_STATUS *)>::~__value_func[abi:ne180100]((void *)this + 16);
  uint64_t v4 = (FireCallback *)*((void *)this + 15);
  if (v4 == (FireCallback *)((char *)this + 96))
  {
    (*(void (**)(char *))(*((void *)this + 12) + 32))((char *)this + 96);
  }
  else if (v4)
  {
    (*(void (**)(FireCallback *))(*(void *)v4 + 40))(v4);
  }
  std::__function::__value_func<void ()(BlueFin::GL_FIX_STATUS const*)>::~__value_func[abi:ne180100]((void *)this + 8);
  std::__function::__value_func<void ()(BlueFin::GlRequest *)>::~__value_func[abi:ne180100]((void *)this + 4);

  std::__function::__value_func<void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::~__value_func[abi:ne180100](this);
}

void FireCallback::GlEngineOnStop(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v10 = *(void *)(FireCallback::pInstance + 408);
    if (v10)
    {
      uint64_t v14 = a1;
      int v13 = a2;
      uint64_t v12 = a3;
      (*(void (**)(uint64_t, uint64_t *, int *, uint64_t *))(*(void *)v10 + 48))(v10, &v14, &v13, &v12);
      return;
    }
    uint64_t v11 = "fcb,fEngineOnStopCb,nullptr";
  }
  else
  {
    uint64_t v11 = "fcb,GlEngineOnStop,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v11, a3, a4, a5, a6, a7, a8, a9);
}

void FireCallback::GlEngCbOnNvStgWrite(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 600);
    if (v9)
    {
      int v13 = a2;
      uint64_t v12 = a3;
      __int16 v11 = a4;
      (*(void (**)(uint64_t, int *, uint64_t *, __int16 *))(*(void *)v9 + 48))(v9, &v13, &v12, &v11);
      return;
    }
    uint64_t v10 = "fcb,fEngCbOnNvStgWriteCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlEngCbOnNvStgWrite,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void FireCallback::GlEngCbOnOscReadyForStorage(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 568);
    if (v9)
    {
      int v13 = a2;
      int v12 = a3;
      uint64_t v11 = a4;
      (*(void (**)(uint64_t, int *, int *, uint64_t *))(*(void *)v9 + 48))(v9, &v13, &v12, &v11);
      return;
    }
    uint64_t v10 = "fcb,fEngCbOnOscReadyForStorageCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlEngCbOnOscReadyForStorage,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void FireMessageHandler::~FireMessageHandler(FireMessageHandler *this)
{
  *(void *)this = &unk_270EB8F00;
  FireCallback::pInstance = 0;
  std::__hash_table<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::__unordered_map_hasher<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::hash<gnss::SvPositionSource>,std::equal_to<gnss::SvPositionSource>,true>,std::__unordered_map_equal<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::equal_to<gnss::SvPositionSource>,std::hash<gnss::SvPositionSource>,true>,std::allocator<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>>>::~__hash_table((uint64_t)this + 2152);
  uint64_t v2 = (void *)*((void *)this + 265);
  if (v2)
  {
    *((void *)this + 266) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 242);
  if (v3)
  {
    *((void *)this + 243) = v3;
    operator delete(v3);
  }
  std::deque<BlueFin::GlSensRawData>::~deque[abi:ne180100]((uint64_t)this + 1888);
  std::deque<BlueFin::GlSensRawData>::~deque[abi:ne180100]((uint64_t)this + 1840);
  std::deque<BlueFin::GlSensRawData>::~deque[abi:ne180100]((uint64_t)this + 1792);
  std::deque<BlueFin::GlExtSensData>::~deque[abi:ne180100]((uint64_t)this + 1744);
  std::deque<FireMessageHandler::GLRefPositionExtended>::~deque[abi:ne180100]((uint64_t)this + 1696);
  std::__function::__value_func<void ()(BlueFin::GL_REFCLK_REQUEST)>::~__value_func[abi:ne180100]((void *)this + 174);
  std::__function::__value_func<void ()(BlueFin::GL_STOP_CODE)>::~__value_func[abi:ne180100]((void *)this + 170);
  std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::~__hash_table((uint64_t)this + 1304);
  uint64_t v4 = (void *)*((void *)this + 144);
  if (v4)
  {
    *((void *)this + 145) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 141);
  if (v5)
  {
    *((void *)this + 142) = v5;
    operator delete(v5);
  }
  std::deque<FireMessageHandler::Message>::~deque[abi:ne180100]((uint64_t)this + 1080);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 122);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 118);
  uint64_t v6 = (void *)*((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v6) {
    std::default_delete<FireMessageHandler::Tick>::operator()[abi:ne180100](v6);
  }
  FireCallback::~FireCallback((FireMessageHandler *)((char *)this + 8));
}

{
  uint64_t vars8;

  FireMessageHandler::~FireMessageHandler(this);

  JUMPOUT(0x263E6DD80);
}

void FireCallback::GlReqOnSvIqData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 344);
    if (v9)
    {
      uint64_t v11 = a2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    uint64_t v10 = "fcb,fReqOnSvIqDataCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlReqOnSvIqData,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void FireMessageHandler::stopRequest(uint64_t a1, int a2)
{
  int v18 = a2;
  uint64_t v4 = (float *)(a1 + 1304);
  if (std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::find<FireMessageHandler::Request>((void *)(a1 + 1304), a2))
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::__emplace_unique_key_args<FireMessageHandler::Request,std::piecewise_construct_t const&,std::tuple<FireMessageHandler::Request const&>,std::tuple<>>(v4, a2, &v18)[3];
    (*(void (**)(void))(**(void **)(a1 + 1296) + 256))();
    FireDeviceLog::DeviceLogBase(6, "#fmh,StopRequest,request,%p,%d", v12, v13, v14, v15, v16, v17, v11);
  }
  else
  {
    FireDeviceLog::DeviceLogBase(5, "#fmh,stopRequest,request,%d,notExist", v5, v6, v7, v8, v9, v10, a2);
  }
}

void FireMessageHandler::SetAssistanceRawSensor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v9 = a2[5];
  if (v9)
  {
    uint64_t v12 = 0;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 2200))
      {
        uint64_t v13 = *(void *)(a1 + 1296);
        LOBYTE(v35) = 1;
        *(_DWORD *)((char *)&v35 + 1) = 0;
        *(_DWORD *)((char *)&v35 + 5) = 16842752;
        *(_DWORD *)((char *)&v35 + 9) = 0;
        HIDWORD(v35) = 0;
        int v36 = 257;
        char v37 = 0;
        if ((*(unsigned int (**)(void))(*(void *)v13 + 536))()) {
          FireDeviceLog::DeviceLogBase(5, "SetAssistanceRawSensorConfig,pass,enable,%d", v14, v15, v16, v17, v18, v19, 1);
        }
        else {
          FireDeviceLog::DeviceLogBase(2, "SetAssistanceRawSensorConfig,fail,enable,%d", v14, v15, v16, v17, v18, v19, 1);
        }
        *(unsigned char *)(a1 + 2200) = 1;
        uint64_t v9 = a2[5];
      }
      uint64_t v20 = (void **)a2[1];
      unint64_t v21 = a2[4];
      unint64_t v22 = (unint64_t)v20[v21 / 0xCC] + 20 * (v21 % 0xCC);
      int v23 = *(_DWORD *)(v22 + 16);
      long long v24 = *(_OWORD *)v22;
      uint64_t v25 = &v38 + 5 * v12;
      *(_OWORD *)uint64_t v25 = v24;
      v25[4] = v23;
      a2[4] = ++v21;
      a2[5] = v9 - 1;
      if (v21 >= 0x198)
      {
        operator delete(*v20);
        a2[1] += 8;
        a2[4] -= 204;
      }
      if (v12 != -1)
      {
        uint64_t v26 = v12 + 1;
        if (v12 != 39)
        {
          uint64_t v9 = a2[5];
          if (v9) {
            goto LABEL_17;
          }
        }
        *((void *)&v35 + 1) = &v38;
        *(void *)&long long v35 = (unsigned __int16)v26;
        int v27 = (*(uint64_t (**)(void, long long *))(**(void **)(a1 + 1296) + 528))(*(void *)(a1 + 1296), &v35);
        float v34 = "Warning";
        if (v27) {
          float v34 = (const char *)&unk_263B6E70D;
        }
        FireDeviceLog::DeviceLogBase(6, "#%s,GPSD_SENSOR,isPass,%d,timeStamp,%u,SensorType,%d,Size,%zu,InQueue,%zu", v28, v29, v30, v31, v32, v33, (char)v34);
      }
      uint64_t v26 = 0;
      uint64_t v9 = a2[5];
LABEL_17:
      uint64_t v12 = v26;
      if (!v9) {
        return;
      }
    }
  }

  FireDeviceLog::DeviceLogBase(3, "#Warning GPSD_SENSOR,No Raw Sensor Data", a3, a4, a5, a6, a7, a8, a9);
}

void FireCallback::GlReqOnSyncinReport(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 888);
    if (v9)
    {
      int v12 = a2;
      uint64_t v11 = a3;
      (*(void (**)(uint64_t, int *, uint64_t *))(*(void *)v9 + 48))(v9, &v12, &v11);
      return;
    }
    uint64_t v10 = "fcb,fReqOnSyncinReportCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlReqOnSyncinReport,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void FireCallback::GlReqOnFactTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 152);
    if (v9)
    {
      uint64_t v11 = a2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    uint64_t v10 = "fcb,fReqOnFactTestCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlReqOnFactTest,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

void FireCallback::GlReqOnStressTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 184);
    if (v9)
    {
      uint64_t v11 = a2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v11);
      return;
    }
    uint64_t v10 = "fcb,fReqOnStressTestCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlReqOnStressTest,nullptr";
  }

  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t FireMessageHandler::setAssistanceNWRti(FireMessageHandler *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2040) = 0u;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 202bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *(_OWORD *)((char *)this + 1992) = 0u;
  *((_DWORD *)this + 49bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 2;
  *((void *)this + 248) = 0xFFFFFFFFLL;
  *((void *)this + 263) = 0;
  if ((a2 & 1) == 0) {
    *((void *)this + 256) = 0xFFFFFFFFLL;
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigEnableGnssConstellations,GPS,num,%d,info,0x%llx,bad,0x%llx", a3, a4, a5, a6, a7, a8, 32);
  *((void *)this + 251) = 1023;
  if ((a2 & 0x10) == 0) {
    *((void *)this + 259) = 1023;
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigEnableGnssConstellations,QZSS,num,%d,info,0x%llx,bad,0x%llx", v10, v11, v12, v13, v14, v15, 10);
  *((void *)this + 253) = 0x7FFFFFFFFFFFFFFFLL;
  if ((a2 & 4) == 0) {
    *((void *)this + 261) = 0x7FFFFFFFFFFFFFFFLL;
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigEnableGnssConstellations,BEIDOU,num,%d,info,0x%llx,bad,0x%llx", v16, v17, v18, v19, v20, v21, 63);
  *((void *)this + 25bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0xFFFFFFFFFLL;
  if ((a2 & 8) == 0) {
    *((void *)this + 262) = 0xFFFFFFFFFLL;
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigEnableGnssConstellations,GALILEO,num,%d,info,0x%llx,bad,0x%llx", v22, v23, v24, v25, v26, v27, 36);
  *((void *)this + 250) = 0xFFFFFFLL;
  if ((a2 & 2) == 0) {
    *((void *)this + 258) = 0xFFFFFFLL;
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigEnableGnssConstellations,GLONASS,num,%d,info,0x%llx,bad,0x%llx", v28, v29, v30, v31, v32, v33, 24);
  *((void *)this + 255) = 0x3FFFLL;
  if ((a2 & 0x20) == 0) {
    *((void *)this + 263) = 0x3FFFLL;
  }
  FireDeviceLog::DeviceLogBase(6, "#fgd setConfigEnableGnssConstellations,NAVIC,num,%d,info,0x%llx,bad,0x%llx", v34, v35, v36, v37, v38, v39, 14);
  FireMessageHandler::send((uint64_t)this, 1073741850, v40, v41, v42, v43, v44, v45);
  return 1;
}

uint64_t FireMessageHandler::setAssistanceAccel(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      v12.n128_u32[0] = 0;
      v12.n128_u32[1] = (*(void *)v9 + 500000) / 0xF4240uLL;
      v12.n128_u64[1] = *(void *)(v9 + 8);
      int v13 = *(_DWORD *)(v9 + 16);
      std::deque<BlueFin::GlSensRawData>::push_back((void *)(a1 + 1840), &v12);
      v9 += 24;
    }
    while (v9 != v10);
  }
  FireMessageHandler::send(a1, 1073741833, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t FireMessageHandler::setAssistanceGyro(uint64_t a1, float32x2_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    float64x2_t v13 = (float64x2_t)vdupq_n_s64(0xC04CA5DC1A63C1F8);
    do
    {
      v14.n128_u32[0] = 2;
      v14.n128_u32[1] = (*(void *)v9 + 500000) / 0xF4240uLL;
      *(float32x2_t *)&v14.n128_i8[8] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v9[1]), v13));
      float v11 = (float)-v9[2].f32[0] * 57.2957795;
      float v15 = v11;
      std::deque<BlueFin::GlSensRawData>::push_back((void *)(a1 + 1888), &v14);
      v9 += 3;
    }
    while (v9 != v10);
  }
  FireMessageHandler::send(a1, 1073741834, a3, a4, a5, a6, a7, a8);
  return 1;
}

void FireMessageHandler::updateReceiverClockAnalyticsData(FireMessageHandler *this, double a2, double a3)
{
  if (*((unsigned char *)this + 2240))
  {
    DeviceCommon::GetMachContinuousTime(this);
    double v7 = a3 - (v6 - *((double *)this + 276));
    double v14 = a2;
    long long v15 = *((_OWORD *)this + 139);
    int v16 = (int)(v7 - *((double *)this + 277) + 0.5) & ~((int)(v7 - *((double *)this + 277) + 0.5) >> 31);
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(void, double *))(**(void **)(FireResourceMgr::fInstance + 40) + 32))(*(void *)(FireResourceMgr::fInstance + 40), &v14);
    FireDeviceLog::DeviceLogBase(5, "#ca,tcxo,val,%.1f,recall,%.1f,unc,%.1f,ppb,age,%d,sec", v8, v9, v10, v11, v12, v13, SLOBYTE(v14));
    FireMessageHandler::updateRtcClockAnalyticsData(this);
    if (*((unsigned char *)this + 2240)) {
      *((unsigned char *)this + 2240) = 0;
    }
  }
}

void FireMessageHandler::updateRtcClockAnalyticsData(FireMessageHandler *this)
{
  (*(void (**)(void, char *))(**((void **)this + 162) + 728))(*((void *)this + 162), v18);
  FireDeviceLog::DeviceLogBase(6, "#ca,rtc,valid,0x%x,sessionTime,%d,ms,freq,%.1f,unc,%.1f,ppb,time,%.1f,unc,%.1f,us", v1, v2, v3, v4, v5, v6, v18[0]);
  if ((v18[0] & 7) == 0)
  {
    double v14 = "#ca,rtc,avaibleFlag,check,failed";
LABEL_11:
    FireDeviceLog::DeviceLogBase(3, v14, v7, v8, v9, v10, v11, v12, v15);
    return;
  }
  if (v26 > 500.0 || v26 <= 0.0 || v24 > 500.0 || v24 <= 0.0)
  {
    char v15 = LOBYTE(v26);
    double v14 = "#ca,rtc,uncCheck,failed,freq,%.1f,%d,ppb,time,%.1f,%d,us";
    goto LABEL_11;
  }
  *(double *)int v16 = v25;
  *(double *)&v16[1] = v25 - v21;
  _OWORD v16[2] = v22;
  void v16[3] = v23;
  *(double *)&v16[4] = v20 * 0.001;
  LODWORD(v13) = v19;
  int v17 = (int)((double)v13 * 0.001 + 0.5);
  FireDeviceLog::DeviceLogBase(5, "#ca,rtc,freq,%.1f,freqErr,%.1f,unc,%.1f,ppb,timeErr,%.1f,unc,%.1f,us,age,%d,sec", v7, v8, v9, v10, v11, v12, SLOBYTE(v25));
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void, void *))(**(void **)(FireResourceMgr::fInstance + 40) + 40))(*(void *)(FireResourceMgr::fInstance + 40), v16);
}

void FireCallback::GlEngineOnLtoFileErrReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (FireCallback::pInstance)
  {
    uint64_t v9 = *(void *)(FireCallback::pInstance + 728);
    if (v9)
    {
      (*(void (**)(void))(*(void *)v9 + 48))();
      return;
    }
    uint64_t v10 = "fcb,fEngineOnLtoFileErrReportCb,nullptr";
  }
  else
  {
    uint64_t v10 = "fcb,GlEngineOnLtoFileErrReport,nullptr";
  }
  FireDeviceLog::DeviceLogBase(2, v10, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t FireMessageHandler::deleteSto(FireMessageHandler *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 2);
  *((void *)this + 145) = *((void *)this + 144);
  return 1;
}

uint64_t FireMessageHandler::clearNvStorage(FireMessageHandler *this)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 2);
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 4);
  *((void *)this + 145) = *((void *)this + 144);
  return 1;
}

uint64_t std::deque<BlueFin::GlSensRawData>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 102;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 204;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<BlueFin::GlExtSensData>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 8;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 16;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<FireMessageHandler::GLRefPositionExtended>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 42;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 85;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<FireMessageHandler::Message>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_FACT_TEST_STATUS *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlRequest *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(BlueFin::GlEngine *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(unsigned char *,short)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlNvStorageReader *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(int,int,BlueFin::GL_TIME *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_REFCLK_REQUEST)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::default_delete<FireMessageHandler::Tick>::operator()[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = (void *)a1[5];
    unint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3 - 4);
      while (v3 != v2);
      unint64_t v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1);

  JUMPOUT(0x263E6DD80);
}

uint64_t std::__hash_table<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::__unordered_map_hasher<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::hash<FireMessageHandler::Request>,std::equal_to<FireMessageHandler::Request>,true>,std::__unordered_map_equal<FireMessageHandler::Request,std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>,std::equal_to<FireMessageHandler::Request>,std::hash<FireMessageHandler::Request>,true>,std::allocator<std::__hash_value_type<FireMessageHandler::Request,BlueFin::GlRequest *>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BlueFin::GL_STOP_CODE)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::__unordered_map_hasher<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::hash<gnss::SvPositionSource>,std::equal_to<gnss::SvPositionSource>,true>,std::__unordered_map_equal<gnss::SvPositionSource,std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,std::equal_to<gnss::SvPositionSource>,std::hash<gnss::SvPositionSource>,true>,std::allocator<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0>,short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0>,short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8F58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0>,short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8F58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0>,short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_0>,short ()(BlueFin::GlEngine *,BlueFin::GlSettings *)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1>,void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1>,void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB8FE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1>,void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB8FE8;
  a2[1] = v2;
  return result;
}

double std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1>,void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *a3;
  uint64_t v9 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "EngineOnStopImpl,code,%d,message,%s", (uint64_t)a3, a4, a5, a6, a7, a8, *a3);
  FireDeviceLog::DeviceLogBase(5, "EngineState,update,state,%d,new,%d", v10, v11, v12, v13, v14, v15, *(_DWORD *)(v9 + 1356));
  *(_DWORD *)(v9 + 1356) = 0;
  if (*(void *)(v9 + 1120))
  {
    FireDeviceLog::DeviceLogBase(2, "EngineOnStopImpl,pendingStart,notEmpty,%zu", v16, v17, v18, v19, v20, v21, *(void *)(v9 + 1120));
    *(_OWORD *)__p = *(_OWORD *)(v9 + 1080);
    *(_OWORD *)(v9 + 1080) = 0u;
    long long v75 = *(_OWORD *)(v9 + 1096);
    *(_OWORD *)(v9 + 1096) = 0u;
    long long v76 = *(_OWORD *)(v9 + 1112);
    *(_OWORD *)(v9 + 1112) = 0u;
    std::deque<FireMessageHandler::Message>::~deque[abi:ne180100]((uint64_t)__p);
  }
  if (v8 <= 6)
  {
    if (((1 << v8) & 0x36) != 0)
    {
      DeviceFaultNotify("FireMessageHandler.cpp", 1398, "EngineOnStopImpl", (char)"unexpectedStopCode");
      CrashData();
    }
    else if (((1 << v8) & 0x48) != 0)
    {
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void **__return_ptr))(**(void **)(FireResourceMgr::fInstance + 24) + 64))(__p);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = (unsigned __int8 *)__p[0];
      int64_t v32 = (char *)__p[1] - (char *)__p[0];
      do
      {
        if (!v32) {
          break;
        }
        unsigned int v33 = *v31++;
        v30 += (unint64_t)v33 << v29;
        v29 += 8;
        --v32;
      }
      while (v29 != 64);
      FireDeviceLog::DeviceLogBase(2, "abnormalStop,fetched,size,%zu,code,0x%llx", v23, v24, v25, v26, v27, v28, LOBYTE(__p[1]) - LOBYTE(__p[0]));
      int64_t v34 = (char *)__p[1] - (char *)__p[0];
      if ((void *)((char *)__p[1] - (char *)__p[0]) <= (void *)3)
      {
        unint64_t v55 = (unint64_t)__p[0];
        uint64_t v73 = (char *)__p[1];
        if (__p[1] >= (void *)v75)
        {
          unint64_t v63 = v75 - (unint64_t)__p[0];
          if (2 * ((unint64_t)v75 - (unint64_t)__p[0]) <= v34 + 1) {
            uint64_t v64 = v34 + 1;
          }
          else {
            uint64_t v64 = 2 * v63;
          }
          if (v63 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v65 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v65 = v64;
          }
          uint64_t v66 = (char *)operator new(v65);
          uint64_t v67 = &v66[v34];
          uint64_t v68 = &v66[v34];
          *uint64_t v68 = v8;
          uint64_t v56 = v68 + 1;
          if (v73 != (char *)v55)
          {
            uint64_t v69 = v73;
            uint64_t v70 = &v73[~v55];
            do
            {
              char v71 = *--v69;
              (v70--)[(void)v66] = v71;
            }
            while (v69 != (char *)v55);
            uint64_t v73 = (char *)v55;
            uint64_t v67 = v66;
          }
          __p[0] = v67;
          __p[1] = v56;
          *(void *)&long long v75 = &v66[v65];
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *(unsigned char *)__p[1] = v8;
          uint64_t v56 = v73 + 1;
        }
        __p[1] = v56;
        if (!FireResourceMgr::fInstance) {
          operator new();
        }
        (*(void (**)(void, uint64_t, void **))(**(void **)(FireResourceMgr::fInstance + 24) + 32))(*(void *)(FireResourceMgr::fInstance + 24), 5, __p);
        FireDeviceLog::DeviceLogBase(1, "abnormalStopFault,errcode,%d,0x%llx", v57, v58, v59, v60, v61, v62, v8);
        DeviceFaultNotify("FireMessageHandler.cpp", 1417, "handleAbnormalStop", (char)"abnormalStopFault,errcode,%d,0x%llx");
        _Exit(v8);
      }
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 5);
      DeviceFaultNotify("FireMessageHandler.cpp", 1421, "handleAbnormalStop", (char)"abnormalStopCrash");
      CrashData();
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void, uint64_t))(**(void **)(FireResourceMgr::fInstance + 24) + 80))(*(void *)(FireResourceMgr::fInstance + 24), 5);
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void))(**(void **)FireResourceMgr::fInstance + 24))();
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 24) + 56))(*(void *)(FireResourceMgr::fInstance + 24));
      *(unsigned char *)(v9 + 2200) = 0;
      if (*(void *)(v9 + 1000))
      {
        FireDeviceLog::DeviceLogBase(6, "handleNormalEngineStop,call,fOnEngineStopNotification", v35, v36, v37, v38, v39, v40, v72);
        std::function<void ()(gnss::Result)>::operator()(v9 + 976, 1);
      }
      else
      {
        FireDeviceLog::DeviceLogBase(2, "handleNormalEngineStop,fOnEngineStopNotification,nullptr", v35, v36, v37, v38, v39, v40, v72);
      }
      char v47 = atomic_load((unsigned int *)(v9 + 1008));
      FireDeviceLog::DeviceLogBase(6, "ExclusiveEntryCheck,resetCount,activeEntry,%d", v41, v42, v43, v44, v45, v46, v47);
      for (uint64_t i = 0; i != 3; ++i)
        FireDeviceLog::DeviceLogBase(6, "ExclusiveEntryCheck,entry,%zu,count,%zu", v48, v49, v50, v51, v52, v53, i);
      double result = 0.0;
      *(_OWORD *)(v9 + 1032) = 0u;
      *(_OWORD *)(v9 + 1016) = 0u;
    }
  }
  return result;
}

void sub_263A37EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1>,void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_1>,void ()(BlueFin::GlEngine *,BlueFin::GL_STOP_CODE,char const*)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2>,void ()(unsigned char *,short)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2>,void ()(unsigned char *,short)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_270EB9078;
  return result;
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2>,void ()(unsigned char *,short)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB9078;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2>,void ()(unsigned char *,short)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_2>,void ()(unsigned char *,short)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3>,unsigned int ()(BlueFin::GlEngine *)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3>,unsigned int ()(BlueFin::GlEngine *)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_270EB9108;
  return result;
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3>,unsigned int ()(BlueFin::GlEngine *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB9108;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3>,unsigned int ()(BlueFin::GlEngine *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_3>,unsigned int ()(BlueFin::GlEngine *)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4>,void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4>,void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9198;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4>,void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9198;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4>,void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_4>,void ()(BlueFin::GlEngine *,unsigned int,short,BOOL)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5>,void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5>,void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9228;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5>,void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9228;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5>,void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_5>,void ()(BlueFin::GlEngine *,BlueFin::GlLTOFileReader *,BOOL)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB92B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB92B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_6>,void ()(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7>,void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7>,void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7>,void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9348;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7>,void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_7>,void ()(BlueFin::GlRequest *,BlueFin::GL_REQ_START_CODE)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8>,void ()(BlueFin::GlRequest *)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8>,void ()(BlueFin::GlRequest *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB93D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8>,void ()(BlueFin::GlRequest *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB93D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8>,void ()(BlueFin::GlRequest *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_8>,void ()(BlueFin::GlRequest *)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9>,void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9>,void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9468;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9>,void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9468;
  a2[1] = v2;
  return result;
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9>,void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::operator()(uint64_t a1, _DWORD *a2, char **a3, __int16 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = *a3;
  uint64_t v11 = *(unint64_t **)(a1 + 8);
  switch(*a2)
  {
    case 0:
      v11[142] = v11[141];
      break;
    case 1:
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const*,char const*,std::back_insert_iterator<std::vector<unsigned char>>>(v10, &v10[*a4], v11 + 141);
      FireDeviceLog::DeviceLogBase(6, "GlEngCbOnNvStgWriteImpl,Nv,%d,size,%d,totol,%zu", v12, v13, v14, v15, v16, v17, 1);
      break;
    case 2:
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      uint64_t v18 = *(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 24) + 32);
      v18();
      break;
    case 3:
      v11[145] = v11[144];
      break;
    case 4:
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const*,char const*,std::back_insert_iterator<std::vector<unsigned char>>>(v10, &v10[*a4], v11 + 144);
      FireDeviceLog::DeviceLogBase(6, "GlEngCbOnNvStgWriteImpl,PrivateNv,%d,size,%d,totol,%zu", v19, v20, v21, v22, v23, v24, 4);
      break;
    case 5:
      FireDeviceLog::DeviceLogBase(6, "GlEngCbOnNvStgWriteImpl,PrivateNv,done", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      break;
    default:
      return;
  }
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9>,void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_9>,void ()(BlueFin::GL_NV_STG_CTRL,char const*,short)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10>,void ()(BlueFin::GlNvStorageReader *)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10>,void ()(BlueFin::GlNvStorageReader *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB94F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10>,void ()(BlueFin::GlNvStorageReader *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB94F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10>,void ()(BlueFin::GlNvStorageReader *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_10>,void ()(BlueFin::GlNvStorageReader *)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11>,void ()(int,int,BlueFin::GL_TIME *)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11>,void ()(int,int,BlueFin::GL_TIME *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9588;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11>,void ()(int,int,BlueFin::GL_TIME *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9588;
  a2[1] = v2;
  return result;
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11>,void ()(int,int,BlueFin::GL_TIME *)>::operator()(uint64_t a1, int *a2, int *a3, __int16 **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *a4;
  if (*a4)
  {
    int v10 = *a3;
    if (*a3 < 500)
    {
      int v11 = *a2;
      uint64_t v12 = *(void *)(a1 + 8);
      FireDeviceLog::DeviceLogBase(6, "#fmh GlEngineOnOscReadyForStorage slOscOffsetPpb,%d,usOscOffsetUncPpb,%u,ulPrecUsec,%u,ulWeekMs,%u,usGpsWeek,%u,usMicrosec,%u,usNanosec,%u,", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, *a2);
      v25[0] = v11;
      v25[1] = v10;
      int v13 = *((_DWORD *)v9 + 3);
      v25[2] = *((_DWORD *)v9 + 1);
      v25[3] = v13;
      __int16 v26 = *v9;
      int v27 = *((_DWORD *)v9 + 2);
      if (!FireResourceMgr::fInstance) {
        operator new();
      }
      uint64_t v14 = *(void *)(FireResourceMgr::fInstance + 24);
      if (*(unsigned char *)(v12 + 1064)) {
        uint64_t v15 = 4;
      }
      else {
        uint64_t v15 = 1;
      }
      __p = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v25, (uint64_t)&v28, 0x16uLL);
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v14 + 32))(v14, v15, &__p);
      if (__p)
      {
        uint64_t v23 = __p;
        operator delete(__p);
      }
      FireDeviceLog::DeviceLogBase(5, "#fmh,storePermanent,tcxoNvItem,simulator,%d,%s", v16, v17, v18, v19, v20, v21, *(unsigned char *)(v12 + 1064));
    }
    else
    {
      FireDeviceLog::DeviceLogBase(3, "#fmh,GlEngineOnOscReadyForStorageImpl,invalid,unc,%d,th,%d", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, *a3);
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(2, "#fmh,GlEngineOnOscReadyForStorageImpl,pAsstOscTime,nullptr", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  }
}

void sub_263A38A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11>,void ()(int,int,BlueFin::GL_TIME *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_11>,void ()(int,int,BlueFin::GL_TIME *)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12>,void ()(void)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9618;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9618;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12,std::allocator<FireMessageHandler::FireMessageHandler(BlueFin::GlEngine *)::$_12>,void ()(void)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::createGlEngine(void)::$_0,std::allocator<FireMessageHandler::createGlEngine(void)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::createGlEngine(void)::$_0,std::allocator<FireMessageHandler::createGlEngine(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9698;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::createGlEngine(void)::$_0,std::allocator<FireMessageHandler::createGlEngine(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9698;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::createGlEngine(void)::$_0,std::allocator<FireMessageHandler::createGlEngine(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::createGlEngine(void)::$_0,std::allocator<FireMessageHandler::createGlEngine(void)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<FireMessageHandler::createGlEngine(void)::$_1,std::allocator<FireMessageHandler::createGlEngine(void)::$_1>,void ()(unsigned char *,unsigned long)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::createGlEngine(void)::$_1,std::allocator<FireMessageHandler::createGlEngine(void)::$_1>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_270EB9718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::createGlEngine(void)::$_1,std::allocator<FireMessageHandler::createGlEngine(void)::$_1>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9718;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::createGlEngine(void)::$_1,std::allocator<FireMessageHandler::createGlEngine(void)::$_1>,void ()(unsigned char *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<FireMessageHandler::createGlEngine(void)::$_1,std::allocator<FireMessageHandler::createGlEngine(void)::$_1>,void ()(unsigned char *,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<void ()(unsigned char *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::deque<FireMessageHandler::Message>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<FireMessageHandler::Message>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<FireMessageHandler::Message>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0x1000uLL);
    __int16 v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      float v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        float v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        uint64_t v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)uint64_t v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      uint64_t v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      uint64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        uint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)uint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v28);
  uint64_t v31 = v30;
  int64_t v32 = operator new(0x1000uLL);
  unsigned int v33 = &v29[8 * v23];
  int64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v61);
      unsigned int v33 = &v62[8 * (v61 >> 2)];
      int64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)unsigned int v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        char v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v70);
        uint64_t v73 = v71;
        unsigned int v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          uint64_t v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)uint64_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        int64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        unsigned int v33 = &v29[8 * (v67 >> 1)];
        uint64_t v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          uint64_t v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_263A392AC(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void std::deque<FireMessageHandler::GLRefPositionExtended>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x55;
  unint64_t v4 = v2 - 85;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0xFF0uLL);
    __int16 v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      float v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        float v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        uint64_t v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)uint64_t v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      uint64_t v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      uint64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        uint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)uint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v28);
  uint64_t v31 = v30;
  int64_t v32 = operator new(0xFF0uLL);
  unsigned int v33 = &v29[8 * v23];
  int64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v61);
      unsigned int v33 = &v62[8 * (v61 >> 2)];
      int64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)unsigned int v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        char v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v70);
        uint64_t v73 = v71;
        unsigned int v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          uint64_t v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)uint64_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        int64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        unsigned int v33 = &v29[8 * (v67 >> 1)];
        uint64_t v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          uint64_t v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_263A39744(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

__n128 std::deque<BlueFin::GlSensRawData>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 204 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<BlueFin::GlSensRawData>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xCC)) + 20 * (v7 % 0xCC));
  __n128 result = *a2;
  v8[1].n128_u32[0] = a2[1].n128_u32[0];
  *uint64_t v8 = result;
  ++a1[5];
  return result;
}

void std::deque<BlueFin::GlSensRawData>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xCC;
  unint64_t v4 = v2 - 204;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v38);
      uint64_t v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      uint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        uint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)uint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  uint64_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0xFF0uLL);
    __int16 v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      float v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        float v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        uint64_t v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)uint64_t v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      uint64_t v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v82);
      uint64_t v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      uint64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        uint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)uint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v28);
  uint64_t v31 = v30;
  int64_t v32 = operator new(0xFF0uLL);
  unsigned int v33 = &v29[8 * v23];
  int64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v61);
      unsigned int v33 = &v62[8 * (v61 >> 2)];
      int64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      uint64_t v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)unsigned int v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        char v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<FireMessageHandler::Message *>>(v70);
        uint64_t v73 = v71;
        unsigned int v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          uint64_t v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)uint64_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        int64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        uint64_t v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        unsigned int v33 = &v29[8 * (v67 >> 1)];
        uint64_t v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          uint64_t v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_263A39C5C(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<gnss::SvPositionSource,std::vector<unsigned char>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    BOOL v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__function::__func<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0,std::allocator<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0,std::allocator<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_270EB97A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0,std::allocator<FireMessageHandler::EngineSerialNumberImpl(BlueFin::GlEngine *,unsigned int,unsigned int *,unsigned char)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(void)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<char const*,char const*,std::back_insert_iterator<std::vector<unsigned char>>>(char *a1, char *a2, unint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (unsigned char *)a3[1];
    do
    {
      char v7 = *v5;
      unint64_t v8 = a3[2];
      if ((unint64_t)v6 >= v8)
      {
        unint64_t v10 = *a3;
        uint64_t v11 = &v6[-*a3];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = v8 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          uint64_t v15 = (char *)operator new(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v11[(void)v15];
        uint64_t v17 = &v11[(void)v15];
        unsigned char *v17 = v7;
        uint64_t v9 = v17 + 1;
        if (v6 != (unsigned char *)v10)
        {
          int64_t v18 = &v6[~v10];
          do
          {
            char v19 = *--v6;
            (v18--)[(void)v15] = v19;
          }
          while (v6 != (unsigned char *)v10);
          uint64_t v6 = (unsigned char *)*a3;
          uint64_t v16 = v15;
        }
        *a3 = (unint64_t)v16;
        a3[1] = (unint64_t)v9;
        a3[2] = (unint64_t)&v15[v14];
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *uint64_t v6 = v7;
        uint64_t v9 = v6 + 1;
      }
      a3[1] = (unint64_t)v9;
      ++v5;
      uint64_t v6 = v9;
    }
    while (v5 != a2);
  }
}

uint64_t FireConfig::LearnedL5GroupDelay::passesCrossCheckToCalibration(FireConfig::LearnedL5GroupDelay *this, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (vabdd_f64(a2, a4) < 20.0 && a3 > 0.0 && a3 < 0.25) {
    return 1;
  }
  FireDeviceLog::DeviceLogBase(4, "#nv_group_delay,concerning NV value,%.2f,unc,%.2f,diffToStatic,%.2f", a6, a7, a8, a9, a10, a11, SLOBYTE(a2));
  return 0;
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_263A3A12C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *gnssTest::Device::Device(void *result)
{
  *uint64_t result = &unk_270EB9828;
  return result;
}

void gnssTest::FireDevice::~FireDevice(gnssTest::FireDevice *this)
{
  *(void *)this = &unk_270EB98A8;
  uint64_t v2 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v2) {
    std::default_delete<gnssTest::FireDevice::CommPing>::operator()[abi:ne180100](v2);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)this + 20);
  std::__function::__value_func<void ()(std::vector<std::string>)>::~__value_func[abi:ne180100]((void *)this + 14);
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult)>::~__value_func[abi:ne180100]((void *)this + 10);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>)>::~__value_func[abi:ne180100]((void *)this + 6);
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100]((void *)this + 2);
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

{
  uint64_t vars8;

  gnssTest::FireDevice::~FireDevice(this);

  JUMPOUT(0x263E6DD80);
}

void gnssTest::FireDevice::initMessageHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  std::function<void ()(gnss::Result)>::operator=((void *)(a1 + 160), a2);
  if (!*(void *)(a1 + 8)) {
    operator new();
  }

  FireDeviceLog::DeviceLogBase(6, "Message handler already initialized, skip!", v10, v11, v12, v13, v14, v15, a9);
}

void sub_263A3AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::FireDevice::response(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  FireDeviceLog::DeviceLogBase(5, "#fftd,response,%d", a3, a4, a5, a6, a7, a8, a2);
  if (*(void *)(a1 + 184))
  {
    uint64_t v17 = (void *)(a1 + 160);
    std::function<void ()(gnss::Result)>::operator()((uint64_t)v17, a2);
    std::__function::__value_func<void ()(gnss::Result)>::operator=[abi:ne180100](v17);
  }
  else
  {
    FireDeviceLog::DeviceLogBase(5, "#fftd,response,nullptr", v11, v12, v13, v14, v15, v16, a9);
  }
}

void *gnssTest::FireDevice::periodic(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v37[3] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "#fftd,periodic,durationSec,%d", (uint64_t)a3, a4, a5, a6, a7, a8, a2);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v34, a4);
  gnssTest::FireDevice::initMessageHandler(a1, (uint64_t)v34, v12, v13, v14, v15, v16, v17, v32);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v34);
  int64_t v18 = (void *)a3[3];
  if (v18)
  {
    if (v18 == a3)
    {
      uint64_t v36 = v35;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v35);
    }
    else
    {
      uint64_t v36 = (void *)(*(uint64_t (**)(void *))(*v18 + 16))(v18);
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  uint64_t v19 = a1 + 48;
  if (v35 != (void *)(a1 + 48))
  {
    uint64_t v20 = v36;
    uint64_t v21 = *(void *)(a1 + 72);
    if (v36 == v35)
    {
      if (v21 == v19)
      {
        (*(void (**)(void *, void *))(v35[0] + 24))(v35, v37);
        (*(void (**)(void *))(*v36 + 32))(v36);
        uint64_t v36 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), v35);
        (*(void (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
        *(void *)(a1 + 72) = 0;
        uint64_t v36 = v35;
        (*(void (**)(void *, uint64_t))(v37[0] + 24))(v37, a1 + 48);
        (*(void (**)(void *))(v37[0] + 32))(v37);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v35[0] + 24))(v35, a1 + 48);
        (*(void (**)(void *))(*v36 + 32))(v36);
        uint64_t v36 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 72) = v19;
    }
    else if (v21 == v19)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v19 + 24))(a1 + 48, v35);
      (*(void (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
      *(void *)(a1 + 72) = v36;
      uint64_t v36 = v35;
    }
    else
    {
      uint64_t v36 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v20;
    }
  }
  uint64_t v22 = (DeviceCommon *)std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>)>::~__value_func[abi:ne180100](v35);
  DeviceCommon::GetMachContinuousTime(v22);
  *(void *)(a1 + 192) = v29;
  *(double *)(a1 + 200) = (double)a2;
  if ((a2 + 1) >= 2 && a2 <= 0)
  {
    FireDeviceLog::DeviceLogBase(2, "#fftd,invalidArgument,duraSec,%d", v23, v24, v25, v26, v27, v28, a2);
    return (void *)std::function<void ()(gnss::Result)>::operator()(a4, 4);
  }
  else
  {
    FireMessageHandler::send(*(void *)(a1 + 8), 0x40000000, v23, v24, v25, v26, v27, v28);
    uint64_t v30 = *(void *)(*(void *)(a1 + 8) + 936);
    v33[0] = &unk_270EB9D70;
    v33[1] = a1;
    v33[3] = v33;
    FireMessageHandler::Tick::appendCallback(v30, (uint64_t)v33, 5000);
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v33);
  }
}

void sub_263A3B068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::FireDevice::cw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  int v10 = a5;
  __int16 v11 = a4;
  int v12 = a3;
  unsigned char v41[4] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "#fftd,cw,band,%d,subband,%d,durationSec,%d,rangeHz,%.3f,integrationTimeMs,%d", a3, a4, a5, (uint64_t)a6, a7, a8, a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v41, a7);
  gnssTest::FireDevice::initMessageHandler(a1, (uint64_t)v41, v15, v16, v17, v18, v19, v20, v27);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v41);
  std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=((void *)(a1 + 16), a6);
  long long v29 = xmmword_263BA7BC0;
  char v30 = 0;
  __int16 v31 = 255;
  char v32 = 0;
  int v34 = 65556;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  int v38 = 196618;
  __int16 v39 = 257;
  uint64_t v33 = 0x100000000;
  BOOL v40 = (v10 - 1) < 0xC8;
  switch(v12)
  {
    case 0:
      FireDeviceLog::DeviceLogBase(5, "#fftd,cw,band,Unknown,tests all bands", v21, v22, v23, v24, v25, v26, v28);
      *(void *)&long long v29 = 0x60000FFF90001;
      goto LABEL_6;
    case 1:
      goto LABEL_4;
    case 2:
      FireDeviceLog::DeviceLogBase(2, "#fftd,cw,Unsupported,cwBand,%d", v21, v22, v23, v24, v25, v26, v12);
      std::function<void ()(gnss::Result)>::operator()(a7, 4);
      return;
    case 3:
    case 7:
    case 9:
    case 10:
      FireDeviceLog::DeviceLogBase(5, "#fftd,cw,Use NAVIC CW test for all L5 similar bands", v21, v22, v23, v24, v25, v26, v28);
LABEL_6:
      WORD6(v29) = 1;
      break;
    case 4:
      WORD1(v29) = v11;
      break;
    case 5:
      WORD4(v29) = 1;
      break;
    case 6:
    case 8:
      FireDeviceLog::DeviceLogBase(5, "#fftd,cw,Use GPS CW test for Galileo E1 band", v21, v22, v23, v24, v25, v26, v28);
LABEL_4:
      LOWORD(v29) = 1;
      break;
    default:
      break;
  }
  gnssTest::FireDevice::runFactoryTest(a1, (uint64_t)&v29, a2, v22, v23, v24, v25, v26, v28);
}

void sub_263A3B2A0(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void *std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=(void *a1, void *a2)
{
  v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      size_t v8 = v7;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v7);
    }
    else
    {
      size_t v8 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    size_t v8 = 0;
  }
  if (v7 != a1)
  {
    uint64_t v4 = v8;
    uint64_t v5 = (void *)a1[3];
    if (v8 == v7)
    {
      if (v5 == a1)
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, v9);
        (*(void (**)(void *))(*v8 + 32))(v8);
        size_t v8 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v7);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        size_t v8 = v7;
        (*(void (**)(void *, void *))(v9[0] + 24))(v9, a1);
        (*(void (**)(void *))(v9[0] + 32))(v9);
      }
      else
      {
        (*(void (**)(void *, void *))(v7[0] + 24))(v7, a1);
        (*(void (**)(void *))(*v8 + 32))(v8);
        size_t v8 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v5 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v8;
      size_t v8 = v7;
    }
    else
    {
      size_t v8 = (void *)a1[3];
      a1[3] = v4;
    }
  }
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_263A3B5E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void gnssTest::FireDevice::runFactoryTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!a3)
  {
    __int16 v10 = 10;
    goto LABEL_7;
  }
  if (a3 == -1)
  {
    a3 = 1;
    __int16 v10 = -1;
LABEL_7:
    *(_WORD *)(a2 + 32) = v10;
    *(_DWORD *)(a2 + 28) = a3;
    uint64_t v11 = *(void *)(a1 + 8) + 1176;
    uint64_t v12 = *(void *)(a2 + 63);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v11 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v11 + 48) = v14;
    *(_OWORD *)(v11 + 16) = v13;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
    *(void *)(v11 + 63) = v12;
    uint64_t v15 = *(void *)(a1 + 8);
    FireMessageHandler::send(v15, 1073741844, a3, a4, a5, a6, a7, a8);
    return;
  }
  if ((int)a3 >= 1)
  {
    __int16 v10 = a3 + 1;
    a3 = 1;
    goto LABEL_7;
  }
  FireDeviceLog::DeviceLogBase(2, "#fftd,invalidArgument,duraSec,%d", a3, a4, a5, a6, a7, a8, a3);

  gnssTest::FireDevice::response(a1, 4, v16, v17, v18, v19, v20, v21, a9);
}

void gnssTest::FireDevice::modulated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  __int16 v10 = a4;
  int v11 = a3;
  unsigned char v41[4] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "#fftd,mod,band,%d,subband,%d,durationSec,%d,integrationTimeMs,%d", a3, a4, a5, (uint64_t)a6, a7, a8, a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v41, a7);
  gnssTest::FireDevice::initMessageHandler(a1, (uint64_t)v41, v14, v15, v16, v17, v18, v19, v27);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v41);
  std::function<void ()(std::vector<gnssTest::RfMeasurement>)>::operator=((void *)(a1 + 16), a6);
  long long v29 = xmmword_263BA7BC0;
  char v30 = 0;
  __int16 v31 = 255;
  char v32 = 0;
  int v34 = 65556;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v35 = 0;
  int v38 = 196618;
  __int16 v39 = 257;
  char v40 = 0;
  uint64_t v33 = 0x100000001;
  switch(v11)
  {
    case 0:
    case 2:
    case 10:
      FireDeviceLog::DeviceLogBase(2, "#fftd,mod,Unsupported,band,%d", v20, v21, v22, v23, v24, v25, v11);
      std::function<void ()(gnss::Result)>::operator()(a7, 4);
      return;
    case 1:
      LOWORD(v29) = v10;
      break;
    case 3:
      HIWORD(v29) = v10;
      char v26 = 1;
      goto LABEL_10;
    case 4:
      WORD1(v29) = v10;
      break;
    case 5:
    case 6:
      WORD4(v29) = v10;
      break;
    case 7:
      HIWORD(v29) = v10;
      char v26 = 5;
      goto LABEL_10;
    case 8:
      WORD5(v29) = v10;
      break;
    case 9:
      HIWORD(v29) = v10;
      char v26 = 6;
LABEL_10:
      char v30 = v26;
      break;
    default:
      break;
  }
  gnssTest::FireDevice::runFactoryTest(a1, (uint64_t)&v29, a2, v21, v22, v23, v24, v25, v28);
}

void sub_263A3B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gnssTest::FireDevice::recordIQ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  int v10 = a3;
  v36[4] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "#fftd,recordIQ,band,%d,subband,%d,durationSec,%d", a3, a4, a5, a6, a7, a8, a3);
  FireDeviceLog::DeviceLogBase(3, "#fftd,recoreIQ,usingXmlJob,arguments are ignored", v12, v13, v14, v15, v16, v17, v34);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v36, a5);
  gnssTest::FireDevice::initMessageHandler(a1, (uint64_t)v36, v18, v19, v20, v21, v22, v23, v35);
  int v24 = 67458;
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v36);
  if (v10 == 1)
  {
    int32x2_t v31 = (int32x2_t)0x3D090FFFC2F70;
    goto LABEL_5;
  }
  if (v10 == 4)
  {
    int32x2_t v31 = vadd_s32(vdup_n_s32(562500 * v9), (int32x2_t)0x3D090FFFC2F70);
    int v24 = 67488;
LABEL_5:
    uint64_t v32 = *(void *)(a1 + 8);
    *(int32x2_t *)(v32 + 1248) = v31;
    *(void *)(v32 + 1256) = 0x64000003E8;
    *(_DWORD *)(v32 + 126bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 100;
    *(_DWORD *)(v32 + 1268) = v24;
    *(_DWORD *)(v32 + 1272) = 0;
    return FireMessageHandler::send(v32, 1073741846, v25, v26, v27, v28, v29, v30);
  }
  FireDeviceLog::DeviceLogBase(2, "fftd,recordIQ,bandNotSupported,%d", v25, v26, v27, v28, v29, v30, v10);
  return std::function<void ()(gnss::Result)>::operator()(a5, 4);
}

void sub_263A3BA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t gnssTest::FireDevice::commLoopback(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(5, "#fftd,CommLoopbackConf,packMin,%u,packMax,%u,step,%u,loops,%u", (uint64_t)a3, a4, a5, a6, a7, a8, *a3);
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v37, a5);
  gnssTest::FireDevice::initMessageHandler(a1, (uint64_t)v37, v13, v14, v15, v16, v17, v18, v36);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v37);
  unsigned int v20 = *a3;
  unsigned int v19 = a3[1];
  unsigned int v21 = a3[3];
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::__value_func[abi:ne180100]((uint64_t)v38, a4);
  uint64_t v41 = 0;
  uint64_t v22 = v39;
  if (v39)
  {
    uint64_t v23 = operator new(0x28uLL);
    int v24 = v23;
    *uint64_t v23 = &unk_270EB9DF0;
    if (v22 == v38)
    {
      v23[4] = v23 + 1;
      (*(void (**)(void *))(v38[0] + 24))(v38);
    }
    else
    {
      v23[4] = v22;
      __int16 v39 = 0;
    }
    uint64_t v41 = v24;
  }
  else
  {
    int v24 = 0;
  }
  uint64_t v25 = a1 + 80;
  if (v40 != (void *)(a1 + 80))
  {
    if (*(void *)(a1 + 104) == v25)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v25 + 24))(v25, v40);
      (*(void (**)(void))(**(void **)(a1 + 104) + 32))(*(void *)(a1 + 104));
      *(void *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v41;
      uint64_t v41 = v40;
    }
    else
    {
      uint64_t v41 = *(void **)(a1 + 104);
      *(void *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v24;
    }
  }
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult)>::~__value_func[abi:ne180100](v40);
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::~__value_func[abi:ne180100](v38);
  uint64_t v26 = *(void *)(a1 + 8);
  *(_WORD *)(v26 + 1276) = a2;
  *(_DWORD *)(v26 + 1280) = v19 >> 10;
  *(_DWORD *)(v26 + 128bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20 >> 10;
  *(_DWORD *)(v26 + 1288) = v21;
  FireMessageHandler::send(v26, 1073741848, v27, v28, v29, v30, v31, v32);
  uint64_t v33 = (DeviceCommon *)std::function<void ()(gnss::Result)>::operator=((void *)(a1 + 160), a5);
  uint64_t result = DeviceCommon::GetMachContinuousTime(v33);
  *(void *)(a1 + 192) = v35;
  *(double *)(a1 + 200) = (double)a2;
  *(_DWORD *)(a1 + 212) = v19 >> 10;
  return result;
}

void sub_263A3BC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gnssTest::FireDevice::powerMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

uint64_t gnssTest::FireDevice::apSignalGpio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::function<void ()(gnss::Result)>::operator()(a3, 7);
}

void *gnssTest::FireDevice::timeMarkGpio(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v13[4] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "#fftd,tm,timeout,%d", a3, a4, a5, a6, a7, a8, a2);
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 220) = 1;
  v13[0] = &unk_270EB9EE0;
  v13[3] = v13;
  std::__function::__value_func<void ()(gnss::Result)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  (*(void (**)(uint64_t, void, void *, void *))(*(void *)a1 + 24))(a1, ((a2 + 500) / 1000), v13, v12);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v12);
  return std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>)>::~__value_func[abi:ne180100](v13);
}

void sub_263A3BDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void gnssTest::FireDevice::commPing()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_263A3C3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::FireDevice::CommPing::response(uint64_t a1, int a2)
{
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void))(**(void **)(FireResourceMgr::fInstance + 8) + 32))(*(void *)(FireResourceMgr::fInstance + 8));
  if (!FireResourceMgr::fInstance) {
    operator new();
  }
  (*(void (**)(void))(**(void **)FireResourceMgr::fInstance + 24))();
  int v10 = (const std::string::value_type **)(a1 + 272);
  LOBYTE(v11) = a1 + 16;
  if (*(char *)(a1 + 295) < 0) {
    int v11 = *v10;
  }
  FireDeviceLog::DeviceLogBase(5, "commping,response,ver,%s,result,%d,stage,%d", v4, v5, v6, v7, v8, v9, (char)v11);
  if (*(char *)(a1 + 295) < 0)
  {
    std::string::size_type v12 = *(void *)(a1 + 280);
    if (v12)
    {
      std::string::__init_copy_ctor_external(&v24, *v10, v12);
      goto LABEL_12;
    }
  }
  else if (*(unsigned char *)(a1 + 295))
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    v24.__r_.__value_.__r.__words[2] = *(void *)(a1 + 288);
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "INVALID");
LABEL_12:
  uint64_t v13 = (const std::string::value_type **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    std::string::size_type v14 = *(void *)(a1 + 304);
    if (v14)
    {
      std::string::__init_copy_ctor_external(&v23, *v13, v14);
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a1 + 319))
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    v23.__r_.__value_.__r.__words[2] = *(void *)(a1 + 312);
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "INVALID");
LABEL_18:
  uint64_t v15 = *(void *)(a1 + 344);
  if (!v15) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)v15 + 48))(v15, &v24, &v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  gnssTest::FireDevice::response(*(void *)(a1 + 352), a2, v16, v17, v18, v19, v20, v21, v22);
  *(_DWORD *)a1 = 5;
}

void sub_263A3C638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::FireDevice::CommPing::write(gnssTest::FireDevice::CommPing *this, gnss::fire *a2, unsigned __int8 *a3)
{
  gnss::fire::charToHex(a2, a3, 44, &__p);
  FireDeviceLog::DeviceLogBase(6, "commping,write,%zu,date,%s", v6, v7, v8, v9, v10, v11, (char)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 33) = 0;
  if (!FireResourceMgr::fInstance) {
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(void, gnss::fire *, unsigned __int8 *))(**(void **)FireResourceMgr::fInstance
                                                                           + 96))(*(void *)FireResourceMgr::fInstance, a2, a3) & 1) == 0)
  {
    FireDeviceLog::DeviceLogBase(2, "commping,write,fail,size,%zu,stage,%d", v12, v13, v14, v15, v16, v17, (char)a3);
    gnssTest::FireDevice::CommPing::response((uint64_t)this, 8);
  }
  if (!FireResourceMgr::fInstance) {
LABEL_8:
  }
    operator new();
  (*(void (**)(void))(**(void **)FireResourceMgr::fInstance + 112))();
  FireDeviceLog::DeviceLogBase(5, "commping,write,pass,size,%zu", v18, v19, v20, v21, v22, v23, (char)a3);
}

void sub_263A3C7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::FireDevice::CommPing::dataProc(gnssTest::FireDevice::CommPing *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  DeviceCommon::GetMachContinuousTime(this);
  uint64_t v16 = *((void *)this + 44);
  if (v17 <= *(double *)(v16 + 192) + *(double *)(v16 + 200))
  {
    int v96 = 28360448;
    uint64_t v95 = 0x3020200B0;
    unint64_t v93 = 0xC000000009FD00FELL;
    char v94 = -4;
    *(void *)((char *)v92 + 5) = 0x1B0B10100000003;
    v92[0] = 0x380020000B0;
    FireDeviceLog::DeviceLogBase(6, "commping,dataProc,stage,%d", v10, v11, v12, v13, v14, v15, *(_DWORD *)this);
    switch(*(_DWORD *)this)
    {
      case 0:
        memset((char *)this + 6, 128, 20);
        gnssTest::FireDevice::CommPing::write(this, (gnssTest::FireDevice::CommPing *)((char *)this + 6), (unsigned __int8 *)0x14);
        int v26 = 1;
        FireDeviceLog::DeviceLogBase(5, "commping,updateStage,old,%d,new,%d", v27, v28, v29, v30, v31, v32, *(_DWORD *)this);
        goto LABEL_8;
      case 1:
        gnssTest::FireDevice::CommPing::write(this, (gnss::fire *)v92, (unsigned __int8 *)0xD);
        FireDeviceLog::DeviceLogBase(5, "commping,updateStage,old,%d,new,%d", v59, v60, v61, v62, v63, v64, *(_DWORD *)this);
        *(_DWORD *)this = 2;
        *((unsigned char *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
        return;
      case 2:
        if (*((void *)this + 33) && *((unsigned __int8 *)this + 6) == 176 && !*((unsigned char *)this + 7))
        {
          *((unsigned char *)this + 5) = 1;
          gnssTest::FireDevice::CommPing::write(this, (gnss::fire *)&v95, (unsigned __int8 *)0xC);
        }
        else
        {
          *((unsigned char *)this + 5) = 0;
          gnssTest::FireDevice::CommPing::write(this, (gnss::fire *)&v93, (unsigned __int8 *)9);
        }
        FireDeviceLog::DeviceLogBase(5, "commping,updateStage,old,%d,new,%d", v33, v34, v35, v36, v37, v38, *(_DWORD *)this);
        *(_DWORD *)this = 3;
        FireDeviceLog::DeviceLogBase(6, "commping,hasMcu,%d", v39, v40, v41, v42, v43, v44, *((unsigned char *)this + 5));
        return;
      case 3:
        unint64_t v45 = *((void *)this + 33);
        if (*((unsigned char *)this + 5))
        {
          FireDeviceLog::DeviceLogBase(5, "VersionRequest,readback,pass,length,%zd", v20, v21, v22, v23, v24, v25, *((void *)this + 33));
          gnss::fire::charToHex((gnssTest::FireDevice::CommPing *)((char *)this + 6), v45, 44, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
          }
          FireDeviceLog::DeviceLogBase(5, "ReceivedBytesHex,%s", v46, v47, v48, v49, v50, v51, (char)p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v45 > 0x15)
          {
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, (char *)this + 24, (uint64_t)this + 28, 4uLL);
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            uint64_t v72 = (gnss::fire *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
            {
              BOOL v74 = (unsigned char *)(__p.__r_.__value_.__l.__size_ - 1);
              if (__p.__r_.__value_.__l.__size_ - 1 > __p.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v75 = __p.__r_.__value_.__r.__words[0] + 1;
                do
                {
                  char v76 = *(unsigned char *)(v75 - 1);
                  *(unsigned char *)(v75 - 1) = *v74;
                  *v74-- = v76;
                }
                while (v75++ < (unint64_t)v74);
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
                uint64_t v72 = (gnss::fire *)__p.__r_.__value_.__r.__words[0];
              }
            }
            gnss::fire::charToHex(v72, (const unsigned __int8 *)(size - (void)v72), 0, &v97);
            uint64_t v78 = (void **)((char *)this + 272);
            if (*((char *)this + 295) < 0) {
              operator delete(*v78);
            }
            *(_OWORD *)uint64_t v78 = *(_OWORD *)&v97.__r_.__value_.__l.__data_;
            *((void *)this + 36) = *((void *)&v97.__r_.__value_.__l + 2);
            gnssTest::FireDevice::CommPing::response((uint64_t)this, 1);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            FireDeviceLog::DeviceLogBase(6, "versionCheckMcu,notComplete,size,%zd<%zu", v53, v54, v55, v56, v57, v58, v45);
          }
        }
        else
        {
          v97.__r_.__value_.__s.__data_[8] = -4;
          v97.__r_.__value_.__r.__words[0] = 0x100C125049FD02FFLL;
          if (v45 >= 0xD)
          {
            int v79 = 0;
            uint64_t v80 = 17;
            do
            {
              int v79 = *((unsigned __int8 *)this + v80) | (v79 << 8);
              unint64_t v81 = v80 - 6;
              --v80;
            }
            while (v81 > 8);
            FireDeviceLog::DeviceLogBase(5, "eswVersionRead,0x%X", v20, v21, v22, v23, v24, v25, v79);
            if (v79 == 805306389) {
              unint64_t v82 = "FIRE7.B0";
            }
            else {
              unint64_t v82 = "FIRE7.Unknown";
            }
            if (v79 == 805306387) {
              uint64_t v83 = "FIRE7.A0";
            }
            else {
              uint64_t v83 = (char *)v82;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v83);
            uint64_t v84 = (void **)((char *)this + 272);
            if (*((char *)this + 295) < 0) {
              operator delete(*v84);
            }
            *(_OWORD *)uint64_t v84 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((void *)this + 36) = *((void *)&__p.__r_.__value_.__l + 2);
            if (v79 == 805306387)
            {
              gnssTest::FireDevice::CommPing::response((uint64_t)this, 1);
            }
            else if (v79 == 805306389)
            {
              gnssTest::FireDevice::CommPing::write(this, (gnss::fire *)&v97, (unsigned __int8 *)9);
              int v26 = 4;
              FireDeviceLog::DeviceLogBase(5, "commping,updateStage,old,%d,new,%d", v85, v86, v87, v88, v89, v90, *(_DWORD *)this);
LABEL_8:
              *(_DWORD *)this = v26;
            }
            else
            {
              gnssTest::FireDevice::CommPing::response((uint64_t)this, 8);
            }
          }
          else
          {
            FireDeviceLog::DeviceLogBase(6, "versionCheckEsw,notComplete,size,%zd<%zu", v20, v21, v22, v23, v24, v25, v45);
          }
        }
        return;
      case 4:
        if (*((void *)this + 33) <= 0x14uLL)
        {
          FireDeviceLog::DeviceLogBase(6, "chipIdCheckEsw,notComplete,size,%zd<%zu", v20, v21, v22, v23, v24, v25, *((void *)this + 33));
          return;
        }
        if (*((unsigned __int8 *)this + 6) != 254 || *((unsigned __int8 *)this + 26) != 252)
        {
          uint64_t v18 = this;
          int v19 = 8;
          goto LABEL_3;
        }
        gnss::fire::charToHex((gnssTest::FireDevice::CommPing *)((char *)this + 14), (const unsigned __int8 *)0xC, 0, &__p);
        char v71 = (void **)((char *)this + 296);
        if (*((char *)this + 319) < 0) {
          operator delete(*v71);
        }
        *(_OWORD *)char v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)this + 39) = *((void *)&__p.__r_.__value_.__l + 2);
        if (*((char *)this + 319) < 0) {
          char v71 = (void **)*v71;
        }
        FireDeviceLog::DeviceLogBase(5, "chipIdCheckEsw,chipId,%s", v65, v66, v67, v68, v69, v70, (char)v71);
        gnssTest::FireDevice::CommPing::response((uint64_t)this, 1);
        break;
      case 5:
        FireDeviceLog::DeviceLogBase(6, "commping,done", v20, v21, v22, v23, v24, v25, a9);
        return;
      default:
        return;
    }
  }
  else
  {
    FireDeviceLog::DeviceLogBase(6, "commping,durationExpired,%.3lf", v10, v11, v12, v13, v14, v15, *(void *)(v16 + 200));
    uint64_t v18 = this;
    int v19 = 6;
LABEL_3:
    gnssTest::FireDevice::CommPing::response((uint64_t)v18, v19);
  }
}

void sub_263A3CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void gnssTest::FireDevice::handlePeriodicStop(gnssTest::FireDevice *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v60[4] = *MEMORY[0x263EF8340];
  FireDeviceLog::DeviceLogBase(6, "handlePeriodicStop,#tt,%d,startCompleted,%d", a3, a4, a5, a6, a7, a8, *((unsigned char *)this + 220));
  DeviceCommon::GetMachContinuousTime(v10);
  double v18 = v17;
  if (!*((unsigned char *)this + 208) && v17 > *((double *)this + 24) + 5.0)
  {
    FireDeviceLog::DeviceLogBase(2, "#fftd,periodic,start,timeout", v11, v12, v13, v14, v15, v16, v57);
    gnssTest::FireDevice::response((uint64_t)this, 6, v19, v20, v21, v22, v23, v24, a9);
    return;
  }
  if (*((unsigned char *)this + 220))
  {
    FireDeviceLog::DeviceLogBase(6, "#fftd,tm,report,handleTimeTransferState,state,%d", v11, v12, v13, v14, v15, v16, *((_DWORD *)this + 54));
    if (!*((unsigned char *)this + 220)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    int v25 = *((_DWORD *)this + 54);
    if (v25 == 4)
    {
      int v42 = 1073741825;
      uint64_t v27 = (uint64_t *)((char *)this + 8);
      uint64_t v43 = "#fftd,tm,report,pass,sendStopPeriodic";
    }
    else
    {
      if (v25) {
        goto LABEL_13;
      }
      uint64_t v27 = (uint64_t *)((char *)this + 8);
      uint64_t v26 = *((void *)this + 1);
      v60[0] = &unk_270EB9F70;
      v60[1] = this;
      v60[3] = v60;
      FireDeviceLog::DeviceLogBase(6, "fcb,setReqOnSyncInStatusCb,%p", v11, v12, v13, v14, v15, v16, (char)v60);
      std::function<void ()(BlueFin::GL_SYNCIN_STATUS)>::operator=((void *)(v26 + 808), (uint64_t)v60);
      std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS)>::~__value_func[abi:ne180100](v60);
      uint64_t v28 = *((void *)this + 1);
      v59[0] = &unk_270EB9FF0;
      v59[1] = this;
      v59[3] = v59;
      FireDeviceLog::DeviceLogBase(6, "fcb,setReqOnSyncInLatchedCb,%p", v29, v30, v31, v32, v33, v34, (char)v59);
      std::function<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::operator=((void *)(v28 + 840), (uint64_t)v59);
      std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,double)>::~__value_func[abi:ne180100](v59);
      uint64_t v35 = *((void *)this + 1);
      v58[0] = &unk_270EBA070;
      v58[1] = this;
      v58[3] = v58;
      FireDeviceLog::DeviceLogBase(6, "fcb,setReqOnSyncinReportCurrentTimeCb,%p", v36, v37, v38, v39, v40, v41, (char)v58);
      std::function<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::operator=((void *)(v35 + 904), (uint64_t)v58);
      std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__value_func[abi:ne180100](v58);
      *((_DWORD *)this + 5bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
      *((unsigned char *)this + 220) = 1;
      int v42 = 1073741837;
      uint64_t v43 = "#fftd,tm,sendOneShortRequest,pass";
    }
    FireMessageHandler::send(*v27, v42, v11, v12, v13, v14, v15, v16);
    FireDeviceLog::DeviceLogBase(6, v43, v44, v45, v46, v47, v48, v49, v57);
  }
LABEL_13:
  if (v18 > *((double *)this + 24) + *((double *)this + 25))
  {
    FireDeviceLog::DeviceLogBase(2, "#fftd,durationExpired,periodic,sendStop", v11, v12, v13, v14, v15, v16, v57);
    uint64_t v56 = *((void *)this + 1);
    FireMessageHandler::send(v56, 1073741825, v50, v51, v52, v53, v54, v55);
  }
}

void sub_263A3D104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void populateBand(uint64_t a1, unsigned char *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 320) == 3)
  {
    *a4 = 0x41D187CCF4000000;
    int v8 = *(_DWORD *)(a1 + 276);
    switch(v8)
    {
      case 0:
        *a2 = 3;
        int v10 = *(__int16 *)(a1 + 12);
        goto LABEL_12;
      case 1:
      case 2:
      case 7:
        FireDeviceLog::DeviceLogBase(2, "#fact,populateBandL5,unexpected,type,%d,svid,%d,constellation,%d", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v8);
        return;
      case 3:
        *a2 = 3;
        int v10 = *(__int16 *)(a1 + 12) + 127;
        goto LABEL_12;
      case 4:
        *a2 = 7;
        int v10 = *(__int16 *)(a1 + 12) - 75;
        goto LABEL_12;
      case 5:
        *a2 = 9;
        int v10 = *(__int16 *)(a1 + 12) - 138;
        goto LABEL_12;
      case 6:
        *a2 = 10;
        int v10 = *(__int16 *)(a1 + 12) - 174;
LABEL_12:
        *a3 = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    int v9 = *(_DWORD *)(a1 + 276);
    switch(v9)
    {
      case 0:
        *a2 = 1;
        int v11 = *(__int16 *)(a1 + 12);
        goto LABEL_20;
      case 1:
      case 7:
        FireDeviceLog::DeviceLogBase(2, "#fact,populateBand,unexpected,type,%d,svid,%d,constellation,%d", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v9);
        return;
      case 2:
        goto LABEL_15;
      case 3:
        *a3 = *(__int16 *)(a1 + 12) + 127;
LABEL_15:
        *a2 = 4;
        int v12 = *(unsigned __int16 *)(a1 + 12);
        unsigned int v13 = v12 - 52;
        int v14 = (char)(v12 - 59);
        if (v13 >= 0xE) {
          int v14 = -8;
        }
        *a3 = v14;
        *(double *)a4 = (double)v14 * 562500.0 + 1602000000.0;
        return;
      case 4:
        *a2 = 5;
        *a3 = *(__int16 *)(a1 + 12) - 75;
        uint64_t v15 = 0x431DC4000000;
        goto LABEL_21;
      case 5:
        *a2 = 8;
        int v11 = *(__int16 *)(a1 + 12) - 138;
LABEL_20:
        *a3 = v11;
        uint64_t v15 = 0x79C018000000;
LABEL_21:
        uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL | 0x41D7000000000000;
        goto LABEL_23;
      case 6:
        *a2 = 10;
        *a3 = *(__int16 *)(a1 + 12) - 174;
        uint64_t v16 = 0x41D187CCF4000000;
LABEL_23:
        *a4 = v16;
        break;
      default:
        return;
    }
  }
}

uint64_t gnssTest::FireDevice::setNmeaHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 24))
  {
    std::function<void ()(std::vector<std::string>)>::operator=<std::function<void ()(std::vector<std::string>&&)> &,void>((void *)(a1 + 112), a3);
    *(void *)(a1 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
    int v7 = 1;
  }
  else
  {
    int v7 = 0;
  }

  return std::function<void ()(gnss::Result)>::operator()(a4, v7);
}

uint64_t gnssTest::FireDevice::setConfigTestContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 152) = a2;
  FireDeviceLog::DeviceLogBase(5, "#fftd,coexConfigFlags,0x%llx", a3, a4, a5, a6, a7, a8, a2);

  return std::function<void ()(gnss::Result)>::operator()(a3, 1);
}

void newGnssDeviceTest()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_263A3D7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  uint64_t v5 = v2[28];
  v2[28] = 0;
  if (v5) {
    std::default_delete<gnssTest::FireDevice::CommPing>::operator()[abi:ne180100](v5);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100](v2 + 20);
  std::__function::__value_func<void ()(std::vector<std::string>)>::~__value_func[abi:ne180100](v2 + 14);
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult)>::~__value_func[abi:ne180100](v2 + 10);
  std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>)>::~__value_func[abi:ne180100](v2 + 6);
  std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](v2 + 2);
  uint64_t v6 = v2[1];
  v2[1] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::__function::__value_func<void ()(gnss::Result)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  MEMORY[0x263E6DD80](v2, 0x10A1C400E43584DLL);
  _Unwind_Resume(a1);
}

uint64_t gnssTest::Device::getObjectVersionNumber(gnssTest::Device *this)
{
  return 2502;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void *std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<gnssTest::RfMeasurement>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::unique_ptr<gnss::Fix>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(gnssTest::CommLoopbackResult)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::default_delete<gnssTest::FireDevice::CommPing>::operator()[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<void ()(std::string const&,std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 320));
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }

  JUMPOUT(0x263E6DD80);
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9950;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fftd,%s,fix,valid,%d,ms,%d,TOW,%.3f,Lat,%.6lf,Lon,%.6lf,AccuracyMeters,%.3lf\n", a3, a4, a5, a6, a7, a8, (char)"handleLocationResponse");
  if (*(void *)(v9 + 72)) {
    operator new();
  }

  FireDeviceLog::DeviceLogBase(2, "#fftd,fOnPeriodicFix,nullptr", v10, v11, v12, v13, v14, v15, a9);
}

void sub_263A3DF60(_Unwind_Exception *a1)
{
  MEMORY[0x263E6DD80](v1, 0x1000C4043D32D5CLL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_0>,void ()(BlueFin::GL_FIX_STATUS const*)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1>,void ()(BlueFin::GlGnssData const*)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1>,void ()(BlueFin::GlGnssData const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB99D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1>,void ()(BlueFin::GlGnssData const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB99D0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1>,void ()(BlueFin::GlGnssData const*)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1>,void ()(BlueFin::GlGnssData const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_1>,void ()(BlueFin::GlGnssData const*)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9A50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9A50;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_2>,void ()(BlueFin::GlGnssSvInfoData const*,BlueFin::GlTimeConversionInfo const*)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3>,void ()(char const*,short)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3>,void ()(char const*,short)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9AD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3>,void ()(char const*,short)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9AD0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3>,void ()(char const*,short)>::operator()(uint64_t a1, void **a2, __int16 *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 136))
  {
    std::string::basic_string[abi:ne180100](__p, *a2, *a3);
    memset(&v7, 0, sizeof(v7));
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v7.__end_cap_;
    end = (std::string *)operator new(0x18uLL);
    __v.__first_ = end;
    __v.__begin_ = end;
    __v.__end_ = end;
    __v.__end_cap_.__value_ = end + 1;
    if (SHIBYTE(v9) < 0)
    {
      std::string::__init_copy_ctor_external(end, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      end = __v.__end_;
    }
    else
    {
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v9;
    }
    __v.__end_ = end + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v7, &__v);
    uint64_t v5 = v7.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v7.__end_ = v5;
    memset(&__v, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__v, (long long *)v7.__begin_, (long long *)v5, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v7.__begin_) >> 3));
    uint64_t v6 = *(void *)(v3 + 136);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::__split_buffer<std::string> *))(*(void *)v6 + 48))(v6, &__v);
    p_v = &__v;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
    p_v = (std::__split_buffer<std::string> *)&v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_263A3E3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, std::__split_buffer<std::string> *a11, void *__pa, uint64_t a13, int a14, __int16 a15, char a16, char a17, void **a18, uint64_t a19)
{
  a18 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (a17 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3>,void ()(char const*,short)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_3>,void ()(char const*,short)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GL_FACT_TEST_STATUS *)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GL_FACT_TEST_STATUS *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9B50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GL_FACT_TEST_STATUS *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9B50;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GL_FACT_TEST_STATUS *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *a2;
  if (!*a2)
  {
    int v25 = "handleFactoryTestResponse,pFact,nullptr";
LABEL_36:
    uint64_t v39 = 2;
    goto LABEL_37;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fftd,result,curItem,%d,item,%d,svid,%d,constellation,%d", a3, a4, a5, a6, a7, a8, *(_DWORD *)v9);
  if (!*(_DWORD *)v9)
  {
    FireDeviceLog::DeviceLogBase(6, "#fftd,cw,constellation,%d,svId,%d,valid,%d,dBm,%.2f,freqPpb,%.2f,doppPpb,%.2f,uncPpb,%.2f,NF,%.2f", a3, a4, a5, a6, a7, a8, *(unsigned char *)(v9 + 320));
    FireDeviceLog::DeviceLogBase(6, "#fftd,cw,AGCIQ,%u,aGPS,%.1f,dGPS,%.1f,aGLN,%.1f,dGLN,%1.f,RES1,%.1f,RES2,%.1f", v26, v27, v28, v29, v30, v31, *(unsigned char *)(v9 + 152));
    if (*(void *)(v10 + 40))
    {
      char v47 = 0;
      int v46 = 0x80000000;
      double v45 = NAN;
      populateBand(v9, &v47, &v46, (uint64_t *)&v45, v14, v15, v16, v17);
      char v32 = v47;
      int v33 = v46;
      if (*(_WORD *)(v9 + 204)) {
        double v34 = *(double *)(v9 + 224) - *(double *)(v9 + 56) + 174.0;
      }
      else {
        double v34 = NAN;
      }
      if (*(_WORD *)(v9 + 204)) {
        double v35 = *(double *)(v9 + 224);
      }
      else {
        double v35 = NAN;
      }
      if (*(_WORD *)(v9 + 204)) {
        double v36 = *(double *)(v9 + 208) * v45;
      }
      else {
        double v36 = NAN;
      }
      uint64_t v37 = (double *)operator new(0x28uLL);
      *(unsigned char *)uint64_t v37 = v32;
      *((_DWORD *)v37 + 1) = v33;
      v37[1] = v34;
      v37[2] = v35;
      v37[3] = v36;
      void v37[4] = NAN;
      std::string __p = v37;
      uint64_t v43 = v37 + 5;
      uint64_t v44 = (char *)(v37 + 5);
      uint64_t v24 = *(void *)(v10 + 40);
      if (!v24) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      goto LABEL_28;
    }
    uint64_t v40 = "#fftd,cw,fOnRfMeasurement,nullptr";
LABEL_42:
    FireDeviceLog::DeviceLogBase(2, v40, v12, v13, v14, v15, v16, v17, v41);
    return;
  }
  int v11 = *(_DWORD *)(v9 + 4);
  if (v11 == 1)
  {
    FireDeviceLog::DeviceLogBase(6, "#fftd,mod,svId,%d,valid,%d,dBmAvg,%.2f,CN0Avg,%.2f,dBmLast,%.2f,CN0Last,%.2f,NF,%.2f,fValid,%d,freqPpb,%2.f", a3, a4, a5, a6, a7, a8, *(_WORD *)(v9 + 12));
    if (*(void *)(v10 + 40))
    {
      char v47 = 0;
      int v46 = 0x80000000;
      double v45 = NAN;
      populateBand(v9, &v47, &v46, (uint64_t *)&v45, v14, v15, v16, v17);
      char v18 = v47;
      int v19 = v46;
      if (*(_WORD *)(v9 + 16)) {
        double v20 = *(double *)(v9 + 48);
      }
      else {
        double v20 = NAN;
      }
      if (*(_WORD *)(v9 + 16)) {
        double v21 = *(double *)(v9 + 32) + *(double *)(v9 + 56);
      }
      else {
        double v21 = NAN;
      }
      if (*(_WORD *)(v9 + 64)) {
        double v22 = *(double *)(v9 + 72) * v45;
      }
      else {
        double v22 = NAN;
      }
      uint64_t v23 = (double *)operator new(0x28uLL);
      *(unsigned char *)uint64_t v23 = v18;
      *((_DWORD *)v23 + 1) = v19;
      v23[1] = v20;
      v23[2] = v21;
      v23[3] = v22;
      v23[4] = NAN;
      std::string __p = v23;
      uint64_t v43 = v23 + 5;
      uint64_t v44 = (char *)(v23 + 5);
      uint64_t v24 = *(void *)(v10 + 40);
      if (!v24) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
LABEL_28:
      (*(void (**)(uint64_t, void **))(*(void *)v24 + 48))(v24, &__p);
      if (__p)
      {
        uint64_t v43 = __p;
        operator delete(__p);
      }
      return;
    }
    uint64_t v40 = "#fftd,mod,fOnRfMeasurement,nullptr";
    goto LABEL_42;
  }
  if (*(_DWORD *)v9 != 8 && v11 != 8)
  {
    int v25 = "#fftd,result,unsupportedTestingItem";
    goto LABEL_36;
  }
  int v25 = "#fftd,result,incomplete";
  uint64_t v39 = 6;
LABEL_37:

  FireDeviceLog::DeviceLogBase(v39, v25, a3, a4, a5, a6, a7, a8, a9);
}

void sub_263A3E8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GL_FACT_TEST_STATUS *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_4>,void ()(BlueFin::GL_FACT_TEST_STATUS *)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5>,void ()(gnss::Result)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5>,void ()(gnss::Result)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9BE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5>,void ()(gnss::Result)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9BE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5>,void ()(gnss::Result)>::operator()(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + 208) = 1;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5>,void ()(gnss::Result)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_5>,void ()(gnss::Result)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6>,void ()(gnss::Result)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6>,void ()(gnss::Result)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9C60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6>,void ()(gnss::Result)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9C60;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6>,void ()(gnss::Result)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(3, "#fftd,%p,stopCompleted,status,%d", a3, a4, a5, a6, a7, a8, v9);
  if (*(unsigned char *)(v9 + 208) && (!*(unsigned char *)(v9 + 220) || *(_DWORD *)(v9 + 216) == 4)) {
    int v16 = 1;
  }
  else {
    int v16 = 8;
  }

  gnssTest::FireDevice::response(v9, v16, v10, v11, v12, v13, v14, v15, a9);
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6>,void ()(gnss::Result)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_6>,void ()(gnss::Result)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9CE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9CE0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::operator()(uint64_t a1, int32x2_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *a2;
  if (!*a2)
  {
    char v18 = "handleCommStressResponse,pStress,nullptr";
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(5, "fftd,stress,loop,%u,%s,load,kB:%u,elapsedMs:%u,Tx(half),kB/s,%u,Rx(half),kB/s,%u,Tx(full),kB/s,%u,Rx(full),kB/s,%u,PacketLost,%u,GarbageBytes:%u", a3, a4, a5, a6, a7, a8, v9->i32[1]);
  DeviceCommon::GetMachContinuousTime(v11);
  if (v9[3].i32[1] > 0xDu || v9[3].i32[0])
  {
    uint64_t v13 = v10;
    int v14 = 8;
  }
  else if (v9->i8[0] && *(_DWORD *)(v10 + 212) <= v9[1].i32[0])
  {
    uint64_t v13 = v10;
    int v14 = 1;
  }
  else
  {
    if (v12 <= *(double *)(v10 + 192) + *(double *)(v10 + 200)) {
      goto LABEL_6;
    }
    uint64_t v13 = v10;
    int v14 = 6;
  }
  gnssTest::FireDevice::response(v13, v14, a3, a4, a5, a6, a7, a8, v19);
LABEL_6:
  uint64_t v15 = *(void *)(v10 + 104);
  if (v15)
  {
    int32x2_t v16 = v9[2];
    v17.i64[0] = v16.u32[0];
    v17.i64[1] = v16.u32[1];
    int8x16_t v20 = vextq_s8(v17, v17, 8uLL);
    int32x2_t v21 = vrev64_s32(vmul_s32(v9[4], vdup_n_s32(0x3E8u)));
    int v22 = 0;
    __int16 v23 = 0;
    (*(void (**)(uint64_t, int8x16_t *))(*(void *)v15 + 48))(v15, &v20);
    return;
  }
  char v18 = "fftd,fOnLoopbackResult,nullptr";
LABEL_10:

  FireDeviceLog::DeviceLogBase(2, v18, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7,std::allocator<gnssTest::FireDevice::initMessageHandler(std::function<void ()(gnss::Result)>)::$_7>,void ()(BlueFin::GL_STRESS_TEST_STATUS const*)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9D70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9D70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t std::__function::__func<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::periodic(int,std::function<void ()(std::unique_ptr<gnss::Fix>)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void *std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::~__func(void *a1)
{
  *a1 = &unk_270EB9DF0;
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::~__func(void *a1)
{
  *a1 = &unk_270EB9DF0;
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x263E6DD80);
}

void *std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_270EB9DF0;
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_263A3F034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB9DF0;
  return std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<void ()(gnssTest::CommLoopbackResult const&)>,std::allocator<std::function<void ()(gnssTest::CommLoopbackResult const&)>>,void ()(gnssTest::CommLoopbackResult)>::target_type()
{
}

void *std::__function::__value_func<void ()(gnssTest::CommLoopbackResult const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0>,void ()(std::unique_ptr<gnss::Fix>)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0>,void ()(std::unique_ptr<gnss::Fix>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_270EB9EE0;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0>,void ()(std::unique_ptr<gnss::Fix>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270EB9EE0;
}

void std::__function::__func<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0>,void ()(std::unique_ptr<gnss::Fix>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  *a2 = 0;
  FireDeviceLog::DeviceLogBase(6, "#fftd,tm,fixCallback", a3, a4, a5, a6, a7, a8, v9);
  if (v8)
  {
    JUMPOUT(0x263E6DD80);
  }
}

void sub_263A3F2B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x263E6DD80](v1, 0x1000C4043D32D5CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0>,void ()(std::unique_ptr<gnss::Fix>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::timeMarkGpio(int,std::function<void ()(gnss::Result)>)::$_0>,void ()(std::unique_ptr<gnss::Fix>)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0>,void ()(BlueFin::GL_SYNCIN_STATUS)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0>,void ()(BlueFin::GL_SYNCIN_STATUS)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9F70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0>,void ()(BlueFin::GL_SYNCIN_STATUS)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9F70;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0>,void ()(BlueFin::GL_SYNCIN_STATUS)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fftd,syncInArm,status,%d", a3, a4, a5, a6, a7, a8, *a2);
  if (!v8)
  {
    if (!FireResourceMgr::fInstance) {
      operator new();
    }
    (*(void (**)(void *__return_ptr))(**(void **)FireResourceMgr::fInstance + 144))(v16);
    FireDeviceLog::DeviceLogBase(3, "#fftd,pulse_sent,status,%d", v10, v11, v12, v13, v14, v15, 0);
    *(_DWORD *)(v9 + 216) = 2;
    *(unsigned char *)(v9 + 220) = 1;
  }
}

uint64_t std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0>,void ()(BlueFin::GL_SYNCIN_STATUS)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_0>,void ()(BlueFin::GL_SYNCIN_STATUS)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EB9FF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EB9FF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::operator()(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fftd,tm,syncInLatch,status,%d,time,%.3f", a3, a4, a5, a6, a7, a8, *a2);
  if (v8 == 1)
  {
    uint64_t v16 = *(void *)(*(void *)(v9 + 8) + 1296);
    if (!v16)
    {
      FireDeviceLog::DeviceLogBase(1, "#fftd,tm,gpsd,nullptr", v10, v11, v12, v13, v14, v15, v17);
      DeviceFaultNotify("FireFactoryTestDevice.cpp", 404, "operator()", (char)"#fftd,tm,gpsd,nullptr");
      DeviceFaultNotify("FireFactoryTestDevice.cpp", 404, "operator()", (char)"#fftd,tm,gpsd,nullptr");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "FireFactoryTestDevice.cpp", 404, "#fftd,tm,gpsd,nullptr");
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v16 + 376))(v16, v18, 2);
    *(_DWORD *)(v9 + 216) = 3;
    *(unsigned char *)(v9 + 220) = 1;
  }
}

uint64_t std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_1>,void ()(BlueFin::GL_SYNCIN_STATUS,double)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EBA070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EBA070;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(6, "#fftd,tm,report,status,%d,valid,%d,tow,%d,lms,%6.1f", a3, a4, a5, a6, a7, a8, *a2);
  *(_DWORD *)(v8 + 216) = 4;
  *(unsigned char *)(v8 + 220) = 1;
}

uint64_t std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2,std::allocator<gnssTest::FireDevice::setTimeTransferCallback(void)::$_2>,void ()(BlueFin::GL_SYNCIN_STATUS,BlueFin::GL_TIME const*,BlueFin::GL_TIME_VALIDITY,double,BOOL,signed char)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(std::string const&,std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  return a1;
}

void std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EBA0F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EBA0F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = *(gnssTest::FireDevice::CommPing **)(a1 + 8);
  FireDeviceLog::DeviceLogBase(5, "commping,tick,stage,%d", a3, a4, a5, a6, a7, a8, *(_DWORD *)v9);

  gnssTest::FireDevice::CommPing::dataProc(v9, v10, v11, v12, v13, v14, v15, v16, a9);
}

uint64_t std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1>,void ()(unsigned char *,unsigned long)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EBA170;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1>,void ()(unsigned char *,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EBA170;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1>,void ()(unsigned char *,unsigned long)>::operator()(uint64_t a1, gnss::fire **a2, size_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  size_t v9 = *a3;
  uint64_t v10 = *(void *)(a1 + 8);
  FireDeviceLog::DeviceLogBase(5, "readCallback,size,%zu,nread,%zd,enableRead,%d", (uint64_t)a3, a4, a5, a6, a7, a8, *a3);
  gnss::fire::charToHex(v8, (const unsigned __int8 *)v9, 44, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
  }
  FireDeviceLog::DeviceLogBase(5, "ReceivedBytesHex,%s", v11, v12, v13, v14, v15, v16, (char)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(v10 + 4))
  {
    memcpy((void *)(v10 + *(void *)(v10 + 264) + 6), v8, v9);
    *(void *)(v10 + 264) += v9;
  }
  gnssTest::FireDevice::CommPing::dataProc((gnssTest::FireDevice::CommPing *)v10, v18, v19, v20, v21, v22, v23, v24, v25);
}

void sub_263A3FB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1>,void ()(unsigned char *,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1,std::allocator<gnssTest::FireDevice::CommPing::start(int,std::function<void ()(std::string const&,std::string const&)>,std::function<void ()(gnss::Result)>)::$_1>,void ()(unsigned char *,unsigned long)>::target_type()
{
}

void std::__function::__func<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0,std::allocator<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0,std::allocator<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270EBA1F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0,std::allocator<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270EBA1F0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0,std::allocator<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0>,void ()(void)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t std::__function::__func<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0,std::allocator<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0,std::allocator<gnssTest::FireDevice::handleLocationResponse(BlueFin::GL_FIX_STATUS const*)::$_0>,void ()(void)>::target_type()
{
}

void *FireResourceMgr::setInterface(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v9 = *a2;
  *a2 = 0;
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    size_t v9 = *(const void **)(a1 + 32);
  }
  if (!v9)
  {
    *(void *)(a1 + 40) = 0;
LABEL_7:
    FireDeviceLog::DeviceLogBase(1, "Extensions dynamic cast failed,%p", a3, a4, a5, a6, a7, a8, (char)v9);
    DeviceFaultNotify("FireResourceMgr.cpp", 45, "setInterface", (char)"Extensions dynamic cast failed,%p");
    DeviceFaultNotify("FireResourceMgr.cpp", 45, "setInterface", (char)"Extensions dynamic cast failed,%p");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "FireResourceMgr.cpp", 45, "Extensions dynamic cast failed,%p");
  }
  *(void *)(a1 + 40) = result;
  if (!result) {
    goto LABEL_7;
  }
  return result;
}

const char *getVersionString()
{
  return "FIRE@98.0.4 GLL@612249";
}

uint64_t getGnssDeviceVersion()
{
  return 2502;
}

uint64_t BlueFin::GlPeDgpsData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_dgps_data.cpp", 32, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_dgps_data.cpp", 32, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    unsigned int v8 = *(__int16 *)(v2 + 16);
    if (*(_WORD *)(v2 + 16))
    {
      unsigned int v9 = 0;
      do
      {
        if (v8 >= 0x13EC) {
          int v10 = 5100;
        }
        else {
          int v10 = v8;
        }
        int v13 = 49;
        char v14 = v5;
        uint64_t v15 = 0x1000000000000;
        uint64_t v12 = &unk_270EBA2F0;
        char v16 = v5;
        BlueFin::GlSysLogEntry::PutBuffer((BlueFin::GlSysLogEntry *)&v12, (const unsigned __int8 *)(*(void *)(v7 + 8) + v9), v10);
        BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v6, 4);
        v8 -= v10;
        v9 += v10;
      }
      while (v9 < *(__int16 *)(v7 + 16));
    }
  }
  return 1;
}

uint64_t BlueFin::GlPeDgpsData::Deserialize(unsigned __int8 **this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 49)
  {
    DeviceFaultNotify("glpe_dgps_data.cpp", 53, "Deserialize", (char)"otEntry.eType == GLPE_LOG_ENTRY_DGPS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_dgps_data.cpp", 53, "otEntry.eType == GLPE_LOG_ENTRY_DGPS");
  }
  if (*((unsigned __int8 *)a2 + 12) > 1u) {
    return 0;
  }
  int Buffer = BlueFin::GlSysLogEntry::GetBuffer(a2, this[1], *((unsigned __int16 *)this + 8));
  unsigned int v4 = this[3];
  if (v4) {
    *(_WORD *)unsigned int v4 = Buffer;
  }
  if (Buffer > *((__int16 *)this + 8))
  {
    GlCustomLog(11, " OVERFLOW\n");
    return 0;
  }
  return 1;
}

void BlueFin::GlPeDgpsData::~GlPeDgpsData(BlueFin::GlPeDgpsData *this)
{
}

void BlueFin::GlSysLogEntryLong::~GlSysLogEntryLong(BlueFin::GlSysLogEntryLong *this)
{
}

uint64_t BlueFin::GlSysLogEntryLong::GetMaxSizeEntry(BlueFin::GlSysLogEntryLong *this)
{
  return 5120;
}

uint64_t BlueFin::GlSysLogEntryLong::Buf(BlueFin::GlSysLogEntryLong *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::GlSysLogEntryLong::ReadOnlyBuf(BlueFin::GlSysLogEntryLong *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::GlSysLogEntryLong::BufSize(BlueFin::GlSysLogEntryLong *this)
{
  return 5120;
}

uint64_t BlueFin::GlGnssSet::Remove(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  if (a2 > 6 || *a3 - 64 <= 0xFFFFFFC0)
  {
    DeviceFaultNotify("glgnss.cpp", 251, "Remove", (char)"(GlIntU32)eGnss < NUM_GNSS && rtGnssId.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.cpp", 251, "(GlIntU32)eGnss < NUM_GNSS && rtGnssId.isValid()");
  }
  uint64_t v3 = *(void *)(a1 + 168) + 24 * a2;
  int v4 = *a3;

  return BlueFin::GlSetBase::Remove(v3, v4);
}

uint64_t BlueFin::GlImplGnss::fromImplSvId(BlueFin::GlImplGnss *this)
{
  uint64_t v1 = 0;
  while (1)
  {
    unsigned int v2 = BlueFin::s_aucImplSvIdTable[v1];
    BOOL v3 = this >= v2;
    unsigned int v4 = this - v2;
    if (v4 != 0 && v3 && BlueFin::s_aucImplSvIdTable[v1 + 1] >= this) {
      break;
    }
    if (++v1 == 8) {
      return 0;
    }
  }
  if (v1 == 4) {
    return 0;
  }
  return (v4
                         + BlueFin::s_aucEnabledSvIdTable[BlueFin::GlImplGnss::m_aucImplGnssTable[v1]]);
}

uint64_t BlueFin::GlImplGnss::toImplSvId(BlueFin::GlImplGnss *this)
{
  uint64_t v1 = 0;
  while (1)
  {
    unsigned int v2 = BlueFin::s_aucEnabledSvIdTable[v1];
    BOOL v3 = this >= v2;
    unsigned int v4 = this - v2;
    if (v4 != 0 && v3 && BlueFin::s_aucEnabledSvIdTable[v1 + 1] >= this) {
      break;
    }
    if (++v1 == 7) {
      return 0;
    }
  }
  return (v4
                         + BlueFin::s_aucImplSvIdTable[BlueFin::GlImplGnss::m_aucEnabledGnssTable[v1]]);
}

uint64_t _GLOBAL__sub_I_glimplgnss_cpp()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v0 = 1;
  memset(v10, 0, sizeof(v10));
  do
  {
    *((unsigned char *)v10 + v0) = v0;
    ++v0;
  }
  while (v0 != 76);
  for (uint64_t i = 81; i != 118; ++i)
    *((unsigned char *)v10 + i) = i - 5;
  do
  {
    *((unsigned char *)v10 + i) = i + 21;
    ++i;
  }
  while (i != 168);
  uint64_t v2 = 1;
  memset(v9, 0, sizeof(v9));
  do
  {
    *((unsigned char *)v9 + v2) = v2;
    ++v2;
  }
  while (v2 != 76);
  do
  {
    *((unsigned char *)v9 + v2) = v2 + 5;
    ++v2;
  }
  while (v2 != 113);
  for (uint64_t j = 139; j != 189; ++j)
    *((unsigned char *)v9 + j) = j - 21;
  uint64_t v4 = 1u;
  do
  {
    *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId + vbzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlImplGnss::fromImplSvId((BlueFin::GlImplGnss *)*((unsigned __int8 *)v10 + v4));
    ++v4;
  }
  while (v4 != 168);
  for (uint64_t k = 0; k != 188; ++k)
    *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId + k + 257) = BlueFin::GlImplGnss::fromImplSvId((BlueFin::GlImplGnss *)(k + 1));
  uint64_t v6 = 1u;
  do
  {
    *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId + v6) = *((unsigned char *)v9
                                                                            + BlueFin::GlImplGnss::toImplSvId((BlueFin::GlImplGnss *)v6));
    ++v6;
  }
  while (v6 != 189);
  for (uint64_t m = 0; m != 188; ++m)
  {
    uint64_t result = BlueFin::GlImplGnss::toImplSvId((BlueFin::GlImplGnss *)(m + 1));
    *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId + m + 257) = result;
  }
  BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion = 1;
  return result;
}

void BlueFin::GlPeBaro::GnssUpdate(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (a4 && *(_DWORD *)(a1 + 40))
  {
    if (!*(_DWORD *)(a1 + 36)) {
      *(_DWORD *)(a1 + 36) = a2;
    }
    if (!*(unsigned char *)(a1 + 34))
    {
      *(_DWORD *)(a1 + 36) = a2;
      double v6 = *(double *)(a3 + 32);
      *(double *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
      double v7 = *(double *)(a3 + 40) / 1.5 + 3.0;
      goto LABEL_17;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      *(_DWORD *)(a1 + 36) = a2;
      double v6 = *(double *)(a3 + 32);
      *(double *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
      double v7 = fmax(*(double *)(a3 + 40) / 1.5, 5.0);
LABEL_17:
      *(double *)(a1 + 16) = v7;
      double v10 = *(double *)a1;
      *(long double *)(a1 + 8) = v10 * pow(v6 / -44330.77 + 1.0, -5.25588265) * 100.0;
      *(_WORD *)(a1 + 33) = 256;
      goto LABEL_18;
    }
    double v9 = *(double *)(a1 + 16) + 0.05;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 34))
    {
      double v7 = *(double *)(a1 + 16);
      goto LABEL_18;
    }
    double v8 = 0.0;
    if (*(double *)(a3 + 40) < 20.0)
    {
      double v8 = *(double *)(a3 + 32) - *(double *)(a1 + 24);
      if (v8 < 0.0) {
        double v8 = -v8;
      }
    }
    double v9 = v8 / 12.0;
    if (v9 < *(double *)(a1 + 16) + 0.05) {
      double v9 = *(double *)(a1 + 16) + 0.05;
    }
  }
  double v7 = fmin(v9, 35.0);
  *(double *)(a1 + 16) = v7;
LABEL_18:
  if (v7 >= 10.0 || (a2 - *(_DWORD *)(a1 + 36)) >= 0xEA61) {
    *(unsigned char *)(a1 + 33) = 1;
  }
}

uint64_t BlueFin::GlIqData::Svid2EnumGnssIQ(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 != 3)
  {
    if (a3 == 2)
    {
      if (BlueFin::GlSvId::s_aucSvId2gnss[*a2] == 5) {
        unsigned int v5 = 6;
      }
      else {
        unsigned int v5 = 8;
      }
      if (BlueFin::GlSvId::s_aucSvId2gnss[*a2]) {
        return v5;
      }
      else {
        return 5;
      }
    }
    if (a3) {
      return 8;
    }
  }
  unint64_t v3 = BlueFin::GlSvId::s_aucSvId2gnss[*a2];
  if (v3 >= 7 || ((0x7Du >> v3) & 1) == 0)
  {
    DeviceFaultNotify("gliqdata.cpp", 52, "Svid2EnumGnssIQ", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gliqdata.cpp", 52, "false");
  }
  return dword_263BA9EA8[v3];
}

uint64_t BlueFin::GlSatAidInfo::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 10;
  }
  if (v5 >= 0xB)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 271, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= GlSatAidInfo::LOG_ENTRY_VERSION");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 271, "ucVersion >= 1 && ucVersion <= GlSatAidInfo::LOG_ENTRY_VERSION");
  }
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    char v7 = 0;
    int v26 = 23;
    char v27 = v5;
    uint64_t v28 = 0x1000000000000;
    char v25 = &unk_270EBA2F0;
    char v29 = v5;
    double v8 = *(unsigned __int8 **)(v2 + 8808);
    uint64_t v9 = 91;
    do
    {
      int v10 = *v8;
      v8 += 96;
      if (v10) {
        ++v7;
      }
      --v9;
    }
    while (v9);
    uint64_t v20 = v3;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, v7);
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *(_DWORD *)(v6 + 36));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(double *)(v6 + 8));
    if (v5 <= 6)
    {
      if (v5 == 6)
      {
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(float *)(v6 + 16));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(double *)(v6 + 24));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(float *)(v6 + 32));
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v6 + 16));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(double *)(v6 + 24));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v6 + 32));
      if (v5 > 9) {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, *(unsigned char *)(v6 + 8800));
      }
    }
    uint64_t v11 = 91;
    for (uint64_t i = 92; ; i += 96)
    {
      uint64_t v13 = *(void *)(v6 + 8808);
      if (*(unsigned char *)(v13 + i - 92)) {
        break;
      }
LABEL_32:
      if (!--v11)
      {
        BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v25, v20, 4);
        return 1;
      }
    }
    __int16 v14 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
          + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
          + *(unsigned __int8 *)(v13 + i - 92));
    if (v5 < 5)
    {
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v25, v14);
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v25, *(_DWORD *)(v13 + i - 72));
      if (v5 <= 3)
      {
        unsigned int v16 = *(_DWORD *)(v13 + i - 68);
        if (v5 == 3)
        {
          BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, v16);
          int v17 = 0;
        }
        else
        {
          int v17 = v16 >> (v5 == 1);
        }
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, v17);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, 0);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(double *)(v13 + i - 60));
        goto LABEL_26;
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, v14);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v13 + i - 88)]);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, *(unsigned char *)(v13 + i - 84));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v25, *(_DWORD *)(v13 + i - 72));
    }
    int v15 = *(_DWORD *)(v13 + i - 68);
    uint64_t v21 = &v23;
    char v22 = 3;
    int v23 = v15;
    uint64_t v24 = 0;
    BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v25, (const BlueFin::GlSetBase *)&v21);
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(double *)(v13 + i - 60));
    if (v5 > 6)
    {
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 52));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 48));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 44));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 40));
      goto LABEL_27;
    }
LABEL_26:
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 52));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 48));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 44));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i - 40));
LABEL_27:
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v25, *(_WORD *)(v13 + i - 20));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v25, *(_WORD *)(v13 + i - 18));
    int v18 = *(_DWORD *)(v13 + i - 80);
    if (v5 == 1)
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, v18 - 1);
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, v18);
      if (v5 > 7)
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v25, *(float *)(v13 + i));
        if (v5 != 8) {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, *(unsigned char *)(v13 + i - 76));
        }
      }
    }
    goto LABEL_32;
  }
  return 1;
}

uint64_t BlueFin::GlSatAidInfo::Deserialize(BlueFin::GlSatAidInfo *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 23 || *((unsigned __int8 *)a2 + 12) > 0xAu) {
    return 0;
  }
  unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + 1) = BlueFin::GlSysLogEntry::GetD64(a2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 12);
  if (v6 < 7)
  {
    if (v6 != 6) {
      goto LABEL_10;
    }
    float D64 = BlueFin::GlSysLogEntry::GetD64(a2);
    *((float *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = D64;
    *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
    float F32 = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  else
  {
    *((float *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
    *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
    float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
  }
  *((float *)this + 8) = F32;
  if (*((unsigned __int8 *)a2 + 12) >= 0xAu) {
    *((_DWORD *)this + 2200) = BlueFin::GlSysLogEntry::GetU8(a2);
  }
LABEL_10:
  uint64_t v9 = (unsigned char *)*((void *)this + 1101);
  uint64_t v10 = 91;
  do
  {
    *uint64_t v9 = 0;
    v9 += 96;
    --v10;
  }
  while (v10);
  if (U8 >= 0x5B) {
    unsigned int v11 = 91;
  }
  else {
    unsigned int v11 = U8;
  }
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 96 * v11;
    while (1)
    {
      uint64_t v14 = *((void *)this + 1101);
      if (*((unsigned __int8 *)a2 + 12) < 5u)
      {
        int S16 = BlueFin::GlSysLogEntry::GetS16(a2);
        if (S16) {
          char v17 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
        }
                + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                + S16);
        else {
          char v17 = 0;
        }
        uint64_t v18 = v14 + v12;
        *(unsigned char *)uint64_t v18 = v17;
        *(_DWORD *)(v18 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 7;
        *(unsigned char *)(v18 + 8) = 0;
      }
      else
      {
        uint64_t v15 = v14 + v12;
        *(unsigned char *)(v14 + v12) = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                                + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                                + BlueFin::GlSysLogEntry::GetU8(a2));
        *(_DWORD *)(v15 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
        *(unsigned char *)(v15 + 8) = BlueFin::GlSysLogEntry::GetU8(a2);
      }
      int S32 = BlueFin::GlSysLogEntry::GetS32(a2);
      uint64_t v20 = v14 + v12;
      *(_DWORD *)(v14 + v12 + 20) = S32;
      unsigned int v21 = *((unsigned __int8 *)a2 + 12);
      if (v21 >= 4) {
        goto LABEL_26;
      }
      if (v21 == 3) {
        break;
      }
      BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete(a2, (uint64_t)&v32);
      *(_DWORD *)(v14 + v12 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v32, 0);
      if (BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v32, 1u))
      {
        uint64_t v30 = "otTemp.GetULong(1) == 0";
        DeviceFaultNotify("glmepeif_types.cpp", 460, "Deserialize", (char)"otTemp.GetULong(1) == 0");
        int v31 = 460;
        goto LABEL_44;
      }
      if (*((unsigned char *)a2 + 12) == 1) {
        *(_DWORD *)(v14 + v12 + 24) *= 2;
      }
LABEL_27:
      char v22 = (float *)(v14 + v12);
      *(double *)(v14 + v12 + 32) = BlueFin::GlSysLogEntry::GetD64(a2);
      if (*((unsigned __int8 *)a2 + 12) < 7u)
      {
        float v24 = BlueFin::GlSysLogEntry::GetD64(a2);
        v22[10] = v24;
        float v25 = BlueFin::GlSysLogEntry::GetD64(a2);
        v22[11] = v25;
        float v26 = BlueFin::GlSysLogEntry::GetD64(a2);
        v22[12] = v26;
        float v23 = BlueFin::GlSysLogEntry::GetD64(a2);
      }
      else
      {
        v22[10] = BlueFin::GlSysLogEntry::GetF32(a2);
        v22[11] = BlueFin::GlSysLogEntry::GetF32(a2);
        v22[12] = BlueFin::GlSysLogEntry::GetF32(a2);
        float v23 = BlueFin::GlSysLogEntry::GetF32(a2);
      }
      uint64_t v27 = v14 + v12;
      *(float *)(v14 + v12 + 52) = v23;
      *(_WORD *)(v27 + 72) = BlueFin::GlSysLogEntry::GetU16(a2);
      *(_WORD *)(v27 + 7bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetS16(a2);
      int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      *(_DWORD *)(v27 + 12) = U32;
      unsigned int v29 = *((unsigned __int8 *)a2 + 12);
      if (v29 == 1)
      {
        *(_DWORD *)(v27 + 12) = U32 + 1;
      }
      else if (v29 >= 8)
      {
        *(float *)(v14 + v12 + 92) = BlueFin::GlSysLogEntry::GetF32(a2);
        if (*((unsigned __int8 *)a2 + 12) >= 9u) {
          *(_DWORD *)(v14 + v12 + 16) = BlueFin::GlSysLogEntry::GetU8(a2);
        }
      }
      v12 += 96;
      if (v13 == v12) {
        goto LABEL_40;
      }
    }
    uint64_t v20 = v14 + v12;
LABEL_26:
    char v32 = (void *)(v20 + 24);
    char v33 = 1;
    BlueFin::GlSysLogEntry::GetGlSet(a2, &v32);
    goto LABEL_27;
  }
LABEL_40:
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    uint64_t v30 = "otEntry.DataSize() == otEntry.ReadIdx()";
    DeviceFaultNotify("glmepeif_types.cpp", 500, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    int v31 = 500;
LABEL_44:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", v31, v30);
  }
  return 1;
}

uint64_t BlueFin::GlDataSubFrmMeas::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v5 >= 3)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 965, "SerializeImpl", (char)"ucVersion == 1 || ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 965, "ucVersion == 1 || ucVersion == 2");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v11 = 17;
    char v12 = v5;
    uint64_t v13 = 0x1000000000000;
    uint64_t v10 = &unk_270EBA550;
    char v14 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v2 + 8)));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 9));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 16));
    if (v5 > 1) {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 60));
    }
    for (uint64_t i = 20; i != 60; i += 4)
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + i));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlDataSubFrmMeas::Deserialize(BlueFin::GlDataSubFrmMeas *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 17) {
    return 0;
  }
  if (*((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + BlueFin::GlSysLogEntry::GetU16(a2));
  *((unsigned char *)this + 8) = v4;
  if (!v4) {
    return 0;
  }
  *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) > 1u) {
    *((_DWORD *)this + 15) = BlueFin::GlSysLogEntry::GetU32(a2);
  }
  for (uint64_t i = 20; i != 60; i += 4)
    *(_DWORD *)((char *)this + i) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1037, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1037, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlGlonassDataString::Deserialize(BlueFin::GlGlonassDataString *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 20 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v5 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + BlueFin::GlSysLogEntry::GetU16(a2));
  *((unsigned char *)this + 8) = v5;
  if (!v5) {
    return 0;
  }
  *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetS8(a2);
  *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_WORD *)this + 8) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1241, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1241, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlGlonassDataString::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1252, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1252, "ucVersion == 1");
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v6 = v3;
    uint64_t v7 = v2;
    int v10 = 20;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    uint64_t v9 = &unk_270EBA550;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v2 + 8)));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 9));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 10));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 28));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 32));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlGalileoINavPage::Deserialize(BlueFin::GlGalileoINavPage *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 21 || *((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v5 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + BlueFin::GlSysLogEntry::GetU16(a2));
  *((unsigned char *)this + 8) = v5;
  if (!v5) {
    return 0;
  }
  *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 10) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 11) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 13) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 8) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 10) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 11) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 12) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1342, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1342, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlGalileoINavPage::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1353, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1353, "ucVersion == 1");
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v6 = v3;
    uint64_t v7 = v2;
    int v10 = 21;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    uint64_t v9 = &unk_270EBA550;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v2 + 8)));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 9));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 10));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 11));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 52));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 28));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 32));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 36));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 40));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 44));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 48));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlNavICSubFrame::Deserialize(BlueFin::GlNavICSubFrame *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((unsigned char *)a2 + 12) != 1) {
    return 0;
  }
  int v4 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + BlueFin::GlSysLogEntry::GetU16(a2));
  *((unsigned char *)this + 8) = v4;
  if (!v4) {
    return 0;
  }
  *((unsigned char *)this + 10) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
  *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 16) = BlueFin::GlSysLogEntry::GetU32(a2);
  for (uint64_t i = 24; i != 64; i += 4)
    *(_DWORD *)((char *)this + i) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1444, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1444, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlNavICSubFrame::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  v13[512] = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 1455, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 1455, "ucVersion == 1");
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v5 = v3;
    uint64_t v6 = v2;
    int v10 = 0;
    uint64_t v12 = 0;
    uint64_t v9 = &unk_270EBA550;
    bzero(v13, 0x1000uLL);
    char v11 = 1;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v6 + 8)));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 10));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 9));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 20));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 64));
    for (uint64_t i = 24; i != 64; i += 4)
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + i));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlMeSignalAidInfo::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 5;
  }
  if (v5 >= 6)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 2438, "SerializeImpl", (char)"ucVersion > 0 && ucVersion <= 5");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 2438, "ucVersion > 0 && ucVersion <= 5");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  int v13 = 22;
  char v14 = v5;
  uint64_t v15 = 0x1000000000000;
  uint64_t v12 = &unk_270EBA2F0;
  char v16 = v5;
  if (v5 < 3 || (BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v2 + 8)), v5 == 3)) {
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v7 + 14));
  }
  else {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v7 + 14));
  }
  if (*(_WORD *)(v7 + 14))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      int v11 = *(_DWORD *)(*(void *)(v7 + 16) + v9 + 4);
      if (v5 >= 5) {
        break;
      }
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, v11);
      if (v5 != 1) {
        goto LABEL_19;
      }
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(*(void *)(v7 + 16) + v9)));
LABEL_20:
      ++v10;
      v9 += 8;
      if (v10 >= *(unsigned __int16 *)(v7 + 14)) {
        goto LABEL_21;
      }
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, v11);
LABEL_19:
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(*(void *)(v7 + 16) + v9)));
    goto LABEL_20;
  }
LABEL_21:
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v6, 4);
  return 1;
}

uint64_t BlueFin::GlMeSignalAidInfo::Deserialize(BlueFin::GlMeSignalAidInfo *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 22) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 6 < 0xFFFFFFFB) {
    return 0;
  }
  if (v3 < 3 || (*((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2), *((unsigned __int8 *)a2 + 12) < 4u)) {
    int S8 = BlueFin::GlSysLogEntry::GetS8(a2);
  }
  else {
    int S8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  *((_WORD *)this + 7) = S8;
  if (S8)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      if (*((unsigned __int8 *)a2 + 12) < 5u) {
        int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
      }
      else {
        int U16 = BlueFin::GlSysLogEntry::GetU32(a2);
      }
      *(_DWORD *)(*((void *)this + 2) + v7 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = U16;
      if (*((unsigned char *)a2 + 12) == 1)
      {
        unsigned int v10 = BlueFin::GlSysLogEntry::GetU16(a2);
        if (v10 >= 0x100)
        {
          DeviceFaultNotify("glmepeif_types.cpp", 2523, "Deserialize", (char)"usImplSvId <= 0xff");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 2523, "usImplSvId <= 0xff");
        }
        uint64_t U8 = v10;
      }
      else
      {
        uint64_t U8 = BlueFin::GlSysLogEntry::GetU8(a2);
      }
      *(_WORD *)(*((void *)this + 2) + v7) = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                                               + 256
                                               * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                                               + U8);
      ++v8;
      v7 += 8;
    }
    while (v8 < *((unsigned __int16 *)this + 7));
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 2527);
  return 1;
}

uint64_t BlueFin::GlMeSignalAidInfo::RemoveSignalByArrayIdx(uint64_t this, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int16 *)(this + 14);
  if (v2 <= a2)
  {
    DeviceFaultNotify("glmepeif_types.cpp", 2682, "RemoveSignalByArrayIdx", (char)"idxToRemove < number_of_signals");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmepeif_types.cpp", 2682, "idxToRemove < number_of_signals");
  }
  uint64_t v3 = *(void *)(this + 16);
  uint64_t v4 = v3 + 8 * a2;
  *(_WORD *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  unsigned int v5 = a2 + 1;
  if (a2 + 1 < v2)
  {
    uint64_t v6 = v3 + 8 * a2 + 8;
    do
    {
      *(_WORD *)(v6 - 8) = *(_WORD *)v6;
      *(_DWORD *)(v6 - bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(v6 + 4);
      ++v5;
      v6 += 8;
    }
    while (v5 < v2);
  }
  *(_WORD *)(this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2 - 1;
  return this;
}

uint64_t BlueFin::GlMeSignalAidInfo::RemoveConstellation(uint64_t this, unsigned int a2)
{
  unsigned __int16 v2 = *(_WORD *)(this + 14);
  if (v2)
  {
    uint64_t v3 = this;
    unsigned __int16 v4 = 0;
    uint64_t v5 = a2;
    unsigned int v6 = BlueFin::GlSvId::s_aucGnss2minSvId[a2];
    do
    {
      unsigned int v7 = *(unsigned __int8 *)(*(void *)(v3 + 16) + 8 * v4);
      if (v6 <= v7 && BlueFin::GlSvId::s_aucGnss2maxSvId[v5] >= v7)
      {
        this = BlueFin::GlMeSignalAidInfo::RemoveSignalByArrayIdx(v3, v4);
        unsigned __int16 v2 = *(_WORD *)(v3 + 14);
      }
      else
      {
        ++v4;
      }
    }
    while (v4 < v2);
  }
  return this;
}

uint64_t BlueFin::GlTowAsstData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  char v6 = *(unsigned char *)(v2 + 46) + ~*(unsigned char *)(v2 + 47);
  int v13 = 65;
  char v14 = 2;
  uint64_t v15 = 0x1000000000000;
  uint64_t v12 = &unk_270EBA2F0;
  char v16 = 2;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, v6);
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v5 + 368));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v5 + 372));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v5 + 376));
  uint64_t v10 = v5 + 8;
  unsigned __int8 v11 = *(unsigned char *)(v5 + 47) + 1;
  if (*(unsigned __int8 *)(v5 + 46) > v11)
  {
    do
    {
      int v7 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v10);
      uint64_t v8 = BlueFin::GlArray::Get((BlueFin::GlArray *)(v5 + 8), v7);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)v8);
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, *(_WORD *)(v8 + 2));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v8 + 4));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v8 + 5));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v8 + 6));
    }
    while (v11 < *(unsigned __int8 *)(v10 + 38));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v4, 4);
  return 1;
}

uint64_t BlueFin::GlTowAsstData::Deserialize(BlueFin::GlTowAsstData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 65 || *((unsigned __int8 *)a2 + 12) > 2u) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  if (*((unsigned char *)a2 + 12) == 2)
  {
    *((_DWORD *)this + 92) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 93) = BlueFin::GlSysLogEntry::GetU32(a2);
    int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
  }
  else
  {
    *((void *)this + 46) = 0x240C84007FFFFFFFLL;
    int U32 = 0x7FFFFFFF;
  }
  *((_DWORD *)this + 9bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = U32;
  if (U8)
  {
    int v7 = (BlueFin::GlTowAsstData *)((char *)this + 8);
    do
    {
      int v8 = BlueFin::GlSysLogEntry::GetU8(a2);
      char v9 = v8;
      uint64_t v10 = BlueFin::GlArray::Add(v7, v8);
      if (v10)
      {
        unsigned __int8 v11 = v10;
        *uint64_t v10 = v9;
        *((_WORD *)v10 + 1) = BlueFin::GlSysLogEntry::GetU16(a2);
        v11[4] = BlueFin::GlSysLogEntry::GetU8(a2);
        v11[5] = BlueFin::GlSysLogEntry::GetU8(a2);
        v11[6] = BlueFin::GlSysLogEntry::GetU8(a2);
      }
      --U8;
    }
    while (U8);
  }
  return 1;
}

uint64_t BlueFin::GlTowAsstData::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
  uint64_t v3 = (BlueFin::GlArray *)(a2 + 8);
  uint64_t v8 = a2 + 8;
  unsigned __int8 v9 = *(unsigned char *)(a2 + 47) + 1;
  if (*(unsigned __int8 *)(a2 + 46) > v9)
  {
    do
    {
      int v4 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v8);
      uint64_t v5 = BlueFin::GlArray::Get(v3, v4);
      char v6 = BlueFin::GlArray::Add((BlueFin::GlArray *)(a1 + 8), v4);
      if (v6 && v5)
      {
        *(unsigned char *)char v6 = *(unsigned char *)v5;
        v6[1] = *(_WORD *)(v5 + 2);
        *((unsigned char *)v6 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(unsigned char *)(v5 + 4);
        *(_WORD *)((char *)v6 + 5) = *(_WORD *)(v5 + 5);
      }
    }
    while (v9 < *(unsigned __int8 *)(v8 + 38));
  }
  return a1;
}

void BlueFin::GlTowAsstData::~GlTowAsstData(BlueFin::GlTowAsstData *this)
{
}

void BlueFin::GlMeSignalAidInfo::~GlMeSignalAidInfo(BlueFin::GlMeSignalAidInfo *this)
{
}

void BlueFin::GlSatAidInfo::~GlSatAidInfo(BlueFin::GlSatAidInfo *this)
{
}

void BlueFin::GlDataSubFrmMeas::~GlDataSubFrmMeas(BlueFin::GlDataSubFrmMeas *this)
{
}

void BlueFin::GlGlonassDataString::~GlGlonassDataString(BlueFin::GlGlonassDataString *this)
{
}

void BlueFin::GlGalileoINavPage::~GlGalileoINavPage(BlueFin::GlGalileoINavPage *this)
{
}

void BlueFin::GlNavICSubFrame::~GlNavICSubFrame(BlueFin::GlNavICSubFrame *this)
{
}

void BlueFin::GlSysLogEntryShort::~GlSysLogEntryShort(BlueFin::GlSysLogEntryShort *this)
{
}

uint64_t BlueFin::GlSysLogEntryShort::GetMaxSizeEntry(BlueFin::GlSysLogEntryShort *this)
{
  return 4096;
}

uint64_t BlueFin::GlSysLogEntryShort::Buf(BlueFin::GlSysLogEntryShort *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::GlSysLogEntryShort::ReadOnlyBuf(BlueFin::GlSysLogEntryShort *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::GlSysLogEntryShort::BufSize(BlueFin::GlSysLogEntryShort *this)
{
  return 4096;
}

void BlueFin::GlSysLogEntryExtraLong::~GlSysLogEntryExtraLong(BlueFin::GlSysLogEntryExtraLong *this)
{
}

uint64_t BlueFin::GlSysLogEntryExtraLong::GetMaxSizeEntry(BlueFin::GlSysLogEntryExtraLong *this)
{
  return 10240;
}

uint64_t BlueFin::GlSysLogEntryExtraLong::ReadOnlyBuf(BlueFin::GlSysLogEntryExtraLong *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::GlSysLogEntryExtraLong::BufSize(BlueFin::GlSysLogEntryExtraLong *this)
{
  return 10240;
}

double BlueFin::GlSignalId::GetInterSignalBiasInSec(unsigned __int8 *a1, uint64_t a2)
{
  return BlueFin::GlSignalId::GetInterSignalBiasInMs(a1, a2) * 0.001;
}

BOOL BlueFin::GlSignalIdSet::CntPrimarySignalSvIdSet(BlueFin::GlSignalIdSet *this, int a2)
{
  BOOL result = BlueFin::GlSetBase::HasAny(this);
  if (result)
  {
    char v16 = v18;
    char v17 = 8;
    memset(v18, 0, sizeof(v18));
    unsigned __int8 v11 = *((unsigned char *)this + 8);
    memcpy(v15, *(const void **)this, 4 * v11);
    __int16 v13 = 0;
    unsigned __int8 v12 = 0;
    int v14 = v15[0];
    BlueFin::GlSetIterator::operator++(&v11);
    while (v12 != v11)
    {
      int v5 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v13 + 1);
      if (v5 == 3 || v5 == 0)
      {
        unint64_t v7 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v13);
        unint64_t v8 = v7 >> 5;
        unint64_t v9 = *((unsigned int *)v18 + (v7 >> 5));
        char v10 = v7 & 0x1F;
        if (((v9 >> v10) & 1) == 0)
        {
          if (!(_WORD)--a2) {
            return 1;
          }
          *((_DWORD *)v18 + v8) = (1 << v10) | v9;
        }
      }
      BlueFin::GlSetIterator::operator++(&v11);
    }
    return 0;
  }
  return result;
}

unsigned __int8 *BlueFin::GlSignalIdSet::GetSignalIdSet@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 12) = 0u;
  uint64_t v6 = a4 + 12;
  *(void *)a4 = a4 + 12;
  *(unsigned char *)(a4 + 8) = 19;
  *(_OWORD *)(a4 + 28) = 0u;
  *(_OWORD *)(a4 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a4 + 60) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 8);
  memcpy(v16, *(const void **)a1, 4 * v12);
  unsigned __int16 v14 = 0;
  unsigned __int8 v13 = 0;
  int v15 = v16[0];
  for (BOOL result = BlueFin::GlSetIterator::operator++(&v12); v13 != v12; BOOL result = BlueFin::GlSetIterator::operator++(&v12))
  {
    if (v14 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    unint64_t v8 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v14;
    uint64_t v9 = *v8;
    int v10 = (char)v8[1];
    if (BlueFin::GlSvId::s_aucSvId2gnss[v9] == a2 && v10 == a3) {
      *(_DWORD *)(v6 + 4 * (v14 >> 5)) |= 1 << v14;
    }
  }
  return result;
}

uint64_t BlueFin::GlSvIdSet::SetStr(void **this, char *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v4 = *this;
  uint64_t v5 = *((unsigned __int8 *)this + 8);
  bzero(*this, ((4 * v5 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (!*a2) {
    return 0;
  }
  if (!strcmp(a2, "all"))
  {
    memset(v4, 255, 4 * v5);
    return 1;
  }
  uint64_t v6 = strchr(a2, 91);
  unint64_t v7 = strchr(a2, 93);
  uint64_t v8 = 0;
  if (v6)
  {
    uint64_t v9 = v7;
    if (v7)
    {
      int v10 = v6 + 1;
      uint64_t v8 = 1;
      if (v10 < v7)
      {
        int v11 = 0;
        int v12 = 32;
        do
        {
          do
          {
            if (memchr("0123456789+-", *v10, 0xDuLL)) {
              break;
            }
            ++v10;
          }
          while (v10 <= v9);
          if (v10 == v9) {
            break;
          }
          uint64_t v13 = 0;
          do
          {
            uint64_t v14 = v13;
            int v15 = &v10[v13];
            char v16 = &v10[v13 + 1];
            if (v16 >= v9) {
              break;
            }
            char v17 = memchr("0123456789+-", *v16, 0xDuLL);
            uint64_t v13 = v14 + 1;
          }
          while (v17);
          int v18 = (int)v14 + 1 < 255 ? v14 + 1 : 255;
          strlcpy(v25, v10, v18 + 1);
          int v19 = atoi(v25);
          if (v12 == 58)
          {
            if (v11 < v19)
            {
              uint64_t v20 = (char *)*this;
              uint64_t v21 = BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
              do
              {
                unint64_t v22 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                      + 256 * v21
                      + ++v11);
                *(_DWORD *)&v20[(v22 >> 3) & 0x1C] |= 1 << v22;
              }
              while (v19 != v11);
            }
          }
          else
          {
            unint64_t v23 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                  + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                  + v19);
            *(_DWORD *)((char *)*this + ((v23 >> 3) & 0x1C)) |= 1 << v23;
          }
          int v12 = *((unsigned __int8 *)v15 + 1);
          v10 += v14 + 2;
          int v11 = v19;
        }
        while (v10 < v9);
        return 1;
      }
    }
  }
  return v8;
}

uint64_t BlueFin::GlCryptoDes::des_perm(uint64_t this, const unsigned __int8 *a2, void *a3, unsigned __int8 *a4)
{
  uint64_t v4 = 0;
  v5[1] = *MEMORY[0x263EF8340];
  v5[0] = 0;
  do
  {
    *((unsigned char *)v5 + (v4 >> 3)) |= ((0x80u >> (*(unsigned char *)(this + v4) & 7)) & *((unsigned __int8 *)a3
                                                                                          + ((unint64_t)*(unsigned __int8 *)(this + v4) >> 3))) << (*(unsigned char *)(this + v4) & 7) >> (v4 & 7);
    ++v4;
  }
  while (a2 != v4);
  *a3 = v5[0];
  return this;
}

uint64_t BlueFin::GlCryptoDes::des_set_key(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  v16[1] = *MEMORY[0x263EF8340];
  v16[0] = *a1;
  BlueFin::GlCryptoDes::des_perm((uint64_t)&unk_263BAA970, (const unsigned __int8 *)0x38, v16, a4);
  uint64_t v6 = 0;
  v7.i32[0] = *(_DWORD *)((char *)v16 + 3);
  uint32x4_t v8 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v7));
  int8x16_t v9 = (int8x16_t)vshlq_u32(v8, (uint32x4_t)xmmword_263BAA950);
  unsigned int v10 = (LOBYTE(v16[0]) << 24) | (BYTE1(v16[0]) << 16) | (BYTE2(v16[0]) << 8) | v8.i8[0] & 0xF0;
  *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  unsigned int v11 = v8.i32[0] | v8.i32[1];
  do
  {
    char v12 = byte_263BAA960[v6];
    int v13 = (v10 >> (28 - v12)) | (v10 << v12);
    LOBYTE(v16[0]) = HIBYTE(v13);
    BYTE1(v16[0]) = BYTE2(v13);
    unsigned int v14 = (v11 >> (28 - v12)) | (v11 << v12);
    BYTE2(v16[0]) = (unsigned __int16)((v10 >> (28 - v12)) | ((_WORD)v10 << v12)) >> 8;
    BYTE3(v16[0]) = ((v10 >> (28 - v12)) | ((_BYTE)v10 << v12)) & 0xF0 | (v14 >> 28);
    BYTE4(v16[0]) = v14 >> 20;
    BYTE5(v16[0]) = v14 >> 12;
    HIWORD(v16[0]) = (v14 >> 4);
    uint64_t result = BlueFin::GlCryptoDes::des_perm((uint64_t)&unk_263BAA9A8, (const unsigned __int8 *)0x40, v16, v5);
    *(void *)(a2 + 8 * v6) = v16[0];
    unsigned int v10 = v13 & 0xFFFFFFF0;
    unsigned int v11 = v14 & 0xFFFFFFF0;
    ++v6;
  }
  while (v6 != 16);
  return result;
}

uint64_t BlueFin::GlCryptoDes::des_decrypt_blk(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  int v5 = 0;
  do
  {
    unint64_t v6 = *(unsigned __int8 *)(a2 + v3);
    v5 |= *(_DWORD *)((char *)BlueFin::GlCryptoDes::des_ip + ((v6 >> 2) & 0x3C)) << v3;
    v4 |= BlueFin::GlCryptoDes::des_ip[v6 & 0xF] << v3++;
  }
  while (v3 != 8);
  unsigned int v7 = (v5 << 8) & 0xFF000000 | (v5 << 16) | v4 | (v4 >> 8) & 0xFF00;
  unsigned int v8 = v5 & 0xFF000000 | (v5 << 8) & 0xFF0000 | HIWORD(v4) & 0xFF00 | BYTE1(v4);
  for (uint64_t i = 120; i != -8; i -= 8)
  {
    unsigned int v10 = v7;
    unsigned int v7 = v8;
    HIDWORD(v11) = v8;
    LODWORD(v11) = v8;
    int v12 = BlueFin::GlCryptoDes::des_p[(BlueFin::GlCryptoDes::des_sbox[(v7 >> 23) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 1)] & 0xF)
                                    + 16] | *(_DWORD *)((char *)BlueFin::GlCryptoDes::des_p
                                                      + (((unint64_t)BlueFin::GlCryptoDes::des_sbox[(v11 >> 27) & 0x3F ^ *(unsigned __int8 *)(a1 + i)] >> 2) & 0x3C)) | *(_DWORD *)((char *)&BlueFin::GlCryptoDes::des_p[32] + (((unint64_t)BlueFin::GlCryptoDes::des_sbox[((v7 >> 19) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 2)) + 64] >> 2) & 0x3C)) | BlueFin::GlCryptoDes::des_p[(BlueFin::GlCryptoDes::des_sbox[((v7 >> 15) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 3)) + 64] & 0xF) + 48] | *(_DWORD *)((char *)&BlueFin::GlCryptoDes::des_p[64] + (((unint64_t)BlueFin::GlCryptoDes::des_sbox[((v7 >> 11) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 4)) + 128] >> 2) & 0x3C)) | BlueFin::GlCryptoDes::des_p[(BlueFin::GlCryptoDes::des_sbox[((v7 >> 7) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 5)) + 128] & 0xF) + 80] | *(_DWORD *)((char *)&BlueFin::GlCryptoDes::des_p[96] + (((unint64_t)BlueFin::GlCryptoDes::des_sbox[((v8 >> 3) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 6)) + 192] >> 2) & 0x3C));
    HIDWORD(v11) = v8;
    LODWORD(v11) = v8;
    unsigned int v8 = (v12 | BlueFin::GlCryptoDes::des_p[(BlueFin::GlCryptoDes::des_sbox[((v11 >> 31) & 0x3F ^ *(unsigned __int8 *)(a1 + i + 7))
                                                                          + 192] & 0xF)
                                          + 112]) ^ v10;
  }
  int v13 = 0;
  int v14 = 0;
  int v15 = 0;
  for (int j = 1; j != 9; j += 2)
  {
    uint64_t result = v7 >> v13;
    v15 |= (BlueFin::GlCryptoDes::des_fp[(v8 >> v13) & 0xF] << (j - 1)) | (BlueFin::GlCryptoDes::des_fp[result & 0xF] << j);
    v14 |= (BlueFin::GlCryptoDes::des_fp[(v8 >> v13) >> 4] << (j - 1)) | (BlueFin::GlCryptoDes::des_fp[result >> 4] << j);
    v13 += 8;
  }
  *a3 = HIBYTE(v15);
  a3[1] = BYTE2(v15);
  a3[2] = BYTE1(v15);
  a3[3] = v15;
  a3[4] = HIBYTE(v14);
  a3[5] = BYTE2(v14);
  a3[6] = BYTE1(v14);
  a3[7] = v14;
  return result;
}

uint64_t BlueFin::GlCryptoDes::decrypt_update(uint64_t result, unsigned char *a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9 = result;
  LODWORD(v10) = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  *a3 = 0;
  if (a5)
  {
    LOBYTE(v11) = *(unsigned char *)(result + 144);
    if ((_BYTE)v11)
    {
      unint64_t v10 = 0;
      do
      {
        *(unsigned char *)(result + v11 + 136) = *(unsigned char *)(a4 + v10++);
        int v11 = (*(unsigned char *)(result + 144) + 1) & 7;
        *(unsigned char *)(result + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v11;
        if (v11) {
          BOOL v12 = v10 >= a5;
        }
        else {
          BOOL v12 = 1;
        }
      }
      while (!v12);
      if (!v11 && v10 != 0)
      {
        uint64_t result = BlueFin::GlCryptoDes::des_decrypt_blk(result, result + 136, a2);
        for (uint64_t i = 0; i != 8; ++i)
        {
          a2[i] ^= *(unsigned char *)(v9 + i + 128);
          *(unsigned char *)(v9 + i + 128) = *(unsigned char *)(v9 + i + 136);
        }
        *a3 += 8;
      }
    }
  }
  int v15 = v10 + 8;
  if ((int)v10 + 8 <= a5)
  {
    uint64_t v16 = v9 + 128;
    unsigned int v17 = v10;
    do
    {
      uint64_t v18 = 0;
      LODWORD(v10) = v15;
      do
      {
        v24[v18] = *(unsigned char *)(a4 + v17 + v18);
        ++v18;
      }
      while (v18 != 8);
      uint64_t result = BlueFin::GlCryptoDes::des_decrypt_blk(v9, a4 + v17, &a2[*a3]);
      for (uint64_t j = 0; j != 8; ++j)
      {
        a2[(j + *a3)] ^= *(unsigned char *)(v16 + j);
        *(unsigned char *)(v16 + j) = v24[j];
      }
      *a3 += 8;
      int v15 = v10 + 8;
      v17 += 8;
    }
    while ((int)v10 + 8 <= a5);
  }
  if (v10 < a5)
  {
    uint64_t v20 = (char *)(a4 + v10);
    unint64_t v21 = a5 - (unint64_t)v10;
    do
    {
      char v22 = *v20++;
      uint64_t v23 = *(unsigned __int8 *)(v9 + 144);
      *(unsigned char *)(v9 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v23 + 1;
      *(unsigned char *)(v9 + v23 + 136) = v22;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t BlueFin::GlCryptoRsa::rsa_bin2bn(uint64_t result, uint64_t a2, unsigned int a3)
{
  *(_DWORD *)(result + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  if (a3)
  {
    unsigned int v3 = 0;
    for (uint64_t i = a3; i; --i)
    {
      if ((v3 & 3) != 0)
      {
        if ((((_BYTE)v3 - 1) & 3) != 0)
        {
          int v5 = *(unsigned __int8 *)(a2 + (i - 1));
          uint64_t v6 = v3 >> 2;
          int v7 = *(_DWORD *)(result + 4 * v6);
          if ((((_BYTE)v3 + 2) & 3) != 0) {
            int v8 = v7 | (v5 << 24);
          }
          else {
            int v8 = v7 | (v5 << 16);
          }
          *(_DWORD *)(result + 4 * v6) = v8;
          goto LABEL_12;
        }
        uint64_t v10 = v3 & 0xFFFFFFFC;
        int v9 = *(_DWORD *)(result + v10) | (*(unsigned __int8 *)(a2 + (i - 1)) << 8);
      }
      else
      {
        int v9 = *(unsigned __int8 *)(a2 + (i - 1));
        uint64_t v10 = v3 & 0xFFFFFFFC;
      }
      *(_DWORD *)(result + v10) = v9;
LABEL_12:
      ++v3;
    }
  }
  return result;
}

uint64_t BlueFin::GlCryptoRsa::bin2key(uint64_t result, unsigned int *a2, unsigned int a3)
{
  if (a3 >= 4)
  {
    unsigned int v5 = bswap32(*a2);
    if (v5 + 4 <= a3)
    {
      uint64_t v6 = (_DWORD *)result;
      uint64_t v7 = result + 72;
      uint64_t result = BlueFin::GlCryptoRsa::rsa_bin2bn(result + 72, (uint64_t)(a2 + 1), v5);
      unsigned int v8 = 8 * v5;
      int v9 = 8 * v5 - 1;
      if (((v5 & 0x10000000) != 0) == __OFSUB__(v9, -1)) {
        int v9 = -1;
      }
      while ((--v8 & 0x80000000) == 0)
      {
        if ((*(_DWORD *)(v7 + 4 * (v8 >> 5)) >> v8)) {
          goto LABEL_9;
        }
      }
      unsigned int v8 = v9;
LABEL_9:
      v6[35] = v8;
      unsigned int v10 = v5 + 8;
      if (v5 + 8 <= a3)
      {
        unsigned int v11 = (*((unsigned __int8 *)a2 + v5 + 4) << 24) | (*((unsigned __int8 *)a2 + v5 + 5) << 16) | (*((unsigned __int8 *)a2 + v5 + 6) << 8) | *((unsigned __int8 *)a2 + v5 + 7);
        unsigned int v12 = v11 + v10;
        if (v11 + v10 <= a3)
        {
          uint64_t result = BlueFin::GlCryptoRsa::rsa_bin2bn((uint64_t)v6, (uint64_t)a2 + v10, v11);
          unsigned int v13 = 8 * v11;
          int v14 = 8 * v11 - 1;
          if (((v11 & 0x10000000) != 0) == __OFSUB__(v14, -1)) {
            int v14 = -1;
          }
          while ((--v13 & 0x80000000) == 0)
          {
            if ((v6[v13 >> 5] >> v13)) {
              goto LABEL_17;
            }
          }
          unsigned int v13 = v14;
LABEL_17:
          v6[17] = v13;
          unsigned int v15 = v12 + 4;
          if (v12 + 4 <= a3)
          {
            unsigned int v16 = (*((unsigned __int8 *)a2 + v12) << 24) | (*((unsigned __int8 *)a2 + v12 + 1) << 16) | (*((unsigned __int8 *)a2 + v12 + 2) << 8) | *((unsigned __int8 *)a2 + v12 + 3);
            unsigned int v17 = v16 + v15;
            if (v16 + v15 <= a3)
            {
              uint64_t result = BlueFin::GlCryptoRsa::rsa_bin2bn((uint64_t)(v6 + 37), (uint64_t)a2 + v15, v16);
              unsigned int v18 = v17 + 4;
              if (v17 + 4 <= a3)
              {
                unsigned int v19 = (*((unsigned __int8 *)a2 + v17) << 24) | (*((unsigned __int8 *)a2 + v17 + 1) << 16) | (*((unsigned __int8 *)a2 + v17 + 2) << 8) | *((unsigned __int8 *)a2 + v17 + 3);
                unsigned int v20 = v19 + v18;
                if (v19 + v18 <= a3)
                {
                  uint64_t result = BlueFin::GlCryptoRsa::rsa_bin2bn((uint64_t)(v6 + 54), (uint64_t)a2 + v18, v19);
                  if (v20 + 4 <= a3 && v20 + 8 <= a3) {
                    v6[36] = (*((unsigned __int8 *)a2 + v20 + 4) << 24) | (*((unsigned __int8 *)a2 + v20 + 5) << 16) | (*((unsigned __int8 *)a2 + v20 + 6) << 8) | *((unsigned __int8 *)a2 + v20 + 7);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_DWORD *BlueFin::GlCryptoRsa::rsa_bn_mont_mult(_DWORD *result, uint64_t a2, unsigned int *a3, unsigned int *a4, int a5, int a6)
{
  int v34 = 0;
  memset(v33, 0, sizeof(v33));
  if (a6 >= 1)
  {
    uint64_t v6 = 0;
    unsigned int v9 = *a3;
    uint64_t v7 = a3 + 1;
    unsigned int v8 = v9;
    unsigned int v10 = *a4;
    do
    {
      unsigned int v11 = *(_DWORD *)(a2 + 4 * v6);
      unint64_t v12 = v11 * (unint64_t)v8;
      unsigned int v13 = (LODWORD(v33[0]) + v12) * a5;
      unint64_t v14 = v10 * (unint64_t)v13;
      unint64_t v15 = LODWORD(v33[0]) + (unint64_t)v12 + v14;
      if (a6 != 1)
      {
        unsigned int v16 = v7;
        unsigned int v17 = a4 + 1;
        unsigned int v18 = (unsigned int *)v33 + 1;
        uint64_t v19 = a6 - 1;
        do
        {
          unsigned int v20 = *v16++;
          unint64_t v12 = HIDWORD(v12) + v20 * (unint64_t)v11;
          unsigned int v21 = *v17++;
          unint64_t v14 = HIDWORD(v14) + v21 * (unint64_t)v13;
          unint64_t v15 = *v18 + HIDWORD(v15) + v12 + v14;
          *(v18++ - 1) = v15;
          --v19;
        }
        while (v19);
      }
      unint64_t v22 = HIDWORD(v14) + HIDWORD(v12) + HIDWORD(v15) + *((unsigned int *)v33 + a6);
      *((_DWORD *)v33 + (a6 - 1)) = v22;
      *((_DWORD *)v33 + a6) = HIDWORD(v22);
      ++v6;
    }
    while (v6 != a6);
  }
  if ((a6 & 0x80000000) == 0)
  {
    unsigned int v23 = a6;
    do
    {
      unsigned int v24 = *((_DWORD *)v33 + v23);
      unsigned int v25 = a4[v23];
      BOOL v26 = v23-- != 0;
    }
    while (v26 && v24 == v25);
    if (v24 >= v25)
    {
      if (a6 >= 1)
      {
        uint64_t v27 = 0;
        uint64_t v28 = a6;
        unsigned int v29 = (unsigned int *)v33;
        do
        {
          unsigned int v31 = *v29++;
          uint64_t v30 = v31;
          unsigned int v32 = *a4++;
          uint64_t v27 = v30 - v32 + (v27 >> 32);
          *result++ = v27;
          --v28;
        }
        while (v28);
      }
    }
    else if (a6 >= 1)
    {
      return memcpy(result, v33, 4 * a6);
    }
  }
  return result;
}

_DWORD *BlueFin::GlCryptoRsa::decrypt(unsigned int *a1, uint64_t a2, _DWORD *a3, uint64_t a4, unsigned int a5)
{
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  unsigned int v25 = 1;
  unsigned int v8 = a1[35];
  int v9 = v8 + 32;
  BlueFin::GlCryptoRsa::rsa_bin2bn((uint64_t)v23, a4, a5);
  int v10 = a1[36];
  BlueFin::GlCryptoRsa::rsa_bn_mont_mult(v22, (uint64_t)v23, a1 + 54, a1 + 18, v10, (int)(v8 + 32) >> 5);
  if ((v8 & 0x80000000) == 0)
  {
    if ((int)(v8 + 32) >> 5 <= 1) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = (int)(v8 + 32) >> 5;
    }
    memcpy(__dst, a1 + 37, 4 * v11);
  }
  unsigned int v12 = a1[17];
  if ((v12 & 0x80000000) == 0)
  {
    do
    {
      BlueFin::GlCryptoRsa::rsa_bn_mont_mult(__dst, (uint64_t)__dst, __dst, a1 + 18, v10, v9 >> 5);
      if ((a1[v12 >> 5] >> v12)) {
        BlueFin::GlCryptoRsa::rsa_bn_mont_mult(__dst, (uint64_t)__dst, v22, a1 + 18, v10, v9 >> 5);
      }
    }
    while ((int)v12-- > 0);
  }
  uint64_t result = BlueFin::GlCryptoRsa::rsa_bn_mont_mult(__dst, (uint64_t)__dst, &v25, a1 + 18, v10, v9 >> 5);
  *a3 = 0;
  signed int v15 = (v9 >> 3) & 0xFFFFFFFC;
  if (v15 >= 3)
  {
    int v16 = 1;
    while (1)
    {
      int v17 = v15 - 3;
      if (((v15 - 3) & 3) != 0) {
        break;
      }
      int v20 = *((unsigned __int8 *)__dst + (v17 & 0xFFFFFFFC));
      if (!v16) {
        goto LABEL_20;
      }
LABEL_21:
      --v15;
      int v16 = v20;
      if (v17 <= 0) {
        return result;
      }
    }
    if ((v15 & 3) != 0)
    {
      unsigned int v18 = *(unsigned int *)((char *)__dst + (v17 & 0xFFFFFFFC));
      int v19 = HIBYTE(v18);
      int v20 = BYTE2(v18);
      if ((((_BYTE)v15 - 1) & 3) != 0) {
        int v20 = v19;
      }
      if (v16) {
        goto LABEL_21;
      }
    }
    else
    {
      int v20 = *((unsigned __int8 *)__dst + (v17 & 0xFFFFFFFC) + 1);
      if (v16) {
        goto LABEL_21;
      }
    }
LABEL_20:
    uint64_t v21 = *a3;
    *a3 = v21 + 1;
    *(unsigned char *)(a2 + v21) = v20;
    int v20 = 0;
    goto LABEL_21;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdRfInit4777::Add(uint64_t this, char a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(this + 2224);
  if (v4 >= 0x100)
  {
    uint64_t v6 = "bIsulApbCount";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 521, "Add", (char)"bIsulApbCount");
    int v7 = 521;
    goto LABEL_6;
  }
  if ((a3 & 3) != 0)
  {
    uint64_t v6 = "(usAddr & 0x3)==0";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 522, "Add", (char)"(usAddr & 0x3)==0");
    int v7 = 522;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v7, v6);
  }
  uint64_t v5 = this + 8 * v4;
  *(unsigned char *)(v5 + 88) = a2;
  *(_WORD *)(v5 + 90) = a3 >> 2;
  *(_DWORD *)(v5 + 92) = a4;
  *(_DWORD *)(this + 222bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4 + 1;
  return this;
}

uint64_t BlueFin::GlMeSrdRfInit4777::AddOrUpdateInput(uint64_t this, int a2, int a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(this + 2224);
  if (!v4) {
    return BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(this, 224, a2, a4);
  }
  for (uint64_t i = (int *)(this + 92); *((unsigned __int8 *)i - 4) != 224 || *((unsigned __int16 *)i - 1) != a2; i += 2)
  {
    if (!--v4) {
      return BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput(this, 224, a2, a4);
    }
  }
  *uint64_t i = *i & ~a3 | a4;
  return this;
}

uint64_t BlueFin::GlMeSrdRfInit4777::ProgramRegsForVDACCtrl(BlueFin::GlMeSrdRfInit4777 *this)
{
  int v1 = *((unsigned __int8 *)this + 2228);
  if (v1 == 24)
  {
    unsigned int v8 = "m_eDRTestPoint != DRTestPoint4777::DR_TEST_NONE";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1276, "ProgramRegsForVDACCtrl", (char)"m_eDRTestPoint != DRTestPoint4777::DR_TEST_NONE");
    int v9 = 1276;
    goto LABEL_20;
  }
  unsigned int v2 = *((_DWORD *)this + 558);
  if (v2 >= 8)
  {
    unsigned int v8 = "m_ulVDACGain <= 7";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1277, "ProgramRegsForVDACCtrl", (char)"m_ulVDACGain <= 7");
    int v9 = 1277;
    goto LABEL_20;
  }
  if (*((_DWORD *)this + 561))
  {
    unsigned int v8 = "m_eIfTestPoint == IF_TEST_OUTPUT_DISABLED";
    DeviceFaultNotify("glmesrd_rfinit_minnow.cpp", 1278, "ProgramRegsForVDACCtrl", (char)"m_eIfTestPoint == IF_TEST_OUTPUT_DISABLED");
    int v9 = 1278;
LABEL_20:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_rfinit_minnow.cpp", v9, v8);
  }
  int v3 = v1 | (v2 << 6);
  if (*((unsigned char *)this + 2236)) {
    v3 |= 0x200u;
  }
  if (*((unsigned char *)this + 2237)) {
    int v4 = 7168;
  }
  else {
    int v4 = 3072;
  }
  int v5 = v4 | v3;
  if (*((unsigned char *)this + 2238)) {
    v5 |= 0x4000u;
  }
  if (*((unsigned char *)this + 2239)) {
    int v6 = v5 | 0x2000;
  }
  else {
    int v6 = v5;
  }

  return BlueFin::GlMeSrdRfInit4777::Add_wOffsetInput((uint64_t)this, 192, 256, v6);
}

uint64_t BlueFin::GlMeSrdRfInit4777::EncodeDagcGain(BlueFin::GlMeSrdRfInit4777 *this, float a2)
{
  float v2 = __exp10f(a2 / 20.0);
  double v3 = logf(v2) / 0.693147181;
  __int16 v4 = v3 < 0.0;
  int v5 = (int)v3;
  if (v3 == (double)(int)v3) {
    __int16 v4 = 0;
  }
  __int16 v6 = v5 - v4;
  float v7 = (float)(v2 * 64.0) / ldexpf(1.0, (__int16)(v5 - v4));
  double v8 = v7;
  if (v7 <= 0.0)
  {
    if (v7 >= 0.0)
    {
      LOWORD(v10) = 0;
      goto LABEL_9;
    }
    double v9 = -0.5;
  }
  else
  {
    double v9 = 0.5;
  }
  int v10 = (int)(v8 + v9);
LABEL_9:
  double v11 = logf((float)(__int16)v10 * 0.015625) * 32.0 / 0.693147181;
  int v12 = (int)(v11 + -0.5);
  if (v11 >= 0.0) {
    LOWORD(v12) = 0;
  }
  if (v11 > 0.0) {
    LOWORD(v12) = (int)(v11 + 0.5);
  }
  return (unsigned __int16)(v12 + 32 * v6);
}

uint64_t BlueFin::GlEventPump::RemoveActive(uint64_t this, BlueFin::GlActive *a2)
{
  unint64_t v2 = *((unsigned __int8 *)a2 + 88);
  if (v2 >= 0xE)
  {
    DeviceFaultNotify("glhsm_eventpump.cpp", 74, "RemoveActive", (char)"a->myPrio < _DIM(pkgActive)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_eventpump.cpp", 74, "a->myPrio < _DIM(pkgActive)");
  }
  *(void *)(this + 8 * v2) = 0;
  return this;
}

uint64_t BlueFin::GlTimer::fireIn(BlueFin::GlTimer *this, BlueFin::GlActive *a2, char a3, char a4, unsigned int a5)
{
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  uint64_t result = BlueFin::GlTimer::arm(this, a3, a4, a5);
  *((unsigned char *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  return result;
}

uint64_t BlueFin::GlTimer::rearm(BlueFin::GlTimer *this)
{
  if (*((unsigned __int8 *)this + 24) - 3 <= 0xFFFFFFFD)
  {
    DeviceFaultNotify("glhsm_timer.cpp", 105, "rearm", (char)"myState == GL_TIMER_ST_ONE_SHOT || myState == GL_TIMER_ST_PERIODIC");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_timer.cpp", 105, "myState == GL_TIMER_ST_ONE_SHOT || myState == GL_TIMER_ST_PERIODIC");
  }
  unint64_t v2 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 48))();
  v2[273] = result;
  *((_DWORD *)this + 5) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  return result;
}

uint64_t BlueFin::GlTimer::rearm(BlueFin::GlTimer *this, int a2)
{
  if (*((unsigned __int8 *)this + 24) - 3 <= 0xFFFFFFFD)
  {
    DeviceFaultNotify("glhsm_timer.cpp", 120, "rearm", (char)"myState == GL_TIMER_ST_ONE_SHOT || myState == GL_TIMER_ST_PERIODIC");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glhsm_timer.cpp", 120, "myState == GL_TIMER_ST_ONE_SHOT || myState == GL_TIMER_ST_PERIODIC");
  }
  __int16 v4 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v4 + 48))();
  v4[273] = result;
  int v6 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  *((_DWORD *)this + 5) = v6;
  if (*((unsigned char *)this + 24) == 1) {
    *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  }
  else {
    *((_DWORD *)this + 5) = v6 + a2 - *((_DWORD *)this + 4);
  }
  return result;
}

const char *BlueFin::GnssConstellationMaskPrinter::constellation2string(int a1)
{
  if (a1 > 7) {
    return "GL_GNSS_unknown";
  }
  __int16 v4 = "NIC";
  uint64_t result = "GPS";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return "SBAS";
    case 2:
      return "GLNS";
    case 3:
      return "QZSS";
    case 5:
      __int16 v4 = "BDS";
      goto LABEL_11;
    case 7:
      goto LABEL_11;
    default:
      __int16 v4 = "<->";
      if (a1 == 6) {
        __int16 v4 = "GAL";
      }
LABEL_11:
      uint64_t result = v4;
      break;
  }
  return result;
}

uint64_t BlueFin::GlOrbitInfoValidityPrinter::FormatTime(BlueFin::GlOrbitInfoValidityPrinter *this, size_t __size, unsigned int a3, unsigned int a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    strlcpy((char *)this, "invalid", __size);
    return 0;
  }
  else
  {
    if ((a3 & 0x80000000) != 0)
    {
      *(unsigned char *)this = 45;
      this = (BlueFin::GlOrbitInfoValidityPrinter *)((char *)this + 1);
      __std::string::size_type size = (__size - 1);
      a3 = -a3;
    }
    return BlueFin::GlOrbitInfoValidityPrinter::FormatTime(this, (char *)__size, a3, a4);
  }
}

uint64_t BlueFin::GlOrbitInfoValidityPrinter::Print(BlueFin::GlOrbitInfoValidityPrinter *this, const char *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v3 = *(unsigned __int8 **)this;
  BlueFin::GnssConstellationMaskPrinter::constellation2string(**(unsigned __int8 **)this);
  BlueFin::GlOrbitInfoValidityPrinter::FormatTime((BlueFin::GlOrbitInfoValidityPrinter *)v9, 0x40uLL, *((_DWORD *)v3 + 2), v4);
  BlueFin::GlOrbitInfoValidityPrinter::FormatTime((BlueFin::GlOrbitInfoValidityPrinter *)v8, (char *)0x40, *(unsigned int *)(*(void *)this + 4), v5);
  if (BlueFin::GlOrbitInfoValidityPrinter::FormatTime((BlueFin::GlOrbitInfoValidityPrinter *)v10, 0x40uLL, *(_DWORD *)(*(void *)this + 12), v6))return GlCustomLog(14, "<glAid> %-4s %-4s %4d %8s %8s %8s\n"); {
  else
  }
    return GlCustomLog(14, "<glAid> %-4s %-4s %4d %8s %8s\n");
}

void BlueFin::GlArray::~GlArray(BlueFin::GlArray *this)
{
}

BOOL BlueFin::GlArray::Missing(BlueFin::GlArray *this, int a2)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + a2 - *((unsigned __int8 *)this + 36)) == 255;
}

BOOL BlueFin::GlArray::IsEmpty(BlueFin::GlArray *this)
{
  return *((unsigned __int8 *)this + 39) + 1 == *((unsigned __int8 *)this + 38);
}

BOOL BlueFin::GlArray::IsFull(BlueFin::GlArray *this)
{
  return *((unsigned __int8 *)this + 39) == 255;
}

uint64_t BlueFin::GlArray::Count(BlueFin::GlArray *this)
{
  return (*((unsigned char *)this + 38) + ~*((unsigned char *)this + 39));
}

BOOL BlueFin::GlAscii85::Encode(BlueFin::GlAscii85 *this, char *a2, const unsigned __int8 *a3, unsigned int a4, unsigned int a5, unsigned int *a6, unsigned int *a7, int a8)
{
  int v8 = *((_DWORD *)this + 5);
  if (v8) {
    return (v8 & 1) == 0;
  }
  unint64_t v9 = a5;
  unint64_t v10 = a4;
  *((_DWORD *)this + 7) = 1;
  unsigned int v12 = *((_DWORD *)this + 9);
  unsigned int v11 = *((_DWORD *)this + 10);
  while (v12 != v11)
  {
    unint64_t v13 = *a6;
    if (v13 >= a4) {
      goto LABEL_7;
    }
    char v14 = *((unsigned char *)this + v12 + 5);
    *a6 = v13 + 1;
    a2[v13] = v14;
    unsigned int v11 = *((_DWORD *)this + 10);
    unsigned int v12 = (*((_DWORD *)this + 9) + 1) & 7;
    *((_DWORD *)this + 9) = v12;
  }
  unsigned int v11 = v12;
LABEL_7:
  if ((((_BYTE)v11 - (_BYTE)v12) & 7u) > 2) {
    goto LABEL_48;
  }
  while (1)
  {
    unint64_t v15 = *a7;
    if (v15 >= v9)
    {
      if (!a8 || *((_DWORD *)this + 6)) {
        goto LABEL_48;
      }
      LODWORD(v16) = *((_DWORD *)this + 8);
    }
    else
    {
      LODWORD(v16) = *((_DWORD *)this + 8);
      if (v16 < 4)
      {
        int v17 = *((_DWORD *)this + 4);
        do
        {
          *a7 = v15 + 1;
          int v18 = a3[v15];
          uint64_t v19 = *((unsigned int *)this + 8);
          *((_DWORD *)this + 8) = v19 + 1;
          *((unsigned char *)this + v19) = v18;
          int v17 = BlueFin::GlAscii85::m_aucCrcLookupTable[v17 ^ v18];
          *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v17;
          LODWORD(v16) = *((_DWORD *)this + 8);
          unint64_t v15 = *a7;
        }
        while (v16 <= 3 && v15 < v9);
      }
      if (!a8) {
        goto LABEL_26;
      }
    }
    if (v15 >= v9)
    {
      while (1)
      {
        uint64_t v16 = *((unsigned int *)this + 8);
        if (v16 > 3) {
          break;
        }
        if (*((_DWORD *)this + 6)) {
          goto LABEL_26;
        }
        char v21 = ~*((unsigned char *)this + 16);
        *((_DWORD *)this + 8) = v16 + 1;
        *((unsigned char *)this + v16) = v21;
        ++*((_DWORD *)this + 6);
        if (*a7 < v9)
        {
          LODWORD(v16) = *((_DWORD *)this + 8);
          goto LABEL_26;
        }
      }
      unsigned int v11 = *((_DWORD *)this + 10);
      goto LABEL_31;
    }
LABEL_26:
    char v22 = v16 > 3 ? 1 : a8;
    unsigned int v11 = *((_DWORD *)this + 10);
    if (!v16 || (v22 & 1) == 0) {
      break;
    }
LABEL_31:
    unsigned int v23 = bswap32(*(_DWORD *)this);
    if (v16 == 4 && v23 == 0)
    {
      *((unsigned char *)this + v11 + 5) = 122;
      unsigned int v25 = *((_DWORD *)this + 10) + 1;
    }
    else
    {
      unsigned int v25 = ((_BYTE)v11 + 4) & 7;
      int v26 = 5;
      do
      {
        unsigned int v27 = (v23 >> 7) + (v23 >> 8) + (((v23 >> 7) + (v23 >> 8)) >> 8);
        unsigned int v28 = v27 + HIWORD(v27) + ((193 * (v23 - 85 * (v27 + HIWORD(v27)))) >> 14);
        *((unsigned char *)this + v25 + 5) = BlueFin::GlAscii85::m_aucEncodeTable[(v23 - 85 * v28)];
        unsigned int v25 = ((_BYTE)v25 - 1) & 7;
        unsigned int v23 = v28;
        --v26;
      }
      while (v26);
      LOBYTE(v25) = v16 + v25 + 2;
    }
    unsigned int v11 = v25 & 7;
    *((_DWORD *)this + 10) = v11;
    unsigned int v12 = *((_DWORD *)this + 9);
    if (v12 == v11)
    {
      unsigned int v12 = v11;
    }
    else
    {
      while (1)
      {
        unint64_t v29 = *a6;
        if (v29 >= v10) {
          break;
        }
        char v30 = *((unsigned char *)this + v12 + 5);
        *a6 = v29 + 1;
        a2[v29] = v30;
        unsigned int v11 = *((_DWORD *)this + 10);
        unsigned int v12 = (*((_DWORD *)this + 9) + 1) & 7;
        *((_DWORD *)this + 9) = v12;
        if (v12 == v11)
        {
          unsigned int v11 = v12;
          break;
        }
      }
    }
    *((_DWORD *)this + 8) = 0;
    *(_DWORD *)this = 0;
    if ((((_BYTE)v11 - (_BYTE)v12) & 7u) >= 3) {
      goto LABEL_48;
    }
  }
  unsigned int v12 = *((_DWORD *)this + 9);
LABEL_48:
  if (v12 != v11)
  {
    do
    {
      unint64_t v31 = *a6;
      if (v31 >= v10) {
        break;
      }
      char v32 = *((unsigned char *)this + v12 + 5);
      *a6 = v31 + 1;
      a2[v31] = v32;
      int v33 = *((_DWORD *)this + 10);
      unsigned int v12 = (*((_DWORD *)this + 9) + 1) & 7;
      *((_DWORD *)this + 9) = v12;
    }
    while (v12 != v33);
  }
  int v8 = *((_DWORD *)this + 5);
  if (a8)
  {
    if (*a7 == v9 && *a6 < v10)
    {
      v8 |= 2u;
      *((_DWORD *)this + 5) = v8;
    }
  }
  return (v8 & 1) == 0;
}

BOOL BlueFin::GlAscii85::Decode(BlueFin::GlAscii85 *this, const char *a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, unsigned int *a6, unsigned int *a7, int a8)
{
  if (*((_DWORD *)this + 5))
  {
    return (*((_DWORD *)this + 5) & 1) == 0;
  }
  else
  {
    *((_DWORD *)this + 7) = 1;
    unsigned int v14 = *((_DWORD *)this + 8);
    if (!v14)
    {
      *((unsigned char *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 85;
      *(_DWORD *)this = 1431655765;
    }
    unsigned int v15 = a4 - (a8 ^ 1);
    unsigned int v16 = *a7;
    unsigned int v17 = *a6;
    if (*a7 < a5 && v17 <= v15)
    {
      int v45 = a8;
      int v19 = a5 + 1;
      int v46 = a2;
      do
      {
        if (v14 <= 4)
        {
          while (v17 <= v15)
          {
            if (v17 >= a4)
            {
              if (v14 == 1 || !v45) {
                goto LABEL_40;
              }
              ++*((_DWORD *)this + 7);
              break;
            }
            unsigned int v20 = v17 + 1;
            *a6 = v17 + 1;
            uint64_t v21 = a2[v17];
            if (v21 == 122 && !*((_DWORD *)this + 8))
            {
              *((unsigned char *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
              *(_DWORD *)this = 0;
              *((_DWORD *)this + 8) = 5;
              goto LABEL_27;
            }
            int v22 = BlueFin::GlAscii85::m_aucDecodeTable[v21];
            if (v22 != 86)
            {
              if (v22 == 85) {
                goto LABEL_40;
              }
              uint64_t v23 = *((unsigned int *)this + 8);
              *((_DWORD *)this + 8) = v23 + 1;
              *((unsigned char *)this + v23) = v22;
              unsigned int v20 = *a6;
            }
            unsigned int v14 = *((_DWORD *)this + 8);
            unsigned int v17 = v20;
            if (v14 >= 5) {
              goto LABEL_27;
            }
          }
          if (!v14) {
            break;
          }
          uint64_t v24 = a5;
          memset((char *)this + v14, 85, 4 - v14 + 1);
          a2 = v46;
          a5 = v24;
          if (*((_DWORD *)this + 7) == 1)
          {
            unsigned int v14 = *((_DWORD *)this + 8);
            break;
          }
        }
LABEL_27:
        unsigned int v25 = *((_DWORD *)this + 9);
        if (((*((_DWORD *)this + 10) - v25) & 4) != 0)
        {
          unsigned int v14 = *((_DWORD *)this + 8);
          if (v19 - *a7 < v14) {
            break;
          }
          if (v14 >= 2)
          {
            unsigned int v26 = 1;
            do
            {
              unsigned __int8 v27 = *((unsigned char *)this + v25 + 5);
              uint64_t v28 = *a7;
              *a7 = v28 + 1;
              a3[v28] = v27;
              LODWORD(v28) = *((_DWORD *)this + 8);
              unsigned int v25 = (*((_DWORD *)this + 9) + 1) & 7;
              *((_DWORD *)this + 9) = v25;
              ++v26;
            }
            while (v26 < v28);
          }
        }
        unsigned int v29 = *((unsigned __int8 *)this + 3)
            + 85
            * (*((unsigned __int8 *)this + 2) + 85 * (*((unsigned __int8 *)this + 1) + 85 * *(unsigned __int8 *)this));
        if (v29 >= 0x3030304 || (int v30 = 85 * v29, v31 = *((unsigned __int8 *)this + 4), __CFADD__(v30, v31)))
        {
LABEL_40:
          BOOL result = 0;
          *((_DWORD *)this + 5) = 3;
          return result;
        }
        int v32 = *((_DWORD *)this + 8) - 1;
        *((_DWORD *)this + 8) = v32;
        if (v32)
        {
          int v33 = v30 + v31;
          unsigned int v34 = *((_DWORD *)this + 10);
          do
          {
            *((unsigned char *)this + v34 + 5) = HIBYTE(v33);
            uint64_t v35 = *((unsigned int *)this + 10);
            *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlAscii85::m_aucCrcLookupTable[*((_DWORD *)this + 4) ^ *((unsigned __int8 *)this + v35 + 5)];
            v33 <<= 8;
            unsigned int v34 = ((_BYTE)v35 + 1) & 7;
            *((_DWORD *)this + 10) = v34;
            int v36 = *((_DWORD *)this + 8) - 1;
            *((_DWORD *)this + 8) = v36;
          }
          while (v36);
        }
        unsigned int v14 = 0;
        if (*a7 >= a5) {
          break;
        }
        unsigned int v17 = *a6;
      }
      while (*a6 <= v15);
      unsigned int v16 = *a7;
      a8 = v45;
    }
    unsigned int v38 = *((_DWORD *)this + 9);
    BOOL v8 = v14 == 0;
    int v39 = (*((_DWORD *)this + 10) - v38) & 7;
    if (!v8) {
      ++v39;
    }
    if (v16 < a5)
    {
      if (v39 >= 1) {
        int v40 = 1;
      }
      else {
        int v40 = v39;
      }
      int v41 = v40 - 1;
      while (v39 >= 2)
      {
        --v39;
        unsigned __int8 v42 = *((unsigned char *)this + v38 + 5);
        *a7 = v16 + 1;
        a3[v16] = v42;
        unsigned int v38 = (*((_DWORD *)this + 9) + 1) & 7;
        *((_DWORD *)this + 9) = v38;
        unsigned int v16 = *a7;
        if (*a7 >= a5) {
          goto LABEL_53;
        }
      }
      int v39 = v41;
    }
LABEL_53:
    int v43 = *((_DWORD *)this + 5);
    if (a8)
    {
      int v44 = *((_DWORD *)this + 5);
      if (v39 <= 1)
      {
        LOBYTE(v4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v43 | 2;
        *((_DWORD *)this + 5) = v43 | 2;
        if (*((_DWORD *)this + 4) != 125)
        {
          LOBYTE(v4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v43 | 3;
          *((_DWORD *)this + 5) = v43 | 3;
        }
      }
    }
    else
    {
      int v44 = *((_DWORD *)this + 5);
    }
    return (v44 & 1) == 0;
  }
}

unint64_t BlueFin::GlUtlB64::b64_encode_(unsigned __int8 *a1, unint64_t a2, unsigned char *a3, unint64_t a4, unsigned int a5, _DWORD *a6)
{
  float v7 = a3;
  unint64_t v8 = a2;
  unint64_t v9 = (2 * (((a2 + 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  *a6 = 0;
  if (a5) {
    unint64_t v9 = v9 + 2 * ((v9 + a5 - 1) / a5) - 2;
  }
  if (a3)
  {
    if (v9 <= a4)
    {
      if (a2 >= 3)
      {
        uint64_t v10 = 0;
        do
        {
          unsigned int v11 = v7;
          unint64_t v12 = *a1;
          unint64_t v13 = v12 >> 2;
          unint64_t v14 = a1[1];
          unint64_t v15 = (v14 >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v12 & 3));
          unint64_t v16 = a1[2];
          *float v7 = BlueFin::GlUtlB64::b64_chars[v13];
          v7[1] = BlueFin::GlUtlB64::b64_chars[v15];
          v7[2] = BlueFin::GlUtlB64::b64_chars[(v16 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (v14 & 0xF))];
          v7 += 4;
          void v11[3] = BlueFin::GlUtlB64::b64_chars[v16 & 0x3F];
          v10 += 4;
          if (v10 == a5 && v7 != &a3[a4])
          {
            uint64_t v10 = 0;
            *((_WORD *)v11 + 2) = 2573;
            float v7 = v11 + 6;
          }
          a1 += 3;
          v8 -= 3;
        }
        while (v8 > 2);
      }
      if (v8)
      {
        for (uint64_t i = 0; i != v8; ++i)
          v19[i] = a1[i];
        if ((unint64_t)(i - 1) < 2) {
          bzero(&v19[v8], v8 ^ 3);
        }
        BlueFin::GlUtlB64::b64_encode_(v19, 3, v7, 12, 0, a6);
        memset(&v7[v8 + 1], 61, v8 ^ 3);
      }
    }
    else
    {
      unint64_t v9 = 0;
      *a6 = 1;
    }
  }
  return v9;
}

uint64_t BlueFin::GlBitBuffer::InitializeForRead(uint64_t this, const unsigned int *a2, int a3)
{
  if ((a3 & 3) != 0)
  {
    DeviceFaultNotify("glutl_bitbuffer.cpp", 83, "InitializeForRead", (char)"(ulChars & 0x03) == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", 83, "(ulChars & 0x03) == 0");
  }
  *(void *)this = 0;
  *(void *)(this + 8) = a2;
  *(unsigned char *)(this + 16) = 1;
  *(_DWORD *)(this + 36) = 0;
  *(void *)(this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (8 * a3);
  *(_DWORD *)(this + 20) = 8 * a3;
  *(unsigned char *)(this + 40) = 0;
  return this;
}

uint64_t BlueFin::GlBitBuffer::Reset(uint64_t this)
{
  if (!*(unsigned char *)(this + 40))
  {
    DeviceFaultNotify("glutl_bitbuffer.cpp", 154, "Reset", (char)"m_bMarked");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_bitbuffer.cpp", 154, "m_bMarked");
  }
  *(_DWORD *)(this + 28) = *(_DWORD *)(this + 32);
  return this;
}

BlueFin::GlBitBuffer *BlueFin::GlBitBuffer::Put(BlueFin::GlBitBuffer *this, BlueFin::GlBitBuffer *a2, unsigned int a3)
{
  if (a3)
  {
    unsigned int v4 = a3;
    do
    {
      if (v4 >= 0x20) {
        unsigned int v6 = 32;
      }
      else {
        unsigned int v6 = v4;
      }
      unsigned int v7 = BlueFin::GlBitBuffer::GetU(a2, v6);
      BlueFin::GlBitBuffer::PutU((uint64_t *)this, v7, v6);
      v4 -= v6;
    }
    while (v4);
  }
  return this;
}

BOOL BlueFin::GlBitBuffer::CompareBits(BlueFin::GlBitBuffer *this, BlueFin::GlBitBuffer *a2, BlueFin::GlBitBuffer *a3, const unsigned int *a4, const unsigned int *a5, const unsigned int *a6)
{
  if ((int)a6 < 1) {
    return 1;
  }
  unint64_t v9 = 0;
  unint64_t v10 = a6;
  do
  {
    BlueFin::GlBitBuffer::Position((uint64_t)this, *((_DWORD *)a3 + v9));
    BlueFin::GlBitBuffer::Position((uint64_t)a2, a4[v9]);
    int v11 = a5[v9];
    if (v11 < 1)
    {
      BOOL result = 1;
    }
    else
    {
      do
      {
        if (v11 >= 32) {
          unsigned __int8 v12 = 32;
        }
        else {
          unsigned __int8 v12 = v11;
        }
        unsigned int v13 = v12;
        int v14 = BlueFin::GlBitBuffer::GetU(this, v12);
        BOOL v15 = v14 == BlueFin::GlBitBuffer::GetU(a2, v13);
        BOOL result = v15;
        if (!v15) {
          break;
        }
        BOOL v17 = v11 > 0x20;
        v11 -= 32;
      }
      while (v17);
    }
    if (!result) {
      break;
    }
    ++v9;
  }
  while (v9 < v10);
  return result;
}

BlueFin::GlBitBuffer *BlueFin::GlBitBuffer::TransferBits(BlueFin::GlBitBuffer *this, BlueFin::GlBitBuffer *a2, BlueFin::GlBitBuffer *a3, unsigned int *a4, unsigned int *a5, const unsigned int *a6)
{
  if ((int)a6 >= 1)
  {
    unint64_t v10 = this;
    uint64_t v11 = a6;
    do
    {
      unsigned int v12 = *(_DWORD *)a3;
      a3 = (BlueFin::GlBitBuffer *)((char *)a3 + 4);
      BlueFin::GlBitBuffer::Position((uint64_t)v10, v12);
      unsigned int v13 = *a4++;
      BlueFin::GlBitBuffer::Position((uint64_t)a2, v13);
      unsigned int v14 = *a5++;
      this = BlueFin::GlBitBuffer::Put(v10, a2, v14);
      --v11;
    }
    while (v11);
  }
  return this;
}

uint64_t BlueFin::GlSysLogEntry::PutS8(BlueFin::GlSysLogEntry *this, char a2)
{
  unsigned int v4 = *((unsigned __int16 *)this + 11);
  if ((*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this) <= v4)
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 86, "PutS8", (char)"m_sDataSize + sizeof(GlIntS8) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 86, "m_sDataSize + sizeof(GlIntS8) <= BufSize()");
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v6 = *((unsigned __int16 *)this + 11);
  *((_WORD *)this + 11) = v6 + 1;
  *(unsigned char *)(result + v6) = a2;
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutU8(BlueFin::GlSysLogEntry *this, char a2)
{
  unsigned int v4 = *((unsigned __int16 *)this + 11);
  if ((*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this) <= v4)
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 102, "PutU8", (char)"m_sDataSize + sizeof(GlIntU8) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 102, "m_sDataSize + sizeof(GlIntU8) <= BufSize()");
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v6 = *((unsigned __int16 *)this + 11);
  *((_WORD *)this + 11) = v6 + 1;
  *(unsigned char *)(result + v6) = a2;
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutS16(BlueFin::GlSysLogEntry *this, __int16 a2)
{
  unint64_t v4 = *((unsigned __int16 *)this + 11) + 2;
  if (v4 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 150, "PutS16", (char)"m_sDataSize + sizeof(GlIntS16) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 150, "m_sDataSize + sizeof(GlIntS16) <= BufSize()");
  }
  uint64_t v5 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v6 = *((unsigned __int16 *)this + 11);
  *((_WORD *)this + 11) = v6 + 1;
  *(unsigned char *)(v5 + v6) = a2;
  uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v8 = *((unsigned __int16 *)this + 11);
  *((_WORD *)this + 11) = v8 + 1;
  *(unsigned char *)(result + v8) = HIBYTE(a2);
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutU16(BlueFin::GlSysLogEntry *this, __int16 a2)
{
  unint64_t v4 = *((unsigned __int16 *)this + 11) + 2;
  if (v4 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 170, "PutU16", (char)"m_sDataSize + sizeof(GlIntU16) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 170, "m_sDataSize + sizeof(GlIntU16) <= BufSize()");
  }
  uint64_t v5 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v6 = *((unsigned __int16 *)this + 11);
  *((_WORD *)this + 11) = v6 + 1;
  *(unsigned char *)(v5 + v6) = a2;
  uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
  uint64_t v8 = *((unsigned __int16 *)this + 11);
  *((_WORD *)this + 11) = v8 + 1;
  *(unsigned char *)(result + v8) = HIBYTE(a2);
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutGlSet(BlueFin::GlSysLogEntry *this, const BlueFin::GlSetBase *a2)
{
  int v4 = 4 * (*((unsigned char *)a2 + 8) & 0x3F) + *((unsigned __int16 *)this + 11);
  if (v4 >= (*(int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 190, "PutGlSet", (char)"(m_sDataSize + otBase.GetMaxByteSize()+1) <= (GlIntS32) BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 190, "(m_sDataSize + otBase.GetMaxByteSize()+1) <= (GlIntS32) BufSize()");
  }
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t result = BlueFin::GlSysLogEntry::PutU8(this, 4 * (v5 & 0x3Fu));
  if (4 * (v5 & 0x3F))
  {
    int v7 = 0;
    unsigned int v8 = v5 & 0x3F;
    do
    {
      int ULong = BlueFin::GlSetBase::GetULong(a2, v7);
      uint64_t result = BlueFin::GlSysLogEntry::PutU32(this, ULong);
      ++v7;
    }
    while (v8 > v7);
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutU32(BlueFin::GlSysLogEntry *this, int a2)
{
  int v8 = a2;
  unint64_t v3 = *((unsigned __int16 *)this + 11) + 4;
  if (v3 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 210, "PutU32", (char)"m_sDataSize + sizeof(GlIntU32) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 210, "m_sDataSize + sizeof(GlIntU32) <= BufSize()");
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v5 = *((unsigned char *)&v8 + i);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 11);
    *((_WORD *)this + 11) = v7 + 1;
    *(unsigned char *)(result + v7) = v5;
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutS32(BlueFin::GlSysLogEntry *this, int a2)
{
  int v8 = a2;
  unint64_t v3 = *((unsigned __int16 *)this + 11) + 4;
  if (v3 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 228, "PutS32", (char)"m_sDataSize + sizeof(GlIntS32) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 228, "m_sDataSize + sizeof(GlIntS32) <= BufSize()");
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v5 = *((unsigned char *)&v8 + i);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 11);
    *((_WORD *)this + 11) = v7 + 1;
    *(unsigned char *)(result + v7) = v5;
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutU64(BlueFin::GlSysLogEntry *this, uint64_t a2)
{
  uint64_t v8 = a2;
  unint64_t v3 = *((unsigned __int16 *)this + 11) + 8;
  if (v3 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 247, "PutU64", (char)"m_sDataSize + sizeof(GlIntU64) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 247, "m_sDataSize + sizeof(GlIntU64) <= BufSize()");
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    char v5 = *((unsigned char *)&v8 + i);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 11);
    *((_WORD *)this + 11) = v7 + 1;
    *(unsigned char *)(result + v7) = v5;
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutS64(BlueFin::GlSysLogEntry *this, uint64_t a2)
{
  uint64_t v8 = a2;
  unint64_t v3 = *((unsigned __int16 *)this + 11) + 8;
  if (v3 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 267, "PutS64", (char)"m_sDataSize + sizeof(GlIntS64) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 267, "m_sDataSize + sizeof(GlIntS64) <= BufSize()");
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    char v5 = *((unsigned char *)&v8 + i);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 11);
    *((_WORD *)this + 11) = v7 + 1;
    *(unsigned char *)(result + v7) = v5;
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutBuffer(BlueFin::GlSysLogEntry *this, const unsigned __int8 *a2, int a3)
{
  unsigned int v6 = a3 + *((unsigned __int16 *)this + 11) + 2;
  if (v6 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 293, "PutBuffer", (char)"m_sDataSize + usSize + sizeof(GlIntU16) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 293, "m_sDataSize + usSize + sizeof(GlIntU16) <= BufSize()");
  }
  uint64_t result = BlueFin::GlSysLogEntry::PutU16(this, a3);
  if (a3)
  {
    int v8 = 0;
    do
    {
      unsigned __int8 v9 = a2[(__int16)v8];
      uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
      uint64_t v10 = *((unsigned __int16 *)this + 11);
      *((_WORD *)this + 11) = v10 + 1;
      *(unsigned char *)(result + v10) = v9;
      ++v8;
    }
    while (a3 > (__int16)v8);
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::GetGlSet96BitsObsolete@<X0>(BlueFin::GlSysLogEntry *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12) = 0;
  uint64_t v3 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 3;
  *(_DWORD *)(a2 + 20) = 0;
  if (*((unsigned __int16 *)this + 10) + 12 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 388, "GetGlSet96BitsObsolete", (char)"m_sReadIdx + otValue.GetMaxByteSize() <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 388, "m_sReadIdx + otValue.GetMaxByteSize() <= m_sDataSize");
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v6 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v7 + 1;
    *(unsigned char *)(v3 + i) = *(unsigned char *)(v6 + v7);
  }
  for (uint64_t j = 0; j != 4; ++j)
  {
    uint64_t v9 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v10 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v10 + 1;
    *(unsigned char *)(a2 + 16 + j) = *(unsigned char *)(v9 + v10);
  }
  uint64_t v11 = 0;
  uint64_t v12 = a2 + 20;
  do
  {
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v14 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v14 + 1;
    *(unsigned char *)(v12 + v11++) = *(unsigned char *)(result + v14);
  }
  while (v11 != 4);
  return result;
}

uint64_t BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete@<X0>(BlueFin::GlSysLogEntry *this@<X0>, uint64_t a2@<X8>)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 8 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 440, "GetGlSet64BitsObsolete", (char)"m_sReadIdx + 2*sizeof(GlIntU32) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 440, "m_sReadIdx + 2*sizeof(GlIntU32) <= m_sDataSize");
  }
  uint64_t v4 = 0;
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 3;
  *(_DWORD *)(a2 + 20) = 0;
  do
  {
    uint64_t v5 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v6 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v6 + 1;
    *(unsigned char *)(a2 + 12 + v4++) = *(unsigned char *)(v5 + v6);
  }
  while (v4 != 4);
  uint64_t v7 = 0;
  uint64_t v8 = a2 + 16;
  do
  {
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v10 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v10 + 1;
    *(unsigned char *)(v8 + v7++) = *(unsigned char *)(result + v10);
  }
  while (v7 != 4);
  return result;
}

uint64_t BlueFin::GlSysLogEntry::GetS64(BlueFin::GlSysLogEntry *this)
{
  if ((unint64_t)*((unsigned __int16 *)this + 10) + 8 > *((unsigned __int16 *)this + 11))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 552, "GetS64", (char)"m_sReadIdx + sizeof(GlIntS64) <= m_sDataSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 552, "m_sReadIdx + sizeof(GlIntS64) <= m_sDataSize");
  }
  uint64_t v2 = 0;
  uint64_t v6 = 0;
  do
  {
    uint64_t v3 = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v4 = *((unsigned __int16 *)this + 10);
    *((_WORD *)this + 10) = v4 + 1;
    *((unsigned char *)&v6 + v2++) = *(unsigned char *)(v3 + v4);
  }
  while (v2 != 8);
  return v6;
}

uint64_t BlueFin::GlSysLogEntry::PutF32(BlueFin::GlSysLogEntry *this, float a2)
{
  float v8 = a2;
  unint64_t v3 = *((unsigned __int16 *)this + 11) + 4;
  if (v3 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 622, "PutF32", (char)"m_sDataSize + sizeof(fTmp) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 622, "m_sDataSize + sizeof(fTmp) <= BufSize()");
  }
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v5 = *((unsigned char *)&v8 + i);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 11);
    *((_WORD *)this + 11) = v7 + 1;
    *(unsigned char *)(result + v7) = v5;
  }
  return result;
}

uint64_t BlueFin::GlSysLogEntry::PutD64(BlueFin::GlSysLogEntry *this, double a2)
{
  double v8 = a2;
  unint64_t v3 = *((unsigned __int16 *)this + 11) + 8;
  if (v3 > (*(unsigned int (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 40))(this))
  {
    DeviceFaultNotify("glutl_slog_codec.cpp", 678, "PutD64", (char)"m_sDataSize + sizeof(dTmp) <= BufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_slog_codec.cpp", 678, "m_sDataSize + sizeof(dTmp) <= BufSize()");
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    char v5 = *((unsigned char *)&v8 + i);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlSysLogEntry *))(*(void *)this + 24))(this);
    uint64_t v7 = *((unsigned __int16 *)this + 11);
    *((_WORD *)this + 11) = v7 + 1;
    *(unsigned char *)(result + v7) = v5;
  }
  return result;
}

uint64_t BlueFin::GlFormat::glsprintf(BlueFin::GlFormat *this, char *a2, const char *a3, ...)
{
  va_start(va, a3);
  return BlueFin::GlFormat::gl_format(this, (char *)0xFFFF, (unsigned __int8 *)a2, va, 0, (char *)1, (void *)1);
}

unsigned int *BlueFin::GlStream::PutS32(unsigned int *this, unsigned int a2)
{
  if (this[6])
  {
    BOOL v15 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 88, "PutS32", (char)"m_uiBitOffset == 0");
    int v16 = 88;
    goto LABEL_11;
  }
  if (this[7])
  {
    BOOL v15 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 89, "PutS32", (char)"m_uiBitsRemainingInWord == 0");
    int v16 = 89;
    goto LABEL_11;
  }
  uint64_t v2 = *this;
  if ((int)v2 + 4 > this[4])
  {
    BOOL v15 = "m_uiOffset+4<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 91, "PutS32", (char)"m_uiOffset+4<=m_uiMaxOffset");
    int v16 = 91;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v16, v15);
  }
  if (*((unsigned char *)this + 20))
  {
    uint64_t v3 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v3 + v2) = HIBYTE(a2);
    uint64_t v4 = *((void *)this + 1);
    uint64_t v5 = *this;
    *this = v5 + 1;
    *(unsigned char *)(v4 + v5) = BYTE2(a2);
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = *this;
    *this = v7 + 1;
    *(unsigned char *)(v6 + v7) = BYTE1(a2);
  }
  else
  {
    uint64_t v8 = *((void *)this + 1);
    *this = v2 + 1;
    *(unsigned char *)(v8 + v2) = a2;
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *this;
    *this = v10 + 1;
    *(unsigned char *)(v9 + v10) = BYTE1(a2);
    uint64_t v11 = *((void *)this + 1);
    uint64_t v12 = *this;
    *this = v12 + 1;
    *(unsigned char *)(v11 + v12) = BYTE2(a2);
    a2 >>= 24;
  }
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = *this;
  *this = v14 + 1;
  *(unsigned char *)(v13 + v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  return this;
}

unsigned int *BlueFin::GlStream::PutF32(BlueFin::GlStream *this, float a2)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v3 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 188, "PutF32", (char)"m_uiBitOffset == 0");
    int v4 = 188;
    goto LABEL_10;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v3 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 189, "PutF32", (char)"m_uiBitsRemainingInWord == 0");
    int v4 = 189;
    goto LABEL_10;
  }
  if ((*(_DWORD *)this + 4) > *((_DWORD *)this + 4))
  {
    uint64_t v3 = "m_uiOffset+4<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 191, "PutF32", (char)"m_uiOffset+4<=m_uiMaxOffset");
    int v4 = 191;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v4, v3);
  }

  return BlueFin::GlStream::PutU32((unsigned int *)this, LODWORD(a2));
}

void *BlueFin::GlStream::PutStr(BlueFin::GlStream *this, unsigned __int8 *a2, int a3)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v7 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 199, "PutStr", (char)"m_uiBitOffset == 0");
    int v8 = 199;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v7 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 200, "PutStr", (char)"m_uiBitsRemainingInWord == 0");
    int v8 = 200;
    goto LABEL_8;
  }
  uint64_t v5 = *(unsigned int *)this;
  if ((v5 + a3) > *((_DWORD *)this + 4))
  {
    uint64_t v7 = "m_uiOffset+size<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 202, "PutStr", (char)"m_uiOffset+size<=m_uiMaxOffset");
    int v8 = 202;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v8, v7);
  }
  uint64_t result = memcpy((void *)(*((void *)this + 1) + v5), a2, a3);
  *(_DWORD *)this += a3;
  return result;
}

uint64_t BlueFin::GlStream::GetS08(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    int v4 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 211, "GetS08", (char)"m_uiBitOffset == 0");
    int v5 = 211;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 7))
  {
    int v4 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 212, "GetS08", (char)"m_uiBitsRemainingInWord == 0");
    int v5 = 212;
    goto LABEL_8;
  }
  uint64_t v1 = *(unsigned int *)this;
  if ((v1 + 1) > *((_DWORD *)this + 4))
  {
    int v4 = "m_uiOffset+1<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 214, "GetS08", (char)"m_uiOffset+1<=m_uiMaxOffset");
    int v5 = 214;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v5, v4);
  }
  uint64_t v2 = *((void *)this + 1);
  *(_DWORD *)this = v1 + 1;
  return *(char *)(v2 + v1);
}

float BlueFin::GlStream::GetF32(BlueFin::GlStream *this)
{
  if (*((_DWORD *)this + 6))
  {
    uint64_t v2 = "m_uiBitOffset == 0";
    DeviceFaultNotify("glutl_stream.cpp", 244, "GetF32", (char)"m_uiBitOffset == 0");
    int v3 = 244;
    goto LABEL_8;
  }
  if (*((_DWORD *)this + 7))
  {
    uint64_t v2 = "m_uiBitsRemainingInWord == 0";
    DeviceFaultNotify("glutl_stream.cpp", 245, "GetF32", (char)"m_uiBitsRemainingInWord == 0");
    int v3 = 245;
    goto LABEL_8;
  }
  if ((*(_DWORD *)this + 4) > *((_DWORD *)this + 4))
  {
    uint64_t v2 = "m_uiOffset+4<=m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 247, "GetF32", (char)"m_uiOffset+4<=m_uiMaxOffset");
    int v3 = 247;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v3, v2);
  }
  LODWORD(result) = BlueFin::GlStream::GetU32(this);
  return result;
}

uint64_t BlueFin::GlStream::CarpGetBits(BlueFin::GlStream *this, unsigned int a2, unsigned int a3)
{
  if (!a2)
  {
    int v4 = "ulNumBits > 0";
    DeviceFaultNotify("glutl_stream.cpp", 356, "CarpGetBits", (char)"ulNumBits > 0");
    int v5 = 356;
    goto LABEL_28;
  }
  if (a2 > a3)
  {
    int v4 = "ulNumBits <= ulNumBitsInWord";
    DeviceFaultNotify("glutl_stream.cpp", 357, "CarpGetBits", (char)"ulNumBits <= ulNumBitsInWord");
    int v5 = 357;
    goto LABEL_28;
  }
  if (a3 > 0x20 || ((1 << a3) & 0x100010100) == 0)
  {
    int v4 = "ulNumBitsInWord==NUM_BITS_PER_BYTE*2 || ulNumBitsInWord==NUM_BITS_PER_BYTE*4 || ulNumBitsInWord==NUM_BITS_PER_BYTE";
    DeviceFaultNotify("glutl_stream.cpp", 358, "CarpGetBits", (char)"ulNumBitsInWord==NUM_BITS_PER_BYTE*2 || ulNumBitsInWord==NUM_BITS_PER_BYTE*4 || ulNumBitsInWord==NUM_BITS_PER_BYTE");
    int v5 = 358;
    goto LABEL_28;
  }
  int v3 = *((_DWORD *)this + 6);
  if (!v3)
  {
    if (*((_DWORD *)this + 7))
    {
      int v3 = 0;
      goto LABEL_16;
    }
    *((_DWORD *)this + 6) = 7;
    *((_DWORD *)this + 7) = a3;
    if (a3 == 16)
    {
      if ((*(_DWORD *)this + 1) >= *((_DWORD *)this + 4))
      {
        int v4 = "m_uiOffset+1 < m_uiMaxOffset";
        DeviceFaultNotify("glutl_stream.cpp", 385, "CarpGetBits", (char)"m_uiOffset+1 < m_uiMaxOffset");
        int v5 = 385;
        goto LABEL_28;
      }
      goto LABEL_15;
    }
    if (a3 == 8)
    {
      if (*(_DWORD *)this >= *((_DWORD *)this + 4))
      {
        int v4 = "m_uiOffset+0 < m_uiMaxOffset";
        DeviceFaultNotify("glutl_stream.cpp", 381, "CarpGetBits", (char)"m_uiOffset+0 < m_uiMaxOffset");
        int v5 = 381;
        goto LABEL_28;
      }
      goto LABEL_15;
    }
    if ((*(_DWORD *)this + 3) < *((_DWORD *)this + 4))
    {
LABEL_15:
      int v3 = 7;
      goto LABEL_16;
    }
    int v4 = "m_uiOffset+3 < m_uiMaxOffset";
    DeviceFaultNotify("glutl_stream.cpp", 389, "CarpGetBits", (char)"m_uiOffset+3 < m_uiMaxOffset");
    int v5 = 389;
LABEL_28:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_stream.cpp", v5, v4);
  }
LABEL_16:
  LODWORD(v6) = 0;
  unsigned int v7 = a2 - 1;
  do
  {
    if ((v7 & 0x80000000) != 0)
    {
      int v4 = "slShiftVal >= 0";
      DeviceFaultNotify("glutl_stream.cpp", 397, "CarpGetBits", (char)"slShiftVal >= 0");
      int v5 = 397;
      goto LABEL_28;
    }
    uint64_t v8 = *(unsigned int *)this;
    if (v8 >= *((_DWORD *)this + 4))
    {
      int v4 = "m_uiOffset < m_uiMaxOffset";
      DeviceFaultNotify("glutl_stream.cpp", 398, "CarpGetBits", (char)"m_uiOffset < m_uiMaxOffset");
      int v5 = 398;
      goto LABEL_28;
    }
    unsigned int v9 = *(unsigned __int8 *)(*((void *)this + 1) + v8);
    if (v3)
    {
      int v10 = v3 - 1;
    }
    else
    {
      *(_DWORD *)this = v8 + 1;
      int v10 = 7;
    }
    uint64_t v6 = (((v9 >> v3) & 1) << v7) | v6;
    int v11 = *((_DWORD *)this + 7) - 1;
    *((_DWORD *)this + 6) = v10;
    *((_DWORD *)this + 7) = v11;
    --v7;
    int v3 = v10;
  }
  while (v7 != -1);
  if (!v11) {
    *((_DWORD *)this + 6) = 0;
  }
  return v6;
}

uint64_t BlueFin::GlUtils::Assert(uint64_t this, const char *a2, uint64_t a3, const char *a4)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(this + 1120))
  {
    int v4 = (void *)this;
    *(unsigned char *)(this + 1120) = 0;
    v5[0] = 0;
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v5, (char *)0x200, "Assertion failed in %s:%d\n", a4, a2, a3);
    return (*(uint64_t (**)(void, unsigned char *))(*(void *)*v4 + 64))(*v4, v5);
  }
  return this;
}

char *BlueFin::GlUtils::SysLogInternal(BlueFin::GlUtils *this, unsigned int a2, char *a3, char *a4)
{
  int v5 = this;
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((__int16 *)this + 541);
  int v7 = 1050;
  __int16 v8 = 1050 - v6;
  unsigned int v9 = (unsigned __int8 *)this + 30;
  int v10 = BlueFin::GlFormat::gl_format((BlueFin::GlUtils *)((char *)this + v6 + 30), (char *)(__int16)(1050 - v6), (unsigned __int8 *)a3, a4, 0, (char *)1, (void *)1);
  if (v10 << 16 >= -65535 && (__int16)v10 < v8 - 1)
  {
    int v7 = (__int16)(*((_WORD *)v5 + 541) + v10);
    *((_WORD *)v5 + 541) += v10;
    if (v7 >= 1050)
    {
      strcpy((char *)v5 + 1078, "<\n");
      if (v7 != 1050)
      {
        DeviceFaultNotify("glutl_utils.cpp", 407, "SysLogInternal", (char)"m_sCurrOffset <= GLSYSLOG_MAX_INT_LINE_SIZE");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glutl_utils.cpp", 407, "m_sCurrOffset <= GLSYSLOG_MAX_INT_LINE_SIZE");
      }
      int v7 = 1050;
    }
  }
  else
  {
    *((_WORD *)v5 + 541) = 1050;
    *((_WORD *)v5 + 539) = 2620;
  }
  *((unsigned char *)v5 + 1080) = 0;
  if (a2 >= 0x38) {
    LODWORD(v12) = 35;
  }
  else {
    LODWORD(v12) = 38;
  }
  if ((a2 & 0xF8) == 8) {
    uint64_t v12 = 36;
  }
  else {
    uint64_t v12 = v12;
  }
  uint64_t v36 = v12;
  float result = (char *)memchr(v9, 10, v7);
  if (result)
  {
    BOOL v15 = result;
    __int16 v16 = 0;
    uint64_t v37 = &v9[v7];
    __dst = v9;
    uint64_t v35 = a2 & 7;
    while (1)
    {
      unsigned int v17 = *v9;
      if (v17 <= 0x20)
      {
        if (v17 == 7 || v17 == 9) {
          goto LABEL_31;
        }
LABEL_38:
        int v18 = v9[1];
        goto LABEL_39;
      }
      if (v17 == 33) {
        break;
      }
      if (v17 == 45)
      {
        int v18 = v9[1];
        if (v18 == 45)
        {
          if (v9[2]) {
            goto LABEL_31;
          }
          int v18 = 45;
          goto LABEL_44;
        }
LABEL_39:
        if (v18 != 35) {
          goto LABEL_44;
        }
        if (v9[2] != 64)
        {
          int v18 = 35;
          goto LABEL_44;
        }
        int v18 = 35;
        if (v9[3] != 33) {
          goto LABEL_44;
        }
LABEL_48:
        if (v17 != 126) {
          goto LABEL_31;
        }
        goto LABEL_22;
      }
      if (v17 != 126) {
        goto LABEL_38;
      }
      int v18 = v9[1];
LABEL_22:
      if (v18 == 36 && v9[2] == 36 && v9[3] == 126) {
        goto LABEL_50;
      }
LABEL_31:
      int v20 = 0;
LABEL_51:
      unsigned int v38 = v15;
      int v21 = ((v15 - v9) << 16) + 0x10000;
      if (v21 >= 1)
      {
        int v22 = 0;
        __int16 v23 = 0;
        int v24 = v21 >> 16;
        __int16 v25 = 347 - v20;
        int v26 = (__int16)(347 - v20);
        size_t __n = (__int16)(347 - v20);
        int v39 = v20 + (v21 >> 16);
        unsigned __int8 v27 = &v41[(__int16)v20];
        do
        {
          uint64_t v28 = v5;
          __int16 v29 = v22 + v26;
          int v30 = &v9[v22];
          if (v24 >= v22 + v26)
          {
            memcpy(v27, v30, __n);
            v41[347] = 92;
            __int16 v31 = v25;
            __int16 v32 = 348;
          }
          else
          {
            __int16 v31 = v24 - v22;
            memcpy(v27, v30, v24 - v22);
            __int16 v32 = v39 + ~v23;
          }
          *(_WORD *)&v41[v32] = 10;
          v16 += v31;
          int v5 = v28;
          (*(void (**)(void, unsigned char *))(**(void **)v28 + 32))(*(void *)v28, v41);
          int v22 = v29;
          __int16 v23 = v29;
        }
        while (v29 < v24);
      }
      unsigned int v9 = (unsigned __int8 *)(v38 + 1);
      float result = (char *)memchr(v38 + 1, 10, v37 - (unsigned __int8 *)(v38 + 1));
      BOOL v15 = result;
      if (!result)
      {
        LOWORD(v7) = *((_WORD *)v5 + 541);
        unsigned int v9 = __dst;
        goto LABEL_60;
      }
    }
    int v18 = v9[1];
    if (v18 != 64) {
      goto LABEL_39;
    }
    if (v9[2] == 35) {
      goto LABEL_31;
    }
    int v18 = 64;
LABEL_44:
    if (strlen((const char *)v9) < 9 || v9[6] != 35 || v9[7] != 64 || v9[8] != 33)
    {
LABEL_50:
      int v20 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v41, (char *)0x15E, "%c%06d%c ", v14, v36, *((_DWORD *)v5 + 273) % 0xF4240u, aMacewnid[v35]);
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  __int16 v16 = 0;
LABEL_60:
  if ((__int16)v7 >= 1)
  {
    if (v16 >= (__int16)v7)
    {
      __int16 v33 = 0;
    }
    else
    {
      if (v16 < 1) {
        return result;
      }
      float result = (char *)memmove(v9, &v9[v16], (__int16)v7 - v16);
      __int16 v33 = *((_WORD *)v5 + 541) - v16;
    }
    *((_WORD *)v5 + 541) = v33;
  }
  return result;
}

uint64_t BlueFin::GlUtils::Report(uint64_t this, const char *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = BlueFin::GlUtils::m_pInstance;
  uint64_t v4 = this;
  if (!this) {
    uint64_t v4 = *(void *)(BlueFin::GlUtils::m_pInstance + 1240);
  }
  uint64_t v5 = 0;
  int v6 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1236);
  do
  {
    int v7 = *(uint64_t (**)(void, uint64_t))(v3 + v5 + 1248);
    if (v7) {
      this = v7(*(void *)(v3 + v5 + 1408), v4);
    }
    v5 += 8;
  }
  while (v5 != 160);
  __int16 v8 = *(uint64_t (**)(void, void))(v3 + 1248);
  if (v8) {
    this = v8(*(void *)(v3 + 1408), 0);
  }
  if (*(void *)(v3 + 1568)) {
    this = GlCustomLog(12, "</EXPERIMENT_%s %ums end>\n", *(const char **)(v3 + 1240), v6);
  }
  uint64_t v9 = BlueFin::GlUtils::m_pInstance;
  int v10 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1236) = v10;
  *(_DWORD *)(v9 + 1232) = v10 + 59950;
  if (v2) {
    *(void *)(v3 + 1240) = v2;
  }
  return this;
}

uint64_t BlueFin::GlUtils::SysLogForce(BlueFin::GlUtils *this, uint64_t a2, char *a3, ...)
{
  va_start(va, a3);
  if (!BlueFin::GlUtils::m_pInstance) {
    return 0;
  }
  uint64_t result = *(void *)BlueFin::GlUtils::m_pInstance;
  if (*(void *)BlueFin::GlUtils::m_pInstance)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if (result)
    {
      if ((*(unsigned int (**)(void))(**(void **)this + 24))()) {
        BlueFin::GlUtils::SysLogInternal(this, a2, a3, va);
      }
      else {
        (*(void (**)(void, uint64_t, char *, char *))(**(void **)this + 40))(*(void *)this, a2, a3, va);
      }
      return 1;
    }
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, BOOL *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  *a2 = __dst;
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, char *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  *a2 = __dst;
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, unsigned __int8 *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  *a2 = __dst;
  return result;
}

{
  BOOL result;
  unsigned __int8 __dst;

  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  *a2 = __dst;
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, __int16 *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 2u);
  *a2 = bswap32(*(unsigned __int16 *)__dst) >> 16;
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, int *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 4u);
  *a2 = bswap32(*(unsigned int *)__dst);
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, uint64_t *a2)
{
  v4[1] = *MEMORY[0x263EF8340];
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, (unsigned __int8 *)v4, 8u);
  *a2 = bswap64(v4[0]);
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, unsigned __int16 *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 2u);
  *a2 = bswap32(*(unsigned __int16 *)__dst) >> 16;
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, unsigned int *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 4u);
  *a2 = bswap32(*(unsigned int *)__dst);
  return result;
}

BOOL BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, unint64_t *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, v4, 8u);
  *a2 = v4[7] | ((((unint64_t)v4[5] << 8) | ((((unint64_t)((v4[1] << 8) | (v4[0] << 16) | v4[2]) << 16) | ((unint64_t)v4[3] << 8) | v4[4]) << 16) | v4[6]) << 8);
  return result;
}

uint64_t BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, float *a2)
{
  BlueFin::GlDbgCodecBase::Decode(this, __dst, 4u);
  return BlueFin::GlDbgCodecBase::Internal(this, __dst, a2);
}

void BlueFin::GlDbgCodec::Read(BlueFin::GlDbgCodec *this, double *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BlueFin::GlDbgCodecBase::Decode(this, v4, 8u);
  BlueFin::GlDbgCodecBase::Internal(this, v4, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0x5F)
  {
    int v4 = 3;
    goto LABEL_5;
  }
  unsigned __int8 v6 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v6);
  if (!*((_DWORD *)a1 + 143))
  {
    int v4 = v6;
LABEL_5:
    *(_DWORD *)a2 = v4;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 4));
  return BlueFin::GlDbgCodec::RvwArray(a1, (__int16 *)(a2 + 8), (__int16 *)(a2 + 6));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  if (!*((_DWORD *)a1 + 143)) {
    *(unsigned char *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 7;
  }

  return BlueFin::GlDbgCodec::RvwArray(a1, a2 + 8, (unsigned __int8 *)(a2 + 4));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));
  if (!*((_DWORD *)a1 + 143)) {
    *(_WORD *)a2 = 14;
  }

  return BlueFin::GlDbgCodec::RvwArray(a1, (__int16 *)(a2 + 8), (__int16 *)a2);
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 5));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 36));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 44));

  return BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)(a2 + 48));
}

{
  unsigned int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  __int16 *v22;
  __int16 *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 __dst[4];

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 24);
  LOBYTE(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a2 + 40);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v24);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 40) = v24;
  }
  uint64_t v5 = *(__int16 *)(a2 + 44);
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 44));
  BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned __int16 *)(a2 + 44), v5);
  if (*(__int16 *)(a2 + 44) >= 1)
  {
    unsigned __int8 v6 = 0;
    int v7 = (unsigned __int8 *)(a2 + 84);
    do
    {
      BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)v7 - 36);
      BlueFin::GlDbgCodec::Rvw(a1, v7 - 35);
      BlueFin::GlDbgCodec::Rvw(a1, v7 - 34);
      BlueFin::GlDbgCodec::Rvw(a1, v7 - 33);
      BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v7 - 16);
      BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v7 - 15);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0x68)
      {
        LOWORD(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)&v24);
        *((float *)v7 - bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (float)(__int16)v24;
      }
      else
      {
        BlueFin::GlDbgCodec::Rvw(a1, (float *)v7 - 4);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v7 - 6);
      BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v7 - 5);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0x68)
      {
        LOWORD(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)&v24);
        *((float *)v7 - bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (float)(__int16)v24;
      }
      else
      {
        BlueFin::GlDbgCodec::Rvw(a1, (float *)v7 - 2);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v7 - 2);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) >= 0x2B)
      {
        BlueFin::GlDbgCodec::Rvw(a1, v7 - 1);
        BlueFin::GlDbgCodec::Rvw(a1, v7);
      }
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) >= 0xBF) {
        BlueFin::GlDbgCodec::Rvw(a1, v7 - 2);
      }
      ++v6;
      v7 += 40;
    }
    while (v6 < *(__int16 *)(a2 + 44));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4048));
  LOBYTE(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a2 + 4060);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v24);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 4060) = v24;
  }
  LOBYTE(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a2 + 4064);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v24);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 406bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v24;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4068));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4072));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4080));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4088));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4096));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 4112));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4120));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4128));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4136));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4144));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4152));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4160));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4168));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4172));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4184));
  if (v4 >= 0x4D)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4051));
    BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4176));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4192));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4200));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4208));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 4216));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4224));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4256));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4258));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4260));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4264));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4268));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4272));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 4274));
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 4280));
  __int16 v25 = 0;
  if (v4 >= 0x58)
  {
    __int16 v25 = 4;
    BlueFin::GlDbgCodec::RvwArray(a1, (int32x4_t *)(a2 + 5816), &v25);
LABEL_25:
    __int16 v25 = 4;
    BlueFin::GlDbgCodec::RvwArray(a1, (int32x4_t *)(a2 + 4600), &v25);
    __int16 v25 = 4;
    BlueFin::GlDbgCodec::RvwArray(a1, (int32x4_t *)(a2 + 4856), &v25);
    __int16 v25 = 4;
    BlueFin::GlDbgCodec::RvwArray(a1, (int32x4_t *)(a2 + 5112), &v25);
    __int16 v25 = 4;
    BlueFin::GlDbgCodec::RvwArray(a1, (int32x4_t *)(a2 + 5368), &v25);
LABEL_26:
    BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 5624));
    BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 5752));
    __int16 v8 = 1;
    goto LABEL_27;
  }
  if (v4 >= 0x42) {
    goto LABEL_25;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 4600));
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 4856));
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 5112));
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 5368));
  if (v4 >= 8) {
    goto LABEL_26;
  }
  __int16 v8 = 0;
LABEL_27:
  __int16 v25 = 188;
  BlueFin::GlDbgCodec::Rvw(a1, &v25);
  BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, &v25, 0xBCu);
  if (v25)
  {
    uint64_t v9 = 0;
    int v10 = a2 + 6136;
    do
    {
      LOBYTE(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(v10 + 4 * v9);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v24);
      if (!*((_DWORD *)a1 + 143)) {
        *(_DWORD *)(v10 + 4 * v9) = v24;
      }
      ++v9;
    }
    while (v9 < v25);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 6888));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6892));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 6896));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6900));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6904));
  LOBYTE(v2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a2 + 6912);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v24);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 6912) = v24;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6916));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6920));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6924));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6928));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6932));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6936));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6940));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6944));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 6948));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6952));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6960));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6968));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6976));
  int v24 = *(void *)(a2 + 4200);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)&v24);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6984));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 6992));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 7000));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 7008));
  __dst[0] = *(_DWORD *)(a2 + 7012);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 7012) = __dst[0];
  }
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7016));
  int v11 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 7024));
  uint64_t v12 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7032));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7034));
  __dst[0] = *(_DWORD *)(a2 + 7036);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 7036) = __dst[0];
  }
  if (v12 >= 0x19)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 7040));
    BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 7048));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7056));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7064));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7068));
  __dst[0] = *(_DWORD *)(a2 + 7072);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 7072) = __dst[0];
  }
  __dst[0] = *(_DWORD *)(a2 + 7076);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 7076) = __dst[0];
  }
  __dst[0] = *(_DWORD *)(a2 + 7080);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 7080) = __dst[0];
  }
  __dst[0] = *(_DWORD *)(a2 + 7084);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 708bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = __dst[0];
  }
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 7088);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 7096);
  __dst[0] = *(_DWORD *)(a2 + 7104);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 710bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = __dst[0];
  }
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7108));
  __dst[0] = *(_DWORD *)(a2 + 7112);
  BlueFin::GlDbgCodec::Rvw(a1, __dst);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 7112) = __dst[0];
  }
  if (v11 >= 0x38)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7116));
    BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7120));
    __dst[0] = *(_DWORD *)(a2 + 7124);
    BlueFin::GlDbgCodec::Rvw(a1, __dst);
    if (!*((_DWORD *)a1 + 143)) {
      *(_DWORD *)(a2 + 712bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = __dst[0];
    }
    __dst[0] = *(_DWORD *)(a2 + 7128);
    BlueFin::GlDbgCodec::Rvw(a1, __dst);
    if (!*((_DWORD *)a1 + 143)) {
      *(_DWORD *)(a2 + 7128) = __dst[0];
    }
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 7148));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7152));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 7160));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 7168));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7176));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7180));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7184));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7188));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7192));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7196));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7200));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7204));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7208));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7212));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7216));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7220));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 7224));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7228));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7232));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7236));
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) >= 0x54)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7240));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7244));
  }
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 7248);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 7268));
  BlueFin::GlDbgCodec::Rvw(a1, (char *)(a2 + 7272));
  BlueFin::GlDbgCodec::Rvw(a1, (char *)(a2 + 7273));
  BlueFin::GlDbgCodec::Rvw(a1, (char *)(a2 + 7274));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 7276));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 7277));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 7278));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 7280));
  uint64_t v13 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 7284));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 7285));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7288));
  if (v13 >= 0xE) {
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 7292));
  }
  if (v4 <= 0x5B && *((_DWORD *)a1 + 143) <= 1u)
  {
    BlueFin::GlDbgCodecBase::Decode(a1, __dst, 4u);
    BOOL v15 = bswap32(*(unsigned int *)__dst);
    if (v15)
    {
      __int16 v16 = 3 * v15;
      if (v16 <= 1) {
        __int16 v16 = 1;
      }
      unsigned int v17 = -v16;
      do
      {
        BlueFin::GlDbgCodecBase::Decode(a1, __dst, 1u);
        int v18 = __CFADD__(v17++, 1);
      }
      while (!v18);
    }
    BOOL result = BlueFin::GlDbgCodecBase::Decode(a1, __dst, 4u);
    int v19 = bswap32(*(unsigned int *)__dst);
    if (v19)
    {
      int v20 = 9 * v19;
      if (v20 <= 1) {
        int v20 = 1;
      }
      int v21 = -v20;
      do
      {
        BOOL result = BlueFin::GlDbgCodecBase::Decode(a1, __dst, 1u);
        int v18 = __CFADD__(v21++, 1);
      }
      while (!v18);
    }
  }
  if (v8)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 7296));
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7300));
  }
  if (v4 >= 0x3C)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7316));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7318));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7320));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7322));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7324));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7326));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 7328));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7332));
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 7334));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 7336));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 7338));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 7340));
    BOOL result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
    int v22 = (__int16 *)(a2 + 7344);
    __int16 v23 = (__int16 *)(a2 + 7346);
    if ((int)result < 172)
    {
      *int v22 = 0;
      *__int16 v23 = 0;
    }
    else
    {
      BlueFin::GlDbgCodec::Rvw(a1, v22);
      return BlueFin::GlDbgCodec::Rvw(a1, v23);
    }
  }
  return result;
}

{
  unsigned __int8 v5;

  BlueFin::GlDbgCodec::Rvw(a1, (int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4));
  uint64_t v5 = *(_DWORD *)(a2 + 8);
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 8) = v5;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 16));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 13));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 14));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 16));

  return BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 18));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 11));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 12));

  return BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 14));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4));
  if (!*((_DWORD *)a1 + 143)) {
    *(unsigned char *)(a2 + 6) = 32;
  }

  return BlueFin::GlDbgCodec::RvwArray(a1, a2 + 8, (unsigned __int8 *)(a2 + 6));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 10));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 9));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 11));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 12));

  return BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 13));
}

{
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 66));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 67));
  if (v4 <= 0x43) {
    uint64_t v5 = 32;
  }
  else {
    uint64_t v5 = 63;
  }
  int v7 = v5;
  BlueFin::GlDbgCodec::RvwArray(a1, (unsigned __int8 *)(a2 + 68), &v7);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 132);
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 152));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 216));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 220));
  int v7 = 5;
  return BlueFin::GlDbgCodec::RvwArray(a1, a2 + 224, &v7);
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 28));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 30));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 32));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 34));
}

{
  long long *v4;
  long long v5;
  long long v6;
  unsigned int v7;
  int v8;
  unsigned int MaxAllowedCnstls;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int i;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  const void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int16 *v54;
  unsigned int v55;
  int v56;
  int j;
  uint64_t v58;
  uint64_t v59;
  long long v60;
  int v61;
  int k;
  uint64_t v63;
  __int16 v64;
  uint64_t result;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t m;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  unsigned int v73;
  const char *v74;
  int v75;
  unsigned int v76;
  BOOL v77[4];
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  int v82;
  int v83;
  long long v84;
  long long v85;
  long long v86;
  BOOL v87;
  _OWORD __dst[25];
  _OWORD v89[2];
  unsigned char v90[32];
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  void v97[2];
  int v98;
  void v99[8];

  v99[5] = *MEMORY[0x263EF8340];
  char v76 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  int v4 = (long long *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  unsigned __int8 v6 = v4[1];
  uint64_t v5 = v4[2];
  uint64_t v84 = *v4;
  uint64_t v85 = v6;
  uint64_t v86 = v5;
  v99[0] = &v84;
  v99[1] = (char *)&v84 + 8;
  v99[2] = (char *)&v84 + 4;
  v99[3] = (unint64_t)&v84 | 0xC;
  v99[4] = &v85;
  v97[0] = 0;
  v97[1] = 0;
  uint64_t v98 = 0;
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  __int16 v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 264))(a2);
  MaxAllowedCnstls = BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(v8);
  if (v7 < MaxAllowedCnstls) {
    MaxAllowedCnstls = v7;
  }
  uint64_t v83 = MaxAllowedCnstls;
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 264))(a2);
  if (v10 >= 6) {
    int v11 = 6;
  }
  else {
    int v11 = v10;
  }
  unint64_t v82 = v11;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
  unint64_t v81 = v12;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 208))(a2);
  uint64_t v80 = v13;
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 216))(a2);
  int v79 = v14;
  if (v14 > 0x5A || v12 > 0x7E || v13 >= 0xA1)
  {
    BOOL v74 = "(ucNumGearIds <= MAX_GEAR_IDS) && (ucNumSrchParams <= MAX_SP_PARAMS) && (ucNumBinningStepParams <= MAX_BS_PARAMS)";
    DeviceFaultNotify("gldebug_codec.cpp", 3995, "Rvw", (char)"(ucNumGearIds <= MAX_GEAR_IDS) && (ucNumSrchParams <= MAX_SP_PARAMS) && (ucNumBinningStepParams <= MAX_BS_PARAMS)");
    std::string::size_type v75 = 3995;
    goto LABEL_135;
  }
  BlueFin::GlDbgCodec::Rvw(a1, &v83);
  BlueFin::GlDbgCodec::Rvw(a1, &v82);
  *(_DWORD *)uint64_t v77 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)v77);
  BOOL v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2);
  __dst[0] = *(_OWORD *)v15;
  unsigned int v17 = *(_OWORD *)(v15 + 32);
  __int16 v16 = *(_OWORD *)(v15 + 48);
  int v18 = *(_OWORD *)(v15 + 16);
  *(void *)&unsigned __int8 __dst[4] = *(void *)(v15 + 64);
  unsigned __int8 __dst[2] = v17;
  __dst[3] = v16;
  __dst[1] = v18;
  int v19 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)__dst);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + 4);
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)__dst + 5);
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)__dst + 6);
  LOBYTE(v89[0]) = BYTE8(__dst[0]);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  if (!*((_DWORD *)a1 + 143)) {
    DWORD2(__dst[0]) = LOBYTE(v89[0]);
  }
  LOBYTE(v89[0]) = BYTE12(__dst[0]);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  if (!*((_DWORD *)a1 + 143)) {
    HIDWORD(__dst[0]) = LOBYTE(v89[0]);
  }
  LOBYTE(v89[0]) = __dst[1];
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  if (!*((_DWORD *)a1 + 143)) {
    LODWORD(__dst[1]) = LOBYTE(v89[0]);
  }
  LOBYTE(v89[0]) = BYTE4(__dst[1]);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  if (!*((_DWORD *)a1 + 143)) {
    DWORD1(__dst[1]) = LOBYTE(v89[0]);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)&__dst[1] + 4);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[1] + 10);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[1] + 3);
  LOBYTE(v89[0]) = __dst[2];
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  if (!*((_DWORD *)a1 + 143)) {
    LODWORD(__dst[2]) = LOBYTE(v89[0]);
  }
  if (v19 <= 0x18)
  {
    int v20 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 128))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)(v20 + 976) + 704))(v20 + 976) == 1)
    {
      BlueFin::GlMeSrdTrkCvecTapConfig::GlMeSrdTrkCvecTapConfig((uint64_t)v89, 4u, 1u);
      BlueFin::GlMeTrkCvecTapConfig::operator=((uint64_t)&__dst[2] + 4, (uint64_t)v89);
      BYTE8(__dst[3]) = 0;
      goto LABEL_27;
    }
    BOOL v74 = "Proxy().Eng().GetEngineType() == GL_ENGINE_TYPE_SINGLE_ME";
    DeviceFaultNotify("gldebug_codec.cpp", 5188, "Rvw", (char)"Proxy().Eng().GetEngineType() == GL_ENGINE_TYPE_SINGLE_ME");
    std::string::size_type v75 = 5188;
LABEL_135:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", v75, v74);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (BlueFin::GlMeTrkCvecTapConfig *)((char *)&__dst[2] + 4));
  if (v19 - 117 <= 0x1C)
  {
    LOBYTE(v89[0]) = 0;
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
    BYTE8(__dst[3]) = LOBYTE(v89[0]) != 0;
LABEL_27:
    BYTE9(__dst[3]) = 0;
    goto LABEL_28;
  }
  BYTE8(__dst[3]) = 0;
  if (v19 <= 0x92) {
    goto LABEL_27;
  }
  LOBYTE(v89[0]) = *(void *)&__dst[4] != 0;
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  BYTE9(__dst[3]) = LOBYTE(v89[0]) != 0;
  if (v19 >= 0xCA)
  {
    LOBYTE(v89[0]) = 0;
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
  }
LABEL_28:
  BlueFin::GlDbgCodec::Rvw(a1, &v81);
  BlueFin::GlDbgCodec::Rvw(a1, &v80);
  BlueFin::GlDbgCodec::Rvw(a1, &v79);
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 232))(a2);
  if (v76 >= 0x2F)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v84);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v84 + 1);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v84 + 2);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)((unint64_t)&v84 | 0xC));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v85);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v85 + 1);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v85 + 2);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v85 + 3);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v86);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v86 + 1);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v86 + 2);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) >= 0x5D) {
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&v86 + 3);
    }
  }
  if (v83 >= 1)
  {
    int v21 = 0;
    do
    {
      if (v76 <= 0x2E) {
        BlueFin::GlDbgCodec::Rvw(a1, (float *)v99[v21]);
      }
      v77[0] = 0;
      v77[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, v21);
      BlueFin::GlDbgCodec::Rvw(a1, v77);
      uint64_t v95 = 0u;
      int v96 = 0u;
      unint64_t v93 = 0u;
      char v94 = 0u;
      uint64_t v91 = 0u;
      uint64_t v92 = 0u;
      memset(v90, 0, sizeof(v90));
      memset(v89, 0, sizeof(v89));
      if (v77[0])
      {
        int v22 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 152))(a2, v21);
        __int16 v23 = 0;
        int v24 = *(_OWORD *)((char *)v22 + 13);
        v89[0] = *v22;
        *(_OWORD *)((char *)v89 + 13) = v24;
        do
        {
          *(_DWORD *)&v90[v23] = *(_DWORD *)((char *)v22 + v23 + 32);
          v23 += 4;
        }
        while (v23 != 32);
        __int16 v25 = v22[5];
        uint64_t v91 = v22[4];
        uint64_t v92 = v25;
        int v26 = v22[6];
        unsigned __int8 v27 = v22[7];
        uint64_t v28 = v22[9];
        uint64_t v95 = v22[8];
        int v96 = v28;
        unint64_t v93 = v26;
        char v94 = v27;
      }
      BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)v89, (BlueFin::GlMeTrkCvecTapConfig *)v97);
      if (v82 >= 1)
      {
        __int16 v29 = 0;
        do
        {
          uint64_t v87 = 0;
          if (v77[0]) {
            int v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 120))(a2, v21, v29);
          }
          else {
            int v30 = 0;
          }
          uint64_t v87 = v30;
          uint64_t v78 = 0;
          BlueFin::GlDbgCodec::Rvw(a1, &v87);
          if (v87)
          {
            uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 96))(a2, v21, v29);
            __int16 v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 192))(a2, v21, v29);
            __int16 v32 = *(_OWORD *)(v31 + 16);
            __dst[0] = *(_OWORD *)v31;
            __dst[1] = v32;
            __int16 v33 = *(_OWORD *)(v31 + 80);
            uint64_t v35 = *(_OWORD *)(v31 + 32);
            unsigned int v34 = *(_OWORD *)(v31 + 48);
            unsigned __int8 __dst[4] = *(_OWORD *)(v31 + 64);
            __dst[5] = v33;
            unsigned __int8 __dst[2] = v35;
            __dst[3] = v34;
            uint64_t v37 = *(_OWORD *)(v31 + 112);
            uint64_t v36 = *(_OWORD *)(v31 + 128);
            unsigned int v38 = *(_OWORD *)(v31 + 96);
            LODWORD(__dst[9]) = *(_DWORD *)(v31 + 144);
            __dst[7] = v37;
            __dst[8] = v36;
            __dst[6] = v38;
            BlueFin::GlMeTrkCvecTapConfig::operator=((uint64_t)&__dst[9] + 4, v31 + 148);
            int v39 = *(_OWORD *)(v31 + 168);
            int v40 = *(_OWORD *)(v31 + 184);
            *((void *)&__dst[12] + 1) = *(void *)(v31 + 200);
            *(_OWORD *)((char *)&__dst[10] + 8) = v39;
            *(_OWORD *)((char *)&__dst[11] + 8) = v40;
            BlueFin::GlDbgCodec::Rvw(a1, &v78);
            BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)__dst, (uint64_t)v97);
          }
          __int16 v29 = (v29 + 1);
          int v41 = v82;
          if (v82 >= 6) {
            int v41 = 6;
          }
        }
        while ((int)v29 < v41);
      }
      ++v21;
      uint64_t v42 = v83;
      if (v83 >= 6) {
        uint64_t v42 = 6;
      }
    }
    while (v21 < v42);
  }
  int v43 = v76;
  if (v76 < 0x30) {
    unint64_t v82 = 6;
  }
  int v44 = v79;
  if (v79 >= 0x5Au) {
    int v44 = 90;
  }
  if (v44)
  {
    for (uint64_t i = 0; i < v55; ++i)
    {
      int v46 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 72))(a2, i);
      char v47 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 80))(a2, i);
      LOBYTE(__dst[0]) = v46;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst);
      if (*((_DWORD *)a1 + 143)) {
        uint64_t v48 = v46;
      }
      else {
        uint64_t v48 = LOBYTE(__dst[0]);
      }
      LOBYTE(__dst[0]) = v47;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst);
      if (*((_DWORD *)a1 + 143)) {
        uint64_t v49 = v47;
      }
      else {
        uint64_t v49 = LOBYTE(__dst[0]);
      }
      int v43 = v76;
      if (v76 <= 0xA)
      {
        LOBYTE(__dst[0]) = 0;
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst);
      }
      uint64_t v87 = 0;
      memset(__dst, 0, 288);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 120))(a2, v49, v48))
      {
        uint64_t v87 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 112))(a2, i);
        uint64_t v50 = (const void *)(*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 184))(a2, i);
        memcpy(__dst, v50, 0x120uLL);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v87);
      if (v76 <= 0xA)
      {
        BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)v77, (BlueFin::GlMeTrkCvecTapConfig *)v97);
        BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)v89, (uint64_t)v97);
      }
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) <= 0xC)
      {
        LOBYTE(v89[0]) = 0;
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (float *)__dst);
      LOBYTE(v89[0]) = BYTE4(__dst[0]);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
      if (!*((_DWORD *)a1 + 143)) {
        DWORD1(__dst[0]) = LOBYTE(v89[0]);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (float *)__dst + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)__dst + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[1]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[1] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[1] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[1] + 12);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[2]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[2] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[2] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[2] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[3]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[3] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[3] + 8);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[3] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[4]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[4] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[4] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[4] + 12);
      LOBYTE(v89[0]) = __dst[5];
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
      if (!*((_DWORD *)a1 + 143)) {
        LODWORD(__dst[5]) = LOBYTE(v89[0]);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[5] + 4);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[5] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[5] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[6]);
      LODWORD(v89[0]) = 3;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
      BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned int *)v89, 3u);
      if (LODWORD(v89[0]))
      {
        uint64_t v51 = 0;
        do
        {
          v77[0] = *((_DWORD *)&__dst[6] + v51 + 1);
          BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v77);
          if (!*((_DWORD *)a1 + 143)) {
            *((_DWORD *)&__dst[6] + v51 + 1) = v77[0];
          }
          ++v51;
        }
        while (v51 < LODWORD(v89[0]));
      }
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[7]);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[7] + 4);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[7] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[7] + 12);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[8]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[8] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[8] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[8] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)&__dst[9]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[9] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)&__dst[9] + 2);
      LOBYTE(v89[0]) = BYTE12(__dst[9]);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v89);
      if (!*((_DWORD *)a1 + 143)) {
        HIDWORD(__dst[9]) = LOBYTE(v89[0]);
      }
      LODWORD(v89[0]) = 5;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
      BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned int *)v89, 5u);
      if (LODWORD(v89[0]))
      {
        uint64_t v52 = 0;
        do
        {
          v77[0] = *((_DWORD *)&__dst[10] + v52);
          BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v77);
          if (!*((_DWORD *)a1 + 143)) {
            *((_DWORD *)&__dst[10] + v52) = v77[0];
          }
          ++v52;
        }
        while (v52 < LODWORD(v89[0]));
      }
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[11] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[11] + 8);
      v77[0] = BYTE12(__dst[11]);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v77);
      if (!*((_DWORD *)a1 + 143)) {
        HIDWORD(__dst[11]) = v77[0];
      }
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&__dst[12]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[12] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[12] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[12] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[13]);
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)&__dst[13] + 4);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[13] + 2);
      v77[0] = BYTE12(__dst[13]);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v77);
      if (!*((_DWORD *)a1 + 143)) {
        HIDWORD(__dst[13]) = v77[0];
      }
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)&__dst[14]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[14] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)&__dst[14] + 8);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[14] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)&__dst[15]);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)&__dst[15] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)&__dst[15] + 8);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[15] + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[16]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[16] + 1);
      LODWORD(v89[0]) = 3;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
      BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned int *)v89, 3u);
      if (LODWORD(v89[0]))
      {
        uint64_t v53 = 0;
        uint64_t v54 = (unsigned __int16 *)&__dst[16] + 4;
        do
        {
          BlueFin::GlDbgCodec::Rvw(a1, v54);
          ++v53;
          ++v54;
        }
        while (v53 < LODWORD(v89[0]));
      }
      LOBYTE(__dst[17]) = 1;
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)&__dst[17]);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[17] + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[17] + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (float *)&__dst[17] + 3);
      uint64_t v55 = v79;
      if (v79 >= 0x5Au) {
        uint64_t v55 = 90;
      }
    }
  }
  if (v43 >= 0xA) {
    uint64_t v56 = v81;
  }
  else {
    uint64_t v56 = 64;
  }
  if (v56)
  {
    for (uint64_t j = 0; j != v56; ++j)
    {
      uint64_t v58 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 240))(a2, j);
      uint64_t v59 = *(void *)(v58 + 32);
      uint64_t v60 = *(_OWORD *)(v58 + 16);
      __dst[0] = *(_OWORD *)v58;
      __dst[1] = v60;
      *(void *)&unsigned __int8 __dst[2] = v59;
      BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)__dst);
    }
  }
  if (v43 >= 0xA) {
    uint64_t v61 = v80;
  }
  else {
    uint64_t v61 = 98;
  }
  if (v61)
  {
    for (uint64_t k = 0; k != v61; ++k)
    {
      if (v76 <= 0xA)
      {
        memset(__dst, 0, 40);
        BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)__dst);
      }
      uint64_t v63 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 256))(a2, k);
      uint64_t v64 = *(_WORD *)(v63 + 4);
      LODWORD(__dst[0]) = *(_DWORD *)v63;
      WORD2(__dst[0]) = v64;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + 1);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + 2);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + 3);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + 4);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + 5);
    }
  }
  BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 264))(a2);
  if (v76 > 0x10)
  {
    uint64_t v66 = result;
    LOBYTE(__dst[0]) = result;
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst);
    uint64_t v67 = *((_DWORD *)a1 + 143) ? v66 : LOBYTE(__dst[0]);
    if (v76 >= 0x93)
    {
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2);
      if (*(unsigned char *)(result + 57))
      {
        if (v67 == 5 && *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2) + 64))
        {
          uint64_t v68 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2);
          memcpy(__dst, *(const void **)(v68 + 64), 0x18CuLL);
        }
        if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0x9D)
        {
          char v71 = 0;
          uint64_t v87 = 0;
          *(_WORD *)uint64_t v77 = 0;
          LODWORD(v89[0]) = 0;
          do
          {
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v87);
            uint64_t v72 = v71++ >= 3;
          }
          while (!v72);
          BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
          uint64_t v73 = 0;
          do
          {
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v87);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v87);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v89);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v77);
            uint64_t v72 = v73++ >= 0xF;
          }
          while (!v72);
        }
        else
        {
          for (uint64_t m = 0; m != 8; ++m)
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)__dst + m);
          BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)__dst + 2);
          uint64_t v70 = -384;
          do
          {
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)((char *)&__dst[24] + v70 + 12));
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)((char *)&__dst[24] + v70 + 14));
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)((char *)&__dst[25] + v70));
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)((char *)v89 + v70 + 4));
            BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)((char *)v89 + v70 + 6));
            v70 += 12;
          }
          while (v70);
        }
      }
    }
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 3));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 22));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 26));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 28));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 29));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 30));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 18));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 23));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 14));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 22));
}

{
  unsigned int v4;
  __int16 *v5;
  unsigned int v6;
  float *v7;
  unsigned int v8;
  float *v9;
  unsigned int v10;
  __int16 *v11;
  unsigned int v12;
  __int16 *v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  __int16 *v17;
  uint64_t result;
  unsigned int *v19;
  __int16 v20;

  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 12));
  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  uint64_t v5 = (__int16 *)(a2 + 16);
  if (v4 < 0xAC)
  {
    *uint64_t v5 = 0;
    *(_WORD *)(a2 + 18) = 0;
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, v5);
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 18));
  }
  unsigned __int8 v6 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  int v7 = (float *)(a2 + 20);
  if (v6 < 0x91)
  {
    *(void *)int v7 = 0;
    *(void *)(a2 + 28) = 0;
    *(void *)(a2 + 36) = 0;
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, v7);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 24));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 28));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 32));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 36));
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 40));
  }
  __int16 v8 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  uint64_t v9 = (float *)(a2 + 44);
  if (v8 < 0x9A) {
    *uint64_t v9 = 0.0;
  }
  else {
    BlueFin::GlDbgCodec::Rvw(a1, v9);
  }
  int v10 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  int v11 = (__int16 *)(a2 + 48);
  if (v10 < 0x63)
  {
    *(_DWORD *)(a2 + 56) = 0;
    *(void *)int v11 = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    *(_DWORD *)(a2 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, v11);
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 50));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 52));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 54));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 56));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 80));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 92));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 84));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 96));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 100));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 104));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 88));
  }
  uint64_t v12 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  uint64_t v13 = (__int16 *)(a2 + 8);
  if (v12 < 0x64)
  {
    *uint64_t v13 = 0;
    *(unsigned char *)(a2 + 110) = 0;
    *(unsigned char *)(a2 + 109) = 0;
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, v13);
    BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 110));
    BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 109));
  }
  uint64_t v14 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BOOL v15 = (unsigned __int8 *)(a2 + 108);
  if (v14 < 0x80) {
    *BOOL v15 = -1;
  }
  else {
    BlueFin::GlDbgCodec::Rvw(a1, v15);
  }
  __int16 v16 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  unsigned int v17 = (__int16 *)(a2 + 60);
  if (v16 < 0x94)
  {
    *(void *)unsigned int v17 = 0;
    *(void *)(a2 + 68) = 0;
    *(_DWORD *)(a2 + 76) = 0;
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, v17);
    BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 62));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 64));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 66));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 68));
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 70));
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0xB9)
    {
      int v20 = 0;
      BlueFin::GlDbgCodec::Rvw(a1, &v20);
      *(float *)(a2 + 72) = (float)v20;
    }
    else
    {
      BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 72));
    }
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 76));
  }
  BOOL result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  int v19 = (unsigned int *)(a2 + 112);
  if (result >= 0xB8) {
    return BlueFin::GlDbgCodec::Rvw(a1, v19);
  }
  *int v19 = 0;
  return result;
}

{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  uint64_t j;
  uint64_t k;
  int **v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  BlueFin::GlSetBase *v19;
  uint64_t result;
  int v21;
  unsigned int m;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 v25;
  BOOL v26[4];
  BOOL v27[8];
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 108));
  int v24 = 14;
  BlueFin::GlDbgCodec::RvwArray(a1, (float *)(a2 + 116), &v24);
  if (v4 < 0x17) {
    goto LABEL_41;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 188));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 192));
  BlueFin::GlDbgCodec::Rvw(a1, (_DWORD *)(a2 + 196));
  if (v4 < 0x31) {
    goto LABEL_41;
  }
  uint64_t v5 = a2 + 4;
  *(_DWORD *)int v26 = 8;
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v26);
  if (*((_DWORD *)a1 + 143) == 2)
  {
    unsigned __int8 v6 = 0;
    *(void *)unsigned __int8 v27 = 0;
    do
    {
      if (v6 != 4) {
        v27[v6] = *(unsigned char *)(v5 + BlueFin::GlImplGnss::m_aucImplGnssTable[v6]);
      }
      ++v6;
    }
    while (v6 != 8);
    for (uint64_t i = 0; i != 8; ++i)
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v27[i]);
  }
  else
  {
    *(void *)unsigned __int8 v27 = 0;
    __int16 v8 = *(_DWORD *)v26;
    if (*(_DWORD *)v26 >= 8u) {
      uint64_t v9 = 8;
    }
    else {
      uint64_t v9 = *(unsigned int *)v26;
    }
    if (!v9) {
      goto LABEL_28;
    }
    for (uint64_t j = 0; j != v9; ++j)
    {
      if (*((_DWORD *)a1 + 143) == 1 && j != 4 && j != 8) {
        v27[j] = *(unsigned char *)(v5 + BlueFin::GlImplGnss::m_aucImplGnssTable[j]);
      }
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v27[j]);
    }
    while (1)
    {
      __int16 v8 = *(_DWORD *)v26;
LABEL_28:
      if (v9 >= v8) {
        break;
      }
      __int16 v25 = 0;
      BlueFin::GlDbgCodec::Rvw(a1, &v25);
      LODWORD(v9) = v9 + 1;
    }
    for (uint64_t k = 0; k != 7; ++k)
      *(unsigned char *)(v5 + k) = v27[BlueFin::GlImplGnss::m_aucEnabledGnssTable[k]];
  }
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 112));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 172));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 176));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 180));
  if (v4 < 0x61)
  {
    if (!*((_DWORD *)a1 + 143)) {
      *(_DWORD *)(a2 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    }
    if (v4 < 0x3E)
    {
LABEL_41:
      uint64_t v14 = (int **)(a2 + 208);
      if (BlueFin::GlMeSrdAsicConfig::IsFeatureSupported(1, *(_DWORD *)(a2 + 188))) {
        **v14 |= 2u;
      }
      else {
        BlueFin::GlSetBase::Remove(a2 + 208, 1);
      }
      __int16 v16 = (*(_DWORD *)(a2 + 188) & 0xF000FFFE) - 805306382;
      if (v16 > 6 || ((1 << v16) & 0x55) == 0) {
        goto LABEL_49;
      }
LABEL_46:
      **v14 |= 4u;
      goto LABEL_50;
    }
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 184));
  }
  v27[0] = *(_DWORD *)(a2 + 200);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v27);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 200) = v27[0];
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 204));
  if (v4 - 96 > 0x1C) {
    goto LABEL_41;
  }
  uint64_t v14 = (int **)(a2 + 208);
  v27[0] = (**(unsigned char **)(a2 + 208) & 2) != 0;
  BlueFin::GlDbgCodec::Rvw(a1, v27);
  if (v27[0])
  {
    BOOL v15 = **v14 | 2;
    **uint64_t v14 = v15;
  }
  else
  {
    BlueFin::GlSetBase::Remove(a2 + 208, 1);
    BOOL v15 = **v14;
  }
  v26[0] = (v15 & 4) != 0;
  BlueFin::GlDbgCodec::Rvw(a1, v26);
  if (v26[0]) {
    goto LABEL_46;
  }
LABEL_49:
  BlueFin::GlSetBase::Remove((uint64_t)v14, 2);
LABEL_50:
  if (v4 == 124)
  {
    v27[0] = (**(unsigned char **)(a2 + 208) & 8) != 0;
    BlueFin::GlDbgCodec::Rvw(a1, v27);
    if (v27[0]) {
      **(_DWORD **)(a2 + 208) |= 8u;
    }
    else {
      BlueFin::GlSetBase::Remove(a2 + 208, 3);
    }
LABEL_61:
    for (uint64_t m = 4; m != 13; ++m)
    {
      BOOL result = BlueFin::GlMeSrdAsicConfig::IsFeatureSupported(m, *(_DWORD *)(a2 + 188));
      if (result) {
        *(_DWORD *)(*(void *)(a2 + 208) + 4 * (m >> 5)) |= 1 << m;
      }
      else {
        BOOL result = BlueFin::GlSetBase::Remove(a2 + 208, (__int16)m);
      }
    }
    return result;
  }
  unsigned int v17 = *(_DWORD *)(a2 + 188);
  int v18 = (v17 & 0xF000FFFE) - 805306382;
  if (v18 <= 6 && ((1 << v18) & 0x55) != 0)
  {
    int v19 = (BlueFin::GlSetBase *)(a2 + 208);
LABEL_56:
    **(_DWORD **)v19 |= 8u;
    goto LABEL_57;
  }
  int v19 = (BlueFin::GlSetBase *)(a2 + 208);
  if ((v17 & 0xF0FFFFFE) == 0x3001000E) {
    goto LABEL_56;
  }
  BlueFin::GlSetBase::Remove(a2 + 208, 3);
LABEL_57:
  if (v4 <= 0x7C) {
    goto LABEL_61;
  }
  v26[0] = *((unsigned char *)v19 + 8) & 0x3F;
  *(_DWORD *)unsigned __int8 v27 = 0;
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v26);
  if (*((_DWORD *)a1 + 143))
  {
    int v21 = v26[0];
  }
  else
  {
    int v21 = *((unsigned char *)v19 + 8) & 0x3F;
    if (v21 != v26[0])
    {
      DeviceFaultNotify("gldebug_codec.cpp", 7046, "Rvw", (char)"(rValue.GetMaxByteSize() >> 2) == ucWords");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 7046, "(rValue.GetMaxByteSize() >> 2) == ucWords");
    }
  }
  if (v21)
  {
    __int16 v23 = 0;
    do
    {
      *(_DWORD *)unsigned __int8 v27 = BlueFin::GlSetBase::GetULong(v19, v23);
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v27);
      if (!*((_DWORD *)a1 + 143)) {
        BOOL result = BlueFin::GlSetBase::SetULong((uint64_t)v19, v23, *(int *)v27);
      }
      ++v23;
    }
    while (v23 < v26[0]);
  }
  return result;
}

{
  unsigned int v4;
  uint64_t result;
  uint64_t vars8;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 1));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 3));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 7));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 11));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 12));
  if (v4 >= 0xE)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 5));
    BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 9));
    BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 16));
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 17));
    if (v4 >= 0x19)
    {
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 18));
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 19));
      if (v4 >= 0x1E)
      {
        return BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 20));
      }
    }
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 28));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 36));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 44));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 52));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 60));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 68));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 72));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 76));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 80));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 84));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 88));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 92));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 96));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 100));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 104));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 108));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 112));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 116));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 120));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 124));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 128));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 132));

  return BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 136));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 36));

  return BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 40));
}

{
  unsigned __int16 *v4;
  uint64_t result;
  unint64_t v6;
  char *v7;

  BlueFin::GlDbgCodec::Rvw(a1, (char *)a2);
  int v4 = (unsigned __int16 *)(a2 + 8);
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 8));
  if (*(unsigned __int16 *)(a2 + 8) > 0x7Fu)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 7032, "Rvw", (char)"rValue.wlanScan.size < GL_WLAN_AP_INFO_SIZE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 7032, "rValue.wlanScan.size < GL_WLAN_AP_INFO_SIZE");
  }
  if (*(_WORD *)(a2 + 8))
  {
    unsigned __int8 v6 = 0;
    int v7 = (char *)(a2 + 25);
    do
    {
      BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(v7 - 9));
      BlueFin::GlDbgCodec::Rvw(a1, v7 - 1);
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v7);
      ++v6;
      v7 += 16;
    }
    while (v6 < *v4);
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 28));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 36));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 44));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 52));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 60));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 68));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 72));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 76));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 1));

  return BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 14));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 16));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 12));

  return BlueFin::GlDbgCodec::RvwArray(a1, a2 + 20, (unsigned int *)(a2 + 16));
}

{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned int v7;
  unsigned __int8 v8;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  LOBYTE(v7) = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v7);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)a2 = v7;
  }
  LOBYTE(v7) = *(_DWORD *)(a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v7);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
  }
  LOBYTE(v7) = *(_DWORD *)(a2 + 8);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v7);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 8) = v7;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 14));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 72));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 80));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 88));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 92));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 96));
  LOBYTE(v7) = *(_DWORD *)(a2 + 100);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v7);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 100) = v7;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 104));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 112));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 120));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 128));
  if (v4 <= 0xB)
  {
    __int16 v8 = 0;
    int v7 = 0;
    BlueFin::GlDbgCodec::Rvw(a1, &v8);
    BlueFin::GlDbgCodec::Rvw(a1, (float *)&v7);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 200));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 204));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 208));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 216));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 224));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 232));
  BlueFin::GlDbgCodec::Rvw(a1, (_DWORD *)(a2 + 276));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 280));
  if (v4 >= 0xC)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 152));
    if (v4 > 0x47) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = 6;
    }
    int v7 = v5;
    BlueFin::GlDbgCodec::RvwArray(a1, (float *)(a2 + 156), &v7);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 288));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 296));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 304));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 308));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 312));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 316));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 318));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 320));
  if (v4 <= 0xA3) {
    return BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 321));
  }
  return result;
}

{
  unsigned int v4;
  int v5;
  uint64_t result;
  unsigned __int8 v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  _DWORD *v34;
  unsigned __int8 *v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t i;
  uint64_t j;
  _DWORD *v41;
  unsigned int v42;
  BOOL v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  int v43 = 0;
  if (v4 < 0xAF)
  {
    int v43 = 1;
  }
  else
  {
    uint64_t v5 = *((_DWORD *)a1 + 143);
    if (v5 == 1) {
      *((_DWORD *)a1 + 143) = 0;
    }
    BlueFin::GlDbgCodec::Rvw(a1, &v43);
    *((_DWORD *)a1 + 143) = v5;
  }
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  if (v43)
  {
    uint64_t v42 = v4;
    int v41 = (_DWORD *)(a2 + 55208);
    if (*(_DWORD *)a2)
    {
      int v7 = 0;
      while (1)
      {
        __int16 v8 = v7;
        uint64_t v9 = (_DWORD *)(a2 + 368 * v7 + 8);
        int v10 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
        if (v10 < 0x49) {
          break;
        }
        int v46 = *v9;
        BlueFin::GlDbgCodec::Rvw(a1, &v46);
        if (!*((_DWORD *)a1 + 143)) {
          *uint64_t v9 = v46;
        }
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 368 * v8 + 12));
        if (v10 < 0x4F) {
          goto LABEL_15;
        }
        BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 368 * v8 + 13));
LABEL_16:
        int v11 = a2 + 368 * v8;
        uint64_t v13 = *(_DWORD *)(v11 + 16);
        uint64_t v12 = (_DWORD *)(v11 + 16);
        char v47 = v13;
        BlueFin::GlDbgCodec::Rvw(a1, &v47);
        if (!*((_DWORD *)a1 + 143)) {
          *uint64_t v12 = v47;
        }
        uint64_t v14 = 368 * v8;
        BOOL v15 = 4;
        __int16 v16 = (double *)(a2 + 248 + v14);
        do
        {
          BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + v14 + 24));
          BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + v14 + 32));
          BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + v14 + 40));
          BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + v14 + 48));
          v14 += 32;
          --v15;
        }
        while (v15);
        unsigned int v17 = a2 + 368 * v8;
        BlueFin::GlDbgCodec::Rvw(a1, (double *)(v17 + 152));
        BlueFin::GlDbgCodec::Rvw(a1, (double *)(v17 + 160));
        BlueFin::GlDbgCodec::Rvw(a1, (double *)(v17 + 168));
        BlueFin::GlDbgCodec::Rvw(a1, (float *)(v17 + 176));
        BlueFin::GlDbgCodec::Rvw(a1, (float *)(v17 + 180));
        int v19 = *(_DWORD *)(v17 + 184);
        int v18 = (_DWORD *)(v17 + 184);
        uint64_t v48 = v19;
        BlueFin::GlDbgCodec::Rvw(a1, &v48);
        if (!*((_DWORD *)a1 + 143)) {
          *int v18 = v48;
        }
        int v20 = a2 + 368 * v8;
        int v22 = *(_DWORD *)(v20 + 188);
        int v21 = (_DWORD *)(v20 + 188);
        uint64_t v49 = v22;
        BlueFin::GlDbgCodec::Rvw(a1, &v49);
        if (!*((_DWORD *)a1 + 143)) {
          *int v21 = v49;
        }
        __int16 v23 = a2 + 368 * v8;
        __int16 v25 = *(_DWORD *)(v23 + 192);
        int v24 = (_DWORD *)(v23 + 192);
        uint64_t v50 = v25;
        BlueFin::GlDbgCodec::Rvw(a1, &v50);
        if (!*((_DWORD *)a1 + 143)) {
          *int v24 = v50;
        }
        int v26 = a2 + 368 * v8;
        uint64_t v28 = *(_DWORD *)(v26 + 196);
        unsigned __int8 v27 = (_DWORD *)(v26 + 196);
        uint64_t v51 = v28;
        BlueFin::GlDbgCodec::Rvw(a1, &v51);
        if (!*((_DWORD *)a1 + 143)) {
          *unsigned __int8 v27 = v51;
        }
        __int16 v29 = a2 + 368 * v8;
        __int16 v31 = *(_DWORD *)(v29 + 200);
        int v30 = (_DWORD *)(v29 + 200);
        uint64_t v52 = v31;
        BlueFin::GlDbgCodec::Rvw(a1, &v52);
        if (!*((_DWORD *)a1 + 143)) {
          *int v30 = v52;
        }
        __int16 v32 = a2 + 368 * v8;
        __int16 v33 = (unsigned __int8 *)(v32 + 204);
        unsigned int v34 = (_DWORD *)(v32 + 208);
        if (v10 <= 0x9D)
        {
          DeviceCommon *v33 = 0;
          *unsigned int v34 = 0;
        }
        else
        {
          BlueFin::GlDbgCodec::Rvw(a1, v33);
          uint64_t v53 = *v34;
          BlueFin::GlDbgCodec::Rvw(a1, &v53);
          if (!*((_DWORD *)a1 + 143)) {
            *unsigned int v34 = v53;
          }
        }
        uint64_t v35 = (unsigned __int8 *)(a2 + 368 * v8 + 212);
        BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v35);
        if (*v35)
        {
          uint64_t v36 = 0;
          do
          {
            uint64_t v54 = *((_DWORD *)v16 - 8);
            BlueFin::GlDbgCodec::Rvw(a1, &v54);
            if (!*((_DWORD *)a1 + 143)) {
              *((_DWORD *)v16 - 8) = v54;
            }
            BlueFin::GlDbgCodec::Rvw(a1, v16 - 2);
            BlueFin::GlDbgCodec::Rvw(a1, v16 - 1);
            BlueFin::GlDbgCodec::Rvw(a1, v16);
            BOOL result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
            uint64_t v37 = (unsigned __int8 *)v16 - 28;
            if (result < 0x90) {
              unsigned __int8 *v37 = 1;
            }
            else {
              BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v37);
            }
            ++v36;
            v16 += 5;
          }
          while (v36 < *v35);
        }
        int v7 = v8 + 1;
        if (*(_DWORD *)a2 <= (v8 + 1)) {
          goto LABEL_43;
        }
      }
      int v45 = 0;
      BlueFin::GlDbgCodec::Rvw(a1, &v45);
      *uint64_t v9 = v45;
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 368 * v8 + 12));
LABEL_15:
      *(unsigned char *)(a2 + 368 * v8 + 13) = -8;
      goto LABEL_16;
    }
LABEL_43:
    if (v42 <= 0x8F)
    {
      unsigned int v38 = a2 + 55208;
      *int v41 = -1;
      *(_OWORD *)(a2 + 55216) = 0u;
      *(_OWORD *)(a2 + 55232) = 0u;
      *(_OWORD *)(a2 + 55248) = 0u;
    }
    else
    {
      unsigned int v38 = a2 + 55208;
      int v44 = *v41;
      BlueFin::GlDbgCodec::Rvw(a1, &v44);
      if (!*((_DWORD *)a1 + 143)) {
        *int v41 = v44;
      }
      for (uint64_t i = 0; i != 32; i += 8)
        BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 55216 + i));
      for (uint64_t j = 0; j != 16; j += 4)
        BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 55248 + j));
      if (v42 >= 0x96) {
        return BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)(a2 + 55264));
      }
    }
    *(void *)(v38 + 56) = 0;
  }
  return result;
}

{
  uint64_t result;
  int v5;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 5));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 8));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v5 = 0;
    do
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(*(void *)(a2 + 16) + v5++));
    while (*(_DWORD *)(a2 + 12) > v5);
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 64));

  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 72));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 1));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 3));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 5));

  return BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 12));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (double *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));

  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
}

{
  uint64_t result;
  int v5;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 10));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
  if (*(_DWORD *)(a2 + 12))
  {
    uint64_t v5 = 0;
    do
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(*(void *)(a2 + 16) + v5++));
    while (*(_DWORD *)(a2 + 12) > v5);
  }
  return result;
}

{
  uint64_t result;
  unsigned __int8 v5;

  BlueFin::GlDbgCodec::Rvw(a1, (float *)a2);
  uint64_t v5 = *(_DWORD *)(a2 + 4);
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v5;
  }
  return result;
}

{
  unsigned int v4;
  unsigned int v6;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  unsigned __int8 v6 = 0;
  if (v4 > 0xB)
  {
    if (v4 > 0x12)
    {
      unsigned __int8 v6 = 3;
      BlueFin::GlDbgCodec::RvwArray(a1, (int *)a2, &v6);
      unsigned __int8 v6 = 3;
      BlueFin::GlDbgCodec::RvwArray(a1, (int *)(a2 + 40), &v6);
      unsigned __int8 v6 = 3;
      BlueFin::GlDbgCodec::RvwArray(a1, (unsigned int *)(a2 + 80), &v6);
      goto LABEL_7;
    }
    unsigned __int8 v6 = 2;
    BlueFin::GlDbgCodec::RvwArray(a1, (int *)a2, &v6);
    unsigned __int8 v6 = 2;
    BlueFin::GlDbgCodec::RvwArray(a1, (int *)(a2 + 40), &v6);
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, (int *)a2);
    BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 40));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 80));
LABEL_7:
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 120));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 124));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 132));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 128));
  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 135));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 4));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 8));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 5));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 6));
}

{
  unsigned int v4;
  unsigned __int8 v6;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 10));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 13));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 20));
  if (v4 < 0x13)
  {
    unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
    BlueFin::GlDbgCodec::Rvw(a1, &v6);
    *(_WORD *)(a2 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 24));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 26));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 28));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 32));
  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 36));
}

{
  int Extended;
  int v6;
  __int16 *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  float *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  uint64_t v38;
  __int16 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  const char *v42;
  int v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;

  char v47 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v47);
  if (v47 >= 0x22u && (v47 - 100) >= 3u)
  {
    uint64_t v42 = "GlExtSensorType::IsIntValidSensor(ucSensorType)";
    DeviceFaultNotify("gldebug_codec.cpp", 4286, "Rvw", (char)"GlExtSensorType::IsIntValidSensor(ucSensorType)");
    int v43 = 4286;
    goto LABEL_119;
  }
  int v46 = 103;
  BlueFin::GlExtSensorType::SetFromInt(&v46, v47);
  if (v46 - 100 > 2) {
    Extended = BlueFin::GlExtSensorType::Get((BlueFin::GlExtSensorType *)&v46);
  }
  else {
    Extended = BlueFin::GlExtSensorType::GetExtended((BlueFin::GlExtSensorType *)&v46);
  }
  *(_DWORD *)a2 = Extended;
  uint64_t v48 = *(_DWORD *)(a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, &v48);
  if (*((_DWORD *)a1 + 143))
  {
    unsigned __int8 v6 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    unsigned __int8 v6 = v48;
    *(_DWORD *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v48;
  }
  switch(v6)
  {
    case 0:
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 8));
      goto LABEL_16;
    case 1:
      BlueFin::GlDbgCodec::Rvw(a1, a2 + 8);
      goto LABEL_16;
    case 2:
      goto LABEL_16;
    case 3:
    case 5:
    case 6:
      BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)(a2 + 8));
      goto LABEL_16;
    case 4:
      BlueFin::GlDbgCodec::Rvw(a1, a2 + 8);
LABEL_16:
      if (v47 == 20)
      {
LABEL_120:
        uint64_t v42 = "0";
        DeviceFaultNotify("gldebug_codec.cpp", 4429, "Rvw", (char)"0");
        int v43 = 4429;
        goto LABEL_119;
      }
      int v7 = (__int16 *)(a2 + 32);
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 32));
      uint64_t v9 = *(__int16 *)(a2 + 32);
      if (v47 <= 0x63u)
      {
        switch(v47)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
            if (v9 < 1)
            {
              LOWORD(v12) = *(_WORD *)(a2 + 32);
            }
            else
            {
              int v10 = 0;
              int v11 = (float *)(a2 + 48);
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v11 - 4);
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v11);
                ++v10;
                uint64_t v12 = *v7;
                v11 += 22;
              }
              while (v10 < v12);
            }
            __int16 v16 = ((*(_DWORD *)a2 << 16) - 131073) < 0x3FFFF
               || ((*(_DWORD *)a2 << 16) - 1638401) < 0x3FFFF;
            if (v9 >= 1 && v16) {
              return BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 88 * (__int16)(v12 - 1) + 88));
            }
            return result;
          case 8u:
          case 9u:
            if (v9 >= 1)
            {
              int v19 = 0;
              int v20 = a2 + 88;
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(v20 - 48));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v20 - 40));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v20 - 32));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v20 - 24));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v20 - 16));
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v20);
                ++v19;
                v20 += 88;
              }
              while (v19 < *v7);
            }
            return result;
          case 0xAu:
          case 0x21u:
            if (v9 >= 1)
            {
              int v21 = 0;
              int v22 = a2 + 88;
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(v22 - 48));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v22 - 40));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v22 - 32));
                BlueFin::GlDbgCodec::Rvw(a1, (double *)(v22 - 24));
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v22);
                ++v21;
                v22 += 88;
              }
              while (v21 < *v7);
            }
            return result;
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
            if (v9 >= 1)
            {
              uint64_t v13 = 0;
              uint64_t v14 = (float *)(a2 + 88);
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v14 - 24);
                BlueFin::GlDbgCodec::Rvw(a1, v14 - 10);
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v14);
                ++v13;
                v14 += 22;
              }
              while (v13 < *v7);
            }
            return result;
          case 0x11u:
            if (v9 >= 1)
            {
              __int16 v23 = 0;
              int v24 = (__int16 *)(a2 + 120);
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, v24 - 40);
                uint64_t v49 = *((_DWORD *)v24 - 18);
                BlueFin::GlDbgCodec::Rvw(a1, &v49);
                if (!*((_DWORD *)a1 + 143)) {
                  *((_DWORD *)v24 - 18) = v49;
                }
                uint64_t v50 = *(_DWORD *)v24;
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v50);
                if (!*((_DWORD *)a1 + 143)) {
                  *(_DWORD *)int v24 = v50;
                }
                ++v23;
                v24 += 44;
              }
              while (v23 < *v7);
            }
            return result;
          case 0x12u:
            if (v9 >= 1)
            {
              __int16 v25 = 0;
              int v26 = a2 + 40;
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v26);
                uint64_t v51 = *(_DWORD *)(v26 + 8);
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v51);
                if (!*((_DWORD *)a1 + 143)) {
                  *(_DWORD *)(v26 + 8) = v51;
                }
                ++v25;
                v26 += 88;
              }
              while (v25 < *v7);
            }
            return result;
          case 0x13u:
            if (v9 >= 1)
            {
              unsigned __int8 v27 = 0;
              uint64_t v28 = a2 + 40;
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v28);
                uint64_t v52 = *(_DWORD *)(v28 + 8);
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v52);
                if (!*((_DWORD *)a1 + 143)) {
                  *(_DWORD *)(v28 + 8) = v52;
                }
                ++v27;
                v28 += 88;
              }
              while (v27 < *v7);
            }
            return result;
          case 0x14u:
            goto LABEL_120;
          case 0x15u:
            if (v9 >= 1)
            {
              __int16 v29 = 0;
              int v30 = (float *)(a2 + 88);
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v30 - 24);
                uint64_t v53 = *((_DWORD *)v30 - 10);
                BlueFin::GlDbgCodec::Rvw(a1, &v53);
                if (!*((_DWORD *)a1 + 143)) {
                  *((_DWORD *)v30 - 10) = v53;
                }
                BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v30 - 9);
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v30);
                ++v29;
                v30 += 22;
              }
              while (v29 < *v7);
            }
            return result;
          case 0x16u:
            if (v9 >= 1)
            {
              __int16 v31 = 0;
              __int16 v32 = (float *)(a2 + 88);
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v32 - 24);
                uint64_t v54 = *((_DWORD *)v32 - 10);
                BlueFin::GlDbgCodec::Rvw(a1, &v54);
                if (!*((_DWORD *)a1 + 143)) {
                  *((_DWORD *)v32 - 10) = v54;
                }
                BlueFin::GlDbgCodec::Rvw(a1, v32 - 9);
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v32);
                ++v31;
                v32 += 22;
              }
              while (v31 < *v7);
            }
            return result;
          case 0x17u:
            if (v9 >= 1)
            {
              __int16 v33 = 0;
              unsigned int v34 = (float *)(a2 + 88);
              do
              {
                BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v34 - 24);
                BlueFin::GlDbgCodec::Rvw(a1, (double *)v34 - 5);
                BlueFin::GlDbgCodec::Rvw(a1, (double *)v34 - 4);
                BlueFin::GlDbgCodec::Rvw(a1, v34 - 6);
                BlueFin::GlDbgCodec::Rvw(a1, v34 - 5);
                BlueFin::GlDbgCodec::Rvw(a1, v34 - 4);
                BlueFin::GlDbgCodec::Rvw(a1, v34 - 3);
                if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0x3E)
                {
                  if (!*((_DWORD *)a1 + 143)) {
                    *(v34 - 2) = 0.0;
                  }
                }
                else
                {
                  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)v34 - 2);
                }
                BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v34);
                ++v33;
                v34 += 22;
              }
              while (v33 < *v7);
            }
            return result;
          case 0x18u:
            uint64_t v42 = "false";
            DeviceFaultNotify("gldebug_codec.cpp", 4511, "Rvw", (char)"false");
            int v43 = 4511;
            goto LABEL_119;
          case 0x1Du:
            if (v9 < 1) {
              return result;
            }
            uint64_t v35 = 0;
            uint64_t v36 = (unsigned int *)(a2 + 72);
            break;
          case 0x1Eu:
          case 0x1Fu:
            uint64_t v42 = "false";
            DeviceFaultNotify("gldebug_codec.cpp", 4378, "Rvw", (char)"false");
            int v43 = 4378;
            goto LABEL_119;
          case 0x20u:
            uint64_t v42 = "false";
            DeviceFaultNotify("gldebug_codec.cpp", 4514, "Rvw", (char)"false");
            int v43 = 4514;
            goto LABEL_119;
          default:
            goto LABEL_126;
        }
        while (1)
        {
          BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v36 - 16);
          BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)v36 - 3);
          uint64_t v55 = *(v36 - 4);
          BlueFin::GlDbgCodec::Rvw(a1, &v55);
          if (*((_DWORD *)a1 + 143))
          {
            uint64_t v37 = *(v36 - 4);
          }
          else
          {
            uint64_t v37 = v55;
            *(v36 - bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v55;
          }
          if (v37 == 2)
          {
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v36 - 6);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v36 - 5);
            BlueFin::GlDbgCodec::Rvw(a1, v36 - 2);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v36 - 2);
            BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)v36 - 1);
            BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v36);
          }
          else if (v37 == 1)
          {
            BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(v36 - 3));
          }
          else
          {
            if (v37)
            {
              uint64_t v42 = "false";
              DeviceFaultNotify("gldebug_codec.cpp", 4504, "Rvw", (char)"false");
              int v43 = 4504;
              goto LABEL_119;
            }
            BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(v36 - 3));
          }
          ++v35;
          v36 += 22;
          if (v35 >= *v7) {
            return result;
          }
        }
      }
      switch(v47)
      {
        case 'd':
          if (v9 >= 1)
          {
            unsigned int v38 = 0;
            int v39 = (__int16 *)(a2 + 88);
            do
            {
              BlueFin::GlDbgCodec::Rvw(a1, v39 - 24);
              int v45 = *((_DWORD *)v39 - 10);
              BlueFin::GlDbgCodec::Rvw(a1, &v45);
              if (!*((_DWORD *)a1 + 143)) {
                *((_DWORD *)v39 - 10) = v45;
              }
              int v44 = *(_DWORD *)v39;
              BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v44);
              if (!*((_DWORD *)a1 + 143)) {
                *(_DWORD *)int v39 = v44;
              }
              ++v38;
              v39 += 44;
            }
            while (v38 < *v7);
          }
          break;
        case 'e':
          if (v9 >= 1)
          {
            int v40 = 0;
            int v41 = (unsigned __int8 *)(a2 + 88);
            do
            {
              BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v41 - 24);
              BlueFin::GlDbgCodec::Rvw(a1, v41 - 39);
              BlueFin::GlDbgCodec::Rvw(a1, v41 - 40);
              BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v41);
              ++v40;
              v41 += 88;
            }
            while (v40 < *v7);
          }
          break;
        case 'f':
          if (v9 >= 1)
          {
            unsigned int v17 = 0;
            int v18 = (unsigned __int8 *)(a2 + 64);
            do
            {
              BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)v18 - 12);
              BlueFin::GlDbgCodec::Rvw(a1, (double *)v18 - 2);
              BlueFin::GlDbgCodec::Rvw(a1, (double *)v18 - 1);
              BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v18);
              ++v17;
              v18 += 88;
            }
            while (v17 < *v7);
          }
          break;
        default:
LABEL_126:
          uint64_t v42 = "false";
          DeviceFaultNotify("gldebug_codec.cpp", 4555, "Rvw", (char)"false");
          int v43 = 4555;
LABEL_119:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", v43, v42);
      }
      return result;
    default:
      uint64_t v42 = "0";
      DeviceFaultNotify("gldebug_codec.cpp", 4315, "Rvw", (char)"0");
      int v43 = 4315;
      goto LABEL_119;
  }
}

{
  uint64_t result;
  unsigned __int8 v5;

  BlueFin::GlDbgCodec::Rvw(a1, (double *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  uint64_t v5 = *(_DWORD *)(a2 + 32);
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 32) = v5;
  }
  return result;
}

{
  unsigned int v4;
  uint64_t result;
  unsigned __int8 v6;
  unsigned __int8 v7;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 1));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 2));
  if (v4 >= 0x30) {
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 3));
  }
  unsigned __int8 v6 = *(_DWORD *)(a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, &v6);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  BlueFin::GlDbgCodec::Rvw(a1, &v7);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 8) = v7;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 16);
  BlueFin::GlDbgCodec::Rvw(a1, (_DWORD *)(a2 + 152));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 180));
  if (v4 >= 0x1D)
  {
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 182));
    if (v4 >= 0x26)
    {
      BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 184));
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 185));
      if (v4 >= 0x42)
      {
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 186));
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 187));
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 188));
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 189));
        BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 190));
        BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 191));
        if (v4 >= 0xA9)
        {
          BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 192));
          BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 193));
          if (v4 >= 0xB2)
          {
            BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 194));
            if (v4 >= 0xC4) {
              return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 195));
            }
          }
        }
      }
    }
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));

  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 64));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 72));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 80));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 88));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 96));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 104));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 112));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 120));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 128));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 136));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 144));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 152));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 160));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 162));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 164));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 168));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 176));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 184));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 192));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 200));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 208));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 216));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 224));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 232));
}

{
  uint64_t result;
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 6));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 64));
  BOOL result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  if (result >= 0x40)
  {
    return BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 72));
  }
  return result;
}

{
  unsigned int v4;
  uint64_t result;
  unsigned __int8 v6;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 32));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 72));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 80));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 88));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 120));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t *)(a2 + 128));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 144));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 152));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 160));
  if (v4 >= 0x5C)
  {
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 168));
    if (v4 >= 0x6E)
    {
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 11));
      if (v4 >= 0x8A)
      {
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 96));
        BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 104));
        BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 112));
        if (v4 >= 0x8F)
        {
          unsigned __int8 v6 = *(_DWORD *)(a2 + 216);
          BlueFin::GlDbgCodec::Rvw(a1, &v6);
          if (!*((_DWORD *)a1 + 143)) {
            *(_DWORD *)(a2 + 216) = v6;
          }
          return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 220));
        }
      }
    }
  }
  return result;
}

{
  unsigned __int8 v5;

  uint64_t v5 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)a2 = v5;
  }
  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));
}

{
  unsigned __int8 v5;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 2));
  uint64_t v5 = *(_DWORD *)(a2 + 8);
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 8) = v5;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)(a2 + 32));
  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 40));
}

{
  unsigned __int8 v5;

  BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)a2);
  uint64_t v5 = *(_DWORD *)(a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v5;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)(a2 + 8));
  return BlueFin::GlDbgCodec::Rvw(a1, (__int16 *)(a2 + 16));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));

  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 24));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unint64_t *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 8));

  return BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 16));
}

{
  unsigned __int8 v5;

  uint64_t v5 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143))
  {
    *(_DWORD *)a2 = v5;
    *(unsigned char *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -78;
  }
  return BlueFin::GlDbgCodec::RvwArray(a1, a2 + 8, (unsigned __int8 *)(a2 + 4));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 1));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 8));

  return BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 12));
}

{
  uint64_t result;
  unsigned __int8 v5;

  uint64_t v5 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)a2 = v5;
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  switch(*(_DWORD *)a2)
  {
    case 0:
    case 1:
    case 2:
    case 6:
    case 7:
    case 8:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 8));
      break;
    case 3:
    case 4:
    case 5:
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 8));
      break;
    default:
      DeviceFaultNotify("gldebug_codec.cpp", 7001, "Rvw", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 7001, "false");
  }
  return result;
}

{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t result;
  double v12;
  float v13;
  unsigned __int8 v14;

  int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  uint64_t v14 = *(unsigned char *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v14);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(a2 + 16));
  LOBYTE(v13) = 1;
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)&v13);
  if (*((_DWORD *)a1 + 143)) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = LOBYTE(v13) == 1;
  }
  if (!v5)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 7059, "Rvw", (char)"(rValue.GetMaxByteSize() >> 2) == ucWords");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 7059, "(rValue.GetMaxByteSize() >> 2) == ucWords");
  }
  if (LOBYTE(v13))
  {
    unsigned __int8 v6 = 0;
    do
    {
      LODWORD(v12) = *(_DWORD *)(a2 + 12);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)&v12);
      if (!*((_DWORD *)a1 + 143)) {
        *(_DWORD *)(a2 + 12) = LODWORD(v12);
      }
      ++v6;
    }
    while (v6 < LOBYTE(v13));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 40));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 44));
  uint64_t v13 = -200.0;
  if (v4 <= 0x1E) {
    BlueFin::GlDbgCodec::Rvw(a1, &v13);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 56));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 48));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 72));
  uint64_t v12 = *(float *)(a2 + 88);
  BlueFin::GlDbgCodec::Rvw(a1, &v12);
  int v7 = v12;
  *(float *)(a2 + 88) = v7;
  BlueFin::GlDbgCodec::Rvw(a1, (double *)(a2 + 80));
  uint64_t v12 = *(float *)(a2 + 92);
  BlueFin::GlDbgCodec::Rvw(a1, &v12);
  __int16 v8 = v12;
  *(float *)(a2 + 92) = v8;
  uint64_t v12 = *(float *)(a2 + 96);
  BlueFin::GlDbgCodec::Rvw(a1, &v12);
  uint64_t v9 = v12;
  *(float *)(a2 + 96) = v9;
  uint64_t v12 = *(float *)(a2 + 100);
  BlueFin::GlDbgCodec::Rvw(a1, &v12);
  int v10 = v12;
  *(float *)(a2 + 100) = v10;
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 104));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 18));
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 108));
  if (v4 >= 0x79) {
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 112));
  }
  if (v13 > -200.0 && (*(unsigned char *)(a2 + 13) & 0x40) == 0) {
    *(float *)(a2 + 108) = v13 + 174.0;
  }
  if (v4 >= 0x1B)
  {
    BOOL result = BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 24));
    if (v4 >= 0x7E) {
      return BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 28));
    }
  }
  return result;
}

{
  unsigned __int8 v5;

  uint64_t v5 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143))
  {
    *(_DWORD *)a2 = v5;
    *(unsigned char *)(a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  }
  return BlueFin::GlDbgCodec::RvwArray(a1, (unsigned __int8 *)(a2 + 8), (unsigned __int8 *)(a2 + 4));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 24));

  return BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 28));
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, double *a2)
{
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 3);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
}

{
  uint64_t result;
  unint64_t v5;
  double *v6;
  unsigned int v7;

  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 3);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  int v7 = 5;
  BOOL result = BlueFin::GlDbgCodec::Rvw(a1, &v7);
  if (v7)
  {
    uint64_t v5 = 0;
    unsigned __int8 v6 = a2 + 5;
    do
    {
      BOOL result = BlueFin::GlDbgCodec::Rvw(a1, v6);
      ++v5;
      ++v6;
    }
    while (v5 < v7);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, unsigned __int8 *a2)
{
  uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
  if (*a2)
  {
    unint64_t v5 = 0;
    unsigned __int8 v6 = a2 + 2;
    do
    {
      BlueFin::GlDbgCodec::Rvw(a1, v6 - 1);
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, v6);
      ++v5;
      v6 += 2;
    }
    while (v5 < *a2);
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);
  if (!*((_DWORD *)a1 + 143)) {
    a2[2] = 12;
  }

  return BlueFin::GlDbgCodec::RvwArray(a1, (uint64_t)(a2 + 4), a2 + 2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, signed __int8 *a2)
{
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 3);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 5);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 6);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 7);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, unsigned __int16 *a2)
{
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 3);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 5);
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 36));
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 60);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 124);
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 4));

  return BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 16));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 28));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 40));

  return BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 52));
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 16));

  return BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 28));
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, _DWORD *a2)
{
  unsigned __int8 v5 = *a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *a2 = v5;
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  if (!*((_DWORD *)a1 + 143) && result <= 0x4B && *a2 == 35) {
    *a2 = 34;
  }
  return result;
}

{
  unsigned int v5;
  unsigned __int8 v6;

  unsigned __int8 v6 = *a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v6);
  if (!*((_DWORD *)a1 + 143)) {
    *a2 = v6;
  }
  unsigned __int8 v5 = 6;
  return BlueFin::GlDbgCodec::RvwArray(a1, a2 + 1, &v5);
}

float BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) >= 0x6B)
  {
    unsigned __int8 v5 = *(_DWORD *)a2;
    BlueFin::GlDbgCodec::Rvw(a1, &v5);
    if (!*((_DWORD *)a1 + 143)) {
      *(_DWORD *)a2 = v5;
    }
  }
  BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 8));
  return BlueFin::GlDbgCodec::Rvw(a1, (int32x4_t *)(a2 + 72));
}

BlueFin::GlDbgProxy *BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlEngineImplStd *a2)
{
  unsigned int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 32);
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 33);
  BlueFin::GlDbgCodec::Rvw(this, (BlueFin::GlEngineImplStd *)((char *)a2 + 264));
  uint64_t result = (BlueFin::GlDbgProxy *)BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 592);
  if (v4 >= 3)
  {
    BOOL v6 = 1;
    BlueFin::GlDbgCodec::Rvw(this, &v6);
    uint64_t result = BlueFin::GlDbgCodec::Rvw(this, (BlueFin::GlEngineImplStd *)((char *)a2 + 600));
    if (v4 >= 0x5A) {
      return (BlueFin::GlDbgProxy *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)a2 + 1231);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, __int16 *a2)
{
  int v4 = *a2;
  uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
  int v6 = *a2;
  if (v6 > v4)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 4563, "Rvw", (char)"rValue.sSensNum <= ssOrgSensNum");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 4563, "rValue.sSensNum <= ssOrgSensNum");
  }
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, *((void *)a2 + 1) + v7);
      ++v8;
      v7 += 3560;
    }
    while (v8 < *a2);
  }
  return result;
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 3);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 5);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 6);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 7);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 8);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 9);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 10);
}

{
  uint64_t vars8;

  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 3);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 4);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 5);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 6);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 7);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 8);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 9);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 10);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 11);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlMeas *a2)
{
  BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)a2);
  BlueFin::GlDbgCodec::Rvw(this, (uint64_t)a2 + 4);
  unsigned int v5 = 100;
  return BlueFin::GlDbgCodec::RvwArray(this, *((void *)a2 + 2188), &v5);
}

void *BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlRequestImpl **a2)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 143)) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t v62 = "(m_eMode == READ && pValue == nullptr) || pValue != nullptr";
    DeviceFaultNotify("gldebug_codec.cpp", 6438, "Rvw", (char)"(m_eMode == READ && pValue == nullptr) || pValue != nullptr");
    int v63 = 6438;
    goto LABEL_183;
  }
  unsigned int v5 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
  if (v5 <= 8)
  {
    uint64_t v62 = "false";
    DeviceFaultNotify("gldebug_codec.cpp", 6445, "Rvw", (char)"false");
    int v63 = 6445;
LABEL_183:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", v63, v62);
  }
  unsigned int v6 = v5;
  if (*a2) {
    int v7 = *((_DWORD *)*a2 + 4);
  }
  else {
    int v7 = -1;
  }
  LOBYTE(__src[0]) = v7;
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)__src);
  if (*((_DWORD *)this + 143))
  {
    uint64_t v8 = *a2;
    if (!*a2)
    {
      DeviceFaultNotify("gldebug_codec.cpp", 6493, "Rvw", (char)"pValue != nullptr");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 6493, "pValue != nullptr");
    }
  }
  else
  {
    int v7 = LOBYTE(__src[0]);
    uint64_t v8 = *a2;
    if (!*a2)
    {
      switch(LOBYTE(__src[0]))
      {
        case 0:
          BlueFin::GlRequestImplPosPeriodic::GlRequestImplPosPeriodic((BlueFin::GlRequestImplPos *)__src, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          int v7 = 0;
          break;
        case 1:
          BlueFin::GlRequestImplPosSingleShot::GlRequestImplPosSingleShot((BlueFin::GlRequestImplPos *)__src, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7);
          int v7 = 1;
          break;
        case 2:
          int v7 = 2;
          LODWORD(__src[1]) = 2;
          WORD2(__src[1]) = 1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          HIDWORD(__src[5]) = 0;
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[5] = 0;
          WORD4(__src[5]) = 0;
          *(void *)&__src[0] = &unk_270EC72F8;
          *((void *)&__src[0] + 1) = 0;
          int v11 = -65536;
          goto LABEL_31;
        case 3:
          int v7 = 3;
          LODWORD(__src[1]) = 3;
          WORD2(__src[1]) = 1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[5] = 0;
          WORD4(__src[5]) = 0;
          *(void *)&__src[0] = &unk_270EC7540;
          *((void *)&__src[0] + 1) = 0;
          LODWORD(__src[6]) = 0;
          HIDWORD(__src[5]) = 0;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          break;
        case 4:
          int v7 = 4;
          LODWORD(__src[1]) = 4;
          WORD2(__src[1]) = 1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[0] = &unk_270EC8538;
          *((void *)&__src[0] + 1) = 0;
          LODWORD(__src[5]) = 400;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          break;
        case 5:
          *((void *)&__src[0] + 1) = 0;
          int v7 = 5;
          LODWORD(__src[1]) = 5;
          WORD2(__src[1]) = 1;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          int v10 = &unk_270EC80A8;
          goto LABEL_28;
        case 6:
          int v7 = 6;
          LODWORD(__src[1]) = 6;
          WORD2(__src[1]) = 1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[0] = &unk_270EC7E60;
          *((void *)&__src[0] + 1) = 0;
          memset(&__src[5], 0, 34);
          int v11 = -65506;
LABEL_31:
          *(_DWORD *)((char *)&__src[1] + 6) = v11;
          break;
        case 7:
          int v7 = 7;
          LODWORD(__src[1]) = 7;
          WORD2(__src[1]) = 1;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          uint64_t v9 = &unk_270EC6990;
          memset(&__src[3], 0, 32);
          *((void *)&__src[2] + 1) = 0;
          goto LABEL_25;
        case 8:
          BlueFin::GlRequestImplFactoryTest::GlRequestImplFactoryTest((uint64_t)__src, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          int v7 = 8;
          break;
        case 9:
          *((void *)&__src[0] + 1) = 0;
          int v7 = 9;
          LODWORD(__src[1]) = 9;
          WORD2(__src[1]) = 1;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          int v10 = &unk_270EC89F8;
LABEL_28:
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[5] = 0;
          *(void *)&__src[0] = v10;
          break;
        case 0xA:
          int v7 = 10;
          LODWORD(__src[1]) = 10;
          WORD2(__src[1]) = 1;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[5] = 0;
          *(void *)&__src[0] = &unk_270EC82F0;
          *((void *)&__src[0] + 1) = 0;
          DWORD2(__src[5]) = 0;
          break;
        case 0xB:
          *(double *)uint64_t v67 = 0.0;
          uint64_t v68 = 0;
          int v70 = 0;
          uint64_t v69 = 0;
          BlueFin::GlRequestImplPlatformTest::GlRequestImplPlatformTest((uint64_t)__src, 0, 0, (uint64_t)v67);
          int v7 = 11;
          break;
        case 0xC:
          BlueFin::GlRequestImplGeofence::GlRequestImplGeofence((uint64_t)__src, 0, 0, 0, 4, 7u, 0, 0, 0.0, 0.0, 0.0, 1, 0);
          int v7 = 12;
          break;
        case 0xD:
          BlueFin::GlRequestImplBreadcrumb::GlRequestImplBreadcrumb((BlueFin::GlRequestImplBreadcrumb *)__src, 0, 0, 0, 60, 1, 1, 0);
          int v7 = 13;
          break;
        case 0xE:
          int v7 = 14;
          LODWORD(__src[1]) = 14;
          WORD2(__src[1]) = 1;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          __src[5] = 0uLL;
          uint64_t v9 = &unk_270EC7788;
LABEL_25:
          __src[0] = (unint64_t)v9;
          break;
        case 0xF:
          int v7 = 15;
          LODWORD(__src[1]) = 15;
          WORD2(__src[1]) = 1;
          *(_DWORD *)((char *)&__src[1] + 6) = -1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          *(void *)&__src[0] = &unk_270EC79D0;
          *((void *)&__src[0] + 1) = 0;
          memset(&__src[5], 0, 44);
          break;
        case 0x10:
          int v7 = 16;
          LODWORD(__src[1]) = 16;
          WORD2(__src[1]) = 1;
          *(void *)((char *)&__src[1] + 12) = -1;
          DWORD1(__src[2]) = -1;
          __src[3] = 0uLL;
          *((void *)&__src[2] + 1) = 0;
          LOWORD(__src[4]) = 1;
          *((void *)&__src[4] + 1) = 0;
          memset(&__src[5], 0, 24);
          *(void *)&__src[0] = &unk_270EC7C18;
          *((void *)&__src[0] + 1) = 0;
          *(_DWORD *)((char *)&__src[1] + 6) = -65536;
          break;
        default:
          DeviceFaultNotify("gldebug_codec.cpp", 6488, "Rvw", (char)"false");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 6488, "false");
      }
      uint64_t v8 = __src;
      *a2 = (BlueFin::GlRequestImpl *)__src;
    }
  }
  uint64_t v12 = *((void *)v8 + 6);
  BOOL v66 = *((void *)v8 + 5) != 0;
  BOOL v65 = v12 != 0;
  BOOL v64 = *((void *)v8 + 7) != 0;
  if (v6 >= 0xF)
  {
    BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v8 + 20);
    uint64_t v8 = *a2;
  }
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v8 + 21);
  BlueFin::GlDbgCodec::Rvw(this, (__int16 *)*a2 + 11);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int16 *)*a2 + 12);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)*a2 + 7);
  if (v6 > 0xE) {
    BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)*a2 + 8);
  }
  BlueFin::GlDbgCodec::Rvw(this, (int *)*a2 + 9);
  BlueFin::GlDbgCodec::Rvw(this, &v66);
  BlueFin::GlDbgCodec::Rvw(this, &v65);
  BlueFin::GlDbgCodec::Rvw(this, &v64);
  if (!*((_DWORD *)this + 143))
  {
    if (v66) {
      uint64_t v13 = BlueFin::GlDbgProxyGlReqOnStart;
    }
    else {
      uint64_t v13 = 0;
    }
    *((void *)*a2 + 5) = v13;
    if (v65) {
      uint64_t v14 = BlueFin::GlDbgProxyGlReqOnResponse;
    }
    else {
      uint64_t v14 = 0;
    }
    *((void *)*a2 + 6) = v14;
    if (v64) {
      BOOL v15 = BlueFin::GlDbgProxyGlReqOnStop;
    }
    else {
      BOOL v15 = 0;
    }
    *((void *)*a2 + 7) = v15;
  }
  switch(v7)
  {
    case 0:
      uint64_t v16 = (uint64_t)*a2;
      BlueFin::GlDbgCodec::Rvw(this, *a2);
      BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)(v16 + 108));
      BlueFin::GlDbgCodec::Rvw(this, (int *)(v16 + 112));
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (int *)(v16 + 116));
      goto LABEL_176;
    case 1:
      uint64_t v42 = *a2;
      unsigned int v43 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v42);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned __int16 *)v42 + 53);
      if (v43 >= 0x2D)
      {
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v42 + 109);
        if (v43 != 45)
        {
          uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v42 + 110);
          if (v43 >= 0x85) {
            uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (int *)v42 + 29);
          }
        }
      }
      goto LABEL_176;
    case 2:
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, *a2);
      goto LABEL_176;
    case 3:
      int v39 = *a2;
      BlueFin::GlDbgCodec::Rvw(this, *a2);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v39 + 24);
      goto LABEL_176;
    case 4:
      int v24 = *a2;
      BlueFin::GlDbgCodec::Rvw(this, *a2);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (int *)v24 + 20);
      goto LABEL_176;
    case 5:
      __int16 v29 = *a2;
      BlueFin::GlDbgCodec::Rvw(this, *a2);
      v67[0] = *((void *)v29 + 10) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, v67);
      if (*((_DWORD *)this + 143)) {
        goto LABEL_176;
      }
      BOOL v30 = !v67[0];
      __int16 v31 = BlueFin::GlDbgProxyGlReqOnCntin;
      goto LABEL_154;
    case 6:
      uint64_t v48 = *a2;
      unsigned int v49 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v48);
      uint64_t v50 = *((void *)v48 + 11);
      v67[0] = *((void *)v48 + 10) != 0;
      BOOL v73 = v50 != 0;
      BOOL v72 = *((void *)v48 + 12) != 0;
      BlueFin::GlDbgCodec::Rvw(this, v67);
      BlueFin::GlDbgCodec::Rvw(this, &v73);
      BlueFin::GlDbgCodec::Rvw(this, &v72);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (__int16 *)v48 + 56);
      if (!*((_DWORD *)this + 143))
      {
        if (v67[0]) {
          uint64_t v51 = BlueFin::GlDbgProxyGlReqOnSyncInReport;
        }
        else {
          uint64_t v51 = 0;
        }
        if (v73) {
          uint64_t v52 = BlueFin::GlDbgProxyGlReqOnSyncInStatus;
        }
        else {
          uint64_t v52 = 0;
        }
        *((void *)v48 + 10) = v51;
        *((void *)v48 + 11) = v52;
        if (v72) {
          uint64_t v53 = BlueFin::GlDbgProxyGlReqOnSyncInLatched;
        }
        else {
          uint64_t v53 = 0;
        }
        *((void *)v48 + 12) = v53;
      }
      if (v49 >= 0x37)
      {
        BOOL v71 = *((void *)v48 + 13) != 0;
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, &v71);
        if (!*((_DWORD *)this + 143))
        {
          if (v71) {
            uint64_t v54 = BlueFin::GlDbgProxyGlReqOnSyncinReportCurrentTime;
          }
          else {
            uint64_t v54 = 0;
          }
          *((void *)v48 + 13) = v54;
        }
      }
      goto LABEL_176;
    case 7:
      int v40 = *a2;
      v67[0] = *((void *)*a2 + 8) != 0;
      BlueFin::GlDbgCodec::Rvw(this, v67);
      BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v40 + 18);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v40 + 19);
      if (!*((_DWORD *)this + 143))
      {
        if (v67[0]) {
          int v41 = BlueFin::GlDbgProxyGlReqOnTimer;
        }
        else {
          int v41 = 0;
        }
        *((void *)v40 + 8) = v41;
      }
      goto LABEL_176;
    case 8:
      __int16 v29 = *a2;
      unsigned int v55 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v29);
      BOOL v73 = *((void *)v29 + 10) != 0;
      BlueFin::GlDbgCodec::Rvw(this, &v73);
      uint64_t v56 = (unsigned __int8 *)v29 + 88;
      if (v55 < 0xF)
      {
        BlueFin::GlDbgCodec::Rvw(this, v56);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 89);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 90);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 91);
        v67[0] = *((_DWORD *)v29 + 23);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v67);
        if (!*((_DWORD *)this + 143)) {
          *((_DWORD *)v29 + 23) = v67[0];
        }
        v67[0] = *((_DWORD *)v29 + 24);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v67);
        if (!*((_DWORD *)this + 143)) {
          *((_DWORD *)v29 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v67[0];
        }
        BlueFin::GlDbgCodec::Rvw(this, (uint64_t)v29 + 104);
        BlueFin::GlDbgCodec::Rvw(this, (__int16 *)v29 + 50);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int16 *)v29 + 134);
        BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v29 + 272);
        BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v29 + 273);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 274);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 276);
        BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v29 + 278);
        BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v29 + 279);
        BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 275);
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v29 + 277);
      }
      else
      {
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (uint64_t)v56);
      }
      if (*((_DWORD *)this + 143)) {
        goto LABEL_176;
      }
      BOOL v30 = !v73;
      __int16 v31 = BlueFin::GlDbgProxyGlReqOnFactTest;
      goto LABEL_154;
    case 9:
      __int16 v29 = *a2;
      BlueFin::GlDbgCodec::Rvw(this, *a2);
      v67[0] = *((void *)v29 + 10) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, v67);
      if (*((_DWORD *)this + 143)) {
        goto LABEL_176;
      }
      BOOL v30 = !v67[0];
      __int16 v31 = BlueFin::GlDbgProxyGlReqOnAsstStatus;
      goto LABEL_154;
    case 10:
      __int16 v29 = *a2;
      BlueFin::GlDbgCodec::Rvw(this, *a2);
      v67[0] = *((void *)v29 + 10) != 0;
      BlueFin::GlDbgCodec::Rvw(this, v67);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v29 + 22);
      if (*((_DWORD *)this + 143)) {
        goto LABEL_176;
      }
      BOOL v30 = !v67[0];
      __int16 v31 = BlueFin::GlDbgProxyGlReqOnGpsData;
LABEL_154:
      if (v30) {
        char v57 = 0;
      }
      else {
        char v57 = v31;
      }
      *((void *)v29 + 10) = v57;
      goto LABEL_176;
    case 11:
      int v22 = *a2;
      unsigned int v23 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v22);
      if (v23 < 0xF)
      {
        v67[0] = 0;
        BlueFin::GlDbgCodec::Rvw(this, v67);
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (_DWORD *)v22 + 58);
      }
      else
      {
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (uint64_t)v22 + 80);
      }
      goto LABEL_176;
    case 12:
      __int16 v25 = *a2;
      unsigned int v26 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v25);
      BOOL v73 = *((void *)v25 + 18) != 0;
      BlueFin::GlDbgCodec::Rvw(this, &v73);
      unsigned int v27 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, (double *)v25 + 11);
      BlueFin::GlDbgCodec::Rvw(this, (double *)v25 + 12);
      if (v27 <= 8)
      {
        *(double *)uint64_t v67 = 0.0;
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (double *)v67);
        if (*(double *)v67 <= 0.0)
        {
          if (*(double *)v67 >= 0.0)
          {
            int v58 = 0;
            goto LABEL_167;
          }
          double v28 = -0.5;
        }
        else
        {
          double v28 = 0.5;
        }
        int v58 = (int)(*(double *)v67 + v28);
LABEL_167:
        *((_DWORD *)v25 + 26) = v58;
        if (v27 <= 1) {
          goto LABEL_169;
        }
        goto LABEL_168;
      }
      BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v25 + 26);
      if (v27 <= 0x11)
      {
LABEL_168:
        v67[0] = 0;
        BlueFin::GlDbgCodec::Rvw(this, v67);
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v25 + 112);
        goto LABEL_169;
      }
      BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v25 + 112);
      v67[0] = *((_DWORD *)v25 + 27);
      BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)v67);
      if (!*((_DWORD *)this + 143)) {
        *((_DWORD *)v25 + 27) = v67[0];
      }
      BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v25 + 29);
      BlueFin::GlDbgCodec::Rvw(this, (int *)v25 + 30);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (int *)v25 + 31);
      if (v27 >= 0x19) {
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v25 + 32);
      }
LABEL_169:
      if (!*((_DWORD *)this + 143))
      {
        if (v73) {
          uint64_t v59 = BlueFin::GlDbgProxyGlReqOnGeofenceEvent;
        }
        else {
          uint64_t v59 = 0;
        }
        *((void *)v25 + 18) = v59;
      }
      if (v26 >= 0x34)
      {
        BlueFin::GlDbgCodec::Rvw(this, (int *)v25 + 20);
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (BOOL *)v25 + 136);
      }
LABEL_176:
      uint64_t v60 = *a2;
      if (*((_DWORD *)this + 143) || *((_DWORD *)v60 + 4) != 12)
      {
        if (v60 == (BlueFin::GlRequestImplPos *)__src)
        {
          Memory = (BlueFin::GlRequestImpl *)BlueFin::GlMemAlloc::glAllocateMemory(44, 288, (uint64_t (*)(uint64_t))BlueFin::GlDbgMemory::Allocate);
          *a2 = Memory;
          return memcpy(Memory, __src, 0x120uLL);
        }
      }
      else
      {
        *a2 = 0;
      }
      return result;
    case 13:
      int v44 = *a2;
      unsigned int v45 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v44);
      v67[0] = *((void *)v44 + 22) != 0;
      BlueFin::GlDbgCodec::Rvw(this, v67);
      BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v44 + 41);
      BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v44 + 42);
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v44 + 43);
      if (!*((_DWORD *)this + 143))
      {
        if (v67[0]) {
          int v46 = BlueFin::GlDbgProxyGlReqOnbatchLocation;
        }
        else {
          int v46 = 0;
        }
        *((void *)v44 + 22) = v46;
      }
      if (v45 >= 0x22)
      {
        BOOL v73 = *((void *)v44 + 23) != 0;
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, &v73);
        if (!*((_DWORD *)this + 143))
        {
          if (v73) {
            char v47 = BlueFin::GlDbgProxyGlReqOnExerMeas;
          }
          else {
            char v47 = 0;
          }
          *((void *)v44 + 23) = v47;
        }
        if (v45 >= 0x3A) {
          uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (__int16 *)v44 + 96);
        }
      }
      goto LABEL_176;
    case 14:
      int v18 = *a2;
      unsigned int v19 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v18);
      v67[0] = *((void *)v18 + 10) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, v67);
      if (!*((_DWORD *)this + 143))
      {
        if (v67[0]) {
          int v20 = BlueFin::GlDbgProxyGlReqOnMeasData;
        }
        else {
          int v20 = 0;
        }
        *((void *)v18 + 10) = v20;
      }
      if (v19 >= 0x23)
      {
        BOOL v73 = *((void *)v18 + 11) != 0;
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, &v73);
        if (!*((_DWORD *)this + 143))
        {
          if (v73) {
            int v21 = BlueFin::GlDbgProxyGlReqOnNavData;
          }
          else {
            int v21 = 0;
          }
          *((void *)v18 + 11) = v21;
        }
      }
      goto LABEL_176;
    case 15:
      __int16 v32 = *a2;
      unsigned int v33 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
      BlueFin::GlDbgCodec::Rvw(this, v32);
      v67[0] = *((void *)v32 + 10) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, v67);
      int v34 = *((_DWORD *)this + 143);
      if (!v34)
      {
        if (v67[0]) {
          uint64_t v35 = BlueFin::GlDbgProxyGlReqOnGnssMeasData;
        }
        else {
          uint64_t v35 = 0;
        }
        *((void *)v32 + 10) = v35;
      }
      if (v33 < 0x23) {
        goto LABEL_144;
      }
      BOOL v73 = *((void *)v32 + 11) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, &v73);
      int v34 = *((_DWORD *)this + 143);
      if (!v34)
      {
        if (v73) {
          uint64_t v36 = BlueFin::GlDbgProxyGlReqOnGnssNavData;
        }
        else {
          uint64_t v36 = 0;
        }
        *((void *)v32 + 11) = v36;
      }
      if (v33 < 0x47) {
        goto LABEL_144;
      }
      BOOL v73 = *((void *)v32 + 12) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, &v73);
      int v34 = *((_DWORD *)this + 143);
      if (!v34)
      {
        if (v73) {
          uint64_t v37 = BlueFin::GlDbgProxyGlReqOnGnssSvInfoData;
        }
        else {
          uint64_t v37 = 0;
        }
        *((void *)v32 + 12) = v37;
      }
      if (v33 < 0xAB) {
        goto LABEL_144;
      }
      BOOL v73 = *((void *)v32 + 13) != 0;
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, &v73);
      int v34 = *((_DWORD *)this + 143);
      if (!v34)
      {
        if (v73) {
          unsigned int v38 = BlueFin::GlDbgProxyGlReqOnGnssAgcInfoData;
        }
        else {
          unsigned int v38 = 0;
        }
        *((void *)v32 + 13) = v38;
      }
      if (v33 < 0xAD)
      {
LABEL_144:
        if (!v34) {
          *((_DWORD *)v32 + 30) = 0;
        }
      }
      else
      {
        uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)v32 + 30);
      }
      goto LABEL_176;
    case 16:
      uint64_t result = (void *)BlueFin::GlDbgCodec::Rvw(this, *a2);
      goto LABEL_176;
    default:
      DeviceFaultNotify("gldebug_codec.cpp", 6546, "Rvw", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 6546, "false");
  }
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, _DWORD *a2)
{
  if (*((_DWORD *)this + 143)) {
    int v4 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[*a2];
  }
  else {
    int v4 = 8;
  }
  unsigned __int8 v8 = v4;
  uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v8);
  int v6 = *((_DWORD *)this + 143);
  if (v6 != 2)
  {
    if (v6) {
      int v7 = v4;
    }
    else {
      int v7 = v8;
    }
    *a2 = BlueFin::GlImplGnss::m_aucImplGnssTable[v7];
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlPeAlmanac *a2)
{
  BlueFin::GlDbgCodec::Rvw(this, (_DWORD *)a2 + 26);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 108);
  BlueFin::GlDbgCodec::Rvw(this, (__int16 *)a2);
  BlueFin::GlDbgCodec::Rvw(this, (__int16 *)a2 + 1);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 1);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)a2 + 4);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 3);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 4);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 5);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 6);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 7);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 8);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 9);
  BlueFin::GlDbgCodec::Rvw(this, (double *)a2 + 10);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int16 *)a2 + 44);
  unsigned __int8 v5 = *((_DWORD *)a2 + 23);
  BlueFin::GlDbgCodec::Rvw(this, &v5);
  if (!*((_DWORD *)this + 143)) {
    *((_DWORD *)a2 + 23) = v5;
  }
  return BlueFin::GlDbgCodec::Rvw(this, (signed __int8 *)a2 + 96);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, unsigned int *a2)
{
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  if (!*((_DWORD *)a1 + 143)) {
    a2[1] = 32;
  }
  BlueFin::GlDbgCodec::RvwArray(a1, (uint64_t)(a2 + 2), a2 + 1);

  return BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 1922));
}

{
  int v4;
  BOOL v6;

  int v6 = 0;
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0xAF)
  {
    int v6 = 1;
  }
  else
  {
    int v4 = *((_DWORD *)a1 + 143);
    if (v4 == 1) {
      *((_DWORD *)a1 + 143) = 0;
    }
    BlueFin::GlDbgCodec::Rvw(a1, &v6);
    *((_DWORD *)a1 + 143) = v4;
  }
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  if (v6)
  {
    if (!*((_DWORD *)a1 + 143)) {
      a2[1] = 100;
    }
    BlueFin::GlDbgCodec::RvwArray(a1, (uint64_t)(a2 + 2), a2 + 1);
  }
  return BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)(a2 + 9802));
}

{
  uint64_t result;
  int v5;

  uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
  if (*a2 > 8)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 4898, "Rvw", (char)"rValue.uiAgcInfoCount <= _DIM(rValue.aotAgcInfo)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 4898, "rValue.uiAgcInfoCount <= _DIM(rValue.aotAgcInfo)");
  }
  if (*a2)
  {
    unsigned __int8 v5 = 0;
    do
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, (uint64_t)&a2[4 * v5++ + 2]);
    while (*a2 > v5);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::checkArraySize(uint64_t this, unsigned __int8 *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(this + 584);
  if (v3)
  {
    if (v3 == 1)
    {
      if (*a2 > a3)
      {
        int v4 = "rucActualLength <= ucMaxLength";
        DeviceFaultNotify("gldebug_codec.cpp", 774, "checkArraySize", (char)"rucActualLength <= ucMaxLength");
        int v5 = 774;
LABEL_11:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", v5, v4);
      }
    }
    else if (v3 == 2 && *a2 != a3)
    {
      int v4 = "rucActualLength == ucMaxLength";
      DeviceFaultNotify("gldebug_codec.cpp", 773, "checkArraySize", (char)"rucActualLength == ucMaxLength");
      int v5 = 773;
      goto LABEL_11;
    }
  }
  else if (*a2 > a3)
  {
    *a2 = a3;
  }
  return this;
}

uint64_t BlueFin::GlDbgCodec::checkArraySize(uint64_t this, unsigned __int16 *a2, int a3)
{
  int v3 = *(_DWORD *)(this + 584);
  if (v3)
  {
    if (v3 == 1)
    {
      if ((__int16)*a2 > a3)
      {
        int v4 = "rssActualLength <= ssMaxLength";
        DeviceFaultNotify("gldebug_codec.cpp", 784, "checkArraySize", (char)"rssActualLength <= ssMaxLength");
        int v5 = 784;
LABEL_11:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", v5, v4);
      }
    }
    else if (v3 == 2 && *a2 != (unsigned __int16)a3)
    {
      int v4 = "rssActualLength == ssMaxLength";
      DeviceFaultNotify("gldebug_codec.cpp", 783, "checkArraySize", (char)"rssActualLength == ssMaxLength");
      int v5 = 783;
      goto LABEL_11;
    }
  }
  else if ((__int16)*a2 > a3)
  {
    *a2 = a3;
  }
  return this;
}

uint64_t BlueFin::GlDbgCodec::checkArraySize(uint64_t this, unsigned int *a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(this + 584);
  if (v3)
  {
    if (v3 == 1)
    {
      if (*a2 > a3)
      {
        int v4 = "rulActualLength <= ulMaxLength";
        DeviceFaultNotify("gldebug_codec.cpp", 814, "checkArraySize", (char)"rulActualLength <= ulMaxLength");
        int v5 = 814;
LABEL_11:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", v5, v4);
      }
    }
    else if (v3 == 2 && *a2 != a3)
    {
      int v4 = "rulActualLength == ulMaxLength";
      DeviceFaultNotify("gldebug_codec.cpp", 813, "checkArraySize", (char)"rulActualLength == ulMaxLength");
      int v5 = 813;
      goto LABEL_11;
    }
  }
  else if (*a2 > a3)
  {
    *a2 = a3;
  }
  return this;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, BOOL *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  if (*a2 != __dst)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1001, "Verify", (char)"rValue == bExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1001, "rValue == bExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, char *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  if (*a2 != __dst)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1008, "Verify", (char)"rValue == cExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1008, "rValue == cExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, unsigned __int8 *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  if (*a2 != __dst)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1015, "Verify", (char)"rValue == scExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1015, "rValue == scExpect");
  }
  return result;
}

{
  BOOL result;
  unsigned __int8 __dst;

  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, &__dst, 1u);
  if (*a2 != __dst)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1043, "Verify", (char)"rValue == ucExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1043, "rValue == ucExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, unsigned __int16 *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 2u);
  if (*a2 != bswap32(*(unsigned __int16 *)__dst) >> 16)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1022, "Verify", (char)"rValue == ssExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1022, "rValue == ssExpect");
  }
  return result;
}

{
  BOOL result;
  unsigned __int8 __dst[2];

  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 2u);
  if (*a2 != bswap32(*(unsigned __int16 *)__dst) >> 16)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1050, "Verify", (char)"rValue == usExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1050, "rValue == usExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, int *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 4u);
  if (*a2 != bswap32(*(unsigned int *)__dst))
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1029, "Verify", (char)"rValue == slExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1029, "rValue == slExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, uint64_t *a2)
{
  v4[1] = *MEMORY[0x263EF8340];
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, (unsigned __int8 *)v4, 8u);
  if (*a2 != bswap64(v4[0]))
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1036, "Verify", (char)"rValue == sllExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1036, "rValue == sllExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, unsigned int *a2)
{
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, __dst, 4u);
  if (*a2 != bswap32(*(unsigned int *)__dst))
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1057, "Verify", (char)"rValue == ulExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1057, "rValue == ulExpect");
  }
  return result;
}

BOOL BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, unint64_t *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL result = BlueFin::GlDbgCodecBase::Decode(this, v4, 8u);
  if (*a2 != (((((unint64_t)v4[3] << 24) | ((unint64_t)v4[4] << 16) | ((unint64_t)((v4[0] << 16) | (v4[1] << 8) | v4[2]) << 32) | v4[6]) << 8) | ((unint64_t)v4[5] << 16) | v4[7]))
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1064, "Verify", (char)"rValue == ullExpect");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1064, "rValue == ullExpect");
  }
  return result;
}

float BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, float *a2)
{
  float v5 = 0.0;
  BlueFin::GlDbgCodecBase::Decode(this, __dst, 4u);
  BlueFin::GlDbgCodecBase::Internal(this, __dst, &v5);
  float result = *a2;
  if (*a2 != v5)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1071, "Verify", (char)"(rValue == fExpect) || (gl_isnan(rValue) && gl_isnan(fExpect))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1071, "(rValue == fExpect) || (gl_isnan(rValue) && gl_isnan(fExpect))");
  }
  return result;
}

double BlueFin::GlDbgCodec::Verify(BlueFin::GlDbgCodec *this, double *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  double v5 = 0.0;
  BlueFin::GlDbgCodecBase::Decode(this, __dst, 8u);
  BlueFin::GlDbgCodecBase::Internal(this, __dst, &v5);
  double result = *a2;
  if (*a2 != v5)
  {
    DeviceFaultNotify("gldebug_codec.cpp", 1078, "Verify", (char)"(rValue == dExpect) || (gl_isnan(rValue) && gl_isnan(dExpect))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 1078, "(rValue == dExpect) || (gl_isnan(rValue) && gl_isnan(dExpect))");
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, int *a2, uint64_t *a3)
{
  unsigned __int16 v10 = *a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v10);
  if (!*((_DWORD *)a1 + 143)) {
    *a2 = v10;
  }
  BOOL v9 = *a3 != 0;
  uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, &v9);
  if (v9)
  {
    int v7 = *a2;
    if (*a2 <= 15)
    {
      switch(v7)
      {
        case 0:
          return result;
        case 1:
          if (*a3) {
            return BlueFin::GlDbgCodec::Rvw(a1, *a3);
          }
          return result;
        case 2:
          goto LABEL_14;
        case 4:
          if (*a3) {
            return BlueFin::GlDbgCodec::Rvw(a1, *a3);
          }
          return result;
        case 8:
          if (*a3) {
            return BlueFin::GlDbgCodec::Rvw(a1, (double *)*a3);
          }
          return result;
        default:
          goto LABEL_29;
      }
    }
    if (v7 <= 63)
    {
      if (v7 == 16)
      {
        if (*a3) {
          return BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)*a3);
        }
      }
      else
      {
        if (v7 != 32) {
          goto LABEL_29;
        }
        if (*a3) {
          return BlueFin::GlDbgCodec::Rvw(a1, *a3);
        }
      }
    }
    else
    {
      if (v7 != 64)
      {
        if (v7 == 128 || v7 == 256)
        {
LABEL_14:
          if (*a3) {
            return BlueFin::GlDbgCodec::Rvw(a1, *a3);
          }
          return result;
        }
LABEL_29:
        DeviceFaultNotify("gldebug_codec.cpp", 3632, "Rvw", (char)"false");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 3632, "false");
      }
      uint64_t v8 = *a3;
      if (v8)
      {
        BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)v8);
        BlueFin::GlDbgCodec::Rvw(a1, (float *)(v8 + 4));
        return BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int16 *)(v8 + 8));
      }
    }
  }
  else if (!*((_DWORD *)a1 + 143))
  {
    *a3 = 0;
  }
  return result;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, __int16 *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, const __int16 *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    *(_WORD *)double v5 = bswap32(*(unsigned __int16 *)a2) >> 16;
    return BlueFin::GlDbgCodecBase::Encode((char *)this, (char *)v5, 2, 0, 0);
  }
  return result;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, unsigned __int16 *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, (const __int16 *)a2);
  }
  return result;
}

char *BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *this, double *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    return BlueFin::GlDbgCodec::Write(this, a2);
  }
  return result;
}

{
  char *result;
  char v5[8];
  uint64_t v6;

  int v6 = *MEMORY[0x263EF8340];
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    BlueFin::GlDbgCodecBase::External(this, (unsigned __int8 *)v5, *a2);
    return BlueFin::GlDbgCodecBase::Encode((char *)this, v5, 8, 0, 0);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Write(BlueFin::GlDbgCodec *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
  if (result)
  {
    uint64_t v5 = 0;
    *((_DWORD *)a1 + 143) = 2;
    do
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, (signed __int8 *)(a2 + v5++));
    while (v5 != 24);
  }
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t vars8;

  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
  if (result)
  {
    *((_DWORD *)a1 + 143) = 2;
    uint64_t v5 = *(void *)(a2 + 8);
    return BlueFin::GlDbgCodec::RvwArray(a1, v5, (__int16 *)a2);
  }
  return result;
}

char *BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *this, char *a2, unsigned __int16 *a3)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (const __int16 *)a3);
    }
    int v7 = *a3;
    return BlueFin::GlDbgCodecBase::Encode((char *)this, a2, v7, 0, 0);
  }
  return result;
}

char *BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *this, unsigned int *a2, unsigned __int16 *a3)
{
  uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
  if (result)
  {
    uint64_t result = (char *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 120))(this);
    if (result) {
      uint64_t result = BlueFin::GlDbgCodec::Write(this, (const __int16 *)a3);
    }
    if (*a3)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t result = BlueFin::GlDbgCodec::Write(this, a2);
        ++v7;
        ++a2;
      }
      while (v7 < *a3);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::WriteArray(BlueFin::GlDbgCodec *a1, uint64_t a2, const __int16 *a3)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
    if (result) {
      uint64_t result = (uint64_t)BlueFin::GlDbgCodec::Write(a1, a3);
    }
    if (*a3)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1);
        if (result)
        {
          *((_DWORD *)a1 + 143) = 2;
          uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
        }
        ++v7;
        a2 += 16;
      }
      while (v7 < *(unsigned __int16 *)a3);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BOOL *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, BOOL *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, BOOL *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, char *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, char *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, char *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, signed __int8 *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, signed __int8 *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, signed __int8 *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, __int16 *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, __int16 *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, __int16 *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, int *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, int *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, int *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, uint64_t *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, uint64_t *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, uint64_t *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, unsigned __int16 *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, unsigned __int16 *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, unsigned __int16 *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, unsigned int *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, unsigned int *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, unsigned int *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, unint64_t *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, unint64_t *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, unint64_t *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, float *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, float *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, float *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, double *a2)
{
  v7[6] = *MEMORY[0x263EF8340];
  v7[1] = 0;
  void v7[3] = 0;
  v7[0] = BlueFin::GlDbgCodec::Read;
  v7[2] = BlueFin::GlDbgCodec::Verify;
  v7[4] = BlueFin::GlDbgCodec::Write;
  v7[5] = 0;
  BOOL v2 = &v7[2 * *((unsigned int *)this + 143)];
  int v3 = (uint64_t (*)(void *, double *))*v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (void *)((char *)this + (v4 >> 1));
  if (v4) {
    int v3 = *(uint64_t (**)(void *, double *))(*v5 + v3);
  }

  return v3(v5, a2);
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *a1, __int16 *a2, __int16 *a3)
{
  int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned __int16 *)a3, v6);
  if (*a3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 11;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  int v6;
  uint64_t result;
  uint64_t v8;

  int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned __int16 *)a3, v6);
  if (*a3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 12;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 300;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 8;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 16;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)a2);
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 4));
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 8));
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 12));
      BlueFin::GlDbgCodec::Rvw(a1, (unsigned int *)(a2 + 16));
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, (int *)(a2 + 20));
      ++v8;
      a2 += 24;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *this, int *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(this, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, a2);
      ++v8;
      ++a2;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *this, unsigned int *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(this, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, a2);
      ++v8;
      ++a2;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *this, float *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(this, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, a2);
      ++v8;
      ++a2;
    }
    while (v8 < *a3);
  }
  return result;
}

float BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, int32x4_t *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1) < 0x18)
  {
    uint64_t v5 = 0;
    unsigned int v6 = a2;
    do
    {
      int32x4_t v8 = *v6;
      int32x4_t v7 = v6[1];
      v6 += 2;
      *(int32x4_t *)&v14[v5] = vuzp1q_s32(v8, v7);
      v5 += 4;
    }
    while (v5 != 8);
    unsigned int v13 = 8;
    BlueFin::GlDbgCodec::RvwArray(a1, v14, &v13);
    if (!*((_DWORD *)a1 + 143))
    {
      for (uint64_t i = 0; i != 8; i += 4)
      {
        long long v10 = *(_OWORD *)&v14[i];
        v11.i64[0] = v10;
        v11.i64[1] = DWORD1(v10);
        int32x4_t v12 = v11;
        v11.i64[0] = DWORD2(v10);
        v11.i64[1] = HIDWORD(v10);
        LODWORD(result) = *(void *)&v14[i + 2];
        *a2 = v12;
        a2[1] = v11;
        a2 += 2;
      }
    }
  }
  else
  {
    unsigned int v13 = 8;
    BlueFin::GlDbgCodec::RvwArray(a1, (unint64_t *)a2, &v13);
  }
  return result;
}

void BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *a1, int32x4_t *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v7 = 0;
    do
    {
      BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v7;
      a2 += 4;
    }
    while (v7 < *a3);
  }
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 32;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 2856;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 240;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 392;
    }
    while (v8 < *a3);
  }
  return result;
}

{
  unsigned int v6;
  uint64_t result;
  unint64_t v8;

  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 144;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *this, unsigned __int8 *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(this, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &a2[v8++]);
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, uint64_t a2, BlueFin::GlMeTrkCvecTapConfig *a3)
{
  unsigned int v6 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)a2);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 4));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 9));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 16));
  unsigned int v7 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 21));
  if (v7 >= 0x3D) {
    BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 22));
  }
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 24));
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 28));
  if (v6 > 0xC)
  {
    unsigned int v11 = 8;
    uint64_t result = BlueFin::GlDbgCodec::RvwArray(a1, (float *)(a2 + 32), &v11);
    if (v6 >= 0x1A)
    {
      unsigned int v12 = 12;
      BlueFin::GlDbgCodec::Rvw(a1, &v12);
      uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, &v12, 0xCu);
      if (v12)
      {
        unint64_t v9 = 0;
        long long v10 = (unsigned int *)(a2 + 68);
        do
        {
          BlueFin::GlDbgCodec::Rvw(a1, (float *)v10 - 1);
          uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, v10);
          ++v9;
          v10 += 2;
        }
        while (v9 < v12);
      }
    }
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, a3);
    unsigned int v11 = 8;
    return BlueFin::GlDbgCodec::RvwArray(a1, (float *)(a2 + 32), &v11);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)a2);
  unsigned int v7 = (float *)(a2 + 4);
  if (v6 < 0x1C) {
    *unsigned int v7 = 0.08;
  }
  else {
    BlueFin::GlDbgCodec::Rvw(a1, v7);
  }
  BlueFin::GlDbgCodec::Rvw(a1, (unsigned __int8 *)(a2 + 8));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 12));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 16));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 20));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 24));
  unsigned int v11 = 4;
  BlueFin::GlDbgCodec::RvwArray(a1, (float *)(a2 + 28), &v11);
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 44));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 48));
  unsigned __int8 v12 = *(_DWORD *)(a2 + 52);
  BlueFin::GlDbgCodec::Rvw(a1, &v12);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 52) = v12;
  }
  unsigned int v8 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  unsigned __int8 v13 = *(_DWORD *)(a2 + 56);
  BlueFin::GlDbgCodec::Rvw(a1, &v13);
  if (!*((_DWORD *)a1 + 143)) {
    *(_DWORD *)(a2 + 56) = v13;
  }
  if (v8 >= 0x10) {
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 60));
  }
  unsigned int v9 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  BlueFin::GlDbgCodec::Rvw(a1, (BOOL *)(a2 + 64));
  BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 68));
  if (v9 >= 0x10)
  {
    BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 72));
    if (v9 >= 0x32)
    {
      BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 76));
      BlueFin::GlDbgCodec::Rvw(a1, (float *)(a2 + 80));
    }
  }
  if (v6 < 0x16)
  {
    *(void *)(a2 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0x41C4000041E40000;
    *(_DWORD *)(a2 + 92) = 1101004800;
    *(_DWORD *)(a2 + 96) = 67305985;
    *(void *)(a2 + 100) = 0x4188000041A00000;
    *(_DWORD *)(a2 + 108) = 1098907648;
    *(_DWORD *)(a2 + 112) = 67305985;
    *(void *)(a2 + 116) = 0x41C8000041F00000;
    *(_DWORD *)(a2 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1101004800;
    *(_DWORD *)(a2 + 128) = 168100610;
    *(void *)(a2 + 132) = 0x41C8000041F00000;
    *(_DWORD *)(a2 + 140) = 1101004800;
    *(_DWORD *)(a2 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 168100610;
    if (v6 <= 0xC) {
      return BlueFin::GlMeTrkCvecTapConfig::operator=(a2 + 148, a3);
    }
  }
  else
  {
    BlueFin::GlDbgCodec::Rvw(a1, a2 + 84);
    BlueFin::GlDbgCodec::Rvw(a1, a2 + 100);
    BlueFin::GlDbgCodec::Rvw(a1, a2 + 116);
    BlueFin::GlDbgCodec::Rvw(a1, a2 + 132);
  }
  return BlueFin::GlDbgCodec::Rvw(a1, (BlueFin::GlMeTrkCvecTapConfig *)(a2 + 148));
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlPeEngineCallBacks *a2)
{
  unsigned int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
  uint64_t v5 = *((void *)a2 + 3);
  BOOL v66 = *((void *)a2 + 2) != 0;
  BOOL v65 = v5 != 0;
  uint64_t v6 = *((void *)a2 + 5);
  BOOL v64 = *((void *)a2 + 4) != 0;
  BOOL v63 = v6 != 0;
  BOOL v62 = *((void *)a2 + 6) != 0;
  uint64_t v7 = *((void *)a2 + 9);
  BOOL v61 = *((void *)a2 + 8) != 0;
  uint64_t v8 = *((void *)a2 + 10);
  BOOL v60 = *((void *)a2 + 11) != 0;
  uint64_t v9 = *((void *)a2 + 13);
  BOOL v59 = *((void *)a2 + 12) != 0;
  BOOL v58 = v9 != 0;
  uint64_t v10 = *((void *)a2 + 15);
  BOOL v57 = *((void *)a2 + 14) != 0;
  BOOL v56 = v10 != 0;
  uint64_t v11 = *((void *)a2 + 17);
  BOOL v55 = *((void *)a2 + 16) != 0;
  BOOL v54 = v11 != 0;
  uint64_t v12 = *((void *)a2 + 19);
  BOOL v53 = *((void *)a2 + 18) != 0;
  BOOL v52 = v12 != 0;
  BOOL v51 = *((void *)a2 + 20) != 0;
  BOOL v49 = *((void *)a2 + 25) != 0;
  uint64_t v13 = *((void *)a2 + 31);
  BOOL v48 = *((void *)a2 + 30) != 0;
  BOOL v47 = v13 != 0;
  BOOL v46 = v7 != 0;
  BOOL v45 = v8 != 0;
  uint64_t v14 = *((void *)a2 + 33);
  BOOL v44 = *((void *)a2 + 32) != 0;
  *(_WORD *)uint64_t v50 = 0;
  BOOL v43 = v14 != 0;
  uint64_t v15 = *((void *)a2 + 36);
  BlueFin::GlDbgCodec::Rvw(this, &v66);
  BlueFin::GlDbgCodec::Rvw(this, &v65);
  BlueFin::GlDbgCodec::Rvw(this, &v64);
  BlueFin::GlDbgCodec::Rvw(this, &v63);
  BlueFin::GlDbgCodec::Rvw(this, &v62);
  BlueFin::GlDbgCodec::Rvw(this, &v61);
  BlueFin::GlDbgCodec::Rvw(this, &v60);
  BlueFin::GlDbgCodec::Rvw(this, &v59);
  if (v4 >= 6) {
    BlueFin::GlDbgCodec::Rvw(this, &v58);
  }
  BlueFin::GlDbgCodec::Rvw(this, &v57);
  BlueFin::GlDbgCodec::Rvw(this, &v56);
  BlueFin::GlDbgCodec::Rvw(this, &v55);
  BlueFin::GlDbgCodec::Rvw(this, &v54);
  BlueFin::GlDbgCodec::Rvw(this, &v53);
  BlueFin::GlDbgCodec::Rvw(this, &v52);
  BlueFin::GlDbgCodec::Rvw(this, &v51);
  BlueFin::GlDbgCodec::Rvw(this, &v50[1]);
  BlueFin::GlDbgCodec::Rvw(this, v50);
  BlueFin::GlDbgCodec::Rvw(this, &v49);
  BlueFin::GlDbgCodec::Rvw(this, &v48);
  uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v47);
  if (v4 >= 4)
  {
    BlueFin::GlDbgCodec::Rvw(this, &v46);
    uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v45);
    if (v4 != 4)
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v44);
      if (v4 >= 6)
      {
        uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v43);
        if (v4 - 34 <= 0x13)
        {
          BOOL v42 = 0;
          uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v42);
        }
        if (v4 >= 0x25)
        {
          uint64_t result = BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 296);
          if (v4 >= 0x2C)
          {
            BOOL v42 = 0;
            uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v42);
            if (v4 >= 0x4B)
            {
              BOOL v42 = *((void *)a2 + 38) != 0;
              uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v42);
              if (!*((_DWORD *)this + 143))
              {
                if (v42) {
                  unsigned int v17 = BlueFin::GlDbgProxyGlEngineOnOscReadyForStorage;
                }
                else {
                  unsigned int v17 = 0;
                }
                *((void *)a2 + 38) = v17;
              }
            }
          }
        }
      }
    }
  }
  if (!*((_DWORD *)this + 143))
  {
    if (v66) {
      int v18 = BlueFin::GlDbgProxyGlEngineOnStart;
    }
    else {
      int v18 = 0;
    }
    if (v65) {
      unsigned int v19 = BlueFin::GlDbgProxyGlEngineOnStop;
    }
    else {
      unsigned int v19 = 0;
    }
    *((void *)a2 + 2) = v18;
    *((void *)a2 + 3) = v19;
    if (v64) {
      int v20 = BlueFin::GlDbgProxyGlEngineOnTimerRq;
    }
    else {
      int v20 = 0;
    }
    if (v63) {
      int v21 = BlueFin::GlDbgProxyGlEngineOnAsicData;
    }
    else {
      int v21 = 0;
    }
    *((void *)a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20;
    *((void *)a2 + 5) = v21;
    if (v62) {
      int v22 = BlueFin::GlDbgProxyGlEngineOnAsicDacData;
    }
    else {
      int v22 = 0;
    }
    *((void *)a2 + 6) = v22;
    if (v61) {
      unsigned int v23 = BlueFin::GlDbgProxyGlEngineOnReady;
    }
    else {
      unsigned int v23 = 0;
    }
    *((void *)a2 + 8) = v23;
    if (v60) {
      int v24 = BlueFin::GlDbgProxyGlEngineOnPrecTimerRq;
    }
    else {
      int v24 = 0;
    }
    if (v59) {
      __int16 v25 = BlueFin::GlDbgProxyGlEngineOnTimerSet;
    }
    else {
      __int16 v25 = 0;
    }
    *((void *)a2 + 11) = v24;
    *((void *)a2 + 12) = v25;
    if (v58) {
      unsigned int v26 = BlueFin::GlDbgProxyGlEngineOnBurstMode;
    }
    else {
      unsigned int v26 = 0;
    }
    if (v57) {
      unsigned int v27 = BlueFin::GlDbgProxyGlEngineOnSysLogLine;
    }
    else {
      unsigned int v27 = 0;
    }
    *((void *)a2 + 13) = v26;
    *((void *)a2 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v27;
    if (v56) {
      double v28 = BlueFin::GlDbgProxyGlEngineOnFreqUpdate;
    }
    else {
      double v28 = 0;
    }
    if (v55) {
      __int16 v29 = BlueFin::GlDbgProxyGlEngineOnAsstStatus;
    }
    else {
      __int16 v29 = 0;
    }
    *((void *)a2 + 15) = v28;
    *((void *)a2 + 16) = v29;
    if (v54) {
      BOOL v30 = BlueFin::GlDbgProxyGlEngCbOnNvStgRead;
    }
    else {
      BOOL v30 = 0;
    }
    if (v53) {
      __int16 v31 = BlueFin::GlDbgProxyGlEngCbOnNvStgWrite;
    }
    else {
      __int16 v31 = 0;
    }
    *((void *)a2 + 17) = v30;
    *((void *)a2 + 18) = v31;
    if (v52) {
      __int16 v32 = BlueFin::GlDbgProxyGlEngCbOnLTOFileRead;
    }
    else {
      __int16 v32 = 0;
    }
    if (v51) {
      unsigned int v33 = BlueFin::GlDbgProxyGlEngineOnResponse;
    }
    else {
      unsigned int v33 = 0;
    }
    *((void *)a2 + 19) = v32;
    *((void *)a2 + 20) = v33;
    if (v49) {
      int v34 = BlueFin::GlDbgProxyGlEngCbOnEEFileRead;
    }
    else {
      int v34 = 0;
    }
    *((void *)a2 + 25) = v34;
    if (v48) {
      uint64_t v35 = BlueFin::GlDbgProxyGlEngCbOnPPSPlatformTime;
    }
    else {
      uint64_t v35 = 0;
    }
    if (v47) {
      uint64_t v36 = BlueFin::GlDbgProxyGlEngCpuLoad;
    }
    else {
      uint64_t v36 = 0;
    }
    *((void *)a2 + 30) = v35;
    *((void *)a2 + 31) = v36;
    if (v46) {
      uint64_t v37 = BlueFin::GlDbgProxyGlEngineOnResourceRequest;
    }
    else {
      uint64_t v37 = 0;
    }
    if (v45) {
      unsigned int v38 = BlueFin::GlDbgProxyGlEngineOnResourceRelease;
    }
    else {
      unsigned int v38 = 0;
    }
    *((void *)a2 + 9) = v37;
    *((void *)a2 + 10) = v38;
    if (v44) {
      int v39 = BlueFin::GlDbgProxyGlEngineOnGeofenceStatus;
    }
    else {
      int v39 = 0;
    }
    if (v43) {
      int v40 = BlueFin::GlDbgProxyGlEngineOnLHPatchNeeded;
    }
    else {
      int v40 = 0;
    }
    *((void *)a2 + 32) = v39;
    *((void *)a2 + 33) = v40;
    if (v15) {
      int v41 = BlueFin::GlDbgProxyGlEngineOnReportMIAdjustmentReqStatus;
    }
    else {
      int v41 = 0;
    }
    *((void *)a2 + 36) = v41;
  }
  return result;
}

BlueFin::GlDbgProxy *BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlPeTimerMgr *a2)
{
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 8);
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 9);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned int *)a2 + 3);
  unsigned int v4 = (int *)((char *)a2 + 16);
  BlueFin::GlDbgCodec::Rvw(this, (int *)a2 + 4);
  uint64_t result = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 128))(this);
  if (*((int *)a2 + 4) >= 1)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = (char *)a2 + 24;
    do
    {
      int v13 = 0;
      if (*((_DWORD *)this + 143)) {
        int v9 = BlueFin::GlDbgProxy::RequestId(v6, *(const BlueFin::GlRequestImpl **)&v8[8 * v7]);
      }
      else {
        int v9 = 0;
      }
      int v13 = v9;
      BlueFin::GlDbgCodec::Rvw(this, &v13);
      uint64_t v10 = *((void *)v6 + v13 + 741);
      if (*((_DWORD *)this + 143)) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v10 == 0;
      }
      if (v11)
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
        if (!v12)
        {
          DeviceFaultNotify("gldebug_codec.cpp", 6246, "Rvw", (char)"pReq");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec.cpp", 6246, "pReq");
        }
        uint64_t v10 = v12;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(void *)(v12 + 128) = 0;
        *(void *)uint64_t v12 = &unk_270EBB200;
        *(void *)(v12 + 8) = v6;
        *((void *)v6 + v13 + 741) = v12;
      }
      uint64_t result = (BlueFin::GlDbgProxy *)BlueFin::GlDbgCodec::Rvw(this, (BlueFin::GlRequestImpl **)(v10 + 24));
      if (!*((_DWORD *)this + 143))
      {
        uint64_t result = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v10 + 24) + 104))(*(void *)(v10 + 24), v10);
        *(void *)&v8[8 * v7] = *(void *)(v10 + 24);
      }
      ++v7;
    }
    while (v7 < *v4);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, int *a2)
{
  unsigned __int8 v5 = *a2;
  BlueFin::GlDbgCodec::Rvw(a1, &v5);
  if (!*((_DWORD *)a1 + 143)) {
    *a2 = v5;
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 112))(a1);
  if (result <= 0x79 && !*((_DWORD *)a1 + 143) && *a2 >= 1) {
    ++*a2;
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlMeTrkCvecTapConfig *a2)
{
  unsigned int v4 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this + 112))(this);
  unsigned __int8 v9 = *(_DWORD *)a2;
  BlueFin::GlDbgCodec::Rvw(this, &v9);
  if (!*((_DWORD *)this + 143)) {
    *(_DWORD *)a2 = v9;
  }
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 4);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 5);
  if (v4 >= 0xD)
  {
    BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 6);
    BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 7);
  }
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 8);
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 9);
  BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)a2 + 10);
  unsigned int v8 = 8;
  BlueFin::GlDbgCodec::Rvw(this, &v8);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, &v8, 8u);
  if (v8)
  {
    unint64_t v6 = 0;
    uint64_t v7 = (char *)a2 + 11;
    do
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, &v7[v6++]);
    while (v6 < v8);
  }
  return result;
}

uint64_t BlueFin::GlMeTrkCvecTapConfig::operator=(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(_DWORD *)(result + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  for (uint64_t i = 11; i != 19; ++i)
    *(unsigned char *)(result + i) = *(unsigned char *)(a2 + i);
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, uint64_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
    BlueFin::GlDbgCodec::Rvw(this, (float *)(a2 + i));
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 12;
  do
    uint64_t result = BlueFin::GlDbgCodec::Rvw(this, (unsigned __int8 *)(v6 + v5++));
  while (v5 != 4);
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlRequestImplNmea *a2)
{
  BOOL v6 = *((void *)a2 + 9) != 0;
  BlueFin::GlDbgCodec::Rvw(this, &v6);
  uint64_t result = BlueFin::GlDbgCodec::Rvw(this, (__int16 *)a2 + 32);
  if (!*((_DWORD *)this + 143))
  {
    if (v6) {
      uint64_t v5 = BlueFin::GlDbgProxyGlReqOnNmea;
    }
    else {
      uint64_t v5 = 0;
    }
    *((void *)a2 + 9) = v5;
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlRequestImplMeas *a2)
{
  BlueFin::GlDbgCodec::Rvw(this, a2);
  BOOL v6 = *((void *)a2 + 10) != 0;
  BlueFin::GlDbgCodec::Rvw(this, &v6);
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 88);
  BlueFin::GlDbgCodec::Rvw(this, (BOOL *)a2 + 89);
  uint64_t result = BlueFin::GlDbgCodec::Rvw(this, (int *)a2 + 23);
  if (!*((_DWORD *)this + 143))
  {
    if (v6) {
      uint64_t v5 = BlueFin::GlDbgProxyGlReqOnMeas;
    }
    else {
      uint64_t v5 = 0;
    }
    *((void *)a2 + 10) = v5;
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *this, BlueFin::GlRequestImplPos *a2)
{
  BlueFin::GlDbgCodec::Rvw(this, a2);
  BlueFin::GlDbgCodec::Rvw(this, (int *)a2 + 20);
  unsigned int v5 = 4;
  BlueFin::GlDbgCodec::RvwArray(this, (__int16 *)a2 + 42, &v5);
  unsigned int v5 = 7;
  return BlueFin::GlDbgCodec::RvwArray(this, (__int16 *)a2 + 46, &v5);
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *this, __int16 *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(this, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, a2);
      ++v8;
      ++a2;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *a1, uint64_t a2, __int16 *a3)
{
  int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, (unsigned __int16 *)a3, v6);
  if (*a3 >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 20;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::Rvw(BlueFin::GlDbgCodec *a1, float *a2)
{
  BlueFin::GlDbgCodec::Rvw(a1, a2);
  BlueFin::GlDbgCodec::Rvw(a1, a2 + 1);

  return BlueFin::GlDbgCodec::Rvw(a1, a2 + 2);
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *this, unint64_t *a2, unsigned int *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(this, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)this, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(this, a2);
      ++v8;
      ++a2;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t BlueFin::GlDbgCodec::RvwArray(BlueFin::GlDbgCodec *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6 = *a3;
  BlueFin::GlDbgCodec::Rvw(a1, a3);
  uint64_t result = BlueFin::GlDbgCodec::checkArraySize((uint64_t)a1, a3, v6);
  if (*a3)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = BlueFin::GlDbgCodec::Rvw(a1, a2);
      ++v8;
      a2 += 292;
    }
    while (v8 < *a3);
  }
  return result;
}

void BlueFin::GlDbgCodecBase::InitBase(BlueFin::GlDbgCodecBase *this)
{
  *((unsigned char *)this + 568) = 0;
  *((_DWORD *)this + 141) = 0;
}

char *BlueFin::GlDbgCodecBase::Flush(BlueFin::GlDbgCodecBase *this)
{
  *((unsigned char *)this + 560) = 1;
  uint64_t result = BlueFin::GlDbgCodecBase::Encode((char *)this, 0, 0, 0, 0);
  *((unsigned char *)this + 560) = 0;
  return result;
}

char *BlueFin::GlDbgCodecBase::Encode(char *this, char *a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t)this;
  this[562] = 1;
  uint64_t v10 = (unsigned int *)(this + 552);
  BOOL v11 = this + 32;
  int v24 = this + 296;
  uint64_t v12 = this + 292;
  while (a3)
  {
    while (1)
    {
      uint64_t v13 = *(unsigned int *)(v9 + 288);
      if (v13 > 0xFF) {
        break;
      }
      char v14 = *a2++;
      *(_DWORD *)(v9 + 288) = v13 + 1;
      *(unsigned char *)(v9 + v13 + 32) = v14;
      if (!--a3) {
        goto LABEL_5;
      }
    }
    int v16 = 1;
LABEL_11:
    char v17 = *(unsigned char *)(v9 + 567);
    if (v17) {
      goto LABEL_14;
    }
    uint64_t v18 = *v10;
    if (v18 <= 0xFF)
    {
      *(_DWORD *)(v9 + 552) = v18 + 1;
      *(unsigned char *)(v9 + v18 + 296) = 123;
      char v17 = *(unsigned char *)(v9 + 567) + 1;
      *(unsigned char *)(v9 + 567) = v17;
LABEL_14:
      if (v17 == 1)
      {
        (*(void (**)(uint64_t, void *, char *, _DWORD *, unsigned int *, void, uint64_t, void))(*(void *)v9 + 88))(v9, v11, v24, v12, v10, *(unsigned int *)(v9 + 288), 256, (v16 ^ 1) & a4);
        if (a4)
        {
          int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
          char v17 = *(unsigned char *)(v9 + 567);
          if (v19) {
            *(unsigned char *)(v9 + 567) = ++v17;
          }
        }
        else
        {
          char v17 = *(unsigned char *)(v9 + 567);
        }
      }
      uint64_t v18 = *v10;
      if (v17 == 2)
      {
        char v17 = 2;
        if (v18 <= 0xFF)
        {
          if (a4)
          {
            char v17 = 0;
            *(_DWORD *)(v9 + 552) = v18 + 1;
            *(unsigned char *)(v9 + v18 + 296) = 125;
            *(unsigned char *)(v9 + 567) = 0;
            uint64_t v18 = *(unsigned int *)(v9 + 552);
          }
        }
      }
      goto LABEL_24;
    }
    char v17 = 0;
LABEL_24:
    if (v17) {
      unsigned int v20 = a4;
    }
    else {
      unsigned int v20 = 0;
    }
    this = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80))(v9, v9 + *(unsigned int *)(v9 + 556) + 296, v18, a5);
    *(void *)(v9 + 552) = 0;
    uint64_t v21 = *(unsigned int *)(v9 + 292);
    int v22 = *(_DWORD *)(v9 + 288);
    if (v22 == v21)
    {
      *(_DWORD *)(v9 + 288) = 0;
    }
    else
    {
      size_t v23 = (v22 - v21);
      *(_DWORD *)(v9 + 288) = v23;
      this = (char *)memmove(v11, (const void *)(v9 + v21 + 32), v23);
    }
    *uint64_t v12 = 0;
    if (((v16 | v20) & 1) == 0) {
      return this;
    }
  }
LABEL_5:
  if (*(unsigned char *)(v9 + 560)) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = a4 == 0;
  }
  if (!v15)
  {
    a3 = 0;
    int v16 = 0;
    goto LABEL_11;
  }
  return this;
}

char *BlueFin::GlDbgCodecBase::End(BlueFin::GlDbgCodecBase *this, uint64_t a2)
{
  if (*((unsigned char *)this + 562)) {
    ++*((unsigned char *)this + 566);
  }
  uint64_t result = BlueFin::GlDbgCodecBase::Encode((char *)this, 0, 0, 1u, a2);
  *((unsigned char *)this + 562) = 0;
  return result;
}

uint64_t BlueFin::GlDbgCodecBase::Next(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 561)) {
    ++*(unsigned char *)(this + 565);
  }
  if (a2)
  {
    *(_DWORD *)(this + 28) = *(_DWORD *)(this + 24);
  }
  else
  {
    int v2 = *(_DWORD *)(this + 28);
    if (v2) {
      BOOL v3 = v2 == *(_DWORD *)(this + 24);
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3)
    {
      DeviceFaultNotify("gldebug_codec_base.cpp", 86, "Next", (char)"(m_uiRdDePos == m_uiRdDeLim) || (0 == m_uiRdDePos)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec_base.cpp", 86, "(m_uiRdDePos == m_uiRdDeLim) || (0 == m_uiRdDePos)");
    }
  }
  *(unsigned char *)(this + 561) = 0;
  return this;
}

void BlueFin::GlDbgCodecBase::External(BlueFin::GlDbgCodecBase *this, unsigned __int8 *a2, float a3)
{
  int v15 = 0;
  int v5 = vcvts_n_s32_f32(frexpf(fabsf(a3), &v15), 0x18uLL);
  if (v15 <= -126) {
    int v6 = -127;
  }
  else {
    int v6 = v15 - 1;
  }
  if (v15 <= -126) {
    int v7 = v5 >> (-125 - v15);
  }
  else {
    int v7 = v5;
  }
  BOOL v8 = v5 == 0;
  if (v5) {
    int v9 = v6;
  }
  else {
    int v9 = -127;
  }
  if (v8) {
    int v7 = 0;
  }
  BOOL v10 = a3 >= -3.4028e38 && a3 <= 3.4028e38;
  if (v10) {
    int v11 = v9;
  }
  else {
    int v11 = 128;
  }
  if (v10) {
    int v12 = v7;
  }
  else {
    int v12 = 0;
  }
  int v13 = ((v11 << 23) + 1065353216) | __const__ZN7BlueFin14GlDbgCodecBase8ExternalEPhf_ulSigns[a3 >= 0.0];
  unsigned int v14 = v13 | v12 & 0x7FFFFF;
  *((_WORD *)a2 + 1) = bswap32(v14) >> 16;
  a2[1] = BYTE2(v14);
  *a2 = HIBYTE(v13);
}

void BlueFin::GlDbgCodecBase::External(BlueFin::GlDbgCodecBase *this, unsigned __int8 *a2, double a3)
{
  int __e = 0;
  uint64_t v5 = vcvtd_n_s64_f64(frexp(fabs(a3), &__e), 0x35uLL);
  if (__e <= -1022) {
    int v6 = -1023;
  }
  else {
    int v6 = __e - 1;
  }
  if (__e <= -1022) {
    uint64_t v7 = v5 >> (3 - __e);
  }
  else {
    uint64_t v7 = v5;
  }
  BOOL v8 = v5 == 0;
  if (v5) {
    LODWORD(v9) = v6;
  }
  else {
    LODWORD(v9) = -1023;
  }
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v7;
  }
  BOOL v11 = a3 >= -1.79769313e308 && a3 <= 1.79769313e308;
  if (v11) {
    uint64_t v9 = v9;
  }
  else {
    uint64_t v9 = 1024;
  }
  if (!v11) {
    uint64_t v10 = 0;
  }
  uint64_t v12 = ((v9 << 52) + 0x3FF0000000000000) | *(void *)((char *)&__const__ZN7BlueFin14GlDbgCodecBase8ExternalEPhd_ullSigns
                                                        + ((~*(void *)&a3 >> 60) & 8));
  uint64_t v13 = v12 | v10 & 0xFFFFFFFFFFFFFLL;
  *((_DWORD *)a2 + 1) = bswap32(v13);
  a2[3] = BYTE4(v13);
  a2[2] = BYTE5(v13);
  a2[1] = BYTE6(v13);
  *a2 = HIBYTE(v12);
}

uint64_t BlueFin::GlDbgCodecBase::Internal(BlueFin::GlDbgCodecBase *this, const unsigned __int8 *a2, float *a3)
{
  unsigned int v4 = (unsigned __int16)(a2[1] << 8) | (*a2 << 16);
  unsigned int v6 = a2[3] | ((a2[2] | (a2[1] << 8) & 0x7FFF) << 8);
  int v7 = (v4 >> 15);
  if (!(v4 >> 15))
  {
    LODWORD(result) = -149;
    goto LABEL_7;
  }
  if (v7 != 255)
  {
    LODWORD(result) = v7 - 150;
    v6 |= 0x800000u;
    goto LABEL_7;
  }
  uint64_t result = 0x7FFFFFFFLL;
  if (!v6)
  {
    unsigned int v6 = -1;
LABEL_7:
    int v5 = *(_DWORD *)((char *)&__const__ZN7BlueFin14GlDbgCodecBase8InternalEPKhRf_fSigns
                   + (((unint64_t)*a2 >> 5) & 4));
    uint64_t result = v5 & 0x80000000 | COERCE_UNSIGNED_INT(ldexpf((float)v6, result)) & 0x7FFFFFFF;
  }
  *(_DWORD *)a3 = result;
  return result;
}

void BlueFin::GlDbgCodecBase::Internal(BlueFin::GlDbgCodecBase *this, const unsigned __int8 *a2, double *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[2] | (v4 << 16) | ((unint64_t)a2[1] << 8);
  unint64_t v6 = (((unint64_t)a2[3] << 24) | ((unint64_t)a2[4] << 16) | (v5 << 32) | a2[6]) << 8;
  uint64_t v7 = *(void *)((char *)&__const__ZN7BlueFin14GlDbgCodecBase8InternalEPKhRd_dSigns + ((v4 >> 4) & 8));
  unsigned int v8 = (v5 >> 12) & 0x7FF;
  unint64_t v9 = v6 & 0xFFFFFFFFFFF00 | ((unint64_t)a2[5] << 16) | a2[7];
  if (!v8)
  {
    int v11 = -1074;
LABEL_8:
    unint64_t v10 = v7 & 0x8000000000000000 | COERCE_UNSIGNED_INT64(ldexp((double)v9, v11)) & 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_9;
  }
  if (v8 != 2047)
  {
    int v11 = v8 - 1075;
    v9 |= 0x10000000000000uLL;
    goto LABEL_8;
  }
  if (!v9)
  {
    unint64_t v9 = -1;
    int v11 = 0x7FFFFFFF;
    goto LABEL_8;
  }
  unint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_9:
  *(void *)a3 = v10;
}

uint64_t BlueFin::GlDbgCodecBase::SetRecordBuffer(uint64_t this, const unsigned __int8 *a2, int a3)
{
  *(void *)(this + 16) = a2;
  *(_DWORD *)(this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  *(_DWORD *)(this + 28) = 0;
  return this;
}

void *BlueFin::GlDbgCodecBase::SetRecord(void *result, uint64_t a2)
{
  result[2] = 0;
  result[3] = 0;
  result[1] = a2;
  return result;
}

BOOL BlueFin::GlDbgCodecBase::Decode(BlueFin::GlDbgCodecBase *this, unsigned __int8 *__dst, unsigned int a3)
{
  *((unsigned char *)this + 561) = 1;
  unint64_t v4 = (BlueFin::GlDbgRecord *)*((void *)this + 1);
  if (v4)
  {
    if (BlueFin::GlDbgRecord::GetMsg(v4, __dst, (unsigned __int16)a3) != a3)
    {
      DeviceFaultNotify("gldebug_codec_base.cpp", 315, "Decode", (char)"ulLength == 0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_codec_base.cpp", 315, "ulLength == 0");
    }
    return 1;
  }
  else
  {
    uint64_t v6 = *((unsigned int *)this + 7);
    unsigned int v7 = *((_DWORD *)this + 6) - v6;
    if (v7 >= a3) {
      size_t v8 = a3;
    }
    else {
      size_t v8 = v7;
    }
    BOOL v5 = v7 >= a3;
    memcpy(__dst, (const void *)(*((void *)this + 2) + v6), v8);
    *((_DWORD *)this + 7) += v8;
  }
  return v5;
}

uint64_t BlueFin::GlDbgCodecBase::BytesLeft(BlueFin::GlDbgCodecBase *this)
{
  return (unsigned __int16)(*((_WORD *)this + 12) - *((_DWORD *)this + 7));
}

BOOL BlueFin::GlDbgCodecBase::MsgComplete(BlueFin::GlDbgCodecBase *this)
{
  return *((_DWORD *)this + 6) && *((unsigned char *)this + 568) == 0;
}

uint64_t BlueFin::GlDbgEEFileReader::CorruptionDetected(BlueFin::GlDbgCodec **this)
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1025);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v2 = (*(uint64_t (**)(BlueFin::GlDbgCodec *))(*(void *)this[2] + 32))(this[2]);
  BOOL v5 = v2;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1025);
  BOOL v3 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3)) {
    BlueFin::GlDbgCodec::Write(v3, &v5);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v2;
}

uint64_t BlueFin::GlDbgEEFileReader::CorruptionDetected(BlueFin::GlDbgCodec **this, BOOL a2)
{
  BOOL v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1026);
  unint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, BOOL))(*(void *)this[2] + 24))(this[2], a2);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1026);
  BOOL v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

uint64_t BlueFin::GlDbgEEFileReader::FromEEFileToGll(BlueFin::GlDbgEEFileReader *this, char *a2, int a3, unsigned int *a4)
{
  int v14 = a3;
  BOOL v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (a2 && a4)
  {
    BlueFin::GlDbgCodec::WriteStart(v5, 1027);
    BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v14);
    size_t v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, a4);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    uint64_t v9 = (***((uint64_t (****)(void))this + 2))();
    int v13 = v9;
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 1027);
    unint64_t v10 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, (unsigned int *)&v13);
    }
    int v11 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
      BlueFin::GlDbgCodec::Write(v11, a4);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *, unsigned int *))(*(void *)v5 + 104))(v5, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_eefilereader.cpp:55", a4);
    return 0xFFFFFFFFLL;
  }
  return v9;
}

void BlueFin::GlDbgEEFileReader::~GlDbgEEFileReader(BlueFin::GlDbgEEFileReader *this)
{
}

uint64_t BlueFin::GlDbgEngine::GlDbgEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14)
{
  *(void *)a1 = &unk_270EBA788;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 120) = a12;
  *(void *)(a1 + 128) = a9;
  *(void *)(a1 + 136) = a7;
  *(void *)(a1 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a8;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a6;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_OWORD *)(a1 + 22bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = a3;
  *(void *)(a1 + 280) = a4;
  *(void *)(a1 + 288) = a13;
  *(void *)(a1 + 296) = a5;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  BlueFin::GlEngineImplStd::GlEngineImplStd(a1 + 368, (uint64_t)BlueFin::GlDbgProxyGlEngineOnStart, (uint64_t)BlueFin::GlDbgProxyGlEngineOnStop, (uint64_t)BlueFin::GlDbgProxyGlEngineOnTimerRq, (uint64_t)BlueFin::GlDbgProxyGlEngineOnAsicData, (uint64_t)BlueFin::GlDbgProxyGlEngCbOnNvStgRead, (uint64_t)BlueFin::GlDbgProxyGlEngCbOnNvStgWrite, (uint64_t)BlueFin::GlDbgProxyGlEngCbOnLTOFileRead, (uint64_t)BlueFin::GlDbgMemory::Allocate, (uint64_t)BlueFin::GlDbgMemory::Deallocate, (uint64_t)BlueFin::GlDbgProxyGlEngCbOnEEFileRead, (uint64_t)BlueFin::GlDbgProxyGlEngineOnSysLogLine, a14);
  *(unsigned char *)(a1 + 530bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 5312) = 0;
  *(void *)(a1 + 952) = a2;
  if (!*(void *)(a1 + 296))
  {
    DeviceFaultNotify("gldebug_engine.cpp", 149, "GlDbgEngine", (char)"m_GlEngineOnTimerRq != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_engine.cpp", 149, "m_GlEngineOnTimerRq != nullptr");
  }
  return a1;
}

void sub_263A53BBC(_Unwind_Exception *a1)
{
  v1[46] = &unk_270EC2418;
  v1[133] = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlComStressImpl *)(v1 + 136));
  _Unwind_Resume(a1);
}

#error "263A53C8C: call analysis failed (funcsize=74)"

#error "263A53DB8: call analysis failed (funcsize=74)"

uint64_t BlueFin::GlDbgEngine::Dispose(BlueFin::GlDbgCodec **this, void (*a2)(void *))
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1540);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BlueFin::GlEngineImplStd::Dispose((BlueFin::GlEngineImplStd *)(this + 46), 0);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1540);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BOOL v3 = this[1];
  unint64_t v4 = *(uint64_t (**)(BlueFin::GlDbgCodec *))(BlueFin::GlDbgMemory::m_pInstance + 8);

  return v4(v3);
}

#error "263A53FC0: call analysis failed (funcsize=63)"

#error "263A54150: call analysis failed (funcsize=101)"

#error "263A54250: call analysis failed (funcsize=63)"

#error "263A54394: call analysis failed (funcsize=81)"

#error "263A544D8: call analysis failed (funcsize=81)"

#error "263A545D4: call analysis failed (funcsize=63)"

uint64_t BlueFin::GlDbgEngine::GetUserData(BlueFin::GlDbgEngine *this)
{
  return *((void *)this + 2);
}

#error "263A54728: call analysis failed (funcsize=101)"

uint64_t BlueFin::GlDbgEngine::PauseRequest(uint64_t a1, BlueFin::GlDbgRequest *this)
{
  uint64_t v2 = (uint64_t)this;
  uint64_t v4 = *(void *)(a1 + 8);
  if (this)
  {
    if (v4 == *((void *)this + 1))
    {
      int v11 = BlueFin::GlDbgRequest::Id(this, 0);
      BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1596);
      BOOL v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
        BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v11);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
      uint64_t v6 = *(void *)(v2 + 24);
      if (v6 && *(_DWORD *)(v6 + 16) == 12)
      {
        uint64_t v2 = 1;
        *(unsigned char *)(v6 + 136) = 1;
      }
      else
      {
        uint64_t v2 = 0;
      }
      BOOL v10 = v2;
      BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1596);
      BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
        BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v11);
      }
      size_t v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
        BlueFin::GlDbgCodec::Write(v8, &v10);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:381");
      return 0;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:376");
  }
  return v2;
}

#error "263A54A94: call analysis failed (funcsize=81)"

uint64_t BlueFin::GlDbgEngine::ToggleNotchFilterConfiguration(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  BOOL v12 = a3;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1613);
    BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, &v12);
    }
    unsigned int v11 = a3;
    BlueFin::GlDbgCodec::WriteArray(*(BlueFin::GlDbgCodec **)(a1 + 8), (uint64_t)a2, &v11);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    BlueFin::GlEngineImplStd::ToggleNotchFilterConfiguration(a1 + 368, a2, a3);
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1613);
    size_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v8();
  }
  else
  {
    BOOL v10 = *(uint64_t (**)(void))(*(void *)v4 + 104);
    return v10();
  }
}

uint64_t BlueFin::GlDbgEngine::ResumeRequest(uint64_t a1, BlueFin::GlDbgRequest *this, int a3)
{
  int v16 = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!this)
  {
    uint64_t v6 = *(void (**)(void))(*(void *)v4 + 104);
    goto LABEL_5;
  }
  if (v4 != *((void *)this + 1))
  {
    uint64_t v6 = *(void (**)(void))(*(void *)v4 + 104);
LABEL_5:
    v6();
    return 0;
  }
  int v15 = BlueFin::GlDbgRequest::Id(this, 0);
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1597);
  size_t v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v15);
  }
  uint64_t v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v16);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  BOOL v14 = 0;
  uint64_t v10 = *((void *)this + 3);
  if (v10 && *(_DWORD *)(v10 + 16) == 12)
  {
    *(unsigned char *)(v10 + 136) = 0;
    *(_DWORD *)(v10 + 116) = a3;
  }
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1597);
  unsigned int v11 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
    BlueFin::GlDbgCodec::Write(v11, (unsigned int *)&v15);
  }
  BOOL v12 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
    BlueFin::GlDbgCodec::Write(v12, &v14);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return 0;
}

uint64_t BlueFin::GlDbgEngine::UpdateBreadcrumbOption(uint64_t a1, BlueFin::GlDbgRequest *this, int a3, int a4)
{
  int v15 = a4;
  int v16 = a3;
  uint64_t v5 = *(void *)(a1 + 8);
  if (!this)
  {
    uint64_t v6 = *(void (**)(void))(*(void *)v5 + 104);
    goto LABEL_5;
  }
  if (v5 != *((void *)this + 1))
  {
    uint64_t v6 = *(void (**)(void))(*(void *)v5 + 104);
LABEL_5:
    v6();
    return 0;
  }
  int v14 = BlueFin::GlDbgRequest::Id(this, 0);
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1600);
  BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v14);
  }
  size_t v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v16);
  }
  uint64_t v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v15);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  BOOL v13 = 0;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1600);
  uint64_t v10 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
    BlueFin::GlDbgCodec::Write(v10, (unsigned int *)&v14);
  }
  unsigned int v11 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
    BlueFin::GlDbgCodec::Write(v11, &v13);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return 0;
}

uint64_t BlueFin::GlDbgEngine::UpdateBreadcrumbMaxLocsToStore(uint64_t a1, BlueFin::GlDbgRequest *this, int a3)
{
  int v13 = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!this)
  {
    uint64_t v5 = *(void (**)(void))(*(void *)v4 + 104);
    goto LABEL_5;
  }
  if (v4 != *((void *)this + 1))
  {
    uint64_t v5 = *(void (**)(void))(*(void *)v4 + 104);
LABEL_5:
    v5();
    return 0;
  }
  int v12 = BlueFin::GlDbgRequest::Id(this, 0);
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1605);
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v12);
  }
  BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v13);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  BOOL v11 = 0;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1605);
  size_t v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v12);
  }
  uint64_t v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, &v11);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return 0;
}

uint64_t BlueFin::GlDbgEngine::UpdateBreadcrumbWakeupDistance(uint64_t a1, BlueFin::GlDbgRequest *this, int a3)
{
  int v13 = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!this)
  {
    uint64_t v5 = *(void (**)(void))(*(void *)v4 + 104);
    goto LABEL_5;
  }
  if (v4 != *((void *)this + 1))
  {
    uint64_t v5 = *(void (**)(void))(*(void *)v4 + 104);
LABEL_5:
    v5();
    return 0;
  }
  int v12 = BlueFin::GlDbgRequest::Id(this, 0);
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1612);
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v12);
  }
  BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v13);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  BOOL v11 = 0;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1612);
  size_t v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v12);
  }
  uint64_t v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, &v11);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return 0;
}

uint64_t BlueFin::GlDbgEngine::BypassLteFilter(BlueFin::GlDbgCodec **this, int a2)
{
  BOOL v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1628);
  uint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BlueFin::GlEngineImplStd::BypassLteFilter((unint64_t)(this + 46), a2);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1628);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

uint64_t BlueFin::GlDbgEngine::SetLteFilter(uint64_t a1, int a2, unsigned int a3)
{
  BOOL v11 = a2;
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1635);
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v11);
  }
  BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  int v10 = a3;
  BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v10);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  uint64_t v8 = BlueFin::GlEngineImplStd::SetLteFilter(a1 + 368, a2, a3);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1635);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return v8;
}

uint64_t BlueFin::GlDbgEngine::FlushBreadcrumbs(BlueFin::GlDbgCodec **this)
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1601);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BlueFin::GlEngineImplStd::FlushBreadcrumbs((BlueFin::GlEngineImplStd *)(this + 46));
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1601);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v2();
}

uint64_t BlueFin::GlDbgEngine::ModifyBreadcrumbSelfWakeupTime(BlueFin::GlDbgCodec **this, int a2)
{
  int v6 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1604);
  BOOL v3 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3)) {
    BlueFin::GlDbgCodec::Write(v3, (unsigned int *)&v6);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  if (!*((unsigned char *)this + 400)) {
    BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)(this + 121), 100000000, 0);
  }
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1604);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v4();
}

uint64_t BlueFin::GlDbgEngine::GetBatchedLocation(BlueFin::GlDbgCodec **this, int a2)
{
  int v6 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1619);
  BOOL v3 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3)) {
    BlueFin::GlDbgCodec::Write(v3, (unsigned int *)&v6);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BlueFin::GlEngineImplStd::GetBatchedLocation((BlueFin::GlEngineImplStd *)(this + 46));
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1619);
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v4();
}

uint64_t BlueFin::GlDbgEngine::SetAidMask(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1548);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAidMask(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1548);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:604");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetAsstAcq(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1549);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstAcq(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1549);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:623");
  }
  return v2;
}

{
  uint64_t v2;
  BlueFin::GlDbgCodec *v4;
  BlueFin::GlDbgCodec *v5;
  BlueFin::GlDbgCodec *v6;
  BOOL v8;

  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1550);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstAcq(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1550);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:641");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetAsstAlm(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1551);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstAlm(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1551);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:660");
  }
  return v2;
}

{
  uint64_t v2;
  BlueFin::GlDbgCodec *v4;
  BlueFin::GlDbgCodec *v5;
  BlueFin::GlDbgCodec *v6;
  BOOL v8;

  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1552);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstAlm(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1552);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:679");
  }
  return v2;
}

{
  uint64_t v2;
  BlueFin::GlDbgCodec *v4;
  BlueFin::GlDbgCodec *v5;
  BlueFin::GlDbgCodec *v6;
  BOOL v8;

  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1622);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstAlm(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1622);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:698");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetAsstEph(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1553);
    int v13 = a3;
    BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v13);
    }
    BOOL v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8))
    {
      *((_DWORD *)v8 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v8, a2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v9 = BlueFin::GlEngineImplStd::SetAsstEph((BlueFin::GlEngineImplStd *)(a1 + 368));
    BOOL v12 = v9;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1553);
    int v10 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, &v12);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:717");
    return 0;
  }
  return v9;
}

uint64_t BlueFin::GlDbgEngine::SetAsstEph(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1554);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstEph(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1554);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:739");
  }
  return v2;
}

signed __int8 *BlueFin::GlDbgEngine::SetAsstIono(uint64_t a1, signed __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1555);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = (signed __int8 *)BlueFin::GlEngineImplStd::SetAsstIono(a1 + 368, v2);
    BOOL v8 = (char)v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1555);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:758");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetAsstTime(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a3;
  int v16 = a4;
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v5, 1560);
    uint64_t v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9))
    {
      *((_DWORD *)v9 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v9, a2);
    }
    int v10 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, (unint64_t *)&v17);
    }
    BOOL v11 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
      BlueFin::GlDbgCodec::Write(v11, (unsigned int *)&v16);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v12 = BlueFin::GlEngineImplStd::SetAsstTime(a1 + 368, a2, a3, a4);
    BOOL v15 = v12;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1560);
    int v13 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, &v15);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v5 + 104))(v5, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:858");
    return 0;
  }
  return v12;
}

uint64_t BlueFin::GlDbgEngine::SetAsstUtc(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1561);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstUtc(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1561);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:879");
  }
  return v2;
}

{
  uint64_t v2;
  BlueFin::GlDbgCodec *v4;
  BlueFin::GlDbgCodec *v5;
  BlueFin::GlDbgCodec *v6;
  BOOL v8;

  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1562);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstUtc(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1562);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:898");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetAsstGnssTimeModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1563);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstGnssTimeModel(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1563);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:917");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetAsstGlnsAuxiliaryMsg(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1564);
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), v2);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetAsstGlnsAuxiliaryMsg(a1 + 368, v2);
    BOOL v7 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1564);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
      BlueFin::GlDbgCodec::Write(v5, &v7);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:936");
  }
  return v2;
}

unsigned __int8 *BlueFin::GlDbgEngine::SetAsstGpsAuxiliaryMsg(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1626);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = (unsigned __int8 *)BlueFin::GlEngineImplStd::SetAsstGpsAuxiliaryMsg(a1 + 368, v2);
    BOOL v8 = (char)v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1626);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:955");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetCbOnAsicDacData(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, char *a2, uint64_t a3))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnAsicDacData) {
    *(void *)(a1 + 168) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1565);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 680) = BlueFin::GlDbgProxyGlEngineOnAsicDacData;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1565);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnDrControlMemDump(uint64_t result, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnDrControlMemDump) {
    *(void *)(result + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  }
  *(void *)(result + 688) = BlueFin::GlDbgProxyGlEngineOnDrControlMemDump;
  return result;
}

uint64_t BlueFin::GlDbgEngine::SetCbOnAsstStatus(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, unsigned char *a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnAsstStatus) {
    *(void *)(a1 + 192) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1566);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 760) = BlueFin::GlDbgProxyGlEngineOnAsstStatus;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1566);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnFreqUpdate(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, uint64_t a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnFreqUpdate) {
    *(void *)(a1 + 22bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1567);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 752) = BlueFin::GlDbgProxyGlEngineOnFreqUpdate;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1567);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnRtiFileTimestampReport(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, uint64_t a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngCbOnRtiFileTimestampReport) {
    *(void *)(a1 + 352) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1631);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 840) = BlueFin::GlDbgProxyGlEngCbOnRtiFileTimestampReport;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1631);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnPwrData(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, double *a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineCbOnPwrData) {
    *(void *)(a1 + 360) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1632);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 848) = BlueFin::GlDbgProxyGlEngineCbOnPwrData;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1632);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnPPSPlatformTime(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1))
{
  if (a2 != BlueFin::GlDbgProxyGlEngCbOnPPSPlatformTime) {
    *(void *)(a1 + 152) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1568);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 872) = BlueFin::GlDbgProxyGlEngCbOnPPSPlatformTime;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1568);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnPrecTimerRq(uint64_t a1, uint64_t (*a2)(uint64_t a1))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnPrecTimerRq) {
    *(void *)(a1 + 232) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1569);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 720) = BlueFin::GlDbgProxyGlEngineOnPrecTimerRq;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1569);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnReady(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnReady) {
    *(void *)(a1 + 240) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1570);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 696) = BlueFin::GlDbgProxyGlEngineOnReady;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1570);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnResource(uint64_t a1, uint64_t (*a2)(uint64_t a1, unsigned int a2), BlueFin::GlDbgCodec *(*a3)(uint64_t a1, unsigned int a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnResourceRequest && a3 != BlueFin::GlDbgProxyGlEngineOnResourceRelease)
  {
    *(void *)(a1 + 248) = a2;
    *(void *)(a1 + 256) = a3;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1571);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 70bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlDbgProxyGlEngineOnResourceRequest;
  *(void *)(a1 + 712) = BlueFin::GlDbgProxyGlEngineOnResourceRelease;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1571);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v4();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnResponse(uint64_t a1, uint64_t (*a2)(uint64_t a1, uint64_t a2, uint64_t a3))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnResponse) {
    *(void *)(a1 + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1572);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 792) = BlueFin::GlDbgProxyGlEngineOnResponse;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1572);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnGeofenceStatus(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, unsigned int a2, uint64_t a3))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnGeofenceStatus) {
    *(void *)(a1 + 320) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1592);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 888) = BlueFin::GlDbgProxyGlEngineOnGeofenceStatus;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1592);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnLHPatchNeeded(uint64_t a1, BOOL (*a2)(uint64_t a1, char *a2, unsigned int *a3))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnLHPatchNeeded) {
    *(void *)(a1 + 328) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1602);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 896) = BlueFin::GlDbgProxyGlEngineOnLHPatchNeeded;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1602);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnReportMIAdjustmentReqStatus(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, uint64_t a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnReportMIAdjustmentReqStatus) {
    *(void *)(a1 + 34bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1611);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 920) = BlueFin::GlDbgProxyGlEngineOnReportMIAdjustmentReqStatus;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1611);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnLHPatchLoadComplete(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnLHPatchLoadComplete) {
    *(void *)(a1 + 336) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1603);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 90bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlDbgProxyGlEngineOnLHPatchLoadComplete;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1603);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnBurstMode(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, BOOL a2))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnBurstMode) {
    *(void *)(a1 + 312) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1593);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 736) = BlueFin::GlDbgProxyGlEngineOnBurstMode;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1593);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgEngine::SetCbOnOscReadyForStorage(uint64_t a1, BlueFin::GlDbgCodec *(*a2)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))
{
  if (a2 != BlueFin::GlDbgProxyGlEngineOnOscReadyForStorage) {
    *(void *)(a1 + 5312) = a2;
  }
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1618);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  *(void *)(a1 + 936) = BlueFin::GlDbgProxyGlEngineOnOscReadyForStorage;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1618);
  BOOL v3 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v3();
}

BOOL BlueFin::GlDbgEngine::SetFixStatus(uint64_t a1, BOOL a2)
{
  BOOL fixed = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1578);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, fixed);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    BOOL fixed = BlueFin::GlEngineImplStd::SetFixStatus(a1 + 368, fixed);
    BOOL v8 = fixed;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1578);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1322");
  }
  return fixed;
}

uint64_t BlueFin::GlDbgEngine::SetFlightMode(BlueFin::GlDbgCodec **this, BOOL a2)
{
  BOOL v9 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1579);
  uint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v9);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = BlueFin::GlEngineImplStd::SetFlightMode((BlueFin::GlEngineImplStd *)(this + 46), a2);
  BOOL v8 = v5;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1579);
  int v6 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v8);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v5;
}

unsigned __int16 *BlueFin::GlDbgEngine::SetPpsPlatformTime(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1580);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, (uint64_t)v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = (unsigned __int16 *)BlueFin::GlEngineImplStd::SetPpsPlatformTime(a1 + 368, v2);
    BOOL v8 = (char)v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1580);
    int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1356");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetPpsSettings(BlueFin::GlDbgCodec **this, BOOL a2, BOOL a3, int a4, unsigned int a5, unsigned int a6)
{
  BOOL v25 = a2;
  BOOL v24 = a3;
  int v22 = a5;
  int v23 = a4;
  int v21 = a6;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1581);
  uint64_t v12 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
    BlueFin::GlDbgCodec::Write(v12, &v25);
  }
  int v13 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
    BlueFin::GlDbgCodec::Write(v13, &v24);
  }
  int v14 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v14 + 120))(v14)) {
    BlueFin::GlDbgCodec::Write(v14, (unsigned int *)&v23);
  }
  BOOL v15 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v15 + 120))(v15)) {
    BlueFin::GlDbgCodec::Write(v15, (unsigned int *)&v22);
  }
  int v16 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v16 + 120))(v16)) {
    BlueFin::GlDbgCodec::Write(v16, (unsigned int *)&v21);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v17 = BlueFin::GlEngineImplStd::SetPpsSettings((BlueFin::GlEngineImplStd *)(this + 46), a2, a3, a4, a5, a6);
  BOOL v20 = v17;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1581);
  uint64_t v18 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v18 + 120))(v18)) {
    BlueFin::GlDbgCodec::Write(v18, &v20);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v17;
}

uint64_t BlueFin::GlDbgEngine::SetRealTimeIntegrity(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1582);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      v6.n128_f32[0] = BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t, __n128))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1, v6);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetRealTimeIntegrity(a1 + 368, v2);
    BOOL v9 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1582);
    BOOL v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, &v9);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1394");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetGeofencePauseTime(BlueFin::GlDbgCodec **this, unsigned int a2, unsigned int a3, __int16 a4)
{
  int v16 = a3;
  int v17 = a2;
  __int16 v15 = a4;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1591);
  BOOL v8 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v17);
  }
  BOOL v9 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v16);
  }
  int v10 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
    BlueFin::GlDbgCodec::Write(v10, &v15);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v11 = BlueFin::GlEngineImplStd::SetGeofencePauseTime((BlueFin::GlEngineImplStd *)(this + 46), a2, a3, a4);
  BOOL v14 = v11;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1591);
  uint64_t v12 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
    BlueFin::GlDbgCodec::Write(v12, &v14);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v11;
}

uint64_t BlueFin::GlDbgEngine::SetSensConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1583);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, v2);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    uint64_t v2 = BlueFin::GlEngineImplStd::SetSensConfig(a1 + 368, v2);
    BOOL v8 = v2;
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1583);
    __n128 v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v8);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1449");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::SetSensRawInfo(uint64_t a1, uint64_t a2)
{
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1584);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), a2);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  uint64_t v4 = BlueFin::GlEngineImplStd::SetSensRawInfo(a1 + 368, a2);
  BOOL v7 = v4;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1584);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v7);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return v4;
}

uint64_t BlueFin::GlDbgEngine::SetDgpsData(BlueFin::GlDbgEngine *this, char *a2, __int16 a3)
{
  __int16 v11 = a3;
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 1594);
    BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, &v11);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    uint64_t v7 = BlueFin::GlEngineImplStd::SetDgpsData((BlueFin::GlDbgEngine *)((char *)this + 368), a2, a3);
    BOOL v10 = v7;
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 1594);
    BOOL v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, &v10);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  }
  else
  {
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1483");
    return 0;
  }
  return v7;
}

uint64_t BlueFin::GlDbgEngine::SendSensorHubData(BlueFin::GlDbgCodec **this, char *a2, unsigned __int16 a3)
{
  unsigned __int16 v10 = a3;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1617);
  BlueFin::GlDbgCodec::WriteArray(this[1], a2, &v10);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v6 = BlueFin::GlEngineImplStd::SendSensorHubData((BlueFin::GlEngineImplStd *)(this + 46), (unsigned __int8 *)a2, a3);
  BOOL v9 = v6;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1617);
  uint64_t v7 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, &v9);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v6;
}

uint64_t BlueFin::GlDbgEngine::SetGyroTemp(BlueFin::GlDbgCodec **this, double a2, double a3)
{
  double v12 = a3;
  double v13 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1595);
  uint64_t v6 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v13);
  }
  uint64_t v7 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, &v12);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v8 = BlueFin::GlEngineImplStd::SetGyroTemp((BlueFin::GlEngineImplStd *)(this + 46), a2, a3);
  BOOL v11 = v8;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1595);
  BOOL v9 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, &v11);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v8;
}

uint64_t BlueFin::GlDbgEngine::SetWlanInfo(uint64_t a1, uint64_t a2)
{
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1598);
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4))
  {
    *((_DWORD *)v4 + 143) = 2;
    BlueFin::GlDbgCodec::Rvw(v4, a2);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  uint64_t v5 = BlueFin::GlEngineImplStd::SetWlanInfo(a1 + 368, a2);
  BOOL v8 = v5;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1598);
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v8);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return v5;
}

uint64_t BlueFin::GlDbgEngine::SetWlanNotify(uint64_t a1, uint64_t a2)
{
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1599);
  uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4))
  {
    *((_DWORD *)v4 + 143) = 2;
    BlueFin::GlDbgCodec::Rvw(v4, a2);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  uint64_t v5 = BlueFin::GlEngineImplStd::SetWlanNotify(a1 + 368, a2);
  BOOL v8 = v5;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1599);
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v8);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return v5;
}

uint64_t BlueFin::GlDbgEngine::SetUserData(uint64_t this, void *a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

uint64_t BlueFin::GlDbgEngine::StopAllRequests(BlueFin::GlDbgCodec **this, BOOL a2)
{
  BOOL v9 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1586);
  uint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v9);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = BlueFin::GlEngineImplStd::StopAllRequests((BlueFin::GlEngineImplStd *)(this + 46), a2);
  BOOL v8 = v5;
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1586);
  uint64_t v6 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v8);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v5;
}

BlueFin::GlDbgRequest *BlueFin::GlDbgEngine::StopRequest(uint64_t a1, BlueFin::GlDbgRequest *this)
{
  uint64_t v2 = this;
  uint64_t v4 = *(void *)(a1 + 8);
  if (this)
  {
    if (v4 == *((void *)this + 1))
    {
      int v10 = BlueFin::GlDbgRequest::Id(this, 0);
      BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1587);
      uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
        BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v10);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
      uint64_t v2 = (BlueFin::GlDbgRequest *)BlueFin::GlEngineImplStd::StopRequest(a1 + 368, *((void *)v2 + 3));
      BOOL v9 = (char)v2;
      BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1587);
      uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
        BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v10);
      }
      uint64_t v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
        BlueFin::GlDbgCodec::Write(v7, &v9);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1627");
      return 0;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v4 + 104))(v4, 1, "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/gldebug/src/gldebug_engine.cpp:1622");
  }
  return v2;
}

uint64_t BlueFin::GlDbgEngine::Ready(BlueFin::GlDbgCodec **this)
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1609);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1609);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v2();
}

uint64_t BlueFin::GlDbgEngine::WriteNvMem(BlueFin::GlDbgCodec **this)
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1589);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  BOOL v4 = 0;
  BlueFin::GlEngineImplStd::WriteNvMem((BlueFin::GlEngineImplStd *)(this + 46));
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1589);
  uint64_t v2 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v2 + 120))(v2)) {
    BlueFin::GlDbgCodec::Write(v2, &v4);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return 0;
}

uint64_t BlueFin::GlDbgEngine::NotifyCurrentMachTimeSec(BlueFin::GlDbgCodec **this, int a2)
{
  int v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1620);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  if (*((unsigned char *)this + 400)) {
    *((_DWORD *)this[49] + 31473) = a2;
  }
  else {
    BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)(this + 121), 100000000, 0);
  }
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1620);
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

BlueFin::GlFormat *BlueFin::GlDbgEngine::ReportDump(BlueFin::GlDbgCodec **this)
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 1621);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = BlueFin::GlEngineImplStd::ReportDump((BlueFin::GlEngineImplStd *)(this + 46), v2, v3, v4);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1621);
  int v7 = strlen((const char *)v5);
  BlueFin::GlDbgCodec::WriteArray(this[1], (char *)v5, (unsigned int *)&v7);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  return v5;
}

uint64_t BlueFin::GlDbgEngine::GetEngineType(BlueFin::GlDbgEngine *this)
{
  return *((unsigned int *)this + 1324);
}

uint64_t BlueFin::GlDbgEngine::SetEngineType(uint64_t a1, int a2, uint64_t a3, const char *a4)
{
  return BlueFin::GlEngineImplStd::SetEngineType(a1 + 368, a2, a3, a4);
}

uint64_t BlueFin::GlDbgEngine::GetSatelliteOrbitInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v9 = a3;
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1630);
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v9);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  __int16 v8 = 0;
  BlueFin::GlEngineImplStd::GetSatelliteOrbitInfo(a1 + 368, a2, a3);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1630);
  BlueFin::GlDbgCodec::WriteArray(*(BlueFin::GlDbgCodec **)(a1 + 8), a2, &v8);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return 0;
}

uint64_t BlueFin::GlDbgEngine::GetRtcAnalyticsInfo(uint64_t a1, uint64_t a2)
{
  BlueFin::GlDbgCodec::WriteStart(*(BlueFin::GlDbgCodec **)(a1 + 8), 1647);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  uint64_t RtcAnalyticsInfo = BlueFin::GlEngineImplStd::GetRtcAnalyticsInfo(a1 + 368, a2);
  BOOL v8 = RtcAnalyticsInfo;
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1647);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6))
  {
    *((_DWORD *)v6 + 143) = 2;
    BlueFin::GlDbgCodec::Rvw(v6, a2);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  return RtcAnalyticsInfo;
}

#error "263A59AB0: call analysis failed (funcsize=55)"

uint64_t BlueFin::GlDbgEngine::SetBlankingConfigOnTheFly(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 1636);
    uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    *((_DWORD *)v5 + 143) = 2;
    unsigned __int8 v11 = a2[1];
    BlueFin::GlDbgCodec::Rvw(v5, &v11);
    if (!*((_DWORD *)v5 + 143)) {
      a2[1] = v11;
    }
    uint64_t v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    *((_DWORD *)v6 + 143) = 2;
    unsigned __int8 v12 = *a2;
    BlueFin::GlDbgCodec::Rvw(v6, &v12);
    if (!*((_DWORD *)v6 + 143)) {
      *a2 = v12;
    }
    int v7 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    *((_DWORD *)v7 + 143) = 2;
    unsigned __int8 v13 = a2[2];
    BlueFin::GlDbgCodec::Rvw(v7, &v13);
    if (!*((_DWORD *)v7 + 143)) {
      a2[2] = v13;
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    BlueFin::GlEngineImplStd::SetBlankingConfigOnTheFly(a1 + 368, a2);
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 1636);
    BOOL v8 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v8();
  }
  else
  {
    int v10 = *(uint64_t (**)(void))(*(void *)v3 + 104);
    return v10();
  }
}

uint64_t BlueFin::GlDbgEngine::SetRfLoss_dB_Ap(BlueFin::GlDbgCodec **this, float a2)
{
  float v8 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1640);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v8);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = this[47];
  if (v5) {
    (*(void (**)(BlueFin::GlDbgCodec *, float))(*(void *)v5 + 64))(v5, a2);
  }
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1640);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

uint64_t BlueFin::GlDbgEngine::SetRfLoss_dB_Ap_L5(BlueFin::GlDbgCodec **this, float a2)
{
  float v8 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1641);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v8);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = this[47];
  if (v5) {
    (*(void (**)(BlueFin::GlDbgCodec *, float))(*(void *)v5 + 72))(v5, a2);
  }
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1641);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

uint64_t BlueFin::GlDbgEngine::SetRfLoss_dB_Cp(BlueFin::GlDbgCodec **this, float a2)
{
  float v8 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1642);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v8);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = this[47];
  if (v5) {
    (*(void (**)(BlueFin::GlDbgCodec *, float))(*(void *)v5 + 80))(v5, a2);
  }
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1642);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

uint64_t BlueFin::GlDbgEngine::SetRfLoss_dB_Cp_L5(BlueFin::GlDbgCodec **this, float a2)
{
  float v8 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1643);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v8);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  uint64_t v5 = this[47];
  if (v5) {
    (*(void (**)(BlueFin::GlDbgCodec *, float))(*(void *)v5 + 88))(v5, a2);
  }
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1643);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

uint64_t BlueFin::GlDbgEngine::SetL5HardwareDelayInMeters(BlueFin::GlDbgCodec **this, float a2)
{
  float v8 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1644);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v8);
  }
  __n128 v5 = ((__n128 (*)(BlueFin::GlDbgCodec *, uint64_t))*(void *)(*(void *)this[1] + 32))(this[1], 1);
  v5.n128_f32[0] = a2;
  BlueFin::GlEngineImplStd::SetL5HardwareDelayInMeters(this + 46, v5);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1644);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

uint64_t BlueFin::GlDbgEngine::SetL5DeltaHardwareDelayInMeters(BlueFin::GlDbgCodec **this, float a2)
{
  float v8 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 1645);
  BOOL v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v8);
  }
  __n128 v5 = ((__n128 (*)(BlueFin::GlDbgCodec *, uint64_t))*(void *)(*(void *)this[1] + 32))(this[1], 1);
  v5.n128_f32[0] = a2;
  BlueFin::GlEngineImplStd::SetL5DeltaHardwareDelayInMeters(this + 46, v5);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 1645);
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

void BlueFin::GlDbgEngine::~GlDbgEngine(BlueFin::GlDbgEngine *this)
{
  *(void *)this = &unk_270EBA788;
  *((void *)this + 46) = &unk_270EC2418;
  *((void *)this + 133) = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlDbgEngine *)((char *)this + 1088));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270EBA788;
  *((void *)this + 46) = &unk_270EC2418;
  *((void *)this + 133) = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlDbgEngine *)((char *)this + 1088));

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlEngineDebug::Instance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, BOOL a15)
{
  uint64_t result = BlueFin::GlEngineDebug::m_pInstance;
  if (BlueFin::GlEngineDebug::m_pInstance) {
    return result;
  }
  if (BlueFin::GlDbgMemory::m_pInstance) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = a8 == 0;
  }
  if (!v24 && a9 != 0)
  {
    double v28 = (uint64_t (**)(uint64_t))a8(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v28;
    unsigned int v26 = a8;
    if (v28)
    {
      *double v28 = a8;
      v28[1] = (uint64_t (*)(uint64_t))a9;
      unsigned int v26 = a8;
    }
    goto LABEL_14;
  }
  unsigned int v26 = a8;
  if (a8)
  {
LABEL_14:
    unsigned int v27 = (void *)v26(7000);
    goto LABEL_15;
  }
  unsigned int v27 = (void *)(*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(7000);
LABEL_15:
  if (v27)
  {
    uint64_t v29 = (uint64_t)v27;
    memset(v27, 129, 0x1B58uLL);
    if (a12 <= 1) {
      unsigned int v30 = 1;
    }
    else {
      unsigned int v30 = a12;
    }
    __int16 v31 = (BlueFin::GlDbgProxy *)BlueFin::GlDbgProxy::GlDbgProxy(v29, a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11, v30);
    BlueFin::GlEngineDebug::m_pInstance = v29 + 608;
    *(void *)(v29 + 62bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a13;
    BlueFin::GlDbgProxy::DetermineWritable(v31, a15);
  }
  return BlueFin::GlEngineDebug::m_pInstance;
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_Fixes(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  v13[47] = *MEMORY[0x263EF8340];
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t v5 = BlueFin::GlStream::GetU08(a2);
  if (v5 > 0x20)
  {
    int v10 = "numFixes <= _DIM(otGeofenceFixes)";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2193, "Handle_GeoRpt_Fixes", (char)"numFixes <= _DIM(otGeofenceFixes)");
    int v11 = 2193;
    goto LABEL_9;
  }
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = v5;
    float v8 = (float *)v13;
    do
    {
      *((_DWORD *)v8 - 2) = BlueFin::GlStream::GetU32(a2);
      *(v8 - 1) = BlueFin::GlStream::GetF32(a2);
      *float v8 = BlueFin::GlStream::GetF32(a2);
      v8 += 3;
      --v7;
    }
    while (v7);
  }
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    int v10 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2200, "Handle_GeoRpt_Fixes", (char)"otStream.GetAvailableSize() == 0");
    int v11 = 2200;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v11, v10);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(*((void *)this + 1) + 17104)
                                                                      + 16))(*(void *)(*((void *)this + 1) + 17104), U08, v6, v12);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_AreaTriggered(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v11[0] = BlueFin::GlStream::GetU32(a2);
  v11[1] = BlueFin::GlStream::GetF32(a2);
  double v11[2] = BlueFin::GlStream::GetF32(a2);
  void v11[3] = BlueFin::GlStream::GetF32(a2);
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t v5 = U08;
  if (U08)
  {
    uint64_t v6 = U08;
    uint64_t v7 = v13;
    uint64_t v8 = U08;
    do
    {
      *v7++ = BlueFin::GlStream::GetU08(a2);
      --v8;
    }
    while (v8);
    __int16 v9 = v12;
    do
    {
      *v9++ = BlueFin::GlStream::GetU08(a2);
      --v6;
    }
    while (v6);
  }
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2242, "Handle_GeoRpt_AreaTriggered", (char)"otStream.GetAvailableSize() == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", 2242, "otStream.GetAvailableSize() == 0");
  }
  return (*(uint64_t (**)(void, _DWORD *, uint64_t, unsigned char *, unsigned char *))(**(void **)(*((void *)this + 1)
                                                                                              + 17104)
                                                                                + 40))(*(void *)(*((void *)this + 1) + 17104), v11, v5, v13, v12);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_InternalState(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  int U32 = BlueFin::GlStream::GetU32(a2);
  char U08 = BlueFin::GlStream::GetU08(a2);
  __int16 U16 = BlueFin::GlStream::GetU16(a2);
  int v8 = BlueFin::GlStream::GetU32(a2);
  float F32 = BlueFin::GlStream::GetF32(a2);
  float v10 = BlueFin::GlStream::GetF32(a2);
  float v11 = BlueFin::GlStream::GetF32(a2);
  int v12 = BlueFin::GlStream::GetU32(a2);
  float v13 = BlueFin::GlStream::GetF32(a2);
  float v14 = BlueFin::GlStream::GetF32(a2);
  float v15 = BlueFin::GlStream::GetF32(a2);
  float v16 = BlueFin::GlStream::GetF32(a2);
  float v17 = BlueFin::GlStream::GetF32(a2);
  int v18 = BlueFin::GlStream::GetU32(a2);
  int v19 = BlueFin::GlStream::GetU32(a2);
  int v20 = BlueFin::GlStream::GetU32(a2);
  __int16 v21 = BlueFin::GlStream::GetU16(a2);
  __int16 v22 = BlueFin::GlStream::GetU16(a2);
  __int16 v23 = BlueFin::GlStream::GetU16(a2);
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2270, "Handle_GeoRpt_InternalState", (char)"otStream.GetAvailableSize() == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", 2270, "otStream.GetAvailableSize() == 0");
  }
  return (*(uint64_t (**)(void, int *))(**(void **)(*((void *)this + 1) + 17104) + 24))(*(void *)(*((void *)this + 1) + 17104), &U32);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_DebugMsg(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t v5 = BlueFin::GlStream::GetU08(a2);
  Str = (const void *)BlueFin::GlStream::GetStr(a2, v5);
  if (!Str)
  {
    int v8 = "sStringDecoded";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2214, "Handle_GeoRpt_DebugMsg", (char)"sStringDecoded");
    int v9 = 2214;
    goto LABEL_6;
  }
  memcpy(__dst, Str, v5);
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    int v8 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2217, "Handle_GeoRpt_DebugMsg", (char)"otStream.GetAvailableSize() == 0");
    int v9 = 2217;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v9, v8);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned char *))(**(void **)(*((void *)this + 1) + 17104)
                                                                      + 48))(*(void *)(*((void *)this + 1) + 17104), U08, v5, __dst);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_GeoRpt_RawRpcs(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t v5 = BlueFin::GlStream::GetU08(a2);
  size_t U16 = BlueFin::GlStream::GetU16(a2);
  Str = (const void *)BlueFin::GlStream::GetStr(a2, U16);
  if (!Str)
  {
    int v9 = "sStringDecoded";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2286, "Handle_GeoRpt_RawRpcs", (char)"sStringDecoded");
    int v10 = 2286;
    goto LABEL_6;
  }
  memcpy(__dst, Str, U16);
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    int v9 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 2289, "Handle_GeoRpt_RawRpcs", (char)"otStream.GetAvailableSize() == 0");
    int v10 = 2289;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v10, v9);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, size_t, unsigned char *))(**(void **)(*((void *)this + 1)
                                                                                            + 17104)
                                                                              + 64))(*(void *)(*((void *)this + 1) + 17104), U08, v5, U16, __dst);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridData(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  unsigned int v5 = BlueFin::GlStream::GetU08(a2);
  v16[0] = v5 & 1;
  v16[1] = (v5 >> 1) & 0xF;
  unsigned int v6 = v5 >> 5;
  void v16[2] = v5 >> 5;
  int v7 = BlueFin::GlStream::GetU08(a2);
  uint64_t v8 = (v7 + 1);
  __int16 v17 = v7 + 1;
  __int16 v18 = BlueFin::GlStream::GetU08(a2) + 1;
  if (v6 == 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = (v7 + 32) >> 5;
  }
  char v20 = v9;
  unsigned int v10 = BlueFin::GlStream::GetU08(a2);
  char v19 = 5 * (v10 & 7);
  uint64_t v11 = 0;
  __int16 v21 = (v10 >> 4) & 0xC | (v10 >> 3) & 3 | (16 * (BlueFin::GlStream::GetU08(a2) & 0x1F));
  v22[0] = 0;
  do
    v22[v11++] = BlueFin::GlStream::GetU32(a2);
  while (v9 != v11);
  uint64_t v12 = 0;
  do
  {
    if (((unint64_t)v22[v12 >> 5] >> (v12 & 0x1F)))
    {
      int U16 = BlueFin::GlStream::GetU16(a2);
      unsigned int v14 = ((U16 << 16) & 0xFFE00000) >> U16;
    }
    else
    {
      unsigned int v14 = 0;
    }
    v22[v12++ + 8] = v14;
  }
  while (v8 != v12);
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1118, "Handle_SatRpt_TrkGridData", (char)"otStream.GetAvailableSize() == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", 1118, "otStream.GetAvailableSize() == 0");
  }
  return (*(uint64_t (**)(void, uint64_t, unsigned char *))(**(void **)(*((void *)this + 1) + 17072) + 80))(*(void *)(*((void *)this + 1) + 17072), U08, v16);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridMsmt(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  unsigned int U08 = BlueFin::GlStream::GetU08(a2);
  unsigned int v3 = BlueFin::GlStream::GetU08(a2);
  v18[0] = v3 & 1;
  v18[1] = (v3 >> 1) & 0xF;
  unint64_t v4 = (unint64_t)v3 >> 5;
  _OWORD v18[2] = v4;
  uint64_t v5 = BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridMsmt(BlueFin::GlStream &)::lut_type_to_len[v4];
  v18[3] = BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridMsmt(BlueFin::GlStream &)::lut_type_to_len[v4];
  int v6 = BlueFin::GlStream::GetU08(a2);
  char v18[4] = v6;
  unsigned int v7 = BlueFin::GlStream::GetU08(a2);
  v18[5] = 5 * (v7 & 7);
  v18[6] = (v7 & 0x10) != 0;
  __int16 v19 = (v7 >> 5) & 0xFE0F | (16 * (BlueFin::GlStream::GetU16(a2) & 0x1F));
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (unsigned int *)&v20;
    do
    {
      unsigned int U16 = BlueFin::GlStream::GetU16(a2);
      uint64_t v11 = &v18[48 * v8];
      v11[12] = U16 & 0x1F;
      v11[13] = (U16 >> 5) & 0x1F;
      *((_DWORD *)v11 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlStream::GetS32(a2);
      *((_DWORD *)v11 + 5) = BlueFin::GlStream::GetS32(a2);
      uint64_t v12 = v9;
      uint64_t v13 = v5;
      do
      {
        int v14 = BlueFin::GlStream::GetU16(a2);
        *v12++ = ((v14 << 16) & 0xFFE00000) >> v14;
        --v13;
      }
      while (v13);
      if (v4 != 4) {
        bzero(&v18[48 * v8 + 24 + 4 * v5], 4 * (8 - v5) + 4);
      }
      ++v8;
      v9 += 12;
    }
    while (v8 != v6);
  }
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1173, "Handle_SatRpt_TrkGridMsmt", (char)"otStream.GetAvailableSize() == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", 1173, "otStream.GetAvailableSize() == 0");
  }
  return (*(uint64_t (**)(void, void, unsigned char *))(**(void **)(*((void *)this + 1) + 17072) + 88))(*(void *)(*((void *)this + 1) + 17072), U08, v18);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_TrkGridTapCfg(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t v10 = 0x203020F043F0606;
  int v11 = -16711421;
  char v12 = -1;
  v6[0] = BlueFin::GlStream::GetU32(a2);
  v6[1] = BlueFin::GlStream::GetU32(a2);
  v6[2] = BlueFin::GlStream::GetU32(a2);
  __int16 U16 = BlueFin::GlStream::GetU16(a2);
  __int16 v8 = BlueFin::GlStream::GetU16(a2);
  char v9 = BlueFin::GlStream::GetU08(a2);
  BlueFin::GlStream::GetU08(a2);
  __int16 v13 = BlueFin::GlStream::GetU16(a2) & 0x7FF | 0x2000;
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1196, "Handle_SatRpt_TrkGridTapCfg", (char)"otStream.GetAvailableSize() == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", 1196, "otStream.GetAvailableSize() == 0");
  }
  return (*(uint64_t (**)(void, uint64_t, _DWORD *))(**(void **)(*((void *)this + 1) + 17072) + 96))(*(void *)(*((void *)this + 1) + 17072), U08, v6);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_EramDump(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  uint64_t result = BlueFin::GlStream::GetU08(a2);
  uint64_t v6 = result;
  if ((result & 0x80) != 0)
  {
    uint64_t v7 = BlueFin::GlStream::GetU08(a2);
    uint64_t result = BlueFin::GlStream::GetU08(a2);
    uint64_t v8 = result;
    if ((v6 & 0x20) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    unsigned int v15 = BlueFin::GlStream::GetU08(a2);
    char v29 = v15;
    char v30 = BlueFin::GlStream::GetU08(a2);
    __int16 U16 = BlueFin::GlStream::GetU16(a2);
    if (v15 >= 4)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v15 >> 2;
      __int16 v18 = &v29;
      do
      {
        for (uint64_t i = 0; i != -8; --i)
        {
          v18[i + 11] = BlueFin::GlStream::GetS08(a2);
          v18[i + 73] = BlueFin::GlStream::GetS08(a2);
        }
        uint64_t v20 = 0;
        do
        {
          v18[v20 + 19] = BlueFin::GlStream::GetS08(a2);
          v18[v20 + 81] = BlueFin::GlStream::GetS08(a2);
          unint64_t v21 = v20 + 15;
          --v20;
        }
        while (v21 > 8);
        uint64_t v22 = 0;
        do
        {
          v18[v22 + 27] = BlueFin::GlStream::GetS08(a2);
          v18[v22 + 89] = BlueFin::GlStream::GetS08(a2);
          unint64_t v23 = v22 + 23;
          --v22;
        }
        while (v23 > 0x10);
        BlueFin::GlStream::GetU16(a2);
        uint64_t v24 = 0;
        do
        {
          v18[v24 + 34] = BlueFin::GlStream::GetS08(a2);
          v18[v24 + 96] = BlueFin::GlStream::GetS08(a2);
          unint64_t v25 = v24 + 30;
          --v24;
        }
        while (v25 > 0x18);
        ++v16;
        v18 += 31;
      }
      while (v16 != v17);
    }
    uint64_t v8 = v8;
    if (BlueFin::GlStream::GetAvailableSize(a2))
    {
      __int16 v13 = "otStream.GetAvailableSize() == 0";
      DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1700, "Handle_SatRpt_EramDump", (char)"otStream.GetAvailableSize() == 0");
      int v14 = 1700;
      goto LABEL_39;
    }
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, char *))(**(void **)(*((void *)this + 1) + 17072)
                                                                                         + 32))(*(void *)(*((void *)this + 1) + 17072), U08, v7, v8, v6, &v29);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if ((result & 0x20) != 0) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return result;
    }
    uint64_t v9 = 0;
    uint64_t v10 = &v29;
    do
    {
      *(&v29 + 16 * v9) = BlueFin::GlStream::GetU08(a2);
      uint64_t v11 = 15;
      do
        v10[v11--] = BlueFin::GlStream::GetU08(a2);
      while (v11);
      ++v9;
      v10 += 16;
    }
    while (v9 != 8);
    __int16 v34 = BlueFin::GlStream::GetU16(a2);
    int v12 = BlueFin::GlStream::GetU08(a2);
    char v35 = v12;
    char v36 = BlueFin::GlStream::GetU08(a2);
    if (v12 == 8)
    {
      if (BlueFin::GlStream::GetAvailableSize(a2))
      {
        __int16 v13 = "otStream.GetAvailableSize() == 0";
        DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1751, "Handle_SatRpt_EramDump", (char)"otStream.GetAvailableSize() == 0");
        int v14 = 1751;
        goto LABEL_39;
      }
      return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, char *))(**(void **)(*((void *)this + 1) + 17072)
                                                                                           + 32))(*(void *)(*((void *)this + 1) + 17072), U08, v7, v8, v6, &v29);
    }
    __int16 v13 = "stDump.acq.num_qwords == _DIM(stDump.acq.qword)";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1750, "Handle_SatRpt_EramDump", (char)"stDump.acq.num_qwords == _DIM(stDump.acq.qword)");
    int v14 = 1750;
LABEL_39:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", v14, v13);
  }
  char v29 = 1;
  __int16 U16 = BlueFin::GlStream::GetU16(a2);
  LODWORD(v26) = BlueFin::GlStream::GetU08(a2);
  char v30 = v26;
  int v27 = BlueFin::GlStream::GetU08(a2);
  char v32 = v27;
  int U32 = BlueFin::GlStream::GetU32(a2);
  if (v26 > 0xFA)
  {
    __int16 v13 = "stDump.trk.nbSmp <= _DIM(stDump.trk.sample)";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1711, "Handle_SatRpt_EramDump", (char)"stDump.trk.nbSmp <= _DIM(stDump.trk.sample)");
    int v14 = 1711;
    goto LABEL_39;
  }
  if (v26)
  {
    uint64_t v26 = v26;
    double v28 = &v29;
    do
    {
      if (v27 == 1)
      {
        *((_DWORD *)v28 + 253) = BlueFin::GlStream::GetU32(a2);
      }
      else
      {
        v28[12] = BlueFin::GlStream::GetU08(a2);
        v28[13] = BlueFin::GlStream::GetU08(a2);
        v28[14] = BlueFin::GlStream::GetU08(a2);
        v28[15] = BlueFin::GlStream::GetU08(a2);
      }
      v28 += 4;
      --v26;
    }
    while (v26);
  }
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    __int16 v13 = "otStream.GetAvailableSize() == 0";
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1727, "Handle_SatRpt_EramDump", (char)"otStream.GetAvailableSize() == 0");
    int v14 = 1727;
    goto LABEL_39;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, char *))(**(void **)(*((void *)this + 1) + 17072)
                                                                                       + 32))(*(void *)(*((void *)this + 1) + 17072), U08, v7, v8, v6, &v29);
}

uint64_t BlueFin::MinnowGllRpcParserImp::Handle_SatRpt_SubTrkMsmt(BlueFin::MinnowGllRpcParserImp *this, BlueFin::GlStream *a2)
{
  memset(v51, 0, sizeof(v51));
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  int v48 = 0;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  int v45 = 0;
  uint64_t v44 = 0;
  uint64_t U08 = BlueFin::GlStream::GetU08(a2);
  unsigned int v5 = BlueFin::GlStream::GetU08(a2);
  unsigned int v6 = BlueFin::GlStream::GetU08(a2);
  int v7 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + v6);
  v61[0] = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
           + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
           + v6);
  int v62 = 1;
  char v63 = BlueFin::GlStream::GetBits(a2, 4u) & 0xF;
  char Bits = BlueFin::GlStream::GetBits(a2, 4u);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = Bits & 0xF;
  char v66 = Bits & 0xF;
  if ((v5 & 0x10) == 0)
  {
    char v64 = BlueFin::GlStream::GetU08(a2);
    int v65 = -1;
    int U16 = BlueFin::GlStream::GetU16(a2);
    *(_DWORD *)&v51[8] = 0;
    *(void *)BOOL v51 = ((U16 << 16) & 0xFFE00000) >> U16;
    *(_WORD *)&v51[216] = BlueFin::GlStream::GetU16(a2);
    unsigned int v14 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 824))();
    int v15 = (__int16)BlueFin::GlStream::GetU16(a2);
    if (v14 < 0x85)
    {
      if (v15 >= 0) {
        unsigned int v16 = ((v15 << 16) & 0x7FE00000u) >> v15;
      }
      else {
        unsigned int v16 = -(((v15 << 16) & 0x7FE00000u) >> v15);
      }
    }
    else
    {
      unsigned int v16 = v15 << 16;
    }
    LODWORD(v49) = v16;
    int v17 = BlueFin::GlStream::GetU16(a2);
    if ((v17 & 0x8000u) == 0) {
      unsigned int v18 = ((v17 << 16) & 0x7FE00000u) >> v17;
    }
    else {
      unsigned int v18 = -(((v17 << 16) & 0x7FE00000u) >> v17);
    }
    HIDWORD(v49) = v18;
    int v19 = BlueFin::GlStream::GetU16(a2);
    LODWORD(v50) = ((v19 << 16) & 0xFFE00000) >> v19;
    unsigned int v20 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17032) + 824))();
    int v21 = (__int16)BlueFin::GlStream::GetU16(a2);
    if (v20 < 0x85)
    {
      if (v21 >= 0) {
        unsigned int v22 = ((v21 << 16) & 0x7FE00000u) >> v21;
      }
      else {
        unsigned int v22 = -(((v21 << 16) & 0x7FE00000u) >> v21);
      }
    }
    else
    {
      unsigned int v22 = v21 << 16;
    }
    LODWORD(v47) = v22;
    int v23 = BlueFin::GlStream::GetU16(a2);
    if ((v23 & 0x8000u) == 0) {
      unsigned int v24 = ((v23 << 16) & 0x7FE00000u) >> v23;
    }
    else {
      unsigned int v24 = -(((v23 << 16) & 0x7FE00000u) >> v23);
    }
    HIDWORD(v47) = v24;
    LOWORD(v48) = BlueFin::GlStream::GetBits(a2, 6u);
    BlueFin::GlStream::GetBits(a2, 2u);
    BYTE4(v50) = BlueFin::GlStream::GetBits(a2, 1u);
    BYTE2(v48) = BlueFin::GlStream::GetBits(a2, 1u);
    HIBYTE(v48) = (2 * BlueFin::GlStream::GetBits(a2, 2u)) | 1;
    BlueFin::GlStream::GetBits(a2, 4u);
    __int16 v25 = BlueFin::GlStream::GetU16(a2);
    __int16 v26 = BlueFin::GlStream::GetU16(a2);
    __int16 v27 = BlueFin::GlStream::GetU16(a2);
    __int16 v28 = BlueFin::GlStream::GetU16(a2);
    v29.i16[0] = v25;
    v29.i16[1] = v26;
    v29.i16[2] = v27;
    v29.i16[3] = v28;
    int16x4_t v30 = vcltz_s16(v29);
    v29.i16[0] = v25 & 0x7FFF;
    v29.i16[1] = v26 & 0x7FFF;
    v29.i16[2] = v27 & 0x7FFF;
    v29.i16[3] = v28 & 0x7FFF;
    v31.i64[0] = 0x1F0000001FLL;
    v31.i64[1] = 0x1F0000001FLL;
    int32x4_t v32 = (int32x4_t)vshlq_u32((uint32x4_t)(*(_OWORD *)&vshll_n_s16(v29, 0x10uLL) & __PAIR128__(0xFFE0FFFFFFE0FFFFLL, 0xFFE0FFFFFFE0FFFFLL)), (uint32x4_t)vnegq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)v29), v31)));
    *(int8x16_t *)((char *)v46 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = vbslq_s8((int8x16_t)vmovl_s16(v30), (int8x16_t)vnegq_s32(v32), (int8x16_t)v32);
    unsigned int v33 = BlueFin::GlStream::GetU16(a2);
    unsigned int v34 = BlueFin::GlStream::GetU16(a2);
    *(uint32x2_t *)((char *)&v46[1] + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = vshl_u32((uint32x2_t)(*(void *)&vshl_n_s32((int32x2_t)__PAIR64__(v34, v33), 0x10uLL) & 0xFFE0FFFFFFE0FFFFLL), (uint32x2_t)vneg_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v34, v33), (int8x8_t)0x1F0000001FLL)));
    uint64_t v11 = &v47;
    uint64_t v10 = &v49;
    uint64_t v9 = v51;
  }
  v59[0] = BlueFin::GlStream::GetU16(a2);
  __int16 v35 = BlueFin::GlStream::GetU16(a2);
  BOOL v36 = v12 != 1 || (v7 - 76) >= 0x3F;
  __int16 v37 = (2 * v35) | 1;
  if (v36) {
    __int16 v37 = v35;
  }
  v59[1] = v37;
  char v58 = BlueFin::GlStream::GetU08(a2);
  v54[1] = BlueFin::GlStream::GetU32(a2);
  __int16 v56 = BlueFin::GlStream::GetU16(a2);
  v54[2] = BlueFin::GlStream::GetS32(a2);
  if ((v5 & 0x10) != 0)
  {
    int U32 = 0;
    v52[0] = 0;
  }
  else
  {
    unsigned int U24 = BlueFin::GlStream::GetU24(a2);
    int v39 = U24 & 0x7FFFFF;
    if (U24 >= 0x800000) {
      int v39 = -v39;
    }
    v52[0] = v39;
    int U32 = BlueFin::GlStream::GetU32(a2);
  }
  v52[1] = U32;
  unsigned int v41 = BlueFin::GlStream::GetU24(a2);
  if (v41 >= 0x800000) {
    int v42 = -16777216;
  }
  else {
    int v42 = 0;
  }
  void v52[2] = v42 | v41;
  memset_pattern16(&v53, &unk_263BABB90, 0x10uLL);
  LOBYTE(v46[0]) = 0;
  WORD6(v46[1]) = 0;
  BYTE14(v46[1]) = 0;
  int v60 = 0;
  char v57 = 0;
  v54[0] = 0;
  __int16 v55 = 0;
  LOBYTE(v45) = 0;
  LODWORD(v4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  HIDWORD(v4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlStream::GetU32(a2);
  if (BlueFin::GlStream::GetAvailableSize(a2))
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_decoder_minnow.cpp", 1069, "Handle_SatRpt_SubTrkMsmt", (char)"otStream.GetAvailableSize() == 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_decoder_minnow.cpp", 1069, "otStream.GetAvailableSize() == 0");
  }
  return (*(uint64_t (**)(void, uint64_t, void, void, unsigned char *, unsigned char *, uint64_t *, uint64_t *, _OWORD *, _WORD *, _DWORD *, _DWORD *, uint64_t *))(**(void **)(*((void *)this + 1) + 17072) + 64))(*(void *)(*((void *)this + 1) + 17072), U08, v5 & 0xF, v5 >> 4, v61, v9, v10, v11, v46, v59, v54, v52, &v44);
}

void BlueFin::MinnowGllRpcParserImp::~MinnowGllRpcParserImp(BlueFin::MinnowGllRpcParserImp *this)
{
}

uint64_t BlueFin::GlDbgMeIf::Dispose(BlueFin::GlDbgMeIf *this, void (*a2)(void *))
{
  return (*(uint64_t (**)(void, void (*)(void *)))(**((void **)this + 2) + 16))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::AsicToStandby(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 224))();
}

uint64_t BlueFin::GlDbgMeIf::CWTest(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 368))(*(void *)(a1 + 16));
}

uint64_t BlueFin::GlDbgMeIf::ChipData_GRABSNQ_612249(BlueFin::GlDbgMeIf *this, void *a2, uint64_t a3)
{
  uint64_t result = *((void *)this + 1);
  *(unsigned char *)(result + 580) = 1;
  if (*(_DWORD *)(result + 576) == 1)
  {
    if (!*(void *)(result + 808))
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)result, 4100);
      (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
      (*(void (**)(void, void *, uint64_t))(**((void **)this + 2) + 200))(*((void *)this + 2), a2, a3);
      BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4100);
      uint64_t v8 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
      return v8();
    }
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**((void **)this + 2) + 200);
    return v7();
  }
  return result;
}

uint64_t BlueFin::GlDbgMeIf::ComDacData(BlueFin::GlDbgMeIf *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(**((void **)this + 2) + 192))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::DataBurstCtrl(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 280))(*((void *)this + 2));
}

uint64_t BlueFin::GlDbgMeIf::MeasureCNTIN(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 336))();
}

uint64_t BlueFin::GlDbgMeIf::PlatformTest(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 456))();
}

uint64_t BlueFin::GlDbgMeIf::SaveNvRamAndRtc(BlueFin::GlDbgMeIf *this, uint64_t a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, uint64_t, unsigned int *))(**((void **)this + 2) + 328))(*((void *)this + 2), a2, a3);
}

uint64_t BlueFin::GlDbgMeIf::Set1HzPhaseMs(BlueFin::GlDbgMeIf *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 2) + 288))(a2);
}

uint64_t BlueFin::GlDbgMeIf::SetTowAssist(BlueFin::GlDbgMeIf *this, const BlueFin::GlTowAsstData *a2)
{
  return (*(uint64_t (**)(void, const BlueFin::GlTowAsstData *))(**((void **)this + 2) + 264))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::SetCntInClockParams(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 48))();
}

uint64_t BlueFin::GlDbgMeIf::SetSensorHubConfig(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 112))();
}

uint64_t BlueFin::GlDbgMeIf::SetEcpuRefClockParams(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))();
}

uint64_t BlueFin::GlDbgMeIf::SetMeasConfig(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 304))();
}

uint64_t BlueFin::GlDbgMeIf::SetDutyCycleParams(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 312))();
}

uint64_t BlueFin::GlDbgMeIf::SetMeasurementPeriodCorrection(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 296))();
}

uint64_t BlueFin::GlDbgMeIf::SetDutyCycleMinMaxBlockParams(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 144))();
}

uint64_t BlueFin::GlDbgMeIf::SetMeasurementInterval(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 152))();
}

uint64_t BlueFin::GlDbgMeIf::LimitRfOnTimeFromAPI(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 616))();
}

uint64_t BlueFin::GlDbgMeIf::SetPpsAiding(BlueFin::GlDbgMeIf *this, double a2, double a3)
{
  return (*(uint64_t (**)(double, double))(**((void **)this + 2) + 272))(a2, a3);
}

uint64_t BlueFin::GlDbgMeIf::Batching(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 248))();
}

uint64_t BlueFin::GlDbgMeIf::SendBatchMeas(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 256))();
}

uint64_t BlueFin::GlDbgMeIf::SetSyncInConfig(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 128))();
}

uint64_t BlueFin::GlDbgMeIf::SetUserDynamicLimits(BlueFin::GlDbgMeIf *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 96))(a2);
}

uint64_t BlueFin::GlDbgMeIf::LoadEswPatch(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 216))();
}

uint64_t BlueFin::GlDbgMeIf::SetGeofenceMode(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 464))();
}

uint64_t BlueFin::GlDbgMeIf::SetGeofenceData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 472))();
}

uint64_t BlueFin::GlDbgMeIf::SetGeofenceSettings(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 488))();
}

uint64_t BlueFin::GlDbgMeIf::GetGeofenceState(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 480))();
}

uint64_t BlueFin::GlDbgMeIf::ToggleHostWakeConfigure(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 560))();
}

uint64_t BlueFin::GlDbgMeIf::ToggleCoexConfigure(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 568))();
}

uint64_t BlueFin::GlDbgMeIf::ToggleCoexGpio(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 576))();
}

uint64_t BlueFin::GlDbgMeIf::SetMeasIntMsForFactPlatformTest(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 584))();
}

uint64_t BlueFin::GlDbgMeIf::SetHighPwrCwTestEnabled(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 592))();
}

uint64_t BlueFin::GlDbgMeIf::SetCwTestEnabled(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 600))();
}

uint64_t BlueFin::GlDbgMeIf::SetEswDynPwrControl(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 608))();
}

uint64_t BlueFin::GlDbgMeIf::SetSearch3G(BlueFin::GlDbgMeIf *this, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, unsigned __int8 *))(**((void **)this + 2) + 664))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::SetPpsParam(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 672))();
}

void BlueFin::GlDbgMeIf::GetDbgRxparams(BlueFin::GlDbgMeIf *this)
{
}

uint64_t BlueFin::GlDbgMeIf::RequestDump(BlueFin::GlDbgMeIf *this, char *a2)
{
  return (*(uint64_t (**)(void, char *))(**((void **)this + 2) + 680))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::SetL5ExtBias(BlueFin::GlDbgMeIf *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 624))(a2);
}

uint64_t BlueFin::GlDbgMeIf::SetBdsSignalType(BlueFin::GlDbgMeIf *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, const unsigned __int8 *))(**((void **)this + 2) + 184))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::SetGpsSignalType(BlueFin::GlDbgMeIf *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, const unsigned __int8 *))(**((void **)this + 2) + 176))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::SetLowGainAntenna(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 408))();
}

uint64_t BlueFin::GlDbgMeIf::SetGlitchRecoveryEnable(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 688))();
}

uint64_t BlueFin::GlDbgMeIf::SetRtcDutyCycleEnable(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 696))();
}

uint64_t BlueFin::GlDbgMeIf::SetSpoofCarrierThresh(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 704))();
}

uint64_t BlueFin::GlDbgMeIf::SetPpsSyncInMode(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 712))();
}

uint64_t BlueFin::GlDbgMeIf::EnableScanGrids(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 728))();
}

uint64_t BlueFin::GlDbgMeIf::GetRadioRegisters(BlueFin::GlDbgMeIf *this, unsigned int *a2)
{
  return (*(uint64_t (**)(void, unsigned int *))(**((void **)this + 2) + 736))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgMeIf::GetAdcCapture(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 752))();
}

uint64_t BlueFin::GlDbgMeIf::SetEnableCoex(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 760))();
}

uint64_t BlueFin::GlDbgMeIf::EnableB1CSearch(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 768))();
}

uint64_t BlueFin::GlDbgMeIf::EnableBdsPriority(BlueFin::GlDbgMeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 776))();
}

uint64_t BlueFin::GlDbgMeIf::EnableIqDump(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 784))();
}

void BlueFin::GlDbgMeIf::~GlDbgMeIf(BlueFin::GlDbgMeIf *this)
{
}

uint64_t BlueFin::GlDbgPeIf::AsicMismatch(BlueFin::GlDbgPeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 200))();
}

uint64_t BlueFin::GlDbgPeIf::EswPatchLoaded(BlueFin::GlDbgPeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 88))();
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::AsicStopped(BlueFin::GlDbgPeIf *this)
{
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4611);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4611);
    unsigned int v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v3();
  }
  return result;
}

uint64_t BlueFin::GlDbgPeIf::CWResults(BlueFin::GlDbgPeIf *this, double a2, double a3, double a4)
{
  return (*(uint64_t (**)(double, double, double))(**((void **)this + 2) + 208))(a2, a3, a4);
}

uint64_t BlueFin::GlDbgPeIf::SpaResults(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 216))();
}

uint64_t BlueFin::GlDbgPeIf::CommunicationBreakdown(BlueFin::GlDbgPeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 192))();
}

uint64_t BlueFin::GlDbgPeIf::SendDrControlMemDump(BlueFin::GlDbgPeIf *this, unsigned int *a2)
{
  return (*(uint64_t (**)(void, unsigned int *))(**((void **)this + 2) + 120))(*((void *)this + 2), a2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetCntinMeas(uint64_t a1, unsigned int a2, double a3, double a4)
{
  unsigned int v13 = a2;
  double v11 = a4;
  double v12 = a3;
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4617);
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v13);
    uint64_t v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, &v12);
    }
    uint64_t v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
      BlueFin::GlDbgCodec::Write(v9, &v11);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    (*(void (**)(void, void, double, double))(**(void **)(a1 + 16) + 144))(*(void *)(a1 + 16), v13, a3, a4);
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 4617);
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v10();
  }
  return result;
}

uint64_t BlueFin::GlDbgPeIf::SetDataBits(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))();
}

uint64_t BlueFin::GlDbgPeIf::SetDataSubFrmMeas(BlueFin::GlDbgPeIf *this, BlueFin::GlDataSubFrmMeas *a2)
{
  return (*(uint64_t (**)(void, BlueFin::GlDataSubFrmMeas *))(**((void **)this + 2) + 32))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgPeIf::SetGalileoDataPage(BlueFin::GlDbgPeIf *this, BlueFin::GlGalileoINavPage *a2)
{
  return (*(uint64_t (**)(void, BlueFin::GlGalileoINavPage *))(**((void **)this + 2) + 48))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgPeIf::SetGlonassDataString(BlueFin::GlDbgPeIf *this, BlueFin::GlGlonassDataString *a2)
{
  return (*(uint64_t (**)(void, BlueFin::GlGlonassDataString *))(**((void **)this + 2) + 56))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgPeIf::SetNavICDataSubFrame(BlueFin::GlDbgPeIf *this, BlueFin::GlNavICSubFrame *a2)
{
  return (*(uint64_t (**)(void, BlueFin::GlNavICSubFrame *))(**((void **)this + 2) + 64))(*((void *)this + 2), a2);
}

uint64_t BlueFin::GlDbgPeIf::SetPpsOutMeas(BlueFin::GlDbgPeIf *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 2) + 160))(a2);
}

uint64_t BlueFin::GlDbgPeIf::SetRefTimeMeas(BlueFin::GlDbgPeIf *this, double a2, double a3)
{
  return (*(uint64_t (**)(double, double))(**((void **)this + 2) + 168))(a2, a3);
}

uint64_t BlueFin::GlDbgPeIf::SetBlobData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t BlueFin::GlDbgPeIf::SetWaasDataSubFrmMeas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t BlueFin::GlDbgPeIf::GeoFenceStateDumps(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 224))();
}

uint64_t BlueFin::GlDbgPeIf::GeoFenceHostRequest(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 232))();
}

uint64_t BlueFin::GlDbgPeIf::SetHostPexInterface(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 248))();
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetGpsTimeFromMeif (BlueFin::GlDbgPeIf *this, uint64_t a2, int a3, int a4, unsigned int a5)
{
  __int16 v16 = a2;
  int v14 = a4;
  int v15 = a3;
  unsigned int v13 = a5;
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4630);
    uint64_t v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
      BlueFin::GlDbgCodec::Write(v8, &v16);
    }
    uint64_t v9 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
      BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v15);
    }
    uint64_t v10 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, (unsigned int *)&v14);
    }
    double v11 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
      BlueFin::GlDbgCodec::Write(v11, &v13);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void, uint64_t))(**((void **)this + 2) + 280))(*((void *)this + 2), a2);
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4630);
    double v12 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v12();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::OnGpsTimeFromMicroNav(BlueFin::GlDbgPeIf *this, int a2, BOOL a3, BOOL a4, BOOL a5)
{
  int v17 = a2;
  BOOL v16 = a3;
  BOOL v15 = a4;
  BOOL v14 = a5;
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 112))(*((void *)this + 1));
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4631);
    uint64_t v9 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
      BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v17);
    }
    uint64_t v10 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
      BlueFin::GlDbgCodec::Write(v10, &v16);
    }
    if (v6 >= 0x89)
    {
      double v11 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
        BlueFin::GlDbgCodec::Write(v11, &v15);
      }
    }
    if (v7 >= 0x97)
    {
      double v12 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
        BlueFin::GlDbgCodec::Write(v12, &v14);
      }
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void))(**((void **)this + 2) + 288))();
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4631);
    unsigned int v13 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v13();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetOnchipNvMemData(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4632);
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (double *)a2);
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (double *)(a2 + 8));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (double *)(a2 + 16));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (double *)(a2 + 24));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 32));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 34));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 36));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (unsigned int *)(a2 + 40));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (unsigned int *)(a2 + 44));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 48));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 50));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 52));
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)(a2 + 54));
    unsigned int v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5))
    {
      *((_DWORD *)v5 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v5, a2 + 56);
    }
    unsigned int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6))
    {
      *((_DWORD *)v6 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v6, a2 + 76);
    }
    BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const BOOL *)(a2 + 92));
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
    (*(void (**)(void))(**(void **)(a1 + 16) + 304))();
    BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 4632);
    unsigned int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::OnChipReadyForPwrSave(BlueFin::GlDbgPeIf *this)
{
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4633);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void))(**((void **)this + 2) + 312))();
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4633);
    unsigned int v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v3();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetOnChipReqIntS(BlueFin::GlDbgPeIf *this)
{
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (!*((void *)result + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(result, 4634);
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
    (*(void (**)(void))(**((void **)this + 2) + 320))();
    BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 4634);
    unsigned int v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v3();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgPeIf::SetPwrMeasStats(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (a2)
  {
    if (!*((void *)result + 101))
    {
      BlueFin::GlDbgCodec::WriteStart(result, 4635);
      unsigned int v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6))
      {
        *((_DWORD *)v6 + 143) = 2;
        BlueFin::GlDbgCodec::Rvw(v6, a2);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
      (*(void (**)(void))(**(void **)(a1 + 16) + 256))();
      BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 4635);
      unsigned int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
      return (BlueFin::GlDbgCodec *)v7();
    }
  }
  else
  {
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 104);
    return (BlueFin::GlDbgCodec *)v4();
  }
  return result;
}

uint64_t BlueFin::GlDbgPeIf::SetClockAnomalyFlag(BlueFin::GlDbgPeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 336))();
}

uint64_t BlueFin::GlDbgPeIf::SetSensRawInfo(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 344))();
}

uint64_t BlueFin::GlDbgPeIf::EnableOnChipMeas(BlueFin::GlDbgPeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 352))();
}

uint64_t BlueFin::GlDbgPeIf::IsOnChipMeasEnabled(BlueFin::GlDbgPeIf *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 360))();
}

uint64_t BlueFin::GlDbgPeIf::ReportIqData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 264))();
}

void BlueFin::GlDbgPeIf::~GlDbgPeIf(BlueFin::GlDbgPeIf *this)
{
}

void BlueFin::GlDbgLTOFileReader::~GlDbgLTOFileReader(BlueFin::GlDbgLTOFileReader *this)
{
}

uint64_t BlueFin::GlDbgNvStorageReader::AddErrorToPos(BlueFin::GlDbgCodec **this, BOOL a2)
{
  BOOL v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 2561);
  unint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, BOOL))(*(void *)this[2] + 48))(this[2], a2);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 2561);
  unsigned int v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

uint64_t BlueFin::GlDbgNvStorageReader::AddErrorToRtc(BlueFin::GlDbgCodec **this, uint64_t a2)
{
  int v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 2562);
  unint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[2] + 24))(this[2], a2);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 2562);
  unsigned int v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

uint64_t BlueFin::GlDbgNvStorageReader::AlterOscValues(BlueFin::GlDbgCodec **this, uint64_t a2, uint64_t a3)
{
  int v10 = a3;
  int v11 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 2563);
  unsigned int v6 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v11);
  }
  int v7 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v10);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, uint64_t))(*(void *)this[2] + 32))(this[2], a2, a3);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 2563);
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v8();
}

uint64_t BlueFin::GlDbgNvStorageReader::ChangeAgeOfPos(BlueFin::GlDbgCodec **this, uint64_t a2)
{
  int v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 2564);
  unint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[2] + 56))(this[2], a2);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 2564);
  unsigned int v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

uint64_t BlueFin::GlDbgNvStorageReader::ForceClockUncertainty(BlueFin::GlDbgCodec **this, uint64_t a2)
{
  int v7 = a2;
  BlueFin::GlDbgCodec::WriteStart(this[1], 2565);
  unint64_t v4 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[2] + 40))(this[2], a2);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 2565);
  unsigned int v5 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v5();
}

uint64_t BlueFin::GlDbgNvStorageReader::SetDataToIgnore(BlueFin::GlDbgCodec **this, uint64_t a2, BOOL a3)
{
  int v11 = a2;
  BOOL v10 = a3;
  BlueFin::GlDbgCodec::WriteStart(this[1], 2567);
  unsigned int v6 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v11);
  }
  int v7 = this[1];
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
    BlueFin::GlDbgCodec::Write(v7, &v10);
  }
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t, BOOL))(*(void *)this[2] + 16))(this[2], a2, a3);
  BlueFin::GlDbgCodec::WriteFinal(this[1], 2567);
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v8();
}

void BlueFin::GlDbgNvStorageReader::~GlDbgNvStorageReader(BlueFin::GlDbgNvStorageReader *this)
{
}

void *BlueFin::GlDbgProxy::Rawwrite(BlueFin::GlDbgProxy *this, unsigned __int8 *__src, unsigned int a3, char a4)
{
  uint64_t v8 = (char *)this + 6624;
  uint64_t v9 = (char *)this + 608;
  int v10 = *((_DWORD *)this + 1720);
  while (1)
  {
    size_t v11 = 251 - v10 >= a3 ? a3 : (251 - v10);
    double v12 = (char *)this + 6624;
    uint64_t result = memcpy((char *)this + v10 + 6627, __src, v11);
    v12[(v11 + *((_DWORD *)this + 1720) + 3)] = 10;
    v12[(v11 + *((_DWORD *)this + 1720) + 4)] = 0;
    a3 -= v11;
    if ((a4 & 1) == 0 && !a3) {
      break;
    }
    BOOL v14 = (uint64_t (*)(char *, char *))*((void *)this + 112);
    if (v14) {
      uint64_t result = (void *)v14(v9, v8);
    }
    int v10 = 0;
    __src += v11;
    *((_DWORD *)this + 1720) = 0;
    if (!a3) {
      return result;
    }
  }
  *((_DWORD *)this + 1720) += v11;
  return result;
}

BOOL BlueFin::GlDbgProxy::Encode(BlueFin::GlDbgProxy *this, unsigned __int8 *a2, char *a3, unsigned int *a4, unsigned int *a5, unsigned int a6, unsigned int a7, int a8)
{
  return BlueFin::GlAscii85::Encode((BlueFin::GlDbgProxy *)((char *)this + 6580), a3, a2, a7, a6, a5, a4, a8);
}

uint64_t BlueFin::GlDbgProxy::EncodeComplete(BlueFin::GlDbgProxy *this)
{
  return (*((unsigned __int8 *)this + 6600) >> 1) & 1;
}

uint64_t BlueFin::GlDbgProxy::GlDbgProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  bzero((void *)(a1 + 8), 0x22BuLL);
  *(unsigned char *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 56bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 572) = 0;
  *(unsigned char *)(a1 + 580) = 0;
  *(void *)a1 = &unk_270EBB138;
  *(void *)(a1 + 58bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 596) = 0;
  *(unsigned char *)(a1 + 600) = 0;
  BlueFin::GlDbgEngine::GlDbgEngine(a1 + 608, a1, a2, a3, a4, a5, a6, a7, a8, v21, v22, a11, a12, a13);
  *(_WORD *)(a1 + 6512) = -1;
  *(void *)(a1 + 6520) = &unk_270EBAEA0;
  *(void *)(a1 + 6528) = a1;
  *(void *)(a1 + 6536) = 0;
  *(void *)(a1 + 654bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = &unk_270EBAB48;
  *(void *)(a1 + 6552) = a1;
  *(void *)(a1 + 6560) = 0;
  *(void *)(a1 + 6568) = 0xCC00000000;
  *(_WORD *)(a1 + 6576) = 0;
  *(void *)(a1 + 6580) = 0;
  *(void *)(a1 + 6585) = 0;
  *(_DWORD *)(a1 + 6596) = 255;
  *(void *)(a1 + 6600) = 0;
  *(void *)(a1 + 6616) = 0;
  *(void *)(a1 + 6608) = 0;
  *(_DWORD *)(a1 + 6880) = 0;
  *(void *)(a1 + 6888) = a1;
  *(void *)(a1 + 6896) = &unk_270EBA6D0;
  *(void *)(a1 + 690bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
  *(void *)(a1 + 6912) = 0;
  *(void *)(a1 + 6920) = &unk_270EBB058;
  *(void *)(a1 + 6928) = a1;
  *(void *)(a1 + 694bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 6936) = 0;
  *(void *)(a1 + 6952) = &unk_270EBB0B8;
  *(void *)(a1 + 6960) = a1;
  *(void *)(a1 + 6968) = 0;
  *(void *)(a1 + 6976) = &unk_270EBB2E8;
  *(void *)(a1 + 698bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
  *(void *)(a1 + 6992) = 0;
  bzero((void *)(a1 + 5928), 0x248uLL);
  strlcpy((char *)(a1 + 6624), "~^~", 0x100uLL);
  return a1;
}

void sub_263A5E54C(_Unwind_Exception *a1)
{
  BlueFin::GlDbgEngine::~GlDbgEngine(v1);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlDbgProxy::SafeAssert(BlueFin::GlDbgProxy *this, uint64_t a2, const char *a3)
{
  unint64_t v4 = (void (*)(char *, uint64_t, const char *))*((void *)this + 111);
  if (v4) {
    v4((char *)this + 608, 2, a3);
  }
  return a2;
}

uint64_t BlueFin::GlDbgProxy::RequestId(BlueFin::GlDbgProxy *this, const BlueFin::GlRequestImpl *a2)
{
  uint64_t result = 0;
  unint64_t v4 = (char *)this + 5928;
  while (1)
  {
    uint64_t v5 = *(void *)&v4[8 * result];
    if (v5)
    {
      if (*(const BlueFin::GlRequestImpl **)(v5 + 24) == a2) {
        break;
      }
    }
    if (++result == 73)
    {
      DeviceFaultNotify("gldebug_proxy.cpp", 1201, "RequestId", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_proxy.cpp", 1201, "false");
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngCbOnEEFileRead(BlueFin::GlDbgCodec *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 1;
  int v7 = 1;
  unsigned int v8 = a2;
  *((void *)a1 + 86bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  if (!*((void *)a1 + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(a1, 513);
    BlueFin::GlDbgCodec::Write(a1, &v8);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
    uint64_t v5 = (uint64_t (*)(char *, void, char *))*((void *)a1 + 91);
    if (v5)
    {
      uint64_t v3 = v5((char *)a1 + 608, v8, (char *)a1 + 6896);
      int v7 = v3;
    }
    BlueFin::GlDbgCodec::WriteFinal(a1, 513);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v7);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
  }
  return v3;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngCbOnNvStgWrite(uint64_t this, unsigned int a2, char *a3, uint64_t a4)
{
  unsigned int v10 = a2;
  __int16 v9 = a4;
  if (!*(void *)(this + 808))
  {
    uint64_t v6 = this;
    *(unsigned char *)(this + 580) = 1;
    if (*(_DWORD *)(this + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)this, 516);
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)v6, &v10);
      BlueFin::GlDbgCodec::WriteArray((BlueFin::GlDbgCodec *)v6, a3, &v9);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 1);
    }
    int v7 = *(uint64_t (**)(uint64_t, void, char *, uint64_t))(v6 + 752);
    if (v7) {
      this = v7(v6 + 608, v10, a3, a4);
    }
    *(unsigned char *)(v6 + 580) = 1;
    if (*(_DWORD *)(v6 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)v6, 516);
      unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 32);
      return v8(v6, 1);
    }
  }
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngCbOnPPSPlatformTime(BlueFin::GlDbgCodec *this)
{
  if (!*((void *)this + 101))
  {
    uint64_t v1 = this;
    BlueFin::GlDbgCodec::WriteStart(this, 517);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v1 + 32))(v1, 1);
    uint64_t v2 = (void (*)(char *))*((void *)v1 + 95);
    if (v2) {
      v2((char *)v1 + 608);
    }
    BlueFin::GlDbgCodec::WriteFinal(v1, 517);
    uint64_t v3 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v1 + 32);
    return (BlueFin::GlDbgCodec *)v3(v1, 1);
  }
  return this;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngCpuLoad(BlueFin::GlDbgProxy *this, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  __int16 v10 = a3;
  unsigned __int16 v9 = 0;
  if (!*((void *)this + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(this, 520);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, &v10);
    }
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
    int v7 = (uint64_t (*)(char *, unsigned int *, uint64_t))*((void *)this + 96);
    if (v7)
    {
      uint64_t v3 = v7((char *)this + 608, a2, a3);
      unsigned __int16 v9 = v3;
    }
    else
    {
      uint64_t v3 = 0;
    }
    BlueFin::GlDbgCodec::WriteFinal(this, 520);
    BlueFin::GlDbgCodec::WriteArray(this, a2, &v9);
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
  }
  return v3;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnAsicDacData(BlueFin::GlDbgCodec *this, char *a2, uint64_t a3)
{
  __int16 v8 = a3;
  if (!*((void *)this + 101))
  {
    uint64_t v5 = this;
    BlueFin::GlDbgCodec::WriteStart(this, 521);
    BlueFin::GlDbgCodec::WriteArray(v5, a2, &v8);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v5 + 32))(v5, 1);
    uint64_t v6 = (void (*)(char *, char *, uint64_t))*((void *)v5 + 97);
    if (v6) {
      v6((char *)v5 + 608, a2, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal(v5, 521);
    int v7 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v5 + 32);
    return (BlueFin::GlDbgCodec *)v7(v5, 1);
  }
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnAsstStatus(BlueFin::GlDbgCodec *result, unsigned char *a2)
{
  if (!*((void *)result + 101))
  {
    if ((*a2 & 0x40) != 0)
    {
      a2[67] = 6;
    }
    else
    {
      uint64_t v3 = result;
      BlueFin::GlDbgCodec::WriteStart(result, 523);
      if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3))
      {
        *((_DWORD *)v3 + 143) = 2;
        BlueFin::GlDbgCodec::Rvw(v3, (uint64_t)a2);
      }
      (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32))(v3, 1);
      unint64_t v4 = (void (*)(char *, unsigned char *))*((void *)v3 + 100);
      if (v4) {
        v4((char *)v3 + 608, a2);
      }
      BlueFin::GlDbgCodec::WriteFinal(v3, 523);
      uint64_t v5 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32);
      return (BlueFin::GlDbgCodec *)v5(v3, 1);
    }
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnFreqUpdate(BlueFin::GlDbgCodec *result, uint64_t a2)
{
  if (!*((void *)result + 101))
  {
    uint64_t v3 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 524);
    int v6 = a2;
    BlueFin::GlDbgCodec::Write(v3, (unsigned int *)&v6);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32))(v3, 1);
    unint64_t v4 = (void (*)(char *, uint64_t))*((void *)v3 + 104);
    if (v4) {
      v4((char *)v3 + 608, a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(v3, 524);
    uint64_t v5 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32);
    return (BlueFin::GlDbgCodec *)v5(v3, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnPrecTimerRq(BlueFin::GlDbgProxy *this)
{
  uint64_t v1 = 0;
  int v5 = 0;
  if (!*((void *)this + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(this, 525);
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
    uint64_t v3 = (uint64_t (*)(char *))*((void *)this + 105);
    if (v3)
    {
      uint64_t v1 = v3((char *)this + 608);
      int v5 = v1;
    }
    else
    {
      uint64_t v1 = 0;
    }
    BlueFin::GlDbgCodec::WriteFinal(this, 525);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v5);
    }
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
  }
  return v1;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnReady(BlueFin::GlDbgCodec *this)
{
  if (!*((void *)this + 101))
  {
    uint64_t v1 = this;
    BlueFin::GlDbgCodec::WriteStart(this, 526);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v1 + 32))(v1, 1);
    uint64_t v2 = (void (*)(char *))*((void *)v1 + 106);
    if (v2) {
      v2((char *)v1 + 608);
    }
    BlueFin::GlDbgCodec::WriteFinal(v1, 526);
    uint64_t v3 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v1 + 32);
    return (BlueFin::GlDbgCodec *)v3(v1, 1);
  }
  return this;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnResourceRequest(BlueFin::GlDbgCodec *a1, unsigned int a2)
{
  uint64_t v2 = 1;
  int v6 = 1;
  unsigned int v7 = a2;
  if (!*((void *)a1 + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(a1, 527);
    BlueFin::GlDbgCodec::Write(a1, &v7);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
    unint64_t v4 = (uint64_t (*)(char *, void))*((void *)a1 + 107);
    if (v4)
    {
      uint64_t v2 = v4((char *)a1 + 608, v7);
      int v6 = v2;
    }
    BlueFin::GlDbgCodec::WriteFinal(a1, 527);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v6);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
  }
  return v2;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnResourceRelease(BlueFin::GlDbgCodec *result, unsigned int a2)
{
  unsigned int v5 = a2;
  if (!*((void *)result + 101))
  {
    uint64_t v2 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 528);
    BlueFin::GlDbgCodec::Write(v2, &v5);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v2 + 32))(v2, 1);
    uint64_t v3 = (void (*)(char *, void))*((void *)v2 + 108);
    if (v3) {
      v3((char *)v2 + 608, v5);
    }
    BlueFin::GlDbgCodec::WriteFinal(v2, 528);
    unint64_t v4 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v2 + 32);
    return (BlueFin::GlDbgCodec *)v4(v2, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnResponse(uint64_t this, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(this + 808))
  {
    uint64_t v5 = this;
    *(unsigned char *)(this + 580) = 1;
    if (*(_DWORD *)(this + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)this, 529);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 120))(v5))
      {
        *(_DWORD *)(v5 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)v5, a2);
      }
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 1);
    }
    int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 872);
    if (v6) {
      this = v6(v5 + 608, a2, a3);
    }
    *(unsigned char *)(v5 + 580) = 1;
    if (*(_DWORD *)(v5 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)v5, 529);
      unsigned int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32);
      return v7(v5, 1);
    }
  }
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnReportMIAdjustmentReqStatus(BlueFin::GlDbgCodec *result, uint64_t a2)
{
  if (!*((void *)result + 101))
  {
    uint64_t v3 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 559);
    int v6 = a2;
    BlueFin::GlDbgCodec::Write(v3, (unsigned int *)&v6);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32))(v3, 1);
    unint64_t v4 = (void (*)(char *, uint64_t))*((void *)v3 + 119);
    if (v4) {
      v4((char *)v3 + 608, a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(v3, 559);
    uint64_t v5 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32);
    return (BlueFin::GlDbgCodec *)v5(v3, 1);
  }
  return result;
}

BOOL BlueFin::GlDbgProxy::HalGlEngineOnLHPatchNeeded(BlueFin::GlDbgProxy *this, char *a2, unsigned int *a3)
{
  BOOL v13 = 0;
  BOOL v12 = a2 != 0;
  BOOL v11 = a3 != 0;
  if (a3) {
    int v6 = *a3;
  }
  else {
    int v6 = 0;
  }
  int v10 = v6;
  if (*((void *)this + 101)) {
    return 0;
  }
  BlueFin::GlDbgCodec::WriteStart(this, 553);
  if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, &v12);
  }
  if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, &v11);
  }
  if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v10);
  }
  (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
  __int16 v8 = (uint64_t (*)(char *, char *, unsigned int *))*((void *)this + 117);
  if (v8)
  {
    int v9 = v8((char *)this + 608, a2, a3);
    BOOL v13 = v9;
  }
  else
  {
    int v9 = 0;
  }
  BlueFin::GlDbgCodec::WriteFinal(this, 553);
  if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
    BlueFin::GlDbgCodec::Write(this, &v13);
  }
  if (a2)
  {
    if (a3) {
      BlueFin::GlDbgCodec::WriteArray(this, a2, (unsigned int *)&v10);
    }
  }
  (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
  return v9 != 0;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnLHPatchLoadComplete(BlueFin::GlDbgCodec *this)
{
  BOOL v4 = 0;
  if (!*((void *)this + 101))
  {
    uint64_t v1 = this;
    BlueFin::GlDbgCodec::WriteStart(this, 556);
    uint64_t v2 = (void (*)(char *))*((void *)v1 + 118);
    if (v2) {
      v2((char *)v1 + 608);
    }
    BlueFin::GlDbgCodec::WriteFinal(v1, 556);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v1 + 120))(v1)) {
      BlueFin::GlDbgCodec::Write(v1, &v4);
    }
    uint64_t v3 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v1 + 32);
    return (BlueFin::GlDbgCodec *)v3(v1, 1);
  }
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnGeofenceStatus(BlueFin::GlDbgCodec *result, unsigned int a2, uint64_t a3)
{
  unsigned int v7 = a2;
  if (!*((void *)result + 101))
  {
    BOOL v4 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 550);
    BlueFin::GlDbgCodec::Write(v4, &v7);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4))
    {
      *((_DWORD *)v4 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v4, a3);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v4 + 32))(v4, 1);
    uint64_t v5 = (void (*)(char *, void, uint64_t))*((void *)v4 + 116);
    if (v5) {
      v5((char *)v4 + 608, v7, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal(v4, 550);
    int v6 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v4 + 32);
    return (BlueFin::GlDbgCodec *)v6(v4, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlEngineOnStop(uint64_t result, uint64_t a2, char *a3)
{
  *(unsigned char *)(result + 5912) = 0;
  if (!*(void *)(result + 808))
  {
    uint64_t v5 = (BlueFin::GlDbgCodec *)result;
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)result, 531);
    int v9 = a2;
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v9);
    if (a3) {
      int v6 = strlen(a3);
    }
    else {
      int v6 = 0;
    }
    int v8 = v6;
    BlueFin::GlDbgCodec::WriteArray(v5, a3, (unsigned int *)&v8);
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v5 + 32))(v5, 1);
    unsigned int v7 = (void (*)(char *, uint64_t, char *))*((void *)v5 + 111);
    if (v7) {
      v7((char *)v5 + 608, a2, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal(v5, 531);
    return (*(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v5 + 32))(v5, 1);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnBurstMode(BlueFin::GlDbgCodec *this, BOOL a2)
{
  BOOL v6 = a2;
  if (!*((void *)this + 101))
  {
    uint64_t v3 = this;
    BlueFin::GlDbgCodec::WriteStart(this, 551);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3)) {
      BlueFin::GlDbgCodec::Write(v3, &v6);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32))(v3, 1);
    BOOL v4 = (void (*)(char *, BOOL))*((void *)v3 + 115);
    if (v4) {
      v4((char *)v3 + 608, a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(v3, 551);
    uint64_t v5 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32);
    return (BlueFin::GlDbgCodec *)v5(v3, 1);
  }
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngineOnOscReadyForStorage(BlueFin::GlDbgCodec *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10 = a3;
  int v11 = a2;
  if (!*((void *)result + 101))
  {
    unsigned int v7 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 558);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v11);
    }
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7)) {
      BlueFin::GlDbgCodec::Write(v7, (unsigned int *)&v10);
    }
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v7 + 120))(v7))
    {
      *((_DWORD *)v7 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v7, a4);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v7 + 32))(v7, 1);
    int v8 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((void *)v7 + 740);
    if (v8) {
      v8((char *)v7 + 608, a2, a3, a4);
    }
    BlueFin::GlDbgCodec::WriteFinal(v7, 558);
    int v9 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v7 + 32);
    return (BlueFin::GlDbgCodec *)v9(v7, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnAsstStatus(uint64_t a1, void (**this)(BlueFin::GlDbgRequest *, uint64_t), uint64_t a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 535);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    unsigned int v7 = this[5];
    if (v7) {
      v7((BlueFin::GlDbgRequest *)this, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 535);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
    }
    int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v8(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnCntin(BlueFin::GlDbgCodec *a1, BlueFin::GlDbgRequest *this, unsigned int a3, double a4, double a5)
{
  unsigned int v15 = a3;
  double v13 = a5;
  double v14 = a4;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v12 = result;
  if (!*((void *)a1 + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(a1, 536);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v12);
    }
    BlueFin::GlDbgCodec::Write(a1, &v15);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, &v14);
    }
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, &v13);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)a1 + 32))(a1, 1);
    int v10 = (void (*)(void, void, double, double))*((void *)this + 5);
    if (v10) {
      v10(this, v15, a4, a5);
    }
    BlueFin::GlDbgCodec::WriteFinal(a1, 536);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write(a1, (unsigned int *)&v12);
    }
    int v11 = *(uint64_t (**)(void, void))(*(void *)a1 + 32);
    return v11(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnFactTest(uint64_t a1, void (**this)(BlueFin::GlDbgRequest *, uint64_t), uint64_t a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 537);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    unsigned int v7 = this[5];
    if (v7) {
      v7((BlueFin::GlDbgRequest *)this, a3);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 537);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
    }
    int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v8(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnGeofenceEvent(uint64_t a1, void (**this)(BlueFin::GlDbgRequest *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v17 = a6;
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v16 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 539);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v16);
    }
    int v15 = a4;
    BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v15);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a5);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v17);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    double v13 = this[5];
    if (v13) {
      v13((BlueFin::GlDbgRequest *)this, a3, a4, a5, a6);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 539);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v16);
    }
    double v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v14(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnBatchLocation(uint64_t a1, void (**this)(BlueFin::GlDbgRequest *, uint64_t, uint64_t, uint64_t, BOOL), uint64_t a3, uint64_t a4, uint64_t a5, BOOL a6)
{
  int v17 = a5;
  BOOL v16 = a6;
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v15 = result;
  if (!*(void *)(a1 + 808))
  {
    BOOL v14 = a4 != 0;
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 552);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v15);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v14);
    }
    if (a4 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a4);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v17);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v16);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    double v13 = this[5];
    if (v13) {
      v13((BlueFin::GlDbgRequest *)this, a3, a4, a5, a6);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 552);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v15);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnGpsData(uint64_t a1, BlueFin::GlDbgRequest *this, unsigned int a3, uint64_t a4)
{
  unsigned int v11 = a3;
  uint64_t v10 = a4;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 540);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, (int *)&v11, &v10);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    unsigned int v7 = (void (*)(BlueFin::GlDbgRequest *, void, uint64_t))*((void *)this + 5);
    if (v7) {
      v7(this, v11, v10);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 540);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
    }
    int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v8(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnMeas(uint64_t a1, void (**this)(BlueFin::GlDbgRequest *, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v11 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 541);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v11);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    int v9 = this[5];
    if (v9) {
      v9((BlueFin::GlDbgRequest *)this, a3, a4);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 541);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v11);
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v10(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnExerMeas(uint64_t a1, BlueFin::GlDbgRequest *this, uint64_t a3, BOOL a4)
{
  BOOL v11 = a4;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v10 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 557);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v11);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    if (*((void *)this + 5)) {
      (*((void (**)(BlueFin::GlDbgRequest *, uint64_t, BOOL))this + 13))(this, a3, a4);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 557);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v10);
    }
    int v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v9(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnMeasData(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, unsigned int *), unsigned int *a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 554);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    unsigned int v7 = this[5];
    if (v7) {
      uint64_t result = v7((BlueFin::GlDbgRequest *)this, a3);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 554);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v8(a1, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnNavData(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, uint64_t), uint64_t a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 555);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    unsigned int v7 = this[6];
    if (v7) {
      uint64_t result = v7((BlueFin::GlDbgRequest *)this, a3);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 555);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v8(a1, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnGnssNavData(uint64_t a1, uint64_t (**this)(BlueFin::GlDbgRequest *, uint64_t), uint64_t a3)
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)this, 0);
  int v9 = result;
  if (!*(void *)(a1 + 808))
  {
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 562);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
      {
        *(_DWORD *)(a1 + 572) = 2;
        BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a3);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    }
    unsigned int v7 = this[6];
    if (v7) {
      uint64_t result = v7((BlueFin::GlDbgRequest *)this, a3);
    }
    *(unsigned char *)(a1 + 580) = 1;
    if (*(_DWORD *)(a1 + 576) == 1)
    {
      BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 562);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
        BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v9);
      }
      int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
      return v8(a1, 1);
    }
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnSyncInReport(uint64_t a1, BlueFin::GlDbgRequest *this, unsigned int a3, uint64_t a4)
{
  unsigned int v11 = a3;
  uint64_t result = BlueFin::GlDbgRequest::Id(this, 0);
  int v10 = result;
  if (!*(void *)(a1 + 808))
  {
    BlueFin::GlDbgCodec::WriteStart((BlueFin::GlDbgCodec *)a1, 547);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v10);
    }
    BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, &v11);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1))
    {
      *(_DWORD *)(a1 + 572) = 2;
      BlueFin::GlDbgCodec::Rvw((BlueFin::GlDbgCodec *)a1, a4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 1);
    int v8 = (void (*)(BlueFin::GlDbgRequest *, void, uint64_t))*((void *)this + 11);
    if (v8) {
      v8(this, v11, a4);
    }
    BlueFin::GlDbgCodec::WriteFinal((BlueFin::GlDbgCodec *)a1, 547);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 120))(a1)) {
      BlueFin::GlDbgCodec::Write((BlueFin::GlDbgCodec *)a1, (unsigned int *)&v10);
    }
    int v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32);
    return v9(a1, 1);
  }
  return result;
}

uint64_t BlueFin::GlDbgProxy::HalGlReqOnTimer(BlueFin::GlDbgProxy *this, void (**a2)(BlueFin::GlDbgRequest *))
{
  uint64_t result = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a2, 0);
  int v7 = result;
  if (!*((void *)this + 101))
  {
    BlueFin::GlDbgCodec::WriteStart(this, 549);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v7);
    }
    (*(void (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32))(this, 1);
    uint64_t v5 = a2[4];
    if (v5) {
      v5((BlueFin::GlDbgRequest *)a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(this, 549);
    if ((*(unsigned int (**)(BlueFin::GlDbgProxy *))(*(void *)this + 120))(this)) {
      BlueFin::GlDbgCodec::Write(this, (unsigned int *)&v7);
    }
    BOOL v6 = *(uint64_t (**)(BlueFin::GlDbgProxy *, uint64_t))(*(void *)this + 32);
    return v6(this, 1);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngCbOnRtiFileTimestampReport(BlueFin::GlDbgCodec *result, uint64_t a2)
{
  if (!*((void *)result + 101))
  {
    uint64_t v3 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 568);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3))
    {
      *((_DWORD *)v3 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v3, a2);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32))(v3, 1);
    BOOL v4 = (void (*)(char *, uint64_t))*((void *)v3 + 120);
    if (v4) {
      v4((char *)v3 + 608, a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(v3, 568);
    uint64_t v5 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32);
    return (BlueFin::GlDbgCodec *)v5(v3, 1);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxy::HalGlEngCbOnPwrData(BlueFin::GlDbgCodec *result, double *a2)
{
  if (!*((void *)result + 101))
  {
    uint64_t v3 = result;
    BlueFin::GlDbgCodec::WriteStart(result, 569);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v3 + 120))(v3))
    {
      *((_DWORD *)v3 + 143) = 2;
      BlueFin::GlDbgCodec::Rvw(v3, a2);
    }
    (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32))(v3, 1);
    BOOL v4 = (void (*)(char *, double *))*((void *)v3 + 121);
    if (v4) {
      v4((char *)v3 + 608, a2);
    }
    BlueFin::GlDbgCodec::WriteFinal(v3, 569);
    uint64_t v5 = *(uint64_t (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)v3 + 32);
    return (BlueFin::GlDbgCodec *)v5(v3, 1);
  }
  return result;
}

void BlueFin::GlDbgProxy::~GlDbgProxy(BlueFin::GlDbgProxy *this)
{
  *(void *)this = &unk_270EBB138;
  *((void *)this + 76) = &unk_270EBA788;
  *((void *)this + 122) = &unk_270EC2418;
  *((void *)this + 209) = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlDbgProxy *)((char *)this + 1696));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270EBB138;
  *((void *)this + 76) = &unk_270EBA788;
  *((void *)this + 122) = &unk_270EC2418;
  *((void *)this + 209) = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlDbgProxy *)((char *)this + 1696));

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlDbgProxyGlEngCbOnEEFileRead(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnEEFileRead(v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlEngCbOnNvStgWrite(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnNvStgWrite(v7, a2, a3, a4);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngCbOnPPSPlatformTime(uint64_t a1)
{
  uint64_t v1 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnPPSPlatformTime(v1);
}

uint64_t BlueFin::GlDbgProxyGlEngCpuLoad(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCpuLoad(v5, a2, a3);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnAsicDacData(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnAsicDacData(v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlEngineOnDrControlMemDump(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 792);
  if (v6)
  {
    uint64_t v7 = result + 608;
    return v6(v7, a2, a3);
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnAsstStatus(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnAsstStatus(v3, a2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnBurstMode(uint64_t a1, BOOL a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnBurstMode(v3, a2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnFreqUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnFreqUpdate(v3, a2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnGeofenceStatus(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnGeofenceStatus(v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlEngineOnPrecTimerRq(uint64_t a1)
{
  uint64_t v1 = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnPrecTimerRq(v1);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnReady(uint64_t a1)
{
  uint64_t v1 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnReady(v1);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnResourceRelease(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnResourceRelease(v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlEngineOnResourceRequest(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnResourceRequest(v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlEngineOnResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnResponse(v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlEngineOnStop(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnStop(v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlEngineOnSysLogLine(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t))(result + 896);
  if (v4)
  {
    uint64_t v5 = result + 608;
    return v4(v5, a2);
  }
  return result;
}

BOOL BlueFin::GlDbgProxyGlEngineOnLHPatchNeeded(uint64_t a1, char *a2, unsigned int *a3)
{
  uint64_t v5 = (BlueFin::GlDbgProxy *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnLHPatchNeeded(v5, a2, a3);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnLHPatchLoadComplete(uint64_t a1)
{
  uint64_t v1 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnLHPatchLoadComplete(v1);
}

uint64_t BlueFin::GlDbgProxyGlReqOnAsstStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnAsstStatus(v4, (void (**)(BlueFin::GlDbgRequest *, uint64_t))v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlReqOnCntin(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v7 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  int v8 = (BlueFin::GlDbgCodec *)*((void *)v7 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnCntin(v8, v7, a2, a3, a4);
}

uint64_t BlueFin::GlDbgProxyGlReqOnFactTest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnFactTest(v4, (void (**)(BlueFin::GlDbgRequest *, uint64_t))v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlReqOnGeofenceEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v10 = *(void *)(v9 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnGeofenceEvent(v10, (void (**)(BlueFin::GlDbgRequest *, uint64_t, uint64_t, uint64_t, uint64_t))v9, a2, a3, a4, a5);
}

uint64_t BlueFin::GlDbgProxyGlReqOnbatchLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v10 = *(void *)(v9 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnBatchLocation(v10, (void (**)(BlueFin::GlDbgRequest *, uint64_t, uint64_t, uint64_t, BOOL))v9, a2, a3, a4, a5);
}

uint64_t BlueFin::GlDbgProxyGlReqOnGpsData(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *((void *)v5 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnGpsData(v6, v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlReqOnMeas(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *(void *)(v5 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnMeas(v6, (void (**)(BlueFin::GlDbgRequest *, uint64_t, uint64_t))v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlReqOnExerMeas(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v5 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *((void *)v5 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnExerMeas(v6, v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlReqOnMeasData(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnMeasData(v4, (uint64_t (**)(BlueFin::GlDbgRequest *, unsigned int *))v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlReqOnNavData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnNavData(v4, (uint64_t (**)(BlueFin::GlDbgRequest *, uint64_t))v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlReqOnGnssNavData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v4 = *(void *)(v3 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnGnssNavData(v4, (uint64_t (**)(BlueFin::GlDbgRequest *, uint64_t))v3, a2);
}

uint64_t BlueFin::GlDbgProxyGlReqOnSyncInReport(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = (BlueFin::GlDbgRequest *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *((void *)v5 + 1);

  return BlueFin::GlDbgProxy::HalGlReqOnSyncInReport(v6, v5, a2, a3);
}

uint64_t BlueFin::GlDbgProxyGlReqOnTimer(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v2 = *(BlueFin::GlDbgProxy **)(v1 + 8);

  return BlueFin::GlDbgProxy::HalGlReqOnTimer(v2, (void (**)(BlueFin::GlDbgRequest *))v1);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnReportMIAdjustmentReqStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnReportMIAdjustmentReqStatus(v3, a2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineOnOscReadyForStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngineOnOscReadyForStorage(v7, a2, a3, a4);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngCbOnRtiFileTimestampReport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnRtiFileTimestampReport(v3, a2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgProxyGlEngineCbOnPwrData(uint64_t a1, double *a2)
{
  uint64_t v3 = (BlueFin::GlDbgCodec *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 656))(a1);

  return BlueFin::GlDbgProxy::HalGlEngCbOnPwrData(v3, a2);
}

uint64_t BlueFin::GlDbgRecordDescriptor::readRecord(BlueFin::GlDbgRecordDescriptor *this, int a2, BlueFin::GlAscii85 *a3, unsigned __int8 *a4, uint64_t a5, unint64_t *a6, unsigned int *a7, int a8)
{
  uint64_t v13 = *((void *)this + 1);
  if (a8)
  {
    unint64_t v14 = *a6 + 1;
    int v15 = *a7;
    if (((*(uint64_t (**)(void))(*(void *)v13 + 208))() & 0x80000000) == 0)
    {
      *(void *)(v13 + 16) = v14;
      *(_DWORD *)(v13 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v15;
      *(_WORD *)(v13 + 8) = 769;
      *(void *)(v13 + 32) = v13 + 11224;
      *(void *)(v13 + 40) = v13 + 11224;
      *(void *)(v13 + 48) = v13 + 11480;
    }
  }
  else
  {
    *(void *)(v13 + 48) = v13 + 11480;
    *((_DWORD *)a3 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 255;
    *(void *)((char *)a3 + 20) = 0;
    *(void *)((char *)a3 + 36) = 0;
    *(void *)((char *)a3 + 28) = 0;
  }
  unsigned int v34 = 0;
  do
  {
    unsigned int v16 = v34;
    if (a8 && v34 >= a5) {
      return (unsigned __int16)v34;
    }
    uint64_t v17 = *((void *)this + 1);
    if (*(void *)(v17 + 48) == *(void *)(v17 + 56))
    {
      BOOL v21 = 0;
      int v22 = 0;
      goto LABEL_28;
    }
    while (1)
    {
      unsigned int v18 = *(unsigned char **)(v17 + 40);
      if ((unsigned char *)(v17 + 11224) == v18) {
        break;
      }
      int v19 = *(unsigned char **)(v17 + 32);
      if (v19 == v18 || v19 == v18 - 1 && *v19 == 13) {
        break;
      }
LABEL_15:
      if ((a8 & 1) != 0 || *(unsigned char *)(v17 + 8))
      {
        if (v34 == a5) {
          char v20 = a8 ^ 1;
        }
        else {
          char v20 = 0;
        }
        if (BlueFin::GlDbgSlogDecoder::DecodeRecord((BlueFin::GlDbgSlogDecoder *)v17, v20))
        {
          int v22 = 0;
          BOOL v21 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        BlueFin::GlDbgSlogDecoder::SkipToNextRecord((BlueFin::GlDbgSlogDecoder *)v17);
      }
      uint64_t v17 = *((void *)this + 1);
      if (*(void *)(v17 + 48) == *(void *)(v17 + 56))
      {
        BOOL v21 = 0;
        int v22 = 0;
        goto LABEL_27;
      }
    }
    if (BlueFin::GlDbgSlogDecoder::FillEncodeBuffer((BlueFin::GlDbgSlogDecoder *)v17))
    {
      uint64_t v17 = *((void *)this + 1);
      goto LABEL_15;
    }
    BOOL v21 = 0;
    int v22 = 1;
LABEL_27:
    unsigned int v16 = v34;
LABEL_28:
    if (v16 < a5)
    {
      uint64_t v23 = *((void *)this + 1);
      if (*(unsigned char *)(v23 + 76) || *(unsigned char *)(v23 + 9) == 3)
      {
        unsigned int v33 = *(unsigned __int8 *)(v23 + 11480) == 123;
        BlueFin::GlAscii85::Decode(a3, (const char *)(v23 + 11480), a4, (unsigned __int16)(*(_DWORD *)(v23 + 48) - (v23 + 11480)) - v21, a5, &v33, &v34, v21);
        if (v33)
        {
          uint64_t v24 = *((void *)this + 1);
          uint64_t v25 = v24 + 2 * (unsigned __int16)(v33 - 1);
          *a6 = *(void *)(v24 + 64) + *(unsigned __int16 *)(v25 + 11736);
          *a7 = *(_DWORD *)(v24 + 72) + *(unsigned __int16 *)(v25 + 12248);
        }
      }
      else if (*(unsigned char *)(v23 + 86))
      {
        BOOL v21 = BlueFin::GlDbgSlogDecoder::DecodeAlmEntry((BlueFin::GlDbgSlogDecoder *)v23);
      }
    }
    uint64_t v26 = *((void *)this + 1);
    *(void *)(v26 + 48) = v26 + 11480;
  }
  while ((v22 | v21) != 1);
  if ((a8 & 1) == 0)
  {
    if (v21 && (*(unsigned char *)(v26 + 76) || *(unsigned char *)(v26 + 9) == 3))
    {
      *((unsigned char *)this + 26) = *a4;
      *((_WORD *)this + 12) = bswap32(*(unsigned __int16 *)(a4 + 1)) >> 16;
      *((void *)this + 2) = *(void *)(v26 + 64);
      *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(void *)(v26 + 16) - 1;
      int v27 = *(_DWORD *)(v26 + 72);
      int v28 = *(_DWORD *)(v26 + 24);
      *((_DWORD *)this + 10) = v27;
      *((_DWORD *)this + 11) = v28;
      *((_DWORD *)this + 12) = a2;
    }
    else
    {
      *((_WORD *)this + 12) = 0;
      *((void *)this + 2) = 0;
      *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    }
  }
  return (unsigned __int16)v34;
}

uint64_t BlueFin::GlDbgRecord::GetMsg(BlueFin::GlDbgRecord *this, unsigned __int8 *__dst, int a3)
{
  if (a3)
  {
    unsigned __int16 v3 = a3;
    unsigned __int16 v6 = 0;
    __int16 v7 = *((_WORD *)this + 27);
    LOWORD(Record) = *((_WORD *)this + 26) - v7 + (v7 & 0xFE00);
    unsigned __int16 v9 = v7 & 0x1FF;
    unsigned int v16 = (unsigned __int8 *)this + 56;
    uint64_t v10 = (BlueFin::GlDbgRecord *)((char *)this + 584);
    unsigned int v11 = (unint64_t *)((char *)this + 568);
    int v12 = (unsigned int *)((char *)this + 576);
    do
    {
      if (*((unsigned char *)this + 580)) {
        break;
      }
      if (v3 >= (unsigned __int16)Record) {
        size_t v13 = (unsigned __int16)Record;
      }
      else {
        size_t v13 = v3;
      }
      memcpy(__dst, (char *)this + v9 + 56, v13);
      *((_WORD *)this + 27) += v13;
      v9 += v13;
      LOWORD(Record) = Record - v13;
      if (!(_WORD)Record)
      {
        if (v9 == 512)
        {
          int Record = BlueFin::GlDbgRecordDescriptor::readRecord(this, *((_DWORD *)this + 12), v10, v16, 512, v11, v12, 1);
          unsigned __int16 v9 = 0;
          *((_WORD *)this + 26) = Record;
          BOOL v14 = Record == 0;
        }
        else
        {
          LOWORD(Record) = 0;
          BOOL v14 = 1;
        }
        *((unsigned char *)this + 580) = v14;
      }
      __dst += v13;
      v6 += v13;
      v3 -= v13;
    }
    while (v3);
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t BlueFin::GlDbgRequest::CreateGlRequestImplFactoryTest(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, char a10)
{
  unsigned int v16 = a2;
  if (BlueFin::GlDbgMemory::m_pInstance) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = a1 == 0;
  }
  if (!v18 && a2 != 0)
  {
    int v22 = (uint64_t (**)(uint64_t))a1(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v22;
    char v20 = a1;
    if (v22)
    {
      *int v22 = a1;
      v22[1] = (uint64_t (*)(uint64_t))v16;
      char v20 = a1;
    }
    goto LABEL_13;
  }
  char v20 = a1;
  if (a1)
  {
LABEL_13:
    uint64_t v21 = v20(136);
    goto LABEL_14;
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
LABEL_14:
  uint64_t v23 = v21;
  if (v21)
  {
    *(void *)uint64_t v21 = &unk_270EBB200;
    *(_OWORD *)(v21 + 72) = 0u;
    *(_OWORD *)(v21 + 8) = 0u;
    *(_OWORD *)(v21 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v21 + 40) = 0u;
    *(_OWORD *)(v21 + 56) = 0u;
    *(_OWORD *)(v21 + 88) = 0u;
    *(_OWORD *)(v21 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v21 + 120) = 0u;
    *(void *)(v21 + 72) = a3;
    Memory = BlueFin::GlMemAlloc::glAllocateMemory(44, 288, a1);
    uint64_t v25 = BlueFin::GlRequestImplFactoryTest::Create((uint64_t)Memory, v23, (uint64_t)BlueFin::GlDbgProxyGlReqOnStart, a4, a5, a6, a7, a8, a9, a10);
    *(void *)(v23 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v25;
    if (!v25)
    {
      if (!v16) {
        unsigned int v16 = *(void (**)(uint64_t))(BlueFin::GlDbgMemory::m_pInstance + 8);
      }
      v16(v23);
      return 0;
    }
  }
  return v23;
}

uint64_t BlueFin::GlDbgRequest::CreateGlRequestImplFactoryTest(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, char a4, int a5, char a6, char a7, int a8, int a9, __int16 a10, __int16 a11, __int16 a12, __int16 a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,__int16 a25,__int16 a26,char a27,char a28,char a29,char a30,char a31)
{
  if (!BlueFin::GlDbgMemory::m_pInstance && a1 && a2)
  {
    unsigned int v41 = (uint64_t (**)(uint64_t))a1(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v41;
    int v39 = a1;
    if (v41)
    {
      *unsigned int v41 = a1;
      v41[1] = (uint64_t (*)(uint64_t))a2;
      int v39 = a1;
    }
    goto LABEL_8;
  }
  int v39 = a1;
  if (a1)
  {
LABEL_8:
    uint64_t v40 = v39(136);
    goto LABEL_9;
  }
  uint64_t v40 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
LABEL_9:
  uint64_t v42 = v40;
  if (v40)
  {
    *(void *)uint64_t v40 = &unk_270EBB200;
    *(_OWORD *)(v40 + 72) = 0u;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v40 + 40) = 0u;
    *(_OWORD *)(v40 + 56) = 0u;
    *(_OWORD *)(v40 + 88) = 0u;
    *(_OWORD *)(v40 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v40 + 120) = 0u;
    *(void *)(v40 + 72) = a3;
    Memory = BlueFin::GlMemAlloc::glAllocateMemory(44, 288, a1);
    uint64_t v44 = BlueFin::GlRequestImplFactoryTest::Create((uint64_t)Memory, v42, (uint64_t)BlueFin::GlDbgProxyGlReqOnStart, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v47,
            a20,
            a21,
            a22,
            a23,
            a24,
            a25,
            a26,
            a27,
            a28,
            a29,
            v48,
            a31);
    *(void *)(v42 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v44;
    if (!v44)
    {
      int v45 = a2;
      if (!a2) {
        int v45 = *(void (**)(uint64_t))(BlueFin::GlDbgMemory::m_pInstance + 8);
      }
      v45(v42);
      return 0;
    }
  }
  return v42;
}

uint64_t BlueFin::GlDbgRequest::CreateGlRequestImplComStressTest(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t, __n128), uint64_t a3, uint64_t a4, __int16 a5, __n128 *a6)
{
  uint64_t v10 = a2;
  if (BlueFin::GlDbgMemory::m_pInstance) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a1 == 0;
  }
  if (!v12 && a2 != 0)
  {
    unsigned int v16 = (uint64_t (**)(uint64_t))a1(16);
    BlueFin::GlDbgMemory::m_pInstance = (uint64_t)v16;
    BOOL v14 = a1;
    if (v16)
    {
      *unsigned int v16 = a1;
      v16[1] = (uint64_t (*)(uint64_t))v10;
      BOOL v14 = a1;
    }
    goto LABEL_13;
  }
  BOOL v14 = a1;
  if (a1)
  {
LABEL_13:
    uint64_t v15 = v14(136);
    goto LABEL_14;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))BlueFin::GlDbgMemory::m_pInstance)(136);
LABEL_14:
  uint64_t v17 = v15;
  if (v15)
  {
    *(void *)uint64_t v15 = &unk_270EBB200;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v15 + 40) = 0u;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(v15 + 120) = 0u;
    *(void *)(v15 + 72) = a3;
    Memory = BlueFin::GlMemAlloc::glAllocateMemory(44, 288, a1);
    __n128 v19 = BlueFin::GlRequestImplComStressTest::Create((uint64_t)Memory, v17, (uint64_t)BlueFin::GlDbgProxyGlReqOnStart, a4, a5, a6);
    *(void *)(v17 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20;
    if (!v20)
    {
      if (!v10) {
        uint64_t v10 = *(void (**)(uint64_t, __n128))(BlueFin::GlDbgMemory::m_pInstance + 8);
      }
      v10(v17, v19);
      return 0;
    }
  }
  return v17;
}

uint64_t BlueFin::GlDbgRequest::GetUserData(BlueFin::GlDbgRequest *this)
{
  return *((void *)this + 2);
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetGsvRate(BlueFin::GlDbgRequest *this, uint64_t a2)
{
  __int16 v12 = a2;
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (v4)
  {
    BlueFin::GlDbgCodec::WriteStart(v4, 3073);
    uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    int v11 = BlueFin::GlDbgRequest::Id(this, 0);
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v11);
    unsigned __int16 v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
      BlueFin::GlDbgCodec::Write(v6, &v12);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 3) + 96))(*((void *)this + 3), a2);
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3073);
    int v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    int v10 = BlueFin::GlDbgRequest::Id(this, 0);
    BlueFin::GlDbgCodec::Write(v8, (unsigned int *)&v10);
    unsigned __int16 v9 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v9();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnCntin(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3075);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, unsigned int, double, double)))(**(void **)(a1 + 24)
                                                                                                + 48))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnCntin);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3075);
    unsigned __int16 v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    __int16 v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnFactTest(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3076);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t)))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnFactTest);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3076);
    unsigned __int16 v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    __int16 v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnSIGMeasurement(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3079);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnMeas);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3079);
    unsigned __int16 v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    __int16 v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnExerciseMeasurement(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3083);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t, uint64_t, BOOL)))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnExerMeas);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3083);
    unsigned __int16 v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    __int16 v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::SetOnTimer(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (v3)
  {
    BlueFin::GlDbgCodec::WriteStart(v3, 3081);
    uint64_t v4 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v9 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v9);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  }
  (*(void (**)(void, uint64_t (*)(uint64_t)))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24), BlueFin::GlDbgProxyGlReqOnTimer);
  uint64_t result = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3081);
    unsigned __int16 v6 = *(BlueFin::GlDbgCodec **)(a1 + 8);
    int v8 = BlueFin::GlDbgRequest::Id((BlueFin::GlDbgRequest *)a1, 0);
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v8);
    __int16 v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return (BlueFin::GlDbgCodec *)v7();
  }
  return result;
}

uint64_t BlueFin::GlDbgRequest::SetUserData(uint64_t this, void *a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

BlueFin::GlDbgCodec *BlueFin::GlDbgRequest::StopAfter(BlueFin::GlDbgRequest *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v22 = a3;
  int v23 = a2;
  int v21 = a4;
  __int16 v20 = a5;
  int v10 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (v10)
  {
    BlueFin::GlDbgCodec::WriteStart(v10, 3082);
    int v11 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    int v19 = BlueFin::GlDbgRequest::Id(this, 0);
    BlueFin::GlDbgCodec::Write(v11, (unsigned int *)&v19);
    __int16 v12 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
      BlueFin::GlDbgCodec::Write(v12, (unsigned int *)&v23);
    }
    size_t v13 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
      BlueFin::GlDbgCodec::Write(v13, (unsigned int *)&v22);
    }
    BOOL v14 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v14 + 120))(v14)) {
      BlueFin::GlDbgCodec::Write(v14, (unsigned int *)&v21);
    }
    uint64_t v15 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v15 + 120))(v15)) {
      BlueFin::GlDbgCodec::Write(v15, &v20);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**((void **)this + 3) + 88))(*((void *)this + 3), a2, a3, a4, a5);
  uint64_t result = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (result)
  {
    BlueFin::GlDbgCodec::WriteFinal(result, 3082);
    uint64_t v17 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
    int v19 = BlueFin::GlDbgRequest::Id(this, 0);
    BlueFin::GlDbgCodec::Write(v17, (unsigned int *)&v19);
    BOOL v18 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);
    return (BlueFin::GlDbgCodec *)v18();
  }
  return result;
}

void BlueFin::GlDbgRequest::~GlDbgRequest(BlueFin::GlDbgRequest *this)
{
}

uint64_t BlueFin::GlDbgSettings::DisableGpsMeasurementEngine(BlueFin::GlDbgSettings *this)
{
  uint64_t v2 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v2 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 41, "DisableGpsMeasurementEngine", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 41, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v2, 3585);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 304))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3585);
  unsigned __int16 v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgSettings::EnableLtoCbeeQATest(BlueFin::GlDbgSettings *this)
{
  uint64_t v2 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v2 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 56, "EnableLtoCbeeQATest", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 56, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v2, 3586);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 192))(*((void *)this + 2));
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3586);
  unsigned __int16 v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgSettings::SetAGCForceValue(BlueFin::GlDbgSettings *this, BOOL a2, int a3)
{
  BOOL v10 = a2;
  int v9 = a3;
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 71, "SetAGCForceValue", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 71, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3587);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v10);
  }
  unsigned __int16 v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v9);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 344))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3587);
  __int16 v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlDbgSettings::SetAGCFreezeState(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 88, "SetAGCFreezeState", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 88, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3588);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 336))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3588);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetAsstFlags(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  int v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 104, "SetAsstFlags", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 104, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3589);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 216))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3589);
  unsigned __int16 v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetBurstMode(BlueFin::GlDbgSettings *this, BOOL a2, BOOL a3, BOOL a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8)
{
  BOOL v25 = a2;
  BOOL v24 = a3;
  BOOL v23 = a4;
  BOOL v22 = a5;
  BOOL v21 = a6;
  BOOL v20 = a7;
  BOOL v19 = a8;
  int v9 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v9 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 120, "SetBurstMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 120, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v9, 3590);
  BOOL v10 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
    BlueFin::GlDbgCodec::Write(v10, &v25);
  }
  int v11 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
    BlueFin::GlDbgCodec::Write(v11, &v24);
  }
  __int16 v12 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
    BlueFin::GlDbgCodec::Write(v12, &v23);
  }
  size_t v13 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
    BlueFin::GlDbgCodec::Write(v13, &v22);
  }
  BOOL v14 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v14 + 120))(v14)) {
    BlueFin::GlDbgCodec::Write(v14, &v21);
  }
  uint64_t v15 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v15 + 120))(v15)) {
    BlueFin::GlDbgCodec::Write(v15, &v20);
  }
  unsigned int v16 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v16 + 120))(v16)) {
    BlueFin::GlDbgCodec::Write(v16, &v19);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 288))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3590);
  uint64_t v17 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v17();
}

uint64_t BlueFin::GlDbgSettings::SetCntinOffsetPpb(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  __int16 v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 142, "SetCntinOffsetPpb", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 142, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3591);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 224))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3591);
  unsigned __int16 v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetDbgParam(BlueFin::GlDbgCodec **this, char (*a2)[64], char (*a3)[256])
{
  BlueFin::GlDbgCodec::WriteStart(this[1], 3612);
  int v8 = strlen((const char *)a2) + 1;
  BlueFin::GlDbgCodec::WriteArray(this[1], (char *)a2, (unsigned int *)&v8);
  int v8 = strlen((const char *)a3) + 1;
  BlueFin::GlDbgCodec::WriteArray(this[1], (char *)a3, (unsigned int *)&v8);
  (*(void (**)(BlueFin::GlDbgCodec *, uint64_t))(*(void *)this[1] + 32))(this[1], 1);
  (*(void (**)(void))(*(void *)this[2] + 352))();
  BlueFin::GlDbgCodec::WriteFinal(this[1], 3612);
  unsigned __int16 v6 = *(uint64_t (**)(void))(*(void *)this[1] + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetDynamicMode(uint64_t a1, unsigned int a2)
{
  unsigned int v6 = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 175, "SetDynamicMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 175, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3592);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, void))(**(void **)(a1 + 16) + 160))(*(void *)(a1 + 16), v6);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3592);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v4();
}

uint64_t BlueFin::GlDbgSettings::SetFarStart(BlueFin::GlDbgSettings *this, BOOL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v28 = a2;
  int v26 = a4;
  int v27 = a3;
  int v24 = a6;
  int v25 = a5;
  int v23 = a7;
  int v8 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v8 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 191, "SetFarStart", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 191, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v8, 3593);
  uint64_t v15 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v15 + 120))(v15)) {
    BlueFin::GlDbgCodec::Write(v15, &v28);
  }
  unsigned int v16 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v16 + 120))(v16)) {
    BlueFin::GlDbgCodec::Write(v16, (unsigned int *)&v27);
  }
  uint64_t v17 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v17 + 120))(v17)) {
    BlueFin::GlDbgCodec::Write(v17, (unsigned int *)&v26);
  }
  BOOL v18 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v18 + 120))(v18)) {
    BlueFin::GlDbgCodec::Write(v18, (unsigned int *)&v25);
  }
  BOOL v19 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v19 + 120))(v19)) {
    BlueFin::GlDbgCodec::Write(v19, (unsigned int *)&v24);
  }
  BOOL v20 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v20 + 120))(v20)) {
    BlueFin::GlDbgCodec::Write(v20, (unsigned int *)&v23);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, BOOL, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((void **)this + 2) + 200))(*((void *)this + 2), a2, a3, a4, a5, a6, a7);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3593);
  BOOL v21 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v21();
}

uint64_t BlueFin::GlDbgSettings::SetRTICacheTimeoutSec(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 229, "SetRTICacheTimeoutSec", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 229, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3688);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 840))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3688);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetL5HardwareDelayInMeters(BlueFin::GlDbgSettings *this, float a2)
{
  float v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 278, "SetL5HardwareDelayInMeters", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 278, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3650);
  BlueFin::GlDbgCodec::Write(*((BlueFin::GlDbgCodec **)this + 1), &v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 256))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3650);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetGgtoInNs(BlueFin::GlDbgSettings *this, float a2)
{
  float v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 310, "SetGgtoInNs", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 310, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3651);
  BlueFin::GlDbgCodec::Write(*((BlueFin::GlDbgCodec **)this + 1), &v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 272))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3651);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBdsSignalType(BlueFin::GlDbgSettings *this, char *a2, uint64_t a3)
{
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 326, "SetBdsSignalType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 326, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3670);
  int v9 = a3;
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v9);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, char *, uint64_t))(**((void **)this + 2) + 248))(*((void *)this + 2), a2, a3);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3670);
  float v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipBdsSignalType(BlueFin::GlDbgSettings *this, unsigned __int8 (*a2)[63])
{
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 343, "SetOnChipBdsSignalType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 343, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3671);
  int v7 = 63;
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), (char *)a2, (unsigned int *)&v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 632))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3671);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetGpsSignalType(BlueFin::GlDbgSettings *this, char *a2, uint64_t a3)
{
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 360, "SetGpsSignalType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 360, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3631);
  int v9 = a3;
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v9);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, char *, uint64_t))(**((void **)this + 2) + 240))(*((void *)this + 2), a2, a3);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3631);
  int v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipGpsSignalType(BlueFin::GlDbgSettings *this, unsigned __int8 (*a2)[32])
{
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 377, "SetOnChipGpsSignalType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 377, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3657);
  int v7 = 32;
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), (char *)a2, (unsigned int *)&v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 624))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3657);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetSearch3G(BlueFin::GlDbgSettings *this, unsigned __int8 (*a2)[3])
{
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 394, "SetSearch3G", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 394, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3664);
  int v7 = 3;
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), (char *)a2, (unsigned int *)&v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 640))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3664);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetGulpLogFacMask(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  int v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 455, "SetGulpLogFacMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 455, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3623);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 144))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3623);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetGulpLogPriMask(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  int v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 471, "SetGulpLogPriMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 471, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3624);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 152))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3624);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::EnableGal14_18(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 503, "EnableGal14_18", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 503, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3653);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 280))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3653);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::EnableL5Msa(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 519, "EnableL5Msa", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 519, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3655);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 592))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3655);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::EnableL5Msb(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 535, "EnableL5Msb", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 535, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3656);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 600))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3656);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipConfigParameters(BlueFin::GlDbgSettings *this, char *a2)
{
  if (!a2 || (unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1), *((void *)v3 + 101)))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 568, "SetOnChipConfigParameters", (char)"(nullptr == pLine) || (!m_rProxy.Normal())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 568, "(nullptr == pLine) || (!m_rProxy.Normal())");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3649);
  int v7 = strlen(a2);
  BlueFin::GlDbgCodec::WriteArray(*((BlueFin::GlDbgCodec **)this + 1), a2, (unsigned int *)&v7);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 584))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3649);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetNvMemWritePeriodMs(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  int v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 603, "SetNvMemWritePeriodMs", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 603, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3602);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 208))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3602);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetPadNum(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 619, "SetPadNum", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 619, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3603);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, BOOL))(**((void **)this + 2) + 104))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3603);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetPlatformSpecificFlags(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 635, "SetPlatformSpecificFlags", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 635, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3604);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 296))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3604);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetPMMSettings(BlueFin::GlDbgSettings *this, uint64_t a2)
{
  __int16 v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 651, "SetPMMSettings", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 651, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3605);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 112))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3605);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetRfAtt(uint64_t a1, unsigned int a2)
{
  unsigned int v6 = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 667, "SetRfAtt", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 667, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3606);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), v6);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3606);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v4();
}

uint64_t BlueFin::GlDbgSettings::SetRfLoss_dB_Ap(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 699, "SetRfLoss_dB_Ap", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 699, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3665);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float))(**((void **)this + 2) + 64))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3665);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetRfLoss_dB_Ap_L5(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 715, "SetRfLoss_dB_Ap_L5", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 715, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3689);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float))(**((void **)this + 2) + 72))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3689);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetRfLoss_dB_Cp(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 731, "SetRfLoss_dB_Cp", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 731, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3666);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float))(**((void **)this + 2) + 80))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3666);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetRfLoss_dB_Cp_L5(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 747, "SetRfLoss_dB_Cp_L5", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 747, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3690);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float))(**((void **)this + 2) + 88))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3690);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetTimeSyncGroupDelay(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 763, "SetTimeSyncGroupDelay", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 763, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3614);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 360))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3614);
  unsigned int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipRfMode(uint64_t a1, int a2)
{
  int v6 = a2;
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 811, "SetOnChipRfMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 811, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3658);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v6);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 608))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3658);
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v4();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipLnaMask(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 844, "SetOnChipLnaMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 844, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3659);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 616))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3659);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetUartFlowControlSettings(uint64_t a1, unsigned int a2, BOOL a3, BOOL a4)
{
  unsigned int v14 = a2;
  BOOL v13 = a3;
  BOOL v12 = a4;
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v5 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 860, "SetUartFlowControlSettings", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 860, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v5, 3609);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), &v14);
  float v8 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v8 + 120))(v8)) {
    BlueFin::GlDbgCodec::Write(v8, &v13);
  }
  int v9 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, &v12);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, void, BOOL, BOOL))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16), v14, a3, a4);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3609);
  BOOL v10 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v10();
}

uint64_t BlueFin::GlDbgSettings::SetWait4UserTimeoutMs(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 878, "SetWait4UserTimeoutMs", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 878, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3610);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 312))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3610);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetWarmStandbyTimeoutsMs(BlueFin::GlDbgSettings *this, int a2, int a3)
{
  int v9 = a3;
  int v10 = a2;
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 894, "SetWarmStandbyTimeoutsMs", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 894, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3611);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v10);
  }
  int v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v9);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 320))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3611);
  int v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlDbgSettings::SetDegreeThresholdForPhn(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 911, "SetDegreeThresholdForPhn", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 911, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3616);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, float))(**((void **)this + 2) + 96))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3616);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetDbgMode(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 927, "SetDbgMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 927, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3617);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 384))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3617);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetSyncInPolarityHigh(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 943, "SetSyncInPolarityHigh", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 943, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3613);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 368))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3613);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetLocationHubEnabled(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 976, "SetLocationHubEnabled", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 976, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3625);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 392))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3625);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::DisableSensor(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 991, "DisableSensor", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 991, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3640);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 400))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3640);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetNanoEngineKeepPatchLoaded(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1007, "SetNanoEngineKeepPatchLoaded", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1007, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3626);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 408))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3626);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBreadcrumbMaxLocsToStore(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1023, "SetBreadcrumbMaxLocsToStore", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1023, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3618);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 416))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3618);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBreadcrumbWakeupDistance(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1038, "SetBreadcrumbWakeupDistance", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1038, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3633);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 496))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3633);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBreadcrumbAccuracyMask(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1053, "SetBreadcrumbAccuracyMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1053, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3619);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 424))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3619);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBreadcrumbSelfWakeupTime(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1069, "SetBreadcrumbSelfWakeupTime", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1069, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3620);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 432))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3620);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBreadcrumbMaxMsmtsToRetrieve(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1086, "SetBreadcrumbMaxMsmtsToRetrieve", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1086, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3621);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 440))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3621);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetGeofenceEnableNoMotionDetection(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1102, "SetGeofenceEnableNoMotionDetection", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1102, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3622);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 448))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3622);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipStopNotification(BlueFin::GlDbgSettings *this, __int16 a2)
{
  __int16 v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1118, "SetOnChipStopNotification", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1118, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3648);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 576))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3648);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetBlankingMonitorParams(BlueFin::GlDbgSettings *this, uint64_t a2, int a3, int a4, __int16 a5, __int16 a6)
{
  int v19 = a3;
  int v20 = a2;
  int v18 = a4;
  __int16 v17 = a5;
  __int16 v16 = a6;
  __int16 v7 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v7 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1135, "SetBlankingMonitorParams", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1135, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v7, 3628);
  int v9 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, (unsigned int *)&v20);
  }
  int v10 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v10 + 120))(v10)) {
    BlueFin::GlDbgCodec::Write(v10, (unsigned int *)&v19);
  }
  int v11 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v11 + 120))(v11)) {
    BlueFin::GlDbgCodec::Write(v11, (unsigned int *)&v18);
  }
  BOOL v12 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v12 + 120))(v12)) {
    BlueFin::GlDbgCodec::Write(v12, &v17);
  }
  BOOL v13 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v13 + 120))(v13)) {
    BlueFin::GlDbgCodec::Write(v13, &v16);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 456))(*((void *)this + 2), a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3628);
  unsigned int v14 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v14();
}

uint64_t BlueFin::GlDbgSettings::SetPvtBatchingMode(BlueFin::GlDbgSettings *this, __int16 a2)
{
  __int16 v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1155, "SetPvtBatchingMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1155, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3629);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 464))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3629);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipMaxNumChannels(BlueFin::GlDbgSettings *this, __int16 a2)
{
  __int16 v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1171, "SetOnChipMaxNumChannels", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1171, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3661);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 648))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3661);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipAccMask(BlueFin::GlDbgSettings *this, __int16 a2)
{
  __int16 v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1187, "SetOnChipAccMask", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1187, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3662);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 656))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3662);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetHighPwrCwTestEnabled(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1203, "SetHighPwrCwTestEnabled", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1203, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3630);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 472))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3630);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetLMSRollOverUpperLimit(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1219, "SetLMSRollOverUpperLimit", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1219, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3635);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 480))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3635);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::EnableOnChipMiCtrl(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1235, "EnableOnChipMiCtrl", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1235, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3632);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 488))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3632);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipEnableSpeedFilter(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1250, "SetOnChipEnableSpeedFilter", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1250, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3672);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 696))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3672);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::TurnOnGalDataBits(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1265, "TurnOnGalDataBits", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1265, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3673);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 704))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3673);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOnChipEnableAdaptivePmm(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1280, "SetOnChipEnableAdaptivePmm", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1280, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3674);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 712))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3674);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetDisablePA(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1295, "SetDisablePA", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1295, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3683);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 800))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3683);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetPowerMode(BlueFin::GlDbgSettings *this, BOOL a2, BOOL a3)
{
  BOOL v10 = a2;
  BOOL v9 = a3;
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v4 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1310, "SetPowerMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1310, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v4, 3684);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v10);
  }
  int v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, &v9);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 808))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3684);
  BOOL v7 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v7();
}

uint64_t BlueFin::GlDbgSettings::SetDisableBlindSrch(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1326, "SetDisableBlindSrch", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1326, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3681);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 720))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3681);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::EnableNmeaReqId(BlueFin::GlDbgSettings *this)
{
  uint64_t v2 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v2 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1341, "EnableNmeaReqId", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1341, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v2, 3638);
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 560))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3638);
  unsigned __int16 v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v3();
}

uint64_t BlueFin::GlDbgSettings::SetGLOBlankingType(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1373, "SetGLOBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1373, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3636);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 512))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3636);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlDbgSettings::SetBDSBlankingType(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1389, "SetBDSBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1389, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3637);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 520))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3637);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlDbgSettings::SetGALE5aBlankingType(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1405, "SetGALE5aBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1405, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3643);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 528))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3643);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlDbgSettings::SetGALE5bBlankingType(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1421, "SetGALE5bBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1421, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3644);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 536))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3644);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlDbgSettings::SetGPSL2cBlankingType(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1437, "SetGPSL2cBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1437, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3645);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 544))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3645);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlDbgSettings::SetNICBlankingType(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1453, "SetNICBlankingType", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1453, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3660);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  *((_DWORD *)v5 + 143) = 2;
  unsigned __int8 v7 = a2;
  BlueFin::GlDbgCodec::Rvw(v5, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 552))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3660);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
}

uint64_t BlueFin::GlDbgSettings::SetSwTrackAgc(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1469, "SetSwTrackAgc", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1469, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3639);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 568))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3639);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetPrecisePositionMode(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1485, "SetPrecisePositionMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1485, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3647);
  uint64_t v5 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  int v8 = a2;
  BlueFin::GlDbgCodec::Write(v5, (unsigned int *)&v8);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16), a2);
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3647);
  int v6 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetLowGainAntenna(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1501, "SetLowGainAntenna", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1501, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3663);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 664))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3663);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetGlitchRecoveryEnable(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1519, "SetGlitchRecoveryEnable", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1519, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3680);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 768))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3680);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetRtcDutyCycleEnable(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1535, "SetRtcDutyCycleEnable", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1535, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3695);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 776))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3695);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetGalBitsAlwaysOn(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1551, "SetGalBitsAlwaysOn", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1551, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3685);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 816))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3685);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetEnableL1C(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1583, "SetEnableL1C", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1583, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3698);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 880))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3698);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetExtSuspendEnabled(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1599, "SetExtSuspendEnabled", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1599, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3694);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 888))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3694);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetTestFPGA(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1615, "SetTestFPGA", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1615, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3697);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 896))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3697);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetEnableVLP(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1631, "SetEnableVLP", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1631, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3699);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 904))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3699);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetIndoorVdrPropTimeMsThresh(BlueFin::GlDbgSettings *this, int a2)
{
  int v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1647, "SetIndoorVdrPropTimeMsThresh", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1647, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3667);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, (unsigned int *)&v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 672))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3667);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetIndoorVdrPropDistMThresh(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1663, "SetIndoorVdrPropDistMThresh", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1663, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3669);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 688))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3669);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetIndoorVdrMinSpeedMps(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1679, "SetIndoorVdrMinSpeedMps", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1679, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3676);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 736))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3676);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetIndoorVdrSpeedThreshMps(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1695, "SetIndoorVdrSpeedThreshMps", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1695, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3677);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 744))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3677);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetTunnelVdrLowerSpeedMps(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1711, "SetTunnelVdrLowerSpeedMps", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1711, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3678);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 752))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3678);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetTunnelVdrUpperSpeedMps(BlueFin::GlDbgSettings *this, float a2)
{
  float v8 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1727, "SetTunnelVdrUpperSpeedMps", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1727, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3679);
  uint64_t v5 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v5 + 120))(v5)) {
    BlueFin::GlDbgCodec::Write(v5, &v8);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(float))(**((void **)this + 2) + 760))(a2);
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3679);
  int v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v6();
}

uint64_t BlueFin::GlDbgSettings::SetTrackChannelForGPSGALOnlyMode(BlueFin::GlDbgSettings *this, __int16 a2)
{
  __int16 v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1743, "SetTrackChannelForGPSGALOnlyMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1743, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3668);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 680))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3668);
  uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetForcedSvList(BlueFin::GlDbgSettings *this, const char *a2)
{
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1797, "SetForcedSvList", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1797, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3696);
  unsigned int v5 = strlen(a2);
  int v12 = v5;
  int v6 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v6 + 120))(v6)) {
    BlueFin::GlDbgCodec::Write(v6, (unsigned int *)&v12);
  }
  if (v5)
  {
    uint64_t v7 = v5;
    float v8 = (const BOOL *)a2;
    do
    {
      BlueFin::GlDbgCodec::Write(*((BlueFin::GlDbgCodec **)this + 1), v8++);
      --v7;
    }
    while (v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  BOOL v11 = 1;
  (*(void (**)(void))(**((void **)this + 2) + 784))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3696);
  BOOL v9 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v9 + 120))(v9)) {
    BlueFin::GlDbgCodec::Write(v9, &v11);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  return 1;
}

uint64_t BlueFin::GlDbgSettings::SetGnssPropagateInStandby(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1822, "SetGnssPropagateInStandby", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1822, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3682);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 792))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3682);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetSpoofCarrierThresh(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1839, "SetSpoofCarrierThresh", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1839, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3687);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const __int16 *)a2);
  unsigned int v7 = 6;
  BlueFin::GlDbgCodec::WriteArray(*(BlueFin::GlDbgCodec **)(a1 + 8), (float *)(a2 + 4), &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 832))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3687);
  unsigned int v5 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetPpsSyncInMode(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1857, "SetPpsSyncInMode", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1857, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3691);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 848))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3691);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetExtBlankingPolarityToLow(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1873, "SetExtBlankingPolarityToLow", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1873, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3692);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 856))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3692);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::EnableNmeaV411(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1889, "EnableNmeaV411", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1889, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3686);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 824))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3686);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetAllowUnverifiedTimetoNvmem(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1905, "SetAllowUnverifiedTimetoNvmem", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1905, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3700);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 912))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3700);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetAdcCapture(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v3 = *(BlueFin::GlDbgCodec **)(a1 + 8);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1921, "SetAdcCapture", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1921, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3702);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const BOOL *)a2);
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (const BOOL *)(a2 + 1));
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (unsigned int *)(a2 + 4));
  BlueFin::GlDbgCodec::Write(*(BlueFin::GlDbgCodec **)(a1 + 8), (unsigned int *)(a2 + 8));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 1);
  (*(void (**)(void))(**(void **)(a1 + 16) + 920))();
  BlueFin::GlDbgCodec::WriteFinal(*(BlueFin::GlDbgCodec **)(a1 + 8), 3702);
  unsigned int v5 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetEnableCoex(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1938, "SetEnableCoex", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1938, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3703);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 928))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3703);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetEnableB1CSearch(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1952, "SetEnableB1CSearch", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1952, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3706);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 872))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3706);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

uint64_t BlueFin::GlDbgSettings::SetOscCalFromTempSensor(BlueFin::GlDbgSettings *this, BOOL a2)
{
  BOOL v7 = a2;
  unsigned __int16 v3 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if (*((void *)v3 + 101))
  {
    DeviceFaultNotify("gldebug_settings.cpp", 1978, "SetOscCalFromTempSensor", (char)"!m_rProxy.Normal()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_settings.cpp", 1978, "!m_rProxy.Normal()");
  }
  BlueFin::GlDbgCodec::WriteStart(v3, 3705);
  uint64_t v4 = (BlueFin::GlDbgCodec *)*((void *)this + 1);
  if ((*(unsigned int (**)(BlueFin::GlDbgCodec *))(*(void *)v4 + 120))(v4)) {
    BlueFin::GlDbgCodec::Write(v4, &v7);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), 1);
  (*(void (**)(void))(**((void **)this + 2) + 960))();
  BlueFin::GlDbgCodec::WriteFinal(*((BlueFin::GlDbgCodec **)this + 1), 3705);
  unsigned int v5 = *(uint64_t (**)(void))(**((void **)this + 1) + 32);

  return v5();
}

void BlueFin::GlDbgSettings::~GlDbgSettings(BlueFin::GlDbgSettings *this)
{
}

BOOL BlueFin::GlDbgSlogDecoder::FillEncodeBuffer(BlueFin::GlDbgSlogDecoder *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  uint64_t v3 = *((void *)this + 5) - (void)v2;
  uint64_t v4 = (char *)this + 11224;
  unsigned int v5 = (char *)this + 11224;
  size_t v6 = (unsigned __int16)(*((_WORD *)this + 20) - (_WORD)v2);
  if (*((_WORD *)this + 20) != (_WORD)v2)
  {
    memmove((char *)this + 11224, v2, v6);
    unsigned int v5 = &v4[v6];
  }
  uint64_t v7 = (*(unsigned __int16 (**)(void))(*(void *)this + 200))();
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
  *((void *)this + 5) = &v5[v7];
  *((unsigned char *)this + 77) = v7 < (unsigned __int16)(256 - v3);
  return v7 != 0;
}

BOOL BlueFin::GlDbgSlogDecoder::SkipToNextRecord(BlueFin::GlDbgSlogDecoder *this)
{
  uint64_t v2 = (unsigned char *)*((void *)this + 4);
  uint64_t v3 = (unsigned char *)*((void *)this + 5);
  if (v2 == v3)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      if (v2 == v3 - 1 && *v2 == 13) {
        break;
      }
      if (*((unsigned char *)this + 8)) {
        break;
      }
      char v4 = BlueFin::GlDbgSlogDecoder::ProcessByte(this, 0, 0);
      uint64_t v2 = (unsigned char *)*((void *)this + 4);
      uint64_t v3 = (unsigned char *)*((void *)this + 5);
    }
    while (v2 != v3);
  }
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  unsigned int v5 = (unsigned char *)*((void *)this + 6);
  if ((unint64_t)v5 >= *((void *)this + 7)) {
    return 1;
  }
  *((_WORD *)this + 5868) = 0;
  *((_WORD *)this + 612bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((void *)this + 6) = v5 + 1;
  *unsigned int v5 = v4;
  return *((unsigned char *)this + 8) != 0;
}

uint64_t BlueFin::GlDbgSlogDecoder::ProcessByte(BlueFin::GlDbgSlogDecoder *this, int a2, char a3)
{
  char v4 = (char *)this + 10624;
  unsigned int v5 = (unsigned __int8 *)*((void *)this + 4);
  size_t v6 = v5 + 1;
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v5 + 1;
  uint64_t v7 = *v5;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = v8 + 1;
  if (v7 == 10 || v7 == 13 && *v6 != 10)
  {
    ++*((_DWORD *)this + 6);
    if (*((unsigned __int8 *)this + 81) <= 4u && !*((unsigned char *)this + 10625)) {
      *((unsigned char *)this + 9) = 0;
    }
  }
  uint64_t v9 = *((unsigned __int8 *)this + 9);
  if (v9 == 3)
  {
    if (v7 == 125)
    {
      if (!*((unsigned char *)this + 8)) {
        return v7;
      }
      *((unsigned char *)this + 8) = 0;
      *((unsigned char *)this + 76) = 1;
      if (!a2) {
        return v7;
      }
      goto LABEL_48;
    }
    if (v7 == 123)
    {
      if (*((unsigned char *)this + 8)) {
        return v7;
      }
      *((void *)this + 8) = v8;
      *((_DWORD *)this + 18) = *((_DWORD *)this + 6);
      *((unsigned char *)this + 8) = 1;
      *((unsigned char *)this + 76) = 0;
      *((unsigned char *)this + 86) = 0;
      if (!a2) {
        return v7;
      }
LABEL_48:
      if ((a3 & 1) == 0) {
        return v7;
      }
      goto LABEL_82;
    }
    if (!a2) {
      return v7;
    }
LABEL_82:
    uint64_t v42 = (unsigned char *)*((void *)this + 6);
    if ((unint64_t)v42 < *((void *)this + 7))
    {
      BOOL v43 = (char *)this + 2 * (v42 - (unsigned char *)this);
      *((_WORD *)v43 - 5612) = v8 - *((_DWORD *)this + 16);
      *((_WORD *)v43 - 5356) = *((_DWORD *)this + 6) - *((_DWORD *)this + 18);
      *((void *)this + 6) = v42 + 1;
      *uint64_t v42 = v7;
    }
    return v7;
  }
  unsigned int v10 = *((unsigned __int8 *)this + 81);
  if (v10 >= 5)
  {
    if (v10 - 5 < 2)
    {
      if ((v7 - 48) >= 0xA && (v7 - 65) > 5u)
      {
        *((unsigned char *)this + 81) = 0;
        *((unsigned char *)this + 8) = 0;
        return v7;
      }
      if (v7 <= 0x39) {
        __int16 v39 = -48;
      }
      else {
        __int16 v39 = -55;
      }
      __int16 v40 = v39 + v7;
      if (v10 == 5)
      {
        *((_WORD *)this + 41) = 16 * v40;
        if (!*((unsigned char *)this + 8))
        {
          *((void *)this + 8) = v8;
          *((_DWORD *)this + 18) = *((_DWORD *)this + 6);
          *((unsigned char *)this + 8) = 1;
          *((unsigned char *)this + 86) = 0;
          *((unsigned char *)this + 76) = 0;
        }
      }
      else
      {
        *((_WORD *)this + 41) |= v40;
      }
    }
    else if (v10 == 7)
    {
      *((unsigned char *)this + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7 - 65;
    }
    else if (v10 == 8)
    {
      *((unsigned char *)this + 85) = v7 - 65;
    }
    else if (v10 - *((unsigned __int16 *)this + 41) == 9)
    {
      *((unsigned char *)this + 81) = 0;
      *((unsigned char *)this + 86) = 1;
      *((unsigned char *)this + 8) = 0;
      if ((a2 & 1) == 0) {
        return v7;
      }
      goto LABEL_82;
    }
    *((unsigned char *)this + 81) = v10 + 1;
    if ((a2 & 1) == 0) {
      return v7;
    }
    goto LABEL_82;
  }
  uint64_t v11 = *((unsigned __int8 *)this + 10625);
  if (v11 < 4)
  {
    char v36 = 0;
    if (v7 == BlueFin::GlDbgSlogDecoder::m_aucEncPreamble[v9]) {
      char v37 = v9 + 1;
    }
    else {
      char v37 = 0;
    }
    *((unsigned char *)this + 9) = v37;
    if (v7 == BlueFin::GlDbgSlogDecoder::stHcAlmDecoder::m_aucEncPreamble[v10])
    {
      if (!*((unsigned char *)this + 80)) {
        goto LABEL_59;
      }
      char v36 = v10 + 1;
    }
    *((unsigned char *)this + 81) = v36;
LABEL_59:
    if (v7 == BlueFin::GlDbgSlogDecoder::stVersionLineDecoder::m_aucEncPreamble[v11])
    {
      if (*v4) {
        *((unsigned char *)this + 10625) = v11 + 1;
      }
    }
    else
    {
      *((unsigned char *)this + 10625) = 0;
    }
    return v7;
  }
  if (v7 == 10 || v7 == 13)
  {
    BOOL v13 = (unsigned __int8 *)this + 10629;
    uint64_t v14 = *((unsigned __int16 *)this + 5313);
    *((_WORD *)this + 5313) = v14 + 1;
    *((unsigned char *)this + v14 + 10629) = 0;
    if (strstr((char *)this + 10629, "GLL ver."))
    {
      int v15 = *v13;
      if (*v13)
      {
        do
        {
          if (v15 == 46) {
            break;
          }
          int v16 = *++v13;
          int v15 = v16;
        }
        while (v16);
      }
      int v17 = v13[2];
      int v18 = v13 + 2;
      if (v13[2])
      {
        int v18 = v13 + 2;
        do
        {
          if (v17 == 44) {
            break;
          }
          int v19 = *++v18;
          int v17 = v19;
        }
        while (v19);
      }
      *int v18 = 0;
      *((unsigned char *)this + 10888) = atol((const char *)v13 + 2);
      int v22 = v13[3];
      BOOL v21 = v13 + 3;
      int v20 = v22;
      if (v22)
      {
        do
        {
          if (v20 == 46) {
            break;
          }
          int v23 = *++v21;
          int v20 = v23;
        }
        while (v23);
      }
      *((unsigned char *)this + 10889) = atol((const char *)v21 + 1);
      int v26 = v21[2];
      int v25 = v21 + 2;
      int v24 = v26;
      if (v26)
      {
        do
        {
          if (v24 == 46) {
            break;
          }
          int v27 = *++v25;
          int v24 = v27;
        }
        while (v27);
      }
      *((unsigned char *)this + 10890) = atol((const char *)v25 + 1);
      int v30 = v25[2];
      int16x4_t v29 = v25 + 2;
      char v28 = v30;
      if (v30)
      {
        do
        {
          if ((v28 & 0xDF) == 0) {
            break;
          }
          int v31 = *++v29;
          char v28 = v31;
        }
        while (v31);
      }
      *((_DWORD *)this + 2723) = atol((const char *)v29 + 1);
      int v32 = v29[2];
      if (v29[2])
      {
        unsigned int v33 = v29 + 3;
        do
        {
          BOOL v34 = v32 == 43;
          if (v32 == 43) {
            break;
          }
          int v35 = *v33++;
          int v32 = v35;
        }
        while (v35);
      }
      else
      {
        BOOL v34 = 0;
      }
      *((unsigned char *)this + 10896) = v34;
      *int v18 = 44;
      int v46 = v18[1];
      int v45 = v18 + 1;
      int v44 = v46;
      char v47 = v45;
      if (v46)
      {
        char v47 = v45;
        do
        {
          if (v44 == 44) {
            break;
          }
          int v48 = *++v47;
          int v44 = v48;
        }
        while (v48);
      }
      *char v47 = 0;
      char v49 = *v45;
      if (*v45)
      {
        do
        {
          if ((v49 & 0xDF) == 0) {
            break;
          }
          int v50 = *++v45;
          char v49 = v50;
        }
        while (v50);
      }
      BOOL v51 = v45 + 1;
      if (v45[1] - 48 > 9)
      {
        __int16 v61 = *(_WORD *)v51;
        *((unsigned char *)this + 10902) = v45[3];
        *((_WORD *)this + 5450) = v61;
        int v64 = v45[2];
        char v63 = v45 + 2;
        char v62 = v64;
        if (v64)
        {
          do
          {
            if ((v62 & 0xDF) == 0) {
              break;
            }
            int v65 = *++v63;
            char v62 = v65;
          }
          while (v65);
        }
        *((unsigned char *)this + 10905) = atol(v63 + 1);
        int v68 = v63[2];
        uint64_t v67 = v63 + 2;
        char v66 = v68;
        if (v68)
        {
          do
          {
            if ((v66 & 0xDF) == 0) {
              break;
            }
            int v69 = *++v67;
            char v66 = v69;
          }
          while (v69);
        }
        *((_WORD *)this + 5449) = atol(v67 + 1);
      }
      else
      {
        *((_WORD *)this + 5449) = atol(v51);
        int v54 = v45[2];
        uint64_t v53 = v45 + 2;
        int v52 = v54;
        if (v54)
        {
          do
          {
            if (v52 == 47) {
              break;
            }
            int v55 = *++v53;
            int v52 = v55;
          }
          while (v55);
        }
        __int16 v56 = *(_WORD *)(v53 + 1);
        *((unsigned char *)this + 10902) = v53[3];
        *((_WORD *)this + 5450) = v56;
        int v59 = v53[2];
        char v58 = v53 + 2;
        int v57 = v59;
        if (v59)
        {
          do
          {
            if (v57 == 47) {
              break;
            }
            int v60 = *++v58;
            int v57 = v60;
          }
          while (v60);
        }
        *((unsigned char *)this + 10905) = atol(v58 + 1);
      }
      *char v47 = 44;
      int v72 = v47[1];
      BOOL v71 = v47 + 1;
      int v70 = v72;
      BOOL v73 = v71;
      if (v72)
      {
        BOOL v73 = v71;
        do
        {
          if (v70 == 44) {
            break;
          }
          int v74 = *++v73;
          int v70 = v74;
        }
        while (v74);
      }
      *BOOL v73 = 0;
      char v75 = *v71;
      if (*v71)
      {
        do
        {
          if ((v75 & 0xDF) == 0) {
            break;
          }
          int v76 = *++v71;
          char v75 = v76;
        }
        while (v76);
      }
      *((unsigned char *)this + 10906) = atol(v71 + 1);
      int v79 = v71[2];
      uint64_t v78 = v71 + 2;
      int v77 = v79;
      if (v79)
      {
        do
        {
          if (v77 == 58) {
            break;
          }
          int v80 = *++v78;
          int v77 = v80;
        }
        while (v80);
      }
      *((unsigned char *)this + 10907) = atol(v78 + 1);
      int v83 = v78[2];
      unint64_t v82 = v78 + 2;
      int v81 = v83;
      if (v83)
      {
        do
        {
          if (v81 == 58) {
            break;
          }
          int v84 = *++v82;
          int v81 = v84;
        }
        while (v84);
      }
      *((unsigned char *)this + 10908) = atol(v82 + 1);
      *BOOL v73 = 44;
      int v87 = v73[1];
      uint64_t v86 = v73 + 1;
      int v85 = v87;
      uint64_t v88 = v86;
      if (v87)
      {
        uint64_t v88 = v86;
        do
        {
          if (v85 == 44) {
            break;
          }
          int v89 = *++v88;
          int v85 = v89;
        }
        while (v89);
      }
      *uint64_t v88 = 0;
      int v90 = *v86;
      uint64_t v91 = (char *)v86;
      if (*v86)
      {
        char v92 = *v86;
        uint64_t v91 = (char *)v86;
        do
        {
          if ((v92 & 0xDF) == 0) {
            break;
          }
          int v93 = *++v91;
          char v92 = v93;
        }
        while (v93);
      }
      if (strstr(v91 + 1, "build_job_id"))
      {
        int v96 = v91[2];
        uint64_t v95 = (unsigned __int8 *)(v91 + 2);
        int v94 = v96;
        if (v96)
        {
          do
          {
            if (v94 == 58) {
              break;
            }
            int v97 = *++v95;
            int v94 = v97;
          }
          while (v97);
        }
        *((_DWORD *)this + 2728) = (unsigned __int16)atol((const char *)v95 + 1);
        *uint64_t v88 = 44;
        int v100 = v88[1];
        uint64_t v99 = v88 + 1;
        int v98 = v100;
        uint64_t v101 = v99;
        if (v100)
        {
          uint64_t v101 = v99;
          do
          {
            if (v98 == 44) {
              break;
            }
            int v102 = *++v101;
            int v98 = v102;
          }
          while (v102);
        }
        *uint64_t v101 = 0;
        int v90 = *v99;
        uint64_t v86 = v99;
      }
      if (v90)
      {
        char v103 = v90;
        uint64_t v104 = (const char *)v86;
        do
        {
          if ((v103 & 0xDF) == 0) {
            break;
          }
          int v105 = *(unsigned __int8 *)++v104;
          char v103 = v105;
        }
        while (v105);
        do
        {
          if (!v90) {
            break;
          }
          if (v90 == 58) {
            break;
          }
          int v106 = *++v86;
          int v90 = v106;
        }
        while (v106);
      }
      else
      {
        uint64_t v104 = (const char *)v86;
      }
      *uint64_t v86 = 0;
      strlcpy((char *)this + 10916, v104 + 1, 0x14uLL);
      *uint64_t v86 = 58;
      uint64_t v107 = (const char *)(v86 + 1);
      int v108 = v86[1];
      uint64_t v109 = v86 + 1;
      if (v86[1])
      {
        uint64_t v110 = v86 + 2;
        while ((v108 & 0xDF) != 0)
        {
          int v111 = *v110++;
          int v108 = v111;
          if (!v111)
          {
            uint64_t v109 = v110 - 1;
            goto LABEL_152;
          }
        }
        *(v110 - 1) = 0;
        strlcpy((char *)this + 10936, v107, 0x100uLL);
        if (v108 == 32)
        {
          *(v110 - 1) = 32;
          int v113 = *v110;
          if (*v110)
          {
            do
            {
              if (v113 == 40) {
                break;
              }
              int v114 = *++v110;
              int v113 = v114;
            }
            while (v114);
          }
          int v117 = v110[1];
          uint64_t v116 = (const char *)(v110 + 1);
          int v115 = v117;
          uint64_t v118 = (char *)v116;
          if (v117)
          {
            uint64_t v118 = (char *)v116;
            do
            {
              if (v115 == 41) {
                break;
              }
              int v119 = *++v118;
              int v115 = v119;
            }
            while (v119);
          }
          *uint64_t v118 = 0;
          strlcpy((char *)this + 11192, v116, 0x20uLL);
          *uint64_t v118 = 41;
        }
      }
      else
      {
LABEL_152:
        *uint64_t v109 = 0;
        strlcpy((char *)this + 10936, v107, 0x100uLL);
      }
      void v4[4] = 1;
    }
    v4[1] = 0;
    *((_WORD *)v4 + 1) = 0;
  }
  else
  {
    uint64_t v41 = *((unsigned __int16 *)this + 5313);
    *((_WORD *)this + 5313) = v41 + 1;
    *((unsigned char *)this + v41 + 10629) = v7;
    if ((unsigned __int16)(v41 + 1) >= 0x100u)
    {
      DeviceFaultNotify("gldebug_slogdecoder.cpp", 238, "ProcessByte", (char)"m_otVersionLineDecoder.m_usLineSize < (GlIntU16)sizeof(m_otVersionLineDecoder.m_acVersionLine)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gldebug_slogdecoder.cpp", 238, "m_otVersionLineDecoder.m_usLineSize < (GlIntU16)sizeof(m_otVersionLineDecoder.m_acVersionLine)");
    }
  }
  return v7;
}

uint64_t BlueFin::GlDbgSlogDecoder::DecodeRecord(BlueFin::GlDbgSlogDecoder *this, char a2)
{
  if (!*((unsigned char *)this + 8)) {
    return 1;
  }
  uint64_t v4 = 1;
  while ((a2 & 1) != 0 || *((void *)this + 6) < *((void *)this + 7))
  {
    unsigned int v5 = (unsigned char *)*((void *)this + 4);
    size_t v6 = (unsigned char *)*((void *)this + 5);
    if (v5 == v6 || v5 == v6 - 1 && *v5 == 13) {
      break;
    }
    BlueFin::GlDbgSlogDecoder::ProcessByte(this, 1, 1);
    if (!*((unsigned char *)this + 8)) {
      return v4;
    }
  }
  return 0;
}

BOOL BlueFin::GlDbgSlogDecoder::DecodeAlmEntry(BlueFin::GlDbgSlogDecoder *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  qmemcpy(__s1, "@^@am", sizeof(__s1));
  uint64_t v2 = (char *)this + 11480;
  size_t v3 = (unsigned __int16)(*((_WORD *)this + 24) - ((_WORD)this + 11480));
  if (v3 <= 0xFA) {
    size_t v4 = 251 - (unsigned __int16)(*((_WORD *)this + 24) - ((_WORD)this + 11480));
  }
  else {
    size_t v4 = 0;
  }
  bzero(&v8[(unsigned __int16)(*((_WORD *)this + 24) - ((_WORD)this + 11480))], v4);
  memcpy(v8, v2, v3);
  unsigned int v5 = BlueFin::GlUtlGlSysLogEntryCodec::DecodeLine((BlueFin::GlDbgSlogDecoder *)((char *)this + 88), __s1, (const char *)*((unsigned int *)this + 6));
  *((void *)this + 1327) = v5;
  return v5 != 0;
}

void BlueFin::GlMeSrdAcqMgr::~GlMeSrdAcqMgr(BlueFin::GlMeSrdAcqMgr *this)
{
  if (*((unsigned char *)this + 104))
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 41, "~GlMeSrdAcqMgr", (char)"!m_bAllocated");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 41, "!m_bAllocated");
  }
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdAcqMgr::~GlMeSrdAcqMgr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdAcqMgr::FreeEswResources(uint64_t this)
{
  if (*(unsigned char *)(this + 104))
  {
    uint64_t v1 = this;
    *(unsigned char *)(this + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    uint64_t v2 = *(void *)(this + 8);
    *(_WORD *)(v2 + 24526) = 0;
    bzero(*(void **)(v2 + 22776), ((4 * *(unsigned __int8 *)(v2 + 22784) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 22824), ((4 * *(unsigned __int8 *)(v2 + 22832) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 22872), ((4 * *(unsigned __int8 *)(v2 + 22880) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 23016), ((4 * *(unsigned __int8 *)(v2 + 23024) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 23064), ((4 * *(unsigned __int8 *)(v2 + 23072) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 23112), ((4 * *(unsigned __int8 *)(v2 + 23120) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 22968), ((4 * *(unsigned __int8 *)(v2 + 22976) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 22920), ((4 * *(unsigned __int8 *)(v2 + 22928) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v2 + 23160), ((4 * *(unsigned __int8 *)(v2 + 23168) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    BlueFin::GlMeSrdAcqMgrSm::UpdateSvidToSearchForMgrs((BlueFin::GlMeSrdAcqMgrSm *)v2);
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v1 + 8);
    unsigned int v5 = (unsigned int *)(v4 + 22768);
    uint64_t v6 = v4 + 22688;
    do
    {
      (*(void (**)(void, void))(**(void **)(v6 + v3) + 56))(*(void *)(v6 + v3), *v5);
      v3 += 8;
    }
    while (v3 != 80);
    BlueFin::GlMeSrdAcqMgrSm::KillAndReleaseSatInPostSearch(*(void *)(v1 + 8), (BlueFin::GlSetBase *)(*(void *)(v1 + 8) + 13920));
    uint64_t v7 = *(void *)(v1 + 8);
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)(v7 + 18352), (uint64_t)v13);
    BlueFin::GlMeSrdAcqMgrSm::KillAndReleaseSatInTrack(v7, (BlueFin::GlSetBase *)v13);
    uint64_t v8 = *(void *)(v1 + 8);
    LODWORD(v7) = *(_DWORD *)(v8 + 22768);
    uint64_t v9 = v8 + 3520;
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v8 + 48) + 80))(*(void *)(v8 + 48));
    BlueFin::GlMeSrdSatMgr::ProcessPending(v9, v7, v10, 1);
    uint64_t v11 = *(void *)(v1 + 8);
    int v12 = (BlueFin::GlMeSrdSatMgr *)(v11 + 3520);
    LODWORD(v9) = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v11 + 3576));
    LODWORD(v12) = BlueFin::GlMeSrdSatMgr::NumSatInKillProcess(v12) + v9;
    if (v12 != (*(unsigned int (**)(void))(**(void **)(*(void *)(v1 + 8) + 64) + 384))())
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 91, "FreeEswResources", (char)"(m_rAcqMgrSm.m_otSatMgr.NumSatsAvailable() + m_rAcqMgrSm.m_otSatMgr.NumSatInKillProcess()) == m_rAcqMgrSm.m_rAsicConfigIfc.GetMaxNumSats()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 91, "(m_rAcqMgrSm.m_otSatMgr.NumSatsAvailable() + m_rAcqMgrSm.m_otSatMgr.NumSatInKillProcess()) == m_rAcqMgrSm.m_rAsicConfigIfc.GetMaxNumSats()");
    }
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v1 + 8) + 48) + 176))(*(void *)(*(void *)(v1 + 8) + 48), *(void *)(v1 + 8) + 224);
  }
  return this;
}

BOOL BlueFin::GlSvIdArray::IsFull(BlueFin::GlSvIdArray *this)
{
  return *((unsigned __int8 *)this + 239) == 255;
}

void *BlueFin::GlSvIdArray::Add(uint64_t a1, unsigned __int8 *a2)
{
  return BlueFin::GlArray::Add((BlueFin::GlArray *)(a1 + 200), *a2);
}

unsigned __int8 *BlueFin::GlMeSrdAcqMgr::GlonassSyncLost(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 - 66 <= 0xFFFFFFF1)
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 444, "GlonassSyncLost", (char)"IS_GLONASS_SVID(*rotSvId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 444, "IS_GLONASS_SVID(*rotSvId)");
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v15, 0x10u, (const void **)(*(void *)(a1 + 8) + 18352));
  unsigned __int8 v8 = v14;
  memcpy(v12, __src, 4 * v14);
  unsigned __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  int v11 = v12[0];
  uint64_t result = BlueFin::GlSetIterator::operator++(&v8);
  if (v9 != v8)
  {
    while (1)
    {
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v7, v10);
      unsigned int v5 = v7[0];
      BlueFin::GlMeSrdSatMgr::GetSvid((void *)(*(void *)(a1 + 8) + 3520), v7[0], &v6);
      if (*a2 == v6
        && BlueFin::GlMeSrdSatTrackMgr::IsPostFrame((BlueFin::GlMeSrdSatTrackMgr *)(*(void *)(a1 + 8) + 14352), (const BlueFin::GlSatCarrId *)v7))
      {
        break;
      }
      uint64_t result = BlueFin::GlSetIterator::operator++(&v8);
      if (v9 == v8) {
        return result;
      }
    }
    return (unsigned __int8 *)BlueFin::GlMeSrdSatStatusListener::RemoveFromTrackEngine((BlueFin::GlMeSrdSatStatusListener *)(*(void *)(a1 + 8) + 200), v5);
  }
  return result;
}

BOOL BlueFin::GlMeSrdSatStatusListener::RemoveFromTrackEngine(BlueFin::GlMeSrdSatStatusListener *this, unsigned int a2)
{
  BOOL result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), a2);
  if (!result)
  {
    unsigned int v5 = (void *)*((void *)this + 1);
    uint64_t v6 = a2 >> 5;
    uint64_t v7 = 1 << (a2 & 0x1F);
    if ((v7 & *(_DWORD *)(v5[455] + 4 * v6)) == 0
      && (v7 & *(_DWORD *)(v5[451] + 4 * v6)) == 0)
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 785, "RemoveFromTrackEngine", (char)"GlMeSrdSatStatusListener::RemoveFromTrackEngine SatId %u not allocated\n");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 785, "GlMeSrdSatStatusListener::RemoveFromTrackEngine SatId %u not allocated\n");
    }
    *(_DWORD *)(v5[3067] + 4 * v6) |= 1 << (a2 & 0x1F);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAcqMgr::SetDutyCycle(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 2461bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAcqMgr::IsFactoryTest(BlueFin::GlMeSrdAcqMgr *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 80) + 40))();
}

uint64_t BlueFin::GlMeSrdSvMgrRpcSatEvt::gll_satevt_rpc_sm_sat_id_list_report(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    uint64_t v17 = a2;
    do
    {
      uint64_t v19 = v4;
      uint64_t v5 = a3 + 16 * v4;
      int v7 = *(unsigned __int8 *)(v5 + 1);
      uint64_t v6 = (unsigned __int8 *)(v5 + 1);
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v9 = *(unsigned __int8 *)(a3 + 16 * v4);
        unsigned __int16 v10 = (void *)(a3 + 16 * v4 + 8);
        do
        {
          unint64_t v11 = *(unsigned __int8 *)(*v10 + v8);
          int v12 = *(void **)(v3 + 8);
          unint64_t v13 = v11 >> 5;
          uint64_t v14 = 1 << (v11 & 0x1F);
          for (uint64_t i = 2836; i != 2846; ++i)
          {
            int v16 = (void *)v12[i];
            if ((v14 & *(_DWORD *)(v16[16] + 4 * v13)) != 0)
            {
              BOOL result = (*(uint64_t (**)(void *, void, uint64_t))(*v16 + 32))(v16, *(unsigned __int8 *)(*v10 + v8), v9);
              goto LABEL_14;
            }
          }
          if (v9 == 8
            && ((BOOL result = BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(v12 + 1794), *(unsigned __int8 *)(*v10 + v8)), v12 = *(void **)(v3 + 8), (result & 1) != 0)|| (v14 & *(_DWORD *)(v12[1740] + 4 * v13)) != 0))
          {
            *(_DWORD *)(v12[3067] + 4 * v13) |= 1 << (v11 & 0x1F);
          }
          else
          {
            BOOL result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(v12 + 440), v11);
            if ((result & 1) == 0)
            {
              DeviceFaultNotify("glmesrd_acq_mgr.cpp", 634, "gll_satevt_rpc_sm_sat_id_list_report", (char)"0");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 634, "0");
            }
          }
LABEL_14:
          ++v8;
        }
        while (v8 < *v6);
      }
      uint64_t v4 = v19 + 1;
    }
    while (v19 + 1 != v17);
  }
  return result;
}

void BlueFin::GlMeSrdSatStatusListener::SnapToTap(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlMeDSPMeas *a2, const BlueFin::GlMeSrdDspMeasAux *a3)
{
  BlueFin::GlMeDSPMeas::GlMeDSPMeas((BlueFin::GlMeDSPMeas *)v17, a2);
  uint64_t TrkRslts = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
  double v18 = *(double *)(TrkRslts + 80) + v18;
  BlueFin::GlMeSrdAidingMgr::UpdateAidingFromEarlyTap((BlueFin::GlMeSrdAidingMgr *)(*((void *)this + 1) + 240), (uint64_t)v17, *(void *)(*((void *)this + 1) + 48));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 48) + 80))(*(void *)(*((void *)this + 1) + 48));
  uint64_t v12 = 0;
  v13[0] = 0;
  *(_DWORD *)((char *)v13 + 7) = 0;
  uint64_t v14 = v7;
  int v15 = 0;
  __int16 v16 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
  if (!(*(unsigned int (**)(void))(**(void **)(*((void *)this + 1) + 64) + 352))())
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 940, "SnapToTap", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 940, "false");
  }
  uint64_t v8 = *((unsigned __int8 *)a2 + 112);
  uint64_t EswSignalIndex = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(*((_DWORD *)a2 + 26));
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 96))(v11, &v12, v8, EswSignalIndex, 59);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v12);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v12);
}

void sub_263A6DD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdSatStatusListener::SnapToGridSrch(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlMeDSPMeas *a2, const BlueFin::GlMeSrdDspMeasAux *a3)
{
  BlueFin::GlMeDSPMeas::GlMeDSPMeas((BlueFin::GlMeDSPMeas *)v17, a2);
  uint64_t TrkRslts = BlueFin::GlMeSrdDspMeasAux::GetTrkRslts(a3);
  double v18 = *(double *)(TrkRslts + 104) + v18;
  BlueFin::GlMeSrdAidingMgr::UpdateAidingFromEarlyTap((BlueFin::GlMeSrdAidingMgr *)(*((void *)this + 1) + 240), (uint64_t)v17, *(void *)(*((void *)this + 1) + 48));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 48) + 80))(*(void *)(*((void *)this + 1) + 48));
  uint64_t v12 = 0;
  v13[0] = 0;
  *(_DWORD *)((char *)v13 + 7) = 0;
  uint64_t v14 = v7;
  int v15 = 0;
  __int16 v16 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
  if (!(*(unsigned int (**)(void))(**(void **)(*((void *)this + 1) + 64) + 352))())
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 985, "SnapToGridSrch", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 985, "false");
  }
  uint64_t v8 = *((unsigned __int8 *)a2 + 112);
  uint64_t EswSignalIndex = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(*((_DWORD *)a2 + 26));
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 96))(v11, &v12, v8, EswSignalIndex, 59);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v12);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v12);
}

void sub_263A6DFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlMeSrdSatStatusListener::IsSatInKillProcess(BlueFin::GlMeSrdSatStatusListener *this, unsigned int a2)
{
  return BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), a2);
}

BOOL BlueFin::GlMeSrdSatStatusListener::SearchFalseAlarm(BlueFin::GlMeSrdSatStatusListener *this, unsigned int a2)
{
  BOOL result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), a2);
  if (!result)
  {
    uint64_t v5 = (void *)*((void *)this + 1);
    uint64_t v6 = a2 >> 5;
    uint64_t v7 = 1 << (a2 & 0x1F);
    if ((v7 & *(_DWORD *)(v5[455] + 4 * v6)) == 0
      && (v7 & *(_DWORD *)(v5[451] + 4 * v6)) == 0)
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 806, "SearchFalseAlarm", (char)"GlMeSrdSatStatusListener::SearchFalseAlarm Satid %u not allocated\n");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 806, "GlMeSrdSatStatusListener::SearchFalseAlarm Satid %u not allocated\n");
    }
    *(_DWORD *)(v5[3067] + 4 * v6) |= 1 << (a2 & 0x1F);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatStatusListener::TrackInvalid(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlSatCarrId *a2, int a3, int a4)
{
  unint64_t v8 = *(unsigned __int8 *)a2;
  uint64_t result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), *(unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    uint64_t v10 = (void *)*((void *)this + 1);
    uint64_t v11 = 1 << (v8 & 0x1F);
    if ((v11 & *(_DWORD *)(v10[455] + 4 * (v8 >> 5))) == 0
      && (v11 & *(_DWORD *)(v10[451] + 4 * (v8 >> 5))) == 0
      || !BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(v10 + 1794), v8))
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 831, "TrackInvalid", (char)"GlMeSrdSatStatusListener::TrackInvalid Satid %u not in trackmgr\n");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 831, "GlMeSrdSatStatusListener::TrackInvalid Satid %u not in trackmgr\n");
    }
    uint64_t v12 = (void *)(*((void *)this + 1) + 14352);
    return (uint64_t)BlueFin::GlMeSrdSatTrackMgr::TrackInvalid(v12, a2, a3, a4);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatStatusListener::RequestBitAlignment(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlSatCarrId *a2)
{
  unint64_t v4 = *(unsigned __int8 *)a2;
  uint64_t result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), *(unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    uint64_t v6 = (void *)*((void *)this + 1);
    uint64_t v7 = 1 << (v4 & 0x1F);
    if ((v7 & *(_DWORD *)(v6[455] + 4 * (v4 >> 5))) == 0
      && (v7 & *(_DWORD *)(v6[451] + 4 * (v4 >> 5))) == 0
      || !BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(v6 + 1794), v4))
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 854, "RequestBitAlignment", (char)"GlMeSrdSatStatusListener::RequestBitAlignment WARNING: Satid %u not in trackmgr\n");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 854, "GlMeSrdSatStatusListener::RequestBitAlignment WARNING: Satid %u not in trackmgr\n");
    }
    uint64_t v8 = *((void *)this + 1) + 14352;
    return BlueFin::GlMeSrdSatTrackMgr::RequestBitAlignment(v8, a2);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatStatusListener::SnapToAidingInDutyCycle(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlSatCarrId *a2)
{
  unint64_t v4 = *(unsigned __int8 *)a2;
  uint64_t result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), *(unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    uint64_t v6 = (void *)*((void *)this + 1);
    uint64_t v7 = 1 << (v4 & 0x1F);
    if ((v7 & *(_DWORD *)(v6[455] + 4 * (v4 >> 5))) == 0
      && (v7 & *(_DWORD *)(v6[451] + 4 * (v4 >> 5))) == 0
      || !BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(v6 + 1794), v4))
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 875, "SnapToAidingInDutyCycle", (char)"GlMeSrdSatStatusListener::SnapToAidingInDutyCycle WARNING: Satid %u not in trackmgr\n");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 875, "GlMeSrdSatStatusListener::SnapToAidingInDutyCycle WARNING: Satid %u not in trackmgr\n");
    }
    uint64_t v8 = *((void *)this + 1) + 14352;
    return BlueFin::GlMeSrdSatTrackMgr::SnapToAidingInDutyCycle(v8, a2);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatStatusListener::MarkSuspectBitAlignment(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlSatCarrId *a2)
{
  unint64_t v4 = *(unsigned __int8 *)a2;
  uint64_t result = BlueFin::GlMeSrdSatMgr::IsSatInKillProcess((BlueFin::GlMeSrdSatMgr *)(*((void *)this + 1) + 3520), *(unsigned __int8 *)a2);
  if ((result & 1) == 0)
  {
    uint64_t v6 = (void *)*((void *)this + 1);
    uint64_t v7 = 1 << (v4 & 0x1F);
    if ((v7 & *(_DWORD *)(v6[455] + 4 * (v4 >> 5))) == 0
      && (v7 & *(_DWORD *)(v6[451] + 4 * (v4 >> 5))) == 0
      || !BlueFin::GlMeSrdSatTrackMgr::HasSat((BlueFin::GlMeSrdSatTrackMgr *)(v6 + 1794), v4))
    {
      DeviceFaultNotify("glmesrd_acq_mgr.cpp", 897, "MarkSuspectBitAlignment", (char)"GlMeSrdSatStatusListener::RequestBitAlignmentCrossCheck WARNING: Satid %u not in trackmgr\n");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 897, "GlMeSrdSatStatusListener::RequestBitAlignmentCrossCheck WARNING: Satid %u not in trackmgr\n");
    }
    uint64_t v8 = *((void *)this + 1) + 14352;
    return BlueFin::GlMeSrdSatTrackMgr::RequestBitAlignmentCrossCheck(v8, a2);
  }
  return result;
}

double BlueFin::GlMeSrdSatStatusListener::StartManualDirectToTrack(BlueFin::GlMeSrdSatStatusListener *this, const BlueFin::GlMeDSPMeas *a2)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 100);
  BlueFin::GlMeSrdAidingMgr::UpdateAidingFromDspMeas((BlueFin::GlMeSrdAidingMgr *)(*((void *)this + 1) + 240), (uint64_t)a2, *(void *)(*((void *)this + 1) + 48));
  int v32 = &v34;
  char v33 = 8;
  long long v34 = 0u;
  long long v35 = 0u;
  int v4 = v3;
  *(_DWORD *)((char *)&v34 + ((v3 >> 3) & 0x1C)) |= 1 << v3;
  BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(*((void *)this + 1) + 13296, 25, 46, 0x3Bu, 0x3Cu, 0x47u, 0xFAu, 84, 0x3Bu, 1);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (BlueFin::GlMeSrdSearchMgrBase *)(v5 + 13296);
  uint64_t v7 = v5 + 13552;
  BlueFin::GlSetBase::operator=(v5 + 13552, (uint64_t)&v32);
  *(_OWORD *)(v7 + 12) = v34;
  *(_OWORD *)(v7 + 28) = v35;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v6, (BlueFin::GlSvIdSet *)v7);
  BlueFin::GlMeSrdSearchMgr::ProcessPending((BlueFin::GlMeSrdSearchMgr *)(*((void *)this + 1) + 13296));
  uint64_t v8 = *((void *)this + 1);
  LODWORD(v6) = *(_DWORD *)(v8 + 22768);
  uint64_t v9 = v8 + 3520;
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v8 + 48) + 80))(*(void *)(v8 + 48));
  BlueFin::GlMeSrdSatMgr::ProcessPending(v9, (int)v6, v10, 0);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v31, 4u, (const void **)(*((void *)this + 1) + 13424));
  unsigned int v11 = 0;
  uint64_t v12 = (char *)__src + 4 * v30 - 4;
  unint64_t v13 = v12;
  do
  {
    if (*v13)
    {
      unsigned int v14 = *v13 - (((*v13 >> 1) & 0x5B6DB6DB) + ((*v13 >> 2) & 0x9249249));
      unsigned int v11 = ((v14 + (v14 >> 3)) & 0xC71C71C7) + v11 - 63 * (((v14 + (v14 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v13;
  }
  while (v13 >= __src);
  if ((v11 & 0xFFFE) != 0)
  {
    DeviceFaultNotify("glmesrd_acq_mgr.cpp", 1012, "StartManualDirectToTrack", (char)"otAllocatedSats.Cnt() <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr.cpp", 1012, "otAllocatedSats.Cnt() <= 1");
  }
  unsigned int v15 = 0;
  do
  {
    if (*v12)
    {
      unsigned int v16 = *v12 - (((*v12 >> 1) & 0x5B6DB6DB) + ((*v12 >> 2) & 0x9249249));
      unsigned int v15 = ((v16 + (v16 >> 3)) & 0xC71C71C7) + v15 - 63 * (((v16 + (v16 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v12;
  }
  while (v12 >= __src);
  if ((unsigned __int16)v15 == 1)
  {
    LODWORD(v25) = v30;
    memcpy(&v26, __src, 4 * v30);
    HIDWORD(v25) = v26;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v25);
    unint64_t v17 = WORD1(v25);
    uint64_t v18 = BYTE2(v25);
    BlueFin::GlMeSrdSearchMgrBase::ReleaseSatUnaltered((BlueFin::GlMeSrdSearchMgrBase *)(*((void *)this + 1) + 13296), BYTE2(v25));
    uint64_t v19 = *((void *)this + 1);
    int v20 = *(_DWORD *)(v19 + 13368);
    *(_DWORD *)(*(void *)(v19 + 13920) + ((v17 >> 3) & 0x1C)) |= 1 << v17;
    *(_DWORD *)(v19 + 13920 + 4 * v17 + 32) = v20;
    BlueFin::GlMeSrdAcqMgrSm::MoveSatFromSSE2STE((BlueFin::GlMeSrdAcqMgrSm *)v19, v18);
  }
  else
  {
    GlCustomLog(12, "GlMeSrdSatStatusListener::StartManualDirectToTrack SvId %d Failed - SAT not available\n", v4);
  }
  int v25 = &v27;
  LOBYTE(v26) = 8;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v21 = *((void *)this + 1);
  int v22 = (BlueFin::GlMeSrdSearchMgrBase *)(v21 + 13296);
  uint64_t v23 = v21 + 13552;
  BlueFin::GlSetBase::operator=(v21 + 13552, (uint64_t)&v25);
  *(_OWORD *)(v23 + 12) = v27;
  *(_OWORD *)(v23 + 28) = v28;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v22, (BlueFin::GlSvIdSet *)v23);
  return BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(*((void *)this + 1) + 13296, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
}

void BlueFin::GlMeSrdSatStatusListener::~GlMeSrdSatStatusListener(BlueFin::GlMeSrdSatStatusListener *this)
{
}

void BlueFin::GlMeSrdSvMgrRpcSatEvt::~GlMeSrdSvMgrRpcSatEvt(BlueFin::GlMeSrdSvMgrRpcSatEvt *this)
{
}

void BlueFin::GlSvIdArray::~GlSvIdArray(BlueFin::GlSvIdArray *this)
{
}

uint64_t BlueFin::GlSvIdArray::Get(uint64_t a1, unsigned __int8 *a2)
{
  return BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 200), *a2);
}

uint64_t BlueFin::GlSvIdArray::Remove(uint64_t a1, unsigned __int8 *a2)
{
  return BlueFin::GlArray::Remove((BlueFin::GlArray *)(a1 + 200), *a2);
}

BOOL BlueFin::GlSvIdArray::Has(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  BlueFin::GlArray::EnsureValidHandle(a1 + 200, v3);
  return *(unsigned __int8 *)(*(void *)(a1 + 216) + v3 - *(unsigned __int8 *)(a1 + 236)) != 255;
}

BOOL BlueFin::GlSvIdArray::Missing(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  BlueFin::GlArray::EnsureValidHandle(a1 + 200, v3);
  return *(unsigned __int8 *)(*(void *)(a1 + 216) + v3 - *(unsigned __int8 *)(a1 + 236)) == 255;
}

BOOL BlueFin::GlSvIdArray::IsEmpty(BlueFin::GlSvIdArray *this)
{
  return *((unsigned __int8 *)this + 239) + 1 == *((unsigned __int8 *)this + 238);
}

uint64_t BlueFin::GlSvIdArray::Clear(BlueFin::GlSvIdArray *this)
{
  return BlueFin::GlArray::Clear((uint64_t)this + 200);
}

unint64_t BlueFin::GlMeSrdRotationListener::OnRotationProgrammingDone(BlueFin::GlMeSrdRotationListener *this, const BlueFin::GlMeSrdSearchMgrBase *a2)
{
  int v2 = *((_DWORD *)a2 + 18);
  v6[0] = 68;
  v6[1] = v2;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 32);
  unint64_t result = *(void *)(v3 + 8);
  *(void *)(v3 + 32) = result;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(result, v3, v6, &v7)) {
      unint64_t result = v7;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(v3 + 32))(v3, v6);
    }
    *(void *)(v3 + 32) = result;
  }
  while (result);
  *(void *)(v3 + 32) = v4;
  return result;
}

unint64_t BlueFin::GlMeSrdRotationListener::OnRotationComplete(BlueFin::GlMeSrdRotationListener *this, const BlueFin::GlMeSrdSearchMgrBase *a2)
{
  int v2 = *((_DWORD *)a2 + 18);
  v6[0] = 69;
  v6[1] = v2;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 32);
  unint64_t result = *(void *)(v3 + 8);
  *(void *)(v3 + 32) = result;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(result, v3, v6, &v7)) {
      unint64_t result = v7;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(v3 + 32))(v3, v6);
    }
    *(void *)(v3 + 32) = result;
  }
  while (result);
  *(void *)(v3 + 32) = v4;
  return result;
}

double BlueFin::GlSvIdSet::operator&(uint64_t a1, const void **a2, int **a3)
{
  uint64_t v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a1, (unsigned int *)(a1 + 12), 8u, a2);
  unint64_t v7 = &v9;
  char v8 = 8;
  long long v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v5, (int **)&v7, a3);
  BlueFin::GlSetBase::operator=(a1, (uint64_t)&v7);
  *(_OWORD *)(a1 + 12) = v9;
  double result = v10[0];
  *(_OWORD *)(a1 + 28) = *(_OWORD *)v10;
  return result;
}

double BlueFin::GlSvIdSet::operator|(uint64_t a1, const void **a2, int **a3)
{
  uint64_t v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a1, (unsigned int *)(a1 + 12), 8u, a2);
  unint64_t v7 = &v9;
  char v8 = 8;
  long long v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v5, (int **)&v7, a3);
  BlueFin::GlSetBase::operator=(a1, (uint64_t)&v7);
  *(_OWORD *)(a1 + 12) = v9;
  double result = v10[0];
  *(_OWORD *)(a1 + 28) = *(_OWORD *)v10;
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAcqMgrSm::autonomous(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 3) {
    return 0;
  }
  if (v2 != 2) {
    return BlueFin::GlMeSrdAcqMgrSm::first_fix;
  }
  double result = 0;
  a1 += 10440;
  *a1 = 6;
  a1[480] = 2;
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::autonomous_6000(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 > 0x40)
  {
    if (v3 != 65 && v3 != 67) {
      return BlueFin::GlMeSrdAcqMgrSm::autonomous;
    }
    *((unsigned char *)this + 24612) = BlueFin::GlMeMeasSelfAidFilter::m_IsSelfAidOn;
    BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates(this);
  }
  else if (v3 == 2)
  {
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12048, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
    v5.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 10128, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v5)) {
      int v6 = 250;
    }
    else {
      int v6 = 84;
    }
    v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 10608, 93, 94, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v6, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v7)) {
      int v8 = 250;
    }
    else {
      int v8 = 84;
    }
    v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12360, 93, 94, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v8, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v9)) {
      int v10 = 250;
    }
    else {
      int v10 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12672, 93, 94, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v10, 0xFAu, 1);
  }
  else if (v3 != 3)
  {
    return BlueFin::GlMeSrdAcqMgrSm::autonomous;
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::autonomous_2000(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 <= 0x40)
  {
    if (v3 == 2)
    {
      v4.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12048, 22, 45, 0x36u, 0x44u, 0x4Cu, 0xFAu, 84, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v4)) {
        int v5 = 88;
      }
      else {
        int v5 = 84;
      }
      v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 10128, 5, 27, 0xFAu, 0xFAu, 0xFAu, 0x2Fu, v5, 0x55u, 1);
      if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v6)) {
        int v7 = 250;
      }
      else {
        int v7 = 84;
      }
      v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 10608, 4, 26, 0x33u, 0x3Du, 0x48u, 0xFAu, v7, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v8)) {
        int v9 = 89;
      }
      else {
        int v9 = 84;
      }
      v10.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12360, 2, 34, 0x37u, 0x3Du, 0x48u, 0xFAu, v9, 0x56u, 1);
      if ((*(unsigned int (**)(__n128))(**((void **)this + 8) + 1200))(v10)) {
        int v11 = 89;
      }
      else {
        int v11 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12672, 2, 34, 0x37u, 0x3Du, 0x48u, 0xFAu, v11, 0x56u, 1);
    }
    else if (v3 != 3)
    {
      return BlueFin::GlMeSrdAcqMgrSm::autonomous;
    }
    return 0;
  }
  if (v3 != 65 && v3 != 67) {
    return BlueFin::GlMeSrdAcqMgrSm::autonomous;
  }
  if (*((unsigned char *)this + 24865))
  {
    if (!*((_DWORD *)this + 6142)) {
      BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates(this);
    }
    return 0;
  }
  double result = 0;
  *((unsigned char *)this + 24612) = BlueFin::GlMeMeasSelfAidFilter::m_IsSelfAidOn;
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::far_start_positionless_300(uint64_t a1, unsigned __int8 *a2))(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24667);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::autonomous;
    if (v3 == 2)
    {
      *int v2 = 1;
      *(unsigned char *)(a1 + 10920) = 2;
      *(unsigned char *)(a1 + 10440) = 6;
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
        int v7 = 250;
      }
      else {
        int v7 = 84;
      }
      v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v8)) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 13, 38, 0x32u, 0x3Fu, 0x49u, 0xFAu, v9, 0x60u, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::far_start_positionless_100(uint64_t a1, unsigned __int8 *a2))(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24667);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::autonomous;
    if (v3 == 2)
    {
      *int v2 = 1;
      *(unsigned char *)(a1 + 10920) = 2;
      *(unsigned char *)(a1 + 10440) = 6;
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
        int v7 = 250;
      }
      else {
        int v7 = 84;
      }
      v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v8)) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 17, 42, 0x32u, 0x3Fu, 0x49u, 0xFAu, v9, 0x5Fu, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_300_bit(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24667);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::assisted;
    if (v3 == 2)
    {
      *int v2 = 1;
      *(unsigned char *)(a1 + 10920) = 0;
      *(unsigned char *)(a1 + 10440) = 5;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v6 = 90;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 18, 43, 0x38u, 0x42u, 0x4Bu, 0xFAu, v6, 0x61u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 19, 44, 0x35u, 0x43u, 0x4Bu, 0xFAu, v8, 0x61u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v9)) {
        int v10 = 90;
      }
      else {
        int v10 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 13, 38, 0x32u, 0x3Fu, 0x49u, 0xFAu, v10, 0x60u, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_300(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24667);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::assisted;
    if (v3 == 2)
    {
      *int v2 = 1;
      *(unsigned char *)(a1 + 10920) = 0;
      *(unsigned char *)(a1 + 10440) = 5;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v6 = 90;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 18, 43, 0x38u, 0x42u, 0x4Bu, 0xFAu, v6, 0x61u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 18, 43, 0x38u, 0x42u, 0x4Bu, 0xFAu, v8, 0x61u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v9)) {
        int v10 = 90;
      }
      else {
        int v10 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 13, 38, 0x32u, 0x3Eu, 0x49u, 0xFAu, v10, 0x60u, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_100_bit(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24667);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::assisted;
    if (v3 == 2)
    {
      *int v2 = 1;
      *(unsigned char *)(a1 + 10920) = 0;
      *(unsigned char *)(a1 + 10440) = 5;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v6 = 90;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 18, 43, 0x38u, 0x42u, 0x4Cu, 0xFAu, v6, 0x57u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 19, 44, 0x35u, 0x43u, 0x4Cu, 0xFAu, v8, 0x57u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v9)) {
        int v10 = 90;
      }
      else {
        int v10 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 17, 42, 0x38u, 0x3Fu, 0x49u, 0xFAu, v10, 0x5Fu, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::far_start_assisted_100(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24667);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::assisted;
    if (v3 == 2)
    {
      *int v2 = 1;
      *(unsigned char *)(a1 + 10920) = 0;
      *(unsigned char *)(a1 + 10440) = 5;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v6 = 90;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 18, 43, 0x38u, 0x42u, 0x4Bu, 0xFAu, v6, 0x57u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 18, 43, 0x38u, 0x42u, 0x4Bu, 0xFAu, v8, 0x57u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v9)) {
        int v10 = 90;
      }
      else {
        int v10 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 17, 42, 0x32u, 0x3Fu, 0x49u, 0xFAu, v10, 0x5Fu, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_300_fta(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::assisted;
    }
    uint64_t v4 = a1 + 10128;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(v4, 5, 31, 0x32u, 0x3Eu, 0x49u, 0x2Fu, v5, 0x60u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Eu, 0x49u, 0xFAu, v7, 0xFAu, 1);
    if (*(unsigned char *)(a1 + 24669)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v8.n128_f64[0]))
    {
      GlCustomLog(15, "GlMeSrdAcqMgrSm::assisted_300_fta: Run ExtCohGalSearch, bGalSecCodeValid:1");
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 12, 37, 0x35u, 0x43u, 0x52u, 0xFAu, v9, 0x61u, 1);
    }
    else
    {
      if ((*(unsigned int (**)(void, __n128))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v8)) {
        int v12 = 90;
      }
      else {
        int v12 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 12, 37, 0x35u, 0x43u, 0x4Bu, 0xFAu, v12, 0x61u, 1);
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v10)) {
      int v13 = 90;
    }
    else {
      int v13 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x39u, 0x40u, 0x4Bu, 0xFAu, v13, 0x61u, 1);
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_100_fta(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::assisted;
    }
    uint64_t v4 = a1 + 10128;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(v4, 5, 31, 0x32u, 0x3Fu, 0x49u, 0x2Fu, v5, 0x5Fu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
    if (*(unsigned char *)(a1 + 24669)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v8.n128_f64[0]))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 15, 40, 0x35u, 0x43u, 0x53u, 0xFAu, v9, 0x57u, 1);
    }
    else
    {
      if ((*(unsigned int (**)(void, __n128))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v8)) {
        int v12 = 90;
      }
      else {
        int v12 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 15, 40, 0x35u, 0x43u, 0x4Du, 0xFAu, v12, 0x57u, 1);
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v10)) {
      int v13 = 90;
    }
    else {
      int v13 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v13, 0x57u, 1);
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_100_rtc(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24669);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    v2[198] = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::assisted;
    if (v3 == 2)
    {
      v2[198] = 1;
      int v6 = 90;
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64)) & 1) == 0)
      {
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80))) {
          int v6 = 90;
        }
        else {
          int v6 = 84;
        }
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v7 = 90;
      }
      else {
        int v7 = 84;
      }
      v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 5, 31, 0x32u, 0x3Fu, 0xFAu, 0x2Fu, v7, 0x5Fu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v8)) {
        int v9 = 250;
      }
      else {
        int v9 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v9, 0xFAu, 1);
      unsigned int v10 = 76;
      double v11 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v6, 0x57u, 1);
      if (*v2)
      {
        if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 264))(*(void *)(a1 + 64), v11))
        {
          unsigned int v10 = 91;
        }
        else
        {
          unsigned int v10 = 76;
        }
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 13608, 81, 40, 0x35u, 0x43u, v10, 0xFAu, v6, 0x57u, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_300(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 3) {
    return 0;
  }
  if (v2 == 2)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v4 = 90;
    }
    else {
      int v4 = 84;
    }
    v5.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 5, 27, 0x32u, 0x3Eu, 0xFAu, 0x2Fu, v4, 0x60u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v5)) {
      int v6 = 250;
    }
    else {
      int v6 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Eu, 0xFAu, 0xFAu, v6, 0xFAu, 1);
    if (*(unsigned char *)(a1 + 24669)) {
      unsigned int v7 = 82;
    }
    else {
      unsigned int v7 = 75;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 8, 33, 0x39u, 0x40u, v7, 0xFAu, v4, 0x61u, 1);
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x39u, 0x40u, 0x4Bu, 0xFAu, v4, 0x61u, 1);
    return 0;
  }
  return BlueFin::GlMeSrdAcqMgrSm::assisted;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_70_bit_zoom(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::assisted;
    }
    uint64_t v4 = a1 + 10128;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(v4, 5, 31, 0x32u, 0x3Fu, 0x49u, 0x2Fu, v5, 0x5Fu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
    if (*(unsigned char *)(a1 + 24669)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v8.n128_f64[0]))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 20, 39, 0x35u, 0x43u, 0x52u, 0xFAu, v9, 0x57u, 1);
    }
    else
    {
      if ((*(unsigned int (**)(void, __n128))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v8)) {
        int v12 = 90;
      }
      else {
        int v12 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 20, 39, 0x35u, 0x43u, 0x4Cu, 0xFAu, v12, 0x57u, 1);
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v10)) {
      int v13 = 90;
    }
    else {
      int v13 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v13, 0x57u, 1);
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_70_bit_zoom_WithGal(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::assisted;
    }
    uint64_t v4 = a1 + 10128;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(v4, 5, 31, 0x32u, 0x3Fu, 0x49u, 0x2Fu, v5, 0x5Fu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
    if (*(unsigned char *)(a1 + 24669)
      && (*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v8.n128_f64[0]))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 20, 39, 0x35u, 0x43u, 0x53u, 0xFAu, v9, 0x57u, 1);
    }
    else
    {
      if ((*(unsigned int (**)(void, __n128))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v8)) {
        int v12 = 90;
      }
      else {
        int v12 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 20, 39, 0x35u, 0x43u, 0x4Du, 0xFAu, v12, 0x57u, 1);
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v10)) {
      int v13 = 90;
    }
    else {
      int v13 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v13, 0x57u, 1);
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::assisted_100_zoom_Gal(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::assisted;
    }
    uint64_t v4 = a1 + 10128;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(v4, 5, 31, 0x32u, 0x3Fu, 0x49u, 0x2Fu, v5, 0x5Fu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 250;
    }
    else {
      int v7 = 84;
    }
    v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v7, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 552))(v8) && *(unsigned char *)(a1 + 24669))
    {
      GlCustomLog(15, "GlMeSrdAcqMgrSm::assisted_100_zoom_Gal: Run ExtCohGalSearch, bGalSecCodeValid: 1\n");
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v9 = 90;
      }
      else {
        int v9 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 14, 33, 0x38u, 0x42u, 0x53u, 0xFAu, v9, 0x57u, 1);
    }
    else
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v12 = 90;
      }
      else {
        int v12 = 84;
      }
      double v10 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 14, 33, 0x38u, 0x42u, 0x4Du, 0xFAu, v12, 0x57u, 1);
    }
    if ((*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64), v10)) {
      int v13 = 90;
    }
    else {
      int v13 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 14, 33, 0x38u, 0x42u, 0x4Du, 0xFAu, v13, 0x57u, 1);
  }
  return 0;
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::autonomous_fast_start_300(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2, double a3)
{
  uint64_t v4 = (unsigned __int16 *)((char *)this + 24526);
  int v5 = (char *)this + 10440;
  int v6 = *a2;
  uint64_t v7 = (v6 - 66);
  switch(*a2)
  {
    case 'B':
      if (*((unsigned char *)this + 24615)) {
        return 0;
      }
      if (!*v4) {
        return 0;
      }
      uint64_t v8 = *((void *)this + 5);
      LOBYTE(v59) = **((unsigned char **)this + 3066);
      LODWORD(a3) = *((_DWORD *)v5 + 3082);
      uint64_t v9 = (*(uint64_t (**)(uint64_t, long long **, double))(*(void *)v8 + 88))(v8, &v59, (double)*(unint64_t *)&a3);
      if (!v9 || (*(unsigned char *)(v9 + 24) & 0x10) == 0) {
        return 0;
      }
      int v59 = &v61;
      char v60 = 8;
      HIDWORD(v10) = 0;
      long long v61 = 0u;
      long long v62 = 0u;
      double v11 = (_WORD *)*((void *)this + 3066);
      *(_DWORD *)((char *)&v61 + (((unint64_t)(unsigned __int16)*v11 >> 3) & 0x1C)) |= 1 << *v11;
      if (*v4 < 2u) {
        goto LABEL_79;
      }
      unint64_t v12 = 2;
      uint64_t v13 = 4;
      while (1)
      {
        uint64_t v14 = *((void *)this + 5);
        LOBYTE(v55) = v11[v13];
        LODWORD(v10) = *((_DWORD *)v5 + 3082);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, long long **, double))(*(void *)v14 + 88))(v14, &v55, (double)v10);
        if (!v15 || (*(unsigned char *)(v15 + 24) & 0x10) == 0) {
          break;
        }
        double v11 = (_WORD *)*((void *)this + 3066);
        *(_DWORD *)((char *)v59 + (((unint64_t)(unsigned __int16)v11[v13] >> 3) & 0x1C)) |= 1 << v11[v13];
        v13 += 4;
        if (v12++ >= *v4) {
          goto LABEL_79;
        }
      }
      if (v12 >= *v4)
      {
LABEL_79:
        int v55 = &v57;
        unsigned __int8 v56 = 8;
        long long v57 = xmmword_263BAA85C;
        long long v58 = *(_OWORD *)algn_263BAA86C;
        BlueFin::GlSvIdSet::operator~((const void **)&v55, (uint64_t)&v52);
        BlueFin::GlSetBase::operator&=((uint64_t)&v59, (uint64_t)&v52);
        BlueFin::GlMeSrdSatTrackMgr::GetSetSvidList((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)&v49);
        BlueFin::GlSvIdSet::operator~(&v49, (uint64_t)&v52);
        BlueFin::GlSetBase::operator&=((uint64_t)&v59, (uint64_t)&v52);
        BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet((void *)this + 440, (uint64_t)this + 13920, (uint64_t)&v49);
        BlueFin::GlSvIdSet::operator~(&v49, (uint64_t)&v52);
        BlueFin::GlSetBase::operator&=((uint64_t)&v59, (uint64_t)&v52);
        *((unsigned char *)v4 + 89) = 1;
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v47, v48, 8u, (const void **)&v59);
        BlueFin::GlMeSrdAidingMgr::ForceAidingRefresh((uint64_t)this + 240, &v47);
        v5[1440] = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&v59);
        v42.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 11568, 9, 35, 0x46u, 0x3Eu, 0x4Bu, 0xFAu, 84, 0xFAu, 1);
        if (((*(uint64_t (**)(__n128))(**((void **)this + 8) + 256))(v42) & 1) == 0
          && ((*(uint64_t (**)(void))(**((void **)this + 8) + 264))(*((void *)this + 8)) & 1) == 0)
        {
          int v52 = (int *)v54;
          char v53 = 8;
          v54[0] = xmmword_263BAA8DC;
          v54[1] = unk_263BAA8EC;
          BlueFin::GlSvIdSet::operator~((const void **)&v52, (uint64_t)v46);
          BlueFin::GlSvIdSet::operator&((uint64_t)&v49, (const void **)&v59, v46);
          BlueFin::GlSetBase::operator=((uint64_t)&v59, (uint64_t)&v49);
          long long v61 = v50;
          long long v62 = v51;
        }
        BlueFin::GlMeSrdSearchMgrBase::SetSvidToSearch((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11568), (const BlueFin::GlSvIdSet *)&v59);
        return 0;
      }
      uint64_t v39 = v13 * 2 + 8;
      while (1)
      {
        uint64_t v40 = *((void *)this + 5);
        LOBYTE(v55) = *(unsigned char *)(*((void *)this + 3066) + v39);
        LODWORD(v10) = *((_DWORD *)v5 + 3082);
        uint64_t v41 = (*(uint64_t (**)(uint64_t, long long **, double))(*(void *)v40 + 88))(v40, &v55, (double)v10);
        if (v41)
        {
          if ((*(unsigned char *)(v41 + 24) & 0x10) != 0) {
            return 0;
          }
        }
        ++v12;
        v39 += 8;
        if (v12 >= *v4) {
          goto LABEL_79;
        }
      }
    case 'C':
      if (!*((unsigned char *)this + 24608)) {
        goto LABEL_55;
      }
      long long v28 = (const void **)(*(uint64_t (**)(void))(**((void **)this + 5) + 64))(*((void *)this + 5));
      BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 18352), (uint64_t)&v59);
      BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*((void **)this + 1795), (uint64_t)&v59, (uint64_t)&v49);
      BlueFin::GlSvIdSet::operator~(&v49, (uint64_t)&v52);
      int16x4_t v29 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v55, (unsigned int *)&v57, 8u, v28);
      int v59 = &v61;
      char v60 = 8;
      long long v61 = 0u;
      long long v62 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v29, (int **)&v59, &v52);
      BlueFin::GlSetBase::operator=((uint64_t)&v55, (uint64_t)&v59);
      long long v57 = v61;
      long long v58 = v62;
      if (!BlueFin::GlMeSrdAcqMgrSm::IsFirstFix(this)) {
        goto LABEL_54;
      }
      unsigned int v30 = 0;
      int v31 = (long long *)((char *)&v55[v56 / 4u - 1] + 12);
      do
      {
        if (*(_DWORD *)v31)
        {
          unsigned int v32 = *(_DWORD *)v31 - (((*(_DWORD *)v31 >> 2) & 0x9249249) + ((*(_DWORD *)v31 >> 1) & 0x5B6DB6DB));
          unsigned int v30 = ((v32 + (v32 >> 3)) & 0xC71C71C7) + v30 - 63 * (((v32 + (v32 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        int v31 = (long long *)((char *)v31 - 4);
      }
      while (v31 >= v55);
      if (v30 > 4u || *((unsigned char *)v4 + 139)) {
        goto LABEL_54;
      }
      if (!*((unsigned char *)v4 + 82)) {
        goto LABEL_55;
      }
      return 0;
    case 'D':
      int v19 = a2[1];
      if (v19 == 1)
      {
        if (*((_DWORD *)this + 3010) + *((unsigned __int8 *)this + 11984) != 2)
        {
          BOOL v43 = "me->m_otTryoutsMgr.GetProgrammingRotation() == 2";
          DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1659, "autonomous_fast_start_300", (char)"me->m_otTryoutsMgr.GetProgrammingRotation() == 2");
          int v44 = 1659;
          goto LABEL_86;
        }
        uint64_t v7 = 0;
        *((unsigned char *)this + 11880) = 0;
      }
      else
      {
        if (v19 != 8)
        {
          BOOL v43 = "0";
          DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1664, "autonomous_fast_start_300", (char)"0");
          int v44 = 1664;
          goto LABEL_86;
        }
        int v20 = (*((unsigned char *)this + 10544) + *((unsigned char *)this + 10600));
        if (v20 != 3)
        {
          if (v20 == 2)
          {
            BlueFin::GlMeSrdSatTrackMgr::GetSetSvidValidTrackingList((const void **)this + 1794, (uint64_t)&v59);
            if (*(_DWORD *)(v4 + 21)
              && (unsigned __int8 v21 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&v59),
                  BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 13920)) + v21 > 5))
            {
              if ((*(unsigned int (**)(void))(**((void **)this + 8) + 1200))(*((void *)this + 8))) {
                int v22 = 88;
              }
              else {
                int v22 = 84;
              }
              _OWORD v45[4] = 0;
              *(_DWORD *)int v45 = 85;
              uint64_t v23 = (char *)this + 10128;
              unsigned int v24 = 74;
            }
            else
            {
              if ((*(unsigned int (**)(void))(**((void **)this + 8) + 1200))(*((void *)this + 8))) {
                int v22 = 88;
              }
              else {
                int v22 = 84;
              }
              _OWORD v45[4] = 0;
              *(_DWORD *)int v45 = 250;
              uint64_t v23 = (char *)this + 10128;
              unsigned int v24 = 250;
            }
            BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)v23, 7, 29, 0x33u, 0x3Du, v24, 0x2Fu, v22, *(unsigned int *)v45, v45[4]);
            return 0;
          }
          BOOL v43 = "0";
          DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1654, "autonomous_fast_start_300", (char)"0");
          int v44 = 1654;
LABEL_86:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", v44, v43);
        }
        uint64_t v7 = 0;
        *int v5 = 0;
      }
      return v7;
    case 'E':
      int v33 = a2[1];
      if (v33 != 1)
      {
        if (v33 == 8)
        {
          if (*((_DWORD *)this + 2650) + *((unsigned __int8 *)this + 10544) == 3)
          {
LABEL_54:
            *((unsigned char *)v4 + 82) = 0;
LABEL_55:
            BlueFin::GlMeSrdAcqMgrSm::UpdateSmFirstFixStates(this);
          }
          return 0;
        }
        BOOL v43 = "0";
        DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1686, "autonomous_fast_start_300", (char)"0");
        int v44 = 1686;
        goto LABEL_86;
      }
      long long v34 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11568);
      int v59 = &v61;
      char v60 = 8;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v35 = (char *)this + 11824;
      BlueFin::GlSetBase::operator=((uint64_t)this + 11824, (uint64_t)&v59);
      *(_OWORD *)(v35 + 12) = v61;
      *(_OWORD *)(v35 + 28) = v62;
      BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v34, (BlueFin::GlSvIdSet *)v35);
      return 0;
    case 'F':
      BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)&v52);
      int v25 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v55, (unsigned int *)&v57, 8u, (const void **)&v52);
      int v59 = &v61;
      char v60 = 8;
      long long v61 = 0u;
      long long v62 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v25, (int **)&v59, (int **)this + 2847);
      BlueFin::GlSetBase::operator=((uint64_t)&v55, (uint64_t)&v59);
      long long v57 = v61;
      long long v58 = v62;
      if (*((_DWORD *)this + 2650) + v5[104] == 1 && *((_DWORD *)v5 + 3082) > 0x3E8u || *(_DWORD *)v55) {
        goto LABEL_37;
      }
      if (v56 < 2uLL) {
        return 0;
      }
      if (*((_DWORD *)v55 + 1)) {
        goto LABEL_37;
      }
      uint64_t v36 = 2;
      while (v56 != v36)
      {
        if (*((_DWORD *)v55 + v36++))
        {
          if (v36 - 1 >= (unint64_t)v56) {
            return 0;
          }
LABEL_37:
          if (!BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 10384))
            && !BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11824)))
          {
            goto LABEL_54;
          }
          return 0;
        }
      }
      return 0;
    default:
      if (v6 == 3)
      {
        int v26 = (BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11568);
        int v59 = &v61;
        char v60 = 8;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v27 = (char *)this + 11824;
        BlueFin::GlSetBase::operator=((uint64_t)this + 11824, (uint64_t)&v59);
        *(_OWORD *)(v27 + 12) = v61;
        *(_OWORD *)(v27 + 28) = v62;
        BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v26, (BlueFin::GlSvIdSet *)v27);
        uint64_t v7 = 0;
        v5[480] = 4;
        *((unsigned char *)v4 + 82) = 0;
      }
      else if (v6 == 2)
      {
        *int v5 = 10;
        *((unsigned char *)this + 10920) = 0;
        if (*((_DWORD *)this + 2650) + *((unsigned __int8 *)this + 10544) != 1)
        {
          BOOL v43 = "me->m_otScanMgr.GetProgrammingRotation() == 1";
          DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1515, "autonomous_fast_start_300", (char)"me->m_otScanMgr.GetProgrammingRotation() == 1");
          int v44 = 1515;
          goto LABEL_86;
        }
        if (*((_DWORD *)this + 3010) + *((unsigned __int8 *)this + 11984) != 1)
        {
          BOOL v43 = "me->m_otTryoutsMgr.GetProgrammingRotation() == 1";
          DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1516, "autonomous_fast_start_300", (char)"me->m_otTryoutsMgr.GetProgrammingRotation() == 1");
          int v44 = 1516;
          goto LABEL_86;
        }
        if ((*(unsigned int (**)(void))(**((void **)this + 8) + 1232))(*((void *)this + 8))) {
          unsigned int v17 = 50;
        }
        else {
          unsigned int v17 = 250;
        }
        if ((*(unsigned int (**)(void))(**((void **)this + 8) + 1200))()) {
          int v18 = 88;
        }
        else {
          int v18 = 84;
        }
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 10128, 6, 28, v17, 0xFAu, 0xFAu, 0xFAu, v18, 0x55u, 1);
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 10608, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12360, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12672, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
        return 0;
      }
      return v7;
  }
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::autonomous_300(uint64_t a1, unsigned __int8 *a2))(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 > 0x40)
  {
    if (v3 == 65 || v3 == 67)
    {
      double result = 0;
      *(unsigned char *)(a1 + 24612) = BlueFin::GlMeMeasSelfAidFilter::m_IsSelfAidOn;
      return result;
    }
    return BlueFin::GlMeSrdAcqMgrSm::autonomous;
  }
  if (v3 == 2)
  {
    v5.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 22, 45, 0x36u, 0x44u, 0x4Cu, 0xFAu, 84, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v5)) {
      int v6 = 90;
    }
    else {
      int v6 = 84;
    }
    v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 5, 27, 0x32u, 0x3Eu, 0x49u, 0x2Fu, v6, 0x60u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
      int v8 = 250;
    }
    else {
      int v8 = 84;
    }
    v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Eu, 0x49u, 0xFAu, v8, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v9)) {
      int v10 = 90;
    }
    else {
      int v10 = 84;
    }
    v11.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 8, 33, 0x39u, 0x40u, 0x4Bu, 0xFAu, v10, 0x61u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v11)) {
      int v12 = 90;
    }
    else {
      int v12 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x39u, 0x40u, 0x4Bu, 0xFAu, v12, 0x61u, 1);
  }
  else if (v3 != 3)
  {
    return BlueFin::GlMeSrdAcqMgrSm::autonomous;
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::autonomous_100(uint64_t a1, unsigned __int8 *a2))(unsigned char *a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm **this, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  double result = BlueFin::GlMeSrdAcqMgrSm::autonomous;
  if (v3 > 0x40)
  {
    if (v3 == 65 || v3 == 67)
    {
      double result = 0;
      *(unsigned char *)(a1 + 24612) = BlueFin::GlMeMeasSelfAidFilter::m_IsSelfAidOn;
    }
  }
  else
  {
    if (v3 == 2)
    {
      v5.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 22, 45, 0x36u, 0x44u, 0x4Cu, 0xFAu, 84, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v5)) {
        int v6 = 90;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 5, 27, 0x32u, 0x3Fu, 0x49u, 0x2Fu, v6, 0x5Fu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 250;
      }
      else {
        int v8 = 84;
      }
      v9.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0xFAu, v8, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v9)) {
        int v10 = 90;
      }
      else {
        int v10 = 84;
      }
      v11.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 14, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v10, 0x57u, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v11)) {
        int v12 = 90;
      }
      else {
        int v12 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 14, 33, 0x38u, 0x42u, 0x4Cu, 0xFAu, v12, 0x57u, 1);
    }
    else
    {
      if (v3 != 3) {
        return result;
      }
      *(unsigned char *)(a1 + 24612) = 0;
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
    }
    return 0;
  }
  return result;
}

void *BlueFin::GlMeSrdAcqMgrSm::UpdateSmContinuousTrackStates(BlueFin::GlMeSrdAcqMgrSm *this)
{
  int v2 = (char *)this + 24568;
  unsigned int v3 = (_DWORD *)((char *)this + 22768);
  int v5 = *((_DWORD *)this + 6142);
  int v4 = *((_DWORD *)this + 6143);
  int v6 = *((unsigned __int8 *)this + 24669);
  float v27 = 0.0;
  (*(void (**)(void, void, float *, void))(**((void **)this + 5) + 48))(*((void *)this + 5), *((unsigned int *)this + 5692), &v27, 0);
  int v8 = 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 8) + 552))())
  {
    LODWORD(v7) = *v3;
    int v9 = (*(uint64_t (**)(void, double))(**((void **)this + 5) + 136))(*((void *)this + 5), (double)v7);
    if (v27 < 0.0005) {
      int v8 = 1;
    }
    else {
      int v8 = v9;
    }
  }
  v2[101] = v8;
  if (v6 != v8)
  {
    v22[0] = xmmword_263BAA8DC;
    int v20 = v22;
    char v21 = 8;
    v22[1] = unk_263BAA8EC;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v23, (unsigned int *)v24, 8u, (const void **)&v20);
    long long v28 = &v30;
    char v29 = 8;
    long long v30 = 0u;
    long long v31 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v23, (int **)&v28, (int **)this + 2847);
    BlueFin::GlSetBase::operator=((uint64_t)&v23, (uint64_t)&v28);
    v24[0] = v30;
    v24[1] = v31;
    BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)v18);
    BlueFin::GlSvIdSet::operator~(v18, (uint64_t)v19);
    int v10 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v25, (unsigned int *)v26, 8u, &v23);
    long long v28 = &v30;
    char v29 = 8;
    long long v30 = 0u;
    long long v31 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v10, (int **)&v28, v19);
    BlueFin::GlSetBase::operator=((uint64_t)&v25, (uint64_t)&v28);
    v26[0] = v30;
    v26[1] = v31;
    BlueFin::GlMeSrdAidingMgr::ForceAidingRefresh((uint64_t)this + 240, &v25);
  }
  if (v2[48] || (v4 & 0x22) != 0x22)
  {
    if (v2[48]) {
      __n128 v11 = (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_save;
    }
    else {
      __n128 v11 = (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAcqMgrSm::continuous_track_300;
    }
    if (v2[48]) {
      BOOL v12 = (char *)BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_save == (char *)BlueFin::QHsm::top;
    }
    else {
      BOOL v12 = (char *)BlueFin::GlMeSrdAcqMgrSm::continuous_track_300 == (char *)BlueFin::QHsm::top;
    }
    if (!v12) {
      goto LABEL_16;
    }
LABEL_31:
    DeviceFaultNotify("glmesrd_acq_mgr_sm.cpp", 1412, "UpdateSmContinuousTrackStates", (char)"nextState != (QSTATE)&GlMeSrdAcqMgrSm::top");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_acq_mgr_sm.cpp", 1412, "nextState != (QSTATE)&GlMeSrdAcqMgrSm::top");
  }
  if ((v5 - 2) < 2)
  {
    uint64_t v14 = BlueFin::GlMeSrdAcqMgrSm::continuous_track_70_bit;
    BOOL v15 = (char *)BlueFin::GlMeSrdAcqMgrSm::continuous_track_70_bit == (char *)BlueFin::QHsm::top;
    unsigned int v16 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::continuous_track_70_bit_zoom;
    goto LABEL_27;
  }
  if (v5 == 1)
  {
    uint64_t v14 = BlueFin::GlMeSrdAcqMgrSm::continuous_track_300_bit;
    BOOL v15 = (char *)BlueFin::GlMeSrdAcqMgrSm::continuous_track_300_bit == (char *)BlueFin::QHsm::top;
    unsigned int v16 = (uint64_t (*)())BlueFin::GlMeSrdAcqMgrSm::continuous_track_300_bit_zoom;
LABEL_27:
    BOOL v17 = v16 == BlueFin::QHsm::top;
    if ((v4 & 0x108) == 0x108)
    {
      __n128 v11 = (uint64_t (*)(uint64_t, unsigned __int8 *))v16;
    }
    else
    {
      BOOL v17 = v15;
      __n128 v11 = (uint64_t (*)(uint64_t, unsigned __int8 *))v14;
    }
    if (!v17) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }
  if (v5) {
    goto LABEL_31;
  }
  __n128 v11 = (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlMeSrdAcqMgrSm::continuous_track_300;
  if ((char *)BlueFin::GlMeSrdAcqMgrSm::continuous_track_300 == (char *)BlueFin::QHsm::top) {
    goto LABEL_31;
  }
LABEL_16:
  double result = (void *)BlueFin::QHsm::isIn((uint64_t)this, v11);
  if (v6 != v8 || !result) {
    return BlueFin::QHsm::tran(this, (uint64_t (*)())v11, (uint64_t)"UpdateSmContinuousTrackStates");
  }
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_save(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  unsigned int v3 = (unsigned char *)(a1 + 10440);
  int v4 = *a2;
  if (v4 == 3)
  {
    int v6 = (BlueFin::GlMeSrdSearchMgrBase *)(a1 + 10608);
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::continuous_track;
    if (v4 != 2) {
      return result;
    }
    *(unsigned char *)(a1 + 24610) = 0;
    *unsigned int v3 = 0;
    int v6 = (BlueFin::GlMeSrdSearchMgrBase *)(a1 + 10608);
    v3[480] = 4;
    v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
      int v8 = 90;
    }
    else {
      int v8 = 84;
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 16, 41, 0x34u, 0x3Fu, 0xFAu, 0xFAu, v8, 0x5Fu, 1);
  }
  int v10 = &v12;
  char v11 = 8;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v9 = a1 + 10864;
  BlueFin::GlSetBase::operator=(v9, (uint64_t)&v10);
  *(_OWORD *)(v9 + 12) = v12;
  *(_OWORD *)(v9 + 28) = v13;
  BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(v6, (BlueFin::GlSvIdSet *)v9);
  BlueFin::GlMeSrdSharedSatSearchMgr::ProcessPending(v6);
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_300(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24609);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_full;
    if (v3 == 2)
    {
      v2[3] = 0;
      *int v2 = 1;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))(*(void *)(a1 + 64))) {
        int v6 = 250;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 33, 0x39u, 0x40u, 0x4Bu, 0xFAu, v6, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 8, 33, 0x39u, 0x40u, 0x4Bu, 0xFAu, v8, 0x61u, 1);
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_300_bit_zoom(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24609);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_full;
    if (v3 == 2)
    {
      v2[3] = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80)) ^ 1;
      *int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 1016))();
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      double v6 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      if (v2[60]
        && (*(unsigned int (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v6))
      {
        GlCustomLog(15, "GlMeSrdAcqMgrSm::continuous_track_300_bit_zoom: Run ExtCohGalSearch, bGalSecCodeValid: 1\n");
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 11, 36, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
      }
      else
      {
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 11, 36, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
      }
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_300_bit(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  int v2 = (unsigned char *)(a1 + 24609);
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *int v2 = 0;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_full;
    if (v3 == 2)
    {
      v2[3] = 1;
      *int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 1016))(*(void *)(a1 + 64));
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))()) {
        int v6 = 250;
      }
      else {
        int v6 = 84;
      }
      v7.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v6, 0xFAu, 1);
      if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v7)) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      double v9 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v8, 0x61u, 1);
      if (v2[60]) {
        (*(uint64_t (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v9);
      }
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 10, 36, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
      return 0;
    }
  }
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_70_bit_zoom(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_full;
    }
    int v4 = (unsigned char *)(a1 + 24609);
    *(unsigned char *)(a1 + 24612) = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80)) ^ 1;
    *int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 1016))();
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))()) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v5, 0x57u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 90;
    }
    else {
      int v7 = 84;
    }
    v8.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 21, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v7, 0x57u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 552))(v8) && v4[60])
    {
      GlCustomLog(15, "GlMeSrdAcqMgrSm::continuous_track_70_bit_zoom: Run ExtCohGalSearch, bGalSecCodeValid: 1\n");
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 23, 45, 0x36u, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
    }
    else
    {
      BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 23, 45, 0x36u, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
    }
  }
  return 0;
}

uint64_t (*(*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_70_bit(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 != 3)
  {
    if (v2 != 2) {
      return BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_full;
    }
    uint64_t v4 = a1 + 24609;
    *(unsigned char *)(a1 + 24612) = 1;
    *(unsigned char *)(a1 + 24609) = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 1016))(*(void *)(a1 + 64));
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))()) {
      int v5 = 90;
    }
    else {
      int v5 = 84;
    }
    v6.n128_f64[0] = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12672, 8, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v5, 0x57u, 1);
    if ((*(unsigned int (**)(__n128))(**(void **)(a1 + 64) + 1200))(v6)) {
      int v7 = 90;
    }
    else {
      int v7 = 84;
    }
    double v8 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12360, 21, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, v7, 0x57u, 1);
    if (*(unsigned char *)(v4 + 60)) {
      (*(uint64_t (**)(void, double))(**(void **)(a1 + 64) + 552))(*(void *)(a1 + 64), v8);
    }
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 12048, 22, 45, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 84, 0xFAu, 1);
  }
  return 0;
}

uint64_t (*BlueFin::GlMeSrdAcqMgrSm::continuous_track(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  int v3 = (char *)this + 24568;
  unsigned int v4 = *a2;
  double result = BlueFin::QHsm::top;
  if (v4 > 0x40)
  {
    if (v4 == 65)
    {
LABEL_60:
      BlueFin::GlMeSrdAcqMgrSm::UpdateSmContinuousTrackStates(this);
      return 0;
    }
    if (v4 != 70) {
      return result;
    }
    if (!v3[50])
    {
      BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)&v26);
      unsigned int v12 = 0;
      long long v13 = (_DWORD *)(v26 + 4 * v27 - 4);
      do
      {
        if (*v13)
        {
          unsigned int v14 = *v13 - (((*v13 >> 2) & 0x9249249) + ((*v13 >> 1) & 0x5B6DB6DB));
          unsigned int v12 = ((v14 + (v14 >> 3)) & 0xC71C71C7) + v12 - 63 * (((v14 + (v14 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v13;
      }
      while ((unint64_t)v13 >= v26);
      BlueFin::GlMeSrdSatTrackMgr::GetSetSvidValidTrackingList((const void **)this + 1794, (uint64_t)&v26);
      unsigned int v15 = 0;
      unsigned int v16 = (_DWORD *)(v26 + 4 * v27 - 4);
      do
      {
        if (*v16)
        {
          unsigned int v17 = *v16 - (((*v16 >> 2) & 0x9249249) + ((*v16 >> 1) & 0x5B6DB6DB));
          unsigned int v15 = ((v17 + (v17 >> 3)) & 0xC71C71C7) + v15 - 63 * (((v17 + (v17 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v16;
      }
      while ((unint64_t)v16 >= v26);
      if (v12 < 0xCu || v15 < 0xCu)
      {
        LOBYTE(v19) = 0;
        *((_DWORD *)v3 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        if (!v3[48]) {
          return 0;
        }
      }
      else
      {
        if (v12 >= 0x10u && *(_DWORD *)v3 == 3)
        {
          int v18 = *((_DWORD *)v3 + 14);
          if (v18 >= 4) {
            int v18 = 4;
          }
          int v19 = v18 + 1;
        }
        else
        {
          int v21 = *((_DWORD *)v3 + 14);
          if (v21 <= 1) {
            int v21 = 1;
          }
          int v19 = v21 - 1;
        }
        *((_DWORD *)v3 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v19;
        if (v3[48])
        {
          if (v19) {
            return 0;
          }
        }
        else
        {
          if (v19 <= 4) {
            return 0;
          }
          LOBYTE(v19) = 1;
        }
      }
LABEL_59:
      v3[48] = v19;
      goto LABEL_60;
    }
    unsigned int v6 = v3[53];
    unsigned int v7 = v3[52];
    unsigned int v8 = v3[51];
    BlueFin::GlMeSrdSatTrackMgr::GetSetSvidListTrackingOrAided((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352), (uint64_t)&v26);
    unsigned int v9 = 0;
    int v10 = (_DWORD *)(v26 + 4 * v27 - 4);
    do
    {
      if (*v10)
      {
        unsigned int v11 = *v10 - (((*v10 >> 2) & 0x9249249) + ((*v10 >> 1) & 0x5B6DB6DB));
        unsigned int v9 = ((v11 + (v11 >> 3)) & 0xC71C71C7) + v9 - 63 * (((v11 + (v11 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v10;
    }
    while ((unint64_t)v10 >= v26);
    if (v8 > v9)
    {
      *((_DWORD *)v3 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      v3[49] = 0;
      GlCustomLog(15, "FEATURE_SEARCH_3GEAR::Enter full search\n");
LABEL_50:
      int v23 = *((_DWORD *)v3 + 14);
      if (v3[48])
      {
        if (v23)
        {
LABEL_52:
          uint64_t v24 = 84;
          if (!v3[49]) {
            uint64_t v24 = 70;
          }
          GlCustomLog(15, "GlMeSrdAcqMgrSm::IsSearchLowPowerModeChangeNeeded3G(%c) Searchoff(%c) %u, %d\n", 70, v24, v9, *((_DWORD *)v3 + 14));
          return 0;
        }
      }
      else if (v23 <= 7)
      {
        goto LABEL_52;
      }
      uint64_t v25 = 70;
      if (v3[49]) {
        uint64_t v25 = 84;
      }
      GlCustomLog(15, "GlMeSrdAcqMgrSm::IsSearchLowPowerModeChangeNeeded3G(%c) Searchoff(%c) %u, %d\n", 84, v25, v9, *((_DWORD *)v3 + 14));
      LOBYTE(v19) = v3[48] ^ 1;
      goto LABEL_59;
    }
    if (v7 <= v9)
    {
      if (*(_DWORD *)v3 == 3)
      {
        int v20 = *((_DWORD *)v3 + 14);
        if (v20 >= 7) {
          int v20 = 7;
        }
        *((_DWORD *)v3 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20 + 1;
        if (v6 <= v9 && !v3[49])
        {
          v3[49] = 1;
          GlCustomLog(15, "FEATURE_SEARCH_3GEAR::Enter no search\n");
        }
        goto LABEL_50;
      }
    }
    else if (v3[49])
    {
      v3[49] = 0;
      GlCustomLog(15, "FEATURE_SEARCH_3GEAR::Enter min search\n");
      goto LABEL_50;
    }
    int v22 = *((_DWORD *)v3 + 14);
    if (v22 <= 1) {
      int v22 = 1;
    }
    *((_DWORD *)v3 + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v22 - 1;
    v3[49] = 0;
    goto LABEL_50;
  }
  if (v4 == 2)
  {
    v3[43] = 1;
    v3[100] = 1;
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12984, 25, 46, 0x3Bu, 0x3Cu, 0x47u, 0xFAu, 84, 0x3Bu, 1);
    return 0;
  }
  if (v4 == 3)
  {
    v3[100] = 0;
    BlueFin::GlMeSrdSearchMgrBase::SetStrategyId((uint64_t)this + 12984, 25, 46, 0x3Bu, 0x3Cu, 0x47u, 0xFAu, 84, 0x3Bu, 1);
    double result = 0;
    v3[43] = 0;
  }
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAcqMgrSm::continuous_track_power_full(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdAcqMgrSm *this, unsigned __int8 *a2))()
{
  uint64_t v2 = a1 + 24609;
  int v3 = *a2;
  if (v3 == 3)
  {
    double result = 0;
    *(_WORD *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 3) = 1;
  }
  else
  {
    double result = BlueFin::GlMeSrdAcqMgrSm::continuous_track;
    if (v3 == 2)
    {
      *(unsigned char *)(v2 + 1) = 1;
      *(unsigned char *)(a1 + 10440) = 0;
      *(unsigned char *)(a1 + 10920) = 4;
      double v6 = BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10128, 250, 250, 0xFAu, 0xFAu, 0xFAu, 0xFAu, 250, 0xFAu, 1);
      char v7 = (*(uint64_t (**)(void, double))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80), v6);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 1200))()) {
        int v8 = 90;
      }
      else {
        int v8 = 84;
      }
      if (v7) {
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0x49u, 0x2Fu, v8, 0x5Fu, 1);
      }
      else {
        BlueFin::GlMeSrdSearchMgrBase::SetStrategyId(a1 + 10608, 4, 30, 0x32u, 0x3Fu, 0xFAu, 0x2Fu, v8, 0x5Fu, 1);
      }
      return 0;
    }
  }
  return result;
}

double BlueFin::GlMeSrdAcqMgrSm::GetSubEpochTime(unsigned __int8 a1, double a2)
{
  if ((a1 + 67) < 0x44u
    || (uint64_t v2 = BlueFin::GlSvId::s_aucSvId2gnss[a1],
        BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v2] == 255)
    || (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v2]
                        + a1
                        - BlueFin::GlSvId::s_aucGnss2minSvId[v2]) >= 0x23Fu)
  {
    unsigned int v9 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v10 = 678;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v10, v9);
  }
  unsigned int v3 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[v2];
  if (!v3)
  {
    unsigned int v9 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v10 = 685;
    goto LABEL_9;
  }
  double v4 = (double)v3 * 0.001;
  double v5 = fabs(a2);
  double result = v5 - floor(v5 / v4) * v4;
  double v7 = v4 * 0.5;
  double v8 = v4 - result;
  if (result > v7) {
    return v8;
  }
  return result;
}

void BlueFin::GlMeSrdRotationListener::~GlMeSrdRotationListener(BlueFin::GlMeSrdRotationListener *this)
{
}

void BlueFin::GlMeSrdAcqMgrSm::~GlMeSrdAcqMgrSm(BlueFin::GlMeSrdAcqMgrSm *this)
{
  BlueFin::GlMeSrdAcqMgrSm::~GlMeSrdAcqMgrSm(this);

  JUMPOUT(0x263E6DD70);
}

{
  *(void *)this = &unk_270EBB940;
  BlueFin::GlMeSrdSatTrackMgr::~GlMeSrdSatTrackMgr((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 14352));
  BlueFin::GlMeSrdSatPostSearchMgr::~GlMeSrdSatPostSearchMgr((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 13920));
  *((void *)this + 1701) = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 13608));
  *((void *)this + 1662) = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 13296));
  *((void *)this + 1623) = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12984));
  *((void *)this + 158bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12672));
  *((void *)this + 1545) = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12360));
  *((void *)this + 1506) = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 12048));
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11568));
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 11088));
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 10608));
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 10128));
  BlueFin::GlMeSrdAcqMgr::~GlMeSrdAcqMgr((BlueFin::GlMeSrdAcqMgrSm *)((char *)this + 88));
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::GetAcqMgrIfc(BlueFin::GlMeSrdAcqMgrSm *this)
{
  return (uint64_t)this + 88;
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::GetSatStatusListenerIfc(BlueFin::GlMeSrdAcqMgrSm *this)
{
  return (uint64_t)this + 200;
}

uint64_t BlueFin::GlMeSrdAcqMgrSm::GetSatStatusIgnorerIfc(BlueFin::GlMeSrdAcqMgrSm *this)
{
  return (uint64_t)this + 216;
}

uint64_t BlueFin::GlMeSrdSatStatusListenerStub::IsSatInKillProcess(BlueFin::GlMeSrdSatStatusListenerStub *this)
{
  return 0;
}

void BlueFin::GlMeSrdSatStatusListenerStub::~GlMeSrdSatStatusListenerStub(BlueFin::GlMeSrdSatStatusListenerStub *this)
{
}

uint64_t BlueFin::GlSignalId::GetMsPerEpoch(BlueFin::GlSignalId *this)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    double v4 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v5 = 678;
    goto LABEL_6;
  }
  uint64_t v1 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this];
  uint64_t v2 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1) - *((int *)this + 1)];
  uint64_t result = v2[v1];
  if (!v2[v1])
  {
    double v4 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v5 = 685;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v5, v4);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAidingMgr::LogMappingChange(BlueFin::GlMeSrdAidingMgr *this, uint64_t a2, const BlueFin::GlSignalId *a3)
{
  MEMORY[0x270FA5388](this, a2);
  char v4 = v3;
  double v6 = v5;
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v11 = 81;
  char v12 = 2;
  uint64_t v13 = 0x1000000000000;
  int v10 = &unk_270EBA550;
  char v14 = 2;
  if (v7) {
    char v8 = 0;
  }
  else {
    char v8 = 0x80;
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, v8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *v6));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, v6[4]);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, v4);
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, 0, 4);
}

uint64_t BlueFin::GlMeSrdAidingMgr::UpdateAidingFromEarlyTap(BlueFin::GlMeSrdAidingMgr *a1, uint64_t a2, uint64_t a3)
{
  int v23 = &off_270EBF450;
  unsigned __int8 v24 = 0;
  int v25 = -1;
  __int16 v26 = 575;
  uint64_t v27 = 0;
  int v28 = 0;
  long long v29 = xmmword_263BABE60;
  int v30 = 2139095039;
  uint64_t v31 = 0;
  int v32 = 2139095039;
  __int16 v33 = 0;
  uint64_t v34 = 0x7FEFFFFFFFFFFFFFLL;
  int v35 = -1;
  __int16 v36 = -1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  double v6 = (int *)(a2 + 100);
  double v7 = *(double *)(a2 + 24) * 1000.0;
  int v40 = 0;
  BlueFin::GlMeSrdAidingMgr::GetAcqWindow(a1, (uint64_t)&v23, (unsigned __int8 *)(a2 + 100), 0, 0, v7);
  BlueFin::GlMeAcqWin::OverrideAcqWinWithDspMeas((uint64_t)&v23, (const BlueFin::GlMeDSPMeas *)a2, 1);
  BlueFin::GlMeSrdAidingMgr::FormatAidingForEsw((uint64_t)a1, (uint64_t)v22, (uint64_t)&v23, 1, v6, *(double *)(a2 + 24) * 1000.0);
  char AidIdFromSignalId = BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId(a1, (const BlueFin::GlSignalId *)v6);
  unint64_t v8 = (unint64_t)v24 >> 5;
  int v9 = 1 << v24;
  *(_DWORD *)(*((void *)a1 + 160) + 4 * v8) |= 1 << v24;
  if (BlueFin::GlMeMeasSelfAidFilter::m_IsSelfAidOn) {
    *(_DWORD *)(*((void *)a1 + 166) + 4 * v8) |= v9;
  }
  double v10 = *(double *)(a2 + 24) * 1000.0;
  double v11 = fmod(v10, 4294967300.0);
  if (v10 <= 4294967300.0) {
    double v11 = v10;
  }
  if (v11 < -4294967300.0) {
    double v11 = -fmod(-v11, 4294967300.0);
  }
  if (v11 < 0.0) {
    unsigned int v12 = --v11;
  }
  else {
    unsigned int v12 = v11;
  }
  *((_DWORD *)a1 + *(unsigned __int8 *)v6 + 7) = v12;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 80))(a3);
  uint64_t v17 = 0;
  v18[0] = 0;
  *(_DWORD *)((char *)v18 + 7) = 0;
  _OWORD v18[2] = v13;
  int v19 = 0;
  __int16 v20 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, char *, unsigned char *))(*(void *)v15 + 72))(v15, &v17, 1, &AidIdFromSignalId, v22);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v17);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v17);
  return 1;
}

void sub_263A7400C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdAidingMgr::UpdateAidingFromDspMeas(BlueFin::GlMeSrdAidingMgr *a1, uint64_t a2, uint64_t a3)
{
  int v22 = &off_270EBF450;
  unsigned __int8 v23 = 0;
  int v24 = -1;
  __int16 v25 = 575;
  uint64_t v26 = 0;
  int v27 = 0;
  long long v28 = xmmword_263BABE60;
  int v29 = 2139095039;
  uint64_t v30 = 0;
  int v31 = 2139095039;
  __int16 v32 = 0;
  uint64_t v33 = 0x7FEFFFFFFFFFFFFFLL;
  int v34 = -1;
  __int16 v35 = -1;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  double v6 = (int *)(a2 + 100);
  double v7 = *(double *)(a2 + 24) * 1000.0;
  int v39 = 0;
  int AcqWindow = BlueFin::GlMeSrdAidingMgr::GetAcqWindow(a1, (uint64_t)&v22, (unsigned __int8 *)(a2 + 100), 0, 0, v7);
  BlueFin::GlMeAcqWin::OverrideAcqWinWithDspMeas((uint64_t)&v22, (const BlueFin::GlMeDSPMeas *)a2, 0);
  BlueFin::GlMeSrdAidingMgr::FormatAidingForEsw((uint64_t)a1, (uint64_t)v21, (uint64_t)&v22, AcqWindow, v6, *(double *)(a2 + 24) * 1000.0);
  char AidIdFromSignalId = BlueFin::GlMeSrdAidingMgr::GetAidIdFromSignalId(a1, (const BlueFin::GlSignalId *)v6);
  *(_DWORD *)(*((void *)a1 + 160) + (((unint64_t)v23 >> 3) & 0x1C)) |= 1 << v23;
  double v9 = *(double *)(a2 + 24) * 1000.0;
  double v10 = fmod(v9, 4294967300.0);
  if (v9 <= 4294967300.0) {
    double v10 = v9;
  }
  if (v10 < -4294967300.0) {
    double v10 = -fmod(-v10, 4294967300.0);
  }
  if (v10 < 0.0) {
    unsigned int v11 = --v10;
  }
  else {
    unsigned int v11 = v10;
  }
  *((_DWORD *)a1 + *(unsigned __int8 *)v6 + 7) = v11;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 80))(a3);
  uint64_t v16 = 0;
  v17[0] = 0;
  *(_DWORD *)((char *)v17 + 7) = 0;
  v17[2] = v12;
  int v18 = 0;
  __int16 v19 = 0;
  (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, char *, unsigned char *))(*(void *)v14 + 72))(v14, &v16, 1, &AidIdFromSignalId, v21);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v16);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v16);
  return 1;
}

void sub_263A742D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdSatPostSearchMgr::~GlMeSrdSatPostSearchMgr(BlueFin::GlMeSrdSatPostSearchMgr *this)
{
  if (BlueFin::GlSetBase::HasAny(this))
  {
    DeviceFaultNotify("glmesrd_post_search_mgr.cpp", 35, "~GlMeSrdSatPostSearchMgr", (char)"m_otSatSetInPostSearch.IsEmpty()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_post_search_mgr.cpp", 35, "m_otSatSetInPostSearch.IsEmpty()");
  }
}

uint64_t BlueFin::GlMeSrdSatMgr::NumSatInKillProcess(BlueFin::GlMeSrdSatMgr *this)
{
  int v2 = BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatMgr *)((char *)this + 152));
  int v3 = BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatMgr *)((char *)this + 184)) + v2;
  return v3 + BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatMgr *)((char *)this + 216));
}

uint64_t BlueFin::GlMeSrdSatMgr::AddCarrier(uint64_t result, unsigned int a2, char a3, char a4, int a5)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 6288);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 52 * a2 + 5);
  if (*(unsigned char *)(v9 + 52 * a2 + 5))
  {
    uint64_t v12 = (int *)(v9 + 52 * a2 + 8);
    while (1)
    {
      int v13 = *v12++;
      if (v13 == a5) {
        break;
      }
      if (!--v11) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v18, a2, a5);
    *(_DWORD *)(*(void *)(v8 + 6304) + 4 * ((v18[0] + 100 * v19) >> 5)) |= 1 << (v18[0] + 100 * v19);
    uint64_t v14 = *(void *)(v8 + 6288) + 52 * a2;
    uint64_t v15 = v14 + 2 * a5;
    *(unsigned char *)(v15 + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    *(unsigned char *)(v15 + 33) = a4;
    *(unsigned char *)(v14 + *(unsigned __int8 *)(v14 + 5) + 1) = a3;
    uint64_t v16 = *(void *)(v8 + 6288) + 52 * a2;
    uint64_t v17 = *(unsigned __int8 *)(v16 + 5);
    *(unsigned char *)(v16 + 5) = v17 + 1;
    *(_DWORD *)(v16 + 4 * v17 + 8) = a5;
    ++*(unsigned char *)(v8 + 49);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::EswKilledSat(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 15);
  int v3 = (char *)this + 120;
  uint64_t v5 = a2 >> 5;
  char v6 = a2 & 0x1F;
  uint64_t v7 = 1 << (a2 & 0x1F);
  uint64_t v8 = *(unsigned int *)(*((void *)v3 - 4) + 4 * v5);
  if ((v7 & (*(_DWORD *)(v4 + 4 * v5) | v8)) == 0)
  {
    uint64_t v11 = "IsSatAllocated(ucSatid)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 803, "EswKilledSat", (char)"IsSatAllocated(ucSatid)");
    int v12 = 803;
    goto LABEL_6;
  }
  if ((v7 & v8) != 0)
  {
    uint64_t v11 = "!m_otSetSatidDeferredCreate.Has(ucSatid)";
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 804, "EswKilledSat", (char)"!m_otSetSatidDeferredCreate.Has(ucSatid)");
    int v12 = 804;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", v12, v11);
  }
  BlueFin::GlSetBase::Remove((uint64_t)v3, a2);
  *((unsigned char *)this + 49) -= *(unsigned char *)(*((void *)this + 786) + 52 * a2 + 5);
  BlueFin::GlSetBase::Remove((uint64_t)this + 360, a2);
  uint64_t result = BlueFin::GlSatCarrIdSet::RemoveAllCarr((BlueFin::GlMeSrdSatMgr *)((char *)this + 280), a2);
  *(_DWORD *)(*((void *)this + 27) + 4 * v5) |= 1 << v6;
  return result;
}

uint64_t BlueFin::GlMeSrdSatMgr::GetActiveTimeMs(BlueFin::GlMeSrdSatMgr *this, unsigned int a2, int a3)
{
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 45) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 980, "GetActiveTimeMs", (char)"IsActive(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 980, "IsActive(ucSatid)");
  }
  return (a3 - *(_DWORD *)(*((void *)this + 786) + 52 * a2 + 48));
}

uint64_t BlueFin::GlMeSrdSatMgr::GetLastActiveMs(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  uint64_t v3 = 1 << (a2 & 0x1F);
  if ((v3 & *(_DWORD *)(*((void *)this + 15) + 4 * v2)) == 0
    && (v3 & *(_DWORD *)(*((void *)this + 11) + 4 * v2)) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 987, "GetLastActiveMs", (char)"IsSatAllocated(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 987, "IsSatAllocated(ucSatid)");
  }
  return *(unsigned int *)(*((void *)this + 786) + 52 * a2 + 48);
}

uint64_t BlueFin::GlMeSrdSatMgr::GetStartupBsId(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  uint64_t v2 = a2 >> 5;
  uint64_t v3 = 1 << (a2 & 0x1F);
  if ((v3 & *(_DWORD *)(*((void *)this + 15) + 4 * v2)) == 0
    && (v3 & *(_DWORD *)(*((void *)this + 11) + 4 * v2)) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 994, "GetStartupBsId", (char)"IsSatAllocated(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 994, "IsSatAllocated(ucSatid)");
  }
  return *(unsigned __int8 *)(*((void *)this + 786) + 52 * a2 + 1);
}

uint64_t BlueFin::GlMeSrdSatMgr::GetActiveBsId(BlueFin::GlMeSrdSatMgr *this, unsigned int a2)
{
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 45) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_sat_mgr.cpp", 1002, "GetActiveBsId", (char)"IsActive(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_mgr.cpp", 1002, "IsActive(ucSatid)");
  }
  return *(unsigned __int8 *)(*((void *)this + 786) + 52 * a2 + 45);
}

void BlueFin::GlMeSrdSearchMgr::~GlMeSrdSearchMgr(BlueFin::GlMeSrdSearchMgr *this)
{
  *(void *)this = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_270EBBA48;
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(this);

  JUMPOUT(0x263E6DD80);
}

unsigned __int8 *BlueFin::GlMeSrdSearchMgr::GetGpsSatWithinZoomWindow@<X0>(BlueFin::GlMeSrdSearchMgr *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 12) = 0;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 4;
  *(void *)(a3 + 20) = 0;
  unsigned __int8 v11 = *((unsigned char *)this + 136);
  memcpy(v15, *((const void **)this + 16), 4 * v11);
  *(_WORD *)int v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v11); v12 != v11; uint64_t result = BlueFin::GlSetIterator::operator++(&v11))
  {
    unint64_t v7 = v13[0];
    BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), v13[0], &v10);
    if (v10 - 1 <= 0x1F)
    {
      uint64_t v8 = (BlueFin::GlMeSrdSatMgr *)*((void *)this + 2);
      if ((*(unsigned int *)(*((void *)v8 + 45) + 4 * (v7 >> 5)) >> (v7 & 0x1F)))
      {
        uint64_t ActiveBsId = BlueFin::GlMeSrdSatMgr::GetActiveBsId(v8, v7);
        if (*(unsigned __int16 *)((*(uint64_t (**)(void, uint64_t))(**((void **)this + 38) + 248))(*((void *)this + 38), ActiveBsId)+ 10) <= a2)*(_DWORD *)(*(void *)a3 + 4 * (v7 >> 5)) |= 1 << (v7 & 0x1F); {
      }
        }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdSearchMgr::GetGlnsSatWithinZoomWindow@<X0>(BlueFin::GlMeSrdSearchMgr *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 12) = 0;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 4;
  *(void *)(a3 + 20) = 0;
  unsigned __int8 v11 = *((unsigned char *)this + 136);
  memcpy(v15, *((const void **)this + 16), 4 * v11);
  *(_WORD *)int v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v11); v12 != v11; uint64_t result = BlueFin::GlSetIterator::operator++(&v11))
  {
    unint64_t v7 = v13[0];
    BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), v13[0], &v10);
    if (v10 - 52 <= 0xD)
    {
      uint64_t v8 = (BlueFin::GlMeSrdSatMgr *)*((void *)this + 2);
      if ((*(unsigned int *)(*((void *)v8 + 45) + 4 * (v7 >> 5)) >> (v7 & 0x1F)))
      {
        uint64_t ActiveBsId = BlueFin::GlMeSrdSatMgr::GetActiveBsId(v8, v7);
        if (*(unsigned __int16 *)((*(uint64_t (**)(void, uint64_t))(**((void **)this + 38) + 248))(*((void *)this + 38), ActiveBsId)+ 10) <= a2)*(_DWORD *)(*(void *)a3 + 4 * (v7 >> 5)) |= 1 << (v7 & 0x1F); {
      }
        }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdSearchMgr::GetGalSatWithinZoomWindow@<X0>(BlueFin::GlMeSrdSearchMgr *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 12) = 0;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 4;
  *(void *)(a3 + 20) = 0;
  unsigned __int8 v11 = *((unsigned char *)this + 136);
  memcpy(v15, *((const void **)this + 16), 4 * v11);
  *(_WORD *)int v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v11); v12 != v11; uint64_t result = BlueFin::GlSetIterator::operator++(&v11))
  {
    unint64_t v7 = v13[0];
    BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), v13[0], &v10);
    if ((v10 + 117) <= 0x23u)
    {
      uint64_t v8 = (BlueFin::GlMeSrdSatMgr *)*((void *)this + 2);
      if ((*(unsigned int *)(*((void *)v8 + 45) + 4 * (v7 >> 5)) >> (v7 & 0x1F)))
      {
        uint64_t ActiveBsId = BlueFin::GlMeSrdSatMgr::GetActiveBsId(v8, v7);
        if (*(unsigned __int16 *)((*(uint64_t (**)(void, uint64_t))(**((void **)this + 38) + 248))(*((void *)this + 38), ActiveBsId)+ 10) <= a2)*(_DWORD *)(*(void *)a3 + 4 * (v7 >> 5)) |= 1 << (v7 & 0x1F); {
      }
        }
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::PostponeRestartToRmReport()
{
  return 0;
}

void BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(BlueFin::GlMeSrdSearchMgrBase *this)
{
  *(void *)this = &unk_270EBBAC0;
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSearchMgrBase *)((char *)this + 128)))
  {
    uint64_t v2 = "m_otSetSatIdInUse.IsEmpty()";
    int v3 = 57;
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 57, "~GlMeSrdSearchMgrBase", (char)"m_otSetSatIdInUse.IsEmpty()");
    goto LABEL_6;
  }
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSearchMgrBase *)((char *)this + 80)))
  {
    uint64_t v2 = "m_otSetSvidInUse.IsEmpty()";
    int v3 = 58;
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 58, "~GlMeSrdSearchMgrBase", (char)"m_otSetSvidInUse.IsEmpty()");
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", v3, v2);
  }
}

double BlueFin::GlMeSrdSearchMgrBase::SetSvidToSearch(BlueFin::GlMeSrdSearchMgrBase *this, const BlueFin::GlSvIdSet *a2)
{
  uint64_t v4 = (char *)this + 256;
  BlueFin::GlSetBase::operator=((uint64_t)this + 256, (uint64_t)a2);
  long long v5 = *(_OWORD *)((char *)a2 + 12);
  *(_OWORD *)(v4 + 28) = *(_OWORD *)((char *)a2 + 28);
  *(_OWORD *)(v4 + 12) = v5;

  return BlueFin::GlMeSrdSearchMgrBase::RemoveInvalidSvId(this, (BlueFin::GlSvIdSet *)v4);
}

uint64_t BlueFin::GlMeSrdSearchMgrBase::SmIdReport(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = a2 >> 5;
  if ((((unint64_t)*(unsigned int *)(*(void *)(this + 128) + 4 * v3) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_search_mgr_base.cpp", 338, "SmIdReport", (char)"GetSatidInUse().Has(ucSatid)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_search_mgr_base.cpp", 338, "GetSatidInUse().Has(ucSatid)");
  }
  if (a3 == 8) {
    *(_DWORD *)(*(void *)(this + 160) + 4 * v3) |= 1 << (a2 & 0x1F);
  }
  return this;
}

const char *BlueFin::GlMeSrdSearchMgrBase::GetName(BlueFin::GlMeSrdSearchMgrBase *this)
{
  if (this > 9) {
    return "SRCHMGR_ID_UNKNOWMN";
  }
  else {
    return off_2655D8358[(int)this];
  }
}

uint64_t BlueFin::GlMeSrdSharedSatSearchMgr::ReleaseSatUnaltered(BlueFin::GlMeSrdSharedSatSearchMgr *this, unsigned int a2)
{
  BlueFin::GlMeSrdSatMgr::GetSvid(*((void **)this + 2), a2, &v5);
  BlueFin::GlMeSrdSharedSatSearchMgr::MarkSvidAsScanned((uint64_t)this, v5);

  return BlueFin::GlMeSrdSearchMgrBase::ReleaseSatUnaltered(this, a2);
}

uint64_t BlueFin::GlMeSrdSharedSatSearchMgr::MarkSvidAsScanned(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2 = (_DWORD *)(*(void *)(result + 368) + 4 * (a2 >> 5));
  uint64_t v3 = *v2;
  char v4 = a2 & 0x1F;
  uint64_t v5 = 1 << (a2 & 0x1F);
  if ((v5 & v3) == 0)
  {
    LODWORD(v6) = 1 << v4;
    goto LABEL_6;
  }
  if (!*(unsigned char *)(result + 416))
  {
    unint64_t v7 = "m_bNextRotationStarted";
    DeviceFaultNotify("glmesrd_shared_sat_search_mgr.cpp", 282, "MarkSvidAsScanned", (char)"m_bNextRotationStarted");
    int v8 = 282;
    goto LABEL_9;
  }
  uint64_t v2 = (_DWORD *)(*(void *)(result + 424) + 4 * (a2 >> 5));
  uint64_t v6 = *v2;
  if ((v5 & v6) != 0)
  {
    unint64_t v7 = "m_otSvidNextRotationScanned.Missing(rotSvid)";
    DeviceFaultNotify("glmesrd_shared_sat_search_mgr.cpp", 283, "MarkSvidAsScanned", (char)"m_otSvidNextRotationScanned.Missing(rotSvid)");
    int v8 = 283;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_shared_sat_search_mgr.cpp", v8, v7);
  }
  LODWORD(v3) = 1 << v4;
LABEL_6:
  *uint64_t v2 = v6 | v3;
  return result;
}

void BlueFin::GlMeSrdSharedSatSearchMgr::~GlMeSrdSharedSatSearchMgr(BlueFin::GlMeSrdSharedSatSearchMgr *this)
{
  BlueFin::GlMeSrdSearchMgrBase::~GlMeSrdSearchMgrBase(this);

  JUMPOUT(0x263E6DD80);
}

void BlueFin::GlMeSrdSatTrackMgr::~GlMeSrdSatTrackMgr(BlueFin::GlMeSrdSatTrackMgr *this)
{
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4000)))
  {
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 64, "~GlMeSrdSatTrackMgr", (char)"m_otSetSatCarrIdInUse.IsEmpty()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 64, "m_otSetSatCarrIdInUse.IsEmpty()");
  }
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::RemoveSatCarr(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSatCarrId *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 3) + 352))(*((void *)this + 3));
  int v5 = *(unsigned __int8 *)a2;
  if (v4
    || (unsigned int v6 = v5 + 100 * *((unsigned __int8 *)a2 + 4),
        uint64_t v7 = *(unsigned int *)(*((void *)this + 500) + 4 * (v6 >> 5)),
        uint64_t v8 = 1 << (v6 & 0x1F),
        (v8 & v7) == 0))
  {
    SignalIndexStr = BlueFin::GlSatCarrId::GetSignalIndexStr(a2);
    GlCustomLog(14, "GlMeSrdSatTrackMgr::RemoveSatCarr: Sat %u CarrBand %s\n", v5, SignalIndexStr);
    unsigned __int8 v23 = *((unsigned char *)this + 4008);
    memcpy(v27, *((const void **)this + 500), 4 * v23);
    unsigned __int16 v25 = 0;
    unsigned __int8 v24 = 0;
    int v26 = v27[0];
    BlueFin::GlSetIterator::operator++(&v23);
    while (v24 != v23)
    {
      unsigned int v10 = v25;
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v22, v25);
      int v11 = v22[0];
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v21, v10);
      unsigned __int8 v12 = BlueFin::GlSatCarrId::GetSignalIndexStr((BlueFin::GlSatCarrId *)v21);
      GlCustomLog(14, "    [RemoveSatCarr]InUse: Sat %u CarrBand %s\n", v11, v12);
      BlueFin::GlSetIterator::operator++(&v23);
    }
    int v13 = BlueFin::GlSetBase::Cnt((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4000));
    GlCustomLog(14, "    [RemoveSatCarr]InUseCnt: %u of %u\n", v13, 123);
    unsigned int v14 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
    uint64_t v8 = 1 << (v14 & 0x1F);
    uint64_t v7 = *(unsigned int *)(*((void *)this + 500) + 4 * (v14 >> 5));
  }
  if ((v8 & v7) == 0)
  {
    unsigned __int8 v19 = "m_otSetSatCarrIdInUse.Has(otSatCarrId)";
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 132, "RemoveSatCarr", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    int v20 = 132;
LABEL_14:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", v20, v19);
  }
  unsigned int TrackChannel = BlueFin::GlMeSrdSatMgr::GetTrackChannel(*((void *)this + 1), (unsigned __int8 *)a2);
  if (TrackChannel > 0x7A
    || (uint64_t v16 = TrackChannel >> 5,
        char v17 = TrackChannel & 0x1F,
        (((unint64_t)*(unsigned int *)(*((void *)this + 496) + 4 * v16) >> (TrackChannel & 0x1F)) & 1) != 0))
  {
    unsigned __int8 v19 = "ucTrackChannel < _DIM(m_aotSatTrackData) && m_otSetTrackChannelsAvailable.Missing(ucTrackChannel)";
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 136, "RemoveSatCarr", (char)"ucTrackChannel < _DIM(m_aotSatTrackData) && m_otSetTrackChannelsAvailable.Missing(ucTrackChannel)");
    int v20 = 136;
    goto LABEL_14;
  }
  BlueFin::GlSetBase::Remove((uint64_t)this + 4000, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4160, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4240, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4320, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4400, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4480, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4560, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4640, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4880, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 4960, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 5104, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 5184, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  BlueFin::GlSetBase::Remove((uint64_t)this + 5264, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  uint64_t result = BlueFin::GlSetBase::Remove((uint64_t)this + 5344, (__int16)(*(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4)));
  *(_DWORD *)(*((void *)this + 496) + 4 * v16) |= 1 << v17;
  if (*((unsigned char *)this + 7252)) {
    *((unsigned char *)this + 7252) = 0;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::RemoveSat(BlueFin::GlMeSrdSatMgr **this, unsigned int a2)
{
  unsigned int NumSignals = BlueFin::GlMeSrdSatMgr::GetNumSignals(this[1], a2);
  if (NumSignals)
  {
    unsigned int v5 = NumSignals;
    int v6 = 0;
    do
    {
      int SignalIndex = BlueFin::GlMeSrdSatMgr::GetSignalIndex(this[1], a2, v6);
      BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v9, a2, SignalIndex);
      BlueFin::GlMeSrdSatTrackMgr::RemoveSatCarr((BlueFin::GlMeSrdSatTrackMgr *)this, (const BlueFin::GlSatCarrId *)v9);
      ++v6;
    }
    while (v5 > v6);
  }
  BlueFin::GlSetBase::Remove((uint64_t)(this + 510), a2);
  BlueFin::GlSetBase::Remove((uint64_t)(this + 634), a2);
  return BlueFin::GlSetBase::Remove((uint64_t)(this + 630), a2);
}

unsigned __int8 *BlueFin::GlMeSrdSatTrackMgr::GetSetSvidList@<X0>(BlueFin::GlMeSrdSatTrackMgr *this@<X0>, uint64_t a2@<X8>)
{
  BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 4000), (uint64_t)v5);
  return BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(*((void **)this + 1), (uint64_t)v5, a2);
}

unsigned __int8 *BlueFin::GlMeSrdSatTrackMgr::GetSetSvidValidTrackingList@<X0>(const void **this@<X0>, uint64_t a2@<X8>)
{
  int v4 = this + 500;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v10, (unsigned int *)v11, 0x10u, this + 530);
  uint64_t v16 = &v18;
  char v17 = 16;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v10, (int **)&v16);
  BlueFin::GlSetBase::operator=((uint64_t)&v10, (uint64_t)&v16);
  v11[0] = v18;
  v11[1] = v19;
  double v11[2] = v20;
  void v11[3] = v21;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v12, (unsigned int *)v13, 0x10u, v4);
  uint64_t v16 = &v18;
  char v17 = 16;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v12, (int **)&v16, &v10);
  BlueFin::GlSetBase::operator=((uint64_t)&v12, (uint64_t)&v16);
  v13[0] = v18;
  v13[1] = v19;
  unsigned __int8 v13[2] = v20;
  v13[3] = v21;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v8, (unsigned int *)v9, 0x10u, this + 580);
  uint64_t v16 = &v18;
  char v17 = 16;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v8, (int **)&v16);
  BlueFin::GlSetBase::operator=((uint64_t)&v8, (uint64_t)&v16);
  v9[0] = v18;
  v9[1] = v19;
  void v9[2] = v20;
  v9[3] = v21;
  unsigned int v5 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v14, (unsigned int *)v15, 0x10u, &v12);
  uint64_t v16 = &v18;
  char v17 = 16;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v5, (int **)&v16, &v8);
  int v6 = (BlueFin::GlSatCarrIdSet *)BlueFin::GlSetBase::operator=((uint64_t)v14, (uint64_t)&v16);
  v15[0] = v18;
  v15[1] = v19;
  _OWORD v15[2] = v20;
  v15[3] = v21;
  BlueFin::GlSatCarrIdSet::GetSatIdSetPrimaryCarrier(v6, (uint64_t)&v16);
  if ((*(unsigned int (**)(void))(*(void *)this[3] + 264))())
  {
    BlueFin::GlSatCarrIdSet::GetSatIdSetAnyCarrier((BlueFin::GlSatCarrIdSet *)v14, (uint64_t)&v12);
    BlueFin::GlSetBase::operator=((uint64_t)&v16, (uint64_t)&v12);
    long long v18 = v13[0];
  }
  return BlueFin::GlMeSrdSatMgr::GetSvidSetFromSatidSet(this[1], (uint64_t)&v16, a2);
}

void *BlueFin::GlMeSrdSatTrackMgr::TrackInvalid(void *this, const BlueFin::GlSatCarrId *a2, int a3, int a4)
{
  unsigned int v4 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  uint64_t v5 = v4 >> 5;
  char v6 = v4 & 0x1F;
  if ((((unint64_t)*(unsigned int *)(this[500] + 4 * v5) >> v6) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 467, "TrackInvalid", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 467, "m_otSetSatCarrIdInUse.Has(otSatCarrId)");
  }
  int v7 = 1 << v6;
  *(_DWORD *)(this[530] + 4 * v5) |= v7;
  if (a3) {
    *(_DWORD *)(this[570] + 4 * v5) |= v7;
  }
  if (a4) {
    *(_DWORD *)(this[580] + 4 * v5) |= v7;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::RequestBitAlignment(uint64_t this, const BlueFin::GlSatCarrId *a2)
{
  unsigned int v2 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  uint64_t v3 = v2 >> 5;
  char v4 = v2 & 0x1F;
  if ((((unint64_t)*(unsigned int *)(*(void *)(this + 4000) + 4 * v3) >> v4) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 483, "RequestBitAlignment", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 483, "m_otSetSatCarrIdInUse.Has(otSatCarrId)");
  }
  *(_DWORD *)(*(void *)(this + 4880) + 4 * v3) |= 1 << v4;
  return this;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::SnapToAidingInDutyCycle(uint64_t this, const BlueFin::GlSatCarrId *a2)
{
  unsigned int v2 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  uint64_t v3 = v2 >> 5;
  char v4 = v2 & 0x1F;
  if ((((unint64_t)*(unsigned int *)(*(void *)(this + 4000) + 4 * v3) >> v4) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 491, "SnapToAidingInDutyCycle", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 491, "m_otSetSatCarrIdInUse.Has(otSatCarrId)");
  }
  *(_DWORD *)(*(void *)(this + 4480) + 4 * v3) |= 1 << v4;
  return this;
}

uint64_t BlueFin::GlMeSrdSatTrackMgr::RequestBitAlignmentCrossCheck(uint64_t this, const BlueFin::GlSatCarrId *a2)
{
  unsigned int v2 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  uint64_t v3 = v2 >> 5;
  char v4 = v2 & 0x1F;
  if ((((unint64_t)*(unsigned int *)(*(void *)(this + 4000) + 4 * v3) >> v4) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 499, "RequestBitAlignmentCrossCheck", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 499, "m_otSetSatCarrIdInUse.Has(otSatCarrId)");
  }
  *(_DWORD *)(*(void *)(this + 4960) + 4 * v3) |= 1 << v4;
  return this;
}

BOOL BlueFin::GlMeSrdSatTrackMgr::IsPostFrame(BlueFin::GlMeSrdSatTrackMgr *this, const BlueFin::GlSatCarrId *a2)
{
  unsigned int v2 = *(unsigned __int8 *)a2 + 100 * *((unsigned __int8 *)a2 + 4);
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 500) + 4 * (v2 >> 5)) >> (v2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_track_mgr.cpp", 679, "IsPostFrame", (char)"m_otSetSatCarrIdInUse.Has(otSatCarrId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 679, "m_otSetSatCarrIdInUse.Has(otSatCarrId)");
  }
  unsigned int TrackChannel = BlueFin::GlMeSrdSatMgr::GetTrackChannel(*((void *)this + 1), (unsigned __int8 *)a2);
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 510)
                                           + (((unint64_t)*(unsigned __int8 *)a2 >> 3) & 0x1C)) >> (*(unsigned char *)a2 & 0x1F)) & 1) != 0)
    return 0;
  int v7 = (char *)this + 32 * TrackChannel;
  if (!*((_WORD *)v7 + 16)) {
    return 0;
  }
  int v8 = *((_DWORD *)v7 + 10);
  return v8 == 12 || v8 == 17;
}

_WORD *BlueFin::GlMeSrdSatTrackMgr::UpdateGridCtrl(BlueFin::GlMeSrdSatTrackMgr *this, BlueFin::GlMeSrdTransaction *a2, const BlueFin::GlSignalId *a3, BlueFin::GlMeSrdTransaction *a4)
{
  int v8 = (unsigned __int8 *)this + 7492;
  if ((*(unsigned int (**)(void))(**((void **)this + 3) + 728))(*((void *)this + 3)) == 255) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = (*(uint64_t (**)(void))(**((void **)this + 3) + 728))(*((void *)this + 3));
  }
  if (!(*(unsigned int (**)(void))(**((void **)this + 3) + 712))(*((void *)this + 3)))
  {
    int v15 = *(unsigned __int8 *)a3;
    uint64_t result = (_WORD *)BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 7456, v15);
    if (*(unsigned __int8 *)(*((void *)this + 934) + v15 - *v8) != 255) {
      return result;
    }
    uint64_t result = (_WORD *)(*(uint64_t (**)(void, const BlueFin::GlSignalId *))(**((void **)this + 3) + 720))(*((void *)this + 3), a3);
    if (!result) {
      return result;
    }
    *(_WORD *)BlueFin::GlArray::Add((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 7456), *(unsigned __int8 *)a3) = v9;
    goto LABEL_21;
  }
  int v10 = *((_DWORD *)this + 1812) / 0x3E8u
      - 255 * ((16843010 * (unint64_t)(*((_DWORD *)this + 1812) / 0x3E8u)) >> 32);
  int v11 = *(unsigned __int8 *)a3;
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 8264, v11);
  if (*(unsigned __int8 *)(*((void *)this + 1035) + v11 - v8[808]) != 255)
  {
    unsigned int v9 = *(unsigned __int8 *)BlueFin::GlArray::Get((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 8264), *(unsigned __int8 *)a3);
    unsigned __int8 v12 = (BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 7456);
    uint64_t result = (_WORD *)BlueFin::GlArray::Get(v12, *(unsigned __int8 *)a3);
    if (result)
    {
      if (v9 == *result || (unsigned __int16)(v10 - HIBYTE(*result)) <= 4u) {
        return result;
      }
    }
    else
    {
      uint64_t result = BlueFin::GlArray::Add(v12, *(unsigned __int8 *)a3);
      if (!result) {
        return result;
      }
    }
    *uint64_t result = v9 | ((_WORD)v10 << 8);
LABEL_21:
    char v17 = (BlueFin *)*((unsigned int *)a3 + 1);
    return (_WORD *)BlueFin::SendGridCtrlRpc(v17, a2, a4, v9);
  }
  int v16 = *(unsigned __int8 *)a3;
  uint64_t result = (_WORD *)BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 7456, v16);
  if (*(unsigned __int8 *)(*((void *)this + 934) + v16 - *v8) != 255)
  {
    uint64_t result = (_WORD *)BlueFin::GlArray::Get((BlueFin::GlMeSrdSatTrackMgr *)((char *)this + 7456), *(unsigned __int8 *)a3);
    if (*(unsigned char *)result != 0xFF && (unsigned __int16)(v10 - HIBYTE(*result)) >= 5u)
    {
      *uint64_t result = ((_WORD)v10 << 8) | 0xFF;
      BlueFin::SendGridCtrlRpc((BlueFin *)*((unsigned int *)a3 + 1), a2, a4, 0xFFu);
      return (_WORD *)GlCustomLog(15, "GlMeSrdSatTrackMgr::UpdateGridCtrl SV %d removed from grid list\n", *(unsigned __int8 *)a3);
    }
  }
  return result;
}

BOOL BlueFin::GlMeSrdSatTrackMgr::MeasVsAidingBitTimeNotEqual(BlueFin::GlMeSrdSatTrackMgr *this, double a2, double a3)
{
  if (a2 * 1000.0 <= 0.0)
  {
    if (a2 * 1000.0 >= 0.0)
    {
      unsigned int v4 = 0;
      goto LABEL_7;
    }
    double v3 = -0.5;
  }
  else
  {
    double v3 = 0.5;
  }
  unsigned int v4 = (int)(a2 * 1000.0 + v3);
LABEL_7:
  double v5 = a3 * 1000.0;
  if (a3 * 1000.0 <= 0.0)
  {
    if (v5 >= 0.0)
    {
      unsigned int v7 = 0;
      goto LABEL_13;
    }
    double v6 = -0.5;
  }
  else
  {
    double v6 = 0.5;
  }
  unsigned int v7 = (int)(v5 + v6);
LABEL_13:
  unsigned int v8 = v4 % this;
  unsigned int v9 = v7 % this;
  if (v4 % this != v7 % this) {
    GlCustomLog(14, "GlMeSrdSatTrackMgr::MeasVsAidingBitTimeNotEqual - MeasLs(%lf) AidLs(%lf) MeasLms(%u) AidLms(%u) MsPerBit(%hu) %u != %u\n", a2, a3, v4, v7, this, v4 % this, v7 % this);
  }
  return v8 != v9;
}

uint64_t BlueFin::SendGridCtrlRpc(BlueFin *this, const BlueFin::GlSignalId *a2, BlueFin::GlMeSrdTransaction *a3, unsigned int a4)
{
  uint64_t EswSignalIndex = BlueFin::GlMeSrdAsicUnitConverter::GetEswSignalIndex(this);
  if (a4 > 0xE)
  {
    if (a4 != 255)
    {
      DeviceFaultNotify("glmesrd_track_mgr.cpp", 1489, "SendGridCtrlRpc", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_track_mgr.cpp", 1489, "0");
    }
    int v10 = 0;
  }
  else
  {
    int v8 = 4 * (a4 & 0x1F);
    int v9 = v8 | 0x100;
    int v10 = v8 | 0x80;
    if (((1 << a4) & 0x62DA) != 0) {
      int v10 = v9;
    }
  }
  int v14 = v10 | 0x2000;
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 48))(*((void *)a2 + 3));
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
  return (*(uint64_t (**)(uint64_t, const BlueFin::GlSignalId *, BlueFin::GlMeSrdTransaction *, uint64_t, int *))(*(void *)v12 + 128))(v12, a2, a3, EswSignalIndex, &v14);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetRfMode(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1412) = a2;
  return BlueFin::GlMeSrdAsicConfig::UpdatePerformanceModes(this);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetEnableVLP(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2196) = a2;
  return BlueFin::GlMeSrdAsicConfig::UpdatePerformanceModes(this);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetRfParams(uint64_t this, int a2, char a3, char a4)
{
  *(_DWORD *)(this + 1412) = a2;
  *(unsigned char *)(this + 1416) = a3;
  *(unsigned char *)(this + 2196) = a4;
  return BlueFin::GlMeSrdAsicConfig::UpdatePerformanceModes(this);
}

const char *BlueFin::GlMeSrdAsicConfig::AsicVersionToName(BlueFin::GlMeSrdAsicConfig *this, int a2)
{
  uint64_t result = "Unknown";
  if (a2 <= 822018065)
  {
    switch(a2)
    {
      case 805306386:
        uint64_t result = "MNW A0 FPGA";
        break;
      case 805306387:
        uint64_t result = "MNW A0 ASIC";
        break;
      case 805306388:
        uint64_t result = "MNW B0 FPGA";
        break;
      case 805306389:
        uint64_t result = "MNW B0 ASIC";
        break;
      default:
        if (a2 == 821952533) {
          uint64_t result = "MNW FE ASIC";
        }
        break;
    }
  }
  else if (a2 > 822083604)
  {
    if (a2 == 838795285) {
      double v3 = "FMNW FF ASIC";
    }
    else {
      double v3 = "Unknown";
    }
    if (a2 == 838729749) {
      unsigned int v4 = "FMNW FE ASIC";
    }
    else {
      unsigned int v4 = v3;
    }
    if (a2 == 822083605) {
      return "FMNW B0 ASIC";
    }
    else {
      return v4;
    }
  }
  else
  {
    switch(a2)
    {
      case 822018066:
      case 822018068:
        uint64_t result = "MNW FF FPGA";
        break;
      case 822018067:
      case 822018069:
        uint64_t result = "MNW FF ASIC";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsMPFEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 536);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL1PerfMode(uint64_t result, int a2)
{
  if (a2 > 5 || a2 == 1)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 2089, "SetL1PerfMode", (char)"(etL1PerfMode <= RADIO_PERF_AUTO) && (etL1PerfMode != RADIO_PERF_LPA)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 2089, "(etL1PerfMode <= RADIO_PERF_AUTO) && (etL1PerfMode != RADIO_PERF_LPA)");
  }
  *(_DWORD *)(result + 218bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5DrPerfMode(uint64_t result, unsigned int a2)
{
  if (a2 >= 2 && a2 != 4)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 2095, "SetL5DrPerfMode", (char)"(etL5DrPerfMode == RADIO_PERF_LP) || (etL5DrPerfMode == RADIO_PERF_LPA) || (etL5DrPerfMode == RADIO_PERF_VLP)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 2095, "(etL5DrPerfMode == RADIO_PERF_LP) || (etL5DrPerfMode == RADIO_PERF_LPA) || (etL5DrPerfMode == RADIO_PERF_VLP)");
  }
  *(_DWORD *)(result + 2188) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5ArPerfMode(uint64_t result, unsigned int a2)
{
  if (a2 > 5 || ((1 << a2) & 0x25) == 0)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 2101, "SetL5ArPerfMode", (char)"(etL5ArPerfMode == RADIO_PERF_LP) || (etL5ArPerfMode == RADIO_PERF_AUTO) || (etL5ArPerfMode == RADIO_PERF_PM)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 2101, "(etL5ArPerfMode == RADIO_PERF_LP) || (etL5ArPerfMode == RADIO_PERF_AUTO) || (etL5ArPerfMode == RADIO_PERF_PM)");
  }
  *(_DWORD *)(result + 2192) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetParam(BlueFin::GlMeSrdAsicConfig *this, const char *a2, BOOL *a3, BOOL *a4, const char **a5)
{
  char v7 = (char)a2;
  __endptr = 0;
  int v9 = strtoul((const char *)this, &__endptr, 0);
  int v10 = __endptr;
  *(void *)a4 = __endptr;
  if (v10 == (char *)this || *v10 != v7)
  {
    uint64_t result = 0;
    *(void *)a4 = this;
  }
  else
  {
    *a3 = v9 != 0;
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetParam(BlueFin::GlMeSrdAsicConfig *this, const char *a2, int *a3, int *a4, const char **a5)
{
  char v7 = (char)a2;
  int v8 = *(unsigned __int8 *)this;
  if (v8 == 45) {
    int v9 = (char *)this + 1;
  }
  else {
    int v9 = (const char *)this;
  }
  __endptr = 0;
  int v10 = strtoul(v9, &__endptr, 0);
  uint64_t v11 = __endptr;
  *(void *)a4 = __endptr;
  if (v11 == v9 || *v11 != v7)
  {
    uint64_t result = 0;
    *(void *)a4 = v9;
  }
  else
  {
    if (v8 == 45) {
      int v12 = -v10;
    }
    else {
      int v12 = v10;
    }
    *a3 = v12;
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlSvIdSet::SetAll(void **this)
{
  memset(*this, 255, 4 * *((unsigned __int8 *)this + 8));
  int ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)this, 0);
  uint64_t result = BlueFin::GlSetBase::SetULong((uint64_t)this, 0, ULong & 0xFFFFFFFE);
  unsigned int v4 = (unsigned __int16)(32 * ((_BYTE)this[1] & 0x3F) - 1);
  if (v4 >= 0xBE)
  {
    unsigned int v5 = 189;
    char v6 = -67;
    do
    {
      __int16 v7 = v6 & 0x1F;
      if ((v6 & 0x1F) != 0)
      {
        int v8 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)this, (v5 >> 5));
        uint64_t result = BlueFin::GlSetBase::SetULong((uint64_t)this, (v5 >> 5), v8 & ~(-1 << v7));
        LOWORD(v5) = v5 - v7;
      }
      else
      {
        uint64_t result = BlueFin::GlSetBase::SetULong((uint64_t)this, (v5 >> 5), 0);
      }
      char v6 = v5 + 32;
      unsigned int v5 = (unsigned __int16)(v5 + 32);
    }
    while (v5 < v4);
  }
  return result;
}

BOOL BlueFin::GlMeSrdAsicConfig::GetDebugMiIntervalParams(BlueFin::GlMeSrdAsicConfig *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (!*((unsigned char *)this + 1206)) {
    return 0;
  }
  *a2 = *((unsigned char *)this + 1207);
  *a3 = *((unsigned char *)this + 1208);
  return *((unsigned char *)this + 1206) != 0;
}

BOOL BlueFin::GlMeSrdAsicConfig::GetDebugGeofence(BlueFin::GlMeSrdAsicConfig *this, BOOL *a2, int *a3, int *a4, int *a5, int *a6, int *a7, BOOL *a8)
{
  if (!*((unsigned char *)this + 1220)) {
    return 0;
  }
  *a2 = *((unsigned char *)this + 1221);
  *a3 = *((_DWORD *)this + 306);
  *a4 = *((_DWORD *)this + 307);
  *a5 = *((_DWORD *)this + 308);
  *a6 = *((_DWORD *)this + 309);
  *a7 = *((_DWORD *)this + 310);
  *a8 = *((unsigned char *)this + 1244);
  return *((unsigned char *)this + 1220) != 0;
}

BOOL BlueFin::GlMeSrdAsicConfig::GetDebugHH43AagcFixedAtt(BlueFin::GlMeSrdAsicConfig *this, BOOL *a2, BOOL *a3, BOOL *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10)
{
  *a2 = *((unsigned char *)this + 1300);
  *a3 = *((unsigned char *)this + 1301);
  *a4 = *((unsigned char *)this + 1302);
  *a5 = *((_DWORD *)this + 326);
  *a6 = *((_DWORD *)this + 327);
  *a7 = *((_DWORD *)this + 328);
  *a8 = *((_DWORD *)this + 329);
  *a9 = *((_DWORD *)this + 330);
  *a10 = *((_DWORD *)this + 331);
  return *((_WORD *)this + 650) || *((unsigned char *)this + 1302) != 0;
}

BOOL BlueFin::GlMeSrdAsicConfig::GetDebugHH43DagcFixedAtt(BlueFin::GlMeSrdAsicConfig *this, BOOL *a2, BOOL *a3, BOOL *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10)
{
  *a2 = *((unsigned char *)this + 1328);
  *a3 = *((unsigned char *)this + 1329);
  *a4 = *((unsigned char *)this + 1330);
  *a5 = *((_DWORD *)this + 333);
  *a6 = *((_DWORD *)this + 334);
  *a7 = *((_DWORD *)this + 335);
  *a8 = *((_DWORD *)this + 336);
  *a9 = *((_DWORD *)this + 337);
  *a10 = *((_DWORD *)this + 338);
  return *((_WORD *)this + 664) || *((unsigned char *)this + 1330) != 0;
}

uint64_t BlueFin::GlMeSrdAsicConfig::Deserialize(BlueFin::GlMeSrdAsicConfig *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 73 || *((unsigned __int8 *)a2 + 12) - 19 <= 0xFFFFFFED)
  {
    unsigned int v5 = "0";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4303, "Deserialize", (char)"0");
    int v6 = 4303;
LABEL_25:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", v6, v5);
  }
  *((unsigned char *)this + 20) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((unsigned char *)this + 21) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((unsigned char *)this + 142bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1425) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1426) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1427) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1428) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1429) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1430) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1432) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1433) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 143bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1435) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 361) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((unsigned char *)this + 1448) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 363) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 2u)
  {
    *((unsigned char *)this + 1456) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 1457) = BlueFin::GlSysLogEntry::GetU8(a2);
    if (*((unsigned __int8 *)a2 + 12) >= 3u)
    {
      *((unsigned char *)this + 1483) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      if (*((unsigned __int8 *)a2 + 12) >= 4u)
      {
        *((unsigned char *)this + 148bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
        if (*((unsigned __int8 *)a2 + 12) >= 5u)
        {
          *((unsigned char *)this + 1485) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
          if (*((unsigned __int8 *)a2 + 12) >= 6u)
          {
            *((unsigned char *)this + 1488) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
            *((unsigned char *)this + 1489) = BlueFin::GlSysLogEntry::GetU8(a2);
            if (*((unsigned __int8 *)a2 + 12) >= 7u)
            {
              *((_WORD *)this + 736) = BlueFin::GlSysLogEntry::GetS16(a2);
              *((_WORD *)this + 737) = BlueFin::GlSysLogEntry::GetS16(a2);
              if (*((unsigned __int8 *)a2 + 12) >= 8u)
              {
                *((_WORD *)this + 738) = BlueFin::GlSysLogEntry::GetS16(a2);
                *((_WORD *)this + 739) = BlueFin::GlSysLogEntry::GetS16(a2);
                if (*((unsigned __int8 *)a2 + 12) >= 9u)
                {
                  *((unsigned char *)this + 1480) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
                  if (*((unsigned __int8 *)a2 + 12) >= 0xAu)
                  {
                    *((unsigned char *)this + 1481) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
                    if (*((unsigned __int8 *)a2 + 12) >= 0xBu) {
                      *((unsigned char *)this + 1482) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  *((unsigned char *)this + 1458) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 1459) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_WORD *)this + 730) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + 366) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 367) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 0xCu)
  {
    *((unsigned char *)this + 1490) = BlueFin::GlSysLogEntry::GetU8(a2);
    if (*((unsigned __int8 *)a2 + 12) >= 0xDu)
    {
      *((unsigned char *)this + 1491) = BlueFin::GlSysLogEntry::GetU8(a2);
      if (*((unsigned __int8 *)a2 + 12) >= 0xEu)
      {
        *((unsigned char *)this + 1493) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
        if (*((unsigned __int8 *)a2 + 12) >= 0xFu)
        {
          *((unsigned char *)this + 1601) = BlueFin::GlSysLogEntry::GetU8(a2);
          if (*((unsigned __int8 *)a2 + 12) >= 0x10u)
          {
            *((unsigned char *)this + 2180) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
            if (*((unsigned __int8 *)a2 + 12) >= 0x11u)
            {
              *((unsigned char *)this + 1492) = BlueFin::GlSysLogEntry::GetU8(a2);
              if (*((unsigned __int8 *)a2 + 12) >= 0x12u)
              {
                *((unsigned char *)this + 1212) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
                *((_DWORD *)this + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
              }
            }
          }
        }
      }
    }
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    unsigned int v5 = "otEntry.DataSize() == otEntry.ReadIdx()";
    DeviceFaultNotify("glmesrd_asic_config.cpp", 4418, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    int v6 = 4418;
    goto LABEL_25;
  }
  return 1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetSignalSupported(uint64_t this, const unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 7; ++i)
    *(unsigned char *)(this + 1436 + i) = a2[i];
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMILengthsMs(BlueFin::GlMeSrdAsicConfig *this, int a2)
{
  char v6 = 1;
  char v5 = 1;
  (*(void (**)(BlueFin::GlMeSrdAsicConfig *, char *, char *))(*(void *)this + 216))(this, &v6, &v5);
  if (a2) {
    double v3 = &v5;
  }
  else {
    double v3 = &v6;
  }
  return (1000 * *v3) & 0xFFF8;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsLosScanSupported(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 184))(this);
  return (v1 & 0xF000FFFE) == 0x30000012 || (v1 & 0xF000FFFE) == 805306388 || (v1 & 0xF000FFFF) == 805306385;
}

BOOL BlueFin::GlMeSrdAsicConfig::IsBeidouB1CSupported(BlueFin::GlMeSrdAsicConfig *this)
{
  int v1 = (*(uint64_t (**)(BlueFin::GlMeSrdAsicConfig *))(*(void *)this + 184))(this);
  return (v1 & 0xF000FFFE) == 0x30000012 || (v1 & 0xF000FFFE) == 805306388 || (v1 & 0xF000FFFF) == 805306385;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5MsaEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 562) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5MsbEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 563) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetThermalRiskState(uint64_t this, char a2)
{
  *(unsigned char *)(this + 56bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetBdsSignalType(uint64_t this, const unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 63; ++i)
    *(unsigned char *)(this + 597 + i) = a2[i];
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetGpsSignalType(uint64_t this, const unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 32; ++i)
    *(unsigned char *)(this + 565 + i) = a2[i];
  return this;
}

void *BlueFin::GlMeSrdAsicConfig::SetRadioRegistersAddr(BlueFin::GlMeSrdAsicConfig *this, unsigned int *a2)
{
  int v2 = *(unsigned __int8 *)a2;
  int v3 = 2 * v2;
  unsigned int v4 = 6 * v2;
  if (*((unsigned char *)a2 + 1) == 1) {
    unsigned int v4 = v3;
  }
  if (v4 >= 0x1ED)
  {
    DeviceFaultNotify("glmesrd_asic_config.cpp", 5242, "SetRadioRegistersAddr", (char)"bytes_num <= sizeof(m_aulRadioRegsAddr)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_config.cpp", 5242, "bytes_num <= sizeof(m_aulRadioRegsAddr)");
  }
  char v5 = (char *)this + 676;

  return memcpy(v5, a2, v4 + 8);
}

void *BlueFin::GlMeSrdAsicConfig::GetRadioRegistersAddr(BlueFin::GlMeSrdAsicConfig *this, unsigned int *__dst, unsigned int *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  *a4 = *((unsigned char *)this + 676);
  *a5 = *((unsigned char *)this + 677);
  *a7 = *((unsigned char *)this + 678);
  *a6 = *((unsigned char *)this + 679);
  *a3 = *((_DWORD *)this + 170);
  uint64_t v7 = *a4;
  uint64_t v8 = 2 * v7;
  uint64_t v9 = 6 * v7;
  if (*a5 == 1) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v9;
  }
  return memcpy(__dst, (char *)this + 684, v10);
}

void BlueFin::GlMeSrdAsicConfig::~GlMeSrdAsicConfig(BlueFin::GlMeSrdAsicConfig *this)
{
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetNumMemoryBins(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxNumParallelAcqs(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int16 *)this + 34);
}

uint64_t BlueFin::GlMeSrdAsicConfig::EnableUnitTestMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 530) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetLnaMask(uint64_t this, int a2)
{
  *(unsigned char *)(this + 1416) = a2;
  if (a2) {
    *(unsigned char *)(this + 23) = 1;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetTrkBitHistBitWth(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1456);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetTrkBitHistObsBitWth(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1457);
}

uint64_t BlueFin::GlMeSrdAsicConfig::NumberOfEswRpcClasses(BlueFin::GlMeSrdAsicConfig *this)
{
  return (*((unsigned char *)this + 1432) - *((unsigned char *)this + 1434));
}

uint64_t BlueFin::GlMeSrdAsicConfig::NumberOfGllRpcClasses(BlueFin::GlMeSrdAsicConfig *this)
{
  return (*((unsigned char *)this + 1433) - *((unsigned char *)this + 1435));
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxNumSignals(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1431);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMaxActiveAcquisitionSats(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1448);
}

uint64_t BlueFin::GlMeSrdAsicConfig::EnablePllUnlockMultipathCheck(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1482);
}

uint64_t BlueFin::GlMeSrdAsicConfig::AllowSaturatedSearchCvecs(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1484);
}

uint64_t BlueFin::GlMeSrdAsicConfig::PublishIntermediateCcmMsmts(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1485);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetMeasurementPeriodCorrectionLimits(BlueFin::GlMeSrdAsicConfig *this, __int16 *a2, __int16 *a3)
{
  uint64_t result = BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1);
  *a2 = *((_WORD *)this + 736);
  *a3 = *((_WORD *)this + 737);
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetHostWakeGpio(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1490);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetNoMotionGpio(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1491);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetBlankingWindowSizeSamples(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 374);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetBlankingObservationWindowSizeSamples(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned int *)this + 375);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetResetBlanking(uint64_t this, unsigned int a2, char a3)
{
  *(unsigned char *)(this + a2 + 150bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetPercentBlanked(uint64_t this, unsigned int a2, double a3)
{
  *(double *)(this + 8 * a2 + 152BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetNumFullBlank(uint64_t this, unsigned int a2, char a3)
{
  *(unsigned char *)(this + a2 + 1592) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetNumFullBlank(BlueFin::GlMeSrdAsicConfig *this, unsigned int a2)
{
  return *((unsigned __int8 *)this + a2 + 1592);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetCopVersion(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1601);
}

unint64_t BlueFin::GlMeSrdAsicConfig::IsTstGridEnabledForThisSvId(uint64_t a1, unsigned char *a2)
{
  return ((unint64_t)*(unsigned int *)(*(void *)(a1 + 2056)
                                            + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)) & 1;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetTstGridConfig(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1609);
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetSwTrackAgc(BlueFin::GlMeSrdAsicConfig *this, BOOL *a2)
{
  *a2 = *((unsigned char *)this + 1603);
  return *((unsigned __int8 *)this + 1604);
}

double BlueFin::GlMeSrdAsicConfig::GetHardwareNicDelayInMeters(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((float *)this + 87);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetClockAdjustEnable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1419) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetAsyncFpga(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 1420);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetAsyncFpga(uint64_t this, char a2)
{
  *(unsigned char *)(this + 142BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetGlns16MHz(uint64_t this, char a2)
{
  *(unsigned char *)(this + 142BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetThermalRiskState(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 564);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetSrchModeSetting(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2172) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetMtrkMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2148) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetCpuActiveMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 216BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetAdcCapture(BlueFin::GlMeSrdAsicConfig *this)
{
  return (uint64_t)this + 2204;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetEnableCoex(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2217) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetDRLPHybridEnable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1417) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetMcuBypassEnable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1418) = a2;
  return this;
}

double BlueFin::GlMeSrdAsicConfig::GetPercentBlanked(BlueFin::GlMeSrdAsicConfig *this, unsigned int a2)
{
  return *((double *)this + a2 + 190);
}

uint64_t BlueFin::GlMeSrdAsicConfig::Enable5HzSubTrkFromAPI(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1605) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetSwTrackAgc(uint64_t this, char a2)
{
  *(unsigned char *)(this + 160bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  *(unsigned char *)(this + 1603) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5ExtBias(uint64_t this, float a2)
{
  if (!*(unsigned char *)(this + 269)) {
    *(float *)(this + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5ExtBiasValid(uint64_t this, char a2)
{
  *(unsigned char *)(this + 269) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5DeltaExtBias(uint64_t this, float a2)
{
  if (!*(unsigned char *)(this + 270)) {
    *(float *)(this + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetL5DeltaExtBiasValid(uint64_t this, char a2)
{
  *(unsigned char *)(this + 27BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::EnablePps(uint64_t this, char a2)
{
  *(unsigned char *)(this + 66BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::GetPpsEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 660);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetPpsParam(uint64_t this, char a2, char a3, int a4, int a5, int a6)
{
  *(unsigned char *)(this + 66BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(unsigned char *)(this + 66BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a3;
  *(_DWORD *)(this + 66bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a4;
  *(_DWORD *)(this + 668) = a5;
  *(_DWORD *)(this + 672) = a6;
  return this;
}

uint64_t BlueFin::GlMeSrdAsicConfig::IsExtSuspendEnabled(BlueFin::GlMeSrdAsicConfig *this)
{
  return *((unsigned __int8 *)this + 2137);
}

uint64_t BlueFin::GlMeSrdAsicConfig::SetExtSuspendEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 2137) = a2;
  return this;
}

void BlueFin::GlMeSrdAsicinit::~GlMeSrdAsicinit(BlueFin::GlMeSrdAsicinit *this)
{
  *(void *)this = &unk_270EBC170;
  BlueFin::GlEventPump::RemoveActive(*((void *)this + 17), this);
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdAsicinit::~GlMeSrdAsicinit(this);

  JUMPOUT(0x263E6DD70);
}

unint64_t BlueFin::QHsm::dispatch(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, a1, a2, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(a1 + 32))(a1, a2);
    }
    *(void *)(a1 + 32) = result;
  }
  while (result);
  *(void *)(a1 + 32) = v4;
  return result;
}

unint64_t BlueFin::GlMeSrdAsicinit::LoadAsicEswFw(BlueFin::GlMeSrdAsicinit *this)
{
  __int16 v4 = 26;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdAsicinit::StopInit(BlueFin::GlMeSrdAsicinit *this)
{
  __int16 v4 = 25;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicinit::DebugComDeadIssue(BlueFin::GlMeSrdAsicinit *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  BlueFin::GlMeSrdAsicinit::Bri_RequestNvRamWord7(this);
  memset(v3, 128, sizeof(v3));
  *((unsigned char *)this + 732) = 0;
  BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v3);
  return BlueFin::GlMeSrdAsicinit::Bri_RequestNvRamWord7(this);
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_RequestNvRamWord7(BlueFin::GlMeSrdAsicinit *this)
{
  void v9[2] = *MEMORY[0x263EF8340];
  int v1 = *(_DWORD *)(*((void *)this + 16) + 8);
  if ((v1 - 2) >= 2 && v1 != 5)
  {
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3391, "Bri_RequestNvRamWord7", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 3391, "0");
  }
  v9[0] = 0xC000006C43FD00FELL;
  *(void *)((char *)v9 + 5) = 0xFC00000007C00000;
  BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, (const unsigned __int8 *)v9);
  ++*((_DWORD *)this + 187);
  *(void *)uint64_t v7 = 0xC000006C09FD00FFLL;
  char v8 = -4;
  BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v7);
  ++*((_DWORD *)this + 187);
  *(void *)unint64_t v5 = 0xC000006809FD00FFLL;
  char v6 = -4;
  uint64_t result = BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v5);
  ++*((_DWORD *)this + 187);
  return result;
}

uint64_t (*BlueFin::GlMeSrdAsicinit::wait4Mcuversion(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *(_OWORD *)char v8 = xmmword_263BAC570;
  *(_OWORD *)&v8[10] = *(long long *)((char *)&xmmword_263BAC570 + 10);
  unsigned int v3 = *a2;
  if (v3 <= 6)
  {
    if (v3 != 2)
    {
      if (v3 != 3) {
        return BlueFin::QHsm::top;
      }
      return 0;
    }
    uint64_t v4 = *(void *)(a1 + 128);
    if (*(_DWORD *)(v4 + 8) == 3)
    {
      if (*(unsigned char *)(v4 + 1418))
      {
        *(void *)(a1 + 688) = a1;
        BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 656), 7, 0, 0x1F4u);
        *(unsigned char *)(a1 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
LABEL_17:
        BlueFin::GlMeSrdAsicinit::Bri_SendAsicData((BlueFin::GlMeSrdAsicinit *)a1, v8);
        return 0;
      }
      char v6 = "me->m_rAsicConfig.GetMcuBypassEnable()";
      DeviceFaultNotify("glmesrd_asicinit.cpp", 410, "wait4Mcuversion", (char)"me->m_rAsicConfig.GetMcuBypassEnable()");
      int v7 = 410;
    }
    else
    {
      char v6 = "me->m_rAsicConfig.GetAsicType() == ASIC_PIKE";
      DeviceFaultNotify("glmesrd_asicinit.cpp", 409, "wait4Mcuversion", (char)"me->m_rAsicConfig.GetAsicType() == ASIC_PIKE");
      int v7 = 409;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v7, v6);
  }
  if (v3 == 7)
  {
    if (!a2[1])
    {
      *(void *)(a1 + 688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 656), 7, 1, 0x1F4u);
      *(unsigned char *)(a1 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      goto LABEL_17;
    }
    *(unsigned char *)(a1 + 732) = 0;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 128) + 1248))(*(void *)(a1 + 128), 4);
LABEL_14:
    BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_startup_asic, (uint64_t)"&GlMeSrdAsicinit::bri_startup_asic");
    return 0;
  }
  if (v3 != 12) {
    return BlueFin::QHsm::top;
  }
  if (a2[1] == 30) {
    goto LABEL_14;
  }
  return 0;
}

unint64_t BlueFin::GlMeSrdAsicinit::OnSubHeartbeat(BlueFin::GlMeSrdAsicinit *this)
{
  __int16 v4 = 1288;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdAsicinit *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

uint64_t (*BlueFin::GlMeSrdAsicinit::meif_wait4passthrough(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  unint64_t result = BlueFin::QHsm::top;
  if (v3 <= 0xB)
  {
    if (v3 == 2)
    {
      (*(void (**)(void))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112));
      *(void *)(a1 + 688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 656), 5, 0, 0x1F4u);
      unint64_t result = 0;
      *(unsigned char *)(a1 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    }
    if (v3 != 3)
    {
      if (v3 != 5) {
        return result;
      }
      unsigned __int8 v5 = *(unsigned char *)(a1 + 734) + 1;
      *(unsigned char *)(a1 + 73bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v5;
      if (v5 >= 4u)
      {
        (*(void (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112));
        char v6 = "&GlMeSrdAsicinit::off";
        int v7 = BlueFin::GlMeSrdAsicinit::off;
        goto LABEL_17;
      }
      GlCustomLog(14, "GlMeSrdAsicinit::meif_wait4passthrough init retry count = %d\n", v5);
      char v8 = "&GlMeSrdAsicinit::meif_wait4passthrough";
      uint64_t v9 = BlueFin::GlMeSrdAsicinit::meif_wait4passthrough;
      goto LABEL_20;
    }
    BlueFin::GlQueue::Remove(a1 + 40, 5);
    BlueFin::GlTimer::disarm(a1 + 656);
    return 0;
  }
  if (v3 != 12)
  {
    if (v3 == 25)
    {
      char v8 = "&GlMeSrdAsicinit::off";
      uint64_t v9 = BlueFin::GlMeSrdAsicinit::off;
    }
    else
    {
      if (v3 != 34) {
        return result;
      }
      (*(void (**)(void))(**(void **)(a1 + 112) + 64))(*(void *)(a1 + 112));
      char v8 = "&GlMeSrdAsicinit::bri_startup_asic";
      uint64_t v9 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_startup_asic;
    }
LABEL_20:
    BlueFin::QHsm::tran((void *)a1, v9, (uint64_t)v8);
    return 0;
  }
  if (a2[1] != 25) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 128);
  if (*(_DWORD *)(v10 + 8) != 3 || !*(unsigned char *)(v10 + 561))
  {
    *(void *)(a1 + 688) = a1;
    BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 656), 34, 0, 0xC8u);
    *(unsigned char *)(a1 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    goto LABEL_23;
  }
  (*(void (**)(void))(**(void **)(a1 + 112) + 64))(*(void *)(a1 + 112));
  char v6 = "&GlMeSrdAsicinit::bri_startup_asic";
  int v7 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_startup_asic;
LABEL_17:
  BlueFin::QHsm::tran((void *)a1, v7, (uint64_t)v6);
LABEL_23:
  unint64_t result = 0;
  *(unsigned char *)(a1 + 73bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_ProgramSwFlowControl(BlueFin::GlMeSrdAsicinit *this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 732) = 0;
  if (!*((unsigned char *)this + 698) || (unsigned __int8 v2 = *((unsigned char *)this + 696), v3 = *((unsigned char *)this + 697), v2 == v3))
  {
    uint64_t v10 = "m_bSwFlowControlEnabled && m_ucXon != m_ucXoff";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3249, "Bri_ProgramSwFlowControl", (char)"m_bSwFlowControlEnabled && m_ucXon != m_ucXoff");
    int v11 = 3249;
    goto LABEL_33;
  }
  if ((v2 - 5) > 0xF6u || *((unsigned __int8 *)this + 696) == 224 || *((unsigned char *)this + 696) == 33)
  {
    uint64_t v10 = "m_ucXon > 0x04 && m_ucXon < 0xFC && m_ucXon != 0x21 && m_ucXon != 0xE0";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3250, "Bri_ProgramSwFlowControl", (char)"m_ucXon > 0x04 && m_ucXon < 0xFC && m_ucXon != 0x21 && m_ucXon != 0xE0");
    int v11 = 3250;
    goto LABEL_33;
  }
  if ((v3 - 5) > 0xF6u || *((unsigned char *)this + 697) == 33 || *((unsigned __int8 *)this + 697) == 224)
  {
    uint64_t v10 = "m_ucXoff > 0x04 && m_ucXoff < 0xFC && m_ucXoff != 0x21 && m_ucXoff != 0xE0";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3251, "Bri_ProgramSwFlowControl", (char)"m_ucXoff > 0x04 && m_ucXoff < 0xFC && m_ucXoff != 0x21 && m_ucXoff != 0xE0");
    int v11 = 3251;
    goto LABEL_33;
  }
  unsigned int v4 = 0;
  int v5 = 20;
  unsigned __int8 v6 = *((unsigned char *)this + 697);
  unsigned __int8 v7 = *((unsigned char *)this + 696);
  do
  {
    if (v7 == v2
      || v7 == v3
      || v7 == 224
      || v4 == v2
      || v4 == v3
      || v4 == 224)
    {
      --v7;
      unsigned int v4 = v4 & 0xFFFFFFF0 | (v4 + 1) & 0xF;
      goto LABEL_21;
    }
    if (v6 != v2 && v6 != v3 && v6 != 224) {
      break;
    }
    --v6;
    v4 += 16;
LABEL_21:
    --v5;
  }
  while (v5);
  if ((v4 & 0xF) + v7 != v2 || (v4 >> 4) + v6 != v3)
  {
    uint64_t v10 = "m_ucXon == (xon+(add&0xF)) && m_ucXoff == (xoff+((add>>4)&0xF))";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3278, "Bri_ProgramSwFlowControl", (char)"m_ucXon == (xon+(add&0xF)) && m_ucXoff == (xoff+((add>>4)&0xF))");
    int v11 = 3278;
    goto LABEL_33;
  }
  *((unsigned char *)this + 698) = 0;
  int v8 = *(_DWORD *)(*((void *)this + 16) + 8);
  if ((v8 - 2) < 2)
  {
    *(_DWORD *)int v12 = 268239103;
    LOBYTE(v13) = 2;
    HIBYTE(v13) = v4;
    char v14 = v7;
    unsigned __int8 v15 = v6;
    LOBYTE(v16) = -4;
    goto LABEL_30;
  }
  if (v8 == 1)
  {
    *(_DWORD *)int v12 = 570228990;
    __int16 v13 = 512;
    char v14 = v4;
    unsigned __int8 v15 = v7;
    LOBYTE(v16) = v6;
    BYTE1(v16) = -4;
    goto LABEL_30;
  }
  if (v8 != 5)
  {
    uint64_t v10 = "0";
    DeviceFaultNotify("glmesrd_asicinit.cpp", 3311, "Bri_ProgramSwFlowControl", (char)"0");
    int v11 = 3311;
LABEL_33:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", v11, v10);
  }
  *(_DWORD *)int v12 = 536674559;
  LOBYTE(v13) = 2;
  HIBYTE(v13) = v4;
  char v14 = v7;
  unsigned __int8 v15 = v6;
  int v16 = 17;
  char v17 = -4;
LABEL_30:
  uint64_t result = BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v12);
  ++*((_DWORD *)this + 187);
  *((unsigned char *)this + 698) = 1;
  return result;
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::bri_wait4bri(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  unsigned int v4 = BlueFin::GlMeSrdAsicinit::loading;
  switch(v3)
  {
    case 5:
      if ((*(_DWORD *)(*(void *)(a1 + 128) + 352) - 1) > 1)
      {
        int v8 = "&GlMeSrdAsicinit::bri_wait4version";
        uint64_t v9 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4version;
      }
      else
      {
        int v8 = "&GlMeSrdAsicinit::bri_wait4flowcontrol";
        uint64_t v9 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4flowcontrol;
      }
      BlueFin::QHsm::tran((void *)a1, v9, (uint64_t)v8);
      return 0;
    case 3:
      *(unsigned char *)(a1 + 737) = 1;
      BlueFin::GlQueue::Remove(a1 + 40, 5);
      BlueFin::GlTimer::disarm(a1 + 656);
      return 0;
    case 2:
      *(unsigned char *)(a1 + 737) = 0;
      *(void *)(a1 + 688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 656), 5, 0, 0x12Cu);
      *(unsigned char *)(a1 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 80))(*(void *)(a1 + 120));
      uint64_t v11 = 0;
      v12[0] = 0;
      *(_DWORD *)((char *)v12 + 7) = 0;
      uint64_t v13 = v5;
      int v14 = 0;
      __int16 v15 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
      GlCustomLog(14, "GlMeSrdAsicinit::Sending ESW Standby RPC\n");
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v7 + 152))(v7, &v11, 0);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v11);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v11);
      return 0;
  }
  return v4;
}

void sub_263A78408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*BlueFin::GlMeSrdAsicinit::bri_wait4gpioconfig(BlueFin::GlMeSrdAsicinit *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t result = BlueFin::GlMeSrdAsicinit::loading;
  switch(*a2)
  {
    case 2:
      BlueFin::GlMeSrdAsicinit::bri_wait4gpioconfig(BlueFin::GlMeSrdAsicinit*,BlueFin::GlEvent const*)::gpictrlState = 0;
      *((unsigned char *)this + 732) = 0;
      *(void *)int v16 = 0xC00000B009FD00FFLL;
      char v17 = -4;
      BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v16);
      ++*((_DWORD *)this + 187);
      *((void *)this + 86) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdAsicinit *)((char *)this + 656), 6, 0, 0xC8u);
      uint64_t result = 0;
      *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      *((_DWORD *)this + 158) = 0;
      return result;
    case 3:
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 6);
      BlueFin::GlQueue::Remove((uint64_t)this + 40, 5);
      BlueFin::GlTimer::disarm((uint64_t)this + 656);
      return 0;
    case 5:
      if (BlueFin::GlMeSrdAsicinit::bri_wait4gpioconfig(BlueFin::GlMeSrdAsicinit*,BlueFin::GlEvent const*)::gpictrlState) {
        uint64_t v5 = "DriveStrength";
      }
      else {
        uint64_t v5 = "Hysteresis";
      }
      GlCustomLog(11, "GlMeSrdAsicinit::Watchdog Timeout waiting for %s response\n", v5);
      (*(void (**)(void))(**((void **)this + 14) + 16))(*((void *)this + 14));
      uint64_t v6 = "&GlMeSrdAsicinit::off";
      uint64_t v7 = BlueFin::GlMeSrdAsicinit::off;
      goto LABEL_8;
    case 6:
      if (a2[1] > 1u)
      {
        int v12 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
        *((void *)this + 86) = this;
        char v13 = 5;
        goto LABEL_26;
      }
      int v8 = BlueFin::GlMeSrdAsicinit::bri_wait4gpioconfig(BlueFin::GlMeSrdAsicinit*,BlueFin::GlEvent const*)::gpictrlState;
      *((unsigned char *)this + 732) = 0;
      char v17 = -4;
      if (v8) {
        uint64_t v9 = &qword_263BACAAD;
      }
      else {
        uint64_t v9 = &qword_263BACAA4;
      }
      *(void *)int v16 = *v9;
      BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v16);
      ++*((_DWORD *)this + 187);
      int v12 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
      char v14 = a2[1] + 1;
      *((void *)this + 86) = this;
      char v15 = v14;
      char v13 = 6;
      goto LABEL_27;
    case 0xC:
      if (a2[1] != 12) {
        return 0;
      }
      int v10 = *((unsigned __int8 *)this + 768);
      if (v10 != 49)
      {
        if (v10 == 44)
        {
          int v11 = *((_DWORD *)this + 193);
          if ((v11 & 0x10000000) == 0)
          {
            BlueFin::GlMeSrdAsicinit::Bri_ProgramHysteresis(this, v11 | 0x10000000);
            *((unsigned char *)this + 732) = 0;
            *(void *)int v16 = 0xC00000B009FD00FFLL;
            char v17 = -4;
            BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v16);
            uint64_t result = 0;
            ++*((_DWORD *)this + 187);
            return result;
          }
          *((unsigned char *)this + 732) = 0;
          *(void *)int v16 = 0xC00000C409FD00FFLL;
          char v17 = -4;
          BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v16);
          ++*((_DWORD *)this + 187);
          ++BlueFin::GlMeSrdAsicinit::bri_wait4gpioconfig(BlueFin::GlMeSrdAsicinit*,BlueFin::GlEvent const*)::gpictrlState;
          goto LABEL_25;
        }
        return 0;
      }
      if ((*((_DWORD *)this + 193) & 0x3F) == 9)
      {
        uint64_t v6 = "&GlMeSrdAsicinit::bri_wait4asic_ready";
        uint64_t v7 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4asic_ready;
LABEL_8:
        BlueFin::QHsm::tran(this, v7, (uint64_t)v6);
        return 0;
      }
      BlueFin::GlMeSrdAsicinit::Bri_ProgramDriveStrentgh(this, *((_DWORD *)this + 193) & 0xFFFFFFC0 | 9);
LABEL_25:
      int v12 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 656);
      *((void *)this + 86) = this;
      char v13 = 6;
LABEL_26:
      char v15 = 0;
LABEL_27:
      BlueFin::GlTimer::arm(v12, v13, v15, 0x64u);
      uint64_t result = 0;
      *((unsigned char *)this + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    default:
      return result;
  }
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_ProgramHysteresis(BlueFin::GlMeSrdAsicinit *this, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)int v3 = 0xC00000B003FD00FELL;
  int v4 = a2;
  char v5 = -4;
  return BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v3);
}

uint64_t BlueFin::GlMeSrdAsicinit::Bri_ProgramDriveStrentgh(BlueFin::GlMeSrdAsicinit *this, int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(void *)int v3 = 0xC00000C403FD00FELL;
  int v4 = a2;
  char v5 = -4;
  return BlueFin::GlMeSrdAsicinit::Bri_SendAsicData(this, v3);
}

void *BlueFin::GlMeSrdAsicinit::RetryBri(BlueFin::GlMeSrdAsicinit *this, BlueFin::GlMeSrdAsicinit *a2)
{
  unsigned int v3 = ++*((unsigned char *)this + 733);
  if (v3 > 4)
  {
    (*(void (**)(void, BlueFin::GlMeSrdAsicinit *))(**((void **)this + 14) + 16))(*((void *)this + 14), a2);
    int v10 = "&GlMeSrdAsicinit::off";
    int v11 = BlueFin::GlMeSrdAsicinit::off;
  }
  else
  {
    if (*((unsigned char *)this + 638))
    {
      *((unsigned char *)this + 639) = 0;
      uint64_t v4 = *((void *)this + 16);
      int v5 = (*(uint64_t (**)(uint64_t, BlueFin::GlMeSrdAsicinit *))(*(void *)v4 + 184))(v4, a2);
      if (*(unsigned char *)(v4 + 1212)) {
        int v5 = *(_DWORD *)(v4 + 1216);
      }
      *(_DWORD *)(v4 + 16) = v5;
      if (v5 != 805437445)
      {
        DeviceFaultNotify("glmesrd_asicinit.cpp", 4432, "RetryBri", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asicinit.cpp", 4432, "0");
      }
      int v6 = (*(uint64_t (**)(void))(**((void **)this + 16) + 184))(*((void *)this + 16));
      uint64_t v7 = *((void *)this + 16);
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 184))(v7);
      if (*(unsigned char *)(v7 + 1212)) {
        int v9 = *(_DWORD *)(v7 + 1216);
      }
      else {
        int v9 = v8;
      }
      *(_DWORD *)(v7 + 16) = v9;
      char v14 = (BlueFin::GlMeSrdAsicinit *)((char *)this + 200);
      uint64_t v15 = *((void *)this + 16);
      int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 184))(v15);
      if (*(unsigned char *)(v15 + 1212)) {
        int v17 = *(_DWORD *)(v15 + 1216);
      }
      else {
        int v17 = v16;
      }
      *(_DWORD *)(v15 + 16) = v17;
      uint64_t v18 = (_DWORD *)*((void *)this + 16);
      int v19 = v18[2];
      int v20 = (*(uint64_t (**)(_DWORD *))(*(void *)v18 + 40))(v18);
      return (void *)BlueFin::GlMeSrdAsicInitPatchLoader::Init(v14, v17, 0x3FCu, (const char *)(v6 == v9), v19, v20);
    }
    int v12 = *((_DWORD *)this + 192);
    if (v12
      && (BlueFin::GlMeSrdAsicInitPatchLoader::AckBelogsToAnotherPacketInBuf((BlueFin::GlMeSrdAsicinit *)((char *)this + 200), *((unsigned __int8 *)this + 776), *((_DWORD *)this + 193), v12) & 1) == 0)
    {
      BlueFin::GlMeSrdAsicInitPatchLoader::ReQueuePacketIntoBuffer((BlueFin::GlMeSrdAsicinit *)((char *)this + 200));
    }
    int v10 = "&GlMeSrdAsicinit::bri_wait4patchblockload";
    int v11 = (uint64_t (*)())BlueFin::GlMeSrdAsicinit::bri_wait4patchblockload;
  }

  return BlueFin::QHsm::tran(this, v11, (uint64_t)v10);
}

void BlueFin::GlMeSrdRpcMiscAsicInit::~GlMeSrdRpcMiscAsicInit(BlueFin::GlMeSrdRpcMiscAsicInit *this)
{
}

uint64_t BlueFin::GlMeSrdEstGrid::Config(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5 = *((void *)a5 + 163);
  if (!v5)
  {
    uint64_t v18 = "rstGridRslt.m_potCfg != nullptr";
    DeviceFaultNotify("glmesrd_grid.cpp", 104, "Config", (char)"rstGridRslt.m_potCfg != nullptr");
    int v19 = 104;
    goto LABEL_20;
  }
  if (v5 != *(void *)(a3 + 456))
  {
    if (!a5[3]) {
      return 0;
    }
    int v8 = *a5;
    unsigned __int8 v9 = *a5 != 0;
    *(void *)(a3 + 456) = v5;
    *(_OWORD *)(a3 + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = xmmword_263BACB20;
    *(_OWORD *)(a3 + 146) = xmmword_263BACB30;
    uint64_t v10 = a3 + 196;
    int v11 = BlueFin::SATRPT_GRID_TAP_CONFIG_TYPE::tap_order((BlueFin::SATRPT_GRID_TAP_CONFIG_TYPE *)(a5 + 1272), (float *)(a3 + 196), 0, v9);
    *(unsigned char *)(a3 + 128) = v11;
    int v12 = v11 + 8;
    if (!v8) {
      int v12 = v11;
    }
    if (v12 == 8 * (*(_WORD *)(*((void *)a5 + 163) + 8) & 3) + 8)
    {
      if (v11)
      {
        if (v11 == 1)
        {
          unsigned __int8 v13 = 0;
        }
        else
        {
          uint64_t v15 = 0;
          unsigned __int8 v13 = 0;
          uint64_t v16 = a3 + 131;
          do
          {
            float v17 = *(float *)(v16 + 4 * v15 + 69);
            if (v17 != *(float *)(v10 + 4 * v13))
            {
              *(float *)(v10 + 4 * ++v13) = v17;
              *(unsigned char *)(a3 + 130 + v13) = *(unsigned char *)(v16 + v15);
            }
            ++v15;
          }
          while (v11 - 1 != v15);
        }
        LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v13 + 1;
      }
      *(unsigned char *)(a3 + 128) = v11;
      *(_OWORD *)(a3 + 162) = xmmword_263BACB20;
      *(_OWORD *)(a3 + 178) = xmmword_263BACB30;
      *(unsigned char *)(a3 + 129) = BlueFin::GRID_CONFIG_TYPE::bin_order(*((BlueFin::GRID_CONFIG_TYPE **)a5 + 163), (float *)(a3 + 324), 0);
      return 1;
    }
    uint64_t v18 = "(rstGridRslt.m_potCfg->tap.bits.nb_tcbs + 1)*GRID_NB_TAPS_PER_TCB == (bMG ? rstGridParam.ucNbTaps + GRID_NB_TA"
          "PS_PER_TCB : rstGridParam.ucNbTaps)";
    DeviceFaultNotify("glmesrd_grid.cpp", 136, "Config", (char)"(rstGridRslt.m_potCfg->tap.bits.nb_tcbs + 1)*GRID_NB_TAPS_PER_TCB == (bMG ? rstGridParam.ucNbTaps + GRID_NB_TAPS_PER_TCB : rstGridParam.ucNbTaps)");
    int v19 = 136;
LABEL_20:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_grid.cpp", v19, v18);
  }
  return 1;
}

uint64_t BlueFin::SATRPT_GRID_TAP_CONFIG_TYPE::tap_order(BlueFin::SATRPT_GRID_TAP_CONFIG_TYPE *this, float *a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  if (a2)
  {
    unsigned int v8 = *((unsigned __int8 *)this + 17);
    if (*((unsigned char *)this + 17))
    {
      unsigned int v9 = 0;
      int v10 = 0;
      do
      {
        unsigned int init = BlueFin::VAR_TAP_COFIG_TYPE::get_init(this, v9);
        if (init <= 0x3E)
        {
          if (v9)
          {
            if (v9 >= v8) {
              LOBYTE(v12) = *((unsigned char *)this + 28);
            }
            else {
              int v12 = *((unsigned __int8 *)this + 23) & (*((unsigned __int16 *)this + 6) >> ((5 - v9)
            }
                                                                                         * *((unsigned char *)this + 22)));
          }
          else
          {
            LOBYTE(v12) = 0;
          }
          if (v9 >= v8)
          {
            int v14 = *((unsigned __int8 *)this + 28);
            char v13 = 5 - v9;
          }
          else
          {
            char v13 = 5 - v9;
            int v14 = (*((unsigned __int16 *)this + 7) >> ((5 - v9) * *((unsigned char *)this + 24))) & *((unsigned __int8 *)this
                                                                                            + 25);
          }
          unsigned __int8 v15 = 0;
          float v16 = (double)init * 0.25;
          float v17 = (double)v12 * 0.0625;
          float v19 = v16 + v17;
          while (1)
          {
            if (v9 >= v8) {
              LOBYTE(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((unsigned char *)this + 28);
            }
            else {
              int v20 = *((unsigned __int8 *)this + 21) & (*((_DWORD *)this + 2) >> (v13 * *((unsigned char *)this + 20)));
            }
            if (v20 < v15) {
              break;
            }
            float v18 = (double)(v14 + 1) * 0.25;
            float v21 = (double)(*((unsigned __int16 *)this + 15) >> 11) * 0.25
                - (float)(v19 + (float)((float)v15 * v18))
                + (double)((*((unsigned __int16 *)this + 15) >> 6) & 0x1F);
            a2[(char)v10] = v21;
            ++v15;
            ++v10;
          }
        }
        ++v9;
      }
      while (v9 < v8);
    }
    else
    {
      int v10 = 0;
    }
    if ((a4 & ((char)v10 > 7)) != 0) {
      int v22 = v10 - 8;
    }
    else {
      int v22 = v10;
    }
    if (a3)
    {
      if ((char)v22 >= 2)
      {
        int v23 = 0;
        do
        {
          int v24 = ~v23 + v22;
          float v25 = a2[v23];
          a2[v23] = a2[v24];
          a2[v24] = v25;
          int v23 = (v23 + 1);
        }
        while (v23 < (v22 + ((v22 & 0x80) >> 7)) << 24 >> 25);
      }
      if (!(_BYTE)v22)
      {
        LOBYTE(v22) = 0;
        return (char)v22;
      }
      uint64_t v26 = 0;
      do
      {
        a3[v26] = v26;
        ++v26;
      }
      while (v22 != v26);
    }
    if (v22 >= 2u)
    {
      int v27 = 0;
      unsigned int v28 = v22 - 1;
      do
      {
        int v29 = a2 + 1;
        uint64_t v30 = v28;
        int v31 = a3 + 1;
        if (~v27 > -v22)
        {
          do
          {
            float v32 = *(v29 - 1);
            if (v32 > *v29)
            {
              *(v29 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *v29;
              *int v29 = v32;
              if (a3)
              {
                unsigned __int8 v33 = *(v31 - 1);
                *(v31 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *v31;
                *int v31 = v33;
              }
            }
            ++v31;
            ++v29;
            --v30;
          }
          while (v30);
        }
        --v28;
      }
      while (v27++ != v22 - 2);
    }
  }
  else
  {
    LOBYTE(v22) = 0;
  }
  return (char)v22;
}

uint64_t BlueFin::GRID_CONFIG_TYPE::bin_order(BlueFin::GRID_CONFIG_TYPE *this, float *a2, unsigned __int8 *a3)
{
  if (!a2) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)this + 1);
  uint64_t result = (v4 & 0x1F) + 1;
  float v6 = -(float)(int)((v4 >> 5) * (result >> 1));
  *a2 = v6;
  if ((v4 & 0x1F) != 0)
  {
    uint64_t v7 = v4 & 0x1F;
    unsigned int v8 = a2 + 1;
    do
    {
      float v6 = v6 + (float)(*((_DWORD *)this + 1) >> 5);
      *v8++ = v6;
      --v7;
    }
    while (v7);
  }
  if (a3)
  {
    uint64_t v9 = 0;
    do
    {
      a3[v9] = v9;
      ++v9;
    }
    while (result != v9);
  }
  return result;
}

uint64_t BlueFin::ST_GRID_CONTEXT::ST_GRID_CONTEXT(uint64_t a1, float *a2, int *a3, uint64_t a4, double *a5, unsigned __int8 *a6, unsigned __int8 *a7, float a8)
{
  *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a6;
  int v8 = *a7;
  *(unsigned char *)a1 = v8;
  LOBYTE(a8) = a7[11];
  float v9 = (float)LODWORD(a8);
  *(float *)(a1 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v9;
  float v10 = *(float *)a4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)a4;
  if (*((unsigned __int16 *)a6 + 4) >= 0x23Fu)
  {
    int v44 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 711, "GetSecPerEpochIndB", (char)"IsValid()");
    int v45 = "glsignalid.h";
    int v46 = 711;
    goto LABEL_33;
  }
  uint64_t v12 = *((int *)a6 + 1);
  int v13 = *a6;
  uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[*a6];
  if (!BlueFin::GlSignalId::s_assSignalIndexAndGnss2epochIndB[7 * (int)v12 + v14])
  {
    int v44 = "ssEpochIndB != 0";
    DeviceFaultNotify("glsignalid.h", 718, "GetSecPerEpochIndB", (char)"ssEpochIndB != 0");
    int v45 = "glsignalid.h";
    int v46 = 718;
    goto LABEL_33;
  }
  *(float *)(a1 + 8) = (float)(__int16)BlueFin::GlSignalId::s_assSignalIndexAndGnss2epochIndB[7 * (int)v12 + v14];
  if (v12 != 1 || (float v17 = 1.5, (v13 - 1) >= 0x20) && (v13 - 66) >= 0xA)
  {
    unsigned int v18 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v12 - v12 + v14];
    if (!v18)
    {
      int v44 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      int v45 = "glsignalid.h";
      int v46 = 685;
      goto LABEL_33;
    }
    float v17 = (double)v18 * 0.001;
  }
  int v19 = *a3;
  *(float *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v17;
  *(_DWORD *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v19;
  LOWORD(v17) = *(_WORD *)(a4 + 24);
  float v20 = (float)LODWORD(v17);
  if (v8) {
    float v20 = 1.3488;
  }
  *(float *)(a1 + 12) = v20;
  float v21 = *a2;
  *(float *)(a1 + 32) = *a2;
  uint64_t v22 = *((void *)a7 + 163);
  unsigned int v23 = *(unsigned __int8 *)(*(void *)(a4 + 64) + (*(_WORD *)(v22 + 6) & 7));
  float v24 = (float)v23;
  *(float *)(a1 + 36) = (float)v23;
  *(float *)(a1 + 28) = (float)v23 / 1000.0;
  float v25 = 1.0;
  float v26 = 1.0;
  float v27 = 1.0;
  if (!v8)
  {
    float v25 = 1.0 / (float)(1 << (4 - 2 * a7[14]));
    float v26 = 1.0 / (float)(1 << (2 * a7[12]));
    float v27 = 1.0 / (float)(1 << a7[13]);
  }
  *(float *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v25;
  *(float *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v26;
  float v28 = (float)(v10 * 1000.0) * v9;
  float v29 = floorf(v28 / v24);
  float v30 = (float)(v28 / (float)(v29 * v24)) * (float)(v28 / (float)(v29 * v24));
  *(float *)(a1 + 56) = v30;
  unsigned int v31 = a7[14];
  float v32 = 0.0;
  if (!a7[14]) {
    float v32 = 1.25;
  }
  if (v31 == 1) {
    float v32 = 0.66667;
  }
  *(float *)(a1 + 48) = v27;
  *(float *)(a1 + 52) = v32;
  unsigned int v33 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a6 + 1)
                                                               - *((int *)a6 + 1)
                                                               + BlueFin::GlSvId::s_aucSvId2gnss[*a6]];
  if (v33 <= 8 && ((1 << v33) & 0x124) != 0)
  {
    if ((*(_WORD *)(v22 + 6) & 7u) < 5)
    {
      int v34 = (char *)&BlueFin::ST_GRID_CONTEXT::astBand5GridNoiseTbl + 72 * (*(_WORD *)(v22 + 6) & 7) + 24 * v31;
      goto LABEL_21;
    }
    int v44 = "rstGridRslt.m_potCfg->frq.bits.grid_coh < _DIM(ST_GRID_CONTEXT::astBand5GridNoiseTbl)";
    DeviceFaultNotify("glmesrd_grid.cpp", 207, "ST_GRID_CONTEXT", (char)"rstGridRslt.m_potCfg->frq.bits.grid_coh < _DIM(ST_GRID_CONTEXT::astBand5GridNoiseTbl)");
    int v45 = "glmesrd_grid.cpp";
    int v46 = 207;
LABEL_33:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v45, v46, v44);
  }
  int v34 = (char *)&BlueFin::ST_GRID_CONTEXT::astCalculatedGridNoise + 24 * v31;
  *int v34 = v23;
  v34[1] = v31;
  *((float *)v34 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v30
                      * (float)(v27
                              * (float)(v26
                                      * (float)(v25
                                              * (float)((float)((float)(v10 * (float)(v20 * (float)(v21 + v32))) * 1000.0)
                                                      * v9))));
  *(_OWORD *)(v34 + 8) = xmmword_263BACB40;
LABEL_21:
  *(void *)(a1 + 88) = v34;
  double v35 = a5[8] - a5[5];
  if (v35 <= 0.0)
  {
    int v44 = "dDeltaTimeStampInRxSec > 0";
    DeviceFaultNotify("glmesrd_grid.cpp", 229, "ST_GRID_CONTEXT", (char)"dDeltaTimeStampInRxSec > 0");
    int v45 = "glmesrd_grid.cpp";
    int v46 = 229;
    goto LABEL_33;
  }
  double v36 = BlueFin::GlMeSrdEstCodePrm::SubMsPart((BlueFin::GlMeSrdEstCodePrm *)a1, v35 * (a5[4] + 1.0));
  double v38 = BlueFin::GlMeSrdEstCodePrm::SubMsPart(v37, a5[9] - a5[6]);
  if (*((unsigned __int16 *)a6 + 4) >= 0x23Fu)
  {
    int v44 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v45 = "glsignalid.h";
    int v46 = 806;
    goto LABEL_33;
  }
  uint64_t v39 = BlueFin::GlSvId::s_aucSvId2gnss[*a6];
  uint64_t v40 = *((int *)a6 + 1);
  int v41 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v40 + v39];
  if (!v41
    || (unsigned int v42 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v40 - v40 + v39]) == 0)
  {
    int v44 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v45 = "glsignalid.h";
    int v46 = 814;
    goto LABEL_33;
  }
  *(double *)(a1 + 72) = a5[8] - a5[9];
  *(double *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (v38 - v36) * (double)(1000 * v41 / v42);
  return a1;
}

void BlueFin::GlMeSrdEstGrid::Run(float a1, uint64_t a2, uint64_t a3, float *a4, int *a5, uint64_t a6, double *a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10, BlueFin::GlMeSrdCarrPrmResults *a11, uint64_t a12, unsigned char *a13, uint64_t a14)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a10 + 1))
  {
    BlueFin::ST_GRID_CONTEXT::ST_GRID_CONTEXT((uint64_t)v27, a4, a5, a6, a7, a9, (unsigned __int8 *)a10, a1);
    switch(*(unsigned char *)(a10 + 4))
    {
      case 1:
      case 4:
        v31[0] = 0;
        for (uint64_t i = 164; i != 292; i += 32)
        {
          unsigned int v18 = &v31[i];
          *(void *)unsigned int v18 = 0;
          *((void *)v18 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          *(void *)(v18 + 22) = 0;
          *((void *)v18 + 2) = 0;
        }
        uint64_t v42 = a8 + 128;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        BlueFin::CT_GRID_XWCV::loadXwcv((uint64_t)v31, a10 + 48, (uint64_t)v27);
        float v19 = v30;
        float v20 = v28 * v29;
        float v21 = 0.0;
        goto LABEL_9;
      case 2:
        v31[0] = 0;
        for (uint64_t j = 164; j != 292; j += 32)
        {
          unsigned int v23 = &v31[j];
          *(void *)unsigned int v23 = 0;
          *((void *)v23 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          *(void *)(v23 + 22) = 0;
          *((void *)v23 + 2) = 0;
        }
        uint64_t v42 = a8 + 128;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        float v25 = 0.0;
        uint64_t v26 = a8 + 128;
        BlueFin::CT_GRID_FULL::loadGrid((uint64_t)&v25, (unsigned int *)(a10 + 48), (uint64_t)v27, (uint64_t)v31);
        float v19 = v30;
        float v20 = v28 * v29;
        float v21 = v25;
LABEL_9:
        BlueFin::CT_GRID_XWCV::runPeakCarrFrqEst(v31, (BlueFin::CT_GRID_XWCV *)a9, a12, a11, v19, v20, v21);
        BlueFin::CT_GRID_XWCV::getResults(v31, (uint64_t)v27, a13);
        BlueFin::CT_GRID_XWCV::getGridResults((uint64_t)v31, v24, a10, a6, (uint64_t)v27, a14);
        break;
      case 3:
        *a13 = 1;
        break;
      default:
        DeviceFaultNotify("glmesrd_grid.cpp", 341, "Run", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_grid.cpp", 341, "0");
    }
  }
}

void BlueFin::CT_GRID_XWCV::loadXwcv(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned char **)(a1 + 296);
  uint64_t v6 = *v5;
  if (*v5)
  {
    float v7 = *(float *)(*(void *)(a3 + 88) + 4);
    int v8 = (float *)(a1 + 4);
    float v9 = v5 + 2;
    do
    {
      unsigned int v10 = *v9++;
      *v8++ = (float)((float)*(unsigned int *)(a2 + 4 * v10) - v7) / v7;
      --v6;
    }
    while (v6);
  }
  BlueFin::CT_GRID_XWCV::runPeakDetection(a1, a3, 0.0);

  BlueFin::CT_GRID_XWCV::runPeakFit((unsigned __int8 *)a1, a3);
}

void BlueFin::CT_GRID_XWCV::runPeakCarrFrqEst(unsigned char *a1, BlueFin::CT_GRID_XWCV *a2, uint64_t a3, BlueFin::GlMeSrdCarrPrmResults *this, float a5, float a6, float a7)
{
  if (*(unsigned char *)a3)
  {
    if (!BlueFin::GlMeSrdCarrPrmResults::isGarbage(this) && *(unsigned char *)this && *((_DWORD *)this + 5))
    {
      float v14 = *((double *)this + 1);
    }
    else
    {
      float v14 = *(float *)(a3 + 16);
      if (vabds_f32(v14, *(float *)(a3 + 12)) <= 10.0) {
        float v14 = v14 + a7;
      }
    }
    uint64_t v15 = *a1;
    if (*a1)
    {
      float v16 = (float *)(a1 + 168);
      do
      {
        *float v16 = v14;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
  }
  if (a7 != 0.0 && *a1)
  {
    float v17 = (float)(3.1416 / (float)(1.0 / a5)) * fabsf(a7);
    float v18 = sinf(v17);
    unint64_t v19 = 0;
    float v21 = log10f(v18 / v17) * 20.0;
    uint64_t v22 = (float *)(a1 + 180);
    do
    {
      *uint64_t v22 = *v22 - BlueFin::CT_GRID_XWCV::GetDriftChips(a2, v20, a7, a6);
      float v23 = *(v22 - 4);
      float v25 = fabsf(BlueFin::CT_GRID_XWCV::GetDriftChips(a2, v24, a7, a6));
      if (v25 > v23) {
        float v25 = v23;
      }
      *(v22 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(v22 - 1) - (float)(v21 + (float)(log10f((float)(v25 * -0.5) + 1.0) * 20.0));
      ++v19;
      v22 += 8;
    }
    while (v19 < *a1);
  }
}

void BlueFin::CT_GRID_XWCV::getResults(unsigned __int8 *a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 1;
  int v3 = *a1;
  a3[1] = v3;
  a3[2] = *(unsigned __int16 *)(*(void *)(*((void *)a1 + 37) + 328) + 10) == 1;
  if (v3)
  {
    unint64_t v6 = 0;
    float v7 = (float *)(a1 + 180);
    int v8 = (float *)(a3 + 20);
    do
    {
      *((void *)v8 - 2) = *(void *)(v7 - 3);
      float v9 = *(v7 - 1);
      float v10 = *(double *)(a2 + 80) + *v7;
      *(v8 - 2) = v9;
      *(v8 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v10;
      float v11 = __exp10f(v9 / 10.0);
      float v12 = *(float *)(*((void *)a1 + 37) + 76) - *(float *)(*((void *)a1 + 37) + 68);
      *int v8 = sqrtf((float)(v12* (float)((float)(2.0 / (float)(v11 * (float)(*(float *)(a2 + 28) * (float)(2.0 - v12)))) + 1.0))/ (float)(v11 + v11));
      v8 += 5;
      ++v6;
      v7 += 8;
    }
    while (v6 < *a1);
  }
}

uint64_t BlueFin::CT_GRID_XWCV::getGridResults(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 0;
  float v7 = *(unsigned __int8 **)(result + 296);
  *(unsigned char *)a6 = *v7;
  *(unsigned char *)(a6 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a3 + 11);
  *(unsigned char *)(a6 + 2) = -56;
  uint64_t v8 = *((void *)v7 + 41);
  *(unsigned char *)(a6 + 3) = *(unsigned char *)(*(void *)(a4 + 64) + (*(_WORD *)(v8 + 6) & 7));
  uint64_t v9 = (*(unsigned char *)(v8 + 4) & 0x1Fu) + 1;
  *(unsigned char *)(a6 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(unsigned char *)(v8 + 4) & 0x1F) + 1;
  int v10 = *(_DWORD *)(v8 + 4) >> 5;
  *(unsigned char *)(a6 + 5) = v10;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(*(void *)(a5 + 88) + 4);
  while (1)
  {
LABEL_2:
    float v11 = *(float *)&v7[4 * v6 + 196] / (float)v10;
    double v12 = v11;
    if (v11 <= 0.0)
    {
      if (v11 >= 0.0)
      {
        LOBYTE(v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        goto LABEL_8;
      }
      double v13 = v12 + -0.5;
    }
    else
    {
      double v13 = v12 + 0.5;
    }
    int v14 = (int)v13;
LABEL_8:
    *(unsigned char *)(a6 + v6 + 414BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v14;
    float v7 = *(unsigned __int8 **)(result + 296);
    uint64_t v15 = *v7;
    if (!*v7) {
      break;
    }
    uint64_t v16 = 0;
    float v17 = (float)((float)((float)(*(float *)(a5 + 12) + *(float *)(a5 + 12)) * *(float *)(a5 + 40)) * *(float *)(a5 + 44))
        * *(float *)(a5 + 48);
    do
    {
      float v18 = (float)*(unsigned int *)(a3 + 4 * (v7[v16 + 2] + v7[v6 + 34] * (unint64_t)v15) + 48)
          / v17;
      double v19 = v18;
      if (v18 <= 0.0)
      {
        if (v18 >= 0.0)
        {
          int v21 = 0;
          goto LABEL_16;
        }
        double v20 = v19 + -0.5;
      }
      else
      {
        double v20 = v19 + 0.5;
      }
      int v21 = (int)v20;
LABEL_16:
      *(_DWORD *)(a6 + 12 + (v6 << 7) + 4 * v16++) = v21;
    }
    while (v15 != v16);
    if (++v6 == v9)
    {
      unint64_t v22 = 0;
      while (1)
      {
        float v23 = *(float *)&v7[4 * v22 + 68] * 4.0;
        double v24 = v23;
        if (v23 > 0.0) {
          break;
        }
        if (v23 < 0.0)
        {
          double v25 = v24 + -0.5;
          goto LABEL_26;
        }
        LOBYTE(v26) = 0;
LABEL_27:
        *(unsigned char *)(a6 + 4108 + v22++) = v26;
        float v7 = *(unsigned __int8 **)(result + 296);
        if (v22 >= *v7) {
          return result;
        }
      }
      double v25 = v24 + 0.5;
LABEL_26:
      int v26 = (int)v25;
      goto LABEL_27;
    }
  }
  if (++v6 != v9) {
    goto LABEL_2;
  }
  return result;
}

float BlueFin::CT_GRID_FULL::loadGrid(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(v23, 0, sizeof(v23));
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 328);
  uint64_t v7 = *(_DWORD *)(v6 + 4) & 0x1F;
  uint64_t v8 = *(_WORD *)(v6 + 8) & 3;
  uint64_t v9 = 8 * v8 + 8;
  uint64_t v10 = v7 + 1;
  memset(v22, 0, sizeof(v22));
  uint64_t v11 = 32 * v8 + 32;
  double v12 = a2;
  do
  {
    uint64_t v13 = 0;
    unsigned int v14 = *((_DWORD *)v22 + v5);
    uint64_t v15 = v12;
    do
    {
      unsigned int v16 = *v15;
      if (*v15 > v14)
      {
        *((unsigned char *)v23 + v5) = v13;
        unsigned int v14 = v16;
      }
      uint64_t v15 = (unsigned int *)((char *)v15 + v11);
      ++v13;
    }
    while (v10 != v13);
    *((_DWORD *)v22 + v5++) = v14;
    ++v12;
  }
  while (v5 != v9);
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  unsigned __int8 v19 = 0;
  do
  {
    if (*((_DWORD *)v22 + v17) > v18)
    {
      unsigned __int8 v19 = v17;
      unsigned int v18 = *((_DWORD *)v22 + v17);
    }
    ++v17;
  }
  while (v9 != v17);
  uint64_t v20 = *((unsigned __int8 *)v23 + v19);
  BlueFin::CT_GRID_XWCV::loadXwcv(a4, (uint64_t)&a2[(v9 * v20)], a3);
  float result = -*(float *)(*(void *)(a1 + 8) + 4 * *(unsigned __int8 *)(*(void *)(a1 + 8) + v20 + 34) + 196);
  *(float *)a1 = result;
  return result;
}

uint64_t BlueFin::CT_GRID_XWCV::runPeakDetection(uint64_t result, uint64_t a2, float a3)
{
  if (!**(unsigned char **)(result + 296)) {
    return result;
  }
  unint64_t v3 = 0;
  uint64_t v4 = *(void *)(a2 + 88);
  float v5 = *(float *)(v4 + 8);
  float v6 = *(float *)(v4 + 12);
  do
  {
    if (v3) {
      float v7 = *(float *)(result + 4 * v3 + 4) - *(float *)(result + 4 * (v3 - 1) + 4);
    }
    else {
      float v7 = 0.0;
    }
    if (v7 >= a3)
    {
      char v8 = 1;
    }
    else
    {
      if (v7 >= (float)-a3) {
        goto LABEL_11;
      }
      char v8 = -1;
    }
    *(unsigned char *)(result + v3 + 132) = v8;
LABEL_11:
    if (*(float *)(result + 4 * v3 + 4) <= v6) {
      *(unsigned char *)(result + v3 + 132) = 0;
    }
    if (v3
      && (*(unsigned char *)(result + v3 + 132) - *(unsigned char *)(result + (v3 - 1) + 132)) == 254)
    {
      *(unsigned char *)(result + v3 + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 2;
    }
    ++v3;
  }
  while (v3 < **(unsigned __int8 **)(result + 296));
  if (**(unsigned char **)(result + 296))
  {
    unint64_t v9 = 0;
    unsigned __int8 v10 = **(unsigned char **)(result + 296);
    do
    {
      if (*(unsigned char *)(result + v9 + 131) == 2 && *(float *)(result + 4 * v9) < v5)
      {
        *(unsigned char *)(result + v9 + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        unsigned __int8 v10 = **(unsigned char **)(result + 296);
      }
      ++v9;
    }
    while (v9 < v10);
  }
  return result;
}

void BlueFin::CT_GRID_XWCV::runPeakFit(unsigned __int8 *a1, uint64_t a2)
{
  LODWORD(v2) = **((unsigned __int8 **)a1 + 37);
  if (v2 < 2) {
    return;
  }
  uint64_t v5 = 0;
  char v6 = 0;
  float v7 = a1 + 4;
  unint64_t v8 = 1;
  float v9 = 1.0;
  do
  {
    if (a1[v8 + 132] != 2) {
      goto LABEL_49;
    }
    unint64_t v10 = *a1;
    if (v10 > 3) {
      break;
    }
    if (!(_BYTE)v8)
    {
      DeviceFaultNotify("glmesrd_grid.cpp", 573, "GetPeakStart", (char)"ucNbPkSmp > 0 && ucPkIdx>=1");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_grid.cpp", 573, "ucNbPkSmp > 0 && ucPkIdx>=1");
    }
    uint64_t v11 = (float *)&a1[32 * v10 + 164];
    unsigned __int8 v12 = v8 - 3;
    int v13 = 4;
    uint64_t v14 = v5;
    while (1)
    {
      int v15 = a1[v14 + 133];
      if (v15 == 2) {
        break;
      }
      if (v15 == 1 && (!a1[v14 + 132] || a1[v14 + 132] == 255))
      {
        unsigned __int8 v12 = v14 + 1;
        goto LABEL_21;
      }
LABEL_16:
      if (!(_BYTE)--v13) {
        goto LABEL_21;
      }
      if (!(unint64_t)v14--)
      {
        unsigned __int8 v12 = 0;
        goto LABEL_21;
      }
    }
    int v16 = a1[v14 + 132];
    if (v16 != 255 && v16 != 0) {
      goto LABEL_16;
    }
    unsigned __int8 v12 = v14;
LABEL_21:
    unsigned __int8 v19 = v8 - v12;
    uint64_t v20 = &a1[32 * v10];
    unsigned __int8 v23 = v20[185];
    unint64_t v22 = v20 + 185;
    unsigned __int8 v21 = v23;
    *(v22 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8 - v12;
    if (v2 - 1 > v12)
    {
      uint64_t v24 = 0;
      int v25 = 7;
      int v26 = &a1[v12];
      do
      {
        uint64_t v27 = (uint64_t)&a1[32 * v10 + v21++];
        *unint64_t v22 = v21;
        *(unsigned char *)(v27 + 186) = v12 + v24;
        int v28 = v26[v24 + 132];
        if (v28 == 2)
        {
          if (!v26[v24 + 133]) {
            goto LABEL_33;
          }
        }
        else if (v28 == 255)
        {
          unsigned int v29 = v26[v24 + 133];
          if (v29 < 2 || v24 && v29 == 2) {
            goto LABEL_33;
          }
        }
        if (!(_BYTE)--v25) {
          goto LABEL_33;
        }
        LODWORD(v2) = **((unsigned __int8 **)a1 + 37);
        ++v24;
      }
      while ((int)v2 - 1 > v12 + (int)v24);
    }
    uint64_t v30 = (uint64_t)&a1[32 * v10 + v21++];
    *unint64_t v22 = v21;
    *(unsigned char *)(v30 + 186) = v2 - 1;
LABEL_33:
    if (v21 < 3u)
    {
      *(void *)uint64_t v11 = 0;
      *(void *)&a1[32 * v10 + 172] = 0;
      *(void *)&a1[32 * v10 + 186] = 0;
      *(void *)&a1[32 * v10 + 180] = 0;
    }
    else
    {
      if (v8 != v12)
      {
        unsigned int v31 = (v8 - v12);
        if (v21 - 1 > v31)
        {
          long long v32 = &a1[32 * v10];
          uint64_t v33 = v32[v31 + 185];
          float v34 = *(float *)&v7[4 * v33];
          uint64_t v35 = v32[v31 + 187];
          float v36 = *(float *)&v7[4 * v35];
          if ((float)(v34 + v36) > 0.0)
          {
            uint64_t v37 = *((void *)a1 + 37) + 68;
            float v38 = *(float *)(v37 + 4 * v33) - *(float *)(v37 + 4 * v35);
            uint64_t v39 = v32[v19 + 186];
            float v40 = *(float *)&v7[4 * v39];
            float v41 = *(float *)(v37 + 4 * v39);
            float v42 = (float)((float)(v34 - v36) * v38) / (float)(v34 + v36);
            float v43 = -v42;
            if (v42 >= 0.0) {
              float v43 = v42;
            }
            float v44 = __exp10f((float)(v43 * 6.0) / 20.0);
            *((float *)v32 + 45) = v41 + v42;
            float v45 = v40 * v44;
            float v9 = 1.0;
            *((float *)v32 + 43) = v45;
            *uint64_t v11 = fabsf(v38 * 0.5);
            unint64_t v10 = *a1;
          }
        }
      }
      int v46 = &a1[32 * v10];
      float v47 = *((float *)v46 + 43);
      int v48 = *(float **)(a2 + 88);
      if ((v6 & 1) != 0 && v47 < v48[5])
      {
        char v49 = &a1[32 * v10];
        *(void *)(v49 + 172) = 0;
        *(void *)(v49 + 16bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        *(void *)(v49 + 186) = 0;
        *(void *)(v49 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        char v6 = 1;
      }
      else
      {
        float v50 = *(float *)(a2 + 28);
        float v51 = *(float *)(a2 + 32);
        float v52 = (float)((float)((float)(v48[1] + (float)(v47 * v48[1]))
                            * (float)(v9
                                    / (float)((float)((float)((float)(*(float *)(a2 + 12) * *(float *)(a2 + 40))
                                                            * *(float *)(a2 + 44))
                                                    * *(float *)(a2 + 48))
                                            * *(float *)(a2 + 56))))
                    / floorf((float)((float)(*(float *)(a2 + 16) * *(float *)(a2 + 4)) / v50) + 0.5))
            - (float)(*(float *)(a2 + 36) * v51);
        if (v52 <= 0.0) {
          float v52 = 0.000000001;
        }
        float v53 = -(float)(*(float *)(a2 + 8)
                     - (float)(log10f((float)((float)((float)(*(float *)(a2 + 20) * *(float *)(a2 + 20)) * v52)/ (float)(v50 * v50))/ v51)* 10.0));
        if (v53 < 7.0) {
          float v53 = 7.0;
        }
        *((float *)v46 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v53;
        v6 |= v53 >= v48[4];
        *a1 = v10 + 1;
      }
    }
LABEL_49:
    ++v8;
    unint64_t v2 = **((unsigned __int8 **)a1 + 37);
    ++v5;
  }
  while (v8 < v2);
}

float BlueFin::CT_GRID_XWCV::GetDriftChips(BlueFin::CT_GRID_XWCV *this, const BlueFin::GlSignalId *a2, float a3, float a4)
{
  float v6 = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(this, a3, a2);
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    int v13 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v14 = 806;
    goto LABEL_9;
  }
  uint64_t v7 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this];
  uint64_t v8 = *((int *)this + 1);
  int v9 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v8 + v7];
  unsigned int v10 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v8 - v8 + v7];
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    int v13 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v14 = 814;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v14, v13);
  }
  return (float)(v6 * (float)(1000 * v9 / v10)) * a4;
}

uint64_t BlueFin::VAR_TAP_COFIG_TYPE::get_init(BlueFin::VAR_TAP_COFIG_TYPE *this, unsigned int a2)
{
  if (*((unsigned __int8 *)this + 17) <= a2)
  {
    LOBYTE(vbzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((unsigned char *)this + 28);
  }
  else
  {
    if (a2 < 3)
    {
      unsigned int v2 = *((_DWORD *)this + 1);
      char v3 = 2;
    }
    else
    {
      unsigned int v2 = *(_DWORD *)this;
      char v3 = 5;
    }
    return *((unsigned __int8 *)this + 19) & (v2 >> ((v3 - a2) * *((unsigned char *)this + 18)));
  }
  return v4;
}

uint64_t BlueFin::GlMeSrdAsicInitPatchLoader::AckBelogsToAnotherPacketInBuf(BlueFin::GlMeSrdAsicInitPatchLoader *this, int a2, int a3, int a4)
{
  unsigned int v4 = *((unsigned __int8 *)this + 420);
  if (!*((unsigned char *)this + 420)) {
    return 0;
  }
  unsigned __int8 v9 = 0;
  unsigned __int8 v10 = *((unsigned char *)this + 418);
  unsigned __int8 v11 = v10;
  while (*((_DWORD *)this + 10 * v11 + 25) + *((_DWORD *)this + 10 * v11 + 27) != a4
       || BlueFin::GlMeSrdAsicInitPatchLoader::GetBlockCRCBuf((uint64_t)this, v11) != a2
       || BlueFin::GlMeSrdAsicInitPatchLoader::GetBlockCheckSumBuf(this, v11) != a3)
  {
    ++v9;
    unsigned __int8 v11 = (v11 + 1) & 7;
    if (v4 <= v9) {
      return 0;
    }
  }
  if (v9)
  {
    int v13 = 0;
    do
    {
      BlueFin::GlMeSrdAsicInitPatchLoader::ReQueuePacketIntoBuffer(this);
      LOBYTE(vbzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((unsigned char *)this + 420) + 1;
      *((unsigned char *)this + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      ++v13;
    }
    while (v9 > v13);
    unsigned __int8 v10 = *((unsigned char *)this + 418);
  }
  *((unsigned char *)this + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4 + ~v9;
  *((unsigned char *)this + 418) = (v10 + 1) & 7;
  return 1;
}

double BlueFin::GlMeSrdAsicInitPatchLoader::ReQueuePacketIntoBuffer(BlueFin::GlMeSrdAsicInitPatchLoader *this)
{
  unsigned __int8 v1 = *((unsigned char *)this + 418);
  char v2 = *((unsigned char *)this + 420);
  char v3 = (char *)this + 40 * v1 + 96;
  double result = *(double *)v3;
  uint64_t v5 = (char *)this + 40 * ((v2 + v1) & 7) + 96;
  *(void *)uint64_t v5 = *(void *)v3;
  unsigned __int8 v5[8] = v3[8];
  *((_DWORD *)v5 + 3) = *((_DWORD *)v3 + 3);
  *((void *)v5 + 2) = *((void *)v3 + 2);
  *((_DWORD *)v5 + 6) = *((_DWORD *)v3 + 6);
  v5[28] = v3[28];
  *((_DWORD *)v5 + 8) = *((_DWORD *)v3 + 8);
  *((unsigned char *)this + 42BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v2 - 1;
  *((unsigned char *)this + 418) = (v1 + 1) & 7;
  ++*((unsigned char *)this + 417);
  return result;
}

void BlueFin::GlMeSrdCntIn::~GlMeSrdCntIn(BlueFin::GlMeSrdCntIn *this)
{
  *(void *)this = &unk_270EBC250;
  BlueFin::GlEventPump::RemoveActive(*((void *)this + 16), this);
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdCntIn::~GlMeSrdCntIn(this);

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlMeSrdCntIn::OnReliableAck(BlueFin::GlMeSrdCntIn *this, void *a2)
{
  return BlueFin::GlQueue::putFIFO((BlueFin::GlMeSrdCntIn *)((char *)this + 40), 13, (char)a2);
}

uint64_t (*(*BlueFin::GlMeSrdCntIn::wait4arm(BlueFin::GlMeSrdCntIn *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  double result = 0;
  unsigned int v4 = *a2;
  if (v4 > 0x2B)
  {
    switch(v4)
    {
      case ',':
        return result;
      case '.':
        GlCustomLog(14, "CNTIN measurement received while waiting for CNTIN armed!  Maybe due to packet loss.\n");
        if (*((unsigned char *)this + 225))
        {
          if (*((unsigned char *)this + 224)) {
            uint64_t v8 = 1;
          }
          else {
            uint64_t v8 = 2;
          }
        }
        else
        {
          uint64_t v8 = 3;
        }
        LOWORD(v7) = *(_WORD *)(*((void *)this + 17) + 60);
        (*(void (**)(void, uint64_t, double, double))(**((void **)this + 15) + 144))(*((void *)this + 15), v8, *((double *)this + 27), (double)v7);
        uint64_t v5 = "&GlMeSrdCntIn::idle";
        float v6 = BlueFin::GlMeSrdCntIn::idle;
        goto LABEL_17;
      case '-':
        BlueFin::GlMeSrdCntIn::DisarmFrequencyCapture(this);
        (*(void (**)(void, uint64_t, double, double))(**((void **)this + 15) + 144))(*((void *)this + 15), 5, 0.0, 0.0);
        uint64_t v5 = "&GlMeSrdCntIn::wait4disarm";
        float v6 = (uint64_t (*)())BlueFin::GlMeSrdCntIn::wait4disarm;
        goto LABEL_17;
    }
    return BlueFin::GlMeSrdCntIn::running;
  }
  if (v4 - 2 < 2) {
    return result;
  }
  if (v4 != 13) {
    return BlueFin::GlMeSrdCntIn::running;
  }
  if (!a2[1])
  {
    uint64_t v5 = "&GlMeSrdCntIn::wait4msmt";
    float v6 = (uint64_t (*)())BlueFin::GlMeSrdCntIn::wait4msmt;
LABEL_17:
    BlueFin::QHsm::tran(this, v6, (uint64_t)v5);
  }
  return 0;
}

uint64_t (*BlueFin::GlMeSrdCntIn::running(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v2 = *a2;
  if (v2 - 2 < 2) {
    return 0;
  }
  BOOL v4 = v2 > 0x2E;
  uint64_t v5 = (1 << v2) & 0x700000002000;
  if (!v4 && v5 != 0)
  {
    DeviceFaultNotify("glmesrd_cntin_ctrl.cpp", 140, "running", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_cntin_ctrl.cpp", 140, "0");
  }
  return BlueFin::QHsm::top;
}

void BlueFin::GlMeSrdCntIn::DisarmFrequencyCapture(BlueFin::GlMeSrdCntIn *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  v5[0] = BlueFin::GlMeSrdCntIn::OnReliableAck;
  v5[1] = this;
  __int16 v6 = 257;
  char v7 = 0;
  uint64_t v8 = v2;
  int v9 = 0;
  __int16 v10 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 40))(v4, v5, 3);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v5);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v5);
}

void sub_263A7AA88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*BlueFin::GlMeSrdCntIn::wait4disarm(void *a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v2 = *a2;
  if (v2 <= 0x2E)
  {
    if (((1 << v2) & 0x60000000000CLL) != 0) {
      return 0;
    }
    if (v2 == 13)
    {
      if (a2[1] == 1) {
        BlueFin::QHsm::tran(a1, BlueFin::GlMeSrdCntIn::idle, (uint64_t)"&GlMeSrdCntIn::idle");
      }
      return 0;
    }
    if (v2 == 44)
    {
      DeviceFaultNotify("glmesrd_cntin_ctrl.cpp", 309, "wait4disarm", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_cntin_ctrl.cpp", 309, "0");
    }
  }
  return BlueFin::GlMeSrdCntIn::running;
}

uint64_t (*(*BlueFin::GlMeSrdCntIn::wait4msmt(BlueFin::GlMeSrdCntIn *this, unsigned __int8 *a2, double a3, double a4))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v5 = *a2;
  double result = BlueFin::GlMeSrdCntIn::running;
  if (v5 <= 4)
  {
    if (v5 == 2)
    {
      unsigned int v12 = *(unsigned __int16 *)(*((void *)this + 17) + 62) + 1000;
      *((void *)this + 26) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdCntIn *)((char *)this + 176), 5, 0, v12);
      double result = 0;
      *((unsigned char *)this + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      return result;
    }
    if (v5 != 3) {
      return result;
    }
    BlueFin::GlTimer::disarm((uint64_t)this + 176);
  }
  else
  {
    if (v5 == 5 || v5 == 45)
    {
      BlueFin::GlMeSrdCntIn::DisarmFrequencyCapture(this);
      v8.n128_u64[0] = 0;
      v9.n128_u64[0] = 0;
      (*(void (**)(__n128, __n128))(**((void **)this + 15) + 144))(v8, v9);
      __int16 v10 = "&GlMeSrdCntIn::wait4disarm";
      unsigned __int8 v11 = (uint64_t (*)())BlueFin::GlMeSrdCntIn::wait4disarm;
    }
    else
    {
      if (v5 != 46) {
        return result;
      }
      if (*((unsigned char *)this + 225))
      {
        if (*((unsigned char *)this + 224)) {
          uint64_t v7 = 1;
        }
        else {
          uint64_t v7 = 2;
        }
      }
      else
      {
        uint64_t v7 = 3;
      }
      LOWORD(abzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_WORD *)(*((void *)this + 17) + 60);
      (*(void (**)(void, uint64_t, double, double))(**((void **)this + 15) + 144))(*((void *)this + 15), v7, *((double *)this + 27), (double)*(unint64_t *)&a4);
      __int16 v10 = "&GlMeSrdCntIn::idle";
      unsigned __int8 v11 = BlueFin::GlMeSrdCntIn::idle;
    }
    BlueFin::QHsm::tran(this, v11, (uint64_t)v10);
  }
  return 0;
}

unint64_t BlueFin::GlMeSrdCtrlSm::EswIsIdle(BlueFin::GlMeSrdCtrlSm *this, void *a2)
{
  __int16 v5 = 59;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v5);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  return result;
}

void BlueFin::GlMeSrdCtrlSmRpcSatEvt::~GlMeSrdCtrlSmRpcSatEvt(BlueFin::GlMeSrdCtrlSmRpcSatEvt *this)
{
  *(void *)this = &unk_270EBC2A8;
}

{
  JUMPOUT(0x263E6DD70);
}

void BlueFin::GlMeSrdCtrlSm::~GlMeSrdCtrlSm(BlueFin::GlMeSrdCtrlSm *this)
{
  *(void *)this = &unk_270EBC288;
  (*(void (**)(void, void, void))(**((void **)this + 16) + 72))(*((void *)this + 16), 0, 0);
  BlueFin::GlEventPump::RemoveActive(*((void *)this + 18), this);
  *((void *)this + 488) = &unk_270EBC2A8;
  *((void *)this + 42bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = &unk_270EBC718;
  BlueFin::GlMeSrdMeasTimingMgr::~GlMeSrdMeasTimingMgr((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072));
  BlueFin::GlMeSrdCntIn::~GlMeSrdCntIn((BlueFin::GlMeSrdCtrlSm *)((char *)this + 2816));
  BlueFin::GlMeSrdSyncIn::~GlMeSrdSyncIn((BlueFin::GlMeSrdCtrlSm *)((char *)this + 2560));
  BlueFin::GlMeSrdAsicinit::~GlMeSrdAsicinit((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1760));
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdCtrlSm::~GlMeSrdCtrlSm(this);

  JUMPOUT(0x263E6DD70);
}

unint64_t BlueFin::GlMeSrdCtrlSm::LoadEswPatch(BlueFin::GlMeSrdCtrlSm *this)
{
  *((unsigned char *)this + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  __int16 v4 = 26;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

unsigned char *BlueFin::GlMeSrdCtrlSm::MeasureCNTIN(unsigned char *this, int a2)
{
  if (!this[5576])
  {
    if (!this[219])
    {
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 269, "MeasureCNTIN", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 269, "0");
    }
    uint64_t v2 = (BlueFin::GlQueue *)(this + 2856);
    if (a2) {
      int v3 = 44;
    }
    else {
      int v3 = 45;
    }
    return (unsigned char *)BlueFin::GlQueue::putFIFO(v2, v3, 0);
  }
  return this;
}

uint64_t BlueFin::GlMeSrdCtrlSm::SetGeofenceMode(BlueFin::GlMeSrdCtrlSm *this, char a2)
{
  if (!*((unsigned char *)this + 219))
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 320, "SetGeofenceMode", (char)"m_bAsicInitDone");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 320, "m_bAsicInitDone");
  }
  uint64_t v2 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 40);

  return BlueFin::GlQueue::putFIFO(v2, 31, a2);
}

uint64_t BlueFin::GlMeSrdCtrlSm::SetGeofenceData(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 217))
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 328, "SetGeofenceData", (char)"m_bGeofenceStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 328, "m_bGeofenceStarted");
  }
  unsigned __int8 v1 = *(uint64_t (**)(void))(**(void **)(a1 + 192) + 32);

  return v1();
}

uint64_t BlueFin::GlMeSrdCtrlSm::GetGeofenceState(BlueFin::GlMeSrdCtrlSm *this)
{
  if (!*((unsigned char *)this + 217))
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 342, "GetGeofenceState", (char)"m_bGeofenceStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 342, "m_bGeofenceStarted");
  }
  unsigned __int8 v1 = *(uint64_t (**)(void))(**((void **)this + 24) + 48);

  return v1();
}

uint64_t BlueFin::GlMeSrdCtrlSm::SetMeasurementIntervalMs(uint64_t this, unsigned int a2, unsigned int a3)
{
  if (!*(unsigned char *)(this + 219))
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 376, "SetMeasurementIntervalMs", (char)"m_bAsicInitDone");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 376, "m_bAsicInitDone");
  }
  if (!*(unsigned char *)(this + 5576))
  {
    __int16 v3 = a3;
    __int16 v4 = a2;
    uint64_t v5 = this + 34512;
    unint64_t v6 = (BlueFin::GlMeSrdMeasTimingMgr *)(this + 3072);
    if (*(unsigned char *)(this + 3324))
    {
      uint64_t v7 = (unsigned char *)(this + 3335);
    }
    else if (*(unsigned char *)(this + 3340))
    {
      uint64_t v7 = (unsigned char *)(this + 3351);
    }
    else
    {
      uint64_t v7 = (unsigned char *)(this + 3358);
    }
    if (*v7) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = a2;
    }
    (*(void (**)(void, uint64_t))(**(void **)(this + 184) + 48))(*(void *)(this + 184), v8);
    this = BlueFin::GlMeSrdMeasTimingMgr::SetReportingInterval(v6, v8);
    *(unsigned char *)uint64_t v5 = 1;
    *(_WORD *)(v5 + 2) = v4;
    *(_WORD *)(v5 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  }
  return this;
}

void BlueFin::GlMeSrdCtrlSm::DataBurstCtrl(BlueFin::GlMeSrdCtrlSm *this, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  if (!*((unsigned char *)this + 5576))
  {
    if (a2)
    {
      a7 = (*(uint64_t (**)(void))(**((void **)this + 17) + 584))(*((void *)this + 17));
      GlCustomLog(14, "GlDineCtrl::DataBurstCtrl(%s, %d, %d, 0x%02X, 0x%02X, %d, %d)\n", "ON", a3, a4, a5, a6, a7, a8);
    }
    BlueFin::GlMeSrdCtrlSm::ProgramDebugBurstMode(this, a2, a3, a4, a5, a6, a7, a8);
    *(unsigned char *)(*((void *)this + 17) + 552) = a2;
  }
}

void BlueFin::GlMeSrdCtrlSm::ProgramDebugBurstMode(BlueFin::GlMeSrdCtrlSm *this, uint64_t a2, char a3, char a4, uint64_t a5, char a6, int a7, int a8)
{
  uint64_t v16 = *((void *)this + 15);
  if (!v16) {
    uint64_t v16 = *((void *)this + 14);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 80))(v16);
  v24[0] = 0;
  v24[1] = 0;
  char v25 = 0;
  __int16 v26 = 1;
  uint64_t v27 = v17;
  int v28 = 0;
  __int16 v29 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 1);
  v21[0] = a6;
  v21[1] = a5;
  v21[2] = a3;
  v21[3] = a4;
  int v22 = a7;
  int v23 = a8;
  if ((a2 & 1) == 0) {
    v21[0] = 0;
  }
  uint64_t v18 = *((void *)this + 15);
  if (!v18) {
    uint64_t v18 = *((void *)this + 14);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 24))(v18, a2, a5);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
  (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v20 + 104))(v20, v24, v21);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v24);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v24);
}

void sub_263A7B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

unint64_t BlueFin::GlMeSrdCtrlSm::SetMeasurementPeriodCorrection(unint64_t this, int a2)
{
  if (!*(unsigned char *)(this + 219))
  {
    unint64_t v6 = "m_bAsicInitDone";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 428, "SetMeasurementPeriodCorrection", (char)"m_bAsicInitDone");
    int v7 = 428;
    goto LABEL_16;
  }
  unint64_t v2 = this;
  if (*(unsigned char *)(this + 5576)) {
    return this;
  }
  int v8 = 0;
  (*(void (**)(void, char *, int *))(**(void **)(this + 136) + 560))(*(void *)(this + 136), (char *)&v8 + 2, &v8);
  if (SHIWORD(v8) > a2)
  {
    a2 = (__int16)(a2 + 1000 * (((__int16)(HIWORD(v8) - a2) - 1) / 1000) + 1000);
    if (a2 < SHIWORD(v8))
    {
      unint64_t v6 = "sCorrectionMs >= ssMinMeasurementPeriodCorrection";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 454, "SetMeasurementPeriodCorrection", (char)"sCorrectionMs >= ssMinMeasurementPeriodCorrection");
      int v7 = 454;
      goto LABEL_16;
    }
  }
  if (a2 > (__int16)v8)
  {
    a2 = (__int16)(((__int16)(a2 - v8) - 1) % 1000 - (-(__int16)v8 - 1) - 1000);
    if (a2 > (__int16)v8)
    {
      unint64_t v6 = "sCorrectionMs <= ssMaxMeasurementPeriodCorrection";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 469, "SetMeasurementPeriodCorrection", (char)"sCorrectionMs <= ssMaxMeasurementPeriodCorrection");
      int v7 = 469;
LABEL_16:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v7, v6);
    }
  }
  if (a2 < SHIWORD(v8))
  {
    unint64_t v6 = "sCorrectionMs >= ssMinMeasurementPeriodCorrection";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 475, "SetMeasurementPeriodCorrection", (char)"sCorrectionMs >= ssMinMeasurementPeriodCorrection");
    int v7 = 475;
    goto LABEL_16;
  }
  if (a2 > (__int16)v8)
  {
    unint64_t v6 = "sCorrectionMs <= ssMaxMeasurementPeriodCorrection";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 476, "SetMeasurementPeriodCorrection", (char)"sCorrectionMs <= ssMaxMeasurementPeriodCorrection");
    int v7 = 476;
    goto LABEL_16;
  }
  __int16 v4 = (BlueFin::GlMeSrdMeasTimingMgr *)(v2 + 3072);
  int ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms(v4);
  return BlueFin::GlMeSrdMeasTimingMgr::SetMIAdjustment((unint64_t)v4, ReportingLms, a2);
}

unsigned char *BlueFin::GlMeSrdCtrlSm::Set1HzPhaseMs(unsigned char *this, double a2)
{
  if (!this[219])
  {
    int v7 = "m_bAsicInitDone";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 486, "Set1HzPhaseMs", (char)"m_bAsicInitDone");
    int v8 = 486;
    goto LABEL_15;
  }
  unint64_t v2 = (unint64_t)this;
  if (this[5576]) {
    return this;
  }
  this = (unsigned char *)BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdMeasTimingMgr *)(this + 3072));
  double v4 = a2 - (double)this;
  if (v4 <= 0.0)
  {
    double v5 = 0.0;
    if (v4 < 0.0) {
      double v5 = ceil(v4 + -0.5);
    }
  }
  else
  {
    double v5 = floor(v4 + 0.5);
  }
  int v6 = (int)v5;
  if (((int)v5 - 1000) <= 0xFFFFF893)
  {
    int v7 = "slCorrection >= -900 && slCorrection <= 999";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 493, "Set1HzPhaseMs", (char)"slCorrection >= -900 && slCorrection <= 999");
    int v8 = 493;
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v8, v7);
  }
  if (v6)
  {
    return (unsigned char *)BlueFin::GlMeSrdCtrlSm::SetMeasurementPeriodCorrection(v2, (__int16)v6);
  }
  return this;
}

void BlueFin::GlMeSrdCtrlSm::SetPpsAiding(BlueFin::GlMeSrdCtrlSm *this, int a2, double a3, double a4)
{
  double v5 = a3;
  unsigned int v7 = *((_DWORD *)this + 886);
  if (a2 || a3 != 0.0 || a4 != 0.0)
  {
    if (!*((unsigned char *)this + 223))
    {
      if (v7 % 0x3E8 != (*((_DWORD *)this + 829) + *((__int16 *)this + 1660)) % 0x3E8u) {
        return;
      }
      *((unsigned char *)this + 223) = 1;
    }
    LODWORD(a3) = *((_DWORD *)this + 887);
    double v12 = (double)*(unint64_t *)&a3;
    double v13 = (*(double (**)(void))(**((void **)this + 17) + 88))(*((void *)this + 17));
    double v14 = v13;
    if (*((unsigned char *)this + 248))
    {
      double v15 = v13 + *((double *)this + 30);
      if (v15 >= 4294967300.0) {
        double v15 = v15 + -4294967300.0;
      }
      *((double *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v15;
      double v16 = v12 - v15;
      double v17 = v12 - v15 + 4294967300.0;
      if (v12 - v15 >= -2147483650.0) {
        double v17 = v12 - v15;
      }
      if (v16 >= 2147483650.0) {
        double v18 = v16 + -4294967300.0;
      }
      else {
        double v18 = v17;
      }
      if (v18 >= -10.0 && fabs(v18) <= 2.0)
      {
        double v30 = v15 + v18 * 0.1;
        if (v30 >= 4294967300.0) {
          double v30 = v30 + -4294967300.0;
        }
        *((double *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v30;
        goto LABEL_25;
      }
      double v19 = v12 + 0.5;
    }
    else
    {
      double v19 = v12 + 0.5;
    }
    if (v19 >= 4294967300.0) {
      double v19 = v19 + -4294967300.0;
    }
    *((double *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v19;
    *((unsigned char *)this + 248) = 1;
LABEL_25:
    uint64_t v20 = *((void *)this + 15);
    if (!v20) {
      uint64_t v20 = *((void *)this + 14);
    }
    double v21 = a4 * 0.001 * v14;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 80))(v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    char v33 = 0;
    __int16 v34 = 1;
    uint64_t v35 = v22;
    int v36 = 0;
    __int16 v37 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, 1);
    if (!*((unsigned char *)this + 222))
    {
      (*(void (**)(void))(**((void **)this + 17) + 1384))();
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 583, "SetPpsAiding", (char)"bPpsEnabled");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 583, "bPpsEnabled");
    }
    double v23 = (v5 + 1000.0) * 0.001 * v21 + *((double *)this + 30);
    if (v23 >= 4294967300.0) {
      double v24 = v23 + -4294967300.0;
    }
    else {
      double v24 = (v5 + 1000.0) * 0.001 * v21 + *((double *)this + 30);
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 48))(v22);
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25);
    (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v26 + 56))(v26, &v31, (v24 + 0.5), (v21 + 0.5));
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v31);
    double v27 = v24 - v12;
    double v28 = v24 - v12 + 4294967300.0;
    if (v24 - v12 >= -2147483650.0) {
      double v28 = v24 - v12;
    }
    if (v27 >= 2147483650.0) {
      double v29 = v27 + -4294967300.0;
    }
    else {
      double v29 = v28;
    }
    GlCustomLog(15, "PPS: GlMeSrdCtrlSm::SetPpsAiding(%u)  PROGRAM     TriggerClk:%.2lf  TriggerLms:%.6lf  PeriodMs:%.6lf\n", v7, v24, v29 / (v21 * 0.001) + (double)v7, v21 / v14 * 1000.0);
    goto LABEL_38;
  }
  *((unsigned char *)this + 222) = 0;
  uint64_t v8 = *((void *)this + 15);
  if (!v8) {
    uint64_t v8 = *((void *)this + 14);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 80))(v8);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  char v33 = 0;
  __int16 v34 = 1;
  uint64_t v35 = v9;
  int v36 = 0;
  __int16 v37 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v11 + 64))(v11, &v31);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v31);
LABEL_38:
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v31);
}

void sub_263A7BEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdCtrlSm::CWTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned char *a7, int a8, double a9, double a10, char a11, unsigned char *a12, unsigned char *a13)
{
  *(unsigned char *)(a1 + 216) = 1;
  if (*(_WORD *)(a1 + 1614))
  {
    double v17 = "m_otSigAid.number_of_signals == 0";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 608, "CWTest", (char)"m_otSigAid.number_of_signals == 0");
    int v18 = 608;
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  uint64_t v14 = a1 + 34248;
  double v15 = (double *)(a1 + 34248);
  do
  {
    *double v15 = (double)*(int *)(a2 + v13);
    LODWORD(a1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a4 + v13);
    v15[10] = (double)*(int *)(a3 + v13);
    v15[20] = (double)*(unint64_t *)&a10;
    v13 += 4;
    ++v15;
  }
  while (v13 != 40);
  *(unsigned char *)(a1 + 34496) = *a7;
  *(unsigned char *)(a1 + 34497) = *a12;
  *(unsigned char *)(a1 + 34498) = *a13;
  *(_DWORD *)(a1 + 3450BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a8;
  if (a5 < 0x3E8)
  {
    double v17 = "ulCoherentUs >= 1000";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 622, "CWTest", (char)"ulCoherentUs >= 1000");
    int v18 = 622;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v18, v17);
  }
  *(_DWORD *)(a1 + 34488) = a5 / 0x3E8;
  *(_DWORD *)(a1 + 34492) = a6;
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 672))();
  *(unsigned char *)(v14 + 257) = result;
  *(unsigned char *)(v14 + 256) = a11;
  return result;
}

void BlueFin::GlMeSrdCtrlSm::ToggleHostWakeConfigure(BlueFin::GlMeSrdCtrlSm *this, int a2)
{
  if (a2)
  {
    uint64_t v3 = *((void *)this + 15);
    if (!v3) {
      uint64_t v3 = *((void *)this + 14);
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 80))(v3);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v16 = 0;
    __int16 v17 = 1;
    uint64_t v18 = v4;
    int v19 = 0;
    __int16 v20 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
    int v12 = (*(uint64_t (**)(void))(**((void **)this + 17) + 584))();
    uint64_t v13 = 0x100000001;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    (*(void (**)(uint64_t, uint64_t *, int *))(*(void *)v6 + 80))(v6, &v14, &v12);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v14);
  }
  else
  {
    uint64_t v7 = *((void *)this + 15);
    if (!v7) {
      uint64_t v7 = *((void *)this + 14);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 80))(v7);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    char v16 = 0;
    __int16 v17 = 1;
    uint64_t v18 = v8;
    int v19 = 0;
    __int16 v20 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
    *((unsigned char *)this + 3452bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 17) + 584))();
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 96))(v11, &v14, v9);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v14);
  }
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v14);
}

void sub_263A7C314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdCtrlSm::ToggleCoexConfigure(BlueFin::GlMeSrdCtrlSm *this)
{
  uint64_t v2 = *((void *)this + 15);
  if (!v2) {
    uint64_t v2 = *((void *)this + 14);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 80))(v2);
  v8[0] = 0;
  v8[1] = 0;
  char v9 = 0;
  __int16 v10 = 1;
  uint64_t v11 = v3;
  int v12 = 0;
  __int16 v13 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 17) + 600))();
  uint64_t v7 = 0x100000001;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  (*(void (**)(uint64_t, void *, int *))(*(void *)v5 + 80))(v5, v8, &v6);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v8);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v8);
}

void sub_263A7C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdCtrlSm::ToggleCoexGpio(BlueFin::GlMeSrdCtrlSm *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 15);
  if (!v4) {
    uint64_t v4 = *((void *)this + 14);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
  v9[0] = 0;
  v9[1] = 0;
  char v10 = 0;
  __int16 v11 = 1;
  uint64_t v12 = v5;
  int v13 = 0;
  __int16 v14 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 17) + 600))(*((void *)this + 17));
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, v9, v8, a2);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v9);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v9);
}

void sub_263A7C61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdCtrlSm::SaveNvRamAndRtc(BlueFin::GlMeSrdCtrlSm *this, unsigned int a2, unsigned int *a3, int a4)
{
  if (!*((unsigned char *)this + 5576))
  {
    uint64_t v8 = *((void *)this + 15);
    if (!v8) {
      uint64_t v8 = *((void *)this + 14);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 80))(v8);
    v26[0] = 0;
    v26[1] = 0;
    char v27 = 0;
    __int16 v28 = 1;
    uint64_t v29 = v9;
    int v30 = 0;
    __int16 v31 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, 1);
    int v25 = 0;
    double v10 = *((double *)this + 452);
    LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)this + 906);
    LOWORD(v12) = *((_WORD *)this + 1814);
    double v13 = (double)v11 + (double)v12 * 4294967300.0;
    double v14 = floor(v13 + ((double)a2 - v10) * 32.768 + 0.5);
    if (v14 >= 8.79609302e12) {
      double v15 = v14 + -8.79609302e12;
    }
    else {
      double v15 = v14;
    }
    GlCustomLog(15, "SaveNvRamAndRtc:  LastCapture  Lms:%.3lf  RtcCnt:%.0lf  RtcMs:%.3lf\n", v10, v13, v13 / 32.768);
    if (v15 <= 0.0)
    {
      GlCustomLog(11, "SaveNvRamAndRtc:  Error! Negative Rtc Count\n");
      unsigned int v20 = 0;
      int v21 = 0;
    }
    else
    {
      double v16 = fmod(v15 * 2.32830644e-10, 4294967300.0);
      if (v15 * 2.32830644e-10 <= 4294967300.0) {
        double v16 = v15 * 2.32830644e-10;
      }
      if (v16 < -4294967300.0) {
        double v16 = -fmod(-v16, 4294967300.0);
      }
      if (v16 < 0.0) {
        unsigned int v17 = --v16;
      }
      else {
        LOWORD(v17) = v16;
      }
      long double v18 = fmod(v15, 4294967300.0);
      double v19 = fmod(v18, 4294967300.0);
      if (v18 <= 4294967300.0) {
        double v19 = v18;
      }
      if (v19 < -4294967300.0) {
        double v19 = -fmod(-v19, 4294967300.0);
      }
      if (v19 < 0.0) {
        unsigned int v20 = --v19;
      }
      else {
        unsigned int v20 = v19;
      }
      int v21 = 32 * (v17 & 0x7FF);
    }
    GlCustomLog(15, "SaveNvRamAndRtc:  AtLms:%u  RtcCnt:%.0lf  RtcMs:%.3lf  Reg1:%08x  Reg2:%08x  Reg3:%08x\n", a2, v15, v15 / 32.768, *a3, a3[1], a3[2]);
    v22[0] = v21;
    v22[1] = v20;
    uint64_t v23 = *(void *)a3;
    unsigned int v24 = a3[2];
    BlueFin::GlMeSrdNvRamWriter::SendNvramToEsw((BlueFin::GlMeSrdNvRamWriter *)v22, (BlueFin::GlMeSrdTransaction *)v26, a4);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v26);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v26);
  }
}

void sub_263A7C8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

unint64_t BlueFin::GlMeSrdCtrlSm::GetRadioRegisters(BlueFin::GlMeSrdCtrlSm *this)
{
  __int16 v4 = 61;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdCtrlSm::GetAdcCapture(BlueFin::GlMeSrdCtrlSm *this)
{
  __int16 v4 = 62;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdAsicInitCallback::OnCommunicationDead(BlueFin::GlMeSrdAsicInitCallback *this)
{
  return BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)(*((void *)this + 1) + 40), 38, 0);
}

uint64_t BlueFin::GlMeSrdAsicInitCallback::OnEswPatchLoaded(BlueFin::GlMeSrdCtrlSm **this)
{
  BlueFin::GlMeSrdCtrlSm::ReportSupportedFeatures(this[1]);
  uint64_t v2 = this[1];
  GlCustomLog(12, "GlMeSrdCtrlSm::EswPatchLoaded!\n");
  BlueFin::GlQueue::putFIFO((BlueFin::GlMeSrdCtrlSm *)((char *)v2 + 40), 27, 0);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this[1] + 20) + 88);

  return v3();
}

uint64_t BlueFin::GlMeSrdAsicInitCallback::OnAsicDebug(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 232) = a2;
  return this;
}

unint64_t BlueFin::GlMeSrdEvtListener::OnSubHeartbeat(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 16;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdEvtListener::OnCntinMeasured(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 18;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdEvtListener::OnNoiseReport(BlueFin::GlMeSrdEvtListener *this)
{
  __int16 v4 = 60;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdEvtListener::OnPpsOut(BlueFin::GlMeSrdEvtListener *this)
{
  return (*(uint64_t (**)(double))(**(void **)(*((void *)this + 1) + 160) + 160))(0.0);
}

unint64_t BlueFin::GlMeSrdCtrlSm::OnReliableTransactionAck(BlueFin::GlMeSrdCtrlSm *this, void *a2)
{
  v5[0] = 13;
  v5[1] = a2;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, unsigned __int8 *))this + 4))(this, v5);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  return result;
}

uint64_t (*BlueFin::GlMeSrdCtrlSm::com_breakdown(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 <= 4)
  {
    if (v3 == 2)
    {
      *(void *)(a1 + 1688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, 0, 0x1F4u);
      *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      BlueFin::GlMeSrdAsicinit::DebugComDeadIssue((BlueFin::GlMeSrdAsicinit *)(a1 + 1760));
      return 0;
    }
    if (v3 == 3)
    {
      BlueFin::GlTimer::disarm(a1 + 1656);
      return 0;
    }
    return BlueFin::GlMeSrdCtrlSm::my_top;
  }
  if (v3 == 5)
  {
    BlueFin::GlMeSrdStats::SetHeartbeatMs(*(int32x2_t **)(a1 + 200), *(_DWORD *)(a1 + 3544));
    uint64_t v5 = *(void *)(a1 + 200);
    long long v6 = *(_OWORD *)(a1 + 2504);
    *(void *)(v5 + 92BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a1 + 2520);
    *(_OWORD *)(v5 + 90bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 176))(*(void *)(a1 + 160), *(void *)(a1 + 200) + 8);
    (*(void (**)(void))(**(void **)(a1 + 160) + 192))(*(void *)(a1 + 160));
    BlueFin::QHsm::tran((void *)a1, BlueFin::GlMeSrdCtrlSm::off, (uint64_t)"&GlMeSrdCtrlSm::off");
    return 0;
  }
  if (v3 != 38) {
    return BlueFin::GlMeSrdCtrlSm::my_top;
  }
  return 0;
}

uint64_t (*(*BlueFin::GlMeSrdCtrlSm::wait4memdump(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  __int16 v4 = BlueFin::GlMeSrdCtrlSm::my_top;
  if (v3 <= 4)
  {
    if (v3 == 2)
    {
      *(unsigned char *)(a1 + 5576) = 1;
      *(void *)(a1 + 1688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, 1, 0x3E8u);
      *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      BlueFin::GlMeSrdMeasTimingMgr::CancelOngoingMIAdjustment((BlueFin::GlMeSrdMeasTimingMgr *)(a1 + 3072));
      uint64_t v9 = *(void *)(a1 + 120);
      if (!v9) {
        uint64_t v9 = *(void *)(a1 + 112);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 88))(v9, a1 + 5320);
      uint64_t v10 = *(void *)(a1 + 120);
      if (!v10) {
        uint64_t v10 = *(void *)(a1 + 112);
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 56))(v10);
      uint64_t v11 = *(void *)(a1 + 120);
      if (!v11) {
        uint64_t v11 = *(void *)(a1 + 112);
      }
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(v11);
      uint64_t v18 = 0;
      v19[0] = 0;
      *(_DWORD *)((char *)v19 + 7) = 0;
      uint64_t v20 = v12;
      int v21 = 0;
      __int16 v22 = 0;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 136) + 264))()) {
        unsigned __int16 v13 = -8706;
      }
      else {
        unsigned __int16 v13 = -8194;
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v15 + 160))(v15, &v18, v13);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v18);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v18);
    }
    else
    {
      if (v3 != 3) {
        return v4;
      }
      *(unsigned char *)(a1 + 5576) = 0;
      uint64_t v5 = *(void *)(a1 + 120);
      if (!v5) {
        uint64_t v5 = *(void *)(a1 + 112);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, a1 + 5320);
      BlueFin::GlTimer::disarm(a1 + 1656);
      BlueFin::GlUtils::Assert(BlueFin::GlUtils::m_pInstance, (const char *)(a1 + 5444), *(unsigned int *)(a1 + 5572), v6);
    }
    return 0;
  }
  if (v3 == 5)
  {
    unsigned int v8 = a2[1];
    if (v8 < 0x3C)
    {
      *(void *)(a1 + 1688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, v8 + 1, 0x3E8u);
      *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      BlueFin::GlMeSrdMeasTimingMgr::SetHeartBeat((BlueFin::GlMeSrdMeasTimingMgr *)(a1 + 3072), *(_DWORD *)(a1 + 3544) + 1000 * a2[1]);
      uint64_t ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdMeasTimingMgr *)(a1 + 3072));
      BlueFin::GlMeSrdStats::SetHeartbeatMs(*(int32x2_t **)(a1 + 200), ReportingLms);
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 176))(*(void *)(a1 + 160), *(void *)(a1 + 200) + 8);
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), ReportingLms, 1000);
      return 0;
    }
    goto LABEL_12;
  }
  if (v3 == 22 || v3 == 38)
  {
LABEL_12:
    BlueFin::QHsm::tran((void *)a1, BlueFin::GlMeSrdCtrlSm::off, (uint64_t)"&GlMeSrdCtrlSm::off");
    return 0;
  }
  return v4;
}

void sub_263A7D1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*BlueFin::GlMeSrdCtrlSm::wait4standby(uint64_t a1, unsigned __int8 *a2, double a3))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v4 = *a2;
  uint64_t v5 = BlueFin::GlMeSrdCtrlSm::my_top;
  if (v4 > 0xC)
  {
    switch(v4)
    {
      case 0xDu:
        if (a2[1] != 1) {
          return 0;
        }
        BlueFin::GlTimer::disarm(a1 + 1656);
        *(void *)(a1 + 1688) = a1;
        BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 63, 0, 0x64u);
        uint64_t v5 = 0;
        *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        break;
      case 0x15u:
        long long v6 = "&GlMeSrdCtrlSm::wait4memdump";
        uint64_t v7 = (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4memdump;
        goto LABEL_23;
      case 0x3Fu:
        BlueFin::GlMeSrdStats::ReportStats(*(BlueFin::GlMeSrdStats **)(a1 + 200), a3);
        (*(void (**)(void))(**(void **)(a1 + 160) + 104))(*(void *)(a1 + 160));
        goto LABEL_10;
    }
  }
  else
  {
    switch(v4)
    {
      case 2u:
        if (*(unsigned char *)(a1 + 3324))
        {
          unsigned int v8 = (unsigned __int16 *)(a1 + 3332);
        }
        else if (*(unsigned char *)(a1 + 3340))
        {
          unsigned int v8 = (unsigned __int16 *)(a1 + 3348);
        }
        else
        {
          unsigned int v8 = (unsigned __int16 *)(a1 + 3356);
        }
        unsigned int v12 = *v8;
        if (*(unsigned __int16 *)(a1 + 3356) > v12) {
          unsigned int v12 = *(unsigned __int16 *)(a1 + 3356);
        }
        *(void *)(a1 + 1688) = a1;
        BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, 0, v12 + 1250);
        *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        BlueFin::GlMeSrdMeasTimingMgr::CancelOngoingMIAdjustment((BlueFin::GlMeSrdMeasTimingMgr *)(a1 + 3072));
        uint64_t v13 = *(void *)(a1 + 120);
        if (!v13) {
          uint64_t v13 = *(void *)(a1 + 112);
        }
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 80))(v13);
        v21[0] = BlueFin::GlMeSrdCtrlSm::OnReliableTransactionAck;
        v21[1] = a1;
        __int16 v22 = 257;
        char v23 = 0;
        uint64_t v24 = v14;
        int v25 = 0;
        __int16 v26 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, 1);
        uint64_t v15 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 48);
        if (*(unsigned char *)(a1 + 232))
        {
          uint64_t v16 = v15(v14);
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
          uint64_t v18 = 0;
        }
        else
        {
          uint64_t v19 = v15(v14);
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
          uint64_t v18 = 1;
        }
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v17 + 152))(v17, v21, v18);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v21);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v21);
        return 0;
      case 3u:
        uint64_t v9 = *(void *)(a1 + 120);
        if (!v9) {
          uint64_t v9 = *(void *)(a1 + 112);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 160))(v9, a1 + 4096);
        uint64_t v10 = *(void *)(a1 + 120);
        if (!v10) {
          uint64_t v10 = *(void *)(a1 + 112);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 176))(v10, a1 + 3904);
        uint64_t v11 = *(void *)(a1 + 120);
        if (!v11) {
          uint64_t v11 = *(void *)(a1 + 112);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 128))(v11, a1 + 3856);
        BlueFin::GlTimer::disarm(a1 + 1656);
        return 0;
      case 5u:
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 176))(*(void *)(a1 + 160), *(void *)(a1 + 200) + 8);
        (*(void (**)(void))(**(void **)(a1 + 160) + 192))(*(void *)(a1 + 160));
LABEL_10:
        *(unsigned char *)(a1 + 219) = 0;
        long long v6 = "&GlMeSrdCtrlSm::off";
        uint64_t v7 = BlueFin::GlMeSrdCtrlSm::off;
LABEL_23:
        BlueFin::QHsm::tran((void *)a1, v7, (uint64_t)v6);
        return 0;
    }
  }
  return v5;
}

void sub_263A7D594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

double BlueFin::GlMeSrdCtrlSm::AagcDecode4775(int a1, unsigned int a2)
{
  switch(a1)
  {
    case 0:
      double v3 = log10((double)(int)((a2 & 7) + 1 + ((a2 & 7) + 1) * ((a2 >> 3) & 7)));
      double v4 = -12.0;
      goto LABEL_7;
    case 1:
      int v5 = (a2 >> 3) & 7;
      int v6 = (a2 >> 6) & 7;
      goto LABEL_6;
    case 2:
      int v5 = (a2 >> 8) & 7;
      int v6 = (a2 >> 11) & 7;
LABEL_6:
      double v3 = log10((double)(((1000 * (_WORD)v6 + 1000 + (1000 * (_WORD)v6 + 1000) * (_WORD)v5) & 0xFFF8u) / ((a2 & 7) + 1)));
      double v4 = -52.0;
LABEL_7:
      double result = v4 + v3 * 20.0;
      break;
    case 3:
    case 4:
    case 5:
      double result = (double)(int)(((a2 >> 6) & 7) + (a2 & 7) + ((a2 >> 9) & 7) + ((a2 >> 3) & 7)) * 3.0;
      break;
    default:
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 2312, "AagcDecode4775", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 2312, "0");
  }
  return result;
}

long double BlueFin::GlMeSrdCtrlSm::DagcDecode4753(BlueFin::GlMeSrdCtrlSm *this)
{
  int v1 = (int)this;
  unsigned int v2 = (this >> 7) & 0x1F;
  if (((unsigned __int16)this & 0x800) != 0) {
    unsigned int v2 = -(-(this >> 7) & 0x1F);
  }
  float v3 = ldexpf(1.0, v2 - 3);
  if (v1) {
    return log10((double)(v1 & 0x7F) * 0.015625 * v3) * 20.0;
  }
  else {
    return -100.0;
  }
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::wait4spectrum(BlueFin::GlMeSrdCtrlSm *this, unsigned char *a2))(uint64_t a1, unsigned char *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  float v3 = (char *)this + 34240;
  unsigned int v4 = *a2;
  if (v4 <= 0xE)
  {
    if (v4 != 2)
    {
      if (v4 != 3) {
        return BlueFin::GlMeSrdCtrlSm::test;
      }
      (*(void (**)(void))(**(void **)v3 + 32))();
      *((unsigned char *)this + 216) = 0;
      BlueFin::GlTimer::disarm((uint64_t)this + 1656);
      (***(void (****)(void))v3)();
      double result = 0;
      *(void *)float v3 = 0;
      return result;
    }
    if (*(void *)v3)
    {
      uint64_t v17 = "me->m_otTestMgr == nullptr";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3265, "wait4spectrum", (char)"me->m_otTestMgr == nullptr");
      int v18 = 3265;
    }
    else
    {
      int v8 = (*(uint64_t (**)(void))(**((void **)this + 17) + 240))(*((void *)this + 17));
      uint64_t v9 = **((void **)this + 17);
      if (v8)
      {
        if ((*(unsigned int (**)(void))(v9 + 184))() == 872480775
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 872611847
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 889126919
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 939589639
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 939720711
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 956235783
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 805371913
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 1006829577
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 805502985)
        {
          int v10 = 2;
          goto LABEL_47;
        }
        if ((*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 805371910
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 805502982
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 822018054
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 805371912
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 1006829576
          || (*(unsigned int (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) == 805502984)
        {
          int v10 = 3;
LABEL_47:
          uint64_t v14 = *((void *)this + 15);
          if (!v14) {
            uint64_t v14 = *((void *)this + 14);
          }
          double v15 = BlueFin::GlMeSrdTestMgrSPA::GlMeSrdTestMgrSPA((uint64_t)this + 5600, v14, (uint64_t)this, v10);
          *(void *)float v3 = v16;
          (*(void (**)(double))(*((void *)this + 700) + 16))(v15);
          (*(void (**)(void))(**(void **)v3 + 24))();
          uint64_t v11 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 1656);
          *((void *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
LABEL_50:
          BlueFin::GlTimer::arm(v11, 5, 0, 0x2710u);
          double result = 0;
          *((unsigned char *)this + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
          return result;
        }
        uint64_t v17 = "0";
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3293, "wait4spectrum", (char)"0");
        int v18 = 3293;
      }
      else
      {
        if ((*(uint64_t (**)(void))(v9 + 248))())
        {
          int v10 = 1;
          goto LABEL_47;
        }
        int v12 = (*(uint64_t (**)(void))(**((void **)this + 17) + 256))(*((void *)this + 17));
        uint64_t v13 = **((void **)this + 17);
        if (v12)
        {
          if (((*(uint64_t (**)(void))(v13 + 184))() & 0xF000FFFF) == 0x3000000F
            || ((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000011
            || ((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000011)
          {
            int v10 = 4;
            goto LABEL_47;
          }
          if (((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x3000000E
            || ((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000010
            || ((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000010)
          {
            int v10 = 5;
            goto LABEL_47;
          }
          uint64_t v17 = "0";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3312, "wait4spectrum", (char)"0");
          int v18 = 3312;
        }
        else if ((*(unsigned int (**)(void))(v13 + 264))())
        {
          if (((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000013
            || ((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000015)
          {
            int v10 = 6;
            goto LABEL_47;
          }
          if (((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000012
            || ((*(uint64_t (**)(void))(**((void **)this + 17) + 184))(*((void *)this + 17)) & 0xF000FFFF) == 0x30000014)
          {
            int v10 = 7;
            goto LABEL_47;
          }
          uint64_t v17 = "0";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3327, "wait4spectrum", (char)"0");
          int v18 = 3327;
        }
        else
        {
          uint64_t v17 = "0";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3332, "wait4spectrum", (char)"0");
          int v18 = 3332;
        }
      }
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v18, v17);
  }
  double result = 0;
  switch(*a2)
  {
    case 0xF:
      uint64_t v6 = *((unsigned int *)this + 886);
      BlueFin::GlMeSrdStats::SetHeartbeatMs(*((int32x2_t **)this + 25), *((_DWORD *)this + 886));
      (*(void (**)(void, uint64_t))(**((void **)this + 20) + 176))(*((void *)this + 20), *((void *)this + 25) + 8);
      (*(void (**)(void, uint64_t))(**(void **)v3 + 64))(*(void *)v3, v6);
      return 0;
    case 0x10:
      return result;
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x16:
      return BlueFin::GlMeSrdCtrlSm::test;
    case 0x15:
      if (!v3[282]) {
        return BlueFin::GlMeSrdCtrlSm::test;
      }
      return 0;
    case 0x17:
      BlueFin::GlMeSrdCtrlSm::GotRadioReport(this);
      return 0;
    default:
      if (v4 != 39) {
        return BlueFin::GlMeSrdCtrlSm::test;
      }
      BlueFin::GlTimer::disarm((uint64_t)this + 1656);
      break;
  }
  do
  {
    if (!(*(unsigned int (**)(void))(**(void **)v3 + 56))())
    {
      *((void *)this + 21BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = this;
      uint64_t v11 = (BlueFin::GlMeSrdCtrlSm *)((char *)this + 1656);
      goto LABEL_50;
    }
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)v3 + 48))();
    (*(void (**)(void, uint64_t))(**((void **)this + 20) + 216))(*((void *)this + 20), v7);
  }
  while (!*(unsigned char *)(v7 + 185));
  BlueFin::QHsm::tran(this, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::idle, (uint64_t)"&GlMeSrdCtrlSm::idle");
  return 0;
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::wait4cw(uint64_t a1, uint64_t a2))(uint64_t a1, unsigned char *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v3 = v2;
  STACK[0x44B8] = *MEMORY[0x263EF8340];
  unsigned int v5 = *v4;
  uint64_t v6 = BlueFin::GlMeSrdCtrlSm::test;
  if (v5 <= 0xF)
  {
    if (v5 != 2)
    {
      if (v5 == 3)
      {
        (*(void (**)(void))(**(void **)(v2 + 34240) + 32))(*(void *)(v2 + 34240));
        uint64_t v16 = *(void (****)(void))(v3 + 34240);
        *(unsigned char *)(v3 + 216) = 0;
        (**v16)();
        uint64_t v6 = 0;
        *(void *)(v3 + 3424BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      }
      else if (v5 == 15)
      {
        uint64_t v7 = *(unsigned int *)(v2 + 3544);
        BlueFin::GlMeSrdStats::SetHeartbeatMs(*(int32x2_t **)(v2 + 200), *(_DWORD *)(v2 + 3544));
        (*(void (**)(void, uint64_t))(**(void **)(v3 + 160) + 176))(*(void *)(v3 + 160), *(void *)(v3 + 200) + 8);
        (*(void (**)(void, uint64_t))(**(void **)(v3 + 34240) + 64))(*(void *)(v3 + 34240), v7);
        BlueFin::GlMeas::GlMeas((uint64_t)&v34);
        uint64_t v8 = 0;
        uint64_t v9 = 100;
        do
        {
          uint64_t v10 = STACK[0x4480] + v8;
          BYTE4(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
          int v32 = -1;
          __int16 v33 = 575;
          v11.n128_f64[0] = BlueFin::GlSigMeas::init(v10, (uint64_t)&v31 + 4);
          v8 += 144;
          --v9;
        }
        while (v9);
        LODWORD(STACK[0x448C]) = 0;
LABEL_23:
        LODWORD(v3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
        (*(void (**)(void, uint64_t *, __n128))(**(void **)(v3 + 160) + 16))(*(void *)(v3 + 160), &v34, v11);
        return 0;
      }
      return v6;
    }
    uint64_t v13 = (uint64_t *)(v2 + 34240);
    if (*(void *)(v2 + 34240))
    {
      uint64_t v29 = "me->m_otTestMgr == nullptr";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3103, "wait4cw", (char)"me->m_otTestMgr == nullptr");
      int v30 = 3103;
    }
    else
    {
      uint64_t v14 = *(_DWORD **)(v2 + 136);
      int v15 = v14[2];
      if ((v15 - 2) < 2)
      {
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v14 + 184))(v14) == 872480775
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 872611847
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 889126919
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 939589639
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 939720711
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 956235783
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 805371913
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 1006829577
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 805502985
          || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x3000000F
          || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x30000011)
        {
          int v15 = 2;
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 805371910
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 805502982
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 822018054
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 805371912
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 1006829576
          || (*(unsigned int (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) == 805502984
          || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x3000000E
          || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x30000010)
        {
          int v15 = 3;
LABEL_37:
          uint64_t v20 = *(void *)(v3 + 120);
          if (!v20) {
            uint64_t v20 = *(void *)(v3 + 112);
          }
          *uint64_t v13 = BlueFin::GlMeSrdTestMgrCW::GlMeSrdTestMgrCW(v3 + 5600, v20, *(void *)(v3 + 136), v3, *(void *)(v3 + 176), v15);
          if (((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 256))() & 1) != 0
            || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 264))(*(void *)(v3 + 136)) & 1) != 0)
          {
            uint64_t v21 = *(void *)(v3 + 136);
            char v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 1032))(v21);
            int v23 = (*(uint64_t (**)(void))(**(void **)(v3 + 136) + 1080))();
            *(unsigned char *)(v21 + 53BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v22;
            *(_DWORD *)(v21 + 532) = v23;
            if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 256))(v21))
            {
              char v24 = v22 ^ 1;
              if (v23 < 1) {
                char v24 = 1;
              }
              if (v24)
              {
                BlueFin::GlMeSrdConstants::_4755_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT = 1096532623;
                BlueFin::GlMeSrdConstants::_4755_BEIDOU_B1C_COH_NOI_PWR_AT_CA_EPOCH_INT = 1107963150;
              }
              else
              {
                BlueFin::GlMeSrdConstants::_4755_GALILEO_E1_COH_NOI_PWR_AT_CA_EPOCH_INT = 1088405111;
                BlueFin::GlMeSrdConstants::_4755_BEIDOU_B1C_COH_NOI_PWR_AT_CA_EPOCH_INT = 1099736023;
                BlueFin::GlMeSrdConstants::_4755_GPS_L1_COH_NOI_PWR_AT_CA_EPOCH_INT = 1083173765;
              }
            }
            goto LABEL_52;
          }
          uint64_t v25 = *(void *)(v3 + 136);
          int v26 = *(_DWORD *)(v25 + 28);
          if (v26 == 26000000)
          {
            uint64_t v27 = 0x419796AA70000000;
          }
          else
          {
            if (v26 != 52000000)
            {
LABEL_52:
              (*(void (**)(uint64_t, uint64_t))(*(void *)*v13 + 16))(*v13, v3 + 34248);
              (*(void (**)(void))(*(void *)*v13 + 24))();
              return 0;
            }
            uint64_t v27 = 0x4197AC7BE158E780;
          }
          *(void *)(v25 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v27;
          *(void *)(v25 + 48) = 0x4192F0631AAD8600;
          goto LABEL_52;
        }
      }
      else
      {
        if (v15 == 1) {
          goto LABEL_37;
        }
        if (v15 == 5)
        {
          if (((*(uint64_t (**)(_DWORD *))(*(void *)v14 + 184))(v14) & 0xF000FFFF) == 0x30000013
            || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x30000015)
          {
            int v15 = 6;
            goto LABEL_37;
          }
          if (((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x30000012
            || ((*(uint64_t (**)(void))(**(void **)(v3 + 136) + 184))(*(void *)(v3 + 136)) & 0xF000FFFF) == 0x30000014)
          {
            int v15 = 7;
            goto LABEL_37;
          }
        }
      }
      uint64_t v29 = "eChipType != GlMeSrdTestMgr::ChipTypeUnknown";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3154, "wait4cw", (char)"eChipType != GlMeSrdTestMgr::ChipTypeUnknown");
      int v30 = 3154;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v30, v29);
  }
  switch(v5)
  {
    case 0x10u:
      LODWORD(v7) = *(_DWORD *)(v2 + 3592);
      BlueFin::GlMeas::GlMeas((uint64_t)&v34);
      uint64_t v17 = 0;
      uint64_t v18 = 100;
      do
      {
        uint64_t v19 = STACK[0x4480] + v17;
        BYTE4(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
        int v32 = -1;
        __int16 v33 = 575;
        v11.n128_f64[0] = BlueFin::GlSigMeas::init(v19, (uint64_t)&v31 + 4);
        v17 += 144;
        --v18;
      }
      while (v18);
      LODWORD(STACK[0x448C]) = 1;
      goto LABEL_23;
    case 0x17u:
      BlueFin::GlMeSrdCtrlSm::GotRadioReport((BlueFin::GlMeSrdCtrlSm *)v2);
      return 0;
    case 0x27u:
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(v2 + 34240) + 40))(*(void *)(v2 + 34240));
      (*(void (**)(void, void, void, void, double, double, double))(**(void **)(v3 + 160) + 208))(*(void *)(v3 + 160), *(unsigned __int8 *)(v12 + 25), *(unsigned __int8 *)(v12 + 24), *(unsigned __int8 *)(v12 + 26), *(double *)v12, *(double *)(v12 + 8), *(double *)(v12 + 16));
      return 0;
  }
  return v6;
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::platform_test(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned char *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unsigned int v3 = *a2;
  unsigned int v4 = BlueFin::GlMeSrdCtrlSm::test;
  if (v3 <= 0xE)
  {
    switch(v3)
    {
      case 2u:
        if (*((void *)this + 4280))
        {
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3454, "platform_test", (char)"me->m_otTestMgr == nullptr");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 3454, "me->m_otTestMgr == nullptr");
        }
        uint64_t v5 = *((void *)this + 15);
        if (!v5) {
          uint64_t v5 = *((void *)this + 14);
        }
        (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, (char *)this + 5320);
        *((void *)this + 216) = this;
        BlueFin::GlTimer::arm((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1696), 5, 0, 0x1388u);
        unsigned int v4 = 0;
        *((unsigned char *)this + 172BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
        break;
      case 3u:
        uint64_t v6 = *((void *)this + 15);
        if (!v6) {
          uint64_t v6 = *((void *)this + 14);
        }
        (*(void (**)(uint64_t, char *))(*(void *)v6 + 96))(v6, (char *)this + 5320);
        *((unsigned char *)this + 218) = 0;
        BlueFin::GlTimer::disarm((uint64_t)this + 1656);
        return 0;
      case 5u:
        BlueFin::QHsm::tran(this, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::com_breakdown, (uint64_t)"&GlMeSrdCtrlSm::com_breakdown");
        return 0;
    }
    return v4;
  }
  switch(v3)
  {
    case 0xFu:
      int v7 = *((_DWORD *)this + 68);
      *((void *)this + 216) = this;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdCtrlSm *)((char *)this + 1696), 5, 0, 0x4E20u);
      *((unsigned char *)this + 172BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      if (v7 == 1)
      {
        GlCustomLog(15, "<PFT> SerialStressTest \n");
        if (*((_DWORD *)this + 69)) {
          unsigned int v8 = *((_DWORD *)this + 69);
        }
        else {
          unsigned int v8 = 40;
        }
        if (*((_DWORD *)this + 71)) {
          unsigned int v9 = *((_DWORD *)this + 71);
        }
        else {
          unsigned int v9 = 200;
        }
        if (v9 >= 0xC9)
        {
          GlCustomLog(15, "<PFT> Max bytes to be transmitted cannot be greater than 200 \n");
          LOBYTE(v9) = -56;
        }
        if (v8 >= 0x4C)
        {
          GlCustomLog(15, "<PFT> Max packets to be transmitted cannot be greater than 75 \n");
          unsigned int v8 = 75;
        }
        uint64_t v10 = *((unsigned __int8 *)this + 296);
        uint64_t v24 = 0x101010101010101 * v10;
        v23[0] = vdupq_n_s8(v10);
        v23[1] = v23[0];
        _OWORD v23[2] = v23[0];
        v23[3] = v23[0];
        v23[4] = v23[0];
        v23[5] = v23[0];
        v23[6] = v23[0];
        v23[7] = v23[0];
        v23[8] = v23[0];
        v23[9] = v23[0];
        v23[10] = v23[0];
        v23[11] = v23[0];
        if (v8 <= 1) {
          unsigned int v8 = 1;
        }
        do
        {
          uint64_t v11 = *((void *)this + 15);
          if (!v11) {
            uint64_t v11 = *((void *)this + 14);
          }
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 80))(v11);
          uint64_t v18 = 0;
          v19[0] = 0;
          *(_DWORD *)((char *)v19 + 7) = 0;
          uint64_t v20 = v12;
          int v21 = 0;
          __int16 v22 = 0;
          (*(void (**)(uint64_t, void))(*(void *)v12 + 16))(v12, 0);
          uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
          uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, void, _OWORD *))(*(void *)v14 + 16))(v14, &v18, 1, v9, v23);
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v18);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v18);
          --v8;
        }
        while (v8);
      }
      else
      {
        GlCustomLog(11, "<PFT> unknown test\n");
      }
      BlueFin::GlMeSrdMeasTimingMgr::SetHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 886));
      uint64_t ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072));
      BlueFin::GlMeSrdStats::SetHeartbeatMs(*((int32x2_t **)this + 25), ReportingLms);
      (*(void (**)(void, uint64_t))(**((void **)this + 20) + 176))(*((void *)this + 20), *((void *)this + 25) + 8);
      (*(void (**)(void, uint64_t))(**((void **)this + 23) + 32))(*((void *)this + 23), ReportingLms);
      int v15 = *(void (**)(void))(**((void **)this + 19) + 24);
      goto LABEL_37;
    case 0x10u:
      BlueFin::GlMeSrdMeasTimingMgr::SetSubHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 898));
      (*(void (**)(void, void))(**((void **)this + 23) + 40))(*((void *)this + 23), *((unsigned int *)this + 842));
      int v15 = *(void (**)(void))(**((void **)this + 19) + 24);
LABEL_37:
      v15();
      return 0;
    case 0x17u:
      BlueFin::GlMeSrdCtrlSm::GotRadioReport(this);
      return 0;
  }
  return v4;
}

void sub_263A7F284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::extsuspend(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  unsigned int v4 = BlueFin::GlMeSrdCtrlSm::steady;
  if (v3 <= 0xC)
  {
    if (v3 != 2)
    {
      if (v3 == 3)
      {
        BlueFin::GlTimer::disarm(a1 + 1656);
        return 0;
      }
      return BlueFin::GlMeSrdCtrlSm::normal;
    }
    if (*(unsigned char *)(a1 + 3324))
    {
      unsigned int v9 = (unsigned __int16 *)(a1 + 3332);
    }
    else if (*(unsigned char *)(a1 + 3340))
    {
      unsigned int v9 = (unsigned __int16 *)(a1 + 3348);
    }
    else
    {
      unsigned int v9 = (unsigned __int16 *)(a1 + 3356);
    }
    unsigned int v10 = *v9;
    if (*(unsigned __int16 *)(a1 + 3356) > v10) {
      unsigned int v10 = *(unsigned __int16 *)(a1 + 3356);
    }
    unsigned int v11 = 5 * v10;
    if (v11 >= 0x4E20) {
      unsigned int v11 = 20000;
    }
    *(void *)(a1 + 1688) = a1;
    BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, 0, v11 + 250);
    unsigned int v4 = 0;
    *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  }
  else
  {
    if (v3 == 13)
    {
      if (a2[1] == 2) {
        BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::wait4hb, (uint64_t)"&GlMeSrdCtrlSm::wait4hb");
      }
      return 0;
    }
    if (v3 != 15)
    {
      if (v3 == 28)
      {
        if (*(_WORD *)(a1 + 1614))
        {
          uint64_t v5 = *(void *)(a1 + 120);
          if (!v5) {
            uint64_t v5 = *(void *)(a1 + 112);
          }
          uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
          v13[0] = BlueFin::GlMeSrdCtrlSm::OnReliableTransactionAck;
          v13[1] = a1;
          __int16 v14 = 258;
          char v15 = 0;
          uint64_t v16 = v6;
          int v17 = 0;
          __int16 v18 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 1);
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
          (*(void (**)(uint64_t, void *, void))(*(void *)v8 + 88))(v8, v13, 0);
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v13);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v13);
        }
        return 0;
      }
      return BlueFin::GlMeSrdCtrlSm::normal;
    }
  }
  return (uint64_t (*(*(*(*)(uint64_t, unsigned __int8 *))(BlueFin::GlMeSrdCtrlSm *, unsigned __int8 *))(uint64_t, unsigned __int8 *))())v4;
}

void sub_263A7F4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::wait4extsuspend(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  unsigned int v4 = BlueFin::GlMeSrdCtrlSm::normal;
  switch(v3)
  {
    case 13:
      if (a2[1] == 2) {
        BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::extsuspend, (uint64_t)"&GlMeSrdCtrlSm::extsuspend");
      }
      return 0;
    case 3:
      BlueFin::GlTimer::disarm(a1 + 1656);
      return 0;
    case 2:
      uint64_t v5 = *(void *)(a1 + 120);
      if (!v5) {
        uint64_t v5 = *(void *)(a1 + 112);
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v5);
      v13[0] = BlueFin::GlMeSrdCtrlSm::OnReliableTransactionAck;
      v13[1] = a1;
      __int16 v14 = 258;
      char v15 = 0;
      uint64_t v16 = v6;
      int v17 = 0;
      __int16 v18 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 1);
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v8 + 88))(v8, v13, 1);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v13);
      if (*(unsigned char *)(a1 + 3324))
      {
        unsigned int v9 = (unsigned __int16 *)(a1 + 3332);
      }
      else if (*(unsigned char *)(a1 + 3340))
      {
        unsigned int v9 = (unsigned __int16 *)(a1 + 3348);
      }
      else
      {
        unsigned int v9 = (unsigned __int16 *)(a1 + 3356);
      }
      unsigned int v10 = *v9;
      if (*(unsigned __int16 *)(a1 + 3356) > v10) {
        unsigned int v10 = *(unsigned __int16 *)(a1 + 3356);
      }
      unsigned int v11 = 5 * v10;
      if (v11 >= 0x4E20) {
        unsigned int v11 = 20000;
      }
      *(void *)(a1 + 1688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, 0, v11 + 250);
      *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v13);
      return 0;
  }
  return v4;
}

void sub_263A7F6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*(*BlueFin::GlMeSrdCtrlSm::geofence(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  unsigned int v4 = BlueFin::GlMeSrdCtrlSm::running;
  if (v3 > 0xF)
  {
    switch(v3)
    {
      case 0x10u:
        BlueFin::GlMeSrdMeasTimingMgr::SetSubHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 898));
        (*(void (**)(void, void))(**((void **)this + 23) + 40))(*((void *)this + 23), *((unsigned int *)this + 842));
        uint64_t v6 = *(void (**)(void))(**((void **)this + 19) + 24);
        goto LABEL_18;
      case 0x17u:
        BlueFin::GlMeSrdCtrlSm::GotRadioReport(this);
        return 0;
      case 0x1Fu:
        if (a2[1])
        {
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3044, "geofence", (char)"e->par == 0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 3044, "e->par == 0");
        }
        BlueFin::QHsm::tran(this, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::idle, (uint64_t)"&GlMeSrdCtrlSm::idle");
        return 0;
    }
  }
  else
  {
    switch(v3)
    {
      case 2u:
        uint64_t v7 = *((void *)this + 15);
        if (!v7) {
          uint64_t v7 = *((void *)this + 14);
        }
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, (char *)this + 3856);
        BlueFin::GlMeSrdMeasTimingMgr::CancelOngoingMIAdjustment((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072));
        *((unsigned char *)this + 217) = 1;
        (*(void (**)(void, char *))(**((void **)this + 24) + 16))(*((void *)this + 24), (char *)this + 3856);
        return 0;
      case 3u:
        (*(void (**)(void))(**((void **)this + 24) + 24))(*((void *)this + 24));
        *((unsigned char *)this + 217) = 0;
        BlueFin::GlTimer::disarm((uint64_t)this + 1656);
        uint64_t v8 = *((void *)this + 15);
        if (!v8) {
          uint64_t v8 = *((void *)this + 14);
        }
        (*(void (**)(uint64_t, char *))(*(void *)v8 + 120))(v8, (char *)this + 3856);
        return 0;
      case 0xFu:
        BlueFin::GlMeSrdMeasTimingMgr::SetHeartBeat((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072), *((_DWORD *)this + 886));
        uint64_t ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdCtrlSm *)((char *)this + 3072));
        BlueFin::GlMeSrdStats::SetHeartbeatMs(*((int32x2_t **)this + 25), ReportingLms);
        (*(void (**)(void, uint64_t))(**((void **)this + 20) + 176))(*((void *)this + 20), *((void *)this + 25) + 8);
        (*(void (**)(void, uint64_t))(**((void **)this + 23) + 32))(*((void *)this + 23), ReportingLms);
        uint64_t v6 = *(void (**)(void))(**((void **)this + 19) + 24);
LABEL_18:
        v6();
        return 0;
    }
  }
  return v4;
}

uint64_t (*(*(*(*BlueFin::GlMeSrdCtrlSm::wait4hb(uint64_t a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  if (v3 == 15)
  {
    unsigned int v4 = (uint64_t (*(*(*(*)(uint64_t, unsigned __int8 *))(BlueFin::GlMeSrdCtrlSm *, unsigned __int8 *))(uint64_t, unsigned __int8 *))())BlueFin::GlMeSrdCtrlSm::steady;
    BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdCtrlSm::steady, (uint64_t)"&GlMeSrdCtrlSm::steady");
  }
  else if (v3 == 3)
  {
    BlueFin::GlTimer::disarm(a1 + 1656);
    return 0;
  }
  else
  {
    unsigned int v4 = BlueFin::GlMeSrdCtrlSm::normal;
    if (v3 == 2)
    {
      if (*(unsigned char *)(a1 + 3324))
      {
        uint64_t v5 = (unsigned __int16 *)(a1 + 3332);
      }
      else if (*(unsigned char *)(a1 + 3340))
      {
        uint64_t v5 = (unsigned __int16 *)(a1 + 3348);
      }
      else
      {
        uint64_t v5 = (unsigned __int16 *)(a1 + 3356);
      }
      unsigned int v6 = *v5;
      if (*(unsigned __int16 *)(a1 + 3356) > v6) {
        unsigned int v6 = *(unsigned __int16 *)(a1 + 3356);
      }
      unsigned int v7 = 5 * v6;
      if (v7 >= 0x4E20) {
        unsigned int v7 = 20000;
      }
      *(void *)(a1 + 1688) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 1656), 5, 0, v7 + 250);
      unsigned int v4 = 0;
      *(unsigned char *)(a1 + 168BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    }
  }
  return v4;
}

unint64_t BlueFin::GlMeSrdCtrlSm::PostCwResults(BlueFin::GlMeSrdCtrlSm *this)
{
  __int16 v4 = 39;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

uint64_t (*(*(*BlueFin::GlMeSrdCtrlSm::test(uint64_t a1, unsigned char *a2))(BlueFin::GlMeSrdCtrlSm *this, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  if ((*a2 & 0xFE) == 2) {
    return 0;
  }
  else {
    return BlueFin::GlMeSrdCtrlSm::running;
  }
}

uint64_t BlueFin::GlMeSrdCtrlSmRpcRmRpt::gll_rmrpt_rpc_report_resources(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 136) + 56))(*(void *)(*(void *)(a1 + 8) + 136));
  if (result != *(unsigned __int8 *)(a2 + 6))
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 3950, "gll_rmrpt_rpc_report_resources", (char)"m_rCtrlSm.m_rAsicConfig.GetNumMemoryBins() == rResourceType.ssb_capacity");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 3950, "m_rCtrlSm.m_rAsicConfig.GetNumMemoryBins() == rResourceType.ssb_capacity");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdMeasAidFilterEvents::OnBitParityStats(uint64_t result, int a2, int a3, unsigned char *a4)
{
  uint64_t v4 = *a4;
  if ((v4 + 67) < 0x44u
    || (uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[v4],
        BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v5] == 255))
  {
    uint64_t v6 = 575;
  }
  else
  {
    uint64_t v6 = (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v5]
                          + v4
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v5]);
  }
  int v7 = *(__int16 *)(result + 2 * v6 + 16);
  if (v7 >= 11) {
    return BlueFin::GlMeSrdStats::BitParity(*(_DWORD **)(*(void *)(result + 8) + 200), a2, a3, a4, v7);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdMeasAidFilterEvents::OnGlnsFrameSyncLostEvent(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 128) + 40))();
}

unint64_t BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_mem_dump_response(unint64_t this, int a2, unsigned __int16 a3, unsigned __int8 a4, unsigned __int8 *a5)
{
  if (a2 == 1)
  {
    v10[3] = v5;
    v10[4] = v6;
    __int16 v9 = 22;
    uint64_t v7 = *(void *)(this + 8);
    uint64_t v8 = *(void *)(v7 + 32);
    this = *(void *)(v7 + 8);
    *(void *)(v7 + 32) = this;
    do
    {
      v10[0] = 0;
      if (BlueFin::patch_dispatch(this, v7, (unsigned __int8 *)&v9, v10)) {
        this = v10[0];
      }
      else {
        this = (*(uint64_t (**)(uint64_t, __int16 *))(v7 + 32))(v7, &v9);
      }
      *(void *)(v7 + 32) = this;
    }
    while (this);
    *(void *)(v7 + 32) = v8;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_adc_capture_response(BlueFin::GlMeSrdRpcMiscCtrlSm *this, __int16 a2, __int16 a3, unsigned __int8 *a4)
{
  int ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdMeasTimingMgr *)(*((void *)this + 1)
                                                                                                + 3072));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 136) + 1192))(*(void *)(*((void *)this + 1) + 136));
  char v10 = *(unsigned char *)(result + 1);
  *((void *)this + 12) = a4;
  *((_DWORD *)this + 26) = ReportingLms;
  *((unsigned char *)this + 108) = v10;
  *((_WORD *)this + 55) = a2;
  *((_WORD *)this + 56) = a3;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    unsigned int v11 = *(uint64_t (**)(void))(*((void *)this + 11) + 24);
    return v11();
  }
  return result;
}

void BlueFin::GlMeSrdRpcMiscCtrlSm::hrm_read_response(BlueFin::GlMeSrdRpcMiscCtrlSm *this, int a2, BlueFin::GlMeSrdCtrlSm *a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 136) + 16))(*(void *)(*((void *)this + 1) + 136));
  if ((v6 & 0xF000FFFE) != 0x30000010 && (v6 & 0xF000FFFE) != 805306382)
  {
    if (v6 <= 889126918)
    {
      if (v6 > 872480774)
      {
        BOOL v8 = v6 == 872480775;
        int v9 = 872611847;
      }
      else
      {
        BOOL v8 = v6 == 805371913;
        int v9 = 805502985;
      }
    }
    else if (v6 <= 939720710)
    {
      BOOL v8 = v6 == 889126919;
      int v9 = 939589639;
    }
    else
    {
      BOOL v8 = v6 == 939720711 || v6 == 1006829577;
      int v9 = 956235783;
    }
    if (!v8 && v6 != v9)
    {
      GlCustomLog(199, "GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_hrm_response: Unsupported Chip Type\n");
      __int16 v37 = "0";
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4228, "hrm_read_response", (char)"0");
      int v38 = 4228;
      goto LABEL_117;
    }
    if (a2 > 26)
    {
      switch(a2)
      {
        case 27:
          if (a3 < 0x100)
          {
            *((unsigned char *)this + 16) = 1;
            unsigned int v11 = (a3 & 7) + (a3 >> 3);
            BOOL v14 = v11 >= 0x10 || v11 >= 0xB || (a3 & 7u) >= 6 || a3 >= 0x2Eu;
            double v15 = (double)(3 * v11);
            if (v14) {
              double v15 = 255.0;
            }
            double v16 = -v15;
            *((double *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v16;
            *(float *)&double v16 = v16;
            *(_DWORD *)(*(void *)(*((void *)this + 1) + 200) + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = LODWORD(v16);
            goto LABEL_72;
          }
          __int16 v37 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4085, "hrm_read_response", (char)"value == (value & 0x0FF)");
          int v38 = 4085;
          break;
        case 29:
          if (a3 < 0x100)
          {
            *((unsigned char *)this + 18) = 1;
            *((unsigned char *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (_BYTE)a3;
            goto LABEL_72;
          }
          __int16 v37 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4094, "hrm_read_response", (char)"value == (value & 0x0FF)");
          int v38 = 4094;
          break;
        case 30:
          if (a3 < 0x100)
          {
            *((unsigned char *)this + 19) = 1;
            *((unsigned char *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (_BYTE)a3;
            goto LABEL_72;
          }
          __int16 v37 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4100, "hrm_read_response", (char)"value == (value & 0x0FF)");
          int v38 = 4100;
          break;
        case 31:
          if (a3 < 0x100)
          {
            *((unsigned char *)this + 22) = 1;
            *((unsigned char *)this + 82) = (_BYTE)a3;
            goto LABEL_72;
          }
          __int16 v37 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4106, "hrm_read_response", (char)"value == (value & 0x0FF)");
          int v38 = 4106;
          break;
        case 32:
          if (a3 < 0x100)
          {
            *((unsigned char *)this + 23) = 1;
            *((unsigned char *)this + 83) = (_BYTE)a3;
            goto LABEL_72;
          }
          __int16 v37 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4112, "hrm_read_response", (char)"value == (value & 0x0FF)");
          int v38 = 4112;
          break;
        default:
          goto LABEL_119;
      }
LABEL_117:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", v38, v37);
    }
    switch(a2)
    {
      case -1073692432:
        *((unsigned char *)this + 17) = 1;
        long double v18 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a3);
        *((long double *)this + 5) = v18;
        uint64_t v19 = *((void *)this + 1);
        *(float *)&long double v18 = v18;
        *(_DWORD *)(*(void *)(v19 + 200) + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = LODWORD(v18);
        int ReportingLms = BlueFin::GlMeSrdMeasTimingMgr::GetReportingLms((BlueFin::GlMeSrdMeasTimingMgr *)(v19 + 3072));
        GlCustomLog(199, "HWDEBUG: LMS = %u, Digital AGC gain (GPS) = %lf\n", ReportingLms, *((double *)this + 5));
        break;
      case -1073692176:
        *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        long double v21 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a3);
        *((long double *)this + 7) = v21;
        *(float *)&long double v21 = v21;
        *(_DWORD *)(*(void *)(*((void *)this + 1) + 200) + 192) = LODWORD(v21);
        break;
      case -1073691920:
        *((unsigned char *)this + 25) = 1;
        long double v17 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a3);
        *((long double *)this + 9) = v17;
        *(float *)&long double v17 = v17;
        *(_DWORD *)(*(void *)(*((void *)this + 1) + 200) + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = LODWORD(v17);
        break;
      default:
LABEL_119:
        __int16 v37 = "0";
        DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4178, "hrm_read_response", (char)"0");
        int v38 = 4178;
        goto LABEL_117;
    }
LABEL_72:
    if (*((unsigned char *)this + 18) && *((unsigned char *)this + 19))
    {
      unsigned int v22 = *((unsigned __int8 *)this + 80);
      unsigned int v23 = (v22 & 7) + (v22 >> 3);
      BOOL v26 = ((*((unsigned char *)this + 80) & 7) + (*((unsigned char *)this + 80) >> 3) + *((unsigned char *)this + 81)) >= 0x10u
         || v23 >= 0xB
         || (v22 & 7) >= 6
         || v22 >= 0x2E;
      double v27 = (double)(3 * (v23 + *((unsigned char *)this + 81)));
      if (v26) {
        double v27 = 255.0;
      }
      double v28 = -v27;
      *((double *)this + 6) = v28;
      *((_WORD *)this + 9) = 0;
      *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      *(float *)&double v28 = v28;
      *(_DWORD *)(*(void *)(*((void *)this + 1) + 200) + 188) = LODWORD(v28);
    }
    if (*((unsigned char *)this + 22) && *((unsigned char *)this + 23))
    {
      unsigned int v29 = *((unsigned __int8 *)this + 82);
      unsigned int v30 = (v29 & 7) + (v29 >> 3);
      BOOL v33 = ((*((unsigned char *)this + 82) & 7) + (*((unsigned char *)this + 82) >> 3) + *((unsigned char *)this + 83)) >= 0x10u
         || v30 >= 0xB
         || (v29 & 7) >= 6
         || v29 >= 0x2E;
      double v34 = (double)(3 * (v30 + *((unsigned char *)this + 83)));
      if (v33) {
        double v34 = 255.0;
      }
      double v35 = -v34;
      *((double *)this + 8) = v35;
      *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      *((unsigned char *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
      *(float *)&double v35 = v35;
      *(_DWORD *)(*(void *)(*((void *)this + 1) + 200) + 196) = LODWORD(v35);
    }
    if (*((unsigned char *)this + 16)
      && *((unsigned char *)this + 17)
      && *((unsigned char *)this + 20)
      && *((unsigned char *)this + 21)
      && *((unsigned char *)this + 24))
    {
      if (*((unsigned char *)this + 25))
      {
        *((_WORD *)this + 8) = 0;
        *((_WORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((_WORD *)this + 12) = 0;
        GlCustomLog(14, "AGC report:: GPS: %.3f dB  GLNS: %.3f dB  BDS: %.3f dB\n", *((double *)this + 4) + *((double *)this + 5), *((double *)this + 6) + *((double *)this + 7), *((double *)this + 8) + *((double *)this + 9));
        GlCustomLog(14, "AGC report extra:: GPS AAGC: %.3f dB DAGC: %.3f dB GLNS AAGC: %.3f dB DAGC: %.3f dB BDS AAGC: %.3f dB DAGC: %.3f dB\n", *((double *)this + 4), *((double *)this + 5), *((double *)this + 6), *((double *)this + 7), *((double *)this + 8), *((double *)this + 9));
        *((_OWORD *)this + 3) = 0u;
        *((_OWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
        *((_OWORD *)this + 2) = 0u;
      }
    }
    return;
  }
  if (a2 <= -1073691869)
  {
    switch(a2)
    {
      case -1073691904:
        GlCustomLog(199, "AGC report:: GPS:0x%08X Loop Gain %u Target Power %u\n");
        return;
      case -1073691892:
        GlCustomLog(199, "AGC report:: GPS (LP): Loop Gain %u Target Power %u");
        return;
      case -1073691880:
        GlCustomLog(199, "AGC report:: GLO: Loop Gain %u Target Power %u");
        return;
    }
    goto LABEL_118;
  }
  if (a2 <= -1073690881)
  {
    if (a2 == -1073691868)
    {
      GlCustomLog(199, "AGC report:: GLO (LP): Loop Gain %u Target Power %u");
      return;
    }
    if (a2 == -1073691856)
    {
      GlCustomLog(199, "AGC report:: BDS: Loop Gain %u Target Power %u");
      return;
    }
LABEL_118:
    GlCustomLog(199, "GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_hrm_response: Unsupported PIKE Address\n");
    __int16 v37 = "0";
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4064, "hrm_read_response", (char)"0");
    int v38 = 4064;
    goto LABEL_117;
  }
  if (a2 == -1073690880)
  {
    if ((a3 & 7u) > 4)
    {
      int v36 = "XXXXXXXX";
    }
    else if ((a3 & 7) == 4)
    {
      int v36 = "E5B_BDS2";
    }
    else
    {
      int v36 = off_2655D8408[a3 & 7];
    }
    BlueFin::GlMeSrdRpcMiscCtrlSm::hrm_read_response(unsigned char,unsigned int,unsigned int)::acCstl = (uint64_t)v36;
    GlCustomLog(199, "AGC report:: DR_MonCtrl %s Sample %u Done %u\n");
    return;
  }
  if (a2 != -1073690864) {
    goto LABEL_118;
  }
  if ((_BYTE)a3) {
    log10f((float)a3);
  }
  GlCustomLog(199, "AGC report:: DR_MonReg3 %s DAGC Gain (Integer %u Fractional %u) Linear %f Db %f\n");
}

void BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_hrm_response(BlueFin::GlMeSrdRpcMiscCtrlSm *this, unsigned __int8 a2, int a3, BlueFin::GlMeSrdCtrlSm *a4)
{
}

void BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_hrm_read_response(BlueFin::GlMeSrdRpcMiscCtrlSm *this, unsigned __int8 a2, int a3, unsigned int a4, unsigned int *a5)
{
  if (a4)
  {
    for (unsigned int i = 0; i < a4; ++i)
    {
      unsigned int v10 = *a5++;
      BlueFin::GlMeSrdRpcMiscCtrlSm::hrm_read_response(this, a3, (BlueFin::GlMeSrdCtrlSm *)v10);
      a3 += 4;
    }
  }
}

uint64_t BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_echo_response(BlueFin::GlMeSrdRpcMiscCtrlSm *this, int a2, unsigned __int8 *a3)
{
  return GlCustomLog(15, "<PFT> GlMeSrdRpcMiscCtrlSm::Received echo back size %u value %i \n", a2, *a3);
}

void BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_gpio_response(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 34524))
  {
    if (a3)
    {
      if (a3 != 1)
      {
LABEL_11:
        *(unsigned char *)(*(void *)(a1 + 8) + 3452bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        return;
      }
      uint64_t v6 = *(void *)(v3 + 120);
      if (!v6) {
        uint64_t v6 = *(void *)(v3 + 112);
      }
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      __int16 v17 = 1;
      uint64_t v18 = v7;
      int v19 = 0;
      __int16 v20 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, 1);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v9 + 88))(v9, &v14, a2, 0);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v14);
    }
    else
    {
      uint64_t v10 = *(void *)(v3 + 120);
      if (!v10) {
        uint64_t v10 = *(void *)(v3 + 112);
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      __int16 v17 = 1;
      uint64_t v18 = v11;
      int v19 = 0;
      __int16 v20 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, 1);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v13 + 88))(v13, &v14, a2, 1);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v14);
    }
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v14);
    goto LABEL_11;
  }
}

void sub_263A809A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdRpcMiscCtrlSm::gll_misc_rpc_dump_multiple(BlueFin::GlMeSrdRpcMiscCtrlSm *this, unsigned int *a2)
{
  return (*(uint64_t (**)(void, unsigned int *))(**(void **)(*((void *)this + 1) + 160) + 120))(*(void *)(*((void *)this + 1) + 160), a2);
}

unint64_t BlueFin::GlMeSrdCtrlSm::Assert(BlueFin::GlMeSrdCtrlSm *this, char *a2, uint64_t a3, const char *a4)
{
  if (BlueFin::GlUtils::m_ucEnabled
    && ((BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x1C) & 1) != 0
     || BlueFin::GlUtils::m_ucEnabled
     && (BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)4), BlueFin::GlUtils::m_ucEnabled)
     && BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xEC)))
  {
    if (!*((unsigned char *)this + 5444))
    {
      GlCustomLog(27, "ESW_ASSERT %s:%d\n", a2, a3);
      long long v7 = *((_OWORD *)a2 + 4);
      long long v8 = *((_OWORD *)a2 + 5);
      long long v9 = *((_OWORD *)a2 + 6);
      *(_OWORD *)((char *)this + 5556) = *((_OWORD *)a2 + 7);
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      long long v12 = *((_OWORD *)a2 + 3);
      *(_OWORD *)((char *)this + 5476) = *((_OWORD *)a2 + 2);
      *(_OWORD *)((char *)this + 5492) = v12;
      *(_OWORD *)((char *)this + 544bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v10;
      *(_OWORD *)((char *)this + 546BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
      *(_OWORD *)((char *)this + 552bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v8;
      *(_OWORD *)((char *)this + 554BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v9;
      *(_OWORD *)((char *)this + 5508) = v7;
      *((unsigned char *)this + 557BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
      *((_DWORD *)this + 1393) = a3;
    }
    __int16 v16 = 21;
    uint64_t v13 = *((void *)this + 4);
    unint64_t result = *((void *)this + 1);
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
    do
    {
      unint64_t v17 = 0;
      if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v16, &v17)) {
        unint64_t result = v17;
      }
      else {
        unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdCtrlSm *, __int16 *))this + 4))(this, &v16);
      }
      *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
    }
    while (result);
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v13;
  }
  else
  {
    uint64_t v15 = BlueFin::GlUtils::m_pInstance;
    return BlueFin::GlUtils::Assert(v15, a2, a3, a4);
  }
  return result;
}

BlueFin::GlFormat *BlueFin::GlMeSrdCtrlSm::RequestDump(BlueFin::GlMeSrdStats **this, BlueFin::GlFormat *a2, int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  BlueFin::GlMeSrdStats::RequestDump(this[25], (BlueFin::GlFormat *)v8, 128);
  BlueFin::GlFormat::glsnprintf(a2, (char *)(a3 - 1), "ASIC=%X;ME_PREVSTATE=%s;ME_STATE=%s;ME_MAX_DELAY=%d;%s",
    v6,
    *((unsigned int *)this + 598),
    this[3],
    this[2],
    *((unsigned int *)this + 26),
    v8);
  return a2;
}

uint64_t BlueFin::GlMeAdcCaptureData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4493, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 4493, "ucVersion >= 1 && ucVersion <= 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  char v8 = *(unsigned __int16 *)(v2 + 22) == 255;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v11 = 118;
    char v12 = v5;
    uint64_t v13 = 0x1000000000000;
    long long v10 = &unk_270EBA550;
    char v14 = v5;
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v2 + 16));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, v8);
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v7 + 22));
    BlueFin::GlSysLogEntry::PutBuffer((BlueFin::GlSysLogEntry *)&v10, *(const unsigned __int8 **)(v7 + 8), *(unsigned __int16 *)(v7 + 24));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v6, 4);
  }
  return 1;
}

BOOL BlueFin::GlMeAdcCaptureData::Deserialize(BlueFin::GlMeAdcCaptureData *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v4 = v3[12];
  if (v4 == 1)
  {
    char v5 = (unsigned __int16 *)v3;
    uint64_t v6 = v2;
    *(_DWORD *)(v2 + 16) = BlueFin::GlSysLogEntry::GetU32((BlueFin::GlSysLogEntry *)v3);
    *(unsigned char *)(v6 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8((BlueFin::GlSysLogEntry *)v5);
    BlueFin::GlSysLogEntry::GetU8((BlueFin::GlSysLogEntry *)v5);
    *(_WORD *)(v6 + 22) = BlueFin::GlSysLogEntry::GetU16((BlueFin::GlSysLogEntry *)v5);
    *(_WORD *)(v6 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU16((BlueFin::GlSysLogEntry *)v5);
    BlueFin::GlSysLogEntry::GetBuffer((BlueFin::GlSysLogEntry *)v5, v8, 0x1000u);
    if (v5[11] != v5[10])
    {
      DeviceFaultNotify("glmesrd_ctrl_sm.cpp", 4526, "Deserialize", (char)"rotEntry.DataSize() == rotEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_ctrl_sm.cpp", 4526, "rotEntry.DataSize() == rotEntry.ReadIdx()");
    }
  }
  return v4 == 1;
}

void BlueFin::GlMeSrdAsicInitCallback::~GlMeSrdAsicInitCallback(BlueFin::GlMeSrdAsicInitCallback *this)
{
}

void BlueFin::GlMeSrdEvtListener::~GlMeSrdEvtListener(BlueFin::GlMeSrdEvtListener *this)
{
}

void BlueFin::GlMeSrdCtrlSmRpcRmRpt::~GlMeSrdCtrlSmRpcRmRpt(BlueFin::GlMeSrdCtrlSmRpcRmRpt *this)
{
}

void BlueFin::GlMeAdcCaptureData::~GlMeAdcCaptureData(BlueFin::GlMeAdcCaptureData *this)
{
}

void BlueFin::GlMeSrdRpcMiscCtrlSm::~GlMeSrdRpcMiscCtrlSm(BlueFin::GlMeSrdRpcMiscCtrlSm *this)
{
}

void BlueFin::GlMeSrdMeasAidFilterEvents::~GlMeSrdMeasAidFilterEvents(BlueFin::GlMeSrdMeasAidFilterEvents *this)
{
}

void BlueFin::GlPeIONXMgr::~GlPeIONXMgr(BlueFin::GlPeIONXMgr *this)
{
  *(void *)this = &unk_270EBC5B8;
  *((unsigned char *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
}

{
  JUMPOUT(0x263E6DD70);
}

void BlueFin::GlPeIONXMgr::setDcbFromLto(uint64_t a1, uint64_t a2, unsigned int a3, float *a4)
{
  if (!a2)
  {
    uint64_t v6 = "paotDcb != nullptr";
    DeviceFaultNotify("glpe_ionxmgr.cpp", 103, "setDcbFromLto", (char)"paotDcb != nullptr");
    int v7 = 103;
    goto LABEL_12;
  }
  if (!a4)
  {
    uint64_t v6 = "pDcbArray != nullptr";
    DeviceFaultNotify("glpe_ionxmgr.cpp", 104, "setDcbFromLto", (char)"pDcbArray != nullptr");
    int v7 = 104;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", v7, v6);
  }
  if (a3)
  {
    uint64_t v4 = a3;
    char v5 = (__int16 *)(a2 + 4);
    do
    {
      if (*((unsigned char *)v5 - 2))
      {
        if (*v5 <= 19) {
          *a4 = (float)*(v5 - 2) / 29.979;
        }
      }
      ++a4;
      v5 += 3;
      --v4;
    }
    while (v4);
  }
}

void BlueFin::GlPeIONXMgr::SetDcbFromLto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v7 = a1 + 46216;
  int v8 = 32;
  int v9 = 1;
  uint64_t v10 = a1 + 46344;
  int v11 = 32;
  int v12 = 2;
  uint64_t v13 = a1 + 46472;
  int v14 = 32;
  int v15 = 3;
  v6[0] = 0;
  uint64_t v16 = a1 + 46600;
  int v17 = 32;
  while (*(_DWORD *)(a2 + 4) != v6[v2])
  {
    v2 += 6;
    if (v2 == 24) {
      return;
    }
  }
  uint64_t v3 = &v6[v2];
  uint64_t v4 = (float *)*((void *)v3 + 1);
  if (v4)
  {
    if (v3[4] != 32)
    {
      DeviceFaultNotify("glpe_ionxmgr.cpp", 142, "SetDcbFromLto", (char)"ulNumDcbSlots == _DIM(rstDcb.astDcb)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 142, "ulNumDcbSlots == _DIM(rstDcb.astDcb)");
    }
    uint64_t v5 = *(void *)(a2 + 224);
    BlueFin::GlPeIONXMgr::setDcbFromLto(a1, v5, 0x20u, v4);
  }
}

{
  uint64_t v2;
  char i;
  char v4;
  float *v5;
  uint64_t v6;
  _DWORD v7[2];
  uint64_t v8;
  _DWORD v9[4];
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v2 = 0;
  int v12 = *MEMORY[0x263EF8340];
  v7[0] = 4;
  int v8 = a1 + 47892;
  v9[0] = 24;
  void v9[2] = 5;
  uint64_t v10 = a1 + 47988;
  int v11 = 24;
  for (unsigned int i = 1; ; unsigned int i = 0)
  {
    uint64_t v4 = i;
    if (*(_DWORD *)(a2 + 4) == v7[6 * v2]) {
      break;
    }
    uint64_t v2 = 1;
    if ((v4 & 1) == 0) {
      return;
    }
  }
  uint64_t v5 = *(float **)&v9[6 * v2 - 2];
  if (v5)
  {
    if (v9[6 * v2] != 24)
    {
      DeviceFaultNotify("glpe_ionxmgr.cpp", 171, "SetDcbFromLto", (char)"ulNumDcbSlots == _DIM(rstDcb.astDcb)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 171, "ulNumDcbSlots == _DIM(rstDcb.astDcb)");
    }
    uint64_t v6 = *(void *)(a2 + 176);
    BlueFin::GlPeIONXMgr::setDcbFromLto(a1, v6, 0x18u, v5);
  }
}

{
  uint64_t v2;
  _DWORD *v3;
  float *v4;
  uint64_t v5;
  _DWORD v6[2];
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t vars8;

  uint64_t v2 = 0;
  int v15 = *MEMORY[0x263EF8340];
  v6[0] = 6;
  uint64_t v7 = a1 + 46728;
  int v8 = 10;
  int v9 = 7;
  uint64_t v10 = a1 + 46768;
  int v11 = 10;
  int v12 = 8;
  uint64_t v13 = a1 + 46808;
  int v14 = 10;
  while (*(_DWORD *)(a2 + 4) != v6[v2])
  {
    v2 += 6;
    if (v2 == 18) {
      return;
    }
  }
  uint64_t v3 = &v6[v2];
  uint64_t v4 = (float *)*((void *)v3 + 1);
  if (v4)
  {
    if (v3[4] != 10)
    {
      DeviceFaultNotify("glpe_ionxmgr.cpp", 202, "SetDcbFromLto", (char)"ulNumDcbSlots == _DIM(rstDcb.astDcb)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 202, "ulNumDcbSlots == _DIM(rstDcb.astDcb)");
    }
    uint64_t v5 = *(void *)(a2 + 96);
    BlueFin::GlPeIONXMgr::setDcbFromLto(a1, v5, 0xAu, v4);
  }
}

{
  uint64_t v2;
  _DWORD *v3;
  float *v4;
  uint64_t v5;
  _DWORD v6[2];
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t vars8;

  uint64_t v2 = 0;
  int v15 = *MEMORY[0x263EF8340];
  v6[0] = 9;
  uint64_t v7 = a1 + 46848;
  int v8 = 63;
  int v9 = 10;
  uint64_t v10 = a1 + 47100;
  int v11 = 63;
  int v12 = 11;
  uint64_t v13 = a1 + 47352;
  int v14 = 63;
  while (*(_DWORD *)(a2 + 4) != v6[v2])
  {
    v2 += 6;
    if (v2 == 18) {
      return;
    }
  }
  uint64_t v3 = &v6[v2];
  uint64_t v4 = (float *)*((void *)v3 + 1);
  if (v4)
  {
    if (v3[4] != 63)
    {
      DeviceFaultNotify("glpe_ionxmgr.cpp", 233, "SetDcbFromLto", (char)"ulNumDcbSlots == _DIM(rstDcb.astDcb)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 233, "ulNumDcbSlots == _DIM(rstDcb.astDcb)");
    }
    uint64_t v5 = *(void *)(a2 + 416);
    BlueFin::GlPeIONXMgr::setDcbFromLto(a1, v5, 0x3Fu, v4);
  }
}

{
  uint64_t v2;
  char i;
  char v4;
  float *v5;
  uint64_t v6;
  _DWORD v7[2];
  uint64_t v8;
  _DWORD v9[4];
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v2 = 0;
  int v12 = *MEMORY[0x263EF8340];
  v7[0] = 12;
  int v8 = a1 + 47604;
  v9[0] = 36;
  void v9[2] = 13;
  uint64_t v10 = a1 + 47748;
  int v11 = 36;
  for (unsigned int i = 1; ; unsigned int i = 0)
  {
    uint64_t v4 = i;
    if (*(_DWORD *)(a2 + 4) == v7[6 * v2]) {
      break;
    }
    uint64_t v2 = 1;
    if ((v4 & 1) == 0) {
      return;
    }
  }
  uint64_t v5 = *(float **)&v9[6 * v2 - 2];
  if (v5)
  {
    if (v9[6 * v2] != 36)
    {
      DeviceFaultNotify("glpe_ionxmgr.cpp", 263, "SetDcbFromLto", (char)"ulNumDcbSlots == _DIM(rstDcb.astDcb)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 263, "ulNumDcbSlots == _DIM(rstDcb.astDcb)");
    }
    uint64_t v6 = *(void *)(a2 + 248);
    BlueFin::GlPeIONXMgr::setDcbFromLto(a1, v6, 0x24u, v5);
  }
}

uint64_t BlueFin::GlPeIONXMgr::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ionxmgr.cpp", 589, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 589, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v16 = 106;
  char v17 = 1;
  uint64_t v18 = 0x1000000000000;
  int v15 = &unk_270EBA5A8;
  char v19 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v2 + 32));
  uint64_t v7 = v6 + 46176;
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 56));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 48));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 16));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 32));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 40));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 8));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 24));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 64));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8)));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 68));
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 8);
  if (*(_DWORD *)(*(void *)v7 + 11520 * v9 + 68))
  {
    unsigned __int16 v10 = 0;
    do
    {
      unsigned int v11 = v10;
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(v8 + 11520 * v9 + 11496) + 200 * v10 + 24));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 11496) + 200 * v11 + 16));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 11496) + 200 * v11));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 11496) + 200 * v11 + 8));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(*(void *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 11496) + 200 * v11 + 32));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(*(void *)(*(void *)v7 + 11520 * *(unsigned __int8 *)(v7 + 8) + 11496) + 200 * v11 + 34));
      uint64_t v8 = *(void *)v7;
      uint64_t v9 = *(unsigned __int8 *)(v7 + 8);
      uint64_t v12 = *(void *)(*(void *)v7 + 11520 * v9 + 11496);
      if (*(_WORD *)(v12 + 200 * v11 + 34))
      {
        unint64_t v13 = 0;
        do
        {
          BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(v12 + 200 * v11 + 36 + 2 * v13++));
          uint64_t v8 = *(void *)v7;
          uint64_t v9 = *(unsigned __int8 *)(v7 + 8);
          uint64_t v12 = *(void *)(*(void *)v7 + 11520 * v9 + 11496);
        }
        while (v13 < *(unsigned __int16 *)(v12 + 200 * v11 + 34));
      }
      unsigned __int16 v10 = v11 + 1;
    }
    while (*(_DWORD *)(v8 + 11520 * v9 + 68) > (unsigned __int16)(v11 + 1));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeIONXMgr::Deserialize(float32x2_t *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 106 || *((unsigned __int8 *)a2 + 12) > 1u) {
    return 0;
  }
  uint64_t v6 = this + 5772;
  if (this[5773].u8[0] < 4u)
  {
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 56) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 48) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 16) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 32) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 8) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(double *)(*(void *)v6 + 11520 * v6[1].u8[0] + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
    *(_DWORD *)(*(void *)v6 + 11520 * v6[1].u8[0] + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *(_DWORD *)(*(void *)v6 + 11520 * v6[1].u8[0]) = BlueFin::GlSysLogEntry::GetU32(a2);
    int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
    uint64_t v9 = (uint64_t)*v6;
    LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6[1].i8[0];
    *(_DWORD *)(*(void *)v6 + 11520 * v10 + 68) = U32;
    if (U32)
    {
      unsigned __int16 v11 = 0;
      do
      {
        unsigned int v12 = v11;
        uint64_t v13 = 200 * v11;
        *(double *)(*(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496) + v13 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
        *(double *)(*(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496) + 200 * v12 + 16) = BlueFin::GlSysLogEntry::GetD64(a2);
        *(double *)(*(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496) + v13) = BlueFin::GlSysLogEntry::GetD64(a2);
        *(double *)(*(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496) + 200 * v12 + 8) = BlueFin::GlSysLogEntry::GetD64(a2);
        *(_WORD *)(*(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496) + 200 * v12 + 32) = BlueFin::GlSysLogEntry::GetS16(a2);
        int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
        uint64_t v9 = (uint64_t)*v6;
        unsigned int v10 = v6[1].u8[0];
        *(_WORD *)(*(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496) + 200 * v12 + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = U16;
        if (U16)
        {
          unint64_t v15 = 0;
          uint64_t v16 = v13 + 36;
          do
          {
            __int16 S16 = BlueFin::GlSysLogEntry::GetS16(a2);
            uint64_t v9 = (uint64_t)*v6;
            unsigned int v10 = v6[1].u8[0];
            uint64_t v18 = *(void *)(*(void *)v6 + 11520 * v6[1].u8[0] + 11496);
            *(_WORD *)(v18 + v16 + 2 * v15++) = S16;
          }
          while (v15 < *(unsigned __int16 *)(v18 + 200 * v12 + 34));
        }
        unsigned __int16 v11 = v12 + 1;
      }
      while (*(_DWORD *)(v9 + 11520 * v10 + 68) > (unsigned __int16)(v12 + 1));
    }
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glpe_ionxmgr.cpp", 673, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionxmgr.cpp", 673, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
    unsigned __int8 v19 = v10 + 1;
    v6[1].i8[0] = v19;
    if (U8 == v19)
    {
      v6[1].i8[0] = 0;
      BlueFin::GlPeIONXMgr::SetIONXFromLto(this, v9, U8);
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *((_WORD *)a2 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)a2 + 11);
  }
  return result;
}

void BlueFin::GlGpsTime::~GlGpsTime(BlueFin::GlGpsTime *this)
{
}

uint64_t BlueFin::GlGpsTime::getTimeSystem(BlueFin::GlGpsTime *this)
{
  return 0;
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_sub_heartbeat(BlueFin::GlMeSrdRpcEvtCtrl *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  *(_DWORD *)(v2 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(double *)(v2 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (double)a2 * 0.001;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    (*(void (**)(uint64_t, void, void))(*(void *)(v2 + 176) + 24))(v2 + 176, 0, 0);
    uint64_t v2 = *((void *)this + 1);
  }
  unsigned int v4 = *(uint64_t (**)(void))(**(void **)(v2 + 112) + 24);

  return v4();
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_radio_report(uint64_t a1, int a2, int a3, _OWORD *a4, __int16 a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(_DWORD *)(v5 + 256) = a2;
  *(_DWORD *)(v5 + 26BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  long long v7 = a4[2];
  long long v6 = a4[3];
  long long v8 = *(_OWORD *)((char *)a4 + 60);
  *(_OWORD *)(v5 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a4[1];
  *(_OWORD *)(v5 + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v8;
  *(_OWORD *)(v5 + 312) = v6;
  *(_OWORD *)(v5 + 296) = v7;
  *(_OWORD *)(v5 + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *a4;
  uint64_t v9 = *(void *)(a1 + 8);
  *(_WORD *)(v9 + 34BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a5;
  return (*(uint64_t (**)(void))(**(void **)(v9 + 112) + 64))();
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_frequency_captured(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  if (a2 != 3)
  {
    char v17 = "CAPTURE_PORT_CNTIN == port";
    DeviceFaultNotify("glmesrd_evt_ctrl.cpp", 175, "gll_sysevt_rpc_frequency_captured", (char)"CAPTURE_PORT_CNTIN == port");
    int v18 = 175;
    goto LABEL_17;
  }
  unsigned int v4 = *(_DWORD *)(*(void *)(a1 + 16) + 56);
  if (!v4)
  {
    char v17 = "m_rAsicConfig.GetCntinFreqHz() > 0";
    DeviceFaultNotify("glmesrd_evt_ctrl.cpp", 176, "gll_sysevt_rpc_frequency_captured", (char)"m_rAsicConfig.GetCntinFreqHz() > 0");
    int v18 = 176;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_evt_ctrl.cpp", v18, v17);
  }
  double v5 = (double)v4;
  if (a4 == 1)
  {
    long long v6 = (uint64_t *)(a1 + 8);
    GlCustomLog(12, "gll_sysevt_rpc_frequency_captured:there is no reference cnt in clk detected, clk_cnt:%d, hs_clk_cnt:%d, CntinFreq:%f, hsClkFreq:%f\n", a3, 1, (double)v4, *(double *)(*(void *)(*(void *)(a1 + 8) + 120) + 40));
    char v7 = 0;
    char v8 = 0;
  }
  else
  {
    long long v6 = (uint64_t *)(a1 + 8);
    double v9 = *(double *)(*(void *)(*(void *)(a1 + 8) + 120) + 40);
    double v10 = ((double)a4 + 0.5) / v9;
    double v11 = ((double)a3 / v5 - v10) / v10;
    double v12 = -v11;
    if (v11 >= 0.0) {
      double v13 = ((double)a3 / v5 - v10) / v10;
    }
    else {
      double v13 = -v11;
    }
    if (v13 < 0.0000069000001)
    {
      GlCustomLog(14, "gll_sysevt_rpc_frequency_captured:Tcxo Offset from Freq capture(%.1f PPB), clk_cnt:%d, hs_clk_cnt:%d, CntinFreq:%f, hsClkFreq:%f\n", v11 * -1000000000.0, a3, a4, v5, v9);
      char v7 = 1;
      char v8 = 1;
      goto LABEL_12;
    }
    GlCustomLog(12, "gll_sysevt_rpc_frequency_captured:TCXO offset from CNTIN is too big (%.1g PPB), clk_cnt:%d, hs_clk_cnt:%d, CntinFreq:%f, hsClkFreq:%f\n", v11 * 1000000000.0, a3, a4, v5, v9);
    char v7 = 0;
    char v8 = 1;
  }
  double v12 = 0.0;
LABEL_12:
  uint64_t v14 = *v6;
  *(double *)(v14 + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
  *(unsigned char *)(v14 + 248) = v7;
  *(unsigned char *)(v14 + 249) = v8;
  unint64_t v15 = *(uint64_t (**)(void))(**(void **)(v14 + 112) + 48);

  return v15();
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_pps_out(BlueFin::GlMeSrdRpcEvtCtrl *this, uint64_t a2)
{
  return (*(uint64_t (**)(BlueFin::GlMeSrdRpcEvtCtrl *, uint64_t, void, void, void))(*(void *)this
                                                                                                  + 64))(this, a2, *(unsigned int *)(*((void *)this + 1) + 152), 0, *(unsigned int *)(*((void *)this + 1) + 156));
}

uint64_t BlueFin::GlMeSrdRpcEvtCtrl::gll_sysevt_rpc_pps_out(BlueFin::GlMeSrdRpcEvtCtrl *this, int a2, unsigned int a3, unsigned int a4, int a5)
{
  double v8 = (double)a4
     / ((double)(1023 * (*(unsigned int (**)(void))(**((void **)this + 2) + 320))(*((void *)this + 2)))
      * 511.0
      * 8388608.0)
     + (double)a3;
  double v9 = (*(double (**)(void))(**(void **)(*((void *)this + 1) + 120) + 88))(*(void *)(*((void *)this + 1) + 120));
  uint64_t v10 = *((void *)this + 1);
  *(double *)(v10 + 208) = v8 + (double)(a2 - a5) * 1000.0 / v9;
  double v11 = (*(double (**)(void))(**(void **)(v10 + 120) + 88))(*(void *)(v10 + 120));
  uint64_t v12 = *((void *)this + 1);
  *(double *)(v12 + 208) = *(double *)(v12 + 208) + (1.0 / v11 + 1.0 / v11) * 1000.0;
  double v13 = *(uint64_t (**)(void))(**(void **)(v12 + 112) + 56);

  return v13();
}

void BlueFin::GlMeSrdEvtCtrl::~GlMeSrdEvtCtrl(BlueFin::GlMeSrdEvtCtrl *this)
{
  *(void *)this = &unk_270EBC718;
}

{
  JUMPOUT(0x263E6DD70);
}

void BlueFin::GlMeSrdRpcEvtCtrl::~GlMeSrdRpcEvtCtrl(BlueFin::GlMeSrdRpcEvtCtrl *this)
{
}

void BlueFin::GlMeSrdMeasTimingMgr::~GlMeSrdMeasTimingMgr(BlueFin::GlMeSrdMeasTimingMgr *this)
{
  *(void *)this = &unk_270EBC768;
  BlueFin::GlEventPump::RemoveActive(*((void *)this + 14), this);
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdMeasTimingMgr::~GlMeSrdMeasTimingMgr(this);

  JUMPOUT(0x263E6DD70);
}

unint64_t BlueFin::GlMeSrdMeasTimingMgr::SetSubHeartBeat(BlueFin::GlMeSrdMeasTimingMgr *this, unsigned int a2)
{
  if (*((_DWORD *)this + 75) >= a2)
  {
    DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 93, "SetSubHeartBeat", (char)"ulLms > m_ulPreviousSubHeartbeatMs");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 93, "ulLms > m_ulPreviousSubHeartbeatMs");
  }
  *((_DWORD *)this + 75) = *((_DWORD *)this + 74);
  *((_DWORD *)this + 7bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  __int16 v5 = 52;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdMeasTimingMgr *, __int16 *))this + 4))(this, &v5);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  return result;
}

uint64_t BlueFin::GlMeSrdMeasTimingMgr::AdjustTargetLms(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(unsigned __int16 *)(this + 284);
  unsigned int v3 = *(_DWORD *)(this + 288);
  if (*(_DWORD *)(this + 228) + 10 * v2 < v3)
  {
    this = GlCustomLog(11, "AdjustTargetLms failed. %d %d\n", *(_DWORD *)(this + 228), v3);
    int v2 = *(unsigned __int16 *)(v1 + 284);
    unsigned int v3 = *(_DWORD *)(v1 + 288);
  }
  if (*(unsigned char *)(v1 + 304))
  {
LABEL_4:
    *(unsigned char *)(v1 + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    int v4 = *(_DWORD *)(v1 + 308);
    int v5 = 10;
    do
    {
      if (v4 + v2 >= v3 + 500) {
        break;
      }
      *(_DWORD *)(v1 + 308) = v4 + v2;
      v4 += v2;
      --v5;
    }
    while (v5);
    int v6 = v4 - v3;
    if ((v6 - 201) <= 0xFFFFFE6E) {
      return GlCustomLog(11, "AdjustTargetLms failed. %d\n", v6);
    }
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(v1 + 228);
    int v8 = 9;
    while (v3 != v7)
    {
      if (v7 <= v3 + v2)
      {
        int v9 = v8--;
        v7 += v2;
        if (v9) {
          continue;
        }
      }
      goto LABEL_4;
    }
  }
  return this;
}

unint64_t BlueFin::GlMeSrdMeasTimingMgr::SetMIAdjustment(unint64_t this, int a2, unsigned __int16 a3)
{
  if (a3 - 1001 <= 0xF82E)
  {
    DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 209, "SetMIAdjustment", (char)"ms <= 1000 && ms >= -1000");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 209, "ms <= 1000 && ms >= -1000");
  }
  if (a3)
  {
    uint64_t v3 = this;
    *(_DWORD *)(this + 24bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
    *(_WORD *)(this + 248) = a3;
    *(unsigned char *)(this + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    __int16 v5 = 49;
    uint64_t v4 = *(void *)(this + 32);
    this = *(void *)(this + 8);
    *(void *)(v3 + 32) = this;
    do
    {
      unint64_t v6 = 0;
      if (BlueFin::patch_dispatch(this, v3, (unsigned __int8 *)&v5, &v6)) {
        this = v6;
      }
      else {
        this = (*(uint64_t (**)(uint64_t, __int16 *))(v3 + 32))(v3, &v5);
      }
      *(void *)(v3 + 32) = this;
    }
    while (this);
    *(void *)(v3 + 32) = v4;
  }
  return this;
}

unint64_t BlueFin::GlMeSrdMeasTimingMgr::CancelOngoingMIAdjustment(BlueFin::GlMeSrdMeasTimingMgr *this)
{
  __int16 v4 = 50;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdMeasTimingMgr *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v2;
  return result;
}

uint64_t BlueFin::GlMeSrdMeasTimingMgr::SetReportingInterval(BlueFin::GlMeSrdMeasTimingMgr *this, int a2)
{
  HIDWORD(v2) = 652835029 * a2;
  LODWORD(v2) = 652835029 * a2;
  if ((v2 >> 3) > 0x418937 || (a2 - 10001) <= 0xFFFFDCD6)
  {
    DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 244, "SetReportingInterval", (char)"usReportingIntMs%1000 == 0 && usReportingIntMs >= 1000 && usReportingIntMs <= 10000");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 244, "usReportingIntMs%1000 == 0 && usReportingIntMs >= 1000 && usReportingIntMs <= 10000");
  }
  *((_DWORD *)this + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)this + 72);
  *((_WORD *)this + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  if (*((unsigned char *)this + 252))
  {
    __int16 v4 = (char *)this + 264;
  }
  else
  {
    int v5 = *((unsigned __int8 *)this + 268);
    uint64_t v6 = 279;
    if (!*((unsigned char *)this + 268)) {
      uint64_t v6 = 286;
    }
    *((unsigned char *)this + 263) = *((unsigned char *)this + v6);
    if (v5) {
      __int16 v4 = (char *)this + 280;
    }
    else {
      __int16 v4 = (char *)this + 312;
    }
  }
  *((unsigned char *)this + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *v4;
  *((unsigned char *)this + 252) = 1;
  unsigned int v7 = (BlueFin::GlMeSrdMeasTimingMgr *)((char *)this + 40);

  return BlueFin::GlQueue::putFIFO(v7, 49, 0);
}

uint64_t BlueFin::GlMeSrdMeasTimingMgr::SetPowerSaveEnabled(BlueFin::GlMeSrdMeasTimingMgr *this, char a2)
{
  *((_DWORD *)this + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)this + 72);
  *((unsigned char *)this + 263) = a2;
  if (*((unsigned char *)this + 252))
  {
    unint64_t v2 = (char *)this + 264;
  }
  else
  {
    int v3 = *((unsigned __int8 *)this + 268);
    uint64_t v4 = 276;
    if (!*((unsigned char *)this + 268)) {
      uint64_t v4 = 284;
    }
    *((_WORD *)this + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)((char *)this + v4);
    if (v3) {
      unint64_t v2 = (char *)this + 280;
    }
    else {
      unint64_t v2 = (char *)this + 312;
    }
  }
  *((unsigned char *)this + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *v2;
  *((unsigned char *)this + 252) = 1;
  return BlueFin::GlQueue::putFIFO((BlueFin::GlMeSrdMeasTimingMgr *)((char *)this + 40), 49, 0);
}

uint64_t BlueFin::GlMeSrdMeasTimingMgr::SetLimitMaxRfOnTime(BlueFin::GlMeSrdMeasTimingMgr *this, int a2, __int16 a3)
{
  char v4 = a2;
  uint64_t v6 = 70;
  if (a2) {
    uint64_t v6 = 84;
  }
  GlCustomLog(14, "GlMeSrdMeasTimingMgr::SetLimitMaxRfOnTime(%c)\n", v6);
  *((_WORD *)this + 157) = a3;
  *((_DWORD *)this + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)this + 72);
  if (*((unsigned char *)this + 252))
  {
    *((unsigned char *)this + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
    unsigned int v7 = (char *)this + 260;
  }
  else
  {
    int v8 = *((unsigned __int8 *)this + 268);
    uint64_t v9 = 279;
    if (!*((unsigned char *)this + 268)) {
      uint64_t v9 = 286;
    }
    *((unsigned char *)this + 263) = *((unsigned char *)this + v9);
    *((unsigned char *)this + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
    if (v8) {
      unsigned int v7 = (char *)this + 276;
    }
    else {
      unsigned int v7 = (char *)this + 284;
    }
  }
  *((_WORD *)this + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)v7;
  *((unsigned char *)this + 252) = 1;

  return BlueFin::GlQueue::putFIFO((BlueFin::GlMeSrdMeasTimingMgr *)((char *)this + 40), 49, 0);
}

unint64_t BlueFin::GlMeSrdMeasTimingMgr::OnReliableAckCb(BlueFin::GlMeSrdMeasTimingMgr *this, void *a2)
{
  v5[1] = a2;
  v5[0] = 51;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdMeasTimingMgr *, unsigned __int8 *))this + 4))(this, v5);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  return result;
}

uint64_t (*BlueFin::GlMeSrdMeasTimingMgr::wait4dutycyle_programming(uint64_t a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  char v4 = BlueFin::QHsm::top;
  switch(v3)
  {
    case 51:
      (*(void (**)(void, void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), *(unsigned __int16 *)(a1 + 276));
      BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlMeSrdMeasTimingMgr::wait4dutycyle_done, (uint64_t)"&GlMeSrdMeasTimingMgr::wait4dutycyle_done");
      return 0;
    case 3:
      BlueFin::GlTimer::disarm(a1 + 184);
      return 0;
    case 2:
      if (*(unsigned char *)(a1 + 279))
      {
        if (!*(unsigned char *)(a1 + 280))
        {
          int v5 = *(unsigned char **)(a1 + 136);
          if (v5[1176])
          {
            uint64_t v6 = v5[1177];
            uint64_t v7 = v5[1178];
          }
          else
          {
            uint64_t v6 = 2;
            uint64_t v7 = 2;
          }
          goto LABEL_19;
        }
      }
      else if (!*(unsigned char *)(a1 + 280))
      {
        uint64_t v6 = 0;
        uint64_t v7 = 5;
LABEL_19:
        uint64_t v10 = *(void *)(a1 + 128);
        if (!v10) {
          uint64_t v10 = *(void *)(a1 + 120);
        }
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v10);
        v15[0] = BlueFin::GlMeSrdMeasTimingMgr::OnReliableAckCb;
        v15[1] = a1;
        __int16 v16 = 256;
        char v17 = 0;
        uint64_t v18 = v11;
        int v19 = 0;
        __int16 v20 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, 1);
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
        (*(void (**)(uint64_t, void *, void, uint64_t, uint64_t))(*(void *)v13 + 80))(v13, v15, (8389 * (*(unsigned __int16 *)(a1 + 276) >> 3)) >> 20, v6, v7);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v15);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v15);
        return 0;
      }
      int v8 = *(unsigned __int16 *)(a1 + 276);
      if (v8 == 1000)
      {
        uint64_t v6 = 2;
      }
      else if (v8 == 2000)
      {
        uint64_t v6 = 4;
      }
      else
      {
        uint64_t v6 = 5;
      }
      uint64_t v9 = 70;
      if (*(unsigned char *)(a1 + 279)) {
        uint64_t v9 = 84;
      }
      GlCustomLog(14, "GlMeSrdMeasTimingMgr::wait4dutycyle_programming: bPowerSaveEnable(xml) %c, bPowerSaveEnable(API) %c, MI Interval(ms) %u, MinNumBlk %u MaxNumBlk %u\n", v9, 84, v8, v6, v6);
      uint64_t v7 = v6;
      goto LABEL_19;
  }
  return v4;
}

void sub_263A82B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*BlueFin::GlMeSrdMeasTimingMgr::wait4miadjustment_programming(BlueFin::GlMeSrdMeasTimingMgr *this, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  if (v3 <= 0x2E)
  {
    if (v3 == 2)
    {
      uint64_t v7 = *((void *)this + 16);
      if (!v7) {
        uint64_t v7 = *((void *)this + 15);
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 80))(v7);
      v19[0] = BlueFin::GlMeSrdMeasTimingMgr::OnReliableAckCb;
      v19[1] = this;
      __int16 v20 = 256;
      char v21 = 0;
      uint64_t v22 = v8;
      int v23 = 0;
      __int16 v24 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
      if (*((unsigned char *)this + 224))
      {
        unsigned int v9 = *((__int16 *)this + 117);
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v16 = -v9 % 0xC8;
          unsigned __int8 v10 = ((1374389535 * (int)(v9 + 1100)) >> 38) + (1374389535 * (int)(v9 + 1100) < 0);
          if (v10)
          {
            LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            if (v16 > 0x77) {
              char v13 = 20;
            }
            else {
              char v13 = -20;
            }
            if (v16 <= 0x77) {
              unsigned __int8 v12 = (205 * v16) >> 12;
            }
            else {
              unsigned __int8 v12 = 10 - ((205 * v16) >> 12);
            }
          }
          else
          {
            if (*((unsigned __int16 *)this + 142) <= 0x7CFu)
            {
              DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 523, "wait4miadjustment_programming", (char)"me->m_usReportingIntMs >= 2000");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 523, "me->m_usReportingIntMs >= 2000");
            }
            LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
            if (v16 >= 0x14) {
              unsigned __int8 v12 = (205 * v16) >> 12;
            }
            else {
              unsigned __int8 v12 = 10;
            }
            unsigned __int8 v10 = 1;
            char v13 = -20;
          }
        }
        else
        {
          unsigned __int8 v10 = 0;
          unsigned int v11 = v9 / 0xC8;
          unsigned __int8 v12 = v9 % 0xC8 / 0x14;
          char v13 = 20;
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
        (*(void (**)(uint64_t, void *, void, void, void, void))(*(void *)v18 + 72))(v18, v19, v13, v12, v10, v11);
        *((unsigned char *)this + 22bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      }
      else
      {
        if (!*((unsigned char *)this + 225))
        {
          DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 554, "wait4miadjustment_programming", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 554, "0");
        }
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14);
        (*(void (**)(uint64_t, void *, void, uint64_t, void, void))(*(void *)v15 + 72))(v15, v19, *((char *)this + 236), 1, 0, 0);
        *((unsigned char *)this + 225) = 0;
      }
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v19);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v19);
      return 0;
    }
    if (v3 != 3) {
      return BlueFin::QHsm::top;
    }
  }
  else
  {
    if (v3 != 47)
    {
      if (v3 == 50)
      {
        *((unsigned char *)this + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        *((unsigned char *)this + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        char v4 = "&GlMeSrdMeasTimingMgr::idle";
        int v5 = BlueFin::GlMeSrdMeasTimingMgr::idle;
        goto LABEL_11;
      }
      if (v3 == 51)
      {
        char v4 = "&GlMeSrdMeasTimingMgr::wait4miadjustment_done";
        int v5 = (uint64_t (*)())BlueFin::GlMeSrdMeasTimingMgr::wait4miadjustment_done;
LABEL_11:
        BlueFin::QHsm::tran(this, v5, (uint64_t)v4);
        return 0;
      }
      return BlueFin::QHsm::top;
    }
    BlueFin::GlMeSrdMeasTimingMgr::AdjustTargetLms((uint64_t)this);
  }
  return 0;
}

void sub_263A82F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*BlueFin::GlMeSrdMeasTimingMgr::wait4miadjustment_done(BlueFin::GlMeSrdMeasTimingMgr *this, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  unint64_t result = BlueFin::QHsm::top;
  if (v3 <= 0x2E)
  {
    if (v3 == 2)
    {
      if (*((unsigned char *)this + 225))
      {
        *((void *)this + 27) = this;
        BlueFin::GlTimer::arm((BlueFin::GlMeSrdMeasTimingMgr *)((char *)this + 184), 48, 0, 0x4B0u);
        unint64_t result = 0;
        *((unsigned char *)this + 208) = 1;
        return result;
      }
    }
    else
    {
      if (v3 != 3) {
        return result;
      }
      BlueFin::GlTimer::disarm((uint64_t)this + 184);
    }
  }
  else
  {
    if (v3 != 47)
    {
      if (v3 != 48)
      {
        if (v3 != 50) {
          return result;
        }
        *((unsigned char *)this + 24BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
LABEL_6:
        *((unsigned char *)this + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
        int v5 = "&GlMeSrdMeasTimingMgr::idle";
        uint64_t v6 = BlueFin::GlMeSrdMeasTimingMgr::idle;
LABEL_13:
        BlueFin::QHsm::tran(this, v6, (uint64_t)v5);
        return 0;
      }
      goto LABEL_12;
    }
    BlueFin::GlMeSrdMeasTimingMgr::AdjustTargetLms((uint64_t)this);
    if (*((unsigned char *)this + 304))
    {
      if (!*((unsigned char *)this + 225))
      {
        if (*((_DWORD *)this + 72) != *((_DWORD *)this + 77)) {
          return 0;
        }
        goto LABEL_6;
      }
LABEL_12:
      int v5 = "&GlMeSrdMeasTimingMgr::wait4miadjustment_programming";
      uint64_t v6 = (uint64_t (*)())BlueFin::GlMeSrdMeasTimingMgr::wait4miadjustment_programming;
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t (*BlueFin::GlMeSrdMeasTimingMgr::wait4dutycyle_done(uint64_t a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  unsigned int v3 = BlueFin::QHsm::top;
  switch(v2)
  {
    case 47:
      if (*(_DWORD *)(a1 + 288) - *(_DWORD *)(a1 + 292) != *(unsigned __int16 *)(a1 + 276))
      {
        if (!*(unsigned char *)(a1 + 278))
        {
          DeviceFaultNotify("glmesrd_meas_timing_mgr.cpp", 738, "wait4dutycyle_done", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_meas_timing_mgr.cpp", 738, "0");
        }
        unsigned int v3 = 0;
        char v4 = *(unsigned char *)(a1 + 278) - 1;
        goto LABEL_10;
      }
      BlueFin::QHsm::tran((void *)a1, BlueFin::GlMeSrdMeasTimingMgr::idle, (uint64_t)"&GlMeSrdMeasTimingMgr::idle");
      return 0;
    case 3:
      unsigned int v3 = 0;
      *(_WORD *)(a1 + 28bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_WORD *)(a1 + 276);
      *(unsigned char *)(a1 + 286) = *(unsigned char *)(a1 + 279);
      *(unsigned char *)(a1 + 312) = *(unsigned char *)(a1 + 280);
      *(unsigned char *)(a1 + 268) = 0;
      break;
    case 2:
      unsigned int v3 = 0;
      char v4 = 5;
LABEL_10:
      *(unsigned char *)(a1 + 278) = v4;
      break;
  }
  return v3;
}

uint64_t BlueFin::GlMeSrdNvRamWriter::SendNvramToEsw(BlueFin::GlMeSrdNvRamWriter *this, BlueFin::GlMeSrdTransaction *a2, int a3)
{
  unsigned int v3 = *(_DWORD *)this;
  if (HIBYTE(*(_DWORD *)this))
  {
    DeviceFaultNotify("glmesrd_nvram.cpp", 262, "SendNvramToEsw", (char)"(m_ulNvRam[NVRAM_ESW_CRC_REGISTER]&NVRAM_ESW_CRC_MASK) == 0x0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_nvram.cpp", 262, "(m_ulNvRam[NVRAM_ESW_CRC_REGISTER]&NVRAM_ESW_CRC_MASK) == 0x0");
  }
  if (a3) {
    v3 |= 2u;
  }
  *(_DWORD *)this = v3 | 0x30000;
  char v8 = 0;
  *(_DWORD *)this = v3 | 0x30000 | (BlueFin::GlUtlCrc::GlUtlCrcCalc((BlueFin::GlUtlCrc *)&v8, (const unsigned int *)this, 6u) << 24);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 48))(*((void *)a2 + 3));
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5) + 120);

  return v6();
}

uint64_t BlueFin::GlHealthProfileData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 3;
  }
  if (v7 >= 4)
  {
    DeviceFaultNotify("glmesrd_pwrmeas.cpp", 52, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_pwrmeas.cpp", 52, "ucVersion >= 1 && ucVersion <= 3");
  }
  int v11 = 116;
  char v12 = v7;
  uint64_t v13 = 0x1000000000000;
  unsigned __int8 v10 = &unk_270EBA550;
  char v14 = v7;
  uint64_t v8 = v2 + 8;
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, **(_DWORD **)(v2 + 8));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 4));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 148));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 8));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 12));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 16));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 35));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 24));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 26));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 34));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 44));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 20));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 28));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 48));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 52));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 58));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 32));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 56));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 80));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 84));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 88));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 92));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 96));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 100));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 104));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 108));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 112));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 116));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 120));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 17));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 124));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 128));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 132));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 136));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 138));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 36));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 30));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 40));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 42));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 60));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 64));
  BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 66));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 68));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 72));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 73));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 74));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 75));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 76));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 77));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 78));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 79));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 70));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)v8 + 140));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)v8 + 144));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)v8 + 38));
  if (v7 >= 2)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)(v6 + 8) + 157));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(*(void *)(v6 + 8) + 158));
    if (v7 != 2) {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(*(void *)(v6 + 8) + 160));
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
  return 1;
}

uint64_t BlueFin::GlHealthProfileData::Deserialize(BlueFin::GlHealthProfileData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 116 || *((unsigned __int8 *)a2 + 12) - 4 < 0xFFFFFFFD) {
    return 0;
  }
  **((_DWORD **)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 148) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 8) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 12) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 16) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(unsigned char *)(*((void *)this + 1) + 35) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_WORD *)(*((void *)this + 1) + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 26) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(unsigned char *)(*((void *)this + 1) + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_DWORD *)(*((void *)this + 1) + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_WORD *)(*((void *)this + 1) + 28) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_DWORD *)(*((void *)this + 1) + 48) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 52) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_WORD *)(*((void *)this + 1) + 58) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 32) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 56) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_DWORD *)(*((void *)this + 1) + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 88) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 92) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((unsigned char *)this + 16) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_DWORD *)(*((void *)this + 1) + 96) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 108) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 112) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 116) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((unsigned char *)this + 17) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_DWORD *)(*((void *)this + 1) + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 128) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_DWORD *)(*((void *)this + 1) + 132) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_WORD *)(*((void *)this + 1) + 136) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 138) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(unsigned char *)(*((void *)this + 1) + 36) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_WORD *)(*((void *)this + 1) + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 42) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_DWORD *)(*((void *)this + 1) + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_WORD *)(*((void *)this + 1) + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 66) = BlueFin::GlSysLogEntry::GetS16(a2);
  *(unsigned char *)(*((void *)this + 1) + 68) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 72) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 73) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 7bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 75) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 76) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 77) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 78) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 1) + 79) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_WORD *)(*((void *)this + 1) + 7BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_DWORD *)(*((void *)this + 1) + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
  *(_WORD *)(*((void *)this + 1) + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
  *(_WORD *)(*((void *)this + 1) + 38) = BlueFin::GlSysLogEntry::GetU8(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 2u)
  {
    *(unsigned char *)(*((void *)this + 1) + 157) = BlueFin::GlSysLogEntry::GetU8(a2);
    *(_WORD *)(*((void *)this + 1) + 158) = BlueFin::GlSysLogEntry::GetS16(a2);
    if (*((unsigned __int8 *)a2 + 12) >= 3u) {
      *(_DWORD *)(*((void *)this + 1) + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU32(a2);
    }
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glmesrd_pwrmeas.cpp", 244, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_pwrmeas.cpp", 244, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

void BlueFin::GlHealthProfileData::~GlHealthProfileData(BlueFin::GlHealthProfileData *this)
{
}

char *BlueFin::GlMeSrdCaNoiseStats::GetNoiseType(int a1)
{
  if (a1 >= 9)
  {
    DeviceFaultNotify("glmesrd_stats.cpp", 40, "GetNoiseType", (char)"etType < MAX_NOISE_TYPES");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_stats.cpp", 40, "etType < MAX_NOISE_TYPES");
  }
  return &BlueFin::GlMeSrdCaNoiseStats::aucNOISE_TYPE_STR[10 * a1];
}

void BlueFin::GlMeSrdStats::~GlMeSrdStats(BlueFin::GlMeSrdStats *this, double a2)
{
  if (!*((unsigned char *)this + 992)) {
    BlueFin::GlMeSrdStats::ReportStats(this, a2);
  }
  *((_DWORD *)this + 232) = 0;
  *((_WORD *)this + 466) = 0;
  *((void *)this + 123) = 0;
  *((void *)this + 117) = 0;
  *(void *)((char *)this + 942) = 0;
  *((void *)this + 119) = 0;
  *(void *)((char *)this + 958) = 0;
  *((void *)this + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  *(void *)((char *)this + 97bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
}

void BlueFin::GlMeSrdStats::ReportStats(BlueFin::GlMeSrdStats *this, double a2)
{
  *((unsigned char *)this + 992) = 1;
  LODWORD(a2) = *((_DWORD *)this + 2);
  double v3 = (double)*(unint64_t *)&a2 / 1000.0;
  GlCustomLog(13, "Gll Ran for %.1f Secs\n", v3);
  double v4 = 0.0;
  double v5 = 0.0;
  if (v3 != 0.0)
  {
    LODWORD(v5) = *((_DWORD *)this + 10);
    double v5 = (double)*(unint64_t *)&v5 / v3;
  }
  GlCustomLog(13, "Serial Tx:  %u packets Tx'd, %u Seq errors, %u CRC errors, Avg Rate=%.1f bytes/sec\n", *((_DWORD *)this + 4), *((_DWORD *)this + 8), *((_DWORD *)this + 6), v5);
  if (v3 != 0.0)
  {
    LODWORD(v6) = *((_DWORD *)this + 11);
    double v4 = (double)v6 / v3;
  }
  GlCustomLog(13, "Serial Rx:  %u packets Rx'd, %u Seq errors, %u CRC errors, %u Malformed Pckts, Avg Rate=%.1f bytes/sec\n", *((_DWORD *)this + 5), *((_DWORD *)this + 9), *((_DWORD *)this + 7), *((_DWORD *)this + 3), v4);
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  do
  {
    v8 += *(_DWORD *)((char *)this + v7 + 48);
    v7 += 4;
  }
  while (v7 != 36);
  if (v8 <= 1) {
    unsigned int v8 = 1;
  }
  double v9 = 100.0 / (double)v8;
  BlueFin::ReportRoundtrip((BlueFin *)"    0ms<=x< 250ms:", (const char *)*((unsigned int *)this + 12), v9 * (double)*((unsigned int *)this + 12));
  BlueFin::ReportRoundtrip((BlueFin *)"  250ms<=x< 500ms:", (const char *)*((unsigned int *)this + 13), v9 * (double)*((unsigned int *)this + 13));
  BlueFin::ReportRoundtrip((BlueFin *)"  500ms<=x< 750ms:", (const char *)*((unsigned int *)this + 14), v9 * (double)*((unsigned int *)this + 14));
  BlueFin::ReportRoundtrip((BlueFin *)"  750ms<=x<1000ms:", (const char *)*((unsigned int *)this + 15), v9 * (double)*((unsigned int *)this + 15));
  BlueFin::ReportRoundtrip((BlueFin *)" 1000ms<=x<1250ms:", (const char *)*((unsigned int *)this + 16), v9 * (double)*((unsigned int *)this + 16));
  BlueFin::ReportRoundtrip((BlueFin *)" 1250ms<=x<1500ms:", (const char *)*((unsigned int *)this + 17), v9 * (double)*((unsigned int *)this + 17));
  BlueFin::ReportRoundtrip((BlueFin *)" 1500ms<=x<1750ms:", (const char *)*((unsigned int *)this + 18), v9 * (double)*((unsigned int *)this + 18));
  BlueFin::ReportRoundtrip((BlueFin *)" 1750ms<=x<2000ms:", (const char *)*((unsigned int *)this + 19), v9 * (double)*((unsigned int *)this + 19));
  BlueFin::ReportRoundtrip((BlueFin *)" 2000ms<=x:       ", (const char *)*((unsigned int *)this + 20), v9 * (double)*((unsigned int *)this + 20));
  int v10 = *((_DWORD *)this + 8);
  int v11 = *((_DWORD *)this + 6);
  if (v10)
  {
    int v12 = *((_DWORD *)this + 9);
    int v13 = *((_DWORD *)this + 7);
LABEL_14:
    GlCustomLog(11, "Communication error, TxSeqErr, %u, TxCrcErr, %u, RxSeqErr, %u, RxCrcErr, %u\n", v10, v11, v12, v13);
    goto LABEL_15;
  }
  int v12 = *((_DWORD *)this + 9);
  int v13 = *((_DWORD *)this + 7);
  if (v11 | v12) {
    goto LABEL_14;
  }
  if (v13)
  {
    int v12 = 0;
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v14 = 0;
  char v15 = 0;
  do
  {
    unsigned int v16 = (char *)this + 4 * v14;
    unsigned int v17 = *((_DWORD *)v16 + 158);
    if (v17)
    {
      if ((v15 & 1) == 0)
      {
        GlCustomLog(13, "WER Statistics\n");
        unsigned int v17 = *((_DWORD *)v16 + 158);
      }
      unsigned int v18 = *((_DWORD *)this + v14 + 173);
      double v19 = 1.0 - (double)v18 / (double)v17;
      unsigned int v20 = v17 - v18;
      char v21 = BlueFin::GlMePlatfStat::hist2cn0(v14);
      GlCustomLog(13, "%8sdBHz Fail Rate=%.1f%% (%u out of %u)\n", v21, v19 * 100.0, v20, v17);
      char v15 = 1;
    }
    ++v14;
  }
  while (v14 != 15);
  unsigned int v22 = *((unsigned __int16 *)this + 464);
  unsigned int v23 = *((unsigned __int16 *)this + 472);
  double v24 = 0.0;
  double v25 = 0.0;
  unsigned int v26 = *((unsigned __int16 *)this + 480);
  if (*((_WORD *)this + 464)) {
    double v25 = (double)*((unsigned __int16 *)this + 465) / (double)v22 * 100.0;
  }
  int v57 = *((unsigned __int16 *)this + 465);
  unsigned int v27 = *((unsigned __int16 *)this + 488);
  if (*((_WORD *)this + 472)) {
    double v24 = (double)*((unsigned __int16 *)this + 473) / (double)v23 * 100.0;
  }
  int v56 = *((unsigned __int16 *)this + 473);
  double v28 = 0.0;
  double v29 = 0.0;
  if (*((_WORD *)this + 480)) {
    double v29 = (double)*((unsigned __int16 *)this + 481) / (double)v26 * 100.0;
  }
  int v58 = *((unsigned __int16 *)this + 481);
  if (*((_WORD *)this + 488)) {
    double v28 = (double)*((unsigned __int16 *)this + 489) / (double)v27 * 100.0;
  }
  unsigned int v30 = *((unsigned __int16 *)this + 466);
  double v31 = 0.0;
  double v32 = 0.0;
  if (*((_WORD *)this + 464)) {
    double v32 = (double)v30 / (double)v22 * 100.0;
  }
  if (*((_WORD *)this + 472)) {
    double v31 = (double)*((unsigned __int16 *)this + 474) / (double)v23 * 100.0;
  }
  int v54 = *((unsigned __int16 *)this + 474);
  double v33 = 0.0;
  double v34 = 0.0;
  if (*((_WORD *)this + 480)) {
    double v34 = (double)*((unsigned __int16 *)this + 482) / (double)v26 * 100.0;
  }
  int v55 = *((unsigned __int16 *)this + 482);
  int v59 = *((unsigned __int16 *)this + 489);
  int v35 = *((_DWORD *)this + 234);
  int v36 = *((_DWORD *)this + 235);
  int v37 = *((_DWORD *)this + 238);
  int v38 = *((_DWORD *)this + 239);
  int v50 = *((_DWORD *)this + 242);
  int v49 = *((_DWORD *)this + 243);
  int v53 = *((_DWORD *)this + 246);
  int v52 = *((_DWORD *)this + 247);
  if (*((_WORD *)this + 488)) {
    double v33 = (double)*((unsigned __int16 *)this + 490) / (double)v27 * 100.0;
  }
  int v51 = *((unsigned __int16 *)this + 490);
  GlCustomLog(13, "PFA Statistics\n");
  GlCustomLog(13, "GNSS,  Detect(#),  Detect(%%),   Xcorr(#),   Xcorr(%%), Attempt(#), ValidPR(#), ValidRR(#)\n");
  GlCustomLog(13, " GPS, %10u, %10.2f, %10u, %10.2f, %10u, %10u, %10u\n", v57, v25, v30, v32, v22, v35, v36);
  GlCustomLog(13, "GLNS, %10u, %10.2f, %10u, %10.2f, %10u, %10u, %10u\n", v56, v24, v54, v31, v23, v37, v38);
  GlCustomLog(13, " BDS, %10u, %10.2f, %10u, %10.2f, %10u, %10u, %10u\n", v58, v29, v55, v34, v26, v50, v49);
  GlCustomLog(13, " GAL, %10u, %10.2f, %10u, %10.2f, %10u, %10u, %10u\n", v59, v28, v51, v33, v27, v53, v52);
  int v39 = 0;
  for (uint64_t i = 0; i != 216; i += 24)
  {
    if (*(_DWORD *)(*((void *)this + 159) + i + 16))
    {
      uint64_t v41 = *((void *)this + 128);
      uint64_t v42 = (*(uint64_t (**)(void))(**((void **)this + 129) + 16))(*((void *)this + 129));
      switch(v39)
      {
        case 0:
          float v43 = (*(float (**)(uint64_t, uint64_t, void, void))(*(void *)v41 + 40))(v41, v42, 0, 0);
          goto LABEL_46;
        case 1:
          float v43 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v41 + 40))(v41, v42, 2, 0);
          goto LABEL_46;
        case 2:
          float v43 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v41 + 40))(v41, v42, 4, 0);
          goto LABEL_46;
        case 4:
          float v43 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v41 + 40))(v41, v42, 5, 2);
          goto LABEL_46;
        case 5:
          float v43 = (*(float (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v41 + 40))(v41, v42, 5, 1);
          goto LABEL_46;
        case 7:
          float v43 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v41 + 40))(v41, v42, 6, 0);
LABEL_46:
          float v44 = v43;
          if (v43 > 0.0)
          {
            NoiseType = BlueFin::GlMeSrdCaNoiseStats::GetNoiseType(v39);
            GlCustomLog(13, "GlMeSrdNoiseStatsMgr::LogNoiseStats(%s) Measured Noise(u:%f, o:%f, c:%i) GLL Noise Table(u:%f, %%Err:%f)\n", NoiseType, *(float *)(*((void *)this + 159) + i + 8), *(float *)(*((void *)this + 159) + i + 4), *(_DWORD *)(*((void *)this + 159) + i + 16), v44, (float)((float)((float)(*(float *)(*((void *)this + 159) + i + 8) - v44) * 100.0) / v44));
          }
          break;
        default:
          break;
      }
    }
    ++v39;
  }
  uint64_t v46 = 0;
  for (uint64_t j = 0; j != 9; ++j)
  {
    if (*(_DWORD *)(*((void *)this + 159) + v46 + 16))
    {
      int v48 = BlueFin::GlMeSrdCaNoiseStats::GetNoiseType(j);
      GlCustomLog(13, "GlMeSrdNoiseStatsMgr::LogTrkDrDagcStats(%s) Measured Trk DAGC(u:%f, o:%f, c:%i)\n", v48, *(float *)(*((void *)this + 187) + v46 + 8), *(float *)(*((void *)this + 187) + v46 + 4), *(_DWORD *)(*((void *)this + 187) + v46 + 16));
    }
    v46 += 24;
  }
}

uint64_t BlueFin::ReportRoundtrip(BlueFin *this, const char *a2, double a3)
{
  if (a3 >= 0.1 || a2 == 0) {
    return GlCustomLog(13, "%s  %.1f%%\n");
  }
  else {
    return GlCustomLog(13, "%s  %.1f%% (%u times)\n");
  }
}

BlueFin::GlFormat *BlueFin::GlMeSrdStats::RequestDump(BlueFin::GlMeSrdStats *this, BlueFin::GlFormat *a2, int a3)
{
  BlueFin::GlFormat::glsnprintf(a2, (char *)(a3 - 1), "TX=%d.%d.%d;RX=%d.%d.%d;HIST=%d.%d.%d.%d.%d.%d.%d.%d.%d",
    (const char *)*((unsigned int *)this + 17),
    *((unsigned int *)this + 4),
    *((unsigned int *)this + 8),
    *((unsigned int *)this + 6),
    *((unsigned int *)this + 5),
    *((unsigned int *)this + 9),
    *((unsigned int *)this + 7),
    *((unsigned int *)this + 12),
    *((unsigned int *)this + 13),
    *((unsigned int *)this + 14),
    *((unsigned int *)this + 15),
    *((unsigned int *)this + 16),
    *((unsigned int *)this + 17),
    *((unsigned int *)this + 18),
    *((unsigned int *)this + 19),
    *((unsigned int *)this + 20));
  return a2;
}

uint64_t BlueFin::GlMeSrdStats::BitParity(_DWORD *a1, int a2, int a3, unsigned char *a4, int a5)
{
  uint64_t result = BlueFin::GlMePlatfStat::ss2hist((BlueFin::GlMePlatfStat *)(__int16)(a5 - 170));
  int v12 = &a1[result];
  v12[158] += a3;
  v12[173] += a2;
  unsigned int v13 = *a4;
  if (*a4)
  {
    if (v13 > 0x20)
    {
      if (v13 >= 0x34)
      {
        if (v13 > 0x41)
        {
          if (v13 < 0x4C)
          {
            a1[223] += a3;
            a1[224] += a2;
          }
          else if (v13 > 0x8A)
          {
            if (v13 <= 0xAE)
            {
              a1[194] += a3;
              a1[195] += a2;
            }
          }
          else
          {
            a1[192] += a3;
            a1[193] += a2;
          }
        }
        else
        {
          a1[190] += a3;
          a1[191] += a2;
        }
      }
    }
    else
    {
      a1[188] += a3;
      a1[189] += a2;
    }
  }
  uint64_t v14 = v12 + 173;
  unsigned int v15 = v12[158];
  if (v15)
  {
    LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *v14;
    double v16 = (1.0 - (double)v11 / (double)v15) * 100.0;
  }
  else
  {
    double v16 = 0.0;
  }
  if (a2 != a3)
  {
    unsigned int v17 = a5 - 24;
    if (a5 >= 24) {
      char v18 = 12;
    }
    else {
      char v18 = 79;
    }
    if (v17 >= 6) {
      unsigned __int8 v19 = v18;
    }
    else {
      unsigned __int8 v19 = 0x4C4C4C4D4E4EuLL >> (8 * v17);
    }
    return GlCustomLog(v19, "Ephemeris Decode Parity Fail Rate=%.1f%% (%u out of %u) sv%d ss=%d\n", v16, v15 - *v14, v15, v13, a5);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdStats::SetTrkMsmtIQPower(BlueFin::GlMeSrdStats *this, int a2, int a3, const BlueFin::GlSignalId *a4)
{
  uint64_t result = BlueFin::GlIqData::Svid2EnumGnssIQ((uint64_t)this, (unsigned __int8 *)a4, *((_DWORD *)a4 + 1));
  if (result > 7) {
    return GlCustomLog(14, "<FTPHN> Error: Phase noise track measurements not saved for svid %d %s\n", *(unsigned __int8 *)a4, BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a4 + 1) - *((int *)a4 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a4]]]);
  }
  *((unsigned char *)this + 96) = 1;
  double v9 = (char *)this + 4 * result + 96;
  *((_DWORD *)v9 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
  *((_DWORD *)v9 + 9) = a3;
  return result;
}

double BlueFin::GlIQData::Init(BlueFin::GlIQData *this, const BlueFin::GlSignalId *a2, const double *a3)
{
  uint64_t v3 = *(void *)a3;
  if (*a3 < 0.001)
  {
    DeviceFaultNotify("glmesrd_stats.cpp", 675, "Init", (char)"1.0/(DOUBLE)MAX_SAMPLE_PER_SEC <= dCohTimeInSec");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_stats.cpp", 675, "1.0/(DOUBLE)MAX_SAMPLE_PER_SEC <= dCohTimeInSec");
  }
  if ((BlueFin::GlIQData *)((char *)this + 10012) != a2)
  {
    *((unsigned char *)this + 10012) = *(unsigned char *)a2;
    *((_DWORD *)this + 250bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)a2 + 1);
    *((_WORD *)this + 501BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_WORD *)a2 + 4);
  }
  *((void *)this + 1253) = v3;
  double result = 1.0 / *a3;
  *((_DWORD *)this + 2502) = 5 * result;
  return result;
}

void BlueFin::GlIQData::SetIQData(BlueFin::GlIQData *this, const signed __int8 *a2, const signed __int8 *a3, const unsigned int *a4, const double *a5)
{
  int v10 = *((_DWORD *)this + 2500);
  if (v10 && *a4 - v10 >= 0x3E9)
  {
    *((void *)this + 1253) = 0;
    *((unsigned char *)this + 10032) = 0;
    bzero(this, 0x271CuLL);
  }
  uint64_t v11 = *(void *)a5;
  *((_DWORD *)this + 2502) = 5 * (1.0 / *a5);
  *((void *)this + 1253) = v11;
  *((unsigned char *)this + *((unsigned int *)this + 2501)) = *a2;
  *((unsigned char *)this + *((unsigned int *)this + 2501) + 500BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *a3;
  *((_DWORD *)this + 250BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *a4;
  unsigned int v12 = *((_DWORD *)this + 2501) + 1;
  *((_DWORD *)this + 250BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v12;
  if (v12 >= *((_DWORD *)this + 2502))
  {
    *((_DWORD *)this + 250BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((unsigned char *)this + 10032) = 1;
  }
}

uint64_t BlueFin::GlIQSnrStatsMgr::UpdateIQDataIdx(BlueFin::GlIQSnrStatsMgr *this, const BlueFin::GlSignalId *a2, const double *a3)
{
  uint64_t v3 = (char *)this + 40160;
  uint64_t v4 = *((unsigned int *)this + 10042);
  double v5 = (BlueFin::GlIQData *)*((void *)this + 5020);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (_DWORD *)((char *)v5 + 10016);
    do
    {
      if (*(unsigned __int8 *)a2 == *((unsigned __int8 *)v7 - 4) && *((_DWORD *)a2 + 1) == *v7) {
        return v6;
      }
      ++v6;
      v7 += 2510;
    }
    while (v6 != 4);
    if (v4 <= 3)
    {
      double v5 = (BlueFin::GlIQData *)((char *)v5 + 10040 * v4);
      goto LABEL_8;
    }
    return 4;
  }
  else
  {
LABEL_8:
    BlueFin::GlIQData::Init(v5, a2, a3);
    ++*((_DWORD *)v3 + 2);
  }
  return v4;
}

void BlueFin::GlIQSnrStatsMgr::SetIQData(BlueFin::GlIQSnrStatsMgr *a1, const BlueFin::GlSignalId *a2, const double *a3, uint64_t a4)
{
  unsigned int updated = BlueFin::GlIQSnrStatsMgr::UpdateIQDataIdx(a1, a2, a3);
  if (updated != 4 && !*(unsigned char *)(a4 + 4) && *(unsigned char *)(a4 + 1))
  {
    unint64_t v8 = 0;
    unsigned int v9 = updated;
    int v10 = (signed __int8 *)(a4 + 13);
    do
    {
      uint64_t v11 = (BlueFin::GlIQData *)(*((void *)a1 + 5020) + 10040 * v9);
      signed __int8 v14 = *(v10 - 1);
      signed __int8 v12 = *v10;
      v10 += 4;
      signed __int8 v13 = v12;
      BlueFin::GlIQData::SetIQData(v11, &v14, &v13, (const unsigned int *)(a4 + 8), a3);
      ++v8;
    }
    while (v8 < *(unsigned __int8 *)(a4 + 1));
  }
}

uint64_t BlueFin::GlMeSrdStats::ReportLegacyIqData(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  GlCustomLog(126, "IQDUMP,%d,%d:%s,%d", *(_DWORD *)(v3 + 8), BlueFin::GlSvId::s_aucSvId2prn[*v5], BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v5 + 1) - *((int *)v5 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*v5]]], *(unsigned __int8 *)(v3 + 1));
  uint64_t result = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)(v7 + 42920), *((unsigned __int16 *)v6 + 4));
  if (result)
  {
    if (*(unsigned __int8 *)(v4 + 1) <= 0xFAu)
    {
      unsigned int v9 = (void *)BlueFin::GlSignalIdArray::Get(v7 + 41768, (uint64_t)v6);
      if (!v9)
      {
        DeviceFaultNotify("glmesrd_stats.cpp", 907, "ReportLegacyIqData", (char)"nullptr != pAcqWin");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_stats.cpp", 907, "nullptr != pAcqWin");
      }
      int v10 = v9;
      uint64_t v11 = 1000000000 * *(unsigned int *)(v4 + 8);
      uint64_t v12 = v11 - *v9;
      uint64_t v13 = v12 / 200000000000;
      if ((unint64_t)(v12 + 0x2E90EDCFFFLL) > 0x1176592DFFELL)
      {
        GlCustomLog(126, " Wrong block idx %d\n", v12 / 200000000000);
        int v24 = *((unsigned __int16 *)v6 + 4);
        return BlueFin::GlBigArray::Remove(v7 + 42920, v24);
      }
      else
      {
        GlCustomLog(126, ",%d\n", v12 / 200000000000);
        uint64_t v14 = *(unsigned __int8 *)(v4 + 1);
        uint64_t v15 = *v6;
        __int16 v16 = *v6;
        if ((v15 - 52) >= 0xE) {
          __int16 v16 = BlueFin::GlSvId::s_aucSvId2prn[v15];
        }
        uint64_t v17 = v10[v13 + 1];
        v25[0] = v16;
        int v18 = BlueFin::GlSvId::s_aucSvId2gnss[v15];
        int v19 = *((_DWORD *)v6 + 1);
        int v26 = v18;
        int v27 = v19;
        __int16 v28 = v14;
        if (v14)
        {
          uint64_t v20 = v10[v13 + 6];
          char v21 = v29;
          uint64_t v22 = v4 + 13;
          uint64_t v23 = v17 / v14;
          do
          {
            *(_WORD *)(v21 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_WORD *)(v22 - 1);
            *(void *)(v21 - 9) = v20;
            *(void *)(v21 - 17) = v11;
            v11 += v23;
            v21 += 24;
            v22 += 4;
            --v14;
          }
          while (v14);
        }
        GlCustomLog(126, "\n");
        uint64_t result = (*(uint64_t (**)(void, _WORD *))(**(void **)(v7 + 41760) + 264))(*(void *)(v7 + 41760), v25);
        if ((unint64_t)(v12 - 800000000000) < 0x2E90EDD000) {
          return BlueFin::GlBigArray::Remove(v7 + 42920, *((unsigned __int16 *)v6 + 4));
        }
      }
    }
  }
  else
  {
    return GlCustomLog(126, "IQDUMP Warning: Missing AcqWin\n");
  }
  return result;
}

void BlueFin::GlMeSrdSyncIn::~GlMeSrdSyncIn(BlueFin::GlMeSrdSyncIn *this)
{
  *(void *)this = &unk_270EBC7E8;
  BlueFin::GlEventPump::RemoveActive(*((void *)this + 16), this);
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdSyncIn::~GlMeSrdSyncIn(this);

  JUMPOUT(0x263E6DD70);
}

void BlueFin::GlMeSrdSyncIn::DisarmESW(BlueFin::GlMeSrdSyncIn *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  v5[0] = BlueFin::GlMeSrdSyncIn::OnReliableAck;
  v5[1] = this;
  __int16 v6 = 257;
  char v7 = 0;
  uint64_t v8 = v2;
  int v9 = 0;
  __int16 v10 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 24))(v4, v5, 1);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v5);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v5);
}

void sub_263A85034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*(*BlueFin::GlMeSrdSyncIn::wait4disarm(void *a1, unsigned __int8 *a2))(uint64_t a1, unsigned __int8 *a2))()
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if ((v3 - 2) >= 2 && v3 != 41)
  {
    if (v3 == 13)
    {
      if (a2[1] == 1) {
        BlueFin::QHsm::tran(a1, BlueFin::GlMeSrdSyncIn::idle, (uint64_t)"&GlMeSrdSyncIn::idle");
      }
      return 0;
    }
    else
    {
      return BlueFin::GlMeSrdSyncIn::running;
    }
  }
  return (uint64_t (*(*)(uint64_t, unsigned __int8 *))())v2;
}

unint64_t BlueFin::GlMeSrdRpcGeoRpt::gll_georpt_rpc_internal_state(uint64_t a1, uint64_t a2)
{
  float64x2_t v16 = vmulq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 28)), (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL)), (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL));
  double v17 = *(float *)(a2 + 36) * 0.001 * 299792458.0;
  uint64_t v4 = *(void *)(a2 + 48);
  float64x2_t v19 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 40));
  uint64_t v18 = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  LODWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)a2;
  HIDWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v5;
  uint64_t v21 = v4;
  int v22 = *(_DWORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 8);
  *(_DWORD *)(v6 + 70bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(unsigned __int16 *)(a2 + 6);
  uint64_t v7 = *(void *)(v6 + 240);
  char v32 = 0;
  LODWORD(v28) = 0;
  uint64_t v31 = 0;
  uint64_t v30 = 0;
  char v29 = 0;
  int v8 = (*(uint64_t (**)(uint64_t, char *, unint64_t *, char *, uint64_t *, char *, uint64_t *, char *, void, void, double, uint64_t, void, void, uint64_t, uint64_t, int))(*(void *)v7 + 112))(v7, &v32, &v28, (char *)&v31 + 4, &v31, (char *)&v30 + 4, &v30, &v29, *(void *)&v16.f64[0], *(void *)&v16.f64[1], COERCE_DOUBLE(*(void *)&v17), v18, *(void *)&v19.f64[0], *(void *)&v19.f64[1], v20, v21, v22);
  int v9 = 0;
  int v10 = 0;
  if (v8) {
    BOOL v11 = v32 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    int v9 = *(unsigned __int16 *)(a2 + 60);
    int v10 = *(unsigned __int16 *)(a2 + 62);
  }
  int v23 = v9;
  int v24 = v10;
  char v12 = *(unsigned char *)(a2 + 4);
  BOOL v25 = (v12 & 2) != 0;
  BOOL v26 = (v12 & 4) != 0;
  char v27 = *(unsigned char *)(a2 + 6);
  (*(void (**)(void, float64x2_t *))(**(void **)(*(void *)(a1 + 8) + 232) + 224))(*(void *)(*(void *)(a1 + 8) + 232), &v16);
  WORD2(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 55;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(v13 + 32);
  unint64_t result = *(void *)(v13 + 8);
  *(void *)(v13 + 32) = result;
  do
  {
    unint64_t v28 = 0;
    if (BlueFin::patch_dispatch(result, v13, (unsigned __int8 *)&v31 + 4, &v28)) {
      unint64_t result = v28;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, char *))(v13 + 32))(v13, (char *)&v31 + 4);
    }
    *(void *)(v13 + 32) = result;
  }
  while (result);
  *(void *)(v13 + 32) = v14;
  return result;
}

uint64_t (***BlueFin::GlMeSrdTransCbStub::OnAsicData(BlueFin::GlMeSrdTransCbStub *this, unsigned __int8 *a2, unsigned __int16 a3))(void, unsigned __int8 *, void)
{
  unint64_t result = (uint64_t (***)(void, unsigned __int8 *, void))*((void *)this + 1);
  if (result) {
    return (uint64_t (***)(void, unsigned __int8 *, void))(**result)(result, a2, a3);
  }
  return result;
}

void BlueFin::GlMeSrdRpcGeoRpt::gll_georpt_rpc_raw_rpcs(BlueFin::GlMeSrdRpcGeoRpt *this, uint64_t a2, unsigned __int8 a3, unsigned __int16 a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16 = MEMORY[0x270FA5388](this, a2);
  uint64_t v18 = v17;
  unsigned int v20 = v19;
  unsigned __int8 v22 = v21;
  char v24 = v23;
  uint64_t v25 = v16;
  STACK[0x4428] = *MEMORY[0x263EF8340];
  uint64_t vars8 = &unk_270EBC920;
  BlueFin::GlMeSrdTransactionManager::GlMeSrdTransactionManager((uint64_t)&a11, (uint64_t)&vars8, *(void *)(v16 + 16), 0);
  *(unsigned char *)(a16 + 6516) = 0;
  uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v25 + 8) + 248) + 16))(*(void *)(*(void *)(v25 + 8) + 248));
  BlueFin::GlMeSrdTransactionManager::RegisterSatRpt((uint64_t)&a11, v26);
  BlueFin::GlMeSrdTransactionManager::RegisterEvents((uint64_t)&a11, *(void *)(*(void *)(v25 + 8) + 256));
  memset(v32, 0, 19);
  v32[3] = &a15;
  int vars0 = 0;
  __int16 vars0_4 = 0;
  (*(void (**)(void))(a15 + 16))();
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v32, v24, v22, v18, v20);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v32);
  uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v25 + 8) + 248) + 16))(*(void *)(*(void *)(v25 + 8) + 248));
  BlueFin::GlMeSrdTransactionManager::UnregisterSatRpt((uint64_t)&a11, v27);
  BlueFin::GlMeSrdTransactionManager::UnregisterEvents((uint64_t)&a11, *(void *)(*(void *)(v25 + 8) + 256));
  HIWORD(v3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 56;
  uint64_t v28 = *(void *)(v25 + 8);
  uint64_t v29 = *(void *)(v28 + 32);
  unint64_t v30 = *(void *)(v28 + 8);
  *(void *)(v28 + 32) = v30;
  do
  {
    a10 = 0;
    if (BlueFin::patch_dispatch(v30, v28, (unsigned __int8 *)&v31 + 6, &a10)) {
      unint64_t v30 = a10;
    }
    else {
      unint64_t v30 = (*(uint64_t (**)(uint64_t, char *))(v28 + 32))(v28, (char *)&v31 + 6);
    }
    *(void *)(v28 + 32) = v30;
  }
  while (v30);
  *(void *)(v28 + 32) = v29;
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v32);
  BlueFin::GlMeSrdTransactionManager::~GlMeSrdTransactionManager((BlueFin::GlMeSrdTransactionManager *)&a11);
}

void sub_263A8550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  BlueFin::GlMeSrdTransactionManager::~GlMeSrdTransactionManager((BlueFin::GlMeSrdTransactionManager *)va);
  _Unwind_Resume(a1);
}

unint64_t BlueFin::GlMeSrdRpcGeoRpt::gll_georpt_rpc_host_request(BlueFin::GlMeSrdRpcGeoRpt *this, unsigned __int8 a2)
{
  v5[0] = 57;
  v5[1] = a2;
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *(void *)(v2 + 32);
  unint64_t result = *(void *)(v2 + 8);
  *(void *)(v2 + 32) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, v2, v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(v2 + 32))(v2, v5);
    }
    *(void *)(v2 + 32) = result;
  }
  while (result);
  *(void *)(v2 + 32) = v3;
  return result;
}

unint64_t BlueFin::GlMeSrdGeofenceIfcImpl::AllocateEswResources(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  v2[32] = a2;
  __int16 v5 = 309;
  uint64_t v3 = v2[4];
  unint64_t result = v2[1];
  v2[4] = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)v2, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = ((uint64_t (*)(void *, __int16 *))v2[4])(v2, &v5);
    }
    v2[4] = result;
  }
  while (result);
  v2[4] = v3;
  return result;
}

unint64_t BlueFin::GlMeSrdGeofenceIfcImpl::FreeEswResources(BlueFin::GlMeSrdGeofenceIfcImpl *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  v1[32] = 0;
  __int16 v4 = 53;
  uint64_t v2 = v1[4];
  unint64_t result = v1[1];
  v1[4] = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = ((uint64_t (*)(void *, __int16 *))v1[4])(v1, &v4);
    }
    v1[4] = result;
  }
  while (result);
  v1[4] = v2;
  return result;
}

unint64_t BlueFin::GlMeSrdGeofenceIfcImpl::SetGeofenceData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  v3[24] = a2;
  __int16 v6 = 54;
  uint64_t v4 = v3[4];
  unint64_t result = v3[1];
  v3[4] = result;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)v3, (unsigned __int8 *)&v6, &v7)) {
      unint64_t result = v7;
    }
    else {
      unint64_t result = ((uint64_t (*)(void *, __int16 *))v3[4])(v3, &v6);
    }
    v3[4] = result;
  }
  while (result);
  v3[4] = v4;
  *(void *)(*(void *)(a1 + 8) + 192) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdGeofenceIfcImpl::SetGeofenceSettings(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v3 = *(void *)(this + 8);
  if (a2 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a2;
  }
  *(_DWORD *)(v3 + 708) = v4;
  *(unsigned char *)(v3 + 712) = a3;
  return this;
}

unint64_t BlueFin::GlMeSrdGeofenceIfcImpl::GetGeofenceState(BlueFin::GlMeSrdGeofenceIfcImpl *this)
{
  __int16 v4 = 58;
  uint64_t v1 = *((void *)this + 1);
  uint64_t v2 = *(void *)(v1 + 32);
  unint64_t result = *(void *)(v1 + 8);
  *(void *)(v1 + 32) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, v1, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v1 + 32))(v1, &v4);
    }
    *(void *)(v1 + 32) = result;
  }
  while (result);
  *(void *)(v1 + 32) = v2;
  return result;
}

void BlueFin::GlMeSrdGeofenceMgr::~GlMeSrdGeofenceMgr(BlueFin::GlMeSrdGeofenceMgr *this)
{
  *(void *)this = &unk_270EBC820;
  BlueFin::GlEventPump::RemoveActive(*((void *)this + 28), this);
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdGeofenceMgr::~GlMeSrdGeofenceMgr(this);

  JUMPOUT(0x263E6DD70);
}

unint64_t BlueFin::GlMeSrdGeofenceMgr::OnReliableTransactionAck(BlueFin::GlMeSrdGeofenceMgr *this, void *a2)
{
  v5[0] = 13;
  v5[1] = a2;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, unsigned __int8 *))this + 4))(this, v5);
    }
    *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  }
  while (result);
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  return result;
}

uint64_t (*BlueFin::GlMeSrdGeofenceMgr::running(uint64_t a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  __int16 v4 = BlueFin::QHsm::top;
  if (v3 > 2)
  {
    if (*a2 > 0x34u)
    {
      if (v3 == 53)
      {
        if (!a2[1])
        {
          BlueFin::QHsm::tran((void *)a1, BlueFin::GlMeSrdGeofenceMgr::idle, (uint64_t)"&GlMeSrdGeofenceMgr::idle");
          return 0;
        }
        unsigned __int8 v22 = "e->par == 0";
        DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 328, "running", (char)"e->par == 0");
        int v23 = 328;
      }
      else
      {
        if (v3 != 54) {
          return v4;
        }
        unsigned __int8 v22 = "0";
        DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 335, "running", (char)"0");
        int v23 = 335;
      }
    }
    else
    {
      if (v3 == 3)
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 200) + 192))(*(void *)(a1 + 200), a1 + 280);
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 200) + 32))(*(void *)(a1 + 200), 1000);
        return 0;
      }
      if (v3 != 13) {
        return v4;
      }
      unsigned __int8 v22 = "0";
      DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 341, "running", (char)"0");
      int v23 = 341;
    }
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", v23, v22);
  }
  if (v3 == 1)
  {
    *(void *)(a1 + 8) = BlueFin::GlMeSrdGeofenceMgr::hostsleep;
    uint64_t v20 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 24) != v20) {
      *(void *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20;
    }
    __int16 v4 = 0;
    *(void *)(a1 + 16) = "&GlMeSrdGeofenceMgr::hostsleep";
  }
  else if (v3 == 2)
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 200) + 32))(*(void *)(a1 + 200), 10000);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 200) + 184))(*(void *)(a1 + 200), a1 + 280);
    int v39 = 40791555;
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 80))(*(void *)(a1 + 200));
    double v33 = 0;
    uint64_t v34 = 0;
    v35[0] = 0;
    *(_WORD *)&v35[1] = 1;
    uint64_t v36 = v5;
    int v37 = 0;
    __int16 v38 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
    __int16 v27 = 16385;
    char v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 72))(*(void *)(a1 + 240));
    char v29 = 0;
    char v30 = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 72))(*(void *)(a1 + 240));
    unint64_t v6 = (char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
    char v31 = v6[76];
    char v32 = v6[139];
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 208))(*(void *)(a1 + 200));
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), __int16 *))(*(void *)v8 + 32))(v8, &v33, &v27);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 208))(*(void *)(a1 + 200));
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), uint64_t, int *))(*(void *)v10 + 128))(v10, &v33, 1, &v39);
    int v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 584))(*(void *)(a1 + 240));
    uint64_t v26 = 0x100000001;
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 208))(*(void *)(a1 + 200));
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), int *))(*(void *)v12 + 80))(v12, &v33, &v25);
    if (*(unsigned char *)(a1 + 712))
    {
      int v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 592))(*(void *)(a1 + 240));
      uint64_t v26 = 1;
      uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 208))(*(void *)(a1 + 200));
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), int *))(*(void *)v14 + 80))(v14, &v33, &v25);
    }
    BlueFin::GlMeSrdGeofenceMgr::GetDefaultGeofenceMode(a1, v24, 0);
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 208))(*(void *)(a1 + 200));
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), char *))(*(void *)v16 + 72))(v16, &v33, v24);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v33);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v33);
    uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 80))(*(void *)(a1 + 200));
    double v33 = BlueFin::GlMeSrdGeofenceMgr::OnReliableTransactionAck;
    uint64_t v34 = a1;
    *(_WORD *)int v35 = 257;
    v35[2] = 0;
    uint64_t v36 = v17;
    int v37 = 0;
    __int16 v38 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 1);
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 208))(*(void *)(a1 + 200));
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 72))(v18);
    (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *)))(*(void *)v19 + 88))(v19, &v33);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v33);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v33);
    return 0;
  }
  return v4;
}

void sub_263A86018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t (*BlueFin::GlMeSrdGeofenceMgr::hostsleep(BlueFin::GlMeSrdGeofenceMgr *this, unsigned __int8 *a2))()
{
  uint64_t v2 = this;
  v184[153] = *MEMORY[0x263EF8340];
  unsigned int v3 = *a2;
  if (v3 <= 0xC)
  {
    switch(v3)
    {
      case 2u:
        *((void *)this + 23) = this;
        BlueFin::GlTimer::arm((BlueFin::GlMeSrdGeofenceMgr *)((char *)this + 152), 5, 1, 0x7D0u);
        unint64_t result = 0;
        *((unsigned char *)v2 + 176) = 1;
        break;
      case 3u:
        BlueFin::GlTimer::disarm((uint64_t)this + 152);
        unint64_t result = 0;
        *((_DWORD *)v2 + 175) = 3;
        break;
      case 5u:
        if (a2[1] == 1)
        {
LABEL_46:
          unint64_t result = 0;
          *((unsigned char *)v2 + 728) = 0;
        }
        else if (a2[1])
        {
          return 0;
        }
        else
        {
LABEL_68:
          unint64_t result = 0;
          *((unsigned char *)v2 + 729) = 0;
        }
        break;
      default:
        return BlueFin::GlMeSrdGeofenceMgr::running;
    }
    return result;
  }
  unint64_t result = 0;
  switch(*a2)
  {
    case '6':
      uint64_t v5 = *((void *)v2 + 24);
      if (!v5)
      {
        BOOL v133 = "m_ptData != nullptr";
        DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 562, "GetGeofenceData", (char)"m_ptData != nullptr");
        int v134 = 562;
        goto LABEL_173;
      }
      uint64_t v6 = *(unsigned int *)(v5 + 8);
      if (v6 >= 0x15)
      {
        BOOL v133 = "rGeoData.otSatPosModels.m_uiNumSatPos <= GlSatPosModels::GEO_FENCE_MAX_SATPOS_MODELS";
        DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 570, "SetGeofenceData", (char)"rGeoData.otSatPosModels.m_uiNumSatPos <= GlSatPosModels::GEO_FENCE_MAX_SATPOS_MODELS");
        int v134 = 570;
LABEL_173:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", v134, v133);
      }
      *((unsigned char *)v2 + 713) = *(unsigned char *)(v5 + 4560);
      *((_DWORD *)v2 + 179) = *(_DWORD *)(v5 + 4564);
      *((_DWORD *)v2 + 18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(v5 + 4568);
      *((_WORD *)v2 + 362) = *(_WORD *)(v5 + 4572);
      *((unsigned char *)v2 + 726) = *(unsigned char *)(v5 + 4574);
      int v139 = v141;
      unsigned __int8 v140 = 8;
      memset(v141, 0, sizeof(v141));
      memset(v138, 0, sizeof(v138));
      if (v6)
      {
        uint64_t v7 = *(unsigned __int8 **)(v5 + 2432);
        do
        {
          unsigned int v8 = *v7;
          v7 += 120;
          *(_DWORD *)((char *)v141 + (((unint64_t)v8 >> 3) & 0x1C)) |= 1 << v8;
          --v6;
        }
        while (v6);
      }
      uint64_t v136 = v5;
      LOBYTE(v183[0]) = *((unsigned char *)v2 + 320);
      memcpy(&v183[4], *((const void **)v2 + 39), 4 * LOBYTE(v183[0]));
      v183[1] = 0;
      HIBYTE(v183[0]) = 0;
      *(_DWORD *)&v183[2] = *(_DWORD *)&v183[4];
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      while (HIBYTE(v183[0]) != LOBYTE(v183[0]))
      {
        unint64_t v9 = (unint64_t)LOBYTE(v183[1]) >> 5;
        if (((unint64_t)*((unsigned int *)v139 + v9) >> (v183[1] & 0x1F))) {
          BlueFin::GlSetBase::Remove((uint64_t)&v139, LOBYTE(v183[1]));
        }
        else {
          *((_DWORD *)v138 + v9) |= 1 << (v183[1] & 0x1F);
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      }
      uint64_t v10 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
      uint64_t v155 = 0;
      uint64_t v156 = 0;
      __int16 v157 = 256;
      char v158 = 0;
      uint64_t v159 = v10;
      int v160 = 0;
      __int16 v161 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, 1);
      BlueFin::GlMeSrdGeofenceMgr::GetDefaultGeofenceMode((uint64_t)v2, (char *)v183, 0);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v159 + 48))(v159);
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
      (*(void (**)(uint64_t, uint64_t *, __int16 *))(*(void *)v12 + 72))(v12, &v155, v183);
      LOBYTE(v183[0]) = *((unsigned char *)v2 + 320);
      memcpy(&v183[4], *((const void **)v2 + 39), 4 * LOBYTE(v183[0]));
      v183[1] = 0;
      HIBYTE(v183[0]) = 0;
      *(_DWORD *)&v183[2] = *(_DWORD *)&v183[4];
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      if (HIBYTE(v183[0]) != LOBYTE(v183[0]))
      {
        unsigned int v13 = 0;
        do
        {
          unsigned int v14 = v13 + 1;
          *((unsigned char *)&v162 + v13) = BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId((uint64_t)v2, v183[1]);
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
          ++v13;
        }
        while (HIBYTE(v183[0]) != LOBYTE(v183[0]));
        if (v14)
        {
          uint64_t v15 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 208))(*((void *)v2 + 25));
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15);
          (*(void (**)(uint64_t, uint64_t *, void, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *)))(*(void *)v16 + 64))(v16, &v155, v14, &v162);
        }
      }
      uint64_t v17 = *((unsigned int *)v2 + 76);
      if (v17)
      {
        for (uint64_t i = 0; i != v17; ++i)
          *((unsigned char *)v183 + i) = i;
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v159 + 48))(v159);
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 72))(v19);
        (*(void (**)(uint64_t, uint64_t *, void, __int16 *))(*(void *)v20 + 32))(v20, &v155, *((unsigned __int8 *)v2 + 304), v183);
        *((_DWORD *)v2 + 76) = 0;
      }
      *(_DWORD *)int v183 = 8;
      memcpy(&v183[4], v138, 0x20uLL);
      *(_DWORD *)&v183[2] = *(_DWORD *)&v183[4];
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      if (HIBYTE(v183[0]) != LOBYTE(v183[0]))
      {
        unsigned int v21 = 0;
        do
        {
          unsigned int v22 = v21 + 1;
          *((unsigned char *)&v162 + v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId((uint64_t)v2, v183[1]);
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
          ++v21;
        }
        while (HIBYTE(v183[0]) != LOBYTE(v183[0]));
        if (v22)
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v159 + 48))(v159);
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 72))(v23);
          (*(void (**)(uint64_t, uint64_t *, void, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *)))(*(void *)v24 + 48))(v24, &v155, v22, &v162);
        }
      }
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v155);
      *(_DWORD *)int v183 = 8;
      memcpy(&v183[4], v138, 0x20uLL);
      *(_DWORD *)&v183[2] = *(_DWORD *)&v183[4];
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      while (HIBYTE(v183[0]) != LOBYTE(v183[0]))
      {
        int v25 = LOBYTE(v183[1]);
        *((_DWORD *)v2 + 90) &= ~(1 << BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId((uint64_t)v2, v183[1]));
        BlueFin::GlSetBase::Remove((uint64_t)v2 + 312, v25);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      }
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v155);
      int v143 = ~*((_DWORD *)v2 + 90);
      int v144 = v143;
      int v142 = 1;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v142);
      LOBYTE(v183[0]) = v140;
      memcpy(&v183[4], v139, 4 * v140);
      v183[1] = 0;
      HIBYTE(v183[0]) = 0;
      *(_DWORD *)&v183[2] = *(_DWORD *)&v183[4];
      while (1)
      {
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
        if (HIBYTE(v183[0]) == LOBYTE(v183[0])) {
          break;
        }
        if (BYTE1(v142) == v142 || (uint64_t v27 = HIWORD(v142), HIWORD(v142) >= 0x14u))
        {
          DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 749, "SetupGeofenceAndBreadcrumb", (char)"!itAvailableGeoIds.last() && *itAvailableGeoIds < MAX_NUM_GEO_ID");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", 749, "!itAvailableGeoIds.last() && *itAvailableGeoIds < MAX_NUM_GEO_ID");
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v142);
        unsigned __int8 v28 = v183[1];
        unsigned int v29 = LOBYTE(v183[1]);
        *((unsigned char *)v2 + v27 + 36bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v183[1];
        *((unsigned char *)v2 + v28 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v27;
        *((_DWORD *)v2 + 90) |= 1 << v27;
        *(_DWORD *)(*((void *)v2 + 39) + 4 * (v29 >> 5)) |= 1 << v29;
      }
      BlueFin::GlStdLib::QsortImpl((char *)(v136 + 2496), (void *)*(unsigned int *)(v136 + 2492), 0x20u, (uint64_t (*)(char *, char *))BlueFin::GlMeSrdGeofenceMgr::AreaComparator, (int (*)(const void *, const void *))v183, v26);
      unsigned int v39 = *(_DWORD *)(v136 + 2492);
      if (v39 < 0x21)
      {
        int v45 = 0;
      }
      else
      {
        uint64_t v40 = 0;
        double v41 = 0.0;
        do
        {
          double v42 = sqrt(*(double *)(v136 + v40 + 3496) * *(double *)(v136 + v40 + 3496)+ *(double *)(v136 + v40 + 3488) * *(double *)(v136 + v40 + 3488));
          double v43 = *(double *)(v136 + v40 + 3504);
          if (v42 <= v43) {
            double v44 = v43 - v42;
          }
          else {
            double v44 = v42 - v43;
          }
          if (!v40 || v44 < v41) {
            double v41 = v44;
          }
          v40 += 32;
        }
        while (32 * (v39 - 31) != v40);
        *(void *)&v183[4] = 0;
        *(void *)int v183 = 0;
        *(double *)&v183[8] = v41;
        unsigned int v39 = 31;
        v183[12] = 31;
        int v45 = 1;
        LOBYTE(v183[13]) = 1;
      }
      uint64_t v46 = 0;
      unint64_t v47 = 0;
      unint64_t v48 = v45 + v39;
      while (v47 < v39)
      {
        int v49 = (__int16 *)(v136 + 2496 + v46);
LABEL_75:
        int v50 = (char *)&v155 + v46;
        *(_OWORD *)int v50 = *(_OWORD *)v49;
        *((void *)v50 + 2) = *((void *)v49 + 2);
        *((_WORD *)v50 + 12) = v49[12];
        v50[26] = *((unsigned char *)v49 + 26);
        ++v47;
        v46 += 32;
        if (v46 == 1024)
        {
          unsigned int v135 = 32;
          goto LABEL_78;
        }
      }
      if (v47 < v48)
      {
        int v49 = v183;
        goto LABEL_75;
      }
      unsigned int v135 = v47;
LABEL_78:
      unsigned int v51 = *(_DWORD *)(v136 + 8);
      unsigned int v52 = *(_DWORD *)v136;
      uint64_t v53 = (uint64_t)v2;
      if (v51)
      {
        uint64_t v54 = *(void *)(v136 + 2432);
        double v55 = (double)(*(_DWORD *)(v136 + 4) - v52) * 0.001 + 1.0;
        double v56 = fmod(v55, 4294967300.0);
        if (v55 > 4294967300.0) {
          double v55 = v56;
        }
        unsigned int v57 = 0;
        double v58 = -fmod(-v55, 4294967300.0);
        if (v55 >= -4294967300.0) {
          double v58 = v55;
        }
        if (v58 < 0.0) {
          unsigned int v59 = --v58;
        }
        else {
          LOWORD(v59) = v58;
        }
        do
        {
          if (v51 >= 0xA) {
            uint64_t v60 = 10;
          }
          else {
            uint64_t v60 = v51;
          }
          uint64_t v61 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
          uint64_t v163 = 0;
          uint64_t v162 = 0;
          __int16 v164 = 256;
          char v165 = 0;
          uint64_t v166 = v61;
          int v167 = 0;
          LOWORD(v168) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 16))(v61, 1);
          unsigned int v137 = v57;
          long long v62 = v184;
          uint64_t v63 = v60;
          do
          {
            *((unsigned char *)v62 - 56) = BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId(v53, *(unsigned char *)(v54 + 120 * v57));
            uint64_t v64 = v54 + 120 * v57;
            *(float32x4_t *)(v62 - 26) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v64 + 24)), *(float64x2_t *)(v64 + 40));
            *(float32x4_t *)(v62 - 18) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v64 + 56)), *(float64x2_t *)(v64 + 72));
            *(float32x4_t *)(v62 - 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v64 + 88)), *(float64x2_t *)(v64 + 104));
            *((_DWORD *)v62 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v52;
            *long long v62 = v59;
            v62 += 30;
            ++v57;
            --v63;
          }
          while (v63);
          uint64_t v2 = (BlueFin::GlMeSrdGeofenceMgr *)v53;
          uint64_t v65 = (*(uint64_t (**)(void))(**(void **)(v53 + 200) + 208))(*(void *)(v53 + 200));
          uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 72))(v65);
          (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), void, __int16 *))(*(void *)v66 + 56))(v66, &v162, v60, v183);
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v162);
          v51 -= v60;
          unsigned int v57 = v60 + v137;
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v162);
        }
        while (v51);
        unsigned int v52 = *(_DWORD *)v136;
      }
      bzero(v183, 0x2D0uLL);
      uint64_t v181 = 0;
      uint64_t v180 = 0;
      int v182 = 0;
      unsigned __int8 GeoIdFromSvId = *((unsigned char *)v2 + 320);
      memcpy(&v153, *((const void **)v2 + 39), 4 * GeoIdFromSvId);
      __int16 v151 = 0;
      unsigned __int8 v150 = 0;
      int v152 = v153;
      BlueFin::GlSetIterator::operator++(&GeoIdFromSvId);
      LOBYTE(v67) = 0;
      if (v150 != GeoIdFromSvId)
      {
        unsigned int v67 = 0;
        do
        {
          uint64_t v68 = v151;
          *((unsigned char *)&v180 + v67) = BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId((uint64_t)v2, v151);
          uint64_t v162 = (unint64_t (*)(BlueFin::GlMeSrdGeofenceMgr *, void *))&off_270EBF450;
          LOBYTE(v163) = 0;
          HIDWORD(v163) = -1;
          __int16 v164 = 575;
          uint64_t v166 = 0;
          long long v168 = xmmword_263BABE60;
          int v167 = 0;
          int v169 = 2139095039;
          double v170 = 0.0;
          int v171 = 2139095039;
          __int16 v172 = 0;
          uint64_t v173 = 0x7FEFFFFFFFFFFFFFLL;
          int v174 = -1;
          __int16 v175 = -1;
          uint64_t v177 = 0;
          uint64_t v178 = 0;
          uint64_t v176 = 0;
          int v179 = 0;
          v146[0] = v68;
          int v147 = 0;
          unsigned __int16 v148 = 575;
          if ((v68 + 67) >= 0x44u)
          {
            uint64_t v69 = BlueFin::GlSvId::s_aucSvId2gnss[v68];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v69] == 255) {
              int v147 = -1;
            }
            else {
              unsigned __int16 v148 = BlueFin::GlSignalId::s_ausGnss2signalId[v69]
            }
                   + v68
                   - BlueFin::GlSvId::s_aucGnss2minSvId[v69];
          }
          uint64_t v70 = *((void *)v2 + 27);
          int v145 = 1;
          if (((*(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), int *, void, void, double, double, double))(*(void *)v70 + 24))(v70, v146, &v162, &v145, 0, 0, (double)v52, 0.0, 0.0) & 1) == 0)
          {
            DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 984, "SendAiding", (char)"0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", 984, "0");
          }
          int v72 = &v183[18 * v67];
          char v75 = *((unsigned char *)v72 + 14);
          BOOL v73 = v72 + 7;
          char v74 = v75;
          *((_WORD *)v73 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v52;
          int v76 = &v183[18 * v67];
          *int v76 = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)v146, *((float *)&v168 + 1), v71);
          v76[1] = BlueFin::GlMeSrdAsicUnitConverter::PpuPerSecToEswAidingAcceleration((BlueFin::GlMeSrdAsicUnitConverter *)v146, *((float *)&v168 + 3), v77);
          float v78 = (*(float (**)(void, unsigned __int8 *))(**((void **)v2 + 26) + 56))(*((void *)v2 + 26), v146);
          double v79 = v170;
          double InterSignalBiasInMs = BlueFin::GlSignalId::GetInterSignalBiasInMs(v146, *((void *)v2 + 30));
          unsigned int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)v146);
          unsigned int v82 = EpochPerSymbol;
          double v83 = v78;
          double v84 = (double)v52 + (v79 + v78 + InterSignalBiasInMs * 0.001) * -1000.0;
          double v85 = fabs(v84);
          if (v85 >= 10.0 && v85 > fabs(v83 * 1000.0) + (double)(2 * EpochPerSymbol) + 0.001)
          {
            DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1000, "SendAiding", (char)"FABS_D(dChannelTimeToaOffsetMs) < 10.0 || FABS_D(dChannelTimeToaOffsetMs) <= 2*uiEpochPerSymbol + FABS_D(fBbHwInterSysBiasInSec*1000.0) + 1.0e-3");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", 1000, "FABS_D(dChannelTimeToaOffsetMs) < 10.0 || FABS_D(dChannelTimeToaOffsetMs) <= 2*uiEpochPerSymbol + FABS_D(fBbHwInterSysBiasInSec*1000.0) + 1.0e-3");
          }
          if (v84 >= 0.0)
          {
            unsigned int v87 = 0;
          }
          else
          {
            if (v148 > 0x23Eu)
            {
              uint64_t v131 = "IsValid()";
              int v132 = 678;
              DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
              goto LABEL_170;
            }
            uint64_t v86 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v147 - v147];
            if (!v86[BlueFin::GlSvId::s_aucSvId2gnss[v146[0]]])
            {
              uint64_t v131 = "ucMsPerEpoch != 0";
              int v132 = 685;
              DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
LABEL_170:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v132, v131);
            }
            unsigned int v87 = 0;
            do
            {
              unsigned int v88 = v87++;
              double v84 = v84
                  + (double)(v86[BlueFin::GlSvId::s_aucSvId2gnss[v146[0]]]
                           * EpochPerSymbol);
            }
            while (v88 <= 3 && v84 < 0.0);
          }
          if (v84 < 0.0)
          {
            DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1010, "SendAiding", (char)"dChannelTimeToaOffsetMs >= 0.0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", 1010, "dChannelTimeToaOffsetMs >= 0.0");
          }
          if (v148 >= 0x23Fu)
          {
            uint64_t v129 = "IsValid()";
            int v130 = 777;
            DeviceFaultNotify("glsignalid.h", 777, "GetChipsPerEpoch", (char)"IsValid()");
            goto LABEL_166;
          }
          unsigned int v89 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * v147
                                                                         + BlueFin::GlSvId::s_aucSvId2gnss[v146[0]]];
          if (!v89)
          {
            uint64_t v129 = "ucChipsPerEpoch != 0";
            int v130 = 784;
            DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
LABEL_166:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v130, v129);
          }
          unsigned int v90 = (*(uint64_t (**)(void))(**(void **)(v53 + 240) + 320))(*(void *)(v53 + 240));
          double v91 = v84 * (double)v89 * (double)v90 + 0.5;
          double v92 = fmod(v91, 4294967300.0);
          if (v91 <= 4294967300.0) {
            double v92 = v91;
          }
          if (v92 < -4294967300.0) {
            double v92 = -fmod(-v92, 4294967300.0);
          }
          if (v92 < 0.0) {
            unsigned int v93 = --v92;
          }
          else {
            unsigned int v93 = v92;
          }
          unsigned int v94 = v93 / v90;
          char v95 = v93 % v90;
          int v96 = &v183[18 * v67];
          unsigned int v97 = v94 / v89 / v82 % 0xC8;
          v96[2] = v97;
          int v98 = v96 + 2;
          *((unsigned char *)v98 + 6) = v95;
          v98[2] = v94 % v89;
          *((unsigned char *)v98 + 2) = v94 / v89 % v82;
          __int16 v99 = v167;
          if ((v167 & 0x1A) != 0) {
            char v100 = 69;
          }
          else {
            char v100 = 5;
          }
          char v101 = v100 | v74;
          if ((v167 & 0x80) != 0)
          {
            v101 |= 0x80u;
            unsigned __int16 v102 = v174 + (_WORD)v97;
            if (v102 > 0xC7u) {
              v102 -= 200;
            }
            if (v87 > v102) {
              v102 += 200;
            }
            LOWORD(v97) = v102 - v87;
            *int v98 = v97;
          }
          uint64_t v2 = (BlueFin::GlMeSrdGeofenceMgr *)v53;
          if ((v99 & 0x400) != 0)
          {
            v101 |= 0x80u;
            unsigned __int16 v103 = v97 + BYTE1(v174);
            if (v103 > 0x18u) {
              v103 -= 25;
            }
            if (v87 > v103) {
              v103 += 25;
            }
            *int v98 = v103 - v87;
          }
          ++v67;
          *BOOL v73 = v101 | 0x20;
          BlueFin::GlSetIterator::operator++(&GeoIdFromSvId);
        }
        while (v150 != GeoIdFromSvId);
      }
      uint64_t v104 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
      uint64_t v163 = 0;
      uint64_t v162 = 0;
      __int16 v164 = 256;
      char v165 = 0;
      uint64_t v166 = v104;
      int v167 = 0;
      LOWORD(v168) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v104 + 16))(v104, 1);
      uint64_t v105 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 208))();
      uint64_t v106 = (*(uint64_t (**)(uint64_t))(*(void *)v105 + 48))(v105);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), void, uint64_t *, __int16 *))(*(void *)v106 + 72))(v106, &v162, v67, &v180, v183);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v162);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v162);
      uint64_t v107 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
      uint64_t v162 = BlueFin::GlMeSrdGeofenceMgr::OnReliableTransactionAck;
      uint64_t v163 = v2;
      __int16 v164 = 258;
      char v165 = 0;
      uint64_t v166 = v107;
      int v167 = 0;
      LOWORD(v168) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v107 + 16))(v107, 1);
      *(_DWORD *)int v183 = *(_DWORD *)(v136 + 2488);
      *(float32x2_t *)&v183[2] = vcvt_f32_f64(vmulq_f64(vdivq_f64(*(float64x2_t *)(v136 + 2464), (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL)), (float64x2_t)vdupq_n_s64(0x408F400000000000uLL)));
      float v108 = *(double *)(v136 + 2480) / 299792458.0 * 1000.0;
      *(float *)&v183[6] = v108;
      uint64_t v109 = (*(uint64_t (**)(uint64_t))(*(void *)v166 + 48))(v166);
      uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)v109 + 72))(v109);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), __int16 *))(*(void *)v110 + 16))(v110, &v162, v183);
      LOBYTE(v183[0]) = v140;
      memcpy(&v183[4], v139, 4 * v140);
      v183[1] = 0;
      HIBYTE(v183[0]) = 0;
      *(_DWORD *)&v183[2] = *(_DWORD *)&v183[4];
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      while (HIBYTE(v183[0]) != LOBYTE(v183[0]))
      {
        uint64_t v111 = LOBYTE(v183[1]);
        unsigned __int8 GeoIdFromSvId = BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId((uint64_t)v2, v183[1]);
        LOBYTE(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v111;
        uint64_t v112 = BlueFin::GlMeSrdAsicUnitConverter::Svid2SvParamType(&v180);
        uint64_t v113 = *(void *)v112;
        int v154 = *((_DWORD *)v112 + 2);
        uint64_t v153 = v113;
        unsigned __int8 v150 = 49;
        uint64_t v114 = *((void *)v2 + 26);
        LOBYTE(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v111;
        HIDWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
        LOWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 575;
        if ((v111 + 67) >= 0x44u)
        {
          uint64_t v115 = BlueFin::GlSvId::s_aucSvId2gnss[v111];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v115] == 255) {
            HIDWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
          }
          else {
            LOWORD(v18BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSignalId::s_ausGnss2signalId[v115]
          }
                         + v111
                         - BlueFin::GlSvId::s_aucGnss2minSvId[v115];
        }
        int v152 = (int)((*(float (**)(uint64_t, uint64_t *))(*(void *)v114 + 56))(v114, &v180) * 1000000000.0
                   + 0.5);
        uint64_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)v166 + 48))(v166);
        uint64_t v117 = (*(uint64_t (**)(uint64_t))(*(void *)v116 + 72))(v116);
        (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), unsigned __int8 *))(*(void *)v117 + 40))(v117, &v162, &GeoIdFromSvId);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v183);
      }
      if (v135 > 0x40)
      {
        DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 873, "SendAreas", (char)"_DIM(aEswArea)>=uiNumAreas");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", 873, "_DIM(aEswArea)>=uiNumAreas");
      }
      if (v135)
      {
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        uint64_t v120 = &v183[6];
        float64x2_t v121 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
        float64x2_t v122 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
        do
        {
          *((unsigned char *)v120 - 12) = v119;
          *((float32x2_t *)v120 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = vcvt_f32_f64(vmulq_f64(vdivq_f64(*(float64x2_t *)((char *)&v155 + v118), v121), v122));
          float v123 = *(double *)((char *)&v157 + v118) / 299792458.0 * 1000.0;
          *(float *)uint64_t v120 = v123;
          *((unsigned char *)v120 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((unsigned char *)&v159 + v118 + 2) ^ 1;
          *((_WORD *)v2 + v119++ + 286) = *(_WORD *)((char *)&v159 + v118);
          v118 += 32;
          v120 += 10;
        }
        while (32 * v135 != v118);
      }
      uint64_t v124 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 208))(*((void *)v2 + 25));
      uint64_t v125 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 72))(v124);
      (*(void (**)(uint64_t, unint64_t (**)(BlueFin::GlMeSrdGeofenceMgr *, void *), void, __int16 *))(*(void *)v125 + 24))(v125, &v162, v135, v183);
      *((_DWORD *)v2 + 76) = v135;
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v162);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v162);
      uint64_t v126 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
      uint64_t v155 = 0;
      uint64_t v156 = 0;
      __int16 v157 = 256;
      char v158 = 0;
      uint64_t v159 = v126;
      int v160 = 0;
      __int16 v161 = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v126 + 16))(v126, 1);
      BlueFin::GlMeSrdGeofenceMgr::GetDefaultGeofenceMode((uint64_t)v2, (char *)v183, v136);
      if (*((_DWORD *)v2 + 76)) {
        LOBYTE(v183[0]) |= 2u;
      }
      if (*((unsigned char *)v2 + 726))
      {
        LOBYTE(v183[0]) |= 0x20u;
        *((unsigned char *)v2 + 726) = 0;
      }
      if (*((unsigned char *)v2 + 712))
      {
        LOBYTE(v183[0]) |= 0x80u;
        *(_DWORD *)&v183[16] = (*(uint64_t (**)(void))(**((void **)v2 + 30) + 592))(*((void *)v2 + 30));
      }
      uint64_t v127 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 208))(*((void *)v2 + 25));
      uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)v127 + 72))(v127);
      (*(void (**)(uint64_t, uint64_t *, __int16 *))(*(void *)v128 + 72))(v128, &v155, v183);
      BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v155);
      BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v155);
      *((void *)v2 + 23) = v2;
      BlueFin::GlTimer::arm((BlueFin::GlMeSrdGeofenceMgr *)((char *)v2 + 152), 5, 2, 0x7D0u);
      unint64_t result = 0;
      *((unsigned char *)v2 + 176) = 1;
      return result;
    case '7':
      if (!*((unsigned char *)v2 + 727))
      {
        uint64_t v32 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
        memset(v183, 0, 17);
        *(__int16 *)((char *)&v183[8] + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        *(void *)&v183[12] = v32;
        *(_DWORD *)&v183[16] = 0;
        v183[18] = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, 1);
        BlueFin::GlMeSrdGeofenceMgr::GetDefaultGeofenceMode((uint64_t)v2, (char *)&v155, 0);
        uint64_t v33 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 208))(*((void *)v2 + 25));
        uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 72))(v33);
        (*(void (**)(uint64_t, __int16 *, uint64_t *))(*(void *)v34 + 72))(v34, v183, &v155);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v183);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v183);
        *((unsigned char *)v2 + 727) = 1;
      }
      if (*((_DWORD *)v2 + 176) && !*((unsigned char *)v2 + 729))
      {
        uint64_t v35 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 80))(*((void *)v2 + 25));
        *(void *)int v183 = BlueFin::GlMeSrdGeofenceMgr::OnReliableTransactionAck;
        *(void *)&v183[4] = v2;
        v183[8] = 256;
        LOBYTE(v183[9]) = 0;
        *(void *)&v183[12] = v35;
        *(_DWORD *)&v183[16] = 0;
        v183[18] = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, 1);
        if (*((_DWORD *)v2 + 177) >= *((_DWORD *)v2 + 176)) {
          unsigned __int8 v36 = *((_DWORD *)v2 + 176);
        }
        else {
          unsigned __int8 v36 = *((_DWORD *)v2 + 177);
        }
        uint64_t v37 = (*(uint64_t (**)(void))(**((void **)v2 + 25) + 208))(*((void *)v2 + 25));
        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 72))(v37);
        (*(void (**)(uint64_t, __int16 *, void))(*(void *)v38 + 104))(v38, v183, v36);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v183);
        *((unsigned char *)v2 + 729) = 1;
        *((void *)v2 + 23) = v2;
        BlueFin::GlTimer::arm((BlueFin::GlMeSrdGeofenceMgr *)((char *)v2 + 152), 5, 0, 0x7D0u);
        *((unsigned char *)v2 + 176) = 1;
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v183);
      }
      return 0;
    case '8':
      return result;
    case '9':
      switch(a2[1])
      {
        case 1u:
          char v31 = *(void (**)(void))(**((void **)v2 + 29) + 232);
          goto LABEL_157;
        case 2u:
          (*(void (**)(void, uint64_t))(**((void **)v2 + 29) + 232))(*((void *)v2 + 29), 1);
          BlueFin::GlMeSrdGeofenceMgr::AskForState(v2);
          unint64_t result = 0;
          *((unsigned char *)v2 + 73BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
          return result;
        case 4u:
          (*(void (**)(void, uint64_t))(**((void **)v2 + 29) + 232))(*((void *)v2 + 29), 2);
          return 0;
        case 8u:
          char v31 = *(void (**)(void))(**((void **)v2 + 29) + 232);
LABEL_157:
          v31();
          goto LABEL_158;
        default:
          BOOL v133 = "0";
          DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 428, "hostsleep", (char)"0");
          int v134 = 428;
          goto LABEL_173;
      }
    case ':':
LABEL_158:
      BlueFin::GlMeSrdGeofenceMgr::AskForState(v2);
      return 0;
    default:
      if (v3 != 13) {
        return BlueFin::GlMeSrdGeofenceMgr::running;
      }
      int v30 = a2[1];
      if (!a2[1]) {
        goto LABEL_68;
      }
      if (v30 != 2)
      {
        if (v30 != 1) {
          return 0;
        }
        goto LABEL_46;
      }
      *((unsigned char *)v2 + 73BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      if (!*((unsigned char *)v2 + 727)) {
        return 0;
      }
      unint64_t result = 0;
      *((unsigned char *)v2 + 727) = 0;
      return result;
  }
}

void sub_263A87DBC(_Unwind_Exception *a1)
{
}

void BlueFin::GlMeSrdGeofenceMgr::AskForState(BlueFin::GlMeSrdGeofenceMgr *this)
{
  if (!*((unsigned char *)this + 728))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 25) + 80))(*((void *)this + 25));
    v5[0] = BlueFin::GlMeSrdGeofenceMgr::OnReliableTransactionAck;
    v5[1] = this;
    __int16 v6 = 257;
    char v7 = 0;
    uint64_t v8 = v2;
    int v9 = 0;
    __int16 v10 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 25) + 208))(*((void *)this + 25));
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 88))(v4, v5);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v5);
    *((unsigned char *)this + 728) = 1;
    *((void *)this + 23) = this;
    BlueFin::GlTimer::arm((BlueFin::GlMeSrdGeofenceMgr *)((char *)this + 152), 5, 1, 0x7D0u);
    *((unsigned char *)this + 176) = 1;
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v5);
  }
}

void sub_263A87FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdGeofenceMgr::GetDefaultGeofenceMode(uint64_t a1, char *a2, uint64_t a3)
{
  *((void *)a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
  *a2 = 1;
  char v33 = 0;
  int v31 = -1;
  int v32 = -1;
  int v29 = -1;
  int v30 = -1;
  int v28 = -1;
  char v27 = 0;
  (*(void (**)(void, char *, int *, int *, int *, int *, int *, char *))(**(void **)(a1 + 240) + 112))(*(void *)(a1 + 240), &v33, &v32, &v31, &v30, &v29, &v28, &v27);
  unsigned int v6 = v32;
  if (v32 < 0)
  {
    unsigned int v6 = 6;
    int v32 = 6;
  }
  unsigned int v7 = v31;
  if (v31 < 0)
  {
    unsigned int v7 = 60;
    int v31 = 60;
  }
  unsigned int v8 = v30;
  if (v30 < 0)
  {
    unsigned int v8 = 180;
    int v30 = 180;
  }
  int v9 = v29;
  if (v29 < 0)
  {
    int v9 = 30;
    int v29 = 30;
  }
  int v10 = v28;
  if (v28 < 0)
  {
    int v10 = 50;
    int v28 = 50;
  }
  if (v6 >= 0xFFFF)
  {
    int v25 = "lOnTimeSec < 0xFFFF";
    DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1099, "GetDefaultGeofenceMode", (char)"lOnTimeSec < 0xFFFF");
    int v26 = 1099;
    goto LABEL_59;
  }
  if (v7 > v8)
  {
    int v25 = "lMinOffTimeSec <= lMaxOffTimeSec";
    DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1100, "GetDefaultGeofenceMode", (char)"lMinOffTimeSec <= lMaxOffTimeSec");
    int v26 = 1100;
    goto LABEL_59;
  }
  if (v8 >= 0xFFFF)
  {
    int v25 = "lMaxOffTimeSec < 0xFFFF";
    DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1101, "GetDefaultGeofenceMode", (char)"lMaxOffTimeSec < 0xFFFF");
    int v26 = 1101;
    goto LABEL_59;
  }
  double v11 = (double)v10 / 299792458.0;
  double v12 = v11 * 1000000000.0;
  if ((int)(v11 * 1000000000.0) >= 0xFFFF)
  {
    int v25 = "(GlIntS32)(lHysterisM / SPEED_OF_LIGHT * 1e9)<0xFFFF";
    DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1102, "GetDefaultGeofenceMode", (char)"(GlIntS32)(lHysterisM / SPEED_OF_LIGHT * 1e9)<0xFFFF");
    int v26 = 1102;
    goto LABEL_59;
  }
  double v13 = fmod(v11 * 1000000000.0, 4294967300.0);
  if (v12 <= 4294967300.0) {
    double v13 = v12;
  }
  if (v13 < -4294967300.0) {
    double v13 = -fmod(-v13, 4294967300.0);
  }
  double v14 = (double)v9 * 3.2;
  if ((int)v14 >= 255)
  {
    int v25 = "(GlIntS32)(lUserSpeedMps *3.2)<0xFF";
    DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 1104, "GetDefaultGeofenceMode", (char)"(GlIntS32)(lUserSpeedMps *3.2)<0xFF");
    int v26 = 1104;
LABEL_59:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", v26, v25);
  }
  if (v13 < 0.0) {
    unsigned int v15 = --v13;
  }
  else {
    LOWORD(v15) = v13;
  }
  double v16 = fmod(v14, 4294967300.0);
  if (v14 <= 4294967300.0) {
    double v16 = v14;
  }
  if (v16 < -4294967300.0) {
    double v16 = -fmod(-v16, 4294967300.0);
  }
  if (v16 < 0.0) {
    unsigned int v17 = --v16;
  }
  else {
    LOBYTE(v17) = v16;
  }
  a2[1] = v6;
  *((_WORD *)a2 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v7;
  *((_WORD *)a2 + 2) = v8;
  *((_WORD *)a2 + 5) = 3;
  *((_WORD *)a2 + 6) = v15;
  a2[20] = v17;
  *((_WORD *)a2 + 12) = 0;
  *((_DWORD *)a2 + 7) = 0;
  a2[36] = 0;
  if (v33) {
    char v18 = *a2 | 8;
  }
  else {
    char v18 = *a2;
  }
  *a2 = v18 | 0x10;
  *((_DWORD *)a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 584))();
  if (v27)
  {
    *a2 |= 0x80u;
    *((_DWORD *)a2 + 8) = (*(uint64_t (**)(void))(**(void **)(a1 + 240) + 592))(*(void *)(a1 + 240));
  }
  if (a3)
  {
    double v19 = (double)(*(_DWORD *)(a3 + 4) - *(_DWORD *)a3) * 0.001;
    double v20 = fmod(v19, 4294967300.0);
    if (v19 <= 4294967300.0) {
      double v20 = v19;
    }
    if (v20 < -4294967300.0) {
      double v20 = -fmod(-v20, 4294967300.0);
    }
    if (v20 < 0.0) {
      unsigned int v21 = --v20;
    }
    else {
      LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v20;
    }
  }
  else
  {
    LOWORD(v2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 820;
  }
  *((_WORD *)a2 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v21;
  *(_WORD *)(a2 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 2048;
  a2[23] = 1;
  if (*(unsigned char *)(a1 + 713))
  {
    *((_WORD *)a2 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(_DWORD *)(a1 + 716);
    *((_WORD *)a2 + 2) = *(_DWORD *)(a1 + 720);
    a2[20] = 3 * *(unsigned char *)(a1 + 724);
  }
  if (a3)
  {
    if (*(unsigned char *)(a3 + 4574)) {
      *a2 |= 0x20u;
    }
    int v22 = *(_DWORD *)(a3 + 4544);
    if (v22)
    {
      char v23 = *a2;
      *a2 |= 4u;
      a2[6] = v22;
      int v24 = *(_DWORD *)(a3 + 4548);
      *((_WORD *)a2 + 12) = v24;
      *((_DWORD *)a2 + 7) = *(_DWORD *)(a3 + 4556);
      if (v24 == 1 || *(unsigned char *)(a3 + 4552)) {
        *a2 = v23 | 0x44;
      }
    }
  }
}

uint64_t BlueFin::GlMeSrdGeofenceMgr::GetGeoIdFromSvId(uint64_t a1, unsigned __int8 a2)
{
  if ((((unint64_t)*(unsigned int *)(*(void *)(a1 + 312) + 4 * (a2 >> 5)) >> (a2 & 0x1F)) & 1) == 0)
  {
    DeviceFaultNotify("glmesrd_geofence_mgr.cpp", 951, "GetGeoIdFromSvId", (char)"m_otSetSvIdUsed.Has(rotSvId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_geofence_mgr.cpp", 951, "m_otSetSvIdUsed.Has(rotSvId)");
  }
  return *(unsigned __int8 *)(a1 + a2 + 384);
}

uint64_t BlueFin::GlMeSrdGeofenceMgr::AreaComparator(BlueFin::GlMeSrdGeofenceMgr *this, double *a2, const void *a3)
{
  double v3 = sqrt(*((double *)this + 1) * *((double *)this + 1) + *(double *)this * *(double *)this);
  double v4 = *((double *)this + 2);
  if (v3 <= v4) {
    double v5 = v4 - v3;
  }
  else {
    double v5 = v3 - v4;
  }
  double v6 = sqrt(a2[1] * a2[1] + *a2 * *a2);
  double v7 = a2[2];
  if (v6 <= v7) {
    double v8 = v7 - v6;
  }
  else {
    double v8 = v6 - v7;
  }
  if (v8 > v5) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v8 < v5;
  }
}

void BlueFin::GlMeSrdRpcGeoRpt::~GlMeSrdRpcGeoRpt(BlueFin::GlMeSrdRpcGeoRpt *this)
{
}

void BlueFin::GlMeSrdGeofenceIfcImpl::~GlMeSrdGeofenceIfcImpl(BlueFin::GlMeSrdGeofenceIfcImpl *this)
{
}

void BlueFin::GlMeSrdTransCbStub::~GlMeSrdTransCbStub(BlueFin::GlMeSrdTransCbStub *this)
{
}

uint64_t BlueFin::GlMeObjFactory::DisposeFactory(BlueFin::GlMeObjFactory *this, void (*a2)(void *))
{
  uint64_t result = BlueFin::GlMeObjFactory::m_ptObjFactory;
  if (BlueFin::GlMeObjFactory::m_ptObjFactory)
  {
    BlueFin::GlMeObjFactory::Dispose((BlueFin::GlMeObjFactory *)BlueFin::GlMeObjFactory::m_ptObjFactory);
    uint64_t result = (**(uint64_t (***)(uint64_t))BlueFin::GlMeObjFactory::m_ptObjFactory)(BlueFin::GlMeObjFactory::m_ptObjFactory);
    if (this) {
      uint64_t result = ((uint64_t (*)(uint64_t))this)(BlueFin::GlMeObjFactory::m_ptObjFactory);
    }
    BlueFin::GlMeObjFactory::m_ptObjFactory = 0;
  }
  return result;
}

uint64_t BlueFin::GlMeObjFactory::Dispose(BlueFin::GlMeObjFactory *this)
{
  uint64_t v2 = (void (***)(void))*((void *)this + 8);
  if (v2)
  {
    (**v2)(v2);
    double v3 = (void (*)(void))*((void *)this + 4);
    if (v3) {
      v3(*((void *)this + 8));
    }
    *((void *)this + 8) = 0;
  }
  if (*((void *)this + 9))
  {
    double v4 = (void (*)(void))*((void *)this + 4);
    if (v4)
    {
      v4();
      double v5 = (void (*)(void))*((void *)this + 4);
      if (v5)
      {
        v5(*((void *)this + 10));
        double v6 = (void (*)(void))*((void *)this + 4);
        if (v6) {
          v6(*((void *)this + 12));
        }
      }
    }
    *((void *)this + 12) = 0;
    *((void *)this + 9) = 0;
    *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  if (*((void *)this + 13))
  {
    double v7 = (void (*)(void))*((void *)this + 4);
    if (v7)
    {
      v7();
      double v8 = (void (*)(void))*((void *)this + 4);
      int v9 = (void *)((char *)this + 112);
      if (v8)
      {
        v8(*((void *)this + 14));
        int v10 = (void (*)(void))*((void *)this + 4);
        if (v10)
        {
          v10(*((void *)this + 16));
          double v11 = (void (*)(void))*((void *)this + 4);
          if (v11) {
            v11(*((void *)this + 15));
          }
        }
      }
    }
    else
    {
      int v9 = (void *)((char *)this + 112);
    }
    *int v9 = 0;
    v9[1] = 0;
    void v9[2] = 0;
    *((void *)this + 13) = 0;
  }
  if (*((void *)this + 21))
  {
    double v12 = (void (*)(void))*((void *)this + 4);
    if (v12)
    {
      v12();
      double v13 = (void (*)(void))*((void *)this + 4);
      double v14 = (void *)((char *)this + 176);
      if (v13)
      {
        v13(*((void *)this + 22));
        unsigned int v15 = (void (*)(void))*((void *)this + 4);
        if (v15)
        {
          v15(*((void *)this + 24));
          double v16 = (void (*)(void))*((void *)this + 4);
          if (v16) {
            v16(*((void *)this + 23));
          }
        }
      }
    }
    else
    {
      double v14 = (void *)((char *)this + 176);
    }
    *double v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
    *((void *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  }
  if (*((void *)this + 25))
  {
    unsigned int v17 = (void (*)(void))*((void *)this + 4);
    if (v17)
    {
      v17();
      char v18 = (void (*)(void))*((void *)this + 4);
      double v19 = (void *)((char *)this + 208);
      if (v18)
      {
        v18(*((void *)this + 26));
        double v20 = (void (*)(void))*((void *)this + 4);
        if (v20)
        {
          v20(*((void *)this + 28));
          unsigned int v21 = (void (*)(void))*((void *)this + 4);
          if (v21) {
            v21(*((void *)this + 27));
          }
        }
      }
    }
    else
    {
      double v19 = (void *)((char *)this + 208);
    }
    *double v19 = 0;
    v19[1] = 0;
    void v19[2] = 0;
    *((void *)this + 25) = 0;
  }
  if (*((void *)this + 29))
  {
    int v22 = (void (*)(void))*((void *)this + 4);
    if (v22)
    {
      v22();
      char v23 = (void (*)(void))*((void *)this + 4);
      int v24 = (void *)((char *)this + 240);
      if (v23)
      {
        v23(*((void *)this + 30));
        int v25 = (void (*)(void))*((void *)this + 4);
        if (v25)
        {
          v25(*((void *)this + 32));
          int v26 = (void (*)(void))*((void *)this + 4);
          if (v26) {
            v26(*((void *)this + 31));
          }
        }
      }
    }
    else
    {
      int v24 = (void *)((char *)this + 240);
    }
    *int v24 = 0;
    v24[1] = 0;
    void v24[2] = 0;
    *((void *)this + 29) = 0;
  }
  if (*((void *)this + 33))
  {
    char v27 = (void (*)(void))*((void *)this + 4);
    if (v27)
    {
      v27();
      int v28 = (void (*)(void))*((void *)this + 4);
      int v29 = (void *)((char *)this + 272);
      if (v28)
      {
        v28(*((void *)this + 34));
        int v30 = (void (*)(void))*((void *)this + 4);
        if (v30)
        {
          v30(*((void *)this + 36));
          int v31 = (void (*)(void))*((void *)this + 4);
          if (v31) {
            v31(*((void *)this + 35));
          }
        }
      }
    }
    else
    {
      int v29 = (void *)((char *)this + 272);
    }
    *int v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
    *((void *)this + 33) = 0;
  }
  if (*((void *)this + 37))
  {
    int v32 = (void (*)(void))*((void *)this + 4);
    if (v32)
    {
      v32();
      char v33 = (void (*)(void))*((void *)this + 4);
      uint64_t v34 = (void *)((char *)this + 304);
      if (v33)
      {
        v33(*((void *)this + 38));
        uint64_t v35 = (void (*)(void))*((void *)this + 4);
        if (v35)
        {
          v35(*((void *)this + 40));
          unsigned __int8 v36 = (void (*)(void))*((void *)this + 4);
          if (v36) {
            v36(*((void *)this + 39));
          }
        }
      }
    }
    else
    {
      uint64_t v34 = (void *)((char *)this + 304);
    }
    *uint64_t v34 = 0;
    v34[1] = 0;
    char v34[2] = 0;
    *((void *)this + 37) = 0;
  }
  if (*((void *)this + 41))
  {
    uint64_t v37 = (void (*)(void))*((void *)this + 4);
    if (v37)
    {
      v37();
      uint64_t v38 = (void (*)(void))*((void *)this + 4);
      if (v38)
      {
        v38(*((void *)this + 42));
        unsigned int v39 = (void (*)(void))*((void *)this + 4);
        if (v39) {
          v39(*((void *)this + 44));
        }
      }
    }
    *((void *)this + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    *((void *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((void *)this + 42) = 0;
  }
  uint64_t result = *((void *)this + 17);
  if (result)
  {
    double v41 = (uint64_t (*)(void))*((void *)this + 4);
    if (v41)
    {
      uint64_t result = v41();
      double v42 = (uint64_t (*)(void))*((void *)this + 4);
      double v43 = (void *)((char *)this + 144);
      if (v42)
      {
        uint64_t result = v42(*((void *)this + 18));
        double v44 = (uint64_t (*)(void))*((void *)this + 4);
        if (v44)
        {
          uint64_t result = v44(*((void *)this + 20));
          int v45 = (uint64_t (*)(void))*((void *)this + 4);
          if (v45) {
            uint64_t result = v45(*((void *)this + 19));
          }
        }
      }
    }
    else
    {
      double v43 = (void *)((char *)this + 144);
    }
    void *v43 = 0;
    v43[1] = 0;
    v43[2] = 0;
    *((void *)this + 17) = 0;
  }
  return result;
}

void BlueFin::GlMeObjFactory::~GlMeObjFactory(BlueFin::GlMeObjFactory *this)
{
}

void BlueFin::GlEmptyArray::~GlEmptyArray(BlueFin::GlEmptyArray *this)
{
}

uint64_t BlueFin::GlEmptyArray::Get(BlueFin::GlEmptyArray *this)
{
  return 0;
}

uint64_t BlueFin::GlEmptyArray::Add(BlueFin::GlEmptyArray *this)
{
  return 0;
}

uint64_t BlueFin::GlEmptyArray::Has(BlueFin::GlEmptyArray *this)
{
  return 0;
}

uint64_t BlueFin::GlEmptyArray::Missing(BlueFin::GlEmptyArray *this)
{
  return 1;
}

uint64_t BlueFin::GlEmptyArray::IsEmpty(BlueFin::GlEmptyArray *this)
{
  return 1;
}

uint64_t BlueFin::GlEmptyArray::IsFull(BlueFin::GlEmptyArray *this)
{
  return 1;
}

uint64_t BlueFin::GlEmptyArray::Count(BlueFin::GlEmptyArray *this)
{
  return 0;
}

uint64_t BlueFin::GlEmptyArray::Iterator@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = this;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(this + 39) + 1;
  return this;
}

void BlueFin::GlMeSrdReceiverParameters::~GlMeSrdReceiverParameters(BlueFin::GlMeSrdReceiverParameters *this)
{
  *(void *)this = &unk_270EBCE38;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
}

{
  *(void *)this = &unk_270EBCE38;
  *((void *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  JUMPOUT(0x263E6DD80);
}

void BlueFin::GlDineCtrl::~GlDineCtrl(BlueFin::GlDineCtrl *this)
{
  *(void *)this = &unk_270EBCA50;
  (*(void (**)(char *))(*((void *)this + 6203) + 8))((char *)this + 49624);
  (*(void (**)(char *, char *))(*((void *)this + 4024) + 112))((char *)this + 32192, (char *)this + 29648);
  GlCustomLog(14, "PacketMgr:: TxUsage(%hu/%u), ReliableTxUsage(%hu/%u), RxUsage(%hu/%u), RxReliableElements(%hu/%u)\n", *((unsigned __int16 *)this + 19438), 2258, *((unsigned __int16 *)this + 19439), 7168, *((unsigned __int16 *)this + 19440), 4096, *((unsigned __int16 *)this + 19441), 30);
  BlueFin::GlMeSrdStats::~GlMeSrdStats((BlueFin::GlDineCtrl *)((char *)this + 120096), v2);
  BlueFin::GlMeSrdSatReportMgr::~GlMeSrdSatReportMgr((BlueFin::GlDineCtrl *)((char *)this + 116384));
  *((void *)this + 13732) = &unk_270EBD590;
  BlueFin::GlMeSrdCtrlSm::~GlMeSrdCtrlSm((BlueFin::GlDineCtrl *)((char *)this + 75168));
  BlueFin::GlMeSrdGeofenceMgr::~GlMeSrdGeofenceMgr((BlueFin::GlDineCtrl *)((char *)this + 74432));
  BlueFin::GlMeSrdAcqMgrSm::~GlMeSrdAcqMgrSm((BlueFin::GlDineCtrl *)((char *)this + 49536));
  BlueFin::GlMeSrdTransactionManager::~GlMeSrdTransactionManager((BlueFin::GlDineCtrl *)((char *)this + 32192));
  *((void *)this + 3989) = &unk_270EBCE38;
  *((void *)this + 399BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = &unk_270EBE910;
  *((void *)this + 8) = &unk_270EBF4B0;
  *((void *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBF420;
}

{
  uint64_t vars8;

  BlueFin::GlDineCtrl::~GlDineCtrl(this);

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlDineCtrl::Dispose(BlueFin::GlDineCtrl *this, BlueFin::GlMeObjFactory *a2)
{
  return BlueFin::GlMeObjFactory::DisposeFactory(a2, (void (*)(void *))a2);
}

uint64_t BlueFin::GlDineCtrl::SetCntInClockParams(uint64_t this, int a2, __int16 a3, __int16 a4)
{
  *(_DWORD *)(this + 29728) = a2;
  *(_WORD *)(this + 29732) = a3;
  *(_WORD *)(this + 2973bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a4;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetDutyCycleMinMaxBlockParams(BlueFin::GlDineCtrl *this, int a2, unsigned int a3, unsigned int a4)
{
  double v4 = (char *)this + 30848;
  if (a3 && a2)
  {
    char v5 = a4;
    if (a4) {
      BOOL v6 = a4 >= a3;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      int v7 = a3;
    }
    else {
      int v7 = a4;
    }
    uint64_t result = GlCustomLog(14, "GlDineCtrl::SettingDutyCycleBlockParams On the fly API (Min %d,Max %d)\n", v7, a4);
  }
  else
  {
    char v5 = 5;
    LOBYTE(v7) = 3;
    uint64_t result = GlCustomLog(14, "GlDineCtrl::SettingDutyCycleBlockParams back to defaults(Min %d,Max %d)\n", 3, 5);
  }
  *double v4 = 1;
  v4[1] = v7;
  unint64_t v4[2] = v5;
  *(_WORD *)(v4 + 3) = 6408;
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetMeasurementInterval(BlueFin::GlDineCtrl *this, int a2, unsigned int a3, unsigned int a4)
{
  if (a2)
  {
    if (a3 <= 1) {
      int v5 = 1;
    }
    else {
      int v5 = a3;
    }
    if (a4 <= 1) {
      int v6 = 1;
    }
    else {
      int v6 = a4;
    }
    GlCustomLog(14, "GlDineCtrl::SetMeasurementInterval on the fly API (MI %d,DCMI %d)\n", v5, v6);
    unsigned __int16 v7 = 1000 * v5;
    unsigned __int16 v8 = 1000 * v6;
  }
  else
  {
    GlCustomLog(14, "GlDineCtrl::SetMeasurementInterval back to defaults (MI %d,DCMI %d)\n", 1, 1);
    unsigned __int16 v7 = 1000;
    unsigned __int16 v8 = 1000;
  }

  return BlueFin::GlMeSrdCtrlSm::SetMeasurementIntervalMs((uint64_t)this + 75168, v7, v8);
}

uint64_t BlueFin::GlDineCtrl::LimitRfOnTimeFromAPI(BlueFin::GlDineCtrl *this, int a2, int a3)
{
  __int16 v3 = a3;
  uint64_t v6 = 70;
  if (a2) {
    uint64_t v6 = 84;
  }
  uint64_t result = GlCustomLog(14, "GlDineCtrl::LimitRfOnTimeFromAPI. Set Limit %c, RF ON Time %d\n", v6, a3);
  if (*((unsigned char *)this + 75387))
  {
    return BlueFin::GlMeSrdMeasTimingMgr::SetLimitMaxRfOnTime((BlueFin::GlDineCtrl *)((char *)this + 78240), a2, v3);
  }
  else
  {
    *((unsigned char *)this + 109686) = 1;
    *((unsigned char *)this + 109687) = a2;
    *((_WORD *)this + 5484bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  }
  return result;
}

void BlueFin::GlDineCtrl::ComDacData(BlueFin::GlDineCtrl *this, char *a2, int a3)
{
  if (a3 < 1)
  {
    DeviceFaultNotify("glmesrd_dinectrl.cpp", 358, "ComDacData", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dinectrl.cpp", 358, "0");
  }
  double v4 = (BlueFin::GlDineCtrl *)((char *)this + 32192);
  BlueFin::GlMeSrdTransactionManager::SetDacData(v4, a2, (unsigned __int16)a3);
}

uint64_t BlueFin::GlDineCtrl::ChipData_GRABSNQ_612249(BlueFin::GlDineCtrl *this, unsigned __int8 *a2, int a3)
{
  if ((a3 - 1) > 0x10B)
  {
    DeviceFaultNotify("glmesrd_dinectrl.cpp", 371, "ChipData_GRABSNQ_612249", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dinectrl.cpp", 371, "false");
  }
  double v4 = (BlueFin::GlDineCtrl *)((char *)this + 75168);
  return BlueFin::GlMeSrdCtrlSm::SetAsicData(v4, a2, (unsigned __int16)a3);
}

unint64_t BlueFin::GlDineCtrl::LoadEswPatch(BlueFin::GlDineCtrl *this)
{
  GlCustomLog(14, "LoadEswPatch::GLL @%u\n", 612249);
  GlCustomLog(14, "GlDineCtrl::LoadEswPatch()\n");

  return BlueFin::GlMeSrdCtrlSm::LoadEswPatch((BlueFin::GlDineCtrl *)((char *)this + 75168));
}

uint64_t BlueFin::GlDineCtrl::AsicToStandby(BlueFin::GlDineCtrl *this)
{
  GlCustomLog(14, "GlDineCtrl::AsicToStandby()\n");

  return BlueFin::GlQueue::putFIFO((BlueFin::GlDineCtrl *)((char *)this + 75208), 25, 0);
}

void BlueFin::GlDineCtrl::SetPpsAiding(BlueFin::GlDineCtrl *this, int a2, double a3, double a4)
{
  double v4 = -a3;
  if (a3 >= 0.0) {
    double v4 = a3;
  }
  if (v4 < 1000.0) {
    BlueFin::GlMeSrdCtrlSm::SetPpsAiding((BlueFin::GlDineCtrl *)((char *)this + 75168), a2, a3, a4);
  }
}

uint64_t BlueFin::GlDineCtrl::SetTowAssist(BlueFin::GlDineCtrl *this, const BlueFin::GlTowAsstData *a2)
{
  GlCustomLog(14, "GlDineCtrl::SetTowAssist\n");
  uint64_t v3 = *(uint64_t (**)(void))(*((void *)this + 14557) + 16);

  return v3();
}

unint64_t BlueFin::GlDineCtrl::SetMeasurementPeriodCorrection(BlueFin::GlDineCtrl *this, int a2)
{
  GlCustomLog(14, "GlDineCtrl::SetMeasurementPeriodCorrection(%d)\n", a2);

  return BlueFin::GlMeSrdCtrlSm::SetMeasurementPeriodCorrection((unint64_t)this + 75168, a2);
}

void BlueFin::GlDineCtrl::DataBurstCtrl(BlueFin::GlDineCtrl *this, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  if ((a2 & 1) == 0) {
    GlCustomLog(14, "GlDineCtrl::DataBurstCtrl(%s, %d, %d, 0x%02X, 0x%02X, %d, %d)\n", "OFF", a3, a4, a5, a6, a7, a8);
  }

  BlueFin::GlMeSrdCtrlSm::DataBurstCtrl((BlueFin::GlDineCtrl *)((char *)this + 75168), a2, a3, a4, a5, a6, a7, a8);
}

unsigned char *BlueFin::GlDineCtrl::Set1HzPhaseMs(BlueFin::GlDineCtrl *this, double a2)
{
  GlCustomLog(14, "GlDineCtrl::Set1HzPhaseMs(%f)\n", a2);

  return BlueFin::GlMeSrdCtrlSm::Set1HzPhaseMs((unsigned char *)this + 75168, a2);
}

void BlueFin::GlDineCtrl::SaveNvRamAndRtc(BlueFin::GlDineCtrl *this, unsigned int a2, unsigned int *a3, int a4)
{
  unsigned __int16 v8 = (const char *)&unk_263B6E70D;
  if (a4) {
    unsigned __int16 v8 = ", Invalidate NvRam!";
  }
  GlCustomLog(14, "GlDineCtrl::SaveNvRamAndRtc(%u, %u, %u, %u %s)\n", a2, *a3, a3[1], a3[2], v8);

  BlueFin::GlMeSrdCtrlSm::SaveNvRamAndRtc((BlueFin::GlDineCtrl *)((char *)this + 75168), a2, a3, a4);
}

unsigned char *BlueFin::GlDineCtrl::MeasureCNTIN(BlueFin::GlDineCtrl *this, int a2)
{
  uint64_t v4 = 70;
  if (a2) {
    uint64_t v4 = 84;
  }
  GlCustomLog(14, "GlDineCtrl::MeasureCNTIN(%c)\n", v4);

  return BlueFin::GlMeSrdCtrlSm::MeasureCNTIN((unsigned char *)this + 75168, a2);
}

uint64_t BlueFin::GlDineCtrl::SetFineTimeRequested(uint64_t this, char a2)
{
  *(unsigned char *)(this + 7420BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetMeasConfig(uint64_t a1, unsigned __int16 *a2)
{
  GlCustomLog(14, "GlDineCtrl::SetMeasConfig(%u)\n", *a2);
  unsigned int v4 = *a2;

  return BlueFin::GlMeSrdCtrlSm::SetMeasurementIntervalMs(a1 + 75168, v4, v4);
}

uint64_t BlueFin::GlDineCtrl::SetDutyCycleParams(BlueFin::GlDineCtrl *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  char v7 = a7;
  char v8 = a6;
  double v13 = (char *)this + 30848;
  uint64_t result = GlCustomLog(14, "GlDineCtrl::SetDutyCycleParams %hu %hu\n", a6, a7);
  *((_WORD *)v13 + 15) = 257;
  unsigned char v13[32] = v8;
  *double v13 = 1;
  v13[1] = v7;
  void v13[2] = v7;
  v13[8] = 1;
  *((_DWORD *)v13 + 3) = a2;
  *((_DWORD *)v13 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  *((_DWORD *)v13 + 5) = a4;
  *((_DWORD *)v13 + 6) = a5;
  return result;
}

uint64_t BlueFin::GlDineCtrl::CWTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned char *a7, int a8, double a9, double a10, char a11, unsigned char *a12, unsigned char *a13)
{
  return BlueFin::GlMeSrdCtrlSm::CWTest(a1 + 75168, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t BlueFin::GlDineCtrl::SetGeofenceMode(BlueFin::GlDineCtrl *this, int a2)
{
  char v2 = a2;
  unsigned int v4 = "Disabled";
  if (a2)
  {
    unsigned int v4 = "Enabled";
    int v5 = (char *)this + 49752;
  }
  else
  {
    int v5 = (char *)this + 49736;
  }
  GlCustomLog(14, "GlDineCtrl::SetGeofenceMode(%s)\n", v4);
  uint64_t result = BlueFin::GlMeSrdCtrlSm::SetGeofenceMode((BlueFin::GlDineCtrl *)((char *)this + 75168), v2);
  *((void *)this + 1453BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v5;
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetGeofenceData(uint64_t a1)
{
  GlCustomLog(14, "GlDineCtrl::SetGeofenceData()\n");

  return BlueFin::GlMeSrdCtrlSm::SetGeofenceData(a1 + 75168);
}

uint64_t BlueFin::GlDineCtrl::SetGeofenceSettings(BlueFin::GlDineCtrl *this, int a2)
{
  GlCustomLog(14, "GlDineCtrl::SetGeofenceSettings(%d)\n", a2);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 9420) + 40);

  return v3();
}

uint64_t BlueFin::GlDineCtrl::GetGeofenceState(BlueFin::GlDineCtrl *this)
{
  GlCustomLog(14, "GlDineCtrl::GetGeofenceState()\n");

  return BlueFin::GlMeSrdCtrlSm::GetGeofenceState((BlueFin::GlDineCtrl *)((char *)this + 75168));
}

uint64_t BlueFin::GlDineCtrl::SetLowGainAntenna(BlueFin::GlDineCtrl *this, int a2)
{
  *((unsigned char *)this + 3128bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  char v2 = "false";
  if (a2) {
    char v2 = "true";
  }
  return GlCustomLog(14, "GlDineCtrl::SetLowGainAntenna Setting Low Gain Antenna Mode to %s\n", v2);
}

uint64_t BlueFin::GlDineCtrl::SetGlitchRecoveryEnable(BlueFin::GlDineCtrl *this, int a2)
{
  *((unsigned char *)this + 3023BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  char v2 = "Disabled";
  if (a2) {
    char v2 = "Enabled";
  }
  return GlCustomLog(14, "GlDineCtrl::SetGlitchRecoveryEnable is %s \n", v2);
}

uint64_t BlueFin::GlDineCtrl::SetRtcDutyCycleEnable(BlueFin::GlDineCtrl *this, int a2)
{
  *((unsigned char *)this + 3023BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
  char v2 = "Disabled";
  if (a2) {
    char v2 = "Enabled";
  }
  return GlCustomLog(14, "GlDineCtrl::SetRtcDutyCycleEnable is %s \n", v2);
}

uint64_t BlueFin::GlDineCtrl::SetPpsSyncInMode(BlueFin::GlDineCtrl *this, int a2)
{
  *((unsigned char *)this + 31808) = a2;
  unsigned int v4 = "Disabled";
  if (a2) {
    unsigned int v4 = "Enabled";
  }
  uint64_t result = GlCustomLog(14, "GlDineCtrl::SetPpsSyncInMode is %s \n", v4);
  if (a2)
  {
    uint64_t v6 = *(uint64_t (**)(BlueFin::GlDineCtrl *, uint64_t))(*(void *)this + 792);
    return v6(this, 1);
  }
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetL5ExtBias(BlueFin::GlDineCtrl *this, float a2)
{
  uint64_t result = BlueFin::GlMeSrdAsicConfig::IsMinnowAsicType((BlueFin::GlDineCtrl *)((char *)this + 29672));
  if ((result & 1) == 0)
  {
    *((float *)this + 7503) = a2;
    *((unsigned char *)this + 2994BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    return GlCustomLog(14, "GlDineCtrl::SetL5ExtBias(m) is %f \n", a2);
  }
  return result;
}

uint64_t BlueFin::GlDineCtrl::SetPpsParam(uint64_t this, char a2, char a3, int a4, int a5, int a6)
{
  *(unsigned char *)(this + 30332) = a2;
  *(unsigned char *)(this + 30333) = a3;
  *(_DWORD *)(this + 30336) = a4;
  *(_DWORD *)(this + 3034BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a5;
  *(_DWORD *)(this + 3034bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a6;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetBdsSignalType(BlueFin::GlDineCtrl *this, const unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 63; ++i)
    *((unsigned char *)this + i + 30269) = a2[i];
  return GlCustomLog(14, "GlDineCtrl::SetBdsSignalType()\n");
}

uint64_t BlueFin::GlDineCtrl::SetGpsSignalType(BlueFin::GlDineCtrl *this, const unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 32; ++i)
    *((unsigned char *)this + i + 30237) = a2[i];
  return GlCustomLog(14, "GlDineCtrl::SetGpsSignalType()\n");
}

uint64_t BlueFin::GlDineCtrl::SetHighPwrCwTestEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 30226) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::SetCwTestEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 30233) = a2;
  return this;
}

void BlueFin::GlDineCtrl::GetDbgRxparams(BlueFin::GlDineCtrl *this)
{
}

void BlueFin::GlDineCtrl::SetReceiverParameters()
{
}

void BlueFin::GlDineCtrl::SendAsicVersion(BlueFin::GlDineCtrl *this)
{
}

void BlueFin::GlDineCtrl::ToggleHostWakeConfigure(BlueFin::GlDineCtrl *this, int a2)
{
}

void BlueFin::GlDineCtrl::ToggleCoexConfigure(BlueFin::GlDineCtrl *this)
{
}

void BlueFin::GlDineCtrl::ToggleCoexGpio(BlueFin::GlDineCtrl *this, uint64_t a2)
{
}

uint64_t BlueFin::GlDineCtrl::SetMeasIntMsForFactPlatformTest(BlueFin::GlDineCtrl *this, int a2)
{
  (*(void (**)(void))(**((void **)this + 9419) + 48))(*((void *)this + 9419));

  return BlueFin::GlMeSrdMeasTimingMgr::SetReportingInterval((BlueFin::GlDineCtrl *)((char *)this + 78240), a2);
}

uint64_t BlueFin::GlDineCtrl::SetSearch3G(uint64_t this, unsigned __int8 *a2)
{
  for (uint64_t i = 0; i != 3; ++i)
    *(unsigned char *)(this + 74155 + i) = a2[i];
  return this;
}

__n128 BlueFin::GlDineCtrl::SetSpoofCarrierThresh(uint64_t a1, uint64_t a2)
{
  GlCustomLog(14, "GlDineCtrl::SetSpoofCarrierThresh()\n");
  if (*(_WORD *)a2)
  {
    __n128 result = *(__n128 *)(a2 + 4);
    *(void *)(a1 + 12164bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(void *)(a2 + 20);
    *(__n128 *)(a1 + 121628) = result;
    *(_WORD *)(a1 + 12162bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  }
  return result;
}

uint64_t BlueFin::GlDineCtrl::EnableScanGrids(BlueFin::GlDineCtrl *this, int a2)
{
  char v2 = "Disabled";
  if (a2) {
    char v2 = "Enabled";
  }
  return GlCustomLog(14, "GlDineCtrl::EnableScanGrids is %s \n", v2);
}

unint64_t BlueFin::GlDineCtrl::GetRadioRegisters(BlueFin::GlDineCtrl *this, unsigned int *a2)
{
  BlueFin::GlMeSrdAsicConfig::SetRadioRegistersAddr((BlueFin::GlDineCtrl *)((char *)this + 29672), a2);

  return BlueFin::GlMeSrdCtrlSm::GetRadioRegisters((BlueFin::GlDineCtrl *)((char *)this + 75168));
}

BlueFin::GlFormat *BlueFin::GlDineCtrl::RequestDump(BlueFin::GlMeSrdStats **this, BlueFin::GlFormat *a2, int a3)
{
  return BlueFin::GlMeSrdCtrlSm::RequestDump(this + 9396, a2, a3);
}

uint64_t BlueFin::GlDineCtrl::SetEswDynPwrControl(uint64_t this, char a2)
{
  *(unsigned char *)(this + 30229) = a2;
  return this;
}

unint64_t BlueFin::GlDineCtrl::GetAdcCapture(BlueFin::GlDineCtrl *this)
{
  return BlueFin::GlMeSrdCtrlSm::GetAdcCapture((BlueFin::GlDineCtrl *)((char *)this + 75168));
}

uint64_t BlueFin::GlDineCtrl::SetEnableCoex(uint64_t this, char a2)
{
  *(unsigned char *)(this + 31889) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::EnableB1CSearch(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3189BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  return this;
}

uint64_t BlueFin::GlDineCtrl::EnableBdsPriority(uint64_t this, char a2)
{
  *(unsigned char *)(this + 3189BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = a2;
  return this;
}

__n128 BlueFin::GlDineCtrl::EnableIqDump(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = BlueFin::GlSetBase::operator=(a1 + 31680, a2);
  __n128 result = *(__n128 *)(a2 + 12);
  *(_OWORD *)(v3 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)(v3 + 12) = result;
  return result;
}

unint64_t BlueFin::GlMeSrdRpcUtils::gll_utils_rpc_assert(BlueFin::GlMeSrdRpcUtils *this, unsigned __int8 a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!a3 || !*a3) {
    a3 = "unknown";
  }
  BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v11, (char *)0x80, "%s args(%hlu %hlu %hlu)", a4, a3, a5, a6, a7);
  return BlueFin::GlMeSrdCtrlSm::Assert((BlueFin::GlMeSrdCtrlSm *)(*((void *)this + 1) + 75168), v11, (uint64_t)a4, v9);
}

uint64_t BlueFin::GlMeSrdTransportCallback::CommunicationDead(BlueFin::GlMeSrdTransportCallback *this)
{
  return BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)(*((void *)this + 1) + 75208), 38, 0);
}

__n128 BlueFin::GlDineCtrl::PlatformTest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 75386;
  GlCustomLog(14, "GlDineCtrl::PlatformTest() \n");
  *(unsigned char *)uint64_t v4 = 1;
  *(_DWORD *)(v4 + 5bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 4);
  *(void *)(a1 + 7546BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 20);
  *(__n128 *)(a1 + 7544bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  return result;
}

void BlueFin::GlMeSrdTransportCallback::~GlMeSrdTransportCallback(BlueFin::GlMeSrdTransportCallback *this)
{
}

void BlueFin::GlMeSrdRpcUtils::~GlMeSrdRpcUtils(BlueFin::GlMeSrdRpcUtils *this)
{
}

uint64_t BlueFin::GlMeReceiverParametersIfc::GetRootGearIdFromSignalIdAndMode(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = BlueFin::GlMeReceiverParametersIfc::SvIdToCnstl(a2);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96);

  return v6(a1, v5, a3);
}

uint64_t BlueFin::GlMeReceiverParametersIfc::GetAllModesTrkParamsFromSvId(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = BlueFin::GlMeReceiverParametersIfc::SvIdToCnstl(a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152);

  return v4(a1, v3);
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetModeTrkParamsFromCnstlAndMode(BlueFin::GlMeSrdReceiverParameters *a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(a1) + 192);

  return v1();
}

uint64_t BlueFin::GlMeSrdReceiverParameters::GetNumGearIds(BlueFin::GlMeSrdReceiverParameters *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)BlueFin::GlMeSrdReceiverParameters::rRxIfc(this) + 216);

  return v1();
}

uint64_t BlueFin::GlMeReceiverParametersIfc::SvIdToCnstl(unsigned __int8 *a1)
{
  uint64_t result = 0;
  uint64_t v3 = *a1;
  switch(BlueFin::GlSvId::s_aucSvId2gnss[v3])
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
      uint64_t result = 1;
      break;
    case 4:
      if ((v3 + 122) >= 5u && (v3 - 76) >= 5u) {
        uint64_t result = 3;
      }
      else {
        uint64_t result = 2;
      }
      break;
    case 5:
      uint64_t result = 4;
      break;
    case 6:
      uint64_t result = 5;
      break;
    default:
      return result;
  }
  return result;
}

void BlueFin::GlMeSrdCorrvecAccumulatorArrays::~GlMeSrdCorrvecAccumulatorArrays(BlueFin::GlMeSrdCorrvecAccumulatorArrays *this)
{
}

uint64_t BlueFin::GlMeSrdCorrvecAccumulatorArrays::CorrVecArray(BlueFin::GlMeSrdCorrvecAccumulatorArrays *this)
{
  return *((void *)this + 54);
}

float BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf(BlueFin::GlMeSrdBitHistBuf *this, float *a2, const unsigned __int8 *a3, const unsigned int *a4)
{
  *(unsigned char *)this = 0;
  float result = 0.0;
  *(_OWORD *)((char *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(void *)((char *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  uint64_t v5 = *a3;
  if (v5 >= 0x1A)
  {
    DeviceFaultNotify("glmesrd_bithistbuf.cpp", 57, "GlMeSrdBitHistBuf", (char)"rucNbHistBins <= MAX_NB_OF_HIST_BINS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bithistbuf.cpp", 57, "rucNbHistBins <= MAX_NB_OF_HIST_BINS");
  }
  *(unsigned char *)this = v5;
  *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *a4;
  if (v5)
  {
    uint64_t v6 = (float *)((char *)this + 8);
    do
    {
      float v7 = *a2++;
      float result = v7;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

float BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf(BlueFin::GlMeSrdBitHistBuf *this, unsigned int *a2, const unsigned __int8 *a3, const unsigned int *a4)
{
  *(unsigned char *)this = 0;
  float result = 0.0;
  *(_OWORD *)((char *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)((char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *(_OWORD *)((char *)this + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(void *)((char *)this + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  uint64_t v5 = *a3;
  if (v5 >= 0x1A)
  {
    DeviceFaultNotify("glmesrd_bithistbuf.cpp", 68, "GlMeSrdBitHistBuf", (char)"rucNbHistBins <= MAX_NB_OF_HIST_BINS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bithistbuf.cpp", 68, "rucNbHistBins <= MAX_NB_OF_HIST_BINS");
  }
  *(unsigned char *)this = v5;
  *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *a4;
  if (v5)
  {
    uint64_t v6 = (float *)((char *)this + 8);
    do
    {
      unsigned int v7 = *a2++;
      float result = (float)v7;
      *v6++ = (float)v7;
      --v5;
    }
    while (v5);
  }
  return result;
}

float BlueFin::GlMeSrdBitHistBuf::operator=(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  if (v2 >= 0x1A)
  {
    DeviceFaultNotify("glmesrd_bithistbuf.cpp", 79, "operator=", (char)"rhs.m_ucNbHistBins <= MAX_NB_OF_HIST_BINS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bithistbuf.cpp", 79, "rhs.m_ucNbHistBins <= MAX_NB_OF_HIST_BINS");
  }
  *(unsigned char *)a1 = v2;
  *(_DWORD *)(a1 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)a2 + 1);
  for (uint64_t i = 8; i != 108; i += 4)
  {
    float result = *(float *)&a2[i];
    *(float *)(a1 + i) = result;
  }
  return result;
}

unsigned __int8 *BlueFin::GlMeSrdBitHistBuf::operator+=(unsigned __int8 *result, unsigned __int8 *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*result)
  {
    if (v2 == v3)
    {
      uint64_t v4 = (float *)(a2 + 8);
      uint64_t v5 = (float *)(result + 8);
      do
      {
        float v6 = *v4++;
        *uint64_t v5 = *v5 + v6;
        ++v5;
        --v2;
      }
      while (v2);
      int v7 = *((_DWORD *)result + 1) + *((_DWORD *)a2 + 1);
      goto LABEL_10;
    }
    double v11 = "m_ucNbHistBins == rhs.m_ucNbHistBins";
    DeviceFaultNotify("glmesrd_bithistbuf.cpp", 141, "operator+=", (char)"m_ucNbHistBins == rhs.m_ucNbHistBins");
    int v12 = 141;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bithistbuf.cpp", v12, v11);
  }
  if (!*a2)
  {
    double v11 = "rhs.m_ucNbHistBins > 0";
    DeviceFaultNotify("glmesrd_bithistbuf.cpp", 132, "operator+=", (char)"rhs.m_ucNbHistBins > 0");
    int v12 = 132;
    goto LABEL_13;
  }
  *float result = v3;
  char v8 = result + 8;
  int v9 = (int *)(a2 + 8);
  do
  {
    int v10 = *v9++;
    *v8++ = v10;
    --v3;
  }
  while (v3);
  int v7 = *((_DWORD *)a2 + 1);
LABEL_10:
  *((_DWORD *)result + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v7;
  return result;
}

void BlueFin::GlMeSrdEstBitPhs::~GlMeSrdEstBitPhs(BlueFin::GlMeSrdEstBitPhs *this)
{
  *(void *)this = &unk_270EBCFD0;
}

{
  JUMPOUT(0x263E6DD70);
}

float BlueFin::GlMeSrdBitHistBuf::operator[](unsigned __int8 *a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *a1 <= a2)
  {
    DeviceFaultNotify("glmesrd_bithistbuf.h", 38, "operator[]", (char)"i>=0 && i<m_ucNbHistBins");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bithistbuf.h", 38, "i>=0 && i<m_ucNbHistBins");
  }
  return *(float *)&a1[4 * a2 + 8];
}

void BlueFin::GlMeSrdEstBitPhs::AlignmentCheck(uint64_t a1, int a2, int a3, int a4, int a5, BlueFin::GlSignalId *this, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(unsigned char *)a11 = 0;
  *(_DWORD *)(a11 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1082130432;
  *(_WORD *)(a11 + 8) = 0;
  *(unsigned char *)(a11 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 127;
  char EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(this);
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    int v29 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v30 = "glsignalid.h";
    int v31 = 678;
    goto LABEL_50;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                              - *((int *)this + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]])
  {
    int v29 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v30 = "glsignalid.h";
    int v31 = 685;
    goto LABEL_50;
  }
  if ((BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                               - *((int *)this + 1)
                                                                               + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]]
                       * EpochPerSymbol) != 2)
  {
    int v29 = "ucBitIntvInCaEpoch == GlMeSrdEstBitPhsAlignmentObsBuf::NUM_OF_BIT_PHS";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 362, "AlignmentCheck", (char)"ucBitIntvInCaEpoch == GlMeSrdEstBitPhsAlignmentObsBuf::NUM_OF_BIT_PHS");
    int v30 = "glmesrd_bitphase.cpp";
    int v31 = 362;
    goto LABEL_50;
  }
  if (!*(unsigned char *)(a8 + 232))
  {
    int v29 = "stAsicBitPhsTrkMsmt.stAlignmentCheck.bValid";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 363, "AlignmentCheck", (char)"stAsicBitPhsTrkMsmt.stAlignmentCheck.bValid");
    int v30 = "glmesrd_bitphase.cpp";
    int v31 = 363;
LABEL_50:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v30, v31, v29);
  }
  if (*(unsigned char *)(a8 + 233))
  {
    BOOL v16 = *(float *)(a8 + 252) <= 0.0 || *(unsigned char *)a9 == 0;
    if (!v16 && *(float *)(a9 + 8) > 30.0)
    {
      long double v18 = *(double *)(a7 + 8);
      double v19 = fmod(v18, 4294967300.0);
      if (v18 <= 4294967300.0) {
        double v19 = v18;
      }
      if (v19 < -4294967300.0) {
        double v19 = -fmod(-v19, 4294967300.0);
      }
      if (v19 < 0.0) {
        signed int v20 = --v19;
      }
      else {
        signed int v20 = v19;
      }
      uint64_t v21 = (v20 % 2);
      uint64_t v22 = a1 + 832;
      uint64_t v23 = a1 + 832 + v21;
      __int16 v24 = *(unsigned __int8 *)(v23 + 4);
      if (((v24 + 1) & 0x100) != 0) {
        char v25 = -1;
      }
      else {
        char v25 = v24 + 1;
      }
      *(unsigned char *)(v23 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v25;
      float v26 = *(float *)(a8 + 252) + -1.0;
      if (v26 < 0.0) {
        float v26 = -v26;
      }
      if (v26 > 0.25
        && (*(unsigned char *)(a8 + 234) && *(float *)(a8 + 236) > 0.04 || *(unsigned char *)(a8 + 235) && *(float *)(a8 + 240) > 0.04))
      {
        --*(_WORD *)(v22 + 2 * v21);
      }
      if (v26 < 0.1
        && (*(unsigned char *)(a8 + 234) && *(float *)(a8 + 236) > 0.25 || *(unsigned char *)(a8 + 235) && *(float *)(a8 + 240) > 0.25))
      {
        ++*(_WORD *)(v22 + 2 * v21);
      }
      int v27 = *(__int16 *)(v22 + 2 * v21);
      if (v27 > 2)
      {
        char v28 = 0;
LABEL_44:
        *(unsigned char *)a11 = 1;
        *(_DWORD *)(a11 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1065353216;
        *(unsigned char *)(a11 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v28;
        *(_WORD *)(a11 + 8) = 1;
        goto LABEL_45;
      }
      if (v27 <= -3)
      {
        char v28 = 1;
        goto LABEL_44;
      }
    }
  }
  if (*(unsigned char *)a11)
  {
LABEL_45:
    *(_DWORD *)(a1 + 832) = 0;
    *(_WORD *)(a1 + 836) = 0;
  }
}

void BlueFin::GlMeSrdEstBitPhs::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, float *a7, uint64_t a8, unsigned int *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char __src, char a16, int a17, int a18, __int16 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0xA48] = *MEMORY[0x263EF8340];
  *(unsigned char *)a12 = 0;
  *(_DWORD *)(a12 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1082130432;
  *(_WORD *)(a12 + 8) = 0;
  *(unsigned char *)(a12 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 127;
  if (!*((unsigned char *)a9 + 4))
  {
    unsigned __int8 v150 = "stAsicBitPhsTrkMsmt.stHistogram.bValid";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 494, "Run", (char)"stAsicBitPhsTrkMsmt.stHistogram.bValid");
    int v151 = 494;
    goto LABEL_152;
  }
  if (!*((unsigned char *)a9 + 116))
  {
    unsigned __int8 v150 = "stAsicBitPhsTrkMsmt.stDeltaHistogram.bValid";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 495, "Run", (char)"stAsicBitPhsTrkMsmt.stDeltaHistogram.bValid");
    int v151 = 495;
LABEL_152:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", v151, v150);
  }
  if (!*(unsigned char *)a5 || !a9[30]) {
    return;
  }
  int v77 = *((unsigned __int8 *)a9 + 124);
  a66 = (uint64_t)&unk_270EBCFF0;
  a67 = 1;
  a68 = 0;
  a69 = v77;
  a70 = 1;
  a71 = *(void *)(a5 + 4);
  a72 = 0;
  int v78 = *(_DWORD *)(a8 + 4);
  uint64_t v79 = *(void *)(a8 + 8);
  a73 = *(_WORD *)a8;
  a74 = v78;
  a75 = v79;
  LOBYTE(a76) = 0;
  STACK[0x804] = 0;
  *(_OWORD *)&STACK[0x7F4] = 0u;
  *(_OWORD *)&STACK[0x7E4] = 0u;
  *(_OWORD *)&STACK[0x7D4] = 0u;
  *(_OWORD *)&STACK[0x7C4] = 0u;
  *(long long *)((char *)&a77 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a76 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  STACK[0x958] = (unint64_t)&STACK[0x810];
  STACK[0x998] = (unint64_t)&STACK[0x970];
  if (!v77)
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1264, "GlMeSrdEstBitPhsSerializeContainer", (char)"stAsicBitPhsTrkMsmt.stDeltaHistogram.ucEffBitIntvlInCaEpochs > 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 1264, "stAsicBitPhsTrkMsmt.stDeltaHistogram.ucEffBitIntvlInCaEpochs > 0");
  }
  for (uint64_t i = 0; i != 324; i += 108)
  {
    uint64_t v82 = STACK[0x958] + i;
    *(unsigned char *)uint64_t v82 = 0;
    *(_OWORD *)(v82 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
    *(_OWORD *)(v82 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(_OWORD *)(v82 + 36) = 0uLL;
    *(_OWORD *)(v82 + 52) = 0uLL;
    *(_OWORD *)(v82 + 68) = 0uLL;
    *(_OWORD *)(v82 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
    *(void *)(v82 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  uint64_t v83 = 0;
  unint64_t v84 = STACK[0x998];
  do
  {
    uint64_t v85 = v84 + v83;
    *(unsigned char *)uint64_t v85 = 0;
    *(_DWORD *)(v85 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1082130432;
    *(_WORD *)(v85 + 8) = 0;
    *(unsigned char *)(v85 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 127;
    v83 += 12;
  }
  while (v83 != 36);
  if (*((unsigned char *)a9 + 117))
  {
    *(unsigned char *)(a1 + 42) = 0;
    *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    bzero(*(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 41) * (unint64_t)*(unsigned __int16 *)(a1 + 44));
  }
  if (*(unsigned char *)(a11 + 28)) {
    BOOL v86 = *(unsigned char *)(a11 + 29) == 0;
  }
  else {
    BOOL v86 = 0;
  }
  char v87 = !v86;
  int v88 = *(unsigned __int8 *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v87;
  if (!v86 || v88)
  {
    if (*(unsigned char *)(a11 + 72))
    {
      double v90 = *(double *)(a11 + 80);
      if (v90 < 0.0) {
        double v90 = -v90;
      }
      BOOL v89 = v90 > *(float *)(a5 + 12);
    }
    else
    {
      BOOL v89 = 1;
    }
  }
  else
  {
    BOOL v89 = 0;
  }
  if (*(unsigned __int8 *)a9 | *((unsigned __int8 *)a9 + 1))
  {
    if (*((unsigned char *)a9 + 117)) {
      BOOL v91 = 1;
    }
    else {
      BOOL v91 = *(unsigned char *)(a11 + 1) == 0;
    }
    BOOL v89 = v91;
  }
  BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf((BlueFin::GlMeSrdBitHistBuf *)v159, (float *)a9 + 32, (const unsigned __int8 *)a9 + 124, a9 + 30);
  char v92 = *((unsigned char *)a9 + 117);
  BlueFin::GlMeSrdBitHistBuf::operator=((uint64_t)&a76, v159);
  HIBYTE(a67) = v92;
  a68 = v89;
  if (v89)
  {
    float __src = 0;
    a17 = -1082130432;
    LOWORD(a18) = 0;
    BYTE2(a18) = 127;
    float v93 = BlueFin::GlMeSrdEstBitPhsSerializeContainer::AddAccBitHistObsAndResults((uint64_t)&a66, 1, (uint64_t)v159, (uint64_t)&__src);
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        (*(void (**)(uint64_t *, void, void, float))(a66 + 24))(&a66, 0, 0, v93);
      }
    }
    return;
  }
  BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf((BlueFin::GlMeSrdBitHistBuf *)&__src, (float *)a9 + 32, (const unsigned __int8 *)a9 + 124, a9 + 30);
  memcpy((void *)(*(void *)(a1 + 32) + *(unsigned __int16 *)(a1 + 44) * (unint64_t)*(unsigned __int8 *)(a1 + 42)), &__src, *(unsigned __int16 *)(a1 + 44));
  unsigned __int8 v94 = *(unsigned char *)(a1 + 42) + 1;
  *(unsigned char *)(a1 + 42) = v94;
  if (*(unsigned __int8 *)(a1 + 41) <= v94)
  {
    *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *(unsigned char *)(a1 + 42) = 0;
  }
  uint64_t v95 = 0;
  float __src = 0;
  a17 = 0;
  a63 = (uint64_t)&a22;
  do
  {
    uint64_t v96 = a63 + v95;
    *(unsigned char *)uint64_t v96 = 0;
    *(_OWORD *)(v96 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
    *(_OWORD *)(v96 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(_OWORD *)(v96 + 36) = 0uLL;
    *(_OWORD *)(v96 + 52) = 0uLL;
    *(_OWORD *)(v96 + 68) = 0uLL;
    *(_OWORD *)(v96 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
    *(void *)(v96 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    v95 += 108;
  }
  while (v95 != 324);
  int v97 = *(_DWORD *)(a5 + 16);
  a16 = v77;
  a18 = v97;
  a19 = *(_WORD *)(a5 + 20);
  BlueFin::GlMeSrdObsBuf::ItFcn(a1 + 32, 0, &__src, (uint64_t (*)(void *, unint64_t))BlueFin::GlMeSrdEstBitPhs::AccumulateBitHistogram);
  unsigned int v98 = __src;
  if (__src)
  {
    uint64_t v99 = 0;
    while ((((unint64_t)a17 >> v99) & 1) == 0)
    {
LABEL_109:
      if (++v99 >= (unint64_t)v98) {
        goto LABEL_145;
      }
    }
    char v100 = (unsigned __int8 *)(a63 + 108 * v99);
    uint64_t v101 = *(void *)(a3 + 16);
    float v102 = *a7;
    LOBYTE(v157) = 0;
    HIDWORD(v157) = -1082130432;
    LOWORD(v158) = 0;
    BYTE2(v158) = 127;
    unsigned int v103 = *((_DWORD *)v100 + 1);
    if (!v103) {
      goto LABEL_107;
    }
    LOBYTE(v157) = 1;
    BOOL v104 = (*(unsigned __int8 *)a9 | *((unsigned __int8 *)a9 + 1)) != 0;
    STACK[0xA30] = 0;
    STACK[0xA28] = 0;
    LOBYTE(STACK[0xA40]) = 0;
    STACK[0xA38] = 0;
    unsigned int v105 = *(unsigned __int8 *)(v101 + 8);
    if (v105 >= 0x1A)
    {
      DeviceFaultNotify("glmesrd_bitphase.cpp", 92, "EstTrkBitPhs", (char)"ucEffBitIntInMs <= GlMeSrdAsicBitPhsTrkMsmt::MAX_HIST_VEC_LEN");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 92, "ucEffBitIntInMs <= GlMeSrdAsicBitPhsTrkMsmt::MAX_HIST_VEC_LEN");
    }
    LODWORD(STACK[0xA20]) = 0;
    *(_OWORD *)&STACK[0xA00] = 0u;
    *(_OWORD *)&STACK[0xA10] = 0u;
    *(_OWORD *)&STACK[0x9E0] = 0u;
    *(_OWORD *)&STACK[0x9F0] = 0u;
    *(_OWORD *)&STACK[0x9C0] = 0u;
    *(_OWORD *)&STACK[0x9D0] = 0u;
    uint64_t v106 = *v100;
    if (*v100)
    {
      uint64_t v107 = 0;
      float v108 = v102 * (float)v105;
      do
      {
        float v109 = BlueFin::GlMeSrdBitHistBuf::operator[](v100, v107);
        unsigned int v103 = *((_DWORD *)v100 + 1);
        float v110 = v109 / (float)v103;
        float v111 = v110 * v110;
        float v112 = v110 - v108;
        if (v104) {
          float v112 = v111;
        }
        if (v112 < 0.0) {
          float v112 = 0.0;
        }
        float v113 = v112 / v108;
        *((float *)&STACK[0x9C0] + v107) = v113;
        *((unsigned char *)&STACK[0xA28] + v107) = v107;
        if (v107)
        {
          uint64_t v114 = 0;
          while (v113 <= *((float *)&STACK[0x9C0] + *((unsigned __int8 *)&STACK[0xA28] + v114)))
          {
            if (v107 == ++v114) {
              goto LABEL_61;
            }
          }
          int v115 = v107;
          int v116 = v107;
          do
          {
            *((unsigned char *)&STACK[0xA28] + (__int16)v116--) = *((unsigned char *)&STACK[0xA28] + (v115 - 1));
            int v115 = (__int16)v116;
          }
          while ((int)v114 < (__int16)v116);
          *((unsigned char *)&STACK[0xA28] + v11bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v107;
        }
LABEL_61:
        ++v107;
      }
      while (v107 != v106);
      uint64_t v117 = LOBYTE(STACK[0xA28]);
      float v118 = *((float *)&STACK[0x9C0] + v117);
      uint64_t v119 = LOBYTE(STACK[0xA29]);
      float v120 = *((float *)&STACK[0x9C0] + v119);
      if (v104)
      {
        float v121 = *((float *)&STACK[0x9C0] + v119);
        if (v119 >= 0x19)
        {
          DeviceFaultNotify("glmesrd_bitphase.cpp", 166, "EstTrkBitPhs", (char)"ucIndexHistHalfBitOff < 25");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 166, "ucIndexHistHalfBitOff < 25");
        }
LABEL_67:
        float v122 = 0.0;
        if (v120 >= 0.0000001) {
          float v122 = 1.0 - (float)(1.0 / (float)(v118 / v120));
        }
        *((float *)&v157 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v122;
        unsigned int v123 = *(unsigned __int16 *)(a5 + 16);
        if (v103 < v123) {
          goto LABEL_76;
        }
        float v124 = *(float *)(a5 + 4);
        if (v122 >= v124)
        {
          int v125 = 1;
          LOBYTE(v158) = 1;
        }
        else
        {
          int v125 = 0;
        }
        if (v122 >= *(float *)(a5 + 8)) {
          BYTE1(v158) = 1;
        }
        if (v122 >= v124)
        {
          char v126 = 0;
          char v127 = v117 - !v104;
          BYTE2(v158) = v127;
        }
        else
        {
LABEL_76:
          int v125 = 0;
          char v126 = 1;
          char v127 = 127;
        }
        char v129 = fabsf(*(float *)(a4 + 16) + -0.001) < 0.00000011921 && *a6 - 81 < 0x35 || v104;
        if (v129)
        {
          if ((v126 & 1) == 0)
          {
            float v122 = 0.0;
            if (v121 >= 0.0000001) {
              float v122 = 1.0 - (float)(1.0 / (float)(v118 / v121));
            }
            *((float *)&v157 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v122;
            if (v103 >= v123)
            {
              if (v122 < *(float *)(a5 + 4))
              {
                char v127 = 0;
                int v125 = 0;
                BYTE2(v158) = 0;
                LOBYTE(v158) = 0;
              }
              if (v122 < *(float *)(a5 + 8)) {
                BYTE1(v158) = 0;
              }
            }
          }
          goto LABEL_95;
        }
        if ((v126 & 1) != 0 || v105 < 3) {
          goto LABEL_95;
        }
        float v132 = *((float *)&STACK[0x9C0] + v117);
        float v133 = *((float *)&STACK[0x9C0] + v119);
        if (v132 < v133)
        {
          DeviceFaultNotify("glmesrd_bitphase.cpp", 285, "TrkShapeCheck", (char)"afPkHistVals[aucPkHistIdx[0]] >= afPkHistVals[aucPkHistIdx[1]]");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 285, "afPkHistVals[aucPkHistIdx[0]] >= afPkHistVals[aucPkHistIdx[1]]");
        }
        uint64_t v134 = LOBYTE(STACK[0xA2A]);
        float v135 = *((float *)&STACK[0x9C0] + v134);
        if (v133 < v135)
        {
          DeviceFaultNotify("glmesrd_bitphase.cpp", 286, "TrkShapeCheck", (char)"afPkHistVals[aucPkHistIdx[1]] >= afPkHistVals[aucPkHistIdx[2]]");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 286, "afPkHistVals[aucPkHistIdx[1]] >= afPkHistVals[aucPkHistIdx[2]]");
        }
        if ((int)v117 - (int)v119 >= 0) {
          int v136 = v117 - v119;
        }
        else {
          int v136 = v119 - v117;
        }
        int v137 = v117 - v134;
        if (v137 < 0) {
          int v137 = -v137;
        }
        int v138 = v119 - v134;
        if (v138 >= 0) {
          int v139 = v138;
        }
        else {
          int v139 = -v138;
        }
        unsigned int v140 = v105 - 1;
        BOOL v142 = v136 == 1 || v136 == v140;
        if (v137 != 1 && v139 != 1 && v137 != v140 && v139 != v140) {
          BOOL v142 = 0;
        }
        float v144 = v132 - v133;
        float v145 = vabds_f32(v132, v133);
        float v146 = vabds_f32(v132, v135);
        float v147 = vabds_f32(v133, v135);
        if (v145 == v146)
        {
          BOOL v148 = (float)(v133 - v135) == 0.0;
          if (v146 != v147) {
            BOOL v148 = 0;
          }
          if (v144 == 0.0 || v148) {
            goto LABEL_144;
          }
        }
        else if (v144 == 0.0)
        {
          goto LABEL_144;
        }
        BOOL v149 = (float)(v146 + v147) != 0.0;
        if ((float)(v145 + v146) == 0.0) {
          BOOL v149 = 0;
        }
        if (v149 && v142)
        {
LABEL_95:
          if (v125)
          {
            int v130 = 0;
            if (v122 < 0.0 || v127 == 127) {
              goto LABEL_108;
            }
            if (*(unsigned char *)a12 && *(unsigned char *)(a12 + 8))
            {
              float v131 = *(float *)(a12 + 4);
              if (v131 < 0.0 || *(unsigned char *)(a12 + 10) == 127) {
                goto LABEL_106;
              }
            }
            else
            {
              if (!*(unsigned char *)(a12 + 8))
              {
LABEL_106:
                *(void *)a12 = v157;
                *(_DWORD *)(a12 + 8) = v158;
                int v130 = 1;
LABEL_108:
                BlueFin::GlMeSrdEstBitPhsSerializeContainer::AddAccBitHistObsAndResults((uint64_t)&a66, v130, a63 + 108 * v99, (uint64_t)&v157);
                unsigned int v98 = __src;
                goto LABEL_109;
              }
              float v131 = *(float *)(a12 + 4);
            }
            if (v131 < v122) {
              goto LABEL_106;
            }
          }
LABEL_107:
          int v130 = 0;
          goto LABEL_108;
        }
LABEL_144:
        int v130 = 0;
        LOWORD(v158) = 0;
        goto LABEL_108;
      }
    }
    else
    {
      LODWORD(v119) = 0;
      LODWORD(v117) = 0;
      float v118 = 0.0;
      float v120 = 0.0;
      float v121 = 0.0;
      if (v104) {
        goto LABEL_67;
      }
    }
    float v121 = v120;
    float v120 = *((float *)&STACK[0x9C0] + (v117 + (v105 >> 1)) % v105);
    goto LABEL_67;
  }
LABEL_145:
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(uint64_t *, void, void))(a66 + 24))(&a66, 0, 0);
  }
}

float BlueFin::GlMeSrdEstBitPhsSerializeContainer::AddAccBitHistObsAndResults(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    int v10 = "m_bIsMiBitHist1DBit";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1316, "AddAccBitHistObsAndResults", (char)"m_bIsMiBitHist1DBit");
    int v11 = 1316;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a3 + 4))
  {
    int v10 = "stEstBitHistBuf.GetTotalObsLenInEffSym() > 0";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1317, "AddAccBitHistObsAndResults", (char)"stEstBitHistBuf.GetTotalObsLenInEffSym() > 0");
    int v11 = 1317;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", v11, v10);
  }
  BlueFin::GlMeSrdBitHistBuf::operator=(*(void *)(a1 + 488) + 108 * *(unsigned __int8 *)(a1 + 24), (unsigned __int8 *)a3);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 24);
  if (a2) {
    *(unsigned char *)(a1 + 25) = v7;
  }
  uint64_t v8 = *(void *)(a1 + 552) + 12 * v7;
  *(unsigned char *)uint64_t v8 = *(unsigned char *)a4;
  float result = *(float *)(a4 + 4);
  *(float *)(v8 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(a4 + 8);
  *(_WORD *)(v8 + 9) = *(_WORD *)(a4 + 9);
  *(unsigned char *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7 + 1;
  return result;
}

uint64_t BlueFin::GlMeSrdEstBitPhs::AccumulateBitHistogram(BlueFin::GlMeSrdEstBitPhs *this, unsigned __int8 *a2, void *a3)
{
  if (!a2)
  {
    int v10 = "potBufElem != nullptr";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1146, "AccumulateBitHistogram", (char)"potBufElem != nullptr");
    int v11 = 1146;
    goto LABEL_14;
  }
  if (!this)
  {
    int v10 = "potItObsParam != nullptr";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1147, "AccumulateBitHistogram", (char)"potItObsParam != nullptr");
    int v11 = 1147;
LABEL_14:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", v11, v10);
  }
  if (*((_WORD *)this + *(unsigned __int8 *)this + 4))
  {
    BlueFin::GlMeSrdBitHistBuf::operator+=((unsigned __int8 *)(*((void *)this + 45) + 108 * *(unsigned __int8 *)this), a2);
    uint64_t v4 = *(unsigned __int8 *)this;
    uint64_t v5 = (char *)this + 2 * v4;
    unsigned int v6 = *((unsigned __int16 *)v5 + 4);
    if (*((_WORD *)v5 + 4))
    {
      uint64_t v7 = *((void *)this + 45);
      if (*(_DWORD *)(v7 + 108 * *(unsigned __int8 *)this + 4) >= v6)
      {
        uint64_t result = 1;
        *((_DWORD *)this + 1) |= 1 << v4;
        unsigned __int8 v9 = v4 + 1;
        *(unsigned char *)this = v9;
        if (v9 > 2u) {
          return result;
        }
        if (!*((_WORD *)this + v9 + 4)) {
          return 1;
        }
        BlueFin::GlMeSrdBitHistBuf::operator+=((unsigned __int8 *)(v7 + 108 * v9), (unsigned __int8 *)(v7 + 108 * v9 - 108));
      }
    }
  }
  return 0;
}

void BlueFin::GlMeSrdEstBitPhs::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, void *a17, __int16 a18, char a19, unsigned __int8 a20,char a21,uint64_t a22,__int16 a23,int a24,__int16 a25,int a26,uint64_t a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,uint64_t a35)
{
  STACK[0x638] = *MEMORY[0x263EF8340];
  *(_DWORD *)(a9 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1082130432;
  *(_WORD *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 127;
  *(unsigned char *)a9 = 1;
  a17 = &unk_270EBCFF0;
  a18 = 0;
  a19 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  a22 = _D0;
  a23 = 0;
  int v38 = *(_DWORD *)(a6 + 4);
  uint64_t v39 = *(void *)(a6 + 8);
  a25 = *(_WORD *)a6;
  a26 = v38;
  a27 = v39;
  LOBYTE(a28) = 0;
  *(long long *)((char *)&a28 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a29 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a30 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a31 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a32 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(long long *)((char *)&a33 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(void *)((char *)&a34 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  STACK[0x5C8] = (unint64_t)&a35;
  STACK[0x608] = (unint64_t)&STACK[0x5E0];
  if (!*(unsigned char *)a7)
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1286, "GlMeSrdEstBitPhsSerializeContainer", (char)"stAsicBitPhsSrchMsmt.stHistogram.bValid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 1286, "stAsicBitPhsSrchMsmt.stHistogram.bValid");
  }
  double v41 = (const unsigned __int8 *)(a7 + 8);
  if (!*(unsigned char *)(a7 + 8))
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1287, "GlMeSrdEstBitPhsSerializeContainer", (char)"stAsicBitPhsSrchMsmt.stHistogram.ucEffBitIntvlInCaEpochs > 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 1287, "stAsicBitPhsSrchMsmt.stHistogram.ucEffBitIntvlInCaEpochs > 0");
  }
  for (uint64_t i = 0; i != 324; i += 108)
  {
    uint64_t v43 = STACK[0x5C8] + i;
    *(unsigned char *)uint64_t v43 = 0;
    *(_OWORD *)(v43 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
    *(_OWORD *)(v43 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(_OWORD *)(v43 + 36) = 0uLL;
    *(_OWORD *)(v43 + 52) = 0uLL;
    *(_OWORD *)(v43 + 68) = 0uLL;
    *(_OWORD *)(v43 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0uLL;
    *(void *)(v43 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  uint64_t v44 = 0;
  unint64_t v45 = STACK[0x608];
  do
  {
    uint64_t v46 = v45 + v44;
    *(unsigned char *)uint64_t v46 = 0;
    *(_DWORD *)(v46 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1082130432;
    *(_WORD *)(v46 + 8) = 0;
    *(unsigned char *)(v46 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 127;
    v44 += 12;
  }
  while (v44 != 36);
  a20 = *(unsigned char *)(a7 + 8);
  uint64_t v47 = a20;
  unsigned int v48 = *(unsigned __int8 *)(a7 + 9);
  a21 = *(unsigned char *)(a7 + 9);
  if (a20 > 0x14u || ((1 << a20) & 0x100404) == 0)
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 822, "Run", (char)"ucHistLen==20 || ucHistLen==10 || ucHistLen==2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 822, "ucHistLen==20 || ucHistLen==10 || ucHistLen==2");
  }
  if (v48 >= 3)
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 827, "Run", (char)"ucHistStp<=2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 827, "ucHistStp<=2");
  }
  int v50 = (unsigned int *)(a7 + 12);
  if (a20 == 2)
  {
    *(_DWORD *)(a9 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1065353216;
    *(unsigned char *)(a9 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(_WORD *)(a9 + 8) = 1;
    BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf((BlueFin::GlMeSrdBitHistBuf *)v109, (unsigned int *)(a7 + 12), (const unsigned __int8 *)(a7 + 8), (const unsigned int *)(a7 + 4));
    float v51 = BlueFin::GlMeSrdEstBitPhsSerializeContainer::Add2dBitHistObsAndResults((uint64_t)&a17, (uint64_t)v109, a9);
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
LABEL_127:
    }
      (*((void (**)(void **, void, void, float))a17 + 3))(&a17, 0, 0, v51);
  }
  else
  {
    uint64_t v52 = 0;
    int v53 = *(unsigned __int16 *)(a4 + 24);
    a16 = 0;
    a15 = 0;
    a14 = 0;
    a13 = 0;
    do
    {
      unint64_t v54 = 0;
      unsigned int v55 = v50[v52];
      while (v55 < *((_DWORD *)&a13 + v54))
      {
        if (++v54 == 3) {
          goto LABEL_25;
        }
      }
      if ((v54 & 0xFFFFFFFE) == 0)
      {
        uint64_t v56 = 0;
        do
        {
          *((_DWORD *)&a15 + v56 + 2) = *((_DWORD *)&a15 + v56 + 1);
          *((_DWORD *)&a13 + v56 + 2) = *((_DWORD *)&a13 + v56 + 1);
          unint64_t v57 = v56-- + 1;
        }
        while (v57 > v54);
      }
      *((_DWORD *)&a15 + v5bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v52;
      *((_DWORD *)&a13 + v5bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v55;
LABEL_25:
      ++v52;
    }
    while (v52 != v47);
    if (v47 == 20) {
      char v58 = 10;
    }
    else {
      char v58 = 6;
    }
    if (a13 < HIDWORD(a13))
    {
      DeviceFaultNotify("glmesrd_bitphase.cpp", 889, "Run", (char)"aulPkHistVals[0] >= aulPkHistVals[1]");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 889, "aulPkHistVals[0] >= aulPkHistVals[1]");
    }
    if (HIDWORD(a13) < a14)
    {
      DeviceFaultNotify("glmesrd_bitphase.cpp", 890, "Run", (char)"aulPkHistVals[1] >= aulPkHistVals[2]");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 890, "aulPkHistVals[1] >= aulPkHistVals[2]");
    }
    int v60 = a15;
    int v59 = HIDWORD(a15);
    if ((int)a15 - HIDWORD(a15) >= 0) {
      int v61 = a15 - HIDWORD(a15);
    }
    else {
      int v61 = HIDWORD(a15) - a15;
    }
    int v62 = a15 - a16;
    if ((int)a15 - a16 < 0) {
      int v62 = a16 - a15;
    }
    int v63 = HIDWORD(a15) - a16;
    if (HIDWORD(a15) - a16 < 0) {
      int v63 = a16 - HIDWORD(a15);
    }
    float v64 = (float)(a13 - HIDWORD(a13));
    float v65 = (float)(a13 - a14);
    float v66 = (float)(HIDWORD(a13) - a14);
    int v67 = v47 - v48;
    BOOL v69 = v61 == v48 || v61 == v67;
    BOOL v71 = (v62 == v67 || v63 == v67) && v69;
    if (v63 == v48) {
      BOOL v71 = v69;
    }
    if (v62 != v48) {
      BOOL v69 = v71;
    }
    int v72 = a15 == v67 + 1 && v69;
    if (a15 == v48 + 1) {
      int v72 = v69;
    }
    if (a15 == 1) {
      int v72 = v69;
    }
    if (v65 == v66 && HIDWORD(a13) == a14) {
      int v74 = 0;
    }
    else {
      int v74 = v72;
    }
    if (v64 != v65) {
      int v74 = v72;
    }
    float v75 = v65 + v66;
    BOOL v76 = (float)(v65 + v66) != 0.0;
    float v77 = v64 + v65;
    if ((float)(v64 + v65) == 0.0) {
      BOOL v76 = 0;
    }
    int v78 = v76 & v74;
    float v79 = 0.0;
    float v80 = 0.0;
    if (v78 == 1)
    {
      float v80 = v64 / (float)(v75 * 0.5);
      float v79 = v66 / (float)(v77 * 0.5);
    }
    float v81 = v79 - v80;
    if ((float)(v79 - v80) < 0.0) {
      float v81 = -(float)(v79 - v80);
    }
    if (v81 >= 0.1) {
      int v82 = v78;
    }
    else {
      int v82 = 0;
    }
    if (v79 < v80) {
      char v83 = v82;
    }
    else {
      char v83 = 0;
    }
    unsigned __int8 v84 = a15 + v58;
    if (v47 <= v84) {
      char v85 = v47;
    }
    else {
      char v85 = 0;
    }
    unsigned int v86 = v50[(v84 - v85)];
    if (v86) {
      float v87 = (float)v50[a15] / (float)v86;
    }
    else {
      float v87 = -1.0;
    }
    uint64_t v88 = 0;
    while (1)
    {
      BOOL v89 = (float *)((char *)&BlueFin::GlMeSrdEstBitPhs::m_2DBitThresholdMeterics + v88);
      if (*(float *)(a8 + 8) >= *(float *)((char *)&BlueFin::GlMeSrdEstBitPhs::m_2DBitThresholdMeterics + v88 + 4)) {
        break;
      }
      v88 += 12;
      if (v88 == 120)
      {
        unsigned int v90 = 10000;
        float v91 = 2.0;
        goto LABEL_98;
      }
    }
    char v105 = v83;
    int v106 = v61;
    int v107 = HIDWORD(a15);
    int v108 = v53;
    float v91 = v89[2];
    float v92 = *v89 * 1000.0;
    float v93 = fmodf(v92, 4295000000.0);
    if (v92 <= 4295000000.0) {
      float v93 = v92;
    }
    if (v93 < -4295000000.0) {
      float v93 = -fmodf(-v93, 4295000000.0);
    }
    int v59 = v107;
    int v53 = v108;
    char v83 = v105;
    int v61 = v106;
    if (v93 < 0.0) {
      unsigned int v90 = -(float)-v93;
    }
    else {
      unsigned int v90 = v93;
    }
LABEL_98:
    unsigned int v94 = v90 & (v53 << 25 >> 31);
    int v96 = *(_DWORD *)(a7 + 4);
    uint64_t v95 = (const unsigned int *)(a7 + 4);
    unsigned int v97 = v96 * v47;
    BOOL v99 = v87 >= 1.08 && v97 >= v94 >> 1;
    int v101 = v87 >= v91 && v97 >= v94 || v99;
    if ((v82 & v101) == 1)
    {
      if (v48 == 2) {
        char v102 = v83;
      }
      else {
        char v102 = 1;
      }
      if ((v102 & 1) == 0)
      {
        if (v61 == 2)
        {
          int v103 = v59 + v60;
          if (v59 + v60 < 0 != __OFADD__(v59, v60)) {
            ++v103;
          }
          int v60 = v103 >> 1;
        }
        else if (v61 == v47 - 2)
        {
          int v60 = (v59 + v60) % (int)v47;
        }
      }
      *(_DWORD *)(a9 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1065353216;
      if (v60 <= v47 >> 1) {
        char v104 = 0;
      }
      else {
        char v104 = v47;
      }
      *(unsigned char *)(a9 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v104 - v60 + 1;
      *(unsigned char *)(a9 + 8) = 1;
    }
    BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf((BlueFin::GlMeSrdBitHistBuf *)v109, v50, v41, v95);
    float v51 = BlueFin::GlMeSrdEstBitPhsSerializeContainer::Add2dBitHistObsAndResults((uint64_t)&a17, (uint64_t)v109, a9);
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      goto LABEL_127;
    }
  }
}

float BlueFin::GlMeSrdEstBitPhsSerializeContainer::Add2dBitHistObsAndResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v8 = "m_bIsMiBitHist1DBit == false";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1348, "Add2dBitHistObsAndResults", (char)"m_bIsMiBitHist1DBit == false");
    int v9 = 1348;
    goto LABEL_6;
  }
  if (!*(_DWORD *)(a2 + 4))
  {
    uint64_t v8 = "o2DBitTotalAccBitHistBuf.GetTotalObsLenInEffSym() > 0";
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1349, "Add2dBitHistObsAndResults", (char)"o2DBitTotalAccBitHistBuf.GetTotalObsLenInEffSym() > 0");
    int v9 = 1349;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", v9, v8);
  }
  BlueFin::GlMeSrdBitHistBuf::operator=(*(void *)(a1 + 488) + 108 * *(unsigned __int8 *)(a1 + 24), (unsigned __int8 *)a2);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 25) = v5;
  uint64_t v6 = *(void *)(a1 + 552) + 12 * v5;
  *(unsigned char *)uint64_t v6 = *(unsigned char *)a3;
  float result = *(float *)(a3 + 4);
  *(float *)(v6 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(a3 + 8);
  *(_WORD *)(v6 + 9) = *(_WORD *)(a3 + 9);
  *(unsigned char *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v5 + 1;
  return result;
}

unint64_t BlueFin::GlMeSrdEstBitPhsHistBuf::Print(unint64_t this, uint64_t a2, void *a3)
{
  if (((1 << (this >> 3)) & 0x2000800E) != 0)
  {
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      unsigned __int8 v4 = this;
      uint64_t v5 = this;
      this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)v5);
      if (this)
      {
        GlCustomLog(v5, "<%u [", *(_DWORD *)(a2 + 4));
        for (uint64_t i = 8; i != 108; i += 4)
          GlCustomLog(v4, "%f ", *(float *)(a2 + i));
        return GlCustomLog(v4, "]>");
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlMeSrdEstBitPhsSerializeContainer::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v7 >= 3)
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1386, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 1386, "ucVersion >= 1 && ucVersion <= 2");
  }
  int v15 = 14;
  char v16 = v7;
  uint64_t v17 = 0x1000000000000;
  double v14 = &unk_270EBA550;
  char v18 = v7;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v2 + 33)));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 32));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v6 + 36));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v6 + 40));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 11));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 12));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 20));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 24));
  if (*(unsigned char *)(v6 + 24))
  {
    unint64_t v8 = 0;
    do
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(*(void *)(v6 + 488) + 108 * v8 + 4));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(*(void *)(v6 + 552) + 12 * v8) | (2 * *(unsigned char *)(*(void *)(v6 + 552) + 12 * v8 + 8)) | (4 * *(unsigned char *)(*(void *)(v6 + 552) + 12 * v8 + 9)) | (8 * (v8 == *(unsigned __int8 *)(v6 + 25))));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(*(void *)(v6 + 552) + 12 * v8 + 4));
      BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(*(void *)(v6 + 552) + 12 * v8 + 10));
      if (*(unsigned char *)(v6 + 11))
      {
        unsigned int v9 = 0;
        do
        {
          float v10 = BlueFin::GlMeSrdBitHistBuf::operator[]((unsigned __int8 *)(*(void *)(v6 + 488) + 108 * v8), v9);
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, v10);
          ++v9;
        }
        while (v9 < *(unsigned __int8 *)(v6 + 11));
      }
      ++v8;
    }
    while (v8 < *(unsigned __int8 *)(v6 + 24));
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 9) | (4 * *(unsigned char *)(v6 + 8)) | (2 * *(unsigned char *)(v6 + 10)));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v6 + 52));
  if (*(unsigned char *)(v6 + 11))
  {
    unsigned int v11 = 0;
    do
    {
      if (*(unsigned char *)(v6 + 48)) {
        float v12 = BlueFin::GlMeSrdBitHistBuf::operator[]((unsigned __int8 *)(v6 + 48), v11);
      }
      else {
        float v12 = 0.0;
      }
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, v12);
      ++v11;
    }
    while (v11 < *(unsigned __int8 *)(v6 + 11));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v5, 4);
  return 1;
}

uint64_t BlueFin::GlMeSrdEstBitPhsSerializeContainer::Deserialize(BlueFin::GlMeSrdEstBitPhsSerializeContainer *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 2) != 14 || *((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  *((unsigned char *)this + 33) = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                          + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                          + BlueFin::GlSysLogEntry::GetU8(a2));
  *((unsigned char *)this + 32) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((unsigned char *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t v5 = (unsigned __int8 *)this + 11;
  *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((float *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
  *((float *)this + 5) = BlueFin::GlSysLogEntry::GetF32(a2);
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = U8;
  if (U8)
  {
    unint64_t v7 = 0;
    do
    {
      unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      char v8 = BlueFin::GlSysLogEntry::GetU8(a2);
      unsigned int v9 = (unsigned char *)(*((void *)this + 69) + 12 * v7);
      *unsigned int v9 = v8 & 1;
      unsigned char v9[8] = (v8 & 2) != 0;
      v9[9] = (v8 & 4) != 0;
      if ((v8 & 8) != 0) {
        *((unsigned char *)this + 25) = v7;
      }
      *(float *)(*((void *)this + 69) + 12 * v7 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
      *(unsigned char *)(*((void *)this + 69) + 12 * v7 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetS8(a2);
      if (*((unsigned char *)this + 11))
      {
        unint64_t v10 = 0;
        do
          v15[v10++] = BlueFin::GlSysLogEntry::GetF32(a2);
        while (v10 < *v5);
      }
      BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf((BlueFin::GlMeSrdBitHistBuf *)v13, v15, (const unsigned __int8 *)this + 11, &U32);
      BlueFin::GlMeSrdBitHistBuf::operator=(*((void *)this + 61) + 108 * v7++, v13);
    }
    while (v7 < *((unsigned __int8 *)this + 24));
  }
  char v11 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 8) = (v11 & 4) != 0;
  *((unsigned char *)this + 9) = v11 & 1;
  *((unsigned char *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (v11 & 2) != 0;
  unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned char *)this + 11))
  {
    unint64_t v12 = 0;
    do
      v15[v12++] = BlueFin::GlSysLogEntry::GetF32(a2);
    while (v12 < *v5);
  }
  BlueFin::GlMeSrdBitHistBuf::GlMeSrdBitHistBuf((BlueFin::GlMeSrdBitHistBuf *)v13, v15, (const unsigned __int8 *)this + 11, &U32);
  BlueFin::GlMeSrdBitHistBuf::operator=((uint64_t)this + 48, v13);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glmesrd_bitphase.cpp", 1528, "Deserialize", (char)"rEntry.DataSize() == rEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_bitphase.cpp", 1528, "rEntry.DataSize() == rEntry.ReadIdx()");
  }
  return 1;
}

void BlueFin::GlMeSrdEstBitPhsSerializeContainer::~GlMeSrdEstBitPhsSerializeContainer(BlueFin::GlMeSrdEstBitPhsSerializeContainer *this)
{
}

void BlueFin::GlMeSrdEstCarrPrm::~GlMeSrdEstCarrPrm(BlueFin::GlMeSrdEstCarrPrm *this)
{
  *(void *)this = &unk_270EBD048;
}

{
  JUMPOUT(0x263E6DD70);
}

double BlueFin::GlMeSrdEstCarrPrm::Run(uint64_t a1, unsigned __int8 *a2, char a3, double a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, float *a9, uint64_t a10, uint64_t a11)
{
  if (!*(unsigned char *)a10)
  {
    char v33 = "rstAsicSniffMsmt.bValid";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2035, "Run", (char)"rstAsicSniffMsmt.bValid");
    uint64_t v34 = "glmesrd_carrprm.cpp";
    int v35 = 2035;
    goto LABEL_21;
  }
  int v11 = *a2;
  if ((v11 - 1) >= 0xBC)
  {
    char v33 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2036, "Run", (char)"otSignalId.GetSvId().isValid()");
    uint64_t v34 = "glmesrd_carrprm.cpp";
    int v35 = 2036;
    goto LABEL_21;
  }
  if ((unsigned __int8 *)(a1 + 456) != a2)
  {
    *(unsigned char *)(a1 + 456) = v11;
    *(_DWORD *)(a1 + 46BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a2 + 1);
    *(_WORD *)(a1 + 46bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_WORD *)a2 + 4);
  }
  *(unsigned char *)(a1 + 468) = a3;
  if (!*(unsigned char *)(a10 + 1))
  {
    *(_DWORD *)(a11 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4;
    double v30 = *(double *)(a10 + 24);
    float v31 = 200.0;
    goto LABEL_16;
  }
  if (*(unsigned __int16 *)(a1 + 464) >= 0x23Fu)
  {
    char v33 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    uint64_t v34 = "glsignalid.h";
    int v35 = 692;
    goto LABEL_21;
  }
  uint64_t v14 = *(int *)(a1 + 460);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 456);
  if (v14 == 1)
  {
    double v16 = 1.5;
    if ((v15 - 1) < 0x20 || (v15 - 66) < 0xA) {
      goto LABEL_12;
    }
  }
  unsigned int v17 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v14
                                                                               - v14
                                                                               + BlueFin::GlSvId::s_aucSvId2gnss[v15]];
  if (!v17)
  {
    char v33 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    uint64_t v34 = "glsignalid.h";
    int v35 = 685;
LABEL_21:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v34, v35, v33);
  }
  float v18 = (double)v17 * 0.001;
  double v16 = v18;
LABEL_12:
  float v19 = *(double *)(a10 + 8) - *(double *)(a10 + 16);
  float v20 = (float)((float)(1.0 - (float)(1.0 / (float)(2 * *(unsigned __int8 *)(a7 + 44)))) * 2.32) * 0.25;
  float v21 = (float)(v20 * v20) * a5;
  float v22 = *(float *)(a8 + 4);
  float v24 = 1.0;
  if ((float)(v22 * 39.062) != 0.0)
  {
    double v25 = (float)(v22 * 39.062) * 3.14159265;
    float v26 = v25;
    float v24 = sinf(v26) / v25;
  }
  float v27 = v22 * 122.718463;
  float v23 = 2.0 / (v16 * 122.718463);
  float v28 = (float)((float)(v19 / v21) / (float)((float)(v24 * v23) * (float)(v24 - cosf(v27)))) / (v16 * 6.28318531);
  float v29 = v28 * 0.5;
  *a9 = v29;
  *(_DWORD *)(a11 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  double v30 = *(double *)(a10 + 24) + v29;
  float v31 = 10.0;
LABEL_16:
  *(double *)(a11 + 8) = v30;
  *(float *)(a11 + 16) = v31;
  *(_WORD *)a11 = 257;
  *(_WORD *)(a11 + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(a11 + 36) = 0;
  double result = 0.0;
  *(_OWORD *)(a11 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a11 + 56) = 0u;
  return result;
}

double BlueFin::GlMeSrdEstCarrPrm::CalcMagSqrdFllValidityTestStatSummand(BlueFin::GlMeSrdEstCarrPrm *this, void *a2, void *a3)
{
  if (!a2)
  {
    uint64_t v4 = "potBufElem != nullptr";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2495, "CalcMagSqrdFllValidityTestStatSummand", (char)"potBufElem != nullptr");
    int v5 = 2495;
    goto LABEL_6;
  }
  if (this)
  {
    uint64_t v4 = "potTestStatParam == nullptr";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2496, "CalcMagSqrdFllValidityTestStatSummand", (char)"potTestStatParam == nullptr");
    int v5 = 2496;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_carrprm.cpp", v5, v4);
  }
  return *(float *)a2;
}

unint64_t BlueFin::GlMeSrdEstCarrPrm::PrintValidityMagSqrdBufElem(unint64_t this, float *a2, void *a3)
{
  if (((1 << (this >> 3)) & 0x2000800E) != 0 && BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v4 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)v4);
    if (this) {
      return GlCustomLog(v4, "%f ", *a2);
    }
  }
  return this;
}

unint64_t BlueFin::GlMeSrdEstCarrPrm::PrintValidityMultiSecLagOneBufElem(unint64_t this, float *a2, void *a3)
{
  if (((1 << (this >> 3)) & 0x2000800E) != 0 && BlueFin::GlUtils::m_ucEnabled != 0)
  {
    unsigned __int8 v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)this);
    if (this)
    {
      if (BlueFin::GlUtils::m_ucEnabled)
      {
        this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)v5);
        if (this) {
          return GlCustomLog(v5, "EstCarrPrm:LagOne:Averaging:BufElem fEstCNoInDbHz(%f) fNumLagOneProd(%f) dInitCarrFrqOfMsmtRptInHz(%f) dResidCplxDotProdSum(%f) dResidCplxCrossProdSum(%f)\n", *a2, a2[1], a2[4], a2[2], a2[3]);
        }
      }
    }
  }
  return this;
}

void BlueFin::GlMeSrdEstCarrPrm::RunSubTrk(uint64_t a1, double *a2, uint64_t a3, float *a4, float *a5, uint64_t a6, double a7, uint64_t a8, float *a9, uint64_t a10, char a11, unsigned __int8 a12, char a13, unsigned __int8 a14, char a15, unsigned __int8 a16, unsigned __int16 a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,unsigned __int8 *a21,char a22,unsigned int a23,unsigned __int8 a24,float *a25,unsigned char *a26,uint64_t a27)
{
  if (!*(unsigned char *)a19)
  {
    unsigned int v48 = "stAsicCarrPrmTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2939, "RunSubTrk", (char)"stAsicCarrPrmTrkMsmt.bValid");
    int v49 = 2939;
    goto LABEL_23;
  }
  int v27 = *a21;
  if ((v27 - 1) >= 0xBC)
  {
    unsigned int v48 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 2940, "RunSubTrk", (char)"otSignalId.GetSvId().isValid()");
    int v49 = 2940;
    goto LABEL_23;
  }
  float v29 = a5;
  double v30 = a4;
  uint64_t v31 = a1;
  int v32 = a24;
  unsigned int v33 = a23;
  int v34 = a14;
  if ((unsigned __int8 *)(a1 + 456) != a21)
  {
    *(unsigned char *)(a1 + 456) = v27;
    *(_DWORD *)(a1 + 46BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a21 + 1);
    *(_WORD *)(a1 + 46bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_WORD *)a21 + 4);
  }
  *(unsigned char *)(a1 + 468) = a22;
  *(double *)(a1 + 472) = a7;
  char v35 = *(unsigned char *)(a19 + 8);
  if (v35)
  {
    uint64_t v36 = *(void *)(a19 + 24);
    double v37 = *(float *)(a19 + 12);
    float v38 = 1.0 / (float)(*a4 + *a4);
    char v35 = 1;
  }
  else
  {
    float v38 = 0.0;
    uint64_t v36 = 0;
    double v37 = 0.0;
  }
  int v51 = *(unsigned __int8 *)(a19 + 170);
  int v39 = *(unsigned __int8 *)(a19 + 122);
  *(unsigned char *)a27 = v35;
  *(void *)(a27 + 8) = v36;
  *(_DWORD *)(a27 + 16) = 0;
  *(unsigned char *)(a27 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v35;
  *(double *)(a27 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v37;
  *(float *)(a27 + 32) = v38;
  if (*(unsigned char *)(a19 + 48))
  {
    uint64_t v41 = a3;
    uint64_t v43 = a9;
    int v44 = v39;
    BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaOpenLpLagOne(a1, a2, a3, a6, a19, a9, a25, a27, *a4, 1.0, a16, a17, a11, a12, 0, a11 | a14, a18, 0);
    int v39 = v44;
    unsigned int v33 = a23;
    a9 = v43;
    uint64_t v31 = a1;
    a3 = v41;
    float v29 = a5;
    int v32 = a24;
    double v30 = a4;
  }
  if (*(unsigned char *)(a19 + 88))
  {
    uint64_t v45 = a3;
    BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaClosedLpFll(v31, (uint64_t)a9, a3, v29, a6, a19, v39 != 0, 0, *v30, 1.0, 0, 0, 0, v33, v32, (uint64_t)a25, a27);
    a3 = v45;
    int v34 = a14;
  }
  if (*(unsigned char *)(a19 + 144)) {
    BlueFin::GlMeSrdEstCarrPrm::EstTrkCarrPrmViaClosedLpPll(v31, a3, a19, a20, v51 != 0, v32, (uint64_t)a25, a27, a2[1], *v30, v29[8]);
  }
  BlueFin::GlMeSrdEstCarrPrm::CrossCheckTrkCarrPrmEst(a6, a27, *(float *)&v36);
  BlueFin::GlMeSrdEstCarrPrm::SelectPublishedTrkCarrPrmEst(a6, (unsigned __int8 *)a27, v34, v32, (uint64_t)a26);
  if (*(unsigned char *)(a19 + 88))
  {
    a26[28] = 1;
    a26[29] = *(unsigned char *)(a27 + 121) ^ 1;
    a26[31] = 1;
    a26[32] = *(unsigned char *)(a27 + 160) ^ 1;
    a26[33] = *(unsigned char *)(a27 + 196) ^ 1;
  }
  if (!*(unsigned char *)(a19 + 8))
  {
    unsigned int v48 = "stAsicCarrPrmTrkMsmt.stAcqPrm.bValid";
    DeviceFaultNotify("glmesrd_carrprm.cpp", 3044, "RunSubTrk", (char)"stAsicCarrPrmTrkMsmt.stAcqPrm.bValid");
    int v49 = 3044;
LABEL_23:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_carrprm.cpp", v49, v48);
  }
  float v46 = a25[2];
  uint64_t v47 = (const BlueFin::GlSignalId *)*(unsigned __int8 *)a25;

  BlueFin::GlMeSrdEstCarrPrm::OverrideTrkCarrPrmRmse(v31, v47, (uint64_t)a26, v46);
}

void BlueFin::GlMeSrdEstCodePrm::~GlMeSrdEstCodePrm(BlueFin::GlMeSrdEstCodePrm *this)
{
  *(void *)this = &unk_270EBD078;
}

{
  *(void *)this = &unk_270EBD078;
  JUMPOUT(0x263E6DD80);
}

float BlueFin::GlMeSrdEstCodePrm::SelectPublishedCodePrmEst(uint64_t a1, int *a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8)
{
  *(_WORD *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(_DWORD *)(a8 + 16) = 0;
  *(unsigned char *)(a8 + 28) = 0;
  unsigned int v8 = *((unsigned __int16 *)a2 + 22);
  int v9 = (*(unsigned __int8 *)(a5 + 1) >> 5) & ~a6 & ((*(unsigned char *)(a5 + 3) & 0x10) >> 4) | ((*(unsigned char *)(a5 + 1) & 0x40) >> 6);
  if (v9 == 1)
  {
    *(unsigned char *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *(_DWORD *)(a1 + 28) = a3;
    unsigned int v10 = *(unsigned __int16 *)(a1 + 32);
    if (v8 > v10) {
      LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
    }
    *(_WORD *)(a1 + 32) = v10;
  }
  if (v8 >= a3) {
    goto LABEL_22;
  }
  if (*(unsigned char *)a4)
  {
    if (*(_DWORD *)(a1 + 24) >= 4u)
    {
      *(unsigned char *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      *(_DWORD *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    }
  }
  else
  {
    unsigned int v11 = *(unsigned __int16 *)(a1 + 32);
    if (v8 > v11) {
      LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v8;
    }
    *(_WORD *)(a1 + 32) = v11;
    if (*(_DWORD *)(a1 + 24) >= 4u)
    {
      *(unsigned char *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
      *(_DWORD *)(a1 + 28) = a3;
    }
  }
  unsigned int v12 = *(_DWORD *)(a1 + 28);
  BOOL v13 = a3 >= v12;
  unsigned int v14 = a3 - v12;
  if (!v13)
  {
    float v23 = "ulEpochCntInMs >= m_stCodePhsState.m_ulStartOfDllProbationPeriodInMs";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 834, "UpdateDllProbation", (char)"ulEpochCntInMs >= m_stCodePhsState.m_ulStartOfDllProbationPeriodInMs");
    int v24 = 834;
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    unsigned int v15 = *(unsigned __int16 *)(a1 + 32);
    if (v14 <= v15)
    {
      if (v8 <= v15) {
        __int16 v17 = *(_WORD *)(a1 + 32);
      }
      else {
        __int16 v17 = v8;
      }
      *(_WORD *)(a1 + 32) = v17;
LABEL_22:
      int v16 = 1;
      goto LABEL_23;
    }
  }
  int v16 = 0;
  *(unsigned char *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 32) = 0;
LABEL_23:
  char v18 = a6 & ~a7;
  int v19 = *a2;
  BOOL v20 = *a2 != 0;
  if ((v18 & 1) != 0 || v19)
  {
    unsigned __int8 v21 = 0;
    if (a2[13] < a3) {
      LOBYTE(v9) = 1;
    }
    do
    {
      if (v20)
      {
        ++v21;
        if (v19 == 2) {
          goto LABEL_36;
        }
        if (v19 != 1) {
          goto LABEL_44;
        }
      }
      else if ((v18 & 1) == 0)
      {
LABEL_44:
        float v23 = "0";
        DeviceFaultNotify("glmesrd_codeprm.cpp", 622, "SelectPublishedCodePrmEst", (char)"0");
        int v24 = 622;
        goto LABEL_42;
      }
      if (*(unsigned char *)a4)
      {
        if (!v16) {
          goto LABEL_40;
        }
        if ((v9 & 1) == 0)
        {
          if (v8 | *(unsigned __int16 *)(a1 + 32))
          {
LABEL_40:
            *(unsigned char *)a8 = 1;
            *(_DWORD *)(a8 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
            *(void *)(a8 + 8) = *(void *)(a4 + 8);
            float result = *(float *)(a4 + 16);
            *(float *)(a8 + 16) = result;
            return result;
          }
          float v23 = "dMaxDllPullinProbationTimeInMs > 0.0";
          DeviceFaultNotify("glmesrd_codeprm.cpp", 570, "SelectPublishedCodePrmEst", (char)"dMaxDllPullinProbationTimeInMs > 0.0");
          int v24 = 570;
LABEL_42:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_codeprm.cpp", v24, v23);
        }
      }
      char v18 = 0;
LABEL_36:
      int v19 = a2[v21];
      BOOL v20 = v19 != 0;
    }
    while (v19 || (v18 & 1) != 0);
  }
  return result;
}

void BlueFin::GlMeSrdEstCodePrm::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int *a6, unsigned __int8 *a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, unsigned __int8 a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!*(unsigned char *)a14)
  {
    int v24 = "stAsicCodePrmTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1096, "Run", (char)"stAsicCodePrmTrkMsmt.bValid");
    int v25 = 1096;
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a14 + 24))
  {
    int v24 = "stAsicCodePrmTrkMsmt.stClosedLpDll.bValid";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1097, "Run", (char)"stAsicCodePrmTrkMsmt.stClosedLpDll.bValid");
    int v25 = 1097;
    goto LABEL_16;
  }
  int v17 = *a7;
  if ((v17 - 1) >= 0xBC)
  {
    int v24 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1098, "Run", (char)"otSignalId.GetSvId().isValid()");
    int v25 = 1098;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_codeprm.cpp", v25, v24);
  }
  if ((unsigned __int8 *)(a1 + 8) != a7)
  {
    *(unsigned char *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a7 + 1);
    *(_WORD *)(a1 + 16) = *((_WORD *)a7 + 4);
  }
  int v30 = 0;
  char v31 = 0;
  uint64_t v27 = *(void *)(a14 + 16);
  v26[0] = 1;
  char v29 = 0;
  float v21 = __exp10f(*(float *)(a15 + 8) / 10.0);
  float v28 = sqrtf((float)((float)(a5[22] * a5[23])* (float)((float)(2.0 / (float)(v21 * (float)(a5[5] * (float)(2.0 - a5[23])))) + 1.0))/ (float)(v21 + v21));
  BlueFin::GlMeSrdEstCodePrm::SelectPublishedCodePrmEst(a1, a6, *(_DWORD *)(a14 + 4), (uint64_t)v26, a10, a12, a13, a16);
  *(unsigned char *)(a16 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a14 + 8);
  *(_DWORD *)(a16 + 32) = 0;
  *(_DWORD *)(a16 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 16777217;
  if (*((_DWORD *)a7 + 1) == 2)
  {
    BlueFin::GlMeSrdEstCodePrm::OverrideTrkCodePrmRmsev2022(a1, v22, v23, a15, a5, a16);
  }
  else
  {
    BlueFin::GlMeSrdEstCodePrm::OverrideTrkCodePrmRmse(a1, v22, v23, a15, (uint64_t)a5, a16);
  }
}

uint64_t BlueFin::GlMeSrdEstCodePrm::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)a7)
  {
    int v19 = "rstAsicSniffCodeMsmt.bValid";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1311, "Run", (char)"rstAsicSniffCodeMsmt.bValid");
    BOOL v20 = "glmesrd_codeprm.cpp";
    int v21 = 1311;
    goto LABEL_18;
  }
  int v8 = *a4;
  if ((v8 - 1) >= 0xBC)
  {
    int v19 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1312, "Run", (char)"otSignalId.GetSvId().isValid()");
    BOOL v20 = "glmesrd_codeprm.cpp";
    int v21 = 1312;
    goto LABEL_18;
  }
  if ((unsigned __int8 *)(result + 8) != a4)
  {
    *(unsigned char *)(result + 8) = v8;
    *(_DWORD *)(result + 12) = *((_DWORD *)a4 + 1);
    *(_WORD *)(result + 16) = *((_WORD *)a4 + 4);
  }
  double v9 = *(double *)(a7 + 8);
  int v10 = *(unsigned __int8 *)(a7 + 1);
  if (*(unsigned char *)(a7 + 1))
  {
    float v11 = *(double *)(a7 + 24) - *(double *)(a7 + 16);
    float v12 = 1.0 / (float)(2 * *(unsigned __int8 *)(a3 + 44));
    float v13 = (float)((float)(v11 / *(float *)(a6 + 4)) / (float)((float)(1.0 - v12) * 4.0)) * 0.5;
    *(float *)(a5 + 16) = v13;
    double v9 = v9 - (float)(v12 + v13);
  }
  if (*(unsigned __int16 *)(result + 16) >= 0x23Fu)
  {
    int v19 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 777, "GetChipsPerEpoch", (char)"IsValid()");
    BOOL v20 = "glsignalid.h";
    int v21 = 777;
    goto LABEL_18;
  }
  unsigned int v14 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * *(int *)(result + 12)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(result + 8)]];
  if (!v14)
  {
    int v19 = "ucChipsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
    BOOL v20 = "glsignalid.h";
    int v21 = 784;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v20, v21, v19);
  }
  double v15 = (double)v14;
  double v16 = v9 / (double)v14;
  BOOL v17 = v16 < 0.0;
  if (v16 == (double)(int)v16) {
    BOOL v17 = 0;
  }
  *(unsigned char *)a8 = 1;
  *(unsigned char *)(a8 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a7 + 2);
  *(double *)(a8 + 8) = v9 - (double)((int)v16 - v17) * v15;
  *(_DWORD *)(a8 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 3;
  float v18 = 0.0333;
  if (!v10) {
    float v18 = 1.0;
  }
  *(float *)(a8 + 16) = v18;
  return result;
}

unint64_t BlueFin::GlMeSrdEstCodePrm::PrintValidityMagSqrdBufElem(unint64_t this, float *a2, void *a3)
{
  if (((1 << (this >> 3)) & 0x2000800E) != 0 && BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v4 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)v4);
    if (this) {
      return GlCustomLog(v4, "%f ", *a2);
    }
  }
  return this;
}

unint64_t BlueFin::GlMeSrdEstCodePrm::PrintValidityEarlyLateBufElem(unint64_t this, uint64_t a2, void *a3)
{
  if (((1 << (this >> 3)) & 0x2000800E) != 0 && BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v4 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)v4);
    if (this) {
      return GlCustomLog(v4, "<%f %hu %u> ", *(float *)a2, *(unsigned __int16 *)(a2 + 4), *(unsigned __int8 *)(a2 + 6));
    }
  }
  return this;
}

double BlueFin::GlMeSrdEstCodePrm::CalcPromptMagSqrdDllValidityTestStatSummand(BlueFin::GlMeSrdEstCodePrm *this, void *a2, void *a3)
{
  if (!a2)
  {
    uint64_t v4 = "potBufElem != nullptr";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1695, "CalcPromptMagSqrdDllValidityTestStatSummand", (char)"potBufElem != nullptr");
    int v5 = 1695;
    goto LABEL_6;
  }
  if (this)
  {
    uint64_t v4 = "potTestStatParam == nullptr";
    DeviceFaultNotify("glmesrd_codeprm.cpp", 1696, "CalcPromptMagSqrdDllValidityTestStatSummand", (char)"potTestStatParam == nullptr");
    int v5 = 1696;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_codeprm.cpp", v5, v4);
  }
  return *(float *)a2;
}

void BlueFin::GlMeSrdCorrVecAccumulator::~GlMeSrdCorrVecAccumulator(BlueFin::GlMeSrdCorrVecAccumulator *this)
{
}

uint64_t BlueFin::GlMeSrdCorrVecAccumulator::GetCvecType(BlueFin::GlMeSrdCorrVecAccumulator *this)
{
  return *((unsigned int *)this + 2);
}

void *BlueFin::GlMeGridRsltsAndParams::CopyFrom(unsigned __int8 *a1, uint64_t a2, uint8x8_t a3)
{
  a3.i32[0] = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *((_WORD *)a1 + 2) = *(_WORD *)(a2 + 4);
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  if (*(unsigned char *)(a2 + 4))
  {
    unint64_t v5 = 0;
    uint64_t v6 = 12;
    do
    {
      memcpy(&a1[v6], (const void *)(a2 + v6), 4 * *a1);
      ++v5;
      v6 += 128;
    }
    while (v5 < *(unsigned __int8 *)(a2 + 4));
    unsigned __int8 v7 = *a1;
  }
  else
  {
    unsigned __int8 v7 = vmovl_u8(a3).u8[0];
  }
  memcpy(a1 + 4108, (const void *)(a2 + 4108), v7);
  size_t v8 = *(unsigned __int8 *)(a2 + 4);

  return memcpy(a1 + 4140, (const void *)(a2 + 4140), v8);
}

uint64_t BlueFin::GlMeCorrVecAndParams::SetCorrVec(uint64_t result, unsigned int a2, int a3, int a4, char a5, char a6, int *a7)
{
  if (a2 >= 9)
  {
    int v10 = "usCvecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 180, "SetCorrVec", (char)"usCvecLen <= MAX_CVEC_LEN");
    int v11 = 180;
    goto LABEL_11;
  }
  if (a3 >= 21)
  {
    int v10 = "etCvecType < NUM_CVEC_TYPES";
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 181, "SetCorrVec", (char)"etCvecType < NUM_CVEC_TYPES");
    int v11 = 181;
    goto LABEL_11;
  }
  if (!a4)
  {
    int v10 = "ucNumCvecsAveraged > 0";
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 182, "SetCorrVec", (char)"ucNumCvecsAveraged > 0");
    int v11 = 182;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", v11, v10);
  }
  if (a2)
  {
    uint64_t v7 = a2;
    size_t v8 = (_DWORD *)(result + 4);
    do
    {
      int v9 = *a7++;
      *v8++ = v9;
      --v7;
    }
    while (v7);
  }
  *(unsigned char *)float result = 1;
  *(_WORD *)(result + 36) = a2;
  *(_DWORD *)(result + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(unsigned char *)(result + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a4;
  *(unsigned char *)(result + 45) = a5;
  *(unsigned char *)(result + 46) = a6;
  return result;
}

uint64_t BlueFin::GlMePkFitParams::SetParams(uint64_t this, float a2, float a3, float a4, char a5)
{
  if (a2 < 0.0)
  {
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 594, "SetParams", (char)"fPkFitHeight >= 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 594, "fPkFitHeight >= 0");
  }
  double v5 = 0.5;
  if (a2 <= 0.0 && (double v5 = -0.5, a2 >= 0.0))
  {
    LOWORD(v6) = 0;
  }
  else
  {
    unsigned int v6 = (int)(v5 + a2);
    if (v6)
    {
      unsigned int v7 = __clz(v6);
      unsigned int v6 = v7 | (32 * (v6 << v7 >> 21));
    }
  }
  *(_WORD *)(this + 2) = v6;
  *(float *)(this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  *(float *)(this + 8) = a4;
  *(unsigned char *)(this + 12) = a5;
  *(unsigned char *)this = 1;
  return this;
}

uint64_t BlueFin::GlMeCorrVecAndParams::GetSrchCvecType(BlueFin::GlMeCorrVecAndParams *this)
{
  if (this == 1) {
    return 20;
  }
  if (this == 4) {
    return 7;
  }
  if (this != 2)
  {
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 238, "GetSrchCvecType", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 238, "0");
  }
  return 6;
}

uint64_t BlueFin::GlMeCorrVecContainer::GlMeCorrVecContainer(uint64_t result, uint64_t a2, char a3, int a4, double a5)
{
  *(void *)float result = &unk_270EBD118;
  *(unsigned char *)(result + 8) = *(unsigned char *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  *(_WORD *)(result + 16) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = v5;
  *(unsigned char *)(result + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3;
  *(_DWORD *)(result + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a4;
  *(double *)(result + 32) = a5;
  *(void *)(result + 74bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result + 64;
  *(_DWORD *)(result + 76BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(result + 752) = 0;
  *(_WORD *)(result + 756) = 0;
  for (uint64_t i = 64; i != 744; i += 68)
  {
    unsigned int v7 = (_WORD *)(*(void *)(result + 744) + i);
    *(v7 - 32) = 0;
    *((unsigned char *)v7 - 62) = 0;
    *(v7 - 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    *((_DWORD *)v7 - 6) = 21;
    *(v7 - 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *((unsigned char *)v7 - 18) = 0;
    *((unsigned char *)v7 - 16) = 0;
    *(void *)(v7 - 7) = 0;
    *(_DWORD *)((char *)v7 - 7) = 0;
    *unsigned int v7 = 0;
    *(_OWORD *)(v7 - 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0uLL;
    *(_OWORD *)(v7 - 22) = 0uLL;
  }
  return result;
}

uint64_t BlueFin::GlMeCorrVecContainer::GetWritableCorrVecAndParams(BlueFin::GlMeCorrVecContainer *this, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 338, "GetWritableCorrVecAndParams", (char)"ucIdx < MAX_NUM_CVECS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 338, "ucIdx < MAX_NUM_CVECS");
  }
  return *((void *)this + 93) + 68 * a2;
}

uint64_t BlueFin::GlMeCorrVecContainer::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v2;
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  uint64_t v34 = v3;
  if (v4 && v4 != 7)
  {
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 360, "SerializeImpl", (char)"ucVersion >= 7 && ucVersion <= 7");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 360, "ucVersion >= 7 && ucVersion <= 7");
  }
  int v36 = 13;
  char v37 = 7;
  uint64_t v38 = 0x1000000000000;
  char v35 = &unk_270EBA550;
  char v39 = 7;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v2 + 8)));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 12));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 20));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v35, *(_DWORD *)(v5 + 24));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v35, *(double *)(v5 + 32));
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = *(void *)(v5 + 744);
  do
  {
    int v9 = *(_DWORD *)(v8 + v6 + 40);
    if (*(unsigned char *)(v8 + v6))
    {
      if (v9 >= 21)
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 379, "SerializeImpl", (char)"rSlot.m_etCvecType < GlMeCorrVecAndParams::NUM_CVEC_TYPES");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 379, "rSlot.m_etCvecType < GlMeCorrVecAndParams::NUM_CVEC_TYPES");
      }
      if (!*(unsigned char *)(v8 + v6 + 44))
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 380, "SerializeImpl", (char)"rSlot.m_ucNumCvecsAveraged > 0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 380, "rSlot.m_ucNumCvecsAveraged > 0");
      }
      ++v7;
    }
    else
    {
      if (v9 != 21)
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 385, "SerializeImpl", (char)"rSlot.m_etCvecType == GlMeCorrVecAndParams::NUM_CVEC_TYPES");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 385, "rSlot.m_etCvecType == GlMeCorrVecAndParams::NUM_CVEC_TYPES");
      }
      if (*(unsigned char *)(v8 + v6 + 44))
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 386, "SerializeImpl", (char)"rSlot.m_ucNumCvecsAveraged == 0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 386, "rSlot.m_ucNumCvecsAveraged == 0");
      }
      if (*(unsigned char *)(v8 + v6 + 1))
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 387, "SerializeImpl", (char)"!rSlot.m_bHavePkFitResults");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 387, "!rSlot.m_bHavePkFitResults");
      }
      if (*(unsigned char *)(v8 + v6 + 2))
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 388, "SerializeImpl", (char)"!rSlot.m_bHaveCvecMetric");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 388, "!rSlot.m_bHaveCvecMetric");
      }
    }
    v6 += 68;
  }
  while (v6 != 680);
  if (!v7)
  {
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 392, "SerializeImpl", (char)"ucNumCvecs > 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 392, "ucNumCvecs > 0");
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, v7);
  uint64_t v10 = 0;
  uint64_t v11 = 4;
  do
  {
    uint64_t v12 = *(void *)(v5 + 744);
    if (*(unsigned char *)(v12 + 68 * v10))
    {
      uint64_t v13 = v12 + 68 * v10;
      __int16 v16 = *(unsigned __int8 *)(v13 + 1);
      uint64_t v15 = v13 + 1;
      __int16 v14 = v16;
      BOOL v17 = (unsigned char *)(v15 + 1);
      __int16 v18 = v16 | 2;
      if (*(unsigned char *)(v15 + 1)) {
        __int16 v14 = v18;
      }
      BOOL v20 = (_WORD *)(v15 + 35);
      unsigned int v19 = *(unsigned __int16 *)(v15 + 35);
      if (!*(_WORD *)(v15 + 35))
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 416, "SerializeImpl", (char)"rSlot.m_usCvecLen >= 1");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 416, "rSlot.m_usCvecLen >= 1");
      }
      if (v19 >= 9)
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 417, "SerializeImpl", (char)"rSlot.m_usCvecLen <= MAX_CVEC_LEN");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 417, "rSlot.m_usCvecLen <= MAX_CVEC_LEN");
      }
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v35, (16 * v19 - 16) | v14);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v12 + 68 * v10 + 40));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v12 + 68 * v10 + 44));
      if ((unsigned __int16)*v20 > 8u)
      {
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 428, "SerializeImpl", (char)"rSlot.m_usCvecLen <= _DIM(rSlot.m_afCvec)");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 428, "rSlot.m_usCvecLen <= _DIM(rSlot.m_afCvec)");
      }
      if (*v20)
      {
        unint64_t v21 = 0;
        do
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v35, *(float *)(v12 + v11 + 4 * v21++));
        while (v21 < (unsigned __int16)*v20);
      }
      if (*(unsigned char *)v15)
      {
        uint64_t v22 = v12 + 68 * v10;
        int v24 = *(unsigned __int8 *)(v22 + 48);
        uint64_t v23 = (unsigned char *)(v22 + 48);
        if (!v24)
        {
          DeviceFaultNotify("glmesrd_corrvec_container.cpp", 437, "SerializeImpl", (char)"rSlot.m_otPkFitResults.Valid()");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 437, "rSlot.m_otPkFitResults.Valid()");
        }
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v35, *(_WORD *)(v12 + 68 * v10 + 50));
        if (!*v23)
        {
          DeviceFaultNotify("glme_corvec.h", 68, "GetOffset", (char)"m_bValid");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_corvec.h", 68, "m_bValid");
        }
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v35, *(float *)(v12 + 68 * v10 + 52));
        if (!*v23)
        {
          DeviceFaultNotify("glme_corvec.h", 69, "GetGradient", (char)"m_bValid");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_corvec.h", 69, "m_bValid");
        }
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v35, *(float *)(v12 + 68 * v10 + 56));
        if (!*v23)
        {
          DeviceFaultNotify("glme_corvec.h", 70, "GetStatus", (char)"m_bValid");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_corvec.h", 70, "m_bValid");
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v12 + 68 * v10 + 60));
      }
      if (*v17) {
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v35, *(_WORD *)(v12 + 68 * v10 + 64));
      }
    }
    ++v10;
    v11 += 68;
  }
  while (v10 != 10);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 752));
  if (*(unsigned char *)(v5 + 752))
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 753));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 754));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 755));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 756));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 757));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v35, *(float *)(v5 + 760));
    LODWORD(v25) = *(unsigned __int8 *)(v5 + 752);
    if (v25 > 0x20)
    {
      DeviceFaultNotify("glmesrd_corrvec_container.cpp", 461, "SerializeImpl", (char)"m_otGridRslts.m_ucCvecLen <= GRID_MAX_TAPS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", 461, "m_otGridRslts.m_ucCvecLen <= GRID_MAX_TAPS");
    }
    if (*(unsigned char *)(v5 + 756))
    {
      unint64_t v26 = 0;
      do
      {
        BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 4892 + v26++));
        unint64_t v27 = *(unsigned __int8 *)(v5 + 756);
      }
      while (v26 < v27);
      LODWORD(v25) = *(unsigned __int8 *)(v5 + 752);
      if (*(unsigned char *)(v5 + 756))
      {
        unint64_t v28 = 0;
        uint64_t v29 = v5 + 764;
        int v30 = *(unsigned __int8 *)(v5 + 752);
        do
        {
          if (v30)
          {
            unint64_t v31 = 0;
            do
            {
              BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v35, *(_DWORD *)(v29 + 4 * v31++));
              unint64_t v25 = *(unsigned __int8 *)(v5 + 752);
            }
            while (v31 < v25);
            LOBYTE(v27) = *(unsigned char *)(v5 + 756);
            int v30 = *(unsigned __int8 *)(v5 + 752);
          }
          ++v28;
          v29 += 128;
        }
        while (v28 < v27);
      }
    }
    if (v25)
    {
      unint64_t v32 = 0;
      do
        BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v35, *(unsigned char *)(v5 + 4860 + v32++));
      while (v32 < *(unsigned __int8 *)(v5 + 752));
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v35, v34, 4);
  return 1;
}

uint64_t BlueFin::GlMeCorrVecContainer::Deserialize(BlueFin::GlMeCorrVecContainer *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 13 || *((unsigned __int8 *)a2 + 12) - 8 < 0xFFFFFFFE) {
    return 0;
  }
  uint64_t v5 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + BlueFin::GlSysLogEntry::GetU8(a2));
  unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  if ((v5 + 67) >= 0x44u)
  {
    uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * U8 - U8 + v8] == 255)
    {
      __int16 v7 = 575;
      unsigned int U8 = -1;
    }
    else
    {
      __int16 v7 = BlueFin::GlSignalId::s_ausGnss2signalId[v8]
         + v5
         - BlueFin::GlSvId::s_aucGnss2minSvId[v8]
         + BlueFin::GlSvId::s_aucGnss2numSvId[v8] * (_WORD)U8;
    }
  }
  else
  {
    __int16 v7 = 575;
  }
  *((unsigned char *)this + 8) = v5;
  *((_DWORD *)this + 3) = U8;
  *((_WORD *)this + 8) = v7;
  *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  unsigned int v9 = BlueFin::GlSysLogEntry::GetU8(a2);
  if (v9 > 0xA)
  {
    unsigned int v33 = "ucNumCvecs <= MAX_NUM_CVECS";
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 500, "Deserialize", (char)"ucNumCvecs <= MAX_NUM_CVECS");
    int v34 = 500;
    goto LABEL_39;
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 4;
    uint64_t v35 = v9;
    while (1)
    {
      uint64_t v12 = *((void *)this + 93);
      uint64_t v13 = v12 + 68 * v10;
      unsigned int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
      *(_DWORD *)(v13 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(unsigned char *)(v13 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(unsigned char *)(v13 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = U16 & 1;
      uint64_t v15 = (unsigned char *)(v13 + 1);
      *(unsigned char *)(v13 + 2) = (U16 & 2) != 0;
      __int16 v16 = (unsigned char *)(v13 + 2);
      *(unsigned char *)uint64_t v13 = 1;
      *(_WORD *)(v13 + 36) = (U16 >> 4) + 1;
      BOOL v17 = (unsigned __int16 *)(v13 + 36);
      if (U16 > 0x7F) {
        break;
      }
      unint64_t v18 = 0;
      do
        *(float *)(v12 + v11 + 4 * v18++) = BlueFin::GlSysLogEntry::GetF32(a2);
      while (v18 < *v17);
      if (*v15)
      {
        __int16 v19 = BlueFin::GlSysLogEntry::GetU16(a2);
        float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
        float v21 = BlueFin::GlSysLogEntry::GetF32(a2);
        char v22 = BlueFin::GlSysLogEntry::GetU8(a2);
        uint64_t v23 = v12 + 68 * v10;
        *(_WORD *)(v23 + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v19;
        *(float *)(v23 + 52) = F32;
        *(float *)(v23 + 56) = v21;
        *(unsigned char *)(v23 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v22;
        *(unsigned char *)(v23 + 48) = 1;
      }
      if (*v16) {
        *(_WORD *)(v12 + 68 * v10 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
      }
      ++v10;
      v11 += 68;
      if (v10 == v35) {
        goto LABEL_20;
      }
    }
    unsigned int v33 = "rSlot.m_usCvecLen <= MAX_CVEC_LEN";
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 517, "Deserialize", (char)"rSlot.m_usCvecLen <= MAX_CVEC_LEN");
    int v34 = 517;
LABEL_39:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_corrvec_container.cpp", v34, v33);
  }
LABEL_20:
  if (*((unsigned __int8 *)a2 + 12) > 6u)
  {
    int v24 = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 752) = v24;
    if (v24)
    {
      *((unsigned char *)this + 753) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 75bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 755) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 756) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 757) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((float *)this + 19BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetF32(a2);
      LODWORD(v25) = *((unsigned __int8 *)this + 752);
      if (v25 > 0x20)
      {
        unsigned int v33 = "m_otGridRslts.m_ucCvecLen <= GRID_MAX_TAPS";
        DeviceFaultNotify("glmesrd_corrvec_container.cpp", 555, "Deserialize", (char)"m_otGridRslts.m_ucCvecLen <= GRID_MAX_TAPS");
        int v34 = 555;
        goto LABEL_39;
      }
      if (*((unsigned char *)this + 756))
      {
        unint64_t v26 = 0;
        do
        {
          *((unsigned char *)this + v26++ + 4892) = BlueFin::GlSysLogEntry::GetS8(a2);
          unint64_t v27 = *((unsigned __int8 *)this + 756);
        }
        while (v26 < v27);
        LODWORD(v25) = *((unsigned __int8 *)this + 752);
        if (*((unsigned char *)this + 756))
        {
          unint64_t v28 = 0;
          uint64_t v29 = (char *)this + 764;
          int v30 = *((unsigned __int8 *)this + 752);
          do
          {
            if (v30)
            {
              unint64_t v31 = 0;
              do
              {
                *(_DWORD *)&v29[4 * v31++] = BlueFin::GlSysLogEntry::GetU32(a2);
                unint64_t v25 = *((unsigned __int8 *)this + 752);
              }
              while (v31 < v25);
              LOBYTE(v27) = *((unsigned char *)this + 756);
              int v30 = *((unsigned __int8 *)this + 752);
            }
            ++v28;
            v29 += 128;
          }
          while (v28 < v27);
        }
      }
      if (v25)
      {
        unint64_t v32 = 0;
        do
          *((unsigned char *)this + v32++ + 486BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetS8(a2);
        while (v32 < *((unsigned __int8 *)this + 752));
      }
    }
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    unsigned int v33 = "rEntry.DataSize() == rEntry.ReadIdx()";
    DeviceFaultNotify("glmesrd_corrvec_container.cpp", 574, "Deserialize", (char)"rEntry.DataSize() == rEntry.ReadIdx()");
    int v34 = 574;
    goto LABEL_39;
  }
  return 1;
}

void BlueFin::GlMeCorrVecContainer::~GlMeCorrVecContainer(BlueFin::GlMeCorrVecContainer *this)
{
}

void BlueFin::GlMeSrdEstCrossCorr::~GlMeSrdEstCrossCorr(BlueFin::GlMeSrdEstCrossCorr *this)
{
  *(void *)this = &unk_270EBD160;
}

{
  *(void *)this = &unk_270EBD160;
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdDspMeasAux::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 14;
  }
  int v8 = *(_DWORD *)(v2 + 36) - 1;
  uint64_t result = 0;
  switch(v8)
  {
    case 0:
      if (BlueFin::GlMeSrdDspMeasAux::isGarbage((BlueFin::GlMeSrdDspMeasAux *)v6))
      {
        uint64_t v12 = "!isGarbage()";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1183, "SerializeSearch", (char)"!isGarbage()");
        int v13 = 1183;
        goto LABEL_67;
      }
      if (!*(unsigned char *)(v6 + 40))
      {
        uint64_t v12 = "m_stSrchRslts.m_bValid";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1184, "SerializeSearch", (char)"m_stSrchRslts.m_bValid");
        int v13 = 1184;
        goto LABEL_67;
      }
      if (v5 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
      {
        if (v7 > 5)
        {
          int v15 = 89;
          char v16 = v7;
          uint64_t v17 = 0x1000000000000;
          __int16 v14 = &unk_270EBA550;
          char v18 = v7;
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v6 + 8)));
          if (v7 >= 8)
          {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 12));
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(v6 + 12)- *(int *)(v6 + 12)+ BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v6 + 8)]]);
          }
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 20));
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v6 + 24));
          if (v7 >= 7) {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 32));
          }
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, 1);
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 44));
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 48));
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 56));
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 52));
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 53));
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 40));
          BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v5, 4);
          return 1;
        }
        uint64_t v12 = "ucVersion >= 6";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1191, "SerializeSearch", (char)"ucVersion >= 6");
        int v13 = 1191;
LABEL_67:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dsp_meas_aux.cpp", v13, v12);
      }
      return 0;
    case 1:
      if (BlueFin::GlMeSrdDspMeasAux::isGarbage((BlueFin::GlMeSrdDspMeasAux *)v6))
      {
        uint64_t v12 = "!isGarbage()";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1040, "SerializeTrack", (char)"!isGarbage()");
        int v13 = 1040;
        goto LABEL_67;
      }
      uint64_t v10 = (char *)(v6 + 64);
      if (!*(unsigned char *)(v6 + 64))
      {
        uint64_t v12 = "m_stTrkRslts.m_bValid";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1041, "SerializeTrack", (char)"m_stTrkRslts.m_bValid");
        int v13 = 1041;
        goto LABEL_67;
      }
      if (!v5 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
        return 0;
      }
      if (v7 <= 5)
      {
        uint64_t v12 = "ucVersion >= 6";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1048, "SerializeTrack", (char)"ucVersion >= 6");
        int v13 = 1048;
        goto LABEL_67;
      }
      int v15 = 89;
      char v16 = v7;
      uint64_t v17 = 0x1000000000000;
      __int16 v14 = &unk_270EBA550;
      char v18 = v7;
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v6 + 8)));
      if (v7 >= 8)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 12));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(v6 + 12)- *(int *)(v6 + 12)+ BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v6 + 8)]]);
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 20));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v6 + 24));
      if (v7 >= 7) {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 32));
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, 2);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v6 + 192));
      if (v7 >= 0xA) {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v6 + 196));
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 84));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 76));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 80));
      for (uint64_t i = 0; i != 5; ++i)
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 88 + i));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 93));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 94));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 95));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 68));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 72));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 96));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 97));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 100));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 104));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 108));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 112));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 116));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 120));
      BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 183));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 184));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 185));
      if (v7 <= 8) {
        goto LABEL_37;
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 128));
      if (v7 >= 0xE) {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 132));
      }
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 136));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v6 + 152));
      if (v7 < 0xB) {
        goto LABEL_37;
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 73));
      if (v7 == 11) {
        goto LABEL_37;
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, 0);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, 0);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, 0.0);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, 0.0);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, 0.0);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *v10);
      if (v7 >= 0xD)
      {
        uint64_t v10 = (char *)(v6 + 124);
LABEL_37:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *v10);
      }
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v5, 4);
      return 1;
    case 2:
      return result;
    case 3:
      if (BlueFin::GlMeSrdDspMeasAux::isGarbage((BlueFin::GlMeSrdDspMeasAux *)v6))
      {
        uint64_t v12 = "!isGarbage()";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1147, "SerializeSubTrack", (char)"!isGarbage()");
        int v13 = 1147;
      }
      else if (*(unsigned char *)(v6 + 64))
      {
        if (!v5 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
          return 0;
        }
        if (v7 > 5)
        {
          int v15 = 89;
          char v16 = v7;
          uint64_t v17 = 0x1000000000000;
          __int16 v14 = &unk_270EBA550;
          char v18 = v7;
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v6 + 8)));
          if (v7 >= 8)
          {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 12));
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(v6 + 12)- *(int *)(v6 + 12)+ BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v6 + 8)]]);
          }
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 20));
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v6 + 24));
          if (v7 >= 7) {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v6 + 32));
          }
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, 4);
          BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v5, 4);
          return 1;
        }
        uint64_t v12 = "ucVersion >= 6";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1155, "SerializeSubTrack", (char)"ucVersion >= 6");
        int v13 = 1155;
      }
      else
      {
        uint64_t v12 = "m_stTrkRslts.m_bValid";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1148, "SerializeSubTrack", (char)"m_stTrkRslts.m_bValid");
        int v13 = 1148;
      }
      goto LABEL_67;
    default:
      uint64_t v12 = "0";
      DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1029, "SerializeImpl", (char)"0");
      int v13 = 1029;
      goto LABEL_67;
  }
}

uint64_t BlueFin::GlMeSrdDspMeasAux::Deserialize(BlueFin::GlMeSrdDspMeasAux *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 89 || *((unsigned __int8 *)a2 + 12) - 15 < 0xFFFFFFF3) {
    return 0;
  }
  uint64_t v5 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + BlueFin::GlSysLogEntry::GetU8(a2));
  if (*((unsigned __int8 *)a2 + 12) >= 8u)
  {
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    int v7 = BlueFin::GlSysLogEntry::GetU8(a2);
    uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
    if ((v5 + 67) > 0x43u)
    {
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * U8 - U8 + v8] == 255)
      {
        __int16 v9 = 575;
        unsigned int U8 = -1;
      }
      else
      {
        __int16 v9 = BlueFin::GlSignalId::s_ausGnss2signalId[v8]
           + v5
           - BlueFin::GlSvId::s_aucGnss2minSvId[v8]
           + BlueFin::GlSvId::s_aucGnss2numSvId[v8] * (_WORD)U8;
      }
    }
    else
    {
      __int16 v9 = 575;
    }
    *((unsigned char *)this + 8) = v5;
    *((_DWORD *)this + 3) = U8;
    *((_WORD *)this + 8) = v9;
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (int)U8 - (int)U8 + v8] != v7)
    {
      int v13 = "etSignalType == m_otSignalId.GetSignalType()";
      DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1237, "Deserialize", (char)"etSignalType == m_otSignalId.GetSignalType()");
      int v14 = 1237;
      goto LABEL_54;
    }
    goto LABEL_19;
  }
  if ((v5 + 67) < 0x44u)
  {
    int v10 = 0;
LABEL_17:
    __int16 v12 = 575;
    goto LABEL_18;
  }
  uint64_t v11 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v11] == 255)
  {
    int v10 = -1;
    goto LABEL_17;
  }
  int v10 = 0;
  __int16 v12 = BlueFin::GlSignalId::s_ausGnss2signalId[v11] + v5 - BlueFin::GlSvId::s_aucGnss2minSvId[v11];
LABEL_18:
  *((unsigned char *)this + 8) = v5;
  *((_DWORD *)this + 3) = v10;
  *((_WORD *)this + 8) = v12;
LABEL_19:
  *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 7u) {
    *((unsigned char *)this + 32) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
  }
  int v15 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 9) = v15;
  switch(v15)
  {
    case 1:
      if (*((unsigned __int8 *)a2 + 12) <= 5u)
      {
        int v13 = "0";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1262, "Deserialize", (char)"0");
        int v14 = 1262;
LABEL_54:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_dsp_meas_aux.cpp", v14, v13);
      }
      *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *((_WORD *)this + 26) = 0;
      *(int32x2_t *)((char *)this + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = vdup_n_s32(0x7F7FFFFFu);
      *((_DWORD *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      *((float *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetF32(a2);
      *((float *)this + 12) = BlueFin::GlSysLogEntry::GetF32(a2);
      *((float *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
      *((unsigned char *)this + 52) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      *((unsigned char *)this + 53) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      *((unsigned char *)this + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
      if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
      {
        int v13 = "rEntry.DataSize() == rEntry.ReadIdx()";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1419, "DeserializeSearch", (char)"rEntry.DataSize() == rEntry.ReadIdx()");
        int v14 = 1419;
        goto LABEL_54;
      }
LABEL_48:
      if (BlueFin::GlMeSrdDspMeasAux::isGarbage(this))
      {
        int v13 = "!isGarbage()";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1283, "Deserialize", (char)"!isGarbage()");
        int v14 = 1283;
        goto LABEL_54;
      }
      return 1;
    case 2:
      char v16 = (BOOL *)this + 64;
      BlueFin::GlMeSrdDspMeasAuxTrackRslts::Clear((uint64_t)this + 64);
      unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      if (U32 >= 0x80000)
      {
        int v13 = "(ulFlags & m_ulAllowableFlags) == ulFlags";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 660, "SetFlags", (char)"(ulFlags & m_ulAllowableFlags) == ulFlags");
        int v14 = 660;
        goto LABEL_54;
      }
      *((_DWORD *)this + 48) = U32;
      if (*((unsigned __int8 *)a2 + 12) < 0xAu) {
        goto LABEL_29;
      }
      unsigned int v18 = BlueFin::GlSysLogEntry::GetU32(a2);
      if (v18 >= 0x8000)
      {
        int v13 = "(ulFlags & m_ulAllowableCycleSlipFlags) == ulFlags";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 668, "SetCycleSlipFlags", (char)"(ulFlags & m_ulAllowableCycleSlipFlags) == ulFlags");
        int v14 = 668;
      }
      else
      {
        *((_DWORD *)this + 49) = v18;
LABEL_29:
        *((_DWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU8(a2);
        *((_DWORD *)this + 19) = BlueFin::GlSysLogEntry::GetU8(a2);
        uint64_t v19 = 0;
        *((_DWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2);
        do
          *((unsigned char *)this + v19++ + 88) = BlueFin::GlSysLogEntry::GetU8(a2);
        while (v19 != 5);
        *((unsigned char *)this + 93) = BlueFin::GlSysLogEntry::GetU8(a2);
        *((unsigned char *)this + 9bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
        *((unsigned char *)this + 95) = BlueFin::GlSysLogEntry::GetU8(a2);
        unsigned int v20 = *((unsigned __int8 *)a2 + 12);
        if (v20 > 3)
        {
          *((float *)this + 17) = BlueFin::GlSysLogEntry::GetF32(a2);
          *((unsigned char *)this + 72) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
          *((unsigned char *)this + 96) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
          *((unsigned char *)this + 97) = BlueFin::GlSysLogEntry::GetU8(a2);
          *((_DWORD *)this + 25) = BlueFin::GlSysLogEntry::GetU8(a2);
          *((float *)this + 26) = BlueFin::GlSysLogEntry::GetF32(a2);
          *((float *)this + 27) = BlueFin::GlSysLogEntry::GetF32(a2);
          *((float *)this + 28) = BlueFin::GlSysLogEntry::GetF32(a2);
          *((_DWORD *)this + 29) = BlueFin::GlSysLogEntry::GetU8(a2);
          if (*((unsigned __int8 *)a2 + 12) >= 5u) {
            *((float *)this + 3BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetF32(a2);
          }
          *((unsigned char *)this + 183) = BlueFin::GlSysLogEntry::GetS8(a2);
          *((unsigned char *)this + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
          *((unsigned char *)this + 185) = BlueFin::GlSysLogEntry::GetU8(a2);
          unsigned int v20 = *((unsigned __int8 *)a2 + 12);
          if (v20 >= 9)
          {
            *((_DWORD *)this + 32) = BlueFin::GlSysLogEntry::GetU8(a2);
            if (*((unsigned __int8 *)a2 + 12) >= 0xEu) {
              *((float *)this + 33) = BlueFin::GlSysLogEntry::GetF32(a2);
            }
            *((float *)this + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
            *((float *)this + 38) = BlueFin::GlSysLogEntry::GetF32(a2);
            unsigned int v20 = *((unsigned __int8 *)a2 + 12);
            if (v20 >= 0xB)
            {
              *((unsigned char *)this + 73) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
              unsigned int v20 = *((unsigned __int8 *)a2 + 12);
              if (v20 >= 0xC)
              {
                BlueFin::GlSysLogEntry::GetU8(a2);
                BlueFin::GlSysLogEntry::GetU8(a2);
                BlueFin::GlSysLogEntry::GetF32(a2);
                BlueFin::GlSysLogEntry::GetF32(a2);
                BlueFin::GlSysLogEntry::GetF32(a2);
                unsigned int v20 = *((unsigned __int8 *)a2 + 12);
              }
            }
          }
        }
        if (v20 <= 2)
        {
          char v23 = 0;
          *char v16 = 1;
        }
        else
        {
          BOOL v21 = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
          unsigned int v22 = *((unsigned __int8 *)a2 + 12);
          *char v16 = v21;
          if (v22 < 0xD) {
            char v23 = 0;
          }
          else {
            char v23 = BlueFin::GlSysLogEntry::GetU8(a2);
          }
        }
        *((unsigned char *)this + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v23;
        if (*((unsigned __int16 *)a2 + 11) == *((unsigned __int16 *)a2 + 10)) {
          goto LABEL_48;
        }
        int v13 = "rEntry.DataSize() == rEntry.ReadIdx()";
        DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1381, "DeserializeTrack", (char)"rEntry.DataSize() == rEntry.ReadIdx()");
        int v14 = 1381;
      }
      goto LABEL_54;
    case 3:
      int v13 = "0";
      DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1276, "Deserialize", (char)"0");
      int v14 = 1276;
      goto LABEL_54;
    case 4:
      BlueFin::GlMeSrdDspMeasAuxTrackRslts::Clear((uint64_t)this + 64);
      if (*((unsigned __int16 *)a2 + 11) == *((unsigned __int16 *)a2 + 10)) {
        goto LABEL_48;
      }
      int v13 = "rEntry.DataSize() == rEntry.ReadIdx()";
      DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1391, "DeserializeSubTrack", (char)"rEntry.DataSize() == rEntry.ReadIdx()");
      int v14 = 1391;
      goto LABEL_54;
    default:
      int v13 = "0";
      DeviceFaultNotify("glmesrd_dsp_meas_aux.cpp", 1279, "Deserialize", (char)"0");
      int v14 = 1279;
      goto LABEL_54;
  }
}

void BlueFin::GlMeSrdDspMeasAux::~GlMeSrdDspMeasAux(BlueFin::GlMeSrdDspMeasAux *this)
{
}

void BlueFin::GlMeSrdEstCNo::~GlMeSrdEstCNo(BlueFin::GlMeSrdEstCNo *this)
{
  *(void *)this = &unk_270EBD1D8;
}

{
  *(void *)this = &unk_270EBD1D8;
  JUMPOUT(0x263E6DD80);
}

void BlueFin::GlMeSrdEstCNo::Run(uint64_t a1, double *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, float *a6, uint64_t a7, __n128 a8)
{
  if (!*(unsigned char *)a5)
  {
    uint64_t v19 = "stAsicCNoSniffMsmt.bValid";
    DeviceFaultNotify("glmesrd_estcno.cpp", 349, "Run", (char)"stAsicCNoSniffMsmt.bValid");
    unsigned int v20 = "glmesrd_estcno.cpp";
    int v21 = 349;
    goto LABEL_23;
  }
  int v8 = *a4;
  if ((v8 - 1) >= 0xBC)
  {
    uint64_t v19 = "otSignalId.GetSvId().isValid()";
    DeviceFaultNotify("glmesrd_estcno.cpp", 350, "Run", (char)"otSignalId.GetSvId().isValid()");
    unsigned int v20 = "glmesrd_estcno.cpp";
    int v21 = 350;
    goto LABEL_23;
  }
  if ((unsigned __int8 *)(a1 + 20) == a4)
  {
    unsigned int v11 = *(unsigned __int16 *)(a1 + 28);
  }
  else
  {
    *(unsigned char *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
    *(_DWORD *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)a4 + 1);
    unsigned int v11 = *((unsigned __int16 *)a4 + 4);
    *(_WORD *)(a1 + 28) = v11;
  }
  if (v11 >= 0x23F)
  {
    uint64_t v19 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 692, "GetSecPerEpochWithTrkException", (char)"IsValid()");
    unsigned int v20 = "glsignalid.h";
    int v21 = 692;
    goto LABEL_23;
  }
  uint64_t v12 = *(int *)(a1 + 24);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 20);
  if (v12 != 1 || (a8.n128_u32[0] = 1.5, (v13 - 1) >= 0x20) && (v13 - 66) >= 0xA)
  {
    unsigned int v14 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v12
                                                                                 - v12
                                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[v13]];
    if (!v14)
    {
      uint64_t v19 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      unsigned int v20 = "glsignalid.h";
      int v21 = 685;
LABEL_23:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v20, v21, v19);
    }
    a8.n128_f64[0] = (double)v14 * 0.001;
    a8.n128_f32[0] = a8.n128_f64[0];
  }
  float v15 = *a2;
  *(unsigned char *)a7 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, __n128, float, float, float, float, float, double))(*(void *)a1 + 24))(a1, v24, v22, a8, *a6, *(float *)(a3 + 4), *(float *)(a3 + 4), v15, *(float *)(a5 + 8), 0.0);
  float v16 = v23;
  *(float *)(a7 + 12) = v23;
  if (*(unsigned __int16 *)(a1 + 28) >= 0x23Fu)
  {
    uint64_t v19 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 711, "GetSecPerEpochIndB", (char)"IsValid()");
    unsigned int v20 = "glsignalid.h";
    int v21 = 711;
    goto LABEL_23;
  }
  __int16 v17 = BlueFin::GlSignalId::s_assSignalIndexAndGnss2epochIndB[7 * *(int *)(a1 + 24)
                                                             + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a1 + 20)]];
  if (!v17)
  {
    uint64_t v19 = "ssEpochIndB != 0";
    DeviceFaultNotify("glsignalid.h", 718, "GetSecPerEpochIndB", (char)"ssEpochIndB != 0");
    unsigned int v20 = "glsignalid.h";
    int v21 = 718;
    goto LABEL_23;
  }
  float v18 = -(float)((float)v17 - (float)(log10f(v16) * 10.0));
  if (v18 < 7.0) {
    float v18 = 7.0;
  }
  *(float *)(a7 + 8) = v18;
  *(_DWORD *)(a7 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 3;
  *(_DWORD *)(a1 + 12) = 3;
}

float BlueFin::GlMeSrdAsicCorrVecTrkMsmt::CopyFrom(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (a1 == a2)
  {
    char v4 = *(unsigned char *)(a1 + 148);
    char v5 = *(unsigned char *)(a1 + 149);
    char v6 = *(unsigned char *)(a1 + 150);
  }
  else
  {
    BlueFin::GlMeSrdSatReportTrkCorrVec::CopyFrom(a1 + 4, (unsigned __int8 *)(a2 + 4));
    BlueFin::GlMeSrdSatReportTrkCorrVec::CopyFrom(a1 + 52, (unsigned __int8 *)(a2 + 52));
    BlueFin::GlMeSrdSatReportTrkCorrVec::CopyFrom(a1 + 100, (unsigned __int8 *)(a2 + 100));
    char v4 = *(unsigned char *)(a2 + 148);
    char v5 = *(unsigned char *)(a2 + 149);
    char v6 = *(unsigned char *)(a2 + 150);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
    *(_WORD *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)(a2 + 160);
  }
  *(unsigned char *)(a1 + 148) = v4;
  *(unsigned char *)(a1 + 149) = v5;
  *(unsigned char *)(a1 + 15BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6;
  *(_DWORD *)(a1 + 16bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a2 + 164);
  uint64_t v7 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v7;
  float result = *(float *)(a2 + 184);
  *(float *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = result;
  return result;
}

unsigned char *BlueFin::GlMeSrdAsicBitPhsTrkMsmt::Print(unsigned char *this)
{
  if (this[4] && this[12] >= 0x1Au)
  {
    uint64_t v1 = "stHistogram.ucEffBitIntvlInCaEpochs <= _DIM(stHistogram.afTotAccumHist)";
    DeviceFaultNotify("glmesrd_estimators_input_trk.cpp", 494, "Print", (char)"stHistogram.ucEffBitIntvlInCaEpochs <= _DIM(stHistogram.afTotAccumHist)");
    int v2 = 494;
    goto LABEL_8;
  }
  if (this[116] && this[124] >= 0x1Au)
  {
    uint64_t v1 = "stDeltaHistogram.ucEffBitIntvlInCaEpochs <= _DIM(stDeltaHistogram.afTotAccumHist)";
    DeviceFaultNotify("glmesrd_estimators_input_trk.cpp", 511, "Print", (char)"stDeltaHistogram.ucEffBitIntvlInCaEpochs <= _DIM(stDeltaHistogram.afTotAccumHist)");
    int v2 = 511;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_estimators_input_trk.cpp", v2, v1);
  }
  return this;
}

float BlueFin::GlMeSrdMultiPeakResults::ToPeGridMeas@<S0>(BlueFin::GlMeSrdMultiPeakResults *this@<X0>, const BlueFin::GlMeDSPMeas *a2@<X1>, uint64_t a3@<X8>, float result@<S0>)
{
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  unsigned int v4 = 575;
  *(_WORD *)(a3 + 8) = 575;
  if ((const BlueFin::GlMeDSPMeas *)((char *)a2 + 100) == (const BlueFin::GlMeDSPMeas *)a3)
  {
    unsigned int v5 = 0;
    uint64_t v6 = -1;
  }
  else
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 100);
    *(unsigned char *)a3 = v5;
    uint64_t v6 = *((int *)a2 + 26);
    *(_DWORD *)(a3 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v6;
    unsigned int v4 = *((unsigned __int16 *)a2 + 54);
    *(_WORD *)(a3 + 8) = v4;
  }
  uint64_t v7 = *((unsigned __int8 *)this + 1);
  *(unsigned char *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 12) = *((_DWORD *)a2 + 12);
  if (v7)
  {
    float result = *((float *)a2 + 14);
    uint64_t v8 = v5;
    unsigned int v9 = v5 - 52;
    double v10 = (double)(char)(v5 - 59);
    unsigned int v11 = (float *)(a3 + 56);
    uint64_t v12 = (float *)((char *)this + 20);
    if (v9 >= 0xE) {
      double v10 = -8.0;
    }
    while (1)
    {
      int v13 = *((_DWORD *)v12 - 2);
      *(v11 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = result;
      *(_DWORD *)unsigned int v11 = v13;
      *((void *)v11 - 3) = 0;
      *(v11 - 2) = 3.4028e38;
      if (v4 >= 0x23F) {
        break;
      }
      uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[v8];
      int v15 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v6 + v14];
      unsigned int v16 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v6 - v6 + v14];
      if (v15) {
        BOOL v17 = v16 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        float v23 = "ulChipsPerEpoch != 0 && ucMsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 799, "GetSecondsPerChip", (char)"ulChipsPerEpoch != 0 && ucMsPerEpoch != 0");
        int v24 = 799;
LABEL_18:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v24, v23);
      }
      double v18 = (double)v16 / (double)(1000 * v15);
      float v19 = v18 * *v12;
      double v20 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + v14]];
      *((double *)v11 - bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v18 * *(v12 - 1);
      double v21 = v20 + v10 * 562500.0;
      if (v14 != 2) {
        double v21 = v20;
      }
      float v22 = v21;
      *(v11 - bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(v12 - 4) / v22;
      *(v11 - 3) = v19;
      v11 += 10;
      v12 += 5;
      if (!--v7) {
        return result;
      }
    }
    float v23 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 791, "GetSecondsPerChip", (char)"IsValid()");
    int v24 = 791;
    goto LABEL_18;
  }
  return result;
}

uint64_t GlMeSrdSortPhase_Id(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 4) - *(float *)(a2 + 4);
  if (v2 >= 0.0) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = -1;
  }
  if (v2 > 0.0) {
    return 1;
  }
  else {
    return v3;
  }
}

void BlueFin::GlMeSrdEstLowTow::Run(uint64_t a1, int a2, int a3, int a4, BlueFin::GlSignalId *this, uint64_t a6, int a7, BlueFin::GlMeSrdLowTowMgr *a8, double a9, uint64_t a10)
{
  uint64_t v10 = a10;
  uint64_t v67 = *MEMORY[0x263EF8340];
  *(unsigned char *)a10 = 0;
  if (*((_DWORD *)a8 + 94) == 0x7FFFFFFF) {
    return;
  }
  if ((*((_DWORD *)a8 + 95) - 14) > 0x7C2 || *(unsigned char *)a6 == 0) {
    return;
  }
  if (BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this] != 2)
  {
    if (BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this])
    {
      int v59 = "0";
      DeviceFaultNotify("glmesrd_estlowtow.cpp", 114, "Run", (char)"0");
      int v60 = "glmesrd_estlowtow.cpp";
      int v61 = 114;
      goto LABEL_63;
    }
    int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(this);
    if (*((unsigned __int16 *)this + 4) < 0x23Fu)
    {
      int v19 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                                   - *((int *)this + 1)
                                                                                   + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]];
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                 - *((int *)this + 1)
                                                                 + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]])
      {
        unsigned int v20 = 6000;
        goto LABEL_14;
      }
LABEL_61:
      int v59 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      int v60 = "glsignalid.h";
      int v61 = 685;
      goto LABEL_63;
    }
LABEL_60:
    int v59 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v60 = "glsignalid.h";
    int v61 = 678;
    goto LABEL_63;
  }
  int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(this);
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu) {
    goto LABEL_60;
  }
  int v19 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                               - *((int *)this + 1)
                                                                               + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                              - *((int *)this + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]])
    goto LABEL_61;
  unsigned int v20 = 2000;
LABEL_14:
  int v21 = v19 * EpochPerSymbol;
  if (!(v19 * EpochPerSymbol))
  {
    int v59 = "usBitInMs != 0";
    DeviceFaultNotify("glmesrd_estlowtow.cpp", 117, "Run", (char)"usBitInMs != 0");
    int v60 = "glmesrd_estlowtow.cpp";
    int v61 = 117;
    goto LABEL_63;
  }
  int v22 = *(_DWORD *)(a6 + 400);
  unsigned int v64 = v22 * v21;
  int v23 = v22 * v21 - a7;
  if (v23) {
    a9 = (double)(__int16)v23 + a9;
  }
  *(_DWORD *)(a10 + 16) = *((_DWORD *)a8 + 94) % v20;
  *(double *)(a10 + 8) = a9;
  *(unsigned char *)a10 = 1;
  v65[0] = v22 - *(unsigned __int16 *)(a6 + 2);
  if (!*(unsigned char *)(a6 + 392))
  {
    if (!*(unsigned char *)(a6 + 394)) {
      return;
    }
    unsigned int v62 = v20;
    memset(&v65[1], 0, 32);
    *(_DWORD *)(a1 + 8) = 0;
    unsigned int v40 = *(unsigned __int8 *)(a6 + 396);
    *(unsigned char *)(a1 + 16) = v40;
    if (v40 <= 3)
    {
      if (!*(unsigned char *)(a6 + 395)) {
        goto LABEL_58;
      }
      double v41 = a9 * 1000.0;
      double v42 = fmod(v41, 4294967300.0);
      if (v41 > 4294967300.0) {
        double v41 = v42;
      }
      uint64_t v43 = 0;
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      double v46 = -fmod(-v41, 4294967300.0);
      if (v41 >= -4294967300.0) {
        double v46 = v41;
      }
      unsigned int v47 = v46 < 0.0 ? --v46 : v46;
      unsigned int v63 = v47;
      unsigned int v48 = (unsigned int *)(a6 + 264);
      do
      {
        uint64_t v49 = *(void *)(a1 + 1312);
        BlueFin::GlMeSrdEstLowTow::UpdateLms(v49 + v43, (BlueFin::GlMeSrdLowTowMgr *)v63, v64);
        if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a1 + 12)) {
          BlueFin::GlMeSrdLowTowMgr::Initialize((BlueFin::GlMeSrdLowTowMgr *)(v49 + v43));
        }
        if ((BlueFin::GlSignalId *)(v49 + v43) != this)
        {
          uint64_t v50 = v49 + v43;
          *(unsigned char *)uint64_t v50 = *(unsigned char *)this;
          *(_DWORD *)(v50 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)this + 1);
          *(_WORD *)(v50 + 8) = *((_WORD *)this + 4);
        }
        BlueFin::GlMeSrdEstLowTow::StoreBitsInBuffer(v49 + v43, (BlueFin::GlMeSrdLowTowMgr *)*(unsigned __int16 *)(a6 + 2), v48, (unsigned int *)v65[0]);
        BlueFin::GlMeSrdEstLowTow::SearchPattern((BlueFin::GlMeSrdEstLowTow *)(v49 + v43), a8, v51);
        if (*(unsigned char *)(v49 + v43 + 13))
        {
          int v53 = &v65[2 * (int)v45 + 1];
          *(unsigned char *)int v53 = v44;
          v53[1] = *(_DWORD *)(v49 + v43 + 16);
          unint64_t v45 = (v45 + 1);
        }
        ++v44;
        v43 += 320;
        v48 += 8;
      }
      while (v44 < *(unsigned __int8 *)(a6 + 395));
      if ((int)v45 <= 0
        || (BlueFin::GlStdLib::QsortImpl((char *)&v65[1], (void *)v45, 8u, (uint64_t (*)(char *, char *))GlMeSrdSortPhase_Id, (int (*)(const void *, const void *))v66, v52), unint64_t v27 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6, v54 = *(void *)(a1 + 1312), v55 = LOBYTE(v65[2 * (v45 - 1) + 1]), v56 = v54 + 320 * LOBYTE(v65[2 * (v45 - 1) + 1]), v58 = *(unsigned __int8 *)(v56 + 13), v57 = (unsigned char *)(v56 + 13), !v58))
      {
LABEL_58:
        *(_DWORD *)(a1 + 12) = 0;
        return;
      }
      *unint64_t v57 = 0;
      int v36 = v65[2 * (v45 - 1) + 2];
      int v37 = *(_DWORD *)(v54 + 320 * v55 + 24);
      *(_DWORD *)(a1 + 12) = 0;
      uint64_t v10 = a10;
      unsigned int v20 = v62;
      goto LABEL_31;
    }
    int v59 = "m_ucPrebitFllBestPhase < GlMeSrdEstLowTow::GLMESRD_ESTLOWTOW_LT_MAX_PHASES";
    DeviceFaultNotify("glmesrd_estlowtow.cpp", 199, "Run", (char)"m_ucPrebitFllBestPhase < GlMeSrdEstLowTow::GLMESRD_ESTLOWTOW_LT_MAX_PHASES");
    int v60 = "glmesrd_estlowtow.cpp";
    int v61 = 199;
LABEL_63:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v60, v61, v59);
  }
  uint64_t v24 = *(void *)(a1 + 1312);
  unsigned int v25 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v26 = v24 + 320 * *(unsigned __int8 *)(a1 + 16);
  unint64_t v27 = "meManager::SetCurrentAsicLms(%u)  TimeSources:{";
  double v28 = a9 * 1000.0;
  double v29 = fmod(v28, 4294967300.0);
  if (v28 <= 4294967300.0) {
    double v29 = v28;
  }
  if (v29 < -4294967300.0) {
    double v29 = -fmod(-v29, 4294967300.0);
  }
  if (v29 < 0.0) {
    unint64_t v30 = --v29;
  }
  else {
    unint64_t v30 = v29;
  }
  BlueFin::GlMeSrdEstLowTow::UpdateLms(v26, (BlueFin::GlMeSrdLowTowMgr *)v30, v64);
  *(_DWORD *)(a1 + 8) = 1;
  if (*(_DWORD *)(a1 + 12) >= 2u) {
    BlueFin::GlMeSrdLowTowMgr::Initialize((BlueFin::GlMeSrdLowTowMgr *)v26);
  }
  if ((BlueFin::GlSignalId *)v26 != this)
  {
    *(unsigned char *)uint64_t v26 = *(unsigned char *)this;
    *(_DWORD *)(v26 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)this + 1);
    *(_WORD *)(v26 + 8) = *((_WORD *)this + 4);
  }
  BlueFin::GlMeSrdEstLowTow::StoreBitsInBuffer(v26, (BlueFin::GlMeSrdLowTowMgr *)*(unsigned __int16 *)(a6 + 2), (unsigned int *)(a6 + 8), (unsigned int *)v65[0]);
  BlueFin::GlMeSrdEstLowTow::SearchPattern((BlueFin::GlMeSrdEstLowTow *)v26, a8, v31);
  uint64_t v32 = v24 + 320 * v25;
  int v34 = *(unsigned __int8 *)(v32 + 13);
  unsigned int v33 = (unsigned char *)(v32 + 13);
  if (!v34)
  {
    *(_DWORD *)(a1 + 12) = 1;
    return;
  }
  unsigned char *v33 = 0;
  uint64_t v35 = v24 + 320 * v25;
  int v36 = *(_DWORD *)(v35 + 16);
  int v37 = *(_DWORD *)(v35 + 24);
  *(_DWORD *)(a1 + 12) = 1;
LABEL_31:
  double v38 = *(double *)(v10 + 8) * *((double *)v27 + 189);
  int v39 = (int)(v38 + -0.5);
  if (v38 >= 0.0) {
    int v39 = 0;
  }
  if (v38 > 0.0) {
    int v39 = (int)(v38 + 0.5);
  }
  *(_DWORD *)(v10 + 16) = (v39 - v37) % v20;
  *(unsigned char *)(v10 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
  *(_DWORD *)(v10 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v36;
  *(unsigned char *)(a1 + 17) = 1;
}

uint64_t BlueFin::GlMeSrdEstLowTow::UpdateLms(uint64_t this, BlueFin::GlMeSrdLowTowMgr *a2, int a3)
{
  if (!this)
  {
    DeviceFaultNotify("glmesrd_estlowtow.cpp", 870, "UpdateLms", (char)"potLtm != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_estlowtow.cpp", 870, "potLtm != nullptr");
  }
  *(unsigned char *)(this + 316) = 1;
  *(_DWORD *)(this + 308) = a2;
  *(_DWORD *)(this + 312) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdEstLowTow::StoreBitsInBuffer(uint64_t this, BlueFin::GlMeSrdLowTowMgr *a2, unsigned int *a3, unsigned int *a4)
{
  if (this)
  {
    unsigned int v4 = a4;
    unsigned int v6 = a2;
    uint64_t v7 = this;
    if (*(_DWORD *)(this + 124) + *(_DWORD *)(this + 40) + *(unsigned __int16 *)(this + 306) > a4) {
      BlueFin::GlMeSrdLowTowMgr::Initialize((BlueFin::GlMeSrdLowTowMgr *)this);
    }
    v28[0] = 0;
    v28[1] = 0;
    char v29 = 0;
    v31[0] = 0;
    uint64_t v30 = 0;
    *(void *)((char *)v31 + 5) = 0;
    BlueFin::GlBitBuffer::Initialize((uint64_t)v28, a3, ((v6 + 31) >> 3) & 0x3FC);
    this = BlueFin::GlBitBuffer::Limit((uint64_t)v28, v6);
    unsigned int v8 = *(_DWORD *)(v7 + 124);
    if (v8)
    {
      unsigned int v9 = *(_DWORD *)(v7 + 40) + v8 + *(unsigned __int16 *)(v7 + 306);
      BOOL v10 = v4 >= v9;
      __int16 v11 = v4 - v9;
      if (!v10)
      {
        uint64_t v12 = "ulBitWrdEpochCntInBits >= TruePosition(potLtm)";
        DeviceFaultNotify("glmesrd_estlowtow.cpp", 373, "StoreBitsInBuffer", (char)"ulBitWrdEpochCntInBits >= TruePosition(potLtm)");
        int v13 = 373;
        goto LABEL_22;
      }
    }
    else
    {
      __int16 v11 = 0;
      *(_DWORD *)(v7 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
      *(_DWORD *)(v7 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v4;
    }
    int v14 = (v11 & ~(v11 >> 31)) + HIDWORD(v30) - LODWORD(v31[0]);
    int v15 = (uint64_t *)(v7 + 96);
    if ((int)(*(_DWORD *)(v7 + 120) - (v8 + (unsigned __int16)v14)) < 0)
    {
      if (v8 <= 0x3F)
      {
        uint64_t v12 = "potLtm->m_otBitValBuf.Position() >= 64";
        DeviceFaultNotify("glmesrd_estlowtow.cpp", 416, "UpdateBuffers", (char)"potLtm->m_otBitValBuf.Position() >= 64");
        int v13 = 416;
LABEL_22:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_estlowtow.cpp", v13, v12);
      }
      *(_WORD *)(v7 + 306) = v8 + *(_WORD *)(v7 + 306) - 64;
      unsigned int v16 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position(v7 + 96, v8 - 64);
      unsigned int v17 = BlueFin::GlBitBuffer::GetU(v16, 0x20u);
      unsigned int v18 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)(v7 + 96), 0x20u);
      int v19 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position(v7 + 48, *(_DWORD *)(v7 + 76) - 64);
      unsigned int v20 = BlueFin::GlBitBuffer::GetU(v19, 0x20u);
      unsigned int v21 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)(v7 + 48), 0x20u);
      *(_DWORD *)(v7 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      *(unsigned char *)(v7 + 136) = 0;
      *(_DWORD *)(v7 + 76) = 0;
      *(unsigned char *)(v7 + 88) = 0;
      int v22 = BlueFin::GlBitBuffer::PutU((uint64_t *)(v7 + 96), v17, 0x20u);
      BlueFin::GlBitBuffer::PutU(v22, v18, 0x20u);
      int v23 = BlueFin::GlBitBuffer::PutU((uint64_t *)(v7 + 48), v20, 0x20u);
      this = (uint64_t)BlueFin::GlBitBuffer::PutU(v23, v21, 0x20u);
      *(unsigned char *)(v7 + 30bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    }
    if ((_WORD)v14)
    {
      uint64_t v24 = (uint64_t *)(v7 + 48);
      do
      {
        if ((v14 & 0xFFE0) != 0) {
          __int16 v25 = 32;
        }
        else {
          __int16 v25 = v14;
        }
        if (HIDWORD(v30) - LODWORD(v31[0]) >= (unsigned __int16)v14)
        {
          unsigned int v26 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v28, v25);
          unsigned int v27 = -1;
        }
        else
        {
          unsigned int v26 = 0;
          unsigned int v27 = 0;
        }
        BlueFin::GlBitBuffer::PutU(v15, v26, v25);
        this = (uint64_t)BlueFin::GlBitBuffer::PutU(v24, v27, v25);
        LOWORD(v1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v14 - v25;
      }
      while ((_WORD)v14);
    }
  }
  return this;
}

void BlueFin::GlMeSrdEstLowTow::SearchPattern(BlueFin::GlMeSrdEstLowTow *this, BlueFin::GlMeSrdLowTowMgr *a2, const BlueFin::GlMeSrdTowAssistHolder *a3)
{
  v79[1] = *(int8x8_t *)MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 316))
  {
    unsigned int v4 = *((_DWORD *)this + 11) - *((_DWORD *)this + 10);
    if (v4 + 65 <= *((_DWORD *)this + 31))
    {
      unsigned int v6 = *((unsigned __int16 *)this + 60);
      unsigned int v7 = (unsigned __int16)*((_DWORD *)this + 31);
      uint64_t v70 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Limit((uint64_t)this + 96, v7);
      BlueFin::GlBitBuffer::Position((uint64_t)v70, v4);
      int v74 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Limit((uint64_t)this + 48, v7);
      BlueFin::GlBitBuffer::Position((uint64_t)v74, v4);
      int v9 = BlueFin::GlMeSrdEstLowTow::Bits2Epochs((BlueFin::GlMeSrdEstLowTow *)(*((_DWORD *)this + 31)+ *((_DWORD *)this + 10)+ *((unsigned __int16 *)this + 153)), this, v8);
      int v10 = *((_DWORD *)this + 77);
      int v71 = *((_DWORD *)this + 78);
      unsigned int v11 = *((_DWORD *)a2 + 94);
      int v73 = *((_DWORD *)a2 + 96);
      int v77 = 0;
      long long v76 = 0u;
      memset(v75, 0, sizeof(v75));
      uint64_t v12 = (BlueFin::GlMeSrdLowTowMgr *)((char *)a2 + 16);
      uint64_t v13 = BlueFin::GlArray::Get((BlueFin::GlMeSrdLowTowMgr *)((char *)a2 + 16), *(unsigned __int8 *)this);
      if (v13) {
        int v14 = *(unsigned __int16 *)(v13 + 2);
      }
      else {
        int v14 = 0x4000;
      }
      uint64_t v15 = BlueFin::GlArray::Get(v12, *(unsigned __int8 *)this);
      if (v15) {
        int v16 = *(unsigned __int8 *)(v15 + 6);
      }
      else {
        int v16 = 4;
      }
      uint64_t v17 = BlueFin::GlArray::Get(v12, *(unsigned __int8 *)this);
      if (v17) {
        int v18 = *(unsigned __int8 *)(v17 + 5);
      }
      else {
        int v18 = 2;
      }
      uint64_t v19 = BlueFin::GlArray::Get(v12, *(unsigned __int8 *)this);
      unsigned int v68 = v6;
      unsigned int v69 = v7;
      if (v19) {
        int v20 = *(unsigned __int8 *)(v19 + 4);
      }
      else {
        int v20 = 2;
      }
      if (BlueFin::ctXps::BuildXP((BlueFin::ctXps *)v75, v11, v14, v16, v18, v20)) {
        float v21 = 0.8;
      }
      else {
        float v21 = 0.89;
      }
      int v22 = v70;
      __int32 v23 = BlueFin::GlBitBuffer::GetU(v70, 0x20u);
      v79[0].i32[0] = v23;
      __int32 v24 = BlueFin::GlBitBuffer::GetU(v70, 0x20u);
      v79[0].i32[1] = v24;
      __int32 v25 = BlueFin::GlBitBuffer::GetU(v74, 0x20u);
      v78.i32[0] = v25;
      unsigned int v26 = (BlueFin::ctXps *)BlueFin::GlBitBuffer::GetU(v74, 0x20u);
      v78.i32[1] = (int)v26;
      int v27 = *((_DWORD *)this + 31);
      if (*((_DWORD *)this + 30) != v27)
      {
        __int32 v33 = (int)v26;
        int v34 = v10 + v9 - v71;
        unsigned int v35 = 6000 * ((v11 + v34 - v73 + 3000) / 0x1770);
        if (v35 <= 0x240C83FF) {
          unsigned int v36 = 6000 * ((v11 + v34 - v73 + 3000) / 0x1770);
        }
        else {
          unsigned int v36 = v35 - 604800000;
        }
        do
        {
          unsigned int v37 = (v36 + 3000) / 0x1770;
          if (v36 + 3000 <= 0x240C6C8F) {
            int v38 = 1;
          }
          else {
            int v38 = -100799;
          }
          unsigned int v39 = v38 + v37;
          if (v38 + v37 == DWORD2(v76))
          {
            uint64_t v40 = 0;
          }
          else if (v39 == HIDWORD(v76))
          {
            uint64_t v40 = 1;
          }
          else
          {
            if (v39 != v77)
            {
              GlCustomLog(12, "<LtsMgr%i::Search> Reset search (ulNearestTow 0x%x tow(0) 0x%x)\n", *(unsigned __int8 *)this, v39, DWORD2(v76));
              BlueFin::GlMeSrdLowTowMgr::Initialize(this);
              return;
            }
            uint64_t v40 = 2;
          }
          float v42 = BlueFin::ctXps::Xorr(v26, v79, &v78, (int8x8_t *)v75 + v40 + 1, (int8x8_t *)&v76);
          if (v42 > 0.71)
          {
            float v43 = *((float *)this + 4);
            if (v43 == -3.4028e38)
            {
              *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
              *((unsigned char *)this + 13) = v42 > v21;
              *((_DWORD *)this + 6) = v34 + 40;
              *((_DWORD *)this + 7) = v39 - 1;
              *((_DWORD *)this + 8) = v24;
              *((_DWORD *)this + 9) = v23;
              *((float *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v42;
              uint64_t v72 = *(unsigned __int8 *)this;
              BlueFin::GlMeSrdEstLowTow::Bits2Epochs((BlueFin::GlMeSrdEstLowTow *)(v27+ *((_DWORD *)this + 10)+ *((unsigned __int16 *)this + 153)), this, v41);
              int v22 = v70;
              GlCustomLog(15, "<LtsMgr%i::Match#%i> (DblChk=%c) (Tow=%u) (Lms=%u) (EpCnt=%u,%u) (MatCnt=%f) (FrmId=%i) (DcdTLM=%08x) (DcdHOW=%08x)\n", v72, 1);
            }
            else if (v43 > -3.4028e38)
            {
              int v56 = *((_DWORD *)this + 6);
              uint64_t v55 = *((unsigned int *)this + 7);
              int v57 = 6000 * (v39 - 1 - v55);
              int v58 = (v34 + 40 - v56) % 6000;
              if (v58 < 0) {
                int v58 = -v58;
              }
              if (v58 > 1 || v57 - (v34 + 40 - v56) > 1 || v57 < 6000 || v42 <= (float)(v21 + -0.1))
              {
                if (v42 <= v43)
                {
                  GlCustomLog(15, "<LtsMgr%i::Match#REJECTED!> (Tow=%u) (Lms=%u) (EpCnt=%u) (Cnt=%f) (FrmId=%i) (DcdTLM=%08x) (DcdHOW=%08x)\n", *(unsigned __int8 *)this);
                }
                else
                {
                  unsigned __int8 v62 = *((unsigned char *)this + 20) + 1;
                  *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v62;
                  *((unsigned char *)this + 13) = v42 > v21;
                  *((_DWORD *)this + 6) = v34 + 40;
                  *((_DWORD *)this + 7) = v39 - 1;
                  *((_DWORD *)this + 8) = v24;
                  *((_DWORD *)this + 9) = v23;
                  *((float *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v42;
                  uint64_t v63 = 84;
                  if (v42 > v21) {
                    uint64_t v63 = 70;
                  }
                  GlCustomLog(15, "<LtsMgr%i::Match#%i> (DblChk=%c) (Tow=%u,%u) (Lms=%u,%u) (EpCnt=%u,%u) (Cnt=%f,%f) (FrmId=%i,%i) (DcdTLM=%08x,%08x) (DcdHOW=%08x,%08x)\n", *(unsigned __int8 *)this, v62, v63, v39 - 1, v39 - 1);
                }
              }
              else
              {
                unsigned __int8 v64 = *((unsigned char *)this + 20) + 1;
                *((unsigned char *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v64;
                *((unsigned char *)this + 13) = 1;
                GlCustomLog(15, "<LtsMgr%i::Match#%i> (Tow=%u,%u) (Lms=%u,%u) (EpCnt=%u,%u) (Cnt=%f,%f) (FrmId=%i,%i) (DcdTLM=%08x,%08x) (DcdHOW=%08x,%08x)\n", *(unsigned __int8 *)this, v64, v55, v39 - 1);
              }
            }
          }
          __int32 v23 = __PAIR64__(v23, v24) >> 31;
          v79[0].i32[0] = v23;
          __int32 v44 = BlueFin::GlBitBuffer::GetU(v22, 1u) & 1 | (2 * v24);
          v79[0].i32[1] = v44;
          __int32 v25 = __PAIR64__(v25, v33) >> 31;
          v78.i32[0] = v25;
          __int32 v45 = BlueFin::GlBitBuffer::GetU(v74, 1u) & 1 | (2 * v33);
          v78.i32[1] = v45;
          int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(this);
          if (*((unsigned __int16 *)this + 4) >= 0x23Fu) {
            goto LABEL_65;
          }
          uint64_t v47 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this];
          unsigned int v48 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1) - *((int *)this + 1)];
          int v49 = v48[v47];
          if (!v48[v47]) {
            goto LABEL_66;
          }
          int v50 = EpochPerBit;
          ++*((_DWORD *)this + 11);
          unsigned int v26 = (BlueFin::ctXps *)BlueFin::GlSignalId::GetEpochPerBit(this);
          if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
          {
LABEL_65:
            float v65 = "IsValid()";
            DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
            float v66 = "glsignalid.h";
            int v67 = 678;
            goto LABEL_67;
          }
          if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                      - *((int *)this + 1)
                                                                      + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]])
          {
LABEL_66:
            float v65 = "ucMsPerEpoch != 0";
            DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
            float v66 = "glsignalid.h";
            int v67 = 685;
            goto LABEL_67;
          }
          v34 += v49 * v50;
          int v51 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                                       - *((int *)this + 1)
                                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]]
              * v26;
          unsigned int v52 = v51 + v36;
          unsigned int v53 = v36 + 604799999 + v51;
          if (v52 >= 0x240C83FF) {
            int v54 = 604799999;
          }
          else {
            int v54 = v52;
          }
          unsigned int v36 = v52 - 604800000 * ((v53 - v54) / 0x240C8400);
          int v27 = *((_DWORD *)this + 31);
          __int32 v33 = v45;
          __int32 v24 = v44;
        }
        while (*((_DWORD *)this + 30) != v27);
      }
      uint64_t v28 = BlueFin::GlBitBuffer::Limit((uint64_t)v22, v68);
      BlueFin::GlBitBuffer::Position(v28, v69);
      uint64_t v29 = BlueFin::GlBitBuffer::Limit((uint64_t)v74, v68);
      BlueFin::GlBitBuffer::Position(v29, v69);
      unsigned int v31 = BlueFin::GlMeSrdEstLowTow::Bits2Epochs((BlueFin::GlMeSrdEstLowTow *)*((unsigned int *)this + 11), this, v30);
      if (v31 > BlueFin::GlMeSrdEstLowTow::Bits2Epochs((BlueFin::GlMeSrdEstLowTow *)(*((_DWORD *)this + 31)+ *((_DWORD *)this + 10)+ *((unsigned __int16 *)this + 153)), this, v32))
      {
        float v65 = "Bits2Epochs(potLtm->m_ulBitBufRdEpCntInBits, potLtm->m_otSignalId) <= TimeOfPosition(potLtm)";
        DeviceFaultNotify("glmesrd_estlowtow.cpp", 787, "SearchPattern", (char)"Bits2Epochs(potLtm->m_ulBitBufRdEpCntInBits, potLtm->m_otSignalId) <= TimeOfPosition(potLtm)");
        float v66 = "glmesrd_estlowtow.cpp";
        int v67 = 787;
LABEL_67:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v66, v67, v65);
      }
    }
  }
}

uint64_t BlueFin::GlMeSrdEstLowTow::Bits2Epochs(BlueFin::GlMeSrdEstLowTow *this, BlueFin::GlSignalId *a2, const BlueFin::GlSignalId *a3)
{
  int v4 = (int)this;
  int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(a2);
  if (*((unsigned __int16 *)a2 + 4) >= 0x23Fu)
  {
    unsigned int v7 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v8 = 678;
    goto LABEL_6;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                              - *((int *)a2 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]])
  {
    unsigned int v7 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v8 = 685;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v8, v7);
  }
  return EpochPerBit
       * v4
       * BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 1)
                                                                                              - *((int *)a2 + 1)
                                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2]];
}

float *BlueFin::Sinc2NonlinearFit::GetSinc2Model(float *this, int *a2, double a3, double a4, double a5)
{
  float v5 = this[1] * 64.0;
  if (v5 > 0.0)
  {
    double v6 = v5;
    double v7 = 0.5;
LABEL_6:
    int v8 = (int)(v6 + v7);
    goto LABEL_7;
  }
  if (v5 < 0.0)
  {
    double v6 = v5;
    double v7 = -0.5;
    goto LABEL_6;
  }
  int v8 = 0;
LABEL_7:
  uint64_t v9 = 0;
  int v10 = -v8;
  do
  {
    if (v10 >= 0) {
      unsigned int v11 = v10;
    }
    else {
      unsigned int v11 = -v10;
    }
    if (v11 > 0x1C0)
    {
LABEL_12:
      int v12 = 0;
      goto LABEL_18;
    }
    LOWORD(a5) = BlueFin::Sinc2NonlinearFit::m_ausSinc2LUT[v11];
    *(float *)&a5 = (float)(*this * (float)LODWORD(a5)) * 0.000015259;
    if (*(float *)&a5 <= 0.0)
    {
      if (*(float *)&a5 >= 0.0) {
        goto LABEL_12;
      }
      a5 = *(float *)&a5 + -0.5;
    }
    else
    {
      a5 = *(float *)&a5 + 0.5;
    }
    int v12 = (int)a5;
LABEL_18:
    a2[v9] = v12;
    v10 += 64;
    ++v9;
  }
  while (v9 != 8);
  return this;
}

uint64_t BlueFin::Sinc2NonlinearFit::Fit(BlueFin::Sinc2NonlinearFit *this, const int *a2)
{
  unsigned int v2 = 0;
  LODWORD(v3) = *a2;
  for (uint64_t i = 1; i != 8; ++i)
  {
    int v5 = a2[i];
    BOOL v6 = v5 <= (int)v3;
    if (v5 <= (int)v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v5;
    }
    if (!v6) {
      unsigned int v2 = i;
    }
  }
  *(float *)this = (float)(int)v3;
  if (v2)
  {
    if (v2 == 7)
    {
      float v7 = 6.5;
    }
    else
    {
      int v8 = a2[v2];
      int v9 = a2[v2 - 1];
      int v10 = v8 - v9;
      int v11 = a2[v2 + 1];
      int v12 = v8 - v11;
      if (v11 >= v9) {
        int v13 = v10;
      }
      else {
        int v13 = v12;
      }
      if (v11 < v9) {
        int v12 = v10;
      }
      float v14 = fminf((float)(v13 - v12)/ (float)((float)((float)((float)v13 + (float)((float)v12 * 0.225)) + 0.000001)+ (float)((float)((float)v13 + (float)((float)v12 * 0.225)) + 0.000001)), 0.5);
      float v15 = v14 * v14;
      if (v11 < v9) {
        float v14 = -v14;
      }
      *(float *)this = (float)(int)v3 + (float)((float)(v15 * (float)((float)(v15 * -0.4033) + 1.1028)) * (float)v13);
      float v7 = v14 + (float)v2;
    }
  }
  else
  {
    float v7 = 0.5;
  }
  *((float *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v7;
  return v3;
}

float BlueFin::Sinc2NonlinearFit::CalculateNorm(BlueFin::Sinc2NonlinearFit *this, const int *a2, double a3, double a4, double a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  BlueFin::Sinc2NonlinearFit::GetSinc2Model((float *)this, v11, a3, a4, a5);
  unint64_t v6 = 0;
  float v7 = 0.0;
  do
  {
    float32x4_t v8 = vmulq_f32((float32x4_t)BlueFin::Sinc2NonlinearFit::METRIC_WEIGHTS[v6 / 4], vcvtq_f32_s32(vsubq_s32(*(int32x4_t *)&a2[v6], *(int32x4_t *)&v11[v6])));
    float32x4_t v9 = vmulq_f32(v8, v8);
    float v7 = (float)((float)((float)(v7 + v9.f32[0]) + v9.f32[1]) + v9.f32[2]) + v9.f32[3];
    v6 += 4;
  }
  while (v6 != 8);
  return sqrtf(v7);
}

void BlueFin::GlMeSrdEstMPF::PrepareResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v19 = 0;
  uint64_t v5 = 16;
  uint64_t v6 = 28;
  do
  {
    uint64_t v7 = *(void *)(a1 + 104);
    int v8 = *(unsigned __int8 *)(a2 + v4);
    *(unsigned char *)(v7 + v5 - 16) = v8;
    if (v8)
    {
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xCF);
      }
      int v9 = BlueFin::Sinc2NonlinearFit::Fit((BlueFin::Sinc2NonlinearFit *)&v19, (const int *)(a2 + v6));
      if (v9 < 1) {
        goto LABEL_9;
      }
      int v13 = v9;
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xCF);
      }
      float v14 = BlueFin::Sinc2NonlinearFit::CalculateNorm((BlueFin::Sinc2NonlinearFit *)&v19, (const int *)(a2 + v6), v10, v11, v12);
      float v15 = (float *)(v7 + v5);
      *(v15 - 3) = v14 / (float)v13;
      int v16 = *(_DWORD *)(a2 + 4 * v4 + 8);
      float v17 = *(float *)&v19;
      *(v15 - 2) = (float)(*((float *)&v19 + 1) + -4.0) * 25.0;
      *((_DWORD *)v15 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v16;
      float v18 = (float)(v17 * 50.0) / (float)*(unsigned int *)(a2 + 328);
      *float v15 = v18;
      if (v18 <= 1.0) {
LABEL_9:
      }
        *(unsigned char *)(v7 + v5 - 16) = 0;
    }
    ++v4;
    v5 += 20;
    v6 += 60;
  }
  while (v5 != 116);
}

void BlueFin::GlMeSrdEstMPF::MPFLogic(BlueFin::GlMeSrdEstMPF *this, BlueFin::GlMeSrdMPFResults *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  *((_DWORD *)a2 + 5) = 1;
  *((unsigned char *)a2 + 16) = -1;
  uint64_t v3 = *((void *)this + 13);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = -20;
  do
  {
    uint64_t v6 = (float *)((char *)a2 + v5);
    if (*(unsigned char *)(v4 - 8))
    {
      v6[16] = *(float *)v4 + *(float *)(v4 + 4);
      v6[11] = *(float *)(v4 - 4);
      int v7 = *(_DWORD *)(v4 + 8);
    }
    else
    {
      v6[16] = 0.0;
      v6[11] = -1.0;
      int v7 = 0;
    }
    v4 += 20;
    *(_DWORD *)((char *)a2 + v5 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
    v5 += 4;
  }
  while (v5);
  unsigned __int8 v8 = 0;
  unsigned __int8 v9 = 0;
  uint64_t v42 = 0;
  memset(v41, 0, sizeof(v41));
  float v10 = 0.0;
  float v11 = 0.0;
  do
  {
    uint64_t v12 = v3 + v5;
    if (*(unsigned char *)(v3 + v5))
    {
      float v13 = *(float *)(v12 + 16);
      if (v13 >= 100.0)
      {
        *((void *)v41 + v8) = v12;
        float v11 = v11 + *(float *)(v3 + v5 + 4);
        ++v8;
      }
      ++v9;
      float v10 = v10 + v13;
    }
    v5 += 20;
  }
  while (v5 != 100);
  if (v8 < 3u)
  {
    *((_DWORD *)a2 + 5) = 0;
    float v14 = "Too few strongs";
LABEL_49:
    *(void *)a2 = v14;
    *((_DWORD *)a2 + 2) = 0;
    return;
  }
  char v15 = 0;
  float v16 = v11 / (float)v8;
  *((float *)a2 + 3) = v16;
  uint64_t v17 = 1;
  do
  {
    if (*(float *)(*((void *)v41 + v17) + 4) < *(float *)(*((void *)v41 + v15) + 4)) {
      char v15 = v17;
    }
    ++v17;
  }
  while (v8 != v17);
  *((unsigned char *)a2 + 16) = -51 * ((*((void *)v41 + v15) - v3) >> 2);
  if (v16 > 0.4)
  {
    *((_DWORD *)a2 + 5) = 3;
    float v14 = "Too high average metric";
    goto LABEL_49;
  }
  float v18 = v10 / (float)v9;
  if (v18 <= 1584.9)
  {
    float v21 = 0.6;
  }
  else
  {
    float v19 = log10f(v18 / 1584.9) * 10.0;
    float v20 = (float)(v19 * -0.05) + 0.4;
    if (v20 < 0.15) {
      float v20 = 0.15;
    }
    if (v16 > v20)
    {
      *((_DWORD *)a2 + 5) = 3;
      float v14 = "Too high average metric for strong signal";
      goto LABEL_49;
    }
    float v21 = (float)(v19 * -0.05) + 0.6;
    if (v21 < 0.3) {
      float v21 = 0.3;
    }
  }
  uint64_t v22 = 0;
  uint64_t v23 = *(void *)&v41[0];
  if ((v8 & 0xFE) != 0) {
    uint64_t v24 = v8;
  }
  else {
    uint64_t v24 = 1;
  }
  float v25 = 0.0;
  do
  {
    unsigned int v26 = (float *)*((void *)v41 + v22);
    if (v26[1] > v21)
    {
      *((_DWORD *)a2 + 5) = 3;
      float v14 = "Too high metric value";
      goto LABEL_49;
    }
    float v27 = v26[2] + (float)(v26[3] - *(float *)(v23 + 12));
    v40[v22] = v27;
    float v25 = v25 + v27;
    ++v22;
  }
  while (v24 != v22);
  if (v18 > 1584.9)
  {
    *((_DWORD *)a2 + 5) = 1;
    float v14 = "High signal level";
    goto LABEL_49;
  }
  unsigned __int8 v28 = 0;
  float v29 = 0.0;
  uint64_t v30 = v40;
  unsigned int v31 = v41;
  float v32 = v25 / (float)v8;
  do
  {
    float v33 = *(float *)(*(void *)v31 + 8) - v32;
    if (v33 >= 0.0) {
      float v34 = *(float *)(*(void *)v31 + 8) - v32;
    }
    else {
      float v34 = -v33;
    }
    float v35 = 1.0;
    if (v34 >= 10.0) {
      float v35 = (float)(v33 * v33) / 100.0;
    }
    BOOL v36 = (float)(v35 * *(float *)(*(void *)v31 + 4)) <= 0.45;
    float v37 = *v30++;
    float v38 = v37;
    if (!v36) {
      ++v28;
    }
    float v29 = v29 + (float)((float)(v38 - v32) * (float)(v38 - v32));
    unsigned int v31 = (_OWORD *)((char *)v31 + 8);
    --v24;
  }
  while (v24);
  if (v28 > 2u)
  {
    *((_DWORD *)a2 + 5) = 3;
    float v14 = "Too many gained metric exceed threshold";
    goto LABEL_49;
  }
  float v39 = sqrtf(v29 / (float)(v8 - 1));
  if (v39 > 3.0)
  {
    if (v39 <= 7.0)
    {
      *((_DWORD *)a2 + 5) = 2;
      *(void *)a2 = "std(freq_delta) exceeds threshold";
      *((float *)a2 + 2) = v39;
      return;
    }
    *((_DWORD *)a2 + 5) = 3;
    float v14 = "Too big std(freq_delta)";
    goto LABEL_49;
  }
}

void BlueFin::GlMeSrdEstMPF::Run(BlueFin::GlMeSrdEstMPF *a1, uint64_t a2, BlueFin::GlMeSrdMPFResults *a3)
{
  if ((*(_DWORD *)(a2 + 332) & 0xFFE0F8) != 0x650028)
  {
    DeviceFaultNotify("glmesrd_mpf.cpp", 502, "Run", (char)"meas.m_settings.bits.points == MPF_POINTS && meas.m_settings.bits.fstep_hz == 25 && meas.m_settings.bits.cpoint == 5");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_mpf.cpp", 502, "meas.m_settings.bits.points == MPF_POINTS && meas.m_settings.bits.fstep_hz == 25 && meas.m_settings.bits.cpoint == 5");
  }
  BlueFin::GlMeSrdEstMPF::PrepareResults((uint64_t)a1, a2);

  BlueFin::GlMeSrdEstMPF::MPFLogic(a1, a3);
}

void BlueFin::GlMeSrdEstMultipath::~GlMeSrdEstMultipath(BlueFin::GlMeSrdEstMultipath *this)
{
  *(void *)this = &unk_270EBD248;
}

{
  *(void *)this = &unk_270EBD248;
  JUMPOUT(0x263E6DD80);
}

char *BlueFin::GlMeSrdEstMultipath::GetStr(unsigned int a1)
{
  if (a1 >= 6)
  {
    DeviceFaultNotify("glmesrd_multipath.cpp", 706, "GetStr", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_multipath.cpp", 706, "0");
  }
  return off_2655D8478[a1];
}

void BlueFin::GlMeSrdMultipathProbationMgr::~GlMeSrdMultipathProbationMgr(BlueFin::GlMeSrdMultipathProbationMgr *this)
{
  *(void *)this = &unk_270EBD268;
}

{
  *(void *)this = &unk_270EBD268;
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlComStressTestMgr::StartRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    DeviceFaultNotify("gl_comstress_test_mgr.cpp", 35, "StartRequest", (char)"pReq");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_test_mgr.cpp", 35, "pReq");
  }
  if (*(_DWORD *)(a2 + 16) != 16) {
    goto LABEL_28;
  }
  if (a3 && (*(_WORD *)(a3 + 136408) || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a3 + 137648))))
  {
    GlCustomLog(11, "Error - ComStressTest should be the only request\n");
    uint64_t v5 = 2;
LABEL_29:
    float v18 = *(void (**)(uint64_t, uint64_t))(a2 + 40);
    if (v18) {
      v18(a2, v5);
    }
    float v19 = *(void (**)(uint64_t, uint64_t))(a2 + 56);
    if (v19) {
      v19(a2, v5);
    }
    BlueFin::GlRequestBase::Destroy(a2);
    BlueFin::GlComStressTestMgr::DisposeComponents((BlueFin::GlComStressTestMgr *)a1);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 3689))
  {
    uint64_t v6 = *(uint64_t (***)(uint64_t))(a1 + 8);
    BlueFin::GlPeObjFactory::m_potGlPeObjFactory = (uint64_t)v6;
    if (*(void *)(a1 + 3680)) {
      goto LABEL_28;
    }
    GlSettingImpl = BlueFin::GlPeObjFactory::MakeGlSettingImpl(v6);
    *(void *)(a1 + 368BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = GlSettingImpl;
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (!*(unsigned char *)(a1 + 3689)) {
        goto LABEL_28;
      }
    }
    else
    {
      float v20 = GlSettingImpl;
      float v21 = *(BlueFin::GlPeEngineCallBacks **)(a1 + 16);
      uint64_t v22 = (void (*)(void, BlueFin::GlSettingsImpl *))*((void *)v21 + 2);
      if (v22)
      {
        v22(*((void *)v21 + 1), GlSettingImpl);
        float v20 = *(BlueFin::GlSettingsImpl **)(a1 + 3680);
        float v21 = *(BlueFin::GlPeEngineCallBacks **)(a1 + 16);
      }
      BlueFin::GlUtils::m_pInstance = (uint64_t)BlueFin::GlPeObjFactory::MakeGlUtils(*(uint64_t (***)(uint64_t))(a1 + 8), v20, v21);
      *(unsigned char *)(a1 + 3689) = 1;
    }
  }
  if (*(void *)(a1 + 3672))
  {
    GlCustomLog(11, "Error - ComStressTest is already running\n");
    uint64_t v5 = 4;
    goto LABEL_29;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  unsigned __int8 v9 = *(unsigned int (**)(void, void))(v8 + 72);
  if (v9 && !*(unsigned char *)(v8 + 296))
  {
    if (!v9(*(void *)(v8 + 8), 0))
    {
      *(unsigned char *)(v8 + 296) = 1;
      goto LABEL_16;
    }
    GlCustomLog(11, "Error - Cannot turn ASIC on\n");
LABEL_28:
    uint64_t v5 = 5;
    goto LABEL_29;
  }
LABEL_16:
  float v10 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  v10[273] = (*(uint64_t (**)(void))(**(void **)v10 + 48))();
  *(_DWORD *)(a1 + 3696) = 0;
  int v11 = *(_DWORD *)(a2 + 88);
  if (!v11) {
    int v11 = *(_DWORD *)(a1 + 3704);
  }
  *(_DWORD *)(a2 + 88) = v11;
  int v12 = *(_DWORD *)(a2 + 92);
  if (!v12) {
    int v12 = *(_DWORD *)(a1 + 3708);
  }
  *(_DWORD *)(a2 + 92) = v12;
  int v13 = *(__int16 *)(a2 + 22);
  *(_DWORD *)(a1 + 3692) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 1000 * v13;
  if ((BlueFin::GlComStressImpl::StartTest((BlueFin::GlComStressImpl *)(a1 + 24), *(_DWORD *)(a2 + 88), *(_DWORD *)(a2 + 92), *(_DWORD *)(a2 + 100)) & 1) == 0)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v17 = *(void (**)(void, void))(v16 + 80);
    if (v17)
    {
      v17(*(void *)(v16 + 8), 0);
      *(unsigned char *)(v16 + 296) = 0;
    }
    goto LABEL_28;
  }
  *(unsigned char *)(a1 + 370BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 3672) = a2;
  float v14 = *(void (**)(uint64_t, void))(a2 + 40);
  if (v14) {
    v14(a2, 0);
  }
  return 1;
}

uint64_t BlueFin::GlComStressTestMgr::DisposeComponents(BlueFin::GlComStressTestMgr *this)
{
  if (*((void *)this + 460))
  {
    unsigned int v2 = *(void (**)(void))(*((void *)this + 1) + 8);
    if (v2) {
      v2();
    }
    *((void *)this + 46BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  if (BlueFin::GlUtils::m_pInstance) {
    BlueFin::GlPeObjFactory::DisposeGlUtils(*((void *)this + 1));
  }
  uint64_t result = (*(uint64_t (**)(void, void, void *))(**((void **)this + 2) + 80))(*((void *)this + 2), 0, &str_5_17);
  BlueFin::GlPeObjFactory::m_potGlPeObjFactory = 0;
  *((unsigned char *)this + 3689) = 0;
  return result;
}

uint64_t BlueFin::GlComStressTestMgr::StopRequest(void *a1, uint64_t a2)
{
  if (!a2)
  {
    DeviceFaultNotify("gl_comstress_test_mgr.cpp", 100, "StopRequest", (char)"pReq");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_test_mgr.cpp", 100, "pReq");
  }
  if (*(_DWORD *)(a2 + 16) != 16 || a1[459] != a2) {
    return 0;
  }
  BlueFin::GlComStressImpl::StopTest((BlueFin::GlComStressImpl *)(a1 + 3));
  uint64_t v5 = a1[2];
  uint64_t v6 = *(void (**)(void, void))(v5 + 80);
  if (v6)
  {
    v6(*(void *)(v5 + 8), 0);
    *(unsigned char *)(v5 + 296) = 0;
  }
  int v7 = *(void (**)(uint64_t))(a2 + 56);
  if (v7) {
    v7(a2);
  }
  BlueFin::GlRequestBase::Destroy(a2);
  BlueFin::GlComStressTestMgr::DisposeComponents((BlueFin::GlComStressTestMgr *)a1);
  a1[459] = 0;
  return 1;
}

uint64_t BlueFin::GlComStressTestMgr::CheckRequestStop(BlueFin::GlComStressTestMgr *this)
{
  if (*(__int16 *)(*((void *)this + 459) + 22) < 0)
  {
    if (!*((_DWORD *)this + 924)) {
      goto LABEL_9;
    }
    BOOL v4 = 0;
    goto LABEL_7;
  }
  unsigned int v2 = (*(uint64_t (**)(BlueFin::GlComStressTestMgr *))(*(void *)this + 24))(this);
  unsigned int v3 = *((_DWORD *)this + 923);
  BOOL v4 = v2 > v3;
  if (*((_DWORD *)this + 924))
  {
LABEL_7:
    if (*((unsigned char *)this + 3688) || v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (v2 > v3) {
    goto LABEL_10;
  }
LABEL_9:
  if (*((unsigned char *)this + 3700))
  {
LABEL_10:
    BlueFin::GlComStressTestMgr::StopRequest(this, *((void *)this + 459));
    *((void *)this + 459) = 0;
    (*(void (**)(BlueFin::GlComStressTestMgr *, uint64_t))(*(void *)this + 16))(this, 0xFFFFFFFFLL);
    return 1;
  }
  return 0;
}

uint64_t BlueFin::GlComStressTestMgr::Tick(uint64_t this)
{
  if (*(void *)(this + 3672))
  {
    uint64_t v1 = this;
    this = BlueFin::GlComStressTestMgr::CheckRequestStop((BlueFin::GlComStressTestMgr *)this);
    if ((this & 1) == 0)
    {
      BlueFin::GlComStressImpl::Tick((BlueFin::GlComStressImpl *)(v1 + 24));
      return BlueFin::GlComStressTestMgr::CheckRequestStop((BlueFin::GlComStressTestMgr *)v1);
    }
  }
  return this;
}

uint64_t BlueFin::GlComStressTestMgr::ChipData_GRABSNQ_612249(uint64_t this, unsigned __int8 *a2, unsigned __int16 a3)
{
  if (*(void *)(this + 3672))
  {
    uint64_t v5 = this;
    this = BlueFin::GlComStressTestMgr::CheckRequestStop((BlueFin::GlComStressTestMgr *)this);
    if ((this & 1) == 0)
    {
      BlueFin::GlComStressTestMgr::SerializeAsic2HostIO((BlueFin::GlComStressTestMgr *)this, a2);
      BlueFin::GlComStressImpl::ProcessBriPacket((BlueFin::GlComStressImpl *)(v5 + 24), a2, a3);
      return BlueFin::GlComStressTestMgr::CheckRequestStop((BlueFin::GlComStressTestMgr *)v5);
    }
  }
  return this;
}

uint64_t BlueFin::GlComStressTestMgr::SerializeAsic2HostIO(BlueFin::GlComStressTestMgr *this, unsigned __int8 *a2)
{
  uint64_t result = MEMORY[0x270FA5388](this, a2);
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    LODWORD(v5) = v4;
    uint64_t v6 = v3;
    int v8 = 75;
    char v9 = 1;
    uint64_t v10 = 0x1000000000000;
    int v7 = &unk_270EBA2F0;
    char v11 = 1;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v7, v4);
    if (v5)
    {
      uint64_t v5 = v5;
      do
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *v6++);
        --v5;
      }
      while (v5);
    }
    return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v7, 0, 4);
  }
  return result;
}

uint64_t BlueFin::GlComStressTestMgr::OnTimerSet(uint64_t this, int a2)
{
  if (a2 < 0)
  {
    *(unsigned char *)(this + 369BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  }
  else
  {
    *(unsigned char *)(this + 369BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    return (*(uint64_t (**)(void))(**(void **)(this + 16) + 48))();
  }
  return this;
}

uint64_t BlueFin::GlComStressTestMgr::OnTimeMsRequest(BlueFin::GlComStressTestMgr *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 56))();
}

uint64_t BlueFin::GlComStressTestMgr::OnDataToAsic(BlueFin::GlComStressTestMgr *this, unsigned __int8 *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  unsigned int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v13 = 74;
    char v14 = 1;
    uint64_t v15 = 0x1000000000000;
    uint64_t v12 = &unk_270EBA2F0;
    char v16 = 1;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, v3);
    if (v4)
    {
      uint64_t v8 = v4;
      char v9 = v6;
      do
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *v9++);
        --v8;
      }
      while (v8);
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, 0, 4);
  }
  uint64_t v10 = *(uint64_t (**)(void))(**(void **)(v7 + 16) + 16);

  return v10();
}

uint64_t BlueFin::GlComStressTestMgr::OnException(BlueFin::GlComStressTestMgr *this, const char *a2, uint64_t a3, const char *a4)
{
  return BlueFin::GlUtils::Assert(BlueFin::GlUtils::m_pInstance, a2, a3, a4);
}

uint64_t BlueFin::GlComStressTestMgr::OnComError(uint64_t this)
{
  return this;
}

uint64_t BlueFin::GlComStressTestMgr::OnTestResults(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 3672);
  uint64_t v5 = *(void (**)(void))(result + 80);
  if (v5)
  {
    v5();
    uint64_t result = *(void *)(a1 + 3672);
  }
  int v6 = *(_DWORD *)(result + 96);
  if (v6)
  {
    if (v6 - 1 <= (*(_DWORD *)(a2 + 4) - *(_DWORD *)(result + 92))) {
      *(unsigned char *)(a1 + 370BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    }
  }
  return result;
}

void BlueFin::GlComStressTestMgr::~GlComStressTestMgr(BlueFin::GlComStressTestMgr *this)
{
  *(void *)this = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlComStressTestMgr *)((char *)this + 24));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlComStressTestMgr *)((char *)this + 24));

  JUMPOUT(0x263E6DD80);
}

void BlueFin::GlMeSrdEstNavBit::~GlMeSrdEstNavBit(BlueFin::GlMeSrdEstNavBit *this)
{
  *(void *)this = &unk_270EBD320;
}

{
  *(void *)this = &unk_270EBD320;
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdObsBuf::ItFcn(uint64_t this, unsigned int a2, void *a3, uint64_t (*a4)(void *, unint64_t))
{
  unsigned int v6 = a2;
  uint64_t v7 = this;
  if (*(unsigned char *)(this + 8))
  {
    if (a2)
    {
      if (*(unsigned __int8 *)(this + 9) < a2)
      {
        uint64_t v8 = "ucNbElemSum<=m_ucNbElem";
        DeviceFaultNotify("glmesrd_obsbuf.cpp", 159, "ItFcn", (char)"ucNbElemSum<=m_ucNbElem");
        int v9 = 159;
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v6 = *(unsigned __int8 *)(this + 9);
    }
    LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(this + 10);
    if (!(_BYTE)v10) {
      goto LABEL_12;
    }
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(this + 10);
    if (a2)
    {
      if (v10 < a2)
      {
        uint64_t v8 = "ucNbElemSum<=m_ucElemIdx";
        DeviceFaultNotify("glmesrd_obsbuf.cpp", 164, "ItFcn", (char)"ucNbElemSum<=m_ucElemIdx");
        int v9 = 164;
LABEL_21:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_obsbuf.cpp", v9, v8);
      }
      if (!*(unsigned char *)(this + 10))
      {
LABEL_12:
        LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(this + 9);
        if (!v6) {
          return this;
        }
        goto LABEL_13;
      }
    }
    else
    {
      unsigned int v6 = *(unsigned __int8 *)(this + 10);
      if (!*(unsigned char *)(this + 10)) {
        goto LABEL_12;
      }
    }
  }
  if (!v6) {
    return this;
  }
  do
  {
LABEL_13:
    LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v10 - 1;
    this = a4(a3, *(void *)v7 + *(unsigned __int16 *)(v7 + 12) * (unint64_t)v10);
    if (this) {
      break;
    }
    if (!(_BYTE)v10) {
      LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v7 + 9);
    }
    --v6;
  }
  while ((_BYTE)v6);
  return this;
}

void BlueFin::GlMeSrdRptCtrl::~GlMeSrdRptCtrl(BlueFin::GlMeSrdRptCtrl *this)
{
  *(void *)this = &unk_270EBD350;
}

{
  *(void *)this = &unk_270EBD350;
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdRptCtrl::RunSubTrk(uint64_t a1, double a2, double a3, double a4, double a5, float a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, double *a12, uint64_t a13, int a14, int a15, unsigned __int8 *a16, char a17, int a18, char a19, __int16 a20,char a21,char a22,char a23,char a24,__int16 a25,char a26,uint64_t a27,uint64_t a28)
{
  BlueFin::GlMeDSPMeas::init(a27, (uint64_t)a16);
  if ((unsigned __int8 *)(a27 + 100) != a16)
  {
    *(unsigned char *)(a27 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *a16;
    *(_DWORD *)(a27 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *((_DWORD *)a16 + 1);
    *(_WORD *)(a27 + 108) = *((_WORD *)a16 + 4);
  }
  *(unsigned char *)(a27 + 112) = a17;
  if (a15 != 1)
  {
    int v107 = "0";
    DeviceFaultNotify("glmesrd_rptctrl.cpp", 1300, "RunSubTrk", (char)"0");
    int v108 = "glmesrd_rptctrl.cpp";
    int v109 = 1300;
LABEL_109:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v108, v109, v107);
  }
  int v40 = 10;
  switch(a18)
  {
    case 0:
      goto LABEL_13;
    case 1:
      int v40 = 11;
      goto LABEL_13;
    case 2:
      int v40 = 12;
      goto LABEL_13;
    case 3:
      int v40 = 13;
      goto LABEL_13;
    case 5:
      if (a19) {
        int v41 = 16;
      }
      else {
        int v41 = 14;
      }
      *(_DWORD *)(a27 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v41;
      *(unsigned char *)(a27 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a24;
      *(_DWORD *)(a27 + 48) = 0;
      goto LABEL_14;
    case 6:
      int v40 = 17;
LABEL_13:
      *(_DWORD *)(a27 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v40;
      *(unsigned char *)(a27 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a24;
      *(_DWORD *)(a27 + 84) |= 0x100u;
      *(_DWORD *)(a27 + 48) = a14;
      *(_DWORD *)(a27 + 52) = a14;
LABEL_14:
      if (*(unsigned char *)a11)
      {
        *(_DWORD *)(a27 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_DWORD *)(a11 + 8);
        *(_DWORD *)(a27 + 84) |= 0x40000u;
      }
      if (*((unsigned __int16 *)a16 + 4) >= 0x23Fu)
      {
        int v107 = "IsValid()";
        DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
        int v108 = "glsignalid.h";
        int v109 = 806;
        goto LABEL_109;
      }
      uint64_t v42 = BlueFin::GlSvId::s_aucSvId2gnss[*a16];
      uint64_t v43 = *((int *)a16 + 1);
      int v44 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v43 + v42];
      unsigned int v45 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v43 - v43 + v42];
      if (v44) {
        BOOL v46 = v45 == 0;
      }
      else {
        BOOL v46 = 1;
      }
      if (v46)
      {
        int v107 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
        int v108 = "glsignalid.h";
        int v109 = 814;
        goto LABEL_109;
      }
      int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)a16);
      if (*((unsigned __int16 *)a16 + 4) >= 0x23Fu) {
        goto LABEL_101;
      }
      uint64_t v49 = BlueFin::GlSvId::s_aucSvId2gnss[*a16];
      int v50 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a16 + 1) - *((int *)a16 + 1)];
      unsigned int v51 = v50[v49];
      if (!v50[v49]) {
        goto LABEL_102;
      }
      int v110 = EpochPerSymbol;
      if (*(unsigned char *)(a13 + 1))
      {
        *(_DWORD *)(a27 + 84) |= 0x40u;
        float v52 = *(double *)(a13 + 8);
        *(float *)(a27 + 32) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)(a27 + 100), v52, v48);
        float v54 = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)(a27 + 100), *(float *)(a13 + 16), v53);
        float v55 = *(float *)(a27 + 32);
      }
      else
      {
        float v56 = *(double *)(a13 + 8);
        float v55 = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)(a27 + 100), v56, v48);
        *(float *)(a27 + 32) = v55;
        float v54 = 0.000001;
      }
      *(float *)(a27 + 56) = v54;
      unsigned int v57 = *((unsigned __int8 *)a12 + 1);
      int v58 = *(unsigned __int8 *)(a13 + 35);
      if (*(unsigned __int8 *)(a13 + 34) | v58)
      {
        if (*(unsigned char *)(a13 + 34)) {
          *(_DWORD *)(a27 + 84) |= 0x80u;
        }
        if (v58) {
          *(_DWORD *)(a27 + 84) |= 0x800000u;
        }
        if (*((unsigned __int16 *)a16 + 4) >= 0x23Fu) {
          goto LABEL_103;
        }
        uint64_t v63 = *a16;
        uint64_t v64 = BlueFin::GlSvId::s_aucSvId2gnss[v63];
        double v65 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a16 + 1) - *((int *)a16 + 1) + v64]];
        if (v64 == 2)
        {
          double v66 = (double)(char)(v63 - 59);
          if ((v63 - 52) >= 0xE) {
            double v66 = -8.0;
          }
          double v65 = v65 + v66 * 562500.0;
        }
        double v67 = 299792458.0 / v65;
        *(double *)(a27 + 8) = v67 * -*(double *)(a13 + 40);
        float v68 = v67 * *(float *)(a13 + 56);
        *(float *)(a27 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v68;
        if (*(_DWORD *)(a27 + 48) <= 0x3E8u)
        {
          *(_DWORD *)(a27 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2139095039;
          *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a27 + 84) & 0xFF7DFF7F | 0x20000;
          *(_DWORD *)(a28 + 100) |= 0x20u;
        }
      }
      else
      {
        if (*((unsigned __int16 *)a16 + 4) >= 0x23Fu) {
          goto LABEL_103;
        }
        uint64_t v59 = *a16;
        uint64_t v60 = BlueFin::GlSvId::s_aucSvId2gnss[v59];
        double v61 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a16 + 1) - *((int *)a16 + 1) + v60]];
        if (v60 == 2)
        {
          double v62 = (double)(char)(v59 - 59);
          if ((v59 - 52) >= 0xE) {
            double v62 = -8.0;
          }
          double v61 = v61 + v62 * 562500.0;
        }
        *(double *)(a27 + 8) = 299792458.0 / v61 * -*(double *)(a13 + 40);
        *(_DWORD *)(a27 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 2139095039;
        *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a27 + 84) & 0xFF7DFF7F | 0x20000;
      }
      if (!*(unsigned char *)(a13 + 36))
      {
        if (*((unsigned __int16 *)a16 + 4) < 0x23Fu)
        {
          uint64_t v77 = *a16;
          uint64_t v78 = BlueFin::GlSvId::s_aucSvId2gnss[v77];
          double v79 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a16 + 1) - *((int *)a16 + 1) + v78]];
          if (v78 == 2)
          {
            double v80 = (double)(char)(v77 - 59);
            if ((v77 - 52) >= 0xE) {
              double v80 = -8.0;
            }
            double v79 = v79 + v80 * 562500.0;
          }
          *(double *)(a27 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 299792458.0 / v79 * -*(double *)(a13 + 48);
          *(_DWORD *)(a27 + 128) = 2139095039;
          unsigned int v70 = *(_DWORD *)(a27 + 84) & 0xFEFFFFFF;
          goto LABEL_58;
        }
LABEL_103:
        int v107 = "IsValid()";
        DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
        int v108 = "glsignalid.h";
        int v109 = 650;
        goto LABEL_109;
      }
      int v69 = *(_DWORD *)(a27 + 84);
      unsigned int v70 = v69 | 0x1000000;
      *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v69 | 0x1000000;
      if (*((unsigned __int16 *)a16 + 4) >= 0x23Fu) {
        goto LABEL_103;
      }
      uint64_t v71 = *a16;
      uint64_t v72 = BlueFin::GlSvId::s_aucSvId2gnss[v71];
      double v73 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)a16 + 1) - *((int *)a16 + 1) + v72]];
      if (v72 == 2)
      {
        double v74 = (double)(char)(v71 - 59);
        if ((v71 - 52) >= 0xE) {
          double v74 = -8.0;
        }
        double v73 = v73 + v74 * 562500.0;
      }
      double v75 = 299792458.0 / v73;
      *(double *)(a27 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v75 * -*(double *)(a13 + 48);
      float v76 = v75 * *(float *)(a13 + 60);
      *(float *)(a27 + 128) = v76;
      if (*(_DWORD *)(a27 + 48) > 0x3E8u) {
        goto LABEL_59;
      }
      *(_DWORD *)(a27 + 128) = 2139095039;
      unsigned int v70 = v69 & 0xFEFFFFFF;
LABEL_58:
      *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v70;
LABEL_59:
      double v81 = v55 + 1.0;
      double v82 = (double)v51 * 0.001 / v81;
      double v83 = a2 - v82 * (double)v57 + -v82 * (double)v57;
      double v84 = v83 - a3;
      *(double *)(a27 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v83 - a3;
      if (*((unsigned __int16 *)a16 + 4) >= 0x23Fu) {
        goto LABEL_101;
      }
      char v85 = &BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a16 + 1) - *((int *)a16 + 1)];
      unsigned int v86 = v85[BlueFin::GlSvId::s_aucSvId2gnss[*a16]];
      if (!v85[BlueFin::GlSvId::s_aucSvId2gnss[*a16]])
      {
LABEL_102:
        int v107 = "ucMsPerEpoch != 0";
        DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
        int v108 = "glsignalid.h";
        int v109 = 685;
        goto LABEL_109;
      }
      *(_DWORD *)(a27 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      int v87 = *(unsigned __int8 *)a12;
      if (*(unsigned char *)a12)
      {
        double v88 = 1.0 / (double)(1000 * v44 / v45) / v81;
        double v89 = (double)(v51 * v110) * 0.001 / v81;
        double v90 = v88 * a12[1];
        double v91 = v88 * *((float *)a12 + 4);
        BOOL v92 = v90 > -v89 && v90 < v89;
        double v93 = -0.0;
        if (!v92) {
          double v93 = v89;
        }
        double v84 = v83 + v93 - v90;
        *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v70 | 0x20;
      }
      else
      {
        double v91 = (double)v86 * 0.001;
      }
      float v94 = v91;
      *(double *)(a27 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v84;
      *(float *)(a27 + 68) = v94;
      uint64_t result = GlCustomLog(14, "Chi debug GLL RptCtrl: Sub 1 SvId %u CarrType %s SatId %u dTimeStampLs %lf dTmTagInRxSec %lf dAcqWinCodePhsInRxSec %lf m_ucBitPhaseInMs %d codePhaseValid %d dObsCaEpchIntInRxSec %lf\n", *(unsigned __int8 *)(a27 + 100), BlueFin::GlSignalId::s_ausSignalType2str[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(a27 + 104) - *(int *)(a27 + 104) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a27 + 100)]]], *(unsigned __int8 *)(a27 + 112), v84, v83, a3, v57, v87, v82);
      *(double *)(a27 + 8) = *(double *)(a27 + 8) + (a8 + a9) * *(double *)(a27 + 24);
      int v96 = *(_DWORD *)(a27 + 84);
      *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v96 | 0x10;
      *(_DWORD *)(a27 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      if ((*a16 + 117) <= 0x23u)
      {
        *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v96 | 0x618;
        uint64_t v97 = a1;
        goto LABEL_77;
      }
      uint64_t result = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)(a27 + 100));
      if (*(unsigned __int16 *)(a27 + 108) >= 0x23Fu)
      {
LABEL_101:
        int v107 = "IsValid()";
        DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
        int v108 = "glsignalid.h";
        int v109 = 678;
        goto LABEL_109;
      }
      if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a27 + 104)
                                                                  - *(int *)(a27 + 104)
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a27 + 100)]])
        goto LABEL_102;
      uint64_t v97 = a1;
      if (*(_DWORD *)(a1 + 20))
      {
        double v98 = v82 * (double)*(char *)(a1 + 24);
        double v99 = (double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *(int *)(a27 + 104)
                                                                                              - *(int *)(a27 + 104)
                                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(a27 + 100)]]
                                      * result);
        if (v98 >= v99 * 0.5 * 0.001) {
          double v98 = v98 + (1.0 - *(float *)(a27 + 32)) * (v99 * -0.001);
        }
        *(float64x2_t *)(a27 + 16) = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v98, 0), *(float64x2_t *)(a27 + 16));
      }
LABEL_77:
      unsigned int v100 = *a16;
      if (v100 >= 0x4C && a18 && v100 <= 0x8A) {
        *(_DWORD *)(a27 + 84) |= 0x608u;
      }
      double v101 = *(double *)(a27 + 24);
      *(double *)(a27 + 8) = *(double *)(a27 + 8) + *(float *)(a27 + 32) * -299792458.0 * (v101 - a2);
      *(double *)(a27 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v101 + v101 * a9 / 299792458.0;
      *(void *)(a27 + 88) = *(void *)(v97 + 28);
      *(_DWORD *)(a27 + 136) = *(_DWORD *)(a13 + 96);
      *(_DWORD *)(a27 + 132) = *(_DWORD *)(a13 + 92);
      if (a21)
      {
        int v107 = "!bCorrvecIsSaturated";
        DeviceFaultNotify("glmesrd_rptctrl.cpp", 1551, "RunSubTrk", (char)"!bCorrvecIsSaturated");
        int v108 = "glmesrd_rptctrl.cpp";
        int v109 = 1551;
        goto LABEL_109;
      }
      if (a22)
      {
        int v107 = "!bIsCcmIntermediateReport";
        DeviceFaultNotify("glmesrd_rptctrl.cpp", 1552, "RunSubTrk", (char)"!bIsCcmIntermediateReport");
        int v108 = "glmesrd_rptctrl.cpp";
        int v109 = 1552;
        goto LABEL_109;
      }
      if (a23)
      {
        int v107 = "!bXcorrDetected";
        DeviceFaultNotify("glmesrd_rptctrl.cpp", 1553, "RunSubTrk", (char)"!bXcorrDetected");
        int v108 = "glmesrd_rptctrl.cpp";
        int v109 = 1553;
        goto LABEL_109;
      }
      if ((a26 & 1) == 0)
      {
        unsigned int v102 = *(unsigned __int8 *)(a27 + 100);
        if (v102 >= 0x21 && v102 <= 0x33 && *(_DWORD *)(a27 + 140) == 10)
        {
          uint64_t v103 = a28;
          int v104 = *(_DWORD *)(a28 + 100) | 0x200;
          *(_DWORD *)(a28 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v104;
          int v105 = *(_DWORD *)(a27 + 84);
          if ((v105 & 0x40000) == 0 || *(float *)(a27 + 40) >= a6) {
            goto LABEL_95;
          }
          goto LABEL_94;
        }
      }
      unsigned int v106 = *(_DWORD *)(a27 + 84);
      if ((v106 & 0x40000) != 0 && *(float *)(a27 + 40) < a6)
      {
        uint64_t v103 = a28;
        int v104 = *(_DWORD *)(a28 + 100);
LABEL_94:
        *(_DWORD *)(v103 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v104 | 4;
        int v105 = *(_DWORD *)(a27 + 84);
LABEL_95:
        unsigned int v106 = v105 & 0xFE7FFF1F;
        *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v106;
        *(_DWORD *)(a27 + 56) = 897988541;
      }
      if ((v106 & 0x40) != 0 && *(unsigned char *)(a13 + 28) && !*(unsigned char *)(a13 + 29)) {
        *(_DWORD *)(a27 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v106 | 0x1000;
      }
      return result;
    default:
      int v107 = "0";
      DeviceFaultNotify("glmesrd_rptctrl.cpp", 1292, "RunSubTrk", (char)"0");
      int v108 = "glmesrd_rptctrl.cpp";
      int v109 = 1292;
      goto LABEL_109;
  }
}

unsigned __int8 *BlueFin::GlSatCarrIdSet::GetSatIdSetSignalIndex@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 12) = 0;
  *(void *)a3 = a3 + 12;
  *(unsigned char *)(a3 + 8) = 4;
  *(void *)(a3 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 8);
  memcpy(v12, *(const void **)a1, 4 * v8);
  unsigned __int16 v10 = 0;
  unsigned __int8 v9 = 0;
  int v11 = v12[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v8); v9 != v8; uint64_t result = BlueFin::GlSetIterator::operator++(&v8))
  {
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v6, v10);
    if (v7 == a2) {
      *(_DWORD *)(*(void *)a3 + (((unint64_t)v6[0] >> 3) & 0x1C)) |= 1 << v6[0];
    }
  }
  return result;
}

uint64_t BlueFin::GlMeSatIdProbationMgr::Ignore(uint64_t result, unsigned int a2, unsigned char *a3)
{
  if (a2 >= 0x64)
  {
    DeviceFaultNotify("glmesrd_sat_probation_mgr.cpp", 44, "Ignore", (char)"ucSatId < _DIM(m_astIgnore)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_probation_mgr.cpp", 44, "ucSatId < _DIM(m_astIgnore)");
  }
  unsigned int v3 = (unsigned char *)(*(void *)(result + 200) + 2 * a2);
  *unsigned int v3 = 1;
  v3[1] = *a3;
  return result;
}

double BlueFin::GlMeSrdSatRptSniffState::EstAidingCodeAdjInRxSec(BlueFin::GlMeSrdSatRptSniffState *this, double a2, double a3)
{
  if (!*((unsigned char *)this + 24)) {
    return 0.0;
  }
  double v3 = *((double *)this + 6);
  double v4 = 0.5;
  double v5 = (*((double *)this + 5) + a2) * 0.5;
  double v6 = (a3 - v3) * 1000.0;
  if (v6 > 0.0) {
    goto LABEL_6;
  }
  if (v6 < 0.0)
  {
    double v4 = -0.5;
LABEL_6:
    int v8 = (int)(v6 + v4);
    return a3 - (v3 + (v5 + 1.0) * ((double)v8 / 1000.0));
  }
  int v8 = 0;
  return a3 - (v3 + (v5 + 1.0) * ((double)v8 / 1000.0));
}

BOOL BlueFin::GlMeSrdSatReport::HasTrackReset(BlueFin::GlMeSrdSatReport *this, const BlueFin::GlMeSrdSatRptRpcBuffer *a2, const BlueFin::GlSignalId *a3, int a4)
{
  if ((~*((_DWORD *)a2 + 2) & 0x12) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report.cpp", 116, "HasTrackReset", (char)"rRpcBuffer.HaveTrkMsmt()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report.cpp", 116, "rRpcBuffer.HaveTrkMsmt()");
  }
  char v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = **((void **)this + 1);
  v14[0] = a2;
  v14[1] = (char *)this + 24;
  v14[2] = v7;
  int v15 = a4;
  char v16 = a3;
  int v8 = 255;
  char v9 = -1;
  int v10 = 255;
  do
  {
    if (v10 == 255) {
      int v11 = *((unsigned __int8 *)a2 + v6 + 25);
    }
    else {
      int v11 = v8;
    }
    if (v10 == 255) {
      int v12 = *((unsigned __int8 *)a2 + v6 + 25);
    }
    else {
      int v12 = v10;
    }
    if (*((unsigned __int8 *)a2 + v6 + 25) != 255)
    {
      int v8 = v11;
      char v9 = *((unsigned char *)a2 + v6 + 25);
      char v4 = v5 + 1;
      int v10 = v12;
      ++v5;
    }
    ++v6;
  }
  while (v6 != 5);
  char v19 = v4;
  char v18 = v9;
  char v17 = v8;
  return BlueFin::GlMeSrdSatRptTrkMsmtMIBase::IsTrackReset((BlueFin::GlMeSrdSatRptTrkMsmtMIBase *)v14);
}

unint64_t BlueFin::GlMeSrdSatReport::ProcessSubTrkMsmt(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6)
{
  BlueFin::GlMeSrdSatRptTrkMsmtMI::GlMeSrdSatRptTrkMsmtMI((uint64_t)v23, a2, a3, a1 + 24, **(void **)(a1 + 8), *(void *)a1, a4, 200, a5);
  uint64_t v10 = **(void **)(a1 + 8);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  v19[0] = *(unsigned char *)a3;
  int v20 = *(_DWORD *)(a3 + 4);
  __int16 v21 = *(_WORD *)(a3 + 8);
  BlueFin::GlMeSrdSatRptNoiseStats::GlMeSrdSatRptNoiseStats((uint64_t)&v22, v10, v11, (uint64_t)v19);
  uint64_t v12 = v24;
  uint64_t v13 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 32))(**(void **)(a1 + 8));
  uint64_t v14 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 136))(**(void **)(a1 + 8));
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 144))(**(void **)(a1 + 8), v12);
  char v16 = (float *)(*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 168))(**(void **)(a1 + 8), v12);
  uint64_t v17 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 184))(**(void **)(a1 + 8), v12);
  return BlueFin::GlMeSrdSatReport::RunSubTrkEstimatorAlgorithms(a1, v13, v14, v15, v16, v17, &v22, v23, a5, a6);
}

void BlueFin::GlMeSrdSatReport::ProcessSniffMsmt(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char *a6)
{
  BlueFin::GlMeSrdSatRptSniffMsmtMI::GlMeSrdSatRptSniffMsmtMI((uint64_t)v34, a2, a3, **(void **)(a1 + 8), *(void *)a1, a4);
  uint64_t v10 = **(void **)(a1 + 8);
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  v30[0] = *(unsigned char *)a3;
  int v31 = *(_DWORD *)(a3 + 4);
  __int16 v32 = *(_WORD *)(a3 + 8);
  BlueFin::GlMeSrdSatRptNoiseStats::GlMeSrdSatRptNoiseStats((uint64_t)&v33, v10, v11, (uint64_t)v30);
  if (a6)
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 160))(**(void **)(a1 + 8), a3);
    uint64_t v13 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 136))(**(void **)(a1 + 8));
    uint64_t v14 = a1;
    uint64_t v15 = v12;
    uint64_t v16 = a5;
    uint64_t v17 = a6;
  }
  else
  {
    char v19 = 0;
    int v20 = 0;
    int v21 = 0;
    __int16 v22 = 0;
    uint64_t v23 = 0;
    char v24 = 0;
    char v25 = *(unsigned char *)(a1 + 492);
    int v26 = *(_DWORD *)(a1 + 496);
    __int16 v27 = *(_WORD *)(a1 + 500);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v18 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 160))(**(void **)(a1 + 8), a3);
    uint64_t v13 = (*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 136))(**(void **)(a1 + 8));
    uint64_t v17 = &v19;
    uint64_t v14 = a1;
    uint64_t v15 = v18;
    uint64_t v16 = a5;
  }
  BlueFin::GlMeSrdSatReport::RunSniffEstimatorAlgorithms(v14, v15, v13, &v33, (uint64_t)v34, v16, (uint64_t)v17, 0.24);
}

void BlueFin::GlMeSrdSatReportMgr::~GlMeSrdSatReportMgr(BlueFin::GlMeSrdSatReportMgr *this)
{
  *(void *)this = &unk_270EBD380;
  uint64_t v2 = *((void *)this + 456);
  unsigned int v3 = *(unsigned __int16 *)(v2 + 32);
  int v4 = *(unsigned __int16 *)(v2 + 34) + 1;
  if (v4 != v3 && v3 > (unsigned __int16)v4)
  {
    uint64_t v5 = (unsigned __int16)(*(_WORD *)(v2 + 34) + 1);
    while (1)
    {
      int v6 = (unsigned __int16)(*(_WORD *)(v2 + 28) + *(_WORD *)(*(void *)(v2 + 16) + 2 * v5));
      if (!BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)v2, v6))
      {
        char v9 = "m_potArray->Has(handle)";
        int v10 = 362;
        DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
        goto LABEL_16;
      }
      uint64_t v7 = *((void *)this + 456);
      if (v6 - *(unsigned __int16 *)(v7 + 28) >= *(unsigned __int16 *)(v7 + 30)) {
        break;
      }
      unsigned int v8 = *(unsigned __int16 *)(*(void *)(v7 + 8) + 2 * (unsigned __int16)(v6 - *(_WORD *)(v7 + 28)));
      if (v8 != 0xFFFF)
      {
        if (*(unsigned __int16 *)(v7 + 32) <= v8)
        {
          char v9 = "slot < m_usNumSlots";
          int v10 = 319;
          DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
LABEL_16:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", v10, v9);
        }
        if (*(void *)v7) {
          BlueFin::GlMeSrdSatReport::~GlMeSrdSatReport((BlueFin::GlMeSrdSatReport *)(*(void *)v7
        }
                                                                                   + *(_DWORD *)(v7 + 24) * v8));
      }
      if (++v5 >= (unint64_t)*(unsigned __int16 *)(v2 + 32))
      {
        uint64_t v2 = *((void *)this + 456);
        goto LABEL_12;
      }
    }
    char v9 = "handle - m_usMinHandle < m_usNumHandles";
    int v10 = 313;
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    goto LABEL_16;
  }
LABEL_12:
  BlueFin::GlBigArray::Clear(v2);
  *((void *)this + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = &unk_270EBD480;
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdSatReportMgr::~GlMeSrdSatReportMgr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdSatReportMgr::DestroySatReportByHandle(BlueFin::GlMeSrdSatReportMgr *this, int a2)
{
  BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v5, (unsigned __int16)a2);
  if (v5[0] + 100 * v5[4] != a2)
  {
    DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 277, "DestroySatReportByHandle", (char)"otSatCarrId.GetIndex() == handle");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_mgr.cpp", 277, "otSatCarrId.GetIndex() == handle");
  }
  return BlueFin::GlMeSrdSatReportMgr::DestroySatReport((uint64_t)this, (const BlueFin::GlSatCarrId *)v5);
}

uint64_t BlueFin::GlMeSrdSatReportMgr::ReportSubHeartbeat(BlueFin::GlMeSrdSatReportMgr *this, int a2)
{
  *((_DWORD *)this + 15) = a2;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 4) + 32))(*((void *)this + 4));
  uint64_t v5 = *((void *)this + 456);
  if (*(unsigned __int16 *)(v5 + 32) > (unsigned __int16)(*(_WORD *)(v5 + 34) + 1))
  {
    uint64_t v6 = (unsigned __int16)(*(_WORD *)(v5 + 34) + 1);
    while (1)
    {
      int v7 = (unsigned __int16)(*(_WORD *)(v5 + 28) + *(_WORD *)(*(void *)(v5 + 16) + 2 * v6));
      uint64_t result = BlueFin::GlBigArray::Has((BlueFin::GlBigArray *)v5, v7);
      if ((result & 1) == 0)
      {
        int v10 = "m_potArray->Has(handle)";
        DeviceFaultNotify("glinc_array.h", 362, "Next", (char)"m_potArray->Has(handle)");
        int v11 = 362;
        goto LABEL_15;
      }
      uint64_t v8 = *((void *)this + 456);
      if (v7 - *(unsigned __int16 *)(v8 + 28) >= *(unsigned __int16 *)(v8 + 30)) {
        break;
      }
      unsigned int v9 = *(unsigned __int16 *)(*(void *)(v8 + 8) + 2 * (unsigned __int16)(v7 - *(_WORD *)(v8 + 28)));
      if (v9 != 0xFFFF)
      {
        if (*(unsigned __int16 *)(v8 + 32) <= v9)
        {
          int v10 = "slot < m_usNumSlots";
          DeviceFaultNotify("glinc_array.h", 319, "EnsureValidSlot", (char)"slot < m_usNumSlots");
          int v11 = 319;
LABEL_15:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glinc_array.h", v11, v10);
        }
        if (*(void *)v8)
        {
          if (a2 - *(_DWORD *)(*(void *)v8 + *(_DWORD *)(v8 + 24) * v9 + 24) >= 5001) {
            uint64_t result = BlueFin::GlMeSrdSatReportMgr::DestroySatReportByHandle(this, v7);
          }
        }
      }
      if (++v6 >= (unint64_t)*(unsigned __int16 *)(v5 + 32)) {
        return result;
      }
    }
    int v10 = "handle - m_usMinHandle < m_usNumHandles";
    DeviceFaultNotify("glinc_array.h", 313, "EnsureValidHandle", (char)"handle - m_usMinHandle < m_usNumHandles");
    int v11 = 313;
    goto LABEL_15;
  }
  return result;
}

BlueFin::GlMeSrdSatReportMgr **BlueFin::GlMeSrdSatRptRpcListener::gll_satrpt_rpc_sub_trk_msmt(BlueFin::GlMeSrdSatReportMgr **result, unsigned int a2, uint64_t a3, char a4, unsigned __int8 *a5)
{
  if ((a4 & 1) == 0)
  {
    uint64_t v8 = result;
    Glint SignalIndex = BlueFin::GlMeSrdAsicUnitConverter::GetGlSignalIndex(*a5, a5[14] & 0xF);
    uint64_t v10 = *a5;
    v25[0] = *a5;
    int v26 = GlSignalIndex;
    if (GlSignalIndex == -1
      || (v10 + 67) < 0x44u
      || (uint64_t v11 = BlueFin::GlSvId::s_aucSvId2gnss[v10],
          BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * GlSignalIndex
                                                                                  - GlSignalIndex
                                                                                  + v11] == 255)
      || (unsigned __int16 v27 = BlueFin::GlSignalId::s_ausGnss2signalId[v11]
              + v10
              - BlueFin::GlSvId::s_aucGnss2minSvId[v11]
              + GlSignalIndex * BlueFin::GlSvId::s_aucGnss2numSvId[v11],
          v27 >= 0x23Fu))
    {
      DeviceFaultNotify("glmesrd_sat_report_mgr.cpp", 384, "gll_satrpt_rpc_sub_trk_msmt", (char)"otSignalId.IsValid()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_mgr.cpp", 384, "otSignalId.IsValid()");
    }
    BlueFin::GlSatCarrId::GlSatCarrId((uint64_t)v24, a2, GlSignalIndex);
    v14[0] = 0;
    int v15 = 0;
    char v16 = 0;
    int v17 = 0;
    __int16 v18 = 575;
    int v19 = 0;
    __int16 v20 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    BOOL v12 = BlueFin::GlMeSrdSatReportMgr::CheckForTrackReset(v8[1], (const BlueFin::GlSatCarrId *)v24, (const BlueFin::GlSignalId *)v25);
    uint64_t result = (BlueFin::GlMeSrdSatReportMgr **)BlueFin::GlMeSrdSatReportMgr::GetSatReportPtr(v8[1], (const BlueFin::GlSatCarrId *)v24, (const BlueFin::GlSignalId *)v25, v12);
    uint64_t v13 = v8[1];
    if ((*((unsigned char *)v13 + 490) & 2) != 0) {
      return (BlueFin::GlMeSrdSatReportMgr **)BlueFin::GlMeSrdSatReport::ProcessSubTrkMsmt((uint64_t)result, (uint64_t)v13 + 480, (uint64_t)v25, *((_DWORD *)v13 + 15), a4, (uint64_t)v14);
    }
  }
  return result;
}

void BlueFin::GlMeSrdSatRptRpcListener::gll_satrpt_rpc_eram_dump(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6)
{
  if (*(void *)(*(void *)(a1 + 8) + 3640))
  {
    int v8 = a3;
    Glint SignalIndex = BlueFin::GlMeSrdAsicUnitConverter::GetGlSignalIndex(a3, a4);
    v15[0] = v8;
    int v16 = GlSignalIndex;
    __int16 v17 = 575;
    if ((v8 + 67) >= 0x44u && GlSignalIndex != -1)
    {
      uint64_t v12 = BlueFin::GlSvId::s_aucSvId2gnss[v8];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * GlSignalIndex
                                                                                   - GlSignalIndex
                                                                                   + v12] == 255)
      {
        int v16 = -1;
        if (a5)
        {
LABEL_7:
          if (!*(unsigned char *)(a6 + 4)) {
            BlueFin::GlMeSrdStats::ReportLegacyIqData(*(void *)(*(void *)(a1 + 8) + 3640), (uint64_t)v15);
          }
        }
LABEL_10:
        LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *(unsigned char *)(a6 + 1);
        uint64_t v13 = (BlueFin::GlIQSnrStatsMgr *)(*(void *)(*(void *)(a1 + 8) + 3640) + 1568);
        double v14 = 200.0 / (double)v11 * 0.001;
        BlueFin::GlIQSnrStatsMgr::SetIQData(v13, (const BlueFin::GlSignalId *)v15, &v14, a6);
        return;
      }
      __int16 v17 = BlueFin::GlSignalId::s_ausGnss2signalId[v12]
          + v8
          - BlueFin::GlSvId::s_aucGnss2minSvId[v12]
          + GlSignalIndex * BlueFin::GlSvId::s_aucGnss2numSvId[v12];
    }
    if (a5) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
}

void BlueFin::GlMeSrdSatRptRpcListener::~GlMeSrdSatRptRpcListener(BlueFin::GlMeSrdSatRptRpcListener *this)
{
}

uint64_t BlueFin::GlMeSrdSatReportMgr::GetTowAssistListener(BlueFin::GlMeSrdSatReportMgr *this)
{
  return (uint64_t)this + 72;
}

uint64_t BlueFin::GlMeSrdSatReportMgr::SetMsmtReportingIntervalMs(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 368bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a2;
  return this;
}

void BlueFin::GlMeSrdSatRptRpcBuffer::~GlMeSrdSatRptRpcBuffer(BlueFin::GlMeSrdSatRptRpcBuffer *this)
{
  *(void *)this = &unk_270EBD480;
}

{
  *(void *)this = &unk_270EBD480;
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_eram_dump(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 3152) + 32))();
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_trk_grid_data(uint64_t a1, int a2, const void *a3)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(a1, a2);
  int v5 = *(_DWORD *)(a1 + 8);
  if ((v5 & 0x40000) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 231, "gll_satrpt_rpc_trk_grid_data", (char)"m_otFlags.Missing(FLGS_RECEIVED_GRID_DATA)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", 231, "m_otFlags.Missing(FLGS_RECEIVED_GRID_DATA)");
  }
  *(_DWORD *)(a1 + 8) = v5 | 0x40000;
  memcpy((void *)(a1 + 1844), a3, 0x42CuLL);
  uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 3152) + 80);

  return v6();
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_trk_grid_msmt(uint64_t a1, int a2, _OWORD *a3)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(a1, a2);
  int v5 = *(_DWORD *)(a1 + 8);
  if ((v5 & 0x80000) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 245, "gll_satrpt_rpc_trk_grid_msmt", (char)"m_otFlags.Missing(FLGS_RECEIVED_GRID_MSMT)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", 245, "m_otFlags.Missing(FLGS_RECEIVED_GRID_MSMT)");
  }
  *(_DWORD *)(a1 + 8) = v5 | 0x80000;
  *(_OWORD *)(a1 + 2912) = *a3;
  long long v6 = a3[1];
  long long v7 = a3[2];
  long long v8 = a3[3];
  *(_OWORD *)(a1 + 2976) = a3[4];
  *(_OWORD *)(a1 + 296BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
  *(_OWORD *)(a1 + 294bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
  *(_OWORD *)(a1 + 2928) = v6;
  long long v9 = a3[5];
  long long v10 = a3[6];
  long long v11 = a3[7];
  *(_OWORD *)(a1 + 304BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a3[8];
  *(_OWORD *)(a1 + 302bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v11;
  *(_OWORD *)(a1 + 3008) = v10;
  *(_OWORD *)(a1 + 2992) = v9;
  long long v12 = a3[9];
  long long v13 = a3[10];
  long long v14 = a3[11];
  *(_OWORD *)(a1 + 310BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)((char *)a3 + 188);
  *(_OWORD *)(a1 + 3088) = v14;
  *(_OWORD *)(a1 + 3072) = v13;
  *(_OWORD *)(a1 + 3056) = v12;
  int v15 = *(uint64_t (**)(void))(**(void **)(a1 + 3152) + 88);

  return v15();
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_trk_grid_tap_cfg(BlueFin::GlMeSrdSatRptRpcBuffer *this, int a2, BlueFin::SATRPT_GRID_TAP_CONFIG_TYPE *a3)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId((uint64_t)this, a2);
  int v5 = *((_DWORD *)this + 2);
  if ((v5 & 0x100000) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_rpc_buffer.cpp", 259, "gll_satrpt_rpc_trk_grid_tap_cfg", (char)"m_otFlags.Missing(FLGS_RECEIVED_GRID_TAP_CONFIG)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_rpc_buffer.cpp", 259, "m_otFlags.Missing(FLGS_RECEIVED_GRID_TAP_CONFIG)");
  }
  *((_DWORD *)this + 2) = v5 | 0x100000;
  long long v6 = *((_OWORD *)a3 + 1);
  *(_OWORD *)((char *)this + 3116) = *(_OWORD *)a3;
  *(_OWORD *)((char *)this + 3132) = v6;
  long long v7 = *(uint64_t (**)(void))(**((void **)this + 394) + 96);

  return v7();
}

uint64_t BlueFin::GlMeSrdSatRptRpcBuffer::gll_satrpt_rpc_sub_trk_msmt(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 a4, long long *a5, long long *a6, _OWORD *a7, uint64_t *a8, _OWORD *a9, void *a10, long long *a11, long long *a12, uint64_t *a13)
{
  BlueFin::GlMeSrdSatRptRpcBuffer::CheckInstanceId(a1, a2);
  int v19 = *(_DWORD *)(a1 + 8);
  int v20 = v19 | 0x20000;
  *(_DWORD *)(a1 + 8) = v19 | 0x20000;
  *(unsigned char *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a4;
  *(unsigned char *)(a1 + 105) = a3;
  if (a6)
  {
    long long v21 = *a6;
    *(_OWORD *)(a1 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a6[1];
    *(_OWORD *)(a1 + 108) = v21;
    long long v22 = a6[2];
    long long v23 = a6[3];
    long long v24 = a6[4];
    *(_OWORD *)(a1 + 188) = a6[5];
    *(_OWORD *)(a1 + 172) = v24;
    *(_OWORD *)(a1 + 156) = v23;
    *(_OWORD *)(a1 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v22;
    long long v25 = a6[6];
    long long v26 = a6[7];
    long long v27 = a6[8];
    *(_OWORD *)(a1 + 252) = a6[9];
    *(_OWORD *)(a1 + 236) = v27;
    *(_OWORD *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v26;
    *(_OWORD *)(a1 + 20bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v25;
    long long v28 = a6[10];
    long long v29 = a6[11];
    long long v30 = a6[12];
    *(_OWORD *)(a1 + 312) = *(long long *)((char *)a6 + 204);
    *(_OWORD *)(a1 + 30BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v30;
    *(_OWORD *)(a1 + 28bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v29;
    *(_OWORD *)(a1 + 268) = v28;
  }
  if (a7) {
    *(_OWORD *)(a1 + 328) = *a7;
  }
  if (a8)
  {
    uint64_t v31 = *a8;
    *(_DWORD *)(a1 + 352) = *((_DWORD *)a8 + 2);
    *(void *)(a1 + 34bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v31;
  }
  if (a9)
  {
    int v20 = v19 | 0x20100;
    *(_DWORD *)(a1 + 8) = v19 | 0x20100;
    long long v32 = a9[1];
    *(_OWORD *)(a1 + 912) = *a9;
    *(_OWORD *)(a1 + 928) = v32;
  }
  long long v33 = *a5;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a5 + 4);
  *(_OWORD *)(a1 + 16) = v33;
  *(void *)(a1 + 36) = *a10;
  long long v34 = *a11;
  *(_DWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a11 + 4);
  *(_OWORD *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v34;
  long long v35 = *a12;
  *(_OWORD *)(a1 + 76) = *(long long *)((char *)a12 + 12);
  *(_OWORD *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v35;
  if (a13)
  {
    *(_DWORD *)(a1 + 8) = v20 | 4;
    uint64_t v36 = *a13;
    *(_DWORD *)(a1 + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((_DWORD *)a13 + 2);
    *(void *)(a1 + 92) = v36;
  }
  uint64_t v37 = *(void *)(a1 + 3152);
  float v38 = *(uint64_t (**)(uint64_t, void, uint64_t, void, long long *))(*(void *)v37 + 64);

  return v38(v37, a2, a3, a4, a5);
}

void BlueFin::GlMeSrdSatReport::RunSniffEstimatorAlgorithms(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  BlueFin::GlMeSrdAcqWindowMsmtInfo::CopyFrom(a6, a5);
  double v15 = *(double *)(a5 + 56);
  double v16 = *(double *)(a5 + 64) - *(double *)(a5 + 72);
  if (*(unsigned char *)(a7 + 24)) {
    double v17 = v15 - *(double *)(a7 + 40);
  }
  else {
    double v17 = 0.0;
  }
  BlueFin::GlMeSrdSatRptSniffState::EstAidingCodeAdjInRxSec((BlueFin::GlMeSrdSatRptSniffState *)a7, *(double *)(a5 + 56), *(double *)(a5 + 64) - *(double *)(a5 + 72));
  *(unsigned char *)(a7 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
  *(double *)(a7 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v15;
  *(double *)(a7 + 48) = v16;
  v119[0] = 0;
  int v120 = 0;
  __n128 v18 = (__n128)vdupq_n_s32(0x7F7FFFFFu);
  __n128 v121 = v18;
  v18.n128_u64[0] = 2139095039;
  uint64_t v122 = 2139095039;
  BlueFin::GlMeSrdEstCNo::Run(a1 + 1536, BlueFin::GlMeSrdConstants::m_stPhysConst, a2, (unsigned __int8 *)(a1 + 492), a5 + 80, a4, (uint64_t)v119, v18);
  if (BlueFin::GlMeSrdCNoResults::isGarbage((BlueFin::GlMeSrdCNoResults *)v119))
  {
    long long v25 = "!stCNoSniffRslt.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_sniff.cpp", 102, "RunSniffEstimatorAlgorithms", (char)"!stCNoSniffRslt.isGarbage()");
    int v26 = 102;
    goto LABEL_28;
  }
  if (v119[0] && v120 != 3)
  {
    long long v25 = "stCNoSniffRslt.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SNIFF";
    DeviceFaultNotify("glmesrd_sat_report_sniff.cpp", 106, "RunSniffEstimatorAlgorithms", (char)"stCNoSniffRslt.m_otMsmtSrc.GetEnum() == GLMESRD_MSMT_SRC_SNIFF");
    int v26 = 106;
    goto LABEL_28;
  }
  __int16 v106 = 0;
  uint64_t v107 = 0x7FEFFFFFFFFFFFFFLL;
  int v108 = 2139095039;
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  char v111 = 0;
  int64x2_t v112 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int32x2_t v113 = vdup_n_s32(0x7F7FFFFFu);
  uint64_t v114 = 0xFFFFFFFFLL;
  char v115 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v116 = 0x7FEFFFFFFFFFFFFFLL;
  if (!*(unsigned char *)(a5 + 96))
  {
    long long v25 = "stCarrPrmSniffMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_sniff.cpp", 126, "RunSniffEstimatorAlgorithms", (char)"stCarrPrmSniffMsmt.bValid");
    int v26 = 126;
    goto LABEL_28;
  }
  float v19 = *(double *)(a5 + 152) + *(double *)(a5 + 144);
  BlueFin::GlMeSrdEstCarrPrm::Run(a1 + 2688, (unsigned __int8 *)(a1 + 492), *(unsigned char *)(a1 + 488), v17, v19, (uint64_t)BlueFin::GlMeSrdConstants::m_stPhysConst, a3, a2, (float *)(a7 + 20), a5 + 96, (uint64_t)&v106);
  if (BlueFin::GlMeSrdCarrPrmResults::isGarbage((BlueFin::GlMeSrdCarrPrmResults *)&v106))
  {
    long long v25 = "!stCarrPrmSniffRslt.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_sniff.cpp", 146, "RunSniffEstimatorAlgorithms", (char)"!stCarrPrmSniffRslt.isGarbage()");
    int v26 = 146;
    goto LABEL_28;
  }
  __int16 v99 = 0;
  char v100 = 0;
  double v101 = 1.79769313e308;
  float v102 = 3.4028e38;
  uint64_t v103 = 0;
  char v104 = 0;
  int v105 = 2139095039;
  if (!*(unsigned char *)(a5 + 128))
  {
    long long v25 = "stCodePrmSniffMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_sniff.cpp", 156, "RunSniffEstimatorAlgorithms", (char)"stCodePrmSniffMsmt.bValid");
    int v26 = 156;
    goto LABEL_28;
  }
  BlueFin::GlMeSrdEstCodePrm::Run(a1 + 3232, (uint64_t)BlueFin::GlMeSrdConstants::m_stPhysConst, a3, (unsigned __int8 *)(a1 + 492), a7, a5 + 80, a5 + 128, (uint64_t)&v99);
  if ((_BYTE)v99)
  {
    if (v101 == 1.79769313e308 || v102 == 3.4028e38 || !v103)
    {
LABEL_29:
      long long v25 = "!stCodePrmSniffRslt.isGarbage()";
      DeviceFaultNotify("glmesrd_sat_report_sniff.cpp", 174, "RunSniffEstimatorAlgorithms", (char)"!stCodePrmSniffRslt.isGarbage()");
      int v26 = 174;
LABEL_28:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_sniff.cpp", v26, v25);
    }
  }
  else if (v101 != 0.0 || v102 != 0.0 || v103)
  {
    goto LABEL_29;
  }
  v95[0] = 0;
  int v96 = -1082130432;
  __int16 v97 = 0;
  char v98 = 127;
  v87[0] = 0;
  uint64_t v88 = 0;
  uint64_t v90 = 0;
  uint64_t v89 = 0;
  long long v92 = 0u;
  long long v93 = 0u;
  int v91 = 1149222912;
  int v94 = 0;
  __int16 v84 = 0;
  uint64_t v85 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v86 = 0x7F7FFFFFFFFFFFFFLL;
  __int16 v82 = 0;
  uint64_t v20 = 4;
  char v83 = 0;
  do
  {
    long long v21 = (char *)&v82 + v20;
    *(void *)long long v21 = 0;
    *((void *)v21 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *((_DWORD *)v21 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1176492032;
    v20 += 20;
  }
  while (v21 + 20 != (char *)&v84);
  char v22 = *(unsigned char *)(a5 + 129);
  char v23 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 24) + 40))(*(void *)(*(void *)(a1 + 8) + 24));
  LOBYTE(v52) = -1;
  HIDWORD(v52) = 0;
  __int16 v53 = 575;
  *(void *)&v75[0] = &unk_270EBECA8;
  int v77 = 0;
  v78[0] = 0;
  int v79 = -1;
  __int16 v80 = 575;
  BlueFin::GlMeDSPMeas::init((uint64_t)v75, (uint64_t)&v52);
  float v52 = &unk_270EBECD8;
  int v54 = 0;
  __int16 v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  char v58 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  __int16 v53 = 0;
  long long v29 = &unk_270EBECD8;
  int v31 = 0;
  __int16 v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  __int16 v30 = 0;
  BlueFin::GlMeSrdRptCtrl::Run(a1 + 3480, *(double *)(a5 + 64), *(double *)(a5 + 72), 0.0, 0.0, 0.0, a8, 0.0, 0.0, (uint64_t)BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)v119, (uint64_t)&v99, (uint64_t)&v106, v95, 0, (uint64_t)v87, (uint64_t)v87, (uint64_t)&v84, (uint64_t)&v82,
    *(_DWORD *)(a5 + 20),
    1,
    (unsigned __int8 *)(a1 + 492),
    *(unsigned char *)(a1 + 488),
    5,
    v22,
    0,
    0,
    0,
    0,
    0,
    0,
    255,
    0,
    v23,
    *(_WORD *)(*(void *)(a1 + 8) + 40),
    HIBYTE(*(_WORD *)(*(void *)(a1 + 8) + 40)),
    0,
    0,
    (uint64_t)v75,
    (uint64_t)&v52,
    (uint64_t)&v29,
    (uint64_t)&v106);
  char v24 = v77;
  v77 &= 0xFFFFFF9F;
  int v76 = 897988541;
  if ((v24 & 0x10) != 0)
  {
    int v27 = 3;
    BlueFin::GlMeSrdDspMeasAux::GlMeSrdDspMeasAux((uint64_t)v28, (uint64_t)v78, v81, &v27, v75[3]);
    (*(void (**)(void, double *, unsigned char *, void))(**(void **)(*(void *)(a1 + 8) + 8) + 16))(*(void *)(*(void *)(a1 + 8) + 8), v75, v28, 0);
  }
}

uint64_t BlueFin::GlMeSrdSatRptSniffMsmtMI::GlMeSrdSatRptSniffMsmtMI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_WORD *)(a1 + 16) = 575;
  *(_DWORD *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)(a1 + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(unsigned char *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(a1 + 127) = 0;
  *(void *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a2;
  *(void *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 176) = a6;
  *(void *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a3;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
  *(double *)(a1 + 192) = (*(float (**)(uint64_t, uint64_t, void))(*(void *)a4 + 48))(a4, v9, *(void *)(a1 + 184));
  *(void *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a5;
  BlueFin::GlMeSrdSatRptSniffMsmtMI::CheckRpcBuffer(a1);
  BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildAcqWindowMsmtInfo((BlueFin::GlMeSrdSatRptSniffMsmtMI *)a1);
  BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildCNoMsmt((BlueFin::GlMeSrdSatRptSniffMsmtMI *)a1);
  BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildCarrMsmt((BlueFin::GlMeSrdSatRptSniffMsmtMI *)a1);
  BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildCodePrmMsmt((BlueFin::GlMeSrdSatRptSniffMsmtMI *)a1);
  return a1;
}

uint64_t BlueFin::GlMeSrdSatRptSniffMsmtMI::CheckRpcBuffer(uint64_t this)
{
  if ((~*(_DWORD *)(*(void *)(this + 160) + 8) & 0x10002) != 0)
  {
    DeviceFaultNotify("glmesrd_sat_report_sniff_msmt.cpp", 59, "CheckRpcBuffer", (char)"otFlags.Has(FLGS_RECEIVED_ACQ_WIN) && otFlags.Has(FLGS_RECEIVED_SNIFF)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_sniff_msmt.cpp", 59, "otFlags.Has(FLGS_RECEIVED_ACQ_WIN) && otFlags.Has(FLGS_RECEIVED_SNIFF)");
  }
  return this;
}

double BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildAcqWindowMsmtInfo(BlueFin::GlMeSrdSatRptSniffMsmtMI *this)
{
  uint64_t v2 = *((void *)this + 20);
  *(unsigned char *)this = 1;
  *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 3;
  uint64_t v3 = *((void *)this + 23);
  if ((BlueFin::GlMeSrdSatRptSniffMsmtMI *)((char *)this + 8) != (BlueFin::GlMeSrdSatRptSniffMsmtMI *)v3)
  {
    *((unsigned char *)this + 8) = *(unsigned char *)v3;
    *((_DWORD *)this + 3) = *(_DWORD *)(v3 + 4);
    *((_WORD *)this + 8) = *(_WORD *)(v3 + 8);
  }
  *((double *)this + 8) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(v2 + 36), (unsigned __int8 *)v3, *((_DWORD *)this + 44))* 0.001;
  *((double *)this + 8) = *((double *)this + 8)
                        - (*(float (**)(void, void))(**((void **)this + 21) + 56))(*((void *)this + 21), *((void *)this + 23));
  *((double *)this + 8) = *((double *)this + 8)
                        - BlueFin::GlSignalId::GetInterSignalBiasInMs(*((unsigned __int8 **)this + 23), *((void *)this + 25))* 0.001;
  int v4 = (unsigned __int8 *)*((void *)this + 23);
  if (*((unsigned __int16 *)v4 + 4) >= 0x23Fu)
  {
    long long v12 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v13 = 678;
    goto LABEL_10;
  }
  uint64_t v5 = *((int *)v4 + 1);
  uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[*v4];
  unsigned int v7 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v5 - v5 + v6];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v5 - v5 + v6])
  {
    long long v12 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v13 = 685;
    goto LABEL_10;
  }
  unsigned int v8 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v5 + v6];
  if (!v8)
  {
    long long v12 = "ucChipsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
    int v13 = 784;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v13, v12);
  }
  *((double *)this + 9) = (((double)*(unsigned __int16 *)(v2 + 58)
                          / (double)BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale
                          + (double)(*(_DWORD *)(v2 + 48) & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk))
                         / (double)BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution
                         + (double)(*(_DWORD *)(v2 + 48) >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft))
                        * ((double)v7
                         * 0.001)
                        / (double)v8;
  float v9 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v2 + 16, v2 + 64, v4);
  double result = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(*((BlueFin::GlMeSrdAsicUnitConverter **)this + 23), v9, v10);
  *((double *)this + 7) = result;
  *((_DWORD *)this + 5) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildCNoMsmt(BlueFin::GlMeSrdSatRptSniffMsmtMI *this)
{
  *((unsigned char *)this + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  uint64_t v2 = (_DWORD *)*((void *)this + 20);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 21) + 136))(*((void *)this + 21));
  double v4 = *(float *)v3;
  uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 21) + 160))(*((void *)this + 21), *((void *)this + 23));
  double v9 = *(float *)(result + 4);
  if (v2[30]) {
    BOOL v10 = v2[29] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    LODWORD(v6) = v2[27];
    float v11 = (double)v6 / (v4 / v9);
    *((float *)this + 22) = v11;
    double v12 = v9 * 1000.0;
    if (v12 <= 0.0)
    {
      if (v12 >= 0.0)
      {
        int v27 = 0;
LABEL_27:
        float v28 = *((float *)this + 21) - (double)v27 * *((double *)this + 24);
        *((float *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v28;
        return result;
      }
      double v13 = -0.5;
    }
    else
    {
      double v13 = 0.5;
    }
    int v27 = (int)(v12 + v13);
    goto LABEL_27;
  }
  LODWORD(v7) = v2[27];
  double v15 = v4 / v9;
  double v16 = (double)v7 / (v4 / v9);
  double v17 = v9 * 1000.0;
  int v18 = (int)(v17 + -0.5);
  if (v17 < 0.0) {
    int v19 = (int)(v17 + -0.5);
  }
  else {
    int v19 = 0;
  }
  if (v17 > 0.0) {
    int v19 = (int)(v17 + 0.5);
  }
  double v20 = *((double *)this + 24);
  double v21 = fmax(v16 - (double)v19 * v20, 0.0);
  LODWORD(v8) = v2[28];
  double v22 = (double)v8 / v15;
  if (v17 < 0.0) {
    int v23 = (int)(v17 + -0.5);
  }
  else {
    int v23 = 0;
  }
  if (v17 > 0.0) {
    int v23 = (int)(v17 + 0.5);
  }
  float v24 = sqrt(v21) + sqrt(fmax(v22 - (double)v23 * v20, 0.0));
  float v14 = 1.0 - (float)(1.0 / (float)(2 * *(unsigned __int8 *)(v3 + 44)));
  float v25 = (float)((float)(1.0 / v14) * (float)(v24 * 0.5)) * (float)((float)(1.0 / v14) * (float)(v24 * 0.5));
  if (v17 >= 0.0) {
    int v18 = 0;
  }
  if (v17 > 0.0) {
    int v18 = (int)(v17 + 0.5);
  }
  float v26 = v25 + (double)v18 * v20;
  *((float *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v25;
  *((float *)this + 22) = v26;
  return result;
}

void BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildCarrMsmt(BlueFin::GlMeSrdSatRptSniffMsmtMI *this)
{
  *((unsigned char *)this + 96) = 1;
  uint64_t v2 = *((void *)this + 20);
  float v3 = *(float *)(*(uint64_t (**)(void))(**((void **)this + 21) + 136))(*((void *)this + 21));
  float v4 = *(float *)((*(uint64_t (**)(void, void))(**((void **)this + 21) + 160))(*((void *)this + 21), *((void *)this + 23))+ 4);
  if (*(_DWORD *)(v2 + 120)) {
    BOOL v5 = *(_DWORD *)(v2 + 116) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    *((unsigned char *)this + 129) = 0;
  }
  else {
    *((unsigned char *)this + 97) = 1;
  }
  double v6 = v4;
  double v7 = v3;
  *(double *)&unint64_t v8 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v2 + 16, v2 + 64, *((unsigned __int8 **)this + 23));
  *((double *)this + 15) = *(double *)&v8;
  LODWORD(v8) = *(_DWORD *)(v2 + 120);
  double v9 = (double)v8 / (v7 / v6);
  double v10 = v6 * 1000.0;
  int v11 = (int)(v6 * 1000.0 + -0.5);
  if (v6 * 1000.0 < 0.0) {
    int v12 = (int)(v6 * 1000.0 + -0.5);
  }
  else {
    int v12 = 0;
  }
  if (v10 > 0.0) {
    int v12 = (int)(v10 + 0.5);
  }
  double v13 = *((double *)this + 24);
  double v14 = v9 - (double)v12 * v13;
  unsigned int v15 = *(_DWORD *)(v2 + 116);
  if (v10 >= 0.0) {
    int v11 = 0;
  }
  if (v10 > 0.0) {
    int v11 = (int)(v10 + 0.5);
  }
  *((double *)this + 13) = v14;
  *((double *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (double)v15 / (v7 / v6) - (double)v11 * v13;
}

uint64_t BlueFin::GlMeSrdSatRptSniffMsmtMI::BuildCodePrmMsmt(BlueFin::GlMeSrdSatRptSniffMsmtMI *this)
{
  *((unsigned char *)this + 128) = 1;
  uint64_t v2 = *((void *)this + 20);
  double v3 = *(float *)(*(uint64_t (**)(void))(**((void **)this + 21) + 136))(*((void *)this + 21));
  uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 21) + 160))(*((void *)this + 21), *((void *)this + 23));
  double v5 = *(float *)(result + 4);
  int v6 = *(_DWORD *)(v2 + 112);
  *((unsigned char *)this + 129) = v6 != 0;
  unsigned int v7 = *(_DWORD *)(v2 + 48);
  unsigned int v8 = v7 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft;
  *((unsigned char *)this + 13BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(v2 + 61);
  LOWORD(v9) = *(_WORD *)(v2 + 58);
  LODWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
  *(double *)&unint64_t v11 = (double)v9 / (double)v10;
  double v12 = *(double *)&v11 + (double)(v7 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
  LOBYTE(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  *(double *)&unint64_t v13 = v12 / (double)v11;
  double v14 = *(double *)&v13 + (double)v8;
  LODWORD(v13) = *(_DWORD *)(v2 + 108);
  double v15 = v3 / v5;
  double v16 = (double)v13 / (v3 / v5);
  double v17 = v5 * 1000.0;
  int v18 = (int)(v17 + -0.5);
  if (v17 < 0.0) {
    int v19 = (int)(v17 + -0.5);
  }
  else {
    int v19 = 0;
  }
  if (v17 > 0.0) {
    int v19 = (int)(v17 + 0.5);
  }
  double v20 = *((double *)this + 24);
  double v21 = v16 - (double)v19 * v20;
  *((double *)this + 17) = v14;
  *((double *)this + 18) = v21;
  if (v17 >= 0.0) {
    int v18 = 0;
  }
  if (v17 > 0.0) {
    int v18 = (int)(v17 + 0.5);
  }
  double v22 = (double)*(unsigned int *)(v2 + 112) / v15 - (double)v18 * v20;
  *((double *)this + 19) = v22;
  BOOL v24 = v22 > 0.0 && v6 != 0;
  if (v21 <= 0.0) {
    BOOL v24 = 0;
  }
  *((unsigned char *)this + 129) = v24;
  return result;
}

unint64_t BlueFin::GlMeSrdSatReport::RunSubTrkEstimatorAlgorithms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, float *a7, uint64_t *a8, char a9, uint64_t a10)
{
  uint64_t v152 = a2;
  uint64_t v153 = a3;
  uint64_t v154 = a4;
  uint64_t v155 = a5;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x3F);
  }
  if (!*((unsigned char *)a8 + 56))
  {
    __int16 v53 = "stAcqWindowMsmtInfo.m_bValid";
    DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1608, "RunSubTrkEstimatorAlgorithms", (char)"stAcqWindowMsmtInfo.m_bValid");
    int v54 = 1608;
    goto LABEL_52;
  }
  long long v66 = a5;
  int v15 = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  v16.n128_f64[0] = BlueFin::GlMeSrdAcqWindowMsmtInfo::CopyFrom(a10, (uint64_t)(a8 + 7));
  double v17 = *((double *)a8 + 15);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x3F);
  }
  __int16 v150 = 1280;
  uint64_t v18 = *a8;
  uint64_t v19 = *(unsigned __int8 *)(*a8 + 25);
  if (v19 != 255) {
    LOBYTE(v15BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
  }
  BOOL v151 = v19 == 255;
  int v65 = *(unsigned char *)(v18 + 24) & 0xF;
  int v20 = (*(uint64_t (**)(void, uint64_t, __n128))(***(void ***)(a1 + 8) + 112))(**(void **)(a1 + 8), v19, v16);
  int v21 = *((unsigned __int8 *)a8 + 136);
  LOBYTE(v146) = 0;
  __n128 v22 = (__n128)vdupq_n_s32(0x7F7FFFFFu);
  __n128 v148 = v22;
  v22.n128_u64[0] = 2139095039;
  uint64_t v149 = 2139095039;
  int v147 = 4;
  if (!v21)
  {
    __int16 v53 = "stCNoTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1691, "RunSubTrkEstimatorAlgorithms", (char)"stCNoTrkMsmt.bValid");
    int v54 = 1691;
    goto LABEL_52;
  }
  int v23 = v20;
  long long v68 = (unsigned __int8 *)(a1 + 492);
  BlueFin::GlMeSrdEstCNo::Run(a1 + 1536, BlueFin::GlMeSrdConstants::m_stPhysConst, v22, (uint64_t)&v152, v66, a6, (float *)(a6 + 96), (unsigned __int8 *)(a1 + 492), (uint64_t)(a8 + 17), a7, (uint64_t)&v146);
  int v147 = 4;
  if (BlueFin::GlMeSrdCNoResults::isGarbage((BlueFin::GlMeSrdCNoResults *)&v146))
  {
    __int16 v53 = "!stCNoTrkRslt.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1717, "RunSubTrkEstimatorAlgorithms", (char)"!stCNoTrkRslt.isGarbage()");
    int v54 = 1717;
    goto LABEL_52;
  }
  int v64 = v23;
  int v24 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 24) + 48))(*(void *)(*(void *)(a1 + 8) + 24));
  int v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 24) + 40))(*(void *)(*(void *)(a1 + 8) + 24));
  __int16 v133 = 0;
  uint64_t v134 = 0x7FEFFFFFFFFFFFFFLL;
  int v135 = 2139095039;
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  char v138 = 0;
  int64x2_t v139 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int32x2_t v140 = vdup_n_s32(0x7F7FFFFFu);
  uint64_t v141 = 0xFFFFFFFFLL;
  char v142 = 0;
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v143 = 0x7FEFFFFFFFFFFFFFLL;
  v104[0] = 0;
  uint64_t v105 = 0x7FEFFFFFFFFFFFFFLL;
  int v106 = 2139095039;
  char v107 = 0;
  uint64_t v108 = 0x7FEFFFFFFFFFFFFFLL;
  int64x2_t v110 = v139;
  uint64_t v111 = 0x7FEFFFFFFFFFFFFFLL;
  int32x2_t v112 = v140;
  int v109 = 2139095039;
  int v113 = 0;
  int64x2_t v114 = v139;
  uint64_t v115 = 0x7FEFFFFFFFFFFFFFLL;
  int32x2_t v116 = v140;
  __int16 v117 = 0;
  char v118 = 0;
  __int16 v119 = 0;
  char v120 = 0;
  uint64_t v121 = 0x7FEFFFFFFFFFFFFFLL;
  int v122 = 2139095039;
  uint64_t v123 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v124 = 2139095039;
  char v125 = 0;
  uint64_t v126 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v127 = -2155872257;
  uint64_t v128 = 0x7FEFFFFFFFFFFFFFLL;
  int v129 = 2139095039;
  char v130 = 0;
  int v131 = 0;
  char v132 = 0;
  if (!*((unsigned char *)a8 + 536))
  {
    __int16 v53 = "stCarrPrmTrkMsmt.bValid";
    DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1741, "RunSubTrkEstimatorAlgorithms", (char)"stCarrPrmTrkMsmt.bValid");
    int v54 = 1741;
    goto LABEL_52;
  }
  char v26 = v25;
  char v57 = v19;
  int v63 = v24 | v25;
  uint64_t v62 = (uint64_t)a8 + 1820;
  GlCustomLog(199, "HWDEBUG: LMS = %.0f, SvId:%u, CNo:%.2f, FLL:%d, PLL:%d\n", v17 * 1000.0, *(unsigned __int8 *)(a1 + 492), v148.n128_f32[0], *((unsigned __int8 *)a8 + 624), *((unsigned __int8 *)a8 + 680));
  char v60 = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  uint64_t v61 = a6 + 156;
  uint64_t v67 = a6;
  uint64_t v56 = a4;
  char v58 = v26;
  if (*(unsigned char *)(*a8 + 105) == 8 && (*(unsigned char *)(*a8 + 24) & 0xF) == 1) {
    char IsBeidouPrebitWithHssSec = 1;
  }
  else {
    char IsBeidouPrebitWithHssSec = BlueFin::GlMeSrdSatRptTrkMsmtMI::IsBeidouPrebitWithHssSec((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a8);
  }
  char v27 = *((unsigned char *)a8 + 80);
  unsigned __int8 v28 = *(unsigned char *)((*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 136))(**(void **)(a1 + 8)) + 26);
  unsigned __int16 v29 = *(_WORD *)((*(uint64_t (**)(void))(***(void ***)(a1 + 8) + 136))(**(void **)(a1 + 8)) + 24);
  char v30 = *(unsigned char *)(a1 + 488);
  double v31 = *((double *)a8 + 15) * 1000.0;
  unsigned int v32 = *((_DWORD *)a8 + 19);
  unsigned __int8 v33 = (*(uint64_t (**)(void))(**(void **)a1 + 1024))();
  BlueFin::GlMeSrdEstCarrPrm::RunSubTrk(a1 + 2688, BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)&v152, v66, (float *)v67, v61, v31, (uint64_t)&v150, a7, v62, IsBeidouPrebitWithHssSec, v65 == 0, v27, v63, v60, v28, v29, (v15 & 0xF000FFFE) - 805306384 < 5, (uint64_t)(a8 + 67),
    (uint64_t)(a8 + 143),
    v68,
    v30,
    v32,
    v33,
    &v146,
    &v133,
    (uint64_t)v104);
  if (BlueFin::GlMeSrdCarrPrmResults::isGarbage((BlueFin::GlMeSrdCarrPrmResults *)&v133))
  {
    __int16 v53 = "!stCarrPrmTrkRslt.isGarbage()";
    DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1852, "RunSubTrkEstimatorAlgorithms", (char)"!stCarrPrmTrkRslt.isGarbage()");
    int v54 = 1852;
    goto LABEL_52;
  }
  LOWORD(v98) = 0;
  BYTE2(v98) = 0;
  double v99 = 1.79769313e308;
  float v100 = 3.4028e38;
  uint64_t v101 = 0;
  char v102 = 0;
  int v103 = 2139095039;
  if ((a9 & 1) == 0)
  {
    if (!*((unsigned char *)a8 + 1000))
    {
      __int16 v53 = "stCodePrmTrkMsmt.bValid";
      DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1884, "RunSubTrkEstimatorAlgorithms", (char)"stCodePrmTrkMsmt.bValid");
      int v54 = 1884;
      goto LABEL_52;
    }
    BlueFin::GlMeSrdEstCodePrm::Run(a1 + 3232, (uint64_t)BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)&v152, (uint64_t)(v66 + 37), (float *)v67, (int *)(v67 + 100), v68, (uint64_t)&v150, (uint64_t)a7, v62, (v64 - 1) < 2, v63, v58, (uint64_t)(a8 + 125), (uint64_t)&v146, (uint64_t)&v98);
    if (LOBYTE(v98))
    {
      if (v99 == 1.79769313e308 || v100 == 3.4028e38 || !v101)
      {
LABEL_53:
        __int16 v53 = "!stCodePrmTrkRslt.isGarbage()";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 1912, "RunSubTrkEstimatorAlgorithms", (char)"!stCodePrmTrkRslt.isGarbage()");
        int v54 = 1912;
LABEL_52:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_trk.cpp", v54, v53);
      }
    }
    else if (v99 != 0.0 || v100 != 0.0 || v101)
    {
      goto LABEL_53;
    }
  }
  if (v64 == 1) {
    char v34 = v58;
  }
  else {
    char v34 = 1;
  }
  v71[0] = -1;
  int v72 = 0;
  __int16 v73 = 575;
  *(void *)&v91[0] = &unk_270EBECA8;
  int v92 = 0;
  v93[0] = 0;
  int v94 = -1;
  __int16 v95 = 575;
  BlueFin::GlMeDSPMeas::init((uint64_t)v91, (uint64_t)v71);
  if (v63) {
    float v35 = 7.5;
  }
  else {
    float v35 = v66[3];
  }
  double v36 = *((double *)a8 + 15);
  double v37 = *((double *)a8 + 16);
  int v38 = *((_DWORD *)a8 + 19);
  char v39 = *(unsigned char *)(a1 + 488);
  int v40 = *((_DWORD *)v155 + 11);
  int v41 = *(_DWORD *)(v153 + 28);
  __int16 v42 = *(_WORD *)(*(void *)(a1 + 8) + 40);
  int v43 = *(_DWORD *)(v67 + 148);
  double v44 = (*(double (**)(void))(**(void **)a1 + 280))();
  double v45 = (*(double (**)(void))(**(void **)a1 + 848))();
  HIBYTE(v55) = v58;
  LOBYTE(v55) = v34;
  LODWORD(v46) = v40;
  LODWORD(v47) = v41;
  LODWORD(v48) = v43;
  unint64_t result = BlueFin::GlMeSrdRptCtrl::RunSubTrk(a1 + 3480, v36, v37, v46, v47, v35, v48, v44, v45, (uint64_t)BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)&v146, &v98, (uint64_t)&v133, v38, 1, v68, v39, v65, 0,
             0,
             0,
             0,
             0,
             v57,
             v55,
             v42,
             (uint64_t)v91,
             (uint64_t)&v133);
  if ((v92 & 0x10) != 0)
  {
    int v70 = 4;
    BlueFin::GlMeSrdDspMeasAux::GlMeSrdDspMeasAux((uint64_t)v71, (uint64_t)v93, v96, &v70, v91[3]);
    if (v77 != 4)
    {
      __int16 v53 = "otDspMeasAux.GetMsmtSrc().GetEnum() == GLMESRD_MSMT_SRC_SUB_TRACK";
      DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2463, "PopulateDspMeasAuxSubTrackRslts", (char)"otDspMeasAux.GetMsmtSrc().GetEnum() == GLMESRD_MSMT_SRC_SUB_TRACK");
      int v54 = 2463;
      goto LABEL_52;
    }
    int v50 = *(_DWORD *)(v153 + 32);
    char v78 = 1;
    char v79 = BYTE4(v136);
    int v80 = v136;
    int v81 = HIDWORD(v141);
    unsigned int v89 = v89 & 0xFFFFE713 | (4 * BYTE5(v136)) | (8 * BYTE6(v136)) | (HIBYTE(v136) << 11) | (32 * BYTE1(v137)) | (BYTE2(v137) << 12) | (BYTE4(v137) << 6) | (BYTE5(v137) << 7);
    int v86 = v50;
    unsigned int v90 = v90 & 0xFFFFF001 | (2 * (WORD2(v145) & 0x7FF));
    if (!HIBYTE(v133)) {
      uint64_t v87 = 0;
    }
    __int16 v88 = 0;
    char v82 = (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 112))(**(void **)(a1 + 8), *(unsigned __int8 *)(*a8 + 25));
    __int16 v83 = *(_WORD *)((char *)a8 + 1821);
    char v84 = *((unsigned char *)a8 + 1823);
    char v85 = *(unsigned char *)(v56 + 9);
    BOOL v74 = (*(unsigned char *)(*a8 + 105) & 0xF) == 8;
    char v75 = *((unsigned char *)a8 + 1822) >> 7;
    BlueFin::GlMeSrdSatReport::PerformFinalValidityChecks(a1, (BlueFin::GlMeDSPMeas *)v91, (BlueFin::GlMeSrdDspMeasAux *)v71);
    LOBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
    *(unsigned char *)(a1 + 3538) |= *((unsigned char *)a8 + 1821);
    *(unsigned char *)(a1 + 3539) |= *((unsigned char *)a8 + 1822);
    unsigned __int8 v52 = *(unsigned char *)(a1 + 3540) | *((unsigned char *)a8 + 1823);
    *(unsigned char *)(a1 + 354BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v52;
    if (v52 >= 0xC0u && (v52 & 0x10) != 0) {
      int v51 = (v52 >> 3) & 1;
    }
    if (*(unsigned char *)(a1 + 3541)) {
      LOBYTE(v5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
    }
    *(unsigned char *)(a1 + 354BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v51;
    char v76 = v51;
    int v97 = 1;
    unint64_t result = (*(uint64_t (**)(void, double *, unsigned char *, void))(**(void **)(*(void *)(a1 + 8) + 8)
                                                                          + 16))(*(void *)(*(void *)(a1 + 8) + 8), v91, v71, 0);
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x3F);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatReport::AddCorrVecAndParamsToContainer(uint64_t result, unsigned int a2, unsigned __int8 *a3, int a4, uint64_t a5)
{
  if (*a3)
  {
    unsigned int v7 = (BlueFin::GlMeCorrVecContainer *)result;
    BlueFin::GlMeSrdSatReport::AddCorrVecToContainer((BlueFin::GlMeCorrVecContainer *)result, a2, a3, a4);
    float v8 = *(float *)(a5 + 8) * 10000.0;
    if (v8 <= 0.0)
    {
      if (v8 >= 0.0)
      {
        LOWORD(v1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
LABEL_8:
        uint64_t WritableCorrVecAndParams = BlueFin::GlMeCorrVecContainer::GetWritableCorrVecAndParams(v7, a2);
        BlueFin::GlMePkFitParams::SetParams(WritableCorrVecAndParams + 48, *(float *)(a5 + 4), *(float *)(a5 + 32), *(float *)(a5 + 24), *(unsigned char *)a5);
        *(unsigned char *)(WritableCorrVecAndParams + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 1;
        unint64_t result = BlueFin::GlMeCorrVecContainer::GetWritableCorrVecAndParams(v7, a2);
        *(_WORD *)(result + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v11;
        *(unsigned char *)(result + 2) = 1;
        return result;
      }
      double v9 = v8;
      double v10 = -0.5;
    }
    else
    {
      double v9 = v8;
      double v10 = 0.5;
    }
    int v11 = (int)(v9 + v10);
    goto LABEL_8;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdSatReport::AddCorrVecToContainer(BlueFin::GlMeCorrVecContainer *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  switch(a4)
  {
    case 0:
    case 2:
      if (*((_DWORD *)a3 + 1))
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2743, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL");
        int v7 = 2743;
LABEL_37:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_trk.cpp", v7, v6);
      }
      if (*((_DWORD *)a3 + 2))
      {
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAG";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2744, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAG");
        int v7 = 2744;
        goto LABEL_37;
      }
LABEL_25:
      uint64_t WritableCorrVecAndParams = BlueFin::GlMeCorrVecContainer::GetWritableCorrVecAndParams(a1, a2);
      unsigned int v9 = *a3;
      int v10 = a3[12];
      char v11 = a3[1];
      char v12 = a3[2];
      return BlueFin::GlMeCorrVecAndParams::SetCorrVec(WritableCorrVecAndParams, v9, a4, v10, v11, v12, (int *)a3 + 4);
    case 1:
    case 3:
      if (*((_DWORD *)a3 + 1) == 1)
      {
        if (!*((_DWORD *)a3 + 2)) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAG";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2753, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAG");
        int v7 = 2753;
      }
      else
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_EXTENDED";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2752, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_EXTENDED");
        int v7 = 2752;
      }
      goto LABEL_37;
    case 4:
      if (*((_DWORD *)a3 + 1))
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2747, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL");
        int v7 = 2747;
      }
      else
      {
        if (*((_DWORD *)a3 + 2) == 1) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2748, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ");
        int v7 = 2748;
      }
      goto LABEL_37;
    case 5:
      if (*((_DWORD *)a3 + 1) == 1)
      {
        if (*((_DWORD *)a3 + 2) == 1) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2767, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ");
        int v7 = 2767;
      }
      else
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_EXTENDED";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2766, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_EXTENDED");
        int v7 = 2766;
      }
      goto LABEL_37;
    case 8:
      if (*((_DWORD *)a3 + 1))
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2770, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL");
        int v7 = 2770;
      }
      else
      {
        if (*((_DWORD *)a3 + 2) == 2) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_DSUM";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2771, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_DSUM");
        int v7 = 2771;
      }
      goto LABEL_37;
    case 9:
      if (*((_DWORD *)a3 + 1))
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2774, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL");
        int v7 = 2774;
      }
      else
      {
        if (*((_DWORD *)a3 + 2) == 3) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_XSUM";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2775, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_XSUM");
        int v7 = 2775;
      }
      goto LABEL_37;
    case 16:
    case 18:
      if (*((_DWORD *)a3 + 1))
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2757, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_NOMINAL");
        int v7 = 2757;
      }
      else
      {
        if (*((_DWORD *)a3 + 2) == 1) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2758, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ");
        int v7 = 2758;
      }
      goto LABEL_37;
    case 17:
    case 19:
      if (*((_DWORD *)a3 + 1) == 1)
      {
        if (*((_DWORD *)a3 + 2) == 1) {
          goto LABEL_25;
        }
        int v6 = "stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2763, "AddCorrVecToContainer", (char)"stTrkCvec.m_etCvecNonlinearityType == GLMESRD_NL_CVEC_TYPE_MAGSQ");
        int v7 = 2763;
      }
      else
      {
        int v6 = "stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_EXTENDED";
        DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2762, "AddCorrVecToContainer", (char)"stTrkCvec.m_etNominalOrExtendedCvec == GLMESRD_CVEC_TYPE_EXTENDED");
        int v7 = 2762;
      }
      goto LABEL_37;
    default:
      int v6 = "0";
      DeviceFaultNotify("glmesrd_sat_report_trk.cpp", 2778, "AddCorrVecToContainer", (char)"0");
      int v7 = 2778;
      goto LABEL_37;
  }
}

uint64_t BlueFin::GlMeSrdSatRptTrkMsmtMI::GlMeSrdSatRptTrkMsmtMI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9)
{
  uint64_t v15 = BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GlMeSrdSatRptTrkMsmtMIBase(a1, a2, a3, a4, a5, a7);
  *(unsigned char *)(v15 + 56) = 0;
  uint64_t v16 = v15 + 56;
  *(void *)(v15 + 48) = a6;
  *(unsigned char *)(v15 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  uint64_t v17 = v15 + 64;
  *(_DWORD *)(v15 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(v15 + 68) = 0;
  *(_WORD *)(v15 + 72) = 575;
  *(_DWORD *)(v15 + 76) = 0;
  *(_WORD *)(v15 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v15 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(unsigned char *)(v15 + 136) = 0;
  *(int32x2_t *)(v15 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = vdup_n_s32(0x7F7FFFFFu);
  BlueFin::GlMeSrdAsicCorrVecTrkMsmt::GlMeSrdAsicCorrVecTrkMsmt(v15 + 152, 0);
  BlueFin::GlMeSrdAsicCorrVecTrkMsmt::GlMeSrdAsicCorrVecTrkMsmt(v16 + 288, 1);
  *(unsigned char *)(v16 + 48BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(unsigned char *)(v16 + 488) = 0;
  *(void *)(v16 + 492) = 0x7F7FFFFF7F7FFFFFLL;
  *(int64x2_t *)(v16 + 50bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_DWORD *)(v16 + 52BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(unsigned char *)(v16 + 52bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  *(unsigned char *)(v16 + 528) = 0;
  *(unsigned char *)(v16 + 552) = 0;
  *(unsigned char *)(v16 + 568) = 0;
  *(unsigned char *)(v16 + 62bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(v16 + 676) = 0;
  *(unsigned char *)(v16 + 68bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  *(_DWORD *)(v16 + 68BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(_WORD *)(v16 + 788) = 0;
  *(unsigned char *)(v16 + 796) = -1;
  *(_DWORD *)(v16 + 792) = -1;
  *(_OWORD *)(v16 + 688) = 0u;
  *(_OWORD *)(v16 + 70bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 72BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 736) = 0u;
  *(_OWORD *)(v16 + 752) = 0u;
  *(_OWORD *)(v16 + 768) = 0u;
  *(_DWORD *)(v16 + 78bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)(v16 + 896) = 0;
  *(_OWORD *)(v16 + 86bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 88BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 832) = 0u;
  *(_OWORD *)(v16 + 848) = 0u;
  *(_OWORD *)(v16 + 80BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 816) = 0u;
  *(_WORD *)(v16 + 672) = 0;
  *(void *)(v16 + 90bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(void *)(v16 + 912) = 0xFF7FFFFD00000000;
  *(void *)(v16 + 92BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4286578685;
  *(void *)(v16 + 928) = 0x47EFFFFFA0000000;
  *(void *)(v16 + 936) = 0x47EFFFFFA0000000;
  *(unsigned char *)(v16 + 94bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)(v16 + 948) = 0;
  *(unsigned char *)(v16 + 952) = 0;
  *(void *)(v16 + 96BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0x7FEFFFFFFFFFFFFFLL;
  *(unsigned char *)(v16 + 968) = 0;
  *(void *)(v16 + 98BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(void *)(v16 + 972) = 0;
  *(void *)(v16 + 986) = 0;
  *(unsigned char *)(v16 + 100BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_DWORD *)(v16 + 100bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(v16 + 1008) = 0;
  *(_DWORD *)(v16 + 1012) = 0;
  *(_WORD *)(v16 + 1016) = 575;
  *(_DWORD *)(v16 + 102BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_WORD *)(v16 + 102bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(unsigned char *)(v16 + 108BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(v16 + 106bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 1048) = 0u;
  *(_OWORD *)(v16 + 1032) = 0u;
  *(unsigned char *)(v16 + 1088) = 0;
  *(_WORD *)(v16 + 176BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(_DWORD *)(v16 + 109BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(_DWORD *)(v16 + 148BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -16777216;
  *(unsigned char *)(v16 + 148bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1;
  *(_DWORD *)(v16 + 1488) = -1;
  *(_DWORD *)(v16 + 1748) = 0xFFFF;
  *(void *)(v16 + 1752) = -1;
  *(_OWORD *)(v16 + 1336) = 0u;
  *(_OWORD *)(v16 + 132BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 130bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 1288) = 0u;
  *(_OWORD *)(v16 + 1272) = 0u;
  *(_OWORD *)(v16 + 1256) = 0u;
  *(_OWORD *)(v16 + 124BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 122bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 1208) = 0u;
  *(_OWORD *)(v16 + 1192) = 0u;
  *(_OWORD *)(v16 + 1176) = 0u;
  *(_OWORD *)(v16 + 116BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 114bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 1128) = 0u;
  *(_OWORD *)(v16 + 1112) = 0u;
  *(_OWORD *)(v16 + 1096) = 0u;
  *(_OWORD *)(v16 + 1716) = 0u;
  *(_OWORD *)(v16 + 1732) = 0u;
  *(_OWORD *)(v16 + 168bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 170BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1652) = 0u;
  *(_OWORD *)(v16 + 1668) = 0u;
  *(_OWORD *)(v16 + 162BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1636) = 0u;
  *(_OWORD *)(v16 + 1588) = 0u;
  *(_OWORD *)(v16 + 160bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 1556) = 0u;
  *(_OWORD *)(v16 + 1572) = 0u;
  *(_OWORD *)(v16 + 152bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 154BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1492) = 0u;
  *(_OWORD *)(v16 + 1508) = 0u;
  *(_DWORD *)(v16 + 210BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *(_OWORD *)(v16 + 2068) = 0u;
  *(_OWORD *)(v16 + 208bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 2036) = 0u;
  *(_OWORD *)(v16 + 2052) = 0u;
  *(_OWORD *)(v16 + 200bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 202BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1972) = 0u;
  *(_OWORD *)(v16 + 1988) = 0u;
  *(_OWORD *)(v16 + 194BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1956) = 0u;
  *(_OWORD *)(v16 + 1908) = 0u;
  *(_OWORD *)(v16 + 192bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 1876) = 0u;
  *(_OWORD *)(v16 + 1892) = 0u;
  *(_OWORD *)(v16 + 184bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(v16 + 186BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1812) = 0u;
  *(_OWORD *)(v16 + 1828) = 0u;
  *(_OWORD *)(v16 + 178BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(v16 + 1796) = 0u;
  *(_OWORD *)(v16 + 176bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  BlueFin::GlMeSrdGridResults::GlMeSrdGridResults((BlueFin::GlMeSrdGridResults *)(v16 + 2104));
  *(_DWORD *)(v16 + 3416) = a7;
  *(_WORD *)(v16 + 342BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = a8;
  uint64_t v18 = *(void *)(v16 - 40);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
  *(double *)(v16 + 342bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = (*(float (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 48))(v18, v19, a3);
  if (a8 != 200)
  {
    DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 149, "GlMeSrdSatRptTrkMsmtMI", (char)"usMsmtReportingIntervalMs == 200");
    CrashData();
    goto LABEL_20;
  }
  char v20 = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v20;
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v20;
  int v21 = *(BlueFin::GlSignalId **)a1;
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 4;
  uint64_t v22 = *(void *)(a1 + 32);
  if (v17 != v22)
  {
    *(unsigned char *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(unsigned char *)v22;
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v22 + 4);
    *(_WORD *)(a1 + 72) = *(_WORD *)(v22 + 8);
  }
  *(double *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)v21 + 18, (unsigned __int8 *)v22, *(_DWORD *)(a1 + 3472))* 0.001;
  *(double *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)(a1 + 120)
                        - (*(float (**)(void, void))(**(void **)(a1 + 16) + 56))(*(void *)(a1 + 16), *(void *)(a1 + 32));
  *(double *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(double *)(a1 + 120)
                        - BlueFin::GlSignalId::GetInterSignalBiasInMs(*(unsigned __int8 **)(a1 + 32), *(void *)(a1 + 48))* 0.001;
  int v23 = *(unsigned __int8 **)(a1 + 32);
  if (*((unsigned __int16 *)v23 + 4) >= 0x23Fu)
  {
    int v51 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v52 = 678;
    goto LABEL_25;
  }
  uint64_t v24 = *((int *)v23 + 1);
  uint64_t v25 = BlueFin::GlSvId::s_aucSvId2gnss[*v23];
  unsigned int v26 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v24 - v24 + v25];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v24 - v24 + v25])
  {
    int v51 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v52 = 685;
    goto LABEL_25;
  }
  unsigned int v27 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v24 + v25];
  if (!v27)
  {
    int v51 = "ucChipsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
    int v52 = 784;
LABEL_25:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v52, v51);
  }
  *(double *)(a1 + 128) = (((double)*((unsigned __int16 *)v21 + 29)
                          / (double)BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale
                          + (double)(*((_DWORD *)v21 + 12) & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk))
                         / (double)BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution
                         + (double)(*((_DWORD *)v21 + 12) >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft))
                        * ((double)v26
                         * 0.001)
                        / (double)v27;
  *(_DWORD *)(a1 + 76) = BlueFin::GlMeSrdSatRptTrkMsmtMI::GetEpochCntInMs((BlueFin::GlSignalId **)a1);
  *(unsigned char *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *((unsigned __int8 *)v21 + 25) != 255;
  *(unsigned char *)(a1 + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = (*((unsigned char *)v21 + 30) & 0x10) != 0;
  float v28 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz((uint64_t)v21 + 16, (uint64_t)v21 + 64, *(unsigned __int8 **)(a1 + 32));
  *(double *)(a1 + 88) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(*(BlueFin::GlMeSrdAsicUnitConverter **)(a1 + 32), v28, v29);
  *(double *)(a1 + 112) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu(*(BlueFin::GlMeSrdAsicUnitConverter **)(a1 + 32), v28, v30);
  BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCNoMsmt((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildCarrMsmt((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  BlueFin::GlMeSrdSatRptTrkMsmtMI::BuildNavBitMsmt((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
  if ((a9 & 1) == 0)
  {
    if (!*(unsigned char *)v16)
    {
      DeviceFaultNotify("glmesrd_sat_report_trk_msmt.cpp", 1701, "BuildCodePrmSubMsmt", (char)"m_stAcqWindowMsmtInfo.m_bValid");
      CrashData();
    }
    uint64_t v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
    uint64_t v32 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 184))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
    unsigned __int8 v33 = *(BlueFin::GlSignalId **)a1;
    int v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 72))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
    int v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 80))(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 41));
    if (!v34 && v35 == 3)
    {
      *(_OWORD *)((char *)v33 + 392) = *(_OWORD *)((char *)v33 + 360);
      *(_OWORD *)((char *)v33 + 408) = *(_OWORD *)((char *)v33 + 376);
    }
    float v38 = *(float *)v31;
    float v39 = *(float *)(v32 + 20);
    float v40 = *(float *)(v32 + 92);
    unsigned int v41 = *(unsigned __int8 *)(v31 + 156);
    *(unsigned char *)(a1 + 100BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 1;
    *(unsigned char *)(a1 + 1008) = *((unsigned char *)v33 + 61);
    *(unsigned char *)(a1 + 102bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    unsigned int v42 = *((_DWORD *)v33 + 12);
    LOWORD(v36) = *((_WORD *)v33 + 29);
    LODWORD(v37) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
    *(double *)&unint64_t v43 = (double)v36 / (double)v37;
    double v44 = *(double *)&v43 + (double)(v42 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
    LOBYTE(v43) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
    *(double *)(a1 + 1016) = v44 / (double)v43 + (double)(v42 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft);
    *(_DWORD *)(a1 + 100bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_DWORD *)(a1 + 76);
    unsigned int v45 = *((unsigned __int16 *)v33 + 162);
    float v46 = (float)(v40 * (float)v41) * 0.5;
    double v47 = v46;
    if (v46 <= 0.0)
    {
      if (v46 >= 0.0)
      {
        LOBYTE(v49) = 0;
LABEL_19:
        *(float *)(a1 + 104bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v40 * 0.5;
        *(unsigned char *)(a1 + 1048) = v49;
        *(unsigned char *)(a1 + 1049) = v41;
        *(float *)(a1 + 104BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = (float)(v38 * (float)v45) / v39;
        *(unsigned char *)(a1 + 1136) = BlueFin::GlMeSrdSatRptTrkMsmtMI::AidApplied((BlueFin::GlMeSrdSatRptTrkMsmtMI *)a1);
        BlueFin::GlMeSrdAcqWindowMsmtInfo::CopyFrom(v16 + 1000, v16);
        goto LABEL_20;
      }
      double v48 = -0.5;
    }
    else
    {
      double v48 = 0.5;
    }
    int v49 = (int)(v47 + v48);
    goto LABEL_19;
  }
LABEL_20:
  *(void *)(a1 + 358bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_OWORD *)(a1 + 3568) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 352BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
  *(_OWORD *)(a1 + 350bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  return a1;
}

BOOL BlueFin::GlMeSrdSatRptTrkMsmtMIBase::IsTrackReset(BlueFin::GlMeSrdSatRptTrkMsmtMIBase *this)
{
  if (!**((_DWORD **)this + 1)) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 168))(*((void *)this + 2), *((unsigned __int8 *)this + 41));
  EpochCntInchar Bits = BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits(this);
  int v4 = *(_DWORD *)(*((void *)this + 1) + 4);
  long double v5 = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(*(void *)this + 36), *((unsigned __int8 **)this + 4), *((_DWORD *)this + 6));
  double v6 = fmod(v5, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v6 = v5;
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  if (v6 < 0.0) {
    unsigned int v7 = --v6;
  }
  else {
    unsigned int v7 = v6;
  }
  int v8 = **((_DWORD **)this + 1);
  unsigned int v9 = (BlueFin::GlSignalId *)*((void *)this + 4);
  int EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(v9);
  if (*((unsigned __int16 *)v9 + 4) >= 0x23Fu)
  {
    int v21 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v22 = 678;
    goto LABEL_29;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v9 + 1)
                                                              - *((int *)v9 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)v9]])
  {
    int v21 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v22 = 685;
LABEL_29:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v22, v21);
  }
  double v11 = (double)(BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)v9 + 1) - *((int *)v9 + 1) + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)v9]]
               * EpochPerSymbol)
      * 0.001;
  char v12 = (unsigned __int8 *)*((void *)this + 4);
  uint64_t v13 = *v12;
  if ((v13 - 76) <= 0x3Eu
    && (*(unsigned char *)(*(void *)this + 24) & 0xF) == 0
    && (v13 + 122) >= 5u
    && (v13 - 76) >= 5u)
  {
    double v11 = 0.001;
  }
  if (BlueFin::GlMeSrdSatRptTrkMsmtMIBase::GetEpochCntInBits(this) < *(_DWORD *)(*((void *)this + 1)
                                                                                              + 4))
    return 1;
  int v15 = EpochCntInBits - v4;
  double v16 = (double)(v7 - v8) * 0.001;
  double v17 = 0.02;
  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v12 + 1)
                                                              - *((int *)v12 + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[v13]] != 1)
    double v17 = v11;
  double v18 = v16 - (double)v15 * v17;
  double v19 = -(v16 + -(double)v15 * v17);
  if (v18 >= 0.0) {
    double v19 = v18;
  }
  return v19 > (float)(*(float *)(v2 + 44) * 5.0);
}

BOOL BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest::AnyExcludingCodeAndDoppler(BlueFin::GlMeSrdDspMeasAuxTrackRslts::ReasonsForRequest *this)
{
  return *(unsigned char *)this
      || *((unsigned char *)this + 3)
      || *((unsigned char *)this + 4)
      || *((unsigned char *)this + 5)
      || *((unsigned char *)this + 6)
      || *((unsigned char *)this + 7) != 0;
}

void BlueFin::GlMeSrdSatRptNonL1VetSm::~GlMeSrdSatRptNonL1VetSm(BlueFin::GlMeSrdSatRptNonL1VetSm *this)
{
}

#error "263A97148: call analysis failed (funcsize=100)"

#error "263A97308: call analysis failed (funcsize=59)"

#error "263A973E0: call analysis failed (funcsize=69)"

#error "263A97534: call analysis failed (funcsize=74)"

#error "263A97668: call analysis failed (funcsize=86)"

#error "263A977FC: call analysis failed (funcsize=92)"

#error "263A97984: call analysis failed (funcsize=73)"

#error "263A97AD8: call analysis failed (funcsize=49)"

#error "263A97BAC: call analysis failed (funcsize=49)"

uint64_t BlueFin::GlMeSrdSatRptNonL1VetContainer::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 2;
  }
  if (!*(void *)(v2 + 192))
  {
    int v10 = "m_potNonL1VetSm != NULL_PTR";
    DeviceFaultNotify("glmesrd_sat_report_vetting.cpp", 1151, "SerializeImpl", (char)"m_potNonL1VetSm != NULL_PTR");
    int v11 = 1151;
    goto LABEL_16;
  }
  if (v7 >= 3)
  {
    int v10 = "ucVersion >= 1 && ucVersion <= 2";
    DeviceFaultNotify("glmesrd_sat_report_vetting.cpp", 1152, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
    int v11 = 1152;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_sat_report_vetting.cpp", v11, v10);
  }
  int v16 = 104;
  char v17 = v7;
  uint64_t v18 = 0x1000000000000;
  int v15 = &unk_270EBA550;
  char v19 = v7;
  uint64_t v8 = v2 + 16;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)(v2 + 16) + 4));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 8));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)(*(void *)(v6 + 192) + 112) + 112));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 16));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 18));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v8 + 48));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v8 + 40));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)v8 + 56));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 68));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 72));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 76));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 80));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 81));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 82));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 83));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 84));
  int v14 = *(_DWORD *)(*(void *)v8 + 96);
  char v12 = &v14;
  char v13 = 1;
  BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v15, (const BlueFin::GlSetBase *)&v12);
  BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 100));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)v8 + 104));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 128));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 132));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 140));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 144));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)v8 + 148));
  if (v7 == 2) {
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(*(void *)(v6 + 16) + 152));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v5, 4);
  return 1;
}

uint64_t BlueFin::GlMeSrdSatRptNonL1VetContainer::Deserialize(BlueFin::GlMeSrdSatRptNonL1VetContainer *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 104 || *((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  unsigned int v6 = BlueFin::GlSysLogEntry::GetU8(a2);
  if ((U8 + 67) >= 0x44u)
  {
    uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[U8];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v6 - v6 + v8] == 255)
    {
      __int16 v7 = 575;
      unsigned int v6 = -1;
    }
    else
    {
      __int16 v7 = BlueFin::GlSignalId::s_ausGnss2signalId[v8]
         + U8
         - BlueFin::GlSvId::s_aucGnss2minSvId[v8]
         + BlueFin::GlSvId::s_aucGnss2numSvId[v8] * (_WORD)v6;
    }
  }
  else
  {
    __int16 v7 = 575;
  }
  *((unsigned char *)this + 32) = -1;
  *((unsigned char *)this + 36) = U8;
  *((_DWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v6;
  *((_WORD *)this + 22) = v7;
  *((_WORD *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((unsigned char *)this + 5BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 132) = 0;
  *((_DWORD *)this + 3bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 152) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 156) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *((unsigned char *)this + 116) = -1;
  *((_DWORD *)this + 28) = -1;
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 2) = (char *)this + 32;
  **((unsigned char **)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
  int v9 = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t v10 = *((void *)this + 2);
  int v11 = "invalid_event!";
  *(unsigned char *)(v10 + 16) = v9;
  if (v9 == 6) {
    int v11 = "EVT(MSMT)";
  }
  *(void *)(v10 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v11;
  int v12 = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t v13 = *((void *)this + 2);
  *(unsigned char *)(v13 + 18) = v12;
  if ((v12 - 1) > 9) {
    int v14 = "invalid_state!";
  }
  else {
    int v14 = off_2655D84C8[(char)(v12 - 1)];
  }
  *(void *)(v13 + 32) = v14;
  *(double *)(*((void *)this + 2) + 48) = BlueFin::GlSysLogEntry::GetD64(a2);
  *(double *)(*((void *)this + 2) + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetD64(a2);
  *(double *)(*((void *)this + 2) + 56) = BlueFin::GlSysLogEntry::GetD64(a2);
  *(float *)(*((void *)this + 2) + 68) = BlueFin::GlSysLogEntry::GetF32(a2);
  *(float *)(*((void *)this + 2) + 72) = BlueFin::GlSysLogEntry::GetF32(a2);
  *(float *)(*((void *)this + 2) + 76) = BlueFin::GlSysLogEntry::GetF32(a2);
  *(unsigned char *)(*((void *)this + 2) + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 2) + 8BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 2) + 82) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 2) + 83) = BlueFin::GlSysLogEntry::GetU8(a2);
  *(unsigned char *)(*((void *)this + 2) + 8bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
  char v19 = (void *)(*((void *)this + 2) + 96);
  char v20 = 1;
  BlueFin::GlSysLogEntry::GetGlSet(a2, &v19);
  *(unsigned char *)(*((void *)this + 2) + 10BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetS8(a2);
  unsigned int v15 = BlueFin::GlSysLogEntry::GetU8(a2);
  *(_DWORD *)(*((void *)this + 2) + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v15;
  *(void *)(*((void *)this + 2) + 112) = BlueFin::GlMeSrdEstMultipath::GetStr(v15);
  *(float *)(*((void *)this + 2) + 128) = BlueFin::GlSysLogEntry::GetF32(a2);
  *(float *)(*((void *)this + 2) + 132) = BlueFin::GlSysLogEntry::GetF32(a2);
  *(float *)(*((void *)this + 2) + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = BlueFin::GlSysLogEntry::GetF32(a2);
  *(float *)(*((void *)this + 2) + 14bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = BlueFin::GlSysLogEntry::GetF32(a2);
  float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
  uint64_t v17 = *((void *)this + 2);
  *(float *)(v17 + 148) = F32;
  if (*((unsigned __int8 *)a2 + 12) < 2u)
  {
    float v18 = 0.0;
  }
  else
  {
    float v18 = BlueFin::GlSysLogEntry::GetF32(a2);
    uint64_t v17 = *((void *)this + 2);
  }
  *(float *)(v17 + 152) = v18;
  *(unsigned char *)(v17 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = -1;
  *(_DWORD *)(v17 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
  *(_DWORD *)(v17 + 136) = 0;
  *(_DWORD *)(v17 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = -1082130432;
  uint64_t result = 1;
  *(void *)(v17 + 88) = 0xBFF0000000000000;
  return result;
}

void BlueFin::GlMeSrdSatRptNonL1VetContainer::~GlMeSrdSatRptNonL1VetContainer(BlueFin::GlMeSrdSatRptNonL1VetContainer *this)
{
}

uint64_t BlueFin::GlMeSrdSvIdMsmtHistoryBuffer::MsmtHistoryGarbageCollector(BlueFin::GlMeSrdSvIdMsmtHistoryBuffer *this)
{
  v14[0] = 0;
  int v15 = -1;
  LOWORD(v16) = 575;
  if (*((__int16 *)this + 2297) != -1)
  {
    __int16 v7 = "m_otMsmtHistoryArray.IsFull()";
    DeviceFaultNotify("glmesrd_svid_msmt_history.cpp", 192, "MsmtHistoryGarbageCollector", (char)"m_otMsmtHistoryArray.IsFull()");
    int v8 = 192;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_msmt_history.cpp", v8, v7);
  }
  uint64_t v1 = (char *)this + 4560;
  int v12 = (char *)this + 4560;
  unsigned __int16 v13 = 0;
  if (!*((_WORD *)this + 2296)) {
    goto LABEL_11;
  }
  char v2 = 0;
  unsigned int v3 = (char *)this + 3408;
  double v4 = 0.0;
  do
  {
    while (1)
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v12, (uint64_t)v9);
      double v5 = *(double *)(BlueFin::GlSignalIdArray::Get((uint64_t)v3, (uint64_t)v9) + 24);
      if (v5 < v4) {
        break;
      }
      v14[0] = v9[0];
      int v15 = v10;
      LOWORD(v16) = v11;
      char v2 = 1;
      double v4 = v5;
      if (v13 >= *((unsigned __int16 *)v12 + 16)) {
        goto LABEL_10;
      }
    }
  }
  while (v13 < *((unsigned __int16 *)v12 + 16));
  if ((v2 & 1) == 0)
  {
LABEL_11:
    __int16 v7 = "bHaveSignalIdToRemove";
    DeviceFaultNotify("glmesrd_svid_msmt_history.cpp", 215, "MsmtHistoryGarbageCollector", (char)"bHaveSignalIdToRemove");
    int v8 = 215;
    goto LABEL_13;
  }
LABEL_10:
  BlueFin::GlSignalIdArray::Get((uint64_t)v3, (uint64_t)v14);
  return BlueFin::GlBigArray::Remove((uint64_t)v1, (unsigned __int16)v16);
}

uint64_t BlueFin::GlMeSrdSvIdMsmtHistorySlot::Verify2dBitOkToPublish(BlueFin::GlMeSrdSvIdMsmtHistorySlot *this, const BlueFin::GlMeDSPMeas *a2, char a3)
{
  if (*((_DWORD *)a2 + 35) != 15)
  {
    DeviceFaultNotify("glmesrd_svid_msmt_history.cpp", 121, "Verify2dBitOkToPublish", (char)"otDspMeas.etMode == GlMeDSPMeas::SRCH_2DBIT");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_msmt_history.cpp", 121, "otDspMeas.etMode == GlMeDSPMeas::SRCH_2DBIT");
  }
  if ((~*((_DWORD *)a2 + 21) & 0x70) != 0) {
    return 0;
  }
  uint64_t v3 = 1;
  if (*(unsigned char *)this && (a3 & 1) == 0)
  {
    double v4 = *((double *)this + 3) * 1000.0;
    double v5 = *((double *)a2 + 3) * 1000.0;
    int v6 = (int)(v5 - v4);
    if (v6 >= 0) {
      unsigned int v7 = (int)(v5 - v4);
    }
    else {
      unsigned int v7 = -v6;
    }
    if (v7 <= 0x7530)
    {
      if ((float v8 = *((float *)this + 3),
            float v9 = vabds_f32(*((float *)a2 + 8), v8),
            int v10 = *((unsigned __int8 *)a2 + 100),
            (v10 - 76) <= 0x3E)
        && ((1 << (v10 - 76)) & 0x7C0000000000001FLL) != 0
        || (v10 - 33) <= 0x12)
      {
        float v11 = 0.0000003;
      }
      else
      {
        float v11 = 0.0000001;
      }
      if (v9 > v11) {
        return 0;
      }
      double v12 = vabdd_f64(v4 + (double)v6 * (1.0 - v8), v5);
      double v13 = fabs(v12 + -1.0);
      if (v12 > 0.5) {
        double v12 = v13;
      }
      if (v12 > 0.005) {
        return 0;
      }
    }
    return 1;
  }
  return v3;
}

void BlueFin::GlMeSrdSvIdReportMgr::~GlMeSrdSvIdReportMgr(BlueFin::GlMeSrdSvIdReportMgr *this)
{
  *(void *)this = &unk_270EBD590;
}

{
  JUMPOUT(0x263E6DD70);
}

double BlueFin::GlMeSrdSvIdReportMgr::SetDSPDataBits(BlueFin::GlMeSrdSvIdReportMgr *this, const BlueFin::GlMeDSPDataBits *a2, const BlueFin::GlMeDSPDataBits *a3)
{
  int v3 = *((unsigned __int8 *)a2 + 9);
  if (v3 != *((unsigned __int8 *)a3 + 9))
  {
    uint64_t v17 = "otSvId == otPllDataBits.m_otSvId";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 531, "SaveDataBits", (char)"otSvId == otPllDataBits.m_otSvId");
    int v18 = 531;
    goto LABEL_32;
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 8);
  if (v6 != *((unsigned __int8 *)a3 + 8))
  {
    uint64_t v17 = "ucSatId == otPllDataBits.m_ucChn";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 532, "SaveDataBits", (char)"ucSatId == otPllDataBits.m_ucChn");
    int v18 = 532;
    goto LABEL_32;
  }
  if ((v3 + 67) <= 0x43u)
  {
    uint64_t v17 = "IS_SVID(*otSvId)";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 534, "SaveDataBits", (char)"IS_SVID(*otSvId)");
    int v18 = 534;
    goto LABEL_32;
  }
  char v8 = (*(uint64_t (**)(void, void))(**((void **)this + 2) + 40))(*((void *)this + 2), *((unsigned __int8 *)a2 + 8));
  if (!(*(unsigned int (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2))
    || (v8 & 1) != 0)
  {
    goto LABEL_20;
  }
  if (((*(uint64_t (**)(void))(**((void **)this + 2) + 64))(*((void *)this + 2)) & 1) == 0)
  {
    uint64_t v17 = "m_otDataBitsArray.IsFull()";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1510, "DataBitsGarbageCollector", (char)"m_otDataBitsArray.IsFull()");
    int v18 = 1510;
    goto LABEL_32;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 2) + 80))(&v19);
  if (v20 >= *(unsigned __int8 *)(v19 + 38)) {
    goto LABEL_33;
  }
  uint64_t v9 = 255;
  double v10 = 1.79769313e308;
  do
  {
    uint64_t v11 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v19);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v11);
    if ((v9 == 255 || v10 >= *(double *)(v12 + 336))
      && (uint64_t v9 = v11, v10 = *(double *)(v12 + 336), v11 == 255))
    {
      double v13 = *(double *)(v12 + 32);
    }
    else
    {
      double v13 = *(double *)(v12 + 32);
      if (v10 < v13) {
        continue;
      }
    }
    double v10 = v13;
    uint64_t v9 = v11;
  }
  while (v20 < *(unsigned __int8 *)(v19 + 38));
  if (v9 == 255)
  {
LABEL_33:
    uint64_t v17 = "ucSatToRemove != INVALID_SATID";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 1531, "DataBitsGarbageCollector", (char)"ucSatToRemove != INVALID_SATID");
    int v18 = 1531;
LABEL_32:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_report_mgr.cpp", v18, v17);
  }
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 16))(*((void *)this + 2), v9);
  (*(void (**)(void, uint64_t))(**((void **)this + 2) + 32))(*((void *)this + 2), v9);
  double v14 = *((double *)a2 + 4);
  if (v14 <= *((double *)a3 + 4)) {
    double v14 = *((double *)a3 + 4);
  }
  if (v14 - v10 < 0.1)
  {
    uint64_t v17 = "(dCurrentTimeStampLs - dOldestTimeStampLs) >= 0.1";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 542, "SaveDataBits", (char)"(dCurrentTimeStampLs - dOldestTimeStampLs) >= 0.1");
    int v18 = 542;
    goto LABEL_32;
  }
LABEL_20:
  int v15 = (BlueFin::GlMeSrdSvIdReportDataBitsSlot *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 2)
                                                                                             + 24))(*((void *)this + 2), v6);
  if (!v15)
  {
    uint64_t v17 = "potDataBitSlot != nullptr";
    DeviceFaultNotify("glmesrd_svid_report_mgr.cpp", 549, "SaveDataBits", (char)"potDataBitSlot != nullptr");
    int v18 = 549;
    goto LABEL_32;
  }
  if ((v8 & 1) == 0) {
    BlueFin::GlMeSrdSvIdReportDataBitsSlot::GlMeSrdSvIdReportDataBitsSlot(v15);
  }

  *(void *)&double result = BlueFin::GlMeSrdSvIdReportDataBitsSlot::Save((uint64_t)v15, (uint64_t)a2, (uint64_t)a3).n128_u64[0];
  return result;
}

__n128 BlueFin::GlMeSrdSvIdReportDataBitsSlot::Save(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 20);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(unsigned char *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 44);
  long long v4 = *(_OWORD *)(a2 + 60);
  long long v5 = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 76) = v5;
  *(_OWORD *)(a1 + 6BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v4;
  *(_OWORD *)(a1 + 4bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  long long v6 = *(_OWORD *)(a2 + 108);
  long long v7 = *(_OWORD *)(a2 + 124);
  long long v8 = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(a1 + 14BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
  *(_OWORD *)(a1 + 12bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
  *(_OWORD *)(a1 + 108) = v6;
  long long v9 = *(_OWORD *)(a2 + 252);
  long long v10 = *(_OWORD *)(a2 + 268);
  long long v11 = *(_OWORD *)(a2 + 284);
  *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
  *(_OWORD *)(a1 + 268) = v10;
  *(_OWORD *)(a1 + 28bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v11;
  *(_OWORD *)(a1 + 252) = v9;
  long long v12 = *(_OWORD *)(a2 + 172);
  long long v13 = *(_OWORD *)(a2 + 188);
  long long v14 = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 22BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 20bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v14;
  *(_OWORD *)(a1 + 188) = v13;
  *(_OWORD *)(a1 + 172) = v12;
  *(_WORD *)(a1 + 312) = *(_WORD *)(a3 + 8);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a3 + 12);
  *(_WORD *)(a1 + 32BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_WORD *)(a3 + 16);
  *(void *)(a1 + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(void *)(a3 + 20);
  *(void *)(a1 + 336) = *(void *)(a3 + 32);
  *(unsigned char *)(a1 + 34bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(unsigned char *)(a3 + 40);
  long long v15 = *(_OWORD *)(a3 + 44);
  long long v16 = *(_OWORD *)(a3 + 60);
  long long v17 = *(_OWORD *)(a3 + 76);
  *(_OWORD *)(a1 + 396) = *(_OWORD *)(a3 + 92);
  *(_OWORD *)(a1 + 38BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v17;
  *(_OWORD *)(a1 + 36bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v16;
  *(_OWORD *)(a1 + 348) = v15;
  long long v18 = *(_OWORD *)(a3 + 108);
  long long v19 = *(_OWORD *)(a3 + 124);
  long long v20 = *(_OWORD *)(a3 + 140);
  *(_OWORD *)(a1 + 46BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(_OWORD *)(a3 + 156);
  *(_OWORD *)(a1 + 44bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v20;
  *(_OWORD *)(a1 + 428) = v19;
  *(_OWORD *)(a1 + 412) = v18;
  long long v21 = *(_OWORD *)(a3 + 188);
  long long v22 = *(_OWORD *)(a3 + 204);
  long long v23 = *(_OWORD *)(a3 + 220);
  *(_OWORD *)(a1 + 476) = *(_OWORD *)(a3 + 172);
  *(_OWORD *)(a1 + 52bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v23;
  *(_OWORD *)(a1 + 508) = v22;
  *(_OWORD *)(a1 + 492) = v21;
  __n128 result = *(__n128 *)(a3 + 236);
  long long v25 = *(_OWORD *)(a3 + 252);
  long long v26 = *(_OWORD *)(a3 + 284);
  *(_OWORD *)(a1 + 572) = *(_OWORD *)(a3 + 268);
  *(_OWORD *)(a1 + 588) = v26;
  *(_OWORD *)(a1 + 556) = v25;
  *(__n128 *)(a1 + 54BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = result;
  *(unsigned char *)(a1 + 608) = 1;
  return result;
}

uint64_t BlueFin::GlMeSrdSvIdReportDataBitsSlot::GetSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  int v2 = *(unsigned __int8 *)(this + 9);
  if (v2 != *(unsigned __int8 *)(this + 313))
  {
    long long v3 = "m_otFllBits.m_otSvId == m_otPllBits.m_otSvId";
    DeviceFaultNotify("glmesrd_svid_report_mgr_slot_types.cpp", 50, "GetSvId", (char)"m_otFllBits.m_otSvId == m_otPllBits.m_otSvId");
    int v4 = 50;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_svid_report_mgr_slot_types.cpp", v4, v3);
  }
  if ((v2 + 67) <= 0x43u)
  {
    long long v3 = "IS_SVID(*m_otFllBits.m_otSvId)";
    DeviceFaultNotify("glmesrd_svid_report_mgr_slot_types.cpp", 52, "GetSvId", (char)"IS_SVID(*m_otFllBits.m_otSvId)");
    int v4 = 52;
    goto LABEL_6;
  }
  *a2 = v2;
  return this;
}

uint64_t BlueFin::GlMeSrdTowAssistHolder::SetTowAssist(BlueFin::GlMeSrdTowAssistHolder *this, const BlueFin::GlTowAsstData *a2)
{
  uint64_t result = BlueFin::GlTowAsstData::operator=((uint64_t)this + 8, (uint64_t)a2);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v4 = *(uint64_t (**)(const BlueFin::GlTowAsstData *, void, void))(*(void *)a2 + 24);
    return v4(a2, 0, 0);
  }
  return result;
}

void BlueFin::GlMeSrdTowAssistHolder::~GlMeSrdTowAssistHolder(BlueFin::GlMeSrdTowAssistHolder *this)
{
}

uint64_t BlueFin::GlMeSrdViterbiDecoder::RunViterbi(BlueFin::GlMeSrdViterbiDecoder *this, unsigned int a2, unsigned int *a3, unsigned int *a4, int a5)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  if (a2 < 0x249)
  {
    int v11 = 0;
    unsigned int v10 = a2;
  }
  else
  {
    unsigned int v10 = 584;
    GlCustomLog(63, "ViterbiDBG: Bit Length curtailed from %d to %d\n", a2, 584);
    int v11 = a2 & 1;
  }
  if (*((unsigned char *)this + 415)) {
    BOOL v12 = a5 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    unsigned int v15 = 0;
  }
  else
  {
    if (a5) {
      unsigned int v13 = -64;
    }
    else {
      unsigned int v13 = 0;
    }
    int8x16_t v14 = vdupq_n_s8(v13);
    *((int8x16_t *)this + 2) = v14;
    *((int8x16_t *)this + 3) = v14;
    *(int8x16_t *)this = v14;
    *((int8x16_t *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v14;
    *((_OWORD *)this + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *((_OWORD *)this + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 1bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *((_OWORD *)this + 2BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)((char *)this + 398) = 0u;
    *((unsigned char *)this + 417) = -1;
    *((unsigned char *)this + 41bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    if (a5)
    {
      unsigned int v15 = 0;
      *(unsigned char *)this = 0;
    }
    else
    {
      unsigned int v15 = 84;
    }
  }
  int v16 = *((unsigned __int8 *)this + 418);
  long long v17 = &v97;
  if (v16 == 1)
  {
    long long v17 = v98;
    char v97 = *((unsigned char *)this + 417);
    unsigned int v18 = 1;
  }
  else
  {
    unsigned int v18 = 0;
  }
  if (v18 >= v10)
  {
    int v21 = 0;
  }
  else
  {
    char v19 = 0;
    int v20 = 0;
    int v21 = 0;
    uint64_t v22 = (unsigned __int16)(v10 + ~(_WORD)v18) + 1;
    long long v23 = a3;
    do
    {
      if (!v19)
      {
        int v24 = *v23++;
        int v21 = v24;
        int v25 = *a4++;
        int v20 = v25;
        char v19 = 32;
      }
      int v26 = (v21 >> 31) | 1;
      if (a5)
      {
        char v27 = v21 >= 0 ? 2 : -2;
        if (v20 >= 0) {
          LOBYTE(v26) = v27;
        }
      }
      --v19;
      *v17++ = v26;
      v21 *= 2;
      v20 *= 2;
      --v22;
    }
    while (v22);
  }
  uint64_t v28 = v10 >> 1;
  if (v16 == 1) {
    *((unsigned char *)this + 417) = (v21 >> 31) | 1;
  }
  memcpy(__dst, (char *)this + 64, sizeof(__dst));
  unsigned __int16 v29 = (unsigned __int8 *)&v101;
  if (v10 >= 2)
  {
    int v30 = 0;
    int v31 = 0;
    unsigned __int8 v32 = 0;
    unsigned __int8 v33 = &v97;
    do
    {
      uint64_t v34 = 0;
      if (v30) {
        int v35 = (BlueFin::GlMeSrdViterbiDecoder *)v102;
      }
      else {
        int v35 = this;
      }
      int v36 = v33[1];
      int v37 = *v33;
      int v38 = v37 + v36;
      int v39 = v36 - v37;
      if (v30) {
        float v40 = this;
      }
      else {
        float v40 = (BlueFin::GlMeSrdViterbiDecoder *)v102;
      }
      v99[0] = v38;
      v99[1] = v39;
      v99[2] = -v39;
      v99[3] = -v38;
      int v41 = -128;
      do
      {
        int v42 = v99[BlueFin::GlMeSrdViterbiDecoder::m_scMIndex[v34]];
        int v43 = *((char *)v35 + v34 + 32);
        int v44 = *((char *)v35 + v34);
        if (v42 + v44 >= v43 - v42) {
          v32 >>= 2;
        }
        else {
          unsigned __int8 v32 = (v32 >> 2) | 0x40;
        }
        if (v42 + v44 <= v43 - v42) {
          int v45 = v43 - v42;
        }
        else {
          int v45 = v42 + v44;
        }
        int v46 = v45 - v31;
        *(unsigned char *)float v40 = v46;
        if (v46 > v41) {
          int v41 = v46;
        }
        int v47 = v44 - v42;
        if (v47 < v42 + v43) {
          v32 |= 0x80u;
        }
        if (v47 <= v42 + v43) {
          int v47 = v42 + v43;
        }
        int v48 = v47 - v31;
        *((unsigned char *)v40 + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v48;
        if (v48 > v41) {
          int v41 = v48;
        }
        if ((~(_BYTE)v34 & 3) == 0) {
          *v29++ = v32;
        }
        ++v34;
        float v40 = (BlueFin::GlMeSrdViterbiDecoder *)((char *)v40 + 2);
      }
      while (v34 != 32);
      v33 += 2;
      int v31 = v41 - 107;
      if (v41 <= 107) {
        int v31 = 0;
      }
      ++v30;
    }
    while (v30 != v28);
  }
  if ((v10 & 2) != 0) {
    int v49 = (BlueFin::GlMeSrdViterbiDecoder *)v102;
  }
  else {
    int v49 = this;
  }
  unsigned int v50 = 0;
  if ((a5 & 1) == 0)
  {
    int v51 = -128;
    for (uint64_t i = 63; i != -1; --i)
    {
      int v53 = *((char *)v49 + i);
      if (v51 < v53) {
        unsigned int v50 = i;
      }
      if (v51 <= v53) {
        int v51 = *((char *)v49 + i);
      }
    }
    int v54 = v29 - 8;
    int v55 = 35;
    do
    {
      unsigned int v50 = (32
           * ((BlueFin::GlMeSrdViterbiDecoder::m_ucSbasBitAccess[v50 & 7] & v54[(unint64_t)v50 >> 3]) != 0)) | (v50 >> 1);
      v54 -= 8;
      --v55;
    }
    while (v55);
    v29 -= 280;
  }
  if (v10 >= 2)
  {
    unint64_t v56 = a2;
    if (a2 >= 0x248uLL) {
      unint64_t v56 = 584;
    }
    unint64_t v57 = v56 >> 1;
    char v58 = v29 - 8;
    do
    {
      v98[v57 + 582] = v50 & 1;
      unsigned int v50 = (32
           * ((BlueFin::GlMeSrdViterbiDecoder::m_ucSbasBitAccess[v50 & 7] & v58[(unint64_t)v50 >> 3]) != 0)) | (v50 >> 1);
      v58 -= 8;
      --v57;
    }
    while (v57);
  }
  memcpy((char *)this + 64, &__dst[(8 * v28)], 0x118uLL);
  if ((v10 & 2) != 0)
  {
    long long v59 = v102[1];
    *(_OWORD *)this = v102[0];
    *((_OWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v59;
    long long v60 = v102[3];
    *((_OWORD *)this + 2) = v102[2];
    *((_OWORD *)this + 3) = v60;
  }
  if (v10 >= 2)
  {
    int v61 = 0;
    unsigned int v62 = *((unsigned __int8 *)this + 414);
    if (v28 <= 1) {
      __int16 v63 = 1;
    }
    else {
      __int16 v63 = v10 >> 1;
    }
    uint64_t v64 = 2 * (unsigned __int16)(v63 - 1) + 2;
    int v65 = (char *)v99;
    long long v66 = __dst;
    char v67 = 32;
    long long v68 = a3;
    do
    {
      int v69 = *v65++;
      BOOL v70 = v69 > 0;
      int v61 = v70 | (2 * v61);
      if (!--v67)
      {
        *v68++ = v61;
        char v67 = 32;
        int v61 = 0;
      }
      unsigned int v62 = v70 | (2 * v62);
      int8x8_t v71 = vand_s8((int8x8_t)vdup_n_s32(v62), (int8x8_t)0x4F0000006DLL);
      int8x8_t v72 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v71, 4uLL), v71);
      int8x8_t v73 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v72, 2uLL), v72);
      int32x2_t v74 = vceqz_s32((int32x2_t)vand_s8(veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v73, 1uLL), v73), (int8x8_t)0x100000001));
      if (v74.i8[4]) {
        char v75 = 1;
      }
      else {
        char v75 = -1;
      }
      *long long v66 = v75;
      if (v74.i8[0]) {
        char v76 = 1;
      }
      else {
        char v76 = -1;
      }
      v66[1] = v76;
      v66 += 2;
      v64 -= 2;
    }
    while (v64);
    *((unsigned char *)this + 41bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v62;
    if (v67 != 32) {
      *long long v68 = v61;
    }
  }
  if (v15 >= v10)
  {
    LOWORD(v77) = 0;
    uint64_t v79 = v10;
  }
  else
  {
    int v77 = 0;
    unint64_t v78 = v15;
    uint64_t v79 = v10;
    do
    {
      if (a5)
      {
        int v80 = &v98[v78 - 1];
      }
      else
      {
        int v80 = &v98[(v78 - 70) - 1];
        if (v78 <= 0x45) {
          int v80 = (char *)this + v78 + 344;
        }
      }
      v77 += ((__dst[v78++] ^ *v80) & 0x80) >> 7;
    }
    while (v10 != v78);
  }
  uint64_t v81 = 0;
  int v82 = 0;
  __int16 v83 = &v98[v79 - 1];
  long long v84 = *(_OWORD *)(v83 - 22);
  *(_OWORD *)((char *)this + 376) = *(_OWORD *)(v83 - 38);
  *(_OWORD *)((char *)this + 392) = v84;
  *(void *)((char *)this + 406) = *((void *)v83 - 1);
  long long v85 = *(_OWORD *)(v83 - 54);
  *(_OWORD *)((char *)this + 34bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(_OWORD *)(v83 - 70);
  *(_OWORD *)((char *)this + 36BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v85;
  do
  {
    uint64_t v86 = 0;
    unsigned int v87 = 0;
    uint64_t v88 = v82;
    char v89 = 31;
    unsigned int v90 = (char *)v99 + v82;
    do
    {
      v87 |= v90[v86] << v89;
      int v91 = v86 + 1;
      if (v88 + v86 >= v28 - 1) {
        break;
      }
      --v89;
    }
    while (v86++ < 0x1F);
    a3[v81++] = v87;
    int v82 = v88 + v91;
  }
  while (v81 != (v10 >> 6) + 1);
  __int16 v93 = *((unsigned __int8 *)this + 415);
  if (((v93 + 1) & 0x100) != 0) {
    unsigned __int8 v94 = -1;
  }
  else {
    unsigned __int8 v94 = v93 + 1;
  }
  *((unsigned char *)this + 415) = v94;
  if ((unsigned __int16)v77 <= 0xAu) {
    unsigned __int8 v95 = 0;
  }
  else {
    unsigned __int8 v95 = *((unsigned char *)this + 416) + 1;
  }
  *((unsigned char *)this + 416) = v95;
  if (((v95 < 6u) & ~v11) == 0)
  {
    *(_WORD *)((char *)this + 415) = 0;
    *((unsigned char *)this + 418) = *((unsigned char *)this + 418) == 0;
    GlCustomLog(63, "ViterbiDBG: Bit alignment changed\n");
    unsigned __int8 v94 = *((unsigned char *)this + 415);
  }
  GlCustomLog(63, "ViterbiDBG: BitErrors %d, BlkCnt %d\n", (unsigned __int16)v77, v94);
  return (unsigned __int16)v77;
}

uint64_t BlueFin::ctXps::GenIcdTxWrd(BlueFin::ctXps *this, int a2)
{
  unsigned int v2 = this ^ 0x3FFFFFC0;
  if ((this & 0x40000000) == 0) {
    unsigned int v2 = this;
  }
  if (a2)
  {
    unsigned __int32 v3 = 0;
    unsigned int v4 = v2 & 0x2BB1F342 ^ ((v2 & 0x2BB1F342) >> 16) ^ ((v2 & 0x2BB1F342 ^ ((v2 & 0x2BB1F342) >> 16)) >> 8);
    unsigned int v5 = v4 ^ (v4 >> 4) ^ ((v4 ^ (v4 >> 4)) >> 2);
    if ((v5 ^ (v5 >> 1))) {
      v2 ^= 0x40u;
    }
    unsigned int v6 = v2 & 0xCB7A89C1 ^ ((v2 & 0xCB7A89C1) >> 16) ^ ((v2 & 0xCB7A89C1 ^ ((v2 & 0xCB7A89C1) >> 16)) >> 8);
    unsigned int v7 = v6 ^ (v6 >> 4) ^ ((v6 ^ (v6 >> 4)) >> 2);
    if ((v7 ^ (v7 >> 1))) {
      v2 ^= 0x80u;
    }
  }
  else
  {
    int8x8_t v8 = vand_s8((int8x8_t)vdup_n_s32(v2), (int8x8_t)0x2BB1F342CB7A89C1);
    int8x8_t v9 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v8, 0x10uLL), v8);
    int8x8_t v10 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v9, 8uLL), v9);
    int8x8_t v11 = veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v10, 4uLL), v10);
    int32x2_t v12 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v11, 2uLL), v11);
    v13.i32[0] = vshr_n_u32((uint32x2_t)v12, 1uLL).u32[0];
    v13.i32[1] = vadd_s32(v12, v12).i32[1];
    int32x2_t v14 = (int32x2_t)vand_s8(veor_s8(v13, (int8x8_t)v12), (int8x8_t)0x200000001);
    unsigned __int32 v3 = vorr_s8((int8x8_t)v14, (int8x8_t)vdup_lane_s32(v14, 1)).u32[0];
  }
  int8x16_t v15 = vandq_s8((int8x16_t)vdupq_n_s32(v2), (int8x16_t)xmmword_263BAF1C0);
  int8x16_t v16 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v15, 0x10uLL), v15);
  int8x16_t v17 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v16, 8uLL), v16);
  int8x16_t v18 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v17, 4uLL), v17);
  int8x16_t v19 = veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v18, 2uLL), v18);
  return vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)veorq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v19, 1uLL), v19), (uint32x4_t)xmmword_263BAF1D0), (int8x16_t)xmmword_263BAF1E0))+ v2+ v3;
}

uint64_t BlueFin::ctXps::BuildXP(BlueFin::ctXps *this, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v7 = 0;
  *(_DWORD *)this = a2;
  unsigned int v8 = 6000 * (a2 / 0x1770) + 6000;
  unsigned int v9 = v8 / 0x1770;
  BOOL v10 = v8 > 0x240C83FF;
  unsigned int v11 = v8 / 0x1770 - 100800;
  if (v10) {
    unsigned int v9 = v11;
  }
  do
  {
    int v12 = v9 + v7;
    if (v9 + v7 > 0x189BF) {
      int v12 = v9 - 100800 + v7;
    }
    *((_DWORD *)this + v7++ + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v12;
  }
  while (v7 != 3);
  *((_DWORD *)this + BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = 0;
  int v13 = BlueFin::ctXps::GenIcdTxWrd((BlueFin::ctXps *)(((a4 & 3) << 6) | (a3 << 8) | 0x22C00000u), 0);
  uint64_t v14 = 0;
  unsigned int v15 = v13 & 0xFFFFFFFE ^ (2 * v13);
  int v16 = ((a5 & 1) << 6) | (32 * (a6 & 1)) | ((v13 & 3) << 24);
  int v17 = v13 & 1;
  int8x16_t v18 = (int *)((char *)this + 12);
  do
  {
    if (a3 == 0x4000)
    {
      if (a4 == 4) {
        int v19 = -4194241;
      }
      else {
        int v19 = -4194049;
      }
      goto LABEL_13;
    }
    if (a4 == 4)
    {
      int v19 = -193;
LABEL_13:
      char v20 = 0;
      int v21 = v19 ^ 0x3F;
      goto LABEL_15;
    }
    char v20 = 1;
    int v21 = -1;
LABEL_15:
    unsigned int v22 = *(_DWORD *)((char *)this + v14 + 40);
    if (v22 <= 0x189BF)
    {
      if (v22 < 2) {
        unsigned int v25 = v22 + 100799;
      }
      else {
        unsigned int v25 = v22 - 1;
      }
      unsigned int v23 = v25 % 5 + 1;
      unsigned int v24 = 0x3FFFFFFF;
    }
    else
    {
      LOBYTE(v23) = 0;
      char v20 = 0;
      unsigned int v24 = 6399;
    }
    if (a5 == 2)
    {
      v24 &= ~0x1000u;
      if (a6 == 2) {
LABEL_25:
      }
        v24 ^= 0x800u;
LABEL_26:
      uint64_t v26 = 0;
      v24 ^= 0xFCu;
      goto LABEL_27;
    }
    if (a6 == 2) {
      goto LABEL_25;
    }
    if ((v20 & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t v26 = 1;
LABEL_27:
    int v27 = BlueFin::ctXps::GenIcdTxWrd((BlueFin::ctXps *)((v16 | (4 * (v23 & 7)) | ((v22 & 0x1FFFF) << 7)) << 6), 1);
    *((_DWORD *)this + 8) = ((v24 >> 29) | (2 * v21)) & v21;
    *((_DWORD *)this + 9) = (8 * v24) & (4 * v24);
    int v28 = (4 * v27) ^ (8 * v27);
    unsigned int v29 = v17 ^ ((4 * v27) >> 31) | v15;
    *(v18 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v29;
    *int8x16_t v18 = v28;
    *(v18 - BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = *((_DWORD *)this + 8) & v29;
    *int8x16_t v18 = *((_DWORD *)this + 9) & v28;
    v18 += 2;
    v14 += 4;
  }
  while (v14 != 12);
  return v26;
}

float BlueFin::ctXps::Xorr(BlueFin::ctXps *this, int8x8_t *a2, int8x8_t *a3, int8x8_t *a4, int8x8_t *a5)
{
  int32x2_t v5 = (int32x2_t)vand_s8(*a5, *a3);
  int8x8_t v6 = (int8x8_t)vsub_s32(v5, (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 1uLL), (int8x8_t)0x5555555555555555));
  uint32x2_t v7 = (uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v6, 2uLL), (int8x8_t)0x3333333333333333), (int32x2_t)vand_s8(v6, (int8x8_t)0x3333333333333333));
  uint32x2_t v8 = (uint32x2_t)vand_s8((int8x8_t)vsra_n_u32(v7, v7, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL);
  uint32x2_t v9 = vsra_n_u32(v8, v8, 8uLL);
  int32x2_t v10 = (int32x2_t)vand_s8((int8x8_t)vsra_n_u32(v9, v9, 0x10uLL), (int8x8_t)0x3F0000003FLL);
  int8x8_t v11 = (int8x8_t)vsub_s32((int32x2_t)*a5, (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)*a5, 1uLL), (int8x8_t)0x5555555555555555));
  uint32x2_t v12 = (uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v11, 2uLL), (int8x8_t)0x3333333333333333), (int32x2_t)vand_s8(v11, (int8x8_t)0x3333333333333333));
  uint32x2_t v13 = (uint32x2_t)vand_s8((int8x8_t)vsra_n_u32(v12, v12, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL);
  uint32x2_t v14 = vsra_n_u32(v13, v13, 8uLL);
  int32x2_t v15 = (int32x2_t)vand_s8((int8x8_t)vsra_n_u32(v14, v14, 0x10uLL), (int8x8_t)0x3F0000003FLL);
  int32x2_t v16 = vadd_s32(vzip2_s32(v10, v15), vzip1_s32(v10, v15));
  unsigned __int32 v17 = v16.i32[0];
  float result = 0.0;
  if (v17 >= v16.i32[1])
  {
    int32x2_t v19 = (int32x2_t)vbic_s8((int8x8_t)v5, veor_s8(*a2, *a4));
    int8x8_t v20 = (int8x8_t)vsub_s32(v19, (int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 1uLL), (int8x8_t)0x5555555555555555));
    uint32x2_t v21 = (uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshr_n_u32((uint32x2_t)v20, 2uLL), (int8x8_t)0x3333333333333333), (int32x2_t)vand_s8(v20, (int8x8_t)0x3333333333333333));
    uint32x2_t v22 = (uint32x2_t)vand_s8((int8x8_t)vsra_n_u32(v21, v21, 4uLL), (int8x8_t)0xF0F0F0F0F0F0F0FLL);
    uint32x2_t v23 = vsra_n_u32(v22, v22, 8uLL);
    int32x2_t v24 = (int32x2_t)vand_s8((int8x8_t)vsra_n_u32(v23, v23, 0x10uLL), (int8x8_t)0x3F0000003FLL);
    return (float)vadd_s32(v24, vdup_lane_s32(v24, 1)).u32[0] / (float)v17;
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetBdsB2aPCodeOffset(unsigned char *a1)
{
  if (*a1 - 76 >= 0x3F)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1492, "GetBdsB2aPCodeOffset", (char)"otSvId.IsBeidou()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1492, "otSvId.IsBeidou()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_ausBdsB2aPCodeOffset[(*a1 - 76)];
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetGalE5bQCodeOffset(unsigned char *a1)
{
  if ((*a1 + 117) >= 0x24u)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1481, "GetGalE5bQCodeOffset", (char)"otSvId.IsGalileo()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1481, "otSvId.IsGalileo()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_ausGalE5bQCodeOffset[(*a1 + 117)];
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetGalE5aQCodeOffset(unsigned char *a1)
{
  if ((*a1 + 117) >= 0x24u)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1463, "GetGalE5aQCodeOffset", (char)"otSvId.IsGalileo()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1463, "otSvId.IsGalileo()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_ausGalE5aQCodeOffset[(*a1 + 117)];
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetNavicL5CodeOffset(unsigned char *a1)
{
  if ((*a1 + 81) >= 0xEu)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1529, "GetNavicL5CodeOffset", (char)"otSvId.IsNavic()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1529, "otSvId.IsNavic()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_aulNavicL5CodeOffset[(*a1 + 81)];
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetBdsPrnIndex(unsigned char *a1)
{
  if (*a1 - 76 >= 0x3F)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1501, "GetBdsPrnIndex", (char)"otSvId.IsBeidou()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1501, "otSvId.IsBeidou()");
  }
  return (*a1 - 76);
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetGpsPrnIndex(unsigned char *a1)
{
  uint64_t result = (*a1 - 1);
  if (result >= 0x20)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1511, "GetGpsPrnIndex", (char)"otSvId.IsGps()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1511, "otSvId.IsGps()");
  }
  return result;
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetQzssPrnIndex(unsigned char *a1)
{
  if (*a1 - 66 >= 0xA)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1519, "GetQzssPrnIndex", (char)"otSvId.IsQzss()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1519, "otSvId.IsQzss()");
  }
  return (*a1 - 66);
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetGpsL2CInitShiftRegisterState(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  if ((v1 - 1) >= 0x20)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1028, "GetGpsL2CInitShiftRegisterState", (char)"otSvId.IsGps()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1028, "otSvId.IsGps()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_aulGpsL2CInitShiftRegisterState[v1];
}

uint64_t BlueFin::GlMeSrdAsicUnitConverter::GetQzssL2CInitShiftRegisterState(unsigned char *a1)
{
  if (*a1 - 66 >= 0xA)
  {
    DeviceFaultNotify("glmesrd_asic_unit_converter.cpp", 1037, "GetQzssL2CInitShiftRegisterState", (char)"otSvId.IsQzss()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_asic_unit_converter.cpp", 1037, "otSvId.IsQzss()");
  }
  return BlueFin::GlMeSrdAsicUnitConverter::m_aulQzssL2CInitShiftRegisterState[(*a1 - 66)];
}

uint64_t BlueFin::GlMeRxParamStd::GetModeTrkParamsFromCnstlAndMode(int **a1, int a2, int a3)
{
  if (a3 >= 6)
  {
    uint32x2_t v7 = "eMode < GetMaxAllowedModes()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 616, "GetModeTrkParamsFromCnstlAndMode", (char)"eMode < GetMaxAllowedModes()");
    int v8 = 616;
    goto LABEL_8;
  }
  if ((int)BlueFin::GlMeRxParamLimits::GetMaxAllowedCnstls(*a1[1]) <= a2)
  {
    uint32x2_t v7 = "eCnstl < GetMaxAllowedCnstls()";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 617, "GetModeTrkParamsFromCnstlAndMode", (char)"eCnstl < GetMaxAllowedCnstls()");
    int v8 = 617;
    goto LABEL_8;
  }
  uint64_t result = *(void *)(*((void *)BlueFin::GlMeRxParamStd::rMap(a1) + 6)
                     + 208 * a2
                     + 8 * a3
                     + 232);
  if (!result)
  {
    uint32x2_t v7 = "rMp.m_pstTrkParams->astCnstlParams[eCnstl].pastModeParams[eMode] != nullptr";
    DeviceFaultNotify("glmesrd_receiver_parameters.cpp", 620, "GetModeTrkParamsFromCnstlAndMode", (char)"rMp.m_pstTrkParams->astCnstlParams[eCnstl].pastModeParams[eMode] != nullptr");
    int v8 = 620;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters.cpp", v8, v7);
  }
  return result;
}

uint64_t BlueFin::GlMeRxParamStd::GetNumGearIds(int **this)
{
  return **((unsigned __int8 **)BlueFin::GlMeRxParamStd::rMap(this) + 2);
}

void BlueFin::GlMeRxParamStd::SetRxType()
{
}

void BlueFin::GlMeRxParamMNWImp::~GlMeRxParamMNWImp(BlueFin::GlMeRxParamMNWImp *this)
{
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetTotalFftThroughput(uint64_t a1, uint64_t a2)
{
  return 32 * ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2) & 0x7FF);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetTotalFFTResourceForBsId(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned __int8 *)((*(uint64_t (**)(void *, uint64_t))(*a1[1] + 248))(a1[1], a3) + 12);
  uint32x2_t v9 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(*a1)[2];

  return v9(a1, a2, a3, v8, a4);
}

uint64_t BlueFin::GlMeSrdReceiverParametersProgrammer::GetTotalMemBinResourceForBsId(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(unsigned __int8 *)((*(uint64_t (**)(void *, uint64_t))(*a1[1] + 248))(a1[1], a3) + 12);
  uint64_t v8 = (uint64_t (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[3];

  return v8(a1, a3, v7, a4);
}

void BlueFin::GlMeSrdReceiverParametersProgrammer::~GlMeSrdReceiverParametersProgrammer(BlueFin::GlMeSrdReceiverParametersProgrammer *this)
{
}

uint64_t BlueFin::GlMeSrdTrkCvecTapConfig::GlMeSrdTrkCvecTapConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 9)
  {
    int32x2_t v19 = "etTapCfg == TRK_TAP_REGULAR || etTapCfg == TRK_TAP_REGULAR_5TH_MULTIPATH || etTapCfg == TRK_TAP_REGULAR_4TH_MU"
          "LTIPATH || etTapCfg == TRK_TAP_SNIFF || etTapCfg == TRK_TAP_SBAS || etTapCfg == TRK_TAP_GALILEO_REGULAR || etT"
          "apCfg == TRK_TAP_GALILEO_VARIABLE || etTapCfg == TRK_TAP_GPS_NARROW_CVEC || etTapCfg == TRK_TAP_GPS_POSTFRAME";
    DeviceFaultNotify("glmesrd_receiver_parameters_track.cpp", 148, "GlMeSrdTrkCvecTapConfig", (char)"etTapCfg == TRK_TAP_REGULAR || etTapCfg == TRK_TAP_REGULAR_5TH_MULTIPATH || etTapCfg == TRK_TAP_REGULAR_4TH_MULTIPATH || etTapCfg == TRK_TAP_SNIFF || etTapCfg == TRK_TAP_SBAS || etTapCfg == TRK_TAP_GALILEO_REGULAR || etTapCfg == TRK_TAP_GALILEO_VARIABLE || etTapCfg == TRK_TAP_GPS_NARROW_CVEC || etTapCfg == TRK_TAP_GPS_POSTFRAME");
    int v20 = 148;
LABEL_69:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_receiver_parameters_track.cpp", v20, v19);
  }
  if (a3 >= 2)
  {
    int32x2_t v19 = "etTrkResolutionType == TRK_RESOLUTION_20TH_CHIP || etTrkResolutionType == TRK_RESOLUTION_16TH_CHIP";
    DeviceFaultNotify("glmesrd_receiver_parameters_track.cpp", 151, "GlMeSrdTrkCvecTapConfig", (char)"etTrkResolutionType == TRK_RESOLUTION_20TH_CHIP || etTrkResolutionType == TRK_RESOLUTION_16TH_CHIP");
    int v20 = 151;
    goto LABEL_69;
  }
  *(_DWORD *)uint64_t result = a2;
  if (a2 == 4) {
    char v3 = 2;
  }
  else {
    char v3 = 8;
  }
  char v4 = 1;
  if (a2 == 2) {
    char v3 = 4;
  }
  *(unsigned char *)(result + bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v3;
  if (a2 != 2 && a2 != 4)
  {
    if (a2 - 5 >= 2) {
      char v4 = 3;
    }
    else {
      char v4 = 6;
    }
  }
  *(unsigned char *)(result + 5) = v4;
  if (a2 <= 6 && ((1 << a2) & 0x54) != 0)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 2 * (a2 != 7);
    if (a2 == 5) {
      char v5 = 3;
    }
  }
  *(unsigned char *)(result + 6) = v5;
  if (a2 == 2)
  {
    BOOL v6 = 0;
    *(unsigned char *)(result + 7) = 2;
    if (a3) {
      char v7 = 4;
    }
    else {
      char v7 = 5;
    }
    *(unsigned char *)(result + 8) = v7;
LABEL_23:
    BOOL v8 = a2 == 6;
    goto LABEL_37;
  }
  if ((a2 | 2) == 6)
  {
    char v9 = 1;
  }
  else
  {
    if (a2 == 7) {
      char v9 = 1;
    }
    else {
      char v9 = 4;
    }
    if (a2 == 5) {
      char v9 = 5;
    }
  }
  *(unsigned char *)(result + 7) = v9;
  if (a2 - 5 >= 3) {
    char v10 = 4;
  }
  else {
    char v10 = 8;
  }
  if (!a3) {
    char v10 = 5;
  }
  *(unsigned char *)(result + 8) = v10;
  BOOL v6 = a2 == 8;
  BOOL v8 = 1;
  if (((1 << a2) & 0x1AA) == 0) {
    goto LABEL_23;
  }
LABEL_37:
  *(unsigned char *)(result + 9) = v8;
  if (a2 - 1 < 7 && ((0x75u >> (a2 - 1)) & 1) != 0)
  {
    char v11 = 7;
  }
  else if (v6)
  {
    char v11 = 6;
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v12 = 0;
  uint32x2_t v13 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetRegular5thMultipath;
  if (!a2) {
    uint32x2_t v13 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetRegular;
  }
  uint32x2_t v14 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetGpsNarrowCvec;
  if (a2 == 3) {
    uint32x2_t v14 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetRegular4thMultipath;
  }
  if (a2 >= 2) {
    uint32x2_t v13 = v14;
  }
  int32x2_t v15 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetSniff;
  if (a2 != 4) {
    int32x2_t v15 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetGalileoVariable;
  }
  BOOL v18 = !v6;
  int32x2_t v16 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetGpsPostframeCvec;
  if (v18) {
    int32x2_t v16 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetSbas;
  }
  if (a2 == 6) {
    int32x2_t v16 = &BlueFin::GlMeSrdTrkCvecTapConfig::ascSampleOffsetGalileoVariable;
  }
  if ((a2 & 0xFFFFFFFE) == 4) {
    int32x2_t v16 = v15;
  }
  BOOL v18 = a2 == 3 || a2 < 2 || a2 == 7;
  *(unsigned char *)(result + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v11;
  if (v18) {
    int32x2_t v16 = v13;
  }
  do
  {
    *(unsigned char *)(result + v12 + 1BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 1) = v16[v12];
    ++v12;
  }
  while (v12 != 8);
  return result;
}

uint64_t BlueFin::sCwResults::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = *(unsigned char *)(a2 + 24);
    *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
    do
    {
      *(unsigned char *)(a1 + 27 + v3) = *(unsigned char *)(a2 + 27 + v3);
      ++v3;
    }
    while (v3 != 10);
    *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = *(void *)(a2 + 40);
    memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x1F4uLL);
  }
  return a1;
}

uint64_t BlueFin::GlMeSrdTestMgrCW::GlMeSrdTestMgrCW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 2bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a6;
  *(void *)a1 = &unk_270EBD880;
  BlueFin::GlMeSrdTestMgrCwReceiver::GlMeSrdTestMgrCwReceiver(a1 + 432, a3, a5, a1, a6);
  *(unsigned char *)(a1 + 28632) = 0;
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 16) + 136) + 248))(*(void *)(*(void *)(a1 + 16) + 136)))
  {
    uint64_t v7 = a1 + 32;
    *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
    *(_DWORD *)(a1 + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
    *(_WORD *)(a1 + 328) = 0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 307) = 0u;
    *(void *)(a1 + 32) = &unk_270EBD8F0;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
    *(_OWORD *)(a1 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
    *(unsigned char *)(a1 + 416) = 0;
  }
  else
  {
    if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 16) + 136) + 240))(*(void *)(*(void *)(a1 + 16) + 136)))
    {
      uint64_t v7 = a1 + 32;
      *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      *(_DWORD *)(a1 + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      *(_WORD *)(a1 + 328) = 0;
      long long v8 = 0uLL;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_OWORD *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_OWORD *)(a1 + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 296) = 0u;
      *(_OWORD *)(a1 + 307) = 0u;
      char v9 = &unk_270EBD960;
    }
    else if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 16) + 136) + 256))(*(void *)(*(void *)(a1 + 16) + 136)))
    {
      uint64_t v7 = a1 + 32;
      *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      *(_DWORD *)(a1 + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      *(_WORD *)(a1 + 328) = 0;
      long long v8 = 0uLL;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_OWORD *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_OWORD *)(a1 + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 296) = 0u;
      *(_OWORD *)(a1 + 307) = 0u;
      char v9 = &unk_270EBD9D0;
    }
    else
    {
      if (!(*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 16) + 136) + 264))(*(void *)(*(void *)(a1 + 16) + 136)))
      {
        DeviceFaultNotify("glmesrd_test_mgr_cw.cpp", 71, "GlMeSrdTestMgrCW", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw.cpp", 71, "0");
      }
      uint64_t v7 = a1 + 32;
      *(void *)(a1 + 4BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0;
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      *(void *)(a1 + 6bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = a1;
      *(_DWORD *)(a1 + 32bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0;
      *(_WORD *)(a1 + 328) = 0;
      long long v8 = 0uLL;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_OWORD *)(a1 + 10bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 12BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 136) = 0u;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(_OWORD *)(a1 + 18bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 20BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_OWORD *)(a1 + 26bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 0u;
      *(_OWORD *)(a1 + 28BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 296) = 0u;
      *(_OWORD *)(a1 + 307) = 0u;
      char v9 = &unk_270EBDA40;
    }
    *(void *)(a1 + 32) = v9;
    *(_OWORD *)(a1 + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v8;
    *(_OWORD *)(a1 + 40BlueFin::GlMeSrdAsicConfig::VERIFY((uint64_t)this, 0) = v8;
    *(_OWORD *)(a1 + 352) = v8;
    *(_OWORD *)(a1 + 368) = v8;
    *(_OWORD *)(a1 + 336) = v8;
  }
  *(void *)(a1 + 42bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = v7;
  return a1;
}

void sub_263A9A754(_Unwind_Exception *a1)
{
  BlueFin::GlMeSrdTestMgrCwReceiver::~GlMeSrdTestMgrCwReceiver(v1);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrCW::~GlMeSrdTestMgrCW(BlueFin::GlMeSrdTestMgrCW *this)
{
  *(void *)this = &unk_270EBD880;
  if (*((unsigned char *)this + 28632))
  {
    DeviceFaultNotify("glmesrd_test_mgr_cw.cpp", 78, "~GlMeSrdTestMgrCW", (char)"!m_bCwResource");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw.cpp", 78, "!m_bCwResource");
  }
  (***((void (****)(void))this + 53))(*((void *)this + 53));
  *((void *)this + 53) = 0;
  BlueFin::GlMeSrdTestMgrCwReceiver::~GlMeSrdTestMgrCwReceiver((BlueFin::GlMeSrdTestMgrCW *)((char *)this + 432));
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdTestMgrCW::~GlMeSrdTestMgrCW(this);

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlMeSrdTestMgrCW::AllocateCwResources(BlueFin::GlMeSrdTestMgrCW *this, const BlueFin::GlMeSrdTestMgrCwParams *a2)
{
  unsigned int v2 = (char *)this + 28557;
  if (*((unsigned char *)this + 28632))
  {
    DeviceFaultNotify("glmesrd_test_mgr_cw.cpp", 87, "AllocateCwResources", (char)"!m_bCwResource");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw.cpp", 87, "!m_bCwResource");
  }
  *((unsigned char *)this + 28632) = 1;
  BlueFin::GlMeSrdTestMgrCwReceiver::AllocateCwResources((BlueFin::GlMeSrdTestMgrCW *)((char *)this + 432), a2);
  (*(void (**)(void, const BlueFin::GlMeSrdTestMgrCwParams *))(**((void **)this + 53) + 16))(*((void *)this + 53), a2);
  if (((*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 136) + 248))(*(void *)(*((void *)this + 2) + 136)) & 1) != 0
    && (*((_DWORD *)a2 + 63) & 0x22) == 0x20)
  {
    *(unsigned char *)(*((void *)this + 53) + 38bzero(this[189], ((4 * *((unsigned __int8 *)this + 1520) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4) = 1;
    *unsigned int v2 = 1;
  }
  for (uint64_t i = 0; i != 10; ++i)
    uint64_t result = (*(uint64_t (**)(void, uint64_t, double))(**((void **)this + 53) + 72))(*((void *)this + 53), i, *((double *)this + i + 3538));
  return result;
}

void BlueFin::GlMeSrdTestMgrCW::RunCwTest(BlueFin::GlMeSrdTestMgrCW *this)
{
  if (!*((unsigned char *)this + 28632))
  {
    DeviceFaultNotify("glmesrd_test_mgr_cw.cpp", 114, "RunCwTest", (char)"m_bCwResource");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw.cpp", 114, "m_bCwResource");
  }
  (*(void (**)(void))(**((void **)this + 53) + 24))(*((void *)this + 53));

  BlueFin::GlMeSrdTestMgrCwReceiver::RunCwTest((BlueFin::GlMeSrdTestMgrCW *)((char *)this + 432), v9, v10, v11, v12, v13, v14, v15, v16, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t BlueFin::GlMeSrdTestMgrCW::ClearCwResources(BlueFin::GlMeSrdTestMgrCW *this)
{
  if (!*((unsigned char *)this + 28632))
  {
    DeviceFaultNotify("glmesrd_test_mgr_cw.cpp", 127, "ClearCwResources", (char)"m_bCwResource");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw.cpp", 127, "m_bCwResource");
  }
  *((unsigned char *)this + 28632) = 0;
  BlueFin::GlMeSrdTestMgrCwReceiver::ClearCwResources((uint64_t)this + 432);
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 53) + 32);

  return v2();
}

uint64_t BlueFin::GlMeSrdTestMgrCW::GetCwResults(BlueFin::GlMeSrdTestMgrCW *this)
{
  *((unsigned char *)this + 28288) = 0;
  return (uint64_t)this + 27736;
}

void BlueFin::GlMeSrdTestMgrCW::GetSpaIqResults(BlueFin::GlMeSrdTestMgrCW *this)
{
}

uint64_t BlueFin::GlMeSrdTestMgrCW::HasResults(BlueFin::GlMeSrdTestMgrCW *this)
{
  return *((unsigned __int8 *)this + 28288);
}

void BlueFin::GlMeSrdTestMgrCW::Heartbeat(BlueFin::GlMeSrdTestMgrCW *this, __int32 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
}

void BlueFin::GlMeSrdTestMgrCwController::RunCwTest(BlueFin::GlMeSrdTestMgrCwController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v16[0] = 0;
  v16[1] = 0;
  char v17 = 0;
  __int16 v18 = 1;
  uint64_t v19 = v2;
  int v20 = 0;
  __int16 v21 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  v15[1] = 0;
  v15[3] = 30415315;
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
  double v4 = (*(double (**)(uint64_t))(*(void *)v3 + 88))(v3);
  double v5 = v4 * 20.0 + -1575420000.0;
  double v6 = (v5 - *((double *)this + 38)) * 4294967300.0 / v4;
  if (v6 <= 0.0)
  {
    if (v6 >= 0.0)
    {
      int v8 = 0;
      goto LABEL_7;
    }
    double v7 = -0.5;
  }
  else
  {
    double v7 = 0.5;
  }
  int v8 = (int)(v6 + v7);
LABEL_7:
  v15[0] = -v8;
  double v9 = (v5 - *((double *)this + 39)) * 4294967300.0 / v4;
  if (v9 <= 0.0)
  {
    if (v9 >= 0.0)
    {
      int v11 = 0;
      goto LABEL_13;
    }
    double v10 = -0.5;
  }
  else
  {
    double v10 = 0.5;
  }
  int v11 = (int)(v9 + v10);
LABEL_13:
  int v12 = -v11;
  void v15[2] = v12;
  if (*((unsigned char *)this + 384)) {
    v15[0] = v12;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  (*(void (**)(uint64_t, void *, _DWORD *))(*(void *)v14 + 64))(v14, v16, v15);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v16);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v16);
}