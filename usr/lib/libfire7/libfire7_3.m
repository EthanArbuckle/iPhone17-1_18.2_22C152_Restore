void sub_263A9AD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrCwController::KillSAT(BlueFin::GlMeSrdTestMgrCwController *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v6[0] = 0;
  v6[1] = 0;
  char v7 = 0;
  __int16 v8 = 1;
  uint64_t v9 = v3;
  int v10 = 0;
  __int16 v11 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 120))(v5, v6, a2);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v6);
}

void sub_263A9AEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrCwController::CreateSAT(uint64_t a1, __int16 *a2, unsigned __int8 a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned __int8 v25 = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 8) + 80))(*(void *)(*(void *)(a1 + 32) + 8));
  v19[0] = 0;
  v19[1] = 0;
  char v20 = 0;
  __int16 v21 = 1;
  uint64_t v22 = v5;
  int v23 = 0;
  __int16 v24 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v6 = 0;
  __int16 v26 = *a2;
  uint64_t v27 = 0;
  do
  {
    if (!*((unsigned char *)&v26 + v6)) {
      goto LABEL_12;
    }
    *(_OWORD *)&v17[4] = 0u;
    long long v18 = 0u;
    v17[14] = 32;
    *(_DWORD *)v17 = 0;
    *(_DWORD *)&v17[3] = 0;
    *(_WORD *)&v17[12] = *(_DWORD *)(*(void *)(a1 + 32) + 27688);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 48))(v22);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    (*(void (**)(uint64_t, void *, uint64_t, unsigned __int8 *, unsigned char *))(*(void *)v8 + 72))(v8, v19, 1, &v25, v17);
    char v16 = 7;
    __int16 v15 = 2048;
    int v14 = 0;
    uint64_t v13 = 0;
    if (v6)
    {
      if (v6 != 1)
      {
        DeviceFaultNotify("glmesrd_test_mgr_cw_controller.cpp", 208, "CreateSAT", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_controller.cpp", 208, "0");
      }
      LOBYTE(v13) = *(unsigned char *)(a1 + 288);
      char v9 = v13 - 59;
      if (v13 - 52 >= 0xE) {
        char v9 = -8;
      }
      LOWORD(v14) = v9;
      HIDWORD(v13) = 5;
      if (!*(unsigned char *)(a1 + 384)) {
        goto LABEL_11;
      }
    }
    else
    {
      LOBYTE(v13) = 1;
    }
    LOWORD(v14) = 0;
    HIDWORD(v13) = 1;
LABEL_11:
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 48))(v22);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
    LOBYTE(v12) = 0;
    (*(void (**)(uint64_t, void *, void, uint64_t *, uint64_t, __int16 *, uint64_t, void, int))(*(void *)v11 + 16))(v11, v19, v25, &v13, 48, &v15, 1, v25, v12);
LABEL_12:
    ++v6;
  }
  while (v6 != 10);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v19);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v19);
}

void sub_263A9B1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

double BlueFin::GlMeAbstractTestMgrCwController::AllocateCwResources(BlueFin::GlMeAbstractTestMgrCwController *this, const BlueFin::GlMeSrdTestMgrCwParams *a2)
{
  return BlueFin::GlMeSrdTestMgrCwParams::operator=((uint64_t)this + 40, (uint64_t)a2);
}

double BlueFin::GlMeSrdTestMgrCwParams::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = a2 + 160;
    do
    {
      uint64_t v4 = (void *)(a1 + 80 + v2);
      *(v4 - 10) = *(void *)(a2 + v2);
      *uint64_t v4 = *(void *)(v3 + v2 - 80);
      v4[10] = *(void *)(v3 + v2);
      v2 += 8;
    }
    while (v2 != 80);
    double result = *(double *)(a2 + 240);
    *(double *)(a1 + 240) = result;
    *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
    *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
    *(unsigned char *)(a1 + 250) = *(unsigned char *)(a2 + 250);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(_WORD *)(a1 + 256) = *(_WORD *)(a2 + 256);
  }
  return result;
}

void BlueFin::GlMeCarpTestMgrCwController::RunCwTest(BlueFin::GlMeCarpTestMgrCwController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  __int16 v14 = 1;
  uint64_t v15 = v2;
  int v16 = 0;
  __int16 v17 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v4 + 32))(v4, &v11, 8, 17, 0, 6);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v11);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v11);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  __int16 v14 = 1;
  uint64_t v15 = v5;
  int v16 = 0;
  __int16 v17 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  if ((*((_DWORD *)this + 73) & 0x1000) != 0) {
    int v6 = 368867961;
  }
  else {
    int v6 = 394914510;
  }
  v9[0] = --dbl_263BB15C0[(*((_DWORD *)this + 73) & 0x800) == 0];
  v9[1] = v6;
  uint64_t v10 = 0x45DCBEDD37CAF4ELL;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  (*(void (**)(uint64_t, uint64_t *, _DWORD *))(*(void *)v8 + 64))(v8, &v11, v9);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v11);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v11);
}

void sub_263A9B4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeCarpTestMgrCwController::KillSAT(BlueFin::GlMeCarpTestMgrCwController *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v6[0] = 0;
  v6[1] = 0;
  char v7 = 0;
  __int16 v8 = 1;
  uint64_t v9 = v3;
  int v10 = 0;
  __int16 v11 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 120))(v5, v6, a2);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v6);
}

void sub_263A9B630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeCarpTestMgrCwController::CreateSAT(uint64_t a1, char *a2, unsigned __int8 a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unsigned __int8 v38 = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 8) + 80))(*(void *)(*(void *)(a1 + 32) + 8));
  v32[0] = 0;
  v32[1] = 0;
  char v33 = 0;
  __int16 v34 = 1;
  uint64_t v35 = v5;
  int v36 = 0;
  __int16 v37 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v7 = 0;
  char v31 = 7;
  __int16 v30 = 2112;
  char v39 = *a2;
  __int16 v40 = *(_WORD *)(a2 + 1);
  memset(v41, 0, sizeof(v41));
  do
  {
    if (*(&v39 + v7))
    {
      int v29 = 0;
      uint64_t v28 = 0;
      if (v7 == 2)
      {
        unsigned int v8 = 0x4Cu;
        LOBYTE(v28) = 0x4Cu;
        LOWORD(v29) = 0;
        HIDWORD(v28) = 7;
        uint64_t v9 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v9 + 28521)) {
          uint64_t v14 = 59;
        }
        else {
          uint64_t v14 = 79;
        }
      }
      else
      {
        if (v7 == 1)
        {
          LOBYTE(v28) = *(unsigned char *)(a1 + 288);
          unsigned int v8 = v28;
          if (v28 - 52 >= 0xE) {
            char v13 = -8;
          }
          else {
            char v13 = v28 - 59;
          }
          LOWORD(v29) = v13;
          HIDWORD(v28) = 5;
          uint64_t v9 = *(void *)(a1 + 32);
          BOOL v11 = *(unsigned char *)(v9 + 28521) == 0;
          unsigned int v12 = 46;
        }
        else
        {
          if (v7)
          {
            DeviceFaultNotify("glmesrd_test_mgr_cw_controller.cpp", 357, "CreateSAT", (char)"0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_controller.cpp", 357, "0");
          }
          unsigned int v8 = 1u;
          LOBYTE(v28) = 1u;
          LOWORD(v29) = 0;
          uint64_t v9 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v9 + 27681)) {
            int v10 = 1;
          }
          else {
            int v10 = 3;
          }
          HIDWORD(v28) = v10;
          BOOL v11 = *(unsigned char *)(v9 + 28521) == 0;
          unsigned int v12 = 25;
        }
        if (v11) {
          uint64_t v14 = 48;
        }
        else {
          uint64_t v14 = v12;
        }
        __int16 v30 = (*(_DWORD *)(a1 + 292) >> 8) & 0x20 | v30 & 0xFFDF;
      }
      int v27 = 0;
      long long v25 = 0u;
      long long v26 = 0u;
      double v15 = *(double *)(v9 + 28528);
      if (v7 == 2) {
        char v16 = 96;
      }
      else {
        char v16 = 32;
      }
      BYTE14(v25) = v16;
      BYTE4(v23) = v8;
      LODWORD(v24) = 0;
      WORD2(v24) = 575;
      if ((v8 + 67) >= 0x44u)
      {
        uint64_t v17 = BlueFin::GlSvId::s_aucSvId2gnss[v8];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v17] == 255) {
          LODWORD(v24) = -1;
        }
        else {
          WORD2(v24) = BlueFin::GlSignalId::s_ausGnss2signalId[v17]
        }
                     + v8
                     - BlueFin::GlSvId::s_aucGnss2minSvId[v17];
      }
      float v18 = v15;
      LOWORD(v25) = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)((char *)&v23 + 4), v18, v6);
      WORD4(v25) = 0;
      BYTE6(v25) = 0;
      BYTE10(v25) = 0;
      WORD6(v25) = *(_DWORD *)(*(void *)(a1 + 32) + 27688);
      LOBYTE(v26) = 0;
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
      (*(void (**)(uint64_t, void *, uint64_t, unsigned __int8 *, long long *))(*(void *)v20 + 72))(v20, v32, 1, &v38, &v25);
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 64))(v21);
      LOBYTE(v23) = 0;
      (*(void (**)(uint64_t, void *, void, uint64_t *, uint64_t, __int16 *, uint64_t, void, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v32, v38, &v28, v14, &v30, 1, v38, v23, v24);
    }
    ++v7;
  }
  while (v7 != 10);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v32);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v32);
}

void sub_263A9BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMePikeTestMgrCwController::RunCwTest(BlueFin::GlMePikeTestMgrCwController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v29[0] = 0;
  v29[1] = 0;
  char v30 = 0;
  __int16 v31 = 1;
  uint64_t v32 = v2;
  int v33 = 0;
  __int16 v34 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  BOOL v3 = (*((_DWORD *)this + 73) & 0x800) == 0;
  BOOL v4 = (*((_DWORD *)this + 73) & 0x1000) == 0;
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  switch(v6)
  {
    case 26000000:
      double v7 = 63859112.0;
      break;
    case 38400000:
      double v7 = 43237936.0;
      break;
    case 52000000:
      double v7 = 31929556.0;
      break;
    default:
      DeviceFaultNotify("glmesrd_test_mgr_cw_controller.cpp", 756, "MoveDecimatorNCO", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_controller.cpp", 756, "0");
  }
  uint64_t v8 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
  double v10 = dbl_263BB15D0[v3];
  double v11 = v7 * (double)v9 * 0.000000953674316 + -1583420000.0;
  if (v11 >= 0.0) {
    double v12 = v7 * (double)v9 * 0.000000953674316 + -1583420000.0;
  }
  else {
    double v12 = -v11;
  }
  int v28 = 0;
  double v13 = (v10 - v12) * 130.198198;
  double v14 = fmod(v13, 4294967300.0);
  if (v13 <= 4294967300.0) {
    double v14 = v13;
  }
  if (v14 < -4294967300.0) {
    double v14 = -fmod(-v14, 4294967300.0);
  }
  double v15 = dbl_263BB15E0[v4];
  if (v14 < 0.0) {
    unsigned int v16 = --v14;
  }
  else {
    unsigned int v16 = v14;
  }
  v24[0] = v16;
  double v17 = fmod((-14407916.7 - v12) * 130.198198, 4294967300.0);
  if ((-14407916.7 - v12) * 130.198198 <= 4294967300.0) {
    double v17 = (-14407916.7 - v12) * 130.198198;
  }
  if (v17 < -4294967300.0) {
    double v17 = -fmod(-v17, 4294967300.0);
  }
  if (v17 < 0.0) {
    unsigned int v18 = --v17;
  }
  else {
    unsigned int v18 = v17;
  }
  v24[2] = v18;
  double v19 = fmod((v15 - v12) * 130.198198, 4294967300.0);
  if ((v15 - v12) * 130.198198 <= 4294967300.0) {
    double v19 = (v15 - v12) * 130.198198;
  }
  if (v19 < -4294967300.0) {
    double v19 = -fmod(-v19, 4294967300.0);
  }
  if (v19 < 0.0) {
    unsigned int v20 = --v19;
  }
  else {
    unsigned int v20 = v19;
  }
  v24[1] = v20;
  uint64_t v25 = 0xEB3045D8006;
  if ((*((_DWORD *)this + 73) & 0x100000) != 0) {
    int v21 = 665963500;
  }
  else {
    int v21 = 622564119;
  }
  int v26 = v21;
  int v27 = -1997879210;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
  (*(void (**)(uint64_t, void *, _DWORD *))(*(void *)v23 + 72))(v23, v29, v24);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v29);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v29);
}

void sub_263A9BEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMePikeTestMgrCwController::KillSAT(BlueFin::GlMePikeTestMgrCwController *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v6[0] = 0;
  v6[1] = 0;
  char v7 = 0;
  __int16 v8 = 1;
  uint64_t v9 = v3;
  int v10 = 0;
  __int16 v11 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 120))(v5, v6, a2);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v6);
}

void sub_263A9BFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMePikeTestMgrCwController::CreateSAT(uint64_t a1, int *a2, unsigned __int8 a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  unsigned __int8 v54 = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 8) + 80))(*(void *)(*(void *)(a1 + 32) + 8));
  v48[0] = 0;
  v48[1] = 0;
  char v49 = 0;
  __int16 v50 = 1;
  uint64_t v51 = v5;
  int v52 = 0;
  __int16 v53 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v7 = 0;
  char v47 = 7;
  __int16 v46 = 2114;
  int v60 = *a2;
  __int16 v61 = *((_WORD *)a2 + 2);
  char v62 = 0;
  __int16 v63 = *(_WORD *)((char *)a2 + 7);
  char v64 = 0;
  do
  {
    if (*((unsigned char *)&v60 + v7))
    {
      long long v59 = xmmword_263BB15F0;
      switch((char)v7)
      {
        case 0:
          __int16 v8 = 0;
          int v9 = 0;
          char v10 = 0;
          int v11 = 0;
          __int16 v12 = 0;
          uint64_t v13 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v13 + 27681)) {
            int v14 = 1;
          }
          else {
            int v14 = 3;
          }
          if (*(unsigned char *)(v13 + 28521)) {
            int v15 = 25;
          }
          else {
            int v15 = 48;
          }
          LODWORD(v59) = v15;
          __int16 v46 = (*(_DWORD *)(a1 + 292) >> 8) & 0x20 | v46 & 0xFFDF;
          LOBYTE(v16) = 1;
          v43[0] = 1;
          goto LABEL_41;
        case 1:
          int v16 = *(unsigned __int8 *)(a1 + 288);
          goto LABEL_29;
        case 2:
          __int16 v8 = 0;
          int v9 = 0;
          char v10 = 0;
          int v11 = 0;
          uint64_t v13 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v13 + 28521)) {
            int v22 = 59;
          }
          else {
            int v22 = 79;
          }
          LODWORD(v59) = v22;
          LOBYTE(v16) = 76;
          v43[0] = 76;
          __int16 v12 = 201;
          int v14 = 7;
          goto LABEL_41;
        case 3:
          uint64_t v13 = *(void *)(a1 + 32);
          int v23 = *(unsigned __int8 *)(v13 + 28521);
          if (*(unsigned char *)(v13 + 28521)) {
            int v24 = 25;
          }
          else {
            int v24 = 250;
          }
          LODWORD(v59) = v24;
          char v10 = 2;
          v43[0] = 2;
          int v44 = 2;
          __int16 v45 = 65;
          if (!v23) {
            goto LABEL_57;
          }
          int v14 = 0;
          __int16 v8 = 0;
          LOBYTE(v16) = 0;
          int v17 = 0;
          int v9 = 1;
          int v21 = 3;
          int v20 = 1;
          break;
        case 4:
          char v10 = -117;
          v43[0] = -117;
          int v17 = 1;
          int v44 = 1;
          __int16 v45 = 489;
          uint64_t v13 = *(void *)(a1 + 32);
          int v18 = *(unsigned __int8 *)(v13 + 28521);
          if (*(unsigned char *)(v13 + 28521)) {
            int v19 = 71;
          }
          else {
            int v19 = 250;
          }
          LODWORD(v59) = v19;
          if (!v18) {
            goto LABEL_57;
          }
          int v14 = 0;
          __int16 v8 = 0;
          LOBYTE(v16) = 0;
          int v20 = 0;
          int v21 = 2;
          int v9 = 11;
          break;
        case 5:
          int v14 = 0;
          __int16 v8 = 0;
          LOBYTE(v16) = 0;
          int v11 = 0;
          LODWORD(v59) = 48;
          char v10 = -81;
          v43[0] = -81;
          uint64_t v13 = *(void *)(a1 + 32);
          __int16 v12 = 561;
          int v9 = 15;
          goto LABEL_41;
        case 7:
          int v16 = *(unsigned __int8 *)(a1 + 289);
          goto LABEL_29;
        case 8:
          int v16 = *(unsigned __int8 *)(a1 + 290);
LABEL_29:
          if ((v16 - 52) > 0xD) {
            __int16 v8 = -8;
          }
          else {
            __int16 v8 = (char)(v16 - 59);
          }
          uint64_t v13 = *(void *)(a1 + 32);
          if (*(unsigned char *)(v13 + 28521)) {
            int v25 = 46;
          }
          else {
            int v25 = 48;
          }
          LODWORD(v59) = v25;
          __int16 v46 = (*(_DWORD *)(a1 + 292) >> 8) & 0x20 | v46 & 0xFFDF;
          if ((v16 + 67) >= 0x44u)
          {
            uint64_t v26 = BlueFin::GlSvId::s_aucSvId2gnss[v16];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v26] == 255)
            {
              __int16 v12 = 575;
              int v11 = -1;
            }
            else
            {
              int v11 = 0;
              __int16 v12 = BlueFin::GlSignalId::s_ausGnss2signalId[v26]
                  + v16
                  - BlueFin::GlSvId::s_aucGnss2minSvId[v26];
            }
          }
          else
          {
            int v11 = 0;
            __int16 v12 = 575;
          }
          int v9 = 0;
          char v10 = 0;
          v43[0] = v16;
          int v14 = 5;
LABEL_41:
          int v17 = 0;
          int v20 = 0;
          int v44 = v11;
          __int16 v45 = v12;
          int v21 = 1;
          break;
        default:
          DeviceFaultNotify("glmesrd_test_mgr_cw_controller.cpp", 634, "CreateSAT", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_controller.cpp", 634, "0");
      }
      int v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      double v27 = *(double *)(v13 + 28528);
      if (v7 == 2) {
        char v28 = 96;
      }
      else {
        char v28 = 32;
      }
      if (v7 == 3) {
        char v28 = -32;
      }
      BYTE14(v40) = v28;
      float v29 = v27;
      LOWORD(v40) = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)v43, v29, v6);
      WORD4(v40) = 0;
      BYTE6(v40) = 0;
      BYTE10(v40) = 0;
      WORD6(v40) = *(_DWORD *)(*(void *)(a1 + 32) + 27688);
      LOBYTE(v41) = 0;
      uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 48))(v51);
      uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 48))(v30);
      (*(void (**)(uint64_t, void *, uint64_t, unsigned __int8 *, long long *))(*(void *)v31 + 72))(v31, v48, 1, &v54, &v40);
      if (v7 == 3) {
        char v32 = -64;
      }
      else {
        char v32 = 0;
      }
      int v55 = v21;
      unsigned __int8 v56 = v54;
      char v57 = v32;
      char v58 = 0;
      v37[0] = v16;
      if ((v14 & 6) == 4) {
        int v33 = v8;
      }
      else {
        int v33 = (unsigned __int16)v8;
      }
      int v38 = v14;
      LODWORD(v39) = v33;
      *(void *)((char *)&v39 + 4) = 0;
      HIDWORD(v39) = 0;
      if (v9 == 15 || v17 | v20)
      {
        v37[0] = v10;
        int v38 = v9;
        long long v39 = 0uLL;
      }
      uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 48))(v51);
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 64))(v34);
      LOBYTE(v36) = 0;
      (*(void (**)(uint64_t, void *, void, char *, long long *, uint64_t, uint64_t, __int16 *, int *, int))(*(void *)v35 + 32))(v35, v48, v54, v37, &v59, 1, 1, &v46, &v55, v36);
    }
LABEL_57:
    ++v7;
  }
  while (v7 != 10);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v48);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v48);
}

void sub_263A9C668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeMinnowTestMgrCwController::RunCwTest(BlueFin::GlMeMinnowTestMgrCwController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v46[0] = 0;
  v46[1] = 0;
  char v47 = 0;
  __int16 v48 = 1;
  uint64_t v49 = v2;
  int v50 = 0;
  __int16 v51 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  unsigned int v3 = *((_DWORD *)this + 73);
  if ((v3 & 0x100000) != 0) {
    double v4 = 0.0;
  }
  else {
    double v4 = 4.2949673e15;
  }
  uint64_t v5 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  int32x2_t v7 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v3), (int8x8_t)0x100000000800));
  v8.i64[0] = v7.i32[0];
  v8.i64[1] = v7.i32[1];
  float64x2_t v40 = (float64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(0x41086A0000000000uLL), v8);
  int v9 = *(const BlueFin::GlMeSrdAsicConfig **)(*(void *)(*((void *)this + 4) + 16) + 136);
  uint64_t v10 = *(void *)v9;
  if (v6)
  {
    double v39 = (*(double (**)(const BlueFin::GlMeSrdAsicConfig *))(v10 + 88))(v9);
    BlueFin::GlMeSrdRfInit4777::GlMeSrdRfInit4777((BlueFin::GlMeSrdRfInit4777 *)v45, v9);
    RfInit = (long long *)BlueFin::GlMeSrdRfInit4777::GetRfInit((BlueFin::GlMeSrdRfInit4777 *)v45, 3);
    long long v41 = *RfInit;
    long long v13 = RfInit[2];
    long long v12 = RfInit[3];
    long long v14 = RfInit[1];
    *(_OWORD *)&v44[12] = *(long long *)((char *)RfInit + 60);
    long long v43 = v13;
    *(_OWORD *)int v44 = v12;
    long long v42 = v14;
    *(int32x2_t *)((char *)&v41 + 4) = vadd_s32(*(int32x2_t *)((char *)&v41 + 4), vmovn_s64((int64x2_t)vcvtq_u64_f64(vdivq_f64(vmulq_f64(v40, (float64x2_t)vdupq_n_s64(0x41F0000000000000uLL)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v39, 0)))));
    DWORD1(v42) = DWORD1(v14) + (v4 / (v39 * 3.0));
    HIDWORD(v42) = HIDWORD(v14) + (v4 / v39);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 48))(v49);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    (*(void (**)(uint64_t, void *, char *))(*(void *)v16 + 72))(v16, v46, (char *)&v41 + 4);
  }
  else if (((*(uint64_t (**)(const BlueFin::GlMeSrdAsicConfig *))(v10 + 40))(v9) & 1) == 0)
  {
    uint64_t v17 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 960))(v17)) {
      double v18 = 260.396395;
    }
    else {
      double v18 = 130.198198;
    }
    uint64_t v19 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
    int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
    switch(v20)
    {
      case 26000000:
        double v21 = 63859112.0;
        break;
      case 38400000:
        double v21 = 43237936.0;
        break;
      case 52000000:
        double v21 = 31929556.0;
        break;
      default:
        DeviceFaultNotify("glmesrd_test_mgr_cw_controller.cpp", 1115, "MoveDecimatorNCO", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_controller.cpp", 1115, "0");
    }
    uint64_t v22 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
    unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 96))(v22);
    double v24 = v21 * (double)v23 * 0.000000953674316 + -1583420000.0;
    if (v24 >= 0.0) {
      double v25 = v21 * (double)v23 * 0.000000953674316 + -1583420000.0;
    }
    else {
      double v25 = -v24;
    }
    v45[7] = 0;
    double v26 = (v40.f64[0] + 1575420000.0 + -1583420000.0 - v25) * 130.198198;
    double v27 = fmod(v26, 4294967300.0);
    if (v26 <= 4294967300.0) {
      double v27 = v26;
    }
    if (v27 < -4294967300.0) {
      double v27 = -fmod(-v27, 4294967300.0);
    }
    double v28 = v40.f64[1] + 1561098000.0 + -1583420000.0 + 32987916.7;
    if (v27 < 0.0) {
      unsigned int v29 = --v27;
    }
    else {
      unsigned int v29 = v27;
    }
    v45[0] = v29;
    double v30 = fmod(v18 * (-14407916.7 - v25), 4294967300.0);
    if (v18 * (-14407916.7 - v25) <= 4294967300.0) {
      double v30 = v18 * (-14407916.7 - v25);
    }
    if (v30 < -4294967300.0) {
      double v30 = -fmod(-v30, 4294967300.0);
    }
    if (v30 < 0.0) {
      unsigned int v31 = --v30;
    }
    else {
      unsigned int v31 = v30;
    }
    v45[2] = v31;
    double v32 = fmod((v28 - v25) * 130.198198, 4294967300.0);
    if ((v28 - v25) * 130.198198 <= 4294967300.0) {
      double v32 = (v28 - v25) * 130.198198;
    }
    if (v32 < -4294967300.0) {
      double v32 = -fmod(-v32, 4294967300.0);
    }
    if (v32 < 0.0) {
      unsigned int v33 = --v32;
    }
    else {
      unsigned int v33 = v32;
    }
    v45[1] = v33;
    double v34 = fmod(v18 * 562500.0, 4294967300.0);
    if (v18 * 562500.0 <= 4294967300.0) {
      double v34 = v18 * 562500.0;
    }
    if (v34 < -4294967300.0) {
      double v34 = -fmod(-v34, 4294967300.0);
    }
    if (v34 < 0.0) {
      unsigned int v35 = --v34;
    }
    else {
      unsigned int v35 = v34;
    }
    v45[3] = v35;
    v45[4] = 3763;
    if ((*((_DWORD *)this + 73) & 0x100000) != 0) {
      int v36 = 665963500;
    }
    else {
      int v36 = 622564119;
    }
    v45[5] = v36;
    v45[6] = -1997879210;
    uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 48))(v49);
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
    (*(void (**)(uint64_t, void *, _DWORD *))(*(void *)v38 + 72))(v38, v46, v45);
  }
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v46);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v46);
}

void sub_263A9CD44(_Unwind_Exception *a1)
{
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)(v1 - 136));
  _Unwind_Resume(a1);
}

void BlueFin::GlMeMinnowTestMgrCwController::KillSAT(BlueFin::GlMeMinnowTestMgrCwController *this, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v6[0] = 0;
  v6[1] = 0;
  char v7 = 0;
  __int16 v8 = 1;
  uint64_t v9 = v3;
  int v10 = 0;
  __int16 v11 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 120))(v5, v6, a2);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v6);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v6);
}

void sub_263A9CE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeMinnowTestMgrCwController::CreateSAT(uint64_t a1, int *a2, unsigned __int8 a3)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  unsigned __int8 v56 = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 8) + 80))(*(void *)(*(void *)(a1 + 32) + 8));
  v50[0] = 0;
  v50[1] = 0;
  char v51 = 0;
  __int16 v52 = 1;
  uint64_t v53 = v5;
  int v54 = 0;
  __int16 v55 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, 1);
  uint64_t v7 = 0;
  uint64_t v38 = a1;
  unsigned int v8 = *(_DWORD *)(a1 + 292);
  char v49 = 7;
  __int16 v48 = (v8 >> 17) & 0x100 | 0x842;
  int v61 = *a2;
  __int16 v62 = *((_WORD *)a2 + 2);
  char v63 = 0;
  __int16 v64 = *(_WORD *)((char *)a2 + 7);
  char v65 = 0;
  do
  {
    if (*((unsigned char *)&v61 + v7))
    {
      long long v60 = xmmword_263BB15F0;
      switch((char)v7)
      {
        case 0:
          __int16 v9 = 0;
          int v10 = 0;
          int v11 = 0;
          char v12 = 0;
          int v13 = 0;
          int v14 = 0;
          uint64_t v15 = *(void *)(v38 + 32);
          if (*(unsigned char *)(v15 + 27681)) {
            int v16 = 1;
          }
          else {
            int v16 = 3;
          }
          if (*(unsigned char *)(v15 + 28521)) {
            int v17 = 25;
          }
          else {
            int v17 = 48;
          }
          LODWORD(v60) = v17;
          __int16 v48 = (*(_DWORD *)(v38 + 292) >> 8) & 0x20 | v48 & 0xFFDF;
          LOBYTE(v18) = 1;
          v45[0] = 1;
          int v46 = 0;
          __int16 v47 = 0;
          goto LABEL_17;
        case 1:
          int v18 = *(unsigned __int8 *)(v38 + 288);
          goto LABEL_30;
        case 2:
          __int16 v9 = 0;
          int v10 = 0;
          int v11 = 0;
          char v12 = 0;
          int v13 = 0;
          int v14 = 0;
          uint64_t v15 = *(void *)(v38 + 32);
          if (*(unsigned char *)(v15 + 28521)) {
            int v22 = 59;
          }
          else {
            int v22 = 79;
          }
          LODWORD(v60) = v22;
          LOBYTE(v18) = 76;
          v45[0] = 76;
          int v46 = 0;
          __int16 v47 = 201;
          int v21 = 1;
          int v16 = 7;
          goto LABEL_42;
        case 3:
          uint64_t v15 = *(void *)(v38 + 32);
          int v23 = *(unsigned __int8 *)(v15 + 28521);
          if (*(unsigned char *)(v15 + 28521)) {
            int v24 = 25;
          }
          else {
            int v24 = 250;
          }
          LODWORD(v60) = v24;
          char v12 = 2;
          v45[0] = 2;
          int v46 = 2;
          __int16 v47 = 65;
          if (!v23) {
            break;
          }
          int v16 = 0;
          __int16 v9 = 0;
          int v10 = 0;
          LOBYTE(v18) = 0;
          int v13 = 0;
          int v11 = 1;
          int v21 = 3;
          int v14 = 1;
          goto LABEL_42;
        case 4:
          char v12 = -117;
          v45[0] = -117;
          int v13 = 1;
          int v46 = 1;
          __int16 v47 = 489;
          uint64_t v15 = *(void *)(v38 + 32);
          int v19 = *(unsigned __int8 *)(v15 + 28521);
          if (*(unsigned char *)(v15 + 28521)) {
            int v20 = 71;
          }
          else {
            int v20 = 250;
          }
          LODWORD(v60) = v20;
          if (!v19) {
            break;
          }
          int v16 = 0;
          __int16 v9 = 0;
          int v10 = 0;
          LOBYTE(v18) = 0;
          int v14 = 0;
          int v21 = 2;
          int v11 = 11;
          goto LABEL_42;
        case 5:
          int v16 = 0;
          __int16 v9 = 0;
          LOBYTE(v18) = 0;
          int v13 = 0;
          int v14 = 0;
          LODWORD(v60) = 48;
          char v12 = -81;
          v45[0] = -81;
          int v46 = 0;
          __int16 v47 = 561;
          __int16 v48 = (*(_DWORD *)(v38 + 292) >> 8) & 0x20 | v48 & 0xFFDF;
          uint64_t v15 = *(void *)(v38 + 32);
          int v10 = 1;
          int v11 = 15;
LABEL_17:
          int v21 = 1;
          goto LABEL_42;
        case 7:
          int v18 = *(unsigned __int8 *)(v38 + 289);
          goto LABEL_30;
        case 8:
          int v18 = *(unsigned __int8 *)(v38 + 290);
LABEL_30:
          if ((v18 - 52) > 0xD) {
            __int16 v9 = -8;
          }
          else {
            __int16 v9 = (char)(v18 - 59);
          }
          uint64_t v15 = *(void *)(v38 + 32);
          if (*(unsigned char *)(v15 + 28521)) {
            int v25 = 46;
          }
          else {
            int v25 = 48;
          }
          LODWORD(v60) = v25;
          __int16 v48 = (*(_DWORD *)(v38 + 292) >> 8) & 0x20 | v48 & 0xFFDF;
          if ((v18 + 67) >= 0x44u)
          {
            uint64_t v28 = BlueFin::GlSvId::s_aucSvId2gnss[v18];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v28] == 255)
            {
              __int16 v27 = 575;
              int v26 = -1;
            }
            else
            {
              int v26 = 0;
              __int16 v27 = BlueFin::GlSignalId::s_ausGnss2signalId[v28]
                  + v18
                  - BlueFin::GlSvId::s_aucGnss2minSvId[v28];
            }
          }
          else
          {
            int v26 = 0;
            __int16 v27 = 575;
          }
          int v10 = 0;
          int v11 = 0;
          char v12 = 0;
          int v13 = 0;
          int v14 = 0;
          v45[0] = v18;
          int v46 = v26;
          __int16 v47 = v27;
          int v21 = 1;
          int v16 = 5;
LABEL_42:
          int v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          double v29 = *(double *)(v15 + 28528);
          if (v7 == 2) {
            char v30 = 96;
          }
          else {
            char v30 = 32;
          }
          if (v7 == 3) {
            char v30 = -32;
          }
          BYTE14(v42) = v30;
          float v31 = v29;
          LOWORD(v42) = BlueFin::GlMeSrdAsicUnitConverter::PpuToEswAidingFrequency((BlueFin::GlMeSrdAsicUnitConverter *)v45, v31, v6);
          WORD4(v42) = 0;
          BYTE6(v42) = 0;
          BYTE10(v42) = 0;
          WORD6(v42) = *(_DWORD *)(*(void *)(v38 + 32) + 27688);
          LOBYTE(v43) = 0;
          uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32);
          (*(void (**)(uint64_t, void *, uint64_t, unsigned __int8 *, long long *))(*(void *)v33 + 72))(v33, v50, 1, &v56, &v42);
          int v57 = v21;
          unsigned __int8 v58 = v56;
          __int16 v59 = 0;
          v39[0] = v18;
          if ((v16 & 6) == 4) {
            int v34 = v9;
          }
          else {
            int v34 = (unsigned __int16)v9;
          }
          int v40 = v16;
          LODWORD(v41) = v34;
          *(void *)((char *)&v41 + 4) = 0;
          HIDWORD(v41) = 0;
          if ((v10 | v13 | v14) == 1)
          {
            v39[0] = v12;
            int v40 = v11;
            long long v41 = 0uLL;
          }
          uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
          uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 64))(v35);
          LOBYTE(v37) = 0;
          (*(void (**)(uint64_t, void *, void, char *, long long *, uint64_t, uint64_t, __int16 *, int *, int))(*(void *)v36 + 32))(v36, v50, v56, v39, &v60, 1, 1, &v48, &v57, v37);
          break;
        default:
          DeviceFaultNotify("glmesrd_test_mgr_cw_controller.cpp", 969, "CreateSAT", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_controller.cpp", 969, "0");
      }
    }
    ++v7;
  }
  while (v7 != 10);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v50);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v50);
}

void sub_263A9D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeAbstractTestMgrCwController::GetCwResults(BlueFin::GlMeAbstractTestMgrCwController *this)
{
}

void BlueFin::GlMeAbstractTestMgrCwController::GetSpaIqResults(BlueFin::GlMeAbstractTestMgrCwController *this)
{
}

void BlueFin::GlMeAbstractTestMgrCwController::HasResults(BlueFin::GlMeAbstractTestMgrCwController *this)
{
}

void BlueFin::GlMeSrdTestMgrCwController::~GlMeSrdTestMgrCwController(BlueFin::GlMeSrdTestMgrCwController *this)
{
}

void BlueFin::GlMeSrdTestMgrCwController::GetSpaIqResults(BlueFin::GlMeSrdTestMgrCwController *this)
{
}

uint64_t BlueFin::GlMeSrdTestMgrCwController::SetCentralFreqHz(uint64_t this, unsigned int a2, double a3)
{
  *(double *)(this + 8 * a2 + 304) = a3;
  return this;
}

void BlueFin::GlMeCarpTestMgrCwController::~GlMeCarpTestMgrCwController(BlueFin::GlMeCarpTestMgrCwController *this)
{
}

uint64_t BlueFin::GlMeCarpTestMgrCwController::SetCentralFreqHz(uint64_t this, unsigned int a2, double a3)
{
  *(double *)(this + 8 * a2 + 304) = a3;
  return this;
}

void BlueFin::GlMePikeTestMgrCwController::~GlMePikeTestMgrCwController(BlueFin::GlMePikeTestMgrCwController *this)
{
}

uint64_t BlueFin::GlMePikeTestMgrCwController::SetCentralFreqHz(uint64_t this, unsigned int a2, double a3)
{
  *(double *)(this + 8 * a2 + 304) = a3;
  return this;
}

void BlueFin::GlMeMinnowTestMgrCwController::~GlMeMinnowTestMgrCwController(BlueFin::GlMeMinnowTestMgrCwController *this)
{
}

uint64_t BlueFin::GlMeMinnowTestMgrCwController::SetCentralFreqHz(uint64_t this, unsigned int a2, double a3)
{
  *(double *)(this + 8 * a2 + 304) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::GlMeSrdTestMgrCwReceiver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 24) = a5;
  *(void *)a1 = &unk_270EBDB28;
  *(void *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 27244) = 0;
  *(_WORD *)(a1 + 27248) = 0;
  uint64_t v7 = (unsigned char *)(a1 + 28128);
  *(_OWORD *)(a1 + 26992) = 0u;
  *(_OWORD *)(a1 + 27008) = 0u;
  *(_OWORD *)(a1 + 27024) = 0u;
  *(_OWORD *)(a1 + 27040) = 0u;
  *(_OWORD *)(a1 + 27056) = 0u;
  *(_OWORD *)(a1 + 27072) = 0u;
  *(_OWORD *)(a1 + 27088) = 0u;
  *(_OWORD *)(a1 + 27104) = 0u;
  *(_OWORD *)(a1 + 27120) = 0u;
  *(_OWORD *)(a1 + 27136) = 0u;
  *(_OWORD *)(a1 + 27152) = 0u;
  *(_OWORD *)(a1 + 27168) = 0u;
  *(_OWORD *)(a1 + 27184) = 0u;
  *(_OWORD *)(a1 + 27200) = 0u;
  *(_OWORD *)(a1 + 27216) = 0u;
  *(_OWORD *)(a1 + 27227) = 0u;
  *(void *)(a1 + 27256) = 0;
  *(unsigned char *)(a1 + 27330) = -1;
  *(void *)(a1 + 27320) = 0;
  *(_OWORD *)(a1 + 27304) = 0u;
  *(_WORD *)(a1 + 27328) = 0;
  *(void *)(a1 + 27331) = 0;
  *(_WORD *)(a1 + 27339) = 0;
  *(void *)(a1 + 27344) = 0;
  *(unsigned char *)(a1 + 27352) = 0;
  *(unsigned char *)(a1 + 27856) = 0;
  *(unsigned char *)(a1 + 27952) = 0;
  *(void *)(a1 + 27960) = a3;
  *(void *)(a1 + 27968) = a2;
  *(void *)(a1 + 27976) = &unk_270EBDB80;
  *(void *)(a1 + 27984) = a1;
  *(void *)(a1 + 27992) = &unk_270EBDC10;
  *(void *)(a1 + 28000) = a1;
  *(void *)(a1 + 28008) = &unk_270EBDC58;
  *(void *)(a1 + 28016) = a1;
  *(void *)(a1 + 28056) = 0;
  *(_OWORD *)(a1 + 28024) = 0u;
  *(_OWORD *)(a1 + 28040) = 0u;
  *(void *)(a1 + 28064) = &unk_270EBDCF0;
  *(void *)(a1 + 28072) = a1;
  *(void *)(a1 + 28096) = 0;
  *(unsigned char *)(a1 + 28104) = 0;
  *(unsigned char *)(a1 + 28125) = 0;
  *(void *)(a1 + 28080) = 0;
  *(_DWORD *)(a1 + 28087) = 0;
  *(_OWORD *)(a1 + 28132) = 0u;
  unsigned int v8 = (_OWORD *)(a1 + 28132);
  *(unsigned char *)(a1 + 28128) = 0;
  *(_OWORD *)(a1 + 28148) = 0u;
  *(_OWORD *)(a1 + 28164) = 0u;
  *(_OWORD *)(a1 + 28180) = 0u;
  *(_WORD *)(a1 + 948) = 0;
  *(void *)(a1 + 940) = 0;
  *(_WORD *)(a1 + 9360) = 0;
  *(void *)(a1 + 9352) = 0;
  *(_WORD *)(a1 + 9532) = 0;
  *(void *)(a1 + 9524) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 26984) = 0;
  *(_OWORD *)(a1 + 26952) = 0u;
  *(_OWORD *)(a1 + 26968) = 0u;
  *(_OWORD *)(a1 + 26936) = 0u;
  *(void *)(a1 + 27296) = -1;
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  *(_OWORD *)(a1 + 27280) = v9;
  *(_WORD *)(a1 + 27865) = 0;
  *(void *)(a1 + 27857) = 0;
  uint64_t v10 = a1 + 27872;
  *(_OWORD *)(a1 + 27264) = v9;
  do
  {
    *(void *)(v10 + 8 * v6) = 0;
    uint64_t v11 = v10 + v6;
    *(unsigned char *)(v11 + 233) = 1;
    *(unsigned char *)(v11 + 243) = 2;
    ++v6;
  }
  while (v6 != 10);
  if (a4)
  {
    uint64_t v12 = *(void *)(a4 + 16);
    if (v12)
    {
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 16) = *(void *)(a4 + 16);
    }
  }
  bzero((void *)(a1 + 60), 0x370uLL);
  bzero((void *)(a1 + 952), 0x20D0uLL);
  for (uint64_t i = 0; i != 160; i += 16)
  {
    uint64_t v14 = a1 + 9364 + i;
    *(unsigned char *)(v14 + 8) = 0;
    *(void *)uint64_t v14 = 0;
    *(_DWORD *)(a1 + i + 9376) = 0;
  }
  bzero((void *)(a1 + 9536), 0x43F8uLL);
  *uint64_t v7 = 0;
  *unsigned int v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  return a1;
}

void BlueFin::GlMeSrdTestMgrCwReceiver::~GlMeSrdTestMgrCwReceiver(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
  *(void *)this = &unk_270EBDB28;
  for (uint64_t i = 40; i != 50; ++i)
  {
    if (*((unsigned char *)this + i))
    {
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 159, "~GlMeSrdTestMgrCwReceiver", (char)"!m_bSatAlive[i]");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 159, "!m_bSatAlive[i]");
    }
  }
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdTestMgrCwReceiver::~GlMeSrdTestMgrCwReceiver(this);

  JUMPOUT(0x263E6DD80);
}

void BlueFin::GlMeSrdTestMgrCwReceiver::AllocateCwResources(BlueFin::GlMeSrdTestMgrCwReceiver *this, const BlueFin::GlMeSrdTestMgrCwParams *a2)
{
  uint64_t v4 = (BOOL *)this + 26976;
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    (*(void (**)(void, char *))(**(void **)(v5 + 8) + 136))(*(void *)(v5 + 8), (char *)this + 27976);
    (*(void (**)(void, char *))(**(void **)(*((void *)this + 4) + 8) + 168))(*(void *)(*((void *)this + 4) + 8), (char *)this + 27992);
    uint64_t v6 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 240))(v6) & 1) != 0
      || (uint64_t v7 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136),
          (*(unsigned int (**)(uint64_t))(*(void *)v7 + 264))(v7)))
    {
      (*(void (**)(void, char *))(**(void **)(*((void *)this + 4) + 8) + 88))(*(void *)(*((void *)this + 4) + 8), (char *)this + 28008);
    }
    uint64_t v8 = *(void *)(*(void *)(*((void *)this + 4) + 16) + 136);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 264))(v8)) {
      (*(void (**)(void, char *))(**(void **)(*((void *)this + 4) + 8) + 88))(*(void *)(*((void *)this + 4) + 8), (char *)this + 28064);
    }
  }
  BlueFin::GlMeSrdTestMgrCwParams::operator=((uint64_t)this + 26992, (uint64_t)a2);
  for (uint64_t i = 0; i != 80; i += 8)
    *(double *)((char *)this + i + 27872) = (*(double *)((char *)a2 + i) + *(double *)((char *)a2 + i + 80)) * 0.5;
  unsigned int v10 = *((_DWORD *)v4 + 67);
  if ((v10 & 0x20) != 0)
  {
    uint64_t v11 = *((unsigned __int8 *)a2 + 248);
    if ((v11 + 67) < 0x44u
      || (uint64_t v12 = BlueFin::GlSvId::s_aucSvId2gnss[v11],
          uint64_t v13 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v12],
          v13 == -1)
      || (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v12]
                          + v11
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v12]) >= 0x23Fu)
    {
      DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
    }
    double v14 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[v13];
    if (v12 == 2)
    {
      double v15 = (double)(char)(v11 - 59);
      if ((v11 - 52) >= 0xE) {
        double v15 = -8.0;
      }
      double v14 = v14 + v15 * 562500.0;
    }
    *((double *)this + 3485) = *((double *)this + 3485) + v14 + -1575420000.0;
  }
  *uint64_t v4 = (v10 & 2) != 0;
  v4[1] = (v10 & 0x20) >> 5;
  v4[2] = (v10 & 0x40) != 0;
  v4[3] = (v10 & 0x4000) != 0;
  v4[4] = (v10 & 0x8000) != 0;
  int v16 = (v10 >> 21) & 1;
  if ((v10 & 0x4002) == 0x4000) {
    LOBYTE(v16) = 1;
  }
  v4[5] = v16;
  v4[7] = (v10 & 0x800000) != 0;
  v4[8] = HIBYTE(v10) & 1;
}

double BlueFin::GlSignalId::GetRfCarrierFrqHz(BlueFin::GlSignalId *this)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
  }
  uint64_t v1 = *(unsigned __int8 *)this;
  uint64_t v2 = BlueFin::GlSvId::s_aucSvId2gnss[v1];
  double result = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)this + 1) - *((int *)this + 1) + v2]];
  if (v2 == 2)
  {
    double v4 = (double)(char)(v1 - 59);
    if ((v1 - 52) >= 0xE) {
      double v4 = -8.0;
    }
    return result + v4 * 562500.0;
  }
  return result;
}

void BlueFin::GlMeSrdTestMgrCwReceiver::RunCwTest(BlueFin::GlMeSrdTestMgrCwReceiver *this, int16x8_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = 0;
  uint64_t v63 = *MEMORY[0x263EF8340];
  int v18 = (char *)this + 26976;
  do
  {
    *(_DWORD *)&v18[4 * v17 - 40] = 1;
    if (v18[v17])
    {
      LODWORD(v20[0]) = 0;
      char v62 = v17;
      BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(this, (uint64_t)v20, a2, a3, a4, a5, a6, a7, a8, a9, a11, a12, a13, a14, a15, a16, v19, v20[0], v20[1],
        v20[2],
        v20[3],
        v20[4],
        v21,
        v22,
        v23,
        v24,
        v25,
        v26,
        v27,
        v28,
        v29,
        v30,
        v31,
        v32,
        v33,
        v34,
        v35,
        v36,
        v37,
        v38,
        v39,
        v40,
        v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        v57,
        v58,
        v59,
        v60,
        v61);
    }
    ++v17;
  }
  while (v17 != 10);
}

void BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(BlueFin::GlMeSrdTestMgrCwReceiver *this, uint64_t a2, int16x8_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int16 a23,double a24,long long a25,int a26,char a27,int64x2_t a28,int32x2_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned __int8 a35,int a36,int32x4_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,__int32 a45,int a46,uint64_t a47,char a48,int a49,int a50,int a51,uint64_t a52,uint64_t a53,int a54,int a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v56 = *(unsigned __int8 *)(a2 + 1752);
  if (!*((unsigned char *)this + v56 + 26976))
  {
    v102 = "m_bSmEnabled[stEvent.ucEventId]";
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 489, "ProcessEvent", (char)"m_bSmEnabled[stEvent.ucEventId]");
    int v103 = 489;
LABEL_63:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", v103, v102);
  }
  switch(*((_DWORD *)this + v56 + 6734))
  {
    case 1:
      if (!*(_DWORD *)a2)
      {
        uint64_t v59 = *((void *)this + 4);
        if (v59)
        {
          *(int8x8_t *)a3.i8 = vand_s8((int8x8_t)vceq_s16(vdup_n_s16(v56), (int16x4_t)0x3000200010000), (int8x8_t)0x1000100010001);
          unsigned __int32 v104 = vmovn_s16(a3).u32[0];
          BOOL v105 = v56 == 4;
          BOOL v106 = v56 == 5;
          char v107 = 0;
          BOOL v108 = v56 == 7;
          BOOL v109 = v56 == 8;
          (*(void (**)(void, unsigned __int32 *))(**(void **)(v59 + 424) + 88))(*(void *)(v59 + 424), &v104);
          uint64_t v56 = *(unsigned __int8 *)(a2 + 1752);
        }
        *((unsigned char *)this + v56 + 40) = 1;
        if (((*(uint64_t (**)(void))(**((void **)this + 3496) + 256))(*((void *)this + 3496)) & 1) == 0
          && ((*(uint64_t (**)(void))(**((void **)this + 3496) + 264))(*((void *)this + 3496)) & 1) == 0)
        {
          BlueFin::GlMeSrdTestMgrCwReceiver::ReadAgcValues(this);
        }
        uint64_t v60 = (char *)this + 4 * *(unsigned __int8 *)(a2 + 1752);
        uint64_t v61 = 26936;
        int v62 = 2;
LABEL_10:
        *(_DWORD *)&v60[v61] = v62;
      }
      return;
    case 2:
      switch(*(_DWORD *)a2)
      {
        case 1:
          unint64_t v63 = 0;
          __int16 v64 = (char *)this + 26976;
          while (2)
          {
            if (!v64[v63])
            {
              if (v63 > 8) {
                return;
              }
LABEL_18:
              ++v63;
              continue;
            }
            break;
          }
          unsigned int v65 = *((_DWORD *)this + 6814);
          unsigned int v66 = *(_DWORD *)&v64[4 * v63 + 288];
          if (v63 <= 8 && v65 <= v66) {
            goto LABEL_18;
          }
          if (v65 > v66)
          {
            if (!*((unsigned char *)this + 27329))
            {
              BlueFin::GlMeSrdTestMgrCwReceiver::ReportFailure((uint64_t)this, a2);
              uint64_t v60 = (char *)this + 4 * *(unsigned __int8 *)(a2 + 1752);
              uint64_t v61 = 27264;
              int v62 = -1;
              goto LABEL_10;
            }
            BlueFin::GlMeSrdTestMgrCwReceiver::Restart(this, a2);
          }
          return;
        case 2:
          char v91 = *(unsigned char *)(*(void *)(a2 + 8) + 4);
          if (v91)
          {
            char v91 = 1;
            int v92 = -1;
          }
          else
          {
            int v92 = *((_DWORD *)this + 6814) + 5000;
          }
          *((_DWORD *)this + v56 + 6816) = v92;
          *((unsigned char *)this + v56 + 40) = v91;
          int v98 = (*(uint64_t (**)(void))(**((void **)this + 3496) + 264))();
          v99 = *(unsigned char **)(a2 + 8);
          if (v98 && v99[6] == 255 && v99[4] == 1 || v99[5] == 255 && v99[4])
          {
            v100 = (char *)this + 4 * *(unsigned __int8 *)(a2 + 1752);
            *((_DWORD *)v100 + 6816) = -1;
            *((_DWORD *)v100 + 6734) = 3;
          }
          uint64_t v101 = *(unsigned __int8 *)(a2 + 1752);
          if (*((unsigned char *)this + v101 + 9524))
          {
            if (!*((unsigned char *)this + v101 + 50)) {
              return;
            }
          }
          else if (!*((unsigned char *)this + v101 + 50) || !*((unsigned char *)this + v101 + 940))
          {
            return;
          }
          v88 = this;
          uint64_t v89 = a2;
          uint64_t v90 = 1;
          goto LABEL_57;
        case 3:
          if (!*(_DWORD *)(a2 + 12))
          {
            if ((*((unsigned char *)this + 27244) & 0x40) == 0
              || (*((unsigned char *)this + 28088) = (*(unsigned char *)(a2 + 20) & 2) != 0, !*(_DWORD *)(a2 + 12)))
            {
              v93 = (char *)this + 88 * v56;
              long long v94 = *(_OWORD *)(a2 + 8);
              *(_OWORD *)(v93 + 76) = *(_OWORD *)(a2 + 24);
              *(_OWORD *)(v93 + 60) = v94;
              long long v95 = *(_OWORD *)(a2 + 40);
              long long v96 = *(_OWORD *)(a2 + 56);
              long long v97 = *(_OWORD *)(a2 + 72);
              *(void *)(v93 + 140) = *(void *)(a2 + 88);
              *(_OWORD *)(v93 + 124) = v97;
              *(_OWORD *)(v93 + 108) = v96;
              *(_OWORD *)(v93 + 92) = v95;
              *((unsigned char *)this + *(unsigned __int8 *)(a2 + 1752) + 50) = 1;
            }
          }
          return;
        case 6:
          memcpy((char *)this + 1740 * *(unsigned __int8 *)(a2 + 1752) + 9536, (const void *)(a2 + 8), 0x6CCuLL);
          *((unsigned char *)this + *(unsigned __int8 *)(a2 + 1752) + 9524) = 1;
          return;
        default:
          return;
      }
    case 3:
      int v67 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 == 5)
      {
        *(_OWORD *)((char *)this + 16 * v56 + 9364) = *(_OWORD *)(a2 + 8);
        uint64_t v73 = *(unsigned __int8 *)(a2 + 1752);
        v74 = (char *)this + v73 + 9352;
      }
      else if (v67 == 4)
      {
        memcpy((char *)this + 840 * *(unsigned __int8 *)(a2 + 1752) + 952, (const void *)(a2 + 8), 0x348uLL);
        uint64_t v73 = *(unsigned __int8 *)(a2 + 1752);
        v74 = (char *)this + v73 + 940;
      }
      else
      {
        if (v67 != 3 || *(_DWORD *)(a2 + 12) != 1) {
          return;
        }
        v68 = (char *)this + 88 * *(unsigned __int8 *)(a2 + 1752);
        long long v69 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(v68 + 76) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(v68 + 60) = v69;
        long long v70 = *(_OWORD *)(a2 + 40);
        long long v71 = *(_OWORD *)(a2 + 56);
        long long v72 = *(_OWORD *)(a2 + 72);
        *(void *)(v68 + 140) = *(void *)(a2 + 88);
        *(_OWORD *)(v68 + 124) = v72;
        *(_OWORD *)(v68 + 108) = v71;
        *(_OWORD *)(v68 + 92) = v70;
        uint64_t v73 = *(unsigned __int8 *)(a2 + 1752);
        v74 = (char *)this + v73 + 50;
      }
      unsigned char *v74 = 1;
      if (*((unsigned char *)this + v73 + 9524))
      {
        if (!*((unsigned char *)this + v73 + 50)) {
          return;
        }
      }
      else if (!*((unsigned char *)this + v73 + 50) || !*((unsigned char *)this + v73 + 940))
      {
        return;
      }
      BlueFin::GlMeSrdTestMgrCwReceiver::ReadAgcValues(this);
      v88 = this;
      uint64_t v89 = a2;
      uint64_t v90 = 0;
LABEL_57:
      BlueFin::GlMeSrdTestMgrCwReceiver::ProcessMsmts((uint64_t)v88, v89, v90, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, a17, a18, a19,
        a20,
        a21,
        a22,
        a23,
        a24,
        a25,
        a26,
        a27,
        a28,
        a29,
        a30,
        a31,
        a32,
        a33,
        a34,
        a35,
        a36,
        a37,
        a38,
        a39,
        a40,
        a41,
        a42,
        a43,
        a44,
        a45,
        a46,
        a47,
        a48,
        a49,
        a50,
        a51,
        a52,
        a53,
        a54,
        a55,
        a56,
        a57,
        a58,
        a59,
        a60,
        a61,
        a62,
        a63);
      return;
    case 4:
      return;
    default:
      v102 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 661, "ProcessEvent", (char)"0");
      int v103 = 661;
      goto LABEL_63;
  }
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::ClearCwResources(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = 0;
  uint64_t v3 = this + 40;
  do
  {
    if (*(unsigned char *)(v3 + v2))
    {
      uint64_t v4 = *(void *)(v1 + 32);
      if (v4) {
        this = (*(uint64_t (**)(void, void))(**(void **)(v4 + 424) + 80))(*(void *)(v4 + 424), v2);
      }
      *(unsigned char *)(v3 + v2) = 0;
    }
    ++v2;
  }
  while (v2 != 10);
  uint64_t v5 = *(void *)(v1 + 32);
  if (v5)
  {
    (*(void (**)(void, uint64_t))(**(void **)(v5 + 8) + 176))(*(void *)(v5 + 8), v1 + 27992);
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v1 + 32) + 8) + 144))(*(void *)(*(void *)(v1 + 32) + 8), v1 + 27976);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(v1 + 32) + 16) + 136);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 240))(v6)) {
      (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v1 + 32) + 8) + 96))(*(void *)(*(void *)(v1 + 32) + 8), v1 + 28008);
    }
    uint64_t v7 = *(void *)(*(void *)(*(void *)(v1 + 32) + 16) + 136);
    this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 264))(v7);
    if (this) {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(v1 + 32) + 8) + 96))(*(void *)(*(void *)(v1 + 32) + 8), v1 + 28064);
    }
  }
  for (uint64_t i = 0; i != 10; ++i)
  {
    *(_DWORD *)(v1 + 26936 + 4 * i) = 4;
    if (*(unsigned char *)(v1 + 40 + i))
    {
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 286, "ClearCwResources", (char)"!m_bSatAlive[band]");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 286, "!m_bSatAlive[band]");
    }
  }
  return this;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::GetCwResults(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
  *((unsigned char *)this + 27856) = 0;
  return (uint64_t)this + 27304;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::HasResults(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
  return *((unsigned __int8 *)this + 27856);
}

void BlueFin::GlMeSrdTestMgrCwReceiver::Heartbeat(BlueFin::GlMeSrdTestMgrCwReceiver *this, __int32 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v18 = 0;
  uint64_t v74 = *MEMORY[0x263EF8340];
  int v19 = *((_DWORD *)this + 6814);
  int v20 = (char *)this + 27264;
  do
  {
    if (!v19)
    {
      int v21 = *(_DWORD *)&v20[v18];
      if (v21 != -1) {
        *(_DWORD *)&v20[v18] = v21 + a2;
      }
    }
    v18 += 4;
  }
  while (v18 != 40);
  uint64_t v22 = 0;
  *((_DWORD *)this + 6814) = a2;
  long long v23 = (char *)this + 26976;
  do
  {
    if (v23[v22])
    {
      v37.i32[0] = a2;
      v73[0] = v22;
      BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(this, (uint64_t)&v35, a9, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, a6, a7, a8, *(uint64_t *)v29, *(uint64_t *)&v29[8], *(uint64_t *)&v29[16],
        v30,
        *((uint64_t *)&v30 + 1),
        v31,
        v32,
        v33,
        v34,
        1,
        v36,
        v37,
        v38,
        v39,
        v40,
        v41,
        v42,
        v43,
        v44,
        v45,
        v46,
        v47,
        v48,
        v49,
        v50,
        v51,
        v52,
        v53,
        v54,
        v55,
        v56,
        v57,
        v58,
        v59,
        v60,
        v61,
        v62,
        v63,
        v64,
        v65,
        v66,
        v67,
        v68,
        v69,
        v70,
        v71,
        v72);
      uint64_t v24 = *((void *)this + 4);
      if (v24)
      {
        uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(v24 + 8) + 80))(*(void *)(v24 + 8));
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        LOWORD(v33) = 256;
        BYTE2(v33) = 0;
        *(void *)&long long v34 = v25;
        DWORD2(v34) = 0;
        WORD6(v34) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, 1);
        *(_OWORD *)&v29[8] = 0u;
        long long v30 = 0u;
        if (v22) {
          char v26 = 32;
        }
        else {
          char v26 = 96;
        }
        if (v22 == 3) {
          char v26 = -32;
        }
        v29[18] = v26;
        *(_DWORD *)&v29[4] = 0;
        *(_DWORD *)&v29[7] = 0;
        *(_WORD *)&v29[16] = *(_DWORD *)(*((void *)this + 4) + 27688);
        uint64_t v27 = (*(uint64_t (**)(void))(*(void *)v34 + 48))(v34);
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
        (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char *, unsigned char *))(*(void *)v28 + 72))(v28, &v31, 1, v73, &v29[4]);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v31);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v31);
      }
    }
    ++v22;
  }
  while (v22 != 10);
}

void sub_263A9EAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void BlueFin::GlMeSrdTestMgrCwReceiver::ReadAgcValues(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 80))(*(void *)(v1 + 8));
    v32[0] = 0;
    v32[1] = 0;
    char v33 = 0;
    __int16 v34 = 1;
    uint64_t v35 = v3;
    int v36 = 0;
    __int16 v37 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
    int v4 = *((_DWORD *)this + 6);
    if ((v4 - 6) >= 2)
    {
      if (v4 == 2)
      {
        uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v32, 10, 27);
        uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v32, 10, 29);
        uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v32, 10, 30);
        uint64_t v23 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v32, 10, 31);
        uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v32, 10, 32);
        uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 32))(v27);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v32, 9, 3221274864);
        uint64_t v29 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 32))(v29);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v32, 9, 3221275120);
        uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 32))(v31);
        uint64_t v15 = 3221275376;
        uint64_t v16 = 9;
      }
      else
      {
        if (v4 != 1)
        {
          DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 393, "ReadAgcValues", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 393, "0");
        }
        uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void, uint64_t))(*(void *)v6 + 32))(v6, v32, 4, 12288, 0, 0x4000);
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v32, 4, 12288, 0x4000, 0x4000);
        uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void, uint64_t))(*(void *)v10 + 32))(v10, v32, 4, 12288, 0, 0x4000);
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v32, 4, 12318);
        uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
        uint64_t v15 = 12319;
        uint64_t v16 = 4;
      }
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v32, v16, v15);
    }
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v32);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v32);
  }
}

void sub_263A9F250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrCwReceiver::PollMsCounter(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v9[0] = 0;
  v9[1] = 0;
  char v10 = 0;
  __int16 v11 = 1;
  uint64_t v12 = v2;
  int v13 = 0;
  __int16 v14 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  int v3 = *((_DWORD *)this + 6);
  if ((v3 - 6) >= 2)
  {
    if (v3 == 2)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
      uint64_t v6 = 3221225560;
      uint64_t v7 = 9;
    }
    else
    {
      if (v3 != 1)
      {
        DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 428, "PollMsCounter", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 428, "0");
      }
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208))(*(void *)(*((void *)this + 4) + 8));
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
      uint64_t v6 = 22;
      uint64_t v7 = 4;
    }
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v9, v7, v6);
  }
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v9);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v9);
}

void sub_263A9F44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrCwReceiver::RequestDump(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
  *((_DWORD *)this + 6734) = 6;
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 80))(*(void *)(*((void *)this + 4) + 8));
  v14[0] = 0;
  v14[1] = 0;
  char v15 = 0;
  __int16 v16 = 1;
  uint64_t v17 = v2;
  int v18 = 0;
  __int16 v19 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  int v3 = *((_DWORD *)this + 6);
  if ((v3 - 6) >= 2)
  {
    if (v3 == 2)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v8 + 24))(v8, v14, 9, 3221226032, 0);
      BOOL IsERAMDump = BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrCwReceiver *)((char *)this + 26992));
      uint64_t v6 = *(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 8) + 208);
      if (IsERAMDump)
      {
        uint64_t v10 = v6();
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v12 = 512;
LABEL_8:
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v11 + 160))(v11, v14, v12);
        goto LABEL_9;
      }
    }
    else
    {
      if (v3 != 1)
      {
        DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 472, "RequestDump", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 472, "0");
      }
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, v14, 4, 70, 256);
      uint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 1) + 208);
    }
    uint64_t v13 = v6();
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v12 = 1024;
    goto LABEL_8;
  }
LABEL_9:
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v14);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v14);
}

void sub_263A9F75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(BlueFin::GlMeSrdTestMgrCwParams *this)
{
  int v1 = *((_DWORD *)this + 63);
  int v2 = v1 & 0x180;
  if (v2 != 128 && v2 != 384 && v2 != 256) {
    return 0;
  }
  int v3 = v1 & 0x600;
  BOOL v4 = v3 == 1536;
  if (v3 == 1024) {
    BOOL v4 = 1;
  }
  return v3 == 512 || v4;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::Restart(BlueFin::GlMeSrdTestMgrCwReceiver *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(void, void))(**(void **)(v4 + 424) + 80))(*(void *)(v4 + 424), *(unsigned __int8 *)(a2 + 1752));
  }
  uint64_t v5 = *(unsigned __int8 *)(a2 + 1752);
  *((unsigned char *)this + v5 + 40) = 0;
  *((_DWORD *)this + v5 + 6734) = 1;
  return BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(this);
}

unint64_t BlueFin::GlMeSrdTestMgrCwReceiver::ReportFailure(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)(a2 + 1752) + 26936) = 4;
  uint64_t v4 = a1 + 27328;
  memset(v7, 0, sizeof(v7));
  __int16 v8 = 0;
  char v9 = -1;
  uint64_t v10 = 0;
  __int16 v11 = 0;
  uint64_t v12 = 0;
  char v13 = 0;
  BlueFin::sCwResults::operator=(a1 + 27304, (uint64_t)v7);
  *(_WORD *)uint64_t v4 = 1;
  *(unsigned char *)(v4 + 2) = *(unsigned char *)(a2 + 1752);
  *(unsigned char *)(v4 + 528) = 1;
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5)
  {
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 1957, "ReportFailure", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 1957, "0");
  }
  return BlueFin::GlMeSrdCtrlSm::PostCwResults(*(BlueFin::GlMeSrdCtrlSm **)(v5 + 16));
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::ProcessMsmts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int16 a23,double a24,long long a25,int a26,char a27,int64x2_t a28,int32x2_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned __int8 a35,int a36,int32x4_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,__int32 a45,int a46,uint64_t a47,char a48,int a49,int a50,int a51,uint64_t a52,uint64_t a53,int a54,int a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v77 = (unsigned __int8 *)MEMORY[0x270FA5388](a1, a2);
  int v322 = v78;
  uint64_t v80 = v79;
  uint64_t v81 = (uint64_t)v77;
  STACK[0x5698] = *MEMORY[0x263EF8340];
  LOBYTE(v78) = *(unsigned char *)(v79 + 1752);
  double v82 = &v77[v78];
  v82[940] = 0;
  v82[50] = 0;
  v82[9352] = 0;
  v82[9524] = 0;
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x900], v77, v78);
  uint64_t v83 = LOBYTE(STACK[0x900]);
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x900], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
  if ((v83 + 67) < 0x44u
    || (int v84 = STACK[0x904], LODWORD(STACK[0x904]) == -1)
    || (uint64_t v85 = BlueFin::GlSvId::s_aucSvId2gnss[v83],
        double v86 = &BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[-v84],
        v86[8 * v84 + v85] == 255)
    || (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v85]
                        + v83
                        - BlueFin::GlSvId::s_aucGnss2minSvId[v85]
                        + v84 * BlueFin::GlSvId::s_aucGnss2numSvId[v85]) >= 0x23Fu)
  {
    v316 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 806, "GetChipsPerSec", (char)"IsValid()");
    int v317 = 806;
LABEL_309:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v317, v316);
  }
  int v87 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * v84 + v85];
  if (!v87
    || (unsigned int v88 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v84 - v84 + v85]) == 0)
  {
    v316 = "ulChipsPerEpoch != 0 && ulMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 814, "GetChipsPerSec", (char)"ulChipsPerEpoch != 0 && ulMsPerEpoch != 0");
    int v317 = 814;
    goto LABEL_309;
  }
  unsigned __int8 v89 = *(unsigned char *)(v80 + 1752);
  double v90 = (double)(1000 * v87 / v88);
  double v91 = v90 / 1000.0;
  uint64_t v92 = v81 + 88 * v89;
  int Lms16ToLms32 = *(unsigned __int16 *)(v92 + 80);
  int v94 = *(_DWORD *)(v81 + 27256);
  if (v94) {
    int Lms16ToLms32 = BlueFin::GlMeSrdAsicUnitConverter::GetLms16ToLms32((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned __int16 *)(v92 + 80), v94);
  }
  LOWORD(v90) = *(_WORD *)(v81 + 88 * *(unsigned __int8 *)(v80 + 1752) + 82);
  uint64_t v95 = *(void *)(*(void *)(*(void *)(v81 + 32) + 16) + 136);
  double v96 = (double)*(unint64_t *)&v90
      / (v91
       * (double)(*(unsigned int (**)(uint64_t))(*(void *)v95 + 320))(v95));
  double v97 = fmod(v96, 4294967300.0);
  if (v96 <= 4294967300.0) {
    double v97 = v96;
  }
  if (v97 < -4294967300.0) {
    double v97 = -fmod(-v97, 4294967300.0);
  }
  if (v322)
  {
    unsigned int v98 = *(unsigned __int16 *)(*(void *)(v80 + 8) + 2);
  }
  else
  {
    if (v97 < 0.0) {
      unsigned int v99 = --v97;
    }
    else {
      unsigned int v99 = v97;
    }
    unsigned int v98 = v99 + Lms16ToLms32;
  }
  BOOL v100 = *(unsigned char *)(v81 + 28090) == 0;
  BOOL v101 = *(unsigned __int8 *)(v80 + 1752) == 3;
  if (v100 && v101) {
    int v102 = 1;
  }
  else {
    int v102 = v83;
  }
  if (v100 && v101) {
    char v103 = 0;
  }
  else {
    char v103 = v89;
  }
  LOBYTE(STACK[0x900]) = v102;
  LODWORD(STACK[0x904]) = v84;
  LOWORD(STACK[0x908]) = 575;
  uint64_t v104 = BlueFin::GlSvId::s_aucSvId2gnss[v102];
  int v105 = v86[8 * v84 + v104];
  if (v105 == 255) {
    LODWORD(STACK[0x904]) = -1;
  }
  else {
    LOWORD(STACK[0x908]) = BlueFin::GlSignalId::s_ausGnss2signalId[v104]
  }
                         + v102
                         - BlueFin::GlSvId::s_aucGnss2minSvId[v104]
                         + v84 * BlueFin::GlSvId::s_aucGnss2numSvId[v104];
  a70 = &unk_270EBECA8;
  BOOL v106 = v105 == 255;
  a80 = 0;
  a83 = 0;
  a84 = -1;
  a85 = 575;
  BlueFin::GlMeDSPMeas::init((uint64_t)&a70, (uint64_t)&STACK[0x900]);
  a73 = (double)v98 * 0.001;
  LOBYTE(STACK[0x280]) = v103;
  a79 = 1232348160;
  a80 |= 0x10u;
  if (v322) {
    int v107 = 1;
  }
  else {
    int v107 = 2;
  }
  LODWORD(STACK[0x900]) = v107;
  BlueFin::GlMeSrdDspMeasAux::GlMeSrdDspMeasAux((uint64_t)&a39, (uint64_t)&a83, v103, &STACK[0x900], (double)v98 * 0.001);
  BlueFin::GlMeas::GlMeas((uint64_t)&STACK[0x900]);
  LODWORD(STACK[0x900]) = v98;
  LODWORD(STACK[0x4D6C]) = 0;
  if (v106)
  {
    int v84 = -1;
    __int16 v108 = 575;
  }
  else
  {
    __int16 v108 = BlueFin::GlSignalId::s_ausGnss2signalId[v104]
         + v102
         - BlueFin::GlSvId::s_aucGnss2minSvId[v104]
         + v84 * BlueFin::GlSvId::s_aucGnss2numSvId[v104];
  }
  unint64_t v109 = STACK[0x4D60];
  *(unsigned char *)unint64_t v109 = v102;
  *(_DWORD *)(v109 + 4) = v84;
  *(_WORD *)(v109 + 8) = v108;
  STACK[0x6E0] = 0;
  STACK[0x6D8] = 0;
  LOWORD(STACK[0x6F0]) = 0;
  STACK[0x6E8] = 0;
  LOBYTE(STACK[0x6F2]) = -1;
  STACK[0x6F3] = 0;
  LOWORD(STACK[0x6FB]) = 0;
  STACK[0x700] = 0;
  LOBYTE(STACK[0x708]) = 0;
  a35 = 0;
  a36 = 0;
  a37 = vdupq_n_s32(0x7F7FFFFFu);
  a38 = 2139095039;
  STACK[0x4FB8] = (unint64_t)&unk_270EBD1D8;
  STACK[0x4FC0] = 0;
  STACK[0x4FC5] = 0;
  LODWORD(STACK[0x4FD0]) = -1;
  LOWORD(STACK[0x4FD4]) = 575;
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x328], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
  uint64_t v110 = *(void *)(v81 + 27960);
  uint64_t v111 = (*(uint64_t (**)(void))(**(void **)(v81 + 27968) + 16))(*(void *)(v81 + 27968));
  LOBYTE(STACK[0x588]) = STACK[0x328];
  LODWORD(STACK[0x58C]) = STACK[0x32C];
  LOWORD(STACK[0x590]) = STACK[0x330];
  BlueFin::GlMeSrdSatRptNoiseStats::GlMeSrdSatRptNoiseStats((uint64_t)&STACK[0x3F8], v110, v111, (uint64_t)&STACK[0x588]);
  if (v322)
  {
    a35 = 1;
    a37.i32[0] = 0;
    a37.i32[2] = 0;
    goto LABEL_43;
  }
  uint64_t GearId = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
  LOBYTE(STACK[0x4B8]) = 1;
  unsigned int v113 = *(unsigned __int16 *)((*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960))
                             + 24);
  uint64_t v114 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960));
  unsigned int v115 = *(unsigned __int8 *)(v80 + 1752);
  uint64_t v116 = v81 + 840 * *(unsigned __int8 *)(v80 + 1752);
  LOWORD(v117) = *(_WORD *)(v116 + 1172);
  *(float *)&unsigned int v118 = (float)v117;
  float v119 = (float)*(unsigned int *)(v116 + 956) / *(float *)&v118;
  LOBYTE(v118) = *(unsigned char *)(v114 + 26);
  *(float *)&STACK[0x4BC] = (float)(v119 * (float)v118) / (float)v113;
  if (*(_DWORD *)(v81 + 88 * v115 + 64) != 1)
  {
    int v318 = 1279;
    v319 = "m_stAcqWindow[stEvent.ucEventId].id.eng_type == TRACK_ENGINE_TYPE";
    goto LABEL_312;
  }
  unint64_t v120 = 0;
  uint64_t v121 = v81 + 88 * v115 + 69;
  do
  {
    int v122 = *(unsigned __int8 *)(v121 + v120);
    if (v120 > 3) {
      break;
    }
    ++v120;
  }
  while (v122 == 255);
  if (v122 == 255)
  {
    int v318 = 1286;
    v319 = "ucRet != 0xFF";
LABEL_312:
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", v318, "FirstGearId", (char)v319);
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", v318, v319);
  }
  LODWORD(STACK[0x4C0]) = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 184))(*(void *)(v81 + 27960))
                                    + 8);
  uint64_t v123 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 32))(*(void *)(v81 + 27960));
  v124 = (void *)(v81 + 27960);
  uint64_t v125 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960));
  uint64_t v126 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v124 + 144))(*v124, GearId);
  uint64_t v127 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v124 + 168))(*v124, GearId);
  STACK[0x4D80] = v123;
  STACK[0x4D88] = v125;
  STACK[0x4D90] = v126;
  STACK[0x4D98] = v127;
  v128 = (float *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v124 + 168))(*v124, GearId);
  uint64_t v129 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v124 + 184))(*v124, GearId);
  uint64_t v130 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v124 + 184))(*v124, GearId);
  BlueFin::GlMeSrdEstCNo::Run((uint64_t)&STACK[0x4FB8], BlueFin::GlMeSrdConstants::m_stPhysConst, v131, (uint64_t)&STACK[0x4D80], v128, v129, (float *)(v130 + 96), (unsigned __int8 *)&STACK[0x328], (uint64_t)&STACK[0x4B8], (float *)&STACK[0x3F8], (uint64_t)&a35);
  if (*(unsigned char *)(v81 + 27952)) {
    *(float *)a37.i32 = *(float *)a37.i32 + 10.5;
  }
LABEL_43:
  a23 = 0;
  a24 = 1.79769313e308;
  LODWORD(a25) = 2139095039;
  *(void *)((char *)&a25 + 12) = 0;
  *(void *)((char *)&a25 + 4) = 0;
  a27 = 0;
  a28 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a29 = vdup_n_s32(0x7F7FFFFFu);
  a30 = 0xFFFFFFFFLL;
  a31 = 0;
  a33 = 0;
  a34 = 0;
  a32 = 0x7FEFFFFFFFFFFFFFLL;
  double v132 = BlueFin::GlMeSrdEstCarrPrm::GlMeSrdEstCarrPrm((BlueFin::GlMeSrdEstCarrPrm *)&STACK[0x4D80]);
  if (!v322)
  {
    uint64_t v140 = (*(uint64_t (**)(void, double))(**(void **)(v81 + 27960) + 32))(*(void *)(v81 + 27960), v132);
    uint64_t v141 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960));
    uint64_t v142 = *(void *)(v81 + 27960);
    uint64_t v143 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    uint64_t v144 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v142 + 144))(v142, v143);
    uint64_t v145 = *(void *)(v81 + 27960);
    uint64_t v146 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    uint64_t v147 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v145 + 168))(v145, v146);
    STACK[0x6B8] = v140;
    STACK[0x6C0] = v141;
    STACK[0x6C8] = v144;
    STACK[0x6D0] = v147;
    uint64_t v148 = *(void *)(v81 + 27960);
    uint64_t v149 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    uint64_t v150 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v148 + 184))(v148, v149);
    uint64_t v151 = *(void *)(v81 + 27960);
    uint64_t v152 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    uint64_t v153 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v151 + 184))(v151, v152);
    uint64_t v154 = 0;
    int v155 = 0;
    v320 = (float *)v150;
    long long v156 = *(_OWORD *)(v153 + 204);
    *(_OWORD *)&STACK[0x670] = *(_OWORD *)(v153 + 188);
    *(_OWORD *)&STACK[0x680] = v156;
    *(_OWORD *)&STACK[0x690] = *(_OWORD *)(v153 + 220);
    *(_OWORD *)&STACK[0x69C] = *(_OWORD *)(v153 + 232);
    long long v157 = *(_OWORD *)(v153 + 156);
    long long v158 = *(_OWORD *)(v153 + 172);
    LOWORD(STACK[0x64E]) = 5;
    uint64_t v159 = v81 + 88 * *(unsigned __int8 *)(v80 + 1752);
    *(_OWORD *)&STACK[0x650] = v157;
    *(_OWORD *)&STACK[0x660] = v158;
    uint64_t v160 = v159 + 69;
    do
    {
      if (*(unsigned __int8 *)(v160 + v154) != 255) {
        ++v155;
      }
      ++v154;
    }
    while (v154 != 5);
    LOBYTE(STACK[0x64D]) = v155;
    LOBYTE(STACK[0x588]) = 0;
    LOBYTE(STACK[0x590]) = 0;
    STACK[0x594] = (unint64_t)vdup_n_s32(0x7F7FFFFFu);
    *(int64x2_t *)&STACK[0x5A0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    LODWORD(STACK[0x5B0]) = -1;
    LOBYTE(STACK[0x5B4]) = -1;
    LOBYTE(STACK[0x5B8]) = 0;
    LOBYTE(STACK[0x5D0]) = 0;
    LOBYTE(STACK[0x5E0]) = 0;
    LOBYTE(STACK[0x618]) = 0;
    LOBYTE(STACK[0x4FB8]) = 0;
    LODWORD(STACK[0x4FBC]) = 0;
    LOBYTE(STACK[0x4FC0]) = 0;
    LODWORD(STACK[0x4FC4]) = 0;
    LOWORD(STACK[0x4FC8]) = 575;
    LODWORD(STACK[0x4FCC]) = 0;
    LOWORD(STACK[0x4FD0]) = 0;
    *(_OWORD *)&STACK[0x4FD8] = 0u;
    *(_OWORD *)&STACK[0x4FE8] = 0u;
    *(_OWORD *)&STACK[0x4FF8] = 0u;
    BlueFin::GlMeSrdTestMgrCwReceiver::BuildAcqWindowMsmtInfo(v81, (uint64_t)&STACK[0x4FB8], v80, 0);
    uint64_t v161 = *(void *)(v81 + 27960);
    uint64_t v162 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    v163 = (float *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v161 + 168))(v161, v162);
    uint64_t v164 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960));
    uint64_t v165 = *(void *)(v81 + 27960);
    uint64_t v166 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    float v167 = *(float *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v165 + 184))(v165, v166) + 52);
    float v168 = *v163;
    unsigned int v169 = *(unsigned __int8 *)(v80 + 1752);
    uint64_t v170 = v81 + 88 * *(unsigned __int8 *)(v80 + 1752);
    uint64_t v171 = v81 + 840 * *(unsigned __int8 *)(v80 + 1752);
    unsigned int v321 = *(unsigned __int16 *)(v171 + 1172);
    unsigned int v172 = *(unsigned __int8 *)(v164 + 26);
    unsigned int v173 = *(unsigned __int16 *)(v164 + 24);
    BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x328], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
    float v175 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v170 + 116), (unsigned __int8 *)&STACK[0x328], v174);
    uint64_t v176 = v170 + 60;
    v170 += 108;
    *(float *)&STACK[0x594] = v175;
    uint64_t v177 = 0;
    v178 = (_WORD *)(v171 + 1172);
    *(float *)&STACK[0x598] = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v176, v170, (unsigned __int8 *)&STACK[0x328]);
    unint64_t v179 = STACK[0x4FF8];
    *(double *)&STACK[0x5A0] = (double)*(int *)(v81 + 88 * v169 + 112) * 0.0000000596046448 + (double)*(int *)v170;
    STACK[0x5A8] = v179;
    uint64_t v180 = v176 + 9;
    do
    {
      if (*(unsigned __int8 *)(v180 + v177) == 255) {
        char v181 = -1;
      }
      else {
        char v181 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 112))(*(void *)(v81 + 27960));
      }
      *((unsigned char *)&STACK[0x588] + v177++ + 40) = v181;
    }
    while (v177 != 5);
    LOBYTE(STACK[0x590]) = 1;
    LOBYTE(STACK[0x5B8]) = 1;
    LOWORD(STACK[0x5C4]) = *v178;
    v182 = (int32x2_t *)(v81 + 840 * v169);
    unint64_t v183 = (unint64_t)vcvt_f32_s32(v182[120]);
    STACK[0x5BC] = v183;
    LOBYTE(STACK[0x5D0]) = 0;
    LODWORD(v183) = v182[147].i32[0];
    *(double *)&STACK[0x5F0] = (double)v183 * 0.0000000298023224;
    *(double *)&STACK[0x5E8] = BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhiDotToHz((BlueFin::GlMeSrdAsicUnitConverter *)v182[147].u32[1], v168);
    *(double *)&unint64_t v184 = BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhi2DotToHzPerSec((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v81 + 840 * v169 + 1764), v168);
    STACK[0x5F8] = v184;
    uint64_t v185 = v81 + 840 * v169;
    *(float *)&STACK[0x604] = (float)((float)((float)v172 / (float)v173) / (float)((float)(v168 * (float)v321) / v167))
                            * (float)*(unsigned int *)(v185 + 1184);
    LOWORD(STACK[0x600]) = *(_WORD *)(v185 + 1582);
    LOBYTE(STACK[0x602]) = (*(unsigned char *)(v185 + 1188) & 1) == 0;
    LOBYTE(STACK[0x5E0]) = 1;
    LODWORD(v184) = *(_DWORD *)(v185 + 1192);
    *(double *)&STACK[0x628] = (double)v184 * 0.0000000298023224;
    *(double *)&STACK[0x620] = BlueFin::GlMeSrdAsicUnitConverter::EswFllOrPllPhiDotToHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v185 + 1196), v168);
    uint64_t v186 = v81 + 840 * v169;
    LOWORD(STACK[0x630]) = *(_WORD *)(v186 + 1580);
    int v187 = *(unsigned __int16 *)(v186 + 1200);
    LOBYTE(STACK[0x632]) = (*(unsigned char *)(v186 + 1202) & 1) == 0;
    int v188 = *(_DWORD *)(v186 + 1780);
    LODWORD(STACK[0x634]) = v187;
    LODWORD(STACK[0x638]) = v188;
    int v189 = *(_DWORD *)(v186 + 1784);
    LODWORD(STACK[0x63C]) = v189;
    LOBYTE(STACK[0x618]) = 1;
    LOBYTE(STACK[0x588]) = 1;
    uint64_t SignalId = BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x57C], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
    int v191 = STACK[0x580];
    uint64_t v192 = BlueFin::GlIqData::Svid2EnumGnssIQ(SignalId, (unsigned __int8 *)&STACK[0x57C], STACK[0x580]);
    if (v192 > 7) {
      int v193 = 0;
    }
    else {
      int v193 = *(_DWORD *)(v81 + 4 * v192 + 28132);
    }
    uint64_t v194 = BlueFin::GlIqData::Svid2EnumGnssIQ(v192, (unsigned __int8 *)&STACK[0x57C], v191);
    if (v194 > 7) {
      int v195 = 0;
    }
    else {
      int v195 = *(_DWORD *)(v81 + 4 * v194 + 28164);
    }
    unsigned int v196 = BlueFin::GlIqData::Svid2EnumGnssIQ(v194, (unsigned __int8 *)&STACK[0x57C], v191);
    if (v196 <= 7)
    {
      uint64_t v197 = v81 + 4 * v196 + 28128;
      *(_DWORD *)(v197 + 4) = v193 + v188;
      *(_DWORD *)(v197 + 36) = v195 + v189;
      *(unsigned char *)(v81 + 28128) = 1;
    }
    LOBYTE(STACK[0x4FB8]) = 0;
    LOBYTE(STACK[0x524E]) = 0;
    LOWORD(STACK[0x5258]) = -1;
    LODWORD(STACK[0x4FBA]) = -1;
    LODWORD(STACK[0x5140]) = -16777216;
    LOBYTE(STACK[0x5144]) = -1;
    LODWORD(STACK[0x5148]) = -1;
    LOWORD(STACK[0x524C]) = -1;
    STACK[0x5250] = -1;
    *(_OWORD *)&STACK[0x4FC0] = 0u;
    *(_OWORD *)&STACK[0x4FD0] = 0u;
    *(_OWORD *)&STACK[0x4FE0] = 0u;
    *(_OWORD *)&STACK[0x4FF0] = 0u;
    *(_OWORD *)&STACK[0x5000] = 0u;
    *(_OWORD *)&STACK[0x5010] = 0u;
    *(_OWORD *)&STACK[0x5020] = 0u;
    *(_OWORD *)&STACK[0x5030] = 0u;
    *(_OWORD *)&STACK[0x5040] = 0u;
    *(_OWORD *)&STACK[0x5050] = 0u;
    *(_OWORD *)&STACK[0x5060] = 0u;
    *(_OWORD *)&STACK[0x5070] = 0u;
    *(_OWORD *)&STACK[0x5080] = 0u;
    *(_OWORD *)&STACK[0x5090] = 0u;
    *(_OWORD *)&STACK[0x50A0] = 0u;
    *(_OWORD *)&STACK[0x50B0] = 0u;
    *(_OWORD *)&STACK[0x522C] = 0u;
    *(_OWORD *)&STACK[0x523C] = 0u;
    *(_OWORD *)&STACK[0x520C] = 0u;
    *(_OWORD *)&STACK[0x521C] = 0u;
    *(_OWORD *)&STACK[0x51EC] = 0u;
    *(_OWORD *)&STACK[0x51FC] = 0u;
    *(_OWORD *)&STACK[0x51CC] = 0u;
    *(_OWORD *)&STACK[0x51DC] = 0u;
    *(_OWORD *)&STACK[0x51AC] = 0u;
    *(_OWORD *)&STACK[0x51BC] = 0u;
    *(_OWORD *)&STACK[0x518C] = 0u;
    *(_OWORD *)&STACK[0x519C] = 0u;
    *(_OWORD *)&STACK[0x516C] = 0u;
    *(_OWORD *)&STACK[0x517C] = 0u;
    *(_OWORD *)&STACK[0x514C] = 0u;
    *(_OWORD *)&STACK[0x515C] = 0u;
    LOBYTE(STACK[0x524F]) = 0;
    BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x328], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
    uint64_t v198 = LOBYTE(STACK[0x328]);
    BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x328], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
    int v199 = STACK[0x32C];
    LODWORD(STACK[0x578]) = 0;
    LOWORD(STACK[0x4BC]) = 0;
    LOBYTE(STACK[0x4BE]) = 0;
    STACK[0x4C0] = 0x100000000;
    LOWORD(STACK[0x4C8]) = 1281;
    LOWORD(STACK[0x4EC]) = 0;
    LOBYTE(STACK[0x4EE]) = 0;
    STACK[0x4F0] = 0x200000000;
    LOWORD(STACK[0x4F8]) = 1281;
    LOWORD(STACK[0x51C]) = 0;
    LOBYTE(STACK[0x51E]) = 0;
    STACK[0x520] = 0x300000000;
    LOWORD(STACK[0x528]) = 1281;
    LOWORD(STACK[0x54C]) = -1;
    LOBYTE(STACK[0x54E]) = 0;
    LOBYTE(STACK[0x550]) = 0;
    LODWORD(STACK[0x554]) = 0;
    LOWORD(STACK[0x558]) = 575;
    STACK[0x564] = 0;
    STACK[0x55C] = 0;
    STACK[0x56C] = 0;
    LOBYTE(STACK[0x4B8]) = 0;
    LOWORD(STACK[0x3FC]) = 0;
    LOBYTE(STACK[0x3FE]) = 0;
    STACK[0x400] = 0x100000001;
    LOWORD(STACK[0x408]) = 1281;
    LOWORD(STACK[0x42C]) = 0;
    LOBYTE(STACK[0x42E]) = 0;
    STACK[0x430] = 0x200000001;
    LOWORD(STACK[0x438]) = 1281;
    LOWORD(STACK[0x45C]) = 0;
    LOBYTE(STACK[0x45E]) = 0;
    STACK[0x460] = 0x300000001;
    LOWORD(STACK[0x468]) = 1281;
    LOWORD(STACK[0x48C]) = -1;
    LOBYTE(STACK[0x48E]) = 0;
    LOBYTE(STACK[0x490]) = 0;
    LODWORD(STACK[0x494]) = 0;
    LOWORD(STACK[0x498]) = 575;
    STACK[0x4A4] = 0;
    STACK[0x49C] = 0;
    STACK[0x4AC] = 0;
    LOBYTE(STACK[0x3F8]) = 0;
    if (*(unsigned char *)(v80 + 1752) == 2)
    {
      uint64_t v200 = 0;
      while (*(_DWORD *)((char *)&STACK[0x654] + v200))
      {
        v200 += 4;
        if (v200 == 16) {
          goto LABEL_68;
        }
      }
      *(_DWORD *)((char *)&STACK[0x650] + v200 + 4) = 3;
    }
LABEL_68:
    LOBYTE(STACK[0x328]) = 0;
    STACK[0x330] = 0x7FEFFFFFFFFFFFFFLL;
    LODWORD(STACK[0x338]) = 2139095039;
    LOBYTE(STACK[0x33C]) = 0;
    STACK[0x340] = 0x7FEFFFFFFFFFFFFFLL;
    LODWORD(STACK[0x348]) = 2139095039;
    int64x2_t v201 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(int64x2_t *)&STACK[0x350] = v201;
    STACK[0x360] = 0x7FEFFFFFFFFFFFFFLL;
    int32x2_t v202 = vdup_n_s32(0x7F7FFFFFu);
    STACK[0x368] = (unint64_t)v202;
    LODWORD(STACK[0x370]) = 0;
    *(int64x2_t *)&STACK[0x378] = v201;
    STACK[0x388] = 0x7FEFFFFFFFFFFFFFLL;
    STACK[0x390] = (unint64_t)v202;
    LOWORD(STACK[0x398]) = 0;
    LOBYTE(STACK[0x39A]) = 0;
    LOWORD(STACK[0x3A0]) = 0;
    LOBYTE(STACK[0x3A2]) = 0;
    STACK[0x3A8] = 0x7FEFFFFFFFFFFFFFLL;
    LODWORD(STACK[0x3B0]) = 2139095039;
    STACK[0x3B8] = 0x7FEFFFFFFFFFFFFFLL;
    STACK[0x3C0] = 2139095039;
    LOBYTE(STACK[0x3C8]) = 0;
    STACK[0x3D0] = 0x7FEFFFFFFFFFFFFFLL;
    STACK[0x3D8] = -2155872257;
    STACK[0x3E0] = 0x7FEFFFFFFFFFFFFFLL;
    LODWORD(STACK[0x3E8]) = 2139095039;
    LOBYTE(STACK[0x3EC]) = 0;
    LODWORD(STACK[0x3F0]) = 0;
    LOBYTE(STACK[0x3F4]) = 0;
    LOBYTE(STACK[0x31C]) = v198;
    LODWORD(STACK[0x320]) = v199;
    LOWORD(STACK[0x324]) = 575;
    if ((v198 + 67) >= 0x44u && v199 != -1)
    {
      uint64_t v203 = BlueFin::GlSvId::s_aucSvId2gnss[v198];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v199 - v199 + v203] == 255) {
        LODWORD(STACK[0x320]) = -1;
      }
      else {
        LOWORD(STACK[0x324]) = BlueFin::GlSignalId::s_ausGnss2signalId[v203]
      }
                             + v198
                             - BlueFin::GlSvId::s_aucGnss2minSvId[v203]
                             + v199 * BlueFin::GlSvId::s_aucGnss2numSvId[v203];
    }
    uint64_t v204 = *(void *)(v81 + 27960);
    uint64_t v205 = (*(uint64_t (**)(void))(**(void **)(v81 + 27968) + 16))(*(void *)(v81 + 27968));
    LOBYTE(STACK[0x308]) = v198;
    LODWORD(STACK[0x30C]) = STACK[0x320];
    LOWORD(STACK[0x310]) = STACK[0x324];
    BlueFin::GlMeSrdSatRptNoiseStats::GlMeSrdSatRptNoiseStats((uint64_t)&STACK[0x314], v204, v205, (uint64_t)&STACK[0x308]);
    BlueFin::GlMeSrdMPFResults::GlMeSrdMPFResults((BlueFin::GlMeSrdMPFResults *)&STACK[0x2B0]);
    uint64_t v206 = *(void *)(v81 + 27960);
    uint64_t v207 = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    v208 = (float *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v206 + 168))(v206, v207);
    unint64_t v209 = *(unsigned __int8 *)(v80 + 1752);
    unsigned __int8 v210 = *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960))
                    + 26);
    uint64_t v211 = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 136))(*(void *)(v81 + 27960));
    BlueFin::GlMeSrdEstCarrPrm::Run((uint64_t)&STACK[0x4D80], BlueFin::GlMeSrdConstants::m_stPhysConst, (uint64_t)&STACK[0x6B8], v208, v320, (uint64_t)&STACK[0x650], 0.0, (uint64_t)&STACK[0x64D], (float *)&STACK[0x314], (uint64_t)&STACK[0x578], 0, (v209 < 9) & (0x182u >> v209), 5u, 0, 1, v210, *(_WORD *)(v211 + 24), 0, *(unsigned __int16 *)(v211 + 24) >> 24,
      0,
      0,
      (uint64_t)&STACK[0x588],
      (uint64_t)&STACK[0x4FB8],
      (unsigned __int8 *)&STACK[0x31C],
      0,
      0,
      (uint64_t)&STACK[0x4B8],
      &STACK[0x3F8],
      0,
      (float *)&a35,
      (uint64_t)&STACK[0x2B0],
      (uint64_t)&a23,
      (uint64_t)&STACK[0x328]);
    uint64_t v212 = *(unsigned __int8 *)(v80 + 1752);
    if ((v212 > 8 || ((1 << v212) & 0x182) == 0) && !(LOBYTE(STACK[0x602]) | LOBYTE(STACK[0x632]))) {
      HIBYTE(a23) = 0;
    }
    v213 = (unsigned char *)(v81 + v212 + 28115);
    if (*v213)
    {
      --*v213;
      goto LABEL_90;
    }
    uint64_t v214 = BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x4FB8], (unsigned __int8 *)v81, v212);
    float v215 = *(float *)a37.i32;
    int v216 = STACK[0x4FBC];
    uint64_t v217 = BlueFin::GlIqData::Svid2EnumGnssIQ(v214, (unsigned __int8 *)&STACK[0x4FB8], STACK[0x4FBC]);
    float v218 = 0.0;
    if (v217 <= 7) {
      float v218 = (float)*(unsigned int *)(v81 + 4 * v217 + 28132);
    }
    unsigned int v219 = BlueFin::GlIqData::Svid2EnumGnssIQ(v217, (unsigned __int8 *)&STACK[0x4FB8], v216);
    float v220 = 0.0;
    if (v219 <= 7)
    {
      unsigned int v221 = *(_DWORD *)(v81 + 4 * v219 + 28164);
      if (v221) {
        float v220 = v218 / (float)v221;
      }
    }
    float v222 = (float)(__exp10f(v215 / 10.0) * 20.0) / 1000.0;
    float v223 = (float)((float)((float)((float)((float)(v222 * 2.0) + 1.0) - v220)
                         / (float)((float)(v220 + 1.0) * (float)(v222 + v222)))
                 * -4.0)
         + 1.0;
    GlCustomLog(23, "<FTPHN> Svid:%d,Signal Index:%s,CN0:%.2f,DbgArgSqrt:%.3f,AccumRatio:%.1f ", LOBYTE(STACK[0x4FB8]), BlueFin::GlSignalId::s_ausSignalIndex2str[v216], v215, v223, v220);
    if (v223 >= 0.0)
    {
      float v224 = (float)(1.0 - sqrtf(v223)) * 0.5;
      GlCustomLog(23, "var,%.4f,rho,%.2f,", v224, v222);
      if (v223 <= 1.0)
      {
        float v253 = sqrtf(v224) * 57.2957795;
        BOOL v254 = v253 >= 10.0;
        GlCustomLog(23, "StdDev:%.2f", v253);
        if (!v254)
        {
          v225 = ":P";
          goto LABEL_89;
        }
      }
      else
      {
        GlCustomLog(23, "Unique Error: value,");
      }
    }
    else
    {
      GlCustomLog(23, "variance cannot be computed,");
    }
    v225 = ":NP";
LABEL_89:
    GlCustomLog(23, "%s\n", v225);
    goto LABEL_90;
  }
  unsigned __int8 v133 = *(unsigned char *)(v80 + 1752);
  uint64_t v134 = v81 + 88 * v133;
  uint64_t v135 = v134 + 60;
  LOBYTE(STACK[0x328]) = 1;
  LODWORD(STACK[0x32C]) = 2;
  uint64_t v136 = v134 + 108;
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x4FB8], (unsigned __int8 *)v81, v133);
  *(float *)&STACK[0x330] = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v135, v136, (unsigned __int8 *)&STACK[0x4FB8]);
  LOBYTE(STACK[0x4FB8]) = 0;
  LODWORD(STACK[0x4FBC]) = 0;
  LOBYTE(STACK[0x4FC0]) = 0;
  LODWORD(STACK[0x4FC4]) = 0;
  LOWORD(STACK[0x4FC8]) = 575;
  LODWORD(STACK[0x4FCC]) = 0;
  LOWORD(STACK[0x4FD0]) = 0;
  *(_OWORD *)&STACK[0x4FD8] = 0u;
  *(_OWORD *)&STACK[0x4FE8] = 0u;
  *(_OWORD *)&STACK[0x4FF8] = 0u;
  BlueFin::GlMeSrdTestMgrCwReceiver::BuildAcqWindowMsmtInfo(v81, (uint64_t)&STACK[0x4FB8], v80, 1);
  uint64_t v137 = *(unsigned __int8 *)(v81 + 88 * *(unsigned __int8 *)(v80 + 1752) + 68);
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)&STACK[0x588], (unsigned __int8 *)v81, *(unsigned char *)(v80 + 1752));
  LODWORD(v135) = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 224))(*(void *)(v81 + 27960));
  uint64_t v138 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v81 + 27960) + 248))(*(void *)(v81 + 27960), v137);
  v139.n128_f64[0] = BlueFin::GlMeSrdEstCarrPrm::Run((uint64_t)&STACK[0x4D80], (int)BlueFin::GlMeSrdConstants::m_stPhysConst, v135, v138, (int)&STACK[0x4B8], (uint64_t)&STACK[0x328], (unsigned __int8 *)&STACK[0x588], 0, *(double *)&STACK[0x4FF8] * 1000.0, (BlueFin::GlMeSrdCarrPrmResults *)&a23);
LABEL_90:
  if (a35 && ((v139.n128_u32[0] = a37.i32[0], *(float *)a37.i32 >= 22.0) || v322))
  {
    char v227 = 0;
    a80 |= 0x40002u;
    *(_DWORD *)(STACK[0x4D60] + 12) |= 0x4000u;
    int v226 = 1;
  }
  else
  {
    int v226 = 0;
    a35 = 0;
    char v227 = 1;
  }
  uint64_t v228 = v81 + 26976;
  if ((_BYTE)a23)
  {
    a80 |= 0x40u;
    *(_DWORD *)(STACK[0x4D60] + 12) |= 0x10000u;
  }
  a81 = 0;
  a82 = 0;
  int v229 = *(_DWORD *)(v81 + 27244);
  if ((v229 & 2) == 0 || (~v229 & 0x60) != 0 && (v229 & 0xC000) == 0) {
    goto LABEL_117;
  }
  if (!*(unsigned char *)(v81 + 28089)) {
    char v227 = 1;
  }
  if ((v227 & 1) == 0 && (v322 & 1) == 0)
  {
    unsigned int v230 = *(unsigned __int8 *)(v80 + 1752);
    if ((*(unsigned char *)(v81 + 88 * *(unsigned __int8 *)(v80 + 1752) + 68) & 0xFu) >= 3)
    {
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2049, "GetTrkMode", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 2049, "0");
    }
    if (v230 >= 9 || ((0x19Fu >> v230) & 1) == 0)
    {
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2081, "GetCnstl", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 2081, "0");
    }
    uint64_t v231 = (*(uint64_t (**)(void, void, __n128))(**(void **)(v81 + 27960) + 96))(*(void *)(v81 + 27960), dword_263BB1AC0[(char)v230], v139);
    (*(void (**)(void, uint64_t))(**(void **)(v81 + 27960) + 168))(*(void *)(v81 + 27960), v231);
    uint64_t v232 = *(unsigned __int8 *)(v80 + 1752);
    uint64_t v228 = v81 + 26976;
    if ((int)v231 + 2 <= *(unsigned __int8 *)(v81 + 88 * v232 + 69))
    {
      uint64_t v235 = 0;
      while (v235 != 4)
      {
        unsigned int v236 = *(unsigned __int8 *)(v81 + 88 * v232 + 70 + v235++);
        if ((int)v231 + 2 > v236)
        {
          if ((unint64_t)(v235 - 1) <= 3) {
            goto LABEL_108;
          }
          break;
        }
      }
    }
    else
    {
LABEL_108:
      v233 = (unsigned char *)(v81 + v232 + 28105);
      if (*v233)
      {
        unsigned char *v233 = 0;
        char v234 = 1;
        goto LABEL_116;
      }
    }
    if (!*(unsigned char *)(v81 + 28104))
    {
LABEL_117:
      int v226 = a35;
      goto LABEL_118;
    }
    char v234 = *(unsigned char *)(v81 + 28104) - 1;
LABEL_116:
    *(unsigned char *)(v81 + 28104) = v234;
    goto LABEL_117;
  }
LABEL_118:
  if (!v226 || *(unsigned char *)(v228 + 1128)) {
    goto LABEL_231;
  }
  int v237 = *(_DWORD *)(v228 + 268);
  unsigned int v238 = *(unsigned __int8 *)(v80 + 1752);
  if ((v237 & 2) != 0 && !*(unsigned char *)(v80 + 1752))
  {
    LOBYTE(STACK[0x6F2]) = 0;
    v139.n128_u64[0] = 0;
    double v239 = a24;
    if ((v237 & 0x800) == 0)
    {
      v139.n128_u64[0] = 0x41086A0000000000;
      double v239 = a24 + 200000.0;
      a24 = a24 + 200000.0;
    }
    double v240 = v239 / 1575420000.0;
    double v241 = *(float *)&a25 / (v139.n128_f64[0] + 1575420000.0);
    *(double *)&STACK[0x6E0] = v240;
    *(double *)&STACK[0x6E8] = v241;
    if (!*(unsigned char *)(v228 + 1113) && ((~v237 & 0x60) == 0 || (v237 & 0xC000) != 0))
    {
      v139.n128_f64[0] = v240 + v139.n128_f64[0] / -1575420000.0;
LABEL_128:
      *(void *)(v81 + 28096) = v139.n128_u64[0];
      goto LABEL_189;
    }
    goto LABEL_189;
  }
  if ((v237 & 0x20) != 0 && v238 <= 8 && ((1 << v238) & 0x182) != 0)
  {
    LOBYTE(STACK[0x6F2]) = v238;
    v245 = (unsigned __int8 *)(v228 + 266);
    if (v238 == 1) {
      v245 = (unsigned __int8 *)(v228 + 264);
    }
    if (v238 == 7) {
      v246 = (unsigned __int8 *)(v228 + 265);
    }
    else {
      v246 = v245;
    }
    uint64_t v247 = *v246;
    if ((v247 + 67) < 0x44u
      || (uint64_t v248 = BlueFin::GlSvId::s_aucSvId2gnss[v247],
          uint64_t v249 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v248],
          v249 == -1)
      || (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v248]
                          + v247
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v248]) >= 0x23Fu)
    {
      DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
    }
    double v250 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[v249];
    if (v248 == 2)
    {
      double v251 = (double)(char)(v247 - 59);
      if ((v247 - 52) >= 0xE) {
        double v251 = -8.0;
      }
      double v250 = v250 + v251 * 562500.0;
    }
    v139.n128_f64[0] = a24 / v250;
    double v252 = *(float *)&a25 / v250;
    STACK[0x6E0] = v139.n128_u64[0];
    *(double *)&STACK[0x6E8] = v252;
    if ((v237 & 2) != 0 && !*(unsigned char *)(v228 + 1113) && ((~v237 & 0x60) == 0 || (v237 & 0xC000) != 0)) {
      goto LABEL_128;
    }
    goto LABEL_189;
  }
  if ((v237 & 0x40) != 0 && v238 == 2)
  {
    LOBYTE(STACK[0x6F2]) = 2;
    double v242 = 0.0;
    double v243 = a24;
    if ((v237 & 0x1000) == 0)
    {
      double v242 = 200000.0;
      double v243 = a24 + 200000.0;
      a24 = a24 + 200000.0;
    }
    LOBYTE(STACK[0x4FB8]) = 76;
    LODWORD(STACK[0x4FBC]) = 0;
    LOWORD(STACK[0x4FC0]) = 201;
    double v244 = v243 / 1561098000.0;
    v139.n128_f64[0] = *(float *)&a25 / (v242 + 1561098000.0);
    *(double *)&STACK[0x6E0] = v244;
    STACK[0x6E8] = v139.n128_u64[0];
    if ((v237 & 2) == 0 || *(unsigned char *)(v228 + 1113) || (~v237 & 0x60) != 0 && (v237 & 0xC000) == 0) {
      goto LABEL_189;
    }
    v139.n128_f64[0] = v244 - v242 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
    goto LABEL_139;
  }
  if ((v237 & 0x4000) == 0 || v238 != 3)
  {
    if ((v237 & 0x8000) != 0 && v238 == 4)
    {
      LOBYTE(STACK[0x6F2]) = 4;
      LOBYTE(STACK[0x4FB8]) = -117;
      LODWORD(STACK[0x4FBC]) = 1;
      LOWORD(STACK[0x4FC0]) = 489;
      double v260 = a24;
      *(double *)&STACK[0x6E0] = v260 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
      LODWORD(v260) = a25;
      v139.n128_f64[0] = *(float *)&v260
                       / (BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]) + 0.0);
      STACK[0x6E8] = v139.n128_u64[0];
      if (!*(unsigned char *)(v228 + 1113))
      {
        int v261 = *(_DWORD *)(v228 + 268);
        if ((v261 & 2) != 0 && ((~v261 & 0x60) == 0 || (v261 & 0xC000) != 0))
        {
          double v262 = *(double *)&STACK[0x6E0];
          v139.n128_f64[0] = v262 + -0.0 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
          goto LABEL_128;
        }
      }
      goto LABEL_189;
    }
    if (v238 != 5)
    {
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 987, "ProcessMsmts", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 987, "0");
    }
    LOBYTE(STACK[0x4FB8]) = -81;
    LODWORD(STACK[0x4FBC]) = 0;
    LOWORD(STACK[0x4FC0]) = 561;
    if ((v237 & 0x200000) != 0)
    {
      LOBYTE(STACK[0x6F2]) = 5;
      double v264 = a24;
      *(double *)&STACK[0x6E0] = v264 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
      LODWORD(v264) = a25;
      v139.n128_f64[0] = *(float *)&v264 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
      STACK[0x6E8] = v139.n128_u64[0];
      uint64_t v228 = v81 + 26976;
      if (!*(unsigned char *)(v81 + 28089) && HIBYTE(a23))
      {
        v139.n128_u64[0] = STACK[0x6E0];
        goto LABEL_128;
      }
      goto LABEL_189;
    }
    if (*(unsigned char *)(v228 + 1113) || !HIBYTE(a23))
    {
      if (!*(unsigned char *)(v228 + 1113)) {
        goto LABEL_189;
      }
      uint64_t v265 = *(void *)(v81 + 32);
      if (!v265) {
        goto LABEL_189;
      }
      (*(void (**)(void, uint64_t, __n128))(**(void **)(v265 + 424) + 80))(*(void *)(v265 + 424), 5, v139);
LABEL_140:
      uint64_t v228 = v81 + 26976;
      goto LABEL_189;
    }
    double v263 = a24;
    v139.n128_f64[0] = v263 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
LABEL_139:
    *(void *)(v81 + 28096) = v139.n128_u64[0];
    goto LABEL_140;
  }
  LOBYTE(STACK[0x6F2]) = 3;
  double v255 = 0.0;
  double v256 = a24;
  if ((v237 & 0x100000) == 0)
  {
    double v255 = 1000000.0;
    double v256 = a24 + 1000000.0;
    a24 = a24 + 1000000.0;
  }
  LOBYTE(STACK[0x4FB8]) = 1;
  LODWORD(STACK[0x4FBC]) = 2;
  LOWORD(STACK[0x4FC0]) = 64;
  *(double *)&STACK[0x6E0] = v256 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
  float v257 = *(float *)&a25;
  v139.n128_f64[0] = v257 / (v255 + BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]));
  STACK[0x6E8] = v139.n128_u64[0];
  if (!*(unsigned char *)(v228 + 1113))
  {
    int v258 = *(_DWORD *)(v228 + 268);
    if ((v258 & 2) != 0 && ((~v258 & 0x60) == 0 || (v258 & 0xC000) != 0))
    {
      double v259 = *(double *)&STACK[0x6E0];
      v139.n128_f64[0] = v259 - v255 / BlueFin::GlSignalId::GetRfCarrierFrqHz((BlueFin::GlSignalId *)&STACK[0x4FB8]);
      goto LABEL_128;
    }
  }
LABEL_189:
  if (!HIBYTE(a23))
  {
    __n128 v139 = (__n128)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(__n128 *)&STACK[0x6E0] = v139;
  }
  if ((v322 & 1) == 0)
  {
    uint64_t v266 = *(unsigned __int8 *)(v80 + 1752);
    *((unsigned char *)&STACK[0x6D8] + v266 + 27) = 1;
    *(unsigned char *)(v81 + v266 + 27331) = 1;
  }
  char v267 = 1;
  uint64_t v268 = 10;
  v269 = (unsigned char *)v228;
  do
  {
    if (*v269) {
      v267 &= v269[355] != 0;
    }
    ++v269;
    --v268;
  }
  while (v268);
  LOBYTE(STACK[0x6F0]) = v267 & 1;
  LOBYTE(STACK[0x6F1]) = 1;
  *(unsigned char *)(v81 + *(unsigned __int8 *)(v80 + 1752) + 27857) = 0;
  int v270 = *(_DWORD *)(v228 + 268);
  if ((v270 & 0x62) == 0)
  {
    v139.n128_u32[0] = a37.i32[0];
    goto LABEL_214;
  }
  v139.n128_u32[0] = a37.i32[0];
  if (!*(unsigned char *)(v228 + 273)) {
    goto LABEL_214;
  }
  v139.n128_f64[0] = *(float *)a37.i32;
  uint64_t v271 = *(unsigned __int8 *)(v80 + 1752);
  v272 = (double *)((char *)&BlueFin::GlMeSrdTestMgrCwReceiver::m_Calibration + 8 * v271);
  if (*v272 >= *(float *)a37.i32)
  {
    double v274 = v272[90];
    if (v274 <= v139.n128_f64[0])
    {
      uint64_t v280 = 9;
      while (1)
      {
        double v281 = v272[v280 - 3];
        if (v281 <= v139.n128_f64[0])
        {
          double v282 = v272[v280 - 9];
          if (v282 >= v139.n128_f64[0]) {
            break;
          }
        }
        v280 += 6;
        if (v280 == 99)
        {
          double v273 = 0.0;
          goto LABEL_213;
        }
      }
      double v273 = 0.0;
      if (vabdd_f64(v281, v282) < 0.000000001) {
        goto LABEL_213;
      }
      v283 = &v272[v280];
      double v284 = *(v283 - 6);
      double v278 = (*v283 - v284) / (v281 - v282);
      double v279 = v284 - v278 * v282;
    }
    else
    {
      v275 = (double *)((char *)&BlueFin::GlMeSrdTestMgrCwReceiver::m_Calibration + 8 * v271);
      double v276 = v275[84];
      double v273 = 0.0;
      if (vabdd_f64(v274, v276) < 0.000000001) {
        goto LABEL_213;
      }
      double v277 = v275[87];
      double v278 = (v275[93] - v277) / (v274 - v276);
      double v279 = v277 - v278 * v276;
    }
    double v273 = v279 + v278 * v139.n128_f64[0];
    goto LABEL_213;
  }
  double v273 = v272[3];
LABEL_213:
  v139.n128_f32[0] = v273;
  a37.i32[0] = v139.n128_u32[0];
LABEL_214:
  *(double *)&STACK[0x6D8] = v139.n128_f32[0] + -174.0;
  *(unsigned char *)(v228 + 880) = 1;
  a75 = v139.n128_f32[0] + -174.0;
  a76 = v139.n128_u32[0];
  *(_DWORD *)(STACK[0x4D60] + 108) = v139.n128_u32[0];
  int v285 = *(unsigned __int8 *)(v80 + 1752);
  if ((v270 & 0x40) != 0 && v285 == 2)
  {
    if (*(unsigned char *)(v228 + 1112))
    {
      STACK[0x6D8] = 0xC05F000000000000;
      LOBYTE(STACK[0x6F5]) = 0;
      a35 = 0;
      *(unsigned char *)(v228 + 883) = 10;
      int v285 = *(unsigned __int8 *)(v80 + 1752);
    }
    else
    {
      int v285 = 2;
    }
  }
  BOOL v287 = (v270 & 0x200000) == 0 && v285 == 5;
  if ((v322 & 1) == 0 && !v287)
  {
    BlueFin::sCwResults::operator=(v81 + 27304, (uint64_t)&STACK[0x6D8]);
    uint64_t v288 = *(void *)(v81 + 32);
    if (v288)
    {
      BlueFin::GlMeSrdCtrlSm::PostCwResults(*(BlueFin::GlMeSrdCtrlSm **)(v288 + 16));
    }
    else
    {
      uint64_t v289 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 40))(v81);
      (*(void (**)(void, void, void, void, double, double, double))(**(void **)(v81 + 28080) + 208))(*(void *)(v81 + 28080), *(unsigned __int8 *)(v289 + 25), *(unsigned __int8 *)(v289 + 24), *(unsigned __int8 *)(v289 + 26), *(double *)v289, *(double *)(v289 + 8), *(double *)(v289 + 16));
    }
    uint64_t v228 = v81 + 26976;
  }
LABEL_231:
  if (HIBYTE(a23)) {
    BOOL v290 = a35 == 0;
  }
  else {
    BOOL v290 = 1;
  }
  unsigned int v291 = *(_DWORD *)(v228 + 268);
  if (v290 && (v322 & 1) == 0)
  {
    ++*(unsigned char *)(v81 + 27857 + *(unsigned __int8 *)(v80 + 1752));
    uint64_t v292 = *(unsigned __int8 *)(v80 + 1752);
    if ((v291 & 0x2000000) != 0) {
      unsigned int v293 = 150;
    }
    else {
      unsigned int v293 = 5;
    }
    if (v293 < *(unsigned __int8 *)(v81 + 27857 + v292)
      && (!*(unsigned char *)(v228 + 1113) || v292 == 5 || !*(unsigned char *)(v80 + 1752)))
    {
      BlueFin::GlMeSrdTestMgrCwReceiver::Restart((BlueFin::GlMeSrdTestMgrCwReceiver *)v81, v80);
      *(unsigned char *)(v81 + *(unsigned __int8 *)(v80 + 1752) + 27857) = 0;
      uint64_t v228 = v81 + 26976;
    }
    if (!*(unsigned char *)(v228 + 1113))
    {
      unsigned int v291 = *(_DWORD *)(v228 + 268);
      if ((v291 & 2) == 0) {
        goto LABEL_253;
      }
      goto LABEL_255;
    }
    uint64_t v294 = *(unsigned __int8 *)(v80 + 1752);
    unsigned int v291 = *(_DWORD *)(v228 + 268);
    BOOL v295 = *(unsigned __int8 *)(v81 + v294 + 27857) < 3u || (*(_DWORD *)(v228 + 268) & 2) == 0;
    if (!v295 && ((~v291 & 0x60) == 0 || (v291 & 0xC000) != 0))
    {
      *(unsigned char *)(v81 + v294 + 28105) = 1;
      if ((v291 & 2) == 0) {
        goto LABEL_253;
      }
      goto LABEL_255;
    }
  }
  if ((v291 & 2) == 0)
  {
LABEL_253:
    LOBYTE(v296) = 0;
LABEL_258:
    unsigned int v297 = *(unsigned __int8 *)(v80 + 1752);
    BOOL v298 = v297 == 5;
    if ((v296 & 1) == 0 && v297 != 5) {
      goto LABEL_284;
    }
    goto LABEL_262;
  }
LABEL_255:
  if ((~v291 & 0x60) != 0 && (v291 & 0x4000) == 0)
  {
    int v296 = (v291 >> 15) & 1;
    goto LABEL_258;
  }
  unsigned int v297 = *(unsigned __int8 *)(v80 + 1752);
  BOOL v298 = v297 == 5;
LABEL_262:
  if (!*(unsigned char *)(v228 + 1113) && a35 && (v322 & 1) == 0)
  {
    *(unsigned char *)(v228 + 1113) = 1;
    if (v298) {
      *(unsigned char *)(v228 + 1114) = 1;
    }
    uint64_t v299 = 1 << v297;
    if ((v291 & 0x200000) == 0) {
      *(unsigned char *)(v81 + v297 + 28105) = 0;
    }
    uint64_t v300 = 0;
    int v301 = 0;
    do
    {
      if (*(unsigned char *)(v81 + 26976 + v300)) {
        int v302 = 1 << v300;
      }
      else {
        int v302 = 0;
      }
      v301 |= v302;
      ++v300;
    }
    while (v300 != 10);
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
      if (BlueFin::GlUtils::m_ucEnabled)
      {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x4F);
        }
      }
    }
    uint64_t v303 = 0;
    unint64_t v304 = v301 & ~v299;
    do
    {
      if ((v304 >> v303))
      {
        uint64_t v305 = *(void *)(v81 + 32);
        if (v305) {
          (*(void (**)(void, void, __n128))(**(void **)(v305 + 424) + 80))(*(void *)(v305 + 424), v303, v139);
        }
        *(unsigned char *)(v81 + v303 + 40) = 0;
        *(_DWORD *)(v81 + 26936 + 4 * v303) = 1;
        LOBYTE(STACK[0x5690]) = v303;
        LODWORD(STACK[0x4FB8]) = 0;
        BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent((BlueFin::GlMeSrdTestMgrCwReceiver *)v81);
      }
      ++v303;
    }
    while (v303 != 10);
  }
LABEL_284:
  if (a35) {
    BOOL v306 = a23 == 0;
  }
  else {
    BOOL v306 = 1;
  }
  if (!v306)
  {
    float v307 = *(double *)&STACK[0x6E0];
    float v308 = *(double *)&STACK[0x6E8];
    a74 = v307;
    a78 = v308;
    unint64_t v309 = STACK[0x4D60];
    *(float *)(v309 + 96) = v307;
    *(float *)(v309 + 100) = v308;
  }
  if (v322)
  {
    unsigned int v310 = *(unsigned __int8 *)(v80 + 1752);
    unint64_t v311 = *(char *)(v81 + 1740 * *(unsigned __int8 *)(v80 + 1752) + 9537);
    if (v311 <= 2) {
      LODWORD(STACK[0x29C]) = dword_263BB1AE4[v311];
    }
    LOBYTE(STACK[0x2A0]) = *(unsigned char *)(v81 + 88 * v310 + 68);
    a44 = 1;
    a45 = a37.i32[2];
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v81 + 27960) + 248))(*(void *)(v81 + 27960));
    a46 = *(_DWORD *)(result + 20);
  }
  else
  {
    LODWORD(STACK[0x29C]) = 10;
    LOBYTE(STACK[0x2A0]) = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    uint64_t v313 = 0;
    *(unsigned char *)(STACK[0x4D60] + 140) = BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(v81, *(unsigned char *)(v80 + 1752));
    a48 = 1;
    a55 = 4;
    do
    {
      uint64_t result = BlueFin::GlMeSrdTestMgrCwReceiver::GetGearId(v81, *(unsigned char *)(v80 + 1752), v313);
      if (result != 255)
      {
        uint64_t v314 = *(void *)(v81 + 27960);
        uint64_t v315 = BlueFin::GlMeSrdTestMgrCwReceiver::GetGearId(v81, *(unsigned char *)(v80 + 1752), v313);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v314 + 112))(v314, v315);
      }
      *((unsigned char *)&a53 + v313++) = result;
    }
    while (v313 != 5);
    a51 = DWORD1(a25);
  }
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      uint64_t result = (*((uint64_t (**)(void **, void, void))a70 + 3))(&a70, 0, 0);
      if (BlueFin::GlUtils::m_pInstance)
      {
        if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          uint64_t result = (*(uint64_t (**)(uint64_t *, void, void))(a39 + 24))(&a39, 0, 0);
        }
      }
    }
  }
  if ((v322 & 1) == 0) {
    return BlueFin::GlMeMeas::Serialize((uint64_t)&STACK[0x900], 0);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId(uint64_t result, unsigned __int8 *a2, char a3)
{
  if (a3)
  {
    int v3 = a2 + 27240;
    if (!a2[28125])
    {
      unsigned int v4 = 0xAFu;
      unsigned int v5 = 2u;
      unsigned int v6 = 0x4Cu;
      unsigned int v8 = 0x8Bu;
      switch(a3)
      {
        case 1:
          break;
        case 2:
          goto LABEL_8;
        case 3:
          goto LABEL_10;
        case 4:
          goto LABEL_13;
        case 7:
          int v3 = a2 + 27241;
          break;
        case 8:
          int v3 = a2 + 27242;
          break;
        default:
          goto LABEL_4;
      }
      unsigned int v4 = *v3;
LABEL_20:
      *(unsigned char *)uint64_t result = v4;
      *(_DWORD *)(result + 4) = 0;
      uint64_t v7 = (_DWORD *)(result + 4);
      *(_WORD *)(result + 8) = 575;
      result += 8;
      if ((v4 + 67) < 0x44u) {
        return result;
      }
      goto LABEL_21;
    }
    unsigned int v4 = 1u;
LABEL_4:
    if (a3 == 4)
    {
      unsigned int v8 = v4;
LABEL_13:
      *(unsigned char *)uint64_t result = v8;
      *(_DWORD *)(result + 4) = 1;
      uint64_t v11 = BlueFin::GlSvId::s_aucSvId2gnss[v8];
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v11 + 7] != 255)
      {
        __int16 v10 = BlueFin::GlSignalId::s_ausGnss2signalId[v11]
            + v8
            + BlueFin::GlSvId::s_aucGnss2numSvId[v11]
            - BlueFin::GlSvId::s_aucGnss2minSvId[v11];
        goto LABEL_15;
      }
    }
    else
    {
      unsigned int v5 = v4;
      if (a3 != 3) {
        goto LABEL_20;
      }
LABEL_10:
      *(unsigned char *)uint64_t result = v5;
      *(_DWORD *)(result + 4) = 2;
      uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
      *(_WORD *)(result + 8) = 575;
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v9 + 14] != 255)
      {
        __int16 v10 = BlueFin::GlSignalId::s_ausGnss2signalId[v9]
            + v5
            - BlueFin::GlSvId::s_aucGnss2minSvId[v9]
            + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v9];
LABEL_15:
        *(_WORD *)(result + 8) = v10;
        return result;
      }
    }
    *(_DWORD *)(result + 4) = -1;
    return result;
  }
  unsigned int v6 = 1;
LABEL_8:
  *(unsigned char *)uint64_t result = v6;
  *(_DWORD *)(result + 4) = 0;
  uint64_t v7 = (_DWORD *)(result + 4);
  *(_WORD *)(result + 8) = 575;
  result += 8;
  unsigned int v4 = v6;
LABEL_21:
  uint64_t v12 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v12] == 255) {
    *uint64_t v7 = -1;
  }
  else {
    *(_WORD *)uint64_t result = BlueFin::GlSignalId::s_ausGnss2signalId[v12]
  }
                     + v4
                     - BlueFin::GlSvId::s_aucGnss2minSvId[v12];
  return result;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::LastGearId(uint64_t a1, unsigned __int8 a2)
{
  if (*(_DWORD *)(a1 + 88 * a2 + 64) != 1)
  {
    unsigned int v6 = "m_stAcqWindow[stEvent.ucEventId].id.eng_type == TRACK_ENGINE_TYPE";
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 1293, "LastGearId", (char)"m_stAcqWindow[stEvent.ucEventId].id.eng_type == TRACK_ENGINE_TYPE");
    int v7 = 1293;
    goto LABEL_10;
  }
  uint64_t v2 = a1 + 88 * a2 + 68;
  unsigned int v3 = 4;
  do
  {
    uint64_t result = *(unsigned __int8 *)(v2 + v3 + 1);
    BOOL v5 = v3-- != 0;
  }
  while (v5 && result == 255);
  if (result == 255)
  {
    unsigned int v6 = "ucRet != 0xFF";
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 1300, "LastGearId", (char)"ucRet != 0xFF");
    int v7 = 1300;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", v7, v6);
  }
  return result;
}

uint64_t BlueFin::GlMeSrdTestMgrCwReceiver::GetGearId(uint64_t a1, unsigned __int8 a2, unsigned int a3)
{
  uint64_t v3 = a1 + 88 * a2;
  if (*(_DWORD *)(v3 + 64) != 1)
  {
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 1307, "GetGearId", (char)"m_stAcqWindow[stEvent.ucEventId].id.eng_type == TRACK_ENGINE_TYPE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", 1307, "m_stAcqWindow[stEvent.ucEventId].id.eng_type == TRACK_ENGINE_TYPE");
  }
  return *(unsigned __int8 *)(v3 + 60 + a3 + 9);
}

void BlueFin::GlMeSrdTestMgrCwReceiver::BuildAcqWindowMsmtInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)v66, (unsigned __int8 *)a1, *(unsigned char *)(a3 + 1752));
  unsigned int v8 = *(unsigned __int8 *)(a3 + 1752);
  uint64_t v9 = a1 + 88 * *(unsigned __int8 *)(a3 + 1752) + 60;
  *(unsigned char *)a2 = 1;
  __int16 v10 = (unsigned __int8 *)(a2 + 8);
  if (a4)
  {
    *(_DWORD *)(a2 + 4) = 1;
    if (v10 != v66)
    {
      *(unsigned char *)(a2 + 8) = v66[0];
      *(_DWORD *)(a2 + 12) = v67;
      *(_WORD *)(a2 + 16) = v68;
    }
    uint64_t v11 = a1 + 88 * v8;
    float v12 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v9, v11 + 108, v66);
    *(double *)(a2 + 56) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)v66, v12, v13);
    if (*(_DWORD *)(a1 + 27256) <= 1u) {
      int v14 = 1;
    }
    else {
      int v14 = *(_DWORD *)(a1 + 27256);
    }
    *(double *)(a2 + 64) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(v11 + 80), v66, v14)* 0.001;
    *(double *)(a2 + 64) = *(double *)(a2 + 64)
                         - (*(float (**)(void, unsigned __int8 *))(**(void **)(a1 + 27960) + 56))(*(void *)(a1 + 27960), v66);
    double InterSignalBiasInMs = BlueFin::GlSignalId::GetInterSignalBiasInMs(v66, *(void *)(a1 + 27968));
    double v16 = *(double *)(a2 + 64);
    double v17 = v16 - InterSignalBiasInMs * 0.001;
    *(double *)(a2 + 64) = v17;
    *(double *)(a2 + 64) = BlueFin::GlMeSrdAsicUnitConverter::Esw16thOr20thChipsToSecs((BlueFin::GlMeSrdAsicUnitConverter *)*(char *)(a1 + 1740 * v8 + 9545), v66, v18, v17, v16, v19)+ *(double *)(a2 + 64);
    uint64_t v20 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 27960) + 248))(*(void *)(a1 + 27960), *(unsigned __int8 *)(v9 + 8));
    LOWORD(v21) = *(_WORD *)(v9 + 16);
    double v22 = *(double *)(a2 + 56);
    *(double *)(a2 + 64) = *(double *)(a2 + 64) + (1.0 - v22) * (float)(*(float *)(v20 + 4) * (float)v21);
    if (v68 < 0x23Fu)
    {
      uint64_t v23 = BlueFin::GlSvId::s_aucSvId2gnss[v66[0]];
      if (BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v67 - v67 + v23])
      {
        unsigned int v24 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * v67 + v23];
        if (v24)
        {
          LOWORD(v22) = *(_WORD *)(v11 + 102);
          *(double *)(a2 + 72) = (((double)*(unint64_t *)&v22 * 0.0000152587891
                                 + (double)(*(_DWORD *)(v11 + 92) & 0xF))
                                * 0.0625
                                + (double)(*(_DWORD *)(v11 + 92) >> 4))
                               * ((double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v67 - v67 + v23]
                                * 0.001)
                               / (double)v24;
          *(_DWORD *)(a2 + 20) = 0;
          *(void *)(a2 + 40) = 0;
          *(void *)(a2 + 48) = 0;
          *(void *)(a2 + 32) = 0;
          return;
        }
        goto LABEL_52;
      }
LABEL_51:
      int v64 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      int v65 = 685;
      goto LABEL_53;
    }
LABEL_50:
    int v64 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v65 = 678;
    goto LABEL_53;
  }
  *(_DWORD *)(a2 + 4) = 2;
  if (v10 != v66)
  {
    *(unsigned char *)(a2 + 8) = v66[0];
    *(_DWORD *)(a2 + 12) = v67;
    *(_WORD *)(a2 + 16) = v68;
  }
  uint64_t v25 = a1 + 88 * v8;
  if (*(_DWORD *)(a1 + 27256) <= 1u) {
    int v26 = 1;
  }
  else {
    int v26 = *(_DWORD *)(a1 + 27256);
  }
  *(double *)(a2 + 40) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToInitialUserTimeMs(v25 + 80, v66, v26) * 0.001;
  *(double *)(a2 + 40) = *(double *)(a2 + 40)
                       - (*(float (**)(void, unsigned __int8 *))(**(void **)(a1 + 27960) + 56))(*(void *)(a1 + 27960), v66);
  *(double *)(a2 + 40) = *(double *)(a2 + 40)
                       - BlueFin::GlSignalId::GetInterSignalBiasInMs(v66, *(void *)(a1 + 27968)) * 0.001;
  if (v68 >= 0x23Fu) {
    goto LABEL_50;
  }
  uint64_t v29 = BlueFin::GlSvId::s_aucSvId2gnss[v66[0]];
  unsigned int v30 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v67 - v67 + v29];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v67 - v67 + v29]) {
    goto LABEL_51;
  }
  unsigned int v31 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * v67 + v29];
  if (!v31) {
    goto LABEL_52;
  }
  unsigned int v32 = *(_DWORD *)(v25 + 88);
  LOWORD(v27) = *(_WORD *)(v25 + 100);
  LODWORD(v28) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
  *(double *)&unint64_t v33 = (double)v27 / (double)v28;
  double v34 = *(double *)&v33 + (double)(v32 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
  LOBYTE(v33) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  *(double *)(a2 + 48) = (v34 / (double)v33 + (double)(v32 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft))
                       * ((double)v30
                        * 0.001)
                       / (double)v31;
  if (*(_DWORD *)(a1 + 27256) <= 1u) {
    int v35 = 1;
  }
  else {
    int v35 = *(_DWORD *)(a1 + 27256);
  }
  *(double *)(a2 + 64) = BlueFin::GlMeSrdAsicUnitConverter::EswUtStructToFinalUserTimeMs((unsigned __int16 *)(v25 + 80), v66, v35)* 0.001;
  *(double *)(a2 + 64) = *(double *)(a2 + 64)
                       - (*(float (**)(void, unsigned __int8 *))(**(void **)(a1 + 27960) + 56))(*(void *)(a1 + 27960), v66);
  *(double *)(a2 + 64) = *(double *)(a2 + 64)
                       - BlueFin::GlSignalId::GetInterSignalBiasInMs(v66, *(void *)(a1 + 27968)) * 0.001;
  if (v68 >= 0x23Fu) {
    goto LABEL_50;
  }
  uint64_t v38 = BlueFin::GlSvId::s_aucSvId2gnss[v66[0]];
  unsigned int v39 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v67 - v67 + v38];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v67 - v67 + v38]) {
    goto LABEL_51;
  }
  unsigned int v40 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * v67 + v38];
  if (!v40)
  {
LABEL_52:
    int v64 = "ucChipsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
    int v65 = 784;
LABEL_53:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v65, v64);
  }
  uint64_t v41 = a1 + 88 * v8;
  unsigned int v42 = *(_DWORD *)(v41 + 92);
  LOWORD(v36) = *(_WORD *)(v41 + 102);
  LODWORD(v37) = BlueFin::GlMeSrdAsicUnitConverter::ulChnTmNcoLsbScale;
  *(double *)&unint64_t v43 = (double)v36 / (double)v37;
  double v44 = *(double *)&v43 + (double)(v42 & (unsigned __int16)BlueFin::GlMeSrdAsicUnitConverter::usChnTmNcoMsbMsk);
  LOBYTE(v43) = BlueFin::GlMeSrdAsicUnitConverter::ucSubChipResolution;
  *(double *)(a2 + 72) = (v44 / (double)v43 + (double)(v42 >> BlueFin::GlMeSrdAsicUnitConverter::ucChnTmNcoMsbSft))
                       * ((double)v39
                        * 0.001)
                       / (double)v40;
  BlueFin::GlMeSrdTestMgrCwReceiver::GetSignalId((uint64_t)v69, (unsigned __int8 *)a1, *(unsigned char *)(a3 + 1752));
  unsigned int v45 = *(unsigned __int8 *)(a3 + 1752);
  unsigned int v46 = *(_DWORD *)(a1 + 88 * v45 + 136);
  if (v46 == -1)
  {
    char EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)v69);
    if (v71 >= 0x23Fu) {
      goto LABEL_50;
    }
    char v49 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v70
                                                                - v70
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[v69[0]]];
    if (!v49) {
      goto LABEL_51;
    }
    if (v69[0] - 76 > 0x3E)
    {
      unsigned __int8 v51 = v49 * EpochPerSymbol;
    }
    else
    {
      if ((*(unsigned char *)(a1 + 88 * v45 + 68) & 0xF) != 0) {
        char EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit((BlueFin::GlSignalId *)v69);
      }
      else {
        char EpochPerBit = BlueFin::GlSignalId::GetEpochPerSymbol((BlueFin::GlSignalId *)v69);
      }
      if (v71 >= 0x23Fu) {
        goto LABEL_50;
      }
      char v52 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v70
                                                                  - v70
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[v69[0]]];
      if (!v52) {
        goto LABEL_51;
      }
      unsigned __int8 v51 = v52 * EpochPerBit;
    }
    double v47 = (double)v51 * 25.0;
  }
  else
  {
    double v47 = (double)v46;
  }
  double v54 = fmod(v47, 4294967300.0);
  if (v47 <= 4294967300.0) {
    double v54 = v47;
  }
  if (v54 < -4294967300.0) {
    double v54 = -fmod(-v54, 4294967300.0);
  }
  uint64_t v55 = 0;
  int v56 = 0;
  if (v54 < 0.0) {
    unsigned int v57 = --v54;
  }
  else {
    unsigned int v57 = v54;
  }
  *(_DWORD *)(a2 + 20) = v57;
  *(unsigned char *)(a2 + 24) = 0;
  do
  {
    if (*(unsigned __int8 *)(v9 + 9 + v55) != 255) {
      *(unsigned char *)(a2 + 24) = ++v56;
    }
    ++v55;
  }
  while (v55 != 5);
  *(unsigned char *)(a2 + 25) = (*(unsigned char *)(v9 + 14) & 0x10) != 0;
  uint64_t v58 = a1 + 88 * v8;
  uint64_t v59 = v58 + 108;
  float v60 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierNcoIncToCarrFreqInHz((BlueFin::GlMeSrdAsicUnitConverter *)*(unsigned int *)(v58 + 116), v66, v53);
  float v61 = BlueFin::GlMeSrdAsicUnitConverter::EswCarrierStructToFinalCarrFreqInHz(v9, v59, v66);
  *(double *)(a2 + 32) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)v66, v60, v62);
  *(double *)(a2 + 56) = BlueFin::GlMeSrdAsicUnitConverter::HzToPpu((BlueFin::GlMeSrdAsicUnitConverter *)v66, v61, v63);
}

void BlueFin::GlMeSrdTestMgrRpcSatEvtCW::gll_satevt_rpc_rm_event_report(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  LODWORD(v20[0]) = 2;
  if (a2)
  {
    double v16 = (char *)a3;
    uint64_t v18 = a2;
    do
    {
      if (v16[5] != 253)
      {
        v20[1] = (uint64_t)v16;
        char v62 = *v16;
        BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(*(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8), (uint64_t)v20, a9, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, a6, a7, a8, v19, v20[0], (uint64_t)v16,
          v20[2],
          v20[3],
          v20[4],
          v21,
          v22,
          v23,
          v24,
          v25,
          v26,
          v27,
          v28,
          v29,
          v30,
          v31,
          v32,
          v33,
          v34,
          v35,
          v36,
          v37,
          v38,
          v39,
          v40,
          v41,
          v42,
          v43,
          v44,
          v45,
          v46,
          v47,
          v48,
          v49,
          v50,
          v51,
          v52,
          v53,
          v54,
          v55,
          v56,
          v57,
          v58,
          v59,
          v60,
          v61);
      }
      v16 += 10;
      --v18;
    }
    while (v18);
  }
}

float BlueFin::GlMeCarpTestMgrRpcMiscCW::gll_misc_rpc_hrm_response(BlueFin::GlMeCarpTestMgrRpcMiscCW *this, int a2, int a3, BlueFin::GlMeSrdCtrlSm *a4, float result)
{
  uint64_t v6 = *((void *)this + 1);
  int v7 = *(_DWORD *)(v6 + 24);
  if ((v7 - 6) < 2) {
    return result;
  }
  unsigned int v8 = (_DWORD *)(v6 + 26936);
  if (v7 == 2)
  {
    if ((a2 - 9) < 2 || a2 == 4)
    {
      if (a3 > -1073691921)
      {
        switch(a3)
        {
          case 27:
            if (a4 >= 0x100)
            {
              uint64_t v28 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2184, "gll_misc_rpc_hrm_response", (char)"value == (value & 0x0FF)");
              int v29 = 2184;
              goto LABEL_95;
            }
            unsigned int v9 = (a4 & 7) + (a4 >> 3);
            BOOL v12 = v9 >= 0x10 || v9 >= 0xB || (a4 & 7u) >= 6 || a4 >= 0x2Eu;
            float v13 = (float)(3 * v9);
            if (v12) {
              float v13 = 255.0;
            }
            uint64_t result = -v13;
            *((float *)this + 11) = result;
            *(float *)(*(void *)(*(void *)(v6 + 16) + 200) + 180) = result;
            goto LABEL_59;
          case 28:
            goto LABEL_99;
          case 29:
            if (a4 >= 0x100)
            {
              uint64_t v28 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2191, "gll_misc_rpc_hrm_response", (char)"value == (value & 0x0FF)");
              int v29 = 2191;
              goto LABEL_95;
            }
            *((unsigned char *)this + 24) = 1;
            *((unsigned char *)this + 28) = (_BYTE)a4;
            goto LABEL_59;
          case 30:
            if (a4 >= 0x100)
            {
              uint64_t v28 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2197, "gll_misc_rpc_hrm_response", (char)"value == (value & 0x0FF)");
              int v29 = 2197;
              goto LABEL_95;
            }
            *((unsigned char *)this + 25) = 1;
            *((unsigned char *)this + 29) = (_BYTE)a4;
            goto LABEL_59;
          case 31:
            if (a4 >= 0x100)
            {
              uint64_t v28 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2203, "gll_misc_rpc_hrm_response", (char)"value == (value & 0x0FF)");
              int v29 = 2203;
              goto LABEL_95;
            }
            *((unsigned char *)this + 26) = 1;
            *((unsigned char *)this + 30) = (_BYTE)a4;
            goto LABEL_59;
          case 32:
            if (a4 >= 0x100)
            {
              uint64_t v28 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2209, "gll_misc_rpc_hrm_response", (char)"value == (value & 0x0FF)");
              int v29 = 2209;
              goto LABEL_95;
            }
            *((unsigned char *)this + 27) = 1;
            *((unsigned char *)this + 31) = (_BYTE)a4;
            break;
          default:
            if (a3 != -1073691920) {
              goto LABEL_99;
            }
            uint64_t result = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a4);
            *((float *)this + 10) = result;
            *(float *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 200) + 200) = result;
            goto LABEL_59;
        }
        goto LABEL_59;
      }
      switch(a3)
      {
        case -1073741736:
          if (*v8 != 5) {
            goto LABEL_59;
          }
          int v15 = *(_DWORD *)(v6 + 27260);
          if (v15 == -1)
          {
            *(_DWORD *)(v6 + 27260) = a4;
          }
          else if (v15 + 50 <= a4)
          {
            BlueFin::GlMeSrdTestMgrCwReceiver::RequestDump((BlueFin::GlMeSrdTestMgrCwReceiver *)v6);
            goto LABEL_59;
          }
          BlueFin::GlMeSrdTestMgrCwReceiver::PollMsCounter((BlueFin::GlMeSrdTestMgrCwReceiver *)v6);
LABEL_59:
          if (*((unsigned char *)this + 24) && *((unsigned char *)this + 25))
          {
            unsigned int v16 = *((unsigned __int8 *)this + 28);
            unsigned int v17 = (v16 & 7) + (v16 >> 3);
            BOOL v20 = ((*((unsigned char *)this + 28) & 7) + (*((unsigned char *)this + 28) >> 3) + *((unsigned char *)this + 29)) >= 0x10u
               || v17 >= 0xB
               || (v16 & 7) >= 6
               || v16 >= 0x2E;
            float v21 = (float)(3 * (v17 + *((unsigned char *)this + 29)));
            if (v20) {
              float v21 = 255.0;
            }
            uint64_t result = -v21;
            *((float *)this + 12) = result;
            *(float *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 200) + 188) = result;
            *((_WORD *)this + 12) = 0;
          }
          if (*((unsigned char *)this + 26) && *((unsigned char *)this + 27))
          {
            unsigned int v22 = *((unsigned __int8 *)this + 30);
            unsigned int v23 = (v22 & 7) + (v22 >> 3);
            BOOL v26 = ((*((unsigned char *)this + 30) & 7) + (*((unsigned char *)this + 30) >> 3) + *((unsigned char *)this + 31)) >= 0x10u
               || v23 >= 0xB
               || (v22 & 7) >= 6
               || v22 >= 0x2E;
            float v27 = (float)(3 * (v23 + *((unsigned char *)this + 31)));
            if (v26) {
              float v27 = 255.0;
            }
            uint64_t result = -v27;
            *((float *)this + 13) = result;
            *(float *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 200) + 196) = result;
            *((_WORD *)this + 13) = 0;
          }
          return result;
        case -1073692432:
          uint64_t result = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a4);
          *((float *)this + 8) = result;
          *(float *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 200) + 184) = result;
          goto LABEL_59;
        case -1073692176:
          uint64_t result = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a4);
          *((float *)this + 9) = result;
          *(float *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 200) + 192) = result;
          goto LABEL_59;
      }
LABEL_99:
      uint64_t v28 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2257, "gll_misc_rpc_hrm_response", (char)"0");
      int v29 = 2257;
    }
    else
    {
      uint64_t v28 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2284, "gll_misc_rpc_hrm_response", (char)"0");
      int v29 = 2284;
    }
LABEL_95:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", v29, v28);
  }
  if (v7 != 1)
  {
    uint64_t v28 = "0";
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2293, "gll_misc_rpc_hrm_response", (char)"0");
    int v29 = 2293;
    goto LABEL_95;
  }
  if (a2 != 4)
  {
    uint64_t v28 = "0";
    DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2174, "gll_misc_rpc_hrm_response", (char)"0");
    int v29 = 2174;
    goto LABEL_95;
  }
  if (a3 != 22)
  {
    if (a3 == 12319)
    {
      *((_DWORD *)this + 5) = a4;
    }
    else if (a3 == 12318)
    {
      *((_DWORD *)this + 4) = a4;
    }
    return result;
  }
  if (*v8 != 5) {
    return result;
  }
  int v14 = *(_DWORD *)(v6 + 27260);
  if (v14 == -1)
  {
    *(_DWORD *)(v6 + 27260) = a4;
  }
  else if (v14 + 50 <= a4)
  {
    BlueFin::GlMeSrdTestMgrCwReceiver::RequestDump((BlueFin::GlMeSrdTestMgrCwReceiver *)v6);
    return result;
  }

  BlueFin::GlMeSrdTestMgrCwReceiver::PollMsCounter((BlueFin::GlMeSrdTestMgrCwReceiver *)v6);
  return result;
}

uint64_t BlueFin::GlMeMinnowTestMgrRpcMiscCW::gll_misc_rpc_adc_capture_response(BlueFin::GlMeMinnowTestMgrRpcMiscCW *this, __int16 a2, __int16 a3, unsigned __int8 *a4)
{
  uint64_t v11 = &unk_270EBC480;
  BOOL v12 = 0;
  int v13 = 0;
  char v14 = 0;
  int v15 = 0;
  uint64_t v7 = *((void *)this + 1);
  int v8 = *(_DWORD *)(v7 + 27256);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v7 + 16) + 136) + 1192))(*(void *)(*(void *)(v7 + 16) + 136));
  char v10 = *(unsigned char *)(result + 1);
  BOOL v12 = a4;
  int v13 = v8;
  char v14 = v10;
  LOWORD(v15) = a2;
  HIWORD(v15) = a3;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (*((uint64_t (**)(void **, void, void))v11 + 3))(&v11, 0, 0);
    }
  }
  return result;
}

void BlueFin::GlMeSrdTestMgrRpcSatReportCW::gll_satrpt_rpc_acquisition_window(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  LODWORD(v18) = 3;
  long long v19 = *(_OWORD *)a3;
  *(_DWORD *)BOOL v20 = *(_DWORD *)(a3 + 16);
  *(void *)&v20[4] = *a4;
  *(_OWORD *)&v20[12] = *(_OWORD *)a5;
  *(_DWORD *)&v20[28] = *(_DWORD *)(a5 + 16);
  *(_OWORD *)float v21 = *a6;
  int16x8_t v16 = *(int16x8_t *)((char *)a6 + 12);
  *(int16x8_t *)&v21[12] = v16;
  char v57 = a2;
  if (a7)
  {
    *(void *)&v21[28] = *(void *)a7;
    *(_DWORD *)&v21[36] = *(_DWORD *)(a7 + 8);
  }
  BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(*(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8), (uint64_t)&v18, v16, a10, a11, a12, a13, a14, a15, a16, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8, v17, v18, v19,
    *((uint64_t *)&v19 + 1),
    *(uint64_t *)v20,
    *(uint64_t *)&v20[8],
    *(__int16 *)&v20[16],
    *(double *)&v20[24],
    *(long long *)v21,
    *(int *)&v21[16],
    v21[20],
    *(int64x2_t *)&v21[24],
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38,
    v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56);
}

void BlueFin::GlMeSrdTestMgrRpcSatReportCW::gll_satrpt_rpc_trk_msmt(uint64_t a1, char a2, uint64_t a3, uint64_t a4, _OWORD *a5, long long *a6, uint64_t a7, _DWORD *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, long long *a17, int16x8_t *a18, int *a19, uint64_t a20,long long *a21,uint64_t a22,int16x8_t *a23,int16x8_t *a24)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v24 = a5[11];
  *(_OWORD *)&v40[96] = a5[10];
  *(_OWORD *)&v40[112] = v24;
  *(_OWORD *)&v40[128] = a5[12];
  *(_OWORD *)&v40[140] = *(_OWORD *)((char *)a5 + 204);
  long long v25 = a5[7];
  *(_OWORD *)&v40[32] = a5[6];
  *(_OWORD *)&v40[48] = v25;
  long long v26 = a5[9];
  *(_OWORD *)&v40[64] = a5[8];
  *(_OWORD *)&v40[80] = v26;
  long long v27 = a5[3];
  *(_OWORD *)int v39 = a5[2];
  *(_OWORD *)&v39[16] = v27;
  long long v28 = a5[5];
  *(_OWORD *)uint64_t v40 = a5[4];
  *(_OWORD *)&v40[16] = v28;
  long long v29 = a5[1];
  *(_OWORD *)&v38[4] = *a5;
  LODWORD(v37) = 4;
  *(_OWORD *)&v38[20] = v29;
  long long v41 = *a6;
  uint64_t v42 = *(void *)a7;
  LODWORD(v43) = *(_DWORD *)(a7 + 8);
  if (a8) {
    HIDWORD(v43) = *a8;
  }
  long long v30 = a17[1];
  long long v44 = *a17;
  long long v45 = v30;
  int16x8_t v31 = *a18;
  int16x8_t v32 = a18[1];
  int16x8_t v46 = *a18;
  int16x8_t v47 = v32;
  int v50 = *a19;
  char v64 = a2;
  if (a21)
  {
    long long v33 = a21[5];
    long long v55 = a21[4];
    long long v56 = v33;
    uint64_t v57 = *((void *)a21 + 12);
    long long v34 = a21[1];
    long long v51 = *a21;
    long long v52 = v34;
    int16x8_t v32 = (int16x8_t)a21[2];
    int16x8_t v31 = (int16x8_t)a21[3];
    int16x8_t v54 = v31;
    int16x8_t v53 = v32;
  }
  if (a23)
  {
    int16x8_t v35 = a23[1];
    int16x8_t v58 = *a23;
    int16x8_t v59 = v35;
    int16x8_t v31 = a23[2];
    int16x8_t v32 = a23[3];
    int16x8_t v60 = v31;
    int16x8_t v61 = v32;
  }
  if (a24)
  {
    int16x8_t v31 = *a24;
    int16x8_t v32 = a24[1];
    int16x8_t v62 = *a24;
    int16x8_t v63 = v32;
  }
  BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(*(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8), (uint64_t)&v37, v31, *(double *)v32.i64, a11, a12, a13, a14, a15, a16, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)a8, v36, v37, *(uint64_t *)v38,
    *(uint64_t *)&v38[8],
    *(uint64_t *)&v38[16],
    *(uint64_t *)&v38[24],
    *(__int16 *)&v38[32],
    *(double *)&v39[4],
    *(long long *)&v39[12],
    *(int *)&v39[28],
    v40[0],
    *(int64x2_t *)&v40[4],
    *(int32x2_t *)&v40[20],
    *(uint64_t *)&v40[28],
    v40[36],
    *(uint64_t *)&v40[44],
    *(uint64_t *)&v40[52],
    *(uint64_t *)&v40[60],
    v40[68],
    *(int *)&v40[72],
    *(int32x4_t *)&v40[76],
    *(uint64_t *)&v40[92],
    *(uint64_t *)&v40[100],
    *(uint64_t *)&v40[108],
    *(uint64_t *)&v40[116],
    *(uint64_t *)&v40[124],
    *(uint64_t *)&v40[132],
    v40[140],
    *(__int32 *)&v40[144],
    *(int *)&v40[148],
    v41,
    SBYTE8(v41),
    SHIDWORD(v41),
    v42,
    SHIDWORD(v42),
    v43,
    v44,
    SDWORD2(v44),
    SHIDWORD(v44),
    v45,
    *((uint64_t *)&v45 + 1),
    v46.i64[0],
    v46.i64[1],
    v47.i64[0],
    v47.i64[1],
    v48,
    v49);
}

void BlueFin::GlMeSrdTestMgrRpcSatReportCW::gll_satrpt_rpc_sub_trk_msmt(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, int16x8_t *a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int16x8_t *a17, void *a18, uint64_t a19, _OWORD *a20,int *a21)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  long long v24 = a6[11];
  long long v98 = a6[10];
  long long v99 = v24;
  *(_OWORD *)BOOL v100 = a6[12];
  *(_OWORD *)&v100[3] = *(_OWORD *)((char *)a6 + 204);
  long long v25 = a6[7];
  long long v94 = a6[6];
  long long v95 = v25;
  long long v26 = a6[9];
  long long v96 = a6[8];
  long long v97 = v26;
  long long v27 = a6[3];
  long long v90 = a6[2];
  long long v91 = v27;
  long long v28 = a6[5];
  long long v92 = a6[4];
  long long v93 = v28;
  int16x8_t v29 = *((int16x8_t *)a6 + 1);
  int16x8_t v88 = *(int16x8_t *)a6;
  v87[0] = 4;
  int16x8_t v89 = v29;
  int16x8_t v30 = *a7;
  *(int16x8_t *)&v100[7] = *a7;
  uint64_t v101 = *(void *)a8;
  int v102 = *(_DWORD *)(a8 + 8);
  int v103 = *a21;
  char v106 = a2;
  if (a17)
  {
    int16x8_t v30 = *a17;
    int16x8_t v29 = a17[1];
    int16x8_t v104 = *a17;
    int16x8_t v105 = v29;
  }
  BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(*(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8), (uint64_t)v87, v30, *(double *)v29.i64, a11, a12, a13, a14, a15, a16, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, a8, v45, v47, v48,
    *((uint64_t *)&v48 + 1),
    *(uint64_t *)v49,
    *(uint64_t *)&v49[8],
    *(__int16 *)&v49[16],
    *(double *)&v49[24],
    *(long long *)v50,
    *(int *)&v50[16],
    v50[20],
    *(int64x2_t *)&v50[24],
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v77,
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85);
  LODWORD(v47) = 3;
  long long v48 = *(_OWORD *)a5;
  *(_DWORD *)uint64_t v49 = *(_DWORD *)(a5 + 16);
  *(void *)&v49[4] = *a18;
  *(_OWORD *)&v49[12] = *(_OWORD *)a19;
  *(_DWORD *)&v49[28] = *(_DWORD *)(a19 + 16);
  *(_OWORD *)int v50 = *a20;
  *(_OWORD *)&v50[12] = *(_OWORD *)((char *)a20 + 12);
  char v86 = a2;
  uint64_t v31 = *(void *)a21;
  *(_DWORD *)&v50[36] = a21[2];
  *(void *)&v50[28] = v31;
  BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(*(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8), (uint64_t)&v47, *(int16x8_t *)&v50[12], v38, v39, v40, v41, v42, v43, v44, v32, v33, v34, v35, v36, v37, v46, v47, v48,
    *((uint64_t *)&v48 + 1),
    *(uint64_t *)v49,
    *(uint64_t *)&v49[8],
    *(__int16 *)&v49[16],
    *(double *)&v49[24],
    *(long long *)v50,
    *(int *)&v50[16],
    v50[20],
    *(int64x2_t *)&v50[24],
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62,
    v63,
    v64,
    v65,
    v66,
    v67,
    v68,
    v69,
    v70,
    v71,
    v72,
    v73,
    v74,
    v75,
    v76,
    v77,
    v78,
    v79,
    v80,
    v81,
    v82,
    v83,
    v84,
    v85);
}

void BlueFin::GlMeSrdTestMgrRpcSatReportCW::gll_satrpt_rpc_noise(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int16x8_t *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  LODWORD(v19[0]) = 5;
  if (~a3 & 6) == 0 && (a3)
  {
    if (a6)
    {
      int16x8_t v16 = *(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8);
      if (*((unsigned char *)v16 + 26976))
      {
        if (!*((unsigned char *)v16 + 26977)
          && !*((unsigned char *)v16 + 26978)
          && !*((unsigned char *)v16 + 26979)
          && !(*((unsigned __int8 *)v16 + 26980) | a2))
        {
          int16x8_t v17 = *a6;
          char v61 = a2;
          BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(v16, (uint64_t)v19, v17, a10, a11, a12, a13, a14, a15, a16, a3, a4, a5, (uint64_t)a6, a7, a8, v18, v19[0], v17.i64[0],
            v17.i64[1],
            v19[3],
            v19[4],
            v20,
            v21,
            v22,
            v23,
            v24,
            v25,
            v26,
            v27,
            v28,
            v29,
            v30,
            v31,
            v32,
            v33,
            v34,
            v35,
            v36,
            v37,
            v38,
            v39,
            v40,
            v41,
            v42,
            v43,
            v44,
            v45,
            v46,
            v47,
            v48,
            v49,
            v50,
            v51,
            v52,
            v53,
            v54,
            v55,
            v56,
            v57,
            v58,
            v59,
            v60);
        }
      }
    }
  }
}

void BlueFin::GlMeSrdTestMgrRpcSatReportCW::gll_satrpt_rpc_search(uint64_t a1, char a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, __n128 a10, __n128 a11, double a12, double a13, double a14, double a15, double a16)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  LODWORD(v26) = 6;
  char v59 = a2;
  if (a3)
  {
    if (*a3 <= 2u)
    {
      *(void *)&v27[1] = *(void *)a3;
      *(_WORD *)&v27[9] = *((_WORD *)a3 + 4);
      unsigned int v16 = a3[3] + a3[4] - 1;
      if (v16 >= 0x11)
      {
        int v23 = "uiNsearchReportCnt <= _DIM(stEvent.uData.stSearchReport.satrpt_search)";
        DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2476, "gll_satrpt_rpc_search", (char)"uiNsearchReportCnt <= _DIM(stEvent.uData.stSearchReport.satrpt_search)");
        int v24 = 2476;
        goto LABEL_21;
      }
      if (a3[3] + a3[4] == 1) {
        goto LABEL_18;
      }
      uint64_t v17 = 0;
      char v18 = 0;
      char v19 = 0;
      uint64_t v20 = -(uint64_t)v16;
      while (1)
      {
        double v21 = (unsigned __int8 *)(a4 + 4 + 108 * v17++);
        while (1)
        {
          if (a4)
          {
            a9 = *(int16x8_t *)(v21 + 44);
            long long v22 = *(_OWORD *)(v21 + 76);
            *(_OWORD *)&v27[76] = *(_OWORD *)(v21 + 60);
            *(_OWORD *)&v27[92] = v22;
            *(_OWORD *)&v27[104] = *(_OWORD *)(v21 + 88);
            a11 = *(__n128 *)(v21 + 12);
            *(_OWORD *)&v27[12] = *(_OWORD *)(v21 - 4);
            *(__n128 *)&v27[28] = a11;
            a10 = *(__n128 *)(v21 + 28);
            *(__n128 *)&v27[44] = a10;
            *(int16x8_t *)&v27[60] = a9;
            if (*v21 == a3[5] && v21[1] == a3[6]) {
              break;
            }
          }
          ++v17;
          v21 += 108;
          if (v20 + v17 == 1)
          {
            v27[0] = v19;
            if (v18) {
              goto LABEL_16;
            }
LABEL_18:
            int v23 = "bMaxFound";
            DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2496, "gll_satrpt_rpc_search", (char)"bMaxFound");
            int v24 = 2496;
LABEL_21:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_cw_receiver.cpp", v24, v23);
          }
        }
        if (v18) {
          break;
        }
        char v19 = v17 - 1;
        char v18 = 1;
        if (!(v20 + v17))
        {
          v27[0] = v17 - 1;
          goto LABEL_16;
        }
      }
      int v23 = "!bMaxFound";
      DeviceFaultNotify("glmesrd_test_mgr_cw_receiver.cpp", 2491, "gll_satrpt_rpc_search", (char)"!bMaxFound");
      int v24 = 2491;
      goto LABEL_21;
    }
  }
  else
  {
LABEL_16:
    BlueFin::GlMeSrdTestMgrCwReceiver::ProcessEvent(*(BlueFin::GlMeSrdTestMgrCwReceiver **)(a1 + 8), (uint64_t)&v26, a9, a10.n128_f64[0], a11.n128_f64[0], a12, a13, a14, a15, a16, (uint64_t)a3, a4, a5, a6, a7, a8, v25, v26, *(uint64_t *)v27,
      *(uint64_t *)&v27[8],
      *(uint64_t *)&v27[16],
      *(uint64_t *)&v27[24],
      *(__int16 *)&v27[32],
      *(double *)&v27[40],
      *(long long *)&v27[48],
      *(int *)&v27[64],
      v27[68],
      *(int64x2_t *)&v27[72],
      *(int32x2_t *)&v27[88],
      *(uint64_t *)&v27[96],
      v27[104],
      *(uint64_t *)&v27[112],
      v28,
      v29,
      v30,
      v31,
      v32,
      v33,
      v34,
      v35,
      v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      v51,
      v52,
      v53,
      v54,
      v55,
      v56,
      v57,
      v58);
  }
}

void BlueFin::GlMeSrdTestMgrRpcSatReportCW::~GlMeSrdTestMgrRpcSatReportCW(BlueFin::GlMeSrdTestMgrRpcSatReportCW *this)
{
}

void BlueFin::GlMeSrdTestMgrRpcSatEvtCW::~GlMeSrdTestMgrRpcSatEvtCW(BlueFin::GlMeSrdTestMgrRpcSatEvtCW *this)
{
}

void BlueFin::GlMeCarpTestMgrRpcMiscCW::~GlMeCarpTestMgrRpcMiscCW(BlueFin::GlMeCarpTestMgrRpcMiscCW *this)
{
}

void BlueFin::GlMeMinnowTestMgrRpcMiscCW::~GlMeMinnowTestMgrRpcMiscCW(BlueFin::GlMeMinnowTestMgrRpcMiscCW *this)
{
}

void BlueFin::GlMeSrdTestMgrCwReceiver::GetSpaIqResults(BlueFin::GlMeSrdTestMgrCwReceiver *this)
{
}

void BlueFin::GlMeSrdTestMgrRpcMiscSPA::misc_hrm_response(BlueFin::GlMeSrdTestMgrRpcMiscSPA *this, int a2, int a3, BlueFin::GlMeSrdCtrlSm *a4)
{
  if (BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrCwParams *)(*((void *)this + 1) + 40))) {
    return;
  }
  int v8 = (BlueFin::GlMeSrdTestMgrSPA *)*((void *)this + 1);
  int v9 = *((_DWORD *)v8 + 6);
  if (v9 != 1)
  {
    if ((v9 & 0xFFFFFFFE) != 2)
    {
      int32x4_t v32 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 457, "misc_hrm_response", (char)"0");
      int v33 = 457;
      goto LABEL_103;
    }
    if ((a2 - 9) >= 2 && a2 != 4)
    {
      int32x4_t v32 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 452, "misc_hrm_response", (char)"0");
      int v33 = 452;
      goto LABEL_103;
    }
    if (a3 > -1073684357)
    {
      switch(a3)
      {
        case 27:
          goto LABEL_19;
        case 28:
          break;
        case 29:
          goto LABEL_52;
        case 30:
          goto LABEL_50;
        case 31:
          goto LABEL_54;
        case 32:
          goto LABEL_46;
        default:
          if (a3 == -1073684356)
          {
LABEL_54:
            if (a4 >= 0x100)
            {
              int32x4_t v32 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 375, "misc_hrm_response", (char)"value == (value & 0x0FF)");
              int v33 = 375;
              goto LABEL_103;
            }
            *((unsigned char *)this + 26) = 1;
            *((unsigned char *)this + 30) = (_BYTE)a4;
            goto LABEL_68;
          }
          if (a3 == -1073684352)
          {
LABEL_46:
            if (a4 >= 0x100)
            {
              int32x4_t v32 = "value == (value & 0x0FF)";
              DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 382, "misc_hrm_response", (char)"value == (value & 0x0FF)");
              int v33 = 382;
              goto LABEL_103;
            }
            *((unsigned char *)this + 27) = 1;
            *((unsigned char *)this + 31) = (_BYTE)a4;
            goto LABEL_68;
          }
          break;
      }
    }
    else if (a3 <= -1073691921)
    {
      switch(a3)
      {
        case -1073741736:
          if (*((_DWORD *)v8 + 7) != 1) {
            goto LABEL_68;
          }
          int v18 = *((_DWORD *)v8 + 163);
          if (v18 == -1)
          {
            *((_DWORD *)v8 + 163) = a4;
          }
          else if (v18 + 50 <= a4)
          {
            BlueFin::GlMeSrdTestMgrSPA::RequestDump(v8);
            goto LABEL_68;
          }
          BlueFin::GlMeSrdTestMgrSPA::PollMsCounter(v8, 0);
LABEL_68:
          if (*((unsigned char *)this + 24) && *((unsigned char *)this + 25))
          {
            unsigned int v20 = *((unsigned __int8 *)this + 28);
            unsigned int v21 = (v20 & 7) + (v20 >> 3);
            BOOL v24 = ((*((unsigned char *)this + 28) & 7) + (*((unsigned char *)this + 28) >> 3) + *((unsigned char *)this + 29)) >= 0x10u
               || v21 >= 0xB
               || (v20 & 7) >= 6
               || v20 >= 0x2E;
            float v25 = (float)(3 * (v21 + *((unsigned char *)this + 29)));
            if (v24) {
              float v25 = 255.0;
            }
            *((float *)this + 12) = -v25;
            *((_WORD *)this + 12) = 0;
          }
          if (*((unsigned char *)this + 26) && *((unsigned char *)this + 27))
          {
            unsigned int v26 = *((unsigned __int8 *)this + 30);
            unsigned int v27 = (v26 & 7) + (v26 >> 3);
            BOOL v30 = ((*((unsigned char *)this + 30) & 7) + (*((unsigned char *)this + 30) >> 3) + *((unsigned char *)this + 31)) >= 0x10u
               || v27 >= 0xB
               || (v26 & 7) >= 6
               || v26 >= 0x2E;
            float v31 = (float)(3 * (v27 + *((unsigned char *)this + 31)));
            if (v30) {
              float v31 = 255.0;
            }
            *((float *)this + 13) = -v31;
            *((_WORD *)this + 13) = 0;
          }
          return;
        case -1073692432:
          float v19 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a4);
          *((float *)this + 8) = v19;
          goto LABEL_68;
        case -1073692176:
          float v16 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a4);
          *((float *)this + 9) = v16;
          goto LABEL_68;
      }
    }
    else
    {
      if (a3 <= -1073684365)
      {
        if (a3 == -1073691920)
        {
          float v17 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753(a4);
          *((float *)this + 10) = v17;
        }
        else
        {
          if (a3 != -1073684372) {
            goto LABEL_107;
          }
LABEL_19:
          if (a4 >= 0x100)
          {
            int32x4_t v32 = "value == (value & 0x0FF)";
            DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 354, "misc_hrm_response", (char)"value == (value & 0x0FF)");
            int v33 = 354;
            goto LABEL_103;
          }
          unsigned int v10 = (a4 & 7) + (a4 >> 3);
          BOOL v12 = v10 >= 0x10 || v10 >= 0xB || (a4 & 7u) >= 6;
          float v13 = (float)(3 * v10);
          if (v12 || a4 >= 0x2Eu) {
            float v13 = 255.0;
          }
          *((float *)this + 11) = -v13;
        }
        goto LABEL_68;
      }
      if (a3 == -1073684364)
      {
LABEL_52:
        if (a4 >= 0x100)
        {
          int32x4_t v32 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 361, "misc_hrm_response", (char)"value == (value & 0x0FF)");
          int v33 = 361;
          goto LABEL_103;
        }
        *((unsigned char *)this + 24) = 1;
        *((unsigned char *)this + 28) = (_BYTE)a4;
        goto LABEL_68;
      }
      if (a3 == -1073684360)
      {
LABEL_50:
        if (a4 >= 0x100)
        {
          int32x4_t v32 = "value == (value & 0x0FF)";
          DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 368, "misc_hrm_response", (char)"value == (value & 0x0FF)");
          int v33 = 368;
          goto LABEL_103;
        }
        *((unsigned char *)this + 25) = 1;
        *((unsigned char *)this + 29) = (_BYTE)a4;
        goto LABEL_68;
      }
    }
LABEL_107:
    int32x4_t v32 = "0";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 427, "misc_hrm_response", (char)"0");
    int v33 = 427;
LABEL_103:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", v33, v32);
  }
  if (a2 != 4)
  {
    int32x4_t v32 = "0";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 343, "misc_hrm_response", (char)"0");
    int v33 = 343;
    goto LABEL_103;
  }
  if (a3 != 22)
  {
    if (a3 == 12319)
    {
      *((_DWORD *)this + 5) = a4;
    }
    else if (a3 == 12318)
    {
      *((_DWORD *)this + 4) = a4;
    }
    return;
  }
  if (*((_DWORD *)v8 + 7) != 1) {
    return;
  }
  int v15 = *((_DWORD *)v8 + 163);
  if (v15 == -1)
  {
    *((_DWORD *)v8 + 163) = a4;
  }
  else if (v15 + 50 <= a4)
  {
    BlueFin::GlMeSrdTestMgrSPA::RequestDump(v8);
    return;
  }

  BlueFin::GlMeSrdTestMgrSPA::PollMsCounter(v8, 0);
}

void BlueFin::GlMeSrdTestMgrSPA::PollMsCounter(BlueFin::GlMeSrdTestMgrSPA *this, int a2)
{
  if (a2) {
    *((_DWORD *)this + 163) = -1;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  v10[0] = 0;
  v10[1] = 0;
  char v11 = 0;
  __int16 v12 = 1;
  uint64_t v13 = v3;
  int v14 = 0;
  __int16 v15 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, 1);
  int v4 = *((_DWORD *)this + 6);
  if (v4 == 1)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    uint64_t v7 = 22;
    uint64_t v8 = 4;
  }
  else
  {
    if ((v4 & 0xFFFFFFFE) != 2
      || BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40)))
    {
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1679, "PollMsCounter", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", 1679, "0");
    }
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    uint64_t v7 = 3221225560;
    uint64_t v8 = 9;
  }
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v10, v8, v7);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v10);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v10);
}

void sub_263AA4194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrSPA::RequestDump(BlueFin::GlMeSrdTestMgrSPA *this)
{
  *((_DWORD *)this + 7) = 2;
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  v22[0] = 0;
  v22[1] = 0;
  char v23 = 0;
  __int16 v24 = 1;
  uint64_t v25 = v2;
  int v26 = 0;
  __int16 v27 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, 1);
  int v3 = *((_DWORD *)this + 6);
  unsigned int v4 = v3 & 0xFFFFFFFE;
  if ((v3 & 0xFFFFFFFE) == 6)
  {
    if ((*((unsigned char *)this + 294) & 0x40) != 0)
    {
      uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 160))(v6, v22, 256);
      (*(void (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  if (v3 == 1)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
    uint64_t v9 = 256;
    uint64_t v10 = 70;
    uint64_t v11 = 4;
LABEL_6:
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 24))(v8, v22, v11, v10, v9);
    uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v14 = 1024;
    goto LABEL_18;
  }
  if (v4 == 2)
  {
    if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40)))
    {
      uint64_t v21 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 32))(v21);
      uint64_t v9 = 0;
      uint64_t v10 = 3221226032;
      uint64_t v11 = 9;
      goto LABEL_6;
    }
    unsigned int v4 = *((_DWORD *)this + 6) & 0xFFFFFFFE;
  }
  BOOL v15 = v4 > 6;
  int v16 = (1 << v4) & 0x54;
  if (!v15 && v16 != 0)
  {
LABEL_14:
    if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40))) {
      goto LABEL_19;
    }
    int v18 = *(uint64_t (**)(void))(**((void **)this + 1) + 208);
    if ((*((unsigned char *)this + 294) & 8) != 0)
    {
      uint64_t v20 = v18();
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
      uint64_t v14 = 8704;
    }
    else
    {
      uint64_t v19 = v18();
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
      uint64_t v14 = 512;
    }
LABEL_18:
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v13 + 160))(v13, v22, v14);
  }
LABEL_19:
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v22);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v22);
}

void sub_263AA4548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrRpcMiscSPA::gll_misc_rpc_hrm_read_response(BlueFin::GlMeSrdTestMgrRpcMiscSPA *this, int a2, int a3, unsigned int a4, unsigned int *a5)
{
  if (a4)
  {
    for (unsigned int i = 0; i < a4; ++i)
    {
      unsigned int v11 = *a5++;
      BlueFin::GlMeSrdTestMgrRpcMiscSPA::misc_hrm_response(this, a2, a3, (BlueFin::GlMeSrdCtrlSm *)v11);
      a3 += 4;
    }
  }
}

void BlueFin::GlMeSrdTestMgrRpcMiscSPA::gll_misc_rpc_iq_dump_captured(BlueFin::GlMeSrdTestMgrRpcMiscSPA *this, char a2, char a3, int a4, int a5, int a6, unsigned __int8 *a7, unsigned __int16 *a8, unsigned int a9)
{
  uint64_t v13 = *((void *)this + 1);
  if ((*(_DWORD *)(v13 + 24) & 0xFFFFFFFE) == 6)
  {
    int v14 = *(_DWORD *)(v13 + 292);
    *((unsigned char *)this + 56) = a2;
    *((unsigned char *)this + 57) = a3;
    *((_DWORD *)this + 15) = a4;
    *((_DWORD *)this + 16) = a5;
    if ((v14 & 0x400000) != 0)
    {
      *((_DWORD *)this + 17) = 0;
      *((_DWORD *)this + 18) = 0;
      *(unsigned char *)(v13 + 568) = 0;
      goto LABEL_34;
    }
    *((_DWORD *)this + 17) = a9;
    *((_DWORD *)this + 18) = 0;
  }
  else
  {
    *((unsigned char *)this + 56) = a2;
    *((unsigned char *)this + 57) = a3;
    *((_DWORD *)this + 15) = a4;
    *((_DWORD *)this + 16) = a5;
  }
  *(unsigned char *)(v13 + 568) = a6;
  GlCustomLog(14, "<SPA> AGC gain (AAGC,DAGC):");
  if (a6)
  {
    unsigned __int8 v16 = a6 - 1;
    float v17 = 0.0;
    float v18 = 0.0;
    do
    {
      uint64_t v19 = *((void *)this + 1);
      int v20 = *(_DWORD *)(v19 + 24);
      if ((v20 & 0xFFFFFFFE) == 2)
      {
        uint64_t v21 = v16;
        unsigned int v24 = a7[v16];
        unsigned int v25 = (v24 & 7) + (v24 >> 3);
        BOOL v27 = v25 >= 0x10 || v25 >= 0xB || (v24 & 7) >= 6;
        float v28 = (float)(3 * v25);
        if (v27 || v24 >= 0x2E) {
          float v28 = 255.0;
        }
        float v18 = -v28;
        double v23 = BlueFin::GlMeSrdCtrlSm::DagcDecode4753((BlueFin::GlMeSrdCtrlSm *)a8[v16]);
      }
      else
      {
        if ((v20 & 0xFFFFFFFE) != 6)
        {
          uint64_t v21 = v16;
          goto LABEL_31;
        }
        if (v20 != 6
          && (v20 != 7
           || !(*(unsigned int (**)(void))(**(void **)(*(void *)(v19 + 16) + 136) + 40))(*(void *)(*(void *)(v19 + 16) + 136))))
        {
          uint64_t v21 = v16;
          float v18 = 0.0;
          if (a8[v16])
          {
            int v30 = a8[v16];
            float v17 = (float)((float)(log10f((float)a8[v16]) + (float)((float)(v30 << 19 >> 27) / 3.3219))
                        + -1.8062)
                * 20.0;
          }
          else
          {
            float v17 = 0.0;
          }
          goto LABEL_31;
        }
        uint64_t v21 = v16;
        LOBYTE(v15) = a7[v16];
        unsigned int v22 = a8[v16];
        float v18 = (float)v15;
        double v23 = BlueFin::GlMeSrdCtrlSm::DagcDecode4777((BlueFin::GlMeSrdCtrlSm *)(v22 >> 8), (char)v22);
      }
      float v17 = v23;
LABEL_31:
      uint64_t v31 = *((void *)this + 1) + 4 * v21;
      *(float *)(v31 + 488) = v18;
      *(float *)(v31 + 408) = v17;
      GlCustomLog(14, "%.1f,%.1f; ", v18, v17);
      --v16;
    }
    while (v21);
  }
  GlCustomLog(14, "\n");
  uint64_t v13 = *((void *)this + 1);
LABEL_34:

  BlueFin::GlMeSrdTestMgrSPA::RequestDump((BlueFin::GlMeSrdTestMgrSPA *)v13);
}

uint64_t BlueFin::GlMeSrdTestMgrRpcMiscSPA::gll_misc_rpc_mem_dump_response(BlueFin::GlMeSrdTestMgrRpcMiscSPA *this, int a2, unsigned int a3, unsigned int a4, unsigned __int8 *a5)
{
  uint64_t v5 = a5;
  uint64_t result = *((void *)this + 1);
  int v11 = *(_DWORD *)(result + 24);
  int v12 = *(_DWORD *)(result + 292);
  if ((v11 & 0xFFFFFFFE) == 6 && (v12 & 0x400000) != 0)
  {
    unsigned int v21 = *((_DWORD *)this + 16);
    if (a2 == 1)
    {
      uint64_t result = BlueFin::GlMeSrdTestMgrSPA::DumpFinished((BlueFin::GlMeSrdTestMgrSPA *)result, dword_26B434638 == v21 >> 7);
      int v25 = 0;
    }
    else
    {
      if (a2 != 256) {
        return result;
      }
      if (*(_DWORD *)(result + 28) != 2)
      {
        int v50 = "m_pTestMgr->m_etState == GlMeSrdTestMgrSPA::WaitingDump";
        DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 802, "HandleMemoryDumpAdcCapture", (char)"m_pTestMgr->m_etState == GlMeSrdTestMgrSPA::WaitingDump");
        int v51 = 802;
        goto LABEL_134;
      }
      unsigned int v22 = (*(unsigned __int8 *)(result + 684) << 10) | 1;
      unsigned int v23 = v22 + (v21 >> 7);
      if (v22 > a3 || v23 < a3) {
        return result;
      }
      *(unsigned char *)(result + 569) = 0;
      *(void *)(result + 400) = a5;
      *(_DWORD *)(result + 392) = a4;
      *(_DWORD *)(result + 388) = dword_26B434638;
      *(_DWORD *)(result + 384) = v23;
      *(void *)(result + 576) = 0;
      *(int32x4_t *)(result + 584) = vrev64q_s32(*(int32x4_t *)(result + 624));
      *(_WORD *)(result + 600) = 0;
      *(_DWORD *)(result + 616) = *(_DWORD *)(result + 680);
      if (*(unsigned char *)(result + 648))
      {
        int v50 = "!m_pTestMgr->m_bDoubleBufferResultsReady";
        DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 827, "HandleMemoryDumpAdcCapture", (char)"!m_pTestMgr->m_bDoubleBufferResultsReady");
        int v51 = 827;
        goto LABEL_134;
      }
      *(unsigned char *)(result + 648) = 1;
      uint64_t result = BlueFin::GlMeSrdCtrlSm::PostCwResults(*(BlueFin::GlMeSrdCtrlSm **)(result + 16));
      int v25 = dword_26B434638 + 1;
    }
    dword_26B434638 = v25;
    return result;
  }
  int v14 = (BlueFin::GlMeSrdTestMgrCwParams *)(result + 40);
  BOOL v16 = (v12 & 0x40) == 0 || v11 == 1;
  uint64_t result = BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(v14);
  if (result)
  {
    unsigned int v17 = *(_DWORD *)(*((void *)this + 1) + 24) & 0xFFFFFFFE;
    BOOL v18 = v17 == 2 || v17 == 4;
    unsigned int v19 = v18 || v17 == 6;
    if (v18) {
      unsigned int v20 = 2048;
    }
    else {
      unsigned int v20 = (v17 == 6) << 11;
    }
  }
  else
  {
    if (v16) {
      int v26 = 0;
    }
    else {
      int v26 = 769;
    }
    if (v16) {
      int v27 = 0;
    }
    else {
      int v27 = 939;
    }
    if ((v12 & 0x20) != 0)
    {
      int v26 = 1;
      int v27 = 128;
    }
    if (v11 == 1) {
      int v28 = 1;
    }
    else {
      int v28 = 257;
    }
    if (v11 == 1) {
      int v29 = 512;
    }
    else {
      int v29 = 768;
    }
    BOOL v30 = v11 != 1 && (v12 & 2) == 0;
    if (v30) {
      unsigned int v19 = v26;
    }
    else {
      unsigned int v19 = v28;
    }
    if (v30) {
      unsigned int v20 = v27;
    }
    else {
      unsigned int v20 = v29;
    }
  }
  if (HIDWORD(_MergedGlobals_2) <= a3) {
    HIDWORD(_MergedGlobals_2) = a3;
  }
  else {
    dword_26B434630 = HIDWORD(_MergedGlobals_2);
  }
  if (a2 > 511)
  {
    if (a2 != 512 && a2 != 1024) {
      return result;
    }
LABEL_64:
    unsigned __int16 v31 = dword_26B434630 + a3;
    unsigned int v32 = (unsigned __int16)(dword_26B434630 + a3);
    if (v19 > v31 || v20 < v32) {
      goto LABEL_103;
    }
    uint64_t v34 = *((void *)this + 1);
    if (*(_DWORD *)(v34 + 28) != 2)
    {
      int v50 = "m_pTestMgr->m_etState == GlMeSrdTestMgrSPA::WaitingDump";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 654, "HandleMemoryDumpSpa", (char)"m_pTestMgr->m_etState == GlMeSrdTestMgrSPA::WaitingDump");
      int v51 = 654;
      goto LABEL_134;
    }
    *(unsigned char *)(v34 + 569) = 0;
    *(void *)(v34 + 400) = v5;
    *(_DWORD *)(v34 + 392) = a4;
    if (result && v32 <= *((_DWORD *)this + 15) >> 7)
    {
      *(_DWORD *)(v34 + 388) = 0;
      dword_26B434634 = v32;
      if (v11 == 1)
      {
        *(_DWORD *)(v34 + 488) = *((_DWORD *)this + 5);
        *(_DWORD *)(v34 + 408) = *((_DWORD *)this + 4);
        *(unsigned char *)(v34 + 568) = 1;
      }
    }
    else
    {
      unsigned int v35 = dword_26B434634 + v19;
      *(_DWORD *)(v34 + 388) = v32 - (dword_26B434634 + v19) + 1;
      *(_DWORD *)(v34 + 384) = v20 - v35 + 1;
      if (v11 == 1)
      {
        *(_DWORD *)(v34 + 488) = *((_DWORD *)this + 5);
        *(_DWORD *)(v34 + 408) = *((_DWORD *)this + 4);
        *(unsigned char *)(v34 + 568) = 1;
        if (!result)
        {
LABEL_88:
          double v37 = *(double *)(v34 + 640);
          goto LABEL_89;
        }
      }
      else if ((result & 1) == 0)
      {
        if ((v12 & 2) != 0)
        {
          *(_DWORD *)(v34 + 488) = *((_DWORD *)this + 11);
          uint64_t v36 = (char *)this + 32;
        }
        else if ((v12 & 0x20) != 0)
        {
          *(_DWORD *)(v34 + 488) = *((_DWORD *)this + 12);
          uint64_t v36 = (char *)this + 36;
        }
        else
        {
          *(_DWORD *)(v34 + 488) = *((_DWORD *)this + 13);
          uint64_t v36 = (char *)this + 40;
        }
        *(_DWORD *)(v34 + 408) = *(_DWORD *)v36;
        *(unsigned char *)(v34 + 568) = 1;
        goto LABEL_88;
      }
    }
    double v37 = *(double *)(v34 + 656) * 1000000.0;
LABEL_89:
    *(double *)(v34 + 576) = v37;
    *(int32x4_t *)(v34 + 584) = vrev64q_s32(*(int32x4_t *)(v34 + 624));
    *(unsigned char *)(v34 + 619) = *(unsigned char *)(v34 + 683);
    int v38 = *(_DWORD *)(v34 + 292);
    int v39 = v38 & 0x180;
    switch(v39)
    {
      case 128:
        char v40 = 1;
        break;
      case 256:
        char v40 = 2;
        break;
      case 384:
        char v40 = 4;
        break;
      default:
        char v40 = 5;
        break;
    }
    *(unsigned char *)(v34 + 600) = v40;
    int v41 = v38 & 0x600;
    if (v41 == 512)
    {
      char v42 = 1;
    }
    else if (v41 == 1024)
    {
      char v42 = 2;
    }
    else
    {
      char v42 = 4 * (v41 == 1536);
    }
    *(unsigned char *)(v34 + 601) = v42;
    if (*(unsigned char *)(v34 + 648))
    {
      int v50 = "!m_pTestMgr->m_bDoubleBufferResultsReady";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 705, "HandleMemoryDumpSpa", (char)"!m_pTestMgr->m_bDoubleBufferResultsReady");
      int v51 = 705;
      goto LABEL_134;
    }
    *(unsigned char *)(v34 + 648) = 1;
    uint64_t result = BlueFin::GlMeSrdCtrlSm::PostCwResults(*(BlueFin::GlMeSrdCtrlSm **)(v34 + 16));
    LODWORD(_MergedGlobals_2) = _MergedGlobals_2 + 1;
LABEL_103:
    if (a2 == 512 || a2 == 256)
    {
      unsigned int v43 = (v32 << 7) - 128;
      unsigned int v44 = *((_DWORD *)this + 15);
      unsigned int v45 = *((_DWORD *)this + 16) + v44;
      if (v45 >= v43 && a4 && v44 <= v43 + a4)
      {
        uint64_t result = *((void *)this + 1);
        int v46 = *(_DWORD *)(result + 292) & 0x180;
        if (v46 == 384) {
          char v47 = 4;
        }
        else {
          char v47 = 5;
        }
        uint64_t v48 = a4;
        while (1)
        {
          if (v46 == 256) {
            unsigned __int8 v49 = 2;
          }
          else {
            unsigned __int8 v49 = v47;
          }
          if (v46 == 128) {
            unsigned __int8 v49 = 1;
          }
          if (v45 >= v43 && v44 <= v43)
          {
            if (v49 <= 4u && v46 != 128 && v46 != 384 && v46 != 256)
            {
              int v50 = "0";
              DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 753, "HandleMemoryDumpSpa", (char)"0");
              int v51 = 753;
LABEL_134:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", v51, v50);
            }
            if (v19 <= v32 && (*(_DWORD *)(result + 24) & 0xFFFFFFFE) == 6 && v20 >= v32) {
              *((_DWORD *)this + 18) += *v5;
            }
          }
          ++v5;
          ++v43;
          if (!--v48) {
            return result;
          }
        }
      }
    }
    return result;
  }
  if (a2 == 1)
  {
    uint64_t result = BlueFin::GlMeSrdTestMgrSPA::DumpFinished(*((BlueFin::GlMeSrdTestMgrSPA **)this + 1), _MergedGlobals_2 == v20 - v19 + 1);
    _MergedGlobals_2 = 0;
    dword_26B434630 = 0;
    return result;
  }
  if (a2 == 256) {
    goto LABEL_64;
  }
  return result;
}

unint64_t BlueFin::GlMeSrdTestMgrSPA::DumpFinished(BlueFin::GlMeSrdTestMgrSPA *this, int a2)
{
  int v3 = *((_DWORD *)this + 159);
  int v4 = *((_DWORD *)this + 158);
  if (v3 != v4 - 1 || (*((_DWORD *)this + 157) == *((_DWORD *)this + 156) - 1 ? (BOOL v5 = a2 == 0) : (BOOL v5 = 1), v5))
  {
    if (a2)
    {
      int v6 = v3 + 1;
      *((_DWORD *)this + 159) = v6;
      if (v6 == v4)
      {
        *((_DWORD *)this + 159) = 0;
        ++*((_DWORD *)this + 157);
        if (BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40)))
        {
          *(double *)&uint64_t v7 = BlueFin::GlMeSrdTestMgrSPA::GetSampleRate(this);
          *((float64x2_t *)this + 41) = vaddq_f64((float64x2_t)vdupq_lane_s64(v7, 0), *((float64x2_t *)this + 41));
          *((double *)this + 84) = *(double *)&v7 + *((double *)this + 84);
        }
        else
        {
          *((double *)this + 80) = *((double *)this + 80) + 500000.0;
        }
      }
    }
    else
    {
      unsigned __int8 v8 = *((unsigned char *)this + 686) + 1;
      *((unsigned char *)this + 686) = v8;
      if (*((unsigned __int8 *)this + 687) <= v8) {
        BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)(*((void *)this + 2) + 40), 38, 0);
      }
    }
    int v11 = *(uint64_t (**)(BlueFin::GlMeSrdTestMgrSPA *))(*(void *)this + 24);
    return v11(this);
  }
  else
  {
    *((unsigned char *)this + 569) = 1;
    *((unsigned char *)this + 648) = 1;
    *((_DWORD *)this + 7) = 0;
    uint64_t v9 = (BlueFin::GlMeSrdCtrlSm *)*((void *)this + 2);
    return BlueFin::GlMeSrdCtrlSm::PostCwResults(v9);
  }
}

double BlueFin::GlMeSrdTestMgrSPA::GlMeSrdTestMgrSPA(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = &unk_270EBDE20;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 292) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 275) = 0u;
  *(void *)(a1 + 304) = &unk_270EBDDA0;
  *(void *)(a1 + 312) = a1;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 345) = 0u;
  *(unsigned char *)(a1 + 361) = 6;
  *(_OWORD *)(a1 + 364) = 0u;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  *(unsigned char *)(a1 + 608) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_WORD *)(a1 + 600) = 0;
  *(void *)(a1 + 612) = 0;
  *(unsigned char *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 652) = 0u;
  *(_OWORD *)(a1 + 668) = 0u;
  *(_DWORD *)(a1 + 683) = 0;
  *(_WORD *)(a1 + 687) = 5;
  *(void *)(a1 + 696) = 0xC01E51EB851EB852;
  double result = -8.0;
  *(_OWORD *)(a1 + 704) = xmmword_263BB1B90;
  *(_OWORD *)(a1 + 720) = xmmword_263BB1BA0;
  return result;
}

void BlueFin::GlMeSrdTestMgrSPA::~GlMeSrdTestMgrSPA(BlueFin::GlMeSrdTestMgrSPA *this)
{
  *(void *)this = &unk_270EBDE20;
  if (*((unsigned char *)this + 32))
  {
    uint64_t v2 = "!m_bCwResources";
    int v3 = 919;
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 919, "~GlMeSrdTestMgrSPA", (char)"!m_bCwResources");
    goto LABEL_7;
  }
  if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40))
    && *((_DWORD *)this + 7))
  {
    uint64_t v2 = "m_etState == GlMeSrdTestMgrSPA::Idle";
    int v3 = 922;
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 922, "~GlMeSrdTestMgrSPA", (char)"m_etState == GlMeSrdTestMgrSPA::Idle");
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", v3, v2);
  }
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdTestMgrSPA::~GlMeSrdTestMgrSPA(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::AllocateCwResources(BlueFin::GlMeSrdTestMgrSPA *this, const BlueFin::GlMeSrdTestMgrCwParams *a2)
{
  if (*((unsigned char *)this + 32))
  {
    int v6 = "!m_bCwResources";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 931, "AllocateCwResources", (char)"!m_bCwResources");
    int v7 = 931;
    goto LABEL_239;
  }
  int v3 = this;
  unsigned int v4 = *((_DWORD *)a2 + 63);
  if ((v4 & 0x20000) != 0) {
    int v5 = 1;
  }
  else {
    int v5 = (v4 >> 17) & 2;
  }
  *((_DWORD *)this + 151) = v5;
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 2)
  {
    if (v5)
    {
      int v6 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 939, "AllocateCwResources", (char)"0");
      int v7 = 939;
      goto LABEL_239;
    }
  }
  else
  {
    if ((v5 - 1) <= 1
      && (*(unsigned int (**)(void))(**(void **)(*((void *)this + 2) + 136) + 152))(*(void *)(*((void *)this + 2) + 136)) != 5
      && (*(unsigned int (**)(void))(**(void **)(*((void *)v3 + 2) + 136) + 152))(*(void *)(*((void *)v3 + 2) + 136)) != 2)
    {
      int v6 = "m_pSrdCtrlSm->GetAsicConfigIfc().GetRfMode() == GL_MULTI_CARR_RF_MODE_L1_L2_L5 || m_pSrdCtrlSm->GetAsicConfig"
           "Ifc().GetRfMode() == GL_MULTI_CARR_RF_MODE_L1_L5";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 947, "AllocateCwResources", (char)"m_pSrdCtrlSm->GetAsicConfigIfc().GetRfMode() == GL_MULTI_CARR_RF_MODE_L1_L2_L5 || m_pSrdCtrlSm->GetAsicConfigIfc().GetRfMode() == GL_MULTI_CARR_RF_MODE_L1_L5");
      int v7 = 947;
      goto LABEL_239;
    }
    if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(a2) && (*((unsigned char *)a2 + 254) & 0x40) == 0)
    {
      int v6 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 952, "AllocateCwResources", (char)"0");
      int v7 = 952;
      goto LABEL_239;
    }
  }
  BlueFin::GlMeSrdTestMgrCwParams::operator=((uint64_t)v3 + 40, (uint64_t)a2);
  *((_DWORD *)v3 + 157) = 0;
  *((_DWORD *)v3 + 159) = 0;
  if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)v3 + 40)))
  {
    double v15 = *(double *)a2;
    double v16 = (*((double *)a2 + 10) - *(double *)a2) / 500000.0;
    int v17 = (int)(v16 + 1.0);
    if (v16 + 1.0 == (double)v17) {
      int v17 = (int)v16;
    }
    *((_DWORD *)v3 + 156) = v17;
    unsigned int v18 = *((_DWORD *)a2 + 60);
    if (v18)
    {
      if (v18 >= 0x1A)
      {
        GlCustomLog(15, "<SPA> ERROR: Legacy SPA does not support more than 25ms coh\n");
        int v6 = "0";
        DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 976, "AllocateCwResources", (char)"0");
        int v7 = 976;
        goto LABEL_239;
      }
      float v19 = (float)*((unsigned int *)a2 + 61);
      BOOL IsERAMDump = BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(a2);
      double v22 = 25.0;
      if (IsERAMDump)
      {
        int v23 = *((_DWORD *)a2 + 63);
        int v24 = v23 & 0x180;
        double v25 = 2.0;
        double v26 = 4.0;
        double v27 = 10.0;
        if (v24 == 384) {
          double v27 = 8.0;
        }
        if (v24 != 256) {
          double v26 = v27;
        }
        if (v24 != 128) {
          double v25 = v26;
        }
        double v28 = 1961984.0 / v25;
        int v29 = v23 & 0x600;
        if (v29 == 512)
        {
          double v21 = 1023000000.0;
        }
        else if (v29 == 1024)
        {
          double v21 = 2046000000.0;
        }
        else
        {
          double v21 = 4092000000.0;
          if (v29 != 1536) {
            double v21 = 0.0;
          }
        }
        double v22 = v28 / v21;
      }
      LODWORD(v21) = *((_DWORD *)a2 + 60);
      double v63 = v22 / (double)*(unint64_t *)&v21;
      BOOL v64 = v63 < 0.0;
      if (v63 == (double)(int)v63) {
        BOOL v64 = 0;
      }
      float v65 = v19 / (float)((int)v63 - v64);
      double v66 = v65 + 1.0;
      int v67 = (int)v66;
      if (v66 == (double)(int)v66) {
        int v67 = (int)v65;
      }
      *((_DWORD *)v3 + 158) = v67;
      double v15 = *(double *)a2;
    }
    else
    {
      *((_DWORD *)v3 + 158) = 1;
    }
    *((double *)v3 + 80) = v15 + 250000.0;
    (*(void (**)(void))(**(void **)(*((void *)v3 + 2) + 136) + 88))(*(void *)(*((void *)v3 + 2) + 136));
    int v12 = *((_DWORD *)v3 + 6);
    if (v12 == 1)
    {
      double v69 = v68 * 20.0 + -1575420000.0;
      int v70 = *((_DWORD *)a2 + 63);
      if ((v70 & 2) != 0)
      {
        double v71 = *((double *)v3 + 80) - v69;
        goto LABEL_118;
      }
      if ((v70 & 0x20) != 0)
      {
        double v71 = 26580000.0 - v69 + *((double *)v3 + 80);
LABEL_118:
        *((double *)v3 + 80) = v71;
LABEL_127:
        uint64_t v78 = (*(uint64_t (**)(void))(**((void **)v3 + 1) + 80))(*((void *)v3 + 1));
        uint64_t v165 = 0;
        uint64_t v166 = 0;
        char v167 = 0;
        __int16 v168 = 1;
        uint64_t v169 = v78;
        int v170 = 0;
        __int16 v171 = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v78 + 16))(v78, 1);
        uint64_t v79 = (*(uint64_t (**)(void))(**((void **)v3 + 1) + 208))(*((void *)v3 + 1));
        uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 32))(v79);
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)v80 + 24))(v80, &v165, 5, 136, 0);
        BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v165);
        BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v165);
        goto LABEL_128;
      }
      int v6 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1005, "AllocateCwResources", (char)"0");
      int v7 = 1005;
LABEL_239:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", v7, v6);
    }
    if ((v12 & 0xFFFFFFFE) > 6 || ((1 << (v12 & 0xFE)) & 0x54) == 0)
    {
      int v6 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1043, "AllocateCwResources", (char)"0");
      int v7 = 1043;
      goto LABEL_239;
    }
    double v72 = v68 * 48.0;
    double v73 = *(double *)a2 + 250000.0;
    int v74 = *((_DWORD *)a2 + 63);
    if ((v74 & 2) != 0)
    {
      double v77 = 1575420000.0 - v72 + v73;
    }
    else
    {
      if ((v74 & 0x20) != 0)
      {
        double v75 = -1602000000.0;
        double v76 = 1.015625;
      }
      else
      {
        if ((v74 & 0x40) == 0)
        {
          int v6 = "0";
          DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1038, "AllocateCwResources", (char)"0");
          int v7 = 1038;
          goto LABEL_239;
        }
        double v75 = -1561098000.0;
        double v76 = 0.984375;
      }
      double v77 = v73 - (v75 + v72 * v76);
    }
    *((double *)v3 + 80) = v77;
    goto LABEL_123;
  }
  double v8 = *(double *)a2;
  double v9 = *((double *)a2 + 10);
  if (*(double *)a2 >= v9)
  {
    int v6 = "rCwTestParams.dInitFreqHz[0] < rCwTestParams.dEndFreqHz[0]";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1048, "AllocateCwResources", (char)"rCwTestParams.dInitFreqHz[0] < rCwTestParams.dEndFreqHz[0]");
    int v7 = 1048;
    goto LABEL_239;
  }
  unsigned int v10 = *((_DWORD *)a2 + 63);
  int v11 = v10 & 0x600;
  if (v11 != 512 && v11 != 1024 && v11 != 1536)
  {
    int v6 = "rCwTestParams.GetSampleRateMsps()";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1049, "AllocateCwResources", (char)"rCwTestParams.GetSampleRateMsps()");
    int v7 = 1049;
    goto LABEL_239;
  }
  *((_DWORD *)v3 + 153) = v10;
  int v12 = *((_DWORD *)v3 + 6);
  if ((v12 & 0xFFFFFFFE) == 6)
  {
    int v13 = *((_DWORD *)v3 + 73);
    if ((v13 & 0x400000) != 0)
    {
      unsigned int v14 = v10;
    }
    else
    {
      unsigned int v14 = v10 & 0xFFBFFFFF;
      *((_DWORD *)v3 + 153) = v10 & 0xFFBFFFFF;
    }
  }
  else
  {
    unsigned int v14 = v10 & 0xFFBFFFFF;
    *((_DWORD *)v3 + 153) = v10 & 0xFFBFFFFF;
    if ((v12 & 0xFFFFFFFE) != 4) {
      goto LABEL_41;
    }
    int v13 = *((_DWORD *)v3 + 73);
  }
  if ((~v13 & 0x620) == 0)
  {
    *((_DWORD *)v3 + 73) = v13 & 0xFFFFF9FF | 0x400;
    *((_DWORD *)v3 + 153) = v14 & 0xFFFFF9FF | 0x400;
    unsigned int v10 = *((_DWORD *)a2 + 63);
  }
LABEL_41:
  double v30 = v8 / 1000000.0;
  double v31 = v9 / 1000000.0;
  double v32 = v9 / 1000000.0 - v8 / 1000000.0;
  double SampleRate = BlueFin::GlMeSrdTestMgrSPA::GetSampleRate(v3);
  double v34 = v32 / SampleRate + 1.0;
  unsigned int v35 = (int)v34;
  if (v34 == (double)(int)v34) {
    unsigned int v35 = (int)(v32 / SampleRate);
  }
  *((_DWORD *)v3 + 156) = v35;
  if ((v10 & 2) != 0)
  {
    uint64_t v36 = 0;
  }
  else if ((v10 & 0x20) != 0)
  {
    uint64_t v36 = 2;
  }
  else
  {
    if ((v10 & 0x40) == 0)
    {
LABEL_244:
      int v6 = "dBandCenterMHz != 0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1081, "AllocateCwResources", (char)"dBandCenterMHz != 0");
      int v7 = 1081;
      goto LABEL_239;
    }
    uint64_t v36 = 4;
  }
  LODWORD(v37) = (v10 >> 17) & 2;
  if ((v10 & 0x20000) != 0) {
    uint64_t v37 = 1;
  }
  else {
    uint64_t v37 = v37;
  }
  double v38 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v37 - v37 + v36]];
  if (v38 == 0.0) {
    goto LABEL_244;
  }
  double v39 = v38 / 1000000.0;
  double v40 = v30 + v38 / 1000000.0;
  double v41 = v40 + (SampleRate * (double)v35 - v32) * -0.5 + SampleRate * 0.5;
  *((double *)v3 + 82) = v41;
  if ((v10 & 0x20) != 0)
  {
    double v42 = -v30;
    if (v30 >= 0.0) {
      double v42 = v30;
    }
    if (v42 == v31)
    {
      double v43 = v39 - v41;
      if (v39 - v41 < 0.0) {
        double v43 = -(v39 - v41);
      }
      if (v43 * 1000000.0 > 1.0)
      {
        double v44 = v43 / SampleRate;
        BOOL v45 = v44 < 0.0;
        if (v44 == (double)(int)v44) {
          BOOL v45 = 0;
        }
        double v46 = SampleRate * (v44 - (double)((int)v44 - v45));
        if (v39 < v41) {
          double v47 = SampleRate - v46;
        }
        else {
          double v47 = v46;
        }
        double v41 = v41 + v47;
        *((double *)v3 + 82) = v41;
      }
    }
  }
  if (v41 + SampleRate * -0.5 > v40)
  {
    double v41 = v41 - SampleRate;
    *((double *)v3 + 82) = v41;
    *((_DWORD *)v3 + 156) = v35 + 1;
  }
  *((double *)v3 + 82) = v41;
  int v48 = *((_DWORD *)v3 + 73);
  if ((v48 & 0x60000) != 0)
  {
    if ((v48 & 0x20000) != 0) {
      double v49 = -1227.6;
    }
    else {
      double v49 = -1176.45;
    }
    *((double *)v3 + 83) = v41 + v49 + 1575.42;
    *((double *)v3 + 84) = v41;
  }
  else
  {
    *((double *)v3 + 83) = v41;
    *((void *)v3 + 84) = 0x409261CCCCCCCCCDLL;
    if ((v12 & 0xFFFFFFFC | 2) == 6 && (v48 & 0x20) != 0) {
      *((double *)v3 + 84) = BlueFin::GlMeSrdTestMgrSPA::GetSampleRate(v3) + 1176.45;
    }
  }
  int v50 = v48 & 0x180;
  switch(v50)
  {
    case 128:
      int v51 = 0;
      break;
    case 256:
      int v51 = 1;
      break;
    case 384:
      int v51 = 2;
      break;
    default:
      int v51 = 4;
      break;
  }
  int v52 = v48 & 0x600;
  switch(v52)
  {
    case 512:
      int v53 = 0;
      break;
    case 1024:
      int v53 = 1;
      break;
    case 1536:
      int v53 = 2;
      break;
    default:
      int v53 = -1;
      break;
  }
  uint64_t v54 = (v53 + v51);
  if (v54 >= 5)
  {
    int v6 = "i < _DIM(MAX_COH_INT_MS)";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1111, "AllocateCwResources", (char)"i < _DIM(MAX_COH_INT_MS)");
    int v7 = 1111;
    goto LABEL_239;
  }
  float v55 = BlueFin::MAX_COH_INT_MS[v54];
  unsigned int v56 = *((_DWORD *)a2 + 60);
  float v57 = (float)v56;
  if (!v56 || v55 < v57)
  {
    GlCustomLog(15, "<SPA> ERROR: Mode not supported! CohT (%.1f) > MaxCoh (%.1f) with current sampling rate/sampling size configuration. Minimum RBW for this configuration is %.0f Hz\n", v57, v55, 1000.0 / v55);
    int v6 = "0";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1117, "AllocateCwResources", (char)"0");
    int v7 = 1117;
    goto LABEL_239;
  }
  float v58 = v55 / v57;
  BOOL v59 = v58 < 0.0;
  if ((double)(int)v58 == v58) {
    BOOL v59 = 0;
  }
  float v60 = (float)*((unsigned int *)a2 + 61) / (float)((int)v58 - v59);
  double v61 = v60 + 1.0;
  int v62 = (int)v61;
  if (v61 == (double)(int)v61) {
    int v62 = (int)v60;
  }
  *((_DWORD *)v3 + 158) = v62;
LABEL_123:
  if ((v12 & 0xFFFFFFFE) != 6)
  {
    if (v12 != 1) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  if ((*((unsigned char *)v3 + 294) & 0x40) != 0)
  {
    *((_DWORD *)v3 + 158) = 1;
    *((_DWORD *)v3 + 156) = 1;
  }
LABEL_128:
  if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)v3 + 40))) {
    *((_DWORD *)v3 + 7) = 0;
  }
  *(unsigned char *)(*((void *)v3 + 2) + 34522) = 1;
  if (BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)v3 + 40)))
  {
    if ((*((unsigned char *)v3 + 292) & 4) == 0
      || (unsigned int v175 = 0,
          v176[0] = 0,
          uint64_t v173 = 0,
          uint64_t v174 = 0,
          uint64_t v172 = 0,
          (*(void (**)(void, char *))(**(void **)(*((void *)v3 + 2) + 136) + 768))(*(void *)(*((void *)v3 + 2) + 136), (char *)v176 + 3), (*(void (**)(void, char *))(**(void **)(*((void *)v3 + 2) + 136) + 776))(*(void *)(*((void *)v3 + 2) + 136), (char *)v176 + 2), (*((_DWORD *)v3 + 6) & 0xFFFFFFFE) != 6))
    {
LABEL_227:
      unsigned int v158 = *((_DWORD *)v3 + 6) & 0xFFFFFFFE;
      if (v158 == 4)
      {
        *((unsigned char *)v3 + 688) = (*(uint64_t (**)(void))(**(void **)(*((void *)v3 + 2) + 136) + 1032))(*(void *)(*((void *)v3 + 2) + 136));
        if (*((_DWORD *)v3 + 156) < 2u) {
          char v160 = 0;
        }
        else {
          char v160 = (*(uint64_t (**)(void))(**(void **)(*((void *)v3 + 2) + 136) + 1032))(*(void *)(*((void *)v3 + 2) + 136));
        }
        *((unsigned char *)v3 + 608) = v160;
      }
      else if (v158 == 2)
      {
        BOOL v159 = *((_DWORD *)v3 + 156) > 1u;
        *((unsigned char *)v3 + 688) = v159;
        *((unsigned char *)v3 + 608) = v159;
      }
      goto LABEL_234;
    }
    uint64_t v81 = (*(uint64_t (**)(void))(**((void **)v3 + 1) + 80))(*((void *)v3 + 1));
    uint64_t v165 = 0;
    uint64_t v166 = 0;
    char v167 = 0;
    __int16 v168 = 1;
    uint64_t v169 = v81;
    int v170 = 0;
    __int16 v171 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 16))(v81, 1);
    float v82 = (float)v175;
    unsigned int v83 = *((_DWORD *)v3 + 6) & 0xFFFFFFFE;
    if ((*((_DWORD *)v3 + 6) & 0xFFFFFFFC | 2) == 6)
    {
      int v84 = *((_DWORD *)v3 + 73);
      if ((v84 & 0x20) != 0)
      {
        int v162 = *((_DWORD *)v3 + 73);
        unsigned int v163 = *((_DWORD *)v3 + 6) & 0xFFFFFFFE;
        uint64_t v164 = v3;
        double v85 = v82;
        int v86 = 1;
        float v87 = 1000.0;
        char v88 = 1;
        char v89 = 1;
        do
        {
          int v90 = 1;
          do
          {
            int v91 = 1;
            do
            {
              unsigned int v92 = (unsigned __int16)v91;
              unsigned int v93 = (8 * (v90 & 0x1F)) | (v91 << 6) | (2 * v86);
              int v94 = (v93 >> 3) & 7;
              LOWORD(v93) = 1000 * ((v93 >> 6) & 7) + 1000;
              double v95 = v85
                  - (log10((double)((((_WORD)v93 + (_WORD)v93 * (_WORD)v94) & 0xFFF8u) / ((2 * (v86 & 3)) | 1u))) * 20.0
                   + -52.0);
              if (v95 < 0.0) {
                double v95 = -v95;
              }
              float v96 = v95;
              if (v87 > v96)
              {
                char v89 = v86;
                char v88 = v90;
                float v87 = v96;
              }
              ++v91;
            }
            while (v92 < 7);
            unsigned int v97 = v90++;
          }
          while (v97 < 7);
          unsigned int v98 = v86;
          int v86 = (v86 + 1);
        }
        while (v98 < 3);
        char v99 = (8 * (v88 & 7)) | (2 * (v89 & 3));
        int v3 = v164;
        int v84 = v162;
        unsigned int v83 = v163;
        goto LABEL_170;
      }
    }
    else
    {
      int v84 = *((_DWORD *)v3 + 73);
    }
    double v100 = v82;
    if ((v84 & 0x60000) != 0)
    {
      int v101 = 0;
      char v102 = 0;
      unsigned __int8 v103 = 0;
      float v104 = 1000.0;
      do
      {
        int v105 = 0;
        do
        {
          int v106 = 0;
          do
          {
            unsigned __int8 v108 = 0;
            do
            {
              unsigned int v109 = v108;
              int v107 = (v101 << 9) | (v105 << 6);
              double v110 = v100
                   + (double)(int)((((v107 | (8 * v106) | v108) >> 6) & 7)
                                 + (v107 & 7 | v108 & 7)
                                 + (((v107 | (8 * v106)) >> 9) & 7)
                                 + (((v107 | (8 * v106) | v108) >> 3) & 7))
                   * -3.0;
              if (v110 < 0.0) {
                double v110 = -v110;
              }
              float v111 = v110;
              if (v104 > v111)
              {
                unsigned __int8 v103 = v108;
                char v102 = v106;
                float v104 = v111;
              }
              ++v108;
            }
            while (v109 < 7);
            unsigned int v112 = v106;
            int v106 = (v106 + 1);
          }
          while (v112 < 7);
          unsigned int v113 = v105;
          int v105 = (v105 + 1);
        }
        while (v113 < 7);
        unsigned int v114 = v101;
        int v101 = (v101 + 1);
      }
      while (v114 < 7);
      char v99 = v103 | (8 * v102);
    }
    else
    {
      char v115 = 1;
      float v116 = 1000.0;
      char v117 = 1;
      int v118 = 1;
      do
      {
        int v119 = 1;
        do
        {
          unsigned int v120 = v119;
          double v121 = v100
               - (log10((double)(int)((v119 & 7) + 1 + ((v119 & 7) + 1) * (((v119 | (8 * v118)) >> 3) & 7)))
                * 20.0
                + -12.0);
          if (v121 < 0.0) {
            double v121 = -v121;
          }
          float v122 = v121;
          if (v116 > v122)
          {
            char v117 = v118;
            char v115 = v119;
            float v116 = v122;
          }
          ++v119;
        }
        while (v120 < 7);
        unsigned int v123 = v118++;
      }
      while (v123 < 7);
      char v99 = v115 & 7 | (8 * (v117 & 7));
    }
LABEL_170:
    if ((v84 & 0x60000) != 0)
    {
      uint64_t v124 = 3221274912;
      uint64_t v125 = 3221274916;
    }
    else
    {
      uint64_t v125 = 3221274888;
      if (v83 == 6)
      {
        int v126 = *((unsigned __int8 *)v3 + 683);
        if (v126 == 3) {
          uint64_t v124 = 3221274892;
        }
        else {
          uint64_t v124 = 3221274884;
        }
        if (v126 == 3) {
          uint64_t v125 = 3221274896;
        }
        else {
          uint64_t v125 = 3221274888;
        }
LABEL_181:
        if ((v84 & 0x20) != 0)
        {
          uint64_t v127 = 3221274932;
          goto LABEL_189;
        }
        if (v83 == 6 && (v84 & 0x40) != 0)
        {
          uint64_t v127 = 3221274940;
LABEL_189:
          if (HIBYTE(v176[0]))
          {
            uint64_t v128 = (*(uint64_t (**)(void))(**((void **)v3 + 1) + 208))(*((void *)v3 + 1));
            uint64_t v129 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 32))(v128);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v129 + 32))(v129, &v165, 9, v124, 0, 1);
            uint64_t v130 = (*(uint64_t (**)(void))(**((void **)v3 + 1) + 208))(*((void *)v3 + 1));
            uint64_t v131 = (*(uint64_t (**)(uint64_t))(*(void *)v130 + 32))(v130);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v131 + 32))(v131, &v165, 9, v125, v99 & 0x3F, 63);
          }
          if (BYTE2(v176[0]))
          {
            uint64_t v132 = (*(uint64_t (**)(void))(**((void **)v3 + 1) + 208))(*((void *)v3 + 1));
            uint64_t v133 = (*(uint64_t (**)(uint64_t))(*(void *)v132 + 32))(v132);
            float v134 = fmaxf((float)HIDWORD(v174), 4.0);
            float v135 = v134 / 20.0;
            BOOL v136 = v134 < 98.0;
            float v137 = 4.9;
            if (v136) {
              float v137 = v135;
            }
            float v138 = __exp10f(v137);
            double v139 = logf(v138) / 0.693147181;
            if (v139 <= 0.0)
            {
              if (v139 >= 0.0)
              {
                int v141 = 0;
                goto LABEL_200;
              }
              double v140 = -0.5;
            }
            else
            {
              double v140 = 0.5;
            }
            int v141 = (int)(v139 + v140);
LABEL_200:
            double v142 = v138;
            double v143 = v138 * 64.0;
            double v144 = v143 / ldexpf(1.0, v141);
            uint64_t v145 = v3;
            if (v144 <= 0.0)
            {
              if (v144 >= 0.0)
              {
                unsigned int v147 = 0;
LABEL_206:
                int v148 = -1;
                int v149 = v141;
                while (1)
                {
                  float v150 = ldexpf(1.0, v141 + v148);
                  double v151 = v143 / v150;
                  if (v151 > 0.0) {
                    break;
                  }
                  if (v151 < 0.0)
                  {
                    double v152 = v151 + -0.5;
                    goto LABEL_212;
                  }
                  unsigned int v153 = 0;
LABEL_213:
                  double v154 = v142 + (float)(v150 * (float)v153) * -0.015625;
                  if (v154 < 0.0) {
                    double v154 = -v154;
                  }
                  float v155 = v154;
                  if (v138 > v155)
                  {
                    float v138 = v155;
                    int v149 = v141 + v148;
                    unsigned int v147 = v153;
                  }
                  if (++v148 == 2)
                  {
                    double v156 = log((float)v147 * 0.015625) * 32.0 / 0.693147181;
                    if (v156 <= 0.0)
                    {
                      int v3 = v145;
                      if (v156 < 0.0) {
                        int v157 = (int)(v156 + -0.5);
                      }
                      else {
                        int v157 = 0;
                      }
                    }
                    else
                    {
                      int v157 = (int)(v156 + 0.5);
                      int v3 = v145;
                    }
                    if (v157 <= 1) {
                      LOWORD(v157) = 1;
                    }
                    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v133
                                                                                                  + 32))(v133, &v165, 9, v127, v157 & 0x3FF | (32 * v149) & 0x200u, 66559);
                    goto LABEL_226;
                  }
                }
                double v152 = v151 + 0.5;
LABEL_212:
                unsigned int v153 = (int)v152;
                goto LABEL_213;
              }
              double v146 = -0.5;
            }
            else
            {
              double v146 = 0.5;
            }
            unsigned int v147 = (int)(v144 + v146);
            goto LABEL_206;
          }
LABEL_226:
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v165);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v165);
          goto LABEL_227;
        }
LABEL_185:
        if ((v84 & 0x60000) != 0) {
          uint64_t v127 = 3221274948;
        }
        else {
          uint64_t v127 = 3221274924;
        }
        goto LABEL_189;
      }
      uint64_t v124 = 3221274884;
    }
    if ((v83 | 2) != 6) {
      goto LABEL_185;
    }
    goto LABEL_181;
  }
LABEL_234:
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)v3 + 1) + 88))(*((void *)v3 + 1), (uint64_t)v3 + 304);
  *((unsigned char *)v3 + 32) = 1;
  return result;
}

void sub_263AA6614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

double BlueFin::GlMeSrdTestMgrSPA::GetSampleRate(BlueFin::GlMeSrdTestMgrSPA *this)
{
  int v1 = *((_DWORD *)this + 73);
  int v2 = v1 & 0x600;
  if (v2 == 512)
  {
    double result = 1.023;
  }
  else if (v2 == 1024)
  {
    double result = 2.046;
  }
  else
  {
    double result = 4.092;
    if (v2 != 1536) {
      double result = 0.0;
    }
  }
  double v4 = result + result;
  if ((v1 & 0x40) == 0) {
    double v4 = result;
  }
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 6) {
    return v4;
  }
  return result;
}

void BlueFin::GlMeSrdTestMgrSPA::RunCwTest(BlueFin::GlMeSrdTestMgrSPA *this)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 32))
  {
    float v96 = "m_bCwResources";
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1186, "RunCwTest", (char)"m_bCwResources");
    int v97 = 1186;
    goto LABEL_177;
  }
  int v2 = (BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40);
  if (BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump((BlueFin::GlMeSrdTestMgrSPA *)((char *)this + 40)))
  {
    int v3 = *((_DWORD *)this + 73);
    int v4 = v3 & 0x180;
    if (v4 == 384) {
      char v5 = 4;
    }
    else {
      char v5 = 5;
    }
    if (v4 == 256) {
      char v6 = 2;
    }
    else {
      char v6 = v5;
    }
    if (v4 == 128) {
      char v7 = 1;
    }
    else {
      char v7 = v6;
    }
    int v8 = 4 * ((v3 & 0x600) == 1536);
    if ((v3 & 0x600) == 0x400) {
      int v8 = 2;
    }
    if ((v3 & 0x600) == 0x200) {
      int v9 = 1;
    }
    else {
      int v9 = v8;
    }
    int v11 = (_DWORD *)((char *)this + 24);
    int v10 = *((_DWORD *)this + 6);
    if (v9 == 1) {
      int v12 = 2;
    }
    else {
      int v12 = 4;
    }
    if ((v3 & 0x20) == 0) {
      int v12 = v9;
    }
    if ((v10 & 0xFFFFFFFC | 2) == 6) {
      int v13 = v12;
    }
    else {
      int v13 = v9;
    }
    if ((v10 & 0xFFFFFFFE) == 6)
    {
      if (v13 <= 2) {
        int v14 = 2;
      }
      else {
        int v14 = v13;
      }
      if ((v3 & 0x40) != 0) {
        int v13 = v14;
      }
      goto LABEL_34;
    }
  }
  else
  {
    char v7 = 0;
    int v13 = 0;
    int v10 = *((_DWORD *)this + 6);
  }
  int v11 = (_DWORD *)((char *)this + 24);
  if (v10 == 1)
  {
    uint64_t v15 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    char v100 = 0;
    __int16 v101 = 1;
    uint64_t v102 = v15;
    int v103 = 0;
    __int16 v104 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 1);
    uint64_t v16 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, &v98, 4, 12288, 48, 48);
    uint64_t v18 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, &v98, 4, 12299, 1, 1);
    uint64_t v20 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 32))(v20);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, &v98, 4, 12294);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
    if (*v11 == 1)
    {
LABEL_37:
      if (BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(v2)) {
        goto LABEL_69;
      }
      double v25 = *((double *)this + 80)
          / ((*(double (**)(void))(**(void **)(*((void *)this + 2) + 136) + 88))(*(void *)(*((void *)this + 2) + 136))
           * 2.32830644e-10);
      if (v25 <= 0.0)
      {
        if (v25 >= 0.0)
        {
          int v30 = 0;
LABEL_51:
          if (*v11 == 1)
          {
            uint64_t v31 = 4;
            uint64_t v32 = 64;
          }
          else if ((*v11 & 0xFFFFFFFE) == 2 && !BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(v2))
          {
            uint64_t v32 = 3221226044;
            int v33 = *((_DWORD *)this + 73);
            if ((v33 & 2) == 0)
            {
              if ((v33 & 0x20) != 0) {
                uint64_t v32 = 3221226064;
              }
              else {
                uint64_t v32 = 3221226144;
              }
            }
            uint64_t v31 = 9;
          }
          else
          {
            uint64_t v32 = 0;
            uint64_t v31 = 4;
          }
          uint64_t v34 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          char v100 = 0;
          __int16 v101 = 1;
          uint64_t v102 = v34;
          int v103 = 0;
          __int16 v104 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, 1);
          uint64_t v35 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
          uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 32))(v35);
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void))(*(void *)v36 + 24))(v36, &v98, v31, v32, -v30);
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
LABEL_69:
          uint64_t v37 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          char v100 = 0;
          __int16 v101 = 1;
          uint64_t v102 = v37;
          int v103 = 0;
          __int16 v104 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, 1);
          int v38 = *((_DWORD *)this + 6);
          if (v38 == 1)
          {
            uint64_t v39 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 32))(v39);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v40 + 32))(v40, &v98, 4, 12288, 0, 0x4000);
            uint64_t v41 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 32))(v41);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, &v98, 4, 12288, 0x4000, 0x4000);
            uint64_t v43 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 32))(v43);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v44 + 32))(v44, &v98, 4, 12288, 0, 0x4000);
            uint64_t v45 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 32))(v45);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v46 + 16))(v46, &v98, 4, 12318);
            uint64_t v47 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 32))(v47);
            uint64_t v49 = 12319;
            uint64_t v50 = 4;
          }
          else
          {
            if ((v38 & 0xFFFFFFFE) != 2 || BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(v2)) {
              goto LABEL_74;
            }
            uint64_t v64 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v65 = (*(uint64_t (**)(uint64_t))(*(void *)v64 + 32))(v64);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v65 + 16))(v65, &v98, 10, 27);
            uint64_t v66 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v66 + 32))(v66);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v67 + 16))(v67, &v98, 10, 29);
            uint64_t v68 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v69 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 32))(v68);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v69 + 16))(v69, &v98, 10, 30);
            uint64_t v70 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v71 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 32))(v70);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v71 + 16))(v71, &v98, 10, 31);
            uint64_t v72 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 32))(v72);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v73 + 16))(v73, &v98, 10, 32);
            uint64_t v74 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 32))(v74);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v75 + 16))(v75, &v98, 9, 3221274864);
            uint64_t v76 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v77 = (*(uint64_t (**)(uint64_t))(*(void *)v76 + 32))(v76);
            (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v77 + 16))(v77, &v98, 9, 3221275120);
            uint64_t v78 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
            uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 32))(v78);
            uint64_t v49 = 3221275376;
            uint64_t v50 = 9;
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v48 + 16))(v48, &v98, v50, v49);
LABEL_74:
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
          uint64_t v51 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          char v100 = 0;
          __int16 v101 = 1;
          uint64_t v102 = v51;
          int v103 = 0;
          __int16 v104 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, 1);
          if (*((_DWORD *)this + 6) == 1)
          {
            for (uint64_t i = 0; i != 32; i += 8)
            {
              uint64_t v53 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
              uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 32))(v53);
              (*(void (**)(uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v54 + 24))(v54, &v98, 4, *(unsigned int *)((char *)&unk_263BB1BD4 + i), *(unsigned int *)((char *)&unk_263BB1BD4 + i + 4));
            }
          }
          else
          {
            for (uint64_t j = 0; j != 40; j += 8)
            {
              uint64_t v56 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
              uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 32))(v56);
              (*(void (**)(uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v57 + 24))(v57, &v98, 9, *(unsigned int *)((char *)&unk_263BB1BF4 + j), *(unsigned int *)((char *)&unk_263BB1BF4 + j + 4));
            }
          }
          BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
          BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
          *((_DWORD *)this + 7) = 1;
          if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(v2)) {
            BlueFin::GlMeSrdTestMgrSPA::PollMsCounter(this, 1);
          }
          if ((*((unsigned char *)this + 292) & 4) != 0) {
            BlueFin::GlMeSrdTestMgrSPA::AgcLock(this, 1);
          }
          if ((*v11 & 0xFFFFFFFE) != 6
            || *v11 != 6
            && !(*(unsigned int (**)(void))(**(void **)(*((void *)this + 2) + 136) + 40))(*(void *)(*((void *)this + 2) + 136)))
          {
LABEL_110:
            if (!BlueFin::GlMeSrdTestMgrCwParams::IsERAMDump(v2)) {
              return;
            }
            unsigned int v80 = *v11 & 0xFFFFFFFE;
            if (v80 == 6)
            {
              int v81 = *((_DWORD *)this + 73);
              if ((v81 & 0x20000) != 0)
              {
                GlCustomLog(11, "<SPA> L2 SPA is not avialable on Minnow. Assert to notify the user\n");
                float v96 = "0";
                DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1291, "RunCwTest", (char)"0");
                int v97 = 1291;
                goto LABEL_177;
              }
              if ((v81 & 0x20) == 0)
              {
                if ((v81 & 0x40) != 0)
                {
                  char v82 = 1;
                  goto LABEL_124;
                }
LABEL_119:
                if ((v81 & 0x60000) != 0)
                {
                  if ((v81 & 0x20000) != 0) {
                    char v82 = 5;
                  }
                  else {
                    char v82 = 6;
                  }
                }
                else
                {
                  char v82 = 0;
                }
                goto LABEL_124;
              }
            }
            else
            {
              int v81 = *((_DWORD *)this + 73);
              if (v80 != 4 || (v81 & 0x20) == 0) {
                goto LABEL_119;
              }
            }
            char v82 = 2;
LABEL_124:
            LOBYTE(v108) = v82;
            if (v7 == 1 && v13 == 1)
            {
              int v83 = 0;
LABEL_164:
              int v109 = v83;
              int v110 = 0;
              int v89 = v81 & 0x180;
              if (v89 == 384) {
                int v90 = 8;
              }
              else {
                int v90 = 10;
              }
              if (v89 == 256) {
                int v91 = 4;
              }
              else {
                int v91 = v90;
              }
              if (v89 == 128) {
                unsigned int v92 = 2;
              }
              else {
                unsigned int v92 = v91;
              }
              unsigned int v111 = 0x1DF000 / v92;
              uint64_t v93 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
              uint64_t v98 = 0;
              uint64_t v99 = 0;
              char v100 = 0;
              __int16 v101 = 1;
              uint64_t v102 = v93;
              int v103 = 0;
              __int16 v104 = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 16))(v93, 1);
              uint64_t v94 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))();
              uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 24))(v94);
              (*(void (**)(uint64_t, uint64_t *, int *))(*(void *)v95 + 24))(v95, &v98, &v108);
              BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
              goto LABEL_174;
            }
            if (v7 == 2 && v13 == 1)
            {
              int v83 = 1;
              goto LABEL_164;
            }
            if (v7 == 4 && v13 == 1)
            {
              int v83 = 2;
              goto LABEL_164;
            }
            if (v7 == 1 && v13 == 2)
            {
              int v83 = 3;
              goto LABEL_164;
            }
            if (v7 == 2 && v13 == 2)
            {
              int v83 = 4;
              goto LABEL_164;
            }
            if (v7 == 4 && v13 == 2)
            {
              int v83 = 5;
              goto LABEL_164;
            }
            if (v7 == 1 && v13 == 4)
            {
              int v83 = 6;
              goto LABEL_164;
            }
            if (v7 == 2 && v13 == 4)
            {
              int v83 = 7;
              goto LABEL_164;
            }
            if (v7 == 4 && v13 == 4)
            {
              int v83 = 8;
              goto LABEL_164;
            }
            float v96 = "0";
            DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1316, "RunCwTest", (char)"0");
            int v97 = 1316;
LABEL_177:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", v97, v96);
          }
          float v58 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 136)
                                                                     + 1072))(*(void *)(*((void *)this + 2) + 136));
          *(void *)int v107 = 0;
          unsigned __int8 v105 = 0;
          uint64_t v59 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          char v100 = 0;
          __int16 v101 = 1;
          uint64_t v102 = v59;
          int v103 = 0;
          __int16 v104 = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(v59, 1);
          int v60 = *((_DWORD *)this + 73);
          if ((v60 & 0x60000) == 0)
          {
            if ((v60 & 0x20) != 0) {
              int v62 = 2;
            }
            else {
              int v62 = 3;
            }
            if ((v60 & 2) != 0) {
              int v63 = 1;
            }
            else {
              int v63 = v62;
            }
            BlueFin::GlMeSrdTestMgrSPA::GetNotchConfiguration((uint64_t)this, v58, &v108, v106, &v105, v63);
            BlueFin::GlMeSrdTestMgrSPA::ProgramNotchMinnow(this, (BlueFin::GlMeSrdTestMgrSPA *)&v98, &v108, v106, v105, v63, &v107[1], v107);
            goto LABEL_101;
          }
          if ((v60 & 0x20000) != 0)
          {
            int v61 = 5;
            BlueFin::GlMeSrdTestMgrSPA::GetNotchConfiguration((uint64_t)this, v58, &v108, v106, &v105, 5);
          }
          else
          {
            if ((v60 & 0x60000) != 0x40000)
            {
LABEL_101:
              if (v107[1])
              {
                if ((*v11 & 0xFFFFFFFE) == 6 && *((unsigned char *)this + 683) == 3) {
                  uint64_t v79 = 3221275432;
                }
                else {
                  uint64_t v79 = 3221275428;
                }
                BlueFin::GlMeSrdTestMgrSPA::SendNotchRpc((BlueFin::GlMeSrdTestMgrSPA *)&v98, (BlueFin::GlMeSrdTransaction *)v79);
              }
              if (v107[0]) {
                BlueFin::GlMeSrdTestMgrSPA::SendNotchRpc((BlueFin::GlMeSrdTestMgrSPA *)&v98, (BlueFin::GlMeSrdTransaction *)0xC000C338);
              }
              BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
              BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
              goto LABEL_110;
            }
            int v61 = 4;
            BlueFin::GlMeSrdTestMgrSPA::GetNotchConfiguration((uint64_t)this, v58, &v108, v106, &v105, 4);
          }
          BlueFin::GlMeSrdTestMgrSPA::ProgramNotchMinnow(this, (BlueFin::GlMeSrdTestMgrSPA *)&v98, &v108, v106, v105, v61, &v107[1], v107);
          goto LABEL_101;
        }
        double v26 = -0.5;
      }
      else
      {
        double v26 = 0.5;
      }
      int v30 = (int)(v25 + v26);
      goto LABEL_51;
    }
  }
LABEL_34:
  uint64_t v22 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  char v100 = 0;
  __int16 v101 = 1;
  uint64_t v102 = v22;
  int v103 = 0;
  __int16 v104 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, 1);
  uint64_t v23 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void, uint64_t))(*(void *)v24 + 32))(v24, &v98, 8, 17, 0, 6);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
  if ((*v11 & 0xFFFFFFFE) != 6) {
    goto LABEL_37;
  }
  if ((*((unsigned char *)this + 294) & 0x40) == 0)
  {
    *((unsigned char *)this + 683) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 136) + 1176))(*(void *)(*((void *)this + 2) + 136));
    goto LABEL_37;
  }
  LOBYTE(v108) = 0;
  int v110 = 0;
  *((unsigned char *)this + 681) = *((unsigned char *)this + 296);
  int v27 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 136) + 1176))(*(void *)(*((void *)this + 2) + 136));
  *((unsigned char *)this + 683) = v27;
  unint64_t v28 = *((char *)this + 296);
  if (v28 <= 0x1F) {
    *((unsigned char *)this + 680) = byte_263BB1C5F[v28];
  }
  if (*v11 == 7)
  {
    if ((*(uint64_t (**)(void))(**(void **)(*((void *)this + 2) + 136) + 40))(*(void *)(*((void *)this + 2) + 136)))
    {
      switch(*((unsigned char *)this + 296))
      {
        case 1:
        case 2:
        case 5:
        case 6:
        case 0xE:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x18:
        case 0x19:
        case 0x1F:
          GlCustomLog(15, "<SPA> ADC data sel %d is not supported in Saturnas\n", *((unsigned __int8 *)this + 296));
          float v96 = "0";
          DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 2871, "GetAdcCaptureSettings", (char)"0");
          int v97 = 2871;
          goto LABEL_177;
        case 3:
        case 4:
          *((unsigned char *)this + 682) = 0;
          goto LABEL_152;
        case 7:
        case 8:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x16:
        case 0x17:
        case 0x1A:
        case 0x1B:
        case 0x1C:
          goto LABEL_150;
        case 9:
        case 0xA:
          goto LABEL_142;
        case 0xF:
          goto LABEL_148;
        case 0x10:
        case 0x11:
        case 0x1D:
        case 0x1E:
          char v29 = 6;
          goto LABEL_151;
        case 0x12:
          char v29 = 4;
          goto LABEL_151;
        default:
          goto LABEL_152;
      }
    }
    int v27 = *((unsigned __int8 *)this + 683);
    LODWORD(v28) = *((unsigned __int8 *)this + 296);
  }
  else
  {
    LODWORD(v28) = v28;
  }
  if (v27 == 4)
  {
    if (v28 != 26 && v28 != 20)
    {
      GlCustomLog(15, "<SPA> ADC capture of signal %d is not supported in VLP mode\n", v28);
      float v96 = "0";
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 2918, "GetAdcCaptureSettings", (char)"0");
      int v97 = 2918;
      goto LABEL_177;
    }
    char v29 = 3;
LABEL_151:
    *((unsigned char *)this + 682) = v29;
  }
  else
  {
    switch((int)v28)
    {
      case 1:
      case 2:
      case 14:
      case 19:
      case 20:
      case 21:
      case 24:
      case 25:
        goto LABEL_150;
      case 3:
      case 4:
        GlCustomLog(15, "<SPA> ADC data sel %d. Every sample will be repeated three times at 200MHz\n", v28);
LABEL_150:
        char v29 = 1;
        goto LABEL_151;
      case 5:
      case 6:
      case 31:
LABEL_142:
        char v29 = 2;
        goto LABEL_151;
      case 7:
      case 8:
      case 11:
      case 12:
      case 13:
      case 22:
      case 23:
      case 26:
      case 27:
      case 28:
        char v29 = 5;
        goto LABEL_151;
      case 9:
      case 10:
        char v84 = 5;
        goto LABEL_154;
      case 15:
LABEL_148:
        char v29 = 7;
        goto LABEL_151;
      case 16:
      case 17:
      case 29:
      case 30:
        char v84 = 7;
LABEL_154:
        *((unsigned char *)this + 682) = v84;
        GlCustomLog(15, "<SPA> ADC data sel %d. Every sample will be repeated twice at 200MHz\n");
        break;
      case 18:
        *((unsigned char *)this + 682) = 5;
        GlCustomLog(15, "<SPA> ADC data sel %d. Every sample will be repeated x3 at 200MHz\n");
        break;
      default:
        break;
    }
  }
LABEL_152:
  *((_WORD *)this + 342) = 1024;
  int v85 = *((unsigned char *)this + 681) & 0x1F | (32 * *((unsigned __int8 *)this + 680)) | (*((unsigned __int8 *)this + 682) << 6) | 0xC000;
  GlCustomLog(15, "<SPA> ADC Config: %08X - DataSel %d DataMode %d FreqSel %d\n", v85, *((unsigned __int8 *)this + 681), *((unsigned __int8 *)this + 680), *((unsigned __int8 *)this + 682));
  unsigned int v111 = v85;
  int v109 = 9;
  uint64_t v86 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  char v100 = 0;
  __int16 v101 = 1;
  uint64_t v102 = v86;
  int v103 = 0;
  __int16 v104 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, 1);
  uint64_t v87 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))();
  uint64_t v88 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 24))(v87);
  (*(void (**)(uint64_t, uint64_t *, int *))(*(void *)v88 + 24))(v88, &v98, &v108);
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)&v98);
LABEL_174:
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)&v98);
}

void sub_263AA7EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

void BlueFin::GlMeSrdTestMgrSPA::AgcLock(BlueFin::GlMeSrdTestMgrSPA *this, int a2)
{
  if (*((_DWORD *)this + 6) == 1)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 80))(*((void *)this + 1));
    v8[0] = 0;
    v8[1] = 0;
    char v9 = 0;
    __int16 v10 = 1;
    uint64_t v11 = v4;
    int v12 = 0;
    __int16 v13 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 1);
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 1) + 208))(*((void *)this + 1));
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
    if (a2) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 6;
    }
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, v8, 4, 12288, v7, 6);
    BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v8);
    BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v8);
  }
}

void sub_263AA8160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)va);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::ClearCwResources(BlueFin::GlMeSrdTestMgrSPA *this)
{
  if ((*((unsigned char *)this + 292) & 4) != 0) {
    BlueFin::GlMeSrdTestMgrSPA::AgcLock(this, 0);
  }
  if (!*((unsigned char *)this + 32))
  {
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1339, "ClearCwResources", (char)"m_bCwResources");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", 1339, "m_bCwResources");
  }
  *((unsigned char *)this + 32) = 0;
  int v2 = *(uint64_t (**)(void))(**((void **)this + 1) + 96);

  return v2();
}

void BlueFin::GlMeSrdTestMgrSPA::GetCwResults(BlueFin::GlMeSrdTestMgrSPA *this)
{
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::GetSpaIqResults(BlueFin::GlMeSrdTestMgrSPA *this)
{
  if (!*((unsigned char *)this + 648))
  {
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 1358, "GetSpaIqResults", (char)"m_bDoubleBufferResultsReady");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", 1358, "m_bDoubleBufferResultsReady");
  }
  *((unsigned char *)this + 648) = 0;
  return (uint64_t)this + 384;
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::FrequencyToNco(BlueFin::GlMeSrdTestMgrSPA *this, double a2)
{
  unsigned int v4 = *((_DWORD *)this + 6) & 0xFFFFFFFE;
  if (v4 == 6)
  {
    double v6 = dbl_263BB1BB0[(*((unsigned char *)this + 294) & 6) == 0];
    double v7 = fabs(a2);
    if (v7 >= v6 * 0.5) {
      double v7 = v6 * 0.5;
    }
    if (a2 < 0.0) {
      double v7 = -v7;
    }
    double v8 = v7 * 1048576.0;
  }
  else
  {
    if (v4 == 4)
    {
      double v9 = (double)(*(unsigned int (**)(void))(**(void **)(*((void *)this + 2) + 136) + 96))(*(void *)(*((void *)this + 2) + 136))
         / 1000000.0;
      if ((*((_DWORD *)this + 6) & 0xFFFFFFFC | 2) == 6)
      {
        if ((*((_DWORD *)this + 73) & 0x20) != 0) {
          __int16 v10 = (double *)((char *)this + 712);
        }
        else {
          __int16 v10 = (double *)((char *)this + 704);
        }
      }
      else
      {
        __int16 v10 = (double *)((char *)this + 704);
      }
      double v12 = (*((double *)this + 83) - *v10) * 1048576.0 / v9 + 0.5;
      double v13 = fmod(v12, 4294967300.0);
      if (v12 <= 4294967300.0) {
        double v13 = v12;
      }
      if (v13 < -4294967300.0) {
        double v13 = -fmod(-v13, 4294967300.0);
      }
      if (v13 < 0.0) {
        unsigned int v14 = --v13;
      }
      else {
        unsigned int v14 = v13;
      }
      double v5 = v9 * (double)v14 * 0.000000953674316;
    }
    else
    {
      if (v4 != 2) {
        return 0;
      }
      (*(void (**)(void))(**(void **)(*((void *)this + 2) + 136) + 96))(*(void *)(*((void *)this + 2) + 136));
      double v5 = *((double *)this + 82) - *((double *)this + 87);
    }
    double v6 = v5 / 48.0 * 1000000.0 * 0.000000953674316;
    double v8 = fabs(a2);
    if (a2 < 0.0) {
      double v8 = -v8;
    }
  }
  double v15 = v8 / v6;
  double v16 = fmod(v8 / v6, 4294967300.0);
  if (v15 <= 4294967300.0) {
    double v16 = v15;
  }
  if (v16 < -4294967300.0) {
    double v16 = -fmod(-v16, 4294967300.0);
  }
  if (v16 < 0.0) {
    return --v16;
  }
  else {
    return v16;
  }
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::SendNotchRpc(BlueFin::GlMeSrdTestMgrSPA *this, BlueFin::GlMeSrdTransaction *a2)
{
  if ((a2 & 3) != 0)
  {
    DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 2465, "SendNotchRpc", (char)"(ulAddr & 0x3)==0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", 2465, "(ulAddr & 0x3)==0");
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 48))(*((void *)this + 3));
  int v3 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2) + 24);

  return v3();
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::GetNotchConfiguration(uint64_t result, unsigned __int8 *a2, _DWORD *a3, unsigned char *a4, unsigned char *a5, int a6)
{
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  *a3 = 0;
  *a4 = 0;
  a3[1] = 0;
  a4[1] = 0;
  do
  {
    if (*a2 == a6)
    {
      unsigned int v12 = a2[1];
      if (v12 >= 0x10)
      {
        DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 2498, "GetNotchConfiguration", (char)"pNotches->ucLoopCoefficient<=15");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", 2498, "pNotches->ucLoopCoefficient<=15");
      }
      a3[v11] = *((_DWORD *)a2 + 1);
      a4[v11++] = v12;
    }
    if (v10 > 0x16) {
      break;
    }
    ++v10;
    a2 += 8;
  }
  while (v11 < 2);
  if ((*(_DWORD *)(result + 24) & 0xFFFFFFFE) != 6)
  {
    double result = (*(uint64_t (**)(void))(**(void **)(*(void *)(result + 16) + 136) + 1080))(*(void *)(*(void *)(result + 16) + 136));
    if (a6 == 1 && result == 1)
    {
      a3[v11] = -2100000;
      a4[v11] = 8;
      LOBYTE(v11) = 1;
    }
  }
  *a5 = v11;
  return result;
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::ProgramNotchMinnow(BlueFin::GlMeSrdTestMgrSPA *this, BlueFin::GlMeSrdTestMgrSPA *a2, int *a3, unsigned char *a4, int a5, int a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v12 = 672;
  if ((*((unsigned char *)this + 294) & 6) == 0) {
    uint64_t v12 = 664;
  }
  double v13 = *(double *)((char *)this + v12);
  if (!a5)
  {
    *a3 = 0;
    *a4 = 0;
  }
  switch(a6)
  {
    case 1:
      if (a5 == 1) {
        int v19 = 268500992;
      }
      else {
        int v19 = 269549568;
      }
      if (!a5) {
        int v19 = 268632064;
      }
      *a7 |= v19;
      uint64_t v14 = 3221275392;
      uint64_t v16 = 3221275396;
      uint64_t v17 = 3221275400;
      uint64_t v18 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
      break;
    case 2:
      if (a5 == 1) {
        int v20 = 268435712;
      }
      else {
        int v20 = 268439808;
      }
      int v21 = 268436224;
      if (a5) {
        int v21 = v20;
      }
      *a7 |= v21;
      uint64_t v14 = 3221275404;
      uint64_t v16 = 3221275408;
      uint64_t v17 = 3221275412;
      uint64_t v18 = &byte_263BAA4B0;
      break;
    case 3:
      if (a5 == 1) {
        int v22 = 268435457;
      }
      else {
        int v22 = 268435473;
      }
      int v23 = 268435459;
      if (a5) {
        int v23 = v22;
      }
      *a7 |= v23;
      uint64_t v14 = 3221275416;
      uint64_t v16 = 3221275420;
      uint64_t v17 = 3221275424;
      uint64_t v18 = &byte_263BAA4B2;
      break;
    case 4:
    case 5:
      uint64_t v14 = 3221275436;
      *a7 |= 0x20000000u;
      if (a5 == 1) {
        int v15 = 256;
      }
      else {
        int v15 = 4352;
      }
      if (!a5) {
        int v15 = 768;
      }
      *a8 |= v15;
      uint64_t v16 = 3221275440;
      uint64_t v17 = 3221275444;
      uint64_t v18 = &byte_263BAA4BC;
      break;
    default:
      DeviceFaultNotify("glmesrd_test_mgr_spa.cpp", 2727, "ProgramNotchMinnow", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_test_mgr_spa.cpp", 2727, "0");
  }
  double v24 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[*v18];
  double v25 = 0.0;
  if (a5)
  {
    double v26 = (double)*a3;
    BlueFin::GlMeSrdTestMgrSPA::FrequencyToNco(this, -v26);
    BlueFin::GlMeSrdTestMgrSPA::SendNotchRpc(a2, (BlueFin::GlMeSrdTransaction *)v14);
    double v25 = 0.0 - v26;
    if (a5 != 1)
    {
      double v27 = v25 + (double)a3[1];
      BlueFin::GlMeSrdTestMgrSPA::FrequencyToNco(this, -v27);
      BlueFin::GlMeSrdTestMgrSPA::SendNotchRpc(a2, (BlueFin::GlMeSrdTransaction *)v16);
      double v25 = v25 - v27;
    }
  }
  BlueFin::GlMeSrdTestMgrSPA::FrequencyToNco(this, (v24 / 1000000.0 - v13) * 1000000.0 + 0.0 - v25);

  return BlueFin::GlMeSrdTestMgrSPA::SendNotchRpc(a2, (BlueFin::GlMeSrdTransaction *)v17);
}

void BlueFin::GlMeSrdTestMgrRpcMiscSPA::~GlMeSrdTestMgrRpcMiscSPA(BlueFin::GlMeSrdTestMgrRpcMiscSPA *this)
{
}

uint64_t BlueFin::GlMeSrdTestMgrSPA::HasResults(BlueFin::GlMeSrdTestMgrSPA *this)
{
  return *((unsigned __int8 *)this + 648);
}

void BlueFin::GlMeSrdPacketManager::~GlMeSrdPacketManager(BlueFin::GlMeSrdPacketManager *this)
{
  *(void *)this = &unk_270EBDEA8;
  uint64_t v2 = *((void *)this + 14);
  if (v2) {
    BlueFin::GlEventPump::RemoveActive(v2, this);
  }
}

{
  uint64_t vars8;

  BlueFin::GlMeSrdPacketManager::~GlMeSrdPacketManager(this);

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlMeHost2SrdData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3 >= 2)
  {
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 682, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", 682, "ucVersion >= 1 && ucVersion <= 1");
  }
  int v11 = 76;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  unsigned int v10 = &unk_270EBA2F0;
  char v14 = 1;
  double v7 = (_WORD *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v2 + 8));
  if (*v7)
  {
    unint64_t v8 = 0;
    do
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)(v6 + 16) + v8++));
    while (v8 < *(unsigned __int16 *)(v6 + 8));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
  return 1;
}

uint64_t BlueFin::GlMeHost2SrdData::Deserialize(BlueFin::GlMeHost2SrdData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 76 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 4) = U16;
    if (U16)
    {
      unint64_t v7 = 0;
      do
        *(unsigned char *)(*((void *)this + 2) + v7++) = BlueFin::GlSysLogEntry::GetU8(a2);
      while (v7 < *((unsigned __int16 *)this + 4));
    }
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glmesrd_packet_manager.cpp", 710, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", 710, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v3;
}

uint64_t BlueFin::GlMeSrd2HostData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3 <= 1) {
    char v7 = 1;
  }
  else {
    char v7 = v3;
  }
  if (v3 > 1)
  {
    DeviceFaultNotify("glmesrd_packet_manager.cpp", 722, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", 722, "ucVersion >= 1 && ucVersion <= 1");
  }
  LOWORD(v8) = *(_WORD *)(v2 + 8);
  if ((_WORD)v8)
  {
    unsigned int v9 = 0;
    __int16 v10 = 0;
    do
    {
      int v16 = 77;
      char v17 = v7;
      uint64_t v18 = 0x1000000000000;
      uint64_t v15 = &unk_270EBA2F0;
      char v19 = v7;
      unsigned int v11 = (unsigned __int16)(v8 - v10);
      if (v11 >= 0x13FD) {
        uint64_t v12 = 5117;
      }
      else {
        uint64_t v12 = v11;
      }
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, v12);
      if (v12)
      {
        uint64_t v13 = v9;
        do
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)(v6 + 16) + v13++));
          --v12;
        }
        while (v12);
      }
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v5, 4);
      __int16 v10 = v9 + 5117;
      unsigned int v9 = (unsigned __int16)(v9 + 5117);
      unsigned int v8 = *(unsigned __int16 *)(v6 + 8);
    }
    while (v9 < v8);
  }
  return 1;
}

uint64_t BlueFin::GlMeSrd2HostData::Deserialize(BlueFin::GlMeSrd2HostData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 77 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 4) = U16;
    if (U16)
    {
      unint64_t v7 = 0;
      do
        *(unsigned char *)(*((void *)this + 2) + v7++) = BlueFin::GlSysLogEntry::GetU8(a2);
      while (v7 < *((unsigned __int16 *)this + 4));
    }
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glmesrd_packet_manager.cpp", 762, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager.cpp", 762, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v3;
}

void BlueFin::GlMeSrd2HostData::~GlMeSrd2HostData(BlueFin::GlMeSrd2HostData *this)
{
}

void BlueFin::GlMeHost2SrdData::~GlMeHost2SrdData(BlueFin::GlMeHost2SrdData *this)
{
}

uint64_t BlueFin::GlMeSrdPacketManager::ReliableNackReceived(BlueFin::GlMeSrdPacketManager *this, int a2, int a3)
{
  if (*((unsigned char *)this + 13874))
  {
    DeviceFaultNotify("glmesrd_packet_manager_reliable.cpp", 293, "ReliableNackReceived", (char)"!m_bMessageReliableStarted");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_packet_manager_reliable.cpp", 293, "!m_bMessageReliableStarted");
  }
  uint64_t result = GlCustomLog(12, "PacketMgr::ReliableNackReceived(%u, %u)\n", a2, a3);
  uint64_t v7 = *((void *)this + 1735);
  if (!v7) {
    return GlCustomLog(12, "PacketMgr::ReliableNackReceived(%u, %u) outdated!\n", a2, a3);
  }
  while (1)
  {
    if (!*(unsigned char *)(v7 + 49))
    {
      uint64_t result = GlCustomLog(12, "PacketMgr::ReliableNackReceived(%u, %u) for seqid(%u) which was previously acked.  Large latency likely!!!\n", a2, a3, *(unsigned __int8 *)(v7 + 48));
      goto LABEL_7;
    }
    if (*(unsigned __int8 *)(v7 + *(unsigned __int8 *)(v7 + 49) - 1 + 50) == a2) {
      break;
    }
LABEL_7:
    uint64_t v7 = *(void *)(v7 + 88);
    if (!v7) {
      return GlCustomLog(12, "PacketMgr::ReliableNackReceived(%u, %u) outdated!\n", a2, a3);
    }
  }
  uint64_t v8 = *((void *)this + 1735);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 1735);
    while (*(unsigned __int8 *)(v9 + 48) != a3)
    {
      uint64_t v9 = *(void *)(v9 + 88);
      if (!v9) {
        goto LABEL_16;
      }
    }
    uint64_t result = BlueFin::GlMeSrdPacketManager::ProcessAckedElement(this, v9);
    uint64_t v8 = *((void *)this + 1735);
    if (!v8) {
      return result;
    }
    do
    {
LABEL_16:
      uint64_t result = BlueFin::GlTimer::rearm((BlueFin::GlTimer *)(v8 + 8), 100);
      uint64_t v8 = *(void *)(v8 + 88);
    }
    while (v8);
  }
  return result;
}

uint64_t (*BlueFin::GlMeSrdPacketManager::wait4kill(uint64_t a1, unsigned char *a2))()
{
  if ((*a2 & 0xFE) == 2) {
    return 0;
  }
  else {
    return BlueFin::QHsm::top;
  }
}

void BlueFin::GlMeSrdTransactionBuilder::~GlMeSrdTransactionBuilder(BlueFin::GlMeSrdTransactionBuilder *this)
{
}

uint64_t BlueFin::GlMeSrdPacketManagerCallbackImpl::OnCommunicationDead(BlueFin::GlMeSrdPacketManagerCallbackImpl *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 17024) + 16))();
}

void BlueFin::GlMeSrdTransactionManager::~GlMeSrdTransactionManager(BlueFin::GlMeSrdTransactionManager *this)
{
  *(void *)this = &unk_270EBE020;
  *((void *)this + 2159) = &unk_270EBE168;
  BOOL v2 = (void (***)(void))*((void *)this + 2160);
  if (v2)
  {
    (**v2)(v2);
    *((void *)this + 2160) = 0;
  }
  BlueFin::GlMeSrdPacketManager::~GlMeSrdPacketManager((BlueFin::GlMeSrdTransactionManager *)((char *)this + 96));
}

{
  void (***v2)(void);
  uint64_t vars8;

  *(void *)this = &unk_270EBE020;
  *((void *)this + 2159) = &unk_270EBE168;
  BOOL v2 = (void (***)(void))*((void *)this + 2160);
  if (v2)
  {
    (**v2)(v2);
    *((void *)this + 2160) = 0;
  }
  BlueFin::GlMeSrdPacketManager::~GlMeSrdPacketManager((BlueFin::GlMeSrdTransactionManager *)((char *)this + 96));

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlMeSrdTransactionManager::SendDacReliableAck(BlueFin::GlMeSrdTransactionManager *this, void *a2)
{
  char v3 = -1;
  return (*(uint64_t (**)(void, char *, uint64_t))(**((void **)this + 2128) + 32))(*((void *)this + 2128), &v3, 1);
}

void BlueFin::GlMeSrdTransactionManager::SetDacData(BlueFin::GlMeSrdTransactionManager *this, char *a2, unsigned int a3)
{
  uint64_t vars8 = *MEMORY[0x263EF8340];
  char v6 = *a2;
  uint64_t vars0 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v7 = (*(uint64_t (**)(BlueFin::GlMeSrdTransactionManager *))(*(void *)this + 80))(this);
  if (v6)
  {
    *(void *)&v13[0] = BlueFin::GlMeSrdTransactionManager::SendDacReliableAck;
    *((void *)&v13[0] + 1) = this;
    LOWORD(v13[1]) = 256;
    BYTE2(v13[1]) = 0;
  }
  else
  {
    memset(v13, 0, 19);
  }
  *((void *)&v13[1] + 1) = v7;
  LODWORD(vars0) = 0;
  WORD2(vars0) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, v6 & 1);
  unsigned __int16 v8 = 1;
  if (a3 >= 2)
  {
    do
    {
      uint64_t v9 = (unsigned __int8 *)&a2[v8];
      unsigned int v10 = *v9;
      unsigned __int8 v11 = a2[(unsigned __int16)(v8 + 2)];
      uint64_t v12 = (unsigned __int8 *)&a2[(unsigned __int16)(v8 + 3)];
      v8 += 3 + v10;
      BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v13, v9[1], v11, v12, v10);
    }
    while (a3 > v8);
  }
  if (a3 != v8)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 156, "SetDacData", (char)"usOffst == usSize");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 156, "usOffst == usSize");
  }
  BlueFin::GlMeSrdTransaction::Complete((BlueFin::GlMeSrdTransaction *)v13);
  BlueFin::GlMeSrdTransaction::~GlMeSrdTransaction((BlueFin::GlMeSrdTransaction *)v13);
}

uint64_t BlueFin::GlMeSrdTransactionManager::SetSwFlowControlXonXoff(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 6614) = a2;
  *(unsigned char *)(this + 6615) = a3;
  return this;
}

uint64_t BlueFin::GlMeSrdTransactionManager::SetBurstModeConfig(uint64_t this, int a2, char a3)
{
  *(unsigned char *)(this + 6616) = a2;
  *(unsigned char *)(this + 6617) = a3;
  if (a2)
  {
    for (uint64_t i = 0; i != 80; i += 8)
      *(_DWORD *)(this + 6692 + i) = 0;
  }
  return this;
}

uint64_t BlueFin::GlMeSrdTransactionManager::SetMeasurementIntervalMs(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 6618) = a2;
  return this;
}

uint64_t BlueFin::GlMeSrdTransactionManager::SendAutobaud(BlueFin::GlMeSrdTransactionManager *this)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0x8080808080808080;
  v2[1] = 0x8080808080808080;
  return (*(uint64_t (**)(void, void *, uint64_t))(**(void **)(*((void *)this + 3) + 17024) + 24))(*(void *)(*((void *)this + 3) + 17024), v2, 16);
}

uint64_t BlueFin::GlMeSrdTransactionManager::DisableReliableChannel(uint64_t this)
{
  *(unsigned char *)(this + 13969) = 1;
  return this;
}

uint64_t BlueFin::GlMeSrdTransactionManager::DisableSwFlowControlEscaping(uint64_t this)
{
  *(unsigned char *)(this + 6613) = 0;
  return this;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterUtils(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 17064) != a2)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 251, "UnregisterUtils", (char)"m_pUtilsIf == pUtilsIf");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 251, "m_pUtilsIf == pUtilsIf");
  }
  *(void *)(result + 17064) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterEvents(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 17056) != a2)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 265, "UnregisterEvents", (char)"m_pEventsIf == pEventsIf");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 265, "m_pEventsIf == pEventsIf");
  }
  *(void *)(result + 17056) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterSatRpt(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 17072) != a2)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 279, "UnregisterSatRpt", (char)"m_pSatRptIf == pSatRptIf");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 279, "m_pSatRptIf == pSatRptIf");
  }
  *(void *)(result + 17072) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterRmRpt(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 17080) != a2)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 293, "UnregisterRmRpt", (char)"m_pRmRptIf == pRmRptIf");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 293, "m_pRmRptIf == pRmRptIf");
  }
  *(void *)(result + 17080) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterSatEvt(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    char v3 = "nullptr != pSatEvtIf";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 318, "UnregisterSatEvt", (char)"nullptr != pSatEvtIf");
    int v4 = 318;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", v4, v3);
  }
  uint64_t v2 = *(void *)(result + 17096);
  if (*(void *)(result + 17088) == a2)
  {
    *(void *)(result + 17088) = v2;
  }
  else if (v2 != a2)
  {
    char v3 = "0";
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 330, "UnregisterSatEvt", (char)"0");
    int v4 = 330;
    goto LABEL_8;
  }
  *(void *)(result + 17096) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::RegisterGeoRpt(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 337, "RegisterGeoRpt", (char)"nullptr != pGeorptIf");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 337, "nullptr != pGeorptIf");
  }
  *(void *)(result + 17104) = a2;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::UnregisterGeoRpt(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glmesrd_transaction_handler.cpp", 344, "UnregisterGeoRpt", (char)"nullptr != pGeorptIf");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_handler.cpp", 344, "nullptr != pGeorptIf");
  }
  *(void *)(result + 17104) = 0;
  return result;
}

uint64_t BlueFin::GlMeSrdTransactionManager::GetEswRpcEncIf(BlueFin::GlMeSrdTransactionManager *this)
{
  return (uint64_t)this + 17112;
}

void BlueFin::GlMeSrdPacketManagerCallbackImpl::~GlMeSrdPacketManagerCallbackImpl(BlueFin::GlMeSrdPacketManagerCallbackImpl *this)
{
}

void BlueFin::GllRpcDec::~GllRpcDec(BlueFin::GllRpcDec *this)
{
  *(void *)this = &unk_270EBE168;
  uint64_t v2 = (void (***)(void))*((void *)this + 1);
  if (v2)
  {
    (**v2)(v2);
    *((void *)this + 1) = 0;
  }
}

{
  void (***v2)(void);
  uint64_t vars8;

  *(void *)this = &unk_270EBE168;
  uint64_t v2 = (void (***)(void))*((void *)this + 1);
  if (v2)
  {
    (**v2)(v2);
    *((void *)this + 1) = 0;
  }

  JUMPOUT(0x263E6DD80);
}

void BlueFin::EswRpcGcmIf::esw_gcm_rpc_download_patch(BlueFin::EswRpcGcmIf *this, BlueFin::GlMeSrdTransaction *a2, unsigned __int8 a3, unsigned int a4, unsigned __int8 a5, unsigned __int8 **a6)
{
}

void BlueFin::EswRpcGcmIf::esw_gcm_rpc_start_app(BlueFin::EswRpcGcmIf *this, BlueFin::GlMeSrdTransaction *a2)
{
}

void BlueFin::EswRpcGcmIf::esw_gcm_rpc_start_service(BlueFin::EswRpcGcmIf *this, BlueFin::GlMeSrdTransaction *a2)
{
}

void BlueFin::EswRpcGcmIf::esw_gcm_rpc_reset(BlueFin::EswRpcGcmIf *this, BlueFin::GlMeSrdTransaction *a2)
{
}

void BlueFin::EswRpcGcmIf::esw_gcm_delay_us(BlueFin::EswRpcGcmIf *this, BlueFin::GlMeSrdTransaction *a2)
{
}

void BlueFin::EswRpcHrmIf::esw_hrm_rpc_read_request()
{
}

void BlueFin::EswRpcHrmIf::esw_hrm_rpc_write()
{
}

void BlueFin::EswRpcHrmIf::esw_hrm_rpc_memory_check_request(BlueFin::EswRpcHrmIf *this, BlueFin::GlMeSrdTransaction *a2)
{
}

uint64_t BlueFin::EswRpcTimIf::CalculateMIAdjustmentMs(BlueFin::EswRpcTimIf *this, unsigned __int8 a2, unsigned int a3, int a4, _DWORD *a5, int *a6, int *a7, int *a8)
{
  *a5 = 0;
  if (a3)
  {
    unsigned int v8 = 0;
    int v9 = 0;
    do
    {
      if (a2) {
        int v10 = this + 200;
      }
      else {
        int v10 = 200;
      }
      if (a2) {
        --a2;
      }
      else {
        a2 = 0;
      }
      v9 += v10;
      ++v8;
    }
    while (v8 < a3);
    *a5 = v9;
  }
  int v11 = 0;
  int v12 = 0;
  do
  {
    if (a2) {
      int v13 = this + 200;
    }
    else {
      int v13 = 200;
    }
    if (a2) {
      --a2;
    }
    else {
      a2 = 0;
    }
    v12 += v13;
    ++v11;
  }
  while (a4 + 5 > v11);
  *a6 = v12;
  if (a2 > 5u)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder.cpp", 191, "CalculateMIAdjustmentMs", (char)"num_blk_adjust <= 5");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder.cpp", 191, "num_blk_adjust <= 5");
  }
  unsigned int v14 = 0;
  int v15 = 0;
  do
  {
    if (a2) {
      int v16 = this + 200;
    }
    else {
      int v16 = 200;
    }
    if (a2) {
      --a2;
    }
    else {
      a2 = 0;
    }
    v15 += v16;
  }
  while (v14++ < 4);
  *a7 = v15;
  if (a3) {
    int v18 = -3000;
  }
  else {
    int v18 = -2000;
  }
  return (v15 + v18 + *a5 + *a6);
}

void BlueFin::EswRpcJdIf::esw_jd_rpc_gp_set_all()
{
}

void BlueFin::EswRpcEnc::~EswRpcEnc(BlueFin::EswRpcEnc *this)
{
}

uint64_t BlueFin::EswRpcEnc::GetEswStmRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  char v3 = *(uint64_t (**)(void))(*(void *)v2 + 24);

  return v3();
}

uint64_t BlueFin::EswRpcEnc::GetEswGeomgrRpcIf(BlueFin::EswRpcEnc *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    BlueFin::EswRpcEnc::MakeEswRpcEncoderImp(this);
    uint64_t v2 = *((void *)this + 1);
  }
  char v3 = *(uint64_t (**)(void))(*(void *)v2 + 72);

  return v3();
}

void BlueFin::MinnowEswRpcEncoderImp::~MinnowEswRpcEncoderImp(BlueFin::MinnowEswRpcEncoderImp *this)
{
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswStmRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 24;
}

uint64_t BlueFin::MinnowEswRpcEncoderImp::GetEswGeomgrRpcIf(BlueFin::MinnowEswRpcEncoderImp *this)
{
  return (uint64_t)this + 120;
}

void BlueFin::MinnowEswRpcGeomgrEncImp::~MinnowEswRpcGeomgrEncImp(BlueFin::MinnowEswRpcGeomgrEncImp *this)
{
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_get_version(BlueFin::CarpEswRpcGcmEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  *(_WORD *)uint64_t v5 = 0;
  char v6 = 0;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v5, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)v2, 0, 0);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 39, "esw_gcm_rpc_get_version", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 39, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_rf_set_frequency_plan(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v12 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v16, v17, 1800, v12);
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)a3);
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 4));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 8));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 12));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 16));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 20));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 24));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 28));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 32));
  BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a3 + 36));
  BlueFin::GlStream::PutU16(v16, *(unsigned __int16 *)(a3 + 40));
  BlueFin::GlStream::PutU08(v16, *(unsigned char *)(a3 + 42));
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, *a4);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, a4[1]);
  BlueFin::GlStream::PutU08(v16, a4[2]);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, a4[3]);
  BlueFin::GlStream::PutU08(v16, a4[4]);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, a4[5]);
  BlueFin::GlStream::PutU08(v16, a4[6]);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, a4[7]);
  BlueFin::GlStream::PutU08(v16, a4[8]);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, a4[9]);
  BlueFin::GlStream::PutU08(v16, a4[10]);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU08(v16, 0);
  BlueFin::GlStream::PutU32(v16, a5);
  for (; a5; --a5)
  {
    BlueFin::GlStream::PutU08(v16, *(unsigned char *)a6);
    BlueFin::GlStream::PutU08(v16, *(unsigned char *)(a6 + 1));
    BlueFin::GlStream::PutU08(v16, 0);
    BlueFin::GlStream::PutU08(v16, 0);
    BlueFin::GlStream::PutU32(v16, *(_DWORD *)(a6 + 4));
    a6 += 8;
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v16);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 1u, v17, Offset);
  unsigned int v14 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v14)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 100, "esw_gcm_rpc_rf_set_frequency_plan", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 100, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_rf_set_nco_inc(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU32(v9, *a3);
  BlueFin::GlStream::PutU32(v9, a3[1]);
  BlueFin::GlStream::PutU32(v9, a3[2]);
  BlueFin::GlStream::PutU32(v9, a3[3]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 0, 3u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 117, "esw_gcm_rpc_rf_set_nco_inc", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 117, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_set_burst_mode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3[2] >= 0x21u)
  {
    int v9 = "options->num_dummy_bytes <= MAX_NUMBER_DUMMY_BYTES";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 220, "esw_gcm_rpc_set_burst_mode", (char)"options->num_dummy_bytes <= MAX_NUMBER_DUMMY_BYTES");
    int v10 = 220;
    goto LABEL_6;
  }
  int v4 = (unsigned __int16 *)a2;
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, *a3);
  BlueFin::GlStream::PutU08(v11, a3[1]);
  BlueFin::GlStream::PutU08(v11, a3[2]);
  BlueFin::GlStream::PutU08(v11, a3[3]);
  BlueFin::GlStream::PutU08(v11, a3[4]);
  BlueFin::GlStream::PutU08(v11, a3[8]);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 0, 7u, v12, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    int v9 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 237, "esw_gcm_rpc_set_burst_mode", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v10 = 237;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v10, v9);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_set_gllrpc_priorities(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v14, v15, 1800, v6);
  BlueFin::GlStream::PutU16(v14, *a3);
  unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 368))();
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = (char *)(a3 + 1);
    do
    {
      char v10 = *v9++;
      BlueFin::GlStream::PutU08(v14, v10);
      --v8;
    }
    while (v8);
  }
  BlueFin::GlStream::PutU08(v14, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v14);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 8u, v15, Offset);
  unsigned int v12 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v12)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 260, "esw_gcm_rpc_set_gllrpc_priorities", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 260, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_gpio_get(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 >= 8)
  {
    int v9 = "pin < _4753_GPIO_MAX";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 302, "esw_gcm_rpc_gpio_get", (char)"pin < _4753_GPIO_MAX");
    int v10 = 302;
    goto LABEL_6;
  }
  char v3 = a3;
  int v4 = (unsigned __int16 *)a2;
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, v3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 0, 6u, v12, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    int v9 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 311, "esw_gcm_rpc_gpio_get", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v10 = 311;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v10, v9);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGcmEncImp::esw_gcm_rpc_set_glo_code_fft_table(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 1800, v6);
  BlueFin::GlStream::PutU16(v12, *a3);
  BlueFin::GlStream::PutU16(v12, a3[1]);
  if (a3[1])
  {
    unsigned int v7 = 0;
    uint64_t v8 = (unsigned int *)*((void *)a3 + 1);
    do
    {
      BlueFin::GlStream::PutU32(v12, *v8);
      uint64_t v8 = (unsigned int *)(*((void *)a3 + 1) + 4);
      *((void *)a3 + 1) = v8;
      ++v7;
    }
    while (v7 < a3[1]);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 0x11u, v13, Offset);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 352, "esw_gcm_rpc_set_glo_code_fft_table", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 352, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcStmEncImp::esw_stm_rpc_echo(BlueFin::CarpEswRpcStmEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned __int8 a3, int a4, unsigned __int8 *a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v9 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 1800, v9);
  BlueFin::GlStream::PutU08(v12, a4);
  BlueFin::GlStream::PutStr((BlueFin::GlStream *)v12, a5, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add(a2, 1, 0, v13, Offset);
  LODWORD(a5) = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < a5)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 367, "esw_stm_rpc_echo", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 367, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_move_sats_to_bs(BlueFin::CarpEswRpcJdEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned __int8 a3, unsigned int a4, unsigned __int8 *a5)
{
  v10[0] = a3;
  v10[1] = a4;
  v11[0] = a4 + 2;
  v11[1] = ((a4 + 2) >> 2) & 0x40 | 4;
  v11[2] = 9;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v11, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v10, 2u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, a5, a4);
  LODWORD(a5) = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < a5)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 904, "esw_jd_rpc_move_sats_to_bs", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 904, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcJdEncImp::esw_jd_rpc_move_sats_from_sniff_to_bs(BlueFin::CarpEswRpcJdEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned __int8 a3, unsigned int a4, unsigned __int8 *a5)
{
  v10[0] = a3;
  v10[1] = a4;
  v11[0] = a4 + 2;
  v11[1] = ((a4 + 2) >> 2) & 0x40 | 4;
  v11[2] = 11;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v11, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v10, 2u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, a5, a4);
  LODWORD(a5) = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < a5)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 914, "esw_jd_rpc_move_sats_from_sniff_to_bs", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 914, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_init(void **a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4, char a5, _WORD *a6, char a7, char a8, char a9)
{
  char v14 = a3;
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void *))(*a1[1] + 384))(a1[1]) <= a3)
  {
    int v23 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 922, "esw_sat_rpc_init", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v24 = 922;
    goto LABEL_10;
  }
  char v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v25, v26, 1800, v17);
  BlueFin::GlStream::PutU08(v25, v14);
  char v18 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
        + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
        + *a4);
  if (!v18)
  {
    int v23 = "ucImplSvId != INVALID_SVID";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 933, "esw_sat_rpc_init", (char)"ucImplSvId != INVALID_SVID");
    int v24 = 933;
    goto LABEL_10;
  }
  BlueFin::GlStream::PutU08(v25, v18);
  BlueFin::GlStream::PutU08(v25, a4[4]);
  BlueFin::GlStream::PutU08(v25, 0);
  BlueFin::GlStream::PutU08(v25, 0);
  BlueFin::GlStream::PutU16(v25, *((unsigned __int16 *)a4 + 4));
  BlueFin::GlStream::PutU08(v25, a4[10]);
  BlueFin::GlStream::PutU08(v25, a4[11]);
  BlueFin::GlStream::PutU08(v25, a5);
  BlueFin::GlStream::CarpPutBits(v25, *a6 & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 1) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 2) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 3) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 4) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 5) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 6) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v25, ((unsigned __int16)*a6 >> 7) & 1, 1u, 8u);
  BlueFin::GlStream::PutU08(v25, 0);
  BlueFin::GlStream::PutU08(v25, 0);
  BlueFin::GlStream::PutU08(v25, 0);
  BlueFin::GlStream::PutU08(v25, a7);
  BlueFin::GlStream::PutU08(v25, a8);
  BlueFin::GlStream::PutU08(v25, a9);
  int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v25);
  if (Offset != ((unsigned int (*)(void **))(*a1)[3])(a1))
  {
    int v23 = "otStream.GetOffset() == esw_sat_rpc_init_msg_length()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 962, "esw_sat_rpc_init", (char)"otStream.GetOffset() == esw_sat_rpc_init_msg_length()");
    int v24 = 962;
    goto LABEL_10;
  }
  unsigned int v20 = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v25);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 6, 0, v26, v20);
  unsigned int v21 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(*a1[1] + 416))();
  if (result < v21)
  {
    int v23 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 965, "esw_sat_rpc_init", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v24 = 965;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v24, v23);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_init_msg_length(BlueFin::CarpEswRpcSatEncImp *this)
{
  return 17;
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_set_track_priority(BlueFin::CarpEswRpcSatEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3, unsigned __int8 a4)
{
  unsigned __int8 v5 = a3;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 384))(*((void *)this + 1)) <= a3)
  {
    unsigned int v10 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1009, "esw_sat_rpc_set_track_priority", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v11 = 1009;
    goto LABEL_6;
  }
  v12[0] = v5;
  v12[1] = a4;
  *(_WORD *)uint64_t v13 = 1538;
  char v14 = 4;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v13, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v12, 2u);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    unsigned int v10 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1014, "esw_sat_rpc_set_track_priority", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v11 = 1014;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v11, v10);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_set_aid_id(BlueFin::CarpEswRpcSatEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3, unsigned __int8 a4)
{
  unsigned __int8 v5 = a3;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 384))(*((void *)this + 1)) <= a3)
  {
    unsigned int v10 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1021, "esw_sat_rpc_set_aid_id", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v11 = 1021;
    goto LABEL_6;
  }
  v12[0] = v5;
  v12[1] = a4;
  *(_WORD *)uint64_t v13 = 1538;
  char v14 = 1;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v13, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v12, 2u);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    unsigned int v10 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1026, "esw_sat_rpc_set_aid_id", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v11 = 1026;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v11, v10);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_set_aiding_control(BlueFin::CarpEswRpcSatEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3, unsigned __int8 a4)
{
  unsigned __int8 v5 = a3;
  if ((*(unsigned int (**)(void))(**((void **)this + 1) + 384))(*((void *)this + 1)) <= a3)
  {
    unsigned int v10 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1046, "esw_sat_rpc_set_aiding_control", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v11 = 1046;
    goto LABEL_6;
  }
  v12[0] = v5;
  v12[1] = a4;
  *(_WORD *)uint64_t v13 = 1538;
  char v14 = 2;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v13, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v12, 2u);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    unsigned int v10 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1051, "esw_sat_rpc_set_aiding_control", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v11 = 1051;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v11, v10);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcSatEncImp::esw_sat_rpc_set_control_flag(uint64_t a1, uint64_t a2, char a3, _WORD *a4)
{
  char v6 = (unsigned __int16 *)a2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v8);
  BlueFin::GlStream::PutU08(v11, a3);
  BlueFin::GlStream::CarpPutBits(v11, *a4 & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 1) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 2) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 3) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 4) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 5) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 6) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v11, ((unsigned __int16)*a4 >> 7) & 1, 1u, 8u);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  BlueFin::GlStream::PutU08(v11, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v6, 6, 3u, v12, Offset);
  LODWORD(v6) = v6[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v6)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1088, "esw_sat_rpc_set_control_flag", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1088, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcTimEncImp::esw_tim_rpc_time_capture_disarm(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v6);
  BlueFin::GlStream::PutU08(v10, a3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 3, 1u, v11, Offset);
  unsigned int v8 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1145, "esw_tim_rpc_time_capture_disarm", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1145, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcTimEncImp::esw_tim_rpc_frequency_capture_arm(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a3 != 3)
  {
    unsigned int v10 = "CAPTURE_PORT_CNTIN == port";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1152, "esw_tim_rpc_frequency_capture_arm", (char)"CAPTURE_PORT_CNTIN == port");
    int v11 = 1152;
    goto LABEL_6;
  }
  unsigned __int8 v5 = (unsigned __int16 *)a2;
  char v7 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 1800, v7);
  BlueFin::GlStream::PutU08(v12, 3);
  BlueFin::GlStream::PutU32(v12, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v5, 3, 2u, v13, Offset);
  LODWORD(v5) = v5[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v5)
  {
    unsigned int v10 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1163, "esw_tim_rpc_frequency_capture_arm", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v11 = 1163;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v11, v10);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcTimEncImp::esw_tim_rpc_frequency_capture_disarm(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a3 != 3)
  {
    unsigned int v8 = "CAPTURE_PORT_CNTIN == port";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1170, "esw_tim_rpc_frequency_capture_disarm", (char)"CAPTURE_PORT_CNTIN == port");
    int v9 = 1170;
    goto LABEL_6;
  }
  char v3 = (unsigned __int16 *)a2;
  char v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v5);
  BlueFin::GlStream::PutU08(v10, 3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v3, 3, 3u, v11, Offset);
  LODWORD(v3) = v3[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v3)
  {
    unsigned int v8 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1180, "esw_tim_rpc_frequency_capture_disarm", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v9 = 1180;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v9, v8);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcTimEncImp::esw_tim_rpc_adjust_measurement_interval(BlueFin::CarpEswRpcTimEncImp *this, BlueFin::GlMeSrdTransaction *a2, BlueFin::EswRpcTimIf *a3, unsigned __int8 a4, unsigned int a5, int a6, uint64_t a7, int *a8)
{
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  *(void *)char v18 = 0;
  int v10 = BlueFin::EswRpcTimIf::CalculateMIAdjustmentMs(a3, a4, a5, a6, &v18[4], (int *)v18, &v17, a8);
  int v16 = 0;
  (*(void (**)(void))(**((void **)this + 1) + 568))();
  if (v10 < 0)
  {
    uint64_t v13 = "slAdjustmentMs >= sMinAdjustmentMs";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1291, "ValidateMIAdjustOk", (char)"slAdjustmentMs >= sMinAdjustmentMs");
    int v14 = 1291;
    goto LABEL_8;
  }
  if (v10 > (__int16)v16)
  {
    uint64_t v13 = "slAdjustmentMs <= sMaxAdjustmentMs";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1292, "ValidateMIAdjustOk", (char)"slAdjustmentMs <= sMaxAdjustmentMs");
    int v14 = 1292;
    goto LABEL_8;
  }
  *(_WORD *)&v18[4] = 772;
  v18[6] = 7;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, &v18[4], 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v15, 4u);
  unsigned int v11 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v11)
  {
    uint64_t v13 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1239, "esw_tim_rpc_adjust_measurement_interval", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v14 = 1239;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v14, v13);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcTimEncImp::esw_tim_rpc_set_ext_suspend_mode(BlueFin::CarpEswRpcTimEncImp *this, BlueFin::GlMeSrdTransaction *a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v6);
  BlueFin::GlStream::PutU08(v10, a3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add(a2, 3, 9u, v11, Offset);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1274, "esw_tim_rpc_set_ext_suspend_mode", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1274, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcRmEncImp::esw_rm_rpc_query_resources(BlueFin::CarpEswRpcRmEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  *(_WORD *)char v5 = 1280;
  char v6 = 0;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v5, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)v2, 0, 0);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1417, "esw_rm_rpc_query_resources", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1417, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcRmEncImp::esw_rm_rpc_query_loading(uint64_t a1, uint64_t a2, char *a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU08(v9, *a3);
  BlueFin::GlStream::PutU08(v9, a3[4]);
  BlueFin::GlStream::PutU08(v9, a3[8]);
  BlueFin::GlStream::PutU08(v9, a3[9]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 5, 2u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1434, "esw_rm_rpc_query_loading", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1434, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcRmEncImp::esw_rm_rpc_get_usage(BlueFin::CarpEswRpcRmEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  *(_WORD *)char v5 = 1280;
  char v6 = 3;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v5, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)v2, 0, 0);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1441, "esw_rm_rpc_get_usage", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1441, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_set_areas(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  LODWORD(v5) = a3;
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v8);
  BlueFin::GlStream::PutU08(v13, v5);
  if (v5)
  {
    uint64_t v5 = v5;
    uint64_t v9 = a4 + 8;
    do
    {
      BlueFin::GlStream::PutU08(v13, *(unsigned char *)(v9 - 8));
      BlueFin::GlStream::PutU08(v13, *(unsigned char *)(v9 + 8));
      BlueFin::GlStream::PutU08(v13, 0);
      BlueFin::GlStream::PutU08(v13, 0);
      BlueFin::GlStream::PutF32((BlueFin::GlStream *)v13, *(float *)(v9 - 4));
      BlueFin::GlStream::PutF32((BlueFin::GlStream *)v13, *(float *)v9);
      BlueFin::GlStream::PutF32((BlueFin::GlStream *)v13, *(float *)(v9 + 4));
      v9 += 20;
      --v5;
    }
    while (v5);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 7, 1u, v14, Offset);
  unsigned int v11 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v11)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1465, "geo_mgr_rpc_set_areas", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1465, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_unset_areas(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2, int a3, char *a4)
{
  LODWORD(v5) = a3;
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v8 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v8);
  BlueFin::GlStream::PutU08(v13, v5);
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      char v9 = *a4++;
      BlueFin::GlStream::PutU08(v13, v9);
      --v5;
    }
    while (v5);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add(a2, 7, 2u, v14, Offset);
  unsigned int v11 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v11)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1483, "geo_mgr_rpc_unset_areas", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1483, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_set_geo_sv_info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v6);
  BlueFin::GlStream::PutU08(v13, *(unsigned char *)a3);
  BlueFin::GlStream::PutU08(v13, *(unsigned char *)(a3 + 1));
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutS32(v13, *(_DWORD *)(a3 + 4));
  char v7 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + *(unsigned __int8 *)(a3 + 8));
  if (!v7)
  {
    unsigned int v11 = "ucImplSvId != INVALID_SVID";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1499, "geo_mgr_rpc_set_geo_sv_info", (char)"ucImplSvId != INVALID_SVID");
    int v12 = 1499;
    goto LABEL_6;
  }
  BlueFin::GlStream::PutU08(v13, v7);
  BlueFin::GlStream::PutU08(v13, *(unsigned char *)(a3 + 12));
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU16(v13, *(unsigned __int16 *)(a3 + 16));
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 7, 3u, v14, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    unsigned int v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1509, "geo_mgr_rpc_set_geo_sv_info", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 1509;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_unset_geo_sv_info(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2, int a3, char *a4)
{
  LODWORD(v5) = a3;
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v8 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v8);
  BlueFin::GlStream::PutU08(v13, v5);
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      char v9 = *a4++;
      BlueFin::GlStream::PutU08(v13, v9);
      --v5;
    }
    while (v5);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add(a2, 7, 4u, v14, Offset);
  unsigned int v11 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v11)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1527, "geo_mgr_rpc_unset_geo_sv_info", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1527, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_set_satposmodel(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a3 > 0x14)
  {
    uint64_t v15 = "num_pos_model <= GEO_MAX_SATPOSMODEL_ITEMS";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1546, "geo_mgr_rpc_set_satposmodel", (char)"num_pos_model <= GEO_MAX_SATPOSMODEL_ITEMS");
    int v16 = 1546;
    goto LABEL_13;
  }
  if (a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = a4;
    uint64_t v9 = a3;
    while (1)
    {
      char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
      BlueFin::GlStream::GlStream((uint64_t)v17, v18, 1800, v10);
      BlueFin::GlStream::PutU08(v17, 1);
      uint64_t v11 = a4 + 60 * v7;
      BlueFin::GlStream::PutU08(v17, *(unsigned char *)v11);
      BlueFin::GlStream::PutU08(v17, 0);
      BlueFin::GlStream::PutU16(v17, *(unsigned __int16 *)(v11 + 56));
      for (uint64_t i = 4; i != 16; i += 4)
        BlueFin::GlStream::PutF32((BlueFin::GlStream *)v17, *(float *)(v8 + i));
      do
      {
        BlueFin::GlStream::PutF32((BlueFin::GlStream *)v17, *(float *)(v8 + i));
        i += 4;
      }
      while (i != 28);
      do
      {
        BlueFin::GlStream::PutF32((BlueFin::GlStream *)v17, *(float *)(v8 + i));
        i += 4;
      }
      while (i != 40);
      do
      {
        BlueFin::GlStream::PutF32((BlueFin::GlStream *)v17, *(float *)(v8 + i));
        i += 4;
      }
      while (i != 52);
      BlueFin::GlStream::PutU32(v17, *(_DWORD *)(a4 + 60 * v7 + 52));
      unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v17);
      BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 7, 5u, v18, Offset);
      unsigned int v14 = *(unsigned __int16 *)(a2 + 32);
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v6 + 8) + 416))();
      if (result < v14) {
        break;
      }
      ++v7;
      v8 += 60;
      if (v7 == v9) {
        return result;
      }
    }
    uint64_t v15 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1561, "geo_mgr_rpc_set_satposmodel", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v16 = 1561;
LABEL_13:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v16, v15);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_set_mode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)a3);
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 1));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 6));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 16));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 2));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 4));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 8));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 10));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 12));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 20));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 21));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 22));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 23));
  BlueFin::GlStream::PutU16(v9, *(unsigned __int16 *)(a3 + 24));
  BlueFin::GlStream::PutU32(v9, *(_DWORD *)(a3 + 28));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 32));
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 36));
  BlueFin::GlStream::PutU08(v9, 0);
  BlueFin::GlStream::PutU08(v9, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 7, 7u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1594, "geo_mgr_rpc_set_mode", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1594, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_set_ref_pos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU32(v9, *(_DWORD *)a3);
  BlueFin::GlStream::PutF32((BlueFin::GlStream *)v9, *(float *)(a3 + 4));
  BlueFin::GlStream::PutF32((BlueFin::GlStream *)v9, *(float *)(a3 + 8));
  BlueFin::GlStream::PutF32((BlueFin::GlStream *)v9, *(float *)(a3 + 12));
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 7, 0, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1611, "geo_mgr_rpc_set_ref_pos", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1611, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_unset_satposmodel(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3, char *a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a3 >= 0x15)
  {
    uint64_t v13 = "num_sats <= GEO_MAX_SATPOSMODEL_ITEMS";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1621, "geo_mgr_rpc_unset_satposmodel", (char)"num_sats <= GEO_MAX_SATPOSMODEL_ITEMS");
    int v14 = 1621;
    goto LABEL_9;
  }
  LODWORD(v5) = a3;
  char v8 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v15, v16, 1800, v8);
  BlueFin::GlStream::PutU08(v15, v5);
  if (v5)
  {
    uint64_t v5 = v5;
    do
    {
      char v9 = *a4++;
      BlueFin::GlStream::PutU08(v15, v9);
      --v5;
    }
    while (v5);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v15);
  BlueFin::GlMeSrdTransaction::Add(a2, 7, 6u, v16, Offset);
  unsigned int v11 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v11)
  {
    uint64_t v13 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1629, "geo_mgr_rpc_unset_satposmodel", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v14 = 1629;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", v14, v13);
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_dump_fixes(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  *(_WORD *)uint64_t v5 = 1792;
  char v6 = 8;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v5, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)v2, 0, 0);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1636, "geo_mgr_rpc_dump_fixes", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1636, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_request_state(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  *(_WORD *)uint64_t v5 = 1792;
  char v6 = 9;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v5, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)v2, 0, 0);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1643, "geo_mgr_rpc_request_state", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1643, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_send_areas_state(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  *(_WORD *)uint64_t v5 = 1792;
  char v6 = 10;
  BlueFin::GlMeSrdTransaction::AddMethodData(a2, v5, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)v2, 0, 0);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1650, "geo_mgr_rpc_send_areas_state", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1650, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::CarpEswRpcGeomgrEncImp::geo_mgr_rpc_send_set_of_msmsts(BlueFin::CarpEswRpcGeomgrEncImp *this, BlueFin::GlMeSrdTransaction *a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v6);
  BlueFin::GlStream::PutU08(v10, a3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add(a2, 7, 0xBu, v11, Offset);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_carp.cpp", 1663, "geo_mgr_rpc_send_set_of_msmsts", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_carp.cpp", 1663, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcSatEncImp::esw_sat_rpc_set_aiding_control_multi_carr(uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned __int8 a4, unsigned __int8 a5)
{
  unsigned __int8 v7 = a3;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 384))(*(void *)(a1 + 8)) <= a3)
  {
    uint64_t v12 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 149, "esw_sat_rpc_set_aiding_control_multi_carr", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v13 = 149;
    goto LABEL_6;
  }
  v14[0] = v7;
  v14[1] = a4;
  void v14[2] = a5;
  *(_WORD *)uint64_t v15 = 1539;
  char v16 = 7;
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)a2, v15, 3u);
  BlueFin::GlMeSrdTransaction::AddMethodData((BlueFin::GlMeSrdTransaction *)a2, v14, 3u);
  unsigned int v10 = a2[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    uint64_t v12 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 154, "esw_sat_rpc_set_aiding_control_multi_carr", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v13 = 154;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v13, v12);
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcGcmEncImp::esw_gcm_rpc_rf_set_frequency_plan_multi_carr(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6, char a7, char a8, char a9)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v21, v22, 1800, v17);
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)a3);
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 4));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 8));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 12));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 16));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 20));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 24));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 28));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 32));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 36));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 40));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 44));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 48));
  BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a3 + 52));
  BlueFin::GlStream::PutU16(v21, *(unsigned __int16 *)(a3 + 72));
  BlueFin::GlStream::PutU08(v21, *(unsigned char *)(a3 + 74));
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, *a4);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[1]);
  BlueFin::GlStream::PutU08(v21, a4[2]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[3]);
  BlueFin::GlStream::PutU08(v21, a4[4]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[5]);
  BlueFin::GlStream::PutU08(v21, a4[6]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[7]);
  BlueFin::GlStream::PutU08(v21, a4[8]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a4[9]);
  BlueFin::GlStream::PutU08(v21, a4[10]);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, 0);
  BlueFin::GlStream::PutU08(v21, a5);
  BlueFin::GlStream::PutU08(v21, a7);
  BlueFin::GlStream::PutU08(v21, a8);
  BlueFin::GlStream::PutU08(v21, a9);
  for (; a5; --a5)
  {
    BlueFin::GlStream::PutU08(v21, *(unsigned char *)a6);
    BlueFin::GlStream::PutU08(v21, 0);
    BlueFin::GlStream::PutU16(v21, *(unsigned __int16 *)(a6 + 2));
    BlueFin::GlStream::PutU32(v21, *(_DWORD *)(a6 + 4));
    a6 += 8;
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v21);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 0x12u, v22, Offset);
  unsigned int v19 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v19)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 585, "esw_gcm_rpc_rf_set_frequency_plan_multi_carr", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 585, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcGcmEncImp::esw_gcm_rpc_rf_set_dr_init(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6, uint64_t a7)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  char v14 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v18, v19, 1800, v14);
  BlueFin::GlStream::PutU08(v18, a3);
  BlueFin::GlStream::PutU08(v18, a4);
  BlueFin::GlStream::PutU08(v18, a5);
  BlueFin::GlStream::PutU08(v18, a6);
  for (; a3; --a3)
  {
    BlueFin::GlStream::PutU08(v18, *(unsigned char *)a7);
    BlueFin::GlStream::PutU08(v18, 0);
    BlueFin::GlStream::PutU16(v18, *(unsigned __int16 *)(a7 + 2));
    BlueFin::GlStream::PutU32(v18, *(_DWORD *)(a7 + 4));
    a7 += 8;
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v18);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 0, 0x14u, v19, Offset);
  unsigned int v16 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v16)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 613, "esw_gcm_rpc_rf_set_dr_init", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 613, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcGcmEncImp::esw_gcm_rpc_rf_set_nco_inc_multi_carr(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU32(v9, *a3);
  BlueFin::GlStream::PutU32(v9, a3[1]);
  BlueFin::GlStream::PutU32(v9, a3[2]);
  BlueFin::GlStream::PutU32(v9, a3[3]);
  BlueFin::GlStream::PutU32(v9, a3[4]);
  BlueFin::GlStream::PutU32(v9, a3[5]);
  BlueFin::GlStream::PutU32(v9, a3[6]);
  BlueFin::GlStream::PutU32(v9, a3[7]);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 0, 0x13u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 634, "esw_gcm_rpc_rf_set_nco_inc_multi_carr", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 634, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcGcmEncImp::esw_gcm_rpc_mem_dump_request(BlueFin::PikeEswRpcGcmEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v6);
  BlueFin::GlStream::PutU16(v10, a3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add(a2, 0, 0xEu, v11, Offset);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 648, "esw_gcm_rpc_mem_dump_request", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 648, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcStmEncImp::esw_stm_rpc_iq_dump_request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)a3);
  BlueFin::GlStream::PutU08(v9, *(unsigned char *)(a3 + 4));
  BlueFin::GlStream::PutU08(v9, 0);
  BlueFin::GlStream::PutU08(v9, 0);
  BlueFin::GlStream::PutU32(v9, 0);
  BlueFin::GlStream::PutU32(v9, *(_DWORD *)(a3 + 12));
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 1, 1u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 665, "esw_stm_rpc_iq_dump_request", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 665, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcHrmEncImp::esw_hrm_rpc_get(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a3 >= 11)
  {
    uint64_t v11 = "eSegment <= ARAD";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 674, "esw_hrm_rpc_get", (char)"eSegment <= ARAD");
    int v12 = 674;
    goto LABEL_6;
  }
  char v5 = a3;
  char v6 = (unsigned __int16 *)a2;
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v8);
  BlueFin::GlStream::PutU08(v13, v5);
  BlueFin::GlStream::PutU32(v13, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v6, 2, 0, v14, Offset);
  LODWORD(v6) = v6[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v6)
  {
    uint64_t v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 684, "esw_hrm_rpc_get", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 684;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcHrmEncImp::esw_hrm_rpc_set_masked(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a3 >= 11)
  {
    uint64_t v15 = "eSegment <= ARAD";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 709, "esw_hrm_rpc_set_masked", (char)"eSegment <= ARAD");
    int v16 = 709;
    goto LABEL_6;
  }
  char v9 = a3;
  unsigned int v10 = (unsigned __int16 *)a2;
  char v12 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v17, v18, 1800, v12);
  BlueFin::GlStream::PutU08(v17, v9);
  BlueFin::GlStream::PutU32(v17, a4);
  BlueFin::GlStream::PutU32(v17, a5);
  BlueFin::GlStream::PutU32(v17, a6);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v17);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v10, 2, 6u, v18, Offset);
  LODWORD(v10) = v10[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    uint64_t v15 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 721, "esw_hrm_rpc_set_masked", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v16 = 721;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v16, v15);
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcTimEncImp::esw_tim_rpc_pps_setup(uint64_t a1, uint64_t a2, int a3, char a4)
{
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 5, v8);
  BlueFin::GlStream::PutU32(v12, a3 | 0x80000000);
  BlueFin::GlStream::PutU08(v12, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 3, 4u, v13, Offset);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 740, "esw_tim_rpc_pps_setup", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 740, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcTimEncImp::esw_tim_rpc_pps_program(BlueFin::PikeEswRpcTimEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v8 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v12, v13, 8, v8);
  BlueFin::GlStream::PutU32(v12, a3);
  BlueFin::GlStream::PutU32(v12, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v12);
  BlueFin::GlMeSrdTransaction::Add(a2, 3, 5u, v13, Offset);
  unsigned int v10 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v10)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 751, "esw_tim_rpc_pps_program", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 751, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcTimEncImp::esw_tim_rpc_pps_stop(BlueFin::PikeEswRpcTimEncImp *this, BlueFin::GlMeSrdTransaction *a2)
{
  uint64_t v2 = (unsigned __int16 *)a2;
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v4 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v7, v8, 8, v4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v7);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v2, 3, 6u, v8, Offset);
  LODWORD(v2) = v2[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v2)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 760, "esw_tim_rpc_pps_stop", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", 760, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::PikeEswRpcTimEncImp::esw_tim_rpc_set_esw_poll(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a3[1] >= 9u)
  {
    uint64_t v11 = "p_poll_params->num_addr <= 8";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 769, "esw_tim_rpc_set_esw_poll", (char)"p_poll_params->num_addr <= 8");
    int v12 = 769;
    goto LABEL_9;
  }
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v6);
  BlueFin::GlStream::PutU08(v13, *a3);
  BlueFin::GlStream::PutU08(v13, a3[1]);
  BlueFin::GlStream::PutU08(v13, 0);
  BlueFin::GlStream::PutU08(v13, 0);
  if (a3[1])
  {
    unint64_t v7 = 0;
    do
      BlueFin::GlStream::PutU32(v13, *(_DWORD *)&a3[4 * v7++ + 4]);
    while (v7 < a3[1]);
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 3, 0xBu, v14, Offset);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v9)
  {
    uint64_t v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_pike.cpp", 785, "esw_tim_rpc_set_esw_poll", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 785;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_pike.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::GlMeHeartbeatData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 && v4 != 3)
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 90, "SerializeImpl", (char)"ucVersion >= 3 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 90, "ucVersion >= 3 && ucVersion <= 3");
  }
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 7;
    char v10 = 3;
    uint64_t v11 = 0x1000000000000;
    char v8 = &unk_270EBA550;
    char v12 = 3;
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v2 + 28));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v6 + 8));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 36));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 38));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlMeHeartbeatData::Deserialize(BlueFin::GlMeHeartbeatData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 7 || (*((unsigned char *)a2 + 12) & 0xFE) != 2) {
    return 0;
  }
  *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetU32(a2);
  double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 1) = D64;
  double v5 = D64 * 1000.0;
  double v6 = fmod(D64 * 1000.0, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v6 = v5;
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  if (v6 < 0.0) {
    unsigned int v7 = --v6;
  }
  else {
    unsigned int v7 = v6;
  }
  *((_DWORD *)this + 6) = v7;
  *((double *)this + 2) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned __int8 *)a2 + 12) >= 3u)
  {
    *((_WORD *)this + 18) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 19) = BlueFin::GlSysLogEntry::GetU16(a2);
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 131, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 131, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlMeResourceData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 4;
  }
  if (v7 - 5 <= 0xFFFFFFFC)
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 161, "SerializeImpl", (char)"ucVersion >= 2 && ucVersion <= 4");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 161, "ucVersion >= 2 && ucVersion <= 4");
  }
  int v13 = 78;
  char v14 = v7;
  uint64_t v15 = 0x1000000000000;
  char v12 = &unk_270EBA2F0;
  char v16 = v7;
  char v8 = (unsigned char *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v2 + 8));
  if (*v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 15;
    do
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10 - 15));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(*(void *)(v6 + 48) + v10 - 14)));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(*(void *)(v6 + 48) + v10 - 11));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10 - 7));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10 - 6));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, *(_WORD *)(*(void *)(v6 + 48) + v10 - 5));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10 - 3));
      if (v7 > 2)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10 - 2));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10 - 1));
        if (v7 != 3) {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(*(void *)(v6 + 48) + v10));
        }
      }
      ++v9;
      v10 += 16;
    }
    while (v9 < *(unsigned __int8 *)(v6 + 8));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v5, 4);
  return 1;
}

uint64_t BlueFin::GlMeResourceData::Deserialize(BlueFin::GlMeResourceData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 78 || *((unsigned __int8 *)a2 + 12) - 5 < 0xFFFFFFFD) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 8) = U8;
  if (U8)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 15;
    do
    {
      *(unsigned char *)(*((void *)this + 6) + v7 - 15) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(unsigned char *)(*((void *)this + 6) + v7 - 14) = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
                                                    + 256
                                                    * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                                                    + BlueFin::GlSysLogEntry::GetU8(a2));
      *(_DWORD *)(*((void *)this + 6) + v7 - 11) = BlueFin::GlSysLogEntry::GetU32(a2);
      *(unsigned char *)(*((void *)this + 6) + v7 - 7) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(unsigned char *)(*((void *)this + 6) + v7 - 6) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_WORD *)(*((void *)this + 6) + v7 - 5) = BlueFin::GlSysLogEntry::GetU16(a2);
      *(unsigned char *)(*((void *)this + 6) + v7 - 3) = BlueFin::GlSysLogEntry::GetU8(a2);
      if (*((unsigned __int8 *)a2 + 12) >= 3u)
      {
        *(unsigned char *)(*((void *)this + 6) + v7 - 2) = BlueFin::GlSysLogEntry::GetU8(a2);
        *(unsigned char *)(*((void *)this + 6) + v7 - 1) = BlueFin::GlSysLogEntry::GetU8(a2);
        if (*((unsigned __int8 *)a2 + 12) >= 4u) {
          *(unsigned char *)(*((void *)this + 6) + v7) = BlueFin::GlSysLogEntry::GetU8(a2);
        }
      }
      ++v6;
      v7 += 16;
    }
    while (v6 < *((unsigned __int8 *)this + 8));
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 219, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 219, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlMeHost2AsicData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3 >= 2)
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 231, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 231, "ucVersion >= 1 && ucVersion <= 1");
  }
  int v11 = 74;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  uint64_t v10 = &unk_270EBA2F0;
  char v14 = 1;
  uint64_t v7 = (_WORD *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v2 + 8));
  if (*v7)
  {
    unint64_t v8 = 0;
    do
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(*(void *)(v6 + 16) + v8++));
    while (v8 < *(unsigned __int16 *)(v6 + 8));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
  return 1;
}

uint64_t BlueFin::GlMeHost2AsicData::Deserialize(BlueFin::GlMeHost2AsicData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 74 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 4) = U16;
    if (U16)
    {
      unint64_t v7 = 0;
      do
        *(unsigned char *)(*((void *)this + 2) + v7++) = BlueFin::GlSysLogEntry::GetU8(a2);
      while (v7 < *((unsigned __int16 *)this + 4));
    }
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glme_heartbeat_data.cpp", 259, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 259, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v3;
}

uint64_t BlueFin::GlMeAsic2HostData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3 <= 1) {
    char v7 = 1;
  }
  else {
    char v7 = v3;
  }
  if (v3 > 1)
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 271, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 271, "ucVersion >= 1 && ucVersion <= 1");
  }
  LOWORD(v8) = *(_WORD *)(v2 + 8);
  if ((_WORD)v8)
  {
    unsigned int v9 = 0;
    __int16 v10 = 0;
    do
    {
      int v16 = 75;
      char v17 = v7;
      uint64_t v18 = 0x1000000000000;
      uint64_t v15 = &unk_270EBA2F0;
      char v19 = v7;
      unsigned int v11 = (unsigned __int16)(v8 - v10);
      if (v11 >= 0x13FD) {
        uint64_t v12 = 5117;
      }
      else {
        uint64_t v12 = v11;
      }
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, v12);
      if (v12)
      {
        uint64_t v13 = v9;
        do
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)(v6 + 16) + v13++));
          --v12;
        }
        while (v12);
      }
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v5, 4);
      __int16 v10 = v9 + 5117;
      unsigned int v9 = (unsigned __int16)(v9 + 5117);
      unsigned int v8 = *(unsigned __int16 *)(v6 + 8);
    }
    while (v9 < v8);
  }
  return 1;
}

uint64_t BlueFin::GlMeAsic2HostData::Deserialize(BlueFin::GlMeAsic2HostData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 75 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 4) = U16;
    if (U16)
    {
      unint64_t v7 = 0;
      do
        *(unsigned char *)(*((void *)this + 2) + v7++) = BlueFin::GlSysLogEntry::GetU8(a2);
      while (v7 < *((unsigned __int16 *)this + 4));
    }
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glme_heartbeat_data.cpp", 311, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 311, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v3;
}

uint64_t BlueFin::GlMePlatfStat::ss2hist(BlueFin::GlMePlatfStat *this)
{
  if ((int)this <= -140) {
    unsigned int v1 = 14;
  }
  else {
    unsigned int v1 = 0;
  }
  if ((this + 148) >= 0xD) {
    return v1;
  }
  else {
    return (-135 - this);
  }
}

const char *BlueFin::GlMePlatfStat::hist2cn0(unsigned int a1)
{
  if (a1 > 0xE) {
    return "???";
  }
  else {
    return off_2655DF4D8[a1];
  }
}

uint64_t BlueFin::GlMeSubHeartbeatData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 && v4 != 3)
  {
    DeviceFaultNotify("glme_heartbeat_data.cpp", 432, "SerializeImpl", (char)"ucVersion >= 3 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 432, "ucVersion >= 3 && ucVersion <= 3");
  }
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 105;
    char v10 = 3;
    uint64_t v11 = 0x1000000000000;
    unsigned int v8 = &unk_270EBA550;
    char v12 = 3;
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v6 + 16));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

BOOL BlueFin::GlMeSubHeartbeatData::Deserialize(BlueFin::GlMeSubHeartbeatData *this, BlueFin::GlSysLogEntry *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  if (v2 == 105)
  {
    double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
    *((double *)this + 1) = D64;
    double v6 = D64 * 1000.0;
    double v7 = fmod(D64 * 1000.0, 4294967300.0);
    if (v6 <= 4294967300.0) {
      double v7 = v6;
    }
    if (v7 < -4294967300.0) {
      double v7 = -fmod(-v7, 4294967300.0);
    }
    if (v7 < 0.0) {
      unsigned int v8 = --v7;
    }
    else {
      unsigned int v8 = v7;
    }
    *((_DWORD *)this + 6) = v8;
    *((double *)this + 2) = BlueFin::GlSysLogEntry::GetD64(a2);
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glme_heartbeat_data.cpp", 465, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_heartbeat_data.cpp", 465, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v2 == 105;
}

void BlueFin::GlMeResourceData::~GlMeResourceData(BlueFin::GlMeResourceData *this)
{
}

void BlueFin::GlMeHost2AsicData::~GlMeHost2AsicData(BlueFin::GlMeHost2AsicData *this)
{
}

void BlueFin::GlMeAsic2HostData::~GlMeAsic2HostData(BlueFin::GlMeAsic2HostData *this)
{
}

void BlueFin::GlMeHeartbeatData::~GlMeHeartbeatData(BlueFin::GlMeHeartbeatData *this)
{
}

void BlueFin::GlMeSubHeartbeatData::~GlMeSubHeartbeatData(BlueFin::GlMeSubHeartbeatData *this)
{
}

uint64_t BlueFin::GlMeReceiverParametersLogger::AllParamsToSlog(BlueFin::GlMeReceiverParametersLogger *this, const BlueFin::GlMeReceiverParametersIfc *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v18 = 80;
  char v19 = 19;
  uint64_t v20 = 0x1000000000000;
  char v17 = &unk_270EBA2F0;
  char v21 = 19;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, 0);
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, v4);
  uint64_t v5 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 32))(v2);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *v5);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, v3);
  double v6 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *v6);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[1]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[2]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[3]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[4]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[5]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[6]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[7]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[8]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[9]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[10]);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v6[11]);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v2);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)v7);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 4));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 5));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 6));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 8));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 12));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 16));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 20));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, *(_WORD *)(v7 + 24));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 26));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v7 + 28));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 32));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 36));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 40));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 41));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 42));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 43));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 44));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 45));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 46));
  for (uint64_t i = 0; i != 8; ++i)
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v7 + 47 + i));
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 264))(v2) == 5
    || (*(unsigned int (**)(uint64_t))(*(void *)v2 + 264))(v2) == 1)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, 0);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 264))(v2) == 5) {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(void *)(v7 + 64) != 0);
  }
  if (v3)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 152))(v2, v9);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)v10);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v10 + 4));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v10 + 8));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v10 + 9));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v10 + 12));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v10 + 16));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v10 + 20));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v10 + 21));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v10 + 22));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v10 + 24));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v10 + 28));
      for (uint64_t j = 0; j != 32; j += 4)
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v10 + 32 + j));
      for (uint64_t k = 0; k != 96; k += 8)
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, *(float *)(v10 + k + 64));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v17, *(_DWORD *)(v10 + k + 68));
      }
      uint64_t v9 = (v9 + 1);
    }
    while (v9 != v3);
  }
  uint64_t v13 = *(void *)(v7 + 64);
  if (v13 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 264))(v2) == 5)
  {
    for (uint64_t m = 0; m != 8; ++m)
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, *(unsigned char *)(v13 + m));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v17, *(_DWORD *)(v13 + 8));
    for (uint64_t n = 0; n != 384; n += 12)
    {
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, *(_WORD *)(v13 + n + 12));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, *(_WORD *)(v13 + n + 14));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v17, *(_DWORD *)(v13 + n + 16));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, *(_WORD *)(v13 + n + 20));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, *(_WORD *)(v13 + n + 22));
    }
  }
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v17, 0, 4);
}

uint64_t BlueFin::GlMeReceiverParametersLogger::SrchSpParamsToSlog(BlueFin::GlMeReceiverParametersLogger *this, const BlueFin::GlMeReceiverParametersIfc *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v8 = 80;
  char v9 = 3;
  uint64_t v10 = 0x1000000000000;
  uint64_t v7 = &unk_270EBA2F0;
  char v11 = 3;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, 2);
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 200))(v2);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v3);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 200))(v2))
  {
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 240))(v2, v4);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *(unsigned char *)v5);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v7, *(float *)(v5 + 4));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v7, *(_WORD *)(v5 + 8));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v7, *(_WORD *)(v5 + 10));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *(unsigned char *)(v5 + 12));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *(unsigned char *)(v5 + 13));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v7, *(float *)(v5 + 16));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v7, *(float *)(v5 + 20));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v7, *(_WORD *)(v5 + 24));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v7, *(_WORD *)(v5 + 26));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *(unsigned char *)(v5 + 28));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v7, *(float *)(v5 + 32));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *(unsigned char *)(v5 + 36));
      ++v4;
    }
    while (v4 < (*(unsigned int (**)(uint64_t))(*(void *)v2 + 200))(v2));
  }
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v7, 0, 4);
}

uint64_t BlueFin::GlMeReceiverParametersLogger::SrchBsParamsToSlog(BlueFin::GlMeReceiverParametersLogger *this, const BlueFin::GlMeReceiverParametersIfc *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v8 = 80;
  char v9 = 1;
  uint64_t v10 = 0x1000000000000;
  uint64_t v7 = &unk_270EBA2F0;
  char v11 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, 1);
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v2);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v3);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 208))(v2))
  {
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 256))(v2, v4);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *v5);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v5[1]);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v5[2]);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v5[3]);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v5[4]);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, v5[5]);
      ++v4;
    }
    while (v4 < (*(unsigned int (**)(uint64_t))(*(void *)v2 + 208))(v2));
  }
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v7, 0, 4);
}

uint64_t BlueFin::GlMeReceiverParametersLogger::SrchHostParamsToSlog(BlueFin::GlMeReceiverParametersLogger *this, const BlueFin::GlMeReceiverParametersIfc *a2)
{
  MEMORY[0x270FA5388](this, a2);
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v4 = 80;
  char v5 = 1;
  uint64_t v6 = 0x1000000000000;
  char v3 = &unk_270EBA2F0;
  char v7 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v3, 3);
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v3, 0, 4);
}

uint64_t BlueFin::GlMeReceiverParametersLogger::ModeTrkParamToSlog(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  char v4 = v3;
  char v6 = v5;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 192))(v2);
  int v20 = 80;
  char v21 = 20;
  uint64_t v22 = 0x1000000000000;
  char v19 = &unk_270EBA2F0;
  char v23 = 20;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, 4);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, v6);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, v4);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)v7);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 4));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 8));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 12));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 16));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 20));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 24));
  for (uint64_t i = 0; i != 16; i += 4)
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 28 + i));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 44));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 48));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 52));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 56));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 60));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 64));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 68));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 72));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 76));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(v7 + 80));
  BlueFin::GlMeReceiverParametersLogger::WriteCvecAveragingTableToSlog((BlueFin::GlSysLogEntry *)&v19, v7 + 84);
  BlueFin::GlMeReceiverParametersLogger::WriteCvecAveragingTableToSlog((BlueFin::GlSysLogEntry *)&v19, v7 + 100);
  BlueFin::GlMeReceiverParametersLogger::WriteCvecAveragingTableToSlog((BlueFin::GlSysLogEntry *)&v19, v7 + 116);
  BlueFin::GlMeReceiverParametersLogger::WriteCvecAveragingTableToSlog((BlueFin::GlSysLogEntry *)&v19, v7 + 132);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 148));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 152));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 153));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 154));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 155));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 156));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 157));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 158));
  for (uint64_t j = 0; j != 8; ++j)
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v7 + 159 + j));
  if (*(unsigned char *)(v7 + 8))
  {
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = v7 + 8 * v10;
      char v14 = *(float **)(v11 + 168);
      unint64_t v13 = v11 + 168;
      uint64_t v12 = v14;
      if (!v14)
      {
        DeviceFaultNotify("glme_receiver_parameters_logger.cpp", 331, "ModeTrkParamToSlog", (char)"stModeParams.apstGearParams[i]");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_receiver_parameters_logger.cpp", 331, "stModeParams.apstGearParams[i]");
      }
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *v12);
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 4));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 8));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 12));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 16));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 20));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 24));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 28));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 32));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 36));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 40));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 44));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 48));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 52));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 56));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 60));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 64));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 68));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 72));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 76));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 80));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 84));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 88));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 92));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 96));
      for (uint64_t k = 100; k != 112; k += 4)
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + k));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 112));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 116));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 120));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 124));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 128));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 132));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 136));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 140));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v19, *(_WORD *)(*(void *)v13 + 144));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 148));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, *(_DWORD *)(*(void *)v13 + 152));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 156));
      for (uint64_t m = 160; m != 180; m += 4)
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + m));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 180));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 184));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 188));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 192));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 196));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 200));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 204));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 208));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 212));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 216));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 220));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 224));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 228));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 232));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 236));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 248));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 252));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 256));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 260));
      for (uint64_t n = 264; n != 270; n += 2)
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v19, *(_WORD *)(*(void *)v13 + n));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 240));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, *(_DWORD *)(*(void *)v13 + 244));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(*(void *)v13 + 272));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 276));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 280));
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(float *)(*(void *)v13 + 284));
      ++v10;
    }
    while (v10 < *(unsigned __int8 *)(v7 + 8));
  }
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v19, 0, 4);
}

uint64_t BlueFin::GlMeReceiverParametersLogger::GsLoopupToSlog(BlueFin::GlMeReceiverParametersLogger *this, const BlueFin::GlMeReceiverParametersIfc *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v18 = *MEMORY[0x263EF8340];
  int v14 = 80;
  char v15 = 1;
  uint64_t v16 = 0x1000000000000;
  unint64_t v13 = &unk_270EBA2F0;
  char v17 = 1;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16))(v2);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, 5);
  if (v3)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    do
    {
      if (v4)
      {
        uint64_t v7 = 0;
        do
        {
          v6 += (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 120))(v2, v5, v7);
          uint64_t v7 = (v7 + 1);
        }
        while (v4 != v7);
      }
      uint64_t v5 = (v5 + 1);
    }
    while (v5 != v3);
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, v6);
    uint64_t v8 = 0;
    do
    {
      if (v4)
      {
        uint64_t v9 = 0;
        do
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 120))(v2, v8, v9))
          {
            uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 96))(v2, v8, v9);
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, v10);
            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 168))(v2, v10);
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, *(unsigned char *)(v11 + 8));
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, v8);
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, v9);
          }
          uint64_t v9 = (v9 + 1);
        }
        while (v4 != v9);
      }
      uint64_t v8 = (v8 + 1);
    }
    while (v8 != v3);
  }
  else
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, 0);
  }
  return BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v13, 0, 4);
}

uint64_t BlueFin::GlMeReceiverParametersLogger::WriteCvecAveragingTableToSlog(BlueFin::GlSysLogEntry *this, uint64_t a2)
{
  for (uint64_t i = 0; i != 12; i += 4)
    BlueFin::GlSysLogEntry::PutF32(this, *(float *)(a2 + i));
  uint64_t v5 = 0;
  uint64_t v6 = a2 + 12;
  do
    uint64_t result = BlueFin::GlSysLogEntry::PutU8(this, *(unsigned char *)(v6 + v5++));
  while (v5 != 4);
  return result;
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetMeAidParams(BlueFin::GlMeAcqWindowProvider *this, const BlueFin::GlSignalId *a2, BlueFin::GlMeAcqWin *a3, double a4)
{
  return BlueFin::GlMeWinMgr::GetMeAidParams((BlueFin::GlMeWinMgr *)(*((void *)this + 1) + 32), a2, a3, a4);
}

double BlueFin::GlMeAcqWindowProvider::GetAidSysTm(BlueFin::GlMeAcqWindowProvider *this, double a2, float *a3, int a4, double a5, double a6)
{
  return BlueFin::GlMeSatAidMgr::GetAidSysTm(*((void *)this + 1) + 352, a3, a4, 0, a2, a5, a6);
}

BOOL BlueFin::GlMeAcqWindowProvider::IsFactoryAidingDetected(BlueFin::GlMeAcqWindowProvider *this)
{
  unsigned int v1 = (unsigned __int16 *)(*((void *)this + 1) + 9888);
  BOOL result = *v1 - 1 <= 3 && *(unsigned __int8 *)(*((void *)this + 1) + 9890) - 1 < 4;
  *((unsigned char *)v1 + 3) = result;
  return result;
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetMicroKfMod(BlueFin::GlMeAcqWindowProvider *this)
{
  return *((void *)this + 1) + 112;
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetGlnsBitAndTMInfoFromMeas(uint64_t a1, unsigned __int8 *a2)
{
  return BlueFin::GlMeMsmtMgr::GetGlnsBitAndTMInfoFromMeas((BlueFin::GlMeMsmtMgr *)(*(void *)(a1 + 8) + 10624), a2);
}

char *BlueFin::GlMeAcqWindowProvider::GetSigMeas(BlueFin::GlMeMeasAidFilter **this, const BlueFin::GlSignalId *a2, double a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  return BlueFin::GlMeMeasAidFilter::GetSigMeas(this[1], a2, a3, a4, a5, a6);
}

uint64_t BlueFin::GlMeAcqWindowProvider::SetGpsL1cSecCodeOffset(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 8) + 32;
  *(unsigned char *)(v3 + a2 + 9868) = a3 != -1;
  *(_DWORD *)(v3 + 4 * a2 + 9900) = a3;
  return this;
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetGpsL1cSecCodeOffset(BlueFin::GlMeAcqWindowProvider *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)this + 1) + 32;
  *a3 = *(_DWORD *)(v3 + 4 * a2 + 9900);
  return *(unsigned __int8 *)(v3 + a2 + 9868);
}

uint64_t BlueFin::GlMeAcqWindowProvider::SetQzssL1cSecCodeOffset(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 8) + 32;
  *(unsigned char *)(v3 + a2 + 10028) = a3 != -1;
  *(_DWORD *)(v3 + 4 * a2 + 10040) = a3;
  return this;
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetQzssL1cSecCodeOffset(BlueFin::GlMeAcqWindowProvider *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)this + 1) + 32;
  *a3 = *(_DWORD *)(v3 + 4 * a2 + 10040);
  return *(unsigned __int8 *)(v3 + a2 + 10028);
}

uint64_t BlueFin::GlMeAcqWindowProvider::SetBdsB1cSecCodeOffset(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 8) + 32;
  *(unsigned char *)(v3 + a2 + 10080) = a3 != -1;
  *(_DWORD *)(v3 + 4 * a2 + 10144) = a3;
  return this;
}

uint64_t BlueFin::GlMeAcqWindowProvider::GetBdsB1cSecCodeOffset(BlueFin::GlMeAcqWindowProvider *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = *((void *)this + 1) + 32;
  *a3 = *(_DWORD *)(v3 + 4 * a2 + 10144);
  return *(unsigned __int8 *)(v3 + a2 + 10080);
}

void BlueFin::GlMeAcqWindowProvider::~GlMeAcqWindowProvider(BlueFin::GlMeAcqWindowProvider *this)
{
}

uint64_t BlueFin::GlMeAidingListener::SetCntinAiding(BlueFin::GlMeAidingListener *this, unsigned int a2, double a3, unsigned __int16 a4)
{
  return BlueFin::GlMeMicroKF::SetCntinFrq(*((void *)this + 1) + 112, a3, a4, a2);
}

uint64_t BlueFin::GlMeAidingListener::SetUserDynamicLimits(uint64_t this, __int16 a2, float a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(_WORD *)(v3 + 11628) = a2;
  *(float *)(v3 + 11632) = a3;
  return this;
}

void BlueFin::GlMeAidingListener::~GlMeAidingListener(BlueFin::GlMeAidingListener *this)
{
}

uint64_t BlueFin::GlMeDspMeasListener::SetGridMeas(uint64_t a1, uint64_t a2)
{
  return BlueFin::GlMeMsmtHolder::SetGridMeas(*(void *)(a1 + 8) + 11680, a2);
}

uint64_t BlueFin::GlMeDspMeasListener::UpdateFrameManagerSync(uint64_t a1, unsigned __int8 *a2, unsigned int a3, double a4)
{
  return BlueFin::GlMeMeasAidFilter::UpdateFrameManagerSync(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t BlueFin::GlMeDspMeasListener::VerifyTow(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v4[0] = *(unsigned char *)a2;
  int v5 = *(_DWORD *)(a2 + 4);
  __int16 v6 = *(_WORD *)(a2 + 8);
  return BlueFin::GlMeMeasAidFilter::VerifyTow(v2, (const BlueFin::GlSignalId *)v4);
}

void BlueFin::GlMeDspMeasListener::~GlMeDspMeasListener(BlueFin::GlMeDspMeasListener *this)
{
}

void BlueFin::GlMeMeasAidFilter::~GlMeMeasAidFilter(BlueFin::GlMeMeasAidFilter *this)
{
  *(void *)this = &unk_270EBE910;
  *((void *)this + 4) = &unk_270EBF4B0;
  *((void *)this + 6) = &unk_270EBF420;
}

{
  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlMeMeasSelfAidFilter::SelfAidDueToNoPeAid(BlueFin::GlMeMeasSelfAidFilter *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__src, long long a18, long long a19, long long a20,long long a21,long long a22,int a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int16 a26,int a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,unsigned int a43)
{
  unsigned int v59 = MEMORY[0x270FA5388](this, a2);
  STACK[0x23E8] = *MEMORY[0x263EF8340];
  if (BlueFin::GlMeMeasSelfAidFilter::m_potWinMgr) {
    BOOL v43 = BlueFin::GlMeMeasSelfAidFilter::m_potMsmtMgr == 0;
  }
  else {
    BOOL v43 = 1;
  }
  if (v43 || BlueFin::GlMeMeasSelfAidFilter::m_potGlMeIf == 0)
  {
    DeviceFaultNotify("glme_measaidfilter.cpp", 320, "SelfAidDueToNoPeAid", (char)"m_potWinMgr != (GlMeWinMgr*)(NULL_PTR) && m_potMsmtMgr != (GlMeMsmtMgr*)(NULL_PTR) && m_potGlMeIf != (GlMeIf*)(NULL_PTR)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_measaidfilter.cpp", 320, "m_potWinMgr != (GlMeWinMgr*)(NULL_PTR) && m_potMsmtMgr != (GlMeMsmtMgr*)(NULL_PTR) && m_potGlMeIf != (GlMeIf*)(NULL_PTR)");
  }
  BlueFin::GlSatAidInfo::GlSatAidInfo((uint64_t)&a38);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&a18 + 1, 0x13u, (const void **)&BlueFin::GlMeMeasSelfAidFilter::m_otSetMsmtSignalIds);
  int v62 = (void (**)(BlueFin::GlMeAcqWin *__hidden))var20_4;
  LOBYTE(v63) = 19;
  *(_OWORD *)var20_4 = 0u;
  *(_OWORD *)&var20_4[16] = 0u;
  *(_OWORD *)&var20_4[32] = 0u;
  long long v65 = 0u;
  HIDWORD(v65) = 0;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, (int **)&v62, (int **)&BlueFin::GlMeMeasSelfAidFilter::m_otSelfAidSigLst);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v62);
  *(long long *)((char *)&a20 + 4) = *(_OWORD *)&var20_4[32];
  *(long long *)((char *)&a21 + 4) = v65;
  a22 = 0u;
  *(long long *)((char *)&a18 + 4) = *(_OWORD *)var20_4;
  *(long long *)((char *)&a19 + 4) = *(_OWORD *)&var20_4[16];
  a24 = a18;
  memcpy(&a28, __src, 4 * a18);
  a26 = 0;
  a25 = 0;
  a27 = a28;
  BlueFin::GlSetIterator::operator++(&a24);
  BOOL v45 = a25 == a24 || BlueFin::GlMeMeasSelfAidFilter::m_potGlMeIf == 0;
  uint64_t result = !v45;
  if (!v45)
  {
    unsigned int v58 = result;
    unint64_t v47 = 0;
    while (1)
    {
      unsigned __int16 v48 = a26;
      if (a26 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v49 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * a26;
      int v51 = v49[1];
      LOBYTE(v62) = *v49;
      int v50 = v62;
      HIDWORD(v62) = v51;
      unsigned __int16 v63 = a26;
      uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)BlueFin::GlMeMeasSelfAidFilter::m_potMsmtMgr, (const BlueFin::GlSignalId *)&v62, 1, 1);
      int v62 = &off_270EBF450;
      LOBYTE(v63) = 0;
      *(_DWORD *)var20_4 = -1;
      *(_WORD *)&var20_4[4] = 575;
      *(void *)&var20_4[12] = 0;
      *(_DWORD *)&var20_4[20] = 0;
      *(_OWORD *)&var20_4[24] = xmmword_263BABE60;
      *(_DWORD *)&var20_4[40] = 2139095039;
      LOBYTE(__src) = v50;
      HIDWORD(__src) = v51;
      LOWORD(a18) = v48;
      HIDWORD(v61) = 0;
      (*(void (**)(uint64_t, void **, void (***)(BlueFin::GlMeAcqWin *__hidden), char *, void, void, double, double, double))(*(void *)BlueFin::GlMeMeasSelfAidFilter::m_potWinMgr + 24))(BlueFin::GlMeMeasSelfAidFilter::m_potWinMgr, &__src, &v62, (char *)&v61 + 4, 0, 0, (double)v59, 0.0, 0.0);
      if (v63 == v50 && *(_DWORD *)var20_4 == v51 && *(float *)&var20_4[32] <= 0.00000009)
      {
        char v53 = 0;
        if (MsmtSlotPtr) {
          goto LABEL_23;
        }
      }
      else
      {
        BlueFin::GlSetBase::Remove((uint64_t)&BlueFin::GlMeMeasSelfAidFilter::m_otSelfAidSigLst, *(__int16 *)&var20_4[4]);
        char v53 = 1;
        if (MsmtSlotPtr)
        {
LABEL_23:
          if (*(int *)(MsmtSlotPtr + 140) >= 11)
          {
            int v54 = *(_DWORD *)(MsmtSlotPtr + 84);
            if ((~(_BYTE)v54 & 0x30) == 0)
            {
              if ((v54 & 0x40) == 0) {
                char v53 = 1;
              }
              if ((v53 & 1) == 0)
              {
                a43 = v59;
                unint64_t v55 = STACK[0x23C8] + 96 * v47;
                *(unsigned char *)unint64_t v55 = v50;
                *(_DWORD *)(v55 + 12) = 6;
                *(void *)(v55 + 32) = 0;
                *(_DWORD *)(v55 + 40) = 1226024960;
                *(void *)(v55 + 44) = *(void *)&var20_4[28];
                *(_DWORD *)(v55 + 24) |= 0x12u;
                if ((~*(_DWORD *)&var20_4[20] & 0x12) == 0)
                {
                  uint64_t v60 = 0;
                  LOBYTE(__src) = v50;
                  HIDWORD(__src) = v51;
                  LOWORD(a18) = v48;
                  double SubBitTime = BlueFin::GlSystemTime::getSubBitTime((BlueFin::GlSystemTime *)&v60, (const BlueFin::GlSignalId *)&__src, 0);
                  unint64_t v57 = STACK[0x23C8] + 96 * v47;
                  *(double *)(v57 + 32) = SubBitTime;
                  *(_DWORD *)(v57 + 40) = 981668463;
                  *(_DWORD *)(v57 + 24) |= 4u;
                }
                ++v47;
              }
            }
          }
        }
      }
      BlueFin::GlSetIterator::operator++(&a24);
      if (a25 == a24 || v47 >= 0x5B)
      {
        (*(void (**)(uint64_t, char *))(*(void *)BlueFin::GlMeMeasSelfAidFilter::m_potGlMeIf + 240))(BlueFin::GlMeMeasSelfAidFilter::m_potGlMeIf, &a38);
        return v58;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlMeMeasAidFilter::UpdateFrameManagerSync(uint64_t result, unsigned __int8 *a2, unsigned int a3, double a4)
{
  uint64_t v4 = *a2;
  if ((v4 - 52) <= 0xD)
  {
    uint64_t v8 = result;
    v35[0] = *a2;
    int v36 = 0;
    uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
    __int16 v37 = 575;
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v9] == 255) {
      int v36 = -1;
    }
    else {
      __int16 v37 = BlueFin::GlSignalId::s_ausGnss2signalId[v9] + v4 - BlueFin::GlSvId::s_aucGnss2minSvId[v9];
    }
    uint64_t MsmtSlotPtr = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)(result + 10624), (const BlueFin::GlSignalId *)v35, 0, 1);
    uint64_t v11 = (BlueFin::GlMeGlonassFrameMgr *)BlueFin::GlMeSlots::GlonassFrameMgr(MsmtSlotPtr, a2);
    uint64_t result = BlueFin::GlMeGlonassFrameMgr::GetGlnsStrPhsInSym(v11, a3, &v34);
    if ((result & 1) == 0)
    {
      uint64_t v16 = &off_270EBF450;
      char v17 = 0;
      int v18 = -1;
      __int16 v19 = 575;
      uint64_t v20 = 0;
      int v21 = 0;
      long long v22 = xmmword_263BABE60;
      int v23 = 2139095039;
      double v24 = 0.0;
      int v25 = 2139095039;
      __int16 v26 = 0;
      uint64_t v27 = 0x7FEFFFFFFFFFFFFFLL;
      int v28 = -1;
      __int16 v29 = -1;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v30 = 0;
      int v33 = 0;
      int v15 = 0;
      uint64_t result = BlueFin::GlMeWinMgr::GetMeAcqWindow(v8 + 32, (const BlueFin::GlSignalId *)v35, (uint64_t)&v16, &v15, 0, 0, a4 * 1000.0, 0.0, 0.0);
      if ((v21 & 0x80) != 0)
      {
        double v12 = (v24 - a4) * 1000.0;
        if (v12 <= 0.0)
        {
          if (v12 >= 0.0)
          {
            int v14 = 0;
            return BlueFin::GlMeMsmtMgr::ReportSyncEpochCnt(v8 + 10624, a2, v14 + a3, v28, v24);
          }
          double v13 = -0.5;
        }
        else
        {
          double v13 = 0.5;
        }
        int v14 = (int)(v12 + v13);
        return BlueFin::GlMeMsmtMgr::ReportSyncEpochCnt(v8 + 10624, a2, v14 + a3, v28, v24);
      }
    }
  }
  return result;
}

char *BlueFin::GlMeMeasAidFilter::GetSigMeas(BlueFin::GlMeMeasAidFilter *this, const BlueFin::GlSignalId *a2, double a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int v6 = *((unsigned __int8 *)this + 8);
  uint64_t v7 = (BlueFin::GlMeMeasAidFilter *)((char *)this + 10624);
  if (!v6)
  {
    int v14 = v7;
    double v10 = fmod(a3, 4294967300.0);
    if (a3 <= 4294967300.0) {
      double v10 = a3;
    }
    if (v10 < -4294967300.0) {
      fmod(-v10, 4294967300.0);
    }
    BlueFin::GlMeMsmtMgr::GetSigMeas(v14, a2, (double)a4, (double)a5, (double)a6);
  }

  return BlueFin::GlMeMsmtMgr::GetSigMeas(v7, a2, a3, a4);
}

uint64_t BlueFin::GlMeMeasAidFilter::VerifyTow(uint64_t a1, const BlueFin::GlSignalId *a2)
{
  uint64_t result = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr((BlueFin::GlMeMsmtMgr *)(a1 + 10624), a2, 1, 1);
  unsigned int v4 = *(unsigned __int8 *)a2;
  if (*(unsigned char *)a2 && (v4 < 0x21 || v4 >= 0x42 && (v4 < 0x4C || (v4 + 81) <= 0xDu)))
  {
    int v5 = (BlueFin::GlMeFrameMgr *)BlueFin::GlMeSlots::GpsFrameMgr(result, (unsigned __int8 *)a2);
    return BlueFin::GlMeFrameMgr::VerifyTow(v5, v6);
  }
  return result;
}

uint64_t BlueFin::GlMeMeasAidFilter::GetDspMeasListenerIfc(BlueFin::GlMeMeasAidFilter *this)
{
  return (uint64_t)this + 29472;
}

uint64_t BlueFin::GlMeMeasAidFilter::GetAcqWindowProviderIfc(BlueFin::GlMeMeasAidFilter *this)
{
  return (uint64_t)this + 29488;
}

uint64_t BlueFin::GlMeMeasAidFilter::GetStateProviderIfc(BlueFin::GlMeMeasAidFilter *this)
{
  return (uint64_t)this + 29504;
}

uint64_t BlueFin::GlMeMeasAidFilter::GetAidingListenerIfc(BlueFin::GlMeMeasAidFilter *this)
{
  return (uint64_t)this + 29528;
}

uint64_t BlueFin::GlMeMeasAidFilter::GetSettingsIfc(BlueFin::GlMeMeasAidFilter *this)
{
  return (uint64_t)this + 29544;
}

uint64_t BlueFin::GlMeMeasAidFilter::GetMeasurementListenerIfc(BlueFin::GlMeMeasAidFilter *this)
{
  return (uint64_t)this + 29560;
}

void *BlueFin::GlPeGnssEphemerisMgr::RequireVerifiedEphFromSat(void *this)
{
  if (*((unsigned char *)this + 7024))
  {
    unsigned int v1 = this;
    int v2 = 0;
    *((unsigned char *)this + 7024) = 0;
    do
    {
      this = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v1, v2);
      if (this) {
        *((unsigned char *)this + 533) = 0;
      }
      ++v2;
    }
    while (v2 != 7);
  }
  return this;
}

void BlueFin::GlPeGnssEphemerisMgr::~GlPeGnssEphemerisMgr(BlueFin::GlPeGnssEphemerisMgr *this)
{
}

uint64_t BlueFin::GlMeMeasurementListener::SetMiniKfCbFromSyncIn(BlueFin::GlMeMeasurementListener *this, double a2)
{
  return BlueFin::GlMeMiniKF::UpdateCbFromSyncIn(*(BlueFin::GlMeMiniKF **)(*((void *)this + 1) + 10808), a2 + 0.075);
}

void BlueFin::GlMeMeasurementListener::~GlMeMeasurementListener(BlueFin::GlMeMeasurementListener *this)
{
}

uint64_t BlueFin::GlMeMafSettingsListener::LimitMeasurements(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 8);
  *(_DWORD *)(v2 + 11648) = a2;
  *(_DWORD *)(v2 + 29456) = a2;
  return this;
}

void BlueFin::GlMeMafSettingsListener::~GlMeMafSettingsListener(BlueFin::GlMeMafSettingsListener *this)
{
}

void BlueFin::GlMeStateProvider::~GlMeStateProvider(BlueFin::GlMeStateProvider *this)
{
}

uint64_t BlueFin::GLNFrameMgrUtils::MeanderDecode(uint64_t this, const unsigned int *a2, unsigned int *a3, char a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((a3 & 0x1F) != 0) {
    unsigned __int8 v4 = (a3 >> 5) + 1;
  }
  else {
    unsigned __int8 v4 = a3 >> 5;
  }
  unsigned int v5 = ((int)a3 >> 1) & 0x1F;
  if ((int)a3 >> 1 <= 0) {
    unsigned int v5 = -(-((int)a3 >> 1) & 0x1F);
  }
  long long v15 = xmmword_263BB24A0;
  if ((a4 & 1) == 0) {
    long long v15 = xmmword_263BB2490;
  }
  if (v4)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    int v8 = 0;
    unsigned __int8 v9 = 0;
    do
    {
      int v10 = ~(16 * v7) & 0x10;
      unsigned int v11 = a2[v9];
      unsigned int v12 = -4;
      do
      {
        v12 += 4;
        v11 |= *(unsigned __int8 *)((unint64_t)&v15 | (*(_DWORD *)(this + 4 * v6) >> v12) & 0xFLL) << v10;
        a2[v9] = v11;
        v10 += 2;
      }
      while (v12 < 0x1C);
      v8 += 16;
      if (v8 == 32)
      {
        ++v9;
        int v8 = 0;
      }
      int v7 = ++v6;
    }
    while (v6 != v4);
  }
  if (v5)
  {
    unsigned int v13 = a2[(a3 >> 6)] & 0xFFFF0000;
    if (v5 >= 0x11) {
      int v14 = ((unsigned __int16)a2[(a3 >> 6)] << -(char)v5) | v13;
    }
    else {
      int v14 = v13 << (16 - v5);
    }
    a2[(a3 >> 6)] = v14;
  }
  return this;
}

BOOL BlueFin::GLNFrameMgrUtils::Parity(BlueFin::GLNFrameMgrUtils *this, unsigned int *a2)
{
  unint64_t v2 = 0;
  BOOL v3 = 0;
  unsigned __int8 v4 = (int8x8_t *)&qword_263BB24B4;
  do
  {
    int8x8_t v5 = vand_s8(*v4, *(int8x8_t *)((char *)this + 4));
    unsigned __int32 v6 = v5.i32[0] ^ v4[-1].i32[1] & *(_DWORD *)this ^ v5.i32[1];
    unsigned int v7 = v6 ^ HIWORD(v6) ^ ((v6 ^ HIWORD(v6)) >> 8);
    if ((0x6996u >> ((v7 ^ (v7 >> 4)) & 0xF))) {
      break;
    }
    BOOL v3 = v2 > 6;
    unsigned __int8 v4 = (int8x8_t *)((char *)v4 + 12);
    ++v2;
  }
  while (v2 != 8);
  return v3;
}

BOOL BlueFin::GPSFrameMgrUtils::Parity(BlueFin::GPSFrameMgrUtils *this)
{
  unsigned int v1 = this & 0xBB1F34A0 ^ ((this & 0xBB1F34A0) >> 16) ^ ((this & 0xBB1F34A0 ^ ((this & 0xBB1F34A0) >> 16)) >> 8);
  unsigned int v2 = v1 ^ (v1 >> 4) ^ ((v1 ^ (v1 >> 4)) >> 2);
  if ((v2 ^ (v2 >> 1))) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    unint64_t v4 = v3;
    if (v3 == 5) {
      break;
    }
    unsigned int v5 = __const__ZN7BlueFin16GPSFrameMgrUtils6ParityEj_ulParityMask[v3 + 1] & this;
    unsigned int v6 = v5 ^ HIWORD(v5) ^ ((v5 ^ HIWORD(v5)) >> 8);
    unsigned int v7 = v6 ^ (v6 >> 4) ^ ((v6 ^ (v6 >> 4)) >> 2);
    int v8 = v7 ^ (v7 >> 1);
    unint64_t v3 = v4 + 1;
  }
  while ((v8 & 1) == 0);
  return v4 > 4;
}

BOOL BlueFin::GlMeBeidouDecodeMgr::GetSecondOfWeek(BlueFin::GlMeBeidouDecodeMgr *a1, unsigned __int8 *a2, int *a3, unsigned int *a4)
{
  int v4 = *((_DWORD *)a1 + 26);
  if (v4 == 2)
  {
    uint64_t FrameMemory = BlueFin::GlMeBeidouDecodeMgr::GetFrameMemory(a1);
    unsigned int v9 = *a2 - 81;
    BOOL v10 = v9 >= 0x35;
    if (v9 >= 0x35) {
      int v11 = 300 * (5 - *(unsigned __int8 *)(FrameMemory + 64));
    }
    else {
      int v11 = 0;
    }
    int v12 = v11 + *(_DWORD *)(FrameMemory + 72);
    if (v10) {
      int v13 = 3;
    }
    else {
      int v13 = 6;
    }
    int v14 = 20 * v12;
    int v15 = 2 * v12;
    if (!v10) {
      int v15 = v14;
    }
    *a3 = v15;
    unsigned int v16 = *(_DWORD *)(FrameMemory + 68) + v13;
    if (v16 > 0x93A7F) {
      v16 -= 604800;
    }
    *a4 = v16;
  }
  return v4 == 2;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::SetDSPDataBits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(unsigned __int8 *)(a4 + 9);
  if (v5 != *(unsigned __int8 *)(a5 + 9) || *(_DWORD *)(a4 + 20) != *(_DWORD *)(a5 + 20))
  {
    DeviceFaultNotify("glme_beidou_decoder.cpp", 98, "SetDSPDataBits", (char)"(rFll.m_otSvId == rPll.m_otSvId) && (rFll.m_ulEpochCnt == rPll.m_ulEpochCnt)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder.cpp", 98, "(rFll.m_otSvId == rPll.m_otSvId) && (rFll.m_ulEpochCnt == rPll.m_ulEpochCnt)");
  }
  v53[0] = a1;
  v53[1] = a2;
  v53[2] = a3;
  __int16 v54 = 0;
  int v55 = 0;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  char v58 = v5;
  BOOL v59 = (v5 - 81) < 0x35;
  unsigned int v10 = v5 - 76;
  unsigned int v11 = (v5 + 122);
  BOOL v13 = v10 < 5 || v11 < 5;
  BOOL v60 = v13;
  *(void *)(a1 + 96) = v53;
  int v45 = 0;
  int v38 = 0;
  int v31 = 0;
  v48[0] = 0;
  v48[1] = a4 + 44;
  char v49 = 1;
  int v51 = 0;
  long long v50 = xmmword_263BB2530;
  char v52 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v48, *(unsigned __int16 *)(a4 + 16));
  uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 32);
  v41[0] = 0;
  v41[1] = v14 + 172;
  char v42 = 1;
  int v46 = 0;
  int v44 = 0;
  uint64_t v43 = 0x40000000400;
  char v47 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v41, *(unsigned __int16 *)(v14 + 16));
  uint64_t v15 = *(void *)(*(void *)(a1 + 96) + 40);
  v34[0] = 0;
  v34[1] = v15 + 44;
  char v35 = 1;
  int v39 = 0;
  int v37 = 0;
  uint64_t v36 = 0x40000000400;
  char v40 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v34, *(unsigned __int16 *)(v15 + 16));
  uint64_t v16 = *(void *)(*(void *)(a1 + 96) + 40);
  v27[0] = 0;
  v27[1] = v16 + 172;
  char v28 = 1;
  int v32 = 0;
  int v30 = 0;
  uint64_t v29 = 0x40000000400;
  char v33 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v27, *(unsigned __int16 *)(v16 + 16));
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(v17 + 32);
  unsigned int v19 = *(_DWORD *)(v18 + 20);
  if (*(unsigned __int8 *)(v18 + 9) - 81 > 0x34) {
    unint64_t v20 = v19 >> 1;
  }
  else {
    unint64_t v20 = v19 / 0x14uLL;
  }
  uint64_t v21 = *(void *)(v17 + 40);
  unsigned int v22 = *(_DWORD *)(v21 + 20);
  if (*(unsigned __int8 *)(v21 + 9) - 81 > 0x34) {
    unint64_t v23 = v22 >> 1;
  }
  else {
    unint64_t v23 = v22 / 0x14uLL;
  }
  if (((*(_DWORD *)(a5 + 12) | *(_DWORD *)(a4 + 12)) & 4) != 0
    || (unsigned int v24 = v20 - DWORD1(v50),
        v24 < *(_DWORD *)(BlueFin::GlMeBeidouDecodeMgr::Decoder((BlueFin::GlMeBeidouDecodeMgr *)a1, 0) + 8))
    || (unsigned int v25 = v23 - HIDWORD(v36),
        v25 < *(_DWORD *)(BlueFin::GlMeBeidouDecodeMgr::Decoder((BlueFin::GlMeBeidouDecodeMgr *)a1, 1u) + 8)))
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 136) = 0;
    *(void *)(a1 + 128) = &unk_270EBEC00;
    *(_WORD *)(a1 + 140) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    *(void *)(a1 + 144) = &unk_270EBEC00;
    *(_WORD *)(a1 + 156) = 0;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 348) = 0u;
    *(void *)(a1 + 167) = 0;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_OWORD *)(a1 + 560) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_OWORD *)(a1 + 608) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
  }
  BlueFin::GlMeBeidouPolarityMgr::SetBits((BlueFin::GlMeBeidouPolarityMgr *)a1, (*(_DWORD *)(a4 + 12) >> 9) & 1, (BlueFin::GlBitBuffer *)v48, v20, (*(_DWORD *)(a5 + 12) >> 9) & 1, (BlueFin::GlBitBuffer *)v34, v23);
  return BlueFin::GlMeBeidouDecodeMgr::SetBits((BlueFin::GlMeBeidouDecodeMgr *)a1, (BlueFin::GlBitBuffer *)v48, (BlueFin::GlBitBuffer *)v41, v20, (BlueFin::GlBitBuffer *)v34, (BlueFin::GlBitBuffer *)v27, v23);
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::Decoder(BlueFin::GlMeBeidouDecodeMgr *a1, unsigned int a2)
{
  int v2 = *((_DWORD *)a1 + 26);
  if (v2)
  {
    if (v2 == 1)
    {
      return BlueFin::GlMeBeidouDecodeMgr::Preamble(a1, a2);
    }
    else
    {
      if (v2 != 2)
      {
        DeviceFaultNotify("glme_beidou_decoder.cpp", 307, "Decoder", (char)"m_eState == GLME_BDS_DCD_STATE_FRAME");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder.cpp", 307, "m_eState == GLME_BDS_DCD_STATE_FRAME");
      }
      return BlueFin::GlMeBeidouDecodeMgr::Frame((uint64_t)a1, a2);
    }
  }
  else
  {
    return BlueFin::GlMeBeidouDecodeMgr::Search(a1, a2);
  }
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::SetBits(BlueFin::GlMeBeidouDecodeMgr *this, BlueFin::GlBitBuffer *a2, BlueFin::GlBitBuffer *a3, uint64_t a4, BlueFin::GlBitBuffer *a5, BlueFin::GlBitBuffer *a6, uint64_t a7)
{
  int v14 = *((_DWORD *)a2 + 7);
  int v30 = *((_DWORD *)a5 + 6);
  int v31 = *((_DWORD *)a5 + 7);
  int v32 = *((_DWORD *)a2 + 6);
  BOOL v15 = v30 != v31;
  uint64_t v16 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 0);
  unsigned int v17 = (*(uint64_t (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, void, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, uint64_t))(*(void *)v16 + 16))(v16, this, 0, a2, a3, a4);
  uint64_t v18 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 1u);
  unsigned int v33 = a7;
  uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, uint64_t, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, uint64_t))(*(void *)v18 + 16))(v18, this, 1, a5, a6, a7);
  BOOL v21 = v32 == v14;
  BOOL v20 = v32 != v14;
  BOOL v21 = v21 && v30 == v31;
  if (!v21)
  {
    unsigned int v22 = result;
    do
    {
      if (v20 && v15 && v17 <= v22 || !v15)
      {
        uint64_t v25 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 0);
        (*(void (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, void, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, uint64_t))(*(void *)v25 + 24))(v25, this, 0, a2, a3, a4);
        BOOL v20 = *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 7);
        uint64_t v26 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 0);
        uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, void, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, uint64_t))(*(void *)v26 + 16))(v26, this, 0, a2, a3, a4);
        unsigned int v17 = result;
      }
      else
      {
        uint64_t v23 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 1u);
        (*(void (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, uint64_t, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, void))(*(void *)v23 + 24))(v23, this, 1, a5, a6, v33);
        BOOL v15 = *((_DWORD *)a5 + 6) != *((_DWORD *)a5 + 7);
        uint64_t v24 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 1u);
        uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, uint64_t, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, void))(*(void *)v24 + 16))(v24, this, 1, a5, a6, v33);
        unsigned int v22 = result;
      }
      uint64_t v27 = *((void *)this + 12);
      if (*(unsigned char *)(v27 + 24) && *(int *)(v27 + 28) <= 1)
      {
        *(unsigned char *)(v27 + 24) = 0;
        *((_DWORD *)a2 + 7) = 0;
        *((unsigned char *)a2 + 40) = 0;
        *((_DWORD *)a3 + 7) = 0;
        *((unsigned char *)a3 + 40) = 0;
        *((_DWORD *)a5 + 7) = 0;
        *((unsigned char *)a5 + 40) = 0;
        *((_DWORD *)a6 + 7) = 0;
        *((unsigned char *)a6 + 40) = 0;
        BOOL v20 = *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 7);
        BOOL v15 = *((_DWORD *)a5 + 6) != *((_DWORD *)a5 + 7);
        uint64_t v28 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 0);
        unsigned int v17 = (*(uint64_t (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, void, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, uint64_t))(*(void *)v28 + 16))(v28, this, 0, a2, a3, a4);
        uint64_t v29 = BlueFin::GlMeBeidouDecodeMgr::Decoder(this, 1u);
        uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlMeBeidouDecodeMgr *, uint64_t, BlueFin::GlBitBuffer *, BlueFin::GlBitBuffer *, void))(*(void *)v29 + 16))(v29, this, 1, a5, a6, v33);
        unsigned int v22 = result;
      }
    }
    while (v20 || v15);
  }
  return result;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::SyncFound(BlueFin::GlMeBeidouDecodeMgr *this, unsigned int a2, int a3, unsigned int a4)
{
  v47[50] = *MEMORY[0x263EF8340];
  int v7 = *((_DWORD *)this + 26);
  if (v7 == 1)
  {
    uint64_t v12 = BlueFin::GlMeBeidouDecodeMgr::Preamble(this, 0);
    uint64_t v9 = *(unsigned int *)(v12 + 8);
    unsigned int v23 = *(unsigned __int16 *)(v12 + 12);
    uint64_t v10 = BlueFin::GlMeBeidouDecodeMgr::Preamble(this, 1u);
    size_t v11 = 272;
  }
  else
  {
    if (v7)
    {
      DeviceFaultNotify("glme_beidou_decoder.cpp", 217, "SyncFound", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder.cpp", 217, "false");
    }
    uint64_t v8 = BlueFin::GlMeBeidouDecodeMgr::Search(this, 0);
    uint64_t v9 = *(unsigned int *)(v8 + 8);
    unsigned int v23 = *(unsigned __int16 *)(v8 + 12);
    uint64_t v10 = BlueFin::GlMeBeidouDecodeMgr::Search(this, 1u);
    size_t v11 = 232;
  }
  uint64_t v13 = *(unsigned int *)(v10 + 8);
  unsigned int v14 = *(unsigned __int16 *)(v10 + 12);
  if (*((_DWORD *)this + 26))
  {
    memcpy(__dst, (char *)this + 224, v11);
    memcpy(v45, (char *)this + 496, v11);
    memcpy(v46, (char *)this + 768, v11);
    BOOL v15 = (char *)this + 1040;
  }
  else
  {
    memcpy(__dst, (char *)this + 384, v11);
    memcpy(v45, (char *)this + 616, v11);
    memcpy(v46, (char *)this + 848, v11);
    BOOL v15 = (char *)this + 1080;
  }
  memcpy(v47, v15, v11);
  if (a4 > 0x93A7F)
  {
    *((_DWORD *)this + 26) = 1;
    BlueFin::GlMeBeidouDecodeMemoryPreambleBase::GlMeBeidouDecodeMemoryPreambleBase((BlueFin::GlMeBeidouDecodeMgr *)((char *)this + 128), a2);
    *((_OWORD *)this + 33) = 0u;
    *((_OWORD *)this + 34) = 0u;
    *((_OWORD *)this + 31) = 0u;
    *((_OWORD *)this + 32) = 0u;
    *((_OWORD *)this + 29) = 0u;
    *((_OWORD *)this + 30) = 0u;
    *((_OWORD *)this + 27) = 0u;
    *((_OWORD *)this + 28) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 26) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 14) = 0u;
  }
  else
  {
    *((_DWORD *)this + 26) = 2;
    uint64_t FrameMemory = BlueFin::GlMeBeidouDecodeMgr::GetFrameMemory(this);
    BlueFin::GlMeBeidouDecodeMemoryFrame::Initialize(FrameMemory, (uint64_t)this, a2, a3, a4);
  }
  v39[0] = __dst;
  v39[1] = 0;
  char v40 = 0;
  int v42 = 0;
  long long v41 = xmmword_263BB2540;
  char v43 = 0;
  v34[0] = v45;
  v34[1] = 0;
  char v35 = 0;
  int v37 = 0;
  long long v36 = xmmword_263BB2540;
  char v38 = 0;
  v29[0] = v46;
  v29[1] = 0;
  char v30 = 0;
  int v32 = 0;
  long long v31 = xmmword_263BB2540;
  char v33 = 0;
  v24[0] = v47;
  v24[1] = 0;
  char v25 = 0;
  int v27 = 0;
  long long v26 = xmmword_263BB2540;
  char v28 = 0;
  unsigned int v17 = v9 - v13;
  if (v9 < v13)
  {
    if ((int)v13 - (int)v9 >= v14) {
      LOWORD(v14) = 0;
    }
    else {
      LOWORD(v14) = v14 - (v13 - v9);
    }
    uint64_t v13 = v9;
    goto LABEL_20;
  }
  if (v13 >= v9)
  {
LABEL_20:
    LOWORD(v19) = v23;
    goto LABEL_21;
  }
  BOOL v18 = v23 >= v17;
  unsigned int v19 = v23 - v17;
  if (v19 == 0 || !v18) {
    LOWORD(v19) = 0;
  }
  uint64_t v9 = v13;
LABEL_21:
  unsigned int v20 = (unsigned __int16)v19;
  BlueFin::GlBitBuffer::Limit((uint64_t)v39, (unsigned __int16)v19);
  BlueFin::GlBitBuffer::Limit((uint64_t)v34, v20);
  BlueFin::GlBitBuffer::Limit((uint64_t)v29, (unsigned __int16)v14);
  BlueFin::GlBitBuffer::Limit((uint64_t)v24, (unsigned __int16)v14);
  uint64_t result = BlueFin::GlMeBeidouDecodeMgr::SetBits(this, (BlueFin::GlBitBuffer *)v39, (BlueFin::GlBitBuffer *)v34, v9, (BlueFin::GlBitBuffer *)v29, (BlueFin::GlBitBuffer *)v24, v13);
  *(unsigned char *)(*((void *)this + 12) + 24) = 1;
  return result;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::Search(BlueFin::GlMeBeidouDecodeMgr *a1, unsigned int a2)
{
  if (*((_DWORD *)a1 + 26))
  {
    DeviceFaultNotify("glme_beidou_decoder.cpp", 314, "Search", (char)"GLME_BDS_DCD_STATE_SEARCH == m_eState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder.cpp", 314, "GLME_BDS_DCD_STATE_SEARCH == m_eState");
  }
  return BlueFin::GlMeBeidouDecodeMgr::GetSearchMemory(a1) + 16 * a2;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::Preamble(BlueFin::GlMeBeidouDecodeMgr *a1, unsigned int a2)
{
  if (*((_DWORD *)a1 + 26) != 1)
  {
    DeviceFaultNotify("glme_beidou_decoder.cpp", 322, "Preamble", (char)"GLME_BDS_DCD_STATE_PREAMBLE == m_eState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder.cpp", 322, "GLME_BDS_DCD_STATE_PREAMBLE == m_eState");
  }
  return BlueFin::GlMeBeidouDecodeMgr::GetPreambleMemory(a1) + 16 * a2;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::Frame(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 104) != 2)
  {
    DeviceFaultNotify("glme_beidou_decoder.cpp", 330, "Frame", (char)"GLME_BDS_DCD_STATE_FRAME == m_eState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder.cpp", 330, "GLME_BDS_DCD_STATE_FRAME == m_eState");
  }
  return a1 + 32 * a2 + 128;
}

uint64_t BlueFin::GlMeBeidouDecodeUtil::Deinterleave(uint64_t this, unsigned int a2, int *a3, unsigned int *a4, unsigned int *a5)
{
  if (this == 1)
  {
    int v5 = (a2 >> 19) & 0x7FF;
    unint64_t v6 = ((65537 * (a2 & 0x7FFF)) | ((unint64_t)(65537 * (a2 & 0x7FFF)) << 32)) & 0x7AC83D641EB27591;
    unint64_t v7 = v6 ^ (v6 >> 8) ^ ((v6 ^ (v6 >> 8)) >> 4);
    unint64_t v8 = (v7 ^ (v7 >> 2) ^ ((v7 ^ (v7 >> 2)) >> 1)) & 0x1000100010001;
    unsigned int v9 = dword_263BB25D0[(((v8 >> 30) | v8) | (((v8 >> 30) | v8) >> 15)) & 0xF];
    int v10 = (a2 >> 12) & 7;
    unsigned int v11 = (a2 >> 4);
    if (v5 != 1810)
    {
      v10 ^= 7u;
      v11 ^= 0xFCu;
    }
    if (((v5 ^ 0x712) & 0x3FF) == (v5 ^ 0x712u) >> 1) {
      unsigned int v12 = v9;
    }
    else {
      unsigned int v12 = v9 | 0x80000000;
    }
    if ((v10 - 6) < 0xFFFFFFFB || v11 > 0x93) {
      v12 |= 0x40000000u;
    }
    *a4 = v12;
    *a3 = a2 & 0x3FFFFFFF;
  }
  else
  {
    int v14 = 0;
    int v15 = 0;
    for (int i = 28; i != -4; i -= 4)
    {
      unsigned int v17 = (_DWORD *)((char *)&unk_263BB2550 + 4 * (((a2 & 0x3FFFFFFF) >> i) & 0xF));
      int v14 = *v17 | (4 * v14);
      int v15 = v17[16] | (4 * v15);
    }
    unint64_t v18 = ((65537 * (v14 & 0x7FFFu)) | ((unint64_t)(65537 * (v14 & 0x7FFFu)) << 32)) & 0x7AC83D641EB27591;
    unint64_t v19 = v18 ^ (v18 >> 8) ^ ((v18 ^ (v18 >> 8)) >> 4);
    unint64_t v20 = (v19 ^ (v19 >> 2) ^ ((v19 ^ (v19 >> 2)) >> 1)) & 0x1000100010001;
    LODWORD(v20) = dword_263BB25D0[(((v20 >> 30) | v20) | (((v20 >> 30) | v20) >> 15)) & 0xF];
    unint64_t v21 = ((65537 * (v15 & 0x7FFFu)) | ((unint64_t)(65537 * (v15 & 0x7FFFu)) << 32)) & 0x7AC83D641EB27591;
    unint64_t v22 = v21 ^ (v21 >> 8) ^ ((v21 ^ (v21 >> 8)) >> 4);
    unint64_t v23 = (v22 ^ (v22 >> 2) ^ ((v22 ^ (v22 >> 2)) >> 1)) & 0x1000100010001;
    LODWORD(v23) = dword_263BB25D0[(((v23 >> 30) | v23) | (((v23 >> 30) | v23) >> 15)) & 0xF];
    *a3 = (v14 << 15) & 0x3FF80000 | (16 * (v15 & 0x7FF0 | v14 & 0xF)) | v15 & 0xF;
    *a4 = (v20 << 15) & 0x3FF80000 | (16 * (v23 & 0x7FF0 | v20 & 0xF)) | v23 & 0xF;
  }
  return this;
}

uint64_t BlueFin::GlMeBeidouDecodeUtil::NextBit(BlueFin::GlMeBeidouDecodeUtil *this, int a2, _DWORD *a3, int *a4, int *a5, unsigned int *a6, unsigned int *a7, BlueFin::GlBitBuffer *a8, BlueFin::GlBitBuffer *a9, int a10, unsigned int a11, int a12, unsigned int a13)
{
  unsigned int v17 = 2 * (*a3 ^ this);
  int v18 = (*a4 | a2) & 1;
  *a3 = this;
  *a4 = a2;
  int v19 = (2 - v18) * (v17 - 1);
  int v20 = *((_DWORD *)a8 + 7);
  if (*((_DWORD *)a8 + 6) == v20)
  {
    int v20 = 0;
    *((_DWORD *)a8 + 7) = 0;
  }
  *((_DWORD *)a8 + 8) = v20;
  *((unsigned char *)a8 + 40) = 1;
  uint64_t result = BlueFin::GlBitBuffer::GetU(a8, BYTE4(a9));
  if ((int)result >> (BYTE4(a9) - 1) == 1) {
    int v22 = (uint64_t)0xFFFFFFFF00000000 >> (32 - BYTE4(a9));
  }
  else {
    int v22 = 0;
  }
  int v23 = result + v22 + v19;
  if ((_BYTE)a9)
  {
    uint64_t v24 = (uint64_t *)BlueFin::GlBitBuffer::Reset((uint64_t)a8);
    if (a10 >= v23) {
      int v25 = v23;
    }
    else {
      int v25 = a10;
    }
    if (v25 <= -a10) {
      int v26 = -a10;
    }
    else {
      int v26 = v25;
    }
    uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU(v24, (0xFFFFFFFFuLL >> (32 - BYTE4(a9))) + v26 + 1, BYTE4(a9));
  }
  BOOL v27 = v23 > 0;
  *a5 = *a5 & 1 ^ v27 | (2 * *a5);
  *a7 = v27 | (2 * *a7);
  if (v23 >= 0) {
    unsigned int v28 = v23;
  }
  else {
    unsigned int v28 = -v23;
  }
  *a6 = (v28 >= a11) | (2 * *a6);
  return result;
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistBase::Set(BlueFin::GlMeBeidouDecodeSyncBitHistBase *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *))(*(void *)this + 16))(this);
  uint64_t v5 = (v4 - 1);
  if (v4 < 1)
  {
LABEL_6:
    (*(void (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t, uint64_t))(*(void *)this + 32))(this, v5, a2);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t, uint64_t))(*(void *)this + 48))(this, v5, 1);
    uint64_t v7 = v5;
  }
  else
  {
    int v6 = v4;
    uint64_t v7 = 0;
    while ((*(unsigned int (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 24))(this, v7) != a2&& (*(unsigned int (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 40))(this, v7))
    {
      uint64_t v7 = (v7 + 1);
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    (*(void (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t, uint64_t))(*(void *)this + 32))(this, v7, a2);
    int v9 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 40))(this, v7);
    uint64_t result = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t, void))(*(void *)this + 48))(this, v7, (v9 + 1));
  }
  if ((int)v7 >= 1)
  {
    do
    {
      unsigned int v10 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void))(*(void *)this + 40))(this, (v7 - 1));
      uint64_t result = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 40))(this, v7);
      if (v10 >= result) {
        break;
      }
      uint64_t v11 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void))(*(void *)this + 24))(this, (v7 - 1));
      uint64_t v12 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 24))(this, v7);
      (*(void (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void, uint64_t))(*(void *)this + 32))(this, (v7 - 1), v12);
      (*(void (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t, uint64_t))(*(void *)this + 32))(this, v7, v11);
      uint64_t v13 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void))(*(void *)this + 40))(this, (v7 - 1));
      uint64_t v14 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 40))(this, v7);
      (*(void (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void, uint64_t))(*(void *)this + 48))(this, (v7 - 1), v14);
      uint64_t result = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t, uint64_t))(*(void *)this + 48))(this, v7, v13);
      unsigned int v15 = v7;
      uint64_t v7 = (v7 - 1);
    }
    while (v15 > 1);
  }
  return result;
}

BOOL BlueFin::GlMeBeidouDecodeSyncBitHistBase::Get(BlueFin::GlMeBeidouDecodeSyncBitHistBase *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  *a4 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void))(*(void *)this + 24))(this, 0);
  unsigned int v7 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void))(*(void *)this + 40))(this, 0);
  BOOL result = 0;
  if (v7 >= a2)
  {
    int v9 = (*(uint64_t (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, void))(*(void *)this + 40))(this, 0);
    return v9
         - (*(unsigned int (**)(BlueFin::GlMeBeidouDecodeSyncBitHistBase *, uint64_t))(*(void *)this + 40))(this, 1) >= a3;
  }
  return result;
}

unsigned char **BlueFin::GlMeBeidouDataBuildler::Found(unsigned char **this, int a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = a2;
  }
  else
  {
    uint64_t v3 = a2;
    if (this[3][a2])
    {
      if (*((char *)this + 8) >= 1)
      {
        uint64_t v4 = 0;
        do
        {
          if (a2 != v4)
          {
            uint64_t v5 = this[2];
            int v6 = this[3];
            int v7 = (char)v6[v4];
            int v8 = (char)v6[a2];
            if (v7 <= v8)
            {
              v5[v4] = 0;
              this[3][v4] = 0;
            }
            else if ((char)v5[v4] <= v8)
            {
              v5[v4] = v8 + 1;
            }
          }
          ++v4;
        }
        while (v4 < *((char *)this + 8));
      }
      this[2][a2] = **this;
    }
  }
  int v9 = this[2];
  if (!v9[v3]) {
    v9[v3] = **this;
  }
  this[3][v3] = **this;
  return this;
}

void BlueFin::GlMeBeidouDataBuildler::Reduce(BlueFin::GlMeBeidouDataBuildler *this)
{
  int v2 = (char **)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      do
      {
        uint64_t v4 = *v3;
        uint64_t v5 = *((void *)this + 2);
        uint64_t v6 = *((void *)this + 3);
        char v7 = *(unsigned char *)(v5 + v4);
        char v8 = *(unsigned char *)(v6 + v4);
        if ((v3[1] & 0x80000000) == 0)
        {
          uint64_t v9 = v3[1];
          unsigned int v10 = v3 + 2;
          do
          {
            if (v7 <= *(char *)(v5 + v9)) {
              char v7 = *(unsigned char *)(v5 + v9);
            }
            int v11 = *(char *)(v6 + v9);
            if (v11 < v8) {
              char v8 = v11;
            }
            int v12 = *v10++;
            uint64_t v9 = v12;
          }
          while ((v12 & 0x80000000) == 0);
        }
        if (v7 < v8 && *((char *)this + 8) >= 1)
        {
          uint64_t v13 = 0;
          do
          {
            uint64_t v14 = *((void *)this + 2);
            if (*(char *)(v14 + v13) > v7) {
              *(unsigned char *)(v14 + v13) = v7;
            }
            uint64_t v15 = *((void *)this + 3);
            if (*(char *)(v15 + v13) > v7) {
              *(unsigned char *)(v15 + v13) = v7;
            }
            ++v13;
          }
          while (v13 < *((char *)this + 8));
        }
        uint64_t v16 = v2[1];
        ++v2;
        uint64_t v3 = v16;
      }
      while (v16);
    }
  }
  int v17 = *((char *)this + 8);
  if (v17 >= 1)
  {
    int v18 = 0;
    uint64_t v19 = *((unsigned __int8 *)this + 8);
    int v20 = (char *)*((void *)this + 2);
    do
    {
      int v22 = *v20++;
      int v21 = v22;
      if (v22 < (char)v18 || v18 == 0) {
        int v24 = v21;
      }
      else {
        int v24 = v18;
      }
      if ((_BYTE)v21) {
        int v18 = v24;
      }
      --v19;
    }
    while (v19);
    int v25 = (char)(v18 - 1);
    if (v25 >= 1)
    {
      uint64_t v26 = 0;
      do
      {
        uint64_t v27 = *((void *)this + 2);
        if (*(unsigned char *)(v27 + v26))
        {
          *(unsigned char *)(v27 + v26) -= v25;
          *(unsigned char *)(*((void *)this + 3) + v26) -= v25;
          LOBYTE(v17) = *((unsigned char *)this + 8);
        }
        ++v26;
      }
      while (v26 < (char)v17);
    }
  }
  bzero(*((void **)this + 4), 2 * (char)v17);
  int v28 = *((char *)this + 8);
  if (v28 >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      *(unsigned char *)(*((void *)this + 4) + *(char *)(*((void *)this + 2) + v29)) = 1;
      *(unsigned char *)(*((void *)this + 4) + *(char *)(*((void *)this + 3) + v29++)) = 1;
    }
    while (v29 < *((char *)this + 8));
    LOBYTE(v28) = *((unsigned char *)this + 8);
  }
  if ((char)(2 * v28 - 2) > 1)
  {
    uint64_t v30 = (2 * v28 - 2);
    do
    {
      if (*(unsigned char *)(*((void *)this + 4) + v30)) {
        BOOL v31 = 1;
      }
      else {
        BOOL v31 = (char)v28 < 1;
      }
      if (!v31)
      {
        uint64_t v32 = 0;
        do
        {
          uint64_t v33 = *((void *)this + 2);
          uint64_t v34 = *(char *)(v33 + v32);
          if (v30 < v34) {
            *(unsigned char *)(v33 + v32) = v34 - 1;
          }
          uint64_t v35 = *((void *)this + 3);
          uint64_t v36 = *(char *)(v35 + v32);
          if (v30 < v36) {
            *(unsigned char *)(v35 + v32) = v36 - 1;
          }
          ++v32;
        }
        while (v32 < *((char *)this + 8));
        LOBYTE(v28) = *((unsigned char *)this + 8);
      }
      --v30;
    }
    while ((char)v30 > 1);
  }
}

void BlueFin::GlMeBeidouDataBuildler::Eof(BlueFin::GlMeBeidouDataBuildler *this)
{
  BlueFin::GlMeBeidouDataBuildler::Reduce(this);
  **(unsigned char **)this = 0;
  int v2 = *((char *)this + 8);
  uint64_t v3 = *(unsigned char **)this;
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = *(char *)(*((void *)this + 3) + v4);
      if ((char)*v3 < v5)
      {
        *uint64_t v3 = v5;
        LOBYTE(v2) = *((unsigned char *)this + 8);
        uint64_t v3 = *(unsigned char **)this;
      }
      ++v4;
    }
    while (v4 < (char)v2);
  }
  ++*v3;
}

BOOL BlueFin::GlMeBeidouDataBuildler::Done(BlueFin::GlMeBeidouDataBuildler *this)
{
  int v2 = (char *)*((void *)this + 4);
  size_t v3 = *((char *)this + 8);
  memcpy(v2, *((const void **)this + 2), v3);
  memcpy(&v2[v3], *((const void **)this + 3), *((char *)this + 8));
  char v4 = *((unsigned char *)this + 8);
  uint64_t v5 = *((void *)this + 5);
  uint64_t v12 = *(void *)this;
  char v13 = v4;
  uint64_t v14 = v2;
  uint64_t v15 = &v2[v3];
  uint64_t v16 = &v2[2 * v3];
  uint64_t v17 = v5;
  BlueFin::GlMeBeidouDataBuildler::Reduce((BlueFin::GlMeBeidouDataBuildler *)&v12);
  char v6 = *v2;
  char v7 = v2[v3];
  if (*((char *)this + 8) >= 2)
  {
    uint64_t v8 = *((unsigned __int8 *)this + 8) - 1;
    uint64_t v9 = v2 + 1;
    do
    {
      if (v6 <= *v9) {
        char v6 = *v9;
      }
      if (v9[v3] < v7) {
        char v7 = v9[v3];
      }
      ++v9;
      --v8;
    }
    while (v8);
  }
  return v6 > 0 && v6 <= v7;
}

uint64_t BlueFin::GlMeBeidouFrame::NextDataBit(uint64_t a1, BlueFin::GlMeBeidouDecodeMgr *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  BlueFin::GlMeBeidouFrame::NextDataBit(a1, a2, a4, a6, (_DWORD *)&v9 + 1, (unsigned int *)&v9);
  return (a6 - *(_DWORD *)(a4 + 24) + HIDWORD(v9));
}

uint64_t BlueFin::GlMeBeidouFrame::NextDataBit(uint64_t a1, BlueFin::GlMeBeidouDecodeMgr *this, uint64_t a3, int a4, _DWORD *a5, unsigned int *a6)
{
  unsigned int v11 = *(_DWORD *)(BlueFin::GlMeBeidouDecodeMgr::GetFrameMemory(this) + 72);
  int v12 = *(_DWORD *)(a3 + 28);
  unsigned int v13 = v12 - *(_DWORD *)(a3 + 24) + a4;
  *a5 = v12;
  unsigned int v14 = *(_DWORD *)(a3 + 24);
  *a6 = v14;
  int v15 = *(unsigned __int8 *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v17 = v16 - v15 + 30;
  unsigned int v18 = v11 - v17;
  BOOL v23 = v17 >= v11;
  unsigned int v19 = v17 - v11;
  if (!v23) {
    unsigned int v19 = v18;
  }
  BOOL v20 = v13 != v16 || v16 == 0;
  HIDWORD(v22) = -286331153 * v19;
  LODWORD(v22) = -286331153 * v19;
  unsigned int v21 = v22 >> 1;
  BOOL v23 = v20 || v21 >= 0x8888889;
  int v24 = !v23;
  if (v24 == 1)
  {
    unsigned int v25 = *a5 - v15;
  }
  else
  {
    unsigned int v26 = (v13 - v11) % 0x1E;
    if (v26) {
      unsigned int v27 = 30 - v26;
    }
    else {
      unsigned int v27 = 0;
    }
    if (v11 >= v13) {
      unsigned int v27 = 0;
    }
    if (v13 < v11) {
      unsigned int v28 = (v11 - v13) % 0x1E;
    }
    else {
      unsigned int v28 = v27;
    }
    unsigned int v25 = *a5 + v28;
    if (v14 < v25) {
      unsigned int v25 = v14;
    }
    *a5 = v25;
    unsigned int v14 = *a6;
  }
  unsigned int v29 = v25 + 30;
  if (v14 >= v29) {
    unsigned int v14 = v29;
  }
  uint64_t result = v24 ^ 1u;
  *a6 = v14;
  return result;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::GetFrameMemory(BlueFin::GlMeBeidouDecodeMgr *this)
{
  if (*((_DWORD *)this + 26) != 2)
  {
    DeviceFaultNotify("glme_beidou_decoder_frame.cpp", 621, "GetFrameMemory", (char)"GLME_BDS_DCD_STATE_FRAME == m_eState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder_frame.cpp", 621, "GLME_BDS_DCD_STATE_FRAME == m_eState");
  }
  return (uint64_t)this + 128;
}

uint64_t BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(uint64_t a1, long long *a2, int a3, int a4, int a5, int a6)
{
  long long v6 = a2[1];
  long long v17 = *a2;
  int v12 = &unk_270EBA3B8;
  long long v18 = v6;
  uint64_t v19 = *((void *)a2 + 4);
  unsigned __int8 v13 = *(unsigned char *)(a1 + 48);
  char v14 = a3;
  if (v13 - 81 >= 0x35) {
    int v7 = 2 * a4;
  }
  else {
    int v7 = 20 * a4;
  }
  int v15 = v7;
  int v20 = a5;
  if (*(unsigned char *)(a1 + 49))
  {
    int v8 = 6;
  }
  else
  {
    int v9 = 600 * (5 - a3);
    int v15 = v7 + v9;
    int v20 = v9 + a5;
    int v8 = 3;
  }
  unsigned int v10 = v8 + a6;
  if (v10 > 0x93A7F) {
    v10 -= 604800;
  }
  unsigned int v16 = v10;
  return (*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), &v12);
}

uint64_t BlueFin::GlMeBeidouFrame::SetDataBits(uint64_t a1, uint64_t a2, unsigned int a3, BlueFin::GlBitBuffer *a4, BlueFin::GlBitBuffer *a5, int a6)
{
  uint64_t v270 = *MEMORY[0x263EF8340];
  *(void *)uint64_t v212 = 0;
  if (BlueFin::GlMeBeidouFrame::NextDataBit(a1, (BlueFin::GlMeBeidouDecodeMgr *)a2, (uint64_t)a4, a6, &v212[1], v212))
  {
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 16) = 0;
  }
  unsigned int v11 = v212[1];
  BlueFin::GlBitBuffer::Position((uint64_t)a4, v212[1]);
  BlueFin::GlBitBuffer::Position((uint64_t)a5, v11);
  unsigned int v12 = v212[0] - v11;
  int v13 = *(_DWORD *)(a1 + 16) << (LOBYTE(v212[0]) - v11);
  unsigned int v14 = (LOBYTE(v212[0]) - v11);
  *(_DWORD *)(a1 + 16) = v13 | BlueFin::GlBitBuffer::GetU(a4, v14);
  int v15 = *(_DWORD *)(a1 + 20) << v12;
  uint64_t result = BlueFin::GlBitBuffer::GetU(a5, v14);
  *(_DWORD *)(a1 + 20) = v15 | result;
  *(_DWORD *)(a1 + 8) = a6 - *((_DWORD *)a4 + 6) + *((_DWORD *)a4 + 7);
  unsigned int v17 = v12 + *(unsigned __int8 *)(a1 + 24);
  BOOL v18 = v17 >= 0x1E;
  if (v17 >= 0x1E) {
    LOBYTE(v17) = 30;
  }
  *(unsigned char *)(a1 + 24) = v17;
  if (v18)
  {
    uint64_t result = BlueFin::GlMeBeidouDecodeMgr::GetFrameMemory((BlueFin::GlMeBeidouDecodeMgr *)a2);
    uint64_t v20 = result;
    unsigned int v21 = *(_DWORD *)(a1 + 8);
    unsigned int v22 = *(_DWORD *)(result + 72);
    int v23 = v22 - v21;
    unsigned int v210 = v21;
    if (v22 >= v21)
    {
      unsigned int v26 = 0;
      unsigned int v24 = 0;
      int v25 = 0;
    }
    else
    {
      unsigned int v24 = (v21 - v22 + 299) / 0x12C;
      int v25 = 300 * v24;
      unsigned int v26 = (v24 + *(unsigned __int8 *)(result + 64) - 1) / 5;
    }
    unsigned int v27 = v25 + v23;
    if ((v25 + v23) >= 0x12C)
    {
      DeviceFaultNotify("glme_beidou_decoder_frame.cpp", 671, "SetDataBits", (char)"(0 <= iWordIndex) && (iWordIndex <= 9)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder_frame.cpp", 671, "(0 <= iWordIndex) && (iWordIndex <= 9)");
    }
    unsigned int v29 = *(_DWORD *)(a1 + 16);
    int v28 = *(_DWORD *)(a1 + 20);
    if (v27 - 270 <= 0x1D)
    {
      int v30 = (v29 >> 19) & 0x7FF ^ 0x712;
      if (v30)
      {
        if (v30 != 2047) {
          goto LABEL_17;
        }
        int v31 = 4;
      }
      else
      {
        int v31 = 3;
      }
      uint64_t result = BlueFin::GlMeBeidouPolarityMgr::SetPolarity(a2, a2, a3, v21, v31);
    }
LABEL_17:
    if (!v24) {
      goto LABEL_36;
    }
    BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(v20, a2, 0);
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(void *)(v20 + 112) = 0;
    uint64_t v32 = *(void *)(a2 + 96);
    *(unsigned char *)(v32 + 25) = 0;
    unsigned int v33 = *(_DWORD *)(v20 + 68);
    *(_DWORD *)(v20 + 72) += v25;
    *(unsigned char *)(v20 + 64) = (v24 + *(unsigned __int8 *)(v20 + 64) - 1) % 5 + 1;
    unint64_t v34 = 2443359173 * v33;
    int v35 = *(unsigned __int8 *)(v32 + 49);
    if (v35)
    {
      int v36 = 6 * v24;
    }
    else
    {
      if (!v26)
      {
LABEL_23:
        unint64_t v37 = v34 >> 43;
        if (v33 > 0x93A7F)
        {
          unsigned int v33 = (v33 - 604800) % 0x93A80;
          *(_DWORD *)(v20 + 68) = v33;
        }
        if (v26)
        {
          BOOL v38 = v35 == 0;
          if (v35) {
            char v39 = 18;
          }
          else {
            char v39 = 24;
          }
          uint64_t v243 = v20 + 1126;
          char v244 = v39;
          uint64_t v245 = v20 + 1127;
          uint64_t v246 = v20 + 1151;
          p_b = &__b;
          uint64_t v248 = &BlueFin::OrbitModelState::m_aKeys + 4 * v38;
          BlueFin::GlMeBeidouDataBuildler::Eof((BlueFin::GlMeBeidouDataBuildler *)&v243);
          uint64_t v234 = v20 + 1117;
          LOBYTE(v235) = 4;
          uint64_t v236 = v20 + 1118;
          uint64_t v237 = v20 + 1122;
          unsigned int v238 = &__b;
          uint64_t v239 = 0;
          BlueFin::GlMeBeidouDataBuildler::Eof((BlueFin::GlMeBeidouDataBuildler *)&v234);
          BOOL v40 = *(unsigned char *)(*(void *)(a2 + 96) + 49) == 0;
          if (*(unsigned char *)(*(void *)(a2 + 96) + 49)) {
            char v41 = 6;
          }
          else {
            char v41 = 8;
          }
          uint64_t v236 = v20 + 1100;
          LOBYTE(v237) = v41;
          unsigned int v238 = (long long *)(v20 + 1101);
          uint64_t v239 = v20 + 1109;
          double v240 = &__b;
          double v241 = &BlueFin::ClockModelState::m_aKeys + 2 * v40;
          BlueFin::GlMeBeidouDataBuildler::Eof((BlueFin::GlMeBeidouDataBuildler *)&v236);
          unsigned int v33 = *(_DWORD *)(v20 + 68);
        }
        if (v33 / 0xE10 != v37) {
          bzero((void *)(v20 + 348), 0x2F0uLL);
        }
        *(_DWORD *)(BlueFin::GlMeBeidouDecodeMgr::Frame(a2, 0) + 12) = 0;
        uint64_t result = BlueFin::GlMeBeidouDecodeMgr::Frame(a2, 1u);
        *(_DWORD *)(result + 12) = 0;
LABEL_36:
        if ((v29 & 0x80000000) == 0 && v27 < 0xF0)
        {
LABEL_112:
          *(void *)(a1 + 16) |= 0x200000002uLL;
          *(unsigned char *)(a1 + 24) = 0;
          return result;
        }
        unsigned int v42 = v29 & 0x7FFFFFFF;
        unsigned int v199 = v27 / 0x1E;
        uint64_t v201 = 9 - v27 / 0x1E;
        uint64_t v43 = v20 + 4 * v201;
        unsigned int v204 = *(_DWORD *)(v43 + 80);
        uint64_t v205 = (unsigned int *)(v43 + 80);
        char v230 = *(unsigned char *)(*(void *)(a2 + 96) + 48);
        if (a3) {
          int v44 = 2;
        }
        else {
          int v44 = 1;
        }
        int v200 = v44;
        *(void *)int v229 = 0;
        unsigned int v206 = 10 - v27 / 0x1E;
        BlueFin::GlMeBeidouDecodeUtil::Deinterleave(v206, v29 & 0x7FFFFFFF, (int *)&v229[1], v229, v19);
        uint64_t v45 = *(void *)(*(void *)(a2 + 96) + 16);
        if (v45) {
          (*(void (**)(uint64_t, BOOL, uint64_t, char *))(*(void *)v45 + 32))(v45, v229[0] == 0, 1, &v230);
        }
        unsigned int v46 = v229[1];
        uint64_t result = BlueFin::GlMeBeidouDecodeMgr::Frame(a2, a3);
        unsigned int v47 = *(unsigned __int8 *)(v20 + 65);
        if (v47 <= 0xBF)
        {
          if (v206 == 2)
          {
            unsigned int v48 = *(_DWORD *)(result + 12);
            if ((v48 & 0x80000000) != 0)
            {
              int v49 = (v48 >> 19) & 0x7FF;
              if (v49 != 1810 && v49 != 237) {
                goto LABEL_58;
              }
              BOOL v50 = v49 == 1810;
              if (v49 == 1810) {
                int v51 = (v48 << 8) & 0xFF000 | (v46 >> 18) & 0xFFF;
              }
              else {
                int v51 = ((v48 << 8) & 0xFF000 | (v46 >> 18) & 0xFFF) ^ 0xFFFFF;
              }
              int v52 = (v48 >> 12) & 7;
              if (!v50) {
                v52 ^= 7u;
              }
              if (v52 == *(unsigned __int8 *)(v20 + 64) && *(_DWORD *)(v20 + 68) == v51)
              {
                char v53 = v47 + 64;
              }
              else
              {
LABEL_58:
                if ((v47 & 0x3F) == 0) {
                  goto LABEL_141;
                }
                char v53 = v47 - 1;
              }
              *(unsigned char *)(v20 + 65) = v53;
            }
          }
          else if (v206 == 1)
          {
            *(_DWORD *)(result + 12) = v46 & 0x3FFFFFFF | 0x80000000;
          }
        }
        unsigned int v54 = *(unsigned __int8 *)(v20 + 64);
        if (v54 > 3) {
          goto LABEL_96;
        }
        uint64_t v55 = *(void *)(a2 + 96);
        int v56 = *(unsigned __int8 *)(v55 + 49);
        if (!*(unsigned char *)(v55 + 49) && (v54 != 1 || v27 < 0x96 || !*(unsigned char *)(v55 + 50))) {
          goto LABEL_96;
        }
        unsigned int v57 = v28 & 0x7FFFFFFF;
        if (v27 >= 0xF0)
        {
          if (v27 - 270 > 0x1D)
          {
            unint64_t v62 = *(unsigned int *)(v20 + 68);
            int v63 = (((v62 & 1) << 28) | (dword_263BB2750[(v62 >> 8) & 0xF] << 23) | (dword_263BB2750[v62 >> 4] << 15) | (dword_263BB2750[v62 & 0xE] << 7)) ^ v42;
            unsigned int v59 = v63 & 0xFFFFFF00 | (v63 << 22 >> 31);
            int v60 = 128;
            char v61 = 2;
          }
          else
          {
            int v58 = ((*(_DWORD *)(v20 + 68) >> 8) & 0xFF0 | (v54 << 12) | 0x38900000) ^ v42;
            unsigned int v59 = (v29 ^ (v58 << 27 >> 31)) & 0xF ^ v58;
            int v60 = 8;
            char v61 = 1;
          }
          unsigned int v42 = v59 & 0xBFFFFFFF | (((v59 >> 29) & 1) << 30);
          v57 |= (v57 >> v61) & v60 & 0xBFFFFFFF | (((v57 >> 29) & 1) << 30);
        }
        v224[0] = v20 + 348;
        v224[1] = 0;
        char v225 = 0;
        int v227 = 0;
        long long v226 = xmmword_263BB2630;
        char v228 = 0;
        unsigned int v64 = v56
            ? 1200 * v54 + 120 * v201 - 1200
            : 120
            * (5
             * ((v210 - 30 * v206) / 0x5DC - 10 * ((429496730 * (unint64_t)((v210 - 30 * v206) / 0x5DC)) >> 32))
             + v201);
        unsigned int v197 = v64;
        BlueFin::GlBitBuffer::Position((uint64_t)v224, v64);
        BlueFin::GlBitBuffer::Limit((uint64_t)v224, 0x1770u);
        unsigned int v223 = 0;
        int v221 = v57 >> 30;
        uint64_t v222 = (v42 >> 30) & 1;
        int v65 = 29;
        int v220 = 0;
        do
        {
          HIDWORD(v193) = 4;
          LOBYTE(v193) = 1;
          BlueFin::GlMeBeidouDecodeUtil::NextBit((BlueFin::GlMeBeidouDecodeUtil *)((v42 >> v65) & 1), (v57 >> v65) & 1, &v222, &v221, &v220, (unsigned int *)&v222 + 1, &v223, (BlueFin::GlBitBuffer *)v224, v193, 7, 3u, v194, HIDWORD(v194));
          --v65;
        }
        while (v65 != -1);
        int v67 = v220;
        unsigned int v218 = 0;
        unsigned int v219 = 0;
        uint64_t result = BlueFin::GlMeBeidouDecodeUtil::Deinterleave(v206, v220, (int *)&v219, &v218, v66);
        if (v27 <= 0xEF)
        {
          unsigned int v68 = v218;
        }
        else
        {
          unsigned int v68 = dword_263BB2660[v201] & v67;
          unsigned int v218 = v68;
        }
        if (v68 | (v67 ^ v42 ^ ((v67 ^ v42) >> 1)) & 0x1FFFFFFF | v229[0] || HIDWORD(v222) != 0x3FFFFFFF)
        {
LABEL_96:
          if (v229[0])
          {
            uint64_t result = BlueFin::GlMeBeidouPolarityMgr::SetPolarity(a2, a2, a3, v210, 0);
            int v74 = 0;
          }
          else
          {
            int v74 = v200;
          }
          unsigned int v75 = v204 >> 30;
          if (v204 >> 30)
          {
            if (((*v205 ^ v229[1] ^ ((*v205 ^ v229[1]) >> 1)) & 0x1FFFFFFF) == 0
              || (v75 != 1 || v74 != 2) && (v75 != 2 || v74 != 1))
            {
              goto LABEL_108;
            }
            unsigned int v76 = 0;
          }
          else
          {
            unsigned int v76 = v229[1] | (v74 << 30);
          }
          *uint64_t v205 = v76;
LABEL_108:
          if (v27 <= 0x1D)
          {
            if (*(unsigned char *)(*(void *)(a2 + 96) + 25)
              || (uint64_t result = BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(v20, a2, 1), result))
            {
              *(void *)(v20 + 112) = 0;
              *(_OWORD *)(v20 + 80) = 0u;
              *(_OWORD *)(v20 + 96) = 0u;
              *(unsigned char *)(*(void *)(a2 + 96) + 25) = 1;
            }
          }
          goto LABEL_112;
        }
        uint64_t v70 = *(void *)(a2 + 96);
        if (v27 - 240 > 0x1D || !*(unsigned char *)(v70 + 50))
        {
LABEL_94:
          int v73 = *(_DWORD *)(v20 + 76);
          if (!*(unsigned char *)(v70 + 49) && v73 == -1) {
            goto LABEL_96;
          }
          v232[0] = 0;
          v232[1] = 0;
          v213[0] = v232;
          v213[1] = 0;
          char v214 = 0;
          int v216 = 0;
          long long v215 = xmmword_263BB2640;
          char v217 = 0;
          BlueFin::GlBitBuffer::Position((uint64_t)v224, v197);
          BlueFin::GlBitBuffer::Limit((uint64_t)v224, 0x1770u);
          uint64_t result = (uint64_t)BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v224, (BlueFin::GlBitBuffer *)v213, 0x78u);
          unsigned int v77 = v210 - 30 * v206 - v73 + 15000;
          uint64_t v198 = *(void *)(a2 + 96);
          int v78 = *(unsigned __int8 *)(v198 + 49);
          double v264 = (unsigned char *)(v20 + 1100);
          if (v78) {
            char v79 = 6;
          }
          else {
            char v79 = 8;
          }
          char v265 = v79;
          uint64_t v266 = v20 + 1101;
          uint64_t v267 = v20 + 1109;
          uint64_t v268 = &v263;
          v269 = &BlueFin::ClockModelState::m_aKeys + 2 * (v78 == 0);
          float v257 = (unsigned char *)(v20 + 1117);
          unsigned int v80 = v77 % 0x3A98;
          char v258 = 4;
          unint64_t v196 = (2863312 * (unint64_t)(v77 % 0x3A98)) >> 32;
          uint64_t v259 = v20 + 1118;
          uint64_t v260 = v20 + 1122;
          int v261 = &v256;
          uint64_t v262 = 0;
          if (v78) {
            char v81 = 18;
          }
          else {
            char v81 = 24;
          }
          uint64_t v250 = v20 + 1126;
          char v251 = v81;
          uint64_t v252 = v20 + 1127;
          uint64_t v253 = v20 + 1151;
          BOOL v254 = v249;
          double v255 = &BlueFin::OrbitModelState::m_aKeys + 4 * (v78 == 0);
          unsigned int v82 = *(unsigned __int8 *)(v20 + 64);
          unsigned int v195 = v82 - 1;
          if (v78 && *(unsigned char *)(v20 + 64) && v201 <= 9 && v82 <= 3)
          {
            unsigned int v83 = v67 | 0x80000000;
            uint64_t v84 = v20 + 4 * (int)(v201 + 10 * (v82 - 1));
            int v85 = *(_DWORD *)(v84 + 120);
            *(_DWORD *)(v84 + 120) = v67 | 0x80000000;
            if (v82 != 1)
            {
              if (v206 < 2)
              {
LABEL_148:
                if (BlueFin::GlUtils::m_ucEnabled) {
                  uint64_t result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x77);
                }
                uint64_t v96 = 30;
                if (!*(unsigned char *)(v198 + 49)) {
                  uint64_t v96 = 50;
                }
                int v97 = (int *)(v20 + 120);
                int v98 = -1;
                do
                {
                  int v99 = *v97++;
                  v98 &= v99;
                  --v96;
                }
                while (v96);
                if (v98 < 0
                  && (uint64_t result = BlueFin::GlMeBeidouDataBuildler::Done((BlueFin::GlMeBeidouDataBuildler *)&v250),
                      result)
                  && (uint64_t result = BlueFin::GlMeBeidouDataBuildler::Done((BlueFin::GlMeBeidouDataBuildler *)&v257),
                      result)
                  && (uint64_t result = BlueFin::GlMeBeidouDataBuildler::Done((BlueFin::GlMeBeidouDataBuildler *)&v264),
                      result))
                {
                  unsigned int v231 = 0;
                  int v101 = *(_DWORD *)(v20 + 68);
                  int v207 = *(_DWORD *)(v20 + 72);
                  if (*(unsigned char *)(v198 + 49))
                  {
                    uint64_t v102 = (unsigned int *)(v20 + 120);
                    int v103 = (int *)&__b;
                    uint64_t v104 = -10;
                    do
                    {
                      BlueFin::GlMeBeidouDecodeUtil::Deinterleave(v104 + 11, *v102, v103, &v231, v100);
                      BlueFin::GlMeBeidouDecodeUtil::Deinterleave(v104 + 11, v102[10], v103 + 10, &v231, v105);
                      BlueFin::GlMeBeidouDecodeUtil::Deinterleave(v104 + 11, v102[20], v103 + 20, &v231, v106);
                      ++v103;
                      ++v102;
                      BOOL v18 = __CFADD__(v104++, 1);
                    }
                    while (!v18);
                    uint64_t v107 = 0;
                    unsigned int v108 = v101 - 6 * v195;
                    if (v108 >= 0xFFF6C580) {
                      v108 += 604800;
                    }
                    int v109 = (int *)&__b + 1;
                    unsigned int v110 = v108 << 18;
                    int v111 = 4096;
                    do
                    {
                      unsigned int v112 = (v111 + 16 * (v108 >> 12)) | *(v109 - 1);
                      unint64_t v113 = ((65537 * ((v112 >> 4) & 0x7FF)) | ((unint64_t)(65537 * ((v112 >> 4) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                      unint64_t v114 = v113 ^ (v113 >> 8) ^ ((v113 ^ (v113 >> 8)) >> 4);
                      unint64_t v115 = (v114 ^ (v114 >> 2) ^ ((v114 ^ (v114 >> 2)) >> 1)) & 0x1000100010001;
                      *(v109 - 1) = v112 | 0x38900000 | (((v115 >> 30) | v115) | (((v115 >> 30) | v115) >> 15)) & 0xF;
                      unsigned int v116 = *v109 | (v110 + v107) & 0x3FFC0000;
                      unint64_t v117 = ((65537 * ((v116 >> 19) & 0x7FF)) | ((unint64_t)(65537 * ((v116 >> 19) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                      unint64_t v118 = v117 ^ (v117 >> 8) ^ ((v117 ^ (v117 >> 8)) >> 4);
                      unint64_t v119 = (v118 ^ (v118 >> 2) ^ ((v118 ^ (v118 >> 2)) >> 1)) & 0x1000100010001;
                      unint64_t v120 = ((65537 * ((v116 >> 8) & 0x7FF)) | ((unint64_t)(65537 * ((v116 >> 8) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                      unint64_t v121 = v120 ^ (v120 >> 8) ^ ((v120 ^ (v120 >> 8)) >> 4);
                      unint64_t v122 = (v121 ^ (v121 >> 2) ^ ((v121 ^ (v121 >> 2)) >> 1)) & 0x1000100010001;
                      *int v109 = ((v122 >> 30) | v122 | (((v122 >> 30) | v122) >> 15) | (16 * ((v119 >> 30) | v119 | (((v119 >> 30) | v119) >> 15)))) | v116;
                      v109 += 10;
                      v108 += 6;
                      v107 += 1572864;
                      v111 += 4096;
                    }
                    while (v107 != 4718592);
                    for (uint64_t i = 0; i != 32; i += 4)
                    {
                      if (*((unsigned char *)&__b + i + 4)) {
                        *(_DWORD *)((char *)&__b + i + 8) ^= 0x3FFFFFFFu;
                      }
                      if (*((unsigned char *)&v237 + i + 4)) {
                        *(_DWORD *)((char *)&v237 + i + 8) ^= 0x3FFFFFFFu;
                      }
                      if (v242[i]) {
                        *(_DWORD *)&v242[i + 4] ^= 0x3FFFFFFFu;
                      }
                    }
                    int v124 = v207 - 300 * v195;
                    int v125 = v108 - 18;
                    int v126 = 2 * v124;
                    int v127 = 20 * v124;
                    uint64_t v128 = &__b;
                    uint64_t v129 = 1;
                    do
                    {
                      int v208 = v124;
                      uint64_t v130 = *(void *)(v198 + 32);
                      int v202 = *(unsigned __int8 *)(v130 + 9);
                      double v131 = *(double *)(v130 + 32) * 1000.0;
                      double v132 = fmod(v131, 4294967300.0);
                      if (v131 <= 4294967300.0) {
                        double v132 = v131;
                      }
                      if (v132 < -4294967300.0) {
                        double v132 = -fmod(-v132, 4294967300.0);
                      }
                      if (v132 < 0.0) {
                        unsigned int v133 = --v132;
                      }
                      else {
                        unsigned int v133 = v132;
                      }
                      if ((v202 - 81) >= 0x35) {
                        int v134 = v126;
                      }
                      else {
                        int v134 = v127;
                      }
                      uint64_t result = BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(v198, v128, v129, v208, v134 - *(_DWORD *)(v130 + 20) + v133, v125);
                      v125 += 6;
                      int v124 = v208 + 300;
                      ++v129;
                      uint64_t v128 = (long long *)((char *)v128 + 40);
                      v126 += 600;
                      v127 += 6000;
                    }
                    while (v129 != 4);
                  }
                  else
                  {
                    int v203 = *(_DWORD *)(v20 + 68);
                    uint64_t v159 = 0;
                    uint64_t v160 = v20 + 120;
                    uint64_t v161 = &__b;
                    do
                    {
                      uint64_t v162 = 0;
                      unsigned int v163 = (int *)v161;
                      do
                      {
                        uint64_t v164 = v162 + 1;
                        BlueFin::GlMeBeidouDecodeUtil::Deinterleave(v162 + 1, *(_DWORD *)(v160 + 4 * v162), v163++, &v231, v100);
                        uint64_t v162 = v164;
                      }
                      while (v164 != 5);
                      memset_pattern16((char *)&v234 + 40 * v159++ + 4, &unk_263BB2650, 0x14uLL);
                      uint64_t v161 = (long long *)((char *)v161 + 40);
                      v160 += 20;
                    }
                    while (v159 != 10);
                    uint64_t v165 = 0;
                    unsigned int v166 = v203 - 3 * v196;
                    if (v166 >= 0xFFF6C580) {
                      v166 += 604800;
                    }
                    unsigned int v167 = v166 << 18;
                    do
                    {
                      __int16 v168 = (int *)((char *)&__b + v165);
                      unsigned int v169 = *(_DWORD *)((char *)&__b + v165) | (v166 >> 8) & 0xFF0 | 0x38901000;
                      unint64_t v170 = ((65537 * ((v169 >> 4) & 0x7FF)) | ((unint64_t)(65537 * ((v169 >> 4) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                      unint64_t v171 = v170 ^ (v170 >> 8) ^ ((v170 ^ (v170 >> 8)) >> 4);
                      unint64_t v172 = (v171 ^ (v171 >> 2) ^ ((v171 ^ (v171 >> 2)) >> 1)) & 0x1000100010001;
                      int v173 = (((v172 >> 30) | v172) | (((v172 >> 30) | v172) >> 15)) & 0xF | v169;
                      LODWORD(v172) = *(_DWORD *)((char *)&__b + v165 + 4) | v167 & 0x3FFC0000;
                      unint64_t v174 = ((65537 * ((v172 >> 19) & 0x7FF)) | ((unint64_t)(65537
                                                                                                 * ((v172 >> 19) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                      unint64_t v175 = v174 ^ (v174 >> 8) ^ ((v174 ^ (v174 >> 8)) >> 4);
                      unint64_t v176 = (v175 ^ (v175 >> 2) ^ ((v175 ^ (v175 >> 2)) >> 1)) & 0x1000100010001;
                      unint64_t v177 = ((65537 * ((v172 >> 8) & 0x7FF)) | ((unint64_t)(65537
                                                                                                * ((v172 >> 8) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                      unint64_t v178 = v177 ^ (v177 >> 8) ^ ((v177 ^ (v177 >> 8)) >> 4);
                      unint64_t v179 = (v178 ^ (v178 >> 2) ^ ((v178 ^ (v178 >> 2)) >> 1)) & 0x1000100010001;
                      *__int16 v168 = v173;
                      v168[1] = ((v179 >> 30) | v179 | (((v179 >> 30) | v179) >> 15) | (16 * ((v176 >> 30) | v176 | (((v176 >> 30) | v176) >> 15)))) | v172;
                      v166 += 3;
                      v165 += 40;
                      v167 += 786432;
                    }
                    while (v165 != 400);
                    uint64_t v180 = 0;
                    char v181 = &__b;
                    do
                    {
                      for (uint64_t j = 0; j != 12; j += 4)
                      {
                        if (*((unsigned char *)v181 + j + 4)) {
                          *(_DWORD *)((char *)v181 + j + 8) ^= 0x3FFFFFFFu;
                        }
                      }
                      ++v180;
                      char v181 = (long long *)((char *)v181 + 40);
                    }
                    while (v180 != 10);
                    uint64_t v183 = 0;
                    int v184 = v207 - 1500 * v196;
                    int v185 = v166 - 30;
                    int v186 = 2 * v207 - 3000 * v196;
                    int v187 = 20 * v207 - 30000 * v196;
                    do
                    {
                      uint64_t v188 = *(void *)(v198 + 32);
                      int v209 = *(unsigned __int8 *)(v188 + 9);
                      double v189 = *(double *)(v188 + 32) * 1000.0;
                      double v190 = fmod(v189, 4294967300.0);
                      if (v189 <= 4294967300.0) {
                        double v190 = v189;
                      }
                      if (v190 < -4294967300.0) {
                        double v190 = -fmod(-v190, 4294967300.0);
                      }
                      if (v190 < 0.0) {
                        unsigned int v191 = --v190;
                      }
                      else {
                        unsigned int v191 = v190;
                      }
                      if ((v209 - 81) >= 0x35) {
                        int v192 = v186;
                      }
                      else {
                        int v192 = v187;
                      }
                      uint64_t result = BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(v198, (long long *)((char *)&__b + v183), 1, v184, v192 - *(_DWORD *)(v188 + 20) + v191, v185);
                      v185 += 3;
                      v184 += 1500;
                      v183 += 40;
                      v186 += 3000;
                      v187 += 30000;
                    }
                    while (v183 != 400);
                  }
                  *(unsigned char *)(v20 + 1100) = 1;
                  *(unsigned char *)(v20 + 1117) = 1;
                  *(unsigned char *)(v20 + 1126) = 1;
                  *(void *)(v20 + 1118) = 0;
                  *(void *)(v20 + 1101) = 0;
                  *(void *)(v20 + 1109) = 0;
                  *(_OWORD *)(v20 + 1127) = 0u;
                  *(_OWORD *)(v20 + 1143) = 0u;
                  *(_OWORD *)(v20 + 1159) = 0u;
                }
                else if (v27 - 210 <= 0x1D && *(unsigned char *)(v20 + 64) == 1 && (v80 < 0x5DC || *(unsigned char *)(v198 + 49)))
                {
                  unsigned int v135 = *(_DWORD *)(v20 + 120);
                  if ((v135 & *(_DWORD *)(v20 + 124) & *(_DWORD *)(v20 + 128) & 0x80000000) != 0)
                  {
                    unsigned int v231 = 0;
                    unsigned int v136 = *(_DWORD *)(v20 + 68);
                    memset_pattern16(&__b, &unk_263BB2650, 0x28uLL);
                    if (v136 >= 0xFFF6C580) {
                      unsigned int v138 = v136 + 604800;
                    }
                    else {
                      unsigned int v138 = v136;
                    }
                    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(1, v135, (int *)&__b, &v231, v137);
                    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(2, *(_DWORD *)(v20 + 124), (int *)&__b + 1, &v231, v139);
                    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(3, *(_DWORD *)(v20 + 128), (int *)&__b + 2, &v231, v140);
                    unsigned int v141 = (v138 >> 8) & 0xFF0 | __b | 0x38901000;
                    unint64_t v142 = ((65537 * ((v141 >> 4) & 0x7FF)) | ((unint64_t)(65537 * ((v141 >> 4) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                    unint64_t v143 = v142 ^ (v142 >> 8) ^ ((v142 ^ (v142 >> 8)) >> 4);
                    unint64_t v144 = (v143 ^ (v143 >> 2) ^ ((v143 ^ (v143 >> 2)) >> 1)) & 0x1000100010001;
                    LODWORD(__b) = (((v144 >> 30) | v144) | (((v144 >> 30) | v144) >> 15)) & 0xF | v141;
                    unsigned int v145 = DWORD1(__b) | ((v138 & 0xFFF) << 18);
                    unint64_t v146 = ((65537 * ((v145 >> 19) & 0x7FF)) | ((unint64_t)(65537 * ((v145 >> 19) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                    unint64_t v147 = v146 ^ (v146 >> 8) ^ ((v146 ^ (v146 >> 8)) >> 4);
                    unint64_t v148 = (v147 ^ (v147 >> 2) ^ ((v147 ^ (v147 >> 2)) >> 1)) & 0x1000100010001;
                    unint64_t v149 = ((65537 * ((v145 >> 8) & 0x7FF)) | ((unint64_t)(65537 * ((v145 >> 8) & 0x7FF)) << 32)) & 0x7AC03D601EB0759;
                    unint64_t v150 = v149 ^ (v149 >> 8) ^ ((v149 ^ (v149 >> 8)) >> 4);
                    unint64_t v151 = (v150 ^ (v150 >> 2) ^ ((v150 ^ (v150 >> 2)) >> 1)) & 0x1000100010001;
                    DWORD1(__b) = ((v151 >> 30) | v151 | (((v151 >> 30) | v151) >> 15) | (16 * ((v148 >> 30) | v148 | (((v148 >> 30) | v148) >> 15)))) | v145;
                    if (((v151 & 0x40000000) != 0) | v151 & 1 | ((((v151 >> 30) | v151) & 0x8000) != 0) | v145 & 1) {
                      DWORD2(__b) ^= 0x3FFFFFFFu;
                    }
                    int v152 = *(_DWORD *)(v20 + 72);
                    uint64_t v153 = *(void *)(v198 + 32);
                    int v154 = *(unsigned __int8 *)(v153 + 9);
                    double v155 = *(double *)(v153 + 32) * 1000.0;
                    double v156 = fmod(v155, 4294967300.0);
                    if (v155 <= 4294967300.0) {
                      double v156 = v155;
                    }
                    if (v156 < -4294967300.0) {
                      double v156 = -fmod(-v156, 4294967300.0);
                    }
                    if (v156 < 0.0) {
                      unsigned int v157 = --v156;
                    }
                    else {
                      unsigned int v157 = v156;
                    }
                    if ((v154 - 81) >= 0x35) {
                      int v158 = 2 * v152;
                    }
                    else {
                      int v158 = 20 * v152;
                    }
                    uint64_t result = BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(v198, &__b, 1, v152, v158 - *(_DWORD *)(v153 + 20) + v157, v138);
                  }
                }
                goto LABEL_96;
              }
              BOOL v87 = v85 == v83;
              if (v82 == 2) {
                int v95 = -2;
              }
              else {
                int v95 = 7;
              }
              int v93 = v95 + v206;
              uint64_t v88 = &v250;
LABEL_147:
              uint64_t result = (uint64_t)BlueFin::GlMeBeidouDataBuildler::Found((unsigned char **)v88, v93, v87);
              goto LABEL_148;
            }
            if (7 - v199 <= 2) {
              uint64_t result = (uint64_t)BlueFin::GlMeBeidouDataBuildler::Found(&v264, 7 - v199, v85 == v83);
            }
            int v86 = 5 - v199;
            if (5 - v199 <= 3) {
              uint64_t result = (uint64_t)BlueFin::GlMeBeidouDataBuildler::Found(&v257, v86, v85 == v83);
            }
            if (v206 < 8) {
              goto LABEL_148;
            }
            BOOL v87 = v85 == v83;
            uint64_t v88 = (uint64_t *)&v264;
          }
          else
          {
            if (!*(unsigned char *)(v198 + 50) || v201 > 4 || v82 != 1) {
              goto LABEL_148;
            }
            unsigned int v89 = v67 | 0x80000000;
            uint64_t v90 = v20 + 4 * (5 * v196 + v201);
            int v91 = *(_DWORD *)(v90 + 120);
            *(_DWORD *)(v90 + 120) = v67 | 0x80000000;
            int v86 = dword_263BB2688[5 * v196 + v201];
            int v92 = BYTE1(v86);
            if (BYTE2(v86) != 255) {
              uint64_t result = (uint64_t)BlueFin::GlMeBeidouDataBuildler::Found(&v264, BYTE2(v86), v91 == v89);
            }
            int v86 = v86;
            if (v92 != 255) {
              uint64_t result = (uint64_t)BlueFin::GlMeBeidouDataBuildler::Found(&v257, v92, v91 == v89);
            }
            if (v86 == 255) {
              goto LABEL_148;
            }
            BOOL v87 = v91 == v89;
            uint64_t v88 = &v250;
          }
          int v93 = v86;
          goto LABEL_147;
        }
        v249[0] = (v210 - 1500 * ((v219 >> 14) & 0xF) + 16440) % 0x3A98;
        uint64_t v71 = (void *)(v20 + 320);
        *(void *)&long long __b = &unk_270EBEB48;
        *((void *)&__b + 1) = v20 + 320;
        uint64_t v234 = v20 + 340;
        int v235 = 5;
        BOOL v72 = *(_DWORD *)(v20 + 76) == -1;
        BlueFin::GlMeBeidouDecodeSyncBitHistBase::Set((BlueFin::GlMeBeidouDecodeSyncBitHistBase *)&__b, v249[0]);
        uint64_t result = BlueFin::GlMeBeidouDecodeSyncBitHistBase::Get((BlueFin::GlMeBeidouDecodeSyncBitHistBase *)&__b, 3u, 3u, v249);
        if (v72)
        {
          if (result)
          {
            *uint64_t v71 = 0;
            *(void *)(v20 + 328) = 0;
            *(unsigned char *)(v20 + 344) = 0;
            *(void *)(v20 + 336) = 0;
            *(_DWORD *)(v20 + 76) = v249[0];
          }
          goto LABEL_93;
        }
        if (!result)
        {
LABEL_93:
          uint64_t v70 = *(void *)(a2 + 96);
          goto LABEL_94;
        }
        if (*(_DWORD *)(v20 + 76) == v249[0])
        {
          *uint64_t v71 = 0;
          *(void *)(v20 + 328) = 0;
          *(unsigned char *)(v20 + 344) = 0;
          *(void *)(v20 + 336) = 0;
          goto LABEL_93;
        }
        *(_DWORD *)(v20 + 76) = v249[0];
LABEL_141:
        *(_DWORD *)(a2 + 104) = 0;
        *(_DWORD *)(a2 + 136) = 0;
        *(void *)(a2 + 128) = &unk_270EBEC00;
        *(_WORD *)(a2 + 140) = 0;
        *(_DWORD *)(a2 + 152) = 0;
        *(void *)(a2 + 144) = &unk_270EBEC00;
        *(_WORD *)(a2 + 156) = 0;
        *(_OWORD *)(a2 + 176) = 0u;
        *(_OWORD *)(a2 + 192) = 0u;
        *(_OWORD *)(a2 + 208) = 0u;
        *(_OWORD *)(a2 + 224) = 0u;
        *(_OWORD *)(a2 + 240) = 0u;
        *(_OWORD *)(a2 + 256) = 0u;
        *(_OWORD *)(a2 + 272) = 0u;
        *(_OWORD *)(a2 + 288) = 0u;
        *(_OWORD *)(a2 + 304) = 0u;
        *(_OWORD *)(a2 + 320) = 0u;
        *(_OWORD *)(a2 + 336) = 0u;
        *(_OWORD *)(a2 + 348) = 0u;
        *(void *)(a2 + 167) = 0;
        *(void *)(a2 + 160) = 0;
        *(_OWORD *)(a2 + 384) = 0u;
        *(_OWORD *)(a2 + 400) = 0u;
        *(_OWORD *)(a2 + 416) = 0u;
        *(_OWORD *)(a2 + 432) = 0u;
        *(_OWORD *)(a2 + 448) = 0u;
        *(_OWORD *)(a2 + 464) = 0u;
        *(_OWORD *)(a2 + 480) = 0u;
        *(_OWORD *)(a2 + 496) = 0u;
        *(_OWORD *)(a2 + 512) = 0u;
        *(_OWORD *)(a2 + 528) = 0u;
        *(_OWORD *)(a2 + 544) = 0u;
        *(_OWORD *)(a2 + 560) = 0u;
        *(_OWORD *)(a2 + 576) = 0u;
        *(_OWORD *)(a2 + 592) = 0u;
        *(_OWORD *)(a2 + 608) = 0u;
        *(_OWORD *)(a2 + 624) = 0u;
        *(_OWORD *)(a2 + 640) = 0u;
        *(_OWORD *)(a2 + 656) = 0u;
        *(_OWORD *)(a2 + 672) = 0u;
        *(_OWORD *)(a2 + 688) = 0u;
        *(_OWORD *)(a2 + 704) = 0u;
        uint64_t v94 = *(void *)(a2 + 96);
        ++*(_DWORD *)(v94 + 28);
        *(unsigned char *)(v94 + 24) = 1;
        return result;
      }
      int v36 = 3 * v26;
    }
    v33 += v36;
    *(_DWORD *)(v20 + 68) = v33;
    goto LABEL_23;
  }
  return result;
}

void BlueFin::GlMeBeidouDecodeMemoryFrame::Initialize(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_270EBEB00;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 17) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = &unk_270EBEB00;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 49) = 0;
  *(unsigned char *)(a1 + 1100) = 1;
  *(unsigned char *)(a1 + 1117) = 1;
  *(unsigned char *)(a1 + 1126) = 1;
  *(void *)(a1 + 1118) = 0;
  *(_OWORD *)(a1 + 1101) = 0u;
  *(_OWORD *)(a1 + 1127) = 0u;
  *(_OWORD *)(a1 + 1143) = 0u;
  *(_OWORD *)(a1 + 1159) = 0u;
  bzero((void *)(a1 + 348), 0x2F0uLL);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 72) = a3 % 0x12C;
  *(_DWORD *)(a1 + 76) = -1;
  *(unsigned char *)(a1 + 64) = (a4 + 5 * ((858993460 * (unint64_t)(a3 / 0x12C)) >> 32) - a3 / 0x12C + 3)
                      % 5
                      + 1;
  unsigned int v10 = a5 + 604794 - 6 * (a3 / 0x12C);
  if (!*(unsigned char *)(*(void *)(a2 + 96) + 49)) {
    unsigned int v10 = a5 + 604794 - 3 * ((a3 / 0x12C - a4 + 6) / 5) + 6;
  }
  if (v10 > 0x93A7F) {
    v10 -= 604800;
  }
  *(_DWORD *)(a1 + 68) = v10;
  *(unsigned char *)(a1 + 65) = 20;
}

uint64_t BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a2 + 96);
  if (*(unsigned char *)(v5 + 49) && *(unsigned __int8 *)(a1 + 64) < 4u || *(unsigned char *)(v5 + 50) && *(unsigned char *)(a1 + 64) == 1) {
    return 0;
  }
  uint64_t v29 = *(void *)(a2 + 96);
  int v7 = 0;
  unsigned int v33 = &unk_270EBA3B8;
  __int16 v34 = 0;
  int v35 = -1;
  memset(v36, 0, sizeof(v36));
  uint64_t v8 = a1 + 80;
  int v9 = 1;
  char v32 = 0;
  int v10 = -270;
  for (uint64_t i = 20; i != 60; i += 4)
  {
    unsigned int v12 = *(_DWORD *)(v8 + i - 20);
    int v13 = v12 & 0x3FFFFFFF;
    unsigned int v14 = v12 >> 30;
    if (v12 >> 30)
    {
      if (v14 == 2)
      {
        int Polarity = BlueFin::GlMeBeidouPolarityMgr::GetPolarity(a2, 1u, v10 + *(_DWORD *)(v4 + 72), &v32);
        uint64_t v4 = a1;
        if (Polarity) {
          goto LABEL_30;
        }
      }
      else if (v14 == 1)
      {
        char v20 = BlueFin::GlMeBeidouPolarityMgr::GetPolarity(a2, 0, v10 + *(_DWORD *)(v4 + 72), &v32);
        uint64_t v4 = a1;
        if (v20)
        {
LABEL_30:
          if (v32) {
            unsigned int v17 = v12 & 0x3FFFFFFF;
          }
          else {
            unsigned int v17 = v13 ^ 0x3FFFFFFF;
          }
          goto LABEL_27;
        }
      }
      unsigned int v17 = v12 | 0xC0000000;
      if ((v12 & 0x3FF80000) == 0x7680000) {
        int v19 = v13 ^ 0x3FFFFFFF;
      }
      else {
        int v19 = v12 & 0x3FFFFFFF;
      }
      BOOL v18 = i == 20;
      if (i != 20) {
        int v9 = 0;
      }
    }
    else
    {
      BOOL v15 = (v12 & 0x3FF80000) == 0x7680000 && i == 20;
      int v16 = v13 ^ 0x3FFFFFFF;
      if (!v15) {
        int v16 = v12 & 0x3FFFFFFF;
      }
      unsigned int v17 = v16 | 0x80000000;
      BOOL v18 = v13 == 0;
      if (!v13) {
        ++v7;
      }
      int v19 = 1269678302;
    }
    if (v18) {
      unsigned int v17 = v19;
    }
LABEL_27:
    *(_DWORD *)((char *)&v33 + i) = v17;
    v10 += 30;
  }
  if ((a3 & 1) == 0 && v7 <= 9 || (uint64_t result = 0, a3) && !v7 && ((v9 ^ 1) & 1) == 0)
  {
    uint64_t v22 = *(void *)(v29 + 32);
    int v23 = *(unsigned __int8 *)(v4 + 64);
    int v24 = *(_DWORD *)(v4 + 72);
    double v25 = *(double *)(v22 + 32) * 1000.0;
    double v26 = fmod(v25, 4294967300.0);
    if (v25 <= 4294967300.0) {
      double v26 = v25;
    }
    if (v26 < -4294967300.0) {
      double v26 = -fmod(-v26, 4294967300.0);
    }
    if (v26 < 0.0) {
      unsigned int v27 = --v26;
    }
    else {
      unsigned int v27 = v26;
    }
    if (*(unsigned __int8 *)(v22 + 9) - 81 >= 0x35) {
      int v28 = 2 * v24;
    }
    else {
      int v28 = 20 * v24;
    }
    BlueFin::GlMeBeidouDecodeMemoryFrame::SendSubframe(v29, (long long *)((char *)v36 + 4), v23, v24, v27 - *(_DWORD *)(v22 + 20) + v28, *(_DWORD *)(a1 + 68));
    return 1;
  }
  return result;
}

void BlueFin::GlMeBeidouFrame::~GlMeBeidouFrame(BlueFin::GlMeBeidouFrame *this)
{
}

void BlueFin::GlMeBeidouDecodeSyncBitHistPreamble::~GlMeBeidouDecodeSyncBitHistPreamble(BlueFin::GlMeBeidouDecodeSyncBitHistPreamble *this)
{
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistPreamble::Count(BlueFin::GlMeBeidouDecodeSyncBitHistPreamble *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistPreamble::Key(BlueFin::GlMeBeidouDecodeSyncBitHistPreamble *this, int a2)
{
  return *(unsigned int *)(*((void *)this + 1) + 4 * a2);
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistPreamble::Key(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(*(void *)(this + 8) + 4 * a2) = a3;
  return this;
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistPreamble::Value(BlueFin::GlMeBeidouDecodeSyncBitHistPreamble *this, int a2)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + a2);
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistPreamble::Value(uint64_t this, int a2, char a3)
{
  *(unsigned char *)(*(void *)(this + 16) + a2) = a3;
  return this;
}

uint64_t BlueFin::GlMeBeidouPolarityMgr::SetBits(BlueFin::GlMeBeidouPolarityMgr *this, int a2, BlueFin::GlBitBuffer *a3, unsigned int a4, int a5, BlueFin::GlBitBuffer *a6, unsigned int a7)
{
  int v11 = 0;
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v12 = *((_DWORD *)a3 + 7);
  *((_DWORD *)a3 + 8) = v12;
  *((unsigned char *)a3 + 40) = 1;
  int v13 = *((_DWORD *)a6 + 7);
  *((_DWORD *)a6 + 8) = v13;
  *((unsigned char *)a6 + 40) = 1;
  unsigned int v14 = *((_DWORD *)a3 + 6) - v12;
  if (v14 >= 0x20) {
    int v15 = 32;
  }
  else {
    int v15 = v14;
  }
  if (v15 && (a2 & a5 & 1) == 0 && a4 == a7 && v14 == *((_DWORD *)a6 + 6) - v13)
  {
    int v11 = 0;
    do
    {
      int v16 = BlueFin::GlBitBuffer::GetU(a3, v15);
      int v17 = BlueFin::GlBitBuffer::GetU(a6, v15) ^ v16;
      if (v11 == 2 || v17)
      {
        if (v11 == 1)
        {
          int v11 = 0;
          break;
        }
        int v11 = 0;
        if (0xFFFFFFFF >> -(char)v15 != v17) {
          break;
        }
        int v11 = 2;
      }
      else
      {
        int v11 = 1;
      }
      if ((*((_DWORD *)a3 + 6) - *((_DWORD *)a3 + 7)) >= 0x20) {
        int v15 = 32;
      }
      else {
        int v15 = *((_DWORD *)a3 + 6) - *((_DWORD *)a3 + 7);
      }
    }
    while (v15);
  }
  BlueFin::GlBitBuffer::Reset((uint64_t)a3);
  uint64_t result = BlueFin::GlBitBuffer::Reset((uint64_t)a6);
  if (!v11)
  {
    unsigned int v22 = 0;
    if (a2)
    {
      int v24 = a5;
      if ((a5 & 1) == 0) {
        unsigned int v22 = *((_DWORD *)this + 15);
      }
    }
    else
    {
      int v24 = a5;
    }
    int v25 = v24 ^ 1 | a2;
    int v19 = *((_DWORD *)this + 7);
    BOOL v26 = v25 == 0;
    if (v25) {
      LODWORD(v23) = 0;
    }
    else {
      LODWORD(v23) = *((_DWORD *)this + 7);
    }
    if (v26) {
      unsigned int v22 = 0;
    }
    long long v47 = xmmword_263BB2828;
    long long v48 = unk_263BB2838;
    long long v49 = xmmword_263BB2848;
    long long v50 = unk_263BB2858;
    long long v45 = xmmword_263BB2808;
    long long v46 = unk_263BB2818;
    int v51 = 4;
LABEL_42:
    unsigned int v21 = a4;
    unsigned int v20 = a7;
    if (v23 != 2 || v22 != 2) {
      goto LABEL_54;
    }
    if (v19 == 4)
    {
      uint64_t v23 = 2;
      if (*((_DWORD *)this + 15) != 4) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v19 != 3)
      {
        LODWORD(v23) = 2;
        goto LABEL_53;
      }
      uint64_t v23 = 2;
      if (*((_DWORD *)this + 15) != 3) {
        goto LABEL_53;
      }
    }
LABEL_49:
    unsigned int v22 = v23;
    goto LABEL_50;
  }
  int v51 = 4;
  long long v47 = xmmword_263BB2828;
  long long v48 = unk_263BB2838;
  long long v49 = xmmword_263BB2848;
  long long v50 = unk_263BB2858;
  long long v45 = xmmword_263BB2808;
  long long v46 = unk_263BB2818;
  int v19 = *((_DWORD *)this + 7);
  if (v11 != 1)
  {
    unsigned int v22 = 2;
    LODWORD(v23) = 2;
    goto LABEL_42;
  }
  if (v19 == 4)
  {
    uint64_t v23 = 1;
    unsigned int v21 = a4;
    unsigned int v20 = a7;
    if (*((_DWORD *)this + 15) != 3)
    {
      unsigned int v22 = 1;
      goto LABEL_54;
    }
    goto LABEL_49;
  }
  unsigned int v21 = a4;
  unsigned int v20 = a7;
  if (v19 == 3)
  {
    unsigned int v22 = 1;
    if (*((_DWORD *)this + 15) != 4)
    {
LABEL_51:
      LODWORD(v23) = v22;
      goto LABEL_54;
    }
    uint64_t v23 = 1;
LABEL_50:
    unint64_t v27 = (unint64_t)&v45 | (4 * v23);
    *(_DWORD *)(v27 + 60) = 0;
    *(_DWORD *)(v27 + 80) = 0;
    goto LABEL_51;
  }
  LODWORD(v23) = 1;
LABEL_53:
  unsigned int v22 = v23;
LABEL_54:
  int v28 = *((_DWORD *)&v45 + 5 * v19 + v23);
  int v29 = *((_DWORD *)this + 15);
  int v30 = *((_DWORD *)&v45 + 5 * v29 + v22);
  BOOL v31 = v28 != 1 || (v30 - 3) >= 2;
  int v32 = *((_DWORD *)&v45 + 5 * v29 + v22);
  if (v31)
  {
    if (v28 == 2 && v30 == 3)
    {
      int v32 = 3;
      int v30 = 4;
      goto LABEL_83;
    }
    if (v28 == 2 && v30 == 4) {
      goto LABEL_73;
    }
    if ((v28 - 3) <= 1 && v30 == 1)
    {
      int v30 = v28;
      int v32 = v28;
      goto LABEL_83;
    }
    if (v28 == 3 && v30 == 2)
    {
LABEL_73:
      int v32 = 4;
      int v30 = 3;
      goto LABEL_83;
    }
    if (v30 == 2 && v28 == 4) {
      int v32 = 3;
    }
    else {
      int v32 = v30;
    }
    int v30 = v28;
  }
LABEL_83:
  if (v19 != v30 || v29 != v32)
  {
    uint64_t v38 = 0;
    *(_OWORD *)this = *(_OWORD *)((char *)this + 4);
    *((void *)this + 2) = *(void *)((char *)this + 20);
    *((_DWORD *)this + 6) = *((_DWORD *)this + 7);
    char v39 = (char *)this + 68;
    do
    {
      BOOL v40 = &v39[v38];
      *((_DWORD *)v40 - 9) = *(_DWORD *)&v39[v38 - 32];
      *((_DWORD *)v40 - 1) = *(_DWORD *)&v39[v38];
      v38 += 4;
    }
    while (v38 != 28);
    *((_DWORD *)this + 7) = v30;
    *((_DWORD *)this + 15) = v32;
  }
  if (v20 <= v21) {
    unsigned int v41 = v21;
  }
  else {
    unsigned int v41 = v20;
  }
  *((_DWORD *)this + 23) = v41;
  return result;
}

uint64_t BlueFin::GlMeBeidouPolarityMgr::SetPolarity(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5 = 0;
  uint64_t v36 = *MEMORY[0x263EF8340];
  for (uint64_t i = (unsigned int *)(result + 92); *(i - 1) >= a4 || *i < a4; --i)
  {
    unint64_t v7 = v5 + 7;
    --v5;
    if (v7 <= 1) {
      return result;
    }
  }
  uint64_t v8 = v5 + 7;
  if (((v5 + 7) & 0x80000000) == 0)
  {
    if (a5 == 3) {
      int v9 = 4;
    }
    else {
      int v9 = 3;
    }
    if (v9 == *(_DWORD *)(result + 32 * a3 + 4 * v5 + 28)) {
      int v10 = 0;
    }
    else {
      int v10 = a5;
    }
    if ((v10 - 5) > 0xFFFFFFFD)
    {
      v35[0] = a3;
      v35[1] = a3 == 0;
      v35[2] = a3;
      v34[a3] = v10;
      v34[a3 == 0] = 0;
      if (v8 > 7) {
        goto LABEL_55;
      }
      uint64_t v12 = v5 + 7;
      do
      {
        uint64_t v13 = 0;
        char v14 = 1;
        do
        {
          char v15 = v14;
          uint64_t v16 = v35[v13];
          int v17 = v34[v16];
          if (v17)
          {
            BOOL v18 = (int *)(result + 32 * v16 + 4 * v12);
            int v19 = *v18;
            if (*v18 == 1)
            {
              *BOOL v18 = v17;
              if (v17 == 3) {
                int v20 = 3;
              }
              else {
                int v20 = 4;
              }
              v34[v35[v13 + 1]] = v20;
              int v19 = v17;
            }
            if (v19)
            {
              if (v19 == 2)
              {
                int v21 = v34[v16];
                *BOOL v18 = v21;
                if (v21 == 3) {
                  int v22 = 4;
                }
                else {
                  int v22 = 3;
                }
                v34[v35[v13 + 1]] = v22;
              }
            }
            else
            {
              v34[v16] = 0;
            }
          }
          char v14 = 0;
          uint64_t v13 = 1;
        }
        while ((v15 & 1) != 0);
        ++v12;
      }
      while (v12 != 8);
      if ((int)v8 > 0)
      {
LABEL_55:
        do
        {
          uint64_t v23 = 0;
          char v24 = 1;
          do
          {
            char v25 = v24;
            uint64_t v26 = v35[v23];
            int v27 = v34[v26];
            if (v27)
            {
              int v28 = (int *)(result + 32 * v26 + 4 * (v8 - 1));
              int v29 = *v28;
              if (*v28 == 1)
              {
                *int v28 = v27;
                if (v27 == 3) {
                  int v30 = 3;
                }
                else {
                  int v30 = 4;
                }
                v34[v35[v23 + 1]] = v30;
                int v29 = v27;
              }
              if (v29)
              {
                if (v29 == 2)
                {
                  int v31 = v34[v26];
                  *int v28 = v31;
                  if (v31 == 3) {
                    int v32 = 4;
                  }
                  else {
                    int v32 = 3;
                  }
                  v34[v35[v23 + 1]] = v32;
                }
              }
              else
              {
                v34[v26] = 0;
              }
            }
            char v24 = 0;
            uint64_t v23 = 1;
          }
          while ((v25 & 1) != 0);
        }
        while (v8-- >= 2);
      }
    }
    else
    {
      if (v5 != -7 && *(i - 1) < a4 - 30)
      {
        int v11 = (_DWORD *)(result + 36);
        do
        {
          *(v11 - 9) = *(v11 - 8);
          *(v11 - 1) = *v11;
          v11[7] = v11[8];
          ++v11;
          --v8;
        }
        while (v8);
        *(i - 1) = a4 - 30;
      }
      *(i - 16) = 0;
      *(i - 8) = 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeBeidouPolarityMgr::GetPolarity(uint64_t a1, unsigned int a2, unsigned int a3, char *a4)
{
  for (uint64_t i = 0; ; --i)
  {
    uint64_t v5 = a1 + 4 * i;
    if (*(_DWORD *)(v5 + 88) < a3 && *(_DWORD *)(v5 + 92) >= a3) {
      break;
    }
    unint64_t v6 = i + 7;
    if (v6 <= 1) {
      return 0;
    }
  }
  if ((int)i + 7 < 0) {
    return 0;
  }
  int v7 = *(_DWORD *)(a1 + 32 * a2 + 4 * i + 28);
  if (v7 == 3)
  {
    char v8 = 1;
    goto LABEL_12;
  }
  if (v7 != 4) {
    return 0;
  }
  char v8 = 0;
LABEL_12:
  *a4 = v8;
  return 1;
}

uint64_t BlueFin::GlMeBeidouPreamble::NextDataBit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (a6 - *(_DWORD *)(a4 + 24) + *(_DWORD *)(a4 + 28));
}

uint64_t BlueFin::GlMeBeidouPreamble::SetDataBits(uint64_t a1, uint64_t a2, int a3, BlueFin::GlBitBuffer *a4, BlueFin::GlBitBuffer *a5, unsigned int a6)
{
  v86[50] = *MEMORY[0x263EF8340];
  v77[0] = &v85;
  v77[1] = 0;
  char v78 = 0;
  int v80 = 0;
  long long v79 = xmmword_263BB2540;
  char v81 = 0;
  v72[0] = v86;
  v72[1] = 0;
  char v73 = 0;
  int v75 = 0;
  long long v74 = xmmword_263BB2540;
  char v76 = 0;
  int v64 = 0;
  int v9 = *(_DWORD *)(a2 + 104);
  uint64_t v10 = a2 + 4 * (116 * a3) + 384;
  if (v9) {
    uint64_t v10 = 0;
  }
  if (v9 == 1) {
    uint64_t v11 = a2 + 4 * (136 * a3) + 224;
  }
  else {
    uint64_t v11 = v10;
  }
  v67[0] = v11;
  v67[1] = 0;
  char v68 = 0;
  uint64_t v70 = 0;
  *(_DWORD *)&v69[8] = 0;
  *(int32x2_t *)uint64_t v69 = vdup_n_s32(0x880u);
  char v71 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v67, *(unsigned __int16 *)(a1 + 12));
  int v12 = *(_DWORD *)(a2 + 104);
  if (v12 == 1)
  {
    uint64_t v13 = a2 + 4 * (136 * a3 + 68) + 224;
  }
  else if (v12)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = a2 + 4 * (116 * a3 + 58) + 384;
  }
  v61[0] = v13;
  v61[1] = 0;
  char v62 = 0;
  int v65 = 0;
  *(_DWORD *)&v63[8] = 0;
  *(int32x2_t *)int v63 = vdup_n_s32(0x880u);
  char v66 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v61, *(unsigned __int16 *)(a1 + 12));
  if (*(_DWORD *)(a1 + 8) == a6 - *((_DWORD *)a4 + 6) + *((_DWORD *)a4 + 7))
  {
    unsigned int v14 = *(_DWORD *)&v69[4] - *(_DWORD *)&v69[8];
  }
  else
  {
    unsigned int v14 = 0;
    HIDWORD(v70) = 0;
    *(void *)&unsigned char v69[4] = 0;
    char v71 = 0;
    int v65 = 0;
    *(void *)&v63[4] = 0;
    char v66 = 0;
  }
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v77, (BlueFin::GlBitBuffer *)v67, v14);
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v77, a4, *((_DWORD *)a4 + 6) - *((_DWORD *)a4 + 7));
  *(void *)((char *)&v79 + 4) = DWORD2(v79);
  char v81 = 0;
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v72, (BlueFin::GlBitBuffer *)v61, *(_DWORD *)&v63[4] - *(_DWORD *)&v63[8]);
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v72, a5, *((_DWORD *)a5 + 6) - *((_DWORD *)a5 + 7));
  *(void *)((char *)&v74 + 4) = DWORD2(v74);
  char v76 = 0;
  uint64_t PreambleMemory = BlueFin::GlMeBeidouDecodeMgr::GetPreambleMemory((BlueFin::GlMeBeidouDecodeMgr *)a2);
  unsigned int v15 = a6;
  unsigned int v16 = a6 - *((_DWORD *)a4 + 6);
  unsigned int v17 = *(unsigned __int16 *)(PreambleMemory + 68);
  if (v17 <= 0xEF) {
    int v18 = 60;
  }
  else {
    int v18 = -240;
  }
  unsigned int v19 = v18 + v17;
  BOOL v47 = v16 >= v18 + v17;
  unsigned int v20 = v16 - (v18 + v17);
  if (v20 != 0 && v47) {
    v19 += 300 * ((v20 + 299) / 0x12C);
  }
  if (v19 >= a6) {
    goto LABEL_60;
  }
  while (2)
  {
    unsigned int v21 = v19 - 60;
    if (DWORD1(v79) < v15 - (v19 - 60)) {
      goto LABEL_59;
    }
    unsigned int v57 = v19;
    unsigned int v22 = (unsigned __int16)(WORD2(v79) - (v15 - v21));
    BlueFin::GlBitBuffer::Position((uint64_t)v77, v22);
    BlueFin::GlBitBuffer::Position((uint64_t)v72, v22);
    unsigned int v23 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v77, 0x1Eu);
    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(1, v23, (int *)&v83, (unsigned int *)&v82, v24);
    unsigned int v25 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v77, 0x1Eu);
    uint64_t result = BlueFin::GlMeBeidouDecodeUtil::Deinterleave(2, v25, (int *)&v84, (unsigned int *)&v82 + 1, v26);
    unsigned int v28 = v83;
    unsigned int v29 = v84;
    if (!(v83 >> 29))
    {
      unsigned int v28 = v83 ^ 0x3FFFFFFF;
      unsigned int v29 = v84 ^ 0x3FFFFFFF;
      v83 ^= 0x3FFFFFFFu;
      v84 ^= 0x3FFFFFFFu;
    }
    int v30 = 0;
    int v31 = (unsigned char *)(PreambleMemory + 57);
    uint64_t v32 = 10;
    do
    {
      int v33 = *v31;
      if (((((v28 >> 19) ^ (v28 >> 20)) & 0x3FF) >> (v32 - 1)))
      {
        if (v33 == 127) {
          goto LABEL_31;
        }
        char v34 = 1;
      }
      else
      {
        if (v33 == 128) {
          goto LABEL_31;
        }
        char v34 = -1;
      }
      LOBYTE(v33) = v33 + v34;
      *int v31 = v33;
LABEL_31:
      int v30 = ((char)v33 > 0) | (2 * v30);
      ++v31;
      --v32;
    }
    while (v32);
    if (BlueFin::GlUtils::m_ucEnabled) {
      uint64_t result = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x77);
    }
    if (v30 != 155) {
      goto LABEL_66;
    }
    unsigned int v35 = v28 << 8;
    int v36 = (v28 >> 12) & 7;
    unsigned int v37 = v35 & 0xFF000 | (v29 >> 18) & 0xFFF;
    unsigned int v38 = (v21 - *(unsigned __int16 *)(PreambleMemory + 68)) / 0x12C;
    BOOL v39 = v82 == 0;
    BOOL v40 = v37 < 0x93A80;
    if (v39 && v40) {
      int v41 = 0;
    }
    else {
      int v41 = 7;
    }
    if (v39 && v40) {
      int v42 = 0;
    }
    else {
      int v42 = 0xFFFFF;
    }
    v59[0] = &unk_270EBEB48;
    v59[1] = PreambleMemory + 32;
    v59[2] = PreambleMemory + 52;
    int v60 = 5;
    int v43 = *(unsigned __int8 *)(*(void *)(a2 + 96) + 49);
    int v44 = v38 - 5 * ((858993460 * (unint64_t)v38) >> 32);
    char v45 = 1;
    do
    {
      char v46 = v45;
      BOOL v47 = (v36 - 1) > 4 || v37 >= 0x93A80;
      if (!v47)
      {
        int v48 = v36 - v44 - 1;
        if ((v36 - v44 + 4) < 5) {
          int v48 = v36 - v44 + 4;
        }
        if (v43) {
          unsigned int v49 = v37 - 6 * v38 % 0x93A80 + 604800;
        }
        else {
          unsigned int v49 = v37 + 604800 + -3 * ((v48 + v38) / 5) + 604800 * (3 * ((v48 + v38) / 5) / 0x93A80);
        }
        if (v49 >= 0x93A80) {
          v49 -= 604800;
        }
        BlueFin::GlMeBeidouDecodeSyncBitHistBase::Set((BlueFin::GlMeBeidouDecodeSyncBitHistBase *)v59, v49 | ((v48 << 20) + 0x100000));
      }
      char v45 = 0;
      v36 ^= v41;
      v37 ^= v42;
    }
    while ((v46 & 1) != 0);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x77);
    }
    unsigned int v58 = 0;
    uint64_t result = BlueFin::GlMeBeidouDecodeSyncBitHistBase::Get((BlueFin::GlMeBeidouDecodeSyncBitHistBase *)v59, 3u, 3u, &v58);
    if (!result)
    {
      unsigned int v15 = a6;
      unsigned int v19 = v57;
LABEL_59:
      v19 += 300;
      if (v19 >= v15)
      {
LABEL_60:
        BlueFin::GlBitBuffer::Position((uint64_t)v77, (DWORD1(v79) - *(_DWORD *)v69) & ~((DWORD1(v79) - *(_DWORD *)v69) >> 31));
        BlueFin::GlBitBuffer::Position((uint64_t)v72, (DWORD1(v74) - *(_DWORD *)v63) & ~((DWORD1(v74) - *(_DWORD *)v63) >> 31));
        HIDWORD(v70) = 0;
        *(_DWORD *)&unsigned char v69[4] = *(_DWORD *)v69;
        *(_DWORD *)&v69[8] = 0;
        char v71 = 0;
        BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v67, (BlueFin::GlBitBuffer *)v77, DWORD1(v79) - DWORD2(v79));
        *(void *)&unsigned char v69[4] = *(unsigned int *)&v69[8];
        char v71 = 0;
        int v65 = 0;
        *(_DWORD *)&v63[4] = *(_DWORD *)v63;
        *(_DWORD *)&v63[8] = 0;
        char v66 = 0;
        uint64_t result = (uint64_t)BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v61, (BlueFin::GlBitBuffer *)v72, DWORD1(v74) - DWORD2(v74));
        *(_WORD *)(a1 + 12) = *(_WORD *)&v69[4];
        *(_DWORD *)(a1 + 8) = a6;
        return result;
      }
      continue;
    }
    break;
  }
  unsigned int v50 = v58 & 0xFFFFF;
  if ((v58 - 0x100000) >> 20 <= 4 && v50 < 0x93A80) {
    return BlueFin::GlMeBeidouDecodeMgr::SyncFound((BlueFin::GlMeBeidouDecodeMgr *)a2, *(unsigned __int16 *)(PreambleMemory + 68), (v58 >> 20), v50);
  }
LABEL_66:
  *(_DWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 136) = 0;
  *(void *)(a2 + 128) = &unk_270EBEC00;
  *(_WORD *)(a2 + 140) = 0;
  *(_DWORD *)(a2 + 152) = 0;
  *(void *)(a2 + 144) = &unk_270EBEC00;
  *(_WORD *)(a2 + 156) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 348) = 0u;
  *(void *)(a2 + 167) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 480) = 0u;
  *(_OWORD *)(a2 + 496) = 0u;
  *(_OWORD *)(a2 + 512) = 0u;
  *(_OWORD *)(a2 + 528) = 0u;
  *(_OWORD *)(a2 + 544) = 0u;
  *(_OWORD *)(a2 + 560) = 0u;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_OWORD *)(a2 + 640) = 0u;
  *(_OWORD *)(a2 + 656) = 0u;
  *(_OWORD *)(a2 + 672) = 0u;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_OWORD *)(a2 + 704) = 0u;
  uint64_t v52 = *(void *)(a2 + 96);
  ++*(_DWORD *)(v52 + 28);
  *(unsigned char *)(v52 + 24) = 1;
  return result;
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::GetPreambleMemory(BlueFin::GlMeBeidouDecodeMgr *this)
{
  if (*((_DWORD *)this + 26) != 1)
  {
    DeviceFaultNotify("glme_beidou_decoder_preamble.cpp", 204, "GetPreambleMemory", (char)"GLME_BDS_DCD_STATE_PREAMBLE == m_eState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder_preamble.cpp", 204, "GLME_BDS_DCD_STATE_PREAMBLE == m_eState");
  }
  return (uint64_t)this + 128;
}

int64x2_t BlueFin::GlMeBeidouDecodeMemoryPreambleBase::GlMeBeidouDecodeMemoryPreambleBase(BlueFin::GlMeBeidouDecodeMemoryPreambleBase *this, unsigned int a2)
{
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_270EBEBB8;
  *((_WORD *)this + 6) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = &unk_270EBEBB8;
  *((_WORD *)this + 14) = 0;
  *((_WORD *)this + 34) = a2 % 0x12C;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_DWORD *)((char *)this + 63) = 0;
  int64x2_t result = (int64x2_t)xmmword_263BB2870;
  size_t v3 = (char *)this + 58;
  int64x2_t v4 = vdupq_n_s64(2uLL);
  uint64_t v5 = 10;
  do
  {
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xAuLL), (uint64x2_t)result)).u8[0])
    {
      if ((0x9Bu >> (v5 - 1))) {
        char v6 = 5;
      }
      else {
        char v6 = -5;
      }
      *(v3 - 1) = v6;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xAuLL), *(uint64x2_t *)&result)).i32[1])
    {
      if ((0x9Bu >> (v5 - 2))) {
        char v7 = 5;
      }
      else {
        char v7 = -5;
      }
      *size_t v3 = v7;
    }
    int64x2_t result = vaddq_s64(result, v4);
    v3 += 2;
    v5 -= 2;
  }
  while (v5);
  return result;
}

void BlueFin::GlMeBeidouPreamble::~GlMeBeidouPreamble(BlueFin::GlMeBeidouPreamble *this)
{
}

uint64_t BlueFin::GlMeBeidouSearch::NextDataBit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return (a6 - *(_DWORD *)(a4 + 24) + *(_DWORD *)(a4 + 28));
}

BlueFin::GlBitBuffer *BlueFin::GlMeBeidouSearch::SetDataBits(uint64_t a1, BlueFin::GlMeBeidouDecodeMgr *a2, int a3, BlueFin::GlBitBuffer *a4, BlueFin::GlBitBuffer *a5, int a6)
{
  v85[45] = *MEMORY[0x263EF8340];
  v72[0] = &v84;
  v72[1] = 0;
  char v73 = 0;
  int v75 = 0;
  long long v74 = xmmword_263BB28A0;
  char v76 = 0;
  v67[0] = v85;
  v67[1] = 0;
  char v68 = 0;
  int v70 = 0;
  long long v69 = xmmword_263BB28A0;
  char v71 = 0;
  int v59 = 0;
  int v53 = 0;
  int v11 = *((_DWORD *)a2 + 26);
  uint64_t v12 = (uint64_t)a2 + 4 * (116 * a3) + 384;
  if (v11) {
    uint64_t v12 = 0;
  }
  if (v11 == 1) {
    uint64_t v13 = (uint64_t)a2 + 4 * (136 * a3) + 224;
  }
  else {
    uint64_t v13 = v12;
  }
  v62[0] = v13;
  v62[1] = 0;
  char v63 = 0;
  uint64_t v65 = 0;
  *(_DWORD *)&v64[8] = 0;
  *(int32x2_t *)int v64 = vdup_n_s32(0x740u);
  char v66 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v62, *(unsigned __int16 *)(a1 + 12));
  int v14 = *((_DWORD *)a2 + 26);
  if (v14 == 1)
  {
    uint64_t v15 = (uint64_t)a2 + 4 * (136 * a3 + 68) + 224;
  }
  else if (v14)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = (uint64_t)a2 + 4 * (116 * a3 + 58) + 384;
  }
  v56[0] = v15;
  v56[1] = 0;
  char v57 = 0;
  int v60 = 0;
  *(_DWORD *)&v58[8] = 0;
  *(int32x2_t *)unsigned int v58 = vdup_n_s32(0x740u);
  char v61 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v56, *(unsigned __int16 *)(a1 + 12));
  v49[0] = BlueFin::GlMeBeidouDecodeMgr::GetSearchMemory(a2) + 48;
  v49[1] = 0;
  char v50 = 0;
  int v54 = 0;
  int v52 = 0;
  int32x2_t v51 = vdup_n_s32(0x5E0u);
  char v55 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v49, 0x5DCu);
  if (*(_DWORD *)(a1 + 8) == a6 - *((_DWORD *)a4 + 6) + *((_DWORD *)a4 + 7))
  {
    unsigned int v16 = *(_DWORD *)&v64[4] - *(_DWORD *)&v64[8];
  }
  else
  {
    unsigned int v16 = 0;
    HIDWORD(v65) = 0;
    *(void *)&v64[4] = 0;
    char v66 = 0;
    int v60 = 0;
    *(void *)&v58[4] = 0;
    char v61 = 0;
  }
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v72, (BlueFin::GlBitBuffer *)v62, v16);
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v72, a4, *((_DWORD *)a4 + 6) - *((_DWORD *)a4 + 7));
  *(void *)((char *)&v74 + 4) = DWORD2(v74);
  char v76 = 0;
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v67, (BlueFin::GlBitBuffer *)v56, *(_DWORD *)&v58[4] - *(_DWORD *)&v58[8]);
  BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v67, a5, *((_DWORD *)a5 + 6) - *((_DWORD *)a5 + 7));
  *(void *)((char *)&v69 + 4) = DWORD2(v69);
  char v71 = 0;
  int v17 = *(_DWORD *)&v64[4];
  if (*(int *)&v64[4] <= 60) {
    int v17 = 60;
  }
  BlueFin::GlBitBuffer::Position((uint64_t)v72, v17 - 60);
  int v18 = *(_DWORD *)&v58[4];
  if (*(int *)&v58[4] <= 60) {
    int v18 = 60;
  }
  BlueFin::GlBitBuffer::Position((uint64_t)v67, v18 - 60);
  int v19 = DWORD1(v74);
  if ((DWORD1(v74) - DWORD2(v74)) < 0x3D) {
    goto LABEL_39;
  }
  *(void *)int v48 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v49, (5 * (a6 - (DWORD1(v74) - DWORD2(v74)))) % v51.i32[1]);
  *(void *)BOOL v47 = 0;
  unsigned int v46 = 0;
  int v20 = 10;
  unsigned int v21 = *(_DWORD *)&v64[4];
  do
  {
    unsigned int v22 = (BlueFin::GlMeBeidouDecodeUtil *)BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v72, 1u);
    int v23 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v67, 1u);
    HIDWORD(v40) = 5;
    LOBYTE(v40) = v21 < 0x3D;
    BlueFin::GlMeBeidouDecodeUtil::NextBit(v22, v23, &v48[1], v48, (int *)&v47[1], &v46, v47, (BlueFin::GlBitBuffer *)v49, v40, 15, 5u, v41, HIDWORD(v41));
    --v20;
  }
  while (v20);
  int v19 = DWORD1(v74);
  if ((DWORD1(v74) - DWORD2(v74)) < 0x33)
  {
LABEL_39:
    BlueFin::GlBitBuffer::Position((uint64_t)v72, (v19 - *(_DWORD *)v64) & ~((v19 - *(_DWORD *)v64) >> 31));
    BlueFin::GlBitBuffer::Position((uint64_t)v67, (DWORD1(v69) - *(_DWORD *)v58) & ~((DWORD1(v69) - *(_DWORD *)v58) >> 31));
    HIDWORD(v65) = 0;
    *(void *)&v64[4] = *(unsigned int *)v64;
    char v66 = 0;
    BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v62, (BlueFin::GlBitBuffer *)v72, DWORD1(v74) - DWORD2(v74));
    *(void *)&v64[4] = *(unsigned int *)&v64[8];
    char v66 = 0;
    int v60 = 0;
    *(_DWORD *)&v58[4] = *(_DWORD *)v58;
    *(_DWORD *)&v58[8] = 0;
    char v61 = 0;
    int64x2_t result = BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v56, (BlueFin::GlBitBuffer *)v67, DWORD1(v69) - DWORD2(v69));
    *(_WORD *)(a1 + 12) = *(_WORD *)&v64[4];
    *(_DWORD *)(a1 + 8) = a6;
    return result;
  }
  int v24 = a6 - 60;
  while (1)
  {
    unsigned int v25 = (BlueFin::GlMeBeidouDecodeUtil *)BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v72, 1u);
    int v26 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v67, 1u);
    HIDWORD(v40) = 5;
    LOBYTE(v40) = 1;
    BlueFin::GlMeBeidouDecodeUtil::NextBit(v25, v26, &v48[1], v48, (int *)&v47[1], &v46, v47, (BlueFin::GlBitBuffer *)v49, v40, 15, 5u, v41, HIDWORD(v41));
    v46 &= 0x3FFu;
    BOOL v27 = v46 == 1023 && (v47[0] & 0x3FF) == 155;
    int v28 = v27;
    if (!v27 && ((v47[1] & 0x7FF ^ 0x712) & 0x3FF) != (v47[1] & 0x7FF ^ 0x712u) >> 1) {
      goto LABEL_38;
    }
    BlueFin::GlBitBuffer::Position((uint64_t)v72, DWORD2(v74) - 11);
    BlueFin::GlBitBuffer::Position((uint64_t)v67, DWORD2(v69) - 11);
    unsigned int v29 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v72, 0x1Eu);
    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(1, v29, (int *)&v83, &v81, v30);
    unsigned int v31 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v67, 0x1Eu);
    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(1, v31, &v79, &v77, v32);
    unsigned int v33 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v72, 0x1Eu);
    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(2, v33, (int *)&v83 + 1, &v82, v34);
    unsigned int v35 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v67, 0x1Eu);
    BlueFin::GlMeBeidouDecodeUtil::Deinterleave(2, v35, &v80, &v78, v36);
    if (v83 >> 19 != 1810) {
      v83 ^= 0x3FFFFFFF3FFFFFFFuLL;
    }
    unsigned int v37 = v24 - DWORD1(v74) + DWORD2(v74);
    unsigned int v45 = v37;
    if (v28) {
      return (BlueFin::GlBitBuffer *)BlueFin::GlMeBeidouDecodeMgr::SyncFound(a2, v24 - DWORD1(v74) + DWORD2(v74), 0, 0xFFFFFFFF);
    }
    uint64_t SearchMemory = BlueFin::GlMeBeidouDecodeMgr::GetSearchMemory(a2);
    v43[0] = &off_270EBEC48;
    v43[1] = SearchMemory + 32;
    v43[2] = SearchMemory + 42;
    int v44 = 5;
    BlueFin::GlMeBeidouDecodeSyncBitHistBase::Set((BlueFin::GlMeBeidouDecodeSyncBitHistBase *)v43, v37 % 0x12C);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x77);
    }
    if (BlueFin::GlMeBeidouDecodeSyncBitHistBase::Get((BlueFin::GlMeBeidouDecodeSyncBitHistBase *)v43, 3u, 3u, &v45)) {
      return (BlueFin::GlBitBuffer *)BlueFin::GlMeBeidouDecodeMgr::SyncFound(a2, v45, 0, 0xFFFFFFFF);
    }
    BlueFin::GlBitBuffer::Position((uint64_t)v72, DWORD2(v74) - 49);
    BlueFin::GlBitBuffer::Position((uint64_t)v67, DWORD2(v69) - 49);
LABEL_38:
    int v19 = DWORD1(v74);
    if ((DWORD1(v74) - DWORD2(v74)) < 0x33) {
      goto LABEL_39;
    }
  }
}

uint64_t BlueFin::GlMeBeidouDecodeMgr::GetSearchMemory(BlueFin::GlMeBeidouDecodeMgr *this)
{
  if (*((_DWORD *)this + 26))
  {
    DeviceFaultNotify("glme_beidou_decoder_search.cpp", 152, "GetSearchMemory", (char)"GLME_BDS_DCD_STATE_SEARCH == m_eState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_beidou_decoder_search.cpp", 152, "GLME_BDS_DCD_STATE_SEARCH == m_eState");
  }
  return (uint64_t)this + 128;
}

void BlueFin::GlMeBeidouSearch::~GlMeBeidouSearch(BlueFin::GlMeBeidouSearch *this)
{
}

void BlueFin::GlMeBeidouDecodeSyncBitHistSearch::~GlMeBeidouDecodeSyncBitHistSearch(BlueFin::GlMeBeidouDecodeSyncBitHistSearch *this)
{
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistSearch::Count(BlueFin::GlMeBeidouDecodeSyncBitHistSearch *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistSearch::Key(BlueFin::GlMeBeidouDecodeSyncBitHistSearch *this, int a2)
{
  return *(unsigned __int16 *)(*((void *)this + 1) + 2 * a2);
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistSearch::Key(uint64_t this, int a2, __int16 a3)
{
  *(_WORD *)(*(void *)(this + 8) + 2 * a2) = a3;
  return this;
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistSearch::Value(BlueFin::GlMeBeidouDecodeSyncBitHistSearch *this, int a2)
{
  return *(unsigned __int8 *)(*((void *)this + 2) + a2);
}

uint64_t BlueFin::GlMeBeidouDecodeSyncBitHistSearch::Value(uint64_t this, int a2, char a3)
{
  *(unsigned char *)(*(void *)(this + 16) + a2) = a3;
  return this;
}

uint64_t BlueFin::GlMeFrameAidMgr::FoundTLM(BlueFin::GlMeFrameAidMgr *this, double a2, int a3)
{
  double v5 = a2 * 1000.0;
  double v6 = fmod(a2 * 1000.0, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v6 = v5;
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  if (v6 < 0.0) {
    unsigned int v7 = --v6;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 > 20 * a3) {
    unsigned int v8 = v7 - 20 * a3;
  }
  else {
    unsigned int v8 = v7 + -20 * a3 + 6000 * (20 * a3 / 0x1770u) + 6000;
  }
  unsigned __int8 v9 = *((unsigned char *)this + 24);
  int v10 = 4;
  while (1)
  {
    uint64_t v11 = v9;
    if (v8 != -1)
    {
      int v12 = *((_DWORD *)this + v9);
      if (v12 != -1)
      {
        int v13 = v12 - v8;
        if (v13 < 0) {
          int v13 = -v13;
        }
        unsigned int v14 = (v13 + 19) / 0x14u
            - 300 * (((229064923 * (unint64_t)((v13 + 19) / 0x14u)) >> 32) >> 4);
        unsigned int v15 = (13 * v13 + 500000) / 0xF4240u;
        uint64_t result = 300 - v14;
        if ((int)v14 >= (int)result) {
          unsigned int v14 = 300 - v14;
        }
        if (v14 <= 2 && v15 < 0x12) {
          break;
        }
      }
    }
    if ((v9 + 1) <= 2u) {
      ++v9;
    }
    else {
      unsigned __int8 v9 = 0;
    }
    *((unsigned char *)this + 24) = v9;
    if (!--v10)
    {
      unsigned __int8 v19 = 0;
      uint64_t result = BlueFin::GlMeFrameAidMgr::FindBestPair(this, &v19, &v18);
      if (result && v19 == v9)
      {
        if ((v9 + 1) <= 2u) {
          ++v9;
        }
        else {
          unsigned __int8 v9 = 0;
        }
        *((unsigned char *)this + 24) = v9;
      }
      uint64_t v11 = v9;
      break;
    }
  }
  *((_DWORD *)this + v11) = v8;
  return result;
}

uint64_t BlueFin::GlMeFrameAidMgr::FindBestPair(BlueFin::GlMeFrameAidMgr *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = 0;
  char v4 = 0;
  double v5 = (char *)this + 40;
  int v6 = -1;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      int v8 = *(_DWORD *)&v5[4 * i - 28];
      if (v8 != -1)
      {
        int v9 = *((_DWORD *)this + v3);
        if (v9 != -1)
        {
          int v10 = v8 - v9;
          if (v10 < 0) {
            int v10 = -v10;
          }
          unsigned int v11 = (v10 + 19) / 0x14u
              - 300 * (((229064923 * (unint64_t)((v10 + 19) / 0x14u)) >> 32) >> 4);
          unsigned int v12 = (13 * v10 + 500000) / 0xF4240u;
          if ((int)v11 >= (int)(300 - v11)) {
            unsigned int v11 = 300 - v11;
          }
          if (v11 <= 2 && v12 <= 0x11)
          {
            int v14 = v5[i];
            if (v6 <= v14)
            {
              if (v6 == v14)
              {
                char v4 = 0;
              }
              else
              {
                *a2 = v3;
                *a3 = i;
                int v6 = v5[i];
                char v4 = 1;
              }
            }
          }
        }
      }
    }
    ++v3;
  }
  while (v3 != 3);
  return v4 & 1;
}

uint64_t BlueFin::GlMeFrameAidMgr::FoundHOW(BlueFin::GlMeFrameAidMgr *this, double a2, int a3, int a4)
{
  double v7 = a2 * 1000.0;
  double v8 = fmod(a2 * 1000.0, 4294967300.0);
  if (v7 <= 4294967300.0) {
    double v8 = v7;
  }
  if (v8 < -4294967300.0) {
    double v8 = -fmod(-v8, 4294967300.0);
  }
  BOOL v9 = 0;
  if (v8 < 0.0) {
    unsigned int v10 = --v8;
  }
  else {
    unsigned int v10 = v8;
  }
  if (v10 > 20 * a3) {
    unsigned int v11 = v10 - 20 * a3;
  }
  else {
    unsigned int v11 = v10 + -20 * a3 + 6000 * (20 * a3 / 0x1770u) + 6000;
  }
  unsigned __int8 v12 = *((unsigned char *)this + 25);
  int v13 = 4;
  do
  {
    if (v11 != -1)
    {
      int v14 = (char *)this + 4 * v12;
      unsigned int v17 = *((_DWORD *)v14 + 3);
      unsigned int v16 = (unsigned int *)(v14 + 12);
      uint64_t result = v17;
      if (v17 != -1)
      {
        int v18 = result - v11;
        if ((int)(result - v11) < 0) {
          int v18 = v11 - result;
        }
        unsigned int v19 = (v18 + 19) / 0x14u
            - 300 * (((229064923 * (unint64_t)((v18 + 19) / 0x14u)) >> 32) >> 4);
        unsigned int v20 = (13 * v18 + 500000) / 0xF4240u;
        if ((int)v19 >= (int)(300 - v19)) {
          unsigned int v19 = 300 - v19;
        }
        BOOL v9 = v20 < 0x12;
        if (v19 <= 2 && v20 < 0x12)
        {
          int v23 = v11 - result;
          int v24 = (char *)this + 4 * v12;
          int v26 = *((_DWORD *)v24 + 7);
          unsigned int v25 = v24 + 28;
          unsigned int v27 = v26 + (int)(v11 - result + 3000) / 6000;
          if (v27 >> 6 >= 0x627) {
            v27 %= 0x189C0u;
          }
          if (v27 == a4)
          {
            if (v23 < 0) {
              int v23 = result - v11;
            }
            if (v23 >= 0xBB9)
            {
              int v28 = (char *)this + v12;
              int v29 = v28[40];
              if ((char)(v28[40] + 1) > v29) {
                LOBYTE(v29) = v28[40] + 1;
              }
              v28[40] = v29;
            }
          }
          else
          {
            int v30 = (char *)this + v12;
            int v33 = v30[40];
            unsigned int v31 = v30 + 40;
            char v32 = v33;
            if (v33 > -3)
            {
              *unsigned int v31 = v32 - 1;
              return result;
            }
            *unsigned int v31 = 0;
          }
          *unsigned int v25 = a4;
          *unsigned int v16 = v11;
          return result;
        }
      }
    }
    if (!v9) {
      *((unsigned char *)this + v12 + 40) = 0;
    }
    if ((v12 + 1) <= 2u) {
      ++v12;
    }
    else {
      unsigned __int8 v12 = 0;
    }
    *((unsigned char *)this + 25) = v12;
    --v13;
  }
  while (v13);
  unsigned __int8 v34 = 0;
  uint64_t result = BlueFin::GlMeFrameAidMgr::FindBestPair(this, &v35, &v34);
  if (result && v34 == v12)
  {
    if ((v12 + 1) <= 2u) {
      ++v12;
    }
    else {
      unsigned __int8 v12 = 0;
    }
    *((unsigned char *)this + 25) = v12;
  }
  *((unsigned char *)this + v12 + 40) = 0;
  unsigned int v22 = (char *)this + 4 * v12;
  *((_DWORD *)v22 + 7) = a4;
  *((_DWORD *)v22 + 3) = v11;
  return result;
}

BOOL BlueFin::GlMeFrameAidMgr::GetAiding(BlueFin::GlMeFrameAidMgr *this, double a2, unsigned int *a3, int *a4, unsigned int *a5)
{
  *(_WORD *)int v26 = 0;
  *a3 = -1;
  *a4 = -1;
  *a5 = -1;
  int BestPair = BlueFin::GlMeFrameAidMgr::FindBestPair(this, &v26[1], v26);
  BOOL result = 0;
  if (BestPair)
  {
    uint64_t v12 = v26[0];
    int v13 = (char *)this + 4 * v26[0];
    unsigned int v16 = *((_DWORD *)v13 + 3);
    unsigned int v15 = v13 + 12;
    unsigned int v14 = v16;
    if (v16 <= *((_DWORD *)this + v26[1])) {
      unsigned int v17 = *((_DWORD *)this + v26[1]);
    }
    else {
      unsigned int v17 = v14;
    }
    double v18 = a2 * 1000.0;
    double v19 = fmod(v18, 4294967300.0);
    if (v18 <= 4294967300.0) {
      double v19 = v18;
    }
    if (v19 < -4294967300.0) {
      double v19 = -fmod(-v19, 4294967300.0);
    }
    if (v19 < 0.0) {
      unsigned int v20 = --v19;
    }
    else {
      unsigned int v20 = v19;
    }
    if ((int)(v20 - v17) >= 0) {
      unsigned int v21 = v20 - v17;
    }
    else {
      unsigned int v21 = v17 - v20;
    }
    if ((int)(v20 - v17) >= 0) {
      unsigned int v22 = (v21 + 19) / 0x14 - 300 * (((229064923 * (unint64_t)((v21 + 19) / 0x14)) >> 32) >> 4);
    }
    else {
      unsigned int v22 = 300 * (((229064923 * (unint64_t)((v21 + 19) / 0x14)) >> 32) >> 4) - (v21 + 19) / 0x14;
    }
    *a4 = v22;
    *a5 = (3277 * ((13 * v21 + 500000) / 0xF4240 + 42)) >> 16;
    int v23 = *a4;
    if (*a4 < 0)
    {
      v23 += 300;
      *a4 = v23;
    }
    uint64_t v24 = 91625969 * (int)(v20 - *v15 - 20 * v23 + 3000);
    unsigned int v25 = (v24 >> 39) + ((unint64_t)v24 >> 63) + *((_DWORD *)this + v12 + 7);
    if (v25 >> 6 >= 0x627) {
      v25 %= 0x189C0u;
    }
    *a3 = v25;
    return (int)*a5 < 3;
  }
  return result;
}

BlueFin::GlMeFrameSearchBuffer *BlueFin::GlMeFrameSearchBuffer::Relocate(BlueFin::GlMeFrameSearchBuffer *this, unsigned int *a2)
{
  long long v10 = *(_OWORD *)this;
  char v11 = *((unsigned char *)this + 16);
  unsigned int v3 = *((_DWORD *)this + 5);
  int v4 = *((_DWORD *)this + 7);
  uint64_t v15 = *((void *)this + 4);
  unsigned int v12 = v3;
  int v13 = v4;
  int v14 = 0;
  char v16 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)this, a2, (unsigned __int16)(v3 >> 3));
  if (v4)
  {
    int v5 = 0;
    do
    {
      unsigned int v6 = v4 - v5;
      if (v6 >= 0x20) {
        unsigned int v7 = 32;
      }
      else {
        unsigned int v7 = v6;
      }
      unsigned int v8 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v10, v7);
      BlueFin::GlBitBuffer::PutU((uint64_t *)this, v8, v7);
      int v4 = v13;
      int v5 = v14;
    }
    while (v13 != v14);
  }
  return this;
}

uint64_t BlueFin::GlMeFrameSearchBuffer::PutU(uint64_t this, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  if (a3)
  {
    int v7 = 0;
    unsigned int v8 = a4 ^ 1;
    unsigned int v9 = a5 ^ 1;
    unsigned int v10 = a6 ^ 1;
    do
    {
      unsigned int v11 = *(_DWORD *)(this + 28);
      int v12 = a3 - v7;
      if (*(_DWORD *)(this + 24) - v11 < a3 - v7)
      {
        *(void *)(this + 24) = v11;
        *(unsigned char *)(this + 40) = 0;
        this = BlueFin::GlBitBuffer::Position(this, 0x20u);
        int v13 = *(_DWORD *)(this + 28);
        unsigned int v14 = *(_DWORD *)(this + 36) + v13;
        *(_DWORD *)(this + 36) = v14;
        unsigned int v15 = *(_DWORD *)(this + 20);
        BOOL v16 = v14 >= v15;
        unsigned int v17 = v14 - v15;
        if (v16) {
          *(_DWORD *)(this + 36) = v17;
        }
        unsigned int v11 = *(_DWORD *)(this + 24) - v13;
        *(_DWORD *)(this + 24) = v15;
        *(_DWORD *)(this + 28) = v11;
        *(unsigned char *)(this + 40) = 0;
      }
      unsigned int v18 = v11 & 0xFFE0;
      unsigned int v19 = v11 & 0x1F;
      if ((v11 & 0x1C) != 0) {
        int v20 = v11 & 0x1F;
      }
      else {
        int v20 = 3;
      }
      if (32 - v20 >= v12) {
        unsigned __int8 v21 = a3 - v7;
      }
      else {
        unsigned __int8 v21 = 32 - v20;
      }
      if (v19 < 4 || v8 != 0)
      {
        int v23 = (uint64_t *)BlueFin::GlBitBuffer::Position(this, v18);
        this = (uint64_t)BlueFin::GlBitBuffer::PutU(v23, v8, 1u);
      }
      if (v19 < 4 || v9 != 0)
      {
        unsigned int v25 = (uint64_t *)BlueFin::GlBitBuffer::Position(this, v18 | 1);
        this = (uint64_t)BlueFin::GlBitBuffer::PutU(v25, v9, 1u);
      }
      if (v19 < 4 || v10)
      {
        int v26 = (uint64_t *)BlueFin::GlBitBuffer::Position(this, v18 | 2);
        this = (uint64_t)BlueFin::GlBitBuffer::PutU(v26, v10, 1u);
      }
      unsigned int v27 = v7 + v21;
      if (v27 > a3)
      {
        DeviceFaultNotify("glme_framemgr.cpp", 480, "PutU", (char)"0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_framemgr.cpp", 480, "0");
      }
      int v28 = (uint64_t *)BlueFin::GlBitBuffer::Position(this, v18 | v20);
      this = (uint64_t)BlueFin::GlBitBuffer::PutU(v28, a2 >> (v12 - v21), v21);
      int v7 = (v7 + v21);
    }
    while (v27 < a3);
  }
  return this;
}

uint64_t BlueFin::GlMeFrameMgr::Synced(uint64_t this, BlueFin::GlMeDSPDataBits *a2)
{
  *(void *)&v107[132] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this != 1)
  {
    int v59 = "SYNCED == m_utStateMem.ucState";
    DeviceFaultNotify("glme_framemgr.h", 532, "GetSynced", (char)"SYNCED == m_utStateMem.ucState");
    int v60 = "glme_framemgr.h";
    int v61 = 532;
    goto LABEL_81;
  }
  uint64_t v3 = this;
  if (!*(unsigned char *)(this + 804) && *(_DWORD *)(this + 68) > *(_DWORD *)(this + 72))
  {
    int v59 = "SvId=%d expected %d <= %d\n";
    DeviceFaultNotify("glme_framemgr.cpp", 820, "Synced", (char)"SvId=%d expected %d <= %d\n");
    int v60 = "glme_framemgr.cpp";
    int v61 = 820;
    goto LABEL_81;
  }
  if ((*((unsigned char *)a2 + 12) & 4) != 0)
  {
    if (*((_WORD *)a2 + 8) || (int v4 = *((_DWORD *)a2 + 5)) != 0)
    {
      int v59 = "(0 == otDataBits.m_usNumBits) && (0UL == otDataBits.m_ulEpochCnt)";
      DeviceFaultNotify("glme_framemgr.cpp", 824, "Synced", (char)"(0 == otDataBits.m_usNumBits) && (0UL == otDataBits.m_ulEpochCnt)");
      int v60 = "glme_framemgr.cpp";
      int v61 = 824;
      goto LABEL_81;
    }
  }
  else
  {
    int v4 = *((_DWORD *)a2 + 5);
  }
  unsigned int v6 = *(_DWORD *)(this + 68);
  unsigned int v5 = *(_DWORD *)(this + 72);
  if (v5 != v4 && v6 >= v5)
  {
LABEL_73:
    *(_DWORD *)(v3 + 72) = v4;
    *(unsigned char *)(v3 + 4) = *((unsigned char *)a2 + 16);
    *(_DWORD *)(v3 + 40) = *((_DWORD *)a2 + 3);
    long long v47 = *(_OWORD *)((char *)a2 + 108);
    long long v48 = *(_OWORD *)((char *)a2 + 156);
    long long v49 = *(_OWORD *)((char *)a2 + 140);
    *(_OWORD *)(v3 + 164) = *(_OWORD *)((char *)a2 + 124);
    *(_OWORD *)(v3 + 180) = v49;
    *(_OWORD *)(v3 + 196) = v48;
    *(_OWORD *)(v3 + 148) = v47;
    long long v50 = *(_OWORD *)((char *)a2 + 44);
    long long v51 = *(_OWORD *)((char *)a2 + 60);
    long long v52 = *(_OWORD *)((char *)a2 + 76);
    *(_OWORD *)(v3 + 132) = *(_OWORD *)((char *)a2 + 92);
    *(_OWORD *)(v3 + 116) = v52;
    *(_OWORD *)(v3 + 100) = v51;
    *(_OWORD *)(v3 + 84) = v50;
    long long v53 = *(_OWORD *)((char *)a2 + 252);
    long long v54 = *(_OWORD *)((char *)a2 + 284);
    long long v55 = *(_OWORD *)((char *)a2 + 236);
    *(_OWORD *)(v3 + 308) = *(_OWORD *)((char *)a2 + 268);
    *(_OWORD *)(v3 + 324) = v54;
    *(_OWORD *)(v3 + 276) = v55;
    *(_OWORD *)(v3 + 292) = v53;
    long long v56 = *(_OWORD *)((char *)a2 + 172);
    long long v57 = *(_OWORD *)((char *)a2 + 188);
    long long v58 = *(_OWORD *)((char *)a2 + 204);
    *(_OWORD *)(v3 + 260) = *(_OWORD *)((char *)a2 + 220);
    *(_OWORD *)(v3 + 244) = v58;
    *(_OWORD *)(v3 + 228) = v57;
    *(_OWORD *)(v3 + 212) = v56;
    if ((*((unsigned char *)a2 + 12) & 4) != 0)
    {
      BlueFin::GlMeFrameMgr::AddBestWord((BlueFin::GlMeFrameMgr *)v3, *(_DWORD *)(v3 + 52), 0, 0, 0, 0, 0, 0);
      return BlueFin::GlMeFrameMgr::SetState(v3, 0);
    }
    return this;
  }
  if (v5 - 20 * *(unsigned __int8 *)(this + 4) != v6)
  {
    if ((*(unsigned char *)(this + 40) & 2) != 0)
    {
      int v7 = (_DWORD *)(this + 16);
      *(_DWORD *)(this + 20) = 0;
      unsigned int v8 = (_DWORD *)(this + 24);
    }
    else
    {
      int v7 = (_DWORD *)(this + 28);
      *(_DWORD *)(this + 32) = 0;
      unsigned int v8 = (_DWORD *)(this + 36);
    }
    *unsigned int v8 = 0;
    *int v7 = 0;
  }
  int v94 = 0;
  int v87 = 0;
  int v80 = 0;
  int v73 = 0;
  int v66 = 0;
  bzero(v102, 0x318uLL);
  v97[0] = (uint64_t)v102;
  v97[1] = 0;
  char v98 = 0;
  int v100 = 0;
  long long v99 = xmmword_263BB2910;
  char v101 = 0;
  BlueFin::GlBitBuffer::PutU(v97, *(_DWORD *)(v3 + 20), 0x20u);
  v90[0] = (uint64_t)&v103;
  v90[1] = 0;
  char v91 = 0;
  int v95 = 0;
  __int32 v93 = 0;
  int32x2_t v9 = vdup_n_s32(0x420u);
  int32x2_t v92 = v9;
  char v96 = 0;
  BlueFin::GlBitBuffer::PutU(v90, *(_DWORD *)(v3 + 24), 0x20u);
  v69[0] = (uint64_t)&v104;
  v69[1] = 0;
  char v70 = 0;
  int v74 = 0;
  __int32 v72 = 0;
  int32x2_t v71 = v9;
  char v75 = 0;
  BlueFin::GlBitBuffer::PutU(v69, *(_DWORD *)(v3 + 16), 0x20u);
  v83[0] = (uint64_t)&v105;
  v83[1] = 0;
  char v84 = 0;
  int v88 = 0;
  unsigned __int32 v86 = 0;
  int32x2_t v85 = v9;
  char v89 = 0;
  BlueFin::GlBitBuffer::PutU(v83, *(_DWORD *)(v3 + 32), 0x20u);
  v76[0] = (uint64_t)&v106;
  v76[1] = 0;
  char v77 = 0;
  int v81 = 0;
  __int32 v79 = 0;
  int32x2_t v78 = v9;
  char v82 = 0;
  BlueFin::GlBitBuffer::PutU(v76, *(_DWORD *)(v3 + 36), 0x20u);
  v62[0] = (uint64_t)v107;
  v62[1] = 0;
  char v63 = 0;
  int v67 = 0;
  __int32 v65 = 0;
  int32x2_t v64 = v9;
  char v68 = 0;
  BlueFin::GlBitBuffer::PutU(v62, *(_DWORD *)(v3 + 28), 0x20u);
  unsigned int v10 = (BlueFin::GlBitBuffer *)(v3 + 84);
  unsigned int v11 = (unsigned int *)(v3 + 212);
  int v12 = (unsigned int *)*(unsigned __int8 *)(v3 + 4);
  if ((*(unsigned char *)(v3 + 40) & 2) != 0)
  {
    BlueFin::GlMeFrameMgr::CopyBits(v97, (BlueFin::GlBitBuffer *)v90, (BlueFin::GlBitBuffer *)v69, v10, v11, v12);
    if (*(_DWORD *)(v3 + 72) != *((_DWORD *)a2 + 5)) {
      goto LABEL_23;
    }
    if ((*((unsigned char *)a2 + 12) & 2) == 0)
    {
      int v13 = (BlueFin::GlMeDSPDataBits *)((char *)a2 + 44);
      unsigned int v14 = (unsigned int *)((char *)a2 + 172);
      unsigned int v15 = (unsigned int *)*((unsigned __int16 *)a2 + 8);
      BOOL v16 = v83;
      unsigned int v17 = v76;
      unsigned int v18 = v62;
      goto LABEL_22;
    }
    int v59 = "otDataBits.m_otFlags32.Missing(GLME_DSPDATABIT_nPLL_FLL)";
    DeviceFaultNotify("glme_framemgr.cpp", 866, "Synced", (char)"otDataBits.m_otFlags32.Missing(GLME_DSPDATABIT_nPLL_FLL)");
    int v60 = "glme_framemgr.cpp";
    int v61 = 866;
LABEL_81:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v60, v61, v59);
  }
  BlueFin::GlMeFrameMgr::CopyBits(v83, (BlueFin::GlBitBuffer *)v76, (BlueFin::GlBitBuffer *)v62, v10, v11, v12);
  if (*(_DWORD *)(v3 + 72) != *((_DWORD *)a2 + 5)) {
    goto LABEL_23;
  }
  if ((*((unsigned char *)a2 + 12) & 2) == 0)
  {
    int v59 = "otDataBits.m_otFlags32.Has(GLME_DSPDATABIT_nPLL_FLL)";
    DeviceFaultNotify("glme_framemgr.cpp", 875, "Synced", (char)"otDataBits.m_otFlags32.Has(GLME_DSPDATABIT_nPLL_FLL)");
    int v60 = "glme_framemgr.cpp";
    int v61 = 875;
    goto LABEL_81;
  }
  int v13 = (BlueFin::GlMeDSPDataBits *)((char *)a2 + 44);
  unsigned int v14 = (unsigned int *)((char *)a2 + 172);
  unsigned int v15 = (unsigned int *)*((unsigned __int16 *)a2 + 8);
  BOOL v16 = v97;
  unsigned int v17 = v90;
  unsigned int v18 = v69;
LABEL_22:
  BlueFin::GlMeFrameMgr::CopyBits(v16, (BlueFin::GlBitBuffer *)v17, (BlueFin::GlBitBuffer *)v18, v13, v14, v15);
LABEL_23:
  unsigned __int16 v19 = WORD4(v99);
  if (v86 > DWORD2(v99)) {
    unsigned __int16 v19 = v86;
  }
  unsigned int v20 = v19;
  BlueFin::GlBitBuffer::Position((uint64_t)v97, v19);
  *(void *)((char *)&v99 + 4) = DWORD2(v99);
  char v101 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v90, v20);
  v92.i32[1] = v93;
  __int32 v93 = 0;
  char v96 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v69, v20);
  v71.i32[1] = v72;
  __int32 v72 = 0;
  char v75 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v83, v20);
  v85.i32[1] = v86;
  unsigned __int32 v86 = 0;
  char v89 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v76, v20);
  v78.i32[1] = v79;
  __int32 v79 = 0;
  char v82 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v62, v20);
  v64.i32[1] = v65;
  __int32 v65 = 0;
  char v68 = 0;
  unsigned int v21 = *(_DWORD *)(v3 + 72);
  unsigned int v22 = 20 * WORD2(v99);
  BOOL v23 = v22 >= v21;
  unsigned int v24 = v22 - v21;
  if (!v23) {
    unsigned int v24 = 0;
  }
  unsigned int v25 = v21 - 20 * WORD2(v99);
  unsigned int v26 = (*(_DWORD *)(v3 + 52) + 560) % 0x258u + 600 * ((v25 + v24) / 0x258);
  if (v26 < v25 + v24) {
    v26 += 600;
  }
  unsigned int v27 = (v26 - v25) / 0x14;
  if (WORD2(v99) < v27) {
    unsigned int v27 = WORD2(v99);
  }
  if (v27) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = 30;
  }
  BlueFin::GlBitBuffer::Position((uint64_t)v97, v28);
  BlueFin::GlBitBuffer::Position((uint64_t)v90, v28);
  BlueFin::GlBitBuffer::Position((uint64_t)v69, v28);
  BlueFin::GlBitBuffer::Position((uint64_t)v83, v28);
  BlueFin::GlBitBuffer::Position((uint64_t)v76, v28);
  BlueFin::GlBitBuffer::Position((uint64_t)v62, v28);
  int v29 = DWORD1(v99) - DWORD2(v99);
  if ((DWORD1(v99) - DWORD2(v99)) <= 0x1F)
  {
    unsigned int v30 = *(_DWORD *)(v3 + 72) - 20 * v29 + 40;
    if (*(_DWORD *)(v3 + 52) <= v30)
    {
      this = BlueFin::GlMeFrameMgr::AddBestWord((BlueFin::GlMeFrameMgr *)v3, v30, 0, 0, 0, 0, 0, 0);
      if (!this) {
        return this;
      }
      LOBYTE(v29) = BYTE4(v99) - BYTE8(v99);
      if ((DWORD1(v99) - DWORD2(v99)) >= 0x20) {
        goto LABEL_38;
      }
    }
LABEL_72:
    *(_DWORD *)(v3 + 20) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v97, v29);
    *(_DWORD *)(v3 + 24) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v90, (v92.i8[4] - v93));
    *(_DWORD *)(v3 + 16) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v69, (v71.i8[4] - v72));
    *(_DWORD *)(v3 + 32) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v83, (v85.i8[4] - v86));
    *(_DWORD *)(v3 + 36) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v76, (v78.i8[4] - v79));
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v62, (v64.i8[4] - v65));
    *(_DWORD *)(v3 + 28) = this;
    *(_DWORD *)(v3 + 68) = *(_DWORD *)(v3 + 72);
    int v4 = *((_DWORD *)a2 + 5);
    goto LABEL_73;
  }
LABEL_38:
  while (1)
  {
    unsigned int v31 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v97, 0x20u);
    unsigned int v32 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v83, 0x20u);
    __int32 v33 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v90, 0x20u);
    unsigned __int32 v34 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v76, 0x20u);
    unsigned __int8 v35 = (BlueFin::GPSFrameMgrUtils *)BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v69, 0x20u);
    int v36 = (BlueFin::GPSFrameMgrUtils *)BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v62, 0x20u);
    unsigned int v37 = v36;
    this = BlueFin::GlMeFrameMgr::AddBestWord((BlueFin::GlMeFrameMgr *)v3, *(_DWORD *)(v3 + 72) - 20 * (DWORD1(v99) - DWORD2(v99)), v35, v31, v33, v36, v32, v34);
    if (!this) {
      return this;
    }
    unsigned int v38 = *(unsigned __int8 *)(v3 + 3);
    if (v38 <= 2)
    {
      BOOL v39 = *(BlueFin::GlMeFrameAidMgr **)(v3 + 392);
      if (*((unsigned char *)v39 + 43))
      {
        if (*(_DWORD *)(v3 + 72) == *((_DWORD *)a2 + 5))
        {
          if (v38 == 2)
          {
            if (*(unsigned __int8 *)(v3 + 408) - 1 <= 0x1F)
            {
              unsigned int v44 = *(_DWORD *)(v3 + 344);
              if (BlueFin::GPSFrameMgrUtils::Parity((BlueFin::GPSFrameMgrUtils *)v44))
              {
                if ((~v44 & 3) != 0) {
                  unsigned int v45 = v44;
                }
                else {
                  unsigned int v45 = ~v44;
                }
                if ((v45 & 0x40000000) != 0) {
                  v45 ^= 0x3FFFFFC0u;
                }
                if ((v45 & 3) == 0)
                {
                  unsigned int v46 = (v45 >> 13) & 0x1FFFF;
                  if (v46 >> 6 <= 0x626
                    && v46 + 4 - 5 * ((858993460 * (unint64_t)(v46 + 4)) >> 32) + 1 == ((v45 >> 8) & 7)
                    && v46 == *(_DWORD *)(v3 + 48))
                  {
                    BlueFin::GlMeFrameAidMgr::FoundHOW(v39, *((double *)a2 + 4), DWORD1(v99) - DWORD2(v99) + 60, v46);
                  }
                }
              }
            }
          }
          else if (v38 == 1)
          {
            unsigned int v40 = *(_DWORD *)(v3 + 340);
            if (BlueFin::GPSFrameMgrUtils::Parity((BlueFin::GPSFrameMgrUtils *)v40))
            {
              unsigned int v41 = v40 >> 22 == 139 ? v40 : ~v40;
              if (v41 >> 22 == 139)
              {
                if ((v37 & 0xFFC00000) == 0x22C00000) {
                  unsigned int v42 = v37;
                }
                else {
                  unsigned int v42 = ~v37;
                }
                if (v42 >> 22 == 139)
                {
                  if ((v37 & 0xFFC00000) == 0xDD000000) {
                    int v43 = 2;
                  }
                  else {
                    int v43 = 1;
                  }
                  *(_DWORD *)(v3 + 800) = v43;
                }
                if (*(unsigned __int8 *)(v3 + 408) - 1 <= 0x1F) {
                  BlueFin::GlMeFrameAidMgr::FoundTLM(v39, *((double *)a2 + 4), DWORD1(v99) - DWORD2(v99) + 30);
                }
              }
            }
          }
        }
      }
    }
    BlueFin::GlBitBuffer::Position((uint64_t)v97, DWORD2(v99) - 2);
    BlueFin::GlBitBuffer::Position((uint64_t)v90, v93 - 2);
    BlueFin::GlBitBuffer::Position((uint64_t)v69, v72 - 2);
    BlueFin::GlBitBuffer::Position((uint64_t)v83, v86 - 2);
    BlueFin::GlBitBuffer::Position((uint64_t)v76, v79 - 2);
    BlueFin::GlBitBuffer::Position((uint64_t)v62, v65 - 2);
    LOBYTE(v29) = BYTE4(v99) - BYTE8(v99);
    if ((DWORD1(v99) - DWORD2(v99)) <= 0x1F) {
      goto LABEL_72;
    }
  }
}

uint64_t *BlueFin::GlMeFrameMgr::CopyBits(uint64_t *this, BlueFin::GlBitBuffer *a2, BlueFin::GlBitBuffer *a3, BlueFin::GlBitBuffer *a4, unsigned int *a5, unsigned int *a6)
{
  v18[0] = a4;
  v18[1] = 0;
  char v19 = 0;
  int v21 = 0;
  long long v20 = xmmword_263BB2530;
  char v22 = 0;
  v13[0] = a5;
  v13[1] = 0;
  char v14 = 0;
  int v16 = 0;
  long long v15 = xmmword_263BB2530;
  char v17 = 0;
  if (a6)
  {
    unsigned __int16 v6 = (unsigned __int16)a6;
    int32x2_t v9 = this;
    do
    {
      if ((v6 & 0xFFE0) != 0) {
        unsigned int v10 = 32;
      }
      else {
        unsigned int v10 = v6;
      }
      v6 -= v10;
      BlueFin::GlBitBuffer::PutU(v9, 0xFFFFFFFF, v10);
      int v11 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v13, v10);
      BlueFin::GlBitBuffer::PutU((uint64_t *)a2, ~v11, v10);
      unsigned int v12 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v18, v10);
      this = BlueFin::GlBitBuffer::PutU((uint64_t *)a3, v12, v10);
    }
    while (v6);
  }
  return this;
}

uint64_t BlueFin::GlMeFrameMgr::TestOverlapBits(BlueFin::GlMeFrameMgr *this, unsigned int a2, char a3, int a4)
{
  if ((a2 & 0xFFFFFFFD) != 0 && a4)
  {
    unsigned int v4 = a3 & 3 ^ (this >> 30);
    if (v4 != 3 && v4 != 0) {
      return 0;
    }
  }
  unsigned int v6 = this >> 30;
  if (a2) {
    unsigned int v6 = this & 3;
  }
  BOOL v8 = v6 == 3 || v6 == 0;
  unsigned int v9 = ((1 << a2) & 0x207) == 0 || v8;
  if (a2 <= 9) {
    return v9;
  }
  else {
    return 1;
  }
}

uint64_t BlueFin::GlMeFrameMgr::AddBestWord(BlueFin::GlMeFrameMgr *this, unsigned int a2, BlueFin::GPSFrameMgrUtils *a3, unsigned int a4, __int32 a5, BlueFin::GPSFrameMgrUtils *a6, unsigned int a7, unsigned __int32 a8)
{
  uint64_t v163 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)this != 1)
  {
    uint64_t v129 = "SYNCED == m_utStateMem.ucState";
    DeviceFaultNotify("glme_framemgr.h", 532, "GetSynced", (char)"SYNCED == m_utStateMem.ucState");
    uint64_t v130 = "glme_framemgr.h";
    int v131 = 532;
    goto LABEL_256;
  }
  char v14 = this;
  long long v15 = (char *)this + 340;
  v152[0] = (uint64_t)this + 340;
  v152[1] = 0;
  char v153 = 0;
  int v155 = 0;
  long long v154 = xmmword_263BB2920;
  char v156 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v152, 32 * *((unsigned __int8 *)this + 3));
  BOOL v16 = 0;
  if (a4 == -1) {
    BOOL v16 = BlueFin::GPSFrameMgrUtils::Parity(a3);
  }
  unsigned int v148 = a3;
  BOOL v17 = a7 == -1 && BlueFin::GPSFrameMgrUtils::Parity(a6);
  BOOL v18 = a7 == -1 || a4 == -1;
  if (v18)
  {
    uint64_t v19 = *((void *)v14 + 50);
    if (v19) {
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v19 + 32))(v19, v16 | v17, 1, (uint64_t)v14 + 408);
    }
  }
  BOOL v144 = v16;
  unsigned int v20 = *((_DWORD *)v14 + 13);
  unsigned int v21 = DWORD2(v154);
  if (v20 >= a2)
  {
LABEL_23:
    unsigned int v146 = a7;
    int v147 = a7 | a4;
    unsigned int v26 = (v20 - a2) / 0x258 + 1;
    if (v26 < (DWORD1(v154) - v21) >> 5)
    {
      signed int v27 = (DWORD1(v154) - v21) >> 5;
      do
      {
        --v27;
        BlueFin::GlBitBuffer::PutU(v152, 0x4BADC0DEu, 0x20u);
      }
      while ((int)v26 < v27);
      unsigned int v21 = DWORD2(v154);
    }
    BOOL v141 = v17;
    unsigned __int32 v142 = a8;
    unsigned int v28 = a6;
    unsigned int v29 = a2;
    int v30 = *((_DWORD *)v14 + 12);
    unsigned int v151 = v21 >> 5;
    uint64_t v31 = 1269678302;
    if (v21 >= 0x20)
    {
      BlueFin::GlBitBuffer::Position((uint64_t)v152, v21 - 32);
      uint64_t v31 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v152, 0x20u);
    }
    BOOL v32 = BlueFin::GPSFrameMgrUtils::Parity((BlueFin::GPSFrameMgrUtils *)v31);
    int v140 = BlueFin::GlMeFrameMgr::TestOverlapBits((BlueFin::GlMeFrameMgr *)v148, v151, v31, v32);
    int v149 = v32;
    char v150 = v31;
    int v33 = BlueFin::GlMeFrameMgr::TestOverlapBits(v28, v151, v31, v32);
    if (!v147 || v21 < 0x40 || (unsigned int v35 = (v30 + 4) % 5u, v35 > 2))
    {
      unsigned int v40 = (unsigned int *)v15;
      if ((v146 & a4) == 0xFFFFFFFF)
      {
        unsigned int v43 = v148;
        if (v148 == v28 || ~v148 == v28)
        {
          if (!v144) {
            unsigned int v43 = 1269678302;
          }
          goto LABEL_212;
        }
        if (v144 && v17)
        {
          v34.i32[0] = a5;
          int8x8_t v44 = vcnt_s8(v34);
          v44.i16[0] = vaddlv_u8((uint8x8_t)v44);
          unsigned int v45 = v44.i32[0];
          v44.i32[0] = v142;
          uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44);
          v46.i16[0] = vaddlv_u8(v46);
          if (v45 == v46.i32[0])
          {
            if (v140 != v33) {
              int v47 = v148;
            }
            else {
              int v47 = -1951547170;
            }
            if (v33) {
              int v48 = (int)v28;
            }
            else {
              int v48 = 1269678302;
            }
            if (v140 | v33 ^ 1) {
              unsigned int v43 = v47;
            }
            else {
              unsigned int v43 = v48;
            }
          }
          else if (v46.i32[0] >= v45)
          {
            if (v45 >= v46.i32[0]) {
              unsigned int v43 = 1269678302;
            }
            else {
              unsigned int v43 = v28;
            }
          }
          goto LABEL_212;
        }
        if (v17) {
          int v41 = (int)v28;
        }
        else {
          int v41 = 1269678302;
        }
        BOOL v42 = !v144;
      }
      else
      {
        if (v17) {
          int v41 = (int)v28;
        }
        else {
          int v41 = 1269678302;
        }
        BOOL v42 = !v144;
        unsigned int v43 = v148;
      }
      if (v42) {
        unsigned int v43 = v41;
      }
LABEL_212:
      BlueFin::GlBitBuffer::PutU(v152, v43, 0x20u);
      unsigned int v111 = DWORD2(v154);
      if (*((unsigned char *)v14 + 804)
        || 30 * ((DWORD1(v154) - DWORD2(v154)) >> 5) == (*((_DWORD *)v14 + 13) - v29) / 0x14)
      {
        if (DWORD2(v154) == 320)
        {
          uint64_t result = BlueFin::GlMeFrameMgr::SendSubFrame(v14, (BlueFin::GlBitBuffer *)v152);
          if (!result) {
            return result;
          }
          unsigned int v111 = DWORD2(v154);
        }
        *((unsigned char *)v14 + 3) = v111 >> 5;
        if ((v111 & 0x1FE0) != 0x40) {
          return 1;
        }
        unsigned int v112 = *((_DWORD *)v14 + 86);
        if (!BlueFin::GPSFrameMgrUtils::Parity((BlueFin::GPSFrameMgrUtils *)v112)) {
          return 1;
        }
        if ((~v112 & 3) != 0) {
          unsigned int v113 = v112;
        }
        else {
          unsigned int v113 = ~v112;
        }
        if ((v113 & 0x40000000) != 0) {
          v113 ^= 0x3FFFFFC0u;
        }
        uint64_t v114 = (v113 >> 13) & 0x1FFFF;
        BOOL v18 = (v113 & 3) == 0;
        unsigned int v115 = v113 >> 13;
        int v116 = (v113 >> 8) & 7;
        unsigned int v117 = (v115 >> 6) & 0x7FF;
        int v120 = v18
            && v117 < 0x627
            && (int)v114 + 4 - 5 * ((858993460 * (unint64_t)(v114 + 4)) >> 32) + 1 == v116;
        int v121 = *((_DWORD *)v14 + 12);
        if (!*((unsigned char *)v14 + 1))
        {
          unint64_t v122 = (BlueFin::GPSFrameMgrUtils *)*v40;
          if (BlueFin::GPSFrameMgrUtils::Parity(v122))
          {
            if (v122 >> 22 == 139) {
              unsigned int v124 = v122;
            }
            else {
              unsigned int v124 = ~v122;
            }
            BOOL v18 = v124 >> 22 == 139;
            char v125 = v120 ^ 1;
            if (!v18) {
              char v125 = 1;
            }
            if (v125)
            {
              *(void *)((char *)v14 + 412) = 0xFFFF0000FFFFLL;
              *((void *)v14 + 87) = 0;
              *(_OWORD *)((char *)v14 + 424) = 0u;
              *(_OWORD *)((char *)v14 + 440) = 0u;
              *(_OWORD *)((char *)v14 + 456) = 0u;
              *(_OWORD *)((char *)v14 + 472) = 0u;
              *(_OWORD *)((char *)v14 + 488) = 0u;
              *(_OWORD *)((char *)v14 + 504) = 0u;
              *(_OWORD *)((char *)v14 + 520) = 0u;
              *(_OWORD *)((char *)v14 + 536) = 0u;
              *(_OWORD *)((char *)v14 + 552) = 0u;
              *(_OWORD *)((char *)v14 + 568) = 0u;
              *(_OWORD *)((char *)v14 + 584) = 0u;
              *(_OWORD *)((char *)v14 + 600) = 0u;
              *(_OWORD *)((char *)v14 + 616) = 0u;
              *(_OWORD *)((char *)v14 + 632) = 0u;
              *(_OWORD *)((char *)v14 + 648) = 0u;
              *(_OWORD *)((char *)v14 + 664) = 0u;
              *(_OWORD *)((char *)v14 + 680) = 0u;
              *(void *)&long long v128 = 0xF0F0F0F0F0F0F0F0;
              *((void *)&v128 + 1) = 0xF0F0F0F0F0F0F0F0;
              *((_OWORD *)v14 + 48) = v128;
              *((_OWORD *)v14 + 49) = v128;
              *((_OWORD *)v14 + 46) = v128;
              *((_OWORD *)v14 + 47) = v128;
              *((_OWORD *)v14 + 44) = v128;
              *((_OWORD *)v14 + 45) = v128;
              BlueFin::GlMeFrameMgr::SetState((uint64_t)v14, 0);
              return 0;
            }
            if (v114 != v121)
            {
              *((_DWORD *)v14 + 12) = v114;
              return 1;
            }
            unsigned int v126 = ++*((unsigned char *)v14 + 2);
            *((_DWORD *)v14 + 16) = v29;
            if (v126 >= 2)
            {
              *((unsigned char *)v14 + 1) = 1;
              *((_DWORD *)v14 + 3) = 0;
              LODWORD(v123) = *((_DWORD *)v14 + 14);
              BlueFin::GlMeWinMgr::SetTMDecodeInfoFromGps(*((void *)v14 + 48), (unsigned __int8 *)v14 + 408, (double)v123, v114, 1);
            }
          }
        }
        if (v114 == v121) {
          int v127 = v120;
        }
        else {
          int v127 = 0;
        }
        if (v127 == 1 && *((unsigned char *)v14 + 1) == 1)
        {
          *((_DWORD *)v14 + 15) = v29;
          *((unsigned char *)v14 + 6) = 0;
        }
        return 1;
      }
      uint64_t v129 = "(((GlIntU32)(30 * (otBitBuffer.Remaining() >> 5))) == Epochs2Bits(pstSynced->ulTowEpochCnt - ulEpochCnt))";
      DeviceFaultNotify("glme_framemgr.cpp", 1384, "AddBestWord", (char)"(((GlIntU32)(30 * (otBitBuffer.Remaining() >> 5))) == Epochs2Bits(pstSynced->ulTowEpochCnt - ulEpochCnt))");
      uint64_t v130 = "glme_framemgr.cpp";
      int v131 = 1384;
LABEL_256:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v130, v131, v129);
    }
    int v36 = *((_DWORD *)v14 + 12);
    int v37 = *((_DWORD *)v14 + 105);
    if (v37 == -1)
    {
LABEL_61:
      int v135 = v33;
      float v137 = (unsigned int *)v15;
      unsigned int v138 = v29;
      *((_DWORD *)v14 + 105) = v36;
      unsigned int v133 = (v30 + 4) % 5u;
      double v139 = v14;
      double v132 = (char *)v14 + 424;
      v157[0] = (uint64_t)v14 + 424;
      v157[1] = 0;
      char v158 = 0;
      int v160 = 0;
      long long v159 = xmmword_263BB2930;
      char v161 = 0;
      int v134 = v151 + 8 * v35 - 2;
      BlueFin::GlBitBuffer::Position((uint64_t)v157, 93 * v134);
      uint64_t v50 = 0;
      LODWORD(v51) = 0;
      unsigned int v52 = v148 ^ (v148 >> 1);
      int v136 = (int)v28;
      unsigned int v53 = v28 ^ (v28 >> 1);
      unsigned int v143 = a4;
      unsigned int v54 = a4 & (a4 >> 1);
      unsigned __int32 v55 = a5;
      unsigned int v56 = v146 & (v146 >> 1);
      unsigned int v57 = v142 & (v142 >> 1);
      do
      {
        int v58 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v157, 3u);
        if ((v58 & 0xFFFFFFFC) == 4) {
          int v59 = -8;
        }
        else {
          int v59 = 0;
        }
        int v60 = v59 + v58;
        if (v54) {
          v60 += (2 * (v52 & 1) - 1) << (v55 & 1);
        }
        if (v56) {
          v60 += (2 * (v53 & 1) - 1) << (v57 & 1);
        }
        if (v60 >= 3) {
          int v60 = 3;
        }
        if (v60 <= -3) {
          int v61 = -3;
        }
        else {
          int v61 = v60;
        }
        BlueFin::GlBitBuffer::Position((uint64_t)v157, DWORD2(v159) - 3);
        BlueFin::GlBitBuffer::PutU(v157, v61 + 8, 3u);
        *((_DWORD *)&v162[8] + v50 + 1) = v61;
        uint64_t v62 = v50 + 1;
        v52 >>= 1;
        v53 >>= 1;
        if (v61 > 0) {
          unint64_t v51 = ~(v51 ^ (-2 << v50));
        }
        else {
          unint64_t v51 = v51;
        }
        v54 >>= 1;
        v56 >>= 1;
        ++v50;
        v55 >>= 1;
        v57 >>= 1;
      }
      while (v62 != 31);
      int v63 = 0;
      v64.i32[1] = 0;
      int v65 = 1269678302;
      memset(v162, 0, 124);
      unsigned int v66 = v143;
      do
      {
        uint64_t v67 = 0;
        char v68 = 0;
        int v69 = 0;
        do
        {
          int v70 = *((_DWORD *)&v162[8] + v67 + 1);
          if (v70 >= -v63 && v70 <= v63)
          {
            int v72 = (2 << v67) - 1;
            v68 |= *((_DWORD *)v162 + v69) != v72;
            *((_DWORD *)v162 + v69++) = v72;
          }
          ++v67;
        }
        while (v67 != 31);
        if ((v63 == 0) | v68 & 1)
        {
          if (v69 > 6) {
            break;
          }
          unsigned int v73 = 0;
          unsigned __int8 v74 = 0;
          do
          {
            char v75 = (BlueFin::GPSFrameMgrUtils *)v51;
            if (v69 >= 1)
            {
              uint64_t v76 = 0;
              char v75 = (BlueFin::GPSFrameMgrUtils *)v51;
              do
              {
                if (((unint64_t)v73 >> v76)) {
                  char v75 = (BlueFin::GPSFrameMgrUtils *)(*((_DWORD *)v162 + v76) ^ v75);
                }
                ++v76;
              }
              while (v69 != v76);
            }
            if (BlueFin::GlMeFrameMgr::TestOverlapBits(v75, v151, v150, v149))
            {
              BOOL v77 = BlueFin::GPSFrameMgrUtils::Parity(v75);
              if (v77) {
                int v65 = (int)v75;
              }
              if (v77 & v74)
              {
                int v65 = 1269678302;
                unsigned int v66 = v143;
                goto LABEL_105;
              }
              v74 |= v77;
            }
            ++v73;
          }
          while (!(v73 >> v69));
          unsigned int v66 = v143;
          if (v74) {
            break;
          }
        }
        ++v63;
      }
      while (v63 != 3);
LABEL_105:
      v64.i32[0] = a5;
      int8x8_t v78 = vcnt_s8(v64);
      v78.i16[0] = vaddlv_u8((uint8x8_t)v78);
      unsigned int v79 = v78.i32[0];
      v78.i32[0] = v142;
      uint8x8_t v80 = (uint8x8_t)vcnt_s8(v78);
      v80.i16[0] = vaddlv_u8(v80);
      if (v79 < v80.i32[0]) {
        int v81 = v80.i32[0] - v79;
      }
      else {
        int v81 = v79 - v80.i32[0];
      }
      int v82 = v148;
      BOOL v84 = v148 == v136 || ~v148 == v136;
      int v85 = v144 & v140;
      if (v66 != -1) {
        int v85 = 0;
      }
      int v86 = v141 & v135;
      if (v146 != -1) {
        int v86 = 0;
      }
      char v14 = v139;
      unsigned int v29 = v138;
      unsigned int v40 = v137;
      if (v85 == 1 && v86 && !v84 && v81 < 16) {
        goto LABEL_122;
      }
      if (v79 >= v80.i32[0]) {
        char v94 = v85;
      }
      else {
        char v94 = 0;
      }
      if (v94)
      {
        unsigned int v95 = v79;
      }
      else
      {
        BOOL v97 = v79 <= v80.i32[0];
        char v98 = v85 | v86;
        BOOL v99 = v85 == 0;
        if (v85) {
          unsigned int v100 = v148;
        }
        else {
          unsigned int v100 = v136;
        }
        if (v99) {
          unsigned int v95 = v80.i32[0];
        }
        else {
          unsigned int v95 = v79;
        }
        if ((v86 & v97) != 0) {
          int v82 = v136;
        }
        else {
          int v82 = v100;
        }
        if ((v86 & v97) != 0) {
          unsigned int v95 = v80.i32[0];
        }
        if ((v98 & 1) == 0)
        {
LABEL_122:
          int v87 = (_OWORD *)((char *)v139 + 704);
          int v88 = (int *)((char *)v139 + 4 * v134 + 704);
          int v89 = *v88;
          int v90 = ~*v88;
          goto LABEL_123;
        }
      }
      int v87 = (_OWORD *)((char *)v139 + 704);
      int v88 = (int *)((char *)v139 + 4 * v134 + 704);
      int v89 = *v88;
      int v90 = ~*v88;
      if (v82 != -1951547170 && v82 != 1269678302)
      {
        if (v89 == v82 || v82 == v90) {
          BOOL v84 = 1;
        }
        if (v95 > 0x18) {
          BOOL v84 = 1;
        }
        if (v82 != ~v65 && v65 != v82 || v65 == -1951547170 || v65 == 1269678302) {
          int v105 = 1269678302;
        }
        else {
          int v105 = v82;
        }
        if (v84) {
          int v106 = v82;
        }
        else {
          int v106 = v105;
        }
        if (v106 != 1269678302)
        {
          int v65 = v106;
          unsigned int v96 = v133;
LABEL_189:
          int *v88 = v65;
          int v93 = v65;
LABEL_190:
          if (v147 == -1) {
            int v107 = v93;
          }
          else {
            int v107 = 1269678302;
          }
          unsigned int v43 = v107;
          if (v151 == byte_263BB2950[v96])
          {
            unsigned int v43 = 1269678302;
            if (v107 != 1269678302)
            {
              int v108 = ((v107 ^ ((2 * v107) >> 31)) >> 22);
              int v109 = *((_DWORD *)v139 + 103);
              if (v108 != v109)
              {
                if (v69 || v79 <= 0x1E && v80.i32[0] <= 0x1Eu && *((_DWORD *)v139 + 104) != v108)
                {
                  if (v109 == 0xFFFF) {
                    int v93 = v107;
                  }
                  else {
                    int v93 = 1269678302;
                  }
                }
                else
                {
                  if (v109 != 0xFFFF)
                  {
                    *((void *)v132 + 34) = 0;
                    *((_OWORD *)v132 + 15) = 0u;
                    *((_OWORD *)v132 + 16) = 0u;
                    *((_OWORD *)v132 + 13) = 0u;
                    *((_OWORD *)v132 + 14) = 0u;
                    *((_OWORD *)v132 + 11) = 0u;
                    *((_OWORD *)v132 + 12) = 0u;
                    *((_OWORD *)v132 + 9) = 0u;
                    *((_OWORD *)v132 + 10) = 0u;
                    *((_OWORD *)v132 + 7) = 0u;
                    *((_OWORD *)v132 + 8) = 0u;
                    *((_OWORD *)v132 + 5) = 0u;
                    *((_OWORD *)v132 + 6) = 0u;
                    *((_OWORD *)v132 + 3) = 0u;
                    *((_OWORD *)v132 + 4) = 0u;
                    *((_OWORD *)v132 + 1) = 0u;
                    *((_OWORD *)v132 + 2) = 0u;
                    *(_OWORD *)double v132 = 0u;
                    *(void *)&long long v110 = 0xF0F0F0F0F0F0F0F0;
                    *((void *)&v110 + 1) = 0xF0F0F0F0F0F0F0F0;
                    v87[4] = v110;
                    v87[5] = v110;
                    v87[2] = v110;
                    int v87[3] = v110;
                    *int v87 = v110;
                    v87[1] = v110;
                  }
                  *((_DWORD *)v139 + 103) = v108;
                  int v108 = 0xFFFF;
                }
                *((_DWORD *)v139 + 104) = v108;
              }
              unsigned int v43 = v93;
            }
          }
          goto LABEL_212;
        }
        unsigned int v96 = v133;
        int *v88 = v82;
LABEL_181:
        int v93 = 1269678302;
        goto LABEL_190;
      }
LABEL_123:
      if (v69 >= 3 && v89 != v65 && v65 != v90)
      {
        unsigned int v96 = v133;
        if (v65 != -1951547170)
        {
          int v93 = 1269678302;
          if (v65 != 1269678302) {
            int *v88 = v65;
          }
          goto LABEL_190;
        }
        goto LABEL_181;
      }
      unsigned int v96 = v133;
      if (v65 != -1951547170)
      {
        int v93 = 1269678302;
        if (v65 == 1269678302) {
          goto LABEL_190;
        }
        goto LABEL_189;
      }
      goto LABEL_181;
    }
    if (v36)
    {
      unsigned int v38 = (v36 + 1199) / 0x4B0u;
      if (v37)
      {
LABEL_35:
        unsigned int v39 = (v37 + 1199) / 0x4B0u;
        goto LABEL_59;
      }
    }
    else
    {
      unsigned int v38 = 84;
      if (v37) {
        goto LABEL_35;
      }
    }
    unsigned int v39 = 84;
LABEL_59:
    if (v38 != v39)
    {
      *((void *)v14 + 87) = 0;
      *(_OWORD *)((char *)v14 + 664) = 0u;
      *(_OWORD *)((char *)v14 + 680) = 0u;
      *(_OWORD *)((char *)v14 + 632) = 0u;
      *(_OWORD *)((char *)v14 + 648) = 0u;
      *(_OWORD *)((char *)v14 + 600) = 0u;
      *(_OWORD *)((char *)v14 + 616) = 0u;
      *(_OWORD *)((char *)v14 + 568) = 0u;
      *(_OWORD *)((char *)v14 + 584) = 0u;
      *(_OWORD *)((char *)v14 + 536) = 0u;
      *(_OWORD *)((char *)v14 + 552) = 0u;
      *(_OWORD *)((char *)v14 + 504) = 0u;
      *(_OWORD *)((char *)v14 + 520) = 0u;
      *(_OWORD *)((char *)v14 + 472) = 0u;
      *(_OWORD *)((char *)v14 + 488) = 0u;
      *(_OWORD *)((char *)v14 + 440) = 0u;
      *(_OWORD *)((char *)v14 + 456) = 0u;
      *(_OWORD *)((char *)v14 + 424) = 0u;
      *(void *)&long long v49 = 0xF0F0F0F0F0F0F0F0;
      *((void *)&v49 + 1) = 0xF0F0F0F0F0F0F0F0;
      *((_OWORD *)v14 + 48) = v49;
      *((_OWORD *)v14 + 49) = v49;
      *((_OWORD *)v14 + 46) = v49;
      *((_OWORD *)v14 + 47) = v49;
      *((_OWORD *)v14 + 44) = v49;
      *((_OWORD *)v14 + 45) = v49;
      *(void *)((char *)v14 + 412) = 0xFFFF0000FFFFLL;
    }
    goto LABEL_61;
  }
  if (!DWORD2(v154))
  {
LABEL_20:
    unsigned int v23 = (a2 - v20 + 5999) / 0x1770;
    unsigned int v24 = v23 + *((_DWORD *)v14 + 12);
    int v25 = 6000 * v23;
    if (v24 >> 6 >= 0x627) {
      v24 %= 0x189C0u;
    }
    v20 += v25;
    *((_DWORD *)v14 + 12) = v24;
    *((_DWORD *)v14 + 13) = v20;
    *((_DWORD *)v14 + 14) += v25;
    goto LABEL_23;
  }
  while (DWORD1(v154) != DWORD2(v154))
    BlueFin::GlBitBuffer::PutU(v152, 0x4BADC0DEu, 0x20u);
  uint64_t result = BlueFin::GlMeFrameMgr::SendSubFrame(v14, (BlueFin::GlBitBuffer *)v152);
  if (result)
  {
    unsigned int v20 = *((_DWORD *)v14 + 13);
    unsigned int v21 = DWORD2(v154);
    goto LABEL_20;
  }
  return result;
}

BOOL BlueFin::GlMeFrameMgr::VerifyTow(BlueFin::GlMeFrameMgr *this, double a2)
{
  if (*(unsigned char *)this != 1)
  {
    DeviceFaultNotify("glme_framemgr.h", 532, "GetSynced", (char)"SYNCED == m_utStateMem.ucState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_framemgr.h", 532, "SYNCED == m_utStateMem.ucState");
  }
  *((unsigned char *)this + 1) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 15) = *((_DWORD *)this + 16);
  *((unsigned char *)this + 6) = 0;
  int v2 = (unsigned __int8 *)this + 408;
  LODWORD(a2) = *((_DWORD *)this + 14);
  double v3 = (double)*(unint64_t *)&a2;
  uint64_t v4 = *((unsigned int *)this + 12);
  uint64_t v5 = *((void *)this + 48);

  return BlueFin::GlMeWinMgr::SetTMDecodeInfoFromGps(v5, v2, v3, v4, 1);
}

uint64_t BlueFin::GlMeFrameMgr::SendSubFrame(BlueFin::GlMeFrameMgr *this, BlueFin::GlBitBuffer *a2)
{
  if (*(unsigned char *)this != 1)
  {
    DeviceFaultNotify("glme_framemgr.h", 532, "GetSynced", (char)"SYNCED == m_utStateMem.ucState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_framemgr.h", 532, "SYNCED == m_utStateMem.ucState");
  }
  int v2 = a2;
  uint64_t v3 = 0;
  char v4 = 0;
  unsigned int v5 = 0;
  BOOL v6 = 0;
  char v7 = 0;
  int v70 = &unk_270EBA3B8;
  __int16 v71 = 0;
  int v72 = -1;
  memset(v73, 0, sizeof(v73));
  *((void *)a2 + 3) = *((unsigned int *)a2 + 7);
  *((unsigned char *)a2 + 40) = 0;
  char v8 = 1;
  do
  {
    unsigned int v9 = v2;
    unsigned int v10 = (BlueFin::GlMeFrameMgr *)BlueFin::GlBitBuffer::GetU(v2, 0x20u);
    int v11 = v10;
    if (v10 == -1951547170 || v10 == 1269678302)
    {
      char v8 = 0;
    }
    else
    {
      if (!BlueFin::GlMeFrameMgr::TestOverlapBits(v10, v3, v7, v6))
      {
LABEL_33:
        char v8 = 0;
        LOBYTE(v11) = -34;
        unsigned __int32 v13 = -1951547170;
        goto LABEL_38;
      }
      if ((v7 & 3) == v11 >> 30) {
        int v11 = (BlueFin::GPSFrameMgrUtils *)v11;
      }
      else {
        int v11 = (BlueFin::GPSFrameMgrUtils *)~v11;
      }
      if (((v3 & 0x7FFFFFF7) != 1 || (v11 & 3) != 0) && (v3 != 2 || v11 >> 30))
      {
        BOOL v16 = (v3 & 0x7FFFFFF7) != 1 || (v11 & 3) == 0;
        BOOL v17 = v3 != 2 || (v11 & 0xC0000000) == 0;
        if (v17 && v16) {
          goto LABEL_9;
        }
        if (v8) {
          goto LABEL_33;
        }
        int v11 = (BlueFin::GPSFrameMgrUtils *)~v11;
      }
      char v8 = 1;
    }
LABEL_9:
    if (v11 == -1951547170 || v11 == 1269678302)
    {
      unsigned __int32 v13 = v11;
    }
    else
    {
      if (BlueFin::GPSFrameMgrUtils::Parity(v11)) {
        unsigned int v18 = 0;
      }
      else {
        unsigned int v18 = 0x80000000;
      }
      unsigned __int32 v13 = v18 & 0xC0000000 | (v11 ^ ((2 * (int)v11) >> 31)) & 0x3FFFFFFF;
    }
LABEL_38:
    BOOL v6 = v13 >> 30 == 0;
    v73[0].i32[v3 + 1] = v13;
    v4 |= (v13 & 0x80000000) == 0;
    if (v13 >> 30 == 2) {
      ++v5;
    }
    ++v3;
    char v7 = (char)v11;
    int v2 = v9;
  }
  while (v3 != 10);
  int v19 = *((unsigned __int8 *)this + 1);
  if (*((unsigned char *)this + 1))
  {
    BOOL v20 = 0;
  }
  else
  {
    uint64_t v21 = 0;
    do
    {
      BOOL v20 = (v73[0].i32[v21 + 3] & 0xFFC00000) == 583008256;
      BOOL v22 = (v73[0].i32[v21 + 3] & 0xFFC00000) == 0x22C00000 || v21 == 7;
      ++v21;
    }
    while (!v22);
  }
  unsigned int v23 = *((_DWORD *)this + 3);
  int32x4_t v24 = (int32x4_t)v5;
  int32x4_t v25 = (int32x4_t)xmmword_263BB2940;
  int32x4_t v26 = (int32x4_t)xmmword_263BB1CB0;
  uint32x4_t v27 = (uint32x4_t)vdupq_n_s32(v23);
  int v28 = 8;
  v29.i64[0] = 0xF0000000FLL;
  v29.i64[1] = 0xF0000000FLL;
  v30.i64[0] = 0x100000001;
  v30.i64[1] = 0x100000001;
  v31.i64[0] = 0x400000004;
  v31.i64[1] = 0x400000004;
  do
  {
    int32x4_t v32 = (int32x4_t)vshlq_u32(v27, (uint32x4_t)vnegq_s32(vshlq_n_s32(v26, 2uLL)));
    int32x4_t v24 = vaddq_s32((int32x4_t)vqsubq_u32((uint32x4_t)vandq_s8((int8x16_t)v32, (int8x16_t)v29), v30), v24);
    int32x4_t v25 = vsubq_s32(v25, vtstq_s32(v32, v29));
    int32x4_t v26 = vaddq_s32(v26, v31);
    v28 -= 4;
  }
  while (v28);
  unsigned int v33 = vaddvq_s32(v24);
  unsigned int v34 = vaddvq_s32(v25);
  *((_DWORD *)this + 3) = (v5 + 1) | (16 * v23);
  if (!v19 && (v34 >= 3 ? (BOOL v35 = 9 * v34 >= v33) : (BOOL v35 = 1), !v35)
    || (v19 == 1 ? (BOOL v36 = 10 * v34 >= v33) : (BOOL v36 = 1), !v36 ? (v37 = 1) : (v37 = v20), v37 == 1))
  {
    *(void *)((char *)this + 412) = 0xFFFF0000FFFFLL;
    *((void *)this + 87) = 0;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *(_OWORD *)((char *)this + 456) = 0u;
    *(_OWORD *)((char *)this + 472) = 0u;
    *(_OWORD *)((char *)this + 488) = 0u;
    *(_OWORD *)((char *)this + 504) = 0u;
    *(_OWORD *)((char *)this + 520) = 0u;
    *(_OWORD *)((char *)this + 536) = 0u;
    *(_OWORD *)((char *)this + 552) = 0u;
    *(_OWORD *)((char *)this + 568) = 0u;
    *(_OWORD *)((char *)this + 584) = 0u;
    *(_OWORD *)((char *)this + 600) = 0u;
    *(_OWORD *)((char *)this + 616) = 0u;
    *(_OWORD *)((char *)this + 632) = 0u;
    *(_OWORD *)((char *)this + 648) = 0u;
    *(_OWORD *)((char *)this + 664) = 0u;
    *(_OWORD *)((char *)this + 680) = 0u;
    *(void *)&long long v38 = 0xF0F0F0F0F0F0F0F0;
    *((void *)&v38 + 1) = 0xF0F0F0F0F0F0F0F0;
    *((_OWORD *)this + 48) = v38;
    *((_OWORD *)this + 49) = v38;
    *((_OWORD *)this + 46) = v38;
    *((_OWORD *)this + 47) = v38;
    *((_OWORD *)this + 44) = v38;
    *((_OWORD *)this + 45) = v38;
    BlueFin::GlMeFrameMgr::SetState((uint64_t)this, 0);
    return 0;
  }
  if (v4)
  {
    LOBYTE(v71) = *((unsigned char *)this + 408);
    int v40 = *((_DWORD *)this + 12);
    __int32 v41 = *((_DWORD *)this + 14);
    v73[0].i32[0] = 6 * v40;
    v73[2].i32[3] = v41;
    HIBYTE(v71) = (v40 + 4) % 5u + 1;
    unsigned __int32 v42 = v73[0].u32[1];
    if (!((unsigned __int32)v73[0].i32[1] >> 30))
    {
      *((_DWORD *)this + 19) = v73[0].i32[1];
      char v43 = 10;
      goto LABEL_73;
    }
    char v44 = *((unsigned char *)this + 7);
    if (v44)
    {
      unsigned __int32 v42 = *((_DWORD *)this + 19);
      v73[0].i32[1] = v42;
      char v43 = v44 - 1;
LABEL_73:
      *((unsigned char *)this + 7) = v43;
    }
    int v45 = v73[0].i32[2];
    if (!((unsigned __int32)v73[0].i32[2] >> 30))
    {
      *((_DWORD *)this + 20) = v73[0].i32[2];
      char v46 = 10;
      goto LABEL_81;
    }
    char v47 = *((unsigned char *)this + 8);
    if (v47)
    {
      uint64_t v48 = 0;
      int v49 = (v42 << 30) | (v40 << 13);
      int v50 = *((_DWORD *)this + 20) & 0x1800 | (((v40 + 4) % 5u + 1) << 8) | v49;
      if ((v49 & 0x40000000) != 0) {
        v50 ^= 0xC0000000;
      }
      do
      {
        unsigned int v51 = dword_263BB2954[v48] & v50 ^ ((dword_263BB2954[v48] & v50) >> 16);
        unsigned int v52 = v51 ^ (v51 >> 8) ^ ((v51 ^ (v51 >> 8)) >> 4);
        v50 |= (((v52 ^ (v52 >> 2)) ^ ((v52 ^ (v52 >> 2)) >> 1)) & 1) << byte_263BB296C[v48++];
      }
      while (v48 != 6);
      int v45 = v50 & 0x3FFFFFFF;
      v73[0].i32[2] = v50 & 0x3FFFFFFF;
      char v46 = v47 - 1;
LABEL_81:
      *((unsigned char *)this + 8) = v46;
    }
    v53.i64[0] = 0xC0000000C0000000;
    v53.i64[1] = 0xC0000000C0000000;
    v54.i64[0] = 0x100000001;
    v54.i64[1] = 0x100000001;
    if (!vaddvq_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(*(uint32x4_t *)((char *)v73 + 12), v53), v54), (int32x4_t)vcgtq_u32(*(uint32x4_t *)((char *)&v73[1] + 12), v53))))
    {
      if (v42 >> 22 == 139) {
        unsigned int v55 = v42;
      }
      else {
        unsigned int v55 = ~v42;
      }
      if (v55 >> 22 != 139) {
        v73[0].i32[1] = v42 | 0x80000000;
      }
      if ((~v45 & 3) != 0) {
        unsigned int v56 = v45;
      }
      else {
        unsigned int v56 = ~v45;
      }
      if ((v56 & 0x40000000) != 0) {
        v56 ^= 0x3FFFFFC0u;
      }
      if ((v56 & 3) != 0
        || ((unsigned int v57 = (v56 >> 13) & 0x1FFFF, v58 = (v56 >> 8) & 7, v57 >> 6 <= 0x626)
          ? (BOOL v59 = v57 + 4 - 5 * ((858993460 * (unint64_t)(v57 + 4)) >> 32) + 1 == v58)
          : (BOOL v59 = 0),
            v59 ? (BOOL v60 = v57 == v40) : (BOOL v60 = 0),
            !v60))
      {
        v73[0].i32[2] = v45 | 0x80000000;
      }
      (*(void (**)(void, void **))(**(void **)(*((void *)this + 49) + 48) + 32))(*(void *)(*((void *)this + 49) + 48), &v70);
      if (HIBYTE(v71) <= 3u)
      {
        v65[0] = (uint64_t)this + 424;
        v65[1] = 0;
        char v66 = 0;
        int v68 = 0;
        long long v67 = xmmword_263BB2930;
        char v69 = 0;
        BlueFin::GlBitBuffer::Position((uint64_t)v65, 744 * HIBYTE(v71) - 744);
        int v61 = 248;
        do
        {
          BlueFin::GlBitBuffer::PutU(v65, 8u, 3u);
          --v61;
        }
        while (v61);
        uint64_t v62 = (char *)this + 32 * HIBYTE(v71);
        *(void *)&long long v63 = 0xF0F0F0F0F0F0F0F0;
        *((void *)&v63 + 1) = 0xF0F0F0F0F0F0F0F0;
        *((_OWORD *)v62 + 42) = v63;
        *((_OWORD *)v62 + 43) = v63;
      }
    }
  }
  *((_DWORD *)v9 + 9) = 0;
  *((void *)v9 + 3) = *((unsigned int *)v9 + 5);
  *((unsigned char *)v9 + 40) = 0;
  return 1;
}

unsigned __int16 *BlueFin::GlMeFrameMgr::GetNextSearchWord(unsigned __int16 *result, _DWORD *a2, _DWORD *a3, unsigned int *a4, unsigned int *a5, unsigned char *a6)
{
  unsigned int v8 = result[16];
  unsigned int v9 = v8 >> 5;
  unsigned int v10 = v8 & 0x1F;
  if (v10 <= 2) {
    __int16 v11 = 0;
  }
  else {
    __int16 v11 = v10 - 3;
  }
  if ((result[18] & 0x1Fu) <= 2) {
    __int16 v12 = 0;
  }
  else {
    __int16 v12 = 3 - (result[18] & 0x1F);
  }
  if ((unsigned __int16)(v12 + v11 + 29 * (v9 - (result[18] >> 5))) > 0x1Fu)
  {
    uint64_t v14 = (uint64_t)result;
    long long v15 = (BlueFin::GlMeFrameSearchBuffer *)(result + 4);
    unsigned int v25 = 0;
    *a2 = BlueFin::GlMeFrameSearchBuffer::GetU((BlueFin::GlMeFrameSearchBuffer *)(result + 4), 0x20u, a4, a5, &v25);
    *a4 &= v25;
    *a6 = 1;
    unsigned int v16 = *(unsigned __int16 *)(v14 + 32);
    unsigned int v17 = v16 >> 5;
    unsigned int v18 = v16 & 0x1F;
    if (v18 <= 2) {
      __int16 v19 = 0;
    }
    else {
      __int16 v19 = v18 - 3;
    }
    if ((*(_WORD *)(v14 + 36) & 0x1Fu) <= 2) {
      __int16 v20 = 0;
    }
    else {
      __int16 v20 = 3 - (*(_WORD *)(v14 + 36) & 0x1F);
    }
    *a3 = *(_DWORD *)v14 - 20 * (unsigned __int16)(v20 + v19 + 29 * (v17 - (*(_WORD *)(v14 + 36) >> 5)));
    unsigned int v21 = *(unsigned __int16 *)(v14 + 36);
    unsigned int v22 = v21 >> 5;
    unsigned int v23 = v21 & 0x1F;
    if (v23 <= 2) {
      __int16 v24 = 0;
    }
    else {
      __int16 v24 = v23 - 3;
    }
    return (unsigned __int16 *)BlueFin::GlMeFrameSearchBuffer::Position(v15, v24 + 29 * (unsigned __int16)v22 - 2);
  }
  else
  {
    *a2 = 1269678302;
    *a4 = 0;
    *a5 = 0;
    *a6 = 0;
  }
  return result;
}

uint64_t BlueFin::GlMeFrameMgr::AppendSyncedSearchBits(uint64_t a1, uint64_t a2, uint64_t a3, BlueFin::GlBitBuffer *a4, int a5, uint64_t a6, int a7)
{
  if (*(unsigned char *)a1 != 1)
  {
    DeviceFaultNotify("glme_framemgr.h", 532, "GetSynced", (char)"SYNCED == m_utStateMem.ucState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_framemgr.h", 532, "SYNCED == m_utStateMem.ucState");
  }
  uint64_t v14 = (BlueFin::GlMeFrameSearchBuffer *)(a6 + 8);
  unsigned int v15 = *(unsigned __int16 *)(a6 + 32);
  unsigned int v16 = v15 >> 5;
  unsigned int v17 = v15 & 0x1F;
  if (v17 <= 2) {
    __int16 v18 = 0;
  }
  else {
    __int16 v18 = v17 - 3;
  }
  if ((*(_WORD *)(a6 + 36) & 0x1Fu) <= 2) {
    __int16 v19 = 0;
  }
  else {
    __int16 v19 = 3 - (*(_WORD *)(a6 + 36) & 0x1F);
  }
  unsigned int v20 = *(_DWORD *)a6 - 20 * (unsigned __int16)(v19 + v18 + 29 * (v16 - (*(_WORD *)(a6 + 36) >> 5)));
  BlueFin::GlMeFrameSearchBuffer::Position((BlueFin::GlMeFrameSearchBuffer *)(a6 + 8), v18 + 29 * v16);
  unsigned int v21 = *(unsigned __int16 *)(a6 + 28);
  unsigned int v22 = v21 >> 5;
  unsigned int v23 = v21 & 0x1F;
  if (v23 <= 2) {
    __int16 v24 = 0;
  }
  else {
    __int16 v24 = v23 - 3;
  }
  unsigned int v25 = BlueFin::GlMeFrameSearchBuffer::Logical2RealPos((BlueFin::GlMeFrameSearchBuffer *)(unsigned __int16)(v24 + 29 * v22));
  BOOL v26 = (v25 & 0x1C) != 0 || *(_DWORD *)(a6 + 28) >= v25;
  if (v26) {
    unsigned int v27 = v25;
  }
  else {
    unsigned int v27 = v25 & 0xFFE0;
  }
  BlueFin::GlBitBuffer::Limit((uint64_t)v14, v27);
  BlueFin::GlMeFrameMgr::AppendSearchBits(a2, a3, a4, a5, a6, a7);
  LOWORD(v28) = 0;
  int v29 = *(_DWORD *)(a6 + 36);
  *(_DWORD *)(a6 + 32) = v29;
  *(_DWORD *)(a6 + 36) = 0;
  *(unsigned char *)(a6 + 48) = 0;
  unsigned int v30 = *(_DWORD *)a6;
  __int16 v31 = (unsigned __int16)v29 >> 5;
  unsigned int v32 = v29 & 0x1F;
  BOOL v33 = v32 > 2;
  __int16 v34 = v32 - 3;
  if (!v33) {
    __int16 v34 = 0;
  }
  unsigned __int16 v35 = v34 + 29 * v31;
  unsigned int v36 = v30 - 20 * v35;
  BOOL v26 = v20 >= v36;
  unsigned int v37 = v20 - v36;
  if (v37 != 0 && v26) {
    unsigned int v28 = v37 / 0x14;
  }
  unsigned int v38 = (unsigned __int16)(v35 - v28);
  unsigned int v39 = 20 * v38 - v30;
  if (20 * v38 < v30) {
    unsigned int v39 = 0;
  }
  unsigned int v40 = v30 - 20 * v38;
  unsigned int v41 = (*(_DWORD *)(a1 + 52) + 560) % 0x258u + 600 * ((v40 + v39) / 0x258);
  if (v41 >= v40 + v39) {
    unsigned int v42 = (*(_DWORD *)(a1 + 52) + 560) % 0x258u + 600 * ((v40 + v39) / 0x258);
  }
  else {
    unsigned int v42 = v41 + 600;
  }
  unsigned int v43 = (v42 - v40) / 0x14;
  if (v38 < v43) {
    LOWORD(v43) = v38;
  }

  return BlueFin::GlMeFrameSearchBuffer::Position(v14, (unsigned __int16)v28 + (unsigned __int16)v43);
}

BlueFin::GlMeGalileoINavDecoder *BlueFin::GlMeGalileoINavDecoder::GlMeGalileoINavDecoder(BlueFin::GlMeGalileoINavDecoder *this, BlueFin::GlPeIf *a2, BlueFin::GlMeWinMgr *a3)
{
  *(_DWORD *)this = -1;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = a3;
  BlueFin::GlMeGalileoINavDecodeHelper::GlMeGalileoINavDecodeHelper((uint64_t)this + 24, (uint64_t)this);
  BlueFin::GlMeGalileoINavDecodeHelper::GlMeGalileoINavDecodeHelper((uint64_t)this + 400, (uint64_t)this);
  return this;
}

uint64_t BlueFin::GlMeGalileoINavDecoder::SetDSPDataBits(unsigned char *a1, uint64_t a2, BlueFin::GlMeDSPDataBits *a3, const BlueFin::GlMeDSPDataBits *a4)
{
  BlueFin::GlMeGalileoINavDecodeHelper::SetDSPDataBits((BlueFin::GlMeGalileoINavDecodeHelper *)(a1 + 24), a3);
  uint64_t result = BlueFin::GlMeGalileoINavDecodeHelper::SetDSPDataBits((BlueFin::GlMeGalileoINavDecodeHelper *)(a1 + 400), a4);
  if (a2 && (a1[376] || a1[752]))
  {
    if (a1[378]) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = a1[754] != 0;
    }
    unsigned int v10 = *(uint64_t (**)(uint64_t, BOOL, uint64_t, char *))(*(void *)a2 + 32);
    return v10(a2, v9, 1, (char *)a3 + 9);
  }
  return result;
}

uint64_t BlueFin::GlMeGalileoINavDecodeHelper::SetDSPDataBits(BlueFin::GlMeGalileoINavDecodeHelper *this, const BlueFin::GlMeDSPDataBits *a2)
{
  uint64_t v144 = *MEMORY[0x263EF8340];
  char v4 = *((unsigned char *)a2 + 9);
  uint64_t v3 = (char *)a2 + 9;
  *((unsigned char *)this + 372) = v4;
  int v5 = *(_DWORD *)(v3 + 11);
  int v93 = (unsigned __int8 *)v3;
  unsigned int v6 = *(unsigned __int16 *)(v3 + 7);
  int v7 = v5 - 4 * v6;
  int v8 = *((_DWORD *)this + 60);
  if (v7 != v8 || ((int v9 = *((_DWORD *)a2 + 3), v6) ? (v10 = (*((_DWORD *)a2 + 3) & 4) == 0) : (v10 = 0), !v10))
  {
    *((_DWORD *)this + 71) = 0;
    *((_DWORD *)this + 69) = 0;
    *((_DWORD *)this + 68) = *((_DWORD *)this + 67);
    *((unsigned char *)this + 288) = 0;
    *((_DWORD *)this + 83) = 0;
    *((_DWORD *)this + 81) = 0;
    *((_DWORD *)this + 80) = *((_DWORD *)this + 79);
    *((unsigned char *)this + 336) = 0;
    int v9 = *((_DWORD *)a2 + 3);
    if (v7 != v8 || (v9 & 4) != 0)
    {
      *((_WORD *)this + 176) = 0;
      *((_DWORD *)this + 89) = 0;
    }
  }
  if ((v9 & 0x200) != 0) {
    *((_DWORD *)this + 89) = 0;
  }
  if ((v9 & 0x40) != 0 && *((unsigned char *)a2 + 40)) {
    *((_DWORD *)this + 89) = 1;
  }
  v131[0] = 0;
  v131[1] = (char *)a2 + 44;
  char v132 = 1;
  int v134 = 0;
  long long v133 = xmmword_263BB2530;
  char v135 = 0;
  v126[0] = 0;
  v126[1] = (char *)a2 + 172;
  char v127 = 1;
  int v129 = 0;
  long long v128 = xmmword_263BB2530;
  char v130 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v131, v6);
  BlueFin::GlBitBuffer::Limit((uint64_t)v126, *((unsigned __int16 *)a2 + 8));
  int v11 = DWORD1(v133);
  for (int i = DWORD2(v133); DWORD1(v133) != DWORD2(v133); int i = DWORD2(v133))
  {
    unsigned int v13 = v11 - i;
    if (v13 >= 0x20) {
      unsigned int v14 = 32;
    }
    else {
      unsigned int v14 = v13;
    }
    unsigned int v15 = *((_DWORD *)this + 69);
    if (*((_DWORD *)this + 68) - v15 < v14)
    {
      BlueFin::GlBitBuffer::Limit((uint64_t)this + 248, v15);
      BlueFin::GlBitBuffer::Position((uint64_t)this + 248, v14);
      int v16 = *((_DWORD *)this + 69);
      unsigned int v17 = *((_DWORD *)this + 71) + v16;
      *((_DWORD *)this + 71) = v17;
      unsigned int v18 = *((_DWORD *)this + 67);
      BOOL v19 = v17 >= v18;
      unsigned int v20 = v17 - v18;
      if (v19) {
        *((_DWORD *)this + 71) = v20;
      }
      *((_DWORD *)this + 69) = *((_DWORD *)this + 68) - v16;
      *((_DWORD *)this + 68) = v18;
      *((unsigned char *)this + 288) = 0;
      BlueFin::GlBitBuffer::Limit((uint64_t)this + 296, *((_DWORD *)this + 81));
      BlueFin::GlBitBuffer::Position((uint64_t)this + 296, v14);
      int v21 = *((_DWORD *)this + 81);
      unsigned int v22 = *((_DWORD *)this + 83) + v21;
      *((_DWORD *)this + 83) = v22;
      unsigned int v23 = *((_DWORD *)this + 79);
      BOOL v19 = v22 >= v23;
      unsigned int v24 = v22 - v23;
      if (v19) {
        *((_DWORD *)this + 83) = v24;
      }
      *((_DWORD *)this + 81) = *((_DWORD *)this + 80) - v21;
      *((_DWORD *)this + 80) = v23;
      *((unsigned char *)this + 336) = 0;
    }
    unsigned int v25 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v131, v14);
    BlueFin::GlBitBuffer::PutU((uint64_t *)this + 31, v25, v14);
    unsigned int v26 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v126, v14);
    BlueFin::GlBitBuffer::PutU((uint64_t *)this + 37, v26, v14);
    int v11 = DWORD1(v133);
  }
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 5);
  unsigned int v94 = *((_DWORD *)this + 69);
  if (v94 < 0xA
    || (*((_DWORD *)this + 68) = v94,
        *((_DWORD *)this + 69) = 0,
        *((unsigned char *)this + 288) = 0,
        *((void *)this + 40) = *((unsigned int *)this + 81),
        *((unsigned char *)this + 336) = 0,
        LOWORD(v97) = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 248), 9u),
        BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 296), 9u),
        *((_DWORD *)this + 68) == *((_DWORD *)this + 69)))
  {
LABEL_65:
    BlueFin::GlBitBuffer::Position((uint64_t)this + 248, v94);
    BlueFin::GlBitBuffer::Limit((uint64_t)this + 248, *((_DWORD *)this + 67));
    uint64_t v65 = BlueFin::GlBitBuffer::Position((uint64_t)this + 296, v94);
    return BlueFin::GlBitBuffer::Limit(v65, *((_DWORD *)this + 79));
  }
  while (1)
  {
    int v27 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 248), 1u);
    BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 296), 1u);
    int v97 = (2 * (v97 & 0x1FF)) | v27;
    int v96 = v97 ^ 0x160;
    if ((v97 ^ 0x160) != 0x3FF && v97 != 0x160) {
      goto LABEL_64;
    }
    unsigned int v29 = *((_DWORD *)this + 69);
    if (*((_DWORD *)this + 68) - v29 < 0x1EA) {
      goto LABEL_64;
    }
    v121[0] = (uint64_t)v143;
    v121[1] = 0;
    char v122 = 0;
    int v124 = 0;
    long long v123 = xmmword_263BB2980;
    int v30 = 7;
    char v125 = 0;
    do
    {
      unsigned int v31 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 248), 0x20u);
      BlueFin::GlBitBuffer::PutU(v121, v31, 0x20u);
      --v30;
    }
    while (v30);
    unsigned int v32 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 248), 0x10u);
    BlueFin::GlBitBuffer::PutU(v121, v32, 0x10u);
    v116[0] = (uint64_t)v142;
    v116[1] = 0;
    char v117 = 0;
    int v119 = 0;
    long long v118 = xmmword_263BB2980;
    char v120 = 0;
    BlueFin::GlBitBuffer::Position((uint64_t)this + 248, *((_DWORD *)this + 69) + 10);
    int v33 = 7;
    do
    {
      unsigned int v34 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 248), 0x20u);
      BlueFin::GlBitBuffer::PutU(v116, v34, 0x20u);
      --v33;
    }
    while (v33);
    unsigned int v35 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 248), 0x10u);
    BlueFin::GlBitBuffer::PutU(v116, v35, 0x10u);
    v111[0] = (uint64_t)v141;
    v111[1] = 0;
    char v112 = 0;
    int v114 = 0;
    long long v113 = xmmword_263BB2980;
    int v36 = 7;
    char v115 = 0;
    do
    {
      unsigned int v37 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 296), 0x20u);
      BlueFin::GlBitBuffer::PutU(v111, v37, 0x20u);
      --v36;
    }
    while (v36);
    unsigned int v38 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 296), 0x10u);
    BlueFin::GlBitBuffer::PutU(v111, v38, 0x10u);
    v106[0] = (uint64_t)v140;
    v106[1] = 0;
    char v107 = 0;
    int v109 = 0;
    long long v108 = xmmword_263BB2980;
    char v110 = 0;
    BlueFin::GlBitBuffer::Position((uint64_t)this + 296, *((_DWORD *)this + 81) + 10);
    int v39 = 7;
    do
    {
      unsigned int v40 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 296), 0x20u);
      BlueFin::GlBitBuffer::PutU(v106, v40, 0x20u);
      --v39;
    }
    while (v39);
    unsigned int v41 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeGalileoINavDecodeHelper *)((char *)this + 296), 0x10u);
    BlueFin::GlBitBuffer::PutU(v106, v41, 0x10u);
    BlueFin::GlMeGalileoINavDecodeHelper::deinterleave((BlueFin::GlMeGalileoINavDecodeHelper *)v143, v42);
    BlueFin::GlMeGalileoINavDecodeHelper::deinterleave((BlueFin::GlMeGalileoINavDecodeHelper *)v142, v43);
    BlueFin::GlMeGalileoINavDecodeHelper::deinterleave((BlueFin::GlMeGalileoINavDecodeHelper *)v141, v44);
    BlueFin::GlMeGalileoINavDecodeHelper::deinterleave((BlueFin::GlMeGalileoINavDecodeHelper *)v140, v45);
    uint64_t v46 = 0;
    if (v96 == 1023) {
      unsigned int v47 = -1431655766;
    }
    else {
      unsigned int v47 = 1431655765;
    }
    int8x16_t v48 = (int8x16_t)vdupq_n_s32(v47);
    do
    {
      *(int8x16_t *)&v143[v46] = veorq_s8(*(int8x16_t *)&v143[v46], v48);
      *(int8x16_t *)&v142[v46] = veorq_s8(*(int8x16_t *)&v142[v46], v48);
      v46 += 4;
    }
    while (v46 != 8);
    memset(v138, 0, sizeof(v138));
    __int16 v139 = 255;
    memset(v136, 0, sizeof(v136));
    __int16 v137 = 255;
    int v49 = BlueFin::GlMeSrdViterbiDecoder::RunViterbi((BlueFin::GlMeSrdViterbiDecoder *)v138, 0xF0u, v143, v141, 1);
    int v50 = BlueFin::GlMeSrdViterbiDecoder::RunViterbi((BlueFin::GlMeSrdViterbiDecoder *)v136, 0xF0u, v142, v140, 1);
    BlueFin::GlBitBuffer::Position((uint64_t)v121, 0x72u);
    BlueFin::GlBitBuffer::Position((uint64_t)v116, 0x72u);
    int v51 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v121, 6u);
    if (BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v116, 6u) | v51)
    {
      DeviceFaultNotify("glme_galileo_inav_decoder.cpp", 269, "SetDSPDataBits", (char)"0 == (otPagePart0.GetU(6) | otPagePart1.GetU(6))");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_galileo_inav_decoder.cpp", 269, "0 == (otPagePart0.GetU(6) | otPagePart1.GetU(6))");
    }
    if ((v50 + v49) > 0x3E7)
    {
      BlueFin::GlBitBuffer::Position((uint64_t)this + 248, v29);
      BlueFin::GlBitBuffer::Position((uint64_t)this + 296, v29);
      goto LABEL_64;
    }
    v104[0] = &unk_270EBA418;
    memset(&v104[1], 0, 32);
    long long v105 = 0u;
    v98[0] = (uint64_t)&v104[2] + 4;
    v98[1] = 0;
    char v99 = 0;
    uint64_t v102 = 0;
    int v101 = 0;
    uint64_t v100 = 0x10000000100;
    char v103 = 0;
    DWORD2(v123) = 0;
    char v125 = 0;
    DWORD2(v118) = 0;
    char v120 = 0;
    unsigned int v52 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v121, 0x20u);
    BlueFin::GlBitBuffer::PutU(v98, v52, 0x20u);
    unsigned int v53 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v121, 0x20u);
    BlueFin::GlBitBuffer::PutU(v98, v53, 0x20u);
    unsigned int v54 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v121, 0x20u);
    BlueFin::GlBitBuffer::PutU(v98, v54, 0x20u);
    unsigned int v55 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v121, 0x18u);
    BlueFin::GlBitBuffer::PutU(v98, v55, 0x18u);
    unsigned int v56 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v116, 0x20u);
    BlueFin::GlBitBuffer::PutU(v98, v56, 0x20u);
    unsigned int v57 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v116, 0x20u);
    BlueFin::GlBitBuffer::PutU(v98, v57, 0x20u);
    unsigned int v58 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v116, 0x20u);
    BlueFin::GlBitBuffer::PutU(v98, v58, 0x20u);
    unsigned int v59 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v116, 0x18u);
    BlueFin::GlBitBuffer::PutU(v98, v59, 0x18u);
    unsigned int v60 = 0;
    HIDWORD(v100) = v101;
    int v101 = 0;
    char v103 = 0;
    int v61 = 55;
    do
    {
      int v62 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 4u);
      if (v61 == 27)
      {
        BlueFin::GlBitBuffer::Position((uint64_t)v98, v101 + 4);
        int v62 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 2u) | v62 & 0xC;
      }
      unsigned int v60 = BlueFin::GlMeGalileoINavDecodeHelper::m_ulCrc[v62 ^ v60 & 0xF] ^ (v60 >> 4);
      --v61;
    }
    while (v61);
    if (!v60) {
      break;
    }
    *((unsigned char *)this + 354) = 0;
LABEL_64:
    if (*((_DWORD *)this + 68) == *((_DWORD *)this + 69)) {
      goto LABEL_65;
    }
  }
  *((unsigned char *)this + 354) = 1;
  *((unsigned char *)this + 352) = 1;
  if (!*((unsigned char *)a2 + 40) || (*((unsigned char *)a2 + 12) & 0x40) == 0)
  {
    if (v96 == 1023) {
      int v63 = 2;
    }
    else {
      int v63 = 1;
    }
    *((_DWORD *)this + 89) = v63;
  }
  BlueFin::GlBitBuffer::Position((uint64_t)v98, 1u);
  BYTE1(v104[1]) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 1u);
  BlueFin::GlBitBuffer::Position((uint64_t)v98, 0x79u);
  int v64 = BYTE1(v104[1]);
  if (BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 1u) != v64) {
    goto LABEL_64;
  }
  double v67 = *((double *)a2 + 4);
  double v68 = v67 * 1000.0;
  int v69 = (int)(v67 * 1000.0 + -0.5);
  if (v67 * 1000.0 >= 0.0) {
    int v69 = 0;
  }
  if (v68 > 0.0) {
    int v69 = (int)(v68 + 0.5);
  }
  int v70 = *((_DWORD *)this + 68) - *((_DWORD *)this + 69);
  HIDWORD(v105) = v69 - 4 * v70;
  BlueFin::GlMeWinMgr::SetGalSecDecodeInfo(*(void *)(*((void *)this + 43) + 16), v93, *((unsigned char *)this + 352), -((double)(4 * v70) - v67 * 1000.0) / 1000.0);
  *((_DWORD *)this + 92) = *((_DWORD *)a2 + 5) + 4 * (*((_DWORD *)this + 69) - *((_DWORD *)this + 68));
  LOBYTE(v104[1]) = *((unsigned char *)a2 + 9);
  BlueFin::GlBitBuffer::Position((uint64_t)v98, 2u);
  unsigned __int8 v71 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 6u);
  int v72 = v71;
  BYTE2(v104[1]) = v71;
  int v73 = BYTE1(v104[1]);
  if (BYTE1(v104[1]) | v71)
  {
    BOOL v74 = 0;
  }
  else
  {
    BlueFin::GlBitBuffer::Position((uint64_t)v98, 6u);
    BOOL v74 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 2u) == 2;
    int v73 = BYTE1(v104[1]);
    int v72 = BYTE2(v104[1]);
  }
  if (v73) {
    BOOL v75 = 0;
  }
  else {
    BOOL v75 = v72 == 5;
  }
  int v76 = v75 || v74;
  BYTE3(v104[1]) = v76;
  if (v76 == 1)
  {
    *((unsigned char *)this + 353) = 1;
    if (v72 == 5)
    {
      BlueFin::GlBitBuffer::Position((uint64_t)v98, 0x4Bu);
      HIDWORD(v104[1]) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 0xCu);
      int v77 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 0x14u);
      goto LABEL_87;
    }
    if (v74)
    {
      BlueFin::GlBitBuffer::Position((uint64_t)v98, 0x62u);
      HIDWORD(v104[1]) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 0xCu);
      int v77 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v98, 0x14u);
LABEL_87:
      unsigned int v83 = v77 + 2;
      LODWORD(v104[2]) = v77 + 2;
    }
    else
    {
      unsigned int v83 = v104[2];
    }
    unsigned int v81 = 1000 * v83;
    *((_DWORD *)this + 90) = 1000 * v83;
    int v78 = *((_DWORD *)a2 + 5);
    int v79 = *((_DWORD *)this + 68);
    int v80 = *((_DWORD *)this + 69);
    *((_DWORD *)this + 91) = v78 + 4 * (v80 - v79);
    if (v83 >= 0x93A80)
    {
      int v82 = (_DWORD *)((char *)this + 360);
      HIDWORD(v104[1]) = (WORD2(v104[1]) + 1) & 0xFFF;
      LODWORD(v104[2]) = v83 - 604800;
LABEL_91:
      *int v82 = v81 - 604800000;
    }
  }
  else
  {
    int v78 = *((_DWORD *)a2 + 5);
    int v79 = *((_DWORD *)this + 68);
    int v80 = *((_DWORD *)this + 69);
    if (*((unsigned char *)this + 353))
    {
      unsigned int v81 = v78 - (*((_DWORD *)this + 91) + 4 * (v79 - v80)) + *((_DWORD *)this + 90);
      *((_DWORD *)this + 90) = v81;
      *((_DWORD *)this + 91) = v78 - 4 * (v79 - v80);
      if (v81 >= 0x240C8400)
      {
        int v82 = (_DWORD *)((char *)this + 360);
        goto LABEL_91;
      }
    }
  }
  uint64_t v84 = *((void *)this + 43);
  int v85 = v78 + 4 * (v80 - v79);
  if (*(_DWORD *)v84 != v85)
  {
    (*(void (**)(void, void *))(**(void **)(v84 + 8) + 48))(*(void *)(v84 + 8), v104);
    *(_DWORD *)uint64_t v84 = v85;
    int v80 = *((_DWORD *)this + 69);
  }
  unsigned int v86 = *((_DWORD *)this + 71) + v80;
  *((_DWORD *)this + 71) = v86;
  unsigned int v87 = *((_DWORD *)this + 67);
  BOOL v19 = v86 >= v87;
  unsigned int v88 = v86 - v87;
  if (v19) {
    *((_DWORD *)this + 71) = v88;
  }
  *((_DWORD *)this + 69) = *((_DWORD *)this + 68) - v80;
  *((_DWORD *)this + 68) = v87;
  *((unsigned char *)this + 288) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)this + 248, v87);
  int v89 = *((_DWORD *)this + 81);
  unsigned int v90 = *((_DWORD *)this + 83) + v89;
  *((_DWORD *)this + 83) = v90;
  unsigned int v91 = *((_DWORD *)this + 79);
  BOOL v19 = v90 >= v91;
  unsigned int v92 = v90 - v91;
  if (v19) {
    *((_DWORD *)this + 83) = v92;
  }
  *((_DWORD *)this + 81) = *((_DWORD *)this + 80) - v89;
  *((_DWORD *)this + 80) = v91;
  *((unsigned char *)this + 336) = 0;
  return BlueFin::GlBitBuffer::Limit((uint64_t)this + 296, v91);
}

double BlueFin::GlMeGalileoINavDecodeHelper::GlMeGalileoINavDecodeHelper(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 284) = 0;
  *(void *)&double result = 0x3C0000003C0;
  *(_OWORD *)(a1 + 268) = xmmword_263BB2990;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 120;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 316) = xmmword_263BB2990;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a2;
  *(_WORD *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 354) = 0;
  *(unsigned char *)(a1 + 372) = 0;
  *(void *)(a1 + 364) = 0;
  *(void *)(a1 + 356) = 0;
  return result;
}

double BlueFin::GlMeGalileoINavDecodeHelper::deinterleave(BlueFin::GlMeGalileoINavDecodeHelper *this, unsigned int *a2)
{
  unsigned int v2 = 0;
  unsigned int v3 = 0;
  uint64_t v12 = *MEMORY[0x263EF8340];
  long long v10 = 0u;
  long long v11 = 0u;
  do
  {
    unsigned int v4 = v3 + 30;
    if (v3 + 30 > 0xEF) {
      unsigned int v4 = v3 - 209;
    }
    unsigned int v5 = 0x80000000 >> v2;
    if (((*((_DWORD *)this + (v3 >> 5)) << v3) & 0x80000000) != 0)
    {
      unsigned int v6 = v2 >> 5;
      int v7 = *((_DWORD *)&v10 + (v2 >> 5)) | v5;
    }
    else
    {
      unsigned int v6 = v2 >> 5;
      int v7 = *((_DWORD *)&v10 + (v2 >> 5)) & ~v5;
    }
    *((_DWORD *)&v10 + v6) = v7;
    ++v2;
    unsigned int v3 = v4;
  }
  while (v2 != 240);
  double result = *(double *)&v10;
  long long v9 = v11;
  *(_OWORD *)this = v10;
  *((_OWORD *)this + 1) = v9;
  return result;
}

void BlueFin::GlMeGalileoPilotSecCodeDecoder::SetDSPDataBits(BlueFin::GlMeGalileoPilotSecCodeDecoder *this, const BlueFin::GlMeDSPDataBits *a2, const BlueFin::GlMeDSPDataBits *a3)
{
  if (*((unsigned char *)a2 + 40))
  {
    int v6 = *((_DWORD *)a2 + 3);
    if ((v6 & 4) != 0 || (*((unsigned char *)a3 + 12) & 4) != 0) {
      *((unsigned char *)this + 8) = 0;
    }
    unsigned int v7 = *((_DWORD *)a2 + 5);
    if (v7 >= 0x3E8 && ((v6 & 0x100) != 0 || (*((unsigned char *)a3 + 13) & 1) != 0))
    {
      unsigned int v8 = v7 % 0x64;
      if (*((unsigned char *)this + 8) && v8 != *((_DWORD *)this + 1) % 0x64u)
      {
        *((unsigned char *)this + 8) = 0;
      }
      else
      {
        *((unsigned char *)this + 8) = 1;
        *((_DWORD *)this + 1) = v8;
        double v9 = *((double *)a2 + 4) + ((double)v8 - (double)v8) / -1000.0;
        uint64_t v10 = *((void *)this + 2);
        long long v11 = (unsigned __int8 *)a2 + 9;
        BlueFin::GlMeWinMgr::SetGalSecDecodeInfo(v10, v11, 1, v9);
      }
    }
    else if (!*((unsigned char *)this + 8))
    {
      BlueFin::GlMeGalileoPilotSecCodeDecoder::ProcessBits(this, a2);
      if (!*((unsigned char *)this + 8)) {
        BlueFin::GlMeGalileoPilotSecCodeDecoder::ProcessBits(this, a3);
      }
      *(_DWORD *)this = *((_DWORD *)a2 + 5);
    }
  }
}

void BlueFin::GlMeGalileoPilotSecCodeDecoder::ProcessBits(BlueFin::GlMeGalileoPilotSecCodeDecoder *this, const BlueFin::GlMeDSPDataBits *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 12) & 4) != 0)
  {
    *((unsigned char *)this + 8) = 0;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    *((_DWORD *)this + 30) = 0;
  }
  unsigned int v4 = *((unsigned __int16 *)a2 + 8);
  if (*((_WORD *)a2 + 8))
  {
    if (*((_DWORD *)a2 + 5) - 4 * v4 == *(_DWORD *)this)
    {
      if (*((unsigned char *)this + 8)) {
        return;
      }
    }
    else
    {
      *((unsigned char *)this + 8) = 0;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *(_OWORD *)((char *)this + 104) = 0u;
      *((_DWORD *)this + 30) = 0;
      unsigned int v4 = *((unsigned __int16 *)a2 + 8);
    }
    if (v4 < 0x1A) {
      return;
    }
    v34[0] = 0;
    v34[1] = (char *)a2 + 44;
    char v35 = 1;
    int v37 = 0;
    long long v36 = xmmword_263BB2530;
    char v38 = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)v34, v4);
    int v40 = 0;
    memset(v39, 0, sizeof(v39));
    int v5 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v34, 1u);
    unsigned int v6 = *((_DWORD *)a2 + 5) >> 2;
    if (DWORD1(v36) != DWORD2(v36))
    {
      signed int v7 = (v6 - *((unsigned __int16 *)a2 + 8)) % 0x19;
      do
      {
        int v8 = v5;
        int v5 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v34, 1u);
        int v9 = *((_DWORD *)v39 + v7);
        if (v8 == v5)
        {
          if (v9 != 0x80000000) {
            *((_DWORD *)v39 + v7) = v9 - 1;
          }
          uint64_t v10 = (char *)this + 4 * v7;
          int v13 = *((_DWORD *)v10 + 6);
          long long v11 = v10 + 24;
          int v12 = v13;
          if (v13 == 0x80000000) {
            goto LABEL_21;
          }
          int v14 = v12 - 1;
        }
        else
        {
          if (v9 != 0x7FFFFFFF) {
            *((_DWORD *)v39 + v7) = v9 + 1;
          }
          unsigned int v15 = (char *)this + 4 * v7;
          int v17 = *((_DWORD *)v15 + 6);
          long long v11 = v15 + 24;
          int v16 = v17;
          if (v17 == 0x7FFFFFFF) {
            goto LABEL_21;
          }
          int v14 = v16 + 1;
        }
        *long long v11 = v14;
LABEL_21:
        if (v7 == 24) {
          signed int v7 = 0;
        }
        else {
          ++v7;
        }
      }
      while (DWORD1(v36) != DWORD2(v36));
    }
    uint64_t v18 = 0;
    int v19 = 0;
    int v20 = 0;
    do
    {
      int v21 = *(_DWORD *)((char *)v39 + v18);
      int v22 = (2 * v20) | 1;
      if (v21) {
        v20 *= 2;
      }
      else {
        int v20 = -1;
      }
      if (v21 > 0) {
        int v20 = v22;
      }
      int v23 = *(_DWORD *)((char *)this + v18 + 24);
      int v24 = (2 * v19) | 1;
      if (v23) {
        v19 *= 2;
      }
      else {
        int v19 = -1;
      }
      if (v23 > 0) {
        int v19 = v24;
      }
      v18 += 4;
    }
    while (v18 != 100);
    uint64_t v25 = 0;
    int v26 = -1;
    int v27 = -1;
    do
    {
      int v28 = dword_263BB29E0[v25];
      if (v28 == v20) {
        int v27 = v25;
      }
      if (v28 == v19) {
        int v26 = v25;
      }
      ++v25;
    }
    while (v25 != 25);
    if (v27 >= v26) {
      int v29 = v26;
    }
    else {
      int v29 = v27;
    }
    if ((v27 == v26) == (v29 != -1))
    {
      if (v26 <= v27) {
        int v30 = v27;
      }
      else {
        int v30 = v26;
      }
      int v31 = 4 * (v30 + 25 * ((171798692 * (unint64_t)v6) >> 32)) - 96;
      int v32 = *((_DWORD *)this + 1);
      if (v32
        && (HIDWORD(v33) = -1030792151 * (v31 - v32), LODWORD(v33) = HIDWORD(v33), (v33 >> 2) <= 0x28F5C28))
      {
        *((_DWORD *)this + 1) = v31;
        *((unsigned char *)this + 8) = 1;
        BlueFin::GlMeWinMgr::SetGalSecDecodeInfo(*((void *)this + 2), (unsigned __int8 *)a2 + 9, 1, *((double *)a2 + 4) + (double)(*((_DWORD *)a2 + 5) - v31) / -1000.0);
      }
      else
      {
        *((_DWORD *)this + 1) = v31;
      }
    }
  }
}

BOOL BlueFin::GlMeGalileoPilotSecCodeDecoder::GetSecCodePhsInSym(uint64_t a1, unsigned int a2, unsigned char *a3, int a4)
{
  *a3 = -1;
  int v4 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    unsigned int v5 = *(_DWORD *)(a1 + 4);
    unsigned int v6 = 25 * ((v5 - a2 + 2) / 0x64) - ((v5 - a2 + 2) >> 2) + 25;
    if (a4) {
      unsigned int v6 = a2 - v5 + 100 * ((v5 - a2) / 0x64) + 100;
    }
    unsigned int v7 = (a2 - v5) % 0x64;
    if (!a4) {
      unsigned int v7 = ((a2 - v5 + 2) >> 2) - 25 * ((a2 - v5 + 2) / 0x64);
    }
    if (v5 <= a2) {
      char v8 = v7;
    }
    else {
      char v8 = v6;
    }
    *a3 = v8;
  }
  return v4 != 0;
}

uint64_t BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory(BlueFin::GlMeGlonassFrameMgr *this)
{
  if (*((_DWORD *)this + 1))
  {
    DeviceFaultNotify("glme_glonassframemgr.cpp", 79, "GetSearchStateMemory", (char)"SEARCH == m_etState");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_glonassframemgr.cpp", 79, "SEARCH == m_etState");
  }
  return (uint64_t)this + 8;
}

uint64_t BlueFin::GlMeGlonassFrameMgr::Update(uint64_t this, const BlueFin::GlMeDSPDataBits *a2, const BlueFin::GlMeDSPDataBits *a3)
{
  uint64_t v381 = *MEMORY[0x263EF8340];
  unsigned int v3 = (char *)a2 + 9;
  int v4 = *(unsigned __int8 *)(this + 284);
  if (*((unsigned __int8 *)a2 + 9) != v4 || *((unsigned __int8 *)a3 + 9) != v4)
  {
    int v207 = "(rotFllDataBits.m_otSvId == m_otSvId) && (rotPllDataBits.m_otSvId == m_otSvId)";
    DeviceFaultNotify("glme_glonassframemgr.cpp", 93, "Update", (char)"(rotFllDataBits.m_otSvId == m_otSvId) && (rotPllDataBits.m_otSvId == m_otSvId)");
    int v208 = 93;
    goto LABEL_291;
  }
  uint64_t v7 = this;
  int v8 = *((_DWORD *)a2 + 3);
  if ((v8 & 0x100) != 0)
  {
    unsigned int v15 = *((_DWORD *)a2 + 5);
LABEL_22:
    this = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory((BlueFin::GlMeGlonassFrameMgr *)this);
    *(unsigned char *)(this + 140) = 1;
    *(_DWORD *)(this + 148) = v15 % 0x7D0;
    return this;
  }
  int v10 = *((_DWORD *)a3 + 3);
  if ((v10 & 0x100) != 0)
  {
    unsigned int v15 = *((_DWORD *)a3 + 5);
    goto LABEL_22;
  }
  if ((v8 & 0x10) == 0) {
    *((_WORD *)a2 + 8) = 0;
  }
  if ((v10 & 0x10) == 0) {
    *((_WORD *)a3 + 8) = 0;
  }
  if ((v10 & 0x204) != 0) {
    *(_DWORD *)this = 0;
  }
  int v12 = (_OWORD *)(this + 4);
  int v11 = *(_DWORD *)(this + 4);
  if (v11 == 1) {
    return this;
  }
  if (v11)
  {
    int v207 = "false";
    DeviceFaultNotify("glme_glonassframemgr.cpp", 290, "Update", (char)"false");
    int v208 = 290;
LABEL_291:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_glonassframemgr.cpp", v208, v207);
  }
  uint64_t v250 = (unsigned __int8 *)(this + 284);
  uint64_t SearchStateMemory = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory((BlueFin::GlMeGlonassFrameMgr *)this);
  if (*(unsigned char *)(SearchStateMemory + 140))
  {
LABEL_17:
    v286 = (char *)&unk_270EBECD8;
    HIDWORD(v287) = 0;
    __int16 v288 = 0;
    *(void *)uint64_t v289 = 0;
    *(void *)&v289[12] = 0;
    char v290 = 0;
    long long v305 = 0u;
    long long v306 = 0u;
    long long v291 = 0u;
    long long v292 = 0u;
    long long v293 = 0u;
    long long v294 = 0u;
    long long v295 = 0u;
    long long v296 = 0u;
    long long v297 = 0u;
    long long v298 = 0u;
    long long v299 = 0u;
    long long v300 = 0u;
    long long v301 = 0u;
    long long v302 = 0u;
    long long v303 = 0u;
    long long v304 = 0u;
    LOWORD(v287) = 0;
    uint64_t v266 = (char *)&unk_270EBECD8;
    HIDWORD(v267) = 0;
    __int16 v268 = 0;
    v269[0] = 0;
    *(void *)((char *)&v269[1] + 4) = 0;
    BYTE4(v269[2]) = 0;
    long long v284 = 0u;
    long long v285 = 0u;
    long long v270 = 0u;
    long long v271 = 0u;
    long long v272 = 0u;
    long long v273 = 0u;
    long long v274 = 0u;
    long long v275 = 0u;
    long long v276 = 0u;
    long long v277 = 0u;
    long long v278 = 0u;
    long long v279 = 0u;
    long long v280 = 0u;
    long long v281 = 0u;
    long long v282 = 0u;
    long long v283 = 0u;
    LOWORD(v267) = 0;
    int v13 = *((_DWORD *)a3 + 3);
    if ((v13 & 0x40) != 0)
    {
      LOWORD(v287) = *((_WORD *)a2 + 4);
      HIDWORD(v287) = *((_DWORD *)a2 + 3);
      __int16 v288 = *((_WORD *)a2 + 8);
      *(void *)uint64_t v289 = *(void *)((char *)a2 + 20);
      *(void *)&v289[12] = *((void *)a2 + 4);
      char v290 = *((unsigned char *)a2 + 40);
      long long v26 = *(_OWORD *)((char *)a2 + 124);
      long long v295 = *(_OWORD *)((char *)a2 + 108);
      long long v296 = v26;
      long long v27 = *(_OWORD *)((char *)a2 + 156);
      long long v297 = *(_OWORD *)((char *)a2 + 140);
      long long v298 = v27;
      long long v28 = *(_OWORD *)((char *)a2 + 60);
      long long v291 = *(_OWORD *)((char *)a2 + 44);
      long long v292 = v28;
      long long v29 = *(_OWORD *)((char *)a2 + 92);
      long long v293 = *(_OWORD *)((char *)a2 + 76);
      long long v294 = v29;
      long long v30 = *(_OWORD *)((char *)a2 + 284);
      long long v305 = *(_OWORD *)((char *)a2 + 268);
      long long v306 = v30;
      long long v302 = *(_OWORD *)((char *)a2 + 220);
      long long v301 = *(_OWORD *)((char *)a2 + 204);
      long long v300 = *(_OWORD *)((char *)a2 + 188);
      long long v299 = *(_OWORD *)((char *)a2 + 172);
      long long v304 = *(_OWORD *)((char *)a2 + 252);
      long long v303 = *(_OWORD *)((char *)a2 + 236);
      LOWORD(v267) = *((_WORD *)a3 + 4);
      HIDWORD(v267) = v13;
      __int16 v268 = *((_WORD *)a3 + 8);
      v269[0] = *(void *)((char *)a3 + 20);
      *(void *)((char *)&v269[1] + 4) = *((void *)a3 + 4);
      BYTE4(v269[2]) = *((unsigned char *)a3 + 40);
      long long v31 = *(_OWORD *)((char *)a3 + 44);
      long long v32 = *(_OWORD *)((char *)a3 + 60);
      long long v33 = *(_OWORD *)((char *)a3 + 92);
      long long v272 = *(_OWORD *)((char *)a3 + 76);
      long long v273 = v33;
      long long v270 = v31;
      long long v271 = v32;
      long long v34 = *(_OWORD *)((char *)a3 + 108);
      long long v35 = *(_OWORD *)((char *)a3 + 124);
      long long v36 = *(_OWORD *)((char *)a3 + 156);
      long long v276 = *(_OWORD *)((char *)a3 + 140);
      long long v277 = v36;
      long long v274 = v34;
      long long v275 = v35;
      long long v37 = *(_OWORD *)((char *)a3 + 236);
      long long v38 = *(_OWORD *)((char *)a3 + 252);
      long long v39 = *(_OWORD *)((char *)a3 + 284);
      long long v284 = *(_OWORD *)((char *)a3 + 268);
      long long v285 = v39;
      long long v40 = *(_OWORD *)((char *)a3 + 172);
      long long v41 = *(_OWORD *)((char *)a3 + 188);
      long long v42 = *(_OWORD *)((char *)a3 + 204);
      long long v281 = *(_OWORD *)((char *)a3 + 220);
      long long v280 = v42;
      long long v279 = v41;
      long long v278 = v40;
      long long v283 = v38;
      long long v282 = v37;
    }
    else
    {
      v344[0] = -1;
      if ((BlueFin::GlMeGlonassFrameMgr::GetGlnsStrPhsInSym((BlueFin::GlMeGlonassFrameMgr *)v7, *((_DWORD *)a2 + 5), v344) & 1) == 0)
      {
        DeviceFaultNotify("glme_glonassframemgr.cpp", 206, "Update", (char)"GetGlnsStrPhsInSym(rotFllDataBits.m_ulEpochCnt, ucGlnsStrPhsInSym)");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_glonassframemgr.cpp", 206, "GetGlnsStrPhsInSym(rotFllDataBits.m_ulEpochCnt, ucGlnsStrPhsInSym)");
      }
      int v14 = v344[0];
      BlueFin::GlMeDSPDataBits::ConvertGlnsSymsToBits((uint64_t)a2, (BlueFin::GlMeDSPDataBits *)&v286, (unsigned __int8 *)(SearchStateMemory + 257), v344[0]);
      BlueFin::GlMeDSPDataBits::ConvertGlnsSymsToBits((uint64_t)a3, (BlueFin::GlMeDSPDataBits *)&v266, (unsigned __int8 *)(SearchStateMemory + 258), v14);
    }
    this = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory((BlueFin::GlMeGlonassFrameMgr *)v7);
    uint64_t v43 = this;
    if (!*(unsigned char *)(this + 256))
    {
      *(unsigned char *)(this + 256) = 1;
      *(_WORD *)(this + 252) = 257;
    }
    if ((v287 & 0x400000000) != 0
      || (v267 & 0x400000000) != 0
      || *(_DWORD *)v289 <= *(_DWORD *)(this + 4)
      || LODWORD(v269[0]) <= *(_DWORD *)(this + 8))
    {
      *(void *)(v7 + 276) = 0;
      *(_OWORD *)(v7 + 244) = 0u;
      *(_OWORD *)(v7 + 260) = 0u;
      *(_OWORD *)(v7 + 212) = 0u;
      *(_OWORD *)(v7 + 228) = 0u;
      *(_OWORD *)(v7 + 180) = 0u;
      *(_OWORD *)(v7 + 196) = 0u;
      *(_OWORD *)(v7 + 148) = 0u;
      *(_OWORD *)(v7 + 164) = 0u;
      *(_OWORD *)(v7 + 116) = 0u;
      *(_OWORD *)(v7 + 132) = 0u;
      *(_OWORD *)(v7 + 84) = 0u;
      *(_OWORD *)(v7 + 100) = 0u;
      *(_OWORD *)(v7 + 52) = 0u;
      *(_OWORD *)(v7 + 68) = 0u;
      *(_OWORD *)(v7 + 20) = 0u;
      *(_OWORD *)(v7 + 36) = 0u;
      *int v12 = 0u;
    }
    else
    {
      LODWORD(v377) = 0;
      *(void *)v376 = 0;
      LODWORD(v372) = 0;
      *(void *)v371 = 0;
      LODWORD(v367) = 0;
      v366 = 0;
      v339[0] = 0;
      v334[0] = 0;
      v328[0] = 0;
      BlueFin::GlMeGlonassFrameMgr::ParseBits((BlueFin::GlMeGlonassFrameMgr *)v7, (BlueFin::GlMeDSPDataBits *)&v286, v376, v339, v334, 1);
      this = BlueFin::GlMeGlonassFrameMgr::ParseBits((BlueFin::GlMeGlonassFrameMgr *)v7, (BlueFin::GlMeDSPDataBits *)&v266, v371, v339, v328, 0);
      if (*(unsigned char *)(v43 + 254) || *(unsigned char *)(v43 + 255))
      {
        *(void *)(v7 + 276) = 0;
        *(_OWORD *)(v7 + 244) = 0u;
        *(_OWORD *)(v7 + 260) = 0u;
        *(_OWORD *)(v7 + 212) = 0u;
        *(_OWORD *)(v7 + 228) = 0u;
        *(_OWORD *)(v7 + 180) = 0u;
        *(_OWORD *)(v7 + 196) = 0u;
        *(_OWORD *)(v7 + 148) = 0u;
        *(_OWORD *)(v7 + 164) = 0u;
        *(_OWORD *)(v7 + 116) = 0u;
        *(_OWORD *)(v7 + 132) = 0u;
        *(_OWORD *)(v7 + 84) = 0u;
        *(_OWORD *)(v7 + 100) = 0u;
        *(_OWORD *)(v7 + 52) = 0u;
        *(_OWORD *)(v7 + 68) = 0u;
        *(_OWORD *)(v7 + 20) = 0u;
        *(_OWORD *)(v7 + 36) = 0u;
        *int v12 = 0u;
        if ((v287 & 0x4000000000) != 0)
        {
          this = *(void *)(v7 + 304);
          if (this) {
            this = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)this + 48))(this, (char *)&v287 + 1, 1);
          }
        }
        goto LABEL_48;
      }
      BOOL v209 = v334[0];
      if (v334[0])
      {
        this = BlueFin::GLNFrameMgrUtils::Parity((BlueFin::GLNFrameMgrUtils *)v376, v44);
        int v210 = this;
      }
      else
      {
        int v210 = 0;
      }
      BOOL v219 = v328[0];
      if (v328[0])
      {
        int v265 = v210;
        this = BlueFin::GLNFrameMgrUtils::Parity((BlueFin::GLNFrameMgrUtils *)v371, v44);
        int v210 = v265;
        unsigned int v220 = this;
      }
      else
      {
        unsigned int v220 = 0;
      }
      if (v219 || v209)
      {
        if (*(unsigned char *)(v43 + 256))
        {
          this = *(void *)(v7 + 304);
          if (this)
          {
            int v221 = v210;
            unsigned int v222 = v220;
            this = (*(uint64_t (**)(uint64_t, void, uint64_t, unsigned __int8 *))(*(void *)this + 32))(this, v210 | v220, 1, v250);
            int v210 = v221;
            unsigned int v220 = v222;
          }
        }
      }
      if ((v210 & v220) == 1)
      {
        uint64_t v223 = 0;
        while (1)
        {
          unsigned int v224 = v376[v223];
          unsigned int v225 = v371[v223] ^ v224;
          if (v223 == 2) {
            v225 &= 0xFFFFF800;
          }
          if (v225) {
            goto LABEL_48;
          }
          *(_DWORD *)((char *)&v366 + v223 * 4) = v224;
          if (++v223 == 3)
          {
            int v210 = 1;
            goto LABEL_338;
          }
        }
      }
      if ((v210 | v220) == 1)
      {
        long long v226 = v371;
        if (v210) {
          long long v226 = v376;
        }
        v366 = *(unsigned int **)v226;
        LODWORD(v367) = v226[2];
LABEL_338:
        unsigned int v227 = v366;
        *(void *)v344 = &unk_270EBA3E8;
        LODWORD(v347[1]) = 0;
        LODWORD(v346) = v366 >> 1;
        HIDWORD(v346) = __PAIR64__(v366, HIDWORD(v366)) >> 1;
        v347[0] = (__PAIR64__(HIDWORD(v366), v367) >> 1) & 0xFFFFF800;
        v345[0] = *v250;
        char v228 = v345[0] - 59;
        if (v345[0] - 52 >= 0xE) {
          char v228 = -8;
        }
        v345[1] = v228;
        *(void *)&v345[2] = 0;
        unsigned int v229 = v339[0];
        if (v210)
        {
          char v230 = v289;
          __int16 v231 = *(_WORD *)&v289[4];
          if (v339[0] >= *(_DWORD *)&v289[4]) {
            goto LABEL_346;
          }
        }
        else
        {
          char v230 = v269;
          if (v339[0] >= HIDWORD(v269[0]))
          {
LABEL_346:
            unsigned int v232 = v366 >> 28;
            *(unsigned char *)(v43 + 144) = 1;
            unsigned int v233 = *v230 - v229;
            if (v227 >> 28 == 1 && !*(unsigned char *)(v43 + 142))
            {
              unsigned int v238 = (v227 >> 19) & 0x1F;
              if (v238 <= 0x17)
              {
                unsigned int v239 = (v227 >> 13) & 0x3F;
                if (v239 <= 0x3B)
                {
                  *(_WORD *)&v345[2] = 1;
                  int v240 = 1000 * ((((int)(v227 << 19) >> 31) & 0x1E) + 60 * (v239 + 60 * v238));
                  *(_DWORD *)&v345[4] = v240;
                  if (*(unsigned char *)(v43 + 141))
                  {
                    unsigned int v241 = *(_DWORD *)(v43 + 152) + v233 - *(_DWORD *)(v43 + 148);
                    if (v241 > 0x5265BFF) {
                      v241 -= 86400000;
                    }
                    *(unsigned char *)(v43 + 142) = v240 == v241;
                  }
                  *(unsigned char *)(v43 + 141) = 1;
                  *(_DWORD *)(v43 + 148) = v233;
                  *(_DWORD *)(v43 + 152) = v240;
LABEL_352:
                  int v235 = *(unsigned __int8 *)(v43 + 140);
                  double v236 = *(double *)&v289[12] + (double)v229 / -1000.0;
                  *(double *)((char *)v347 + 4) = v236;
                  if (!v235)
                  {
LABEL_376:
                    this = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(v7 + 288) + 56))(*(void *)(v7 + 288), v344);
                    goto LABEL_48;
                  }
LABEL_366:
                  if ((v287 & 0x8000000000) != 0)
                  {
                    *(unsigned char *)(v43 + 143) = 1;
                    BlueFin::GlMeWinMgr::SetTMDecodeInfo(*(void *)(v7 + 296), v250, 1, v236);
                  }
                  goto LABEL_376;
                }
              }
              if (*(unsigned char *)(v43 + 140))
              {
                int v237 = *(_DWORD *)(v43 + 152);
                goto LABEL_365;
              }
            }
            else
            {
              if (*(unsigned char *)(v43 + 141))
              {
                unsigned int v234 = *(_DWORD *)(v43 + 152) + v233 - *(_DWORD *)(v43 + 148);
                if (v234 > 0x5265BFF) {
                  v234 -= 86400000;
                }
                *(_DWORD *)&v345[4] = v234;
                *(_WORD *)&v345[2] = 1;
                *(_DWORD *)(v43 + 148) = v233;
                *(_DWORD *)(v43 + 152) = v234;
                goto LABEL_352;
              }
              if (*(unsigned char *)(v43 + 140))
              {
                int v237 = 2000 * v232 - 2000;
                *(_DWORD *)(v43 + 148) = v233;
                *(_DWORD *)(v43 + 152) = v237;
LABEL_365:
                *(_DWORD *)&v345[4] = v237;
                double v236 = *(double *)&v289[12] + (double)v229 / -1000.0;
                *(double *)((char *)v347 + 4) = v236;
                goto LABEL_366;
              }
            }
            double v242 = *(double *)&v289[12];
            double v243 = floor(*(double *)&v289[12] * 1000.0);
            double v244 = fmod(v243, 4294967300.0);
            if (v243 <= 4294967300.0) {
              double v244 = v243;
            }
            if (v244 < -4294967300.0) {
              double v244 = -fmod(-v244, 4294967300.0);
            }
            if (v244 < 0.0) {
              unsigned int v245 = --v244;
            }
            else {
              unsigned int v245 = v244;
            }
            *(_DWORD *)&v345[4] = v245 - v229;
            *(double *)((char *)v347 + 4) = v242 + (double)v229 / -1000.0;
            goto LABEL_376;
          }
          __int16 v231 = *(_WORD *)&v289[4];
        }
        *(_WORD *)&v345[8] = v231 - LOWORD(v339[0]);
        goto LABEL_346;
      }
    }
LABEL_48:
    if (*(unsigned char *)(SearchStateMemory + 140) && (*((unsigned char *)a2 + 12) & 0x40) != 0)
    {
      unsigned int v45 = *((_DWORD *)a2 + 5);
      unsigned int v46 = *(_DWORD *)(SearchStateMemory + 148);
      if (v45 >= v46) {
        int v47 = -858993459 * (v45 - v46);
      }
      else {
        int v47 = -858993459 * (v46 - v45);
      }
      HIDWORD(v49) = v47;
      LODWORD(v49) = v47;
      if ((v49 >> 2) >= 0xCCCCCCD)
      {
        *(void *)(v7 + 276) = 0;
        *(_OWORD *)(v7 + 244) = 0u;
        *(_OWORD *)(v7 + 260) = 0u;
        *(_OWORD *)(v7 + 212) = 0u;
        *(_OWORD *)(v7 + 228) = 0u;
        *(_OWORD *)(v7 + 180) = 0u;
        *(_OWORD *)(v7 + 196) = 0u;
        *(_OWORD *)(v7 + 148) = 0u;
        *(_OWORD *)(v7 + 164) = 0u;
        *(_OWORD *)(v7 + 116) = 0u;
        *(_OWORD *)(v7 + 132) = 0u;
        *(_OWORD *)(v7 + 84) = 0u;
        *(_OWORD *)(v7 + 100) = 0u;
        *(_OWORD *)(v7 + 52) = 0u;
        *(_OWORD *)(v7 + 68) = 0u;
        *(_OWORD *)(v7 + 20) = 0u;
        *(_OWORD *)(v7 + 36) = 0u;
        *int v12 = 0u;
        this = *(void *)(v7 + 304);
        if (this) {
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)this + 48))(this, v3, 1);
        }
      }
    }
    return this;
  }
  if ((*((unsigned char *)a3 + 12) & 0x40) != 0)
  {
    *(void *)(v7 + 276) = 0;
    *(_OWORD *)(v7 + 244) = 0u;
    *(_OWORD *)(v7 + 260) = 0u;
    *(_OWORD *)(v7 + 212) = 0u;
    *(_OWORD *)(v7 + 228) = 0u;
    *(_OWORD *)(v7 + 180) = 0u;
    *(_OWORD *)(v7 + 196) = 0u;
    *(_OWORD *)(v7 + 148) = 0u;
    *(_OWORD *)(v7 + 164) = 0u;
    *(_OWORD *)(v7 + 116) = 0u;
    *(_OWORD *)(v7 + 132) = 0u;
    *(_OWORD *)(v7 + 84) = 0u;
    *(_OWORD *)(v7 + 100) = 0u;
    *(_OWORD *)(v7 + 52) = 0u;
    *(_OWORD *)(v7 + 68) = 0u;
    *(_OWORD *)(v7 + 20) = 0u;
    *(_OWORD *)(v7 + 36) = 0u;
    *int v12 = 0u;
    this = *(void *)(v7 + 304);
    if (this)
    {
      int8x16_t v48 = *(uint64_t (**)(void))(*(void *)this + 48);
      return v48();
    }
    return this;
  }
  uint64_t v248 = v3;
  uint64_t v16 = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory((BlueFin::GlMeGlonassFrameMgr *)v7);
  if ((*((unsigned char *)a2 + 12) & 4) != 0
    || (*((unsigned char *)a3 + 12) & 4) != 0
    || *((_DWORD *)a2 + 5) <= *(_DWORD *)(v16 + 4)
    || *((_DWORD *)a3 + 5) <= *(_DWORD *)(v16 + 8))
  {
    *(void *)(v7 + 276) = 0;
    *(_OWORD *)(v7 + 244) = 0u;
    *(_OWORD *)(v7 + 260) = 0u;
    *(_OWORD *)(v7 + 212) = 0u;
    *(_OWORD *)(v7 + 228) = 0u;
    *(_OWORD *)(v7 + 180) = 0u;
    *(_OWORD *)(v7 + 196) = 0u;
    *(_OWORD *)(v7 + 148) = 0u;
    *(_OWORD *)(v7 + 164) = 0u;
    *(_OWORD *)(v7 + 116) = 0u;
    *(_OWORD *)(v7 + 132) = 0u;
    *(_OWORD *)(v7 + 84) = 0u;
    *(_OWORD *)(v7 + 100) = 0u;
    *(_OWORD *)(v7 + 52) = 0u;
    *(_OWORD *)(v7 + 68) = 0u;
    *(_OWORD *)(v7 + 20) = 0u;
    *(_OWORD *)(v7 + 36) = 0u;
    *int v12 = 0u;
  }
  float v257 = (unsigned int *)v16;
  uint64_t v266 = 0;
  uint64_t v267 = 0;
  LOBYTE(v268) = 0;
  memset(v269, 0, 21);
  *(void *)v345 = 0;
  *(void *)v344 = 0;
  v345[8] = 0;
  memset(v347, 0, 13);
  uint64_t v346 = 0;
  *(void *)v376 = 0;
  uint64_t v377 = 0;
  char v378 = 0;
  memset(v380, 0, 13);
  uint64_t v379 = 0;
  *(void *)v371 = 0;
  uint64_t v372 = 0;
  char v373 = 0;
  v375[0] = 0;
  uint64_t v374 = 0;
  *(void *)((char *)v375 + 5) = 0;
  uint64_t v367 = 0;
  v366 = 0;
  char v368 = 0;
  v370[0] = 0;
  uint64_t v369 = 0;
  *(void *)((char *)v370 + 5) = 0;
  uint64_t v340 = 0;
  *(void *)v339 = 0;
  char v341 = 0;
  v343[0] = 0;
  uint64_t v342 = 0;
  *(void *)((char *)v343 + 5) = 0;
  unsigned int v17 = *((unsigned __int16 *)a2 + 8);
  uint64_t v335 = 0;
  *(void *)v334 = 0;
  char v336 = 0;
  v338[0] = 0;
  uint64_t v337 = 0;
  *(void *)((char *)v338 + 5) = 0;
  v286 = (char *)a2 + 44;
  uint64_t v287 = 0;
  LOBYTE(v288) = 0;
  *(_DWORD *)&v289[16] = 0;
  *(_OWORD *)uint64_t v289 = xmmword_263BB2530;
  char v290 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)&v286, v17);
  unsigned int v18 = *((unsigned __int16 *)a3 + 8);
  uint64_t v266 = (char *)a3 + 44;
  uint64_t v267 = 0;
  LOBYTE(v268) = 0;
  v269[0] = 0x40000000400;
  BlueFin::GlBitBuffer::Limit((uint64_t)&v266, v18);
  *(void *)v344 = (char *)a2 + 172;
  *(void *)v345 = 0;
  v345[8] = 0;
  LODWORD(v347[1]) = 0;
  LODWORD(v347[0]) = 0;
  uint64_t v346 = 0x40000000400;
  BYTE4(v347[1]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v344, *((unsigned __int16 *)a2 + 8));
  *(void *)v376 = (char *)a3 + 172;
  uint64_t v377 = 0;
  char v378 = 0;
  v380[2] = 0;
  v380[0] = 0;
  uint64_t v379 = 0x40000000400;
  LOBYTE(v380[3]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v376, *((unsigned __int16 *)a3 + 8));
  unsigned int v19 = *(unsigned __int16 *)v257;
  *(void *)v371 = v257 + 3;
  uint64_t v372 = 0;
  char v373 = 0;
  LODWORD(v375[1]) = 0;
  LODWORD(v375[0]) = 0;
  uint64_t v374 = 0x10000000100;
  BYTE4(v375[1]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v371, v19);
  unsigned int v20 = *((unsigned __int16 *)v257 + 1);
  uint64_t v252 = (unsigned int *)((char *)v257 + 2);
  v366 = v257 + 19;
  uint64_t v367 = 0;
  char v368 = 0;
  LODWORD(v370[1]) = 0;
  LODWORD(v370[0]) = 0;
  uint64_t v369 = 0x10000000100;
  BYTE4(v370[1]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)&v366, v20);
  unsigned int v21 = *(unsigned __int16 *)v257;
  *(void *)v339 = v257 + 11;
  uint64_t v340 = 0;
  char v341 = 0;
  LODWORD(v343[1]) = 0;
  LODWORD(v343[0]) = 0;
  uint64_t v342 = 0x10000000100;
  BYTE4(v343[1]) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v339, v21);
  *(void *)v334 = v257 + 27;
  uint64_t v335 = 0;
  char v336 = 0;
  LODWORD(v338[1]) = 0;
  LODWORD(v338[0]) = 0;
  uint64_t v337 = 0x10000000100;
  BYTE4(v338[1]) = 0;
  this = BlueFin::GlBitBuffer::Limit((uint64_t)v334, *((unsigned __int16 *)v257 + 1));
  int v22 = v257;
  uint64_t v249 = v257 + 1;
  if (*((_DWORD *)a2 + 5) - 10 * *((unsigned __int16 *)a2 + 8) == v257[1])
  {
    if (*(unsigned __int16 *)v257 >= 0x1Fu) {
      int v23 = 31;
    }
    else {
      int v23 = *(unsigned __int16 *)v257;
    }
    int v24 = v23;
    BlueFin::GlBitBuffer::Position((uint64_t)v371, *(unsigned __int16 *)v257 - v23);
    BlueFin::GlBitBuffer::Position((uint64_t)v339, *(unsigned __int16 *)v257 - v24);
    unsigned int v262 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v371, v24);
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v339, v24);
    int v259 = this;
    int v22 = v257;
    int v25 = v24;
  }
  else
  {
    int v25 = 0;
    int v259 = 0;
    unsigned int v262 = 0;
  }
  char v251 = v22 + 2;
  if (*((_DWORD *)a3 + 5) - 10 * *((unsigned __int16 *)a3 + 8) == v22[2])
  {
    int v50 = v25;
    if (*(unsigned __int16 *)v252 >= 0x1Fu) {
      int v51 = 31;
    }
    else {
      int v51 = *(unsigned __int16 *)v252;
    }
    int v52 = v51;
    BlueFin::GlBitBuffer::Position((uint64_t)&v366, *(unsigned __int16 *)v252 - v51);
    BlueFin::GlBitBuffer::Position((uint64_t)v334, *(unsigned __int16 *)v252 - v52);
    unsigned int v263 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v366, v52);
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v334, v52);
    unsigned int v258 = this;
    int v22 = v257;
    int v25 = v50;
    int v53 = v52;
  }
  else
  {
    unsigned int v258 = 0;
    int v53 = 0;
    unsigned int v263 = 0;
  }
  if ((*(_DWORD *)&v289[4] + v25 - *(_DWORD *)&v289[8]) >= 0x1F)
  {
    int v54 = v53;
    char v55 = v25;
    unsigned int v56 = (31 - v25);
    int v57 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v286, v56);
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v344, v56);
    unsigned int v262 = v57 | (v262 << ~v55);
    int v259 = this | (v259 << ~v55);
    int v25 = 31;
    int v22 = v257;
    int v53 = v54;
  }
  int v261 = v25;
  if ((HIDWORD(v269[0]) + v53 - LODWORD(v269[1])) >= 0x1F)
  {
    char v58 = v53;
    unsigned int v59 = (31 - v53);
    int v60 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v266, v59);
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v376, v59);
    unsigned int v263 = v60 | (v263 << ~v58);
    unsigned int v258 = this | (v258 << ~v58);
    int v53 = 31;
    int v22 = v257;
  }
  unsigned int v61 = *((_DWORD *)a2 + 5);
  if (v61 < 0x7D1) {
    goto LABEL_88;
  }
  unsigned int v62 = v22[1];
  int v63 = 5 * *(unsigned __int16 *)v22;
  if (v62 <= 2 * v63) {
    goto LABEL_88;
  }
  unsigned int v64 = 10 * (*(_DWORD *)&v289[4] - *(_DWORD *)&v289[8]) + 2000;
  BOOL v65 = v61 >= v64;
  unsigned int v66 = v61 - v64;
  if (v66 != 0 && v65 && (v67 = v62 - 2 * v63, BOOL v65 = v66 >= v67, v68 = v66 - v67, v68 != 0 && v65))
  {
    unsigned int v69 = v68 / 0xA;
    if (v69 - 0x10000 >= 0xFFFF001F) {
      int v70 = v69;
    }
    else {
      int v70 = 31;
    }
    if (v70 <= 31) {
      __int16 v71 = 31;
    }
    else {
      __int16 v71 = v70;
    }
    unsigned __int16 v72 = v71 - 31;
    if (v70 >= 31) {
      int v73 = 31;
    }
    else {
      int v73 = v70;
    }
    int v264 = v73;
    if (v73 + v72 <= HIDWORD(v374))
    {
      int v211 = v53;
      unsigned int v212 = v72;
      BlueFin::GlBitBuffer::Position((uint64_t)v371, v72);
      BlueFin::GlBitBuffer::Position((uint64_t)v339, v212);
      HIDWORD(v254) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v371, v264);
      this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v339, v264);
      LODWORD(v254) = this;
      int v53 = v211;
    }
    else
    {
      uint64_t v254 = 0;
    }
  }
  else
  {
LABEL_88:
    uint64_t v254 = 0;
    int v264 = 0;
  }
  unsigned int v74 = *((_DWORD *)a3 + 5);
  int v75 = HIDWORD(v269[0]);
  int v76 = v269[1];
  int v260 = v53;
  if (v74 >= 0x7D1
    && (unsigned int v77 = *v251 - 10 * *(unsigned __int16 *)v252,
        unsigned int v78 = v74 - 10 * (HIDWORD(v269[0]) - LODWORD(v269[1])) - 2000,
        BOOL v65 = v78 >= v77,
        unsigned int v79 = v78 - v77,
        v79 != 0 && v65))
  {
    unsigned int v80 = v79 / 0xA;
    if (v80 - 100001 >= 0xFFFE797E) {
      int v81 = v80;
    }
    else {
      int v81 = 31;
    }
    if (v81 <= 31) {
      __int16 v82 = 31;
    }
    else {
      __int16 v82 = v81;
    }
    unsigned __int16 v83 = v82 - 31;
    if (v81 >= 31) {
      int v84 = 31;
    }
    else {
      int v84 = v81;
    }
    if (v84 + v83 <= HIDWORD(v369))
    {
      unsigned int v206 = v83;
      BlueFin::GlBitBuffer::Position((uint64_t)&v366, v83);
      BlueFin::GlBitBuffer::Position((uint64_t)v334, v206);
      HIDWORD(v253) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v366, v84);
      this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v334, v84);
      LODWORD(v253) = this;
      int v75 = HIDWORD(v269[0]);
      int v76 = v269[1];
    }
    else
    {
      uint64_t v253 = 0;
    }
  }
  else
  {
    uint64_t v253 = 0;
    int v84 = 0;
  }
  int v85 = *(_DWORD *)&v289[4];
  int v86 = *(_DWORD *)&v289[8];
  BOOL v87 = *(_DWORD *)&v289[4] == *(_DWORD *)&v289[8];
  if (*(_DWORD *)&v289[4] == *(_DWORD *)&v289[8] && v75 == v76) {
    goto LABEL_315;
  }
  int v88 = 0;
  int v89 = 0;
  char v256 = 0;
  while (1)
  {
    unsigned int v90 = *((_DWORD *)a2 + 5) - 10 * (v85 - v86);
    unsigned int v91 = *((_DWORD *)a3 + 5) - 10 * (v75 - v76);
    if (v87 || v90 > v91)
    {
      int v261 = 0;
      goto LABEL_120;
    }
    int v92 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v286, 1u);
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v344, 1u);
    unsigned int v262 = v92 | (2 * v262);
    int v259 = this | (2 * v259);
    int v93 = v261;
    if (v261 >= 31) {
      int v93 = 31;
    }
    int v261 = v93 + 1;
    if (HIDWORD(v374) == LODWORD(v375[0]))
    {
      int v264 = 0;
      goto LABEL_120;
    }
    if (v264 < 2)
    {
      if (*(unsigned __int16 *)v257 + *((unsigned __int16 *)a2 + 8) != (unsigned __int16)(*(_WORD *)&v289[4]
                                                                                         - *(_WORD *)&v289[8]
                                                                                         + 201))
        goto LABEL_120;
      int v96 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position((uint64_t)v371, 0);
      HIDWORD(v254) = BlueFin::GlBitBuffer::GetU(v96, 1u);
      BlueFin::GlBitBuffer::Position((uint64_t)v339, 0);
      this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v339, 1u);
      LODWORD(v254) = this;
      int v95 = v264;
    }
    else
    {
      int v94 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v371, 1u);
      this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v339, 1u);
      HIDWORD(v254) = v94 | (2 * HIDWORD(v254));
      LODWORD(v254) = this | (2 * v254);
      int v95 = v264;
      if (v264 >= 31) {
        int v95 = 31;
      }
    }
    int v264 = v95 + 1;
LABEL_120:
    BOOL v97 = HIDWORD(v269[0]) == LODWORD(v269[1]) || v91 > v90;
    if (v97)
    {
      int v260 = 0;
    }
    else
    {
      int v98 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v266, 1u);
      this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v376, 1u);
      unsigned int v263 = v98 | (2 * v263);
      unsigned int v258 = this | (2 * v258);
      int v99 = v260;
      if (v260 >= 31) {
        int v99 = 31;
      }
      int v260 = v99 + 1;
      if (HIDWORD(v369) == LODWORD(v370[0]))
      {
        int v84 = 0;
      }
      else if (v84 < 2)
      {
        if (*(unsigned __int16 *)v252 + *((unsigned __int16 *)a3 + 8) == (unsigned __int16)(WORD2(v269[0])
                                                                                           - LOWORD(v269[1])
                                                                                           + 201))
        {
          BlueFin::GlBitBuffer::Position((uint64_t)&v366, 0);
          HIDWORD(v253) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v366, 1u);
          BlueFin::GlBitBuffer::Position((uint64_t)v334, 0);
          this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v334, 1u);
          LODWORD(v253) = this;
          ++v84;
        }
      }
      else
      {
        int v100 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v366, 1u);
        this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v334, 1u);
        HIDWORD(v253) = v100 | (2 * HIDWORD(v253));
        LODWORD(v253) = this | (2 * v253);
        if (v84 >= 31) {
          int v101 = 31;
        }
        else {
          int v101 = v84;
        }
        int v84 = v101 + 1;
      }
    }
    if (v264 <= 0) {
      unsigned int v102 = 0;
    }
    else {
      unsigned int v102 = HIDWORD(v254) ^ (HIDWORD(v254) >> 1);
    }
    if (v264 > 0) {
      unsigned int v103 = ~v254;
    }
    else {
      unsigned int v103 = 0;
    }
    if (v84 < 1)
    {
      unsigned int v104 = 0;
      unsigned int v105 = 0;
    }
    else
    {
      unsigned int v104 = HIDWORD(v253) ^ (HIDWORD(v253) >> 1);
      unsigned int v105 = ~(v253 | (v253 >> 1));
    }
    unsigned int v106 = v262 ^ (v262 >> 1);
    unsigned int v107 = v263 ^ (v263 >> 1);
    unsigned int v108 = ~(v258 | (v258 >> 1));
    if (v256)
    {
      v88 *= 2;
      int v109 = (2 * (v106 & 1) - 1) << ((v259 & 1) == 0);
      int v110 = (2 * (v107 & 1) - 1) << (v108 & 1);
      BOOL v111 = __OFADD__(v110, v109);
      int v112 = v110 + v109;
      if ((v112 < 0) ^ v111 | (v112 == 0)) {
        int v113 = 0;
      }
      else {
        int v113 = 1;
      }
      int v89 = v113 | (2 * v89);
      int v114 = v112 + ((2 * (v102 & 1) - 1) << (v103 & 1)) + ((2 * (v104 & 1) - 1) << (v105 & 1));
      int v116 = v260;
      int v115 = v261;
      if (v114) {
        v88 |= v114 > 0;
      }
      goto LABEL_158;
    }
    if (v90 == v91)
    {
      int v88 = 0;
      int v89 = 0;
      int v117 = 30;
      int v116 = v260;
      int v115 = v261;
      do
      {
        int v118 = (2 * ((v106 >> v117) & 1) - 1) << ((~v259 >> v117) & 1);
        int v119 = (2 * ((v107 >> v117) & 1) - 1) << ((v108 >> v117) & 1);
        BOOL v111 = __OFADD__(v118, v119);
        int v120 = v118 + v119;
        if ((v120 < 0) ^ v111 | (v120 == 0)) {
          int v121 = 0;
        }
        else {
          int v121 = 1;
        }
        this = ((2 * ((v104 >> v117) & 1) - 1) << ((v105 >> v117) & 1))
             + ((2 * ((v102 >> v117) & 1) - 1) << ((v103 >> v117) & 1));
        int v89 = v121 | (2 * v89);
        --v117;
        int v88 = ((int)this + v120 > 0) | (2 * v88);
      }
      while (v117 != -1);
LABEL_158:
      char v256 = 1;
      goto LABEL_160;
    }
    char v256 = 0;
    int v116 = v260;
    int v115 = v261;
LABEL_160:
    BOOL v123 = v115 == 32 && (v262 == -119717287 || v262 == 119717286);
    BOOL v125 = v116 == 32 && (v263 == -119717287 || v263 == 119717286);
    BOOL v127 = v115 == 32 && v116 == 32;
    BOOL v128 = v89 == 78898037 && v127;
    if (v264 != 32) {
      BOOL v127 = 0;
    }
    if (v84 != 32) {
      BOOL v127 = 0;
    }
    BOOL v129 = v88 == 78898037 && v127;
    int v85 = *(_DWORD *)&v289[4];
    int v86 = *(_DWORD *)&v289[8];
    int v75 = HIDWORD(v269[0]);
    int v76 = v269[1];
    if (!v123 && !v125 && !v128 && !v129) {
      goto LABEL_260;
    }
    int v130 = HIDWORD(v269[0]) - LODWORD(v269[1]);
    if (v123) {
      int v130 = *(_DWORD *)&v289[4] - *(_DWORD *)&v289[8];
    }
    if (v125)
    {
      if (v263 == 119717286) {
        int v131 = 2;
      }
      else {
        int v131 = 1;
      }
      *(_DWORD *)uint64_t v7 = v131;
    }
    if (!*((unsigned char *)v257 + 140))
    {
      *((unsigned char *)v257 + 140) = 1;
      unsigned int v132 = 10 * v130 + 20;
      v257[37] = *((_DWORD *)a2 + 5) - v132;
      if ((*((unsigned char *)a2 + 12) & 0x80) != 0)
      {
        double v133 = *((double *)a2 + 4) + (double)v132 / -1000.0;
        *((unsigned char *)v257 + 143) = 1;
        BlueFin::GlMeWinMgr::SetTMDecodeInfo(*(void *)(v7 + 296), v250, 1, v133);
      }
    }
    memset(v364, 0, sizeof(v364));
    int v365 = 0;
    memset(v362, 0, sizeof(v362));
    int v363 = 0;
    memset(v360, 0, sizeof(v360));
    int v361 = 0;
    memset(v358, 0, sizeof(v358));
    int v359 = 0;
    uint64_t v324 = 0;
    v323 = 0;
    char v325 = 0;
    uint64_t v326 = 0;
    memset(v327, 0, 13);
    uint64_t v319 = 0;
    int v318 = 0;
    char v320 = 0;
    uint64_t v321 = 0;
    memset(v322, 0, 13);
    uint64_t v314 = 0;
    uint64_t v313 = 0;
    char v315 = 0;
    uint64_t v316 = 0;
    memset(v317, 0, 13);
    *(void *)v328 = v364;
    uint64_t v329 = 0;
    char v330 = 0;
    int v332 = 0;
    long long v331 = xmmword_263BB2A50;
    char v333 = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)v328, 0xC8u);
    v323 = v362;
    uint64_t v324 = 0;
    char v325 = 0;
    v327[2] = 0;
    v327[0] = 0;
    uint64_t v326 = 0xE0000000E0;
    LOBYTE(v327[3]) = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)&v323, 0xC8u);
    int v318 = v360;
    uint64_t v319 = 0;
    char v320 = 0;
    v322[2] = 0;
    v322[0] = 0;
    uint64_t v321 = 0xE0000000E0;
    LOBYTE(v322[3]) = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)&v318, 0xC8u);
    uint64_t v313 = v358;
    uint64_t v314 = 0;
    char v315 = 0;
    v317[2] = 0;
    v317[0] = 0;
    uint64_t v316 = 0xE0000000E0;
    LOBYTE(v317[3]) = 0;
    this = BlueFin::GlBitBuffer::Limit((uint64_t)&v313, 0xC8u);
    int v312 = -1;
    int v311 = -1;
    unsigned int v134 = *((_DWORD *)a2 + 5);
    int v135 = *((unsigned __int16 *)a2 + 8);
    unsigned int v136 = v134 - 10 * v135;
    if (v136 == *v249)
    {
      unsigned int v137 = *(unsigned __int16 *)v257;
      if (v137 + v135 - (*(_DWORD *)&v289[4] - *(_DWORD *)&v289[8]) >= 0xC8)
      {
        unsigned int v138 = 10 * (*(_DWORD *)&v289[4] - *(_DWORD *)&v289[8]) + 2020;
        BOOL v65 = v134 >= v138;
        unsigned int v139 = v134 - v138;
        if (v65)
        {
          int v312 = v139;
          BOOL v65 = v136 >= v139;
          unsigned int v140 = v136 - v139;
          if (v140 != 0 && v65)
          {
            unsigned int v141 = v140 / 0xA;
            if (v141 <= v137)
            {
              unsigned int v142 = (unsigned __int16)(v137 - v141);
              BlueFin::GlBitBuffer::Position((uint64_t)v371, v142);
              this = BlueFin::GlBitBuffer::Position((uint64_t)v339, v142);
              int v143 = HIDWORD(v374) - LODWORD(v375[0]);
              if (HIDWORD(v374) - LODWORD(v375[0]) >= (DWORD1(v331) - DWORD2(v331))) {
                int v143 = DWORD1(v331) - DWORD2(v331);
              }
              if (v143 >= 1)
              {
                do
                {
                  if (v143 >= 32) {
                    unsigned __int8 v144 = 32;
                  }
                  else {
                    unsigned __int8 v144 = v143;
                  }
                  unsigned int v145 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v371, v144);
                  BlueFin::GlBitBuffer::PutU((uint64_t *)v328, v145, v144);
                  unsigned int v146 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v339, v144);
                  this = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v323, v146, v144);
                  int v143 = HIDWORD(v374) - LODWORD(v375[0]);
                  if (HIDWORD(v374) - LODWORD(v375[0]) >= (DWORD1(v331) - DWORD2(v331))) {
                    int v143 = DWORD1(v331) - DWORD2(v331);
                  }
                }
                while (v143 > 0);
              }
            }
          }
          int v147 = DWORD1(v331) - DWORD2(v331);
          if (DWORD1(v331) != DWORD2(v331))
          {
            *(_DWORD *)&v289[8] = 0;
            char v290 = 0;
            LODWORD(v347[0]) = 0;
            BYTE4(v347[1]) = 0;
            if (*(_DWORD *)&v289[4] < v147) {
              int v147 = *(_DWORD *)&v289[4];
            }
            if (v147 >= 1)
            {
              do
              {
                if (v147 >= 32) {
                  unsigned __int8 v148 = 32;
                }
                else {
                  unsigned __int8 v148 = v147;
                }
                unsigned int v149 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v286, v148);
                BlueFin::GlBitBuffer::PutU((uint64_t *)v328, v149, v148);
                unsigned int v150 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v344, v148);
                this = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v323, v150, v148);
                int v147 = *(_DWORD *)&v289[4] - *(_DWORD *)&v289[8];
                if (*(_DWORD *)&v289[4] - *(_DWORD *)&v289[8] >= (DWORD1(v331) - DWORD2(v331))) {
                  int v147 = DWORD1(v331) - DWORD2(v331);
                }
              }
              while (v147 > 0);
            }
          }
        }
      }
    }
    unsigned int v151 = *((_DWORD *)a3 + 5);
    int v152 = *((unsigned __int16 *)a3 + 8);
    unsigned int v153 = v151 - 10 * v152;
    if (v153 == *v251)
    {
      unsigned int v154 = *(unsigned __int16 *)v252;
      if (v154 + v152 - (HIDWORD(v269[0]) - LODWORD(v269[1])) >= 0xC8)
      {
        unsigned int v155 = 10 * (HIDWORD(v269[0]) - LODWORD(v269[1])) + 2020;
        BOOL v65 = v151 >= v155;
        unsigned int v156 = v151 - v155;
        if (v65)
        {
          int v311 = v156;
          BOOL v65 = v153 >= v156;
          unsigned int v157 = v153 - v156;
          if (v157 != 0 && v65)
          {
            unsigned int v158 = v157 / 0xA;
            if (v158 <= v154)
            {
              unsigned int v159 = (unsigned __int16)(v154 - v158);
              BlueFin::GlBitBuffer::Position((uint64_t)&v366, v159);
              this = BlueFin::GlBitBuffer::Position((uint64_t)v334, v159);
              int v160 = HIDWORD(v369) - LODWORD(v370[0]);
              if (HIDWORD(v369) - LODWORD(v370[0]) >= (HIDWORD(v321) - v322[0])) {
                int v160 = HIDWORD(v321) - v322[0];
              }
              if (v160 >= 1)
              {
                do
                {
                  if (v160 >= 32) {
                    unsigned __int8 v161 = 32;
                  }
                  else {
                    unsigned __int8 v161 = v160;
                  }
                  unsigned int v162 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v366, v161);
                  BlueFin::GlBitBuffer::PutU((uint64_t *)&v318, v162, v161);
                  unsigned int v163 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v334, v161);
                  this = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v313, v163, v161);
                  int v160 = HIDWORD(v369) - LODWORD(v370[0]);
                  if (HIDWORD(v369) - LODWORD(v370[0]) >= (HIDWORD(v321) - v322[0])) {
                    int v160 = HIDWORD(v321) - v322[0];
                  }
                }
                while (v160 > 0);
              }
            }
          }
          int v164 = HIDWORD(v321) - v322[0];
          if (HIDWORD(v321) != v322[0])
          {
            LODWORD(v269[1]) = 0;
            BYTE4(v269[2]) = 0;
            v380[0] = 0;
            LOBYTE(v380[3]) = 0;
            if (HIDWORD(v269[0]) < v164) {
              int v164 = HIDWORD(v269[0]);
            }
            if (v164 >= 1)
            {
              do
              {
                if (v164 >= 32) {
                  unsigned __int8 v165 = 32;
                }
                else {
                  unsigned __int8 v165 = v164;
                }
                unsigned int v166 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v266, v165);
                BlueFin::GlBitBuffer::PutU((uint64_t *)&v318, v166, v165);
                unsigned int v167 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v376, v165);
                this = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v313, v167, v165);
                int v164 = HIDWORD(v269[0]) - LODWORD(v269[1]);
                if (HIDWORD(v269[0]) - LODWORD(v269[1]) >= (HIDWORD(v321) - v322[0])) {
                  int v164 = HIDWORD(v321) - v322[0];
                }
              }
              while (v164 > 0);
            }
          }
        }
      }
    }
    int v168 = DWORD2(v331);
    int v169 = v322[0];
    if (DWORD2(v331) == 200 || v322[0] == 200) {
      break;
    }
    int v85 = *(_DWORD *)&v289[4];
    int v86 = *(_DWORD *)&v289[8];
    int v75 = HIDWORD(v269[0]);
    int v76 = v269[1];
LABEL_260:
    BOOL v87 = v85 == v86;
    if (v85 == v86 && v75 == v76) {
      goto LABEL_315;
    }
  }
  uint64_t v356 = 0;
  *(void *)v355 = 0;
  uint64_t v357 = 0;
  memset(v354, 0, sizeof(v354));
  uint64_t v352 = 0;
  *(void *)v351 = 0;
  uint64_t v353 = 0;
  memset(v350, 0, sizeof(v350));
  BlueFin::GLNFrameMgrUtils::MeanderDecode((uint64_t)v364, v355, (unsigned int *)0xC0, 1);
  v355[0] ^= __PAIR64__(v355[0], v355[1]) >> 31;
  v355[1] ^= __PAIR64__(v355[1], v356) >> 31;
  LODWORD(v356) = v356 ^ (2 * v356);
  BlueFin::GLNFrameMgrUtils::MeanderDecode((uint64_t)v360, v351, (unsigned int *)0xC0, 1);
  v351[0] ^= __PAIR64__(v351[0], v351[1]) >> 31;
  v351[1] ^= __PAIR64__(v351[1], v352) >> 31;
  LODWORD(v352) = v352 ^ (2 * v352);
  BlueFin::GLNFrameMgrUtils::MeanderDecode((uint64_t)v364, (const unsigned int *)&v356 + 1, (unsigned int *)0xC0, 0);
  HIDWORD(v356) ^= __PAIR64__(HIDWORD(v356), v357) >> 31;
  LODWORD(v357) = (__PAIR64__(v357, HIDWORD(v357)) >> 31) ^ v357;
  HIDWORD(v357) ^= 2 * HIDWORD(v357);
  BlueFin::GLNFrameMgrUtils::MeanderDecode((uint64_t)v360, (const unsigned int *)&v352 + 1, (unsigned int *)0xC0, 0);
  uint64_t v170 = 0;
  HIDWORD(v352) ^= __PAIR64__(HIDWORD(v352), v353) >> 31;
  LODWORD(v353) = (__PAIR64__(v353, HIDWORD(v353)) >> 31) ^ v353;
  HIDWORD(v353) ^= 2 * HIDWORD(v353);
  unsigned int v171 = v362[0];
  unsigned int v172 = v358[0];
  do
  {
    unsigned int v173 = v171;
    unsigned int v174 = v172;
    uint64_t v175 = v170++ >> 1;
    unsigned int v171 = *((_DWORD *)v362 + v170);
    unsigned int v176 = (__PAIR64__(v173, v171) >> 30) | (__PAIR64__(v173, v171) >> 31) | v173;
    unsigned int v172 = *((_DWORD *)v358 + v170);
    unsigned int v177 = (__PAIR64__(v174, v172) >> 30) | (__PAIR64__(v174, v172) >> 31) | v174;
    unint64_t v178 = (char *)v354 + 4 * v175;
    int v180 = *((_DWORD *)v178 + 3);
    this = (uint64_t)(v178 + 12);
    int v179 = v180;
    char v181 = (char *)v350 + 4 * v175;
    unsigned int v184 = *((_DWORD *)v181 + 3);
    v182 = (unsigned int *)(v181 + 12);
    unsigned int v183 = v184;
    int v185 = 16 * (v170 & 1);
    int v186 = *((_DWORD *)v354 + v175);
    int v187 = *((_DWORD *)v350 + v175);
    unsigned int v188 = -4;
    do
    {
      v188 += 4;
      uint64_t v189 = (v176 >> v188) & 0xFLL;
      v186 |= byte_263BB2A70[v189] << v185;
      v179 |= byte_263BB2A70[v189 + 16] << v185;
      uint64_t v190 = (v177 >> v188) & 0xFLL;
      v187 |= byte_263BB2A70[v190] << v185;
      v183 |= byte_263BB2A70[v190 + 16] << v185;
      v185 += 2;
    }
    while (v188 < 0x1C);
    *((_DWORD *)v354 + v175) = v186;
    *(_DWORD *)this = v179;
    *((_DWORD *)v350 + v175) = v187;
    unsigned int *v182 = v183;
  }
  while (v170 != 6);
  uint64_t v191 = 0;
  int v192 = 0;
  int v193 = 0;
  v349[0] = v355;
  v349[1] = (char *)&v356 + 4;
  uint64_t v194 = 0;
  v349[2] = v351;
  v349[3] = (char *)&v352 + 4;
  v348[0] = &v312;
  v348[1] = &v312;
  v348[2] = &v311;
  v348[3] = &v311;
  v310[0] = v168 == 200;
  v310[1] = v168 == 200;
  v310[2] = v169 == 200;
  v310[3] = v169 == 200;
  do
  {
    if (v310[v191])
    {
      unsigned int v195 = (BlueFin::GLNFrameMgrUtils *)v349[v191];
      this = BlueFin::GLNFrameMgrUtils::Parity(v195, v182);
      if (this)
      {
        if (!v193
          || *(_DWORD *)v193 == *(_DWORD *)v195
          && *((_DWORD *)v193 + 1) == *((_DWORD *)v195 + 1)
          && (*((_DWORD *)v195 + 2) ^ *((_DWORD *)v193 + 2)) < 0x1000
          || (BOOL v97 = v192 <= 0, --v192, v97))
        {
          uint64_t v194 = (unsigned int *)v348[v191];
          ++v192;
          int v193 = v195;
        }
      }
    }
    ++v191;
  }
  while (v191 != 4);
  if (v192 > 1)
  {
    unsigned int v196 = *(_DWORD *)v193;
    int v197 = *(_DWORD *)v193 >> 28;
    *((unsigned char *)v257 + 144) = 1;
    unsigned int v198 = *v194;
    unsigned int v199 = *((_DWORD *)a2 + 5) - *v194;
    *(void *)float v307 = &unk_270EBA3E8;
    memset(&v307[2], 0, 10);
    memset(v309, 0, 12);
    uint64_t v308 = 0;
    LODWORD(v308) = *(_DWORD *)v193 >> 1;
    HIDWORD(v200) = *(_DWORD *)v193;
    LODWORD(v200) = *((_DWORD *)v193 + 1);
    HIDWORD(v308) = v200 >> 1;
    HIDWORD(v200) = *((_DWORD *)v193 + 1);
    LODWORD(v200) = *((_DWORD *)v193 + 2);
    v309[0] = (v200 >> 1) & 0xFFFFF800;
    LOBYTE(v307[2]) = *v250;
    char v201 = LOBYTE(v307[2]) - 59;
    if (LOBYTE(v307[2]) - 52 >= 0xE) {
      char v201 = -8;
    }
    BYTE1(v307[2]) = v201;
    *(void *)((char *)&v307[2] + 2) = 0;
    unsigned int v202 = *((_DWORD *)a2 + 6);
    BOOL v65 = v202 >= v199;
    unsigned int v203 = v202 - v199;
    if (v203 != 0 && v65) {
      LOWORD(v307[4]) = v203;
    }
    if (v197 == 1 && !*((unsigned char *)v257 + 142))
    {
      int v205 = 1;
      HIWORD(v307[2]) = 1;
      int v217 = 1000 * (60 * ((v196 >> 13) & 0x3F) + 3600 * ((v196 >> 19) & 0x1F) + (((int)(v196 << 19) >> 31) & 0x1E));
      v307[3] = v217;
      *((unsigned char *)v257 + 140) = 1;
      if (*((unsigned char *)v257 + 141))
      {
        unsigned int v218 = v257[38] + v198 - v257[37];
        if (v218 > 0x5265BFF) {
          v218 -= 86400000;
        }
        *((unsigned char *)v257 + 142) = v217 == v218;
      }
      *((unsigned char *)v257 + 141) = 1;
      v257[37] = v198;
      v257[38] = v217;
LABEL_310:
      double v213 = *((double *)a2 + 4);
    }
    else
    {
      if (*((unsigned char *)v257 + 141))
      {
        unsigned int v204 = v257[38] + v198 - v257[37];
        if (v204 > 0x5265BFF) {
          v204 -= 86400000;
        }
        v307[3] = v204;
        HIWORD(v307[2]) = 1;
        v257[37] = v198;
        v257[38] = v204;
        int v205 = *((unsigned __int8 *)v257 + 140);
        goto LABEL_310;
      }
      int v205 = *((unsigned __int8 *)v257 + 140);
      if (*((unsigned char *)v257 + 140))
      {
        v257[37] = v198;
        v257[38] = 2000 * v197 - 2000;
      }
      double v213 = *((double *)a2 + 4);
      double v214 = floor(v213 * 1000.0);
      double v215 = fmod(v214, 4294967300.0);
      if (v214 <= 4294967300.0) {
        double v215 = v214;
      }
      if (v215 < -4294967300.0) {
        double v215 = -fmod(-v215, 4294967300.0);
      }
      if (v215 < 0.0) {
        unsigned int v216 = --v215;
      }
      else {
        unsigned int v216 = v215;
      }
      v307[3] = v216 - v199;
    }
    *(double *)((char *)v309 + 4) = v213 + (double)v199 / -1000.0;
    if (v205 && (*((unsigned char *)a2 + 12) & 0x80) != 0)
    {
      *((unsigned char *)v257 + 143) = 1;
      BlueFin::GlMeWinMgr::SetTMDecodeInfo(*(void *)(v7 + 296), v250, 1, v213 + (double)v199 / -1000.0);
    }
    this = (*(uint64_t (**)(void, _DWORD *))(**(void **)(v7 + 288) + 56))(*(void *)(v7 + 288), v307);
  }
LABEL_315:
  if (!*((unsigned char *)v257 + 140))
  {
    BlueFin::GlMeGlonassFrameMgr::SaveSearchBits((BlueFin::GlMeGlonassFrameMgr *)(v257 + 3), v257 + 11, v249, v257, (unsigned __int16 *)a2 + 22, (const unsigned int *)a2 + 43, (const unsigned int *)*((unsigned int *)a2 + 5), *((unsigned __int16 *)a2 + 8), v246);
    this = BlueFin::GlMeGlonassFrameMgr::SaveSearchBits((BlueFin::GlMeGlonassFrameMgr *)(v257 + 19), v257 + 27, v251, v252, (unsigned __int16 *)a3 + 22, (const unsigned int *)a3 + 43, (const unsigned int *)*((unsigned int *)a3 + 5), *((unsigned __int16 *)a3 + 8), v247);
  }
  unsigned int v3 = v248;
  if (*(unsigned char *)(SearchStateMemory + 140)) {
    goto LABEL_17;
  }
  return this;
}

uint64_t BlueFin::GlMeGlonassFrameMgr::GetGlnsStrPhsInSym(BlueFin::GlMeGlonassFrameMgr *this, unsigned int a2, unsigned __int8 *a3)
{
  *a3 = -1;
  if (*((_DWORD *)this + 1)) {
    return 0;
  }
  uint64_t SearchStateMemory = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory(this);
  if (!*(unsigned char *)(SearchStateMemory + 140)) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(SearchStateMemory + 148);
  if (v7 <= a2) {
    unsigned __int8 v8 = (a2 - v7 + 5) / 0xA - -56 * (((42949673 * (unint64_t)((a2 - v7 + 5) / 0xA)) >> 32) >> 1);
  }
  else {
    unsigned __int8 v8 = -56 * (((42949673 * (unint64_t)((v7 - a2 + 5) / 0xA)) >> 32) >> 1)
  }
       - (v7 - a2 + 5) / 0xA
       - 56;
  *a3 = v8;
  return 1;
}

uint64_t BlueFin::GlMeGlonassFrameMgr::GetSystemTime(BlueFin::GlMeGlonassFrameMgr *a1, _DWORD *a2, _DWORD *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned char *a7, _DWORD *a8)
{
  int v8 = *((_DWORD *)a1 + 1);
  if (v8 == 1) {
    return 0;
  }
  if (v8)
  {
    DeviceFaultNotify("glme_glonassframemgr.cpp", 355, "GetSystemTime", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_glonassframemgr.cpp", 355, "false");
  }
  uint64_t SearchStateMemory = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory(a1);
  *a2 = *(_DWORD *)(SearchStateMemory + 148);
  *a3 = *(_DWORD *)(SearchStateMemory + 152);
  *a4 = *(unsigned char *)(SearchStateMemory + 140);
  *a5 = *(unsigned char *)(SearchStateMemory + 141);
  *a6 = *(unsigned char *)(SearchStateMemory + 142);
  *a7 = *(unsigned char *)(SearchStateMemory + 144);
  *a8 = *(_DWORD *)a1;
  return 1;
}

BOOL BlueFin::GlMeGlonassFrameMgr::IsTMFound(BlueFin::GlMeGlonassFrameMgr *this)
{
  int v1 = *((_DWORD *)this + 1);
  if (v1 == 1) {
    return 1;
  }
  if (v1)
  {
    DeviceFaultNotify("glme_glonassframemgr.cpp", 384, "IsTMFound", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_glonassframemgr.cpp", 384, "false");
  }
  return *(unsigned char *)(BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory(this) + 143) != 0;
}

uint64_t BlueFin::GlMeGlonassFrameMgr::SaveSearchBits(BlueFin::GlMeGlonassFrameMgr *this, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned __int16 *a5, const unsigned int *a6, const unsigned int *a7, unsigned int a8, unsigned __int16 a9)
{
  unsigned int v10 = a7;
  uint64_t v73 = *MEMORY[0x263EF8340];
  unsigned int v66 = 0;
  uint64_t v67 = 0;
  char v68 = 0;
  memset(v70, 0, 13);
  uint64_t v69 = 0;
  char v62 = 0;
  uint64_t v61 = 0;
  *(void *)&v63[4] = 0;
  uint64_t v64 = 0;
  char v65 = 0;
  int v57 = 0;
  int v50 = 0;
  int v43 = 0;
  int v36 = 0;
  long long v14 = *((_OWORD *)this + 1);
  v72[0] = *(_OWORD *)this;
  v72[1] = v14;
  long long v15 = *((_OWORD *)a2 + 1);
  v71[0] = *(_OWORD *)a2;
  v71[1] = v15;
  if (a7 - 10 * a8 == *a3)
  {
    int v16 = *(unsigned __int16 *)a4;
  }
  else
  {
    int v16 = 0;
    *(_WORD *)a4 = 0;
  }
  int v17 = v16 + a8;
  unsigned int v66 = this;
  uint64_t v67 = 0;
  if (v17 <= 256) {
    int v17 = 256;
  }
  unsigned int v18 = v17 - 256;
  char v68 = 0;
  v70[2] = 0;
  v70[0] = 0;
  uint64_t v69 = 0x10000000100;
  LOBYTE(v70[3]) = 0;
  int v60 = a2;
  uint64_t v61 = 0;
  char v62 = 0;
  HIDWORD(v64) = 0;
  *(_DWORD *)&v63[8] = 0;
  *(void *)int v63 = 0x10000000100;
  char v65 = 0;
  v53[0] = 0;
  v53[1] = a5;
  char v54 = 1;
  int v58 = 0;
  int v56 = 0;
  uint64_t v55 = 0x10000000100;
  char v59 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v53, a8);
  v46[0] = 0;
  v46[1] = a6;
  char v47 = 1;
  int v51 = 0;
  int v49 = 0;
  uint64_t v48 = 0x10000000100;
  char v52 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v46, a8);
  v39[0] = v72;
  v39[1] = 0;
  char v40 = 0;
  int v44 = 0;
  int v42 = 0;
  uint64_t v41 = 0x10000000100;
  char v45 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v39, *(unsigned __int16 *)a4);
  BlueFin::GlBitBuffer::Position((uint64_t)v39, v18);
  v32[0] = v71;
  v32[1] = 0;
  char v33 = 0;
  int v37 = 0;
  int v35 = 0;
  uint64_t v34 = 0x10000000100;
  char v38 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v32, *(unsigned __int16 *)a4);
  uint64_t result = BlueFin::GlBitBuffer::Position((uint64_t)v32, v18);
  int v20 = HIDWORD(v41);
  for (int i = v42; HIDWORD(v41) != v42; int i = v42)
  {
    int v22 = v20 - i;
    if (v22 >= 32) {
      LOBYTE(v22) = 32;
    }
    unsigned int v23 = v22;
    unsigned int v24 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v39, v22);
    BlueFin::GlBitBuffer::PutU((uint64_t *)&v66, v24, v23);
    unsigned int v25 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v32, v23);
    uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v60, v25, v23);
    int v20 = HIDWORD(v41);
  }
  int v26 = HIDWORD(v55);
  for (int j = v56; HIDWORD(v55) != v56; int j = v56)
  {
    int v28 = v26 - j;
    if (v28 >= 32) {
      LOBYTE(v28) = 32;
    }
    unsigned int v29 = v28;
    unsigned int v30 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v53, v28);
    BlueFin::GlBitBuffer::PutU((uint64_t *)&v66, v30, v29);
    unsigned int v31 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v46, v29);
    uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v60, v31, v29);
    int v26 = HIDWORD(v55);
  }
  *(_WORD *)a4 = v70[0];
  *a3 = v10;
  return result;
}

uint64_t BlueFin::GlMeGlonassFrameMgr::ParseBits(BlueFin::GlMeGlonassFrameMgr *this, BlueFin::GlMeDSPDataBits *a2, unsigned int *a3, unsigned int *a4, BOOL *a5, int a6)
{
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  char v59 = 0;
  memset(v61, 0, 13);
  uint64_t v60 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  memset(v56, 0, 13);
  uint64_t v55 = 0;
  uint64_t SearchStateMemory = BlueFin::GlMeGlonassFrameMgr::GetSearchStateMemory(this);
  *a5 = 0;
  v62[0] = (char *)a2 + 44;
  v62[1] = 0;
  char v63 = 0;
  int v65 = 0;
  long long v64 = xmmword_263BB2530;
  char v66 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v62, *((unsigned __int16 *)a2 + 8));
  char v47 = a3;
  if (a6)
  {
    uint64_t v11 = SearchStateMemory + 188;
    uint64_t v57 = SearchStateMemory + 188;
    uint64_t v58 = 0;
    char v59 = 0;
    LODWORD(v61[1]) = 0;
    LODWORD(v61[0]) = 0;
    uint64_t v60 = 0x8000000080;
    BYTE4(v61[1]) = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)&v57, 0x64u);
    uint64_t v12 = SearchStateMemory + 204;
    uint64_t v52 = SearchStateMemory + 204;
    uint64_t v53 = 0;
    char v54 = 0;
    LODWORD(v56[1]) = 0;
    LODWORD(v56[0]) = 0;
    uint64_t v55 = 0x8000000080;
    BYTE4(v56[1]) = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)&v52, 0x64u);
    *(_WORD *)uint64_t SearchStateMemory = 0;
    unsigned int v13 = *((_DWORD *)a2 + 5);
    if (v13 - 20 * *((unsigned __int16 *)a2 + 8) != *(_DWORD *)(SearchStateMemory + 4))
    {
      *(void *)uint64_t v12 = 0;
      *(void *)(SearchStateMemory + 212) = 0;
      unsigned int v13 = *((_DWORD *)a2 + 5);
    }
    *(_DWORD *)(SearchStateMemory + 4) = v13;
    long long v14 = (unsigned char *)(SearchStateMemory + 252);
  }
  else
  {
    uint64_t v11 = SearchStateMemory + 220;
    uint64_t v57 = SearchStateMemory + 220;
    uint64_t v58 = 0;
    char v59 = 0;
    LODWORD(v61[1]) = 0;
    LODWORD(v61[0]) = 0;
    uint64_t v60 = 0x8000000080;
    BYTE4(v61[1]) = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)&v57, 0x64u);
    uint64_t v12 = SearchStateMemory + 236;
    uint64_t v52 = SearchStateMemory + 236;
    uint64_t v53 = 0;
    char v54 = 0;
    LODWORD(v56[1]) = 0;
    LODWORD(v56[0]) = 0;
    uint64_t v55 = 0x8000000080;
    BYTE4(v56[1]) = 0;
    BlueFin::GlBitBuffer::Limit((uint64_t)&v52, 0x64u);
    *(_WORD *)(SearchStateMemory + 2) = 0;
    unsigned int v13 = *((_DWORD *)a2 + 5);
    if (v13 - 20 * *((unsigned __int16 *)a2 + 8) != *(_DWORD *)(SearchStateMemory + 8))
    {
      *(void *)uint64_t v12 = 0;
      *(void *)(SearchStateMemory + 244) = 0;
      unsigned int v13 = *((_DWORD *)a2 + 5);
    }
    *(_DWORD *)(SearchStateMemory + 8) = v13;
    long long v14 = (unsigned char *)(SearchStateMemory + 253);
  }
  LOBYTE(v15) = *v14 != 0;
  unsigned int v16 = *(_DWORD *)(SearchStateMemory + 148);
  if (v13 >= v16) {
    unsigned __int16 v17 = ((3277 * ((v13 - v16) % 0x7D0)) >> 16) + 100;
  }
  else {
    unsigned __int16 v17 = 200 - ((3277 * ((v16 - v13) % 0x7D0)) >> 16);
  }
  unsigned int v18 = (v17 - *((unsigned __int16 *)a2 + 8)) % 0x64;
  BlueFin::GlBitBuffer::Position((uint64_t)&v57, v18);
  uint64_t result = BlueFin::GlBitBuffer::Position((uint64_t)&v52, v18);
  int v20 = DWORD1(v64) - DWORD2(v64);
  if (DWORD1(v64) - DWORD2(v64) >= 1)
  {
    BOOL v21 = LODWORD(v61[0]) < 0x55;
    int v50 = (_DWORD *)(SearchStateMemory + 264);
    int v51 = (_DWORD *)(SearchStateMemory + 260);
    v22.i64[0] = 0x100000001;
    v22.i64[1] = 0x100000001;
    v23.i64[0] = 0x400000004;
    v23.i64[1] = 0x400000004;
    do
    {
      if (HIDWORD(v60) == LODWORD(v61[0]))
      {
        if ((~*(_DWORD *)(v12 + 8) & 0x7FF) == 0 && ((*(_DWORD *)(v12 + 12) >> 28 == 15) & v15) == 1)
        {
          HIDWORD(v24) = *(_DWORD *)(v11 + 8);
          LODWORD(v24) = *(_DWORD *)(v11 + 12);
          uint64_t v25 = (v24 >> 28) & 0x7FFF;
          if ((a6 & 1) == 0)
          {
            if (v25 == 0x7FFF)
            {
              int v26 = 2;
LABEL_37:
              *(_DWORD *)this = v26;
            }
            else if (!v25)
            {
              int v26 = 1;
              goto LABEL_37;
            }
          }
          uint32x4_t v32 = (uint32x4_t)vdupq_n_s32(v25 ^ (2 * v25));
          int32x4_t v33 = 0uLL;
          int v34 = -4;
          int32x4_t v35 = (int32x4_t)xmmword_263BB2A60;
          do
          {
            int8x16_t v36 = (int8x16_t)v33;
            int32x4_t v33 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)vnegq_s32(v35)), v22), v33);
            int32x4_t v35 = vaddq_s32(v35, v23);
            v34 += 4;
          }
          while (v34 != 12);
          v37.i64[0] = 0xE0000000ELL;
          v37.i64[1] = 0xE0000000ELL;
          int v38 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32(v37, (uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(0xCu), (int8x16_t)xmmword_263BB1CB0)), (int8x16_t)v33, v36));
          if (a6)
          {
            int v39 = *v51 + v38;
            *int v51 = v39;
            char v40 = (int *)(SearchStateMemory + 268);
          }
          else
          {
            int v39 = *v50 + v38;
            *int v50 = v39;
            char v40 = (int *)(SearchStateMemory + 272);
          }
          int v41 = *v40 + 1;
          *char v40 = v41;
          if (v41 >= 5)
          {
            if (v39 / v41 < 5)
            {
              int v42 = (_DWORD *)(SearchStateMemory + 268);
              int v43 = (_DWORD *)(SearchStateMemory + 260);
              if ((a6 & 1) == 0) {
                goto LABEL_55;
              }
            }
            else
            {
              if (a6)
              {
                *(unsigned char *)(SearchStateMemory + 254) = 1;
                int v42 = (_DWORD *)(SearchStateMemory + 268);
                int v43 = (_DWORD *)(SearchStateMemory + 260);
                goto LABEL_56;
              }
              *(unsigned char *)(SearchStateMemory + 255) = 1;
LABEL_55:
              int v42 = (_DWORD *)(SearchStateMemory + 272);
              int v43 = (_DWORD *)(SearchStateMemory + 264);
            }
LABEL_56:
            *int v42 = 0;
            *int v43 = 0;
          }
        }
        LODWORD(v61[0]) = 0;
        BYTE4(v61[1]) = 0;
        LODWORD(v56[0]) = 0;
        BYTE4(v56[1]) = 0;
        LOBYTE(v15) = 1;
        BOOL v21 = 1;
        *(void *)uint64_t v12 = 0;
        *(void *)(v12 + 8) = 0;
        goto LABEL_58;
      }
      if (v20 >= HIDWORD(v60) - LODWORD(v61[0])) {
        int v20 = HIDWORD(v60) - LODWORD(v61[0]);
      }
      if (v20 >= 32) {
        LOBYTE(v20) = 32;
      }
      unsigned int v27 = v20;
      unsigned int v28 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v62, v20);
      BlueFin::GlBitBuffer::PutU(&v57, v28, v27);
      uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU(&v52, 0xFFFFFFFF, v27);
      unsigned int v29 = *(_DWORD *)(v12 + 8);
      if ((v29 & 0x7FF) != 0 || *(_DWORD *)(v12 + 12) >> 28) {
        v15 &= *((unsigned __int8 *)a2 + 12) >> 7;
      }
      v22.i64[0] = 0x100000001;
      v22.i64[1] = 0x100000001;
      v23.i64[0] = 0x400000004;
      v23.i64[1] = 0x400000004;
      char v30 = v15 & 1;
      if (a6)
      {
        *(unsigned char *)(SearchStateMemory + 252) = v30;
        if (!v21) {
          goto LABEL_53;
        }
      }
      else
      {
        *(unsigned char *)(SearchStateMemory + 253) = v30;
        if (!v21) {
          goto LABEL_53;
        }
      }
      int v31 = v61[0];
      if (LODWORD(v61[0]) < 0x55)
      {
        BOOL v21 = 1;
      }
      else
      {
        if (*(_DWORD *)v12 == -1 && *(_DWORD *)(v12 + 4) == -1)
        {
          *a5 = v29 > 0xFFFFF7FF;
          if (v29 >= 0xFFFFF800)
          {
            for (uint64_t i = 0; i != 3; ++i)
              v47[i] = *(_DWORD *)(v11 + i * 4);
            BOOL v21 = 0;
            unsigned int v45 = v47[1];
            unsigned int v46 = v47[2];
            *v47 ^= __PAIR64__(*v47, v45) >> 31;
            v47[1] = (__PAIR64__(v45, v46) >> 31) ^ v45;
            unsigned int v47[2] = v46 ^ (2 * v46);
            *a4 = 20 * (DWORD1(v64) + v31 - DWORD2(v64));
            goto LABEL_58;
          }
LABEL_53:
          BOOL v21 = 0;
          goto LABEL_58;
        }
        BOOL v21 = 0;
        *a5 = 0;
      }
LABEL_58:
      int v20 = DWORD1(v64) - DWORD2(v64);
    }
    while (DWORD1(v64) - DWORD2(v64) > 0);
  }
  return result;
}

uint64_t BlueFin::GlSignalId::GetMsPerBit(BlueFin::GlSignalId *this)
{
  int EpochPerBit = BlueFin::GlSignalId::GetEpochPerBit(this);
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    int v4 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v5 = 678;
    goto LABEL_6;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                              - *((int *)this + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]])
  {
    int v4 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v5 = 685;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v5, v4);
  }
  return BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                                              - *((int *)this + 1)
                                                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]]
       * EpochPerBit;
}

double BlueFin::GlSignalId::GetRfCarrierWavelengthM(BlueFin::GlSignalId *this)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
  }
  uint64_t v1 = *(unsigned __int8 *)this;
  uint64_t v2 = BlueFin::GlSvId::s_aucSvId2gnss[v1];
  double v3 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)this + 1) - *((int *)this + 1) + v2]];
  if (v2 == 2)
  {
    double v4 = (double)(char)(v1 - 59);
    if ((v1 - 52) >= 0xE) {
      double v4 = -8.0;
    }
    double v3 = v3 + v4 * 562500.0;
  }
  return 299792458.0 / v3;
}

void BlueFin::GlMeMsmtMgr::GetSigMeas(BlueFin::GlMeMsmtMgr *this, const BlueFin::GlSignalId *a2, double a3, double a4, double a5)
{
}

uint64_t BlueFin::GlMeMsmtHolder::SetGridMeas(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 17680);
  if (v2 > 0xF) {
    return GlCustomLog(15, "Surplus grids received!");
  }
  uint64_t v3 = *(void *)(result + 3200);
  *(unsigned char *)(result + 17680) = v2 + 1;
  uint64_t v4 = v3 + 184 * v2;
  if (v4 != a2)
  {
    *(unsigned char *)uint64_t v4 = *(unsigned char *)a2;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v4 + 8) = *(_WORD *)(a2 + 8);
  }
  uint64_t v5 = v3 + 184 * v2;
  long long v6 = *(_OWORD *)(a2 + 12);
  long long v7 = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(v5 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(v5 + 28) = v7;
  *(_OWORD *)(v5 + 12) = v6;
  long long v8 = *(_OWORD *)(a2 + 60);
  long long v9 = *(_OWORD *)(a2 + 76);
  long long v10 = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(v5 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(v5 + 92) = v10;
  *(_OWORD *)(v5 + 76) = v9;
  *(_OWORD *)(v5 + 60) = v8;
  long long v11 = *(_OWORD *)(a2 + 124);
  long long v12 = *(_OWORD *)(a2 + 140);
  long long v13 = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 156) = v13;
  *(_OWORD *)(v5 + 140) = v12;
  *(_OWORD *)(v5 + 124) = v11;
  *(_DWORD *)(*(void *)(result + 17688) + 4 * (*(__int16 *)(a2 + 8) >> 5)) |= 1 << *(_WORD *)(a2 + 8);
  return result;
}

uint64_t BlueFin::GlSignalId::GetMsPerSecFrame(BlueFin::GlSignalId *this)
{
  __int16 EpochPerSymbol = BlueFin::GlSignalId::GetEpochPerSymbol(this);
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    long long v13 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v14 = 678;
    goto LABEL_17;
  }
  uint64_t v3 = *((int *)this + 1);
  int v4 = *(unsigned __int8 *)this;
  uint64_t v5 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this];
  __int16 v6 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v3 - v3 + v5];
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v3 - v3 + v5])
  {
    long long v13 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v14 = 685;
    goto LABEL_17;
  }
  int v7 = BlueFin::GlSignalId::s_ausSignalIndexAndGnss2symbolsPerSecFrame[7 * (int)v3 + v5];
  if (!v7)
  {
    long long v13 = "usSymbolsPerSecFrame != 0";
    DeviceFaultNotify("glsignalid.h", 770, "GetSymbolsPerSecFrame", (char)"usSymbolsPerSecFrame != 0");
    int v14 = 770;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v14, v13);
  }
  unsigned __int16 v8 = v6 * EpochPerSymbol * v7;
  if ((v4 - 66) >= 0xA && (v4 - 1) >= 0x20) {
    unsigned __int16 v10 = v8;
  }
  else {
    unsigned __int16 v10 = 20;
  }
  if (v3 == 2) {
    return v10;
  }
  else {
    return v8;
  }
}

uint64_t BlueFin::GlMeSlots::GlonassFrameMgr(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 1504) != v2 || (v2 - 66) <= 0xFFFFFFF1)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 97, "GlonassFrameMgr", (char)"(m_otSignalId.GetSvId() == rotSvId) && (IS_GLONASS_SVID(*rotSvId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 97, "(m_otSignalId.GetSvId() == rotSvId) && (IS_GLONASS_SVID(*rotSvId))");
  }
  return a1 + 192;
}

uint64_t BlueFin::GlMeSlots::GalileoINavDecoder(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 1504) != v2 || (v2 + 81) <= 0xDBu)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 106, "GalileoINavDecoder", (char)"(m_otSignalId.GetSvId() == rotSvId) && (IS_GALILEO_SVID(*rotSvId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 106, "(m_otSignalId.GetSvId() == rotSvId) && (IS_GALILEO_SVID(*rotSvId))");
  }
  return a1 + 192;
}

uint64_t BlueFin::GlMeSlots::GalileoPilotSecCodeDecoder(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 1504) != v2 || (v2 + 81) <= 0xDBu)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 113, "GalileoPilotSecCodeDecoder", (char)"(m_otSignalId.GetSvId() == rotSvId) && (IS_GALILEO_SVID(*rotSvId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 113, "(m_otSignalId.GetSvId() == rotSvId) && (IS_GALILEO_SVID(*rotSvId))");
  }
  return a1 + 992;
}

uint64_t BlueFin::GlMeSlots::NavICDecoder(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 1504) != v2 || (v2 + 67) <= 0xF1u)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 122, "NavICDecoder", (char)"(m_otSignalId.GetSvId() == rotSvId) && (IS_NAVIC_SVID(*rotSvId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 122, "(m_otSignalId.GetSvId() == rotSvId) && (IS_NAVIC_SVID(*rotSvId))");
  }
  return a1 + 192;
}

uint64_t BlueFin::GlMeSlots::BeidouBitDecoder(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 1504) != v2 || (v2 + 117) <= 0xC0u)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 133, "BeidouBitDecoder", (char)"(m_otSignalId.GetSvId() == rotSvId) && (IS_BEIDOU_SVID(*rotSvId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 133, "(m_otSignalId.GetSvId() == rotSvId) && (IS_BEIDOU_SVID(*rotSvId))");
  }
  return a1 + 192;
}

uint64_t BlueFin::GlMeMsmtMgr::GetGlnsBitAndTMInfoFromMeas(BlueFin::GlMeMsmtMgr *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *a2;
  v8[0] = v3;
  int v9 = 0;
  __int16 v10 = 575;
  if ((v3 + 67) >= 0x44u)
  {
    uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[v3];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v4] == 255) {
      int v9 = -1;
    }
    else {
      __int16 v10 = BlueFin::GlSignalId::s_ausGnss2signalId[v4] + v3 - BlueFin::GlSvId::s_aucGnss2minSvId[v4];
    }
  }
  uint64_t result = BlueFin::GlMeMsmtMgr::GetMsmtSlotPtr(a1, (const BlueFin::GlSignalId *)v8, 0, 1);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 100) != *a2)
    {
      DeviceFaultNotify("glme_msmtmgr.cpp", 1034, "GetGlnsBitAndTMInfoFromMeas", (char)"pMeDspMeas->otSignalId.GetSvId() == rotSvId");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 1034, "pMeDspMeas->otSignalId.GetSvId() == rotSvId");
    }
    int v6 = *(_DWORD *)(result + 84);
    int v7 = (BlueFin::GlMeGlonassFrameMgr *)BlueFin::GlMeSlots::GlonassFrameMgr(result, a2);
    LODWORD(result) = BlueFin::GlMeGlonassFrameMgr::IsTMFound(v7);
    if ((~v6 & 0x408) != 0) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t BlueFin::GlMeMsmtMgr::ReportSyncEpochCnt(uint64_t result, unsigned __int8 *a2, int a3, int a4, double a5)
{
  if (a4 != 255)
  {
    uint64_t v60 = v5;
    uint64_t v61 = v6;
    unsigned int v7 = *a2;
    if (v7 < 0x34)
    {
      int v9 = 0;
      int v8 = 0;
    }
    else
    {
      int v8 = a3 - 4 * a4 + 100;
      int v9 = 1;
      if (v7 > 0xAE) {
        int v8 = 0;
      }
      if (v7 < 0x8B)
      {
        int v9 = 0;
        int v8 = 0;
      }
      if (v7 <= 0x41)
      {
        int v9 = 0;
        int v8 = a3 + 10 * (200 - a4);
      }
    }
    int32x4_t v35 = &unk_270EBECD8;
    int v38 = 0;
    char v43 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    __int16 v10 = &unk_270EBECD8;
    char v18 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    char v12 = v7;
    char v37 = v7;
    char v11 = 0;
    char v36 = 0;
    __int16 v14 = 0;
    __int16 v39 = 0;
    int v15 = v8;
    int v16 = 0;
    int v40 = v8;
    int v41 = 0;
    double v17 = (double)(v8 - a3) / 1000.0 + a5;
    double v42 = v17;
    if (v7 <= 0xAE)
    {
      if (v9)
      {
        char v18 = 1;
        char v43 = 1;
      }
    }
    int v38 = 258;
    int v13 = 256;
    return BlueFin::GlMeMsmtMgr::SetDSPDataBits(result, (const BlueFin::GlMeDSPDataBits *)&v35, (const BlueFin::GlMeDSPDataBits *)&v10);
  }
  return result;
}

float BlueFin::GlMeDSPMeas::GlMeDSPMeas(BlueFin::GlMeDSPMeas *this, const BlueFin::GlMeDSPMeas *a2)
{
  *(void *)this = &unk_270EBECA8;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((void *)this + 6) = *((void *)a2 + 6);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 84) = *(_OWORD *)((char *)a2 + 84);
  *((unsigned char *)this + 100) = *((unsigned char *)a2 + 100);
  int v2 = *((_DWORD *)a2 + 26);
  *((_WORD *)this + 54) = *((_WORD *)a2 + 54);
  *((_DWORD *)this + 26) = v2;
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((_DWORD *)this + 29) = 0;
  *((void *)this + 15) = *((void *)a2 + 15);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *(void *)((char *)this + 148) = *(void *)((char *)a2 + 148);
  *((unsigned char *)this + 144) = *((unsigned char *)a2 + 144);
  *((void *)this + 9) = *((void *)a2 + 9);
  float result = *((float *)a2 + 20);
  *((float *)this + 20) = result;
  return result;
}

uint64_t BlueFin::GlMeDSPMeas::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 17;
  }
  if (v5 - 18 <= 0xFFFFFFF6)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 1755, "SerializeImpl", (char)"ucVersion >= 9 && ucVersion <= 17");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 1755, "ucVersion >= 9 && ucVersion <= 17");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v15 = 1;
    char v16 = v5;
    uint64_t v17 = 0x1000000000000;
    __int16 v14 = &unk_270EBA550;
    char v18 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v14, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(v2 + 100)));
    int v8 = *(_DWORD *)(v7 + 84);
    __int16 v10 = &v12;
    char v11 = 3;
    int v12 = v8;
    uint64_t v13 = 0;
    BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v14, (const BlueFin::GlSetBase *)&v10);
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 88));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 36));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v7 + 48));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 32));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 56));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v7 + 8));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 60));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 64));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 68));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(double *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 112));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 140));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v7 + 52));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 144));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 40));
    if (v5 < 0xE)
    {
      if (v5 < 0xA) {
        goto LABEL_19;
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 44));
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v7 + 72));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, *(_DWORD *)(v7 + 76));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 80));
    if (v5 >= 0xB)
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 92));
      if (v5 >= 0x11)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 96));
LABEL_16:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 104));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(v7 + 104)- *(int *)(v7 + 104)+ BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v7 + 100)]]);
        if (v5 >= 0xD)
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 116));
          if (v5 >= 0x10)
          {
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v7 + 132));
            BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v7 + 136));
          }
        }
        goto LABEL_19;
      }
      if (v5 >= 0xC) {
        goto LABEL_16;
      }
    }
LABEL_19:
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v6, 4);
  }
  return 1;
}

BOOL BlueFin::GlMeDSPMeas::Deserialize(BlueFin::GlMeDSPMeas *this, BlueFin::GlSysLogEntry *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 12);
  if (v2 <= 0x11)
  {
    uint64_t v5 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
         + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
         + BlueFin::GlSysLogEntry::GetU16(a2));
    if (*((unsigned __int8 *)a2 + 12) < 6u)
    {
      BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete(a2, (uint64_t)&v24);
      *((_DWORD *)this + 21) &= BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v24, 0);
    }
    else
    {
      long long v24 = (char *)this + 84;
      char v25 = 1;
      BlueFin::GlSysLogEntry::GetGlSet(a2, &v24);
    }
    int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_DWORD *)this + 22) = U8;
    if (*((unsigned __int8 *)a2 + 12) <= 0xEu && U8) {
      *((_DWORD *)this + 22) = U8 + 1;
    }
    *((float *)this + 9) = BlueFin::GlSysLogEntry::GetF32(a2);
    *((_DWORD *)this + 12) = BlueFin::GlSysLogEntry::GetU32(a2);
    float D64 = BlueFin::GlSysLogEntry::GetD64(a2);
    *((float *)this + 8) = D64;
    float v8 = BlueFin::GlSysLogEntry::GetD64(a2);
    *((float *)this + 14) = v8;
    *((double *)this + 1) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((float *)this + 15) = BlueFin::GlSysLogEntry::GetF32(a2);
    *((float *)this + 16) = BlueFin::GlSysLogEntry::GetF32(a2);
    *((float *)this + 17) = BlueFin::GlSysLogEntry::GetF32(a2);
    *((double *)this + 2) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
    if (*((unsigned __int8 *)a2 + 12) < 2u
      || (*((unsigned char *)this + 112) = BlueFin::GlSysLogEntry::GetU8(a2), *((unsigned __int8 *)a2 + 12) < 3u)
      || (*((_DWORD *)this + 35) = BlueFin::GlSysLogEntry::GetU8(a2), unsigned int v9 = *((unsigned __int8 *)a2 + 12), v9 <= 3))
    {
      *((_DWORD *)this + 21) *= 2;
      goto LABEL_12;
    }
    if (v9 != 4)
    {
      *((_DWORD *)this + 13) = BlueFin::GlSysLogEntry::GetU32(a2);
      if (*((unsigned __int8 *)a2 + 12) >= 8u)
      {
        *((unsigned char *)this + 144) = BlueFin::GlSysLogEntry::GetU8(a2);
        if (*((unsigned __int8 *)a2 + 12) >= 9u)
        {
          *((float *)this + 10) = BlueFin::GlSysLogEntry::GetF32(a2);
          unsigned int v15 = *((unsigned __int8 *)a2 + 12);
          if (v15 >= 0xE)
          {
            *((float *)this + 11) = BlueFin::GlSysLogEntry::GetF32(a2);
            unsigned int v15 = *((unsigned __int8 *)a2 + 12);
          }
          if (v15 >= 0xA)
          {
            *((_DWORD *)this + 18) = BlueFin::GlSysLogEntry::GetU32(a2);
            *((_DWORD *)this + 19) = BlueFin::GlSysLogEntry::GetU32(a2);
            *((float *)this + 20) = BlueFin::GlSysLogEntry::GetF32(a2);
            if (*((unsigned __int8 *)a2 + 12) >= 0xBu)
            {
              *((_DWORD *)this + 23) = BlueFin::GlSysLogEntry::GetU8(a2);
              unsigned int v16 = *((unsigned __int8 *)a2 + 12);
              if (v16 > 0xE)
              {
                if (v16 < 0x11) {
                  goto LABEL_36;
                }
                *((_DWORD *)this + 24) = BlueFin::GlSysLogEntry::GetU8(a2);
                unsigned int v16 = *((unsigned __int8 *)a2 + 12);
              }
              else
              {
                int v17 = *((_DWORD *)this + 22);
                if (v17 >= 1) {
                  *((_DWORD *)this + 22) = v17 + 1;
                }
              }
              if (v16 >= 0xC)
              {
LABEL_36:
                unsigned int v18 = BlueFin::GlSysLogEntry::GetU8(a2);
                int v19 = BlueFin::GlSysLogEntry::GetU8(a2);
                uint64_t v20 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
                if ((v5 + 67) > 0x43u)
                {
                  if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v18 - v18 + v20] == 255)
                  {
                    __int16 v21 = 575;
                    unsigned int v18 = -1;
                  }
                  else
                  {
                    __int16 v21 = BlueFin::GlSignalId::s_ausGnss2signalId[v20]
                        + v5
                        - BlueFin::GlSvId::s_aucGnss2minSvId[v20]
                        + BlueFin::GlSvId::s_aucGnss2numSvId[v20] * (_WORD)v18;
                  }
                }
                else
                {
                  __int16 v21 = 575;
                }
                *((unsigned char *)this + 100) = v5;
                *((_DWORD *)this + 26) = v18;
                *((_WORD *)this + 54) = v21;
                if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (int)v18 - (int)v18 + v20] != v19)
                {
                  long long v22 = "etSignalType == otSignalId.GetSignalType()";
                  DeviceFaultNotify("glme_msmtmgr.cpp", 1927, "Deserialize", (char)"etSignalType == otSignalId.GetSignalType()");
                  int v23 = 1927;
                  goto LABEL_41;
                }
                if (*((unsigned __int8 *)a2 + 12) > 0xCu)
                {
                  *((_DWORD *)this + 29) = BlueFin::GlSysLogEntry::GetU8(a2);
                  if (*((unsigned __int8 *)a2 + 12) >= 0x10u)
                  {
                    *((_DWORD *)this + 33) = BlueFin::GlSysLogEntry::GetU8(a2);
                    float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
                    goto LABEL_21;
                  }
LABEL_20:
                  *((_DWORD *)this + 33) = 0;
                  float F32 = 0.0;
LABEL_21:
                  *((float *)this + 34) = F32;
                  if (*((unsigned __int16 *)a2 + 11) == *((unsigned __int16 *)a2 + 10)) {
                    return v2 < 0x12;
                  }
                  long long v22 = "otEntry.DataSize() == otEntry.ReadIdx()";
                  DeviceFaultNotify("glme_msmtmgr.cpp", 1954, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
                  int v23 = 1954;
LABEL_41:
                  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", v23, v22);
                }
LABEL_19:
                *((_DWORD *)this + 29) = 0;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
LABEL_12:
    if ((v5 + 67) >= 0x44u)
    {
      uint64_t v11 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v11] != 255)
      {
        int v10 = 0;
        __int16 v12 = BlueFin::GlSignalId::s_ausGnss2signalId[v11]
            + v5
            - BlueFin::GlSvId::s_aucGnss2minSvId[v11];
LABEL_18:
        *((unsigned char *)this + 100) = v5;
        *((_DWORD *)this + 26) = v10;
        *((_WORD *)this + 54) = v12;
        goto LABEL_19;
      }
      int v10 = -1;
    }
    else
    {
      int v10 = 0;
    }
    __int16 v12 = 575;
    goto LABEL_18;
  }
  return v2 < 0x12;
}

uint64_t BlueFin::GlMeDSPDataBits::validate(uint64_t result, unsigned int a2)
{
  unsigned int v2 = BlueFin::GlSvId::s_aucSvId2gnss[result];
  BOOL v3 = v2 > 6 || ((1 << v2) & 0x49) == 0;
  if (!v3 || result - 81 <= 0x34)
  {
    if (a2 < 0x65) {
      return result;
    }
    unsigned int v4 = "_ucNumBits <= MAX_GPS_BITS";
    DeviceFaultNotify("glme_msmtmgr.cpp", 2052, "validate", (char)"_ucNumBits <= MAX_GPS_BITS");
    int v5 = 2052;
    goto LABEL_22;
  }
  if (v2 == 2)
  {
    if (a2 < 0xC9) {
      return result;
    }
    unsigned int v4 = "_ucNumBits <= MAX_GLONASS_BITS";
    DeviceFaultNotify("glme_msmtmgr.cpp", 2060, "validate", (char)"_ucNumBits <= MAX_GLONASS_BITS");
    int v5 = 2060;
    goto LABEL_22;
  }
  if (v2 != 1)
  {
    if (result - 76 <= 0x3E
      && ((1 << (result - 76)) & 0x7C0000000000001FLL) != 0)
    {
      if (a2 < 0x3E9) {
        return result;
      }
      unsigned int v4 = "_ucNumBits <= MAX_BEIDOU_GEO_BITS";
      DeviceFaultNotify("glme_msmtmgr.cpp", 2064, "validate", (char)"_ucNumBits <= MAX_BEIDOU_GEO_BITS");
      int v5 = 2064;
    }
    else if (v2 == 5)
    {
      if (a2 < 0x1F6) {
        return result;
      }
      unsigned int v4 = "_ucNumBits <= MAX_GALILEO_BITS+1";
      DeviceFaultNotify("glme_msmtmgr.cpp", 2068, "validate", (char)"_ucNumBits <= MAX_GALILEO_BITS+1");
      int v5 = 2068;
    }
    else
    {
      unsigned int v4 = "0";
      DeviceFaultNotify("glme_msmtmgr.cpp", 2077, "validate", (char)"0");
      int v5 = 2077;
    }
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", v5, v4);
  }
  if (a2 >= 0x3E9)
  {
    unsigned int v4 = "_ucNumBits <= MAX_SBAS_BITS";
    DeviceFaultNotify("glme_msmtmgr.cpp", 2056, "validate", (char)"_ucNumBits <= MAX_SBAS_BITS");
    int v5 = 2056;
    goto LABEL_22;
  }
  return result;
}

uint64_t BlueFin::GlMeDSPDataBits::Set(uint64_t result, char a2, unsigned char *a3, unsigned int a4, __int16 a5, int a6, int a7, unsigned int a8, double a9, int *a10, char a11, uint64_t a12, int a13)
{
  *(unsigned char *)(result + 8) = a2;
  *(unsigned char *)(result + 9) = *a3;
  *(_DWORD *)(result + 12) = 0;
  *(_WORD *)(result + 16) = a5;
  *(_DWORD *)(result + 20) = a6;
  *(_DWORD *)(result + 24) = a7;
  *(double *)(result + 32) = a9;
  if (a8 > 0x20)
  {
    __int16 v21 = "usNumWords <= _DIM(m_aulBitValues)";
    DeviceFaultNotify("glme_msmtmgr.cpp", 2144, "Set", (char)"usNumWords <= _DIM(m_aulBitValues)");
    int v22 = 2144;
    goto LABEL_22;
  }
  if (a8)
  {
    __int16 v14 = (_DWORD *)(result + 44);
    uint64_t v15 = a8;
    do
    {
      int v16 = *a10++;
      *v14++ = v16;
      --v15;
    }
    while (v15);
    if (a11)
    {
      unint64_t v17 = 0;
      do
      {
        *(_DWORD *)(result + 4 * v17 + 172) = *(_DWORD *)(a12 + 4 * v17);
        ++v17;
      }
      while (v17 < a8);
      goto LABEL_10;
    }
  }
  else if (a11)
  {
LABEL_10:
    int v18 = 32;
    goto LABEL_12;
  }
  int v18 = 0;
LABEL_12:
  int v19 = v18 | 0x40;
  if (((1 << a4) & 0x23000) == 0) {
    int v19 = v18;
  }
  if (a4 <= 0x11) {
    int v18 = v19;
  }
  *(_DWORD *)(result + 12) = v18;
  if (a13 == 1)
  {
    unsigned int v20 = v18 & 0xFFFFFFFD;
    goto LABEL_20;
  }
  if (a13)
  {
    __int16 v21 = "0";
    DeviceFaultNotify("glme_msmtmgr.cpp", 2184, "Set", (char)"0");
    int v22 = 2184;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", v22, v21);
  }
  unsigned int v20 = v18 | 2;
LABEL_20:
  *(_DWORD *)(result + 12) = v20 | 0x10;
  return result;
}

uint64_t BlueFin::GlMeDSPDataBits::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 7;
  }
  if (v5 >= 8)
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 2251, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 7");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 2251, "ucVersion >= 1 && ucVersion <= 7");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v23 = 3;
    unsigned __int8 v24 = v5;
    uint64_t v25 = 0x1000000000000;
    int v22 = &unk_270EBA550;
    char v26 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v22, *(unsigned __int8 *)(v2 + 9));
    __int16 v8 = *(_WORD *)(v7 + 16);
    if (v24 < 7u) {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v22, v8);
    }
    else {
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v22, v8);
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, *(_DWORD *)(v7 + 20));
    if (v24 >= 5u) {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, *(_DWORD *)(v7 + 24));
    }
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v22, *(double *)(v7 + 32));
    if (v24 > 4u)
    {
      if (v24 == 5)
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, *(_DWORD *)(v7 + 12));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, 0);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, 0);
      }
      else
      {
        int v9 = *(_DWORD *)(v7 + 12);
        int v18 = &v20;
        char v19 = 3;
        int v20 = v9;
        uint64_t v21 = 0;
        BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v22, (const BlueFin::GlSetBase *)&v18);
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, *(_DWORD *)(v7 + 12) >> (v24 < 3u));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, 0);
    }
    BlueFin::GlMeDSPDataBits::validate(*(unsigned __int8 *)(v7 + 9), *(unsigned __int16 *)(v7 + 16));
    unint64_t v10 = *(unsigned __int16 *)(v7 + 16) + 31;
    uint64_t v11 = (v10 >> 5);
    if ((v10 >> 5))
    {
      int v12 = (v10 >> 5);
      do
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, 0);
        --v12;
      }
      while (v12);
      uint64_t v13 = (int *)(v7 + 44);
      uint64_t v14 = v11;
      do
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, *v13++);
        --v14;
      }
      while (v14);
      unsigned int v15 = v24;
      if (v24 > 1u)
      {
        if (v11)
        {
          int v16 = (int *)(v7 + 172);
          do
          {
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v22, *v16++);
            --v11;
          }
          while (v11);
          unsigned int v15 = v24;
        }
        goto LABEL_30;
      }
    }
    else
    {
      unsigned int v15 = v24;
      if (v24 > 1u)
      {
LABEL_30:
        if (v15 >= 4) {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v22, *(unsigned char *)(v7 + 8));
        }
      }
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v22, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlMeDSPDataBits::Deserialize(BlueFin::GlMeDSPDataBits *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 3 || *((unsigned __int8 *)a2 + 12) - 8 < 0xFFFFFFF9) {
    return 0;
  }
  *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetU16(a2);
  if (*((unsigned __int8 *)a2 + 12) < 7u) {
    __int16 U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  else {
    __int16 U8 = BlueFin::GlSysLogEntry::GetU16(a2);
  }
  *((_WORD *)this + 8) = U8;
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  unsigned int v6 = *((unsigned __int8 *)a2 + 12);
  if (v6 >= 5)
  {
    if (v6 - 5 > 1
      || (v6 == 5 ? (int v7 = 33) : (int v7 = 34),
          3 * (((*((unsigned __int16 *)this + 8) + 31) >> 3) & 0x3FFC) + v7 <= *((unsigned __int16 *)a2
                                                                                             + 11)))
    {
      *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
    }
  }
  *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned __int8 *)a2 + 12) <= 4u)
  {
    BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete(a2, (uint64_t)&v15);
    *((_DWORD *)this + 3) &= BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v15, 0);
  }
  else
  {
    unsigned int v15 = (char *)this + 12;
    char v16 = 1;
    BlueFin::GlSysLogEntry::GetGlSet(a2, &v15);
  }
  BlueFin::GlMeDSPDataBits::validate(*((unsigned __int8 *)this + 9), *((unsigned __int16 *)this + 8));
  unint64_t v8 = *((unsigned __int16 *)this + 8) + 31;
  uint64_t v9 = (v8 >> 5);
  if ((v8 >> 5))
  {
    int v10 = (v8 >> 5);
    do
    {
      BlueFin::GlSysLogEntry::GetU32(a2);
      --v10;
    }
    while (v10);
    uint64_t v11 = (_DWORD *)((char *)this + 44);
    uint64_t v12 = v9;
    do
    {
      *v11++ = BlueFin::GlSysLogEntry::GetU32(a2);
      --v12;
    }
    while (v12);
    unsigned int v13 = *((unsigned __int8 *)a2 + 12);
    if (v13 <= 1) {
      goto LABEL_29;
    }
    if (v9)
    {
      uint64_t v14 = (_DWORD *)((char *)this + 172);
      do
      {
        *v14++ = BlueFin::GlSysLogEntry::GetU32(a2);
        --v9;
      }
      while (v9);
      unsigned int v13 = *((unsigned __int8 *)a2 + 12);
    }
  }
  else
  {
    unsigned int v13 = *((unsigned __int8 *)a2 + 12);
    if (v13 <= 1) {
      goto LABEL_29;
    }
  }
  if (v13 > 2)
  {
    if (v13 != 3) {
      *((unsigned char *)this + 8) = BlueFin::GlSysLogEntry::GetU8(a2);
    }
    goto LABEL_30;
  }
LABEL_29:
  *((_DWORD *)this + 3) *= 2;
LABEL_30:
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glme_msmtmgr.cpp", 2428, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 2428, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlMeDSPDataBits::ConvertGlnsSymsToBits(uint64_t this, BlueFin::GlMeDSPDataBits *a2, unsigned __int8 *a3, int a4)
{
  uint64_t v5 = this;
  int v6 = *(unsigned __int8 *)(this + 16);
  if (!*(unsigned char *)(this + 16))
  {
    *((_WORD *)a2 + 4) = *(_WORD *)(this + 8);
    *((_DWORD *)a2 + 3) = *(_DWORD *)(this + 12);
    *((_WORD *)a2 + 8) = 0;
    *(void *)((char *)a2 + 20) = *(void *)(this + 20);
    double v17 = *(double *)(this + 32);
LABEL_29:
    *((double *)a2 + 4) = v17;
    return this;
  }
  char v8 = a4 - v6 + 30;
  int v9 = v8 & 1;
  unsigned int v10 = a4 - v6 + 29;
  if (v8) {
    unsigned int v11 = a4 - v6 + 29;
  }
  else {
    unsigned int v11 = a4 - v6 + 30;
  }
  unsigned __int8 v12 = v9 + v6;
  int v57 = -119717288;
  v52[0] = &v57;
  v52[1] = 0;
  char v53 = 0;
  int v55 = 0;
  long long v54 = xmmword_263BB2B80;
  char v56 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v52, 0x1Eu);
  int v44 = 0;
  v47[0] = v5 + 44;
  v47[1] = 0;
  char v48 = 0;
  int v50 = 0;
  long long v49 = xmmword_263BB2530;
  char v51 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v47, *(unsigned __int16 *)(v5 + 16));
  v40[0] = v5 + 172;
  v40[1] = 0;
  char v41 = 0;
  int v45 = 0;
  int v43 = 0;
  uint64_t v42 = 0x40000000400;
  char v46 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v40, *(unsigned __int16 *)(v5 + 16));
  char v13 = 0;
  char v14 = 0;
  if (v8)
  {
    if (v10 > 0x1D)
    {
      char v13 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v47, 1u) == 0;
    }
    else
    {
      unsigned int v15 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position((uint64_t)v52, v10);
      char v13 = BlueFin::GlBitBuffer::GetU(v15, 1u);
      int v16 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v47, 1u);
      if (v16 != BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v52, 1u)) {
        char v13 = (v13 & 1) == 0;
      }
    }
    char v14 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v40, 1u);
  }
  DWORD2(v49) = 0;
  char v51 = 0;
  int v43 = 0;
  char v46 = 0;
  DWORD2(v54) = 0;
  char v56 = 0;
  *((_WORD *)a2 + 4) = *(_WORD *)(v5 + 8);
  *((_DWORD *)a2 + 3) = *(_DWORD *)(v5 + 12);
  unsigned int v18 = v12 >> 1;
  *((_WORD *)a2 + 8) = v18;
  *(void *)((char *)a2 + 20) = *(void *)(v5 + 20);
  *((void *)a2 + 4) = *(void *)(v5 + 32);
  int v32 = 0;
  v35[0] = (uint64_t)a2 + 44;
  v35[1] = 0;
  char v36 = 0;
  int v38 = 0;
  long long v37 = xmmword_263BB2530;
  char v39 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v35, v18);
  v28[0] = (uint64_t)a2 + 172;
  v28[1] = 0;
  char v29 = 0;
  int v33 = 0;
  int v31 = 0;
  uint64_t v30 = 0x40000000400;
  char v34 = 0;
  this = BlueFin::GlBitBuffer::Limit((uint64_t)v28, *((unsigned __int16 *)a2 + 8));
  int v19 = DWORD1(v49);
  int v20 = DWORD2(v49);
  if ((DWORD1(v49) - DWORD2(v49)) >= 2)
  {
    BOOL v21 = v9 != 0;
    while (2)
    {
      if (v21)
      {
        char v13 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v47, 1u) + 2 * v13;
        char v14 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v40, 1u) + 2 * v14;
      }
      else
      {
        char v13 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v47, 2u);
        char v14 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v40, 2u);
      }
      if (v11 <= 0x1D)
      {
        int v22 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position((uint64_t)v52, v11);
        v13 ^= BlueFin::GlBitBuffer::GetU(v22, 2u);
      }
      unsigned int v23 = 0;
      int v24 = 1;
      switch(v14)
      {
        case 0:
        case 2:
          break;
        case 1:
          unsigned int v23 = 0;
          int v24 = 0;
          break;
        case 3:
          unsigned int v23 = 1;
          break;
        default:
          DeviceFaultNotify("glme_msmtmgr.cpp", 2757, "ConvertGlnsSymsToBits", (char)"0");
          int v27 = 2757;
LABEL_33:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", v27, "0");
      }
      BlueFin::GlBitBuffer::PutU(v28, v23, 1u);
      unsigned int v25 = 0;
      switch(v13)
      {
        case 0:
          unsigned int v25 = v24 ^ 1;
          goto LABEL_26;
        case 1:
          goto LABEL_26;
        case 2:
          unsigned int v25 = 1;
          goto LABEL_26;
        case 3:
          unsigned int v25 = v24;
LABEL_26:
          this = (uint64_t)BlueFin::GlBitBuffer::PutU(v35, v25, 1u);
          BOOL v21 = 0;
          unsigned int v11 = (int)(v11 + 2) % 200;
          int v19 = DWORD1(v49);
          int v20 = DWORD2(v49);
          if ((DWORD1(v49) - DWORD2(v49)) <= 1) {
            break;
          }
          continue;
        default:
          DeviceFaultNotify("glme_msmtmgr.cpp", 2789, "ConvertGlnsSymsToBits", (char)"0");
          int v27 = 2789;
          goto LABEL_33;
      }
      break;
    }
  }
  if (v19 != v20)
  {
    char v26 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v47, 1u);
    this = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v40, 1u);
    *a3 = v26 | (2 * this);
    *(int32x2_t *)((char *)a2 + 20) = vadd_s32(*(int32x2_t *)((char *)a2 + 20), (int32x2_t)0x900000009);
    double v17 = *((double *)a2 + 4) + -0.01;
    goto LABEL_29;
  }
  return this;
}

uint64_t BlueFin::GlMeDSPDataBits::Print(uint64_t this)
{
  if (*(_WORD *)(this + 16))
  {
    if ((((*(unsigned __int16 *)(this + 16) - 1) >> 5) + 1) > 0x20u)
    {
      DeviceFaultNotify("glme_msmtmgr.cpp", 2831, "Print", (char)"ucNumWords <= NUM_LONGS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_msmtmgr.cpp", 2831, "ucNumWords <= NUM_LONGS");
    }
  }
  return this;
}

void BlueFin::GlMeDSPMeas::~GlMeDSPMeas(BlueFin::GlMeDSPMeas *this)
{
}

void BlueFin::GlMeDSPDataBits::~GlMeDSPDataBits(BlueFin::GlMeDSPDataBits *this)
{
}

uint64_t BlueFin::GlMeWaasFrameMgr::Update(int8x16_t *this, const BlueFin::GlMeDSPDataBits *a2)
{
  this[6].i8[8] = *((unsigned char *)a2 + 9);
  if (*((_WORD *)a2 + 8) != 250) {
    return 0;
  }
  int v32 = &unk_270EBED38;
  char v33 = *((unsigned char *)a2 + 9) + 87;
  char v34 = -6;
  *(_OWORD *)int32x4_t v35 = *(_OWORD *)((char *)a2 + 44);
  *(_OWORD *)&v35[16] = *(_OWORD *)((char *)a2 + 60);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    BlueFin::GlMeSbasDataBits::SerializeImpl((uint64_t)&v32, 0);
  }
  uint64_t v4 = 0;
  this[6].i8[10] = 0;
  do
  {
    this[4].i32[v4 + 1] = *(_DWORD *)((char *)a2 + v4 * 4 + 44);
    ++v4;
  }
  while (v4 != 8);
  double v5 = floor(*((double *)a2 + 4) * 1000.0);
  double v6 = fmod(v5, 4294967300.0);
  if (v5 <= 4294967300.0) {
    double v6 = v5;
  }
  if (v6 < -4294967300.0) {
    double v6 = -fmod(-v6, 4294967300.0);
  }
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  if (v6 < 0.0) {
    unsigned int v11 = --v6;
  }
  else {
    unsigned int v11 = v6;
  }
  this[6].i32[1] = v11;
  do
  {
    if (v9) {
      goto LABEL_44;
    }
    int v12 = this[4].i32[0] + (this[2].u8[3] << 8);
    int v13 = 1;
    if (v12 <= 39621)
    {
      if (v12 != 14764)
      {
        if (v12 == 21402) {
          goto LABEL_27;
        }
        if (v12 != 25913) {
          goto LABEL_44;
        }
      }
      goto LABEL_26;
    }
    BOOL v14 = v12 == 39622 || v12 == 50771;
    if (!v14)
    {
      if (v12 != 44133) {
        goto LABEL_44;
      }
LABEL_26:
      int v13 = 0;
    }
LABEL_27:
    int v15 = 0;
    unsigned int v16 = 1;
    char v17 = -1;
    int v18 = 250;
    do
    {
      BOOL v19 = v16 == 1;
      if (v16 == 1) {
        unsigned int v16 = 0x80000000;
      }
      else {
        v16 >>= 1;
      }
      if (v19) {
        ++v17;
      }
      __int32 v20 = this[2].i32[v17];
      BOOL v14 = (v20 & v16) == 0;
      BOOL v21 = (v20 & v16) != 0;
      int v22 = v14;
      if (!v13) {
        BOOL v21 = v22;
      }
      int v23 = v21 | (2 * v15);
      if ((v15 & 0x800000) != 0) {
        int v15 = v23 ^ 0x1864CFB;
      }
      else {
        int v15 = v23;
      }
      --v18;
    }
    while (v18);
    if (v15)
    {
      uint64_t v9 = 0;
    }
    else
    {
      int v7 = 1;
      this[6].i8[10] = 1;
      this[6].i32[1] = this[6].i32[1] + 4 * v8 - 2032;
      int8x16_t v27 = this[3];
      *this = this[2];
      this[1] = v27;
      uint64_t v9 = (v8 + 1);
      if (v12 != 21402 && v12 != 39622 && v12 != 50771)
      {
        int8x16_t v28 = vmvnq_s8(this[1]);
        *this = vmvnq_s8(*this);
        this[1] = v28;
        uint64_t v9 = (v8 + 251);
        this[1].i32[3] &= 0xFFFFFFC0;
        int v7 = 1;
      }
    }
LABEL_44:
    for (uint64_t i = 24; i != 7; --i)
    {
      __int32 v25 = this->i32[i];
      this->i32[i] = (v10 != 0) | (2 * v25);
      unsigned int v10 = v25 & 0x80000000;
    }
    unsigned int v26 = this[4].u32[0];
    if (v26 > 0xFF)
    {
      this[3].i32[3] += 64;
      this[4].i32[0] = v26 - 256;
    }
    ++v8;
  }
  while (v8 != 250);
  if (v7)
  {
    int8x16_t v29 = this[1];
    *(int8x16_t *)&unsigned char v35[4] = *this;
    *(int8x16_t *)&v35[20] = v29;
    __int8 v30 = ((unsigned __int32)this->i32[0] >> 18) & 0x3F;
    this[6].i8[9] = v30;
    BYTE1(v32) = v30;
    LOBYTE(v32) = *((unsigned char *)a2 + 9);
    char v33 = 0;
    HIDWORD(v32) = *((_DWORD *)a2 + 6);
    *(_DWORD *)int32x4_t v35 = this[6].i32[1];
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)this[7].i64[0] + 40))(this[7].i64[0], &v32, 44133, v9);
    if (this[6].i8[9] == 9) {
      return 1;
    }
  }
  return 0;
}

uint64_t BlueFin::GlMeSbasDataBits::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v5 >= 3)
  {
    DeviceFaultNotify("glme_waasframemgr.cpp", 224, "SerializeImpl", (char)"ucVersion == 1 || ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_waasframemgr.cpp", 224, "ucVersion == 1 || ucVersion == 2");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  int v12 = 19;
  char v13 = v5;
  uint64_t v14 = 0x1000000000000;
  unsigned int v11 = &unk_270EBA2F0;
  char v15 = v5;
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v11, *(unsigned __int8 *)(v2 + 8));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v11, *(unsigned __int8 *)(v7 + 9));
  uint64_t v8 = 0;
  uint64_t v9 = v7 + 12;
  do
  {
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v11, *(_DWORD *)(v9 + v8));
    v8 += 4;
  }
  while (v8 != 32);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v11, v6, 4);
  return 1;
}

uint64_t BlueFin::GlMeSbasDataBits::Deserialize(BlueFin::GlMeSbasDataBits *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 19 || *((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  *((unsigned char *)this + 8) = BlueFin::GlSysLogEntry::GetU16(a2);
  uint64_t v5 = 0;
  *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetU16(a2);
  uint64_t v6 = (char *)this + 12;
  do
  {
    *(_DWORD *)&v6[v5] = BlueFin::GlSysLogEntry::GetU32(a2);
    v5 += 4;
  }
  while (v5 != 32);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glme_waasframemgr.cpp", 266, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_waasframemgr.cpp", 266, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

void BlueFin::GlMeSbasDataBits::~GlMeSbasDataBits(BlueFin::GlMeSbasDataBits *this)
{
}

uint64_t BlueFin::GlMeNavICDecoder::GlMeNavICDecoder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 8) = a2;
  BlueFin::GlMeGalileoINavDecodeHelper::GlMeGalileoINavDecodeHelper(a1 + 16, a1);
  BlueFin::GlMeGalileoINavDecodeHelper::GlMeGalileoINavDecodeHelper(a1 + 392, a1);
  return a1;
}

uint64_t BlueFin::GlMeNavICDecoder::SetDSPDataBits(unsigned char *a1, uint64_t a2, BlueFin::GlMeDSPDataBits *a3, const BlueFin::GlMeDSPDataBits *a4)
{
  BlueFin::GlMeNavICDecodeHelper::SetDSPDataBits((BlueFin::GlMeNavICDecodeHelper *)(a1 + 16), a3);
  uint64_t result = BlueFin::GlMeNavICDecodeHelper::SetDSPDataBits((BlueFin::GlMeNavICDecodeHelper *)(a1 + 392), a4);
  if (a2 && (a1[368] || a1[744]))
  {
    if (a1[370]) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = a1[746] != 0;
    }
    unsigned int v10 = *(uint64_t (**)(uint64_t, BOOL, uint64_t, char *))(*(void *)a2 + 32);
    return v10(a2, v9, 1, (char *)a3 + 9);
  }
  return result;
}

uint64_t BlueFin::GlMeNavICDecodeHelper::SetDSPDataBits(BlueFin::GlMeNavICDecodeHelper *this, const BlueFin::GlMeDSPDataBits *a2)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 372) = *((unsigned char *)a2 + 9);
  int v4 = *((_DWORD *)a2 + 5);
  unsigned int v5 = *((unsigned __int16 *)a2 + 8);
  int v6 = v4 - 20 * v5;
  int v7 = *((_DWORD *)this + 60);
  if (v6 != v7 || ((int v8 = *((_DWORD *)a2 + 3), v5) ? (v9 = (*((_DWORD *)a2 + 3) & 4) == 0) : (v9 = 0), !v9))
  {
    *((_DWORD *)this + 71) = 0;
    *((_DWORD *)this + 69) = 0;
    *((_DWORD *)this + 68) = *((_DWORD *)this + 67);
    *((unsigned char *)this + 288) = 0;
    *((_DWORD *)this + 83) = 0;
    *((_DWORD *)this + 81) = 0;
    *((_DWORD *)this + 80) = *((_DWORD *)this + 79);
    *((unsigned char *)this + 336) = 0;
    int v8 = *((_DWORD *)a2 + 3);
    if (v6 != v7 || (*((_DWORD *)a2 + 3) & 4) != 0)
    {
      *((_WORD *)this + 176) = 0;
      *((_DWORD *)this + 89) = 0;
    }
  }
  if ((v8 & 0x200) != 0) {
    *((_DWORD *)this + 89) = 0;
  }
  v122[0] = 0;
  v122[1] = (char *)a2 + 44;
  char v123 = 1;
  int v125 = 0;
  long long v124 = xmmword_263BB2530;
  char v126 = 0;
  int v84 = a2;
  v117[0] = 0;
  v117[1] = (char *)a2 + 172;
  char v118 = 1;
  int v120 = 0;
  long long v119 = xmmword_263BB2530;
  char v121 = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)v122, v5);
  BlueFin::GlBitBuffer::Limit((uint64_t)v117, *((unsigned __int16 *)v84 + 8));
  int v11 = DWORD1(v124);
  for (int i = DWORD2(v124); DWORD1(v124) != DWORD2(v124); int i = DWORD2(v124))
  {
    unsigned int v13 = v11 - i;
    if (v13 >= 0x20) {
      unsigned int v14 = 32;
    }
    else {
      unsigned int v14 = v13;
    }
    unsigned int v15 = *((_DWORD *)this + 69);
    if (*((_DWORD *)this + 68) - v15 < v14)
    {
      BlueFin::GlBitBuffer::Limit((uint64_t)this + 248, v15);
      BlueFin::GlBitBuffer::Position((uint64_t)this + 248, v14);
      int v16 = *((_DWORD *)this + 69);
      unsigned int v17 = *((_DWORD *)this + 71) + v16;
      *((_DWORD *)this + 71) = v17;
      unsigned int v18 = *((_DWORD *)this + 67);
      BOOL v19 = v17 >= v18;
      unsigned int v20 = v17 - v18;
      if (v19) {
        *((_DWORD *)this + 71) = v20;
      }
      *((_DWORD *)this + 69) = *((_DWORD *)this + 68) - v16;
      *((_DWORD *)this + 68) = v18;
      *((unsigned char *)this + 288) = 0;
      BlueFin::GlBitBuffer::Limit((uint64_t)this + 296, *((_DWORD *)this + 81));
      BlueFin::GlBitBuffer::Position((uint64_t)this + 296, v14);
      int v21 = *((_DWORD *)this + 81);
      unsigned int v22 = *((_DWORD *)this + 83) + v21;
      *((_DWORD *)this + 83) = v22;
      unsigned int v23 = *((_DWORD *)this + 79);
      BOOL v19 = v22 >= v23;
      unsigned int v24 = v22 - v23;
      if (v19) {
        *((_DWORD *)this + 83) = v24;
      }
      *((_DWORD *)this + 81) = *((_DWORD *)this + 80) - v21;
      *((_DWORD *)this + 80) = v23;
      *((unsigned char *)this + 336) = 0;
    }
    unsigned int v25 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v122, v14);
    BlueFin::GlBitBuffer::PutU((uint64_t *)this + 31, v25, v14);
    unsigned int v26 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v117, v14);
    BlueFin::GlBitBuffer::PutU((uint64_t *)this + 37, v26, v14);
    int v11 = DWORD1(v124);
  }
  *((_DWORD *)this + 60) = *((_DWORD *)v84 + 5);
  unsigned int v85 = *((_DWORD *)this + 69);
  if (v85 < 0x10
    || (*((_DWORD *)this + 68) = v85,
        *((_DWORD *)this + 69) = 0,
        *((unsigned char *)this + 288) = 0,
        *((void *)this + 40) = *((unsigned int *)this + 81),
        *((unsigned char *)this + 336) = 0,
        LOWORD(v27) = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 248), 0xFu),
        BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 296), 0xFu),
        *((_DWORD *)this + 68) == *((_DWORD *)this + 69)))
  {
LABEL_67:
    BlueFin::GlBitBuffer::Position((uint64_t)this + 248, v85);
    BlueFin::GlBitBuffer::Limit((uint64_t)this + 248, *((_DWORD *)this + 67));
    uint64_t v62 = BlueFin::GlBitBuffer::Position((uint64_t)this + 296, v85);
    return BlueFin::GlBitBuffer::Limit(v62, *((_DWORD *)this + 79));
  }
  int32x2_t v28 = vdup_n_s32(0x140u);
  while (1)
  {
    int v29 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 248), 1u);
    BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 296), 1u);
    int v27 = (2 * (v27 & 0x7FFF)) | v29;
    int v30 = v27 ^ 0xEB90;
    if ((v27 ^ 0xEB90) != 0xFFFF && v30 != 0) {
      goto LABEL_66;
    }
    unsigned int v32 = *((_DWORD *)this + 69);
    if (*((_DWORD *)this + 68) - v32 < 0x248) {
      goto LABEL_66;
    }
    v112[0] = (uint64_t)v135;
    v112[1] = 0;
    char v113 = 0;
    int v115 = 0;
    long long v114 = xmmword_263BB2C30;
    int v33 = 18;
    char v116 = 0;
    do
    {
      unsigned int v34 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 248), 0x20u);
      BlueFin::GlBitBuffer::PutU(v112, v34, 0x20u);
      --v33;
    }
    while (v33);
    unsigned int v35 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 248), 8u);
    BlueFin::GlBitBuffer::PutU(v112, v35, 8u);
    v107[0] = (uint64_t)v133;
    v107[1] = 0;
    char v108 = 0;
    int v110 = 0;
    long long v109 = xmmword_263BB2C30;
    int v36 = 18;
    char v111 = 0;
    do
    {
      unsigned int v37 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 296), 0x20u);
      BlueFin::GlBitBuffer::PutU(v107, v37, 0x20u);
      --v36;
    }
    while (v36);
    unsigned int v38 = BlueFin::GlBitBuffer::GetU((BlueFin::GlMeNavICDecodeHelper *)((char *)this + 296), 8u);
    BlueFin::GlBitBuffer::PutU(v107, v38, 8u);
    v102[0] = (uint64_t)&v129;
    v102[1] = 0;
    char v103 = 0;
    int v105 = 0;
    long long v104 = xmmword_263BB2C30;
    char v106 = 0;
    *(void *)((char *)&v114 + 4) = DWORD2(v114);
    char v116 = 0;
    int v39 = 584;
    do
    {
      unsigned int v40 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 1u);
      BlueFin::GlBitBuffer::PutU(v102, v40, 1u);
      if (DWORD2(v114) + 72 <= 583) {
        unsigned int v41 = DWORD2(v114) + 72;
      }
      else {
        unsigned int v41 = DWORD2(v114) - 511;
      }
      BlueFin::GlBitBuffer::Position((uint64_t)v112, v41);
      --v39;
    }
    while (v39);
    long long v136 = v130;
    long long v137 = v131;
    v138[0] = *(_OWORD *)v132;
    *(_OWORD *)((char *)v138 + 12) = *(_OWORD *)&v132[12];
    *(_OWORD *)int v135 = v129;
    int v105 = 0;
    *(void *)((char *)&v104 + 4) = v104;
    char v106 = 0;
    memset(v127, 0, sizeof(v127));
    __int16 v128 = 255;
    *(void *)((char *)&v109 + 4) = DWORD2(v109);
    int v42 = 584;
    char v111 = 0;
    do
    {
      unsigned int v43 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v107, 1u);
      BlueFin::GlBitBuffer::PutU(v102, v43, 1u);
      if (DWORD2(v109) + 72 <= 583) {
        unsigned int v44 = DWORD2(v109) + 72;
      }
      else {
        unsigned int v44 = DWORD2(v109) - 511;
      }
      BlueFin::GlBitBuffer::Position((uint64_t)v107, v44);
      --v42;
    }
    while (v42);
    uint64_t v45 = 0;
    v133[1] = v130;
    v133[2] = v131;
    v134[0] = *(_OWORD *)v132;
    *(_OWORD *)((char *)v134 + 12) = *(_OWORD *)&v132[12];
    v133[0] = v129;
    int v105 = 0;
    *(void *)((char *)&v104 + 4) = v104;
    if (v30 == 0xFFFF) {
      int v46 = -1;
    }
    else {
      int v46 = 0;
    }
    char v106 = 0;
    do
      v135[v45++] ^= v46;
    while (v45 != 19);
    unsigned int v47 = BlueFin::GlMeSrdViterbiDecoder::RunViterbi((BlueFin::GlMeSrdViterbiDecoder *)v127, 0x248u, v135, (unsigned int *)v133, 1);
    BlueFin::GlBitBuffer::Position((uint64_t)v112, 0x11Eu);
    if (BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 6u))
    {
      DeviceFaultNotify("glme_navic_decoder.cpp", 257, "SetDSPDataBits", (char)"0 == (otSubFrame.GetU(6))");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_navic_decoder.cpp", 257, "0 == (otSubFrame.GetU(6))");
    }
    if (v47 > 0x3E7)
    {
      BlueFin::GlBitBuffer::Position((uint64_t)this + 248, v32);
      BlueFin::GlBitBuffer::Position((uint64_t)this + 296, v32);
      goto LABEL_66;
    }
    int v96 = &unk_270EBA448;
    __int16 v97 = 0;
    char v98 = 0;
    __int16 v99 = 0;
    memset(v100, 0, sizeof(v100));
    int v101 = 0;
    int v92 = &unk_270EBA3B8;
    __int16 v93 = 0;
    int v94 = -1;
    memset(v95, 0, sizeof(v95));
    v86[0] = (uint64_t)&v100[2];
    v86[1] = 0;
    char v87 = 0;
    uint64_t v90 = 0;
    __int32 v89 = 0;
    int32x2_t v88 = v28;
    char v91 = 0;
    DWORD2(v114) = 0;
    char v116 = 0;
    unsigned int v48 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v48, 0x20u);
    unsigned int v49 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v49, 0x20u);
    unsigned int v50 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v50, 0x20u);
    unsigned int v51 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v51, 0x20u);
    unsigned int v52 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v52, 0x20u);
    unsigned int v53 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v53, 0x20u);
    unsigned int v54 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v54, 0x20u);
    unsigned int v55 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v55, 0x20u);
    unsigned int v56 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 0x20u);
    BlueFin::GlBitBuffer::PutU(v86, v56, 0x20u);
    unsigned int v57 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v112, 4u);
    BlueFin::GlBitBuffer::PutU(v86, v57, 4u);
    int v58 = 0;
    v88.i32[1] = v89;
    __int32 v89 = 0;
    char v91 = 0;
    int v59 = 286;
    do
    {
      int v60 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v86, 1u);
      int v61 = v58 & 0x800000;
      if (v60) {
        int v61 = v58 & 0x800000 ^ 0x800000;
      }
      if (v61) {
        int v58 = (2 * (v58 & 0x7FFFFF)) ^ 0x864CFB;
      }
      else {
        int v58 = 2 * (v58 & 0x7FFFFF);
      }
      --v59;
    }
    while (v59);
    if (!v58) {
      break;
    }
    *((unsigned char *)this + 354) = 0;
LABEL_66:
    if (*((_DWORD *)this + 68) == *((_DWORD *)this + 69)) {
      goto LABEL_67;
    }
  }
  *((unsigned char *)this + 354) = 1;
  *((unsigned char *)this + 352) = 1;
  if (v30 == 0xFFFF) {
    int v64 = 2;
  }
  else {
    int v64 = 1;
  }
  *((_DWORD *)this + 89) = v64;
  double v65 = *((double *)v84 + 4) * 1000.0;
  if (v65 > 0.0)
  {
    double v66 = 0.5;
    goto LABEL_76;
  }
  if (v65 < 0.0)
  {
    double v66 = -0.5;
LABEL_76:
    int v67 = (int)(v65 + v66);
  }
  else
  {
    int v67 = 0;
  }
  int v68 = -20 * (*((_DWORD *)this + 68) - *((_DWORD *)this + 69));
  int v101 = v68 + v67;
  *((_DWORD *)this + 92) = v68 + *((_DWORD *)v84 + 5);
  LOBYTE(v97) = *((unsigned char *)v84 + 9);
  BlueFin::GlBitBuffer::Position((uint64_t)v86, 8u);
  v100[0] = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v86, 0x11u);
  v100[1] = 12 * v100[0];
  BlueFin::GlBitBuffer::Position((uint64_t)v86, 0x1Bu);
  char v98 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v86, 2u);
  if (!v98)
  {
    BlueFin::GlBitBuffer::Position((uint64_t)v86, 0x1Eu);
    __int16 v99 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v86, 0xAu);
  }
  unsigned int v69 = v100[1];
  int v70 = 1000 * v100[1];
  *((_DWORD *)this + 90) = 1000 * v100[1];
  int v71 = *((_DWORD *)v84 + 5) - 20 * (*((_DWORD *)this + 68) - *((_DWORD *)this + 69));
  *((_DWORD *)this + 91) = v71;
  if (v69 >= 0x93A80)
  {
    __int16 v99 = (v99 + 1) & 0x3FF;
    v69 -= 604800;
    v100[1] = v69;
    *((_DWORD *)this + 90) = v70 - 604800000;
  }
  *((unsigned char *)this + 353) = 1;
  LOBYTE(v93) = v97;
  HIBYTE(v93) = v98 + 1;
  v95[11] = v101;
  int v94 = v71;
  v95[0] = v69;
  memset(&v95[1], 0, 40);
  BlueFin::GlBitBuffer::Position((uint64_t)v86, 0);
  for (uint64_t j = 20; j != 56; j += 4)
    *(_DWORD *)((char *)&v92 + j) |= BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v86, 0x1Eu);
  int v73 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v86, 0x16u);
  v95[10] |= v73;
  uint64_t v74 = *((void *)this + 43);
  int v75 = *((_DWORD *)this + 91);
  if (*(_DWORD *)v74 != v75)
  {
    (*(void (**)(void, void **))(**(void **)(v74 + 8) + 32))(*(void *)(v74 + 8), &v92);
    *(_DWORD *)uint64_t v74 = v75;
  }
  int v76 = *((_DWORD *)this + 69);
  unsigned int v77 = *((_DWORD *)this + 71) + v76;
  *((_DWORD *)this + 71) = v77;
  unsigned int v78 = *((_DWORD *)this + 67);
  BOOL v19 = v77 >= v78;
  unsigned int v79 = v77 - v78;
  if (v19) {
    *((_DWORD *)this + 71) = v79;
  }
  *((_DWORD *)this + 69) = *((_DWORD *)this + 68) - v76;
  *((_DWORD *)this + 68) = v78;
  *((unsigned char *)this + 288) = 0;
  BlueFin::GlBitBuffer::Limit((uint64_t)this + 248, v78);
  int v80 = *((_DWORD *)this + 81);
  unsigned int v81 = *((_DWORD *)this + 83) + v80;
  *((_DWORD *)this + 83) = v81;
  unsigned int v82 = *((_DWORD *)this + 79);
  BOOL v19 = v81 >= v82;
  unsigned int v83 = v81 - v82;
  if (v19) {
    *((_DWORD *)this + 83) = v83;
  }
  *((_DWORD *)this + 81) = *((_DWORD *)this + 80) - v80;
  *((_DWORD *)this + 80) = v82;
  *((unsigned char *)this + 336) = 0;
  return BlueFin::GlBitBuffer::Limit((uint64_t)this + 296, v82);
}

uint64_t BlueFin::GlPeNicEphDecData::Unpack(BlueFin::GlPeNicEphDecData *this, BlueFin::GlPeNicEphemeris *a2)
{
  if (*((unsigned char *)this + 16) != 3)
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 331, "Unpack", (char)"AllSubframesPresent()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 331, "AllSubframesPresent()");
  }
  (*(void (**)(BlueFin::GlPeNicEphemeris *, void, void))(*(void *)a2 + 216))(a2, 0, *((unsigned __int8 *)this + 4));
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 3, *((_DWORD *)this + 6) >> 30);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 28, (*((_DWORD *)this + 6) >> 20) & 0x3FF);
  HIDWORD(v4) = *((_DWORD *)this + 6);
  LODWORD(v4) = *((_DWORD *)this + 7);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 10, (v4 >> 20) >> 10);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 9, (unsigned __int16)(*((_DWORD *)this + 7) >> 14));
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 8, (*((_DWORD *)this + 7) >> 6));
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 4, (*((_DWORD *)this + 7) >> 2) & 0xF);
  HIDWORD(v4) = *((_DWORD *)this + 7);
  LODWORD(v4) = *((_DWORD *)this + 8);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 7, (v4 >> 2) >> 16);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 6, (*((_DWORD *)this + 8) >> 10));
  HIDWORD(v4) = *((_DWORD *)this + 8);
  LODWORD(v4) = *((_DWORD *)this + 9);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 12, (v4 >> 10) >> 10);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 29, (*((_DWORD *)this + 9) >> 12));
  HIDWORD(v4) = *((_DWORD *)this + 9);
  LODWORD(v4) = *((_DWORD *)this + 10);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 14, (v4 >> 12) >> 17);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 16, (*((_DWORD *)this + 10) >> 14) & 0x7FFF);
  HIDWORD(v4) = *((_DWORD *)this + 10);
  LODWORD(v4) = *((_DWORD *)this + 11);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 19, (v4 >> 14) >> 17);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 21, *((_WORD *)this + 23) & 0x7FFF);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 23, (unsigned __int16)*((_DWORD *)this + 11) >> 1);
  HIDWORD(v4) = *((_DWORD *)this + 11);
  LODWORD(v4) = *((_DWORD *)this + 12);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 11, (v4 >> 1) >> 17);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 26, (*((_DWORD *)this + 12) >> 4) & 0x3FFF);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 13, *((unsigned int *)this + 13));
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 18, *((unsigned __int16 *)this + 29));
  HIDWORD(v4) = *((_DWORD *)this + 14);
  LODWORD(v4) = *((_DWORD *)this + 15);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 15, (v4 >> 16));
  HIDWORD(v4) = *((_DWORD *)this + 15);
  LODWORD(v4) = *((_DWORD *)this + 16);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 17, (v4 >> 16));
  HIDWORD(v4) = *((_DWORD *)this + 16);
  LODWORD(v4) = *((_DWORD *)this + 17);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 20, (v4 >> 16));
  HIDWORD(v4) = *((_DWORD *)this + 17);
  LODWORD(v4) = *((_DWORD *)this + 18);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 24, (v4 >> 16));
  HIDWORD(v4) = *((_DWORD *)this + 18);
  LODWORD(v4) = *((_DWORD *)this + 19);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 25, (v4 >> 16) >> 10);
  HIDWORD(v4) = *((_DWORD *)this + 19);
  LODWORD(v4) = *((_DWORD *)this + 20);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216))(a2, 22, (v4 >> 26));
  int v5 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 18);
  unsigned int v6 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 18) * v5;
  int v7 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 28);
  uint64_t v8 = (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)a2 + 232))(a2, 28) * v7;
  unsigned int v9 = *((_DWORD *)this + 3);
  if (v6 + 302400 >= v9)
  {
    if (v9 + 302400 >= v6) {
      goto LABEL_7;
    }
    __int16 v10 = v8 - 1;
  }
  else
  {
    __int16 v10 = v8 + 1;
  }
  uint64_t v8 = v10 & 0x3FF;
LABEL_7:
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 27, 1);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 28, v8);
  (*(void (**)(BlueFin::GlPeNicEphemeris *, uint64_t, BOOL))(*(void *)a2 + 216))(a2, 2, *((unsigned char *)this + 17) == 3);
  int v11 = *(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)a2 + 216);

  return v11(a2, 1, 0);
}

uint64_t BlueFin::GlPeNicEphemeris::GetFctS(BlueFin::GlPeNicEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  if ((*(uint64_t (**)(BlueFin::GlPeNicEphemeris *))(*(void *)this + 80))(this))
  {
    int v4 = 604800
       * (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
    int v5 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 18);
    return v4
         + (*(unsigned int (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 232))(this, 18)
         * v5;
  }
  else
  {
    BlueFin::GlPeEphemeris::GetEphTime(this, a2, (uint64_t)v13);
    int v11 = &off_270EBF538;
    uint64_t v12 = 0;
    BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v13, (BlueFin::GlGalTime *)&v11);
    unsigned int v7 = ((uint64_t (*)(void))v11[4])(&v11);
    LODWORD(v8) = v12;
    double v9 = (double)v8 * 2.32830644e-10 + (double)v7;
    double v10 = fmod(v9, 4294967300.0);
    if (v9 <= 4294967300.0) {
      double v10 = v9;
    }
    if (v10 < -4294967300.0) {
      double v10 = -fmod(-v10, 4294967300.0);
    }
    if (v10 < 0.0) {
      return --v10;
    }
    else {
      return v10;
    }
  }
}

float BlueFin::GlPeNicEphemeris::GetAccuracyM(BlueFin::GlPeNicEphemeris *this)
{
  unsigned __int8 v2 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 4);
  int v3 = (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 32);
  char v4 = v2;
  if (v2 >= 8u) {
    char v4 = 8;
  }
  unsigned __int8 v5 = v4 + 7;
  if (!v3) {
    unsigned __int8 v5 = v2;
  }
  if (v5 <= 0xEu) {
    return flt_263BB2EE0[v5];
  }
  else {
    return 8192.0;
  }
}

uint64_t BlueFin::GlPeNicEphemeris::GetSatClkInfo(BlueFin::GlPeNicEphemeris *this, const BlueFin::GlPeGnssTime *a2, double *a3, double *a4)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 17);
  double v9 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 15);
  double v22 = v9;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 12)
      + sqrt(3.986005e14/ (ScaledFloatingField* ScaledFloatingField* (ScaledFloatingField* ScaledFloatingField* (ScaledFloatingField* ScaledFloatingField))));
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 9);
  double v12 = (*(double (**)(BlueFin::GlPeNicEphemeris *, const BlueFin::GlPeGnssTime *, void))(*(void *)this + 64))(this, a2, 0);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 10) + v11 * v12;
  *a3 = v13;
  double v14 = v13 - BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 6);
  double v15 = (*(double (**)(BlueFin::GlPeNicEphemeris *, const BlueFin::GlPeGnssTime *, uint64_t))(*(void *)this + 64))(this, a2, 1)- v14;
  double v21 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 13) + v10 * v15;
  double v20 = 0.0;
  BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v21, &v22, &v20, v16);
  __double2 v17 = __sincos_stret(v20);
  double v18 = ScaledFloatingField * (v9 * -4.44280763e-10);
  *a3 = *a3 + v18 * v17.__sinval;
  *a4 = v11 + v18 * v17.__cosval * v10;
  return 1;
}

uint64_t BlueFin::GlPeNicEphemeris::GetPvt(BlueFin::GlPeEphemeris *a1, uint64_t a2, uint64_t a3, double a4)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 17);
  double v59 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 15);
  double v8 = v59 * v59;
  double v9 = v59;
  double v56 = ScaledFloatingField * ScaledFloatingField;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12) + sqrt(3.986005e14 / (v56 * (v56 * v56)));
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9);
  double v12 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, void))(*(void *)a1 + 64))(a1, a2, 0);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 10) + v11 * v12;
  *(double *)(a3 + 48) = v13;
  double v14 = v13 - BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 6);
  double v15 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1) - v14;
  double v53 = v10;
  double v58 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v10 * v15;
  double v57 = 0.0;
  BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v58, &v59, &v57, v16);
  __double2 v17 = __sincos_stret(v57);
  double v18 = ScaledFloatingField * (v9 * -4.44280763e-10);
  *(double *)(a3 + 48) = *(double *)(a3 + 48) + v18 * v17.__sinval;
  *(double *)(a3 + 56) = v11 + v18 * v17.__cosval * v10;
  double v45 = v15 - v18 * v17.__sinval;
  double v52 = atan2(sqrt(1.0 - v8) * v17.__sinval, v17.__cosval - v9);
  double v19 = v52 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v20 = __sincos_stret(v19 + v19);
  double v47 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 16);
  double v46 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 14);
  double v49 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11);
  double v48 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 23);
  double v51 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 21);
  double v50 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 19);
  double v21 = v19 + v46 * v20.__cosval + v47 * v20.__sinval;
  double v55 = 1.0 - v9 * v17.__cosval;
  double v22 = v20.__cosval * v48 + v49 * v20.__sinval + ScaledFloatingField * ScaledFloatingField * v55;
  double v44 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 26);
  double v23 = v20.__cosval * v50 + v51 * v20.__sinval + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22) + v44 * v45;
  __double2 v24 = __sincos_stret(v21);
  double v43 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 25) + -0.0000729211515;
  double v25 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20) + v43 * (v45 + a4);
  double v26 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v27 = __sincos_stret(v25 + v26 * -0.0000729211515);
  __double2 v28 = __sincos_stret(v23);
  double v29 = v24.__sinval * v22 * v28.__cosval;
  *(double *)a3 = v24.__cosval * v22 * v27.__cosval - v29 * v27.__sinval;
  *(double *)(a3 + 8) = v29 * v27.__cosval + v24.__cosval * v22 * v27.__sinval;
  *(double *)(a3 + 16) = v24.__sinval * v22 * v28.__sinval;
  __double2 v30 = __sincos_stret(v21 + v21);
  double sinval = v30.__sinval;
  double cosval = v30.__cosval;
  __double2 v33 = __sincos_stret(v52);
  double v34 = v17.__sinval * (v53 / v55) * (v9 * v33.__cosval + 1.0) / (v55 * v33.__sinval);
  double v35 = v34 + (v47 * cosval - v46 * sinval + v47 * cosval - v46 * sinval) * v34;
  double v36 = v53 * (v56 * v9 * v17.__sinval) / v55 + (v49 * cosval - v48 * sinval + v49 * cosval - v48 * sinval) * v34;
  double v37 = v44 + (v51 * cosval - v50 * sinval + v51 * cosval - v50 * sinval) * v34;
  double v38 = v36 * v24.__cosval - v24.__sinval * v22 * v35;
  double v39 = v24.__cosval * v22 * v35 + v36 * v24.__sinval;
  double v40 = v38 - v29 * v43;
  double v41 = v28.__cosval * v39 + v24.__cosval * v22 * v43 - v24.__sinval * v22 * v28.__sinval * v37;
  *(double *)(a3 + 24) = v40 * v27.__cosval - v41 * v27.__sinval;
  *(double *)(a3 + 32) = v27.__cosval * v41 + v40 * v27.__sinval;
  *(double *)(a3 + 40) = v29 * v37 + v39 * v28.__sinval;
  *(_DWORD *)(a3 + 64) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a1 + 152))(a1);
  return 1;
}

uint64_t BlueFin::GlPeNicEphemeris::GetApproximateElevation(BlueFin::GlPeEphemeris *a1, uint64_t a2, double *a3)
{
  double v5 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22);
  double v7 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12) + 0.000072918;
  double v8 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v7 * v5;
  double v9 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v10 = __sincos_stret(v8 + v9);
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20);
  double v12 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v13 = __sincos_stret(v11 + (v5 + v12) * -0.0000729211515);
  __double2 v14 = __sincos_stret(ScaledFloatingField);
  double v15 = ((a3[1] * (v14.__cosval * (v10.__sinval * 42165305.6) * v13.__cosval + v10.__cosval * 42165305.6 * v13.__sinval)
        + (v10.__cosval * 42165305.6 * v13.__cosval - v14.__cosval * (v10.__sinval * 42165305.6) * v13.__sinval) * *a3
        + v14.__sinval * (v10.__sinval * 42165305.6) * a3[2])
       / 2.6847923e14
       + -0.24)
      * 90.0;
  if (v15 <= 0.0)
  {
    if (v15 >= 0.0)
    {
      int v17 = 0;
      goto LABEL_7;
    }
    double v16 = -0.5;
  }
  else
  {
    double v16 = 0.5;
  }
  int v17 = (int)(v15 + v16);
LABEL_7:
  if (v17 <= -90) {
    int v17 = -90;
  }
  if (v17 >= 90) {
    return 90;
  }
  else {
    return v17;
  }
}

uint64_t BlueFin::GlPeNicEphemeris::GetIssueOfData(BlueFin::GlPeNicEphemeris *this)
{
  return (*(unsigned __int16 (**)(BlueFin::GlPeNicEphemeris *, uint64_t))(*(void *)this + 192))(this, 29);
}

uint64_t BlueFin::GlPeNicEphemeris::MarkUnverified(BlueFin::GlPeNicEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeNicEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 2, 0);
}

uint64_t BlueFin::GlPeNicEphMgr::SetLtoEph(BlueFin::GlPeNicEphMgr *this, const BlueFin::GlPeLtoEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeNicEphMgr *, const BlueFin::GlPeLtoEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

uint64_t BlueFin::GlPeNicEphMgr::SetDataSubFrmMeas(BlueFin::GlPeNicEphMgr *this, const BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v123 = *MEMORY[0x263EF8340];
  if (*((unsigned __int8 *)a2 + 9) - 1 >= 2)
  {
    long long v104 = "potDataSubFrmMeas.ucSubFrmId == 1 || potDataSubFrmMeas.ucSubFrmId == 2";
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1412, "SetDataSubFrmMeas", (char)"potDataSubFrmMeas.ucSubFrmId == 1 || potDataSubFrmMeas.ucSubFrmId == 2");
    int v105 = 1412;
    goto LABEL_142;
  }
  char v4 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)this + 8);
  int v110 = 7;
  LOBYTE(v111) = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss(v4, (unsigned __int8 *)a2 + 8, (uint64_t)&v110);
  if (v110 > 6 || (int v6 = v111, v111 - 1 >= 0x3F))
  {
    long long v104 = "otGnss.isValid()";
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1415, "SetDataSubFrmMeas", (char)"otGnss.isValid()");
    int v105 = 1415;
    goto LABEL_142;
  }
  if (*((_DWORD *)this + 3) != v110) {
    return result;
  }
  unsigned int v108 = *(_DWORD *)(*((void *)this + 2) + 2568);
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 2112, v111);
  if (*(unsigned __int8 *)(*((void *)this + 266) + v6 - *((unsigned __int8 *)this + 2148)) == 255
    && *((unsigned __int8 *)this + 2151) == 255)
  {
    *(void *)&v109[0] = (char *)this + 2112;
    BYTE8(v109[0]) = 0;
    if (!*((unsigned char *)this + 2150)) {
      goto LABEL_147;
    }
    unsigned int v60 = 0;
    int v61 = 0;
    do
    {
      int v62 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)v109);
      unsigned int v63 = *(_DWORD *)(BlueFin::GlArray::Get((BlueFin::GlPeNicEphMgr *)((char *)this + 2112), v62) + 8);
      unsigned int v64 = v108 - v63;
      if (v60 <= v108 - v63) {
        int v65 = v62;
      }
      else {
        int v65 = v61;
      }
      if (v60 > v64) {
        unsigned int v64 = v60;
      }
      if (v108 > v63)
      {
        int v61 = v65;
        unsigned int v60 = v64;
      }
    }
    while (BYTE8(v109[0]) < *(unsigned __int8 *)(*(void *)&v109[0] + 38));
    if (v60 <= 0xEA60)
    {
LABEL_147:
      int v66 = *((_DWORD *)this + 3);
      int v67 = "BDS";
      int v68 = "GPS";
      switch(v66)
      {
        case 0:
          return GlCustomLog(13, "EphMgr(%s,%d)[%u]: No free decoders available! GnssId:%d\n", v68, v111, v108, v111);
        case 1:
          int v68 = "SBAS";
          break;
        case 2:
          int v68 = "GLNS";
          break;
        case 3:
          int v68 = "QZSS";
          break;
        case 4:
          goto LABEL_92;
        default:
          uint64_t v90 = "<->";
          if (v66 == 6) {
            uint64_t v90 = "NIC";
          }
          int v67 = "GAL";
          if (v66 != 5) {
            int v67 = v90;
          }
LABEL_92:
          int v68 = v67;
          break;
      }
      return GlCustomLog(13, "EphMgr(%s,%d)[%u]: No free decoders available! GnssId:%d\n", v68, v111, v108, v111);
    }
    BlueFin::GlArray::Remove((BlueFin::GlPeNicEphMgr *)((char *)this + 2112), v61);
    int v6 = v111;
  }
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 2112, v6);
  double v7 = (BlueFin::GlPeNicEphMgr *)((char *)this + 2112);
  if (*(unsigned __int8 *)(*((void *)this + 266) + v6 - *((unsigned __int8 *)this + 2148)) != 255)
  {
    uint64_t result = BlueFin::GlArray::Get(v7, v6);
    uint64_t v8 = result;
    if (result) {
      goto LABEL_9;
    }
    long long v104 = "potDecoder != nullptr";
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1569, "getDecoder", (char)"potDecoder != nullptr");
    int v105 = 1569;
LABEL_142:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", v105, v104);
  }
  __double2 v14 = (char *)BlueFin::GlArray::Add(v7, v6);
  if (!v14)
  {
    long long v104 = "pBuffer != nullptr";
    DeviceFaultNotify("glpe_nicephmgr.cpp", 1549, "getDecoder", (char)"pBuffer != nullptr");
    int v105 = 1549;
    goto LABEL_142;
  }
  uint64_t v8 = (uint64_t)v14;
  *(_DWORD *)__double2 v14 = *((_DWORD *)this + 3);
  v14[4] = v6;
  *((_DWORD *)v14 + 2) = -7200001;
  *(_OWORD *)(v14 + 24) = 0u;
  double v15 = v14 + 24;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 68) = 0u;
  *(void *)(v14 + 12) = 0;
  v14[20] = 0;
  __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, &v114);
  int v17 = (_DWORD *)(*(uint64_t (**)(BlueFin::GlPeNicEphMgr *, unsigned int *, __n128))(*(void *)this + 368))(this, &v111, Time);
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v17 + 144))(v17);
  int v18 = result;
  if (result <= 1 && v114.n128_u32[2] != -1 && *(double *)((char *)&v116 + 4) != 4294967300.0)
  {
    uint64_t result = BlueFin::GlPeEphemeris::isExpired(v17, (uint64_t)&v114);
    if ((result & 1) == 0)
    {
      v109[0] = (unint64_t)v15;
      LOBYTE(v109[1]) = 0;
      DWORD1(v109[2]) = 0;
      *(_OWORD *)((char *)&v109[1] + 4) = xmmword_263BB2A50;
      BYTE8(v109[2]) = 0;
      unsigned int v20 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 3);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v20, 2u);
      unsigned int v21 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 28);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v21, 0xAu);
      unsigned int v22 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 10);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v22, 0x16u);
      unsigned int v23 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 9);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v23, 0x10u);
      unsigned int v24 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 8);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v24, 8u);
      unsigned int v25 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 4);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v25, 4u);
      unsigned int v26 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 7);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v26, 0x10u);
      unsigned int v27 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 6);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v27, 8u);
      unsigned int v28 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 12);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v28, 0x16u);
      unsigned int v29 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 29);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v29, 8u);
      unsigned int v30 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 14);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v30, 0xFu);
      unsigned int v31 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 16);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v31, 0xFu);
      unsigned int v32 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 19);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v32, 0xFu);
      unsigned int v33 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 21);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v33, 0xFu);
      unsigned int v34 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 23);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v34, 0xFu);
      unsigned int v35 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 11);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v35, 0xFu);
      unsigned int v36 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 26);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v36, 0xEu);
      v109[0] = (unint64_t)(v8 + 52);
      LOBYTE(v109[1]) = 0;
      DWORD1(v109[2]) = 0;
      HIDWORD(v109[1]) = 0;
      *(void *)((char *)&v109[1] + 4) = 0x10000000100;
      BYTE8(v109[2]) = 0;
      unsigned int v37 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 13);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v37, 0x20u);
      unsigned int v38 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 18);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v38, 0x10u);
      unsigned int v39 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 15);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v39, 0x20u);
      unsigned int v40 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 17);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v40, 0x20u);
      unsigned int v41 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 20);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v41, 0x20u);
      unsigned int v42 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 24);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v42, 0x20u);
      unsigned int v43 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 25);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v43, 0x16u);
      unsigned int v44 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 208))(v17, 22);
      BlueFin::GlBitBuffer::PutU((uint64_t *)v109, v44, 0x20u);
      *(unsigned char *)(v8 + 16) = 3;
      if ((*(unsigned int (**)(_DWORD *))(*(void *)v17 + 184))(v17)) {
        char v45 = 3;
      }
      else {
        char v45 = 0;
      }
      *(unsigned char *)(v8 + 17) = v45;
      int v46 = *((_DWORD *)this + 3);
      double v47 = "BDS";
      double v48 = "GPS";
      switch(v46)
      {
        case 0:
          break;
        case 1:
          double v48 = "SBAS";
          break;
        case 2:
          double v48 = "GLNS";
          break;
        case 3:
          double v48 = "QZSS";
          break;
        case 4:
          goto LABEL_100;
        default:
          double v47 = "<->";
          if (v46 == 6) {
            double v47 = "NIC";
          }
          if (v46 == 5) {
            double v47 = "GAL";
          }
LABEL_100:
          double v48 = v47;
          break;
      }
      int v91 = v111;
      int v92 = *(_DWORD *)(*((void *)this + 2) + 2568);
      if (v18) {
        __int16 v93 = "ASST";
      }
      else {
        __int16 v93 = "SAT";
      }
      int v94 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)v17 + 192))(v17, 5);
      uint64_t result = GlCustomLog(14, "EphMgr(%s,%d)[%u]: Pre-loaded with existing data.  Src:%s  IODC:%03x\n", v48, v91, v92, v93, v94);
    }
  }
LABEL_9:
  char v9 = *((unsigned char *)a2 + 9);
  if ((v9 - 3) <= 0xFDu)
  {
    DeviceFaultNotify("glpe_nicephmgr.cpp", 139, "InsertSubframe", (char)"ucSubId == 1 || ucSubId == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 139, "ucSubId == 1 || ucSubId == 2");
  }
  uint64_t v122 = 0;
  memset(v121, 0, sizeof(v121));
  v114.n128_u64[0] = (unint64_t)v121;
  v114.n128_u64[1] = 0;
  char v115 = 0;
  int v117 = 0;
  long long v116 = xmmword_263BB2920;
  char v118 = 0;
  if (!(*((_DWORD *)a2 + 5) >> 30))
  {
    uint64_t v10 = 0;
    unsigned __int8 v107 = v9 - 1;
    unsigned int v11 = 1;
    do
    {
      double v12 = (uint64_t *)BlueFin::GlBitBuffer::Position((uint64_t)&v114, v11);
      uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU(v12, *((_DWORD *)a2 + v10 + 5), 0x1Eu);
      if (v10 == 9)
      {
        *(unsigned char *)(v8 + 18) = 0;
        v120[0] = v109;
        v120[1] = (char *)&v109[1] + 12;
        double v49 = (unsigned int *)v120[v107];
        memset(v109, 0, 60);
        size_t v50 = byte_263BB2E70[v107];
        int v113 = 0;
        __s2 = v49;
        BlueFin::GlBitBuffer::Initialize((uint64_t)v112, v49, v50);
        uint64_t v51 = 0;
        char v52 = BlueFin::GlPeNicEphDecData::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucFieldIdx[v107];
        if (BlueFin::GlPeNicEphDecData::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucNumFields[v107] <= 1u) {
          uint64_t v53 = 1;
        }
        else {
          uint64_t v53 = BlueFin::GlPeNicEphDecData::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucNumFields[v107];
        }
        do
        {
          uint64_t v54 = (v52 + v51);
          double v55 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position((uint64_t)&v114, *((unsigned __int16 *)&BlueFin::GlPeNicEphDecData::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucSfFieldOffsets+ 2 * v54));
          LODWORD(v54) = *((unsigned __int8 *)&BlueFin::GlPeNicEphDecData::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucSfFieldOffsets
                         + 4 * v54
                         + 2);
          unsigned int v56 = BlueFin::GlBitBuffer::GetU(v55, v54);
          BlueFin::GlBitBuffer::PutU(v112, v56, v54);
          ++v51;
        }
        while (v53 != v51);
        v119[0] = v8 + 24;
        v119[1] = v8 + 52;
        int v57 = *(unsigned __int8 *)(v8 + 17);
        double v58 = (void *)v119[v107];
        char v59 = 1 << v107;
        if (((1 << v107) & *(unsigned __int8 *)(v8 + 16)) != 0)
        {
          if (!memcmp((const void *)v119[v107], __s2, v50))
          {
            *(unsigned char *)(v8 + 17) = v57 | v59;
            *(unsigned char *)(v8 + 18) = *(unsigned char *)(v8 + 19);
          }
          else
          {
            *(unsigned char *)(v8 + 17) = v57 & ~v59;
            *(unsigned char *)(v8 + 18) = 1;
            memcpy(v58, __s2, v50);
          }
          *(unsigned char *)(v8 + 19) = 0;
        }
        else
        {
          memcpy((void *)v119[v107], __s2, v50);
          *(unsigned char *)(v8 + 16) |= v59;
          *(unsigned char *)(v8 + 18) = 1;
        }
        *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 15);
        *(_DWORD *)(v8 + 12) = *((_DWORD *)a2 + 4);
        BOOL v70 = v57 != 3 && *(unsigned char *)(v8 + 17) == 3;
        *(unsigned char *)(v8 + 20) = v70;
        goto LABEL_59;
      }
      unsigned int v13 = *((_DWORD *)a2 + v10 + 6);
      v11 += 30;
      ++v10;
    }
    while (!(v13 >> 30));
    if ((unint64_t)(v10 - 1) < 9) {
      return result;
    }
LABEL_59:
    uint64_t result = *((void *)this + 2);
    if (*(_DWORD *)(result + 2576))
    {
      __n128 v71 = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)result, 1, &v114);
      uint64_t v72 = (*(uint64_t (**)(BlueFin::GlPeNicEphMgr *, unsigned int *, __n128))(*(void *)this + 368))(this, &v111, v71);
      int v73 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 40))(v72);
      uint64_t result = (*(uint64_t (**)(BlueFin::GlPeNicEphMgr *, unsigned int *))(*(void *)this + 312))(this, &v111);
      if (v114.n128_u32[2] == -1) {
        int v74 = 0;
      }
      else {
        int v74 = result;
      }
      int v75 = 1;
      if (v74 == 1 && *(double *)((char *)&v116 + 4) != 4294967300.0)
      {
        uint64_t result = BlueFin::GlPeEphemeris::isExpired((_DWORD *)v72, (uint64_t)&v114);
        if (result)
        {
          int v75 = 1;
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 184))(v72);
          int v75 = result ^ 1;
        }
      }
      if (*(unsigned char *)(v8 + 16) == 3)
      {
        HIDWORD(v76) = *(_DWORD *)(v8 + 28);
        LODWORD(v76) = *(_DWORD *)(v8 + 32);
        unsigned int v77 = (v76 >> 2) >> 16;
        unsigned int v78 = *(_DWORD *)(v8 + 56);
        if (v77 == HIWORD(v78))
        {
          int v79 = *(unsigned __int8 *)(v8 + 17);
          if (*(unsigned char *)(v8 + 18) || *(unsigned char *)(v8 + 20))
          {
            if ((v75 & v73 & 1) != 0 || v79 == 3)
            {
              if ((*(unsigned char *)(v72 + 8) & 0xF) == 0) {
                LOBYTE(v75) = 1;
              }
              if ((v75 & 1) == 0 && v79 != 3)
              {
                DeviceFaultNotify("glpe_nicephmgr.cpp", 1488, "SetDataSubFrmMeas", (char)"rotEphCurrent.GetFormat() == GlPeEphemeris::FORMAT_NONE || !bCurrentEphVerified || bAllNewEphSubframesVerified");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nicephmgr.cpp", 1488, "rotEphCurrent.GetFormat() == GlPeEphemeris::FORMAT_NONE || !bCurrentEphVerified || bAllNewEphSubframesVerified");
              }
              WORD4(v109[0]) = 3937;
              *(void *)&v109[1] = &v109[2];
              *((int32x2_t *)&v109[1] + 1) = vdup_n_s32(0xFF9222FF);
              *(void *)&v109[0] = &unk_270EBED80;
              memset(&v109[2], 0, 60);
              BlueFin::GlPeNicEphDecData::Unpack((BlueFin::GlPeNicEphDecData *)v8, (BlueFin::GlPeNicEphemeris *)v109);
              uint64_t result = (*(uint64_t (**)(BlueFin::GlPeNicEphMgr *, _OWORD *, void))(*(void *)this + 376))(this, v109, 0);
              if (result)
              {
                int v87 = *((_DWORD *)this + 3);
                int32x2_t v88 = "BDS";
                __int32 v89 = "GPS";
                switch(v87)
                {
                  case 0:
                    break;
                  case 1:
                    __int32 v89 = "SBAS";
                    break;
                  case 2:
                    __int32 v89 = "GLNS";
                    break;
                  case 3:
                    __int32 v89 = "QZSS";
                    break;
                  case 4:
                    goto LABEL_129;
                  default:
                    int32x2_t v88 = "<->";
                    if (v87 == 6) {
                      int32x2_t v88 = "NIC";
                    }
                    if (v87 == 5) {
                      int32x2_t v88 = "GAL";
                    }
LABEL_129:
                    __int32 v89 = v88;
                    break;
                }
                int v98 = v111;
                if ((*(unsigned int (**)(_OWORD *))(*(void *)&v109[0] + 40))(v109)) {
                  uint64_t v99 = 84;
                }
                else {
                  uint64_t v99 = 70;
                }
                int v100 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(void *)&v109[0] + 192))(v109, 5);
                if ((*(unsigned int (**)(_OWORD *))(*(void *)&v109[0] + 184))(v109)) {
                  uint64_t v101 = 84;
                }
                else {
                  uint64_t v101 = 70;
                }
                int v102 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(void *)&v109[0] + 192))(v109, 18);
                int v103 = (*(uint64_t (**)(_OWORD *, uint64_t))(*(void *)&v109[0] + 192))(v109, 7);
                return GlCustomLog(14, "EphMgr(%s,%d)[%u]: Valid Eph decoded.  Healthy:%c  IODC:%u  Verified:%c, Toe %d, Toc %d\n", v89, v98, v108, v99, v100, v101, v102, v103);
              }
            }
            else
            {
              int v80 = *((_DWORD *)this + 3);
              unsigned int v81 = "BDS";
              unsigned int v82 = "GPS";
              switch(v80)
              {
                case 0:
                  break;
                case 1:
                  unsigned int v82 = "SBAS";
                  break;
                case 2:
                  unsigned int v82 = "GLNS";
                  break;
                case 3:
                  unsigned int v82 = "QZSS";
                  break;
                case 4:
                  goto LABEL_119;
                default:
                  int v96 = "<->";
                  if (v80 == 6) {
                    int v96 = "NIC";
                  }
                  unsigned int v81 = "GAL";
                  if (v80 != 5) {
                    unsigned int v81 = v96;
                  }
LABEL_119:
                  unsigned int v82 = v81;
                  break;
              }
              __int16 v97 = "unhealthy";
              if (v73) {
                __int16 v97 = "verified";
              }
              return GlCustomLog(14, "EphMgr(%s,%d)[%u]: Current ephemeris is %s, therefore wait for new set to be verified\n", v82, v111, v108, v97);
            }
          }
        }
        else
        {
          unsigned int v83 = HIWORD(v78);
          int v84 = *(_DWORD *)v8;
          unsigned int v85 = "BDS";
          int v86 = "GPS";
          switch(*(_DWORD *)v8)
          {
            case 0:
              return GlCustomLog(14, "EphMgr(%s,%d)[%u]: Ephemeris set transition detected.  [%02x  %02x]\n", v86, *(unsigned __int8 *)(v8 + 4), *(_DWORD *)(v8 + 8), v77, v83);
            case 1:
              int v86 = "SBAS";
              break;
            case 2:
              int v86 = "GLNS";
              break;
            case 3:
              int v86 = "QZSS";
              break;
            case 4:
              goto LABEL_111;
            default:
              int v95 = "<->";
              if (v84 == 6) {
                int v95 = "NIC";
              }
              unsigned int v85 = "GAL";
              if (v84 != 5) {
                unsigned int v85 = v95;
              }
LABEL_111:
              int v86 = v85;
              break;
          }
          return GlCustomLog(14, "EphMgr(%s,%d)[%u]: Ephemeris set transition detected.  [%02x  %02x]\n", v86, *(unsigned __int8 *)(v8 + 4), *(_DWORD *)(v8 + 8), v77, v83);
        }
      }
    }
    else
    {
      *(unsigned char *)(v8 + 19) = 1;
    }
  }
  return result;
}

void BlueFin::GlPeNicEphemeris::~GlPeNicEphemeris(BlueFin::GlPeNicEphemeris *this)
{
}

void BlueFin::GlPeNicEphMgr::~GlPeNicEphMgr(BlueFin::GlPeNicEphMgr *this)
{
}

uint64_t BlueFin::GlPeNicEphMgr::GetLtoAltNavData()
{
  return 0;
}

unint64_t BlueFin::GlPeEphemerisMgr::SatMarkedUnhealthy(uint64_t a1, unsigned char *a2)
{
  return ((unint64_t)*(unsigned int *)(*(void *)(a1 + 360)
                                            + (((unint64_t)*a2 >> 3) & 0x1C)) >> (*a2 & 0x1F)) & 1;
}

uint64_t BlueFin::GlPeEphemerisMgr::IsVerified(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(a1) + 184);

  return v1();
}

uint64_t BlueFin::GlPeEphemerisMgr::ValidEphemeris(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 312))();
}

uint64_t BlueFin::GlPeNicEphMgr::GetHealthBitsMask(BlueFin::GlPeNicEphMgr *this)
{
  return 0;
}

void BlueFin::GlNicTime::~GlNicTime(BlueFin::GlNicTime *this)
{
}

uint64_t BlueFin::GlNicTime::getTimeSystem(BlueFin::GlNicTime *this)
{
  return 5;
}

uint64_t BlueFin::GlWeekTowTime::resolveTowAmbiguity@<X0>(BlueFin::GlWeekTowTime *this@<X0>, long double a2@<D0>, _DWORD *a3@<X8>)
{
  double v6 = fmod(a2, 1.0);
  double v7 = v6 * 4294967300.0 + 0.5;
  unsigned int v8 = v7;
  if (v7 >= 4294967300.0) {
    unsigned int v8 = -1;
  }
  unsigned int v15 = v8;
  if (v6 < 0.0 || v6 >= 1.0)
  {
    double v12 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v13 = 173;
    goto LABEL_11;
  }
  unsigned int v16 = a2;
  if (a2 < 0.0)
  {
    double v12 = "dCtFctS >= 0.0";
    DeviceFaultNotify("glpe_timepoint.h", 463, "GlTimePoint", (char)"dCtFctS >= 0.0");
    int v13 = 463;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", v13, v12);
  }
  unsigned int v10 = (*(uint64_t (**)(BlueFin::GlWeekTowTime *))(*(void *)this + 32))(this);
  v14[0] = *((_DWORD *)this + 2);
  v14[1] = v10;
  BlueFin::GlTimePoint::resolveAmbiguity(&v15, v14, 0x93A80u);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlWeekTowTime *, void))(*(void *)this + 24))(this, v16);
  *a3 = v15;
  a3[1] = result;
  return result;
}

BOOL BlueFin::GlPeNicUtcModelData::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 22) == *(unsigned __int16 *)(a2 + 22)
      && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
      && *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26)
      && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28)
      && *(unsigned __int16 *)(a1 + 30) == *(unsigned __int16 *)(a2 + 30)
      && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33);
}

uint64_t BlueFin::GlPeNicUtcModelData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_nictimemgr.cpp", 143, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nictimemgr.cpp", 143, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 107;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    char v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 22));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 25));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 26));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 28));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 30));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 32));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 33));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeNicUtcModelData::Deserialize(BlueFin::GlPeNicUtcModelData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 107 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_WORD *)this + 11) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 10) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((unsigned char *)this + 25) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((_WORD *)this + 13) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 14) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 15) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((unsigned char *)this + 32) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 33) = BlueFin::GlSysLogEntry::GetS8(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 190);
  }
  return v3;
}

BOOL BlueFin::GlPeNicGpsOffsetData::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 20) == *(unsigned __int16 *)(a2 + 20)
      && *(unsigned __int16 *)(a1 + 22) == *(unsigned __int16 *)(a2 + 22)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
      && *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26)
      && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28);
}

BOOL BlueFin::GlPeNicGpsOffsetData::ModelValid(BlueFin::GlPeNicGpsOffsetData *this)
{
  if (!*((_DWORD *)this + 2)) {
    return 0;
  }
  if (*((__int16 *)this + 10) == -1
    && *((__int16 *)this + 11) == -1
    && *((unsigned __int8 *)this + 24) == 255
    && *((__int16 *)this + 13) == -1)
  {
    return *((unsigned __int16 *)this + 14) != 1023;
  }
  return 1;
}

uint64_t BlueFin::GlPeNicGpsOffsetData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_nictimemgr.cpp", 276, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nictimemgr.cpp", 276, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 108;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    char v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 22));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 26));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 28));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 30));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 31));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeNicGpsOffsetData::Deserialize(BlueFin::GlPeNicGpsOffsetData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 108 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_WORD *)this + 10) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((_WORD *)this + 11) = BlueFin::GlSysLogEntry::GetS16(a2);
    *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetS8(a2);
    *((_WORD *)this + 13) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 14) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((unsigned char *)this + 30) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 31) = BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 321);
  }
  return v3;
}

double BlueFin::GlPeNicTimeMgr::ResetMgr(BlueFin::GlPeNicTimeMgr *this)
{
  *((unsigned char *)this + 8) = 0;
  *((_WORD *)this + 5) = 0;
  *(void *)&double result = 4287767295;
  *(void *)((char *)this + 12) = 4287767295;
  return result;
}

uint64_t BlueFin::GlPeNicTimeMgr::ResetModels(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  *(_WORD *)(this + 36) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(void *)(this + 44) = 0;
  *(void *)(this + 50) = 0;
  *(_DWORD *)(this + 80) = 0;
  *(_WORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(void *)(this + 92) = 0;
  *(_DWORD *)(this + 100) = 0;
  *(unsigned char *)(this + 64) = 0;
  *(unsigned char *)(this + 104) = 0;
  return this;
}

uint64_t BlueFin::GlPeNicTimeMgr::SetDataSubFrmMeas(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + 8) + 81) >= 0xEu)
  {
    DeviceFaultNotify("glpe_nictimemgr.cpp", 373, "SetDataSubFrmMeas", (char)"rtSubframe.otSvId.IsNavic()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_nictimemgr.cpp", 373, "rtSubframe.otSvId.IsNavic()");
  }
  uint64_t v31 = 0;
  memset(v30, 0, sizeof(v30));
  v25[0] = (uint64_t)v30;
  v25[1] = 0;
  char v26 = 0;
  int v28 = 0;
  long long v27 = xmmword_263BB2920;
  char v29 = 0;
  uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU(v25, 0, 1u);
  uint64_t v5 = 20;
  while (1)
  {
    unsigned int v6 = *(_DWORD *)((char *)a2 + v5);
    if (v6 >> 30) {
      break;
    }
    uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU(v25, v6, 0x1Eu);
    v5 += 4;
    if (v5 == 60)
    {
      int v7 = *((unsigned __int8 *)a2 + 9);
      if ((v7 - 3) >= 2)
      {
        if (v7 == 1)
        {
          BlueFin::GlBitBuffer::Position((uint64_t)v25, 9u);
          int v15 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0x11u);
          BlueFin::GlBitBuffer::Position((uint64_t)v25, 0x1Fu);
          uint64_t result = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0xAu);
          if ((12 * v15) <= 0x93A7F)
          {
            *((_WORD *)this + 5) = result;
            *((_DWORD *)this + 3) = *((_DWORD *)a2 + 15);
            *((_DWORD *)this + 4) = 12 * v15;
            *((unsigned char *)this + 8) = 1;
          }
        }
      }
      else
      {
        BlueFin::GlBitBuffer::Position((uint64_t)v25, 0x1Fu);
        uint64_t result = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 6u);
        if (result == 26 || result == 9)
        {
          unsigned int v20 = &unk_270EBF0D0;
          long long v23 = 0uLL;
          __int16 v24 = 0;
          int v21 = 1;
          __int16 v22 = *((_WORD *)this + 5);
          LODWORD(v23) = 1000 * *((_DWORD *)this + 4);
          *(void *)((char *)&v23 + 4) = (unsigned __int16)BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0x10u);
          int v8 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0xDu);
          if ((v8 & 0xFFFFF000) == 0x1000) {
            __int16 v9 = -8192;
          }
          else {
            __int16 v9 = 0;
          }
          WORD3(v23) = v9 + v8;
          int v10 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 7u);
          BYTE8(v23) = v10 + (((v10 & 0xFFFFFFC0) == 64) << 7);
          BYTE9(v23) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 8u);
          WORD5(v23) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0x10u);
          WORD6(v23) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0xAu);
          HIWORD(v23) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0xAu);
          LOBYTE(v24) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 4u);
          HIBYTE(v24) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 8u);
          unsigned int v16 = &unk_270EBF100;
          long long v19 = 0uLL;
          int v17 = 1;
          __int16 v18 = *((_WORD *)this + 5);
          LODWORD(v19) = 1000 * *((_DWORD *)this + 4);
          *(void *)((char *)&v19 + 4) = (unsigned __int16)BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0x10u);
          int v11 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0xDu);
          if ((v11 & 0xFFFFF000) == 0x1000) {
            __int16 v12 = -8192;
          }
          else {
            __int16 v12 = 0;
          }
          WORD3(v19) = v12 + v11;
          int v13 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 7u);
          BYTE8(v19) = v13 + (((v13 & 0xFFFFFFC0) == 64) << 7);
          WORD5(v19) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0x10u);
          WORD6(v19) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 0xAu);
          BYTE14(v19) = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 3u);
          BlueFin::GlBitBuffer::Position((uint64_t)v25, 0x101u);
          uint64_t result = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v25, 6u);
          HIBYTE(v19) = result;
          unsigned int v14 = v24 - 8;
          if (WORD5(v23) > 0x93A7u || v14 < 0xFFFFFFF9 || WORD5(v19) >= 0x93A8u)
          {
            if (WORD5(v23) >= 0x93A8u) {
              uint64_t result = GlCustomLog(14, "GlPeNicTimeMgr(SvId: %d)[%u]: Tot out of range (%u). Bad decode.\n", *((unsigned __int8 *)a2 + 8), *((_DWORD *)a2 + 15), 16 * WORD5(v23));
            }
            if (v14 <= 0xFFFFFFF8) {
              uint64_t result = GlCustomLog(14, "GlPeNicTimeMgr(SvId: %d)[%u]: Dn out of range (%u). Bad decode.\n", *((unsigned __int8 *)a2 + 8), *((_DWORD *)a2 + 15), v24);
            }
            if (WORD5(v19) >= 0x93A8u) {
              return GlCustomLog(14, "GlPeNicTimeMgr(SvId: %d)[%u]: Togps out of range (%u). Bad decode.\n", *((unsigned __int8 *)a2 + 8), *((_DWORD *)a2 + 15), 16 * WORD5(v19));
            }
          }
          else
          {
            uint64_t result = BlueFin::GlPeNicTimeMgr::SetUtcModel(this, (const BlueFin::GlPeNicUtcModelData *)&v20);
            if (result && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              uint64_t result = (*(uint64_t (**)(char *, void, void))(*((void *)this + 3) + 24))((char *)this + 24, 0, 0);
            }
            if (!BYTE14(v19))
            {
              uint64_t result = BlueFin::GlPeNicTimeMgr::SetGpsOffset(this, (const BlueFin::GlPeNicGpsOffsetData *)&v16);
              if (result)
              {
                if (BlueFin::GlUtils::m_pInstance)
                {
                  if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
                    return (*((uint64_t (**)(void **, void, void))v20 + 3))(&v20, 0, 0);
                  }
                }
              }
            }
          }
        }
      }
      return result;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeNicTimeMgr::SetUtcModel(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlPeNicUtcModelData *a2)
{
  int v2 = *((unsigned __int16 *)a2 + 6);
  unsigned int v3 = *((_DWORD *)a2 + 4);
  int v4 = *((_DWORD *)this + 8);
  int v5 = *((_DWORD *)a2 + 2);
  if (v4) {
    BOOL v6 = v5 < v4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v3 / 0x3E8 + 604800 * v2 <= *((_DWORD *)this + 10) / 0x3E8u + 604800 * *((unsigned __int16 *)this + 18)) {
    return 0;
  }
  int v10 = (BlueFin::GlPeNicTimeMgr *)((char *)this + 24);
  if (BlueFin::GlPeNicUtcModelData::operator==((uint64_t)this + 24, (uint64_t)a2)) {
    return 0;
  }
  if (v10 != a2)
  {
    *((_DWORD *)this + 8) = v5;
    *((_WORD *)this + 18) = v2;
    *((_DWORD *)this + 10) = v3;
    uint64_t v12 = *(void *)((char *)a2 + 20);
    *(void *)((char *)this + 50) = *(void *)((char *)a2 + 26);
    *(void *)((char *)this + 44) = v12;
  }
  uint64_t result = 1;
  *((unsigned char *)this + 64) = 1;
  return result;
}

BOOL BlueFin::GlPeNicTimeMgr::SetGpsOffset(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlPeNicGpsOffsetData *a2)
{
  BOOL result = BlueFin::GlPeNicGpsOffsetData::ModelValid(a2);
  if (result)
  {
    int v5 = *((unsigned __int16 *)a2 + 6);
    unsigned int v6 = *((_DWORD *)a2 + 4);
    int v7 = *((_DWORD *)this + 20);
    int v8 = *((_DWORD *)a2 + 2);
    if (v7
      && v8 >= v7
      && v6 / 0x3E8 + 604800 * v5 <= *((_DWORD *)this + 22) / 0x3E8u + 604800 * *((unsigned __int16 *)this + 42)
      || BlueFin::GlPeNicGpsOffsetData::operator==((uint64_t)this + 72, (uint64_t)a2))
    {
      return 0;
    }
    else
    {
      if ((BlueFin::GlPeNicTimeMgr *)((char *)this + 72) != a2)
      {
        *((_DWORD *)this + 20) = v8;
        *((_WORD *)this + 42) = v5;
        *((_DWORD *)this + 22) = v6;
        uint64_t v9 = *(void *)((char *)a2 + 20);
        *((_DWORD *)this + 25) = *((_DWORD *)a2 + 7);
        *(void *)((char *)this + 92) = v9;
      }
      BOOL result = 1;
      *((unsigned char *)this + 104) = 1;
    }
  }
  return result;
}

double BlueFin::GlPeNicTimeMgr::GetNic2GpsSysOffsetS(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlNicTime *a2)
{
  double v2 = 0.0;
  if (*((_DWORD *)this + 20))
  {
    if (BlueFin::GlPeNicGpsOffsetData::ModelValid((BlueFin::GlPeNicTimeMgr *)((char *)this + 72)))
    {
      double v5 = (double)*((__int16 *)this + 46);
      double v2 = v5 * -2.91038305e-11;
      if (a2)
      {
        if (*((_WORD *)this + 47))
        {
          int v6 = *((unsigned __int16 *)this + 50);
          LOWORD(v5) = *((_WORD *)this + 49);
          double v7 = (double)*(unint64_t *)&v5 * 16.0;
          double v8 = fmod(v7, 1.0);
          if (v8 < 0.0 || v8 >= 1.0)
          {
            DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
          }
          double v10 = v8 * 4294967300.0 + 0.5;
          unsigned int v11 = v10;
          if (v10 >= 4294967300.0) {
            unsigned int v11 = -1;
          }
          unsigned int v25 = v11;
          unsigned int v26 = v7 + 604800 * v6;
          unsigned int v12 = (*(uint64_t (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2);
          v24[0] = *((_DWORD *)a2 + 2);
          v24[1] = v12;
          BlueFin::GlTimePoint::resolveAmbiguity(&v25, v24, 0x24EA0000u);
          int v13 = (*(uint64_t (**)(const BlueFin::GlNicTime *, void))(*(void *)a2 + 24))(a2, v26);
          unsigned int v14 = *((_DWORD *)a2 + 2);
          unsigned int v15 = *((_DWORD *)a2 + 3);
          char v16 = v13 | v25;
          if (v13 | v25)
          {
            int v17 = v15 - v13;
            if (__PAIR64__(v15, v14) < __PAIR64__(v13, v25))
            {
              int v20 = v13 - v15;
              BOOL v18 = v25 >= v14;
              unsigned int v14 = v25 - v14;
              int v21 = !v18;
              unsigned int v15 = v20 - v21;
              char v16 = 1;
            }
            else
            {
              char v16 = 0;
              BOOL v18 = v14 >= v25;
              v14 -= v25;
              int v19 = !v18;
              unsigned int v15 = v17 - v19;
            }
          }
          double v22 = (double)v14 * 2.32830644e-10 + (double)v15;
          if ((v16 & ((v15 | v14) != 0)) != 0) {
            double v22 = -v22;
          }
          return v2 + (double)*((__int16 *)this + 47) * -4.4408921e-16 * v22;
        }
      }
    }
  }
  return v2;
}

double BlueFin::GlPeNicTimeMgr::GetNic2UtcSysOffsetS(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlNicTime *a2)
{
  if (!*((_DWORD *)this + 8)) {
    return 0.0;
  }
  double v4 = (double)*((__int16 *)this + 22);
  double v5 = v4 * -2.91038305e-11;
  if (a2 && *((_WORD *)this + 23))
  {
    int v6 = *((unsigned __int16 *)this + 26);
    LOWORD(v4) = *((_WORD *)this + 25);
    double v7 = (double)*(unint64_t *)&v4 * 16.0;
    double v8 = fmod(v7, 1.0);
    if (v8 < 0.0 || v8 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v10 = v8 * 4294967300.0 + 0.5;
    unsigned int v11 = v10;
    if (v10 >= 4294967300.0) {
      unsigned int v11 = -1;
    }
    unsigned int v25 = v11;
    unsigned int v26 = v7 + 604800 * v6;
    unsigned int v12 = (*(uint64_t (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2);
    v24[0] = *((_DWORD *)a2 + 2);
    v24[1] = v12;
    BlueFin::GlTimePoint::resolveAmbiguity(&v25, v24, 0x93A8000u);
    int v13 = (*(uint64_t (**)(const BlueFin::GlNicTime *, void))(*(void *)a2 + 24))(a2, v26);
    unsigned int v14 = *((_DWORD *)a2 + 2);
    unsigned int v15 = *((_DWORD *)a2 + 3);
    char v16 = v13 | v25;
    if (v13 | v25)
    {
      int v17 = v15 - v13;
      if (__PAIR64__(v15, v14) < __PAIR64__(v13, v25))
      {
        int v20 = v13 - v15;
        BOOL v18 = v25 >= v14;
        unsigned int v14 = v25 - v14;
        int v21 = !v18;
        unsigned int v15 = v20 - v21;
        char v16 = 1;
      }
      else
      {
        char v16 = 0;
        BOOL v18 = v14 >= v25;
        v14 -= v25;
        int v19 = !v18;
        unsigned int v15 = v17 - v19;
      }
    }
    double v22 = (double)v14 * 2.32830644e-10 + (double)v15;
    if ((v16 & ((v15 | v14) != 0)) != 0) {
      double v22 = -v22;
    }
    return v5 + (double)*((__int16 *)this + 23) * -4.4408921e-16 * v22;
  }
  return v5;
}

uint64_t BlueFin::GlPeNicTimeMgr::Serialize(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = this;
  if ((*(_DWORD *)(this + 32) | 4) != 4) {
    this = (*(uint64_t (**)(void))(*(void *)(this + 24) + 24))();
  }
  if ((*(_DWORD *)(v3 + 80) | 4) != 4)
  {
    double v4 = *(uint64_t (**)(uint64_t, BlueFin::GlPeEngineCallBacks *, void))(*(void *)(v3 + 72) + 24);
    return v4(v3 + 72, a2, 0);
  }
  return this;
}

uint64_t BlueFin::GlPeNicTimeMgr::GetFctOfFutureLS(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlNicTime *a2, unsigned int *a3, double a4)
{
  *a3 = 0;
  if (!*((_DWORD *)this + 8) || BlueFin::GlPeNicTimeMgr::isExpired(this, a2, a4) || !*((unsigned char *)this + 56)) {
    return 0;
  }
  unsigned int v7 = (*(unsigned int (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
  int v8 = (__int16)(((*(unsigned int (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2)
                                 / 0x93A80)
               - *((_WORD *)this + 27));
  if (v8 >= 0) {
    LOWORD(v9) = v8;
  }
  else {
    int v9 = -v8;
  }
  __int16 v10 = v8 + 256;
  if (v8 >= -127) {
    __int16 v10 = v8;
  }
  if (v8 >= 128) {
    __int16 v11 = v8 - 256;
  }
  else {
    __int16 v11 = v10;
  }
  if ((unsigned __int16)v9 == 128) {
    __int16 v11 = 0;
  }
  *a3 = *((char *)this + 57) + 86400 * *((unsigned __int8 *)this + 56) + 604800 * (v7 - v11);
  return 1;
}

BOOL BlueFin::GlPeNicTimeMgr::isExpired(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlNicTime *a2, double a3)
{
  int v3 = *((_DWORD *)this + 8);
  if (!v3) {
    return 1;
  }
  if (v3 == 4) {
    return 0;
  }
  int v7 = *((unsigned __int16 *)this + 18);
  LODWORD(a3) = *((_DWORD *)this + 10);
  double v8 = (double)*(unint64_t *)&a3 * 0.001;
  char v29 = &off_270EBF080;
  double v9 = fmod(v8, 1.0);
  if (v9 < 0.0 || v9 >= 1.0)
  {
LABEL_34:
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v11 = v9 * 4294967300.0 + 0.5;
  unsigned int v12 = v11;
  if (v11 >= 4294967300.0) {
    unsigned int v12 = -1;
  }
  unsigned int v13 = v8 + 604800 * v7;
  unsigned int v30 = v12;
  unsigned int v31 = v13 + 619315200;
  char v29 = &off_270EBF080;
  if (v13 < 0x93A80)
  {
    unsigned int v14 = (*(unsigned int (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2) / 0x93A80;
    int v15 = (__int16)(v14 - *((_WORD *)this + 26));
    if (v15 >= 0) {
      LOWORD(v16) = v14 - *((_WORD *)this + 26);
    }
    else {
      int v16 = -v15;
    }
    __int16 v17 = v15 + 256;
    if (v15 >= -127) {
      __int16 v17 = v14 - *((_WORD *)this + 26);
    }
    if (v15 >= 128) {
      __int16 v18 = v15 - 256;
    }
    else {
      __int16 v18 = v17;
    }
    if ((unsigned __int16)v16 == 128) {
      __int16 v19 = 0;
    }
    else {
      __int16 v19 = v18;
    }
    if (*((_DWORD *)this + 8)) {
      double v20 = (double)(16 * *((unsigned __int16 *)this + 25));
    }
    else {
      double v20 = 0.0;
    }
    double v21 = fmod(v20, 1.0);
    if (v21 < 0.0 || v21 >= 1.0) {
      goto LABEL_34;
    }
    double v22 = v21 * 4294967300.0 + 0.5;
    unsigned int v23 = v22;
    if (v22 >= 4294967300.0) {
      unsigned int v23 = -1;
    }
    unsigned int v30 = v23;
    unsigned int v31 = v20 + 604800 * (unsigned __int16)(v14 - v19) + 619315200;
  }
  unsigned int v24 = (*(uint64_t (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2);
  LODWORD(v25) = *((_DWORD *)a2 + 2);
  double v26 = (double)v25 * 2.32830644e-10 + (double)v24;
  unsigned int v27 = ((uint64_t (*)(void))v29[4])(&v29);
  LODWORD(v28) = v30;
  return vabdd_f64(v26, (double)v28 * 2.32830644e-10 + (double)v27) > 4838400.0;
}

uint64_t BlueFin::GlPeNicTimeMgr::GetFutureLS(BlueFin::GlPeNicTimeMgr *this, const BlueFin::GlNicTime *a2, signed __int8 *a3, double a4)
{
  if (*((_DWORD *)this + 8) && !BlueFin::GlPeNicTimeMgr::isExpired(this, a2, a4))
  {
    unsigned int v16 = 0;
    int FctOfFutureLS = BlueFin::GlPeNicTimeMgr::GetFctOfFutureLS(this, a2, &v16, v7);
    uint64_t result = 0;
    if (!FctOfFutureLS) {
      return result;
    }
    unsigned int v10 = v16;
    unsigned int v11 = (*(uint64_t (**)(const BlueFin::GlNicTime *))(*(void *)a2 + 32))(a2);
    LODWORD(v12) = *((_DWORD *)a2 + 2);
    double v13 = (double)v12 * 2.32830644e-10 + (double)v11;
    double v14 = fmod(v13, 4294967300.0);
    if (v13 <= 4294967300.0) {
      double v14 = v13;
    }
    if (v14 < -4294967300.0) {
      double v14 = -fmod(-v14, 4294967300.0);
    }
    if (v14 < 0.0) {
      unsigned int v15 = --v14;
    }
    else {
      unsigned int v15 = v14;
    }
    if (v10 >= v15)
    {
      *a3 = *((unsigned char *)this + 57);
      return 1;
    }
  }
  return 0;
}

void BlueFin::GlPeNicUtcModelData::~GlPeNicUtcModelData(BlueFin::GlPeNicUtcModelData *this)
{
}

void BlueFin::GlPeNicGpsOffsetData::~GlPeNicGpsOffsetData(BlueFin::GlPeNicGpsOffsetData *this)
{
}

void BlueFin::GlPeNicTimeMgr::~GlPeNicTimeMgr(BlueFin::GlPeNicTimeMgr *this)
{
}

double BlueFin::GlSignalId::GetSecPerEpoch(BlueFin::GlSignalId *this)
{
  if (*((unsigned __int16 *)this + 4) >= 0x23Fu)
  {
    double v2 = "IsValid()";
    DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
    int v3 = 678;
    goto LABEL_6;
  }
  if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                              - *((int *)this + 1)
                                                              + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]])
  {
    double v2 = "ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
    int v3 = 685;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v3, v2);
  }
  return (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)this + 1)
                                                                                        - *((int *)this + 1)
                                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)this]]
       * 0.001;
}

double BlueFin::GlMeClkModMgr::GetMaxCalClkModUncPpu(BlueFin::GlMeClkModMgr *this)
{
  return *((float *)this + 22);
}

uint64_t BlueFin::GlMeClkMod::Deserialize(BlueFin::GlMeClkMod *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 70) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 > 5) {
    return 0;
  }
  if (v3 <= 2)
  {
    BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete(a2, (uint64_t)&v12);
    int v11 = *((_DWORD *)this + 2) & BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v12, 0);
    *((_DWORD *)this + 2) = v11;
    if (*((unsigned char *)a2 + 12) == 1) {
      *((_DWORD *)this + 2) = 2 * v11;
    }
  }
  else
  {
    unint64_t v12 = (char *)this + 8;
    char v13 = 1;
    BlueFin::GlSysLogEntry::GetGlSet(a2, &v12);
  }
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
  float D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((float *)this + 4) = D64;
  float v7 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((float *)this + 5) = v7;
  *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
  float v8 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((float *)this + 8) = v8;
  if (*((unsigned __int8 *)a2 + 12) < 5u)
  {
    *((void *)this + 5) = 0;
    *((_DWORD *)this + 12) = 2139095039;
    float v10 = 0.000005;
  }
  else
  {
    *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
    float v9 = BlueFin::GlSysLogEntry::GetD64(a2);
    *((float *)this + 12) = v9;
    float v10 = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  *((float *)this + 17) = v10;
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glme_clkmodmgr.cpp", 1355, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_clkmodmgr.cpp", 1355, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlMeClkMod::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 5;
  }
  if (v5 >= 6)
  {
    DeviceFaultNotify("glme_clkmodmgr.cpp", 1373, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 5");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_clkmodmgr.cpp", 1373, "ucVersion >= 1 && ucVersion <= 5");
  }
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v16 = 70;
    char v17 = v5;
    uint64_t v18 = 0x1000000000000;
    unsigned int v15 = &unk_270EBA550;
    char v19 = v5;
    if (v5 > 2)
    {
      if (v5 == 3)
      {
        float v8 = (int *)(v2 + 8);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(v2 + 8));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *v8);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *v8);
      }
      else
      {
        int v9 = *(_DWORD *)(v2 + 8);
        int v11 = &v13;
        char v12 = 3;
        int v13 = v9;
        uint64_t v14 = 0;
        BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v15, (const BlueFin::GlSetBase *)&v11);
      }
    }
    else
    {
      int v7 = *(_DWORD *)(v2 + 8) >> (v5 == 1);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v7);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v7);
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(float *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(float *)(v6 + 20));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v6 + 24));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(float *)(v6 + 32));
    if (v5 >= 5)
    {
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v6 + 40));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(float *)(v6 + 48));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(float *)(v6 + 68));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, 0, 4);
  }
  return 1;
}

void BlueFin::GlMeClkMod::~GlMeClkMod(BlueFin::GlMeClkMod *this)
{
}

void BlueFin::GlMeClkModMgr::~GlMeClkModMgr(BlueFin::GlMeClkModMgr *this)
{
}

uint64_t BlueFin::GlMeMicroKF::SetCntinFrq(uint64_t this, double a2, unsigned __int16 a3, unsigned int a4)
{
  *(double *)(this + 40) = a2;
  unsigned __int16 v4 = *(_WORD *)(this + 52) + 1;
  *(_WORD *)(this + 52) = v4;
  unsigned int v5 = *(_DWORD *)(this + 56);
  if (v4 >= 2u && a4 > v5)
  {
    double v7 = (a2 - *(double *)(this + 32)) * 1000.0 / (double)(a4 - v5);
    double v8 = fabs(v7 * 1000000000.0);
    if (v4 == 2)
    {
      if (v8 >= 50.0)
      {
        unsigned __int16 v4 = 1;
        *(_WORD *)(this + 52) = 1;
      }
      else
      {
        double v9 = *(double *)(this + 24) * 0.699999988 + v7 * 0.300000012;
        *(double *)(this + 24) = v9;
        if (fabs(v9 * 1000000000.0) > 5.0) {
          ++*(_WORD *)(this + 54);
        }
        unsigned __int16 v4 = 2;
      }
    }
    else if (v8 < 50.0)
    {
      double v10 = *(double *)(this + 24) * 0.699999988 + v7 * 0.300000012;
      *(double *)(this + 24) = v10;
      if (fabs(v10 * 1000000000.0) > 5.0) {
        ++*(_WORD *)(this + 54);
      }
    }
  }
  BOOL v11 = v5 + 10000 >= a4 || v5 == 0;
  if (v11 && v4 <= 0x3Cu)
  {
    __int16 v12 = *(_WORD *)(this + 54);
  }
  else
  {
    __int16 v12 = 0;
    *(_DWORD *)(this + 52) = 0;
  }
  *(double *)(this + 32) = a2;
  *(_DWORD *)(this + 56) = a4;
  *(_WORD *)(this + 4) = v12;
  return this;
}

double BlueFin::GlMeSkfCbDot::Init(BlueFin::GlMeSkfCbDot *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = *((void *)this + 7);
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 12) = 0;
  *((unsigned char *)this + 52) = 1;
  double result = *((double *)this + 10);
  *((double *)this + 5) = result;
  *((_DWORD *)this + 22) = 0;
  return result;
}

uint64_t BlueFin::GlMeMiniKF::mskfOverrideCbDotKF(uint64_t this, int a2, double a3, double a4)
{
  *(double *)(this + 24) = a3;
  *(double *)(this + 40) = a4;
  *(_DWORD *)(this + 64) = a2;
  *(unsigned char *)(this + 68) = 0;
  return this;
}

uint64_t BlueFin::GlMeMiniKF::UpdateCbFromSyncIn(BlueFin::GlMeMiniKF *this, double a2)
{
  int v13 = 58;
  v10[0] = 1;
  int v11 = 0;
  __int16 v12 = 0;
  double v9 = ceil(a2 / 1000.0) + a2 * -0.001;
  SubBitAndEpoch__n128 Time = BlueFin::GlSystemTime::getSubBitAndEpochTime((BlueFin::GlSystemTime *)&v9, (const BlueFin::GlSignalId *)v10, 1u);
  unsigned int v5 = (char *)this + 112;
  if (a2 <= 0.0)
  {
    if (a2 >= 0.0) {
      int v7 = 0;
    }
    else {
      int v7 = (int)(a2 + -0.5);
    }
    LOBYTE(v9) = 1;
    BlueFin::GlMeSkfCb::NewMsmt((uint64_t)v5, v7, &v13, (uint64_t)&v9, SubBitAndEpochTime, 1.0e-12);
    BlueFin::GlMeMiniKF::GenerateClockModFlags((uint64_t)this, v7, (unsigned int *)&v9);
    if (a2 >= 0.0) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (int)(a2 + -0.5);
    }
  }
  else
  {
    uint64_t v6 = (int)(a2 + 0.5);
    LOBYTE(v9) = 1;
    BlueFin::GlMeSkfCb::NewMsmt((uint64_t)v5, (int)(a2 + 0.5), &v13, (uint64_t)&v9, SubBitAndEpochTime, 1.0e-12);
    BlueFin::GlMeMiniKF::GenerateClockModFlags((uint64_t)this, (int)(a2 + 0.5), (unsigned int *)&v9);
  }
  return (*(uint64_t (**)(BlueFin::GlMeMiniKF *, uint64_t, void))(*(void *)this + 32))(this, v6, LODWORD(v9));
}

void BlueFin::GlMeMiniKF::~GlMeMiniKF(BlueFin::GlMeMiniKF *this)
{
}

uint64_t BlueFin::GlMeMiniKF::GetGpsBitMeasTime(BlueFin::GlMeMiniKF *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t BlueFin::GlMeMiniKF::GetGlnsBitMeasTime(BlueFin::GlMeMiniKF *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t BlueFin::GlMeMiniKF::GetGalEpochMeasTime(BlueFin::GlMeMiniKF *this)
{
  return *((unsigned int *)this + 121);
}

void BlueFin::GlMeSkfCbDot::~GlMeSkfCbDot(BlueFin::GlMeSkfCbDot *this)
{
}

uint64_t BlueFin::GlMeOscAidingInfo::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v5 >= 3)
  {
    DeviceFaultNotify("glme_oscaiding_info.cpp", 47, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_oscaiding_info.cpp", 47, "ucVersion >= 1 && ucVersion <= 2");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 24;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    double v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 32));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlMeOscAidingInfo::Deserialize(BlueFin::GlMeOscAidingInfo *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 24 || *((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + 2) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
  BOOL v5 = *((unsigned __int8 *)a2 + 12) >= 2u && BlueFin::GlSysLogEntry::GetU8(a2) != 0;
  *((unsigned char *)this + 32) = v5;
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glme_oscaiding_info.cpp", 88, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_oscaiding_info.cpp", 88, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

void BlueFin::GlMeOscAidingInfo::~GlMeOscAidingInfo(BlueFin::GlMeOscAidingInfo *this)
{
}

double BlueFin::GlMeSkfCore::NoMsmtAvail(BlueFin::GlMeSkfCore *this, unsigned int a2, double a3, double a4)
{
  LODWORD(a4) = *((_DWORD *)this + 12);
  double v4 = ((double)a2 - (double)*(unint64_t *)&a4) / 1000.0;
  float v5 = *((double *)this + 3);
  double v6 = sqrtf(v5);
  *(float *)&double v4 = v4;
  *(float *)&double v4 = fabsf(*(float *)&v4);
  double result = (v6 + *(float *)&v4 * 0.000000005) * (v6 + *(float *)&v4 * 0.000000005);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 12) = a2;
  return result;
}

void BlueFin::GlMeSkfCb::~GlMeSkfCb(BlueFin::GlMeSkfCb *this)
{
}

void BlueFin::GlMeUserDynamic::~GlMeUserDynamic(BlueFin::GlMeUserDynamic *this)
{
  *(void *)this = &unk_270EBF420;
}

{
  *(void *)this = &unk_270EBF420;
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlMeWinMgr::mskfGetCbGoodQuality(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v4 = 0x3FF0000000000000;
  uint64_t v5 = 0;
  return BlueFin::GlMeMiniKF::mskfGetCbGoodQuality(a1 + 9312, a2, (double *)&v5, a3, (double *)&v4, 0);
}

void BlueFin::GlMeWinMgr::SetTMDecodeInfo(uint64_t a1, unsigned __int8 *a2, char a3, double a4)
{
  double v7 = a4 * 1000.0;
  BlueFin::GlMeSatAidMgr::GetSatAid(a1 + 320, a2, 0, a4 * 1000.0);
  if (v8 && *(float *)(v8 + 40) < 0.001 && *(_DWORD *)(v8 + 12) != 4)
  {
    *(unsigned char *)(a1 + 9808) = *a2;
    *(double *)(a1 + 9816) = v7;
    *(unsigned char *)(a1 + 9824) = a3;
  }
}

void BlueFin::GlMeWinMgr::SetGalSecDecodeInfo(uint64_t a1, unsigned __int8 *a2, char a3, double a4)
{
  double v7 = a4 * 1000.0;
  BlueFin::GlMeSatAidMgr::GetSatAid(a1 + 320, a2, 0, a4 * 1000.0);
  if (v8 && *(float *)(v8 + 40) < 0.001 && *(_DWORD *)(v8 + 12) != 4)
  {
    *(unsigned char *)(a1 + 9832) = *a2;
    *(double *)(a1 + 9840) = v7;
    *(unsigned char *)(a1 + 9848) = a3;
  }
}

BOOL BlueFin::GlMeWinMgr::GetLeapSecondFromSatAid(BlueFin::GlMeWinMgr *this, unsigned int a2, int *a3, double a4, double a5, double a6)
{
  BOOL result = *((float *)this + 84) <= 12000.0 && *((float *)this + 88) <= 11000.0;
  if (result)
  {
    LODWORD(a6) = *((_DWORD *)this + 89);
    double v8 = ((double)a2 - (double)*(unint64_t *)&a6) / 1000.0;
    double v9 = *((double *)this + 43) + v8;
    if (v9 < 0.0) {
      double v9 = v9 + 86400.0;
    }
    if (v9 >= 86400.0) {
      double v9 = v9 + -86400.0;
    }
    double v10 = *((double *)this + 41) + v8;
    if (v10 < 0.0) {
      double v10 = v10 + 604800.0;
    }
    if (v10 >= 604800.0) {
      double v10 = v10 + -604800.0;
    }
    double v11 = v10 + floor(v10 / 86400.0) * -86400.0 + 10800.0 - v9;
    double v12 = 0.5;
    if (v11 <= 0.0 && (double v12 = -0.5, v11 >= 0.0))
    {
      int v13 = 0;
    }
    else
    {
      int v13 = (int)(v11 + v12);
      if (v13 > 86399) {
        v13 -= 86400;
      }
    }
    *a3 = v13;
  }
  return result;
}

BOOL BlueFin::GlMeWinMgr::SetTMDecodeInfoFromGps(uint64_t a1, unsigned __int8 *a2, double a3, uint64_t a4, char a5)
{
  BlueFin::GlMeSatAidMgr::GetSatAid(a1 + 320, a2, 0, a3);
  uint64_t v13 = v12;
  if (a3 <= 0.0)
  {
    if (a3 >= 0.0)
    {
      unsigned int v15 = 0;
      goto LABEL_7;
    }
    double v14 = -0.5;
  }
  else
  {
    double v14 = 0.5;
  }
  double v9 = a3 + v14;
  unsigned int v15 = (int)v9;
LABEL_7:
  int v19 = 0;
  BOOL result = BlueFin::GlMeWinMgr::GetLeapSecondFromSatAid((BlueFin::GlMeWinMgr *)a1, v15, &v19, v9, v10, v11);
  if (v13 && *(float *)(v13 + 40) < 0.001 && *(_DWORD *)(v13 + 12) != 4 && result)
  {
    if (v19 >= 0) {
      int v18 = v19 & 1;
    }
    else {
      int v18 = -(v19 & 1);
    }
    *(unsigned char *)(a1 + 9808) = *a2;
    *(double *)(a1 + 9816) = a3 - (double)(1000 * v18);
    *(unsigned char *)(a1 + 9824) = a5;
  }
  return result;
}

uint64_t BlueFin::GlMeAcqWin::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 8;
  }
  if (v5 - 9 <= 0xFFFFFFFB)
  {
    DeviceFaultNotify("glme_windmgr.cpp", 1184, "SerializeImpl", (char)"ucVersion >= 5 && ucVersion <= 8");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_windmgr.cpp", 1184, "ucVersion >= 5 && ucVersion <= 8");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v18 = 72;
    char v19 = v5;
    uint64_t v20 = 0x1000000000000;
    char v17 = &unk_270EBA550;
    char v21 = v5;
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v17, *(double *)(v2 + 24));
    uint64_t v8 = *(unsigned __int8 *)(v7 + 8);
    if ((v8 - 1) >= 0xBC)
    {
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, 0xFFFF);
      if (v5 > 6)
      {
        LOBYTE(v9) = 0;
        goto LABEL_16;
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v17, *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ v8));
      if (v5 == 7)
      {
        LOBYTE(v9) = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *(int *)(v7 + 12)
                                                                            - *(int *)(v7 + 12)
                                                                            + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v7 + 8)]];
LABEL_16:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v17, v9);
        goto LABEL_17;
      }
      if (v5 >= 8)
      {
        int v9 = *(_DWORD *)(v7 + 12);
        goto LABEL_16;
      }
    }
LABEL_17:
    int v10 = *(_DWORD *)(v7 + 32);
    uint64_t v13 = &v15;
    char v14 = 3;
    int v15 = v10;
    uint64_t v16 = 0;
    BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v17, (const BlueFin::GlSetBase *)&v13);
    float v11 = *(float *)(v7 + 36);
    if (v5 < 6) {
      float v11 = v11 + -174.0;
    }
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v17, v11);
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v17, *(float *)(v7 + 40));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v17, *(float *)(v7 + 44));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v17, *(double *)(v7 + 56));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v17, *(float *)(v7 + 64));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v17, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlMeAcqWin::Deserialize(BlueFin::GlMeAcqWin *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 72 || *((unsigned __int8 *)a2 + 12) - 9 < 0xFFFFFFFC) {
    return 0;
  }
  *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
  unsigned int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
  if (U16 != 0xFFFF)
  {
    if (U16 >= 0x100)
    {
      char v21 = "ucImplSvId == usImplSvId";
      DeviceFaultNotify("glme_windmgr.cpp", 1376, "Deserialize", (char)"ucImplSvId == usImplSvId");
      int v22 = 1376;
    }
    else
    {
      uint64_t v6 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
           + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
           + U16);
      if ((v6 - 1) < 0xBC)
      {
        unsigned int v7 = *((unsigned __int8 *)a2 + 12);
        if (v7 <= 6)
        {
          uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v6];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v8] == 255)
          {
            __int16 v10 = 575;
            int v9 = -1;
          }
          else
          {
            int v9 = 0;
            __int16 v10 = BlueFin::GlSignalId::s_ausGnss2signalId[v8]
                + v6
                - BlueFin::GlSvId::s_aucGnss2minSvId[v8];
          }
          *((unsigned char *)this + 8) = v6;
          *((_DWORD *)this + 3) = v9;
          *((_WORD *)this + 8) = v10;
          goto LABEL_21;
        }
        unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
        uint64_t v13 = BlueFin::GlSvId::s_aucSvId2gnss[v6];
        int v14 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * U8 - U8 + v13];
        if (v7 == 7)
        {
          if (v14 == 255)
          {
            __int16 v15 = 575;
            unsigned int U8 = -1;
LABEL_20:
            *((unsigned char *)this + 8) = v6;
            *((_DWORD *)this + 3) = U8;
            *((_WORD *)this + 8) = v15;
            goto LABEL_21;
          }
        }
        else if (v14 == 255)
        {
          unsigned int U8 = -1;
          __int16 v15 = 575;
          goto LABEL_20;
        }
        __int16 v15 = BlueFin::GlSignalId::s_ausGnss2signalId[v13]
            + v6
            - BlueFin::GlSvId::s_aucGnss2minSvId[v13]
            + BlueFin::GlSvId::s_aucGnss2numSvId[v13] * (_WORD)U8;
        goto LABEL_20;
      }
      char v21 = "0";
      DeviceFaultNotify("glme_windmgr.cpp", 1381, "Deserialize", (char)"0");
      int v22 = 1381;
    }
LABEL_35:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glme_windmgr.cpp", v22, v21);
  }
  *((unsigned char *)this + 8) = 0;
  *((_DWORD *)this + 3) = -1;
  *((_WORD *)this + 8) = 575;
  unsigned int v11 = *((unsigned __int8 *)a2 + 12);
  if (v11 < 7) {
    goto LABEL_22;
  }
  BlueFin::GlSysLogEntry::GetU8(a2);
LABEL_21:
  unsigned int v11 = *((unsigned __int8 *)a2 + 12);
LABEL_22:
  if (v11 <= 2)
  {
    BlueFin::GlSysLogEntry::GetGlSet64BitsObsolete(a2, (uint64_t)&v23);
    *((_DWORD *)this + 8) &= BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)&v23, 0);
  }
  else
  {
    unsigned int v23 = (char *)this + 32;
    char v24 = 1;
    BlueFin::GlSysLogEntry::GetGlSet(a2, &v23);
  }
  unsigned int v16 = *((unsigned __int8 *)a2 + 12);
  float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
  if (v16 < 6) {
    float F32 = F32 + 174.0;
  }
  *((float *)this + 9) = F32;
  float D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((float *)this + 10) = D64;
  float v19 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((float *)this + 11) = v19;
  if (*((unsigned __int8 *)a2 + 12) <= 4u) {
    BlueFin::GlSysLogEntry::GetF32(a2);
  }
  *((double *)this + 7) = BlueFin::GlSysLogEntry::GetD64(a2);
  float v20 = BlueFin::GlSysLogEntry::GetD64(a2);
  *((float *)this + 16) = v20;
  if (*((unsigned char *)a2 + 12) == 1) {
    *((_DWORD *)this + 8) *= 2;
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    char v21 = "otEntry.DataSize() == otEntry.ReadIdx()";
    DeviceFaultNotify("glme_windmgr.cpp", 1438, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    int v22 = 1438;
    goto LABEL_35;
  }
  return 1;
}

uint64_t BlueFin::GlMeAcqWin::OverrideAcqWinWithDspMeas(uint64_t this, const BlueFin::GlMeDSPMeas *a2, int a3)
{
  int v3 = *((_DWORD *)a2 + 21);
  if ((v3 & 0x10) != 0)
  {
    *(void *)(this + 56) = *((void *)a2 + 3);
    unsigned int v4 = *((unsigned __int16 *)a2 + 54);
    if (a3)
    {
      if (v4 >= 0x23F)
      {
LABEL_4:
        unsigned int v5 = "IsValid()";
        DeviceFaultNotify("glsignalid.h", 791, "GetSecondsPerChip", (char)"IsValid()");
        int v6 = 791;
        goto LABEL_24;
      }
      goto LABEL_11;
    }
    if (v4 >= 0x23F)
    {
      unsigned int v5 = "IsValid()";
      DeviceFaultNotify("glsignalid.h", 678, "GetMsPerEpoch", (char)"IsValid()");
      int v6 = 678;
      goto LABEL_24;
    }
    if (!BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 26)
                                                                - *((int *)a2 + 26)
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 100)]])
    {
      unsigned int v5 = "ucMsPerEpoch != 0";
      DeviceFaultNotify("glsignalid.h", 685, "GetMsPerEpoch", (char)"ucMsPerEpoch != 0");
      int v6 = 685;
      goto LABEL_24;
    }
    float v7 = (double)BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * *((int *)a2 + 26)
                                                                                        - *((int *)a2 + 26)
                                                                                        + BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 100)]]
       * 0.001;
    *(float *)(this + 64) = v7;
  }
  if ((v3 & 0x20) != 0 && (a3 & 1) == 0)
  {
    *(double *)(this + 56) = *(double *)(this + 56) + *((float *)a2 + 16);
    if (*((unsigned __int16 *)a2 + 54) >= 0x23Fu) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 100)];
    uint64_t v9 = *((int *)a2 + 26);
    int v10 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v9 + v8];
    unsigned int v11 = BlueFin::GlSignalId::s_aucSignalIndexAndGnss2msPerEpoch[8 * v9 - v9 + v8];
    if (v10) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      float v13 = (double)v11 / (double)(1000 * v10) * 0.5;
      *(float *)(this + 64) = v13;
      *(_DWORD *)(this + 32) |= 0x200u;
      int v3 = *((_DWORD *)a2 + 21);
      goto LABEL_16;
    }
    unsigned int v5 = "ulChipsPerEpoch != 0 && ucMsPerEpoch != 0";
    DeviceFaultNotify("glsignalid.h", 799, "GetSecondsPerChip", (char)"ulChipsPerEpoch != 0 && ucMsPerEpoch != 0");
    int v6 = 799;
LABEL_24:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v6, v5);
  }
LABEL_16:
  if ((v3 & 0x40) != 0)
  {
    int v14 = *((_DWORD *)a2 + 14);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(this + 44) = v14;
  }
  if ((~(_WORD)v3 & 0x418) == 0) {
    *(_DWORD *)(this + 32) |= 0x12u;
  }
  return this;
}

void BlueFin::GlMeWinMgr::~GlMeWinMgr(BlueFin::GlMeWinMgr *this)
{
  *(void *)this = &unk_270EBF4B0;
  *((void *)this + 2) = &unk_270EBF420;
}

{
  JUMPOUT(0x263E6DD70);
}

void BlueFin::GlMeAcqWin::~GlMeAcqWin(BlueFin::GlMeAcqWin *this)
{
}

double BlueFin::stKfSatAid::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  double result = *(double *)(a2 + 48);
  *(double *)(a1 + 48) = result;
  return result;
}

float BlueFin::GlPeNavSatAid::GenerateNavAiding(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int *a6, float *a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  if (*(_DWORD *)a1 == 1)
  {
    DeviceFaultNotify("glpe_navaid.cpp", 123, "GenerateNavAiding", (char)"m_otState != NAVAID_STATE_EMPTY");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navaid.cpp", 123, "m_otState != NAVAID_STATE_EMPTY");
  }
  *(_DWORD *)(a1 + 72) = a3;
  float v19 = 0.0;
  int v20 = 0;
  if (a6) {
    int v20 = *a6;
  }
  int v52 = v20;
  if (a7) {
    float v19 = *a7;
  }
  float v51 = v19;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  v42[16] = 0x300000001;
  *(double *)unsigned int v42 = a8;
  *(double *)&v42[1] = a9;
  v42[2] = 0;
  double v21 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a5, a4 + 24);
  BlueFin::Matrix::mult((BlueFin::Matrix *)v41, (const BlueFin::Matrix *)v42, 1, (const BlueFin::Matrix *)&v43, v21);
  double v22 = v41[0];
  double v23 = -*(double *)(a5 + 40);
  float64x2_t v38 = vnegq_f64(*(float64x2_t *)(a5 + 24));
  uint64_t v40 = 0x300000001;
  double v39 = v23;
  BlueFin::Matrix::mult((BlueFin::Matrix *)v41, (const BlueFin::Matrix *)&v38, 1, (const BlueFin::Matrix *)v49, v23);
  double v24 = -(v41[0] - *(double *)(a5 + 56) * -299792458.0);
  double v37 = v24 - v22;
  float v25 = v51;
  __float2 v26 = __sincosf_stret(v51 * 0.017453);
  double v27 = v26.__cosval * a12;
  if (v27 < a13) {
    double v27 = a13;
  }
  float v28 = v27 * 0.000000001;
  *(float *)(a1 + 24) = v28;
  v29.f64[0] = v26.__sinval * a11 + v26.__cosval * a10;
  v29.f64[1] = v37;
  *(double *)(a1 + 8) = (v21 + *(double *)(a5 + 48) * -299792458.0) / 299792458.0;
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(vdivq_f64(v29, (float64x2_t)xmmword_263BB3450));
  *(_DWORD *)(a1 + 28) = v52;
  *(float *)(a1 + 32) = v25;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a5 + 64);
  int v30 = v48;
  *(float *)v29.f64 = v43;
  *(_DWORD *)(a1 + 36) = LODWORD(v29.f64[0]);
  BOOL v31 = v30 == 1;
  if (v30 == 1) {
    uint64_t v32 = (double *)&v44;
  }
  else {
    uint64_t v32 = (double *)&v46;
  }
  float v33 = *v32;
  *(float *)(a1 + 40) = v33;
  unsigned int v34 = (double *)&v45;
  if (!v31) {
    unsigned int v34 = (double *)&v47;
  }
  float result = *v34;
  float v36 = v24 / 299792458.0;
  *(float *)(a1 + 44) = result;
  *(float *)(a1 + 48) = v36;
  return result;
}

double BlueFin::GlPeNavSatAidMgr::Remove(uint64_t a1, unsigned __int8 a2)
{
  if (((unint64_t)*(unsigned int *)(*(void *)(a1 + 8024) + 4 * (a2 >> 5)) >> (a2 & 0x1F)))
  {
    int v3 = (unsigned char *)(a1 + 8016);
    int v4 = *(unsigned __int8 *)(a1 + 8016);
    if (*(unsigned char *)(a1 + 8016))
    {
      __int16 v5 = 0;
      uint64_t v6 = a1 + 8024;
      uint64_t v7 = *(void *)(a1 + 8008);
      while (1)
      {
        int v8 = v5;
        if (*(unsigned __int8 *)(v7 + 88 * v5 + 52) == a2) {
          break;
        }
        ++v5;
        if (v4 <= (__int16)(v8 + 1)) {
          return result;
        }
      }
      BlueFin::GlSetBase::Remove(v6, a2);
      LOBYTE(v9) = *v3 - 1;
      *int v3 = v9;
      uint64_t v10 = *(void *)(a1 + 8008);
      if ((_BYTE)v9)
      {
        unsigned int v11 = (_DWORD *)(v7 + 88 * v8);
        unsigned int v9 = v9;
        BOOL v12 = (_DWORD *)(v10 + 88 * v9);
        if (v12 != v11)
        {
          *unsigned int v11 = *v12;
          uint64_t v13 = v10 + 88 * v9;
          uint64_t v14 = v7 + 88 * v8;
          BlueFin::stKfSatAid::operator=(v14 + 8, v13 + 8);
          *(_OWORD *)(v14 + 64) = *(_OWORD *)(v13 + 64);
          *(_DWORD *)(v14 + 80) = *(_DWORD *)(v13 + 80);
          *(unsigned char *)(v14 + 84) = *(unsigned char *)(v13 + 84);
          unsigned int v9 = *v3;
          uint64_t v10 = *(void *)(a1 + 8008);
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      uint64_t v15 = v10 + 88 * v9;
      *(_DWORD *)uint64_t v15 = 1;
      *(unsigned char *)(v15 + 52) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 8) = 0;
      *(_DWORD *)(v15 + 32) = 0;
      *(_OWORD *)(v15 + 56) = xmmword_263BB3460;
      *(_DWORD *)(v15 + 80) = -1;
      double result = NAN;
      *(void *)(v15 + 72) = 0xFFFFFFFF00000000;
    }
  }
  return result;
}

double BlueFin::GlPeNavSatAidMgr::Add(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = *(void *)(a1 + 8024);
  unint64_t v3 = *(unsigned int *)(v2 + 4 * (a2 >> 5));
  if (((v3 >> (a2 & 0x1F)) & 1) == 0)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8016);
    if (v4 < 0x5B)
    {
      *(_DWORD *)(v2 + 4 * (a2 >> 5)) = v3 | (1 << (a2 & 0x1F));
      uint64_t v6 = *(void *)(a1 + 8008) + 88 * v4;
      *(_DWORD *)uint64_t v6 = 2;
      *(unsigned char *)(v6 + 52) = a2;
      *(_DWORD *)(v6 + 80) = -1;
      *(void *)&double result = 4;
      *(_OWORD *)(v6 + 64) = xmmword_263BB3470;
      *(unsigned char *)(a1 + 8016) = v4 + 1;
    }
    else
    {
      GlCustomLog(11, "GlPeNavSatAidMgr::Add(%hu) no room %u > %d\n", a2, *(unsigned __int8 *)(a1 + 8016), 91);
    }
  }
  return result;
}

void BlueFin::GlPeNavAid::Generate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,float a28,int a29,__int16 a30,long long a31,long long a32,long long a33,long long a34,int a35,uint64_t a36,long long a37,uint64_t a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,char a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,unsigned __int8 a53,unsigned __int8 a54,unsigned __int8 a55,__int16 a56,int a57,int a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v61 = MEMORY[0x270FA5388](a1, a2);
  unsigned int v63 = v62;
  uint64_t v64 = v61;
  STACK[0x17D8] = *MEMORY[0x263EF8340];
  v182 = (unsigned __int8 *)(v61 + 8304);
  int v65 = *((_DWORD *)v62 + 5);
  LOBYTE(v66) = v65;
  if ((v65 & 0x40) != 0)
  {
    uint64_t v68 = *v62;
    int v67 = (unsigned int *)(*v62 + 200);
  }
  else
  {
    int v67 = (unsigned int *)(*(void *)(v61 + 40) + 2568);
    uint64_t v68 = *v62;
  }
  unsigned int v69 = *v67;
  *(_WORD *)(v61 + 13492) = 0;
  unsigned int v190 = v69;
  *(_DWORD *)(v61 + 13488) = v69;
  double v184 = *(double *)(v68 + 152) / 299792458.0;
  float v70 = *(float *)(v68 + 160);
  double v71 = *(double *)(v68 + 168);
  double v72 = v70 / 299792458.0;
  if ((v65 & 0x20) != 0
    || (*((unsigned __int8 *)v62 + 16) > 2u || *(unsigned char *)(*(void *)(v61 + 32) + 1989))
    && *(float *)(v68 + 80) <= 400.0
    && v70 <= 599.0)
  {
    int OscOffAge = BlueFin::GlPeOscMgr::GetOscOffAge(*(BlueFin::GlPeOscMgr **)(v61 + 72));
    uint64_t v74 = *(void *)(v64 + 32);
    if (*(_DWORD *)(v74 + 8) == 6)
    {
      BOOL v75 = 1;
    }
    else
    {
      double v76 = (double)*(__int16 *)(*(void *)(v64 + 72) + 10) * 0.000000001;
      if (BlueFin::GlUtils::m_ucEnabled)
      {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        uint64_t v74 = *(void *)(v64 + 32);
      }
      double v77 = v76 + (double)OscOffAge * 0.001 * 5.0e-10;
      if (OscOffAge <= 0) {
        double v77 = v76;
      }
      BOOL v75 = v72 < v77;
    }
    if (OscOffAge >= 240001) {
      int v78 = 200;
    }
    else {
      int v78 = 100;
    }
    if (OscOffAge < 120001) {
      int v78 = 50;
    }
    if (*(unsigned char *)(v74 + 1989)) {
      int v79 = 200;
    }
    else {
      int v79 = v78;
    }
    if (OscOffAge < -30000) {
      goto LABEL_29;
    }
    int v66 = v63[5];
    if ((v66 & 0x20) != 0) {
      goto LABEL_29;
    }
    uint64_t v68 = *(void *)v63;
    if (v79 < (int)*(float *)(*(void *)v63 + 80)) {
      BOOL v75 = 0;
    }
    if (v75)
    {
LABEL_29:
      BlueFin::GlPeOscMgr::SetOscOff(*(BlueFin::GlPeOscMgr **)(v64 + 72), v184, v72, 0);
      int v66 = v63[5];
      uint64_t v68 = *(void *)v63;
    }
  }
  *(unsigned char *)(v64 + 80) = 1;
  char v80 = v66;
  if ((v66 & 0x10) != 0
    || ((float v81 = *(float *)(v68 + 80), v82 = v65 | (v81 <= 400.0), (v65 & 1) == 0) && v81 > 50.0 && ((v82 ^ 1) & 1) == 0
     || (*(unsigned char *)(v64 + 80) = v65 & 1 | (v81 <= 400.0), ((v82 ^ 1) & 1) == 0))
    && v72 <= 0.0000000250000003)
  {
    double v172 = v71 / 299792458.0;
    float v83 = *(float *)(v68 + 176);
    double v84 = *(double *)(v68 + 112) * *(double *)(v68 + 112) + *(double *)(v68 + 104) * *(double *)(v68 + 104);
    float v85 = sinf(v83);
    double v86 = (float)(*(float *)(v68 + 128) * *(float *)(v68 + 128)) + *(float *)(v68 + 160) * *(float *)(v68 + 160);
    *(_OWORD *)&STACK[0x5D0] = 0u;
    *(_OWORD *)&STACK[0x5C0] = 0u;
    *(_OWORD *)&STACK[0x5B0] = 0u;
    *(_OWORD *)&STACK[0x5A0] = 0u;
    *(_OWORD *)&STACK[0x590] = 0u;
    *(_OWORD *)&STACK[0x580] = 0u;
    *(_OWORD *)&STACK[0x570] = 0u;
    *(_OWORD *)&STACK[0x560] = 0u;
    *(_OWORD *)&STACK[0x540] = 0u;
    *(_OWORD *)&STACK[0x550] = 0u;
    *(_OWORD *)&STACK[0x520] = 0u;
    *(_OWORD *)&STACK[0x530] = 0u;
    *(_OWORD *)&STACK[0x500] = 0u;
    *(_OWORD *)&STACK[0x510] = 0u;
    *(_OWORD *)&STACK[0x4E0] = 0u;
    *(_OWORD *)&STACK[0x4F0] = 0u;
    *(_OWORD *)&STACK[0x4C0] = 0u;
    *(_OWORD *)&STACK[0x4D0] = 0u;
    *(_OWORD *)&STACK[0x4A0] = 0u;
    *(_OWORD *)&STACK[0x4B0] = 0u;
    *(_OWORD *)&STACK[0x480] = 0u;
    *(_OWORD *)&STACK[0x490] = 0u;
    *(_OWORD *)&STACK[0x460] = 0u;
    *(_OWORD *)&STACK[0x470] = 0u;
    *(_OWORD *)&STACK[0x440] = 0u;
    *(_OWORD *)&STACK[0x450] = 0u;
    *(_OWORD *)&STACK[0x420] = 0u;
    *(_OWORD *)&STACK[0x430] = 0u;
    *(_OWORD *)&STACK[0x400] = 0u;
    *(_OWORD *)&STACK[0x410] = 0u;
    uint64_t v87 = -5096;
    *(_OWORD *)&STACK[0x3E0] = 0u;
    *(_OWORD *)&STACK[0x3F0] = 0u;
    do
    {
      *(unint64_t *)((char *)&STACK[0x3E0] + v87 + 5144) = 0;
      int32x2_t v88 = (_OWORD *)((char *)&STACK[0x3E0] + v87 + 5096);
      _OWORD *v88 = 0uLL;
      v88[1] = 0uLL;
      *(_OWORD *)((char *)v88 + 29) = 0uLL;
      v87 += 56;
    }
    while (v87);
    float v89 = cosf(v83);
    if ((v80 & 2) != 0) {
      double v90 = 100.0;
    }
    else {
      double v90 = 10.0;
    }
    float v91 = *(float *)(v68 + 80);
    double v92 = *(float *)(v68 + 84);
    double vars8 = v91;
    double v93 = vars8 + vars8;
    if (vars8 + vars8 > v92) {
      double v93 = *(float *)(v68 + 84);
    }
    if (v91 < 400.0) {
      double v92 = v93;
    }
    double v179 = v90;
    double vars0 = v92;
    a47 = 0;
    a46 = 0u;
    a45 = 0u;
    a44 = 0u;
    a43 = 0u;
    a42 = 0u;
    a41 = 0u;
    a40 = 0u;
    a39 = 0u;
    a48 = 0x4008000000000000;
    a37 = *(_OWORD *)(v68 + 8);
    a38 = *(void *)(v68 + 24);
    BlueFin::lla2ecef((double *)&a37, (uint64_t)&STACK[0x320]);
    a39 = *(_OWORD *)&STACK[0x320];
    float v94 = (double)(v190 - *(_DWORD *)(*(void *)v63 + 200)) / 1000.0;
    double v95 = *(double *)(*(void *)v63 + 88) + *(double *)(*(void *)v63 + 152) * v94;
    *(void *)&a40 = STACK[0x330];
    *((double *)&a40 + 1) = v95;
    uint64_t v96 = *(void *)(v64 + 40);
    uint64_t v189 = v63;
    uint64_t v173 = v64 + 8384;
    if (*(double *)(v96 + 2736) != 4294967300.0)
    {
      double v97 = *(double *)(v96 + 2728) * 1000.0;
      if (v97 > 0.0)
      {
        double v98 = 0.5;
LABEL_50:
        int v99 = (int)(v97 + v98);
LABEL_52:
        *(double *)&a41 = (double)v99 * 0.001;
        uint64_t v191 = v64;
        uint64_t v101 = *(void *)v64;
        uint64_t v100 = v64 + 96;
        BlueFin::GlGnssSet::operator^(v101 + 120800, v100, (uint64_t)&STACK[0x320]);
        BlueFin::GlGnssSet::operator&(v101 + 120800, (uint64_t)&STACK[0x320], (uint64_t)&a69);
        BlueFin::GlGnssSet::operator=(v100, v101 + 120800);
        uint64_t v102 = 0;
        double v103 = sqrt(v84);
        double v177 = v103 * v85;
        double v178 = v103 * v89;
        double v104 = sqrt(v86) * 3.33564095;
        char v105 = 1;
        unint64_t v106 = STACK[0x308];
        uint64_t v107 = v191;
        do
        {
          while ((v105 & 1) == 0)
          {
            char v105 = 0;
            if (++v102 == 7)
            {
              long long v109 = (_WORD *)(v191 + 82);
              goto LABEL_59;
            }
          }
          BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v106 + 24 * v102));
          char v105 = !HasAny;
          ++v102;
        }
        while (v102 != 7);
        long long v109 = (_WORD *)(v191 + 82);
        if (HasAny)
        {
LABEL_59:
          int v110 = v63;
        }
        else
        {
          int v171 = (__int16)--*v109;
          int v110 = v63;
          if (v171 > 0) {
            goto LABEL_74;
          }
        }
        *long long v109 = 60;
        uint64_t v111 = *((void *)v110 + 1);
        int v112 = *(const void **)v111;
        uint64_t v113 = *(unsigned __int8 *)(v111 + 8);
        a68 = 6;
        a54 = v113;
        memcpy(&a58, v112, 4 * v113);
        a56 = 0;
        a55 = 0;
        a57 = a58;
        BlueFin::GlSetIterator::operator++(&a54);
        if (a55 != a54)
        {
          uint64_t v114 = v191 + 288;
          do
          {
            a53 = a56;
            if ((*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(v107 + 24) + 64))(*(void *)(v107 + 24), &a53))
            {
              goto LABEL_63;
            }
            char v115 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)v191 + 119744);
            LODWORD(a31) = 7;
            BYTE4(a31) = 0;
            BlueFin::GlPeSvIdConverter::SvId2Gnss(v115, &a53, (uint64_t)&a31);
            if ((int)a31 > 6 || BYTE4(a31) - 1 > 0x3E) {
              goto LABEL_72;
            }
            if (BlueFin::GlPeSvHealthHelper::IsUsable(*(void *)(v191 + 64) + 32, (int *)&a31)
              && ((long long v116 = *(uint64_t **)v191,
                   a28 = -90.0,
                   int v117 = BlueFin::GlPeAsstMgr::computeAzElCommon(v116, (unsigned int *)&a31, v190, &a39, (uint64_t)&a68, 0, &a28), a28 >= 0.0)? (v118 = v117): (v118 = 0), v118 == 1))
            {
LABEL_63:
              BlueFin::GlPeNavSatAidMgr::Add(v114, a53);
            }
            else
            {
              BlueFin::GlPeNavSatAidMgr::Remove(v114, a53);
            }
LABEL_72:
            uint64_t v107 = v191;
            BlueFin::GlSetIterator::operator++(&a54);
          }
          while (a55 != a54);
        }
        int v110 = v189;
LABEL_74:
        a54 = v182[16];
        memcpy(&a58, *(const void **)(v107 + 8312), 4 * a54);
        a56 = 0;
        a55 = 0;
        a57 = a58;
        BlueFin::GlSetIterator::operator++(&a54);
        if (a55 == a54) {
          return;
        }
        __int16 v174 = 0;
        uint64_t v186 = v107 + 288;
LABEL_76:
        a53 = a56;
        a36 = 0;
        a35 = 0;
        a33 = 0u;
        a34 = 0u;
        a31 = 0u;
        a32 = 0u;
        if (!(*(unsigned int (**)(void, unsigned __int8 *, void, long long *, long long *, void, void, void))(**(void **)(v107 + 24) + 24))(*(void *)(v107 + 24), &a53, v190, &a37, &a31, (v110[5] >> 3) & 1, 0, 0))
        {
          if (!*v182)
          {
LABEL_163:
            DeviceFaultNotify("glpe_navaid.cpp", 688, "Generate", (char)"potNavSatAid");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navaid.cpp", 688, "potNavSatAid");
          }
          __int16 v119 = 0;
          uint64_t v120 = *(void *)(v191 + 8296);
          while (1)
          {
            int v121 = v119;
            uint64_t v122 = v120 + 88 * v119;
            int v124 = *(unsigned __int8 *)(v122 + 52);
            uint64_t v123 = (unsigned __int8 *)(v122 + 52);
            if (v124 == a53) {
              break;
            }
            ++v119;
            if (*v182 <= (__int16)(v121 + 1)) {
              goto LABEL_163;
            }
          }
          uint64_t v125 = (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(v191 + 24) + 64))(*(void *)(v191 + 24), &a53);
          double v127 = vars0;
          double v126 = vars8;
          double v128 = v104;
          if ((v189[5] & 0x10) != 0)
          {
            double v127 = vars0;
            double v126 = vars8;
            double v128 = v104;
            if (a53 - 76 <= 0x3E)
            {
              double v127 = 10.0;
              double v126 = 50.0;
              double v128 = 10.0;
            }
          }
          if (v125)
          {
            int v129 = *(_DWORD *)(v125 + 4);
            a28 = *(float *)(v125 + 8);
            a68 = v129;
            long long v130 = (int *)(v120 + 88 * v121);
            BlueFin::GlPeNavSatAid::GenerateNavAiding((uint64_t)v130, *(void *)(v191 + 48), v190, (uint64_t)&a37, (uint64_t)&a31, (int *)&a28, (float *)&a68, v178, v177, v126, v127, v128, v179);
          }
          else
          {
            long long v130 = (int *)(v120 + 88 * v121);
            BlueFin::GlPeNavSatAid::GenerateNavAiding((uint64_t)v130, *(void *)(v191 + 48), v190, (uint64_t)&a37, (uint64_t)&a31, 0, 0, v178, v177, v126, v127, v128, v179);
          }
          uint64_t v131 = v120 + 88 * v121;
          float v133 = *(float *)(v131 + 32);
          uint64_t v132 = v131 + 32;
          float v134 = v133;
          if (v133 >= -0.5)
          {
            int v135 = (unint64_t *)(v132 + 24);
            uint64_t v136 = v120 + 88 * v121;
            float v137 = *(float *)(v136 + 20);
            int v185 = (float *)(v136 + 20);
            if (fabsf(v137) <= 0.000003)
            {
              unsigned int v138 = (uint64_t *)v191;
              uint64_t v175 = v130;
              unsigned int v176 = (float *)v132;
              unsigned int v183 = (double *)(v132 - 24);
              if (*v130 != 4)
              {
                int v139 = *(_DWORD *)(v132 - 16);
                unsigned __int8 v140 = *v123;
                unsigned int v141 = &STACK[0x3E0] + 7 * v174;
                *unsigned int v141 = *(void *)(v132 - 24);
                *((_DWORD *)v141 + 2) = v139;
                *((float *)v141 + 3) = v137;
                v141[2] = *(void *)(v132 - 8);
                *((float *)v141 + 6) = v134;
                *(_OWORD *)((char *)v141 + 28) = *(_OWORD *)(v132 + 4);
                *((unsigned char *)v141 + 44) = v140;
                ++v174;
                v141[6] = *v135;
              }
              uint64_t v142 = 0;
              char v143 = 0;
              unsigned __int8 v144 = *(BlueFin::GlPeMsmtMgr **)(v191 + 16);
              uint64_t v145 = v120 + 88 * v121;
              int v187 = (_DWORD *)(v145 + 72);
              unsigned int v188 = (unsigned char *)(v145 + 84);
              unsigned int v146 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
              while (1)
              {
                uint64_t v147 = BlueFin::GlSvId::s_aucSvId2gnss[a53];
                if (*(unsigned __int8 *)(v138[7] + v147 + 256) >> v142) {
                  break;
                }
LABEL_117:
                ++v142;
                v146 += 7;
                if (v142 == 4)
                {
                  a28 = 0.0;
                  a68 = 0;
                  BlueFin::GlPeAsstMgr::GetIODE(*v138, &a53, &a28, &a68);
                  BOOL v156 = 0;
                  float v157 = a28;
                  int v158 = a68;
                  uint64_t v159 = v120 + 88 * v121;
                  int v162 = *(_DWORD *)(v159 + 76);
                  int v160 = (float *)(v159 + 76);
                  int v161 = v162;
                  if (a28 == NAN)
                  {
                    unsigned int v163 = v175;
                  }
                  else
                  {
                    unsigned int v163 = v175;
                    if (v161 != -1)
                    {
                      unsigned int v164 = *v123;
                      if (v164 < 0x34)
                      {
                        if ((v164 - 1) < 0x20u) {
                          goto LABEL_134;
                        }
                        goto LABEL_139;
                      }
                      if (LODWORD(a28) == 1 && v164 < 0x42) {
                        goto LABEL_138;
                      }
                      if (v164 < 0x42) {
                        goto LABEL_139;
                      }
                      if (v164 >= 0x4C && (v164 + 117) > 0x23u)
                      {
LABEL_137:
                        BOOL v156 = v164 < 0x8B;
                        goto LABEL_140;
                      }
LABEL_134:
                      if (v161 != LODWORD(a28) || *(_DWORD *)(v120 + 88 * v121 + 80) != a68)
                      {
LABEL_138:
                        BOOL v156 = 1;
                        goto LABEL_140;
                      }
                      if (v164 >= 0x4C) {
                        goto LABEL_137;
                      }
LABEL_139:
                      BOOL v156 = 0;
                    }
                  }
LABEL_140:
                  int v165 = a35;
                  int v166 = *v163;
                  uint64_t v107 = v191;
                  int v110 = v189;
                  if (*v163 == 2 || v166 == 4)
                  {
                    if ((v143 & 1) == 0) {
                      goto LABEL_154;
                    }
                    if (*v188) {
                      int *v163 = 3;
                    }
                  }
                  else
                  {
                    if (v166 == 3)
                    {
                      if (*(_DWORD *)(v120 + 88 * v121 + 64) != a35) {
                        BOOL v156 = 1;
                      }
                      if (v156 || !*v188) {
                        int *v163 = 2;
                      }
                    }
                    if ((v143 & 1) == 0)
                    {
LABEL_154:
                      uint64_t v167 = v120 + 88 * v121;
                      *(_DWORD *)(v167 + 64) = v165;
                      *int v160 = v157;
                      *(_DWORD *)(v167 + 80) = v158;
LABEL_130:
                      BlueFin::GlSetIterator::operator++(&a54);
                      if (a55 == a54)
                      {
                        if (v174)
                        {
                          uint64_t v168 = 0;
                          double v169 = *(double *)(*(void *)v110 + 112) * *(double *)(*(void *)v110 + 112)
                               + *(double *)(*(void *)v110 + 104) * *(double *)(*(void *)v110 + 104);
                          *((_WORD *)v182 + 2594) = v174;
                          uint64_t v170 = 91;
                          do
                          {
                            BlueFin::stKfSatAid::operator=(*(void *)(v107 + 13480) + v168, (uint64_t)&STACK[0x3E0] + v168);
                            v168 += 56;
                            --v170;
                          }
                          while (v170);
                          BlueFin::GlPeRangeAidGen::KfUpdate(*(void *)(v107 + 8), v190, v173, sqrt(v169) > 7.0, fabs(v172) >= 0.000000002, v184, v72, v172);
                        }
                        return;
                      }
                      goto LABEL_76;
                    }
                  }
                  *(_DWORD *)(v120 + 88 * v121 + 68) = v190;
                  goto LABEL_154;
                }
              }
              LOBYTE(a28) = a53;
              a29 = v142;
              a30 = 575;
              if ((a53 + 67) >= 0x44u)
              {
                if (v146[v147] == 255) {
                  a29 = -1;
                }
                else {
                  a30 = BlueFin::GlSignalId::s_ausGnss2signalId[v147]
                }
                      + a53
                      - BlueFin::GlSvId::s_aucGnss2minSvId[v147]
                      + v142 * BlueFin::GlSvId::s_aucGnss2numSvId[v147];
              }
              MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v144, (const BlueFin::GlSignalId *)&a28, 0, 0);
              unsigned int v149 = MeMeas;
              if ((((unint64_t)*(unsigned int *)(*((void *)v144 + 23) + 4 * (a30 >> 5)) >> (a30 & 0x1F)) & 1) == 0)
              {
                if (MeMeas && (*((_DWORD *)MeMeas + 3) & 0xC100) == 0x4000) {
                  v143 |= (int)(v190 - (int)(*((double *)MeMeas + 7) * 1000.0)) < 120001;
                }
                goto LABEL_116;
              }
              PeMeas = (double *)BlueFin::GlPeMsmtMgr::GetPeMeas(v144, (const BlueFin::GlSignalId *)&a28, 0);
              if (v94 <= 0.5)
              {
                if (!v149) {
                  goto LABEL_162;
                }
                double v151 = *PeMeas;
              }
              else
              {
                if (!v149)
                {
                  if (v143)
                  {
LABEL_162:
                    DeviceFaultNotify("glpe_navaid.cpp", 781, "Generate", (char)"pMeSigMeas");
                    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navaid.cpp", 781, "pMeSigMeas");
                  }
                  char v143 = 0;
                  goto LABEL_116;
                }
                double v151 = (double)v190
                     + *((double *)v149 + 7) * -1000.0
                     - floor((double)v190 + *((double *)v149 + 7) * -1000.0);
              }
              double v152 = *((double *)&a40 + 1);
              *unsigned int v188 = 0;
              if (*v187)
              {
                double v153 = v152 / 299792458.0 * 1000.0;
                double v154 = fabs(*((float *)v149 + 24) * -1000000000.0 + (*v185 - v184) * 1000000000.0);
                double v155 = vabdd_f64(v153 + *v183 * 1000.0 - floor(v153 + *v183 * 1000.0), v151);
                if (v154 <= 50.0 && v155 <= 0.0005)
                {
                  char v143 = 1;
                  *unsigned int v188 = 1;
LABEL_116:
                  unsigned int v138 = (uint64_t *)v191;
                  goto LABEL_117;
                }
                GlCustomLog(14, "CompareMsmtWithPrevAid: SvId:%02d %f %f %s, elv(%.1f)\n", *v123, v154, v155, "BAD", *v176);
              }
              char v143 = 1;
              goto LABEL_116;
            }
            if (*(_DWORD *)v135 == 1) {
              BlueFin::GlPeAsstMgr::MarkUnverified(*(void *)v191, &a53);
            }
          }
        }
        BlueFin::GlPeNavSatAidMgr::Remove(v186, a53);
        uint64_t v107 = v191;
        int v110 = v189;
        goto LABEL_130;
      }
      if (v97 < 0.0)
      {
        double v98 = -0.5;
        goto LABEL_50;
      }
    }
    int v99 = 0;
    goto LABEL_52;
  }
}

double BlueFin::GlGlnsTime::getTodS(BlueFin::GlGlnsTime *this)
{
  BOOL v3 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
    && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
    && *((_DWORD *)this + 3) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
  unsigned int v4 = (*(uint64_t (**)(BlueFin::GlGlnsTime *))(*(void *)this + 32))(this);
  if (v3) {
    double v6 = 10799.0;
  }
  else {
    double v6 = (double)(v4 % 0x15180);
  }
  LODWORD(v5) = *((_DWORD *)this + 2);
  return v6 + (double)v5 * 2.32830644e-10;
}

void BlueFin::GlGalTime::~GlGalTime(BlueFin::GlGalTime *this)
{
}

uint64_t BlueFin::GlGalTime::getTimeSystem(BlueFin::GlGalTime *this)
{
  return 3;
}

void BlueFin::GlBdsTime::~GlBdsTime(BlueFin::GlBdsTime *this)
{
}

uint64_t BlueFin::GlBdsTime::getTimeSystem(BlueFin::GlBdsTime *this)
{
  return 4;
}

void BlueFin::GlGlnsTime::~GlGlnsTime(BlueFin::GlGlnsTime *this)
{
}

uint64_t BlueFin::GlGlnsTime::getTimeSystem(BlueFin::GlGlnsTime *this)
{
  return 1;
}

uint64_t BlueFin::BdNavDataParse::MakeBdNavParse(int a1, char a2, uint64_t a3, unsigned int a4)
{
  if (!a3 || !a4)
  {
    uint64_t v10 = "pBuff && sSizeInBytes";
    DeviceFaultNotify("bd_msg_process.cpp", 35, "MakeBdNavParse", (char)"pBuff && sSizeInBytes");
    int v11 = 35;
    goto LABEL_12;
  }
  if (!a1)
  {
    if (a4 > 0x49F)
    {
      *(void *)a3 = &unk_270EBF5D8;
      *(void *)(a3 + 8) = &unk_270EBF6A0;
      *(unsigned char *)(a3 + 220) = a2;
      unint64_t v5 = (void *)(a3 + 256);
      *(void *)(a3 + 1096) = a3 + 256;
      double v6 = (_OWORD *)(a3 + 1104);
      uint64_t v7 = a3 + 16;
      int v8 = (_DWORD *)(a3 + 221);
      goto LABEL_8;
    }
    uint64_t v10 = "sSizeInBytes >= sizeof(NonGeoMsgProcess)";
    DeviceFaultNotify("bd_msg_process.cpp", 38, "MakeBdNavParse", (char)"sSizeInBytes >= sizeof(NonGeoMsgProcess)");
    int v11 = 38;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "bd_msg_process.cpp", v11, v10);
  }
  if (a4 <= 0x4DF)
  {
    uint64_t v10 = "sSizeInBytes >= sizeof(GeoMsgProcess)";
    DeviceFaultNotify("bd_msg_process.cpp", 44, "MakeBdNavParse", (char)"sSizeInBytes >= sizeof(GeoMsgProcess)");
    int v11 = 44;
    goto LABEL_12;
  }
  *(void *)a3 = &unk_270EBF6E0;
  *(void *)(a3 + 8) = &unk_270EBF7A8;
  *(unsigned char *)(a3 + 308) = a2;
  unint64_t v5 = (void *)(a3 + 320);
  *(void *)(a3 + 1160) = a3 + 320;
  double v6 = (_OWORD *)(a3 + 1168);
  uint64_t v7 = a3 + 16;
  int v8 = (_DWORD *)(a3 + 309);
LABEL_8:
  *(unsigned char *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *int v8 = 0;
  bzero(v5, 0x348uLL);
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  void v6[2] = 0u;
  *double v6 = 0u;
  return a3;
}

uint64_t BlueFin::NonGeoMsgProcess::RegisterListener(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

{
  *(void *)(result + 24) = a2;
  return result;
}

{
  *(void *)(result + 32) = a2;
  return result;
}

{
  *(void *)(result + 40) = a2;
  return result;
}

{
  *(void *)(result + 48) = a2;
  return result;
}

{
  *(void *)(result + 56) = a2;
  return result;
}

{
  *(void *)(result + 64) = a2;
  return result;
}

{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t BlueFin::NonGeoMsgProcess::SetPackedData(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  int v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  BlueFin::BdNavMsgMgr::ProcessAlm(a1 + 8, (int *)a2, (uint64_t)v5);
  __int16 v12 = *(unsigned __int8 *)(a2 + 24);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)result + 16))(result, v5, a2);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, 1, a2, 1);
  }
  return result;
}

uint64_t BlueFin::NonGeoMsgProcess::SetPackedData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = bswap32(a2[1]);
  v4[0] = bswap32(*a2);
  v4[1] = v2;
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _DWORD *, unsigned int *))(*(void *)result + 16))(result, v4, a2);
  }
  return result;
}

{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  _WORD v6[6];

  unsigned int v2 = *a2;
  BOOL v3 = a2[1];
  v6[0] = *a2;
  v6[1] = (__int16)(v2 >> 14) >> 2;
  v6[4] = v3;
  v6[5] = (__int16)(v3 >> 14) >> 2;
  unsigned int v4 = a2[2];
  void v6[2] = v4;
  v6[3] = (__int16)(v4 >> 14) >> 2;
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _WORD *, unsigned int *))(*(void *)result + 16))(result, v6, a2);
  }
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  unsigned int v4 = 0;
  LOBYTE(v8) = 0;
  do
  {
    unint64_t v5 = (char *)&v8 + v4;
    v5[32] = 0;
    *((_WORD *)v5 + 17) = 0;
    v4 += 4;
  }
  while (v4 != 76);
  BlueFin::BdNavMsgMgr::ProcessHealth(a1 + 8, 1, a2, (uint64_t)&v8, 0);
  int v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *, unsigned int *))(*(void *)v6 + 16))(v6, &v8, a2);
  }
  BlueFin::BdNavMsgMgr::ProcessHealth(a1 + 8, 2, a2, (uint64_t)&v8, 0);
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, unsigned int *))(*(void *)result + 16))(result, &v8, a2);
  }
  return result;
}

uint64_t BlueFin::NonGeoMsgProcess::SetPackedData(uint64_t a1, int *a2)
{
  int v3 = a2[1];
  int v2 = a2[2];
  int v4 = *a2;
  v6[0] = v2 >> 8;
  v6[1] = v3;
  char v10 = BYTE1(v4);
  char v7 = BYTE2(v4);
  char v8 = v4;
  char v9 = v2;
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _DWORD *, int *))(*(void *)result + 16))(result, v6, a2);
  }
  return result;
}

void BlueFin::NonGeoMsgProcess::SetDataSubFrmMeas(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, char a15, char a16, uint64_t a17, int a18, uint64_t a19, signed int a20,uint64_t a21,int a22,uint64_t a23,int a24,unint64_t a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  a52 = *MEMORY[0x263EF8340];
  BYTE1(v111) = *a2;
  BYTE2(v111) = -1;
  LOBYTE(v111) = 0;
  if ((BYTE1(v111) - 6) < 0xFBu) {
    return;
  }
  uint64_t v55 = a1 + 8;
  int v56 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  BlueFin::BdNavMsgMgr::FillRawNavSubframe(v55, (uint64_t)a2, (uint64_t)&v111, v56);
  BOOL v58 = BYTE1(v111) == 1 && v111 == 1;
  if (v58 && (v113 & 0x20000) == 0)
  {
    unsigned int v59 = (v114 >> 17) & 0x1FFF;
    uint64_t v60 = *(void *)(a1 + 56);
    if (v60) {
      (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v60 + 16))(v60, *(unsigned __int8 *)(a1 + 220), (v114 >> 17) & 0x1FFF, a3);
    }
    uint64_t v61 = *(void *)(a1 + 40);
    if (v61)
    {
      int v62 = *(_DWORD *)(a3 + 4);
      *(_WORD *)(v61 + 8) = v59;
      *(_DWORD *)(v61 + 12) = v62;
    }
    uint64_t v63 = *(void *)(a1 + 48);
    if (v63)
    {
      int v64 = *(_DWORD *)(a3 + 4);
      *(_WORD *)(v63 + 8) = v59;
      *(_DWORD *)(v63 + 12) = v64;
    }
  }
  uint64_t v65 = 0;
  LOWORD(a26) = 0;
  a47 = &a37;
  *(long long *)((char *)&a26 + 4) = 0u;
  *(long long *)((char *)&a27 + 4) = 0u;
  *(long long *)((char *)&a28 + 4) = 0u;
  *(long long *)((char *)&a29 + 4) = 0u;
  *(long long *)((char *)&a30 + 4) = 0u;
  *(long long *)((char *)&a31 + 4) = 0u;
  a32 = 0u;
  a25 = 0;
  a33 = 0;
  do
  {
    int v66 = &a33 + v65;
    v66[32] = 0;
    *((_WORD *)v66 + 17) = 0;
    v65 += 4;
  }
  while (v65 != 76);
  a24 = 0;
  a23 = 0;
  a22 = 0;
  a21 = 0;
  a20 = 0;
  a19 = 0;
  a18 = 0;
  a17 = 0;
  if (v111 != 1) {
    return;
  }
  int v67 = BYTE1(v111);
  if (BYTE1(v111) > 3u)
  {
    if ((BYTE1(v111) & 0xFE) != 4) {
      return;
    }
    unsigned int v74 = (v113 >> 10) & 0x7F;
    if (!v74) {
      return;
    }
    if (BYTE1(v111) == 5) {
      v74 += 24;
    }
    if (v74 > 0x1E)
    {
      if (v74 > 0x22) {
        return;
      }
      long long vars0 = 0u;
      if (v74 == 33)
      {
        LODWORD(a23) = (DWORD1(v114) << 6) & 0x3FFFC000 | HIWORD(DWORD2(v114)) & 0x3FFF;
        HIDWORD(a23) = (DWORD2(v114) << 14) & 0x3FC00000 | (HIDWORD(v114) >> 8) & 0x3FFFFF;
        a24 = v115 & 0x3FFFFF00 | (v116 >> 22);
        LOWORD(a21) = (WORD2(v114) << 6) & 0xC000 | WORD5(v114) & 0x3FFF;
        WORD1(a21) = (__int16)(DWORD1(v114) >> 8) >> 2;
        LOWORD(a22) = HIDWORD(v114) >> 8;
        HIWORD(a22) = (__int16)(HIDWORD(a23) >> 14) >> 2;
        WORD2(a21) = v115 & 0xFF00 | (v116 >> 22);
        HIWORD(a21) = (__int16)(v115 >> 14) >> 2;
        double v103 = *(_DWORD **)(a1 + 48);
        if (v103)
        {
          unsigned int v104 = (v112 << 8) & 0xFF000 | (v113 >> 18) & 0xFFF;
          if (v104 < 0x93A80) {
            v103[4] = v104;
          }
          (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v103 + 16))(v103, &a21, &a23);
        }
        return;
      }
      if (v74 != 32)
      {
        if (v74 == 31)
        {
          BlueFin::BdNavMsgMgr::HealthPacked(v55, 1, &v111, (int *)&vars0);
          BlueFin::BdNavMsgMgr::ProcessHealth(v55, 1, (unsigned int *)&vars0, (uint64_t)&a33, 0);
          uint64_t v102 = *(void *)(a1 + 72);
          if (v102) {
            (*(void (**)(uint64_t, char *, long long *))(*(void *)v102 + 16))(v102, &a33, &vars0);
          }
        }
        else
        {
          LODWORD(a19) = (v113 << 14) & 0xC00000 | (v114 >> 8) & 0x3FFFFF;
          HIDWORD(a19) = (4 * DWORD1(v114)) & 0xFFFFFC00 | (DWORD2(v114) >> 20) & 0x3FF;
          a20 = (DWORD2(v114) << 12) & 0xFFF00000 | (HIDWORD(v114) >> 10) & 0xFFFFF;
          LODWORD(a17) = a20 >> 8;
          HIDWORD(a17) = HIDWORD(a19);
          HIBYTE(a18) = BYTE2(v114);
          LOBYTE(a18) = BYTE2(a19);
          BYTE1(a18) = BYTE1(v114);
          BYTE2(a18) = HIDWORD(v114) >> 10;
          unint64_t v106 = *(_DWORD **)(a1 + 40);
          if (v106)
          {
            unsigned int v107 = (v112 << 8) & 0xFF000 | (v113 >> 18) & 0xFFF;
            if (v107 < 0x93A80) {
              v106[4] = v107;
            }
            (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v106 + 16))(v106, &a17, &a19);
          }
        }
        return;
      }
      BlueFin::BdNavMsgMgr::HealthPacked(v55, 2, &v111, (int *)&vars0);
      BlueFin::BdNavMsgMgr::ProcessHealth(v55, 2, (unsigned int *)&vars0, (uint64_t)&a33, (unsigned char *)(a1 + 221));
      uint64_t v105 = *(void *)(a1 + 72);
      if (v105) {
        (*(void (**)(uint64_t, char *, long long *))(*(void *)v105 + 16))(v105, &a33, &vars0);
      }
    }
    else
    {
      unsigned int v75 = *(unsigned __int8 *)(a1 + 224);
      if (v75 >= 0x1E)
      {
        unsigned int v75 = 0;
        *(unsigned char *)(a1 + 224) = 0;
      }
      BlueFin::BdNavMsgMgr::AlmPacked(v55, &v111, (int *)(*(void *)(a1 + 1096) + 28 * v75), v67 == 5);
      ++*(unsigned char *)(a1 + 224);
      if (*(unsigned char *)(a1 + 223) != 1) {
        return;
      }
    }
    BlueFin::NonGeoMsgProcess::PublishAlm((BlueFin::NonGeoMsgProcess *)a1);
    return;
  }
  switch(BYTE1(v111))
  {
    case 1u:
      char v73 = 0;
      unsigned int v76 = DWORD2(v114);
      int v77 = HIDWORD(v114);
      *(_DWORD *)(a1 + 1172) = (DWORD2(v114) << 8) & 0xFFFF0000 | (unsigned __int16)(HIDWORD(v114) >> 14);
      unsigned int v78 = v116;
      *(_DWORD *)(a1 + 1176) = (v77 << 18) & 0xFC000000 | (v115 >> 4) & 0x3FFFFF0 | (v116 >> 26) & 0xF;
      v79.i64[0] = v114;
      v57.i64[0] = __PAIR64__(v78, v117.u32[1]);
      int8x16_t v80 = (int8x16_t)xmmword_263BB3560;
      uint32x4_t v81 = (uint32x4_t)vzip1q_s32(v57, v57);
      v82.i64[0] = vshlq_u32(v81, (uint32x4_t)xmmword_263BB3550).u64[0];
      int32x4_t v83 = (int32x4_t)vshlq_u32(v81, (uint32x4_t)xmmword_263BB3560);
      v82.i64[1] = v83.i64[1];
      *(int32x2_t *)v83.i8 = vrev64_s32(*(int32x2_t *)&v114);
      v79.i64[1] = __PAIR64__(v117.u32[0], v114);
      v80.i32[0] = v117.i32[0] << 19;
      v84.i64[0] = 0xF8000000F8000000;
      v84.i64[1] = 0xF8000000F8000000;
      int8x16_t v85 = vandq_s8(v80, v84);
      int8x16_t v86 = (int8x16_t)xmmword_263BB3590;
      int8x16_t v87 = vandq_s8((int8x16_t)vshlq_u32(v79, (uint32x4_t)xmmword_263BB3580), (int8x16_t)xmmword_263BB3590);
      v86.i32[0] = HIBYTE(v76) & 0x3F;
      v87.i32[0] = vorrq_s8(v85, v86).u32[0];
      v83.i32[2] = v113;
      uint32x4_t v88 = vshlq_u32((uint32x4_t)vuzp1q_s32(v83, v83), (uint32x4_t)xmmword_263BB35A0);
      int8x16_t v89 = (int8x16_t)vshlq_u32((uint32x4_t)v83, (uint32x4_t)xmmword_263BB35B0);
      v89.i32[0] = v88.i32[0];
      v89.i32[3] = v88.i32[3];
      *(int8x16_t *)(a1 + 1104) = vorrq_s8(vorrq_s8(v87, vandq_s8(v82, (int8x16_t)xmmword_263BB3570)), vandq_s8(v89, (int8x16_t)xmmword_263BB35C0));
      break;
    case 2u:
      __int32 v90 = v117.i32[0];
      unsigned __int32 v91 = v117.u32[1];
      unsigned int v92 = v115;
      *(_DWORD *)(a1 + 1120) = (v117.i32[0] << 12) & 0xFFF00000 | ((unsigned __int32)v117.i32[1] >> 10) & 0xFFFFF;
      v93.i64[0] = __PAIR64__(DWORD1(v114), DWORD2(v114));
      unsigned int v94 = DWORD1(v114);
      *(int32x2_t *)v95.i8 = vrev64_s32(*(int32x2_t *)((char *)&v114 + 8));
      v93.i64[1] = __PAIR64__(v116, v113);
      v95.i64[1] = __PAIR64__(v90, v114);
      *(int8x16_t *)(a1 + 1124) = vbslq_s8((int8x16_t)xmmword_263BB3530, (int8x16_t)vshlq_u32(v93, (uint32x4_t)xmmword_263BB3520), (int8x16_t)vshlq_u32(v95, (uint32x4_t)xmmword_263BB3540));
      *(_DWORD *)(a1 + 1140) = (v94 >> 20) & 0x300 | (v91 >> 2) & 0xC0 | (v92 >> 8 << 10);
      char v73 = 1;
      break;
    case 3u:
      unsigned int v69 = v115;
      unsigned int v68 = v116;
      *(int8x8_t *)(a1 + 1144) = vorr_s8(vand_s8((int8x8_t)vshl_u32(v117, (uint32x2_t)0xFFFFFFF7FFFFFFEDLL), (int8x8_t)0x1FFFFF000007FFLL), (int8x8_t)vrev64_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)__PAIR64__(v116, v117.u32[0]), (uint32x2_t)0x30000000DLL), (int8x8_t)0xFFFFF800FFE00000)));
      unsigned int v70 = HIDWORD(v114);
      *(_DWORD *)(a1 + 1152) = ((v68 >> 29) | (HIDWORD(v114) << 15)) & 0xFF800001 | (2 * ((v69 >> 8) & 0x3FFFFF));
      unsigned __int32 v72 = v113;
      unsigned int v71 = v114;
      *(int8x8_t *)(a1 + 1156) = vorr_s8(vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)((char *)&v114 + 4), (uint32x2_t)0xFFFFFFFBFFFFFFF1), (int8x8_t)0x1FFFFF800007FFFLL), (int8x8_t)vrev64_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)__PAIR64__(v114, DWORD1(v114)), (uint32x2_t)0x700000011), (int8x8_t)0xFFFF8000FE000000)));
      *(_DWORD *)(a1 + 1164) = (v71 >> 8) & 0x3E0000 | (v70 >> 13) & 0x1FFF0 | ((unsigned __int16)(v72 >> 8) << 22);
      char v73 = 2;
      break;
    default:
      int v96 = *(_DWORD *)(a1 + 88);
      goto LABEL_35;
  }
  int v96 = *(_DWORD *)(a1 + 88) | (1 << v73);
  *(_DWORD *)(a1 + 88) = v96;
LABEL_35:
  if ((~v96 & 7) == 0)
  {
    __int16 v97 = *(_WORD *)(a1 + 82);
    if ((v97 & 0x1C) == 0xC)
    {
      uint64_t v98 = 0;
      int v99 = (_DWORD *)(a1 + 104);
      do
      {
        *(&a15 + v98++) = (1193047
                         * (unint64_t)((*v99 >> 18) & 0xFF0 | ((*(v99 - 1) >> 4) << 12))) >> 32;
        v99 += 10;
      }
      while (v98 != 3);
      unint64_t v100 = 0;
      while (v100 > 1)
      {
LABEL_44:
        if (++v100 == 3)
        {
          BlueFin::NonGeoMsgProcess::ProcessEph(a1 + 1104, &a26, *(unsigned __int8 *)(a1 + 220));
          if ((_WORD)a26)
          {
            LOBYTE(vars0) = 1;
            WORD1(vars0) = 1;
            *(_DWORD *)(a1 + 1180) = 1;
            *(unsigned char *)(a1 + 80) = 0;
            (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
          }
          else
          {
            *(_WORD *)(a1 + 82) = v97 & 0xFFE3 | 0x10;
            LOBYTE(vars0) = 0;
            WORD1(vars0) = 0;
            *(_DWORD *)(a1 + 1180) = 0;
          }
          uint64_t v108 = *(void *)(a1 + 64);
          if (v108) {
            (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)v108 + 16))(v108, &vars0, a1 + 1180);
          }
          uint64_t v109 = *(void *)(a1 + 24);
          if (v109) {
            (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v109 + 16))(v109, 1, a1 + 1104, 0);
          }
          a25 = __PAIR64__(bswap32(*(_DWORD *)(a1 + 1176)), bswap32(*(_DWORD *)(a1 + 1172)));
          uint64_t v110 = *(void *)(a1 + 32);
          if (v110)
          {
            if (!(_BYTE)vars0) {
              (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v110 + 16))(v110, &a25, a1 + 1172);
            }
          }
          goto LABEL_71;
        }
      }
      unint64_t v101 = v100;
      while (*(&a15 + v100) == *(&a16 + v101))
      {
        if (++v101 == 2) {
          goto LABEL_44;
        }
      }
LABEL_71:
      *(unsigned char *)(a1 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
    }
  }
}

double BlueFin::NonGeoMsgProcess::ResetSfState(BlueFin::NonGeoMsgProcess *this)
{
  if (*((unsigned char *)this + 80) != 1)
  {
    *((unsigned char *)this + 80) = 1;
    double result = 0.0;
    *(_OWORD *)((char *)this + 81) = 0u;
    *(_OWORD *)((char *)this + 97) = 0u;
    *(_OWORD *)((char *)this + 113) = 0u;
    *(_OWORD *)((char *)this + 129) = 0u;
    *(_OWORD *)((char *)this + 145) = 0u;
    *(_OWORD *)((char *)this + 161) = 0u;
    *(_OWORD *)((char *)this + 177) = 0u;
    *(_OWORD *)((char *)this + 193) = 0u;
    *(_OWORD *)((char *)this + 204) = 0u;
  }
  return result;
}

double non-virtual thunk to'BlueFin::NonGeoMsgProcess::ResetSfState(BlueFin::NonGeoMsgProcess *this)
{
  if (*((unsigned char *)this + 72) != 1)
  {
    *((unsigned char *)this + 72) = 1;
    double result = 0.0;
    *(_OWORD *)((char *)this + 73) = 0u;
    *(_OWORD *)((char *)this + 89) = 0u;
    *(_OWORD *)((char *)this + 105) = 0u;
    *(_OWORD *)((char *)this + 121) = 0u;
    *(_OWORD *)((char *)this + 137) = 0u;
    *(_OWORD *)((char *)this + 153) = 0u;
    *(_OWORD *)((char *)this + 169) = 0u;
    *(_OWORD *)((char *)this + 185) = 0u;
    *(_OWORD *)((char *)this + 196) = 0u;
  }
  return result;
}

uint64_t BlueFin::NonGeoMsgProcess::EbwRestoreSFWords(_DWORD *a1, uint64_t a2, _WORD *a3)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *, void, void))(*(void *)a1 + 136))(a1, *(unsigned __int8 *)(a2 + 1), *(unsigned __int8 *)(a2 + 2));
  unsigned int v7 = *(unsigned __int8 *)(a2 + 1);
  if (v7 <= 3)
  {
    if (!*(unsigned char *)(a2 + 1))
    {
      DeviceFaultNotify("bd_msg_process.cpp", 230, "EbwRestoreSFWords", (char)"word >=0 && word < BD_NONGEO_NUM_EPH_SFM");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "bd_msg_process.cpp", 230, "word >=0 && word < BD_NONGEO_NUM_EPH_SFM");
    }
    uint64_t v8 = 0;
    char v9 = 10 * v7 - 10;
    uint64_t v10 = (uint64_t)&a1[10 * *(unsigned __int8 *)(a2 + 1) + 15];
    do
    {
      if ((a1[23] >> (v9 + v8))) {
        *(_DWORD *)(a2 + 4 + 4 * v8) = *(_DWORD *)(v10 + 4 * v8);
      }
      ++v8;
    }
    while (v8 != 10);
    *a3 = result & (a1[23] >> v9);
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::NonGeoMsgProcess::EbwRestoreSFWords(uint64_t a1, uint64_t a2, _WORD *a3)
{
  return BlueFin::NonGeoMsgProcess::EbwRestoreSFWords((_DWORD *)(a1 - 8), a2, a3);
}

uint64_t BlueFin::NonGeoMsgProcess::EphUpdateProcess(uint64_t result, uint64_t a2, _WORD *a3)
{
  int v3 = *(unsigned __int8 *)(a2 + 1);
  unsigned int v4 = v3 - 1;
  if ((v3 - 1) > 2) {
    return result;
  }
  int v5 = (unsigned __int16)*a3;
  int v6 = *(unsigned __int8 *)(result + 81);
  if (v3 == 3 && (v5 & 2) != 0)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 8) & 0x3FF00;
    unsigned int v9 = v8 - 3584 * ((1198373 * (unint64_t)v8) >> 32);
    if (v9 > 0x7FF || v8 >= 0xE000 && !v9) {
      goto LABEL_18;
    }
    if (v6 == 3)
    {
      if (v8 == *(_DWORD *)(result + 84)) {
        goto LABEL_18;
      }
    }
    else if (v6 == 1)
    {
      *(unsigned char *)(result + 81) = 3;
      *(_DWORD *)(result + 84) = v8;
      goto LABEL_18;
    }
    *(unsigned char *)(result + 81) = 3;
    *(_DWORD *)(result + 84) = v8;
LABEL_17:
    *(_DWORD *)(result + 96) = 0;
    *(void *)(result + 88) = 0;
    *(_WORD *)(result + 82) = 4;
    *(_OWORD *)(result + 100) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    *(_OWORD *)(result + 132) = 0u;
    *(_OWORD *)(result + 148) = 0u;
    *(_OWORD *)(result + 164) = 0u;
    *(_OWORD *)(result + 180) = 0u;
    *(_OWORD *)(result + 196) = 0u;
    *(void *)(result + 212) = 0;
    int v5 = (unsigned __int16)*a3;
    goto LABEL_18;
  }
  if (!*(unsigned char *)(result + 81))
  {
    *(unsigned char *)(result + 81) = 1;
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v10 = 0;
  int v11 = ~(1 << v4);
  uint64_t v12 = a2 + 4;
  uint64_t v13 = result + 40 * v4 + 100;
  char v14 = 10 * v3 - 10;
  do
  {
    if (((1 << v10) & v5) != 0)
    {
      int v15 = 1 << (v14 + v10);
      int v16 = *(_DWORD *)(result + 96);
      if ((v16 & v15) == 0)
      {
        int v17 = *(_DWORD *)(result + 92);
        if ((v17 & v15) != 0)
        {
          if ((unsigned __int16)v10 - 2 >= 8)
          {
            if ((unsigned __int16)v10 == 1)
            {
              if (((*(_DWORD *)(v12 + 4 * v10) ^ *(_DWORD *)(v13 + 4 * v10)) & 0x3FF00) != 0) {
                goto LABEL_24;
              }
            }
            else if (!(_WORD)v10 && ((*(_DWORD *)(v12 + 4 * v10) ^ *(_DWORD *)(v13 + 4 * v10)) & 0x3FFFF000) != 0)
            {
LABEL_24:
              *a3 = v5 & ~(unsigned __int16)(1 << v10);
              *(_WORD *)(result + 82) = 4;
              *(_DWORD *)(result + 88) &= v11;
              *(_DWORD *)(result + 92) = v17 & ~v15;
              int v5 = (unsigned __int16)*a3;
              goto LABEL_32;
            }
          }
          else if (((*(_DWORD *)(v12 + 4 * v10) ^ *(_DWORD *)(v13 + 4 * v10)) & 0x3FFFFFFF) != 0)
          {
            goto LABEL_24;
          }
          *(_DWORD *)(result + 96) = v16 | v15;
        }
        *(_DWORD *)(v13 + 4 * v10) = *(_DWORD *)(v12 + 4 * v10);
        *(_DWORD *)(result + 92) = v17 | v15;
      }
    }
LABEL_32:
    ++v10;
  }
  while (v10 != 10);
  __int16 v18 = *(_WORD *)(result + 82);
  int v19 = v18 & 0x1C;
  if (v19 != 16 && *(_DWORD *)(result + 92) == 0x3FFFFFFF)
  {
    if (v19 != 12)
    {
      v18 |= 8u;
      if (v19 != 4) {
        __int16 v18 = 8;
      }
      *(_WORD *)(result + 82) = v18;
    }
    if (*(_DWORD *)(result + 96) == 0x3FFFFFFF && (v18 & 0x1C) == 0xC) {
      *(_WORD *)(result + 82) = v18 & 0xFFE3 | 0x10;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::NonGeoMsgProcess::EphUpdateProcess(uint64_t a1, uint64_t a2, _WORD *a3)
{
  return BlueFin::NonGeoMsgProcess::EphUpdateProcess(a1 - 8, a2, a3);
}

uint64_t BlueFin::NonGeoMsgProcess::EbwCheckSfOk(uint64_t result, int a2, unsigned char *a3)
{
  uint64_t v3 = a3[1];
  *a3 = 0;
  if ((v3 - 6) >= 0xFBu)
  {
    uint64_t v6 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)result + 136))(result, v3, a3[2]);
    if ((v3 - 1) > 2)
    {
      if (result != a2) {
        return result;
      }
    }
    else if ((result & ~(*(_DWORD *)(v6 + 92) >> (10 * v3 - 10))) != 0)
    {
      return result;
    }
    *a3 = 1;
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::NonGeoMsgProcess::EbwCheckSfOk(uint64_t a1, int a2, unsigned char *a3)
{
  return BlueFin::NonGeoMsgProcess::EbwCheckSfOk(a1 - 8, a2, a3);
}

uint64_t BlueFin::NonGeoMsgProcess::ProcessEph(uint64_t a1, _DWORD *a2, int a3)
{
  a2[3] = (*(_DWORD *)(a1 + 12) >> 7) & 1;
  a2[2] = *(_DWORD *)(a1 + 4) & 0x1F;
  a2[4] = (*(_DWORD *)(a1 + 8) >> 13) & 0xF;
  a2[1] = (*(_DWORD *)(a1 + 12) >> 2) & 0x1F;
  a2[6] = *(_DWORD *)(a1 + 8) & 0x1FFF;
  a2[5] = *(_DWORD *)(a1 + 4) >> 15;
  a2[8] = *(int *)a1 >> 10;
  a2[7] = *(int *)(a1 + 8) >> 21;
  a2[9] = *(int *)(a1 + 12) >> 8;
  a2[10] = (int)(*(_DWORD *)(a1 + 4) << 17) >> 22;
  a2[11] = (int)(*(_DWORD *)a1 << 22) >> 22;
  a2[22] = (*(_DWORD *)(a1 + 36) << 9) & 0x18000 | (*(_DWORD *)(a1 + 60) >> 17);
  a2[21] = *(_DWORD *)(a1 + 16);
  a2[20] = *(_DWORD *)(a1 + 20);
  a2[13] = *(_DWORD *)(a1 + 24);
  a2[12] = *(__int16 *)(a1 + 30);
  a2[17] = ((*(_DWORD *)(a1 + 36) << 6) & 0xC000 | (*(_DWORD *)(a1 + 28) << 16)) >> 14;
  a2[15] = ((*(_DWORD *)(a1 + 32) >> 4) & 0xFFFFFFF | ((*(_DWORD *)(a1 + 36) >> 10) << 28)) >> 14;
  a2[14] = (int)(*(_DWORD *)(a1 + 32) << 14) >> 14;
  a2[16] = *(int *)(a1 + 36) >> 14;
  a2[23] = *(_DWORD *)(a1 + 40);
  a2[25] = *(_DWORD *)(a1 + 44);
  a2[18] = *(int *)(a1 + 48) >> 14;
  a2[27] = (int)(*(_DWORD *)(a1 + 48) << 18) >> 18;
  a2[24] = *(_DWORD *)(a1 + 52);
  a2[19] = *(int *)(a1 + 56) >> 14;
  a2[26] = (int)((*(_DWORD *)(a1 + 56) << 18) & 0xFFE00000 | (((*(_DWORD *)(a1 + 60) >> 4) & 0x1FFF) << 8)) >> 8;
  BOOL v5 = (a3 - 1) < 5 || (a3 - 59) < 5;
  uint64_t result = BlueFin::BdNavMsgMgr::EphRangeCheck(a2, v5);
  *(_WORD *)a2 = result;
  return result;
}

void BlueFin::NonGeoMsgProcess::PublishAlm(BlueFin::NonGeoMsgProcess *this)
{
  if (*((unsigned char *)this + 223) == 1)
  {
    for (unsigned __int8 i = *((unsigned char *)this + 224); i; *((unsigned char *)this + 224) = i)
    {
      v7[0] = 0;
      int v8 = 0;
      __int16 v9 = 0;
      uint64_t v11 = 0;
      memset(v12, 0, sizeof(v12));
      uint64_t v10 = 0;
      uint64_t v3 = *((void *)this + 137);
      int v4 = i - 1;
      BlueFin::BdNavMsgMgr::ProcessAlm((uint64_t)this + 8, (int *)(v3 + 28 * v4), (uint64_t)v7);
      if (*((unsigned __int8 *)this + 221) == v9)
      {
        int v5 = *((unsigned __int8 *)this + 222);
        *(_DWORD *)(v3 + 28 * v4 + 24) = v5;
        v12[6] = v5;
        uint64_t v6 = *((void *)this + 2);
        if (v6)
        {
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v6 + 16))(v6, v7, v3 + 28 * v4);
          unsigned __int8 i = *((unsigned char *)this + 224);
        }
      }
      --i;
    }
  }
}

uint64_t BlueFin::GeoMsgProcess::RegisterListener(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

{
  *(void *)(result + 24) = a2;
  return result;
}

{
  *(void *)(result + 32) = a2;
  return result;
}

{
  *(void *)(result + 40) = a2;
  return result;
}

{
  *(void *)(result + 48) = a2;
  return result;
}

{
  *(void *)(result + 56) = a2;
  return result;
}

{
  *(void *)(result + 64) = a2;
  return result;
}

{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t BlueFin::GeoMsgProcess::SetPackedData(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  int v6 = 0;
  __int16 v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  BlueFin::BdNavMsgMgr::ProcessAlm(a1 + 8, (int *)a2, (uint64_t)v5);
  __int16 v12 = *(unsigned __int8 *)(a2 + 24);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)result + 16))(result, v5, a2);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)result + 16))(result, 0, a2, 1);
  }
  return result;
}

uint64_t BlueFin::GeoMsgProcess::SetPackedData(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = bswap32(a2[1]);
  v4[0] = bswap32(*a2);
  v4[1] = v2;
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _DWORD *, unsigned int *))(*(void *)result + 16))(result, v4, a2);
  }
  return result;
}

{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  _WORD v6[6];

  unsigned int v2 = *a2;
  uint64_t v3 = a2[1];
  v6[0] = *a2;
  v6[1] = (__int16)(v2 >> 14) >> 2;
  v6[4] = v3;
  v6[5] = (__int16)(v3 >> 14) >> 2;
  int v4 = a2[2];
  _DWORD v6[2] = v4;
  v6[3] = (__int16)(v4 >> 14) >> 2;
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _WORD *, unsigned int *))(*(void *)result + 16))(result, v6, a2);
  }
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  int v4 = 0;
  LOBYTE(v8) = 0;
  do
  {
    int v5 = (char *)&v8 + v4;
    v5[32] = 0;
    *((_WORD *)v5 + 17) = 0;
    v4 += 4;
  }
  while (v4 != 76);
  BlueFin::BdNavMsgMgr::ProcessHealth(a1 + 8, 1, a2, (uint64_t)&v8, 0);
  int v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t *, unsigned int *))(*(void *)v6 + 16))(v6, &v8, a2);
  }
  BlueFin::BdNavMsgMgr::ProcessHealth(a1 + 8, 2, a2, (uint64_t)&v8, 0);
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, unsigned int *))(*(void *)result + 16))(result, &v8, a2);
  }
  return result;
}

uint64_t BlueFin::GeoMsgProcess::SetPackedData(uint64_t a1, int *a2)
{
  int v3 = a2[1];
  int v2 = a2[2];
  int v4 = *a2;
  v6[0] = v2 >> 8;
  v6[1] = v3;
  char v10 = BYTE1(v4);
  char v7 = BYTE2(v4);
  char v8 = v4;
  char v9 = v2;
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, _DWORD *, int *))(*(void *)result + 16))(result, v6, a2);
  }
  return result;
}

void BlueFin::GeoMsgProcess::SetDataSubFrmMeas(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, signed __int32 a11, uint64_t a12, int a13, uint64_t a14, int a15, char a16, __int16 a17, unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  a49 = *MEMORY[0x263EF8340];
  BYTE2(v94) = -1;
  int v50 = *a2;
  BYTE1(v94) = v50;
  LOBYTE(v94) = 0;
  if ((v50 - 6) >= 0xFBu)
  {
    if (v50 == 1) {
      BYTE2(v94) = *(_DWORD *)(a3 + 4) / 3u
    }
                 - 10 * (((1717986919 * (unint64_t)(*(_DWORD *)(a3 + 4) / 3u)) >> 32) >> 2)
                 + 1;
    int v53 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    BlueFin::BdNavMsgMgr::FillRawNavSubframe(a1 + 8, (uint64_t)a2, (uint64_t)&v94, v53);
    if (BYTE1(v94) == 1 && v94 == 1 && (v96.i32[0] & 0x3E000) == 0x4000)
    {
      unsigned __int32 v54 = ((unsigned __int32)v96.i32[1] >> 13) & 0x1FFF;
      uint64_t v55 = *(void *)(a1 + 56);
      if (v55) {
        (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v55 + 16))(v55, *(unsigned __int8 *)(a1 + 308), ((unsigned __int32)v96.i32[1] >> 13) & 0x1FFF, a3);
      }
      uint64_t v56 = *(void *)(a1 + 40);
      if (v56)
      {
        int v57 = *(_DWORD *)(a3 + 4);
        *(_WORD *)(v56 + 8) = v54;
        *(_DWORD *)(v56 + 12) = v57;
      }
      uint64_t v58 = *(void *)(a1 + 48);
      if (v58)
      {
        int v59 = *(_DWORD *)(a3 + 4);
        *(_WORD *)(v58 + 8) = v54;
        *(_DWORD *)(v58 + 12) = v59;
      }
    }
    uint64_t v60 = 0;
    a44 = &a34;
    LOWORD(a19) = 0;
    *(long long *)((char *)&a19 + 4) = 0u;
    *(long long *)((char *)&a20 + 4) = 0u;
    *(long long *)((char *)&a21 + 4) = 0u;
    *(long long *)((char *)&a22 + 4) = 0u;
    *(long long *)((char *)&a23 + 4) = 0u;
    *(long long *)((char *)&a24 + 4) = 0u;
    a25 = 0u;
    a18 = 0;
    a30 = 0;
    do
    {
      uint64_t v61 = &a30 + v60;
      v61[32] = 0;
      *((_WORD *)v61 + 17) = 0;
      v60 += 4;
    }
    while (v60 != 76);
    a15 = 0;
    a14 = 0;
    a13 = 0;
    a12 = 0;
    a11 = 0;
    a10 = 0;
    uint64_t vars8 = 0;
    if (v94 == 1)
    {
      if (BYTE1(v94) == 5)
      {
        unsigned __int32 v67 = ((unsigned __int32)v96.i32[0] >> 10) & 0x7F;
        if (v67 - 121 < 0xFFFFFF88) {
          return;
        }
        if (v67 - 37 >= 0x18 && v67 - 95 > 5)
        {
          a28 = 0;
          a26 = 0u;
          a27 = 0u;
          if ((((unsigned __int32)v96.i32[0] >> 10) & 0x7F) > 0x64)
          {
            if (v67 == 101)
            {
              LODWORD(a14) = (v97.i32[0] << 6) & 0x3FFFC000 | HIWORD(v97.i32[1]) & 0x3FFF;
              HIDWORD(a14) = (v97.i32[1] << 14) & 0x3FC00000 | (v98 >> 8) & 0x3FFFFF;
              a15 = v99 & 0x3FFFFF00 | (v100 >> 22);
              LOWORD(a12) = (v97.i16[0] << 6) & 0xC000 | v97.i16[3] & 0x3FFF;
              WORD1(a12) = (__int16)((unsigned __int32)v97.i32[0] >> 8) >> 2;
              LOWORD(a13) = v98 >> 8;
              HIWORD(a13) = (__int16)(HIDWORD(a14) >> 14) >> 2;
              WORD2(a12) = v99 & 0xFF00 | (v100 >> 22);
              HIWORD(a12) = (__int16)(v99 >> 14) >> 2;
              unsigned int v74 = *(_DWORD **)(a1 + 48);
              if (v74)
              {
                unsigned __int32 v75 = (v95 << 8) & 0xFF000 | ((unsigned __int32)v96.i32[0] >> 18) & 0xFFF;
                if (v75 < 0x93A80) {
                  v74[4] = v75;
                }
                (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v74 + 16))(v74, &a12, &a14);
              }
            }
            else if (v67 == 102)
            {
              LODWORD(a10) = (v96.i32[0] << 14) & 0xC00000 | ((unsigned __int32)v96.i32[1] >> 8) & 0x3FFFFF;
              HIDWORD(a10) = (4 * v97.i32[0]) & 0xFFFFFC00 | ((unsigned __int32)v97.i32[1] >> 20) & 0x3FF;
              a11 = (v97.i32[1] << 12) & 0xFFF00000 | (v98 >> 10) & 0xFFFFF;
              LODWORD(vars8) = a11 >> 8;
              HIDWORD(vars8) = HIDWORD(a10);
              unsigned int v71 = *(_DWORD **)(a1 + 40);
              if (v71)
              {
                unsigned __int32 v72 = (v95 << 8) & 0xFF000 | ((unsigned __int32)v96.i32[0] >> 18) & 0xFFF;
                if (v72 < 0x93A80) {
                  v71[4] = v72;
                }
                (*(void (**)(_DWORD *, uint64_t *, uint64_t *))(*(void *)v71 + 16))(v71, &vars8, &a10);
              }
            }
            return;
          }
          if (v67 == 35)
          {
            BlueFin::BdNavMsgMgr::HealthPacked(a1 + 8, 1, &v94, (int *)&a26);
            BlueFin::BdNavMsgMgr::ProcessHealth(a1 + 8, 1, (unsigned int *)&a26, (uint64_t)&a30, 0);
            uint64_t v73 = *(void *)(a1 + 72);
            if (v73) {
              (*(void (**)(uint64_t, char *, long long *))(*(void *)v73 + 16))(v73, &a30, &a26);
            }
            return;
          }
          if (v67 != 36) {
            return;
          }
          BlueFin::BdNavMsgMgr::HealthPacked(a1 + 8, 2, &v94, (int *)&a26);
          BlueFin::BdNavMsgMgr::ProcessHealth(a1 + 8, 2, (unsigned int *)&a26, (uint64_t)&a30, (unsigned char *)(a1 + 309));
          uint64_t v70 = *(void *)(a1 + 72);
          if (v70) {
            (*(void (**)(uint64_t, char *, long long *))(*(void *)v70 + 16))(v70, &a30, &a26);
          }
        }
        else
        {
          unsigned int v69 = *(unsigned __int8 *)(a1 + 312);
          if (v69 >= 0x1E)
          {
            unsigned int v69 = 0;
            *(unsigned char *)(a1 + 312) = 0;
          }
          BlueFin::BdNavMsgMgr::AlmPacked(a1 + 8, &v94, (int *)(*(void *)(a1 + 1160) + 28 * v69), 0);
          ++*(unsigned char *)(a1 + 312);
          if (*(unsigned char *)(a1 + 311) != 1) {
            return;
          }
        }
        BlueFin::GeoMsgProcess::PublishAlm((BlueFin::GeoMsgProcess *)a1);
        return;
      }
      if (BYTE1(v94) == 1)
      {
        unsigned __int32 v62 = v96.i32[0];
        unsigned __int32 v63 = ((unsigned __int32)v96.i32[0] >> 14) & 0xF;
        if (v63 - 11 >= 0xFFFFFFF6)
        {
          BYTE2(v94) = ((unsigned __int32)v96.i32[0] >> 14) & 0xF;
          unsigned __int32 v64 = v63 - 1;
          switch(v64)
          {
            case 0u:
              __int16 v65 = v97.i16[1];
              unsigned __int32 v66 = (unsigned __int32)v96.i32[1] >> 8;
              *(_DWORD *)(a1 + 1168) = ((unsigned __int32)v96.i32[1] >> 4) & 0x3C00000 | (v96.u8[1] << 26) | ((((unsigned __int32)v97.i32[0] >> 8) & 0x3FF) << 12) | ((unsigned __int32)v97.i32[1] >> 18) & 0xFFC;
              *(_DWORD *)(a1 + 1172) = v65 & 0x3FFC | (v66 << 14);
              goto LABEL_57;
            case 1u:
              __int32 v77 = v97.i32[0];
              *(_DWORD *)(a1 + 1236) = (v96.i32[0] << 18) & 0xFC000000 | ((unsigned __int32)v96.i32[1] >> 4) & 0x3FFFFF0 | ((unsigned __int32)v97.i32[0] >> 26) & 0xF;
              *(_DWORD *)(a1 + 1240) = (v77 << 6) & 0xFFFFC000 | v97.i16[3] & 0x3FFF;
              goto LABEL_57;
            case 2u:
              *(_DWORD *)(a1 + 1176) = (v97.i32[0] << 8) & 0xFFF0000 | (unsigned __int16)((unsigned __int32)v97.i32[1] >> 14);
              goto LABEL_57;
            case 3u:
              __int32 v78 = v97.i32[0];
              *(_DWORD *)(a1 + 1180) = (v96.i32[0] << 18) & 0xFC000000 | ((unsigned __int32)v96.i32[1] >> 4) & 0x3FFFFF0 | ((unsigned __int32)v97.i32[0] >> 26) & 0xF;
              *(_DWORD *)(a1 + 1184) = (v78 << 6) & 0xFFFFC000 | v97.i16[3] & 0x3FFF;
              goto LABEL_57;
            case 4u:
              unsigned __int32 v80 = v96.u32[1];
              unsigned __int32 v79 = v97.i32[0];
              *(_DWORD *)(a1 + 1188) = (v96.i32[0] << 18) & 0xF0000000 | (v97.i32[0] << 6) & 0xFFFC000 | v97.i16[3] & 0x3FFF;
              *(_DWORD *)(a1 + 1192) = ((v79 >> 22) | (v62 << 22)) & 0xC00000FF | (((v80 >> 8) & 0x3FFFFF) << 8);
              goto LABEL_57;
            case 5u:
              *(int8x8_t *)(a1 + 1196) = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)__PAIR64__(v97.u32[1], v96.u32[1]), (uint32x2_t)0xFFFFFFE6FFFFFFFCLL), (int8x8_t)0xF03FFFC00), vand_s8((int8x8_t)vshl_n_s32(v96, 0x12uLL), (int8x8_t)0xFC000000FC000000)), (int8x8_t)vrev64_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(v97, (uint32x2_t)0xFFFFFFF0FFFFFFFCLL), (int8x8_t)0x3FF03FFFFF0)));
              goto LABEL_57;
            case 6u:
              __int32 v81 = v97.i32[0];
              *(_DWORD *)(a1 + 1204) = (v96.i32[0] << 18) & 0xFC000000 | ((unsigned __int32)v96.i32[1] >> 4) & 0x3FFFFF0 | ((unsigned __int32)v97.i32[0] >> 26) & 0xF;
              *(_DWORD *)(a1 + 1208) = (v81 << 6) & 0xFFFFC000 | v97.i16[3] & 0x3FFF;
              goto LABEL_57;
            case 7u:
              __int32 v82 = v97.i32[0];
              *(_DWORD *)(a1 + 1212) = (v96.i32[0] << 20) & 0xF0000000 | ((unsigned __int32)v96.i32[1] >> 2) & 0xFFFFFC0 | HIBYTE(v97.i32[0]) & 0x3F;
              *(_DWORD *)(a1 + 1216) = (v82 << 8) & 0xFFFF0000 | (unsigned __int16)((unsigned __int32)v97.i32[1] >> 14);
              *(_DWORD *)(a1 + 1232) = (v62 >> 12) & 3;
              goto LABEL_57;
            case 8u:
              unsigned __int32 v84 = v96.u32[1];
              unsigned __int32 v83 = v97.i32[0];
              *(_DWORD *)(a1 + 1220) = (v96.i32[0] << 18) & 0xF8000000 | (v97.i32[0] << 6) & 0x7FFC000 | v97.i16[3] & 0x3FFF;
              *(_DWORD *)(a1 + 1224) = ((v83 >> 21) | (v62 << 23)) & 0x800001FF | (((v84 >> 8) & 0x3FFFFF) << 9);
              goto LABEL_57;
            case 9u:
              *(_DWORD *)(a1 + 1228) = ((unsigned __int32)v96.i32[1] >> 15) & 0x7FFC | ((((unsigned __int32)v96.i32[0] >> 8) & 0x3F) << 15);
LABEL_57:
              int v76 = *(_DWORD *)(a1 + 88) | (1 << v64);
              *(_DWORD *)(a1 + 88) = v76;
              break;
            default:
              int v76 = *(_DWORD *)(a1 + 88);
              break;
          }
          if ((~v76 & 0x3FF) == 0)
          {
            __int16 v85 = *(_WORD *)(a1 + 82);
            if ((v85 & 0x1C) == 0xC)
            {
              uint64_t v86 = 0;
              int8x16_t v87 = (_DWORD *)(a1 + 112);
              do
              {
                *((unsigned char *)&a26 + v86++) = (1193047
                                          * (unint64_t)((*v87 >> 18) & 0xFF0 | ((*(v87 - 1) >> 4) << 12))) >> 32;
                v87 += 5;
              }
              while (v86 != 10);
              unint64_t v88 = 0;
              uint64_t v89 = 1;
              while (v88 > 8)
              {
LABEL_67:
                ++v88;
                ++v89;
                if (v88 == 10)
                {
                  BlueFin::GeoMsgProcess::ProcessEph(a1 + 1168, &a19, *(unsigned __int8 *)(a1 + 308));
                  if ((_WORD)a19)
                  {
                    a16 = 1;
                    a17 = 1;
                    *(_DWORD *)(a1 + 1244) = 1;
                    *(unsigned char *)(a1 + 80) = 0;
                    (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
                  }
                  else
                  {
                    *(_WORD *)(a1 + 82) = v85 & 0xFFE3 | 0x10;
                    a16 = 0;
                    a17 = 0;
                    *(_DWORD *)(a1 + 1244) = 0;
                  }
                  uint64_t v91 = *(void *)(a1 + 64);
                  if (v91) {
                    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)v91 + 16))(v91, &a16, a1 + 1244);
                  }
                  uint64_t v92 = *(void *)(a1 + 24);
                  if (v92) {
                    (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v92 + 16))(v92, 0, a1 + 1168, 0);
                  }
                  a18 = __PAIR64__(bswap32(*(_DWORD *)(a1 + 1240)), bswap32(*(_DWORD *)(a1 + 1236)));
                  uint64_t v93 = *(void *)(a1 + 32);
                  if (v93)
                  {
                    if (!a16) {
                      (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(void *)v93 + 16))(v93, &a18, a1 + 1236);
                    }
                  }
                  goto LABEL_78;
                }
              }
              uint64_t v90 = v89;
              while (*((unsigned __int8 *)&a26 + v88) == *((unsigned __int8 *)&a26 + v90))
              {
                if (++v90 == 10) {
                  goto LABEL_67;
                }
              }
LABEL_78:
              *(unsigned char *)(a1 + 80) = 0;
              (*(void (**)(uint64_t))(*(void *)a1 + 152))(a1);
            }
          }
        }
      }
    }
  }
}

double BlueFin::GeoMsgProcess::ResetSfState(BlueFin::GeoMsgProcess *this)
{
  if (*((unsigned char *)this + 80) != 1)
  {
    *((unsigned char *)this + 80) = 1;
    uint64_t v1 = (char *)this + 80;
    double result = 0.0;
    *(_OWORD *)(v1 + 1) = 0u;
    *(_OWORD *)(v1 + 17) = 0u;
    *(_OWORD *)(v1 + 33) = 0u;
    *(_OWORD *)(v1 + 49) = 0u;
    *(_OWORD *)(v1 + 65) = 0u;
    *(_OWORD *)(v1 + 81) = 0u;
    *(_OWORD *)(v1 + 97) = 0u;
    *(_OWORD *)(v1 + 113) = 0u;
    *(_OWORD *)(v1 + 129) = 0u;
    *(_OWORD *)(v1 + 145) = 0u;
    *(_OWORD *)(v1 + 161) = 0u;
    *(_OWORD *)(v1 + 177) = 0u;
    *(_OWORD *)(v1 + 193) = 0u;
    *(_OWORD *)(v1 + 209) = 0u;
    *((_DWORD *)v1 + 56) = 0;
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::GeoMsgProcess::ResetSfState(uint64_t this)
{
  if (*(unsigned char *)(this + 72) != 1)
  {
    *(_OWORD *)(this + 73) = 0u;
    this += 73;
    *(unsigned char *)(this - 1) = 1;
    *(_OWORD *)(this + 16) = 0u;
    *(_OWORD *)(this + 32) = 0u;
    *(_OWORD *)(this + 48) = 0u;
    *(_OWORD *)(this + 64) = 0u;
    *(_OWORD *)(this + 80) = 0u;
    *(_OWORD *)(this + 96) = 0u;
    *(_OWORD *)(this + 112) = 0u;
    *(_OWORD *)(this + 128) = 0u;
    *(_OWORD *)(this + 144) = 0u;
    *(_OWORD *)(this + 160) = 0u;
    *(_OWORD *)(this + 176) = 0u;
    *(_OWORD *)(this + 192) = 0u;
    *(_OWORD *)(this + 208) = 0u;
    *(_DWORD *)(this + 223) = 0;
  }
  return this;
}

uint64_t BlueFin::GeoMsgProcess::EbwRestoreSFWords(uint64_t result, uint64_t a2, _WORD *a3)
{
  if (*(unsigned char *)(a2 + 1) == 1)
  {
    uint64_t v5 = result;
    double result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)result + 136))(result, 1, *(unsigned __int8 *)(a2 + 2));
    int v6 = *(unsigned __int8 *)(a2 + 2);
    unsigned int v7 = v6 - 1;
    if ((v6 - 1) > 4)
    {
      if ((v6 - 6) > 4) {
        return result;
      }
      uint64_t v10 = 0;
      char v11 = 5 * v6 - 30;
      uint64_t v12 = v5 + 20 * v7 + 108;
      do
      {
        if ((*(_DWORD *)(v5 + 92) >> (v11 + v10))) {
          *(_DWORD *)(a2 + 4 + 4 * v10) = *(_DWORD *)(v12 + 4 * v10);
        }
        ++v10;
      }
      while (v10 != 5);
      int v9 = *(_DWORD *)(v5 + 92) >> v11;
    }
    else
    {
      for (uint64_t i = 0; i != 5; ++i)
      {
        if ((*(_DWORD *)(v5 + 96) >> (5 * v6 - 5 + i))) {
          *(_DWORD *)(a2 + 4 + 4 * i) = *(_DWORD *)(v5 + 20 * v7 + 108 + 4 * i);
        }
      }
      int v9 = *(_DWORD *)(v5 + 96) >> (5 * v6 - 5);
    }
    *a3 = result & v9;
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::GeoMsgProcess::EbwRestoreSFWords(uint64_t a1, uint64_t a2, _WORD *a3)
{
  return BlueFin::GeoMsgProcess::EbwRestoreSFWords(a1 - 8, a2, a3);
}

uint64_t BlueFin::GeoMsgProcess::EphUpdateProcess(uint64_t result, uint64_t a2, _WORD *a3)
{
  if (*(unsigned char *)(a2 + 1) == 1)
  {
    int v3 = (unsigned __int16)*a3;
    if ((v3 & 2) != 0)
    {
      if (((*(_DWORD *)(a2 + 8) >> 14) & 0xFu) - 11 < 0xFFFFFFF6) {
        unsigned __int8 v4 = -1;
      }
      else {
        unsigned __int8 v4 = (*(_DWORD *)(a2 + 8) >> 14) & 0xF;
      }
    }
    else
    {
      unsigned __int8 v4 = *(unsigned char *)(a2 + 2);
    }
    if ((v4 - 11) >= 0xF6u)
    {
      int v5 = *(unsigned __int8 *)(result + 81);
      if ((v3 & 8) != 0 && v4 == 7)
      {
        int v6 = (*(_DWORD *)(a2 + 16) >> 12) & 0x3FFF8;
        HIDWORD(v7) = -2023406815 * v6;
        LODWORD(v7) = -2023406815 * v6;
        if ((v7 >> 4) >= 0x123457)
        {
          HIDWORD(v8) = -2023406815 * (v6 - 656);
          LODWORD(v8) = HIDWORD(v8);
          if ((v8 >> 4) >= 0x123457)
          {
            HIDWORD(v9) = -2023406815 * (v6 - 1312);
            LODWORD(v9) = HIDWORD(v9);
            if ((v9 >> 4) > 0x123456) {
              goto LABEL_21;
            }
          }
        }
        if (v5 == 3)
        {
          if (v6 == *(_DWORD *)(result + 84)) {
            goto LABEL_21;
          }
        }
        else if (v5 == 1)
        {
          *(unsigned char *)(result + 81) = 3;
          *(_DWORD *)(result + 84) = v6;
LABEL_21:
          uint64_t v10 = 0;
          int v11 = 0;
          int v12 = 0;
          unsigned int v13 = v4;
          *(unsigned char *)(a2 + 2) = v4;
          int v14 = ~(1 << (v4 - 1));
          uint64_t v15 = a2 + 4;
          uint64_t v16 = result + 20 * (v4 - 1) + 108;
          char v17 = 5 * v4;
          char v18 = 5 * v4 - 5;
          char v19 = v17 - 30;
          while (1)
          {
            int v20 = 1 << v10;
            if (v13 <= 5) {
              int v11 = 1 << (v18 + v10);
            }
            else {
              int v12 = 1 << (v19 + v10);
            }
            if ((v20 & v3) == 0) {
              goto LABEL_40;
            }
            int v21 = *(_DWORD *)(result + 100);
            if ((v21 & v12) != 0) {
              goto LABEL_40;
            }
            int v22 = *(_DWORD *)(result + 104);
            if ((v22 & v11) != 0) {
              goto LABEL_40;
            }
            int v23 = *(_DWORD *)(result + 92);
            if ((v23 & v12) == 0)
            {
              int v24 = *(_DWORD *)(result + 96);
              if ((v24 & v11) == 0) {
                goto LABEL_39;
              }
            }
            if ((unsigned __int16)v10 - 2 >= 3)
            {
              if ((unsigned __int16)v10 == 1)
              {
                if (((*(_DWORD *)(v15 + 4 * v10) ^ *(_DWORD *)(v16 + 4 * v10)) & 0x3FF00) == 0) {
                  goto LABEL_38;
                }
              }
              else if ((_WORD)v10 || ((*(_DWORD *)(v15 + 4 * v10) ^ *(_DWORD *)(v16 + 4 * v10)) & 0x3FFFF000) == 0)
              {
LABEL_38:
                *(_DWORD *)(result + 100) = v21 | v12;
                *(_DWORD *)(result + 104) = v22 | v11;
                int v24 = *(_DWORD *)(result + 96);
LABEL_39:
                *(_DWORD *)(v16 + 4 * v10) = *(_DWORD *)(v15 + 4 * v10);
                *(_DWORD *)(result + 92) = v23 | v12;
                *(_DWORD *)(result + 96) = v24 | v11;
                goto LABEL_40;
              }
            }
            else if (((*(_DWORD *)(v15 + 4 * v10) ^ *(_DWORD *)(v16 + 4 * v10)) & 0x3FFFFFFF) == 0)
            {
              goto LABEL_38;
            }
            int v25 = *(_DWORD *)(result + 96);
            *a3 = v3 & ~(_WORD)v20;
            *(_DWORD *)(result + 92) = v23 & ~v12;
            *(_DWORD *)(result + 96) = v25 & ~v11;
            *(_WORD *)(result + 82) = 4;
            *(_DWORD *)(result + 88) &= v14;
            int v3 = (unsigned __int16)*a3;
LABEL_40:
            if (++v10 == 5) {
              goto LABEL_41;
            }
          }
        }
        *(unsigned char *)(result + 81) = 3;
        *(_DWORD *)(result + 84) = v6;
      }
      else
      {
        if (*(unsigned char *)(result + 81)) {
          goto LABEL_21;
        }
        *(unsigned char *)(result + 81) = 1;
      }
      *(_OWORD *)(result + 108) = 0u;
      *(void *)(result + 96) = 0;
      *(void *)(result + 88) = 0;
      *(_DWORD *)(result + 104) = 0;
      *(_WORD *)(result + 82) = 4;
      *(_OWORD *)(result + 124) = 0u;
      *(_OWORD *)(result + 140) = 0u;
      *(_OWORD *)(result + 156) = 0u;
      *(_OWORD *)(result + 172) = 0u;
      *(_OWORD *)(result + 188) = 0u;
      *(_OWORD *)(result + 204) = 0u;
      *(_OWORD *)(result + 220) = 0u;
      *(_OWORD *)(result + 236) = 0u;
      *(_OWORD *)(result + 252) = 0u;
      *(_OWORD *)(result + 268) = 0u;
      *(_OWORD *)(result + 284) = 0u;
      *(void *)(result + 300) = 0;
      int v3 = (unsigned __int16)*a3;
      goto LABEL_21;
    }
LABEL_41:
    __int16 v26 = *(_WORD *)(result + 82);
    int v27 = v26 & 0x1C;
    if (v27 != 16 && *(_DWORD *)(result + 92) == 0x1FFFFFF && *(_DWORD *)(result + 96) == 0x1FFFFFF)
    {
      if (v27 != 12)
      {
        v26 |= 8u;
        if (v27 != 4) {
          __int16 v26 = 8;
        }
        *(_WORD *)(result + 82) = v26;
      }
      if (*(_DWORD *)(result + 100) == 0x1FFFFFF && (v26 & 0x1C) == 0xC && *(_DWORD *)(result + 104) == 0x1FFFFFF) {
        *(_WORD *)(result + 82) = v26 & 0xFFE3 | 0x10;
      }
    }
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::GeoMsgProcess::EphUpdateProcess(uint64_t a1, uint64_t a2, _WORD *a3)
{
  return BlueFin::GeoMsgProcess::EphUpdateProcess(a1 - 8, a2, a3);
}

uint64_t BlueFin::GeoMsgProcess::EbwCheckSfOk(_DWORD *a1, int a2, unsigned char *a3)
{
  uint64_t v6 = a3[2];
  *a3 = 0;
  uint64_t result = (*(uint64_t (**)(_DWORD *, void, uint64_t))(*(void *)a1 + 136))(a1, a3[1], v6);
  int v8 = a3[1];
  if ((v8 - 2) < 4)
  {
    if (result != a2) {
      return result;
    }
    goto LABEL_3;
  }
  if (v8 == 1)
  {
    if ((v6 - 1) > 4)
    {
      if ((v6 - 6) > 4) {
        return result;
      }
      unsigned int v9 = a1[23];
      char v10 = 5 * v6 - 30;
    }
    else
    {
      unsigned int v9 = a1[24];
      char v10 = 5 * v6 - 5;
    }
    if ((result & ~(v9 >> v10)) == 0) {
LABEL_3:
    }
      *a3 = 1;
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::GeoMsgProcess::EbwCheckSfOk(uint64_t a1, int a2, unsigned char *a3)
{
  return BlueFin::GeoMsgProcess::EbwCheckSfOk((_DWORD *)(a1 - 8), a2, a3);
}

uint64_t BlueFin::GeoMsgProcess::ProcessEph(uint64_t a1, _DWORD *a2, int a3)
{
  a2[4] = (*(_DWORD *)a1 >> 22) & 0xF;
  a2[1] = (*(_DWORD *)a1 >> 26) & 0x1F;
  a2[3] = *(_DWORD *)a1 >> 31;
  a2[2] = (*(_DWORD *)(a1 + 16) >> 30) & 0xFFFFFFE3 | (4 * (*(_DWORD *)(a1 + 12) & 7));
  a2[6] = *(_DWORD *)(a1 + 4) >> 19;
  a2[5] = (*(_DWORD *)(a1 + 4) >> 2) & 0x1FFFF;
  HIDWORD(v4) = *(_DWORD *)(a1 + 8);
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  a2[8] = (int)(v4 >> 4) >> 10;
  a2[7] = (int)(*(_DWORD *)(a1 + 12) << 18) >> 21;
  a2[9] = (char)(*(int *)(a1 + 8) >> 4);
  a2[10] = (int)(*(_DWORD *)a1 << 10) >> 22;
  a2[11] = (int)(*(_DWORD *)a1 << 20) >> 22;
  HIDWORD(v4) = *(_DWORD *)(a1 + 36);
  LODWORD(v4) = *(_DWORD *)(a1 + 40);
  a2[22] = (v4 >> 6) >> 15;
  a2[21] = *(_DWORD *)(a1 + 32);
  HIDWORD(v4) = *(_DWORD *)(a1 + 20);
  LODWORD(v4) = *(_DWORD *)(a1 + 28);
  a2[20] = v4 >> 10;
  a2[13] = *(_DWORD *)(a1 + 24);
  a2[12] = (__int16)(*(int *)(a1 + 16) >> 14);
  HIDWORD(v4) = *(_DWORD *)(a1 + 16);
  LODWORD(v4) = *(_DWORD *)(a1 + 20);
  a2[17] = (int)(v4 >> 14) >> 14;
  a2[15] = (int)(*(_DWORD *)(a1 + 44) << 9) >> 14;
  HIDWORD(v4) = *(_DWORD *)(a1 + 44);
  LODWORD(v4) = *(_DWORD *)(a1 + 48);
  a2[14] = (int)(v4 >> 5) >> 14;
  a2[16] = (16 * *(_DWORD *)(a1 + 20)) >> 14;
  a2[23] = *(_DWORD *)(a1 + 56);
  a2[25] = *(_WORD *)(a1 + 62) & 0x1F | (32 * *(_DWORD *)(a1 + 52));
  a2[18] = (int)(*(_DWORD *)(a1 + 36) << 8) >> 14;
  a2[27] = (int)(*(_DWORD *)(a1 + 60) << 16) >> 18;
  a2[24] = (*(_DWORD *)(a1 + 40) << 11) | ((*(_DWORD *)(a1 + 64) & 3) << 9) | (*(_DWORD *)(a1 + 44) >> 23);
  HIDWORD(v4) = *(_DWORD *)(a1 + 28);
  LODWORD(v4) = *(_DWORD *)(a1 + 36);
  a2[19] = (int)(v4 >> 10) >> 14;
  HIDWORD(v4) = *(_DWORD *)(a1 + 48);
  LODWORD(v4) = *(_DWORD *)(a1 + 52);
  a2[26] = (int)(v4 >> 19) >> 8;
  BOOL v6 = (a3 - 1) < 5 || (a3 - 59) < 5;
  uint64_t result = BlueFin::BdNavMsgMgr::EphRangeCheck(a2, v6);
  *(_WORD *)a2 = result;
  return result;
}

void BlueFin::GeoMsgProcess::PublishAlm(BlueFin::GeoMsgProcess *this)
{
  if (*((unsigned char *)this + 311) == 1)
  {
    v7[0] = 0;
    int v8 = 0;
    __int16 v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    memset(v12, 0, 14);
    for (unsigned __int8 i = *((unsigned char *)this + 312); i; *((unsigned char *)this + 312) = i)
    {
      uint64_t v3 = *((void *)this + 145);
      BlueFin::BdNavMsgMgr::ProcessAlm((uint64_t)this + 8, (int *)(v3 + 28 * (i - 1)), (uint64_t)v7);
      if (*((unsigned __int8 *)this + 309) == v9)
      {
        int v4 = *((unsigned __int8 *)this + 310);
        int v5 = i - 1;
        *(_DWORD *)(v3 + 28 * v5 + 24) = v4;
        WORD2(v12[1]) = v4;
        uint64_t v6 = *((void *)this + 2);
        if (v6)
        {
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v6 + 16))(v6, v7, v3 + 28 * v5);
          unsigned __int8 i = *((unsigned char *)this + 312);
        }
      }
      --i;
    }
  }
}

uint64_t BlueFin::GeoMsgProcess::GetSFWordMask(BlueFin::GeoMsgProcess *this, int a2, int a3)
{
  if (a3 == 10) {
    unsigned int v3 = 7;
  }
  else {
    unsigned int v3 = 31;
  }
  if (a2 == 1) {
    return v3;
  }
  else {
    return 1023;
  }
}

void BlueFin::NonGeoMsgProcess::~NonGeoMsgProcess(BlueFin::NonGeoMsgProcess *this)
{
}

uint64_t BlueFin::NonGeoMsgProcess::GetSFWordMask(BlueFin::NonGeoMsgProcess *this)
{
  return 1023;
}

void BlueFin::NonGeoMsgProcess::Reset(BlueFin::NonGeoMsgProcess *this)
{
  *((unsigned char *)this + 80) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_DWORD *)((char *)this + 221) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  bzero(*((void **)this + 137), 0x348uLL);
}

void non-virtual thunk to'BlueFin::NonGeoMsgProcess::~NonGeoMsgProcess(BlueFin::NonGeoMsgProcess *this)
{
}

void BlueFin::GeoMsgProcess::~GeoMsgProcess(BlueFin::GeoMsgProcess *this)
{
}

void BlueFin::GeoMsgProcess::Reset(BlueFin::GeoMsgProcess *this)
{
  *((unsigned char *)this + 80) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_DWORD *)((char *)this + 309) = 0;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  bzero(*((void **)this + 145), 0x348uLL);
}

void non-virtual thunk to'BlueFin::GeoMsgProcess::~GeoMsgProcess(BlueFin::GeoMsgProcess *this)
{
}

unsigned int *BlueFin::BdWordParity::BCHDecodeWordProcess(unsigned int *this, unsigned int *a2)
{
  unsigned int v2 = *this;
  if (a2)
  {
    int8x16_t v3 = 0uLL;
    int8x16_t v4 = (int8x16_t)(v2 & 0xC0000000);
    int32x4_t v5 = (int32x4_t)xmmword_263BB3660;
    int32x4_t v6 = (int32x4_t)xmmword_263BB2A60;
    int8x16_t v7 = (int8x16_t)vdupq_n_s32(v2);
    int v8 = -4;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    v10.i64[0] = 0x400000004;
    v10.i64[1] = 0x400000004;
    v11.i64[0] = 0x800000008;
    v11.i64[1] = 0x800000008;
    do
    {
      int8x16_t v12 = v4;
      int8x16_t v13 = v3;
      int8x16_t v4 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v9, (uint32x4_t)v5), v7), (uint32x4_t)vsubq_s32(v9, v6)), v4);
      int8x16_t v3 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)v9, (uint32x4_t)(*(_OWORD *)&v5 | __PAIR128__(0x100000001, 0x100000001))), v7), (uint32x4_t)vnegq_s32(v6)), v3);
      int32x4_t v6 = vaddq_s32(v6, v10);
      v8 += 4;
      int32x4_t v5 = vaddq_s32(v5, v11);
    }
    while (v8 != 12);
    v14.i64[0] = 0xF0000000FLL;
    v14.i64[1] = 0xF0000000FLL;
    int8x16_t v15 = (int8x16_t)vcgtq_u32(v14, (uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(0xCu), (int8x16_t)xmmword_263BB1CB0));
    int8x16_t v16 = vbslq_s8(v15, v4, v12);
    int8x16_t v17 = vbslq_s8(v15, v3, v13);
    *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    __int32 v18 = v16.i32[0] | v16.i32[1];
    unsigned int v19 = (v16.i32[0] | v16.i32[1]) >> 4;
    *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
    unsigned int v2 = v18 & 0xC000000F | ((v19 & 0x7FF) << 8) & 0xC007FFFF | (16 * ((v16.i8[0] | v16.i8[4]) & 0xF)) | ((((v16.i32[0] | v16.i32[1]) >> 4) & 0x7FF) << 19);
  }
  *this = v2 | 0x40000000;
  return this;
}

BOOL BlueFin::BdWordParity::ParityCheck(unint64_t this, unsigned int *a2)
{
  int v2 = (int)a2;
  unsigned int v10 = this;
  if ((this & 0x40000000) == 0)
  {
    BlueFin::BdWordParity::BCHDecodeWordProcess(&v10, a2);
    this = v10;
  }
  if (v2)
  {
    char v3 = this;
    int8x16_t v4 = BlueFin::BCHTab9_12;
    char v5 = BlueFin::BCHTab1_4[(this >> 15) & 0xF] ^ (16
                                                 * (BlueFin::BCHTab5_8[(this >> 22) & 0xF] ^ BlueFin::BCHTab1_4[(this >> 26) & 0xF] ^ BlueFin::BCHTab9_12[(this >> 18) & 0xELL]));
    int32x4_t v6 = &BlueFin::BCHTab5_8[(this >> 11) & 0xF];
    int v7 = 14;
    char v8 = 7;
  }
  else
  {
    char v3 = this & 0xF;
    int32x4_t v6 = &BlueFin::BCHTab9_12[(this >> 3) & 0xE];
    char v5 = BlueFin::BCHTab5_8[(this >> 7) & 0xF];
    int v7 = 15;
    char v8 = 11;
    int8x16_t v4 = BlueFin::BCHTab1_4;
  }
  return v3 == (char)(*v6 ^ v5 ^ v4[(this >> v8) & v7]);
}

uint64_t BlueFin::BdNavMsgMgr::FillRawNavSubframe(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned __int16 v13 = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  char v8 = (BlueFin::BdNavMsgMgr *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)a1 + 24))(a1, a3, &v13);
  uint64_t result = BlueFin::BdNavMsgMgr::SfSaveRecvWords(v8, (const unsigned int *)(a2 + 4), (unsigned int *)(a3 + 4), &v13);
  if ((a4 & ~v13) != 0 || (v13 & 1) == 0) {
    goto LABEL_9;
  }
  int v10 = (*(_DWORD *)(a3 + 4) >> 12) & 7;
  unsigned int v11 = v10 - 1;
  if ((v10 - 1) >= 5) {
    int v10 = 255;
  }
  if (v11 <= 4 && v10 == *(unsigned __int8 *)(a3 + 1))
  {
    (*(void (**)(uint64_t, uint64_t, unsigned __int16 *))(*(void *)a1 + 32))(a1, a3, &v13);
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 40))(a1, v13, a3);
  }
  else
  {
LABEL_9:
    *(unsigned char *)a3 = 0;
  }
  return result;
}

BOOL BlueFin::BdNavMsgMgr::SfSaveRecvWords(BlueFin::BdNavMsgMgr *this, const unsigned int *a2, unsigned int *a3, unsigned __int16 *a4)
{
  uint64_t v7 = 0;
  int v8 = *a4;
  do
  {
    unsigned int v9 = a2[v7];
    BOOL result = BlueFin::BdWordParity::ParityCheck(v9, (unsigned int *)(__int16)v7);
    if (result)
    {
      a3[v7] = v9;
      v8 |= 1 << v7;
    }
    else
    {
      v8 &= ~(1 << v7);
    }
    ++v7;
  }
  while (v7 != 10);
  *a4 = v8;
  return result;
}

void BlueFin::BdNavMsgMgr::AlmPacked(uint64_t a1, _DWORD *a2, int *a3, int a4)
{
  int v4 = a2[2] << 14;
  int v5 = v4 & 0x7F000000;
  if (a4) {
    int v5 = (v4 & 0x7F000000) + 402653184;
  }
  *a3 = v4 & 0xC00000 | (a2[3] >> 8) & 0x3FFFFF | v5;
  a3[1] = (2 * a2[4]) & 0x7FFFFE00 | (a2[6] >> 11) & 0x1FF;
  a3[2] = (4 * a2[5]) & 0xFFFFFC00 | (a2[6] >> 20) & 0x3FF;
  a3[3] = (a2[6] << 21) & 0xE0000000 | (a2[7] >> 1) & 0x1FFFFF80 | (a2[8] >> 23) & 0x7F;
  a3[4] = (4 * a2[8]) & 0x1FFFC00 | (a2[9] >> 20) & 0x3FF;
  a3[5] = (a2[9] << 12) & 0xFFF00000 | (a2[10] >> 10) & 0xFFFFF;
}

void BlueFin::BdNavMsgMgr::HealthPacked(uint64_t a1, int a2, _DWORD *a3, int *a4)
{
  if (a2 == 2)
  {
    int v6 = (a3[2] << 17) & 0x6000000 | (a3[3] >> 5) & 0x1FFFFF8 | (a3[4] >> 27) & 7;
    a4[6] = v6;
    a4[6] = a3[8] & 0x38000000 | ((a3[7] >> 13) << 30) | v6;
    a4[7] = (32 * a3[4]) & 0xFFFFE000 | (a3[5] >> 17) & 0x1FFF;
    a4[8] = (a3[6] >> 7) & 0x7FFFFE | ((unsigned __int16)(a3[5] >> 8) << 23);
    unsigned int v4 = ((a3[7] >> 15) | (a3[7] << 19)) & 0xF8007FFF;
    uint64_t v5 = 9;
  }
  else
  {
    if (a2 != 1) {
      return;
    }
    *a4 = (a3[2] << 17) & 0x6000000 | (a3[3] >> 5) & 0x1FFFFF8 | (a3[4] >> 27) & 7;
    a4[1] = (32 * a3[4]) & 0xFFFFE000 | (a3[5] >> 17) & 0x1FFF;
    a4[2] = (a3[6] >> 7) & 0x7FFFFE | ((unsigned __int16)(a3[5] >> 8) << 23);
    a4[3] = (4 * a3[7]) & 0xFFFFFC00 | (a3[8] >> 20) & 0x3FF;
    a4[4] = (a3[8] << 12) & 0xFFF00000 | (a3[9] >> 10) & 0xFFFFF;
    unsigned int v4 = a3[10] & 0x3FFF8000 | (BYTE1(a3[9]) << 30);
    uint64_t v5 = 5;
  }
  a4[v5] = v4;
}

void BlueFin::BdNavMsgMgr::ProcessAlm(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v3 = *a2;
  int v4 = HIBYTE(*a2) & 0x7F;
  if ((v4 - 1) < 0x1E)
  {
    char v5 = -1;
LABEL_7:
    *(unsigned char *)a3 = v5 + v4;
    goto LABEL_8;
  }
  if ((v4 - 37) < 0x18)
  {
    char v5 = -37;
    goto LABEL_7;
  }
  if ((v4 - 95) <= 5)
  {
    char v5 = -71;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a3 + 20) = v3 & 0xFFFFFF;
  *(_DWORD *)(a3 + 4) = ((a2[2] << 24) | ((a2[1] & 0x1FFu) << 15)) >> 15;
  unsigned int v6 = a2[1];
  int v7 = a2[2];
  *(_WORD *)(a3 + 36) = (__int16)(v6 >> 15) >> 5;
  *(_WORD *)(a3 + 38) = (__int16)(v6 >> 4) >> 5;
  *(_DWORD *)(a3 + 24) = v7 >> 8;
  *(_DWORD *)(a3 + 12) = *((__int16 *)a2 + 7);
  *(_WORD *)(a3 + 8) = *((unsigned __int8 *)a2 + 13);
  *(_DWORD *)(a3 + 32) = a2[5] << 8 >> 8;
  HIDWORD(v8) = a2[4];
  LODWORD(v8) = a2[5];
  *(_DWORD *)(a3 + 28) = (int)(v8 >> 16) >> 8;
  *(_DWORD *)(a3 + 16) = (int)((a2[4] >> 1) | (a2[3] << 24)) >> 15;
}

void BlueFin::BdNavMsgMgr::ProcessHealth(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, unsigned char *a5)
{
  if (a2 == 2)
  {
    uint64_t v12 = *(void *)(a4 + 112);
    *(unsigned char *)uint64_t v12 = 20;
    unsigned int v13 = a3[6];
    unsigned int v14 = a3[7];
    *(_WORD *)(v12 + 2) = (v13 >> 18) & 0x1FF;
    *(unsigned char *)(v12 + 4) = 21;
    *(_WORD *)(v12 + 6) = (v13 >> 9) & 0x1FF;
    *(unsigned char *)(v12 + 8) = 22;
    *(_WORD *)(v12 + 10) = v13 & 0x1FF;
    *(unsigned char *)(v12 + 12) = 23;
    *(_WORD *)(v12 + 14) = v14 >> 23;
    *(unsigned char *)(v12 + 16) = 24;
    *(_WORD *)(v12 + 18) = (v14 >> 14) & 0x1FF;
    *(unsigned char *)(v12 + 20) = 25;
    *(_WORD *)(v12 + 22) = (v14 >> 5) & 0x1FF;
    *(unsigned char *)(v12 + 24) = 26;
    unsigned int v16 = a3[8];
    unsigned int v15 = a3[9];
    *(_WORD *)(v12 + 26) = (v16 >> 28) & 0xF | (16 * (v14 & 0x1F));
    *(unsigned char *)(v12 + 28) = 27;
    *(_WORD *)(v12 + 30) = (v16 >> 19) & 0x1FF;
    *(unsigned char *)(v12 + 32) = 28;
    *(_WORD *)(v12 + 34) = (v16 >> 10) & 0x1FF;
    *(unsigned char *)(v12 + 36) = 29;
    *(_WORD *)(v12 + 38) = (v16 >> 1) & 0x1FF;
    *(unsigned char *)(v12 + 40) = 30;
    *(_WORD *)(v12 + 42) = (v15 >> 6) & 0x1FF;
    *(unsigned char *)a4 = 11;
    if (a5)
    {
      *a5 = HIBYTE(v15) & 0xF8 | (v13 >> 27) & 7;
      a5[1] = __PAIR64__(v15, v13) >> 30;
      a5[2] = 1;
    }
  }
  else if (a2 == 1)
  {
    uint64_t v5 = *(void *)(a4 + 112);
    *(unsigned char *)uint64_t v5 = 1;
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    *(_WORD *)(v5 + 2) = (*a3 >> 18) & 0x1FF;
    *(unsigned char *)(v5 + 4) = 2;
    *(_WORD *)(v5 + 6) = (v6 >> 9) & 0x1FF;
    *(unsigned char *)(v5 + 8) = 3;
    *(_WORD *)(v5 + 10) = v6 & 0x1FF;
    *(unsigned char *)(v5 + 12) = 4;
    *(_WORD *)(v5 + 14) = v7 >> 23;
    *(unsigned char *)(v5 + 16) = 5;
    *(_WORD *)(v5 + 18) = (v7 >> 14) & 0x1FF;
    *(unsigned char *)(v5 + 20) = 6;
    *(_WORD *)(v5 + 22) = (v7 >> 5) & 0x1FF;
    *(unsigned char *)(v5 + 24) = 7;
    unsigned int v8 = a3[2];
    unsigned int v9 = a3[3];
    *(_WORD *)(v5 + 26) = (v8 >> 28) & 0xF | (16 * (v7 & 0x1F));
    *(unsigned char *)(v5 + 28) = 8;
    *(_WORD *)(v5 + 30) = (v8 >> 19) & 0x1FF;
    *(unsigned char *)(v5 + 32) = 9;
    *(_WORD *)(v5 + 34) = (v8 >> 10) & 0x1FF;
    *(unsigned char *)(v5 + 36) = 10;
    *(_WORD *)(v5 + 38) = (v8 >> 1) & 0x1FF;
    *(unsigned char *)(v5 + 40) = 11;
    *(_WORD *)(v5 + 42) = v9 >> 23;
    *(unsigned char *)(v5 + 44) = 12;
    *(_WORD *)(v5 + 46) = (v9 >> 14) & 0x1FF;
    *(unsigned char *)(v5 + 48) = 13;
    *(_WORD *)(v5 + 50) = (v9 >> 5) & 0x1FF;
    *(unsigned char *)(v5 + 52) = 14;
    unsigned int v10 = a3[4];
    unsigned int v11 = a3[5];
    *(_WORD *)(v5 + 54) = (v10 >> 28) & 0xF | (16 * (v9 & 0x1F));
    *(unsigned char *)(v5 + 56) = 15;
    *(_WORD *)(v5 + 58) = (v10 >> 19) & 0x1FF;
    *(unsigned char *)(v5 + 60) = 16;
    *(_WORD *)(v5 + 62) = (v10 >> 10) & 0x1FF;
    *(unsigned char *)(v5 + 64) = 17;
    *(_WORD *)(v5 + 66) = (v10 >> 1) & 0x1FF;
    *(unsigned char *)(v5 + 68) = 18;
    *(_WORD *)(v5 + 70) = HIBYTE(v11) | ((v10 & 1) << 8);
    *(unsigned char *)(v5 + 72) = 19;
    *(_WORD *)(v5 + 74) = (v11 >> 15) & 0x1FF;
    *(unsigned char *)a4 = 19;
  }
}

uint64_t BlueFin::BdNavMsgMgr::svd_computeSvClock(uint64_t a1, unint64_t *a2, double *a3, double *a4)
{
  unint64_t v7 = *a2;
  double v8 = *(double *)a2 / 1000.0;
  LODWORD(v7) = *(_DWORD *)(a1 + 8);
  double v9 = v8 - (double)v7;
  double v10 = v9 + 604800.0;
  if (v9 >= -302400.0) {
    double v10 = v9;
  }
  if (v9 <= 302400.0) {
    double v11 = v10;
  }
  else {
    double v11 = v9 + -604800.0;
  }
  double v31 = v11;
  BlueFin::BdNavMsgMgr::setEphemerisConstants((uint64_t)v40, a1);
  double v12 = v41;
  double v38 = v44;
  double v39 = v42;
  double v34 = v45;
  double v35 = v43;
  double v36 = v48;
  double v37 = v46;
  double v28 = v51;
  double v29 = v49;
  double v25 = v52;
  double v26 = v50;
  double v13 = v54;
  double v27 = v53;
  double v32 = v55;
  double v33 = v47;
  HIDWORD(v14) = HIDWORD(v56);
  double v30 = v56;
  double v15 = *(double *)(a1 + 64);
  LODWORD(v14) = *(_DWORD *)(a1 + 12);
  double v16 = v8 - (double)v14;
  double v17 = v16 + 604800.0;
  if (v16 >= -302400.0) {
    double v17 = v16;
  }
  if (v16 <= 302400.0) {
    double v18 = v17;
  }
  else {
    double v18 = v16 + -604800.0;
  }
  __double2 v19 = __sincos_stret(*(double *)(a1 + 88) + v41 * v31);
  double v20 = v19.__sinval * (v19.__sinval * v19.__sinval);
  double v21 = v19.__sinval * (v19.__sinval * v20);
  double v22 = v19.__cosval
      + v29 * (v19.__sinval * v19.__sinval)
      + v19.__sinval * v19.__sinval * v26 * v19.__cosval
      + v28 * (v19.__sinval * v20)
      + v19.__sinval * v20 * v25 * v19.__cosval
      + v27 * (v19.__sinval * v21)
      + v19.__sinval * v21 * v13 * v19.__cosval;
  double v23 = v30 / (v15 * v22 + 1.0);
  *a3 = v32
      * (v19.__cosval * (v35 * v19.__sinval)
       + v39 * v19.__sinval
       + v38 * v20
       + v34 * v20 * v19.__cosval
       + v37 * v21
       + v33 * v21 * v19.__cosval
       + v36 * (v19.__sinval * (v19.__sinval * v21)))
      * (v32
       * v23)
      + *(double *)(a1 + 16)
      + v18 * (*(double *)(a1 + 24) + v18 * *(double *)(a1 + 32));
  *a4 = (v15 + v22) * (v12 * v23) + *(double *)(a1 + 24) + (*(double *)(a1 + 32) + *(double *)(a1 + 32)) * v18;
  return 1;
}

double BlueFin::BdNavMsgMgr::svd_computeSVSatate_D2(uint64_t a1, unint64_t *a2, double *a3)
{
  unint64_t v5 = *a2;
  double v6 = *(double *)a2 / 1000.0;
  LODWORD(v5) = *(_DWORD *)(a1 + 8);
  double v7 = v6 - (double)v5;
  double v8 = v7 + 604800.0;
  if (v7 >= -302400.0) {
    double v8 = v7;
  }
  if (v7 <= 302400.0) {
    double v9 = v8;
  }
  else {
    double v9 = v7 + -604800.0;
  }
  double v67 = v9;
  BlueFin::BdNavMsgMgr::setEphemerisConstants((uint64_t)&v87, a1);
  double v80 = v91;
  double v82 = v89;
  double v72 = v92;
  double v74 = v90;
  double v76 = v95;
  double v78 = v93;
  double v10 = v97;
  double v11 = v99;
  double v63 = v98;
  double v65 = v96;
  double v12 = v101;
  double v61 = v100;
  double v69 = v108;
  double v71 = v94;
  unint64_t v13 = *(unint64_t *)(a1 + 64);
  double v85 = v103;
  double v86 = *(double *)&v13;
  LODWORD(v13) = *(_DWORD *)(a1 + 12);
  double v14 = v6 - (double)v13;
  double v15 = v14 + 604800.0;
  if (v14 >= -302400.0) {
    double v15 = v14;
  }
  if (v14 <= 302400.0) {
    double v16 = v15;
  }
  else {
    double v16 = v14 + -604800.0;
  }
  double v17 = v88;
  double v84 = v88;
  __double2 v18 = __sincos_stret(*(double *)(a1 + 88) + v88 * v67);
  double v19 = v18.__sinval * (v18.__sinval * v18.__sinval);
  double v20 = v18.__sinval * (v18.__sinval * v19);
  double v21 = v18.__cosval
      + v65 * (v18.__sinval * v18.__sinval)
      + v18.__sinval * v18.__sinval * v10 * v18.__cosval
      + v63 * (v18.__sinval * v19)
      + v18.__sinval * v19 * v11 * v18.__cosval
      + v61 * (v18.__sinval * v20)
      + v18.__sinval * v20 * v12 * v18.__cosval;
  double v22 = v69 / (v86 * v21 + 1.0);
  double v23 = v86 * v21 + 1.0;
  double v59 = v23;
  double v24 = v85
      * (v18.__cosval * (v74 * v18.__sinval)
       + v82 * v18.__sinval
       + v80 * v19
       + v72 * v19 * v18.__cosval
       + v78 * v20
       + v71 * v20 * v18.__cosval
       + v76 * (v18.__sinval * (v18.__sinval * v20)));
  double v25 = *(double *)(a1 + 24);
  double v26 = *(double *)(a1 + 32);
  double v27 = v24 * (v85 * v22) + *(double *)(a1 + 16) + v16 * (v25 + v16 * v26);
  a3[6] = v27;
  a3[7] = (v86 + v21) * (v17 * v22) + v25 + (v26 + v26) * v16;
  double v28 = v67 - (v27 - *(double *)(a1 + 40));
  double v29 = v21 * v105 + v24 * v106;
  double v30 = v21 * v106 - v24 * v105;
  double v31 = v30 * (v29 + v29);
  double v32 = v30 * v30 - v29 * v29;
  double v81 = *(double *)(a1 + 136);
  double v83 = v24;
  double v79 = *(double *)(a1 + 128);
  double v33 = v79 * v32 + v81 * v31;
  double v34 = v33 * v33 * -0.5 + 1.0;
  double v73 = v30 * v33 + v29 * v34;
  double v62 = *(double *)(a1 + 152);
  double v64 = v30 * v34 - v29 * v33;
  double v60 = *(double *)(a1 + 144);
  double v35 = v102 / v23 + v32 * v60 + v62 * v31;
  double v36 = v35 * v64;
  double v37 = v35 * v73;
  double v70 = *(double *)(a1 + 168);
  double v66 = *(double *)(a1 + 160);
  double v68 = *(double *)(a1 + 120);
  double v58 = v28;
  double v38 = *(double *)(a1 + 112) + v32 * v66 + v70 * v31 + v68 * v28;
  double v77 = *(double *)(a1 + 104);
  __double2 v39 = __sincos_stret(*(double *)(a1 + 96) + v77 * v28 - v107);
  __double2 v40 = __sincos_stret(v38);
  double v75 = v36 * v39.__cosval - v37 * v40.__cosval * v39.__sinval;
  double v41 = v37 * v40.__cosval * v39.__cosval + v36 * v39.__sinval;
  __double2 v42 = __sincos_stret(v58 * 0.00007292115);
  double v43 = v59 * (v84 * v59) / v104;
  double v44 = v43 + v43;
  double v45 = (v62 * v32 - v60 * v31) * (v43 + v43) + v84 * (v86 * v87) / v85 * v83;
  double v46 = v43 + (v43 + v43) * (v81 * v32 - v79 * v31);
  double v47 = v45 * v64 - v37 * v46;
  double v48 = v36 * v46 + v45 * v73;
  double v49 = v68 + v44 * (v70 * v32 - v66 * v31);
  double v50 = v37 * v40.__sinval * 0.996194698 + v41 * 0.0871557427;
  double v51 = v48 * v40.__cosval - v50 * v49 + v36 * v77;
  double v52 = v47 + -(v37 * v77) * v40.__cosval;
  double v53 = v52 * v39.__cosval - v51 * v39.__sinval;
  double v54 = v39.__cosval * v51 + v52 * v39.__sinval;
  double v55 = v40.__cosval * (v37 * v49) + v48 * v40.__sinval;
  double v56 = v42.__cosval * (v37 * v40.__sinval);
  double result = v42.__cosval * v53
         + -(v42.__sinval * v75) * 0.00007292115
         + (v42.__sinval * v54 + v42.__cosval * v41 * 0.00007292115) * 0.996194698
         + (v42.__sinval * v55 + v56 * 0.00007292115) * -0.0871557427;
  *a3 = v42.__cosval * v75 + v42.__sinval * v41 * 0.996194698 + v42.__sinval * (v37 * v40.__sinval) * -0.0871557427;
  a3[1] = v42.__cosval * v41 * 0.996194698 - v42.__sinval * v75 + v56 * -0.0871557427;
  a3[2] = v50;
  a3[3] = result;
  a3[4] = (v42.__cosval * v55 - v42.__sinval * (v37 * v40.__sinval) * 0.00007292115) * -0.0871557427
        - (v42.__sinval * v53
         + v42.__cosval * v75 * 0.00007292115
         - (v42.__cosval * v54 - v42.__sinval * v41 * 0.00007292115) * 0.996194698);
  a3[5] = v55 * 0.996194698 + v54 * 0.0871557427;
  return result;
}

uint64_t BlueFin::BdSFDemod::RegisterListener(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t BlueFin::BdSFDemod::Update(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v2 = result;
  unint64_t v3 = *a2;
  int v4 = v3 & 0x1F;
  if (*(_WORD *)(result + 58) == 1)
  {
    *(_DWORD *)(result + 48) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 58) = 0;
    int v5 = *(_DWORD *)(result + 36) % 300;
    *(_WORD *)(result + 54) = (unsigned __int16)v5 / 0x1Eu;
    *(_WORD *)(result + 56) = (unsigned __int16)v5 % 0x1Eu;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v85 = 1 << (v4 - 1);
  char v84 = 32 - v4;
  uint64_t v94 = result + 72;
  uint64_t v87 = (v3 >> 5);
  uint64_t v90 = result + 80;
  int v86 = v3 & 0x1F;
  do
  {
    unsigned int v8 = *(_DWORD *)&a2[2 * v6 + 4];
    uint64_t v93 = v6;
    if (v6 == v87)
    {
      if (!v4) {
        return result;
      }
      unsigned int v9 = v85;
      v8 >>= v84;
    }
    else
    {
      unsigned int v9 = 0x80000000;
    }
    int v10 = 2 * v7 - 118;
    int v11 = 20 * v7 - 1180;
    unsigned int v97 = v8;
    do
    {
      int v12 = *(_DWORD *)(v2 + 36);
      int v13 = v12 + 1;
      *(_DWORD *)(v2 + 36) = v12 + 1;
      unsigned int v15 = *(_DWORD *)(v2 + 24);
      int v14 = *(_DWORD *)(v2 + 28);
      int v16 = ((v9 & v8) != 0) | (2 * v15);
      int v17 = 2 * v14;
      int v18 = (2 * v14) | (v15 >> 28) & 1;
      *(_DWORD *)(v2 + 24) = v16;
      *(_DWORD *)(v2 + 28) = v18;
      int v19 = *(_DWORD *)(v2 + 48);
      if (v19)
      {
        unsigned int v20 = (unsigned __int16)++*(_WORD *)(v2 + 56);
        if (v20 < 0x1E) {
          goto LABEL_100;
        }
        int v21 = *(unsigned __int16 *)(v2 + 54);
        LOWORD(v22) = v21 + 1;
        *(_WORD *)(v2 + 54) = v21 + 1;
        if (v19 == 4) {
          goto LABEL_12;
        }
        int v33 = 2 * v15;
        if (*(_DWORD *)(v2 + 64))
        {
          if (v21)
          {
            if (v21 == 1)
            {
              int v34 = v14 & 0x7FFFFFFF;
              if ((v14 & 0x3FF80000) == 0x7680000)
              {
                int v34 = ~v34;
                int v35 = ~v16;
              }
              else
              {
                int v35 = v16;
              }
              int v99 = v35;
              unsigned int v91 = v34;
              unint64_t v36 = v34 | 0x40000000u;
              BlueFin::BdWordParity::BCHDecodeWordProcess((unsigned int *)&v99, (unsigned int *)1);
              *(_DWORD *)(v2 + 84) = v36;
              BOOL v37 = BlueFin::BdWordParity::ParityCheck(v36, 0);
              int v13 = v12 + 1;
              if (v37)
              {
                unsigned int v88 = v99;
                BOOL v38 = BlueFin::BdWordParity::ParityCheck(v99, (unsigned int *)1);
                int v13 = v12 + 1;
                if (v38)
                {
                  unsigned int v39 = (v91 >> 12) & 7;
                  if (v39 - 6 >= 0xFFFFFFFB)
                  {
                    unint64_t v40 = (1431655766 * (unint64_t)((v91 << 8) & 0xFF000 | (v88 >> 18) & 0xFFF)) >> 32;
                    unsigned int v41 = 5 * v40 + v39;
                    if (v41 <= 0xF6180)
                    {
                      if (v39 == 1)
                      {
                        int v42 = v40 - 10 * ((429496730 * (unint64_t)v40) >> 32) + 1;
                        int v43 = (v88 >> 14) & 0xF;
                      }
                      else if (v39 >= 5)
                      {
                        int v42 = v40 - 120 * ((35791395 * (unint64_t)v40) >> 32) + 1;
                        int v43 = (v88 >> 10) & 0x7F;
                      }
                      else
                      {
                        if (v39 != 2) {
                          goto LABEL_74;
                        }
                        int v42 = v40 - 6 * ((715827883 * (unint64_t)v40) >> 32) + 1;
                        int v43 = (v88 >> 13) & 0xF;
                      }
                      if (v42 == v43)
                      {
                        *(unsigned char *)(v2 + 52) = 0;
                        if (v19 != 3)
                        {
                          if (v19 != 2)
                          {
                            if (v19 == 1)
                            {
                              if (v41) {
                                int v71 = v41 - 1;
                              }
                              else {
                                int v71 = 1007999;
                              }
                              int v13 = 300 * v71 + 60;
                              *(_DWORD *)(v2 + 36) = v13;
                              *(_DWORD *)(v2 + 40) = v71;
                              int v56 = *(_DWORD *)(v2 + 32);
                              if (v56 <= 302399999)
                              {
                                int v57 = 302400000;
                                if ((v56 & 0x80000000) == 0) {
                                  goto LABEL_136;
                                }
                              }
                              else
                              {
                                int v57 = -302400000;
                              }
                              goto LABEL_135;
                            }
                            goto LABEL_83;
                          }
                          int v80 = *(_DWORD *)(v2 + 40);
                          if (v80 != v41 - 2 && v80 != v41 + 1007998)
                          {
LABEL_133:
                            int v19 = 0;
LABEL_149:
                            *(_DWORD *)(v2 + 48) = 0;
                            goto LABEL_83;
                          }
                          int v73 = 300 * v80 + 360;
                          int v83 = *(_DWORD *)(v2 + 32) + v73 - (v12 + 1);
                          if (v83 > 302399999) {
                            v83 -= 302400000;
                          }
                          *(_DWORD *)(v2 + 32) = v83 + (v83 < 0 ? 0x12064200 : 0);
                          *(_DWORD *)(v2 + 36) = v73;
                          int v19 = 3;
                          *(_DWORD *)(v2 + 48) = 3;
                          __int16 v75 = *(_WORD *)(v2 + 60) & 0xF5F7;
LABEL_146:
                          *(_WORD *)(v2 + 60) = v75 | 8;
                          int v13 = v73;
                          goto LABEL_83;
                        }
                        if (v41) {
                          int v77 = v41 - 1;
                        }
                        else {
                          int v77 = 1007999;
                        }
                        *(_DWORD *)(v2 + 40) = v77;
                        int v78 = 300 * v77 + 59;
                        if (v12 != v78 && v12 != v78 + 302400000)
                        {
                          int v19 = 0;
                          __int16 v76 = *(_WORD *)(v2 + 60);
LABEL_148:
                          *(_WORD *)(v2 + 60) = (v76 << 8) & 0x800 | v76 & 0xFDF7;
                          goto LABEL_149;
                        }
                        int v19 = 4;
                        *(_DWORD *)(v2 + 48) = 4;
                        __int16 v76 = *(_WORD *)(v2 + 60);
                        goto LABEL_139;
                      }
                    }
                  }
                }
              }
LABEL_74:
              unsigned int v63 = ++*(unsigned char *)(v2 + 52);
              if (v63 >= 5)
              {
                int v19 = 0;
                *(_WORD *)(v2 + 60) = (*(_WORD *)(v2 + 60) << 8) & 0x800 | *(_WORD *)(v2 + 60) & 0xFDF7;
LABEL_80:
                *(_DWORD *)(v2 + 48) = 0;
                *(unsigned char *)(v2 + 52) = 0;
                goto LABEL_83;
              }
              goto LABEL_81;
            }
            unsigned __int8 v60 = *(unsigned char *)(v2 + 52);
LABEL_73:
            if (v60 < 5u) {
              goto LABEL_83;
            }
            goto LABEL_74;
          }
          int v96 = v12 + 1;
          unsigned int v58 = v16;
          if ((v33 & 0x3FF80000) != 0x38900000)
          {
            if ((v33 & 0x3FF80000) != 0x7680000)
            {
LABEL_72:
              unsigned __int8 v60 = *(unsigned char *)(v2 + 52) + 1;
              *(unsigned char *)(v2 + 52) = v60;
              int v13 = v96;
              goto LABEL_73;
            }
            unsigned int v58 = v16 & 0x3FFFFFFF ^ 0xBFFFFFFF;
          }
          int v59 = v58 | 0x40000000;
          if (BlueFin::BdWordParity::ParityCheck(v58 | 0x40000000, 0))
          {
            *(_DWORD *)(v2 + 84) = v59;
            *(unsigned char *)(v2 + 52) = 0;
            int v13 = v96;
            goto LABEL_83;
          }
          goto LABEL_72;
        }
        if (v21)
        {
          if (v21 == 1)
          {
            int v48 = v14 & 0x7FFFFFFF;
            if ((v14 & 0x3FF80000) == 0x7680000)
            {
              int v48 = ~v48;
              int v49 = ~v16;
            }
            else
            {
              int v49 = v16;
            }
            int v98 = v49;
            unsigned int v92 = v48;
            unint64_t v50 = v48 | 0x40000000u;
            BlueFin::BdWordParity::BCHDecodeWordProcess((unsigned int *)&v98, (unsigned int *)1);
            *(_DWORD *)(v2 + 84) = v50;
            BOOL v51 = BlueFin::BdWordParity::ParityCheck(v50, 0);
            int v13 = v12 + 1;
            if (v51)
            {
              unsigned int v89 = v98;
              BOOL v52 = BlueFin::BdWordParity::ParityCheck(v98, (unsigned int *)1);
              int v13 = v12 + 1;
              if (v52)
              {
                unsigned int v53 = (v89 >> 18) & 0xFFE | ((v92 >> 4) << 12);
                if (v53 <= 0x93A67)
                {
                  unint64_t v54 = (715827883 * (unint64_t)v53) >> 32;
                  unsigned int v55 = v54 + 5;
                  if (v55 - 5 * ((858993460 * (unint64_t)v55) >> 32) + 1 == ((v92 >> 12) & 7))
                  {
                    *(unsigned char *)(v2 + 52) = 0;
                    if (v19 != 3)
                    {
                      if (v19 != 2)
                      {
                        if (v19 == 1)
                        {
                          int v13 = 300 * v54 + 60;
                          *(_DWORD *)(v2 + 36) = v13;
                          *(_DWORD *)(v2 + 40) = v54;
                          int v56 = *(_DWORD *)(v2 + 32);
                          if (v56 <= 30239999)
                          {
                            int v57 = 30240000;
                            if ((v56 & 0x80000000) == 0)
                            {
LABEL_136:
                              int v19 = 3;
                              *(_DWORD *)(v2 + 48) = 3;
                              __int16 v81 = *(_WORD *)(v2 + 60) & 0xF5F7 | 8;
LABEL_140:
                              *(_WORD *)(v2 + 60) = v81;
                              goto LABEL_83;
                            }
                          }
                          else
                          {
                            int v57 = -30240000;
                          }
LABEL_135:
                          *(_DWORD *)(v2 + 32) = v57 + v56;
                          goto LABEL_136;
                        }
LABEL_83:
                        if ((*(_WORD *)(v2 + 60) & 8) == 0 && v19 <= 0)
                        {
                          BOOL v46 = 0;
                          goto LABEL_86;
                        }
LABEL_12:
                        if ((unsigned __int16)v22 == 2)
                        {
                          if (*(_DWORD *)(v2 + 64) != 1)
                          {
                            *(_DWORD *)(v2 + 36) = v13 % 30240000;
                            int v23 = 6 * (v13 % 30240000 / 300);
                            int v24 = v11 + *((_DWORD *)a2 + 1);
LABEL_39:
                            *(_DWORD *)(v2 + 72) = v24;
                            *(_DWORD *)(v2 + 76) = v23;
                            uint64_t v44 = *(void *)(v2 + 16);
                            if (v44) {
                              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v44 + 16))(v44, *(unsigned __int8 *)(v2 + 68), v94);
                            }
                            goto LABEL_41;
                          }
                          *(_DWORD *)(v2 + 36) = v13 % 302400000;
                          if ((-858993459 * (v13 % 302400000 / 300) + 429496729) <= 0x33333332)
                          {
                            int v23 = 3 * (v13 % 302400000 / 1500);
                            int v24 = v10 + *((_DWORD *)a2 + 1);
                            goto LABEL_39;
                          }
                        }
LABEL_41:
                        int v45 = *(_DWORD *)(v2 + 48);
                        int v22 = *(unsigned __int16 *)(v2 + 54);
                        int v16 = *(_DWORD *)(v2 + 24);
                        BOOL v46 = v45 == 4;
                        if (v45 == 4 && v22 == 1)
                        {
                          if ((v16 & 0x3FF80000) == 0x7680000) {
                            unsigned int v47 = ~v16 | 0x80000000;
                          }
                          else {
                            unsigned int v47 = v16 & 0x3FFFFFFF;
                          }
                          *(_DWORD *)(v2 + 84) = v47 | 0x40000000;
                          LOWORD(v22) = 1;
                          BOOL v46 = 1;
                        }
LABEL_86:
                        int v100 = (v16 ^ (*(int *)(v2 + 84) >> 31)) & 0x7FFFFFFF;
                        BlueFin::BdWordParity::BCHDecodeWordProcess((unsigned int *)&v100, (unsigned int *)(__int16)(v22 - 1));
                        int v65 = 1 << (v22 - 1);
                        unsigned int v66 = v100;
                        double result = BlueFin::BdWordParity::ParityCheck(v100, (unsigned int *)(__int16)(v22 - 1));
                        if (result)
                        {
                          *(_WORD *)(v2 + 62) = 0;
                          *(_WORD *)(v2 + 44) |= v65;
                          *(_WORD *)(v2 + 46) &= ~(_WORD)v65;
                        }
                        else
                        {
                          *(_WORD *)(v2 + 46) |= v65;
                          *(_WORD *)(v2 + 44) &= ~(_WORD)v65;
                          if (v46)
                          {
                            int v67 = (__int16)++*(_WORD *)(v2 + 62);
                            if (v67 >= 5)
                            {
                              *(_WORD *)(v2 + 62) = 0;
                              *(_DWORD *)(v2 + 48) = 3;
                            }
                          }
                        }
                        if ((unsigned __int16)v22 == 1)
                        {
                          *(_WORD *)(v2 + 56) = 0;
                          unsigned int v8 = v97;
                          goto LABEL_100;
                        }
                        *(_DWORD *)(v2 + 4 * (unsigned __int16)v22 + 80) = v66;
                        if ((unsigned __int16)v22 == 10)
                        {
                          *(unsigned char *)(v2 + 80) = (*(_DWORD *)(v2 + 84) >> 12) & 7;
                          double result = *(void *)(v2 + 8);
                          if (result)
                          {
                            double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, v90, v94);
                            LOWORD(v22) = *(_WORD *)(v2 + 54);
                          }
                          else
                          {
                            LOWORD(v22) = 10;
                          }
                          *(_DWORD *)(v2 + 44) = 0;
                          *(void *)&long long v68 = 0x100000001;
                          *((void *)&v68 + 1) = 0x100000001;
                          *(_OWORD *)(v2 + 84) = v68;
                          *(_OWORD *)(v2 + 100) = v68;
                          *(void *)(v2 + 116) = 0x100000001;
                        }
                        __int16 v32 = 0;
                        *(_WORD *)(v2 + 56) = 0;
                        int v69 = (unsigned __int16)v22;
                        unsigned int v8 = v97;
                        if (v69 == 10) {
                          goto LABEL_99;
                        }
                        goto LABEL_100;
                      }
                      int v72 = *(_DWORD *)(v2 + 40);
                      if (v72 != v54 - 1 && v72 != v54 + 100799) {
                        goto LABEL_133;
                      }
                      int v73 = 300 * v72 + 360;
                      int v74 = *(_DWORD *)(v2 + 32) + v73 - (v12 + 1);
                      if (v74 > 30239999) {
                        v74 -= 30240000;
                      }
                      *(_DWORD *)(v2 + 32) = v74 + (v74 < 0 ? 0x1CD6D00 : 0);
                      *(_DWORD *)(v2 + 36) = v73;
                      int v19 = 3;
                      *(_DWORD *)(v2 + 48) = 3;
                      __int16 v75 = *(_WORD *)(v2 + 60) & 0xFDFF;
                      goto LABEL_146;
                    }
                    *(_DWORD *)(v2 + 40) = v54;
                    if (v12 == 300 * v55 - 1441)
                    {
                      __int16 v76 = *(_WORD *)(v2 + 60);
                    }
                    else
                    {
                      int v82 = 300 * v54 + 30240059;
                      __int16 v76 = *(_WORD *)(v2 + 60);
                      if (v12 != v82)
                      {
                        int v19 = 0;
                        goto LABEL_148;
                      }
                    }
                    int v19 = 4;
                    *(_DWORD *)(v2 + 48) = 4;
LABEL_139:
                    __int16 v81 = v76 | 0x200;
                    goto LABEL_140;
                  }
                }
              }
            }
LABEL_78:
            unsigned int v64 = ++*(unsigned char *)(v2 + 52);
            if (v64 >= 5)
            {
              int v19 = 0;
              goto LABEL_80;
            }
LABEL_81:
            if (v19 == 2) {
              ++*(_DWORD *)(v2 + 40);
            }
            goto LABEL_83;
          }
          unsigned __int8 v62 = *(unsigned char *)(v2 + 52);
        }
        else
        {
          int v61 = v12 + 1;
          if (BlueFin::BdWordParity::ParityCheck(v16 | 0x40000000u, 0)
            && ((v33 & 0x3FF80000) == 0x7680000 || (v33 & 0x3FF80000) == 0x38900000))
          {
            *(unsigned char *)(v2 + 52) = 0;
            int v13 = v61;
            goto LABEL_83;
          }
          unsigned __int8 v62 = *(unsigned char *)(v2 + 52) + 1;
          *(unsigned char *)(v2 + 52) = v62;
          int v13 = v61;
        }
        if (v62 < 5u) {
          goto LABEL_83;
        }
        goto LABEL_78;
      }
      int v25 = v17 & 0x3FF80000;
      if ((v17 & 0x3FF80000) == 0x38900000 || v25 == 124256256)
      {
        int v27 = v18 & 0x3FFFFFFF;
        unsigned int v28 = ~v18 | 0x80000000;
        unsigned int v29 = v25 == 124256256 ? v28 : v27;
        int v30 = v29 | 0x40000000;
        double result = BlueFin::BdWordParity::ParityCheck(v29 | 0x40000000, 0);
        if (result)
        {
          *(void *)&long long v31 = 0x100000001;
          *((void *)&v31 + 1) = 0x100000001;
          *(_OWORD *)(v2 + 88) = v31;
          *(_OWORD *)(v2 + 104) = v31;
          __int16 v32 = 1;
          *(_DWORD *)(v2 + 120) = 1;
          *(_DWORD *)(v2 + 84) = v30;
          *(void *)(v2 + 44) = 0x100000001;
          *(_WORD *)(v2 + 56) = 29;
LABEL_99:
          *(_WORD *)(v2 + 54) = v32;
        }
      }
LABEL_100:
      v10 += 2;
      v11 += 20;
      ++v7;
      BOOL v70 = v9 > 1;
      v9 >>= 1;
    }
    while (v70);
    uint64_t v6 = v93 + 1;
    int v4 = v86;
  }
  while (v93 + 1 != v87 + 1);
  return result;
}

double BlueFin::BdSFDemod::Reset(BlueFin::BdSFDemod *this)
{
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 31) = 0;
  *((unsigned char *)this + 52) = 0;
  *(void *)&double result = 0x100000001;
  *((void *)this + 3) = 0x100000001;
  *(void *)((char *)this + 54) = 0x100000000;
  *((void *)this + 9) = 0;
  *(void *)((char *)this + 44) = 0;
  *(void *)&long long v2 = 0x100000001;
  *((void *)&v2 + 1) = 0x100000001;
  *(_OWORD *)((char *)this + 84) = v2;
  *(_OWORD *)((char *)this + 100) = v2;
  *(void *)((char *)this + 116) = 0x100000001;
  return result;
}

void BlueFin::BdSFDemod::~BdSFDemod(BlueFin::BdSFDemod *this)
{
}

double BlueFin::GlPeAlmanac::Export(uint64_t a1, int32x2_t *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 108);
  a2->i8[0] = v4 - 1;
  a2[4].i16[0] = *(_WORD *)(a1 + 88);
  a2[4].i16[1] = *(_WORD *)(a1 + 2);
  double v5 = *(double *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 104);
  if (v6 == 3)
  {
    BOOL v7 = 0;
    double v8 = 0.06;
    if ((v4 - 6) < 5) {
      double v8 = 0.0;
    }
    double v5 = v5 - v8;
    double v9 = 0.000000476837158;
  }
  else
  {
    BOOL v7 = v6 == 5;
    double v9 = 0.000000476837158;
    if (v6 == 5) {
      double v9 = 0.0000152587891;
    }
  }
  double v10 = v5 / v9;
  double v11 = fmod(v5 / v9, 4294967300.0);
  if (v10 <= 4294967300.0) {
    double v11 = v10;
  }
  if (v11 < -4294967300.0) {
    double v11 = -fmod(-v11, 4294967300.0);
  }
  if (v11 < 0.0) {
    unsigned int v12 = --v11;
  }
  else {
    LOWORD(v12) = v11;
  }
  a2->i16[1] = v12;
  LODWORD(v11) = *(_DWORD *)(a1 + 16);
  double v13 = (double)*(unint64_t *)&v11;
  double v14 = 4096.0;
  if (v7) {
    double v14 = 600.0;
  }
  double v15 = v13 / v14;
  double v16 = fmod(v13 / v14, 4294967300.0);
  if (v15 <= 4294967300.0) {
    double v16 = v15;
  }
  a2->i8[4] = v16;
  double v17 = 0.0;
  switch(v6)
  {
    case 0:
      double v17 = 0.3;
      break;
    case 2:
      double v17 = 0.35;
      break;
    case 3:
      BOOL v18 = (v4 - 6) >= 5;
      double v17 = 0.25;
      goto LABEL_26;
    case 4:
      BOOL v18 = (v4 - 59) >= 5u && (v4 - 1) >= 5u;
      double v17 = 0.3;
LABEL_26:
      if (!v18) {
        double v17 = 0.0;
      }
      break;
    case 5:
      double v17 = 0.311111111;
      break;
    default:
      break;
  }
  double v19 = (*(double *)(a1 + 24) - v17) / 3.14159265;
  double v20 = *(double *)(a1 + 32);
  double v21 = 524288.0;
  if (v7) {
    double v21 = 16384.0;
  }
  double v22 = 1.14290475e-11;
  if (v7) {
    double v22 = 3.6572952e-10;
  }
  double v23 = 0.00048828125;
  if (v7) {
    double v23 = 0.001953125;
  }
  a2->i16[3] = (int)(v21 * v19);
  a2[1].i16[0] = (int)(v20 / v22);
  double v24 = *(double *)(a1 + 40) / v23;
  double v25 = fmod(v24, 4294967300.0);
  if (v24 <= 4294967300.0) {
    double v25 = v24;
  }
  if (v25 < -4294967300.0) {
    double v25 = -fmod(-v25, 4294967300.0);
  }
  if (v25 < 0.0) {
    unsigned int v26 = --v25;
  }
  else {
    unsigned int v26 = v25;
  }
  a2[1].i32[1] = v26;
  double v27 = 0.000000374507028;
  if (v7) {
    double v27 = 0.0000958737992;
  }
  double v28 = 1048576.0;
  if (v7) {
    double v28 = 524288.0;
  }
  int v29 = (int)(v28 * *(double *)(a1 + 72));
  int v30 = (int)(*(double *)(a1 + 64) / v27);
  a2[2] = vmovn_s64(vcvtq_s64_f64(vdivq_f64(*(float64x2_t *)(a1 + 48), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v27, 0))));
  a2[3].i32[0] = v30;
  a2[3].i16[3] = v29;
  double result = *(double *)(a1 + 80) * 2.74877907e11;
  a2[3].i16[2] = (int)result;
  return result;
}

void *BlueFin::GlGnssIdSet::Add(void *result, unsigned __int8 *a2)
{
  unint64_t v2 = *a2;
  if ((v2 - 64) <= 0xFFFFFFC0)
  {
    DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
  }
  *(_DWORD *)(*result + ((v2 >> 3) & 0x1C)) |= 1 << v2;
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::Serialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v10 = (uint64_t (**)(void **, uint64_t, void))&unk_270EBF948;
  int v21 = 7;
  char v22 = 0;
  int v11 = -65536;
  uint64_t v12 = 0;
  int v13 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  __int16 v18 = 0;
  int v19 = -1;
  char v20 = 0;
  uint64_t result = BlueFin::GlPeAlmMgr::GetAlm(a1, *(_DWORD *)a2, *(unsigned __int8 *)(a2 + 4), (uint64_t)&v11, 0, a3 != 0);
  if (result
    && (!a3 || v19 != 2)
    && (a3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)))
  {
    uint64_t result = v10[3]((void **)&v10, a3, 0);
    if (a3)
    {
      unsigned int v6 = *(_DWORD *)a2;
      BOOL v7 = "BDS";
      double v8 = "GPS";
      switch(*(_DWORD *)a2)
      {
        case 0:
          return GlCustomLog(14, "Write NVMEM Almanac %s %d\n", v8, *(unsigned __int8 *)(a2 + 4));
        case 1:
          double v8 = "SBAS";
          break;
        case 2:
          double v8 = "GLNS";
          break;
        case 3:
          double v8 = "QZSS";
          break;
        case 4:
          goto LABEL_15;
        default:
          double v9 = "<->";
          if (v6 == 6) {
            double v9 = "NIC";
          }
          BOOL v7 = "GAL";
          if (v6 != 5) {
            BOOL v7 = v9;
          }
LABEL_15:
          double v8 = v7;
          break;
      }
      return GlCustomLog(14, "Write NVMEM Almanac %s %d\n", v8, *(unsigned __int8 *)(a2 + 4));
    }
  }
  return result;
}

BOOL BlueFin::GlPeAlmMgr::GetAsstAlm(uint64_t *a1, unsigned int a2, unsigned int a3, int32x2_t *a4)
{
  switch(a2)
  {
    case 0u:
      unsigned __int8 v5 = a3;
      if ((a3 - 33) > 0xDFu) {
        goto LABEL_12;
      }
      unsigned int v6 = "IS_GPS_GNSSID(ucGnssId)";
      DeviceFaultNotify("glpe_almmgr.cpp", 927, "GetAsstAlm", (char)"IS_GPS_GNSSID(ucGnssId)");
      int v7 = 927;
      goto LABEL_20;
    case 1u:
      if ((a3 - 20) <= 0xECu)
      {
        unsigned int v6 = "IS_SBAS_GNSSID(ucGnssId)";
        DeviceFaultNotify("glpe_almmgr.cpp", 931, "GetAsstAlm", (char)"IS_SBAS_GNSSID(ucGnssId)");
        int v7 = 931;
        goto LABEL_20;
      }
      unsigned __int8 v5 = a3 + 119;
      goto LABEL_12;
    case 2u:
      unsigned __int8 v5 = a3;
      if ((a3 - 25) > 0xE7u) {
        goto LABEL_12;
      }
      unsigned int v6 = "IS_GLONASS_GNSSID(ucGnssId)";
      DeviceFaultNotify("glpe_almmgr.cpp", 935, "GetAsstAlm", (char)"IS_GLONASS_GNSSID(ucGnssId)");
      int v7 = 935;
      goto LABEL_20;
    case 3u:
      if ((a3 - 11) <= 0xF5u)
      {
        unsigned int v6 = "IS_QZSS_GNSSID(ucGnssId)";
        DeviceFaultNotify("glpe_almmgr.cpp", 939, "GetAsstAlm", (char)"IS_QZSS_GNSSID(ucGnssId)");
        int v7 = 939;
        goto LABEL_20;
      }
      unsigned __int8 v5 = a3 - 64;
LABEL_12:
      uint64_t v8 = (1 << (a3 & 0x1F)) & *(unsigned int *)(*(void *)(a1[54] + 48 * a2 + 24) + 4 * (a3 >> 5));
      if (v8)
      {
        AlmReference = (_WORD *)BlueFin::GlPeAlmMgr::getAlmReference(a1, a2, a3);
        if (*AlmReference == v5)
        {
          BlueFin::GlPeAlmanac::Export((uint64_t)AlmReference, a4);
          return v8 != 0;
        }
        unsigned int v6 = "ucId == rotAlm.id";
        DeviceFaultNotify("glpe_almmgr.cpp", 964, "GetAsstAlm", (char)"ucId == rotAlm.id");
        int v7 = 964;
LABEL_20:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", v7, v6);
      }
      return v8 != 0;
    case 4u:
      unsigned __int8 v5 = a3;
      if ((a3 - 64) > 0xC0u) {
        goto LABEL_12;
      }
      unsigned int v6 = "IS_BEIDOU_GNSSID(ucGnssId)";
      DeviceFaultNotify("glpe_almmgr.cpp", 943, "GetAsstAlm", (char)"IS_BEIDOU_GNSSID(ucGnssId)");
      int v7 = 943;
      goto LABEL_20;
    case 5u:
      unsigned int v6 = "0";
      DeviceFaultNotify("glpe_almmgr.cpp", 947, "GetAsstAlm", (char)"0");
      int v7 = 947;
      goto LABEL_20;
    case 6u:
      unsigned int v6 = "0";
      DeviceFaultNotify("glpe_almmgr.cpp", 950, "GetAsstAlm", (char)"0");
      int v7 = 950;
      goto LABEL_20;
    default:
      unsigned __int8 v5 = 0;
      goto LABEL_12;
  }
}

_WORD *BlueFin::GlPeAlmMgr::GetDefaultAlmSatPos(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result = BlueFin::GlPeAlmMgr::GetDefaultAlm((unsigned int *)a2);
  if (result)
  {
    double v9 = result;
    double v10 = *(unsigned int **)(a1 + 448);
    if (v10[644])
    {
      int v21 = *(_DWORD *)v9;
      uint64_t v22 = *((void *)v9 + 1);
      int v23 = *((_DWORD *)v9 + 4);
      long long v24 = *(_OWORD *)(v9 + 12);
      long long v25 = *(_OWORD *)(v9 + 20);
      long long v26 = *(_OWORD *)(v9 + 28);
      long long v27 = *(_OWORD *)(v9 + 36);
      __int16 v28 = v9[44];
      int v29 = *((_DWORD *)v9 + 23);
      char v30 = *((unsigned char *)v9 + 96);
      unsigned int v31 = *(_DWORD *)a2;
      double v11 = (double)(int)a3;
      if (a3 <= 0xFF9222FE) {
        double v11 = (double)a3;
      }
      char v32 = *(unsigned char *)(a2 + 4);
      BlueFin::GlPeTimeManager::GetTime(v10, v11, 0, (uint64_t)&v17);
      int v19 = &off_270EBC600;
      unint64_t v20 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v17, (BlueFin::GlGpsTime *)&v19);
      uint64_t Toa = BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&v21, (const BlueFin::GlGpsTime *)&v19, (uint64_t)&v17);
      unsigned int v13 = v20;
      unsigned int v14 = HIDWORD(v20);
      if (v18)
      {
        if (v20 < v18)
        {
          unsigned int v14 = (__PAIR64__(HIDWORD(v18) - HIDWORD(v20), v18) - v20) >> 32;
          unsigned int v13 = v18 - v20;
          char v15 = 1;
        }
        else
        {
          char v15 = 0;
          unsigned int v14 = (v20 - v18) >> 32;
          unsigned int v13 = v20 - v18;
        }
      }
      else
      {
        char v15 = 0;
      }
      double v16 = (double)v13 * 2.32830644e-10 + (double)v14;
      if ((v15 & ((v14 | v13) != 0)) != 0) {
        double v16 = -v16;
      }
      return (_WORD *)BlueFin::GlPeAlmMgr::GetSatPos(v16, Toa, (uint64_t)&v21, a4, 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAlmMgr::SetDataSubFrmMeas(uint64_t this, BlueFin::GlDataSubFrmMeas *a2)
{
  if (!a2)
  {
    uint64_t v17 = "pDataSubFrmMeas";
    DeviceFaultNotify("glpe_almmgr.cpp", 1458, "SetDataSubFrmMeas", (char)"pDataSubFrmMeas");
    int v18 = 1458;
    goto LABEL_45;
  }
  int v2 = BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 8)];
  if (v2 == 7)
  {
    uint64_t v17 = "eGnss != GNSS_INVALID";
    DeviceFaultNotify("glpe_almmgr.cpp", 1462, "SetDataSubFrmMeas", (char)"eGnss != GNSS_INVALID");
    int v18 = 1462;
    goto LABEL_45;
  }
  if (BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 8)]) {
    BOOL v3 = v2 == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v17 = "eGnss == GNSS_GPS INC_QZS(|| eGnss == GNSS_QZSS)";
    DeviceFaultNotify("glpe_almmgr.cpp", 1463, "SetDataSubFrmMeas", (char)"eGnss == GNSS_GPS INC_QZS(|| eGnss == GNSS_QZSS)");
    int v18 = 1463;
    goto LABEL_45;
  }
  if ((*((unsigned char *)a2 + 9) & 0xFE) != 4)
  {
    uint64_t v17 = "pDataSubFrmMeas->ucSubFrmId == 4 || pDataSubFrmMeas->ucSubFrmId == 5";
    DeviceFaultNotify("glpe_almmgr.cpp", 1464, "SetDataSubFrmMeas", (char)"pDataSubFrmMeas->ucSubFrmId == 4 || pDataSubFrmMeas->ucSubFrmId == 5");
    int v18 = 1464;
LABEL_45:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", v18, v17);
  }
  int v4 = (uint64_t *)this;
  for (uint64_t i = 0; i != 32; i += 4)
  {
    if (*(_DWORD *)((char *)a2 + i + 28) >> 30) {
      return this;
    }
  }
  int v7 = (int32x2_t *)((char *)a2 + 28);
  unsigned int v6 = *((_DWORD *)a2 + 7);
  if (!BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 8)])
  {
    if ((v6 & 0x30000000) != 0x10000000) {
      return this;
    }
    unsigned int v10 = v6 >> 22;
    int v11 = (v6 >> 22) & 0x3F;
    int v8 = (v6 >> 28) & 3;
    if (v8 != 1) {
      goto LABEL_26;
    }
    unsigned int v12 = v6 & 0xFC00000;
    if (!v12) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  int v8 = (v6 >> 28) & 3;
  if (v8) {
    BOOL v9 = v8 == 3;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    unsigned int v10 = v6 >> 22;
    int v11 = (v6 >> 22) & 0x3F;
    if (v2 != 3) {
      goto LABEL_26;
    }
    if (v8) {
      goto LABEL_26;
    }
    unsigned int v12 = v6 & 0xFC00000;
    if (!v12) {
      goto LABEL_26;
    }
    int v8 = 0;
LABEL_25:
    if (v12 >> 22 < 0x21)
    {
LABEL_31:
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v2 == 3;
      }
      if (v14 || v2 == 0) {
        unsigned int v16 = 0;
      }
      else {
        unsigned int v16 = 3;
      }
      unsigned int v19 = v16;
      char v20 = v11;
      this = BlueFin::GlPeAlmMgr::IsFresh(this, (uint64_t)&v19);
      if ((this & 1) == 0) {
        return BlueFin::GlPeAlmMgr::ApplyDecodedAlmanac(v4, &v19, v7);
      }
      return this;
    }
LABEL_26:
    if (v2 != 3) {
      return this;
    }
    if (v8 != 3) {
      return this;
    }
    unsigned int v13 = v10 & 0x3F;
    if (!v13 || v13 > 5) {
      return this;
    }
    int v8 = 3;
    goto LABEL_31;
  }
  return this;
}

uint64_t BlueFin::GlPeAlmMgr::ApplyDecodedAlmanac(uint64_t *a1, unsigned int *a2, int32x2_t *a3)
{
  int v4 = *a2;
  if (v4) {
    BOOL v5 = v4 == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    int v42 = "rotGnss.eGnss == GNSS_GPS INC_QZS(|| rotGnss.eGnss == GNSS_QZSS)";
    DeviceFaultNotify("glpe_almmgr.cpp", 2396, "ApplyDecodedAlmanac", (char)"rotGnss.eGnss == GNSS_GPS INC_QZS(|| rotGnss.eGnss == GNSS_QZSS)");
    int v43 = "glpe_almmgr.cpp";
    int v44 = 2396;
    goto LABEL_31;
  }
  uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference(a1, v4, *((unsigned __int8 *)a2 + 4));
  unsigned int v9 = *a2;
  *(_DWORD *)(AlmReference + 104) = *a2;
  unsigned __int8 v10 = *((unsigned char *)a2 + 4);
  *(unsigned char *)(AlmReference + 108) = v10;
  int v11 = a3->i32[1];
  int v12 = (v11 >> 22);
  if (v9 == 5) {
    int v13 = 600;
  }
  else {
    int v13 = 4096;
  }
  unsigned int v14 = v12 * v13;
  BOOL v51 = &off_270EBC600;
  double v15 = fmod((double)(v12 * v13), 1.0);
  if (v15 >= 1.0)
  {
    int v42 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v43 = "glpe_timepoint.h";
    int v44 = 173;
    goto LABEL_31;
  }
  double v16 = v15 * 4294967300.0 + 0.5;
  unsigned int v17 = v16;
  if (v16 >= 4294967300.0) {
    unsigned int v17 = -1;
  }
  unint64_t v52 = __PAIR64__(v14, v17);
  BOOL v51 = &off_270EBC600;
  int v18 = (BlueFin::GlPeTimeManager *)a1[56];
  uint64_t v48 = (uint64_t)a1;
  if (*((_DWORD *)v18 + 644))
  {
    BlueFin::GlPeTimeManager::GetTime(v18, 1, v49);
    v50[0] = &off_270EBC600;
    v50[1] = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v49, (BlueFin::GlGpsTime *)v50);
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v50, (double)v14, v49);
    unint64_t v52 = v49[0].n128_u64[0];
    int v11 = a3->i32[1];
    unsigned int v9 = *(_DWORD *)(AlmReference + 104);
    unsigned __int8 v10 = *(unsigned char *)(AlmReference + 108);
  }
  unsigned int v19 = (unsigned __int16)((unsigned __int32)a3->i32[0] >> 6);
  int v20 = (__int16)(v11 >> 6);
  int v21 = a3[1].i32[0];
  unsigned int v46 = ((unsigned __int32)a3[1].i32[1] >> 6) & 0xFFFFFF;
  int32x2_t v22 = vshr_n_s32(vshl_n_s32(a3[2], 2uLL), 8uLL);
  unsigned __int32 v23 = a3[3].u32[1];
  int v24 = (char)(a3[3].i32[0] >> 6);
  signed int v25 = ((int)(4 * v23) >> 21) & 0xFFFFFFF8 | (v23 >> 8) & 7;
  int v47 = (int)(v23 << 10) >> 21;
  *(_WORD *)uint64_t AlmReference = BlueFin::GlPeAlmanacPlainOldData::Gnss2almId(v9, v10);
  *(_WORD *)(AlmReference + 2) = (v21 >> 6);
  int v26 = *(_DWORD *)(AlmReference + 104);
  if (v26 == 5)
  {
    double v27 = (double)v19 * 0.0000152587891 + 0.0;
    double v28 = 0.0000610351562;
    double v29 = 3.6572952e-10;
    double v30 = 0.001953125;
    double v45 = 0.0000958737992;
    uint64_t v31 = 0x3EC0000000000000;
  }
  else
  {
    double v32 = 0.06;
    if (*(unsigned __int8 *)(AlmReference + 108) - 6 < 5) {
      double v32 = 0.0;
    }
    if (v26 != 3) {
      double v32 = 0.0;
    }
    double v27 = v32 + (double)v19 * 0.000000476837158;
    double v28 = 0.00000190734863;
    double v29 = 1.14290475e-11;
    double v30 = 0.00048828125;
    double v45 = 0.000000374507028;
    uint64_t v31 = 0x3EB0000000000000;
  }
  double v33 = *(double *)&v31;
  *(double *)(AlmReference + 8) = v27;
  *(_DWORD *)(AlmReference + 16) = v14;
  *(double *)(AlmReference + 24) = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)AlmReference, v28 * (double)v20);
  *(double *)(AlmReference + 32) = v29 * (double)(__int16)(v21 >> 14);
  *(double *)(AlmReference + 40) = v30 * (double)v46;
  v34.i64[0] = v22.i32[0];
  v34.i64[1] = v22.i32[1];
  *(float64x2_t *)(AlmReference + 48) = vmulq_n_f64(vcvtq_f64_s64(v34), v45);
  *(double *)(AlmReference + 64) = v45 * (double)v24;
  *(double *)(AlmReference + 72) = v33 * (double)v25;
  *(double *)(AlmReference + 80) = (double)v47 * 3.63797881e-12;
  *(_WORD *)(AlmReference + 88) = (((unsigned int (*)(void))v51[4])(&v51) / 0x93A80);
  *(_DWORD *)(AlmReference + 92) = 1;
  double v35 = *(double *)(AlmReference + 40);
  if (v35 >= 2530.0 && v35 <= 8192.0 && *(_DWORD *)(AlmReference + 16) < 0x93001u)
  {
    unsigned int v37 = ((uint64_t (*)(void))v51[4])(&v51);
    unint64_t v38 = *((unsigned __int8 *)a2 + 4);
    unsigned int v39 = v38 - 64;
    if (v37 >= 0x93A80)
    {
      if (v39 > 0xFFFFFFC0)
      {
        uint64_t v41 = *(void *)(*(void *)(v48 + 432) + 48 * *a2 + 24);
        *(_DWORD *)(v41 + ((v38 >> 3) & 0x1C)) |= 1 << v38;
        BlueFin::GlPeAlmMgr::Serialize(v48, (uint64_t)a2, 0);
        goto LABEL_22;
      }
    }
    else if (v39 > 0xFFFFFFC0)
    {
      uint64_t v40 = *(void *)(*(void *)(v48 + 432) + 48 * *a2);
      *(_DWORD *)(v40 + 4 * (v38 >> 5)) |= 1 << v38;
      goto LABEL_22;
    }
    int v42 = "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID";
    DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
    int v43 = "glgnss.h";
    int v44 = 115;
LABEL_31:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v43, v44, v42);
  }
LABEL_22:
  *(unsigned char *)(v48 + 36712) = 0;
  return 1;
}

BlueFin::GlPeTimeManager *BlueFin::GlPeAlmMgr::PublishDcdGlnAlm(BlueFin::GlPeAlmMgr *this, int a2, int a3, int a4)
{
  uint64_t result = (BlueFin::GlPeTimeManager *)*((void *)this + 56);
  if (*((_DWORD *)result + 644))
  {
    unsigned int v6 = *((_DWORD *)this + 24 * a2 + a4 + 3720);
    if ((~v6 & 7) == 0 && ((v6 >> 3) & (v6 >> 6) & (v6 >> 9) & 7) != 0)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a4;
      int v10 = 2 * (a4 % 5);
      uint64_t v11 = v10 | 1;
      uint64_t v12 = v10 + 2;
      uint64_t v14 = 99 * a3 + 7948;
      double v15 = (unsigned __int8 *)this + 495 * a2 + v14;
      double v16 = &v15[9 * v11];
      uint64_t v17 = 9 * v10;
      uint64_t v18 = 4 * v9 + 14880;
      unsigned int v19 = &v15[v17 + 18];
      uint64_t v20 = v17 + 99 * a3;
      uint64_t v21 = v20 + 7957;
      uint64_t v22 = v20 + 7966;
      char v23 = 1;
      do
      {
        if (a2 != v8)
        {
          unsigned int v24 = *(_DWORD *)((char *)this + v18);
          BOOL v25 = (~v24 & 7) != 0 || ((v24 >> 3) & (v24 >> 6) & (v24 >> 9) & 7) == 0;
          if (!v25
            && *v15 == *((unsigned __int8 *)this + v14)
            && (*((unsigned __int8 *)this + v14 + 1) ^ v15[1]) <= 0x1F
            && ((*((unsigned char *)this + v14 + 5) ^ v15[5]) & 0xF) == 0
            && ((*((unsigned __int8 *)this + v14 + 6) ^ v15[6]) & 0x80) == 0
            && *(void *)v16 == *(void *)((char *)this + v21)
            && v16[8] == (unint64_t)*((unsigned __int8 *)this + v21 + 8))
          {
            BOOL v28 = *(void *)v19 != *(void *)((char *)this + v22)
               || v19[8] != (unint64_t)*((unsigned __int8 *)this + v22 + 8);
            v23 &= v28;
          }
        }
        ++v8;
        v18 += 96;
        v14 += 495;
        v21 += 495;
        v22 += 495;
      }
      while (v8 != 14);
      if (v23)
      {
        unsigned int v29 = (*v15 << 24) | (v15[1] << 16);
        unsigned int v30 = (v15[5] << 28) | (v15[6] << 20);
        unsigned int v31 = *v16;
        double v32 = (char *)this + 495 * a2 + 99 * a3 + 7948;
        double v33 = (unsigned __int8 *)&v32[9 * v11];
        int v34 = v33[1];
        int v35 = (char)v34;
        int v36 = v33[3] | (v33[2] << 8);
        unsigned int v37 = (v33[2] << 8) | (v34 << 16);
        int v38 = v33[4];
        int v39 = v33[7];
        unsigned int v40 = ((v33[6] << 8) | (v33[5] << 16)) & 0xFFFFFF | (v38 << 24) | v39;
        int v41 = v33[8];
        int v42 = (unsigned __int8 *)&v32[9 * v12];
        int v43 = (*v19 << 24) | (v42[1] << 16);
        int v44 = v42[2];
        int v45 = v42[3];
        int v46 = v42[4];
        int v47 = v42[7];
        unsigned int v48 = (v46 << 24) | (v42[5] << 16) | (v42[6] << 8) | v47;
        unsigned int v49 = v42[8];
        unsigned __int16 v63 = v29 >> 21;
        char v74 = v31 >> 7;
        char v76 = (v31 >> 5) & 3;
        char v75 = 1;
        int v50 = v31 & 0x1F;
        char v64 = v31 & 0x1F;
        int v51 = v37 >> 14;
        int v52 = (v37 >> 14) & 0x1FF;
        if (v35 < 0) {
          int v51 = -v52;
        }
        __int16 v73 = v51;
        int v53 = __PAIR64__(v36, v38 << 24) >> 14;
        if (v53 < 0) {
          int v54 = -((v53 >> 11) & 0xFFFFF);
        }
        else {
          int v54 = v53 >> 11;
        }
        if (v38) {
          int v55 = -((v40 >> 7) & 0x1FFFF);
        }
        else {
          int v55 = (v40 >> 7) & 0x3FFFF;
        }
        __int16 v71 = ((v39 << 25) | (v41 << 17)) >> 17;
        if (v43 < 0) {
          int v43 = -(HIWORD(v43) & 0x7FFF);
        }
        else {
          LOWORD(v43) = HIWORD(v43);
        }
        __int16 v72 = v43;
        int v66 = v54;
        unsigned int v67 = ((v44 << 24) | (v45 << 16) | (v46 << 8)) >> 11;
        int v56 = (v48 >> 5) & 0x3FFFFF;
        if ((v46 & 4) != 0) {
          int v56 = -((v48 >> 5) & 0x1FFFFF);
        }
        int v68 = v55;
        int v69 = v56;
        int v57 = (v47 << 27) | (v49 << 19);
        if (v57 < 0) {
          int v57 = -((v57 >> 25) & 0x3F);
        }
        else {
          LOBYTE(v57) = v57 >> 25;
        }
        char v70 = v57;
        char v65 = (v49 >> 1) & 0x1F;
        if (v30 >> 27
          && (v29 >> 21) - 1462 >= 0xFFFFFA4B
          && (v50 - 25) >= 0xFFFFFFE8
          && (double v58 = (double)(((v44 << 24) | (v45 << 16) | (v46 << 8)) >> 11) * 0.03125, v58 >= 0.0)
          && v58 <= 44100.0
          && fabs((double)v55 * 0.000000953674316) <= 0.067
          && fabs((double)v56 * 0.001953125) <= 3600.0
          && (double v59 = (double)(((v39 << 25) | (v41 << 17)) >> 17) * 0.000000953674316, v59 >= 0.0)
          && v59 <= 0.03)
        {
          BlueFin::GlPeTimeManager::GetTime(result, 1, v61);
          v62[0] = &off_270EBF4E8;
          v62[1] = 0;
          BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v61, (BlueFin::GlGlnsTime *)v62);
          return (BlueFin::GlPeTimeManager *)BlueFin::GlPeAlmMgr::ApplyDecodedGlonassAlmanac((uint64_t)this, v62, &v63, 1, v60);
        }
        else
        {
          return (BlueFin::GlPeTimeManager *)GlCustomLog(14, "Reject Alm GLO %d\n", v50);
        }
      }
    }
  }
  return result;
}

BlueFin::GlPeTimeManager *BlueFin::GlPeAlmMgr::SetGlonassDataString(BlueFin::GlPeTimeManager *this, BlueFin::GlGlonassDataString *a2, int a3)
{
  int v112 = this;
  uint64_t v129 = *MEMORY[0x263EF8340];
  if ((a3 - 16) >= 0xFFFFFFF5)
  {
    if (a3)
    {
      if ((*((unsigned char *)a2 + 30) & 8) != 0) {
        return this;
      }
      uint64_t v127 = 0;
      uint64_t v126 = 0;
      int v128 = 0;
    }
    else
    {
      uint64_t v127 = 0;
      uint64_t v126 = 0;
      int v128 = 0;
      if (a3 <= 0xC)
      {
        unsigned int v5 = ((*((_DWORD *)a2 + 5) >> 19) & 0x1F) - 1;
        if (v5 > 0x17) {
          return this;
        }
        ++*((_DWORD *)&v126 + v5 / 5u);
      }
    }
    if (*((_WORD *)a2 + 5))
    {
      unsigned int v6 = *((_DWORD *)a2 + 3) / 0x7530u - 5 * ((858993460 * (unint64_t)(*((_DWORD *)a2 + 3) / 0x7530u)) >> 32);
      ++*((_DWORD *)&v126 + v6);
    }
    BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 56), 1, &v121);
    unsigned int v8 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v7, v122);
    __int16 v119 = &off_270EBF4E8;
    uint64_t v120 = 0;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&v121, (BlueFin::GlGlnsTime *)&v119);
    if (v9 < 1000000.0)
    {
      BOOL v10 = 0;
      if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
      {
        BOOL v10 = HIDWORD(v120) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      }
      unsigned int v11 = ((uint64_t (*)(void))v119[4])(&v119);
      if (v10) {
        double v13 = 10799.0;
      }
      else {
        double v13 = (double)(v11 % 0x15180);
      }
      LODWORD(v12) = v120;
      double v14 = v13 + (double)v12 * 2.32830644e-10;
      double v15 = fmod(v14, 4294967300.0);
      if (v14 <= 4294967300.0) {
        double v15 = v14;
      }
      if (v15 < -4294967300.0) {
        double v15 = -fmod(-v15, 4294967300.0);
      }
      unsigned int v16 = v15;
      if (v15 < 0.0) {
        unsigned int v16 = --v15;
      }
      unsigned int v17 = -15 * (v16 / 0x1E) + (v16 >> 1);
      BOOL v18 = a3 == 15 && v17 == 0;
      if (v18) {
        int v19 = -15;
      }
      else {
        int v19 = ~v17;
      }
      int v20 = v19 + a3;
      if (v20 < 0) {
        int v20 = -v20;
      }
      if (v20 <= 1)
      {
        int v21 = v16 / 0x1E - 5 * ((858993460 * (unint64_t)(v16 / 0x1E)) >> 32);
        int v22 = v21 - 1;
        if (!v21) {
          int v22 = 4;
        }
        if (v18) {
          int v23 = v22;
        }
        else {
          int v23 = v21;
        }
        ++*((_DWORD *)&v126 + v23);
      }
    }
    unsigned int v24 = *((_DWORD *)v112 + 1986);
    if (v24 != -7200001)
    {
      if (v8 > v24) {
        v24 += 150000 + 150000 * ((v8 - v24) / 0x249F0);
      }
      unsigned int v25 = v24 - v8;
      int v26 = (v25 / 0x7D0 - 15 * ((286331154 * (unint64_t)(v25 / 0x7D0)) >> 32)) ^ 0xF;
      BOOL v27 = a3 == 15 && v26 == 1;
      if (v27) {
        int v26 = 15;
      }
      int v28 = a3 - v26;
      if (v28 < 0) {
        int v28 = -v28;
      }
      if (v28 <= 1)
      {
        int v29 = v25 / 0x7530 - 5 * ((858993460 * (unint64_t)(v25 / 0x7530)) >> 32);
        int v30 = 3 - v29;
        if (v29 == 4) {
          int v30 = 4;
        }
        int v31 = 4 - v29;
        if (v27) {
          int v31 = v30;
        }
        ++*((_DWORD *)&v126 + v31);
      }
    }
    uint64_t v32 = 0;
    int v33 = 0;
    do
    {
      this = (BlueFin::GlPeTimeManager *)*((unsigned int *)&v126 + v32);
      if (*((_DWORD *)&v126 + v33) < (int)this) {
        int v33 = v32;
      }
      ++v32;
    }
    while (v32 != 5);
    int v34 = HIDWORD(v126) + v126 + v127 + HIDWORD(v127) + v128;
    if (v34 < 1 || *((_DWORD *)&v126 + v33) < v34)
    {
      *((_DWORD *)v112 + 1986) = -7200001;
      return this;
    }
    unsigned int v35 = v8 + 2000 * (15 - a3) + 30000 * (4 - v33);
    *((_DWORD *)v112 + 1986) = v35;
    if (a3 < 14 || v33 != 4)
    {
      uint64_t v36 = v33;
      uint64_t v37 = *((char *)a2 + 9);
      uint64_t v38 = (a3 - 5);
      if (a3 == 5) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = (a3 & 1u) + 1;
      }
      unsigned int v40 = v35 / 0x249F0;
      int v104 = v37 + 7;
      double v103 = (_WORD *)((char *)v112 + 2 * v37 + 16238);
      if ((unint64_t)(unsigned __int16)*v103 + 18 <= v35 / 0x249F0uLL)
      {
        int v41 = (_OWORD *)((char *)v112 + 96 * v104);
        v41[935] = 0u;
        v41[934] = 0u;
        v41[933] = 0u;
        v41[932] = 0u;
        v41[931] = 0u;
        v41[930] = 0u;
      }
      *double v103 = v40;
      long long v123 = xmmword_263BB39F0;
      long long v124 = unk_263BB3A00;
      int8x8_t v42 = (int8x8_t)0x111110100F0F0F0ELL;
      v125[0] = xmmword_263BB3A10;
      *(void *)((char *)v125 + 15) = 0x1717171716161515;
      LOBYTE(v123) = 4;
      BYTE11(v123) = 9;
      BYTE6(v124) = 14;
      BYTE1(v125[0]) = 19;
      int v43 = (BlueFin::GlPeTimeManager *)*((unsigned __int8 *)&xmmword_263BB39F0 + 11 * v33 + v38);
      BYTE12(v125[0]) = 23;
      uint64_t v44 = *((unsigned __int8 *)&v123 + 11 * v33 + v38);
      if (v43 <= v44)
      {
        char v45 = 0;
        int v46 = v43;
        char v47 = 0;
        HIDWORD(v49) = *((_DWORD *)a2 + 5);
        LODWORD(v49) = *((_DWORD *)a2 + 6);
        int v48 = v49 >> 27;
        HIDWORD(v49) = v49;
        LODWORD(v49) = *((_DWORD *)a2 + 7);
        int v50 = v49 >> 27;
        int v111 = (32 * v49) & 0xFF000000;
        uint64_t v51 = (uint64_t)v112 + 495 * v104 + 99 * v33 + 9 * v38;
        int v52 = (unsigned char *)(v51 + 7948);
        unsigned int v53 = bswap32(*(_DWORD *)(v51 + 7948));
        int v54 = (unsigned __int8 *)(v51 + 7956);
        int v55 = (unsigned __int8 *)(v51 + 7952);
        int v56 = (unsigned __int8 *)(v51 + 7953);
        int v57 = (unsigned __int8 *)(v51 + 7954);
        double v58 = (unsigned __int8 *)(v51 + 7955);
        *(void *)int v99 = v46;
        double v59 = v46;
        int v98 = 32 * v49;
        do
        {
          this = v59;
          while (v53 != v48 || ((*v55 << 24) | (*v56 << 16) | (*v57 << 8) | *v58) != v50 || *v54 << 24 != v111)
          {
            this = (BlueFin::GlPeTimeManager *)(this + 1);
            char v47 = 1;
            if (v44 + 1 == this) {
              goto LABEL_75;
            }
          }
          double v59 = (BlueFin::GlPeTimeManager *)(this + 1);
          char v45 = 1;
        }
        while (v44 != this);
        if (v47)
        {
LABEL_75:
          uint64_t v61 = 0;
          if (a3 == 5) {
            int v62 = 0;
          }
          else {
            int v62 = v33;
          }
          if (a3 == 5) {
            int v63 = 4;
          }
          else {
            int v63 = v33;
          }
          uint64_t v102 = v44 + 1;
          uint64_t v64 = v62;
          int v101 = v63;
          int v65 = v63 + 1;
          uint64_t v109 = v44 - *(void *)v99 + 1;
          uint64_t v108 = (uint64_t)v112 + 96 * (int)v37 + 4 * *(void *)v99 + 15552;
          int v66 = (char *)v112 + 14880;
          uint64_t v100 = v62;
          int v110 = v63 + 1;
          uint64_t v107 = v38;
          int v105 = v48;
          int v106 = v50;
          do
          {
            if ((int)v64 <= v101)
            {
              while (bswap32(*(_DWORD *)((char *)v112 + 495 * v61 + 99 * v64 + 9 * v38 + 7948)) == v48)
              {
                uint64_t v67 = (uint64_t)v112 + 495 * v61 + 99 * v64 + 9 * v38;
                if (bswap32(*(_DWORD *)(v67 + 7952)) != v50 || *(unsigned __int8 *)(v67 + 7956) << 24 != v111) {
                  break;
                }
                uint64_t v72 = *((unsigned __int8 *)&xmmword_263BB39F0 + 11 * v64 + v38);
                uint64_t v73 = *((unsigned __int8 *)&v123 + 11 * v64 + v38);
                if (v72 <= v73)
                {
                  uint64_t v74 = v73 + 1;
                  do
                  {
                    unsigned int v75 = *(_DWORD *)&v66[4 * v72];
                    unsigned __int8 v116 = v75 & 1;
                    BOOL v117 = (v75 & 2) != 0;
                    BOOL v118 = (v75 & 4) != 0;
                    int v76 = (v75 >> 3) & 7;
                    if ((~v75 & 7) != 0 || ((v75 >> 9) & (v75 >> 6) & v76) == 0)
                    {
                      *(unsigned char *)(((unint64_t)&v113 | v39) + 3) = 1;
                      *(_DWORD *)&v66[4 * v72] = v75 & 0x7FFFFC0 | (8 * v76) | v116 | (2 * v117) | (4 * v118);
                      this = BlueFin::GlPeAlmMgr::PublishDcdGlnAlm(v112, v61, v64, v72);
                    }
                    ++v72;
                  }
                  while (v74 != v72);
                  char v45 = 1;
                  uint64_t v38 = v107;
                  uint64_t v36 = v33;
                  int v48 = v105;
                  int v50 = v106;
LABEL_104:
                  int v65 = v110;
                  goto LABEL_105;
                }
                char v45 = 1;
LABEL_105:
                if (v65 == ++v64) {
                  goto LABEL_106;
                }
              }
              if (v61 != v104 || v64 != v36) {
                goto LABEL_105;
              }
              int v69 = (int *)v108;
              uint64_t v70 = v109;
              do
              {
                unsigned int v71 = *v69;
                unsigned __int8 v116 = *v69 & 1;
                BOOL v117 = (v71 & 2) != 0;
                BOOL v118 = (v71 & 4) != 0;
                __int8 v113 = (v71 >> 3) & 7;
                __int8 v114 = (v71 >> 6) & 7;
                unsigned __int8 v115 = (v71 >> 9) & 7;
                *(unsigned char *)((unint64_t)&v113 | v39) = 0;
                *(unsigned char *)(((unint64_t)&v113 | v39) + 3) = 0;
                *v69++ = v116 | (2 * v117) | (4 * v118) | (8 * (v113 & 7)) | ((v114 & 7) << 6) | ((v115 & 7) << 9) | v71 & 0x7FFF000;
                --v70;
              }
              while (v70);
              goto LABEL_104;
            }
LABEL_106:
            ++v61;
            v66 += 96;
            uint64_t v64 = v100;
          }
          while (v61 != 14);
          *int v52 = HIBYTE(v48);
          v52[1] = BYTE2(v48);
          void v52[2] = BYTE1(v48);
          v52[3] = v48;
          v52[4] = HIBYTE(v50);
          v52[5] = BYTE2(v50);
          v52[6] = BYTE1(v50);
          v52[7] = v50;
          v52[8] = HIBYTE(v98);
        }
        else
        {
          uint64_t v102 = v44 + 1;
        }
        uint64_t v78 = *(void *)v99;
        do
        {
          uint64_t v79 = v78;
          uint64_t v80 = (uint64_t)v112 + 96 * v104 + 4 * v78;
          unsigned int v81 = *(_DWORD *)(v80 + 14880);
          unsigned __int8 v116 = v81 & 1;
          BOOL v117 = (v81 & 2) != 0;
          BOOL v118 = (v81 & 4) != 0;
          int v82 = (v81 >> 3) & 7;
          __int8 v113 = (v81 >> 3) & 7;
          __int8 v114 = (v81 >> 6) & 7;
          unsigned __int8 v115 = (v81 >> 9) & 7;
          BOOL v83 = ((v81 >> 9) & (v81 >> 6) & v82) != 0;
          if (v45) {
            *(unsigned char *)(((unint64_t)&v113 | v39) + 3) = 1;
          }
          unsigned int v84 = (byte_263BB39A8[v82 | (v81 >> 6) & 7 | (v81 >> 9) & 7] + 1);
          int v85 = (unsigned __int16)*v103;
          char v87 = ((v81 >> 12) & 0x7FFF) == v85 && v84 > 1;
          unsigned int v88 = v84 >> v87;
          uint64_t v89 = *(unsigned __int8 *)((unint64_t)&v113 | v39);
          if (*(unsigned char *)((unint64_t)&v113 | v39)) {
            LOBYTE(v89) = (v88 - 1) & ~byte_263BB39A8[v89] | v89;
          }
          uint64_t v90 = (unsigned int *)(v80 + 14880);
          *(unsigned char *)((unint64_t)&v113 | v39) = v89 | v88;
          v42.i8[0] = v113;
          int v91 = v81 & v83 & (v81 >> 1) & (v81 >> 2);
          v42.i8[4] = v114;
          unsigned int v92 = v115;
          int32x2_t v93 = (int32x2_t)0x300000002;
          do
          {
            int32x2_t v94 = (int32x2_t)vand_s8(v42, (int8x8_t)0xFF000000FFLL);
            uint32x2_t v95 = (uint32x2_t)vneg_s32(v93);
            int8x8_t v96 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(vshl_u32((uint32x2_t)v94, v95), (uint32x2_t)0x100000002), (int8x8_t)0x200000004), vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v92), v95), (int8x8_t)0x100000001)), vand_s8((int8x8_t)vshl_u32(vshl_u32((uint32x2_t)vrev64_s32(v94), v95), (uint32x2_t)0x200000001), (int8x8_t)0x400000002));
            if ((v96.i32[0] | v96.i32[1]) == v96.i32[1])
            {
              int8x8_t v42 = vorr_s8((int8x8_t)vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(-1 << v93.i8[4]), (int8x8_t)v94), 1uLL), vand_s8((int8x8_t)vdup_n_s32(~(-1 << v93.i8[0])), (int8x8_t)v94));
              unsigned int v92 = v92 & ~(-1 << v93.i8[0]) | (((-1 << v93.i8[4]) & v92) >> 1);
            }
            __int32 v97 = v93.i32[0];
            int32x2_t v93 = vadd_s32(v93, (int32x2_t)-1);
          }
          while (v97);
          __int8 v113 = v42.i8[0];
          __int8 v114 = v42.i8[4];
          unsigned __int8 v115 = v92;
          *uint64_t v90 = ((v92 & 7) << 9) | ((v42.i8[4] & 7) << 6) | (8 * (v42.i8[0] & 7)) | v116 | (2 * v117) | (4 * v118) | ((v85 & 0x7FFF) << 12);
          if ((v91 & 1) == 0) {
            this = BlueFin::GlPeAlmMgr::PublishDcdGlnAlm(v112, v104, v33, v79);
          }
          uint64_t v78 = v79 + 1;
        }
        while (v79 + 1 != v102);
      }
    }
  }
  return this;
}

void BlueFin::GlPeAlmMgr::SetGalileoDataPage(BlueFin::GlPeAlmMgr *this, BlueFin::GlGalileoINavPage *a2)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  int v2 = *((unsigned __int8 *)a2 + 10);
  if (v2 != 5 && (v2 - 7) > 0xFFFFFFFA) {
    return;
  }
  unsigned int v6 = (char *)a2 + 8;
  int v7 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)this + 55) + 119744);
  unsigned int v82 = 7;
  LOBYTE(v83) = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v7, (unsigned __int8 *)a2 + 8, (uint64_t)&v82);
  if (v83 - 1 >= 0x3F)
  {
    int v77 = "m_pAsstMgr->SvId2Gnss(rGalileoDataPage.otSvId, otGnssl)";
    DeviceFaultNotify("glpe_almmgr.cpp", 2162, "SetGalileoDataPage", (char)"m_pAsstMgr->SvId2Gnss(rGalileoDataPage.otSvId, otGnssl)");
    uint64_t v78 = "glpe_almmgr.cpp";
    int v79 = 2162;
    goto LABEL_63;
  }
  uint64_t v8 = 0;
  double v9 = (void *)((char *)this + 34632);
  unsigned int v10 = *((_DWORD *)a2 + 5);
  do
  {
    unsigned int v11 = *(_DWORD *)((char *)a2 + v8 + 24);
    *(unsigned int *)((char *)&v82 + v8) = __PAIR64__(v10, v11) >> 30;
    v8 += 4;
    unsigned int v10 = v11;
  }
  while (v8 != 12);
  HIDWORD(v13) = *((_DWORD *)a2 + 8);
  LODWORD(v13) = *((_DWORD *)a2 + 9);
  unsigned int v12 = v13 >> 30;
  int v14 = (v13 >> 22) | ((v13 >> 30) << 8);
  signed int v15 = v14 | v12 & 0xFFFF0000;
  signed int v85 = v15;
  switch(*((unsigned char *)a2 + 10))
  {
    case 1:
      *((double *)this + 4335) = (double)(__PAIR64__(v84, v15) >> 2) * 0.00000190734863;
      *((unsigned char *)this + 34652) = 1;
      char v16 = *v6;
      unsigned __int8 v17 = *v6 + 118;
      *((unsigned char *)this + 34648) = v17;
      if ((v16 + 54) <= 0xC0u)
      {
        int v77 = "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID";
        DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        uint64_t v78 = "glgnss.h";
        int v79 = 115;
LABEL_63:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v78, v79, v77);
      }
      *(_DWORD *)(*((void *)this + 4336) + 4 * (v17 >> 5)) |= 1 << v17;
LABEL_28:
      if (*((unsigned char *)this + 34652) && *((unsigned char *)this + 34653))
      {
        if (*((unsigned char *)this + 34654))
        {
          if (*((unsigned char *)this + 34655))
          {
            if (*((unsigned __int16 *)this + 17320) == *((unsigned __int16 *)this + 17321))
            {
              unsigned int v56 = *((_DWORD *)this + 8665);
              unsigned int v55 = *((_DWORD *)this + 8666);
              BOOL v57 = v55 >= v56;
              unsigned int v58 = v55 - v56;
              if (v58 != 0 && v57 && v58 <= 0xBB7)
              {
                uint64_t v59 = *((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34649);
                *(double *)(v59 - 72) = *((double *)this + 4335) + *(double *)(v59 - 72);
                *(_WORD *)(v59 - 24) = (*((_WORD *)this + 17356) & 0xFFFC | *(_WORD *)(v59 - 24) & 3) + 1024;
                uint64_t AlmReference = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, 5, *(unsigned __int8 *)(v59 - 4));
                uint64_t v61 = (double *)(*((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34649) - 112);
                if (!BlueFin::GlPeAlmanac::operator==(v61, (double *)AlmReference))
                {
                  BlueFin::GlPeAlmanac::operator=(AlmReference, (uint64_t)v61);
                  unsigned __int8 v62 = *(unsigned char *)(AlmReference + 108);
                  int v80 = 5;
                  v81[0] = v62;
                  BlueFin::GlGnssIdSet::Add((void *)(*((void *)this + 54) + 264), v81);
                  BlueFin::GlSetBase::Remove(*((void *)this + 54) + 240, v81[0]);
                  BlueFin::GlPeAlmMgr::Serialize((uint64_t)this, (uint64_t)&v80, 0);
                }
                *((unsigned char *)this + 34654) = 0;
                if (!*((unsigned char *)this + 34655)) {
                  goto LABEL_52;
                }
              }
            }
            goto LABEL_42;
          }
        }
        else if (*((unsigned char *)this + 34655))
        {
          if (!*((unsigned char *)this + 34656)) {
            return;
          }
LABEL_42:
          if (*((unsigned char *)this + 34656))
          {
            if (*((unsigned __int16 *)this + 17321) == *((unsigned __int16 *)this + 17322))
            {
              unsigned int v64 = *((_DWORD *)this + 8666);
              unsigned int v63 = *((_DWORD *)this + 8667);
              BOOL v57 = v63 >= v64;
              unsigned int v65 = v63 - v64;
              if (v65 != 0 && v57 && v65 >> 4 <= 0x752)
              {
                uint64_t v66 = *((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34650);
                *(double *)(v66 - 72) = *((double *)this + 4335) + *(double *)(v66 - 72);
                *(_WORD *)(v66 - 24) = (*((_WORD *)this + 17356) & 0xFFFC | *(_WORD *)(v66 - 24) & 3) + 1024;
                uint64_t v67 = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, 5, *(unsigned __int8 *)(v66 - 4));
                int v68 = (double *)(*v9 + 112 * *((unsigned __int8 *)this + 34650) - 112);
                if (!BlueFin::GlPeAlmanac::operator==(v68, (double *)v67))
                {
                  BlueFin::GlPeAlmanac::operator=(v67, (uint64_t)v68);
                  unsigned __int8 v69 = *(unsigned char *)(v67 + 108);
                  int v80 = 5;
                  v81[0] = v69;
                  BlueFin::GlGnssIdSet::Add((void *)(*((void *)this + 54) + 264), v81);
                  BlueFin::GlSetBase::Remove(*((void *)this + 54) + 240, v81[0]);
                  BlueFin::GlPeAlmMgr::Serialize((uint64_t)this, (uint64_t)&v80, 0);
                }
                *((unsigned char *)this + 34655) = 0;
              }
            }
          }
LABEL_52:
          if (*((unsigned char *)this + 34656))
          {
            if (*((unsigned char *)this + 34657))
            {
              if (*((unsigned __int16 *)this + 17322) == *((unsigned __int16 *)this + 17323))
              {
                unsigned int v71 = *((_DWORD *)this + 8667);
                unsigned int v70 = *((_DWORD *)this + 8668);
                BOOL v57 = v70 >= v71;
                unsigned int v72 = v70 - v71;
                if (v72 != 0 && v57 && v72 <= 0xBB7)
                {
                  uint64_t v73 = *((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34651);
                  *(double *)(v73 - 72) = *((double *)this + 4335) + *(double *)(v73 - 72);
                  *(_WORD *)(v73 - 24) = (*((_WORD *)this + 17356) & 0xFFFC | *(_WORD *)(v73 - 24) & 3) + 1024;
                  uint64_t v74 = BlueFin::GlPeAlmMgr::getAlmReference((uint64_t *)this, 5, *(unsigned __int8 *)(v73 - 4));
                  unsigned int v75 = (double *)(*v9 + 112 * *((unsigned __int8 *)this + 34651) - 112);
                  if (!BlueFin::GlPeAlmanac::operator==(v75, (double *)v74))
                  {
                    BlueFin::GlPeAlmanac::operator=(v74, (uint64_t)v75);
                    unsigned __int8 v76 = *(unsigned char *)(v74 + 108);
                    int v80 = 5;
                    v81[0] = v76;
                    BlueFin::GlGnssIdSet::Add((void *)(*((void *)this + 54) + 264), v81);
                    BlueFin::GlSetBase::Remove(*((void *)this + 54) + 240, v81[0]);
                    BlueFin::GlPeAlmMgr::Serialize((uint64_t)this, (uint64_t)&v80, 0);
                  }
                  *((_WORD *)this + 17328) = 0;
                }
              }
            }
          }
          return;
        }
        if (!*((unsigned char *)this + 34656) || !*((unsigned char *)this + 34657)) {
          return;
        }
        goto LABEL_52;
      }
      return;
    case 5:
      *((_WORD *)this + 17356) = (v84 >> 11) & 0xFFF;
      *((unsigned char *)this + 34653) = 1;
      goto LABEL_28;
    case 7:
      unsigned int v18 = v82;
      int v19 = (v82 >> 4) & 0x3F;
      if ((v19 - 1) > 0x23) {
        return;
      }
      uint64_t v20 = *v9 + 112 * (v19 - 1);
      *(_DWORD *)(v20 + 104) = 5;
      *(_WORD *)(v20 + 88) = (v18 >> 20) & 3;
      *(_DWORD *)(v20 + 16) = 600 * ((v18 >> 10) & 0x3FF);
      int v21 = v83;
      int v22 = v84;
      double v23 = (double)((int)(__PAIR64__(v18, v83) >> 4) >> 19);
      double v24 = (double)((v83 >> 12) & 0x7FF);
      *(unsigned char *)(v20 + 108) = v19;
      *(_WORD *)uint64_t v20 = v19;
      *(double *)(v20 + 40) = v23 * 0.001953125;
      *(double *)(v20 + 8) = v24 * 0.0000152587891;
      *(double *)(v20 + 56) = (double)((int)(__PAIR64__(v21, v22) >> 12) >> 16) * 3.14159265 * 0.0000305175781;
      double v25 = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)v20, (double)((16 * v22) >> 21) * 0.0000610351562);
      *(double *)(v20 + 48) = (double)(__int16)(v22 >> 1) * 3.14159265 * 0.0000305175781;
      *(double *)(v20 + 24) = v25;
      *(double *)(v20 + 32) = (double)((int)(__PAIR64__(v22, v12) >> 1) >> 21) * 3.14159265 * 1.16415322e-10;
      *(double *)(v20 + 64) = (double)(__int16)(v15 >> 6) * 3.14159265 * 0.0000305175781;
      *(unsigned char *)(v20 + 96) = 0;
      *(_DWORD *)(v20 + 92) = 1;
      *((_WORD *)this + 17320) = (v18 >> 22) & 0xF;
      *((unsigned char *)this + 34649) = v19;
      *((unsigned char *)this + 34654) = 1;
      *((_DWORD *)this + 8665) = *((_DWORD *)a2 + 13);
      goto LABEL_28;
    case 8:
      unsigned int v26 = v82;
      int v27 = (v82 >> 22) & 0xF;
      *((_WORD *)this + 17321) = (v82 >> 22) & 0xF;
      if (*((unsigned char *)this + 34654) && *((unsigned __int16 *)this + 17320) == v27)
      {
        v28.i32[0] = v26 << 10;
        unsigned int v29 = v83;
        v28.i32[1] = __PAIR64__(v26, v83) >> 6;
        uint64_t v30 = *((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34649);
        int32x2_t v31 = vshl_s32(v28, (int32x2_t)0xFFFFFFEDFFFFFFF0);
        v32.i64[0] = v31.i32[0];
        v32.i64[1] = v31.i32[1];
        *(float64x2_t *)(v30 - 40) = vmulq_f64(vcvtq_f64_s64(v32), (float64x2_t)xmmword_263BB39C0);
        *(_WORD *)(v30 - 110) = (v29 >> 21) & 3;
      }
      int v33 = v83;
      int v34 = (v83 >> 15) & 0x3F;
      if ((v34 - 1) > 0x23) {
        return;
      }
      uint64_t v35 = *v9 + 112 * (v34 - 1);
      *(_DWORD *)(v35 + 104) = 5;
      *(unsigned char *)(v35 + 108) = v34;
      *(_WORD *)uint64_t v35 = v34;
      *(double *)(v35 + 40) = (double)(v33 << 17 >> 19) * 0.001953125;
      int v36 = v84;
      *(double *)(v35 + 8) = (double)((__PAIR64__(v33, v84) >> 2) >> 21) * 0.0000152587891;
      *(double *)(v35 + 56) = (double)(__int16)(v36 >> 7) * 3.14159265 * 0.0000305175781;
      double v37 = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)v35, (double)((int)(__PAIR64__(v36, v12) >> 7) >> 21) * 0.0000610351562);
      *(double *)(v35 + 48) = (double)(__int16)(v15 >> 12) * 3.14159265 * 0.0000305175781;
      *(double *)(v35 + 24) = v37;
      *(double *)(v35 + 32) = (double)(v14 << 20 >> 21) * 3.14159265 * 1.16415322e-10;
      *(unsigned char *)(v35 + 96) = 0;
      *(_DWORD *)(v35 + 92) = 1;
      *((unsigned char *)this + 34650) = v34;
      *((unsigned char *)this + 34655) = 1;
      *((_DWORD *)this + 8666) = *((_DWORD *)a2 + 13);
      goto LABEL_28;
    case 9:
      unsigned int v38 = v82;
      int v39 = (v82 >> 22) & 0xF;
      *((_WORD *)this + 17322) = (v82 >> 22) & 0xF;
      if (*((unsigned char *)this + 34655) && *((unsigned __int16 *)this + 17321) == v39)
      {
        uint64_t v40 = *((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34650);
        *(_WORD *)(v40 - 24) = (v38 >> 20) & 3;
        int v41 = v83;
        unsigned int v42 = v84;
        v43.f64[0] = (double)((int)(__PAIR64__(v38, v83) >> 10) >> 16) * 3.14159265;
        int v44 = (__int16)(v83 >> 10);
        *(_DWORD *)(v40 - 96) = 600 * ((v38 >> 10) & 0x3FF);
        v43.f64[1] = (double)v44;
        *(float64x2_t *)(v40 - 48) = vmulq_f64(v43, (float64x2_t)xmmword_263BB39B0);
        *(double *)(v40 - 32) = (double)((int)(__PAIR64__(v41, v42) >> 10) >> 19) * 3.63797881e-12;
        *(_WORD *)(v40 - 110) = (v42 >> 25) & 3;
      }
      unsigned int v45 = v84;
      int v46 = (v84 >> 19) & 0x3F;
      if ((v46 - 1) > 0x23) {
        return;
      }
      uint64_t v47 = *v9 + 112 * (v46 - 1);
      *(_DWORD *)(v47 + 104) = 5;
      *(unsigned char *)(v47 + 108) = v46;
      *(_WORD *)uint64_t v47 = v46;
      *(_WORD *)(v47 + 88) = (v38 >> 20) & 3;
      *(_DWORD *)(v47 + 16) = 600 * ((v38 >> 10) & 0x3FF);
      *(double *)(v47 + 40) = (double)((int)(v45 << 13) >> 19) * 0.001953125;
      *(double *)(v47 + 8) = (double)((__PAIR64__(v45, v12) >> 6) >> 21) * 0.0000152587891;
      *(double *)(v47 + 56) = (double)(__int16)(v15 >> 11) * 3.14159265 * 0.0000305175781;
      *(double *)(v47 + 24) = BlueFin::GlPeAlmanac::deltaI_semicircles_to_i0_rad((BlueFin::GlPeAlmanac *)v47, (double)(v14 << 21 >> 21) * 0.0000610351562);
      *(unsigned char *)(v47 + 96) = 0;
      *(_DWORD *)(v47 + 92) = 1;
      *((unsigned char *)this + 34651) = v46;
      *((unsigned char *)this + 34656) = 1;
      *((_DWORD *)this + 8667) = *((_DWORD *)a2 + 13);
      goto LABEL_28;
    case 0xA:
      int v48 = v82;
      int v49 = (v82 >> 22) & 0xF;
      *((_WORD *)this + 17323) = (v82 >> 22) & 0xF;
      if (*((unsigned char *)this + 34656) && *((unsigned __int16 *)this + 17322) == v49)
      {
        uint64_t v50 = *((void *)this + 4329) + 112 * *((unsigned __int8 *)this + 34651);
        int v51 = v83;
        unsigned int v52 = v84;
        double v53 = (double)((int)(__PAIR64__(v48, v83) >> 6) >> 21);
        *(double *)(v50 - 64) = (double)(__int16)(v48 >> 6) * 3.14159265 * 0.0000305175781;
        *(double *)(v50 - 80) = v53 * 3.14159265 * 1.16415322e-10;
        v54.f64[0] = (double)(__int16)(v51 >> 11) * 3.14159265;
        v54.f64[1] = (double)((int)(__PAIR64__(v51, v52) >> 11) >> 16);
        *(float64x2_t *)(v50 - 48) = vmulq_f64(v54, (float64x2_t)xmmword_263BB39B0);
        *(double *)(v50 - 32) = (double)((int)(32 * v52) >> 19) * 3.63797881e-12;
        *(_WORD *)(v50 - 110) = (v52 >> 10) & 3;
      }
      *((unsigned char *)this + 34657) = 1;
      *((_DWORD *)this + 8668) = *((_DWORD *)a2 + 13);
      goto LABEL_28;
    default:
      goto LABEL_28;
  }
}

unsigned __int8 *BlueFin::GlPeAlmMgr::SerializeAll(BlueFin::GlPeAlmMgr *this, BlueFin::GlPeEngineCallBacks *a2)
{
  for (uint64_t i = 0; i != 7; ++i)
  {
    uint64_t v5 = *((void *)this + 54) + 48 * i;
    unsigned __int8 v9 = *(unsigned char *)(v5 + 32);
    memcpy(v13, *(const void **)(v5 + 24), 4 * v9);
    __int16 v11 = 0;
    unsigned __int8 v10 = 0;
    int v12 = v13[0];
    while (1)
    {
      uint64_t result = BlueFin::GlSetIterator::operator++(&v9);
      if (v10 == v9) {
        break;
      }
      int v7 = i;
      char v8 = v11;
      BlueFin::GlPeAlmMgr::Serialize((uint64_t)this, (uint64_t)&v7, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAlmanacData::SerializeImpl()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v2) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 3;
  }
  if (v3 >= 4)
  {
    DeviceFaultNotify("glpe_almmgr.cpp", 2521, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", 2521, "ucVersion >= 1 && ucVersion <= 3");
  }
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  if (v1 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 40;
    char v10 = v3;
    uint64_t v11 = 0x1000000000000;
    char v8 = &unk_270EBA2F0;
    char v12 = v3;
    uint64_t v6 = *(unsigned int *)(v0 + 112);
    if (v3 < 2)
    {
      if (v6) {
        return 0;
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v8, BlueFin::GlImplGnss::m_aucEnabledGnssTable[v6]);
    }
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(unsigned __int8 *)(v5 + 116));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v5 + 10));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 16));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v5 + 24));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 32));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 40));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 48));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 56));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 64));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 72));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 80));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v5 + 88));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(unsigned __int8 *)(v5 + 96));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v5 + 100));
    if (v3 >= 3) {
      BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v8, *(unsigned char *)(v5 + 104));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v4, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeAlmMgr::Age(BlueFin::GlPeAlmMgr *this, const BlueFin::GlPeAlmanac *a2)
{
  unsigned int v2 = (BlueFin::GlPeTimeManager *)*((void *)this + 56);
  if (!*((_DWORD *)v2 + 644)) {
    return 0x7FFFFFFFLL;
  }
  BlueFin::GlPeTimeManager::GetTime(v2, 1, v16);
  unsigned __int8 v17 = &off_270EBC600;
  unint64_t v18 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v16, (BlueFin::GlGpsTime *)&v17);
  int v4 = *((unsigned __int16 *)a2 + 44);
  unsigned int v5 = *((_DWORD *)a2 + 4);
  v16[0].n128_u64[0] = (unint64_t)&off_270EBC600;
  double v6 = fmod((double)v5, 1.0);
  if (v6 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v7 = v6 * 4294967300.0 + 0.5;
  unsigned int v8 = v7;
  if (v7 >= 4294967300.0) {
    unsigned int v8 = -1;
  }
  v16[0].n128_u32[2] = v8;
  v16[0].n128_u32[3] = v5 + 604800 * v4;
  v16[0].n128_u64[0] = (unint64_t)&off_270EBC600;
  unint64_t v20 = __PAIR64__(v16[0].n128_u32[3], v8);
  unsigned int v9 = ((uint64_t (*)(void))v17[4])(&v17);
  v19[0] = v18;
  v19[1] = v9;
  BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v20, v19, 0x93A8000u);
  unsigned int v10 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v17[3])(&v17, HIDWORD(v20));
  unsigned int v11 = v18;
  unsigned int v12 = HIDWORD(v18);
  char v13 = v10 | v20;
  if (v10 | v20)
  {
    if (v18 < __PAIR64__(v10, v20))
    {
      unsigned int v12 = (__PAIR64__(v10 - HIDWORD(v18), v20) - v18) >> 32;
      unsigned int v11 = v20 - v18;
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
      unsigned int v12 = (v18 - __PAIR64__(v10, v20)) >> 32;
      unsigned int v11 = v18 - v20;
    }
  }
  double v15 = (double)v11 * 2.32830644e-10 + (double)v12;
  if ((v13 & ((v12 | v11) != 0)) != 0) {
    double v15 = -v15;
  }
  return ((int)v15 + 302400);
}

void BlueFin::GlPeAlmMgr::Invisible(uint64_t a1, int a2, unsigned int a3, double *a4, uint64_t a5, void *a6, int a7, int a8, long long a9, long long a10, int a11, uint64_t a12, uint64_t a13, unint64_t a14, int __src, uint64_t a16, int a17, long long a18, long long a19, long long a20,long long a21,__int16 a22,int a23,char a24,int a25,int a26,char a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,uint64_t a46,uint64_t a47)
{
  a47 = *MEMORY[0x263EF8340];
  bzero(*(void **)a5, ((4 * *(unsigned __int8 *)(a5 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (!a2)
  {
    unsigned int v81 = a4;
    memset(var10, 0, sizeof(var10));
    memset(v88, 0, sizeof(v88));
    BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(a1 + 448), a3, 1, (uint64_t)&a30);
    uint64_t v86 = &off_270EBC600;
    unint64_t v87 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&a30, (BlueFin::GlGpsTime *)&v86);
    uint64_t v53 = 0;
    a44 = 0u;
    a45 = 0u;
    a42 = 0u;
    a43 = 0u;
    a40 = 0u;
    a41 = 0u;
    a38 = 0u;
    a39 = 0u;
    a36 = 0u;
    a37 = 0u;
    a34 = 0u;
    a35 = 0u;
    a32 = 0u;
    a33 = 0u;
    a30 = 0u;
    a31 = 0u;
    do
    {
      float64x2_t v54 = (char *)&a30 + v53;
      *float64x2_t v54 = 0;
      *((_DWORD *)v54 + 1) = 0;
      v53 += 8;
    }
    while (v53 != 256);
    unsigned __int8 v55 = 0;
    a28 = 0u;
    a29 = 0u;
    unsigned __int8 v56 = 1;
    for (i = 1; i <= 0x20u; unsigned __int8 v56 = ++i)
    {
      BOOL v57 = (char *)&a30 + 8 * v56;
      *(v57 - 8) = 0;
      unsigned int v58 = v57 - 8;
      *((_DWORD *)v58 + 1) = 0;
      a26 = 7;
      a27 = 0;
      __src = -65536;
      a16 = 0;
      a18 = 0u;
      a19 = 0u;
      a20 = 0u;
      a21 = 0u;
      a22 = 0;
      a17 = 0;
      a23 = -1;
      a24 = 0;
      if (BlueFin::GlPeAlmMgr::GetAlm(a1, 0, v56, (uint64_t)&__src, 1, 1))
      {
        BlueFin::GlPeAlmanac::GetToa((BlueFin::GlPeAlmanac *)&__src, (const BlueFin::GlGpsTime *)&v86, (uint64_t)&a13);
        unsigned int v60 = v87;
        unsigned int v61 = HIDWORD(v87);
        if (a14)
        {
          if (v87 < a14)
          {
            unsigned int v61 = (__PAIR64__(HIDWORD(a14) - HIDWORD(v87), a14) - v87) >> 32;
            unsigned int v60 = a14 - v87;
            char v62 = 1;
          }
          else
          {
            char v62 = 0;
            unsigned int v61 = (v87 - a14) >> 32;
            unsigned int v60 = v87 - a14;
          }
        }
        else
        {
          char v62 = 0;
        }
        if ((v62 & ((v61 | v60) != 0)) != 0) {
          double v63 = -((double)v60 * 2.32830644e-10 + (double)v61);
        }
        else {
          double v63 = (double)v60 * 2.32830644e-10 + (double)v61;
        }
        int v84 = 4;
        float v64 = BlueFin::GlPeAsstMgr::ComputeElevation(*(void *)(a1 + 440), (unsigned __int8 *)&i, (uint64_t)&v84, a3, 0);
        float v66 = fmodf(v64, 4295000000.0);
        if (v64 <= 4295000000.0) {
          float v66 = v64;
        }
        if (v66 < -4295000000.0) {
          float v66 = -fmodf(-v66, 4295000000.0);
        }
        if (v66 < 0.0) {
          unsigned int v67 = -(float)-v66;
        }
        else {
          LOBYTE(v67) = v66;
        }
        if ((v67 & 0x80) != 0
          && BlueFin::GlPeAlmMgr::GetSatPos(v63, v65, (uint64_t)&__src, (uint64_t)var10, 0)
          && BlueFin::ecef2lla((double *)var10, (uint64_t)v88))
        {
          double v82 = 0.0;
          double v83 = 0.0;
          BlueFin::greatCircleDistAndCourse(v81, v88, &v83, &v82);
          uint64_t v68 = i;
          *unsigned int v58 = i;
          BOOL v69 = v83 * 1000.0 < 0.0;
          if (v83 * 1000.0 == (double)(int)(v83 * 1000.0)) {
            BOOL v69 = 0;
          }
          *((_DWORD *)v58 + 1) = (int)(v83 * 1000.0) - v69;
          BOOL v70 = v82 / 0.785398163 < 0.0;
          if (v82 / 0.785398163 == (double)(int)(v82 / 0.785398163)) {
            BOOL v70 = 0;
          }
          int v71 = (int)(v82 / 0.785398163) - v70;
          if (v71 >= 7) {
            LOBYTE(v71) = 7;
          }
          *((unsigned char *)&a28 + v68 - 1) = v71;
          ++v55;
        }
      }
    }
    BlueFin::GlStdLib::QsortImpl((char *)&a30, (void *)0x20, 8u, (uint64_t (*)(char *, char *))AlmMgr_SortSvIds, (int (*)(const void *, const void *))&__src, v59);
    a13 = 0;
    if (v55)
    {
      unsigned __int8 v72 = 0;
      unsigned __int8 v73 = 1;
      do
      {
        uint64_t v74 = 0;
        unsigned int v75 = *(_DWORD **)a5;
        do
        {
          uint64_t v76 = *((unsigned __int8 *)&a30 + v74);
          if ((v76 - 1) <= 0xBB)
          {
            if (*(_DWORD *)((char *)&a30 + v74 + 4))
            {
              uint64_t v77 = v76 >> 5;
              unint64_t v78 = v75[v77];
              if (((v78 >> (v76 & 0x1F)) & 1) == 0)
              {
                uint64_t v79 = *((unsigned __int8 *)&a28 + v76 - 1);
                unsigned int v80 = *((unsigned __int8 *)&a13 + v79);
                if (v80 < v73)
                {
                  v75[v77] = v78 | (1 << (v76 & 0x1F));
                  *((unsigned char *)&a13 + v79) = v80 + 1;
                  *((unsigned char *)&__src + v72++) = v76;
                  if (v55 <= v72) {
                    break;
                  }
                }
              }
            }
          }
          v74 += 8;
        }
        while (v74 != 256);
        if (v55 <= v72) {
          break;
        }
        ++v73;
      }
      while (v73 <= v55);
      if (v55 != v72)
      {
        DeviceFaultNotify("glpe_almmgr.cpp", 3906, "Invisible", (char)"ucInvisibleSvIdCount == ucSatsAdded");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_almmgr.cpp", 3906, "ucInvisibleSvIdCount == ucSatsAdded");
      }
      if (a6) {
        memcpy(a6, &__src, v55);
      }
    }
  }
}

uint64_t BlueFin::GlBdAlmListener::Update()
{
  return GlCustomLog(11, "GlPeAlmMgr GlBdAlmListener::Update() disabled.\n");
}

uint64_t BlueFin::GlBdSvsGloHealthListener::Update()
{
  return GlCustomLog(11, "GlPeAlmMgr GlBdSvsGloHealthListener::Update() disabled.\n");
}

void BlueFin::GlPeAlmanacData::~GlPeAlmanacData(BlueFin::GlPeAlmanacData *this)
{
}

void BlueFin::GlBdAlmListener::~GlBdAlmListener(BlueFin::GlBdAlmListener *this)
{
}

void BlueFin::GlBdSvsGloHealthListener::~GlBdSvsGloHealthListener(BlueFin::GlBdSvsGloHealthListener *this)
{
}

void BlueFin::GlPeAsstMgr::SetDataSubFrmMeas(BlueFin::GlPeIonoMgr **this, const BlueFin::GlDataSubFrmMeas *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8))
  {
    if (v2 < 0x21)
    {
LABEL_3:
      BlueFin::GlPeNavMsgParser::SetDataSubFrmMeas(this + 14981, a2);
      return;
    }
    if (v2 < 0x34)
    {
      BlueFin::GlPeSbasMgr::HandleMsg(this[920], a2);
    }
    else if (v2 >= 0x42)
    {
      if (v2 < 0x4C) {
        goto LABEL_3;
      }
      if (v2 >= 0x8B)
      {
        if ((v2 + 81) < 0xEu) {
          BlueFin::GlPeNavMsgParser::SetNicDataSubFrmMeas((uint64_t)(this + 14981), a2);
        }
      }
      else
      {
        BlueFin::GlPeBdIFMgr::SetDataSubFrmMeas(*((BlueFin::GlPeBdIFMgr **)this[923] + 68), a2);
      }
    }
  }
}

uint64_t BlueFin::GlPeAsstMgr::GetAsstStat(uint64_t *a1, int *a2, int a3)
{
  *((void *)&v114 + 1) = *MEMORY[0x263EF8340];
  BlueFin::GlPeAsstMgr::InitAidRequest(a2, a3);
  if (!*(_DWORD *)(*a1 + 2576))
  {
    int v58 = *a2 | 0xF;
    *a2 = v58;
    return GlCustomLog(14, "<glAid> REQUEST no time 0x%x\n", v58);
  }
  unsigned int v5 = a1 + 8900;
  GlCustomLog(13, "<glAid> SRC  GNSS   ID      Age  Expires  [Calib]\n");
  HIDWORD(v85) = *((_DWORD *)a1 + 25);
  unsigned int v6 = *(_DWORD *)(*a1 + 2568);
  double v7 = (double)(int)v6;
  if (v6 <= 0xFF9222FE) {
    double v7 = (double)v6;
  }
  BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)*a1, 0, 0, (uint64_t)(a2 + 33), v7);
  double v8 = (double)*(__int16 *)(*(void *)v5 + 2) * 0.000000001;
  double v9 = (double)*(__int16 *)(*(void *)v5 + 10) * 0.000000001;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  a2[54] = (int)(v8 * 1000000000.0);
  double v14 = fmod(v9 * 1000000000.0, 4294967300.0);
  if (v9 * 1000000000.0 <= 4294967300.0) {
    double v14 = v9 * 1000000000.0;
  }
  if (v14 < -4294967300.0) {
    double v14 = -fmod(-v14, 4294967300.0);
  }
  if (v14 < 0.0) {
    unsigned int v15 = --v14;
  }
  else {
    LOWORD(v15) = v14;
  }
  *((_WORD *)a2 + 110) = v15;
  uint64_t v16 = a1[2];
  uint64_t v88 = (uint64_t)a1;
  if (*(unsigned __int8 *)(v16 + 9191) + 1 == *(unsigned __int8 *)(v16 + 9190))
  {
    if (*(int *)(v16 + 19352) <= 1) {
      *(_DWORD *)(v16 + 19352) = 2;
    }
    unsigned int v17 = *(_DWORD *)(*(void *)v16 + 2568);
    v103[8] = 8;
    memset(&v103[12], 0, 32);
    BlueFin::GlPeRangeAidGen::update(v16, v17, (BlueFin::GlGnssSet *)v103, 0, v10, v11, v12, v13, v69, v70, v71, v72, v73, v74, v75, v76, v78, v80, __dst,
      __dst_4,
      v83,
      v85,
      v86,
      (uint64_t)a1,
      v89,
      v91,
      v94,
      (uint64_t)v96,
      v98.n128_i64[0],
      v98.n128_i64[1],
      v99,
      v100,
      v101,
      v102,
      (uint64_t)&v103[12],
      *(uint64_t *)&v103[8],
      0,
      *(uint64_t *)&v103[24],
      0,
      *(uint64_t *)&v103[40],
      *(uint64_t *)&v103[48],
      v104,
      SDWORD2(v104),
      SBYTE12(v104),
      v105,
      SBYTE4(v105),
      *((uint64_t *)&v105 + 1),
      *(uint64_t *)v106,
      *(long long *)&v106[8],
      *(long long *)&v106[24],
      *(long long *)&v106[40],
      v107,
      v108,
      v109,
      v110,
      v111,
      v112,
      v113,
      v114,
      v115,
      v116,
      v117);
    a1 = (uint64_t *)v88;
  }
  uint64_t v18 = 0;
  int v90 = 0;
  uint64_t v77 = (char *)a1 + 120017;
  uint64_t v79 = a1 + 7;
  int v84 = a1 + 48;
  uint32x2_t v95 = a2 + 38;
  __int32 v97 = (BlueFin::GlPeAlmMgr *)(a1 + 4264);
  do
  {
    Mgr = (unsigned int *)BlueFin::GlPeGnssEphemerisMgr::GetMgr(v84, v18);
    if (Mgr)
    {
      unint64_t v20 = Mgr;
      uint64_t v21 = Mgr[3];
      if (v21 > 6) {
        unint64_t v22 = 0;
      }
      else {
        unint64_t v22 = 0xFFFFFFFFFFFFFFFFLL >> qword_263BB3B08[(int)v21];
      }
      uint64_t v92 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v21];
      *(void *)&v95[2 * v92] = v22;
      uint64_t v23 = *((unsigned __int8 *)a2 + 228);
      *((_DWORD *)&v112 + v18 + 3) = 0;
      *((_DWORD *)&v111 + v18) = 0;
      __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*(void *)v88, 1, &v98);
      (*(void (**)(void *__return_ptr, unsigned int *, __n128))(*(void *)v20 + 304))((void *)&v107 + 1, v20, Time);
      uint64_t v25 = (uint64_t)&a2[4 * v23 + 58];
      v103[0] = v108;
      memcpy(&v103[8], *((const void **)&v107 + 1), 4 * v108);
      *(_WORD *)&v103[2] = 0;
      v103[1] = 0;
      *(_DWORD *)&v103[4] = *(_DWORD *)&v103[8];
      BlueFin::GlSetIterator::operator++(v103);
      uint64_t v87 = v25;
      while (v103[1] != v103[0])
      {
        BYTE12(v110) = v103[2];
        uint64_t v26 = (*(uint64_t (**)(unsigned int *, char *, uint64_t))(*(void *)v20 + 112))(v20, (char *)&v110 + 12, 1);
        int v27 = (BlueFin::GlPeEphemeris *)v26;
        if (v26)
        {
          int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 152))(v26);
          if ((v28 - 1) <= 1)
          {
            *(unsigned char *)uint64_t v25 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v20[3]];
            int v29 = BYTE12(v110);
            *(unsigned char *)(v25 + 1) = BYTE12(v110);
            if ((v29 - 1) >= 0x3F)
            {
              DeviceFaultNotify("glpe_asstmgr.cpp", 590, "GetEph", (char)"ucGnssIdIndex < _DIM(rtAidRequest.ucIODE)");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_asstmgr.cpp", 590, "ucGnssIdIndex < _DIM(rtAidRequest.ucIODE)");
            }
            uint64_t v30 = (v29 - 1);
            *((unsigned char *)a2 + v30 + 68) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)v27 + 160))(v27);
            int v31 = (*(uint64_t (**)(BlueFin::GlPeEphemeris *, __n128 *))(*(void *)v27 + 248))(v27, &v98);
            if (v31)
            {
              *(_DWORD *)(v25 + 4) = v31;
              *(_DWORD *)(v25 + 8) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)v27 + 88))(v27)
                                   - v31;
              if (*(_DWORD *)(v25 + 4) >= 0x3Du) {
                *(void *)&v95[2 * v92] &= ~(1 << v30);
              }
              *((void *)&v107 + 1) = v25;
              BlueFin::GlOrbitInfoValidityPrinter::Print((BlueFin::GlOrbitInfoValidityPrinter *)((char *)&v107 + 8), "BE");
              if (v28 == 2) {
                ++*((_DWORD *)&v111 + v18);
              }
              v25 += 16;
              unsigned int v32 = ++*((unsigned char *)a2 + 228);
              if (v32 > 0xB1) {
                break;
              }
            }
            BlueFin::GlPeEphemeris::GetEphTime(v27, (const BlueFin::GlPeGnssTime *)&v98, (uint64_t)&v107 + 8);
            *((void *)&v109 + 1) = &off_270EBC600;
            *(void *)&long long v110 = 0;
            BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)((char *)&v107 + 8), (BlueFin::GlGpsTime *)((char *)&v109 + 8));
            unsigned int v33 = (*(uint64_t (**)(char *))(*((void *)&v109 + 1) + 32))((char *)&v109 + 8);
            unsigned int v34 = (*(uint64_t (**)(char *))(*((void *)&v109 + 1) + 32))((char *)&v109 + 8);
            LODWORD(v35) = v110;
            double v36 = (double)v35 * 2.32830644e-10 + (double)(v34 % 0x93A80);
            double v37 = fmod(v36, 4294967300.0);
            if (v36 <= 4294967300.0) {
              double v37 = v36;
            }
            if (v37 < -4294967300.0) {
              double v37 = -fmod(-v37, 4294967300.0);
            }
            unsigned int v38 = v33 / 0x93A80;
            if (v37 < 0.0) {
              signed int v39 = --v37;
            }
            else {
              signed int v39 = v37;
            }
            unint64_t v40 = (v39 + 1800) / 0xE10uLL;
            unsigned int v41 = *((unsigned __int16 *)a2 + 32);
            if (v41 < v38 || v41 == v38 && *((unsigned __int8 *)a2 + 66) < v40)
            {
              *((_WORD *)a2 + 32) = v38;
              *((unsigned char *)a2 + 66) = v40;
            }
          }
        }
        BlueFin::GlSetIterator::operator++(v103);
      }
      unint64_t v42 = (unint64_t)(v25 - v87) >> 4;
      *((_DWORD *)&v112 + v18 + 3) = v42;
      int v43 = *((unsigned __int8 *)a2 + 3084);
      if (v43 != 178)
      {
        unint64_t v93 = (unint64_t)(v25 - v87) >> 4;
        if (v18 < 7)
        {
          uint64_t v44 = 0;
          uint64_t v45 = qword_263BB3B40[(int)v18];
          uint64_t v46 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v18];
          HIDWORD(v110) = 4;
          uint64_t v47 = v45 - 1;
          do
          {
            v98.n128_u32[0] = v18;
            v98.n128_u8[4] = v44 + 1;
            *(_DWORD *)&v106[16] = 7;
            v106[20] = 0;
            *(_DWORD *)double v103 = -65536;
            *(void *)&v103[8] = 0;
            memset(&v103[24], 0, 32);
            long long v104 = 0u;
            long long v105 = 0u;
            *(_WORD *)int v106 = 0;
            *(_DWORD *)&v103[16] = 0;
            *(_DWORD *)&v106[4] = -1;
            v106[8] = 0;
            if (!BlueFin::GlPeAlmMgr::GetAlm((uint64_t)v97, v18, (v44 + 1), (uint64_t)v103, 1, 0))goto LABEL_62; {
            int v48 = &a2[4 * v43];
            }
            *((unsigned char *)v48 + 3088) = v46;
            *((unsigned char *)v48 + 3089) = v44 + 1;
            v48[775] = 0x7FFFFFFF;
            if (v18 == 1)
            {
              a2[4 * v43 + 774] = 604800;
              int v49 = 15778463;
            }
            else
            {
              int v50 = BlueFin::GlPeAlmMgr::Age(v97, (const BlueFin::GlPeAlmanac *)v103);
              a2[4 * v43 + 774] = v50;
              int v49 = 15778463 - v50;
              if (v50 >= 15778463) {
                goto LABEL_52;
              }
            }
            a2[4 * v43 + 773] = v49;
LABEL_52:
            *((void *)&v107 + 1) = v48 + 772;
            BlueFin::GlOrbitInfoValidityPrinter::Print((BlueFin::GlOrbitInfoValidityPrinter *)((char *)&v107 + 8), "ALM");
            if ((*(void *)&v95[2 * v46] & (1 << v44)) != 0
              && HIDWORD(v85) != -1
              && a2[4 * v43 + 774] != 0x7FFFFFFF)
            {
              DWORD2(v109) = -1028390912;
              char v51 = BlueFin::GlPeAsstMgr::computeAzElCommon((uint64_t *)v88, (unsigned int *)&v98, 0xFF9222FF, 0, (uint64_t)&v110 + 12, 0, (float *)&v109 + 2);
              char v52 = *((float *)&v109 + 2) >= 0.0 ? v51 : 0;
              if ((v52 & 1) == 0) {
                *(void *)&v95[2 * v46] &= ~(1 << v44);
              }
            }
            LOBYTE(v43) = v43 + 1;
            if (v43 >= 0xB3u)
            {
              DeviceFaultNotify("glpe_asstmgr.cpp", 807, "GetAlm", (char)"ucCurIdx <= _DIM(rtAlmOrbitInfo.otEphInfo)");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_asstmgr.cpp", 807, "ucCurIdx <= _DIM(rtAlmOrbitInfo.otEphInfo)");
            }
            if (v43 == 178) {
              break;
            }
LABEL_62:
            ++v44;
          }
          while (v47 != v44);
        }
        LODWORD(v42) = v93;
      }
      v90 += v42;
    }
    ++v18;
  }
  while (v18 != 7);
  DWORD2(v107) = 0;
  uint64_t v53 = v88;
  if (*(_DWORD *)(v88 + 100) == -1)
  {
    unsigned int AgeS = 0;
    char v56 = 0;
    LOBYTE(v55) = 0;
    BOOL v57 = 0;
    int v60 = -1;
  }
  else
  {
    memset(v103, 0, 40);
    *(void *)&v103[40] = -1;
    v103[48] = 0;
    LODWORD(v104) = 0;
    *((void *)&v104 + 1) = 0xC15B773FC0000000;
    *(void *)&long long v105 = &off_270EBC600;
    *((void *)&v105 + 1) = 0;
    memset(v106, 0, 49);
    if (BlueFin::GlPeAsstPosMgr::GetLastAgnss((uint64_t)v79, (uint64_t)v103, (_DWORD *)&v107 + 2))
    {
      unsigned int AgeS = DWORD2(v107);
      LOBYTE(v55) = DWORD2(v107) != -1;
      char v56 = v106[48];
      uint64_t v53 = v88;
      if (v106[48])
      {
        char v56 = 0;
        BOOL v57 = 1;
      }
      else
      {
        BOOL v57 = *(unsigned char *)(*(void *)(v88 + 8) + 88784) != 0;
      }
LABEL_84:
      int v60 = 2;
    }
    else
    {
      uint64_t v53 = v88;
      if (v103 != v79)
      {
        long long v61 = *(_OWORD *)(v88 + 72);
        *(_OWORD *)double v103 = *(_OWORD *)(v88 + 56);
        *(_OWORD *)&v103[16] = v61;
        *(void *)&v103[32] = *(void *)(v88 + 88);
      }
      int v60 = *(_DWORD *)(v88 + 100);
      unsigned int AgeS = -1;
      DWORD2(v107) = -1;
      if (v60 == -1)
      {
        BOOL v55 = 0;
      }
      else
      {
        unsigned int AgeS = BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)(v88 + 112), *(BlueFin::GlPeTimeManager **)(v88 + 352));
        DWORD2(v107) = AgeS;
        BOOL v55 = AgeS != -1;
        uint64_t v53 = v88;
      }
      char v56 = *(unsigned char *)(v53 + 104);
      if (v56)
      {
        if (v60 == 2 && v55)
        {
          BOOL v57 = 0;
          char v56 = AgeS > 9;
          LOBYTE(v55) = 1;
          goto LABEL_84;
        }
        BOOL v57 = 0;
        char v56 = 1;
      }
      else
      {
        BOOL v57 = 0;
      }
    }
    long long v63 = *(_OWORD *)&v103[16];
    *(_OWORD *)(a2 + 6) = *(_OWORD *)v103;
    *(_OWORD *)(a2 + 10) = v63;
    *((void *)a2 + 7) = *(void *)&v103[32];
    a2[4] = AgeS;
  }
  if (SHIDWORD(v112) < 6 || SDWORD1(v113) <= 5 && (int)v111 <= 5) {
    *a2 |= 4u;
  }
  if (v56) {
    goto LABEL_93;
  }
  int v64 = v60 != 2 || v57;
  if (AgeS >= 0xE11) {
    LOBYTE(v55) = 0;
  }
  if ((v60 - 1) > 1 || !v64 || !v55) {
LABEL_93:
  }
    *a2 |= 2u;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v98, &v98.n128_u32[3], 8u, (const void **)(*(void *)(v53 + 16) + 19304));
  *(void *)double v103 = &v103[12];
  v103[8] = 8;
  *(_OWORD *)&v103[12] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  *(_OWORD *)&v103[28] = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::operator&=((uint64_t)&v98, (uint64_t)v103);
  unsigned int v65 = 0;
  float v66 = (_DWORD *)(v98.n128_u64[0] + 4 * v98.n128_u8[8] - 4);
  do
  {
    if (*v66)
    {
      unsigned int v67 = *v66 - (((*v66 >> 1) & 0x5B6DB6DB) + ((*v66 >> 2) & 0x9249249));
      unsigned int v65 = ((v67 + (v67 >> 3)) & 0xC71C71C7) + v65 - 63 * (((v67 + (v67 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v66;
  }
  while ((unint64_t)v66 >= v98.n128_u64[0]);
  int v68 = *a2;
  if (v65 <= 4u && (v68 & 0xE) != 0 || !*v77)
  {
    v68 |= 1u;
    *a2 = v68;
  }
  return GlCustomLog(15, "<glAid> REQUEST NAV 0x%x  %d  0x%x AcqAsst(%u) Loc(%d, %u)\n", v68, v90, ~*v95, v65, v60, DWORD2(v107));
}

void BlueFin::GlPeAsstMgr::SetCoarseEstimatedPosition(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a1 + 119952;
  *(_OWORD *)(a1 + 119960) = *(_OWORD *)a2;
  *(void *)(a1 + 119976) = *(void *)(a2 + 16);
  BlueFin::lla2ecef((double *)a2, (uint64_t)&v5);
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 48) = v6;
  *(_DWORD *)(v4 + 56) = a3;
  *(unsigned char *)uint64_t v4 = a3 < 0x615299;
}

void *BlueFin::GlPeAsstMgr::SerializeAllEph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = 0;
  double v8 = (void *)(a1 + 384);
  do
  {
    uint64_t result = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v8, v7);
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*result + 208))(result, a2, a3, a4);
    }
    ++v7;
  }
  while (v7 != 7);
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::ClearSuspectedBadDecode(BlueFin::GlPeAsstMgr *this)
{
  int v2 = 0;
  int v3 = 0;
  uint64_t v4 = (void *)((char *)this + 384);
  do
  {
    int v5 = v3;
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(v4, v2);
    int v3 = (Mgr != 0) | v5;
    if (Mgr && (v5 & 1) == 0) {
      int v3 = (*(uint64_t (**)(void *))(*Mgr + 280))(Mgr);
    }
    ++v2;
  }
  while (v2 != 7);
  return v3 & 1;
}

void *BlueFin::GlPeAsstMgr::MarkSuspectedBadDecode(uint64_t a1, uint64_t a2)
{
  uint64_t result = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1 + 384), *(_DWORD *)a2);
  if (result)
  {
    char v4 = *(unsigned char *)(a2 + 4);
    return (void *)(*(uint64_t (**)(void *, char *, void))(*result + 288))(result, &v4, 0);
  }
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::MarkUnverified(uint64_t a1, unsigned __int8 *a2)
{
  int v6 = 7;
  unsigned __int8 v7 = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744), a2, (uint64_t)&v6);
  unsigned __int8 v4 = v7;
  if (v7 - 1 <= 0x3E)
  {
    uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1 + 384), v6);
    if (result)
    {
      unsigned __int8 v5 = v4;
      return (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)result + 296))(result, &v5);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::GetUnhealthy@<X0>(BlueFin::GlPeAsstMgr *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  *(void *)(a2 + 168) = a2;
  do
  {
    uint64_t v4 = *(void *)(a2 + 168) + v3;
    *(void *)(v4 + 12) = 0;
    *(void *)uint64_t v4 = v4 + 12;
    *(unsigned char *)(v4 + 8) = 2;
    v3 += 24;
  }
  while (v3 != 168);
  unsigned int v5 = 0;
  int v6 = (void *)((char *)this + 384);
  do
  {
    uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr(v6, v5);
    if (result)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
      uint64_t v9 = BlueFin::GlGnssSet::operator()(a2, v5);
      uint64_t result = BlueFin::GlSetBase::operator|=(v9, v8);
    }
    ++v5;
  }
  while (v5 != 7);
  return result;
}

uint64_t BlueFin::GlPeAsstMgr::SvId2Gnss(BlueFin::GlPeAsstMgr *this, const BlueFin::GlSvIdSet *a2, BlueFin::GlGnssSet *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *((void *)a3 + 21);
  do
  {
    bzero(*(void **)(v7 + v6), ((4 * *(unsigned __int8 *)(v7 + v6 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v6 += 24;
  }
  while (v6 != 168);
  unsigned __int8 v15 = *((unsigned char *)a2 + 8);
  memcpy(v19, *(const void **)a2, 4 * v15);
  __int16 v17 = 0;
  unsigned __int8 v16 = 0;
  int v18 = v19[0];
  BlueFin::GlSetIterator::operator++(&v15);
  if (v16 == v15)
  {
    LOBYTE(v8) = 1;
  }
  else
  {
    uint64_t v9 = (BlueFin::GlPeGloFcnOsnMgr **)((char *)this + 119744);
    uint64_t v10 = 1;
    do
    {
      unsigned __int8 v12 = v17;
      int v20 = 7;
      unsigned __int8 v21 = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss(v9, &v12, (uint64_t)&v20);
      uint64_t v8 = 0;
      int v13 = v20;
      unsigned __int8 v14 = v21;
      if (v21 - 1 <= 0x3E)
      {
        BlueFin::GlGnssSet::Add((uint64_t)a3, &v13);
        uint64_t v8 = v10;
      }
      BlueFin::GlSetIterator::operator++(&v15);
      uint64_t v10 = v8;
    }
    while (v16 != v15);
  }
  return v8 & 1;
}

uint64_t BlueFin::GlPeAsstMgr::GetIODE(uint64_t a1, unsigned __int8 *a2, _DWORD *a3, _DWORD *a4)
{
  *a4 = -1;
  *a3 = -1;
  unsigned int v9 = 7;
  v10[0] = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(a1 + 119744), a2, (uint64_t)&v9);
  if ((int)v9 <= 6 && v10[0] - 1 <= 0x3E)
  {
    uint64_t result = (uint64_t)BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(a1 + 384), v9);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)result + 112))(result, v10, 1);
      if (result)
      {
        uint64_t v8 = result;
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
        *a3 = result;
        if (v9 <= 4 && ((1 << v9) & 0x19) != 0) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 192))(v8, 5);
        }
        *a4 = result;
      }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeAsstMgr::HandleBadEph(BlueFin::GlPeGloFcnOsnMgr **this, const void **a2, int **a3)
{
  unint64_t v42 = (int *)v44;
  char v43 = 8;
  memset(v44, 0, 32);
  uint64_t v6 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v39, (unsigned int *)v41, 8u, a2);
  unint64_t v35 = &v37;
  LOBYTE(v36) = 8;
  long long v37 = 0u;
  long long v38 = 0u;
  uint64_t v25 = (BlueFin::GlSetBase *)a3;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)v6, (int **)&v35, a3);
  BlueFin::GlSetBase::operator=((uint64_t)&v39, (uint64_t)&v35);
  v41[0] = v37;
  v41[1] = v38;
  LOBYTE(v35) = v40;
  memcpy(&v36, v39, 4 * v40);
  WORD1(v35) = 0;
  BYTE1(v35) = 0;
  HIDWORD(v35) = v36;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v35);
  while (BYTE1(v35) != v35)
  {
    unsigned __int8 v7 = BYTE2(v35);
    LOBYTE(v28) = BYTE2(v35);
    LODWORD(__src) = 7;
    BYTE4(__src) = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(this + 14968, (unsigned __int8 *)&v28, (uint64_t)&__src);
    char v8 = BYTE4(__src);
    if (BYTE4(__src) - 1 <= 0x3E)
    {
      Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(this + 48, (int)__src);
      if (Mgr)
      {
        uint64_t v10 = Mgr;
        LOBYTE(__src) = v8;
        uint64_t v11 = (*(uint64_t (**)(void *, void **, void))(*Mgr + 112))(Mgr, &__src, 0);
        if (v11)
        {
          uint64_t v13 = v11;
          unsigned int v14 = *((_DWORD *)*this + 642);
          v12.n128_f64[0] = (double)(int)v14;
          if (v14 <= 0xFF9222FE) {
            v12.n128_f64[0] = (double)v14;
          }
          if (!(*(unsigned int (**)(void *, void **, uint64_t, __n128))(*v10 + 64))(v10, &__src, 1, v12)&& (*(unsigned int (**)(uint64_t))(*(void *)v13 + 152))(v13) == 3)
          {
            *(int *)((char *)v42 + (((unint64_t)v7 >> 3) & 0x1C)) |= 1 << v7;
          }
        }
      }
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v35);
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v28, (unsigned int *)&v30, 8u, a2);
  unint64_t v35 = &v37;
  LOBYTE(v36) = 8;
  long long v37 = 0u;
  long long v38 = 0u;
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v28, (int **)&v35, (int **)v25);
  BlueFin::GlSetBase::operator=((uint64_t)&v28, (uint64_t)&v35);
  long long v30 = v37;
  long long v31 = v38;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v34, 8u, (const void **)&v28);
  unint64_t v35 = &v37;
  LOBYTE(v36) = 8;
  long long v37 = 0u;
  long long v38 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v35, &v42);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v35);
  v34[0] = v37;
  v34[1] = v38;
  LOBYTE(v35) = v33;
  memcpy(&v36, __src, 4 * v33);
  WORD1(v35) = 0;
  BYTE1(v35) = 0;
  HIDWORD(v35) = v36;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v35);
  while (BYTE1(v35) != v35)
  {
    unsigned __int8 v15 = BYTE2(v35);
    unsigned __int8 v16 = BYTE2(v35);
    unsigned __int8 v27 = BYTE2(v35);
    if (BYTE2(v35) - 1 <= 0xBB)
    {
      LODWORD(v26[0]) = 7;
      BYTE4(v26[0]) = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss(this + 14968, &v27, (uint64_t)v26);
      uint64_t v17 = LODWORD(v26[0]);
      if (SLODWORD(v26[0]) <= 6)
      {
        int v18 = BYTE4(v26[0]);
        if (BYTE4(v26[0]) - 1 <= 0x3E
          && (((unint64_t)*(unsigned int *)(*((void *)this[1] + 11589) + (((unint64_t)v15 >> 3) & 0x1C)) >> (v15 & 0x1F)) & 1) != 0)
        {
          unsigned int v19 = *((_DWORD *)*this + 642);
          double v20 = (double)(int)v19;
          if (v19 <= 0xFF9222FE) {
            double v20 = (double)v19;
          }
          BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)*this, 0, 0, (uint64_t)&v28, v20);
          if ((int)(HIDWORD(v28) / 0x3E8 + 604800 * (unsigned __int16)v28 - *((_DWORD *)this + v17 + 2096)) <= 86400)
          {
            unsigned __int8 v21 = "BDS";
            unint64_t v22 = "GPS";
            switch((int)v17)
            {
              case 0:
                break;
              case 1:
                unint64_t v22 = "SBAS";
                break;
              case 2:
                unint64_t v22 = "GLNS";
                break;
              case 3:
                unint64_t v22 = "QZSS";
                break;
              case 4:
                goto LABEL_26;
              default:
                uint64_t v23 = "<->";
                if (v17 == 6) {
                  uint64_t v23 = "NIC";
                }
                unsigned __int8 v21 = "GAL";
                if (v17 != 5) {
                  unsigned __int8 v21 = v23;
                }
LABEL_26:
                unint64_t v22 = v21;
                break;
            }
            GlCustomLog(14, "<SKFNAV> High LTO residual for SV (%s,%d) but not removing because LTO age for this GNSS is %d sec (threshold is %d sec)\n", v22, v18, HIDWORD(v28) / 0x3E8 + 604800 * (unsigned __int16)v28 - *((_DWORD *)this + v17 + 2096), 86400);
          }
          else
          {
            v45[0] = v16;
            BlueFin::GlPeLtoMgr::IdentifyBadLtoSvId((uint64_t)(this + 928), v45, 1);
          }
        }
      }
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v35);
  }
  BlueFin::GlSvIdSet::operator~((const void **)&v42, (uint64_t)v26);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v28, (unsigned int *)&v30, 8u, (const void **)v25);
  unint64_t v35 = &v37;
  LOBYTE(v36) = 8;
  long long v37 = 0u;
  long long v38 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v28, (int **)&v35, v26);
  BlueFin::GlSetBase::operator=((uint64_t)&v28, (uint64_t)&v35);
  long long v30 = v37;
  long long v31 = v38;
  LOBYTE(v35) = v29;
  memcpy(&v36, v28, 4 * v29);
  WORD1(v35) = 0;
  BYTE1(v35) = 0;
  HIDWORD(v35) = v36;
  for (uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v35);
        BYTE1(v35) != v35;
        uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v35))
  {
    v45[0] = BYTE2(v35);
    LODWORD(v26[0]) = 7;
    BYTE4(v26[0]) = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(this + 14968, v45, (uint64_t)v26);
    if (SLODWORD(v26[0]) <= 6 && BYTE4(v26[0]) - 1 <= 0x3E) {
      BlueFin::GlPeAsstMgr::MarkSuspectedBadDecode((uint64_t)this, (uint64_t)v26);
    }
  }
  return result;
}

void BlueFin::GlPeAsstMgr::UpdateAccumDist(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, double *a7, int a8, int a9)
{
  if (a9) {
    float v15 = 10.0;
  }
  else {
    float v15 = 5.0;
  }
  if (a4 && a5 && *(unsigned char *)(a4 + 4129))
  {
    float v16 = *(double *)(a4 + 4088);
    *(float *)(a3 + 32) = v16;
    return;
  }
  if (*(_DWORD *)a3 == -7200001)
  {
    *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
    *(void *)(a3 + 24) = *(void *)(a2 + 16);
    *(void *)(a3 + 32) = 0;
    int v17 = *a1;
  }
  else
  {
    if (*(_DWORD *)a3 == *a1) {
      return;
    }
    BlueFin::lla2ned((double *)(a3 + 8), (double *)a2, 0, &v25);
    float v18 = sqrt(v26 * v26 + v25 * v25);
    int v17 = *a1;
    float v19 = (double)(*a1 - *(_DWORD *)a3) * 0.001;
    float v20 = v18 / v19;
    BOOL v21 = v20 <= 40.0;
    if (v20 > 40.0 && a6 != 0) {
      BOOL v21 = *a7 > 100.0;
    }
    if (v15 >= v18)
    {
      if (a6)
      {
        if (*a7 > 0.1)
        {
          float v24 = *(float *)(a3 + 36) + v18;
          if (v24 > *(float *)(a3 + 32)) {
            *(float *)(a3 + 32) = v24;
          }
        }
      }
    }
    else
    {
      if ((v21 & a8) == 1)
      {
        float v23 = *(float *)(a3 + 36) + v18;
        *(float *)(a3 + 32) = v23;
        *(float *)(a3 + 36) = v23;
      }
      *(_OWORD *)(a3 + 8) = *(_OWORD *)a2;
      *(void *)(a3 + 24) = *(void *)(a2 + 16);
    }
  }
  *(_DWORD *)a3 = v17;
}

uint64_t BlueFin::GlPeAsstPosData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 8;
  }
  if (v5 >= 9)
  {
    DeviceFaultNotify("glpe_asstposmgr.cpp", 133, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 8");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_asstposmgr.cpp", 133, "ucVersion >= 1 && ucVersion <= 8");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  int v16 = 45;
  unsigned __int8 v17 = v5;
  uint64_t v18 = 0x1000000000000;
  float v15 = &unk_270EBA2F0;
  char v19 = v5;
  if (v5 >= 7) {
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, 0);
  }
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v7 + 8));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v7 + 16));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v7 + 24));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v7 + 32));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v7 + 40));
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 48) + 32))(v7 + 48);
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v15, v8 / 0x93A80);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 48) + 32))(v7 + 48);
  LODWORD(v10) = *(_DWORD *)(v7 + 56);
  double v11 = ((double)v10 * 2.32830644e-10 + (double)(v9 % 0x93A80)) * 1000.0;
  double v12 = fmod(v11, 4294967300.0);
  if (v11 <= 4294967300.0) {
    double v12 = v11;
  }
  if (v12 < -4294967300.0) {
    double v12 = -fmod(-v12, 4294967300.0);
  }
  if (v12 < 0.0) {
    int v13 = --v12;
  }
  else {
    int v13 = v12;
  }
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v13);
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, 0);
  if (v17 >= 3u)
  {
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(v7 + 64));
    if (v17 >= 4u)
    {
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(v7 + 68));
      if (v17 >= 8u) {
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, *(unsigned __int8 *)(v7 + 72));
      }
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v6, 4);
  return 1;
}

uint64_t BlueFin::stTimeOfAsstPos::operator+=(uint64_t a1, double a2)
{
  if (*(_DWORD *)a1 == 1)
  {
    double v4 = fabs(a2);
    double v5 = fmod(v4, 1.0);
    double v6 = v5 * 4294967300.0 + 0.5;
    unsigned int v7 = v6;
    if (v6 >= 4294967300.0) {
      unsigned int v7 = -1;
    }
    if (v5 < 0.0 || v5 >= 1.0)
    {
      uint64_t v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      char v19 = "glpe_timepoint.h";
      int v20 = 173;
      goto LABEL_30;
    }
    unsigned int v9 = v4;
    uint64_t v10 = *(unsigned int *)(a1 + 24);
    unsigned int v11 = *(_DWORD *)(a1 + 28);
    if (a2 < 0.0)
    {
      if (v11 > v9 || (v11 == v9 ? (BOOL v14 = v10 >= v7) : (BOOL v14 = 0), v14))
      {
        BOOL v14 = v10 >= v7;
        LODWORD(v12) = v10 - v7;
        int v16 = !v14;
        int v13 = v11 - v9 - v16;
      }
      else
      {
        if (v9 - v11 != v10 > v7 || v7 != v10)
        {
          uint64_t v18 = "!tDelta.isNegative()";
          DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
          char v19 = "glpe_datetime.h";
          int v20 = 425;
LABEL_30:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
        }
        int v13 = 0;
        LODWORD(v12) = 0;
      }
    }
    else
    {
      uint64_t v12 = v10 + v7;
      int v13 = v11 + v9 + HIDWORD(v12);
    }
    *(_DWORD *)(a1 + 24) = v12;
    *(_DWORD *)(a1 + 28) = v13;
    return a1;
  }
  if (*(_DWORD *)a1 == 2) {
    *(double *)(a1 + 8) = *(double *)(a1 + 8) + a2 * 1000.0;
  }
  return a1;
}

uint64_t BlueFin::GlPeAsstPosMgr::addRandomPosError(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  uint64_t v7 = *(void *)(a1 + 304);
  int v8 = *(_DWORD *)(v7 + 816);
  if (a3) {
    unsigned int v9 = a3;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 800) + 1;
  }
  uint64_t v10 = BlueFin::stTimeOfAsstPos::stTimeOfAsstPos((BlueFin::stTimeOfAsstPos *)v33, *(BlueFin::GlPeTimeManager **)(a1 + 296), (const BlueFin::GlGpsTime *)(a2 + 48), v9);
  if (v9)
  {
    BlueFin::stTimeOfAsstPos::operator+=((uint64_t)v10, -(double)v9);
    GlCustomLog(14, "GlPeAsstPosMgr::processAssistance - forced age %u seconds\n", v9);
  }
  long double v11 = fmod((*(double *)(a2 + 8) + *(double *)(a2 + 16) + *(double *)(a2 + 24)) * 1000000010.0, 32749.0);
  srand((int)v11);
  uint64_t v12 = *(void *)(a2 + 24);
  *(_OWORD *)unsigned int v32 = *(_OWORD *)(a2 + 8);
  *(void *)&v32[16] = v12;
  if (!v8) {
    int v8 = (int)((double)rand() * 3.0 * 4.65661287e-10) + 1;
  }
  if (v8 == 3)
  {
    *(double *)(a2 + 8) = (double)rand() * 180.0 / 2147483650.0 + -90.0;
    *(double *)(a2 + 16) = (double)rand() * 360.0 / 2147483650.0 + -180.0;
    goto LABEL_19;
  }
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      double v13 = (double)((int)((double)rand() * 150000.0 * 4.65661287e-10) + 1);
      goto LABEL_14;
    }
LABEL_19:
    uint64_t v17 = *(void *)(a2 + 24);
    long long v30 = *(_OWORD *)(a2 + 8);
    uint64_t v31 = v17;
    BlueFin::lla2ned((double *)v32, (double *)&v30, 0, &v28);
    double v13 = sqrt(v28 * v28 + *(double *)&v29 * *(double *)&v29 + *((double *)&v29 + 1) * *((double *)&v29 + 1));
    goto LABEL_20;
  }
  double v13 = (double)((int)((double)rand() * 650000.0 * 4.65661287e-10) + 1) + 150000.0;
LABEL_14:
  if (v13 <= 0.0) {
    goto LABEL_19;
  }
  double v14 = (v13 + v13) * (double)rand() / 2147483650.0 - v13;
  *(double *)&long long v30 = v14;
  if (rand()) {
    int v15 = 1;
  }
  else {
    int v15 = -1;
  }
  *((double *)&v30 + 1) = sqrt(v13 * v13 - v14 * v14) * (double)v15;
  uint64_t v31 = 0;
  BlueFin::ned2lla((double *)v32, (double *)&v30, &v28);
  *(double *)unsigned int v32 = v28;
  uint64_t v16 = v29;
  *(_OWORD *)&v32[8] = v29;
  *(double *)(a2 + 8) = v28;
  *(void *)(a2 + 16) = v16;
LABEL_20:
  *(unsigned char *)(a1 + 313) = 1;
  BlueFin::GlPeAsstPosMgr::processAssistance(a1, (long long *)(a2 + 8), *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 68), (BlueFin::stTimeOfAsstPos *)v33, a4, *(unsigned __int8 *)(a2 + 72));
  if (v13 >= 150000.0)
  {
    if (v13 >= 800000.0) {
      uint64_t v18 = "Far";
    }
    else {
      uint64_t v18 = "Med";
    }
  }
  else
  {
    uint64_t v18 = "Near";
  }
  double v19 = v13 / 1000.0;
  if (v19 <= 0.0)
  {
    if (v19 >= 0.0)
    {
LABEL_42:
      GlCustomLog(14, "\t%s %dkm\n");
      goto LABEL_44;
    }
    double v20 = ceil(v19 + -0.5);
  }
  else
  {
    double v20 = floor(v19 + 0.5);
  }
  if (v20 <= 2000.0)
  {
    if (v20 > 200.0)
    {
      double v23 = v20 / 100.0;
      if (v23 <= 0.0)
      {
        double v24 = 0.0;
        if (v23 < 0.0) {
          double v24 = ceil(v23 + -0.5);
        }
      }
      else
      {
        double v24 = floor(v23 + 0.5);
      }
      double v20 = v24 * 100.0;
    }
  }
  else
  {
    double v21 = v20 / 1000.0;
    if (v21 <= 0.0)
    {
      double v22 = 0.0;
      if (v21 < 0.0) {
        double v22 = ceil(v21 + -0.5);
      }
    }
    else
    {
      double v22 = floor(v21 + 0.5);
    }
    double v20 = v22 * 1000.0;
  }
  if (v20 < 1000.0) {
    goto LABEL_42;
  }
  GlCustomLog(14, "\t%s %d,%03dkm\n");
LABEL_44:
  if (v19 > 0.0)
  {
    double v25 = 0.5;
LABEL_49:
    int v26 = (int)(v19 + v25);
    return GlCustomLog(13, "PosError: %s %dkm\n", v18, v26);
  }
  if (v19 < 0.0)
  {
    double v25 = -0.5;
    goto LABEL_49;
  }
  int v26 = 0;
  return GlCustomLog(13, "PosError: %s %dkm\n", v18, v26);
}

BOOL BlueFin::GlPeAsstPosMgr::GetLastAgnss(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = *(_DWORD *)(a1 + 188);
  if (v3 != -1)
  {
    BlueFin::stProcessedAsstPos::operator=(a2, a1 + 144);
    if (a3) {
      *a3 = BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)(a1 + 200), *(BlueFin::GlPeTimeManager **)(a1 + 296));
    }
  }
  return v3 != -1;
}

uint64_t BlueFin::GlPeAsstPosMgr::Serialize(BlueFin::GlPeAsstPosMgr *this, BlueFin::GlPeEngineCallBacks *a2, int a3)
{
  if (*((_DWORD *)this + 11) == -1)
  {
    return GlCustomLog(14, "GlPeAsstPosMgr::Serialize  returning because asst pos is invalid\n");
  }
  else
  {
    int v15 = (uint64_t (**)(void **, BlueFin::GlPeEngineCallBacks *, void))&unk_270EBF9E0;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v18 = 0;
    double v19 = &off_270EBC600;
    long long v20 = xmmword_263BB3BC0;
    char v21 = 0;
    if (&v16 != (long long *)this)
    {
      long long v6 = *((_OWORD *)this + 1);
      long long v16 = *(_OWORD *)this;
      long long v17 = v6;
      uint64_t v18 = *((void *)this + 4);
    }
    BlueFin::stTimeOfAsstPos::GetTime((BlueFin::GlPeAsstPosMgr *)((char *)this + 56), *((BlueFin::GlPeTimeManager **)this + 37), (uint64_t)&v13);
    *(void *)&long long v8 = v14;
    *((void *)&v8 + 1) = *((void *)this + 5);
    long long v20 = v8;
    if (a3) {
      BlueFin::GlPeAsstPosMgr::ApplyPrivacyMask((BlueFin::GlPeAsstPosMgr *)&v15, v7);
    }
    uint64_t result = v15[3]((void **)&v15, a2, 0);
    if (*((_DWORD *)this + 47) != -1 && *((_DWORD *)this + 11) != 2)
    {
      if (&v16 != (long long *)((char *)this + 144))
      {
        long long v10 = *((_OWORD *)this + 10);
        long long v16 = *((_OWORD *)this + 9);
        long long v17 = v10;
        uint64_t v18 = *((void *)this + 22);
      }
      BlueFin::stTimeOfAsstPos::GetTime((BlueFin::GlPeAsstPosMgr *)((char *)this + 200), *((BlueFin::GlPeTimeManager **)this + 37), (uint64_t)&v13);
      *(void *)&long long v12 = v14;
      *((void *)&v12 + 1) = *((void *)this + 23);
      long long v20 = v12;
      if (a3) {
        BlueFin::GlPeAsstPosMgr::ApplyPrivacyMask((BlueFin::GlPeAsstPosMgr *)&v15, v11);
      }
      return v15[3]((void **)&v15, a2, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeAsstPosMgr::ApplyPrivacyMask(BlueFin::GlPeAsstPosMgr *this, BlueFin::GlPeAsstPosData *a2)
{
  float64x2_t v2 = (float64x2_t)vdupq_n_s64(0x3FB99999A0000000uLL);
  float64x2_t v3 = vmulq_f64(vrndmq_f64(vdivq_f64(*(float64x2_t *)((char *)this + 8), v2)), v2);
  *(float64x2_t *)((char *)this + 8) = v3;
  v2.f64[0] = floor(*((double *)this + 3) / 500.0) * 500.0;
  *((void *)this + 3) = *(void *)&v2.f64[0];
  float64x2_t v4 = vcvtq_f64_f32(vmaxnm_f32(vcvt_f32_f64(*((float64x2_t *)this + 2)), (float32x2_t)0x43FA0000462DA506));
  *((float64x2_t *)this + 2) = v4;
  return GlCustomLog(14, "GlPeAsstPosMgr::ApplyPrivacyMask Mask applied [%lf %lf %lf] (%lf,%lf).\n", v3.f64[0], v3.f64[1], v2.f64[0], v4.f64[0], v4.f64[1]);
}

void BlueFin::GlPeAsstPosData::~GlPeAsstPosData(BlueFin::GlPeAsstPosData *this)
{
}

uint64_t BlueFin::GlPeBdsEphemeris::GetFctS(BlueFin::GlPeBdsEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  if ((*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *))(*(void *)this + 80))(this))
  {
    int v4 = 604800
       * (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
    int v5 = (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 18);
    return v4
         + (*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 232))(this, 18)
         * v5;
  }
  else
  {
    BlueFin::GlPeEphemeris::GetEphTime(this, a2, (uint64_t)v13);
    long double v11 = &off_270EBF588;
    uint64_t v12 = 0;
    BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)v13, (BlueFin::GlBdsTime *)&v11);
    unsigned int v7 = ((uint64_t (*)(void))v11[4])(&v11);
    LODWORD(v8) = v12;
    double v9 = (double)v8 * 2.32830644e-10 + (double)v7;
    double v10 = fmod(v9, 4294967300.0);
    if (v9 <= 4294967300.0) {
      double v10 = v9;
    }
    if (v10 < -4294967300.0) {
      double v10 = -fmod(-v10, 4294967300.0);
    }
    if (v10 < 0.0) {
      return --v10;
    }
    else {
      return v10;
    }
  }
}

float BlueFin::GlPeBdsEphemeris::GetAccuracyM(BlueFin::GlPeBdsEphemeris *this)
{
  return BlueFin::GlPeBdsEphemeris::GetAccuracyM(void)const::afUraTbl[(*(unsigned int (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 4)];
}

uint64_t BlueFin::GlPeBdsEphemeris::GetSatClkInfo(BlueFin::GlPeBdsEphemeris *this, const BlueFin::GlPeGnssTime *a2, double *a3, double *a4)
{
  v18[0] = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  BlueFin::GlPeBdsEphemeris::GetBdUncmprsdEph((uint64_t)this, (uint64_t)v18);
  BlueFin::BdNavMsgMgr::UnpackEphPara((uint64_t)v18, (uint64_t)v16);
  uint64_t result = 0;
  if (!v16[0])
  {
    uint64_t v13 = &off_270EBF588;
    uint64_t v14 = 0;
    BlueFin::GlPeGnssTime::GetBds(a2, (BlueFin::GlBdsTime *)&v13);
    unsigned int v8 = ((uint64_t (*)(void))v13[4])(&v13);
    LODWORD(v9) = v14;
    double v15 = ((double)v9 * 2.32830644e-10 + (double)(v8 % 0x93A80)) * 1000.0;
    double v10 = v15 / 1000.0 - (double)(v17 | 0x408F400000000000uLL);
    double v11 = v10 + 604800.0;
    if (v10 >= -302400.0) {
      double v11 = v15 / 1000.0 - (double)(v17 | 0x408F400000000000uLL);
    }
    if (v10 <= 302400.0) {
      double v12 = v11;
    }
    else {
      double v12 = v10 + -604800.0;
    }
    if (v12 > 7200.0 || v12 < -7200.0) {
      return 0;
    }
    else {
      return BlueFin::BdNavMsgMgr::svd_computeSvClock((uint64_t)v16, (unint64_t *)&v15, a3, a4);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeBdsEphemeris::GetApproximateElevation(BlueFin::GlPeEphemeris *a1, uint64_t a2, double *a3)
{
  double v5 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22);
  double v7 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 17);
  BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22);
  BOOL v8 = v7 <= 6400.0;
  double v9 = dbl_263BB3C10[v7 <= 6400.0];
  double v10 = dbl_263BB3C20[v8];
  double v11 = dbl_263BB3C30[v8];
  double v12 = v9 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v12 * v5;
  double v14 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v15 = __sincos_stret(v13 + v14);
  double v16 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20);
  double v17 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v18 = __sincos_stret(v16 + (v5 + v17) * -0.0000729211515);
  __double2 v19 = __sincos_stret(ScaledFloatingField);
  double v20 = ((a3[1] * (v19.__cosval * (v11 * v15.__sinval) * v18.__cosval + v11 * v15.__cosval * v18.__sinval)
        + (v11 * v15.__cosval * v18.__cosval - v19.__cosval * (v11 * v15.__sinval) * v18.__sinval) * *a3
        + v19.__sinval * (v11 * v15.__sinval) * a3[2])
       / v10
       + -0.24)
      * 90.0;
  if (v20 <= 0.0)
  {
    if (v20 >= 0.0)
    {
      int v22 = 0;
      goto LABEL_7;
    }
    double v21 = -0.5;
  }
  else
  {
    double v21 = 0.5;
  }
  int v22 = (int)(v20 + v21);
LABEL_7:
  if (v22 <= -90) {
    int v22 = -90;
  }
  if (v22 >= 90) {
    return 90;
  }
  else {
    return v22;
  }
}

uint64_t BlueFin::GlPeBdsEphemeris::GetIssueOfData(BlueFin::GlPeBdsEphemeris *this)
{
  return (*(unsigned __int16 (**)(BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)this + 192))(this, 29);
}

uint64_t BlueFin::GlPeBdsEphemeris::MarkUnverified(BlueFin::GlPeBdsEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeBdsEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 2, 0);
}

uint64_t BlueFin::GlBdEphListener::Update(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 - 64 <= 0xFFFFFFC0)
  {
    double v25 = "IS_GNSS_ID(ucGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(ucGnssId))";
    DeviceFaultNotify("glpe_bdephmgr.cpp", 1390, "Update", (char)"IS_GNSS_ID(ucGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(ucGnssId))");
    int v26 = 1390;
    goto LABEL_17;
  }
  long long v6 = *(void **)(a1 + 16);
  unsigned __int8 v33 = *(unsigned char *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(void *, unsigned __int8 *))(*v6 + 368))(v6, &v33);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 184))(v7);
  __int16 v28 = 4673;
  long long v29 = v31;
  int32x2_t v30 = vdup_n_s32(0xFF9222FF);
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0;
  unsigned __int8 v27 = (uint64_t (**)(void **, uint64_t))&unk_270EBFA28;
  v34[0] = (uint64_t)v31;
  v34[1] = 0;
  char v35 = 0;
  int v37 = 0;
  long long v36 = xmmword_263BB3C40;
  char v38 = 0;
  double v9 = BlueFin::GlBitBuffer::PutU(v34, v3, 8u);
  double v10 = BlueFin::GlBitBuffer::PutU(v9, 0, 6u);
  double v11 = BlueFin::GlBitBuffer::PutU(v10, 1u, 1u);
  BlueFin::GlBitBuffer::PutU(v11, a2, 1u);
  for (uint64_t i = 0; i != 68; i += 4)
    double v13 = BlueFin::GlBitBuffer::PutU(v34, *(_DWORD *)(a3 + i), 0x20u);
  double v14 = BlueFin::GlBitBuffer::PutU(v13, 0, 1u);
  __double2 v15 = BlueFin::GlBitBuffer::PutU(v14, v8, 1u);
  BlueFin::GlBitBuffer::PutU(v15, 1u, 1u);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t (***)(void **, uint64_t), void))(*v6 + 376))(v6, &v27, 0);
  if (result)
  {
    char v17 = v27[24]((void **)&v27, 3);
    unsigned __int8 v18 = v33;
    if (v33 - 1 < 0x3F)
    {
      char v19 = v17;
      uint64_t v20 = v6[45];
      uint64_t v21 = v33 >> 5;
      uint64_t v22 = *(unsigned int *)(v20 + 4 * v21);
      if (((v17 & 1) == 0) == (((1 << (v33 & 0x1F)) & v22) != 0))
      {
        if (((1 << (v33 & 0x1F)) & v22) == 0)
        {
          *(_DWORD *)(v20 + 4 * v21) = v22 | (1 << (v33 & 0x1F));
          if (v17)
          {
LABEL_10:
            uint64_t v23 = v6[4];
            if ((*(unsigned char *)(v23 + 1636) & 4) == 0)
            {
              LOBYTE(v34[0]) = v18;
              BlueFin::GlGnssSet::Add(v23 + 576, 4u, (unsigned __int8 *)v34);
              unsigned __int8 v18 = v33;
            }
          }
LABEL_13:
          uint64_t v24 = v6[7];
          LODWORD(v34[0]) = 4;
          BYTE4(v34[0]) = v18;
          return BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded((unsigned char *)(v24 + 32), (v19 & 1) == 0, (uint64_t)v34);
        }
        BlueFin::GlSetBase::Remove((uint64_t)(v6 + 45), v33);
        unsigned __int8 v18 = v33;
      }
      if (v19) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
    double v25 = "IS_GNSS_ID(*rotGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(*rotGnssId))";
    DeviceFaultNotify("glpe_bdephmgr.cpp", 1507, "UpdateHealth", (char)"IS_GNSS_ID(*rotGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(*rotGnssId))");
    int v26 = 1507;
LABEL_17:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", v26, v25);
  }
  return result;
}

uint64_t BlueFin::GlPeLegacyBdsEph::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_bdephmgr.cpp", 1060, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 1060, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v13 = 66;
    char v14 = v5;
    uint64_t v15 = 0x1000000000000;
    double v12 = &unk_270EBA2F0;
    char v16 = v5;
    uint64_t v8 = *(void *)(v2 + 24);
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v8 + 3));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v8 + 2));
    for (uint64_t i = 0; i != 68; i += 4)
    {
      HIDWORD(v10) = *(_DWORD *)(v8 + i);
      LODWORD(v10) = *(_DWORD *)(v8 + i + 4);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, v10 >> 16);
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, (*(_DWORD *)(*(void *)(v7 + 24) + 68) >> 11) & 4 | (*(_DWORD *)(*(void *)(v7 + 24) + 68) >> 13) & 2);
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeLegacyBdsEph::Deserialize(BlueFin::GlPeLegacyBdsEph *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 66 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    char v5 = (unsigned int *)*((void *)this + 3);
    int v6 = 4 * *((unsigned __int8 *)this + 17);
    int v14 = 0;
    BlueFin::GlBitBuffer::Initialize((uint64_t)v13, v5, v6);
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    if (U8 - 64 <= 0xFFFFFFC0)
    {
      DeviceFaultNotify("glpe_bdephmgr.cpp", 1118, "Deserialize", (char)"IS_GNSS_ID(ucGnssId)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 1118, "IS_GNSS_ID(ucGnssId)");
    }
    BlueFin::GlBitBuffer::PutU(v13, U8, 8u);
    unsigned int v8 = BlueFin::GlSysLogEntry::GetU8(a2);
    BlueFin::GlBitBuffer::PutU(v13, v8, 8u);
    int v9 = 17;
    do
    {
      unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
      BlueFin::GlBitBuffer::PutU(v13, U32, 0x20u);
      --v9;
    }
    while (v9);
    unsigned int v11 = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlBitBuffer::PutU(v13, 0, 1u);
    BlueFin::GlBitBuffer::PutU(v13, (v11 >> 1) & 1, 1u);
    BlueFin::GlBitBuffer::PutU(v13, (v11 >> 2) & 1, 1u);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 1138);
  }
  return v3;
}

BOOL BlueFin::GlPeBdsEphMgr::NewEphSet(BlueFin::GlPeBdsEphMgr *this, uint64_t a2, const BlueFin::GlPeBdsEphemeris *a3, const BlueFin::GlPeBdsEphemeris *a4)
{
  if ((this - 64) <= 0xFFFFFFC0)
  {
    DeviceFaultNotify("glpe_bdephmgr.cpp", 1586, "NewEphSet", (char)"IS_GNSS_ID(ucGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(ucGnssId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdephmgr.cpp", 1586, "IS_GNSS_ID(ucGnssId) && IS_BEIDOU_PRN(BEIDOU_GNSSID_TO_PRN(ucGnssId))");
  }
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, const BlueFin::GlPeBdsEphemeris *, const BlueFin::GlPeBdsEphemeris *))(*(void *)a2 + 192))(a2, 28, a3, a4);
  if (v6 == (*(unsigned int (**)(const BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 28))
  {
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 18);
    BOOL v8 = v7 != (*(unsigned int (**)(const BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 18);
  }
  else
  {
    BOOL v8 = 1;
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 5);
  int v10 = (*(uint64_t (**)(const BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 5);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 29);
  int v12 = (*(uint64_t (**)(const BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 29);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 3);
  int v14 = (*(uint64_t (**)(const BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 3);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 192))(a2, 7);
  int v16 = (*(uint64_t (**)(const BlueFin::GlPeBdsEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 7);
  BOOL result = 1;
  if (!v8 && v9 == v10 && v13 == v14) {
    return v11 != v12 || v15 != v16;
  }
  return result;
}

void BlueFin::GlBdEphListener::~GlBdEphListener(BlueFin::GlBdEphListener *this)
{
}

void BlueFin::GlBdSvHealthListener::~GlBdSvHealthListener(BlueFin::GlBdSvHealthListener *this)
{
}

void BlueFin::GlPeBdsEphemeris::~GlPeBdsEphemeris(BlueFin::GlPeBdsEphemeris *this)
{
}

void BlueFin::GlPeBdsEphMgr::~GlPeBdsEphMgr(BlueFin::GlPeBdsEphMgr *this)
{
}

uint64_t BlueFin::GlPeBdsEphMgr::GetHealthBitsMask(BlueFin::GlPeBdsEphMgr *this)
{
  return 1;
}

void BlueFin::GlPeLegacyBdsEph::~GlPeLegacyBdsEph(BlueFin::GlPeLegacyBdsEph *this)
{
}

uint64_t BlueFin::GlPeBdIFMgr::SetDataSubFrmMeas(BlueFin::GlPeBdIFMgr *this, const BlueFin::GlDataSubFrmMeas *a2)
{
  unsigned int v4 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)this + 1);
  int v40 = 7;
  unsigned __int8 v41 = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss(v4, (unsigned __int8 *)a2 + 8, (uint64_t)&v40);
  if (v40 > 6 || (v6 = v41, unsigned __int8 v7 = v41 - 1, (v41 - 1) >= 0x3Fu))
  {
    int v14 = "otGnss.isValid()";
    DeviceFaultNotify("glpe_bdifmgr.cpp", 97, "SetDataSubFrmMeas", (char)"otGnss.isValid()");
    int v15 = 97;
    goto LABEL_47;
  }
  if (v40 != 4)
  {
    int v14 = "otGnss.eGnss == GNSS_BEIDOU";
    DeviceFaultNotify("glpe_bdifmgr.cpp", 98, "SetDataSubFrmMeas", (char)"otGnss.eGnss == GNSS_BEIDOU");
    int v15 = 98;
    goto LABEL_47;
  }
  unint64_t v8 = (unint64_t)v41 >> 5;
  char v9 = v41 & 0x1F;
  if (((unint64_t)*(unsigned int *)(*((void *)this + 2838) + 4 * v8) >> (v41 & 0x1F)))
  {
    uint64_t v10 = *((void *)this + 2970);
    if (!v10) {
      return result;
    }
    goto LABEL_21;
  }
  unsigned int v11 = *(_DWORD *)(*(void *)this + 2568);
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 40, v41);
  if (*(unsigned __int8 *)(*((void *)this + 7) + v6 - *((unsigned __int8 *)this + 76)) == 255
    && *((unsigned __int8 *)this + 79) == 255)
  {
    *(void *)int v37 = (char *)this + 40;
    v37[8] = 0;
    if (!*((unsigned char *)this + 78)) {
      return GlCustomLog(13, "EphMgr(BDS,%d)[%u]: No free decoders available!\n");
    }
    unsigned int v26 = 0;
    char v35 = (BlueFin::GlPeBdIFMgr *)((char *)this + 22704);
    int v27 = 1;
    do
    {
      int v28 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)v37);
      unsigned int v29 = *(_DWORD *)(BlueFin::GlArray::Get((BlueFin::GlPeBdIFMgr *)((char *)this + 40), v28) + 1376);
      unsigned int v30 = v11 - v29;
      if (v26 <= v11 - v29)
      {
        int v31 = v28;
      }
      else
      {
        unsigned int v30 = v26;
        int v31 = v27;
      }
      if (v11 > v29)
      {
        unsigned int v26 = v30;
        int v27 = v31;
      }
    }
    while (v37[8] < *(unsigned __int8 *)(*(void *)v37 + 38));
    if (v26 <= 0xEA60) {
      return GlCustomLog(13, "EphMgr(BDS,%d)[%u]: No free decoders available!\n");
    }
    int v32 = v27;
    if (((unint64_t)*(unsigned int *)(*(void *)v35 + 4 * (v27 >> 5)) >> (v27 & 0x1F)))
    {
      if ((v27 - 1) > 0x3Eu) {
        unsigned __int8 v33 = 0;
      }
      else {
        unsigned __int8 v33 = (void **)(*((void *)this + 2970) + 16 * (v27 - 1));
      }
      (*(void (**)(void))(**v33 + 32))();
      (*(void (**)(void *))(*v33[1] + 144))(v33[1]);
      BlueFin::GlSetBase::Remove((uint64_t)v35, v27);
      uint64_t v34 = *((void *)this + 2970) + 16 * v27;
      *(void *)(v34 - 16) = 0;
      *(void *)(v34 - 8) = 0;
      int v32 = v27;
    }
    BlueFin::GlArray::Remove((BlueFin::GlPeBdIFMgr *)((char *)this + 40), v32);
    char v9 = v6 & 0x1F;
  }
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 40, v6);
  int v12 = (BlueFin::GlPeBdIFMgr *)((char *)this + 40);
  if (*(unsigned __int8 *)(*((void *)this + 7) + v6 - *((unsigned __int8 *)this + 76)) == 255)
  {
    int v16 = BlueFin::GlArray::Add(v12, v6);
    if (v16)
    {
      uint64_t v13 = (uint64_t)v16;
      bzero(v16, 0x564uLL);
      goto LABEL_14;
    }
    int v14 = "pBuffer != nullptr";
    DeviceFaultNotify("glpe_bdifmgr.cpp", 295, "GetSfrmSync_NavPsrBuf", (char)"pBuffer != nullptr");
    int v15 = 295;
LABEL_47:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdifmgr.cpp", v15, v14);
  }
  uint64_t v13 = BlueFin::GlArray::Get(v12, v6);
  if (!v13)
  {
    int v14 = "potDecoder != nullptr";
    DeviceFaultNotify("glpe_bdifmgr.cpp", 301, "GetSfrmSync_NavPsrBuf", (char)"potDecoder != nullptr");
    int v15 = 301;
    goto LABEL_47;
  }
LABEL_14:
  *(_DWORD *)(v13 + 1376) = v11;
  *(_DWORD *)(v13 + 32) = 0;
  BOOL v17 = v7 >= 5u && (v6 - 59) >= 5;
  *(_DWORD *)(v13 + 40) = 0;
  int v18 = !v17;
  *(void *)(v13 + 8) = 0;
  *(void *)(v13 + 16) = 0;
  *(void *)uint64_t v13 = &unk_270EBF890;
  *(_DWORD *)(v13 + 64) = v18;
  *(unsigned char *)(v13 + 68) = v6;
  *(_OWORD *)(v13 + 84) = 0u;
  *(_OWORD *)(v13 + 100) = 0u;
  *(void *)(v13 + 116) = 0;
  *(void *)(v13 + 72) = 0;
  *(unsigned char *)(v13 + 80) = 0;
  BlueFin::BdSFDemod::Reset((BlueFin::BdSFDemod *)v13);
  BlueFin::BdNavDataParse::MakeBdNavParse(v18, v6, v13 + 128, 0x4E0u);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 + 128) + 32))(v13 + 128, *(void *)(*((void *)this + 2) + 7000) + 24 * ((int)v6 - 1) + 7608);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 + 128) + 72))(v13 + 128, *(void *)(*((void *)this + 2) + 7000) + 8 * (v6 - 1) + 9120);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 + 128) + 24))(v13 + 128, *((void *)this + 4) + 26456);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 + 128) + 80))(v13 + 128, *((void *)this + 4) + 26520);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 + 128) + 40))(v13 + 128, *((void *)this + 3) + 48488);
  (*(void (**)(uint64_t, char *))(*(void *)(v13 + 128) + 64))(v13 + 128, (char *)this + 23784);
  (*(void (**)(uint64_t, char *))(*(void *)(v13 + 128) + 56))(v13 + 128, (char *)this + 23800);
  (*(void (**)(uint64_t, char *))(*(void *)(v13 + 128) + 48))(v13 + 128, (char *)this + 23832);
  (*(void (**)(uint64_t, char *))(*(void *)v13 + 24))(v13, (char *)this + 23768);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v13 + 128);
  *(_DWORD *)(*((void *)this + 2838) + 4 * v8) |= 1 << v9;
  uint64_t v10 = *((void *)this + 2970);
  char v19 = (uint64_t *)(v10 + 16 * (v6 - 1));
  *char v19 = v13;
  v19[1] = v13 + 128;
LABEL_21:
  uint64_t v20 = v10 + 16 * (v6 - 1);
  uint64_t v22 = *(void *)(v20 + 8);
  uint64_t v21 = (void *)(v20 + 8);
  uint64_t result = v22;
  if (v22)
  {
    uint64_t v39 = 0;
    long long v38 = 0u;
    *(_OWORD *)&char v37[4] = 0u;
    v37[0] = *((unsigned char *)a2 + 9);
    unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
    uint64_t v24 = 0;
    while (1)
    {
      unsigned int v25 = *((_DWORD *)a2 + v24 + 5);
      if (v25 >> 30)
      {
        if (((unint64_t)v23 >> v24)) {
          break;
        }
      }
      *(_DWORD *)&v37[4 * v24++ + 4] = v25 | 0x40000000;
      if (v24 == 10)
      {
        v36[0] = *((_DWORD *)a2 + 3);
        v36[1] = (*(_DWORD *)&v37[4] << 8) & 0xFF000 | (*(_DWORD *)&v37[8] >> 18) & 0xFFF;
        return (*(uint64_t (**)(void, unsigned char *, _DWORD *))(*(void *)*v21 + 16))(*v21, v37, v36);
      }
    }
    return GlCustomLog(14, "BDS(SvId: %02d) subframe%d rejected (word%d: 0x%08x err)\n");
  }
  return result;
}

BOOL BlueFin::GlPeBdSyncListener::SetTowMeas(BOOL result, char a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a3 + 4);
  if (v3 <= 0x93A7F) {
    return BlueFin::GlPeTimeManager::SetBdsTime(*(BlueFin::GlPeTimeManager **)(result + 8), a2, v3);
  }
  return result;
}

uint64_t BlueFin::GlPeBdWeekNumberListener::Update(uint64_t result, int a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)(a4 + 4);
  if (v4 <= 0x93A7F) {
    return BlueFin::GlPeTimeManager::SetBdsTime(*(BlueFin::GlPeTimeManager **)(result + 8), a2, a3, v4);
  }
  return result;
}

uint64_t BlueFin::GlPeBdSysTimeDiffListener::Update(uint64_t result, uint64_t *a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16);
  if (v2 != -1)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result + 12);
    if (v4 != -1)
    {
      int v6 = *(unsigned __int16 *)(result + 8);
      int v15 = &off_270EBF588;
      double v7 = fmod((double)v4, 1.0);
      if (v7 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v8 = v7 * 4294967300.0 + 0.5;
      unsigned int v9 = v8;
      if (v8 >= 4294967300.0) {
        unsigned int v9 = -1;
      }
      unsigned int v16 = v9;
      int v17 = v4 + 604800 * v6 + 820108814;
      int v15 = &off_270EBF588;
      BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v15, (double)v2, &v18);
      uint64_t v10 = *(int8x8_t **)(v3 + 24);
      unsigned int v11 = (v19 - 820108814) / 0x93A80u;
      double v12 = (double)v18 * 2.32830644e-10 + (double)(v19 - 820108814);
      double v13 = fmod(v12, 4294967300.0);
      if (v12 <= 4294967300.0) {
        double v13 = v12;
      }
      if (v13 < -4294967300.0) {
        double v13 = -fmod(-v13, 4294967300.0);
      }
      if (v13 < 0.0) {
        int v14 = --v13;
      }
      else {
        int v14 = v13;
      }
      return BlueFin::GlPeTimeManager::SetBdsSystemOffsets(v10, 1, v11, v14, a2, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeBdUtcTimeDiffListener::Update(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 16);
  if (v2 != -1)
  {
    if (*(unsigned __int8 *)(a2 + 10) < 7u)
    {
      uint64_t v4 = result;
      unsigned int v5 = *(_DWORD *)(result + 12);
      if (v5 != -1)
      {
        int v6 = *(unsigned __int16 *)(result + 8);
        uint64_t v10 = &off_270EBF588;
        double v7 = fmod((double)v5, 1.0);
        if (v7 >= 1.0)
        {
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
        }
        double v8 = v7 * 4294967300.0 + 0.5;
        unsigned int v9 = v8;
        if (v8 >= 4294967300.0) {
          unsigned int v9 = -1;
        }
        unsigned int v11 = v9;
        int v12 = v5 + 604800 * v6 + 820108814;
        uint64_t v10 = &off_270EBF588;
        BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v10, (double)v2, v13);
        return BlueFin::GlPeTimeManager::SetBdsUtcModel(*(BlueFin::GlPeTimeManager **)(v4 + 24), 1, (v13[1] - 820108814) / 0x93A80u, (uint64_t *)a2, 0);
      }
    }
    else
    {
      return GlCustomLog(11, "GlPeBdUtcTimeDiffListener: UTC DN out of range (%u). Bad decode.\n", *(unsigned __int8 *)(a2 + 10));
    }
  }
  return result;
}

void BlueFin::GlPeBdSyncListener::~GlPeBdSyncListener(BlueFin::GlPeBdSyncListener *this)
{
}

void BlueFin::GlPeBdWeekNumberListener::~GlPeBdWeekNumberListener(BlueFin::GlPeBdWeekNumberListener *this)
{
}

void BlueFin::GlPeBdSysTimeDiffListener::~GlPeBdSysTimeDiffListener(BlueFin::GlPeBdSysTimeDiffListener *this)
{
}

void BlueFin::GlPeBdUtcTimeDiffListener::~GlPeBdUtcTimeDiffListener(BlueFin::GlPeBdUtcTimeDiffListener *this)
{
}

uint64_t BlueFin::GlPeClkCalibrateMgr::SetClkCalibrateParams(uint64_t this, const BlueFin::stClkCalibrateParams *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 12);
  if (*((_DWORD *)a2 + 2)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = (v2 - 1) > 0x1F;
  }
  if (!v3)
  {
    uint64_t v4 = *(void *)(this + 1120);
    if (v4)
    {
      if ((**(unsigned char **)(*(void *)(this + 88) + 160) & 8) != 0)
      {
        uint64_t v5 = v4 + 32 * (v2 - 1);
        *(_DWORD *)(v5 + 8) = 0;
        *(unsigned char *)(v5 + 12) = v2;
        *(void *)(v5 + 16) = *((void *)a2 + 2);
        *(_DWORD *)(v5 + 24) = *((_DWORD *)a2 + 6);
        *(_DWORD *)(v5 + 28) = *((_DWORD *)a2 + 7);
        LOBYTE(v5) = *((unsigned char *)a2 + 12);
        int v6 = *((_DWORD *)a2 + 2);
        char v7 = v5;
        return BlueFin::GlGnssSet::Add(this + 1152, &v6);
      }
      else
      {
        return GlCustomLog(14, "LTOCalibrate(%s,%d) disabled\n", "GPS", v2);
      }
    }
  }
  return this;
}

uint64_t BlueFin::stClkCalibrateParams::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4)
  {
    if (v4 >= 3)
    {
      DeviceFaultNotify("glpe_clkcalibratemgr.cpp", 205, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_clkcalibratemgr.cpp", 205, "ucVersion >= 1 && ucVersion <= 2");
    }
    if (!v3)
    {
LABEL_6:
      if (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        return 1;
      }
    }
  }
  else
  {
    unsigned int v4 = 2;
    if (!v3) {
      goto LABEL_6;
    }
  }
  int v10 = 59;
  char v11 = v4;
  uint64_t v12 = 0x1000000000000;
  unsigned int v9 = &unk_270EBA2F0;
  char v13 = v4;
  uint64_t v7 = *(unsigned int *)(v2 + 8);
  if (v4 == 1)
  {
    if (v7) {
      return 0;
    }
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(unsigned __int8 *)(v2 + 12));
  }
  else
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, BlueFin::GlImplGnss::m_aucEnabledGnssTable[v7]);
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 12));
  }
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 28));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 24));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 20));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeClkCalibrateMgr::SerializeAll(BlueFin::GlPeClkCalibrateMgr *this, BlueFin::GlPeEngineCallBacks *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,unsigned __int8 a28)
{
  uint64_t result = (uint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v36, (BlueFin::GlPeClkCalibrateMgr *)((char *)this + 1152));
  int v31 = a27;
  for (unsigned int i = a28; a27 != 6 || a28 != 14; unsigned int i = a28)
  {
    if (!v31 && i - 1 <= 0x1F)
    {
      uint64_t v34 = *((void *)this + 140);
      if (v34)
      {
        if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          (*(void (**)(uint64_t, BlueFin::GlPeEngineCallBacks *, void))(*(void *)(v34 + 32 * i - 32)
        }
                                                                                  + 24))(v34 + 32 * i - 32, a2, 0);
      }
    }
    uint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&v36);
    int v31 = a27;
  }
  return result;
}

uint64_t BlueFin::stClkCalibrateParams::Deserialize(BlueFin::stClkCalibrateParams *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 59) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 3) < 0xFFFFFFFE) {
    return 0;
  }
  if (v3 == 1)
  {
    *((_DWORD *)this + 2) = 0;
    char U16 = BlueFin::GlSysLogEntry::GetU16(a2);
LABEL_10:
    *((unsigned char *)this + 12) = U16;
    *((_WORD *)this + 14) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS32(a2);
    *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetS32(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 296);
    return 1;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t result = 0;
  *((_DWORD *)this + 2) = BlueFin::GlImplGnss::m_aucImplGnssTable[U8];
  if (U8 != 4 && U8 != 8)
  {
    char U16 = BlueFin::GlSysLogEntry::GetU8(a2);
    goto LABEL_10;
  }
  return result;
}

void BlueFin::GlPeClkCalibrateMgr::Deserialize(uint64_t a1, BlueFin::GlSysLogEntry *a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (a3) {
    *a3 = 7;
  }
  if (a4) {
    *a4 = 0;
  }
  if (!a2)
  {
    int v28 = "pEntry";
    DeviceFaultNotify("glpe_clkcalibratemgr.cpp", 318, "Deserialize", (char)"pEntry");
    unsigned int v29 = "glpe_clkcalibratemgr.cpp";
    int v30 = 318;
    goto LABEL_31;
  }
  int v31 = &unk_270EBFF50;
  int v32 = 7;
  unsigned __int8 v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (!BlueFin::stClkCalibrateParams::Deserialize((BlueFin::stClkCalibrateParams *)&v31, a2)) {
    return;
  }
  if (v32) {
    return;
  }
  uint64_t v7 = v33;
  if ((v33 - 1) > 0x1Fu) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 1120);
  if (!v8 || !BlueFin::GlAidMask::AllowSV(a1, 0, v33)) {
    return;
  }
  uint64_t v9 = v8 + 32 * (v7 - 1);
  *(_DWORD *)(v9 + 8) = v32;
  *(unsigned char *)(v9 + 12) = v33;
  *(void *)(v9 + 16) = v34;
  *(void *)(v9 + 24) = v35;
  v39[0].n128_u32[0] = v32;
  v39[0].n128_u8[4] = v33;
  BlueFin::GlGnssSet::Add(a1 + 1152, (int *)v39);
  uint64_t ValidClkCalibrateParams = BlueFin::GlPeClkCalibrateMgr::GetValidClkCalibrateParams(a1, v32, v33);
  if (ValidClkCalibrateParams)
  {
    uint64_t v11 = ValidClkCalibrateParams;
    uint64_t v12 = *(BlueFin::GlPeTimeManager **)(a1 + 80);
    if (*((_DWORD *)v12 + 644))
    {
      BlueFin::GlPeTimeManager::GetTime(v12, 1, v39);
      int v40 = &off_270EBC600;
      uint64_t v41 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v39, (BlueFin::GlGpsTime *)&v40);
      int v13 = *(unsigned __int16 *)(v11 + 28);
      unsigned int v14 = *(_DWORD *)(v11 + 24);
      uint64_t v36 = &off_270EBC600;
      double v15 = fmod((double)v14, 1.0);
      if (v15 < 1.0)
      {
        double v16 = v15 * 4294967300.0 + 0.5;
        unsigned int v17 = v16;
        if (v16 >= 4294967300.0) {
          unsigned int v17 = -1;
        }
        unsigned int v37 = v17;
        unsigned int v38 = v14 + 604800 * v13;
        uint64_t v36 = &off_270EBC600;
        v39[0].n128_u64[0] = __PAIR64__(v38, v17);
        unsigned int v18 = ((uint64_t (*)(void))v40[4])(&v40);
        v42[0] = v41;
        v42[1] = v18;
        BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)v39, v42, 0x24EA0000u);
        unsigned int v19 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v40[3])(&v40, v39[0].n128_u32[1]);
        v39[0].n128_u64[1] = __PAIR64__(v19, v39[0].n128_u32[0]);
        v39[0].n128_u64[0] = (unint64_t)&off_270EBC600;
        unsigned int v20 = ((uint64_t (*)(void))v40[4])(&v40);
        LODWORD(v21) = v41;
        double v22 = (double)v21 * 2.32830644e-10 + (double)v20;
        unsigned int v23 = (*(uint64_t (**)(__n128 *))(v39[0].n128_u64[0] + 32))(v39);
        LODWORD(v24) = v39[0].n128_u32[2];
        double v25 = v22 - ((double)v24 * 2.32830644e-10 + (double)v23);
        double v26 = fmod(v25, 4294967300.0);
        if (v25 <= 4294967300.0) {
          double v26 = v25;
        }
        if (v26 < -4294967300.0) {
          double v26 = -fmod(-v26, 4294967300.0);
        }
        if (v26 < 0.0) {
          signed int v27 = --v26;
        }
        else {
          signed int v27 = v26;
        }
        if (v27 <= 604800) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
      int v28 = "dFracSec >= 0.0 && dFracSec < 1.0";
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      unsigned int v29 = "glpe_timepoint.h";
      int v30 = 173;
LABEL_31:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v29, v30, v28);
    }
  }
LABEL_24:
  v39[0].n128_u32[0] = v32;
  v39[0].n128_u8[4] = v33;
  BlueFin::GlGnssSet::Remove(a1 + 1152, (uint64_t)v39);
LABEL_25:
  if (a3) {
    *a3 = v32;
  }
  if (a4) {
    *a4 = v33;
  }
}

void BlueFin::stClkCalibrateParams::~stClkCalibrateParams(BlueFin::stClkCalibrateParams *this)
{
}

uint64_t (*(*BlueFin::GlPeCntinMgr::wai4cntinStart(uint64_t a1, unsigned __int8 *a2))(void *a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  if (v3 == 68)
  {
    uint64_t v7 = *(long long **)(a1 + 136);
    int v8 = *((_DWORD *)v7 + 2);
    if (v8 != 4)
    {
      if (v8 == 1)
      {
        uint64_t v9 = "&GlPeCntinMgr::wai4cntinMeas";
        int v10 = (uint64_t (*)())BlueFin::GlPeCntinMgr::wai4cntinMeas;
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 120);
        unsigned int v18 = *(void (**)(void, uint64_t))(v17 + 120);
        if (v18) {
          v18(*(void *)(v17 + 8), 5);
        }
        BlueFin::GlReqSm::SetCntinMeas(*(void *)(a1 + 128), 5, 0.0, 0.0);
        uint64_t v9 = "&GlPeCntinMgr::idle";
        int v10 = BlueFin::GlPeCntinMgr::idle;
      }
      BlueFin::QHsm::tran((void *)a1, v10, (uint64_t)v9);
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 120);
    uint64_t v12 = *(void (**)(void, uint64_t))(v11 + 120);
    if (v12) {
      v12(*(void *)(v11 + 8), 5);
    }
    int v13 = *((unsigned __int16 *)v7 + 2);
    unsigned int v14 = *((_DWORD *)v7 + 4);
    unsigned int v15 = v13 + ((v14 + 1) >> 1);
    if (v14 > 0x3E8)
    {
      int v19 = 6;
      double v16 = "too old";
    }
    else
    {
      if (v15 <= 0x1F4)
      {
        BlueFin::GlReqSm::SetCntinMeas(*(void *)(a1 + 128), 1, (double)*(int *)v7 * 0.000000001, (double)v15);
        BlueFin::GlReqSm::SetRefFreqStatus(*(void *)(a1 + 128), v7);
        int v13 = *((unsigned __int16 *)v7 + 2);
        unsigned int v14 = *((_DWORD *)v7 + 4);
        double v16 = "accepted";
LABEL_25:
        GlCustomLog(14, "GlPeCntinMgr::wai4cntinStart(REFCLKSTAT_OFFSET_KNOWN,%d,%hu,%u) Unc:%uppb %s\n", *(_DWORD *)v7, v13, v14, v15, v16);
        BlueFin::QHsm::tran((void *)a1, BlueFin::GlPeCntinMgr::idle, (uint64_t)"&GlPeCntinMgr::idle");
        uint64_t result = 0;
        *((_DWORD *)v7 + 2) = 0;
        return result;
      }
      int v19 = 7;
      double v16 = "too uncertain";
    }
    uint64_t v20 = *(void *)(a1 + 128) + 32028;
    *(unsigned char *)(v20 + 12) = 1;
    *(_DWORD *)uint64_t v20 = 3;
    *(_DWORD *)(v20 + 4) = v15;
    *(_DWORD *)(v20 + 8) = v19;
    goto LABEL_25;
  }
  if (v3 == 3)
  {
    BlueFin::GlTimer::disarm(a1 + 224);
  }
  else
  {
    uint64_t result = BlueFin::GlPeCntinMgr::on;
    if (v3 != 2) {
      return result;
    }
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = *(void (**)(void, uint64_t))(v5 + 120);
    if (v6)
    {
      v6(*(void *)(v5 + 8), 2);
      *(void *)(a1 + 256) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 224), 66, 0, 0x7D0u);
      uint64_t result = 0;
      *(unsigned char *)(a1 + 248) = 1;
      return result;
    }
    BlueFin::GlQueue::putFIFO((BlueFin::GlQueue *)(a1 + 40), 66, 0);
  }
  return 0;
}

uint64_t (*(*BlueFin::GlPeCntinMgr::wai4cntinMeas(uint64_t a1, unsigned __int8 *a2))(void *a1, unsigned __int8 *a2))()
{
  unsigned int v3 = *a2;
  uint64_t result = BlueFin::GlPeCntinMgr::on;
  if (v3 <= 0x41)
  {
    if (v3 == 2)
    {
      uint64_t v13 = *(void *)(a1 + 128);
      if ((*(unsigned char *)(v13 + 12193) & 1) != 0
        && !BlueFin::GlPeReqBag::GetFactTestItem((BlueFin::GlPeReqBag *)(v13 + 10880)))
      {
        unsigned int v14 = 2000;
      }
      else
      {
        unsigned int v14 = 4500;
      }
      *(void *)(a1 + 256) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 224), 66, 0, v14);
      *(unsigned char *)(a1 + 248) = 1;
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) + 40) + 336))();
    }
    else
    {
      if (v3 != 3) {
        return result;
      }
      (*(void (**)(void, void))(**(void **)(*(void *)(a1 + 112) + 40) + 336))(*(void *)(*(void *)(a1 + 112) + 40), 0);
      BlueFin::GlTimer::disarm(a1 + 224);
    }
  }
  else
  {
    if (v3 == 66)
    {
      uint64_t v8 = *(void *)(a1 + 120);
      uint64_t v9 = *(void (**)(void, uint64_t))(v8 + 120);
      if (v9) {
        v9(*(void *)(v8 + 8), 5);
      }
      unint64_t v10 = *(void *)(a1 + 128);
      uint64_t v5 = 3;
      goto LABEL_23;
    }
    if (v3 != 68)
    {
      if (v3 != 70) {
        return result;
      }
      uint64_t v5 = *(unsigned int *)(a1 + 144);
      if (v5 == 1)
      {
        uint64_t v6 = "&GlPeCntinMgr::wai4cntinStop";
        uint64_t v7 = (uint64_t (*)())BlueFin::GlPeCntinMgr::wai4cntinStop;
LABEL_24:
        BlueFin::QHsm::tran((void *)a1, v7, (uint64_t)v6);
        return 0;
      }
      uint64_t v15 = *(void *)(a1 + 120);
      double v16 = *(void (**)(void, uint64_t))(v15 + 120);
      if (v16)
      {
        v16(*(void *)(v15 + 8), 5);
        uint64_t v5 = *(unsigned int *)(a1 + 144);
      }
      unint64_t v10 = *(void *)(a1 + 128);
LABEL_23:
      BlueFin::GlReqSm::SetCntinMeas(v10, v5, 0.0, 0.0);
      uint64_t v6 = "&GlPeCntinMgr::idle";
      uint64_t v7 = BlueFin::GlPeCntinMgr::idle;
      goto LABEL_24;
    }
    if ((*(unsigned char *)(*(void *)(a1 + 136) + 12) & 6) != 0)
    {
      uint64_t v11 = *(void *)(a1 + 120);
      uint64_t v12 = *(void (**)(void, uint64_t))(v11 + 120);
      if (v12) {
        v12(*(void *)(v11 + 8), 5);
      }
      unint64_t v10 = *(void *)(a1 + 128);
      uint64_t v5 = 5;
      goto LABEL_23;
    }
  }
  return 0;
}

uint64_t (*(*BlueFin::GlPeCntinMgr::wai4cntinStop(uint64_t a1, unsigned __int8 *a2))(void *a1, unsigned __int8 *a2))()
{
  int v3 = *a2;
  if (v3 == 68)
  {
    uint64_t v7 = *(void *)(a1 + 136);
    if ((*(unsigned char *)(v7 + 12) & 7) != 0 || (*(_DWORD *)(v7 + 8) | 2) == 2)
    {
      BlueFin::GlReqSm::SetCntinMeas(*(void *)(a1 + 128), 5, 0.0, 0.0);
    }
    else
    {
      BlueFin::GlReqSm::SetCntinMeas(*(void *)(a1 + 128), 1, *(double *)(a1 + 152), *(double *)(a1 + 160));
      *(_DWORD *)(a1 + 144) = 0;
    }
    uint64_t v8 = *(void *)(a1 + 120);
    uint64_t v9 = *(void (**)(void, uint64_t))(v8 + 120);
    if (v9) {
      v9(*(void *)(v8 + 8), 5);
    }
    BlueFin::QHsm::tran((void *)a1, BlueFin::GlPeCntinMgr::idle, (uint64_t)"&GlPeCntinMgr::idle");
  }
  else if (v3 == 3)
  {
    BlueFin::GlTimer::disarm(a1 + 224);
  }
  else
  {
    uint64_t result = BlueFin::GlPeCntinMgr::on;
    if (v3 != 2) {
      return result;
    }
    *(void *)(a1 + 256) = a1;
    BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 224), 66, 0, 0x7D0u);
    *(unsigned char *)(a1 + 248) = 1;
    uint64_t v5 = *(void *)(a1 + 120);
    uint64_t v6 = *(void (**)(void, uint64_t))(v5 + 120);
    if (v6) {
      v6(*(void *)(v5 + 8), 4);
    }
  }
  return 0;
}

unint64_t BlueFin::GlPeCntinMgr::SetRefFreqStatus(void *a1, uint64_t a2)
{
  __int16 v5 = 68;
  a1[17] = a2;
  uint64_t v3 = a1[4];
  unint64_t result = a1[1];
  a1[4] = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)a1, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = ((uint64_t (*)(void *, __int16 *))a1[4])(a1, &v5);
    }
    a1[4] = result;
  }
  while (result);
  a1[4] = v3;
  return result;
}

unint64_t BlueFin::GlPeCntinMgr::SetCntinMeas(unint64_t result, int a2, double a3, double a4)
{
  if (*(_DWORD *)(result + 144) != 1)
  {
    uint64_t v4 = result;
    *(_DWORD *)(result + 144) = a2;
    *(double *)(result + 152) = a3;
    *(double *)(result + 160) = a4;
    __int16 v6 = 70;
    uint64_t v5 = *(void *)(result + 32);
    unint64_t result = *(void *)(result + 8);
    *(void *)(v4 + 32) = result;
    do
    {
      unint64_t v7 = 0;
      if (BlueFin::patch_dispatch(result, v4, (unsigned __int8 *)&v6, &v7)) {
        unint64_t result = v7;
      }
      else {
        unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(v4 + 32))(v4, &v6);
      }
      *(void *)(v4 + 32) = result;
    }
    while (result);
    *(void *)(v4 + 32) = v5;
  }
  return result;
}

unint64_t BlueFin::GlPeCntinMgr::StartCntin(BlueFin::GlPeCntinMgr *this)
{
  __int16 v4 = 67;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlPeCntinMgr *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

unint64_t BlueFin::GlPeCntinMgr::StopCntin(BlueFin::GlPeCntinMgr *this)
{
  __int16 v4 = 69;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlPeCntinMgr *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

void BlueFin::GlPeCntinMgr::~GlPeCntinMgr(BlueFin::GlPeCntinMgr *this)
{
}

uint64_t BlueFin::GlPeEphemeris::PutScaledFloatingField(BlueFin::GlPeEphemeris *this, uint64_t a2, double a3)
{
  if ((*(unsigned int (**)(BlueFin::GlPeEphemeris *))(*(void *)this + 200))(this))
  {
    uint64_t v6 = (int)(a3
                           / (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)this + 240))(this, a2));
    unint64_t v7 = *(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)this + 224);
    uint64_t v8 = this;
    uint64_t v9 = a2;
  }
  else
  {
    if (a3 < 0.0)
    {
      DeviceFaultNotify("glpe_ephmgr.cpp", 182, "PutScaledFloatingField", (char)"dValue >= 0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 182, "dValue >= 0");
    }
    uint64_t v6 = (int)(a3
                           / (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t))(*(void *)this + 240))(this, a2));
    unint64_t v7 = *(uint64_t (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)this + 216);
    uint64_t v8 = this;
    uint64_t v9 = a2;
  }
  return v7(v8, v9, v6);
}

BOOL BlueFin::GlPeEphemeris::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 11;
  }
  if (v5 != 6 && (v5 & 0xFC) != 8)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 493, "SerializeImpl", (char)"ucVersion == 6 || (ucVersion >= 8 && ucVersion <= 11)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 493, "ucVersion == 6 || (ucVersion >= 8 && ucVersion <= 11)");
  }
  uint64_t v7 = v2;
  unint64_t v8 = *(unsigned __int8 *)(v2 + 8);
  BOOL v10 = v5 != 6 || v8 < 0x10;
  if (v10)
  {
    uint64_t v11 = v3;
    int v16 = 35;
    char v17 = v5;
    uint64_t v18 = 0x1000000000000;
    uint64_t v15 = &unk_270EBA2F0;
    char v19 = v5;
    if (v5 >= 8)
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, BlueFin::GlImplGnss::m_aucEnabledGnssTable[v8 >> 4]);
      if (v5 >= 0xB)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 8) & 0xF);
        goto LABEL_20;
      }
      if (v5 >= 9)
      {
LABEL_20:
        uint64_t v12 = *(unsigned __int8 *)(v7 + 9);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 9));
        if (!v12)
        {
LABEL_25:
          BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v11, 4);
          return v10;
        }
LABEL_23:
        for (uint64_t i = 0; i != v12; ++i)
          BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)(v7 + 16) + 4 * i));
        goto LABEL_25;
      }
    }
    uint64_t v12 = 18;
    goto LABEL_23;
  }
  return v10;
}

void *BlueFin::GlPeEphemeris::SaveToBuffer(uint64_t a1, _OWORD *a2)
{
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_WORD *)a2 = *(_WORD *)(a1 + 8);
  return memcpy((char *)a2 + 4, *(const void **)(a1 + 16), 4 * *(unsigned __int8 *)(a1 + 9));
}

BOOL BlueFin::GlPeEphBadDecode::Deserialize(BlueFin::GlPeEphBadDecode *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL result = 0;
  *((_DWORD *)this + 2) = 7;
  *((unsigned char *)this + 12) = 0;
  if (*((_DWORD *)a2 + 2) == 36)
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 12);
    if (v5 > 2) {
      return 0;
    }
    if (v5 == 2)
    {
      *((_DWORD *)this + 2) = BlueFin::GlImplGnss::m_aucImplGnssTable[BlueFin::GlSysLogEntry::GetU8(a2)];
      LOBYTE(v6) = BlueFin::GlSysLogEntry::GetU8(a2);
    }
    else
    {
      if (v5 != 1) {
        return *((_DWORD *)this + 2) != 7;
      }
      unsigned int v6 = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId
           + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
           + BlueFin::GlSysLogEntry::GetU8(a2));
      if (!v6) {
        return *((_DWORD *)this + 2) != 7;
      }
      if (v6 > 0x20)
      {
        if (v6 - 66 > 9) {
          return *((_DWORD *)this + 2) != 7;
        }
        *((_DWORD *)this + 2) = 3;
        LOBYTE(v6) = v6 - 65;
      }
      else
      {
        *((_DWORD *)this + 2) = 0;
      }
    }
    *((unsigned char *)this + 12) = v6;
    return *((_DWORD *)this + 2) != 7;
  }
  return result;
}

uint64_t BlueFin::GlPeEphBadDecode::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (v3) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v4 >= 3)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 662, "SerializeImpl", (char)"ucVersion == 1 || ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 662, "ucVersion == 1 || ucVersion == 2");
  }
  uint64_t v5 = v2;
  if (v4 == 1)
  {
    int v6 = *(_DWORD *)(v2 + 8);
    if (v6 != 3 && v6 != 0) {
      return 0;
    }
    int v12 = 36;
    char v13 = 1;
    uint64_t v14 = 0x1000000000000;
    uint64_t v11 = &unk_270EBA2F0;
    char v15 = 1;
    if (v6 == 3)
    {
      unsigned __int8 v8 = *(unsigned char *)(v2 + 12) - 65;
    }
    else if (v6)
    {
      unsigned __int8 v8 = 0;
    }
    else
    {
      unsigned __int8 v8 = *(unsigned char *)(v2 + 12);
    }
    uint64_t v9 = (char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
       + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
       + v8;
  }
  else
  {
    int v12 = 36;
    char v13 = v4;
    uint64_t v14 = 0x1000000000000;
    uint64_t v11 = &unk_270EBA2F0;
    char v15 = v4;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
    uint64_t v9 = (char *)(v5 + 12);
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, *v9);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v11, 0, 4);
  return 1;
}

uint64_t BlueFin::GlPeGpsTypeEphemerisDecoder::Unpack(BlueFin::GlPeGpsTypeEphemerisDecoder *this, BlueFin::GlPeGpsEphemerisBase *a2)
{
  if (*((unsigned char *)this + 16) != 7)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1027, "Unpack", (char)"AllSubframesPresent()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1027, "AllSubframesPresent()");
  }
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, void, void))(*(void *)a2 + 216))(a2, 0, *((unsigned __int8 *)this + 4));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 28, *((_DWORD *)this + 6) >> 22);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 4, (*((_DWORD *)this + 6) >> 18) & 0xF);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 3, (*((_DWORD *)this + 6) >> 12) & 0x3F);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 5, (*((_DWORD *)this + 6) >> 2) & 0x3FF);
  HIDWORD(v4) = *((_DWORD *)this + 6);
  LODWORD(v4) = *((_DWORD *)this + 7);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 6, (v4 >> 2) >> 24);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 7, (unsigned __int16)(*((_DWORD *)this + 7) >> 10));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 8, (*((_DWORD *)this + 7) >> 2));
  HIDWORD(v4) = *((_DWORD *)this + 7);
  LODWORD(v4) = *((_DWORD *)this + 8);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 9, (v4 >> 2) >> 16);
  HIDWORD(v4) = *((_DWORD *)this + 8);
  LODWORD(v4) = *((_DWORD *)this + 9);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 10, (v4 >> 18) >> 10);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 11, *(unsigned __int16 *)((char *)this + 41));
  HIDWORD(v4) = *((_DWORD *)this + 10);
  LODWORD(v4) = *((_DWORD *)this + 11);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 12, (v4 >> 8) >> 16);
  HIDWORD(v4) = *((_DWORD *)this + 11);
  LODWORD(v4) = *((_DWORD *)this + 12);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 13, (v4 >> 24));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 14, *(unsigned __int16 *)((char *)this + 49));
  HIDWORD(v4) = *((_DWORD *)this + 12);
  LODWORD(v4) = *((_DWORD *)this + 13);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 15, (v4 >> 8));
  HIDWORD(v4) = *((_DWORD *)this + 13);
  LODWORD(v4) = *((_DWORD *)this + 14);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 16, (v4 >> 8) >> 16);
  HIDWORD(v4) = *((_DWORD *)this + 14);
  LODWORD(v4) = *((_DWORD *)this + 15);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 17, (v4 >> 24));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 18, *(unsigned __int16 *)((char *)this + 61));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 30, (*((_DWORD *)this + 15) >> 7) & 1);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 19, *((unsigned __int16 *)this + 33));
  HIDWORD(v4) = *((_DWORD *)this + 16);
  LODWORD(v4) = *((_DWORD *)this + 17);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 20, (v4 >> 16));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 21, *((unsigned __int16 *)this + 34));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 22, *((unsigned int *)this + 18));
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 23, *((unsigned __int16 *)this + 39));
  HIDWORD(v4) = *((_DWORD *)this + 19);
  LODWORD(v4) = *((_DWORD *)this + 20);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 24, (v4 >> 16));
  HIDWORD(v4) = *((_DWORD *)this + 20);
  LODWORD(v4) = *((_DWORD *)this + 21);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 25, (v4 >> 16) >> 8);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216))(a2, 26, (unsigned __int16)*((_DWORD *)this + 21) >> 2);
  int v5 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 18);
  unsigned int v6 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 232))(a2, 18) * v5;
  int v7 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 28);
  uint64_t v8 = (*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 232))(a2, 28) * v7;
  unsigned int v9 = *((_DWORD *)this + 3);
  if (v6 + 302400 >= v9)
  {
    if (v9 + 302400 >= v6) {
      goto LABEL_7;
    }
    __int16 v10 = v8 - 1;
  }
  else
  {
    __int16 v10 = v8 + 1;
  }
  uint64_t v8 = v10 & 0x3FF;
LABEL_7:
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 27, 1);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, 28, v8);
  (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, BOOL))(*(void *)a2 + 216))(a2, 2, *((unsigned char *)this + 17) == 7);
  uint64_t v11 = *(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)a2 + 216);

  return v11(a2, 1, 0);
}

uint64_t BlueFin::GlPeEphemerisMgr::GetEphSrc(void *a1, __n128 a2)
{
  unsigned int v2 = *(_DWORD *)(a1[2] + 2568);
  a2.n128_f64[0] = (double)(int)v2;
  if (v2 <= 0xFF9222FE) {
    a2.n128_f64[0] = (double)v2;
  }
  return (*(uint64_t (**)(__n128))(*a1 + 96))(a2);
}

uint64_t BlueFin::GlPeEphemerisMgr::GetEphSrc(void *a1, unsigned __int8 *a2, __n128 a3)
{
  if (*a2 - 1 >= 0x3F)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1489, "GetEphSrc", (char)"rotGnssId.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1489, "rotGnssId.isValid()");
  }
  if (a3.n128_f64[0] == -7199999.0)
  {
    unsigned int v5 = *(_DWORD *)(a1[2] + 2568);
    a3.n128_f64[0] = (double)(int)v5;
    if (v5 <= 0xFF9222FE) {
      a3.n128_f64[0] = (double)v5;
    }
  }
  if ((*(unsigned int (**)(void *, unsigned __int8 *, uint64_t, __n128))(*a1 + 64))(a1, a2, 1, a3)) {
    return 0;
  }
  int v7 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *, unsigned __int8 *))(*a1 + 368))(a1, a2)
                           + 152);

  return v7();
}

void BlueFin::GlPeEphemerisMgr::InvalidateEphemeris(uint64_t a1, unsigned char *a2)
{
  WritableEphemerisObuint64_t j = BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj(a1, a2);
  *(unsigned char *)(WritableEphemerisObj + 8) &= 0xF0u;
  size_t v3 = 4 * *(unsigned __int8 *)(WritableEphemerisObj + 9);
  unint64_t v4 = *(void **)(WritableEphemerisObj + 16);

  bzero(v4, v3);
}

uint64_t BlueFin::GlPeEphemerisMgr::GetEphIode(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (*a2 - 1 >= 0x3F)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1599, "GetEphIode", (char)"rotGnssId.isValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1599, "rotGnssId.isValid()");
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 368))(a1, a2);
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 192))(v7, 29);
    *a3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 232))(v7, 29) * v8;
  }
  return v6;
}

uint64_t BlueFin::GlPeEphemerisMgr::IsFresh(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 312))(a1);
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 368))(a1, a2);
    uint64_t v6 = v5;
    unsigned int v7 = *(_DWORD *)(a1[2] + 2568);
    if (v7 <= 0xFF9222FE) {
      double v8 = (double)v7;
    }
    else {
      double v8 = (double)(int)v7;
    }
    unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5);
    uint64_t result = 0;
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t, double))(*a1 + 72))(a1, v6, 1, v8 + (double)(1000 * (v9 >> 1))))
    {
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 144))(v6);
      if ((v10 & 0xFFFFFFFD) == 1) {
        return 1;
      }
      if (!v10)
      {
        uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 368))(a1, a2);
        if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 184))(v11)) {
          return 1;
        }
      }
    }
  }
  return result;
}

BOOL BlueFin::GlPeEphemerisMgr::IsVisible(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double a4)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 312))(a1)) {
    return 0;
  }
  double v8 = *(double *)(a1 + 472);
  if (v8 == 4294967300.0) {
    goto LABEL_8;
  }
  if (vabdd_f64(a4, v8) >= 1000.0)
  {
    bzero(*(void **)(a1 + 480), ((4 * *(unsigned __int8 *)(a1 + 488) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(a1 + 504), ((4 * *(unsigned __int8 *)(a1 + 512) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
LABEL_8:
    *(double *)(a1 + 472) = a4;
    goto LABEL_9;
  }
  unint64_t v9 = *a2;
  unint64_t v10 = v9 >> 5;
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 480) + 4 * (v9 >> 5));
  uint64_t v12 = 1 << (v9 & 0x1F);
  if ((v12 & v11) != 0) {
    return (v12 & *(_DWORD *)(*(void *)(a1 + 504) + 4 * v10)) != 0;
  }
LABEL_9:
  BOOL v13 = 0;
  if (BlueFin::GlPeTimeManager::TimeKnown(*(void *)(a1 + 16), 0, 0x3938700u))
  {
    uint64_t v14 = (_DWORD *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 368))(a1, a2);
    BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(a1 + 16), a4, 1, (uint64_t)v19);
    BOOL v13 = (BlueFin::GlPeEphemeris::isExpired(v14, (uint64_t)v19) & 1) == 0
       && (*(int (**)(_DWORD *, unsigned char *, uint64_t))(*(void *)v14 + 128))(v14, v19, a3) >= 0;
    unsigned int v15 = *a2;
    if (v15 - 64 <= 0xFFFFFFC0)
    {
      DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
    }
    uint64_t v16 = v15 >> 5;
    *(_DWORD *)(*(void *)(a1 + 480) + 4 * v16) |= 1 << v15;
    char v17 = (void *)(a1 + 504);
    if (v13) {
      *(_DWORD *)(*v17 + 4 * v16) |= 1 << v15;
    }
    else {
      BlueFin::GlSetBase::Remove((uint64_t)v17, v15);
    }
  }
  return v13;
}

uint64_t BlueFin::GlPeEphemerisMgr::GetApproximateElevation(uint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t result = BlueFin::GlPeTimeManager::TimeKnown(a1[2], 0, 0x3938700u);
  if (result)
  {
    unint64_t v9 = (_DWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 368))(a1, a2);
    BlueFin::GlPeTimeManager::GetTime((unsigned int *)a1[2], a4, 1, (uint64_t)v10);
    uint64_t result = BlueFin::GlPeEphemeris::isExpired(v9, (uint64_t)v10);
    if ((result & 1) == 0) {
      return (*(uint64_t (**)(_DWORD *, unsigned char *, uint64_t))(*(void *)v9 + 128))(v9, v10, a3);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::DeserializeBadDecode(BlueFin::GlPeEphemerisMgr *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 36)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1883, "DeserializeBadDecode", (char)"pEntry->eType == GLPE_LOG_ENTRY_EPH_BAD_DEC");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1883, "pEntry->eType == GLPE_LOG_ENTRY_EPH_BAD_DEC");
  }
  uint64_t v5 = &unk_270EC0C18;
  BlueFin::GlPeEphBadDecode::Deserialize((BlueFin::GlPeEphBadDecode *)&v5, a2);
  if (*((_DWORD *)this + 3) != v6) {
    return 0;
  }
  unsigned __int8 v4 = v7;
  (*(void (**)(BlueFin::GlPeEphemerisMgr *, unsigned __int8 *, void))(*(void *)this + 288))(this, &v4, 0);
  return v7;
}

uint64_t BlueFin::GlPeEphemerisMgr::SerializeEph(_DWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 312))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(_DWORD *, unsigned __int8 *))(*(void *)a1 + 368))(a1, a2);
    if (a3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)result + 24))(result, a3, 0);
      if (a3)
      {
        int v7 = a1[3];
        double v8 = "BDS";
        unint64_t v9 = "GPS";
        switch(v7)
        {
          case 0:
            return GlCustomLog(14, "Write NVMEM Ephemeris(%s,%d)\n", v9, *a2);
          case 1:
            unint64_t v9 = "SBAS";
            break;
          case 2:
            unint64_t v9 = "GLNS";
            break;
          case 3:
            unint64_t v9 = "QZSS";
            break;
          case 4:
            goto LABEL_13;
          default:
            unint64_t v10 = "<->";
            if (v7 == 6) {
              unint64_t v10 = "NIC";
            }
            double v8 = "GAL";
            if (v7 != 5) {
              double v8 = v10;
            }
LABEL_13:
            unint64_t v9 = v8;
            break;
        }
        return GlCustomLog(14, "Write NVMEM Ephemeris(%s,%d)\n", v9, *a2);
      }
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeEphemerisMgr::SerializeAllEph(void *a1, char a2, unsigned int *a3, uint64_t a4)
{
  if (a3) {
    unint64_t v7 = *a3;
  }
  else {
    unint64_t v7 = 14;
  }
  double v8 = (BlueFin::GlPeTimeManager *)a1[2];
  int v9 = *((_DWORD *)v8 + 644);
  __n128 Time = BlueFin::GlPeTimeManager::GetTime(v8, 1, v21);
  (*(void (**)(void **__return_ptr, void *, __n128))(*a1 + 304))(&__src, a1, Time);
  unsigned __int8 v16 = v15;
  memcpy(v20, __src, 4 * v15);
  __int16 v18 = 0;
  unsigned __int8 v17 = 0;
  int v19 = v20[0];
  while (1)
  {
    uint64_t result = BlueFin::GlSetIterator::operator++(&v16);
    if (v17 == v16) {
      return result;
    }
    LOBYTE(__src) = v18;
    WritableEphemerisObuint64_t j = BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj((uint64_t)a1, &__src);
    unint64_t v13 = WritableEphemerisObj;
    if (!v9
      || ((*(uint64_t (**)(unint64_t))(*(void *)WritableEphemerisObj + 80))(WritableEphemerisObj) & 1) != 0)
    {
      if ((a2 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    (*(void (**)(unint64_t, __n128 *))(*(void *)v13 + 72))(v13, v21);
    if (a2)
    {
LABEL_11:
      if ((*(unsigned int (**)(unint64_t))(*(void *)v13 + 80))(v13)) {
        goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if ((v7 >> (*(uint64_t (**)(unint64_t))(*(void *)v13 + 152))(v13))) {
        (*(void (**)(void *, void **, uint64_t))(*a1 + 200))(a1, &__src, a4);
      }
    }
  }
}

uint64_t BlueFin::GlPeEphemerisMgr::SaveToBuffer(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 304))(&__src);
  unsigned __int8 v11 = v10;
  memcpy(v15, __src, 4 * v10);
  __int16 v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  BlueFin::GlSetIterator::operator++(&v11);
  LOBYTE(v6) = 0;
  if (v12 != v11)
  {
    uint64_t v6 = 0;
    while (1)
    {
      LOBYTE(__src) = v13;
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 368))(a1, &__src);
      if (a3 == v6) {
        break;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 264))(v7, a2);
      ++v6;
      BlueFin::GlSetIterator::operator++(&v11);
      a2 += 80;
      if (v12 == v11) {
        return v6;
      }
    }
    LOBYTE(v6) = a3;
  }
  return v6;
}

uint64_t BlueFin::GlPeEphemerisMgr::RestoreFromBuffer(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  if (a3)
  {
    char v4 = 0;
    uint64_t v5 = a3;
    uint64_t v6 = (char *)(a2 + 4);
    do
    {
      unsigned int v7 = *(v6 - 4);
      if (a1[3] == v7 >> 4)
      {
        uint64_t v8 = (*(uint64_t (**)(_DWORD *, uint64_t *, void))(*(void *)a1 + 16))(a1, &v10, v7 & 0xF);
        memcpy(*(void **)(v8 + 16), v6, 4 * *(unsigned __int8 *)(v8 + 9));
        if (v4) {
          char v4 = 1;
        }
        else {
          char v4 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 32))(a1, v8);
        }
      }
      v6 += 80;
      --v5;
    }
    while (v5);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t BlueFin::GlPeEphemerisMgr::SerializeBadDecode(uint64_t result, char *a2)
{
  unsigned int v2 = &unk_270EC0C18;
  int v3 = *(_DWORD *)(result + 12);
  char v4 = *a2;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeEphBadDecode::SerializeImpl((uint64_t)&v2, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeEphemerisMgr::ClearSuspectedBadDecode(BlueFin::GlPeEphemerisMgr *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 532);
  *((unsigned char *)this + 532) = 0;
  return v1;
}

uint64_t BlueFin::GlPeEphemerisMgr::MarkSuspectedBadDecode(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = "T";
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 336))(a1, a2);
    BlueFin::GlPeRangeAidGen::RemoveSvFromEph(*(void *)(a1 + 80), *(_DWORD *)(a1 + 12), *a2);
    uint64_t v5 = "F";
  }
  *(unsigned char *)(a1 + 532) = 1;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 240))(a1, a2);
  int v6 = *(_DWORD *)(a1 + 12);
  unsigned int v7 = "BDS";
  uint64_t v8 = "GPS";
  switch(v6)
  {
    case 0:
      return GlCustomLog(14, "EphMgr(%s,%d)[%u] MarkSuspectedBadDecode. KeepCurrEph:%s\n", v8, *a2, *(_DWORD *)(*(void *)(a1 + 16) + 2568), v5);
    case 1:
      uint64_t v8 = "SBAS";
      break;
    case 2:
      uint64_t v8 = "GLNS";
      break;
    case 3:
      uint64_t v8 = "QZSS";
      break;
    case 4:
      goto LABEL_10;
    default:
      int v9 = "<->";
      if (v6 == 6) {
        int v9 = "NIC";
      }
      unsigned int v7 = "GAL";
      if (v6 != 5) {
        unsigned int v7 = v9;
      }
LABEL_10:
      uint64_t v8 = v7;
      break;
  }
  return GlCustomLog(14, "EphMgr(%s,%d)[%u] MarkSuspectedBadDecode. KeepCurrEph:%s\n", v8, *a2, *(_DWORD *)(*(void *)(a1 + 16) + 2568), v5);
}

uint64_t BlueFin::GlPeEphemerisMgr::MarkUnverified(uint64_t a1, unsigned char *a2)
{
  unsigned int v2 = *(uint64_t (**)(void))(*(void *)BlueFin::GlPeEphemerisMgr::GetWritableEphemerisObj(a1, a2) + 176);

  return v2();
}

unsigned __int8 *BlueFin::GlPeEphemerisMgr::GetVerifiedSet@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 2;
  if (this[104])
  {
    int v3 = this;
    unsigned int v4 = 0;
    do
    {
      unsigned __int8 v6 = ++v4;
      this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, unsigned __int8 *))(*(void *)v3 + 312))(v3, &v6);
      if (this)
      {
        uint64_t v5 = (*(uint64_t (**)(unsigned __int8 *, unsigned __int8 *))(*(void *)v3 + 368))(v3, &v6);
        this = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 184))(v5);
        if (this)
        {
          if (v6 - 64 <= 0xFFFFFFC0)
          {
            DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          }
          *(_DWORD *)(*(void *)a2 + (((unint64_t)v6 >> 3) & 0x1C)) |= 1 << v6;
        }
      }
    }
    while (v4 < v3[104]);
  }
  return this;
}

unsigned __int8 *BlueFin::GlPeEphemerisMgr::GetUnhealthyProbationSet@<X0>(BlueFin::GlPeEphemerisMgr *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 12) = 0;
  uint64_t v3 = a2 + 12;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 2;
  int v4 = *(_DWORD *)(*((void *)this + 2) + 2568);
  unsigned __int8 v11 = *((unsigned char *)this + 368);
  memcpy(v15, *((const void **)this + 45), 4 * v11);
  __int16 v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v11); v12 != v11; uint64_t result = BlueFin::GlSetIterator::operator++(&v11))
  {
    unsigned __int8 v6 = (char *)this + 4 * v13;
    int v9 = *((_DWORD *)v6 + 26);
    unsigned int v7 = v6 + 104;
    int v8 = v9;
    if (v9)
    {
      int v10 = v4 - v8;
      if (v10 < 0) {
        int v10 = -v10;
      }
      if (v10 < 0x36EE81)
      {
        if (v13 - 64 <= 0xFFFFFFC0)
        {
          DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        }
        *(_DWORD *)(v3 + 4 * (v13 >> 5)) |= 1 << v13;
      }
      else
      {
        *unsigned int v7 = 0;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetFctS(BlueFin::GlPeGpsEphemerisBase *this, const BlueFin::GlPeGnssTime *a2)
{
  double v3 = (*(double (**)(BlueFin::GlPeGpsEphemerisBase *, const BlueFin::GlPeGnssTime *, uint64_t))(*(void *)this + 64))(this, a2, 1);
  uint64_t v9 = *(void *)a2;
  int v10 = *((_DWORD *)a2 + 2);
  long long v11 = *((_OWORD *)a2 + 1);
  BlueFin::GlPeGnssTime::operator-=((unsigned int *)&v9, v3);
  unsigned __int8 v12 = &off_270EBC600;
  uint64_t v13 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v9, (BlueFin::GlGpsTime *)&v12);
  unsigned int v4 = ((uint64_t (*)(void))v12[4])(&v12);
  LODWORD(v5) = v13;
  double v6 = (double)v5 * 2.32830644e-10 + (double)v4;
  double v7 = fmod(v6, 4294967300.0);
  if (v6 <= 4294967300.0) {
    double v7 = v6;
  }
  if (v7 < -4294967300.0) {
    double v7 = -fmod(-v7, 4294967300.0);
  }
  if (v7 < 0.0) {
    return --v7;
  }
  else {
    return v7;
  }
}

BOOL BlueFin::GlPeGpsEphemerisBase::CompareEphSetFields(BlueFin::GlPeGpsEphemerisBase *this, const BlueFin::GlPeGpsEphemerisBase *a2)
{
  if ((*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 27))
  {
    if ((*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 27))
    {
      int v4 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 28);
      if (v4 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 28))return 0; {
    }
      }
  }
  int v5 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 5);
  if (v5 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 5))return 0; {
  int v6 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 3);
  }
  return v6 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 3);
}

uint64_t BlueFin::GlPeGpsEphemerisBase::CompareBroadcastFields(BlueFin::GlPeGpsEphemerisBase *this, const BlueFin::GlPeGpsEphemerisBase *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)this + 280))(this);
  if (result)
  {
    int v5 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, void))(*(void *)this + 192))(this, 0);
    int v6 = (*(uint64_t (**)(const BlueFin::GlPeGpsEphemerisBase *, void))(*(void *)a2 + 192))(a2, 0);
    uint64_t result = 0;
    if (v5 == v6)
    {
      int v7 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 30);
      if (v7 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 30))return 0; {
      int v8 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 4);
      }
      if (v8 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 4))return 0; {
      int v9 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 3);
      }
      if (v9 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 3))return 0; {
      int v10 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 6);
      }
      if (v10 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 6))return 0; {
      int v11 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 5);
      }
      if (v11 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 5))return 0; {
      int v12 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 7);
      }
      if (v12 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 7))return 0; {
      int v13 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 8);
      }
      if (v13 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 8))return 0; {
      int v14 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 9);
      }
      if (v14 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 9))return 0; {
      int v15 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 10);
      }
      if (v15 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 10))return 0; {
      int v16 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 11);
      }
      if (v16 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 11))return 0; {
      int v17 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 12);
      }
      if (v17 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 12))return 0; {
      int v18 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 13);
      }
      if (v18 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 13))return 0; {
      int v19 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 14);
      }
      if (v19 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 14))return 0; {
      int v20 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 15);
      }
      if (v20 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 15))return 0; {
      int v21 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 16);
      }
      if (v21 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 16))return 0; {
      int v22 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 17);
      }
      if (v22 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 17))return 0; {
      int v23 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 18);
      }
      if (v23 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 18))return 0; {
      int v24 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 19);
      }
      if (v24 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 19)&& (int v25 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 20), v25 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 20))&& (v26 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 21), v26 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 21))&& (v27 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 22), v27 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2,
                     22))
        && (int v28 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 23), v28 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 23))&& (v29 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 24), v29 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 24))&& (v30 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 25), v30 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 25)))
      {
        int v31 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 208))(this, 26);
        return v31 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 208))(a2, 26);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetSatClkInfo(BlueFin::GlPeGpsEphemerisBase *this, const BlueFin::GlPeGnssTime *a2, double *a3, double *a4)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 17);
  double v9 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 15);
  double v22 = v9;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 12)
      + sqrt(3.986005e14/ (ScaledFloatingField* ScaledFloatingField* (ScaledFloatingField* ScaledFloatingField* (ScaledFloatingField* ScaledFloatingField))));
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 9);
  double v12 = (*(double (**)(BlueFin::GlPeGpsEphemerisBase *, const BlueFin::GlPeGnssTime *, void))(*(void *)this + 64))(this, a2, 0);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 10) + v11 * v12;
  *a3 = v13;
  double v14 = v13 - BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 6);
  double v15 = (*(double (**)(BlueFin::GlPeGpsEphemerisBase *, const BlueFin::GlPeGnssTime *, uint64_t))(*(void *)this + 64))(this, a2, 1)- v14;
  double v21 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 13) + v10 * v15;
  double v20 = 0.0;
  BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v21, &v22, &v20, v16);
  __double2 v17 = __sincos_stret(v20);
  double v18 = ScaledFloatingField * (v9 * -4.44280763e-10);
  *a3 = *a3 + v18 * v17.__sinval;
  *a4 = v11 + v18 * v17.__cosval * v10;
  return 1;
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetApproximateElevation(BlueFin::GlPeEphemeris *a1, uint64_t a2, double *a3)
{
  double v5 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22);
  double v7 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12) + 0.00014585;
  double v8 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v7 * v5;
  double v9 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v10 = __sincos_stret(v8 + v9);
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20);
  double v12 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v13 = __sincos_stret(v11 + (v5 + v12) * -0.0000729211515);
  __double2 v14 = __sincos_stret(ScaledFloatingField);
  double v15 = ((a3[1] * (v14.__cosval * (v10.__sinval * 26560700.0) * v13.__cosval + v10.__cosval * 26560700.0 * v13.__sinval)
        + (v10.__cosval * 26560700.0 * v13.__cosval - v14.__cosval * (v10.__sinval * 26560700.0) * v13.__sinval) * *a3
        + v14.__sinval * (v10.__sinval * 26560700.0) * a3[2])
       / 1.6912e14
       + -0.24)
      * 90.0;
  if (v15 <= 0.0)
  {
    if (v15 >= 0.0)
    {
      int v17 = 0;
      goto LABEL_7;
    }
    double v16 = -0.5;
  }
  else
  {
    double v16 = 0.5;
  }
  int v17 = (int)(v15 + v16);
LABEL_7:
  if (v17 <= -90) {
    int v17 = -90;
  }
  if (v17 >= 90) {
    return 90;
  }
  else {
    return v17;
  }
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetIssueOfData(BlueFin::GlPeGpsEphemerisBase *this)
{
  return (*(unsigned __int8 (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)this + 192))(this, 5);
}

uint64_t BlueFin::GlPeGpsEphemerisBase::MarkUnverified(BlueFin::GlPeGpsEphemerisBase *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)this + 216))(this, 2, 0);
}

uint64_t BlueFin::GlPeGpsEphemerisBase::GetUncompressed(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 192))(a1, 0) - 1;
  *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1) == 2;
  *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4);
  *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 3);
  *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 5);
  *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 6);
  *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 7);
  *(_DWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 8);
  *(_DWORD *)(a2 + 60) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 9);
  *(_DWORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 10);
  *(_DWORD *)(a2 + 68) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 11);
  *(_DWORD *)(a2 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 12);
  *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 13);
  *(_DWORD *)(a2 + 80) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 14);
  *(_DWORD *)(a2 + 84) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 15);
  *(_DWORD *)(a2 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 16);
  *(_DWORD *)(a2 + 92) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 17);
  *(_DWORD *)(a2 + 96) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 18);
  *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 30);
  *(_DWORD *)(a2 + 108) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 19);
  *(_DWORD *)(a2 + 112) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 20);
  *(_DWORD *)(a2 + 116) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 21);
  *(_DWORD *)(a2 + 120) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 22);
  *(_DWORD *)(a2 + 124) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 23);
  *(_DWORD *)(a2 + 128) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 24);
  *(_DWORD *)(a2 + 132) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 25);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 26);
  *(_DWORD *)(a2 + 136) = result;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

BOOL BlueFin::GlPeQzssEphemeris::CompareEphSetFields(BlueFin::GlPeQzssEphemeris *this, const BlueFin::GlPeGpsEphemerisBase *a2)
{
  if ((*(unsigned int (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 192))(this, 27)
    && (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 27)&& (int v4 = (*(uint64_t (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 192))(this, 28), v4 != (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 28)))
  {
    BOOL v8 = 0;
  }
  else
  {
    int v5 = (*(uint64_t (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 192))(this, 18);
    int v6 = (*(uint64_t (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 232))(this, 18) * v5;
    int v7 = (*(uint64_t (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 18);
    BOOL v8 = v6 == (*(unsigned int (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 232))(a2, 18)* v7;
  }
  int v9 = (*(uint64_t (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 192))(this, 5);
  int v10 = (*(uint64_t (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 5);
  int v11 = (*(uint64_t (**)(BlueFin::GlPeQzssEphemeris *, uint64_t))(*(void *)this + 192))(this, 3);
  int v12 = (*(uint64_t (**)(const BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)a2 + 192))(a2, 3);
  BOOL v13 = v9 == v10 && v8;
  return v11 == v12 && v13;
}

uint64_t BlueFin::GlPeQzssEphemeris::GetApproximateElevation(_DWORD *a1, uint64_t a2, double *a3)
{
  uint64_t v15 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  if ((BlueFin::GlPeEphemeris::isExpired(a1, a2) & 1) != 0
    || !(*(unsigned int (**)(_DWORD *, uint64_t, long long *, double))(*(void *)a1 + 112))(a1, a2, &v10, 0.125))
  {
    LOBYTE(v8) = -90;
    return (char)v8;
  }
  double v6 = ((*((double *)&v10 + 1) * a3[1] + *(double *)&v10 * *a3 + *(double *)&v11 * a3[2]) / 2.6894e14 + -0.24) * 90.0;
  if (v6 > 0.0)
  {
    double v7 = 0.5;
LABEL_9:
    int v8 = (int)(v6 + v7);
    goto LABEL_10;
  }
  if (v6 < 0.0)
  {
    double v7 = -0.5;
    goto LABEL_9;
  }
  int v8 = 0;
LABEL_10:
  if (v8 <= -90) {
    int v8 = -90;
  }
  if (v8 >= 90) {
    LOBYTE(v8) = 90;
  }
  return (char)v8;
}

int32x2_t *BlueFin::GlPeLtoEphemeris::GlPeLtoEphemeris(int32x2_t *a1, uint64_t a2, unsigned int a3, char a4)
{
  *a1 = (int32x2_t)&unk_270EC0528;
  *BlueFin::GlPeGpsEphemerisBase::GlPeGpsEphemerisBase(a1, a2, a3, a4, 0x13u, &a1[4]) = (int32x2_t)&unk_270EC0528;
  if (!*(_DWORD *)(a2 + 4))
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 3606, "GlPeLtoEphemeris", (char)"rotUncmprsdEph.ExtensionBit != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 3606, "rotUncmprsdEph.ExtensionBit != 0");
  }
  BlueFin::GlPeLtoEphemeris::PutCmpUnsignedField((BlueFin::GlPeLtoEphemeris *)a1, 0x25u, *(_DWORD *)(a2 + 32));
  BlueFin::GlPeLtoEphemeris::PutCmpUnsignedField((BlueFin::GlPeLtoEphemeris *)a1, 0x20u, (*(_DWORD *)(a2 + 4) >> 1) & 0xF);
  BlueFin::GlPeLtoEphemeris::PutCmpUnsignedField((BlueFin::GlPeLtoEphemeris *)a1, 0x23u, (*(_DWORD *)(a2 + 4) >> 9) & 1);
  BlueFin::GlPeLtoEphemeris::PutCmpSignedField((BlueFin::GlPeLtoEphemeris *)a1, 36, (int)(*(_DWORD *)(a2 + 4) << 23) >> 28);
  return a1;
}

uint64_t *BlueFin::GlPeLtoEphemeris::PutCmpSignedField(BlueFin::GlPeLtoEphemeris *this, int a2, int a3)
{
  double v6 = (unsigned int *)*((void *)this + 2);
  int v7 = 4 * *((unsigned __int8 *)this + 9);
  int v10 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v9, v6, v7);
  if (a2 != 36) {
    return BlueFin::GlPeGpsEphemerisBase::PutCmpSignedField(this, a2, a3);
  }
  BlueFin::GlBitBuffer::Position((uint64_t)v9, 0x245u);
  return BlueFin::GlBitBuffer::PutU(v9, a3 + 16, 4u);
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::SetDataSubFrmMeas(BlueFin::GlPeGpsQzssEphMgr *this, BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v202 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    int v8 = "pDataSubFrmMeas != 0";
    DeviceFaultNotify("glpe_ephmgr.cpp", 3969, "SetDataSubFrmMeas", (char)"pDataSubFrmMeas != 0");
    int v9 = 3969;
    goto LABEL_168;
  }
  if (*((unsigned __int8 *)a2 + 9) - 1 >= 3)
  {
    int v8 = "pDataSubFrmMeas->ucSubFrmId == 1 || pDataSubFrmMeas->ucSubFrmId == 2 || pDataSubFrmMeas->ucSubFrmId == 3";
    DeviceFaultNotify("glpe_ephmgr.cpp", 3970, "SetDataSubFrmMeas", (char)"pDataSubFrmMeas->ucSubFrmId == 1 || pDataSubFrmMeas->ucSubFrmId == 2 || pDataSubFrmMeas->ucSubFrmId == 3");
    int v9 = 3970;
    goto LABEL_168;
  }
  int v4 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)this + 8);
  int v188 = 7;
  LOBYTE(v189) = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss(v4, (unsigned __int8 *)a2 + 8, (uint64_t)&v188);
  if (v188 > 6 || (int v6 = v189, v189 - 1 >= 0x3F))
  {
    int v8 = "otGnss.isValid()";
    DeviceFaultNotify("glpe_ephmgr.cpp", 3973, "SetDataSubFrmMeas", (char)"otGnss.isValid()");
    int v9 = 3973;
    goto LABEL_168;
  }
  if (*((_DWORD *)this + 3) != v188) {
    return result;
  }
  unsigned int v175 = *(_DWORD *)(*((void *)this + 2) + 2568);
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 544, v189);
  if (*(unsigned __int8 *)(*((void *)this + 70) + v6 - *((unsigned __int8 *)this + 580)) == 255
    && *((unsigned __int8 *)this + 583) == 255)
  {
    *(void *)&long long v182 = (char *)this + 544;
    BYTE8(v182) = 0;
    if (!*((unsigned char *)this + 582)) {
      goto LABEL_257;
    }
    unsigned int v49 = 0;
    int v50 = 0;
    do
    {
      int v51 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v182);
      unsigned int v52 = *(_DWORD *)(BlueFin::GlArray::Get((BlueFin::GlPeGpsQzssEphMgr *)((char *)this + 544), v51)
                      + 8);
      unsigned int v53 = v175 - v52;
      if (v49 <= v175 - v52) {
        int v54 = v51;
      }
      else {
        int v54 = v50;
      }
      if (v49 > v53) {
        unsigned int v53 = v49;
      }
      if (v175 > v52)
      {
        int v50 = v54;
        unsigned int v49 = v53;
      }
    }
    while (BYTE8(v182) < *(unsigned __int8 *)(v182 + 38));
    if (v49 <= 0xEA60)
    {
LABEL_257:
      int v55 = *((_DWORD *)this + 3);
      char v56 = "BDS";
      BOOL v57 = "GPS";
      switch(v55)
      {
        case 0:
          return GlCustomLog(13, "EphMgr(%s,%d)[%u]: No free decoders available! GnssId:%d\n", v57, v189, v175, v189);
        case 1:
          BOOL v57 = "SBAS";
          break;
        case 2:
          BOOL v57 = "GLNS";
          break;
        case 3:
          BOOL v57 = "QZSS";
          break;
        case 4:
          goto LABEL_43;
        default:
          int v58 = "<->";
          if (v55 == 6) {
            int v58 = "NIC";
          }
          char v56 = "GAL";
          if (v55 != 5) {
            char v56 = v58;
          }
LABEL_43:
          BOOL v57 = v56;
          break;
      }
      return GlCustomLog(13, "EphMgr(%s,%d)[%u]: No free decoders available! GnssId:%d\n", v57, v189, v175, v189);
    }
    BlueFin::GlArray::Remove((BlueFin::GlPeGpsQzssEphMgr *)((char *)this + 544), v50);
    int v6 = v189;
  }
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 544, v6);
  int v7 = (BlueFin::GlPeGpsQzssEphMgr *)((char *)this + 544);
  if (*(unsigned __int8 *)(*((void *)this + 70) + v6 - *((unsigned __int8 *)this + 580)) == 255)
  {
    int v10 = (char *)BlueFin::GlArray::Add(v7, v6);
    if (v10)
    {
      *(_DWORD *)int v10 = *((_DWORD *)this + 3);
      unsigned char v10[4] = v6;
      *((_DWORD *)v10 + 2) = -7200001;
      *(_OWORD *)(v10 + 24) = 0u;
      long long v11 = v10 + 24;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(void *)(v10 + 12) = 0;
      uint64_t v12 = (uint64_t)v10;
      v10[20] = 0;
      __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, &v176);
      uint64_t v14 = (*(uint64_t (**)(BlueFin::GlPeGpsQzssEphMgr *, unsigned int *, __n128))(*(void *)this + 368))(this, &v189, Time);
      uint64_t v15 = v14;
      BOOL v16 = (*(unsigned char *)(v14 + 8) & 0xF) != 1 || v176.n128_u32[2] == -1;
      if (!v16
        && *(double *)&v177[8] != 4294967300.0
        && (BlueFin::GlPeEphemeris::isExpired((_DWORD *)v14, (uint64_t)&v176) & 1) == 0)
      {
        long long v182 = (unint64_t)v11;
        LOBYTE(v183[0]) = 0;
        DWORD1(v183[1]) = 0;
        *(_OWORD *)((char *)v183 + 4) = xmmword_263BB2640;
        BYTE8(v183[1]) = 0;
        unsigned int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 28);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v17, 0xAu);
        unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 4);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v18, 4u);
        unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 3);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v19, 6u);
        unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 5);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v20, 0xAu);
        unsigned int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 6);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v21, 8u);
        unsigned int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 7);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v22, 0x10u);
        unsigned int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 8);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v23, 8u);
        unsigned int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 9);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v24, 0x10u);
        unsigned int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 10);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v25, 0x16u);
        long long v182 = (unint64_t)(v12 + 40);
        LOBYTE(v183[0]) = 0;
        DWORD1(v183[1]) = 0;
        HIDWORD(v183[0]) = 0;
        *(void *)((char *)v183 + 4) = 0xC0000000C0;
        BYTE8(v183[1]) = 0;
        unsigned int v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 29);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v26, 8u);
        unsigned int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 11);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v27, 0x10u);
        unsigned int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 12);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v28, 0x10u);
        unsigned int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 13);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v29, 0x20u);
        unsigned int v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 14);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v30, 0x10u);
        unsigned int v31 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 15);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v31, 0x20u);
        unsigned int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 16);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v32, 0x10u);
        unsigned int v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 17);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v33, 0x20u);
        unsigned int v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 18);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v34, 0x10u);
        unsigned int v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 30);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v35, 1u);
        long long v182 = (unint64_t)(v12 + 64);
        LOBYTE(v183[0]) = 0;
        DWORD1(v183[1]) = 0;
        HIDWORD(v183[0]) = 0;
        *(void *)((char *)v183 + 4) = 0xC0000000C0;
        BYTE8(v183[1]) = 0;
        unsigned int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 19);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v36, 0x10u);
        unsigned int v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 20);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v37, 0x20u);
        unsigned int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 21);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v38, 0x10u);
        unsigned int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 22);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v39, 0x20u);
        unsigned int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 23);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v40, 0x10u);
        unsigned int v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 24);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v41, 0x20u);
        unsigned int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 25);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v42, 0x18u);
        unsigned int v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 29);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v43, 8u);
        unsigned int v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 208))(v15, 26);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v182, v44, 0xEu);
        *(unsigned char *)(v12 + 16) = 7;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 184))(v15)) {
          char v45 = 7;
        }
        else {
          char v45 = 0;
        }
        *(unsigned char *)(v12 + 17) = v45;
        int v46 = *((_DWORD *)this + 3);
        uint64_t v47 = "BDS";
        int v48 = "GPS";
        switch(v46)
        {
          case 0:
            break;
          case 1:
            int v48 = "SBAS";
            break;
          case 2:
            int v48 = "GLNS";
            break;
          case 3:
            int v48 = "QZSS";
            break;
          case 4:
            goto LABEL_51;
          default:
            uint64_t v47 = "<->";
            if (v46 == 6) {
              uint64_t v47 = "NIC";
            }
            if (v46 == 5) {
              uint64_t v47 = "GAL";
            }
LABEL_51:
            int v48 = v47;
            break;
        }
        int v59 = v189;
        int v60 = *(_DWORD *)(*((void *)this + 2) + 2568);
        long long v61 = BlueFin::GlPeEphemerisMgr::m_acEphDataSource[(*(unsigned __int8 (**)(uint64_t))(*(void *)v15 + 144))(v15)
                                                         + 1];
        int v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 192))(v15, 5);
        GlCustomLog(14, "EphMgr(%s,%d)[%u]: Pre-loaded with existing data.  Src:%s  IODC:%03x\n", v48, v59, v60, v61, v62);
      }
      uint64_t result = v12;
      goto LABEL_54;
    }
    int v8 = "pBuffer != nullptr";
    DeviceFaultNotify("glpe_ephmgr.cpp", 4272, "getDecoder", (char)"pBuffer != nullptr");
    int v9 = 4272;
LABEL_168:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", v9, v8);
  }
  uint64_t result = BlueFin::GlArray::Get(v7, v6);
  if (!result)
  {
    int v8 = "potDecoder != nullptr";
    DeviceFaultNotify("glpe_ephmgr.cpp", 4291, "getDecoder", (char)"potDecoder != nullptr");
    int v9 = 4291;
    goto LABEL_168;
  }
LABEL_54:
  char v63 = *((unsigned char *)a2 + 9);
  if ((v63 - 4) <= 0xFCu)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 812, "InsertSubframe", (char)"ucSubId == 1 || ucSubId == 2 || ucSubId == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 812, "ucSubId == 1 || ucSubId == 2 || ucSubId == 3");
  }
  uint64_t v201 = 0;
  __n128 v199 = 0u;
  long long v200 = 0u;
  v176.n128_u64[0] = (unint64_t)&v199;
  v176.n128_u64[1] = 0;
  v177[0] = 0;
  *(_DWORD *)&v177[20] = 0;
  *(_OWORD *)&v177[4] = xmmword_263BB2920;
  v177[24] = 0;
  if (*((_DWORD *)a2 + 7) >> 30) {
    return result;
  }
  __int16 v174 = (BlueFin::GlPeGpsTypeEphemerisDecoder *)result;
  uint64_t v64 = 0;
  unsigned __int8 v171 = v63 - 1;
  unsigned int v65 = 61;
  do
  {
    BlueFin::GlBitBuffer::Position((uint64_t)&v176, v65);
    uint64_t result = (uint64_t)BlueFin::GlBitBuffer::PutU((uint64_t *)&v176, *((_DWORD *)a2 + v64 + 7) >> 6, 0x18u);
    if (v64 == 7)
    {
      *((unsigned char *)v174 + 18) = 0;
      long long v184 = 0u;
      *(void *)&v198[0] = &v182;
      *(void *)&v198[1] = v183;
      *(void *)&v198[2] = (char *)&v183[1] + 8;
      uint64_t v69 = *(unsigned int **)&v198[v171];
      long long v182 = 0u;
      memset(v183, 0, sizeof(v183));
      size_t v70 = byte_263BB40C0[v171];
      LODWORD(v194[0]) = 0;
      BlueFin::GlBitBuffer::Initialize((uint64_t)&v190, v69, v70);
      uint64_t v71 = 0;
      char v72 = BlueFin::GlPeGpsTypeEphemerisDecoder::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucFieldIdx[v171];
      if (BlueFin::GlPeGpsTypeEphemerisDecoder::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucNumFields[v171] <= 1u) {
        uint64_t v73 = 1;
      }
      else {
        uint64_t v73 = BlueFin::GlPeGpsTypeEphemerisDecoder::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucNumFields[v171];
      }
      do
      {
        uint64_t v74 = (v72 + v71);
        BlueFin::GlBitBuffer::Position((uint64_t)&v176, *((unsigned __int16 *)&BlueFin::GlPeGpsTypeEphemerisDecoder::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucSfFieldOffsets+ 2 * v74));
        LODWORD(v74) = *((unsigned __int8 *)&BlueFin::GlPeGpsTypeEphemerisDecoder::InsertSubframe(BlueFin::GlDataSubFrmMeas const&)::aucSfFieldOffsets
                       + 4 * v74
                       + 2);
        unsigned int v75 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)&v176, v74);
        BlueFin::GlBitBuffer::PutU((uint64_t *)&v190, v75, v74);
        ++v71;
      }
      while (v73 != v71);
      *(void *)unsigned int v195 = (char *)v174 + 24;
      unsigned int v196 = (char *)v174 + 40;
      int v197 = (char *)v174 + 64;
      int v76 = *((unsigned __int8 *)v174 + 17);
      uint64_t v77 = *(void **)&v195[8 * v171];
      char v78 = 1 << v171;
      if (((1 << v171) & *((unsigned __int8 *)v174 + 16)) != 0)
      {
        if (!memcmp(*(const void **)&v195[8 * v171], v69, v70))
        {
          char v80 = v76 | v78;
          int v68 = v174;
          *((unsigned char *)v174 + 17) = v80;
          *((unsigned char *)v174 + 18) = *((unsigned char *)v174 + 19);
        }
        else
        {
          char v79 = v76 & ~v78;
          int v68 = v174;
          *((unsigned char *)v174 + 17) = v79;
          *((unsigned char *)v174 + 18) = 1;
          memcpy(v77, v69, v70);
        }
        *((unsigned char *)v68 + 19) = 0;
      }
      else
      {
        memcpy(*(void **)&v195[8 * v171], v69, v70);
        *((unsigned char *)v174 + 16) |= v78;
        *((unsigned char *)v174 + 18) = 1;
        int v68 = v174;
      }
      *((_DWORD *)v68 + 2) = *((_DWORD *)a2 + 15);
      *((_DWORD *)v68 + 3) = *((_DWORD *)a2 + 4);
      BOOL v82 = v76 != 7 && *((unsigned char *)v68 + 17) == 7;
      *((unsigned char *)v68 + 20) = v82;
      goto LABEL_78;
    }
    unsigned int v66 = *((_DWORD *)a2 + v64 + 8);
    v65 += 30;
    ++v64;
  }
  while (!(v66 >> 30));
  BOOL v67 = (unint64_t)(v64 + 1) >= 9;
  int v68 = v174;
  if (!v67) {
    return result;
  }
LABEL_78:
  uint64_t result = *((void *)this + 2);
  if (!*(_DWORD *)(result + 2576))
  {
    *((unsigned char *)v68 + 19) = 1;
    return result;
  }
  __n128 v83 = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)result, 1, &v199);
  int v84 = (const BlueFin::GlPeEphemeris *)(*(uint64_t (**)(BlueFin::GlPeGpsQzssEphMgr *, unsigned int *, __n128))(*(void *)this + 368))(this, &v189, v83);
  int v85 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v84 + 144))(v84);
  int v87 = 0;
  if (v85 == -1 || v199.n128_u32[2] == -1)
  {
    int v89 = 0;
  }
  else
  {
    v86.n128_u64[0] = *((void *)&v200 + 1);
    int v89 = 0;
    if (*((double *)&v200 + 1) != 4294967300.0)
    {
      if (BlueFin::GlPeEphemeris::isExpired(v84, (uint64_t)&v199))
      {
        int v87 = 0;
        int v89 = 0;
      }
      else
      {
        int v87 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v84 + 184))(v84);
        int v89 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)v84 + 40))(v84) ^ 1;
      }
    }
  }
  uint64_t result = (uint64_t)v174;
  if (*((unsigned char *)a2 + 9) != 1) {
    goto LABEL_122;
  }
  if ((*((unsigned char *)v174 + 16) & 1) == 0)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 1020, "GetHealthCode", (char)"SubframePresent(1)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 1020, "SubframePresent(1)");
  }
  unsigned int v90 = *((_DWORD *)v174 + 6);
  BOOL v16 = ((v90 >> 12) & 0x3F & (*(unsigned __int8 (**)(BlueFin::GlPeGpsQzssEphMgr *, __n128))(*(void *)this + 360))(this, v86)) == 0;
  uint64_t result = (uint64_t)v174;
  if (v16) {
    goto LABEL_122;
  }
  if (v85)
  {
    unsigned int v91 = v189;
    uint64_t v92 = *((void *)this + 45);
    unint64_t v93 = (unint64_t)v189 >> 5;
    char v94 = v189 & 0x1F;
    uint64_t v95 = 1 << (v189 & 0x1F);
    uint64_t v96 = *(unsigned int *)(v92 + 4 * v93);
LABEL_94:
    if ((v95 & v96) == 0)
    {
      *((_DWORD *)this + v91 + 26) = *(_DWORD *)(*((void *)this + 2) + 2568);
      if (v91 - 64 <= 0xFFFFFFC0)
      {
        DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      }
      *(_DWORD *)(v92 + 4 * v93) |= 1 << v94;
    }
    int v97 = *((_DWORD *)this + 3);
    if (v85)
    {
      __n128 v98 = "BDS";
      uint64_t v99 = "GPS";
      switch(v97)
      {
        case 0:
          break;
        case 1:
          uint64_t v99 = "SBAS";
          break;
        case 2:
          uint64_t v99 = "GLNS";
          break;
        case 3:
          uint64_t v99 = "QZSS";
          break;
        case 4:
          goto LABEL_110;
        default:
          uint64_t v102 = "<->";
          if (v97 == 6) {
            uint64_t v102 = "NIC";
          }
          __n128 v98 = "GAL";
          if (v97 != 5) {
            __n128 v98 = v102;
          }
LABEL_110:
          uint64_t v99 = v98;
          break;
      }
      GlCustomLog(14, "EphMgr(%s,%d)[%u]: First decode is marked unhealthy by SV.  Putting on probation.\n", v99, v91, *(_DWORD *)(*((void *)this + 2) + 2568));
    }
    else
    {
      uint64_t v100 = "BDS";
      uint64_t v101 = "GPS";
      switch(v97)
      {
        case 0:
          break;
        case 1:
          uint64_t v101 = "SBAS";
          break;
        case 2:
          uint64_t v101 = "GLNS";
          break;
        case 3:
          uint64_t v101 = "QZSS";
          break;
        case 4:
          goto LABEL_118;
        default:
          double v103 = "<->";
          if (v97 == 6) {
            double v103 = "NIC";
          }
          uint64_t v100 = "GAL";
          if (v97 != 5) {
            uint64_t v100 = v103;
          }
LABEL_118:
          uint64_t v101 = v100;
          break;
      }
      GlCustomLog(14, "EphMgr(%s,%d)[%u]: SV just went unhealthy. Putting on probation.\n", v101, v91, *(_DWORD *)(*((void *)this + 2) + 2568));
    }
    goto LABEL_120;
  }
  unsigned int v91 = v189;
  uint64_t v92 = *((void *)this + 45);
  unint64_t v93 = (unint64_t)v189 >> 5;
  uint64_t v96 = *(unsigned int *)(v92 + 4 * v93);
  char v94 = v189 & 0x1F;
  uint64_t v95 = 1 << (v189 & 0x1F);
  if ((v95 & v96) == 0) {
    goto LABEL_94;
  }
LABEL_120:
  uint64_t v104 = *((void *)this + 7);
  LODWORD(v182) = *((_DWORD *)this + 3);
  BYTE4(v182) = v189;
  BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded((unsigned char *)(v104 + 32), 0, (uint64_t)&v182);
  uint64_t v105 = *((void *)this + 4);
  uint64_t result = (uint64_t)v174;
  if ((*(unsigned char *)(v105 + 1636) & 4) == 0)
  {
    unsigned int v106 = *((_DWORD *)this + 3);
    LOBYTE(v182) = v189;
    BlueFin::GlGnssSet::Add(v105 + 576, v106, (unsigned __int8 *)&v182);
    uint64_t result = (uint64_t)v174;
  }
LABEL_122:
  if (*(unsigned char *)(result + 16) != 7) {
    return result;
  }
  long long v107 = (void *)(result + 24);
  uint64_t v108 = result + 40;
  int v109 = HIBYTE(*(_DWORD *)(result + 40));
  if (v109 != (*(_DWORD *)(result + 24) >> 2)) {
    return result;
  }
  if (v109 != *(unsigned __int8 *)(result + 86)) {
    return result;
  }
  int v110 = *(unsigned __int8 *)(result + 17);
  if (!*(unsigned char *)(result + 18) && !*(unsigned char *)(result + 20)) {
    return result;
  }
  if ((v87 | v89) == 1 && v110 != 7)
  {
    int v111 = *((_DWORD *)this + 3);
    long long v112 = "BDS";
    long long v113 = "GPS";
    switch(v111)
    {
      case 0:
        break;
      case 1:
        long long v113 = "SBAS";
        break;
      case 2:
        long long v113 = "GLNS";
        break;
      case 3:
        long long v113 = "QZSS";
        break;
      case 4:
        goto LABEL_151;
      default:
        BOOL v118 = "<->";
        if (v111 == 6) {
          BOOL v118 = "NIC";
        }
        long long v112 = "GAL";
        if (v111 != 5) {
          long long v112 = v118;
        }
LABEL_151:
        long long v113 = v112;
        break;
    }
    __int16 v119 = "verified";
    if (v89) {
      __int16 v119 = "unhealthy";
    }
    return GlCustomLog(14, "EphMgr(%s,%d)[%u]: Current ephemeris is %s, therefore wait for new set to be verified\n", v113, v189, v175, v119);
  }
  if (v85 != -1 && ((v87 ^ 1) & 1) == 0 && v110 != 7)
  {
    DeviceFaultNotify("glpe_ephmgr.cpp", 4057, "SetDataSubFrmMeas", (char)"eCurrentEphDataSrc == GlPeEphemeris::EPH_DATA_SRC_NONE || !bCurrentEphVerified || bAllNewEphSubframesVerified");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ephmgr.cpp", 4057, "eCurrentEphDataSrc == GlPeEphemeris::EPH_DATA_SRC_NONE || !bCurrentEphVerified || bAllNewEphSubframesVerified");
  }
  WORD4(v182) = 4609;
  *(void *)&v183[0] = &v183[1];
  *((int32x2_t *)&v183[0] + 1) = vdup_n_s32(0xFF9222FF);
  v183[1] = 0u;
  long long v184 = 0u;
  long long v185 = 0u;
  long long v186 = 0u;
  uint64_t v187 = 0;
  uint64_t v181 = 0;
  *(void *)&long long v182 = &unk_270EC02B8;
  v176.n128_u16[4] = 4657;
  *(void *)double v177 = &v177[16];
  *(void *)&v177[8] = *((void *)&v183[0] + 1);
  *(_OWORD *)&v177[16] = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  v176.n128_u64[0] = (unint64_t)&unk_270EC03F0;
  if (*((_DWORD *)this + 3)) {
    long long v114 = (BlueFin::GlPeGpsEphemerisBase *)&v176;
  }
  else {
    long long v114 = (BlueFin::GlPeGpsEphemerisBase *)&v182;
  }
  BlueFin::GlPeGpsTypeEphemerisDecoder::Unpack((BlueFin::GlPeGpsTypeEphemerisDecoder *)result, v114);
  if (BlueFin::GlPeEphemeris::isExpired(v114, (uint64_t)&v199))
  {
    int v115 = *((_DWORD *)this + 3);
    long long v116 = "BDS";
    long long v117 = "GPS";
    switch(v115)
    {
      case 0:
        break;
      case 1:
        long long v117 = "SBAS";
        break;
      case 2:
        long long v117 = "GLNS";
        break;
      case 3:
        long long v117 = "QZSS";
        break;
      case 4:
        goto LABEL_163;
      default:
        long long v116 = "<->";
        if (v115 == 6) {
          long long v116 = "NIC";
        }
        if (v115 == 5) {
          long long v116 = "GAL";
        }
LABEL_163:
        long long v117 = v116;
        break;
    }
    int v123 = v189;
    double v124 = (*(double (**)(BlueFin::GlPeGpsEphemerisBase *, __n128 *, uint64_t))(*(void *)v114 + 64))(v114, &v199, 1);
    unsigned int v190 = (void *)v199.n128_u64[0];
    unsigned __int32 v191 = v199.n128_u32[2];
    long long v193 = v200;
    BlueFin::GlPeGnssTime::operator-=((unsigned int *)&v190, v124);
    double v125 = BlueFin::GlPeGnssTime::operator-((unsigned int *)&v190, (uint64_t)&v199);
    uint64_t result = GlCustomLog(13, "EphMgr(%s,%d)[%u]: Newly decoded eph is already expired!  Toe-CurTime(s):%.0lf\n", v117, v123, v175, v125);
    goto LABEL_165;
  }
  if (v85 == -1) {
    goto LABEL_224;
  }
  if ((*(uint64_t (**)(const BlueFin::GlPeEphemeris *, BlueFin::GlPeGpsEphemerisBase *))(*(void *)v84 + 280))(v84, v114))
  {
    if ((((*(unsigned int (**)(const BlueFin::GlPeEphemeris *, BlueFin::GlPeGpsEphemerisBase *))(*(void *)v84 + 288))(v84, v114) | v87) & 1) == 0&& ((*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)v114 + 184))(v114) & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGpsQzssEphMgr *, unsigned int *, void))(*(void *)this + 288))(this, &v189, 0);
LABEL_165:
      *((_WORD *)v174 + 8) = 0;
      long long v193 = 0u;
      memset(v194, 0, sizeof(v194));
      *long long v107 = 0;
      v107[1] = 0;
      *(_OWORD *)uint64_t v108 = v193;
      *(void *)(v108 + 16) = v194[0];
      *((_OWORD *)v174 + 4) = *(_OWORD *)&v194[1];
      *((void *)v174 + 10) = v194[3];
      return result;
    }
  }
  else
  {
    int v120 = *((_DWORD *)this + 3);
    __n128 v121 = "BDS";
    double v122 = "GPS";
    switch(v120)
    {
      case 0:
        break;
      case 1:
        double v122 = "SBAS";
        break;
      case 2:
        double v122 = "GLNS";
        break;
      case 3:
        double v122 = "QZSS";
        break;
      case 4:
        goto LABEL_175;
      default:
        __n128 v121 = "<->";
        if (v120 == 6) {
          __n128 v121 = "NIC";
        }
        if (v120 == 5) {
          __n128 v121 = "GAL";
        }
LABEL_175:
        double v122 = v121;
        break;
    }
    int v172 = v189;
    uint64_t v173 = v122;
    int v170 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 192))(v84, 18);
    int v169 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 232))(v84, 18);
    int v168 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 192))(v84, 5);
    int v167 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 232))(v84, 5);
    int v166 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 192))(v84, 3);
    int v165 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 192))(v114, 18);
    int v164 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 232))(v114, 18);
    int v126 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 192))(v114, 5);
    int v127 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 232))(v114, 5);
    int v128 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 192))(v114, 3);
    GlCustomLog(15, "EphMgr(%s,%d)[%u]: New ephemeris set detected.  Toe/IODC/health  Old:(%u,%03x,%u) New:(%u,%03x,%u)\n", v173, v172, v175, v169 * v170, v167 * v168, v166, v164 * v165, v127 * v126, v128);
  }
  if (((v89 & 1) != 0
     || ((*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)v114 + 40))(v114) & 1) == 0)
    && (((*(unsigned int (**)(const BlueFin::GlPeEphemeris *, BlueFin::GlPeGpsEphemerisBase *))(*(void *)v84 + 288))(v84, v114) ^ 1 | v87) & 1) == 0&& (*(unsigned int (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)v114 + 184))(v114))
  {
    int v129 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 192))(v84, 31);
    int v130 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 232))(v84, 31);
    (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, void))(*(void *)v114 + 216))(v114, 31, (v130 * v129));
    goto LABEL_224;
  }
  v198[0] = 0.0;
  v195[0] = 0;
  if (!BlueFin::GlPeGpsQzssEphMgr::sameSlotAndPlane(this, v84, v114, v198, v195))
  {
LABEL_224:
    uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGpsQzssEphMgr *, BlueFin::GlPeGpsEphemerisBase *, void))(*(void *)this + 376))(this, v114, 0);
    if (result)
    {
      int v153 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)v114 + 40))(v114);
      (*(void (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)v114 + 184))(v114);
      int v154 = *((_DWORD *)this + 3);
      double v155 = "BDS";
      BOOL v156 = "GPS";
      switch(v154)
      {
        case 0:
          break;
        case 1:
          BOOL v156 = "SBAS";
          break;
        case 2:
          BOOL v156 = "GLNS";
          break;
        case 3:
          BOOL v156 = "QZSS";
          break;
        case 4:
          goto LABEL_233;
        default:
          double v155 = "<->";
          if (v154 == 6) {
            double v155 = "NIC";
          }
          if (v154 == 5) {
            double v155 = "GAL";
          }
LABEL_233:
          BOOL v156 = v155;
          break;
      }
      int v157 = v189;
      if (v153) {
        uint64_t v158 = 84;
      }
      else {
        uint64_t v158 = 70;
      }
      int v159 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 192))(v114, 5);
      int v160 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *))(*(void *)v114 + 184))(v114);
      uint64_t v161 = 70;
      if (v160) {
        uint64_t v161 = 84;
      }
      uint64_t result = GlCustomLog(14, "EphMgr(%s,%d)[%u]: Valid Eph decoded.  Healthy:%c  IODC:%u  Verified:%c\n", v156, v157, v175, v158, v159, v161);
      if (v153)
      {
        unsigned int v190 = &unk_270EBFF50;
        long long v193 = 0uLL;
        unsigned __int32 v191 = *((_DWORD *)this + 3);
        char v192 = v189;
        int v162 = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 192))(v114, 7);
        DWORD2(v193) = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 232))(v114, 7)* v162;
        LOWORD(v162) = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 192))(v114, 28);
        WORD6(v193) = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 232))(v114, 28)* v162;
        DWORD1(v193) = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 208))(v114, 9);
        LODWORD(v193) = (*(uint64_t (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t))(*(void *)v114 + 208))(v114, 10);
        uint64_t result = *((void *)this + 12);
        if (result) {
          return BlueFin::GlPeClkCalibrateMgr::SetClkCalibrateParams(result, (const BlueFin::stClkCalibrateParams *)&v190);
        }
      }
    }
    return result;
  }
  double v131 = fabs(v198[0]);
  double v132 = fmod(v131, 4294967300.0);
  if (v131 > 4294967300.0) {
    double v131 = v132;
  }
  int v133 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 192))(v84, 31);
  int v134 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)v84 + 232))(v84, 31);
  unsigned int v135 = v131;
  if (v134 * v133)
  {
    v195[0] = v135 > 0x93A80;
    int v136 = *((_DWORD *)this + 3);
    float v137 = "BDS";
    unsigned int v138 = "GPS";
    switch(v136)
    {
      case 0:
        break;
      case 1:
        unsigned int v138 = "SBAS";
        break;
      case 2:
        unsigned int v138 = "GLNS";
        break;
      case 3:
        unsigned int v138 = "QZSS";
        break;
      case 4:
        goto LABEL_206;
      default:
        unsigned __int8 v148 = "<->";
        if (v136 == 6) {
          unsigned __int8 v148 = "NIC";
        }
        float v137 = "GAL";
        if (v136 != 5) {
          float v137 = v148;
        }
LABEL_206:
        unsigned int v138 = v137;
        break;
    }
    uint64_t v149 = 78;
    if (v135 > 0x93A80) {
      uint64_t v149 = 89;
    }
    GlCustomLog(15, "EphMgr(%s,%d)[%u]: Org eph had valid SameSlotAndPlane. New Eph: ToeDiff:%u  NewS&P:%c  Accept:Y\n", v138, v189, v175, v131, v149);
LABEL_223:
    (*(void (**)(BlueFin::GlPeGpsEphemerisBase *, uint64_t, BOOL))(*(void *)v114 + 216))(v114, 31, v195[0]);
    goto LABEL_224;
  }
  if (v195[0])
  {
    unsigned int v139 = v135 % 0x15180;
    BOOL v140 = v135 > 0x3840 && v139 > 1;
    BOOL v141 = v140;
    v195[0] = v141;
    int v142 = *((_DWORD *)this + 3);
    char v143 = "BDS";
    unsigned __int8 v144 = "GPS";
    switch(v142)
    {
      case 0:
        break;
      case 1:
        unsigned __int8 v144 = "SBAS";
        break;
      case 2:
        unsigned __int8 v144 = "GLNS";
        break;
      case 3:
        unsigned __int8 v144 = "QZSS";
        break;
      case 4:
        goto LABEL_217;
      default:
        unsigned int v150 = "<->";
        if (v142 == 6) {
          unsigned int v150 = "NIC";
        }
        char v143 = "GAL";
        if (v142 != 5) {
          char v143 = v150;
        }
LABEL_217:
        unsigned __int8 v144 = v143;
        break;
    }
    BOOL v16 = !v141;
    uint64_t v151 = 78;
    if (!v16) {
      uint64_t v151 = 89;
    }
    BOOL v140 = v139 > 1;
    uint64_t v152 = 84;
    if (v140) {
      uint64_t v152 = 70;
    }
    GlCustomLog(14, "EphMgr(%s,%d)[%u]: SameSlotAndPlane matched. ToeDiff:%u  IntDay:%c  NewS&P:%c  Accept:Y\n", v144, v189, v175, v131, v152, v151);
    goto LABEL_223;
  }
  *((_WORD *)v174 + 8) = 0;
  long long v193 = 0u;
  memset(v194, 0, sizeof(v194));
  *long long v107 = 0;
  v107[1] = 0;
  *(_OWORD *)uint64_t v108 = v193;
  *(void *)(v108 + 16) = v194[0];
  *((_OWORD *)v174 + 4) = *(_OWORD *)&v194[1];
  *((void *)v174 + 10) = v194[3];
  int v145 = *((_DWORD *)this + 3);
  unsigned int v146 = "BDS";
  uint64_t v147 = "GPS";
  switch(v145)
  {
    case 0:
      return GlCustomLog(13, "EphMgr(%s,%d)[%u]: Possible cross correlation detected!  Accept:N\n", v147, v189, v175);
    case 1:
      uint64_t v147 = "SBAS";
      break;
    case 2:
      uint64_t v147 = "GLNS";
      break;
    case 3:
      uint64_t v147 = "QZSS";
      break;
    case 4:
      goto LABEL_249;
    default:
      unsigned int v163 = "<->";
      if (v145 == 6) {
        unsigned int v163 = "NIC";
      }
      unsigned int v146 = "GAL";
      if (v145 != 5) {
        unsigned int v146 = v163;
      }
LABEL_249:
      uint64_t v147 = v146;
      break;
  }
  return GlCustomLog(13, "EphMgr(%s,%d)[%u]: Possible cross correlation detected!  Accept:N\n", v147, v189, v175);
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::sameSlotAndPlane(BlueFin::GlPeGpsQzssEphMgr *this, const BlueFin::GlPeEphemeris *a2, const BlueFin::GlPeEphemeris *a3, double *a4, BOOL *a5)
{
  *a4 = 0.0;
  *a5 = 0;
  int v10 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a2 + 40))(a2);
  uint64_t result = 0;
  if (v10)
  {
    uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *))(*(void *)a3 + 40))(a3);
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a2 + 192))(a2, 27);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, uint64_t))(*(void *)a3 + 192))(a3, 27);
        if (result)
        {
          __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, v32);
          unsigned int v13 = (*(uint64_t (**)(const BlueFin::GlPeEphemeris *, __n128 *, __n128))(*(void *)a2 + 32))(a2, v32, Time);
          __n128 v14 = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)this + 2), 1, v32);
          double v15 = (double)(*(unsigned int (**)(const BlueFin::GlPeEphemeris *, __n128 *, __n128))(*(void *)a3 + 32))(a3, v32, v14)- (double)v13;
          *a4 = v15;
          double v31 = 0.0;
          v32[0].n128_u64[0] = 0;
          BlueFin::GlPeGpsQzssEphMgr::adjustEph(a2, (const BlueFin::GlPeEphemeris *)v32, v15 * 0.5, &v31, v16);
          double v29 = 0.0;
          double v30 = 0.0;
          BlueFin::GlPeGpsQzssEphMgr::adjustEph(a3, (const BlueFin::GlPeEphemeris *)&v30, *a4 * -0.5, &v29, v17);
          double v18 = v32[0].n128_f64[0] + v31 - (v30 + v29);
          double v19 = (v32[0].n128_f64[0] - v30) / 6.28318531;
          double v20 = 0.0;
          double v21 = ceil(v19 + -0.5);
          if (v19 >= 0.0) {
            double v21 = 0.0;
          }
          double v22 = floor(v19 + 0.5);
          if (v19 > 0.0) {
            double v23 = v22;
          }
          else {
            double v23 = v21;
          }
          double v24 = v18 / 6.28318531;
          if (v18 / 6.28318531 <= 0.0)
          {
            if (v24 < 0.0) {
              double v20 = ceil(v24 + -0.5);
            }
          }
          else
          {
            double v20 = floor(v24 + 0.5);
          }
          if (fabs(v32[0].n128_f64[0] - v30 - v23 * 6.28318531) >= 0.523598776
            || fabs(v18 + v20 * -6.28318531) >= 0.523598776)
          {
            int v25 = *((_DWORD *)this + 3);
            unsigned int v26 = "BDS";
            unsigned int v27 = "GPS";
            switch(v25)
            {
              case 0:
                break;
              case 1:
                unsigned int v27 = "SBAS";
                break;
              case 2:
                unsigned int v27 = "GLNS";
                break;
              case 3:
                unsigned int v27 = "QZSS";
                break;
              case 4:
                goto LABEL_23;
              default:
                unsigned int v26 = "<->";
                if (v25 == 6) {
                  unsigned int v26 = "NIC";
                }
                if (v25 == 5) {
                  unsigned int v26 = "GAL";
                }
LABEL_23:
                unsigned int v27 = v26;
                break;
            }
            (*(void (**)(unsigned __int8 *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))(&v28, a2);
            GlCustomLog(14, "SuspectedBadEph %s,%d (%.0lf)\n", v27, v28, *a4);
          }
          else
          {
            *a5 = 1;
          }
          return 1;
        }
      }
    }
  }
  return result;
}

double BlueFin::GlPeGpsQzssEphMgr::adjustEph(BlueFin::GlPeGpsQzssEphMgr *this, const BlueFin::GlPeEphemeris *a2, double a3, double *a4, double *a5)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 20);
  double v10 = ScaledFloatingField + BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 25) * a3;
  double v11 = v10 / 6.28318531;
  double v12 = 0.0;
  double v13 = ceil(v10 / 6.28318531 + -0.5);
  if (v10 / 6.28318531 >= 0.0) {
    double v13 = 0.0;
  }
  double v14 = floor(v11 + 0.5);
  if (v11 > 0.0) {
    double v15 = v14;
  }
  else {
    double v15 = v13;
  }
  *(double *)a2 = v10 - v15 * 6.28318531;
  double v16 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 17);
  double v17 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 13)
      + sqrt(3.986005e14 / (v16 * v16 * (v16 * v16 * (v16 * v16)))) * a3;
  double v18 = v17 / 6.28318531;
  if (v17 / 6.28318531 <= 0.0)
  {
    if (v17 / 6.28318531 < 0.0) {
      double v12 = ceil(v18 + -0.5);
    }
  }
  else
  {
    double v12 = floor(v18 + 0.5);
  }
  double result = v17 + v12 * -6.28318531;
  *a4 = result;
  return result;
}

void BlueFin::GlPeGpsEphemeris::~GlPeGpsEphemeris(BlueFin::GlPeGpsEphemeris *this)
{
}

void BlueFin::GlPeQzssEphemeris::~GlPeQzssEphemeris(BlueFin::GlPeQzssEphemeris *this)
{
}

void BlueFin::GlPeLtoEphemeris::~GlPeLtoEphemeris(BlueFin::GlPeLtoEphemeris *this)
{
}

uint64_t BlueFin::GlPeGpsQzssEphMgr::GetHealthBitsMask(BlueFin::GlPeGpsQzssEphMgr *this)
{
  if (*((_DWORD *)this + 3)) {
    return 16;
  }
  else {
    return 63;
  }
}

void BlueFin::GlPeGpsEphMgr::~GlPeGpsEphMgr(BlueFin::GlPeGpsEphMgr *this)
{
}

void BlueFin::GlPeQzssEphMgr::~GlPeQzssEphMgr(BlueFin::GlPeQzssEphMgr *this)
{
}

void BlueFin::GlPeEphBadDecode::~GlPeEphBadDecode(BlueFin::GlPeEphBadDecode *this)
{
}

uint64_t BlueFin::GlPeGalEphemeris::GetFctS(BlueFin::GlPeGalEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  if ((*(uint64_t (**)(BlueFin::GlPeGalEphemeris *))(*(void *)this + 80))(this))
  {
    int v4 = 604800
       * (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
    int v5 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 18);
    return v4
         + (*(unsigned int (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 232))(this, 18)
         * v5;
  }
  else
  {
    BlueFin::GlPeEphemeris::GetEphTime(this, a2, (uint64_t)v13);
    double v11 = &off_270EBF538;
    uint64_t v12 = 0;
    BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)v13, (BlueFin::GlGalTime *)&v11);
    unsigned int v7 = ((uint64_t (*)(void))v11[4])(&v11);
    LODWORD(v8) = v12;
    double v9 = (double)v8 * 2.32830644e-10 + (double)v7;
    double v10 = fmod(v9, 4294967300.0);
    if (v9 <= 4294967300.0) {
      double v10 = v9;
    }
    if (v10 < -4294967300.0) {
      double v10 = -fmod(-v10, 4294967300.0);
    }
    if (v10 < 0.0) {
      return --v10;
    }
    else {
      return v10;
    }
  }
}

float BlueFin::GlPeGalEphemeris::GetAccuracyM(BlueFin::GlPeGalEphemeris *this)
{
  unsigned __int8 v1 = (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 4);
  if (v1 <= 0x7Du) {
    return (float)(int)(BlueFin::GlPeGalEphemeris::GetUraM(unsigned char)const::ausOffsetCm[v1 / 0x19u]
  }
                      + BlueFin::GlPeGalEphemeris::GetUraM(unsigned char)const::ausResolutionCm[v1 / 0x19u]
                      * (v1 % 0x19u))
         * 0.01;
  else {
    return 8192.0;
  }
}

uint64_t BlueFin::GlPeGalEphemeris::GetSatClkInfo(BlueFin::GlPeGalEphemeris *this, const BlueFin::GlPeGnssTime *a2, double *a3, double *a4)
{
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 17);
  double v9 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 15);
  double v22 = v9;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 12)
      + sqrt(3.98600442e14/ (ScaledFloatingField* ScaledFloatingField* (ScaledFloatingField* ScaledFloatingField* (ScaledFloatingField* ScaledFloatingField))));
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 9);
  double v12 = (*(double (**)(BlueFin::GlPeGalEphemeris *, const BlueFin::GlPeGnssTime *, void))(*(void *)this + 64))(this, a2, 0);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 10) + v11 * v12;
  *a3 = v13;
  double v14 = v13 - BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 6);
  double v15 = (*(double (**)(BlueFin::GlPeGalEphemeris *, const BlueFin::GlPeGnssTime *, uint64_t))(*(void *)this + 64))(this, a2, 1)- v14;
  double v21 = BlueFin::GlPeEphemeris::GetScaledFloatingField(this, 13) + v10 * v15;
  double v20 = 0.0;
  BlueFin::GlPeEphemeris::Kepler((BlueFin::GlPeEphemeris *)&v21, &v22, &v20, v16);
  __double2 v17 = __sincos_stret(v20);
  double v18 = ScaledFloatingField * (v9 * -4.44280731e-10);
  *a3 = *a3 + v18 * v17.__sinval;
  *a4 = v11 + v18 * v17.__cosval * v10;
  return 1;
}

uint64_t BlueFin::GlPeGalEphemeris::GetApproximateElevation(BlueFin::GlPeEphemeris *a1, uint64_t a2, double *a3)
{
  double v5 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 22);
  double v7 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12) + 0.00012376;
  double v8 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 13) + v7 * v5;
  double v9 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 24);
  __double2 v10 = __sincos_stret(v8 + v9);
  double v11 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 20);
  double v12 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 18);
  __double2 v13 = __sincos_stret(v11 + (v5 + v12) * -0.0000729211515);
  __double2 v14 = __sincos_stret(ScaledFloatingField);
  double v15 = ((a3[1] * (v14.__cosval * (v10.__sinval * 29632822.0) * v13.__cosval + v10.__cosval * 29632822.0 * v13.__sinval)
        + (v10.__cosval * 29632822.0 * v13.__cosval - v14.__cosval * (v10.__sinval * 29632822.0) * v13.__sinval) * *a3
        + v14.__sinval * (v10.__sinval * 29632822.0) * a3[2])
       / 1.8868e14
       + -0.24)
      * 90.0;
  if (v15 <= 0.0)
  {
    if (v15 >= 0.0)
    {
      int v17 = 0;
      goto LABEL_7;
    }
    double v16 = -0.5;
  }
  else
  {
    double v16 = 0.5;
  }
  int v17 = (int)(v15 + v16);
LABEL_7:
  if (v17 <= -90) {
    int v17 = -90;
  }
  if (v17 >= 90) {
    return 90;
  }
  else {
    return v17;
  }
}

uint64_t BlueFin::GlPeGalEphemeris::GetIssueOfData(BlueFin::GlPeGalEphemeris *this)
{
  return (*(unsigned __int16 (**)(BlueFin::GlPeGalEphemeris *, uint64_t))(*(void *)this + 192))(this, 5);
}

uint64_t BlueFin::GlPeGalEphemeris::MarkUnverified(BlueFin::GlPeGalEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeGalEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 2, 0);
}

uint64_t BlueFin::GlPeGalEphMgr::SetGalileoDataPage(BlueFin::GlPeGalEphMgr *this, const BlueFin::GlGalileoINavPage *a2)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  int v4 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)this + 8);
  double v5 = (unsigned __int8 *)a2 + 8;
  int v110 = 7;
  v111[0] = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss(v4, (unsigned __int8 *)a2 + 8, (uint64_t)&v110);
  if (v110 > 6 || (unsigned int v7 = v111[0], v8 = v111[0] - 1, v8 >= 0x3F))
  {
    int v84 = "otGnss.isValid()";
    DeviceFaultNotify("glpe_galephmgr.cpp", 996, "SetGalileoDataPage", (char)"otGnss.isValid()");
    int v85 = 996;
    goto LABEL_138;
  }
  if (*((_DWORD *)this + 3) != v110) {
    return result;
  }
  unsigned int v9 = *(_DWORD *)(*((void *)this + 2) + 2568);
  char v10 = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *))(*(void *)this + 360))(this);
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 4576, v7);
  if (*(unsigned __int8 *)(*((void *)this + 574) + v7 - *((unsigned __int8 *)this + 4612)) == 255
    && *((unsigned __int8 *)this + 4615) == 255)
  {
    uint64_t v105 = (uint64_t (**)(char **, uint64_t))((char *)this + 4576);
    LOBYTE(v106) = 0;
    if (!*((unsigned char *)this + 4614)) {
      return GlCustomLog(13, "EphMgr(GAL,%d)[%u]: No free decoders available!\n", v111[0], v9);
    }
    char v98 = v7 - 1;
    uint64_t v99 = v5;
    unsigned int v14 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v15 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v105);
      unsigned int v16 = *(_DWORD *)(BlueFin::GlArray::Get((BlueFin::GlPeGalEphMgr *)((char *)this + 4576), v15) + 20);
      unsigned int v17 = v9 - v16;
      if (v14 <= v9 - v16) {
        unsigned int v18 = v15;
      }
      else {
        unsigned int v18 = v8;
      }
      if (v14 > v17) {
        unsigned int v17 = v14;
      }
      if (v9 > v16)
      {
        unsigned int v8 = v18;
        unsigned int v14 = v17;
      }
    }
    while (v106 < *((unsigned __int8 *)v105 + 38));
    if (v14 <= 0xEA60) {
      return GlCustomLog(13, "EphMgr(GAL,%d)[%u]: No free decoders available!\n", v111[0], v9);
    }
    BlueFin::GlArray::Remove((BlueFin::GlPeGalEphMgr *)((char *)this + 4576), v8);
    unsigned int v7 = v111[0];
    LOBYTE(v8) = v98;
    double v5 = v99;
  }
  BlueFin::GlArray::EnsureValidHandle((uint64_t)this + 4576, v7);
  double v11 = (BlueFin::GlPeGalEphMgr *)((char *)this + 4576);
  if (*(unsigned __int8 *)(*((void *)this + 574) + v7 - *((unsigned __int8 *)this + 4612)) != 255)
  {
    uint64_t result = BlueFin::GlArray::Get(v11, v7);
    uint64_t v12 = result;
    goto LABEL_24;
  }
  uint64_t result = (uint64_t)BlueFin::GlArray::Add(v11, v7);
  if (!result)
  {
    int v84 = "pDecode != nullptr";
    DeviceFaultNotify("glpe_galephmgr.cpp", 1048, "SetGalileoDataPage", (char)"pDecode != nullptr");
    int v85 = 1048;
LABEL_138:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galephmgr.cpp", v85, v84);
  }
  uint64_t v12 = result;
  *(void *)(result + 100) = 0;
  *(_OWORD *)(result + 84) = 0u;
  *(_OWORD *)(result + 68) = 0u;
  *(_OWORD *)(result + 52) = 0u;
  *(_OWORD *)(result + 36) = 0u;
  *(_OWORD *)(result + 20) = 0u;
  *(void *)&long long v13 = 0x200000002;
  *((void *)&v13 + 1) = 0x200000002;
  *(_OWORD *)uint64_t result = v13;
  *(_DWORD *)(result + 16) = 2;
  if (((unint64_t)*(unsigned int *)(*((void *)this + 45) + 4 * (v7 >> 5)) >> (v7 & 0x1F))) {
    *(_DWORD *)(result + 104) = 31;
  }
  else {
    *(_DWORD *)(result + 104) = 0;
  }
LABEL_24:
  unsigned int v19 = *((unsigned __int8 *)a2 + 10);
  if (!*((unsigned char *)a2 + 10)) {
    return result;
  }
  *(_DWORD *)(v12 + 20) = v9;
  uint64_t v20 = (v19 - 1);
  if (v19 == 5) {
    int v21 = (HIBYTE(*(_DWORD *)(v12 + 96)) & 6 | (*(_DWORD *)(v12 + 96) >> 23) & 1) & *(_DWORD *)&v10;
  }
  else {
    int v21 = 0;
  }
  double v22 = (const float *)((char *)a2 + 20);
  int8x16_t v23 = (int8x16_t)vld1q_dup_f32(v22);
  int8x16_t v112 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vextq_s8(v23, *(int8x16_t *)((char *)a2 + 24), 0xCuLL), 2uLL), (int8x16_t)vshrq_n_u32(*(uint32x4_t *)((char *)a2 + 24), 0x1EuLL));
  v112.i32[3] = v112.i32[3] & 0xFFFF0000 | (v112.u8[12] << 8) | (*((_DWORD *)a2 + 9) >> 22);
  int v24 = *(_DWORD *)(v12 + 4 * (v19 - 1));
  if (v24 == 2) {
    goto LABEL_33;
  }
  if (v20 == 4 && v21)
  {
    int v24 = 2 * (((HIBYTE(v112.i32[2]) & 6 | ((unsigned __int32)v112.i32[2] >> 23) & 1) & *(_DWORD *)&v10) == 0);
    *(_DWORD *)(v12 + 4 * v20) = v24;
    goto LABEL_32;
  }
  if (v19 > 4)
  {
LABEL_39:
    *(_DWORD *)(v12 + 4 * v20) = 0;
    *(_DWORD *)(v12 + 104) &= ~(1 << v20);
    goto LABEL_40;
  }
  uint64_t v25 = 0;
  uint64_t v26 = v12 + 16 * v20;
  int v28 = *(_DWORD *)(v26 + 24);
  uint64_t v27 = v26 + 24;
  __int32 v29 = (v112.i32[0] ^ v28) & 0x3FF0000;
  while (*(_DWORD *)(v27 + v25 * 4) == v112.i32[v25])
  {
    if (++v25 == 4) {
      goto LABEL_39;
    }
  }
  int v43 = *(_DWORD *)(v12 + 104);
  *(_DWORD *)(v12 + 104) = v43 | (1 << v20);
  if (!v24)
  {
    if (!v29) {
      goto LABEL_34;
    }
    *(_DWORD *)(v12 + 4 * v20) = 2;
LABEL_84:
    *(_DWORD *)(v12 + 104) = v43 & ~(1 << v20);
LABEL_33:
    *(int8x16_t *)(v12 + 16 * v20 + 24) = v112;
LABEL_34:
    *(_DWORD *)(v12 + 4 * v20) = 1;
    goto LABEL_40;
  }
  if (v24 != 1)
  {
LABEL_32:
    if (v24 != 2) {
      goto LABEL_40;
    }
    goto LABEL_33;
  }
  *(_DWORD *)(v12 + 4 * v20) = 2;
  if (v29) {
    goto LABEL_84;
  }
  *(int8x16_t *)(v12 + 16 * v20 + 24) = v112;
  *(_DWORD *)(v12 + 4 * v20) = 1;
  uint64_t v44 = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, unsigned char *))(*(void *)this + 368))(this, v111);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v44 + 144))(v44))
  {
    uint64_t v45 = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, unsigned char *))(*(void *)this + 368))(this, v111);
    if (((*(uint64_t (**)(uint64_t))(*(void *)v45 + 184))(v45) & 1) == 0) {
      (*(void (**)(BlueFin::GlPeGalEphMgr *, unsigned char *, void))(*(void *)this + 288))(this, v111, 0);
    }
  }
  if (((unint64_t)*(unsigned int *)(*((void *)this + 54) + (((unint64_t)v111[0] >> 3) & 0x1C)) >> (v111[0] & 0x1F)))
  {
    BlueFin::GlPeLtoMgr::GetBadSvSet(*((void *)this + 4), *((_DWORD *)this + 3), 1, (unsigned int *)&v105);
    unint64_t v46 = v111[0];
    if ((*(unsigned int *)((char *)v105 + ((v46 >> 3) & 0x1C)) >> (v46 & 0x1F)))
    {
      uint64_t v47 = *((void *)this + 4);
      unsigned int v48 = *((_DWORD *)this + 3);
      if ((*(unsigned char *)(v47 + 1636) & 4) == 0)
      {
        LOBYTE(v105) = v111[0];
        BlueFin::GlGnssSet::Remove(v47 + 576, v48, (unsigned __int8 *)&v105);
        unsigned int v48 = *((_DWORD *)this + 3);
      }
      unsigned int v49 = "BDS";
      int v50 = "GPS";
      switch(v48)
      {
        case 0u:
          break;
        case 1u:
          int v50 = "SBAS";
          break;
        case 2u:
          int v50 = "GLNS";
          break;
        case 3u:
          int v50 = "QZSS";
          break;
        case 4u:
          goto LABEL_157;
        default:
          unint64_t v93 = "<->";
          if (v48 == 6) {
            unint64_t v93 = "NIC";
          }
          unsigned int v49 = "GAL";
          if (v48 != 5) {
            unsigned int v49 = v93;
          }
LABEL_157:
          int v50 = v49;
          break;
      }
      GlCustomLog(14, "GalEphMgr(%s,%d): cannot determine LTO bad.\n", v50, v111[0]);
      LODWORD(v46) = v111[0];
    }
    BlueFin::GlSetBase::Remove((uint64_t)this + 432, v46);
  }
LABEL_40:
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, unsigned char *))(*(void *)this + 368))(this, v111);
  if ((*(unsigned char *)(result + 8) & 0xF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
    BOOL v30 = result == 0;
  }
  else
  {
    BOOL v30 = 0;
  }
  unsigned int v31 = HIBYTE(*(_DWORD *)(v12 + 96)) & 6 | (*(_DWORD *)(v12 + 96) >> 23) & 1;
  if (*(unsigned char *)(*((void *)this + 5) + 923)
    && ((v32 = BlueFin::GlSvId::s_aucSvId2prn[*v5], v32 != 18) ? (BOOL v33 = v32 == 14) : (BOOL v33 = 1), v33))
  {
    uint64_t result = BlueFin::GlPeSvHealthHelper::IsUsable(*((void *)this + 7) + 32, &v110);
    unsigned __int8 v34 = v8;
    if ((result & 1) != 0 || v31 <= 7 && ((1 << v31) & 0xC1) != 0) {
      unsigned int v31 = 0;
    }
  }
  else
  {
    unsigned __int8 v34 = v8;
  }
  if (*(_DWORD *)v12 == 2) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *))(*(void *)this + 360))(this);
  int v35 = result & v31;
  if ((result & v31) != 0)
  {
    uint64_t v36 = v111[0];
    uint64_t v37 = *((void *)this + 45);
    unint64_t v38 = (unint64_t)v111[0] >> 5;
    if (v30)
    {
      uint64_t v39 = *(unsigned int *)(v37 + 4 * v38);
      char v40 = v111[0] & 0x1F;
      uint64_t v41 = 1 << (v111[0] & 0x1F);
      if ((v41 & v39) != 0)
      {
        char v42 = 0;
        goto LABEL_97;
      }
    }
    else
    {
      char v40 = v111[0] & 0x1F;
      uint64_t v41 = 1 << (v111[0] & 0x1F);
      uint64_t v39 = *(unsigned int *)(v37 + 4 * v38);
    }
    if ((v41 & v39) == 0)
    {
      *((_DWORD *)this + v34 + 27) = v9;
      if ((v36 - 64) <= 0xFFFFFFC0)
      {
        DeviceFaultNotify("glgnss.h", 115, "Add", (char)"rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glgnss.h", 115, "rtGnssId.ucGnssId >= MIN_GNSS_ID && rtGnssId.ucGnssId <= MAX_GNSS_ID");
      }
      *(_DWORD *)(v37 + 4 * v38) |= 1 << v40;
    }
    int v51 = *((_DWORD *)this + 3);
    if (!v30)
    {
      unsigned int v52 = "BDS";
      unsigned int v53 = "GPS";
      int v54 = "EphMgr(%s,%d): First decode is marked unhealthy by SV.  Putting on probation.\n";
      switch(v51)
      {
        case 0:
          goto LABEL_96;
        case 1:
LABEL_79:
          unsigned int v53 = "SBAS";
          goto LABEL_96;
        case 2:
LABEL_81:
          unsigned int v53 = "GLNS";
          goto LABEL_96;
        case 3:
LABEL_80:
          unsigned int v53 = "QZSS";
          goto LABEL_96;
        case 4:
          goto LABEL_94;
        default:
          char v56 = "<->";
          if (v51 == 6) {
            char v56 = "NIC";
          }
          unsigned int v52 = "GAL";
          if (v51 != 5) {
            unsigned int v52 = v56;
          }
LABEL_94:
          int v54 = "EphMgr(%s,%d): First decode is marked unhealthy by SV.  Putting on probation.\n";
          goto LABEL_95;
      }
    }
    unsigned int v52 = "BDS";
    unsigned int v53 = "GPS";
    int v54 = "EphMgr(%s,%d): SV just went unhealthy. Putting on probation.\n";
    switch(v51)
    {
      case 0:
        goto LABEL_96;
      case 1:
        goto LABEL_79;
      case 2:
        goto LABEL_81;
      case 3:
        goto LABEL_80;
      case 4:
        goto LABEL_89;
      default:
        int v55 = "<->";
        if (v51 == 6) {
          int v55 = "NIC";
        }
        unsigned int v52 = "GAL";
        if (v51 != 5) {
          unsigned int v52 = v55;
        }
LABEL_89:
        int v54 = "EphMgr(%s,%d): SV just went unhealthy. Putting on probation.\n";
        break;
    }
LABEL_95:
    unsigned int v53 = v52;
LABEL_96:
    GlCustomLog(14, v54, v53, v36);
    LOBYTE(v36) = v111[0];
    char v42 = 1;
LABEL_97:
    uint64_t v57 = *((void *)this + 7);
    LODWORD(v105) = *((_DWORD *)this + 3);
    BYTE4(v105) = v36;
    uint64_t result = BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded((unsigned char *)(v57 + 32), 0, (uint64_t)&v105);
    uint64_t v58 = *((void *)this + 4);
    if ((*(unsigned char *)(v58 + 1636) & 4) == 0)
    {
      unsigned int v59 = *((_DWORD *)this + 3);
      LOBYTE(v105) = v111[0];
      uint64_t result = BlueFin::GlGnssSet::Add(v58 + 576, v59, (unsigned __int8 *)&v105);
    }
    if (v42)
    {
LABEL_100:
      uint64_t v60 = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, unsigned char *))(*(void *)this + 368))(this, v111);
      int v61 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 184))(v60);
      if (!*(_DWORD *)v12
        && !*(_DWORD *)(v12 + 4)
        && !*(_DWORD *)(v12 + 8)
        && !*(_DWORD *)(v12 + 12)
        && !*(_DWORD *)(v12 + 16))
      {
        uint64_t v86 = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, unsigned char *))(*(void *)this + 368))(this, v111);
        int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 184))(v86);
        BlueFin::GlSetBase::Remove((uint64_t)this + 432, v111[0]);
        int v88 = v111[0];
        if (!v35
          && (((unint64_t)*(unsigned int *)(*((void *)this + 45) + (((unint64_t)v111[0] >> 3) & 0x1C)) >> (v111[0] & 0x1F)) & 1) != 0)
        {
          *((_DWORD *)this + v34 + 27) = 0;
          BlueFin::GlSetBase::Remove((uint64_t)this + 360, v88);
          int v89 = *((_DWORD *)this + 3);
          unsigned int v90 = "BDS";
          unsigned int v91 = "GPS";
          switch(v89)
          {
            case 0:
              break;
            case 1:
              unsigned int v91 = "SBAS";
              break;
            case 2:
              unsigned int v91 = "GLNS";
              break;
            case 3:
              unsigned int v91 = "QZSS";
              break;
            case 4:
              goto LABEL_167;
            default:
              char v94 = "<->";
              if (v89 == 6) {
                char v94 = "NIC";
              }
              unsigned int v90 = "GAL";
              if (v89 != 5) {
                unsigned int v90 = v94;
              }
LABEL_167:
              unsigned int v91 = v90;
              break;
          }
          GlCustomLog(14, "EphMgr(%s,%d): just verified healthy. It had been unhealthy.\n", v91, v111[0]);
          LOBYTE(v88) = v111[0];
        }
        uint64_t v95 = *((void *)this + 7);
        LODWORD(v105) = *((_DWORD *)this + 3);
        BYTE4(v105) = v88;
        BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded((unsigned char *)(v95 + 32), v35 == 0, (uint64_t)&v105);
        v61 |= v87 ^ 1;
        if (v35)
        {
          uint64_t v96 = *((void *)this + 4);
          if ((*(unsigned char *)(v96 + 1636) & 4) == 0)
          {
            unsigned int v97 = *((_DWORD *)this + 3);
            LOBYTE(v105) = v111[0];
            BlueFin::GlGnssSet::Add(v96 + 576, v97, (unsigned __int8 *)&v105);
          }
        }
      }
      __int16 v106 = 4177;
      long long v107 = v109;
      int32x2_t v108 = vdup_n_s32(0xFF9222FF);
      uint64_t v105 = (uint64_t (**)(char **, uint64_t))&unk_270EC0C88;
      memset(v109, 0, sizeof(v109));
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0, v111[0]);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 4u, *(unsigned __int8 *)(v12 + 68));
      if (*(unsigned char *)(*((void *)this + 5) + 923)
        && ((int v62 = BlueFin::GlSvId::s_aucSvId2prn[*v5], v62 == 18) || v62 == 14)
        && (BlueFin::GlPeSvHealthHelper::IsUsable(*((void *)this + 7) + 32, &v110)
         || v31 <= 7 && ((1 << v31) & 0xC1) != 0))
      {
        unsigned int v63 = 0;
      }
      else
      {
        unsigned int v63 = (*(_DWORD *)(v12 + 96) >> 19) & 0x10 | (*(_DWORD *)(v12 + 96) >> 25) & 3;
      }
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 3u, v63);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 5u, *(_WORD *)(v12 + 26) & 0x3FF);
      HIDWORD(v69) = *(_DWORD *)(v12 + 92);
      LODWORD(v69) = *(_DWORD *)(v12 + 96);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 6u, (int)(v69 >> 7) >> 22);
      double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)&v105, 6);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 6u, (int)(*(_DWORD *)(v12 + 92) << 15) >> 22);
      double v71 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)&v105, 6);
      HIDWORD(v69) = *(_DWORD *)(v12 + 76);
      LODWORD(v69) = *(_DWORD *)(v12 + 80);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 7u, (v69 >> 10) >> 18);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 8u, (char)*(_DWORD *)(v12 + 84) >> 2);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 9u, (8 * *(_DWORD *)(v12 + 84)) >> 11);
      HIDWORD(v69) = *(_DWORD *)(v12 + 80);
      LODWORD(v69) = *(_DWORD *)(v12 + 84);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0xAu, (int)(v69 >> 28) >> 1);
      double v72 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)&v105, 10);
      BlueFin::GlPeEphemeris::PutScaledFloatingField((BlueFin::GlPeEphemeris *)&v105, 10, v71 - ScaledFloatingField + v72);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0xBu, (__int16)(*(int *)(v12 + 68) >> 8));
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0xCu, (__int16)(*(int *)(v12 + 60) >> 8));
      HIDWORD(v69) = *(_DWORD *)(v12 + 24);
      LODWORD(v69) = *(_DWORD *)(v12 + 28);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0xDu, v69 >> 2);
      HIDWORD(v69) = *(_DWORD *)(v12 + 60);
      LODWORD(v69) = *(_DWORD *)(v12 + 64);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0xEu, (int)(v69 >> 8) >> 16);
      HIDWORD(v69) = *(_DWORD *)(v12 + 28);
      LODWORD(v69) = *(_DWORD *)(v12 + 32);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0xFu, v69 >> 2);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x10u, (__int16)(*(int *)(v12 + 64) >> 8));
      HIDWORD(v69) = *(_DWORD *)(v12 + 32);
      LODWORD(v69) = *(_DWORD *)(v12 + 36);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x11u, v69 >> 2);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x12u, (unsigned __int16)*(_DWORD *)(v12 + 24) >> 2);
      HIDWORD(v69) = *(_DWORD *)(v12 + 72);
      LODWORD(v69) = *(_DWORD *)(v12 + 76);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x13u, (int)(v69 >> 10) >> 16);
      HIDWORD(v69) = *(_DWORD *)(v12 + 40);
      LODWORD(v69) = *(_DWORD *)(v12 + 44);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x14u, v69 >> 16);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x15u, (__int16)(*(int *)(v12 + 76) >> 10));
      HIDWORD(v69) = *(_DWORD *)(v12 + 44);
      LODWORD(v69) = *(_DWORD *)(v12 + 48);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x16u, v69 >> 16);
      HIDWORD(v69) = *(_DWORD *)(v12 + 64);
      LODWORD(v69) = *(_DWORD *)(v12 + 68);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x17u, (int)(v69 >> 8) >> 16);
      HIDWORD(v69) = *(_DWORD *)(v12 + 48);
      LODWORD(v69) = *(_DWORD *)(v12 + 52);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x18u, v69 >> 16);
      HIDWORD(v69) = *(_DWORD *)(v12 + 56);
      LODWORD(v69) = *(_DWORD *)(v12 + 60);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x19u, (int)(v69 >> 16) >> 8);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x1Au, (__int16)*(_DWORD *)(v12 + 52) >> 2);
      unsigned int v73 = *(_DWORD *)(v12 + 96);
      unsigned int v74 = *(_DWORD *)(v12 + 100);
      int v75 = v105[24]((char **)&v105, 7);
      int v76 = v105[29]((char **)&v105, 7);
      int v77 = v105[24]((char **)&v105, 18);
      int v78 = v105[29]((char **)&v105, 18);
      unsigned int v79 = (__PAIR64__(v73, v74) >> 11) >> 12;
      if (v79 + 302400 >= v78 * v77) {
        int v80 = 0;
      }
      else {
        int v80 = -1;
      }
      if (v78 * v77 + 302400 < v79) {
        int v81 = 1;
      }
      else {
        int v81 = v80;
      }
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x1Bu, 1u);
      unsigned int v82 = v81 + ((v73 >> 11) & 0xFFF);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 0x1Cu, v82);
      BlueFin::GlPeGalEphemeris::PutCmpUnsignedField((BlueFin::GlPeGalEphemeris *)&v105, 1u, 0);
      if (v61) {
        ((void (*)(uint64_t (***)(char **, uint64_t), uint64_t, uint64_t))v105[27])(&v105, 2, 1);
      }
      uint64_t result = (*(uint64_t (**)(BlueFin::GlPeGalEphMgr *, uint64_t (***)(char **, uint64_t), void))(*(void *)this + 376))(this, &v105, 0);
      if (result)
      {
        uint64_t result = BlueFin::GlPeGalEphemeris::isHealthy((BlueFin::GlPeGalEphemeris *)&v105);
        if (result)
        {
          uint64_t result = *((void *)this + 12);
          if (result)
          {
            uint64_t v100 = &unk_270EBFF50;
            uint64_t v103 = 0;
            uint64_t v104 = 0;
            int v101 = *((_DWORD *)this + 3);
            char v102 = v111[0];
            uint64_t v104 = (v76 * v75);
            HIWORD(v104) = v82;
            HIDWORD(v83) = v107[1];
            LODWORD(v83) = v107[2];
            HIDWORD(v103) = (int)(v83 >> 2) >> 11;
            HIDWORD(v83) = v107[2];
            LODWORD(v83) = v107[3];
            LODWORD(v103) = (int)(v83 >> 13) >> 1;
            return BlueFin::GlPeClkCalibrateMgr::SetClkCalibrateParams(result, (const BlueFin::stClkCalibrateParams *)&v100);
          }
        }
      }
      return result;
    }
  }
  if (*(_DWORD *)v12 == 2) {
    return result;
  }
  if (*(_DWORD *)(v12 + 4) == 2) {
    return result;
  }
  if (*(_DWORD *)(v12 + 8) == 2) {
    return result;
  }
  if (*(_DWORD *)(v12 + 12) == 2) {
    return result;
  }
  if (*(_DWORD *)(v12 + 16) == 2) {
    return result;
  }
  int v64 = *(_WORD *)(v12 + 42) & 0x3FF;
  if ((*(_WORD *)(v12 + 26) & 0x3FF) != v64) {
    return result;
  }
  int v65 = *(_WORD *)(v12 + 58) & 0x3FF;
  if (v64 != v65 || v65 != (*(_WORD *)(v12 + 74) & 0x3FF)) {
    return result;
  }
  if (!*(_DWORD *)(v12 + 104)) {
    goto LABEL_100;
  }
  int v66 = *((_DWORD *)this + 3);
  BOOL v67 = "BDS";
  int v68 = "GPS";
  switch(v66)
  {
    case 0:
      return GlCustomLog(14, "EphMgr(%s,%d): new eph, wait to be verified\n", v68, v111[0]);
    case 1:
      int v68 = "SBAS";
      break;
    case 2:
      int v68 = "GLNS";
      break;
    case 3:
      int v68 = "QZSS";
      break;
    case 4:
      goto LABEL_149;
    default:
      uint64_t v92 = "<->";
      if (v66 == 6) {
        uint64_t v92 = "NIC";
      }
      BOOL v67 = "GAL";
      if (v66 != 5) {
        BOOL v67 = v92;
      }
LABEL_149:
      int v68 = v67;
      break;
  }
  return GlCustomLog(14, "EphMgr(%s,%d): new eph, wait to be verified\n", v68, v111[0]);
}

uint64_t BlueFin::GlPeGalEphMgr::GetLtoAltNavData(uint64_t a1, unsigned __int8 *a2, int a3, float *a4)
{
  int v4 = *a2;
  if ((v4 - 37) < 0xFFFFFFDC || *(unsigned __int8 *)(a1 + 32 * (v4 - 1) + 6616) + 1 != v4) {
    return 0;
  }
  if (a3 == 10)
  {
    double v5 = (__int16 *)(a1 + 32 * (v4 - 1) + 6640);
    goto LABEL_8;
  }
  if (a3 != 9) {
    return 0;
  }
  double v5 = (__int16 *)(a1 + 32 * (v4 - 1) + 6638);
LABEL_8:
  float v7 = (double)*v5 * 2.32830644e-10 * 299792458.0;
  *a4 = v7;
  return 1;
}

void BlueFin::GlPeGalEphemeris::~GlPeGalEphemeris(BlueFin::GlPeGalEphemeris *this)
{
}

void BlueFin::GlPeGalEphMgr::~GlPeGalEphMgr(BlueFin::GlPeGalEphMgr *this)
{
}

uint64_t BlueFin::GlPeGalEphMgr::GetHealthBitsMask(BlueFin::GlPeGalEphMgr *this)
{
  return 31;
}

uint64_t BlueFin::GlPeGloEphemeris::GetFctS(BlueFin::GlPeGloEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  char v10 = &off_270EBF4E8;
  uint64_t v11 = 0;
  BlueFin::GlPeGnssTime::GetGlns(a2, (BlueFin::GlGlnsTime *)&v10);
  BlueFin::GlPeGloEphemeris::computeTk((BlueFin::GlPeGloEphemeris *)v12, this, (BlueFin::GlGlnsTime *)&v10);
  int v3 = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 9);
  int v4 = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 232))(this, 9);
  BlueFin::GlGlnsTime::ResolveAmbiguity((BlueFin::GlGlnsTime *)v12, (double)(60 * v3 * v4), (uint64_t)&v10);
  unsigned int v5 = ((uint64_t (*)(void))v10[4])(&v10);
  LODWORD(v6) = v11;
  double v7 = (double)v6 * 2.32830644e-10 + (double)v5;
  double v8 = fmod(v7, 4294967300.0);
  if (v7 <= 4294967300.0) {
    double v8 = v7;
  }
  if (v8 < -4294967300.0) {
    double v8 = -fmod(-v8, 4294967300.0);
  }
  if (v8 < 0.0) {
    return --v8;
  }
  else {
    return v8;
  }
}

uint64_t BlueFin::GlPeGloEphemeris::GetSatClkInfo(BlueFin::GlPeEphemeris *a1, uint64_t a2, double *a3, double *a4)
{
  double v7 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 12);
  *a3 = -(ScaledFloatingField + -BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11) * v7);
  *a4 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 11);
  return 1;
}

uint64_t BlueFin::GlPeGloEphemeris::GetApproximateElevation(_DWORD *a1, uint64_t a2, double *a3)
{
  uint64_t v15 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  if ((BlueFin::GlPeEphemeris::isExpired(a1, a2) & 1) != 0
    || !(*(unsigned int (**)(_DWORD *, uint64_t, long long *, double))(*(void *)a1 + 112))(a1, a2, &v10, 0.0))
  {
    LOBYTE(v8) = -90;
    return (char)v8;
  }
  double v6 = ((*((double *)&v10 + 1) * a3[1] + *(double *)&v10 * *a3 + *(double *)&v11 * a3[2]) / 1.6242e14 + -0.24) * 90.0;
  if (v6 > 0.0)
  {
    double v7 = 0.5;
LABEL_9:
    int v8 = (int)(v6 + v7);
    goto LABEL_10;
  }
  if (v6 < 0.0)
  {
    double v7 = -0.5;
    goto LABEL_9;
  }
  int v8 = 0;
LABEL_10:
  if (v8 <= -90) {
    int v8 = -90;
  }
  if (v8 >= 90) {
    LOBYTE(v8) = 90;
  }
  return (char)v8;
}

uint64_t BlueFin::GlPeGloEphemeris::GetIssueOfData(BlueFin::GlPeGloEphemeris *this)
{
  return (*(unsigned __int16 (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)this + 192))(this, 9);
}

uint64_t BlueFin::GlPeGloEphemeris::MarkUnverified(BlueFin::GlPeGloEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 2, 0);
}

uint64_t BlueFin::GlPeLegacyGloEph::Deserialize(BlueFin::GlPeLegacyGloEph *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 37 || *((unsigned __int8 *)a2 + 12) - 3 < 0xFFFFFFFE) {
    return 0;
  }
  int S8 = BlueFin::GlSysLogEntry::GetS8(a2);
  if ((S8 - 7) <= 0xF1u)
  {
    int v21 = "IS_GLONASS_FCN(cFcn)";
    DeviceFaultNotify("glpe_glnephmgr.cpp", 905, "Deserialize", (char)"IS_GLONASS_FCN(cFcn)");
    int v22 = 905;
    goto LABEL_15;
  }
  int v6 = S8;
  double v7 = (unsigned int *)*((void *)this + 3);
  int v8 = 4 * *((unsigned __int8 *)this + 17);
  int v32 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v29, v7, v8);
  char v9 = *((unsigned char *)this + 17);
  BlueFin::GlBitBuffer::PutU(v29, v6 + 32, 5u);
  int v10 = 8;
  do
  {
    unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlBitBuffer::PutU(v29, U32, 0x20u);
    --v10;
  }
  while (v10);
  if (*((unsigned char *)a2 + 12) == 1)
  {
    int v28 = 0;
    v23[0] = (uint64_t)&v28;
    v23[1] = 0;
    char v24 = 0;
    int v26 = 0;
    long long v25 = xmmword_263BB2B80;
    char v27 = 0;
    unsigned int v12 = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlBitBuffer::PutU(v23, v12, 0x20u);
    BlueFin::GlBitBuffer::Position((uint64_t)v23, 0);
    unsigned int v13 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v23, 5u);
    BlueFin::GlBitBuffer::PutU(v29, v13, 5u);
    unsigned int v14 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v23, 2u);
    BlueFin::GlBitBuffer::PutU(v29, v14, 2u);
    unsigned int v15 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v23, 5u);
    BlueFin::GlBitBuffer::PutU(v29, v15 != 0, 1u);
    BlueFin::GlBitBuffer::PutU(v29, v15, 5u);
    unsigned int v16 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v23, 0x13u);
    BlueFin::GlBitBuffer::PutU(v29, v16, 0x13u);
    unsigned int v17 = 0;
    unsigned int v18 = 27;
  }
  else
  {
    unsigned int v19 = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlBitBuffer::PutU(v29, v19, 0x20u);
    unsigned __int8 v20 = 32 * v9 - 37;
    unsigned int v17 = BlueFin::GlSysLogEntry::GetU32(a2) >> -v20;
    unsigned int v18 = v20;
  }
  BlueFin::GlBitBuffer::PutU(v29, v17, v18);
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 942);
  if (v30 != v31)
  {
    int v21 = "otBitBuffer.Remaining() == 0";
    DeviceFaultNotify("glpe_glnephmgr.cpp", 944, "Deserialize", (char)"otBitBuffer.Remaining() == 0");
    int v22 = 944;
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", v22, v21);
  }
  return 1;
}

uint64_t BlueFin::GlPeLegacyGloEph::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((v4 & 0xFFFFFFFD) != 0)
  {
    DeviceFaultNotify("glpe_glnephmgr.cpp", 955, "SerializeImpl", (char)"ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", 955, "ucVersion == 2");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v20 = 37;
    char v21 = 2;
    uint64_t v22 = 0x1000000000000;
    unsigned int v19 = &unk_270EBA2F0;
    char v23 = 2;
    double v7 = (unsigned char *)(v2 + 17);
    int v8 = *(const unsigned int **)(v2 + 24);
    int v9 = 4 * *(unsigned __int8 *)(v2 + 17);
    unsigned int v18[8] = 0;
    BlueFin::GlBitBuffer::InitializeForRead((uint64_t)v18, v8, v9);
    __int16 v10 = *v7;
    int v11 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v18, 5u);
    if ((v11 & 0xFFFFFFF0) == 0x10) {
      char v12 = -32;
    }
    else {
      char v12 = 0;
    }
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v19, v12 + v11);
    if (*v7)
    {
      unsigned int v13 = 0;
      unsigned __int16 v14 = 32 * v10 - 5;
      do
      {
        if ((v14 & 0xFFE0) != 0) {
          unsigned int v15 = 32;
        }
        else {
          unsigned int v15 = v14;
        }
        int v16 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v18, v15);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, v16);
        v14 -= v15;
        ++v13;
      }
      while (v13 < *(unsigned __int8 *)(v6 + 17));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v19, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeGloEphMgr::ValidateStringOrder(BlueFin::GlPeGloEphMgr *this, BlueFin::GlGlonassDataString *a2, int a3)
{
  double v4 = *((double *)a2 + 4) * 1000.0 + (double)(1000 * (28 - 2 * a3));
  double v5 = fmod(v4, 4294967300.0);
  if (v4 <= 4294967300.0) {
    double v5 = v4;
  }
  if (v5 < -4294967300.0) {
    double v5 = -fmod(-v5, 4294967300.0);
  }
  if (v5 < 0.0) {
    unsigned int v6 = --v5;
  }
  else {
    unsigned int v6 = v5;
  }
  unsigned int v7 = *((_DWORD *)this + 1463);
  if (v7 == -7200001) {
    goto LABEL_9;
  }
  if (v6 >= v7) {
    unsigned int v9 = *((_DWORD *)this + 1463);
  }
  else {
    unsigned int v9 = v6;
  }
  if (v7 > v6) {
    unsigned int v6 = *((_DWORD *)this + 1463);
  }
  unsigned int v10 = v6 - v9;
  unsigned int v11 = (v6 - v9) % 0x7530;
  if (v11 > 0x3A98) {
    unsigned int v11 = 30000 - v11;
  }
  if (v11 <= 0x15)
  {
    unsigned int v12 = *((_DWORD *)this + 1462);
    if (v12 <= 9) {
      *((_DWORD *)this + 1462) = v12 + 1;
    }
    *((_DWORD *)this + 1463) = v6;
    return 1;
  }
  if (v10 >= 0x7526 && v11 <= 0x3FD)
  {
LABEL_9:
    uint64_t result = 1;
    *((_DWORD *)this + 1462) = 1;
    *((_DWORD *)this + 1463) = v6;
    return result;
  }
  unsigned int v13 = *((_DWORD *)this + 1462);
  if (v13 <= 1)
  {
    *((void *)this + 731) = 0xFF9222FF00000000;
    return 1;
  }
  uint64_t result = 0;
  if (v13 <= 4) {
    *((_DWORD *)this + 1462) = v13 - 1;
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphMgr::SetGlonassDataString(uint64_t this, BlueFin::GlGlonassDataString *a2, int a3, uint8x8_t a4)
{
  if (*(unsigned char *)(this + 7968)) {
    return this;
  }
  if ((a3 - 5) <= 0xFFFFFFFB)
  {
    uint64_t v45 = "iStringNumber >= 1 && iStringNumber <= 4";
    DeviceFaultNotify("glpe_glnephmgr.cpp", 1396, "SetGlonassDataString", (char)"iStringNumber >= 1 && iStringNumber <= 4");
    int v46 = 1396;
    goto LABEL_64;
  }
  char v4 = *((unsigned char *)a2 + 9);
  if ((v4 - 7) <= 0xF1u)
  {
    uint64_t v45 = "IS_GLONASS_FCN(cFcn)";
    DeviceFaultNotify("glpe_glnephmgr.cpp", 1399, "SetGlonassDataString", (char)"IS_GLONASS_FCN(cFcn)");
    int v46 = 1399;
    goto LABEL_64;
  }
  unint64_t v5 = *((unsigned int *)a2 + 5);
  if (((v5 >> 27) & 0xF) - 5 < 0xFFFFFFFC)
  {
    uint64_t v45 = "ucStringNumber >= 1 && ucStringNumber <= 4";
    DeviceFaultNotify("glpe_glnephmgr.cpp", 1004, "InsertString", (char)"ucStringNumber >= 1 && ucStringNumber <= 4");
    int v46 = 1004;
LABEL_64:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glnephmgr.cpp", v46, v45);
  }
  unsigned int v6 = (BlueFin::GlPeGloEphMgr *)this;
  uint64_t v7 = *(void *)(this + 5840);
  unsigned int v8 = (v4 + 7);
  uint64_t v9 = v7 + 184 * (v4 + 7);
  unsigned int v10 = *(_DWORD *)(*(void *)(this + 16) + 2568);
  unsigned int v11 = (_DWORD *)(v9 + 160);
  a4.i32[0] = *(_DWORD *)(v9 + 160);
  uint64_t v12 = (v5 >> 27) & 0xF;
  unsigned __int8 v13 = vmaxv_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  LODWORD(v14) = v12 - 1;
  unsigned int v15 = (char *)(v9 + 160 + v12 - 1);
  unsigned int v16 = *v15;
  unsigned int v17 = v10 + 2000 * (v12 ^ 0xF);
  int v47 = v10;
  if (v13) {
    BOOL v19 = *(_DWORD *)(v7 + 184 * (v4 + 7) + 164) < v10 || v17 < v10;
  }
  else {
    BOOL v19 = 1;
  }
  uint64_t v20 = v7 + 184 * (v4 + 7);
  *(double *)(v20 + 176) = (*((double *)a2 + 4) - (double)(2 * (int)v14)) * 1000.0;
  unsigned int v48 = (double *)(v20 + 176);
  *(_DWORD *)(v20 + 164) = v17 - 10000;
  v53.n128_u64[0] = 0;
  v53.n128_u64[1] = (unint64_t)a2 + 20;
  char v54 = 1;
  int v56 = 0;
  long long v55 = xmmword_263BB48C0;
  char v57 = 0;
  char v21 = *(unsigned int **)(v9 + 16);
  unsigned int v49 = (BlueFin::GlPeGloEphemeris *)v20;
  int v22 = 4 * *(unsigned __int8 *)(v9 + 9);
  v52[8] = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v52, v21, v22);
  if (v16)
  {
    uint64_t v14 = v14;
    if (BlueFin::GlBitBuffer::CompareBits((BlueFin::GlBitBuffer *)v52, (BlueFin::GlBitBuffer *)&v53, (BlueFin::GlBitBuffer *)((char *)&BlueFin::GlPeGloEphMgr::Stitcher::InsertString(BlueFin::GlGlonassDataString const&,unsigned int)::aulBufferPos+ 12 * v14), &BlueFin::GlPeGloEphMgr::Stitcher::InsertString(BlueFin::GlGlonassDataString const&,unsigned int)::aulStringPos[3 * v14], &BlueFin::GlPeGloEphMgr::Stitcher::InsertString(BlueFin::GlGlonassDataString const&,unsigned int)::aulLength[3 * v14], (const unsigned int *)3))
    {
      if (v16 < v13)
      {
        uint64_t v25 = v7 + 184 * (v4 + 7);
        v24.i32[0] = *(_DWORD *)(v25 + 160);
        *(uint16x4_t *)v23.i8 = vmin_u16((uint16x4_t)vdup_n_s16(v16), (uint16x4_t)*(_OWORD *)&vmovl_u8(v24));
        *(_DWORD *)(v25 + 160) = vmovn_s16(v23).u32[0];
      }
      goto LABEL_20;
    }
    *unsigned int v11 = 0;
    char v26 = 1;
  }
  else
  {
    char v26 = v13 + v19;
    uint64_t v14 = v14;
  }
  *unsigned int v15 = v26;
LABEL_20:
  this = (uint64_t)BlueFin::GlBitBuffer::TransferBits((BlueFin::GlBitBuffer *)v52, (BlueFin::GlBitBuffer *)&v53, (BlueFin::GlBitBuffer *)((char *)&unk_263BB49A0 + 12 * v14), &dword_263BB49D0[3 * v14], &dword_263BB4A00[3 * v14], (const unsigned int *)3);
  if (*(unsigned char *)v11 == 1)
  {
    uint64_t v27 = 0;
    unsigned __int8 v28 = v4 + 59;
    this = v7 + 184 * (v4 + 7);
    do
    {
      if (v27 == 3)
      {
        *((unsigned char *)v49 + 8) = *((unsigned char *)v49 + 8) & 0xF0 | 1;
        *unsigned int v11 = 0;
        goto LABEL_27;
      }
      int v29 = *(unsigned __int8 *)(v7 + 184 * (v4 + 7) + 161 + v27++);
    }
    while (v29 == 1);
    if ((unint64_t)(v27 - 1) < 3) {
      return this;
    }
LABEL_27:
    this = (*(uint64_t (**)(BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)v49 + 192))(v49, 27);
    unsigned __int8 v51 = this;
    if (this - 1 <= 0x17)
    {
      __n128 Time = BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)*((void *)v6 + 2), 1, &v53);
      if (v53.n128_u32[2] != -1)
      {
        Time.n128_u64[0] = *(void *)((char *)&v55 + 4);
        if (*(double *)((char *)&v55 + 4) != 4294967300.0)
        {
          if ((*(unsigned int (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *, double))(*(void *)v6 + 320))(v6, &v51, *(double *)((char *)&v55 + 4)))
          {
            int v31 = (_DWORD *)(*(uint64_t (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *))(*(void *)v6 + 368))(v6, &v51);
            if ((*(unsigned int (**)(_DWORD *))(*(void *)v31 + 144))(v31) != 2
              && (BlueFin::GlPeEphemeris::isExpired(v31, (uint64_t)&v53) & 1) == 0
              && ((*(uint64_t (**)(_DWORD *))(*(void *)v31 + 184))(v31) & 1) != 0)
            {
              uint64_t v32 = (*(uint64_t (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *))(*(void *)v6 + 368))(v6, &v51);
              uint64_t v33 = v7 + 184 * v8;
              if ((*(unsigned char *)(v33 + 88) & 0xF) != 0)
              {
                unsigned __int8 v34 = (const BlueFin::GlPeGloEphemeris *)v32;
                BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)v52, v49, (const BlueFin::GlPeGloEphemeris *)(v33 + 80), BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucAllEphFields, 0xFu);
                if (!v52[0])
                {
                  BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)&v50, v49, v34, BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucHealthFields, 3u);
                  unsigned int v43 = v50;
                  BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)&v50, v49, v34, BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucNewEphSetFields, 7u);
                  if (v43
                    || (unsigned int v44 = v50 - (((v50 >> 1) & 0x5B6DB6DB) + ((v50 >> 2) & 0x9249249)),
                        ((v44 + (v44 >> 3)) & 0xC71C71C7) % 0x3F > 4))
                  {
                    BOOL v35 = 1;
                    goto LABEL_60;
                  }
                  if (v50) {
                    GlCustomLog(13, "GlnsEph(%d)[%u]: Unexpected! New verified set does not differ from current set enough. DiffHealth:%c DiffEphSet:0x%02x\n", v28, v47, 70, v50);
                  }
                }
                BOOL v35 = 0;
LABEL_60:
                BOOL v39 = v35;
LABEL_49:
                uint64_t v41 = v7 + 184 * v8;
                this = BlueFin::GlPeEphemeris::operator=(v41 + 80, (uint64_t)v49);
                double v42 = *v48;
                *(double *)(v41 + 168) = *v48;
                if (v39) {
                  return BlueFin::GlPeGloEphMgr::updateEph(v6, v47, v42, v49, v35);
                }
                return this;
              }
              goto LABEL_45;
            }
          }
        }
      }
      if ((*(unsigned int (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *, __n128))(*(void *)v6 + 320))(v6, &v51, Time))
      {
        uint64_t v36 = (const BlueFin::GlPeGloEphemeris *)(*(uint64_t (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *))(*(void *)v6 + 368))(v6, &v51);
        BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)v52, v36, v49, BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucAllEphFields, 0xFu);
        BOOL v35 = v52[0] == 0;
        if (v52[0])
        {
          BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)&v50, v36, v49, BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucHealthFields, 3u);
          unsigned int v37 = v50;
          BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)&v50, v36, v49, BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucNewEphSetFields, 7u);
          if (v37
            || (unsigned int v38 = v50 - (((v50 >> 1) & 0x5B6DB6DB) + ((v50 >> 2) & 0x9249249)),
                ((v38 + (v38 >> 3)) & 0xC71C71C7) % 0x3F >= 5))
          {
            BOOL v39 = BlueFin::GlPeGloEphMgr::validateEph(v6, v49);
            goto LABEL_49;
          }
          if ((((unint64_t)*(unsigned int *)(*((void *)v6 + 48) + (((unint64_t)v51 >> 3) & 0x1C)) >> (v51 & 0x1F)) & 1) == 0)
          {
            (*(void (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *, void))(*(void *)v6 + 288))(v6, &v51, 0);
            GlCustomLog(13, "GlnsEph(%d)[%u]: Possible Glonass bad decode in published ephemeris detected! Trigger bad decode.\n", v28, v47);
            goto LABEL_46;
          }
          if (!BlueFin::GlPeGloEphMgr::validateEph(v6, v49))
          {
            GlCustomLog(13, "GlnsEph(%d)[%u]: Possible Glonass bad decode in ephemeris detected (verification had been required--reset)\n", v28, v47);
            (*(void (**)(BlueFin::GlPeGloEphMgr *, unsigned __int8 *))(*(void *)v6 + 336))(v6, &v51);
            BlueFin::GlSetBase::Remove((uint64_t)v6 + 384, v51);
            goto LABEL_46;
          }
          GlCustomLog(13, "GlnsEph(%d)[%u]: Possible Glonass bad decode in ephemeris detected (verification had been required--reverify)\n", v28, v47);
        }
      }
      else
      {
        if (!BlueFin::GlPeGloEphMgr::validateEph(v6, v49))
        {
LABEL_45:
          BOOL v35 = 0;
LABEL_46:
          BOOL v39 = 0;
          goto LABEL_49;
        }
        uint64_t v40 = v7 + 184 * v8;
        if ((*(unsigned char *)(v40 + 88) & 0xF) != 0)
        {
          BlueFin::GlPeGloEphMgr::compareEphFields((BlueFin::GlPeGloEphMgr *)v52, v49, (const BlueFin::GlPeGloEphemeris *)(v40 + 80), BlueFin::GlPeGloEphMgr::SetGlonassDataString(BlueFin::GlGlonassDataString *,int)::aucAllEphFields, 0xFu);
          BOOL v35 = v52[0] == 0;
        }
        else
        {
          BOOL v35 = 0;
        }
      }
      BOOL v39 = 1;
      goto LABEL_49;
    }
  }
  return this;
}

uint64_t BlueFin::GlPeGloEphMgr::compareEphFields(BlueFin::GlPeGloEphMgr *this, const BlueFin::GlPeGloEphemeris *a2, const BlueFin::GlPeGloEphemeris *a3, const unsigned __int8 *a4, unsigned int a5)
{
  uint64_t v9 = 0;
  int v10 = 0;
  *(_DWORD *)this = 0;
  uint64_t v11 = a5;
  do
  {
    int v12 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, void))(*(void *)a2 + 200))(a2, a4[v9]);
    uint64_t v13 = a4[v9];
    uint64_t v14 = *(void *)a2;
    if (v12)
    {
      int v15 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(v14 + 208))(a2, v13);
      uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, void))(*(void *)a3 + 208))(a3, a4[v9]);
    }
    else
    {
      int v15 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(v14 + 192))(a2, v13);
      uint64_t result = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, void))(*(void *)a3 + 192))(a3, a4[v9]);
    }
    if (v15 != result)
    {
      v10 |= 1 << v9;
      *(_DWORD *)this = v10;
    }
    ++v9;
  }
  while (v11 != v9);
  return result;
}

uint64_t BlueFin::GlPeGloEphMgr::updateEph(BlueFin::GlPeGloEphMgr *this, int a2, double a3, const BlueFin::GlPeGloEphemeris *a4, int a5)
{
  int v10 = (*(uint64_t (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a4 + 208))(a4, 4);
  unsigned int v11 = (*(unsigned __int8 (**)(const BlueFin::GlPeGloEphemeris *, uint64_t))(*(void *)a4 + 192))(a4, 27);
  int v12 = v10 << 24;
  if (v11 - 1 > 0x17 || v12 < -134217727 || v12 > 117440511) {
    return 0;
  }
  __int16 v69 = 2593;
  size_t v70 = v72;
  int32x2_t v71 = vdup_n_s32(0xFF9222FF);
  long long v16 = *((_OWORD *)a4 + 3);
  v72[0] = *((_OWORD *)a4 + 2);
  v72[1] = v16;
  int v68 = (void (**)(void **, uint64_t, void))&unk_270EC0F88;
  uint64_t v17 = *((void *)a4 + 9);
  uint64_t v73 = *((void *)a4 + 8);
  uint64_t v74 = v17;
  if (a5) {
    BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 2, 1u);
  }
  *((unsigned char *)this + 88 * v11 + 5768) = -1;
  if (BlueFin::GlPeTimeManager::TimeKnown(*((void *)this + 2), 1, 0xE4E1C0u))
  {
    BlueFin::GlPeTimeManager::GetTime(*((unsigned int **)this + 2), a3, 1, (uint64_t)&v63);
    int v66 = &off_270EBF4E8;
    uint64_t v67 = 0;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)&v63, (BlueFin::GlGlnsTime *)&v66);
    int v18 = (*v70 >> 20) & 0x1F;
    int v19 = (*v70 >> 14) & 0x3F;
    unsigned int v20 = v70[7];
    unsigned int v21 = v70[8];
    int v22 = ((int)(*v70 << 18) >> 31) & 0x1E;
    unsigned int v23 = 60 * v19 + 3600 * v18 + v22;
    double v24 = fmod((double)v23, 1.0);
    if (v24 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    int v62 = v22;
    unsigned int v25 = (__PAIR64__(v20, v21) >> 6) >> 21;
    double v26 = v24 * 4294967300.0 + 0.5;
    if (v26 >= 4294967300.0) {
      unsigned int v27 = -1;
    }
    else {
      unsigned int v27 = v26;
    }
    unsigned int v75 = v27;
    unsigned int v76 = v23 + 86400 * v25 - 86400;
    unsigned int v28 = ((uint64_t (*)(void))v66[4])(&v66);
    unsigned int v63 = (void (**)(BlueFin::GlGlnsTime *__hidden))__PAIR64__(v28, v67);
    BlueFin::GlTimePoint::resolveAmbiguity(&v75, (unsigned int *)&v63, 0x7861F80u);
    int v29 = ((uint64_t (*)(void (***)(BlueFin::GlGlnsTime *__hidden), void))v66[3])(&v66, v76);
    unsigned int v64 = v27;
    int v65 = v29;
    unsigned int v63 = &off_270EBF4E8;
    unsigned int v30 = ((uint64_t (*)(void))v66[4])(&v66);
    LODWORD(v31) = v67;
    double v32 = (double)v31 * 2.32830644e-10 + (double)v30;
    unsigned int v33 = ((uint64_t (*)(void))v63[4])(&v63);
    LODWORD(v34) = v64;
    int v35 = (int)(v32 - ((double)v34 * 2.32830644e-10 + (double)v33));
    if (v35 >= 0) {
      unsigned int v36 = (int)(v32 - ((double)v34 * 2.32830644e-10 + (double)v33));
    }
    else {
      unsigned int v36 = -v35;
    }
    if (v36 < 0x79)
    {
      BOOL v43 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && v65 == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      int v44 = ((uint64_t (*)(void))v63[4])(&v63);
      BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 36, (v44 - v43) / 0x7861F80u + 1);
    }
    else
    {
      BOOL v37 = 0;
      if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
        && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
      {
        BOOL v37 = HIDWORD(v67) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      }
      unsigned int v38 = ((uint64_t (*)(void))v66[4])(&v66);
      if (v37) {
        double v40 = 10799.0;
      }
      else {
        double v40 = (double)(v38 % 0x15180);
      }
      unsigned __int8 v61 = v10 + 59;
      LODWORD(v39) = v67;
      double v45 = v40 + (double)v39 * 2.32830644e-10;
      double v46 = fmod(v45, 4294967300.0);
      if (v45 <= 4294967300.0) {
        double v46 = v45;
      }
      if (v46 < -4294967300.0) {
        double v46 = -fmod(-v46, 4294967300.0);
      }
      if (v46 < 0.0) {
        signed int v47 = --v46;
      }
      else {
        signed int v47 = v46;
      }
      unsigned int v48 = 34953 * (unsigned __int16)(v47 / 0x1EuLL);
      unsigned int v49 = (unsigned __int16)((unsigned __int16)(v47 / 0x1EuLL) % 0x78u) >> 1;
      uint64_t v60 = (uint64_t)((v47 / 0x1EuLL) << 63) >> 63;
      unint64_t v50 = (v47 / 0x1EuLL) & 1;
      BOOL v53 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && HIDWORD(v67) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      unsigned int v54 = (((unsigned int (*)(void))v66[4])(&v66) - v53) % 0x7861F80 / 0x15180 + 1;
      unsigned int v55 = (v48 >> 22);
      BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 6, v55);
      BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 7, v49);
      BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 8, v50);
      BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 25, v54);
      BOOL v58 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
         && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
         && HIDWORD(v67) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
      int v59 = ((uint64_t (*)(void))v66[4])(&v66);
      BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 36, (v59 - v58) / 0x7861F80u + 1);
      GlCustomLog(14, "GlnsEph(%d)[%u]: Derived Tk/Nt differs from decoded. Using derived.  Derived(%hu %u:%u:%u)  Decoded(%hu %u:%u:%u)\n", v61, a2, v54, v55, v49, v60 & 0x1E, v25, v18, v19, v62);
    }
    BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 35, 1u);
  }
  else
  {
    BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 35, 0);
    v68[27]((void **)&v68, 2, 0);
  }
  BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 38, 0);
  BlueFin::GlPeGloEphemeris::PutCmpUnsignedField((BlueFin::GlPeGloEphemeris *)&v68, 39, 0);
  return (*(uint64_t (**)(BlueFin::GlPeGloEphMgr *, void **, void))(*(void *)this + 376))(this, (void **)&v68, 0);
}

uint64_t BlueFin::GlPeGloEphMgr::SetEphFcn(BlueFin::GlPeEphemerisMgr *a1, uint64_t a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeEphemerisMgr *))(*(void *)a1 + 368))(a1);
  if ((*(unsigned char *)(result + 8) & 0xF) == 1)
  {
    __int16 v10 = 2593;
    unsigned int v11 = v13;
    int32x2_t v12 = vdup_n_s32(0xFF9222FF);
    long long v6 = *(_OWORD *)(result + 48);
    uint64_t v7 = *(void *)(result + 64);
    uint64_t v8 = *(void *)(result + 72);
    v13[0] = *(_OWORD *)(result + 32);
    v13[1] = v6;
    uint64_t v9 = &unk_270EC0F88;
    uint64_t v14 = v7;
    uint64_t v15 = v8;
    BlueFin::GlPeGloEphemeris::PutCmpSignedField((BlueFin::GlPeGloEphemeris *)&v9, 4, a3);
    return BlueFin::GlPeEphemerisMgr::SetEphFromBuffer(a1, (const BlueFin::GlPeEphemeris *)&v9);
  }
  return result;
}

uint64_t BlueFin::GlPeGloEphMgr::GetEphSrc(uint64_t a1, __n128 a2)
{
  if (*(unsigned char *)(a1 + 7969)) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 16) + 2568);
  a2.n128_f64[0] = (double)(int)v3;
  if (v3 <= 0xFF9222FE) {
    a2.n128_f64[0] = (double)v3;
  }
  return (*(uint64_t (**)(__n128))(*(void *)a1 + 96))(a2);
}

uint64_t BlueFin::GlPeGloEphMgr::GetEphSrc(uint64_t a1, unsigned __int8 *a2, __n128 a3)
{
  if (*(unsigned char *)(a1 + 7969)) {
    return 0;
  }
  else {
    return BlueFin::GlPeEphemerisMgr::GetEphSrc((void *)a1, a2, a3);
  }
}

uint64_t BlueFin::GlPeGloEphMgr::GetEphIode(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  if (*(unsigned char *)(a1 + 7969)) {
    return 0;
  }
  else {
    return BlueFin::GlPeEphemerisMgr::GetEphIode(a1, a2, a3);
  }
}

unsigned __int8 *BlueFin::GlPeGloEphMgr::GetVerifiedSet@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  if (!this[7969]) {
    return BlueFin::GlPeEphemerisMgr::GetVerifiedSet(this, a2);
  }
  *(void *)(a2 + 12) = 0;
  *(void *)a2 = a2 + 12;
  *(unsigned char *)(a2 + 8) = 2;
  return this;
}

uint64_t BlueFin::GlPeGloEphMgr::GetApproximateElevation(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  if (!*(unsigned char *)(result + 7969)) {
    return BlueFin::GlPeEphemerisMgr::GetApproximateElevation((uint64_t *)result, a2, a3, a4);
  }
  return result;
}

BOOL BlueFin::GlPeGloEphMgr::IsVisible(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double a4)
{
  return !*(unsigned char *)(a1 + 7969) && BlueFin::GlPeEphemerisMgr::IsVisible(a1, a2, a3, a4);
}

void BlueFin::GlPeGloEphemeris::~GlPeGloEphemeris(BlueFin::GlPeGloEphemeris *this)
{
}

uint64_t BlueFin::GlPeGloEphemeris::isSimulated(BlueFin::GlPeGloEphemeris *this)
{
  return 0;
}

void BlueFin::GlPeLegacyGloEph::~GlPeLegacyGloEph(BlueFin::GlPeLegacyGloEph *this)
{
}

void BlueFin::GlPeGloEphMgr::~GlPeGloEphMgr(BlueFin::GlPeGloEphMgr *this)
{
  *(void *)this = &unk_270EC10A8;
}

{
  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlPeGloEphMgr::GetLtoAltNavData()
{
  return 0;
}

uint64_t BlueFin::GlPeGloEphMgr::GetHealthBitsMask(BlueFin::GlPeGloEphMgr *this)
{
  return 4;
}

BlueFin::GlPeGloFcnOsnMgr *BlueFin::GlPeGloFcnOsnMgr::SetGlonassDataString(BlueFin::GlPeGloFcnOsnMgr *this, BlueFin::GlGlonassDataString *a2, int a3)
{
  if (a3 == 4)
  {
    char v3 = *((unsigned char *)a2 + 9);
    if ((v3 - 7) <= 0xF1u)
    {
      DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 268, "SetGlonassDataString", (char)"IS_GLONASS_FCN(cFCN)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 268, "IS_GLONASS_FCN(cFCN)");
    }
    if (a3 == 4)
    {
      int v4 = (*((_DWORD *)a2 + 7) >> 21) & 0x1F;
      if ((v4 - 1) <= 0x17)
      {
        unint64_t v5 = this;
        unsigned __int8 v6 = v3 + 7;
        int v7 = *(_DWORD *)(*((void *)this + 2) + 2568);
        uint64_t v8 = (BlueFin::GlPeGloFcnOsnMgr::OsnVerifier *)(*((void *)this + 53) + 28 * (v3 + 7));
        int v9 = BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::ageCache(v8, v7);
        *((_DWORD *)v8 + v9 + 3) = v7;
        *((unsigned char *)v8 + v9 + 24) = v4;
        BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::UpdateCache(v8, v7, 1);
        return (BlueFin::GlPeGloFcnOsnMgr *)BlueFin::GlPeGloFcnOsnMgr::updateFcnToOsnCache(v5, v7, v6);
      }
    }
  }
  return this;
}

_DWORD *BlueFin::GlPeGloFcnOsnMgr::updateFcnToOsnCache(BlueFin::GlPeGloFcnOsnMgr *this, int a2, unsigned int a3)
{
  int v7 = (int *)((char *)this + 20 * a3 + 444);
  uint64_t v8 = *v7;
  if (v8
    && (a2 - *((_DWORD *)this + 5 * a3 + 109)) >= BlueFin::GlPeGloFcnOsnMgr::m_aulMaxFcnToOsnMs[v8])
  {
    *int v7 = 0;
  }
  uint64_t v9 = *((void *)this + 53);
  __int16 v10 = (_DWORD *)(v9 + 28 * a3);
  uint64_t result = BlueFin::GlPeGloFcnOsnMgr::OsnVerifier::UpdateCache(v10, a2, 0);
  int v12 = *v7;
  if (*v7 == 1)
  {
    if (!*(unsigned char *)v10) {
      return result;
    }
    int v13 = *(unsigned __int8 *)(v9 + 28 * a3 + 2);
    if (*((unsigned __int8 *)this + 20 * a3 + 440) == v13) {
      return result;
    }
  }
  else
  {
    int v13 = *(unsigned __int8 *)(v9 + 28 * a3 + 2);
  }
  uint64_t v14 = v9 + 28 * a3;
  *((_DWORD *)this + 5 * a3 + 109) = *(_DWORD *)(v14 + 8);
  if (*(unsigned char *)(v14 + 1))
  {
    uint64_t v15 = (char *)this + 20 * a3;
    v15[440] = v13;
    *int v7 = 1;
    v15[448] = 0;
  }
  else if (v12 && (int v16 = *((unsigned __int8 *)this + 20 * a3 + 440), v16 != v13))
  {
    *((unsigned char *)this + 20 * a3 + 448) = 1;
    GlCustomLog(14, "FCN2OSN: LMS:%u  FCN:%+d  Msg: OSN change detected found on unverified data; require verification.  CandidateOsn:%"
      "d  CurrentOsn:%d  Src:%d\n",
      a2,
      (char)a3 - 7,
      v13,
      v16,
      v12);
  }
  else
  {
    *((unsigned char *)this + 20 * a3 + 440) = v13;
    *int v7 = 2;
  }

  return (_DWORD *)BlueFin::GlPeGloFcnOsnMgr::checkForDuplicateOsns((uint64_t)this, a2, a3);
}

void BlueFin::GlPeGloFcnOsnMgr::SetAsst(uint64_t a1, long long *a2)
{
  uint64_t v3 = 0;
  v29[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 1225;
  long long v5 = *a2;
  *(void *)(a1 + 1241) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 1225) = v5;
  *(unsigned char *)(a1 + 1224) = 1;
  do
  {
    int v6 = *(char *)(v4 + v3);
    uint64_t v7 = v3 + 1;
    if (v6 != -8)
    {
      if ((v6 + 7) > 0xD)
      {
        GlCustomLog(12, "GlPeGloFcnOsnMgr::SetAsst: Invalid FCN received in GLONASS Auxiliary Message (%d) for OSN %d", *(char *)(v4 + v3), v3 + 1);
        *(unsigned char *)(v4 + v3) = -8;
      }
      else
      {
        uint64_t v8 = *(BlueFin::GlPeEphemerisMgr **)(a1 + 8);
        LOBYTE(v29[0]) = v3 + 1;
        BlueFin::GlPeGloEphMgr::SetEphFcn(v8, (uint64_t)v29, v6);
      }
    }
    ++v3;
  }
  while (v7 != 24);
  for (uint64_t i = 0; i != 280; i += 20)
    *(_DWORD *)(a1 + 432 + i) = -7200001;
  for (uint64_t j = 0; j != 384; j += 16)
    *(_DWORD *)(a1 + 716 + j) = -7200001;
  v29[0] = &unk_270EC12D0;
  memset(&v29[1], 0, 36);
  unsigned int v11 = *(BlueFin::GlPeTimeManager **)(a1 + 16);
  int v12 = *((_DWORD *)v11 + 644);
  LOBYTE(v29[1]) = v12 != 0;
  if (v12)
  {
    BlueFin::GlPeTimeManager::GetTime(v11, 1, v26);
    unsigned int v27 = &off_270EBF4E8;
    uint64_t v28 = 0;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v26, (BlueFin::GlGlnsTime *)&v27);
    int v15 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && HIDWORD(v28) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    BYTE1(v29[1]) = (((unsigned int (*)(void))v27[4])(&v27) + (v15 << 31 >> 31)) / 0x7861F80 + 1;
    int v18 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
       && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
       && HIDWORD(v28) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    BOOL v19 = 0;
    WORD1(v29[1]) = (((unsigned int (*)(void))v27[4])(&v27) + (v18 << 31 >> 31)) % 0x7861F80 / 0x15180 + 1;
    if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
      && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
    {
      BOOL v19 = HIDWORD(v28) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
    }
    unsigned int v20 = ((uint64_t (*)(void))v27[4])(&v27);
    if (v19) {
      double v22 = 10799.0;
    }
    else {
      double v22 = (double)(v20 % 0x15180);
    }
    LODWORD(v21) = v28;
    double v23 = v22 + (double)v21 * 2.32830644e-10;
    double v24 = fmod(v23, 4294967300.0);
    if (v23 <= 4294967300.0) {
      double v24 = v23;
    }
    if (v24 < -4294967300.0) {
      double v24 = -fmod(-v24, 4294967300.0);
    }
    if (v24 < 0.0) {
      unsigned int v25 = --v24;
    }
    else {
      unsigned int v25 = v24;
    }
    HIDWORD(v29[1]) = v25;
  }
  LODWORD(v29[2]) = 2;
  *(_OWORD *)((char *)&v29[2] + 4) = *(_OWORD *)v4;
  *(void *)((char *)&v29[4] + 4) = *(void *)(v4 + 16);
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      (*(void (**)(void *, void, void))(v29[0] + 24))(v29, 0, 0);
    }
  }
}

uint64_t BlueFin::GlPeGloAuxMsgData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 1221, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 1221, "ucVersion >= 1 && ucVersion <= 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v11 = 99;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  __int16 v10 = &unk_270EBA2F0;
  char v14 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v2 + 8));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 9));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 10));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 12));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 16));
  uint64_t v7 = 0;
  uint64_t v8 = v6 + 20;
  do
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v8 + v7++));
  while (v7 != 24);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeGloAuxMsgData::Deserialize(BlueFin::GlPeGloAuxMsgData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 99 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((unsigned char *)this + 8) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    *((unsigned char *)this + 9) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
    uint64_t v6 = 0;
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
    uint64_t v7 = (char *)this + 20;
    do
      v7[v6++] = BlueFin::GlSysLogEntry::GetS8(a2);
    while (v6 != 24);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 1259);
  }
  return v3;
}

uint64_t BlueFin::GlPeGloFcnOsnMgr::GetHardcodedFcn(BlueFin::GlPeGloFcnOsnMgr *this)
{
  if ((this - 25) <= 0xFFFFFFE7)
  {
    DeviceFaultNotify("glpe_glofcnosnmgr.cpp", 1266, "GetHardcodedFcn", (char)"IS_GLONASS_OSN(ucOSN)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glofcnosnmgr.cpp", 1266, "IS_GLONASS_OSN(ucOSN)");
  }
  return (char)BlueFin::GlPeGloFcnOsnMgr::m_acSimulationOsn2Fcn[this - 1];
}

void BlueFin::GlPeGloAuxMsgData::~GlPeGloAuxMsgData(BlueFin::GlPeGloAuxMsgData *this)
{
}

uint64_t BlueFin::GlPeGnssHwBiasData::Deserialize(BlueFin::GlPeGnssHwBiasData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 39 || *((unsigned __int8 *)a2 + 12) - 4 < 0xFFFFFFFD) {
    return 0;
  }
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 12) = 0u;
  if (*((unsigned char *)a2 + 12) == 1)
  {
    int S8 = BlueFin::GlSysLogEntry::GetS8(a2);
    BlueFin::GlSysLogEntry::GetU32(a2);
    float D64 = BlueFin::GlSysLogEntry::GetD64(a2);
    *((float *)this + S8 + 25) = D64;
    BlueFin::GlSysLogEntry::GetD64(a2);
    goto LABEL_16;
  }
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
  if (*((unsigned __int8 *)a2 + 12) < 3u)
  {
    uint64_t v8 = 9;
LABEL_10:
    for (unint64_t i = 0; i != v8; ++i)
    {
      float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
      if (i <= 0xE) {
        *((float *)this + i + 3) = F32;
      }
    }
    goto LABEL_14;
  }
  unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  if (U8)
  {
    uint64_t v8 = U8;
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v11 = 0;
  char v12 = (char *)this + 72;
  do
  {
    *(float *)&v12[v11] = BlueFin::GlSysLogEntry::GetF32(a2);
    v11 += 4;
  }
  while (v11 != 56);
LABEL_16:
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glpe_gnsshwbiasmgr.cpp", 80, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_gnsshwbiasmgr.cpp", 80, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlPeGnssHwBiasData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= 4)
  {
    DeviceFaultNotify("glpe_gnsshwbiasmgr.cpp", 91, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_gnsshwbiasmgr.cpp", 91, "ucVersion >= 1 && ucVersion <= 3");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    if (v5 == 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v2 + 72;
      do
      {
        int v15 = 39;
        unsigned __int8 v16 = 1;
        uint64_t v17 = 0x1000000000000;
        char v14 = &unk_270EBA2F0;
        char v18 = 1;
        BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v14, v8 - 7);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v14, 0);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, *(float *)(v9 + 4 * v8));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v14, 0.0);
        BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v6, 4);
        ++v8;
      }
      while (v8 != 14);
    }
    else
    {
      int v15 = 39;
      unsigned __int8 v16 = v5;
      uint64_t v17 = 0x1000000000000;
      char v14 = &unk_270EBA2F0;
      char v18 = v5;
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, *(unsigned char *)(v2 + 8));
      if (v16 < 3u)
      {
        uint64_t v10 = 9;
      }
      else
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v14, 15);
        uint64_t v10 = 15;
      }
      uint64_t v11 = (float *)(v7 + 12);
      do
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *v11++);
        --v10;
      }
      while (v10);
      uint64_t v12 = v7 + 72;
      do
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v14, *(float *)(v12 + v10));
        v10 += 4;
      }
      while (v10 != 56);
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v14, v6, 4);
    }
  }
  return 1;
}

float BlueFin::GlPeGnssHwBiasMgr::GetForceIChannelIscHwBiasM(BlueFin::GlPeGnssHwBiasMgr *this, const BlueFin::GlSignalId *a2)
{
  uint64_t v4 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)a2];
  uint64_t v5 = *((int *)a2 + 1);
  int v6 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v5 - v5 + v4];
  float v19 = 0.0;
  if (!v4)
  {
LABEL_4:
    uint64_t v7 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)this + 20) + 119744);
    int v17 = 7;
    v18[0] = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(v7, (unsigned __int8 *)a2, (uint64_t)&v17);
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)this + 20) + 384), v4);
    uint64_t v9 = Mgr;
    if (v5 == 3 && Mgr)
    {
      (*(void (**)(void *, unsigned char *, uint64_t, float *))(*Mgr + 48))(Mgr, v18, 2, &v19);
      return v19;
    }
    if (v6 == 2)
    {
      float HardcodedIsc = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc((BlueFin::GlPeTimeManager **)this, a2, 1);
      float v19 = HardcodedIsc;
      float v16 = 0.0;
      if (v9)
      {
        if ((*(unsigned int (**)(void *, unsigned char *, uint64_t, float *))(*v9 + 48))(v9, v18, 4, &v16)) {
          return v16;
        }
      }
    }
    return v19;
  }
  if (v4 != 4)
  {
    if (v4 != 3) {
      return v19;
    }
    goto LABEL_4;
  }
  uint64_t v10 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)this + 20) + 119744);
  int v17 = 7;
  v18[0] = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v10, (unsigned __int8 *)a2, (uint64_t)&v17);
  uint64_t v11 = *(void *)(*((void *)this + 20) + 7384);
  if (v5 == 2)
  {
    float v16 = 0.0;
    float v12 = BlueFin::GlPeGnssHwBiasMgr::GetHardcodedIsc((BlueFin::GlPeTimeManager **)this, a2, 1);
    float v19 = -v12;
    if (v11
      && (*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, float *))(*(void *)v11 + 48))(v11, v18, 8, &v16))
    {
      return -v16;
    }
  }
  else if (v5 == 3 && v11)
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t, float *))(*(void *)v11 + 48))(v11, v18, 6, &v19);
  }
  return v19;
}

void BlueFin::GlPeGnssHwBiasMgr::~GlPeGnssHwBiasMgr(BlueFin::GlPeGnssHwBiasMgr *this)
{
}

uint64_t BlueFin::GlComStressImpl::GlComStressImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270EC1378;
  *(unsigned char *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_263BB5180;
  *(void *)(a1 + 28) = 0x10000000004;
  *(_DWORD *)(a1 + 1316) = 0;
  *(_WORD *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2354) = 0;
  *(_DWORD *)(a1 + 2356) = 0;
  *(void *)(a1 + 2360) = a1;
  *(void *)(a1 + 2368) = a2;
  *(void *)(a1 + 2376) = 0;
  *(unsigned char *)(a1 + 2384) = 0;
  *(_OWORD *)(a1 + 2388) = xmmword_263BB5190;
  *(_WORD *)(a1 + 3517) = 0;
  *(void *)(a1 + 3492) = 0;
  *(_OWORD *)(a1 + 3500) = 0u;
  *(_OWORD *)(a1 + 3520) = 0u;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3552) = 0u;
  *(_OWORD *)(a1 + 3564) = 0u;
  *(_OWORD *)(a1 + 3628) = 0u;
  BlueFin::GlComStressImpl::Reset((BlueFin::GlComStressImpl *)a1);
  return a1;
}

void BlueFin::GlComStressImpl::Reset(BlueFin::GlComStressImpl *this)
{
  *((unsigned char *)this + 2384) = 1;
  *((_DWORD *)this + 597) = 16;
  *((_DWORD *)this + 599) = 0;
  *((void *)this + 297) = 0x100000001;
  *((unsigned char *)this + 2354) = 0;
  *(_DWORD *)((char *)this + 3514) = -16711936;
  *(_OWORD *)((char *)this + 3524) = 0u;
  *(_OWORD *)((char *)this + 3540) = 0u;
  *(_OWORD *)((char *)this + 3556) = 0u;
  *(_OWORD *)((char *)this + 3572) = 0u;
  *(_OWORD *)((char *)this + 3588) = 0u;
  *(_OWORD *)((char *)this + 3604) = 0u;
  *(void *)((char *)this + 3620) = 0;
  *((_DWORD *)this + 329) = 0;
  *((void *)this + 165) = 0x80000000000;
  bzero((char *)this + 1328, 0x402uLL);
  uint64_t v2 = 0;
  int8x16_t v3 = (int8x16_t)xmmword_263BACB20;
  v4.i64[0] = 0x1010101010101010;
  v4.i64[1] = 0x1010101010101010;
  do
  {
    *(int8x16_t *)((char *)this + v2 + 36) = v3;
    v2 += 16;
    int8x16_t v3 = vaddq_s8(v3, v4);
  }
  while (v2 != 1024);
  uint64_t v5 = 0;
  int8x16_t v6 = (int8x16_t)xmmword_263BACB20;
  v7.i64[0] = 0x1010101010101010;
  v7.i64[1] = 0x1010101010101010;
  do
  {
    *(int8x16_t *)((char *)this + v5 + 1060) = v6;
    v5 += 16;
    int8x16_t v6 = vaddq_s8(v6, v7);
  }
  while (v5 != 256);
  *((_DWORD *)this + 589) = 0;
}

void BlueFin::GlComStressImpl::~GlComStressImpl(BlueFin::GlComStressImpl *this)
{
  *(void *)this = &unk_270EC1378;
  if (*((_DWORD *)this + 910))
  {
    DeviceFaultNotify("gl_comstress_impl.cpp", 98, "~GlComStressImpl", (char)"m_eState == CS_IDLE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", 98, "m_eState == CS_IDLE");
  }
}

{
  uint64_t vars8;

  BlueFin::GlComStressImpl::~GlComStressImpl(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlComStressImpl::StartTest(BlueFin::GlComStressImpl *this, int a2, int a3, int a4)
{
  unsigned __int8 v10[2] = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 910))
  {
    GlCustomLog(11, "CS: ERROR, test is already running!\n");
    return 0;
  }
  BlueFin::GlComStressImpl::Reset(this);
  if ((a2 - 129) <= 0xFFFFFF7F)
  {
    GlCustomLog(11, "CS:ERROR Load Max in KB out of bound : %u (should be >0 && <= 128)\n");
    return 0;
  }
  if (!a3)
  {
    GlCustomLog(11, "CS: ERROR Startup Loop Iteration Count cannot be 0\n");
    return 0;
  }
  *((_DWORD *)this + 595) = a3;
  *((_DWORD *)this + 597) = a2;
  *((_DWORD *)this + 598) = a4;
  GlCustomLog(14, "CS: StartTest(ulLoadMaxKb=%u, ulLoopIterationStartup=%u. m_ulFlags=0x%08x)\n", a2, a3, a4);
  v10[0] = 0x8080808080808080;
  v10[1] = 0x8080808080808080;
  (*(void (**)(void, void *, uint64_t))(**((void **)this + 296) + 32))(*((void *)this + 296), v10, 16);
  uint64_t v8 = 1;
  *((unsigned char *)this + 8) = 1;
  *((_DWORD *)this + 3) = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296))
                        + 200;
  (*(void (**)(void, uint64_t))(**((void **)this + 296) + 16))(*((void *)this + 296), 200);
  return v8;
}

uint64_t BlueFin::GlComStressImpl::SetTimerMs(BlueFin::GlComStressImpl *this, int a2)
{
  if (a2 < 0)
  {
    *((unsigned char *)this + 8) = 0;
  }
  else
  {
    *((unsigned char *)this + 8) = 1;
    *((_DWORD *)this + 3) = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296))
                          + a2;
  }
  int8x16_t v3 = *(uint64_t (**)(void))(**((void **)this + 296) + 16);

  return v3();
}

uint64_t BlueFin::GlComStressImpl::StopTest(BlueFin::GlComStressImpl *this)
{
  if (*((_DWORD *)this + 910))
  {
    *((unsigned char *)this + 8) = 0;
    (*(void (**)(void, uint64_t))(**((void **)this + 296) + 16))(*((void *)this + 296), 0xFFFFFFFFLL);
    GlCustomLog(14, "CS:Stop requested\n");
    uint64_t result = BlueFin::GlComStressImpl::PrintTransportLayerStatsTotal(this);
    if ((*((_DWORD *)this + 910) & 0xFFFFFFF8) == 8)
    {
      *((unsigned char *)this + 3580) = 0;
      uint64_t result = (*(uint64_t (**)(void, char *))(**((void **)this + 296) + 56))(*((void *)this + 296), (char *)this + 3580);
    }
    *((_DWORD *)this + 910) = 0;
  }
  else
  {
    return GlCustomLog(11, "CS:ERROR, test is not running!\n");
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::PrintTransportLayerStatsTotal(BlueFin::GlComStressImpl *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
  int v3 = *((_DWORD *)this + 908);
  if (v3) {
    int v4 = v2 - v3;
  }
  else {
    int v4 = 0;
  }
  unsigned int v5 = v4 + *((_DWORD *)this + 909);
  *((_DWORD *)this + 909) = v5;
  double v6 = (double)v5 / 1000.0;
  unsigned int v7 = *((_DWORD *)this + 886);
  unsigned int v8 = *((_DWORD *)this + 885);
  int v9 = v7 / v5;
  BOOL v10 = v5 == 0;
  int v11 = v8 / v5;
  if (v10) {
    int v11 = 0;
  }
  uint64_t result = GlCustomLog(14, "# CS: Total/Active : %.1f/%.1f sec elapsed, %u/%u Tx/Rx bytes, %u/%u Tx/Rx Pkts, %u/%u Tx/Rx kB/s(Active)\n", (double)(v2 - *((_DWORD *)this + 907)) / 1000.0, v6, v7, v8, *((_DWORD *)this + 883), *((_DWORD *)this + 884), v9, v11);
  int v13 = *((_DWORD *)this + 882);
  int v14 = *((_DWORD *)this + 887);
  if (!*(void *)((char *)this + 3524))
  {
    if (!v14) {
      return result;
    }
    int v13 = 0;
  }
  return GlCustomLog(11, "# CS: ERROR: RxPacketLost=%u RxGarbageBytes=%u TxPacketBroken=%u \n", v13, *((_DWORD *)this + 881), v14);
}

uint64_t BlueFin::GlComStressImpl::IsTimerSet(BlueFin::GlComStressImpl *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL BlueFin::GlComStressImpl::IsTimerExpired(BlueFin::GlComStressImpl *this)
{
  return *((unsigned char *)this + 8)
      && (int)(*((_DWORD *)this + 3)
             - (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296))) < 1;
}

void BlueFin::GlComStressImpl::ProcessBriPacket(BlueFin::GlComStressImpl *this, unsigned __int8 *a2, int a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v3 = a3;
    if (a3 >= 1)
    {
      int v4 = a2;
      double v6 = (void *)((char *)this + 3500);
      unsigned int v7 = (char *)this + 2404;
      while (1)
      {
        int v9 = *v4++;
        int v8 = v9;
        ++*((_DWORD *)this + 885);
        int v10 = *((_DWORD *)this + 880) + 1;
        *((_DWORD *)this + 880) = v10;
        switch(*((_DWORD *)this + 875))
        {
          case 0:
            if (v8 == 254)
            {
              *double v6 = 1;
              bzero(v7, 0x444uLL);
              *((_DWORD *)this + 880) = 1;
            }
            else
            {
              ++*((_DWORD *)this + 881);
            }
            goto LABEL_119;
          case 1:
            *((unsigned char *)this + 3512) = v8;
            *((_DWORD *)this + 877) = 4 * v8 + 4;
            *((_DWORD *)this + 875) = 2;
            goto LABEL_119;
          case 2:
            if (v8 != 253) {
              goto LABEL_36;
            }
            int v11 = 3;
            goto LABEL_35;
          case 3:
            *((unsigned char *)this + 3513) = v8;
            *((_DWORD *)this + 875) = 4;
            *((unsigned char *)this + 3518) = 1;
            int v12 = v8 & 0xF;
            if ((v12 - 9) < 2) {
              goto LABEL_119;
            }
            if (v12 == 14) {
              goto LABEL_14;
            }
            if (v12 == 15)
            {
              if ((v8 & 0xF0) != 0x10) {
LABEL_14:
              }
                *((unsigned char *)this + 3518) = 0;
            }
            else
            {
LABEL_36:
              *((_DWORD *)this + 875) = 0;
              *((_DWORD *)this + 881) += v10;
              *((_DWORD *)this + 880) = 0;
            }
            goto LABEL_119;
          case 4:
            *((_DWORD *)this + 876) = v8;
            *((_DWORD *)this + 875) = 5;
            goto LABEL_119;
          case 5:
            *((_DWORD *)this + 876) += v8 << 8;
            *((_DWORD *)this + 875) = 6;
            goto LABEL_119;
          case 6:
            *((_DWORD *)this + 876) += v8 << 16;
            int v13 = 7;
            goto LABEL_21;
          case 7:
            *((_DWORD *)this + 876) += v8 << 24;
            if (*((unsigned char *)this + 3518)) {
              int v13 = 9;
            }
            else {
              int v13 = 8;
            }
LABEL_21:
            *((_DWORD *)this + 875) = v13;
            goto LABEL_119;
          case 8:
            if (v8 != 252) {
              goto LABEL_117;
            }
            break;
          case 9:
            if (!*((_DWORD *)this + 877)) {
              goto LABEL_34;
            }
            uint64_t v21 = *((unsigned int *)this + 873);
            *((_DWORD *)this + 873) = v21 + 1;
            *((unsigned char *)this + v21 + 2404) = v8;
            int v22 = *((_DWORD *)this + 877) - 1;
            *((_DWORD *)this + 877) = v22;
            if (*((_DWORD *)this + 873) >= 0x441u)
            {
              double v46 = "m_uiRxOffset <= MEM_READ_BUF_SIZE";
              DeviceFaultNotify("gl_comstress_impl.cpp", 1227, "ProcessBriPacket", (char)"m_uiRxOffset <= MEM_READ_BUF_SIZE");
              int v47 = 1227;
              goto LABEL_145;
            }
            if (!v22)
            {
LABEL_34:
              int v11 = 8;
LABEL_35:
              *(_DWORD *)double v6 = v11;
            }
            goto LABEL_119;
          default:
            double v46 = "0";
            DeviceFaultNotify("gl_comstress_impl.cpp", 1253, "ProcessBriPacket", (char)"0");
            int v47 = 1253;
            goto LABEL_145;
        }
        int v14 = *((unsigned __int8 *)this + 3513);
        int v15 = (BlueFin::GlComStressImpl *)*((unsigned int *)this + 876);
        uint64_t v16 = *((unsigned __int16 *)this + 1746);
        switch(*((_DWORD *)this + 910))
        {
          case 1:
            if (*((unsigned char *)this + 3512) || v14 != 31 || v16 != 4) {
              goto LABEL_116;
            }
            GlCustomLog(14, "CS:Recevied Bri Ext Flowcontrol response mode = 0x%02X, hostif signalling = 0x%02X\n", *((_DWORD *)this + 876), *((unsigned __int8 *)this + 2404));
            *((_DWORD *)this + 910) = 2;
            GlCustomLog(14, "CS: Sending Version Request\n");
            unint64_t v50 = 0xC000000009FD00FFLL;
            char v51 = -4;
            (*(void (**)(void, unint64_t *, uint64_t))(**((void **)this + 296) + 32))(*((void *)this + 296), &v50, 9);
            *((_DWORD *)this + 886) += 9;
            ++*((_DWORD *)this + 883);
            goto LABEL_71;
          case 2:
            if (v15 != -1073741824 || *((unsigned char *)this + 3512) || (v14 & 0xF) != 9 || v16 != 4) {
              goto LABEL_116;
            }
            int v29 = *((_DWORD *)this + 601);
            *((_DWORD *)this + 589) = v29;
            GlCustomLog(14, "CS:Version received 0x%08X\n", v29);
            if (*((_DWORD *)this + 589) != 805306389 || (*((unsigned char *)this + 2392) & 1) == 0) {
              goto LABEL_70;
            }
            *((_DWORD *)this + 910) = 3;
            BlueFin::GlComStressImpl::BriClockConfig(this);
            goto LABEL_71;
          case 3:
            if (*((unsigned char *)this + 3512)) {
              goto LABEL_116;
            }
            if ((v14 & 0xF) != 0xE || v16 != 0) {
              goto LABEL_116;
            }
            GlCustomLog(14, "CS:Clock Config 0x%08X\n", *((_DWORD *)this + 876));
            if (v15 != 335545088 || *((_DWORD *)this + 589) != 805306389)
            {
              GlCustomLog(14, "CS: ERROR: Wrong response of Clock Config\n");
              goto LABEL_116;
            }
LABEL_70:
            *((_DWORD *)this + 910) = 4;
            BlueFin::GlComStressImpl::BriSetupTest(this);
LABEL_71:
            BlueFin::GlComStressImpl::SetTimerMs(this, *(_DWORD *)(*((void *)this + 295) + 20));
            goto LABEL_115;
          case 4:
            if ((v14 & 0xF) != 9)
            {
              char v24 = 0;
              goto LABEL_110;
            }
            GlCustomLog(15, "CS: HandleBriMemReadForSetup : addr:0x%08X(%d) ExptMemReadResp=%d\n", v15, v16, *((_DWORD *)this + 329));
            if ((v16 & 0xFFFC) == 0)
            {
              double v46 = "usSize >= 4";
              DeviceFaultNotify("gl_comstress_impl.cpp", 438, "HandleBriMemReadForSetup", (char)"usSize >= 4");
              int v47 = 438;
LABEL_145:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", v47, v46);
            }
            if (v15 <= 0x100CE87F || (v15 & 3) != 0)
            {
              GlCustomLog(11, "CS: ERROR : HandleBriMemReadForSetup : The Mem Read Response packet is broken\n");
            }
            else
            {
              uint64_t v31 = 0;
              int v48 = v15 - 269281408;
              --*((_DWORD *)this + 329);
              __int16 v32 = (_WORD)v15 + 6016;
              char v33 = 1;
              do
              {
                while (1)
                {
                  int v34 = *((unsigned __int8 *)this + ((v32 + (unsigned __int16)v31) & 0x3FF) + 36);
                  if (v7[v31] == v34) {
                    break;
                  }
                  GlCustomLog(11, "CS: ERROR : HandleBriMemReadForSetup : i(%d) = %d Received 0x%02X != Expected 0x%02X\n", v48, v31, v7[v31], v34);
                  char v33 = 0;
                  BOOL v23 = v16 - 1 == v31++;
                  if (v23) {
                    goto LABEL_109;
                  }
                }
                ++v31;
              }
              while (v16 != v31);
              if (v33)
              {
                char v24 = 1;
                goto LABEL_110;
              }
            }
LABEL_109:
            (*(void (**)(void))(**((void **)this + 296) + 48))(*((void *)this + 296));
            char v24 = 0;
LABEL_110:
            if (*((_DWORD *)this + 329) || *((_DWORD *)this + 330)) {
              goto LABEL_114;
            }
            *((_DWORD *)this + 910) = 5;
LABEL_113:
            BlueFin::GlComStressImpl::UpdateStressState(this);
            goto LABEL_114;
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
            int v17 = v14 & 0xF;
            if (v17 == 9)
            {
              GlCustomLog(15, "CS: HandleBriMemRead:     addr:0x%08X(%d) ExptMemReadResp=%d\n", v15, v16, *((_DWORD *)this + 329));
              if ((v16 & 0xFFFC) == 0)
              {
                double v46 = "usSize >= 4";
                DeviceFaultNotify("gl_comstress_impl.cpp", 383, "HandleBriMemRead", (char)"usSize >= 4");
                int v47 = 383;
                goto LABEL_145;
              }
              if ((v15 - 269281408) > 0x3FC || (v15 & 3) != 0)
              {
                GlCustomLog(11, "CS: ERROR : HandleBriMemRead : The Mem Read Response packet is broken\n");
                char v24 = 0;
              }
              else
              {
                int v18 = *((unsigned __int8 *)this + 3517) + 1;
                int v19 = v18 + *((_DWORD *)this + 329);
                unsigned int RxSeqIdFromMemAddr = BlueFin::GlComStressImpl::GetRxSeqIdFromMemAddr(v15);
                if (v18 <= v19)
                {
                  if (v18 <= RxSeqIdFromMemAddr) {
                    goto LABEL_84;
                  }
                  goto LABEL_85;
                }
                if (v18 <= RxSeqIdFromMemAddr) {
                  goto LABEL_86;
                }
LABEL_84:
                if (v19 > RxSeqIdFromMemAddr)
                {
LABEL_86:
                  unsigned int v49 = v6;
                  uint64_t v35 = 0;
                  *((_DWORD *)this + 329) += ~(BlueFin::GlComStressImpl::GetRxSeqIdFromMemAddr(v15)
                                             + ~*((unsigned char *)this + 3517)) | 0xFFFFFF00;
                  if (v16 <= 1) {
                    uint64_t v16 = 1;
                  }
                  else {
                    uint64_t v16 = v16;
                  }
                  char v36 = 1;
                  do
                  {
                    int v37 = *((unsigned __int8 *)this
                          + (((unsigned __int16)v15 + 6016 + (unsigned __int16)v35) & 0x3FF)
                          + 36);
                    if (v7[v35] != v37)
                    {
                      GlCustomLog(11, "CS: ERROR : HandleBriMemRead : i(%d) = %d Received 0x%02X != Expected 0x%02X\n", v15 - 269281408, v35, v7[v35], v37);
                      char v36 = 0;
                    }
                    ++v35;
                  }
                  while (v16 != v35);
                  *((unsigned char *)this + 3517) = BlueFin::GlComStressImpl::GetRxSeqIdFromMemAddr(v15);
                  if (v36)
                  {
                    char v24 = 1;
                    double v6 = v49;
                    goto LABEL_96;
                  }
                  char v24 = 0;
                  double v6 = v49;
                }
                else
                {
LABEL_85:
                  GlCustomLog(11, "CS: ERROR : HandleBriMemRead : Skip unexpected packet : addr=0x%08X\n", v15);
                  char v24 = 1;
                }
              }
              (*(void (**)(void))(**((void **)this + 296) + 48))(*((void *)this + 296));
              goto LABEL_96;
            }
            BOOL v23 = v17 == 10 && v16 == 4;
            if (v23)
            {
              int v25 = *((_DWORD *)this + 601);
              GlCustomLog(15, "CS: HandleCRCResponse : addr:0x%08X(000) CrcChecksum=0x%08X ExptCrcResp=%u\n", v15, v25, *((_DWORD *)this + 330));
              int v26 = *((_DWORD *)this + 330);
              if (!v26)
              {
                double v46 = "m_ulExpectedCrcResponse > 0";
                DeviceFaultNotify("gl_comstress_impl.cpp", 474, "HandleCrcResponse", (char)"m_ulExpectedCrcResponse > 0");
                int v47 = 474;
                goto LABEL_145;
              }
              unsigned int v27 = (BlueFin::GlComStressImpl *)*((unsigned int *)this + 331);
              if ((int)v27 + 269281408 > v15
                || (int)v27 + 269282428 < v15
                || (((_BYTE)v15 - (_BYTE)v27) & 3) != 0)
              {
                GlCustomLog(11, "CS: ERROR : HandleCRCResponse : The CRC Response packet is broken\n");
                unsigned int v28 = 0;
                goto LABEL_48;
              }
              unsigned int v38 = *((unsigned __int8 *)this + 2352);
              unsigned __int8 v39 = *((unsigned char *)this + 3515) + 1;
              unsigned __int8 v40 = v39 + v26;
              unsigned int TxSeqIdFromMemAddr = BlueFin::GlComStressImpl::GetTxSeqIdFromMemAddr(v27, v15);
              if (v39 <= v40)
              {
                if (v39 <= TxSeqIdFromMemAddr) {
                  goto LABEL_123;
                }
              }
              else
              {
                if (v39 <= TxSeqIdFromMemAddr)
                {
LABEL_125:
                  if (!*((_DWORD *)this + 330))
                  {
                    unsigned int v43 = 0;
                    goto LABEL_132;
                  }
                  unsigned int v43 = 0;
                  while (BlueFin::GlComStressImpl::GetTxSeqIdFromMemAddr((BlueFin::GlComStressImpl *)*((unsigned int *)this + 331), v15) != (*((unsigned char *)this + 3515) + 1 + v43))
                  {
                    unsigned int v38 = ((_WORD)v38 + 1) & 0x3FF;
                    if (++v43 >= *((_DWORD *)this + 330)) {
                      goto LABEL_132;
                    }
                  }
                  if (*((_DWORD *)this + v38 + 332) == v25)
                  {
LABEL_132:
                    int v44 = 0;
                  }
                  else
                  {
                    GlCustomLog(11, "CS: ERROR : CRC is not matched. addr=0x%08X Expected=0x%08X Received=0x%08X\n", v15, 4 * (*((unsigned char *)this + 3515) + 1) + *((_DWORD *)this + 331) + 269281408, v25);
                    (*(void (**)(void))(**((void **)this + 296) + 48))(*((void *)this + 296));
                    int v44 = 1;
                  }
                  unsigned int v45 = *((_DWORD *)this + 330);
                  if (v43 < v45)
                  {
                    *((unsigned char *)this + 2352) = v38 + 1;
                    *((_DWORD *)this + 330) = v45 - (v43 + 1);
                    *((unsigned char *)this + 3515) = BlueFin::GlComStressImpl::GetTxSeqIdFromMemAddr((BlueFin::GlComStressImpl *)*((unsigned int *)this + 331), v15);
                    if (v44) {
                      unsigned int v28 = v43 + 1;
                    }
                    else {
                      unsigned int v28 = v43;
                    }
                    if (v28)
                    {
                      GlCustomLog(11, "CS: ERROR : HandleCRCResponse: Sequence jump or CRC error are found. Received(0x%08X), CRC(%s)\n", v15, "not matched");
                      goto LABEL_48;
                    }
                    goto LABEL_49;
                  }
                  GlCustomLog(11, "CS: ERROR : HandleCRCResponse: Not TxSeqId found in the Queue. Expected=0x%08X Received=0x%08X\n");
LABEL_140:
                  unsigned int v28 = 0;
LABEL_48:
                  (*(void (**)(void))(**((void **)this + 296) + 48))(*((void *)this + 296));
LABEL_49:
                  *((_DWORD *)this + 887) += v28;
                  char v24 = 1;
                  goto LABEL_96;
                }
LABEL_123:
                if (v40 > TxSeqIdFromMemAddr) {
                  goto LABEL_125;
                }
              }
              GlCustomLog(11, "CS: ERROR : HandleCRCResponse: Received unexpected packet. addr=0x%08X\n");
              goto LABEL_140;
            }
            char v24 = 0;
LABEL_96:
            if (*((_DWORD *)this + 329) || *((_DWORD *)this + 330)) {
              goto LABEL_114;
            }
            --*((_DWORD *)this + 594);
            *((unsigned char *)this + 8) = 0;
            (*(void (**)(void, uint64_t))(**((void **)this + 296) + 16))(*((void *)this + 296), 0xFFFFFFFFLL);
            if (*((_DWORD *)this + 910) != 12) {
              goto LABEL_113;
            }
            BlueFin::GlComStressImpl::SetTimerMs(this, *(_DWORD *)(*((void *)this + 295) + 24));
LABEL_114:
            if (v24)
            {
LABEL_115:
              ++*((_DWORD *)this + 884);
            }
            else
            {
LABEL_116:
              int v10 = *((_DWORD *)this + 880);
LABEL_117:
              *((_DWORD *)this + 881) += v10;
              *((_DWORD *)this + 880) = 0;
            }
            *(_DWORD *)double v6 = 0;
            bzero(v7, 0x444uLL);
LABEL_119:
            ++*((_DWORD *)this + 874);
            BOOL v42 = __OFSUB__(v3--, 1);
            if ((v3 < 0) ^ v42 | (v3 == 0)) {
              return;
            }
            break;
          default:
            goto LABEL_116;
        }
      }
    }
  }
}

uint64_t BlueFin::GlComStressImpl::Tick(BlueFin::GlComStressImpl *this)
{
  void v9[2] = *MEMORY[0x263EF8340];
  if ((*(uint64_t (**)(BlueFin::GlComStressImpl *))(*(void *)this + 48))(this))
  {
    if ((*(uint64_t (**)(BlueFin::GlComStressImpl *))(*(void *)this + 56))(this))
    {
      if (*((unsigned char *)this + 2354))
      {
        int v2 = *((_DWORD *)this + 910);
        if ((v2 - 1) <= 3)
        {
          DeviceFaultNotify("gl_comstress_impl.cpp", 358, "Tick", (char)"false");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", 358, "false");
        }
        BOOL v3 = (v2 & 0xFFFFFFF8) == 8 && *((unsigned char *)this + 2384) == 0;
        if (v3 && (v2 != 12 || *((_DWORD *)this + 329) || *((_DWORD *)this + 330)))
        {
          ++*((_DWORD *)this + 599);
          GlCustomLog(11, "#### CS: ERROR #### timeout waiting for response!\n");
          *(void *)((char *)this + 1316) = 0;
          *((_WORD *)this + 1176) = 0;
          *((unsigned char *)this + 3517) = *((unsigned char *)this + 3516) - 1;
          *((unsigned char *)this + 3515) = *((unsigned char *)this + 3514) - 1;
          (*(void (**)(void))(**((void **)this + 296) + 48))(*((void *)this + 296));
        }
        return BlueFin::GlComStressImpl::UpdateStressState(this);
      }
      *((unsigned char *)this + 2354) = 1;
      *((_DWORD *)this + 907) = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
      *(void *)((char *)this + 3636) = 0x100000000;
      GlCustomLog(14, "CS: Sending FlowControl\n");
      v9[0] = 0x100E33011FFD00FFLL;
      *(void *)((char *)v9 + 5) = 0xFC00008911100E33;
      (*(void (**)(void, void *, uint64_t))(**((void **)this + 296) + 32))(*((void *)this + 296), v9, 13);
      *((_DWORD *)this + 886) += 13;
      ++*((_DWORD *)this + 883);
      int v8 = *(_DWORD *)(*((void *)this + 295) + 20);
    }
    else
    {
      int v5 = *((_DWORD *)this + 3);
      int v6 = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
      GlCustomLog(14, "#### CS: INFO #### Tick called too early (%u) (%u), will restart timer!\n", v5, v6);
      if (*((unsigned char *)this + 8))
      {
        int v7 = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
        int v8 = (*((_DWORD *)this + 3) - v7) & ~((*((_DWORD *)this + 3) - v7) >> 31);
      }
      else
      {
        int v8 = 0;
      }
    }
    return BlueFin::GlComStressImpl::SetTimerMs(this, v8);
  }
  else
  {
    return GlCustomLog(11, "#### CS: ERROR #### Invalid Tick call : Timer not set\n");
  }
}

uint64_t BlueFin::GlComStressImpl::UpdateStressState(BlueFin::GlComStressImpl *this)
{
  BOOL v58 = (int32x2_t *)((char *)this + 3540);
  int v2 = (_OWORD *)((char *)this + 3580);
  BOOL v3 = (unsigned __int8 *)this + 1060;
  while (1)
  {
    int v4 = *((_DWORD *)this + 910);
    if (*((_DWORD *)this + 594)) {
      break;
    }
    if (!*((unsigned char *)this + 2384))
    {
      if ((v4 & 0xFFFFFFF8) == 8)
      {
        int v36 = *((_DWORD *)this + 887) + *((_DWORD *)this + 330);
        *((_DWORD *)this + 887) = v36;
        *((_WORD *)this + 1176) = 0;
        *((_DWORD *)this + 330) = 0;
        int v37 = *((_DWORD *)this + 884) - *((_DWORD *)this + 891);
        int v38 = *((_DWORD *)this + 882);
        int v39 = *((_DWORD *)this + 889);
        int v55 = *((_DWORD *)this + 888);
        int v56 = *((_DWORD *)this + 881);
        int v40 = *((_DWORD *)this + 883) - *((_DWORD *)this + 890);
        int32x2_t v57 = vsub_s32(*v58, *(int32x2_t *)((char *)this + 3568));
        int v41 = *((_DWORD *)this + 894);
        unsigned int v42 = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296))
            - *((_DWORD *)this + 908);
        *((_DWORD *)this + 909) += v42;
        unsigned int v53 = v57.i32[0] / v42;
        unsigned int v54 = v57.i32[1] / v42;
        GlCustomLog(14, "# CS: %.1f sec elapsed, %u/%u Tx/Rx bytes, %u/%u Tx/Rx Pkts, %u/%u Tx/Rx kB/s\n", (double)v42 / 1000.0, v57.i32[1], v57.i32[0], v40, v37, v57.i32[1] / v42, v57.i32[0] / v42);
        if (v56 != v55 || v38 != v39 || v36 != v41) {
          GlCustomLog(11, "# CS: ERROR: RxPacketLost=%u RxGarbageBytes=%u TxPacketBroken=%u \n", v38 - v39, v56 - v55, v36 - v41);
        }
        v58[7] = vadd_s32(v58[7], v57);
        *((_DWORD *)this + 898) += v42;
        *((_DWORD *)this + 902) += v56 - v55;
        *((_DWORD *)this + 901) += v36 - v41 + v38 - v39;
        unsigned int v43 = *((_DWORD *)this + 910);
        if (v43 <= 0xF)
        {
          if (((1 << v43) & 0x2200) != 0)
          {
            unsigned int v45 = *((_DWORD *)this + 903);
            if (v53 > v45) {
              unsigned int v45 = v57.i32[0] / v42;
            }
            *((_DWORD *)this + 903) = v45;
            if (v43 == 11) {
              goto LABEL_82;
            }
            if (v43 != 10) {
              goto LABEL_88;
            }
            double v46 = (char *)this + 3616;
LABEL_85:
            int v49 = *(_DWORD *)v46;
            if (v54 > *(_DWORD *)v46) {
              int v49 = v57.i32[1] / v42;
            }
            *(_DWORD *)double v46 = v49;
          }
          else
          {
            if (((1 << v43) & 0x4400) == 0)
            {
              if (((1 << v43) & 0x8800) == 0) {
                goto LABEL_88;
              }
LABEL_82:
              unsigned int v48 = *((_DWORD *)this + 905);
              if (v53 > v48) {
                unsigned int v48 = v57.i32[0] / v42;
              }
              *((_DWORD *)this + 905) = v48;
              double v46 = (char *)this + 3624;
              goto LABEL_85;
            }
            unsigned int v47 = *((_DWORD *)this + 904);
            if (v54 > v47) {
              unsigned int v47 = v57.i32[1] / v42;
            }
            *((_DWORD *)this + 904) = v47;
            if (v43 == 11) {
              goto LABEL_82;
            }
          }
        }
LABEL_88:
        *((_OWORD *)this + 222) = *(_OWORD *)((char *)this + 3524);
        *(_OWORD *)((char *)this + 3564) = *((_OWORD *)this + 221);
        *((_DWORD *)this + 908) = 0;
      }
      int v44 = (int *)((char *)this + 16);
      int v50 = *((_DWORD *)this + 4);
      *((unsigned char *)this + 2384) = 1;
      GlCustomLog(15, "CS:Delay between tests(%d)\n", v50);
      goto LABEL_90;
    }
LABEL_10:
    *((unsigned char *)this + 2384) = 0;
    unsigned int v6 = *((_DWORD *)this + 595);
    unsigned int v7 = 10 * v6 - 50;
    if (v7 >= 0xFA) {
      unsigned int v7 = 250;
    }
    if (v6 < 6) {
      unsigned int v7 = 10;
    }
    *((_DWORD *)this + 594) = v7;
    *((_DWORD *)this + 910) = v4 + 1;
    *((_DWORD *)this + 600) = 269281408;
    switch(v4)
    {
      case 4:
        DeviceFaultNotify("gl_comstress_impl.cpp", 636, "StartNextTest", (char)"0");
        int v52 = 636;
        goto LABEL_95;
      case 5:
        *((unsigned char *)this + 8) = 1;
        *((_DWORD *)this + 3) = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296))
                              + 500;
        int v8 = *(void (**)(void))(**((void **)this + 296) + 16);
        goto LABEL_21;
      case 6:
        GlCustomLog(14, "\n");
        GlCustomLog(14, "\n");
        unsigned int v9 = 4 * *((_DWORD *)this + 595);
        if (v9 >= 4 * *((_DWORD *)this + 597)) {
          unsigned int v9 = 4 * *((_DWORD *)this + 597);
        }
        GlCustomLog(14, "CS:********************   Starting Tests, Loop %u, iterations %u, load kB %u ********************\n", *((_DWORD *)this + 595), *((_DWORD *)this + 594), v9 >> 2);
        int v10 = *((_DWORD *)this + 595);
        unsigned int v11 = 4 * v10;
        if (4 * v10 >= (4 * *((_DWORD *)this + 597))) {
          unsigned int v11 = 4 * *((_DWORD *)this + 597);
        }
        *int v2 = 0u;
        v2[1] = 0u;
        v2[2] = 0u;
        *((_DWORD *)this + 897) = v11 >> 2;
        *((_DWORD *)this + 896) = v10;
        *((unsigned char *)this + 8) = 1;
        *((_DWORD *)this + 3) = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
        int v8 = *(void (**)(void))(**((void **)this + 296) + 16);
LABEL_21:
        v8();
        break;
      case 7:
        GlCustomLog(14, "CS:Starting Basic Test\n");
        break;
      case 8:
        GlCustomLog(14, "CS:Starting Rx Test\n");
        break;
      case 9:
        GlCustomLog(14, "CS:Starting Tx Test\n");
        break;
      case 10:
        GlCustomLog(14, "CS:Starting RxTx Test\n");
        break;
      case 11:
        GlCustomLog(14, "CS:Starting Intermittent Test\n");
        break;
      case 12:
        GlCustomLog(14, "CS:Starting Rx Streaming Test\n");
        int v13 = *((_DWORD *)this + 7);
        int v14 = *((_DWORD *)this + 594) * v13;
        *((_DWORD *)this + 594) = v14;
        if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
          int v15 = 4 * *((_DWORD *)this + 597);
        }
        else {
          int v15 = 4 * *((_DWORD *)this + 595);
        }
        GlCustomLog(15, "CS:PrimeRxStreamingTest(%u, %u, %u)\n", v14, v13, v15);
        for (; v15; --v15)
        {
          int v16 = *((unsigned __int8 *)this + 3516);
          *((unsigned char *)this + 3516) = v16 + 1;
          BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v16 + 269281408, *((unsigned __int16 *)this + 16));
        }
        break;
      case 13:
        GlCustomLog(14, "CS:Starting Tx Streaming Test\n");
        int v17 = *((_DWORD *)this + 7);
        int v18 = *((_DWORD *)this + 594) * v17;
        *((_DWORD *)this + 594) = v18;
        if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
          int v19 = 4 * *((_DWORD *)this + 597);
        }
        else {
          int v19 = 4 * *((_DWORD *)this + 595);
        }
        GlCustomLog(15, "CS:PrimeTxStreamingTest(%u, %u, %u)\n", v18, v17, v19);
        if (v19)
        {
          for (int i = 0; i != v19; ++i)
          {
            int v21 = *((_DWORD *)this + 331);
            int v22 = *((unsigned __int8 *)this + 3514);
            int16x8_t v23 = vdupq_n_s16(4 * v22);
            for (uint64_t j = 1060; j != 1316; j += 16)
              *(int16x8_t *)((char *)this + j) = v23;
            int v25 = (unsigned __int8 *)(v21 + 269281408 + 4 * v22);
            *((unsigned char *)this + 3514) = v22 + 1;
            BlueFin::GlComStressImpl::AddBriMemWrite(this, v21 + 269281408 + 4 * v22, v3, 0x100uLL);
            BlueFin::GlComStressImpl::AddCrcRequest(this, v25, (BlueFin::GlComStressImpl *)v3);
          }
        }
        break;
      case 14:
        GlCustomLog(14, "CS:Starting RxTx Streaming Test\n");
        int v26 = *((_DWORD *)this + 7);
        int v27 = *((_DWORD *)this + 594) * v26;
        *((_DWORD *)this + 594) = v27;
        if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
          int v28 = 4 * *((_DWORD *)this + 597);
        }
        else {
          int v28 = 4 * *((_DWORD *)this + 595);
        }
        GlCustomLog(15, "CS:PrimeTxStreamingTest(%u, %u, %u)\n", v27, v26, v28);
        if (v28)
        {
          for (int k = 0; k != v28; ++k)
          {
            int v30 = *((_DWORD *)this + 331);
            int v31 = *((unsigned __int8 *)this + 3514);
            int16x8_t v32 = vdupq_n_s16(4 * v31);
            for (uint64_t m = 1060; m != 1316; m += 16)
              *(int16x8_t *)((char *)this + m) = v32;
            int v34 = (unsigned __int8 *)(v30 + 269281408 + 4 * v31);
            *((unsigned char *)this + 3514) = v31 + 1;
            BlueFin::GlComStressImpl::AddBriMemWrite(this, v30 + 269281408 + 4 * v31, v3, 0x100uLL);
            BlueFin::GlComStressImpl::AddCrcRequest(this, v34, (BlueFin::GlComStressImpl *)v3);
            int v35 = *((unsigned __int8 *)this + 3516);
            *((unsigned char *)this + 3516) = v35 + 1;
            BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v35 + 269281408, *((unsigned __int16 *)this + 16));
          }
        }
        break;
      case 15:
        *((_DWORD *)this + 595) = v6 + 1;
        *((_DWORD *)this + 910) = 5;
        *((unsigned char *)this + 8) = 1;
        *((_DWORD *)this + 3) = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
        (*(void (**)(void, void))(**((void **)this + 296) + 16))(*((void *)this + 296), 0);
        *((unsigned char *)this + 3580) = 1;
        (*(void (**)(void, _OWORD *))(**((void **)this + 296) + 56))(*((void *)this + 296), v2);
        break;
      default:
        DeviceFaultNotify("gl_comstress_impl.cpp", 687, "StartNextTest", (char)"0");
        int v52 = 687;
LABEL_95:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", v52, "0");
    }
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 296) + 24))(*((void *)this + 296));
    *((_DWORD *)this + 908) = result;
    if ((*((_DWORD *)this + 910) & 0xFFFFFFF8) != 8) {
      return result;
    }
  }
  if (*((unsigned char *)this + 2384)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = (v4 & 0xFFFFFFF8) == 8;
  }
  if (!v5) {
    goto LABEL_10;
  }
  switch(v4)
  {
    case 8:
      BlueFin::GlComStressImpl::SendBasicTest(this);
      break;
    case 9:
      BlueFin::GlComStressImpl::SendRxTest(this);
      break;
    case 10:
      BlueFin::GlComStressImpl::SendTxTest(this);
      break;
    case 11:
      BlueFin::GlComStressImpl::SendRxTxTest(this);
      break;
    case 12:
      BlueFin::GlComStressImpl::SendIntermittentTest(this);
      break;
    case 13:
      BlueFin::GlComStressImpl::SendRxStreamingTest(this);
      break;
    case 14:
      BlueFin::GlComStressImpl::SendTxStreamingTest(this);
      break;
    case 15:
      BlueFin::GlComStressImpl::SendRxTxStreamingTest(this);
      break;
    default:
      break;
  }
  int v44 = (int *)((char *)this + 20);
LABEL_90:
  int v51 = *v44;

  return BlueFin::GlComStressImpl::SetTimerMs(this, v51);
}

uint64_t BlueFin::GlComStressImpl::GetRxSeqIdFromMemAddr(BlueFin::GlComStressImpl *this)
{
  if (this <= 0x100CE87F)
  {
    int v2 = "ulMemAddr >= ESW_MEM_ADDR";
    DeviceFaultNotify("gl_comstress_impl.cpp", 1039, "GetRxSeqIdFromMemAddr", (char)"ulMemAddr >= ESW_MEM_ADDR");
    int v3 = 1039;
    goto LABEL_6;
  }
  if ((this & 3) != 0)
  {
    int v2 = "(ulMemAddr - ESW_MEM_ADDR) % 4 == 0";
    DeviceFaultNotify("gl_comstress_impl.cpp", 1040, "GetRxSeqIdFromMemAddr", (char)"(ulMemAddr - ESW_MEM_ADDR) % 4 == 0");
    int v3 = 1040;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", v3, v2);
  }
  return ((this + 896) >> 2);
}

uint64_t BlueFin::GlComStressImpl::GetTxSeqIdFromMemAddr(BlueFin::GlComStressImpl *this, unsigned int a2)
{
  if ((int)this + 269281408 > a2)
  {
    int v3 = "ulMemAddr >= ESW_MEM_ADDR + m_ulTxMemoryOffset";
    DeviceFaultNotify("gl_comstress_impl.cpp", 1024, "GetTxSeqIdFromMemAddr", (char)"ulMemAddr >= ESW_MEM_ADDR + m_ulTxMemoryOffset");
    int v4 = 1024;
    goto LABEL_6;
  }
  if (((a2 - this) & 3) != 0)
  {
    int v3 = "(ulMemAddr - ESW_MEM_ADDR - m_ulTxMemoryOffset) % 4 == 0";
    DeviceFaultNotify("gl_comstress_impl.cpp", 1025, "GetTxSeqIdFromMemAddr", (char)"(ulMemAddr - ESW_MEM_ADDR - m_ulTxMemoryOffset) % 4 == 0");
    int v4 = 1025;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", v4, v3);
  }
  return ((a2 - this + 896) >> 2);
}

uint64_t BlueFin::GlComStressImpl::SendBasicTest(BlueFin::GlComStressImpl *this)
{
  GlCustomLog(15, "CS:SendBasicTest(%u)\n", *((_DWORD *)this + 594));
  int v2 = *((_DWORD *)this + 331);
  int v3 = *((unsigned __int8 *)this + 3514);
  int16x8_t v4 = vdupq_n_s16(4 * v3);
  for (uint64_t i = 1060; i != 1316; i += 16)
    *(int16x8_t *)((char *)this + i) = v4;
  int v6 = v2 + 4 * v3;
  unsigned int v7 = (unsigned __int8 *)(v6 + 269281408);
  *((unsigned char *)this + 3514) = v3 + 1;
  BlueFin::GlComStressImpl::AddBriMemWrite(this, v6 + 269281408, (unsigned __int8 *)this + 1060, 0x100uLL);
  BlueFin::GlComStressImpl::AddCrcRequest(this, v7, (BlueFin::GlComStressImpl *)((char *)this + 1060));
  int v8 = *((unsigned __int8 *)this + 3516);
  *((unsigned char *)this + 3516) = v8 + 1;
  unsigned int v9 = *((unsigned __int16 *)this + 16);

  return BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v8 + 269281408, v9);
}

uint64_t BlueFin::GlComStressImpl::SendRxTest(BlueFin::GlComStressImpl *this)
{
  if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
    int v2 = 4 * *((_DWORD *)this + 597);
  }
  else {
    int v2 = 4 * *((_DWORD *)this + 595);
  }
  for (uint64_t result = GlCustomLog(15, "CS:SendRxTest(%u) : %u\n", *((_DWORD *)this + 594), v2); v2; --v2)
  {
    int v4 = *((unsigned __int8 *)this + 3516);
    *((unsigned char *)this + 3516) = v4 + 1;
    uint64_t result = BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v4 + 269281408, *((unsigned __int16 *)this + 16));
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::SendTxTest(BlueFin::GlComStressImpl *this)
{
  uint64_t result = GlCustomLog(15, "CS:SendTxTest(%u)\n", *((_DWORD *)this + 594));
  if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
    int v3 = 4 * *((_DWORD *)this + 597);
  }
  else {
    int v3 = 4 * *((_DWORD *)this + 595);
  }
  if (v3)
  {
    for (int i = 0; i != v3; ++i)
    {
      int v5 = *((_DWORD *)this + 331);
      int v6 = *((unsigned __int8 *)this + 3514);
      int16x8_t v7 = vdupq_n_s16(4 * v6);
      for (uint64_t j = 1060; j != 1316; j += 16)
        *(int16x8_t *)((char *)this + j) = v7;
      int v9 = v5 + 4 * v6;
      int v10 = (unsigned __int8 *)(v9 + 269281408);
      *((unsigned char *)this + 3514) = v6 + 1;
      BlueFin::GlComStressImpl::AddBriMemWrite(this, v9 + 269281408, (unsigned __int8 *)this + 1060, 0x100uLL);
      uint64_t result = BlueFin::GlComStressImpl::AddCrcRequest(this, v10, (BlueFin::GlComStressImpl *)((char *)this + 1060));
    }
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::SendRxTxTest(BlueFin::GlComStressImpl *this)
{
  uint64_t result = GlCustomLog(15, "CS:SendRxTxTest(%u)\n", *((_DWORD *)this + 594));
  if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
    int v3 = 4 * *((_DWORD *)this + 597);
  }
  else {
    int v3 = 4 * *((_DWORD *)this + 595);
  }
  if (v3)
  {
    for (int i = 0; i != v3; ++i)
    {
      int v5 = *((_DWORD *)this + 331);
      int v6 = *((unsigned __int8 *)this + 3514);
      int16x8_t v7 = vdupq_n_s16(4 * v6);
      for (uint64_t j = 1060; j != 1316; j += 16)
        *(int16x8_t *)((char *)this + j) = v7;
      int v9 = (unsigned __int8 *)(v5 + 269281408 + 4 * v6);
      *((unsigned char *)this + 3514) = v6 + 1;
      BlueFin::GlComStressImpl::AddBriMemWrite(this, v5 + 269281408 + 4 * v6, (unsigned __int8 *)this + 1060, 0x100uLL);
      BlueFin::GlComStressImpl::AddCrcRequest(this, v9, (BlueFin::GlComStressImpl *)((char *)this + 1060));
      int v10 = *((unsigned __int8 *)this + 3516);
      *((unsigned char *)this + 3516) = v10 + 1;
      uint64_t result = BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v10 + 269281408, *((unsigned __int16 *)this + 16));
    }
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::SendIntermittentTest(BlueFin::GlComStressImpl *this)
{
  GlCustomLog(15, "CS:SendIntermittentTest(%u)\n", *((_DWORD *)this + 594));
  int v2 = *((_DWORD *)this + 331);
  int v3 = *((unsigned __int8 *)this + 3514);
  int16x8_t v4 = vdupq_n_s16(4 * v3);
  for (uint64_t i = 1060; i != 1316; i += 16)
    *(int16x8_t *)((char *)this + i) = v4;
  int v6 = v2 + 4 * v3;
  int16x8_t v7 = (unsigned __int8 *)(v6 + 269281408);
  *((unsigned char *)this + 3514) = v3 + 1;
  BlueFin::GlComStressImpl::AddBriMemWrite(this, v6 + 269281408, (unsigned __int8 *)this + 1060, 0x100uLL);
  BlueFin::GlComStressImpl::AddCrcRequest(this, v7, (BlueFin::GlComStressImpl *)((char *)this + 1060));
  int v8 = *((unsigned __int8 *)this + 3516);
  *((unsigned char *)this + 3516) = v8 + 1;
  unsigned int v9 = *((unsigned __int16 *)this + 16);

  return BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v8 + 269281408, v9);
}

uint64_t BlueFin::GlComStressImpl::SendRxStreamingTest(BlueFin::GlComStressImpl *this)
{
  if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
    int v2 = 4 * *((_DWORD *)this + 597);
  }
  else {
    int v2 = 4 * *((_DWORD *)this + 595);
  }
  GlCustomLog(15, "CS:SendRxStreamingTest(%u - %u) : %d, %d\n", *((_DWORD *)this + 594), *((_DWORD *)this + 7), v2, *((_DWORD *)this + 329));
  if (*((_DWORD *)this + 594))
  {
    GlCustomLog(15, "CS:SendRxStreamingTest, sending %u packets\n", v2);
    int v3 = v2 - 1;
    do
    {
      int v4 = *((unsigned __int8 *)this + 3516);
      *((unsigned char *)this + 3516) = v4 + 1;
      uint64_t result = BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v4 + 269281408, *((unsigned __int16 *)this + 16));
      --v3;
    }
    while (v3);
  }
  else
  {
    return GlCustomLog(15, "CS:SendRxStreamingTest - nothing sent, only reload expected responses\n");
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::SendTxStreamingTest(BlueFin::GlComStressImpl *this)
{
  GlCustomLog(15, "CS:SendTxStreamingTest(%u - %u)\n", *((_DWORD *)this + 594), *((_DWORD *)this + 7));
  if (*((_DWORD *)this + 594))
  {
    if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
      int v2 = 4 * *((_DWORD *)this + 597);
    }
    else {
      int v2 = 4 * *((_DWORD *)this + 595);
    }
    GlCustomLog(15, "CS:SendTxStreamingTest, sending %u packets\n", v2);
    int v3 = 0;
    int v4 = v2 - 2;
    do
    {
      int v5 = *((_DWORD *)this + 331);
      int v6 = *((unsigned __int8 *)this + 3514);
      int16x8_t v7 = vdupq_n_s16(4 * v6);
      for (uint64_t i = 1060; i != 1316; i += 16)
        *(int16x8_t *)((char *)this + i) = v7;
      int v9 = v5 + 4 * v6;
      int v10 = (unsigned __int8 *)(v9 + 269281408);
      *((unsigned char *)this + 3514) = v6 + 1;
      BlueFin::GlComStressImpl::AddBriMemWrite(this, v9 + 269281408, (unsigned __int8 *)this + 1060, 0x100uLL);
      uint64_t result = BlueFin::GlComStressImpl::AddCrcRequest(this, v10, (BlueFin::GlComStressImpl *)((char *)this + 1060));
    }
    while (v3++ != v4);
  }
  else
  {
    return GlCustomLog(15, "CS:SendRxStreamingTest - nothing sent, only reload expected responses\n");
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::SendRxTxStreamingTest(BlueFin::GlComStressImpl *this)
{
  if (4 * *((_DWORD *)this + 595) >= (4 * *((_DWORD *)this + 597))) {
    int v2 = 4 * *((_DWORD *)this + 597);
  }
  else {
    int v2 = 4 * *((_DWORD *)this + 595);
  }
  uint64_t result = GlCustomLog(15, "CS:SendRxTxStreamingTest(%u, %u, %u, %u, %u)\n", *((_DWORD *)this + 594), *((_DWORD *)this + 7), v2, *((_DWORD *)this + 329), *((_DWORD *)this + 330));
  if (*((_DWORD *)this + 594))
  {
    if (v2)
    {
      for (int i = 0; i != v2; ++i)
      {
        int v5 = *((_DWORD *)this + 331);
        int v6 = *((unsigned __int8 *)this + 3514);
        int16x8_t v7 = vdupq_n_s16(4 * v6);
        for (uint64_t j = 1060; j != 1316; j += 16)
          *(int16x8_t *)((char *)this + j) = v7;
        int v9 = (unsigned __int8 *)(v5 + 269281408 + 4 * v6);
        *((unsigned char *)this + 3514) = v6 + 1;
        BlueFin::GlComStressImpl::AddBriMemWrite(this, v5 + 269281408 + 4 * v6, (unsigned __int8 *)this + 1060, 0x100uLL);
        BlueFin::GlComStressImpl::AddCrcRequest(this, v9, (BlueFin::GlComStressImpl *)((char *)this + 1060));
        int v10 = *((unsigned __int8 *)this + 3516);
        *((unsigned char *)this + 3516) = v10 + 1;
        uint64_t result = BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 4 * v10 + 269281408, *((unsigned __int16 *)this + 16));
      }
    }
  }
  else
  {
    return GlCustomLog(15, "CS:SendRxTxStreamingTest - nothing sent, only reload expected responses\n");
  }
  return result;
}

uint64_t BlueFin::GlComStressImpl::AddBriMemWrite(BlueFin::GlComStressImpl *this, int a2, unsigned __int8 *__src, size_t __n)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!__src)
  {
    int v8 = "pData";
    DeviceFaultNotify("gl_comstress_impl.cpp", 1085, "AddBriMemWrite", (char)"pData");
    int v9 = 1085;
    goto LABEL_6;
  }
  int v4 = __n;
  uint64_t v5 = __n;
  if ((__n & 3) != 0)
  {
    int v8 = "usSize % sizeof(GlIntU32) == 0";
    DeviceFaultNotify("gl_comstress_impl.cpp", 1086, "AddBriMemWrite", (char)"usSize % sizeof(GlIntU32) == 0");
    int v9 = 1086;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", v9, v8);
  }
  v10[0] = -1;
  v10[1] = (__n >> 2) - 1;
  __int16 v11 = 17405;
  int v12 = a2;
  memcpy(v13, __src, __n);
  v13[v5] = -4;
  ++*((_DWORD *)this + 883);
  *((_DWORD *)this + 886) += v4 + 9;
  return (*(uint64_t (**)(void, unsigned char *, void))(**((void **)this + 296) + 32))(*((void *)this + 296), v10, (unsigned __int16)(v4 + 9));
}

uint64_t BlueFin::GlComStressImpl::AddCrcRequest(BlueFin::GlComStressImpl *this, unsigned __int8 *a2, BlueFin::GlComStressImpl *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  int v29 = 1258094847;
  __int16 v30 = (__int16)a2;
  char v31 = BYTE2(a2);
  char v32 = BYTE3(a2);
  __int16 v33 = 256;
  char v34 = -4;
  ++*((_DWORD *)this + 883);
  *((_DWORD *)this + 886) += 11;
  unsigned int v3 = *((_DWORD *)this + 330) + 1;
  *((_DWORD *)this + 330) = v3;
  if (v3 > 0x3FF)
  {
    DeviceFaultNotify("gl_comstress_impl.cpp", 977, "AddCrcRequest", (char)"m_ulExpectedCrcResponse < sizeof(m_aulExpectedCrcQueue)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", 977, "m_ulExpectedCrcResponse < sizeof(m_aulExpectedCrcQueue)");
  }
  int v5 = (int)a2;
  uint64_t v7 = 0;
  int32x4_t v8 = 0uLL;
  int32x4_t v9 = 0uLL;
  int32x4_t v10 = 0uLL;
  int32x4_t v11 = 0uLL;
  do
  {
    uint8x16_t v12 = *(uint8x16_t *)((char *)a3 + v7);
    uint16x8_t v13 = vmovl_u8(*(uint8x8_t *)v12.i8);
    uint16x8_t v14 = vmovl_high_u8(v12);
    int32x4_t v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v14);
    int32x4_t v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v14.i8);
    int32x4_t v9 = (int32x4_t)vaddw_high_u16((uint32x4_t)v9, v13);
    int32x4_t v8 = (int32x4_t)vaddw_u16((uint32x4_t)v8, *(uint16x4_t *)v13.i8);
    v7 += 16;
  }
  while (v7 != 256);
  int v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v8, v10), vaddq_s32(v9, v11)));
  unsigned __int8 v16 = BlueFin::GlComStressImpl::ComputeCrc8(a3, a2);
  uint64_t v17 = *((unsigned __int8 *)this + 2353);
  *((_DWORD *)this + v17 + 332) = v15 & 0xFFFFFF | (v16 << 24);
  *((unsigned char *)this + 2353) = v17 + 1;
  unsigned __int8 v19 = BlueFin::GlComStressImpl::ComputeCrc8(a3, v18);
  uint64_t v20 = 0;
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  int32x4_t v23 = 0uLL;
  int32x4_t v24 = 0uLL;
  do
  {
    uint8x16_t v25 = *(uint8x16_t *)((char *)a3 + v20);
    uint16x8_t v26 = vmovl_u8(*(uint8x8_t *)v25.i8);
    uint16x8_t v27 = vmovl_high_u8(v25);
    int32x4_t v24 = (int32x4_t)vaddw_high_u16((uint32x4_t)v24, v27);
    int32x4_t v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v27.i8);
    int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    int32x4_t v21 = (int32x4_t)vaddw_u16((uint32x4_t)v21, *(uint16x4_t *)v26.i8);
    v20 += 16;
  }
  while (v20 != 256);
  GlCustomLog(15, "CS: AddCrcRequest :     addr:0x%08X(%d) CrcChecksum=0x%08X ExptCrcResp=%u\n", v5, 256, vaddvq_s32(vaddq_s32(vaddq_s32(v21, v23), vaddq_s32(v22, v24))) & 0xFFFFFF | (v19 << 24), v3);
  return (*(uint64_t (**)(void, int *, uint64_t))(**((void **)this + 296) + 32))(*((void *)this + 296), &v29, 11);
}

uint64_t BlueFin::GlComStressImpl::AddBriMemReadRequest(BlueFin::GlComStressImpl *this, int a2, unsigned int a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 >= 0x401)
  {
    int v6 = "usSize <= 1024";
    DeviceFaultNotify("gl_comstress_impl.cpp", 921, "AddBriMemReadRequest", (char)"usSize <= 1024");
    int v7 = 921;
    goto LABEL_8;
  }
  if ((a2 & 3) != 0)
  {
    int v6 = "(ulMemAddr & 0x03) == 0";
    DeviceFaultNotify("gl_comstress_impl.cpp", 922, "AddBriMemReadRequest", (char)"(ulMemAddr & 0x03) == 0");
    int v7 = 922;
    goto LABEL_8;
  }
  if ((a3 & 3) != 0)
  {
    int v6 = "(usSize & 0x03) == 0";
    DeviceFaultNotify("gl_comstress_impl.cpp", 923, "AddBriMemReadRequest", (char)"(usSize & 0x03) == 0");
    int v7 = 923;
LABEL_8:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "gl_comstress_impl.cpp", v7, v6);
  }
  v8[0] = -1;
  v8[1] = (a3 >> 2) - 1;
  __int16 v9 = 18941;
  __int16 v10 = a2;
  __int16 v11 = 4108;
  char v12 = -4;
  int v4 = *((_DWORD *)this + 329) + 1;
  *((_DWORD *)this + 329) = v4;
  ++*((_DWORD *)this + 883);
  *((_DWORD *)this + 886) += 9;
  GlCustomLog(15, "CS: AddBriMemReadRequest: addr:0x%08X(%d) ExptMemReadResp=%d\n", a2, a3, v4);
  return (*(uint64_t (**)(void, unsigned char *, uint64_t))(**((void **)this + 296) + 32))(*((void *)this + 296), v8, 9);
}

uint64_t BlueFin::GlComStressImpl::ComputeCrc8(BlueFin::GlComStressImpl *this, unsigned __int8 *a2)
{
  uint64_t v2 = 0;
  LOBYTE(v3) = 0;
  do
  {
    uint64_t v3 = BlueFin::GlUtlCrc::ucCrcTable[*((unsigned char *)this + v2) ^ BlueFin::GlUtlCrc::ucCrcTable[*((unsigned char *)this + v2 + 1) ^ BlueFin::GlUtlCrc::ucCrcTable[*((unsigned char *)this + v2 + 2) ^ BlueFin::GlUtlCrc::ucCrcTable[(*((unsigned char *)this + v2 + 3) ^ v3)]]]];
    v2 += 4;
  }
  while (v2 != 256);
  return v3;
}

uint64_t BlueFin::GlComStressImpl::BriSetupTest(BlueFin::GlComStressImpl *this)
{
  GlCustomLog(15, "CS:BriSetupTest\n");
  BlueFin::GlComStressImpl::AddBriMemWrite(this, 269281408, (unsigned __int8 *)this + 36, 0x400uLL);
  BlueFin::GlComStressImpl::AddBriMemWrite(this, 269282432, (unsigned __int8 *)this + 36, 0x400uLL);
  BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 269281408, 0x400u);

  return BlueFin::GlComStressImpl::AddBriMemReadRequest(this, 269282432, 0x400u);
}

uint64_t BlueFin::GlComStressImpl::BriClockConfig(BlueFin::GlComStressImpl *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  GlCustomLog(14, "CS: Sending ClockConfig\n");
  v3[4] = xmmword_263BB520E;
  v3[5] = unk_263BB521E;
  *(_OWORD *)&v4[13] = unk_263BB526B;
  v3[8] = xmmword_263BB524E;
  *(_OWORD *)int v4 = unk_263BB525E;
  v3[6] = xmmword_263BB522E;
  v3[7] = unk_263BB523E;
  v3[2] = xmmword_263BB51EE;
  v3[3] = unk_263BB51FE;
  v3[0] = xmmword_263BB51CE;
  v3[1] = unk_263BB51DE;
  uint64_t result = (*(uint64_t (**)(void, _OWORD *, uint64_t))(**((void **)this + 296) + 32))(*((void *)this + 296), v3, 173);
  *((_DWORD *)this + 886) += 173;
  ++*((_DWORD *)this + 883);
  return result;
}

double BlueFin::GlPeIonoModel::GlPeIonoModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270EC13F0;
  uint64_t v2 = 8;
  uint64_t v3 = 40;
  do
  {
    *(void *)(a1 + v2) = *(void *)(a2 + v2);
    *(_DWORD *)(a1 + v3) = *(_DWORD *)(a2 + v3);
    v2 += 8;
    v3 += 4;
  }
  while (v2 != 40);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

void BlueFin::GlPeIonoMgr::SetDataSubFrmMeas(BlueFin::GlPeIonoMgr *this, BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    char v34 = "nullptr != pDataSubFrmMeas";
    DeviceFaultNotify("glpe_ionomgr.cpp", 251, "SetDataSubFrmMeas", (char)"nullptr != pDataSubFrmMeas");
    int v35 = 251;
    goto LABEL_59;
  }
  unint64_t v3 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a2 + 8)) {
    goto LABEL_61;
  }
  if (v3 >= 0x21)
  {
    if ((v3 - 66) < 0xA) {
      return;
    }
LABEL_61:
    char v34 = "IS_GPS_SVID(*pDataSubFrmMeas->otSvId) || pDataSubFrmMeas->otSvId.IsQzss()";
    DeviceFaultNotify("glpe_ionomgr.cpp", 252, "SetDataSubFrmMeas", (char)"IS_GPS_SVID(*pDataSubFrmMeas->otSvId) || pDataSubFrmMeas->otSvId.IsQzss()");
    int v35 = 252;
    goto LABEL_59;
  }
  int v5 = *((unsigned __int8 *)a2 + 9);
  if (v5 != 5)
  {
    if (v5 == 1)
    {
      if ((*((_DWORD *)a2 + 7) & 0xC0003F00) == 0) {
        *(_DWORD *)(*((void *)this + 40) + ((v3 >> 3) & 0x1C)) |= 1 << v3;
      }
      return;
    }
    if (((*(unsigned int *)(*((void *)this + 40) + 4 * (v3 >> 5)) >> (v3 & 0x1F)) & 1) == 0) {
      return;
    }
    if (v5 == 4)
    {
      unsigned int v8 = *((_DWORD *)a2 + 7);
      if (v8 >> 22 == 120)
      {
        unsigned int v9 = *((_DWORD *)a2 + 8);
        if (!(v9 >> 30))
        {
          unsigned int v10 = *((_DWORD *)a2 + 9);
          if (!(v10 >> 30))
          {
            uint64_t v11 = 0;
            int v39 = &unk_270EC13F0;
            uint64_t v43 = 1;
            int8x8_t v44 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v8), (uint32x2_t)0xFFFFFFFAFFFFFFF2), (int8x8_t)0xFF000000FFLL);
            signed int v45 = v9 >> 22;
            *(int8x8_t *)double v46 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v9), (uint32x2_t)0xFFFFFFFAFFFFFFF2), (int8x8_t)0xFF000000FFLL);
            *(_DWORD *)&v46[8] = v10 >> 22;
            *(int8x8_t *)&v46[12] = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFFAFFFFFFF2), (int8x8_t)0xFF000000FFLL);
            do
            {
              uint64_t v12 = *(uint64_t *)((char *)&v44 + v11 * 4);
              int32x2_t v13 = vceq_s32((int32x2_t)(v12 & 0xFFFFFF80FFFFFF80), (int32x2_t)0x8000000080);
              if (v13.i8[0]) {
                v44.i32[v11] = v12 | 0xFFFFFF00;
              }
              if (v13.i8[4]) {
                v44.i32[v11 + 1] = BYTE4(v12) | 0xFFFFFF00;
              }
              v11 += 2;
            }
            while (v11 != 8);
            v14.i64[0] = v44.i32[0];
            v14.i64[1] = v44.i32[1];
            float64x2_t v15 = vmulq_f64(vcvtq_f64_s64(v14), (float64x2_t)xmmword_263BB8A20);
            v14.i64[0] = v45;
            v14.i64[1] = *(int *)v46;
            float64x2_t v40 = v15;
            float64x2_t v41 = vmulq_f64(vcvtq_f64_s64(v14), (float64x2_t)vdupq_n_s64(0x3E70000000000000uLL));
            uint32x4_t v42 = vshlq_u32(*(uint32x4_t *)&v46[4], (uint32x4_t)xmmword_263BB8A30);
            unsigned __int8 v16 = (BlueFin::GlPeTimeManager *)*((void *)this + 44);
            if (*((_DWORD *)v16 + 644))
            {
              BlueFin::GlPeTimeManager::GetTime(v16, 1, v36);
              int v37 = &off_270EBC600;
              uint64_t v38 = 0;
              BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v36, (BlueFin::GlGpsTime *)&v37);
              unsigned int v17 = ((uint64_t (*)(void))v37[4])(&v37);
              LODWORD(v18) = v38;
              double v19 = (double)v18 * 2.32830644e-10 + (double)v17;
              double v20 = fmod(v19, 4294967300.0);
              if (v19 <= 4294967300.0) {
                double v20 = v19;
              }
              if (v20 < -4294967300.0) {
                double v20 = -fmod(-v20, 4294967300.0);
              }
              if (v20 < 0.0) {
                unsigned int v21 = --v20;
              }
              else {
                unsigned int v21 = v20;
              }
              HIDWORD(v43) = v21;
              int v22 = v43;
            }
            else
            {
              unsigned int v21 = 0;
              HIDWORD(v43) = 0;
              int v22 = 1;
            }
            *((unsigned char *)this + 48504) = BlueFin::GlPeIonoModel::operator!=((uint64_t)&v39, (uint64_t)this + 64);
            float64x2_t v23 = v41;
            *(float64x2_t *)((char *)this + 72) = v40;
            *(float64x2_t *)((char *)this + 88) = v23;
            *(uint32x4_t *)((char *)this + 104) = v42;
            *((_DWORD *)this + 30) = v22;
            *((_DWORD *)this + 31) = v21;
            if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              (*(void (**)(char *, void, void))(*((void *)this + 8) + 24))((char *)this + 64, 0, 0);
            }
            int v24 = BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 8)];
            uint8x16_t v25 = "BDS";
            uint16x8_t v26 = "GPS";
            switch(BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 8)])
            {
              case 0:
                break;
              case 1:
                uint16x8_t v26 = "SBAS";
                break;
              case 2:
                uint16x8_t v26 = "GLNS";
                break;
              case 3:
                uint16x8_t v26 = "QZSS";
                break;
              case 4:
                goto LABEL_43;
              default:
                uint16x8_t v27 = "<->";
                if (v24 == 6) {
                  uint16x8_t v27 = "NIC";
                }
                uint8x16_t v25 = "GAL";
                if (v24 != 5) {
                  uint8x16_t v25 = v27;
                }
LABEL_43:
                uint16x8_t v26 = v25;
                break;
            }
            GlCustomLog(15, "Iono.%s[%u]\n", v26, 56);
            uint64_t v28 = *((unsigned __int8 *)a2 + 8);
            int v29 = BlueFin::GlSvId::s_aucSvId2gnss[v28];
            __int16 v30 = "BDS";
            char v31 = "GPS";
            switch(BlueFin::GlSvId::s_aucSvId2gnss[v28])
            {
              case 0:
                break;
              case 1:
                char v31 = "SBAS";
                break;
              case 2:
                char v31 = "GLNS";
                break;
              case 3:
                char v31 = "QZSS";
                break;
              case 4:
                goto LABEL_52;
              default:
                char v32 = "<->";
                if (v29 == 6) {
                  char v32 = "NIC";
                }
                __int16 v30 = "GAL";
                if (v29 != 5) {
                  __int16 v30 = v32;
                }
LABEL_52:
                char v31 = v30;
                break;
            }
            GlCustomLog(15, "IONO(%s %02d): ", v31, v28);
            for (uint64_t i = 0; i != 8; ++i)
              GlCustomLog(15, "%d, ", v44.i32[i]);
            GlCustomLog(15, "\n");
          }
        }
      }
      return;
    }
    char v34 = "4 == pDataSubFrmMeas->ucSubFrmId";
    DeviceFaultNotify("glpe_ionomgr.cpp", 281, "SetDataSubFrmMeas", (char)"4 == pDataSubFrmMeas->ucSubFrmId");
    int v35 = 281;
LABEL_59:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionomgr.cpp", v35, v34);
  }
  int v6 = (void *)*((void *)this + 40);
  size_t v7 = ((4 * *((unsigned __int8 *)this + 328) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;

  bzero(v6, v7);
}

uint64_t BlueFin::GlPeIonoModel::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v3 && v3 != 3)
  {
    DeviceFaultNotify("glpe_ionomgr.cpp", 1625, "SerializeImpl", (char)"ucVersion == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionomgr.cpp", 1625, "ucVersion == 3");
  }
  int v9 = 41;
  char v10 = 3;
  uint64_t v11 = 0x1000000000000;
  unsigned int v8 = &unk_270EBA2F0;
  char v12 = 3;
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v2 + 8));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v6 + 24));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v8, *(double *)(v6 + 32));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 40));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 44));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 48));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 52));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 56));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 60));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeIonoModel::Deserialize(BlueFin::GlPeIonoModel *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 41 || *((unsigned __int8 *)a2 + 12) > 3u) {
    return 0;
  }
  *((double *)this + 1) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 2) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((_DWORD *)this + 10) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_DWORD *)this + 11) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_DWORD *)this + 12) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_DWORD *)this + 13) = BlueFin::GlSysLogEntry::GetS32(a2);
  if (*((unsigned __int8 *)a2 + 12) <= 1u)
  {
    int v7 = 0;
    int U32 = 1;
    *((_DWORD *)this + 14) = 1;
  }
  else
  {
    int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
    unsigned int v6 = *((unsigned __int8 *)a2 + 12);
    *((_DWORD *)this + 14) = U32;
    if (v6 < 3)
    {
      int v7 = 0;
    }
    else
    {
      int v7 = BlueFin::GlSysLogEntry::GetU32(a2);
      int U32 = *((_DWORD *)this + 14);
    }
  }
  *((_DWORD *)this + 15) = v7;
  GlCustomLog(15, "IONO(SLOG, SRC:%d): ", U32);
  double v8 = *((double *)this + 1) * 1073741820.0;
  double v9 = fmod(v8, 4294967300.0);
  if (v8 <= 4294967300.0) {
    double v9 = v8;
  }
  if (v9 < -4294967300.0) {
    double v9 = -fmod(-v9, 4294967300.0);
  }
  if (v9 < 0.0) {
    unsigned int v10 = --v9;
  }
  else {
    unsigned int v10 = v9;
  }
  double v11 = *((double *)this + 2) * 134217728.0;
  double v12 = fmod(v11, 4294967300.0);
  if (v11 <= 4294967300.0) {
    double v12 = v11;
  }
  if (v12 < -4294967300.0) {
    double v12 = -fmod(-v12, 4294967300.0);
  }
  if (v12 < 0.0) {
    unsigned int v13 = --v12;
  }
  else {
    unsigned int v13 = v12;
  }
  double v14 = *((double *)this + 3) * 16777216.0;
  double v15 = fmod(v14, 4294967300.0);
  if (v14 <= 4294967300.0) {
    double v15 = v14;
  }
  if (v15 < -4294967300.0) {
    double v15 = -fmod(-v15, 4294967300.0);
  }
  if (v15 < 0.0) {
    unsigned int v16 = --v15;
  }
  else {
    unsigned int v16 = v15;
  }
  double v17 = *((double *)this + 4) * 16777216.0;
  double v18 = fmod(v17, 4294967300.0);
  if (v17 <= 4294967300.0) {
    double v18 = v17;
  }
  if (v18 < -4294967300.0) {
    double v18 = -fmod(-v18, 4294967300.0);
  }
  if (v18 < 0.0) {
    unsigned int v19 = --v18;
  }
  else {
    unsigned int v19 = v18;
  }
  GlCustomLog(15, "%d, %d, %d, %d, ", v10, v13, v16, v19);
  GlCustomLog(15, "%d, %d, %d, %d, ", *((_DWORD *)this + 10) / 2048, *((_DWORD *)this + 11) / 0x4000, *((_DWORD *)this + 12) / 0x10000, *((_DWORD *)this + 13) / 0x10000);
  GlCustomLog(15, "\n");
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glpe_ionomgr.cpp", 1682, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionomgr.cpp", 1682, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

double BlueFin::GlPeIonoMgr::Deserialize(BlueFin::GlPeIonoMgr *this, BlueFin::GlSysLogEntry *a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_ionomgr.cpp", 1690, "Deserialize", (char)"pEntry");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ionomgr.cpp", 1690, "pEntry");
  }
  double v12 = &unk_270EC13F0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  if (BlueFin::GlPeIonoModel::Deserialize((BlueFin::GlPeIonoModel *)&v12, a2))
  {
    int v4 = v16;
    if (v16 == 4)
    {
      uint64_t v6 = 296;
      uint64_t v7 = 264;
      uint64_t v5 = 4;
    }
    else
    {
      if (v16 != 1) {
        return result;
      }
      uint64_t v5 = 1;
      uint64_t v6 = 104;
      uint64_t v7 = 72;
    }
    double v8 = (_OWORD *)((char *)this + v7);
    long long v9 = v14;
    *double v8 = v13;
    v8[1] = v9;
    double result = *(double *)&v15;
    *(_OWORD *)((char *)this + v6) = v15;
    unsigned int v10 = (char *)this + 64 * v5;
    int v11 = HIDWORD(v16);
    *((_DWORD *)v10 + 14) = v4;
    *((_DWORD *)v10 + 15) = v11;
  }
  return result;
}

void BlueFin::GlBdIonoListener::~GlBdIonoListener(BlueFin::GlBdIonoListener *this)
{
}

void BlueFin::GlPeIonoModel::~GlPeIonoModel(BlueFin::GlPeIonoModel *this)
{
}

uint64_t BlueFin::GlPeLtoSlice::Serialize(BlueFin::GlPeLtoSlice *this, BlueFin::GlPeEngineCallBacks *a2)
{
  int v2 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    unsigned int v4 = *((unsigned __int8 *)this + 4);
    if (*((unsigned char *)this + 4))
    {
      long long v14 = (void (**)(void **, BlueFin::GlPeEngineCallBacks *, void))&unk_270EC17A0;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      memset(v22, 0, 28);
      int v6 = *((_DWORD *)this + 2);
      int v15 = 0;
      int v16 = v6;
      int v17 = v2;
      char v18 = v4;
      if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
      {
        BlueFin::GlPeLtoSliceInterface::SerializeImpl((uint64_t)&v14, (uint64_t)a2);
        unsigned int v4 = *((unsigned __int8 *)this + 4);
        int v15 = 1;
        if (!v4) {
          return 1;
        }
      }
      else
      {
        int v15 = 1;
      }
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        unsigned int v10 = (long long *)(*((void *)this + 2) + v8);
        if (v10 != &v19)
        {
          long long v19 = *v10;
          long long v11 = v10[1];
          long long v12 = v10[2];
          long long v13 = v10[3];
          *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)v10 + 60);
          long long v21 = v12;
          v22[0] = v13;
          long long v20 = v11;
        }
        if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
        {
          v14[3]((void **)&v14, a2, 0);
          unsigned int v4 = *((unsigned __int8 *)this + 4);
        }
        ++v9;
        v8 += 76;
      }
      while (v9 < v4);
      return 1;
    }
  }
  return 0;
}

uint64_t BlueFin::GlPeLtoSliceInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  int v2 = (_DWORD *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 241, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 241, "ucVersion == 1");
  }
  int v6 = v2;
  if (!v2[4]) {
    return 0;
  }
  uint64_t v7 = v3;
  int v12 = 119;
  char v13 = v5;
  uint64_t v14 = 0x1000000000000;
  long long v11 = &unk_270EBA2F0;
  char v15 = v5;
  int v8 = v2[2];
  if (v8)
  {
    if (v8 == 1)
    {
      for (uint64_t i = 6; i != 25; ++i)
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v11, v6[i]);
      goto LABEL_13;
    }
    return 0;
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, BlueFin::GlImplGnss::m_aucEnabledGnssTable[v2[3]]);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, *((unsigned char *)v6 + 20));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v11, v6[4]);
LABEL_13:
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v11, v7, 4);
  return 1;
}

uint64_t BlueFin::GlPeLtoInfoInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 353, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 353, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v9 = 120;
  char v10 = 1;
  uint64_t v11 = 0x1000000000000;
  int v8 = &unk_270EBA2F0;
  char v12 = 1;
  BlueFin::GlSysLogEntry::PutBuffer((BlueFin::GlSysLogEntry *)&v8, (const unsigned __int8 *)(v2 + 8), 16);
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 24));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeLtoAlmDataInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 399, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 399, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v10 = 121;
  char v11 = 1;
  uint64_t v12 = 0x1000000000000;
  int v9 = &unk_270EBA2F0;
  char v13 = 1;
  uint64_t v7 = (_DWORD *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  switch(*v7)
  {
    case 0:
    case 3:
    case 4:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 12));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 14));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 16));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 18));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 20));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 24));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 28));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 32));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 36));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 40));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 42));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 44));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 46));
      goto LABEL_8;
    case 1:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 12));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, (int)(float)(*(float *)(v6 + 16) * 10.0));
      goto LABEL_8;
    case 2:
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 12));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 14));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 15));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 16));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 20));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 24));
      BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 32));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 28));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 34));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 36));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 38));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 40));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 41));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 42));
      goto LABEL_8;
    case 5:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 12));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 14));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 16));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 18));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 20));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 22));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 24));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 26));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 28));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 30));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 32));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 34));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 35));
LABEL_8:
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v5, 4);
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoUtcDataInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 611, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 611, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v11 = 122;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  int v10 = &unk_270EBA2F0;
  char v14 = 1;
  uint64_t v7 = (int *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  int v8 = *v7;
  if (*v7 == 5) {
    goto LABEL_5;
  }
  if (v8 == 4)
  {
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 28));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 32));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 36));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 37));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 38));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 39));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 40));
    goto LABEL_7;
  }
  if (!v8)
  {
LABEL_5:
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 20));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 21));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 22));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 23));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 24));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 25));
LABEL_7:
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
    return 1;
  }
  return 0;
}

uint64_t BlueFin::GlPeLtoSysTimeDataInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 731, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 731, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v11 = 123;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  int v10 = &unk_270EBA2F0;
  char v14 = 1;
  uint64_t v7 = (int *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  int v8 = *v7;
  if (*v7 == 5)
  {
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 32));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 34));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 36));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 37));
    goto LABEL_8;
  }
  if (v8 == 4)
  {
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 38));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 40));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 42));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 44));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 46));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 48));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 50));
    goto LABEL_8;
  }
  if (v8 == 2)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 14));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 20));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 24));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 25));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 26));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 28));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 30));
LABEL_8:
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
    return 1;
  }
  return 0;
}

uint64_t BlueFin::GlPeLtoIonoDataInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 873, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 873, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v10 = 124;
  char v11 = 1;
  uint64_t v12 = 0x1000000000000;
  int v9 = &unk_270EBA2F0;
  char v13 = 1;
  uint64_t v7 = (_DWORD *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 12));
  if (*v7 == 5)
  {
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 18));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v6 + 20));
    goto LABEL_6;
  }
  if (!*v7)
  {
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 17));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 18));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 19));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 20));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 21));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 22));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 23));
LABEL_6:
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v5, 4);
    return 1;
  }
  return 0;
}

uint64_t BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 986, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 986, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v9 = 125;
  char v10 = 1;
  uint64_t v11 = 0x1000000000000;
  int v8 = &unk_270EBA2F0;
  char v12 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v8, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 12));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 20));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeLtoGnssL5HealthDataInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 1037, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 1037, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v9 = 126;
  char v10 = 1;
  uint64_t v11 = 0x1000000000000;
  int v8 = &unk_270EBA2F0;
  char v12 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v8, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v8, *(unsigned char *)(v6 + 12));
  BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v8, *(unsigned char *)(v6 + 16));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 20));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 22));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeLtoGnssL5HealthInfoInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 1090, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 1090, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  int v8 = 127;
  char v9 = 1;
  uint64_t v10 = 0x1000000000000;
  uint64_t v7 = &unk_270EBA2F0;
  char v11 = 1;
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v7, *(_DWORD *)(v2 + 8));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v7, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeLtoGnssL5HealthInfoInterface::Deserialize(BlueFin::GlPeLtoGnssL5HealthInfoInterface *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 127 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2) {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  }
  return v3;
}

uint64_t BlueFin::GlPeLtoGnssAltNavInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 1135, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 1135, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v11 = 128;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  uint64_t v10 = &unk_270EBA2F0;
  char v14 = 1;
  uint64_t v7 = (_DWORD *)(v2 + 8);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, BlueFin::GlImplGnss::m_aucEnabledGnssTable[*(unsigned int *)(v2 + 8)]);
  uint64_t result = 0;
  switch(*v7)
  {
    case 0:
    case 3:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 12));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 16));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 20));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 24));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 28));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 32));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 34));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 36));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 38));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 40));
      char v9 = (__int16 *)(v6 + 42);
      goto LABEL_6;
    case 4:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 44));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 48));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 52));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 54));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 56));
      char v9 = (__int16 *)(v6 + 58);
      goto LABEL_6;
    case 5:
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 60));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v6 + 64));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 68));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 72));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v6 + 76));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 80));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 82));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v6 + 84));
      char v9 = (__int16 *)(v6 + 86);
LABEL_6:
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *v9);
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(v2 + 8);
  if (v5 != 3 && v5 != 0) {
    return 0;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 1298, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 1298, "ucVersion == 1");
  }
  uint64_t v7 = v3;
  uint64_t v8 = v2;
  int v11 = 129;
  char v12 = 1;
  uint64_t v13 = 0x1000000000000;
  uint64_t v10 = &unk_270EBA2F0;
  char v14 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, BlueFin::GlImplGnss::m_aucEnabledGnssTable[v5]);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v8 + 12));
  BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v8 + 14));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v7, 4);
  return 1;
}

uint64_t BlueFin::GlPeLtoGnssSignalTypeInterface::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(v2 + 8);
  if ((v5 | 4) != 4) {
    return 0;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 1357, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 1357, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  int v14 = 130;
  char v15 = 1;
  uint64_t v16 = 0x1000000000000;
  uint64_t v13 = &unk_270EBA2F0;
  char v17 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, BlueFin::GlImplGnss::m_aucEnabledGnssTable[v5]);
  int v8 = *(_DWORD *)(v7 + 8);
  if (v8 == 4) {
    unsigned int v9 = 63;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v8) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 32;
  }
  if (v10)
  {
    int v11 = (char *)(v7 + 12);
    do
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, *v11++);
      --v10;
    }
    while (v10);
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v13, v6, 4);
  return 1;
}

BlueFin::GlPeLtoSlice *BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoSlices(BlueFin::GlPeLtoFileContentStorageMgr *this, BlueFin::GlPeEngineCallBacks *a2)
{
  int v3 = 0;
  unsigned int v4 = (BlueFin::GlPeLtoFileContentStorageMgr *)((char *)this + 12656);
  uint64_t v5 = (BlueFin::GlPeLtoFileContentStorageMgr *)((char *)this + 9896);
  uint64_t v6 = (BlueFin::GlPeLtoFileContentStorageMgr *)((char *)this + 5080);
  uint64_t v7 = (BlueFin::GlPeLtoFileContentStorageMgr *)((char *)this + 4296);
  int v8 = (BlueFin::GlPeLtoFileContentStorageMgr *)((char *)this + 2448);
  do
  {
    uint64_t result = v8;
    switch(v3)
    {
      case 0:
        goto LABEL_7;
      case 2:
        uint64_t result = v7;
        goto LABEL_7;
      case 3:
        uint64_t result = v6;
        goto LABEL_7;
      case 4:
        uint64_t result = v5;
        goto LABEL_7;
      case 5:
        uint64_t result = v4;
LABEL_7:
        uint64_t result = (BlueFin::GlPeLtoSlice *)BlueFin::GlPeLtoSlice::Serialize(result, a2);
        break;
      default:
        break;
    }
    ++v3;
  }
  while (v3 != 7);
  return result;
}

double BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  switch(a2)
  {
    case 0:
      uint64_t v7 = a1 + 2448;
      if (a5) {
        goto LABEL_9;
      }
      goto LABEL_10;
    case 2:
      uint64_t v8 = 4296;
      goto LABEL_8;
    case 3:
      uint64_t v8 = 5080;
      goto LABEL_8;
    case 4:
      uint64_t v8 = 9896;
      goto LABEL_8;
    case 5:
      uint64_t v8 = 12656;
LABEL_8:
      uint64_t v7 = a1 + v8;
      if (a5)
      {
LABEL_9:
        BlueFin::GlPeLtoSlice::Clear(v7);
        *(_DWORD *)uint64_t v7 = a4;
        *(unsigned char *)(v7 + 4) = 0;
      }
LABEL_10:
      BlueFin::GlPeLtoSvData::GlPeLtoSvData((BlueFin::GlPeLtoSvData *)v10, *(const unsigned int **)(a3 + 16), 4 * *(unsigned __int8 *)(a3 + 9));
      *(void *)&double result = BlueFin::GlPeLtoSlice::UpdateData(v7, (uint64_t)v10).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

__n128 BlueFin::GlPeLtoSlice::UpdateData(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 4);
  if (*(_DWORD *)(a1 + 8) <= 6u && v2 < ((0xE243F0A181320uLL >> (8 * *(_DWORD *)(a1 + 8))) & 0x3F))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    *(unsigned char *)(a1 + 4) = v2 + 1;
    uint64_t v5 = v4 + 76 * v2;
    if (v5 != a2)
    {
      *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v5 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(v5 + 32) = v7;
      *(_OWORD *)(v5 + 48) = v8;
      *(__n128 *)(v5 + 16) = result;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoInfo(BlueFin::GlPeLtoFileContentStorageMgr *this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned int v2 = (long long *)((char *)this + 24795);
  if (*(_OWORD *)((char *)this + 24795) == 0) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 6203);
  if (!v3) {
    return 0;
  }
  long long v6 = 0uLL;
  uint64_t v5 = &unk_270EC17E8;
  if (&v6 != v2) {
    long long v6 = *v2;
  }
  int v7 = v3;
  if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    BlueFin::GlPeLtoInfoInterface::SerializeImpl((uint64_t)&v5, (uint64_t)a2);
  }
  return 1;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoAlm(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = 0;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v29 = this + 12680;
  __int16 v30 = 32;
  int v31 = 0;
  uint64_t v32 = this + 14600;
  __int16 v33 = 10;
  int v34 = 3;
  uint64_t v23 = this;
  uint64_t v35 = this + 14960;
  __int16 v36 = 63;
  int v37 = 4;
  do
  {
    uint64_t v4 = &v29 + 2 * v3;
    unsigned int v5 = *((unsigned __int16 *)v4 + 4);
    if (*((_WORD *)v4 + 4))
    {
      unsigned __int8 v6 = 0;
      uint64_t v9 = *v4;
      uint64_t v8 = (int *)v4 + 3;
      uint64_t v7 = v9;
      do
      {
        uint64_t v10 = (unsigned __int8 *)(v7 + 36 * v6);
        if (*v10 != 255)
        {
          int v11 = *v8;
          int v24 = &unk_270EC14B8;
          int v25 = v11;
          int v12 = *((_DWORD *)v10 + 8);
          long long v13 = *((_OWORD *)v10 + 1);
          long long v26 = *(_OWORD *)v10;
          long long v27 = v13;
          int v28 = v12;
          if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
            this = BlueFin::GlPeLtoAlmDataInterface::SerializeImpl((uint64_t)&v24, (uint64_t)a2);
          }
        }
        ++v6;
      }
      while (v5 > v6);
    }
    ++v3;
  }
  while (v3 != 3);
  uint64_t v14 = 0;
  uint64_t v15 = v23 + 17228;
  do
  {
    uint64_t v16 = (long long *)(v15 + v14);
    if (*(unsigned __int8 *)(v15 + v14) != 255)
    {
      int v24 = &unk_270EC14B8;
      int v25 = 5;
      long long v26 = *v16;
      *(void *)&long long v27 = *((void *)v16 + 2);
      if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        this = BlueFin::GlPeLtoAlmDataInterface::SerializeImpl((uint64_t)&v24, (uint64_t)a2);
      }
    }
    v14 += 24;
  }
  while (v14 != 864);
  uint64_t v17 = v23 + 13834;
  uint64_t v18 = 24;
  do
  {
    if (*(unsigned char *)v17)
    {
      int v24 = &unk_270EC14B8;
      int v25 = 2;
      long long v19 = *(_OWORD *)(v17 + 14);
      long long v26 = *(_OWORD *)(v17 - 2);
      long long v27 = v19;
      if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        this = BlueFin::GlPeLtoAlmDataInterface::SerializeImpl((uint64_t)&v24, (uint64_t)a2);
      }
    }
    v17 += 32;
    --v18;
  }
  while (v18);
  uint64_t v20 = 0;
  uint64_t v21 = v23 + 18092;
  do
  {
    uint64_t v22 = v21 + v20;
    if (*(unsigned __int8 *)(v21 + v20) - 120 <= 0x12)
    {
      int v24 = &unk_270EC14B8;
      int v25 = 1;
      *(void *)&long long v26 = *(void *)v22;
      DWORD2(v26) = *(_DWORD *)(v22 + 8);
      if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        this = BlueFin::GlPeLtoAlmDataInterface::SerializeImpl((uint64_t)&v24, (uint64_t)a2);
      }
    }
    v20 += 12;
  }
  while (v20 != 228);
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoUtc(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = 0;
  unsigned __int8 v15[4] = *MEMORY[0x263EF8340];
  v15[0] = this + 18320;
  v15[1] = 0;
  unsigned __int8 v15[2] = this + 18352;
  unsigned int v5 = (unsigned char *)(this + 24816);
  v15[3] = 0x100000005;
  char v6 = 1;
  do
  {
    char v7 = v6;
    uint64_t v8 = (long long *)v15[2 * v4];
    if (v8)
    {
      uint64_t v9 = &v15[2 * v4];
      if (((unint64_t)*(unsigned int *)v5 >> *((_WORD *)v9 + 6)))
      {
        int v10 = *((_DWORD *)v9 + 2);
        int v11 = (uint64_t (**)(void **, BlueFin::GlPeEngineCallBacks *, void))&unk_270EC1500;
        int v12 = v10;
        v14[0] = 0;
        *(void *)((char *)v14 + 6) = 0;
        long long v13 = *v8;
        if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          this = BlueFin::GlPeLtoUtcDataInterface::SerializeImpl((uint64_t)&v11, (uint64_t)a2);
        }
      }
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
  if ((*v5 & 4) != 0)
  {
    this = BlueFin::GlPeLtoUtcDataInterface::GlPeLtoUtcDataInterface((uint64_t)&v11, v3 + 18336);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return v11[3]((void **)&v11, a2, 0);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoSysTime(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (int *)(this + 24816);
  int v5 = *(_DWORD *)(this + 24816);
  if ((v5 & 0x20) != 0)
  {
    char v7 = (uint64_t (**)(void **, BlueFin::GlPeEngineCallBacks *, void))&unk_270EC1548;
    int v8 = 2;
    memset(v11, 0, 20);
    long long v9 = *(_OWORD *)(this + 18368);
    int v10 = *(_DWORD *)(this + 18384);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      this = BlueFin::GlPeLtoSysTimeDataInterface::SerializeImpl((uint64_t)&v7, (uint64_t)a2);
      int v5 = *v4;
    }
  }
  if ((v5 & 0x10) != 0)
  {
    this = BlueFin::GlPeLtoSysTimeDataInterface::GlPeLtoSysTimeDataInterface((uint64_t)&v7, v3 + 18394);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      this = v7[3]((void **)&v7, a2, 0);
    }
    int v5 = *v4;
  }
  if ((v5 & 8) != 0)
  {
    char v7 = (uint64_t (**)(void **, BlueFin::GlPeEngineCallBacks *, void))&unk_270EC1548;
    int v8 = 5;
    *(void *)((char *)v11 + 6) = 0;
    *(void *)((char *)&v11[1] + 4) = 0;
    long long v9 = 0uLL;
    int v6 = *(_DWORD *)(v3 + 18388);
    int v10 = 0;
    LODWORD(v11[0]) = v6;
    WORD2(v11[0]) = *(_WORD *)(v3 + 18392);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeLtoSysTimeDataInterface::SerializeImpl((uint64_t)&v7, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoIono(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (int *)(this + 18416);
  int v5 = *(_DWORD *)(this + 24816);
  if ((v5 & 0x40) != 0)
  {
    uint64_t v6 = *(void *)(this + 18408);
    int v7 = *v4;
    int v10 = &unk_270EC1590;
    int v11 = 0;
    int v12 = v7;
    uint64_t v13 = v6;
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      this = BlueFin::GlPeLtoIonoDataInterface::SerializeImpl((uint64_t)&v10, (uint64_t)a2);
      int v5 = v4[1600];
    }
  }
  if ((v5 & 0x80) != 0)
  {
    int v8 = *(_DWORD *)(v3 + 18420);
    WORD2(v13) = *(_WORD *)(v3 + 18424);
    int v9 = v4[3];
    int v10 = &unk_270EC1590;
    int v11 = 5;
    int v12 = v9;
    LODWORD(v13) = v8;
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeLtoIonoDataInterface::SerializeImpl((uint64_t)&v10, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssGpsTimeoffs(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (__int16 *)(this + 18432);
  int v5 = *(_DWORD *)(this + 24816);
  if ((v5 & 0x100) != 0)
  {
    uint64_t v6 = &unk_270EC15D8;
    int v7 = 5;
    __int16 v8 = *v4;
    uint64_t v9 = *(void *)(this + 18436);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      this = BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::SerializeImpl((uint64_t)&v6, (uint64_t)a2);
      int v5 = *((_DWORD *)v4 + 1596);
    }
  }
  if ((v5 & 0x200) != 0)
  {
    uint64_t v6 = &unk_270EC15D8;
    int v7 = 3;
    __int16 v8 = v4[6];
    uint64_t v9 = *(void *)(v3 + 18448);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      this = BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::SerializeImpl((uint64_t)&v6, (uint64_t)a2);
      int v5 = *((_DWORD *)v4 + 1596);
    }
  }
  if ((v5 & 0x400) != 0)
  {
    uint64_t v6 = &unk_270EC15D8;
    int v7 = 4;
    __int16 v8 = v4[12];
    uint64_t v9 = *(void *)(v4 + 14);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::SerializeImpl((uint64_t)&v6, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssL5Health(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = 0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  v17[0] = this + 18468;
  v17[1] = 32;
  int v18 = 11;
  uint64_t v19 = this + 18852;
  uint64_t v20 = 0x30000000ALL;
  int v21 = 12;
  uint64_t v22 = this + 18972;
  uint64_t v23 = 0x40000003FLL;
  int v24 = 13;
  uint64_t v25 = this + 19728;
  int v11 = (unsigned int *)(this + 24816);
  int v27 = 14;
  uint64_t v26 = 0x500000024;
  do
  {
    uint64_t v4 = v17[3 * v3];
    if (v4)
    {
      if (((unint64_t)*v11 >> LOWORD(v17[3 * v3 + 2])))
      {
        unsigned int v5 = v17[3 * v3 + 1];
        if (v5)
        {
          unsigned __int16 v6 = 0;
          do
          {
            unsigned int v7 = v6;
            int v8 = *(unsigned __int8 *)(v4 + 12 * v6);
            if (v8 != 255)
            {
              int v9 = *(_DWORD *)(v4 + 12 * v7 + 4);
              if (v9 != -1)
              {
                int v10 = HIDWORD(v17[3 * v3 + 1]);
                int v12 = &unk_270EC1620;
                int v13 = v10;
                char v14 = v8;
                int v15 = v9;
                int v16 = *(_DWORD *)(v4 + 12 * v7 + 8);
                if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
                  this = BlueFin::GlPeLtoGnssL5HealthDataInterface::SerializeImpl((uint64_t)&v12, (uint64_t)a2);
                }
              }
            }
            unsigned __int16 v6 = v7 + 1;
          }
          while (v5 > (unsigned __int16)(v7 + 1));
        }
      }
    }
    ++v3;
  }
  while (v3 != 4);
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssL5HealthInfo(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  if ((*(unsigned char *)(this + 24817) & 0x80) != 0)
  {
    int v2 = *(_DWORD *)(this + 20160);
    uint64_t v3 = &unk_270EC1668;
    int v4 = v2;
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeLtoGnssL5HealthInfoInterface::SerializeImpl((uint64_t)&v3, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssAltNav(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v52 = this + 20164;
  __int16 v53 = 32;
  *(void *)unsigned int v54 = 0x1000000000;
  *(void *)&v54[3] = this + 21316;
  __int16 v55 = 10;
  uint64_t v31 = this;
  __int16 v33 = (unsigned int *)(this + 24816);
  uint64_t v56 = 0x1300000003;
  do
  {
    char v32 = v3;
    unsigned int v5 = &v52 + 3 * v4;
    if (((unint64_t)*v33 >> *((_WORD *)v5 + 8)))
    {
      unsigned __int16 v6 = &v52 + 3 * v4;
      uint64_t v7 = *((unsigned __int16 *)v6 + 4);
      if (*((_WORD *)v6 + 4))
      {
        int v8 = (long long *)*v5;
        int v9 = &v54[6 * v4];
        do
        {
          if (*(unsigned __int8 *)v8 != 255)
          {
            int v10 = *v9;
            int v34 = &unk_270EC16B0;
            int v35 = v10;
            long long v11 = v8[1];
            long long v36 = *v8;
            long long v37 = v11;
            char v38 = -1;
            memset(v39, 0, sizeof(v39));
            v40[0] = -1;
            *(_DWORD *)&v40[4] = -1;
            memset(&v40[8], 0, 20);
            if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              this = BlueFin::GlPeLtoGnssAltNavInterface::SerializeImpl((uint64_t)&v34, (uint64_t)a2);
            }
          }
          v8 += 2;
          --v7;
        }
        while (v7);
      }
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v32 & 1) == 0);
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v47 = v31 + 21188;
  __int16 v48 = 32;
  *(void *)int v49 = 0x1200000000;
  *(void *)&v49[3] = v31 + 21636;
  __int16 v50 = 10;
  uint64_t v51 = 0x1500000003;
  do
  {
    char v14 = v12;
    int v15 = &v47 + 3 * v13;
    if (((unint64_t)*v33 >> *((_WORD *)v15 + 8)))
    {
      int v16 = &v47 + 3 * v13;
      uint64_t v17 = *((unsigned __int16 *)v16 + 4);
      if (*((_WORD *)v16 + 4))
      {
        int v18 = &v49[6 * v13];
        uint64_t v19 = (_WORD *)(*v15 + 2);
        do
        {
          int v20 = *((unsigned __int8 *)v19 - 2);
          if (v20 != 255)
          {
            int v21 = *v18;
            int v34 = &unk_270EC16F8;
            int v35 = v21;
            LOBYTE(v36) = v20;
            WORD1(v36) = *v19;
            if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              this = BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface::SerializeImpl((uint64_t)&v34, (uint64_t)a2);
            }
          }
          v19 += 2;
          --v17;
        }
        while (v17);
      }
    }
    char v12 = 1;
    uint64_t v13 = 1;
  }
  while ((v14 & 1) == 0);
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v41 = v31 + 21676;
  __int16 v42 = 63;
  int v43 = 22;
  uint64_t v44 = v31 + 22684;
  __int16 v45 = 63;
  int v46 = 23;
  do
  {
    char v24 = v22;
    uint64_t v25 = (char **)(&v41 + 2 * v23);
    if (((unint64_t)*v33 >> *((_WORD *)v25 + 6)))
    {
      uint64_t v26 = *((unsigned __int16 *)v25 + 4);
      if (*((_WORD *)v25 + 4))
      {
        int v27 = *v25;
        do
        {
          if (*v27 != 255)
          {
            int v34 = &unk_270EC16B0;
            int v35 = 4;
            LOBYTE(v36) = -1;
            DWORD1(v36) = -1;
            HIDWORD(v37) = 0;
            *((void *)&v36 + 1) = 0;
            *(void *)&long long v37 = 0;
            *(_DWORD *)((char *)&v37 + 7) = 0;
            char v38 = *v27;
            v39[0] = *((_DWORD *)v27 + 1);
            *(void *)&v39[1] = *((void *)v27 + 1);
            v40[0] = -1;
            *(_DWORD *)&v40[4] = -1;
            memset(&v40[8], 0, 20);
            if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
              this = BlueFin::GlPeLtoGnssAltNavInterface::SerializeImpl((uint64_t)&v34, (uint64_t)a2);
            }
          }
          v27 += 16;
          --v26;
        }
        while (v26);
      }
    }
    char v22 = 1;
    uint64_t v23 = 1;
  }
  while ((v24 & 1) == 0);
  if (*((unsigned char *)v33 + 3))
  {
    uint64_t v28 = 0;
    uint64_t v29 = v31 + 23692;
    do
    {
      __int16 v30 = (_OWORD *)(v29 + v28);
      if (*(unsigned __int8 *)(v29 + v28) != 255)
      {
        int v34 = &unk_270EC16B0;
        int v35 = 5;
        LOBYTE(v36) = -1;
        DWORD1(v36) = -1;
        HIDWORD(v37) = 0;
        *((void *)&v36 + 1) = 0;
        *(void *)&long long v37 = 0;
        *(_DWORD *)((char *)&v37 + 7) = 0;
        char v38 = -1;
        memset(v39, 0, sizeof(v39));
        *(_OWORD *)float64x2_t v40 = *v30;
        *(_OWORD *)&v40[12] = *(_OWORD *)((char *)v30 + 12);
        if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          this = BlueFin::GlPeLtoGnssAltNavInterface::SerializeImpl((uint64_t)&v34, (uint64_t)a2);
        }
      }
      v28 += 28;
    }
    while (v28 != 1008);
  }
  return this;
}

uint64_t BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssSignalType(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v16 = 0;
  __int16 v17 = 32;
  uint64_t v18 = this + 24700;
  v19[0] = 26;
  unsigned int v19[2] = 4;
  __int16 v20 = 63;
  unsigned int v5 = (unsigned int *)(this + 24816);
  uint64_t v21 = this + 24732;
  int v22 = 27;
  do
  {
    char v6 = v3;
    if (((unint64_t)*v5 >> LOWORD(v19[6 * v4])))
    {
      uint64_t v7 = &v16 + 6 * v4;
      int v8 = *v7;
      int v9 = (char *)*((void *)v7 + 1);
      uint64_t v10 = *((unsigned __int16 *)v7 + 2);
      uint64_t v13 = &unk_270EC1740;
      int v14 = v8;
      if (v10)
      {
        long long v11 = &v15;
        do
        {
          char v12 = *v9++;
          *(unsigned char *)long long v11 = v12;
          long long v11 = (int *)((char *)v11 + 1);
          --v10;
        }
        while (v10);
      }
      if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        this = BlueFin::GlPeLtoGnssSignalTypeInterface::SerializeImpl((uint64_t)&v13, (uint64_t)a2);
      }
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) == 0);
  return this;
}

uint64_t BlueFin::GlPeLtoMgr::IdentifyBadSv(uint64_t result, unsigned int a2, char a3, int a4)
{
  if ((*(unsigned char *)(result + 1636) & 4) == 0)
  {
    if (a4)
    {
      uint64_t v4 = result + 768;
      char v7 = a3;
      unsigned int v5 = (unsigned __int8 *)&v7;
    }
    else
    {
      uint64_t v4 = result + 576;
      char v6 = a3;
      unsigned int v5 = (unsigned __int8 *)&v6;
    }
    return BlueFin::GlGnssSet::Add(v4, a2, v5);
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::RemoveSvFromBadSet(uint64_t result, unsigned int a2, unsigned __int8 a3, int a4)
{
  if ((*(unsigned char *)(result + 1636) & 4) == 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = result + 576;
    if (a4)
    {
      unsigned __int8 v11 = a3;
      int v8 = &v11;
    }
    else
    {
      unsigned __int8 v10 = a3;
      BlueFin::GlGnssSet::Remove(v7, a2, &v10);
      uint64_t v7 = v6 + 768;
      unsigned __int8 v9 = a3;
      int v8 = &v9;
    }
    return BlueFin::GlGnssSet::Remove(v7, a2, v8);
  }
  return result;
}

__n128 BlueFin::GlPeLtoMgr::UpdateGalUtcModel(uint64_t a1, __n128 *a2, _DWORD *a3)
{
  char v12 = &unk_270EC9528;
  __int16 v14 = 0;
  unsigned int v15 = 0;
  __n128 v16 = *a2;
  int v13 = 3;
  __int16 v14 = (*(unsigned int (**)(_DWORD *))(*(void *)a3 + 32))(a3) / 0x93A80;
  unsigned int v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a3 + 32))(a3);
  LODWORD(v7) = a3[2];
  double v8 = ((double)v7 * 2.32830644e-10 + (double)(v6 % 0x93A80)) * 1000.0;
  double v9 = fmod(v8, 4294967300.0);
  if (v8 <= 4294967300.0) {
    double v9 = v8;
  }
  if (v9 < -4294967300.0) {
    double v9 = -fmod(-v9, 4294967300.0);
  }
  if (v9 < 0.0) {
    unsigned int v10 = --v9;
  }
  else {
    unsigned int v10 = v9;
  }
  unsigned int v15 = v10;
  BlueFin::GlPeTimeManager::SetGalUtcModel(*(BlueFin::GlPeTimeManager **)(a1 + 88), (const BlueFin::GlPeGalUtcModelData *)&v12, 0);
  *(_DWORD *)(a1 + 26464) |= 2u;
  __n128 result = *a2;
  *(__n128 *)(a1 + 20000) = *a2;
  return result;
}

uint64_t BlueFin::GlPeLtoData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (v4 && v4 != 12)
  {
    DeviceFaultNotify("glpe_ltomgr.cpp", 3285, "SerializeImpl", (char)"ucVersion == 12");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.cpp", 3285, "ucVersion == 12");
  }
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v39 = 44;
    char v40 = 12;
    uint64_t v41 = 0x1000000000000;
    char v38 = &unk_270EBA2F0;
    char v42 = 12;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v38, 8);
    uint64_t v7 = 0;
    uint64_t v8 = v6 + 32;
    uint64_t v9 = v6 + 224;
    do
    {
      unsigned int v10 = BlueFin::GlImplGnss::m_aucImplGnssTable[v7];
      int v34 = &v36;
      char v35 = 3;
      uint64_t v36 = 0;
      int v37 = 0;
      if (v7 == 4)
      {
        BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v38, (const BlueFin::GlSetBase *)&v34);
      }
      else
      {
        unsigned __int8 v11 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()(v6 + 32, v10);
        int ULong = BlueFin::GlSetBase::GetULong(v11, 0);
        BlueFin::GlSetBase::SetULong((uint64_t)&v34, 0, ULong);
        int v13 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()(v6 + 32, v10);
        int v14 = BlueFin::GlSetBase::GetULong(v13, 1u);
        BlueFin::GlSetBase::SetULong((uint64_t)&v34, 1u, v14);
        BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v38, (const BlueFin::GlSetBase *)&v34);
        unsigned int v15 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()(v6 + 224, v10);
        int v16 = BlueFin::GlSetBase::GetULong(v15, 0);
        BlueFin::GlSetBase::SetULong((uint64_t)&v34, 0, v16);
        __int16 v17 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()(v6 + 224, v10);
        int v18 = BlueFin::GlSetBase::GetULong(v17, 1u);
        BlueFin::GlSetBase::SetULong((uint64_t)&v34, 1u, v18);
      }
      BlueFin::GlSysLogEntry::PutGlSet((BlueFin::GlSysLogEntry *)&v38, (const BlueFin::GlSetBase *)&v34);
      ++v7;
    }
    while (v7 != 8);
    BlueFin::GlSysLogEntry::PutBuffer((BlueFin::GlSysLogEntry *)&v38, (const unsigned __int8 *)(v6 + 8), 16);
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v38, *(_DWORD *)(v6 + 416));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v38, v5, 4);
    GlCustomLog(13, "LTO_BAD(from Broadcast) {");
    for (uint64_t i = 0; i != 8; ++i)
    {
      if (i != 4)
      {
        unsigned int v20 = BlueFin::GlImplGnss::m_aucImplGnssTable[i];
        uint64_t v21 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()(v8, v20);
        if (BlueFin::GlSetBase::HasAny(v21))
        {
          int v22 = "BDS";
          uint64_t v23 = "GPS";
          switch(v20)
          {
            case 0u:
              break;
            case 1u:
              uint64_t v23 = "SBAS";
              break;
            case 2u:
              uint64_t v23 = "GLNS";
              break;
            case 3u:
              uint64_t v23 = "QZSS";
              break;
            case 4u:
              goto LABEL_18;
            default:
              int v22 = "<->";
              if (i == 7) {
                int v22 = "NIC";
              }
              if (i == 6) {
                int v22 = "GAL";
              }
LABEL_18:
              uint64_t v23 = v22;
              break;
          }
          unsigned __int8 v24 = BlueFin::GlSetBase::GetULong(v21, 1u);
          int v25 = BlueFin::GlSetBase::GetULong(v21, 0);
          GlCustomLog(13, " %s 0x%02x%08x", v23, v24, v25);
        }
      }
    }
    GlCustomLog(13, " }\n");
    GlCustomLog(13, "LTO_BAD(from HighResid) {");
    for (uint64_t j = 0; j != 8; ++j)
    {
      if (j != 4)
      {
        unsigned int v27 = BlueFin::GlImplGnss::m_aucImplGnssTable[j];
        uint64_t v28 = (BlueFin::GlSetBase *)BlueFin::GlGnssSet::operator()(v9, v27);
        if (BlueFin::GlSetBase::HasAny(v28))
        {
          uint64_t v29 = "BDS";
          __int16 v30 = "GPS";
          switch(v27)
          {
            case 0u:
              break;
            case 1u:
              __int16 v30 = "SBAS";
              break;
            case 2u:
              __int16 v30 = "GLNS";
              break;
            case 3u:
              __int16 v30 = "QZSS";
              break;
            case 4u:
              goto LABEL_32;
            default:
              uint64_t v29 = "<->";
              if (j == 7) {
                uint64_t v29 = "NIC";
              }
              if (j == 6) {
                uint64_t v29 = "GAL";
              }
LABEL_32:
              __int16 v30 = v29;
              break;
          }
          unsigned __int8 v31 = BlueFin::GlSetBase::GetULong(v28, 1u);
          int v32 = BlueFin::GlSetBase::GetULong(v28, 0);
          GlCustomLog(13, " %s 0x%02x%08x", v30, v31, v32);
        }
      }
    }
    GlCustomLog(13, " }\n");
  }
  return 1;
}

uint64_t BlueFin::GlPeLtoMgr::PrepareDataToSerialize(BlueFin::GlPeLtoMgr *this, BlueFin::GlPeLtoData *a2)
{
  BlueFin::GlGnssSet::operator=((uint64_t)a2 + 32, (uint64_t)this + 576);
  uint64_t result = BlueFin::GlGnssSet::operator=((uint64_t)a2 + 224, (uint64_t)this + 768);
  int v5 = *((_DWORD *)this + 409);
  if (v5)
  {
    for (uint64_t i = 0; i != 168; i += 24)
      uint64_t result = BlueFin::GlSetBase::operator|=(*((void *)a2 + 25) + i, *((void *)this + 41) + i);
    int v5 = *((_DWORD *)this + 409);
  }
  if ((v5 & 2) != 0)
  {
    for (uint64_t j = 0; j != 168; j += 24)
      uint64_t result = BlueFin::GlSetBase::operator|=(*((void *)a2 + 49) + j, *((void *)this + 65) + j);
  }
  if ((char *)a2 + 8 != (char *)this + 1600) {
    *(_OWORD *)((char *)a2 + 8) = *((_OWORD *)this + 100);
  }
  *((_DWORD *)a2 + 104) = *((_DWORD *)this + 136);
  return result;
}

BlueFin::GlPeLtoMgr *BlueFin::GlPeLtoMgr::Serialize(BlueFin::GlPeLtoMgr *this, BlueFin::GlPeEngineCallBacks *a2)
{
  if (*((_OWORD *)this + 100) != 0)
  {
    uint64_t v3 = this;
    BlueFin::GlPeLtoData::GlPeLtoData((uint64_t)&v4);
    this = (BlueFin::GlPeLtoMgr *)BlueFin::GlPeLtoMgr::PrepareDataToSerialize(v3, (BlueFin::GlPeLtoData *)&v4);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (BlueFin::GlPeLtoMgr *)(*(uint64_t (**)(uint64_t *, BlueFin::GlPeEngineCallBacks *, void))(v4 + 24))(&v4, a2, 0);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateEphemeris(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 7360);
  BlueFin::GlPeSbasEphemeris::GlPeSbasEphemeris((uint64_t)&v7, (uint64_t)a2, 1);
  (*(void (**)(uint64_t, int *, void))(*(void *)v4 + 376))(v4, &v7, 0);
  char v5 = *a2 + 1;
  int v7 = 1;
  char v8 = v5;
  return BlueFin::GlGnssSet::Add(a1 + 1216, &v7);
}

uint64_t BlueFin::GlPeLtoMgr::ApplyExperimentalSettings(uint64_t this, unsigned int (*a2)[4])
{
  unsigned int v2 = (*a2)[0];
  if (((*a2)[0] & 2) != 0)
  {
    *(unsigned char *)(*(void *)(this + 96) + 92326) = 1;
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(*(void *)(this + 96) + 92327) = 1;
  if ((v2 & 8) == 0)
  {
LABEL_4:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_9:
    *(unsigned char *)(*(void *)(this + 80) + 120020) = 0;
    return this;
  }
LABEL_8:
  *(unsigned char *)(*(void *)(this + 80) + 120019) = 1;
  if ((v2 & 0x20) != 0) {
    goto LABEL_9;
  }
  return this;
}

uint64_t BlueFin::GlPeLtoMgr::GetLtoFileAgeS(BlueFin::GlPeLtoMgr *this, unsigned int a2, int *a3)
{
  uint64_t v4 = (unsigned int *)*((void *)this + 11);
  if (!v4[644] || !*((_DWORD *)this + 410)) {
    return 0;
  }
  uint64_t v6 = 1;
  BlueFin::GlPeTimeManager::GetTime(v4, a2, 1, (uint64_t)v10);
  unsigned __int8 v11 = &off_270EBC600;
  uint64_t v12 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v10, (BlueFin::GlGpsTime *)&v11);
  unsigned int v7 = ((uint64_t (*)(void))v11[4])(&v11);
  LODWORD(v8) = v12;
  *a3 = (int)((double)v8 * 2.32830644e-10 + (double)v7) - *((_DWORD *)this + 410);
  return v6;
}

uint64_t BlueFin::GlPeLtoMgr::IdentifyBadLtoSvId(uint64_t a1, unsigned __int8 *a2, int a3)
{
  char v5 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 80) + 119744);
  unsigned int v10 = 7;
  unsigned __int8 v11 = 0;
  uint64_t result = BlueFin::GlPeSvIdConverter::SvId2Gnss(v5, a2, (uint64_t)&v10);
  int v7 = v11;
  if (v11 - 1 <= 0x3E)
  {
    unsigned int v8 = v10;
    BlueFin::GlPeLtoMgr::IdentifyBadSv(a1, v10, v11, a3);
    GlCustomLog(14, "Bad LTO for sv (%d,%d). LTO id=0x", v8, v7);
    for (uint64_t i = 0; i != 16; ++i)
      GlCustomLog(14, "%02x", *(unsigned __int8 *)(a1 + 1600 + i));
    return GlCustomLog(14, "\n");
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateNonL1ClkErrTgd(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 a4, int a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v6 = a3;
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(result + 112);
    if (a5) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = 32;
    }
    long long v10 = *(_OWORD *)(v8 + 1024);
    v43[0] = *(_OWORD *)(v8 + 1008);
    v43[1] = v10;
    int v11 = *(unsigned __int8 *)(v8 + 924);
    uint64_t v27 = result + 1648;
    uint64_t v28 = off_270EC1848;
    do
    {
      if (*v6 <= 0x1Fu && *((_DWORD *)v6 + 1) == 1)
      {
        char v38 = &unk_270EC1830;
        int v39 = 1;
        long long v12 = *((_OWORD *)v6 + 1);
        long long v41 = *(_OWORD *)v6;
        long long v42 = v12;
        unsigned __int8 v40 = a4;
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          uint64_t result = ((uint64_t (*)(void **, void, void))v28)(&v38, 0, 0);
        }
        if (v11 && *((unsigned char *)v43 + *v6) == 3)
        {
          if ((a4 & 1) == 0) {
            BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(v27, 0, v6);
          }
          int v13 = *((unsigned __int16 *)v6 + 15);
          int v14 = 300 * *((unsigned __int16 *)v6 + 10);
          int v34 = &off_270EBC600;
          double v15 = fmod((double)v14, 1.0);
          if (v15 < 0.0 || v15 >= 1.0)
          {
            DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
          }
          double v17 = v15 * 4294967300.0 + 0.5;
          unsigned int v18 = v17;
          if (v17 >= 4294967300.0) {
            unsigned int v18 = -1;
          }
          unsigned __int32 v35 = v18;
          int v36 = v14 + 604800 * v13;
          int v34 = &off_270EBC600;
          uint64_t result = *(void *)(v7 + 88);
          if (!*(_DWORD *)(result + 2576)) {
            goto LABEL_30;
          }
          BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)result, 1, &v29);
          int v32 = &off_270EBC600;
          unint64_t v33 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v29, (BlueFin::GlGpsTime *)&v32);
          unsigned int v19 = ((uint64_t (*)(void))v34[4])(&v34);
          v29.n128_u64[0] = __PAIR64__(v19, v35);
          unsigned int v20 = ((uint64_t (*)(void))v32[4])(&v32);
          v37[0] = v33;
          v37[1] = v20;
          BlueFin::GlTimePoint::resolveAmbiguity((unsigned int *)&v29, v37, 0x24EA0000u);
          uint64_t result = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v32[3])(&v32, v29.n128_u32[1]);
          unsigned __int32 v35 = v29.n128_u32[0];
          int v36 = result;
          unsigned int v21 = v33;
          unsigned int v22 = HIDWORD(v33);
          char v23 = result | v29.n128_u8[0];
          if (result | v29.n128_u32[0])
          {
            if (v33 < __PAIR64__(result, v29.n128_u32[0]))
            {
              unsigned int v22 = (__PAIR64__((int)result - HIDWORD(v33), v29.n128_u32[0]) - v33) >> 32;
              unsigned int v21 = v29.n128_u32[0] - v33;
              char v23 = 1;
            }
            else
            {
              char v23 = 0;
              unsigned int v22 = (v33 - __PAIR64__(result, v29.n128_u32[0])) >> 32;
              unsigned int v21 = v33 - v29.n128_u32[0];
            }
          }
          double v24 = (double)v21 * 2.32830644e-10 + (double)v22;
          if ((v23 & ((v22 | v21) != 0)) != 0) {
            double v24 = -v24;
          }
          if (v24 <= 604800.0)
          {
LABEL_30:
            long long v25 = *((_OWORD *)v6 + 1);
            __n128 v29 = *(__n128 *)v6;
            long long v30 = v25;
            __int16 v31 = a4;
            if (v29.n128_u8[0] <= 0x1FuLL)
            {
              uint64_t v26 = *(void *)(v7 + 80) + 36 * v29.n128_u8[0] + 6016;
              uint64_t result = BlueFin::GlPeGpsQzssAltNavData::IsBetterThan((unsigned __int8 *)&v29, (unsigned __int8 *)v26);
              if (result)
              {
                *(__n128 *)uint64_t v26 = v29;
                *(_OWORD *)(v26 + 16) = v30;
                *(_WORD *)(v26 + 32) = v31;
              }
            }
          }
        }
      }
      v6 += 32;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateGnssGpsTimeOffsetsJavd(uint64_t a1, __int16 *a2, char a3)
{
  uint64_t v6 = *(_DWORD **)(a1 + 88);
  uint64_t v9 = 0x400000000;
  __int16 v10 = *a2;
  uint64_t v11 = *(void *)(a2 + 2);
  uint64_t result = BlueFin::GlPeTimeManager::SetUncmprsdSystemOffset(v6, (int *)&v9);
  if ((a3 & 1) == 0)
  {
    int v8 = *((_DWORD *)a2 + 2);
    *(void *)(a1 + 20104) = *(void *)a2;
    *(_DWORD *)(a1 + 20112) = v8;
    *(_DWORD *)(a1 + 26464) |= 0x400u;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::UpdateGalIonoModel(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  char v4 = a4;
  int v8 = "LTO";
  if (a4) {
    int v8 = "RTO";
  }
  GlCustomLog(15, "GAL IONO(%s): ", v8);
  uint64_t result = GlCustomLog(15, "%d, %d, %d\n", *a2, (__int16)a2[1], (__int16)a2[2]);
  if ((v4 & 1) == 0)
  {
    int v10 = *(_DWORD *)a2;
    *(_WORD *)(a1 + 20072) = a2[2];
    *(_DWORD *)(a1 + 20068) = v10;
    *(_DWORD *)(a1 + 20076) = a3;
    *(_DWORD *)(a1 + 26464) |= 0x80u;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoMgr::SerializeLto(BlueFin::GlPeLtoMgr *this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = (BlueFin::GlPeLtoMgr *)((char *)this + 1648);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoInfo((BlueFin::GlPeLtoMgr *)((char *)this + 1648), a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoSlices(v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoAlm((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoUtc((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoSysTime((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoIono((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssGpsTimeoffs((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssL5Health((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssL5HealthInfo((uint64_t)v3, a2);
  BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssAltNav((uint64_t)v3, a2);

  return BlueFin::GlPeLtoFileContentStorageMgr::SerializeLtoGnssSignalType((uint64_t)v3, a2);
}

uint64_t BlueFin::GlPeLtoMgr::UpdateLtoToStore(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  double updated = BlueFin::GlPeLtoFileContentStorageMgr::UpdateLtoToStore(a1 + 1648, a2, (uint64_t)a3, *(_DWORD *)(a1 + 4 * a2 + 960), a4);
  int v7 = a3[8] >> 4;
  (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *, double))(*(void *)a3 + 136))(&v10, a3, updated);
  int v9 = v7;
  return BlueFin::GlGnssSet::Remove(a1 + 26496, (uint64_t)&v9);
}

double BlueFin::GlPeLtoMgr::StartLtoContentToStore(BlueFin::GlPeLtoMgr *this, int a2)
{
  char v4 = (int *)v6;
  char v5 = 3;
  if (a2)
  {
    *(void *)&v6[4] = 0;
    *(_DWORD *)uint64_t v6 = 12;
  }
  else
  {
    memset(v6, 255, sizeof(v6));
    BlueFin::GlSetBase::Remove((uint64_t)&v4, 0);
  }
  return BlueFin::GlPeLtoFileContentStorageMgr::Clear((uint64_t)this + 1648, &v4);
}

void BlueFin::GlPeLtoAlmDataInterface::~GlPeLtoAlmDataInterface(BlueFin::GlPeLtoAlmDataInterface *this)
{
}

void BlueFin::GlPeLtoUtcDataInterface::~GlPeLtoUtcDataInterface(BlueFin::GlPeLtoUtcDataInterface *this)
{
}

void BlueFin::GlPeLtoSysTimeDataInterface::~GlPeLtoSysTimeDataInterface(BlueFin::GlPeLtoSysTimeDataInterface *this)
{
}

void BlueFin::GlPeLtoIonoDataInterface::~GlPeLtoIonoDataInterface(BlueFin::GlPeLtoIonoDataInterface *this)
{
}

void BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface::~GlPeLtoGnssGpsTimeoffsDataInterface(BlueFin::GlPeLtoGnssGpsTimeoffsDataInterface *this)
{
}

void BlueFin::GlPeLtoGnssL5HealthDataInterface::~GlPeLtoGnssL5HealthDataInterface(BlueFin::GlPeLtoGnssL5HealthDataInterface *this)
{
}

void BlueFin::GlPeLtoGnssL5HealthInfoInterface::~GlPeLtoGnssL5HealthInfoInterface(BlueFin::GlPeLtoGnssL5HealthInfoInterface *this)
{
}

void BlueFin::GlPeLtoGnssAltNavInterface::~GlPeLtoGnssAltNavInterface(BlueFin::GlPeLtoGnssAltNavInterface *this)
{
}

void BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface::~GlPeLtoGpsQzsL1CaIscAltNavInterface(BlueFin::GlPeLtoGpsQzsL1CaIscAltNavInterface *this)
{
}

void BlueFin::GlPeLtoGnssSignalTypeInterface::~GlPeLtoGnssSignalTypeInterface(BlueFin::GlPeLtoGnssSignalTypeInterface *this)
{
}

void BlueFin::GlPeLtoData::~GlPeLtoData(BlueFin::GlPeLtoData *this)
{
}

void BlueFin::GlPeLtoSliceInterface::~GlPeLtoSliceInterface(BlueFin::GlPeLtoSliceInterface *this)
{
}

void BlueFin::GlPeLtoInfoInterface::~GlPeLtoInfoInterface(BlueFin::GlPeLtoInfoInterface *this)
{
}

void *BlueFin::GlPeLtoSvData::GlPeLtoSvData(BlueFin::GlPeLtoSvData *this, const unsigned int *a2, size_t __n)
{
  if (__n >= 0x4D)
  {
    DeviceFaultNotify("glpe_ltomgr.h", 86, "GlPeLtoSvData", (char)"ulSizeByte <= sizeof(m_aulWords)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltomgr.h", 86, "ulSizeByte <= sizeof(m_aulWords)");
  }
  return memcpy(this, a2, __n);
}

uint64_t BlueFin::GlPeLtoUtcDataInterface::GlPeLtoUtcDataInterface(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270EC1500;
  *(_DWORD *)(result + 8) = 4;
  *(void *)(result + 12) = 0;
  *(void *)(result + 20) = 0;
  *(void *)(result + 34) = 0;
  *(void *)(result + 28) = 0;
  if (result + 28 != a2)
  {
    *(void *)(result + 28) = *(void *)a2;
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 8);
  }
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 12);
  return result;
}

uint64_t BlueFin::GlPeLtoSysTimeDataInterface::GlPeLtoSysTimeDataInterface(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_270EC1548;
  *(_DWORD *)(result + 8) = 4;
  *(_OWORD *)(result + 12) = 0u;
  *(_OWORD *)(result + 28) = 0u;
  *(void *)(result + 44) = 0;
  if (result + 38 != a2)
  {
    *(void *)(result + 38) = *(void *)a2;
    *(_DWORD *)(result + 46) = *(_DWORD *)(a2 + 8);
  }
  *(_WORD *)(result + 50) = *(_WORD *)(a2 + 12);
  return result;
}

uint64_t BlueFin::GlPeGnssTgdIscData::Deserialize(BlueFin::GlPeGnssTgdIscData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 115) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 > 2) {
    return 0;
  }
  if (v3 == 2) {
    *((unsigned char *)this + 12) = BlueFin::GlSysLogEntry::GetU8(a2) != 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 2) = U8;
  switch(U8)
  {
    case 1:
    case 3:
      *((unsigned char *)this + 13) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_DWORD *)((char *)this + 17) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_DWORD *)((char *)this + 21) = BlueFin::GlSysLogEntry::GetS32(a2);
      *(_DWORD *)((char *)this + 25) = BlueFin::GlSysLogEntry::GetS32(a2);
      *(_DWORD *)((char *)this + 29) = BlueFin::GlSysLogEntry::GetS32(a2);
      *(_WORD *)((char *)this + 33) = BlueFin::GlSysLogEntry::GetU16(a2);
      *(_WORD *)((char *)this + 35) = BlueFin::GlSysLogEntry::GetS16(a2);
      *(_WORD *)((char *)this + 37) = BlueFin::GlSysLogEntry::GetS16(a2);
      *((unsigned char *)this + 39) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_WORD *)((char *)this + 41) = BlueFin::GlSysLogEntry::GetS16(a2);
      *(_WORD *)((char *)this + 43) = BlueFin::GlSysLogEntry::GetU16(a2);
      break;
    case 2:
    case 4:
      *((unsigned char *)this + 13) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_WORD *)((char *)this + 15) = BlueFin::GlSysLogEntry::GetS16(a2);
      break;
    case 5:
      *((unsigned char *)this + 13) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_DWORD *)((char *)this + 17) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_DWORD *)((char *)this + 21) = BlueFin::GlSysLogEntry::GetS32(a2);
      *(_DWORD *)((char *)this + 25) = BlueFin::GlSysLogEntry::GetS32(a2);
      *(_DWORD *)((char *)this + 29) = BlueFin::GlSysLogEntry::GetS32(a2);
      *(_WORD *)((char *)this + 33) = BlueFin::GlSysLogEntry::GetU16(a2);
      *(_WORD *)((char *)this + 35) = BlueFin::GlSysLogEntry::GetS16(a2);
      *(_WORD *)((char *)this + 37) = BlueFin::GlSysLogEntry::GetS16(a2);
      *(_WORD *)((char *)this + 39) = BlueFin::GlSysLogEntry::GetU16(a2);
      break;
    case 6:
      *((unsigned char *)this + 13) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_DWORD *)((char *)this + 17) = BlueFin::GlSysLogEntry::GetU8(a2);
      *(_WORD *)((char *)this + 21) = BlueFin::GlSysLogEntry::GetU16(a2);
      *(_WORD *)((char *)this + 23) = BlueFin::GlSysLogEntry::GetS16(a2);
      *(_WORD *)((char *)this + 25) = BlueFin::GlSysLogEntry::GetS16(a2);
      *(_WORD *)((char *)this + 27) = BlueFin::GlSysLogEntry::GetU16(a2);
      break;
    default:
      DeviceFaultNotify("glpe_ltoreader.cpp", 534, "Deserialize", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltoreader.cpp", 534, "false");
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 538);
  return 1;
}

uint64_t BlueFin::GlPeGnssTgdIscData::SerializeImpl()
{
  uint64_t v0 = MEMORY[0x270FA5388]();
  uint64_t v11 = *MEMORY[0x263EF8340];
  if ((v2 & 0xFFFFFFFD) != 0)
  {
    DeviceFaultNotify("glpe_ltoreader.cpp", 549, "SerializeImpl", (char)"ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltoreader.cpp", 549, "ucVersion == 2");
  }
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  if (v1 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v7 = 115;
    char v8 = 2;
    uint64_t v9 = 0x1000000000000;
    uint64_t v6 = &unk_270EBA2F0;
    char v10 = 2;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v0 + 12));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 8));
    switch(*(_DWORD *)(v4 + 8))
    {
      case 1:
      case 3:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 13));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 17));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v6, *(_DWORD *)(v4 + 21));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v6, *(_DWORD *)(v4 + 25));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v6, *(_DWORD *)(v4 + 29));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 33));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 35));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 37));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 39));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 41));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 43));
        break;
      case 2:
      case 4:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 13));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 15));
        break;
      case 5:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 13));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 17));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v6, *(_DWORD *)(v4 + 21));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v6, *(_DWORD *)(v4 + 25));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v6, *(_DWORD *)(v4 + 29));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 33));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 35));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 37));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 39));
        break;
      case 6:
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 13));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v6, *(unsigned char *)(v4 + 17));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 21));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 23));
        BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 25));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v6, *(_WORD *)(v4 + 27));
        break;
      default:
        DeviceFaultNotify("glpe_ltoreader.cpp", 619, "SerializeImpl", (char)"false");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_ltoreader.cpp", 619, "false");
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v6, v3, 4);
  }
  return 1;
}

_DWORD *BlueFin::GlPeLtoReaderBase::eph_element_array_to_structure(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)a2 = *result;
  *(_DWORD *)(a2 + 4) = result[1];
  *(_DWORD *)(a2 + 8) = result[2];
  *(_DWORD *)(a2 + 12) = result[3];
  *(_DWORD *)(a2 + 16) = result[4];
  *(_DWORD *)(a2 + 20) = result[5];
  *(_DWORD *)(a2 + 24) = result[6];
  *(_DWORD *)(a2 + 28) = result[7];
  *(_DWORD *)(a2 + 32) = result[8];
  *(_DWORD *)(a2 + 36) = result[9];
  *(_DWORD *)(a2 + 40) = result[10];
  *(_DWORD *)(a2 + 44) = result[11];
  *(_DWORD *)(a2 + 48) = result[12];
  *(_DWORD *)(a2 + 52) = result[13];
  *(_DWORD *)(a2 + 56) = result[14];
  *(_DWORD *)(a2 + 60) = result[15];
  *(_DWORD *)(a2 + 64) = result[16];
  *(_DWORD *)(a2 + 68) = result[17];
  *(_DWORD *)(a2 + 72) = result[18];
  *(_DWORD *)(a2 + 76) = result[19];
  *(_DWORD *)(a2 + 80) = result[20];
  *(_DWORD *)(a2 + 84) = result[21];
  *(_DWORD *)(a2 + 88) = result[22];
  *(_DWORD *)(a2 + 92) = result[23];
  *(_DWORD *)(a2 + 96) = result[24];
  *(_DWORD *)(a2 + 100) = result[25];
  *(_DWORD *)(a2 + 104) = result[26];
  *(_DWORD *)(a2 + 108) = result[27];
  *(_DWORD *)(a2 + 112) = result[28];
  *(_DWORD *)(a2 + 116) = result[29];
  *(_DWORD *)(a2 + 120) = result[30];
  *(_DWORD *)(a2 + 124) = result[31];
  *(_DWORD *)(a2 + 128) = result[32];
  *(_DWORD *)(a2 + 132) = result[33];
  *(_DWORD *)(a2 + 136) = result[34];
  *(_WORD *)(a2 + 140) = result[35];
  return result;
}

uint64_t BlueFin::GlPeLtoReaderBase::getLtoUncmprsdEphBuffer(void *a1, unsigned int a2, unsigned __int8 a3)
{
  uint64_t result = 0;
  if (a3 && a2 <= 6)
  {
    if (((0xE243F0A181320uLL >> (8 * a2)) & 0x3F) >= a3)
    {
      uint64_t result = 0;
      switch(a2)
      {
        case 0u:
          uint64_t v5 = a1[1275];
          goto LABEL_11;
        case 2u:
          uint64_t v5 = a1[1279];
          goto LABEL_11;
        case 3u:
          uint64_t v5 = a1[1282];
          goto LABEL_11;
        case 4u:
          uint64_t v5 = a1[1290];
          goto LABEL_11;
        case 5u:
          uint64_t v5 = a1[1297];
LABEL_11:
          if (v5) {
            uint64_t result = v5 + 144 * (a3 - 1);
          }
          else {
            uint64_t result = 0;
          }
          break;
        default:
          return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL BlueFin::GlPeLtoReaderBase::IsLtoEphEnabledAndRequested(BlueFin::GlPeLtoReaderBase *this)
{
  uint64_t v1 = *((int *)this + 3);
  return v1 <= 7
      && ((0xEFu >> v1) & 1) != 0
      && BlueFin::GlPeLtoReaderBase::getLtoUncmprsdEphBuffer(this, dword_263BB9064[v1], 1u) != 0;
}

uint64_t BlueFin::GlPeLtoReaderBase::parseNavModelSat(uint64_t a1, unsigned __int8 *a2, BlueFin::GlPeBitReader *this)
{
  uint64_t v6 = 0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  do
  {
    unsigned int v7 = BlueFin::GlPeLtoReaderBase::ephemeris_elements[v6 * 4];
    int v8 = BlueFin::GlPeBitReader::uint(this, v7 >> 1);
    int v9 = v8 << -(char)(v7 >> 1) >> -(char)(v7 >> 1);
    if ((v7 & 1) == 0) {
      int v9 = v8;
    }
    v27[v6++ - 1] = v9;
  }
  while (v6 != 36);
  BlueFin::GlPeLtoReaderBase::eph_element_array_to_structure(&v26, (uint64_t)a2);
  int v10 = *(_DWORD *)(a1 + 9764);
  if (v10 != 2)
  {
    if (v10 == 3)
    {
      if (*(_DWORD *)(a1 + 12) == 5) {
        goto LABEL_13;
      }
    }
    else if (v10 == 4 && *(_DWORD *)(a1 + 12) == 6)
    {
      goto LABEL_13;
    }
    if (*((_DWORD *)this + 5) != 32) {
      *((_DWORD *)this + 5) = 0;
    }
  }
LABEL_13:
  uint64_t v11 = *(int *)(a1 + 12);
  if (v11 > 7) {
    return 2;
  }
  if (((0xEFu >> v11) & 1) == 0) {
    return 2;
  }
  unsigned __int8 v12 = *a2 + 1;
  if (((*a2 + 1) & 0x100) != 0) {
    return 2;
  }
  unsigned int v13 = dword_263BB9064[v11];
  if (((0xE243F0A181320uLL >> (8 * v13)) & 0x3F) < v12) {
    return 2;
  }
  uint64_t v15 = *(void *)(a1 + 10776);
  if (v15)
  {
    int v16 = (const void **)BlueFin::GlGnssSet::operator()(v15 + 1024, v13);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v26, v27, 2u, v16);
    uint64_t v17 = 1 << (v12 & 0x1F);
    if ((v17 & *(_DWORD *)(v26 + 4 * (v12 >> 5))) != 0) {
      return 3;
    }
    BlueFin::GlPeLtoMgr::GetBadSvSet(*(void *)(a1 + 10776), v13, 0, (unsigned int *)v25);
    if ((v17 & *(_DWORD *)(v25[0] + 4 * (v12 >> 5))) != 0
      || !BlueFin::GlAidMask::AllowSV(*(void *)(a1 + 10776), v13, v12))
    {
      return 3;
    }
  }
  uint64_t result = BlueFin::GlPeLtoReaderBase::getLtoUncmprsdEphBuffer((void *)a1, v13, v12);
  if (result)
  {
    if (v13 == 5)
    {
      if (*(_DWORD *)(a1 + 9764) < 4u)
      {
LABEL_32:
        *(_OWORD *)uint64_t result = *(_OWORD *)a2;
        long long v19 = *((_OWORD *)a2 + 1);
        long long v20 = *((_OWORD *)a2 + 2);
        long long v21 = *((_OWORD *)a2 + 4);
        *(_OWORD *)(result + 48) = *((_OWORD *)a2 + 3);
        *(_OWORD *)(result + 64) = v21;
        *(_OWORD *)(result + 16) = v19;
        *(_OWORD *)(result + 32) = v20;
        long long v22 = *((_OWORD *)a2 + 5);
        long long v23 = *((_OWORD *)a2 + 6);
        long long v24 = *((_OWORD *)a2 + 8);
        *(_OWORD *)(result + 112) = *((_OWORD *)a2 + 7);
        *(_OWORD *)(result + 128) = v24;
        *(_OWORD *)(result + 80) = v22;
        *(_OWORD *)(result + 96) = v23;
        return 1;
      }
      int v18 = 4;
    }
    else
    {
      if (v13 != 4 || *(_DWORD *)(a1 + 9764) <= 2u) {
        goto LABEL_32;
      }
      int v18 = 2;
    }
    *((_DWORD *)a2 + 1) |= v18;
    goto LABEL_32;
  }
  return result;
}

uint64_t BlueFin::GlPeLtoReaderBase::readDynamicRange(BlueFin::GlPeBitReader *this, _WORD *a2, int a3)
{
  uint64_t v3 = a2;
  if (*((_DWORD *)this + 5) != 32) {
    *((_DWORD *)this + 5) = 0;
  }
  unint64_t v5 = (unint64_t)&a2[2 * a3];
  do
  {
    *uint64_t v3 = *v3 & 0xFFFE | BlueFin::GlPeBitReader::uint(this, 1u) & 1;
    *uint64_t v3 = (2 * (BlueFin::GlPeBitReader::uint(this, 1u) & 1)) | *v3 & 0xFFFD;
    *uint64_t v3 = (4 * (BlueFin::GlPeBitReader::uint(this, 1u) & 1)) | *v3 & 0xFFFB;
    uint64_t result = BlueFin::GlPeBitReader::uint(this, 5u);
    *uint64_t v3 = (8 * result + 8) & ((__int16)(*v3 << 15) >> 15) & 0x1F8 | *v3 & 0xFE07;
    v3 += 2;
  }
  while ((unint64_t)v3 < v5);
  return result;
}

uint64_t BlueFin::GlPeLtoReaderBase::uncompress_field(uint64_t result, BlueFin::GlPeBitReader *this, int *a3)
{
  if (result)
  {
    char v5 = result;
    unsigned int v6 = ((unsigned __int16)result >> 3) & 0x3F;
    uint64_t result = BlueFin::GlPeBitReader::uint(this, v6);
    int v4 = (int)(result << -(char)v6) >> -(char)v6;
    if ((v5 & 4) == 0) {
      int v4 = result;
    }
  }
  else
  {
    int v4 = 0;
  }
  *a3 = v4;
  return result;
}

uint64_t BlueFin::GlPeLtoReaderBase::reportError(BlueFin::GlPeLtoReaderBase *this, int a2, const char *a3)
{
  GlCustomLog(11, "%s error code %d.%d (%s)\n", "LTO", *((_DWORD *)this + 2), a2, "internal");
  uint64_t v4 = *((void *)this + 1346);

  return BlueFin::GlSetBase::Remove(v4, 11);
}

uint64_t BlueFin::GlPeLtoReader::CheckExpiration(BlueFin::GlPeLtoReader *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(v2 + 10776);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = v2;
  unsigned int v5 = *(_DWORD *)(v2 + 11176);
  if (v5 == *(_DWORD *)(v3 + 544)) {
    return 1;
  }
  uint64_t v6 = 1;
  if (v5 < *(_DWORD *)(v2 + 9800))
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    v24[0] = xmmword_263BAC4B0;
    v24[1] = xmmword_263BAC4C0;
    unsigned int v24[2] = xmmword_263BB8E40;
    _DWORD v24[3] = xmmword_263BB8E50;
    memset(&v21[1], 0, 32);
    v21[0] = xmmword_263BB8E60;
    uint64_t v23 = 0x100000020;
    uint64_t v22 = 0;
    do
    {
      if ((*(_DWORD *)(v4 + 11184) & (1 << v8)) != 0) {
        v9 |= *((_DWORD *)v21 + v8);
      }
      if ((*(_DWORD *)(v4 + 11180) & (1 << v8)) != 0)
      {
        uint64_t v10 = *((_DWORD *)v24 + v8) | v10;
        switch((int)v8)
        {
          case 0:
            uint64_t v11 = *(void *)(v4 + 11200);
            *(void *)(v11 + 96) = 0xFFFFFFFF00000000;
            *(unsigned char *)(v11 + 192) = 0;
            *(void *)(v11 + 240) = 0xFFFFFFFF00000000;
            *(unsigned char *)(v11 + 336) = 0;
            BlueFin::GlPeKF::ClearInitPos(*(void *)(v11 + 344), 1);
            break;
          case 1:
            for (int i = 0; i != 7; ++i)
            {
              Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(v4 + 11200) + 384), i);
              if (Mgr) {
                (*(void (**)(void *))(*Mgr + 56))(Mgr);
              }
            }
            break;
          case 2:
            int v14 = *(BlueFin::GlPeTimeManager **)(v4 + 11208);
            *((_DWORD *)v14 + 646) = 0;
            BlueFin::GlPeTimeManager::updateConversionTable(v14);
            break;
          case 3:
          case 6:
            BlueFin::GlPeAlmMgr::Clear((BlueFin::GlPeAlmMgr *)(*(void *)(v4 + 11200) + 34112));
            break;
          case 4:
            uint64_t v15 = *(void *)(v4 + 11272);
            *(_WORD *)(v15 + 2) = 0;
            *(_WORD *)(v15 + 10) = *(_WORD *)(v15 + 12);
            *(unsigned char *)(v15 + 14) = 0;
            *(unsigned char *)uint64_t v15 = 0;
            *(_DWORD *)(v15 + 40) = -7200001;
            *(_WORD *)(v15 + 24) = 0;
            *(_DWORD *)(v15 + 28) = 0;
            *(unsigned char *)(v15 + 49) = 0;
            break;
          case 5:
            BlueFin::GlPeLtoMgr::Clear((BlueFin::GlPeLtoMgr *)(*(void *)(v4 + 11200) + 7424), 1);
            break;
          case 7:
            BlueFin::GlPeIonoMgr::Clear((BlueFin::GlPeIonoMgr *)(*(void *)(v4 + 11200) + 71232));
            break;
          case 8:
            BlueFin::GlPeTimeManager::ClearSystemOffsets(*(BlueFin::GlPeTimeManager **)(v4 + 11208));
            break;
          case 12:
            BlueFin::GlPeClkCalibrateMgr::Clear(*(BlueFin::GlPeClkCalibrateMgr **)(v4 + 11264));
            break;
          case 13:
            BlueFin::GlPeSvHealthHelper::Clear((BlueFin::GlPeSvHealthHelper *)(*(void *)(v4 + 11240) + 32));
            break;
          case 14:
            uint64_t v16 = *(void *)(v4 + 11248);
            *(void *)(v16 + 40) = 0x271000000000;
            *(_OWORD *)(v16 + 72) = 0u;
            *(_OWORD *)(v16 + 88) = 0u;
            *(_OWORD *)(v16 + 104) = 0u;
            *(_OWORD *)(v16 + 120) = 0u;
            *(_OWORD *)(v16 + 136) = 0u;
            *(_OWORD *)(v16 + 152) = 0u;
            *(_OWORD *)(v16 + 168) = 0u;
            *(_OWORD *)(v16 + 184) = 0u;
            *(_OWORD *)(v16 + 196) = 0u;
            *(void *)(v16 + 48) = 0;
            *(unsigned char *)(v16 + 56) = 0;
            break;
          case 15:
            uint64_t v17 = (int *)(*(void *)(v4 + 11232) + 19352);
            if (*v17 <= 2) {
              *uint64_t v17 = 3;
            }
            break;
          default:
            break;
        }
      }
      ++v8;
    }
    while (v8 != 16);
    *(_DWORD *)(*(void *)(v4 + 10776) + 544) = *(_DWORD *)(v4 + 11176);
    (*(void (**)(void, uint64_t, void))(**(void **)(v4 + 11224) + 16))(*(void *)(v4 + 11224), v10, 0);
    BlueFin::GlNvMemImpl::Delete(*(BlueFin::GlNvMemImpl **)(v4 + 11224));
    BlueFin::GlNvMemImpl::Write(*(BlueFin::GlNvMemImpl **)(v4 + 11224));
    bzero(v20, 0x38A8uLL);
    v20[0] = v9;
    uint64_t v18 = *(void *)(v4 + 11216);
    long long v19 = *(void (**)(void, _DWORD *))(v18 + 128);
    if (v19) {
      v19(*(void *)(v18 + 8), v20);
    }
    return 0;
  }
  return v6;
}

uint64_t BlueFin::GlPeLtoReader::UpdateLtoExtensionBits(uint64_t result, uint64_t a2, int *a3)
{
  int v3 = *a3;
  int v4 = *a3 | 1;
  *a3 = v4;
  int v5 = *(unsigned __int8 *)(a2 + 4);
  if (*(_DWORD *)a2 != 2 || (v5 - 1) > 0x17) {
    goto LABEL_15;
  }
  unsigned int v7 = (unsigned __int8 *)(result + 21867);
  uint64_t v8 = 24;
  while (*(v7 - 1) != v5)
  {
    v7 += 32;
    if (!--v8) {
      goto LABEL_15;
    }
  }
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  int v11 = *v7;
  do
  {
    if (*(unsigned __int8 *)(result + 21867 + v9) == v11) {
      ++v10;
    }
    v9 += 32;
  }
  while (v9 != 768);
  if (v10 > 2u) {
LABEL_15:
  }
    unsigned int v12 = v4 & 0xFFFFFC1F;
  else {
    unsigned int v12 = v3 | (32 * (v11 & 0xF)) | 0x201;
  }
  *a3 = v12;
  return result;
}

uint64_t BlueFin::GlPeLtoReader::SendToPex(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v112 = *MEMORY[0x263EF8340];
  uint64_t v4 = result;
  uint64_t v88 = *(void *)(result + 11192);
  switch(a2)
  {
    case 0u:
      uint64_t v92 = result + 11432;
      int v5 = 32;
      goto LABEL_10;
    case 2u:
      uint64_t v92 = result + 18408;
      if (a3) {
        int v5 = 0;
      }
      else {
        int v5 = 24;
      }
      goto LABEL_10;
    case 3u:
      uint64_t v92 = result + 24744;
      int v5 = 10;
      goto LABEL_10;
    case 4u:
      uint64_t v92 = result + 26972;
      int v5 = 63;
      goto LABEL_10;
    case 5u:
      uint64_t v92 = result + 40388;
      int v5 = 36;
      goto LABEL_10;
    case 6u:
      uint64_t v92 = result + 48632;
      int v5 = 14;
LABEL_10:
      int v85 = v5;
      unsigned int v91 = (int **)(result + 50680);
      uint64_t v95 = 0;
      int v87 = (uint64_t *)(result + 39344);
      unint64_t v83 = (unsigned char *)(result + 11114);
      int v96 = 0;
      __int16 v98 = 0;
      int v99 = 7;
      uint64_t v6 = 1192;
      __int16 v100 = 0;
      do
      {
        BlueFin::GlLtoUncmprsdTgdIsc::GlLtoUncmprsdTgdIsc((uint64_t)&v95 + v6);
        v6 += 24;
      }
      while (v6 != 1384);
      char v102 = 0;
      __int16 v105 = 0;
      LOWORD(v106[3]) = 0;
      *(void *)&long long v107 = 0;
      *(void *)((char *)&v107 + 6) = 0;
      v108[0] = 0;
      *(void *)((char *)v108 + 6) = 0;
      bzero(v101, 0x480uLL);
      uint64_t v7 = 0;
      uint64_t v8 = &v95;
      do
      {
        uint64_t result = BlueFin::GlLtoUncmprsdTgdIsc::GlLtoUncmprsdTgdIsc((uint64_t)v111);
        if (&v101[24 * v7 + 1152] != (unsigned char *)v111)
        {
          for (uint64_t i = 0; i != 24; i += 6)
          {
            unsigned __int8 v10 = (char *)v8 + i;
            *((_DWORD *)v10 + 298) = *(_DWORD *)((char *)v111 + i);
            v10[1196] = *((unsigned char *)&v111[1] + i);
          }
        }
        ++v7;
        v8 += 3;
      }
      while (v7 != 8);
      long long v97 = 0uLL;
      long long v103 = 0u;
      int v104 = 0;
      memset(v106, 0, 22);
      v108[0] = 0;
      long long v107 = 0uLL;
      *(void *)((char *)v108 + 6) = 0;
      __int16 v100 = 0;
      char v102 = 0;
      HIBYTE(v105) = 0;
      memset(&v106[3], 0, 13);
      memset(&v108[2], 0, 13);
      memset(&v108[4], 0, 13);
      *(void *)int v110 = 0;
      *(void *)&v110[8] = 0;
      *(void *)&v110[13] = 0;
      uint64_t v109 = 0;
      unsigned int v93 = a2;
      v94[0] = 0;
      int v11 = 1;
      int v99 = a2;
      switch(a2)
      {
        case 0u:
          if ((*(unsigned char *)*v91 & 4) != 0 || (*((unsigned char *)*v91 + 7) & 0x20) != 0)
          {
            int v12 = *(_DWORD *)(v4 + 11404);
            LODWORD(v95) = *(_DWORD *)(v4 + 11376);
            HIDWORD(v95) = v12;
            int v96 = *(_DWORD *)(v4 + 9812);
            long long v97 = *(_OWORD *)(v4 + 9960);
            __int16 v98 = 0;
            *(_OWORD *)&v110[4] = *(_OWORD *)(v4 + 11104);
            v110[20] = 1;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v88 + 32))(v88, &v95);
            v110[20] = 0;
            goto LABEL_63;
          }
          goto LABEL_64;
        case 2u:
          unsigned int v13 = *v91;
          int v14 = **v91;
          if ((v14 & 2) != 0 || (*((unsigned char *)v13 + 7) & 0x40) != 0)
          {
            if (*(_DWORD *)(v4 + 9808) > 0x93A7Fu) {
              *(_DWORD *)(v4 + 11092) = 0;
            }
            char v16 = 0;
            char v102 = 1;
            int v104 = *(_DWORD *)(v4 + 11100);
            long long v103 = *(_OWORD *)(v4 + 11084);
            int v14 = *v13;
            char v15 = 3;
          }
          else
          {
            char v15 = 2;
            char v16 = 1;
          }
          if ((v14 & 4) != 0 || (*((unsigned char *)v13 + 7) & 0x20) != 0)
          {
            char v102 = v15;
            LOBYTE(v105) = *v83;
          }
          else if (v16)
          {
            int v11 = 0;
            goto LABEL_64;
          }
          int v25 = *(_DWORD *)(v4 + 11412);
          LODWORD(v95) = *(_DWORD *)(v4 + 11384);
          HIDWORD(v95) = v25;
          int v96 = *(_DWORD *)(v4 + 9812);
          long long v97 = *(_OWORD *)(v4 + 9960);
          __int16 v98 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v88 + 32))(v88, &v95);
          int v11 = 0;
          v102 &= 0xFCu;
          goto LABEL_64;
        case 3u:
          if (((*v91)[2] & 2) != 0)
          {
            uint64_t v109 = *(void *)(v4 + 26960);
            *(_DWORD *)int v110 = *(_DWORD *)(v4 + 26968);
            BYTE4(v108[5]) = 4;
            int v96 = *(_DWORD *)(v4 + 9812);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v88 + 32))(v88, &v95);
            uint64_t v26 = (char *)&v108[5] + 4;
            goto LABEL_52;
          }
          BYTE4(v108[5]) = 0;
          goto LABEL_64;
        case 4u:
          uint64_t v17 = *v91;
          int v18 = **v91;
          if ((v18 & 0x10) != 0)
          {
            if (*(_DWORD *)(v4 + 9808) >= 0x93A80u)
            {
              int v19 = 0;
            }
            else
            {
              int v19 = 1;
              BYTE4(v106[4]) = 1;
              uint64_t v27 = *(void **)(v4 + 10448);
              uint64_t v28 = *(void *)((char *)v27 + 6);
              v108[0] = *v27;
              *(void *)((char *)v108 + 6) = v28;
              int v18 = *v17;
            }
          }
          else
          {
            int v19 = 0;
          }
          if ((v18 & 8) != 0)
          {
            v19 |= 2u;
            BYTE4(v106[4]) = v19;
            long long v107 = *(_OWORD *)*(void *)(v4 + 10440);
          }
          if (v17[2])
          {
            v108[2] = *(void *)(v4 + 40376);
            LODWORD(v108[3]) = *(_DWORD *)(v4 + 40384);
            BYTE4(v106[4]) = v19 | 4;
          }
          else
          {
            BYTE4(v106[4]) = v19;
            if (!v19) {
              goto LABEL_63;
            }
          }
          int v32 = *(void **)(v4 + 10448);
          uint64_t v33 = *(void *)((char *)v32 + 6);
          v108[0] = *v32;
          *(void *)((char *)v108 + 6) = v33;
          int v96 = *(_DWORD *)(v4 + 9812);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v88 + 32))(v88, &v95);
          BYTE4(v106[4]) &= 0xF8u;
          goto LABEL_63;
        case 5u:
          long long v20 = *v91;
          int v21 = **v91;
          if ((v21 & 0x40) != 0 && *(_DWORD *)(v4 + 9808) < 0x93A80u)
          {
            int v22 = 1;
            HIBYTE(v105) = 1;
            uint64_t v23 = *(void *)(v4 + 10472);
            __int16 v24 = *(_WORD *)(v23 + 4);
            LODWORD(v106[2]) = *(_DWORD *)v23;
            WORD2(v106[2]) = v24;
            int v21 = *v20;
          }
          else
          {
            int v22 = 0;
          }
          if ((v21 & 0x20) != 0)
          {
            v22 |= 2u;
            HIBYTE(v105) = v22;
            *(_OWORD *)__int16 v106 = *(_OWORD *)*(void *)(v4 + 10464);
          }
          if (v20[1] < 0)
          {
            v106[3] = *(void *)(v4 + 47480);
            LODWORD(v106[4]) = *(_DWORD *)(v4 + 47488);
            HIBYTE(v105) = v22 | 4;
          }
          else
          {
            HIBYTE(v105) = v22;
            if (!v22) {
              goto LABEL_63;
            }
          }
          uint64_t v29 = *(void *)(v4 + 10472);
          __int16 v30 = *(_WORD *)(v29 + 4);
          LODWORD(v29) = *(_DWORD *)v29;
          WORD2(v106[2]) = v30;
          int v31 = *(_DWORD *)(v4 + 9812);
          LODWORD(v106[2]) = v29;
          int v96 = v31;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v88 + 32))(v88, &v95);
          HIBYTE(v105) &= 0xF8u;
          goto LABEL_63;
        case 6u:
          if (((*v91)[2] & 8) != 0)
          {
            LODWORD(v108[5]) = *(_DWORD *)(v4 + 50656);
            v108[4] = *(void *)(v4 + 50648);
            BYTE4(v108[3]) = 4;
            int v96 = *(_DWORD *)(v4 + 9812);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v88 + 32))(v88, &v95);
            uint64_t v26 = (char *)&v108[3] + 4;
LABEL_52:
            *v26 &= ~4u;
LABEL_63:
            int v11 = 1;
          }
          else
          {
            BYTE4(v108[3]) = 0;
          }
LABEL_64:
          int v84 = v11;
          uint64_t v86 = v4 + 4 * a2;
          if (!v85) {
            goto LABEL_163;
          }
          uint64_t v34 = 0;
          unint64_t v35 = 0;
          break;
        default:
          goto LABEL_64;
      }
      break;
    default:
      return result;
  }
  do
  {
    if (v35 <= 7)
    {
      uint64_t v36 = v92 + 144 * v34;
      int v37 = *(_DWORD *)v36;
      if (*(_DWORD *)v36 != 255)
      {
        unsigned __int8 v38 = v37 + 1;
        v94[0] = v37 + 1;
        if ((a3 & 1) == 0)
        {
          if (v93 == 3)
          {
            int v39 = *(_DWORD *)(v36 + 12);
            if ((v39 - 1) <= 1 && *(_DWORD *)(v36 + 16) == 15)
            {
              if (v39 == 2) {
                int v40 = 6;
              }
              else {
                int v40 = 2;
              }
              *(_DWORD *)(v36 + 4) |= v40;
              *(_DWORD *)(v36 + 16) = *(_DWORD *)(v36 + 104) & 0xF;
            }
          }
          uint64_t result = BlueFin::GlPeLtoReader::UpdateLtoExtensionBits(v4, (uint64_t)&v93, (int *)(v36 + 4));
        }
        uint64_t v41 = 0;
        long long v42 = *(_OWORD *)(v36 + 64);
        uint64_t v43 = &v95 + 18 * v35;
        *(_OWORD *)(v43 + 15) = *(_OWORD *)(v36 + 80);
        long long v44 = *(_OWORD *)(v36 + 112);
        *(_OWORD *)(v43 + 17) = *(_OWORD *)(v36 + 96);
        *(_OWORD *)(v43 + 19) = v44;
        *(_OWORD *)(v43 + 21) = *(_OWORD *)(v36 + 128);
        long long v45 = *(_OWORD *)v36;
        *(_OWORD *)(v43 + 7) = *(_OWORD *)(v36 + 16);
        long long v46 = *(_OWORD *)(v36 + 48);
        *(_OWORD *)(v43 + 9) = *(_OWORD *)(v36 + 32);
        *(_OWORD *)(v43 + 11) = v46;
        *(_OWORD *)(v43 + 13) = v42;
        uint64_t v47 = &v95 + 3 * v35;
        *(_OWORD *)(v43 + 5) = v45;
        uint64_t v48 = (uint64_t)(v47 + 149);
        do
        {
          int v49 = (char *)v47 + v41;
          *((_DWORD *)v49 + 298) = 0;
          v49[1196] = 0;
          v41 += 6;
        }
        while (v41 != 24);
        switch(v93)
        {
          case 0u:
            uint64_t v50 = *(void *)(v4 + 11200) + 392;
            v111[0] = 0;
            if ((*((unsigned char *)*v91 + 3) & 4) != 0 || (*((unsigned char *)*v91 + 9) & 2) != 0)
            {
              uint64_t v51 = 0;
              while (1)
              {
                unsigned int v52 = *(unsigned __int8 *)(*(void *)(v4 + 18240) + v51);
                if (v52 <= 0x1F && v52 + 1 == v38) {
                  break;
                }
                v51 += 32;
                if (v51 == 1024) {
                  goto LABEL_119;
                }
              }
              *((unsigned char *)v47 + 1208) = 0;
              if ((*(unsigned int (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v50 + 48))(v50, v94, 1, v111))
              {
                *(_WORD *)(v48 + 12) = *(_WORD *)(*(void *)(v4 + 18240) + v51 + 22);
                *(unsigned char *)(v48 + 16) |= 1u;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v50 + 48))(v50, v94, 4, v111);
              uint64_t v64 = *(void *)(v4 + 18240);
              if (result)
              {
                *(_WORD *)(v48 + 14) = *(_WORD *)(v64 + v51 + 24);
                *(unsigned char *)(v48 + 16) |= 2u;
              }
              if (*(unsigned char *)(v64 + v51 + 26))
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v50 + 48))(v50, v94, 3, v111);
                if (result)
                {
                  *(_WORD *)(v48 + 8) = *(_WORD *)(*(void *)(v4 + 18240) + v51 + 28);
                  *(unsigned char *)(v48 + 10) = 4;
                }
              }
            }
LABEL_119:
            if (**v91 < 0 || (*((unsigned char *)*v91 + 9) & 2) != 0)
            {
              uint64_t v65 = 0;
              while (1)
              {
                unsigned int v66 = *(unsigned __int8 *)(*(void *)(v4 + 18400) + v65);
                if (v66 <= 0x1F && v66 + 1 == v94[0]) {
                  break;
                }
                v65 += 4;
                if (v65 == 128) {
                  goto LABEL_156;
                }
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v50 + 48))(v50, v94, 2, v111);
              if (result)
              {
                *(_WORD *)uint64_t v48 = 0;
                uint64_t v71 = *(void *)(v4 + 18400);
                goto LABEL_150;
              }
            }
            break;
          case 3u:
            uint64_t v54 = *(void *)(*(void *)(v4 + 11200) + 7376);
            v111[0] = 0;
            if ((*((unsigned char *)*v91 + 3) & 0x10) != 0 || (*((unsigned char *)*v91 + 9) & 4) != 0)
            {
              uint64_t v55 = 0;
              while (1)
              {
                unsigned int v56 = *(unsigned __int8 *)(*(void *)(v4 + 26880) + v55);
                if (v56 <= 9 && v56 + 1 == v38) {
                  break;
                }
                v55 += 32;
                if (v55 == 320) {
                  goto LABEL_136;
                }
              }
              *((unsigned char *)v47 + 1208) = 0;
              if (v54)
              {
                if ((*(unsigned int (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v54 + 48))(v54, v94, 1, v111))
                {
                  *(_WORD *)(v48 + 12) = *(_WORD *)(*(void *)(v4 + 26880) + v55 + 22);
                  *(unsigned char *)(v48 + 16) |= 1u;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v54 + 48))(v54, v94, 4, v111);
                uint64_t v68 = *(void *)(v4 + 26880);
                if (result)
                {
                  *(_WORD *)(v48 + 14) = *(_WORD *)(v68 + v55 + 24);
                  *(unsigned char *)(v48 + 16) |= 2u;
                }
                if (*(unsigned char *)(v68 + v55 + 26))
                {
                  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v54 + 48))(v54, v94, 3, v111);
                  if (result)
                  {
                    *(_WORD *)(v48 + 8) = *(_WORD *)(*(void *)(v4 + 26880) + v55 + 28);
                    *(unsigned char *)(v48 + 10) = 4;
                  }
                }
              }
            }
LABEL_136:
            if (((*v91)[1] & 1) != 0 || (*((unsigned char *)*v91 + 9) & 4) != 0)
            {
              uint64_t v65 = 0;
              while (1)
              {
                unsigned int v69 = *(unsigned __int8 *)(*(void *)(v4 + 26952) + v65);
                if (v69 <= 9 && v69 + 1 == v94[0]) {
                  break;
                }
                v65 += 4;
                if (v65 == 40) {
                  goto LABEL_156;
                }
              }
              if (v54)
              {
                uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v54 + 48))(v54, v94, 2, v111);
                if (result)
                {
                  *(_WORD *)uint64_t v48 = 0;
                  uint64_t v71 = *(void *)(v4 + 26952);
LABEL_150:
                  *(_WORD *)(v48 + 2) = *(_WORD *)(v71 + v65 + 2);
                  *(unsigned char *)(v48 + 4) = 2;
                }
              }
            }
            break;
          case 4u:
            BOOL v58 = *v91;
            int v59 = **v91;
            if ((v59 & 0x20000000) != 0 || (*((unsigned char *)v58 + 9) & 8) != 0)
            {
              uint64_t result = BlueFin::GlPeLtoReader::updatePexTgdIsc(v4, v94, *v87, v48);
              BOOL v58 = *v91;
              int v59 = **v91;
            }
            if ((v59 & 0x40000000) != 0 || (*((unsigned char *)v58 + 9) & 0x10) != 0) {
              uint64_t result = BlueFin::GlPeLtoReader::updatePexTgdIsc(v4, v94, v87[128], v48);
            }
            break;
          case 5u:
            uint64_t v60 = *(void *)(*(void *)(v4 + 11200) + 7392);
            v111[0] = 0;
            if ((*((unsigned char *)*v91 + 3) & 8) != 0)
            {
              uint64_t v61 = 0;
              while (1)
              {
                unsigned int v62 = *(unsigned __int8 *)(v87[1016] + v61);
                if (v62 <= 0x23 && v62 + 1 == v38) {
                  break;
                }
                v61 += 28;
                if (v61 == 1008) {
                  goto LABEL_156;
                }
              }
              if (v60)
              {
                if ((*(unsigned int (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v60 + 48))(v60, v94, 9, v111))
                {
                  *(_WORD *)(v48 + 12) = *(_WORD *)(v87[1016] + v61 + 22);
                  *(_WORD *)(v48 + 14) = 0;
                  *(unsigned char *)(v48 + 16) = 1;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, _DWORD *))(*(void *)v60 + 48))(v60, v94, 10, v111);
                if (result)
                {
                  *(_WORD *)(v48 + 6) = *(_WORD *)(v87[1016] + v61 + 24);
                  *(_WORD *)(v48 + 8) = 0;
                  *(unsigned char *)(v48 + 10) = 1;
                }
              }
            }
            break;
          default:
            break;
        }
LABEL_156:
        ++v35;
        ++v100;
      }
    }
    ++v34;
    if (v35 == 8)
    {
      if (v34 == v85)
      {
        unint64_t v35 = 8;
      }
      else
      {
        unint64_t v35 = 8;
        if (v100)
        {
          int v72 = *(_DWORD *)(v86 + 11404);
          LODWORD(v95) = *(_DWORD *)(v86 + 11376);
          HIDWORD(v95) = v72;
          long long v97 = *(_OWORD *)(v4 + 9960);
          __int16 v98 = 0;
          uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v4 + 11192) + 32))(*(void *)(v4 + 11192), &v95);
          unint64_t v35 = 0;
          __int16 v100 = 0;
        }
      }
    }
  }
  while (v34 != v85);
LABEL_163:
  if (v100)
  {
    int v73 = *(_DWORD *)(v86 + 11404);
    LODWORD(v95) = *(_DWORD *)(v86 + 11376);
    HIDWORD(v95) = v73;
    long long v97 = *(_OWORD *)(v4 + 9960);
    if (a4) {
      __int16 v74 = 3;
    }
    else {
      __int16 v74 = 1;
    }
    __int16 v98 = v74;
    uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v4 + 11192) + 32))(*(void *)(v4 + 11192), &v95);
  }
  if (((v84 | a3 ^ 1) & 1) == 0)
  {
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    unsigned __int16 v77 = 0;
    do
    {
      while (1)
      {
        if (v76 <= 7)
        {
          uint64_t v78 = v4 + 22632 + 88 * v75;
          if (*(unsigned __int8 *)(v78 + 60) != 255)
          {
            long long v79 = *(_OWORD *)(v78 + 48);
            int v80 = &v111[22 * v76];
            *((_OWORD *)v80 + 2) = *(_OWORD *)(v78 + 32);
            *((_OWORD *)v80 + 3) = v79;
            *((_OWORD *)v80 + 4) = *(_OWORD *)(v78 + 64);
            *((void *)v80 + 10) = *(void *)(v78 + 80);
            long long v81 = *(_OWORD *)(v78 + 16);
            *(_OWORD *)int v80 = *(_OWORD *)v78;
            *((_OWORD *)v80 + 1) = v81;
            ++v76;
            ++v77;
          }
        }
        if (v76 != 8 || v75 == 23 || !v77) {
          break;
        }
        uint64_t result = (*(uint64_t (**)(void, _DWORD *, void))(**(void **)(v4 + 11192) + 96))(*(void *)(v4 + 11192), v111, v77);
        unint64_t v76 = 0;
        unsigned __int16 v77 = 0;
        ++v75;
      }
      ++v75;
    }
    while (v75 != 24);
    if (v77) {
      return (*(uint64_t (**)(void, _DWORD *, void))(**(void **)(v4 + 11192) + 96))(*(void *)(v4 + 11192), v111, v77);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLtoReader::updatePexTgdIsc(uint64_t result, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 0;
  int v8 = *a2;
  while (1)
  {
    unsigned int v9 = *(unsigned __int8 *)(a3 + v7);
    if (v9 <= 0x3E)
    {
      int v10 = *(_DWORD *)(a3 + v7 + 4);
      unsigned int v11 = v9 + 1;
      if (v10 && v11 == v8) {
        break;
      }
    }
    v7 += 16;
    if (v7 == 1008) {
      return result;
    }
  }
  if (v10 == 1) {
    uint64_t v13 = 2;
  }
  else {
    uint64_t v13 = 3;
  }
  uint64_t v14 = a4 + 6 * v13;
  *(unsigned char *)(v14 + 4) = 0;
  char v15 = (unsigned char *)(v14 + 4);
  uint64_t v16 = *(void *)(*(void *)(result + 11200) + 7384);
  int v21 = 0;
  if (v16)
  {
    if (v10 == 1) {
      uint64_t v17 = 7;
    }
    else {
      uint64_t v17 = 5;
    }
    char v20 = v8;
    if ((*(unsigned int (**)(uint64_t, char *, uint64_t, int *))(*(void *)v16 + 48))(v16, &v20, v17, &v21))
    {
      *(_WORD *)(a4 + 6 * v13) = *(_WORD *)(a3 + v7 + 10);
      *v15 |= 1u;
    }
    if (*(_DWORD *)(a3 + v7 + 4) == 1) {
      uint64_t v18 = 8;
    }
    else {
      uint64_t v18 = 6;
    }
    char v19 = *a2;
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t, int *))(*(void *)v16 + 48))(v16, &v19, v18, &v21);
    if (result)
    {
      *v15 |= 2u;
      *(_WORD *)(a4 + 6 * v13 + 2) = *(_WORD *)(a3 + v7 + 12);
    }
  }
  return result;
}

void BlueFin::GlPeLtoReader::~GlPeLtoReader(BlueFin::GlPeLtoReader *this)
{
  BlueFin::GlPeLtoReader::~GlPeLtoReader(this);

  JUMPOUT(0x263E6DD70);
}

void BlueFin::GlPeLtoReaderBase::~GlPeLtoReaderBase(BlueFin::GlPeLtoReaderBase *this)
{
}

uint64_t BlueFin::GlPeLtoReaderBase::NegateSystemTimeOffsets(uint64_t this)
{
  *(unsigned char *)(this + 11080) = 1;
  *(unsigned char *)(this + 11072) = 1;
  return this;
}

void BlueFin::GlPeGnssTgdIscData::~GlPeGnssTgdIscData(BlueFin::GlPeGnssTgdIscData *this)
{
}

uint64_t BlueFin::GlLtoUncmprsdTgdIsc::GlLtoUncmprsdTgdIsc(uint64_t this)
{
  for (uint64_t i = 0; i != 24; i += 6)
  {
    uint64_t v2 = this + i;
    *(_DWORD *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 4) = 0;
  }
  for (uint64_t j = 0; j != 24; j += 6)
  {
    uint64_t v4 = this + j;
    *(_DWORD *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 4) = 0;
  }
  return this;
}

BlueFin::GlPeIonoMgr **BlueFin::GlPeNavMsgParser::SetDataSubFrmMeas(BlueFin::GlPeIonoMgr **this, const BlueFin::GlDataSubFrmMeas *a2)
{
  int v2 = *((_DWORD *)a2 + 4);
  unint64_t v3 = (715827883 * (unint64_t)((v2 + 24) % 0x1Eu)) >> 32;
  if (v3 + 1 == *((unsigned __int8 *)a2 + 9))
  {
    uint64_t v4 = this;
    int v10 = &unk_270EBA3B8;
    v11[0] = *((unsigned char *)a2 + 8);
    v11[1] = v3 + 1;
    int v12 = *((_DWORD *)a2 + 3);
    int v13 = v2;
    int v17 = *((_DWORD *)a2 + 15);
    long long v14 = *(_OWORD *)((char *)a2 + 20);
    long long v15 = *(_OWORD *)((char *)a2 + 36);
    uint64_t v16 = *(void *)((char *)a2 + 52);
    if (!(v14 >> 30) && (v14 & 0x3FC00000) != 0x22C00000) {
      LODWORD(v14) = v14 | 0x80000000;
    }
    if (DWORD1(v14) >> 30) {
      goto LABEL_15;
    }
    int v5 = (DWORD1(v14) >> 8) & 7;
    if ((BYTE4(v14) & 3) == 1) {
      goto LABEL_12;
    }
    if (v2 == 604800) {
      int v2 = 0;
    }
    if (DWORD1(v14) >> 19 > 0x626 || (BYTE4(v14) & 3) == 2 || 6 * (DWORD1(v14) >> 13) != v2) {
LABEL_12:
    }
      DWORD1(v14) |= 0x80000000;
    if (v5 == v3 + 1)
    {
LABEL_15:
      if (!(HIDWORD(v16) >> 30) && (v16 & 0x300000000) != 0 && (BYTE4(v16) & 3) != 3) {
        HIDWORD(v16) |= 0x80000000;
      }
      if ((v3 - 1) < 2)
      {
LABEL_23:
        uint64_t v6 = (BlueFin::GlPeGloFcnOsnMgr **)((char *)v4[1] + 119744);
        int v18 = 7;
        unsigned __int8 v19 = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss(v6, v11, (uint64_t)&v18);
        if (v19 - 1 >= 0x3F)
        {
          int v8 = "m_rAsstMgr.SvId2Gnss(otSubframe.otSvId, otGnss)";
          DeviceFaultNotify("glpe_navmsgparser.cpp", 134, "SetDataSubFrmMeas", (char)"m_rAsstMgr.SvId2Gnss(otSubframe.otSvId, otGnss)");
          int v9 = 134;
        }
        else
        {
          if (v18 == 3)
          {
            uint64_t v7 = v4[3];
            return (BlueFin::GlPeIonoMgr **)BlueFin::GlPeGpsQzssEphMgr::SetDataSubFrmMeas(v7, (BlueFin::GlDataSubFrmMeas *)&v10);
          }
          if (!v18)
          {
            uint64_t v7 = v4[2];
            return (BlueFin::GlPeIonoMgr **)BlueFin::GlPeGpsQzssEphMgr::SetDataSubFrmMeas(v7, (BlueFin::GlDataSubFrmMeas *)&v10);
          }
          int v8 = "false";
          DeviceFaultNotify("glpe_navmsgparser.cpp", 147, "SetDataSubFrmMeas", (char)"false");
          int v9 = 147;
        }
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navmsgparser.cpp", v9, v8);
      }
      if ((v3 - 3) < 2)
      {
        BlueFin::GlPeIonoMgr::SetDataSubFrmMeas(*this, (BlueFin::GlDataSubFrmMeas *)&v10);
        return (BlueFin::GlPeIonoMgr **)BlueFin::GlPeAlmMgr::SetDataSubFrmMeas((uint64_t)v4[5], (BlueFin::GlDataSubFrmMeas *)&v10);
      }
      if (!v3)
      {
        BlueFin::GlPeIonoMgr::SetDataSubFrmMeas(*this, (BlueFin::GlDataSubFrmMeas *)&v10);
        goto LABEL_23;
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeNavMsgParser::SetNicDataSubFrmMeas(uint64_t this, const BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v4 = &unk_270EBA3B8;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  unsigned __int8 v6 = *((unsigned char *)a2 + 9);
  uint64_t v7 = *(void *)((char *)a2 + 12);
  int v11 = *((_DWORD *)a2 + 15);
  long long v8 = *(_OWORD *)((char *)a2 + 20);
  long long v9 = *(_OWORD *)((char *)a2 + 36);
  uint64_t v10 = *(void *)((char *)a2 + 52);
  if (v6 - 1 <= 1)
  {
    uint64_t v2 = this;
    unint64_t v3 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(this + 8) + 119744);
    int v12 = 7;
    unsigned __int8 v13 = 0;
    this = BlueFin::GlPeSvIdConverter::SvId2Gnss(v3, &v5, (uint64_t)&v12);
    if (v13 - 1 >= 0x3F)
    {
      DeviceFaultNotify("glpe_navmsgparser.cpp", 181, "SetNicDataSubFrmMeas", (char)"m_rAsstMgr.SvId2Gnss(otSubframe.otSvId, otGnss)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navmsgparser.cpp", 181, "m_rAsstMgr.SvId2Gnss(otSubframe.otSvId, otGnss)");
    }
    if (v12 == 6) {
      return BlueFin::GlPeNicEphMgr::SetDataSubFrmMeas(*(BlueFin::GlPeNicEphMgr **)(v2 + 32), (const BlueFin::GlDataSubFrmMeas *)&v4);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeOscMgr::GetOscOffAge(BlueFin::GlPeOscMgr *this)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 2);
  unsigned int v3 = v2[642];
  uint64_t v4 = 0x7FFFFFFFLL;
  if (v3 != -7200001)
  {
    double v5 = (double)(int)v3;
    if (v3 <= 0xFF9222FE) {
      double v5 = (double)v3;
    }
    BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v2, 0, 0, (uint64_t)v13, v5);
    int v6 = (__int16)(v13[0] - *((_WORD *)this + 12));
    int v7 = v14 - *((_DWORD *)this + 7);
    if (v6 >= 0) {
      LOWORD(v8) = v13[0] - *((_WORD *)this + 12);
    }
    else {
      int v8 = -v6;
    }
    if (v7 >= 0) {
      unsigned int v9 = v14 - *((_DWORD *)this + 7);
    }
    else {
      unsigned int v9 = *((_DWORD *)this + 7) - v14;
    }
    BOOL v10 = v9 >= 0x240C8401 || (unsigned __int16)v8 >= 2u;
    unsigned int v11 = v7 + 604800000 * v6;
    if (v10) {
      return 0x7FFFFFFFLL;
    }
    else {
      return v11;
    }
  }
  return v4;
}

uint64_t BlueFin::GlPeOscMgr::FromCntinSlogEntry(BlueFin::GlPeOscMgr *this, BlueFin::GlSysLogEntry *a2, BlueFin::GlPeOscMgr *a3)
{
  if (!this)
  {
    DeviceFaultNotify("glpe_oscmgr.cpp", 304, "FromCntinSlogEntry", (char)"pEntry");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_oscmgr.cpp", 304, "pEntry");
  }
  int v6 = &unk_270EC1928;
  uint64_t result = BlueFin::GlPeOscAuxData::Deserialize((BlueFin::GlPeOscAuxData *)&v6, this);
  if (result)
  {
    int v5 = v7;
    *((_WORD *)a2 + 2) = v7;
    *((unsigned char *)a2 + 8) = 1;
    return GlCustomLog(14, "CntinDebug FromSlog %d\n", v5);
  }
  return result;
}

uint64_t BlueFin::GlPeOscAuxData::Deserialize(BlueFin::GlPeOscAuxData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 90 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_WORD *)this + 4) = BlueFin::GlSysLogEntry::GetS16(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 449);
  }
  return v3;
}

uint64_t BlueFin::GlPeOscData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 && v4 != 3)
  {
    DeviceFaultNotify("glpe_oscmgr.cpp", 399, "SerializeImpl", (char)"ucVersion == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_oscmgr.cpp", 399, "ucVersion == 3");
  }
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 71;
    char v10 = 3;
    uint64_t v11 = 0x1000000000000;
    int v8 = &unk_270EBA2F0;
    char v12 = 3;
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 10));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 14));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 16));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeOscAuxData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_oscmgr.cpp", 426, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_oscmgr.cpp", 426, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 90;
    char v10 = 1;
    uint64_t v11 = 0x1000000000000;
    int v8 = &unk_270EBA2F0;
    char v12 = 1;
    GlCustomLog(14, "CntinDebug Write %d\n", *(__int16 *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 8));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

void BlueFin::GlPeOscMgr::Serialize(BlueFin::GlPeOscMgr *this, BlueFin::GlPeEngineCallBacks *a2, uint64_t a3, char *a4)
{
  int v4 = *((__int16 *)this + 5);
  if (v4 >= 0) {
    LOWORD(v5) = *((_WORD *)this + 5);
  }
  else {
    int v5 = -v4;
  }
  int v6 = *((__int16 *)this + 1);
  if (v6 >= 0) {
    LOWORD(v7) = *((_WORD *)this + 1);
  }
  else {
    int v7 = -v6;
  }
  if ((unsigned __int16)v5 > 0x1770u || (unsigned __int16)((unsigned __int16)v7 >> 2) > 0x6BCu)
  {
    GlCustomLog(14, "OSC_STORE :Warning! Out of range osc offset values found %d ppb with %d ppb Unc.Osc values not stored to NVMEM\n");
  }
  else
  {
    uint64_t v13 = (void (**)(void **, BlueFin::GlPeEngineCallBacks *, void, char *))&unk_270EC1970;
    __int16 v14 = v6;
    __int16 v15 = v4;
    __int16 v16 = *((_WORD *)this + 6);
    unsigned int v10 = *((_DWORD *)this + 10);
    if (v10 != -7200001)
    {
      a4 = (char *)this + 24;
      if (!*((_WORD *)this + 12))
      {
        uint64_t v11 = (unsigned int *)*((void *)this + 2);
        if (v11[644])
        {
          double v12 = (double)(int)v10;
          if (v10 <= 0xFF9222FE) {
            double v12 = (double)v10;
          }
          BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v11, 0, 0, (uint64_t)a4, v12);
        }
        else
        {
          *((_WORD *)this + 12) = 0;
          *((_DWORD *)this + 7) = 0;
        }
      }
    }
    __int16 v17 = *((_WORD *)this + 12);
    int v18 = *((_DWORD *)this + 7);
    if (a2)
    {
      v13[3]((void **)&v13, a2, 0, a4);
      (*(void (**)(BlueFin::GlPeEngineCallBacks *, void, void, char *))(*(void *)a2 + 128))(a2, v14, v15, (char *)this + 24);
      GlCustomLog(14, "OSC_STORE stored %d ppb (%d, %d) [%u, %u]\n");
    }
    else if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        v13[3]((void **)&v13, 0, 0, a4);
      }
    }
  }
}

uint64_t BlueFin::GlPeOscMgr::UpdateCntinOffsetEstimate(uint64_t this)
{
  int v1 = *(__int16 *)(this + 6);
  if (*(_WORD *)(this + 6))
  {
    if (*(unsigned char *)(this + 8)) {
      int v1 = (int)((double)(*(__int16 *)(this + 2) - v1) * 0.25 + (double)*(__int16 *)(this + 4) * 0.75);
    }
    else {
      LOWORD(v1) = *(_WORD *)(this + 2) - v1;
    }
    *(_WORD *)(this + 4) = v1;
    if ((__int16)v1 >= -50)
    {
      if ((__int16)v1 < 51) {
        return this;
      }
      __int16 v2 = 50;
    }
    else
    {
      __int16 v2 = -50;
    }
    *(_WORD *)(this + 4) = v2;
  }
  return this;
}

uint64_t BlueFin::GlPeOscMgr::SerializeCntin(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v2 = *(void *)(this + 16);
  if (*(_DWORD *)(v2 + 2576) == 3 || (*(unsigned char *)(v2 + 2744) & 8) != 0)
  {
    uint64_t v3 = &unk_270EC1928;
    __int16 v4 = *(_WORD *)(this + 4);
    if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeOscAuxData::SerializeImpl((uint64_t)&v3, (uint64_t)a2);
    }
  }
  return this;
}

void BlueFin::GlPeOscAuxData::~GlPeOscAuxData(BlueFin::GlPeOscAuxData *this)
{
}

void BlueFin::GlPeOscData::~GlPeOscData(BlueFin::GlPeOscData *this)
{
}

uint64_t GlPeRngAidGen_SortSvIds(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 4) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1) {
    return 1;
  }
  else {
    return (v2 >> 31);
  }
}

BOOL BlueFin::GlPeRangeAidGen::MakeFactoryAid(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned __int8 v14 = *a2;
  BlueFin::GlPeSatAidInfo::Add(a1 + 32, &v14);
  if (!v6)
  {
    DeviceFaultNotify("glpe_raidgen.cpp", 837, "MakeFactoryAid", (char)"nullptr != pSatAid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_raidgen.cpp", 837, "nullptr != pSatAid");
  }
  int v7 = v6;
  *int v6 = *a2;
  int v8 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 18048) + 119744);
  int v15 = 7;
  unsigned __int8 v16 = 0;
  BOOL result = BlueFin::GlPeSvIdConverter::SvId2Gnss(v8, v7, (uint64_t)&v15);
  *((_DWORD *)v7 + 1) = v15;
  int v10 = v16;
  v7[8] = v16;
  unsigned int v11 = v10 - 1;
  unsigned __int8 v12 = *a2 - 52;
  if (v11 >= 0x3F)
  {
    if ((*a2 - 52) >= 0xEu) {
      return result;
    }
  }
  else if ((*a2 - 52) > 0xDu)
  {
    goto LABEL_7;
  }
  *((_DWORD *)v7 + 1) = 2;
  v7[8] = BlueFin::GlPeRangeAidGen::MakeFactoryAid(BlueFin::GlSvId const&,BlueFin::GL_FACT_TEST_ITEMS)::acOsn2Fcn[2 * v12];
LABEL_7:
  *((_DWORD *)v7 + 5) = 0;
  *((void *)v7 + 4) = 0;
  *(_OWORD *)(v7 + 40) = xmmword_263BB9450;
  *((_DWORD *)v7 + 18) = 2949210;
  *((_DWORD *)v7 + 3) = 2;
  *(_DWORD *)(a1 + 356) = 1;
  if (a3 == 4)
  {
    *((_DWORD *)v7 + 10) = 973193955;
    *(_DWORD *)(a1 + 336) = 973193955;
    *(_DWORD *)(a1 + 352) = 973193955;
    int v13 = 158;
  }
  else
  {
    int v13 = 154;
  }
  *((_DWORD *)v7 + 6) = v13;
  return result;
}

uint64_t BlueFin::GlPeRangeAidGen::KfUpdate(uint64_t a1, unsigned int a2, uint64_t a3, char a4, int a5, double a6, double a7, double a8)
{
  if (!a3)
  {
    DeviceFaultNotify("glpe_raidgen.cpp", 1190, "KfUpdate", (char)"nullptr != pstKfAid");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_raidgen.cpp", 1190, "nullptr != pstKfAid");
  }
  *(_DWORD *)(a1 + 19080) = a2;
  bzero(*(void **)(a1 + 19032), ((4 * *(unsigned __int8 *)(a1 + 19040) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  uint64_t v12 = *(void *)(a1 + 18048);
  if (*(_DWORD *)(v12 + 100) != -1)
  {
    long long v46 = *(_OWORD *)(v12 + 168);
    uint64_t v47 = *(void *)(v12 + 184);
  }
  if (*(__int16 *)(a3 + 5108) >= 1)
  {
    uint64_t v13 = 0;
    float v14 = a8;
    float v15 = -v14;
    if (a5) {
      float v16 = v15;
    }
    else {
      float v16 = 0.0;
    }
    do
    {
      AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(a1 + 32, (unsigned __int8 *)(*(void *)(a3 + 5096) + 56 * v13 + 44));
      if (AidBySvId)
      {
        int v18 = AidBySvId;
        uint64_t v19 = *(void *)(a3 + 5096);
        uint64_t v20 = v19 + 56 * v13;
        *(void *)(AidBySvId + 44) = *(void *)(v20 + 12);
        int v21 = *((_DWORD *)AidBySvId + 6);
        int v22 = v21 | 0x30;
        unsigned int v23 = v21 & 0xFFFFFFCF | 0x10;
        if (a5) {
          unsigned int v23 = v22;
        }
        *((float *)AidBySvId + 13) = v16;
        *((_DWORD *)AidBySvId + 6) = v23;
        *((double *)AidBySvId + 4) = -*(double *)v20;
        *((_DWORD *)AidBySvId + 10) = *(_DWORD *)(v20 + 8);
        float v24 = *(float *)(v20 + 24);
        double v25 = v24;
        if (v24 >= 0.0) {
          double v26 = 0.5;
        }
        else {
          double v26 = -0.5;
        }
        *((_WORD *)AidBySvId + 37) = (int)(v26 + v25);
        double v27 = *(float *)(v20 + 20) + 0.5;
        double v28 = fmod(v27, 4294967300.0);
        if (v27 <= 4294967300.0) {
          double v28 = v27;
        }
        if (v28 < -4294967300.0) {
          double v28 = -fmod(-v28, 4294967300.0);
        }
        uint64_t v29 = 0;
        if (v28 < 0.0) {
          unsigned int v30 = --v28;
        }
        else {
          LOWORD(v30) = v28;
        }
        *((_WORD *)v18 + 36) = v30;
        uint64_t v31 = v19 + 56 * v13;
        *(void *)(v18 + 12) = *(void *)(v31 + 48);
        *(_OWORD *)(v18 + 76) = *(_OWORD *)(v31 + 28);
        uint64_t v32 = BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)(v31 + 44)];
        uint64_t v33 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
        do
        {
          if (*(unsigned __int8 *)(*(void *)(a1 + 18056) + v32 + 256) >> v29)
          {
            uint64_t v34 = *(void *)(a3 + 5096);
            uint64_t v35 = *(unsigned __int8 *)(v34 + 56 * v13 + 44);
            v43[0] = v35;
            int v44 = v29;
            __int16 v45 = 575;
            if ((v35 + 67) >= 0x44u)
            {
              uint64_t v36 = BlueFin::GlSvId::s_aucSvId2gnss[v35];
              if (v33[v36] == 255) {
                int v44 = -1;
              }
              else {
                __int16 v45 = BlueFin::GlSignalId::s_ausGnss2signalId[v36]
              }
                    + v35
                    - BlueFin::GlSvId::s_aucGnss2minSvId[v36]
                    + v29 * BlueFin::GlSvId::s_aucGnss2numSvId[v36];
            }
            float CarrierBasedBiases = BlueFin::GlPeComputeZRH::getCarrierBasedBiases(*(void **)(a1 + 19360), v43, a2, &v46, (_DWORD *)(v34 + 56 * v13 + 52), *(float *)(v34 + 56 * v13 + 20), *(float *)(v34 + 56 * v13 + 24));
            *(float *)&v18[4 * v29 + 56] = -CarrierBasedBiases;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(*(void *)(a3 + 5096) + 56 * v13 + 52);
          }
          ++v29;
          v33 += 7;
        }
        while (v29 != 4);
        if (*((_DWORD *)v18 + 3) == 2) {
          *((_DWORD *)v18 + 3) = 1;
        }
        unint64_t v38 = *(unsigned __int8 *)(*(void *)(a3 + 5096) + 56 * v13 + 44);
        *(_DWORD *)(*(void *)(a1 + 19032) + ((v38 >> 3) & 0x1C)) |= 1 << v38;
        *((_DWORD *)v18 + 5) = 0;
      }
      ++v13;
    }
    while (v13 < *(__int16 *)(a3 + 5108));
  }
  if (a4)
  {
    uint64_t v39 = *(void *)(a1 + 18048);
    GlCustomLog(14, "GlPeAsstPosMgr::SetUserDyn(from:%s to:%s)\n", __const__ZN7BlueFin14GlPeAsstPosMgr10SetUserDynENS_9GlUserDynE_acUserDynImage[*(int *)(v39 + 96)], "STATIC");
    *(_DWORD *)(v39 + 96) = 1;
  }
  return 1;
}

uint64_t BlueFin::GlPeRangeAidGen::SetAsstAcqAid(uint64_t a1, __int16 *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 18248);
  do
  {
    bzero(*(void **)(v5 + v4), ((4 * *(unsigned __int8 *)(v5 + v4 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v4 += 24;
  }
  while (v4 != 168);
  bzero(*(void **)(a1 + 19032), ((4 * *(unsigned __int8 *)(a1 + 19040) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (BlueFin::GlPeTimeManager::TimeKnown(*(void *)a1, 0, 0x200B20u))
  {
    BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)a1, 1, &v34);
    v36[0] = &off_270EBC600;
    v36[1] = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v34, (BlueFin::GlGpsTime *)v36);
    BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)v36, (double)*((int *)a2 + 1) * 0.001, &v38);
    v37[1] = v38;
    v37[0] = &off_270EBC600;
    __n128 Time = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)a1, (const BlueFin::GlGpsTime *)v37, 1, (uint64_t)&v34);
    int v7 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(Time, v35);
  }
  else
  {
    int v7 = -7200001;
  }
  *(_DWORD *)(a1 + 356) = v7;
  double v8 = (float)((float)*((int *)a2 + 1) / 1000.0);
  *(double *)(a1 + 328) = v8;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(long double *)(a1 + 344) = fmod(v8 + 10800.0, 86400.0);
  *(_DWORD *)(a1 + 352) = 1114636288;
  int v9 = *a2;
  if (v9 >= 1)
  {
    if (v9 >= 14) {
      LOWORD(v9) = 14;
    }
    uint64_t v10 = (unsigned __int16)v9;
    unsigned int v11 = a2 + 8;
    do
    {
      unsigned int v12 = (unsigned __int16)*(v11 - 4);
      unsigned __int8 v13 = v12 + 1;
      if (v12 >= 0x20)
      {
        if (v12 - 119 > 0x12)
        {
          if (v12 - 192 > 9)
          {
            unsigned __int8 v13 = 0;
LABEL_26:
            GlCustomLog(14, "%d is not a valid GPS SVID \n", v13);
            goto LABEL_38;
          }
          unsigned __int8 v13 = v12 - 126;
        }
        else
        {
          unsigned __int8 v13 = v12 - 86;
        }
      }
      if ((v13 - 1) >= 0x20u) {
        goto LABEL_26;
      }
      uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[v13];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v14] == 255)
      {
        unsigned __int16 v16 = 575;
        uint64_t v15 = -1;
      }
      else
      {
        uint64_t v15 = 0;
        unsigned __int16 v16 = BlueFin::GlSignalId::s_ausGnss2signalId[v14]
            + v13
            - BlueFin::GlSvId::s_aucGnss2minSvId[v14];
      }
      v34.n128_u8[0] = v12 + 1;
      BlueFin::GlPeSatAidInfo::Add(a1 + 32, (unsigned __int8 *)&v34);
      if (v17)
      {
        *(unsigned char *)uint64_t v17 = v13;
        *(_DWORD *)(v17 + 4) = 0;
        *(unsigned char *)(v17 + 8) = v13;
        *(_DWORD *)(v17 + 20) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        *(_DWORD *)(v17 + 12) = 2;
        if (v16 >= 0x23Fu)
        {
          uint64_t v32 = "IsValid()";
          DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
          int v33 = 650;
          goto LABEL_47;
        }
        double v18 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v15 - v15 + v14]];
        if (v14 == 2) {
          double v18 = v18 + -4500000.0;
        }
        float v19 = (float)((float)*(v11 - 3) * 2.5) / v18;
        *(float *)(v17 + 44) = v19;
        *(_DWORD *)(*(void *)(a1 + 19304) + 4 * (v13 >> 5)) |= 1 << v13;
        int v20 = *(_DWORD *)(v17 + 24);
        int v21 = v20 | 0x10;
        *(_DWORD *)(v17 + 24) = v20 | 0x10;
        LOWORD(v22) = v11[7];
        if ((_WORD)v22)
        {
          int v21 = v20 | 0xD0;
          *(_DWORD *)(v17 + 24) = v20 | 0xD0;
          unsigned int v23 = (45 * v11[5] + 22) >> 2;
          unsigned int v22 = (45 * v11[4] + 22) >> 2;
        }
        else
        {
          LOWORD(v23) = 0;
        }
        *(_WORD *)(v17 + 74) = v23;
        *(_WORD *)(v17 + 72) = v22;
        unsigned int v24 = (unsigned __int16)*(v11 - 2);
        if (v24 > 0x3F || (unsigned int v25 = (unsigned __int16)*(v11 - 1), v25 >= 5))
        {
          unsigned int v25 = 0;
          *(v11 - 1) = 0;
        }
        if (v11[6] && v25 == 1)
        {
          float v29 = (float)((float)((float)(__int16)v24 / 42.0) + -1.0) / v18;
          float v30 = 200.0 / (double)2 / v18;
          *(float *)(v17 + 48) = v30;
          *(float *)(v17 + 52) = v29;
          v21 |= 0x20u;
          *(_DWORD *)(v17 + 24) = v21;
        }
        else
        {
          *(void *)(v17 + 48) = 835594383;
        }
        unsigned int v26 = BlueFin::GlSignalId::s_aulSignalIndexAndGnss2chipsPerEpoch[7 * (int)v15 + v14];
        if (!v26)
        {
          uint64_t v32 = "ucChipsPerEpoch != 0";
          DeviceFaultNotify("glsignalid.h", 784, "GetChipsPerEpoch", (char)"ucChipsPerEpoch != 0");
          int v33 = 784;
LABEL_47:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", v33, v32);
        }
        double v27 = (1.0 - (double)*v11 / (double)v26 + (double)(v11[1] + 20 * v11[2])) * -0.001 + 0.08;
        if (v27 < 0.04) {
          double v27 = v27 + 0.08;
        }
        *(double *)(v17 + 32) = -v27;
        float v28 = (double)word_263BB947C[v11[3]] / (double)v26 / 1000.0;
        *(float *)(v17 + 40) = v28;
        *(_DWORD *)(v17 + 24) = v21 | 0xE;
      }
LABEL_38:
      v11 += 12;
      --v10;
    }
    while (v10);
  }
  *(unsigned char *)(*(void *)(a1 + 18048) + 120017) = 1;
  uint64_t result = BlueFin::GlSatAidInfo::operator=(a1 + 9216, a1 + 320);
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 24))(result, 0, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRangeAidGen::SetAsstAcqAid(uint64_t a1, int *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (unsigned __int8 *)(a1 + 19040);
  uint64_t v6 = *(void *)(a1 + 18248);
  do
  {
    bzero(*(void **)(v6 + v4), ((4 * *(unsigned __int8 *)(v6 + v4 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v4 += 24;
  }
  while (v4 != 168);
  bzero(*(void **)(a1 + 19032), ((4 * *v5 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  int v7 = *a2;
  if (*a2 == 3)
  {
    unsigned int v9 = 2;
    int v8 = 1;
  }
  else if (v7 == 6)
  {
    int v8 = 0;
    unsigned int v9 = 4;
  }
  else
  {
    if (v7 != 5) {
      return GlCustomLog(14, "Do not support GANSS_ID (%d)\n");
    }
    int v8 = 0;
    unsigned int v9 = 5;
  }
  if (*((unsigned char *)a2 + 4)) {
    return GlCustomLog(14, "Do not support GANSS signal Id(%d)\n");
  }
  int v11 = *((__int16 *)a2 + 3);
  if (v11 >= 1)
  {
    if (v11 >= 14) {
      LOWORD(v11) = 14;
    }
    uint64_t v12 = (unsigned __int16)v11;
    unsigned __int8 v13 = (unsigned __int16 *)a2 + 7;
    float64x2_t v27 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
    do
    {
      if (v9 == 5)
      {
        int v14 = (__int16)*(v13 - 3);
        if (v14 >= 36)
        {
          GlCustomLog(14, "%d is not valid GALILEO SatID.\n");
          goto LABEL_36;
        }
      }
      else if (v9 == 4)
      {
        int v14 = (__int16)*(v13 - 3);
        if (v14 >= 63)
        {
          GlCustomLog(14, "%d is not valid BEIDOU SatID.\n");
          goto LABEL_36;
        }
      }
      else
      {
        int v14 = (__int16)*(v13 - 3);
        if (v14 >= 24)
        {
          GlCustomLog(14, "%d is not valid GLONASS SatID.\n");
          goto LABEL_36;
        }
      }
      char v15 = v14 + 1;
      unsigned int v29 = v9;
      char v30 = v14 + 1;
      BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 18048) + 119744), &v29, &v28);
      unsigned int v16 = v28;
      if (v28 - 1 >= 0xBC)
      {
        if (v8) {
          GlCustomLog(14, "Couldnot find FCN for GLONASS %d\n");
        }
        else {
          GlCustomLog(14, "Invalid SvId %d\n");
        }
        goto LABEL_36;
      }
      BlueFin::GlPeSatAidInfo::Add(a1 + 32, &v28);
      if (v17)
      {
        *(unsigned char *)uint64_t v17 = v16;
        *(_DWORD *)(v17 + 4) = v9;
        *(unsigned char *)(v17 + 8) = v15;
        *(_DWORD *)(v17 + 20) = 0;
        *(_DWORD *)(v17 + 24) = 0;
        *(_DWORD *)(v17 + 12) = 2;
        float v18 = (double)(__int16)*(v13 - 2) * 0.5 / 299792458.0;
        *(float *)(v17 + 44) = v18;
        *(_DWORD *)(*(void *)(a1 + 19304) + 4 * (v16 >> 5)) |= 1 << v16;
        int v19 = *(_DWORD *)(v17 + 24);
        LOWORD(v20) = v13[7];
        if ((_WORD)v20)
        {
          int v21 = v19 | 0xD0;
          *(_DWORD *)(v17 + 24) = v21;
          unsigned int v20 = (45 * (__int16)v13[5] + 22) >> 2;
          unsigned int v22 = (45 * (__int16)v13[4] + 22) >> 2;
        }
        else
        {
          LOWORD(v22) = 0;
          int v21 = v19 | 0x10;
        }
        *(_WORD *)(v17 + 74) = v20;
        *(_WORD *)(v17 + 72) = v22;
        unsigned int v23 = *(v13 - 1);
        if (v23 > 0x3F || (unsigned int v24 = *v13, v24 > 4))
        {
          *unsigned __int8 v13 = 0;
          goto LABEL_34;
        }
        if (*v13 && v13[6])
        {
          v25.f64[0] = (float)(40.0 / (float)(1 << v24));
          v25.f64[1] = (double)(int)(v23 - 42) / 210.0;
          *(float32x2_t *)(v17 + 48) = vcvt_f32_f64(vdivq_f64(v25, v27));
          v21 |= 0x20u;
        }
        else
        {
LABEL_34:
          *(void *)(v17 + 48) = 835594383;
        }
        *(double *)(v17 + 32) = (double)(__int16)v13[1] * 0.0009765625 / 1000.0 - (double)(__int16)v13[2] / 1000.0;
        *(float *)(v17 + 40) = (float)((float)BlueFin::GlPeRangeAidGen::SetAsstAcqAid(BlueFin::GANSS_ACQ_AID *)::asCodePhaseSearchWindow[(__int16)v13[3]]
                                     / 1000.0)
                             / 1000.0;
        *(_DWORD *)(v17 + 24) = v21 | 0xE;
      }
LABEL_36:
      v13 += 11;
      --v12;
    }
    while (v12);
  }
  v5[316] = 1;
  *(unsigned char *)(*(void *)(a1 + 18048) + 120017) = 1;
  uint64_t result = BlueFin::GlSatAidInfo::operator=(a1 + 9216, a1 + 320);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    unsigned int v26 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v26();
  }
  return result;
}

void BlueFin::GlPeRangeAidGen::RemoveSvFromEph(uint64_t a1, int a2, unsigned __int8 a3)
{
  *(_DWORD *)&v10[1] = a2;
  v10[5] = a3;
  BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)(a1 + 18048) + 119744), (unsigned int *)&v10[1], v10);
  if (v10[0] - 1 <= 0xBB)
  {
    BlueFin::GlPeSatAidInfo::Remove(a1 + 32, v10);
    (*(void (**)(void, unsigned __int8 *))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), v10);
    BlueFin::GlSetBase::Remove(a1 + 19032, v10[0]);
    if (*(_DWORD *)(*(void *)(a1 + 18048) + 100) != -1)
    {
      unint64_t v4 = *(void *)a1;
      if (*(_DWORD *)(*(void *)a1 + 2576))
      {
        unsigned int v5 = *(_DWORD *)(a1 + 356);
        if (v5 <= 0xFF9222FE) {
          double v6 = (double)v5;
        }
        else {
          double v6 = (double)(int)v5;
        }
        double v8 = 0.0;
        double v9 = 0.0;
        BlueFin::GlPeTimeManager::GetDtsS(v4, v6, &v9, &v8, 0, 0);
        int v7 = 4;
        BlueFin::GlPeRangeAidGen::AddRngAid(a1, v10, (uint64_t)&v10[1], (uint64_t)&v7, v6 - v9);
      }
    }
  }
}

uint64_t BlueFin::GlPeRtiData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 6;
  }
  if (v5 >= 7)
  {
    DeviceFaultNotify("glpe_rti_requestor.cpp", 69, "SerializeImpl", (char)"ucVersion <= 6");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rti_requestor.cpp", 69, "ucVersion <= 6");
  }
  uint64_t v6 = v3;
  int v7 = (int *)v2;
  if (v5 > 4)
  {
    LODWORD(v8) = 8;
    if (v3) {
      goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v8) = __const__ZN7BlueFin11GlPeRtiData11DeserializeERNS_13GlSysLogEntryE_aiVersionToNumGnss[v5];
    if (v3) {
      goto LABEL_11;
    }
  }
  if (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    return 0;
  }
LABEL_11:
  int v17 = 64;
  char v18 = v5;
  uint64_t v19 = 0x1000000000000;
  unsigned int v16 = &unk_270EBA2F0;
  char v20 = v5;
  if (v5 < 5 || (BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v16, v8), v5 == 5))
  {
    if ((int)v8 >= 1)
    {
      double v9 = v7 + 4;
      uint64_t v8 = v8;
      uint64_t v10 = v8;
      do
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v16, *v9);
        v9 += 2;
        --v10;
      }
      while (v10);
      int v11 = v7 + 20;
      do
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v16, *v11);
        v11 += 2;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if ((int)v8 < 1)
    {
LABEL_26:
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v16, v7[36]);
      goto LABEL_27;
    }
    unsigned __int8 v13 = (uint64_t *)(v7 + 4);
    uint64_t v8 = v8;
    uint64_t v14 = v8;
    do
    {
      BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v16, *v13++);
      --v14;
    }
    while (v14);
    char v15 = (uint64_t *)(v7 + 20);
    do
    {
      BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v16, *v15++);
      --v8;
    }
    while (v8);
  }
  if (v5 >= 2) {
    goto LABEL_26;
  }
LABEL_27:
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v16, v6, 4);
  return 1;
}

uint64_t BlueFin::GlPeRtiEmergencyData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_rti_requestor.cpp", 225, "SerializeImpl", (char)"ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rti_requestor.cpp", 225, "ucVersion <= 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  int v13 = 102;
  char v14 = v5;
  uint64_t v15 = 0x1000000000000;
  uint64_t v12 = &unk_270EBA2F0;
  char v16 = v5;
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v2 + 144));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, 8);
  for (uint64_t i = 0; i != 64; i += 8)
    BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v12, *(void *)(v7 + 16 + i));
  uint64_t v9 = 0;
  uint64_t v10 = v7 + 80;
  do
  {
    BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v12, *(void *)(v10 + v9));
    v9 += 8;
  }
  while (v9 != 64);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v6, 4);
  return 1;
}

BOOL BlueFin::GlPeRtiEmergencyData::Deserialize(BlueFin::GlPeRtiEmergencyData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v3 = *((_DWORD *)a2 + 2) == 102 && *((unsigned __int8 *)a2 + 12) < 2u;
  if (v3)
  {
    *((_DWORD *)this + 36) = BlueFin::GlSysLogEntry::GetU32(a2);
    unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    if (U8 >= 9)
    {
      DeviceFaultNotify("glpe_rti_requestor.cpp", 258, "Deserialize", (char)"iNumGnss <= _DIM(m_otRti.ganssInfoAvailList.aullImplGnssMask)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_rti_requestor.cpp", 258, "iNumGnss <= _DIM(m_otRti.ganssInfoAvailList.aullImplGnssMask)");
    }
    *((void *)this + 17) = 0;
    *(_OWORD *)((char *)this + 120) = 0u;
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
    if (U8)
    {
      uint64_t v7 = (void *)((char *)this + 16);
      uint64_t v8 = U8;
      uint64_t v9 = U8;
      do
      {
        *v7++ = BlueFin::GlSysLogEntry::GetU64(a2);
        --v9;
      }
      while (v9);
      uint64_t v10 = (void *)((char *)this + 80);
      do
      {
        *v10++ = BlueFin::GlSysLogEntry::GetU64(a2);
        --v8;
      }
      while (v8);
    }
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 272);
  }
  return v3;
}

void BlueFin::GlPeRtiRequestHelper::~GlPeRtiRequestHelper(BlueFin::GlPeRtiRequestHelper *this)
{
}

void BlueFin::GlPeRtiRequestor::~GlPeRtiRequestor(BlueFin::GlPeRtiRequestor *this)
{
}

uint64_t BlueFin::GlPeRtiRequestor::Serialize(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = &unk_270EC19B8;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, 28);
  if (!*(unsigned char *)(a1 + 56) || (void **)(a1 + 64) == &v7)
  {
    if (!*(unsigned char *)(a1 + 56)) {
      return 0;
    }
  }
  else
  {
    long long v2 = *(_OWORD *)(a1 + 152);
    long long v3 = *(_OWORD *)(a1 + 184);
    long long v14 = *(_OWORD *)(a1 + 168);
    v15[0] = v3;
    *(void *)&v15[1] = *(void *)(a1 + 200);
    long long v4 = *(_OWORD *)(a1 + 88);
    long long v5 = *(_OWORD *)(a1 + 120);
    long long v10 = *(_OWORD *)(a1 + 104);
    long long v11 = v5;
    long long v12 = *(_OWORD *)(a1 + 136);
    long long v13 = v2;
    long long v8 = *(_OWORD *)(a1 + 72);
    long long v9 = v4;
    DWORD2(v15[1]) = *(_DWORD *)(a1 + 208);
  }
  if (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    return BlueFin::GlPeRtiData::SerializeImpl((uint64_t)&v7, a2);
  }
  return 0;
}

#error "263AECCCC: call analysis failed (funcsize=47)"

void BlueFin::GlPeRtiRequestor::onRtiExitEmergencySession(BlueFin::GlPeRtiRequestor *this)
{
  uint64_t v19 = &unk_270EC19B8;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, 28);
  if (*((unsigned char *)this + 56) && (void **)((char *)this + 64) != &v19)
  {
    long long v2 = *(_OWORD *)((char *)this + 152);
    long long v3 = *(_OWORD *)((char *)this + 184);
    long long v26 = *(_OWORD *)((char *)this + 168);
    v27[0] = v3;
    *(void *)&v27[1] = *((void *)this + 25);
    long long v4 = *(_OWORD *)((char *)this + 88);
    long long v5 = *(_OWORD *)((char *)this + 120);
    long long v22 = *(_OWORD *)((char *)this + 104);
    long long v23 = v5;
    long long v24 = *(_OWORD *)((char *)this + 136);
    long long v25 = v2;
    long long v20 = *(_OWORD *)((char *)this + 72);
    long long v21 = v4;
    DWORD2(v27[1]) = *((_DWORD *)this + 52);
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(*((void *)this + 2) + 2504);
  do
  {
    bzero(*(void **)(v7 + v6), ((4 * *(unsigned __int8 *)(v7 + v6 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v6 += 24;
  }
  while (v6 != 168);
  bzero(*(void **)(*((void *)this + 28) + 54632), ((4 * *(unsigned __int8 *)(*((void *)this + 28) + 54640) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  long long v14 = v25;
  long long v15 = v26;
  long long v16 = v27[0];
  long long v10 = v21;
  long long v11 = v22;
  long long v12 = v23;
  long long v13 = v24;
  long long v8 = &unk_270EC19E8;
  uint64_t v17 = *(void *)&v27[1];
  long long v9 = v20;
  int v18 = 2;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      BlueFin::GlPeRtiEmergencyData::SerializeImpl((uint64_t)&v8, 0);
    }
  }
}

void BlueFin::GlPeRtiEmergencyData::~GlPeRtiEmergencyData(BlueFin::GlPeRtiEmergencyData *this)
{
}

void BlueFin::GlPeRtiData::~GlPeRtiData(BlueFin::GlPeRtiData *this)
{
}

unint64_t BlueFin::GlPeStartupMgr::Dispose(unint64_t this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    int v1 = (_DWORD *)this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xD);
    if (this)
    {
      GlCustomLog(13, "%s CL: %u\n", "__REPORT__ ", 612249);
      GlCustomLog(13, "%s Branch: %s\n", "__REPORT__ ", "//depot/client/core/rel/Olympic/OSX_20.24.559185.v8.0/...");
      GlCustomLog(13, "%s Folder: [UNC Path of the files referenced in JIRA]\n", "__REPORT__ ");
      GlCustomLog(13, "%s IssueLogFile: [Name only of attached slog, slog$ (optional), kmz file(s) exhibiting problem]\n", "__REPORT__ ");
      GlCustomLog(13, "%s ReferenceLogFile: [Name only  of reference log, slog$ (optional), kmz file(s) that does not have issue]\n", "__REPORT__ ");
      uint64_t v3 = 0;
      int v4 = 0;
      v7[0] = 0;
      do
      {
        unsigned int v5 = v1[v3 + 14];
        if (v5 == -7200001) {
          break;
        }
        v4 += BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v7[v4], (char *)(145 - v4), "%.3f,", v2, (double)v5 * 0.001);
        ++v3;
      }
      while (v3 != 12);
      if (v4 <= 1) {
        int v6 = 1;
      }
      else {
        int v6 = v4;
      }
      v7[v6 - 1] = 0;
      if (v1[13] == -7200001) {
        GlCustomLog(13, "%s Time To RefTime: [GOOD|BAD] NOT RECEIVED\n");
      }
      else {
        GlCustomLog(13, "%s Time To RefTime: [GOOD|BAD] %.3f Seconds\n");
      }
      if (v1[12] == -7200001) {
        GlCustomLog(13, "%s Time To RefPosition: [GOOD|BAD] NOT RECEIVED\n");
      }
      else {
        GlCustomLog(13, "%s Time To RefPosition: [GOOD|BAD] %.3f Seconds\n");
      }
      if (v1[14] == -7200001) {
        GlCustomLog(13, "%s Time To All Ephemeris: [GOOD|BAD] NOT RECEIVED\n");
      }
      else {
        GlCustomLog(13, "%s Time To All Ephemeris: [GOOD|BAD] %s Seconds\n");
      }
      if (v1[16] == -7200001) {
        GlCustomLog(13, "%s Time To Three Ephemeris: [GOOD|BAD] NOT RECEIVED\n");
      }
      else {
        GlCustomLog(13, "%s Time To Three Ephemeris: [GOOD|BAD] %.3f Seconds\n");
      }
      if (v1[11] == -7200001) {
        return GlCustomLog(13, "%s Time To CNTIN: [GOOD|BAD] NOT RECEIVED\n");
      }
      else {
        return GlCustomLog(13, "%s Time To CNTIN: [GOOD|BAD] %.3f Seconds\n");
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeSvHealthData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v30 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 6;
  }
  if (v5 >= 7)
  {
    DeviceFaultNotify("glpe_svhealthmgr.cpp", 67, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 6");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svhealthmgr.cpp", 67, "ucVersion >= 1 && ucVersion <= 6");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  int v26 = 63;
  char v27 = v5;
  uint64_t v28 = 0x1000000000000;
  long long v25 = &unk_270EBA2F0;
  char v29 = v5;
  if (v5 == 1)
  {
    char v8 = 0;
    uint64_t v9 = 29;
LABEL_10:
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v25, v8);
    goto LABEL_15;
  }
  if (v5 >= 3)
  {
    char v8 = 92;
    uint64_t v9 = 92;
    goto LABEL_10;
  }
  uint64_t v9 = 29;
LABEL_15:
  long long v11 = (int *)(v7 + 8);
  do
  {
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *v11++);
    --v9;
  }
  while (v9);
  if (v5 == 1)
  {
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, 0);
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *(_DWORD *)(v7 + 376));
  }
  else
  {
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *(_DWORD *)(v7 + 376));
    if (v5 >= 5)
    {
      uint64_t v12 = 0;
      int v16 = 32;
      uint64_t v17 = v7 + 764;
      int v18 = 10;
      uint64_t v15 = v7 + 380;
      uint64_t v19 = v7 + 884;
      int v20 = 63;
      uint64_t v21 = v7 + 1640;
      int v22 = 36;
      uint64_t v23 = v7 + 2072;
      int v24 = 14;
      do
      {
        uint64_t v13 = *((unsigned int *)&v15 + 4 * v12 + 2);
        if ((int)v13 >= 1)
        {
          long long v14 = (int *)(*(&v15 + 2 * v12) + 4);
          do
          {
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *(v14 - 1));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, v14[1]);
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *v14);
            v14 += 3;
            --v13;
          }
          while (v13);
        }
        ++v12;
      }
      while (v12 != 5);
      BlueFin::GlSysLogEntry::PutBuffer((BlueFin::GlSysLogEntry *)&v25, (const unsigned __int8 *)(v7 + 2240), 16);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v25, *(_DWORD *)(v7 + 2256));
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v25, v6, 4);
  return 1;
}

uint64_t *BlueFin::GlPeSvHealthData::SetTimeout(uint64_t a1, unsigned int *a2, int a3)
{
  int Index = BlueFin::GlPeSvHealthData::getIndex(a1, a2);
  if (Index <= 31)
  {
    DeviceFaultNotify("glpe_svhealthmgr.cpp", 279, "SetTimeout", (char)"iIndex >= 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svhealthmgr.cpp", 279, "iIndex >= 0");
  }
  v7[0] = a1 + 8;
  v7[1] = 0;
  char v8 = 0;
  int v10 = 0;
  long long v9 = xmmword_263BB9590;
  char v11 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v7, 14 * Index + 146);
  return BlueFin::GlBitBuffer::PutU(v7, a3 + 0x4000, 0xEu);
}

uint64_t BlueFin::GlPeSvHealthData::GetTimeout(uint64_t a1, unsigned int *a2)
{
  int Index = BlueFin::GlPeSvHealthData::getIndex(a1, a2);
  if (Index <= 31)
  {
    DeviceFaultNotify("glpe_svhealthmgr.cpp", 291, "GetTimeout", (char)"iIndex >= 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svhealthmgr.cpp", 291, "iIndex >= 0");
  }
  v7[0] = 0;
  v7[1] = a1 + 8;
  char v8 = 1;
  int v10 = 0;
  long long v9 = xmmword_263BB9590;
  char v11 = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v7, 14 * Index + 146);
  int v4 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v7, 0xEu);
  if ((v4 & 0xFFFFE000) == 0x2000) {
    int v5 = -16384;
  }
  else {
    int v5 = 0;
  }
  return (v5 + v4);
}

unint64_t BlueFin::GlPeSvHealthHelper::OnEmergencyIntegrityInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25,unsigned __int8 a26)
{
  unint64_t result = (unint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v42, (const BlueFin::GlGnssSet *)&BlueFin::GlPeSvHealthHelper::s_otAllSvs);
  uint64_t v29 = a25;
  BOOL v30 = a25 == 6;
  int v31 = a26;
  if (a25 != 6 || a26 != 14)
  {
    uint64_t v33 = a1 + 2304;
    do
    {
      uint64_t v34 = 1 << (v31 - 1);
      uint64_t v35 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v29];
      if ((v34 & *(void *)(a2 + 8 + 8 * v35)) != 0)
      {
        uint64_t v36 = *(void *)(a2 + 72 + 8 * v35);
        int v40 = v29;
        char v41 = v31;
        if ((v36 & v34) != 0)
        {
          BlueFin::GlGnssSet::Add(v33, &v40);
          int v37 = "BDS";
          uint64_t v38 = "GPS";
          switch(v29)
          {
            case 0:
              break;
            case 1:
              uint64_t v38 = "SBAS";
              break;
            case 2:
              uint64_t v38 = "GLNS";
              break;
            case 3:
              uint64_t v38 = "QZSS";
              break;
            case 4:
              goto LABEL_15;
            default:
              uint64_t v39 = "<->";
              if (v30) {
                uint64_t v39 = "NIC";
              }
              int v37 = "GAL";
              if (v29 != 5) {
                int v37 = v39;
              }
LABEL_15:
              uint64_t v38 = v37;
              break;
          }
          GlCustomLog(14, "SVHM: Health(%s,%2d):  Set as Emergency!\n", v38, v31);
        }
        else
        {
          BlueFin::GlGnssSet::Remove(v33, (uint64_t)&v40);
        }
      }
      unint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&v42);
      uint64_t v29 = a25;
      BOOL v30 = a25 == 6;
      int v31 = a26;
    }
    while (a25 != 6 || a26 != 14);
  }
  return result;
}

unint64_t BlueFin::GlPeSvHealthHelper::OnBlocklistIntegrityInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned int a25,unsigned __int8 a26)
{
  unint64_t result = (unint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&v41, (const BlueFin::GlGnssSet *)&BlueFin::GlPeSvHealthHelper::s_otAllSvs);
  uint64_t v29 = a25;
  BOOL v30 = a25 == 6;
  int v31 = a26;
  if (a25 != 6 || a26 != 14)
  {
    uint64_t v33 = a1 + 2496;
    do
    {
      int v39 = v29;
      char v40 = v31;
      uint64_t v34 = 1 << (v31 - 1);
      uint64_t v35 = BlueFin::GlImplGnss::m_aucEnabledGnssTable[v29];
      if ((*(void *)(a2 + 8 + 8 * v35) & v34) != 0)
      {
        if ((*(void *)(a2 + 72 + 8 * v35) & v34) != 0)
        {
          BlueFin::GlGnssSet::Add(v33, &v39);
          uint64_t v36 = "BDS";
          int v37 = "GPS";
          switch(v29)
          {
            case 0:
              break;
            case 1:
              int v37 = "SBAS";
              break;
            case 2:
              int v37 = "GLNS";
              break;
            case 3:
              int v37 = "QZSS";
              break;
            case 4:
              goto LABEL_15;
            default:
              uint64_t v38 = "<->";
              if (v30) {
                uint64_t v38 = "NIC";
              }
              uint64_t v36 = "GAL";
              if (v29 != 5) {
                uint64_t v36 = v38;
              }
LABEL_15:
              int v37 = v36;
              break;
          }
          GlCustomLog(14, "SVHM: Health(%s,%2d):  Set as Blocklist!\n", v37, v31);
        }
        else
        {
          BlueFin::GlGnssSet::Remove(v33, (uint64_t)&v39);
        }
      }
      unint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&v41);
      uint64_t v29 = a25;
      BOOL v30 = a25 == 6;
      int v31 = a26;
    }
    while (a25 != 6 || a26 != 14);
  }
  return result;
}

uint64_t *BlueFin::GlPeSvHealthHelper::SetTimeout(uint64_t a1, unsigned int *a2, int a3)
{
  unint64_t result = BlueFin::GlPeSvHealthData::SetTimeout(a1, a2, a3);
  *(unsigned char *)(a1 + 2272) = 1;
  return result;
}

void BlueFin::GlPeSvHealthMgr::~GlPeSvHealthMgr(BlueFin::GlPeSvHealthMgr *this)
{
}

uint64_t BlueFin::GlPeGnssL5HealthData::PrepareLtoL5HealthUpdate(BlueFin::GlPeGnssL5HealthData *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned int a31,unsigned __int8 a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v62 = 0;
  a61 = *MEMORY[0x263EF8340];
  a57 = &a36;
  do
  {
    unsigned int v63 = &a57[v62];
    uint64_t v64 = &a57[v62];
    *(void *)(v64 + 12) = 0;
    *(void *)unsigned int v63 = v64 + 12;
    v63[8] = 2;
    v62 += 24;
  }
  while (v62 != 168);
  for (unsigned int i = 0; i != 7; ++i)
    BlueFin::GlGnssSet::SetAll((uint64_t)&a36, i);
  uint64_t result = (uint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&vars0, (const BlueFin::GlGnssSet *)&a36);
  unsigned int v67 = a31;
  for (int j = a32; a31 != 6 || a32 != 14; int j = a32)
  {
    unsigned int v71 = v67;
    char v72 = j;
    if (!j)
    {
      DeviceFaultNotify("glpe_svhealthmgr.cpp", 1228, "PrepareLtoL5HealthUpdate", (char)"*otCurGnss.otGnssId != INVALID_GNSS_ID");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svhealthmgr.cpp", 1228, "*otCurGnss.otGnssId != INVALID_GNSS_ID");
    }
    uint64_t L5HealthData = BlueFin::GlPeGnssL5HealthData::getL5HealthData((uint64_t)this, &v71);
    if (L5HealthData && *(_DWORD *)(L5HealthData + 4) == 2)
    {
      *(void *)uint64_t L5HealthData = 0;
      *(_DWORD *)(L5HealthData + 8) = 0;
    }
    uint64_t result = BlueFin::GlGnssSetIterator::operator++((uint64_t)&vars0);
    unsigned int v67 = a31;
  }
  return result;
}

void BlueFin::GlPeSvHealthData::~GlPeSvHealthData(BlueFin::GlPeSvHealthData *this)
{
}

void BlueFin::GlPeSvHealthHelper::~GlPeSvHealthHelper(BlueFin::GlPeSvHealthHelper *this)
{
}

uint64_t _GLOBAL__sub_I_glpe_svhealthmgr_cpp()
{
  uint64_t v0 = 0;
  qword_26B434168 = (uint64_t)&BlueFin::GlPeSvHealthHelper::s_otAllSvs;
  do
  {
    uint64_t v1 = qword_26B434168 + v0;
    uint64_t v2 = qword_26B434168 + v0;
    *(void *)(v2 + 12) = 0;
    *(void *)uint64_t v1 = v2 + 12;
    *(unsigned char *)(v1 + 8) = 2;
    v0 += 24;
  }
  while (v0 != 168);
  return __cxa_atexit((void (*)(void *))BlueFin::GlGnssSet::~GlGnssSet, &BlueFin::GlPeSvHealthHelper::s_otAllSvs, &dword_2638D2000);
}

uint64_t BlueFin::GlPeSvIdConverter::SvId2PossibleGnss(BlueFin::GlPeGloFcnOsnMgr **a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a3 = 7;
  *(unsigned char *)(a3 + 4) = 0;
  *(_DWORD *)a4 = 7;
  *(unsigned char *)(a4 + 4) = 0;
  unsigned int v4 = *a2;
  if (!*a2) {
    return 0;
  }
  if (v4 < 0x21)
  {
    unsigned int v6 = 0;
LABEL_11:
    char v12 = v4 - BlueFin::GlSvId::s_aucGnss2minSvId[v6] + 1;
    *(_DWORD *)a3 = v6;
    *(unsigned char *)(a3 + 4) = v12;
    return 1;
  }
  if (v4 < 0x34)
  {
    unsigned int v6 = 1u;
    goto LABEL_11;
  }
  if (v4 >= 0x42)
  {
    if (v4 < 0x4C)
    {
      unsigned int v6 = 3u;
      goto LABEL_11;
    }
    if (v4 < 0x8B)
    {
      unsigned int v6 = 4u;
      goto LABEL_11;
    }
    if (v4 < 0xAF)
    {
      unsigned int v6 = 5u;
      goto LABEL_11;
    }
    if (v4 < 0xBD)
    {
      unsigned int v6 = 6u;
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v7 = *a1;
  if (!v7)
  {
    unsigned int v6 = 2u;
    goto LABEL_11;
  }
  *(_WORD *)uint64_t v13 = 0;
  uint64_t result = BlueFin::GlPeGloFcnOsnMgr::GetPossibleOsnsForFcn(v7, (char)(v4 - 59), &v13[1], v13);
  if (result)
  {
    unsigned __int8 v10 = v13[1];
    *(_DWORD *)a3 = 2;
    *(unsigned char *)(a3 + 4) = v10;
    if (result == 2)
    {
      unsigned __int8 v11 = v13[0];
      *(_DWORD *)a4 = 2;
      *(unsigned char *)(a4 + 4) = v11;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeSvVisibilityCacheData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_svvisibilitycache.cpp", 98, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_svvisibilitycache.cpp", 98, "ucVersion >= 1 && ucVersion <= 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  int v16 = 84;
  char v17 = 1;
  uint64_t v18 = 0x1000000000000;
  uint64_t v15 = &unk_270EBA2F0;
  char v19 = 1;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, 12);
  for (uint64_t i = 0; i != 96; i += 8)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(*(void *)(v6 + 128) + i)));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)(v6 + 128) + i + 1));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)(v6 + 128) + i + 4));
  }
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 32))(v6 + 8);
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v8 / 0x93A80);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 32))(v6 + 8);
  LODWORD(v10) = *(_DWORD *)(v6 + 16);
  double v11 = ((double)v10 * 2.32830644e-10 + (double)(v9 % 0x93A80)) * 1000.0;
  double v12 = fmod(v11, 4294967300.0);
  if (v11 <= 4294967300.0) {
    double v12 = v11;
  }
  if (v12 < -4294967300.0) {
    double v12 = -fmod(-v12, 4294967300.0);
  }
  if (v12 < 0.0) {
    int v13 = --v12;
  }
  else {
    int v13 = v12;
  }
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v13);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeSvVisibilityCache::Serialize(BlueFin::GlPeSvVisibilityCache *this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t result = BlueFin::GlPeSvVisibilityCache::GetSvVisibilityArraySize(this);
  if ((int)result >= 1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = (unsigned __int16)result;
    do
    {
      if (v6 >= 0xA) {
        unsigned int v8 = (void *)*((void *)this + 204);
      }
      else {
        unsigned int v8 = (void *)(*((void *)this + 204) + v5);
      }
      uint64_t result = (*(uint64_t (**)(void))(v8[1] + 32))();
      if (result >= 0x93A80
        && (a2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)))
      {
        uint64_t result = (*(uint64_t (**)(void *, BlueFin::GlPeEngineCallBacks *, void))(*v8 + 24))(v8, a2, 0);
      }
      ++v6;
      v5 += 160;
    }
    while (v7 != v6);
  }
  return result;
}

void BlueFin::GlPeSvVisibilityCacheData::~GlPeSvVisibilityCacheData(BlueFin::GlPeSvVisibilityCacheData *this)
{
}

uint64_t BlueFin::GlPeTowAssistMgr::SetAsstTime(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 0x20 || !a3)
  {
    double v12 = "pastTowAssist && ucNumSatsTotal <= MAX_TOW_ASSIST_SVS";
    DeviceFaultNotify("glpe_towassistmgr.cpp", 51, "SetAsstTime", (char)"pastTowAssist && ucNumSatsTotal <= MAX_TOW_ASSIST_SVS");
    int v13 = 51;
    goto LABEL_19;
  }
  LODWORD(v4) = a2;
  unint64_t v6 = (BlueFin::GlArray *)(a1 + 16);
  BlueFin::GlArray::Clear(a1 + 16);
  *(_DWORD *)(a1 + 376) = 0x7FFFFFFF;
  if (v4)
  {
    uint64_t v4 = v4;
    uint64_t v7 = (unsigned __int8 *)(a3 + 4);
    while (1)
    {
      unsigned int v8 = *(v7 - 4);
      if (v8 > 0x3F || (*((_WORD *)v7 - 1) & 0xC000) != 0 || *v7 > 1u || v7[1] > 1u || v7[2] >= 4u) {
        break;
      }
      if (v8 <= 0x1F)
      {
        char v9 = v8 + 1;
        unint64_t v10 = BlueFin::GlArray::Add(v6, v8 + 1);
        if (v10)
        {
          *unint64_t v10 = *(void *)(v7 - 4);
          *(unsigned char *)unint64_t v10 = v9;
        }
      }
      v7 += 8;
      if (!--v4) {
        goto LABEL_14;
      }
    }
    double v12 = "pTowAsst->ucSatId <= MAX_SATID && pTowAsst->usTlmMessage <= MAX_TLM_MESSAGE && pTowAsst->ucAntiSpoof <= MAX_BO"
          "OL && pTowAsst->ucAlert <= MAX_BOOL && pTowAsst->ucTLMreserved <= MAX_TLM_RESERVED";
    DeviceFaultNotify("glpe_towassistmgr.cpp", 57, "SetAsstTime", (char)"pTowAsst->ucSatId <= MAX_SATID && pTowAsst->usTlmMessage <= MAX_TLM_MESSAGE && pTowAsst->ucAntiSpoof <= MAX_BOOL && pTowAsst->ucAlert <= MAX_BOOL && pTowAsst->ucTLMreserved <= MAX_TLM_RESERVED");
    int v13 = 57;
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_towassistmgr.cpp", v13, v12);
  }
LABEL_14:
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(uint64_t, void, void))(*(void *)(a1 + 8) + 24))(a1 + 8, 0, 0);
  }
  return 1;
}

uint64_t BlueFin::GlPeSbasEphemeris::GlPeSbasEphemeris(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 8) = 2065;
  *(void *)(a1 + 16) = a1 + 32;
  *(int32x2_t *)(a1 + 24) = vdup_n_s32(0xFF9222FF);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_270EC1BF0;
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)a1, 0, (*(unsigned char *)a2 + 1));
  if (a3) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = 2;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 1, v6);
  int v7 = *(_DWORD *)(a2 + 4);
  unsigned int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, 33) * v7;
  unsigned int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 232))(a1, 33);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 33, v8 % 0x15180 / v9);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 4, *(unsigned __int8 *)(a2 + 8));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 34, *(unsigned int *)(a2 + 12));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 35, *(unsigned int *)(a2 + 16));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 36, *(unsigned int *)(a2 + 20));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 37, *(unsigned int *)(a2 + 24));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 38, *(unsigned int *)(a2 + 28));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 39, *(unsigned int *)(a2 + 32));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 40, *(unsigned int *)(a2 + 36));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 41, *(unsigned int *)(a2 + 40));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 42, *(unsigned int *)(a2 + 44));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 10, *(unsigned int *)(a2 + 48));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 224))(a1, 9, *(unsigned int *)(a2 + 52));
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216);
  if (*(_WORD *)(a2 + 2))
  {
    v10(a1, 43, 1);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 216))(a1, 44, v8 / 0x15180uLL);
    uint64_t v11 = *(unsigned __int16 *)(a2 + 2);
  }
  else
  {
    v10(a1, 43, 0);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 44, 0);
    uint64_t v11 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 216))(a1, 28, v11);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 216))(a1, 2, 0);
  return a1;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetFctS(BlueFin::GlPeSbasEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  BlueFin::GlPeEphemeris::GetEphTime(this, a2, (uint64_t)v7);
  unsigned int v8 = &off_270EBC600;
  uint64_t v9 = 0;
  BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v7, (BlueFin::GlGpsTime *)&v8);
  unsigned int v2 = ((uint64_t (*)(void))v8[4])(&v8);
  LODWORD(v3) = v9;
  double v4 = (double)v3 * 2.32830644e-10 + (double)v2;
  double v5 = fmod(v4, 4294967300.0);
  if (v4 <= 4294967300.0) {
    double v5 = v4;
  }
  if (v5 < -4294967300.0) {
    double v5 = -fmod(-v5, 4294967300.0);
  }
  if (v5 < 0.0) {
    return --v5;
  }
  else {
    return v5;
  }
}

BOOL BlueFin::GlPeSbasEphemeris::isHealthy(BlueFin::GlPeSbasEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 4) != 15;
}

uint64_t BlueFin::GlPeSbasEphemeris::isSimulated(BlueFin::GlPeSbasEphemeris *this)
{
  return 0;
}

uint64_t BlueFin::GlPeSbasEphemeris::ComputeAgeS(BlueFin::GlPeSbasEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  char v27 = &off_270EBC600;
  uint64_t v28 = 0;
  BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v27);
  unsigned int v4 = ((uint64_t (*)(void))v27[4])(&v27);
  LODWORD(v5) = v28;
  uint64_t v6 = *(void *)this;
  if ((double)v5 * 2.32830644e-10 + (double)v4 < 0.0) {
    return (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *))(v6 + 88))(this);
  }
  if ((*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *))(v6 + 80))(this))
  {
    int v8 = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 33);
    unsigned int v9 = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 232))(this, 33) * v8;
    LOBYTE(v8) = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 44);
    unsigned __int16 v10 = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 28);
    int v11 = v8;
    unsigned int v12 = v10;
  }
  else
  {
    LOWORD(v22) = 2065;
    int v24 = v26;
    int32x2_t v25 = vdup_n_s32(0xFF9222FF);
    long long v13 = *((_OWORD *)this + 3);
    v26[0] = *((_OWORD *)this + 2);
    v26[1] = v13;
    uint64_t v21 = (void (**)(BlueFin::GlGpsTime *__hidden))&unk_270EC1BF0;
    BlueFin::GlPeSbasEphemeris::SetEphTime((BlueFin::GlPeSbasEphemeris *)&v21, a2);
    int v14 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), uint64_t))v21[24])(&v21, 33);
    unsigned int v9 = ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), uint64_t))v21[29])(&v21, 33)
       * v14;
    int v11 = (*((_DWORD *)v24 + 6) >> 9) & 7;
    HIDWORD(v15) = *((_DWORD *)v24 + 6);
    LODWORD(v15) = *((_DWORD *)v24 + 7);
    unsigned int v12 = (v15 >> 9) >> 22;
  }
  unint64_t v16 = (86400 * v11) + (unint64_t)v9;
  uint64_t v21 = &off_270EBC600;
  double v17 = fmod((double)v16, 1.0);
  if (v17 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v18 = v17 * 4294967300.0 + 0.5;
  unsigned int v19 = v18;
  if (v18 >= 4294967300.0) {
    unsigned int v19 = -1;
  }
  unsigned int v22 = v19;
  unsigned int v23 = v16 + 604800 * v12;
  uint64_t v21 = &off_270EBC600;
  unsigned int v30 = v19;
  unsigned int v31 = v23;
  unsigned int v20 = ((uint64_t (*)(void))v27[4])(&v27);
  v29[0] = v28;
  v29[1] = v20;
  BlueFin::GlTimePoint::resolveAmbiguity(&v30, v29, 0x24EA0000u);
  return ((uint64_t (*)(void (***)(BlueFin::GlGpsTime *__hidden), void))v27[3])(&v27, v31);
}

uint64_t BlueFin::GlPeSbasEphemeris::SetEphTime(BlueFin::GlPeSbasEphemeris *this, const BlueFin::GlPeGnssTime *a2)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *))(*(void *)this + 80))(this);
  if ((result & 1) == 0)
  {
    int v14 = &off_270EBC600;
    uint64_t v15 = 0;
    BlueFin::GlPeGnssTime::GetGps(a2, (BlueFin::GlGpsTime *)&v14);
    unsigned int v5 = ((unsigned int (*)(void))v14[4])(&v14) / 0x93A80;
    unsigned int v6 = ((uint64_t (*)(void))v14[4])(&v14);
    LODWORD(v7) = v15;
    double v8 = (double)v7 * 2.32830644e-10 + (double)(v6 % 0x93A80);
    double v9 = fmod(v8, 4294967300.0);
    if (v8 <= 4294967300.0) {
      double v9 = v8;
    }
    if (v9 < -4294967300.0) {
      double v9 = -fmod(-v9, 4294967300.0);
    }
    if (v9 < 0.0) {
      signed int v10 = --v9;
    }
    else {
      signed int v10 = v9;
    }
    uint64_t v11 = (v10 / 86400);
    int v12 = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 33);
    int v13 = v10 % 86400
        - (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 232))(this, 33) * v12;
    if (v13 < 43201)
    {
      if (v13 <= -43200)
      {
        if ((v10 + 86399) >= 0x2A2FF)
        {
          uint64_t v11 = (v11 - 1);
        }
        else
        {
          LOWORD(v5) = v5 - 1;
          uint64_t v11 = 6;
        }
      }
    }
    else if (v11 == 6)
    {
      LOWORD(v5) = v5 + 1;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = (v11 + 1);
    }
    (*(void (**)(BlueFin::GlPeSbasEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 43, 1);
    (*(void (**)(BlueFin::GlPeSbasEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 44, v11);
    return (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 28, (unsigned __int16)v5);
  }
  return result;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetCmpUnsignedField(BlueFin::GlPeSbasEphemeris *this, int a2)
{
  unsigned int v2 = (_DWORD *)*((void *)this + 2);
  if (a2 <= 27)
  {
    switch(a2)
    {
      case 0:
        return *v2 >> 27;
      case 1:
        return (*v2 >> 25) & 3;
      case 2:
        return (v2[7] >> 30) & 1;
      case 4:
        return (*v2 >> 8) & 0xF;
      default:
        goto LABEL_17;
    }
  }
  if (a2 > 42)
  {
    if (a2 == 43)
    {
      return (v2[6] >> 12) & 1;
    }
    else
    {
      if (a2 != 44) {
        goto LABEL_17;
      }
      return (v2[6] >> 9) & 7;
    }
  }
  else
  {
    if (a2 != 28)
    {
      if (a2 == 33) {
        return (*v2 >> 12) & 0x1FFF;
      }
LABEL_17:
      DeviceFaultNotify("glpe_waasmgr.cpp", 343, "GetCmpUnsignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 343, "0");
    }
    HIDWORD(v4) = v2[6];
    LODWORD(v4) = v2[7];
    return (v4 >> 9) >> 22;
  }
}

BOOL BlueFin::GlPeSbasEphemeris::isTimeSet(BlueFin::GlPeSbasEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 43) != 0;
}

float BlueFin::GlPeSbasEphemeris::GetAccuracyM(BlueFin::GlPeSbasEphemeris *this)
{
  unsigned int v1 = (*(unsigned __int8 (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 4);
  if (v1 <= 0xE) {
    return BlueFin::GlPeSbasEphemeris::GetUraM(unsigned char)::afUraTbl[v1];
  }
  else {
    return 8192.0;
  }
}

uint64_t BlueFin::GlPeSbasEphemeris::GetOrbitType(BlueFin::GlPeSbasEphemeris *this)
{
  return 0;
}

unint64_t BlueFin::GlPeSbasEphemeris::isSignedField(BlueFin::GlPeSbasEphemeris *this, unsigned int a2)
{
  if (a2 >= 0x2D || ((0x1FFE10000617uLL >> a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 372, "isSignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 372, "0");
  }
  return (0x7FC00000600uLL >> a2) & 1;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetCmpSignedField(BlueFin::GlPeSbasEphemeris *this, int a2)
{
  unsigned int v2 = (_DWORD *)*((void *)this + 2);
  switch(a2)
  {
    case '""':
      HIDWORD(v4) = *v2;
      LODWORD(v4) = v2[1];
      int v3 = v4 >> 8;
      goto LABEL_12;
    case '#':
      HIDWORD(v9) = v2[1];
      LODWORD(v9) = v2[2];
      int v3 = v9 >> 10;
LABEL_12:
      uint64_t result = (v3 >> 2);
      break;
    case '$':
      HIDWORD(v7) = v2[2];
      LODWORD(v7) = v2[3];
      uint64_t result = ((int)(v7 >> 12) >> 7);
      break;
    case '%':
      uint64_t result = ((int)(v2[3] << 13) >> 15);
      break;
    case '&':
      HIDWORD(v8) = v2[3];
      LODWORD(v8) = v2[4];
      uint64_t result = ((int)(v8 >> 2) >> 15);
      break;
    case '\'':
      HIDWORD(v10) = v2[4];
      LODWORD(v10) = v2[5];
      uint64_t result = ((int)(v10 >> 17) >> 14);
      break;
    case '(':
      uint64_t result = ((2 * v2[5]) >> 22);
      break;
    case ')':
      uint64_t result = ((int)(v2[5] << 11) >> 22);
      break;
    case '*':
      uint64_t result = ((int)(v2[5] << 21) >> 22);
      break;
    default:
      if (a2 == 9)
      {
        uint64_t result = ((int)(v2[6] << 11) >> 24);
      }
      else
      {
        if (a2 != 10)
        {
          DeviceFaultNotify("glpe_waasmgr.cpp", 396, "GetCmpSignedField", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 396, "0");
        }
        HIDWORD(v5) = v2[5];
        LODWORD(v5) = v2[6];
        uint64_t result = ((int)(v5 >> 1) >> 20);
      }
      break;
  }
  return result;
}

uint64_t *BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField(BlueFin::GlPeSbasEphemeris *this, unsigned int a2, unsigned int a3)
{
  unint64_t v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v11 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v10, v5, v6);
  if (a2 >= 0x2D || ((0x1FFE10000617uLL >> a2) & 1) == 0)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 428, "PutCmpUnsignedField", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 428, "0");
  }
  unsigned int v7 = dword_263BB99D8[(char)a2];
  unsigned int v8 = byte_263BB9A8C[(char)a2];
  BlueFin::GlBitBuffer::Position((uint64_t)v10, v7);
  return BlueFin::GlBitBuffer::PutU(v10, a3, v8);
}

uint64_t *BlueFin::GlPeSbasEphemeris::PutCmpSignedField(BlueFin::GlPeSbasEphemeris *this, int a2, int a3)
{
  unint64_t v5 = (unsigned int *)*((void *)this + 2);
  int v6 = 4 * *((unsigned __int8 *)this + 9);
  int v12 = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v11, v5, v6);
  int v7 = a2 - 34;
  unsigned int v8 = 30;
  unsigned int v9 = 24;
  switch(v7)
  {
    case 0:
      break;
    case 1:
      unsigned int v9 = 54;
      break;
    case 2:
      unsigned int v8 = 25;
      unsigned int v9 = 84;
      break;
    case 3:
      unsigned int v8 = 17;
      unsigned int v9 = 109;
      break;
    case 4:
      unsigned int v8 = 17;
      unsigned int v9 = 126;
      break;
    case 5:
      unsigned int v8 = 18;
      unsigned int v9 = 143;
      break;
    case 6:
      unsigned int v8 = 10;
      unsigned int v9 = 161;
      break;
    case 7:
      unsigned int v8 = 10;
      unsigned int v9 = 171;
      break;
    case 8:
      unsigned int v8 = 10;
      unsigned int v9 = 181;
      break;
    default:
      DeviceFaultNotify("glpe_waasmgr.cpp", 450, "PutCmpSignedField", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 450, "0");
  }
  BlueFin::GlBitBuffer::Position((uint64_t)v11, v9);
  return BlueFin::GlBitBuffer::PutU(v11, a3 + (0xFFFFFFFFuLL >> (32 - v8)) + 1, v8);
}

uint64_t BlueFin::GlPeSbasEphemeris::GetIntegerScaleFactor(BlueFin::GlPeSbasEphemeris *this, unsigned int a2)
{
  if (a2 > 0x2C) {
    goto LABEL_6;
  }
  if (((1 << a2) & 0x180010000017) != 0) {
    return 1;
  }
  if (a2 != 33)
  {
LABEL_6:
    DeviceFaultNotify("glpe_waasmgr.cpp", 467, "GetIntegerScaleFactor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 467, "0");
  }
  return 16;
}

double BlueFin::GlPeSbasEphemeris::GetFloatingScaleFactor(BlueFin::GlPeSbasEphemeris *this, int a2)
{
  double result = 16.0;
  switch(a2)
  {
    case '!':
      return result;
    case '""':
    case '#':
      double result = 0.08;
      break;
    case '$':
      double result = 0.4;
      break;
    case '%':
    case '&':
      double result = 0.000625;
      break;
    case '\'':
      double result = 0.004;
      break;
    case '(':
    case ')':
      double result = 0.0000125;
      break;
    case '*':
      double result = 0.0000625;
      break;
    default:
      double result = 9.09494702e-13;
      double v3 = 4.65661287e-10;
      if (a2 != 10) {
        double v3 = 1.0;
      }
      if (a2 != 9) {
        double result = v3;
      }
      break;
  }
  return result;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetSatClkInfo(BlueFin::GlPeEphemeris *a1, uint64_t a2, double *a3, double *a4)
{
  double v7 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 10);
  *a3 = ScaledFloatingField + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9) * v7;
  *a4 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9);
  return 1;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetPvt(BlueFin::GlPeEphemeris *a1, uint64_t a2, uint64_t a3, double a4)
{
  double v7 = (*(double (**)(BlueFin::GlPeEphemeris *, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2, 1);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 10);
  double v32 = ScaledFloatingField + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9) * v7;
  double v9 = v7 - v32;
  double v10 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 34);
  double v11 = v10 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 37) * v9;
  double v12 = v11 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 40) * (v9 * v9);
  double v13 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 35);
  double v14 = v13 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 38) * v9;
  double v15 = v14 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 41) * (v9 * v9);
  double v16 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 36);
  double v17 = v16 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 39) * v9;
  double v18 = v17 + BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 42) * (v9 * v9);
  double v19 = v12 + v15 * 0.0000729211515 * a4;
  double v20 = v15 + v12 * -0.0000729211515 * a4;
  if (a4 == 0.0)
  {
    double v19 = v12;
    double v20 = v15;
  }
  *(double *)a3 = v19;
  *(double *)(a3 + 8) = v20;
  *(double *)(a3 + 16) = v18;
  double v21 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 37);
  double v22 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 40);
  double v23 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 38);
  double v24 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 41);
  double v25 = v21 + v22 * v9;
  double v26 = v23 + v24 * v9;
  if (a4 == 0.0) {
    double v27 = v21 + v22 * v9;
  }
  else {
    double v27 = v25 + v26 * 0.0000729211515 * a4;
  }
  if (a4 == 0.0) {
    double v28 = v26;
  }
  else {
    double v28 = v26 + v25 * -0.0000729211515 * a4;
  }
  double v29 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 39);
  double v30 = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 42);
  *(double *)(a3 + 24) = v27;
  *(double *)(a3 + 32) = v28;
  *(double *)(a3 + 40) = v29 + v30 * v9;
  *(double *)(a3 + 48) = v32;
  *(double *)(a3 + 56) = BlueFin::GlPeEphemeris::GetScaledFloatingField(a1, 9);
  *(_DWORD *)(a3 + 64) = (*(uint64_t (**)(BlueFin::GlPeEphemeris *))(*(void *)a1 + 152))(a1);
  return 1;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetApproximateElevation(_DWORD *a1, uint64_t a2, double *a3)
{
  uint64_t v15 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  if ((BlueFin::GlPeEphemeris::isExpired(a1, a2) & 1) != 0
    || !(*(unsigned int (**)(_DWORD *, uint64_t, long long *, double))(*(void *)a1 + 112))(a1, a2, &v10, 0.0))
  {
    LOBYTE(v8) = -90;
    return (char)v8;
  }
  double v6 = ((*((double *)&v10 + 1) * a3[1] + *(double *)&v10 * *a3 + *(double *)&v11 * a3[2]) / 2.6894e14 + -0.24) * 90.0;
  if (v6 > 0.0)
  {
    double v7 = 0.5;
LABEL_9:
    int v8 = (int)(v6 + v7);
    goto LABEL_10;
  }
  if (v6 < 0.0)
  {
    double v7 = -0.5;
    goto LABEL_9;
  }
  int v8 = 0;
LABEL_10:
  if (v8 <= -90) {
    int v8 = -90;
  }
  if (v8 >= 90) {
    LOBYTE(v8) = 90;
  }
  return (char)v8;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetGnssId@<X0>(BlueFin::GlPeSbasEphemeris *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, void))(*(void *)this + 192))(this, 0);
  *a2 = result;
  return result;
}

uint64_t BlueFin::GlPeSbasEphemeris::GetSrc(BlueFin::GlPeSbasEphemeris *this)
{
  unsigned int v1 = (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *))(*(void *)this + 144))(this);
  if (v1 >= 4)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 588, "GetSrc", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 588, "false");
  }
  return dword_263BB2E60[v1];
}

uint64_t BlueFin::GlPeSbasEphemeris::GetIssueOfData(BlueFin::GlPeSbasEphemeris *this)
{
  return (*(unsigned __int16 (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 33);
}

uint64_t BlueFin::GlPeSbasEphemeris::MarkVerified(BlueFin::GlPeSbasEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t, uint64_t))(*(void *)this + 216))(this, 2, 1);
}

uint64_t BlueFin::GlPeSbasEphemeris::MarkUnverified(BlueFin::GlPeSbasEphemeris *this)
{
  return (*(uint64_t (**)(BlueFin::GlPeSbasEphemeris *, uint64_t, void))(*(void *)this + 216))(this, 2, 0);
}

BOOL BlueFin::GlPeSbasEphemeris::isVerified(BlueFin::GlPeSbasEphemeris *this)
{
  return (*(unsigned int (**)(BlueFin::GlPeSbasEphemeris *, uint64_t))(*(void *)this + 192))(this, 2) != 0;
}

uint64_t BlueFin::GlPeLegacySbasEph::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= 4)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 655, "SerializeImpl", (char)"ucVersion == 1 || ucVersion == 2 || ucVersion == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 655, "ucVersion == 1 || ucVersion == 2 || ucVersion == 3");
  }
  uint64_t v6 = v3;
  int v28 = 38;
  char v29 = v5;
  uint64_t v30 = 0x1000000000000;
  double v27 = &unk_270EBA2F0;
  char v31 = v5;
  uint64_t v7 = v2 + 24;
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v27, (**(_DWORD **)(v2 + 24) >> 27) | 0x20);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v27, (~**(_DWORD **)v7 & 0xF00) != 0);
  HIDWORD(v8) = *(_DWORD *)(*(void *)v7 + 24);
  LODWORD(v8) = *(_DWORD *)(*(void *)v7 + 28);
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v27, (v8 >> 9) >> 22);
  unsigned int v9 = *(_DWORD *)(*(void *)v7 + 24);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 16) + 192))(v7 - 16, 33);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 16) + 232))(v7 - 16, 33);
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v27, (86400 * ((v9 >> 9) & 7) + v11 * v10) >> 4);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v27, BYTE1(**(_DWORD **)v7) & 0xF);
  unsigned int v12 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(*(void *)(v7 - 16) + 192))(v7 - 16, 4);
  if (v12 <= 0xE) {
    float v13 = BlueFin::GlPeSbasEphemeris::GetUraM(unsigned char)::afUraTbl[v12];
  }
  else {
    float v13 = 8192.0;
  }
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v13);
  double ScaledFloatingField = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 34);
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v27, ScaledFloatingField);
  double v15 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 35);
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v27, v15);
  double v16 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 36);
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v27, v16);
  float v17 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 37);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v17);
  float v18 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 38);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v18);
  float v19 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 39);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v19);
  float v20 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 40);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v20);
  float v21 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 41);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v21);
  float v22 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 42);
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v27, v22);
  double v23 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 10);
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v27, v23);
  double v24 = BlueFin::GlPeEphemeris::GetScaledFloatingField((BlueFin::GlPeEphemeris *)(v7 - 16), 9);
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v27, v24);
  if (v5 >= 3)
  {
    char EphDataSrc = BlueFin::GlPeEphemeris::GetEphDataSrc((BlueFin::GlPeEphemeris *)(v7 - 16));
LABEL_12:
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v27, EphDataSrc);
    goto LABEL_13;
  }
  if (v5 == 2)
  {
    char EphDataSrc = BlueFin::GlPeSbasEphemeris::GetSrc((BlueFin::GlPeSbasEphemeris *)(v7 - 16));
    goto LABEL_12;
  }
LABEL_13:
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v27, v6, 4);
  return 1;
}

uint64_t BlueFin::GlPeLegacySbasEph::Deserialize(BlueFin::GlPeLegacySbasEph *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 38 || *((unsigned __int8 *)a2 + 12) - 4 < 0xFFFFFFFD) {
    return 0;
  }
  unsigned __int8 S8 = BlueFin::GlSysLogEntry::GetS8(a2);
  if ((S8 - 52) <= 0xECu)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 699, "Deserialize", (char)"IS_SBAS_SVID(*otSvId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 699, "IS_SBAS_SVID(*otSvId)");
  }
  unsigned __int8 v6 = S8;
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  unint64_t v8 = (BlueFin::GlPeLegacySbasEph *)((char *)this + 8);
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeLegacySbasEph *)((char *)this + 8), 0, v6 - 32);
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeLegacySbasEph *)((char *)this + 8), 1u, 0);
  unsigned int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeLegacySbasEph *)((char *)this + 8), 0x1Cu, U16);
  uint64_t v10 = *((void *)this + 3);
  HIDWORD(v11) = *(_DWORD *)(v10 + 24);
  LODWORD(v11) = *(_DWORD *)(v10 + 28);
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeLegacySbasEph *)((char *)this + 8), 0x2Bu, ((v11 >> 9) & 0xFFC00000) != 0);
  unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
  unsigned int v13 = U32 / 0x15180;
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField(v8, 0x21u, (U32 % 0x15180) >> 4);
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField(v8, 0x2Cu, v13);
  unsigned int v14 = BlueFin::GlSysLogEntry::GetU8(a2);
  BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField(v8, 4u, v14);
  BlueFin::GlSysLogEntry::GetF32(a2);
  double v15 = BlueFin::GlSysLogEntry::GetD64(a2) / 0.08;
  double v16 = fmod(v15, 4294967300.0);
  if (v15 <= 4294967300.0) {
    double v16 = v15;
  }
  if (v16 < -4294967300.0) {
    double v16 = -fmod(-v16, 4294967300.0);
  }
  if (v16 < 0.0) {
    int v17 = --v16;
  }
  else {
    int v17 = v16;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 34, v17);
  double v18 = BlueFin::GlSysLogEntry::GetD64(a2) / 0.08;
  double v19 = fmod(v18, 4294967300.0);
  if (v18 <= 4294967300.0) {
    double v19 = v18;
  }
  if (v19 < -4294967300.0) {
    double v19 = -fmod(-v19, 4294967300.0);
  }
  if (v19 < 0.0) {
    int v20 = --v19;
  }
  else {
    int v20 = v19;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 35, v20);
  double v21 = BlueFin::GlSysLogEntry::GetD64(a2) / 0.4;
  double v22 = fmod(v21, 4294967300.0);
  if (v21 <= 4294967300.0) {
    double v22 = v21;
  }
  if (v22 < -4294967300.0) {
    double v22 = -fmod(-v22, 4294967300.0);
  }
  if (v22 < 0.0) {
    int v23 = --v22;
  }
  else {
    int v23 = v22;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 36, v23);
  double v24 = BlueFin::GlSysLogEntry::GetF32(a2) / 0.000625;
  double v25 = fmod(v24, 4294967300.0);
  if (v24 <= 4294967300.0) {
    double v25 = v24;
  }
  if (v25 < -4294967300.0) {
    double v25 = -fmod(-v25, 4294967300.0);
  }
  if (v25 < 0.0) {
    int v26 = --v25;
  }
  else {
    int v26 = v25;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 37, v26);
  double v27 = BlueFin::GlSysLogEntry::GetF32(a2) / 0.000625;
  double v28 = fmod(v27, 4294967300.0);
  if (v27 <= 4294967300.0) {
    double v28 = v27;
  }
  if (v28 < -4294967300.0) {
    double v28 = -fmod(-v28, 4294967300.0);
  }
  if (v28 < 0.0) {
    int v29 = --v28;
  }
  else {
    int v29 = v28;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 38, v29);
  double v30 = BlueFin::GlSysLogEntry::GetF32(a2) / 0.004;
  double v31 = fmod(v30, 4294967300.0);
  if (v30 <= 4294967300.0) {
    double v31 = v30;
  }
  if (v31 < -4294967300.0) {
    double v31 = -fmod(-v31, 4294967300.0);
  }
  if (v31 < 0.0) {
    int v32 = --v31;
  }
  else {
    int v32 = v31;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 39, v32);
  double v33 = BlueFin::GlSysLogEntry::GetF32(a2) / 0.0000125;
  double v34 = fmod(v33, 4294967300.0);
  if (v33 <= 4294967300.0) {
    double v34 = v33;
  }
  if (v34 < -4294967300.0) {
    double v34 = -fmod(-v34, 4294967300.0);
  }
  if (v34 < 0.0) {
    int v35 = --v34;
  }
  else {
    int v35 = v34;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 40, v35);
  double v36 = BlueFin::GlSysLogEntry::GetF32(a2) / 0.0000125;
  double v37 = fmod(v36, 4294967300.0);
  if (v36 <= 4294967300.0) {
    double v37 = v36;
  }
  if (v37 < -4294967300.0) {
    double v37 = -fmod(-v37, 4294967300.0);
  }
  if (v37 < 0.0) {
    int v38 = --v37;
  }
  else {
    int v38 = v37;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 41, v38);
  double v39 = BlueFin::GlSysLogEntry::GetF32(a2) / 0.0000625;
  double v40 = fmod(v39, 4294967300.0);
  if (v39 <= 4294967300.0) {
    double v40 = v39;
  }
  if (v40 < -4294967300.0) {
    double v40 = -fmod(-v40, 4294967300.0);
  }
  if (v40 < 0.0) {
    int v41 = --v40;
  }
  else {
    int v41 = v40;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 42, v41);
  double v42 = BlueFin::GlSysLogEntry::GetD64(a2) * 2147483650.0;
  double v43 = fmod(v42, 4294967300.0);
  if (v42 <= 4294967300.0) {
    double v43 = v42;
  }
  if (v43 < -4294967300.0) {
    double v43 = -fmod(-v43, 4294967300.0);
  }
  if (v43 < 0.0) {
    int v44 = --v43;
  }
  else {
    int v44 = v43;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 10, v44);
  double v45 = BlueFin::GlSysLogEntry::GetD64(a2) * 1.09951163e12;
  double v46 = fmod(v45, 4294967300.0);
  if (v45 <= 4294967300.0) {
    double v46 = v45;
  }
  if (v46 < -4294967300.0) {
    double v46 = -fmod(-v46, 4294967300.0);
  }
  if (v46 < 0.0) {
    int v47 = --v46;
  }
  else {
    int v47 = v46;
  }
  BlueFin::GlPeSbasEphemeris::PutCmpSignedField(v8, 9, v47);
  unsigned int v48 = *((unsigned __int8 *)a2 + 12);
  if (v48 == 2)
  {
    unsigned int v49 = BlueFin::GlSysLogEntry::GetU8(a2) - 1;
LABEL_86:
    BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField(v8, 1u, v49);
    goto LABEL_87;
  }
  if (v48 >= 3)
  {
    unsigned int v49 = BlueFin::GlSysLogEntry::GetU8(a2);
    goto LABEL_86;
  }
LABEL_87:
  if (!U8) {
    BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField(v8, 4u, 0xFu);
  }
  return 1;
}

int32x2_t BlueFin::GlPeSbasMgr::MakeEphemerisObj(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v3 = &unk_270EC1BF0;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 8;
    char v6 = 17;
  }
  else
  {
    uint64_t v3 = &unk_270EC0528;
    *(_OWORD *)(a2 + 32) = 0u;
    uint64_t v4 = a2 + 32;
    *(_OWORD *)(a2 + 92) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    char v5 = 19;
    char v6 = 18;
  }
  *(unsigned char *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 9) = v5;
  *(void *)(a2 + 16) = v4;
  int32x2_t result = vdup_n_s32(0xFF9222FF);
  *(int32x2_t *)(a2 + 24) = result;
  *(void *)a2 = v3;
  return result;
}

uint64_t BlueFin::GlPeSbasMgr::SetAsstEph(BlueFin::GlPeSbasMgr *this, const BlueFin::GlPeEphemeris *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPeSbasMgr *, const BlueFin::GlPeEphemeris *, void))(*(void *)this + 376))(this, a2, 0);
}

uint64_t BlueFin::GlPeSbasMgr::GetMsg0ReceivedLms(uint64_t a1, unsigned char *a2)
{
  if ((*a2 - 20) <= 0xECu)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 813, "GetMsg0ReceivedLms", (char)"IS_SBAS_GNSSID(*rotGnssId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 813, "IS_SBAS_GNSSID(*rotGnssId)");
  }
  return *(unsigned int *)(a1 + 16 * (*a2 - 1) + 1512);
}

uint64_t BlueFin::GlPeSbasMgr::GetNumMsgsReceived(uint64_t a1, unsigned char *a2)
{
  if ((*a2 - 20) <= 0xECu)
  {
    DeviceFaultNotify("glpe_waasmgr.cpp", 835, "GetNumMsgsReceived", (char)"IS_SBAS_GNSSID(*rotGnssId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", 835, "IS_SBAS_GNSSID(*rotGnssId)");
  }
  return *(unsigned int *)(a1 + 16 * (*a2 - 1) + 1520);
}

void BlueFin::GlPeSbasMgr::HandleMsg(BlueFin::GlPeSbasMgr *this, const BlueFin::GlDataSubFrmMeas *a2)
{
  if (*((unsigned __int8 *)a2 + 8) - 33 >= 0x13)
  {
    uint64_t v65 = "IS_SBAS_SVID(*rotSbasBlock.otSvId)";
    DeviceFaultNotify("glpe_waasmgr.cpp", 857, "HandleMsg", (char)"IS_SBAS_SVID(*rotSbasBlock.otSvId)");
    int v66 = 857;
    goto LABEL_60;
  }
  if (!*((unsigned char *)this + 3944))
  {
    uint64_t v3 = *((void *)this + 3);
    if (*(_DWORD *)(v3 + 44) != -1)
    {
      float32x2_t v4 = vcvt_f32_f64(*(float64x2_t *)(v3 + 112));
      *((float32x2_t *)this + 150) = v4;
      __asm
      {
        FMOV            V1.2S, #5.0
        FMOV            V2.2S, #-20.0
      }
      *((float32x2_t *)this + 149) = vmla_f32(_D2, _D1, vrndm_f32(vdiv_f32(v4, _D1)));
      *((unsigned char *)this + 3944) = 1;
    }
  }
  long long v11 = *(_OWORD *)((char *)a2 + 36);
  *(_OWORD *)((char *)this + 540) = *(_OWORD *)((char *)a2 + 20);
  *(_OWORD *)((char *)this + 556) = v11;
  int v12 = *(_DWORD *)(*((void *)this + 2) + 2568);
  int v13 = *((unsigned __int8 *)a2 + 8);
  unsigned __int8 v14 = v13 - 32;
  char v75 = v13 - 32;
  unsigned int v15 = v13 - 33;
  if (v15 >= 0x13)
  {
    uint64_t v65 = "ucIdx < _DIM(m_aotMsgData)";
    DeviceFaultNotify("glpe_waasmgr.cpp", 878, "HandleMsg", (char)"ucIdx < _DIM(m_aotMsgData)");
    int v66 = 878;
LABEL_60:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_waasmgr.cpp", v66, v65);
  }
  double v16 = (char *)this + 16 * v15;
  int v17 = *((_DWORD *)v16 + 378);
  if (!v17 || (v12 - v17) >> 5 >= 0x753)
  {
    uint64_t v18 = v15;
    unint64_t v19 = *((unsigned int *)this + 135);
    int v20 = (char *)this + 16 * v18;
    *((_DWORD *)v20 + 379) = v12;
    ++*((_DWORD *)v20 + 380);
    unsigned int v21 = (v19 >> 18) & 0x3F;
    if (v21 <= 0xB)
    {
      if (v21)
      {
        if (v21 == 9)
        {
          __int16 v71 = 2065;
          char v72 = v74;
          int32x2_t v73 = vdup_n_s32(0xFF9222FF);
          memset(v74, 0, sizeof(v74));
          size_t v70 = &unk_270EC1BF0;
          *((_DWORD *)this + 4 * v18 + 381) = v12;
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0, v14);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 1u, 0);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x21u, (*((_DWORD *)this + 136) >> 29) & 0xFFFFE007 | (8 * (*((_DWORD *)this + 135) & 0x3FF)));
          if (BlueFin::GlPeTimeManager::TimeKnown(*((void *)this + 2), 0, 0x200B20u))
          {
            BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x2Bu, 0);
            BlueFin::GlPeTimeManager::GetTime(*((BlueFin::GlPeTimeManager **)this + 2), 1, v69);
            BlueFin::GlPeSbasEphemeris::SetEphTime((BlueFin::GlPeSbasEphemeris *)&v70, (const BlueFin::GlPeGnssTime *)v69);
          }
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 4u, (*((_DWORD *)this + 136) >> 25) & 0xF);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x22u, (*((_DWORD *)this + 137) >> 27) & 0xC000001F | (32 * (*((_DWORD *)this + 136) & 0x1FFFFFF)));
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x23u, (*((_DWORD *)this + 138) >> 29) & 0xC0000007 | (8 * (*((_DWORD *)this + 137) & 0x7FFFFFF)));
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x24u, (*((_DWORD *)this + 138) >> 4) & 0x1FFFFFF);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x25u, (*((_DWORD *)this + 139) >> 19) & 0xFFFE1FFF | ((*((_DWORD *)this + 138) & 0xF) << 13));
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x26u, (*((_DWORD *)this + 139) >> 2) & 0x1FFFF);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x27u, *((unsigned __int16 *)this + 281) | ((*((_DWORD *)this + 139) & 3) << 16));
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x28u, (unsigned __int16)*((_DWORD *)this + 140) >> 6);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x29u, (*((_DWORD *)this + 141) >> 28) & 0xFFFFFC0F | (16 * (*((_DWORD *)this + 140) & 0x3F)));
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0x2Au, (*((_DWORD *)this + 141) >> 18) & 0x3FF);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 0xAu, (*((_DWORD *)this + 141) >> 6) & 0xFFF);
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 9u, (*((_DWORD *)this + 142) >> 30) & 0xFFFFFF03 | (4 * (*((_DWORD *)this + 141) & 0x3F)));
          BlueFin::GlPeSbasEphemeris::PutCmpUnsignedField((BlueFin::GlPeSbasEphemeris *)&v70, 1u, 0);
          (*(void (**)(BlueFin::GlPeSbasMgr *, void **, void))(*(void *)this + 376))(this, &v70, 0);
        }
      }
      else
      {
        uint64_t v62 = v16 + 1512;
        (*(void (**)(BlueFin::GlPeSbasMgr *, char *))(*(void *)this + 336))(this, &v75);
        *uint64_t v62 = v12;
        *((unsigned char *)this + 3944) = 0;
        *((_DWORD *)this + 987) = -1;
        memcpy((char *)this + 692, &BlueFin::GlPeSbasMgr::m_InitIonoData, 0x300uLL);
      }
    }
    else
    {
      switch(v21)
      {
        case 0xCu:
          *((unsigned char *)this + 1464) = 1;
          unsigned int v35 = *((_DWORD *)this + 136);
          unsigned int v36 = (v35 >> 26) & 0xFF00003F | ((v19 & 0x3FFFF) << 6);
          double v37 = (double)v36;
          if ((v19 & 0x20000) != 0) {
            double v37 = -(double)(0x1000000 - v36);
          }
          *((double *)this + 184) = v37 * 8.8817842e-16;
          unsigned int v38 = *((_DWORD *)this + 137);
          unint64_t v40 = __PAIR64__(v35, v38);
          int v39 = __PAIR64__(v35, v38) >> 26;
          double v41 = (double)v39;
          double v42 = -(double)((unint64_t)~(v40 >> 26) + 1);
          if (v39 < 0) {
            double v41 = v42;
          }
          *((double *)this + 185) = v41 * 9.31322575e-10;
          *((_DWORD *)this + 367) = (v38 >> 6) & 0xFF000;
          *((_DWORD *)this + 372) = (v38 >> 10);
          *((_DWORD *)this + 373) = ((int)(v38 << 22) >> 31) & 0xFFFFFF00 | (v38 >> 2);
          unsigned int v43 = *((_DWORD *)this + 138);
          *((_DWORD *)this + 374) = (v43 >> 26) & 0xFFFFFF3F | ((v38 & 3) << 6);
          *((_DWORD *)this + 375) = (v43 >> 18) & 7;
          *((_DWORD *)this + 376) = ((int)(v43 << 14) >> 31) & 0xFFFFFF00 | (v43 >> 10);
          *((_DWORD *)this + 377) = (v43 >> 7) & 7;
          break;
        case 0x12u:
          *((_DWORD *)this + 987) = (v19 >> 8) & 3;
          uint64_t v67 = (v19 >> 10) & 0xF;
          if (v67 <= 8)
          {
            uint64_t v44 = 0;
            __int16 v45 = 0;
            int v46 = 0;
            unsigned int v47 = 0;
            __int16 v48 = 0;
            uint64_t v49 = 1717986919 * (40 * (int)v67 - (int)*((float *)this + 299) - 180);
            int v50 = (v49 >> 33) + ((unint64_t)v49 >> 63);
            int v51 = 24;
            do
            {
              unsigned int v52 = (char *)this + 8 * v67 + v44 + 692;
              int v53 = v50 << 16;
              if (*((char *)this + v52[632] + 1320) > 0)
              {
                uint64_t v68 = v44;
                uint64_t v54 = 0;
                uint64_t v55 = v52 + 632;
                uint64_t v56 = *((unsigned __int8 *)this + v52[632] + 1320);
                int v57 = (int)*((float *)this + 298);
                uint64_t v58 = (__int16)v50;
                do
                {
                  if (!v47)
                  {
                    int v46 = BlueFin::GlPeSbasMgr::wbits(this, v51, 4);
                    v51 += 4;
                    unsigned int v47 = 8;
                  }
                  int v59 = *((char *)this + 28 * *v55 + v54 + 1208) - v57;
                  BOOL v60 = (v59 + 4) > 0x35 || v53 < -65535;
                  if (!v60 && v53 < 655360)
                  {
                    int v61 = v59 / 5;
                    if ((v46 & v47) != 0)
                    {
                      *((_WORD *)this + 10 * (__int16)v61 + v58 + 496) = ((16 * v67) | (v45 << 8)) + v48;
                      if ((unsigned __int16)(v45 + 1) == 15)
                      {
                        ++v48;
                        __int16 v45 = 0;
                      }
                      else
                      {
                        ++v45;
                      }
                    }
                    else
                    {
                      *((_WORD *)this + 10 * v61 + v58 + 496) = 255;
                    }
                  }
                  v47 >>= 1;
                  ++v54;
                }
                while (v56 != v54);
                uint64_t v44 = v68;
              }
              int v50 = (v53 >> 16) + 1;
              ++v44;
            }
            while (v44 != 8);
          }
          break;
        case 0x1Au:
          if (((*((_DWORD *)this + 141) >> 5) & 3) == *((_DWORD *)this + 987))
          {
            unsigned int v22 = (v19 >> 14) & 0xF;
            if (v22 <= 8)
            {
              unsigned int v23 = (v19 >> 10) & 0xF;
              double v24 = (_DWORD *)((char *)this + 632);
              uint64_t v25 = -195;
              do
              {
                *(v24 - 15) = BlueFin::GlPeSbasMgr::wbits(this, (int)v25 + 217, 9);
                *v24++ = BlueFin::GlPeSbasMgr::wbits(this, (int)v25 + 226, 4);
                v25 += 13;
              }
              while (v25);
              uint64_t v26 = 0;
              double v27 = (char *)this + 692;
              double v28 = (char *)this + 992;
              do
              {
                uint64_t v29 = 0;
                double v30 = (__int16 *)v28;
                double v31 = (__int16 *)v28;
                do
                {
                  __int16 v33 = *v31++;
                  __int16 v32 = v33;
                  if ((v23 | (16 * v22)) == v33)
                  {
                    double v34 = (char *)this + 4 * ((uint64_t)v32 >> 8);
                    v27[v29] = *((_DWORD *)v34 + 143);
                    *(v30 - 100) = *((_DWORD *)v34 + 158);
                  }
                  ++v29;
                  double v30 = v31;
                }
                while (v29 != 10);
                ++v26;
                v28 += 20;
                v27 += 10;
              }
              while (v26 != 10);
            }
          }
          else
          {
            uint64_t v63 = 0;
            uint64_t v64 = (char *)this + 792;
            do
            {
              memset_pattern16(&v64[v63], &unk_263BB9AC0, 0x14uLL);
              v63 += 20;
            }
            while (v63 != 200);
          }
          break;
      }
    }
  }
}

uint64_t BlueFin::GlPeSbasMgr::wbits(BlueFin::GlPeSbasMgr *this, unsigned int a2, int a3)
{
  signed int v3 = (a2 << 19) & 0xFF000000;
  unsigned int v4 = a2 - (v3 >> 19);
  char v5 = v4 + a3;
  if ((int)(v4 + a3) <= 32) {
    return (*((_DWORD *)this + (char)(a2 >> 5) + 135) & (0xFFFFFFFF >> v4)) >> -v5;
  }
  else {
    return ((*((_DWORD *)this + (char)(a2 >> 5) + 135) & (0xFFFFFFFF >> v4)) << v5)
  }
         + (*((_DWORD *)this + (v3 >> 24) + 136) >> -v5);
}

uint64_t BlueFin::GlPeSbasMgr::validateCandidateEphemeris(BlueFin::GlPeSbasMgr *this, const BlueFin::GlPeEphemeris *a2, BlueFin::GlPeEphemeris *a3)
{
  return 1;
}

void BlueFin::GlPeSbasEphemeris::~GlPeSbasEphemeris(BlueFin::GlPeSbasEphemeris *this)
{
}

uint64_t BlueFin::GlPeSbasEphemeris::GetCurveFitIntervalS(BlueFin::GlPeSbasEphemeris *this)
{
  return 4320;
}

double BlueFin::GlPeSbasEphemeris::GetTgd(BlueFin::GlPeSbasEphemeris *this)
{
  return 0.0;
}

void BlueFin::GlPeSbasMgr::~GlPeSbasMgr(BlueFin::GlPeSbasMgr *this)
{
}

uint64_t BlueFin::GlPeSbasMgr::SetLtoEph(BlueFin::GlPeSbasMgr *this, const BlueFin::GlPeLtoEphemeris *a2)
{
  return 0;
}

uint64_t BlueFin::GlPeSbasMgr::GetLtoAltNavData()
{
  return 0;
}

BOOL BlueFin::GlPeSbasMgr::HaveLtoEphemerisFor(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 368))(a1);
  return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 144))(v1) == 2;
}

uint64_t BlueFin::GlPeSbasMgr::GetHealthBitsMask(BlueFin::GlPeSbasMgr *this)
{
  return 15;
}

void BlueFin::GlPeLegacySbasEph::~GlPeLegacySbasEph(BlueFin::GlPeLegacySbasEph *this)
{
}

uint64_t BlueFin::GlPeContextMgr::StaticMonitor(uint64_t this, int a2, int a3, char a4, int a5, double a6, double a7)
{
  if (*(float *)(this + 1928) >= 0.5 || *(float *)(this + 1932) >= 0.5)
  {
    BOOL v7 = 0;
    if (!a5) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v7 = *(float *)(this + 1936) < 0.5;
    if (!a5) {
      goto LABEL_8;
    }
  }
  if (!v7) {
    *(_DWORD *)(this + 1984) = a2;
  }
LABEL_8:
  if (a6 < 0.5) {
    int v8 = a5;
  }
  else {
    int v8 = 0;
  }
  BOOL v9 = (a2 - a3) < 0x7531 || (a2 - *(_DWORD *)(this + 1984)) > 0x7530;
  if (v8 & v9)
  {
    int v8 = 1;
    BOOL v9 = 1;
  }
  else if (*(unsigned char *)(this + 1988))
  {
    BOOL v10 = a6 < 0.5;
    if (a7 > 0.25) {
      BOOL v10 = 1;
    }
    int v11 = v10 || v9;
    if (*(unsigned char *)(this + 1989))
    {
      int v8 = v11;
      BOOL v9 = v11;
    }
  }
  uint64_t v12 = *(void *)(this + 1816);
  int v13 = (unsigned char *)(v12 + 4224);
  int v14 = *(_DWORD *)(v12 + 4216);
  BOOL v15 = (v14 == 6 || v14 == 1) && *v13 && v13[2] == 0;
  if (v8 & v9) == 1 && (a4)
  {
    *(unsigned char *)(this + 1988) = 1;
  }
  else
  {
    *(unsigned char *)(this + 1988) = v15;
    if (!v15) {
      goto LABEL_36;
    }
  }
  if (*(unsigned char *)(this + 1764)) {
    unsigned int v16 = 60;
  }
  else {
    unsigned int v16 = 180;
  }
  if (*(float *)(this + 1328) > 4.0 && *(float *)(this + 1320) < 20.0 && *(_DWORD *)(this + 76) >= v16)
  {
    if (*(unsigned char *)(this + 1764))
    {
      LOBYTE(v17) = 1;
      goto LABEL_37;
    }
    int v17 = *(_DWORD *)(this + 64);
    if (v17 == 1) {
      goto LABEL_37;
    }
  }
LABEL_36:
  LOBYTE(v17) = 0;
LABEL_37:
  *(unsigned char *)(this + 1989) = v17;
  return this;
}

uint64_t BlueFin::GlPeContextMgr::SetNewMeasurement(uint64_t a1, int a2, int a3, int a4, _DWORD *a5, double a6, double a7, double a8)
{
  *(_DWORD *)(a1 + 1808) = a3;
  *(void *)(a1 + 1932) = *(void *)(a1 + 1928);
  float v10 = a7;
  *(float *)(a1 + 1928) = v10;
  uint64_t result = BlueFin::GlPeContextMgr::UpdateVehicleContext(a1, a2, a5, a4, a7, a8);
  uint64_t v12 = *(unsigned __int16 **)(a1 + 1816);
  if (v12[81] >= *v12)
  {
    int v13 = 2;
  }
  else
  {
    if (*((_DWORD *)v12 + 42) <= (*((_DWORD *)v12 + 41) + 1000))
    {
      *(_DWORD *)(a1 + 32) = 0;
      goto LABEL_7;
    }
    int v13 = 3;
  }
  *(_DWORD *)(a1 + 32) = v13;
LABEL_7:
  *(_DWORD *)(a1 + 36) = 1;
  return result;
}

uint64_t BlueFin::GlPeContextMgr::UpdateVehicleContext(uint64_t result, int a2, _DWORD *a3, int a4, double a5, double a6)
{
  if (*(unsigned char *)(result + 1860)
    || (a6 > 1.0 ? (v6 = a2 <= 14) : (v6 = 0), v6 ? (int v7 = 0) : (int v7 = 1), *(unsigned char *)(result + 1860) = v7, v7))
  {
    if ((*a3 & 8) != 0)
    {
      unsigned int v8 = *(_DWORD *)(result + 1808);
      unsigned int v9 = *(_DWORD *)(result + 1896);
      if (v8 - v9 >= 0x1389)
      {
        *(_WORD *)(result + 1900) = 0;
        *(_DWORD *)(result + 1904) = 0;
        *(void *)(result + 1864) = 0;
        *(void *)(result + 1880) = 0;
        *(void *)(result + 1872) = 0;
        *(_DWORD *)(result + 1888) = 0;
        unsigned int v9 = v8;
        *(_DWORD *)(result + 1896) = v8;
      }
      if (a5 <= 0.349999994)
      {
        unsigned int v10 = 0;
        *(int8x8_t *)(result + 1884) = vbsl_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(result + 1884)), (int8x8_t)vdup_n_s32(v8), *(int8x8_t *)(result + 1884));
        *(_DWORD *)(result + 1880) = 0;
        *(void *)(result + 1872) = 0;
        *(_DWORD *)(result + 1864) = 0;
      }
      else
      {
        unsigned int v10 = *(_DWORD *)(result + 1864);
        if (!v10) {
          unsigned int v10 = v8;
        }
        *(_DWORD *)(result + 1864) = v10;
        *(_DWORD *)(result + 1892) += v8 - v9;
        if (a5 <= 1.79999995)
        {
          *(int8x8_t *)(result + 1884) = vbsl_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(result + 1884)), (int8x8_t)vdup_n_s32(v8), *(int8x8_t *)(result + 1884));
          *(_DWORD *)(result + 1880) = 0;
          *(void *)(result + 1872) = 0;
          if (v8 - *(_DWORD *)(result + 1868) > 0x15F90) {
            *(_WORD *)(result + 1900) = 0;
          }
        }
        else
        {
          ++*(_WORD *)(result + 1900);
          *(_DWORD *)(result + 1868) = v8;
          if (a5 <= 3.5)
          {
            *(int8x8_t *)(result + 1884) = vbsl_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(result + 1884)), (int8x8_t)vdup_n_s32(v8), *(int8x8_t *)(result + 1884));
            *(_DWORD *)(result + 1880) = 0;
            *(void *)(result + 1872) = 0;
          }
          else
          {
            *(_DWORD *)(result + 1888) = 0;
            unsigned int v11 = *(_DWORD *)(result + 1872);
            if (!v11) {
              unsigned int v11 = v8;
            }
            *(_DWORD *)(result + 1872) = v11;
            if (a5 <= 5.0)
            {
              unsigned int v40 = *(_DWORD *)(result + 1884);
              if (!v40) {
                unsigned int v40 = v8;
              }
              *(_DWORD *)(result + 1884) = v40;
              *(void *)(result + 1876) = 0;
            }
            else
            {
              unsigned int v12 = *(_DWORD *)(result + 1876);
              if (!v12) {
                unsigned int v12 = v8;
              }
              *(_DWORD *)(result + 1876) = v12;
              if (a5 <= 17.8999996)
              {
                *(_DWORD *)(result + 1880) = 0;
                unsigned int v43 = *(_DWORD *)(result + 1884);
                if (!v43) {
                  unsigned int v43 = v8;
                }
                *(_DWORD *)(result + 1884) = v43;
              }
              else
              {
                unsigned int v13 = *(_DWORD *)(result + 1880);
                if (!v13) {
                  unsigned int v13 = v8;
                }
                *(_DWORD *)(result + 1880) = v13;
                *(_DWORD *)(result + 1884) = 0;
              }
            }
          }
        }
      }
      *(_DWORD *)(result + 1896) = v8;
      if (!v10) {
        goto LABEL_30;
      }
LABEL_27:
      unsigned int v14 = *(_DWORD *)(result + 1896) - v10;
      goto LABEL_31;
    }
  }
  unsigned int v10 = *(_DWORD *)(result + 1864);
  if (v10) {
    goto LABEL_27;
  }
LABEL_30:
  unsigned int v14 = 0;
LABEL_31:
  int v15 = *(_DWORD *)(result + 1868);
  if (v15) {
    unsigned int v16 = *(_DWORD *)(result + 1896) - v15;
  }
  else {
    unsigned int v16 = 0;
  }
  int v17 = *(_DWORD *)(result + 1872);
  if (v17) {
    unsigned int v18 = *(_DWORD *)(result + 1896) - v17;
  }
  else {
    unsigned int v18 = 0;
  }
  int v19 = *(_DWORD *)(result + 1880);
  if (v19) {
    unsigned int v20 = *(_DWORD *)(result + 1896) - v19;
  }
  else {
    unsigned int v20 = 0;
  }
  int v21 = *(_DWORD *)(result + 1876);
  if (v21) {
    unsigned int v22 = *(_DWORD *)(result + 1896) - v21;
  }
  else {
    unsigned int v22 = 0;
  }
  int v23 = *(_DWORD *)(result + 1884);
  if (v23) {
    unsigned int v24 = *(_DWORD *)(result + 1896) - v23;
  }
  else {
    unsigned int v24 = 0;
  }
  int v25 = *(_DWORD *)(result + 1888);
  if (v25) {
    unsigned int v26 = *(_DWORD *)(result + 1896) - v25;
  }
  else {
    unsigned int v26 = 0;
  }
  uint64_t v27 = *(void *)(result + 1816);
  if (!v27)
  {
    BOOL v30 = 0;
LABEL_54:
    int v31 = 0;
    BOOL v28 = v18 >> 3 > 0x752;
    goto LABEL_55;
  }
  BOOL v28 = 0;
  int v29 = *(_DWORD *)(v27 + 4216);
  BOOL v30 = v29 == 4;
  int v31 = 1;
  if (v29 != 3 && v29 != 5) {
    goto LABEL_54;
  }
LABEL_55:
  int v32 = *(unsigned __int8 *)(result + 1765);
  if (*(unsigned char *)(result + 1765)) {
    *(_DWORD *)(result + 1912) = *(_DWORD *)(result + 1808);
  }
  int v33 = *(_DWORD *)(result + 8);
  unsigned int v34 = *(unsigned __int16 *)(result + 1900);
  switch(v33)
  {
    case 0:
      if (v20 >> 3 >= 0x271) {
        goto LABEL_94;
      }
      if (v22 >> 3 >= 0x271) {
        goto LABEL_116;
      }
      if (v31) {
        goto LABEL_97;
      }
      if (v32) {
        goto LABEL_107;
      }
      unsigned int v35 = *(_DWORD *)(result + 1892);
      if (v35 >= 0x3A99 && v28) {
        goto LABEL_134;
      }
      if (v35 >= 0x3A99 && v34 <= 4) {
        goto LABEL_190;
      }
      if (v16 >= 0x3A99 && v18 >> 3 <= 0x270)
      {
        *(void *)(result + 8) = 2;
        goto LABEL_139;
      }
      if ((*(_DWORD *)(result + 1808) - *(_DWORD *)(result + 1904)) < 0x2BF21)
      {
        int v33 = 0;
      }
      else
      {
LABEL_190:
        *(void *)(result + 8) = 1;
        int v33 = 1;
      }
      break;
    case 1:
      BOOL v36 = !v30;
      if (v22 >> 3 >= 0x271) {
        BOOL v36 = 0;
      }
      if (!v36) {
        goto LABEL_81;
      }
      if (v32) {
        goto LABEL_107;
      }
      if (v28) {
        goto LABEL_134;
      }
      if (v34 >= 5)
      {
        int v33 = 2;
        goto LABEL_141;
      }
      int v33 = 1;
      if (v14 > 0x15F90) {
        *(_DWORD *)(result + 12) = 1;
      }
      break;
    case 2:
      BOOL v37 = !v30;
      if (v22 >> 3 >= 0x271) {
        BOOL v37 = 0;
      }
      if (!v37)
      {
LABEL_81:
        *(void *)(result + 8) = 0x100000005;
        *(unsigned char *)(result + 1909) = 0;
        goto LABEL_117;
      }
      if (v32)
      {
LABEL_107:
        *(void *)(result + 8) = 10;
        int v33 = 10;
      }
      else if (v28)
      {
LABEL_134:
        *(void *)(result + 8) = 3;
        int v33 = 3;
      }
      else
      {
        if (v34 <= 4) {
          goto LABEL_140;
        }
LABEL_139:
        int v33 = 2;
      }
      break;
    case 3:
      if (a5 > 5.0 && v22 >> 4 >= 0x271) {
        goto LABEL_116;
      }
      if (v31) {
        goto LABEL_97;
      }
      int v33 = 3;
      if (v14 >= 0x15F91 && v34 <= 4)
      {
LABEL_140:
        int v33 = 1;
LABEL_141:
        *(_DWORD *)(result + 8) = v33;
      }
      break;
    case 5:
      if (v31) {
        goto LABEL_97;
      }
      if (*(_DWORD *)(result + 24) == 2
        && (*(unsigned char *)a3 & 0x20) == 0
        && *(unsigned __int16 *)(result + 1916) >= 6uLL
        && 1000 * (unint64_t)*(unsigned __int16 *)(result + 1916) >= (*(_DWORD *)(result + 1808)
                                                                                         - *(_DWORD *)(result + 1924)))
      {
        goto LABEL_115;
      }
      if (v20 >= 0x2711)
      {
LABEL_94:
        *(void *)(result + 8) = 0x100000006;
        goto LABEL_95;
      }
      char v42 = v14 < 0x15F91 || v26 < 0x15F91 || v30;
      if (v42) {
        goto LABEL_117;
      }
      int v33 = 0;
      *(void *)(result + 8) = 0;
      int v39 = *(_DWORD *)(result + 1808);
      goto LABEL_121;
    case 6:
      if (v31)
      {
LABEL_97:
        if (a5 <= 1.79999995) {
          int v33 = 1;
        }
        else {
          int v33 = 2;
        }
        *(_DWORD *)(result + 8) = v33;
        *(_DWORD *)(result + 12) = 1;
      }
      else if (v24 < 0x7531 || *(_DWORD *)(result + 16) == 9)
      {
        int v33 = 6;
        if (a5 < 17.8999996 && *(_DWORD *)(result + 24) == 2)
        {
          if ((*(unsigned char *)a3 & 0x20) != 0
            || *(unsigned __int16 *)(result + 1916) < 6uLL
            || 1000 * (unint64_t)*(unsigned __int16 *)(result + 1916) < (*(_DWORD *)(result + 1808)
                                                                                            - *(_DWORD *)(result + 1924)))
          {
LABEL_95:
            int v33 = 6;
          }
          else
          {
LABEL_115:
            *(void *)(result + 8) = 0x100000001;
            int v33 = 1;
            *(unsigned char *)(result + 1909) = 1;
            *(_WORD *)(result + 1900) = 0;
            *(_DWORD *)(result + 1904) = 0;
            *(void *)(result + 1872) = 0;
            *(void *)(result + 1880) = 0;
            *(void *)(result + 1864) = 0;
            *(_DWORD *)(result + 1888) = 0;
          }
        }
      }
      else
      {
LABEL_116:
        *(void *)(result + 8) = 0x100000005;
LABEL_117:
        int v33 = 5;
      }
      break;
    case 10:
      BOOL v38 = !v30;
      if (v22 >> 3 >= 0x271) {
        BOOL v38 = 0;
      }
      if (v38)
      {
        int v33 = 10;
      }
      else
      {
        *(void *)(result + 8) = 0x100000005;
        *(unsigned char *)(result + 1909) = 0;
        int v33 = 5;
      }
      int v39 = *(_DWORD *)(result + 1808);
      if ((v39 - *(_DWORD *)(result + 1912)) > 0x15F8F)
      {
        int v33 = 0;
        *(void *)(result + 8) = 0;
LABEL_121:
        *(_DWORD *)(result + 1904) = v39;
        *(_DWORD *)(result + 1892) = 0;
      }
      break;
    default:
      break;
  }
  if (v27)
  {
    if (a4 == 1)
    {
      int v44 = 1;
LABEL_145:
      *(_DWORD *)(result + 8) = v44;
LABEL_146:
      *(_DWORD *)(result + 12) = 1;
      return result;
    }
    __int16 v45 = (unsigned char *)(v27 + 4224);
    int v46 = *(_DWORD *)(v27 + 4216);
    if (v46 != 9)
    {
      if (v46 == 5)
      {
        if (*v45)
        {
          if (*(unsigned char *)(v27 + 4226))
          {
            if (a4 == 2) {
              goto LABEL_159;
            }
LABEL_164:
            if (a4 != 3) {
              return result;
            }
LABEL_167:
            int v44 = 3;
            goto LABEL_145;
          }
          *(_DWORD *)(result + 8) = 2;
          if (*(int *)(v27 + 4220) >= 3) {
            goto LABEL_146;
          }
LABEL_186:
          *(_DWORD *)(result + 12) = 0;
          return result;
        }
      }
      else if (v46 == 3)
      {
        goto LABEL_150;
      }
LABEL_158:
      if (a4 == 2)
      {
LABEL_159:
        if (v33 == 6) {
          uint64_t v47 = 0x100000006;
        }
        else {
          uint64_t v47 = 0x100000005;
        }
        *(void *)(result + 8) = v47;
        return result;
      }
      if (v46 == 4 && *v45)
      {
        if (!*(unsigned char *)(v27 + 4226)) {
          goto LABEL_159;
        }
        goto LABEL_164;
      }
      if (a4 == 3) {
        goto LABEL_167;
      }
      if (v46 == 10)
      {
        if (!*v45 || *(unsigned char *)(v27 + 4226)) {
          return result;
        }
        int v48 = 11;
      }
      else if (v46 == 8)
      {
        if (!*v45 || *(unsigned char *)(v27 + 4226)) {
          return result;
        }
        int v48 = 10;
      }
      else
      {
        if (v46 != 7 || !*v45 || *(unsigned char *)(v27 + 4226)) {
          return result;
        }
        int v48 = 3;
      }
      *(_DWORD *)(result + 8) = v48;
      if (*(_DWORD *)(v27 + 4220) == 3) {
        goto LABEL_146;
      }
      goto LABEL_186;
    }
LABEL_150:
    if (*v45 && !*(unsigned char *)(v27 + 4226))
    {
      *(_DWORD *)(result + 8) = 1;
      if (*(int *)(v27 + 4220) > 2) {
        goto LABEL_146;
      }
      goto LABEL_186;
    }
    goto LABEL_158;
  }
  return result;
}

uint64_t BlueFin::GlPeContextMgr::UpdateEnvironmentContext(uint64_t this, unsigned int a2, unsigned int a3, unsigned __int8 a4, double a5, int a6, unsigned int a7, int a8, int a9, BOOL a10)
{
  uint64_t v10 = this;
  int v11 = *(_DWORD *)(this + 16);
  *(unsigned char *)(this + 1804) = 0;
  if (a6)
  {
    uint64_t v12 = 0x100000007;
LABEL_5:
    *(void *)(this + 16) = v12;
    return this;
  }
  if (a9)
  {
    uint64_t v12 = 0x100000006;
    goto LABEL_5;
  }
  if (*(_DWORD *)(this + 1384) == 1)
  {
    *(_DWORD *)(this + 16) = 5;
    if (v11 != 5) {
      *(_DWORD *)(this + 1828) = *(_DWORD *)(this + 1808);
    }
    return this;
  }
  BlueFin::GlPeContextMgr::UpdateEnvCounters(this, a2, a3, 0, a5, a7, a8);
  this = BlueFin::GlPeContextMgr::UpdateEnvFromHula(v10);
  unsigned int v15 = *(_DWORD *)(v10 + 1800);
  if (v15)
  {
    if (*(_DWORD *)(v10 + 1808) <= v15)
    {
      unsigned int v16 = *(_DWORD *)(v10 + 16);
      if (v16 <= 9 && ((1 << v16) & 0x207) != 0 && *(_DWORD *)(v10 + 1792) == 9)
      {
        int v17 = *(_DWORD *)(v10 + 1796);
        *(_DWORD *)(v10 + 16) = 9;
        *(_DWORD *)(v10 + 20) = v17;
        *(unsigned char *)(v10 + 1804) = 1;
        goto LABEL_24;
      }
    }
  }
  if (!*(unsigned char *)(v10 + 1804))
  {
    if (*(char *)(v10 + 1852) <= 30)
    {
      if (*(char *)(v10 + 1851) > 30 || *(unsigned char *)(v10 + 1990))
      {
        int v18 = 2;
      }
      else
      {
        if (!a3) {
          goto LABEL_23;
        }
        int v18 = 1;
      }
    }
    else
    {
      int v18 = 3;
    }
    *(_DWORD *)(v10 + 16) = v18;
LABEL_23:
    this = (uint64_t)BlueFin::GlPeContextMgr::DetermineConfidenceOfEnvContext((_DWORD *)v10, a5, a10);
  }
LABEL_24:
  int v19 = *(_DWORD *)(v10 + 16);
  if ((v11 & 0xFFFFFFFE) != 2 && (v19 & 0xFFFFFFFE) == 2) {
    *(_DWORD *)(v10 + 1824) = *(_DWORD *)(v10 + 1808);
  }
  if (v11 != v19) {
    *(_DWORD *)(v10 + 1812) = *(_DWORD *)(v10 + 1808);
  }
  return this;
}

uint64_t BlueFin::GlPeContextMgr::UpdateEnvCounters(uint64_t this, unsigned int a2, unsigned int a3, unsigned __int8 a4, double a5, unsigned int a6, int a7)
{
  *(double *)(this + 1840) = a5;
  *(unsigned char *)(this + 1848) = a3;
  *(unsigned char *)(this + 1849) = a6;
  if (*(unsigned char *)(this + 1805))
  {
    uint32x2_t v7 = vcgt_u32(vmin_u32((uint32x2_t)vcvt_s32_f32(vmul_n_f32((float32x2_t)0x3F0000003F333333, (float)a2)), (uint32x2_t)0x80000000CLL), (uint32x2_t)vdup_n_s32(a3));
    if (a6)
    {
LABEL_3:
      float v8 = (float)a6 / (float)(int)(a7 + a6);
      goto LABEL_6;
    }
  }
  else
  {
    uint32x2_t v7 = 0;
    if (a6) {
      goto LABEL_3;
    }
  }
  float v8 = 0.0;
LABEL_6:
  BOOL v10 = a3 > 0x23 || a6 > 0x1B;
  if (!*(unsigned char *)(this + 1850))
  {
    BOOL v11 = a5 >= 10.0;
    if (v8 <= 0.85) {
      BOOL v11 = 1;
    }
    if (!v10 && ((v11 | v7.i32[0]) & 1) != 0)
    {
      *(unsigned char *)(this + 1851) = 45;
      if (a5 >= 20.0 || v8 <= 0.6 || (v7.i8[4] & 1) != 0) {
        *(unsigned char *)(this + 1852) = 45;
      }
    }
  }
  uint64_t v12 = *(void *)(this + 1816);
  unsigned int v13 = (unsigned char *)(v12 + 4224);
  int v14 = *(_DWORD *)(v12 + 4216);
  BOOL v15 = v14 != 6 && v14 != 1 || !*v13 || v13[2] != 0;
  if ((*(_DWORD *)(this + 1808) - *(_DWORD *)(this + 1812)) < 0x15F91)
  {
    BOOL v16 = 1;
    if (!a3) {
      return this;
    }
  }
  else
  {
    BOOL v16 = *(_DWORD *)(this + 16) == 0;
    if (!a3) {
      return this;
    }
  }
  if (v15 || v16)
  {
    BOOL v17 = a5 >= 10.0;
    if (v8 <= 0.85) {
      BOOL v17 = 1;
    }
    char v18 = v10 | ~(v17 | v7.i8[0]);
    char v19 = *(unsigned char *)(this + 1851);
    if (v18)
    {
      char v20 = v19 - 1;
      *(unsigned char *)(this + 1851) = v20 & ~(v20 >> 7);
      char v21 = *(unsigned char *)(this + 1852) - 1;
      *(unsigned char *)(this + 1852) = v21 & ~(v21 >> 7);
      if (!v10)
      {
LABEL_52:
        *(unsigned char *)(this + 1850) = 1;
        return this;
      }
      char v22 = v20;
      if (v20 <= 1) {
        char v22 = 1;
      }
      *(unsigned char *)(this + 1851) = v22 - 1;
      char v23 = v21;
      if (v21 <= 1) {
        char v23 = 1;
      }
      LOBYTE(v24) = v23 - 1;
    }
    else
    {
      int v25 = (char)(v19 + 1);
      if (v25 >= 90) {
        char v26 = 90;
      }
      else {
        char v26 = v25;
      }
      *(unsigned char *)(this + 1851) = v26;
      if (a5 >= 20.0 || v8 <= 0.6 || (v7.i8[4] & 1) != 0)
      {
        if (v25 >= 89) {
          LOBYTE(v25) = 89;
        }
        *(unsigned char *)(this + 1851) = v25 + 1;
        if ((char)(*(unsigned char *)(this + 1852) + 1) >= 90) {
          LOBYTE(v24) = 90;
        }
        else {
          LOBYTE(v24) = *(unsigned char *)(this + 1852) + 1;
        }
      }
      else
      {
        int v24 = (*(unsigned __int8 *)(this + 1852) - 1) & ~((char)(*(unsigned char *)(this + 1852) - 1) >> 7);
      }
    }
    *(unsigned char *)(this + 1852) = v24;
    goto LABEL_52;
  }
  return this;
}

uint64_t BlueFin::GlPeContextMgr::UpdateEnvFromHula(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 1816);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)(v1 + 4288);
    if (*(unsigned char *)(v1 + 4288))
    {
      int v3 = *(_DWORD *)(v1 + 4280);
      if (v3 != 1 && v3 != 2)
      {
        if ((v3 - 3) >= 2)
        {
          if (v3 == 5)
          {
            int v3 = 8;
          }
          else
          {
            if (v3 != 6)
            {
LABEL_12:
              int v4 = *(_DWORD *)(v1 + 4284);
              *uint64_t v2 = 0;
              *(_DWORD *)(this + 1800) = *(_DWORD *)(this + 1808) + 60000;
              *(_DWORD *)(this + 1796) = v4 == 2;
              return this;
            }
            int v3 = 9;
          }
        }
        else
        {
          int v3 = 3;
        }
      }
      *(_DWORD *)(this + 1792) = v3;
      goto LABEL_12;
    }
  }
  return this;
}

_DWORD *BlueFin::GlPeContextMgr::DetermineConfidenceOfEnvContext(_DWORD *this, double a2, BOOL a3)
{
  BOOL v3 = 1;
  switch(this[4])
  {
    case 0:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_11;
    case 1:
      BOOL v3 = a2 < 1.0 || a3;
      goto LABEL_11;
    case 2:
      BOOL v3 = a2 > 20.0;
      goto LABEL_11;
    case 3:
      BOOL v4 = (this[452] - this[456]) > 0xBB8;
      goto LABEL_8;
    case 5:
      BOOL v4 = (this[457] - this[452]) > 3;
LABEL_8:
      BOOL v3 = v4;
LABEL_11:
      this[5] = v3;
      break;
    default:
      return this;
  }
  return this;
}

uint64_t BlueFin::MinnowEswRpcSatEncImp::esw_sat_rpc_add_carrier(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char a5, char a6, unsigned int a7, unsigned int a8, char a9, __int16 a10, char a11, char a12)
{
  char v17 = a3;
  uint64_t v29 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 384))(*(void *)(a1 + 8)) <= a3)
  {
    int v25 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 153, "esw_sat_rpc_add_carrier", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v26 = 153;
    goto LABEL_11;
  }
  char v20 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v27, v28, 1800, v20);
  BlueFin::GlStream::PutU08(v27, v17);
  if (!a4)
  {
    int v25 = "sv_id != INVALID_SVID";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 160, "esw_sat_rpc_add_carrier", (char)"sv_id != INVALID_SVID");
    int v26 = 160;
    goto LABEL_11;
  }
  BlueFin::GlStream::PutU08(v27, a4);
  BlueFin::GlStream::PutU08(v27, a5);
  BlueFin::GlStream::PutU08(v27, a6);
  BlueFin::GlStream::CarpPutBits(v27, a7 & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 1) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 2) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 3) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 4) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 5) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 6) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, (a7 >> 7) & 1, 1u, 8u);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 736))())
  {
    BlueFin::GlStream::CarpPutBits(v27, 1u, 1u, 8u);
    unsigned int v21 = 0;
  }
  else
  {
    BlueFin::GlStream::CarpPutBits(v27, (a7 >> 8) & 1, 1u, 8u);
    unsigned int v21 = (a7 >> 9) & 1;
  }
  BlueFin::GlStream::CarpPutBits(v27, v21, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v27, 0, 6u, 8u);
  BlueFin::GlStream::PutU08(v27, 0);
  BlueFin::GlStream::PutU08(v27, 0);
  BlueFin::GlStream::PutU32(v27, a8);
  BlueFin::GlStream::PutU08(v27, a9);
  BlueFin::GlStream::PutU08(v27, a11);
  BlueFin::GlStream::PutU08(v27, a12);
  BlueFin::GlStream::PutU08(v27, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v27);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 6, 0xCu, v28, Offset);
  unsigned int v23 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v23)
  {
    int v25 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 211, "esw_sat_rpc_add_carrier", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v26 = 211;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v26, v25);
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcSatEncImp::esw_sat_rpc_remove_carrier(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  char v5 = a3;
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 384))(*(void *)(a1 + 8)) <= a3)
  {
    uint64_t v12 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 218, "esw_sat_rpc_remove_carrier", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v13 = 218;
    goto LABEL_6;
  }
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v14, v15, 1800, v8);
  BlueFin::GlStream::PutU08(v14, v5);
  BlueFin::GlStream::PutU08(v14, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v14);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 6, 0xDu, v15, Offset);
  unsigned int v10 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v10)
  {
    uint64_t v12 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 227, "esw_sat_rpc_remove_carrier", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v13 = 227;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v13, v12);
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcSatEncImp::esw_sat_rpc_set_control_flag_multi_carr(uint64_t a1, uint64_t a2, unsigned int a3, char a4, unsigned __int16 *a5)
{
  char v7 = a3;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 384))(*(void *)(a1 + 8)) <= a3)
  {
    char v17 = "sat_id < m_rAsicConfigIfc.GetMaxNumSats()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 235, "esw_sat_rpc_set_control_flag_multi_carr", (char)"sat_id < m_rAsicConfigIfc.GetMaxNumSats()");
    int v18 = 235;
    goto LABEL_9;
  }
  char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v19, v20, 1800, v10);
  BlueFin::GlStream::PutU08(v19, v7);
  BlueFin::GlStream::PutU08(v19, a4);
  BlueFin::GlStream::CarpPutBits(v19, *a5 & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 1) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 2) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 3) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 4) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 5) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 6) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 7) & 1, 1u, 8u);
  int v11 = *a5;
  unsigned int v12 = v11 & 0xFFFF3FFF | (*((unsigned __int8 *)a5 + 2) << 16);
  *a5 = v11 & 0x3FFF;
  *((unsigned char *)a5 + 2) = BYTE2(v12);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 736))())
  {
    BlueFin::GlStream::CarpPutBits(v19, 1u, 1u, 8u);
    unsigned int v13 = 0;
  }
  else
  {
    BlueFin::GlStream::CarpPutBits(v19, *(unsigned __int16 *)((char *)a5 + 1) & 1, 1u, 8u);
    unsigned int v13 = (*a5 >> 9) & 1;
  }
  BlueFin::GlStream::CarpPutBits(v19, v13, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 10) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 11) & 1, 1u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, (*a5 >> 12) & 3, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, *a5 >> 14, 2u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, a5[1] & 0x1F, 5u, 8u);
  BlueFin::GlStream::CarpPutBits(v19, *((unsigned __int8 *)a5 + 2) >> 5, 3u, 8u);
  BlueFin::GlStream::PutU08(v19, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v19);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 6, 9u, v20, Offset);
  unsigned int v15 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v15)
  {
    char v17 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 284, "esw_sat_rpc_set_control_flag_multi_carr", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v18 = 284;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v18, v17);
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcSatEncImp::esw_sat_rpc_set_grid_ctrl(uint64_t a1, uint64_t a2, char a3, char a4, unsigned int *a5)
{
  char v8 = (unsigned __int16 *)a2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v10);
  BlueFin::GlStream::PutU08(v13, a3);
  BlueFin::GlStream::PutU08(v13, a4);
  BlueFin::GlStream::PutU16(v13, 0);
  BlueFin::GlStream::PutU32(v13, *a5);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v8, 6, 0xBu, v14, Offset);
  LODWORD(v8) = v8[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 428, "esw_sat_rpc_set_grid_ctrl", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 428, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcJdEncImp::esw_jd_rpc_wipe_aid_set_all(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, uint64_t a5)
{
  LODWORD(v7) = a3;
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v10 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v20, v21, 1800, v10);
  BlueFin::GlStream::PutU08(v20, v7);
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v11 = v7;
    while (1)
    {
      unsigned int v13 = *a4++;
      char v12 = v13;
      if (v13 >= 0xCB) {
        break;
      }
      BlueFin::GlStream::PutU08(v20, v12);
      if (!--v11)
      {
        int v14 = (unsigned int *)(a5 + 8);
        do
        {
          BlueFin::GlStream::PutU16(v20, *((unsigned __int16 *)v14 - 4));
          BlueFin::GlStream::PutU08(v20, *((unsigned char *)v14 - 6));
          BlueFin::GlStream::PutU08(v20, 0);
          BlueFin::GlStream::PutU32(v20, *(v14 - 1));
          BlueFin::GlStream::PutU32(v20, *v14);
          BlueFin::GlStream::PutU32(v20, v14[1]);
          BlueFin::GlStream::PutU32(v20, v14[2]);
          v14 += 5;
          --v7;
        }
        while (v7);
        goto LABEL_7;
      }
    }
    int v18 = "bAidIdInRange";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 552, "esw_jd_rpc_wipe_aid_set_all", (char)"bAidIdInRange");
    int v19 = 552;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v19, v18);
  }
LABEL_7:
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v20);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)a2, 4, 0xDu, v21, Offset);
  unsigned int v16 = *(unsigned __int16 *)(a2 + 32);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v16)
  {
    int v18 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 568, "esw_jd_rpc_wipe_aid_set_all", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v19 = 568;
    goto LABEL_10;
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcGcmEncImp::esw_gcm_rpc_gpio_set(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a3 >= 27)
  {
    uint64_t v11 = "pin < _4777_GPIO_MAX";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 604, "esw_gcm_rpc_gpio_set", (char)"pin < _4777_GPIO_MAX");
    int v12 = 604;
    goto LABEL_6;
  }
  char v5 = a3;
  BOOL v6 = (unsigned __int16 *)a2;
  char v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v13, v14, 1800, v8);
  BlueFin::GlStream::PutU08(v13, v5);
  BlueFin::GlStream::PutU08(v13, a4);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v13);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v6, 0, 5u, v14, Offset);
  LODWORD(v6) = v6[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v6)
  {
    uint64_t v11 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 614, "esw_gcm_rpc_gpio_set", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v12 = 614;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v12, v11);
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcGcmEncImp::esw_gcm_rpc_gpio_configure(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*(int *)a3 >= 27)
  {
    unsigned int v9 = "config->pin < _4777_GPIO_MAX";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 619, "esw_gcm_rpc_gpio_configure", (char)"config->pin < _4777_GPIO_MAX");
    int v10 = 619;
    goto LABEL_6;
  }
  BOOL v4 = (unsigned __int16 *)a2;
  char v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 40))(*(void *)(a2 + 24));
  BlueFin::GlStream::GlStream((uint64_t)v11, v12, 1800, v6);
  BlueFin::GlStream::PutU08(v11, *a3);
  BlueFin::GlStream::PutU08(v11, a3[4]);
  BlueFin::GlStream::PutU08(v11, a3[8]);
  BlueFin::GlStream::PutU08(v11, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v11);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 0, 4u, v12, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 416))();
  if (result < v4)
  {
    unsigned int v9 = "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()";
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 630, "esw_gcm_rpc_gpio_configure", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    int v10 = 630;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", v10, v9);
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcHrmEncImp::esw_hrm_rpc_set_get_multiple(BlueFin::MinnowEswRpcHrmEncImp *this, BlueFin::GlMeSrdTransaction *a2, unsigned int a3, int a4, unsigned int a5, char a6, char a7, unsigned int *a8)
{
  LODWORD(v12) = a4;
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v16 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v25, v26, 1800, v16);
  BlueFin::GlStream::PutU08(v25, v12);
  BlueFin::GlStream::PutU08(v25, a5);
  BlueFin::GlStream::PutU08(v25, a6);
  BlueFin::GlStream::PutU08(v25, a7);
  BlueFin::GlStream::PutU32(v25, a3);
  if (v12)
  {
    uint64_t v12 = v12;
    char v17 = a8;
    uint64_t v18 = v12;
    do
    {
      unsigned int v19 = *(unsigned __int16 *)v17;
      char v17 = (unsigned int *)((char *)v17 + 2);
      BlueFin::GlStream::PutU16(v25, v19);
      --v18;
    }
    while (v18);
    if (a5 > 1)
    {
      char v20 = (unsigned int *)((char *)a8 + 2 * v12);
      do
      {
        unsigned int v21 = *v20++;
        BlueFin::GlStream::PutU32(v25, v21);
        --v12;
      }
      while (v12);
    }
  }
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v25);
  BlueFin::GlMeSrdTransaction::Add(a2, 2, 8u, v26, Offset);
  unsigned int v23 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v23)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 720, "esw_hrm_rpc_set_get_multiple", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 720, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcStmEncImp::esw_stm_rpc_adc_capture_request(BlueFin::MinnowEswRpcStmEncImp *this, BlueFin::GlMeSrdTransaction *a2, char a3)
{
  BOOL v4 = (unsigned __int16 *)a2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v9, v10, 1800, v6);
  BlueFin::GlStream::PutU08(v9, a3);
  BlueFin::GlStream::PutU08(v9, 0);
  BlueFin::GlStream::PutU08(v9, 0);
  BlueFin::GlStream::PutU08(v9, 0);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v9);
  BlueFin::GlMeSrdTransaction::Add((BlueFin::GlMeSrdTransaction *)v4, 1, 2u, v10, Offset);
  LODWORD(v4) = v4[16];
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v4)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 1102, "esw_stm_rpc_adc_capture_request", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 1102, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

uint64_t BlueFin::MinnowEswRpcGcmEncImp::esw_gcm_rpc_standby(BlueFin::MinnowEswRpcGcmEncImp *this, BlueFin::GlMeSrdTransaction *a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v6 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 40))(*((void *)a2 + 3));
  BlueFin::GlStream::GlStream((uint64_t)v10, v11, 1800, v6);
  BlueFin::GlStream::PutU08(v10, a3);
  unsigned int Offset = BlueFin::GlStream::GetOffset((BlueFin::GlStream *)v10);
  BlueFin::GlMeSrdTransaction::Add(a2, 0, 0xDu, v11, Offset);
  unsigned int v8 = *((unsigned __int16 *)a2 + 16);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 416))();
  if (result < v8)
  {
    DeviceFaultNotify("glmesrd_transaction_rpc_encoder_minnow.cpp", 1114, "esw_gcm_rpc_standby", (char)"pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glmesrd_transaction_rpc_encoder_minnow.cpp", 1114, "pTransaction->GetTransLength() <= m_rAsicConfigIfc.GetMaxEswTransBufSize()");
  }
  return result;
}

void BlueFin::MinnowEswRpcGcmEncImp::~MinnowEswRpcGcmEncImp(BlueFin::MinnowEswRpcGcmEncImp *this)
{
}

void BlueFin::MinnowEswRpcStmEncImp::~MinnowEswRpcStmEncImp(BlueFin::MinnowEswRpcStmEncImp *this)
{
}

void BlueFin::MinnowEswRpcHrmEncImp::~MinnowEswRpcHrmEncImp(BlueFin::MinnowEswRpcHrmEncImp *this)
{
}

void BlueFin::MinnowEswRpcTimEncImp::~MinnowEswRpcTimEncImp(BlueFin::MinnowEswRpcTimEncImp *this)
{
}

void BlueFin::MinnowEswRpcSatEncImp::~MinnowEswRpcSatEncImp(BlueFin::MinnowEswRpcSatEncImp *this)
{
}

void BlueFin::MinnowEswRpcJdEncImp::~MinnowEswRpcJdEncImp(BlueFin::MinnowEswRpcJdEncImp *this)
{
}

void BlueFin::MinnowEswRpcRmEncImp::~MinnowEswRpcRmEncImp(BlueFin::MinnowEswRpcRmEncImp *this)
{
}

uint64_t BlueFin::GlPeEnvironmentMonitor::GetEnvironmentGNSSSignalStr(uint64_t this, double *a2, double *a3)
{
  uint64_t v3 = 0;
  double v4 = 0.0;
  while (1)
  {
    float v5 = *(float *)(this + 1272 + 4 * v3);
    if (v5 < 5.0) {
      break;
    }
    double v4 = v4 + v5;
    if (++v3 == 4) {
      goto LABEL_6;
    }
  }
  if (v3)
  {
LABEL_6:
    *a2 = v4 / (double)(int)v3;
    double v6 = vabds_f32(*(float *)(this + 1272), *(float *)(this + 1272 + 4 * (int)v3 - 4));
    goto LABEL_8;
  }
  *a2 = 0.0;
  double v6 = 0.0;
LABEL_8:
  *a3 = v6;
  return this;
}

uint64_t BlueFin::GlPeEnvMonitorData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v5 >= 3)
  {
    DeviceFaultNotify("glpe_environmentmonitor.cpp", 432, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_environmentmonitor.cpp", 432, "ucVersion >= 1 && ucVersion <= 2");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 68;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    unsigned int v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v9, *(float *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v9, *(float *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v9, *(float *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v9, *(float *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 40));
    if (v5 == 2) {
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 32));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeEnvironmentMonitor::Serialize(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = &unk_270EC2380;
  int v5 = *(_DWORD *)(a1 + 1320);
  long long v2 = *(_OWORD *)(a1 + 1304);
  long long v6 = *(_OWORD *)(a1 + 1288);
  long long v7 = v2;
  return BlueFin::GlPeEnvMonitorData::SerializeImpl((uint64_t)&v4, a2);
}

void BlueFin::GlPeEnvMonitorData::~GlPeEnvMonitorData(BlueFin::GlPeEnvMonitorData *this)
{
}

uint64_t BlueFin::GlPeVlss::SetFadingStatusAuto(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    DeviceFaultNotify("glpe_vlss.cpp", 53, "SetFadingStatusAuto", (char)"rotFadingStatus == GLPE_FADING_NOT_KNOWN || rotFadingStatus == GLPE_FADING_NONE || rotFadingStatus == GLPE_FADING_DETECTED");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_vlss.cpp", 53, "rotFadingStatus == GLPE_FADING_NOT_KNOWN || rotFadingStatus == GLPE_FADING_NONE || rotFadingStatus == GLPE_FADING_DETECTED");
  }
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t BlueFin::GlPeNavGnssBlocked::IndoorHyst(uint64_t this, unsigned int a2, unsigned int a3)
{
  if (a2 > 8 || a3 >= 3)
  {
    int v3 = 0;
    *(void *)(this + 108) = (*(_DWORD *)(this + 108) + 1);
    goto LABEL_9;
  }
  int v3 = *(unsigned __int8 *)(this + 1);
  if (!*(unsigned char *)(this + 1))
  {
    int v5 = *(_DWORD *)(this + 108);
    *(void *)(this + 108) = (v5 + 1);
    if (v5 != -1) {
      goto LABEL_9;
    }
LABEL_8:
    int v3 = *(_DWORD *)(this + 84);
    goto LABEL_9;
  }
  int v4 = *(_DWORD *)(this + 112);
  *(_DWORD *)(this + 108) = 0;
  *(_DWORD *)(this + 112) = v4 + 1;
  if (v4 == -1) {
    goto LABEL_8;
  }
  int v3 = 1;
LABEL_9:
  *(_DWORD *)(this + 84) = v3;
  return this;
}

uint64_t BlueFin::GlPeNavGnssBlocked::UpdateIvdrStatus(uint64_t this, char a2, int a3, float a4, unsigned int a5, unsigned int a6, unsigned int a7)
{
  char v9 = a3;
  uint64_t v10 = this;
  if ((a2 & 1) != 0 || a3)
  {
    int v11 = *(_DWORD *)(this + 84);
    this = BlueFin::GlPeNavGnssBlocked::IndoorHyst(this, a5, a6);
    int v12 = *(_DWORD *)(v10 + 84);
    if (v11 == 1 && v12 == 0)
    {
      *(_DWORD *)(v10 + 100) = a7;
      *(void *)(v10 + 88) = 0;
      *(_DWORD *)(v10 + 84) = 0;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 72) = 0;
      *(unsigned char *)(v10 + 121) = 0;
    }
    else if (v12 == 1)
    {
      *(_DWORD *)(v10 + 88) = a7;
      if ((v9 & 1) == 0)
      {
        if (*(unsigned char *)(v10 + 121))
        {
          this = BlueFin::GlPeNavGnssBlocked::IsParkingGarage((BlueFin::GlPeNavGnssBlocked *)v10, a7);
          if (!this || *(float *)(v10 + 124) <= a4) {
            *(unsigned char *)(v10 + 121) = 0;
          }
        }
      }
      float v14 = *(float *)(v10 + 92);
      float v15 = a4 - v14;
      unsigned int v16 = *(_DWORD *)(v10 + 40);
      BOOL v17 = a7 >= v16;
      unsigned int v18 = a7 - v16;
      if (v18 != 0 && v17) {
        float v15 = (float)(v15 * 1000.0) / (float)v18;
      }
      *(float *)(v10 + 92) = v14 + v15;
    }
    else
    {
      *(unsigned char *)(v10 + 121) = 1;
    }
  }
  return this;
}

BOOL BlueFin::GlPeNavGnssBlocked::IsParkingGarage(BlueFin::GlPeNavGnssBlocked *this, int a2)
{
  if (*((_DWORD *)this + 21) != 1) {
    return 0;
  }
  unsigned int v2 = *((_DWORD *)this + 10);
  BOOL v4 = (float)(*((float *)this + 23) * (float)((a2 - v2) / 0x3E8)) < *((float *)this + 54)
    || *((_DWORD *)this + 46) > v2;
  return *((double *)this + 9) < *((float *)this + 31) && v4 || *(_DWORD *)(*((void *)this + 28) + 8) == 3;
}

BOOL BlueFin::GlPeNavGnssBlocked::PublishIndoorPropagation(BlueFin::GlPeNavGnssBlocked *this, int a2)
{
  if (!*((unsigned char *)this + 120)) {
    return 0;
  }
  BOOL v2 = !*((_DWORD *)this + 21) || *((_DWORD *)this + 29) == 0;
  if (v2 || !*((unsigned char *)this + 121)) {
    return 0;
  }
  unsigned int v3 = a2 - *((_DWORD *)this + 10);
  float v4 = *((float *)this + 23);
  float v5 = *((double *)this + 9);
  if (v4 <= v5) {
    float v4 = *((double *)this + 9);
  }
  return (float)(v4 * (float)(v3 / 0x3E8)) <= *((float *)this + 26) && v3 <= *((_DWORD *)this + 24);
}

BOOL BlueFin::ecef2lla(double *a1, uint64_t a2)
{
  double v2 = *a1;
  long double v3 = a1[1];
  BOOL v4 = v3 != 0.0 || *a1 != 0.0;
  if (v4)
  {
    uint64_t v7 = BlueFin::GlPeConvUtilCache::m_potThis;
    if (v2 == *(double *)BlueFin::GlPeConvUtilCache::m_potThis
      && v3 == *(double *)(BlueFin::GlPeConvUtilCache::m_potThis + 8)
      && a1[2] == *(double *)(BlueFin::GlPeConvUtilCache::m_potThis + 16))
    {
      *(_OWORD *)a2 = *(_OWORD *)(BlueFin::GlPeConvUtilCache::m_potThis + 24);
      *(void *)(a2 + 16) = *(void *)(v7 + 40);
    }
    else
    {
      double v8 = sqrt(v3 * v3 + v2 * v2);
      double v9 = a1[2];
      double v10 = sqrt(v8 * 6356752.0 * (v8 * 6356752.0) + v9 * 6378137.0 * (v9 * 6378137.0));
      double v11 = v9 + v9 * 6378137.0 / v10 * (v9 * 6378137.0 / v10 * (v9 * 6378137.0 / v10)) * 42841.3672;
      double v12 = v8 + v8 * 6356752.0 / v10 * (v8 * 6356752.0 / v10 * (v8 * 6356752.0 / v10)) * -42697.6728;
      double v13 = sqrt(v12 * v12 + v11 * v11);
      double v14 = v11 / v13;
      double v15 = v12 / v13;
      long double v16 = atan(v11 / v12) * 57.2957795;
      *(long double *)a2 = v16;
      double v17 = v8 / v15 + -1.0 / sqrt(v14 * v14 * 4.0408298e13 + v15 * v15 * 4.068063e13) * 4.068063e13;
      *(double *)(a2 + 16) = v17;
      long double v18 = atan2(v3, v2) * 57.2957795;
      *(long double *)(a2 + 8) = v18;
      *(long double *)(v7 + 32) = v18;
      *(double *)(v7 + 40) = v17;
      *(double *)uint64_t v7 = v2;
      *(double *)(v7 + 8) = a1[1];
      *(double *)(v7 + 16) = a1[2];
      *(long double *)(v7 + 24) = v16;
    }
  }
  return v4;
}

double BlueFin::iono_delay(uint64_t a1, double *a2, float *a3, int a4, float a5, float a6)
{
  if (a3) {
    double v8 = a3;
  }
  else {
    double v8 = (float *)&BlueFin::ionoDataDefault;
  }
  if (a5 < 0.0) {
    a5 = a5 + 360.0;
  }
  double v9 = a6;
  double v10 = v9 * 0.00555555556;
  BOOL v11 = v9 < 0.1;
  double v12 = 0.000555555564;
  if (!v11) {
    double v12 = v10;
  }
  float v13 = v12;
  float v14 = a5 * 0.0174532925;
  double v15 = *a2 * 0.00555555556;
  double v16 = a2[1] * 0.00555555556;
  double v17 = v13;
  double v18 = 0.0137 / (v13 + 0.11) + -0.022;
  double v19 = v15 + v18 * cosf(v14);
  double v20 = 0.416;
  if (v19 <= 0.416)
  {
    double v20 = v19;
    if (v19 < -0.416) {
      double v20 = -0.416;
    }
  }
  double v21 = v18 * sinf(v14);
  double v22 = v16 + v21 / cos(v20 * 3.14159265);
  double v23 = v20 + cos((v22 + -1.617) * 3.14159265) * 0.064;
  double v24 = fabs(v23);
  if (a4) {
    double v23 = v24;
  }
  LODWORD(v24) = *(_DWORD *)(a1 + 4);
  double v25 = (double)*(unint64_t *)&v24 * 0.001
      + v22 * 43200.0
      - floor(((double)*(unint64_t *)&v24 * 0.001 + v22 * 43200.0) / 86400.0) * 86400.0;
  double v26 = v8[4] + v8[5] * v23 + v23 * v8[6] * v23 + v23 * (v23 * v8[7]) * v23;
  if (v26 < 72000.0) {
    double v26 = 72000.0;
  }
  double v27 = (v25 + -50400.0) * 6.28318531 / v26;
  if (fabs(v27) >= 1.57)
  {
    double v29 = 0.000000005;
  }
  else
  {
    double v28 = *v8 + v8[1] * v23 + v23 * v8[2] * v23 + v23 * (v23 * v8[3]) * v23;
    if (v28 < 0.0) {
      double v28 = 0.0;
    }
    double v29 = v28 * (v27 * v27 * -0.5 + 1.0 + v27 * (v27 * (v27 * v27)) / 24.0) + 0.000000005;
  }
  return ((0.53 - v17) * ((0.53 - v17) * 16.0) * (0.53 - v17) + 1.0) * v29 * 299792458.0;
}

double BlueFin::PropagatePosWithTS(double *a1, double *a2, double a3, double a4)
{
  __double2 v7 = __sincos_stret(a3);
  double v8 = v7.__sinval * a4 * *a2;
  v12[0] = v7.__cosval * a4 * *a2;
  v12[1] = v8;
  void v12[2] = 0.0;
  BlueFin::ned2lla(a1, v12, (double *)&v10);
  *(_OWORD *)a1 = v10;
  double result = v11;
  a1[2] = v11;
  return result;
}

void BlueFin::greatCircleDistAndCourse(double *a1, double *a2, double *a3, double *a4)
{
  double v6 = *a1;
  if (*a1 > 89.9)
  {
    double v7 = 3.14159265;
    double v8 = (90.0 - *a2) * 0.0174532925 * 1800.0 / 3.14159265;
    if (v8 <= 0.0)
    {
      double v9 = 0.0;
      if (v8 < 0.0) {
        double v9 = ceil(v8 + -0.5);
      }
    }
    else
    {
      double v9 = floor(v8 + 0.5);
    }
    *a3 = v9 / 572.957795;
    goto LABEL_27;
  }
  if (v6 < -89.9)
  {
    double v10 = (*a2 + 90.0) * 0.0174532925 * 1800.0 / 3.14159265;
    if (v10 <= 0.0)
    {
      double v11 = 0.0;
      if (v10 < 0.0) {
        double v11 = ceil(v10 + -0.5);
      }
    }
    else
    {
      double v11 = floor(v10 + 0.5);
    }
    *a3 = v11 / 572.957795;
    goto LABEL_26;
  }
  double v12 = v6 * 0.0174532925;
  double v13 = *a2 * 0.0174532925;
  double v14 = a1[1] * 0.0174532925;
  if (*a2 <= 89.9 && *a2 >= -89.9) {
    double v15 = a2[1] * 0.0174532925;
  }
  else {
    double v15 = 0.0;
  }
  __double2 v16 = __sincos_stret(v12);
  __double2 v17 = __sincos_stret(v13);
  double v18 = v16.__cosval * v17.__cosval * cos(v14 - v15) + v16.__sinval * v17.__sinval;
  long double v19 = 1.0;
  if (v18 <= 1.0)
  {
    long double v19 = v18;
    if (v18 < -1.0) {
      long double v19 = -1.0;
    }
  }
  double v20 = acos(v19);
  *a3 = v20;
  double v21 = v20 * 1800.0 / 3.14159265;
  if (v21 <= 0.0)
  {
    double v22 = 0.0;
    if (v21 < 0.0) {
      double v22 = ceil(v21 + -0.5);
    }
  }
  else
  {
    double v22 = floor(v21 + 0.5);
  }
  if (v22 / 572.957795 == 0.0)
  {
    *a3 = 0.0;
LABEL_26:
    double v7 = 0.0;
LABEL_27:
    *a4 = v7;
    return;
  }
  double v23 = v16.__cosval * sin(v20);
  double v24 = v23 * 1800.0 / 3.14159265;
  if (v24 <= 0.0)
  {
    double v25 = 0.0;
    if (v24 < 0.0) {
      double v25 = ceil(v24 + -0.5);
    }
  }
  else
  {
    double v25 = floor(v24 + 0.5);
  }
  if (v25 / 572.957795 == 0.0) {
    double v26 = 0.00174532925;
  }
  else {
    double v26 = v23;
  }
  long double v27 = (v17.__sinval - v16.__sinval * cos(v20)) / v26;
  long double v28 = 0.0;
  if (v27 < 1.0)
  {
    long double v28 = 3.14159265;
    if (v27 > -1.0) {
      long double v28 = acos(v27);
    }
  }
  *a4 = v28;
  double v29 = *a3 * 1800.0 / 3.14159265;
  if (v29 <= 0.0)
  {
    double v30 = 0.0;
    if (v29 < 0.0) {
      double v30 = ceil(v29 + -0.5);
    }
  }
  else
  {
    double v30 = floor(v29 + 0.5);
  }
  *a3 = v30 / 572.957795;
  double v31 = (v15 - v14) * 1800.0 / 3.14159265;
  if (v31 <= 0.0)
  {
    double v32 = 0.0;
    if (v31 < 0.0) {
      double v32 = ceil(v31 + -0.5);
    }
  }
  else
  {
    double v32 = floor(v31 + 0.5);
  }
  if (v32 / 572.957795 == 0.0)
  {
    double v7 = 0.0;
    if (v13 - v12 < 0.0) {
      double v7 = 3.14159265;
    }
    goto LABEL_27;
  }
  double v33 = *a4 * 1800.0 / 3.14159265;
  if (v33 <= 0.0)
  {
    double v34 = 0.0;
    if (v33 < 0.0) {
      double v34 = ceil(v33 + -0.5);
    }
  }
  else
  {
    double v34 = floor(v33 + 0.5);
  }
  double v35 = v34 / 572.957795;
  *a4 = v34 / 572.957795;
  if (sin(v15 - v14) < 0.0 && v35 >= 0.00174532925)
  {
    double v7 = 6.28318531 - v35;
    goto LABEL_27;
  }
}

double BlueFin::ned2hlu@<D0>(long long *a1@<X0>, const BlueFin::Matrix *a2@<X1>, void *a3@<X8>)
{
  long long v15 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v17 = 0x300000001;
  uint64_t v16 = v4;
  BlueFin::Matrix::mult((BlueFin::Matrix *)&v10, a2, 1, (const BlueFin::Matrix *)&v15, COERCE_DOUBLE(0x300000001));
  int v5 = v14[16];
  *a3 = v10;
  BOOL v6 = v5 == 1;
  if (v5 == 1) {
    double v7 = &v11;
  }
  else {
    double v7 = &v13;
  }
  a3[1] = *v7;
  double v8 = (double *)&v12;
  if (!v6) {
    double v8 = (double *)v14;
  }
  double result = *v8;
  a3[2] = *(void *)v8;
  return result;
}

uint64_t BlueFin::GlUtcTime::fct2CtFctS(BlueFin::GlUtcTime *this, int a2)
{
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= a2
                                                           + BlueFin::GlWeekTowTime::m_ucCurrentLs)
    unsigned __int8 v2 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v2 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  return a2 + v2;
}

void BlueFin::GlUtcTime::~GlUtcTime(BlueFin::GlUtcTime *this)
{
}

uint64_t BlueFin::GlUtcTime::getTimeSystem(BlueFin::GlUtcTime *this)
{
  return 2;
}

uint64_t BlueFin::GlUtcTime::ctFct2fctS(BlueFin::GlUtcTime *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLs - 1 >= v1) {
    unsigned __int8 v2 = &BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v2 = &BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  return v1 - *v2;
}

uint64_t BlueFin::Matrix::Matrix(uint64_t this, const BlueFin::BigMatrix *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 4);
  if ((int)v2 >= 5)
  {
    uint64_t v11 = "otBigMatrix.GetRowSize() <= MAX_MATR_DIM";
    DeviceFaultNotify("glpe_matrix.cpp", 250, "Matrix", (char)"otBigMatrix.GetRowSize() <= MAX_MATR_DIM");
    int v12 = 250;
    goto LABEL_12;
  }
  uint64_t v3 = *((unsigned int *)a2 + 5);
  if ((int)v3 >= 5)
  {
    uint64_t v11 = "otBigMatrix.GetColSize() <= MAX_MATR_DIM";
    DeviceFaultNotify("glpe_matrix.cpp", 251, "Matrix", (char)"otBigMatrix.GetColSize() <= MAX_MATR_DIM");
    int v12 = 251;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v12, v11);
  }
  *(_DWORD *)(this + 128) = v2;
  *(_DWORD *)(this + 132) = v3;
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = this;
    do
    {
      ++v4;
      if ((int)v3 >= 1)
      {
        double v7 = (uint64_t *)(*(void *)(v5 + 8 * v4) + 8);
        uint64_t v8 = v3;
        double v9 = (void *)v6;
        do
        {
          uint64_t v10 = *v7++;
          *v9++ = v10;
          --v8;
        }
        while (v8);
      }
      v6 += 32;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t BlueFin::Matrix::mult(uint64_t this, BOOL a2, const BlueFin::Matrix *a3, const BlueFin::Matrix *a4)
{
  uint64_t v4 = *((unsigned int *)a3 + 32);
  if (v4 != *((_DWORD *)a4 + 32))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 359, "mult", (char)"mLeft.m_NbRows == mRight.m_NbRows");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 359, "mLeft.m_NbRows == mRight.m_NbRows");
  }
  uint64_t v5 = *((unsigned int *)a3 + 33);
  uint64_t v6 = *((unsigned int *)a4 + 33);
  if ((int)v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((int)v6 >= 1)
      {
        uint64_t v8 = 0;
        double v9 = a4;
        do
        {
          double v10 = 0.0;
          if ((int)v4 >= 1)
          {
            uint64_t v11 = a3;
            int v12 = (double *)v9;
            uint64_t v13 = v4;
            do
            {
              double v14 = *(double *)v11;
              uint64_t v11 = (const BlueFin::Matrix *)((char *)v11 + 32);
              double v15 = v14;
              double v16 = *v12;
              v12 += 4;
              double v10 = v10 + v15 * v16;
              --v13;
            }
            while (v13);
          }
          *(double *)(this + 32 * i + 8 * v8++) = v10;
          double v9 = (const BlueFin::Matrix *)((char *)v9 + 8);
        }
        while (v8 != v6);
      }
      a3 = (const BlueFin::Matrix *)((char *)a3 + 8);
    }
  }
  *(_DWORD *)(this + 128) = v5;
  *(_DWORD *)(this + 132) = v6;
  return this;
}

double BlueFin::Matrix::RotateCovMatrix(BlueFin::Matrix *this, BlueFin::Matrix *a2)
{
  if (*((_DWORD *)this + 33) != *((_DWORD *)a2 + 33) || *((_DWORD *)this + 32) != *((_DWORD *)a2 + 32))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 600, "RotateCovMatrix", (char)"this->GetColSize() == otR.GetColSize() && this->GetRowSize() == otR.GetRowSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 600, "this->GetColSize() == otR.GetColSize() && this->GetRowSize() == otR.GetRowSize()");
  }
  uint64_t v12 = 0;
  double v10 = 0.0;
  BlueFin::Matrix::mult((BlueFin::Matrix *)v11, this, 1, a2, 0.0);
  BlueFin::Matrix::mult((uint64_t)v9, a2, (const BlueFin::Matrix *)v11);
  if (v9 != (_OWORD *)this)
  {
    long long v5 = v9[5];
    *((_OWORD *)this + 4) = v9[4];
    *((_OWORD *)this + 5) = v5;
    long long v6 = v9[7];
    *((_OWORD *)this + 6) = v9[6];
    *((_OWORD *)this + 7) = v6;
    long long v7 = v9[1];
    *(_OWORD *)this = v9[0];
    *((_OWORD *)this + 1) = v7;
    long long v8 = v9[3];
    *((_OWORD *)this + 2) = v9[2];
    *((_OWORD *)this + 3) = v8;
    double result = v10;
    *((double *)this + 16) = v10;
  }
  return result;
}

uint64_t BlueFin::Matrix::operator-@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 128) = 0;
  uint64_t v3 = *(unsigned int *)(a2 + 132);
  if (v3 != *(_DWORD *)(result + 132)
    || (uint64_t v4 = *(unsigned int *)(a2 + 128), v4 != *(_DWORD *)(result + 128)))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 657, "operator-", (char)"bCond");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 657, "bCond");
  }
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    long long v6 = (double *)a3;
    do
    {
      long long v7 = (double *)result;
      long long v8 = (double *)a2;
      double v9 = v6;
      uint64_t v10 = v3;
      if ((int)v3 >= 1)
      {
        do
        {
          double v11 = *v7++;
          double v12 = v11;
          double v13 = *v8++;
          *v9++ = v12 - v13;
          --v10;
        }
        while (v10);
      }
      ++v5;
      v6 += 4;
      a2 += 32;
      result += 32;
    }
    while (v5 != v4);
  }
  *(_DWORD *)(a3 + 128) = v4;
  *(_DWORD *)(a3 + 132) = v3;
  return result;
}

_DWORD *BlueFin::BigMatrix::Clone(_DWORD *this, const BlueFin::BigMatrix *a2)
{
  int v2 = *((_DWORD *)a2 + 4);
  int v3 = *((_DWORD *)a2 + 5);
  this[4] = v2;
  this[5] = v3;
  if (v2 > this[6] || (uint64_t v4 = (uint64_t)this, v3 > this[7]))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 803, "Clone", (char)"m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 803, "m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
  }
  if (v2 >= 1)
  {
    uint64_t v6 = 1;
    do
      this = memcpy((void *)(*(void *)(*(void *)(v4 + 8) + 8 * v6) + 8), (const void *)(*(void *)(*((void *)a2 + 1) + 8 * v6) + 8), 8 * *(int *)(v4 + 20));
    while (v6++ < *(int *)(v4 + 16));
  }
  return this;
}

_DWORD *BlueFin::BigMatrix::ReShape(_DWORD *this, int a2, int a3)
{
  this[4] = a2;
  this[5] = a3;
  if (this[6] < a2 || this[7] < a3)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 947, "ReShape", (char)"m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 947, "m_NbRows <= m_NbMaxRows && m_NbCols <= m_NbMaxCols");
  }
  return this;
}

uint64_t BlueFin::BigMatrix::mult(uint64_t this, const BlueFin::BigMatrix *a2, BOOL a3, const BlueFin::BigMatrix *a4)
{
  if ((const BlueFin::BigMatrix *)this == a2)
  {
    long double v19 = "this != &mLeft";
    DeviceFaultNotify("glpe_matrix.cpp", 1032, "mult", (char)"this != &mLeft");
    int v20 = 1032;
    goto LABEL_22;
  }
  if ((const BlueFin::BigMatrix *)this == a4)
  {
    long double v19 = "this != &mRight";
    DeviceFaultNotify("glpe_matrix.cpp", 1033, "mult", (char)"this != &mRight");
    int v20 = 1033;
    goto LABEL_22;
  }
  int v4 = *((_DWORD *)a2 + 5);
  if (v4 != *((_DWORD *)a4 + 5))
  {
    long double v19 = "mLeft.m_NbCols == mRight.m_NbCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1036, "mult", (char)"mLeft.m_NbCols == mRight.m_NbCols");
    int v20 = 1036;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v20, v19);
  }
  uint64_t v5 = *((unsigned int *)a2 + 4);
  if ((int)v5 > *(_DWORD *)(this + 24) || (int v6 = *((_DWORD *)a4 + 4), v6 > *(_DWORD *)(this + 28)))
  {
    long double v19 = "mLeft.m_NbRows <= m_NbMaxRows && mRight.m_NbRows <= m_NbMaxCols";
    DeviceFaultNotify("glpe_matrix.cpp", 1037, "mult", (char)"mLeft.m_NbRows <= m_NbMaxRows && mRight.m_NbRows <= m_NbMaxCols");
    int v20 = 1037;
    goto LABEL_22;
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = 1;
    do
    {
      if (v6 >= 1)
      {
        uint64_t v8 = *((void *)a2 + 1);
        uint64_t v9 = *((void *)a4 + 1);
        uint64_t v10 = *(void *)(*(void *)(this + 8) + 8 * v7);
        uint64_t v11 = 1;
        do
        {
          if (v4 < 1)
          {
            double v14 = 0.0;
          }
          else
          {
            double v12 = (double *)(*(void *)(v9 + 8 * v11) + 8);
            double v13 = (double *)(*(void *)(v8 + 8 * v7) + 8);
            double v14 = 0.0;
            uint64_t v15 = (v4 + 1) - 1;
            do
            {
              double v16 = *v13++;
              double v17 = v16;
              double v18 = *v12++;
              double v14 = v14 + v17 * v18;
              --v15;
            }
            while (v15);
          }
          *(double *)(v10 + 8 * v11++) = v14;
        }
        while (v11 != v6 + 1);
      }
      ++v7;
    }
    while (v7 != v5 + 1);
  }
  *(_DWORD *)(this + 16) = v5;
  *(_DWORD *)(this + 20) = *((_DWORD *)a4 + 4);
  return this;
}

uint64_t BlueFin::BigMatrix::RemoveRow(BlueFin::BigMatrix *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  BOOL v4 = a2 < 1 || v2 == 1 || (int)v2 < a2;
  int v5 = v4;
  if (!v4)
  {
    *((_DWORD *)this + 4) = v2 - 1;
    if ((int)v2 > a2)
    {
      int v6 = *((_DWORD *)this + 5);
      uint64_t v7 = a2;
      do
      {
        if (v6 <= 0)
        {
          uint64_t v9 = v7 + 1;
        }
        else
        {
          uint64_t v8 = *((void *)this + 1);
          uint64_t v9 = v7 + 1;
          uint64_t v10 = *(void *)(v8 + 8 * (v7 + 1));
          uint64_t v11 = (void *)(*(void *)(v8 + 8 * v7) + 8);
          double v12 = (uint64_t *)(v10 + 8);
          uint64_t v13 = (v6 + 1) - 1;
          do
          {
            uint64_t v14 = *v12++;
            *v11++ = v14;
            --v13;
          }
          while (v13);
        }
        uint64_t v7 = v9;
      }
      while (v9 != v2);
    }
  }
  return v5 ^ 1u;
}

uint64_t BlueFin::BigMatrix::operator+=(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  int v2 = *(_DWORD *)(result + 20);
  if (v3 != *(_DWORD *)(a2 + 16) || v2 != *(_DWORD *)(a2 + 20))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 1416, "operator+=", (char)"ucLeftNumRows == ucRightNumRows && ucLeftNumCols == ucRightNumCols");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 1416, "ucLeftNumRows == ucRightNumRows && ucLeftNumCols == ucRightNumCols");
  }
  if ((int)v3 >= 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = v3 + 1;
    uint64_t v7 = 1;
    do
    {
      if (v2 >= 1)
      {
        uint64_t v8 = (double *)(*(void *)(*(void *)(result + 8) + 8 * v7) + 8);
        uint64_t v9 = (double *)(*(void *)(v5 + 8 * v7) + 8);
        uint64_t v10 = (v2 + 1) - 1;
        do
        {
          double v11 = *v9++;
          *uint64_t v8 = v11 + *v8;
          ++v8;
          --v10;
        }
        while (v10);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  return result;
}

void *BlueFin::MatSkewCross::MatSkewCross(void *this, const BlueFin::SKFVector *a2)
{
  *this = a2;
  if (*((_DWORD *)a2 + 2) != 3)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 1563, "MatSkewCross", (char)"m_vect.GetLen() == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 1563, "m_vect.GetLen() == 3");
  }
  return this;
}

double BlueFin::MatSkewCross::operator()(uint64_t a1, int a2, int a3)
{
  if (a2 >= 4)
  {
    uint64_t v5 = "r <= 3";
    DeviceFaultNotify("glpe_matrix.cpp", 1578, "operator()", (char)"r <= 3");
    int v6 = 1578;
    goto LABEL_25;
  }
  if (a3 >= 4)
  {
    uint64_t v5 = "c <= 3";
    DeviceFaultNotify("glpe_matrix.cpp", 1579, "operator()", (char)"c <= 3");
    int v6 = 1579;
LABEL_25:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v6, v5);
  }
  if (a2 == 1 && a3 == 2)
  {
    double v3 = *(double *)(**(void **)a1 + 24);
    return -v3;
  }
  if (a2 == 1 && a3 == 3) {
    return *(double *)(**(void **)a1 + 16);
  }
  if (a2 == 2 && a3 == 3)
  {
    double v3 = *(double *)(**(void **)a1 + 8);
    return -v3;
  }
  if (a2 == 2 && a3 == 1) {
    return *(double *)(**(void **)a1 + 24);
  }
  if (a2 == 3 && a3 == 1)
  {
    double v3 = *(double *)(**(void **)a1 + 16);
    return -v3;
  }
  double result = 0.0;
  if (a2 == 3 && a3 == 2) {
    return *(double *)(**(void **)a1 + 8);
  }
  return result;
}

void BlueFin::BigMatrix_F::AddRow(BlueFin::BigMatrix_F *this)
{
  int v1 = *((_DWORD *)this + 486);
  if (v1 >= 21)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 1790, "AddRow", (char)"bCond");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 1790, "bCond");
  }
  *((_DWORD *)this + 486) = v1 + 1;
  size_t v2 = 4 * *((int *)this + 487);
  double v3 = (char *)this + 84 * v1;

  bzero(v3, v2);
}

double BlueFin::SKFVector::Var(BlueFin::SKFVector *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if ((int)v1 < 1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)this;
  double v3 = *(double *)(*(void *)this + 8);
  if (v1 == 1)
  {
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v4 = v1 + 1;
    uint64_t v6 = v1 - 1;
    uint64_t v7 = (double *)(v2 + 16);
    do
    {
      double v8 = *v7++;
      double v3 = v3 + v8;
      --v6;
    }
    while (v6);
    double v3 = v3 / (double)(int)v1;
  }
  uint64_t v9 = v4 - 1;
  uint64_t v10 = (double *)(v2 + 8);
  double v11 = 0.0;
  do
  {
    double v12 = *v10++;
    double v11 = v11 + (v12 - v3) * (v12 - v3);
    --v9;
  }
  while (v9);
  double result = 0.0;
  if ((int)v1 >= 2) {
    return v11 / (double)((int)v1 - 1);
  }
  return result;
}

uint64_t *BlueFin::SKFVector::SortAscen(uint64_t *this)
{
  uint64_t v1 = *((unsigned int *)this + 2);
  if ((int)v1 >= 2)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *this;
    uint64_t v4 = v1 + 1;
    uint64_t v5 = *this + 16;
    uint64_t v6 = 2;
    do
    {
      double v7 = *(double *)(v3 + 8 * v6);
      uint64_t v8 = v2;
      while (1)
      {
        double v9 = *(double *)(v3 + 8 * (v8 + 1));
        if (v9 <= v7) {
          break;
        }
        *(double *)(v5 + 8 * v8) = v9;
        uint64_t v10 = v8 + 2;
        --v8;
        if (v10 <= 2)
        {
          int v11 = 1;
          goto LABEL_8;
        }
      }
      int v11 = v8 + 2;
LABEL_8:
      *(double *)(v3 + 8 * v11) = v7;
      ++v6;
      ++v2;
    }
    while (v6 != v4);
  }
  return this;
}

uint64_t *BlueFin::SKFVector::Quartiles(uint64_t *this, double *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = *((_DWORD *)this + 2);
  int v5 = v4 - 1;
  if (v4 >= 1)
  {
    if (v4 >= 0x65)
    {
      DeviceFaultNotify("glpe_matrix.cpp", 2015, "Quartiles", (char)"iLen <= GL_CHANNELS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 2015, "iLen <= GL_CHANNELS");
    }
    uint64_t v7 = *this;
    this = (uint64_t *)BlueFin::GlSortDoubles(*this + 8, (const double *)*((_DWORD *)this + 2), v12, a4);
    uint64_t v8 = 0;
    unsigned int v9 = v5;
    do
    {
      unint64_t v10 = (unint64_t)v9 >> 2;
      double v11 = *(double *)(v7 + 8 * v12[v10] + 8);
      if ((v9 & 3) != 0) {
        double v11 = (v11 + *(double *)(v7 + 8 * v12[v10 + 1] + 8)) * 0.5;
      }
      a2[v8++] = v11;
      v9 += v5;
    }
    while (v8 != 3);
  }
  return this;
}

uint64_t *BlueFin::SKFVector::mult(uint64_t *this, const BlueFin::BigMatrix *a2, const BlueFin::SKFVector *a3)
{
  int v3 = *((_DWORD *)a2 + 5);
  if (v3 != *((_DWORD *)a3 + 2))
  {
    double v17 = "rhs.GetColSize() == lhs.GetLen()";
    DeviceFaultNotify("glpe_matrix.cpp", 2143, "mult", (char)"rhs.GetColSize() == lhs.GetLen()");
    int v18 = 2143;
    goto LABEL_14;
  }
  uint64_t v4 = *((unsigned int *)a2 + 4);
  if (*((_DWORD *)this + 3) < (int)v4)
  {
    double v17 = "m_MaxLen >= rhs.GetRowSize()";
    DeviceFaultNotify("glpe_matrix.cpp", 2144, "mult", (char)"m_MaxLen >= rhs.GetRowSize()");
    int v18 = 2144;
LABEL_14:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v18, v17);
  }
  *((_DWORD *)this + 2) = v4;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *((void *)a2 + 1);
    uint64_t v6 = *this;
    uint64_t v7 = v4 + 1;
    uint64_t v8 = *(void *)a3 + 8;
    uint64_t v9 = 1;
    do
    {
      if (v3 < 1)
      {
        double v11 = 0.0;
      }
      else
      {
        unint64_t v10 = (double *)(*(void *)(v5 + 8 * v9) + 8);
        double v11 = 0.0;
        double v12 = (double *)v8;
        uint64_t v13 = (v3 + 1) - 1;
        do
        {
          double v14 = *v10++;
          double v15 = v14;
          double v16 = *v12++;
          double v11 = v11 + v15 * v16;
          --v13;
        }
        while (v13);
      }
      *(double *)(v6 + 8 * v9++) = v11;
    }
    while (v9 != v7);
  }
  return this;
}

uint64_t *BlueFin::SKFVector::mult(uint64_t *this, const BlueFin::Matrix *a2, const BlueFin::SKFVector *a3)
{
  int v3 = *((_DWORD *)a2 + 33);
  if (v3 != *((_DWORD *)a3 + 2))
  {
    double v16 = "rhs.GetColSize() == lhs.GetLen()";
    DeviceFaultNotify("glpe_matrix.cpp", 2159, "mult", (char)"rhs.GetColSize() == lhs.GetLen()");
    int v17 = 2159;
    goto LABEL_12;
  }
  uint64_t v4 = *((unsigned int *)a2 + 32);
  if (*((_DWORD *)this + 3) < (int)v4)
  {
    double v16 = "m_MaxLen >= rhs.GetRowSize()";
    DeviceFaultNotify("glpe_matrix.cpp", 2160, "mult", (char)"m_MaxLen >= rhs.GetRowSize()");
    int v17 = 2160;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", v17, v16);
  }
  *((_DWORD *)this + 2) = v4;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = *this;
    uint64_t v6 = v4 + 1;
    uint64_t v7 = *(void *)a3 + 8;
    uint64_t v8 = 1;
    do
    {
      double v9 = 0.0;
      if (v3 >= 1)
      {
        unint64_t v10 = a2;
        double v11 = (double *)v7;
        uint64_t v12 = (v3 + 1) - 1;
        do
        {
          double v13 = *(double *)v10;
          unint64_t v10 = (const BlueFin::Matrix *)((char *)v10 + 8);
          double v14 = v13;
          double v15 = *v11++;
          double v9 = v9 + v14 * v15;
          --v12;
        }
        while (v12);
      }
      *(double *)(v5 + 8 * v8++) = v9;
      a2 = (const BlueFin::Matrix *)((char *)a2 + 32);
    }
    while (v8 != v6);
  }
  return this;
}

double BlueFin::SKFVector::dot(BlueFin::SKFVector *this, const BlueFin::SKFVector *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 != *((_DWORD *)a2 + 2))
  {
    DeviceFaultNotify("glpe_matrix.cpp", 2175, "dot", (char)"this->GetLen() == lhs.GetLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 2175, "this->GetLen() == lhs.GetLen()");
  }
  if ((int)v2 < 1) {
    return 0.0;
  }
  int v3 = (double *)(*(void *)a2 + 8);
  uint64_t v4 = (double *)(*(void *)this + 8);
  double result = 0.0;
  do
  {
    double v6 = *v4++;
    double v7 = v6;
    double v8 = *v3++;
    double result = result + v7 * v8;
    --v2;
  }
  while (v2);
  return result;
}

double BlueFin::vcross@<D0>(BlueFin *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 33) != 1 || *((_DWORD *)this + 32) != 3)
  {
    DeviceFaultNotify("glpe_matrix.cpp", 2207, "vcross", (char)"rotVect.GetColSize() == 1 && rotVect.GetRowSize() == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.cpp", 2207, "rotVect.GetColSize() == 1 && rotVect.GetRowSize() == 3");
  }
  double result = *((double *)this + 8);
  uint64_t v5 = *(void *)this;
  double v6 = -*(double *)this;
  double v7 = *((double *)this + 4);
  *(void *)(a2 + 128) = 0x300000003;
  *(void *)a2 = 0;
  *(double *)(a2 + 8) = -result;
  *(double *)(a2 + 16) = v7;
  *(double *)(a2 + 32) = result;
  *(void *)(a2 + 40) = 0;
  *(double *)(a2 + 48) = v6;
  *(double *)(a2 + 64) = -v7;
  *(void *)(a2 + 72) = v5;
  *(void *)(a2 + 80) = 0;
  return result;
}

double BlueFin::QuaternionD::normalize(BlueFin::QuaternionD *this)
{
  double v1 = *(double *)this;
  double v2 = *((double *)this + 1);
  double v3 = *((double *)this + 2);
  double v4 = *((double *)this + 3);
  double v5 = v1 * v1 + v2 * v2 + v3 * v3 + v4 * v4;
  if (v5 <= 0.0)
  {
    DeviceFaultNotify("glpe_quaternionD.cpp", 51, "normalize", (char)"s > 0.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_quaternionD.cpp", 51, "s > 0.0");
  }
  double result = 1.0;
  if (v5 != 1.0)
  {
    double result = sqrt(v5);
    *(double *)this = v1 / result;
    *((double *)this + 1) = v2 / result;
    *((double *)this + 2) = v3 / result;
    *((double *)this + 3) = v4 / result;
  }
  return result;
}

double BlueFin::QuaternionD::conj(BlueFin::QuaternionD *this)
{
  return *(double *)this;
}

void BlueFin::QuaternionD::gyroIntegration(uint64_t a1, float64x2_t *a2, double a3)
{
  double v4 = a3 * 0.5;
  double cosval = 0.0;
  float64x2_t v11 = vmulq_n_f64(*a2, v4);
  double v12 = v4 * a2[1].f64[0];
  float v5 = BlueFin::QuaternionD::normalize((BlueFin::QuaternionD *)&cosval);
  __float2 v6 = __sincosf_stret(v5);
  double cosval = v6.__cosval;
  float64x2_t v11 = vmulq_n_f64(v11, v6.__sinval);
  double v12 = v12 * v6.__sinval;
  *(double *)a1 = BlueFin::QuaternionD::operator*((double *)a1, &cosval);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
}

double BlueFin::QuaternionD::operator*(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = a1[2];
  double v7 = a1[3];
  double v8 = a2[2];
  double v9 = a2[3];
  double v10 = *a1 * v5 + v3 * *a2 - v7 * v8 + v6 * v9;
  v12[0] = *a1 * *a2 - v3 * v5 - v6 * v8 - v7 * v9;
  v12[1] = v10;
  void v12[2] = v5 * v7 + v6 * v4 + v2 * v8 - v3 * v9;
  double v12[3] = v7 * v4 - v6 * v5 + v3 * v8 + v2 * v9;
  BlueFin::QuaternionD::normalize((BlueFin::QuaternionD *)v12);
  return v12[0];
}

double BlueFin::QuaternionD::q2Rot@<D0>(BlueFin::QuaternionD *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 128) = 0x300000003;
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  double v5 = *((double *)this + 3);
  double v6 = v3 * v4 - *(double *)this * v5 + v3 * v4 - *(double *)this * v5;
  *(double *)a2 = v3 * v3 + *(double *)this * *(double *)this - v4 * v4 - v5 * v5;
  *(double *)(a2 + 8) = v6;
  *(double *)(a2 + 16) = v3 * v5 + v2 * v4 + v3 * v5 + v2 * v4;
  double v7 = v2 * v2 - v3 * v3;
  *(double *)(a2 + 32) = v2 * v5 + v3 * v4 + v2 * v5 + v3 * v4;
  *(double *)(a2 + 40) = v7 + v4 * v4 - v5 * v5;
  *(double *)(a2 + 48) = v4 * v5 - v2 * v3 + v4 * v5 - v2 * v3;
  *(double *)(a2 + 64) = v3 * v5 - v2 * v4 + v3 * v5 - v2 * v4;
  *(double *)(a2 + 72) = v4 * v5 + v2 * v3 + v4 * v5 + v2 * v3;
  double result = v7 - v4 * v4 + v5 * v5;
  *(double *)(a2 + 80) = result;
  return result;
}

uint64_t BlueFin::QuaternionD::rot2Q(BlueFin::QuaternionD *this, const BlueFin::Matrix *a2)
{
  double v2 = *(double *)a2 + 1.0;
  double v3 = *((double *)a2 + 5);
  double v4 = *((double *)a2 + 10);
  double v5 = v2 + v3 + v4;
  if (v5 > 0.01)
  {
    double v6 = sqrt(v5) * 0.5;
    *(double *)this = v6;
    double v7 = v6 * 4.0;
    *((double *)this + 1) = (*((double *)a2 + 9) - *((double *)a2 + 6)) / v7;
    *((double *)this + 2) = (*((double *)a2 + 2) - *((double *)a2 + 8)) / v7;
    double v8 = *((double *)a2 + 4) - *((double *)a2 + 1);
LABEL_8:
    *((double *)this + 3) = v8 / v7;
    goto LABEL_9;
  }
  double v9 = v2 - v3 - v4;
  if (v9 > 0.01)
  {
    double v10 = sqrt(v9) * 0.5;
    *((double *)this + 1) = v10;
    double v7 = v10 * 4.0;
    *(double *)this = (*((double *)a2 + 9) - *((double *)a2 + 6)) / v7;
    *((double *)this + 2) = (*((double *)a2 + 1) + *((double *)a2 + 4)) / v7;
    double v11 = *((double *)a2 + 2);
    double v12 = *((double *)a2 + 8);
LABEL_7:
    double v8 = v11 + v12;
    goto LABEL_8;
  }
  double v13 = 1.0 - *(double *)a2;
  double v14 = v13 + v3 - v4;
  if (v14 > 0.01)
  {
    double v15 = sqrt(v14) * 0.5;
    *((double *)this + 2) = v15;
    double v7 = v15 * 4.0;
    *(double *)this = (*((double *)a2 + 2) - *((double *)a2 + 8)) / v7;
    *((double *)this + 1) = (*((double *)a2 + 1) + *((double *)a2 + 4)) / v7;
    double v11 = *((double *)a2 + 6);
    double v12 = *((double *)a2 + 9);
    goto LABEL_7;
  }
  double v17 = v13 - v3 + v4;
  if (v17 <= 0.01) {
    return 0;
  }
  double v18 = sqrt(v17) * 0.5;
  *((double *)this + 3) = v18;
  double v19 = v18 * 4.0;
  *(double *)this = (*((double *)a2 + 4) - *((double *)a2 + 1)) / v19;
  *((double *)this + 1) = (*((double *)a2 + 2) + *((double *)a2 + 8)) / v19;
  *((double *)this + 2) = (*((double *)a2 + 6) + *((double *)a2 + 9)) / v19;
LABEL_9:
  BlueFin::QuaternionD::normalize(this);
  return 1;
}

void BlueFin::QuaternionD::qnb2Eul(BlueFin::QuaternionD *this, long double *a2, long double *a3, long double *a4)
{
  double v4 = *(double *)this;
  double v5 = *((double *)this + 1);
  double v6 = *((double *)this + 2);
  double v7 = *((double *)this + 3);
  if (fabs(v4 * v4 + v5 * v5 + v6 * v6 + v7 * v7 + -1.0) >= 0.01)
  {
    DeviceFaultNotify("glpe_quaternionD.cpp", 176, "qnb2Eul", (char)"FABS_D(mag() - 1.0) < 1e-2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_quaternionD.cpp", 176, "FABS_D(mag() - 1.0) < 1e-2");
  }
  *a3 = asin((v4 * v6 + v5 * v7) * -2.0);
  double v11 = *((double *)this + 2);
  double v12 = *((double *)this + 1);
  double v13 = v11 * *((double *)this + 3) - *(double *)this * v12;
  *a2 = atan2(v13 + v13, (v11 * v11 + v12 * v12) * -2.0 + 1.0);
  double v14 = *((double *)this + 2);
  double v15 = *((double *)this + 3);
  double v16 = *((double *)this + 1) * v14 - *(double *)this * v15;
  *a4 = atan2(v16 + v16, (v15 * v15 + v14 * v14) * -2.0 + 1.0);
}

uint64_t BlueFin::QuaternionD::rotateV1toV2(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  double v6 = v4 * v4 + v3 * v3 + v5 * v5;
  if (v6 != 0.0 && v6 != 1.0)
  {
    double v6 = sqrt(v6);
    double v3 = v3 / v6;
    double v4 = v4 / v6;
    double v5 = v5 / v6;
  }
  if (v6 < 0.000001) {
    return 0;
  }
  double v9 = *a3;
  double v8 = a3[1];
  double v10 = a3[2];
  double v11 = v8 * v8 + v9 * v9 + v10 * v10;
  if (v11 != 0.0 && v11 != 1.0)
  {
    double v11 = sqrt(v11);
    double v9 = v9 / v11;
    double v8 = v8 / v11;
    double v10 = v10 / v11;
  }
  if (v11 < 0.000001) {
    return 0;
  }
  double v14 = v4 * v8 + v3 * v9 + v5 * v10;
  if (v14 >= -0.999999)
  {
    *a1 = v14 + 1.0;
    a1[1] = v4 * v10 - v5 * v8;
    double v15 = v5 * v9 - v3 * v10;
    double v3 = v3 * v8 - v4 * v9;
    a1[2] = v15;
LABEL_19:
    a1[3] = v3;
    goto LABEL_20;
  }
  *a1 = 0.0;
  if (fabs(v3) >= fabs(v4))
  {
    a1[1] = -v5;
    a1[2] = 0.0;
    goto LABEL_19;
  }
  a1[1] = 0.0;
  a1[2] = -v5;
  a1[3] = v4;
LABEL_20:
  BlueFin::QuaternionD::normalize((BlueFin::QuaternionD *)a1);
  return 1;
}

double BlueFin::QuaternionD::rotVec(BlueFin::QuaternionD *this, const BlueFin::Matrix *a2, BlueFin::Matrix *a3)
{
  double v3 = *((double *)this + 1);
  double v4 = *(double *)this + *(double *)this;
  double v5 = v4 * v3;
  double v6 = *((double *)this + 2);
  double v7 = *((double *)this + 3);
  double v8 = v4 * v6;
  double v9 = v4 * v7;
  double v10 = (v3 + v3) * v6;
  double v11 = (v3 + v3) * v7;
  double v12 = v6 + v6;
  double v13 = v6 * (v6 + v6);
  double v14 = v12 * v7;
  double v15 = v7 * (v7 + v7);
  double v16 = *(double *)a2 * (v10 + v9) + 0.0;
  double v17 = *((double *)a2 + 4);
  double v18 = *(double *)a2 * (1.0 - v13 - v15) + 0.0 + v17 * (v10 - v9);
  double v19 = 1.0 - v3 * (v3 + v3);
  double v20 = *(double *)a2 * (v11 - v8) + 0.0 + v17 * (v5 + v14);
  double v21 = *((double *)a2 + 8);
  *((void *)a3 + 16) = 0x100000003;
  *(double *)a3 = v18 + v21 * (v8 + v11);
  double result = v20 + v21 * (v19 - v13);
  *((double *)a3 + 4) = v16 + v17 * (v19 - v15) + v21 * (v14 - v5);
  *((double *)a3 + 8) = result;
  return result;
}

uint64_t BlueFin::GlPeShrimpSensBuffer::Write(uint64_t result, int a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a4)
  {
    unsigned int v5 = *(_DWORD *)(result + 1692);
    double v6 = (_DWORD *)(a3 + 8);
    uint64_t v7 = a4;
    do
    {
      unsigned int v8 = v5 % 0x3C;
      uint64_t v9 = result + 28 * (v5 % 0x3C);
      int v12 = *(_DWORD *)(v9 + 24);
      double v11 = (_DWORD *)(v9 + 24);
      int v10 = v12;
      int v13 = *((__int16 *)v6 - 4);
      if (v12)
      {
        int v14 = a2 - v10 + v13;
        if (v14 < 0) {
          int v14 = -v14;
        }
        if (v14 >= 0x65) {
          *(unsigned char *)(result + 1696) = 1;
        }
      }
      else
      {
        *double v11 = v13 + a2;
      }
      switch(a5)
      {
        case 0:
          *(_DWORD *)(result + 28 * (v5 % 0x3C)) = *v6;
          break;
        case 1:
          *(_DWORD *)(result + 28 * v8 + 4) = *v6;
          break;
        case 2:
          *(_DWORD *)(result + 28 * v8 + 8) = *v6;
          break;
        case 3:
          *(_DWORD *)(result + 28 * v8 + 12) = *v6;
          break;
        case 4:
          *(_DWORD *)(result + 28 * v8 + 16) = *v6;
          break;
        case 5:
          *(_DWORD *)(result + 28 * v8 + 20) = *v6;
          break;
        default:
          DeviceFaultNotify("glpe_shrimpsensbuffer.cpp", 88, "Write", (char)"false");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpsensbuffer.cpp", 88, "false");
      }
      v6 += 22;
      ++v5;
      --v7;
    }
    while (v7);
  }
  int v15 = *(_DWORD *)(result + 1684) | (1 << a5);
  *(_DWORD *)(result + 1684) = v15;
  if (v15 == *(_DWORD *)(result + 1680)) {
    *(_DWORD *)(result + 1692) = (*(_DWORD *)(result + 1692) + a4) % 0x3C;
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::GlEngineImplStd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13)
{
  uint64_t v23 = a1 + 4384;
  *(void *)a1 = &unk_270EC2418;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a9;
  *(void *)(a1 + 48) = a10;
  *(void *)(a1 + 56) = 0xBC00000064;
  *(_DWORD *)(a1 + 64) = 16843009;
  *(_WORD *)(a1 + 68) = 257;
  BlueFin::GlPeObjFactory::GlPeObjFactory(a1 + 72, (_OWORD *)(a1 + 40));
  *(void *)(a1 + 264) = &unk_270EC27A8;
  *(void *)(a1 + 272) = a1;
  *(void *)(a1 + 280) = a2;
  *(void *)(a1 + 288) = a3;
  *(void *)(a1 + 296) = a4;
  *(void *)(a1 + 304) = a5;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = a6;
  *(void *)(a1 + 408) = a7;
  *(void *)(a1 + 416) = a8;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = a9;
  *(void *)(a1 + 440) = a10;
  *(void *)(a1 + 448) = &unk_270EC2840;
  *(void *)(a1 + 456) = a1 + 264;
  *(void *)(a1 + 464) = a11;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 545) = 0u;
  *(_DWORD *)(a1 + 576) = 1;
  *(void *)(a1 + 584) = 0;
  *(_WORD *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = a1 + 264;
  *(_WORD *)(a1 + 608) = 0;
  *(void *)(a1 + 612) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_WORD *)(a1 + 688) = 0;
  *(void *)(a1 + 696) = &unk_270EBD2A8;
  *(void *)(a1 + 704) = v20;
  *(void *)(a1 + 712) = a1 + 264;
  BlueFin::GlComStressImpl::GlComStressImpl(a1 + 720, a1 + 696);
  *(_OWORD *)(a1 + 4368) = 0u;
  *(_WORD *)(a1 + 4384) = 1;
  *(unsigned char *)(v23 + 2) = 0;
  *(void *)(a1 + 4388) = 0;
  *(unsigned char *)(a1 + 4396) = 0;
  *(void *)(a1 + 4400) = 0x100000010;
  *(void *)(a1 + 4924) = 0;
  bzero((void *)(a1 + 4408), 0x203uLL);
  *(void *)(a1 + 488) = BlueFin::GlEngineImplStd::cbOnSoftAssert;
  *(void *)(a1 + 496) = a1;
  *(void *)(a1 + 376) = a12;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 712))(a1, a13);
  return a1;
}

void sub_263AF6290(_Unwind_Exception *a1)
{
  *double v1 = v2;
  BlueFin::GlComStressImpl::~GlComStressImpl(v3);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlEngineImplStd::cbOnSoftAssert(uint64_t this, void *a2)
{
  if (this && *(unsigned char *)(this + 32))
  {
    uint64_t v2 = *(void *)(this + 24) + 158168;
    int v3 = *(_DWORD *)v2;
    *(_DWORD *)uint64_t v2 = 2;
    if (v3 != 2) {
      *(unsigned char *)(v2 + 16) = 1;
    }
  }
  return this;
}

uint64_t BlueFin::GlEngineImplStd::Dispose(BlueFin::GlEngineImplStd *this, void (*a2)(void *))
{
  *((unsigned char *)this + 33) = 1;
  uint64_t result = BlueFin::GlPeTimerMgr::StopAllRequests((uint64_t)this + 600);
  if (*((unsigned char *)this + 32))
  {
    uint64_t v4 = *((void *)this + 3);
    GlCustomLog(12, "GL_REQ StopAllRequests\n");
    BlueFin::GlReqSm::StopAllRequests((BlueFin::GlReqSm *)(v4 + 126144), 0);
    uint64_t result = (uint64_t)BlueFin::GlEngineImplStd::DisposeComponents(this, (const char *)1, v5, v6);
  }
  else if (*((void *)this + 546))
  {
    uint64_t v7 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v7[273] = (*(uint64_t (**)(void))(**(void **)v7 + 48))();
    uint64_t result = BlueFin::GlComStressTestMgr::StopRequest((void *)this + 87, *((void *)this + 546));
  }
  if (*((unsigned char *)this + 560))
  {
    unsigned int v8 = (uint64_t (*)(void, void))*((void *)this + 43);
    if (v8)
    {
      uint64_t result = v8(*((void *)this + 34), 0);
      *((unsigned char *)this + 560) = 0;
    }
  }
  BlueFin::GlEngineDebug::m_pInstance = 0;
  return result;
}

void *BlueFin::GlEngineImplStd::DisposeComponents(void *this, const char *a2, uint64_t a3, const char *a4)
{
  int v4 = (int)a2;
  uint64_t v5 = this;
  uint64_t v26 = *MEMORY[0x263EF8340];
  memset(v25, 0, sizeof(v25));
  uint64_t v6 = this[3];
  if (!v6)
  {
    int v8 = 0;
    int v10 = 0;
    uint64_t v9 = 2;
    goto LABEL_32;
  }
  uint64_t v7 = this[1];
  if (!v7)
  {
    uint64_t v23 = "m_ptGlSettingsImpl != nullptr";
    DeviceFaultNotify("glengine_std.cpp", 672, "DisposeComponents", (char)"m_ptGlSettingsImpl != nullptr");
    int v24 = 672;
    goto LABEL_58;
  }
  if (!this[2])
  {
    uint64_t v23 = "m_ptGlEventPump != nullptr";
    DeviceFaultNotify("glengine_std.cpp", 673, "DisposeComponents", (char)"m_ptGlEventPump != nullptr");
    int v24 = 673;
    goto LABEL_58;
  }
  if (!BlueFin::GlUtils::m_pInstance)
  {
    uint64_t v23 = "GlUtils::m_pInstance != nullptr";
    DeviceFaultNotify("glengine_std.cpp", 674, "DisposeComponents", (char)"GlUtils::m_pInstance != nullptr");
    int v24 = 674;
LABEL_58:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", v24, v23);
  }
  int v8 = *(unsigned char *)(v7 + 25964) != 0;
  switch(*(_DWORD *)(v6 + 8))
  {
    case 0:
      uint64_t v9 = 0;
      int v10 = 0;
      goto LABEL_25;
    case 1:
      double v11 = (unsigned char *)(v6 + 406725);
      uint64_t v12 = *(unsigned int *)(v7 + 88);
      if (v12 <= 0x28) {
        uint64_t v13 = BlueFin::ulRfType2AsicNumber[v12];
      }
      else {
        uint64_t v13 = 0;
      }
      if (*v11)
      {
        int v14 = "normal operation";
      }
      else if (v11[1])
      {
        int v14 = "initialization";
      }
      else
      {
        int v14 = "HAL init";
      }
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v25, (char *)0x1FF, "Abnormal GlEngine stop. ASIC (%u) communication failure during stage \"%s\"", a4, v13, v14);
      GlCustomLog(10, "%s\n", (const char *)v25);
      GlCustomLog(11, "Please verify configuration settings for your hardware.\n");
      GlCustomLog(11, "This could indicate a problem in the HAL transport layer.\n");
      goto LABEL_24;
    case 2:
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v25, (char *)0x1FF, "Abnormal GlEngine stop. Initial time estimate was bad", a4);
      GlCustomLog(10, "%s\n", (const char *)v25);
      int v10 = 0;
      uint64_t v9 = 3;
      goto LABEL_25;
    case 3:
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v25, (char *)0x1FF, "Abnormal GlEngine stop. User abort", a4);
      GlCustomLog(10, "%s!\n", (const char *)v25);
      int v10 = 0;
      uint64_t v9 = 4;
      goto LABEL_25;
    case 4:
      int v10 = 0;
      uint64_t v9 = 5;
      goto LABEL_25;
    case 5:
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v25, (char *)0x1FF, "Abnormal GlEngine stop. ASIC mismatch hence communication has broken down!  Expected %d", a4, *(unsigned int *)(v7 + 88));
      GlCustomLog(10, "%s\n", (const char *)v25);
      GlCustomLog(11, "Please verify configuration settings for your hardware.\n");
LABEL_24:
      int v10 = 0;
      uint64_t v9 = 1;
      goto LABEL_25;
    case 6:
      GlCustomLog(10, "Abnormal GlEngine stop. ASIC Communication failure while waiting for standby ack\n");
      int v10 = 1;
      goto LABEL_16;
    default:
      int v10 = 0;
LABEL_16:
      uint64_t v9 = 2;
LABEL_25:
      BlueFin::GlPosEng::Dispose((BlueFin::GlPosEng *)v5[3], a2);
      int v15 = (void (*)(void))v5[10];
      if (v15)
      {
        v15(v5[3]);
        double v16 = (void (*)(void))v5[10];
        v5[3] = 0;
        if (v16) {
          v16(v5[2]);
        }
      }
      else
      {
        v5[3] = 0;
      }
      unsigned __int8 v5[2] = 0;
      this = BlueFin::GlPeObjFactory::Dispose((void (**)(void))v5 + 9);
      BlueFin::GlPeObjFactory::m_potGlPeObjFactory = 0;
      uint64_t v17 = BlueFin::GlUtils::m_pInstance;
      if (!BlueFin::GlUtils::m_pInstance) {
        goto LABEL_34;
      }
      this = *(void **)(BlueFin::GlUtils::m_pInstance + 8);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *, void))(*this + 256))(this, 0);
      }
      break;
  }
LABEL_32:
  uint64_t v17 = BlueFin::GlUtils::m_pInstance;
  if (BlueFin::GlUtils::m_pInstance)
  {
    *(_OWORD *)(BlueFin::GlUtils::m_pInstance + 1552) = 0u;
    *(_OWORD *)(v17 + 1536) = 0u;
    *(_OWORD *)(v17 + 1520) = 0u;
    *(_OWORD *)(v17 + 1504) = 0u;
    *(_OWORD *)(v17 + 1488) = 0u;
    *(_OWORD *)(v17 + 1472) = 0u;
    *(_OWORD *)(v17 + 1456) = 0u;
    *(_OWORD *)(v17 + 1440) = 0u;
    *(_OWORD *)(v17 + 1424) = 0u;
    *(_OWORD *)(v17 + 1408) = 0u;
    *(_OWORD *)(v17 + 1392) = 0u;
    *(_OWORD *)(v17 + 1376) = 0u;
    *(_OWORD *)(v17 + 1360) = 0u;
    *(_OWORD *)(v17 + 1344) = 0u;
    *(_OWORD *)(v17 + 1328) = 0u;
    *(_OWORD *)(v17 + 1312) = 0u;
    *(_OWORD *)(v17 + 1296) = 0u;
    *(_OWORD *)(v17 + 1280) = 0u;
    *(_OWORD *)(v17 + 1264) = 0u;
    *(_OWORD *)(v17 + 1248) = 0u;
    int v18 = *(_DWORD *)(v17 + 1092);
    *(_DWORD *)(v17 + 1236) = v18;
    *(_DWORD *)(v17 + 1232) = v18 + 59950;
  }
LABEL_34:
  if (v4)
  {
    double v19 = v5 + 551;
    this = (void *)v5[1];
    if (this && *((unsigned char *)v5 + 4409))
    {
      uint64_t v20 = (uint64_t (*)(void))v5[10];
      if (v20)
      {
        this = (void *)v20();
        uint64_t v17 = BlueFin::GlUtils::m_pInstance;
      }
      v5[1] = 0;
      *((unsigned char *)v5 + 4409) = 0;
    }
    if (v17 && *v19)
    {
      this = (void *)BlueFin::GlPeObjFactory::DisposeGlUtils((uint64_t)(v5 + 9));
      *double v19 = 0;
    }
  }
  if (((*((unsigned char *)v5 + 560) != 0) & ~v8) != 0 || *((unsigned char *)v5 + 560) && (v10 & v8) != 0)
  {
    uint64_t v9 = v10 ? 0 : v9;
    double v21 = (uint64_t (*)(void, void))v5[43];
    if (v21)
    {
      this = (void *)v21(v5[34], 0);
      *((unsigned char *)v5 + 560) = 0;
    }
  }
  if (v4)
  {
    double v22 = (uint64_t (*)(void, uint64_t, _OWORD *))v5[36];
    if (v22) {
      this = (void *)v22(v5[34], v9, v25);
    }
  }
  *((unsigned char *)v5 + 32) = 0;
  return this;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnReady(uint64_t result, uint64_t a2)
{
  *(void *)(result + 328) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnResource(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 336) = a2;
  *(void *)(result + 344) = a3;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnAsicDacData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 312) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnDrControlMemDump(uint64_t result, uint64_t a2)
{
  *(void *)(result + 320) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnPrecTimerRq(uint64_t result, uint64_t a2)
{
  *(void *)(result + 352) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnTimerSet(uint64_t result, uint64_t a2)
{
  *(void *)(result + 360) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnBurstMode(uint64_t result, uint64_t a2)
{
  *(void *)(result + 368) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnFreqUpdate(uint64_t result, uint64_t a2)
{
  *(void *)(result + 384) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnAsstStatus(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnResponse(uint64_t result, uint64_t a2)
{
  *(void *)(result + 424) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnPPSPlatformTime(uint64_t result, uint64_t a2)
{
  *(void *)(result + 504) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnGeofenceStatus(uint64_t result, uint64_t a2)
{
  *(void *)(result + 520) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnLHPatchNeeded(uint64_t result, uint64_t a2)
{
  *(void *)(result + 528) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnLHPatchLoadComplete(uint64_t result, uint64_t a2)
{
  *(void *)(result + 536) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnReportMIAdjustmentReqStatus(uint64_t result, uint64_t a2)
{
  *(void *)(result + 552) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnOscReadyForStorage(uint64_t result, uint64_t a2)
{
  *(void *)(result + 568) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnRtiFileTimestampReport(uint64_t result, uint64_t a2)
{
  *(void *)(result + 472) = a2;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnPwrData(uint64_t result, uint64_t a2)
{
  *(void *)(result + 480) = a2;
  return result;
}

#error "263AF6A28: call analysis failed (funcsize=101)"

uint64_t BlueFin::GlEngineImplStd::PauseRequest(uint64_t a1, uint64_t a2)
{
  if (!a2 || *(_DWORD *)(a2 + 16) != 12) {
    return 0;
  }
  uint64_t result = 1;
  *(unsigned char *)(a2 + 136) = 1;
  return result;
}

uint64_t BlueFin::GlEngineImplStd::ResumeRequest(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2 || *(_DWORD *)(a2 + 16) != 12) {
    return 0;
  }
  *(unsigned char *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 116) = a3;
  return 1;
}

BOOL BlueFin::GlEngineImplStd::UpdateBreadcrumbOption(uint64_t a1, uint64_t a2)
{
  return a2 && *(_DWORD *)(a2 + 16) == 13 && *(void *)(a1 + 24) != 0;
}

BOOL BlueFin::GlEngineImplStd::UpdateBreadcrumbMaxLocsToStore(uint64_t a1, uint64_t a2)
{
  return a2 && *(_DWORD *)(a2 + 16) == 13 && *(void *)(a1 + 24) != 0;
}

BOOL BlueFin::GlEngineImplStd::UpdateBreadcrumbWakeupDistance(uint64_t a1, uint64_t a2)
{
  return a2 && *(_DWORD *)(a2 + 16) == 13 && *(void *)(a1 + 24) != 0;
}

unint64_t BlueFin::GlEngineImplStd::BypassLteFilter(unint64_t this, int a2)
{
  uint64_t v2 = *(void *)(this + 24);
  if (v2 && *(unsigned char *)(this + 32))
  {
    unsigned __int8 v3 = a2;
    uint64_t v4 = 70;
    if (a2) {
      uint64_t v4 = 84;
    }
    GlCustomLog(15, "GlPosEng::BypassLteFilter: %c\n", v4);
    return BlueFin::GlReqSm::BypassLteFilter((BlueFin::GlReqSm *)(v2 + 126144), v3);
  }
  return this;
}

uint64_t BlueFin::GlEngineImplStd::SetLteFilter(uint64_t a1, int a2, unsigned int a3)
{
  if (a3) {
    int v3 = 0;
  }
  else {
    int v3 = a2;
  }
  if (a3 < 3 == v3) {
    return 1;
  }
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  if (v5)
  {
    if ((v5[22] - 39) > 1) {
      return 2;
    }
    (*(void (**)(_DWORD *))(*(void *)v5 + 376))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      GlCustomLog(15, "GlPosEng::UpdateLteFilter: \n");
      BlueFin::GlReqSm::UpdateLteFilter((BlueFin::GlReqSm *)(v6 + 126144));
    }
  }
  return 0;
}

uint64_t BlueFin::GlEngineImplStd::ToggleNotchFilterConfiguration(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 24);
  if (v3)
  {
    if (*(unsigned char *)(result + 32)) {
      return BlueFin::GlReqSm::ToggleNotchFilterConfig(v3 + 126144, a2, a3);
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    return result;
  }
  return BlueFin::GlPeTimerMgr::UpdateExpirationTime(result + 600, 100000000, 0);
}

uint64_t BlueFin::GlEngineImplStd::SetBlankingConfigOnTheFly(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    if (*(unsigned char *)(result + 32)) {
      return BlueFin::GlReqSm::SetBlankingConfigOnTheFly(v2 + 126144, a2);
    }
  }
  else if (*(unsigned char *)(result + 32))
  {
    return result;
  }
  return BlueFin::GlPeTimerMgr::UpdateExpirationTime(result + 600, 100000000, 0);
}

uint64_t BlueFin::GlEngineImplStd::FlushBreadcrumbs(BlueFin::GlEngineImplStd *this)
{
  if (!*((unsigned char *)this + 32)) {
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)this + 600, 100000000, 0);
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 384))();
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::ModifyBreadcrumbSelfWakeupTime(uint64_t this)
{
  if (!*(unsigned char *)(this + 32)) {
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime(this + 600, 100000000, 0);
  }
  return this;
}

uint64_t BlueFin::GlEngineImplStd::GetBatchedLocation(BlueFin::GlEngineImplStd *this)
{
  if (!*((unsigned char *)this + 32)) {
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)this + 600, 100000000, 0);
  }
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetRfLoss_dB_Ap(BlueFin::GlEngineImplStd *this, float a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(float))(*(void *)result + 64))(a2);
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetRfLoss_dB_Ap_L5(BlueFin::GlEngineImplStd *this, float a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(float))(*(void *)result + 72))(a2);
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetRfLoss_dB_Cp(BlueFin::GlEngineImplStd *this, float a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(float))(*(void *)result + 80))(a2);
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::SetRfLoss_dB_Cp_L5(BlueFin::GlEngineImplStd *this, float a2)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(float))(*(void *)result + 88))(a2);
  }
  return result;
}

unint64_t BlueFin::GlEngineImplStd::SetL5HardwareDelayInMeters(BlueFin::GlPosEng **this, __n128 a2)
{
  if (*((unsigned char *)this + 32) && this[3]) {
    return BlueFin::GlPosEng::UpdateL5HardwareDelayInMeters(this[3], a2.n128_f32[0]);
  }
  unint64_t result = (unint64_t)this[1];
  if (result) {
    return (*(uint64_t (**)(__n128))(*(void *)result + 256))(a2);
  }
  return result;
}

unint64_t BlueFin::GlEngineImplStd::SetL5DeltaHardwareDelayInMeters(BlueFin::GlPosEng **this, __n128 a2)
{
  if (*((unsigned char *)this + 32) && this[3]) {
    return BlueFin::GlPosEng::UpdateL5DeltaHardwareDelayInMeters(this[3], a2.n128_f32[0]);
  }
  unint64_t result = (unint64_t)this[1];
  if (result) {
    return (*(uint64_t (**)(__n128))(*(void *)result + 264))(a2);
  }
  return result;
}

#error "263AF7088: call analysis failed (funcsize=75)"

uint64_t BlueFin::GlEngineImplStd::ComDacData(BlueFin::GlEngineImplStd *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    int v66 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v66[273] = (*(uint64_t (**)(void))(**(void **)v66 + 48))();
    uint64_t v74 = *(void *)(*((void *)this + 3) + 40);
    if (v74) {
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v74 + 192))(v74, a2, a3);
    }
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v67, v68, v69, v70, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    unint64_t v76 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v76, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::ChipData_GRABSNQ_612249(BlueFin::GlEngineImplStd *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned __int16 v63 = a3;
  if (*((unsigned char *)this + 32))
  {
    if (!a2)
    {
      DeviceFaultNotify("glengine_std.cpp", 1428, "ChipData_GRABSNQ_612249", (char)"pcData != nullptr");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", 1428, "pcData != nullptr");
    }
    uint64_t v66 = *((void *)this + 3);
    *(unsigned char *)(v66 + 179704) = 0;
    *(unsigned char *)(v66 + 406726) = 1;
    if (!*(unsigned char *)(*(void *)(v66 + 16) + 25964)) {
      BlueFin::GlReqSm::ReceiveChipData((BlueFin::GlReqSm *)(v66 + 126144), a2, a3);
    }
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else if (*((void *)this + 546))
  {
    uint64_t v68 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v68[273] = (*(uint64_t (**)(void))(**(void **)v68 + 48))();
    return BlueFin::GlComStressTestMgr::ChipData_GRABSNQ_612249((uint64_t)this + 696, (unsigned __int8 *)a2, v63);
  }
  else
  {
    uint64_t v69 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v69, 100000000, 0);
  }
}

#error "263AF7480: call analysis failed (funcsize=88)"

#error "263AF75C4: call analysis failed (funcsize=74)"

uint64_t BlueFin::GlEngineImplStd::RefFreqStatus(BlueFin::GlEngineImplStd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!a2)
  {
    DeviceFaultNotify("glengine_std.cpp", 1641, "RefFreqStatus", (char)"pFreqStat != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", 1641, "pFreqStat != nullptr");
  }
  if (*(_DWORD *)(a2 + 8) == 4) {
    BlueFin::GlEngineImplStd::LoadComponents(this, 0);
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v65 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v65[273] = (*(uint64_t (**)(void))(**(void **)v65 + 48))();
    GlCustomLog(14, "GlEngine::RefFreqStatus(%d, %d)[%d, 0x%x] %u\n", *(_DWORD *)a2, *(unsigned __int16 *)(a2 + 4), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16));
    BlueFin::GlPosEng::SetRefFreqStatus(*((void *)this + 3), a2);
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v66, v67, v68, v69, v70, v71, v72, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)this + 600, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::DisableBeidou(BlueFin::GlEngineImplStd *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v65 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v65[273] = (*(uint64_t (**)(void))(**(void **)v65 + 48))();
    uint64_t v66 = 70;
    if (a2) {
      uint64_t v66 = 84;
    }
    GlCustomLog(14, "GlEngine::DisableBeidou (%c)\n", v66);
    uint64_t v74 = *((void *)this + 3);
    *(unsigned char *)(v74 + 180184) = a2;
    *(unsigned char *)(*(void *)(v74 + 132464) + 56600) = a2;
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v67, v68, v69, v70, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    unint64_t v76 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v76, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::SetDutyCycleMinMaxBlockParams(BlueFin::GlEngineImplStd *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v67 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v67[273] = (*(uint64_t (**)(void))(**(void **)v67 + 48))();
    if (a2) {
      GlCustomLog(14, "GlEngine::SetDutyCycleMinMaxBlockParameters(Min %d,Max %d)\n");
    }
    else {
      GlCustomLog(14, "GlEngine::SetDutyCycleMinMaxBlockParameters to Asic Defaults\n");
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*((void *)this + 3) + 126456) + 144))(*(void *)(*((void *)this + 3) + 126456), a2, a3, a4);
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v70, v71, v72, v73, v74, v75, v76, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    uint64_t v68 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v68, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::SetMeasurementIntervalAdjustment(BlueFin::GlEngineImplStd *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v65 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v65[273] = (*(uint64_t (**)(void))(**(void **)v65 + 48))();
    GlCustomLog(14, "GlEngine::SetMeasurementIntervalAdjustment to ---\n");
    BlueFin::GlReqSm::SetMIAdjustmentFromApi(*((void *)this + 3) + 126144, a2);
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v66, v67, v68, v69, v70, v71, v72, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    uint64_t v74 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v74, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::SetUserSpecifiedDwellPeriodMs(BlueFin::GlEngineImplStd *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v66 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v66[273] = (*(uint64_t (**)(void))(**(void **)v66 + 48))();
    BlueFin::GlReqSm::SetDwellPeriodMs((BlueFin::GlReqSm *)(*((void *)this + 3) + 126144), a2, a3);
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v67, v68, v69, v70, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    uint64_t v75 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v75, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::DisarmWaitForUserTimer(BlueFin::GlEngineImplStd *this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v65 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v65[273] = (*(uint64_t (**)(void))(**(void **)v65 + 48))();
    *(unsigned char *)(*((void *)this + 3) + 157940) = a2;
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v66, v67, v68, v69, v70, v71, v72, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    uint64_t v74 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v74, 100000000, 0);
  }
}

uint64_t BlueFin::GlEngineImplStd::SetUserSpecifiedMeasurementIntervalSec(BlueFin::GlEngineImplStd *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v66 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    v66[273] = (*(uint64_t (**)(void))(**(void **)v66 + 48))();
    BlueFin::GlReqSm::SetMeasurementIntervalSec((BlueFin::GlReqSm *)(*((void *)this + 3) + 126144), a2, a3);
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, v67, v68, v69, v70, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    uint64_t v75 = (char *)this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)v75, 100000000, 0);
  }
}

#error "263AF7F10: call analysis failed (funcsize=123)"

#error "263AF804C: call analysis failed (funcsize=74)"

#error "263AF8194: call analysis failed (funcsize=75)"

#error "263AF82DC: call analysis failed (funcsize=75)"

#error "263AF8424: call analysis failed (funcsize=75)"

#error "263AF8560: call analysis failed (funcsize=72)"

#error "263AF869C: call analysis failed (funcsize=72)"

#error "263AF87E0: call analysis failed (funcsize=74)"

#error "263AF8900: call analysis failed (funcsize=66)"

#error "263AF8A20: call analysis failed (funcsize=66)"

#error "263AF8B40: call analysis failed (funcsize=66)"

#error "263AF8C14: call analysis failed (funcsize=34)"

#error "263AF8C8C: call analysis failed (funcsize=30)"

#error "263AF8CEC: call analysis failed (funcsize=34)"

#error "263AF8D70: call analysis failed (funcsize=17)"

#error "263AF8E1C: call analysis failed (funcsize=44)"

#error "263AF8EA8: call analysis failed (funcsize=32)"

#error "263AF8F24: call analysis failed (funcsize=28)"

#error "263AF901C: call analysis failed (funcsize=72)"

#error "263AF9158: call analysis failed (funcsize=72)"

#error "263AF9290: call analysis failed (funcsize=71)"

#error "263AF9388: call analysis failed (funcsize=58)"

#error "263AF9518: call analysis failed (funcsize=90)"

BOOL BlueFin::GlEngineImplStd::SetFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  __dst[979] = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(v2 + 32)) {
    return 0;
  }
  uint64_t v4 = v3;
  if (!v3)
  {
    DeviceFaultNotify("glengine_std.cpp", 2480, "SetFixStatus", (char)"pFixStatus != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", 2480, "pFixStatus != nullptr");
  }
  uint64_t v5 = v2;
  uint64_t v6 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
  ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
  v6[273] = (*(uint64_t (**)(void))(**(void **)v6 + 48))();
  int v7 = *(_DWORD *)(*(void *)(v5 + 8) + 828);
  int v8 = " - ignored";
  if ((v7 & 0x1000) == 0) {
    int v8 = (const char *)&str_48_1;
  }
  GlCustomLog(15, "GlEngine::SetFixStatus%s\n", v8);
  if ((v7 & 0x1000) != 0)
  {
    BOOL fixed = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(v5 + 24);
    memcpy(__dst, v4, 0x1CF0uLL);
    memset(&__dst[926], 248, 24);
    memset(&__dst[929], 0, 400);
    BOOL fixed = BlueFin::GlReqSm::SetAsstFixStatus(v16 + 126144, (uint64_t)__dst, 1);
  }
  BlueFin::GlEngineImplStd::CommonAPIcode(v5, v9, v10, v11, v12, v13, v14, v15, v19, v20, (unsigned int *)__dst[0], (BlueFin::GlPePendingBag *)__dst[1], __dst[2], __dst[3], __dst[4], __dst[5], (void (**)(BlueFin::GlGpsTime *__hidden))__dst[6], __dst[7], *(long long *)&__dst[8],
    *(long long *)&__dst[10],
    *(long long *)&__dst[12],
    *(long long *)&__dst[14],
    *(long long *)&__dst[16],
    *(long long *)&__dst[18],
    *(long long *)&__dst[20],
    *(long long *)&__dst[22],
    __dst[24],
    __dst[25],
    (BlueFin::GlRequestImpl *)__dst[26],
    __dst[27],
    __dst[28],
    __dst[29],
    __dst[30],
    __dst[31],
    __dst[32],
    __dst[33],
    __dst[34],
    __dst[35],
    __dst[36],
    __dst[37],
    __dst[38],
    __dst[39],
    __dst[40],
    __dst[41],
    __dst[42],
    __dst[43],
    __dst[44],
    __dst[45],
    __dst[46],
    __dst[47],
    __dst[48],
    __dst[49],
    __dst[50],
    SBYTE4(__dst[50]),
    __dst[51],
    SBYTE4(__dst[51]),
    __dst[52],
    __dst[53],
    __dst[54],
    __dst[55],
    __dst[56],
    __dst[57],
    __dst[58]);
  return fixed;
}

#error "263AF97E4: call analysis failed (funcsize=47)"

#error "263AF9884: call analysis failed (funcsize=36)"

uint64_t BlueFin::GlEngineImplStd::SetPpsPlatformTime(uint64_t a1, unsigned __int16 *a2)
{
  if (a2) {
    BOOL v2 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (!v2)
  {
    GlCustomLog(15, "GlEngineImplStd::SetPpsPlatformTime: (%d-%d-%d %02d:%02d:%02d.%03d%03d)\n", *a2, a2[1], a2[2], a2[3], a2[4], a2[5], a2[6], a2[7]);
    uint64_t v6 = *(void *)(a1 + 24);
    BlueFin::GlPeHula::SetPpsPlatformTime(v6 + 394656, a2, v7, v8);
    long long v9 = *(_OWORD *)a2;
    *(_DWORD *)(v6 + 132528) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(v6 + 132512) = v9;
  }
  return v3;
}

#error "263AF99B4: call analysis failed (funcsize=40)"

size_t BlueFin::GlEngineImplStd::InitCpuLoad(BlueFin::GlEngineImplStd *this, uint64_t a2, uint64_t a3, char *__source, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *((void *)this + 64) = a2;
  if (*((unsigned char *)this + 32))
  {
    return BlueFin::GlEngineImplStd::CommonAPIcode((uint64_t)this, a2, a3, (uint64_t)__source, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44,
             a45,
             a46,
             a47,
             a48,
             a49,
             a50,
             a51,
             a52,
             a53,
             a54,
             a55,
             a56,
             a57,
             a58,
             a59,
             a60,
             a61,
             a62,
             a63);
  }
  else
  {
    uint64_t v65 = *((void *)this + 1);
    if (!v65
      || (*(_WORD *)(v65 + 25868) = a3, !__source)
      || (size_t result = strlcpy((char *)(v65 + 25870), __source, 0x50uLL), !*((unsigned char *)this + 32)))
    {
      return BlueFin::GlPeTimerMgr::UpdateExpirationTime((uint64_t)this + 600, 100000000, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlEngineImplStd::NotifyCurrentMachTimeSec(uint64_t this, int a2)
{
  if (!*(unsigned char *)(this + 32)) {
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime(this + 600, 100000000, 0);
  }
  *(_DWORD *)(*(void *)(this + 24) + 125892) = a2;
  return this;
}

BlueFin::GlFormat *BlueFin::GlEngineImplStd::ReportDump(BlueFin::GlEngineImplStd *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)__s = 0u;
  long long v37 = 0u;
  uint64_t v5 = *((void *)this + 3);
  if (!v5)
  {
    uint64_t v13 = 0;
    uint64_t v30 = 0;
    uint64_t v14 = (BlueFin::GlEngineImplStd *)((char *)this + 4411);
    *((unsigned char *)this + 4411) = 0;
    uint64_t v15 = &str_48_1;
    uint64_t v10 = __s;
    unsigned int v16 = -7200001;
    goto LABEL_27;
  }
  BlueFin::GlPeNmeaGen::FormatNmeaSIO((BlueFin::GlPeNmeaGen *)(v5 + 157952), (const BlueFin::GlPePlatfStat *)__s, (char *)0x100, a4);
  if (__s[0])
  {
    uint64_t v6 = 0;
    int v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 1;
    uint64_t v10 = __s;
    while (1)
    {
      int v11 = __s[v6];
      if (v11 == 42)
      {
        __s[v6] = 0;
      }
      else if (v11 == 44)
      {
        if (v8 == 2)
        {
          uint64_t v10 = &__s[v9];
        }
        else if (v8 >= 3)
        {
          if (v7 == 2)
          {
            __s[v6] = 46;
          }
          else
          {
            if (v7 == 1)
            {
              int v7 = 0;
              __s[v6] = 59;
              goto LABEL_18;
            }
            __s[v6] = 61;
            int v7 = 2;
            if (v8 == 15 || v8 == 18) {
              goto LABEL_18;
            }
          }
          int v7 = 1;
        }
LABEL_18:
        ++v8;
      }
      uint64_t v6 = v9;
      if (strlen(__s) <= v9++) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v10 = __s;
LABEL_23:
  uint64_t v17 = *((void *)this + 3);
  unsigned int v16 = *(_DWORD *)(v17 + 123784);
  uint64_t v30 = *(unsigned int *)(v17 + 276752);
  if (v16 == -7200001
    || (uint64_t v18 = *(void *)(v17 + 276832),
        unsigned __int8 v31 = *(unsigned char *)(v18 + 16),
        memcpy(v35, *(const void **)(v18 + 8), 4 * v31),
        __int16 v33 = 0,
        unsigned __int8 v32 = 0,
        int v34 = v35[0],
        BlueFin::GlSetIterator::operator++(&v31),
        v32 == v31))
  {
    uint64_t v13 = 0;
    uint64_t v14 = (BlueFin::GlEngineImplStd *)((char *)this + 4411);
    *((unsigned char *)this + 4411) = 0;
LABEL_26:
    uint64_t v15 = (void *)(*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(**(void **)(v17 + 40) + 680))(*(void *)(v17 + 40), &v31, 256);
    goto LABEL_27;
  }
  LODWORD(v13) = 0;
  do
  {
    uint64_t v13 = (v13 + 1);
    BlueFin::GlSetIterator::operator++(&v31);
  }
  while (v32 != v31);
  uint64_t v14 = (BlueFin::GlEngineImplStd *)((char *)this + 4411);
  *((unsigned char *)this + 4411) = 0;
  if (v17) {
    goto LABEL_26;
  }
  uint64_t v15 = &str_48_1;
LABEL_27:
  if (BlueFin::GlUtils::m_pInstance) {
    uint64_t v19 = (*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092)
  }
                       - *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1236));
  else {
    uint64_t v19 = 0xFFFFFFFFLL;
  }
  uint64_t v20 = v10;
  uint64_t v21 = *((void *)this + 3);
  if (v21)
  {
    double v22 = *(void **)(v21 + 126160);
    uint64_t v23 = *(void **)(v21 + 126168);
    uint64_t v24 = *(unsigned int *)(v21 + 126248);
    uint64_t v25 = (*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(v21 + 180984));
    uint64_t v26 = BlueFin::GlReqSm::ReportDump((BlueFin::GlReqSm *)(v21 + 126144));
  }
  else
  {
    double v22 = &str_48_1;
    uint64_t v25 = 0xFFFFFFFFLL;
    uint64_t v23 = &str_48_1;
    uint64_t v24 = 0xFFFFFFFFLL;
    uint64_t v26 = (BlueFin::GlFormat *)&str_48_1;
  }
  if (v16 == -7200001) {
    uint64_t v27 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v27 = v16;
  }
  uint64_t v28 = 89;
  if (!v30) {
    uint64_t v28 = 78;
  }
  BlueFin::GlFormat::glsnprintf(v14, (char *)0x1FF, "FIX=%c;FNUM=%d;SAT=%d;%s;LMS=%d;NOW=%d;%s;PE_PREVSTATE=%s;PE_STATE=%s;PE_MAX_DELAY=%d;LASTDATAMS=%d;REQSM=%s",
    a4,
    v28,
    v30,
    v13,
    v15,
    v27,
    v19,
    v20,
    v23,
    v22,
    v24,
    v25,
    v26);
  return v14;
}

uint64_t BlueFin::GlEngineImplStd::SetEngineType(uint64_t a1, int a2, uint64_t a3, const char *a4)
{
  if (*(_DWORD *)(a1 + 4928))
  {
    DeviceFaultNotify("glengine_std.cpp", 2842, "SetEngineType", (char)"m_eEngineType == GL_ENGINE_TYPE_UNSET");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glengine_std.cpp", 2842, "m_eEngineType == GL_ENGINE_TYPE_UNSET");
  }
  *(_DWORD *)(a1 + 4928) = a2;
  uint64_t v4 = "unset";
  if (a2 == 2) {
    uint64_t v4 = "hairtail";
  }
  if (a2 == 1) {
    uint64_t v4 = "sardine";
  }
  return BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&BlueFin::GlVersion::m_acVersionString, (char *)0x100, "@(#)Broadcom GLL ver. 161.20.24 612249, 2024/Oct/03, 14:15:43, build_job_id:1775, %s://depot/client/core/rel/Olympic/OSX_20.24.559185.v8.0/...\n", a4, v4);
}

#error "263AF9FA0: call analysis failed (funcsize=53)"

#error "263AFA088: call analysis failed (funcsize=48)"

uint64_t BlueFin::GlEngineImplStd::GetRadioRegisters(uint64_t this, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int *a11, BlueFin::GlPePendingBag *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (**a17)(BlueFin::GlGpsTime *__hidden this), unint64_t a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,uint64_t a27,uint64_t a28,BlueFin::GlRequestImpl *a29,int a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,char a54,int a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63 = this;
  if (*(unsigned char *)(this + 32))
  {
    if (*(void *)(this + 24))
    {
      uint64_t v65 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
      ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
      v65[273] = (*(uint64_t (**)(void))(**(void **)v65 + 48))();
      GlCustomLog(15, "GlEngineImplStd::GetRadioRegisters\n");
      BlueFin::GlPosEng::GetRadioRegisters(*(void *)(v63 + 24), a2);
      return BlueFin::GlEngineImplStd::CommonAPIcode(v63, v66, v67, v68, v69, v70, v71, v72, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27,
               a28,
               a29,
               a30,
               a31,
               a32,
               a33,
               a34,
               a35,
               a36,
               a37,
               a38,
               a39,
               a40,
               a41,
               a42,
               a43,
               a44,
               a45,
               a46,
               a47,
               a48,
               a49,
               a50,
               a51,
               a52,
               a53,
               a54,
               a55,
               a56,
               a57,
               a58,
               a59,
               a60,
               a61,
               a62,
               a63);
    }
  }
  else
  {
    uint64_t v73 = this + 600;
    return BlueFin::GlPeTimerMgr::UpdateExpirationTime(v73, 100000000, 0);
  }
  return this;
}

uint64_t BlueFin::GlEngineImplStd::SetCbOnSerialNumber(uint64_t result, uint64_t a2)
{
  *(void *)(result + 544) = a2;
  return result;
}

void BlueFin::GlEngineImplStd::~GlEngineImplStd(BlueFin::GlEngineImplStd *this)
{
  *(void *)this = &unk_270EC2418;
  *((void *)this + 87) = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlEngineImplStd *)((char *)this + 720));
}

{
  uint64_t vars8;

  *(void *)this = &unk_270EC2418;
  *((void *)this + 87) = &unk_270EBD2A8;
  BlueFin::GlComStressImpl::~GlComStressImpl((BlueFin::GlEngineImplStd *)((char *)this + 720));

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlEngineImplStd::SetUserData(uint64_t this, void *a2)
{
  *(void *)(this + 584) = a2;
  return this;
}

uint64_t BlueFin::GlPeEngineCallBacks::OnStop(uint64_t result)
{
  double v1 = *(uint64_t (**)(void))(result + 24);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t BlueFin::GlPeEngineCallBacks::OnPrecTimerRq(BlueFin::GlPeEngineCallBacks *this)
{
  double v1 = (uint64_t (*)(void))*((void *)this + 11);
  if (v1) {
    return v1(*((void *)this + 1));
  }
  else {
    return 0;
  }
}

uint64_t BlueFin::GlPeEngineCallBacks::OnDrControlMemDump(uint64_t this, unsigned int *a2)
{
  BOOL v2 = *(uint64_t (**)(void, unsigned int *))(this + 56);
  if (v2) {
    return v2(*(void *)(this + 8), a2);
  }
  return this;
}

uint64_t BlueFin::GlPeEngineCallBacks::OnSysLogLine(uint64_t this, const char *a2)
{
  BOOL v2 = *(uint64_t (**)(void, const char *))(this + 112);
  if (v2) {
    return v2(*(void *)(this + 8), a2);
  }
  return this;
}

uint64_t BlueFin::GlPeEngineCallBacks::OnBurstMode(uint64_t this, int a2)
{
  BOOL v2 = *(uint64_t (**)(void))(this + 104);
  if (v2) {
    BOOL v3 = BlueFin::GlPeEngineCallBacks::OnBurstMode(BOOL)::bBurstModePrevious == a2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    BlueFin::GlPeEngineCallBacks::OnBurstMode(BOOL)::bBurstModePrevious = a2;
    return v2(*(void *)(this + 8));
  }
  return this;
}

double BlueFin::GlPeEngineCallBacks::StoreMd5Record(BlueFin::GlPeEngineCallBacks *this, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = BlueFin::GlUtils::m_pInstance;
  uint64_t v4 = BlueFin::GlUtils::m_pInstance + 1124;
  BlueFin::GlCryptoMd5::final(BlueFin::GlUtils::m_pInstance + 1124, 0, 0);
  uint64_t v5 = 0;
  int v8 = 51;
  char v9 = 1;
  uint64_t v10 = 0x1000000000000;
  int v7 = &unk_270EBA2F0;
  char v11 = 1;
  do
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v7, *(unsigned char *)(v4 + v5++));
  while (v5 != 16);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v7, v2, 4);
  double result = -3.59869635e230;
  *(_OWORD *)(v3 + 1140) = xmmword_263BAAD70;
  *(void *)(v3 + 1156) = 0;
  *(unsigned char *)(v3 + 1228) = 0;
  return result;
}

void BlueFin::GlPeEngineCallBacks::OnNvStgWrite(BlueFin::GlPeEngineCallBacks *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = BlueFin::GlUtils::m_pInstance;
  switch((int)a2)
  {
    case 0:
      uint64_t v8 = 0;
      *(_OWORD *)(BlueFin::GlUtils::m_pInstance + 1140) = xmmword_263BAAD70;
      *(void *)(v7 + 1156) = 0;
      *(unsigned char *)(v7 + 1228) = 0;
      *((_DWORD *)this + 78) = 1;
      break;
    case 2:
      BlueFin::GlPeEngineCallBacks::StoreMd5Record(this, a2);
      uint64_t v8 = 2;
      break;
    case 3:
      *(_OWORD *)(BlueFin::GlUtils::m_pInstance + 1140) = xmmword_263BAAD70;
      *(void *)(v7 + 1156) = 0;
      *(unsigned char *)(v7 + 1228) = 0;
      *((_DWORD *)this + 78) = 4;
      uint64_t v8 = 3;
      break;
    case 5:
      BlueFin::GlPeEngineCallBacks::StoreMd5Record(this, a2);
      uint64_t v8 = 5;
      break;
    default:
      uint64_t v8 = *((unsigned int *)this + 78);
      if ((int)a4 <= 1) {
        int v9 = 1;
      }
      else {
        int v9 = a4;
      }
      BlueFin::GlCryptoMd5::update((_DWORD *)(BlueFin::GlUtils::m_pInstance + 1124), a3, v9 - 1);
      break;
  }
  uint64_t v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)this + 18);
  if (v10)
  {
    uint64_t v11 = *((void *)this + 1);
    v10(v11, v8, a3, a4);
  }
}

uint64_t BlueFin::GlPeEngineCallBacks::OnOscReadyForStorage(uint64_t result)
{
  double v1 = *(uint64_t (**)(void))(result + 304);
  if (v1) {
    return v1(*(void *)(result + 8));
  }
  return result;
}

uint64_t BlueFin::GlPeUtilsCallbacks::OnSysLogLine(BlueFin::GlPeUtilsCallbacks *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(**((void **)this + 1) + 32))(*((void *)this + 1), a2);
}

uint64_t BlueFin::GlPeUtilsCallbacks::OnSysLog(BlueFin::GlPeUtilsCallbacks *this, unsigned int a2, const char *a3, char *a4)
{
  return (*(uint64_t (**)(void, uint64_t, const char *))(**((void **)this + 1) + 80))(*((void *)this + 1), 2, "OnSysLog() not implemented\n");
}

uint64_t BlueFin::GlPeUtilsCallbacks::OnPrecTimerRq(BlueFin::GlPeUtilsCallbacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 64))();
}

uint64_t BlueFin::GlPeUtilsCallbacks::OnAssert(BlueFin::GlPeUtilsCallbacks *this, const char *a2)
{
  return (*(uint64_t (**)(void, uint64_t, const char *))(**((void **)this + 1) + 80))(*((void *)this + 1), 2, a2);
}

uint64_t BlueFin::GlPeUtilsCallbacks::OnSoftAssert(BlueFin::GlPeUtilsCallbacks *this, const char *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 24))(*((void *)this + 1));
  if (result) {
    uint64_t result = (*(uint64_t (**)(void, const char *))(**((void **)this + 1) + 32))(*((void *)this + 1), a2);
  }
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 224);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    return v6(v7);
  }
  return result;
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnAsicData(uint64_t this, unsigned __int8 *a2)
{
  if (!*(unsigned char *)(*(void *)(this + 24) + 25964)) {
    return (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(this + 8) + 16))(*(void *)(this + 8), a2);
  }
  return this;
}

void BlueFin::GlPeUtilsCallbacks::~GlPeUtilsCallbacks(BlueFin::GlPeUtilsCallbacks *this)
{
}

uint64_t BlueFin::GlPeUtilsCallbacks::FormatLogEnabled(BlueFin::GlPeUtilsCallbacks *this)
{
  return 1;
}

void BlueFin::GlPeEngineCallBacks::~GlPeEngineCallBacks(BlueFin::GlPeEngineCallBacks *this)
{
}

void BlueFin::GlPeEngineCallBacks::OnSysLog(BlueFin::GlPeEngineCallBacks *this, unsigned int a2, const char *a3, char *a4)
{
}

void BlueFin::GlPeLhEngineCallBacks::~GlPeLhEngineCallBacks(BlueFin::GlPeLhEngineCallBacks *this)
{
}

uint64_t BlueFin::GlPeLhEngineCallBacks::IsSysLogLineSet(BlueFin::GlPeLhEngineCallBacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnSysLogLine(BlueFin::GlPeLhEngineCallBacks *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(**((void **)this + 1) + 32))(*((void *)this + 1), a2);
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnSysLog(BlueFin::GlPeLhEngineCallBacks *this, uint64_t a2, const char *a3, char *a4)
{
  return (*(uint64_t (**)(void, uint64_t, const char *, char *))(**((void **)this + 1) + 40))(*((void *)this + 1), a2, a3, a4);
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnTimerSet(BlueFin::GlPeLhEngineCallBacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnTimerRq(BlueFin::GlPeLhEngineCallBacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 56))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnPrecTimerRq(BlueFin::GlPeLhEngineCallBacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 64))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnNvStgWrite(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::OnStop(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::GetCbOnMemAlloc(BlueFin::GlPeLhEngineCallBacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 88))();
}

uint64_t BlueFin::GlPeLhEngineCallBacks::GetCbOnMemFree(BlueFin::GlPeLhEngineCallBacks *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 96))();
}

uint64_t BlueFin::stPeStoredDoppler::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v7 >= 3)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 276, "SerializeImpl", (char)"ucVersion == 1 || ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 276, "ucVersion == 1 || ucVersion == 2");
  }
  int v20 = 54;
  char v21 = v7;
  uint64_t v22 = 0x1000000000000;
  uint64_t v19 = &unk_270EBA2F0;
  char v23 = v7;
  __int16 v8 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v2 + 18440));
  if (v7 == 1) {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, v8);
  }
  else {
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v19, v8);
  }
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v6 + 18440)))
  {
    unsigned __int8 v14 = *(unsigned char *)(v6 + 18448);
    memcpy(v18, *(const void **)(v6 + 18440), 4 * v14);
    unsigned __int16 v16 = 0;
    unsigned __int8 v15 = 0;
    int v17 = v18[0];
    BlueFin::GlSetIterator::operator++(&v14);
    while (v15 != v14)
    {
      uint64_t v9 = v16;
      if (v16 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v10 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v16;
      uint64_t v11 = *v10;
      if (v7 == 1)
      {
        char v12 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
              + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
              + v11);
      }
      else
      {
        char v12 = v10[1];
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ v11));
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, v12);
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(*(void *)(v6 + 18432) + 32 * v9 + 16) + *(double *)(v6 + 18528));
      BlueFin::GlSetIterator::operator++(&v14);
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v19, v5, 4);
  return 1;
}

uint64_t BlueFin::stPeSigEnv::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v7 >= 3)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 381, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 381, "ucVersion >= 1 && ucVersion <= 2");
  }
  int v11 = 58;
  char v12 = v7;
  uint64_t v13 = 0x1000000000000;
  uint64_t v10 = &unk_270EBA2F0;
  char v14 = v7;
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v2 + 8));
  float v8 = *(float *)(v6 + 12);
  if (v7 == 1) {
    float v8 = v8 + -174.0;
  }
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, v8);
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeMsmtMgr::AccessPropagatedMeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2)
{
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 181) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1) == 0)
  {
    unsigned int v3 = "m_PropMeas.otPropSignalIds.Has(rotSignalId)";
    DeviceFaultNotify("glpe_msmtmgr.cpp", 967, "AccessPropagatedMeMeas", (char)"m_PropMeas.otPropSignalIds.Has(rotSignalId)");
    int v4 = 967;
    goto LABEL_6;
  }
  uint64_t result = BlueFin::GlSignalIdArray::Get(*((void *)this + 36), (uint64_t)a2);
  if (!result)
  {
    unsigned int v3 = "pPropSigMeas != nullptr";
    DeviceFaultNotify("glpe_msmtmgr.cpp", 971, "AccessPropagatedMeMeas", (char)"pPropSigMeas != nullptr");
    int v4 = 971;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", v4, v3);
  }
  return result;
}

uint64_t BlueFin::GlPeMsmtMgr::GetPropagatedMeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2)
{
  if ((((unint64_t)*(unsigned int *)(*((void *)this + 181) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) & 1) == 0)
  {
    unsigned int v3 = "m_PropMeas.otPropSignalIds.Has(rotSignalId)";
    DeviceFaultNotify("glpe_msmtmgr.cpp", 956, "GetPropagatedMeMeas", (char)"m_PropMeas.otPropSignalIds.Has(rotSignalId)");
    int v4 = 956;
    goto LABEL_6;
  }
  uint64_t result = BlueFin::GlSignalIdArray::Get(*((void *)this + 36), (uint64_t)a2);
  if (!result)
  {
    unsigned int v3 = "pPropSigMeas != nullptr";
    DeviceFaultNotify("glpe_msmtmgr.cpp", 960, "GetPropagatedMeMeas", (char)"pPropSigMeas != nullptr");
    int v4 = 960;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", v4, v3);
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeMsmtMgr::AccessMeMeas(BlueFin::GlPeMsmtMgr *this, const BlueFin::GlSignalId *a2, int a3, unsigned int a4)
{
  uint64_t result = (unsigned __int8 *)BlueFin::GlSignalIdArray::Get(*((void *)this + 2397), (uint64_t)a2);
  if (result
    && ((((unint64_t)*(unsigned int *)(*((void *)this + 1) + 4 * (*((__int16 *)a2 + 4) >> 5)) >> (*((_WORD *)a2 + 4) & 0x1F)) | a4) & 1) == 0)
  {
    uint64_t result = 0;
  }
  if (!result && a3) {
    uint64_t result = (unsigned __int8 *)BlueFin::GlPeMsmtMgr::AccessPropagatedMeMeas(this, a2);
  }
  if (result && (*result != *(unsigned __int8 *)a2 || *((_DWORD *)result + 1) != *((_DWORD *)a2 + 1)))
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 884, "AccessMeMeas", (char)"(potMeMeas->m_otSignalId == rotSignalId)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 884, "(potMeMeas->m_otSignalId == rotSignalId)");
  }
  return result;
}

__n128 BlueFin::GlPeMsmtMgr::SetPeGridMeas(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = BlueFin::GlSignalIdArray::Get(*(void *)(a1 + 56712), a2);
  if (!v3)
  {
    DeviceFaultNotify("glpe_msmtmgr.cpp", 915, "SetPeGridMeas", (char)"potGridMeas != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_msmtmgr.cpp", 915, "potGridMeas != nullptr");
  }
  if (v3 != a2)
  {
    *(unsigned char *)uint64_t v3 = *(unsigned char *)a2;
    *(_DWORD *)(v3 + 4) = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v3 + 8) = *(_WORD *)(a2 + 8);
  }
  long long v4 = *(_OWORD *)(a2 + 12);
  long long v5 = *(_OWORD *)(a2 + 28);
  *(_OWORD *)(v3 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(v3 + 28) = v5;
  *(_OWORD *)(v3 + 12) = v4;
  long long v6 = *(_OWORD *)(a2 + 60);
  long long v7 = *(_OWORD *)(a2 + 76);
  long long v8 = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(v3 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(v3 + 92) = v8;
  *(_OWORD *)(v3 + 76) = v7;
  *(_OWORD *)(v3 + 60) = v6;
  long long v9 = *(_OWORD *)(a2 + 124);
  long long v10 = *(_OWORD *)(a2 + 140);
  long long v11 = *(_OWORD *)(a2 + 156);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v3 + 156) = v11;
  *(_OWORD *)(v3 + 140) = v10;
  *(_OWORD *)(v3 + 124) = v9;
  __n128 result = *(__n128 *)(a2 + 184);
  *(_DWORD *)(v3 + 200) = *(_DWORD *)(a2 + 200);
  *(__n128 *)(v3 + 184) = result;
  return result;
}

unsigned __int8 *BlueFin::GlPeMsmtMgr::SetPrCode(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 v12 = *(unsigned char *)(a2 + 8);
  memcpy(v16, *(const void **)a2, 4 * v12);
  unsigned __int16 v14 = 0;
  unsigned __int8 v13 = 0;
  int v15 = v16[0];
  for (__n128 result = BlueFin::GlSetIterator::operator++(&v12); v13 != v12; __n128 result = BlueFin::GlSetIterator::operator++(&v12))
  {
    if (v14 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    long long v6 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v14;
    char v7 = *v6;
    LODWORD(v6) = v6[1];
    v9[0] = v7;
    int v10 = (int)v6;
    unsigned __int16 v11 = v14;
    uint64_t v8 = BlueFin::GlSignalIdArray::Get(*(void *)(a1 + 19176), (uint64_t)v9);
    if (v8) {
      *(unsigned char *)(v8 + 448) = a3;
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeMsmtMgr::SetRrCode(uint64_t a1, uint64_t a2, char a3)
{
  unsigned __int8 v12 = *(unsigned char *)(a2 + 8);
  memcpy(v16, *(const void **)a2, 4 * v12);
  unsigned __int16 v14 = 0;
  unsigned __int8 v13 = 0;
  int v15 = v16[0];
  for (__n128 result = BlueFin::GlSetIterator::operator++(&v12); v13 != v12; __n128 result = BlueFin::GlSetIterator::operator++(&v12))
  {
    if (v14 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    long long v6 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v14;
    char v7 = *v6;
    LODWORD(v6) = v6[1];
    v9[0] = v7;
    int v10 = (int)v6;
    unsigned __int16 v11 = v14;
    uint64_t v8 = BlueFin::GlSignalIdArray::Get(*(void *)(a1 + 19176), (uint64_t)v9);
    if (v8) {
      *(unsigned char *)(v8 + 449) = a3;
    }
  }
  return result;
}

void BlueFin::stPeSigEnv::~stPeSigEnv(BlueFin::stPeSigEnv *this)
{
}

void BlueFin::stPeStoredDoppler::~stPeStoredDoppler(BlueFin::stPeStoredDoppler *this)
{
}

BOOL BlueFin::GlPeTimerMgr::StartRequest(int *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if (v2 == 7)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 184))(a2) & 0x80000000) != 0)
    {
      uint64_t v5 = 5;
    }
    else if (a1[4] <= 7)
    {
      long long v6 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
      if (BlueFin::GlUtils::m_pInstance
        && (++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088),
            v6[273] = (*(uint64_t (**)(void))(**(void **)v6 + 48))(),
            BlueFin::GlUtils::m_pInstance))
      {
        int v12 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
      }
      else
      {
        int v12 = (*(uint64_t (**)(void))(**(void **)a1 + 56))();
      }
      if (v12 == -1)
      {
        if (BlueFin::GlUtils::m_pInstance) {
          int v12 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
        }
        else {
          int v12 = -1;
        }
      }
      *(_DWORD *)(a2 + 28) = v12;
      uint64_t v13 = a1[4];
      a1[4] = v13 + 1;
      *(void *)&a1[2 * v13 + 6] = a2;
      BlueFin::GlPeTimerMgr::Sort((BlueFin::GlPeTimerMgr *)a1, v7, v8, v9, v10, v11);
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = 3;
    }
    unsigned __int16 v14 = *(void (**)(uint64_t, uint64_t))(a2 + 40);
    if (v14) {
      v14(a2, v5);
    }
  }
  return v2 == 7;
}

char *BlueFin::GlPeTimerMgr::Sort(BlueFin::GlPeTimerMgr *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  __n128 result = BlueFin::GlStdLib::QsortImpl((char *)this + 24, (void *)*((unsigned int *)this + 4), 8u, (uint64_t (*)(char *, char *))BlueFin::EarlierTimeout, (int (*)(const void *, const void *))v10, a6);
  uint64_t v8 = *((unsigned int *)this + 4);
  if ((int)v8 >= 1)
  {
    do
    {
      uint64_t v9 = v8 - 1;
      if (*((void *)this + (v8 - 1) + 3)) {
        break;
      }
      *((_DWORD *)this + 4) = --v8;
    }
    while ((unint64_t)(v9 + 1) > 1);
  }
  return result;
}

BOOL BlueFin::GlPeTimerMgr::StopRequest(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 16);
  if (v2 == 7)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 16);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 8 * v4;
      while (1)
      {
        uint64_t v7 = a1 + v5;
        if (*(void *)(a1 + v5 + 24) == a2) {
          break;
        }
        v5 += 8;
        if (v6 == v5) {
          return v2 == 7;
        }
      }
      uint64_t v8 = *(void (**)(uint64_t))(a2 + 56);
      if (v8)
      {
        v8(a2);
        a2 = *(void *)(v7 + 24);
      }
      BlueFin::GlRequestBase::Destroy(a2);
      *(void *)(v7 + 24) = 0;
      if (!v5) {
        *(unsigned char *)(a1 + 89) = 1;
      }
      BlueFin::GlPeTimerMgr::Sort((BlueFin::GlPeTimerMgr *)a1, v9, v10, v11, v12, v13);
    }
  }
  return v2 == 7;
}

uint64_t BlueFin::GlPeTimerMgr::StopAllRequests(uint64_t this)
{
  uint64_t v1 = this;
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = this + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      uint64_t v5 = *(void (**)(void))(v4 + 56);
      if (v5)
      {
        v5();
        uint64_t v4 = *(void *)(v3 + 8 * v2);
      }
      this = BlueFin::GlRequestBase::Destroy(v4);
      *(void *)(v3 + 8 * v2) = 0;
      if (!v2) {
        *(unsigned char *)(v1 + 89) = 1;
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  *(_DWORD *)(v1 + 16) = 0;
  return this;
}

uint64_t BlueFin::EarlierTimeout(BlueFin *this, _DWORD **a2, const void *a3)
{
  uint64_t v3 = *(_DWORD **)this;
  uint64_t v4 = *a2;
  if (*(void *)this)
  {
    int v5 = v3[7];
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    int v5 = 0;
    if (v4)
    {
LABEL_3:
      int v6 = v4[7];
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  int v6 = 0;
  if (v3)
  {
LABEL_4:
    int v7 = (*(uint64_t (**)(void))(*(void *)v3 + 184))(*(void *)this) + v5;
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
LABEL_8:
  int v7 = 0;
  if (!v4) {
    goto LABEL_11;
  }
LABEL_9:
  int v8 = (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 184))(v4);
  if (v3) {
    return (v7 - v6 - v8);
  }
LABEL_11:
  if (v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v4 != 0;
  }
}

double BlueFin::GlPeObjFactory::GlPeObjFactory(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  if (!*(void *)a1)
  {
    uint64_t v4 = "m_otConfig.cbOnMemAlloc != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 77, "GlPeObjFactory", (char)"m_otConfig.cbOnMemAlloc != nullptr");
    int v5 = 77;
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 8))
  {
    uint64_t v4 = "m_otConfig.cbOnMemFree != nullptr";
    DeviceFaultNotify("glpeobjfact.cpp", 78, "GlPeObjFactory", (char)"m_otConfig.cbOnMemFree != nullptr");
    int v5 = 78;
LABEL_6:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpeobjfact.cpp", v5, v4);
  }
  return result;
}

void (*BlueFin::GlPeObjFactory::Dispose(void (**this)(void)))(void)
{
  BlueFin::GlPeObjFactory::DisposeMePeSigMeas((BlueFin::GlPeObjFactory *)this);
  BlueFin::GlPeObjFactory::DisposePropSigMeas((BlueFin::GlPeObjFactory *)this);
  if (this[10])
  {
    long long v2 = this[1];
    if (v2)
    {
      v2();
      uint64_t v3 = this[1];
      if (v3) {
        ((void (*)(void (*)(void)))v3)(this[11]);
      }
    }
    this[10] = 0;
    this[11] = 0;
  }
  if (this[12])
  {
    uint64_t v4 = this[1];
    if (v4) {
      v4();
    }
    this[12] = 0;
  }
  if (this[13])
  {
    int v5 = this[1];
    if (v5) {
      v5();
    }
    this[13] = 0;
  }
  if (this[14])
  {
    int v6 = this[1];
    if (v6) {
      v6();
    }
    this[14] = 0;
  }
  if (this[15])
  {
    int v7 = this[1];
    if (v7) {
      v7();
    }
    this[15] = 0;
  }
  if (this[16])
  {
    int v8 = this[1];
    if (v8) {
      v8();
    }
    this[16] = 0;
  }
  if (this[18])
  {
    uint64_t v9 = this[1];
    if (v9) {
      v9();
    }
    this[18] = 0;
  }
  if (this[17])
  {
    uint64_t v10 = this[1];
    if (v10) {
      v10();
    }
    this[17] = 0;
  }
  if (this[19])
  {
    uint64_t v11 = this[1];
    if (v11) {
      v11();
    }
    this[19] = 0;
  }
  BlueFin::GlPeObjFactory::DisposeMeGridMeas((BlueFin::GlPeObjFactory *)this);
  double result = this[20];
  if (result)
  {
    uint64_t v13 = (uint64_t (*)(void))this[1];
    if (v13) {
      double result = (void (*)(void))v13();
    }
    this[20] = 0;
  }
  return result;
}

uint64_t BlueFin::GlPeObjFactory::DisposeMePeSigMeas(BlueFin::GlPeObjFactory *this)
{
  uint64_t v3 = (void *)((char *)this + 32);
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*((void *)this + 1);
    if (v4)
    {
      uint64_t result = v4();
      int v5 = (uint64_t (*)(void))*((void *)this + 1);
      if (v5)
      {
        uint64_t result = v5(*((void *)this + 5));
        int v6 = (uint64_t (*)(void))*((void *)this + 1);
        if (v6) {
          uint64_t result = v6(*((void *)this + 6));
        }
      }
    }
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  return result;
}

uint64_t BlueFin::GlPeObjFactory::DisposePropSigMeas(BlueFin::GlPeObjFactory *this)
{
  uint64_t v3 = (void *)((char *)this + 56);
  uint64_t result = *((void *)this + 7);
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*((void *)this + 1);
    if (v4)
    {
      uint64_t result = v4();
      int v5 = (uint64_t (*)(void))*((void *)this + 1);
      if (v5)
      {
        uint64_t result = v5(*((void *)this + 8));
        int v6 = (uint64_t (*)(void))*((void *)this + 1);
        if (v6) {
          uint64_t result = v6(*((void *)this + 9));
        }
      }
    }
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  return result;
}

uint64_t BlueFin::GlPeObjFactory::DisposeMeGridMeas(BlueFin::GlPeObjFactory *this)
{
  uint64_t v3 = (void *)((char *)this + 168);
  uint64_t result = *((void *)this + 21);
  if (result)
  {
    uint64_t v4 = (uint64_t (*)(void))*((void *)this + 1);
    if (v4)
    {
      uint64_t result = v4();
      int v5 = (uint64_t (*)(void))*((void *)this + 1);
      if (v5)
      {
        uint64_t result = v5(*((void *)this + 22));
        int v6 = (uint64_t (*)(void))*((void *)this + 1);
        if (v6) {
          uint64_t result = v6(*((void *)this + 23));
        }
      }
    }
    *uint64_t v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  return result;
}

uint64_t BlueFin::GlPeObjFactory::DisposeGlUtils(uint64_t this)
{
  if (BlueFin::GlUtils::m_pInstance)
  {
    uint64_t v1 = this;
    if (BlueFin::GlUtils::sm_pfOnSysLogStopped)
    {
      this = BlueFin::GlUtils::sm_pfOnSysLogStopped(BlueFin::GlUtils::sm_pvOnSysLogStoppedContext);
      BlueFin::GlUtils::sm_pfOnSysLogStopped = 0;
      BlueFin::GlUtils::sm_pvOnSysLogStoppedContext = 0;
    }
    BlueFin::GlUtils::m_ucEnabled = 2;
    long long v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
    if (v2) {
      this = v2(BlueFin::GlUtils::m_pInstance);
    }
    BlueFin::GlUtils::m_pInstance = 0;
  }
  return this;
}

uint64_t BlueFin::GlPosEng::Dispose(BlueFin::GlPosEng *this, const char *a2)
{
  BlueFin::GlUtils::Report((uint64_t)"dispose", a2);
  BlueFin::GlPeStartupMgr::Dispose((unint64_t)this + 56);
  BlueFin::GlReqSm::~GlReqSm((BlueFin::GlPosEng *)((char *)this + 126144));
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 4) + 96))(*((void *)this + 4));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4);
  *((void *)this + 5) = 0;
  return result;
}

uint64_t BlueFin::GlPosEng::SetDeathCause(uint64_t a1, int a2)
{
  uint64_t result = GlCustomLog(12, "SetDeathCause(%d)\n", a2);
  if (!*(_DWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 8) = a2;
    int v5 = *(_DWORD *)(a1 + 158168);
    if (a2) {
      int v6 = 2;
    }
    else {
      int v6 = 1;
    }
    *(_DWORD *)(a1 + 158168) = v6;
    if (v5 != v6) {
      *(unsigned char *)(a1 + 158184) = 1;
    }
    if (a2 == 1 && !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1121)) {
      *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1120) = 0;
    }
  }
  return result;
}

unint64_t BlueFin::GlPosEng::CommunicationBreakdown(BlueFin::GlPosEng *this)
{
  return BlueFin::GlMeSrdCtrlSm::BlankingConfigUpdated((BlueFin::GlPosEng *)((char *)this + 126144));
}

unint64_t BlueFin::GlPosEng::AsicMismatch(BlueFin::GlPosEng *this)
{
  BlueFin::GlPosEng::SetDeathCause((uint64_t)this, 5);

  return BlueFin::GlMeSrdCtrlSm::BlankingConfigUpdated((BlueFin::GlPosEng *)((char *)this + 126144));
}

uint64_t BlueFin::GlPosEng::SendDrControlMemDump(BlueFin::GlPosEng *this, unsigned int *a2)
{
  return (*(uint64_t (**)(void, unsigned int *))(**((void **)this + 4) + 112))(*((void *)this + 4), a2);
}

BOOL BlueFin::GlPosEng::ReqFreqUpdate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(void (**)(void))(v1 + 120);
  if (v2) {
    v2(*(void *)(v1 + 8));
  }
  return v2 != 0;
}

unint64_t BlueFin::GlPosEng::SetCntinMeas(uint64_t a1, int a2, double a3, double a4)
{
  return BlueFin::GlPeCntinMgr::SetCntinMeas(a1 + 394368, a2, a3, a4);
}

uint64_t BlueFin::GlPosEng::SetPpsOutMeas(uint64_t this, double a2)
{
  *(unsigned char *)(this + 379146) = 1;
  return this;
}

uint64_t BlueFin::GlPosEng::CWResults(BlueFin::GlPosEng *this, uint64_t a2, unsigned int a3, double a4, double a5, double a6, uint64_t a7)
{
  return BlueFin::GlReqSm::CWResults((BlueFin::GlPosEng *)((char *)this + 126144), a2, a3, a4, a5, a6, a7);
}

uint64_t BlueFin::GlPosEng::SpaResults(uint64_t a1, uint64_t a2)
{
  return BlueFin::GlPeReqBag::SpaResults(a1 + 137024, a2);
}

uint64_t BlueFin::GlPosEng::SetClockAnomalyFlag(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 16) + 26210) = a2;
  return this;
}

uint64_t BlueFin::GlPosEng::SetDataSubFrmMeas(uint64_t this, BlueFin::GlDataSubFrmMeas *a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glposeng.cpp", 885, "SetDataSubFrmMeas", (char)"potSubframe != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 885, "potSubframe != 0");
  }
  uint64_t v3 = this;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    this = (*(uint64_t (**)(BlueFin::GlDataSubFrmMeas *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
  }
  uint64_t v4 = (char *)a2 + 8;
  int v5 = BlueFin::GlSvId::s_aucSvId2gnss[*((unsigned __int8 *)a2 + 8)];
  if (v5 != 7)
  {
    if (v5 != 4 || *(_DWORD *)(v3 + 120236) == 1 || *(unsigned char *)(v3 + 120245)) {
      goto LABEL_23;
    }
    if (!*(unsigned char *)(v3 + 120244)) {
      goto LABEL_34;
    }
    int v12 = 7;
    unsigned __int8 v13 = 0;
    this = BlueFin::GlPeSvIdConverter::SvId2Gnss((BlueFin::GlPeGloFcnOsnMgr **)(v3 + 119968), (unsigned __int8 *)a2 + 8, (uint64_t)&v12);
    if (v12 > 6 || v13 - 1 > 0x3E) {
      goto LABEL_34;
    }
    if (*((unsigned char *)a2 + 9) == 1)
    {
      unsigned int v6 = *((_DWORD *)a2 + 6);
      if (!(v6 >> 30))
      {
        BOOL v7 = (v6 & 0x3E000) != 24576;
        BOOL v8 = (v6 & 0x20000) == 0;
        if ((*v4 + 122) >= 5u && (*v4 - 76) >= 5u) {
          int v10 = v8;
        }
        else {
          int v10 = v7;
        }
        BlueFin::GlPeSvHealthHelper::OnHealthStatusDecoded((unsigned char *)(v3 + 181344), v10, (uint64_t)&v12);
      }
    }
    this = BlueFin::GlPeSvHealthHelper::IsUsable(v3 + 181344, &v12);
    if (this)
    {
LABEL_34:
      if (*(unsigned char *)(v3 + 120243))
      {
LABEL_23:
        if ((*(unsigned char *)(v3 + 138337) & 1) == 0)
        {
          int v11 = *(_DWORD *)(v3 + 123792);
          BlueFin::GlPeTimeManager::SetDataSubFrmMeas((BlueFin::GlPeTimeManager *)(v3 + 121216), a2);
          if (*(unsigned char *)(v3 + 406722)) {
            BlueFin::GlPeAsstMgr::SetDataSubFrmMeas((BlueFin::GlPeIonoMgr **)(v3 + 224), a2);
          }
          *(unsigned char *)(v3 + 406722) = 1;
          if (!v11)
          {
            if (*(_DWORD *)(v3 + 123792)) {
              BlueFin::GlPosEng::OnInitialTime((BlueFin::GlPosEng *)v3);
            }
          }
        }
        BlueFin::GlPeReqBag::SetDataSubFrmMeas((BlueFin::GlPeReqBag *)(v3 + 137024), a2);
        return BlueFin::GlPePlatfStatMgr::SetDataSubFrmMeas(v3 + 157952, a2);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPosEng::SetWaasDataSubFrmMeas(uint64_t a1, char *a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glposeng.cpp", 982, "SetWaasDataSubFrmMeas", (char)"potSbasBlock != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 982, "potSbasBlock != 0");
  }
  BOOL v8 = &unk_270EBA3B8;
  *(void *)&unsigned __int8 v15[4] = 0;
  char v9 = *a2;
  if (a2[8]) {
    int v2 = *((_DWORD *)a2 + 3);
  }
  else {
    int v2 = -1;
  }
  long long v3 = *((_OWORD *)a2 + 2);
  long long v13 = *((_OWORD *)a2 + 1);
  int v4 = HIBYTE(*((_DWORD *)a2 + 4));
  BOOL v5 = v4 == 138;
  char v6 = 2 * (v4 == 198);
  if (v5) {
    char v6 = 1;
  }
  char v10 = v6;
  int v11 = *((_DWORD *)a2 + 1);
  int v12 = v2;
  long long v14 = v3;
  *(void *)int v15 = 0;
  return (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, &v8);
}

uint64_t BlueFin::GlPosEng::SetGlonassDataString(BlueFin::GlPosEng *this, BlueFin::GlGlonassDataString *a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glposeng.cpp", 1011, "SetGlonassDataString", (char)"potString != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 1011, "potString != 0");
  }
  int v4 = (int *)((char *)this + 123792);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(BlueFin::GlGlonassDataString *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
  }
  int v5 = *v4;
  int v6 = (*((_DWORD *)a2 + 5) >> 27) & 0xF;
  BOOL v7 = (BlueFin::GlPeGloEphMgr *)*((void *)this + 949);
  uint64_t result = BlueFin::GlPeGloEphMgr::ValidateStringOrder(v7, a2, v6);
  if (result)
  {
    char v9 = (char *)this + 406722;
    char v10 = (BlueFin::GlPeGloFcnOsnMgr *)*((void *)this + 34);
    if (v6 == 4) {
      BlueFin::GlPeGloFcnOsnMgr::SetGlonassDataString(*((BlueFin::GlPeGloFcnOsnMgr **)this + 34), a2, 4);
    }
    int v11 = *((char *)a2 + 9);
    unsigned __int8 v15 = 0;
    BlueFin::GlPeGloFcnOsnMgr::FCN2OSN(v10, v11, &v15);
    unsigned __int8 v12 = v15;
    if (v15)
    {
      int v13 = *((char *)a2 + 9);
      unsigned __int8 v16 = 0;
      BlueFin::GlPeGloFcnOsnMgr::FCN2OSN(v10, v13, &v16);
      unsigned __int8 v12 = v16 + 64;
    }
    BlueFin::GlPeReqBag::SetGlonassDataString((BlueFin::GlPosEng *)((char *)this + 137024), a2, v12);
    uint64_t result = BlueFin::GlPeTimeManager::SetGlonassDataString((uint64_t)this + 121216, a2);
    if (*v9)
    {
      if ((v6 - 1) <= 3) {
        BlueFin::GlPeGloEphMgr::SetGlonassDataString((uint64_t)v7, a2, v6, v14);
      }
      uint64_t result = (uint64_t)BlueFin::GlPeAlmMgr::SetGlonassDataString((BlueFin::GlPosEng *)((char *)this + 34336), a2, v6);
    }
    *char v9 = 1;
  }
  if (!v5 && *v4)
  {
    return BlueFin::GlPosEng::OnInitialTime(this);
  }
  return result;
}

void BlueFin::GlPosEng::SetGalileoDataPage(BlueFin::GlPosEng *this, BlueFin::GlGalileoINavPage *a2)
{
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*(void (**)(BlueFin::GlGalileoINavPage *, void, void))(*(void *)a2 + 24))(a2, 0, 0);
  }
  if (!*((unsigned char *)a2 + 9))
  {
    int v4 = *((_DWORD *)this + 30948);
    unsigned int v5 = *((unsigned __int8 *)a2 + 10);
    if (v5 < 0xB || v5 <= 0x3F && ((1 << v5) & 0x80000001001F0000) != 0)
    {
      BlueFin::GlPeTimeManager::SetGalileoDataPage((BlueFin::GlPosEng *)((char *)this + 121216), a2);
      BlueFin::GlPeReqBag::SetGalileoDataPage((BlueFin::GlPosEng *)((char *)this + 137024), a2);
      if (*((unsigned char *)this + 406722))
      {
        if (*((unsigned __int8 *)a2 + 10) - 1 <= 4) {
          BlueFin::GlPeGalEphMgr::SetGalileoDataPage(*((BlueFin::GlPeGalEphMgr **)this + 952), a2);
        }
        BlueFin::GlPeAlmMgr::SetGalileoDataPage((BlueFin::GlPosEng *)((char *)this + 34336), a2);
      }
      *((unsigned char *)this + 406722) = 1;
      if (!v4 && *((_DWORD *)this + 30948))
      {
        BlueFin::GlPosEng::OnInitialTime(this);
      }
    }
  }
}

void BlueFin::GlPosEng::SetDataBits(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glposeng.cpp", 1123, "SetDataBits", (char)"pDataBits != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 1123, "pDataBits != 0");
  }
}

uint64_t BlueFin::GlPosEng::EswPatchLoaded(BlueFin::GlPosEng *this)
{
  GlCustomLog(12, "GlReqSm::EswPatchLoaded!\n");

  return BlueFin::GlQueue::putFIFO((BlueFin::GlPosEng *)((char *)this + 126184), 61, 0);
}

uint64_t BlueFin::GlPeAsicCfgData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 6;
  }
  if (v5 >= 7)
  {
    DeviceFaultNotify("glposeng.cpp", 1416, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 6");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 1416, "ucVersion >= 1 && ucVersion <= 6");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v11 = 27;
    char v12 = v5;
    uint64_t v13 = 0x1000000000000;
    char v10 = &unk_270EBA2F0;
    char v14 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v7 + 10));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 116));
    if (v5 > 2)
    {
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 120));
      if (v5 != 3)
      {
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 180));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 184));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 188));
        if (v5 >= 6) {
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 192));
        }
      }
    }
    for (uint64_t i = 0; i != 56; i += 4)
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 124 + i));
    if (v5 > 1)
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 196));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 200));
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 204));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v6, 4);
  }
  return 1;
}

BOOL BlueFin::GlPeAsicCfgData::Deserialize(BlueFin::GlPeAsicCfgData *this, BlueFin::GlSysLogEntry *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 12) - 1;
  if (v2 <= 5)
  {
    *((_WORD *)this + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((float *)this + 29) = BlueFin::GlSysLogEntry::GetF32(a2);
    if (*((unsigned __int8 *)a2 + 12) > 2u)
    {
      *((float *)this + 30) = BlueFin::GlSysLogEntry::GetF32(a2);
      if (*((unsigned __int8 *)a2 + 12) >= 4u)
      {
        *((float *)this + 45) = BlueFin::GlSysLogEntry::GetF32(a2);
        *((float *)this + 46) = BlueFin::GlSysLogEntry::GetF32(a2);
        *((float *)this + 47) = BlueFin::GlSysLogEntry::GetF32(a2);
        if (*((unsigned __int8 *)a2 + 12) >= 6u) {
          *((float *)this + 48) = BlueFin::GlSysLogEntry::GetF32(a2);
        }
      }
    }
    for (uint64_t i = 0; i != 56; i += 4)
      *(float *)((char *)this + i + 124) = BlueFin::GlSysLogEntry::GetF32(a2);
    if (*((unsigned __int8 *)a2 + 12) <= 1u)
    {
      int U8 = 0;
      *((_DWORD *)this + 49) = 0;
      *((_DWORD *)this + 50) = 0;
    }
    else
    {
      *((_DWORD *)this + 49) = BlueFin::GlSysLogEntry::GetU32(a2);
      *((_DWORD *)this + 50) = BlueFin::GlSysLogEntry::GetU32(a2);
      int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    }
    *((_DWORD *)this + 51) = U8;
  }
  return v2 < 6;
}

uint64_t BlueFin::GlPosEng::AsicStopped(BlueFin::GlPosEng *this)
{
  GlCustomLog(14, "GlPosEng::AsicStopped()\n");
  uint64_t result = BlueFin::GlQueue::putFIFO((BlueFin::GlPosEng *)((char *)this + 126184), 18, 0);
  *((unsigned char *)this + 406725) = 0;
  return result;
}

#error "263AFC858: call analysis failed (funcsize=100)"

uint64_t BlueFin::GlPosEng::SetAsstEph(uint64_t a1, unsigned int *a2)
{
  *(unsigned char *)(a1 + 382024) = 1;
  BlueFin::GlPeGloEphemeris::GlPeGloEphemeris((uint64_t)v4, *(void *)(a1 + 7592) + 5856, a2, -8, 0, 0, 0);
  return BlueFin::GlReqSm::SetAsstEph((BlueFin::GlReqSm *)(a1 + 126144), (const BlueFin::GlPeEphemeris *)v4);
}

unint64_t BlueFin::GlPosEng::SetRefFreqStatus(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 5)
  {
    if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 315144)))
    {
      return GlCustomLog(14, "RefClkUncChange:: Ignored have measurements\n");
    }
    else
    {
      unsigned int v5 = *(unsigned __int16 *)(a2 + 4);
      if (*(unsigned __int16 *)(a1 + 170) >= v5)
      {
        return GlCustomLog(14, "RefClkUncChange:: Ignored Unc %u already above desired unc %u\n", *(unsigned __int16 *)(a1 + 170), v5);
      }
      else
      {
        GlCustomLog(14, "RefClkUncChange:: Success Unc changed from %u to %u\n", *(unsigned __int16 *)(a1 + 170), v5);
        *(_WORD *)(a1 + 170) = *(_WORD *)(a2 + 4);
        BlueFin::GlPeOscMgr::Serialize((BlueFin::GlPeOscMgr *)(a1 + 160), 0, v6, v7);
        return BlueFin::GlReqSm::SetOscOffsAiding(a1 + 126144, 1);
      }
    }
  }
  else
  {
    unint64_t result = BlueFin::GlPeCntinMgr::SetRefFreqStatus((void *)(a1 + 394368), a2);
    if (*(_DWORD *)(a2 + 8) == 4)
    {
      return BlueFin::GlReqSm::SetRefFreqStatus(a1 + 126144, (long long *)a2);
    }
  }
  return result;
}

uint64_t BlueFin::GlPosEng::SetSensRawInfo(uint64_t a1, __int16 *a2)
{
  return 1;
}

float BlueFin::GlPeSensorsMgr::SetSensorsConfig(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_sensmgr.h", 159, "SetSensorsConfig", (char)"pSensorsConfig");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensmgr.h", 159, "pSensorsConfig");
  }
  return BlueFin::GlSensorsConfig::operator=(a1, a2);
}

uint64_t BlueFin::GlPosEng::SetDgpsData(BlueFin::GlPosEng *this, const char *a2, int a3)
{
  __int16 v3 = a3;
  GlCustomLog(14, "GlPosEng::SetDgpsData:: size %d\n", a3);
  v6[0] = &unk_270EBA298;
  v6[1] = a2;
  __int16 v7 = v3;
  uint64_t v8 = 0;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    off_270EBA2B0((uint64_t)v6, 0);
  }
  return 1;
}

uint64_t BlueFin::GlPosEng::SetWlanInfo(uint64_t a1, uint64_t a2)
{
  GlCustomLog(15, "GlPosEng::SetWlanInfo(): MAC(%08X%08X)\n", *(_DWORD *)(a2 + 4), *(_DWORD *)a2);
  GlCustomLog(15, "GlPosEng::SetWlanInfo(): pos(%lf, %lf, %lf)\n", *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24));
  GlCustomLog(15, "GlPosEng::SetWlanInfo(): dist = %f m unc %f m rssi %f dBm\n", *(float *)(a2 + 32), *(float *)(a2 + 36), *(float *)(a2 + 40));
  BlueFin::stRtdMgr::RtdUpdate(a1 + 206280, a2, *(unsigned int *)(a1 + 277316), v5, 0, 10000.0);
  return 1;
}

void BlueFin::GlPosEng::SetOnchipNvMemData(uint64_t a1, __n128 *a2)
{
  int v4 = a2[2].n128_i16[1];
  BOOL v6 = v4 < 10 && *(__int16 *)(a1 + 170) > v4;
  if (v6)
  {
    BlueFin::GlPeOscMgr::SetOscOff((BlueFin::GlPeOscMgr *)(a1 + 160), (float)((float)a2[2].n128_i16[0] * 0.000000001), (float)((float)v4 * 0.000000001), 0);
    GlCustomLog(14, "Storing to NVMEM OscOffs from OnChip PVT %hd %hd unc\n", a2[2].n128_i16[0], a2[2].n128_i16[1]);
  }
  BlueFin::GlPeTimeManager::GetTime((BlueFin::GlPeTimeManager *)(a1 + 121216), 1, &v13);
  if (v13.n128_u32[2] == -1 || v15 == 4294967300.0 || BlueFin::GlPeGnssTime::GetUncUs((uint64_t)&v13, 0) > 2012000.0)
  {
    BlueFin::GlPeTimeManager::SetCurrentAsicLms((BlueFin::GlPeTimeManager *)(a1 + 121216), a2[2].n128_i32[3]);
    int v7 = a2[2].n128_u16[2];
    unsigned int v8 = a2[2].n128_u32[2] / 0x3E8;
    uint64_t v18 = &off_270EBC600;
    double v9 = fmod((double)v8, 1.0);
    if (v9 >= 1.0)
    {
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v10 = v9 * 4294967300.0 + 0.5;
    unsigned int v11 = v10;
    if (v10 >= 4294967300.0) {
      unsigned int v11 = -1;
    }
    LODWORD(v19) = v11;
    HIDWORD(v19) = v8 + 604800 * v7;
    uint64_t v18 = &off_270EBC600;
    LODWORD(v10) = a2[2].n128_u32[3];
    v13.n128_u32[0] = v11;
    *(unint64_t *)((char *)v13.n128_u64 + 4) = HIDWORD(v19);
    double v14 = (double)*(unint64_t *)&v10;
    double v15 = 1000000.0;
    unsigned __int8 v17 = 0;
    BlueFin::GlPeTimeManager::SetTime((BlueFin::GlPeTimeManager *)(a1 + 121216), (BlueFin::GlPeGnssTime *)&v13, 2u, &v17);
    GlCustomLog(14, "Storing to NVMEM time from OnChip PVT %hu %u\n", a2[2].n128_u16[2], a2[2].n128_u32[2]);
    double v12 = a2[1].n128_f64[1];
    if (v12 >= 400.0) {
      goto LABEL_19;
    }
  }
  else
  {
    double v12 = a2[1].n128_f64[1];
    if (v12 >= 400.0)
    {
      if (!v6) {
        return;
      }
      goto LABEL_19;
    }
  }
  __n128 v13 = *a2;
  double v14 = a2[1].n128_f64[0];
  double v15 = v12;
  double v16 = v12;
  LODWORD(v12) = *(_DWORD *)(a1 + 123784);
  LODWORD(v18) = 2;
  double v19 = (double)*(unint64_t *)&v12;
  int v20 = &off_270EBC600;
  uint64_t v21 = 0;
  BlueFin::GlPeAsstPosMgr::processAssistance(a1 + 280, (long long *)&v13, 0, 4, (BlueFin::stTimeOfAsstPos *)&v18, 0, 0);
  GlCustomLog(14, "Storing to NVMEM POS from OnChip PVT %lf %lf %lf unc\n", v13.n128_f64[0], v13.n128_f64[1], v15);
LABEL_19:
  if (*(unsigned char *)(a1 + 406725)) {
    BlueFin::GlNvMemImpl::Write((BlueFin::GlNvMemImpl *)(a1 + 382416));
  }
}

double BlueFin::GlPosEng::SetPwrMeasStats(float64x2_t *a1, uint64_t a2)
{
  return BlueFin::GlPeMsmtMgr::SetPwrMeas(a1 + 19696, a2);
}

uint64_t BlueFin::GlPosEng::ReportIqData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 137024;
  do
  {
    uint64_t result = *(void *)(v4 + v3);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 256))(result, a2);
    }
    v3 += 8;
  }
  while (v3 != 576);
  return result;
}

uint64_t BlueFin::GlPeModeChange::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glposeng.cpp", 2704, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 2704, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 56;
    char v10 = 1;
    uint64_t v11 = 0x1000000000000;
    unsigned int v8 = &unk_270EBA2F0;
    char v12 = 1;
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 12));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeModeChange::Deserialize(BlueFin::GlPeModeChange *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 56 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 2741);
  }
  return v3;
}

uint64_t BlueFin::GlPosEng::SetHostPexInterface(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

BOOL BlueFin::GlPosEng::SetGpsTimeFromMeif (BlueFin::GlPosEng *this, int a2, unsigned int a3, int a4, unsigned int a5)
{
  double v9 = (double)a3 * 0.001;
  double v19 = &off_270EBC600;
  double v10 = fmod(v9, 1.0);
  if (v10 < 0.0 || v10 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v12 = v10 * 4294967300.0 + 0.5;
  unsigned int v13 = v12;
  if (v12 >= 4294967300.0) {
    unsigned int v13 = -1;
  }
  unsigned int v20 = v13;
  unsigned int v21 = v9 + 604800 * a2;
  double v19 = &off_270EBC600;
  v16[0] = v13;
  v16[1] = v21;
  __n128 v16[2] = 0;
  double v17 = (double)a5;
  double v18 = (double)(1000 * a4);
  unsigned __int8 v15 = 0;
  return BlueFin::GlPeTimeManager::SetTime((BlueFin::GlPosEng *)((char *)this + 121216), (BlueFin::GlPeGnssTime *)v16, 2u, &v15);
}

unint64_t BlueFin::GlPosEng::UpdateL5HardwareDelayInMeters(BlueFin::GlPosEng *this, float a2)
{
  GlCustomLog(15, "GlPosEng::UpdateL5HardwareDelayInMeters: \n");
  BlueFin::GlPeKF::UpdateL5BiasM((BlueFin::GlPosEng *)((char *)this + 184416), a2);

  return BlueFin::GlReqSm::UpdateL5HardwareDelayInMeters((BlueFin::GlPosEng *)((char *)this + 126144));
}

unint64_t BlueFin::GlPosEng::UpdateL5DeltaHardwareDelayInMeters(BlueFin::GlPosEng *this, float a2)
{
  GlCustomLog(15, "GlPosEng::UpdateL5DeltaHardwareDelayInMeters: \n");
  BlueFin::GlPeKF::UpdateDeltaL5BiasM((BlueFin::GlPosEng *)((char *)this + 184416), a2);

  return BlueFin::GlReqSm::UpdateL5DeltaHardwareDelayInMeters((BlueFin::GlPosEng *)((char *)this + 126144));
}

uint64_t BlueFin::GlPosEng::ReinitMeasEng(BlueFin::GlPosEng *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (!v3)
  {
    DeviceFaultNotify("glposeng.cpp", 3229, "ReinitMeasEng", (char)"m_pcbCallBacks");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glposeng.cpp", 3229, "m_pcbCallBacks");
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
    *((void *)this + 5) = 0;
  }

  return BlueFin::GlPosEng::InitMeasEng(this, a2);
}

uint64_t BlueFin::GlPosEng::GetSatelliteOrbitInfo(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, BlueFin::GlPeLtoMgr *a9, BlueFin::GlPeTimeManager *a10, unsigned int *a11, uint64_t a12, void *a13, char a14, unsigned int a15, uint64_t a16, __n128 __src, int a18, long long a19, long long a20,long long a21,long long a22,__int16 a23,int a24,char a25,int a26,int a27,char a28,int a29,int a30,int a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,char a43,__int16 a44,int a45,int a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  LOWORD(v69) = 0;
  STACK[0x5F8] = *MEMORY[0x263EF8340];
  if (!a2 || !a3) {
    return (unsigned __int16)v69;
  }
  long long v116 = (unsigned int *)(a1 + 123784);
  bzero(a2, 16 * a3);
  uint64_t v73 = 0;
  STACK[0x5C8] = (unint64_t)&a69;
  do
  {
    uint64_t v74 = STACK[0x5C8] + v73;
    *(void *)(v74 + 12) = 0;
    *(void *)uint64_t v74 = v74 + 12;
    *(unsigned char *)(v74 + 8) = 2;
    v73 += 24;
  }
  while (v73 != 168);
  unsigned int v69 = 0;
  unsigned int v75 = 0;
  long long v114 = (BlueFin::GlPeTimeManager *)(a1 + 121216);
  uint64_t vars8 = (void *)(a1 + 608);
  uint64_t v113 = (BlueFin::GlPeLtoMgr *)(a1 + 7648);
  uint64_t v110 = a1;
  unsigned __int8 __dst = &a46;
  do
  {
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr(vars8, v75);
    if (Mgr)
    {
      unsigned __int16 v77 = Mgr;
      (*(void (**)(__n128 *__return_ptr))(*Mgr + 304))(&__src);
      a42 = __src.n128_i8[8];
      memcpy(&a46, (const void *)__src.n128_u64[0], 4 * __src.n128_u8[8]);
      a44 = 0;
      a43 = 0;
      a45 = a46;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a42);
      if (a43 != a42)
      {
        if (v75 < 7) {
          char v78 = v75 + 1;
        }
        else {
          char v78 = 0;
        }
        char v115 = v78;
        do
        {
          LOBYTE(a13) = a44;
          uint64_t v79 = (*(uint64_t (**)(void *, void **, uint64_t))(*v77 + 112))(v77, &a13, 1);
          uint64_t v80 = v79;
          if (v79)
          {
            a30 = v75;
            LOBYTE(a31) = (_BYTE)a13;
            if (v69 < a3)
            {
              long long v81 = &a2[16 * v69];
              *long long v81 = (char)a13;
              v81[1] = v115;
              *((_WORD *)v81 + 1) = 2;
              unsigned int v82 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 144))(v79);
              unint64_t v83 = v81 + 3;
              if (v82 < 4) {
                *unint64_t v83 = 0x3040201u >> (8 * v82);
              }
              if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 40))(v80)) {
                char v84 = 1;
              }
              else {
                char v84 = 2;
              }
              int v85 = &a2[16 * v69];
              v85[6] = 0;
              uint64_t v86 = v85 + 6;
              *(v86 - 2) = v84;
              *(_DWORD *)(v86 + 2) = 0;
              *(v86 - 1) = *v83 == 4;
              *(_DWORD *)(v86 + 6) = 0;
              if (v116[2])
              {
                *uint64_t v86 = 1;
                __n128 Time = BlueFin::GlPeTimeManager::GetTime(v114, 1, &__src);
                float v88 = (*(double (**)(uint64_t, __n128 *, uint64_t, __n128))(*(void *)v80 + 64))(v80, &__src, 1, Time);
                *(float *)(v86 + 2) = v88;
                if (*(v86 - 1))
                {
                  __src.n128_u32[0] = 0;
                  if (BlueFin::GlPeLtoMgr::GetLtoFileAgeS(v113, *v116, (int *)&__src))
                  {
                    *(float *)(v86 + 6) = (float)__src.n128_i32[0];
                    *v86 |= 2u;
                  }
                }
              }
              BlueFin::GlGnssSet::Add((uint64_t)&a69, &a30);
              ++v69;
            }
          }
          BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a42);
        }
        while (a43 != a42);
      }
    }
    ++v75;
  }
  while (v75 != 7);
  BlueFin::GlGnssSet::operator~((uint64_t)&a69, (uint64_t)&a42);
  unsigned int v89 = 0;
  unsigned int v90 = (BlueFin::GlPeAlmMgr *)(v110 + 34336);
  do
  {
    unsigned int v91 = (const void **)BlueFin::GlGnssSet::operator()((uint64_t)&a42, v89);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a13, &a15, 2u, v91);
    LOBYTE(a30) = a14;
    memcpy(&a32, a13, 4 * a14);
    HIWORD(a30) = 0;
    BYTE1(a30) = 0;
    a31 = a32;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
    if (BYTE1(a30) != a30)
    {
      if (v89 < 7) {
        char v93 = v89 + 1;
      }
      else {
        char v93 = 0;
      }
      while (1)
      {
        char v94 = BYTE2(a30);
        a27 = 7;
        a28 = 0;
        __src.n128_u32[0] = -65536;
        __src.n128_u64[1] = 0;
        a19 = 0u;
        a20 = 0u;
        a21 = 0u;
        a22 = 0u;
        a23 = 0;
        a18 = 0;
        a24 = -1;
        a25 = 0;
        Aluint64_t m = BlueFin::GlPeAlmMgr::GetAlm((uint64_t)v90, v89, BYTE2(a30), (uint64_t)&__src, 0, 1);
        int v96 = v69 < a3 ? Alm : 0;
        if (v96 == 1) {
          break;
        }
LABEL_55:
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a30);
        if (BYTE1(a30) == a30) {
          goto LABEL_56;
        }
      }
      long long v97 = &a2[16 * v69];
      *long long v97 = v94;
      v97[1] = v93;
      char v98 = 1;
      *((_WORD *)v97 + 1) = 1;
      if (a24)
      {
        if (a24 != 1)
        {
          if (a24 != 4 && (a24 & 0xFFFFFFFE) != 2) {
            goto LABEL_42;
          }
          char v98 = 5;
        }
      }
      else
      {
        char v98 = 2;
      }
      v97[3] = v98;
LABEL_42:
      if a27 < 5 && ((0x1Du >> a27))
      {
        int v99 = *(_DWORD *)&asc_263BBA0FC[4 * a27];
      }
      else if (a27 == 5)
      {
        LOWORD(v99) = 31;
      }
      else
      {
        LOWORD(v99) = 255;
      }
      if (((unsigned __int16)v99 & __src.n128_u16[1]) != 0) {
        char v100 = 2;
      }
      else {
        char v100 = 1;
      }
      int v101 = &a2[16 * v69];
      *((_DWORD *)v101 + 2) = 0;
      char v102 = v101 + 8;
      *(v102 - 4) = v100;
      *(_WORD *)(v102 - 3) = 0;
      *((_DWORD *)v102 + 1) = 0;
      if (v116[2])
      {
        int v103 = BlueFin::GlPeAlmMgr::Age(v90, (const BlueFin::GlPeAlmanac *)&__src);
        if (v103 != 0x7FFFFFFF)
        {
          *(float *)char v102 = (float)v103;
          *(v102 - 2) |= 1u;
        }
      }
      ++v69;
      goto LABEL_55;
    }
LABEL_56:
    ++v89;
  }
  while (v89 != 7);
  if (v69)
  {
    __int16 v104 = 0;
    do
    {
      __int16 v105 = (float *)&a2[16 * v104];
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&__src, (char *)0x50, " %.2f", v92, v105[3]);
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&a30, (char *)0x50, " %.2f", v106, v105[2]);
      if ((*((unsigned char *)v105 + 6) & 2) != 0) {
        p_src = &__src;
      }
      else {
        p_src = (__n128 *)"NaN";
      }
      if (*((unsigned char *)v105 + 6)) {
        int32x2_t v108 = (const char *)&a30;
      }
      else {
        int32x2_t v108 = "NaN";
      }
      GlCustomLog(15, "GetSatsOrbitInfo:: constell: %d, svid: %d, serverPredAvail: %d, serverPredAgeSec: %s, ephType: %d, ephSource: %d, ephHealth: %d, ephAgeSec: %s\n", *((unsigned __int8 *)v105 + 1), *(unsigned __int8 *)v105, *((unsigned __int8 *)v105 + 5), (const char *)p_src, *((unsigned __int8 *)v105 + 2), *((unsigned __int8 *)v105 + 3), *((unsigned __int8 *)v105 + 4), v108);
      ++v104;
    }
    while ((int)v69 > v104);
  }
  return (unsigned __int16)v69;
}

uint64_t BlueFin::GlPosEng::GetRadioRegisters(uint64_t this, unsigned int *a2)
{
  BOOL v2 = (const void **)this;
  *(void *)&v32[4] = *MEMORY[0x263EF8340];
  if ((*(_DWORD *)(*(void *)(this + 16) + 140) & 0xFEu) > 0x11)
  {
    unsigned int v4 = *((unsigned __int8 *)a2 + 1);
    if (v4 > 3)
    {
      if (v4 == 4)
      {
        if (BlueFin::GlPeReqBag::GetCWRequest((BlueFin::GlPeReqBag *)(this + 137024)))
        {
          uint64_t v6 = 0;
          do
          {
            BlueFin::GlPeReqBag::GetFactoryTestStatus((uint64_t)(v2 + 17128));
            if (LOWORD(v27[0]) != 255 && v29 != 0)
            {
              HIWORD(v31[0]) = (int)((v30 + 174.0 - v28) * 1000.0);
              BYTE4(v31[0]) = v27[0];
              BYTE5(v31[0]) = BlueFin::GlPosEng::GetRadioRegisters(unsigned int *)::BandTranslation[v6];
              int v16 = 1;
              goto LABEL_28;
            }
            ++v6;
          }
          while (v6 != 5);
          int v16 = 0;
        }
        else
        {
          unsigned int v8 = (char *)v31 + 4;
          BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v27, 0x13u, v2 + 39393);
          unsigned int v9 = 0;
          double v10 = (char *)__src + 4 * v26 - 4;
          do
          {
            if (*v10)
            {
              unsigned int v11 = *v10 - (((*v10 >> 1) & 0x5B6DB6DB) + ((*v10 >> 2) & 0x9249249));
              unsigned int v9 = ((v11 + (v11 >> 3)) & 0xC71C71C7) + v9 - 63 * (((v11 + (v11 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            --v10;
          }
          while (v10 >= __src);
          if ((unsigned __int16)v9 >= 0x7Cu) {
            int v16 = 124;
          }
          else {
            int v16 = (unsigned __int16)v9;
          }
          unsigned __int8 v20 = v26;
          memcpy(v24, __src, 4 * v26);
          unsigned __int16 v22 = 0;
          unsigned __int8 v21 = 0;
          int v23 = v24[0];
          BlueFin::GlSetIterator::operator++(&v20);
          if (v21 != v20)
          {
            do
            {
              if (v22 >= 0x23FuLL)
              {
                DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
                __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
              }
              double v12 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v22;
              char v13 = *v12;
              LODWORD(v12) = v12[1];
              v17[0] = v13;
              int v18 = (int)v12;
              unsigned __int16 v19 = v22;
              MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)(v2 + 39392), (const BlueFin::GlSignalId *)v17, 0, 0);
              uint64_t v15 = *MeMeas;
              *unsigned int v8 = v15;
              v8[1] = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)MeMeas + 1)
                                                                             - *((int *)MeMeas + 1)
                                                                             + BlueFin::GlSvId::s_aucSvId2gnss[v15]];
              *((_WORD *)v8 + 1) = (int)(float)(*((float *)MeMeas + 27) * 1000.0);
              BlueFin::GlSetIterator::operator++(&v20);
              if (v21 == v20) {
                break;
              }
              v8 += 4;
            }
            while (v8 < v32);
          }
        }
LABEL_28:
        LODWORD(v31[0]) = *((unsigned __int8 *)a2 + 2) | (v16 << 8);
        return (*((uint64_t (**)(const void **, void *, void))*v2 + 15))(v2, v31, (v16 + 1));
      }
    }
    else
    {
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(this + 40) + 736);
      return v5();
    }
  }
  else
  {
    v31[0] = 0;
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)this + 120))(this, v31, 2);
  }
  return this;
}

void BlueFin::GlPeAsicCfgData::~GlPeAsicCfgData(BlueFin::GlPeAsicCfgData *this)
{
}

void BlueFin::GlPosEng::~GlPosEng(BlueFin::GlPosEng *this)
{
  uint64_t v1 = (char *)this + 71840;
  *(void *)this = &unk_270EC2A18;
  BlueFin::GlPeConvUtilCache::m_potThis = 0;
  BlueFin::GlReqSm::~GlReqSm((BlueFin::GlPosEng *)((char *)this + 126144));
  *(void *)uint64_t v1 = &unk_270EBC5B8;
  v1[24] = 0;
}

{
  uint64_t vars8;

  *(void *)this = &unk_270EC2A18;
  BlueFin::GlPeConvUtilCache::m_potThis = 0;
  BlueFin::GlReqSm::~GlReqSm((BlueFin::GlPosEng *)((char *)this + 126144));

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlPosEng::EnableOnChipMeas(uint64_t this, char a2)
{
  *(unsigned char *)(this + 407016) = a2;
  return this;
}

uint64_t BlueFin::GlPosEng::IsOnChipMeasEnabled(BlueFin::GlPosEng *this)
{
  return *((unsigned __int8 *)this + 407016);
}

void BlueFin::GlPeModeChange::~GlPeModeChange(BlueFin::GlPeModeChange *this)
{
}

void BlueFin::GlPeMeIfDummy::~GlPeMeIfDummy(BlueFin::GlPeMeIfDummy *this)
{
}

uint64_t BlueFin::GlPeMeIfDummy::GetRadioPerfMode(BlueFin::GlPeMeIfDummy *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  return 0;
}

uint64_t BlueFin::GlPeMeIfDummy::GetDbgRxparams(BlueFin::GlPeMeIfDummy *this)
{
  return 0;
}

char *BlueFin::GlPeMeIfDummy::RequestDump(BlueFin::GlPeMeIfDummy *this, char *a2)
{
  uint64_t result = a2;
  *a2 = 0;
  return result;
}

BlueFin::GlUtcTime *BlueFin::GlUtcTime::GlUtcTime(BlueFin::GlUtcTime *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, long double a7)
{
  __int16 v10 = a4;
  *(void *)this = &unk_270EC23C8;
  *((void *)this + 1) = 0;
  if (a2 <= 0x7BC && (a2 != 1980 || a3 <= 1 && (a3 != 1 || a4 <= 5)))
  {
    unsigned __int16 v22 = "usYear > 1980 || (usYear == 1980 && (ucMonth > 1 || (ucMonth == 1 && ucDay > 5)))";
    DeviceFaultNotify("glpe_datetime.h", 1009, "GlUtcTime", (char)"usYear > 1980 || (usYear == 1980 && (ucMonth > 1 || (ucMonth == 1 && ucDay > 5)))");
    int v23 = "glpe_datetime.h";
    int v24 = 1009;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v23, v24, v22);
  }
  double v14 = fmod(a7, 1.0);
  if (v14 < 0.0 || v14 >= 1.0)
  {
    unsigned __int16 v22 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v23 = "glpe_timepoint.h";
    int v24 = 173;
    goto LABEL_22;
  }
  double v16 = v14 * 4294967300.0 + 0.5;
  unsigned int v17 = v16;
  if (v16 >= 4294967300.0) {
    unsigned int v17 = -1;
  }
  int v18 = a2 - 1977;
  if ((int)(a2 - 1980) >= 0) {
    int v18 = a2 - 1980;
  }
  unsigned int v19 = 3600 * a5
      + 126230400 * (v18 >> 2)
      + 60 * a6
      + a7
      + 86400
      * (BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * (a2 - 1980 - (v18 & 0xFFFFFFFC)) - 1 + a3]
       + (unsigned __int16)(v10 - 1))
      - 432000;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= v19
                                                           + BlueFin::GlWeekTowTime::m_ucCurrentLs)
    unsigned __int8 v20 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v20 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  *((_DWORD *)this + 2) = v17;
  *((_DWORD *)this + 3) = v19 + v20;
  *(void *)this = &unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)this);
  if (a7 >= 60.0) {
    --*((_DWORD *)this + 3);
  }
  BlueFin::GlUtcTime::breakdownFct((uint64_t)this);
  return this;
}

float BlueFin::GlSensorsConfig::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return result;
}

BOOL BlueFin::stSkfTestParam::InSatCommandedTimeRange(BlueFin::stSkfTestParam *this)
{
  uint64_t v1 = *((void *)this + 262);
  if (!v1)
  {
    DeviceFaultNotify("glpe_cst.h", 417, "InSatCommandedTimeRange", (char)"m_potTimeMgr != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_cst.h", 417, "m_potTimeMgr != nullptr");
  }
  unsigned int v2 = *(_DWORD *)(v1 + 2568);
  return *((_DWORD *)this + 160) <= v2 && *((_DWORD *)this + 161) >= v2;
}

BlueFin::GlPeNavGnssState *BlueFin::GlPeNavGnssState::GlPeNavGnssState(BlueFin::GlPeNavGnssState *this, const BlueFin::GlPeNavGnssState *a2)
{
  *(void *)this = &unk_270EC2FA8;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  uint64_t v4 = *((void *)a2 + 10);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)this + 10) = v4;
  *((void *)this + 11) = *((void *)a2 + 11);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)a2 + 104);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *(void *)((char *)this + 196) = *(void *)((char *)a2 + 196);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_OWORD *)this + 13) = *((_OWORD *)a2 + 13);
  *((_OWORD *)this + 14) = *((_OWORD *)a2 + 14);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((unsigned char *)this + 244) = *((unsigned char *)a2 + 244);
  *((void *)this + 31) = *((void *)a2 + 31);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlPeNavGnssState *)((char *)this + 264), (unsigned int *)this + 69, 0x13u, (const void **)a2 + 33);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlPeNavGnssState *)((char *)this + 352), (unsigned int *)this + 91, 0x13u, (const void **)a2 + 44);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlPeNavGnssState *)((char *)this + 440), (unsigned int *)this + 113, 0x13u, (const void **)a2 + 55);
  return this;
}

unint64_t BlueFin::GlPeNavGnssState::Print(unint64_t this, unsigned __int8 a2, const char *a3)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        if (a3) {
          GlCustomLog(a2, "%s ", a3);
        }
        return GlCustomLog(a2, "NavGnssState: LMS %u LLA (%f %f %.1f) (%.1f %.1f) Bc %.1f (%.1f) BcDot %.1f (%.1f) BcDotDot %.1f Vel NED (%.1f %.1f %.1f) (%.1f %.1f %.1f %.1f) HdgDeg %.1f (%.1f) BiasStates %.1f (%.1f) % .1f (%.1f) % .1f (%.1f) % .1f (%.1f)\n", *(_DWORD *)(v5 + 200), *(double *)(v5 + 8), *(double *)(v5 + 16), *(double *)(v5 + 24), *(float *)(v5 + 80), *(float *)(v5 + 84), *(double *)(v5 + 88), *(float *)(v5 + 96), *(double *)(v5 + 152), *(float *)(v5 + 160), *(double *)(v5 + 168), *(double *)(v5 + 104), *(double *)(v5 + 112), *(double *)(v5 + 120), *(float *)(v5 + 132),
                 *(float *)(v5 + 136),
                 *(float *)(v5 + 128),
                 *(float *)(v5 + 140),
                 *(float *)(v5 + 176) * 57.2957795,
                 *(float *)(v5 + 184) * 57.2957795,
                 *(float *)(v5 + 208),
                 *(float *)(v5 + 212),
                 *(float *)(v5 + 216),
                 *(float *)(v5 + 220),
                 *(float *)(v5 + 224),
                 *(float *)(v5 + 228),
                 *(float *)(v5 + 232),
                 *(float *)(v5 + 236));
      }
    }
  }
  return this;
}

void BlueFin::GlPeNavGnssState::~GlPeNavGnssState(BlueFin::GlPeNavGnssState *this)
{
}

uint64_t BlueFin::GlNvMemImpl::SetDataToIgnore(BlueFin::GlNvMemImpl *this, int a2, int a3)
{
  int v4 = *((_DWORD *)this + 2);
  int v5 = v4 | a2;
  if (a3) {
    int v5 = v4 & ~a2;
  }
  *((_DWORD *)this + 2) = v5;
  int v6 = BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, 6);
  GlCustomLog(15, "NVMEM SetDataToIgnore(0x%x[0x%x])\n", *((_DWORD *)this + 2), v4);
  GlCustomLog(15, "NVMEM SetDataToIgnore(");
  uint64_t v7 = *((unsigned int *)this + 2);
  if (v7)
  {
    unint64_t v8 = 0;
    char v9 = 1;
    do
    {
      if (((1 << v8) & v7) != 0)
      {
        if ((v9 & 1) == 0) {
          GlCustomLog(15, "|");
        }
        GlCustomLog(15, "%s", BlueFin::GlNvMemImpl::SetDataToIgnore(unsigned int,BOOL)::aacIgnoreFlags[v8]);
        char v9 = 0;
        uint64_t v7 = v7 & ~(1 << v8);
      }
      if (v8 > 0xD) {
        break;
      }
      ++v8;
    }
    while (v7);
  }
  else
  {
    GlCustomLog(15, "<nothing>");
  }
  GlCustomLog(15, ")\n");
  uint64_t result = BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v6);
  if (*((_DWORD *)this + 2) != v4)
  {
    return BlueFin::GlNvMemImpl::DetermineDataToIgnore((uint64_t)this);
  }
  return result;
}

BlueFin::GlPeTimeManagerData *BlueFin::GlNvMemImpl::AddErrorToRtc(BlueFin::GlPeTimeManagerData **this, int a2)
{
  return BlueFin::GlPeTimeManager::AddErrorToRtc(this[3], a2);
}

uint64_t BlueFin::GlNvMemImpl::AddErrorToPos(uint64_t this, char a2)
{
  *(unsigned char *)(this + 11862) = a2;
  *(unsigned char *)(*(void *)(this + 32) + 370) = a2;
  return this;
}

uint64_t BlueFin::GlNvMemImpl::ChangeAgeOfPos(uint64_t this, int a2)
{
  *(_DWORD *)(this + 11864) = a2;
  return this;
}

uint64_t BlueFin::GlNvMemImpl::AlterOscValues(BlueFin::GlNvMemImpl *this, int a2, int a3)
{
  uint64_t result = GlCustomLog(13, "GlNvMem::AlterOscValues(%d,%u)\n", a2, a3);
  *((_DWORD *)this + 2967) = a2;
  *((_DWORD *)this + 2968) = a3;
  return result;
}

uint64_t BlueFin::GlNvMemImpl::ForceClockUncertainty(uint64_t this, int a2)
{
  *(_DWORD *)(this + 11876) = a2;
  return this;
}

uint64_t BlueFin::GlNvMemImpl::Write(BlueFin::GlNvMemImpl *this)
{
  if (*((_DWORD *)this + 2973) == 1) {
    int v2 = 3;
  }
  else {
    int v2 = 5;
  }
  uint64_t result = BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v2);
  int v4 = result;
  if (*((_DWORD *)this + 2973) == 3)
  {
    int v5 = *((_DWORD *)this + 2964);
    if (!v5) {
      return result;
    }
    if (v5 == 2)
    {
      int v6 = BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, 4);
      BlueFin::GlNvMemImpl::ResetReader((uint64_t)this);
      BlueFin::GlNvMemImpl::DetermineDataToIgnore((uint64_t)this);
      uint64_t v7 = *((void *)this + 2);
      unint64_t v8 = *(void (**)(void, BlueFin::GlNvMemImpl *))(v7 + 136);
      if (v8) {
        v8(*(void *)(v7 + 8), this);
      }
      BlueFin::GlNvMemImpl::LoadComplete(this);
      BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v6);
    }
  }
  (*(void (**)(void, void, void, void))(**((void **)this + 2) + 72))(*((void *)this + 2), 0, 0, 0);
  double v35 = &unk_270EC3038;
  HIDWORD(v36) = 0;
  LOBYTE(v37) = 0;
  *(void *)((char *)&v37 + 4) = 8;
  LOBYTE(v36) = 1;
  uint64_t v11 = *((void *)this + 2);
  if (v11) {
    goto LABEL_11;
  }
  uint64_t v12 = BlueFin::GlUtils::m_pInstance;
  if (!BlueFin::GlUtils::m_pInstance) {
    goto LABEL_17;
  }
  if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
LABEL_11:
    BlueFin::GlNvMemImplData::SerializeImpl((uint64_t)&v35, v11);
    uint64_t v12 = BlueFin::GlUtils::m_pInstance;
    if (!BlueFin::GlUtils::m_pInstance) {
      goto LABEL_17;
    }
  }
  if (*(unsigned char *)(v12 + 1122)) {
    (*((void (**)(void **, void, void))v35 + 3))(&v35, 0, 0);
  }
LABEL_17:
  HIDWORD(v34) = 6;
  int v13 = *((_DWORD *)this + 2);
  if ((v13 & 0x40000) == 0)
  {
    BlueFin::GlPeTimeManager::SerializeTime(*((BlueFin::GlPeTimeManager **)this + 3), *((BlueFin::GlPeEngineCallBacks **)this + 2));
    int v13 = *((_DWORD *)this + 2);
  }
  if ((v13 & 0x20000) == 0) {
    BlueFin::GlPeAsstMgr::SerializeAllEph(*((void *)this + 4), 1, (uint64_t)&v34 + 4, *((void *)this + 2));
  }
  double v14 = (BlueFin::GlPeOscMgr *)*((void *)this + 9);
  if (!*(unsigned char *)v14
    || (int v15 = *((_DWORD *)this + 2), (v15 & 0x100000) == 0)
    || (*(_DWORD *)(*((void *)this + 14) + 32) & 0x40) == 0)
  {
    BlueFin::GlPeOscMgr::Serialize(v14, *((BlueFin::GlPeEngineCallBacks **)this + 2), v9, v10);
    int v15 = *((_DWORD *)this + 2);
  }
  if ((v15 & 0x80000) == 0)
  {
    BlueFin::GlPeAlmMgr::SerializeAll(*((BlueFin::GlPeAlmMgr **)this + 7), *((BlueFin::GlPeEngineCallBacks **)this + 2));
    int v15 = *((_DWORD *)this + 2);
  }
  if ((~v15 & 0x200020) != 0)
  {
    BlueFin::GlPeLtoMgr::Serialize(*((BlueFin::GlPeLtoMgr **)this + 8), *((BlueFin::GlPeEngineCallBacks **)this + 2));
    int v15 = *((_DWORD *)this + 2);
  }
  if ((v15 & 0x800000) == 0)
  {
    double v16 = (_DWORD *)*((void *)this + 10);
    int v17 = v16[12127];
    if ((v17 & 8) != 0 && v16[30])
    {
      v16 += 16;
    }
    else if ((v17 & 0x40) != 0 && v16[78])
    {
      v16 += 64;
    }
    double v18 = BlueFin::GlPeIonoModel::GlPeIonoModel((uint64_t)v32, (uint64_t)v16);
    if (v33 && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      (*(void (**)(uint64_t *, void, void, double))(v32[0] + 24))(v32, 0, 0, v18);
      int v15 = *((_DWORD *)this + 2);
    }
  }
  unsigned int v19 = (BlueFin::GlPeEngineCallBacks *)*((void *)this + 2);
  if ((v15 & 0x1000000) != 0)
  {
    if ((v15 & 0x20000000) != 0) {
      goto LABEL_42;
    }
  }
  else
  {
    BlueFin::GlPeTimeManager::SerializeModels(*((BlueFin::GlPeTimeManager **)this + 3), v19);
    int v15 = *((_DWORD *)this + 2);
    unsigned int v19 = (BlueFin::GlPeEngineCallBacks *)*((void *)this + 2);
    if ((v15 & 0x20000000) != 0)
    {
LABEL_42:
      if ((v15 & 0x40000000) != 0) {
        goto LABEL_44;
      }
      goto LABEL_43;
    }
  }
  if (v19 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    (*(void (**)(void))(*(void *)(*((void *)this + 15) + 32) + 24))();
    unsigned int v19 = (BlueFin::GlPeEngineCallBacks *)*((void *)this + 2);
    if ((*((_DWORD *)this + 2) & 0x40000000) != 0) {
      goto LABEL_44;
    }
LABEL_43:
    BlueFin::GlPeRtiRequestor::Serialize(*((void *)this + 16), (uint64_t)v19);
    unsigned int v19 = (BlueFin::GlPeEngineCallBacks *)*((void *)this + 2);
    goto LABEL_44;
  }
  unsigned int v19 = 0;
  if ((v15 & 0x40000000) == 0) {
    goto LABEL_43;
  }
LABEL_44:
  BlueFin::GlPeEnvironmentMonitor::Serialize(*((void *)this + 12) + 64, (uint64_t)v19);
  if (*((void *)this + 2)) {
    goto LABEL_45;
  }
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (!*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
    {
      uint64_t v21 = *((void *)this + 11) + 56384;
      goto LABEL_54;
    }
LABEL_45:
    (*(void (**)(uint64_t))(*(void *)(*((void *)this + 11) + 37824) + 24))(*((void *)this + 11) + 37824);
    uint64_t v20 = *((void *)this + 2);
    uint64_t v21 = *((void *)this + 11) + 56384;
    if (v20)
    {
LABEL_57:
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 24))(v21, v20, 0);
      goto LABEL_58;
    }
LABEL_54:
    if (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      goto LABEL_58;
    }
    uint64_t v20 = 0;
    goto LABEL_57;
  }
LABEL_58:
  BlueFin::GlPeOscMgr::UpdateCntinOffsetEstimate(*((void *)this + 9));
  BlueFin::GlPeOscMgr::SerializeCntin(*((void *)this + 9), *((BlueFin::GlPeEngineCallBacks **)this + 2));
  BlueFin::GlPeSvVisibilityCache::Serialize(*((BlueFin::GlPeSvVisibilityCache **)this + 6), *((BlueFin::GlPeEngineCallBacks **)this + 2));
  int v28 = *((_DWORD *)this + 2);
  if ((v28 & 0x10000000) == 0)
  {
    BlueFin::GlPeClkCalibrateMgr::SerializeAll(*((BlueFin::GlPeClkCalibrateMgr **)this + 18), *((BlueFin::GlPeEngineCallBacks **)this + 2), v22, v23, v24, v25, v26, v27, v31, v32[0], v32[1], v32[2], v32[3], v32[4], v32[5], v32[6], v33, v34, (uint64_t)v35,
      v36,
      v37,
      *((uint64_t *)&v37 + 1),
      v38,
      v39,
      v40,
      v41,
      vars0,
      vars0_4);
    int v28 = *((_DWORD *)this + 2);
  }
  if ((v28 & 0x10000) == 0) {
    BlueFin::GlPeAsstPosMgr::Serialize(*((BlueFin::GlPeAsstPosMgr **)this + 5), *((BlueFin::GlPeEngineCallBacks **)this + 2), 1);
  }
  BlueFin::GlPeLtoMgr::SerializeLto(*((BlueFin::GlPeLtoMgr **)this + 8), *((BlueFin::GlPeEngineCallBacks **)this + 2));
  (*(void (**)(void, uint64_t, void, void))(**((void **)this + 2) + 72))(*((void *)this + 2), 2, 0, 0);
  char v29 = *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1124);
  double v30 = (BlueFin::GlPeTimeManager *)*((void *)this + 3);
  *((unsigned char *)v30 + 2565) = 1;
  *((unsigned char *)v30 + 2566) = v29;
  BlueFin::GlPeTimeManager::saveNvRamAndRtc(v30, 0);
  (*(void (**)(void, uint64_t, void, void))(**((void **)this + 2) + 72))(*((void *)this + 2), 3, 0, 0);
  BlueFin::GlPeAsstPosMgr::Serialize(*((BlueFin::GlPeAsstPosMgr **)this + 5), *((BlueFin::GlPeEngineCallBacks **)this + 2), 0);
  (*(void (**)(void, uint64_t, void, void))(**((void **)this + 2) + 72))(*((void *)this + 2), 5, 0, 0);
  return BlueFin::GlNvMemImpl::ChangeState((uint64_t)this, v4);
}

uint64_t BlueFin::GlNvMemImpl::Delete(BlueFin::GlNvMemImpl *this)
{
  (*(void (**)(void, void, void, void))(**((void **)this + 2) + 72))(*((void *)this + 2), 0, 0, 0);
  int v2 = *(uint64_t (**)(void))(**((void **)this + 2) + 72);

  return v2();
}

uint64_t BlueFin::GlNvMemImplData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4)
  {
    unsigned int v7 = v4;
    if (v4 >= 6)
    {
      DeviceFaultNotify("glnvmem.cpp", 1283, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 5");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glnvmem.cpp", 1283, "ucVersion >= 1 && ucVersion <= 5");
    }
    if (v3)
    {
LABEL_8:
      int v10 = 28;
      char v11 = v7;
      uint64_t v12 = 0x1000000000000;
      uint64_t v9 = &unk_270EBA2F0;
      char v13 = v7;
      if (v7 < 5)
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v2 + 12));
        if (v7 < 2) {
          goto LABEL_14;
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 16));
        if (v7 == 2) {
          goto LABEL_14;
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 20));
        if (v7 < 4) {
          goto LABEL_14;
        }
      }
      else
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 12));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 16));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v6 + 20));
      }
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v6 + 24));
LABEL_14:
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v5, 4);
      return 1;
    }
  }
  else
  {
    unsigned int v7 = 5;
    if (v3) {
      goto LABEL_8;
    }
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    goto LABEL_8;
  }
  return 1;
}

void BlueFin::GlNvMemImplData::~GlNvMemImplData(BlueFin::GlNvMemImplData *this)
{
}

void BlueFin::GlNvMemImpl::~GlNvMemImpl(BlueFin::GlNvMemImpl *this)
{
}

uint64_t BlueFin::GlPeCachedAtmosDelays::Oldest(BlueFin::GlPeCachedAtmosDelays *this, double a2, double a3)
{
  unint64_t v3 = *(unsigned __int8 *)this;
  if (v3 < 2)
  {
    return 0;
  }
  else
  {
    unsigned __int8 v4 = 0;
    LODWORD(a3) = *((_DWORD *)this + 1);
    int v5 = (int)(a2 - (double)*(unint64_t *)&a3);
    uint64_t v6 = (unsigned int *)((char *)this + 28);
    for (uint64_t i = 1; i != v3; ++i)
    {
      unsigned int v8 = *v6;
      v6 += 6;
      int v9 = (int)(a2 - (double)v8);
      BOOL v10 = v5 < v9;
      if (v5 <= v9) {
        int v5 = v9;
      }
      if (v10) {
        unsigned __int8 v4 = i;
      }
    }
  }
  return v4;
}

uint64_t BlueFin::GlPeCachedAtmosDelaysWriter::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3 <= 1) {
    char v7 = 1;
  }
  else {
    char v7 = v3;
  }
  if (v3 >= 2)
  {
    DeviceFaultNotify("glpe_atmosdelays.cpp", 188, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_atmosdelays.cpp", 188, "ucVersion >= 1 && ucVersion <= 1");
  }
  uint64_t v8 = **(unsigned __int8 **)(v2 + 16);
  if ((v8 - 113) >= 0xFFFFFF90)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 24 * v8;
    do
    {
      int v21 = 117;
      char v22 = v7;
      uint64_t v23 = 0x1000000000000;
      uint64_t v20 = &unk_270EBA550;
      char v24 = v7;
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId+ 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion+ *(unsigned __int8 *)(*(void *)(v6 + 16) + v9 + 12)));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v6 + 8));
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v12 = v11 + v9;
      int v13 = *(_DWORD *)(v11 + v9 + 4);
      float v14 = 0.0;
      float v15 = 0.0;
      if (v13) {
        float v15 = (float)(*(float *)(v12 + 24) * (float)(*(_DWORD *)(v6 + 8) - v13)) * 0.001;
      }
      int v16 = *(_DWORD *)(v12 + 8);
      if (v16) {
        float v14 = v15 + *(float *)(v11 + v9 + 20);
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, v16);
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v20, v14);
      uint64_t v17 = *(void *)(v6 + 16) + v9;
      if (*(unsigned char *)(v17 + 13)) {
        float v18 = *(float *)(v17 + 16);
      }
      else {
        float v18 = 0.0;
      }
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v20, v18);
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v20, v5, 4);
      v9 += 24;
    }
    while (v10 != v9);
  }
  return 1;
}

uint64_t BlueFin::GlPeCachedAtmosDelaysWriter::Deserialize(BlueFin::GlPeCachedAtmosDelaysWriter *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 117 || *((unsigned char *)a2 + 12) != 1)
  {
    uint64_t v6 = "0";
    DeviceFaultNotify("glpe_atmosdelays.cpp", 214, "Deserialize", (char)"0");
    int v7 = 214;
    goto LABEL_9;
  }
  BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  BlueFin::GlSysLogEntry::GetU8(a2);
  BlueFin::GlSysLogEntry::GetF32(a2);
  BlueFin::GlSysLogEntry::GetF32(a2);
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    uint64_t v6 = "otEntry.DataSize() == otEntry.ReadIdx()";
    DeviceFaultNotify("glpe_atmosdelays.cpp", 225, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    int v7 = 225;
LABEL_9:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_atmosdelays.cpp", v7, v6);
  }
  return 1;
}

void BlueFin::GlPeCachedAtmosDelaysWriter::~GlPeCachedAtmosDelaysWriter(BlueFin::GlPeCachedAtmosDelaysWriter *this)
{
}

void BlueFin::GlPeCoarseTime::SetDtsFromTow(uint64_t a1, uint64_t a2, unsigned char *a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, double a12, double a13, double a14, double a15, double a16, long double a17, int a18, __int16 a19, char a20,unsigned __int8 a21,char *a22,long long a23,long long a24,uint64_t a25,char *a26,long long a27,long long a28,uint64_t a29,double a30,double a31,char a32,uint64_t a33,uint64_t a34,double a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,long long a50,long long a51,long long a52,long long a53,uint64_t a54,uint64_t a55,long long a56,long long a57,long long a58)
{
  uint64_t v58 = a1;
  STACK[0x938] = *MEMORY[0x263EF8340];
  int v59 = *(unsigned int **)(a1 + 24);
  if (!v59[644]) {
    return;
  }
  unsigned int v63 = **(_DWORD **)(v58 + 32);
  if (v63 <= 0xFF9222FE) {
    double v64 = (double)v63;
  }
  else {
    double v64 = (double)(int)v63;
  }
  BlueFin::GlPeTimeManager::GetTime(v59, v64, 0, (uint64_t)&a32);
  double TodS = BlueFin::GlPeGnssTime::GetTodS((BlueFin::GlPeGnssTime *)&a32);
  a30 = 0.0;
  a31 = 0.0;
  double v224 = v64;
  BlueFin::GlPeTimeManager::GetDtsS(*(void *)(v58 + 24), v64, &a31, &a30, 0, 0);
  double v66 = a30;
  unsigned int v225 = v63;
  if (a30 == 4294967300.0)
  {
    unsigned int v70 = *(_DWORD *)(v58 + 4);
    if (v70 == -1)
    {
      double v66 = a35;
      double v69 = 0.0;
      goto LABEL_14;
    }
    double v68 = (double)v70;
  }
  else
  {
    unsigned int v67 = *(_DWORD *)(v58 + 4);
    if (v67 == -1 || (double v68 = (double)v67, a30 < (double)v67))
    {
      double v69 = a31 * 1000.0;
      goto LABEL_14;
    }
  }
  double v69 = (double)*(int *)v58 + a5;
  double v66 = v68 + a6;
  if (v68 + a6 <= 12000.0) {
    double v66 = v66 + v68;
  }
LABEL_14:
  *(double *)&unint64_t v71 = -0.001;
  double v226 = v69;
  STACK[0x888] = 0;
  STACK[0x880] = 0;
  STACK[0x890] = 0;
  *(_OWORD *)&STACK[0x860] = 0u;
  *(_OWORD *)&STACK[0x870] = 0u;
  *(_OWORD *)&STACK[0x840] = 0u;
  *(_OWORD *)&STACK[0x850] = 0u;
  *(_OWORD *)&STACK[0x820] = 0u;
  *(_OWORD *)&STACK[0x830] = 0u;
  *(_OWORD *)&STACK[0x800] = 0u;
  *(_OWORD *)&STACK[0x810] = 0u;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  STACK[0x7E0] = 0;
  *(_OWORD *)&STACK[0x7C0] = 0u;
  *(_OWORD *)&STACK[0x7D0] = 0u;
  double v72 = TodS + v69 * -0.001 - floor((TodS + v69 * -0.001) / 86400.0) * 86400.0;
  double v228 = v72 * 1000.0;
  *(_OWORD *)&STACK[0x7A0] = 0u;
  *(_OWORD *)&STACK[0x7B0] = 0u;
  *(_OWORD *)&STACK[0x780] = 0u;
  *(_OWORD *)&STACK[0x790] = 0u;
  *(_OWORD *)&STACK[0x760] = 0u;
  *(_OWORD *)&STACK[0x770] = 0u;
  *(_OWORD *)&STACK[0x740] = 0u;
  *(_OWORD *)&STACK[0x750] = 0u;
  a57 = 0u;
  a58 = 0u;
  a56 = 0u;
  a26 = (char *)&a27 + 4;
  LOBYTE(a27) = 8;
  *(long long *)((char *)&a27 + 4) = 0u;
  *(long long *)((char *)&a28 + 4) = 0u;
  a22 = (char *)&a23 + 4;
  LOBYTE(a23) = 8;
  *(long long *)((char *)&a23 + 4) = 0u;
  *(long long *)((char *)&a24 + 4) = 0u;
  LOBYTE(a36) = *(unsigned char *)(a2 + 8);
  memcpy((char *)&a36 + 8, *(const void **)a2, 4 * a36);
  WORD1(a36) = 0;
  BYTE1(a36) = 0;
  DWORD1(a36) = DWORD2(a36);
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
  unsigned int v73 = 0;
  unsigned int v74 = 0;
  int v75 = 0;
  if (BYTE1(a36) != a36)
  {
    unsigned int v73 = 0;
    unsigned int v74 = 0;
    int v75 = 0;
    double v221 = v66 * 0.001;
    double v76 = 3.0;
    double v222 = v66;
    double v223 = a5;
    do
    {
      __int16 v77 = BYTE2(a36);
      a21 = BYTE2(a36);
      uint64_t v78 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(a36)];
      if (v78 == 1) {
        goto LABEL_76;
      }
      uint64_t v79 = *(BlueFin::GlPeMsmtMgr **)(v58 + 32);
      LOBYTE(STACK[0x8B0]) = BYTE2(a36);
      LODWORD(STACK[0x8B4]) = 0;
      LOWORD(STACK[0x8B8]) = 575;
      if ((v77 + 67) >= 0x44u)
      {
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v78] == 255) {
          LODWORD(STACK[0x8B4]) = -1;
        }
        else {
          LOWORD(STACK[0x8B8]) = BlueFin::GlSignalId::s_ausGnss2signalId[v78]
        }
                               + v77
                               - BlueFin::GlSvId::s_aucGnss2minSvId[v78];
      }
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v79, (const BlueFin::GlSignalId *)&STACK[0x8B0], 0, 0);
      if (!MeMeas)
      {
        long long v81 = *(BlueFin::GlPeMsmtMgr **)(v58 + 32);
        uint64_t v82 = a21;
        LOBYTE(STACK[0x8B0]) = a21;
        LODWORD(STACK[0x8B4]) = 3;
        LOWORD(STACK[0x8B8]) = 575;
        if ((v82 + 67) >= 0x44u)
        {
          uint64_t v83 = BlueFin::GlSvId::s_aucSvId2gnss[v82];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v83 + 21] == 255) {
            LODWORD(STACK[0x8B4]) = -1;
          }
          else {
            LOWORD(STACK[0x8B8]) = BlueFin::GlSignalId::s_ausGnss2signalId[v83]
          }
                                 + v82
                                 - BlueFin::GlSvId::s_aucGnss2minSvId[v83]
                                 + 3 * BlueFin::GlSvId::s_aucGnss2numSvId[v83];
        }
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v81, (const BlueFin::GlSignalId *)&STACK[0x8B0], 0, 0);
        if (!MeMeas) {
          goto LABEL_76;
        }
      }
      int v84 = *((_DWORD *)MeMeas + 3);
      if ((v84 & 0x10) == 0) {
        goto LABEL_76;
      }
      STACK[0x8B0] = 0;
      if (BlueFin::GlPeTimeManager::GetSystemConversionS(*(void *)(v58 + 24), v78, (double *)&STACK[0x8B0]) > 500.0) {
        goto LABEL_76;
      }
      double v85 = 86400.0;
      if ((v84 & 0x20) == 0)
      {
        if ((*a3 & 4) != 0) {
          goto LABEL_76;
        }
        unsigned int v86 = 0;
        int v87 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)MeMeas + 1)
                                                                                      - *((int *)MeMeas + 1)
                                                                                      + BlueFin::GlSvId::s_aucSvId2gnss[*MeMeas]];
        switch((int)v78)
        {
          case 0:
          case 3:
            if (v87 == 14) {
              unsigned int v86 = 18000;
            }
            else {
              unsigned int v86 = 604800000;
            }
            break;
          case 2:
            unsigned int v86 = 30000;
            break;
          case 4:
            if (v87 == 13)
            {
              unsigned int v86 = 18000;
            }
            else if ((a21 + 122) >= 5u && (a21 - 76) >= 5u)
            {
              unsigned int v86 = 6000;
            }
            else
            {
              unsigned int v86 = 600;
            }
            break;
          case 5:
            unsigned int v86 = 100;
            break;
          case 6:
            unsigned int v86 = 604800000;
            break;
          default:
            break;
        }
        double v85 = (double)v86 * 0.001;
      }
      if (v66 <= v85 / v76 * 1000000.0)
      {
        double v89 = v72;
        double v90 = *(double *)&v71;
        double v91 = *((double *)MeMeas + 7);
        double v92 = *(double *)&STACK[0x8B0];
        a17 = 0.0;
        HIDWORD(vars8) = 0;
        BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(*(void *)(v58 + 24), &a21, (uint64_t *)&a17, (int *)&vars8 + 1);
        double v93 = a17;
        double v94 = fmod(a17, 4294967300.0);
        if (v93 <= 4294967300.0) {
          double v94 = v93;
        }
        if (v94 < -4294967300.0) {
          double v94 = -fmod(-v94, 4294967300.0);
        }
        double v95 = v91 + v92 - floor((v91 + v92) / v85) * v85;
        unsigned int v96 = v94;
        if (v94 < 0.0) {
          unsigned int v96 = --v94;
        }
        unsigned int v97 = (HIDWORD(vars8) + 500) / 0x3E8u;
        *(double *)&unint64_t v71 = v90;
        double v98 = (double)v96 * v90;
        double v72 = v89;
        double v99 = v89 + v98 - floor((v89 + v98) / 86400000.0) * 86400000.0;
        double v100 = v95 / v85;
        double v101 = ceil(v95 / v85 + -0.5);
        if (v95 / v85 >= 0.0) {
          double v101 = 0.0;
        }
        double v102 = floor(v100 + 0.5);
        if (v100 > 0.0) {
          double v103 = v102;
        }
        else {
          double v103 = v101;
        }
        double v104 = v99 - (v99 - floor(v99 / v85) * v85);
        double v105 = v95 - v103 * v85;
        double v106 = v104 + v105;
        double v107 = vabdd_f64(v104 + v105, v99);
        double v108 = v85 * 0.5;
        double v109 = v85 + v104 + v105;
        if (v107 <= v85 * 0.5) {
          double v110 = v106;
        }
        else {
          double v110 = v109;
        }
        double v111 = (v110 - floor(v110 / 86400.0) * 86400.0) * 1000.0;
        double v112 = v111 + (double)v96 - floor((v111 + (double)v96) / 86400000.0) * 86400000.0;
        double v113 = (double)v97 + v221 * 2.0;
        if (v113 >= v108 * 1000.0) {
          double v113 = v108 * 1000.0;
        }
        double v114 = (v228 - v112) / 86400000.0;
        double v76 = 3.0;
        if (v114 <= 0.0)
        {
          double v115 = 0.0;
          double v66 = v222;
          a5 = v223;
          if (v114 < 0.0) {
            double v115 = ceil(v114 + -0.5);
          }
        }
        else
        {
          double v115 = floor(v114 + 0.5);
          double v66 = v222;
          a5 = v223;
        }
        double v116 = fabs(v228 - v112 + v115 * -86400000.0);
        uint64_t v117 = 1 << v75;
        if (v116 >= v113) {
          int v118 = 0;
        }
        else {
          int v118 = 1 << v75;
        }
        if (v116 < v113) {
          LODWORD(v117) = 0;
        }
        unsigned __int8 v119 = a21;
        int v120 = &a26;
        if ((v84 & 0x20) != 0) {
          int v120 = &a22;
        }
        *(_DWORD *)&(*v120)[((unint64_t)a21 >> 3) & 0x1C] |= 1 << a21;
        v73 |= v118;
        v74 |= v117;
        *((unsigned char *)&STACK[0x880] + v75) = v119;
        *((double *)&STACK[0x7F0] + v75) = v111;
        *((_DWORD *)&STACK[0x7A0] + v75) = v97;
        *((double *)&a56 + v75++) = v112;
        if (v75 == 18)
        {
          int v75 = 18;
          break;
        }
      }
LABEL_76:
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
    }
    while (BYTE1(a36) != a36);
  }
  unsigned int v121 = 0;
  double v122 = &a26[4 * a27 - 4];
  do
  {
    if (*(_DWORD *)v122)
    {
      unsigned int v123 = *(_DWORD *)v122 - (((*(_DWORD *)v122 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v122 >> 2) & 0x9249249));
      unsigned int v121 = ((v123 + (v123 >> 3)) & 0xC71C71C7) + v121 - 63 * (((v123 + (v123 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v122 -= 4;
  }
  while (v122 >= a26);
  unsigned int v124 = 0;
  double v125 = &a22[4 * a23 - 4];
  do
  {
    if (*(_DWORD *)v125)
    {
      unsigned int v126 = *(_DWORD *)v125 - (((*(_DWORD *)v125 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v125 >> 2) & 0x9249249));
      unsigned int v124 = ((v126 + (v126 >> 3)) & 0xC71C71C7) + v124 - 63 * (((v126 + (v126 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v125 -= 4;
  }
  while (v125 >= a22);
  int v127 = v124 + v121;
  unsigned int v128 = v73 - (((v73 >> 1) & 0x5B6DB6DB) + ((v73 >> 2) & 0x9249249));
  unsigned int v129 = ((v128 + (v128 >> 3)) & 0xC71C71C7) % 0x3F;
  unsigned int v130 = v74 - (((v74 >> 1) & 0x5B6DB6DB) + ((v74 >> 2) & 0x9249249));
  signed int v131 = ((v130 + (v130 >> 3)) & 0xC71C71C7) % 0x3F;
  if (v131 + v129 != v127)
  {
    DeviceFaultNotify("glpe_coarsetime.cpp", 482, "SetDtsFromTow", (char)"otAmbiguousTowSvId.Cnt() + otUnambiguousTowSvId.Cnt() == otValidTowMeas.Cnt() + otCoarseErrorMeas.Cnt()");
    int v219 = 482;
    goto LABEL_245;
  }
  BOOL v132 = (unsigned __int16)v131 >= 5u && v75 - 1 <= v131;
  if (v132)
  {
    DWORD2(a36) = v73;
    LODWORD(a36) = 1;
    DWORD1(a36) = v73;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
    while (BYTE1(a36) != a36)
    {
      int v134 = *((unsigned __int8 *)&STACK[0x880] + SWORD1(a36));
      BlueFin::GlSetBase::Remove((uint64_t)&a26, v134);
      BlueFin::GlSetBase::Remove((uint64_t)&a22, v134);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
    }
  }
  else
  {
    DWORD2(a36) = v74;
    LODWORD(a36) = 1;
    DWORD1(a36) = v74;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
    while (BYTE1(a36) != a36)
    {
      int v133 = *((unsigned __int8 *)&STACK[0x880] + SWORD1(a36));
      BlueFin::GlSetBase::Remove((uint64_t)&a26, v133);
      BlueFin::GlSetBase::Remove((uint64_t)&a22, v133);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
    }
    unsigned int v74 = v73;
  }
  unsigned int v135 = 0;
  int v136 = &a26[4 * a27 - 4];
  do
  {
    if (*(_DWORD *)v136)
    {
      unsigned int v137 = *(_DWORD *)v136 - (((*(_DWORD *)v136 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v136 >> 2) & 0x9249249));
      unsigned int v135 = ((v137 + (v137 >> 3)) & 0xC71C71C7) + v135 - 63 * (((v137 + (v137 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v136 -= 4;
  }
  while (v136 >= a26);
  unsigned int v138 = 0;
  unsigned int v139 = a22;
  BOOL v140 = &a22[4 * a23 - 4];
  do
  {
    if (*(_DWORD *)v140)
    {
      unsigned int v141 = *(_DWORD *)v140 - (((*(_DWORD *)v140 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v140 >> 2) & 0x9249249));
      unsigned int v138 = ((v141 + (v141 >> 3)) & 0xC71C71C7) + v138 - 63 * (((v141 + (v141 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v140 -= 4;
  }
  while (v140 >= a22);
  unsigned int v142 = v138 + v135;
  unsigned int v143 = v74 - (((v74 >> 1) & 0x5B6DB6DB) + ((v74 >> 2) & 0x9249249));
  if (((v143 + (v143 >> 3)) & 0xC71C71C7) % 0x3F != v142)
  {
    DeviceFaultNotify("glpe_coarsetime.cpp", 517, "SetDtsFromTow", (char)"otAmbiguousTowSvId.Cnt() + otUnambiguousTowSvId.Cnt() == otValidTowMeas.Cnt() + otCoarseErrorMeas.Cnt()");
    int v219 = 517;
LABEL_245:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_coarsetime.cpp", v219, "otAmbiguousTowSvId.Cnt() + otUnambiguousTowSvId.Cnt() == otValidTowMeas.Cnt() + otCoarseErrorMeas.Cnt()");
  }
  if (!v74) {
    return;
  }
  DWORD2(a36) = v74;
  LODWORD(a36) = 1;
  DWORD1(a36) = v74;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
  double v144 = 0.0;
  double v145 = 0.0;
  if (BYTE1(a36) != a36)
  {
    char v146 = 1;
    do
    {
      if (v146) {
        double v145 = *((double *)&a56 + SWORD1(a36));
      }
      double v147 = *((double *)&a56 + SWORD1(a36)) - v145;
      double v148 = v147 / 86400000.0;
      if (v147 / 86400000.0 <= 0.0)
      {
        double v149 = 0.0;
        if (v147 / 86400000.0 < 0.0) {
          double v149 = ceil(v148 + -0.5);
        }
      }
      else
      {
        double v149 = floor(v148 + 0.5);
      }
      double v144 = v144 + v147 + v149 * -86400000.0;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
      char v146 = 0;
    }
    while (BYTE1(a36) != a36);
  }
  DWORD2(a36) = v74;
  LODWORD(a36) = 1;
  DWORD1(a36) = v74;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
  if (BYTE1(a36) != a36)
  {
    double v150 = v145 + v144 / (double)v142;
    double v145 = v150 - floor(v150 / 86400000.0) * 86400000.0;
    do
    {
      LODWORD(v150) = *((_DWORD *)&STACK[0x7A0] + SWORD1(a36));
      if (vabdd_f64(v145, *((double *)&a56 + SWORD1(a36))) >= (double)*(unint64_t *)&v150)
      {
        int v151 = *((unsigned __int8 *)&STACK[0x880] + SWORD1(a36));
        v74 &= ~(1 << SBYTE2(a36));
        BlueFin::GlSetBase::Remove((uint64_t)&a26, v151);
        BlueFin::GlSetBase::Remove((uint64_t)&a22, v151);
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a36);
    }
    while (BYTE1(a36) != a36);
    unsigned int v139 = a22;
  }
  if (!*(_DWORD *)v139)
  {
    if (a23 >= 2uLL)
    {
      if (*((_DWORD *)v139 + 1)) {
        goto LABEL_121;
      }
      uint64_t v171 = 2;
      while (a23 != v171)
      {
        if (*(_DWORD *)&v139[4 * v171++])
        {
          if (v171 - 1 < (unint64_t)a23) {
            goto LABEL_121;
          }
          break;
        }
      }
    }
    unsigned int v173 = 0;
    __int16 v174 = &a26[4 * a27 - 4];
    do
    {
      if (*(_DWORD *)v174)
      {
        unsigned int v175 = *(_DWORD *)v174 - (((*(_DWORD *)v174 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v174 >> 2) & 0x9249249));
        unsigned int v173 = ((v175 + (v175 >> 3)) & 0xC71C71C7) + v173 - 63 * (((v175 + (v175 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      v174 -= 4;
    }
    while (v174 >= a26);
    if ((v173 & 0xFE) == 0) {
      return;
    }
  }
LABEL_121:
  uint64_t v152 = 0;
  a52 = 0u;
  a53 = 0u;
  a50 = 0u;
  a51 = 0u;
  a48 = 0u;
  a49 = 0u;
  a46 = 0u;
  a47 = 0u;
  a44 = 0u;
  a45 = 0u;
  a42 = 0u;
  a43 = 0u;
  a40 = 0u;
  a41 = 0u;
  a38 = 0u;
  a39 = 0u;
  a36 = 0u;
  a37 = 0u;
  do
  {
    int v153 = (char *)&a36 + v152;
    *int v153 = 0;
    *((void *)v153 + 1) = 0;
    v152 += 16;
  }
  while (v152 != 288);
  if ((*a3 & 1) == 0
    || (LODWORD(v145) = *(_DWORD *)(*(void *)(v58 + 40) + 324),
        LODWORD(STACK[0x8B8]) = v74,
        LODWORD(STACK[0x8B0]) = 1,
        LODWORD(STACK[0x8B4]) = v74,
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x8B0]),
        LOBYTE(STACK[0x8B1]) == LOBYTE(STACK[0x8B0])))
  {
LABEL_135:
    LODWORD(STACK[0x8B8]) = v74;
    LODWORD(STACK[0x8B0]) = 1;
    LODWORD(STACK[0x8B4]) = v74;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x8B0]);
    if (LOBYTE(STACK[0x8B1]) == LOBYTE(STACK[0x8B0])) {
      return;
    }
    unsigned __int16 v154 = 0;
    do
    {
      uint64_t v163 = SLOWORD(STACK[0x8B2]);
      double v164 = v226 + v228 - a5 - *((double *)&a56 + v163);
      double v165 = v164 / 86400000.0;
      if (v164 / 86400000.0 <= 0.0)
      {
        double v166 = 0.0;
        if (v164 / 86400000.0 < 0.0) {
          double v166 = ceil(v165 + -0.5);
        }
      }
      else
      {
        double v166 = floor(v165 + 0.5);
      }
      char v167 = *((unsigned char *)&STACK[0x880] + v163);
      int v168 = (double *)(&a36 + v154);
      v168[1] = v164 + v166 * -86400000.0;
      *(unsigned char *)int v168 = v167;
      ++v154;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x8B0]);
    }
    while (LOBYTE(STACK[0x8B1]) != LOBYTE(STACK[0x8B0]));
    if (!v154) {
      return;
    }
    int v169 = 0;
    unsigned int v170 = 12000;
  }
  else
  {
    unsigned __int16 v154 = 0;
    double v155 = (v224 - (double)*(unint64_t *)&v145) * 0.001;
    do
    {
      uint64_t v156 = SLOWORD(STACK[0x8B2]);
      char v157 = *((unsigned char *)&STACK[0x880] + v156);
      LOBYTE(a17) = v157;
      AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(*(void *)(v58 + 40), (unsigned __int8 *)&a17);
      if (AidBySvId && *((_DWORD *)AidBySvId + 3) != 4)
      {
        double v159 = v226
             + v228
             - a5
             - *((double *)&STACK[0x7F0] + v156)
             + (*((double *)AidBySvId + 4) + *((float *)AidBySvId + 11) * v155) * 1000.0;
        double v160 = v159 / 86400000.0;
        if (v159 / 86400000.0 <= 0.0)
        {
          double v161 = 0.0;
          if (v159 / 86400000.0 < 0.0) {
            double v161 = ceil(v160 + -0.5);
          }
        }
        else
        {
          double v161 = floor(v160 + 0.5);
        }
        int v162 = (double *)(&a36 + v154);
        v162[1] = v159 + v161 * -86400000.0;
        *(unsigned char *)int v162 = v157;
        if (++v154 == 18)
        {
          unsigned __int16 v154 = 18;
          goto LABEL_157;
        }
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x8B0]);
    }
    while (LOBYTE(STACK[0x8B1]) != LOBYTE(STACK[0x8B0]));
    if (!v154) {
      goto LABEL_135;
    }
LABEL_157:
    double v176 = ceil(a4 * 1000000.0 / 299792458.0);
    double v177 = fmod(v176, 4294967300.0);
    if (v176 <= 4294967300.0) {
      double v177 = v176;
    }
    if (v177 < -4294967300.0) {
      double v177 = -fmod(-v177, 4294967300.0);
    }
    if (v177 < 0.0) {
      unsigned int v178 = --v177;
    }
    else {
      unsigned int v178 = v177;
    }
    double v179 = ceil(a6 * 1000.0);
    double v180 = fmod(v179, 4294967300.0);
    if (v179 <= 4294967300.0) {
      double v180 = v179;
    }
    if (v180 < -4294967300.0) {
      double v180 = -fmod(-v180, 4294967300.0);
    }
    if (v180 < 0.0) {
      unsigned int v181 = --v180;
    }
    else {
      unsigned int v181 = v180;
    }
    unsigned int v170 = v181 + v178;
    int v169 = 1;
  }
  int v182 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 & 2) != 0) {
    int v183 = 0;
  }
  else {
    int v183 = v169;
  }
  if (v154 == 1)
  {
    HIDWORD(v184) = HIDWORD(a36);
    if (*((double *)&a36 + 1) <= 0.0)
    {
      if (*((double *)&a36 + 1) >= 0.0)
      {
        int v209 = 0;
        goto LABEL_215;
      }
      double v185 = -0.5;
    }
    else
    {
      double v185 = 0.5;
    }
    double v184 = *((double *)&a36 + 1) + v185;
    int v209 = (int)(*((double *)&a36 + 1) + v185);
LABEL_215:
    if ((v182 & 3) == 1)
    {
      LODWORD(v184) = *(_DWORD *)(v58 + 4);
      BOOL v208 = sqrt((double)*(unint64_t *)&v184 * 0.001) * 36.0 >= (double)((v209 - *(_DWORD *)v58)
                                                                               * (v209 - *(_DWORD *)v58));
LABEL_223:
      BOOL v210 = (v182 & 8) == 0;
      if ((v182 & 8) == 0 && v208)
      {
LABEL_233:
        unsigned int v213 = 0;
        *(_DWORD *)uint64_t v58 = v209;
        *(_DWORD *)(v58 + 4) = v170;
        *(_DWORD *)(v58 + 8) = v209;
        *(_DWORD *)(v58 + 12) = v170;
        *(_DWORD *)(v58 + 16) = v225;
        double v214 = &a26[4 * a27 - 4];
        do
        {
          if (*(_DWORD *)v214)
          {
            unsigned int v215 = *(_DWORD *)v214 - (((*(_DWORD *)v214 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v214 >> 2) & 0x9249249));
            unsigned int v213 = ((v215 + (v215 >> 3)) & 0xC71C71C7) + v213 - 63 * (((v215 + (v215 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          v214 -= 4;
        }
        while (v214 >= a26);
        unsigned int v216 = 0;
        *(unsigned char *)(v58 + 20) = v213;
        int v217 = &a22[4 * a23 - 4];
        do
        {
          if (*(_DWORD *)v217)
          {
            unsigned int v218 = *(_DWORD *)v217 - (((*(_DWORD *)v217 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v217 >> 2) & 0x9249249));
            unsigned int v216 = ((v218 + (v218 >> 3)) & 0xC71C71C7) + v216 - 63 * (((v218 + (v218 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          v217 -= 4;
        }
        while (v217 >= a22);
        *(unsigned char *)(v58 + 21) = v216;
        return;
      }
      goto LABEL_225;
    }
    goto LABEL_222;
  }
  int v227 = v183;
  char v229 = *(_DWORD *)a3;
  unsigned int v230 = v170;
  uint64_t v186 = 1;
  uint64_t vars0a = v58;
  do
  {
    uint64_t v187 = (double *)(&a36 + v186);
    int v188 = v186 - 1;
    double v189 = v187[1];
    if (*((double *)&a36 + 2 * v186 - 1) > v189)
    {
      if (v186 != 1)
      {
        int v190 = 0;
        do
        {
          int v191 = v188 + v190;
          if (v188 + v190 < 0 != __OFADD__(v188, v190)) {
            ++v191;
          }
          int v192 = v191 >> 1;
          if (*((double *)&a36 + 2 * v192 + 1) <= v189) {
            int v190 = v192 + 1;
          }
          else {
            int v188 = v192;
          }
        }
        while (v190 != v188);
      }
      *(_OWORD *)&STACK[0x8B0] = *(_OWORD *)v187;
      long long v193 = &a36 + v188;
      memmove(&a36 + v188 + 1, v193, 16 * ((int)v186 - v188));
      *long long v193 = *(_OWORD *)&STACK[0x8B0];
      uint64_t v58 = vars0a;
    }
    ++v186;
  }
  while (v186 != v154);
  unsigned int v170 = v230;
  LOBYTE(v182) = v229;
  if (v154 >= 2u)
  {
    int v194 = 0;
    double v195 = 0.1;
    if (!v227) {
      double v195 = 13.0;
    }
    int v196 = v154 - 1;
    do
    {
      int v197 = (double *)(&a36 + (v154 >> 1));
      double v198 = v197[1];
      if ((v154 & 1) == 0) {
        double v198 = (v198 + *(v197 - 1)) * 0.5;
      }
      uint64_t v199 = v154 - 1;
      unint64_t v200 = (unint64_t)(&a36 + v199);
      if (vabdd_f64(*(double *)(v200 + 8), v198) <= v195)
      {
        if (vabdd_f64(v198, *((double *)&a36 + 1)) <= v195) {
          break;
        }
        if (v154 >= 2u)
        {
          uint64_t v201 = (void *)((unint64_t)&a36 | 0x18);
          uint64_t v202 = 1;
          do
          {
            if (v202 != (v202 - 1))
            {
              unsigned int v203 = &a36 + (v202 - 1);
              *(unsigned char *)unsigned int v203 = *((unsigned char *)v201 - 8);
              *((void *)v203 + 1) = *v201;
            }
            BOOL v132 = v154 - 1 <= v202++;
            v201 += 2;
          }
          while (!v132);
        }
      }
      *((unsigned char *)&a36 + 16 * v199) = 0;
      *(void *)(v200 | 8) = 0;
      --v154;
      ++v194;
    }
    while (v196 > (char)v194);
    if (v154 >= 2u)
    {
      int v204 = 0;
      double v205 = 0.0;
      do
        double v205 = v205 + *((double *)&a36 + 2 * v204++ + 1);
      while (v154 > v204);
      double v206 = v205 / (double)v154;
      if (v206 <= 0.0)
      {
        if (v206 >= 0.0)
        {
          int v209 = 0;
          goto LABEL_222;
        }
        double v207 = -0.5;
      }
      else
      {
        double v207 = 0.5;
      }
      int v209 = (int)(v206 + v207);
LABEL_222:
      BOOL v208 = 1;
      goto LABEL_223;
    }
  }
  BOOL v208 = 0;
  int v209 = 0;
  BOOL v210 = (v229 & 8) == 0;
LABEL_225:
  int v211 = v209 - *(_DWORD *)v58;
  if (v211 < 0) {
    int v211 = *(_DWORD *)v58 - v209;
  }
  unsigned int v212 = v170 / 0x3E8;
  if (v170 / 0x3E8 <= 0xA) {
    unsigned int v212 = 10;
  }
  if (!v210 && v208 && *(_DWORD *)(v58 + 12) == -1 && v211 > v212) {
    goto LABEL_233;
  }
}

uint64_t BlueFin::GlUtcTime::operator-(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  char v5 = a5 | a4;
  if (a5 | a4)
  {
    if (a3 > a5 || a3 == a5 && a2 >= a4)
    {
      char v5 = 0;
      BOOL v6 = a2 >= a4;
      a2 -= a4;
      int v7 = !v6;
      a3 = a3 - a5 - v7;
    }
    else
    {
      BOOL v6 = a4 >= a2;
      a2 = a4 - a2;
      int v8 = !v6;
      a3 = a5 - a3 - v8;
      char v5 = 1;
    }
  }
  *(_DWORD *)uint64_t result = a2;
  *(_DWORD *)(result + 4) = a3;
  if (!(a3 | a2)) {
    char v5 = 0;
  }
  *(unsigned char *)(result + 8) = v5;
  return result;
}

void BlueFin::GlPeComputeZRH::UpdateAtmosDelays(uint64_t a1, unsigned __int8 *a2, double *a3, uint64_t a4, double a5, double a6, float a7)
{
  float v8 = *(float *)&a6;
  double v11 = a5;
  int v13 = (BlueFin::GlPeCachedAtmosDelays *)(a1 + 1568);
  unsigned int v14 = *(unsigned __int8 *)(a1 + 1568);
  int v15 = *a2;
  if (v14)
  {
    int v16 = 0;
    uint64_t v17 = a1 + 1572;
    while (*(unsigned __int8 *)(v17 + 8) != v15)
    {
      ++v16;
      v17 += 24;
      if (v14 <= v16)
      {
        if (v14 != 112) {
          goto LABEL_7;
        }
        unsigned int v14 = BlueFin::GlPeCachedAtmosDelays::Oldest(v13, a5, a6);
        goto LABEL_8;
      }
    }
    unsigned int v20 = *(_DWORD *)(v17 + 4);
    BOOL v21 = v20 > 0xA;
    int v22 = (1 << v20) & 0x580;
    if (v21 || v22 == 0) {
      goto LABEL_9;
    }
    LODWORD(a5) = *(_DWORD *)v17;
    if (v11 - (double)*(unint64_t *)&a5 > 300000.0 && *(_DWORD *)(a1 + 8) <= 1u) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_7:
  *(unsigned char *)int v13 = v14 + 1;
LABEL_8:
  uint64_t v17 = a1 + 24 * v14 + 1572;
LABEL_9:
  *(unsigned char *)(v17 + 8) = v15;
  unsigned int v18 = v11;
  *(_DWORD *)(v17 + 20) = 0;
  *(_DWORD *)uint64_t v17 = v11;
  if (BlueFin::GlPeComputeZRH::CalcIonoDelay(a1, (long long *)a3, v17, v11, v8, a7))
  {
    if (*(_DWORD *)v17) {
      float v19 = (float)(*(float *)(v17 + 20) * (float)(v18 - *(_DWORD *)v17)) * 0.001;
    }
    else {
      float v19 = 0.0;
    }
    int v24 = *(_DWORD *)(v17 + 4);
    if (v24) {
      double v25 = (float)(v19 + *(float *)(v17 + 16));
    }
    else {
      double v25 = 0.0;
    }
    double v26 = *(double *)(a4 + 16) + *(double *)(a4 + 40) * 300.0;
    float64x2_t v45 = vmlaq_f64(*(float64x2_t *)a4, (float64x2_t)vdupq_n_s64(0x4072C00000000000uLL), *(float64x2_t *)(a4 + 24));
    double v46 = v26;
    uint64_t v44 = 0;
    BlueFin::lla2ecef(a3, (uint64_t)v43);
    (*(void (**)(void, float64x2_t *, unsigned char *, double *, void, void, char *, uint64_t *))(**(void **)(a1 + 4264) + 80))(*(void *)(a1 + 4264), &v45, v43, a3, 0, 0, (char *)&v44 + 4, &v44);
    BlueFin::GlPeComputeZRH::CalcIonoDelay(a1, (long long *)a3, v17, v11 + 300000.0, *((float *)&v44 + 1), *(float *)&v44);
    if (*(_DWORD *)v17) {
      float v27 = (float)(*(float *)(v17 + 20) * (float)(v18 - *(_DWORD *)v17)) * 0.001;
    }
    else {
      float v27 = 0.0;
    }
    int v28 = *(_DWORD *)(v17 + 4);
    if (!v28)
    {
      double v29 = 0.0;
      switch(v24)
      {
        case 7:
          goto LABEL_33;
        case 8:
          goto LABEL_36;
        case 9:
          goto LABEL_28;
        case 10:
          goto LABEL_30;
        default:
          goto LABEL_46;
      }
    }
    double v29 = (float)(v27 + *(float *)(v17 + 16));
    if (v24 == 9)
    {
LABEL_28:
      int v30 = 9;
LABEL_37:
      *(_DWORD *)(v17 + 4) = v30;
      float v31 = v25;
      *(float *)(v17 + 16) = v31;
      goto LABEL_38;
    }
    if (v28 != 9)
    {
      if (v24 == 7)
      {
LABEL_33:
        int v30 = 7;
        goto LABEL_37;
      }
      if (v28 != 7)
      {
        if (v24 == 8)
        {
LABEL_36:
          int v30 = 8;
        }
        else
        {
          if (v28 == 8) {
            goto LABEL_38;
          }
          if (v24 != 10)
          {
            if (v28 != 10)
            {
LABEL_46:
              switch(v24)
              {
                case 2:
                  float v34 = v25;
                  *(float *)(v17 + 16) = v34;
                  int v35 = 2;
                  goto LABEL_52;
                case 3:
                  float v36 = v25;
                  *(float *)(v17 + 16) = v36;
                  int v35 = 3;
                  goto LABEL_52;
                case 4:
                  float v37 = v25;
                  *(float *)(v17 + 16) = v37;
                  int v35 = 4;
                  goto LABEL_52;
                case 5:
                  float v38 = v25;
                  *(float *)(v17 + 16) = v38;
                  int v35 = 5;
                  goto LABEL_52;
                case 6:
                  float v39 = v25;
                  *(float *)(v17 + 16) = v39;
                  int v35 = 6;
LABEL_52:
                  *(_DWORD *)(v17 + 4) = v35;
                  goto LABEL_38;
                default:
                  uint64_t v40 = "0";
                  DeviceFaultNotify("glpe_atmosdelays.h", 193, "SetIonoDelay", (char)"0");
                  uint64_t v41 = "glpe_atmosdelays.h";
                  int v42 = 193;
                  goto LABEL_54;
              }
            }
            goto LABEL_38;
          }
LABEL_30:
          int v30 = 10;
        }
        goto LABEL_37;
      }
    }
LABEL_38:
    if (v28 == v24)
    {
      float v32 = (v29 - v25) / 300.0;
      *(float *)(v17 + 20) = v32;
      *(_DWORD *)uint64_t v17 = v18;
    }
    ++*(_DWORD *)(a1 + 8);
  }
LABEL_41:
  BlueFin::GlPeUnbTropoModel::getTropoDelayInMeters((BlueFin::GlPeUnbTropoModel *)(a1 + 4348), a7);
  *(_DWORD *)(v17 + 12) = v33;
  *(unsigned char *)(v17 + 9) = 1;
  if (!*(_DWORD *)(v17 + 4))
  {
    uint64_t v40 = "potCacheSlot->otAtmosDelays.HaveTropoDelay() && potCacheSlot->otAtmosDelays.HaveIonoDelay()";
    DeviceFaultNotify("glpe_computezrh.cpp", 2054, "UpdateAtmosDelays", (char)"potCacheSlot->otAtmosDelays.HaveTropoDelay() && potCacheSlot->otAtmosDelays.HaveIonoDelay()");
    uint64_t v41 = "glpe_computezrh.cpp";
    int v42 = 2054;
LABEL_54:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v41, v42, v40);
  }
}

unsigned __int8 *BlueFin::GlPeComputeZRH::UpdateSatPosCache(BlueFin::GlPeComputeZRH *this, const BlueFin::GlSignalIdSet *a2, int a3, double a4)
{
  uint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(a2);
  if (result)
  {
    unsigned int v9 = *(_DWORD *)(*((void *)this + 536) + 2568);
    double v10 = v9 <= 0xFF9222FE ? (double)v9 : (double)(int)v9;
    long long v30 = 0u;
    memset(v31, 0, sizeof(v31));
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    memset(v24, 0, sizeof(v24));
    double v11 = (double)a3;
    uint64_t v32 = 0x4008000000000000;
    double v25 = a4;
    double v26 = (double)a3 * 0.001;
    BOOL v21 = v23;
    char v22 = 8;
    memset(v23, 0, 32);
    unsigned __int8 v16 = *((unsigned char *)a2 + 8);
    memcpy(v20, *(const void **)a2, 4 * v16);
    unsigned __int16 v18 = 0;
    unsigned __int8 v17 = 0;
    int v19 = v20[0];
    for (uint64_t result = BlueFin::GlSetIterator::operator++(&v16); v17 != v16; uint64_t result = BlueFin::GlSetIterator::operator++(&v16))
    {
      if (v18 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      unsigned __int8 v15 = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v18);
      if ((((unint64_t)*(unsigned int *)&v21[((unint64_t)v15 >> 3) & 0x1C] >> (v15 & 0x1F)) & 1) == 0)
      {
        double v14 = 0.0;
        memset(v12, 0, sizeof(v12));
        int v13 = 0;
        if (!BlueFin::GlPeComputeZRH::GetSatPosWithFullPr((uint64_t)this, &v15, (uint64_t)v24, 0, 1, (uint64_t)v12, 0, (__n128)COERCE_UNSIGNED_INT64(v10 - v11)))
        {
          double v14 = v10 - v11;
          *(_DWORD *)&v21[((unint64_t)v15 >> 3) & 0x1C] |= 1 << v15;
          BlueFin::GlPeSatPosCache::UpdateSatPosCache((uint64_t)this + 24, &v15, (uint64_t)v12);
        }
      }
    }
  }
  return result;
}

void BlueFin::GlPeComputeZRH::~GlPeComputeZRH(BlueFin::GlPeComputeZRH *this)
{
}

unsigned __int8 *BlueFin::GlPeComputeZRH::GetAzEl(uint64_t a1, unsigned __int8 *a2)
{
  return BlueFin::GlPeElAzCache::Get((unsigned __int8 *)(a1 + 296), a2);
}

double BlueFin::GlPeComputeZRH::GetInterSystemHwBiasM(uint64_t a1, unsigned __int8 *a2)
{
  return BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(*(void *)(a1 + 4328), a2, 0, 0);
}

BlueFin::GlUtcTime *BlueFin::GlUtcTime::GlUtcTime(BlueFin::GlUtcTime *this, unsigned int a2, unsigned int a3, unsigned int a4, long double a5)
{
  __int16 v6 = a4;
  *(void *)this = &unk_270EC23C8;
  *((void *)this + 1) = 0;
  if (a2 <= 0x7BC && (a2 != 1980 || a3 <= 1 && (a3 != 1 || a4 <= 5)))
  {
    unsigned __int16 v18 = "usYear > 1980 || (usYear == 1980 && (ucMonth > 1 || (ucMonth == 1 && ucDay > 5)))";
    DeviceFaultNotify("glpe_datetime.h", 1034, "GlUtcTime", (char)"usYear > 1980 || (usYear == 1980 && (ucMonth > 1 || (ucMonth == 1 && ucDay > 5)))");
    int v19 = "glpe_datetime.h";
    int v20 = 1034;
LABEL_22:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v19, v20, v18);
  }
  double v10 = fmod(a5, 1.0);
  if (v10 < 0.0 || v10 >= 1.0)
  {
    unsigned __int16 v18 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v19 = "glpe_timepoint.h";
    int v20 = 173;
    goto LABEL_22;
  }
  double v12 = v10 * 4294967300.0 + 0.5;
  unsigned int v13 = v12;
  if (v12 >= 4294967300.0) {
    unsigned int v13 = -1;
  }
  int v14 = a2 - 1977;
  if ((int)(a2 - 1980) >= 0) {
    int v14 = a2 - 1980;
  }
  unsigned int v15 = a5
      + 126230400 * (v14 >> 2)
      + 86400
      * (BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * (a2 - 1980 - (v14 & 0xFFFFFFFC)) - 1 + a3]
       + (unsigned __int16)(v6 - 1))
      - 432000;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= v15
                                                           + BlueFin::GlWeekTowTime::m_ucCurrentLs)
    unsigned __int8 v16 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v16 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  *((_DWORD *)this + 2) = v13;
  *((_DWORD *)this + 3) = v15 + v16;
  *(void *)this = &unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)this);
  if (a5 >= 86400.0) {
    --*((_DWORD *)this + 3);
  }
  BlueFin::GlUtcTime::breakdownFct((uint64_t)this);
  return this;
}

BOOL BlueFin::GlPeElAzCache::Add(uint64_t a1, unsigned __int8 *a2, float a3, float a4)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 1216);
  uint64_t v6 = *(unsigned int *)(v5 + 4 * (v4 >> 5));
  if (((1 << (v4 & 0x1F)) & v6) == 0)
  {
    unsigned __int8 v7 = *(unsigned char *)(a1 + 1264);
    uint64_t v8 = a1 + 12 * v7;
    *(unsigned char *)uint64_t v8 = v4;
    *(float *)(v8 + 4) = a3;
    *(float *)(v8 + 8) = a4;
    *(_DWORD *)(v5 + 4 * (v4 >> 5)) = (1 << (v4 & 0x1F)) | v6;
    *(unsigned char *)(a1 + 1264) = v7 + 1;
    if ((v7 + 1) >= 0x65u)
    {
      DeviceFaultNotify("glpe_computezrhif.cpp", 39, "Add", (char)"m_ucNbSats < MAX_PE_SVS_MEASURED");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_computezrhif.cpp", 39, "m_ucNbSats < MAX_PE_SVS_MEASURED");
    }
  }
  return ((1 << (v4 & 0x1F)) & v6) == 0;
}

BOOL BlueFin::GlPeDEALS::ComputeDEALS(uint64_t a1, BlueFin::GlSetBase *this, uint64_t *a3, float64x2_t *a4)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (BlueFin::GlSetBase::Cnt(this) >= 0x11)
  {
    DeviceFaultNotify("glpe_deals.cpp", 60, "ComputeDEALS", (char)"otRrSignalIds.Cnt() <= DEALS_MAX_MEAS_To_PACK");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_deals.cpp", 60, "otRrSignalIds.Cnt() <= DEALS_MAX_MEAS_To_PACK");
  }
  *(unsigned char *)(a1 + 76) = 0;
  unsigned int v8 = BlueFin::GlSetBase::Cnt(this);
  BOOL result = 0;
  if (v8 >= 4)
  {
    unsigned __int8 v16 = (float32x4_t *)v17;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 0;
    *(int64x2_t *)(a1 + 48) = vdupq_n_s64(0x4082C00000000000uLL);
    *(void *)(a1 + 64) = 0x4082C00000000000;
    *(unsigned char *)(a1 + 76) = 0;
    *(_OWORD *)(a1 + 80) = xmmword_263BBA440;
    *(_DWORD *)(a1 + 40) = 0;
    double v10 = *(void **)(a1 + 96);
    *(_DWORD *)(a1 + 72) = 1142285679;
    bzero(v10, ((4 * *(unsigned __int8 *)(a1 + 104) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v14, v15, 0x13u, (const void **)this);
    BlueFin::GlPeDEALS::RunAllSubsets((BlueFin::GlPeMsmtMgr **)a1, &v16, (uint64_t)v14, a3, a4);
    if ((((char *)v16 - (char *)v17) & 0xFE0) != 0)
    {
      BlueFin::GlPeDEALS::CalcSigmas(a1, v17, this, (const float *)(((char *)v16 - (char *)v17) >> 4));
      *(unsigned char *)(a1 + 76) = 1;
      BlueFin::GlSetBase::operator=(a1 + 96, (uint64_t)this);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)this + 12);
      long long v11 = *(_OWORD *)((char *)this + 28);
      long long v12 = *(_OWORD *)((char *)this + 44);
      long long v13 = *(_OWORD *)((char *)this + 60);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)(a1 + 156) = v13;
      *(_OWORD *)(a1 + 140) = v12;
      *(_OWORD *)(a1 + 124) = v11;
    }
    return *(unsigned char *)(a1 + 76) != 0;
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeDEALS::RunAllSubsets(BlueFin::GlPeMsmtMgr **a1, float32x4_t **a2, uint64_t a3, uint64_t *a4, float64x2_t *a5)
{
  uint64_t v9 = 0;
  uint64_t v123 = *MEMORY[0x263EF8340];
  do
  {
    double v10 = &v122[v9];
    unsigned char v10[32] = 0;
    *((_DWORD *)v10 + 9) = -1;
    *((_WORD *)v10 + 20) = 575;
    v9 += 56;
  }
  while (v9 != 896);
  LODWORD(v111) = *(unsigned __int8 *)(a3 + 8);
  memcpy(&v112, *(const void **)a3, 4 * v111);
  HIDWORD(v111) = v112;
  BOOL result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v111);
  if (BYTE1(v111) != v111)
  {
    unsigned int v67 = a5;
    unsigned __int8 v12 = 0;
    float64x2_t v68 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
    do
    {
      __int16 v13 = WORD1(v111);
      if (WORD1(v111) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      int v14 = *a1;
      unsigned int v15 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v111);
      char v16 = *v15;
      int v17 = v15[1];
      LOBYTE(v80) = *v15;
      HIDWORD(v80) = v17;
      LOWORD(v81) = WORD1(v111);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v14, (const BlueFin::GlSignalId *)&v80, 0, 0);
      if (MeMeas)
      {
        int v19 = &v122[56 * (char)v12];
        *((void *)v19 + 1) = 0;
        *(void *)(v19 + 20) = 0xFFFFFFFF00000000;
        *((_DWORD *)v19 + 7) = -1;
        v19[50] = 0;
        *((_DWORD *)v19 + 11) = 2;
        *((_DWORD *)v19 + 4) = *(_DWORD *)*a1;
        unsigned char v19[32] = v16;
        *((_DWORD *)v19 + 9) = v17;
        *((_WORD *)v19 + 20) = v13;
        v20.f32[0] = -*((float *)MeMeas + 24);
        v20.i32[1] = *((_DWORD *)MeMeas + 25);
        *(float64x2_t *)int v19 = vmulq_f64(vcvtq_f64_f32(v20), v68);
        *((_WORD *)v19 + 24) = 1;
        ++v12;
      }
      BOOL result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v111);
    }
    while (BYTE1(v111) != v111 && (char)v12 <= 15);
    if ((char)v12 >= 3)
    {
      v116[1] = 0x400000004;
      float64x2_t v22 = v67[1];
      float64x2_t v118 = *v67;
      uint64_t v117 = 0;
      v116[0] = &v117;
      float64x2_t v119 = v22;
      uint64_t v23 = (char *)&v113 + 8;
      long long v113 = xmmword_263BBA450;
      double v111 = &v114;
      double v112 = &v115;
      uint64_t v115 = 0;
      for (uint64_t i = 1; i != 17; ++i)
      {
        v112[i] = (uint64_t)v23;
        v23 += 32;
      }
      v108[0] = v109;
      v108[1] = 0x1000000000;
      memset(v109, 0, sizeof(v109));
      uint64_t v110 = 0;
      v105[0] = v106;
      v105[1] = 0x1000000000;
      memset(v106, 0, sizeof(v106));
      uint64_t v107 = 0;
      v102[0] = v103;
      v102[1] = 0x1000000000;
      memset(v103, 0, sizeof(v103));
      uint64_t v104 = 0;
      int v25 = a4[3] & 1 | 0x4C0;
      uint64_t v26 = *a4;
      uint64_t v27 = a4[1];
      int v28 = *((_DWORD *)a4 + 4);
      v93[0] = v116;
      v93[1] = v26;
      v93[2] = v27;
      int v94 = v28;
      int v95 = 2;
      int v96 = v25;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0x4008000000000000;
      v89[0] = v105;
      v89[1] = v102;
      v89[2] = &v111;
      v89[3] = v108;
      long long v90 = 0u;
      long long v91 = 0u;
      uint64_t v92 = 0;
      unsigned int v86 = v88;
      char v87 = 4;
      v88[1] = 0;
      v88[0] = 0;
      BlueFin::GlSetBase::SetAllLower(&v86, v12);
      BOOL result = (unsigned __int8 *)(*(uint64_t (**)(BlueFin::GlPeMsmtMgr *, void *, void *, unsigned char *, void **))(*(void *)a1[1] + 16))(a1[1], v93, v89, v122, &v86);
      if (!result)
      {
        int v29 = *((_DWORD *)a4 + 6);
        if ((v29 & 0x200000) != 0)
        {
          BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)v105, (BlueFin::SKFVector *)v102, (BlueFin::SKFVector *)v108, (BlueFin::SKFVector *)&v111, (BlueFin::BigMatrix *)2, 0.0225);
          BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)v105, (BlueFin::SKFVector *)v102, (BlueFin::SKFVector *)v108, (BlueFin::SKFVector *)&v111, (BlueFin::BigMatrix *)1, 0.0225);
          int v29 = *((_DWORD *)a4 + 6);
        }
        int v30 = v113;
        if ((v29 & 8) == 0)
        {
          BOOL v31 = (v29 & 4) == 0 && v12 > 5u;
          if (!v31 && (int)v113 <= 20)
          {
            BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)v105, (BlueFin::SKFVector *)v102, (BlueFin::SKFVector *)v108, (BlueFin::SKFVector *)&v111, (BlueFin::BigMatrix *)3, 0.0225);
            int v29 = *((_DWORD *)a4 + 6);
            int v30 = v113;
          }
        }
        if ((v29 & 0xA) == 2 && v30 <= 20)
        {
          BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)v105, (BlueFin::SKFVector *)v102, (BlueFin::SKFVector *)v108, (BlueFin::SKFVector *)&v111, (BlueFin::BigMatrix *)4, v67[2].f64[0]);
          int v30 = v113;
          int v29 = *((_DWORD *)a4 + 6);
        }
        int v32 = DWORD1(v113);
        BlueFin::SKFVectorDim<16>::SKFVectorDim((uint64_t)v85, v30);
        int v33 = (char *)&v82 + 8;
        long long v82 = xmmword_263BBA460;
        uint64_t v80 = &v83;
        long long v81 = &v84;
        uint64_t v84 = 0;
        for (uint64_t j = 1; j != 5; ++j)
        {
          v81[j] = (uint64_t)v33;
          v33 += 128;
        }
        BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v80, v32, v30);
        if (v30 >= 1)
        {
          uint64_t v35 = v108[0];
          float v36 = v112;
          uint64_t v37 = v105[0];
          uint64_t v38 = v102[0];
          uint64_t v39 = v85[0];
          uint64_t v40 = v81 + 1;
          uint64_t v41 = 1;
          do
          {
            double v42 = 1.0;
            if ((v29 & 0x10) != 0) {
              double v42 = 1.0 / *(double *)(v35 + 8 * v41);
            }
            if (v32 >= 1)
            {
              long long v43 = (double *)(v36[v41] + 8);
              uint64_t v44 = v40;
              uint64_t v45 = (v32 + 1) - 1;
              do
              {
                double v46 = *v43++;
                double v47 = v42 * v46;
                uint64_t v48 = *v44++;
                *(double *)(v48 + 8 * v41) = v47;
                --v45;
              }
              while (v45);
            }
            *(double *)(v39 + 8 * v41) = *(double *)(v37 + 8 * v41) - *(double *)(v38 + 8 * v41);
            ++v41;
          }
          while (v41 != v30 + 1);
        }
        long long v49 = (char *)&v77 + 8;
        long long v77 = xmmword_263BBA470;
        int v75 = &v78;
        double v76 = &v79;
        uint64_t v79 = 0;
        for (uint64_t k = 1; k != 5; ++k)
        {
          v76[k] = (uint64_t)v49;
          v49 += 32;
        }
        BlueFin::BigMatrix::mult((uint64_t)&v75, (const BlueFin::BigMatrix *)&v80, (const BlueFin::BigMatrix *)&v111);
        v72[0] = (uint64_t)v73;
        v72[1] = 0x400000000;
        memset(v73, 0, sizeof(v73));
        uint64_t v74 = 0;
        BlueFin::SKFVector::mult(v72, (const BlueFin::BigMatrix *)&v80, (const BlueFin::SKFVector *)v85);
        BlueFin::BigMatrixDim<4,4>::BigMatrixDim((BlueFin::BigMatrix *)v70, v32, v32);
        if (v12 <= 1u) {
          int v51 = 1;
        }
        else {
          int v51 = v12;
        }
        uint64_t v52 = (v51 + 1);
        uint64_t v53 = 1;
        do
        {
          if (v32 >= 1)
          {
            uint64_t v54 = v76;
            uint64_t v55 = v112;
            uint64_t v56 = v81;
            uint64_t v57 = v71;
            uint64_t v58 = v72[0];
            int v59 = 1;
            int v60 = 1;
            uint64_t v61 = v85[0];
            do
            {
              if (v32 >= (__int16)v60)
              {
                uint64_t v62 = v54[(__int16)v60];
                uint64_t v63 = v55[v53];
                int v64 = v60;
                uint64_t v65 = *(void *)(v57 + 8 * (__int16)v60);
                do
                {
                  *(double *)(v65 + 8 * (__int16)v64) = *(double *)(v62 + 8 * (__int16)v64)
                                                        - *(double *)(v63 + 8 * (__int16)v60)
                                                        * *(double *)(v56[(__int16)v64] + 8 * v53);
                  ++v64;
                }
                while (v32 >= (__int16)v64);
              }
              v121[v59 - 1] = *(double *)(v58 + 8 * (__int16)v60)
                            - *(double *)(v56[(__int16)v60] + 8 * v53) * *(double *)(v61 + 8 * v53);
              int v59 = (__int16)++v60;
            }
            while (v32 >= (__int16)v60);
          }
          double v69 = 0.0;
          BOOL result = (unsigned __int8 *)BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)v70, v121, v120[0].f64, &v69, 0);
          if (result)
          {
            if (v69 >= 0.0001)
            {
              double v66 = *a2;
              *double v66 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(*v67, v120[0])), vaddq_f64(v67[1], v120[1]));
              *a2 = v66 + 1;
            }
          }
          ++v53;
        }
        while (v53 != v52);
      }
    }
  }
  return result;
}

void BlueFin::GlPeDEALS::CalcSigmas(uint64_t a1, _DWORD *a2, BlueFin::GlSetBase *this, const float *a4)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  int v8 = BlueFin::GlSetBase::Cnt(this);
  if (a4)
  {
    uint64_t v9 = a4;
    double v10 = v84;
    do
    {
      int v11 = a2[1];
      *(v10 - 32) = *a2;
      *(v10 - 16) = v11;
      int v12 = a2[3];
      *double v10 = a2[2];
      v10[16] = v12;
      ++v10;
      a2 += 4;
      --v9;
    }
    while (v9);
  }
  float v81 = 100.0;
  BlueFin::GlPeDEALS::CalcSpeedFromLs((uint64_t)v82, a4, &v81, v7);
  float v14 = v13;
  double v79 = v13;
  *(double *)(a1 + 16) = v13;
  double v15 = v81;
  BlueFin::GlPeDEALS::CalcSpeedFromLs((uint64_t)v83, a4, &v81, v16);
  double v78 = v18;
  *(double *)(a1 + 24) = v18;
  double v19 = v81;
  float v20 = sqrtf((float)(v14 * v14) + (float)(v18 * v18));
  if (v20 <= 0.15)
  {
    if (v15 < 0.15) {
      double v15 = 0.15;
    }
    if (v19 < 0.15) {
      double v19 = 0.15;
    }
    *(double *)(a1 + 48) = v15;
    *(double *)(a1 + 56) = v19;
  }
  BlueFin::GlPeDEALS::CalcSpeedFromLs((uint64_t)&v85, a4, &v81, v17);
  *(_DWORD *)(a1 + 40) = v22;
  float v23 = v81;
  *(float *)(a1 + 72) = v81;
  if (v8 << 24 < 67108865)
  {
    double v26 = 25.0;
    double v25 = 0.0;
  }
  else
  {
    BlueFin::GlPeDEALS::CalcSpeedFromLs((uint64_t)v84, a4, &v81, v21);
    double v25 = v24;
    double v26 = v81;
  }
  *(double *)(a1 + 32) = v25;
  *(double *)(a1 + 64) = v26;
  if (a4)
  {
    uint64_t v27 = v86;
    int v28 = (float *)v83;
    uint64_t v29 = a4;
    do
    {
      *v27++ = atan2f(*v28, *(v28 - 16));
      ++v28;
      --v29;
    }
    while (v29);
    uint64_t v30 = 0;
    unsigned __int8 v31 = 0;
    float v32 = 0.0;
    float v33 = 0.0;
    float v34 = 0.0;
    float v35 = 0.0;
    float v36 = 0.0;
    do
    {
      float v37 = *(float *)&v83[v30];
      float v38 = v82[v30];
      float v39 = sqrtf((float)(v37 * v37) + (float)(v38 * v38));
      if (v39 > 0.0)
      {
        float v32 = v32 + (float)(v38 / v39);
        float v33 = v33 + (float)(v37 / v39);
      }
      float v40 = v86[v30];
      if (v30)
      {
        double v41 = v40;
        for (double i = v36 - v40; i > 3.14159265; double i = i + -6.28318531)
          ;
        while (i <= -3.14159265)
          double i = i + 6.28318531;
        float v43 = i;
        if (v34 <= v43) {
          float v34 = v43;
        }
        if (v35 >= v43) {
          float v35 = v43;
        }
      }
      else
      {
        double v41 = v40;
        float v36 = v86[0];
      }
      uint64_t v44 = 0;
      float v45 = 0.0;
      do
      {
        if (v30 != v44)
        {
          for (double j = v41 - v86[v44]; j > 3.14159265; double j = j + -6.28318531)
            ;
          while (j <= -3.14159265)
            double j = j + 6.28318531;
          if (j < 0.0) {
            double j = -j;
          }
          float v47 = j;
          float v45 = v45 + v47;
        }
        ++v44;
      }
      while (v44 != a4);
      if (v45 > 0.0) {
        v88[v31++] = v45;
      }
      ++v30;
    }
    while (v30 != a4);
  }
  else
  {
    unsigned __int8 v31 = 0;
    float v35 = 0.0;
    float v34 = 0.0;
    float v33 = 0.0;
    float v32 = 0.0;
  }
  float v49 = atan2f(v33, v32) * 57.2957795;
  float v50 = v49 - floor(v49 / 360.0) * 360.0;
  *(float *)(a1 + 80) = v50;
  if (v31 > 2u)
  {
    BlueFin::GlSortFloats((uint64_t)v88, (const float *)v31, v87, v48);
    float v51 = v86[v87[0]];
    if ((v31 & 1) == 0)
    {
      for (double k = v51 - v86[v87[1]]; k > 3.14159265; double k = k + -6.28318531)
        ;
      for (; k <= -3.14159265; double k = k + 6.28318531)
        ;
      float v53 = k;
      float v51 = v51 + (float)(v53 * -0.5);
    }
    float v54 = (float)(v51 * 57.296) - floor((float)(v51 * 57.296) / 360.0) * 360.0;
    *(float *)(a1 + 80) = v54;
  }
  if (v20 <= 0.15)
  {
    float v62 = 180.0;
  }
  else
  {
    float v55 = -v35;
    if (v35 >= 0.0) {
      float v55 = v35;
    }
    float v56 = (float)((float)(v34 + v55) * 0.5) * 57.296;
    float v57 = -v56;
    if (v56 >= 0.0) {
      float v57 = v56;
    }
    BOOL v58 = v57 > 0.00000011921;
    float v59 = 180.0;
    if (v58) {
      float v59 = v56;
    }
    float v60 = (v79 * v79 * (v19 * v19) + v15 * v15 * (v78 * v78)) / (float)((float)(v20 * v20) * (float)(v20 * v20));
    float v61 = sqrtf(v60) * 57.296;
    if (v61 >= v59) {
      float v59 = v61;
    }
    float v62 = fmaxf(v59, 1.0);
  }
  if (v26 >= 25.0)
  {
    *(_DWORD *)(a1 + 88) = 0;
    float v72 = 90.0;
  }
  else
  {
    if (a4)
    {
      double v80 = v15;
      uint64_t v63 = 0;
      float v64 = 0.0;
      float v65 = 90.0;
      float v66 = 0.0;
      do
      {
        float v67 = atan2f(*(float *)&v84[v63], v20) * 57.296;
        if (v66 >= v67) {
          float v68 = v67;
        }
        else {
          float v68 = v66;
        }
        if (v67 >= v65) {
          float v69 = v67;
        }
        else {
          float v69 = v65;
        }
        if (v63) {
          float v66 = v68;
        }
        else {
          float v66 = v67;
        }
        if (v63) {
          float v65 = v69;
        }
        else {
          float v65 = v67;
        }
        float v64 = v64 + v67;
        v63 += 4;
      }
      while (4 * a4 != v63);
      float v70 = v64 / (float)a4;
      float v71 = (float)(v65 - v66) * 0.5;
      double v15 = v80;
    }
    else
    {
      float v70 = 0.0;
      float v71 = 45.0;
    }
    *(float *)(a1 + 88) = v70;
    float v72 = 90.0;
    if (v71 != 0.0) {
      float v72 = v71;
    }
  }
  double v73 = 0.000001;
  if (v15 >= 0.000001) {
    double v74 = v15;
  }
  else {
    double v74 = 0.000001;
  }
  if (v19 >= 0.000001) {
    double v75 = v19;
  }
  else {
    double v75 = 0.000001;
  }
  *(double *)(a1 + 48) = v74;
  *(double *)(a1 + 56) = v75;
  if (v26 >= 0.000001) {
    double v73 = v26;
  }
  *(double *)(a1 + 64) = v73;
  float v76 = 0.000001;
  if (v23 >= 0.000001) {
    float v76 = v23;
  }
  *(float *)(a1 + 72) = v76;
  if (v62 >= 0.000057296) {
    float v77 = v62;
  }
  else {
    float v77 = 0.000057296;
  }
  *(float *)(a1 + 84) = v77;
  if (v72 < 0.000057296) {
    float v72 = 0.000057296;
  }
  *(float *)(a1 + 92) = v72;
}

uint64_t BlueFin::GlPeDEALS::CalcSpeedFromLs(uint64_t this, const float *a2, float *a3, float *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *a3 = 100.0;
  if (a2)
  {
    uint64_t v4 = this;
    int v5 = a2 - 1;
    if (a2 != 1)
    {
      this = BlueFin::GlSortFloats(this, a2, v7, (unsigned __int8 *)a4);
      *a3 = *(float *)(v4 + 4 * v7[v5]) - *(float *)(v4 + 4 * v7[0]);
    }
  }
  return this;
}

BlueFin::BigMatrix *BlueFin::BigMatrixDim<4,4>::BigMatrixDim(BlueFin::BigMatrix *this, int a2, int a3)
{
  uint64_t v4 = (char *)this + 24;
  *((_OWORD *)this + 1) = xmmword_263BBA470;
  *((void *)this + 20) = 0;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 160;
  for (uint64_t i = 8; i != 40; i += 8)
  {
    *(void *)(*((void *)this + 1) + i) = v4;
    v4 += 32;
  }
  BlueFin::BigMatrix::Clone(this, a2, a3);
  return this;
}

uint64_t BlueFin::stDnavState::operator=(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  BlueFin::GlSetBase::operator=(a1 + 72, a2 + 72);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
  long long v5 = *(_OWORD *)(a2 + 100);
  long long v6 = *(_OWORD *)(a2 + 116);
  long long v7 = *(_OWORD *)(a2 + 132);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 132) = v7;
  *(_OWORD *)(a1 + 116) = v6;
  *(_OWORD *)(a1 + 100) = v5;
  BlueFin::GlSetBase::operator=(a1 + 160, a2 + 160);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 172);
  long long v8 = *(_OWORD *)(a2 + 188);
  long long v9 = *(_OWORD *)(a2 + 204);
  long long v10 = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 220) = v10;
  *(_OWORD *)(a1 + 204) = v9;
  *(_OWORD *)(a1 + 188) = v8;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  return a1;
}

uint64_t BlueFin::GlPeDnav::Run(uint64_t a1, uint64_t a2, unsigned char *a3, BlueFin::GlSetBase *this, BlueFin::GlSetBase *a5, int a6, void *a7)
{
  unsigned __int8 v8 = a6;
  uint64_t v107 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 268) = 0;
  *(void *)(a1 + 416) = *a7;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 280) = 0x4059000000000000;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 16) = 0xC158548D40000000;
  *(_DWORD *)(a1 + 24) = 6367427;
  *(_DWORD *)(a1 + 312) = 7;
  uint64_t v14 = *(void *)(a1 + 304);
  *(void *)(v14 + 56) = 0;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(double *)(*(void *)(a1 + 304) + 56) = *(float *)(a1 + 416) * 0.299792458;
  *(double *)(a1 + 64) = *(float *)(a1 + 420) * 0.0898755179;
  if (a6) {
    *(_DWORD *)(a1 + 268) |= 2u;
  }
  char v15 = BlueFin::GlSetBase::Cnt(this);
  char v16 = BlueFin::GlSetBase::Cnt(a5);
  if (v16 >= 2) {
    char v17 = -7;
  }
  else {
    char v17 = -4;
  }
  char v18 = v16 + v15;
  if (v15 < 4) {
    ++v18;
  }
  if (((v16 > 1) & v8) != 0) {
    unsigned __int8 v19 = -2;
  }
  else {
    unsigned __int8 v19 = 0;
  }
  if (v15 <= 3 && (v18 + v17) == v19)
  {
    *(_DWORD *)(a1 + 268) |= 1u;
    BlueFin::GlPeDnav::addAlMeasurement(a1, a2, a3, 0);
  }
  if ((BlueFin::GlPeDnav::Core(a1, a2, (char)*a3, this, a5, 1.62176493e14) & 1) == 0) {
    goto LABEL_26;
  }
  if ((char)BlueFin::GlSetBase::Cnt(this) <= 3)
  {
    *(_DWORD *)(a1 + 268) |= 1u;
    BlueFin::GlPeDnav::addAlMeasurement(a1, a2, a3, 0);
  }
  if ((BlueFin::GlPeDnav::Core(a1, a2, (char)*a3, this, a5, 900000000.0) & 1) == 0) {
    goto LABEL_26;
  }
  if ((char)BlueFin::GlSetBase::Cnt(this) <= 3) {
    BlueFin::GlPeDnav::addAlMeasurement(a1, a2, a3, 1);
  }
  if ((BlueFin::GlPeDnav::Core(a1, a2, (char)*a3, this, a5, 9000000.0) & 1) == 0)
  {
LABEL_26:
    *(void *)(a1 + 416) = *a7;
    *(void *)(a1 + 280) = 0x4059000000000000;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 288) = 0;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 16) = 0xC158548D40000000;
    *(_DWORD *)(a1 + 24) = 6367427;
    *(_DWORD *)(a1 + 312) = 7;
    uint64_t v25 = *(void *)(a1 + 304);
    *(void *)(v25 + 56) = 0;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 24) = 0u;
    *(_OWORD *)(v25 + 8) = 0u;
    *(double *)(*(void *)(a1 + 304) + 56) = *(float *)(a1 + 416) * 0.299792458;
    *(double *)(a1 + 64) = *(float *)(a1 + 420) * 0.0898755179;
    return a1;
  }
  if (!a2)
  {
    float v69 = "pastDNMeas";
    DeviceFaultNotify("glpe_dnav.cpp", 462, "DNavQA", (char)"pastDNMeas");
    int v70 = 462;
    goto LABEL_110;
  }
  int v20 = (char)*a3;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 24) = 6367427;
  *(void *)(a1 + 64) = 0x40A76BD9628CBD12;
  v103[1] = 0xC00000000;
  memset(v104, 0, sizeof(v104));
  uint64_t v105 = 0;
  v100[1] = 0xC00000000;
  memset(v101, 0, sizeof(v101));
  uint64_t v102 = 0;
  v103[0] = v104;
  int v21 = *(_DWORD *)(a1 + 28);
  v92[0] = a1 + 304;
  v92[1] = a1;
  v92[2] = 0;
  int v93 = v21;
  uint64_t v94 = 0x4C000000001;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  uint64_t v99 = 0x4008000000000000;
  v100[0] = v101;
  memset(v106, 0, 48);
  v89[0] = v103;
  v89[1] = v100;
  v89[2] = 0;
  v89[3] = 0;
  void v89[4] = v106;
  long long v90 = 0u;
  long long v91 = 0u;
  int v72 = v20;
  if ((int)BlueFin::GlSetBase::Highest((BlueFin::GlSetBase *)(a1 + 384)) >= v20)
  {
    float v69 = "m_otMeasSet.Highest() < lDNMeasMaxNum";
    DeviceFaultNotify("glpe_dnav.cpp", 484, "DNavQA", (char)"m_otMeasSet.Highest() < lDNMeasMaxNum");
    int v70 = 484;
    goto LABEL_110;
  }
  if ((*(unsigned int (**)(void, void *, void *, uint64_t, uint64_t))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), v92, v89, a2, a1 + 384))
  {
    return a1;
  }
  unsigned __int8 v80 = *(unsigned char *)(a1 + 392);
  memcpy(v84, *(const void **)(a1 + 384), 4 * v80);
  __int16 v82 = 0;
  unsigned __int8 v81 = 0;
  int v83 = v84[0];
  BlueFin::GlSetIterator::operator++(&v80);
  if (v81 != v80)
  {
    uint64_t v22 = 0;
    uint64_t v27 = v103[0];
    char v23 = 1;
    int v28 = (float *)v106;
    uint64_t v29 = v100[0];
    double v24 = 2000.0;
    while (1)
    {
      int v30 = *(_DWORD *)(a2 + 56 * v82 + 44);
      switch(v30)
      {
        case 3:
          uint64_t v22 = a2 + 56 * v82;
          double v24 = *(double *)(v22 + 8);
          break;
        case 2:
          double v34 = *(double *)(v27 + 8 * (v82 + 1)) - *(double *)(v29 + 8 * (v82 + 1));
          double v32 = v34 * v34;
          float v33 = (double *)(a1 + 256);
LABEL_35:
          *float v33 = v32 + *v33;
          if (*v28 < -2.0) {
            char v23 = 0;
          }
          break;
        case 0:
          double v31 = *(double *)(v27 + 8 * (v82 + 1)) - *(double *)(v29 + 8 * (v82 + 1));
          double v32 = v31 * v31;
          float v33 = (double *)(a1 + 248);
          goto LABEL_35;
      }
      BlueFin::GlSetIterator::operator++(&v80);
      ++v28;
      if (v81 == v80) {
        goto LABEL_38;
      }
    }
  }
  uint64_t v22 = 0;
  char v23 = 1;
  double v24 = 2000.0;
LABEL_38:
  double v35 = sqrt(*(double *)(a1 + 248));
  double v36 = fmod(v35, 4294967300.0);
  if (v35 > 4294967300.0) {
    double v35 = v36;
  }
  if ((v23 & 1) == 0)
  {
    unsigned int v63 = *(_DWORD *)(a1 + 268) & 0xFFFFFFEF;
LABEL_107:
    *(_DWORD *)(a1 + 268) = v63;
    return a1;
  }
  char v37 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a1 + 72));
  char v38 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a1 + 160));
  int v39 = v38;
  if (v38 >= 2) {
    char v40 = -7;
  }
  else {
    char v40 = -4;
  }
  char v41 = v38 + v37;
  if (v37 < 4) {
    ++v41;
  }
  if ((v38 > 1) & (*(_DWORD *)(a1 + 268) >> 1)) {
    char v42 = 2;
  }
  else {
    char v42 = 0;
  }
  unsigned __int8 v43 = v41 + v40 + v42;
  if ((v43 & 0x80) != 0)
  {
    float v69 = "cNdof >= 0";
    DeviceFaultNotify("glpe_dnav.cpp", 554, "DNavQA", (char)"cNdof >= 0");
    int v70 = 554;
    goto LABEL_110;
  }
  if ((v22 != 0) != v37 < 4)
  {
    float v69 = "bAltNeeded == bAltInMeasArray";
    DeviceFaultNotify("glpe_dnav.cpp", 558, "DNavQA", (char)"bAltNeeded == bAltInMeasArray");
    int v70 = 558;
    goto LABEL_110;
  }
  if (v37 < 4 != (*(_DWORD *)(a1 + 268) & 1))
  {
    float v69 = "bAltNeeded == bAltUsed";
    DeviceFaultNotify("glpe_dnav.cpp", 559, "DNavQA", (char)"bAltNeeded == bAltUsed");
    int v70 = 559;
LABEL_110:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_dnav.cpp", v70, v69);
  }
  char v44 = v38;
  double v45 = *(double *)(a1 + 48) * *(double *)(a1 + 48) + *(double *)(a1 + 40) * *(double *)(a1 + 40);
  BOOL v46 = v38 == 4 && v37 == 2;
  double v47 = dbl_263BBBC10[(v41 + v40 + v42) < 3u];
  if (v46) {
    double v47 = 9.0;
  }
  if (v45 < v47)
  {
    if (v37 < 3)
    {
      unsigned int v62 = 0;
    }
    else
    {
      unsigned int v86 = v88;
      unsigned __int8 v87 = 8;
      memset(v88, 0, 32);
      int v71 = v38;
      uint64_t v48 = 0;
      if (v72 >= 1)
      {
        uint64_t v49 = v72;
        float v50 = (_DWORD *)(a2 + 44);
        float v51 = (_DWORD *)(a2 + 44);
        do
        {
          int v52 = *v51;
          v51 += 14;
          if (!v52
            && (((unint64_t)*(unsigned int *)(*(void *)(a1 + 72) + 4 * (*((__int16 *)v50 - 2) >> 5)) >> (*(_WORD *)(v50 - 1) & 0x1F)) & 1) != 0)
          {
            *(_DWORD *)&v88[((unint64_t)*((unsigned __int8 *)v50 - 12) >> 3) & 0x1C] |= 1 << *((unsigned char *)v50 - 12);
            uint64_t v48 = *(v50 - 7);
          }
          float v50 = v51;
          --v49;
        }
        while (v49);
      }
      uint64_t v53 = *(void *)(a1 + 424);
      int v74 = 0;
      double v75 = v77;
      char v76 = 8;
      memset(v77, 0, 32);
      *(_OWORD *)&v77[9] = xmmword_263BBA380;
      int32x2_t v78 = vdup_n_s32(0x42C60000u);
      int v79 = 1120272384;
      uint64_t v54 = v48;
      BlueFin::stDops::stDops((uint64_t)&v80, (uint64_t)&v74);
      unsigned int v55 = 0;
      uint64_t v85 = v53;
      float v56 = &v86[4 * v87 - 4];
      do
      {
        if (*v56)
        {
          unsigned int v57 = *v56 - (((*v56 >> 2) & 0x9249249) + ((*v56 >> 1) & 0x5B6DB6DB));
          unsigned int v55 = ((v57 + (v57 >> 3)) & 0xC71C71C7) + v55 - 63 * (((v57 + (v57 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v56;
      }
      while (v56 >= (_DWORD *)v86);
      BlueFin::GlPeDops::GetDops((uint64_t)&v80, v54);
      float v58 = fmodf(v73, 4295000000.0);
      if (v73 <= 4295000000.0) {
        float v58 = v73;
      }
      if (v37 == 3)
      {
        if (v58 < -4295000000.0) {
          float v58 = -fmodf(-v58, 4295000000.0);
        }
        if (v58 < 0.0) {
          unsigned int v59 = -(float)-v58;
        }
        else {
          unsigned int v59 = v58;
        }
        double v60 = fmod(v24, 4294967300.0);
        if (v24 <= 4294967300.0) {
          double v60 = v24;
        }
        if (v60 < -4294967300.0) {
          double v60 = -fmod(-v60, 4294967300.0);
        }
        int v39 = v71;
        if (v60 < 0.0) {
          unsigned int v61 = --v60;
        }
        else {
          unsigned int v61 = v60;
        }
        unsigned int v62 = v61 * v59;
      }
      else
      {
        if (v58 < -4295000000.0) {
          float v58 = -fmodf(-v58, 4295000000.0);
        }
        int v39 = v71;
        if (v58 < 0.0) {
          unsigned int v64 = -(float)-v58;
        }
        else {
          unsigned int v64 = v58;
        }
        if (v35 <= 0x1E) {
          unsigned int v65 = 30;
        }
        else {
          unsigned int v65 = v35;
        }
        unsigned int v62 = v64 * v65;
      }
    }
    uint64_t v66 = 1;
    if (!v37) {
      uint64_t v66 = 2;
    }
    if (!v44) {
      uint64_t v66 = 0;
    }
    unsigned int v67 = v43;
    if ((v43 & 0xFE) != 0) {
      unsigned int v67 = 2;
    }
    unsigned int v68 = dword_263BBBC60[3 * v66 + v67];
    if (v68 > v62) {
      unsigned int v62 = v68;
    }
    *(_DWORD *)(a1 + 24) = v62;
    if (v39 >= 3) {
      *(double *)(a1 + 64) = fmax(fmin(sqrt(v45), 29.3796609), 2.99792458);
    }
    unsigned int v63 = *(_DWORD *)(a1 + 268) | 0x20;
    goto LABEL_107;
  }
  return a1;
}

double BlueFin::GlPeDnav::addAlMeasurement(uint64_t a1, uint64_t a2, unsigned char *a3, int a4)
{
  if (!a2)
  {
    long long v9 = "pastDNMeas";
    DeviceFaultNotify("glpe_dnav.cpp", 715, "addAlMeasurement", (char)"pastDNMeas");
    int v10 = 715;
LABEL_15:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_dnav.cpp", v10, v9);
  }
  unsigned int v4 = *a3;
  if ((char)*a3 < 1)
  {
    unsigned int v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v6 = *a3;
    long long v7 = (int *)(a2 + 44);
    do
    {
      int v8 = *v7;
      v7 += 14;
      if (v8 == 3) {
        goto LABEL_10;
      }
      ++v5;
    }
    while (*a3 != v5);
    if (v4 >= 0xE)
    {
      long long v9 = "i < DN_MEAS_ARR_LEN";
      DeviceFaultNotify("glpe_dnav.cpp", 730, "addAlMeasurement", (char)"i < DN_MEAS_ARR_LEN");
      int v10 = 730;
      goto LABEL_15;
    }
  }
  uint64_t v5 = v6;
  *a3 = v4 + 1;
LABEL_10:
  uint64_t v11 = a2 + 56 * v5;
  double result = 0.0;
  *(unsigned char *)(v11 + 50) = 0;
  *(unsigned char *)(v11 + 32) = 0;
  *(_DWORD *)(v11 + 36) = -1;
  *(_WORD *)(v11 + 40) = 575;
  *(_OWORD *)uint64_t v11 = xmmword_263BBBC20;
  *(_OWORD *)(v11 + 16) = xmmword_263BB9FD0;
  *(_DWORD *)(v11 + 44) = 3;
  *(_WORD *)(v11 + 48) = 1;
  if (a4)
  {
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v14 = 0;
    int32x2_t v15 = vdup_n_s32(0x44FA0000u);
    int v16 = -1;
    if (BlueFin::GlPeKFAltAsst::altAsstFirstFix(*(void *)(a1 + 432), (uint64_t)v13, (double *)a1, 0x27100u))
    {
      *(void *)uint64_t v11 = v14;
      double result = *(float *)v15.i32;
      *(double *)(v11 + 8) = *(float *)v15.i32;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeDnav::Core(uint64_t a1, uint64_t a2, int a3, BlueFin::GlSetBase *this, BlueFin::GlSetBase *a5, double a6)
{
  uint64_t v152 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v85 = "pastDNMeas";
    DeviceFaultNotify("glpe_dnav.cpp", 197, "Core", (char)"pastDNMeas");
    unsigned int v86 = "glpe_dnav.cpp";
    int v87 = 197;
    goto LABEL_79;
  }
  char v12 = BlueFin::GlSetBase::Cnt(this);
  int v13 = (char)(BlueFin::GlSetBase::Cnt(a5) + v12 + (*(unsigned char *)(a1 + 268) & 1));
  uint64_t v14 = *(void **)(a1 + 384);
  bzero(v14, ((4 * *(unsigned __int8 *)(a1 + 392) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (a3 >= 1)
  {
    char v15 = 0;
    uint64_t v16 = *(void *)a5;
    uint64_t v17 = *(void *)this;
    do
    {
      int v18 = *(_DWORD *)(a2 + 56 * v15 + 44);
      if (v18 == 3)
      {
        if ((*(unsigned char *)(a1 + 268) & 1) == 0) {
          goto LABEL_13;
        }
LABEL_12:
        *((_DWORD *)v14 + (v15 >> 5)) |= 1 << v15;
        goto LABEL_13;
      }
      if (v18 == 2)
      {
        int v19 = *(__int16 *)(a2 + 56 * v15 + 40);
        unint64_t v20 = *(unsigned int *)(v16 + 4 * (v19 >> 5));
      }
      else
      {
        if (v18) {
          goto LABEL_13;
        }
        int v19 = *(__int16 *)(a2 + 56 * v15 + 40);
        unint64_t v20 = *(unsigned int *)(v17 + 4 * (v19 >> 5));
      }
      if ((v20 >> (v19 & 0x1F))) {
        goto LABEL_12;
      }
LABEL_13:
      ++v15;
    }
    while (a3 > v15);
  }
  if (v13 > 21)
  {
    uint64_t v85 = "cNumMeas<=BIG_MATR_MAX_ROW_DIM";
    DeviceFaultNotify("glpe_dnav.cpp", 243, "Core", (char)"cNumMeas<=BIG_MATR_MAX_ROW_DIM");
    unsigned int v86 = "glpe_dnav.cpp";
    int v87 = 243;
    goto LABEL_79;
  }
  if (v13 != BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a1 + 384)))
  {
    uint64_t v85 = "cNumMeas==m_otMeasSet.Cnt()";
    DeviceFaultNotify("glpe_dnav.cpp", 244, "Core", (char)"cNumMeas==m_otMeasSet.Cnt()");
    unsigned int v86 = "glpe_dnav.cpp";
    int v87 = 244;
    goto LABEL_79;
  }
  if ((int)BlueFin::GlSetBase::Highest((BlueFin::GlSetBase *)(a1 + 384)) >= a3)
  {
    uint64_t v85 = "m_otMeasSet.Highest() < lDNMeasMaxNum";
    DeviceFaultNotify("glpe_dnav.cpp", 245, "Core", (char)"m_otMeasSet.Highest() < lDNMeasMaxNum");
    unsigned int v86 = "glpe_dnav.cpp";
    int v87 = 245;
    goto LABEL_79;
  }
  unsigned __int8 v21 = BlueFin::GlSetBase::Cnt(this);
  int v22 = (char)v21;
  int v91 = v21;
  unsigned __int8 v23 = BlueFin::GlSetBase::Cnt(a5);
  if (v22 <= 2 && (char)v23 <= 2 && (v91 != 2 || v23 != 2))
  {
    uint64_t v85 = "cNumFpr>DN_MIN_FPR || cNumRr>DN_MIN_RR || (cNumFpr==DN_MIN_FPR&&cNumRr==DN_MIN_RR)";
    DeviceFaultNotify("glpe_dnav.cpp", 252, "Core", (char)"cNumFpr>DN_MIN_FPR || cNumRr>DN_MIN_RR || (cNumFpr==DN_MIN_FPR&&cNumRr==DN_MIN_RR)");
    unsigned int v86 = "glpe_dnav.cpp";
    int v87 = 252;
LABEL_79:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v86, v87, v85);
  }
  if (v91 == 1 || (unsigned int v90 = v23 - 1, v23 == 1))
  {
    uint64_t v85 = "cNumFpr!=1 && cNumRr!=1";
    DeviceFaultNotify("glpe_dnav.cpp", 253, "Core", (char)"cNumFpr!=1 && cNumRr!=1");
    unsigned int v86 = "glpe_dnav.cpp";
    int v87 = 253;
    goto LABEL_79;
  }
  uint64_t v88 = (uint64_t)a5;
  int v24 = (char)v23;
  if ((char)v23 >= 2) {
    char v25 = 7;
  }
  else {
    char v25 = 4;
  }
  *(unsigned char *)(a1 + 264) = v25;
  double v26 = (char *)&v142 + 8;
  long long v142 = xmmword_263BBBC30;
  BOOL v140 = &v143;
  unsigned int v141 = &v144;
  uint64_t v144 = 0;
  for (uint64_t i = 1; i != 15; ++i)
  {
    v141[i] = (uint64_t)v26;
    v26 += 56;
  }
  unsigned int v28 = 0;
  int v136 = v138;
  uint64_t v137 = 0xE00000000;
  memset(v138, 0, sizeof(v138));
  uint64_t v139 = 0;
  BOOL v132 = v134;
  *(void *)int v133 = 0xE00000000;
  memset(v134, 0, sizeof(v134));
  uint64_t v135 = 0;
  unsigned int v128 = v130;
  uint64_t v129 = 0xE00000000;
  memset(v130, 0, sizeof(v130));
  uint64_t v131 = 0;
  int v29 = *(_DWORD *)(a1 + 28);
  uint64_t v89 = a1 + 304;
  uint64_t v118 = a1 + 304;
  uint64_t v119 = a1;
  uint64_t v120 = 0;
  int v121 = v29;
  uint64_t v122 = 0x4C000000001;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  uint64_t v127 = 0x4008000000000000;
  v114[0] = &v132;
  v114[1] = &v128;
  v114[2] = &v140;
  v114[3] = &v136;
  int v30 = (float64x2_t *)(a1 + 280);
  long long v115 = 0u;
  long long v116 = 0u;
  uint64_t v117 = 0;
  uint64_t v31 = a1 + 384;
  do
  {
    long long v112 = 0uLL;
    uint64_t v113 = 0;
    long long v112 = *(_OWORD *)v119;
    uint64_t v113 = *(void *)(v119 + 16);
    uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 48))(*(void *)(a1 + 424));
    (*(void (**)(uint64_t, long long *))(*(void *)v32 + 104))(v32, &v112);
    if ((*(unsigned int (**)(void, uint64_t *, void *, uint64_t, uint64_t))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424), &v118, v114, a2, v31))
    {
      return 0;
    }
    if (v24 <= 1) {
      BlueFin::BigMatrix::ReShape(&v140, v13, *(unsigned __int8 *)(a1 + 264));
    }
    int v33 = v133[0];
    if ((char)v91 <= 3 && v133[0] <= 11)
    {
      BlueFin::SKFVector::AddLen((uint64_t)&v132);
      *((void *)v132 + v133[0]) = 0;
      BlueFin::SKFVector::AddLen((uint64_t)&v128);
      *(void *)&v128[8 * (int)v129] = 0;
      BlueFin::SKFVector::AddLen((uint64_t)&v136);
      *(void *)&v136[8 * (int)v137] = 0x42A78A9F83E7E45ALL;
      BlueFin::BigMatrix::AddRow((BlueFin::BigMatrix *)&v140);
      *(void *)(v141[(int)v142] + 32) = 0x3FF0000000000000;
      *(_DWORD *)(a1 + 268) |= 4u;
      int v33 = v133[0];
    }
    if (v90 <= 4 && v33 <= 11)
    {
      BlueFin::SKFVector::AddLen((uint64_t)&v132);
      *((double *)v132 + v133[0]) = *(float *)(a1 + 416) * 0.299792458;
      BlueFin::SKFVector::AddLen((uint64_t)&v128);
      *(void *)&v128[8 * (int)v129] = *(void *)(*(void *)(a1 + 304) + 56);
      BlueFin::SKFVector::AddLen((uint64_t)&v136);
      *(double *)&v136[8 * (int)v137] = *(float *)(a1 + 420) * 0.0898755179;
      uint64_t v34 = SDWORD1(v142);
      BlueFin::BigMatrix::AddRow((BlueFin::BigMatrix *)&v140);
      *(void *)(v141[(int)v142] + 8 * v34) = 0x3FF0000000000000;
      uint64_t v31 = a1 + 384;
      *(_DWORD *)(a1 + 268) |= 8u;
    }
    if (v24 >= 2 && (*(unsigned char *)(a1 + 268) & 2) != 0 && v133[0] <= 10)
    {
      BlueFin::SKFVector::AddLen((uint64_t)&v132);
      *((void *)v132 + v133[0]) = 0;
      BlueFin::SKFVector::AddLen((uint64_t)&v132);
      *((void *)v132 + v133[0]) = 0;
      BlueFin::SKFVector::AddLen((uint64_t)&v128);
      *(void *)&v128[8 * (int)v129] = 0;
      BlueFin::SKFVector::AddLen((uint64_t)&v128);
      *(void *)&v128[8 * (int)v129] = 0;
      BlueFin::SKFVector::AddLen((uint64_t)&v136);
      *(void *)&v136[8 * (int)v137] = 0x3FF0000000000000;
      BlueFin::SKFVector::AddLen((uint64_t)&v136);
      *(void *)&v136[8 * (int)v137] = 0x3FF0000000000000;
      BlueFin::BigMatrix::AddRow((BlueFin::BigMatrix *)&v140);
      *(void *)(v141[(int)v142] + 40) = 0x3FF0000000000000;
      BlueFin::BigMatrix::AddRow((BlueFin::BigMatrix *)&v140);
      *(void *)(v141[(int)v142] + 48) = 0x3FF0000000000000;
    }
    uint64_t v35 = v142;
    int v36 = DWORD1(v142);
    if ((int)v142 < SDWORD1(v142))
    {
      uint64_t v85 = "otH.GetRowSize() >= otH.GetColSize()";
      DeviceFaultNotify("glpe_dnav.cpp", 333, "Core", (char)"otH.GetRowSize() >= otH.GetColSize()");
      unsigned int v86 = "glpe_dnav.cpp";
      int v87 = 333;
      goto LABEL_79;
    }
    uint64_t v37 = v137;
    uint64_t v107 = v110;
    int v108 = v137;
    int v109 = 14;
    if ((int)v137 >= 15)
    {
      uint64_t v85 = "LEN >= len";
      DeviceFaultNotify("glpe_matrix.h", 497, "SKFVectorDim", (char)"LEN >= len");
      unsigned int v86 = "glpe_matrix.h";
      int v87 = 497;
      goto LABEL_79;
    }
    uint64_t v111 = 0;
    memset(v110, 0, sizeof(v110));
    uint64_t v107 = v110;
    if ((int)v137 >= 1)
    {
      char v38 = (double *)(v136 + 8);
      int v39 = (double *)&v110[8];
      do
      {
        double v40 = *v38++;
        *v39++ = 1.0 / v40;
        --v37;
      }
      while (v37);
    }
    uint64_t v104 = 0xC00000007;
    char v41 = &v104;
    *(void *)&v102.f64[0] = &v105;
    *(void *)&v102.f64[1] = &v106;
    uint64_t v42 = 8;
    uint64_t v106 = 0;
    do
    {
      *(void *)(*(void *)&v102.f64[1] + v42) = v41;
      v41 += 12;
      v42 += 8;
    }
    while (v42 != 64);
    unint64_t v103 = __PAIR64__(v35, v36);
    if ((int)v35 >= 1)
    {
      unsigned __int8 v43 = v107;
      char v44 = v141;
      uint64_t v45 = v35 + 1;
      uint64_t v46 = *(void *)&v102.f64[1] + 8;
      uint64_t v47 = 1;
      do
      {
        if (v36 >= 1)
        {
          double v48 = *(double *)&v43[8 * v47];
          uint64_t v49 = (double *)(v44[v47] + 8);
          float v50 = (uint64_t *)v46;
          uint64_t v51 = (v36 + 1) - 1;
          do
          {
            double v52 = *v49++;
            double v53 = v48 * v52;
            uint64_t v54 = *v50++;
            *(double *)(v54 + 8 * v47) = v53;
            --v51;
          }
          while (v51);
        }
        ++v47;
      }
      while (v47 != v45);
    }
    uint64_t v55 = 0;
    int v56 = v133[0];
    long long v99 = xmmword_263BBBC40;
    long long v97 = &v100;
    long long v98 = &v101;
    uint64_t v101 = 0;
    do
    {
      v98[v55 + 1] = (uint64_t)&v99 + v55 * 8 + 8;
      ++v55;
    }
    while (v55 != 12);
    BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v97, v56, 1);
    uint64_t v57 = v133[0];
    if (v133[0] >= 1)
    {
      float v58 = v98 + 1;
      unsigned int v59 = (double *)(v128 + 8);
      double v60 = (double *)v132 + 1;
      do
      {
        double v61 = *v60++;
        double v62 = v61;
        double v63 = *v59++;
        double v64 = v62 - v63;
        uint64_t v65 = *v58++;
        *(double *)(v65 + 8) = v64;
        --v57;
      }
      while (v57);
    }
    long long v94 = xmmword_263BBBC50;
    uint64_t v66 = (char *)&v94 + 8;
    uint64_t v92 = &v95;
    int v93 = &v96;
    uint64_t v67 = 1;
    uint64_t v96 = 0;
    do
    {
      v93[v67] = (uint64_t)v66;
      v66 += 56;
      ++v67;
    }
    while (v67 != 8);
    BlueFin::BigMatrix::mult((uint64_t)&v92, (const BlueFin::BigMatrix *)&v102, (const BlueFin::BigMatrix *)&v97);
    uint64_t v68 = v94;
    if ((int)v94 >= 1)
    {
      float v69 = v93 + 1;
      int v70 = v145;
      do
      {
        uint64_t v71 = *v69++;
        *v70++ = *(double *)(v71 + 8);
        --v68;
      }
      while (v68);
    }
    BlueFin::BigMatrix::mult_sym((uint64_t)&v92, (const BlueFin::BigMatrix *)&v102, (const BlueFin::BigMatrix *)&v140);
    if (!BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v92, v145, v146.f64, 0, 0)) {
      return 0;
    }
    double v72 = v147;
    *int v30 = vaddq_f64(v146, *v30);
    *(double *)(a1 + 296) = v72 + *(double *)(a1 + 296);
    BlueFin::ecef2lla(v30->f64, a1);
    if (fabs(*(double *)(a1 + 16)) > 6367426.73) {
      return 0;
    }
    uint64_t v73 = *(void *)v89;
    *(double *)(*(void *)v89 + 32) = v148 + *(double *)(*(void *)v89 + 32);
    if (v24 >= 2)
    {
      double v74 = *(double *)(v73 + 48);
      *(double *)(v73 + 40) = v149 + *(double *)(v73 + 40);
      *(double *)(v73 + 48) = v150 + v74;
      *(double *)(v73 + 56) = v151 + *(double *)(v73 + 56);
    }
    double v75 = v146.f64[1] * v146.f64[1] + v146.f64[0] * v146.f64[0] + v147 * v147;
    if (v28 > 8) {
      break;
    }
    ++v28;
  }
  while (v75 >= a6);
  if (v75 >= a6) {
    return 0;
  }
  *(void *)(a1 + 32) = *(void *)(v73 + 32);
  *(void *)(a1 + 40) = *(void *)(v73 + 40);
  *(void *)(a1 + 48) = *(void *)(v73 + 48);
  *(void *)(a1 + 56) = *(void *)(v73 + 56);
  *(_DWORD *)(a1 + 268) |= 0x10u;
  BlueFin::GlSetBase::operator=(a1 + 72, (uint64_t)this);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)((char *)this + 12);
  long long v76 = *(_OWORD *)((char *)this + 28);
  long long v77 = *(_OWORD *)((char *)this + 44);
  long long v78 = *(_OWORD *)((char *)this + 60);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)((char *)this + 72);
  *(_OWORD *)(a1 + 132) = v78;
  *(_OWORD *)(a1 + 116) = v77;
  *(_OWORD *)(a1 + 100) = v76;
  BlueFin::GlSetBase::operator=(a1 + 160, v88);
  *(_OWORD *)(a1 + 172) = *(_OWORD *)(v88 + 12);
  long long v79 = *(_OWORD *)(v88 + 28);
  long long v80 = *(_OWORD *)(v88 + 44);
  long long v81 = *(_OWORD *)(v88 + 60);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v88 + 72);
  *(_OWORD *)(a1 + 220) = v81;
  *(_OWORD *)(a1 + 204) = v80;
  *(_OWORD *)(a1 + 188) = v79;
  double v82 = *(double *)(a1 + 16);
  unint64_t v83 = 0x4103880000000000;
  if (v82 > 160000.0 || (unint64_t v83 = 0xC08F400000000000, v82 < -1000.0))
  {
    *(void *)(a1 + 16) = v83;
    BlueFin::lla2ecef((double *)a1, (uint64_t)&v102);
    *int v30 = v102;
    *(void *)(a1 + 296) = v103;
  }
  return 1;
}

uint64_t BlueFin::GlPeDnavMgr::Run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *a25,char *a26,__int16 a27,int a28,long double a29,double a30,int a31,__int16 a32,char a33,unsigned __int8 a34,long long a35,unint64_t a36,long long a37,long long a38,long long a39,char *a40,long long a41,long long a42,long long a43,long long a44,long long a45,char *a46,long long a47,long long a48,long long a49,long long a50,long long a51,int64x2_t a52,long long a53,uint64_t a54,char a55)
{
  uint64_t v47 = (BlueFin::GlPeDnavMgr *)MEMORY[0x270FA5388](a1, a2);
  double v149 = v48;
  int v50 = v49;
  uint64_t v51 = (uint64_t)v47;
  STACK[0x3B38] = *MEMORY[0x263EF8340];
  __src = &vars0_4;
  unsigned __int8 vars0 = 19;
  long long vars0_4 = 0u;
  double v150 = (char *)v151 + 4;
  LOBYTE(v151[0]) = 19;
  memset((char *)v151 + 4, 0, 48);
  memset((char *)&v151[3] + 4, 0, 28);
  BlueFin::GlPeDnavMgr::CountMeas(v47, &__src, &v150);
  unsigned int v52 = 0;
  double v53 = (char *)__src + 4 * vars0 - 4;
  uint64_t v54 = v53;
  do
  {
    if (*v54)
    {
      unsigned int v55 = *v54 - (((*v54 >> 1) & 0x5B6DB6DB) + ((*v54 >> 2) & 0x9249249));
      unsigned int v52 = ((v55 + (v55 >> 3)) & 0xC71C71C7) + v52 - 63 * (((v55 + (v55 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v54;
  }
  while (v54 >= __src);
  unsigned int v56 = 0;
  uint64_t v57 = (char *)v150 + 4 * LOBYTE(v151[0]) - 4;
  float v58 = v57;
  do
  {
    if (*v58)
    {
      unsigned int v59 = *v58 - (((*v58 >> 1) & 0x5B6DB6DB) + ((*v58 >> 2) & 0x9249249));
      unsigned int v56 = ((v59 + (v59 >> 3)) & 0xC71C71C7) + v56 - 63 * (((v59 + (v59 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v58;
  }
  while (v58 >= v150);
  unsigned int v60 = 0;
  int v61 = (char)v52;
  BOOL v62 = (char)v56 + (char)v52 < 8;
  if ((char)v56 > 7) {
    BOOL v62 = 0;
  }
  if (v61 > 4) {
    BOOL v62 = 0;
  }
  do
  {
    if (*v53)
    {
      unsigned int v63 = *v53 - (((*v53 >> 1) & 0x5B6DB6DB) + ((*v53 >> 2) & 0x9249249));
      unsigned int v60 = ((v63 + (v63 >> 3)) & 0xC71C71C7) + v60 - 63 * (((v63 + (v63 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v53;
  }
  while (v53 >= __src);
  unsigned int v64 = 0;
  int v65 = v62 & v50;
  do
  {
    if (*v57)
    {
      unsigned int v66 = *v57 - (((*v57 >> 1) & 0x5B6DB6DB) + ((*v57 >> 2) & 0x9249249));
      unsigned int v64 = ((v66 + (v66 >> 3)) & 0xC71C71C7) + v64 - 63 * (((v66 + (v66 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v57;
  }
  while (v57 >= v150);
  if ((char)v64 >= 2) {
    char v67 = -7;
  }
  else {
    char v67 = -4;
  }
  if ((v65 & ((char)v64 > 1)) != 0) {
    char v68 = 2;
  }
  else {
    char v68 = 0;
  }
  if ((char)v60 >= 4) {
    char v69 = v60;
  }
  else {
    char v69 = v60 + 1;
  }
  char v70 = v69 + v64 + v67 + v68;
  if (v70 < 0) {
    return 0;
  }
  int v71 = **(_DWORD **)(v51 + 744);
  int v72 = *(_DWORD *)(v51 + 728);
  if (*(_DWORD *)(v51 + 272))
  {
    if ((v71 - v72) < 0x1F5) {
      return 0;
    }
  }
  if (v71 == v72
    && BlueFin::GlSetBase::operator==(v51 + 72, (uint64_t)&__src)
    && BlueFin::GlSetBase::operator==(v51 + 160, (uint64_t)&v150))
  {
    return 0;
  }
  uint64_t v74 = 0;
  int v147 = v70;
  *(_DWORD *)(v51 + 728) = **(_DWORD **)(v51 + 744);
  do
  {
    double v75 = &a55 + v74;
    v75[32] = 0;
    *((_DWORD *)v75 + 9) = -1;
    *((_WORD *)v75 + 20) = 575;
    v74 += 56;
  }
  while (v74 != 784);
  int v148 = v65;
  a25 = &a55;
  *(_OWORD *)&STACK[0x730] = 0u;
  *(_OWORD *)&STACK[0x720] = 0u;
  *(_OWORD *)&STACK[0x710] = 0u;
  *(_OWORD *)&STACK[0x700] = 0u;
  *(_OWORD *)&STACK[0x6F0] = 0u;
  *(_OWORD *)&STACK[0x6E0] = 0u;
  *(_OWORD *)&STACK[0x6D0] = 0u;
  *(_OWORD *)&STACK[0x6C0] = 0u;
  *(_OWORD *)&STACK[0x6B0] = 0u;
  *(_OWORD *)&STACK[0x6A0] = 0u;
  *(_OWORD *)&STACK[0x690] = 0u;
  *(_OWORD *)&STACK[0x680] = 0u;
  *(_OWORD *)&STACK[0x670] = 0u;
  *(_OWORD *)&STACK[0x660] = 0u;
  *(_OWORD *)&STACK[0x650] = 0u;
  *(_OWORD *)&STACK[0x640] = 0u;
  *(_OWORD *)&STACK[0x630] = 0u;
  *(_OWORD *)&STACK[0x620] = 0u;
  *(_OWORD *)&STACK[0x610] = 0u;
  *(_OWORD *)&STACK[0x600] = 0u;
  *(_OWORD *)&STACK[0x5F0] = 0u;
  *(_OWORD *)&STACK[0x5E0] = 0u;
  *(_OWORD *)&STACK[0x5D0] = 0u;
  *(_OWORD *)&STACK[0x5C0] = 0u;
  *(_OWORD *)&STACK[0x5B0] = 0u;
  *(_OWORD *)&STACK[0x5A0] = 0u;
  *(_OWORD *)&STACK[0x590] = 0u;
  *(_OWORD *)&STACK[0x580] = 0u;
  *(_OWORD *)&STACK[0x570] = 0u;
  *(_OWORD *)&STACK[0x560] = 0u;
  long long v76 = (_WORD *)((unint64_t)&STACK[0x540] | 0x14);
  uint64_t v77 = 575;
  *(_OWORD *)&STACK[0x550] = 0u;
  *(_OWORD *)&STACK[0x540] = 0u;
  do
  {
    *(void *)(v76 - 2) = 0;
    *(void *)(v76 - 6) = 0;
    *(void *)(v76 - 10) = 0;
    *((_DWORD *)v76 - 1) = -1;
    *long long v76 = 575;
    v76 += 12;
    --v77;
  }
  while (v77);
  LOBYTE(a35) = vars0;
  memcpy((char *)&a35 + 8, __src, 4 * vars0);
  WORD1(a35) = 0;
  BYTE1(a35) = 0;
  DWORD1(a35) = DWORD2(a35);
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a35);
  long long v78 = &STACK[0x540];
  if (BYTE1(a35) != a35)
  {
    int v79 = 0;
    long long v78 = &STACK[0x540];
    do
    {
      if (WORD1(a35) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      long long v80 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(a35);
      char v81 = *v80;
      LODWORD(v80) = v80[1];
      LOBYTE(a26) = v81;
      HIDWORD(a26) = v80;
      a27 = WORD1(a35);
      uint64_t v82 = BlueFin::GlPeMsmtMgr::AccessPeMeas(*(BlueFin::GlPeMsmtMgr **)(v51 + 744), (const BlueFin::GlSignalId *)&a26, 0);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v51 + 744), (const BlueFin::GlSignalId *)&a26, 0, 0);
      if (MeMeas)
      {
        uint64_t v84 = MeMeas;
        a34 = *MeMeas;
        unsigned int v85 = BlueFin::GlSvId::s_aucSvId2gnss[a34];
        a30 = 0.0;
        if (BlueFin::GlPeTimeManager::GetSystemConversionS(*(void *)(v51 + 736), v85, &a30) <= 501.0)
        {
          double v87 = *((double *)v84 + 7);
          double v88 = a30;
          unsigned int v89 = **(_DWORD **)(v51 + 744);
          a29 = 0.0;
          BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(*(void *)(v51 + 736), &a34, (uint64_t *)&a29, &a28);
          double v90 = a29;
          double v91 = fmod(a29, 4294967300.0);
          if (v90 <= 4294967300.0) {
            double v91 = v90;
          }
          if (v91 < -4294967300.0) {
            double v91 = -fmod(-v91, 4294967300.0);
          }
          double v92 = floor((v87 + v88) / 86400.0);
          double v93 = (v87 + v88 - v92 * 86400.0) * 1000.0;
          if (v91 < 0.0) {
            unsigned int v94 = --v91;
          }
          else {
            unsigned int v94 = v91;
          }
          if (!v79)
          {
            double v95 = fmod((v87 + v88 - v92 * 86400.0) * 1000.0, 4294967300.0);
            if (v93 <= 4294967300.0) {
              double v95 = v93;
            }
            if (v95 < -4294967300.0) {
              double v95 = -fmod(-v95, 4294967300.0);
            }
            if (v95 < 0.0) {
              unsigned int v96 = --v95;
            }
            else {
              unsigned int v96 = v95;
            }
            int v79 = v94 - v89 + v96;
          }
          int v86 = (int)((double)v89 + (double)v79 - v93);
          if (v86 >= 0) {
            unsigned int v97 = (int)((double)v89 + (double)v79 - v93);
          }
          else {
            unsigned int v97 = -v86;
          }
          if (v97 >= 0x2932E01)
          {
            double v98 = (double)v86 / 86400000.0;
            if (v98 <= 0.0)
            {
              double v99 = 0.0;
              if (v98 < 0.0) {
                double v99 = ceil(v98 + -0.5);
              }
            }
            else
            {
              double v99 = floor(v98 + 0.5);
            }
            int v86 = (int)((double)v86 + v99 * -86400000.0);
          }
        }
        else
        {
          int v86 = 0;
        }
        *(_DWORD *)(v82 + 64) = v86;
        if ((char **)((char *)v78 + 12) != &a26)
        {
          *((unsigned char *)v78 + 12) = (_BYTE)a26;
          *((_DWORD *)v78 + 4) = HIDWORD(a26);
          *((_WORD *)v78 + 10) = a27;
        }
        *(double *)long long v78 = *((float *)v84 + 22) * 299792458.0;
        v78 += 3;
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a35);
    }
    while (BYTE1(a35) != a35);
  }
  unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * (v78 - &STACK[0x540]);
  int v101 = (char)v100;
  if ((char)v100 > 8)
  {
    uint64_t v102 = v100;
    uint64_t v103 = 1;
    do
    {
      uint64_t v104 = &STACK[0x540] + 3 * v103;
      if (*((double *)v104 - 3) > *(double *)v104)
      {
        int v105 = v103 - 1;
        if (v103 != 1)
        {
          int v106 = 0;
          do
          {
            int v107 = v105 + v106;
            if (v105 + v106 < 0 != __OFADD__(v105, v106)) {
              ++v107;
            }
            int v108 = v107 >> 1;
            if (*((double *)&STACK[0x540] + 3 * v108) <= *(double *)v104) {
              int v106 = v108 + 1;
            }
            else {
              int v105 = v108;
            }
          }
          while (v106 != v105);
        }
        a35 = *(_OWORD *)v104;
        a36 = v104[2];
        int v109 = &STACK[0x540] + 3 * v105;
        memmove(&STACK[0x540] + 3 * v105 + 3, v109, 24 * ((int)v103 - v105));
        *(_OWORD *)int v109 = a35;
        v109[2] = a36;
      }
      ++v103;
    }
    while (v103 != v102);
  }
  uint64_t v110 = (char *)__src;
  uint64_t v111 = vars0;
  bzero(__src, ((4 * vars0 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if (v101 >= 1)
  {
    if (v101 >= 8) {
      unsigned __int8 v112 = 8;
    }
    else {
      unsigned __int8 v112 = v101;
    }
    uint64_t v113 = v112;
    uint64_t v114 = *(BlueFin::GlPeMsmtMgr **)(v51 + 744);
    unint64_t v115 = (unint64_t)&STACK[0x540] | 0xC;
    long long v116 = &a55;
    do
    {
      *((_DWORD *)__src + (*(__int16 *)(v115 + 8) >> 5)) |= 1 << *(_WORD *)(v115 + 8);
      uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(v114, (const BlueFin::GlSignalId *)v115, 0);
      *(void *)long long v116 = 0;
      *((void *)v116 + 1) = 0;
      *((_DWORD *)v116 + 5) = 0;
      *(_WORD *)(v116 + 49) = 0;
      v116[32] = 0;
      *((_DWORD *)v116 + 9) = -1;
      *((_WORD *)v116 + 20) = 575;
      *((_DWORD *)v116 + 11) = 0;
      uint64_t v114 = *(BlueFin::GlPeMsmtMgr **)(v51 + 744);
      *((_DWORD *)v116 + 4) = *(_DWORD *)v114;
      if ((char *)v115 != v116 + 32)
      {
        v116[32] = *(unsigned char *)v115;
        *((_DWORD *)v116 + 9) = *(_DWORD *)(v115 + 4);
        *((_WORD *)v116 + 20) = *(_WORD *)(v115 + 8);
      }
      *(_OWORD *)long long v116 = *(_OWORD *)(PeMeas + 32);
      v116[48] = 1;
      *((void *)v116 + 3) = *(void *)(PeMeas + 64);
      v116 += 56;
      a25 = v116;
      v115 += 24;
      --v113;
    }
    while (v113);
    uint64_t v110 = (char *)__src;
    uint64_t v111 = vars0;
  }
  unsigned int v118 = 0;
  uint64_t v119 = &v110[4 * v111 - 4];
  do
  {
    if (*(_DWORD *)v119)
    {
      unsigned int v120 = *(_DWORD *)v119 - (((*(_DWORD *)v119 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v119 >> 2) & 0x9249249));
      unsigned int v118 = ((v120 + (v120 >> 3)) & 0xC71C71C7) + v118 - 63 * (((v120 + (v120 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v119 -= 4;
  }
  while (v119 >= v110);
  BlueFin::GlPeDnavMgr::PackMeasRr(v51, (uint64_t)&a25);
  LOBYTE(a30) = -73 * ((a25 - &a55) >> 3);
  *(void *)(v51 + 720) = v51;
  BlueFin::GlPeDnav::Run(v51, (uint64_t)&a55, &a30, (BlueFin::GlSetBase *)&__src, (BlueFin::GlSetBase *)&v150, v148, v149);
  uint64_t v121 = *(void *)(v51 + 720);
  unsigned int v122 = *(_DWORD *)(v121 + 268);
  if (v147 >= 1 && (*(_DWORD *)(v121 + 24) > 0x186A0u || (v122 & 0x20) == 0))
  {
    unsigned int v123 = 0;
    LODWORD(a37) = 6367427;
    a40 = (char *)&a41 + 4;
    a35 = 0uLL;
    a36 = 0;
    *(long long *)((char *)&a37 + 4) = 0u;
    *(long long *)((char *)&a38 + 4) = 0u;
    a39 = 0u;
    *(long long *)((char *)&a41 + 4) = 0u;
    *(long long *)((char *)&a42 + 4) = 0u;
    *(long long *)((char *)&a43 + 4) = 0u;
    a46 = (char *)&a47 + 4;
    LOBYTE(a41) = 19;
    *(long long *)((char *)&a44 + 4) = 0u;
    a45 = 0u;
    LOBYTE(a47) = 19;
    *(long long *)((char *)&a47 + 4) = 0u;
    *(long long *)((char *)&a48 + 4) = 0u;
    *(long long *)((char *)&a49 + 4) = 0u;
    *(long long *)((char *)&a50 + 4) = 0u;
    a51 = 0u;
    a52 = vdupq_n_s64(0x41584A30AEF9DB23uLL);
    *(void *)((char *)&a53 + 4) = 0;
    long long v124 = (char *)__src + 4 * vars0 - 4;
    LOBYTE(a53) = 0;
    do
    {
      if (*v124)
      {
        unsigned int v125 = *v124 - (((*v124 >> 1) & 0x5B6DB6DB) + ((*v124 >> 2) & 0x9249249));
        unsigned int v123 = ((v125 + (v125 >> 3)) & 0xC71C71C7) + v123 - 63 * (((v125 + (v125 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v124;
    }
    while (v124 >= __src);
    if ((unsigned __int16)v123 < 3u) {
      goto LABEL_117;
    }
    unsigned int v126 = 0;
    uint64_t v127 = (char *)v150 + 4 * LOBYTE(v151[0]) - 4;
    do
    {
      if (*v127)
      {
        unsigned int v128 = *v127 - (((*v127 >> 1) & 0x5B6DB6DB) + ((*v127 >> 2) & 0x9249249));
        unsigned int v126 = ((v128 + (v128 >> 3)) & 0xC71C71C7) + v126 - 63 * (((v128 + (v128 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v127;
    }
    while (v127 >= v150);
    if ((unsigned __int16)v126 < 3u)
    {
      bzero(v150, ((4 * LOBYTE(v151[0]) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      BlueFin::GlPeDnav::Run(v51, (uint64_t)&a55, &a30, (BlueFin::GlSetBase *)&__src, (BlueFin::GlSetBase *)&v150, v148, v149);
      uint64_t v129 = (unint64_t *)v51;
    }
    else
    {
      BlueFin::GlPeDnavMgr::Isolate((uint64_t)&STACK[0x540], v51, (uint64_t)&a55, &a30, (uint64_t)&__src, (BlueFin::GlSetBase *)&v150, v148, v149);
      uint64_t v129 = &STACK[0x540];
    }
    BlueFin::stDnavState::operator=((uint64_t)&a35, (uint64_t)v129);
    if ((BYTE4(a53) & 0x20) == 0)
    {
LABEL_117:
      BlueFin::GlPeDnavMgr::CountMeas((BlueFin::GlPeDnavMgr *)v51, &__src, &v150);
      STACK[0x540] = (unint64_t)&STACK[0x54C];
      LOBYTE(STACK[0x548]) = 19;
      *(_OWORD *)&STACK[0x54C] = 0u;
      *(_OWORD *)&STACK[0x55C] = 0u;
      *(_OWORD *)&STACK[0x56C] = 0u;
      *(_OWORD *)&STACK[0x57C] = 0u;
      *(_OWORD *)&STACK[0x588] = 0u;
      BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&STACK[0x540]);
      unsigned int v130 = 0;
      long long vars0_4 = *(_OWORD *)&STACK[0x54C];
      uint64_t v131 = (char *)__src + 4 * vars0 - 4;
      do
      {
        if (*v131)
        {
          unsigned int v132 = *v131 - (((*v131 >> 1) & 0x5B6DB6DB) + ((*v131 >> 2) & 0x9249249));
          unsigned int v130 = ((v132 + (v132 >> 3)) & 0xC71C71C7) + v130 - 63 * (((v132 + (v132 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v131;
      }
      while (v131 >= __src);
      unsigned int v133 = 0;
      int v134 = (char *)v150 + 4 * LOBYTE(v151[0]) - 4;
      do
      {
        if (*v134)
        {
          unsigned int v135 = *v134 - (((*v134 >> 1) & 0x5B6DB6DB) + ((*v134 >> 2) & 0x9249249));
          unsigned int v133 = ((v135 + (v135 >> 3)) & 0xC71C71C7) + v133 - 63 * (((v135 + (v135 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v134;
      }
      while (v134 >= v150);
      if ((char)v133 >= 2) {
        int v136 = -7;
      }
      else {
        int v136 = -4;
      }
      if ((v148 & ((char)v133 > 1)) != 0) {
        int v137 = 2;
      }
      else {
        int v137 = 0;
      }
      if ((char)v130 < 4) {
        ++v130;
      }
      if (((v130 + v133 + v136 + v137) & 0x80) == 0)
      {
        a26 = &a55;
        BlueFin::GlPeDnavMgr::PackMeasRr(v51, (uint64_t)&a26);
        LOBYTE(a30) = -73 * ((a26 - &a55) >> 3);
        BlueFin::GlPeDnav::Run(v51, (uint64_t)&a55, &a30, (BlueFin::GlSetBase *)&__src, (BlueFin::GlSetBase *)&v150, v148, v149);
        BlueFin::stDnavState::operator=((uint64_t)&a35, v51);
        if ((BYTE4(a53) & 0x20) == 0)
        {
          unsigned int v138 = 0;
          uint64_t v139 = (char *)__src + 4 * vars0 - 4;
          do
          {
            if (*v139)
            {
              unsigned int v140 = *v139 - (((*v139 >> 1) & 0x5B6DB6DB) + ((*v139 >> 2) & 0x9249249));
              unsigned int v138 = ((v140 + (v140 >> 3)) & 0xC71C71C7) + v138 - 63 * (((v140 + (v140 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            --v139;
          }
          while (v139 >= __src);
          unsigned int v141 = 0;
          long long v142 = (char *)v150 + 4 * LOBYTE(v151[0]) - 4;
          do
          {
            if (*v142)
            {
              unsigned int v143 = *v142 - (((*v142 >> 1) & 0x5B6DB6DB) + ((*v142 >> 2) & 0x9249249));
              unsigned int v141 = ((v143 + (v143 >> 3)) & 0xC71C71C7) + v141 - 63 * (((v143 + (v143 >> 3)) & 0xC71C71C7) / 0x3F);
            }
            --v142;
          }
          while (v142 >= v150);
          if ((char)v141 >= 2) {
            char v144 = -7;
          }
          else {
            char v144 = -4;
          }
          if ((v148 & ((char)v141 > 1)) != 0) {
            char v145 = 2;
          }
          else {
            char v145 = 0;
          }
          if ((char)v138 < 4) {
            LOBYTE(v138) = v138 + 1;
          }
          if ((char)(v138 + v141 + v144 + v145) >= 1)
          {
            BlueFin::GlPeDnavMgr::Isolate((uint64_t)&STACK[0x540], v51, (uint64_t)&a55, &a30, (uint64_t)&__src, (BlueFin::GlSetBase *)&v150, v148, v149);
            BlueFin::stDnavState::operator=((uint64_t)&a35, (uint64_t)&STACK[0x540]);
          }
        }
      }
    }
    uint64_t v146 = BlueFin::stDnavState::operator=(v51 + 440, (uint64_t)&a35);
    if ((*(unsigned char *)(v51 + 708) & 0x20) != 0
      && ((v122 & 0x20) == 0 || *(_DWORD *)(v51 + 464) < *(_DWORD *)(*(void *)(v51 + 720) + 24)))
    {
      *(void *)(v51 + 720) = v146;
    }
    GlCustomLog(14, "DNAV run FDI\n");
    unsigned int v122 = *(_DWORD *)(*(void *)(v51 + 720) + 268);
  }
  return (v122 >> 4) & 1;
}

void BlueFin::GlPeDnavMgr::CountMeas(BlueFin::GlPeDnavMgr *this, void **a2, void **a3)
{
  bzero(*a2, ((4 * *((unsigned __int8 *)a2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*a3, ((4 * *((unsigned __int8 *)a3 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v47, v49, 0x13u, (const void **)(*((void *)this + 93) + 184));
  LODWORD(v43) = v48;
  memcpy(&v44, v47, 4 * v48);
  HIDWORD(v43) = v44;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
  while (BYTE1(v43) != v43)
  {
    if (WORD1(v43) >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    unsigned int v6 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v43);
    uint64_t v7 = *v6;
    LODWORD(v6) = (char)v6[1];
    LOBYTE(v41) = v7;
    HIDWORD(v41) = v6;
    __int16 v42 = WORD1(v43);
    unsigned int v8 = BlueFin::GlSvId::s_aucSvId2gnss[v7];
    if (v8 != 1)
    {
      uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*((BlueFin::GlPeMsmtMgr **)this + 93), (const BlueFin::GlSignalId *)&v41, 0);
      if (BlueFin::stPeSigMeasKF::IsPRValid(PeMeas))
      {
        if ((*((unsigned char *)PeMeas + 72) & 8) == 0)
        {
          MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*((BlueFin::GlPeMsmtMgr **)this + 93), (const BlueFin::GlSignalId *)&v41, 0, 0);
          if (MeMeas)
          {
            BOOL v11 = (~*((_DWORD *)MeMeas + 3) & 0x30) != 0 || (*((_DWORD *)MeMeas + 3) & 0xC) == 0;
            if (!v11
              && BlueFin::GlPeTimeManager::GetSystemConversionS(*((void *)this + 92), v8, (double *)v40) < 501.0)
            {
              *((_DWORD *)*a2 + (v42 >> 5)) |= 1 << v42;
            }
          }
        }
      }
      if (BlueFin::stPeSigMeasKF::IsRRValid(PeMeas) && (*((unsigned char *)PeMeas + 72) & 0x40) == 0) {
        *((_DWORD *)*a3 + (v42 >> 5)) |= 1 << v42;
      }
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
  }
  int v12 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a2);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)a2, (uint64_t)&v43);
  unsigned int v13 = 0;
  uint64_t v14 = &v43[v44 - 1];
  do
  {
    if (*v14)
    {
      unsigned int v15 = *v14 - (((*v14 >> 1) & 0x5B6DB6DB) + ((*v14 >> 2) & 0x9249249));
      unsigned int v13 = ((v15 + (v15 >> 3)) & 0xC71C71C7) + v13 - 63 * (((v15 + (v15 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v14;
  }
  while (v14 >= v43);
  if (v12 != v13)
  {
    BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)a2, 0, (uint64_t)&v41);
    BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)a2, 1, (uint64_t)v40);
    BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)a2, 2, (uint64_t)v39);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v35, (unsigned int *)&v37, 8u, &v41);
    unsigned __int8 v43 = (int *)&v45;
    LOBYTE(v44) = 8;
    long long v45 = 0u;
    long long v46 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v35, &v43, v40);
    BlueFin::GlSetBase::operator=((uint64_t)&v35, (uint64_t)&v43);
    long long v37 = v45;
    long long v38 = v46;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v28, (unsigned int *)&v29, 8u, &v41);
    unsigned __int8 v43 = (int *)&v45;
    LOBYTE(v44) = 8;
    long long v45 = 0u;
    long long v46 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v28, &v43, v40);
    BlueFin::GlSetBase::operator=((uint64_t)&v28, (uint64_t)&v43);
    long long v29 = v45;
    long long v30 = v46;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v33, 8u, &v28);
    unsigned __int8 v43 = (int *)&v45;
    LOBYTE(v44) = 8;
    long long v45 = 0u;
    long long v46 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, &v43, v39);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v43);
    long long v33 = v45;
    long long v34 = v46;
    LOBYTE(v43) = v32;
    memcpy(&v44, __src, 4 * v32);
    WORD1(v43) = 0;
    BYTE1(v43) = 0;
    HIDWORD(v43) = v44;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    while (BYTE1(v43) != v43)
    {
      if ((BYTE2(v43) + 67) < 0x44u
        || (uint64_t v16 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v43)],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v16 + 14] == 255))
      {
        __int16 v17 = 575;
      }
      else
      {
        __int16 v17 = BlueFin::GlSignalId::s_ausGnss2signalId[v16]
            + BYTE2(v43)
            - BlueFin::GlSvId::s_aucGnss2minSvId[v16]
            + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v16];
      }
      BlueFin::GlSetBase::Remove((uint64_t)a2, v17);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    }
    LOBYTE(v43) = v36;
    memcpy(&v44, v35, 4 * v36);
    WORD1(v43) = 0;
    BYTE1(v43) = 0;
    HIDWORD(v43) = v44;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    while (BYTE1(v43) != v43)
    {
      if ((BYTE2(v43) + 67) < 0x44u
        || (uint64_t v18 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v43)],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v18 + 7] == 255))
      {
        __int16 v19 = 575;
      }
      else
      {
        __int16 v19 = BlueFin::GlSignalId::s_ausGnss2signalId[v18]
            + BYTE2(v43)
            + BlueFin::GlSvId::s_aucGnss2numSvId[v18]
            - BlueFin::GlSvId::s_aucGnss2minSvId[v18];
      }
      BlueFin::GlSetBase::Remove((uint64_t)a2, v19);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    }
  }
  int v20 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a3);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)a3, (uint64_t)&v43);
  unsigned int v21 = 0;
  int v22 = &v43[v44 - 1];
  do
  {
    if (*v22)
    {
      unsigned int v23 = *v22 - (((*v22 >> 1) & 0x5B6DB6DB) + ((*v22 >> 2) & 0x9249249));
      unsigned int v21 = ((v23 + (v23 >> 3)) & 0xC71C71C7) + v21 - 63 * (((v23 + (v23 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v22;
  }
  while (v22 >= v43);
  if (v20 != v21)
  {
    BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)a3, 0, (uint64_t)&v41);
    BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)a3, 1, (uint64_t)v40);
    BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)a3, 2, (uint64_t)v39);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v35, (unsigned int *)&v37, 8u, &v41);
    unsigned __int8 v43 = (int *)&v45;
    LOBYTE(v44) = 8;
    long long v45 = 0u;
    long long v46 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v35, &v43, v40);
    BlueFin::GlSetBase::operator=((uint64_t)&v35, (uint64_t)&v43);
    long long v37 = v45;
    long long v38 = v46;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v28, (unsigned int *)&v29, 8u, &v41);
    unsigned __int8 v43 = (int *)&v45;
    LOBYTE(v44) = 8;
    long long v45 = 0u;
    long long v46 = 0u;
    BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&v28, &v43, v40);
    BlueFin::GlSetBase::operator=((uint64_t)&v28, (uint64_t)&v43);
    long long v29 = v45;
    long long v30 = v46;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v33, 8u, &v28);
    unsigned __int8 v43 = (int *)&v45;
    LOBYTE(v44) = 8;
    long long v45 = 0u;
    long long v46 = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, &v43, v39);
    BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v43);
    long long v33 = v45;
    long long v34 = v46;
    LOBYTE(v43) = v32;
    memcpy(&v44, __src, 4 * v32);
    WORD1(v43) = 0;
    BYTE1(v43) = 0;
    HIDWORD(v43) = v44;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    while (BYTE1(v43) != v43)
    {
      if ((BYTE2(v43) + 67) < 0x44u
        || (uint64_t v24 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v43)],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v24 + 14] == 255))
      {
        __int16 v25 = 575;
      }
      else
      {
        __int16 v25 = BlueFin::GlSignalId::s_ausGnss2signalId[v24]
            + BYTE2(v43)
            - BlueFin::GlSvId::s_aucGnss2minSvId[v24]
            + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v24];
      }
      BlueFin::GlSetBase::Remove((uint64_t)a3, v25);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    }
    LOBYTE(v43) = v36;
    memcpy(&v44, v35, 4 * v36);
    WORD1(v43) = 0;
    BYTE1(v43) = 0;
    HIDWORD(v43) = v44;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    while (BYTE1(v43) != v43)
    {
      if ((BYTE2(v43) + 67) < 0x44u
        || (uint64_t v26 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v43)],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v26 + 7] == 255))
      {
        __int16 v27 = 575;
      }
      else
      {
        __int16 v27 = BlueFin::GlSignalId::s_ausGnss2signalId[v26]
            + BYTE2(v43)
            + BlueFin::GlSvId::s_aucGnss2numSvId[v26]
            - BlueFin::GlSvId::s_aucGnss2minSvId[v26];
      }
      BlueFin::GlSetBase::Remove((uint64_t)a3, v27);
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v43);
    }
  }
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a2) == 1) {
    bzero(*a2, ((4 * *((unsigned __int8 *)a2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)a3) == 1) {
    bzero(*a3, ((4 * *((unsigned __int8 *)a3 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
}

void BlueFin::GlPeDnavMgr::PackMeasRr(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  STACK[0x1258] = *MEMORY[0x263EF8340];
  if (!v3 || (unsigned int v6 = v3, !*v3))
  {
    uint64_t v35 = "pastDNMeas && *pastDNMeas";
    DeviceFaultNotify("glpe_dnav.cpp", 1258, "PackMeasRr", (char)"pastDNMeas && *pastDNMeas");
    unsigned __int8 v36 = "glpe_dnav.cpp";
    int v37 = 1258;
LABEL_36:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v36, v37, v35);
  }
  int v7 = v5;
  uint64_t v8 = v4;
  uint64_t v9 = v2;
  uint64_t v10 = -4512;
  memset(var40, 0, sizeof(var40));
  do
  {
    BOOL v11 = (char *)var40 + v10;
    *((void *)v11 + 566) = 0;
    *((_OWORD *)v11 + 282) = 0uLL;
    *((_DWORD *)v11 + 1132) = -1;
    *((_WORD *)v11 + 2266) = 575;
    v10 += 24;
  }
  while (v10);
  uint64_t v12 = *(unsigned __int8 *)(v4 + 8);
  LOBYTE(STACK[0x11D0]) = v12;
  memcpy(&STACK[0x11D8], *(const void **)v4, 4 * v12);
  LOWORD(STACK[0x11D2]) = 0;
  LOBYTE(STACK[0x11D1]) = 0;
  LODWORD(STACK[0x11D4]) = STACK[0x11D8];
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x11D0]);
  unsigned int v13 = (char *)var40;
  if (LOBYTE(STACK[0x11D1]) == LOBYTE(STACK[0x11D0])) {
    goto LABEL_10;
  }
  unint64_t v14 = (unint64_t)var40 | 0xC;
  do
  {
    unint64_t v15 = LOWORD(STACK[0x11D2]);
    if (v15 >= 0x23F)
    {
      uint64_t v35 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      unsigned __int8 v36 = "glsignalid.h";
      int v37 = 577;
      goto LABEL_36;
    }
    uint64_t v16 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v15;
    int v17 = v16[1];
    *(unsigned char *)unint64_t v14 = *v16;
    *(_DWORD *)(v14 + 4) = v17;
    *(_WORD *)(v14 + 8) = v15;
    *(double *)(v14 - 12) = *((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v9 + 744), (const BlueFin::GlSignalId *)v14, 0, 0)+ 25);
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x11D0]);
    v14 += 24;
  }
  while (LOBYTE(STACK[0x11D1]) != LOBYTE(STACK[0x11D0]));
  unsigned int v13 = (char *)(v14 - 12);
LABEL_10:
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)var40) >> 3);
  int v19 = (char)v18;
  if (v7 >= 8) {
    int v20 = 8;
  }
  else {
    int v20 = v7;
  }
  if (v20 < (char)v18 && (char)v18 >= 2)
  {
    uint64_t v21 = (char)v18 & 0xFFFFFFFFLL;
    uint64_t v22 = 1;
    do
    {
      unsigned int v23 = (char *)var40 + 24 * v22;
      if (*((double *)v23 - 3) > *(double *)v23)
      {
        int v24 = v22 - 1;
        if (v22 != 1)
        {
          int v25 = 0;
          do
          {
            int v26 = v24 + v25;
            if (v24 + v25 < 0 != __OFADD__(v24, v25)) {
              ++v26;
            }
            int v27 = v26 >> 1;
            if (*((double *)var40 + 3 * v27) <= *(double *)v23) {
              int v25 = v27 + 1;
            }
            else {
              int v24 = v27;
            }
          }
          while (v25 != v24);
        }
        *(_OWORD *)&STACK[0x11D0] = *(_OWORD *)v23;
        STACK[0x11E0] = *((void *)v23 + 2);
        unsigned int v28 = (void *)var40 + 3 * v24;
        memmove((char *)&var40[1] + 24 * v24 + 8, v28, 24 * ((int)v22 - v24));
        *(_OWORD *)unsigned int v28 = *(_OWORD *)&STACK[0x11D0];
        uint64_t v28[2] = STACK[0x11E0];
      }
      ++v22;
    }
    while (v22 != v21);
  }
  bzero(*(void **)v8, ((4 * *(unsigned __int8 *)(v8 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  int v29 = (char)v20;
  if (v19 < (char)v20) {
    int v29 = v19;
  }
  if (v29 >= 1)
  {
    uint64_t v30 = v29;
    uint64_t v31 = *v6;
    unint64_t v32 = (unint64_t)var40 | 0xC;
    float64x2_t v38 = (float64x2_t)vdupq_n_s64(0x41B1DE784A000000uLL);
    do
    {
      *(_DWORD *)(*(void *)v8 + 4 * (*(__int16 *)(v32 + 8) >> 5)) |= 1 << *(_WORD *)(v32 + 8);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v9 + 744), (const BlueFin::GlSignalId *)v32, 0, 0);
      *(void *)uint64_t v31 = 0;
      *(void *)(v31 + 8) = 0;
      *(void *)(v31 + 20) = 0xFFFFFFFF00000000;
      *(_DWORD *)(v31 + 28) = -1;
      *(_WORD *)(v31 + 49) = 0;
      *(unsigned char *)(v31 + 32) = 0;
      *(_DWORD *)(v31 + 36) = -1;
      *(_WORD *)(v31 + 40) = 575;
      *(_DWORD *)(v31 + 44) = 2;
      *(_DWORD *)(v31 + 16) = **(_DWORD **)(v9 + 744);
      if (v32 != v31 + 32)
      {
        *(unsigned char *)(v31 + 32) = *(unsigned char *)v32;
        *(_DWORD *)(v31 + 36) = *(_DWORD *)(v32 + 4);
        *(_WORD *)(v31 + 40) = *(_WORD *)(v32 + 8);
      }
      v34.f32[0] = -*((float *)MeMeas + 24);
      v34.i32[1] = *((_DWORD *)MeMeas + 25);
      *(float64x2_t *)uint64_t v31 = vmulq_f64(vcvtq_f64_f32(v34), v38);
      *(unsigned char *)(v31 + 48) = 1;
      uint64_t v31 = *v6 + 56;
      *unsigned int v6 = v31;
      v32 += 24;
      --v30;
    }
    while (v30);
  }
}

int64x2_t BlueFin::GlPeDnavMgr::Isolate(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5, BlueFin::GlSetBase *a6, int a7, void *a8)
{
  memset(v43, 0, sizeof(v43));
  int v44 = 6367427;
  long long v45 = 0u;
  memset(v46, 0, sizeof(v46));
  uint64_t v47 = v49;
  char v48 = 19;
  memset(v49, 0, sizeof(v49));
  int v50 = v52;
  char v51 = 19;
  memset(v52, 0, sizeof(v52));
  int64x2_t v53 = vdupq_n_s64(0x41584A30AEF9DB23uLL);
  char v54 = 0;
  uint64_t v55 = 0;
  memset(v30, 0, sizeof(v30));
  int v31 = 6367427;
  long long v32 = 0u;
  memset(v33, 0, sizeof(v33));
  float32x2_t v34 = v36;
  char v35 = 19;
  memset(v36, 0, sizeof(v36));
  int v37 = v39;
  char v38 = 19;
  memset(v39, 0, sizeof(v39));
  int64x2_t v40 = v53;
  char v41 = 0;
  uint64_t v42 = 0;
  unsigned __int8 v25 = *(unsigned char *)(a5 + 8);
  memcpy(v29, *(const void **)a5, 4 * v25);
  unsigned __int16 v27 = 0;
  unsigned __int8 v26 = 0;
  int v28 = v29[0];
  BlueFin::GlSetIterator::operator++(&v25);
  if (v26 != v25)
  {
    while (1)
    {
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v23, v24, 0x13u, (const void **)a5);
      if (v27 >= 0x23Fu) {
        break;
      }
      BlueFin::GlSetBase::Remove((uint64_t)v23, (__int16)v27);
      BlueFin::GlPeDnav::Run(a2, a3, a4, (BlueFin::GlSetBase *)v23, a6, a7, a8);
      if ((*(unsigned char *)(a2 + 268) & 0x20) != 0)
      {
        if (*(double *)(a2 + 248) < *(double *)v53.i64) {
          BlueFin::stDnavState::operator=((uint64_t)v43, a2);
        }
        if (*(double *)(a2 + 256) < *(double *)&v40.i64[1]) {
          BlueFin::stDnavState::operator=((uint64_t)v30, a2);
        }
      }
      BlueFin::GlSetIterator::operator++(&v25);
      if (v26 == v25) {
        goto LABEL_9;
      }
    }
LABEL_31:
    DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
  }
LABEL_9:
  unsigned __int8 v25 = *((unsigned char *)a6 + 8);
  memcpy(v29, *(const void **)a6, 4 * v25);
  unsigned __int16 v27 = 0;
  unsigned __int8 v26 = 0;
  int v28 = v29[0];
  BlueFin::GlSetIterator::operator++(&v25);
  while (v26 != v25)
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v23, v24, 0x13u, (const void **)a6);
    if (v27 >= 0x23Fu) {
      goto LABEL_31;
    }
    BlueFin::GlSetBase::Remove((uint64_t)v23, (__int16)v27);
    BlueFin::GlPeDnav::Run(a2, a3, a4, (BlueFin::GlSetBase *)a5, (BlueFin::GlSetBase *)v23, a7, a8);
    if ((*(unsigned char *)(a2 + 268) & 0x20) != 0)
    {
      if (*(double *)(a2 + 248) < *(double *)v53.i64) {
        BlueFin::stDnavState::operator=((uint64_t)v43, a2);
      }
      if (*(double *)(a2 + 256) < *(double *)&v40.i64[1]) {
        BlueFin::stDnavState::operator=((uint64_t)v30, a2);
      }
    }
    BlueFin::GlSetIterator::operator++(&v25);
  }
  uint64_t v16 = (const void **)&v47;
  if ((v55 & 0x20) != 0 && (v42 & 0x20) == 0)
  {
    int v17 = (const void **)&v50;
    unint64_t v18 = v43;
LABEL_28:
    *(_OWORD *)a1 = *(_OWORD *)v18;
    *(void *)(a1 + 16) = v18[2];
    int v19 = *((_DWORD *)v18 + 7);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)v18 + 6);
    *(_DWORD *)(a1 + 28) = v19;
    *(void *)(a1 + 32) = v18[4];
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v18 + 5);
    uint64_t v20 = v18[8];
    *(void *)(a1 + 56) = v18[7];
    *(void *)(a1 + 64) = v20;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)(a1 + 72), (unsigned int *)(a1 + 84), 0x13u, v16);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)(a1 + 160), (unsigned int *)(a1 + 172), 0x13u, v17);
    result.i64[0] = v18[31];
    uint64_t v22 = v18[32];
    *(void *)(a1 + 248) = result.i64[0];
    *(void *)(a1 + 256) = v22;
    *(unsigned char *)(a1 + 264) = *((unsigned char *)v18 + 264);
    *(_DWORD *)(a1 + 268) = *((_DWORD *)v18 + 67);
    *(_DWORD *)(a1 + 272) = *((_DWORD *)v18 + 68);
    return result;
  }
  int v17 = (const void **)&v37;
  if ((v55 & 0x20) == 0 || (v42 & 0x20) == 0)
  {
    if ((v55 & 0x20) != 0 || (v42 & 0x20) == 0) {
      goto LABEL_29;
    }
LABEL_27:
    unint64_t v18 = v30;
    uint64_t v16 = (const void **)&v34;
    goto LABEL_28;
  }
  if (BlueFin::GlSetBase::operator==((uint64_t)&v34, (uint64_t)&v47)
    && BlueFin::GlSetBase::operator==((uint64_t)&v34, (uint64_t)&v47))
  {
    goto LABEL_27;
  }
LABEL_29:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 6367427;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = a1 + 84;
  *(unsigned char *)(a1 + 80) = 19;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(void *)(a1 + 160) = a1 + 172;
  *(unsigned char *)(a1 + 168) = 19;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  int64x2_t result = vdupq_n_s64(0x41584A30AEF9DB23uLL);
  *(int64x2_t *)(a1 + 248) = result;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 268) = 0;
  return result;
}

double BlueFin::GlPeExtLoc::GetDistanceToExtLoc(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (!v2
    || !*(unsigned char *)(v2 + 3008)
    || *(double *)(v2 + 3040) * *(double *)(v2 + 3040) + *(double *)(v2 + 3048) * *(double *)(v2 + 3048) >= 160000.0)
  {
    return -1.0;
  }
  uint64_t v3 = *(void *)(v2 + 3032);
  long long v5 = *(_OWORD *)(v2 + 3016);
  uint64_t v6 = v3;
  BlueFin::lla2ned(a2, (double *)&v5, 0, &v7);
  return sqrt(v8 * v8 + v7 * v7);
}

float BlueFin::GlPeIsolate::RecurseIsolation(uint64_t a1, uint64_t a2, const void **a3, long long *a4, int a5)
{
  if (a5)
  {
    long long v8 = a4[2];
    long long v9 = a4[4];
    v20[3] = a4[3];
    v20[4] = v9;
    int v21 = *((_DWORD *)a4 + 20);
    long long v10 = *a4;
    long long v11 = a4[1];
    v20[0] = *a4;
    v20[1] = v11;
    v20[2] = v8;
    if (BYTE1(v20[0]) != LOBYTE(v20[0]))
    {
      uint64_t v12 = (a5 - 1);
      do
      {
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v17, &v18, 0x13u, a3);
        if (WORD1(v20[0]) >= 0x23Fu)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        *(_DWORD *)(*(void *)&v17 + (((unint64_t)WORD1(v20[0]) >> 3) & 0x1FFC)) |= 1 << SBYTE2(v20[0]);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v20);
        BlueFin::GlPeIsolate::RecurseIsolation(a1, a2, &v17, v20, v12);
      }
      while (BYTE1(v20[0]) != LOBYTE(v20[0]));
    }
  }
  else
  {
    (*(void (**)(double *__return_ptr, uint64_t, uint64_t, const void **))(*(void *)a1 + 24))(&v17, a1, a2, a3);
    if (v19 > *(unsigned __int8 *)(a1 + 232))
    {
      LODWORD(v10) = LODWORD(v17);
      if (v17 >= *(float *)(a1 + 204))
      {
        if (v17 >= *(float *)(a1 + 208)) {
          return *(float *)&v10;
        }
        uint64_t v13 = 1;
      }
      else
      {
        BlueFin::GlSetBase::operator=(a1 + 112, a1 + 24);
        uint64_t v13 = 0;
        *(unsigned char *)(a1 + 201) = *(unsigned char *)(a1 + 200);
        *(_OWORD *)(a1 + 140) = *(_OWORD *)(a1 + 52);
        *(_OWORD *)(a1 + 156) = *(_OWORD *)(a1 + 68);
        *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 84);
        *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 96);
        *(_OWORD *)(a1 + 124) = *(_OWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 208) = *(_DWORD *)(a1 + 204);
        *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 212);
      }
      uint64_t v14 = a1 + 24 + 88 * v13;
      bzero(*(void **)v14, ((4 * *(unsigned __int8 *)(v14 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      BlueFin::GlSetBase::Add(v14, (int **)a3);
      *(float *)&long long v10 = v17;
      uint64_t v15 = a1 + 24 + 4 * v13;
      *(_DWORD *)(v15 + 180) = v10;
      *(unsigned char *)(a1 + 24 + v13 + 176) = v19;
      LODWORD(v10) = v18;
      *(_DWORD *)(v15 + 188) = v18;
    }
  }
  return *(float *)&v10;
}

void BlueFin::GlPeBangers::CalcMetric(const BlueFin::GlPeSubsets *a1@<X1>, const BlueFin::GlSignalIdSet *a2@<X2>, uint64_t a3@<X8>)
{
  BlueFin::GlPeSubsetIterator::GlPeSubsetIterator((unint64_t *)&v29, (unint64_t *)a1);
  if (*(void *)&v30 >= *(void *)&v29)
  {
    unsigned __int8 v6 = 0;
    float v26 = 0.0;
    double v14 = 0.0;
    double v13 = 0.0;
    double v12 = 0.0;
    double v11 = 0.0;
    double v10 = 0.0;
    double v15 = 0.0;
    double v8 = 0.0;
  }
  else
  {
    unsigned __int8 v6 = 0;
    char v7 = 0;
    float v26 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    do
    {
      unint64_t v16 = BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
      if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v16 + 24), a2)
        && *(float *)(BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29) + 112) < 15.0)
      {
        ++v6;
        float v26 = v26 + *(float *)(BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29) + 112);
        double v8 = v8 + *(double *)(BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29) + 16);
        double v17 = (double *)BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
        double v15 = *v17;
        if (v7)
        {
          if (v9 < v15) {
            double v15 = v9;
          }
          unint64_t v18 = BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
          if (v10 >= *(double *)(v18 + 8)) {
            double v10 = *(double *)(v18 + 8);
          }
          unint64_t v19 = BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
          if (v11 >= *(double *)(v19 + 16)) {
            double v11 = *(double *)(v19 + 16);
          }
          uint64_t v20 = (double *)BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
          if (*v20 >= v12) {
            double v12 = *v20;
          }
          unint64_t v21 = BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
          if (*(double *)(v21 + 8) >= v13) {
            double v13 = *(double *)(v21 + 8);
          }
          unint64_t v22 = BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
          if (*(double *)(v22 + 16) >= v14) {
            double v14 = *(double *)(v22 + 16);
          }
        }
        else
        {
          double v10 = v17[1];
          double v11 = v17[2];
          unsigned int v23 = (double *)BlueFin::GlPeSubsetIterator::operator->((unint64_t *)&v29);
          double v12 = *v23;
          double v13 = v23[1];
          double v14 = v23[2];
        }
        char v7 = 1;
        double v9 = v15;
      }
      *(void *)&v30 += 160;
    }
    while (*(void *)&v30 < *(void *)&v29);
  }
  v28[0] = v15;
  v28[1] = v10;
  uint64_t v28[2] = v11;
  v27[0] = v12;
  v27[1] = v13;
  _OWORD v27[2] = v14;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 13) = 0;
  if (v6)
  {
    BlueFin::lla2ned(v28, v27, 0, &v29);
    *(double *)a3 = sqrt(v30 * v30 + v29 * v29);
    *(unsigned char *)(a3 + 20) = v6;
    float v24 = v8;
    *(float *)(a3 + 8) = v26 / (float)v6;
    *(float *)(a3 + 12) = v24 / (float)v6;
    float v25 = v14 - v11;
    *(float *)(a3 + 16) = v25;
  }
}

BOOL BlueFin::GlPeFirstFix::RunPreIsolationFixRanges(uint64_t a1, uint64_t a2, BlueFin::GlSetBase *this, BlueFin::GlPeSubsets *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 36) = 0u;
  *(void *)(a1 + 24) = a1 + 36;
  double v12 = (BlueFin::GlSetBase *)(a1 + 24);
  *(unsigned char *)(a1 + 32) = 19;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  int32x4_t v13 = vdupq_n_s32(0x43C80000u);
  *(_OWORD *)(a1 + 112) = 0u;
  *(int32x4_t *)(a1 + 128) = v13;
  *(int32x4_t *)(a1 + 144) = v13;
  BOOL v14 = *(unsigned char *)(a2 + 176) == 0;
  if (!*(unsigned char *)(a2 + 176)) {
    uint64_t v11 = *(void *)(a2 + 256);
  }
  unsigned __int8 v15 = BlueFin::GlSetBase::Cnt(this);
  if ((v15 & 0xF0) != 0) {
    unsigned int v16 = 16;
  }
  else {
    unsigned int v16 = v15;
  }
  BOOL result = BlueFin::GlSetBase::HasAny(v12);
  if (!result && v16 >= 0xA)
  {
    while (1)
    {
      BlueFin::GlPeFirstFix::SelectBase((uint64_t)v23, a2, a5, *(void **)this, *((unsigned char *)this + 8), v16, 1);
      if (v14) {
        char v18 = 3;
      }
      else {
        char v18 = 1;
      }
      BOOL v19 = BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)a6, (uint64_t)v23, v18, 1, v11, 0);
      unint64_t v20 = BlueFin::GlPeSubsets::Find(a4, (const BlueFin::GlSignalIdSet *)v23);
      if (v20) {
        BOOL v21 = v19;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21 && v14)
      {
        *(_OWORD *)(a6 + 64) = *(_OWORD *)v20;
        *(void *)(a6 + 80) = *(void *)(v20 + 16);
        if (!*(unsigned char *)(a2 + 244))
        {
          BOOL v14 = 0;
LABEL_19:
          if (*(float *)(v20 + 128) < 25.0) {
            BlueFin::stSubset::operator=(a1, v20);
          }
          goto LABEL_22;
        }
        BOOL v14 = 0;
        *(_DWORD *)(a6 + 96) = (int)(*(float *)(v20 + 120) * 1000.0);
      }
      if (v21) {
        goto LABEL_19;
      }
LABEL_22:
      BOOL result = BlueFin::GlSetBase::HasAny(v12);
      if (v19 && ~result)
      {
        LOBYTE(v16) = v16 - 1;
        if (v16 > 9u) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

void BlueFin::GlPeNavUtil::~GlPeNavUtil(BlueFin::GlPeNavUtil *this)
{
}

void virtual thunk to'BlueFin::GlPeNavUtil::~GlPeNavUtil(BlueFin::GlPeNavUtil *this)
{
}

void BlueFin::GlPeBangers::~GlPeBangers(BlueFin::GlPeBangers *this)
{
}

void virtual thunk to'BlueFin::GlPeBangers::~GlPeBangers(BlueFin::GlPeBangers *this)
{
}

double BlueFin::GlPeIsolate::GlPeIsolate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)a1 = &unk_270EC3218;
  *(void *)(a1 + 240) = &unk_270EC3258;
  do
  {
    *(_OWORD *)(a1 + v3 + 36) = 0uLL;
    uint64_t v4 = (_OWORD *)(a1 + v3 + 36);
    *(void *)((char *)v4 - 12) = v4;
    *((unsigned char *)v4 - 4) = 19;
    v4[1] = 0uLL;
    _DWORD v4[2] = 0uLL;
    v4[3] = 0uLL;
    v3 += 88;
    *(_OWORD *)((char *)v4 + 60) = 0uLL;
  }
  while (v3 != 176);
  *(_WORD *)(a1 + 200) = 0;
  *(void *)(a1 + 212) = 0;
  *(int32x2_t *)(a1 + 204) = vdup_n_s32(0x461C4000u);
  double result = -7.67384678e21;
  *(void *)(a1 + 224) = 0xC47A0000468EE000;
  *(unsigned char *)(a1 + 232) = 0;
  return result;
}

void BlueFin::GlPeNegAltRegions::~GlPeNegAltRegions(BlueFin::GlPeNegAltRegions *this)
{
}

uint64_t BlueFin::GlPeLatLonRegionSet::getNumRegions(BlueFin::GlPeLatLonRegionSet *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t BlueFin::GlPeLatLonRegionSet::getRegion(BlueFin::GlPeLatLonRegionSet *this, int a2)
{
  return *((void *)this + 2) + 12 * a2;
}

uint64_t BlueFin::GlPeLatLonRegionSet::getNumIndicies(BlueFin::GlPeLatLonRegionSet *this)
{
  return *((unsigned int *)this + 6);
}

float BlueFin::GlPeGnssNavUpa::UnravelHeadingRad(BlueFin::GlPeGnssNavUpa *this, float a2, float a3)
{
  double v3 = a2;
  double v4 = a3;
  for (double i = v3 - a3; i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  if (i < 0.0) {
    double i = -i;
  }
  float v6 = i;
  double v7 = v6;
  if (v7 > 1.57079633 && v7 < 4.71238898)
  {
    if (v4 + 3.14159265 <= 6.28318531) {
      return v4 + 3.14159265;
    }
    else {
      return v4 + -3.14159265;
    }
  }
  return a3;
}

void BlueFin::GlPeGnssNavUpa::UrbanPosAssist(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v4 = a3 + 8;
  *(_DWORD *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  if (!*(unsigned char *)(*(void *)(a1 + 312) + 21)) {
    return;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 32);
  if ((v6 & 4) == 0 || (v6 & 2) == 0 && *(unsigned char *)(*(void *)(a1 + 328) + 1988)) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 320);
  if (!*(unsigned char *)(v8 + 3216))
  {
    LOBYTE(v17) = 0;
    int XtrackPos = 0;
    long long v14 = 0uLL;
    float v15 = 0.0;
    double v16 = 0.0;
    goto LABEL_17;
  }
  double v9 = *(double *)(v8 + 3176);
  double v10 = *(double *)(v8 + 3184);
  float v11 = *(float *)(v8 + 3192);
  *(double *)&long long v42 = v9;
  *((double *)&v42 + 1) = v10;
  double v43 = v11;
  float v12 = *(float *)(v8 + 3204);
  if (v12 < 35.0) {
    float v12 = 35.0;
  }
  if (*(_DWORD *)(*(void *)(a1 + 328) + 8) == 3) {
    float v12 = 5.0;
  }
  BlueFin::UrbanPosAsstRegionExt::UrbanPosAsstRegionExt((BlueFin::UrbanPosAsstRegionExt *)v38, v9, v10, v11, *(float *)(v8 + 3196), *(float *)(v8 + 3200), v12, *(_DWORD *)(v8 + 3208));
  BOOL isOkToUse = BlueFin::UrbanPosAsstRegionExt::isOkToUse((BlueFin::UrbanPosAsstRegionExt *)v38, (double *)(a2 + 8), (v6 >> 3) & 1, &v37, 0, *(double *)a2);
  long long v14 = 0uLL;
  float v15 = 0.0;
  double v16 = 0.0;
  if (!isOkToUse)
  {
    int v17 = 0;
    goto LABEL_16;
  }
  int v17 = *(unsigned __int8 *)(a2 + 36);
  if (!*(unsigned char *)(a2 + 36))
  {
    if (!v41 && *(_DWORD *)(a2 + 40) < 2u) {
      goto LABEL_31;
    }
LABEL_16:
    int XtrackPos = v17;
    goto LABEL_17;
  }
  if (!v41)
  {
    LOBYTE(v17) = 0;
    int XtrackPos = 0;
    goto LABEL_17;
  }
LABEL_31:
  int XtrackPos = BlueFin::UrbanPosAsstRegionExt::getXtrackPos((uint64_t)v38, (double *)(a2 + 8), (uint64_t)&v42);
  float v27 = v39;
  if ((*(unsigned char *)(a2 + 32) & 8) != 0 && !v40)
  {
    float v28 = *(double *)a2;
    float v27 = BlueFin::GlPeGnssNavUpa::UnravelHeadingRad((BlueFin::GlPeGnssNavUpa *)a1, v28, v39);
  }
  for (double i = *(double *)a2 - v27; i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  if (i < 0.0) {
    double i = -i;
  }
  if (i >= 1.04719755)
  {
    LOBYTE(v17) = 0;
    int XtrackPos = 0;
    long long v14 = 0uLL;
  }
  else
  {
    long long v14 = v42;
    LOBYTE(v17) = 1;
    double v16 = v43;
    float v15 = v27;
  }
LABEL_17:
  *(unsigned char *)a3 = XtrackPos;
  *(_OWORD *)(a3 + 8) = v14;
  *(double *)(a3 + 24) = v16;
  *(unsigned char *)(a3 + 32) = v17;
  *(float *)(a3 + 36) = v15;
  *(unsigned char *)(a3 + 40) = 0;
  if (!XtrackPos)
  {
    uint64_t v19 = *(void *)(a1 + 312);
    if (!*(unsigned char *)(v19 + 20))
    {
      int v20 = *(unsigned __int8 *)(a2 + 36);
      LOBYTE(v42) = 0;
      char v37 = 0;
      int v21 = *(_DWORD *)(a2 + 32);
      unint64_t v22 = (int *)(a1 + 32);
      int v23 = *(_DWORD *)(*(void *)(a1 + 328) + 8);
      unsigned int v24 = v23 - 1;
      if (v23 == 6) {
        char v25 = 2;
      }
      else {
        char v25 = 1;
      }
      if (v24 >= 2) {
        char v26 = v25;
      }
      else {
        char v26 = 0;
      }
      if ((*(_DWORD *)(a1 + 32) & 0x80000000) != 0) {
        goto LABEL_47;
      }
      if (v20)
      {
        if (!*(unsigned char *)(a1 + 49))
        {
LABEL_47:
          Regiouint64_t n = BlueFin::GlPeUrbanPosAsst::findRegion(v19, (float64x2_t *)(a2 + 8), (*(_DWORD *)(a2 + 32) >> 3) & 1, &v37, &v42, a2 + 36, v26, a1 + 32, *(double *)a2, (*(_DWORD *)(a2 + 32) & 0x40) != 0);
          char v31 = 0;
          *unint64_t v22 = Region;
LABEL_49:
          if ((Region & 0x80000000) == 0)
          {
            if ((v21 & 0x100) != 0)
            {
              *(unsigned char *)a3 = v42;
              return;
            }
            if ((v31 & 1) != 0
              || (v32 = (int *)BlueFin::GlPeUrbanPosAsstCache::getRegion(*(BlueFin::GlPeUrbanPosAsstCache **)(a1 + 288), Region), float v33 = *(double *)(a1 + 296), v34 = *(double *)(a1 + 304), BlueFin::GlPeUrbanPosAsstRegion::unpackRegion(v32, (uint64_t)v38, v33, v34), BlueFin::UrbanPosAsstRegionExt::operator=(a1 + 40, (uint64_t)v38), (*(_DWORD *)(a1 + 32) & 0x80000000) == 0))
            {
              char v35 = *(unsigned char *)(a1 + 49);
              if (v20)
              {
                if (!*(unsigned char *)(a1 + 49)) {
                  goto LABEL_63;
                }
                goto LABEL_58;
              }
              if (!*(unsigned char *)(a1 + 49))
              {
LABEL_58:
                int v36 = BlueFin::UrbanPosAsstRegionExt::getXtrackPos(a1 + 40, (double *)(a2 + 8), v4);
                *(unsigned char *)a3 = v36;
                *(_DWORD *)(a3 + 36) = *(_DWORD *)(a1 + 44);
                *(unsigned char *)(a3 + 40) = *(unsigned char *)(a1 + 48);
                if (v36)
                {
                  if ((*(unsigned char *)(a2 + 32) & 1) != 0 || !*(unsigned char *)(a1 + 50))
                  {
                    char v35 = 1;
                  }
                  else
                  {
                    char v35 = 0;
                    *(unsigned char *)a3 = 0;
                  }
                  goto LABEL_63;
                }
              }
            }
          }
          char v35 = 0;
LABEL_63:
          *(unsigned char *)(a3 + 32) = v35;
          return;
        }
      }
      else if (*(unsigned char *)(a1 + 49) || *(_DWORD *)(a2 + 40) >= 2u)
      {
        goto LABEL_47;
      }
      if (BlueFin::UrbanPosAsstRegionExt::isPosInside(a1 + 40, (double *)(a2 + 8), (*(_DWORD *)(a2 + 32) >> 3) & 1, &v42, (*(_DWORD *)(a2 + 32) >> 6) & 1, *(double *)a2))
      {
        Regiouint64_t n = *v22;
        char v31 = 1;
      }
      else
      {
        Regiouint64_t n = BlueFin::GlPeUrbanPosAsst::findRegion(*(void *)(a1 + 312), (float64x2_t *)(a2 + 8), (*(_DWORD *)(a2 + 32) >> 3) & 1, &v37, &v42, a2 + 36, v26, a1 + 32, *(double *)a2, (v21 & 0x40) != 0);
        char v31 = 0;
        *(_DWORD *)(a1 + 32) = Region;
      }
      goto LABEL_49;
    }
  }
}

uint64_t BlueFin::GlPeUrbanPosAsstCache::getRegion(BlueFin::GlPeUrbanPosAsstCache *this, int a2)
{
  if (!this)
  {
    DeviceFaultNotify("glpe_urbanposasst.h", 213, "getRegion", (char)"m_potLatLonCityRegion");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_urbanposasst.h", 213, "m_potLatLonCityRegion");
  }
  return (uint64_t)this + 8 * a2;
}

void BlueFin::GlPeGnssNavUpa::SetUrbanPosAssist(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(unsigned char *)(a3 + 40) = 0;
  if (!*(unsigned char *)(*(void *)(a1 + 312) + 21)) {
    return;
  }
  if (*(unsigned char *)a1) {
    return;
  }
  int v6 = *(_DWORD *)(a2 + 68);
  if ((v6 & 4) == 0) {
    return;
  }
  if ((v6 & 8) != 0) {
    int v7 = 12;
  }
  else {
    int v7 = 4;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  double v55 = *(float *)(a2 + 56);
  long long v56 = *(_OWORD *)(a2 + 8);
  uint64_t v57 = v8;
  unsigned int v58 = v7 & 0xFFFFFFFC | v6 & 3;
  char v59 = 0;
  int v60 = 1;
  BlueFin::GlPeGnssNavUpa::UrbanPosAssist(a1, (uint64_t)&v55, (uint64_t)v52);
  char v51 = 0;
  uint64_t v9 = *(void *)(a1 + 312);
  if (*(unsigned char *)(v9 + 20))
  {
    int v10 = v52[0];
    if (!v52[0] && !v53) {
      goto LABEL_59;
    }
    uint64_t v11 = *(void *)(a1 + 320);
    float v12 = *(float *)(v11 + 3204);
    int v13 = *(_DWORD *)(*(void *)(a1 + 328) + 8);
    if (v12 < 35.0) {
      float v12 = 35.0;
    }
    unsigned int v14 = v13 - 3;
    if (v13 == 3) {
      float v12 = 5.0;
    }
    BlueFin::UrbanPosAsstRegionExt::UrbanPosAsstRegionExt((BlueFin::UrbanPosAsstRegionExt *)&v46, *(double *)(v11 + 3176), *(double *)(v11 + 3184), *(float *)(v11 + 3192), *(float *)(v11 + 3196), *(float *)(v11 + 3200), v12, *(_DWORD *)(v11 + 3208));
    long long v56 = *(_OWORD *)(a2 + 32);
    uint64_t v57 = *(void *)(a2 + 48);
    if (v14 >= 4)
    {
      double v15 = v55;
    }
    else
    {
      double v15 = *(float *)(a2 + 64);
      double v55 = v15;
    }
    if (!BlueFin::UrbanPosAsstRegionExt::isOkToUse((BlueFin::UrbanPosAsstRegionExt *)&v46, (double *)&v56, (v58 >> 3) & 1, &v51, 0, v15))goto LABEL_59; {
LABEL_52:
    }
    if (v10)
    {
      long long v56 = *(_OWORD *)(a2 + 32);
      uint64_t v57 = *(void *)(a2 + 48);
      BlueFin::GlPeGnssNavUpa::UrbanPosAssist(a1, (uint64_t)&v55, (uint64_t)&v46);
      long long v33 = v47;
      uint64_t v34 = v48;
      char v53 = v49;
      float v54 = v50;
      if (LOBYTE(v46))
      {
        int v35 = *(_DWORD *)(a1 + 36);
        *(unsigned char *)a3 = v35 != 15;
        *(_OWORD *)(a3 + 8) = v33;
        if (v35 == 16) {
          float v36 = 15.0;
        }
        else {
          float v36 = 10.0;
        }
        *(void *)(a3 + 24) = v34;
        *(float *)(a3 + 32) = v36;
        *(float *)(a3 + 36) = v36;
      }
    }
    goto LABEL_60;
  }
  double v16 = (int *)(a1 + 32);
  int v17 = *(_DWORD *)(a1 + 32);
  if (v17 < 0)
  {
    double v23 = *(float *)(a2 + 64);
  }
  else
  {
    unint64_t v18 = *(unsigned int *)(a2 + 68);
    uint64_t v19 = (v18 >> 3) & 1;
    double v20 = *(float *)(a2 + 64);
    uint64_t v21 = (v18 >> 6) & 1;
    BlueFin::lla2ned((double *)(a2 + 32), (double *)(a1 + 72), 0, &v46);
    BOOL isNedPosInside = BlueFin::UrbanPosAsstRegionExt::isNedPosInside(a1 + 40, &v46, v19, &v51, v21, v20);
    double v23 = *(float *)(a2 + 64);
    for (double i = v54 - v23; i > 3.14159265; double i = i + -6.28318531)
      ;
    for (; i <= -3.14159265; double i = i + 6.28318531)
      ;
    if (fabs(i) < 45.0 && isNedPosInside)
    {
      BOOL v26 = 1;
      goto LABEL_40;
    }
    int v17 = *(_DWORD *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 312);
  }
  char v45 = 0;
  LOBYTE(v46) = 0;
  HIDWORD(v46) = 1;
  int v27 = *(_DWORD *)(*(void *)(a1 + 328) + 8);
  if (v27 == 6) {
    char v28 = 2;
  }
  else {
    char v28 = 1;
  }
  if ((v27 - 1) >= 2) {
    char v29 = v28;
  }
  else {
    char v29 = 0;
  }
  Regiouint64_t n = BlueFin::GlPeUrbanPosAsst::findRegion(v9, (float64x2_t *)(a2 + 32), (*(_DWORD *)(a2 + 68) >> 3) & 1, &v45, &v51, (uint64_t)&v46, v29, a1 + 32, v23, (*(_DWORD *)(a2 + 68) & 0x40) != 0);
  BOOL v26 = 0;
  if (v45 && (Region & 0x8000) == 0) {
    BOOL v26 = BlueFin::GlPeGnssNavUpa::CheckForAdjacentXtcRegions((BlueFin::GlPeUrbanPosAsstCache **)a1, Region, (__int16)v17);
  }
LABEL_40:
  int v31 = *(_DWORD *)(a2 + 68);
  if (v31)
  {
    int v32 = *v16;
    if ((v31 & 0x20) != 0 && (v32 & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(a1 + 49)) {
        v52[0] = 0;
      }
      goto LABEL_48;
    }
  }
  else
  {
    int v32 = *v16;
  }
  if (v32 < 0) {
    goto LABEL_50;
  }
LABEL_48:
  if ((v31 & 0x80) == 0 || *(unsigned char *)(a1 + 49))
  {
LABEL_50:
    if (v26)
    {
      int v10 = v52[0];
      goto LABEL_52;
    }
LABEL_59:
    char v53 = 0;
    goto LABEL_60;
  }
  if (!v26) {
    goto LABEL_59;
  }
LABEL_60:
  if (v53)
  {
    int v37 = *(_DWORD *)(a2 + 68);
    if ((~v37 & 0x18) == 0)
    {
      float v38 = v54;
      for (double j = v54 - *(float *)(a2 + 56); j > 3.14159265; double j = j + -6.28318531)
        ;
      for (; j <= -3.14159265; double j = j + 6.28318531)
        ;
      float v40 = j * 57.2957795;
      float v41 = fabsf(v40);
      if (v41 <= 45.0 || v41 >= 135.0)
      {
        *(unsigned char *)(a3 + 40) = 1;
        *(float *)(a3 + 44) = v38;
        float v43 = *(float *)(*(void *)(a1 + 320) + 3220);
        if (v43 <= 0.0) {
          float v44 = flt_263BBC0A8[(v37 & 1) == 0];
        }
        else {
          float v44 = v43 * 0.0174532925;
        }
        *(float *)(a3 + 48) = v44;
      }
    }
  }
}

BOOL BlueFin::GlPeGnssNavUpa::CheckForAdjacentXtcRegions(BlueFin::GlPeUrbanPosAsstCache **this, int a2, int a3)
{
  Regiouint64_t n = (int *)BlueFin::GlPeUrbanPosAsstCache::getRegion(this[36], a2);
  float v6 = *((double *)this + 37);
  float v7 = *((double *)this + 38);
  BlueFin::GlPeUrbanPosAsstRegion::unpackRegion(Region, (uint64_t)&v25, v6, v7);
  float64x2_t v23 = vcvtq_f64_f32(v25);
  uint64_t v24 = 0;
  uint64_t v8 = (int *)BlueFin::GlPeUrbanPosAsstCache::getRegion(this[36], a3);
  float v9 = *((double *)this + 37);
  float v10 = *((double *)this + 38);
  BlueFin::GlPeUrbanPosAsstRegion::unpackRegion(v8, (uint64_t)&v20, v9, v10);
  float64x2_t v18 = vcvtq_f64_f32(v20);
  uint64_t v19 = 0;
  BlueFin::lla2ned(v18.f64, v23.f64, 0, &v28);
  if (sqrt(v29 * v29 + v28 * v28) < 3.0) {
    return 1;
  }
  __double2 v11 = __sincos_stret(v26 * 0.0174532925);
  v17[0] = v11.__cosval * v27;
  v17[1] = v11.__sinval * v27;
  void v17[2] = 0.0;
  BlueFin::ned2lla(v23.f64, v17, v16);
  BlueFin::lla2ned(v18.f64, v16, 0, &v28);
  if (sqrt(v29 * v29 + v28 * v28) < 3.0) {
    return 1;
  }
  __double2 v12 = __sincos_stret(v21 * 0.0174532925);
  v15[0] = v12.__cosval * v22;
  v15[1] = v12.__sinval * v22;
  _OWORD v15[2] = 0.0;
  BlueFin::ned2lla(v18.f64, v15, v14);
  BlueFin::lla2ned(v14, v23.f64, 0, &v28);
  if (sqrt(v29 * v29 + v28 * v28) < 3.0) {
    return 1;
  }
  BlueFin::lla2ned(v14, v16, 0, &v28);
  return sqrt(v29 * v29 + v28 * v28) < 3.0;
}

uint64_t BlueFin::GlExtSensorType::Get(BlueFin::GlExtSensorType *this)
{
  uint64_t result = *(unsigned __int8 *)this;
  if (result >= 0x23)
  {
    DeviceFaultNotify("glpe_hula.cpp", 298, "Get", (char)"m_ucType <= _NUMOF(GL_EXT_SENS_TYPE)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 298, "m_ucType <= _NUMOF(GL_EXT_SENS_TYPE)");
  }
  return result;
}

uint64_t BlueFin::GlExtSensorType::GetExtended(BlueFin::GlExtSensorType *this)
{
  uint64_t result = *(unsigned __int8 *)this;
  if ((result - 104) <= 0xFFFFFFFB)
  {
    DeviceFaultNotify("glpe_hula.cpp", 305, "GetExtended", (char)"m_ucType >= GL_EXT_SENS_EXTENDED_TYPE_OFFSET && m_ucType <= _NUMOF(GL_EXT_SENS_TYPE_EXTENDED)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 305, "m_ucType >= GL_EXT_SENS_EXTENDED_TYPE_OFFSET && m_ucType <= _NUMOF(GL_EXT_SENS_TYPE_EXTENDED)");
  }
  return result;
}

unsigned char *BlueFin::GlExtSensorType::SetFromInt(unsigned char *this, unsigned int a2)
{
  if (a2 >= 0x22 && a2 - 100 >= 3)
  {
    DeviceFaultNotify("glpe_hula.cpp", 312, "SetFromInt", (char)"IsIntValidSensor(ucType)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 312, "IsIntValidSensor(ucType)");
  }
  *this = a2;
  return this;
}

uint64_t BlueFin::GlExtSensDataIfData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (!v4)
  {
    unsigned int v7 = 6;
    if (!v3) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v8 = *(void *)(v2 + 8);
    if (*(__int16 *)(v8 + 32) > 0)
    {
      int v50 = 47;
      char v51 = v7;
      uint64_t v52 = 0x1000000000000;
      char v49 = &unk_270EBA2F0;
      char v53 = v7;
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *(unsigned char *)v8);
      if (v7 >= 4)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *(unsigned char *)(*(void *)(v6 + 8) + 4));
        uint64_t v9 = *(void *)(v6 + 8);
        switch(*(_DWORD *)(v9 + 4))
        {
          case 0:
            BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v49, *(unsigned int *)(v9 + 8));
            break;
          case 1:
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(v9 + 8));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 10));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 12));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 14));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 16));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 18));
            BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 20));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 22));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *(_DWORD *)(*(void *)(v6 + 8) + 24));
            break;
          case 2:
            break;
          case 3:
          case 5:
          case 6:
            BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v49, *(void *)(v9 + 8));
            break;
          case 4:
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(v9 + 8));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *(_DWORD *)(*(void *)(v6 + 8) + 12));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 16));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(_WORD *)(*(void *)(v6 + 8) + 18));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *(_DWORD *)(*(void *)(v6 + 8) + 20));
            break;
          default:
            DeviceFaultNotify("glpe_hula.cpp", 385, "SerializeImpl", (char)"0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 385, "0");
        }
      }
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *(unsigned char *)(*(void *)(v6 + 8) + 32));
      __double2 v11 = *(int **)(v6 + 8);
      int v12 = *v11;
      unsigned int v13 = *v11;
      if (v13 <= 0x63)
      {
        switch(*v11)
        {
          case 0u:
          case 1u:
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v14 = 0;
              double v15 = (float *)(v11 + 12);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v15 - 4));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *v15);
                ++v14;
                v15 += 22;
              }
              while (v14 < *((__int16 *)v11 + 16));
              __double2 v11 = *(int **)(v6 + 8);
              int v12 = *v11;
            }
            BOOL v17 = ((v12 << 16) - 131073) >= 0x3FFFF;
            unsigned int v16 = (v12 << 16) - 1638401;
            BOOL v17 = v17 && v16 >= 0x3FFFF;
            int v18 = !v17;
            if (v7 >= 2)
            {
              if (v18) {
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *(float *)&v11[22 * (__int16)(*((_WORD *)v11 + 16) - 1) + 22]);
              }
            }
            goto LABEL_99;
          case 8u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v41 = 0;
              long long v42 = (double *)(v11 + 14);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v42 - 8));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *(v42 - 1));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *v42);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v42[1]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v42[2]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v42[4]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v42[5]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v42[6]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v42[7]);
                ++v41;
                v42 += 11;
              }
              while (v41 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 9u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v35 = 0;
              float v36 = (double *)(v11 + 14);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v36 - 8));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *(v36 - 1));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *v36);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v36[1]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v36[4]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v36[5]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v36[6]);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, v36[7]);
                ++v35;
                v36 += 11;
              }
              while (v35 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0xAu:
          case 0x21u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v23 = 0;
              uint64_t v24 = v11 + 16;
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v24 - 12));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v24 - 2));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v24 - 1));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *(double *)v24);
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v24 + 3));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v24 + 4));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v24 + 5));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v24 + 6));
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v24 + 28));
                ++v23;
                v24 += 22;
              }
              while (v23 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v19 = 0;
              float32x2_t v20 = (float *)(v11 + 12);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v20 - 4));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *v20);
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, v20[10]);
                ++v19;
                v20 += 22;
              }
              while (v19 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x11u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v25 = 0;
              float v26 = (__int16 *)(v11 + 30);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *(v26 - 40));
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *(v26 - 36));
                if (v7 > 2) {
                  BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *v26);
                }
                ++v25;
                v26 += 44;
              }
              while (v25 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x12u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v27 = 0;
              double v28 = (__int16 *)(v11 + 12);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *(v28 - 4));
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *v28);
                ++v27;
                v28 += 44;
              }
              while (v27 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x13u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v45 = 0;
              double v46 = (__int16 *)(v11 + 12);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *(v46 - 4));
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *v46);
                ++v45;
                v46 += 44;
              }
              while (v45 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x14u:
          case 0x18u:
            DeviceFaultNotify("glpe_hula.cpp", 588, "SerializeImpl", (char)"false");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 588, "false");
          case 0x15u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v47 = 0;
              uint64_t v48 = v11 + 12;
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v48 - 4));
                BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *(unsigned char *)v48);
                BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, v48[1]);
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *((float *)v48 + 10));
                ++v47;
                v48 += 22;
              }
              while (v47 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x16u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v43 = 0;
              float v44 = v11 + 12;
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v44 - 4));
                BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *(unsigned char *)v44);
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *((float *)v44 + 1));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *((float *)v44 + 10));
                ++v43;
                v44 += 22;
              }
              while (v43 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x17u:
            if (*((__int16 *)v11 + 16) >= 1)
            {
              uint64_t v29 = 0;
              double v30 = (float *)(v11 + 22);
              do
              {
                BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v30 - 24));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v30 - 5));
                BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v30 - 4));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *(v30 - 6));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *(v30 - 5));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *(v30 - 4));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *(v30 - 3));
                BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *((_DWORD *)v30 - 2));
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v49, *v30);
                ++v29;
                v30 += 22;
              }
              while (v29 < *((__int16 *)v11 + 16));
            }
            goto LABEL_99;
          case 0x1Du:
            if (*((__int16 *)v11 + 16) < 1) {
              goto LABEL_99;
            }
            uint64_t v31 = 0;
            int v32 = (__int16 *)v11 + 37;
            break;
          default:
            goto LABEL_103;
        }
        while (1)
        {
          BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v49, *(void *)(v32 - 13));
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *((unsigned char *)v32 - 18));
          int v33 = *(_DWORD *)(v32 - 9);
          if (v33 == 2)
          {
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 7));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 6));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *(_DWORD *)(v32 - 5));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 3));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 2));
            uint64_t v34 = (int *)(v32 - 1);
            goto LABEL_69;
          }
          if (v33 == 1) {
            break;
          }
          if (!v33)
          {
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 7));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 6));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 5));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 4));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 3));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 2));
            BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 1));
            BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *v32);
            uint64_t v34 = &v11[22 * v31 + 19];
LABEL_69:
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *v34);
          }
          ++v31;
          v32 += 44;
          if (v31 >= *((__int16 *)v11 + 16)) {
            goto LABEL_99;
          }
        }
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 7));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v49, *(_DWORD *)(v32 - 5));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 3));
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v49, *(v32 - 2));
        uint64_t v34 = &v11[22 * v31 + 18];
        goto LABEL_69;
      }
      switch(v13)
      {
        case 'd':
          if (*((__int16 *)v11 + 16) >= 1)
          {
            uint64_t v37 = 0;
            float v38 = (char *)(v11 + 12);
            do
            {
              BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v38 - 4));
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *v38);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, v38[40]);
              ++v37;
              v38 += 88;
            }
            while (v37 < *((__int16 *)v11 + 16));
          }
          break;
        case 'e':
          if (*((__int16 *)v11 + 16) >= 1)
          {
            uint64_t v39 = 0;
            float v40 = (char *)(v11 + 12);
            do
            {
              BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v40 - 4));
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *v40);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, v40[1]);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, v40[40]);
              ++v39;
              v40 += 88;
            }
            while (v39 < *((__int16 *)v11 + 16));
          }
          break;
        case 'f':
          if (*((__int16 *)v11 + 16) >= 1)
          {
            uint64_t v21 = 0;
            float v22 = (char *)(v11 + 16);
            do
            {
              BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v49, *((_WORD *)v22 - 12));
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v22 - 2));
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v49, *((double *)v22 - 1));
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v49, *v22);
              ++v21;
              v22 += 88;
            }
            while (v21 < *((__int16 *)v11 + 16));
          }
          break;
        default:
LABEL_103:
          DeviceFaultNotify("glpe_hula.cpp", 622, "SerializeImpl", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 622, "0");
      }
LABEL_99:
      GlCustomLog(14, "\n");
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v49, v5, 4);
      return 1;
    }
    GlCustomLog(11, " NO DATA\n");
    return 0;
  }
  unsigned int v7 = v4;
  if (v4 > 6) {
    return 0;
  }
  if (v3) {
    goto LABEL_8;
  }
LABEL_6:
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t BlueFin::GlExtSensDataIfData::Deserialize(BlueFin::GlExtSensDataIfData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 47 || *((unsigned __int8 *)a2 + 12) - 7 < 0xFFFFFFFA) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t v6 = (_DWORD *)*((void *)this + 1);
  *uint64_t v6 = U8;
  if (*((unsigned __int8 *)a2 + 12) >= 4u)
  {
    int v7 = BlueFin::GlSysLogEntry::GetU8(a2);
    *(_DWORD *)(*((void *)this + 1) + 4) = v7;
    switch(v7)
    {
      case 0:
        *(_DWORD *)(*((void *)this + 1) + 8) = BlueFin::GlSysLogEntry::GetU64(a2);
        goto LABEL_11;
      case 1:
        *(_WORD *)(*((void *)this + 1) + 8) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 10) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 12) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 14) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 16) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 18) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 20) = BlueFin::GlSysLogEntry::GetS16(a2);
        *(_WORD *)(*((void *)this + 1) + 22) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_DWORD *)(*((void *)this + 1) + 24) = BlueFin::GlSysLogEntry::GetU32(a2);
        goto LABEL_11;
      case 2:
        goto LABEL_11;
      case 3:
      case 5:
      case 6:
        goto LABEL_10;
      case 4:
        *(_WORD *)(*((void *)this + 1) + 8) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_DWORD *)(*((void *)this + 1) + 12) = BlueFin::GlSysLogEntry::GetU32(a2);
        *(_WORD *)(*((void *)this + 1) + 16) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_WORD *)(*((void *)this + 1) + 18) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(_DWORD *)(*((void *)this + 1) + 20) = BlueFin::GlSysLogEntry::GetU32(a2);
LABEL_10:
        *(void *)(*((void *)this + 1) + 8) = BlueFin::GlSysLogEntry::GetU64(a2);
        goto LABEL_11;
      default:
        uint64_t v48 = "0";
        DeviceFaultNotify("glpe_hula.cpp", 683, "Deserialize", (char)"0");
        int v49 = 683;
        goto LABEL_98;
    }
  }
  v6[1] = 2;
LABEL_11:
  int v8 = BlueFin::GlSysLogEntry::GetU8(a2);
  uint64_t v9 = (int *)*((void *)this + 1);
  *((_WORD *)v9 + 16) = v8;
  int v10 = *v9;
  unsigned int v11 = *v9;
  if (v11 <= 0x63)
  {
    switch(*v9)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
        if (v8)
        {
          uint64_t v12 = 0;
          unsigned int v13 = (float *)(v9 + 12);
          do
          {
            *((_WORD *)v13 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
            *unsigned int v13 = BlueFin::GlSysLogEntry::GetF32(a2);
            v13 += 22;
            ++v12;
          }
          while (v12 < *((__int16 *)v9 + 16));
          uint64_t v9 = (int *)*((void *)this + 1);
          int v10 = *v9;
        }
        unsigned int v14 = (v10 << 16) - 131073;
        unsigned int v15 = (v10 << 16) - 1638401;
        if (v14 < 0x3FFFF || v15 <= 0x3FFFE)
        {
          if (*((unsigned __int8 *)a2 + 12) < 2u)
          {
            float F32 = 100.0;
          }
          else
          {
            float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
            uint64_t v9 = (int *)*((void *)this + 1);
          }
          *(float *)&v9[22 * (__int16)(*((_WORD *)v9 + 16) - 1) + 22] = F32;
        }
        goto LABEL_36;
      case 8u:
        if (v8)
        {
          uint64_t v24 = 0;
          uint64_t v25 = (double *)(v9 + 14);
          do
          {
            *((_WORD *)v25 - 8) = BlueFin::GlSysLogEntry::GetS16(a2);
            *(v25 - 1) = BlueFin::GlSysLogEntry::GetD64(a2);
            *uint64_t v25 = BlueFin::GlSysLogEntry::GetD64(a2);
            v25[1] = BlueFin::GlSysLogEntry::GetD64(a2);
            uint64_t v25[2] = BlueFin::GlSysLogEntry::GetD64(a2);
            v25[4] = BlueFin::GlSysLogEntry::GetD64(a2);
            v25[5] = BlueFin::GlSysLogEntry::GetD64(a2);
            v25[6] = BlueFin::GlSysLogEntry::GetD64(a2);
            v25[7] = BlueFin::GlSysLogEntry::GetD64(a2);
            ++v24;
            v25 += 11;
          }
          while (v24 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 9u:
        if (v8)
        {
          uint64_t v26 = 0;
          uint64_t v27 = (double *)(v9 + 14);
          do
          {
            *((_WORD *)v27 - 8) = BlueFin::GlSysLogEntry::GetS16(a2);
            *(v27 - 1) = BlueFin::GlSysLogEntry::GetD64(a2);
            *uint64_t v27 = BlueFin::GlSysLogEntry::GetD64(a2);
            v27[1] = BlueFin::GlSysLogEntry::GetD64(a2);
            v27[4] = BlueFin::GlSysLogEntry::GetD64(a2);
            v27[5] = BlueFin::GlSysLogEntry::GetD64(a2);
            v27[6] = BlueFin::GlSysLogEntry::GetD64(a2);
            v27[7] = BlueFin::GlSysLogEntry::GetD64(a2);
            ++v26;
            v27 += 11;
          }
          while (v26 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0xAu:
      case 0x21u:
        if (v8)
        {
          uint64_t v22 = 0;
          uint64_t v23 = v9 + 16;
          do
          {
            *((_WORD *)v23 - 12) = BlueFin::GlSysLogEntry::GetS16(a2);
            *((double *)v23 - 2) = BlueFin::GlSysLogEntry::GetD64(a2);
            *((double *)v23 - 1) = BlueFin::GlSysLogEntry::GetD64(a2);
            *(double *)uint64_t v23 = BlueFin::GlSysLogEntry::GetD64(a2);
            *((double *)v23 + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
            *((double *)v23 + 4) = BlueFin::GlSysLogEntry::GetD64(a2);
            *((double *)v23 + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
            *((double *)v23 + 6) = BlueFin::GlSysLogEntry::GetD64(a2);
            v23[14] = BlueFin::GlSysLogEntry::GetS16(a2);
            ++v22;
            v23 += 22;
          }
          while (v22 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        if (v8)
        {
          uint64_t v18 = 0;
          uint64_t v19 = (float *)(v9 + 12);
          do
          {
            *((_WORD *)v19 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
            *uint64_t v19 = BlueFin::GlSysLogEntry::GetF32(a2);
            v19[10] = BlueFin::GlSysLogEntry::GetF32(a2);
            ++v18;
            v19 += 22;
          }
          while (v18 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x11u:
        if (v8)
        {
          uint64_t v28 = 0;
          uint64_t v29 = v9 + 30;
          do
          {
            *((_WORD *)v29 - 40) = BlueFin::GlSysLogEntry::GetS16(a2);
            *(v29 - 18) = BlueFin::GlSysLogEntry::GetS16(a2);
            if (*((unsigned __int8 *)a2 + 12) < 3u) {
              int S16 = 3;
            }
            else {
              int S16 = BlueFin::GlSysLogEntry::GetS16(a2);
            }
            *uint64_t v29 = S16;
            v29 += 22;
            ++v28;
          }
          while (v28 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x12u:
        if (v8)
        {
          uint64_t v31 = 0;
          int v32 = v9 + 12;
          do
          {
            *((_WORD *)v32 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
            *int v32 = BlueFin::GlSysLogEntry::GetS16(a2);
            v32 += 22;
            ++v31;
          }
          while (v31 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x13u:
        if (v8)
        {
          uint64_t v33 = 0;
          uint64_t v34 = v9 + 12;
          do
          {
            *((_WORD *)v34 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
            *uint64_t v34 = BlueFin::GlSysLogEntry::GetS16(a2);
            v34 += 22;
            ++v33;
          }
          while (v33 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x14u:
      case 0x18u:
        uint64_t v48 = "false";
        DeviceFaultNotify("glpe_hula.cpp", 908, "Deserialize", (char)"false");
        int v49 = 908;
        goto LABEL_98;
      case 0x15u:
        if (v8)
        {
          uint64_t v35 = 0;
          float v36 = v9 + 12;
          do
          {
            *((_WORD *)v36 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
            *float v36 = BlueFin::GlSysLogEntry::GetU8(a2);
            v36[1] = BlueFin::GlSysLogEntry::GetU32(a2);
            *((float *)v36 + 10) = BlueFin::GlSysLogEntry::GetF32(a2);
            ++v35;
            v36 += 22;
          }
          while (v35 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x16u:
        if (v8)
        {
          uint64_t v37 = 0;
          float v38 = v9 + 12;
          do
          {
            *((_WORD *)v38 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
            *float v38 = BlueFin::GlSysLogEntry::GetU8(a2);
            *((float *)v38 + 1) = BlueFin::GlSysLogEntry::GetF32(a2);
            *((float *)v38 + 10) = BlueFin::GlSysLogEntry::GetF32(a2);
            ++v37;
            v38 += 22;
          }
          while (v37 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x17u:
        if (v8)
        {
          uint64_t v39 = 0;
          float v40 = (float *)(v9 + 22);
          do
          {
            *((_WORD *)v40 - 24) = BlueFin::GlSysLogEntry::GetS16(a2);
            *((double *)v40 - 5) = BlueFin::GlSysLogEntry::GetD64(a2);
            *((double *)v40 - 4) = BlueFin::GlSysLogEntry::GetD64(a2);
            *(v40 - 6) = BlueFin::GlSysLogEntry::GetF32(a2);
            *(v40 - 5) = BlueFin::GlSysLogEntry::GetF32(a2);
            *(v40 - 4) = BlueFin::GlSysLogEntry::GetF32(a2);
            *(v40 - 3) = BlueFin::GlSysLogEntry::GetF32(a2);
            *((_DWORD *)v40 - 2) = BlueFin::GlSysLogEntry::GetU32(a2);
            *float v40 = BlueFin::GlSysLogEntry::GetF32(a2);
            v40 += 22;
            ++v39;
          }
          while (v39 < *((__int16 *)v9 + 16));
        }
        goto LABEL_36;
      case 0x1Du:
        if (!v8) {
          goto LABEL_36;
        }
        uint64_t v41 = 0;
        long long v42 = v9 + 19;
        break;
      default:
        goto LABEL_97;
    }
    while (1)
    {
      *(void *)(v42 - 7) = BlueFin::GlSysLogEntry::GetU64(a2);
      int v43 = BlueFin::GlSysLogEntry::GetU8(a2);
      *(v42 - 5) = v43;
      if (v43 == 2)
      {
        *((_WORD *)v42 - 8) = BlueFin::GlSysLogEntry::GetU16(a2);
        *((_WORD *)v42 - 7) = BlueFin::GlSysLogEntry::GetU16(a2);
      }
      else
      {
        if (v43 != 1)
        {
          if (!v43)
          {
            *((_WORD *)v42 - 8) = BlueFin::GlSysLogEntry::GetU16(a2);
            *((_WORD *)v42 - 7) = BlueFin::GlSysLogEntry::GetU16(a2);
            *((_WORD *)v42 - 6) = BlueFin::GlSysLogEntry::GetU16(a2);
            *((_WORD *)v42 - 5) = BlueFin::GlSysLogEntry::GetU16(a2);
            *((_WORD *)v42 - 4) = BlueFin::GlSysLogEntry::GetU16(a2);
            *((_WORD *)v42 - 3) = BlueFin::GlSysLogEntry::GetU16(a2);
            *((_WORD *)v42 - 2) = BlueFin::GlSysLogEntry::GetS16(a2);
            *((_WORD *)v42 - 1) = BlueFin::GlSysLogEntry::GetU16(a2);
            *long long v42 = BlueFin::GlSysLogEntry::GetU32(a2);
          }
          goto LABEL_85;
        }
        *((_WORD *)v42 - 8) = BlueFin::GlSysLogEntry::GetU16(a2);
      }
      *(v42 - 3) = BlueFin::GlSysLogEntry::GetU32(a2);
      *((_WORD *)v42 - 4) = BlueFin::GlSysLogEntry::GetU16(a2);
      *((_WORD *)v42 - 3) = BlueFin::GlSysLogEntry::GetU16(a2);
      *(v42 - 1) = BlueFin::GlSysLogEntry::GetU32(a2);
LABEL_85:
      ++v41;
      v42 += 22;
      if (v41 >= *((__int16 *)v9 + 16)) {
        goto LABEL_36;
      }
    }
  }
  switch(v11)
  {
    case 'd':
      if (v8)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v9 + 12;
        do
        {
          *((_WORD *)v45 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
          *uint64_t v45 = BlueFin::GlSysLogEntry::GetU8(a2);
          v45[10] = BlueFin::GlSysLogEntry::GetU8(a2);
          ++v44;
          v45 += 22;
        }
        while (v44 < *((__int16 *)v9 + 16));
      }
      break;
    case 'e':
      if (v8)
      {
        uint64_t v46 = 0;
        uint64_t v47 = v9 + 12;
        do
        {
          *((_WORD *)v47 - 4) = BlueFin::GlSysLogEntry::GetS16(a2);
          *uint64_t v47 = BlueFin::GlSysLogEntry::GetU8(a2);
          v47[1] = BlueFin::GlSysLogEntry::GetU8(a2);
          v47[40] = BlueFin::GlSysLogEntry::GetU8(a2);
          ++v46;
          v47 += 88;
        }
        while (v46 < *((__int16 *)v9 + 16));
      }
      break;
    case 'f':
      if (v8)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v9 + 16;
        do
        {
          *((_WORD *)v21 - 12) = BlueFin::GlSysLogEntry::GetS16(a2);
          *((double *)v21 - 2) = BlueFin::GlSysLogEntry::GetD64(a2);
          *((double *)v21 - 1) = BlueFin::GlSysLogEntry::GetD64(a2);
          *uint64_t v21 = BlueFin::GlSysLogEntry::GetU8(a2);
          v21 += 88;
          ++v20;
        }
        while (v20 < *((__int16 *)v9 + 16));
      }
      break;
    default:
LABEL_97:
      uint64_t v48 = "0";
      DeviceFaultNotify("glpe_hula.cpp", 942, "Deserialize", (char)"0");
      int v49 = 942;
LABEL_98:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", v49, v48);
  }
LABEL_36:
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 945);
  return 1;
}

double BlueFin::GlPeHula::SetPpsPlatformTime(uint64_t a1, unsigned __int16 *a2, double a3, double a4)
{
  v11[0] = &unk_270EC23C8;
  v11[1] = 0;
  LOWORD(a3) = a2[5];
  LOWORD(a4) = a2[6];
  *(double *)&unint64_t v6 = (double)*(unint64_t *)&a4;
  double v7 = (double)*(unint64_t *)&a3 + *(double *)&v6 * 0.001;
  LOWORD(v6) = a2[7];
  BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v11, *a2, *((unsigned __int8 *)a2 + 2), *((unsigned __int8 *)a2 + 4), *((unsigned __int8 *)a2 + 6), *((unsigned __int8 *)a2 + 8), v7 + (double)v6 * 0.000001);
  BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(a1 + 1080), (const BlueFin::GlUtcTime *)v11, 1, (uint64_t)&v9);
  double result = v10;
  *(double *)(a1 + 1032) = v10;
  *(_DWORD *)(a1 + 1040) = *((_DWORD *)a2 + 4);
  return result;
}

BlueFin::GlUtcTime *BlueFin::GlUtcTime::GlUtcTime(BlueFin::GlUtcTime *a1, unsigned __int16 *a2, double a3, double a4)
{
  *(void *)a1 = &unk_270EC23C8;
  *((void *)a1 + 1) = 0;
  LOWORD(a3) = a2[5];
  LOWORD(a4) = a2[6];
  *(double *)&unint64_t v4 = (double)*(unint64_t *)&a4;
  double v5 = (double)*(unint64_t *)&a3 + *(double *)&v4 * 0.001;
  LOWORD(v4) = a2[7];
  return BlueFin::GlUtcTime::GlUtcTime(a1, *a2, *((unsigned __int8 *)a2 + 2), *((unsigned __int8 *)a2 + 4), *((unsigned __int8 *)a2 + 6), *((unsigned __int8 *)a2 + 8), v5 + (double)v4 * 0.000001);
}

double BlueFin::GlPeHula::TempData::Update(double *a1, int a2, float *a3)
{
  __int16 v3 = *(_WORD *)a3;
  double v4 = (double)*(__int16 *)a3;
  a1[1] = v4;
  double v5 = a3[2];
  *a1 = v5;
  double v6 = 1000.0;
  if (a2 >= 2)
  {
    uint64_t v7 = (unsigned __int16)a2 - 1;
    int v8 = a3 + 24;
    do
    {
      __int16 v9 = v3;
      __int16 v3 = *((_WORD *)v8 - 4);
      double v4 = (double)v3;
      a1[1] = v4;
      float v10 = *v8;
      v8 += 22;
      double v5 = v5 + v10;
      *a1 = v5;
      --v7;
    }
    while (v7);
    *a1 = v5 / (double)a2;
    double v6 = v4 - (double)v9;
  }
  double result = v6 / 1000.0;
  a1[1] = v4 / 1000.0;
  a1[2] = v6 / 1000.0;
  return result;
}

uint64_t BlueFin::GlPeHula::AltData::Update(uint64_t result, uint64_t a2, BlueFin::GlPeTimeManager *a3, double a4, double a5)
{
  uint64_t v5 = result;
  uint64_t v6 = a2 + 88 * (__int16)(*(_WORD *)(a2 + 32) - 1);
  *(double *)double result = *(float *)(v6 + 48);
  *(double *)(result + 8) = *(float *)(v6 + 88);
  *(double *)(result + 16) = *(float *)(v6 + 88);
  *(_DWORD *)(result + 64) = 3;
  if (*(unsigned char *)(result + 48))
  {
    long long v8 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(result + 28) = v8;
    v13[0] = &unk_270EC23C8;
    v13[1] = 0;
    LOWORD(v8) = *(_WORD *)(result + 38);
    LOWORD(a5) = *(_WORD *)(result + 40);
    *(double *)&unint64_t v9 = (double)*(unint64_t *)&a5;
    *(double *)&long long v8 = (double)(unint64_t)v8 + *(double *)&v9 * 0.001;
    LOWORD(v9) = *(_WORD *)(result + 42);
    BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v13, *(unsigned __int16 *)(result + 28), *(unsigned __int8 *)(result + 30), *(unsigned __int8 *)(result + 32), *(unsigned __int8 *)(result + 34), *(unsigned __int8 *)(result + 36), *(double *)&v8 + (double)v9 * 0.000001);
    __n128 Time = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManager::GetTime(a3, (const BlueFin::GlUtcTime *)v13, 0, (uint64_t)v12);
    double result = BlueFin::GlPeTimeMgrUtil::DoubleToLms(Time, v12[2]);
    *(_DWORD *)(v5 + 24) = result;
  }
  else
  {
    uint64_t v11 = *(void *)(result + 56);
    if (v11) {
      *(_DWORD *)(result + 24) = *(_DWORD *)(v11 + 576) + *(__int16 *)(v6 + 40);
    }
  }
  *(_WORD *)(v5 + 49) = 1;
  *(unsigned char *)(v5 + 51) = 0;
  return result;
}

uint64_t BlueFin::GlPeHula::CrossTrkSpeedData::Update(uint64_t a1, uint64_t a2, BlueFin::GlPeTimeManager *a3, double a4, double a5)
{
  int v6 = (__int16)(*(_WORD *)(a2 + 32) - 1);
  uint64_t v7 = a2 + 88 * (__int16)(*(_WORD *)(a2 + 32) - 1);
  *(double *)a1 = *(float *)(v7 + 48);
  *(double *)(a1 + 8) = *(float *)(v7 + 88);
  if (*(unsigned char *)(a1 + 40))
  {
    long long v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 20) = v9;
    v14[0] = &unk_270EC23C8;
    v14[1] = 0;
    LOWORD(v9) = *(_WORD *)(a1 + 30);
    LOWORD(a5) = *(_WORD *)(a1 + 32);
    *(double *)&unint64_t v10 = (double)*(unint64_t *)&a5;
    *(double *)&long long v9 = (double)(unint64_t)v9 + *(double *)&v10 * 0.001;
    LOWORD(v10) = *(_WORD *)(a1 + 34);
    BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v14, *(unsigned __int16 *)(a1 + 20), *(unsigned __int8 *)(a1 + 22), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 28), *(double *)&v9 + (double)v10 * 0.000001);
    __n128 Time = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManager::GetTime(a3, (const BlueFin::GlUtcTime *)v14, 0, (uint64_t)v13);
    uint64_t result = BlueFin::GlPeTimeMgrUtil::DoubleToLms(Time, v13[2]);
  }
  else
  {
    uint64_t result = (*(_DWORD *)(*(void *)(a1 + 48) + 576) + *(__int16 *)(a2 + 88 * v6 + 40));
  }
  *(_DWORD *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 41) = 1;
  return result;
}

uint64_t BlueFin::GlPeHula::HdgData::Update(uint64_t result, uint64_t a2, BlueFin::GlPeTimeManager *a3, double a4, double a5)
{
  if (!*(unsigned char *)(result + 1692) && *(__int16 *)(a2 + 32) >= 1)
  {
    uint64_t v6 = result;
    if (*(unsigned char *)(result + 1688))
    {
      long long v8 = *(_OWORD *)(a2 + 8);
      *(_DWORD *)(result + 1684) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)(result + 1668) = v8;
      v17[0] = &unk_270EC23C8;
      v17[1] = 0;
      LOWORD(v8) = *(_WORD *)(result + 1678);
      LOWORD(a5) = *(_WORD *)(result + 1680);
      *(double *)&unint64_t v9 = (double)*(unint64_t *)&a5;
      *(double *)&long long v8 = (double)(unint64_t)v8 + *(double *)&v9 * 0.001;
      LOWORD(v9) = *(_WORD *)(result + 1682);
      BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v17, *(unsigned __int16 *)(result + 1668), *(unsigned __int8 *)(result + 1670), *(unsigned __int8 *)(result + 1672), *(unsigned __int8 *)(result + 1674), *(unsigned __int8 *)(result + 1676), *(double *)&v8 + (double)v9 * 0.000001);
      __n128 Time = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManager::GetTime(a3, (const BlueFin::GlUtcTime *)v17, 0, (uint64_t)v16);
      uint64_t result = BlueFin::GlPeTimeMgrUtil::DoubleToLms(Time, v16[2]);
    }
    else
    {
      uint64_t result = *(unsigned int *)(*(void *)(result + 1696) + 576);
    }
    *(_DWORD *)(v6 + 1664) = result;
    int v11 = *(__int16 *)(a2 + 32);
    if (v11 >= 1)
    {
      uint64_t v12 = 0;
      unsigned int v13 = (float *)(a2 + 88);
      do
      {
        if (*v13 > 0.0)
        {
          double v14 = *(v13 - 10);
          BlueFin::SKFVector::AddLen(v6);
          *(double *)(*(void *)v6 + 8 * *(int *)(v6 + 8)) = v14;
          double v15 = *v13;
          uint64_t result = BlueFin::SKFVector::AddLen(v6 + 824);
          *(double *)(*(void *)(v6 + 824) + 8 * *(int *)(v6 + 832)) = v15;
          LOWORD(v11) = *(_WORD *)(a2 + 32);
        }
        ++v12;
        v13 += 22;
      }
      while (v12 < (__int16)v11);
    }
  }
  return result;
}

void BlueFin::GlPeHula::TurningRateSensorData::Update(uint64_t a1, uint64_t a2)
{
  if (*(__int16 *)(a2 + 32) >= 1)
  {
    uint64_t v3 = *(unsigned __int16 *)(a2 + 32);
    __int16 v4 = *(_WORD *)(a2 + 40);
    float v5 = *(float *)(a2 + 48);
    int v6 = *(_DWORD *)(*(void *)(a1 + 40) + 576);
    *(_DWORD *)(a1 + 8) = v6;
    float v7 = *(float *)(a2 + 88);
    float v8 = 0.0;
    if (v7 <= 0.0) {
      float v9 = 0.0;
    }
    else {
      float v9 = v7 * v7;
    }
    if (v3 == 1)
    {
      double v10 = 0.0;
      float v11 = 1000.0;
    }
    else
    {
      uint64_t v12 = 0;
      __int16 v13 = 0;
      __int16 v14 = v7 > 0.0;
      double v15 = (float *)(a2 + 128);
      float v16 = 0.0;
      uint64_t v17 = 1;
      float v18 = v5;
      do
      {
        __int16 v4 = *(_WORD *)v15;
        __int16 v19 = *(_WORD *)v15 - *(_WORD *)(a2 + 88 * SHIDWORD(v12) + 40);
        if (v19 < 0)
        {
          float v16 = 1.0;
          v19 += 1000;
        }
        v13 += v19;
        float v20 = v15[2];
        float v18 = v18 + v20;
        int v21 = (__int16)v17++;
        float v5 = (float)(v20 + (float)((float)v21 * v5)) / (float)(int)v17;
        float v8 = (float)((float)(v8 * (float)v21) / (float)(int)v17)
           + (float)((float)((float)(v20 - v5) * (float)(v20 - v5)) / (float)v21);
        float v22 = v15[12];
        if (v22 > 0.0)
        {
          ++v14;
          float v9 = v9 + (float)(v22 * v22);
        }
        v12 += 0x100000000;
        v15 += 22;
      }
      while (v3 != v17);
      double v10 = v16 * 1000.0;
      float v5 = v18 / (float)(__int16)v3;
      float v11 = (float)v13 / (float)(v3 - 1);
      if (v14 > 1) {
        float v9 = v9 / (float)v14;
      }
    }
    int v23 = v6 + v4;
    double v24 = fmod(v10, 4294967300.0);
    if (v10 <= 4294967300.0) {
      double v24 = v10;
    }
    if (v24 < -4294967300.0) {
      double v24 = -fmod(-v24, 4294967300.0);
    }
    if (v24 < 0.0) {
      unsigned int v25 = --v24;
    }
    else {
      unsigned int v25 = v24;
    }
    *(_DWORD *)(a1 + 8) = v23 + v25;
    *(float *)a1 = (float)(v5 * (float)(__int16)v3) * (float)(v11 / 1000.0);
    *(float *)(a1 + 4) = sqrtf(v8 + v9);
    *(unsigned char *)(a1 + 33) = 1;
  }
}

uint64_t BlueFin::GlPeHula::UpdateAuxInfo(uint64_t result, uint64_t a2)
{
  if (*(__int16 *)(a2 + 32) >= 1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    float v5 = (_DWORD *)(a2 + 52);
    do
    {
      char v6 = *(v5 - 1);
      uint64_t result = BlueFin::GlExtSensorType::Get((BlueFin::GlExtSensorType *)&v6);
      if (result == 13)
      {
        *(_WORD *)(v3 + 5132) = *(unsigned __int8 *)v5;
      }
      else if (result == 15)
      {
        *(_WORD *)(v3 + 2986) = *v5;
      }
      ++v4;
      v5 += 22;
    }
    while (v4 < *(__int16 *)(a2 + 32));
  }
  return result;
}

_DWORD *BlueFin::GlPeHula::ExtSensTempData::Update(_DWORD *result, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 32) - 1 <= 0x27)
  {
    uint64_t v2 = (unsigned __int16)(*(_WORD *)(a2 + 32) - 1) + 1;
    uint64_t v3 = (int *)(a2 + 48);
    do
    {
      int v4 = *v3;
      if (*v3 > 0x1C) {
        break;
      }
      if (((1 << v4) & 0x1C00003F) != 0)
      {
        uint64_t v5 = 0;
      }
      else
      {
        if (v4 != 24) {
          return result;
        }
        uint64_t v5 = 1;
      }
      uint64_t v6 = *(void *)v3;
      v3 += 22;
      *(void *)&result[2 * v5 + 2] = v6;
      *((unsigned char *)result + v5 + 24) = 1;
      unsigned int v7 = *(_DWORD *)(*(void *)result + 576);
      if (v7 <= 1) {
        unsigned int v7 = 1;
      }
      result[7] = v7;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t BlueFin::GlPeHula::TravelAssistData::Update(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int16 *)(a2 + 32) - 1 <= 0x27)
  {
    uint64_t v2 = a2 + 88 * (unsigned __int16)(*(_WORD *)(a2 + 32) - 1);
    *(_DWORD *)(result + 52) = *(_DWORD *)(v2 + 88);
    long long v3 = *(_OWORD *)(v2 + 48);
    long long v4 = *(_OWORD *)(v2 + 64);
    uint64_t v5 = *(void *)(v2 + 80);
    *(void *)(result + 40) = v5;
    *(_OWORD *)(result + 24) = v4;
    *(_OWORD *)(result + 8) = v3;
    unsigned int v6 = *(_DWORD *)(*(void *)result + 576);
    if (v6 <= 1) {
      unsigned int v6 = 1;
    }
    *(_DWORD *)(result + 56) = v6;
    *(_DWORD *)(result + 40) = v5 & 4 | (2 * (v5 & 1)) & 0xF7 | (8 * ((v5 >> 1) & 1)) | (v5 >> 2) & 0x10;
    *(unsigned char *)(result + 48) = 1;
    *(_WORD *)(result + 62) = 257;
  }
  return result;
}

uint64_t BlueFin::GlPeHula::DeltaPos::Update(uint64_t a1, uint64_t a2, BlueFin::GlPeTimeManager *a3)
{
  int v4 = (__int16)(*(_WORD *)(a2 + 32) - 1);
  uint64_t v5 = a2 + 88 * (__int16)(*(_WORD *)(a2 + 32) - 1);
  double v6 = *(double *)(v5 + 48);
  *(double *)a1 = v6;
  unint64_t v7 = *(void *)(v5 + 88);
  *(void *)(a1 + 8) = v7;
  if (*(unsigned char *)(a1 + 40))
  {
    long long v9 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 20) = v9;
    v14[0] = &unk_270EC23C8;
    v14[1] = 0;
    LOWORD(v9) = *(_WORD *)(a1 + 30);
    LOWORD(v7) = *(_WORD *)(a1 + 32);
    *(double *)&unint64_t v10 = (double)v7;
    *(double *)&long long v9 = (double)(unint64_t)v9 + *(double *)&v10 * 0.001;
    LOWORD(v10) = *(_WORD *)(a1 + 34);
    BlueFin::GlUtcTime::GlUtcTime((BlueFin::GlUtcTime *)v14, *(unsigned __int16 *)(a1 + 20), *(unsigned __int8 *)(a1 + 22), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 28), *(double *)&v9 + (double)v10 * 0.000001);
    __n128 Time = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManager::GetTime(a3, (const BlueFin::GlUtcTime *)v14, 0, (uint64_t)v13);
    uint64_t result = BlueFin::GlPeTimeMgrUtil::DoubleToLms(Time, v13[2]);
    double v6 = *(double *)a1;
  }
  else
  {
    uint64_t result = (*(_DWORD *)(*(void *)(a1 + 48) + 576) + *(__int16 *)(a2 + 88 * v4 + 40));
  }
  *(_DWORD *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 41) = v6 > 0.0;
  return result;
}

BlueFin::GlPeGloFcnOsnMgr *BlueFin::GlPeHula::LosStateData::Update(BlueFin::GlPeGloFcnOsnMgr *result, uint64_t a2, int a3)
{
  unint64_t v3 = 0;
  *((_OWORD *)result + 19) = 0u;
  *((_OWORD *)result + 20) = 0u;
  *((_OWORD *)result + 17) = 0u;
  *((_OWORD *)result + 18) = 0u;
  *((_OWORD *)result + 15) = 0u;
  *((_OWORD *)result + 16) = 0u;
  *((_OWORD *)result + 13) = 0u;
  *((_OWORD *)result + 14) = 0u;
  *((_OWORD *)result + 11) = 0u;
  *((_OWORD *)result + 12) = 0u;
  *((_OWORD *)result + 9) = 0u;
  *((_OWORD *)result + 10) = 0u;
  *((_OWORD *)result + 7) = 0u;
  *((_OWORD *)result + 8) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_OWORD *)result + 6) = 0u;
  *((_OWORD *)result + 3) = 0u;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 1) = 0u;
  *((_OWORD *)result + 2) = 0u;
  *((_DWORD *)result + 2) = a3;
  if (*(__int16 *)(a2 + 32) >= 1)
  {
    int v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 8 * *(unsigned __int16 *)(a2 + 32);
    unint64_t v7 = (__int16 *)((char *)result + 344);
    float v8 = (unsigned __int8 *)(a2 + 48);
    while (2)
    {
      int v9 = *v8;
      unsigned __int8 v10 = v8[1];
      LOBYTE(v3) = v8[40];
      *(double *)((char *)v4 + v5 + 16) = (double)v3 / 255.0;
      switch(v9)
      {
        case 0:
          unsigned int v16 = 0;
          goto LABEL_10;
        case 1:
          unsigned int v11 = 2;
          goto LABEL_9;
        case 2:
          unsigned int v11 = 5;
          goto LABEL_9;
        case 3:
          unsigned int v11 = 4;
          goto LABEL_9;
        case 4:
          unsigned int v11 = 3;
LABEL_9:
          unsigned int v16 = v11;
LABEL_10:
          unsigned __int8 v17 = v10;
          uint64_t result = BlueFin::GlPeSvIdConverter::Gnss2SvId((BlueFin::GlPeGloFcnOsnMgr *)(*(void *)v4 + 119744), &v16, &v15);
          if ((v15 + 67) >= 0x44u)
          {
            uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[v15];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v14] == 255)
            {
              __int16 v13 = 575;
              int v12 = -1;
            }
            else
            {
              int v12 = 0;
              __int16 v13 = BlueFin::GlSignalId::s_ausGnss2signalId[v14]
                  + v15
                  - BlueFin::GlSvId::s_aucGnss2minSvId[v14];
            }
          }
          else
          {
            int v12 = 0;
            __int16 v13 = 575;
          }
          v8 += 88;
          *((unsigned char *)v7 - 8) = v15;
          *((_DWORD *)v7 - 1) = v12;
          *unint64_t v7 = v13;
          v7 += 6;
          v5 += 8;
          if (v6 == v5) {
            return result;
          }
          continue;
        default:
          DeviceFaultNotify("glpe_hula.cpp", 2430, "Update", (char)"false");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 2430, "false");
      }
    }
  }
  return result;
}

_DWORD *BlueFin::GlPeHula::ExtConstraintData::Update(_DWORD *result, uint64_t a2, int a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = -7200001;
  uint64_t v3 = a2 + 88 * (__int16)(*(_WORD *)(a2 + 32) - 1);
  double v4 = *(double *)(v3 + 48);
  double v5 = *(double *)(v3 + 56);
  LODWORD(v3) = *(unsigned __int8 *)(v3 + 64);
  *(float *)&double v5 = v5;
  *(float *)&double v4 = v4;
  result[1] = LODWORD(v5);
  result[2] = LODWORD(v4);
  *uint64_t result = a3 + 1000 * v3;
  if (*(float *)&v4 >= *(float *)&v5)
  {
    result[1] = 0;
    result[2] = 0;
    *uint64_t result = -7200001;
  }
  return result;
}

uint64_t BlueFin::GlPeHula::UpdateNoMotionState(BlueFin::GlPeHula *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v2 = *((_DWORD *)this + 1054) == 6 && *((unsigned char *)this + 4224) && *((unsigned char *)this + 4226) == 0;
  BlueFin::GlPeSensStats::UpdateNoMotionState((uint64_t)this, *(_DWORD *)(*((void *)this + 126) + 576), v2);
  __int16 v5 = 1;
  v4[0] = 0x200000011;
  __int16 v6 = 0;
  BOOL v7 = *((unsigned __int16 *)this + 81) >= *(unsigned __int16 *)this;
  int v8 = 4;
  return BlueFin::GlPeHula::MovingStateSensorData::Update((uint64_t)this + 4208, (uint64_t)v4);
}

uint64_t BlueFin::GlPeHula::ExtSensTempMonitor::MonitorExternalSensorTemp(uint64_t result, uint64_t a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(a2 + 28);
  unsigned int v4 = v3 - *(_DWORD *)(result + 4);
  if (v4 >= 0xEA61) {
    *(unsigned char *)uint64_t result = 0;
  }
  uint64_t v5 = a2 + a3;
  int v7 = *(unsigned __int8 *)(v5 + 24);
  __int16 v6 = (unsigned char *)(v5 + 24);
  if (v7)
  {
    float v8 = *(float *)(a2 + 8 * a3 + 12);
    if (*(unsigned char *)result)
    {
      int v9 = *(_DWORD *)(result + 12);
    }
    else
    {
      *(float *)(result + 416) = v8;
      *(_DWORD *)(result + 420) = 0;
      *(_DWORD *)(result + 12) = v3;
      *(unsigned char *)uint64_t result = 1;
      int v9 = v3;
    }
    *(float *)(result + 8) = v8;
    *(_DWORD *)(result + 424) = *(_DWORD *)(a2 + 8 * a3 + 8);
    *(_DWORD *)(result + 4) = v3;
    float v10 = (float)v4 * 0.001;
    if (!v3) {
      float v10 = 0.0;
    }
    float v11 = (float)(v3 - v9);
    if (v10 <= 0.0)
    {
      uint64_t v13 = *(int *)(result + 420);
      float v12 = *(float *)(result + 4 * v13 + 16);
    }
    else
    {
      float v12 = (float)(v8 * 0.01) + (float)(*(float *)(result + 416) * 0.99);
      *(float *)(result + 416) = v12;
      uint64_t v13 = *(int *)(result + 420);
      *(float *)(result + 4 * v13 + 16) = v12;
    }
    float v14 = v11 * 0.001;
    unint64_t v15 = ((int)v13 + 1) % 0x64uLL;
    float v16 = *(float *)(result + 4 * v15 + 16);
    *(_DWORD *)(result + 420) = v15;
    float v17 = vabds_f32(v12, v16);
    if (*(unsigned char *)(result + 1) || (v17 < 1.0 ? (BOOL v18 = v14 <= 100.0) : (BOOL v18 = 1), v18))
    {
      if (!*(unsigned char *)(result + 1)) {
        goto LABEL_25;
      }
      if (v17 <= 1.05 || v14 <= 100.0) {
        goto LABEL_25;
      }
    }
    else
    {
      *(unsigned char *)(result + 1) = 1;
      if (v17 <= 1.05) {
        goto LABEL_25;
      }
    }
    *(unsigned char *)(result + 1) = 0;
LABEL_25:
    *__int16 v6 = 0;
  }
  return result;
}

float BlueFin::GlPeHula::GetDistanceToE911ExtLoc(uint64_t a1, double *a2)
{
  if (!*(unsigned char *)(a1 + 5200)) {
    return -1.0;
  }
  uint64_t v2 = *(void *)(a1 + 5224);
  long long v4 = *(_OWORD *)(a1 + 5208);
  uint64_t v5 = v2;
  BlueFin::lla2ned(a2, (double *)&v4, 0, &v6);
  return sqrt(v7 * v7 + v6 * v6);
}

BOOL BlueFin::GlPeHula::HulaHdgCombine(BlueFin::GlPeHula *this, const BlueFin::SKFVector *a2, const BlueFin::SKFVector *a3)
{
  uint64_t v4 = *((unsigned int *)a2 + 2);
  if (v4)
  {
    if (v4 == 1)
    {
      *((void *)this + 368) = *(void *)(*(void *)a2 + 8);
      double v6 = *(double *)(*(void *)a3 + 8);
    }
    else
    {
      *((_OWORD *)this + 184) = 0u;
      BlueFin::SKFVectorDim<100>::SKFVectorDim((BlueFin::SKFVector *)&v42, a2);
      uint64_t v7 = v42;
      double v8 = *(double *)(v42 + 8);
      uint64_t v9 = v43;
      double v10 = v8;
      double v11 = v8;
      if (v43 >= 2)
      {
        uint64_t v12 = v43 - 1;
        uint64_t v13 = (double *)(v42 + 16);
        uint64_t v14 = v12;
        double v10 = *(double *)(v42 + 8);
        do
        {
          double v15 = *v13++;
          double v16 = v15;
          if (v10 < v15) {
            double v10 = v16;
          }
          --v14;
        }
        while (v14);
        float v17 = (double *)(v42 + 16);
        double v11 = *(double *)(v42 + 8);
        do
        {
          double v18 = *v17++;
          double v19 = v18;
          if (v11 > v18) {
            double v11 = v19;
          }
          --v12;
        }
        while (v12);
      }
      if ((int)v4 >= 2 && v10 - v11 > 180.0)
      {
        uint64_t v20 = 2;
        do
        {
          double v21 = *(double *)(v7 + 8);
          for (double i = *(double *)(v7 + 8 * v20) * 0.0174532925 - v21 * 0.0174532925; i > 3.14159265; double i = i + -6.28318531)
            ;
          while (i <= -3.14159265)
            double i = i + 6.28318531;
          *(double *)(v7 + 8 * v20++) = v21 + i * 57.2957795;
        }
        while (v20 != v4 + 1);
        double v8 = *(double *)(v7 + 8);
      }
      if ((int)v9 < 2)
      {
        double v26 = v8;
      }
      else
      {
        uint64_t v23 = v9 - 1;
        double v24 = (double *)(v7 + 16);
        uint64_t v25 = v23;
        double v26 = v8;
        do
        {
          double v27 = *v24++;
          double v28 = v27;
          if (v26 < v27) {
            double v26 = v28;
          }
          --v25;
        }
        while (v25);
        uint64_t v29 = (double *)(v7 + 16);
        do
        {
          double v30 = *v29++;
          double v31 = v30;
          if (v8 > v30) {
            double v8 = v31;
          }
          --v23;
        }
        while (v23);
      }
      if (v26 - v8 > 180.0)
      {
        DeviceFaultNotify("glpe_hula.cpp", 3613, "HulaHdgCombine", (char)"otHdgDeg.Max() - otHdgDeg.Min() <= STRAIGHT_ANGLE_DEG");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 3613, "otHdgDeg.Max() - otHdgDeg.Min() <= STRAIGHT_ANGLE_DEG");
      }
      double v32 = *((double *)this + 369);
      double v33 = *((double *)this + 368);
      if ((int)v4 >= 1)
      {
        uint64_t v34 = (double *)(v7 + 8);
        uint64_t v35 = (double *)(*(void *)a3 + 8);
        uint64_t v36 = v4;
        do
        {
          double v37 = *v35++;
          double v38 = v37 * v37;
          double v39 = *v34++;
          double v40 = 1.0 / v38;
          double v33 = v33 + v39 * v40;
          *((double *)this + 368) = v33;
          double v32 = v32 + v40;
          *((double *)this + 369) = v32;
          --v36;
        }
        while (v36);
      }
      *((double *)this + 368) = v33 / v32;
      double v6 = sqrt(1.0 / v32);
    }
    *((double *)this + 369) = v6;
  }
  else
  {
    *((_OWORD *)this + 184) = xmmword_263BA7BB0;
  }
  return v4 != 0;
}

BOOL BlueFin::GlPeHula::UpdateHulaDebug(BlueFin::GlPeHula *this, float a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  bzero(v8, 0xDE0uLL);
  HIDWORD(v4) = 2;
  uint64_t v7 = 0x20000000FLL;
  v8[12] = 1;
  *(float *)&double v4 = a2 * 57.296;
  float v9 = a2 * 57.296;
  int v10 = 1092616192;
  *((unsigned char *)this + 2988) = 0;
  BlueFin::GlPeHula::Update((uint64_t)this, (uint64_t)&v7, v4, v5);
  BOOL result = BlueFin::GlPeHula::HulaHdgCombine(this, (BlueFin::GlPeHula *)((char *)this + 1296), (BlueFin::GlPeHula *)((char *)this + 2120));
  if (!result)
  {
    DeviceFaultNotify("glpe_hula.cpp", 4051, "UpdateHulaDebug", (char)"HulaHdgCombine(m_HdgHULA.m_otValueDeg, m_HdgHULA.m_otRmseDeg)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_hula.cpp", 4051, "HulaHdgCombine(m_HdgHULA.m_otValueDeg, m_HdgHULA.m_otRmseDeg)");
  }
  *((unsigned char *)this + 2988) = 1;
  *((unsigned char *)this + 2985) = 1;
  return result;
}

_WORD *BlueFin::GlUtcTime::MakeRelativeToGps0(_WORD *this, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int16 *a7, uint64_t *a8)
{
  unsigned int v8 = (unsigned __int16)*this;
  if (v8 <= 0x7B2)
  {
    if (v8 != 1970 || (unsigned int v9 = *a2, v9 <= 1) && (v9 == 1 ? (v14 = *a3 == 0) : (v14 = 1), v14))
    {
      double v15 = "rusYear > 1970 || (rusYear == 1970 && (rusMonth > 1 || (rusMonth == 1 && rusDay >= 1)))";
      DeviceFaultNotify("glpe_datetime.h", 1222, "MakeRelativeToGps0", (char)"rusYear > 1970 || (rusYear == 1970 && (rusMonth > 1 || (rusMonth == 1 && rusDay >= 1)))");
      int v16 = 1222;
      goto LABEL_16;
    }
    int v11 = *a4;
    int v12 = *a5;
    int v17 = 2;
    uint64_t v13 = *a6;
    goto LABEL_18;
  }
  if (v8 > 0x7BC) {
    return this;
  }
  if (v8 != 1980)
  {
    int v11 = *a4;
    int v12 = *a5;
    uint64_t v13 = *a6;
    unsigned int v9 = *a2;
    if (v8 >= 0x7B4)
    {
      unsigned int v10 = *a3;
      goto LABEL_25;
    }
    int v17 = v8 & 3;
LABEL_18:
    uint64_t v18 = BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * v17 - 1 + v9] + (unint64_t)*a3 - 732;
LABEL_19:
    uint64_t v19 = *(void *)a7 - 1000 * (-60 * v12 - v13 - 3600 * v11 - 86400 * v18) - 315964800000;
    *(void *)a7 = v19;
    if (v19 >= 0)
    {
      *this = 1980;
      *a2 = 1;
      *a3 = 6;
      *a4 = 0;
      *a5 = 0;
      *a6 = 0;
      return this;
    }
    double v15 = "rsllUtcOffsetMs >= 0";
    DeviceFaultNotify("glpe_datetime.h", 1251, "MakeRelativeToGps0", (char)"rsllUtcOffsetMs >= 0");
    int v16 = 1251;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_datetime.h", v16, v15);
  }
  unsigned int v9 = *a2;
  if (v9 <= 1)
  {
    unsigned int v10 = *a3;
    if (v9 != 1 || v10 <= 5)
    {
      int v11 = *a4;
      int v12 = *a5;
      unsigned int v8 = 1980;
      uint64_t v13 = *a6;
LABEL_25:
      uint64_t v18 = BlueFin::GlWeekTowTime::s_aausSub4AndMonth2Nt[12 * (v8 & 3) - 1 + v9]
          + 1461 * ((v8 - 1972) >> 2)
          + v10
          + 729;
      goto LABEL_19;
    }
  }
  return this;
}

void BlueFin::GlExtSensDataIfData::~GlExtSensDataIfData(BlueFin::GlExtSensDataIfData *this)
{
}

uint64_t BlueFin::GlPeCommonReqParms::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ((v4 & 0xFFFFFFFD) != 0)
  {
    DeviceFaultNotify("glpe_kf.cpp", 80, "SerializeImpl", (char)"ucVersion == 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 80, "ucVersion == 2");
  }
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 29;
    char v10 = 2;
    uint64_t v11 = 0x1000000000000;
    unsigned int v8 = &unk_270EBA2F0;
    char v12 = 2;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 10));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(unsigned __int8 *)(v6 + 12));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeCommonReqParms::Deserialize(BlueFin::GlPeCommonReqParms *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 29) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 3) < 0xFFFFFFFE) {
    return 0;
  }
  *((_WORD *)this + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetU16(a2);
  BOOL v6 = v3 == 2 && BlueFin::GlSysLogEntry::GetU16(a2) != 0;
  *((unsigned char *)this + 12) = v6;
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glpe_kf.cpp", 127, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 127, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlPePrRrResidualData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_kf.cpp", 205, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 205, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v12 = 100;
    char v13 = v5;
    uint64_t v14 = 0x1000000000000;
    uint64_t v11 = &unk_270EBA2F0;
    char v15 = v5;
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v11, *(double *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, *(unsigned char *)(v7 + 16));
    if (*(unsigned char *)(v7 + 16))
    {
      unint64_t v8 = 0;
      int v9 = (double *)(v7 + 48);
      do
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, *((unsigned char *)v9 - 20));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v11, *((unsigned char *)v9 - 24));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v11, *(v9 - 1));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v11, *v9);
        ++v8;
        v9 += 4;
      }
      while (v8 < *(unsigned __int8 *)(v7 + 16));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v11, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPePrRrResidualData::Deserialize(BlueFin::GlPePrRrResidualData *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v3 = *((_DWORD *)a2 + 2) == 100 && *((unsigned char *)a2 + 12) == 1;
  uint64_t result = v3;
  if (v3)
  {
    unsigned int v13 = result;
    *((double *)this + 1) = BlueFin::GlSysLogEntry::GetD64(a2);
    int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 16) = U8;
    if (U8)
    {
      unint64_t v7 = 0;
      unint64_t v8 = (double *)((char *)this + 48);
      do
      {
        unsigned int v9 = BlueFin::GlSysLogEntry::GetU8(a2);
        int v10 = BlueFin::GlSysLogEntry::GetU8(a2);
        if ((v10 + 67) >= 0x44u)
        {
          uint64_t v12 = BlueFin::GlSvId::s_aucSvId2gnss[v10];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v9 - v9 + v12] == 255)
          {
            __int16 v11 = 575;
            unsigned int v9 = -1;
          }
          else
          {
            __int16 v11 = BlueFin::GlSignalId::s_ausGnss2signalId[v12]
                + v10
                - BlueFin::GlSvId::s_aucGnss2minSvId[v12]
                + BlueFin::GlSvId::s_aucGnss2numSvId[v12] * (_WORD)v9;
          }
        }
        else
        {
          __int16 v11 = 575;
        }
        *((unsigned char *)v8 - 24) = v10;
        *((_DWORD *)v8 - 5) = v9;
        *((_WORD *)v8 - 8) = v11;
        *(v8 - 1) = BlueFin::GlSysLogEntry::GetD64(a2);
        *unint64_t v8 = BlueFin::GlSysLogEntry::GetD64(a2);
        v8 += 4;
        ++v7;
      }
      while (v7 < *((unsigned __int8 *)this + 16));
    }
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 245);
    return v13;
  }
  return result;
}

uint64_t BlueFin::GlPeKF::ClearInitPos(uint64_t this, int a2)
{
  *(void *)(this + 80) = 0;
  *(void *)(this + 88) = 0;
  *(void *)(this + 96) = 0;
  *(_DWORD *)(this + 104) = 1161527296;
  *(_DWORD *)(this + 152) = 0;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 64) = 1120403456;
  *(unsigned char *)(this + 1086) = 0;
  *(unsigned char *)(this + 1098) = 0;
  *(unsigned char *)(this + 1090) = 0;
  *(void *)(this + 200) = 0;
  *(void *)(this + 208) = 0;
  *(void *)(this + 192) = 0;
  *(_DWORD *)(this + 216) = 1161527296;
  *(_OWORD *)(this + 224) = *(_OWORD *)(this + 112);
  *(void *)(this + 240) = *(void *)(this + 128);
  *(void *)(this + 256) = *(void *)(this + 144);
  *(_DWORD *)(this + 264) = 0;
  if (a2)
  {
    uint64_t v2 = (BlueFin::GlPeKF *)this;
    uint64_t v3 = *(void *)(this + 92360);
    *(void *)(v3 + 40) = 0xFFFFFFFF00000000;
    *(unsigned char *)(v3 + 136) = 0;
    *(void *)(v3 + 184) = 0xFFFFFFFF00000000;
    *(unsigned char *)(v3 + 280) = 0;
    unsigned int v4 = (int *)(*(void *)(this + 92392) + 19352);
    if (*v4 <= 2) {
      *unsigned int v4 = 3;
    }
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        BlueFin::GlPeInitKFPosEvent::SerializeImpl(this, 0);
      }
    }
    return BlueFin::GlPeKF::InitializeKF(v2);
  }
  return this;
}

BOOL BlueFin::GlPeKF::IsGood4Nav(BlueFin::GlPeKF *this)
{
  int v1 = *((_DWORD *)this + 22162);
  if (v1)
  {
    if (*((unsigned char *)this + 88656)) {
      LOBYTE(v1) = (*((_DWORD *)this + 192) - v1) >> 5 < 0x753;
    }
    else {
      LOBYTE(v1) = 0;
    }
  }
  uint64_t v2 = *((void *)this + 11087);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 3009)) {
      char v3 = 1;
    }
    else {
      char v3 = v1;
    }
    if (v3) {
      return 1;
    }
  }
  else if (v1)
  {
    return 1;
  }
  return *(float *)((char *)this + *(void *)(*((void *)this + 3468) - 24) + 27824) < 400.0;
}

uint64_t BlueFin::GlPeKF::SetSensorsConfig(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    DeviceFaultNotify("glpe_kf.cpp", 2555, "SetSensorsConfig", (char)"pSensorsConfig != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 2555, "pSensorsConfig != nullptr");
  }
  int v4 = *(_DWORD *)(a1 + 93364);
  if (v4 != 1)
  {
    if (v4 || *(_DWORD *)(a1 + 2316) == 2)
    {
      int v5 = *(unsigned __int8 *)(a2 + 7);
      if (*(unsigned char *)(a2 + 7))
      {
        if ((*(unsigned char *)(*(void *)(*(void *)(a1 + 92344) + 160) + 2) & 1) == 0) {
          goto LABEL_11;
        }
        int v5 = 1;
      }
      *(_DWORD *)(a1 + 2316) = v5;
      int v6 = 2;
    }
    else
    {
      int v6 = 1;
    }
    *(_DWORD *)(a1 + 93364) = v6;
  }
LABEL_11:
  int v7 = *(_DWORD *)(a1 + 2848);
  if (!v7)
  {
    *(_WORD *)(a2 + 16) = 0;
    *(_WORD *)(a2 + 4) = 0;
    goto LABEL_21;
  }
  if (v7 == 1)
  {
    *(_WORD *)(a2 + 16) = 257;
    *(_WORD *)(a2 + 4) = 257;
    *(unsigned char *)(a1 + 183) = 1;
  }
  else
  {
    int v8 = *(unsigned __int8 *)(a2 + 4);
    if (*(unsigned char *)(a2 + 5))
    {
      *(unsigned char *)(a1 + 183) = 1;
      if (!v8) {
        goto LABEL_20;
      }
    }
    else if (!*(unsigned char *)(a2 + 4))
    {
      goto LABEL_21;
    }
  }
  *(unsigned char *)(a1 + 182) = 1;
LABEL_20:
  *(unsigned char *)(a1 + 184) = 1;
LABEL_21:
  (*(void (**)(void))(*(void *)(a1 + 27744) + 368))();
  if (*(unsigned char *)(a2 + 20)) {
    *(unsigned char *)(a1 + 185) = 1;
  }
  if (*(unsigned char *)(a2 + 19)) {
    *(unsigned char *)(a1 + 189) = 1;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 3112);
  if (v9 <= 1) {
    *(unsigned char *)(a2 + 8) = v9;
  }
  return 1;
}

uint64_t BlueFin::GlPeInitKFPosEvent::Deserialize(BlueFin::GlPeInitKFPosEvent *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 60 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2) {
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 2814);
  }
  return v3;
}

uint64_t BlueFin::GlPeInitKFPosEvent::SerializeImpl(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (v3 >= 2)
  {
    DeviceFaultNotify("glpe_kf.cpp", 2827, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 2827, "ucVersion == 1");
  }
  if (v2 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v6 = 60;
    char v7 = 1;
    uint64_t v8 = 0x1000000000000;
    int v5 = &unk_270EBA2F0;
    char v9 = 1;
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v5, v2, 4);
  }
  return 1;
}

#error "263B0B4F0: call analysis failed (funcsize=271)"

uint64_t BlueFin::GlPeKF::GetDynamicAccyMask(BlueFin::GlPeKF *this, int a2, unsigned int a3, int a4)
{
  int v5 = (char *)this + 88616;
  if (*((unsigned char *)this + 1110)) {
    unsigned int v6 = 50;
  }
  else {
    unsigned int v6 = 100;
  }
  if (*((int *)this + 402) <= 1500) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 400;
  }
  if (a4)
  {
    if (!BlueFin::GlSetBase::HasAny((BlueFin::GlPeKF *)((char *)this + 88032)))
    {
      if (*v5)
      {
        uint64_t v7 = 400;
      }
      else if (BlueFin::GlPeKF::IsVdrValid(this))
      {
        uint64_t v7 = 50;
      }
      else
      {
        uint64_t v13 = *((void *)this + 3468);
        double v14 = *(float *)((char *)this + *(void *)(v13 - 24) + 27920);
        for (double i = v14 - *(double *)((*(uint64_t (**)(void))(v13 + 200))() + 24); i > 3.14159265; double i = i + -6.28318531)
          ;
        for (; i <= -3.14159265; double i = i + 6.28318531)
          ;
        if (fabs(i) <= 0.0872664626) {
          uint64_t v7 = 50;
        }
        else {
          uint64_t v7 = 30;
        }
      }
    }
    if (*((__int16 *)this + 90) > a2)
    {
      if (v5[3457])
      {
        uint64_t v16 = (char *)this + *(void *)(*((void *)this + 3468) - 24) + 27744;
        long long v26 = *(_OWORD *)(v16 + 8);
        uint64_t v27 = *((void *)v16 + 3);
        if ((BlueFin::GlPeKFAltAsst::altAsstFromCitySetFine((__int16 *)this + 8704, (uint64_t)&__src, (double *)&v26) & 1) == 0) {
          return *((__int16 *)this + 90);
        }
      }
    }
  }
  else
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v20, 0x13u, (const void **)((char *)this + *(void *)(*((void *)this + 3468) - 24) + 28008));
    LOBYTE(v26) = v19;
    memcpy((char *)&v26 + 8, __src, 4 * v19);
    WORD1(v26) = 0;
    BYTE1(v26) = 0;
    DWORD1(v26) = DWORD2(v26);
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v26);
    if (BYTE1(v26) != v26)
    {
      while (1)
      {
        if (WORD1(v26) >= 0x23FuLL)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        char v9 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v26);
        unsigned __int8 v10 = *v9;
        LODWORD(v9) = (char)v9[1];
        v23[0] = v10;
        int v24 = (int)v9;
        __int16 v25 = WORD1(v26);
        __int16 v11 = (BlueFin::GlPeGloFcnOsnMgr **)(*((void *)v5 + 474) + 119744);
        int v21 = 7;
        v22[0] = 0;
        BlueFin::GlPeSvIdConverter::SvId2Gnss(v11, v23, (uint64_t)&v21);
        if (v21 <= 6 && v22[0] - 1 <= 0x3E)
        {
          Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*((void *)v5 + 474) + 384), v21);
          if (Mgr) {
            break;
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v26);
        if (BYTE1(v26) == v26) {
          return v7;
        }
      }
      (*(void (**)(void *, unsigned char *))(*Mgr + 80))(Mgr, v22);
    }
  }
  return v7;
}

uint64_t BlueFin::GlPeKF::GetDataForLowPowerDecision(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 88840);
  int v5 = *(_DWORD *)(*(void *)(a1 + 88840) + 8);
  *(unsigned char *)a2 = (v5 - 1) < 2;
  *(unsigned char *)(a2 + 1) = (v5 - 3) < 3;
  *(unsigned char *)(a2 + 2) = BlueFin::GlPeKF::IsVdrValid((BlueFin::GlPeKF *)a1);
  uint64_t v6 = v4[442];
  int v7 = *(_DWORD *)(v6 + 2744);
  int v8 = *(_DWORD *)(v6 + 2576);
  if (v8) {
    char v9 = v7 | (1 << v8);
  }
  else {
    char v9 = v7;
  }
  *(unsigned char *)(a2 + 3) = (v9 & 0x10) != 0;
  *(unsigned char *)(a2 + 4) = *((unsigned char *)v4 + 3276);
  *(unsigned char *)(a2 + 5) = (**(unsigned char **)(v4[438] + 160) & 0x20) != 0;
  *(unsigned char *)(a2 + 6) = 0;
  uint64_t v10 = *v4;
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(*v4 + 1988);
  uint64_t v11 = v4[447];
  unsigned __int8 v25 = *(unsigned char *)(v11 + 192);
  memcpy(v29, *(const void **)(v11 + 184), 4 * v25);
  unsigned __int16 v27 = 0;
  unsigned __int8 v26 = 0;
  int v28 = v29[0];
  BlueFin::GlSetIterator::operator++(&v25);
  if (v26 == v25)
  {
    __int16 v12 = 0;
  }
  else
  {
    __int16 v12 = 0;
    do
    {
      if (v27 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v13 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v27;
      char v14 = *v13;
      LODWORD(v13) = v13[1];
      v22[0] = v14;
      int v23 = (int)v13;
      unsigned __int16 v24 = v27;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)v4[447], (const BlueFin::GlSignalId *)v22, 0, 0);
      uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas((BlueFin::GlPeMsmtMgr *)v4[447], (const BlueFin::GlSignalId *)v22, 0);
      if (BlueFin::stPeSigMeasKF::IsPRValidForNav(PeMeas)
        && (*((unsigned char *)PeMeas + 72) & 8) != 0
        && *((int *)MeMeas + 5) <= 2
        && *((float *)MeMeas + 27) >= 28.0)
      {
        ++v12;
      }
      BlueFin::GlSetIterator::operator++(&v25);
    }
    while (v26 != v25);
    uint64_t v10 = *v4;
  }
  *(unsigned char *)(a2 + 7) = v12 > 6;
  int v17 = *(_DWORD *)(v10 + 16);
  if (v17 != 1) {
    LOBYTE(v17) = *(double *)((*(uint64_t (**)(void))(*(void *)(a1 + 27744) + 168))() + 8) <= 5.0;
  }
  *(unsigned char *)(a2 + 8) = v17;
  uint64_t v18 = a1 + 27744;
  uint64_t v19 = *(void *)(a1 + 27744);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a1 + 27744 + *(void *)(v19 - 24) + 241);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 27744 + *(void *)(v19 - 24) + 240);
  BOOL v20 = BlueFin::GlPeKF::IsGood4Nav((BlueFin::GlPeKF *)a1) || *(float *)(v18 + *(void *)(v19 - 24) + 80) < 50.0;
  *(unsigned char *)(a2 + 9) = v20;
  *(double *)(a2 + 16) = *(float *)(v18 + *(void *)(v19 - 24) + 176) * 57.2957795;
  *(double *)(a2 + 24) = sqrt(*(double *)(v18 + *(void *)(v19 - 24) + 112)* *(double *)(v18 + *(void *)(v19 - 24) + 112)+ *(double *)(v18 + *(void *)(v19 - 24) + 104)* *(double *)(v18 + *(void *)(v19 - 24) + 104));
  *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t))(v19 + 80))(a1 + 27744);
  uint64_t result = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v18 + *(void *)(*(void *)(a1 + 27744) - 24) + 264));
  *(unsigned char *)(a2 + 36) = result;
  *(unsigned char *)(a2 + 37) = *(unsigned char *)(a1 + 1519);
  *(_DWORD *)(a2 + 40) = 0;
  return result;
}

BOOL BlueFin::GlPeKF::SetAsstPosFromDNav(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 92344;
  unsigned int v3 = *(_DWORD *)(a2 + 24);
  long long v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  double v4 = 90000.0;
  double v5 = 20000.0;
  if ((*(unsigned char *)(a2 + 268) & 2) != 0 && *(unsigned char *)(*(void *)v2 + 796))
  {
    int v6 = *(_DWORD *)(*(void *)v2 + 800) - 120;
    int v7 = 25 * v6;
    if (25 * v6 <= 90000) {
      int v7 = 90000;
    }
    int v8 = 5 * v6;
    double v4 = (double)v7;
    if (v8 <= v7) {
      int v8 = v7;
    }
    double v5 = (double)v8 + 2000.0;
  }
  double v15 = v4 + (double)v3;
  double v16 = v5;
  uint64_t v9 = *(void *)(a1 + 92360);
  unsigned int v10 = *(_DWORD *)(a2 + 272);
  double v11 = (double)(int)v10;
  if (v10 <= 0xFF9222FE) {
    double v11 = (double)v10;
  }
  int v17 = 2;
  double v18 = v11;
  uint64_t v19 = &off_270EBC600;
  uint64_t v20 = 0;
  return BlueFin::GlPeAsstPosMgr::processAssistance(v9, &v13, 0, 1, (BlueFin::stTimeOfAsstPos *)&v17, 0, 0);
}

uint64_t BlueFin::GlPeKF::UpdateDeltaL5BiasM(BlueFin::GlPeKF *this, float a2)
{
  double v4 = (char *)this + 92344;
  double v5 = (float *)*((void *)this + 11543);
  float v6 = v5[247];
  (*(void (**)(float *))(*(void *)v5 + 264))(v5);
  uint64_t v7 = *((void *)v4 + 15);
  float v8 = (float)(a2 - v6) + *(float *)(v7 + 20);
  *(float *)(v7 + 20) = v8;
  *(float *)(v7 + 32) = v8;
  *(float *)(v7 + 44) = v8;
  *(float *)(v7 + 60) = (float)(a2 - v6) + *(float *)(v7 + 60);
  *(void *)(v7 + 128) = 0;
  *(_DWORD *)(v7 + 136) = 1077936128;
  uint64_t v9 = *(uint64_t (**)(void))(*((void *)this + 3468) + 360);

  return v9();
}

uint64_t BlueFin::GlPeKF::UpdateL5BiasM(BlueFin::GlPeKF *this, float a2)
{
  double v4 = (char *)this + 92344;
  double v5 = (float *)*((void *)this + 11543);
  float v6 = v5[247];
  (*(void (**)(float *))(*(void *)v5 + 264))(v5);
  uint64_t v7 = *((void *)v4 + 15);
  float v8 = (float)(a2 - v6) + *(float *)(v7 + 20);
  *(float *)(v7 + 20) = v8;
  *(float *)(v7 + 32) = v8;
  *(float *)(v7 + 44) = v8;
  *(float *)(v7 + 60) = (float)(a2 - v6) + *(float *)(v7 + 60);
  *(void *)(v7 + 128) = 0;
  *(_DWORD *)(v7 + 136) = 1077936128;
  uint64_t v9 = *(uint64_t (**)(void))(*((void *)this + 3468) + 360);

  return v9();
}

BOOL BlueFin::GlPeKF::IsLowPowerPowerModeReady(BlueFin::GlPeKF *this)
{
  int v1 = (char *)this + 88840;
  if (!*(unsigned char *)(*((void *)this + 11557) + 32)) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 11547);
  if (*(_DWORD *)(v3 + 2576)) {
    BOOL v4 = *(_DWORD *)(v3 + 2580) == 5;
  }
  else {
    BOOL v4 = 0;
  }
  float v6 = (char *)this + 27744;
  BOOL v7 = BlueFin::GlSignalIdSet::CntPrimarySignalSvIdSet((BlueFin::GlPeKF *)((char *)this + *(void *)(*((void *)this + 3468) - 24) + 28008), 8);
  int v8 = *(_DWORD *)(*((void *)v1 + 438) + 48);
  if ((v8 - 4) < 5 || v8 == 2)
  {
    uint64_t v23 = *(void *)v1;
    BOOL v22 = *(_DWORD *)(*(void *)v1 + 16) != 1;
  }
  else
  {
    BOOL v22 = 0;
    uint64_t v23 = *(void *)v1;
  }
  unsigned int v10 = *((_DWORD *)v1 + 874);
  double v25 = 0.0;
  double v26 = 0.0;
  BlueFin::GlPeEnvironmentMonitor::GetEnvironmentGNSSSignalStr(v23 + 64, &v26, &v25);
  if (v22)
  {
    if (*(_DWORD *)(*((void *)v1 + 446) + 120012) != 1 || !v7 || !v4) {
      goto LABEL_24;
    }
  }
  else if (!v7 || !v4)
  {
    goto LABEL_24;
  }
  v11.n128_f32[0] = (*(float (**)(char *))(*(void *)&v6[*(void *)(*(void *)v6 - 24)] + 16))(&v6[*(void *)(*(void *)v6 - 24)]);
  LODWORD(v12) = 1120403456;
  if (v11.n128_f32[0] <= 100.0)
  {
    v11.n128_f64[0] = v26;
    LOBYTE(v12) = *(unsigned char *)(*((void *)v1 + 438) + 26219);
    if (v26 >= (double)v12
      && *(_DWORD *)(*(void *)v1 + 8) != 10
      && *(_DWORD *)(*(void *)v1 + 16) != 3
      && v10 >= 0x1F)
    {
      ++*((_DWORD *)v1 + 1054);
      GlCustomLog(14, "LowPower ok\n", v11.n128_f64[0]);
      return *((_DWORD *)v1 + 1054) > 5u;
    }
  }
LABEL_24:
  long long v13 = &v6[*(void *)(*((void *)this + 3468) - 24)];
  (*(void (**)(char *, __n128))(*(void *)v13 + 16))(v13, v11);
  LOBYTE(v15) = *(unsigned char *)(*((void *)v1 + 438) + 26219);
  double v16 = (double)v15;
  uint64_t v17 = 84;
  if (*(_DWORD *)(*(void *)v1 + 8) == 10) {
    uint64_t v18 = 70;
  }
  else {
    uint64_t v18 = 84;
  }
  uint64_t v24 = v18;
  if (v14 > 100.0) {
    uint64_t v19 = 70;
  }
  else {
    uint64_t v19 = 84;
  }
  if (v4) {
    uint64_t v20 = 84;
  }
  else {
    uint64_t v20 = 70;
  }
  if (v7) {
    uint64_t v21 = 84;
  }
  else {
    uint64_t v21 = 70;
  }
  if (v26 < v16) {
    uint64_t v17 = 70;
  }
  GlCustomLog(14, "LowPower NOT Ready %c %c %c %c %c \n", v21, v20, v19, v17, v24);
  BOOL result = 0;
  *((_DWORD *)v1 + 1054) = 0;
  return result;
}

BOOL BlueFin::GlPeKF::NeedToExitPowerSave(BlueFin::GlPeKF *this)
{
  int v1 = (char *)this + 88840;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v21, v22, 0x13u, (const void **)((char *)this + *(void *)(*((void *)this + 3468) - 24) + 28008));
  BOOL v2 = BlueFin::GlSignalIdSet::CntPrimarySignalSvIdSet((BlueFin::GlSignalIdSet *)v21, 6);
  double v20 = 0.0;
  uint64_t v3 = *(void *)v1;
  BlueFin::GlPeEnvironmentMonitor::GetEnvironmentGNSSSignalStr(*(void *)v1 + 64, &v20, &v19);
  uint64_t v4 = *((void *)v1 + 438);
  int v5 = *(_DWORD *)(v4 + 48);
  BOOL v15 = ((v5 - 4) < 5 || v5 == 2) && *(_DWORD *)(v3 + 16) != 1;
  BOOL result = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(*((void *)v1 + 447) + 8));
  if (result)
  {
    if (v2)
    {
      LOBYTE(v8) = *(unsigned char *)(v4 + 26219);
      if (v20 >= (double)v8
        && *(_DWORD *)(v3 + 16) != 3
        && (!v15 || *(_DWORD *)(*((void *)v1 + 446) + 120012) == 1))
      {
        return 0;
      }
      uint64_t v9 = 70;
    }
    else
    {
      uint64_t v9 = 84;
    }
    BlueFin::GlSignalIdSet::GetPrimarySignalSvIdSet((BlueFin::GlSignalIdSet *)v21, (uint64_t)&v17);
    unsigned int v11 = 0;
    unint64_t v12 = (_DWORD *)(v17 + 4 * v18 - 4);
    do
    {
      if (*v12)
      {
        unsigned int v13 = *v12 - (((*v12 >> 1) & 0x5B6DB6DB) + ((*v12 >> 2) & 0x9249249));
        unsigned int v11 = ((v13 + (v13 >> 3)) & 0xC71C71C7) + v11 - 63 * (((v13 + (v13 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v12;
    }
    while ((unint64_t)v12 >= v17);
    LOBYTE(v10) = *(unsigned char *)(*((void *)v1 + 438) + 26219);
    int v16 = v11;
    uint64_t v14 = 70;
    if (v20 < (double)v10) {
      uint64_t v14 = 84;
    }
    GlCustomLog(14, "LowPower Exit, NotEnoughSats:%c, SvIdCnt:%d,SigStrength:%c %.1f\n", v9, v16, v14, v20);
    *((_DWORD *)v1 + 1054) = 0;
    return 1;
  }
  return result;
}

uint64_t BlueFin::GlPeKF::GetGridConfig(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1 + 93288;
  uint64_t v4 = (BlueFin::GlArray *)(a1 + 93272);
  int v5 = *a2;
  BlueFin::GlArray::EnsureValidHandle(a1 + 93272, v5);
  if (*(unsigned __int8 *)(*(void *)v3 + v5 - *(unsigned __int8 *)(v3 + 20)) == 255)
  {
    DeviceFaultNotify("glpe_kf.cpp", 7311, "GetGridConfig", (char)"m_otGridCfgArr.Has(rotSv)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_kf.cpp", 7311, "m_otGridCfgArr.Has(rotSv)");
  }
  return *(unsigned __int16 *)BlueFin::GlArray::Get(v4, *a2);
}

void BlueFin::GlPeCommonReqParms::~GlPeCommonReqParms(BlueFin::GlPeCommonReqParms *this)
{
}

void BlueFin::GlPePrRrResidualData::~GlPePrRrResidualData(BlueFin::GlPePrRrResidualData *this)
{
}

void BlueFin::GlPeInitKFPosEvent::~GlPeInitKFPosEvent(BlueFin::GlPeInitKFPosEvent *this)
{
}

void BlueFin::GlPeFirstFix::~GlPeFirstFix(BlueFin::GlPeFirstFix *this)
{
}

void virtual thunk to'BlueFin::GlPeFirstFix::~GlPeFirstFix(BlueFin::GlPeFirstFix *this)
{
}

uint64_t BlueFin::GlPeKFAltAsst::altAsstFromCitySetFine(__int16 *a1, uint64_t a2, double *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 1157234688;
  if (!*((unsigned char *)a1 + 2)) {
    return 0;
  }
  float v6 = *a3;
  float v7 = a3[1];
  if ((BlueFin::GlPeLatLonRegionSet::disabledRegion((BlueFin::GlPeLatLonRegionSet *)&BlueFin::GlPeKFAltAsst::m_otCityFine, v6, v7) & 1) != 0|| *a1 == -1|| !*((unsigned char *)a1 + 2))
  {
    return 0;
  }
  uint64_t v9 = (unsigned __int16 *)(qword_26B434048 + 12 * *a1);
  unsigned int v10 = *v9;
  LOWORD(v8) = v9[1];
  *(float *)&unsigned int v11 = (float)v8;
  float v12 = (float)(char)((v10 >> 9) - 50) + (float)((float)v8 * 0.0001);
  LOWORD(v11) = v9[3];
  float v13 = v12 + (float)((float)v11 * 0.0001);
  double v14 = v12;
  double v15 = v13;
  if (*a3 < v14 || *a3 > v15) {
    return 0;
  }
  LOWORD(v14) = v9[4];
  *(float *)&double v14 = (float)LODWORD(v14);
  LOWORD(v15) = v9[2];
  float v17 = (float)*v9 + (float)((float)LODWORD(v15) * 0.0001);
  float v18 = -v17;
  if ((v10 & 0x100) == 0) {
    float v18 = v17;
  }
  float v19 = v18 + (float)(*(float *)&v14 * 0.0001);
  double v20 = a3[1];
  double v21 = v19;
  if (v20 < v18 || v20 > v21) {
    return 0;
  }
  unsigned int v24 = v9[5];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(double *)(a2 + 16) = (double)(int)((v24 >> 4) - 100);
  *(float *)(a2 + 24) = (float)(char)(5 * (v24 & 0xF) + 5);
  return 1;
}

void BlueFin::GlPeCityFine::~GlPeCityFine(BlueFin::GlPeCityFine *this)
{
}

uint64_t _GLOBAL__sub_I_glpe_kfaltasst_cpp()
{
  dword_26B434040 = 419;
  qword_26B434048 = (uint64_t)&BlueFin::GlPeCityFine::m_aotRegions;
  dword_26B434050 = 102;
  qword_26B434058 = (uint64_t)&BlueFin::GlPeCityFine::m_aotIndex;
  dword_26B434060 = -39;
  BlueFin::GlPeKFAltAsst::m_otCityFine = (uint64_t)&unk_270EC34B8;
  return __cxa_atexit((void (*)(void *))BlueFin::GlPeCityFine::~GlPeCityFine, &BlueFin::GlPeKFAltAsst::m_otCityFine, &dword_2638D2000);
}

uint64_t BlueFin::GlPeLsq::rr2VelDeals(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v173 = *MEMORY[0x263EF8340];
  if (!v4)
  {
    unsigned int v96 = "pastMeasIn";
    DeviceFaultNotify("glpe_lsq.cpp", 1869, "rr2VelDeals", (char)"pastMeasIn");
    int v97 = 1869;
    goto LABEL_86;
  }
  unsigned int v8 = v7;
  uint64_t v9 = v6;
  int v10 = v5;
  uint64_t v11 = v4;
  float v12 = v3;
  float v13 = (unsigned int **)v2;
  uint64_t v15 = v6 + 56;
  uint64_t v14 = *(void *)(v6 + 56);
  uint64_t v16 = (char)*v7;
  *(_DWORD *)(v6 + 64) = v16;
  bzero((void *)(v14 + 8), 8 * v16);
  uint64_t v17 = (char)*v8;
  *(_DWORD *)(v15 + 832) = v17;
  bzero((void *)(*(void *)(v15 + 824) + 8), 8 * v17);
  if ((char)*v8 < 3) {
    return 0;
  }
  v143[1] = 0x400000004;
  long long v18 = *(_OWORD *)(v9 + 16);
  float64x2_t v145 = *(float64x2_t *)v9;
  uint64_t v144 = 0;
  v143[0] = &v144;
  long long v146 = v18;
  float v19 = (char *)&v140 + 8;
  long long v140 = xmmword_263BBC470;
  unsigned int v138 = &v141;
  uint64_t v139 = &v142;
  uint64_t v142 = 0;
  for (uint64_t i = 1; i != 20; ++i)
  {
    v139[i] = (uint64_t)v19;
    v19 += 32;
  }
  v136[0] = v137;
  v136[1] = 0x1300000000;
  memset(v137, 0, sizeof(v137));
  unsigned int v133 = v135;
  uint64_t v134 = 0x1300000000;
  memset(v135, 0, sizeof(v135));
  v131[1] = 0x1300000000;
  memset(v132, 0, sizeof(v132));
  int v21 = v12[3] & 1 | 0x4C0;
  uint64_t v22 = *v12;
  uint64_t v23 = v12[1];
  int v24 = *((_DWORD *)v12 + 4);
  v122[0] = v143;
  v122[1] = v22;
  void v122[2] = v23;
  int v123 = v24;
  int v124 = 2;
  int v125 = v21;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  uint64_t v130 = 0x4008000000000000;
  v131[0] = v132;
  v118[0] = &v133;
  v118[1] = v131;
  v118[2] = &v138;
  v118[3] = v136;
  long long v119 = 0u;
  long long v120 = 0u;
  uint64_t v121 = 0;
  unint64_t v115 = v117;
  char v116 = 4;
  v117[1] = 0;
  v117[0] = 0;
  BlueFin::GlSetBase::SetAllLower(&v115, (char)*v8);
  if ((char)*v8 > v10)
  {
    unsigned int v96 = "cNbRr <= lMeasInMaxNum";
    DeviceFaultNotify("glpe_lsq.cpp", 1905, "rr2VelDeals", (char)"cNbRr <= lMeasInMaxNum");
    int v97 = 1905;
    goto LABEL_86;
  }
  if ((*(unsigned int (**)(unsigned int *, void *, void *, uint64_t, void **))(*(void *)v13[1] + 16))(v13[1], v122, v118, v11, &v115))
  {
    return 0;
  }
  double v98 = v13;
  uint64_t v111 = v114;
  memset(v114, 0, sizeof(v114));
  if ((int)v134 >= (char)*v8) {
    int v26 = (char)*v8;
  }
  else {
    int v26 = v134;
  }
  int v113 = 15;
  int v112 = v26;
  unsigned __int16 v27 = (double *)&v114[8];
  bzero(&v114[8], 8 * v26);
  if (v26 >= 1)
  {
    uint64_t v28 = (v26 + 1) - 1;
    uint64_t v29 = (double *)(v131[0] + 8);
    double v30 = (double *)(v133 + 8);
    do
    {
      double v31 = *v30++;
      double v32 = v31;
      double v33 = *v29++;
      *v27++ = v32 - v33;
      --v28;
    }
    while (v28);
  }
  BlueFin::SKFVectorDim<100>::SKFVectorDim((BlueFin::SKFVector *)&v105, (const BlueFin::SKFVector *)&v111);
  BlueFin::SKFVector::Clone((BlueFin::SKFVector *)v15, (const BlueFin::SKFVector *)&v105);
  int v34 = *((_DWORD *)v12 + 6);
  if ((v34 & 0x200000) != 0)
  {
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v133, (BlueFin::SKFVector *)v131, (BlueFin::SKFVector *)v136, (BlueFin::SKFVector *)&v138, (BlueFin::BigMatrix *)2, 0.0225);
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v133, (BlueFin::SKFVector *)v131, (BlueFin::SKFVector *)v136, (BlueFin::SKFVector *)&v138, (BlueFin::BigMatrix *)1, 0.0225);
    int v34 = *((_DWORD *)v12 + 6);
  }
  int v35 = v140;
  if ((v34 & 8) == 0)
  {
    BOOL v36 = (char)*v8 > 4 && (v34 & 4) == 0;
    if (!v36 && (int)v140 <= 15)
    {
      BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v133, (BlueFin::SKFVector *)v131, (BlueFin::SKFVector *)v136, (BlueFin::SKFVector *)&v138, (BlueFin::BigMatrix *)3, 0.0225);
      int v34 = *((_DWORD *)v12 + 6);
      int v35 = v140;
    }
  }
  if ((v34 & 0xA) == 2 && v35 <= 15)
  {
    BlueFin::GlPeLsq::AddPMeas((BlueFin::GlPeLsq *)&v133, (BlueFin::SKFVector *)v131, (BlueFin::SKFVector *)v136, (BlueFin::SKFVector *)&v138, (BlueFin::BigMatrix *)4, *(double *)(v9 + 32));
    int v35 = v140;
  }
  int v39 = DWORD1(v140);
  double v40 = &v107[1];
  *(_OWORD *)int v107 = xmmword_263BBC470;
  int v105 = &v107[2];
  int v106 = (char *)&v110;
  uint64_t v110 = 0;
  for (uint64_t j = 8; j != 160; j += 8)
  {
    *(void *)&v106[j] = v40;
    v40 += 4;
  }
  BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v105, v35, v39);
  uint64_t v42 = &v164[16];
  *(_OWORD *)&v164[8] = xmmword_263BBC480;
  uint64_t v163 = &v164[24];
  *(void *)double v164 = &v167;
  uint64_t v167 = 0;
  for (uint64_t k = 8; k != 40; k += 8)
  {
    *(void *)(*(void *)v164 + k) = v42;
    v42 += 152;
  }
  BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v163, v39, v35);
  if (v35 >= 1)
  {
    int v44 = *((_DWORD *)v12 + 6);
    uint64_t v45 = v136[0];
    uint64_t v46 = v139;
    uint64_t v47 = v106;
    uint64_t v48 = *(void *)v164 + 8;
    uint64_t v49 = 1;
    do
    {
      double v50 = 1.0;
      if ((v44 & 0x10) != 0) {
        double v50 = 1.0 / *(double *)(v45 + 8 * (__int16)v49);
      }
      if (v39 >= 1)
      {
        char v51 = (double *)(*(void *)&v47[8 * v49] + 8);
        uint64_t v52 = (double *)(v46[v49] + 8);
        char v53 = (uint64_t *)v48;
        uint64_t v54 = (v39 + 1) - 1;
        do
        {
          double v55 = *v52++;
          *v51++ = v55;
          double v56 = v50 * v55;
          uint64_t v57 = *v53++;
          *(double *)(v57 + 8 * v49) = v56;
          --v54;
        }
        while (v54);
      }
      ++v49;
    }
    while (v49 != v35 + 1);
  }
  unsigned int v58 = (char *)&v160 + 8;
  long long v160 = xmmword_263BBA470;
  uint64_t v158 = &v161;
  double v159 = &v162;
  uint64_t v162 = 0;
  for (uint64_t m = 1; m != 5; ++m)
  {
    v159[m] = (uint64_t)v58;
    v58 += 32;
  }
  BlueFin::BigMatrix::mult_sym((uint64_t)&v158, (const BlueFin::BigMatrix *)&v163, (const BlueFin::BigMatrix *)&v105);
  uint64_t v60 = 0;
  int v61 = v134;
  long long v155 = xmmword_263BBC490;
  int v153 = &v156;
  unsigned __int16 v154 = &v157;
  uint64_t v157 = 0;
  do
  {
    v154[v60 + 1] = (uint64_t)&v155 + v60 * 8 + 8;
    ++v60;
  }
  while (v60 != 19);
  BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v153, v61, 1);
  uint64_t v62 = v134;
  if ((int)v134 >= 1)
  {
    unsigned int v63 = v154 + 1;
    unsigned int v64 = (double *)(v131[0] + 8);
    int v65 = (double *)(v133 + 8);
    do
    {
      double v66 = *v65++;
      double v67 = v66;
      double v68 = *v64++;
      double v69 = v67 - v68;
      uint64_t v70 = *v63++;
      *(double *)(v70 + 8) = v69;
      --v62;
    }
    while (v62);
  }
  uint64_t v71 = 0;
  long long v150 = xmmword_263BBC460;
  int v148 = &v151;
  double v149 = &v152;
  uint64_t v152 = 0;
  do
  {
    v149[v71 + 1] = (uint64_t)&v150 + v71 * 8 + 8;
    ++v71;
  }
  while (v71 != 4);
  BlueFin::BigMatrix::mult((uint64_t)&v148, (const BlueFin::BigMatrix *)&v163, (const BlueFin::BigMatrix *)&v153);
  uint64_t v72 = 0;
  uint64_t v73 = v149 + 1;
  do
  {
    *(void *)((char *)&v170 + v72 * 8) = *(void *)(v73[v72] + 8);
    ++v72;
  }
  while (v72 != 4);
  double v147 = 0.0;
  if (!BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v158, (double *)&v170, v168.f64, &v147, 0) || v147 < 0.0001) {
    return 0;
  }
  float64x2_t v74 = vaddq_f64(v169, *(float64x2_t *)(v9 + 16));
  *(float64x2_t *)uint64_t v9 = vaddq_f64(v168, *(float64x2_t *)v9);
  *(float64x2_t *)(v9 + 16) = v74;
  int v75 = *((_DWORD *)v12 + 6);
  if ((v75 & 0x80) != 0)
  {
    long long v170 = 0x3FF0000000000000uLL;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    BOOL v79 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v158, (double *)&v170, v168.f64, 0, 0);
    double v76 = v168.f64[0];
    long long v170 = xmmword_263BBA050;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    BOOL v80 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v158, (double *)&v170, v168.f64, 0, 0);
    long long v170 = 0uLL;
    uint64_t v171 = 0;
    uint64_t v172 = 0x3FF0000000000000;
    if (!v79) {
      double v76 = 400.0;
    }
    if (v80) {
      double v77 = v168.f64[1];
    }
    else {
      double v77 = 400.0;
    }
    BOOL v81 = BlueFin::BigMatrix::cholsl((BlueFin::BigMatrix *)&v158, (double *)&v170, v168.f64, 0, 0);
    double v78 = v169.f64[1];
    if (!v81) {
      double v78 = 400.0;
    }
    int v75 = *((_DWORD *)v12 + 6);
  }
  else
  {
    double v76 = 1000000.0;
    double v77 = 1000000.0;
    double v78 = 1000000.0;
  }
  *(double *)(v9 + 40) = v76;
  *(double *)(v9 + 48) = v77;
  *(double *)(v9 + 32) = v78;
  if ((v75 & 0x40) != 0)
  {
    uint64_t v163 = &v164[4];
    v164[0] = 19;
    memset(&v164[4], 0, 32);
    long long v165 = 0u;
    memset(v166, 0, sizeof(v166));
    if ((char)*v8 >= 1)
    {
      uint64_t v82 = *v8;
      unint64_t v83 = (_DWORD *)(v11 + 44);
      uint64_t v84 = (_DWORD *)(v11 + 44);
      do
      {
        int v85 = *v84;
        v84 += 14;
        if (v85 == 2) {
          *(_DWORD *)&v164[4 * (*((__int16 *)v83 - 2) >> 5) + 4] |= 1 << *((_WORD *)v83 - 2);
        }
        unint64_t v83 = v84;
        --v82;
      }
      while (v82);
    }
    int v86 = v98[1];
    int v99 = 0;
    unint64_t v100 = v102;
    char v101 = 8;
    memset(v102, 0, 32);
    *(_OWORD *)&v102[9] = xmmword_263BBA380;
    int32x2_t v103 = vdup_n_s32(0x42C60000u);
    int v104 = 1120272384;
    BlueFin::stDops::stDops((uint64_t)&v105, (uint64_t)&v99);
    int v109 = v86;
    uint64_t v87 = **v98;
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v163, (uint64_t)&v158);
    BlueFin::GlPeDops::GetDops((uint64_t)&v105, v87);
    BlueFin::stDops::operator=(v9 + 1712, (uint64_t)&v153);
    *(_DWORD *)(v9 + 1712) = v87;
  }
  else
  {
    LODWORD(v105) = 0;
    int v106 = (char *)v107 + 4;
    LOBYTE(v107[0]) = 8;
    *(_OWORD *)((char *)v107 + 4) = 0u;
    *(_OWORD *)((char *)&v107[2] + 4) = 0u;
    *(_OWORD *)&v107[5] = xmmword_263BBA380;
    v107[7] = vdup_n_s32(0x42C60000u);
    int v108 = 1120272384;
    BlueFin::stDops::operator=(v9 + 1712, (uint64_t)&v105);
  }
  if ((*((unsigned char *)v12 + 25) & 8) != 0)
  {
    double v88 = (void *)v143[0];
    *(void *)(v143[0] + 8) = *(void *)v9;
    void v88[2] = *(void *)(v9 + 8);
    double v88[3] = *(void *)(v9 + 16);
    v88[4] = *(void *)(v9 + 24);
    if ((int)BlueFin::GlSetBase::Highest((BlueFin::GlSetBase *)&v115) < v10)
    {
      if (!(*(unsigned int (**)(unsigned int *, void *, void *, uint64_t, void **))(*(void *)v98[1] + 16))(v98[1], v122, v118, v11, &v115))
      {
        uint64_t v89 = *(unsigned int *)(v9 + 888);
        if ((int)v89 >= 1)
        {
          double v90 = (double *)(*(void *)(v9 + 880) + 8);
          double v91 = (double *)(v131[0] + 8);
          double v92 = (double *)(v133 + 8);
          do
          {
            double v93 = *v92++;
            double v94 = v93;
            double v95 = *v91++;
            *v90++ = (v94 - v95) * 100.0;
            --v89;
          }
          while (v89);
        }
        return 1;
      }
      return 0;
    }
    unsigned int v96 = "otMeasSet.Highest() < lMeasInMaxNum";
    DeviceFaultNotify("glpe_lsq.cpp", 1998, "rr2VelDeals", (char)"otMeasSet.Highest() < lMeasInMaxNum");
    int v97 = 1998;
LABEL_86:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", v97, v96);
  }
  *(_DWORD *)(v9 + 888) = 0;
  return 1;
}

uint64_t BlueFin::GlPeLsq::LsVelDeals(BlueFin::GlPeMsmtMgr **a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 20) != 15)
  {
    DeviceFaultNotify("glpe_lsq.cpp", 2132, "LsVelDeals", (char)"otInp.m_cNumMeasLimit == DEALS_MAX_MEAS_SUBSET");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_lsq.cpp", 2132, "otInp.m_cNumMeasLimit == DEALS_MAX_MEAS_SUBSET");
  }
  for (uint64_t i = 0; i != 840; i += 56)
  {
    unsigned int v8 = &v11[i];
    v8[32] = 0;
    *((_DWORD *)v8 + 9) = -1;
    *((_WORD *)v8 + 20) = 575;
  }
  if ((int)BlueFin::GlPeLsq::PackSkfMeas_LsRrDeals(a1, (uint64_t)v11, a3) < 3) {
    return 0;
  }
  *(int64x2_t *)(a4 + 40) = vdupq_n_s64(0x4079000000000000uLL);
  *(_DWORD *)(a4 + 64) = 15;
  uint64_t v9 = *(void *)(a4 + 56);
  *(void *)(v9 + 120) = 0;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  return BlueFin::GlPeLsq::rr2VelDeals((uint64_t)a1, a2);
}

uint64_t BlueFin::GlPeLsq::PackSkfMeas_LsRrDeals(BlueFin::GlPeMsmtMgr **a1, uint64_t a2, const void **a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    double v25 = "pSkfMeas";
    DeviceFaultNotify("glpe_lsq.cpp", 2175, "PackSkfMeas_LsRrDeals", (char)"pSkfMeas");
    int v26 = "glpe_lsq.cpp";
    int v27 = 2175;
LABEL_19:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v26, v27, v25);
  }
  for (uint64_t i = 0; i != 192; i += 12)
  {
    uint64_t v6 = (char *)&v37[1] + i + 12;
    *uint64_t v6 = 0;
    *((_DWORD *)v6 + 1) = -1;
    *((_WORD *)v6 + 4) = 575;
  }
  float v7 = (int **)((char *)*a1 + 8);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v36, 0x13u, a3);
  double v38 = &v40;
  char v39 = 19;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v38, v7);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v38);
  v36[1] = v41;
  void v36[2] = v42;
  v37[0] = *(_OWORD *)v43;
  *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)&v43[12];
  v36[0] = v40;
  unsigned __int8 v29 = v35;
  memcpy(v33, __src, 4 * v35);
  unsigned __int16 v31 = 0;
  unsigned __int8 v30 = 0;
  int v32 = v33[0];
  BlueFin::GlSetIterator::operator++(&v29);
  if (v30 == v29)
  {
    LOBYTE(v8) = 0;
    return (char)v8;
  }
  unsigned __int8 v9 = 0;
  do
  {
    unsigned __int16 v10 = v31;
    if (v31 >= 0x23FuLL)
    {
      double v25 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      int v26 = "glsignalid.h";
      int v27 = 577;
      goto LABEL_19;
    }
    uint64_t v11 = *a1;
    uint64_t v12 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v31;
    char v13 = *v12;
    int v14 = v12[1];
    LOBYTE(__src) = *v12;
    HIDWORD(__src) = v14;
    unsigned __int16 v35 = v31;
    uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(v11, (const BlueFin::GlSignalId *)&__src, 0);
    if (BlueFin::stPeSigMeasKF::IsRRValid(PeMeas))
    {
      uint64_t v16 = (char *)&v37[1] + 12 * v9 + 12;
      *uint64_t v16 = v13;
      *((_DWORD *)v16 + 1) = v14;
      *((_WORD *)v16 + 4) = v10;
      uint64_t v17 = *a1;
      LOBYTE(__src) = v13;
      HIDWORD(__src) = v14;
      unsigned __int16 v35 = v10;
      *((_DWORD *)&v38 + v9++) = *((_DWORD *)BlueFin::GlPeMsmtMgr::GetMeMeas(v17, (const BlueFin::GlSignalId *)&__src, 0, 0)+ 25);
    }
    BlueFin::GlSetIterator::operator++(&v29);
  }
  while (v30 != v29);
  LOBYTE(v8) = v9;
  BlueFin::GlSortFloats((uint64_t)&v38, (const float *)v9, &__src, v18);
  if (v9)
  {
    LOBYTE(v8) = 0;
    uint64_t v19 = v9;
    p_src = &__src;
    do
    {
      unsigned int v22 = *(unsigned __int8 *)p_src;
      p_src = (void **)((char *)p_src + 1);
      unsigned int v21 = v22;
      int v23 = *((__int16 *)&v37[2] + 6 * v22 + 2);
      if ((((unint64_t)*((unsigned int *)*a3 + (v23 >> 5)) >> (v23 & 0x1F)) & 1) != 0
        && BlueFin::GlPeLsq::PackSkfMeas_RR_SignalId(a1, a2 + 56 * (char)v8, (BlueFin::GlSignalId *)((char *)&v37[1] + 12 * v21 + 12)))
      {
        int v8 = (char)(v8 + 1);
        if (v8 > 14) {
          break;
        }
      }
      --v19;
    }
    while (v19);
  }
  return (char)v8;
}

BlueFin::SKFVector *BlueFin::SKFVectorDim<20>::SKFVectorDim(BlueFin::SKFVector *a1, const BlueFin::SKFVector *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  *(void *)a1 = (char *)a1 + 16;
  *((_DWORD *)a1 + 2) = v2;
  *((_DWORD *)a1 + 3) = 20;
  if (*((int *)a2 + 2) >= 21)
  {
    DeviceFaultNotify("glpe_matrix.h", 505, "SKFVectorDim", (char)"LEN >= rotSrc.GetLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 505, "LEN >= rotSrc.GetLen()");
  }
  BlueFin::SKFVector::Clone(a1, a2);
  return a1;
}

const char *BlueFin::GlPeNavGnssKF::GetDebugDescr(BlueFin::GlPeNavGnssKF *this)
{
  return "<NAVGNSSKF>";
}

unint64_t BlueFin::GlPeNavGnssKF::InitializeNavGnssKF(BlueFin::GlPeNavGnssKF *this, const BlueFin::GlPeNavGnssState *a2)
{
  uint64_t v4 = (char *)this + 12085;
  BlueFin::GlPeNavGnssState::operator=((uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)a2);
  *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 196) = 0;
  BlueFin::BigMatrix::Null((BlueFin::GlPeNavGnssKF *)((char *)this + 32), 12, 12);
  if (*((unsigned char *)this + 26))
  {
    BlueFin::BigMatrix::Null((BlueFin::GlPeNavGnssKF *)((char *)this + 32), 12, 12);
    uint64_t v5 = *(void *)this;
    double v6 = *(float *)((char *)this + *(void *)(*(void *)this - 24) + 80) * 0.707106781;
    float v7 = (void *)*((void *)this + 5);
    uint64_t v8 = v7[2];
    *(double *)(v7[1] + 8) = v6 * v6;
    double v9 = *(float *)((char *)this + *(void *)(v5 - 24) + 80) * 0.707106781;
    uint64_t v10 = v7[4];
    *(double *)(v7[3] + 24) = v9 * v9;
    LODWORD(v9) = *(_DWORD *)((char *)this + *(void *)(v5 - 24) + 84);
    uint64_t v11 = v7[6];
    *(double *)(v7[5] + 40) = (float)(*(float *)&v9 * *(float *)&v9);
    double v12 = *(float *)((char *)this + *(void *)(v5 - 24) + 128) * 0.707106781;
    *(double *)(v8 + 16) = v12 * v12;
    double v13 = *(float *)((char *)this + *(void *)(v5 - 24) + 128) * 0.707106781;
    *(double *)(v10 + 32) = v13 * v13;
    LODWORD(v13) = *(_DWORD *)((char *)this + *(void *)(v5 - 24) + 140);
    *(double *)(v11 + 48) = (float)(*(float *)&v13 * *(float *)&v13);
    LODWORD(v13) = *(_DWORD *)((char *)this + *(void *)(v5 - 24) + 96);
    uint64_t v14 = v7[8];
    *(double *)(v7[7] + 56) = fmax((float)(*(float *)&v13 * *(float *)&v13), 1.0e-12);
    LODWORD(v13) = *(_DWORD *)((char *)this + *(void *)(v5 - 24) + 160);
    *(double *)(v14 + 64) = fmax((float)(*(float *)&v13 * *(float *)&v13), 1.0e-12);
    uint64_t v15 = v7[12];
    *(double *)(v7[11] + 88) = fmax((float)(*((float *)a2 + 53) * *((float *)a2 + 53)), 1.0e-12);
    *(double *)(v7[9] + 72) = fmax((float)(*((float *)a2 + 55) * *((float *)a2 + 55)), 1.0e-12);
    *(double *)(v15 + 96) = fmax((float)(*((float *)a2 + 57) * *((float *)a2 + 57)), 1.0e-12);
    float v16 = *((float *)a2 + 59) * *((float *)a2 + 59);
  }
  else
  {
    float v17 = *((float *)a2 + 21);
    double v18 = *((float *)a2 + 20) * 0.707106781 * (*((float *)a2 + 20) * 0.707106781);
    float v7 = (void *)*((void *)this + 5);
    uint64_t v19 = v7[2];
    *(double *)(v7[1] + 8) = v18;
    uint64_t v20 = v7[4];
    *(double *)(v7[3] + 24) = v18;
    uint64_t v21 = v7[6];
    *(double *)(v7[5] + 40) = (float)(v17 * v17);
    *(double *)(v19 + 16) = (float)(*((float *)a2 + 32) * *((float *)a2 + 32));
    *(void *)(v20 + 32) = 0x4023BD3CC9BE45D3;
    *(double *)(v21 + 48) = (float)(*((float *)a2 + 35) * *((float *)a2 + 35));
    uint64_t v22 = v7[8];
    *(double *)(v7[7] + 56) = fmax((float)(*((float *)a2 + 24) * *((float *)a2 + 24)), 1.0e-12);
    *(double *)(v22 + 64) = fmax((float)(*((float *)a2 + 40) * *((float *)a2 + 40)), 1.0e-12);
    uint64_t v23 = v7[12];
    *(double *)(v7[11] + 88) = fmax((float)(*((float *)a2 + 53) * *((float *)a2 + 53)), 1.0e-12);
    *(double *)(v7[9] + 72) = fmax((float)(*((float *)a2 + 55) * *((float *)a2 + 55)), 1.0e-12);
    float v16 = *((float *)a2 + 59) * *((float *)a2 + 59);
    *(double *)(v23 + 96) = fmax((float)(*((float *)a2 + 57) * *((float *)a2 + 57)), 1.0e-12);
  }
  *(double *)(v7[10] + 80) = fmax(v16, 1.0e-12);
  (*(void (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 392))(this);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  *((_DWORD *)this + 369) = *((_DWORD *)a2 + 50);
  *(_OWORD *)((char *)this + 1480) = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 187) = *((void *)a2 + 3);
  *((_DWORD *)this + 376) = *((_DWORD *)a2 + 20);
  double v24 = *((double *)a2 + 13);
  uint64_t v25 = *(void *)this;
  uint64_t v26 = *(void *)this;
  float64x2_t v27 = *((float64x2_t *)a2 + 7);
  float v28 = sqrt(vmulq_f64(v27, v27).f64[0] + v24 * v24);
  *((float *)this + 331) = v28;
  unsigned __int8 v29 = (float64x2_t *)((char *)this + *(void *)(v25 - 24));
  v29[6].f64[1] = v24;
  void v29[7] = v27;
  *(float *)&double v24 = *((double *)a2 + 15);
  *((float *)this + 332) = -*(float *)&v24;
  *(_DWORD *)((char *)this + *(void *)(v26 - 24) + 176) = *((_DWORD *)a2 + 44);
  __double2 v30 = __sincos_stret(*(float *)((char *)this + *(void *)(v26 - 24) + 176));
  *((void *)this + 167) = *(void *)&v30.__cosval;
  *((void *)this + 168) = *(void *)&v30.__sinval;
  *((void *)this + 169) = 0;
  *((void *)this + 171) = *(void *)&v30.__sinval;
  *((double *)this + 172) = -v30.__cosval;
  *((void *)this + 173) = 0;
  *((void *)this + 176) = 0;
  *((void *)this + 175) = 0;
  *((void *)this + 177) = 0xBFF0000000000000;
  *((_DWORD *)this + 402) = *((_DWORD *)a2 + 50);
  uint64_t v31 = *((void *)a2 + 3);
  *(_OWORD *)((char *)this + 2616) = *(_OWORD *)((char *)a2 + 8);
  *((void *)this + 329) = v31;
  *((void *)this + 380) = 0x4069000000000000;
  *((_DWORD *)this + 448) = 1120272384;
  *uint64_t v4 = 0;
  unint64_t result = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(v26 + 144))(this);
  *((unsigned char *)this + 11456) = 0;
  *((void *)this + 1431) = 0;
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  return result;
}

uint64_t BlueFin::GlPeNavGnssKF::GetADRDeltaPos(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  unsigned int v213 = (_DWORD *)v3;
  uint64_t v214 = v4;
  uint64_t v5 = (BlueFin::GlPeNavGnssKF *)v2;
  v325[23] = *MEMORY[0x263EF8340];
  BOOL v210 = v2 + 167;
  double v6 = (char *)&v237 + 8;
  long long v237 = xmmword_263BBC510;
  int v235 = &v238;
  double v236 = &v239;
  uint64_t v239 = 0;
  for (uint64_t i = 1; i != 22; ++i)
  {
    v236[i] = (uint64_t)v6;
    v6 += 96;
  }
  unsigned int v232 = v234;
  uint64_t v233 = 0x1500000000;
  memset(v234, 0, sizeof(v234));
  char v229 = v231;
  uint64_t v230 = 0x1500000000;
  memset(v231, 0, sizeof(v231));
  v228[0] = 1;
  int v217 = (BlueFin::GlPeNavGnssKF *)v2;
  if ((*(unsigned char *)(v3 + 1) & 0x20) == 0) {
    goto LABEL_228;
  }
  int v8 = *(_DWORD *)(v2[284] + 8);
  BOOL v9 = v8
    && (*(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 200) - v8) >> 5 <= 0x752
    && *(_DWORD *)(v2[281] + 8) != 6;
  uint64_t v10 = v2[281];
  if ((*(_DWORD *)(v10 + 8) - 1) > 1)
  {
    double v12 = 49.0;
  }
  else
  {
    int v11 = *(_DWORD *)(v10 + 16);
    double v12 = v11 == 2 ? 147.0 : dbl_263BBC520[v11 == 3];
  }
  BOOL v13 = *(double *)(*(void *)(v2[5] + 8) + 8) + *(double *)(*(void *)(v2[5] + 24) + 24) > v12;
  uint64_t v5 = (BlueFin::GlPeNavGnssKF *)v2;
  int v14 = (*(unsigned int (**)(void *))(*v2 + 56))(v2) < 0xF || v9;
  if ((v14 | v13)) {
    goto LABEL_228;
  }
  uint64_t v15 = *(void *)v217;
  if (!*((unsigned char *)v217 + *(void *)(*(void *)v217 - 24) + 242)) {
    goto LABEL_228;
  }
  uint64_t v16 = 0;
  v302[1] = 0xC0000000CLL;
  memset(v303, 0, sizeof(v303));
  uint64_t v304 = 0;
  v302[0] = v303;
  long long v297 = &v299;
  uint64_t v298 = 0x1500000000;
  long long v299 = 0u;
  memset(v300, 0, sizeof(v300));
  memset(v301, 0, 32);
  do
  {
    float v17 = &(&v305)[v16];
    *((unsigned char *)v17 + 32) = 0;
    *((_DWORD *)v17 + 9) = -1;
    *((_WORD *)v17 + 20) = 575;
    v16 += 7;
  }
  while (v16 != 147);
  double v18 = (char *)v217 + *(void *)(v15 - 24);
  uint64_t v19 = *((void *)v18 + 11);
  int v20 = **((_DWORD **)v217 + 280);
  v269 = v302;
  long long v270 = v18 + 8;
  uint64_t v271 = v19;
  int v272 = v20;
  uint64_t v273 = 0x4C100000003;
  long long v274 = v18 + 104;
  uint64_t v275 = 0;
  long long v276 = v18 + 152;
  long long v277 = 0u;
  long long v278 = 0u;
  uint64_t v279 = 0;
  uint64_t v280 = 0x4008000000000000;
  v249[0] = &v297;
  v249[1] = &v229;
  v249[2] = &v235;
  v249[3] = &v232;
  long long v250 = 0u;
  long long v251 = 0u;
  uint64_t v252 = 0;
  int v21 = *((unsigned __int8 *)v217 + 26);
  BlueFin::GlPeNavMeasSelect::GlPeNavMeasSelect((uint64_t)&v240, *((void *)v217 + 2), *((void *)v217 + 1));
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v264 + 1, 0x13u, (const void **)(*((void *)v217 + 1) + 184));
  BlueFin::GlPeNavMeasSelect::SelectADR((BlueFin::GlPeNavMeasSelect *)&v240, (BlueFin::GlSignalIdSet *)&__src);
  int v261 = &v262[4];
  v262[0] = 19;
  memset(&v262[4], 0, 76);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v284, (unsigned int *)v284 + 3, 0x13u, (const void **)(*((void *)v217 + 1) + 184));
  long long v282 = &v283[4];
  v283[0] = 8;
  memset(&v283[4], 0, 32);
  bzero(&v321, 0x320uLL);
  for (uint64_t j = 0; j != 1200; j += 12)
  {
    uint64_t v23 = &v313[j];
    *uint64_t v23 = 0;
    *((_DWORD *)v23 + 1) = -1;
    *((_WORD *)v23 + 4) = 575;
  }
  if (v21) {
    int v24 = 21;
  }
  else {
    int v24 = 12;
  }
  unsigned int v215 = v24;
  int v312 = 0;
  memset(v311, 0, sizeof(v311));
  unsigned __int8 v256 = v264;
  memcpy(v260, __src, 4 * v264);
  unsigned __int16 v258 = 0;
  unsigned __int8 v257 = 0;
  int v259 = v260[0];
  BlueFin::GlSetIterator::operator++(&v256);
  unsigned __int8 v26 = 0;
  if (v257 != v256)
  {
    unsigned __int8 v26 = 0;
    do
    {
      uint64_t v293 = 0;
      long long v292 = 0;
      HIDWORD(v295) = -1;
      long long v294 = xmmword_263BB9FD0;
      LOWORD(v296) = 0;
      BYTE2(v296) = 0;
      LOBYTE(v295) = 0;
      DWORD1(v295) = -1;
      WORD4(v295) = 575;
      if (v258 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      float64x2_t v27 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v258;
      char v28 = *v27;
      LODWORD(v27) = v27[1];
      v253[0] = v28;
      int v254 = (int)v27;
      __int16 v255 = v258;
      if BlueFin::GlPeNavUtil::PackSkfMeas_ADR_SignalId((uint64_t)v217, (uint64_t)&v292, (BlueFin::GlSignalId *)v253, 3)&& (((unint64_t)*(unsigned int *)(*(void *)&v284[0] + 4 * (v255 >> 5)) >> (v255 & 0x1F)))
      {
        *((double *)&v321 + v26) = (double)-*(__int16 *)(BlueFin::GlPeMsmtMgr::GetPeMeas(*((BlueFin::GlPeMsmtMgr **)v217 + 1), (const BlueFin::GlSignalId *)v253, 0)+ 78);
        unsigned __int8 v29 = &v313[12 * v26];
        if (v29 != v253)
        {
          *unsigned __int8 v29 = v253[0];
          __double2 v30 = &v313[12 * v26];
          *((_DWORD *)v30 + 1) = v254;
          *((_WORD *)v30 + 4) = v255;
        }
        ++v26;
      }
      BlueFin::GlSetIterator::operator++(&v256);
    }
    while (v257 != v256 && v26 <= 0x63u);
  }
  BlueFin::GlSortDoubles((uint64_t)&v321, (const double *)v26, v311, v25);
  int v31 = 0;
  char v32 = 0;
  uint64_t v33 = v26;
  int v34 = &v305;
  uint64_t v211 = v33;
  do
  {
    if (v31 && v32 > 5) {
      break;
    }
    if (v33)
    {
      unsigned __int16 v35 = (unsigned __int8 *)v311;
      while (1)
      {
        int v37 = *v35++;
        int v36 = v37;
        double v38 = (BlueFin::GlSignalId *)&v313[12 * v37];
        if ((((unint64_t)*(unsigned int *)&v282[((unint64_t)*(unsigned __int8 *)v38 >> 3) & 0x1C] >> (*(unsigned char *)v38 & 0x1F)) & 1) == 0)
        {
          if (BlueFin::GlPeNavUtil::PackSkfMeas_ADR_SignalId((uint64_t)v217, (uint64_t)v34, v38, v31))
          {
            v34 += 7;
            *(_DWORD *)&v282[((unint64_t)*(unsigned __int8 *)v38 >> 3) & 0x1C] |= 1 << *(unsigned char *)v38;
            int v39 = *(__int16 *)&v313[12 * v36 + 8];
            *((_DWORD *)v261 + (v39 >> 5)) |= 1 << v39;
            if (v215 == ++v32) {
              break;
            }
          }
        }
        if (!--v33) {
          goto LABEL_44;
        }
      }
      char v32 = v215;
    }
LABEL_44:
    ++v31;
    uint64_t v33 = v211;
  }
  while (v31 != 3);
  unsigned int v40 = 0;
  long long v41 = (char *)__src + 4 * v264 - 4;
  do
  {
    if (*v41)
    {
      unsigned int v42 = *v41 - (((*v41 >> 1) & 0x5B6DB6DB) + ((*v41 >> 2) & 0x9249249));
      unsigned int v40 = ((v42 + (v42 >> 3)) & 0xC71C71C7) + v40 - 63 * (((v42 + (v42 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v41;
  }
  while (v41 >= __src);
  int v43 = (char *)v261;
  uint64_t v44 = v262[0];
  if ((v40 & 0xFFFC) == 0) {
    bzero(v261, ((4 * v262[0] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  unsigned int v45 = 0;
  uint64_t v46 = &v43[4 * v44 - 4];
  do
  {
    if (*(_DWORD *)v46)
    {
      unsigned int v47 = *(_DWORD *)v46 - (((*(_DWORD *)v46 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v46 >> 2) & 0x9249249));
      unsigned int v45 = ((v47 + (v47 >> 3)) & 0xC71C71C7) + v45 - 63 * (((v47 + (v47 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v46 -= 4;
  }
  while (v46 >= v43);
  uint64_t v48 = (unsigned __int16)v45;
  if ((_WORD)v45)
  {
    if (*((_DWORD *)&v308 + 14 * (unsigned __int16)v45 - 11) == -1)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 441, "getMeasForADR", (char)"cNbTotalKfMeas==0 || pSkfMeasIn[cNbTotalKfMeas-1].eMeasType != SKF_MEAS_INVALID");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 441, "cNbTotalKfMeas==0 || pSkfMeasIn[cNbTotalKfMeas-1].eMeasType != SKF_MEAS_INVALID");
    }
    if ((unsigned __int16)v45 > v215)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 442, "getMeasForADR", (char)"cNbTotalKfMeas <= ulMaxMeas");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 442, "cNbTotalKfMeas <= ulMaxMeas");
    }
    int v49 = 0;
    uint64_t v50 = 0;
    v228[0] = 1;
    char v51 = &v313[12];
    *(void *)uint64_t v313 = &v313[12];
    v313[8] = 4;
    *(_OWORD *)&v313[12] = 0uLL;
    uint64_t v52 = (_DWORD *)&v308 + 3;
    do
    {
      if (*v52 == 10)
      {
        unsigned int v53 = v228[0];
        if (v228[0] - 576 <= 0xFFFFFDC0)
        {
          DeviceFaultNotify("glsignalid.h", 496, "push_back", (char)"(m_maxIndex - m_minIndex) < _DIM(m_otSignalIdsObjects)");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 496, "(m_maxIndex - m_minIndex) < _DIM(m_otSignalIdsObjects)");
        }
        __int16 v54 = *((_WORD *)v52 - 2);
        ++v228[0];
        *(_WORD *)BlueFin::GlSignalIdList::operator[](v228, v53) = v54;
        char v51 = *(_DWORD **)v313;
        *(_DWORD *)(*(void *)v313 + 4 * (v49 >> 21)) |= 1 << v50;
      }
      ++v50;
      v49 += 0x10000;
      v52 += 14;
    }
    while (v48 != v50);
    double v55 = v217;
    if (*v51) {
      goto LABEL_70;
    }
    unsigned int v56 = v313[8];
    if (v313[8] < 2u) {
      goto LABEL_71;
    }
  }
  else
  {
    v228[0] = 1;
    char v51 = &v313[12];
    *(void *)uint64_t v313 = &v313[12];
    unsigned int v56 = 4;
    v313[8] = 4;
    *(void *)&v313[20] = 0;
    *(void *)&v313[12] = 0;
    double v55 = v217;
  }
  if (v51[1])
  {
LABEL_70:
    if (BlueFin::GlSetBase::Highest((BlueFin::GlSetBase *)v313) >= 0x15)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 2301, "ComputeZRH", (char)"otMeasArrayIx.IsEmpty() || (GlIntU32)otMeasArrayIx.Highest() < _DIM(pastADRMeas)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 2301, "otMeasArrayIx.IsEmpty() || (GlIntU32)otMeasArrayIx.Highest() < _DIM(pastADRMeas)");
    }
    goto LABEL_71;
  }
  uint64_t v76 = 2;
  while (v56 != v76)
  {
    if (v51[v76++])
    {
      if (v76 - 1 < (unint64_t)v56) {
        goto LABEL_70;
      }
      break;
    }
  }
LABEL_71:
  if ((*(unsigned int (**)(void, void **, void *, double **, unsigned char *))(**((void **)v55 + 2) + 16))(*((void *)v55 + 2), &v269, v249, &v305, v313))
  {
    uint64_t v5 = v217;
    goto LABEL_228;
  }
  uint64_t v5 = v217;
  uint64_t v58 = *((void *)v217 + 281);
  int v59 = *(_DWORD *)(v58 + 8);
  if ((v59 - 3) >= 4) {
    float v60 = 5.0;
  }
  else {
    float v60 = 7.0;
  }
  unsigned int v61 = v59 - 1;
  BOOL v62 = v61 <= 1 && (*(_DWORD *)(v58 + 16) & 0xFFFFFFFE) == 2;
  unsigned int v63 = (_DWORD *)*((void *)v217 + 1);
  if (*v63 == -7200001
    || ((int v64 = v63[1], v65 = *v63 - v64, v64 != -7200001) ? (v66 = v65 == -7200001) : (v66 = 1),
        !v66 ? (BOOL v67 = v228[0] >= 2) : (BOOL v67 = 0),
        !v67))
  {
LABEL_228:
    if ((int)(float)((float)(*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)v5 + 64))(v5)
                                  / (float)(*((float *)v217 + 546) * 1000.0)) >= 2)
    {
      unint64_t v203 = *v213;
      if ((v203 & 0x80000) != 0)
      {
        BlueFin::GlPeNavGnssKF::Propagate((uint64_t)v217, (v203 >> 9) & 1);
        BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v313);
        BlueFin::GlPeNavGnssKF::AddProcessNoise(v217, (uint64_t)v313, *(_DWORD *)((char *)v217 + *(void *)(*(void *)v217 - 24) + 200), (const BlueFin::GlPeNavGnssState *)((*v213 >> 8) & 1), 0, 0, (*v213 & 0x30000) != 0, v204, v209);
      }
    }
    v228[0] = 1;
    goto LABEL_232;
  }
  if (DWORD1(v237) != 12) {
    goto LABEL_227;
  }
  uint64_t v68 = v237;
  if ((int)v237 < 4) {
    goto LABEL_227;
  }
  if (v228[0] - 1 != v237)
  {
    DeviceFaultNotify("glpe_navgnsskf.cpp", 487, "ADR2DeltaPos", (char)"otSignalIdsUsed.Cnt() == (GlIntU32)otH.GetRowSize()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 487, "otSignalIdsUsed.Cnt() == (GlIntU32)otH.GetRowSize()");
  }
  *(float *)v57.i32 = (float)v65 / 1000.0;
  BOOL v70 = v61 < 2 || v237 < 5;
  int v71 = *((unsigned __int8 *)v217 + 26);
  if (*((unsigned char *)v217 + 26))
  {
    uint64_t v72 = (double *)((char *)v217 + *(void *)(*(void *)v217 - 24));
    double v73 = v72[13] * *(float *)v57.i32;
    double v74 = v72[14] * *(float *)v57.i32;
    double v75 = v72[15] * *(float *)v57.i32;
  }
  else
  {
    double v78 = (float)(*(float *)v57.i32 * *((float *)v217 + 331));
    double v73 = *((double *)v217 + 168) * 0.0 + *((double *)v217 + 167) * v78;
    double v74 = *((double *)v217 + 172) * 0.0 + *((double *)v217 + 171) * v78;
    double v75 = -(float)(*(float *)v57.i32 * *((float *)v217 + 332));
  }
  *(void *)&v313[8] = 0x400000004;
  *(_OWORD *)&v313[16] = 0u;
  long long v314 = 0u;
  *(void *)&long long v315 = 0;
  *(void *)uint64_t v313 = &v313[16];
  long long v305 = (double *)&v307;
  uint64_t v306 = 0x400000000;
  uint64_t v309 = 0;
  long long v308 = 0u;
  long long v307 = 0u;
  BOOL v79 = (void *)*((void *)v217 + 5);
  double v80 = *(double *)(v79[4] + 32);
  if (!v71) {
    double v80 = v80 * (float)(*((float *)v217 + 331) * *((float *)v217 + 331));
  }
  uint64_t v81 = *(void *)(v79[8] + 64);
  uint64_t v82 = *(void *)(v79[6] + 48);
  *((void *)&v307 + 1) = *(void *)(v79[2] + 16);
  *(double *)&long long v308 = v80;
  *((void *)&v308 + 1) = v82;
  uint64_t v309 = v81;
  *(double *)&v313[24] = v73;
  *(double *)&long long v314 = v74;
  *((double *)&v314 + 1) = v75;
  int32x2_t v216 = v57;
  *(double *)&uint64_t v212 = *(float *)v57.i32;
  *(double *)&long long v315 = *(double *)((char *)v217 + *(void *)(*(void *)v217 - 24) + 152) * *(float *)v57.i32;
  double v83 = v70 ? 1.0 : 5.0;
  double v84 = 0.0;
  do
  {
    *((void *)&v321 + 1) = 0x400000004;
    long long v322 = 0u;
    long long v323 = 0u;
    double v324 = 0.0;
    *(void *)&long long v321 = &v322;
    uint64_t v241 = 0x400000004;
    long long v242 = 0u;
    long long v243 = 0u;
    double v244 = 0.0;
    int v240 = &v242;
    double v85 = *(double *)&v232[8 * v68];
    *(double *)&v232[8 * v68] = v85 * 9.0;
    uint64_t v86 = v236[v68];
    *((void *)&v322 + 1) = *(void *)(v86 + 16);
    *((double *)&v242 + 1) = v305[1] * *(double *)(v86 + 16);
    *(void *)&long long v323 = *(void *)(v86 + 32);
    *(double *)&long long v243 = v305[2] * *(double *)(v86 + 32);
    *((void *)&v323 + 1) = *(void *)(v86 + 48);
    *((double *)&v243 + 1) = *((double *)&v323 + 1) * v305[3];
    double v324 = *(double *)(v86 + 64);
    double v244 = v324 * v305[4];
    double v87 = BlueFin::SKFVector::dot((BlueFin::SKFVector *)&v321, (const BlueFin::SKFVector *)&v240);
    double v88 = BlueFin::SKFVector::dot((BlueFin::SKFVector *)&v321, (const BlueFin::SKFVector *)v313);
    double v89 = vabdd_f64(v88, *(double *)&v229[8 * v68]);
    if (v89 > v83 || v89 / sqrt(v85 + v87) >= 50.0)
    {
      uint64_t v90 = 8 * (int)v68;
      BlueFin::BigMatrix::RemoveRow((BlueFin::BigMatrix *)&v235, v68);
      int v91 = v233;
      if ((int)v233 > (int)v68)
      {
        double v92 = &v232[v90 + 8];
        uint64_t v93 = (int)v233 - (uint64_t)(int)v68;
        do
        {
          *(v92 - 1) = *v92;
          ++v92;
          --v93;
        }
        while (v93);
      }
      LODWORD(v233) = v91 - 1;
      int v94 = v230;
      if ((int)v230 > (int)v68)
      {
        double v95 = &v229[v90 + 8];
        uint64_t v96 = (int)v230 - (uint64_t)(int)v68;
        do
        {
          *(v95 - 1) = *v95;
          ++v95;
          --v96;
        }
        while (v96);
      }
      LODWORD(v230) = v94 - 1;
      BlueFin::GlSignalIdList::Remove((BlueFin::GlSignalIdList *)v228, v68);
    }
    else
    {
      double v84 = v84 + *(double *)&v232[8 * v68];
    }
    BOOL v97 = v68-- <= 1;
  }
  while (!v97);
  uint64_t v5 = v217;
  if (DWORD1(v237) != 12 || (int v98 = v237, (int)v237 < 4))
  {
LABEL_227:
    *(_WORD *)(v214 + 240) = 0;
    goto LABEL_228;
  }
  double v99 = v84 / (double)(int)v237;
  unint64_t v100 = (char *)&v307 + 8;
  long long v307 = xmmword_263BBC530;
  long long v305 = (double *)&v308;
  uint64_t v306 = (uint64_t)&v310;
  uint64_t v310 = 0;
  for (uint64_t k = 8; k != 176; k += 8)
  {
    *(void *)(v306 + k) = v100;
    v100 += 32;
  }
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v305, v98, 4);
  BlueFin::SKFVectorDim<21>::SKFVectorDim((uint64_t)v302, (__int16)v237);
  uint64_t v102 = v237;
  if ((int)v237 >= 1)
  {
    int32x2_t v103 = (double *)(v302[0] + 8);
    int v104 = (double *)(v232 + 8);
    int v105 = (void *)(v306 + 8);
    int v106 = v236 + 1;
    do
    {
      int v108 = (void *)*v106++;
      int v107 = v108;
      uint64_t v109 = v108[2];
      uint64_t v110 = (void *)*v105++;
      v110[1] = v109;
      v110[2] = v107[4];
      v110[3] = v107[6];
      v110[4] = v107[8];
      double v111 = *v104++;
      *v103++ = 1.0 / v111;
      --v102;
    }
    while (v102);
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  int v112 = (char *)&v242 + 8;
  long long v242 = xmmword_263BBA470;
  int v240 = &v243;
  uint64_t v241 = (uint64_t)&v245;
  uint64_t v245 = 0;
  for (uint64_t m = 8; m != 40; m += 8)
  {
    *(void *)(v241 + m) = v112;
    v112 += 32;
  }
  uint64_t v114 = (char *)&v299 + 8;
  long long v299 = xmmword_263BBA470;
  long long v297 = (long long *)v300;
  uint64_t v298 = (uint64_t)v301;
  v301[0] = 0;
  for (uint64_t n = 8; n != 40; n += 8)
  {
    *(void *)(v298 + n) = v114;
    v114 += 32;
  }
  long long v292 = &v294;
  uint64_t v293 = 0x400000000;
  long long v294 = 0u;
  long long v295 = 0u;
  uint64_t v296 = 0;
  char v116 = &v313[24];
  *(void *)&v313[24] = 0x1500000004;
  *(void *)uint64_t v313 = &v314;
  *(void *)&v313[8] = &v319;
  uint64_t v319 = 0;
  for (iuint64_t i = 8; ii != 40; ii += 8)
  {
    *(void *)(*(void *)&v313[8] + ii) = v116;
    v116 += 168;
  }
  int v118 = DWORD1(v307);
  *(_DWORD *)&v313[16] = DWORD1(v307);
  *(_DWORD *)&v313[20] = v307;
  if ((int)v307 >= 1)
  {
    uint64_t v119 = v302[0];
    uint64_t v120 = v306;
    uint64_t v121 = v307 + 1;
    uint64_t v122 = *(void *)&v313[8] + 8;
    uint64_t v123 = 1;
    do
    {
      if (v118 >= 1)
      {
        double v124 = *(double *)(v119 + 8 * v123);
        int v125 = (double *)(*(void *)(v120 + 8 * v123) + 8);
        long long v126 = (uint64_t *)v122;
        uint64_t v127 = (v118 + 1) - 1;
        do
        {
          double v128 = *v125++;
          double v129 = v124 * v128;
          uint64_t v130 = *v126++;
          *(double *)(v130 + 8 * v123) = v129;
          --v127;
        }
        while (v127);
      }
      ++v123;
    }
    while (v123 != v121);
  }
  BlueFin::BigMatrix::mult_sym((uint64_t)&v240, (const BlueFin::BigMatrix *)v313, (const BlueFin::BigMatrix *)&v305);
  BlueFin::SKFVector::mult((uint64_t *)&v292, (const BlueFin::BigMatrix *)v313, (const BlueFin::SKFVector *)&v229);
  if (!BlueFin::BigMatrix::inv((BlueFin::BigMatrix *)&v240, (BlueFin::BigMatrix *)&v297, 0))
  {
    uint64_t v5 = v217;
    goto LABEL_227;
  }
  uint64_t v291 = 0;
  long long v282 = &v283[8];
  *(void *)long long v283 = 0x400000000;
  memset(&v283[8], 0, 40);
  BlueFin::SKFVector::mult((uint64_t *)&v282, (const BlueFin::BigMatrix *)&v297, (const BlueFin::SKFVector *)&v292);
  if (*((unsigned char *)v217 + 26))
  {
    BlueFin::Matrix::Matrix((uint64_t)v313, (const BlueFin::BigMatrix *)&v297);
    long long v287 = v316;
    long long v288 = *(_OWORD *)v317;
    long long v289 = *(_OWORD *)&v317[16];
    long long v290 = *(_OWORD *)&v317[32];
    v284[0] = *(_OWORD *)v313;
    v284[1] = *(_OWORD *)&v313[16];
    long long v285 = v314;
    long long v286 = v315;
    uint64_t v291 = v318;
  }
  else
  {
    uint64_t v318 = 0x400000004;
    *(_OWORD *)uint64_t v313 = *v210;
    *(void *)&v313[16] = *((void *)v217 + 169);
    *(void *)&v313[24] = 0;
    long long v314 = v210[2];
    long long v315 = *((unint64_t *)v217 + 173);
    long long v316 = v210[4];
    *(void *)int v317 = *((void *)v217 + 177);
    memset(&v317[8], 0, 32);
    *(void *)&v317[40] = 0x3FF0000000000000;
    BlueFin::BigMatrix::ReShape(&v297, 4, 4);
    BlueFin::Matrix::Matrix((uint64_t)&v321, (const BlueFin::BigMatrix *)&v297);
    uint64_t v281 = 0;
    BlueFin::Matrix::mult((BlueFin::Matrix *)&v269, (const BlueFin::Matrix *)&v321, 1, (const BlueFin::Matrix *)v313, v162);
    BlueFin::Matrix::mult((uint64_t)v284, (const BlueFin::Matrix *)v313, (const BlueFin::Matrix *)&v269);
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
      }
    }
  }
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
  }
  uint64_t v5 = v217;
  uint64_t v131 = *(void *)v217;
  unsigned int v132 = (double *)((char *)v217 + *(void *)(*(void *)v217 - 24) + 8);
  uint64_t v133 = (uint64_t)v282;
  uint64_t v134 = *((void *)v282 + 3);
  long long v321 = *(_OWORD *)(v282 + 8);
  *(void *)&long long v322 = v134;
  BlueFin::ned2lla(v132, (double *)&v321, (double *)v313);
  *(_OWORD *)(v214 + 8) = *(_OWORD *)v313;
  *(void *)(v214 + 24) = *(void *)&v313[16];
  double v135 = *(double *)(v133 + 24) / *(double *)&v212;
  *(float64x2_t *)(v214 + 104) = vdivq_f64(*(float64x2_t *)(v133 + 8), (float64x2_t)vdupq_lane_s64(v212, 0));
  *(double *)(v214 + 120) = v135;
  *(unsigned char *)(v214 + 240) = 1;
  v136.f64[0] = *(float64_t *)v284;
  double v137 = *((double *)&v285 + 1);
  double v138 = *(double *)v284 + *((double *)&v285 + 1);
  float v139 = (*(double *)v284 + *((double *)&v285 + 1)) / *(double *)&v212;
  *(float *)(v214 + 128) = sqrtf(v139);
  double v140 = *(double *)&v288;
  float v141 = *(double *)&v288;
  *(float *)(v214 + 140) = sqrtf(v141) / *(float *)v216.i32;
  int v142 = *((unsigned __int8 *)v217 + 26);
  unsigned int v143 = (void *)*((void *)v217 + 5);
  float v144 = v137 + v136.f64[0] + *(double *)(v143[1] + 8) + *(double *)(v143[3] + 24);
  *(float *)(v214 + 80) = fmaxf(sqrtf(v144), 1.0);
  *(float *)&double v140 = v140 + *(double *)(v143[5] + 40);
  *(float *)(v214 + 84) = fmaxf(sqrtf(*(float *)&v140), 1.0);
  if (v142)
  {
    v136.f64[1] = v137;
    *(float32x2_t *)(v214 + 132) = vsqrt_f32(vdiv_f32(vcvt_f32_f64(v136), (float32x2_t)vdup_lane_s32(v216, 0)));
  }
  *(double *)(v214 + 88) = *(double *)((char *)v217 + *(void *)(v131 - 24) + 88) + *(double *)(v133 + 32);
  double v145 = *((double *)&v290 + 1);
  float v146 = *(double *)(v143[7] + 56) + *((double *)&v290 + 1);
  *(float *)(v214 + 96) = sqrtf(v146);
  double v147 = *(double *)(v133 + 32) / *(double *)&v212;
  *(double *)(v214 + 152) = v147;
  *(float *)&double v145 = v145;
  *(float *)(v214 + 160) = sqrtf(*(float *)&v145 / *(float *)v216.i32);
  long double v148 = *(double *)(v133 + 8);
  long double v149 = *(double *)(v133 + 16);
  double v150 = atan2(v149, v148);
  if (v150 < 0.0) {
    double v150 = v150 + 6.28318531;
  }
  float v151 = v138 / v99;
  if (sqrtf(v151) <= v60
    && (uint64_t v152 = (double *)((char *)v217 + *(void *)(*(void *)v217 - 24)), vabdd_f64(v152[19], v147) <= 3.0)
    && vabdd_f64(v152[15], v135) <= 1.0)
  {
    if ((int)v237 < 5)
    {
      BOOL v153 = 0;
      int v154 = 1;
    }
    else
    {
      double v166 = v150;
      uint64_t v167 = (char *)&v322 + 8;
      long long v322 = xmmword_263BBC530;
      *(void *)&long long v321 = &v323;
      *((void *)&v321 + 1) = v325;
      v325[0] = 0;
      for (juint64_t j = 8; jj != 176; jj += 8)
      {
        *(void *)(*((void *)&v321 + 1) + jj) = v167;
        v167 += 32;
      }
      BlueFin::BigMatrix::mult((uint64_t)&v321, (const BlueFin::BigMatrix *)&v305, (const BlueFin::BigMatrix *)&v297);
      float64x2_t v169 = &v313[24];
      *(_OWORD *)&v313[16] = xmmword_263BBC540;
      *(void *)uint64_t v313 = &v314;
      *(void *)&v313[8] = &v320;
      uint64_t v320 = 0;
      for (kuint64_t k = 8; kk != 176; kk += 8)
      {
        *(void *)(*(void *)&v313[8] + kk) = v169;
        v169 += 168;
      }
      BlueFin::BigMatrix::mult((uint64_t)v313, (const BlueFin::BigMatrix *)&v321, 1, (const BlueFin::BigMatrix *)&v305);
      unint64_t v171 = *(unsigned int *)&v313[16];
      if (*(int *)&v313[16] >= 1)
      {
        uint64_t v172 = v232;
        uint64_t v173 = *(void *)&v313[8];
        do
        {
          *(double *)(*(void *)(v173 + 8 * v171) + 8 * v171) = *(double *)(*(void *)(v173 + 8 * v171) + 8 * v171)
                                                               - *(double *)&v172[8 * v171];
          BOOL v97 = v171-- > 1;
        }
        while (v97);
      }
      BlueFin::SKFVectorDim<21>::SKFVectorDim((uint64_t)&v269, v237);
      BlueFin::SKFVectorDim<21>::SKFVectorDim((uint64_t)v311, v237);
      unint64_t v177 = v237;
      if ((int)v237 >= 1)
      {
        do
        {
          uint64_t v264 = 0x400000004;
          uint64_t v267 = 0;
          long long v265 = 0u;
          long long v266 = 0u;
          __src = &v265;
          unsigned int v178 = (void *)v236[v177];
          uint64_t v179 = v178[4];
          *((void *)&v265 + 1) = v178[2];
          *(void *)&long long v266 = v179;
          uint64_t v180 = v178[8];
          *((void *)&v266 + 1) = v178[6];
          uint64_t v267 = v180;
          double v181 = BlueFin::SKFVector::dot((BlueFin::SKFVector *)&__src, (const BlueFin::SKFVector *)&v282);
          double v182 = v181 - *(double *)&v229[8 * v177];
          *(double *)&v269[v177] = v182;
          *(double *)(v311[0] + 8 * v177) = v182
                                          / sqrt(-*(double *)(*(void *)(*(void *)&v313[8] + 8 * v177) + 8 * v177));
          BOOL v97 = v177-- > 1;
        }
        while (v97);
      }
      double v186 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v269, v174, v175, v176);
      uint64_t v187 = v270;
      if ((int)v270 >= 1)
      {
        int v188 = (double *)(v269 + 1);
        do
        {
          *int v188 = fabs(*v188);
          ++v188;
          --v187;
        }
        while (v187);
      }
      BOOL v153 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v269, v183, v184, v185) > 0.0299999993;
      uint64_t v189 = v237;
      if ((int)v237 >= 1)
      {
        do
        {
          if (fabs(*(double *)(v311[0] + 8 * v189)) > 3.0) {
            BlueFin::GlSignalIdList::Remove((BlueFin::GlSignalIdList *)v228, v189);
          }
          BOOL v97 = v189-- <= 1;
        }
        while (!v97);
      }
      BOOL v190 = fabs(v186) <= 0.00999999978;
      uint64_t v191 = *((void *)v217 + 2);
      LODWORD(v261) = 0;
      *(void *)unsigned int v262 = &v262[12];
      v262[8] = 8;
      memset(&v262[12], 0, 32);
      *(_OWORD *)&v262[48] = xmmword_263BBA380;
      *(int32x2_t *)&v262[64] = vdup_n_s32(0x42C60000u);
      *(_DWORD *)&v262[72] = 1120272384;
      BlueFin::stDops::stDops((uint64_t)&__src, (uint64_t)&v261);
      uint64_t v268 = v191;
      uint64_t v192 = *(unsigned int *)((char *)v217 + *(void *)(*(void *)v217 - 24) + 200);
      BlueFin::GlSignalIdList::GetSignalIdSet((uint64_t)v249, v228);
      BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)v249, (uint64_t)v253);
      uint64_t v248 = *(void *)((char *)v217 + *(void *)(*(void *)v217 - 24) + 88);
      int v247 = **((_DWORD **)v217 + 280);
      int v246 = 0;
      BOOL v209 = 0;
      BlueFin::GlPeDops::GetDops((uint64_t)&__src, v192);
      int v154 = *(float *)&v260[13] <= v60 && v228[0] - 5 < 0xFFFFFFFC && v190;
      uint64_t v133 = (uint64_t)v282;
      long double v148 = *((double *)v282 + 1);
      long double v149 = *((double *)v282 + 2);
      double v150 = v166;
      uint64_t v5 = v217;
    }
  }
  else
  {
    BOOL v153 = 0;
    int v154 = 0;
  }
  float v155 = v149 * v149 + v148 * v148 + *(double *)(v133 + 24) * *(double *)(v133 + 24);
  float v156 = sqrtf(v155) / *(float *)v216.i32;
  int v157 = *(_DWORD *)(*((void *)v5 + 281) + 8);
  if ((v157 - 1) <= 1 && v156 > 7.5
    || ((unsigned int v158 = v157 - 3, v156 > 26.85) ? (v159 = v158 >= 3) : (v159 = 1), v159 ? (v160 = v154 == 0) : (v160 = 1), v160))
  {
    int v161 = 1;
    goto LABEL_216;
  }
  if (v157 == 6)
  {
    double v163 = 3.0;
    double v164 = *(double *)v284;
    if (*(double *)v284 < 3.0) {
      double v164 = 3.0;
    }
    *(double *)long long v284 = v164;
    if (*((double *)&v285 + 1) >= 3.0) {
      double v163 = *((double *)&v285 + 1);
    }
    double v165 = *(double *)&v212;
  }
  else
  {
    double v165 = *(double *)&v212;
    if ((v157 - 1) > 1) {
      goto LABEL_212;
    }
    double v163 = 0.01;
    double v194 = *(double *)v284;
    if (*(double *)v284 < 0.01) {
      double v194 = 0.01;
    }
    *(double *)long long v284 = v194;
    if (*((double *)&v285 + 1) >= 0.01) {
      double v163 = *((double *)&v285 + 1);
    }
  }
  *((double *)&v285 + 1) = v163;
LABEL_212:
  if (v158 <= 3
    && sqrt(*(double *)(v214 + 112) * *(double *)(v214 + 112) + *(double *)(v214 + 104) * *(double *)(v214 + 104)) > 1.79999995)
  {
    *(float32x4_t *)(v214 + 128) = vmaxnmq_f32(*(float32x4_t *)(v214 + 128), (float32x4_t)xmmword_263BBC550);
  }
  int v161 = 0;
  double v195 = (void *)*((void *)v5 + 5);
  *(double *)(v195[1] + 8) = *(double *)(v195[1] + 8) + *(double *)v284 * v165;
  *(double *)(v195[3] + 24) = *(double *)(v195[3] + 24) + *((double *)&v285 + 1) * v165;
  *(double *)(v195[5] + 40) = *(double *)(v195[5] + 40) + *(double *)&v288 * v165;
  *(double *)(v195[7] + 56) = *(double *)(v195[7] + 56) + *((double *)&v290 + 1) * v165;
  uint64_t v196 = *(void *)v5;
  int v197 = (char *)v5 + *(void *)(*(void *)v5 - 24);
  *(_OWORD *)(v197 + 8) = *(_OWORD *)(v214 + 8);
  *((void *)v197 + 3) = *(void *)(v214 + 24);
  *(void *)((char *)v5 + *(void *)(v196 - 24) + 88) = *(void *)(v214 + 88);
  *(_DWORD *)((char *)v5 + *(void *)(v196 - 24) + 200) = **((_DWORD **)v5 + 1);
LABEL_216:
  double v198 = sqrt(*(double *)(v214 + 112) * *(double *)(v214 + 112) + *(double *)(v214 + 104) * *(double *)(v214 + 104));
  if (v198 <= 0.5 || (float v199 = *(float *)(v214 + 128), v198 <= (float)(v199 * 3.0)))
  {
    *(unsigned char *)(v214 + 241) = 0;
  }
  else
  {
    *(unsigned char *)(v214 + 241) = 1;
    float v200 = v150;
    *(float *)(v214 + 176) = v200;
    float v201 = v199 / v198;
    *(float *)(v214 + 184) = v201;
  }
  if (v62)
  {
    int v202 = (int)v237 < 6 || v153;
    if (v202 == 1) {
      *(_WORD *)(v214 + 240) = 0;
    }
  }
  if (v161) {
    goto LABEL_227;
  }
LABEL_232:
  BlueFin::GlSignalIdList::GetSignalIdSet((uint64_t)v223, v228);
  uint64_t v205 = BlueFin::GlSetBase::operator=(v214 + 440, (uint64_t)v223);
  *(_OWORD *)(v214 + 512) = *(_OWORD *)((char *)v227 + 12);
  *(_OWORD *)(v205 + 28) = v225;
  *(_OWORD *)(v205 + 44) = v226;
  *(_OWORD *)(v205 + 60) = v227[0];
  *(_OWORD *)(v205 + 12) = v224;
  uint64_t v206 = *(void *)(*(void *)v217 - 24);
  BlueFin::GlSignalIdList::GetSignalIdSet((uint64_t)v218, v228);
  double v207 = (char *)v217 + v206;
  uint64_t result = BlueFin::GlSetBase::operator=((uint64_t)(v207 + 440), (uint64_t)v218);
  *((_OWORD *)v207 + 32) = *(_OWORD *)&v222[12];
  *(_OWORD *)(result + 28) = v220;
  *(_OWORD *)(result + 44) = v221;
  *(_OWORD *)(result + 60) = *(_OWORD *)v222;
  *(_OWORD *)(result + 12) = v219;
  return result;
}

unint64_t BlueFin::GlPeNavGnssKF::Propagate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  char v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = *(void *)v2;
  int v7 = **(_DWORD **)(v2 + 8);
  uint64_t v8 = *(void *)v2;
  int v9 = *(_DWORD *)(v2 + *(void *)(*(void *)v2 - 24) + 200);
  if (v9)
  {
    unsigned int v10 = v7 - v9;
    if (!v10)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 3185, "Propagate", (char)"ulIntervalMs > 0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 3185, "ulIntervalMs > 0");
    }
    float v11 = (double)v10 * 0.001;
    *(float *)(v2 + 2184) = v11;
  }
  else
  {
    float v11 = 1.0;
  }
  double v12 = (_WORD *)(v2 + 16984);
  uint64_t v13 = *(void *)(v2 + 4792);
  int v14 = *(_DWORD *)(v13 + 4216);
  if ((v14 == 1 || v14 == 6)
    && *(unsigned char *)(v13 + 4224)
    && !*(unsigned char *)(v13 + 4226)
    && (*(_DWORD *)(v13 + 4220) - 3) <= 1)
  {
    uint64_t v15 = (void *)(v2 + *(void *)(v8 - 24));
    v15[13] = 0;
    v15[14] = 0;
    v15[15] = 0;
    *(_DWORD *)(v2 + 1324) = 0;
    uint64_t v6 = *(void *)v2;
  }
  uint64_t v16 = v2 + *(void *)(v8 - 24);
  float64x2_t v17 = *(float64x2_t *)(v16 + 104);
  double v18 = *(double *)(v16 + 120);
  double v72 = v18;
  if (*(_DWORD *)(*(void *)(v2 + 2248) + 8) == 6) {
    double v19 = v18;
  }
  else {
    double v19 = 0.0;
  }
  if (*(unsigned char *)(v2 + *(void *)(v6 - 24) + 241))
  {
    BOOL v20 = 0;
  }
  else
  {
    float64x2_t v61 = v17;
    unsigned int v21 = (*(uint64_t (**)(uint64_t))(v6 + 72))(v2);
    float64x2_t v17 = v61;
    BOOL v20 = (float)(*(float *)(v5 + 2184) * 1000.0) < (float)v21;
    uint64_t v6 = *(void *)v5;
  }
  int v22 = (unsigned __int16)*v12;
  if (*v12) {
    int v22 = (*(_DWORD *)(v5 + *(void *)(v6 - 24) + 200) - *(_DWORD *)(v5 + 17020)) <= 0xBB8
  }
       && *(double *)(v5 + 17032) < 0.100000001;
  unsigned int v23 = *(_DWORD *)(*(void *)(v5 + 2248) + 8);
  if (v23 != 10)
  {
    if (v23 >= 3) {
      BOOL v20 = 0;
    }
    if (((v20 | v22) & 1) == 0)
    {
      float64x2_t v71 = vmulq_n_f64(v17, v11);
      double v72 = v19 * v11;
      BlueFin::ned2lla((double *)(v5 + *(void *)(v6 - 24) + 8), v71.f64, (double *)&v62);
      uint64_t v24 = v5 + *(void *)(v6 - 24);
      *(_OWORD *)(v24 + 8) = v62;
      *(void *)(v24 + 24) = v63;
    }
  }
  uint64_t v25 = (double *)(v5 + *(void *)(v6 - 24));
  if (v4)
  {
    float v26 = sqrt(v25[14] * v25[14] + v25[13] * v25[13]);
    *(float *)(v5 + 1324) = v26;
  }
  else
  {
    v25[11] = v25[11] + v25[19] * v11;
  }
  *(_DWORD *)(v5 + *(void *)(v6 - 24) + 200) = v7;
  float64x2_t v27 = (char *)&v68 + 8;
  long long v68 = xmmword_263BBC4D0;
  BOOL v66 = &v69;
  BOOL v67 = &v70;
  uint64_t v70 = 0;
  for (uint64_t i = 1; i != 13; ++i)
  {
    v67[i] = (uint64_t)v27;
    v27 += 96;
  }
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v66, 12, 12);
  uint64_t v29 = 1;
  __double2 v30 = v67;
  do
  {
    *(void *)(v30[v29] + v29 * 8) = 0x3FF0000000000000;
    ++v29;
  }
  while (v29 != 13);
  if ((*(_DWORD *)(*(void *)(v5 + 2248) + 8) - 1) >= 2)
  {
    int v34 = *(unsigned __int8 *)(v5 + 26);
    goto LABEL_47;
  }
  float v31 = *(float *)(v5 + 2184);
  if (v31 <= 0.0)
  {
    if (v31 >= 0.0)
    {
      float v36 = 0.60653;
      goto LABEL_43;
    }
    double v32 = v31;
    double v33 = -0.5;
  }
  else
  {
    double v32 = v31;
    double v33 = 0.5;
  }
  int v35 = (int)(v32 + v33);
  if ((v35 - 1) >= 3) {
    float v36 = flt_263BBC628[v35 == 4];
  }
  else {
    float v36 = flt_263BBC77C[v35 - 1];
  }
LABEL_43:
  int v34 = *(unsigned __int8 *)(v5 + 26);
  if (*(unsigned char *)(v5 + 26))
  {
    uint64_t v37 = *(void *)v5;
    uint64_t v38 = v5 + *(void *)(*(void *)v5 - 24);
    float v39 = *(double *)(v38 + 120);
    float v40 = -v39;
    double v41 = v36;
    float v42 = -(float)(v39 * v36);
    double v43 = (float)-(float)(v36 * v40);
    long long v44 = *(_OWORD *)(v38 + 104);
    *(double *)(v30[6] + 48) = v41;
    uint64_t v45 = v5 + *(void *)(v37 - 24);
    *(_OWORD *)(v45 + 104) = v44;
    *(double *)(v45 + 120) = v43;
  }
  else
  {
    float v46 = *(float *)(v5 + 1328);
    *(double *)(v30[6] + 48) = v36;
    float v42 = v36 * v46;
  }
  *(float *)(v5 + 1328) = v42;
LABEL_47:
  double v47 = v11;
  if (v34)
  {
    *(double *)(v30[1] + 16) = v47;
    double v48 = v11;
LABEL_53:
    *(double *)(v30[3] + 32) = v48;
    goto LABEL_54;
  }
  float v49 = *(float *)(v5 + 1324);
  float v50 = 1.0;
  if (v49 < 0.0) {
    float v50 = -1.0;
  }
  *(double *)(v30[1] + 16) = v47 * v50;
  if (*(unsigned char *)(v5 + *(void *)(*(void *)v5 - 24) + 240))
  {
    double v48 = v47 * (float)-v49;
    goto LABEL_53;
  }
LABEL_54:
  *(double *)(v30[5] + 48) = v47;
  *(double *)(v30[7] + 64) = v47;
  char v51 = (char *)&v63 + 8;
  long long v63 = xmmword_263BBC540;
  *(void *)&long long v62 = &v64;
  *((void *)&v62 + 1) = &v65;
  uint64_t v65 = 0;
  for (uint64_t j = 8; j != 176; j += 8)
  {
    *(void *)(*((void *)&v62 + 1) + j) = v51;
    v51 += 168;
  }
  unint64_t v53 = 1;
  BlueFin::BigMatrix::mult((uint64_t)&v62, (const BlueFin::BigMatrix *)(v5 + 32), 1, (const BlueFin::BigMatrix *)&v66);
  unint64_t result = BlueFin::BigMatrix::mult(v5 + 32, (const BlueFin::BigMatrix *)&v66, (const BlueFin::BigMatrix *)&v62);
  uint64_t v55 = 2;
  do
  {
    if (v53 <= 0xB)
    {
      uint64_t v56 = *(void *)(v5 + 40);
      uint64_t v57 = *(void *)(v56 + 8 * v53);
      uint64_t v58 = v55;
      do
      {
        uint64_t v59 = *(void *)(v56 + 8 * v58);
        double v60 = (*(double *)(v57 + 8 * v58) + *(double *)(v59 + 8 * v53)) * 0.5;
        *(double *)(v59 + 8 * v53) = v60;
        *(double *)(v57 + 8 * v58++) = v60;
      }
      while (v58 != 13);
    }
    ++v53;
    ++v55;
  }
  while (v53 != 13);
  if (BlueFin::GlUtils::m_ucEnabled) {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  return result;
}

unint64_t BlueFin::GlPeNavGnssKF::AddProcessNoise(BlueFin::GlPeNavGnssKF *this, uint64_t a2, int a3, const BlueFin::GlPeNavGnssState *a4, int a5, char a6, int a7, BOOL a8, BOOL a9)
{
  int v12 = (int)a4;
  uint64_t v16 = (unsigned __int8 *)this + 11433;
  float64x2_t v17 = (char *)&v117 + 8;
  long long v117 = xmmword_263BBC4D0;
  unint64_t v115 = &v118;
  char v116 = &v119;
  uint64_t v119 = 0;
  for (uint64_t i = 1; i != 13; ++i)
  {
    v116[i] = (uint64_t)v17;
    v17 += 96;
  }
  if (*((unsigned char *)this + 26)) {
    BOOL v19 = a7 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    double v20 = 0.0;
    if (!*((unsigned char *)this + 26))
    {
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v115, 12, 12);
      goto LABEL_17;
    }
  }
  else if (*((unsigned char *)this + 13296))
  {
    uint64_t v21 = *((void *)this + 599);
    if (*(unsigned char *)(v21 + 2985)) {
      double v22 = *(double *)(v21 + 2952) * 0.0174532925;
    }
    else {
      double v22 = 0.0;
    }
    double v20 = v22 * v22;
  }
  else
  {
    double v20 = 0.0;
  }
  __double2 v23 = __sincos_stret(*(float *)((char *)this + *(void *)(*(void *)this - 24) + 176));
  *((void *)this + 167) = *(void *)&v23.__cosval;
  *((void *)this + 168) = *(void *)&v23.__sinval;
  *((void *)this + 169) = 0;
  *((void *)this + 171) = *(void *)&v23.__sinval;
  *((double *)this + 172) = -v23.__cosval;
  *((void *)this + 173) = 0;
  *((void *)this + 176) = 0;
  *((void *)this + 175) = 0;
  *((void *)this + 177) = 0xBFF0000000000000;
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v115, 12, 12);
LABEL_17:
  int v24 = *((float *)this + 331) < 0.0;
  if (*((unsigned char *)this + *(void *)(*(void *)this - 24) + 242)) {
    v24 |= 2u;
  }
  if (v12) {
    int v25 = v24 | 4;
  }
  else {
    int v25 = v24;
  }
  if (BlueFin::GlPeNavGnssKF::LeftXtcRecently(this)) {
    int v26 = 8;
  }
  else {
    int v26 = 0;
  }
  if (BlueFin::GlPeNavGnssKF::UsedXtcRecently(this)) {
    int v27 = 16;
  }
  else {
    int v27 = 0;
  }
  int v28 = v25 | v26 | v27;
  unsigned int v29 = v28 & 0xFFFFF81F;
  int v30 = v28 | 0x40;
  if (a5) {
    unsigned int v31 = v30;
  }
  else {
    unsigned int v31 = v29;
  }
  if (BlueFin::GlPeNavGnssMotion::IsNotMoving((BlueFin::GlPeNavGnssKF *)((char *)this + 4792), 100.0)) {
    int v32 = 256;
  }
  else {
    int v32 = 0;
  }
  unsigned int v33 = v31 & 0xFFFFF85F | v32;
  unsigned int v34 = v31 & 0xFFFFC05F | v32 & 0xFFFFC7FF;
  int v35 = v33 | 0x800;
  if (!a7) {
    int v35 = v34;
  }
  unsigned int v36 = v35 & 0xFFFFCFFF | (*((unsigned __int8 *)this + 26) << 12);
  unsigned int v114 = v36;
  double v37 = *((double *)this + 619);
  double v38 = fabs(v37);
  float v39 = (float *)*((void *)this + 1985);
  if (v39)
  {
    double v40 = *((double *)this + 620) - *((double *)this + 618);
    int v41 = *((unsigned __int8 *)v39 + 3);
    float v42 = v37;
    float v43 = fabsf(v42);
    float v44 = v40;
    __n128 v39[2] = v43;
    _DWORD v39[3] = v44;
    BOOL v45 = v43 > 3.0 || v43 > 1.0 && v44 > 3.0 || *((double *)this + 1917) > 3.0;
    *((unsigned char *)v39 + 1) = v45;
    int v46 = *v16;
    *((unsigned char *)v39 + 2) = v46;
    int v47 = *(unsigned __int8 *)v39;
    if (v45)
    {
      int v48 = v47 | v41;
      *((unsigned char *)v39 + 3) = v47 | v41;
    }
    else
    {
      if (*(unsigned char *)v39) {
        int v49 = v46;
      }
      else {
        int v49 = 0;
      }
      int v48 = v49 | v41;
      *((unsigned char *)v39 + 3) = v48;
      if (!v41)
      {
        unsigned int v50 = v36 & 0xFFFF995F;
LABEL_49:
        unsigned int v114 = v50;
        GlCustomLog(12, "TCXO PN:%u,%.1f,%.1f,%.1f,en=%d,%d,%d,%d\n", *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200), v38, v40, *((double *)this + 1917), v48, v47, v45, v46);
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xC);
        }
        goto LABEL_51;
      }
    }
    unsigned int v50 = v36 | 0x4000;
    goto LABEL_49;
  }
LABEL_51:
  char v51 = (char *)this + *(void *)(*(void *)this - 24);
  int v52 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this);
  int v53 = *((_DWORD *)this + 546);
  uint64_t v54 = *((void *)this + 1917);
  v104[0] = a2;
  v104[1] = (uint64_t)v51;
  v104[2] = (uint64_t)this + 32;
  v104[3] = (uint64_t)this + 1336;
  v104[4] = (uint64_t)&v114;
  int v105 = v52;
  int v106 = a3;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  double v109 = v20;
  uint64_t v110 = 0x3E45798EE2308C3ALL;
  int v111 = v53;
  double v112 = v38;
  uint64_t v113 = v54;
  uint64_t v102 = 0;
  long long v103 = 0uLL;
  float64x2_t v100 = 0uLL;
  uint64_t v101 = 0;
  uint64_t v98 = 0;
  long long v99 = 0uLL;
  float64x2_t v96 = 0uLL;
  uint64_t v97 = 0;
  uint64_t v55 = *((void *)this + 190);
  uint64_t v56 = *((void *)this + 191);
  if (*((unsigned char *)this + 26))
  {
    uint64_t v102 = *((void *)this + 189);
    *(void *)&long long v103 = v55;
    *((void *)&v103 + 1) = v56;
    uint64_t v57 = *((void *)this + 194);
    float64x2_t v100 = *((float64x2_t *)this + 96);
    uint64_t v101 = v57;
  }
  else
  {
    uint64_t v98 = *((void *)this + 189);
    *(void *)&long long v99 = v55;
    *((void *)&v99 + 1) = v56;
    uint64_t v58 = *((void *)this + 194);
    float64x2_t v96 = *((float64x2_t *)this + 96);
    uint64_t v97 = v58;
  }
  BlueFin::GlPeProcessNoise::CalcQValues((uint64_t)this + 4568, v104, (float64x2_t *)&v98, &v96, (double *)&v102, &v100);
  if (*((unsigned char *)this + 26))
  {
    long long v59 = v103;
    double v60 = &v100;
    float64x2_t v61 = &v102;
    float64_t v62 = v100.f64[1];
  }
  else
  {
    long long v59 = v99;
    double v60 = &v96;
    float64x2_t v61 = &v98;
    float64_t v62 = v96.f64[1];
  }
  float64_t v63 = v60[1].f64[0];
  float64_t v64 = v60->f64[0];
  *((void *)this + 189) = *v61;
  *((_OWORD *)this + 95) = v59;
  *((float64_t *)this + 192) = v64;
  *((float64_t *)this + 193) = v62;
  *((float64_t *)this + 194) = v63;
  if ((*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this) > 0xBB8) {
    char v65 = 1;
  }
  else {
    char v65 = a6;
  }
  float v66 = *((float *)this + 546);
  float v67 = v66 * v66;
  float v68 = v66 * (float)(v66 * v66);
  uint64_t v69 = *((void *)this + 571);
  uint64_t v70 = v116;
  if (*((unsigned char *)this + 26))
  {
    if ((a6 & 1) == 0)
    {
      double v71 = v68;
      *(double *)(v116[1] + 8) = *(double *)(v69 + 8) * v71;
      *(double *)(v70[3] + 24) = *(double *)(v69 + 16) * v71;
      *(double *)(v70[5] + 40) = *(double *)(v69 + 48) * v71;
    }
    double v72 = v66;
    double v73 = (double *)v70[2];
    _OWORD v73[2] = *(double *)(v69 + 32) * v72;
    uint64_t v74 = v70[4];
    *(double *)(v74 + 32) = *(double *)(v69 + 40) * v72;
    uint64_t v75 = v70[6];
    *(double *)(v75 + 48) = *(double *)(v69 + 64) * v72;
    *(void *)(v70[7] + 56) = *(void *)(v69 + 72);
    uint64_t v76 = v70[8];
    *(void *)(v76 + 64) = *(void *)(v69 + 88);
    *(void *)(v76 + 56) = *(void *)(v69 + 80);
    if ((v65 & 1) == 0)
    {
      double v77 = v67;
      v73[1] = *(double *)(v69 + 96) * v77;
      *(double *)(v74 + 24) = *(double *)(v69 + 104) * v77;
      *(double *)(v70[1] + 24) = *(double *)(v69 + 112) * v77;
      *(double *)(v75 + 40) = *(double *)(v69 + 56) * v77;
      v73[4] = *(double *)(v69 + 128) * v77;
    }
  }
  else
  {
    if ((a6 & 1) == 0)
    {
      double v78 = v68;
      *(double *)(v116[1] + 8) = *(double *)(v69 + 8) * v78;
      *(double *)(v70[3] + 24) = *(double *)(v69 + 16) * v78;
      *(double *)(v70[5] + 40) = *(double *)(v69 + 48) * v78;
    }
    double v79 = v66;
    uint64_t v80 = v70[2];
    *(double *)(v80 + 16) = *(double *)(v69 + 32) * v79;
    *(double *)(v70[4] + 32) = *(double *)(v69 + 40) * v79;
    uint64_t v81 = v70[6];
    *(double *)(v81 + 48) = *(double *)(v69 + 64) * v79;
    *(void *)(v70[7] + 56) = *(void *)(v69 + 72);
    uint64_t v82 = v70[8];
    *(void *)(v82 + 64) = *(void *)(v69 + 88);
    *(void *)(v82 + 56) = *(void *)(v69 + 80);
    if ((v65 & 1) == 0)
    {
      double v83 = v67;
      *(double *)(v80 + 8) = *(double *)(v69 + 24) * v83;
      *(double *)(v81 + 40) = *(double *)(v69 + 56) * v83;
    }
  }
  *(void *)(v70[11] + 88) = 0x3E45798EE2308C3ALL;
  *(void *)(v70[9] + 72) = 0x3E45798EE2308C3ALL;
  *(void *)(v70[12] + 96) = 0x3E45798EE2308C3ALL;
  *(void *)(v70[10] + 80) = 0x3E45798EE2308C3ALL;
  (*(void (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 392))(this);
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  BlueFin::BigMatrix::operator+=((uint64_t)this + 32, (uint64_t)&v115);
  double v84 = (void *)*((void *)this + 5);
  if (*((unsigned char *)this + 26))
  {
    *(void *)(v84[7] + 64) = *(void *)(v84[8] + 56);
    uint64_t v86 = v84[1];
    uint64_t v85 = v84[2];
    *(void *)(v86 + 16) = *(void *)(v85 + 8);
    uint64_t v88 = v84[3];
    uint64_t v87 = v84[4];
    *(void *)(v88 + 32) = *(void *)(v87 + 24);
    *(void *)(v84[5] + 48) = *(void *)(v84[6] + 40);
    *(void *)(v88 + 8) = *(void *)(v86 + 24);
    *(void *)(v87 + 16) = *(void *)(v85 + 32);
  }
  else
  {
    double v89 = fmin(sqrt(*(double *)(v84[4] + 32)), 1.57079633);
    uint64_t v90 = v84[1];
    if (v89 > 0.174532925)
    {
      double v91 = *(double *)(v90 + 8);
      long double v92 = sin(v89);
      double v93 = v92 * v92 * v91;
      uint64_t v94 = v84[3];
      if (v93 > *(double *)(v94 + 24)) {
        *(double *)(v94 + 24) = v93;
      }
    }
    *(void *)(v84[7] + 64) = *(void *)(v84[8] + 56);
    *(void *)(v90 + 16) = *(void *)(v84[2] + 8);
    *(void *)(v84[5] + 48) = *(void *)(v84[6] + 40);
  }
  unint64_t result = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 392))(this);
  if (BlueFin::GlUtils::m_ucEnabled) {
    return BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  return result;
}

uint64_t BlueFin::GlSignalIdList::GetSignalIdSet(uint64_t this, _DWORD *a2)
{
  *(_OWORD *)(this + 12) = 0u;
  *(void *)this = this + 12;
  *(unsigned char *)(this + 8) = 19;
  *(_OWORD *)(this + 28) = 0u;
  *(_OWORD *)(this + 44) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  int v3 = *a2;
  uint64_t v2 = (unsigned __int16 *)(a2 + 1);
  for (uint64_t i = &v2[v3 - 1]; v2 < i; ++v2)
  {
    unint64_t v5 = *v2;
    if (v5 >= 0x23F)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    *(_DWORD *)(this + 12 + ((v5 >> 3) & 0x1FFC)) |= 1 << v5;
  }
  return this;
}

uint64_t BlueFin::GlPeNavMeasSelect::GlPeNavMeasSelect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)a1 = &unk_270EC3568;
  *(void *)(a1 + 144) = &unk_270EC35A0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(void *)(a1 + 40) = a1 + 52;
  *(unsigned char *)(a1 + 48) = 19;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 136) = 1098383360;
  *(unsigned char *)(a1 + 140) = 0;
  return a1;
}

unint64_t BlueFin::GlSignalIdList::Remove(BlueFin::GlSignalIdList *this, unsigned int a2)
{
  unint64_t result = BlueFin::GlSignalIdList::operator[]((unsigned int *)this, a2);
  unsigned int v4 = *(_DWORD *)this - 1;
  unint64_t v5 = (char *)this + 2 * v4 + 4;
  if (result < (unint64_t)v5)
  {
    uint64_t v6 = (char *)(result + 2);
    do
    {
      if (v6 != v5) {
        *((_WORD *)v6 - 1) = *(_WORD *)v6;
      }
      BOOL v7 = v6 >= v5;
      v6 += 2;
    }
    while (!v7);
  }
  *(_DWORD *)this = v4;
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExitOrLeftRecently(BlueFin::GlPeNavGnssKF *this, unsigned int a2)
{
  int v4 = *(_DWORD *)(*((void *)this + 281) + 8);
  BOOL result = BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit(this);
  if ((result & 1) == 0 && v4 != 6)
  {
    return BlueFin::GlPeNavGnssKF::PolaroidLeftTunnelRecently(this, a2);
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit(BlueFin::GlPeNavGnssKF *this)
{
  uint64_t v2 = *((void *)this + 281);
  if (*(unsigned char *)(v2 + 1764)) {
    unsigned int v3 = 60;
  }
  else {
    unsigned int v3 = 180;
  }
  if (*(float *)(v2 + 1328) > 4.0
    && *(float *)(v2 + 1320) < 20.0
    && *(_DWORD *)(v2 + 76) >= v3
    && (*(unsigned char *)(v2 + 1764) || *(_DWORD *)(v2 + 64) == 1))
  {
    return 0;
  }
  if ((*(_DWORD *)(v2 + 8) - 3) >= 4) {
    unsigned int v4 = 60000;
  }
  else {
    unsigned int v4 = *(_DWORD *)(*((void *)this + 284) + 12);
  }
  return (*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this) > v4
      || *(unsigned char *)(*((void *)this + 284) + 1) != 0;
}

unint64_t BlueFin::GlPeNavGnssKF::GetMeasSigIdSetForLsq(uint64_t a1, uint64_t a2, BlueFin::GlSetBase *a3, int a4, int a5)
{
  uint64_t v9 = a1 + *(void *)(*(void *)a1 - 24);
  unsigned int v10 = (const void **)(v9 + 352);
  float v11 = (const void **)(v9 + 264);
  if (a4) {
    int v12 = 0;
  }
  else {
    int v12 = 2;
  }
  if (a4) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v10;
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v45, v46, 0x13u, v13);
  float v42 = v44;
  char v43 = 8;
  memset(v44, 0, sizeof(v44));
  unint64_t result = BlueFin::GlSetBase::HasAny(a3);
  if (result)
  {
    DeviceFaultNotify("glpe_navgnsskf.cpp", 7430, "GetMeasSigIdSetForLsq", (char)"otLsqSignalIds.IsEmpty()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 7430, "otLsqSignalIds.IsEmpty()");
  }
  if (*(char *)(a1 + 1560) >= 1)
  {
    char v15 = 0;
    LOBYTE(v16) = 0;
    int v37 = a5;
    unsigned int v36 = a3;
    int v35 = v12;
    do
    {
      unint64_t v17 = *(unsigned __int8 *)(a2 + 32);
      if (*(_DWORD *)(a2 + 44) == v12)
      {
        double v18 = v42;
        unint64_t v19 = v17 >> 5;
        char v20 = v17 & 0x1F;
        if (((*((unsigned int *)v42 + (v17 >> 5)) >> (v17 & 0x1F)) & 1) == 0)
        {
          int v21 = *(__int16 *)(a2 + 40);
          int v22 = v21 >> 5;
          char v23 = v21 & 0x1F;
          if (((unint64_t)*(unsigned int *)(v45 + 4 * v22) >> v23))
          {
            uint64_t v24 = BlueFin::GlSvId::s_aucSvId2gnss[v17];
            unint64_t v25 = BlueFin::GlSignalId::s_aucGnss2numSignals[v24];
            if (v25 >= 2)
            {
              unint64_t result = (unint64_t)BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)(a2 + 32), 0, 0);
              uint64_t v26 = 0;
              uint64_t v27 = 100;
              if (a4) {
                uint64_t v27 = 88;
              }
              float v28 = *(float *)(result + v27);
              unsigned int v29 = &BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v24];
              while (1)
              {
                if (v26 != *(_DWORD *)(a2 + 36))
                {
                  v39[0] = v17;
                  int v40 = v26;
                  __int16 v30 = 575;
                  __int16 v41 = 575;
                  if ((v17 + 67) >= 0x44u)
                  {
                    if (*v29 == 255)
                    {
                      int v40 = -1;
                      __int16 v30 = 575;
                    }
                    else
                    {
                      __int16 v30 = BlueFin::GlSignalId::s_ausGnss2signalId[v24]
                          + v17
                          - BlueFin::GlSvId::s_aucGnss2minSvId[v24]
                          + v26 * BlueFin::GlSvId::s_aucGnss2numSvId[v24];
                      __int16 v41 = v30;
                    }
                  }
                  if (((unint64_t)*(unsigned int *)(v45 + 4 * (v30 >> 5)) >> (v30 & 0x1F)))
                  {
                    unint64_t result = (unint64_t)BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v39, 0, 0);
                    uint64_t v31 = 100;
                    if (a4) {
                      uint64_t v31 = 88;
                    }
                    if (v28 > *(float *)(result + v31))
                    {
                      uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v39, 0);
                      if (a4)
                      {
                        unint64_t result = BlueFin::stPeSigMeasKF::IsPRValidForNav(PeMeas);
                        if (result) {
                          goto LABEL_36;
                        }
                      }
                      else
                      {
                        unint64_t result = BlueFin::stPeSigMeasKF::IsRRValidForNav(PeMeas);
                        if (result)
                        {
LABEL_36:
                          a5 = v37;
                          a3 = v36;
                          int v12 = v35;
                          goto LABEL_33;
                        }
                      }
                    }
                  }
                }
                ++v26;
                v29 += 7;
                if (v25 == v26)
                {
                  int v33 = *(__int16 *)(a2 + 40);
                  unint64_t v34 = *(unsigned __int8 *)(a2 + 32);
                  double v18 = v42;
                  int v22 = v33 >> 5;
                  char v23 = v33 & 0x1F;
                  unint64_t v19 = v34 >> 5;
                  char v20 = v34 & 0x1F;
                  a5 = v37;
                  a3 = v36;
                  int v12 = v35;
                  break;
                }
              }
            }
            *(_DWORD *)(*(void *)a3 + 4 * v22) |= 1 << v23;
            *((_DWORD *)v18 + v19) |= 1 << v20;
            ++v15;
          }
        }
      }
LABEL_33:
      int v16 = (char)(v16 + 1);
      if (v16 >= *(char *)(a1 + 1560)) {
        break;
      }
      a2 += 56;
    }
    while (a5 > v15);
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::RunDeals(uint64_t a1, BlueFin::GlSetBase *a2)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + *(void *)(*(void *)a1 - 24);
  uint64_t v5 = *(void *)(v4 + 88);
  int v6 = **(_DWORD **)(a1 + 2240);
  v62[0] = v4 + 8;
  v62[1] = v5;
  int v63 = v6;
  char v64 = 15;
  int v65 = 17;
  int64x2_t v50 = vdupq_n_s64(0x4079000000000000uLL);
  uint64_t v51 = 0x4079000000000000;
  uint64_t v53 = 0x6400000000;
  bzero(v54, 0x328uLL);
  int v52 = v54;
  v54[102] = 0x6400000000;
  bzero(v55, 0x328uLL);
  uint64_t v7 = 0;
  v54[101] = v55;
  v55[204] = 0;
  long long v59 = xmmword_263BBA380;
  memset(v58, 0, 32);
  uint64_t v56 = v58;
  char v57 = 8;
  int32x2_t v60 = vdup_n_s32(0x42C60000u);
  int v61 = 1120272384;
  uint64_t v48 = 0;
  float64x2_t v47 = 0uLL;
  uint64_t v49 = *(void *)(v4 + 152);
  uint64_t v8 = *(void *)(a1 + 8);
  v55[202] = *(_DWORD *)v8;
  float v44 = v46;
  char v45 = 19;
  memset(v46, 0, sizeof(v46));
  do
  {
    uint64_t v9 = (char *)&v69[1] + v7 + 12;
    *uint64_t v9 = 0;
    *((_DWORD *)v9 + 1) = -1;
    *((_WORD *)v9 + 4) = 575;
    v7 += 12;
  }
  while (v7 != 192);
  if (BlueFin::GlSetBase::Cnt(a2) >= 0x11)
  {
    unint64_t v34 = "otRrSignalIds.Cnt() <= DEALS_MAX_NUM_SUBSETS";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2564, "RunDeals", (char)"otRrSignalIds.Cnt() <= DEALS_MAX_NUM_SUBSETS");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2564;
    goto LABEL_27;
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v68, 0x13u, (const void **)a2);
  uint64_t v70 = &v72;
  char v71 = 19;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  memset(v75, 0, sizeof(v75));
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v70, (int **)(v8 + 8));
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v70);
  v68[1] = v73;
  v68[2] = v74;
  v69[0] = *(_OWORD *)v75;
  *(_OWORD *)((char *)v69 + 12) = *(_OWORD *)&v75[12];
  v68[0] = v72;
  unsigned __int8 v39 = v67;
  memcpy(v43, __src, 4 * v67);
  unsigned __int16 v41 = 0;
  unsigned __int8 v40 = 0;
  int v42 = v43[0];
  BlueFin::GlSetIterator::operator++(&v39);
  if (v40 == v39) {
    goto LABEL_17;
  }
  unsigned __int8 v10 = 0;
  do
  {
    unsigned __int16 v11 = v41;
    if (v41 >= 0x23FuLL)
    {
      unint64_t v34 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      int v35 = "glsignalid.h";
      int v36 = 577;
      goto LABEL_27;
    }
    int v12 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
    uint64_t v13 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v41;
    char v14 = *v13;
    int v15 = v13[1];
    LOBYTE(__src) = *v13;
    HIDWORD(__src) = v15;
    unsigned __int16 v67 = v41;
    uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(v12, (const BlueFin::GlSignalId *)&__src, 0);
    if (BlueFin::stPeSigMeasKF::IsRRValid(PeMeas))
    {
      unint64_t v17 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
      LOBYTE(__src) = v14;
      HIDWORD(__src) = v15;
      unsigned __int16 v67 = v11;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v17, (const BlueFin::GlSignalId *)&__src, 0, 0);
      unint64_t v19 = (char *)&v69[1] + 12 * v10 + 12;
      *unint64_t v19 = v14;
      *((_DWORD *)v19 + 1) = v15;
      *((_WORD *)v19 + 4) = v11;
      *((_DWORD *)&v70 + v10++) = *((_DWORD *)MeMeas + 25);
    }
    BlueFin::GlSetIterator::operator++(&v39);
  }
  while (v40 != v39);
  if (v10 <= 3u)
  {
LABEL_17:
    BOOL result = 0;
    goto LABEL_18;
  }
  p_src = &__src;
  BlueFin::GlSortFloats((uint64_t)&v70, (const float *)v10, &__src, v20);
  if ((v10 & 0xF0) != 0) {
    uint64_t v22 = 16;
  }
  else {
    uint64_t v22 = v10;
  }
  char v23 = v44;
  do
  {
    unsigned int v24 = *(unsigned __int8 *)p_src;
    p_src = (void **)((char *)p_src + 1);
    int v25 = *((__int16 *)&v69[2] + 6 * v24 + 2);
    v23[v25 >> 5] |= 1 << v25;
    --v22;
  }
  while (v22);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v37, v38, 0x13u, (const void **)&v44);
  BOOL result = BlueFin::GlPeDEALS::ComputeDEALS(a1 + 2856, (BlueFin::GlSetBase *)v37, v62, &v47);
LABEL_18:
  float v27 = *(float *)(a1 + 2940) * 0.0174532925;
  if (v27 <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetHeadingAccyRad() > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2603, "RunDeals", (char)"m_otDEALS.GetHeadingAccyRad() > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2603;
    goto LABEL_27;
  }
  float v28 = *(float *)(a1 + 2948) * 0.0174532925;
  if (v28 <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetPitchAccyRad() > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2604, "RunDeals", (char)"m_otDEALS.GetPitchAccyRad() > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2604;
    goto LABEL_27;
  }
  double v29 = *(double *)(a1 + 2904);
  float v30 = v29;
  float v31 = v30 * v30;
  double v32 = *(double *)(a1 + 2912);
  float v33 = v32;
  if (sqrtf(v31 + (float)(v33 * v33)) <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetSpeedAccy() > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2605, "RunDeals", (char)"m_otDEALS.GetSpeedAccy() > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2605;
    goto LABEL_27;
  }
  if (*(double *)(a1 + 2920) <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetVVelAccy() > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2606, "RunDeals", (char)"m_otDEALS.GetVVelAccy() > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2606;
    goto LABEL_27;
  }
  if (*(float *)(a1 + 2928) <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetBcDotAccy() > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2607, "RunDeals", (char)"m_otDEALS.GetBcDotAccy() > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2607;
    goto LABEL_27;
  }
  if (v29 <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetVelAccy().dN > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2608, "RunDeals", (char)"m_otDEALS.GetVelAccy().dN > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2608;
    goto LABEL_27;
  }
  if (v32 <= 0.0)
  {
    unint64_t v34 = "m_otDEALS.GetVelAccy().dE > 0.0";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 2609, "RunDeals", (char)"m_otDEALS.GetVelAccy().dE > 0.0");
    int v35 = "glpe_navgnsskf.cpp";
    int v36 = 2609;
LABEL_27:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v35, v36, v34);
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::TrustPdrPropagation(BlueFin::GlPeNavGnssKF *this)
{
  return *((unsigned char *)this + 13296)
      && (int v1 = *((_DWORD *)this + 543)) != 0
      && (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - v1) >> 3 <= 0x270
      && *(double *)(*(void *)(*((void *)this + 5) + 8) + 8)
       + *(double *)(*(void *)(*((void *)this + 5) + 24) + 24) < 2500.0;
}

void BlueFin::GlPeNavGnssKF::MeasUpdate(uint64_t *a1, uint64_t a2, int a3, char a4, int a5, double a6, double a7)
{
  uint64_t v181 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  if (v7 != *((_DWORD *)a1 + 13))
  {
    double v165 = "otH.GetColSize() == m_P.GetColSize()";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 3792, "MeasUpdate", (char)"otH.GetColSize() == m_P.GetColSize()");
    int v166 = 3792;
    goto LABEL_158;
  }
  if ((int)v7 >= 22)
  {
    double v165 = "otH.GetColSize() <= BIG_MATR_MAX_COL_DIM";
    DeviceFaultNotify("glpe_navgnsskf.cpp", 3793, "MeasUpdate", (char)"otH.GetColSize() <= BIG_MATR_MAX_COL_DIM");
    int v166 = 3793;
LABEL_158:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", v166, v165);
  }
  BlueFin::SKFVectorDim<21>::SKFVectorDim((uint64_t)v179, *(_DWORD *)(a2 + 20));
  if ((int)v7 <= 0)
  {
    BlueFin::SKFVectorDim<21>::SKFVectorDim((uint64_t)v178, v7);
    double v23 = 0.0;
  }
  else
  {
    __int16 v15 = 0;
    uint64_t v16 = *(void *)(*(void *)(a2 + 8) + 8);
    uint64_t v17 = v179[0];
    uint64_t v18 = v7 + 1;
    uint64_t v19 = 1;
    do
    {
      double v20 = *(double *)(v16 + 8 * v19);
      *(double *)(v17 + 8 * v19) = v20;
      if (v20 != 0.0) {
        v180[v15++] = v19;
      }
      ++v19;
    }
    while (v18 != v19);
    BlueFin::SKFVectorDim<21>::SKFVectorDim((uint64_t)v178, v7);
    uint64_t v21 = v179[0];
    uint64_t v22 = v178[0];
    double v23 = 0.0;
    uint64_t v24 = 1;
    do
    {
      double v25 = 0.0;
      if (v15 >= 1)
      {
        uint64_t v26 = v180;
        uint64_t v27 = v15;
        do
        {
          uint64_t v28 = *v26++;
          double v25 = v25 + *(double *)(*(void *)(a1[5] + 8 * v24) + 8 * v28) * *(double *)(v21 + 8 * v28);
          --v27;
        }
        while (v27);
      }
      *(double *)(v22 + 8 * v24) = v25;
      double v23 = v23 + v25 * *(double *)(v21 + 8 * v24++);
    }
    while (v24 != v18);
  }
  double v29 = v23 + a7;
  BlueFin::SKFVectorDim<21>::SKFVectorDim((BlueFin::SKFVector *)&v176, (const BlueFin::SKFVector *)v178);
  uint64_t v30 = v177;
  if (v177 >= 1)
  {
    float v31 = (double *)(v176 + 8);
    do
    {
      *float v31 = 1.0 / v29 * *v31;
      ++v31;
      --v30;
    }
    while (v30);
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  uint64_t v173 = 0xC0000000CLL;
  memset(v174, 0, sizeof(v174));
  uint64_t v175 = 0;
  uint64_t v172 = (double *)v174;
  if ((int)v7 >= 1)
  {
    double v32 = (double *)v174 + 1;
    float v33 = (double *)(v176 + 8);
    uint64_t v34 = v7;
    do
    {
      double v35 = *v33++;
      *double v32 = *v32 + v35 * a6;
      ++v32;
      --v34;
    }
    while (v34);
  }
  if (BlueFin::GlPeNavGnssKF::IsInXtcNow((BlueFin::GlPeNavGnssKF *)a1) && (int)v7 >= 1 && fabs(a6 / sqrt(v29)) > 5.0)
  {
    unsigned __int8 v36 = 0;
    int v37 = (double *)(v179[0] + 8);
    do
    {
      double v38 = *v37++;
      if (v38 != 0.0) {
        ++v36;
      }
      --v7;
    }
    while (v7);
    if (v36 >= 4u)
    {
      bzero(v172 + 1, 8 * (int)v173);
      a3 = 0;
    }
  }
  int v39 = *((unsigned __int8 *)a1 + 26);
  if (*((unsigned char *)a1 + 26)) {
    goto LABEL_53;
  }
  if (a4) {
    goto LABEL_53;
  }
  double v40 = *(double *)(*(void *)(a1[5] + 32) + 32);
  float TrueHeadingRad = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)a1);
  if (!*((unsigned char *)a1 + 2932)) {
    goto LABEL_53;
  }
  float v42 = *((float *)a1 + 735);
  if (v42 >= 180.0) {
    goto LABEL_53;
  }
  float v43 = *((float *)a1 + 734) * 0.0174532925;
  for (double i = TrueHeadingRad - v43; i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  double v45 = v172[4];
  float v46 = v45;
  for (double j = (float)(TrueHeadingRad + v46) - v43; j > 3.14159265; double j = j + -6.28318531)
    ;
  for (; j <= -3.14159265; double j = j + 6.28318531)
    ;
  float v48 = j;
  float v49 = fabsf(v48);
  float v50 = i;
  if (v49 <= fabsf(v50)) {
    goto LABEL_53;
  }
  double v51 = fabs(v45);
  float v52 = v40;
  double v53 = sqrtf(v52);
  float v54 = v42 * 0.0174532925;
  float v55 = fmaxf(v54, 0.017453);
  float v56 = *((double *)a1 + 359);
  float v57 = *((double *)a1 + 360);
  float v58 = *((double *)a1 + 363);
  float v59 = *((double *)a1 + 364);
  BOOL v60 = sqrtf((float)(v57 * v57) + (float)(v56 * v56)) <= sqrtf((float)(v59 * v59) + (float)(v58 * v58)) || v49 <= v55;
  if (v60 || v51 <= v53)
  {
LABEL_53:
    if (a3)
    {
      unint64_t v62 = 0;
      if (a5) {
        unint64_t v63 = 12;
      }
      else {
        unint64_t v63 = 8;
      }
      uint64_t v64 = a1[5];
      uint64_t v65 = v176;
      uint64_t v66 = v178[0] + 8;
      uint64_t v67 = 1;
      do
      {
        uint64_t v68 = *(void *)(v64 + 8 * v67) + 8;
        unint64_t v69 = v62;
        do
        {
          double v70 = *(double *)(v68 + 8 * v69) - *(double *)(v65 + 8 * v67) * *(double *)(v66 + 8 * v69);
          *(double *)(v68 + 8 * v69) = v70;
          *(double *)(*(void *)(v64 + 8 + 8 * v69++) + 8 * v67) = v70;
        }
        while (v69 < v63);
        ++v67;
        ++v62;
      }
      while (v67 != (v63 | 1));
      if (!v39)
      {
        __double2 v71 = __sincos_stret(v172[4]);
        uint64_t v72 = *((unsigned int *)a1 + 12);
        if ((int)v72 >= 1)
        {
          long long v73 = (uint64_t *)(v64 + 8);
          do
          {
            uint64_t v74 = *v73++;
            double v75 = *(double *)(v74 + 8);
            double v76 = *(double *)(v74 + 24);
            *(double *)(v74 + 8) = v75 * v71.__cosval - v76 * v71.__sinval;
            *(double *)(v74 + 24) = v71.__cosval * v76 + v75 * v71.__sinval;
            --v72;
          }
          while (v72);
        }
        uint64_t v77 = *((unsigned int *)a1 + 13);
        uint64_t v78 = *(void *)(v64 + 8);
        uint64_t v79 = *(void *)(v64 + 24);
        if ((int)v77 >= 1)
        {
          uint64_t v80 = (double *)(v79 + 8);
          uint64_t v81 = (double *)(v78 + 8);
          do
          {
            double v82 = *v81;
            double v83 = *v80;
            *uint64_t v81 = *v81 * v71.__cosval - *v80 * v71.__sinval;
            ++v81;
            *v80++ = v71.__cosval * v83 + v82 * v71.__sinval;
            --v77;
          }
          while (v77);
        }
        *(void *)(v79 + 8) = *(void *)(v78 + 24);
      }
      (*(void (**)(uint64_t *))(*a1 + 392))(a1);
      if (BlueFin::GlUtils::m_ucEnabled) {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
      }
    }
  }
  else
  {
    bzero(v172 + 1, 8 * (int)v173);
  }
  double v169 = 0.0;
  double v170 = 0.0;
  double v171 = 0.0;
  double v84 = v172;
  double v85 = v172[1];
  if (*((unsigned char *)a1 + 26))
  {
    double v86 = v172[3];
    double v169 = v172[1];
    double v170 = v86;
    double v171 = v172[5];
    uint64_t v87 = *a1;
    uint64_t v88 = (uint64_t)a1 + *(void *)(*a1 - 24);
    BlueFin::ned2lla((double *)(v88 + 8), &v169, (double *)&v167);
    uint64_t v89 = v168;
    *(_OWORD *)(v88 + 8) = v167;
    *(void *)(v88 + 24) = v89;
    uint64_t v90 = (void *)a1[5];
    *(float *)&uint64_t v89 = *(double *)(v90[1] + 8) + *(double *)(v90[3] + 24);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 80) = sqrtf(*(float *)&v89);
    *(float *)&uint64_t v89 = *(double *)(v90[5] + 40);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 84) = sqrtf(*(float *)&v89);
    double v91 = v84[6];
    long double v92 = (double *)((char *)a1 + *(void *)(v87 - 24));
    double v93 = v84[4] + v92[14];
    double v94 = v91 + v92[15];
    v92[13] = v84[2] + v92[13];
    v92[14] = v93;
    v92[15] = v94;
    *(float *)&uint64_t v89 = v91;
    *((float *)a1 + 332) = *((float *)a1 + 332) - *(float *)&v89;
    *(float *)&uint64_t v89 = *(double *)(v90[2] + 16) + *(double *)(v90[4] + 32);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 128) = sqrtf(*(float *)&v89);
    *(float *)&uint64_t v89 = *(double *)(v90[6] + 48);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 140) = sqrtf(*(float *)&v89);
    *(double *)((char *)a1 + *(void *)(v87 - 24) + 88) = *(double *)((char *)a1 + *(void *)(v87 - 24) + 88) + v84[7];
    *(float *)&uint64_t v89 = *(double *)(v90[7] + 56);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 96) = sqrtf(*(float *)&v89);
    *(double *)((char *)a1 + *(void *)(v87 - 24) + 152) = *(double *)((char *)a1 + *(void *)(v87 - 24) + 152)
                                                          + v84[8];
    *(float *)&uint64_t v89 = *(double *)(v90[8] + 64);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 160) = sqrtf(*(float *)&v89);
    int v95 = *((_DWORD *)a1 + 12);
    if (v95 < 11)
    {
      if (v95 < 9) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t v96 = (uint64_t)a1 + *(void *)(v87 - 24);
      float v97 = v84[11] + *(float *)(v96 + 208);
      *(float *)(v96 + 208) = v97;
      float v98 = *(double *)(v90[11] + 88);
      *(float *)((char *)a1 + *(void *)(v87 - 24) + 212) = sqrtf(v98);
    }
    uint64_t v113 = (uint64_t)a1 + *(void *)(v87 - 24);
    float v114 = v84[9] + *(float *)(v113 + 216);
    *(float *)(v113 + 216) = v114;
    float v115 = *(double *)(v90[9] + 72);
    *(float *)((char *)a1 + *(void *)(v87 - 24) + 220) = sqrtf(v115);
    if (v95 >= 0xC)
    {
      uint64_t v116 = (uint64_t)a1 + *(void *)(v87 - 24);
      float v117 = v84[12] + *(float *)(v116 + 224);
      *(float *)(v116 + 224) = v117;
      float v118 = *(double *)(v90[12] + 96);
      *(float *)((char *)a1 + *(void *)(v87 - 24) + 228) = sqrtf(v118);
LABEL_80:
      uint64_t v119 = (uint64_t)a1 + *(void *)(v87 - 24);
      float v120 = v84[10] + *(float *)(v119 + 232);
      *(float *)(v119 + 232) = v120;
      float v121 = *(double *)(v90[10] + 80);
      *(float *)((char *)a1 + *(void *)(v87 - 24) + 236) = sqrtf(v121);
      goto LABEL_81;
    }
    if (v95 >= 0xA) {
      goto LABEL_80;
    }
LABEL_81:
    float v122 = sqrt(*(double *)((char *)a1 + *(void *)(v87 - 24) + 112)* *(double *)((char *)a1 + *(void *)(v87 - 24) + 112)+ *(double *)((char *)a1 + *(void *)(v87 - 24) + 104)* *(double *)((char *)a1 + *(void *)(v87 - 24) + 104));
    *((float *)a1 + 331) = v122;
    goto LABEL_155;
  }
  double v99 = v172[3];
  double v100 = v99 * *((double *)a1 + 168) + *((double *)a1 + 167) * v85;
  double v101 = v99 * *((double *)a1 + 172) + *((double *)a1 + 171) * v85;
  double v102 = -v172[5];
  double v169 = v100;
  double v170 = v101;
  double v171 = v102;
  uint64_t v103 = *a1;
  uint64_t v104 = *a1;
  uint64_t v105 = (uint64_t)a1 + *(void *)(*a1 - 24);
  BlueFin::ned2lla((double *)(v105 + 8), &v169, (double *)&v167);
  uint64_t v106 = v168;
  *(_OWORD *)(v105 + 8) = v167;
  *(void *)(v105 + 24) = v106;
  *(double *)((char *)a1 + *(void *)(v104 - 24) + 88) = *(double *)((char *)a1 + *(void *)(v104 - 24) + 88) + v84[7];
  *(double *)((char *)a1 + *(void *)(v104 - 24) + 152) = *(double *)((char *)a1 + *(void *)(v104 - 24) + 152)
                                                         + v84[8];
  uint64_t v107 = (uint64_t)a1 + *(void *)(v104 - 24);
  *(float *)&uint64_t v106 = v84[4] + *(float *)(v107 + 176);
  *(_DWORD *)(v107 + 176) = v106;
  *(float *)&uint64_t v106 = v84[6];
  *((float *)a1 + 332) = *((float *)a1 + 332) + *(float *)&v106;
  int v108 = *((_DWORD *)a1 + 12);
  if (v108 < 11)
  {
    if (v108 < 9) {
      goto LABEL_88;
    }
    int v111 = (void *)a1[5];
  }
  else
  {
    uint64_t v109 = (uint64_t)a1 + *(void *)(v104 - 24);
    float v110 = v84[11] + *(float *)(v109 + 208);
    *(float *)(v109 + 208) = v110;
    int v111 = (void *)a1[5];
    float v112 = *(double *)(v111[11] + 88);
    *(float *)((char *)a1 + *(void *)(v104 - 24) + 212) = sqrtf(v112);
  }
  uint64_t v123 = (uint64_t)a1 + *(void *)(v104 - 24);
  float v124 = v84[9] + *(float *)(v123 + 216);
  *(float *)(v123 + 216) = v124;
  float v125 = *(double *)(v111[9] + 72);
  *(float *)((char *)a1 + *(void *)(v104 - 24) + 220) = sqrtf(v125);
  if (v108 < 0xC)
  {
    if (v108 < 0xA) {
      goto LABEL_88;
    }
  }
  else
  {
    uint64_t v126 = (uint64_t)a1 + *(void *)(v104 - 24);
    float v127 = v84[12] + *(float *)(v126 + 224);
    *(float *)(v126 + 224) = v127;
    float v128 = *(double *)(v111[12] + 96);
    *(float *)((char *)a1 + *(void *)(v104 - 24) + 228) = sqrtf(v128);
  }
  uint64_t v129 = (uint64_t)a1 + *(void *)(v104 - 24);
  float v130 = v84[10] + *(float *)(v129 + 232);
  *(float *)(v129 + 232) = v130;
  float v131 = *(double *)(v111[10] + 80);
  *(float *)((char *)a1 + *(void *)(v104 - 24) + 236) = sqrtf(v131);
LABEL_88:
  float v132 = *((float *)a1 + 331);
  if (v132 <= 0.0)
  {
    if (v132 < 0.0) {
      int v133 = 255;
    }
    else {
      int v133 = 0;
    }
  }
  else
  {
    int v133 = 1;
  }
  double v134 = v84[2];
  if (v134 <= 0.0)
  {
    if (v134 < 0.0) {
      int v135 = 255;
    }
    else {
      int v135 = 0;
    }
  }
  else
  {
    int v135 = 1;
  }
  float v136 = fabsf(v132);
  uint64_t v137 = a1[599];
  v139 = *(_DWORD *)(v137 + 4216) != 4 || (double v138 = (unsigned char *)(v137 + 4224), !*v138) || v138[2] != 0;
  double v140 = v132;
  double v141 = fabs(v134);
  double v142 = v136;
  int v143 = *((_DWORD *)a1 + 3020);
  if (v143 == -7200001)
  {
    char v144 = v133 == v135 || v139;
    if (v141 > v142 && (v144 & 1) == 0)
    {
      if (v132 >= 0.0) {
        float v145 = 0.00000011921;
      }
      else {
        float v145 = -0.00000011921;
      }
      *((float *)a1 + 331) = v145;
      *((_DWORD *)a1 + 3020) = *(_DWORD *)((char *)a1 + *(void *)(v104 - 24) + 200);
      goto LABEL_125;
    }
    float v145 = v134 + v140;
LABEL_122:
    *((float *)a1 + 331) = v145;
    goto LABEL_125;
  }
  char v146 = v133 == v135 || v139;
  if (v141 > v142
    && (v146 & 1) == 0
    && (*(_DWORD *)((char *)a1 + *(void *)(v104 - 24) + 200) - v143) <= 0xBB7)
  {
    if (v132 >= 0.0) {
      float v145 = 0.00000011921;
    }
    else {
      float v145 = -0.00000011921;
    }
    goto LABEL_122;
  }
  float v145 = v134 + v140;
  *((float *)a1 + 331) = v145;
  if ((*(_DWORD *)((char *)a1 + *(void *)(v104 - 24) + 200) - v143) >= 0x1771) {
    *((_DWORD *)a1 + 3020) = -7200001;
  }
LABEL_125:
  int v147 = *(_DWORD *)(a1[281] + 8);
  double v148 = 1.5;
  if ((v147 - 1) < 2) {
    double v148 = 1.0;
  }
  BOOL v149 = v148 > fabsf(v145) || BlueFin::GlPeNavGnssMotion::IsNotMoving((BlueFin::GlPeNavGnssMotion *)(a1 + 599), 0.5);
  char v151 = (v147 - 3) < 0xFFFFFFFE && *(_WORD *)(a1[284] + 2) != 0 || v149;
  if (v145 < 0.0 && (v151 & 1) != 0) {
    goto LABEL_138;
  }
  if (v145 < 0.0)
  {
    if ((*(unsigned int (**)(uint64_t *))(v104 + 56))(a1) <= 0x3C)
    {
      uint64_t v103 = *a1;
    }
    else
    {
      uint64_t v103 = *a1;
      if (!*(_WORD *)(a1[284] + 2))
      {
        *(float *)((char *)a1 + *(void *)(v103 - 24) + 176) = *(float *)((char *)a1 + *(void *)(v103 - 24) + 176)
                                                              + 3.1416;
        float v145 = *((float *)a1 + 331);
        int v108 = *((_DWORD *)a1 + 12);
LABEL_138:
        *((float *)a1 + 331) = -v145;
        if (v108 >= 1)
        {
          uint64_t v152 = (v108 + 1) - 1;
          BOOL v153 = (uint64_t *)(a1[5] + 8);
          do
          {
            uint64_t v154 = *v153++;
            *(double *)(v154 + 16) = -*(double *)(v154 + 16);
            --v152;
          }
          while (v152);
        }
        uint64_t v155 = *((unsigned int *)a1 + 13);
        if ((int)v155 >= 1)
        {
          float v156 = (double *)(*(void *)(a1[5] + 16) + 8);
          do
          {
            *float v156 = -*v156;
            ++v156;
            --v155;
          }
          while (v155);
        }
      }
    }
  }
  uint64_t v157 = (uint64_t)a1 + *(void *)(v103 - 24);
  for (float k = *(float *)(v157 + 176); k > 6.28318531; float k = k + -6.2832)
    ;
  for (; k < 0.0; float k = k + 6.2832)
    ;
  *(float *)(v157 + 176) = k;
  double v159 = *((float *)a1 + 331);
  BOOL v160 = (double *)((char *)a1 + *(void *)(v103 - 24));
  double v161 = *((double *)a1 + 171);
  double v162 = *((double *)a1 + 172);
  double v163 = -*((float *)a1 + 332);
  v160[13] = *((double *)a1 + 168) * 0.0 + *((double *)a1 + 167) * v159;
  v160[14] = v162 * 0.0 + v161 * v159;
  v160[15] = v163;
  __double2 v164 = __sincos_stret(*(float *)((char *)a1 + *(void *)(v103 - 24) + 176));
  a1[167] = *(void *)&v164.__cosval;
  a1[168] = *(void *)&v164.__sinval;
  a1[169] = 0;
  a1[171] = *(void *)&v164.__sinval;
  *((double *)a1 + 172) = -v164.__cosval;
  a1[173] = 0;
  a1[176] = 0;
  a1[175] = 0;
  a1[177] = 0xBFF0000000000000;
  double v84 = v172;
LABEL_155:
  bzero(v84 + 1, 8 * (int)v173);
}

float BlueFin::GlPeNavGnssKF::GetTrueHeadingRad(BlueFin::GlPeNavGnssKF *this)
{
  float result = *(float *)((char *)this + *(void *)(*(void *)this - 24) + 176);
  if (!*((unsigned char *)this + 26))
  {
    double v2 = result;
    if (*((float *)this + 331) < 0.0) {
      double v2 = v2 + 3.14159265;
    }
    for (; v2 >= 6.28318531; double v2 = v2 + -6.28318531)
      ;
    while (v2 < 0.0)
      double v2 = v2 + 6.28318531;
    return v2;
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::PolaroidLeftTunnelRecently(BlueFin::GlPeNavGnssKF *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 281);
  if (*(unsigned char *)(v2 + 1764)) {
    unsigned int v3 = 60;
  }
  else {
    unsigned int v3 = 180;
  }
  if (*(float *)(v2 + 1328) > 4.0
    && *(float *)(v2 + 1320) < 20.0
    && *(_DWORD *)(v2 + 76) >= v3
    && (*(unsigned char *)(v2 + 1764) || *(_DWORD *)(v2 + 64) == 1))
  {
    return 0;
  }
  int v4 = *((_DWORD *)this + 549);
  return v4 && *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - v4 < a2;
}

void BlueFin::GlPeNavGnssKF::ComputeEA(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6, int a7, int a8, _DWORD *a9)
{
  uint64_t v16 = *(void *)(a1 + 40);
  float v17 = *(double *)(*(void *)(v16 + 8) + 8);
  float v18 = *(double *)(*(void *)(v16 + 24) + 24);
  float v19 = sqrtf(v17 + v18);
  uint64_t v20 = *(void *)(a1 + 2256);
  uint64_t v21 = *(void *)(v20 + 136);
  if (v21)
  {
    if (*(unsigned char *)(v21 + 3008))
    {
      if (*(double *)(v21 + 3040) * *(double *)(v21 + 3040) + *(double *)(v21 + 3048) * *(double *)(v21 + 3048) < 160000.0)
      {
        if (*(unsigned char *)(v21 + 3009))
        {
          uint64_t v22 = a1 + *(void *)(*(void *)a1 - 24);
          if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v22 + 264)) <= 3)
          {
            float DistanceToExtLoc = BlueFin::GlPeExtLoc::GetDistanceToExtLoc(v20, (double *)(v22 + 8));
            uint64_t v24 = *(void *)(*(void *)(a1 + 2256) + 136);
            float v25 = 0.0;
            if (v24)
            {
              if (*(unsigned char *)(v24 + 3008))
              {
                double v26 = *(double *)(v24 + 3040);
                double v27 = *(double *)(v24 + 3048) * *(double *)(v24 + 3048);
                if (v26 * v26 + v27 < 160000.0) {
                  float v25 = sqrt(v27 + v26 * v26);
                }
              }
            }
            if (v25 > DistanceToExtLoc) {
              float DistanceToExtLoc = v25;
            }
            float v28 = fmaxf(DistanceToExtLoc, 399.0);
            if (v19 < v28) {
              float v28 = v19;
            }
            float v19 = v28 / 1.5;
          }
        }
      }
    }
  }
  double v29 = a9;
  double v30 = (float)(v19 * 1.5);
  *a3 = v30;
  if ((*(_DWORD *)(*(void *)(a1 + 2248) + 16) & 0xFFFFFFFE) == 2)
  {
    double v31 = fmin(*(double *)(a1 + 4984) * 1.5, 48.0);
    if (v31 > v30) {
      double v30 = v31;
    }
    *a3 = v30;
  }
  double v32 = *(void **)(a1 + 40);
  float v33 = *(double *)(v32[5] + 40);
  float v34 = sqrtf(v33);
  float v120 = a6;
  if (*(unsigned char *)(a1 + 26))
  {
    *a4 = v34 * 1.5;
    float v35 = *(double *)(v32[7] + 56);
    *a6 = sqrtf(v35) * 1.5;
    float v36 = *(double *)(v32[2] + 16) + *(double *)(v32[4] + 32);
    double v37 = sqrtf(v36) * 0.625;
  }
  else
  {
    *a4 = (float)(v34 * 1.5);
    float v38 = *(double *)(v32[7] + 56);
    *a6 = (float)(sqrtf(v38) * 1.5);
    float v39 = *(double *)(v32[2] + 16);
    double v37 = sqrtf(v39);
  }
  *a5 = v37;
  int v122 = *a9;
  uint64_t v40 = *(void *)(a1 + 16);
  int v134 = 0;
  int v135 = v137;
  char v136 = 8;
  memset(v137, 0, 32);
  long long v138 = xmmword_263BBA380;
  int32x2_t v139 = vdup_n_s32(0x42C60000u);
  int v140 = 1120272384;
  BlueFin::stDops::stDops((uint64_t)v141, (uint64_t)&v134);
  uint64_t v142 = v40;
  uint64_t v41 = **(unsigned int **)(a1 + 8);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(a1 + *(void *)(*(void *)a1 - 24) + 264), (uint64_t)&v130);
  v125.n128_u64[0] = *(void *)(a1 + *(void *)(*(void *)a1 - 24) + 88);
  LODWORD(v123) = **(_DWORD **)(a1 + 2240);
  int v129 = 0;
  BlueFin::GlPeDops::GetDops((uint64_t)v141, v41);
  uint64_t v42 = *(void *)a1;
  uint64_t v43 = *(void *)(*(void *)a1 - 24);
  unsigned int v44 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a1 + v43 + 264));
  unsigned int v45 = v44;
  int v46 = *(_DWORD *)(*(void *)(a1 + 2256) + 60);
  if (v46 && (**(_DWORD **)(a1 + 8) - v46) <= 0x2710 && v44 < 4)
  {
    int v47 = 1;
  }
  else
  {
    if (v44 <= 3)
    {
      *a3 = BlueFin::GlPeNavGnssKF::DynamicEAUpdate((BlueFin::GlPeNavGnssKF *)a1, *a5, *a3);
      uint64_t v43 = *(void *)(v42 - 24);
    }
    uint64_t v48 = a1 + v43 + 264;
    long long v127 = *(_OWORD *)(a1 + v43 + 8);
    float v49 = *(uint64_t (**)(uint64_t))(v42 + 192);
    uint64_t v128 = *(void *)(a1 + v43 + 24);
    uint64_t v50 = **(unsigned int **)(a1 + 2240);
    char v51 = v49(a1);
    BlueFin::GlPeNavUtil::ComputeWeightedRangeResid(a1, v48, (uint64_t)&v127, v50, 0, 0, 0, 1, v51);
    if (v45 >= 4 && ((double v53 = v52, v54 = *(void *)(a1 + 2272), *(__int16 *)(v54 + 2) < 1) || *(unsigned char *)(v54 + 45)))
    {
      float v55 = expf(v132 / 5.0);
      if (v55 > 3.0) {
        float v55 = 3.0;
      }
      double v56 = *a5 * v55;
      *a5 = v56;
      if ((*(_DWORD *)(*(void *)(a1 + 2248) + 8) - 1) >= 2) {
        *a3 = BlueFin::GlPeNavGnssKF::DynamicEAUpdate((BlueFin::GlPeNavGnssKF *)a1, v56, *a3);
      }
      if (*a4 >= v53 * v133) {
        double v57 = *a4;
      }
      else {
        double v57 = v53 * v133;
      }
      int v47 = 0;
      float v58 = expf(v133 / 10.0) + 2.0;
      if (v58 > 3.0) {
        float v58 = 3.0;
      }
      *a4 = v57 * v58;
      *float v120 = fmin(*v120, 48.0);
    }
    else if (v132 <= 10.0)
    {
      int v47 = 0;
    }
    else
    {
      double v59 = BlueFin::GlPeNavGnssKF::DynamicEAUpdate((BlueFin::GlPeNavGnssKF *)a1, *a5, *a3);
      int v47 = 0;
      *a3 = v59;
    }
    double v29 = a9;
  }
  uint64_t v60 = *(void *)(a1 + 2272);
  if (*(__int16 *)(v60 + 2) <= 0)
  {
    int v63 = a8 ^ 1;
  }
  else
  {
    BOOL v61 = *(unsigned char *)(v60 + 45) == 0;
    int v62 = a7;
    if (!v61) {
      int v62 = 1;
    }
    int v63 = a8 ^ 1;
    if (((v47 | a8 ^ 1 | v62) & 1) == 0)
    {
      float v64 = *(float *)(a2 + 128);
      if (v64 >= 400.0)
      {
        int v63 = 0;
      }
      else
      {
        double v65 = *v120;
        if (*(float *)(a2 + 144) * 0.5 >= *v120) {
          double v65 = *(float *)(a2 + 144) * 0.5;
        }
        *float v120 = v65;
        double v66 = v64 * 0.5;
        if (v66 >= *a3) {
          double v67 = v66;
        }
        else {
          double v67 = *a3;
        }
        *a3 = v67;
        if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a2 + 24)))
        {
          BlueFin::lla2ned((double *)(a1 + *(void *)(*(void *)a1 - 24) + 8), (double *)a2, 0, &v130);
          double v68 = sqrt(v131 * v131 + v130 * v130);
          if (v68 >= *a3) {
            double v67 = v68;
          }
          else {
            double v67 = *a3;
          }
          *a3 = v67;
        }
        int v63 = 0;
        if (*(_DWORD *)(*(void *)(a1 + 2248) + 8) == 6 && v67 > 40.0)
        {
          int v63 = 0;
          *a3 = fmax(v67, 64.0);
        }
      }
    }
  }
  __n128 v69 = *(__n128 *)(a1 + 2616);
  __n128 v125 = v69;
  v69.n128_u64[0] = *(void *)(a1 + 2632);
  unint64_t v126 = v69.n128_u64[0];
  uint64_t v70 = *(void *)(a1 + 2248);
  if (*(unsigned char *)(v70 + 1764)) {
    unsigned int v71 = 60;
  }
  else {
    unsigned int v71 = 180;
  }
  v69.n128_u32[0] = *(_DWORD *)(v70 + 1328);
  if (v69.n128_f32[0] > 4.0
    && (v69.n128_u32[0] = *(_DWORD *)(v70 + 1320), v69.n128_f32[0] < 20.0)
    && *(_DWORD *)(v70 + 76) >= v71
    && (*(unsigned char *)(v70 + 1764) || *(_DWORD *)(v70 + 64) == 1))
  {
    LOBYTE(v73) = 2;
    if (!a8) {
      goto LABEL_94;
    }
  }
  else
  {
    uint64_t v72 = *(void *)(a1 + 2272);
    if (*(__int16 *)(v72 + 2) < 1 || *(unsigned char *)(v72 + 45))
    {
      if (*(unsigned char *)(v70 + 1989))
      {
        LOBYTE(v73) = 1;
        if (!a8) {
          goto LABEL_94;
        }
      }
      else
      {
        int v73 = *(_DWORD *)(a1 + 1800);
        if (!a8) {
          goto LABEL_94;
        }
      }
    }
    else
    {
      LOBYTE(v73) = 5;
      if (!a8) {
        goto LABEL_94;
      }
    }
  }
  if (v45 < v73 || (v69.n128_f64[0] = *a3, *a3 >= 50.0))
  {
    if (*(unsigned char *)(*(void *)(a1 + 2272) + 1)
      || (*(unsigned int (**)(uint64_t, __n128))(*(void *)a1 + 80))(a1, v69) < *(_DWORD *)(*(void *)(a1 + 2272) + 8))
    {
      *(unsigned char *)(a1 + 2192) = 1;
    }
  }
  else
  {
    uint64_t v74 = *(void *)a1;
    *(_DWORD *)(a1 + 1608) = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 200);
    uint64_t v75 = a1 + *(void *)(v74 - 24);
    uint64_t v76 = *(void *)(v75 + 24);
    *(_OWORD *)(a1 + 2616) = *(_OWORD *)(v75 + 8);
    *(void *)(a1 + 2632) = v76;
    if (*(unsigned char *)(a1 + 2192))
    {
      *(_DWORD *)(a1 + 2196) = *(_DWORD *)(a1 + *(void *)(v74 - 24) + 200);
      *(unsigned char *)(a1 + 2192) = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(v74 + 264))(a1)
      && *(float *)(a2 + 128) < 100.0
      && *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 200) > (*(_DWORD *)(a1 + 2204) + 10000))
    {
      *(unsigned char *)(a1 + 2200) = 0;
    }
  }
LABEL_94:
  uint64_t v77 = *(void *)a1;
  if (((v47 | v63) & 1) == 0)
  {
    unsigned int v78 = (*(uint64_t (**)(uint64_t))(v77 + 72))(a1);
    uint64_t v77 = *(void *)a1;
    if (v78 >= 0x1389 && (v122 & 0x1000) == 0)
    {
      BlueFin::lla2ned((double *)(a1 + *(void *)(v77 - 24) + 8), v125.n128_f64, 0, &v130);
      double v79 = sqrt(v131 * v131 + v130 * v130);
      double v80 = dbl_263BBC560[v79 < 400.0];
      if (v79 >= 400.0 || *a3 >= 200.0) {
        double v79 = 450.0;
      }
      if ((*(_DWORD *)(*(void *)(a1 + 2248) + 8) - 1) >= 2) {
        double v79 = v80;
      }
      if (*a3 >= v79) {
        double v81 = *a3;
      }
      else {
        double v81 = v79;
      }
      *a3 = v81;
      if (*a4 >= v79) {
        double v79 = *a4;
      }
      *a4 = v79;
      uint64_t v77 = *(void *)a1;
    }
  }
  BOOL v83 = (*(unsigned int (**)(uint64_t))(v77 + 72))(a1) < 0x1771 || v45 > 1;
  uint64_t v84 = *(void *)(a1 + 4792);
  v86 = *(_DWORD *)(v84 + 4216) == 6 && (double v85 = (unsigned char *)(v84 + 4224), *v85) && v85[2] == 0;
  BOOL v87 = v86 && v83;
  BOOL v89 = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1) >= 0x1771
     && (*(_DWORD *)(*(void *)(a1 + 2248) + 8) - 3) < 0xFFFFFFFE;
  v88.n128_f64[0] = *a3;
  if (*a3 > 200.0 && v45 < 3) {
    BOOL v89 = 1;
  }
  if (v87)
  {
    int v91 = 0;
  }
  else
  {
    uint64_t v92 = *(void *)(a1 + 4792);
    BOOL v94 = *(_DWORD *)(v92 + 4216) == 1 && (v93 = (unsigned char *)(v92 + 4224), *v93) && v93[2] == 0;
    int v91 = 0;
    if (((v47 | v63 | !v89) & 1) == 0 && (v122 & 0x1000) == 0 && !v94)
    {
      if (v88.n128_f64[0] < 450.0) {
        v88.n128_f64[0] = 450.0;
      }
      *a3 = v88.n128_f64[0];
      int v91 = 1;
    }
  }
  uint64_t v95 = *(void *)(a1 + 2248);
  if (*(unsigned char *)(v95 + 1764)) {
    unsigned int v96 = 60;
  }
  else {
    unsigned int v96 = 180;
  }
  if (*(float *)(v95 + 1328) > 4.0
    && *(float *)(v95 + 1320) < 20.0
    && *(_DWORD *)(v95 + 76) >= v96
    && (*(unsigned char *)(v95 + 1764) || *(_DWORD *)(v95 + 64) == 1))
  {
    if (*(unsigned char *)(v95 + 1989))
    {
      if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)a1 + 72))(a1, v88) >> 3 >= 0x753 && v45 < 5) {
        goto LABEL_151;
      }
      v88.n128_f64[0] = *a3;
    }
    else if (v45 < 5)
    {
      goto LABEL_151;
    }
    *a3 = fmin(v88.n128_f64[0], 45.0);
    *a4 = fmin(*a4, 45.0);
  }
LABEL_151:
  if (*(_DWORD *)(*(void *)(a1 + 2256) + 88)) {
    char v97 = v63;
  }
  else {
    char v97 = 1;
  }
  if (v97) {
    goto LABEL_197;
  }
  uint64_t v98 = *(void *)(a1 + 40);
  double v99 = *(double *)(*(void *)(v98 + 16) + 16);
  if (*(unsigned char *)(a1 + 26)) {
    double v99 = v99 + *(double *)(*(void *)(v98 + 32) + 32);
  }
  if (v99 >= 4.0)
  {
    BOOL v100 = 0;
    goto LABEL_161;
  }
  BOOL v100 = *(double *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1) + 48) < 1.0;
  if (sqrt(*(double *)(a1 + *(void *)(*(void *)a1 - 24) + 112)* *(double *)(a1 + *(void *)(*(void *)a1 - 24) + 112)+ *(double *)(a1 + *(void *)(*(void *)a1 - 24) + 104)* *(double *)(a1 + *(void *)(*(void *)a1 - 24) + 104)) <= 5.0)
  {
LABEL_161:
    BOOL v101 = *(_DWORD *)(*(void *)(a1 + 2248) + 8) != 6;
    goto LABEL_162;
  }
  BOOL v101 = 0;
LABEL_162:
  uint64_t v102 = *(void *)(a1 + 4792);
  uint64_t v103 = (unsigned char *)(v102 + 4224);
  int v104 = *(_DWORD *)(v102 + 4216);
  if (v104 != 6 || !*v103)
  {
    if (v101) {
      goto LABEL_171;
    }
    goto LABEL_170;
  }
  if (!v103[2]) {
    BOOL v101 = 1;
  }
  if (!v101)
  {
LABEL_170:
    *(_DWORD *)(*(void *)(a1 + 2256) + 92) = 10;
LABEL_171:
    if (v100) {
      goto LABEL_176;
    }
    if (v104 != 6 || !*v103)
    {
LABEL_175:
      ++*(_DWORD *)(*(void *)(a1 + 2256) + 92);
      goto LABEL_176;
    }
LABEL_174:
    if (!v103[2]) {
      goto LABEL_176;
    }
    goto LABEL_175;
  }
  if (!v100) {
    goto LABEL_174;
  }
LABEL_176:
  uint64_t v105 = a1 + *(void *)(*(void *)a1 - 24);
  int v106 = *(_DWORD *)(v105 + 200);
  uint64_t v107 = *(void *)(a1 + 2256);
  int v108 = *(_DWORD *)(v107 + 88);
  if (*(_DWORD *)(*(void *)(a1 + 2248) + 16) == 1
    && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v105 + 264)) > 0xC
    && v132 < 2.0)
  {
    goto LABEL_196;
  }
  unsigned int v109 = v106 - v108;
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(v105 + 264), (uint64_t)&v130);
  unsigned int v110 = 0;
  int v111 = (_DWORD *)(*(void *)&v130 + 4 * LOBYTE(v131) - 4);
  do
  {
    if (*v111)
    {
      unsigned int v112 = *v111 - (((*v111 >> 1) & 0x5B6DB6DB) + ((*v111 >> 2) & 0x9249249));
      unsigned int v110 = ((v112 + (v112 >> 3)) & 0xC71C71C7) + v110 - 63 * (((v112 + (v112 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v111;
  }
  while ((unint64_t)v111 >= *(void *)&v130);
  BOOL v113 = 0;
  if (v110 >= 0xDu && v132 < 2.0) {
    BOOL v113 = v19 * 1.5 * 1.5 < 30.0;
  }
  uint64_t v107 = *(void *)(a1 + 2256);
  if (*(_DWORD *)(v107 + 92) > 4u || v109 >> 5 > 0x752 || v113)
  {
LABEL_196:
    *(unsigned char *)(v107 + 96) = 0;
  }
  else
  {
    double v114 = *(double *)(v107 + 104);
    double v115 = *(double *)(v107 + 112);
    uint64_t v116 = (double *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
    long long v123 = *(_OWORD *)(v107 + 64);
    uint64_t v124 = *(void *)(v107 + 80);
    BlueFin::lla2ned(v116, (double *)&v123, 0, &v130);
    double v117 = sqrt(v131 * v131 + v130 * v130);
    double v118 = *a3;
    if (v117 > 30.0) {
      double v117 = v117 * (v117 + -30.0) / (sqrt(v114 * v114 + v115 * v115) / 1.41421356 + v117) + 30.0;
    }
    if (v117 >= v118 * 5.0) {
      double v117 = v118 * 5.0;
    }
    if (v117 >= v118) {
      double v118 = v117;
    }
    *(unsigned char *)(*(void *)(a1 + 2256) + 96) = 1;
    *a3 = v118;
  }
LABEL_197:
  BOOL v119 = (*((unsigned char *)v29 + 2) & 0x40) == 0;
  if (*a3 <= 48.0) {
    BOOL v119 = 1;
  }
  if (((v91 | v119) & 1) == 0) {
    *a3 = 48.0;
  }
}

BOOL BlueFin::GlPeNavGnssKF::TunnelUrbanPosAssist(uint64_t *a1, double *a2)
{
  unsigned int v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1);
  if ((*(_DWORD *)(a1[281] + 8) - 1) >= 2)
  {
    unsigned int v7 = v4;
    uint64_t v6 = a1[284];
    uint64_t v5 = *a1;
  }
  else
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[284];
    unsigned int v7 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200) - *(_DWORD *)(v6 + 48);
  }
  int v8 = *(__int16 *)(v6 + 2);
  if ((int)(float)((float)(*(unsigned int (**)(uint64_t *))(v5 + 64))(a1)
                  / (float)(*((float *)a1 + 546) * 1000.0)))
    BOOL v9 = v7 > 0x7D0;
  else {
    BOOL v9 = 0;
  }
  int v11 = v9 || v8 > 0;
  unsigned int v12 = *(_DWORD *)(a1[281] + 8) - 1;
  if (v12 > 1)
  {
    if (!v11) {
      return 0;
    }
    BOOL v15 = 0;
    uint64_t v13 = *a1;
  }
  else
  {
    uint64_t v13 = *a1;
    unsigned int v14 = (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200) - *(_DWORD *)(a1[284] + 8)) >> 5;
    BOOL v15 = v14 < 0x271;
    if ((v11 & 1) == 0)
    {
      if (v14 <= 0x270)
      {
        BOOL v15 = 1;
        goto LABEL_23;
      }
      return 0;
    }
  }
  if (*(float *)((char *)a1 + *(void *)(v13 - 24) + 80) > 75.0 && !v15) {
    return 0;
  }
LABEL_23:
  double TrueHeadingRad = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)a1);
  float v19 = *((float *)a1 + 735) * 0.0174532925;
  if (v19 >= 0.785398163
    || sqrt(*(double *)((char *)a1 + *(void *)(v13 - 24) + 112) * *(double *)((char *)a1 + *(void *)(v13 - 24) + 112)+ *(double *)((char *)a1 + *(void *)(v13 - 24) + 104) * *(double *)((char *)a1 + *(void *)(v13 - 24) + 104)) < 1.0)
  {
    BlueFin::lla2ned(a2, (double *)(a1[284] + 16), 0, &v55);
    uint64_t v20 = a1[281];
    int v21 = *(_DWORD *)(v20 + 8);
    if (v15)
    {
      if (v21 != 6)
      {
        long double v23 = v55;
        long double v22 = *(double *)v56;
        if (v23 * v23 + v22 * v22 >= 250000.0) {
          goto LABEL_33;
        }
LABEL_32:
        double TrueHeadingRad = atan2(v22, v23);
        int v24 = 1;
LABEL_34:
        uint64_t v13 = *a1;
        unsigned int v12 = *(_DWORD *)(v20 + 8) - 1;
        goto LABEL_36;
      }
    }
    else if (v21 != 6)
    {
      goto LABEL_33;
    }
    if (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200) - *(_DWORD *)(a1[284] + 40) <= 59999)
    {
      long double v23 = v55;
      long double v22 = *(double *)v56;
      goto LABEL_32;
    }
LABEL_33:
    int v24 = 0;
    goto LABEL_34;
  }
  int v24 = 1;
LABEL_36:
  uint64_t v25 = v13;
  int v26 = v12 < 2;
  if ((*(unsigned int (**)(uint64_t *))(v25 + 56))(a1) > 0x5A) {
    v26 |= 2u;
  }
  unsigned int v27 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)((char *)a1 + *(void *)(*a1 - 24) + 264));
  int v28 = v26 | 4;
  if (v27 <= 2) {
    int v28 = v26;
  }
  uint64_t v29 = *((void *)a2 + 2);
  double v64 = TrueHeadingRad;
  if (v24) {
    v28 |= 8u;
  }
  long long v65 = *(_OWORD *)a2;
  uint64_t v66 = v29;
  int v67 = v28;
  char v68 = 1;
  int v69 = 1;
  BlueFin::GlPeGnssNavUpa::UrbanPosAssist((uint64_t)(a1 + 285), (uint64_t)&v64, (uint64_t)v60);
  BOOL v16 = v60[0] != 0;
  if (v60[0])
  {
    int v30 = *((unsigned char *)a1 + 2330) ? 1 : v11;
    if (v30 == 1)
    {
      *((unsigned char *)a1 + 2280) = 1;
      if (v69 == 2 || (double v31 = 1.0, (v67 & 1) != 0)) {
        double v31 = 5.0;
      }
      unsigned int v32 = *(_DWORD *)(a1[281] + 8) - 3;
      if (v63)
      {
        float v33 = v62;
        uint64_t v34 = *a1;
        for (double i = v62 - *(float *)((char *)a1 + *(void *)(*a1 - 24) + 176); i > 3.14159265; double i = i + -6.28318531)
          ;
        for (; i <= -3.14159265; double i = i + 6.28318531)
          ;
        if (i < 0.0) {
          double i = -i;
        }
        if (v32 < 4) {
          char v36 = 1;
        }
        else {
          char v36 = v24;
        }
        if (i >= 0.785398163 || (v36 & 1) == 0) {
          goto LABEL_82;
        }
      }
      else
      {
        if (v32 < 4) {
          char v37 = 1;
        }
        else {
          char v37 = v24;
        }
        if ((v37 & 1) == 0)
        {
          uint64_t v34 = *a1;
LABEL_82:
          BlueFin::lla2ned(v61, (double *)((char *)a1 + *(void *)(v34 - 24) + 8), 0, &v55);
          double v44 = v55;
          *(double *)uint64_t v54 = v55;
          *(_OWORD *)&v54[8] = *(_OWORD *)v56;
          if (*((unsigned char *)a1 + 26))
          {
            float v45 = v62;
            double v50 = *(double *)v56;
            __float2 v46 = __sincosf_stret(v62);
            BlueFin::GlPeNavGnssKF::ApplyCrossTrackPosMeas((BlueFin::GlPeNavGnssKF *)a1, vmlad_n_f64(-(v44 * v46.__sinval), v46.__cosval, v50), v31, v45);
          }
          else
          {
            *(_OWORD *)&v56[8] = xmmword_263BBC570;
            double v55 = COERCE_DOUBLE(v57);
            *(void *)double v56 = &v58;
            uint64_t v58 = 0;
            double v59 = &v56[16];
            BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v55, 1, 12);
            *(void *)(*(void *)(*(void *)v56 + 8) + 24) = 0x3FF0000000000000;
            BlueFin::ned2hlu((long long *)v54, (const BlueFin::Matrix *)(a1 + 167), v53);
            BlueFin::GlPeNavGnssKF::MeasUpdate(a1, (uint64_t)&v55, 1, 0, 1, *(double *)&v53[1], v31);
            if (v15)
            {
              BlueFin::lla2ned(v61, (double *)((char *)a1 + *(void *)(*a1 - 24) + 8), 0, (double *)&v51);
              *(_OWORD *)uint64_t v54 = v51;
              *(void *)&v54[16] = v52;
              BlueFin::ned2hlu((long long *)v54, (const BlueFin::Matrix *)(a1 + 167), &v51);
              double v47 = *(double *)&v51;
              BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v55, 1, 12);
              *(void *)(*(void *)(*(void *)v56 + 8) + 8) = 0x3FF0000000000000;
              BlueFin::GlPeNavGnssKF::MeasUpdate(a1, (uint64_t)&v55, 1, 0, 1, v47, v31);
            }
          }
          uint64_t v48 = *a1;
          *((_DWORD *)a1 + 571) = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200);
          uint64_t v49 = (uint64_t)a1 + *(void *)(v48 - 24);
          *((_OWORD *)a1 + 143) = *(_OWORD *)(v49 + 8);
          a1[288] = *(void *)(v49 + 24);
          return v16;
        }
        float v38 = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)a1);
        float v33 = BlueFin::GlPeGnssNavUpa::UnravelHeadingRad((BlueFin::GlPeGnssNavUpa *)(a1 + 285), v38, v62);
        float v62 = v33;
      }
      if (*((unsigned char *)a1 + 26))
      {
        BlueFin::GlPeNavGnssKF::ApplyXTCHdg((BlueFin::GlPeNavGnssKF *)a1, v33, 0.0174532925);
      }
      else
      {
        *(_OWORD *)&v56[8] = xmmword_263BBC570;
        double v55 = COERCE_DOUBLE(v57);
        *(void *)double v56 = &v58;
        uint64_t v58 = 0;
        double v59 = &v56[16];
        BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v55, 1, 12);
        *(void *)(*(void *)(*(void *)v56 + 8) + 32) = 0x3FF0000000000000;
        float v39 = v62;
        double v40 = v62;
        for (double j = v40 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)a1);
              j > 3.14159265;
        for (; j <= -3.14159265; double j = j + 6.28318531)
          ;
        float v42 = j / 0.0174532924;
        if (fabsf(v42) > 3.0)
        {
          *(float *)((char *)a1 + *(void *)(*a1 - 24) + 176) = v39;
          for (double j = v40 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)a1);
                j > 3.14159265;
          for (; j <= -3.14159265; double j = j + 6.28318531)
            ;
        }
        BlueFin::GlPeNavGnssKF::MeasUpdate(a1, (uint64_t)&v55, 1, 0, 1, j, 0.00030461742);
      }
      uint64_t v34 = *a1;
      int v43 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 200);
      *((double *)a1 + 1515) = v62;
      *((_DWORD *)a1 + 3032) = v43;
      goto LABEL_82;
    }
  }
  return v16;
}

BOOL BlueFin::GlPeNavGnssKF::IsInXtcNow(BlueFin::GlPeNavGnssKF *this)
{
  int v1 = *((_DWORD *)this + 571);
  if (v1 == -7200001) {
    return 0;
  }
  unsigned int v3 = (char *)this + *(void *)(*(void *)this - 24);
  unsigned int v4 = *((_DWORD *)v3 + 50) - v1;
  BlueFin::lla2ned((double *)v3 + 1, (double *)this + 286, 0, &v6);
  return sqrt(v7 * v7 + v6 * v6) < 2.0 || v4 < 0x9C4;
}

double BlueFin::GlPeNavGnssKF::GetStP(BlueFin::GlPeNavGnssKF *this, double *a2, double *a3, double *a4)
{
  uint64_t v4 = *((void *)this + 5);
  uint64_t v5 = *(void *)(v4 + 8);
  *a2 = *(double *)(v5 + 8);
  *a3 = *(double *)(v5 + 24);
  double result = *(double *)(*(void *)(v4 + 24) + 24);
  *a4 = result;
  return result;
}

void BlueFin::GlPeNavGnssKF::ComputePosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = (uint64_t)v2;
  v211[100] = *MEMORY[0x263EF8340];
  *((void *)&v156 + 1) = (char *)v2 + 12084;
  double v6 = v2 + 367;
  uint64_t v7 = *v2;
  *(_DWORD *)((char *)v2 + *(void *)(*v2 - 24) + 256) = 0;
  *(void *)&long long v154 = v8;
  HIDWORD(v155) = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 440));
  *(void *)(v5 + 13192) = 0;
  *(_DWORD *)(v5 + 13200) = 0;
  *((void *)&v160 + 1) = v4;
  if ((*((unsigned char *)v4 + 1) & 8) != 0) {
    *((unsigned char *)v6 + 1940) = 1;
  }
  *(void *)(v5 + 2880) = 0;
  *(void *)(v5 + 2872) = 0;
  *(void *)(v5 + 2888) = 0;
  *(void *)(v5 + 2904) = 0x4082C00000000000;
  *(int64x2_t *)(v5 + 2912) = vdupq_n_s64(0x4082C00000000000uLL);
  *(unsigned char *)(v5 + 2932) = 0;
  *(_OWORD *)double v6 = xmmword_263BBA440;
  *(_DWORD *)(v5 + 2896) = 0;
  *(_DWORD *)(v5 + 2928) = 1142285679;
  bzero(*(void **)(v5 + 2952), ((4 * *(unsigned __int8 *)(v5 + 2960) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v5 + 1616), ((4 * *(unsigned __int8 *)(v5 + 1624) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v5 + 1704), ((4 * *(unsigned __int8 *)(v5 + 1712) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BOOL v9 = *(_OWORD **)(v5 + 8);
  uint64_t v10 = v5 + *(void *)(v7 - 24);
  uint64_t v11 = BlueFin::GlSetBase::operator=(v10 + 264, (uint64_t)v9 + 184);
  *(_OWORD *)(v11 + 12) = *(_OWORD *)((char *)v9 + 196);
  long long v12 = *(_OWORD *)((char *)v9 + 212);
  long long v13 = *(_OWORD *)((char *)v9 + 228);
  long long v14 = *(_OWORD *)((char *)v9 + 244);
  *(_OWORD *)(v10 + 336) = v9[16];
  *(_OWORD *)(v11 + 60) = v14;
  *(_OWORD *)(v11 + 44) = v13;
  *(_OWORD *)(v11 + 28) = v12;
  BOOL v15 = *(_OWORD **)(v5 + 8);
  uint64_t v16 = BlueFin::GlSetBase::operator=(v5 + *(void *)(*(void *)v5 - 24) + 352, (uint64_t)v15 + 184);
  *(_OWORD *)(v16 + 12) = *(_OWORD *)((char *)v15 + 196);
  long long v17 = *(_OWORD *)((char *)v15 + 212);
  long long v18 = *(_OWORD *)((char *)v15 + 228);
  long long v19 = *(_OWORD *)((char *)v15 + 244);
  *(_OWORD *)(v16 + 72) = v15[16];
  *(_OWORD *)(v16 + 60) = v19;
  *(_OWORD *)(v16 + 44) = v18;
  *(_OWORD *)(v16 + 28) = v17;
  uint64_t v20 = *(void *)v5;
  uint64_t v21 = v5 + *(void *)(*(void *)v5 - 24);
  *(_OWORD *)(v21 + 56) = *(_OWORD *)(v21 + 8);
  *(void *)(v21 + 72) = *(void *)(v21 + 24);
  **((unsigned char **)&v156 + 1) = BYTE12(v155);
  if ((BYTE12(v155) & 1) == 0)
  {
    BlueFin::GlPeNavGnssKF::Propagate(v5, (*v4 >> 9) & 1);
    uint64_t v20 = *(void *)v5;
  }
  BlueFin::GlPeNavGnssState::Print(v5 + *(void *)(v20 - 24), 0xEu, "KF-");
  int v22 = *v4;
  BlueFin::GlPeNavMeasSelect::GlPeNavMeasSelect((uint64_t)v195, *(void *)(v5 + 16), *(void *)(v5 + 8));
  if (*(__int16 *)(*(void *)(v5 + 2272) + 2) < 1)
  {
    uint64_t v25 = *(void *)(v5 + 40);
    float v26 = *(double *)(*(void *)(v25 + 16) + 16);
    if (*(unsigned char *)(v5 + 26))
    {
      float v27 = *(double *)(*(void *)(v25 + 32) + 32);
      float v26 = v26 + v27;
    }
    double v24 = fmax(sqrtf(v26), 7.5);
    double v197 = v24;
    double v28 = sqrt(*(double *)(v5 + *(void *)(*(void *)v5 - 24) + 112)* *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 112)+ *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 104)* *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 104));
    double v29 = v28 + v28;
    if (v29 >= v24) {
      double v24 = v29;
    }
  }
  else
  {
    double v23 = sqrt(*(double *)(v5 + *(void *)(*(void *)v5 - 24) + 112)* *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 112)+ *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 104)* *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 104));
    double v24 = v23 + v23;
    if (v24 < 7.5) {
      double v24 = 7.5;
    }
  }
  double v197 = v24;
  uint64_t v30 = *(void *)(v5 + 2248);
  float v31 = *(float *)(v30 + 1760);
  if (v31 <= 0.0) {
    float v31 = 15.5;
  }
  if (*(int *)(v30 + 16) > 2) {
    float v31 = 11.5;
  }
  if ((v22 & 8) != 0) {
    float v32 = 9.0;
  }
  else {
    float v32 = v31;
  }
  BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExitOrLeftRecently((BlueFin::GlPeNavGnssKF *)v5, 0x4E20u);
  float v198 = v32;
  char v199 = *(unsigned char *)(*(void *)(v5 + 2248) + 1989);
  uint64_t v33 = *(void *)v5;
  uint64_t v34 = v5 + *(void *)(*(void *)v5 - 24);
  int v35 = **(_DWORD **)(v5 + 2240);
  long long v200 = *(_OWORD *)(v34 + 104);
  *(void *)float v201 = *(void *)(v34 + 120);
  uint64_t v36 = *(void *)(v5 + 2272);
  int v37 = *(__int16 *)(v36 + 2) >= 1 && *(unsigned __int8 *)(v36 + 45) == 0;
  int v38 = (*(uint64_t (**)(uint64_t))(v33 + 80))(v5);
  BlueFin::GlPeNavMeasSelect::SelectRr((uint64_t)v195, (const BlueFin::GlPeNavUtil *)v5, (BlueFin::GlSetBase *)(v34 + 352), v34 + 8, v35, (int)&v200, v37, v38, 0);
  BlueFin::GlPeNavMeasSelect::SelectPr((BlueFin::GlPeNavMeasSelect *)v195, (const BlueFin::GlPeNavUtil *)v5, (BlueFin::GlSignalIdSet *)(v5 + *(void *)(*(void *)v5 - 24) + 264), 0);
  if (*(__int16 *)(*(void *)(v5 + 2272) + 2) < 1) {
    goto LABEL_33;
  }
  LODWORD(v155) = 0;
  unsigned int v40 = *(_DWORD *)(*(void *)(v5 + 2248) + 8);
  if (v40 <= 6)
  {
    if (((1 << v40) & 0x29) != 0)
    {
      LODWORD(v195[0]) = 0;
      if ((int)BlueFin::GlPeNavUtil::GetIntegrityGeometry((BlueFin::GlPeNavUtil *)v5, (BlueFin::GlSignalIdSet *)(v5 + *(void *)(*(void *)v5 - 24) + 264), v195, 3.0, v5 + *(void *)(*(void *)v5 - 24) + 8, 0) > 1)
      {
LABEL_30:
        LODWORD(v155) = 0;
        goto LABEL_34;
      }
    }
    else if (((1 << v40) & 6) != 0)
    {
      uint64_t v41 = *(void *)(v5 + 16);
      *((void *)&v200 + 1) = &v201[4];
      v201[0] = 8;
      *(_OWORD *)&v201[4] = 0u;
      long long v202 = 0u;
      long long v203 = xmmword_263BBA380;
      int32x2_t v204 = vdup_n_s32(0x42C60000u);
      LODWORD(v200) = 0;
      int v205 = 1120272384;
      BlueFin::stDops::stDops((uint64_t)v195, (uint64_t)&v200);
      v196[6] = v41;
      uint64_t v42 = **(unsigned int **)(v5 + 8);
      BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(v5 + *(void *)(*(void *)v5 - 24) + 264), (uint64_t)&v171);
      v211[0] = *(void *)(v5 + *(void *)(*(void *)v5 - 24) + 88);
      LODWORD(v210[0]) = **(_DWORD **)(v5 + 2240);
      v207[0] = 0;
      uint64_t v150 = 0;
      BlueFin::GlPeDops::GetDops((uint64_t)v195, v42);
      LODWORD(v171) = 0;
      int IntegrityGeometry = BlueFin::GlPeNavUtil::GetIntegrityGeometry((BlueFin::GlPeNavUtil *)v5, (BlueFin::GlSignalIdSet *)(v5 + *(void *)(*(void *)v5 - 24) + 264), &v171, 3.0, v5 + *(void *)(*(void *)v5 - 24) + 8, 0);
      if (v208 < 1.5)
      {
        v39.n128_f32[0] = v209;
        if (v209 < 3.0 && IntegrityGeometry > 0) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      if (v40 != 6) {
        goto LABEL_34;
      }
      if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v5 + *(void *)(*(void *)v5 - 24) + 264)) > 3) {
        goto LABEL_30;
      }
    }
    BlueFin::GlPeMsmtMgr::SetPrCode(*(void *)(v5 + 8), v5 + *(void *)(*(void *)v5 - 24) + 264, 27);
    BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v5 + 8), v5 + *(void *)(*(void *)v5 - 24) + 352, 27);
    uint64_t v44 = *(void *)v5;
    bzero(*(void **)(v5 + *(void *)(*(void *)v5 - 24) + 264), ((4 * *(unsigned __int8 *)(v5 + *(void *)(*(void *)v5 - 24) + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v5 + *(void *)(v44 - 24) + 352), ((4 * *(unsigned __int8 *)(v5 + *(void *)(v44 - 24) + 360) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    *(unsigned char *)(v5 + 1560) = 0;
LABEL_33:
    LODWORD(v155) = 1;
  }
LABEL_34:
  if (**((unsigned char **)&v160 + 1))
  {
    v39.n128_f32[0] = (float)(*(unsigned int (**)(uint64_t, __n128))(*(void *)v5 + 64))(v5, v39)
                    / (float)(*(float *)(v5 + 2184) * 1000.0);
    if ((int)v39.n128_f32[0] >= 2)
    {
      uint64_t v45 = *(void *)(v5 + 2272);
      if (*(__int16 *)(v45 + 2) >= 1 && !*(unsigned char *)(v45 + 45) && *(_DWORD *)(*(void *)(v5 + 2248) + 8) == 6)
      {
        uint64_t v46 = 7;
LABEL_46:
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24);
        v48(v5, v46);
        return;
      }
    }
  }
  if ((**((unsigned char **)&v160 + 1) & 2) != 0)
  {
    v39.n128_f32[0] = (float)(*(unsigned int (**)(uint64_t, __n128))(*(void *)v5 + 64))(v5, v39)
                    / (float)(*(float *)(v5 + 2184) * 1000.0);
    if ((int)v39.n128_f32[0] >= 2)
    {
      uint64_t v47 = *(void *)(v5 + 2272);
      if (*(__int16 *)(v47 + 2) >= 1
        && !*(unsigned char *)(v47 + 45)
        && (*(_DWORD *)(*(void *)(v5 + 2248) + 8) - 1) <= 1)
      {
        uint64_t v46 = 6;
        goto LABEL_46;
      }
    }
  }
  uint64_t v49 = (unsigned char *)(v5 + 13192);
  int v50 = **((_DWORD **)&v160 + 1);
  long long v51 = *(BlueFin::GlPeExtLoc **)(v5 + 2256);
  int v52 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 128))(v5, v39);
  int v53 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 160))(v5);
  LODWORD(v51) = BlueFin::GlPeExtLoc::WaitPosLocVerification(v51, v52, v53, (v50 & 0x1000) != 0);
  uint64_t v54 = *(void *)v5;
  uint64_t v55 = *(void *)v5;
  char v56 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v5 + *(void *)(*(void *)v5 - 24) + 264));
  if (v51)
  {
    double v57 = (unsigned char *)(v5 + 13193);
LABEL_73:
    *double v57 = 0;
    *uint64_t v49 = 1;
    goto LABEL_74;
  }
  if ((v50 & 0x1000000) != 0)
  {
LABEL_71:
    *(_WORD *)uint64_t v49 = 257;
    BlueFin::GlPeMsmtMgr::SetPrCode(*(void *)(v5 + 8), v5 + *(void *)(v55 - 24) + 264, 26);
    BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v5 + 8), v5 + *(void *)(*(void *)v5 - 24) + 352, 26);
    uint64_t v54 = *(void *)v5;
    uint64_t v62 = *(void *)v5;
    bzero(*(void **)(v5 + *(void *)(v54 - 24) + 264), ((4 * *(unsigned __int8 *)(v5 + *(void *)(v54 - 24) + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v5 + *(void *)(v62 - 24) + 352), ((4 * *(unsigned __int8 *)(v5 + *(void *)(v62 - 24) + 360) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    *(unsigned char *)(v5 + 1560) = 0;
LABEL_72:
    double v57 = (unsigned char *)(v5 + 13197);
    uint64_t v49 = (unsigned char *)(v5 + 13196);
    goto LABEL_73;
  }
  uint64_t v58 = *(__int16 **)(v5 + 2256);
  uint64_t v59 = *((void *)v58 + 17);
  if (v59)
  {
    char v60 = *(unsigned char *)(v59 + 3008);
    if (v60) {
      char v60 = *(double *)(v59 + 3040) * *(double *)(v59 + 3040) + *(double *)(v59 + 3048) * *(double *)(v59 + 3048) < 160000.0;
    }
  }
  else
  {
    char v60 = 0;
  }
  if (v56) {
    char v60 = 0;
  }
  if ((v60 & 1) != 0 || v56)
  {
    *(unsigned char *)(v5 + 13193) = v60;
    *uint64_t v49 = 1;
    if (*v58 <= 0) {
      goto LABEL_74;
    }
LABEL_66:
    if (!v59) {
      goto LABEL_72;
    }
    if (!*(unsigned char *)(v59 + 3008)) {
      goto LABEL_72;
    }
    double v61 = *(double *)(v59 + 3040);
    if (v61 * v61 + *(double *)(v59 + 3048) * *(double *)(v59 + 3048) >= 160000.0 || v56 > 2 || v61 >= 35.0) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (*v58 >= 1) {
    goto LABEL_66;
  }
LABEL_74:
  char v63 = v196;
  uint64_t v64 = 100;
  do
  {
    *((unsigned char *)v63 - 8) = 0;
    *((_DWORD *)v63 - 1) = -1;
    *char v63 = 575;
    v63 += 28;
    --v64;
  }
  while (v64);
  uint64_t v65 = *(void *)(v54 - 24);
  DWORD2(v155) = (*(uint64_t (**)(uint64_t))(v54 + 72))(v5);
  *(void *)&long long v157 = v5 + v65 + 264;
  *(void *)&long long v156 = v5 + v65;
  *((void *)&v154 + 1) = v5 + v65 + 352;
  if (DWORD2(v155) >= 0x1389)
  {
    uint64_t v68 = *(void *)(v5 + 16);
    v162[0] = 0;
    double v163 = &v164[4];
    v164[0] = 8;
    memset(&v164[4], 0, 32);
    long long v165 = xmmword_263BBA380;
    uint64_t v166 = (uint64_t)vdup_n_s32(0x42C60000u);
    LODWORD(v167) = 1120272384;
    BlueFin::stDops::stDops((uint64_t)&v200, (uint64_t)v162);
    uint64_t v206 = v68;
    uint64_t v69 = **(unsigned int **)(v5 + 8);
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(v5 + *(void *)(*(void *)v5 - 24) + 264), (uint64_t)&v171);
    v211[0] = *(void *)(v5 + *(void *)(*(void *)v5 - 24) + 88);
    LODWORD(v210[0]) = **(_DWORD **)(v5 + 2240);
    HIDWORD(v161) = 0;
    uint64_t v150 = 0;
    BlueFin::GlPeDops::GetDops((uint64_t)&v200, v69);
    uint64_t v70 = *(void *)(v5 + 2248);
    if (*(unsigned char *)(v70 + 1764)) {
      unsigned int v71 = 60;
    }
    else {
      unsigned int v71 = 180;
    }
    if ((*(float *)(v70 + 1328) <= 4.0
       || *(float *)(v70 + 1320) >= 20.0
       || *(_DWORD *)(v70 + 76) < v71
       || !*(unsigned char *)(v70 + 1764) && *(_DWORD *)(v70 + 64) != 1)
      && (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v157) < 4 || v208 > 10.0))
    {
      bzero(*(void **)(v156 + 352), ((4 * *(unsigned __int8 *)(v156 + 360) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(*(void **)(v156 + 264), ((4 * *(unsigned __int8 *)(v156 + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      unsigned __int8 v116 = 0;
      goto LABEL_201;
    }
    *((void *)&v159 + 1) = v195;
    int v67 = 100;
  }
  else
  {
    BlueFin::GlPeNavGnssKF::PackSkfMeas_RR(v5, (uint64_t)v195);
    unsigned int v66 = BlueFin::GlSetBase::Cnt(*((BlueFin::GlSetBase **)&v154 + 1));
    *((void *)&v159 + 1) = &v195[7 * v66];
    int v67 = 100 - v66;
  }
  HIDWORD(v153) = v67;
  *(unsigned char *)(*((void *)&v156 + 1) + 28) = 0;
  bzero(v211, 0x320uLL);
  bzero(v210, 0x320uLL);
  for (uint64_t i = 0; i != 300; i += 3)
  {
    int v73 = &v207[i + 26];
    *(unsigned char *)int v73 = 0;
    v73[1] = -1;
    *((_WORD *)v73 + 4) = 575;
  }
  memset(v207, 0, 100);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v193, v194, 0x13u, (const void **)(*(void *)(v5 + 8) + 184));
  for (uint64_t j = 0; j != 3200; j += 32)
  {
    uint64_t v75 = &v201[j - 16];
    *(void *)uint64_t v75 = 0;
    *((_DWORD *)v75 + 2) = 1315859240;
    *((_WORD *)v75 + 6) = 0;
    *((_DWORD *)v75 + 4) = 0;
    v75[20] = 0;
    *((_DWORD *)v75 + 6) = -1;
    *((_WORD *)v75 + 14) = 575;
  }
  DWORD1(v155) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 192))(v5);
  HIDWORD(v157) = 0;
  int v76 = *(_DWORD *)(*(void *)(v5 + 2248) + 8);
  if ((*(unsigned char *)(*((void *)&v160 + 1) + 1) & 0x40) != 0 && v76 != 6) {
    HIDWORD(v157) = BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)v5);
  }
  if (v76 == 6) {
    float v77 = 10.0;
  }
  else {
    float v77 = 15.0;
  }
  unsigned __int8 v188 = *(unsigned char *)(v156 + 272);
  memcpy(v192, *(const void **)(v156 + 264), 4 * v188);
  unsigned __int16 v190 = 0;
  unsigned __int8 v189 = 0;
  int v191 = v192[0];
  BlueFin::GlSetIterator::operator++(&v188);
  *(void *)&long long v160 = 0;
  if (v189 != v188)
  {
    *(void *)&long long v160 = 0;
    unsigned int v158 = v184;
    *(void *)&long long v159 = v5 + 88;
    double v79 = &v200;
    do
    {
      if (v190 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      double v80 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v190;
      char v81 = *v80;
      LODWORD(v80) = v80[1];
      v185[0] = v81;
      int v186 = (int)v80;
      unsigned __int16 v187 = v190;
      if ((((unint64_t)*(unsigned int *)(v193 + (((unint64_t)v190 >> 3) & 0x1FFC)) >> (v190 & 0x1F)) & 1) == 0) {
        goto LABEL_144;
      }
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 8), (const BlueFin::GlSignalId *)v185, 0, 0);
      uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 8), (const BlueFin::GlSignalId *)v185, 0);
      if ((MeMeas[13] & 0x80) != 0) {
        BOOL v84 = 1;
      }
      else {
        BOOL v84 = *(_DWORD *)(*(void *)(v5 + 2248) + 8) != 10 && *((float *)MeMeas + 25) * 1000000000.0 > 999.0;
      }
      uint64_t v85 = *(void *)(v5 + 2272);
      if (*(__int16 *)(v85 + 2) < 1)
      {
        BOOL v86 = 0;
        if (!v84) {
          goto LABEL_120;
        }
      }
      else
      {
        BOOL v86 = *(unsigned __int8 *)(v85 + 45) == 0;
        if (!v84) {
          goto LABEL_120;
        }
      }
      float v87 = *((float *)MeMeas + 27);
      if (v87 <= 30.0 || (uint64_t v88 = *(void *)(v5 + 2248), (*(_DWORD *)(v88 + 16) & 0xFFFFFFFE) == 2))
      {
        if (v86 && v87 >= 16.0) {
          goto LABEL_120;
        }
      }
      else
      {
        unsigned int v89 = *(_DWORD *)(v88 + 8) - 3;
        char v90 = !v86;
        if (v87 < 16.0) {
          char v90 = 1;
        }
        if (v89 > 2 || (v90 & 1) == 0) {
          goto LABEL_120;
        }
      }
      if ((**((unsigned char **)&v160 + 1) & 0x80) == 0) {
        goto LABEL_139;
      }
LABEL_120:
      if (!BlueFin::stPeSigMeasKF::IsPRValidForNav(PeMeas))
      {
LABEL_139:
        uint64_t v110 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v5 + 8) + 19176), (uint64_t)v185);
        if (v110)
        {
          char v111 = 14;
LABEL_143:
          *(unsigned char *)(v110 + 448) = v111;
          goto LABEL_144;
        }
        goto LABEL_144;
      }
      int v91 = &v207[3 * v160 + 26];
      int v92 = (__int16)v187;
      if (v91 != v185)
      {
        *int v91 = v185[0];
        double v93 = &v207[3 * v160 + 26];
        v93[1] = v186;
        *((_WORD *)v93 + 4) = v92;
      }
      double v182 = v184;
      unsigned __int8 v183 = 19;
      memset(v184, 0, sizeof(v184));
      float v181 = 0.0;
      v184[v92 >> 5] |= 1 << v92;
      BOOL v94 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 192);
      uint64_t v95 = v5 + *(void *)(*(void *)v5 - 24);
      long long v168 = *(_OWORD *)(v95 + 8);
      uint64_t v169 = *(void *)(v95 + 24);
      uint64_t v96 = **(unsigned int **)(v5 + 2240);
      char v97 = v94(v5);
      BlueFin::GlPeNavUtil::ComputeRangeResidVec(v5, (uint64_t)&v182, (uint64_t)&v168, v96, 0, 0, (uint64_t)&v181, 1, v97, 1);
      unsigned int v98 = 0;
      double v99 = &v182[v183 - 1];
      do
      {
        if (*v99)
        {
          unsigned int v100 = *v99 - (((*v99 >> 1) & 0x5B6DB6DB) + ((*v99 >> 2) & 0x9249249));
          unsigned int v98 = ((v100 + (v100 >> 3)) & 0xC71C71C7) + v98 - 63 * (((v100 + (v100 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v99;
      }
      while (v99 >= v182);
      if ((_WORD)v98)
      {
        double v101 = v171[1];
        double v102 = fabs(v101);
        if (v102 < 400.0) {
          double v102 = v171[1];
        }
        *(double *)&v211[v160] = v102;
        float v103 = v101;
        *(float *)double v79 = v103;
        *((_DWORD *)v79 + 1) = *((_DWORD *)MeMeas + 27);
        float v104 = *((float *)MeMeas + 22) * 299792458.0;
        *((float *)v79 + 2) = v104;
        float v105 = v181;
        *((_WORD *)v79 + 6) = (int)v181;
        int v106 = *((_DWORD *)MeMeas + 5);
        *((_DWORD *)v79 + 4) = v106;
        int v107 = v185[0];
        if ((char *)v79 + 20 != v185)
        {
          *((unsigned char *)v79 + 20) = v185[0];
          *((_DWORD *)v79 + 6) = v186;
          *((_WORD *)v79 + 14) = v187;
        }
        unsigned int v108 = v107 - 76;
        if (v108 <= 0x3E && ((1 << v108) & 0x7C0000000000001FLL) != 0)
        {
          double v109 = fabs(v102);
          *(double *)&v211[v160] = v109 + v109;
        }
        v79 += 2;
        if (!HIDWORD(v157)) {
          goto LABEL_138;
        }
        if (v105 >= v77)
        {
          *(double *)&v211[v160] = (float)-v105;
          *(double *)&v210[v160] = (float)((float)(100 * byte_263BBC720[v106]) - v105);
LABEL_138:
          *(void *)&long long v160 = (v160 + 1);
        }
      }
      else
      {
        uint64_t v110 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v5 + 8) + 19176), (uint64_t)v185);
        if (v110)
        {
          char v111 = 28;
          goto LABEL_143;
        }
      }
LABEL_144:
      BlueFin::GlSetIterator::operator++(&v188);
    }
    while (v189 != v188);
  }
  int v112 = (char)v160;
  if (SBYTE4(v153) < (char)v160) {
    int v112 = SBYTE4(v153);
  }
  if (v112 >= 50) {
    int v113 = 50;
  }
  else {
    int v113 = v112;
  }
  uint64_t v114 = *(void *)(v5 + 2272);
  if (*(__int16 *)(v114 + 2) < 1 || *(unsigned char *)(v114 + 45))
  {
    if (*(unsigned char *)(*(void *)(v5 + 2248) + 1989)) {
      int v115 = 1;
    }
    else {
      int v115 = *(unsigned __int8 *)(v5 + 1800);
    }
  }
  else
  {
    int v115 = 5;
  }
  if (v115 > v113)
  {
    BlueFin::GlPeMsmtMgr::SetPrCode(*(void *)(v5 + 8), v5 + *(void *)(*(void *)v5 - 24) + 264, 14);
    bzero(*(void **)(v156 + 264), ((4 * *(unsigned __int8 *)(v156 + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    goto LABEL_191;
  }
  if (HIDWORD(v157)) {
    double v117 = v210;
  }
  else {
    double v117 = v211;
  }
  unsigned int v118 = v160;
  BlueFin::GlSortDoubles((uint64_t)v117, (const double *)v160, v207, v78);
  double v119 = fabs((*(double *)&v211[*((unsigned __int8 *)v207 + (v160 >> 1))]+ *(double *)&v211[*((unsigned __int8 *)v207+ (unsigned __int16)((unint64_t)(v118 - 1 + (((v118 - 1) & 0x8000) >> 15)) >> 1))])* 10.0* 0.5);
  *(void *)&long long v159 = &v172[4];
  double v171 = (double *)&v172[4];
  if (v119 >= 400.0) {
    double v120 = v119;
  }
  else {
    double v120 = 400.0;
  }
  v172[0] = 19;
  memset(&v172[4], 0, 76);
  if (!(_BYTE)v160)
  {
    LODWORD(v121) = 0;
    goto LABEL_179;
  }
  LODWORD(v158) = v160;
  uint64_t v121 = 0;
  uint64_t v122 = *((void *)&v159 + 1);
  while (0x6DB6DB6DB6DB6DB7 * ((v122 - *((void *)&v159 + 1)) >> 3) < (char)v113)
  {
    uint64_t v123 = *((unsigned __int8 *)v207 + v121);
    uint64_t v124 = (unsigned __int8 *)&v207[3 * v123 + 26];
    double v125 = *(double *)&v211[v123];
    if (fabs(v125) > v120)
    {
      GlCustomLog(14, "SV Removed due to large residual - Selected Sv %02d CarrBand %d dz=%.1f Lms %u\n", *v124, v207[3 * v123 + 27], v125, **(_DWORD **)(v5 + 8));
      uint64_t v126 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v5 + 8) + 19176), (uint64_t)v124);
      goto LABEL_173;
    }
    if (!BlueFin::GlPeNavUtil::PackSkfMeas_PR_SignalId(v5, v122, (BlueFin::GlSignalId *)&v207[3 * *((unsigned __int8 *)v207 + v121) + 26], SBYTE4(v155)))
    {
      uint64_t v126 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v5 + 8) + 19176), (uint64_t)v124);
LABEL_173:
      if (v126) {
        *(unsigned char *)(v126 + 448) = 15;
      }
      goto LABEL_175;
    }
    v122 += 56;
    int v127 = SLOWORD(v207[3 * v123 + 28]);
    *((_DWORD *)v171 + (v127 >> 5)) |= 1 << v127;
LABEL_175:
    if (v160 == ++v121) {
      goto LABEL_184;
    }
  }
  unsigned int v118 = v160;
LABEL_179:
  if (v121 < v118)
  {
    unint64_t v128 = v160 - (unint64_t)v121;
    int v129 = (unsigned __int8 *)v207 + v121;
    do
    {
      uint64_t v130 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v5 + 8) + 19176), (uint64_t)&v207[3 * *v129 + 26]);
      if (v130) {
        *(unsigned char *)(v130 + 448) = 43;
      }
      ++v129;
      --v128;
    }
    while (v128);
  }
LABEL_184:
  unsigned int v131 = 0;
  float v132 = (double *)((char *)v171 + 4 * v172[0] - 4);
  do
  {
    if (*(_DWORD *)v132)
    {
      unsigned int v133 = *(_DWORD *)v132 - (((*(_DWORD *)v132 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v132 >> 2) & 0x9249249));
      unsigned int v131 = ((v133 + (v133 >> 3)) & 0xC71C71C7) + v131 - 63 * (((v133 + (v133 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    float v132 = (double *)((char *)v132 - 4);
  }
  while (v132 >= v171);
  if (!(_WORD)v131) {
    *(unsigned char *)(*((void *)&v156 + 1) + 28) = 1;
  }
  BlueFin::GlSetBase::operator=(v157, (uint64_t)&v171);
  long long v134 = *(_OWORD *)&v172[4];
  *(_OWORD *)(v156 + 292) = *(_OWORD *)&v172[20];
  long long v135 = *(_OWORD *)&v172[52];
  *(_OWORD *)(v156 + 308) = *(_OWORD *)&v172[36];
  *(_OWORD *)(v156 + 324) = v135;
  *(_OWORD *)(v156 + 336) = *(_OWORD *)&v172[64];
  *(_OWORD *)(v156 + 276) = v134;
LABEL_191:
  if ((*(unsigned char *)(*((void *)&v160 + 1) + 1) & 0x40) != 0
    && (int)(float)((float)(*(unsigned int (**)(uint64_t))(*(void *)v5 + 64))(v5)
                                / (float)(*(float *)(v5 + 2184) * 1000.0)) >= 2)
  {
    int v136 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200);
    unsigned int v137 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72))(v5);
    BlueFin::GlPeNavGnssResidMon::RunBcMon(v5 + 4880, v136, v137, (uint64_t)&v200, (uint64_t *)v157, 1);
  }
  uint64_t v138 = v5 + *(void *)(*(void *)v5 - 24);
  uint64_t v139 = BlueFin::GlSetBase::operator=(v138 + 264, v157);
  *(_OWORD *)(v139 + 12) = *(_OWORD *)(v156 + 276);
  long long v140 = *(_OWORD *)(v156 + 292);
  long long v141 = *(_OWORD *)(v156 + 308);
  long long v142 = *(_OWORD *)(v156 + 324);
  *(_OWORD *)(v138 + 336) = *(_OWORD *)(v156 + 336);
  *(_OWORD *)(v139 + 60) = v142;
  *(_OWORD *)(v139 + 44) = v141;
  *(_OWORD *)(v139 + 28) = v140;
  uint64_t v143 = *((void *)&v159 + 1) + 56 * BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v157);
  char v144 = -73 * ((unint64_t)(v143 - (void)v195) >> 3);
  if (DWORD2(v155) >= 0x1389 && BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v157))
  {
    BlueFin::GlPeNavGnssKF::PackSkfMeas_RR(v5, v143);
    v143 += 56 * BlueFin::GlSetBase::Cnt(*((BlueFin::GlSetBase **)&v154 + 1));
    char v144 = -73 * ((unint64_t)(v143 - (void)v195) >> 3);
  }
  if (v144)
  {
    if (*((_DWORD *)&v195[7 * v144 - 1] - 1) == -1)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 2689, "PackSkfMeas", (char)"cNbTotalKfMeas==0 || pastSkfMeas[cNbTotalKfMeas-1].eMeasType != SKF_MEAS_INVALID");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 2689, "cNbTotalKfMeas==0 || pastSkfMeas[cNbTotalKfMeas-1].eMeasType != SKF_MEAS_INVALID");
    }
    if (v144 >= 101)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 2690, "PackSkfMeas", (char)"cNbTotalKfMeas <= cMaxNumSkfMeas");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 2690, "cNbTotalKfMeas <= cMaxNumSkfMeas");
    }
  }
  unsigned __int8 v116 = -73 * ((unint64_t)(v143 - (void)v195) >> 3);
LABEL_201:
  *(unsigned char *)(v5 + 1560) = v116;
  BlueFin::GlPeNavUtil::ComputeL5BiasFromMeas(v5, (float *)(v5 + 12092), (float *)(v5 + 12096), (double *)(v5 + 12104), (uint64_t *)(v5 + *(void *)(*(void *)v5 - 24) + 264), **(_DWORD **)(v5 + 2240), (uint64_t)v195, v116);
  if ((v155 & 1) != 0 || !*(unsigned char *)(*((void *)&v156 + 1) + 28)) {
    BlueFin::GlPeNavGnssKF::ComputePositionMain(v5, *((uint64_t *)&v160 + 1), HIDWORD(v155), v154, (uint64_t)v195, v145, v146, v147, v150, v151, v152, v153, v154, v155, v156, v157, (uint64_t)v158, v159, v160,
  }
      v148,
      v149,
      v161,
      v162[0],
      v162[1],
      (int)v163,
      HIDWORD(v163),
      *(uint64_t *)v164,
      *(uint64_t *)&v164[8],
      *(uint64_t *)&v164[16],
      *(uint64_t *)&v164[24],
      *(uint64_t *)&v164[32],
      v165,
      *((uint64_t *)&v165 + 1),
      v166,
      v167,
      v168,
      v169,
      v170,
      (int)v171,
      HIDWORD(v171),
      *(uint64_t *)v172,
      *(uint64_t *)&v172[8],
      *(uint64_t *)&v172[16],
      *(uint64_t *)&v172[24],
      *(uint64_t *)&v172[32],
      *(uint64_t *)&v172[40],
      *(uint64_t *)&v172[48],
      *(uint64_t *)&v172[56],
      *(uint64_t *)&v172[64],
      *(long long *)&v172[72],
      v173,
      v174,
      v175,
      v176,
      v177,
      v178,
      v179,
      v180);
  else {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, 9);
  }
}

void BlueFin::GlPeNavGnssKF::ComputePositionMain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11, unint64_t a12, long long a13, long long a14, long long a15, long long a16, uint64_t a17, long long a18, long long a19, int32x4_t a20,int32x4_t a21,uint64_t a22,char a23,int a24,int a25,unsigned int a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,long long a36,uint64_t a37,const void *a38,int a39,unsigned int a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,long long a50,unint64_t a51,char *a52,long long a53,long long a54,long long a55,long long a56,long long a57,long long a58)
{
  uint64_t v58 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v582 = v59;
  uint64_t vars8 = v60;
  int v578 = v61;
  uint64_t v62 = v58;
  STACK[0x1D98] = *MEMORY[0x263EF8340];
  uint64_t v588 = v63;
  if ((*(unsigned char *)(v63 + 1) & 0x40) != 0) {
    goto LABEL_69;
  }
  uint64_t v64 = *(void *)(v58 + 40);
  double v65 = *(double *)(*(void *)(v64 + 16) + 16);
  if (*(unsigned char *)(v58 + 26)) {
    double v65 = v65 + *(double *)(*(void *)(v64 + 32) + 32);
  }
  if (v65 > 6.25) {
    goto LABEL_69;
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1740], (unsigned int *)&STACK[0x174C], 0x13u, (const void **)(v58 + *(void *)(*(void *)v58 - 24) + 352));
  unsigned int v66 = 0;
  int v67 = (_DWORD *)(STACK[0x1740] + 4 * LOBYTE(STACK[0x1748]) - 4);
  do
  {
    if (*v67)
    {
      unsigned int v68 = *v67 - (((*v67 >> 2) & 0x9249249) + ((*v67 >> 1) & 0x5B6DB6DB));
      unsigned int v66 = ((v68 + (v68 >> 3)) & 0xC71C71C7) + v66 - 63 * (((v68 + (v68 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v67;
  }
  while ((unint64_t)v67 >= STACK[0x1740]);
  if (v66 < 5u) {
    goto LABEL_69;
  }
  if (!(int)(float)((float)(*(unsigned int (**)(uint64_t))(*(void *)v62 + 64))(v62)
                   / (float)(*(float *)(v62 + 2184) * 1000.0)))
    goto LABEL_69;
  for (uint64_t i = 0; i != 1092; i += 12)
  {
    uint64_t v70 = (char *)&STACK[0x760] + i;
    *uint64_t v70 = 0;
    *((_DWORD *)v70 + 1) = -1;
    *((_WORD *)v70 + 4) = 575;
  }
  LOBYTE(a50) = STACK[0x1748];
  memcpy((char *)&a50 + 8, (const void *)STACK[0x1740], 4 * a50);
  WORD1(a50) = 0;
  BYTE1(a50) = 0;
  DWORD1(a50) = DWORD2(a50);
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a50);
  if (BYTE1(a50) == a50) {
    goto LABEL_69;
  }
  LOBYTE(v71) = 0;
  while (1)
  {
    unint64_t v72 = WORD1(a50);
    if (WORD1(a50) >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    int v73 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(a50);
    char v74 = *v73;
    LODWORD(v73) = v73[1];
    LOBYTE(STACK[0x1228]) = v74;
    LODWORD(STACK[0x122C]) = v73;
    LOWORD(STACK[0x1230]) = v72;
    unint64_t v75 = v72 >> 5;
    unint64_t v76 = *(unsigned int *)(*(void *)(*(void *)(v62 + 8) + 8) + 4 * (v72 >> 5));
    char v77 = v72 & 0x1F;
    if (((v76 >> v77) & 1) == 0) {
      goto LABEL_51;
    }
    STACK[0x2C0] = (unint64_t)&STACK[0x2CC];
    LOBYTE(STACK[0x2C8]) = 19;
    *(_OWORD *)&STACK[0x2CC] = 0u;
    *(_OWORD *)&STACK[0x2DC] = 0u;
    *(_OWORD *)&STACK[0x2EC] = 0u;
    *(_OWORD *)&STACK[0x2FC] = 0u;
    *(_OWORD *)&STACK[0x308] = 0u;
    *((_DWORD *)&STACK[0x2CC] + v75) |= 1 << v77;
    uint64_t v78 = v62 + *(void *)(*(void *)v62 - 24);
    a11 = *(_OWORD *)(v78 + 8);
    a12 = *(void *)(v78 + 24);
    BlueFin::GlPeNavUtil::ComputeRrateResidVec(v62, (uint64_t)&STACK[0x2C0]);
    unint64_t v80 = STACK[0x2C0];
    if (!*(_DWORD *)STACK[0x2C0])
    {
      unint64_t v81 = LOBYTE(STACK[0x2C8]);
      if (v81 < 2) {
        goto LABEL_55;
      }
      if (!*(_DWORD *)(v80 + 4)) {
        break;
      }
    }
LABEL_24:
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v62 + 8), (const BlueFin::GlSignalId *)&STACK[0x1228], 0, 0);
    uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v62 + 8), (const BlueFin::GlSignalId *)&STACK[0x1228], 0);
    int v86 = *((_DWORD *)MeMeas + 5);
    if (v86 == 4)
    {
      if ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) >= 2) {
        double v87 = 5.0;
      }
      else {
        double v87 = 2.0;
      }
      BOOL v88 = 1;
    }
    else
    {
      double v87 = 2.0;
      if (v86 <= 2)
      {
        if ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) > 4)
        {
          BOOL v88 = 0;
        }
        else
        {
          unsigned int v89 = PeMeas;
          char IsPRValidForNav = BlueFin::stPeSigMeasKF::IsPRValidForNav(PeMeas);
          if (*((__int16 *)v89 + 39) > 28) {
            char v91 = 1;
          }
          else {
            char v91 = IsPRValidForNav;
          }
          BOOL v88 = (v91 & 1) == 0
             && sqrt(*(double *)(v62 + *(void *)(*(void *)v62 - 24) + 112)* *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 112)+ *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 104)* *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 104)) > 0.5;
        }
      }
      else
      {
        BOOL v88 = 1;
      }
    }
    int v92 = LOBYTE(STACK[0x1228]);
    unsigned int v93 = v92 - 76;
    if ((v92 + 122) >= 5u && (v92 - 76) >= 5u) {
      double v95 = v87;
    }
    else {
      double v95 = 10.0;
    }
    if (v88 || v93 <= 0x3E && ((1 << v93) & 0x7C0000000000001FLL) != 0) {
      double v96 = v95 * fabs(*(double *)(STACK[0x1290] + 8));
    }
    else {
      double v96 = fabs(*(double *)(STACK[0x1290] + 8));
    }
    *((double *)&STACK[0x1A60] + v71) = v96;
    char v97 = (unint64_t *)((char *)&STACK[0x760] + 12 * v71);
    if (v97 != &STACK[0x1228])
    {
      *(unsigned char *)char v97 = v92;
      unsigned int v98 = (char *)&STACK[0x760] + 12 * v71;
      *((_DWORD *)v98 + 1) = STACK[0x122C];
      *((_WORD *)v98 + 4) = STACK[0x1230];
    }
    LOBYTE(v71) = v71 + 1;
LABEL_51:
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a50);
    if (BYTE1(a50) == a50) {
      goto LABEL_55;
    }
  }
  uint64_t v82 = 2;
  while (v81 != v82)
  {
    if (*(_DWORD *)(v80 + 4 * v82++))
    {
      if (v82 - 1 >= v81) {
        break;
      }
      goto LABEL_24;
    }
  }
LABEL_55:
  if (v71 >= 5u)
  {
    BlueFin::GlSortDoubles((uint64_t)&STACK[0x1A60], (const double *)v71, &STACK[0x1290], v79);
    uint64_t v99 = *(void *)(v62 + 2248);
    int v100 = *(_DWORD *)(v99 + 16);
    if (v100 == 2)
    {
      double v101 = *((double *)&STACK[0x1A60] + LOBYTE(STACK[0x1293])) * 4.0;
LABEL_59:
      double v102 = 10.0;
      if (!*(unsigned char *)(v99 + 1805)) {
        double v102 = 20.0;
      }
    }
    else
    {
      double v101 = *((double *)&STACK[0x1A60] + LOBYTE(STACK[0x1293])) * 4.0;
      double v102 = 20.0;
      if (v100 == 3) {
        goto LABEL_59;
      }
    }
    uint64_t v71 = v71;
    if (v102 >= v101) {
      double v103 = v102;
    }
    else {
      double v103 = v101;
    }
    float v104 = &STACK[0x1290];
    do
    {
      unsigned int v106 = *(unsigned __int8 *)v104;
      float v104 = (unint64_t *)((char *)v104 + 1);
      unsigned int v105 = v106;
      if (*((double *)&STACK[0x1A60] + v106) > v103)
      {
        int v107 = (char *)&STACK[0x760] + 12 * v105;
        BlueFin::GlSetBase::Remove(v62 + 352 + *(void *)(*(void *)v62 - 24), *((__int16 *)v107 + 4));
        BlueFin::GlSetBase::Remove(v62 + 264 + *(void *)(*(void *)v62 - 24), *((__int16 *)v107 + 4));
        uint64_t v108 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v62 + 8) + 19176), (uint64_t)v107);
        if (v108) {
          *(_WORD *)(v108 + 448) = 8481;
        }
      }
      --v71;
    }
    while (v71);
  }
LABEL_69:
  *(_OWORD *)&STACK[0x4D0] = 0uLL;
  LODWORD(STACK[0x4FC]) = -1;
  *(_OWORD *)&STACK[0x4E0] = xmmword_263BB9FD0;
  LOWORD(STACK[0x500]) = 0;
  LOBYTE(STACK[0x502]) = 0;
  LOBYTE(STACK[0x4F0]) = 0;
  LODWORD(STACK[0x4F4]) = -1;
  LOWORD(STACK[0x4F8]) = 575;
  if (*(unsigned char *)(*(void *)(v62 + 2248) + 1989))
  {
    *(_OWORD *)&STACK[0x4D0] = *(_OWORD *)(v62 + 2672);
    LODWORD(STACK[0x4FC]) = 3;
    LODWORD(STACK[0x4E0]) = **(_DWORD **)(v62 + 8);
    LOBYTE(STACK[0x500]) = 1;
  }
  if ((*(unsigned char *)(v588 + 1) & 0x40) != 0 && BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)v62))
  {
    STACK[0x760] = 0;
    STACK[0x1290] = 0;
    if (BlueFin::GlPeAltMgr::GetExtAlt(*(uint64_t **)(v62 + 2264), (double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), (double *)&STACK[0x760], (double *)&STACK[0x1290]))
    {
      unint64_t v109 = STACK[0x1290];
      STACK[0x4D0] = STACK[0x760];
      STACK[0x4D8] = v109;
      LODWORD(STACK[0x4FC]) = 3;
      LODWORD(STACK[0x4E0]) = **(_DWORD **)(v62 + 8);
      LOBYTE(STACK[0x500]) = 1;
    }
  }
  BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&STACK[0x2C0]);
  a50 = 0uLL;
  a51 = 0;
  a52 = (char *)&a53 + 4;
  LOBYTE(a53) = 19;
  *(long long *)((char *)&a53 + 4) = 0u;
  *(long long *)((char *)&a54 + 4) = 0u;
  *(long long *)((char *)&a55 + 4) = 0u;
  *(long long *)((char *)&a56 + 4) = 0u;
  *(long long *)((char *)&a57 + 4) = 0u;
  int32x4_t v110 = vdupq_n_s32(0x43C80000u);
  a58 = 0u;
  *(int32x4_t *)&STACK[0x2A0] = v110;
  *(int32x4_t *)&STACK[0x2B0] = v110;
  BlueFin::GlPeSubsetsKf::GlPeSubsetsKf(&STACK[0x760]);
  v571 = (_OWORD *)(v62 + 2872);
  if (!*(unsigned char *)(v62 + 1560))
  {
    uint64_t v121 = 0;
    goto LABEL_130;
  }
  STACK[0x1A60] = (unint64_t)&STACK[0x1A6C];
  LOBYTE(STACK[0x1A68]) = 19;
  *(_OWORD *)&STACK[0x1A6C] = 0u;
  *(_OWORD *)&STACK[0x1A7C] = 0u;
  *(_OWORD *)&STACK[0x1A8C] = 0u;
  *(_OWORD *)&STACK[0x1A9C] = 0u;
  *(_OWORD *)&STACK[0x1AA8] = 0u;
  BlueFin::GlPeNavGnssKF::GetMeasSigIdSetForLsq(v62, v582, (BlueFin::GlSetBase *)&STACK[0x1A60], 1, 16);
  STACK[0x1740] = (unint64_t)&STACK[0x174C];
  LOBYTE(STACK[0x1748]) = 19;
  *(_OWORD *)&STACK[0x174C] = 0u;
  *(_OWORD *)&STACK[0x175C] = 0u;
  *(_OWORD *)&STACK[0x176C] = 0u;
  *(_OWORD *)&STACK[0x177C] = 0u;
  *(_OWORD *)&STACK[0x1788] = 0u;
  BlueFin::GlPeNavGnssKF::GetMeasSigIdSetForLsq(v62, v582, (BlueFin::GlSetBase *)&STACK[0x1740], 0, 16);
  if (LOBYTE(STACK[0x500])) {
    int v111 = 388;
  }
  else {
    int v111 = 384;
  }
  STACK[0x1230] = 0;
  STACK[0x1228] = 0;
  STACK[0x1238] = 0;
  uint64_t v112 = *(void *)(*(void *)(v62 + 2256) + 136);
  if (!v112
    || !*(unsigned char *)(v112 + 3008)
    || *(double *)(v112 + 3040) * *(double *)(v112 + 3040) + *(double *)(v112 + 3048) * *(double *)(v112 + 3048) >= 160000.0)
  {
    int v122 = 0;
    double v117 = 0.0;
    goto LABEL_87;
  }
  uint64_t v113 = *(void *)(v62 + 4792);
  unint64_t v114 = *(void *)(v113 + 3016);
  unint64_t v115 = *(void *)(v113 + 3024);
  STACK[0x1228] = v114;
  STACK[0x1230] = v115;
  unint64_t v116 = *(void *)(v113 + 3032);
  STACK[0x1238] = v116;
  double v117 = *(double *)(v113 + 3048);
  LODWORD(v113) = *(_DWORD *)(v113 + 3072);
  LOBYTE(a11) = 1;
  LOWORD(a16) = 0;
  *((void *)&a11 + 1) = v114;
  a12 = v115;
  *(void *)&a13 = v116;
  *((double *)&a13 + 1) = v117;
  *(double *)&a14 = v117;
  *(long long *)((char *)&a14 + 8) = 0uLL;
  DWORD2(a15) = v113;
  if ((int)v113 >= 2)
  {
    bzero((void *)STACK[0x1A60], ((4 * LOBYTE(STACK[0x1A68]) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    BlueFin::GlPeNavGnssKF::GetMeasSigIdSetForLsq(v62, v582, (BlueFin::GlSetBase *)&STACK[0x1A60], 1, 14);
  }
  uint64_t v118 = v62 + *(void *)(*(void *)v62 - 24);
  unint64_t v119 = *(void *)(v118 + 88);
  int v120 = **(_DWORD **)(v62 + 2240);
  *(_OWORD *)&STACK[0x1298] = *(_OWORD *)(v62 + 8);
  STACK[0x1290] = (unint64_t)&STACK[0x760];
  STACK[0x12A8] = (unint64_t)&STACK[0x4D0];
  STACK[0x12B8] = 0;
  STACK[0x12B0] = 0;
  LODWORD(STACK[0x12C0]) = v111;
  *(_OWORD *)&STACK[0x12D0] = *(_OWORD *)(v118 + 8);
  STACK[0x12E0] = *(void *)(v118 + 24);
  STACK[0x12E8] = v119;
  LODWORD(STACK[0x12F0]) = v120;
  STACK[0x12F8] = (unint64_t)&STACK[0x1304];
  LOBYTE(STACK[0x1300]) = 8;
  *(_OWORD *)&STACK[0x1314] = 0u;
  *(_OWORD *)&STACK[0x1304] = 0u;
  STACK[0x12C8] = (unint64_t)&a11;
  BlueFin::GlPeSubsetsKf::GlPeSubsetsKf(&STACK[0x760]);
  BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)&STACK[0x1290], (uint64_t)&STACK[0x1A60], 3, 1, 0, 0);
  uint64_t v121 = (long long *)BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)&STACK[0x760], (const BlueFin::GlSignalIdSet *)&STACK[0x1A60]);
  if (v121)
  {
    BlueFin::stSubset::operator=((uint64_t)&a50, (uint64_t)v121);
    int v122 = 0;
    uint64_t v123 = *(void *)(v62 + 2256);
  }
  else
  {
    uint64_t v123 = *(void *)(v62 + 2256);
    uint64_t v380 = *(void *)(v123 + 136);
    if (v380) {
      LODWORD(v380) = *(unsigned char *)(v380 + 3008)
    }
                   && *(double *)(v380 + 3040) * *(double *)(v380 + 3040)
                    + *(double *)(v380 + 3048) * *(double *)(v380 + 3048) < 160000.0
                   && (*(_DWORD *)(v380 + 3072) - 2) < 4;
    int v122 = v380 ^ 1;
  }
  if (*(unsigned char *)(v123 + 128))
  {
    uint64_t v560 = *(void *)(v123 + 136);
    if (v560)
    {
      if (*(unsigned char *)(v560 + 3008)
        && *(double *)(v560 + 3040) * *(double *)(v560 + 3040) + *(double *)(v560 + 3048) * *(double *)(v560 + 3048) < 160000.0
        && (*(_DWORD *)(v560 + 3072) - 2) <= 3)
      {
        *(void *)(v123 + 64) = v114;
        *(void *)(v123 + 72) = v115;
        *(void *)(v123 + 80) = v116;
        *(double *)(v123 + 104) = v117;
        *(double *)(v123 + 112) = v117;
        *(void *)(v123 + 120) = 0;
        *(void *)(v123 + 88) = *(unsigned int *)(v62 + *(void *)(*(void *)v62 - 24) + 200);
      }
    }
  }
  if (v121) {
    goto LABEL_100;
  }
LABEL_87:
  BlueFin::GlPeSubsetsKf::GlPeSubsetsKf(&STACK[0x760]);
  uint64_t v124 = v62 + *(void *)(*(void *)v62 - 24);
  unint64_t v125 = *(void *)(v124 + 88);
  int v126 = **(_DWORD **)(v62 + 2240);
  *(_OWORD *)&STACK[0x1298] = *(_OWORD *)(v62 + 8);
  STACK[0x1290] = (unint64_t)&STACK[0x760];
  STACK[0x12A8] = (unint64_t)&STACK[0x4D0];
  STACK[0x12B8] = 0;
  STACK[0x12B0] = 0;
  LODWORD(STACK[0x12C0]) = v111;
  STACK[0x12C8] = 0;
  *(_OWORD *)&STACK[0x12D0] = *(_OWORD *)(v124 + 8);
  STACK[0x12E0] = *(void *)(v124 + 24);
  STACK[0x12E8] = v125;
  LODWORD(STACK[0x12F0]) = v126;
  STACK[0x12F8] = (unint64_t)&STACK[0x1304];
  LOBYTE(STACK[0x1300]) = 8;
  *(_OWORD *)&STACK[0x1314] = 0u;
  *(_OWORD *)&STACK[0x1304] = 0u;
  if (!BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)v62)) {
    goto LABEL_97;
  }
  unsigned int v127 = 0;
  unint64_t v128 = (_DWORD *)(STACK[0x1A60] + 4 * LOBYTE(STACK[0x1A68]) - 4);
  do
  {
    if (*v128)
    {
      unsigned int v129 = *v128 - (((*v128 >> 2) & 0x9249249) + ((*v128 >> 1) & 0x5B6DB6DB));
      unsigned int v127 = ((v129 + (v129 >> 3)) & 0xC71C71C7) + v127 - 63 * (((v129 + (v129 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v128;
  }
  while ((unint64_t)v128 >= STACK[0x1A60]);
  if ((unsigned __int16)v127 < 6u)
  {
LABEL_97:
    BlueFin::GlPeLsqSubsets::RunLsqSubset((uint64_t *)&STACK[0x1290], (uint64_t)&STACK[0x1A60], 3, 1, 0, 0);
    uint64_t v121 = (long long *)BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)&STACK[0x760], (const BlueFin::GlSignalIdSet *)&STACK[0x1A60]);
    goto LABEL_98;
  }
  BlueFin::GlPeLsqSubsets::RunLsqSubsets((uint64_t)&STACK[0x1290], (BlueFin::GlSetBase *)&STACK[0x1A60], 1u, 0, 0);
  unint64_t BestFitResidSubset = BlueFin::GlPeSubsets::FindBestFitResidSubset((BlueFin::GlPeSubsets *)&STACK[0x760]);
  unint64_t v131 = BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)&STACK[0x760], (const BlueFin::GlSignalIdSet *)&STACK[0x1A60]);
  uint64_t v121 = (long long *)v131;
  if (!v131 || !BestFitResidSubset)
  {
LABEL_98:
    if (v121) {
      goto LABEL_99;
    }
    goto LABEL_100;
  }
  if ((float)(*(float *)(v131 + 112) * *(float *)(v131 + 156)) > (float)(*(float *)(BestFitResidSubset + 112)
                                                                        * *(float *)(BestFitResidSubset + 156)))
    uint64_t v121 = (long long *)BestFitResidSubset;
LABEL_99:
  BlueFin::stSubset::operator=((uint64_t)&a50, (uint64_t)v121);
LABEL_100:
  if (v122 && v121)
  {
    uint64_t v132 = *(void *)(*(void *)(v62 + 2256) + 136);
    if (v132)
    {
      if (*(unsigned char *)(v132 + 3008))
      {
        if (*(double *)(v132 + 3040) * *(double *)(v132 + 3040) + *(double *)(v132 + 3048) * *(double *)(v132 + 3048) < 160000.0)
        {
          BlueFin::lla2ned((double *)v121, (double *)&STACK[0x1228], 0, (double *)&STACK[0x1290]);
          float v133 = sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298]+ *(double *)&STACK[0x1290] * *(double *)&STACK[0x1290]);
          float v134 = (float)(*((float *)v121 + 32) * *((float *)v121 + 32)) + v117 * v117;
          if (v134 * 9.0 < (float)(v133 * v133)) {
            *(_WORD *)(v62 + 13194) = 257;
          }
        }
      }
    }
LABEL_109:
    if (BlueFin::GlPeNavGnssKF::RunDeals(v62, (BlueFin::GlSetBase *)&STACK[0x1740]))
    {
      if (BlueFin::GlPeNavGnssMotion::IsNotTurning((BlueFin::GlPeNavGnssMotion *)(v62 + 4792), v135)
        && (*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) >= 2)
      {
        float v136 = *(float *)(v62 + 2936) * 0.0174532925;
        float v137 = *(double *)(v62 + 2664);
        for (double j = v136 - v137; j > 3.14159265; double j = j + -6.28318531)
          ;
        for (; j <= -3.14159265; double j = j + 6.28318531)
          ;
        if (j < 0.0) {
          double j = -j;
        }
        float v139 = j;
        if (v139 >= 0.785398163)
        {
          float v140 = *(float *)(v62 + 2940) * 0.0174532925;
          if (v140 < v139) {
            float v140 = v139;
          }
          float v141 = v140 * 57.2957795;
          *(float *)(v62 + 2940) = v141;
        }
      }
      unint64_t v142 = *((void *)v121 + 2);
      int v143 = **(_DWORD **)(v62 + 8);
      int v144 = STACK[0x2A0];
      int v145 = STACK[0x2A4];
      float v146 = *(double *)(v62 + 2904);
      float32x2_t v147 = vcvt_f32_f64(*(float64x2_t *)(v62 + 2912));
      float v148 = sqrtf((float)(v146 * v146) + vmul_f32(v147, v147).f32[0]);
      double v149 = *((float *)v121 + 31);
      float v150 = fmin(*(float *)&STACK[0x2B0] * 0.5, 50.0);
      double v151 = *(float *)(v62 + 2896);
      int v152 = *(_DWORD *)(v62 + 2928);
      float v153 = *(float *)(v62 + 2936) * 0.0174532925;
      float v572 = v153;
      v568 = (BlueFin::GlPeNavGnssResidMon *)v147;
      if (*(unsigned char *)(v62 + 2932)) {
        float v154 = *(float *)(v62 + 2940) * 0.0174532925;
      }
      else {
        float v154 = 3.1416;
      }
      float v566 = v154;
      *(_OWORD *)&STACK[0x2C8] = *v121;
      STACK[0x2D8] = v142;
      BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)&STACK[0x2C0]);
      LODWORD(STACK[0x310]) = v144;
      LODWORD(STACK[0x314]) = v145;
      *(double *)&STACK[0x318] = v149;
      *(float *)&STACK[0x320] = v150;
      *(_OWORD *)&STACK[0x328] = *v571;
      STACK[0x338] = *(void *)(v62 + 2888);
      *(float *)&STACK[0x344] = v146;
      *(float *)&STACK[0x340] = v148;
      STACK[0x348] = (unint64_t)v568;
      *(double *)&STACK[0x358] = v151;
      LODWORD(STACK[0x360]) = v152;
      STACK[0x368] = 0x3FF0000000000000;
      LODWORD(STACK[0x388]) = v143;
      LODWORD(STACK[0x38C]) = 1;
      *(float *)&STACK[0x370] = v572;
      *(float *)&STACK[0x378] = v566;
      STACK[0x37C] = (unint64_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v62 + 2944)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D34uLL)));
      LODWORD(STACK[0x3B8]) = v144;
      LODWORD(STACK[0x3BC]) = v145;
      LOWORD(STACK[0x3B0]) = 257;
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1290], (unsigned int *)&STACK[0x129C], 0x13u, (const void **)v121 + 3);
      BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x3C8], (uint64_t)&STACK[0x1290]);
      long long v168 = *(_OWORD *)&STACK[0x12AC];
      *(_OWORD *)&STACK[0x3D4] = *(_OWORD *)&STACK[0x129C];
      long long v169 = *(_OWORD *)&STACK[0x12BC];
      *(_OWORD *)&STACK[0x404] = *(_OWORD *)&STACK[0x12CC];
      *(_OWORD *)&STACK[0x3F4] = v169;
      *(_OWORD *)&STACK[0x3E4] = v168;
      *(_OWORD *)&STACK[0x410] = *(_OWORD *)&STACK[0x12D8];
      uint64_t v170 = *(void *)v62;
      uint64_t v171 = v62 + *(void *)(*(void *)v62 - 24);
      if (*(float *)(v171 + 96) > 29979.2458)
      {
        float v172 = *(float *)&STACK[0x2B0];
        if (*(float *)&STACK[0x2B0] < 149896.229)
        {
          *(double *)(v171 + 88) = *((float *)v121 + 31);
          *(float *)(v62 + *(void *)(v170 - 24) + 96) = v172 * 0.5;
        }
      }
    }
    else
    {
      int v155 = **(_DWORD **)(v62 + 8);
      int v157 = *((_DWORD *)v121 + 32);
      int v156 = *((_DWORD *)v121 + 33);
      float v158 = *(double *)(v62 + 2904);
      *(double *)&unint64_t v159 = *((float *)v121 + 31);
      float v160 = fmin(*((float *)v121 + 36) * 0.5, 50.0);
      *(double *)&unint64_t v161 = *(float *)(v62 + 2896);
      int v162 = *(_DWORD *)(v62 + 2928);
      float v163 = *(float *)(v62 + 2936) * 0.0174532925;
      *(_OWORD *)&STACK[0x2C8] = *v121;
      STACK[0x2D8] = *((void *)v121 + 2);
      BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)&STACK[0x2C0]);
      LODWORD(STACK[0x310]) = v157;
      LODWORD(STACK[0x314]) = v156;
      STACK[0x318] = v159;
      *(float *)&STACK[0x320] = v160;
      *(_OWORD *)&STACK[0x328] = *v571;
      STACK[0x338] = *(void *)(v62 + 2888);
      float32x2_t v164 = vcvt_f32_f64(*(float64x2_t *)(v62 + 2912));
      *(float *)&STACK[0x344] = v158;
      *(float *)&STACK[0x340] = sqrtf((float)(v158 * v158) + vmul_f32(v164, v164).f32[0]);
      STACK[0x348] = (unint64_t)v164;
      STACK[0x358] = v161;
      LODWORD(STACK[0x360]) = v162;
      STACK[0x368] = 0x3FF0000000000000;
      LODWORD(STACK[0x38C]) = 1;
      *(float *)&STACK[0x370] = v163;
      LODWORD(STACK[0x388]) = v155;
      LODWORD(STACK[0x378]) = 1078530011;
      STACK[0x37C] = (unint64_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v62 + 2944)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D34uLL)));
      LODWORD(STACK[0x3B8]) = v157;
      LODWORD(STACK[0x3BC]) = v156;
      LOWORD(STACK[0x3B0]) = 0;
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1290], (unsigned int *)&STACK[0x129C], 0x13u, (const void **)v121 + 3);
      BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x3C8], (uint64_t)&STACK[0x1290]);
      long long v165 = *(_OWORD *)&STACK[0x129C];
      *(_OWORD *)&STACK[0x3E4] = *(_OWORD *)&STACK[0x12AC];
      long long v166 = *(_OWORD *)&STACK[0x12CC];
      *(_OWORD *)&STACK[0x3F4] = *(_OWORD *)&STACK[0x12BC];
      *(_OWORD *)&STACK[0x404] = v166;
      *(_OWORD *)&STACK[0x3D4] = v165;
      *(_OWORD *)&STACK[0x410] = *(_OWORD *)&STACK[0x12D8];
    }
  }
  else
  {
    if (v121) {
      goto LABEL_109;
    }
    *(_OWORD *)&STACK[0x1290] = 0uLL;
    STACK[0x12A0] = 0;
    STACK[0x12A8] = (unint64_t)&STACK[0x12B4];
    LOBYTE(STACK[0x12B0]) = 19;
    *(_OWORD *)&STACK[0x12B4] = 0u;
    *(_OWORD *)&STACK[0x12C4] = 0u;
    *(_OWORD *)&STACK[0x12D4] = 0u;
    *(_OWORD *)&STACK[0x12E4] = 0u;
    *(_OWORD *)&STACK[0x12F4] = 0u;
    int32x4_t v167 = vdupq_n_s32(0x43C80000u);
    *(_OWORD *)&STACK[0x1300] = 0u;
    *(int32x4_t *)&STACK[0x1310] = v167;
    *(int32x4_t *)&STACK[0x1320] = v167;
    BlueFin::stSubset::operator=((uint64_t)&a50, (uint64_t)&STACK[0x1290]);
  }
LABEL_130:
  if ((*(unsigned char *)(v588 + 2) & 0x80) != 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v62 + 264))(v62) & 1) == 0)
  {
    *(unsigned char *)(v62 + 2200) = 1;
    *(_DWORD *)(v62 + 2204) = *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200);
  }
  if (BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)v62))
  {
    int v173 = *(_DWORD *)(*(void *)(v62 + 2248) + 8);
    if (v173 == 10) {
      goto LABEL_135;
    }
    unsigned int v180 = v173 - 1;
    if (v180 <= 5 && (*(_DWORD *)v588 & 0x4000) != 0)
    {
      if (v180 <= 1 && BlueFin::GlPeNavGnssKF::TrustPdrPropagation((BlueFin::GlPeNavGnssKF *)v62))
      {
LABEL_142:
        BOOL v177 = 0;
      }
      else
      {
LABEL_135:
        uint64_t v174 = v62 + *(void *)(*(void *)v62 - 24);
        if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v174 + 264))) {
          *(_DWORD *)(v62 + 2188) = *(_DWORD *)(v174 + 200);
        }
        unint64_t v175 = *(void *)(v62 + 16);
        LODWORD(STACK[0x1A60]) = 0;
        STACK[0x1A68] = (unint64_t)&STACK[0x1A74];
        LOBYTE(STACK[0x1A70]) = 8;
        *(_OWORD *)&STACK[0x1A74] = 0u;
        *(_OWORD *)&STACK[0x1A84] = 0u;
        *(_OWORD *)&STACK[0x1A98] = xmmword_263BBA380;
        STACK[0x1AA8] = (unint64_t)vdup_n_s32(0x42C60000u);
        LODWORD(STACK[0x1AB0]) = 1120272384;
        BlueFin::stDops::stDops((uint64_t)&STACK[0x1290], (uint64_t)&STACK[0x1A60]);
        STACK[0x12E8] = v175;
        uint64_t v176 = **(unsigned int **)(v62 + 8);
        BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&a52, (uint64_t)&a11);
        STACK[0x1228] = *(void *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
        LODWORD(STACK[0x630]) = **(_DWORD **)(v62 + 2240);
        LODWORD(STACK[0x708]) = 0;
        BOOL v562 = 0;
        BlueFin::GlPeDops::GetDops((uint64_t)&STACK[0x1290], v176);
        if (*(float *)&STACK[0x2A0] >= 75.0 || *(float *)&STACK[0x177C] >= 15.0)
        {
          BlueFin::GlPeMsmtMgr::SetPrCode(*(void *)(v62 + 8), v62 + *(void *)(*(void *)v62 - 24) + 264, 25);
          BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v62 + 8), v62 + *(void *)(*(void *)v62 - 24) + 352, 25);
          uint64_t v178 = *(void *)v62;
          bzero(*(void **)(v62 + *(void *)(*(void *)v62 - 24) + 264), ((4 * *(unsigned __int8 *)(v62 + *(void *)(*(void *)v62 - 24) + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL)+ 4);
          bzero(*(void **)(v62 + *(void *)(v178 - 24) + 352), ((4 * *(unsigned __int8 *)(v62 + *(void *)(v178 - 24) + 360) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          goto LABEL_142;
        }
        if (*(float *)&STACK[0x177C] >= 3.0) {
          goto LABEL_142;
        }
        BOOL v177 = 1;
      }
LABEL_143:
      BOOL v179 = v177;
      goto LABEL_154;
    }
  }
  uint64_t v181 = *(void *)(v62 + 2272);
  if (*(__int16 *)(v181 + 2) < 1)
  {
LABEL_152:
    BOOL v177 = 0;
    goto LABEL_153;
  }
  int v182 = *(_DWORD *)(*(void *)(v62 + 2248) + 8);
  if ((v182 - 1) < 2)
  {
    if (BlueFin::GlPeNavGnssKF::TrustPdrPropagation((BlueFin::GlPeNavGnssKF *)v62)) {
      goto LABEL_152;
    }
    int v366 = *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200);
    float v367 = (double)(v366 - *(_DWORD *)(v62 + 2188)) / 1000.0 + 30.0;
    if (v367 <= 150.0) {
      float v368 = (double)(v366 - *(_DWORD *)(v62 + 2188)) / 1000.0 + 30.0;
    }
    else {
      float v368 = 150.0;
    }
    double v369 = *(double *)(v181 + 72);
    int v370 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 80))(v62);
    BlueFin::lla2ned((double *)(*(void *)(v62 + 2272) + 16), (double *)&a50, 0, (double *)&STACK[0x1290]);
    if (*(float *)&STACK[0x2A0] * 0.5 <= v368)
    {
      double v376 = fmax(v369, 1.5) * (double)(v366 - v370) / 1000.0;
      double v377 = sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298]+ *(double *)&STACK[0x1290] * *(double *)&STACK[0x1290]);
      uint64_t v378 = *(void *)(v62 + 2272);
      BOOL v379 = *(__int16 *)(v378 + 2) >= 1 && *(unsigned __int8 *)(v378 + 45) == 0;
      BOOL v177 = v376 * 1.5 >= v377 && v379;
      uint64_t v371 = *(void *)v62;
    }
    else
    {
      BlueFin::GlPeMsmtMgr::SetPrCode(*(void *)(v62 + 8), v62 + *(void *)(*(void *)v62 - 24) + 264, 27);
      BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v62 + 8), v62 + *(void *)(*(void *)v62 - 24) + 352, 27);
      uint64_t v371 = *(void *)v62;
      uint64_t v372 = *(void *)v62;
      bzero(*(void **)(v62 + *(void *)(v371 - 24) + 264), ((4 * *(unsigned __int8 *)(v62 + *(void *)(v371 - 24) + 272) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(*(void **)(v62 + *(void *)(v372 - 24) + 352), ((4 * *(unsigned __int8 *)(v62 + *(void *)(v372 - 24) + 360) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      BOOL v177 = 0;
      *(unsigned char *)(v62 + 1560) = 0;
    }
    uint64_t v561 = v62 + *(void *)(v371 - 24);
    if (!BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v561 + 264)))
    {
      BOOL v179 = 0;
      *(_DWORD *)(v62 + 2188) = *(_DWORD *)(v561 + 200);
      goto LABEL_154;
    }
LABEL_153:
    BOOL v179 = 0;
    goto LABEL_154;
  }
  BOOL v177 = 0;
  if ((v182 - 3) > 3) {
    goto LABEL_143;
  }
  BOOL v179 = 0;
  if (!*(unsigned char *)(v181 + 45))
  {
    BlueFin::lla2ned((double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), (double *)&a50, 0, (double *)&STACK[0x1290]);
    BOOL v177 = 0;
    if (*(float *)&STACK[0x2A0] >= 100.0) {
      goto LABEL_143;
    }
    BOOL v179 = 0;
    if (sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298] + *(double *)&STACK[0x1290]
                                                                    * *(double *)&STACK[0x1290]) > *(float *)&STACK[0x2A0])
    {
      BOOL v179 = 0;
      BOOL v177 = (*(unsigned int (**)(uint64_t))(*(void *)v62 + 72))(v62) > 0x3A98;
    }
  }
LABEL_154:
  int v183 = *(unsigned __int8 *)(v62 + 26);
  *(_OWORD *)&STACK[0x12A0] = xmmword_263BBC570;
  STACK[0x1290] = (unint64_t)&STACK[0x12B0];
  STACK[0x1298] = (unint64_t)&STACK[0x1310];
  STACK[0x1310] = 0;
  STACK[0x1318] = (unint64_t)&STACK[0x12A8];
  uint64_t v184 = *(void *)(v62 + 40);
  if (v183) {
    uint64_t v185 = 1;
  }
  else {
    uint64_t v185 = 3;
  }
  double v186 = *(double *)(*(void *)(v184 + 8 * v185) + 8 * v185);
  if (v183) {
    uint64_t v187 = 3;
  }
  else {
    uint64_t v187 = 1;
  }
  double v188 = *(double *)(*(void *)(v184 + 8 * v187) + 8 * v187);
  BlueFin::lla2ned((double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), (double *)&a50, 0, (double *)&STACK[0x1A60]);
  float v189 = v186 + v188;
  float v190 = sqrt(*(double *)&STACK[0x1A68] * *(double *)&STACK[0x1A68] + *(double *)&STACK[0x1A60]
                                                                    * *(double *)&STACK[0x1A60])
       / sqrtf((float)(*(float *)&STACK[0x2A0] * *(float *)&STACK[0x2A0]) + v189);
  if (v190 <= 5.0 || !v177)
  {
    if (!v177
      || (*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) > 1
      || (BlueFin::lla2ned((double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), (double *)&a50, 0, (double *)&STACK[0x1A60]), double v192 = *(double *)&STACK[0x1A60], v193 = *(double *)&STACK[0x1A68], v194 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 72))(v62), v195 = sqrt(v193 * v193 + v192 * v192), (float)((float)v194 * 0.001) >= v195))
    {
      if (v179)
      {
        BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
        *(void *)(*(void *)(STACK[0x1298] + 8) + 56) = 0x3FF0000000000000;
        float v196 = *((float *)&a58 + 3) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
        float v197 = fmaxf(*(float *)&STACK[0x2B0], 50.0);
        BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 0, 1, 1, v196, (float)(v197 * v197));
      }
      if (v177)
      {
        *(_OWORD *)&STACK[0x1A60] = a50;
        STACK[0x1A70] = a51;
        BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
        *(void *)(*(void *)(STACK[0x1298] + 8) + 8 * v185) = 0x3FF0000000000000;
        BlueFin::lla2ned((double *)&STACK[0x1A60], (double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), 0, (double *)&a11);
        double v573 = *(double *)&a11;
        *(_OWORD *)&STACK[0x1740] = a11;
        STACK[0x1750] = a12;
        BlueFin::ned2hlu((long long *)&STACK[0x1740], (const BlueFin::Matrix *)(v62 + 1336), &a11);
        float v198 = fmaxf(*(float *)&STACK[0x2A0] * 0.5, 50.0);
        float v199 = v198 * v198;
        double v200 = *((double *)&a11 + 1);
        if (*(unsigned char *)(v62 + 26)) {
          double v200 = v573;
        }
        double v201 = v199;
        BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 0, 1, 1, v200, v199);
        BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
        *(void *)(*(void *)(STACK[0x1298] + 8) + 8 * v187) = 0x3FF0000000000000;
        BlueFin::lla2ned((double *)&STACK[0x1A60], (double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), 0, (double *)&STACK[0x1228]);
        STACK[0x1740] = STACK[0x1228];
        long long v574 = *(_OWORD *)&STACK[0x1230];
        *(_OWORD *)&STACK[0x1748] = *(_OWORD *)&STACK[0x1230];
        BlueFin::ned2hlu((long long *)&STACK[0x1740], (const BlueFin::Matrix *)(v62 + 1336), &STACK[0x1228]);
        double v202 = *(double *)&STACK[0x1228];
        if (*(unsigned char *)(v62 + 26)) {
          double v202 = *(double *)&v574;
        }
        BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 0, 1, 1, v202, v201);
      }
    }
  }
  v569 = (BlueFin::GlPeNavGnssResidMon *)(v62 + 4880);
  BlueFin::GlPeNavGnssResidMon::UpdateRrate((BlueFin::GlPeNavGnssResidMon *)(v62 + 4880), (const BlueFin::GlPeNavUtil *)v62, (const BlueFin::GlSignalIdSet *)(v62 + *(void *)(*(void *)v62 - 24) + 352));
  if (!*(_DWORD *)(v62 + 4968))
  {
    uint64_t v204 = *(void *)(*(void *)v62 - 24);
    uint64_t v205 = **(unsigned int **)(v62 + 2240);
    char v206 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 192))(v62);
    BlueFin::GlPeNavGnssResidMon::UpdateRange(v569, (const BlueFin::GlPeNavUtil *)v62, (const BlueFin::GlSignalIdSet *)(v62 + v204 + 264), (const BlueFin::GlSignalIdSet *)(v62 + v204 + 264), v205, v206, 0);
  }
  BlueFin::GlPeNavGnssKF::AddProcessNoise((BlueFin::GlPeNavGnssKF *)v62, (uint64_t)&STACK[0x2C0], *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200), (const BlueFin::GlPeNavGnssState *)((*(_DWORD *)v588 >> 8) & 1), v121 != 0, v578, (*(_DWORD *)v588 & 0x30000) != 0, v203, v562);
  if (v578 && *(unsigned char *)(vars8 + 240))
  {
    *(_OWORD *)&STACK[0x12A0] = xmmword_263BBC570;
    STACK[0x1290] = (unint64_t)&STACK[0x12B0];
    STACK[0x1298] = (unint64_t)&STACK[0x1310];
    STACK[0x1310] = 0;
    STACK[0x1318] = (unint64_t)&STACK[0x12A8];
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
    int v207 = *(unsigned __int8 *)(v62 + 26);
    *(void *)(*(void *)(STACK[0x1298] + 8) + 16) = 0x3FF0000000000000;
    if (v207)
    {
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, *(double *)(vars8 + 104) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 104), (float)(*(float *)(vars8 + 132) * *(float *)(vars8 + 132)));
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
      *(void *)(*(void *)(STACK[0x1298] + 8) + 32) = 0x3FF0000000000000;
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, *(double *)(vars8 + 112) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 112), (float)(*(float *)(vars8 + 136) * *(float *)(vars8 + 136)));
    }
    else
    {
      float v208 = *(float *)(v62 + 1324);
      float v209 = 1.0;
      if (v208 < 0.0) {
        float v209 = -1.0;
      }
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, -(v208- v209* sqrt(*(double *)(vars8 + 112) * *(double *)(vars8 + 112) + *(double *)(vars8 + 104) * *(double *)(vars8 + 104))), (float)(*(float *)(vars8 + 128) * *(float *)(vars8 + 128)));
    }
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
    double v210 = *(double *)(vars8 + 120) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 120);
    if (!*(unsigned char *)(v62 + 26)) {
      double v210 = -v210;
    }
    double v211 = (float)(*(float *)(vars8 + 140) * *(float *)(vars8 + 140));
    *(void *)(*(void *)(STACK[0x1298] + 8) + 48) = 0x3FF0000000000000;
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, v210, v211);
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
    *(void *)(*(void *)(STACK[0x1298] + 8) + 64) = 0x3FF0000000000000;
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, *(double *)(vars8 + 152) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 152), (float)(*(float *)(vars8 + 160) * *(float *)(vars8 + 160)));
    if (!*(unsigned char *)(v62 + 26) && *(unsigned char *)(vars8 + 241))
    {
      float v212 = *(float *)(vars8 + 184);
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
      float v213 = v212 * v212;
      *(void *)(*(void *)(STACK[0x1298] + 8) + 32) = 0x3FF0000000000000;
      double v214 = *(float *)(vars8 + 176);
      for (double k = v214 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)v62);
            k > 3.14159265;
      for (; k <= -3.14159265; double k = k + 6.28318531)
        ;
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, k, v213);
    }
  }
  int32x2_t v216 = (_OWORD *)(v62 + *(void *)(*(void *)v62 - 24));
  BlueFin::GlSetBase::operator=(v62 + 13208, (uint64_t)v216 + 264);
  *(_OWORD *)(v62 + 13220) = *(_OWORD *)((char *)v216 + 276);
  long long v217 = *(_OWORD *)((char *)v216 + 292);
  long long v218 = *(_OWORD *)((char *)v216 + 308);
  long long v219 = *(_OWORD *)((char *)v216 + 324);
  *(_OWORD *)(v62 + 13280) = v216[21];
  *(_OWORD *)(v62 + 13268) = v219;
  *(_OWORD *)(v62 + 13252) = v218;
  *(_OWORD *)(v62 + 13236) = v217;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a38, &a40, 0x13u, (const void **)(v62 + *(void *)(*(void *)v62 - 24) + 352));
  uint64_t v220 = v62 + *(void *)(*(void *)v62 - 24);
  uint64_t v221 = *(void *)(v62 + 2256);
  unsigned int v222 = *(_DWORD *)(v221 + 92);
  unsigned int v223 = *(_DWORD *)(v220 + 200) - *(_DWORD *)(v221 + 88);
  a36 = *(_OWORD *)(v220 + 8);
  a37 = *(void *)(v220 + 24);
  unsigned int v224 = v223 >> 5;
  if (v222 > 4 || v224 > 0x752)
  {
    if (v224 >= 0x753) {
LABEL_210:
    }
      *(_DWORD *)(v221 + 92) = 12;
  }
  else
  {
    float v225 = *(float *)(v220 + 80);
    double v226 = *(double *)(v221 + 104);
    double v227 = *(double *)(v221 + 112);
    *(_OWORD *)&STACK[0x1A60] = *(_OWORD *)(v221 + 64);
    STACK[0x1A70] = *(void *)(v221 + 80);
    BlueFin::lla2ned((double *)&a36, (double *)&STACK[0x1A60], 0, (double *)&STACK[0x1290]);
    double v228 = sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298]+ *(double *)&STACK[0x1290] * *(double *)&STACK[0x1290]);
    double v229 = v225;
    if (v226 > v225) {
      double v229 = v226;
    }
    if (v229 < 200.0) {
      double v229 = 200.0;
    }
    if (v228 >= v229
      || v225 < 50.0
      && v228 > 50.0
      && v228 / sqrt(fmax((v226 * v226 + v227 * v227) * 0.5 + (float)(v225 * v225), 2.22044605e-16)) >= 1.5)
    {
      uint64_t v221 = *(void *)(v62 + 2256);
      goto LABEL_210;
    }
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a23, &a26, 0x13u, &a38);
  if ((*(unsigned char *)(v588 + 1) & 0x40) != 0)
  {
    if (*(unsigned char *)(v62 + 26))
    {
      __double2 v230 = __sincos_stret(*(float *)(v62 + *(void *)(*(void *)v62 - 24) + 176));
      *(double *)(v62 + 1336) = v230.__cosval;
      *(double *)(v62 + 1344) = v230.__sinval;
      *(void *)(v62 + 1352) = 0;
      *(double *)(v62 + 1368) = v230.__sinval;
      *(double *)(v62 + 1376) = -v230.__cosval;
      *(void *)(v62 + 1384) = 0;
      *(void *)(v62 + 1408) = 0;
      *(void *)(v62 + 1400) = 0;
      *(void *)(v62 + 1416) = 0xBFF0000000000000;
    }
    BOOL IsTunnelExitOrLeftRecently = BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExitOrLeftRecently((BlueFin::GlPeNavGnssKF *)v62, 0x4E20u);
    uint64_t v232 = *(void *)(v62 + 13304);
    if (*(unsigned char *)(v232 + 3216))
    {
      float v233 = *(float *)(v232 + 3200) * 0.017453;
      BOOL v234 = 1;
    }
    else
    {
      double v235 = *(double *)(v62 + 2664);
      int v236 = *(unsigned __int8 *)(v62 + 2720);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v62 + 56))(v62) <= 0x1E) {
        int v237 = 5;
      }
      else {
        int v237 = 7;
      }
      uint64_t v238 = v62 + *(void *)(*(void *)v62 - 24);
      int v239 = *(unsigned __int8 *)(v238 + 240);
      unint64_t v240 = *(void *)(v238 + 24);
      STACK[0x1290] = 0;
      if (v239) {
        v237 |= 0x10u;
      }
      *(_OWORD *)&STACK[0x1298] = *(_OWORD *)(v238 + 8);
      STACK[0x12A8] = v240;
      LOBYTE(STACK[0x12B4]) = 0;
      LODWORD(STACK[0x12B0]) = v237;
      LODWORD(STACK[0x12B8]) = 0;
      BlueFin::GlPeGnssNavUpa::UrbanPosAssist(v62 + 2280, (uint64_t)&STACK[0x1290], (uint64_t)&STACK[0x1A60]);
      BOOL v234 = (LOBYTE(STACK[0x1A80]) | v236) != 0;
      if (LOBYTE(STACK[0x1A80])) {
        float v233 = *(float *)&STACK[0x1A84];
      }
      else {
        float v233 = v235;
      }
    }
    uint64_t v241 = *(void *)(*(void *)v62 - 24);
    char v242 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 192))(v62);
    BOOL v243 = !IsTunnelExitOrLeftRecently && BlueFin::GlPeNavGnssKF::TrustPdrPropagation((BlueFin::GlPeNavGnssKF *)v62);
    BOOL IsTunnelExit = BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)v62);
    BOOL v245 = BlueFin::GlPeNavGnssKF::PolaroidLeftTunnelRecently((BlueFin::GlPeNavGnssKF *)v62, 0x4E20u);
    int v246 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 56))(v62);
    char v247 = *(unsigned char *)(v62 + 1560);
    uint64_t v248 = v62 + *(void *)(*(void *)v62 - 24);
    int v249 = *(_DWORD *)(v248 + 176);
    int v250 = *(_DWORD *)(v62 + 1324);
    uint64_t v251 = *(void *)(v62 + 2272);
    if (*(__int16 *)(v251 + 2) < 1 || *(unsigned char *)(v251 + 45))
    {
      if (*(unsigned char *)(*(void *)(v62 + 2248) + 1989)) {
        LOBYTE(v252) = 1;
      }
      else {
        int v252 = *(_DWORD *)(v62 + 1800);
      }
    }
    else
    {
      LOBYTE(v252) = 5;
    }
    STACK[0x630] = v62 + v241;
    STACK[0x638] = v62 + 1336;
    STACK[0x640] = v62 + 32;
    LOBYTE(STACK[0x648]) = v242;
    LOBYTE(STACK[0x649]) = v243;
    LOBYTE(STACK[0x64A]) = IsTunnelExit;
    LOBYTE(STACK[0x64B]) = IsTunnelExitOrLeftRecently;
    LOBYTE(STACK[0x64C]) = v245;
    LOBYTE(STACK[0x64D]) = 0;
    LOBYTE(STACK[0x64E]) = v234;
    LODWORD(STACK[0x650]) = v246;
    LOBYTE(STACK[0x654]) = v247;
    LODWORD(STACK[0x658]) = v249;
    LODWORD(STACK[0x65C]) = v250;
    *(float *)&STACK[0x660] = v233;
    LOBYTE(STACK[0x664]) = v252;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1A60], (unsigned int *)&STACK[0x1A6C], 0x13u, (const void **)(v248 + 264));
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1740], (unsigned int *)&STACK[0x174C], 0x13u, (const void **)(v62 + *(void *)(*(void *)v62 - 24) + 352));
    *(unsigned char *)(v62 + 1560) = BlueFin::GlPePolaroid::RunPolaroid(v62 + 13312, (uint64_t)&STACK[0x630]);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1228], (unsigned int *)&STACK[0x1234], 0x13u, (const void **)(v62 + *(void *)(*(void *)v62 - 24) + 264));
    STACK[0x1290] = (unint64_t)&STACK[0x129C];
    LOBYTE(STACK[0x1298]) = 19;
    *(_OWORD *)&STACK[0x129C] = 0u;
    *(_OWORD *)&STACK[0x12AC] = 0u;
    *(_OWORD *)&STACK[0x12BC] = 0u;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12D8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&STACK[0x1228], (int **)&STACK[0x1290]);
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x1228], (uint64_t)&STACK[0x1290]);
    long long v253 = *(_OWORD *)&STACK[0x12CC];
    *(_OWORD *)&STACK[0x1254] = *(_OWORD *)&STACK[0x12BC];
    *(_OWORD *)&STACK[0x1264] = v253;
    *(_OWORD *)&STACK[0x1270] = *(_OWORD *)&STACK[0x12D8];
    long long v254 = *(_OWORD *)&STACK[0x12AC];
    *(_OWORD *)&STACK[0x1234] = *(_OWORD *)&STACK[0x129C];
    *(_OWORD *)&STACK[0x1244] = v254;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&STACK[0x1228]);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a11, (unsigned int *)&a11 + 3, 0x13u, (const void **)&STACK[0x1A60]);
    STACK[0x1290] = (unint64_t)&STACK[0x129C];
    LOBYTE(STACK[0x1298]) = 19;
    *(_OWORD *)&STACK[0x129C] = 0u;
    *(_OWORD *)&STACK[0x12AC] = 0u;
    *(_OWORD *)&STACK[0x12BC] = 0u;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12D8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&a11, (int **)&STACK[0x1290], (int **)&STACK[0x1228]);
    BlueFin::GlSetBase::operator=((uint64_t)&a11, (uint64_t)&STACK[0x1290]);
    long long v255 = *(_OWORD *)&STACK[0x12CC];
    *(long long *)((char *)&a14 + 4) = *(_OWORD *)&STACK[0x12BC];
    *(long long *)((char *)&a15 + 4) = v255;
    a16 = *(_OWORD *)&STACK[0x12D8];
    long long v256 = *(_OWORD *)&STACK[0x12AC];
    *(long long *)((char *)&a11 + 12) = *(_OWORD *)&STACK[0x129C];
    *(long long *)((char *)&a13 + 4) = v256;
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x1A60], (uint64_t)&a11);
    long long v257 = *(long long *)((char *)&a15 + 4);
    *(_OWORD *)&STACK[0x1A8C] = *(long long *)((char *)&a14 + 4);
    *(_OWORD *)&STACK[0x1A9C] = v257;
    *(_OWORD *)&STACK[0x1AA8] = a16;
    long long v258 = *(long long *)((char *)&a13 + 4);
    *(_OWORD *)&STACK[0x1A6C] = *(long long *)((char *)&a11 + 12);
    *(_OWORD *)&STACK[0x1A7C] = v258;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1228], (unsigned int *)&STACK[0x1234], 0x13u, (const void **)(v62 + *(void *)(*(void *)v62 - 24) + 352));
    STACK[0x1290] = (unint64_t)&STACK[0x129C];
    LOBYTE(STACK[0x1298]) = 19;
    *(_OWORD *)&STACK[0x129C] = 0u;
    *(_OWORD *)&STACK[0x12AC] = 0u;
    *(_OWORD *)&STACK[0x12BC] = 0u;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12D8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&STACK[0x1228], (int **)&STACK[0x1290]);
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x1228], (uint64_t)&STACK[0x1290]);
    long long v259 = *(_OWORD *)&STACK[0x12CC];
    *(_OWORD *)&STACK[0x1254] = *(_OWORD *)&STACK[0x12BC];
    *(_OWORD *)&STACK[0x1264] = v259;
    *(_OWORD *)&STACK[0x1270] = *(_OWORD *)&STACK[0x12D8];
    long long v260 = *(_OWORD *)&STACK[0x12AC];
    *(_OWORD *)&STACK[0x1234] = *(_OWORD *)&STACK[0x129C];
    *(_OWORD *)&STACK[0x1244] = v260;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&STACK[0x1228]);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a11, (unsigned int *)&a11 + 3, 0x13u, (const void **)&STACK[0x1740]);
    STACK[0x1290] = (unint64_t)&STACK[0x129C];
    LOBYTE(STACK[0x1298]) = 19;
    *(_OWORD *)&STACK[0x129C] = 0u;
    *(_OWORD *)&STACK[0x12AC] = 0u;
    *(_OWORD *)&STACK[0x12BC] = 0u;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12D8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&a11, (int **)&STACK[0x1290], (int **)&STACK[0x1228]);
    BlueFin::GlSetBase::operator=((uint64_t)&a11, (uint64_t)&STACK[0x1290]);
    long long v261 = *(_OWORD *)&STACK[0x12CC];
    *(long long *)((char *)&a14 + 4) = *(_OWORD *)&STACK[0x12BC];
    *(long long *)((char *)&a15 + 4) = v261;
    a16 = *(_OWORD *)&STACK[0x12D8];
    long long v262 = *(_OWORD *)&STACK[0x12AC];
    *(long long *)((char *)&a11 + 12) = *(_OWORD *)&STACK[0x129C];
    *(long long *)((char *)&a13 + 4) = v262;
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x1740], (uint64_t)&a11);
    long long v263 = *(long long *)((char *)&a15 + 4);
    *(_OWORD *)&STACK[0x176C] = *(long long *)((char *)&a14 + 4);
    *(_OWORD *)&STACK[0x177C] = v263;
    *(_OWORD *)&STACK[0x1788] = a16;
    long long v264 = *(long long *)((char *)&a13 + 4);
    *(_OWORD *)&STACK[0x174C] = *(long long *)((char *)&a11 + 12);
    *(_OWORD *)&STACK[0x175C] = v264;
    BlueFin::GlPeMsmtMgr::SetPrCode(*(void *)(v62 + 8), (uint64_t)&STACK[0x1A60], 40);
    BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v62 + 8), (uint64_t)&STACK[0x1740], 40);
    if (!BlueFin::GlSetBase::operator==((uint64_t)&a23, v62 + *(void *)(*(void *)v62 - 24) + 352))
    {
      float v265 = *(float *)(v62 + 2940);
      STACK[0x1290] = (unint64_t)&STACK[0x129C];
      LOBYTE(STACK[0x1298]) = 19;
      *(_OWORD *)&STACK[0x129C] = 0u;
      *(_OWORD *)&STACK[0x12AC] = 0u;
      *(_OWORD *)&STACK[0x12BC] = 0u;
      *(_OWORD *)&STACK[0x12CC] = 0u;
      *(_OWORD *)&STACK[0x12D8] = 0u;
      BlueFin::GlPeNavGnssKF::GetMeasSigIdSetForLsq(v62, v582, (BlueFin::GlSetBase *)&STACK[0x1290], 0, 16);
      BlueFin::GlPeNavGnssKF::RunDeals(v62, (BlueFin::GlSetBase *)&STACK[0x1290]);
      if (!*(unsigned char *)(v62 + 26))
      {
        float v266 = v265 * 0.0174532925;
        float v267 = v266 * 57.2957795;
        *(float *)(v62 + 2940) = v267;
      }
    }
  }
  BlueFin::GlPeNavGnssKF::Update((BlueFin::GlPeNavGnssKF *)v62, v582, (int *)v588);
  uint64_t v268 = *(void *)v62;
  uint64_t v269 = v62 + *(void *)(*(void *)v62 - 24);
  *(_OWORD *)(v269 + 32) = *(_OWORD *)(v269 + 8);
  *(void *)(v269 + 48) = *(void *)(v269 + 24);
  a11 = 0uLL;
  a12 = 0;
  *(void *)&a13 = (char *)&a13 + 12;
  BYTE8(a13) = 19;
  *(long long *)((char *)&a13 + 12) = 0u;
  *(long long *)((char *)&a14 + 12) = 0u;
  *(long long *)((char *)&a15 + 12) = 0u;
  *(long long *)((char *)&a16 + 12) = 0u;
  *(long long *)((char *)&a18 + 4) = 0u;
  a19 = 0u;
  a20 = vdupq_n_s32(0x43C80000u);
  a21 = a20;
  if (*(unsigned char *)(v62 + 1560))
  {
    uint64_t v270 = *(void *)(v62 + 2248);
    if (*(unsigned char *)(v270 + 1764)) {
      unsigned int v271 = 60;
    }
    else {
      unsigned int v271 = 180;
    }
    BOOL v563 = *(float *)(v270 + 1328) > 4.0
        && *(float *)(v270 + 1320) < 20.0
        && *(_DWORD *)(v270 + 76) >= v271
        && (*(unsigned char *)(v270 + 1764) || *(_DWORD *)(v270 + 64) == 1);
    STACK[0x508] = (unint64_t)&STACK[0x514];
    LOBYTE(STACK[0x510]) = 19;
    *(_OWORD *)&STACK[0x514] = 0u;
    *(_OWORD *)&STACK[0x524] = 0u;
    *(_OWORD *)&STACK[0x534] = 0u;
    *(_OWORD *)&STACK[0x544] = 0u;
    *(_OWORD *)&STACK[0x550] = 0u;
    uint64_t v273 = v268 + 192;
    int v272 = *(uint64_t (**)(uint64_t))(v268 + 192);
    uint64_t v274 = v62 + *(void *)(v273 - 216);
    *(_OWORD *)&STACK[0x6F0] = *(_OWORD *)(v274 + 8);
    STACK[0x700] = *(void *)(v274 + 24);
    uint64_t v275 = **(unsigned int **)(v62 + 2240);
    char v276 = v272(v62);
    BlueFin::GlPeNavUtil::ComputeRangeResidVec(v62, v274 + 264, (uint64_t)&STACK[0x6F0], v275, 0, 0, 0, 1, v276, 1);
    for (uint64_t m = 0; m != 1200; m += 12)
    {
      long long v278 = (char *)&STACK[0x1290] + m;
      *long long v278 = 0;
      *((_DWORD *)v278 + 1) = -1;
      *((_WORD *)v278 + 4) = 575;
    }
    uint64_t v279 = v62 + *(void *)(*(void *)v62 - 24);
    uint64_t v280 = *(unsigned __int8 *)(v279 + 272);
    LOBYTE(STACK[0x1228]) = v280;
    memcpy(&STACK[0x1230], *(const void **)(v279 + 264), 4 * v280);
    LOWORD(STACK[0x122A]) = 0;
    LOBYTE(STACK[0x1229]) = 0;
    LODWORD(STACK[0x122C]) = STACK[0x1230];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x1228]);
    unsigned __int8 v282 = 0;
    if (LOBYTE(STACK[0x1229]) != LOBYTE(STACK[0x1228]))
    {
      unsigned __int8 v282 = 0;
      unint64_t v283 = STACK[0x1A60];
      do
      {
        unint64_t v284 = LOWORD(STACK[0x122A]);
        if (v284 >= 0x23F)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        long long v285 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v284;
        int v286 = v285[1];
        long long v287 = (char *)&STACK[0x1290] + 12 * v282;
        *long long v287 = *v285;
        *((_DWORD *)v287 + 1) = v286;
        *((_WORD *)v287 + 4) = v284;
        *((double *)&STACK[0x1740] + v282) = fabs(*(double *)(v283 + 8 * v282 + 8));
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x1228]);
        ++v282;
      }
      while (LOBYTE(STACK[0x1229]) != LOBYTE(STACK[0x1228]));
    }
    BlueFin::GlSortDoubles((uint64_t)&STACK[0x1740], (const double *)v282, &STACK[0x1228], v281);
    STACK[0x6C0] = (unint64_t)&STACK[0x6CC];
    LOBYTE(STACK[0x6C8]) = 8;
    *(_OWORD *)&STACK[0x6CC] = 0u;
    *(_OWORD *)&STACK[0x6DC] = 0u;
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&STACK[0x508], (uint64_t)&STACK[0x690]);
    unsigned int v288 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v62 + *(void *)(*(void *)v62 - 24) + 264));
    unsigned int v289 = v288;
    unsigned int v290 = 0;
    uint64_t v291 = (_DWORD *)(STACK[0x508] + 4 * LOBYTE(STACK[0x510]) - 4);
    do
    {
      if (*v291)
      {
        unsigned int v292 = *v291 - (((*v291 >> 2) & 0x9249249) + ((*v291 >> 1) & 0x5B6DB6DB));
        unsigned int v290 = ((v292 + (v292 >> 3)) & 0xC71C71C7) + v290 - 63 * (((v292 + (v292 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v291;
    }
    while ((unint64_t)v291 >= STACK[0x508]);
    if (v288)
    {
      unsigned int v293 = (unsigned __int16)v290;
      if ((unsigned __int16)v290 <= 0xFu)
      {
        unsigned __int8 v294 = 0;
        int32x2_t v295 = vdup_n_s32(0x42C60000u);
        do
        {
          uint64_t v296 = *((unsigned __int8 *)&STACK[0x1228] + v294);
          unint64_t v297 = *((unsigned __int8 *)&STACK[0x1290] + 12 * v296);
          unint64_t v298 = v297 >> 5;
          char v299 = v297 & 0x1F;
          if (((*(unsigned int *)(STACK[0x6C0] + 4 * (v297 >> 5)) >> (v297 & 0x1F)) & 1) == 0)
          {
            unint64_t v300 = *(void *)(v62 + 16);
            LODWORD(STACK[0x708]) = 0;
            STACK[0x710] = (unint64_t)&STACK[0x71C];
            LOBYTE(STACK[0x718]) = 8;
            *(_OWORD *)&STACK[0x71C] = 0u;
            *(_OWORD *)&STACK[0x72C] = 0u;
            *(_OWORD *)&STACK[0x740] = xmmword_263BBA380;
            STACK[0x750] = (unint64_t)v295;
            LODWORD(STACK[0x758]) = 1120272384;
            BlueFin::stDops::stDops((uint64_t)&STACK[0x630], (uint64_t)&STACK[0x708]);
            STACK[0x688] = v300;
            uint64_t v301 = **(unsigned int **)(v62 + 8);
            STACK[0x570] = *(void *)(v62 + 88 + *(void *)(*(void *)v62 - 24));
            LODWORD(STACK[0x568]) = **(_DWORD **)(v62 + 2240);
            LODWORD(STACK[0x5D4]) = 0;
            BlueFin::GlPeDops::GetDops((uint64_t)&STACK[0x630], v301);
            double v302 = *(float *)&STACK[0x614] <= 10.0 ? 1.0 : 1.5;
            if (fabs(*((double *)&STACK[0x1740] + v296)) < v302 * *(float *)(v62 + 1796))
            {
              unsigned int v303 = 0;
              int v304 = *((__int16 *)&STACK[0x1290] + 6 * v296 + 4);
              unsigned int v305 = v304 >> 5;
              int v306 = 1 << v304;
              unint64_t v307 = STACK[0x508];
              *(_DWORD *)(STACK[0x508] + 4 * v305) |= v306;
              *(_DWORD *)(STACK[0x6C0] + 4 * v298) |= 1 << v299;
              *(_DWORD *)(STACK[0x690] + 4 * v298) |= 1 << v299;
              long long v308 = (_DWORD *)(v307 + 4 * LOBYTE(STACK[0x510]) - 4);
              do
              {
                if (*v308)
                {
                  unsigned int v309 = *v308 - (((*v308 >> 2) & 0x9249249) + ((*v308 >> 1) & 0x5B6DB6DB));
                  unsigned int v303 = ((v309 + (v309 >> 3)) & 0xC71C71C7) + v303 - 63 * (((v309 + (v309 >> 3)) & 0xC71C71C7) / 0x3F);
                }
                --v308;
              }
              while ((unint64_t)v308 >= v307);
              unsigned int v293 = (unsigned __int16)v303;
            }
          }
          ++v294;
        }
        while (v289 > v294 && v293 < 0x10);
      }
    }
    unint64_t v310 = *(void *)(v62 + 16);
    LODWORD(STACK[0x5D8]) = 0;
    STACK[0x5E0] = (unint64_t)&STACK[0x5EC];
    LOBYTE(STACK[0x5E8]) = 8;
    *(_OWORD *)&STACK[0x5EC] = 0u;
    *(_OWORD *)&STACK[0x5FC] = 0u;
    *(_OWORD *)&STACK[0x610] = xmmword_263BBA380;
    STACK[0x620] = (unint64_t)vdup_n_s32(0x42C60000u);
    LODWORD(STACK[0x628]) = 1120272384;
    BlueFin::stDops::stDops((uint64_t)&STACK[0x630], (uint64_t)&STACK[0x5D8]);
    STACK[0x688] = v310;
    uint64_t v311 = **(unsigned int **)(v62 + 8);
    STACK[0x568] = *(void *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
    LODWORD(STACK[0x564]) = **(_DWORD **)(v62 + 2240);
    LODWORD(STACK[0x560]) = 0;
    BlueFin::GlPeDops::GetDops((uint64_t)&STACK[0x630], v311);
    unint64_t v312 = BlueFin::GlPeSubsets::Find((BlueFin::GlPeSubsets *)&STACK[0x760], (const BlueFin::GlSignalIdSet *)&STACK[0x508]);
    uint64_t v121 = (long long *)v312;
    if (v312)
    {
      float v313 = *(float *)(v312 + 112);
      goto LABEL_271;
    }
    *(_OWORD *)&STACK[0x12AA] = 0u;
    *(_OWORD *)&STACK[0x12A0] = 0u;
    *(_OWORD *)&STACK[0x1290] = 0u;
    LOBYTE(STACK[0x12C8]) = 19;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12DC] = 0u;
    *(_OWORD *)&STACK[0x12EC] = 0u;
    *(_OWORD *)&STACK[0x12FC] = 0u;
    *(_OWORD *)&STACK[0x130C] = 0u;
    STACK[0x12C0] = (unint64_t)&STACK[0x12CC];
    STACK[0x1320] = (unint64_t)&STACK[0x132C];
    LOBYTE(STACK[0x1328]) = 8;
    *(_OWORD *)&STACK[0x132C] = 0u;
    *(_OWORD *)&STACK[0x133C] = 0u;
    *(_OWORD *)&STACK[0x1350] = xmmword_263BBA380;
    STACK[0x1360] = (unint64_t)vdup_n_s32(0x42C60000u);
    LODWORD(STACK[0x1368]) = 1120272384;
    LODWORD(STACK[0x1370]) = 0;
    STACK[0x1380] = 0;
    STACK[0x1378] = 0;
    LODWORD(STACK[0x1390]) = 0;
    STACK[0x1388] = 0;
    *(_OWORD *)&STACK[0x13B4] = 0u;
    *(_OWORD *)&STACK[0x13A4] = 0u;
    STACK[0x1398] = (unint64_t)&STACK[0x13A4];
    LOBYTE(STACK[0x13A0]) = 8;
    uint64_t v322 = v62 + *(void *)(*(void *)v62 - 24);
    unint64_t v323 = v322 + 8;
    unint64_t v324 = *(void *)(v322 + 88);
    LODWORD(v322) = **(_DWORD **)(v62 + 2240);
    STACK[0x1740] = (unint64_t)&STACK[0x174C];
    LOBYTE(STACK[0x1748]) = 8;
    *(_OWORD *)&STACK[0x174C] = 0u;
    *(_OWORD *)&STACK[0x175C] = 0u;
    STACK[0x1A60] = (unint64_t)&STACK[0x508];
    STACK[0x1A68] = 0;
    STACK[0x1A70] = 0;
    STACK[0x1A78] = v323;
    STACK[0x1A80] = v324;
    LOBYTE(STACK[0x1A8C]) = 5;
    LODWORD(STACK[0x1A88]) = v322;
    LODWORD(STACK[0x1A90]) = 17;
    STACK[0x1A98] = 0;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1AA0], (unsigned int *)&STACK[0x1AAC], 8u, (const void **)&STACK[0x1740]);
    *(_OWORD *)&STACK[0x1740] = *(_OWORD *)(v62 + 8);
    STACK[0x1760] = 0;
    STACK[0x1750] = (unint64_t)&STACK[0x4D0];
    STACK[0x1758] = 0;
    if (!BlueFin::GlPeLsq::LsPos((uint64_t)&STACK[0x1740], (uint64_t)&STACK[0x1A60], (uint64_t)&STACK[0x1290]))goto LABEL_282; {
    BOOL v325 = BlueFin::GlSetBase::operator==((uint64_t)&STACK[0x508], (uint64_t)&STACK[0x12C0]);
    }
    if (!LOBYTE(STACK[0x1371]) || !v325) {
      goto LABEL_282;
    }
    a11 = *(_OWORD *)&STACK[0x1290];
    double v327 = *(double *)&STACK[0x12A8];
    a12 = STACK[0x12A0];
    float v328 = v327;
    *((float *)&a19 + 3) = v328;
    BlueFin::GlSetBase::operator=((uint64_t)&a13, (uint64_t)&STACK[0x12C0]);
    long long v329 = *(_OWORD *)&STACK[0x12FC];
    *(long long *)((char *)&a15 + 12) = *(_OWORD *)&STACK[0x12EC];
    *(long long *)((char *)&a16 + 12) = v329;
    a18 = *(_OWORD *)&STACK[0x1308];
    long long v330 = *(_OWORD *)&STACK[0x12DC];
    *(long long *)((char *)&a13 + 12) = *(_OWORD *)&STACK[0x12CC];
    *(long long *)((char *)&a14 + 12) = v330;
    uint64_t v121 = &a11;
    float v313 = *(float *)&STACK[0x1354];
LABEL_271:
    if (v313 <= 5.0)
    {
      if (*(unsigned char *)(v62 + 2932) && *((float *)v121 + 28) < 5.0)
      {
        float v314 = *(float *)&STACK[0x2A0];
        int v315 = *(_DWORD *)v588;
        unint64_t v316 = *(void *)v121;
        unint64_t v317 = *((void *)v121 + 1);
        unint64_t v318 = *((void *)v121 + 2);
        if (v563)
        {
          float v319 = *(double *)(v62 + 2904);
          float v320 = *(double *)(v62 + 2912);
          float v321 = sqrtf((float)(v319 * v319) + (float)(v320 * v320));
        }
        else
        {
          float v321 = 0.01;
        }
        float v381 = *(double *)(v62 + 2872);
        float v382 = *(double *)(v62 + 2880);
        float v383 = sqrtf((float)(v381 * v381) + (float)(v382 * v382));
        float v384 = *(double *)(*(void *)(*(void *)(v62 + 40) + 40) + 40) * 0.5;
        int v385 = *((_DWORD *)v121 + 31);
        float v386 = fmin(*(float *)&STACK[0x2B0] * 0.5, 50.0);
        int v387 = *(_DWORD *)(v62 + 2896);
        int v388 = *(_DWORD *)(v62 + 2928);
        STACK[0x1290] = v316;
        STACK[0x1298] = v317;
        STACK[0x12A0] = v318;
        *(float *)&STACK[0x12A8] = v314 * 0.5;
        *(float *)&STACK[0x12AC] = v384;
        *(float *)&STACK[0x12B0] = v383;
        *(float *)&STACK[0x12B4] = v321;
        STACK[0x12B8] = (unint64_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v62 + 2936)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D34uLL)));
        LODWORD(STACK[0x12C0]) = v385;
        *(float *)&STACK[0x12C4] = v386;
        LODWORD(STACK[0x12C8]) = v387;
        LODWORD(STACK[0x12CC]) = v388;
        LOWORD(STACK[0x12D0]) = 0;
        STACK[0x1740] = v316;
        STACK[0x1748] = v317;
        STACK[0x1750] = v318;
        LODWORD(STACK[0x1228]) = 0;
        LODWORD(STACK[0x630]) = 0;
        uint64_t v389 = v62 + *(void *)(*(void *)v62 - 24);
        float v390 = *(double *)(v389 + 152);
        *(float *)&STACK[0x708] = v390;
        LODWORD(STACK[0x5D8]) = 1137180672;
        LODWORD(STACK[0x570]) = 1137180672;
        LODWORD(STACK[0x6C0]) = 1137180672;
        STACK[0x1A60] = (unint64_t)&STACK[0x1740];
        STACK[0x1A68] = (unint64_t)&STACK[0x630];
        STACK[0x1A70] = (unint64_t)&STACK[0x708];
        STACK[0x1A78] = (unint64_t)&STACK[0x1228];
        STACK[0x1A80] = (unint64_t)&STACK[0x5D8];
        STACK[0x1A88] = (unint64_t)&STACK[0x6C0];
        STACK[0x1A90] = (unint64_t)&STACK[0x570];
        BlueFin::GlPeFiltPos::UpdateFiltPos((int *)(v62 + 11448), *(_DWORD *)(v389 + 200), (long long *)&STACK[0x1290], (uint64_t *)&STACK[0x1A60], (v315 & 0x1000) != 0, 0, 0, 0);
        float v391 = *(float *)STACK[0x1A78];
        uint64_t v392 = *(void *)v62;
        double v393 = *(float *)(v62 + *(void *)(*(void *)v62 - 24) + 176);
        for (double n = v393 - *(double *)(v62 + 4816); n > 3.14159265; double n = n + -6.28318531)
          ;
        for (; n <= -3.14159265; double n = n + 6.28318531)
          ;
        *(double *)(v62 + 4824) = *(double *)(v62 + 4824) * 0.5 + n * 0.5;
        *(double *)(v62 + 4816) = v393;
        double v395 = *(double *)(v62 + 2904);
        double v396 = *(double *)(v62 + 2912);
        unsigned int v397 = (*(uint64_t (**)(uint64_t))(v392 + 56))(v62);
        float v398 = v395;
        float v399 = v396;
        BlueFin::GlPeNavGnssMotion::SetNoMotionSpeedAndTrigger(v62 + 4792, v391, sqrtf((float)(v398 * v398) + (float)(v399 * v399)), v397, v563);
        char v331 = 0;
        goto LABEL_289;
      }
      char v331 = 0;
    }
    else
    {
LABEL_282:
      uint64_t v121 = 0;
      char v331 = 1;
    }
    uint64_t v332 = *(void *)v62;
    double v333 = *(float *)(v62 + *(void *)(*(void *)v62 - 24) + 176);
    for (iuint64_t i = v333 - *(double *)(v62 + 4816); ii > 3.14159265; iuint64_t i = ii + -6.28318531)
      ;
    for (; ii <= -3.14159265; iuint64_t i = ii + 6.28318531)
      ;
    *(double *)(v62 + 4824) = *(double *)(v62 + 4824) * 0.5 + ii * 0.5;
    *(double *)(v62 + 4816) = v333;
    uint64_t v335 = v62 + *(void *)(v332 - 24);
    double v336 = *(double *)(v335 + 104);
    double v337 = *(double *)(v335 + 112);
    float v338 = *(float *)(v335 + 128);
    unsigned int v339 = (*(uint64_t (**)(uint64_t))(v332 + 56))(v62);
    BlueFin::GlPeNavGnssMotion::SetNoMotionSpeedAndTrigger(v62 + 4792, sqrt(v337 * v337 + v336 * v336), v338, v339, v563);
LABEL_289:
    if (*(unsigned char *)(*(void *)(v62 + 2248) + 1989))
    {
      uint64_t v340 = v62 + *(void *)(*(void *)v62 - 24);
      double v341 = *(double *)(v340 + 104);
      double v342 = *(double *)(v340 + 112);
      float v343 = *(float *)(v340 + 128);
      unsigned int v344 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 56))(v62);
      BlueFin::GlPeNavGnssMotion::SetNoMotionSpeedAndTrigger(v62 + 4792, sqrt(v342 * v342 + v341 * v341), v343, v344, v563);
    }
    if ((v331 & 1) == 0)
    {
      unint64_t v345 = *(void *)(v62 + 11464);
      unint64_t v346 = *(void *)(v62 + 11472);
      unint64_t v583 = *(void *)(v62 + 11480);
      BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&STACK[0x1290]);
      unint64_t v347 = v346;
      unint64_t v348 = v345;
      int v349 = **(_DWORD **)(v62 + 8);
      int v579 = STACK[0x2A0];
      int v575 = STACK[0x2A4];
      float v350 = *(double *)(v62 + 2904);
      float32x2_t v351 = vcvt_f32_f64(*(float64x2_t *)(v62 + 2912));
      float v564 = sqrtf((float)(v350 * v350) + vmul_f32(v351, v351).f32[0]);
      double v352 = *((float *)v121 + 31);
      float v353 = fmin(*(float *)&STACK[0x2B0] * 0.5, 50.0);
      double v354 = *(float *)(v62 + 2896);
      int v355 = *(_DWORD *)(v62 + 2928);
      float v356 = *(float *)(v62 + 2936) * 0.0174532925;
      if (*(unsigned char *)(v62 + 2932)) {
        float v357 = *(float *)(v62 + 2940) * 0.0174532925;
      }
      else {
        float v357 = 3.1416;
      }
      STACK[0x1298] = v348;
      STACK[0x12A0] = v347;
      STACK[0x12A8] = v583;
      BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)&STACK[0x1290]);
      LODWORD(STACK[0x12E0]) = v579;
      LODWORD(STACK[0x12E4]) = v575;
      *(double *)&STACK[0x12E8] = v352;
      *(float *)&STACK[0x12F0] = v353;
      *(_OWORD *)&STACK[0x12F8] = *v571;
      STACK[0x1308] = *(void *)(v62 + 2888);
      *(float *)&STACK[0x1314] = v350;
      *(float *)&STACK[0x1310] = v564;
      STACK[0x1318] = (unint64_t)v351;
      *(double *)&STACK[0x1328] = v354;
      LODWORD(STACK[0x1330]) = v355;
      STACK[0x1338] = 0x3FF0000000000000;
      LODWORD(STACK[0x1358]) = v349;
      LODWORD(STACK[0x135C]) = 1;
      *(float *)&STACK[0x1340] = v356;
      *(float *)&STACK[0x1348] = v357;
      STACK[0x134C] = (unint64_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v62 + 2944)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D34uLL)));
      LODWORD(STACK[0x1388]) = v579;
      LODWORD(STACK[0x138C]) = v575;
      LOWORD(STACK[0x1380]) = 257;
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1A60], (unsigned int *)&STACK[0x1A6C], 0x13u, (const void **)v121 + 3);
      BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x1398], (uint64_t)&STACK[0x1A60]);
    }
    if ((*(unsigned char *)(v588 + 1) & 0x40) == 0)
    {
      double v358 = *(double *)(v62 + 3040);
      if (v121)
      {
        BlueFin::lla2ned((double *)v121, (double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), 0, (double *)&STACK[0x1290]);
        float v359 = *(double *)&STACK[0x1290];
        float v360 = *(double *)&STACK[0x1298];
        float v361 = (float)(v359 * v359) + (float)(v360 * v360);
        float v362 = *(double *)&STACK[0x12A0];
        if ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) > 1)
        {
          float v361 = v361 + (float)(v362 * v362);
          float v364 = *((float *)v121 + 31) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
        }
        else
        {
          float v363 = *((float *)v121 + 31) - *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
          float v364 = v362 + v363;
        }
        double v373 = sqrtf(v361 + (float)(v364 * v364));
        float v374 = *(float *)&STACK[0x2A0];
        if (*(float *)&STACK[0x2A0] <= 300.0)
        {
          if (v374 <= 200.0)
          {
            if (v374 <= 100.0) {
              double v375 = 0.2;
            }
            else {
              double v375 = 0.1;
            }
          }
          else
          {
            double v375 = 0.05;
          }
        }
        else
        {
          double v375 = 0.01;
        }
        double v400 = v375 * v373 + (1.0 - v375) * v358;
        if (v358 <= 0.0) {
          double v365 = v373;
        }
        else {
          double v365 = v400;
        }
      }
      else
      {
        double v365 = v358 + 10.0;
      }
      if (*(unsigned char *)(v62 + 4840))
      {
        uint64_t v401 = *(void *)(v62 + 2248);
        if (sqrt(*(double *)(v62 + *(void *)(*(void *)v62 - 24) + 112)* *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 112)+ *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 104)* *(double *)(v62 + *(void *)(*(void *)v62 - 24) + 104)) < 0.5)
        {
          double v402 = 40.0;
          if ((*(_DWORD *)(v401 + 8) - 1) < 2) {
            double v402 = 30.0;
          }
          if (v365 >= v402) {
            double v365 = v402;
          }
        }
      }
      else
      {
        uint64_t v401 = *(void *)(v62 + 2248);
      }
      double v403 = 40.0;
      if (v365 >= 40.0) {
        double v403 = v365;
      }
      *(double *)(v62 + 3040) = v403;
      if ((*(_DWORD *)(v401 + 8) - 1) <= 1)
      {
        v404 = (double *)(v62 + *(void *)(*(void *)v62 - 24) + 8);
        *(_OWORD *)&STACK[0x1740] = xmmword_263BBC580;
        STACK[0x1750] = 0;
        BlueFin::lla2ned(v404, (double *)&STACK[0x1740], 0, (double *)&STACK[0x1290]);
        double v405 = *(double *)&STACK[0x1290];
        double v406 = *(double *)&STACK[0x1298];
        BOOL v407 = BlueFin::GlPeNavGnssKF::IsInXtcNow((BlueFin::GlPeNavGnssKF *)v62);
        float v408 = sqrt(v406 * v406 + v405 * v405);
        BOOL v409 = v408 < 75.0 && v407;
        if (!v409 || (double v410 = 30.0, *(_DWORD *)(*(void *)(v62 + 2248) + 16) != 3))
        {
          double v410 = 30.0;
          if (v365 >= 30.0) {
            double v410 = v365;
          }
        }
        *(double *)(v62 + 3040) = v410;
      }
    }
  }
  int v411 = (*(unsigned char *)(v588 + 1) & 0x40) != 0
      && BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)v62);
  uint64_t v412 = *(void *)(*(void *)v62 - 24);
  uint64_t v413 = **(unsigned int **)(v62 + 2240);
  char v414 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 192))(v62);
  BlueFin::GlPeNavGnssResidMon::UpdateRange(v569, (const BlueFin::GlPeNavUtil *)v62, (const BlueFin::GlSignalIdSet *)(v62 + 13208), (const BlueFin::GlSignalIdSet *)(v62 + v412 + 264), v413, v414, v411);
  STACK[0x5D8] = 0;
  STACK[0x570] = 0;
  STACK[0x508] = 0;
  STACK[0x6C0] = 0;
  BlueFin::GlPeNavGnssKF::ComputeEA(v62, (uint64_t)&a50, (double *)&STACK[0x5D8], (double *)&STACK[0x570], (double *)&STACK[0x508], (double *)&STACK[0x6C0], 0, 0, (_DWORD *)v588);
  uint64_t v415 = *(void *)v62;
  uint64_t v416 = *(void *)v62;
  v417.n128_f32[0] = *(double *)&STACK[0x5D8];
  *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 80) = v417.n128_u32[0];
  v417.n128_f32[0] = *(double *)&STACK[0x570];
  *(_DWORD *)(v62 + *(void *)(v416 - 24) + 84) = v417.n128_u32[0];
  if ((*(unsigned char *)v588 & 4) == 0) {
    goto LABEL_438;
  }
  v417.n128_u64[0] = *(void *)(v62 + 4888);
  if (v417.n128_f64[0] <= 4.0 && (*(unsigned char *)(v62 + 26) || *(_DWORD *)(*(void *)(v62 + 2248) + 16) == 1)) {
    goto LABEL_438;
  }
  unint64_t v418 = *(void *)(v62 + 11464);
  unint64_t v419 = *(void *)(v62 + 11472);
  unint64_t v420 = *(void *)(v62 + 11480);
  uint64_t v421 = *(void *)(*(void *)(v62 + 2256) + 136);
  if (v421)
  {
    if (*(unsigned char *)(v421 + 3216))
    {
      BlueFin::lla2ned((double *)(v62 + 11464), (double *)(v62 + *(void *)(v416 - 24) + 8), 0, (double *)&STACK[0x1290]);
      v417.n128_f64[0] = sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298]+ *(double *)&STACK[0x1290] * *(double *)&STACK[0x1290]);
      if (v417.n128_f64[0] < 100.0 && v417.n128_f64[0] > 35.0)
      {
        unint64_t v422 = *(void *)(v62 + 16);
        LODWORD(STACK[0x1A60]) = 0;
        STACK[0x1A68] = (unint64_t)&STACK[0x1A74];
        LOBYTE(STACK[0x1A70]) = 8;
        *(_OWORD *)&STACK[0x1A74] = 0u;
        *(_OWORD *)&STACK[0x1A84] = 0u;
        *(_OWORD *)&STACK[0x1A98] = xmmword_263BBA380;
        STACK[0x1AA8] = (unint64_t)vdup_n_s32(0x42C60000u);
        LODWORD(STACK[0x1AB0]) = 1120272384;
        BlueFin::stDops::stDops((uint64_t)&STACK[0x1290], (uint64_t)&STACK[0x1A60]);
        STACK[0x12E8] = v422;
        uint64_t v423 = **(unsigned int **)(v62 + 8);
        BlueFin::GlSignalIdSet::GetPrimarySignalSvIdSet((BlueFin::GlSignalIdSet *)(v62 + *(void *)(*(void *)v62 - 24) + 264), (uint64_t)&STACK[0x1228]);
        STACK[0x630] = *(void *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
        LODWORD(STACK[0x708]) = **(_DWORD **)(v62 + 2240);
        LODWORD(STACK[0x690]) = 0;
        BlueFin::GlPeDops::GetDops((uint64_t)&STACK[0x1290], v423);
        v417.n128_u32[0] = STACK[0x177C];
        if (*(float *)&STACK[0x177C] > 2.0)
        {
          v424 = (void *)(v62 + *(void *)(*(void *)v62 - 24));
          unint64_t v418 = v424[1];
          unint64_t v419 = v424[2];
          unint64_t v420 = v424[3];
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t, __n128))(*(void *)v62 + 56))(v62, v417) <= 0x14)
  {
    BOOL v426 = 0;
    uint64_t v425 = *(void *)v62;
  }
  else
  {
    uint64_t v425 = *(void *)v62;
    BOOL v426 = *(__int16 *)(*(void *)(v62 + 2272) + 2) <= 0
        && ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) > 1
         || *(float *)(v62 + *(void *)(v425 - 24) + 80) <= 75.0)
        && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v62 + *(void *)(v425 - 24) + 264)) > 2;
  }
  v427 = *(uint64_t (**)(uint64_t))(v425 + 56);
  if (v426) {
    int v428 = (16 * *(unsigned __int8 *)(v62 + *(void *)(v425 - 24) + 240)) | 4;
  }
  else {
    int v428 = 16 * *(unsigned __int8 *)(v62 + *(void *)(v425 - 24) + 240);
  }
  BOOL v429 = (*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) < 2;
  unsigned int v430 = v427(v62);
  int v431 = v428 | v429;
  if (v430 > 0x5A) {
    int v431 = v428 | v429 | 2;
  }
  int v432 = *(_DWORD *)(*(void *)(v62 + 2272) + 8);
  unsigned int v433 = v432
       ? v431 & 0xFFFFFFDF | (32
                            * ((*(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200) - v432) >> 5 < 0x753))
       : v431 & 0xFFFFFFDF;
  unsigned int v434 = (*(unsigned char *)(v588 + 1) & 0x40) != 0
      && BlueFin::GlPeNavGnssKF::PolaroidLeftTunnelRecently((BlueFin::GlPeNavGnssKF *)v62, 0x4E20u)
       ? v433 & 0xFFFFFF7F | (((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 3) < 3) << 7)
       : v433 & 0xFFFFFF7F;
  uint64_t v435 = v62 + *(void *)(*(void *)v62 - 24);
  unsigned int v436 = v434 & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(v435 + 241));
  double v437 = sqrt(*(double *)(v435 + 112) * *(double *)(v435 + 112) + *(double *)(v435 + 104) * *(double *)(v435 + 104));
  *(_OWORD *)v584 = *(_OWORD *)(v435 + 8);
  unint64_t v438 = *(void *)(v435 + 24);
  float v439 = *(double *)(v62 + 2664);
  int v440 = *(_DWORD *)(v435 + 200);
  float TrueHeadingRad = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)v62);
  *(double *)&STACK[0x1740] = v437;
  STACK[0x1748] = v418;
  STACK[0x1750] = v419;
  STACK[0x1758] = v420;
  *(_OWORD *)&STACK[0x1760] = *(_OWORD *)v584;
  STACK[0x1770] = v438;
  *(float *)&STACK[0x1778] = v439;
  LODWORD(STACK[0x177C]) = v440;
  *(float *)&STACK[0x1780] = TrueHeadingRad;
  LODWORD(STACK[0x1784]) = v436;
  BlueFin::GlPeGnssNavUpa::SetUrbanPosAssist(v62 + 2280, (uint64_t)&STACK[0x1740], (uint64_t)&STACK[0x1228]);
  uint64_t v415 = *(void *)v62;
  uint64_t v442 = v62 + *(void *)(*(void *)v62 - 24);
  if (!*(unsigned char *)(v442 + 242))
  {
    if (*(unsigned char *)(*(void *)(v62 + 2248) + 1988)) {
      goto LABEL_438;
    }
  }
  if (!LOBYTE(STACK[0x1228])) {
    goto LABEL_428;
  }
  BlueFin::lla2ned((double *)&STACK[0x1230], (double *)(v442 + 8), 0, (double *)&STACK[0x1290]);
  double v443 = *(double *)&STACK[0x1290];
  STACK[0x630] = STACK[0x1290];
  *(_OWORD *)v585 = *(_OWORD *)&STACK[0x1298];
  *(_OWORD *)&STACK[0x638] = *(_OWORD *)&STACK[0x1298];
  BlueFin::ned2hlu((long long *)&STACK[0x630], (const BlueFin::Matrix *)(v62 + 1336), &STACK[0x708]);
  float v444 = *(float *)&STACK[0x1254];
  __float2 v445 = __sincosf_stret(*(float *)&STACK[0x1254]);
  double v446 = vmlad_n_f64(-(v443 * v445.__sinval), v445.__cosval, *(double *)v585);
  float v447 = *(float *)&STACK[0x1248];
  if (*(float *)&STACK[0x1248] >= *(float *)&STACK[0x124C]) {
    float v447 = *(float *)&STACK[0x124C];
  }
  double v448 = v447;
  if ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) > 1)
  {
    if (*(unsigned char *)(v62 + 26)) {
      goto LABEL_405;
    }
    double v450 = *(double *)&STACK[0x710];
    goto LABEL_426;
  }
  if (!*(unsigned char *)(v62 + 26))
  {
    double v450 = *(double *)&STACK[0x710];
    double v451 = fabs(*(double *)&STACK[0x710]);
    if (v451 > 10.0)
    {
      double v452 = fabs(v450 * 0.25);
      if (v452 <= v448) {
        double v452 = v448;
      }
      if (v452 <= 7.0) {
        double v448 = v452;
      }
      else {
        double v448 = 7.0;
      }
      if (*(unsigned __int16 *)(v62 + 24) == *(unsigned __int16 *)(v62 + 2312) && v451 * -0.100000001 + 4.0 < v448) {
        double v448 = v451 * -0.100000001 + 4.0;
      }
    }
    if (v451 >= 3.0 && v451 <= 10.0)
    {
      if (v448 < v451 * -0.699999988 + 10.0) {
        double v448 = v451 * -0.699999988 + 10.0;
      }
      *(_WORD *)(v62 + 24) = *(_DWORD *)(v62 + 2312);
    }
    if (v451 < 3.0)
    {
      if (v448 < 300.0) {
        double v448 = 300.0;
      }
      *(_WORD *)(v62 + 24) = *(_DWORD *)(v62 + 2312);
    }
    double v448 = v448 * v448;
LABEL_426:
    *(_OWORD *)&STACK[0x12A0] = xmmword_263BBC570;
    STACK[0x1290] = (unint64_t)&STACK[0x12B0];
    STACK[0x1298] = (unint64_t)&STACK[0x1310];
    STACK[0x1310] = 0;
    STACK[0x1318] = (unint64_t)&STACK[0x12A8];
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
    *(void *)(*(void *)(STACK[0x1298] + 8) + 24) = 0x3FF0000000000000;
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 0, 1, v450, v448);
    goto LABEL_427;
  }
  if (v448 < 10.0) {
    double v448 = 10.0;
  }
  double v449 = fabs(v446);
  if (v449 >= 3.0 && v449 <= 10.0)
  {
    if (v448 < v449 * -0.699999988 + 10.0) {
      double v448 = v449 * -0.699999988 + 10.0;
    }
    *(_WORD *)(v62 + 24) = *(_DWORD *)(v62 + 2312);
  }
  if (v449 < 3.0)
  {
    if (v448 < 300.0) {
      double v448 = 300.0;
    }
    *(_WORD *)(v62 + 24) = *(_DWORD *)(v62 + 2312);
  }
LABEL_405:
  BlueFin::GlPeNavGnssKF::ApplyCrossTrackPosMeas((BlueFin::GlPeNavGnssKF *)v62, v446, v448, v444);
LABEL_427:
  *(unsigned char *)(v62 + 2281) = 1;
  *(_WORD *)(v62 + 13202) = 257;
  uint64_t v415 = *(void *)v62;
  uint64_t v453 = *(void *)v62;
  *(_DWORD *)(v62 + 2284) = *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200);
  uint64_t v454 = v62 + *(void *)(v453 - 24);
  *(_OWORD *)(v62 + 2288) = *(_OWORD *)(v454 + 8);
  *(void *)(v62 + 2304) = *(void *)(v454 + 24);
LABEL_428:
  if (LOBYTE(STACK[0x1250]))
  {
    float v455 = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)v62);
    double v456 = BlueFin::GlPeGnssNavUpa::UnravelHeadingRad((BlueFin::GlPeGnssNavUpa *)(v62 + 2280), v455, *(float *)&STACK[0x1254]);
    for (jdouble j = v456 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)v62);
          jj > 3.14159265;
    for (; jj <= -3.14159265; jdouble j = jj + 6.28318531)
      ;
    float v458 = jj;
    if (fabsf(v458) >= 1.57079633)
    {
      DeviceFaultNotify("glpe_navgnsskf.cpp", 6546, "SetUrbanPosAssist", (char)"FABS_F(fAngleDiffRad) < 90.0f*D2R");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 6546, "FABS_F(fAngleDiffRad) < 90.0f*D2R");
    }
    if (*(unsigned char *)(v62 + 26))
    {
      BlueFin::GlPeNavGnssKF::ApplyXTCHdg((BlueFin::GlPeNavGnssKF *)v62, v456, *(float *)&STACK[0x1258]);
    }
    else
    {
      *(_OWORD *)&STACK[0x12A0] = xmmword_263BBC570;
      STACK[0x1290] = (unint64_t)&STACK[0x12B0];
      STACK[0x1298] = (unint64_t)&STACK[0x1310];
      STACK[0x1310] = 0;
      STACK[0x1318] = (unint64_t)&STACK[0x12A8];
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&STACK[0x1290], 1, 12);
      *(void *)(*(void *)(STACK[0x1298] + 8) + 32) = 0x3FF0000000000000;
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)v62, (uint64_t)&STACK[0x1290], 1, 1, 1, v458, (float)(*(float *)&STACK[0x1258] * *(float *)&STACK[0x1258]));
    }
    uint64_t v415 = *(void *)v62;
    int v459 = *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200);
    *(double *)(v62 + 12120) = v456;
    *(_DWORD *)(v62 + 12128) = v459;
    *(unsigned char *)(v62 + 2281) = 1;
    *(_WORD *)(v62 + 13202) = 257;
  }
LABEL_438:
  BOOL v460 = BlueFin::GlPeNavGnssKF::TunnelUrbanPosAssist((uint64_t *)v62, (double *)(v62 + *(void *)(v415 - 24) + 8));
  BlueFin::lla2ned((double *)(v62 + *(void *)(*(void *)v62 - 24) + 8), (double *)&a50, 0, (double *)&STACK[0x1290]);
  if (v121) {
    char v461 = v460;
  }
  else {
    char v461 = 1;
  }
  if ((v461 & 1) == 0)
  {
    BOOL v460 = 0;
    if (*(float *)&STACK[0x2A0] < 100.0
      && sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298] + *(double *)&STACK[0x1290]
                                                                    * *(double *)&STACK[0x1290]) < 100.0)
    {
      BlueFin::GlPeNavGnssKF::TunnelUrbanPosAssist((uint64_t *)v62, (double *)&a50);
      BOOL v460 = 0;
    }
  }
  BlueFin::GlPeNavGnssKF::ComputeEA(v62, (uint64_t)&a50, (double *)&STACK[0x5D8], (double *)&STACK[0x570], (double *)&STACK[0x508], (double *)&STACK[0x6C0], v460, 1, (_DWORD *)v588);
  uint64_t v462 = *(void *)(v62 + 40);
  float v463 = *(double *)(*(void *)(v462 + 48) + 48);
  float v580 = sqrtf(v463);
  float v464 = *(double *)(*(void *)(v462 + 64) + 64);
  float v576 = sqrtf(v464);
  uint64_t v465 = v62 + *(void *)(*(void *)v62 - 24);
  int v466 = **(_DWORD **)(v62 + 8);
  float v467 = *(double *)&STACK[0x5D8];
  float v468 = *(double *)&STACK[0x570];
  float v469 = *(double *)&STACK[0x508];
  float v567 = v469;
  uint64_t v470 = *(void *)(v465 + 88);
  float v471 = *(double *)&STACK[0x6C0];
  uint64_t v472 = *(void *)(v465 + 152);
  *(void *)v565 = *(void *)(v465 + 168);
  int v570 = *(_DWORD *)(v465 + 176);
  float v473 = *(float *)(v62 + 2948) * 0.0174532925;
  float64x2_t v586 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D34uLL);
  float32x2_t v474 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v62 + 2940)), v586));
  BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)v465);
  *(float *)(v465 + 80) = v467;
  *(float *)(v465 + 84) = v468;
  *(void *)(v465 + 132) = 0;
  *(void *)(v465 + 88) = v470;
  *(float *)(v465 + 96) = v471;
  *(float *)(v465 + 128) = v567;
  *(float *)(v465 + 140) = v580;
  *(void *)(v465 + 152) = v472;
  *(float *)(v465 + 160) = v576;
  *(void *)(v465 + 168) = *(void *)v565;
  *(_DWORD *)(v465 + 200) = v466;
  *(_DWORD *)(v465 + 204) = 1;
  *(_DWORD *)(v465 + 176) = v570;
  *(float32x2_t *)(v465 + 184) = v474;
  *(float *)(v465 + 192) = v473;
  *(float *)(v465 + 248) = v467;
  *(float *)(v465 + 252) = v468;
  LODWORD(v465) = **(_DWORD **)(v62 + 8);
  float v475 = *(double *)(v62 + 2904);
  float v476 = *(double *)(v62 + 2912);
  float v581 = sqrtf((float)(v475 * v475) + (float)(v476 * v476));
  float v477 = *(double *)(v62 + 2920);
  float v577 = v477;
  int v478 = STACK[0x2A0];
  *(double *)&unint64_t v479 = *((float *)&a58 + 3);
  LODWORD(v470) = STACK[0x2A4];
  int v480 = STACK[0x2B0];
  *(double *)&unint64_t v481 = *(float *)(v62 + 2896);
  v474.i32[0] = *(_DWORD *)(v62 + 2928);
  float v482 = *(float *)(v62 + 2936) * 0.0174532925;
  float v483 = *(float *)(v62 + 2948) * 0.0174532925;
  *(_OWORD *)&STACK[0x2C8] = a50;
  STACK[0x2D8] = a51;
  BlueFin::GlPeNavGnssState::NormalizePos((BlueFin::GlPeNavGnssState *)&STACK[0x2C0]);
  LODWORD(STACK[0x310]) = v478;
  LODWORD(STACK[0x314]) = v470;
  STACK[0x344] = 0;
  STACK[0x318] = v479;
  LODWORD(STACK[0x320]) = v480;
  *(_OWORD *)&STACK[0x328] = *v571;
  STACK[0x338] = *(void *)(v62 + 2888);
  *(float *)&STACK[0x340] = v581;
  *(float *)&STACK[0x34C] = v577;
  STACK[0x358] = v481;
  LODWORD(STACK[0x360]) = v474.i32[0];
  STACK[0x368] = 0x3FF0000000000000;
  LODWORD(STACK[0x388]) = v465;
  LODWORD(STACK[0x38C]) = 1;
  *(float *)&STACK[0x370] = v482;
  float32x2_t v484 = *(float32x2_t *)(v62 + 2940);
  STACK[0x378] = (unint64_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v484), v586));
  *(float *)&STACK[0x380] = v483;
  LODWORD(STACK[0x3B8]) = v478;
  LODWORD(STACK[0x3BC]) = v470;
  if (*(unsigned char *)(v62 + 2932))
  {
    LOBYTE(STACK[0x3B1]) = v484.f32[0] < 180.0;
    LOBYTE(STACK[0x3B0]) = 1;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x1290], (unsigned int *)&STACK[0x129C], 0x13u, (const void **)(v62 + 2952));
    uint64_t v485 = BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x420], (uint64_t)&STACK[0x1290]);
    long long v486 = *(_OWORD *)&STACK[0x129C];
    *(_OWORD *)(v485 + 28) = *(_OWORD *)&STACK[0x12AC];
    long long v487 = *(_OWORD *)&STACK[0x12CC];
    *(_OWORD *)(v485 + 44) = *(_OWORD *)&STACK[0x12BC];
    *(_OWORD *)(v485 + 60) = v487;
    *(_OWORD *)(v485 + 72) = *(_OWORD *)&STACK[0x12D8];
    *(_OWORD *)(v485 + 12) = v486;
  }
  else
  {
    LOWORD(STACK[0x3B0]) = 0;
  }
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
  }
  uint64_t v488 = *(void *)v62;
  *(double *)(v62 + 15888) = *(float *)(v62 + *(void *)(*(void *)v62 - 24) + 80);
  if (*(unsigned char *)(v62 + 26))
  {
    BlueFin::GlPeNavGnssKF::UpdateHeading((BlueFin::GlPeNavGnssKF *)v62);
    uint64_t v488 = *(void *)v62;
  }
  uint64_t v489 = *(void *)(v488 - 24);
  uint64_t v490 = v62 + v489;
  if (!*(unsigned char *)(v62 + v489 + 241) || *(float *)(v490 + 184) > 0.34906585)
  {
    *(_DWORD *)(v62 + 2176) = *(_DWORD *)(v490 + 200);
    uint64_t v489 = *(void *)(v488 - 24);
  }
  uint64_t v491 = v62 + v489;
  if (!*(unsigned char *)(v491 + 240)
    || *(unsigned char *)(v491 + 241)
    && sqrt(*(double *)(v491 + 112) * *(double *)(v491 + 112) + *(double *)(v491 + 104) * *(double *)(v491 + 104)) < 3.0)
  {
    *(_DWORD *)(v62 + 2180) = *(_DWORD *)(v491 + 200);
  }
  if (!*(unsigned char *)(v62 + 1560)) {
    goto LABEL_476;
  }
  if (v121)
  {
    double v492 = *(double *)(v62 + 4888);
    BlueFin::lla2ned((double *)(v62 + *(void *)(v488 - 24) + 8), (double *)v121, 0, (double *)&STACK[0x1290]);
    int v493 = *(_DWORD *)(*(void *)(v62 + 2248) + 8);
    float v494 = v492;
    if ((v493 - 1) >= 2) {
      float v494 = 300.0;
    }
    float v495 = 150.0;
    if (*(float *)&STACK[0x2A0] >= 50.0) {
      float v495 = *(float *)&STACK[0x2A0] * 3.0;
    }
    if (v494 < v495) {
      float v494 = v495;
    }
    if (*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298] + *(double *)&STACK[0x1290] * *(double *)&STACK[0x1290] <= (float)(v494 * v494))
    {
      *(unsigned char *)(v62 + 1600) = 0;
      uint64_t v488 = *(void *)v62;
      uint64_t v498 = v62 + *(void *)(*(void *)v62 - 24);
      *(_OWORD *)(v498 + 32) = *(_OWORD *)(v498 + 8);
      *(void *)(v498 + 48) = *(void *)(v498 + 24);
    }
    else
    {
      unsigned int v496 = ++*(unsigned char *)(v62 + 1600);
      if (v496 > 0xA)
      {
        uint64_t v497 = 5;
        goto LABEL_475;
      }
      uint64_t v488 = *(void *)v62;
    }
  }
  else
  {
    int v493 = *(_DWORD *)(*(void *)(v62 + 2248) + 8);
  }
  BOOL v499 = (v493 - 5) < 2;
  *(_OWORD *)&STACK[0x1A60] = *(_OWORD *)(v62 + 2616);
  STACK[0x1A70] = *(void *)(v62 + 2632);
  BlueFin::lla2ned((double *)&STACK[0x1A60], (double *)(v62 + *(void *)(v488 - 24) + 8), 0, (double *)&STACK[0x1290]);
  if (sqrt(*(double *)&STACK[0x1298] * *(double *)&STACK[0x1298] + *(double *)&STACK[0x1290]
                                                                  * *(double *)&STACK[0x1290]) <= dbl_263BBC590[v499])
  {
LABEL_476:
    char v500 = BlueFin::CheckCovMat((BlueFin *)(v62 + 32), (const BlueFin::BigMatrix *)0x6F);
    uint64_t v501 = *(void *)v62;
    if ((v500 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v501 + 24))(v62, 18);
      return;
    }
    uint64_t v502 = *(void *)v62;
    uint64_t v503 = v62 + *(void *)(v501 - 24);
    if (*(float *)(v503 + 128) >= 0.5)
    {
      unsigned int v504 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v503 + 352));
      *(unsigned char *)(v503 + 240) = v504 > 4;
      if (v504 <= 4)
      {
        char v507 = 0;
        BOOL v508 = 0;
        uint64_t v509 = *(void *)(v502 - 24);
        goto LABEL_485;
      }
    }
    else
    {
      *(unsigned char *)(v503 + 240) = 1;
    }
    uint64_t v509 = *(void *)(v502 - 24);
    double v505 = sqrt(*(double *)(v62 + v509 + 112) * *(double *)(v62 + v509 + 112)+ *(double *)(v62 + v509 + 104) * *(double *)(v62 + v509 + 104));
    double v506 = *(float *)(v62 + v509 + 128) + *(float *)(v62 + v509 + 128);
    if (v506 < 0.5) {
      double v506 = 0.5;
    }
    BOOL v508 = v505 > v506;
    char v507 = 1;
LABEL_485:
    uint64_t v510 = v62 + v509;
    if (*(unsigned char *)(v510 + 242)) {
      char v511 = 1;
    }
    else {
      char v511 = v508;
    }
    *(unsigned char *)(v510 + 241) = v507 & v511;
    uint64_t v512 = v62 + *(void *)(v502 - 24);
    if (!*(unsigned char *)(v512 + 242) && v508) {
      *(unsigned char *)(v512 + 242) = v507;
    }
    unint64_t v513 = *(void *)(v62 + 16);
    LODWORD(STACK[0x1740]) = 0;
    STACK[0x1748] = (unint64_t)&STACK[0x1754];
    LOBYTE(STACK[0x1750]) = 8;
    *(_OWORD *)&STACK[0x1754] = 0u;
    *(_OWORD *)&STACK[0x1764] = 0u;
    *(_OWORD *)&STACK[0x1778] = xmmword_263BBA380;
    STACK[0x1788] = (unint64_t)vdup_n_s32(0x42C60000u);
    LODWORD(STACK[0x1790]) = 1120272384;
    BlueFin::stDops::stDops((uint64_t)&STACK[0x1A60], (uint64_t)&STACK[0x1740]);
    STACK[0x1AB8] = v513;
    uint64_t v514 = **(unsigned int **)(v62 + 8);
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(v62 + *(void *)(*(void *)v62 - 24) + 264), (uint64_t)&STACK[0x1290]);
    STACK[0x630] = *(void *)(v62 + *(void *)(*(void *)v62 - 24) + 88);
    LODWORD(STACK[0x708]) = **(_DWORD **)(v62 + 2240);
    LODWORD(STACK[0x6C0]) = 0;
    BlueFin::GlPeDops::GetDops((uint64_t)&STACK[0x1A60], v514);
    uint64_t v515 = v62 + *(void *)(*(void *)v62 - 24);
    if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v515 + 264)) < 8) {
      goto LABEL_495;
    }
    v516.n128_u32[0] = STACK[0x1264];
    if (*(float *)&STACK[0x1264] > 2.0) {
      goto LABEL_495;
    }
    v516.n128_u32[0] = *(_DWORD *)(v515 + 80);
    if (v516.n128_f32[0] > 25.0) {
      goto LABEL_495;
    }
    uint64_t v517 = *(void *)(v62 + 8);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x708], (unsigned int *)&STACK[0x714], 0x13u, (const void **)(v515 + 264));
    STACK[0x1290] = (unint64_t)&STACK[0x129C];
    LOBYTE(STACK[0x1298]) = 19;
    *(_OWORD *)&STACK[0x129C] = 0u;
    *(_OWORD *)&STACK[0x12AC] = 0u;
    *(_OWORD *)&STACK[0x12BC] = 0u;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12D8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&STACK[0x708], (int **)&STACK[0x1290]);
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x708], (uint64_t)&STACK[0x1290]);
    long long v518 = *(_OWORD *)&STACK[0x12CC];
    *(_OWORD *)&STACK[0x734] = *(_OWORD *)&STACK[0x12BC];
    *(_OWORD *)&STACK[0x744] = v518;
    *(_OWORD *)&STACK[0x750] = *(_OWORD *)&STACK[0x12D8];
    long long v519 = *(_OWORD *)&STACK[0x12AC];
    *(_OWORD *)&STACK[0x714] = *(_OWORD *)&STACK[0x129C];
    *(_OWORD *)&STACK[0x724] = v519;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&STACK[0x708]);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&STACK[0x630], (unsigned int *)&STACK[0x63C], 0x13u, (const void **)(v517 + 184));
    STACK[0x1290] = (unint64_t)&STACK[0x129C];
    LOBYTE(STACK[0x1298]) = 19;
    *(_OWORD *)&STACK[0x129C] = 0u;
    *(_OWORD *)&STACK[0x12AC] = 0u;
    *(_OWORD *)&STACK[0x12BC] = 0u;
    *(_OWORD *)&STACK[0x12CC] = 0u;
    *(_OWORD *)&STACK[0x12D8] = 0u;
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&STACK[0x630], (int **)&STACK[0x1290], (int **)&STACK[0x708]);
    BlueFin::GlSetBase::operator=((uint64_t)&STACK[0x630], (uint64_t)&STACK[0x1290]);
    long long v520 = *(_OWORD *)&STACK[0x12CC];
    *(_OWORD *)&STACK[0x65C] = *(_OWORD *)&STACK[0x12BC];
    *(_OWORD *)&STACK[0x66C] = v520;
    *(_OWORD *)&STACK[0x678] = *(_OWORD *)&STACK[0x12D8];
    long long v521 = *(_OWORD *)&STACK[0x12AC];
    *(_OWORD *)&STACK[0x63C] = *(_OWORD *)&STACK[0x129C];
    *(_OWORD *)&STACK[0x64C] = v521;
    uint64_t v522 = LOBYTE(STACK[0x638]);
    LOBYTE(STACK[0x5D8]) = v522;
    memcpy(&STACK[0x5E0], (const void *)STACK[0x630], 4 * v522);
    LOWORD(STACK[0x5DA]) = 0;
    LOBYTE(STACK[0x5D9]) = 0;
    LODWORD(STACK[0x5DC]) = STACK[0x5E0];
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x5D8]);
    if (LOBYTE(STACK[0x5D9]) == LOBYTE(STACK[0x5D8]))
    {
LABEL_495:
      if ((*(unsigned char *)(v588 + 1) & 0x20) != 0
        && (*(unsigned int (**)(uint64_t, __n128))(*(void *)v62 + 48))(v62, v516))
      {
        if (*(unsigned char *)(vars8 + 241))
        {
          v516.n128_u32[0] = *(_DWORD *)(vars8 + 176);
          int v523 = *(_DWORD *)(vars8 + 184);
          LODWORD(STACK[0x370]) = v516.n128_u32[0];
          LODWORD(STACK[0x378]) = v523;
        }
        if (*(unsigned char *)(vars8 + 240))
        {
          __n128 v516 = *(__n128 *)(vars8 + 104);
          *(__n128 *)&STACK[0x328] = v516;
          v516.n128_u64[0] = *(void *)(vars8 + 120);
          STACK[0x338] = v516.n128_u64[0];
          v516.n128_u32[0] = *(_DWORD *)(vars8 + 128);
          int v524 = *(_DWORD *)(vars8 + 140);
          LODWORD(STACK[0x340]) = v516.n128_u32[0];
          LODWORD(STACK[0x34C]) = v524;
        }
      }
      unsigned int v525 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v62 + 64))(v62, v516);
      float v526 = *(float *)(v62 + 2184);
      unsigned int v527 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 72))(v62);
      v528 = (float64x2_t *)(v62 + *(void *)(*(void *)v62 - 24));
      double v529 = v528[6].f64[1];
      *(double *)&STACK[0x1290] = v529;
      float64x2_t v589 = v528[7];
      *(float64x2_t *)&STACK[0x1298] = v589;
      double SpdSmoothCoeff = 1.0;
      BlueFin::GlPeSlowFilter::SubmitAltEst(v62 + 2640, v528[1].f64[1], *(double *)(*(void *)(*(void *)(v62 + 40) + 40) + 40) * 2.25, 1.0, 0.0, 0);
      double v531 = sqrt(vmulq_f64(v589, v589).f64[0] + v529 * v529);
      if ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) <= 1)
      {
        unsigned int v532 = (int)(float)((float)v525 / (float)(v526 * 1000.0));
        char v534 = (double)v527 * 0.001 > 30.0 || v532 < 4;
        double SpdSmoothCoeff = BlueFin::GlPeSlowFilter::GetSpdSmoothCoeff((BlueFin::GlPeSlowFilter *)(v62 + 2640), v534, *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200), v532, v531);
      }
      BlueFin::GlPeSlowFilter::SubmitSpeedEst((BlueFin::GlPeSlowFilter *)(v62 + 2640), v531, SpdSmoothCoeff);
      uint64_t v535 = v62 + *(void *)(*(void *)v62 - 24);
      if (*(unsigned char *)(v535 + 240))
      {
        double v536 = 0.5;
        if (v531 > 3.0)
        {
          unsigned int v537 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v535 + 352));
          double v536 = 0.5;
          if (v537 > 5) {
            double v536 = 1.0;
          }
        }
        BlueFin::GlPeSlowFilter::SubmitVelEst(v62 + 2640, (float64x2_t *)&STACK[0x1290], v536);
      }
      double v538 = *(float *)&STACK[0x378];
      if (v538 >= 0.785398163 || v531 <= 0.5)
      {
        int v541 = *(_DWORD *)(v62 + 2284);
        if (v541 == -7200001
          || ((*(_DWORD *)(*(void *)(v62 + 2248) + 8) - 1) >= 2 ? (int v542 = 30000) : (int v542 = 300000),
              *(_DWORD *)(v62 + *(void *)(*(void *)v62 - 24) + 200) > (v542 + v541)
           || BlueFin::GlPeNavGnssMotion::IsNotMoving((BlueFin::GlPeNavGnssMotion *)(v62 + 4792), 0.5)))
        {
          double v539 = dbl_263BBC5A0[v531 < 1.0];
          float v540 = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)v62);
LABEL_525:
          BlueFin::GlPeSlowFilter::SubmitTrackRadEst((BlueFin::GlPeSlowFilter *)(v62 + 2640), v540, v539);
          if (BlueFin::GlUtils::m_ucEnabled) {
            BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6E);
          }
          return;
        }
        double v539 = 0.1;
      }
      else
      {
        double v539 = dbl_263BBC5B0[v538 < 0.34906585];
      }
      float v540 = *(float *)&STACK[0x370];
      goto LABEL_525;
    }
    while (1)
    {
      unint64_t v543 = LOWORD(STACK[0x5DA]);
      if (v543 >= 0x23F)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      int v544 = *((char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v543 + 1);
      if (v544 != 3 && v544 != 0) {
        goto LABEL_546;
      }
      STACK[0x708] = (unint64_t)&STACK[0x714];
      LOBYTE(STACK[0x710]) = 19;
      *(_OWORD *)&STACK[0x714] = 0u;
      *(_OWORD *)&STACK[0x724] = 0u;
      *(_OWORD *)&STACK[0x734] = 0u;
      *(_OWORD *)&STACK[0x744] = 0u;
      *(_OWORD *)&STACK[0x750] = 0u;
      *((_DWORD *)&STACK[0x714] + (v543 >> 5)) |= 1 << v543;
      v546 = *(uint64_t (**)(uint64_t))(*(void *)v62 + 192);
      uint64_t v547 = v62 + *(void *)(*(void *)v62 - 24);
      *(_OWORD *)&STACK[0x570] = *(_OWORD *)(v547 + 8);
      STACK[0x580] = *(void *)(v547 + 24);
      uint64_t v548 = **(unsigned int **)(v62 + 2240);
      char v549 = v546(v62);
      BlueFin::GlPeNavUtil::ComputeRangeResidVec(v62, (uint64_t)&STACK[0x708], (uint64_t)&STACK[0x570], v548, 0, 0, 0, 1, v549, 1);
      unint64_t v550 = STACK[0x708];
      if (*(_DWORD *)STACK[0x708]) {
        goto LABEL_535;
      }
      unint64_t v557 = LOBYTE(STACK[0x710]);
      if (v557 >= 2) {
        break;
      }
LABEL_536:
      uint64_t v552 = v62 + 4 * *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v543);
      float v553 = *(float *)(v552 + 3052);
      float v554 = *(float *)(v552 + 3804);
      BOOL v555 = v553 <= 0.75 || v554 <= 600.0;
      if (!v555 || (v553 > 0.99 ? (BOOL v556 = v554 <= 500.0) : (BOOL v556 = 1), !v556))
      {
        *(_DWORD *)(*(void *)(v62 + 1704) + 4 * (v543 >> 5)) |= 1 << v543;
        *(_DWORD *)(v552 + 3052) = 0;
        *(_DWORD *)(v552 + 3804) = 0;
      }
LABEL_546:
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&STACK[0x5D8]);
      if (LOBYTE(STACK[0x5D9]) == LOBYTE(STACK[0x5D8])) {
        goto LABEL_495;
      }
    }
    if (!*(_DWORD *)(v550 + 4))
    {
      uint64_t v558 = 2;
      while (v557 != v558)
      {
        if (*(_DWORD *)(v550 + 4 * v558++))
        {
          if (v558 - 1 < v557) {
            goto LABEL_535;
          }
          goto LABEL_536;
        }
      }
      goto LABEL_536;
    }
LABEL_535:
    float v551 = *(double *)(STACK[0x1290] + 8);
    LOBYTE(STACK[0x508]) = *((unsigned char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v543);
    LODWORD(STACK[0x50C]) = v544;
    LOWORD(STACK[0x510]) = v543;
    BlueFin::GlPePolaroidGnssKF::UpdateFilter((BlueFin::GlPePolaroidGnssKF *)(v62 + 3040), 1, v551, (const BlueFin::GlSignalId *)&STACK[0x508]);
    goto LABEL_536;
  }
  uint64_t v497 = 9;
LABEL_475:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 24))(v62, v497);
}

void BlueFin::GlPeNavGnssKF::Update(BlueFin::GlPeNavGnssKF *this, uint64_t a2, int *a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)this;
  uint64_t v6 = *(void *)(*(void *)this - 24);
  uint64_t v7 = (char *)this + v6;
  double v8 = *(double *)((char *)this + v6 + 8);
  double v9 = *(double *)((char *)this + v6 + 16);
  v507[0] = v8;
  v507[1] = v9;
  double v10 = *(double *)((char *)this + v6 + 24);
  v507[2] = v10;
  unsigned int v504 = v506;
  char v505 = 8;
  memset(v506, 0, 32);
  long long v501 = xmmword_263BBC570;
  BOOL v499 = &v502;
  char v500 = v503;
  v503[0] = 0;
  v503[1] = (char *)&v501 + 8;
  *(void *)&double v11 = COERCE_UNSIGNED_INT(3.0);
  if ((*(_DWORD *)(*((void *)this + 281) + 8) - 1) < 2) {
    *(float *)&double v11 = 0.75;
  }
  if (fabsf(*((float *)this + 331)) > *(float *)&v11
    && BlueFin::GlPeNavGnssMotion::IsNotTurning((BlueFin::GlPeNavGnssKF *)((char *)this + 4792), v11))
  {
    float TrueHeadingRad = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad(this);
    int v13 = *((_DWORD *)v7 + 50);
    *((float *)this + 392) = TrueHeadingRad;
    *((_DWORD *)this + 393) = v13;
    *((double *)this + 197) = v8;
    *((double *)this + 198) = v9;
    *((double *)this + 199) = v10;
    uint64_t v6 = *(void *)(v5 - 24);
  }
  double v451 = *(double *)((char *)this + v6 + 152);
  if (*((unsigned char *)this + 26))
  {
    BOOL v14 = 0;
    BOOL v15 = 0;
    goto LABEL_30;
  }
  float v16 = *(double *)(*(void *)(*((void *)this + 5) + 32) + 32);
  double v17 = sqrtf(v16);
  BOOL v18 = BlueFin::GlPeNavGnssKF::LeftXtcRecently(this);
  uint64_t v19 = *((void *)this + 281);
  if (v18 || v17 >= 3.14159265)
  {
    int v20 = *(_DWORD *)(v19 + 8);
  }
  else
  {
    int v20 = *(_DWORD *)(v19 + 8);
    if ((v20 - 3) > 0xFFFFFFFD)
    {
      BOOL v21 = 0;
LABEL_15:
      int v22 = *((unsigned __int8 *)this + 2932);
LABEL_17:
      uint64_t v23 = *((void *)this + 284);
      if (*(__int16 *)(v23 + 2) < 1 || *(unsigned char *)(v23 + 45))
      {
        unsigned int v24 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this);
        BOOL v14 = v17 >= 3.14159265 || v24 > 0x7D0;
      }
      else
      {
        BOOL v14 = 1;
      }
      goto LABEL_26;
    }
  }
  if (v20 == 3)
  {
    BOOL v21 = *(_DWORD *)(v19 + 16) != 1;
    goto LABEL_15;
  }
  int v22 = *((unsigned __int8 *)this + 2932);
  BOOL v21 = 1;
  BOOL v14 = 1;
  if (v20 != 6) {
    goto LABEL_17;
  }
LABEL_26:
  if (v22) {
    BOOL v15 = v21;
  }
  else {
    BOOL v15 = 0;
  }
  uint64_t v4 = *(void *)this;
LABEL_30:
  if (*((unsigned char *)this + *(void *)(v4 - 24) + 240)) {
    int v26 = 20;
  }
  else {
    int v26 = 4;
  }
  int v27 = v26 | ((*(_DWORD *)(*((void *)this + 281) + 8) - 1) < 2);
  if ((*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(v4 + 56))(this) > 0x5A) {
    v27 |= 2u;
  }
  int v28 = *(_DWORD *)(*((void *)this + 284) + 8);
  if (v28 && (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - v28) >> 5 < 0x753) {
    v27 |= 0x20u;
  }
  if ((*((unsigned char *)a3 + 1) & 0x40) != 0 && BlueFin::GlPeNavGnssKF::PolaroidLeftTunnelRecently(this, 0x4E20u)) {
    v27 |= ((*(_DWORD *)(*((void *)this + 281) + 8) - 3) < 3) << 7;
  }
  double v29 = (double *)((char *)this + *(void *)(*(void *)this - 24));
  unsigned int v30 = v27 & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)v29 + 241));
  double v31 = sqrt(v29[14] * v29[14] + v29[13] * v29[13]);
  uint64_t v32 = *((void *)v29 + 1);
  uint64_t v33 = *((void *)v29 + 2);
  uint64_t v34 = *((void *)v29 + 3);
  float v35 = BlueFin::GlPeNavGnssKF::GetTrueHeadingRad(this);
  unsigned int v36 = *((_DWORD *)v29 + 50);
  *(double *)&long long v536 = v31;
  *((void *)&v536 + 1) = v32;
  *(void *)&long long v537 = v33;
  *((void *)&v537 + 1) = v34;
  *(void *)&long long v538 = v32;
  *((void *)&v538 + 1) = v33;
  *(void *)&long long v539 = v34;
  *((void *)&v539 + 1) = __PAIR64__(v36, LODWORD(v35));
  *(void *)&long long v540 = __PAIR64__(v30, LODWORD(v35));
  BlueFin::GlPeGnssNavUpa::SetUrbanPosAssist((uint64_t)this + 2280, (uint64_t)&v536, (uint64_t)&v527);
  BOOL v498 = 0;
  BlueFin::GlPeNavGnssKF::UpdateHeadingConsistentWithDeals(this, v528[24], &v498);
  if (v15 && v14) {
    BlueFin::GlPeNavGnssKF::DealsMeasUpdate(this, (BlueFin::BigMatrix *)&v499, (*a3 >> 8) & 1);
  }
  int v37 = (_DWORD *)*((void *)this + 281);
  int v38 = v37[4];
  BOOL v454 = v15;
  if ((v37[2] - 1) > 1)
  {
    BOOL v457 = 0;
    uint64_t v39 = a2;
  }
  else
  {
    BOOL v457 = (v38 & 0xFFFFFFFE) == 2;
    uint64_t v39 = a2;
    if (*((unsigned char *)this + 26) && (v38 & 0xFFFFFFFE) == 2)
    {
      BOOL v457 = 1;
LABEL_52:
      BOOL v40 = 1;
      goto LABEL_54;
    }
  }
  if (v38 == 7) {
    goto LABEL_52;
  }
  BOOL v40 = v38 == 1 && v37[5] == 1;
LABEL_54:
  BOOL v455 = v14;
  float v495 = v497;
  unsigned __int8 v496 = 8;
  memset(v497, 0, 32);
  double v492 = v494;
  unsigned __int8 v493 = 8;
  memset(v494, 0, 32);
  uint64_t v489 = v491;
  char v490 = 8;
  memset(v491, 0, 32);
  long long v486 = v488;
  unsigned __int8 v487 = 8;
  memset(v488, 0, 32);
  float v483 = v485;
  char v484 = 19;
  memset(v485, 0, sizeof(v485));
  int v480 = v482;
  char v481 = 19;
  memset(v482, 0, sizeof(v482));
  v476[1] = 0;
  float v477 = v479;
  unsigned __int8 v478 = 19;
  memset(v479, 0, sizeof(v479));
  v475[0] = v476;
  v475[1] = 0x100000000;
  v476[0] = 0;
  int v41 = *((char *)this + 1560);
  if (v41 >= 1)
  {
    BOOL v462 = v40;
    uint64_t v42 = 0;
    unsigned int v456 = 0;
    LOBYTE(v43) = 0;
    uint64_t v44 = 0;
    float v463 = (char *)this + 264;
    float v464 = (char *)this + 352;
    char v461 = (char *)this + 256;
    float v458 = (BlueFin::GlPeNavGnssKF *)((char *)this + 32);
    uint64_t v45 = 0x409F400000000000;
    double v452 = (BlueFin::GlPeNavGnssKF *)((char *)this + 3040);
    int32x2_t v453 = vdup_n_s32(0x42C60000u);
    double v46 = 2.0;
    while (1)
    {
      uint64_t v47 = v44;
      uint64_t v48 = v39 + 56 * v42;
      int v50 = (const BlueFin::GlSignalId *)(v48 + 32);
      char v49 = *(unsigned char *)(v48 + 32);
      LOBYTE(v517) = v49;
      HIDWORD(v517) = *(_DWORD *)(v48 + 36);
      __int16 v518 = *(_WORD *)(v48 + 40);
      int v52 = (int *)(v48 + 44);
      int v51 = *(_DWORD *)(v48 + 44);
      if (v51 != 10)
      {
        if (v51 == 2)
        {
          uint64_t v53 = *(void *)(*(void *)this - 24);
          uint64_t v54 = (char *)this + 352;
        }
        else
        {
          if (v51) {
            break;
          }
          uint64_t v53 = *(void *)(*(void *)this - 24);
          uint64_t v54 = (char *)this + 264;
        }
        if (((unint64_t)*(unsigned int *)(*(void *)&v54[v53] + 4 * (v518 >> 5)) >> (v518 & 0x1F))) {
          break;
        }
      }
      uint64_t v44 = v47;
LABEL_283:
      if (++v42 >= (char)v41) {
        goto LABEL_286;
      }
    }
    v472[0] = v49;
    int v473 = *(_DWORD *)(v48 + 36);
    __int16 v474 = *(_WORD *)(v48 + 40);
    unsigned int v55 = *a3;
    *(void *)&long long v511 = v512;
    *((void *)&v511 + 1) = 0x100000000;
    v512[0] = 0;
    v512[1] = 0;
    double v508 = COERCE_DOUBLE(v510);
    *(void *)&double v509 = 0x100000000;
    v510[0] = 0;
    v510[1] = 0;
    *((void *)&v536 + 1) = 0xC0000000CLL;
    long long v537 = 0u;
    long long v538 = 0u;
    long long v539 = 0u;
    long long v540 = 0u;
    long long v541 = 0u;
    long long v542 = 0u;
    uint64_t v543 = 0;
    uint64_t v56 = *((void *)this + 281);
    int v57 = *(_DWORD *)(v56 + 8);
    unsigned int v58 = v57 - 3;
    *(void *)&long long v536 = &v537;
    BOOL v59 = (v57 - 3) <= 2 && **((_DWORD **)this + 1) < 0x493E0u;
    unsigned int v60 = *(_DWORD *)(v56 + 16) & 0xFFFFFFFE;
    if (fabsf(*((float *)this + 331)) >= 3.5)
    {
      int v62 = 1219;
    }
    else
    {
      char v61 = (v57 - 1) < 2 || v59;
      if (v60 != 2) {
        char v61 = 0;
      }
      if (v61) {
        int v62 = 1223;
      }
      else {
        int v62 = 1219;
      }
    }
    if (v58 >= 0xFFFFFFFE) {
      v62 |= 0x200u;
    }
    unsigned int v63 = v62 & 0xFFFFEFFF | (((v55 >> 3) & 1) << 12);
    if (*(_DWORD *)(v39 + 56 * v42 + 24) == -1) {
      int v64 = v63 | 0x40000;
    }
    else {
      int v64 = v63;
    }
    uint64_t v65 = *(void *)this;
    if ((v55 & 0x4000) != 0)
    {
      BOOL v66 = v60 != 2 || *((unsigned char *)this + *(void *)(v65 - 24) + 242) == 0;
      BOOL v67 = !v66 && v58 >= 0xFFFFFFFE;
      if (v67) {
        v64 |= 0x6000u;
      }
    }
    unsigned int v68 = (char *)this + *(void *)(v65 - 24);
    uint64_t v69 = *((void *)v68 + 11);
    int v70 = **((_DWORD **)this + 280);
    double v71 = *((float *)v68 + 52);
    *(double *)&int32x2_t v72 = *((float *)v68 + 54);
    double v73 = *((float *)v68 + 56);
    double v74 = *((float *)v68 + 58);
    double v75 = *((float *)v68 + 55);
    *(void *)&long long v527 = &v536;
    *((void *)&v527 + 1) = v68 + 8;
    *(void *)v528 = v69;
    *(_DWORD *)&v528[8] = v70;
    *(_DWORD *)&v528[12] = 3;
    *(_DWORD *)&v528[16] = v64;
    *(void *)&v528[24] = v68 + 104;
    *(void *)&v528[32] = 0;
    *(void *)&long long v529 = v68 + 152;
    *((double *)&v529 + 1) = v71;
    int32x2_t v530 = v72;
    double v531 = v73;
    double v532 = v74;
    uint64_t v533 = 0;
    double v534 = v75;
    *(void *)&long long v519 = &v511;
    *((void *)&v519 + 1) = &v508;
    long long v520 = &v499;
    long long v521 = v475;
    uint64_t v523 = 0;
    uint64_t v524 = 0;
    double v522 = 0.0;
    unsigned int v525 = &v504;
    uint64_t v526 = 0;
    if ((*(unsigned int (**)(void, long long *, long long *, uint64_t, _UNKNOWN **))(**((void **)this + 2)
                                                                                              + 16))(*((void *)this + 2), &v527, &v519, v39 + 56 * v42, &BlueFin::GlSet128::BIT0))
    {
      uint64_t v44 = v47;
      if (*v52 == 2)
      {
        BlueFin::GlSetBase::Remove((uint64_t)&v464[*(void *)(*(void *)this - 24)], v474);
        uint64_t v82 = BlueFin::GlSignalIdArray::Get(*(void *)(*((void *)this + 1) + 19176), (uint64_t)v472);
        if (v82) {
          *(unsigned char *)(v82 + 449) = 39;
        }
      }
      else
      {
        if (*v52)
        {
          float v447 = "false";
          DeviceFaultNotify("glpe_navgnsskf.cpp", 4492, "RunComputeZRH", (char)"false");
          double v448 = "glpe_navgnsskf.cpp";
          int v449 = 4492;
LABEL_631:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v448, v449, v447);
        }
        BlueFin::GlSetBase::Remove((uint64_t)&v463[*(void *)(*(void *)this - 24)], v474);
        uint64_t v76 = BlueFin::GlSignalIdArray::Get(*(void *)(*((void *)this + 1) + 19176), (uint64_t)v472);
        if (v76) {
          *(unsigned char *)(v76 + 448) = 39;
        }
      }
      goto LABEL_101;
    }
    double v77 = *(double *)(v511 + 8);
    double v78 = *(double *)(*(void *)&v508 + 8);
    if (!*((unsigned char *)this + 26))
    {
      int v83 = *(_DWORD *)(v48 + 44);
      if (v83 == 2)
      {
        uint64_t v112 = (double *)v500[1];
        double v113 = v112[2];
        double v114 = v112[4];
        uint64_t v115 = v45;
        double v116 = v112[6];
        __float2 v117 = __sincosf_stret(*(float *)((char *)this + *(void *)(*(void *)this - 24) + 176));
        uint64_t v112[2] = v114 * v117.__sinval + v113 * v117.__cosval;
        double v118 = v114 * v117.__cosval;
        double v46 = 2.0;
        uint64_t v112[4] = (v118 - v113 * v117.__sinval) * *((float *)this + 331);
        double v119 = -v116;
        uint64_t v45 = v115;
        v112[6] = v119;
      }
      else if (!v83)
      {
        BOOL v84 = (void *)v500[1];
        uint64_t v85 = v84[3];
        uint64_t v86 = v84[5];
        *(void *)&long long v536 = v84[1];
        *((void *)&v536 + 1) = v85;
        v544[0] = 0x300000001;
        *(void *)&long long v537 = v86;
        BlueFin::Matrix::mult((BlueFin::Matrix *)&v527, (BlueFin::GlPeNavGnssKF *)((char *)this + 1336), 1, (const BlueFin::Matrix *)&v536, COERCE_DOUBLE(0x300000001));
        int v87 = v535;
        BOOL v88 = (void *)v500[1];
        v88[1] = v527;
        BOOL v89 = v87 == 1;
        if (v87 == 1) {
          char v90 = (char *)&v527 + 8;
        }
        else {
          char v90 = &v528[16];
        }
        double v88[3] = *(void *)v90;
        char v91 = v528;
        if (!v89) {
          char v91 = (char *)&v529 + 8;
        }
        v88[5] = *(void *)v91;
      }
    }
    double v79 = v77 - v78;
    int v80 = *v52;
    if (*v52)
    {
      uint64_t v44 = v47;
      int v81 = v462;
    }
    else
    {
      if ((*((unsigned char *)a3 + 1) & 0x40) == 0)
      {
        v469[0] = v517;
        int v470 = HIDWORD(v517);
        __int16 v471 = v518;
        uint64_t v92 = *((void *)this + 2);
        LODWORD(v527) = 0;
        *((void *)&v527 + 1) = &v528[4];
        v528[0] = 8;
        memset(&v528[4], 0, 32);
        long long v529 = xmmword_263BBA380;
        int32x2_t v530 = v453;
        LODWORD(v531) = 1120272384;
        BlueFin::stDops::stDops((uint64_t)&v536, (uint64_t)&v527);
        *((void *)&v541 + 1) = v92;
        uint64_t v93 = **((unsigned int **)this + 1);
        BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v480, (uint64_t)&v511);
        double v508 = *(double *)((char *)this + *(void *)(*(void *)this - 24) + 88);
        LODWORD(v515) = **((_DWORD **)this + 280);
        LODWORD(v513) = 0;
        BlueFin::GlPeDops::GetDops((uint64_t)&v536, v93);
        *(_DWORD *)&v480[4 * (v471 >> 5)] |= 1 << v471;
        uint64_t v94 = *((void *)this + 5);
        double v95 = *(double *)(*(void *)(v94 + 8) + 8);
        double v96 = *(double *)(*(void *)(v94 + 24) + 24);
        if (!*(_WORD *)(*((void *)this + 284) + 2)
          && (*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this) <= 0x7CF
          && *((float *)&v525 + 1) < 99.0)
        {
          uint64_t v459 = v45;
          double v97 = *((double *)this + 611);
          double v98 = fmax(v97 * *((float *)&v525 + 1), 20.0);
          if (*((double *)this + 380) >= v98) {
            double v99 = v98;
          }
          else {
            double v99 = *((double *)this + 380);
          }
          if (*((float *)&v525 + 1) < 3.0
            && BlueFin::GlSignalIdSet::CntSecondarySignalSvIdSet((BlueFin::GlSignalIdSet *)&v477, 2))
          {
            int v100 = (void *)*((void *)this + 5);
            float v101 = *(double *)(v100[1] + 8);
            float v102 = *(double *)(v100[3] + 24);
            float v103 = v101 + v102;
            float v104 = *(double *)(v100[5] + 40);
            float v105 = sqrtf(v103 + v104);
            float v106 = v105 + v105;
            float v107 = v97;
            if (v106 <= v107) {
              float v106 = v97;
            }
            double v108 = v106;
            if (v99 >= v108) {
              double v99 = v108;
            }
          }
          uint64_t v45 = v459;
          if (fabsf(*((float *)this + 331)) < 3.5 && *(_DWORD *)(*((void *)this + 281) + 16) == 3 && v99 > 100.0) {
            double v99 = 100.0;
          }
          *(double *)double v452 = v99;
        }
        uint64_t v109 = *((void *)this + 284);
        int v110 = *(__int16 *)(v109 + 2);
        BOOL v111 = v110 >= 1 && v110 < *(__int16 *)(v109 + 4);
        unsigned int v120 = *(_DWORD *)(*((void *)this + 281) + 8) - 3;
        BOOL v67 = __CFADD__(v120, 2);
        BOOL v121 = v120 < 0xFFFFFFFE;
        if (!v67) {
          BOOL v111 = 1;
        }
        int v122 = v121 ^ v111;
        if (v110 >= 1 && !v111) {
          int v122 = *(unsigned __int8 *)(v109 + 45) == 0;
        }
        float v123 = v95;
        float v124 = v96;
        float v125 = sqrtf(v123 + v124);
        uint64_t v126 = 40;
        if (*((unsigned char *)this + 26)) {
          uint64_t v127 = 40;
        }
        else {
          uint64_t v127 = 56;
        }
        if (*((unsigned char *)this + 26)) {
          uint64_t v126 = 56;
        }
        float v128 = *(double *)(*(void *)(*((void *)this + 5) + 8) + 8)
             + *(double *)(*(void *)(*((void *)this + 5) + 24) + 24)
             + *(double *)(*(void *)(*((void *)this + 5) + v127) + v127)
             + *(double *)(*(void *)(*((void *)this + 5) + v126) + v126);
        float v129 = (*(float (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 16))((char *)this + *(void *)(*(void *)this - 24));
        float v130 = v129 * v129;
        if (v130 >= v128) {
          float v128 = v130;
        }
        int v131 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this);
        double v46 = 2.0;
        if (BlueFin::GlPePolaroidGnssKF::Polaroid(v452, v79, (char)v47, v125, v131, (const BlueFin::GlSignalId *)v469, v128, v122))
        {
          double v132 = fabs(v79);
          BOOL v133 = v132 > 100.0;
          if (*((float *)&v525 + 1) < 5.0 && (char)v47 > 4) {
            BOOL v133 = 1;
          }
          if ((v122 | v133) == 1)
          {
            *(unsigned char *)(a2 + 56 * v42 + 48) = 0;
            int v135 = v471;
            if (v132 > 400.0) {
              *(_DWORD *)(*((void *)this + 202) + 4 * (v471 >> 5)) |= 1 << v471;
            }
            BlueFin::GlSetBase::Remove((uint64_t)&v463[*(void *)(*(void *)this - 24)], v135);
            BlueFin::GlSetBase::Remove((uint64_t)&v480, v471);
            uint64_t v136 = BlueFin::GlSignalIdArray::Get(*(void *)(*((void *)this + 1) + 19176), (uint64_t)v469);
            uint64_t v44 = v47;
            if (v136) {
              *(_WORD *)(v136 + 448) = 10280;
            }
LABEL_101:
            uint64_t v39 = a2;
LABEL_282:
            LOBYTE(v41) = *((unsigned char *)this + 1560);
            goto LABEL_283;
          }
          if ((char)v47 >= 5 && *((float *)&v525 + 1) >= 5.0)
          {
            double v137 = *(double *)v452 * *(double *)v452;
            if (v137 < *(double *)(v475[0] + 8)) {
              double v137 = *(double *)(v475[0] + 8);
            }
            *(double *)(v475[0] + 8) = v137;
          }
        }
      }
      uint64_t v138 = BlueFin::GlSignalIdArray::Get(*(void *)(*((void *)this + 1) + 19176), (uint64_t)&v517);
      if (v138) {
        *(unsigned char *)(v138 + 448) = 44;
      }
      uint64_t v44 = 0;
      unint64_t v139 = (unint64_t)v517 >> 5;
      int v140 = 1 << v517;
      float v141 = v495;
      *(_DWORD *)&v495[4 * v139] |= 1 << v517;
      unint64_t v142 = &v141[4 * v496 - 4];
      int v81 = v462;
      do
      {
        if (*(_DWORD *)v142)
        {
          unsigned int v143 = *(_DWORD *)v142 - (((*(_DWORD *)v142 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v142 >> 2) & 0x9249249));
          uint64_t v44 = ((v143 + (v143 >> 3)) & 0xC71C71C7) + v44 - 63 * (((v143 + (v143 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        v142 -= 4;
      }
      while (v142 >= v141);
      if (v79 < 20.0) {
        *(_DWORD *)&v489[4 * v139] |= v140;
      }
      *(_DWORD *)&v461[*(void *)(*(void *)this - 24)] |= 1u;
      int v80 = *v52;
    }
    if (v80 != 2)
    {
LABEL_252:
      int v190 = *v52;
      if ((*((unsigned char *)a3 + 1) & 0x40) != 0) {
        goto LABEL_262;
      }
      if (!v190 && BlueFin::GlPeNavGnssKF::UsedXtcRecently(this))
      {
        uint64_t v191 = *((void *)this + 281);
        if ((*(_DWORD *)(v191 + 8) - 1) <= 1 && (*(_DWORD *)(v191 + 16) & 0xFFFFFFFE) == 2) {
          *(double *)(v475[0] + 8) = *(double *)(v475[0] + 8) * 4.0;
        }
      }
      int v190 = *v52;
      char v192 = !v457;
      if (*v52) {
        char v192 = 1;
      }
      if (v192)
      {
LABEL_262:
        if ((v190 | 2) != 2) {
          goto LABEL_264;
        }
      }
      else
      {
        *(double *)(v475[0] + 8) = fmax(*(double *)(v475[0] + 8), 50.0);
      }
      if ((v81 & 1) == 0)
      {
        BlueFin::BigMatrix::ReShape(v458, 8, 8);
        int v193 = 1;
        BlueFin::BigMatrix::ReShape(&v499, 1, 8);
        unsigned int v194 = 9;
        goto LABEL_266;
      }
LABEL_264:
      int v193 = 0;
      unsigned int v194 = 13;
LABEL_266:
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 1, 0, v81, v79, *(double *)(v475[0] + 8));
      int v195 = *v52;
      if ((*v52 | 2) == 2)
      {
        uint64_t v39 = a2;
        if ((v81 & 1) == 0)
        {
          BlueFin::BigMatrix::ReShape(v458, 12, 12);
          uint64_t v39 = a2;
          if (v193)
          {
            uint64_t v196 = v194;
            if (v194 <= 0xC) {
              int v197 = 12;
            }
            else {
              int v197 = v194;
            }
            uint64_t v198 = (v197 + 1);
            do
            {
              for (uint64_t i = 1; i != 13; ++i)
              {
                if (v196 != i)
                {
                  uint64_t v200 = *((void *)this + 5);
                  *(void *)(*(void *)(v200 + 8 * v196) + 8 * i) = 0;
                  *(void *)(*(void *)(v200 + 8 * i) + 8 * v196) = 0;
                }
              }
              ++v196;
            }
            while (v196 != v198);
          }
        }
        int v195 = *v52;
      }
      else
      {
        uint64_t v39 = a2;
      }
      if (!v195) {
        *(_DWORD *)&v477[4 * (v518 >> 5)] |= 1 << v518;
      }
      goto LABEL_282;
    }
    if ((*((unsigned char *)a3 + 1) & 0x40) == 0)
    {
      __int16 v144 = v518;
      *(_DWORD *)&v483[4 * (v518 >> 5)] |= 1 << v518;
      uint64_t v145 = 64;
      if (!*((unsigned char *)this + 26)) {
        uint64_t v145 = 48;
      }
      uint64_t v146 = *((void *)this + 284);
      unsigned int v460 = v44;
      BOOL v147 = *(__int16 *)(v146 + 2) >= *(__int16 *)(v146 + 4) && *(unsigned char *)(v146 + 1) != 0;
      BOOL v148 = 0;
      uint64_t v149 = *((void *)this + 5);
      float v150 = *(double *)(*(void *)(v149 + 16) + 16);
      float v151 = *(double *)(*(void *)(v149 + 32) + 32);
      float v152 = v150 + v151;
      float v153 = *(double *)(*(void *)(v149 + v145) + v145);
      float v154 = sqrtf(v152 + v153);
      if ((char)v456 >= 2 && !v147)
      {
        float v155 = fabsf(*((float *)this + 331));
        double v156 = 3.0;
        if (v155 > 5.0)
        {
          double v156 = 10.0;
          if (v456 > 4) {
            double v156 = 4.0;
          }
          if (*(_DWORD *)(*((void *)this + 281) + 8) == 6) {
            double v156 = 17.5;
          }
          if (v155 < 15.0) {
            double v156 = (v155 + -5.0) * 0.1 + 3.0;
          }
        }
        *((double *)this + 381) = v156;
        BOOL v148 = v154 < 64.0 && fabs(v79) > v156;
      }
      if ((char)v43 > 6 || (double v157 = 99.0, v148))
      {
        uint64_t v158 = *((void *)this + 2);
        LODWORD(v527) = 0;
        *((void *)&v527 + 1) = &v528[4];
        v528[0] = 8;
        memset(&v528[4], 0, 32);
        long long v529 = xmmword_263BBA380;
        int32x2_t v530 = v453;
        LODWORD(v531) = 1120272384;
        BlueFin::stDops::stDops((uint64_t)&v536, (uint64_t)&v527);
        *((void *)&v541 + 1) = v158;
        unsigned int v450 = **((_DWORD **)this + 1);
        BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v483, (uint64_t)&v511);
        double v508 = *(double *)((char *)this + *(void *)(*(void *)this - 24) + 88);
        LODWORD(v515) = **((_DWORD **)this + 280);
        LODWORD(v513) = 0;
        BlueFin::GlPeDops::GetDops((uint64_t)&v536, v450);
        double v157 = *((float *)&v525 + 1);
      }
      double v159 = v79 * v157;
      if (v148)
      {
        uint64_t v44 = v460;
        if ((char)v43 > 3 || fabs(v159) > *((float *)this + 448))
        {
          BlueFin::GlSetBase::Remove((uint64_t)&v464[*(void *)(*(void *)this - 24)], v144);
          BlueFin::GlSetBase::Remove((uint64_t)&v483, v144);
          uint64_t v39 = a2;
          goto LABEL_282;
        }
      }
      else
      {
        uint64_t v44 = v460;
        if ((char)v43 >= 7 && (v157 < v46 || v157 == 99.0))
        {
          *((void *)this + 381) = 0x4000000000000000;
          float v160 = (char *)this + *(void *)(*(void *)this - 24);
          double v161 = 2.0;
          if (sqrt(*((double *)v160 + 14) * *((double *)v160 + 14) + *((double *)v160 + 13) * *((double *)v160 + 13)) < 3.0)
          {
            int v162 = *((_DWORD *)this + 571);
            double v161 = 1.5;
            if (v162 != -7200001)
            {
              int v163 = (*(_DWORD *)(*((void *)this + 281) + 8) - 1) >= 2 ? 30000 : 300000;
              if (*((_DWORD *)v160 + 50) <= (v163 + v162)) {
                double v161 = 1.0;
              }
            }
            *((double *)this + 381) = v161;
          }
          double v164 = fabs(v79);
          if (v154 < 64.0 && v164 > v161)
          {
            double v166 = v161 * v161;
            if (*(double *)(v475[0] + 8) >= v161 * v161) {
              double v166 = *(double *)(v475[0] + 8);
            }
            *(double *)(v475[0] + 8) = v166;
            uint64_t v167 = a2 + 56 * v42;
            if (*(double *)(v167 + 8) >= v161) {
              double v161 = *(double *)(v167 + 8);
            }
            *(double *)(v167 + 8) = v161;
          }
        }
      }
      float v168 = v159;
      *((float *)this + 448) = fabsf(v168);
      int v81 = v462;
    }
    uint64_t v169 = BlueFin::GlSignalIdArray::Get(*(void *)(*((void *)this + 1) + 19176), (uint64_t)&v517);
    if (v169) {
      *(unsigned char *)(v169 + 449) = 44;
    }
    unsigned int v43 = 0;
    unint64_t v170 = (unint64_t)v517 >> 5;
    int v171 = 1 << v517;
    float v172 = v492;
    *(_DWORD *)&v492[4 * v170] |= 1 << v517;
    int v173 = &v172[4 * v493 - 4];
    do
    {
      if (*v173)
      {
        unsigned int v174 = *v173 - (((*v173 >> 1) & 0x5B6DB6DB) + ((*v173 >> 2) & 0x9249249));
        unsigned int v43 = ((v174 + (v174 >> 3)) & 0xC71C71C7) + v43 - 63 * (((v174 + (v174 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v173;
    }
    while (v173 >= (_DWORD *)v172);
    if (fabs(v79) < v46)
    {
      unsigned int v175 = 0;
      uint64_t v176 = v486;
      *(_DWORD *)&v486[4 * v170] |= v171;
      BOOL v177 = &v176[4 * v487 - 4];
      do
      {
        if (*v177)
        {
          unsigned int v178 = *v177 - (((*v177 >> 1) & 0x5B6DB6DB) + ((*v177 >> 2) & 0x9249249));
          unsigned int v175 = ((v178 + (v178 >> 3)) & 0xC71C71C7) + v175 - 63 * (((v178 + (v178 >> 3)) & 0xC71C71C7) / 0x3F);
        }
        --v177;
      }
      while (v177 >= (_DWORD *)v176);
      unsigned int v456 = v175;
    }
    *(_DWORD *)&v461[*(void *)(*(void *)this - 24)] |= 2u;
    uint64_t v179 = *((void *)this + 281);
    int v180 = *(_DWORD *)(v179 + 16);
    if (v180 == 2)
    {
      if ((*(_DWORD *)(v179 + 8) - 3) >= 3)
      {
LABEL_238:
        BOOL v181 = 1;
        goto LABEL_239;
      }
    }
    else
    {
      BOOL v181 = v180 == 3;
      if ((*(_DWORD *)(v179 + 8) - 3) >= 3) {
        goto LABEL_239;
      }
      if (v180 != 3)
      {
        double v187 = fmax(fabsf(*((float *)this + 331)), 0.5);
        double v188 = (v187 + -0.5) * 4.0 / 9.5 + 1.0;
        BOOL v214 = v187 < 10.0;
        double v189 = 5.0;
        if (v214) {
          double v189 = v188;
        }
        uint64_t v185 = v475[0];
        double v186 = fmin(*(double *)(v475[0] + 8) * v189, v46);
        goto LABEL_249;
      }
    }
    float v182 = *((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(*((BlueFin::GlPeMsmtMgr **)this + 1), v50, 0, 0) + 27);
    BOOL v181 = 1;
    if (v182 < 20.0 && v182 > 0.0)
    {
      double v183 = (20.0 - v182) / v182;
      if (v183 > 1.5) {
        double v183 = 1.5;
      }
      *(double *)(v475[0] + 8) = v183 + *(double *)(v475[0] + 8);
      goto LABEL_238;
    }
LABEL_239:
    BOOL v184 = !v181 || (*(_DWORD *)(*((void *)this + 281) + 8) - 1) > 1;
    if (v184
      || *((_DWORD *)BlueFin::GlPeMsmtMgr::GetMeMeas(*((BlueFin::GlPeMsmtMgr **)this + 1), v50, 0, 0) + 8) != 3
      && *((_DWORD *)BlueFin::GlPeMsmtMgr::GetMeMeas(*((BlueFin::GlPeMsmtMgr **)this + 1), v50, 0, 0) + 8) != 2)
    {
LABEL_250:
      if (*(_DWORD *)(*((void *)this + 281) + 8) == 10) {
        *(double *)(v475[0] + 8) = fmax(*(double *)(v475[0] + 8), 3.0);
      }
      goto LABEL_252;
    }
    uint64_t v185 = v475[0];
    double v186 = *(double *)(v475[0] + 8) * 3.0;
LABEL_249:
    *(double *)(v185 + 8) = v186;
    goto LABEL_250;
  }
  LOBYTE(v44) = 0;
  LOBYTE(v43) = 0;
LABEL_286:
  double v201 = (char *)this + 11424;
  if (*((unsigned char *)this + 26))
  {
    BlueFin::GlPeNavGnssKF::UpdateHeading(this);
    int v202 = *((unsigned __int8 *)this + 26);
  }
  else
  {
    int v202 = 0;
  }
  BOOL v203 = (char *)this + *(void *)(*(void *)this - 24);
  if (dbl_263BBC5C0[v202 == 0] > *((float *)v203 + 46))
  {
    uint64_t v204 = *((void *)this + 599);
    unsigned int v205 = *(_DWORD *)(v204 + 5120);
    if (v205 != -7200001 && v205 > **((_DWORD **)this + 600))
    {
      float v207 = *(float *)(v204 + 5128);
      float v208 = *(float *)(v204 + 5124);
      double v209 = sqrt(*((double *)v203 + 14) * *((double *)v203 + 14) + *((double *)v203 + 13) * *((double *)v203 + 13));
      float v210 = v209;
      float v211 = 0.0;
      if (v208 >= v210) {
        float v212 = 0.0;
      }
      else {
        float v212 = *(float *)(v204 + 5124);
      }
      if (v208 < v210) {
        float v211 = *(float *)(v204 + 5128);
      }
      float v213 = v207 <= v210 ? v212 : *(float *)(v204 + 5128);
      if (v207 <= v210)
      {
        BOOL v214 = v208 < v210;
      }
      else
      {
        float v211 = *(float *)(v204 + 5124);
        BOOL v214 = 1;
      }
      if (v214)
      {
        float v215 = v208 - v207;
        if (v202)
        {
          float v216 = v213 - v209;
          uint64_t v217 = *((void *)this + 5);
          double v218 = *(double *)(*(void *)(v217 + 16) + 16);
          double v219 = *(double *)(*(void *)(v217 + 32) + 32);
          float v220 = (v218 + v219) * 9.0;
          if ((float)(v216 * v216) > v220) {
            goto LABEL_318;
          }
          double v221 = v211 - v209;
          __float2 v222 = __sincosf_stret(*((float *)v203 + 44));
          double v223 = vabds_f32(v210, v213);
          double v224 = fmax(v218 * v215 / v223, 0.0001);
          double v225 = fmax(v219 * v215 / v223, 0.0001);
          BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
          *(void *)(v500[1] + 16) = 0x3FF0000000000000;
          BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 1, 0, 1, v221 * v222.__cosval, v224);
          BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
          *(void *)(v500[1] + 32) = 0x3FF0000000000000;
          double v226 = (uint64_t *)this;
          double v227 = v221 * v222.__sinval;
          double v228 = v225;
        }
        else
        {
          float v229 = *((float *)this + 331);
          float v230 = -v213;
          if (v229 > 0.0) {
            float v230 = v213;
          }
          float v231 = *(double *)(*(void *)(*((void *)this + 5) + 16) + 16) * 9.0;
          if ((float)((float)(v230 - v229) * (float)(v230 - v229)) > v231) {
            goto LABEL_318;
          }
          if (v229 <= 0.0) {
            float v211 = -v211;
          }
          double v232 = (float)(v211 - v229);
          BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
          *(void *)(v500[1] + 16) = 0x3FF0000000000000;
          float v233 = sqrt(*(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)+ *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104));
          double v228 = fmax(*(double *)(*(void *)(*((void *)this + 5) + 16) + 16) * v215 / vabds_f32(v233, v213), 2.22044605e-16);
          *(double *)(v475[0] + 8) = v228;
          double v226 = (uint64_t *)this;
          double v227 = v232;
        }
        BlueFin::GlPeNavGnssKF::MeasUpdate(v226, (uint64_t)&v499, 1, 0, 1, v227, v228);
        *((_WORD *)this + 6599) = 257;
      }
    }
  }
LABEL_318:
  BOOL v234 = v454;
  if (v455) {
    BOOL v234 = 0;
  }
  if (v234) {
    BlueFin::GlPeNavGnssKF::DealsMeasUpdate(this, (BlueFin::BigMatrix *)&v499, (*a3 >> 8) & 1);
  }
  BOOL v235 = (*((unsigned char *)a3 + 1) & 0x40) != 0 && BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit(this);
  unsigned int v236 = 0;
  uint64_t v237 = *((void *)this + 281);
  int v238 = *(_DWORD *)(v237 + 16);
  int v239 = &v477[4 * v478 - 4];
  do
  {
    if (*v239)
    {
      unsigned int v240 = *v239 - (((*v239 >> 1) & 0x5B6DB6DB) + ((*v239 >> 2) & 0x9249249));
      unsigned int v236 = ((v240 + (v240 >> 3)) & 0xC71C71C7) + v236 - 63 * (((v240 + (v240 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v239;
  }
  while (v239 >= (_DWORD *)v477);
  char v241 = v238 == 1 || v235;
  if ((v241 & 1) != 0
    || *(_DWORD *)(v237 + 8) == 6
    || (int v242 = 4, (unsigned __int16)v236 >= 0xAu)
    && (v238 & 0xFFFFFFFE) != 2
    && (*(unsigned char *)a3 & 8) == 0
    && (*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 56))(this) <= 0x96)
  {
    int v242 = 0;
  }
  *(void *)&long long v536 = 0;
  *(void *)&long long v527 = 0;
  int ExtAlt = BlueFin::GlPeAltMgr::GetExtAlt(*((uint64_t **)this + 283), (double *)((char *)this + *(void *)(*(void *)this - 24) + 8), (double *)&v536, (double *)&v527);
  if (ExtAlt == 4) {
    int v244 = v242;
  }
  else {
    int v244 = ExtAlt;
  }
  if (v244)
  {
    if (v244 == 4)
    {
      BOOL v246 = 0;
      double v245 = 5.0;
    }
    else
    {
      double v245 = 3.0;
      BOOL v246 = v244 == 3 && *(double *)&v527 < 8.0 && *(double *)&v527 > 0.0;
    }
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
    double v247 = -1.0;
    if (!*((unsigned char *)this + 26)) {
      double v247 = 1.0;
    }
    *(double *)(v500[1] + 40) = v247;
    double v248 = *(double *)&v536 - *(double *)((char *)this + *(void *)(*(void *)this - 24) + 24);
    double v249 = *(double *)&v527 * *(double *)&v527;
    if (v246 || v248 * v248 < v245 * v245 * (v249 + *(double *)(*(void *)(*((void *)this + 5) + 40) + 40))) {
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 1, 1, 1, v248, v249);
    }
  }
  BlueFin::lla2ned((double *)((char *)this + *(void *)(*(void *)this - 24) + 8), (double *)((char *)this + *(void *)(*(void *)this - 24) + 32), 0, &v508);
  BOOL v250 = 0;
  uint64_t v251 = *((void *)this + 281);
  int v252 = *(_DWORD *)(v251 + 16);
  BOOL v254 = sqrt(v508 * v508 + v509 * v509) < 10.0 && v252 == 7;
  if (v252) {
    unsigned int v255 = 60000;
  }
  else {
    unsigned int v255 = 120000;
  }
  if (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) >= v255)
  {
    uint64_t v256 = *((void *)this + 599);
    BOOL v250 = *(_DWORD *)(v256 + 4216) == 6 && (v257 = (unsigned char *)(v256 + 4224), *v257) && v257[2] == 0;
  }
  if ((*((unsigned char *)a3 + 1) & 0x20) != 0)
  {
    int v258 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 48))(this);
    uint64_t v251 = *((void *)this + 281);
    if (v258)
    {
      if ((*(_DWORD *)(v251 + 8) - 1) > 1) {
        goto LABEL_374;
      }
    }
  }
  if (*(_DWORD *)(v251 + 8) == 10) {
    goto LABEL_374;
  }
  if (*((unsigned char *)this + *(void *)(*(void *)this - 24) + 242)) {
    char v264 = 1;
  }
  else {
    char v264 = v254;
  }
  if ((v264 & 1) == 0)
  {
    if (*(unsigned char *)(v251 + 1764)) {
      unsigned int v265 = 60;
    }
    else {
      unsigned int v265 = 180;
    }
    if (*(float *)(v251 + 1328) <= 4.0 || *(float *)(v251 + 1320) >= 20.0 || *(_DWORD *)(v251 + 76) < v265)
    {
      if (v250) {
        goto LABEL_393;
      }
LABEL_374:
      BOOL v259 = 0;
      long long v260 = (BlueFin::GlPeNavGnssKF *)((char *)this + 4792);
      goto LABEL_375;
    }
    if (!*(unsigned char *)(v251 + 1764) && *(_DWORD *)(v251 + 64) != 1 && !v250) {
      goto LABEL_374;
    }
  }
LABEL_393:
  float v266 = *((float *)this + 546) * 1000.0;
  if (v266 > 0.0)
  {
    double v267 = v266;
    double v268 = 0.5;
LABEL_398:
    int v269 = (int)(v267 + v268);
    goto LABEL_399;
  }
  if (v266 < 0.0)
  {
    double v267 = v266;
    double v268 = -0.5;
    goto LABEL_398;
  }
  int v269 = 0;
LABEL_399:
  uint64_t v270 = *((void *)this + 2);
  LODWORD(v527) = 0;
  *((void *)&v527 + 1) = &v528[4];
  v528[0] = 8;
  memset(&v528[4], 0, 32);
  long long v529 = xmmword_263BBA380;
  int32x2_t v530 = vdup_n_s32(0x42C60000u);
  LODWORD(v531) = 1120272384;
  BlueFin::stDops::stDops((uint64_t)&v536, (uint64_t)&v527);
  *((void *)&v541 + 1) = v270;
  uint64_t v271 = **((unsigned int **)this + 1);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlPeNavGnssKF *)((char *)this + *(void *)(*(void *)this - 24) + 352), (uint64_t)&v511);
  uint64_t v517 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 88);
  LODWORD(v515) = **((_DWORD **)this + 280);
  LODWORD(v513) = 0;
  BlueFin::GlPeDops::GetDops((uint64_t)&v536, v271);
  if ((*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this) >= 2 * v269
    || *((float *)&v525 + 1) >= 5.0)
  {
    BOOL v259 = *(unsigned char *)(*((void *)this + 281) + 1989) != 0;
    if (!*(unsigned char *)(*((void *)this + 281) + 1989) && v250)
    {
      int v272 = *(_DWORD *)(*((void *)this + 284) + 48);
      if (v272) {
        unsigned int v273 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - v272;
      }
      else {
        unsigned int v273 = -1;
      }
      BOOL v259 = v273 < **((_DWORD **)this + 600) - *(_DWORD *)(*((void *)this + 599) + 4240);
    }
  }
  else
  {
    BOOL v259 = 1;
  }
  long long v260 = (BlueFin::GlPeNavGnssKF *)((char *)this + 4792);
  if (BlueFin::GlPeNavGnssMotion::IsNotMoving((BlueFin::GlPeNavGnssKF *)((char *)this + 4792), 1.0) && v259)
  {
    BOOL v259 = 1;
LABEL_411:
    long long v261 = this;
    int v262 = v259;
    int v263 = 0;
    goto LABEL_412;
  }
LABEL_375:
  if (*(_DWORD *)(*(void *)v260 + 4216) == 6
    && *(unsigned char *)(*(void *)v260 + 4224)
    && !*(unsigned char *)(*(void *)v260 + 4226))
  {
    goto LABEL_411;
  }
  if (*((_WORD *)this + 8492)
    && (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - *((_DWORD *)this + 4255)) <= 0xBB8
    && *((double *)this + 2129) < 0.100000001)
  {
    long long v261 = this;
    int v262 = 0;
    int v263 = 1;
LABEL_412:
    BlueFin::GlPeNavGnssKF::ZeroSpeedUpdate((uint64_t)v261, (BlueFin::BigMatrix *)&v499, v507, v262, v263);
  }
  BlueFin::GlPeNavGnssKF::UpdateHeadingConsistentWithDeals(this, 0, &v498);
  if (!v498
    || *(_WORD *)(*((void *)this + 284) + 2)
    || !BlueFin::GlPeNavGnssMotion::IsNotTurning(v260, v274)
    || (char)v43 < 1
    || (*(_DWORD *)(*((void *)this + 281) + 8) - 3) > 3)
  {
    goto LABEL_415;
  }
  int v281 = *((unsigned __int8 *)this + 26);
  if (*((unsigned char *)a3 + 1))
  {
    int v283 = *((unsigned __int8 *)this + 26);
LABEL_604:
    float v429 = *((float *)this + 735) * 0.0174532925;
    float v430 = v429 * 57.296;
    if (v430 < 45.1) {
      float v430 = 45.1;
    }
    double v284 = v430 * 0.0174532925;
    int v281 = v283;
    int v283 = 0;
    goto LABEL_607;
  }
  char v282 = !v457;
  int v283 = 1;
  if (!*((unsigned char *)this + 26)) {
    char v282 = 1;
  }
  if ((v282 & 1) == 0) {
    goto LABEL_604;
  }
  double v284 = 0.315904601;
LABEL_607:
  if (v281)
  {
    if (sqrt(*(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)+ *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)) >= 1.0)
    {
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
      uint64_t v431 = *(void *)this;
      int v432 = (double *)((char *)this + *(void *)(*(void *)this - 24));
      double v433 = v432[14];
      double v434 = -v433;
      double v435 = sqrt(v433 * v433 + v432[13] * v432[13]);
      uint64_t v436 = v500[1];
      *(double *)(v436 + 16) = v434 / (v435 * v435);
      double v437 = (double *)((char *)this + *(void *)(v431 - 24));
      double v438 = v437[13];
      double v439 = sqrt(v437[14] * v437[14] + v438 * v438);
      *(double *)(v436 + 32) = v438 / (v439 * v439);
      double v440 = *((float *)this + 392);
      for (double j = v440
              - atan2(*(long double *)((char *)this + *(void *)(v431 - 24) + 112), *(long double *)((char *)this + *(void *)(v431 - 24) + 104)); j > 3.14159265; double j = j + -6.28318531)
        ;
      for (; j <= -3.14159265; double j = j + 6.28318531)
        ;
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, v283, 0, 1, j, v284 * v284);
      BlueFin::GlPeNavGnssKF::UpdateHeading(this);
    }
  }
  else
  {
    double v443 = *((float *)this + 392);
    for (double k = v443 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad(this); k > 3.14159265; double k = k + -6.28318531)
      ;
    for (; k <= -3.14159265; double k = k + 6.28318531)
      ;
    float v445 = k;
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
    *(void *)(v500[1] + 32) = 0x3FF0000000000000;
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, v283, 0, 1, v445, v284 * v284);
  }
LABEL_415:
  uint64_t v275 = (BlueFin::GlPeExtLoc *)*((void *)this + 282);
  uint64_t v276 = *((void *)v275 + 17);
  if (v276
    && *(unsigned char *)(v276 + 3008)
    && *(double *)(v276 + 3040) * *(double *)(v276 + 3040) + *(double *)(v276 + 3048) * *(double *)(v276 + 3048) < 160000.0
    && (*a3 & 0x1000) != 0)
  {
    unsigned int v468 = *a3;
    uint64_t v280 = (char *)this + 11424;
    int v466 = 1;
  }
  else
  {
    int v277 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 128))(this);
    int v278 = (*(uint64_t (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 160))(this);
    if (!BlueFin::GlPeExtLoc::IsPosLocMeasAvailable(v275, v277, v278, (*a3 & 0x1000) != 0)) {
      goto LABEL_518;
    }
    uint64_t v279 = *(void *)(*((void *)this + 282) + 136);
    if (v279)
    {
      if (*(unsigned char *)(v279 + 3009)) {
        goto LABEL_518;
      }
    }
    uint64_t v280 = (char *)this + 11424;
    int v466 = 0;
    unsigned int v468 = *a3;
  }
  int v285 = *((unsigned __int8 *)this + 26);
  uint64_t v286 = *((void *)this + 599);
  uint64_t v287 = *(void *)(v286 + 3016);
  uint64_t v288 = *(void *)(v286 + 3024);
  *(void *)&long long v513 = v287;
  *((void *)&v513 + 1) = v288;
  uint64_t v289 = *(void *)(v286 + 3032);
  uint64_t v514 = v289;
  double v290 = *(double *)(v286 + 3048);
  int v291 = *(_DWORD *)(v286 + 3072);
  unsigned int v292 = (char *)this + *(void *)(*(void *)this - 24);
  unsigned int v293 = *((_DWORD *)v292 + 50);
  float v294 = *((float *)v292 + 44);
  __int16 v295 = *((_WORD *)this + 8492);
  if (!v295)
  {
    *((_WORD *)this + 8492) = 1;
    *((_DWORD *)this + 4364) = 0;
    *((void *)this + 2124) = v287;
    *((void *)this + 2125) = v288;
    *((void *)this + 2126) = v289;
    *((int32x2_t *)this + 2127) = vdup_n_s32(v293);
    *((float *)this + 4256) = v294;
LABEL_456:
    *((unsigned char *)this + 17040) = 0;
    goto LABEL_457;
  }
  double v296 = (double)(v293 - *((_DWORD *)this + 4255)) * 0.001;
  if (v296 <= 1.0 || v296 > 30.0) {
    goto LABEL_437;
  }
  for (double m = v294 - *((float *)this + 4256); m > 3.14159265; double m = m + -6.28318531)
    ;
  for (; m <= -3.14159265; double m = m + 6.28318531)
    ;
  if (m < 0.0) {
    double m = -m;
  }
  if (m > 1.2566371 && *((double *)this + 2129) >= 0.100000001)
  {
LABEL_437:
    *(void *)&long long v511 = v287;
    *((void *)&v511 + 1) = v288;
    v512[0] = v289;
    BlueFin::ExtLocFilter::Reset((uint64_t)this + 16984, (uint64_t)&v511, v293, v294);
    __int16 v295 = *((_WORD *)this + 8492);
  }
  *((_WORD *)this + 8492) = v295 + 1;
  *((_DWORD *)this + 4255) = v293;
  double v299 = (double)(v293 - *((_DWORD *)this + 4254)) * 0.001;
  BlueFin::lla2ned((double *)&v513, (double *)this + 2124, 0, (double *)&v536);
  long long v300 = v536;
  double v301 = v299 * v299 + *((double *)this + 2131);
  *((double *)this + 2131) = v301;
  double v302 = v299 + *((double *)this + 2132);
  *((double *)this + 2132) = v302;
  double v303 = v299 + *((double *)this + 2135);
  *((double *)this + 2135) = v303;
  double v304 = *((double *)this + 2136) + 1.0;
  *((double *)this + 2136) = v304;
  *((double *)this + 2148) = *((double *)this + 2148) + v299 * *(double *)&v300;
  *((double *)this + 2152) = *(double *)&v300 + *((double *)this + 2152);
  *((double *)this + 2165) = *((double *)this + 2165) + v299 * *((double *)&v300 + 1);
  *((double *)this + 2169) = *((double *)&v300 + 1) + *((double *)this + 2169);
  if (*((unsigned __int16 *)this + 8492) <= 2u) {
    goto LABEL_456;
  }
  double v305 = 0.0;
  if (v299 > 0.1)
  {
    BlueFin::lla2ned((double *)&v513, (double *)this + 2124, 0, (double *)&v536);
    double v305 = sqrt(*((double *)&v536 + 1) * *((double *)&v536 + 1) + *(double *)&v536 * *(double *)&v536)
         / v299
         * 0.200000003;
    double v301 = *((double *)this + 2131);
    double v304 = *((double *)this + 2136);
    double v302 = *((double *)this + 2132);
    double v303 = *((double *)this + 2135);
  }
  *((double *)this + 2129) = v305 + *((double *)this + 2129) * 0.799999997;
  double v306 = v301 * v304 - v302 * v303;
  if (fabs(v306) <= 2.22044605e-16) {
    goto LABEL_456;
  }
  double v307 = 1.0 / v306;
  v544[0] = 0x200000002;
  *(double *)&long long v536 = v304 * v307;
  *((double *)&v536 + 1) = -(v307 * v302);
  *(double *)&long long v538 = -(v307 * v303);
  *((double *)&v538 + 1) = v301 * v307;
  BlueFin::Matrix::mult((uint64_t)&v527, (const BlueFin::Matrix *)&v536, (BlueFin::GlPeNavGnssKF *)((char *)this + 17184));
  BlueFin::Matrix::mult((uint64_t)&v519, (const BlueFin::Matrix *)&v536, (BlueFin::GlPeNavGnssKF *)((char *)this + 17320));
  double v508 = *(double *)&v528[16] + v299 * *(double *)&v527;
  double v509 = v522 + v299 * *(double *)&v519;
  v510[0] = 0;
  BlueFin::ned2lla((double *)this + 2124, &v508, (double *)&v517);
  BlueFin::lla2ned((double *)&v517, (double *)&v513, 0, (double *)&v515);
  double v308 = sqrt(*(double *)&v515 * *(double *)&v515 + *((double *)&v515 + 1) * *((double *)&v515 + 1));
  float v309 = *((float *)this + 4364);
  float v310 = v308;
  if (v309 <= v310) {
    float v309 = v308;
  }
  *((float *)this + 4364) = v309;
  if (v308 <= 20.0)
  {
    *((unsigned char *)this + 17460) = 0;
  }
  else
  {
    int v311 = (char)++*((unsigned char *)this + 17460);
    if (v311 >= 3)
    {
      long long v515 = v513;
      uint64_t v516 = v514;
      BlueFin::ExtLocFilter::Reset((uint64_t)this + 16984, (uint64_t)&v515, v293, v294);
    }
  }
  *((unsigned char *)this + 17040) = 1;
LABEL_457:
  double v201 = v280;
  if (*((unsigned char *)this + 26))
  {
    int32x2_t v312 = *(int32x2_t *)this;
    float v313 = (double *)((char *)this + *(void *)(*(void *)this - 24));
    double v314 = v313[13];
    double v315 = v313[14] * v313[14];
    double v316 = sqrt(v315 + v314 * v314);
    uint64_t v317 = *((void *)this + 5);
    unsigned int v318 = v468;
    if (v316 <= 0.1) {
      double v319 = 3.14159265;
    }
    else {
      double v319 = (v314 * v314 * *(double *)(*(void *)(v317 + 32) + 32)
    }
            + *(double *)(*(void *)(v317 + 16) + 16) * v315)
           / (v316
            * v316
            * (v316
             * v316));
  }
  else
  {
    uint64_t v317 = *((void *)this + 5);
    double v319 = sqrt(*(double *)(*(void *)(v317 + 32) + 32));
    int32x2_t v312 = *(int32x2_t *)this;
    unsigned int v318 = v468;
  }
  int32x2_t v320 = v312;
  uint64_t v321 = 8;
  if (v285) {
    uint64_t v322 = 8;
  }
  else {
    uint64_t v322 = 24;
  }
  if (v285) {
    uint64_t v321 = 24;
  }
  double v323 = *(double *)(*(void *)(v317 + v322) + v322) + *(double *)(*(void *)(v317 + v321) + v321);
  if (*((double *)this + 613) * *((double *)this + 613) >= v323) {
    double v323 = *((double *)this + 613) * *((double *)this + 613);
  }
  float v324 = v323;
  BlueFin::lla2ned((double *)((char *)this + *(void *)(*(void *)&v320 - 24) + 8), (double *)&v513, 0, (double *)&v536);
  float v325 = v290 * v290 + v324;
  float v326 = sqrt(*((double *)&v536 + 1) * *((double *)&v536 + 1) + *(double *)&v536 * *(double *)&v536) / sqrtf(v325);
  unsigned int v327 = (int)(float)((float)(*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 64))(this)
                    / (float)(*((float *)this + 546) * 1000.0));
  float v328 = 3.0;
  if (v291 == 3) {
    float v328 = 5.0;
  }
  if (v327 <= 1) {
    float v328 = 9.0;
  }
  if (v328 < v326) {
    goto LABEL_512;
  }
  BlueFin::lla2ned((double *)&v513, (double *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, (double *)&v519);
  long long v527 = v519;
  *(void *)v528 = v520;
  BlueFin::ned2hlu(&v527, (BlueFin::GlPeNavGnssKF *)((char *)this + 1336), &v536);
  uint64_t v329 = *((void *)this + 5);
  if (*((unsigned char *)this + 26)) {
    double v330 = *(double *)(*(void *)(v329 + 24) + 24) * (*((double *)this + 172) * *((double *)this + 172))
  }
         + *(double *)(*(void *)(v329 + 8) + 8) * (*((double *)this + 168) * *((double *)this + 168));
  else {
    double v330 = *(double *)(*(void *)(v329 + 24) + 24);
  }
  double v331 = v290;
  if ((v318 & 0x1000000) == 0)
  {
    double v331 = v290;
    if (!*((unsigned char *)this + 17040))
    {
      double v332 = sqrt(v330)
           / (*(float (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 16))((char *)this + *(void *)(*(void *)this - 24));
      if (v332 < 0.1) {
        double v332 = 0.1;
      }
      double v331 = v290 * v332;
    }
  }
  float v333 = *(float *)((char *)this + *(void *)(*(void *)this - 24) + 176);
  int v334 = *((unsigned __int8 *)this + 26);
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
  uint64_t v335 = v500[1];
  if (v334)
  {
    *(void *)(v335 + 8) = *((void *)this + 171);
    double v336 = *((double *)this + 172);
  }
  else
  {
    double v336 = 1.0;
  }
  *(double *)(v335 + 24) = v336;
  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 1, 0, 1, *((double *)&v536 + 1), v331 * v331);
  int32x2_t v337 = *(int32x2_t *)this;
  if (*((unsigned char *)this + 26))
  {
    double v338 = *(float *)((char *)this + *(void *)(*(void *)&v337 - 24) + 176);
    for (double n = v338 - v333; n > 3.14159265; double n = n + -6.28318531)
      ;
    for (; n <= -3.14159265; double n = n + 6.28318531)
      ;
    if (n > 0.523598776)
    {
      __double2 v340 = __sincos_stret(v338);
      *((void *)this + 167) = *(void *)&v340.__cosval;
      *((void *)this + 168) = *(void *)&v340.__sinval;
      *((void *)this + 169) = 0;
      *((void *)this + 171) = *(void *)&v340.__sinval;
      *((double *)this + 172) = -v340.__cosval;
      *((void *)this + 173) = 0;
      *((void *)this + 176) = 0;
      *((void *)this + 175) = 0;
      *((void *)this + 177) = 0xBFF0000000000000;
    }
  }
  BlueFin::lla2ned((double *)&v513, (double *)((char *)this + *(void *)(*(void *)&v337 - 24) + 8), 0, (double *)&v511);
  long long v519 = v511;
  long long v520 = (uint64_t **)v512[0];
  BlueFin::ned2hlu(&v519, (BlueFin::GlPeNavGnssKF *)((char *)this + 1336), &v527);
  int v341 = *((unsigned __int8 *)this + 26);
  uint64_t v342 = *((void *)this + 5);
  double v343 = *(double *)(*(void *)(v342 + 8) + 8);
  if (*((unsigned char *)this + 26)) {
    double v343 = *(double *)(*(void *)(v342 + 24) + 24) * (*((double *)this + 168) * *((double *)this + 168))
  }
         + v343 * (*((double *)this + 167) * *((double *)this + 167));
  double v344 = *(double *)&v527;
  if ((v318 & 0x1000000) == 0 && !*((unsigned char *)this + 17040))
  {
    double v345 = sqrt(v343)
         / (*(float (**)(char *))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 16))((char *)this + *(void *)(*(void *)this - 24));
    if (v345 < 0.1) {
      double v345 = 0.1;
    }
    double v290 = v290 * v345;
    int v341 = *((unsigned __int8 *)this + 26);
  }
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
  if (v341)
  {
    int v346 = HIBYTE(v318) & 1;
    uint64_t v347 = v500[1];
    *(void *)(v347 + 8) = *((void *)this + 167);
    *(void *)(v347 + 24) = *((void *)this + 168);
    if (v319 < 0.523598776) {
      int v346 = 1;
    }
    if (((v466 | v346) & 1) == 0 && *((unsigned char *)this + *(void *)(*(void *)this - 24) + 242)) {
      goto LABEL_511;
    }
  }
  else
  {
    BOOL v348 = v344 > 0.0;
    *(void *)(v500[1] + 8) = 0x3FF0000000000000;
    char v349 = v466;
    if (v319 >= 0.523598776)
    {
      char v349 = 0;
      BOOL v348 = 0;
    }
    if ((v318 & 0x1000000) == 0 && (v349 & 1) == 0 && !v348) {
      goto LABEL_511;
    }
  }
  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 1, 0, 1, v344, v290 * v290);
LABEL_511:
  *((_WORD *)v201 + 888) = 257;
LABEL_512:
  if ((char)v44 <= 2 && BlueFin::GlPeNavGnssMotion::IsNotMoving(v260, 1.0))
  {
    int v350 = *((unsigned __int8 *)this + 26);
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
    *(void *)(v500[1] + 16) = 0x3FF0000000000000;
    if (v350)
    {
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 0, 0, 1, -*(double *)((char *)this + *(void *)(*(void *)this - 24) + 104), 1.0);
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v499, 1, 12);
      *(void *)(v500[1] + 32) = 0x3FF0000000000000;
      double v351 = -*(double *)((char *)this + *(void *)(*(void *)this - 24) + 112);
    }
    else
    {
      double v351 = (float)-*((float *)this + 331);
    }
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v499, 0, 0, 1, v351, 1.0);
  }
LABEL_518:
  uint64_t v352 = *((void *)this + 281);
  if ((*(_DWORD *)(v352 + 8) - 1) > 1) {
    goto LABEL_543;
  }
  int v353 = *(unsigned __int8 *)(v352 + 1909);
  if (*((unsigned char *)this + 26))
  {
    *(void *)&long long v527 = 0;
    *(void *)&long long v519 = 0;
    *((unsigned char *)this + 2169) = 0;
    int IsHulaSpeedValid = BlueFin::GlPeNavGnssKF::IsHulaSpeedValid(this, (double *)&v527, (double *)&v519, 0);
    *((unsigned char *)this + 2168) = IsHulaSpeedValid;
    long long v537 = xmmword_263BBC570;
    *(void *)&long long v536 = &v538;
    *((void *)&v536 + 1) = v544;
    v544[0] = 0;
    v544[1] = (char *)&v537 + 8;
    if (*((unsigned char *)this + 2169))
    {
      if (!IsHulaSpeedValid)
      {
        if (sqrt(*(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)+ *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)) <= 1.0)goto LABEL_536; {
        BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v536, 1, 12);
        }
        int32x2_t v373 = *(int32x2_t *)this;
        float v374 = (double *)((char *)this + *(void *)(*(void *)this - 24));
        double v375 = v374[14];
        double v376 = -v375;
        double v377 = sqrt(v375 * v375 + v374[13] * v374[13]);
        uint64_t v378 = *(void *)(*((void *)&v536 + 1) + 8);
        *(double *)(v378 + 16) = v376 / (v377 * v377);
        BOOL v379 = (double *)((char *)this + *(void *)(*(void *)&v373 - 24));
        double v380 = v379[13];
        double v381 = sqrt(v379[14] * v379[14] + v380 * v380);
        *(double *)(v378 + 32) = v380 / (v381 * v381);
        for (iuint64_t i = 0.0
                 - atan2(*(long double *)((char *)this + *(void *)(*(void *)&v373 - 24) + 112), *(long double *)((char *)this + *(void *)(*(void *)&v373 - 24) + 104));
              ii > 3.14159265;
        for (; ii <= -3.14159265; iuint64_t i = ii + 6.28318531)
          ;
        double v359 = 0.0;
        float v360 = (uint64_t *)this;
        int v372 = 0;
        goto LABEL_535;
      }
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v536, 1, 12);
      *(void *)(*(void *)(*((void *)&v536 + 1) + 8) + 16) = 0x3FF0000000000000;
      double v355 = *(double *)&v527;
      double v356 = *(double *)&v519;
      double v357 = *(double *)&v527 * 0.0;
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v536, 1, 0, 1, *(double *)&v527 - *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104), *(double *)&v527 * 0.0 * 0.0 * (*(double *)&v527 * 0.0 * 0.0) + v356 * v356);
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v536, 1, 12);
      *(void *)(*(void *)(*((void *)&v536 + 1) + 8) + 32) = 0x3FF0000000000000;
      iuint64_t i = -(*(double *)((char *)this + *(void *)(*(void *)this - 24) + 112) - v355 * 0.0);
      double v359 = v357 * v357 + v356 * 0.0 * (v356 * 0.0);
      float v360 = (uint64_t *)this;
    }
    else
    {
      if (!IsHulaSpeedValid || *(float *)((char *)this + *(void *)(*(void *)this - 24) + 184) >= 0.785398163)
      {
LABEL_536:
        if (!v353) {
          goto LABEL_543;
        }
        goto LABEL_537;
      }
      *((unsigned char *)this + 2168) = 1;
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v536, 1, 12);
      *(void *)(*(void *)(*((void *)&v536 + 1) + 8) + 16) = 0x3FF0000000000000;
      double v361 = *(double *)&v527;
      float v362 = (float *)((char *)this + *(void *)(*(void *)this - 24));
      __float2 v363 = __sincosf_stret(v362[44]);
      double v364 = -(*((double *)v362 + 13) - v361 * v363.__cosval);
      double v365 = *(double *)&v519;
      double v366 = *(double *)&v519 * v363.__cosval * (*(double *)&v519 * v363.__cosval);
      float v367 = tanf(v362[46]);
      BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v536, 1, 0, 1, v364, v366 + v361 * v367 * v363.__sinval * (v361 * v367 * v363.__sinval));
      BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v536, 1, 12);
      *(void *)(*(void *)(*((void *)&v536 + 1) + 8) + 32) = 0x3FF0000000000000;
      float v368 = (float *)((char *)this + *(void *)(*(void *)this - 24));
      __float2 v369 = __sincosf_stret(v368[44]);
      double v370 = -(*((double *)v368 + 14) - v361 * v369.__sinval);
      float v371 = tanf(v368[46]);
      double v359 = v365 * v369.__sinval * (v365 * v369.__sinval) + v361 * v371 * v369.__cosval * (v361 * v371 * v369.__cosval);
      float v360 = (uint64_t *)this;
      iuint64_t i = v370;
    }
    int v372 = 1;
LABEL_535:
    BlueFin::GlPeNavGnssKF::MeasUpdate(v360, (uint64_t)&v536, v372, 0, 1, ii, v359);
    goto LABEL_536;
  }
  if (*(unsigned char *)(v352 + 1909))
  {
    BlueFin::GlPeNavGnssKF::UpdateFromHulaSpeed(this);
LABEL_537:
    if (v201[1872] && *((unsigned char *)this + 2168) && *((unsigned char *)this + 2169)) {
      *((_DWORD *)this + 543) = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
    }
    goto LABEL_543;
  }
  if (v201[1872]) {
    BlueFin::GlPeNavGnssKF::UpdateFromHulaSpeed(this);
  }
LABEL_543:
  float v382 = (unsigned __int8 *)*((void *)this + 1985);
  if (v382)
  {
    if (v382[4])
    {
      float v383 = (unsigned int *)(*((void *)this + 1) + 56456);
      float v384 = *(float *)(*((void *)this + 1) + 56472);
      float v385 = fmodf(v384, 4295000000.0);
      if (v384 <= 4295000000.0) {
        float v385 = v384;
      }
      if (v385 < -4295000000.0) {
        float v385 = -fmodf(-v385, 4295000000.0);
      }
      if (v385 < 0.0) {
        unsigned int v386 = -(float)-v385;
      }
      else {
        LOWORD(v386) = v385;
      }
      unsigned int v387 = *v383;
      int v388 = *v382;
      int32x2_t v389 = *(int32x2_t *)this;
      if (v388) {
        BOOL v390 = BlueFin::GlSetBase::Cnt((BlueFin::GlPeNavGnssKF *)((char *)this
      }
                                                                              + *(void *)(*(void *)&v389 - 24)
                                                                              + 352)) < 3;
      else {
        BOOL v390 = 0;
      }
      unsigned int v392 = *(_DWORD *)((char *)this + *(void *)(*(void *)&v389 - 24) + 200);
      unsigned int v393 = v387 - v392;
      BOOL v67 = v392 >= v387;
      unsigned int v394 = v392 - v387;
      if (v394 == 0 || !v67) {
        unsigned int v394 = v393;
      }
      if (v394 <= 0x3E7)
      {
        if (!*((unsigned char *)this + 2932)) {
          goto LABEL_570;
        }
        BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v536, (unsigned int *)&v536 + 3, 0x13u, (const void **)this + 369);
        unsigned int v395 = 0;
        double v396 = (_DWORD *)(v536 + 4 * BYTE8(v536) - 4);
        do
        {
          if (*v396)
          {
            unsigned int v397 = *v396 - (((*v396 >> 2) & 0x9249249) + ((*v396 >> 1) & 0x5B6DB6DB));
            unsigned int v395 = ((v397 + (v397 >> 3)) & 0xC71C71C7) + v395 - 63 * (((v397 + (v397 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          --v396;
        }
        while ((unint64_t)v396 >= (unint64_t)v536);
        if ((unsigned __int16)v395 >= 0xAu && *((float *)this + 732) < 3.0)
        {
          if ((unsigned __int16)(v386 + 20) <= 0x77u)
          {
            float v398 = (char *)this + 15896;
            float v399 = *((float *)this + 724);
            uint64_t v400 = (unsigned __int16)(v386 + 20);
            uint64_t v401 = (unsigned __int8 *)this + v400 + 16856;
            int v402 = *v401;
            if (*v401)
            {
              float v403 = *(float *)&v398[4 * v400];
              if (v402 == 255)
              {
                float v406 = 255.0;
                float v405 = *(float *)&v398[4 * v400];
              }
              else
              {
                unsigned __int8 v404 = v402 + 1;
                *uint64_t v401 = v404;
                float v405 = *(float *)&v398[4 * v400];
                float v406 = (float)v404;
              }
              float v446 = v405 + (float)((float)(v399 - v405) / v406);
              *(float *)&v398[4 * v400] = v446;
              *((float *)this + v400 + 4094) = *((float *)this + v400 + 4094)
                                             + (float)((float)(v399 - v446) * (float)(v399 - v403));
            }
            else
            {
              *(float *)&v398[4 * v400] = v399;
              *((_DWORD *)this + v400 + 4094) = 0;
              *uint64_t v401 = 1;
            }
          }
        }
        else
        {
LABEL_570:
          if (v390)
          {
            if ((__int16)(v386 + 20) >= 120)
            {
              float v447 = "sBin < NBINS";
              DeviceFaultNotify("glpe_navutil.h", 582, "Get", (char)"sBin < NBINS");
              double v448 = "glpe_navutil.h";
              int v449 = 582;
              goto LABEL_631;
            }
            unsigned int v407 = *((unsigned __int8 *)this + (__int16)(v386 + 20) + 16856);
            unsigned int v408 = *((unsigned __int8 *)this + 16976);
            if (v408 <= 2) {
              unsigned int v408 = 2;
            }
            if (v407 >= v408)
            {
              uint64_t v409 = *(void *)(*((void *)this + 5) + 64);
              if (*((unsigned char *)this + 26)) {
                uint64_t v410 = 6;
              }
              else {
                uint64_t v410 = 8;
              }
              double v411 = *(double *)(v409 + 8 * v410);
              double v412 = fmax(fmin((float)(*((float *)this + (__int16)(v386 + 20) + 4094) / (float)v407) / v411, 1.0), 0.5);
              double v413 = *((float *)this + (__int16)(v386 + 20) + 3974);
              int32x2_t v414 = *(int32x2_t *)this;
              uint64_t v415 = *(void *)(*(void *)this - 24);
              double v416 = *(double *)((char *)this + v415 + 152);
              if ((v413 - v416) * (v413 - v416) > v411 * 4.0)
              {
                *(double *)(v409 + 8 * v410) = v411 + *(double *)(*((void *)this + 571) + 88) * 4.0;
                uint64_t v415 = *(void *)(*(void *)&v414 - 24);
                double v416 = *(double *)((char *)this + v415 + 152);
              }
              *(double *)((char *)this + v415 + 152) = v412 * v413 + v416 * (1.0 - v412);
            }
          }
        }
      }
      float v382 = (unsigned __int8 *)*((void *)this + 1985);
    }
    if (*v382)
    {
      if (*v201)
      {
        double v417 = *((double *)this + 1427);
        int32x2_t v391 = *(int32x2_t *)this;
      }
      else
      {
        int32x2_t v391 = *(int32x2_t *)this;
        unint64_t v420 = (int *)*((void *)this + 1);
        int v421 = *v420;
        if (*v420 == -7200001)
        {
          double v422 = 4287767.5;
        }
        else
        {
          int v423 = v420[1];
          unsigned int v424 = v421 - v423;
          if (v423 == -7200001) {
            unsigned int v425 = -7200001;
          }
          else {
            unsigned int v425 = v424;
          }
          double v422 = (float)((float)v425 * 0.001);
        }
        double v417 = (*(double *)((char *)this + *(void *)(*(void *)this - 24) + 152) - v451) / v422;
      }
      unint64_t v418 = (double *)((char *)this + *(void *)(*(void *)&v391 - 24));
      double v426 = -8.99377342;
      if (v417 >= -8.99377342) {
        double v426 = v417;
      }
      if (v417 <= 8.99377342) {
        double v419 = v426;
      }
      else {
        double v419 = 8.99377342;
      }
    }
    else
    {
      int32x2_t v391 = *(int32x2_t *)this;
      unint64_t v418 = (double *)((char *)this + *(void *)(*(void *)this - 24));
      double v419 = v418[21] * 0.7;
    }
    v418[21] = v419;
  }
  else
  {
    int32x2_t v391 = *(int32x2_t *)this;
  }
  v427 = (char *)this + *(void *)(*(void *)&v391 - 24);
  long long v428 = *((_OWORD *)v427 + 14);
  long long v536 = *((_OWORD *)v427 + 13);
  long long v537 = v428;
  LODWORD(v427) = *((_DWORD *)v427 + 50);
  *(void *)&long long v527 = &unk_270EC4138;
  *((void *)&v527 + 1) = &v536;
  *(_DWORD *)v528 = v427;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      off_270EC4150((uint64_t)&v527, 0);
    }
  }
}

void BlueFin::GlPeNavGnssKF::UpdateHeading(BlueFin::GlPeNavGnssKF *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 72))(this) >> 4 >= 0x177) {
    double v2 = 0.1;
  }
  else {
    double v2 = 0.5;
  }
  uint64_t v3 = *((void *)this + 281);
  int v4 = *(_DWORD *)(v3 + 8);
  switch(v4)
  {
    case 0:
      double v2 = 0.277;
      break;
    case 1:
    case 2:
      double v2 = dbl_263BBC5D0[(*(_DWORD *)(v3 + 16) & 0xFFFFFFFE) == 2];
      break;
    case 3:
    case 4:
    case 5:
      double v2 = 1.0;
      break;
    case 6:
      double v2 = 2.0;
      break;
    default:
      break;
  }
  uint64_t v5 = *((void *)this + 5);
  double v6 = *(double *)(*(void *)(v5 + 32) + 32);
  double v7 = *(double *)(*(void *)(v5 + 16) + 16);
  float v8 = v6 + v7;
  float v9 = sqrtf(v8);
  BOOL v10 = (v4 - 3) <= 3 && *(_DWORD *)(v3 + 16) == 9;
  uint64_t v11 = *(void *)this;
  if (v9 >= 3.0
    || (long long v12 = (double *)((char *)this + *(void *)(v11 - 24)), sqrt(v12[14] * v12[14] + v12[13] * v12[13]) <= v9))
  {
    BOOL v10 = 0;
  }
  else
  {
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(v12 + 44), (uint64_t)&v25);
    unsigned int v13 = 0;
    BOOL v14 = (_DWORD *)(v25 + 4 * v26 - 4);
    do
    {
      if (*v14)
      {
        unsigned int v15 = *v14 - (((*v14 >> 1) & 0x5B6DB6DB) + ((*v14 >> 2) & 0x9249249));
        unsigned int v13 = ((v15 + (v15 >> 3)) & 0xC71C71C7) + v13 - 63 * (((v15 + (v15 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v14;
    }
    while ((unint64_t)v14 >= v25);
    if (v13 > 4u) {
      BOOL v10 = 1;
    }
    uint64_t v11 = *(void *)this;
  }
  float v16 = (char *)this + *(void *)(v11 - 24);
  long double v17 = *((double *)v16 + 13);
  long double v18 = *((double *)v16 + 14);
  float v19 = atan2(v18, v17);
  for (double i = v19; i >= 6.28318531; double i = i + -6.28318531)
    ;
  while (i < 0.0)
    double i = i + 6.28318531;
  double v21 = sqrt(v18 * v18 + v17 * v17);
  if ((v6 * (v17 * v17) + v7 * (v18 * v18)) / (v21 * v21 * (v21 * v21)) <= 9.8696044) {
    double v22 = (v6 * (v17 * v17) + v7 * (v18 * v18)) / (v21 * v21 * (v21 * v21));
  }
  else {
    double v22 = 9.8696044;
  }
  if (v21 > v2)
  {
    if (!v10)
    {
      if (!BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit(this)) {
        return;
      }
      uint64_t v11 = *(void *)this;
    }
    float v23 = i;
    *(float *)((char *)this + *(void *)(v11 - 24) + 176) = v23;
    float v24 = sqrt(v22);
    *(float *)((char *)this + *(void *)(v11 - 24) + 184) = v24;
  }
}

void BlueFin::GlPeNavGnssKF::PackSkfMeas_RR(uint64_t a1, uint64_t a2)
{
  double v2 = (void *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  LODWORD(v6) = v5;
  uint64_t v8 = v7;
  *(void *)double v71 = v9;
  uint64_t v10 = (uint64_t)v2;
  uint64_t v11 = 0;
  v91[100] = *MEMORY[0x263EF8340];
  do
  {
    long long v12 = &v90[v11 + 3200];
    *long long v12 = 0;
    *((_DWORD *)v12 + 1) = -1;
    *((_WORD *)v12 + 4) = 575;
    v11 += 12;
  }
  while (v11 != 1200);
  for (uint64_t i = 0; i != 3200; i += 32)
  {
    BOOL v14 = &v90[i];
    *(void *)BOOL v14 = 0;
    *((_DWORD *)v14 + 2) = 1315859240;
    *((_WORD *)v14 + 6) = 0;
    *((_DWORD *)v14 + 4) = 0;
    v14[20] = 0;
    *((_DWORD *)v14 + 6) = -1;
    *((_WORD *)v14 + 14) = 575;
  }
  int v15 = *(_DWORD *)(v2[281] + 8);
  if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) >= 0x2711
    && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v8) <= 3)
  {
    BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v10 + 8), v8, 27);
    float v16 = *(void **)v8;
    size_t v17 = ((4 * *(unsigned __int8 *)(v8 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;
    bzero(v16, v17);
    return;
  }
  unsigned int v72 = v15 - 1;
  unsigned __int8 v84 = *(unsigned char *)(v8 + 8);
  memcpy(v88, *(const void **)v8, 4 * v84);
  unsigned __int16 v86 = 0;
  unsigned __int8 v85 = 0;
  int v87 = v88[0];
  BlueFin::GlSetIterator::operator++(&v84);
  unsigned __int8 v19 = 0;
  uint64_t v70 = v4;
  if (v85 != v84)
  {
    unsigned __int8 v19 = 0;
    int v20 = (float *)v90;
    do
    {
      if (v86 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      double v21 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v86;
      char v22 = *v21;
      LODWORD(v21) = v21[1];
      v81[0] = v22;
      int v82 = (int)v21;
      __int16 v83 = v86;
      float v23 = *(BlueFin::GlPeMsmtMgr **)(v10 + 8);
      if ((((unint64_t)*(unsigned int *)(*((void *)v23 + 23) + (((unint64_t)v86 >> 3) & 0x1FFC)) >> (v86 & 0x1F)) & 1) == 0) {
        goto LABEL_63;
      }
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v23, (const BlueFin::GlSignalId *)v81, 0, 0);
      uint64_t PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v10 + 8), (const BlueFin::GlSignalId *)v81, 0);
      if (*((float *)MeMeas + 25) >= 0.000000016
        || (unsigned __int8 v26 = PeMeas, (BlueFin::stPeSigMeasKF::IsRRValidForNav(PeMeas) & 1) == 0))
      {
        uint64_t v39 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v10 + 8) + 19176), (uint64_t)v81);
        if (v39) {
          *(unsigned char *)(v39 + 449) = 33;
        }
        goto LABEL_63;
      }
      double v75 = &v77;
      unsigned __int8 v76 = 19;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      memset(v80, 0, sizeof(v80));
      if (!*(unsigned char *)(*(void *)(v10 + 2256) + 96)
        && (*(_DWORD *)(*(void *)(v10 + 2248) + 8) - 3) >= 0xFFFFFFFE
        && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v8) >= 5)
      {
        *((_DWORD *)&v77 + (v83 >> 5)) |= 1 << v83;
        int v27 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 192);
        uint64_t v28 = v10 + *(void *)(*(void *)v10 - 24);
        long long v73 = *(_OWORD *)(v28 + 8);
        uint64_t v74 = *(void *)(v28 + 24);
        uint64_t v29 = **(unsigned int **)(v10 + 2240);
        char v30 = v27(v10);
        BlueFin::GlPeNavUtil::ComputeRangeResidVec(v10, (uint64_t)&v75, (uint64_t)&v73, v29, 0, 0, 0, 1, v30, 1);
        float v31 = (*(float (**)(uint64_t))(*(void *)(v10 + *(void *)(*(void *)v10 - 24)) + 16))(v10 + *(void *)(*(void *)v10 - 24));
        double v32 = fabs(*(double *)(v89[0] + 8));
        double v33 = v31 * 1.5;
        if (v33 < 100.0) {
          double v33 = 100.0;
        }
        if (v32 > v33)
        {
          uint64_t v57 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v10 + 8) + 19176), (uint64_t)v81);
          uint64_t v4 = v70;
          if (v57) {
            *(unsigned char *)(v57 + 449) = 18;
          }
          goto LABEL_63;
        }
        uint64_t v4 = v70;
      }
      uint64_t v34 = &v90[12 * v19 + 3200];
      int v35 = v83;
      if (v34 != v81)
      {
        *uint64_t v34 = v81[0];
        unsigned int v36 = &v90[12 * v19 + 3200];
        *((_DWORD *)v36 + 1) = v82;
        *((_WORD *)v36 + 4) = v35;
      }
      *((_DWORD *)v75 + (v35 >> 5)) |= 1 << v35;
      BlueFin::GlPeNavUtil::ComputeRrateResidVec(v10, (uint64_t)&v75);
      if (!*(_DWORD *)v75)
      {
        if (v76 < 2uLL) {
          goto LABEL_71;
        }
        if (!*((_DWORD *)v75 + 1))
        {
          uint64_t v53 = 2;
          while (v76 != v53)
          {
            if (*((_DWORD *)v75 + v53++))
            {
              if (v53 - 1 < (unint64_t)v76) {
                goto LABEL_31;
              }
              break;
            }
          }
LABEL_71:
          uint64_t v55 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v10 + 8) + 19176), (uint64_t)v81);
          if (v55) {
            *(unsigned char *)(v55 + 449) = 18;
          }
          goto LABEL_63;
        }
      }
LABEL_31:
      int v37 = *((_DWORD *)MeMeas + 5);
      if (v37 == 4)
      {
        if ((*(_DWORD *)(*(void *)(v10 + 2248) + 8) - 1) >= 2) {
          double v38 = 5.0;
        }
        else {
          double v38 = 2.0;
        }
      }
      else
      {
        double v38 = 2.0;
        if (v37 <= 2)
        {
          if ((*(_DWORD *)(*(void *)(v10 + 2248) + 8) - 1) > 4)
          {
            BOOL v40 = 0;
          }
          else
          {
            char IsPRValidForNav = BlueFin::stPeSigMeasKF::IsPRValidForNav(v26);
            BOOL v40 = 0;
            if ((IsPRValidForNav & 1) == 0 && *((__int16 *)v26 + 39) <= 28) {
              BOOL v40 = sqrt(*(double *)(v10 + *(void *)(*(void *)v10 - 24) + 112)* *(double *)(v10 + *(void *)(*(void *)v10 - 24) + 112)+ *(double *)(v10 + *(void *)(*(void *)v10 - 24) + 104)* *(double *)(v10 + *(void *)(*(void *)v10 - 24) + 104)) > 0.5;
            }
          }
          goto LABEL_39;
        }
      }
      BOOL v40 = 1;
LABEL_39:
      char v41 = v81[0];
      unsigned int v42 = v81[0] - 76;
      if ((v81[0] + 122) >= 5u && (v81[0] - 76) >= 5u) {
        double v44 = v38;
      }
      else {
        double v44 = 10.0;
      }
      float v45 = *((float *)MeMeas + 27);
      float v46 = fminf(v45, 40.0);
      if (v46 <= 25.0) {
        float v47 = 1.2;
      }
      else {
        float v47 = 30.0 / v46;
      }
      double v48 = v47;
      if (*(_DWORD *)(*(void *)(v10 + 2248) + 16) == 1) {
        double v49 = 1.0;
      }
      else {
        double v49 = v48;
      }
      double v50 = *(double *)(v89[0] + 8);
      double v51 = fabs(v50) * v49;
      *(double *)&v91[v19] = v51;
      if (v72 <= 1
        && ((v82 - 1) < 3 || (v41 + 117) <= 0x23u)
        && *((double *)v26 + 35) < 0.0000000159999995)
      {
        double v51 = v51 * 0.5;
        *(double *)&v91[v19] = v51;
      }
      if (v40 || v42 <= 0x3E && ((1 << v42) & 0x7C0000000000001FLL) != 0) {
        *(double *)&v91[v19] = v44 * v51;
      }
      float v52 = v50;
      *int v20 = v52;
      v20[1] = v45;
      v20[2] = *((float *)MeMeas + 25) * 1000000000.0;
      *((_WORD *)v20 + 6) = *((_WORD *)v26 + 39);
      v20[4] = *((float *)MeMeas + 5);
      if (v20 + 5 != (float *)v81)
      {
        *((unsigned char *)v20 + 20) = v41;
        *((_DWORD *)v20 + 6) = v82;
        *((_WORD *)v20 + 14) = v83;
      }
      v20 += 8;
      ++v19;
LABEL_63:
      BlueFin::GlSetIterator::operator++(&v84);
    }
    while (v85 != v84);
  }
  if ((char)v19 >= (int)v6) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = (char)v19;
  }
  if ((int)v6 >= 2)
  {
    BlueFin::GlSortDoubles((uint64_t)v91, (const double *)v19, v89, v18);
    uint64_t v58 = 0;
    double v75 = &v77;
    unsigned __int8 v76 = 19;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    memset(v80, 0, sizeof(v80));
    uint64_t v59 = *(void *)v71;
    while (0x6DB6DB6DB6DB6DB7 * ((v59 - *(void *)v71) >> 3) < v6)
    {
      int v60 = *((unsigned __int8 *)v89 + v58);
      if (BlueFin::GlPeNavUtil::PackSkfMeas_RR_SignalId(v10, v59, (BlueFin::GlSignalId *)&v90[12 * *((unsigned __int8 *)v89 + v58) + 3200], v72 < 2))
      {
        v59 += 56;
        int v61 = *(__int16 *)&v90[12 * v60 + 3208];
        *((_DWORD *)v75 + (v61 >> 5)) |= 1 << v61;
      }
      if (v6 == ++v58) {
        goto LABEL_91;
      }
    }
    if ((int)v58 < (int)v6)
    {
      int v62 = (unsigned __int8 *)v89 + v58;
      uint64_t v63 = v6 - v58;
      do
      {
        int v64 = *v62++;
        uint64_t v65 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v10 + 8) + 19176), (uint64_t)&v90[12 * v64 + 3200]);
        if (v65) {
          *(unsigned char *)(v65 + 449) = 43;
        }
        --v63;
      }
      while (v63);
    }
LABEL_91:
    BlueFin::GlSetBase::operator=(v8, (uint64_t)&v75);
    long long v66 = v77;
    *(_OWORD *)(v8 + 28) = v78;
    long long v67 = *(_OWORD *)v80;
    *(_OWORD *)(v8 + 44) = v79;
    *(_OWORD *)(v8 + 60) = v67;
    *(_OWORD *)(v8 + 72) = *(_OWORD *)&v80[12];
    *(_OWORD *)(v8 + 12) = v66;
    uint64_t v4 = v70;
  }
  else
  {
    BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v10 + 8), v8, 23);
    bzero(*(void **)v8, ((4 * *(unsigned __int8 *)(v8 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  if ((*(unsigned char *)(v4 + 1) & 0x40) != 0)
  {
    int v68 = *(_DWORD *)(v10 + *(void *)(*(void *)v10 - 24) + 200);
    unsigned int v69 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10);
    BlueFin::GlPeNavGnssResidMon::RunBcMon(v10 + 4880, v68, v69, (uint64_t)v90, (uint64_t *)v8, 0);
  }
}

BOOL BlueFin::GlPeNavGnssKF::LeftXtcRecently(BlueFin::GlPeNavGnssKF *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 64))(this) >> 4 < 0x753
    || *((_DWORD *)this + 571) == -7200001
    || *(_DWORD *)(*((void *)this + 281) + 8) == 3)
  {
    return 0;
  }
  BlueFin::lla2ned((double *)((char *)this + *(void *)(*(void *)this - 24) + 8), (double *)this + 286, 0, &v6);
  BOOL result = 0;
  unsigned int v3 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - *((_DWORD *)this + 571);
  if (v3 >= 0x9C5)
  {
    unsigned int v4 = v3 >> 3;
    return sqrt(v7 * v7 + v6 * v6) < 50.0 || v4 < 0xC35;
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::UsedXtcRecently(BlueFin::GlPeNavGnssKF *this)
{
  if ((*(unsigned int (**)(BlueFin::GlPeNavGnssKF *))(*(void *)this + 64))(this) >> 4 < 0x753
    || *((_DWORD *)this + 571) == -7200001
    || *(_DWORD *)(*((void *)this + 281) + 8) == 3)
  {
    return 0;
  }
  BlueFin::lla2ned((double *)((char *)this + *(void *)(*(void *)this - 24) + 8), (double *)this + 286, 0, &v4);
  return sqrt(v5 * v5 + v4 * v4) < 1000.0
      || (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - *((_DWORD *)this + 571)) < 0x493E1;
}

uint64_t *BlueFin::GlPeNavGnssKF::ResetL5BiasKFState(uint64_t *this)
{
  uint64_t v1 = *this;
  *(_DWORD *)((char *)this + *(void *)(*this - 24) + 216) = 0;
  *(_DWORD *)((char *)this + *(void *)(v1 - 24) + 220) = 1077936128;
  *(void *)(*(void *)(this[5] + 72) + 72) = 0x4022000000000000;
  return this;
}

void BlueFin::GlPeNavGnssKF::ComputeAltQualForCalibration(BlueFin::GlPeNavGnssKF *this, char a2)
{
  double v4 = *(double *)(*(void *)(*((void *)this + 5) + 40) + 40);
  uint64_t v5 = *((void *)this + 2);
  int v25 = 0;
  unsigned __int8 v26 = v28;
  char v27 = 8;
  memset(v28, 0, 32);
  long long v29 = xmmword_263BBA380;
  int32x2_t v30 = vdup_n_s32(0x42C60000u);
  int v31 = 1120272384;
  BlueFin::stDops::stDops((uint64_t)v32, (uint64_t)&v25);
  uint64_t v33 = v5;
  uint64_t v6 = **((unsigned int **)this + 1);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlPeNavGnssKF *)((char *)this + *(void *)(*(void *)this - 24) + 264), (uint64_t)v21);
  *(void *)&long long v17 = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 88);
  int v7 = **((_DWORD **)this + 280);
  int v19 = 0;
  int v20 = v7;
  BlueFin::GlPeDops::GetDops((uint64_t)v32, v6);
  if ((a2 & 1) == 0)
  {
    if (v4 < 10.0
      && v24 < 2.2
      && (*(float (**)(char *, double))(*(void *)((char *)this + *(void *)(*(void *)this - 24)) + 16))((char *)this + *(void *)(*(void *)this - 24), v24) <= 4.4&& *((double *)this + 611) <= 13.5)
    {
      int v15 = *(unsigned int (***)(BlueFin::GlPeNavGnssKF *))this;
      float v16 = (char *)this + *(void *)(*(void *)this - 24);
      if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v16 + 264)) >= 9
        && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v16 + 352)) >= 0xA)
      {
        BOOL v14 = v15[7](this) > 0x78;
        goto LABEL_22;
      }
    }
LABEL_21:
    BOOL v14 = 0;
    goto LABEL_22;
  }
  v8.n128_u32[1] = 1071770501;
  if (v4 >= 0.56) {
    goto LABEL_21;
  }
  uint64_t v10 = (float *)((char *)this + *(void *)(*(void *)this - 24));
  v9.n128_f32[0] = v24;
  v8.n128_u32[0] = 1.75;
  if (v10[21] >= 8.0 || v24 >= 1.75) {
    goto LABEL_21;
  }
  if ((*(float (**)(float *, __n128, __n128))(*(void *)v10 + 16))(v10, v8, v9) > 4.0) {
    goto LABEL_21;
  }
  if (*((double *)this + 611) > 8.0) {
    goto LABEL_21;
  }
  long long v12 = (char *)this + *(void *)(*(void *)this - 24);
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v12 + 264)) < 0xC
    || BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v12 + 352)) < 0xB)
  {
    goto LABEL_21;
  }
  v21[0] = 0;
  v21[1] = 0;
  double v22 = 0.0;
  float v23 = 2000.0;
  long long v17 = *(_OWORD *)(v12 + 8);
  double v13 = *((double *)v12 + 3);
  double v18 = v13;
  if (BlueFin::GlPeKFAltAsst::altAsstFromCitySetFine((__int16 *)(*((void *)this + 283) + 64), (uint64_t)v21, (double *)&v17))BOOL v14 = (v13 - v22) * (v13 - v22) <= (v4 + (float)(v23 * v23)) * 4.0; {
  else
  }
    BOOL v14 = 1;
LABEL_22:
  *((unsigned char *)this + 12085) = v14;
}

BOOL BlueFin::GlPeNavGnssKF::UpdateHeadingConsistentWithDeals(BlueFin::GlPeNavGnssKF *this, int a2, BOOL *a3)
{
  BOOL result = BlueFin::GlPeNavGnssKF::IsAprioriHeadingOkForUse(this, a2);
  if (result)
  {
    if (*((unsigned char *)this + 2932))
    {
      float v6 = *((float *)this + 735);
      if (v6 < 180.0)
      {
        float v7 = *((float *)this + 734) * -0.0174532925;
        for (double i = *((float *)this + 392) + v7; i > 3.14159265; double i = i + -6.28318531)
          ;
        for (; i <= -3.14159265; double i = i + 6.28318531)
          ;
        double v9 = fabs(i);
        float v10 = v6 * 0.0174532925;
        if (v10 > 0.5236) {
          float v10 = 0.5236;
        }
        *a3 = v9 <= v10;
      }
    }
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssKF::IsAprioriHeadingOkForUse(BlueFin::GlPeNavGnssKF *this, int a2)
{
  BlueFin::lla2ned((double *)this + 197, (double *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, &v14);
  BOOL v4 = 0;
  int v5 = *((_DWORD *)this + 393);
  uint64_t v6 = *((void *)this + 599);
  if (*(_DWORD *)(v6 + 4216) == 6)
  {
    if (*(unsigned char *)(v6 + 4224)) {
      BOOL v4 = *(unsigned char *)(v6 + 4226) == 0;
    }
    else {
      BOOL v4 = 0;
    }
  }
  unsigned int v7 = *(_DWORD *)(*((void *)this + 281) + 8) - 1;
  if (v7 >= 2) {
    unsigned int v8 = 30000;
  }
  else {
    unsigned int v8 = 5000;
  }
  BOOL v10 = v5 != -7200001 && *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200) - v5 < v8;
  if (!v4 && !v10 && !a2) {
    return 0;
  }
  float v12 = sqrt(v15 * v15 + v14 * v14);
  float v13 = 50.0;
  if (v7 < 2) {
    float v13 = 25.0;
  }
  return v13 > v12;
}

void BlueFin::GlPeNavGnssKF::ZeroSpeedUpdate(uint64_t a1, BlueFin::BigMatrix *a2, double *a3, int a4, int a5)
{
  BOOL v10 = (BlueFin::GlPeNavGnssMotion *)(a1 + 4792);
  double NotMovingFactor = BlueFin::GlPeNavGnssMotion::GetNotMovingFactor((BlueFin::GlPeNavGnssMotion *)(a1 + 4792));
  if (*(unsigned char *)(*(void *)(a1 + 2248) + 1989)) {
    double v12 = 1.0;
  }
  else {
    double v12 = NotMovingFactor;
  }
  unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (v13 - 1 <= 0x18) {
    double v12 = v12 * ((double)v13 / 25.0);
  }
  int v14 = *(_DWORD *)(*(void *)(a1 + 2248) + 8);
  uint64_t v15 = *(void *)(a1 + 4792);
  v17 = *(_DWORD *)(v15 + 4216) == 6 && (float v16 = (unsigned char *)(v15 + 4224), *v16) && v16[2] == 0;
  if ((v14 - 1) >= 2) {
    float v18 = 3.0;
  }
  else {
    float v18 = 1.0;
  }
  if (v17 && (v14 - 3) < 3) {
    double v19 = 0.00999999978;
  }
  else {
    double v19 = 0.0500000007;
  }
  double v20 = fmax(v12, 0.0);
  if (v20 >= 1.0) {
    double v21 = 0.0;
  }
  else {
    double v21 = v20 + -1.0;
  }
  BlueFin::lla2ned(a3, (double *)(a1 + *(void *)(*(void *)a1 - 24) + 8), 0, &v64);
  if (*(_DWORD *)(*(void *)(a1 + 2248) + 16)) {
    unsigned int v22 = 60000;
  }
  else {
    unsigned int v22 = 120000;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 200) >= v22
    && (uint64_t v23 = *(void *)v10, *(_DWORD *)(*(void *)v10 + 4216) == 6)
    && *(unsigned char *)(v23 + 4224)
    && !*(unsigned char *)(v23 + 4226))
  {
    double v24 = sqrt(*(double *)v65.i64 * *(double *)v65.i64 + *(double *)&v65.i64[1] * *(double *)&v65.i64[1]);
  }
  else
  {
    if (fabs(*(double *)&v65.i64[1]) >= 10.0 || fabs(*(double *)v65.i64) >= 10.0) {
      goto LABEL_49;
    }
    uint64_t v23 = *(void *)v10;
    double v24 = sqrt(*(double *)v65.i64 * *(double *)v65.i64 + *(double *)&v65.i64[1] * *(double *)&v65.i64[1]);
    if (*(_DWORD *)(*(void *)v10 + 4216) != 6 || !*(unsigned char *)(v23 + 4224))
    {
      BOOL v25 = 0;
      goto LABEL_33;
    }
  }
  BOOL v25 = *(unsigned char *)(v23 + 4226) == 0;
LABEL_33:
  double v26 = 0.1;
  if (!v25 && v24 > 8.0)
  {
    double v26 = 10.0;
    if (v24 <= 10.0) {
      double v26 = v24 * 4.95 + -39.5;
    }
  }
  double v27 = 0.00001;
  if (v12 >= 0.00001) {
    double v27 = v12;
  }
  if (a5) {
    double v28 = 2.0;
  }
  else {
    double v28 = v26;
  }
  if (a5) {
    double v12 = 1.0;
  }
  else {
    double v12 = v27;
  }
  int v29 = *(unsigned __int8 *)(a1 + 26);
  BlueFin::BigMatrix::Null(a2, 1, 12);
  *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 16) = 0x3FF0000000000000;
  if (v29)
  {
    double v30 = v28 / v12 * (v28 / v12);
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)a1, (uint64_t)a2, 0, 0, 1, -*(double *)(a1 + *(void *)(*(void *)a1 - 24) + 104), v30);
    BlueFin::BigMatrix::Null(a2, 1, 12);
    *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 32) = 0x3FF0000000000000;
    double v31 = -*(double *)(a1 + *(void *)(*(void *)a1 - 24) + 112);
    double v32 = (uint64_t *)a1;
    uint64_t v33 = (uint64_t)a2;
    double v34 = v30;
  }
  else
  {
    double v31 = (float)-*(float *)(a1 + 1324);
    double v34 = v28 / v12 * (v28 / v12);
    double v32 = (uint64_t *)a1;
    uint64_t v33 = (uint64_t)a2;
  }
  BlueFin::GlPeNavGnssKF::MeasUpdate(v32, v33, 0, 0, 1, v31, v34);
LABEL_49:
  int v35 = *(unsigned __int8 *)(a1 + 26);
  BlueFin::BigMatrix::Null(a2, 1, 12);
  double v36 = 1.0;
  if (!v35) {
    double v36 = -1.0;
  }
  *(double *)(*(void *)(*((void *)a2 + 1) + 8) + 48) = v36;
  uint64_t v37 = *(void *)(a1 + 4792);
  double v38 = 0.01;
  if (*(_DWORD *)(v37 + 4216) == 6)
  {
    uint64_t v39 = (unsigned char *)(v37 + 4224);
    if (*v39) {
      double v38 = dbl_263BBC5E0[v39[2] == 0];
    }
  }
  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)a1, (uint64_t)a2, 1, 1, 1, *(float *)(a1 + 1328), v38);
  if (*(float *)(a1 + *(void *)(*(void *)a1 - 24) + 80) < 500.0
    && (BlueFin::GlPeNavGnssMotion::IsNotMoving(v10, 1.0)
     || *(_DWORD *)(*(void *)v10 + 4216) == 6
     && *(unsigned char *)(*(void *)v10 + 4224)
     && !*(unsigned char *)(*(void *)v10 + 4226))
    && a4
    && (a5 & 1) == 0
    && !BlueFin::GlPeNavGnssKF::PolaroidIsTunnelExit((BlueFin::GlPeNavGnssKF *)a1))
  {
    float v40 = v19 - v21 * (2.0 - v19);
    BlueFin::lla2ned(a3, (double *)(a1 + *(void *)(*(void *)a1 - 24) + 8), 0, &v62);
    double v41 = v62;
    double v64 = v62;
    double v59 = *(double *)v63.i64;
    int64x2_t v65 = v63;
    BlueFin::ned2hlu((long long *)&v64, (const BlueFin::Matrix *)(a1 + 1336), &v62);
    uint64_t v42 = *(void *)(a1 + 40);
    *(double *)v43.i64 = v40;
    if (*(unsigned char *)(a1 + 26))
    {
      double v44 = sqrt(*(double *)(*(void *)(v42 + 8) + 8));
      *(float *)&double v44 = v44 / (v44 + *(double *)v43.i64);
      double v45 = v41 * *(float *)&v44;
      double v46 = sqrt(*(double *)(*(void *)(v42 + 24) + 24));
      *(float *)v43.i32 = v46 / (v46 + *(double *)v43.i64);
      double v47 = *(float *)v43.i32 * v59;
      v43.i64[1] = 0;
    }
    else
    {
      double v48 = sqrt(*(double *)(*(void *)(v42 + 24) + 24));
      *(float *)&double v48 = v48 / (v48 + *(double *)v43.i64);
      double v49 = *(double *)v63.i64 * *(float *)&v48;
      double v50 = sqrt(*(double *)(*(void *)(v42 + 8) + 8));
      *(float *)&double v48 = v50 / (v50 + (float)(v18 * v40));
      double v51 = v62 * *(float *)&v48;
      double v45 = *(double *)(a1 + 1344) * v49 + *(double *)(a1 + 1336) * v51;
      double v47 = v49 * *(double *)(a1 + 1376) + *(double *)(a1 + 1368) * v51;
      int64x2_t v43 = vdupq_lane_s64(0x8000000000000000, 0);
    }
    *(double *)v43.i64 = v47;
    double v64 = v45;
    int64x2_t v65 = v43;
    uint64_t v52 = a1 + *(void *)(*(void *)a1 - 24);
    BlueFin::ned2lla((double *)(v52 + 8), &v64, (double *)&v60);
    *(_OWORD *)(v52 + 8) = v60;
    *(void *)(v52 + 24) = v61;
  }
  if (!*(unsigned char *)(a1 + 26))
  {
    if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 241))
    {
      BlueFin::BigMatrix::Null(a2, 1, 12);
      *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 32) = 0x3FF0000000000000;
      if (BlueFin::GlPeNavGnssKF::IsAprioriHeadingOkForUse((BlueFin::GlPeNavGnssKF *)a1, 0))
      {
        double v53 = fmax(v12, 0.0);
        if (v53 >= 1.0) {
          double v54 = 0.0174532925;
        }
        else {
          double v54 = (v53 + -1.0) * -0.41887902 + 0.0174532925;
        }
        double v55 = *(float *)(a1 + 1568);
        for (double i = v55 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad((BlueFin::GlPeNavGnssKF *)a1);
              i > 3.14159265;
        for (; i <= -3.14159265; double i = i + 6.28318531)
          ;
        float v58 = i;
        float v57 = v54;
        BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)a1, (uint64_t)a2, 0, 0, 1, v58, (float)((float)(v57 * v57) * 10.0));
      }
    }
  }
}

uint64_t BlueFin::ExtLocFilter::Reset(uint64_t result, uint64_t a2, int a3, float a4)
{
  *(_OWORD *)(result + 128) = v7;
  *(_OWORD *)(result + 144) = v8;
  *(_OWORD *)(result + 160) = v9;
  *(_OWORD *)(result + 176) = v10;
  *(_OWORD *)(result + 64) = 0uLL;
  *(_OWORD *)(result + 80) = v5;
  *(_OWORD *)(result + 96) = 0uLL;
  *(_OWORD *)(result + 112) = v6;
  *(void *)(result + 192) = 0x200000002;
  *(void *)(result + 200) = 0;
  *(void *)(result + 232) = 0;
  *(void *)(result + 328) = 0x100000002;
  *(void *)(result + 336) = 0;
  *(void *)(result + 368) = 0;
  *(void *)(result + 464) = 0x100000002;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 48) = 0x3FB99999A0000000;
  if (a3)
  {
    *(_OWORD *)(result + 8) = *(_OWORD *)a2;
    *(void *)(result + 24) = *(void *)(a2 + 16);
    *(_DWORD *)(result + 32) = a3;
    *(_DWORD *)(result + 36) = a3;
    *(float *)(result + 40) = a4;
    *(_DWORD *)(result + 472) = 0;
    *(unsigned char *)(result + 476) = 0;
    __int16 v4 = 1;
  }
  else
  {
    __int16 v4 = 0;
  }
  *(_WORD *)BOOL result = v4;
  return result;
}

void BlueFin::GlPeNavGnssKF::UpdateFromHulaSpeed(BlueFin::GlPeNavGnssKF *this)
{
  long long v12 = xmmword_263BBC570;
  long long v10 = &v13;
  uint64_t v11 = v14;
  v14[0] = 0;
  v14[1] = (char *)&v12 + 8;
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v10, 1, 12);
  *(void *)(v11[1] + 16) = 0x3FF0000000000000;
  int v2 = *(_DWORD *)(*((void *)this + 281) + 8);
  double v8 = 0.0;
  double v9 = 0.0;
  double v3 = *(double *)(*(void *)(*((void *)this + 5) + 32) + 32);
  if (BlueFin::GlPeNavGnssKF::IsHulaSpeedValid(this, &v9, &v8, v2 == 3) && sqrt(v3) < 0.785398163)
  {
    double v4 = 0.1;
    if (v8 <= 0.1) {
      double v4 = v8;
    }
    double v5 = v4 * v4;
    if (v2 != 3) {
      double v5 = v8 * v8;
    }
    float v6 = *((float *)this + 331);
    float v7 = 1.0;
    if (v6 < 0.0) {
      float v7 = -1.0;
    }
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v10, 1, 0, 1, -(v6 - v7 * v9), v5);
    *((unsigned char *)this + 2168) = 1;
  }
}

uint64_t BlueFin::GlPeNavGnssKF::IsHulaSpeedValid(BlueFin::GlPeNavGnssKF *this, double *a2, double *a3, unsigned int a4)
{
  *a2 = 0.0;
  *a3 = 0.0;
  uint64_t v4 = *((void *)this + 599);
  if (!*(unsigned char *)(v4 + 1225)) {
    return 0;
  }
  *a2 = *(double *)(v4 + 1184);
  double v5 = fmin(*(double *)(v4 + 1192), 1.0);
  *a3 = v5;
  if (v5 > *a2) {
    return 0;
  }
  float v6 = *((float *)this + 331);
  float v7 = 1.0;
  if (v6 < 0.0) {
    float v7 = -1.0;
  }
  double v8 = (float *)((char *)this + *(void *)(*(void *)this - 24));
  if (-(v6 - v7 * *a2) * -(v6 - v7 * *a2) > (v5 * v5 + (float)(v8[32] * v8[32])) * 16.0) {
    return 0;
  }
  if (*((unsigned char *)this + 26)) {
    double v10 = v8[46];
  }
  else {
    double v10 = sqrt(*(double *)(*(void *)(*((void *)this + 5) + 32) + 32));
  }
  if (v10 <= 0.436332313) {
    return 1;
  }
  else {
    return a4;
  }
}

void BlueFin::GlPeNavGnssKF::DealsMeasUpdate(BlueFin::GlPeNavGnssKF *this, BlueFin::BigMatrix *a2, int a3)
{
  BlueFin::BigMatrix::Null(a2, 1, 12);
  *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 16) = 0x3FF0000000000000;
  if (a3) {
    float v6 = 1.01;
  }
  else {
    float v6 = 0.01;
  }
  float v7 = *((float *)this + 331);
  float v8 = 1.0;
  if (v7 < 0.0) {
    float v8 = -1.0;
  }
  float v9 = *((double *)this + 359);
  float v10 = *((double *)this + 360);
  double v11 = (float)-(float)(v7 - (float)(v8 * sqrtf((float)(v9 * v9) + (float)(v10 * v10))));
  float v12 = *((double *)this + 363);
  float v13 = *((double *)this + 364);
  float v14 = sqrtf((float)(v12 * v12) + (float)(v13 * v13));
  float v15 = v14 * v14;
  if (v6 < v15) {
    float v6 = v15;
  }
  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)a2, 1, 0, 1, v11, v6);
  float v16 = *((float *)this + 735);
  BlueFin::BigMatrix::Null(a2, 1, 12);
  *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 32) = 0x3FF0000000000000;
  float v17 = *((float *)this + 734) * 0.0174532925;
  for (double i = v17 - BlueFin::GlPeNavGnssKF::GetTrueHeadingRad(this); i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  if (fabsf(*((float *)this + 331)) > 0.1 && *((float *)this + 735) < 180.0)
  {
    float v19 = v16 * 0.0174532925;
    float v20 = fmaxf(v19, 0.1);
    float v21 = fmax(i, -0.523598776);
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)a2, 1, 0, 1, fminf(v21, 0.5236), (float)(v20 * v20));
  }
  BlueFin::BigMatrix::Null(a2, 1, 12);
  *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 48) = 0x3FF0000000000000;
  double v22 = *((double *)this + 365) * *((double *)this + 365);
  double v23 = 0.00999999978;
  if (a3) {
    double v23 = 3.00999999;
  }
  if (v23 >= v22) {
    double v22 = v23;
  }
  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)a2, 1, 0, 1, -*((double *)this + 361) - *((float *)this + 332), v22);
  BlueFin::BigMatrix::Null(a2, 1, 12);
  *(void *)(*(void *)(*((void *)a2 + 1) + 8) + 64) = 0x3FF0000000000000;
  double v24 = *((float *)this + 724) - *(double *)((char *)this + *(void *)(*(void *)this - 24) + 152);
  double v25 = fmaxf(*((float *)this + 732) * *((float *)this + 732), 0.01);

  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)a2, 1, 0, 1, v24, v25);
}

void BlueFin::GlPeNavGnssKF::ApplyCrossTrackPosMeas(BlueFin::GlPeNavGnssKF *this, double a2, double a3, double a4)
{
  if (!*((unsigned char *)this + 26))
  {
    DeviceFaultNotify("glpe_navgnsskf.cpp", 6151, "ApplyCrossTrackPosMeas", (char)"m_bIsNed == true");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navgnsskf.cpp", 6151, "m_bIsNed == true");
  }
  long long v12 = xmmword_263BBC570;
  float v10 = &v13;
  double v11 = v14;
  v14[0] = 0;
  v14[1] = (char *)&v12 + 8;
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v10, 1, 12);
  __double2 v8 = __sincos_stret(a4);
  uint64_t v9 = v11[1];
  *(double *)(v9 + 8) = -v8.__sinval;
  *(double *)(v9 + 24) = v8.__cosval;
  BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v10, 1, 0, 1, a2, a3 * a3);
}

void BlueFin::GlPeNavGnssKF::ApplyXTCHdg(BlueFin::GlPeNavGnssKF *this, double a2, long double a3)
{
  if (a3 <= 1.57079633)
  {
    double v5 = (double *)((char *)this + *(void *)(*(void *)this - 24));
    double v6 = v5[13];
    double v7 = v5[14];
    double v8 = sin(a3) * sqrt(v7 * v7 + v6 * v6);
    if (v8 >= 0.5) {
      double v9 = v8;
    }
    else {
      double v9 = 0.5;
    }
    __double2 v10 = __sincos_stret(a2);
    long long v14 = xmmword_263BBC570;
    long long v12 = &v15;
    uint64_t v13 = v16;
    v16[0] = 0;
    v16[1] = (char *)&v14 + 8;
    BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v12, 1, 12);
    uint64_t v11 = v13[1];
    *(double *)(v11 + 16) = -v10.__sinval;
    *(double *)(v11 + 32) = v10.__cosval;
    BlueFin::GlPeNavGnssKF::MeasUpdate((uint64_t *)this, (uint64_t)&v12, 1, 0, 1, -(v10.__cosval * v7 + -v10.__sinval * v6), v9 * v9);
  }
}

double BlueFin::GlPeNavGnssKF::DynamicEAUpdate(BlueFin::GlPeNavGnssKF *this, double a2, double a3)
{
  uint64_t v3 = *((void *)this + 281);
  if (!*(unsigned char *)(v3 + 1989))
  {
    if (*(_DWORD *)(v3 + 16) == 1)
    {
      int v4 = *(_DWORD *)(v3 + 8);
      BOOL v5 = (v4 - 3) < 4;
    }
    else
    {
      BOOL v5 = 0;
      int v4 = *(_DWORD *)(v3 + 8);
    }
    double v6 = 0.25;
    if ((v4 - 1) < 2 || (v4 == 6 ? (int v7 = 1) : (int v7 = v5), v6 = 1.0, v7 == 1))
    {
      double v8 = v6 + a2 + *((double *)this + 1986);
      if (v8 < a3) {
        return v8;
      }
    }
  }
  return a3;
}

uint64_t BlueFin::GlPeNavGnssKF::GetGnssStatesForDrCalibration(BlueFin::GlPeNavGnssKF *this, BlueFin::GlPeNavGnssState *a2, BlueFin::GlPeNavGnssState *a3, BlueFin::GlPeNavGnssState *a4, unsigned int *a5, unsigned int *a6, int *a7)
{
  BlueFin::GlPeNavGnssState::operator=((uint64_t)a2, (uint64_t)this + *(void *)(*(void *)this - 24));
  BlueFin::GlPeNavGnssState::operator=((uint64_t)a3, (uint64_t)this + 12136);
  uint64_t result = BlueFin::GlPeNavGnssState::operator=((uint64_t)a4, (uint64_t)this + 12664);
  *a5 = *((_DWORD *)this + 545);
  *a6 = *((_DWORD *)this + 544);
  *a7 = *((_DWORD *)this + 401);
  return result;
}

void BlueFin::GlPeNavGnssKF::~GlPeNavGnssKF(BlueFin::GlPeNavGnssKF *this)
{
}

BlueFin::GlSetBase *BlueFin::GlPeNavGnssKF::GetBadSvsFromAprioriResids@<X0>(const void **this@<X0>, unsigned int *a2@<X8>)
{
  return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, a2 + 3, 0x13u, this + 202);
}

BlueFin::GlSetBase *BlueFin::GlPeNavGnssKF::GetBadSvsFromAposterioriResids@<X0>(const void **this@<X0>, unsigned int *a2@<X8>)
{
  return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, a2 + 3, 0x13u, this + 213);
}

double BlueFin::GlPeNavGnssKF::GetMaxResid(BlueFin::GlPeNavGnssKF *this)
{
  return *((double *)this + 622);
}

uint64_t BlueFin::GlPeNavGnssKF::GetQualGood4AltCal(BlueFin::GlPeNavGnssKF *this)
{
  return *((unsigned __int8 *)this + 12085);
}

double BlueFin::GlPeNavGnssKF::GetL5BiasEstimator(BlueFin::GlPeNavGnssKF *this, float *a2, float *a3, double *a4)
{
  *a2 = *((float *)this + 3023);
  *a3 = *((float *)this + 3024);
  double result = *((double *)this + 1513);
  *a4 = result;
  return result;
}

uint64_t BlueFin::GlPeNavGnssKF::GetResidMon(BlueFin::GlPeNavGnssKF *this)
{
  return (uint64_t)this + 4880;
}

double BlueFin::GlPeNavGnssKF::GetXtcTaHdg(BlueFin::GlPeNavGnssKF *this, double *a2, unsigned int *a3)
{
  double result = *((double *)this + 1515);
  *a2 = result;
  *a3 = *((_DWORD *)this + 3032);
  return result;
}

uint64_t BlueFin::GlPeNavGnssKF::GetUseRawPr(BlueFin::GlPeNavGnssKF *this)
{
  return *((unsigned __int8 *)this + 12084);
}

uint64_t BlueFin::GlPeNavGnssKF::GetGnssStateForHula(BlueFin::GlPeNavGnssKF *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 24);
}

uint64_t BlueFin::GlPeNavGnssKF::GetExtLocReport(BlueFin::GlPeNavGnssKF *this)
{
  return (uint64_t)this + 13192;
}

uint64_t BlueFin::GlPeNavGnssKF::GetClockAnomalyFlag(BlueFin::GlPeNavGnssKF *this)
{
  return *((unsigned __int8 *)this + 2200);
}

uint64_t BlueFin::GlPeNavGnssKF::SetTcxoMitigationState(uint64_t result, uint64_t a2)
{
  *(void *)(result + 15880) = a2;
  return result;
}

uint64_t BlueFin::GlPeNavGnssKF::GetDrResetType(BlueFin::GlPeNavGnssKF *this)
{
  return 0;
}

uint64_t BlueFin::GlPeNavGnssKF::GetPrSignalIdsForEnvironmentDetection(BlueFin::GlPeNavGnssKF *this)
{
  return (uint64_t)this + 13208;
}

uint64_t BlueFin::GlPeNavGnssKF::GetQbv(BlueFin::GlPeNavGnssKF *this, BlueFin::QuaternionD *a2)
{
  return 0;
}

uint64_t BlueFin::GlPeNavGnssKF::GetAccBias()
{
  return 0;
}

uint64_t BlueFin::GlPeNavGnssKF::IsHighDynamicFromIMU(BlueFin::GlPeNavGnssKF *this)
{
  return 0;
}

double BlueFin::GlPeNavGnssKF::GetInfoForPdrCalibration(char *a1, uint64_t a2, double *a3, uint64_t a4, double *a5, double *a6)
{
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = &a1[*(void *)(*(void *)a1 - 24)];
  *(_OWORD *)a2 = *(_OWORD *)(v11 + 8);
  *(void *)(a2 + 16) = *((void *)v11 + 3);
  *a3 = (*(float (**)(char *))(*(void *)&a1[*(void *)(v10 - 24)] + 16))(&a1[*(void *)(v10 - 24)]);
  BlueFin::GlPeNavGnssState::operator=(a4, (uint64_t)(a1 + 12664));
  uint64_t v12 = *(void *)a1;
  *a5 = *(float *)&a1[*(void *)(*(void *)a1 - 24) + 176];
  double result = *(float *)&a1[*(void *)(v12 - 24) + 184];
  *a6 = result;
  return result;
}

void virtual thunk to'BlueFin::GlPeNavGnssKF::~GlPeNavGnssKF(BlueFin::GlPeNavGnssKF *this)
{
}

void BlueFin::GlPeNavMeasSelect::~GlPeNavMeasSelect(BlueFin::GlPeNavMeasSelect *this)
{
}

void virtual thunk to'BlueFin::GlPeNavMeasSelect::~GlPeNavMeasSelect(BlueFin::GlPeNavMeasSelect *this)
{
}

uint64_t BlueFin::GlSignalIdList::operator[](unsigned int *a1, unsigned int a2)
{
  if (!a2 || *a1 <= a2)
  {
    DeviceFaultNotify("glsignalid.h", 490, "operator[]", (char)"index >= m_minIndex && index < m_maxIndex");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 490, "index >= m_minIndex && index < m_maxIndex");
  }
  return (uint64_t)a1 + 2 * a2 + 2;
}

double BlueFin::SKFVectorDim<21>::SKFVectorDim(uint64_t a1, int a2)
{
  int v2 = (_OWORD *)(a1 + 16);
  *(void *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 21;
  if (a2 >= 22)
  {
    DeviceFaultNotify("glpe_matrix.h", 497, "SKFVectorDim", (char)"LEN >= len");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 497, "LEN >= len");
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *int v2 = 0u;
  *(void *)a1 = v2;
  return result;
}

BlueFin::SKFVector *BlueFin::SKFVectorDim<21>::SKFVectorDim(BlueFin::SKFVector *a1, const BlueFin::SKFVector *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  *(void *)a1 = (char *)a1 + 16;
  *((_DWORD *)a1 + 2) = v2;
  *((_DWORD *)a1 + 3) = 21;
  if (*((int *)a2 + 2) >= 22)
  {
    DeviceFaultNotify("glpe_matrix.h", 510, "SKFVectorDim", (char)"LEN >= rotSrc.GetLen()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", 510, "LEN >= rotSrc.GetLen()");
  }
  BlueFin::SKFVector::Clone(a1, a2);
  return a1;
}

void BlueFin::GlPeNavGnssSpiderKF::~GlPeNavGnssSpiderKF(BlueFin::GlPeNavGnssSpiderKF *this)
{
}

const char *BlueFin::GlPeNavGnssSpiderKF::GetDebugDescr(BlueFin::GlPeNavGnssSpiderKF *this)
{
  return "<SPIDER>";
}

void virtual thunk to'BlueFin::GlPeNavGnssSpiderKF::~GlPeNavGnssSpiderKF(BlueFin::GlPeNavGnssSpiderKF *this)
{
}

uint64_t BlueFin::GlPeKfPool::Reset(void *a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 196) = a2;
  int v4 = a1 + 7262;
  do
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)v4[v3] + 24))(v4[v3], a2);
    ++v3;
  }
  while (v3 != 3);
  return result;
}

uint64_t BlueFin::GlPeKfPool::GetStP(BlueFin::GlPeKfPool *this, double *a2, double *a3, double *a4)
{
  return (*(uint64_t (**)(void, double *, double *, double *))(**((void **)this + 7265) + 296))(*((void *)this + 7265), a2, a3, a4);
}

uint64_t BlueFin::GlPeKfPool::ComputePosition(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t)(a1 + 7269);
  double v6 = a1 + 7262;
  int v7 = (const BlueFin::GlPeNavGnssState *)(a1 + 7269);
  do
  {
    uint64_t v8 = v6[v4];
    BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v13, v7);
    if (v4 == 1) {
      BlueFin::GlPeNavGnssState::operator=((uint64_t)v13, v5);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 384))(v8)) {
      (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v8 + 32))(v8, a2, v13);
    }
    ++v4;
    int v7 = (const BlueFin::GlPeNavGnssState *)((char *)v7 + 528);
  }
  while (v4 != 3);
  double v9 = a1 + 3;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[2764];
  *(_DWORD *)((char *)a1 + *(void *)(v10 - 24) + 240) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22328);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 224) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22336);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 208) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22320);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 232) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22344);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 220) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22332);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 228) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22340);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 212) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22324);
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 236) = *(_DWORD *)((char *)a1 + *(void *)(v11 - 24) + 22348);
  *(void *)((char *)v9 + *(void *)(v10 - 24) + 168) = *(void *)((char *)a1 + *(void *)(v11 - 24) + 22280);
  return BlueFin::GlPeNavGnssState::operator=((uint64_t)a1 + *(void *)(*a1 - 24), a1[7265] + *(void *)(*(void *)a1[7265] - 24));
}

uint64_t BlueFin::GlPeKfPool::InitializeNavGnssKF(BlueFin::GlPeKfPool *this, const BlueFin::GlPeNavGnssState *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = (char *)this + 58096;
  do
  {
    uint64_t v6 = *(void *)&v5[v4];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 384))(v6)) {
      (*(void (**)(uint64_t, const BlueFin::GlPeNavGnssState *))(*(void *)v6 + 40))(v6, a2);
    }
    v4 += 8;
  }
  while (v4 != 24);
  uint64_t v7 = *((void *)this + 7265) + *(void *)(**((void **)this + 7265) - 24);
  uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);

  return BlueFin::GlPeNavGnssState::operator=((uint64_t)v8, v7);
}

uint64_t BlueFin::GlPeKfPool::GetTimeSinceResetMs(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 64))();
}

uint64_t BlueFin::GlPeKfPool::GetTimeFullFixMs(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 80))();
}

uint64_t BlueFin::GlPeKfPool::ComputeAltQualForCalibration(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 88))();
}

uint64_t BlueFin::GlPeKfPool::GetBadSvsFromAprioriResids(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 96))();
}

uint64_t BlueFin::GlPeKfPool::GetBadSvsFromAposterioriResids(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 104))();
}

uint64_t BlueFin::GlPeKfPool::GetMaxResid(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 112))();
}

uint64_t BlueFin::GlPeKfPool::GetQualGood4AltCal(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 120))();
}

uint64_t BlueFin::GlPeKfPool::GetL5BiasEstimator(BlueFin::GlPeKfPool *this, float *a2, float *a3, double *a4)
{
  return (*(uint64_t (**)(void, float *, float *, double *))(**((void **)this + 7262) + 152))(*((void *)this + 7262), a2, a3, a4);
}

uint64_t BlueFin::GlPeKfPool::GetResidMon(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 168))();
}

uint64_t BlueFin::GlPeKfPool::GetGnssStatesForDrCalibration(BlueFin::GlPeKfPool *this, BlueFin::GlPeNavGnssState *a2, BlueFin::GlPeNavGnssState *a3, BlueFin::GlPeNavGnssState *a4, unsigned int *a5, unsigned int *a6, int *a7)
{
  return (*(uint64_t (**)(void, BlueFin::GlPeNavGnssState *, BlueFin::GlPeNavGnssState *, BlueFin::GlPeNavGnssState *, unsigned int *, unsigned int *, int *))(**((void **)this + 7262) + 176))(*((void *)this + 7262), a2, a3, a4, a5, a6, a7);
}

uint64_t BlueFin::GlPeKfPool::GetXtcTaHdg(BlueFin::GlPeKfPool *this, double *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, double *, unsigned int *))(**((void **)this + 7265) + 184))(*((void *)this + 7265), a2, a3);
}

uint64_t BlueFin::GlPeKfPool::ReConfigKF(BlueFin::GlPeKfPool *this, char a2, char a3)
{
  uint64_t v5 = (void *)((char *)this + 58096);
  uint64_t v6 = *((void *)this + 7263);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 384))(v6);
  if (a2)
  {
    if ((v7 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 376))(v6, 1);
      (*(void (**)(uint64_t, void))(*(void *)v6 + 40))(v6, v5[3] + *(void *)(*(void *)v5[3] - 24));
    }
  }
  else if (v7)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, 3);
    (*(void (**)(uint64_t, void))(*(void *)v6 + 376))(v6, 0);
    if (v5[3] == v5[1]) {
      v5[3] = *v5;
    }
  }
  uint64_t v8 = v5[2];
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8);
  if (a3)
  {
    if ((result & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 376))(v8, 1);
      uint64_t v10 = v5[3] + *(void *)(*(void *)v5[3] - 24);
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 40);
      return v11(v8, v10);
    }
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 376))(v8, 0);
    if (v5[3] == v5[2]) {
      v5[3] = *v5;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeKfPool::SetPrimaryFilter(BlueFin::GlPeKfPool *this)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v2 = (double *)((char *)this + 59736);
  uint64_t v3 = (void *)((char *)this + 58096);
  uint64_t v4 = (void *)*((void *)this + 7265);
  int v5 = **((_DWORD **)this + 1);
  uint64_t v6 = *((void *)this + 7268);
  BOOL v7 = (*(_DWORD *)(v6 + 8) - 1) <= 1 && *(unsigned char *)(v6 + 1909) != 0;
  uint64_t v8 = 0;
  double v9 = (char *)this + 58096;
  do
  {
    uint64_t v10 = *(void *)&v9[v8];
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 384))(v10);
    double v12 = 6367426.73;
    if (v11) {
      double v12 = (*(float (**)(uint64_t, double))(*(void *)(v10 + *(void *)(*(void *)v10 - 24)) + 16))(v10 + *(void *)(*(void *)v10 - 24), 6367426.73);
    }
    *(double *)((char *)&v29 + v8) = v12;
    v8 += 8;
  }
  while (v8 != 24);
  if (!v7)
  {
    double v13 = v31;
    if (v31 < 150.0) {
      double v13 = 150.0;
    }
    double v31 = v13;
  }
  double v14 = v30;
  if (v30 > 50.0 && v2[1] < 50.0) {
    *((_DWORD *)v3 + 8) = v5;
  }
  double v15 = v31;
  if (v31 > 50.0 && v2[2] < 50.0) {
    *((_DWORD *)v3 + 9) = v5;
  }
  if (v15 < 50.0) {
    *((_DWORD *)v3 + 9) = v5;
  }
  if ((*(unsigned int (**)(void))(*(void *)v3[1] + 384))(v3[1]))
  {
    uint64_t v16 = v3[1] + *(void *)(*(void *)v3[1] - 24);
    if ((*(float (**)(uint64_t))(*(void *)v16 + 16))(v16) < 50.0)
    {
      uint64_t v4 = (void *)v3[1];
      *((_DWORD *)v3 + 8) = v5;
      goto LABEL_52;
    }
  }
  if (v5)
  {
    unsigned int v17 = v5 - *((_DWORD *)v3 + 8);
    unsigned int v18 = v5 - *((_DWORD *)v3 + 9);
  }
  else
  {
    unsigned int v17 = 0;
    unsigned int v18 = 0;
  }
  float v19 = v3 + 2;
  char v20 = (*(uint64_t (**)(void))(*(void *)v3[2] + 384))(v3[2]);
  if (v15 >= 50.0)
  {
    if ((v20 & 1) != 0
      || ((*(uint64_t (**)(void))(*(void *)v3[1] + 384))(v3[1]) & 1) != 0
      || (v23 = (*(uint64_t (**)(void))(*(void *)*v3 + 384))(*v3), double v22 = (void **)v3, (v23 & 1) == 0))
    {
      uint64_t v24 = 2;
      if (v14 <= v15) {
        uint64_t v24 = 1;
      }
      double v25 = v14 - v15;
      if (v14 - v15 < 0.0) {
        double v25 = -(v14 - v15);
      }
      if (v25 <= 100.0 && v17 < 0x4E21) {
        goto LABEL_46;
      }
      double v22 = (void **)((char *)this + 8 * v24 + 58096);
    }
    goto LABEL_45;
  }
  if (v14 > 100.0) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  double v22 = (void **)(v3 + 2);
  if ((v21 & 1) != 0
    || (BlueFin::GlPeKfPool *)v3[3] == (BlueFin::GlPeKfPool *)((char *)this + 5872)
    && (*(unsigned int (**)(void))(*(void *)*v19 + 384))(*v19)
    && (double v22 = (void **)(v3 + 2), v17 >> 5 > 0x270))
  {
LABEL_45:
    uint64_t v4 = *v22;
  }
LABEL_46:
  if ((v29 < 50.0 || ((*(uint64_t (**)(void, double))(*(void *)*v19 + 384))(*v19, v29) & 1) == 0)
    && (v15 > 100.0 || (BlueFin::GlPeKfPool *)v3[3] == (BlueFin::GlPeKfPool *)((char *)this + 40104)
                    && v18 >> 5 >= 0x271))
  {
    uint64_t v4 = (void *)*v3;
  }
LABEL_52:
  if (v4 != (void *)v3[3])
  {
    v3[3] = v4;
    *((_DWORD *)v3 + 10) = v5;
  }
  *int v2 = v29;
  v2[1] = v14;
  v2[2] = v15;
  uint64_t v26 = (uint64_t)v4 + *(void *)(*v4 - 24);
  double v27 = (char *)this + *(void *)(*(void *)this - 24);

  return BlueFin::GlPeNavGnssState::operator=((uint64_t)v27, v26);
}

uint64_t BlueFin::GlPeKfPool::GetUseRawPr(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 192))();
}

uint64_t BlueFin::GlPeKfPool::GetExtLocReport(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7265) + 232))();
}

uint64_t BlueFin::GlPeKfPool::DrUpdate(BlueFin::GlPeKfPool *this, const BlueFin::GlPeNavGnssState *a2)
{
  uint64_t v4 = 0;
  int v5 = (char *)this + 58096;
  do
  {
    uint64_t v6 = *(void *)&v5[v4];
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 384))(v6)) {
      (*(void (**)(uint64_t, const BlueFin::GlPeNavGnssState *))(*(void *)v6 + 256))(v6, a2);
    }
    v4 += 8;
  }
  while (v4 != 24);
  uint64_t v7 = *((void *)this + 7265) + *(void *)(**((void **)this + 7265) - 24);
  uint64_t v8 = (char *)this + *(void *)(*(void *)this - 24);

  return BlueFin::GlPeNavGnssState::operator=((uint64_t)v8, v7);
}

uint64_t BlueFin::GlPeKfPool::GetADRDeltaPos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 58096;
  uint64_t v6 = a1 + 58152;
  do
  {
    BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)v8);
    BlueFin::GlPeNavGnssState::operator=(v6, (uint64_t)v8);
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v5 + v4) + 384))();
    if (result) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + v4) + 304))(*(void *)(v5 + v4), v6, a3);
    }
    v4 += 8;
    v6 += 528;
  }
  while (v4 != 24);
  return result;
}

uint64_t BlueFin::GlPeKfPool::SetTcxoMitigationState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 58096;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + v3) + 384))(*(void *)(v4 + v3));
    if (result) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + v3) + 280))(*(void *)(v4 + v3), a2);
    }
    v3 += 8;
  }
  while (v3 != 24);
  return result;
}

uint64_t BlueFin::GlPeKfPool::GetInfoForPdrCalibration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)(a1 + 58096);
  uint64_t v7 = *(void *)(a1 + 58120);
  if (v7 == v6[1])
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 344))(v7, a2, a3, a4);
    uint64_t v8 = 58680;
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v6 + 344))(*v6, a2, a3, a4);
    uint64_t v8 = 58152;
  }

  return BlueFin::GlPeNavGnssState::operator=(a4, a1 + v8);
}

double BlueFin::GlPeKfPool::ResetKFStateForPdrPropagation(BlueFin::GlPeKfPool *this)
{
  if (*(_DWORD *)(*((void *)this + 659) + 84) == 1
    && *((_DWORD *)this + 8) == 2
    && !*((unsigned char *)this + 5851)
    && (*(_DWORD *)(*((void *)this + 657) + 8) - 3) <= 3)
  {
    uint64_t v1 = *((void *)this + 5013);
    int v2 = (char *)this + *(void *)(v1 - 24) + 40104;
    uint64_t v3 = (char *)this + *(void *)(*((void *)this + 3) - 24) + 24;
    *(_OWORD *)(v2 + 8) = *(_OWORD *)(v3 + 8);
    double result = *((double *)v3 + 3);
    *((double *)v2 + 3) = result;
    uint64_t v5 = (void *)((char *)this + *(void *)(v1 - 24) + 40104);
    v5[13] = 0;
    v5[14] = 0;
    v5[15] = 0;
  }
  return result;
}

uint64_t BlueFin::GlPeKfPool::ResetL5BiasKFState(BlueFin::GlPeKfPool *this)
{
  uint64_t v2 = 0;
  uint64_t v3 = (char *)this + 58096;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)&v3[v2] + 384))(*(void *)&v3[v2]);
    if (result) {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)&v3[v2] + 360))(*(void *)&v3[v2]);
    }
    v2 += 8;
  }
  while (v2 != 24);
  uint64_t v5 = *(void *)this;
  *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 216) = 0;
  *(_DWORD *)((char *)this + *(void *)(v5 - 24) + 220) = 1077936128;
  return result;
}

void BlueFin::GlPeKfPool::~GlPeKfPool(BlueFin::GlPeKfPool *this)
{
}

uint64_t BlueFin::GlPeKfPool::GetGnssStateForHula(BlueFin::GlPeKfPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 7262) + 224))();
}

uint64_t BlueFin::GlPeKfPool::GetClockAnomalyFlag(BlueFin::GlPeKfPool *this)
{
  return 0;
}

uint64_t BlueFin::GlPeKfPool::GetDrResetType(BlueFin::GlPeKfPool *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*((void *)this + 3) - 24) + 220);
}

uint64_t BlueFin::GlPeKfPool::GetPrSignalIdsForEnvironmentDetection(BlueFin::GlPeKfPool *this)
{
  return (uint64_t)this + 35320;
}

BOOL BlueFin::GlPeKfPool::GetQbv(BlueFin::GlPeKfPool *this, BlueFin::QuaternionD *a2)
{
  return BlueFin::GlPePrawnKf::GetQbv((BlueFin::GlPeKfPool *)((char *)this + 24), a2);
}

BOOL BlueFin::GlPeKfPool::GetAccBias(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 4632);
  *(void *)(a2 + 16) = *(void *)(a1 + 4648);
  return *(_DWORD *)(a1 + 32) == 2
      && !*(unsigned char *)(a1 + 5851)
      && (*(_DWORD *)(*(void *)(a1 + 5256) + 8) - 3) < 4;
}

uint64_t BlueFin::GlPeKfPool::IsHighDynamicFromIMU(BlueFin::GlPeKfPool *this)
{
  return *((unsigned __int8 *)this + 5075);
}

uint64_t BlueFin::GlPeKfPool::IsKFEnabled(BlueFin::GlPeKfPool *this)
{
  return 0;
}

void virtual thunk to'BlueFin::GlPeKfPool::~GlPeKfPool(BlueFin::GlPeKfPool *this)
{
}

BOOL BlueFin::GlPePrawnKf::GetQbv(BlueFin::GlPePrawnKf *this, BlueFin::QuaternionD *a2)
{
  *(_OWORD *)a2 = *((_OWORD *)this + 301);
  *((_OWORD *)a2 + 1) = *((_OWORD *)this + 302);
  return *((_DWORD *)this + 2) == 2
      && !*((unsigned char *)this + 5827)
      && (*(_DWORD *)(*((void *)this + 654) + 8) - 3) < 4;
}

BOOL BlueFin::GlPePrawnKf::GetAccBias(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 4608);
  *(void *)(a2 + 16) = *(void *)(a1 + 4624);
  return *(_DWORD *)(a1 + 8) == 2
      && !*(unsigned char *)(a1 + 5827)
      && (*(_DWORD *)(*(void *)(a1 + 5232) + 8) - 3) < 4;
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::RemoveRrMeas(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v13 = *(unsigned char *)(v4 + 192);
  memcpy(v17, *(const void **)(v4 + 184), 4 * v13);
  unsigned __int16 v15 = 0;
  unsigned __int8 v14 = 0;
  int v16 = v17[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v13); v14 != v13; uint64_t result = BlueFin::GlSetIterator::operator++(&v13))
  {
    if (v15 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    uint64_t v6 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
    uint64_t v7 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v15;
    char v8 = *v7;
    LODWORD(v7) = v7[1];
    v10[0] = v8;
    int v11 = (int)v7;
    unsigned __int16 v12 = v15;
    uint64_t v9 = BlueFin::GlPeMsmtMgr::AccessPeMeas(v6, (const BlueFin::GlSignalId *)v10, 0);
    if (BlueFin::stPeSigMeasKF::IsRRValid((BlueFin::stPeSigMeasKF *)v9))
    {
      *(_DWORD *)(v9 + 72) |= 0x40u;
      *(unsigned char *)(v9 + 305) = a2;
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::RemovePrMeas(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned __int8 v13 = *(unsigned char *)(v4 + 192);
  memcpy(v17, *(const void **)(v4 + 184), 4 * v13);
  unsigned __int16 v15 = 0;
  unsigned __int8 v14 = 0;
  int v16 = v17[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v13); v14 != v13; uint64_t result = BlueFin::GlSetIterator::operator++(&v13))
  {
    if (v15 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    uint64_t v6 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
    uint64_t v7 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v15;
    char v8 = *v7;
    LODWORD(v7) = v7[1];
    v10[0] = v8;
    int v11 = (int)v7;
    unsigned __int16 v12 = v15;
    uint64_t v9 = BlueFin::GlPeMsmtMgr::AccessPeMeas(v6, (const BlueFin::GlSignalId *)v10, 0);
    if (BlueFin::stPeSigMeasKF::IsPRValid((BlueFin::stPeSigMeasKF *)v9))
    {
      *(_DWORD *)(v9 + 72) |= 8u;
      *(unsigned char *)(v9 + 304) = a2;
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::RenewMeas@<X0>(BlueFin::GlPeNavGnssMeasMgr *this@<X0>, const BlueFin::GlSignalIdSet *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 12) = 0u;
  *(void *)a4 = a4 + 12;
  *(unsigned char *)(a4 + 8) = 19;
  *(_OWORD *)(a4 + 28) = 0u;
  *(_OWORD *)(a4 + 44) = 0u;
  *(_OWORD *)(a4 + 60) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  uint64_t v8 = *((void *)this + 1);
  unsigned __int8 v18 = *(unsigned char *)(v8 + 192);
  memcpy(v22, *(const void **)(v8 + 184), 4 * v18);
  unsigned __int16 v20 = 0;
  unsigned __int8 v19 = 0;
  int v21 = v22[0];
  uint64_t result = BlueFin::GlSetIterator::operator++(&v18);
  if (v19 != v18)
  {
    while (1)
    {
      if (v20 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v10 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v20;
      char v11 = *v10;
      LODWORD(v10) = v10[1];
      v15[0] = v11;
      int v16 = (int)v10;
      __int16 v17 = v20;
      unsigned __int16 v12 = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::AccessPeMeas(*((BlueFin::GlPeMsmtMgr **)this + 1), (const BlueFin::GlSignalId *)v15, 0);
      if (!BlueFin::stPeSigMeasKF::IsPRValid(v12)) {
        goto LABEL_8;
      }
      int v13 = v17 >> 5;
      if (a3) {
        break;
      }
      char v14 = v17 & 0x1F;
      if (((unint64_t)*(unsigned int *)(*(void *)a2 + 4 * v13) >> (v17 & 0x1F))) {
        goto LABEL_7;
      }
LABEL_8:
      if (BlueFin::stPeSigMeasKF::IsRRValid(v12)) {
        *((_DWORD *)v12 + 18) &= ~0x40u;
      }
      uint64_t result = BlueFin::GlSetIterator::operator++(&v18);
      if (v19 == v18) {
        return result;
      }
    }
    char v14 = v17 & 0x1F;
LABEL_7:
    *((_DWORD *)v12 + 18) = *((_DWORD *)v12 + 18) & 0xFFFFFFF3 | 4;
    *(_DWORD *)(*(void *)a4 + 4 * v13) |= 1 << v14;
    goto LABEL_8;
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavGnssMeasMgr::CheckMissingBits(unsigned __int8 *this, char a2, signed __int8 *a3, signed __int8 *a4)
{
  if (this[2212] && (a2 & 1) != 0)
  {
    uint64_t v6 = this;
    uint64_t v7 = *((void *)this + 1);
    unsigned __int8 v17 = *(unsigned char *)(v7 + 192);
    memcpy(v21, *(const void **)(v7 + 184), 4 * v17);
    unsigned __int16 v19 = 0;
    unsigned __int8 v18 = 0;
    int v20 = v21[0];
    this = BlueFin::GlSetIterator::operator++(&v17);
    if (v18 == v17)
    {
      LOBYTE(v8) = 0;
      signed __int8 v9 = 0;
    }
    else
    {
      int v8 = 0;
      signed __int8 v9 = 0;
      do
      {
        if (v19 >= 0x23FuLL)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        uint64_t v10 = (BlueFin::GlPeMsmtMgr *)*((void *)v6 + 1);
        char v11 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v19;
        unsigned __int8 v12 = *v11;
        LODWORD(v11) = v11[1];
        v14[0] = v12;
        int v15 = (int)v11;
        unsigned __int16 v16 = v19;
        int v13 = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::AccessPeMeas(v10, (const BlueFin::GlSignalId *)v14, 0);
        if (BlueFin::stPeSigMeasKF::IsPRValid(v13))
        {
          ++v9;
          if (*((_DWORD *)v13 + 17) != -1)
          {
            if (v12 > 0x20u)
            {
              if (v12 > 0x33u) {
                ++v8;
              }
            }
            else
            {
              ++v8;
            }
          }
        }
        this = BlueFin::GlSetIterator::operator++(&v17);
      }
      while (v18 != v17);
      if (v6[2212] && (char)v8 <= 2 && v9 > 4) {
        v6[2212] = 0;
      }
    }
    if (a3) {
      *a3 = v8;
    }
    if (a4) {
      goto LABEL_25;
    }
  }
  else
  {
    if (a3) {
      *a3 = 0;
    }
    if (a4)
    {
      signed __int8 v9 = 0;
LABEL_25:
      *a4 = v9;
    }
  }
  return this;
}

uint64_t BlueFin::GlPeNavMeasSelect::SelectRr(uint64_t result, const BlueFin::GlPeNavUtil *a2, BlueFin::GlSetBase *this, uint64_t a4, int a5, int a6, int a7, int a8, BOOL a9)
{
  uint64_t v14 = result;
  int v15 = *(_DWORD *)(result + 36);
  if (!v15 || **(_DWORD **)(result + 24) != v15)
  {
    if (!BlueFin::GlSetBase::HasAny(this)) {
      goto LABEL_20;
    }
    int v37 = a8;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v43, (unsigned int *)v44, 0x13u, (const void **)this);
    if (!*(unsigned char *)(v14 + 140)) {
      BlueFin::GlPeNavMeasSelect::RemoveGhosts((BlueFin::GlPeNavMeasSelect *)v14, a2, this, a9);
    }
    double v36 = a2;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v47, (unsigned int *)v48, 0x13u, (const void **)this);
    double v38 = (uint64_t (**)(BlueFin::GlPeNavUtil *__hidden, float))&v39[4];
    v39[0] = 19;
    memset(&v39[4], 0, 32);
    long long v40 = 0u;
    memset(v41, 0, 28);
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v47, (int **)&v38);
    BlueFin::GlSetBase::operator=((uint64_t)&v47, (uint64_t)&v38);
    v48[1] = *(_OWORD *)&v39[20];
    int v48[2] = v40;
    *(_OWORD *)double v49 = *(_OWORD *)v41;
    *(_OWORD *)&v49[12] = *(_OWORD *)&v41[3];
    v48[0] = *(_OWORD *)&v39[4];
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v47);
    unsigned __int16 v16 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v50, (unsigned int *)&v53, 0x13u, &v43);
    double v38 = (uint64_t (**)(BlueFin::GlPeNavUtil *__hidden, float))&v39[4];
    v39[0] = 19;
    memset(&v39[4], 0, 32);
    long long v40 = 0u;
    memset(v41, 0, 28);
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)v16, (int **)&v38, &v47);
    BlueFin::GlSetBase::operator=((uint64_t)v50, (uint64_t)&v38);
    long long v54 = *(_OWORD *)&v39[20];
    long long v55 = v40;
    v56[0] = *(_OWORD *)v41;
    *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)&v41[3];
    long long v53 = *(_OWORD *)&v39[4];
    BlueFin::GlSetBase::operator=((uint64_t)&v43, (uint64_t)v50);
    _OWORD v44[2] = v55;
    *(_OWORD *)double v45 = v56[0];
    *(_OWORD *)&v45[12] = *(_OWORD *)((char *)v56 + 12);
    v44[0] = v53;
    v44[1] = v54;
    BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v14 + 8), (uint64_t)&v43, 16);
    LOBYTE(v38) = *((unsigned char *)this + 8);
    memcpy(v39, *(const void **)this, 4 * v38);
    WORD1(v38) = 0;
    BYTE1(v38) = 0;
    HIDWORD(v38) = *(_DWORD *)v39;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v38);
    while (BYTE1(v38) != v38)
    {
      __int16 v17 = WORD1(v38);
      if (WORD1(v38) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      unsigned __int8 v18 = *(BlueFin::GlPeMsmtMgr **)(v14 + 24);
      unsigned __int16 v19 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v38);
      int v21 = v19[1];
      v50[0] = *v19;
      char v20 = v50[0];
      int v51 = v21;
      __int16 v52 = WORD1(v38);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v18, (const BlueFin::GlSignalId *)v50, 0, 0);
      char v23 = *(BlueFin::GlPeMsmtMgr **)(v14 + 24);
      v50[0] = v20;
      int v51 = v21;
      __int16 v52 = v17;
      uint64_t v24 = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::AccessPeMeas(v23, (const BlueFin::GlSignalId *)v50, 0);
      double v25 = v24;
      if (*((float *)MeMeas + 25) > 0.000000015
        || (unsigned int v26 = MeMeas[140], !BlueFin::stPeSigMeasKF::IsRRValidForNav(v24))
        || *(unsigned char *)(v14 + 140) && v26 == 5 * ((858993460 * (unint64_t)v26) >> 32))
      {
        BlueFin::GlSetBase::Remove((uint64_t)this, v17);
        *((unsigned char *)v25 + 305) = 18;
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v38);
    }
    if (BlueFin::GlSetBase::HasAny(this))
    {
      *(_OWORD *)&v41[191] = *(_OWORD *)a4;
      uint64_t v42 = *(void *)(a4 + 16);
      BlueFin::GlPeNavUtil::ComputeRrateResidVec(v14, (uint64_t)this);
      if (a7)
      {
        BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v39[16], (const BlueFin::GlPeNavUtil *)((char *)v36 + *(void *)(*(void *)v36 - 24)));
        double v38 = &off_270EC40B0;
        *(void *)&v39[16] = &unk_270EC40E8;
        *(_OWORD *)uint64_t v39 = *(_OWORD *)((char *)v36 + 8);
        double v27 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v50, (unsigned int *)&v53, 0x13u, (const void **)this);
        BlueFin::GlSignalIdSet::GetSvIdSet(v27, (uint64_t)v46);
        BlueFin::GlPeNavUtil::ComputeDops((BlueFin::GlPeNavUtil *)&v38, (const BlueFin::GlSvIdSet *)v46);
        double v28 = 2.5;
        if ((**(_DWORD **)(v14 + 24) - v37) > 0xC350) {
          double v28 = 6.0;
        }
        if (v28 < *(float *)v49)
        {
          BlueFin::GlPeMsmtMgr::SetRrCode(*(void *)(v14 + 8), (uint64_t)this, 24);
          bzero(*(void **)this, ((4 * *((unsigned __int8 *)this + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        }
      }
LABEL_20:
      BlueFin::GlSetBase::operator=(v14 + 40, (uint64_t)this);
      *(_OWORD *)(v14 + 52) = *(_OWORD *)((char *)this + 12);
      long long v29 = *(_OWORD *)((char *)this + 28);
      long long v30 = *(_OWORD *)((char *)this + 44);
      long long v31 = *(_OWORD *)((char *)this + 60);
      *(_OWORD *)(v14 + 112) = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)(v14 + 100) = v31;
      *(_OWORD *)(v14 + 84) = v30;
      *(_OWORD *)(v14 + 68) = v29;
      int v32 = **(_DWORD **)(v14 + 24);
      *(_DWORD *)(v14 + 36) = v32;
      uint64_t result = BlueFin::GlSetBase::Cnt(this);
      if (result < 3) {
        return result;
      }
      goto LABEL_21;
    }
    BlueFin::GlSetBase::operator=(v14 + 40, (uint64_t)this);
    *(_OWORD *)(v14 + 52) = *(_OWORD *)((char *)this + 12);
    long long v33 = *(_OWORD *)((char *)this + 28);
    long long v34 = *(_OWORD *)((char *)this + 44);
    long long v35 = *(_OWORD *)((char *)this + 60);
    *(_OWORD *)(v14 + 112) = *(_OWORD *)((char *)this + 72);
    *(_OWORD *)(v14 + 100) = v35;
    *(_OWORD *)(v14 + 84) = v34;
    *(_OWORD *)(v14 + 68) = v33;
    int v32 = **(_DWORD **)(v14 + 24);
    *(_DWORD *)(v14 + 36) = v32;
    uint64_t result = BlueFin::GlSetBase::Cnt(this);
    if (result > 2) {
LABEL_21:
    }
      *(_DWORD *)(v14 + 32) = v32;
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavMeasSelect::RemoveGhosts(BlueFin::GlPeNavMeasSelect *this, const BlueFin::GlPeNavUtil *a2, BlueFin::GlSignalIdSet *a3, int a4)
{
  if (BlueFin::GlSetBase::HasAny(a3))
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v27, v28, 0x13u, (const void **)a3);
    unsigned __int8 v22 = *((unsigned char *)a3 + 8);
    memcpy(v26, *(const void **)a3, 4 * v22);
    unsigned __int16 v24 = 0;
    unsigned __int8 v23 = 0;
    int v25 = v26[0];
    for (uint64_t result = BlueFin::GlSetIterator::operator++(&v22); v23 != v22; uint64_t result = BlueFin::GlSetIterator::operator++(&v22))
    {
      unint64_t v9 = v24;
      if (v24 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v10 = (BlueFin::GlPeMsmtMgr *)*((void *)this + 3);
      char v11 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v24;
      char v12 = *v11;
      LODWORD(v11) = v11[1];
      LOBYTE(v19) = v12;
      HIDWORD(v19) = v11;
      LOWORD(v20) = v24;
      if (*((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(v10, (const BlueFin::GlSignalId *)&v19, 0, 0) + 27) <= *((float *)this + 34))
      {
        BlueFin::GlSetBase::Remove((uint64_t)&v27, (__int16)v9);
        BlueFin::GlPeNavGnssState::GlPeNavGnssState((BlueFin::GlPeNavGnssState *)&v21, (const BlueFin::GlPeNavUtil *)((char *)a2 + *(void *)(*(void *)a2 - 24)));
        unsigned __int16 v19 = &off_270EC40B0;
        int v21 = &unk_270EC40E8;
        long long v20 = *(_OWORD *)((char *)a2 + 8);
        BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v27, (uint64_t)v17);
        BlueFin::GlPeNavUtil::ComputeDops((BlueFin::GlPeNavUtil *)&v19, (const BlueFin::GlSvIdSet *)v17);
        if (v18 < 2.0 || a4) {
          BlueFin::GlSetBase::Remove((uint64_t)a3, (__int16)v9);
        }
        else {
          *(_DWORD *)(v27 + ((v9 >> 3) & 0x1FFC)) |= 1 << v9;
        }
      }
    }
  }
  else
  {
    BlueFin::GlSetBase::operator=((uint64_t)this + 40, (uint64_t)a3);
    *(_OWORD *)((char *)this + 52) = *(_OWORD *)((char *)a3 + 12);
    long long v13 = *(_OWORD *)((char *)a3 + 28);
    long long v14 = *(_OWORD *)((char *)a3 + 44);
    long long v15 = *(_OWORD *)((char *)a3 + 60);
    *((_OWORD *)this + 7) = *(_OWORD *)((char *)a3 + 72);
    *(_OWORD *)((char *)this + 100) = v15;
    *(_OWORD *)((char *)this + 84) = v14;
    *(_OWORD *)((char *)this + 68) = v13;
    int v16 = **((_DWORD **)this + 3);
    *((_DWORD *)this + 9) = v16;
    uint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::Cnt(a3);
    if (result >= 3) {
      *((_DWORD *)this + 8) = v16;
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavMeasSelect::SelectPr(BlueFin::GlPeNavMeasSelect *this, const BlueFin::GlPeNavUtil *a2, BlueFin::GlSignalIdSet *a3, int a4)
{
  uint64_t result = (unsigned __int8 *)BlueFin::GlSetBase::HasAny(a3);
  if (result)
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v27, (unsigned int *)v28, 0x13u, (const void **)a3);
    if (!*((unsigned char *)this + 140)) {
      BlueFin::GlPeNavMeasSelect::RemoveGhosts(this, a2, a3, a4);
    }
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v17, (unsigned int *)&v18, 0x13u, (const void **)a3);
    long long v30 = &v32;
    char v31 = 19;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v17, (int **)&v30);
    BlueFin::GlSetBase::operator=((uint64_t)&v17, (uint64_t)&v30);
    long long v19 = v33;
    long long v20 = v34;
    *(_OWORD *)int v21 = *(_OWORD *)v35;
    *(_OWORD *)&unsigned char v21[12] = *(_OWORD *)&v35[12];
    long long v18 = v32;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v17);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v22, (unsigned int *)&v23, 0x13u, &v27);
    long long v30 = &v32;
    char v31 = 19;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v22, (int **)&v30, (int **)&v17);
    BlueFin::GlSetBase::operator=((uint64_t)&v22, (uint64_t)&v30);
    long long v24 = v33;
    long long v25 = v34;
    *(_OWORD *)unsigned int v26 = *(_OWORD *)v35;
    *(_OWORD *)&v26[12] = *(_OWORD *)&v35[12];
    long long v23 = v32;
    BlueFin::GlSetBase::operator=((uint64_t)&v27, (uint64_t)&v22);
    uint64_t v28[2] = v25;
    *(_OWORD *)long long v29 = *(_OWORD *)v26;
    *(_OWORD *)&v29[12] = *(_OWORD *)&v26[12];
    v28[0] = v23;
    v28[1] = v24;
    BlueFin::GlPeMsmtMgr::SetPrCode(*((void *)this + 1), (uint64_t)&v27, 16);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v22, (unsigned int *)&v23, 0x13u, (const void **)a3);
    BlueFin::GlPeNavMeasSelect::RemoveTimeFail(this, a3);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v12, (unsigned int *)&v13, 0x13u, (const void **)a3);
    long long v30 = &v32;
    char v31 = 19;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v12, (int **)&v30);
    BlueFin::GlSetBase::operator=((uint64_t)&v12, (uint64_t)&v30);
    long long v14 = v33;
    long long v15 = v34;
    *(_OWORD *)int v16 = *(_OWORD *)v35;
    *(_OWORD *)&v16[12] = *(_OWORD *)&v35[12];
    long long v13 = v32;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v12);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v17, (unsigned int *)&v18, 0x13u, &v22);
    long long v30 = &v32;
    char v31 = 19;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v17, (int **)&v30, &v12);
    BlueFin::GlSetBase::operator=((uint64_t)&v17, (uint64_t)&v30);
    long long v19 = v33;
    long long v20 = v34;
    *(_OWORD *)int v21 = *(_OWORD *)v35;
    *(_OWORD *)&unsigned char v21[12] = *(_OWORD *)&v35[12];
    long long v18 = v32;
    BlueFin::GlSetBase::operator=((uint64_t)&v22, (uint64_t)&v17);
    long long v24 = v19;
    long long v25 = v20;
    *(_OWORD *)unsigned int v26 = *(_OWORD *)v21;
    *(_OWORD *)&v26[12] = *(_OWORD *)&v21[12];
    long long v23 = v18;
    BlueFin::GlPeMsmtMgr::SetPrCode(*((void *)this + 1), (uint64_t)&v22, 9);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v17, (unsigned int *)&v18, 0x13u, (const void **)a3);
    BlueFin::GlPeNavMeasSelect::RemoveHighUra(this, a3);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v9, (unsigned int *)v10, 0x13u, (const void **)a3);
    long long v30 = &v32;
    char v31 = 19;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v9, (int **)&v30);
    BlueFin::GlSetBase::operator=((uint64_t)&v9, (uint64_t)&v30);
    v10[1] = v33;
    unsigned char v10[2] = v34;
    *(_OWORD *)char v11 = *(_OWORD *)v35;
    *(_OWORD *)&v11[12] = *(_OWORD *)&v35[12];
    v10[0] = v32;
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v9);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v12, (unsigned int *)&v13, 0x13u, &v17);
    long long v30 = &v32;
    char v31 = 19;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    memset(v35, 0, sizeof(v35));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v12, (int **)&v30, &v9);
    BlueFin::GlSetBase::operator=((uint64_t)&v12, (uint64_t)&v30);
    long long v14 = v33;
    long long v15 = v34;
    *(_OWORD *)int v16 = *(_OWORD *)v35;
    *(_OWORD *)&v16[12] = *(_OWORD *)&v35[12];
    long long v13 = v32;
    BlueFin::GlSetBase::operator=((uint64_t)&v17, (uint64_t)&v12);
    long long v19 = v14;
    long long v20 = v15;
    *(_OWORD *)int v21 = *(_OWORD *)v16;
    *(_OWORD *)&unsigned char v21[12] = *(_OWORD *)&v16[12];
    long long v18 = v13;
    return BlueFin::GlPeMsmtMgr::SetPrCode(*((void *)this + 1), (uint64_t)&v17, 11);
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavMeasSelect::RemoveTimeFail(BlueFin::GlPeNavMeasSelect *this, BlueFin::GlSignalIdSet *a2)
{
  unsigned __int8 v11 = *((unsigned char *)a2 + 8);
  memcpy(v15, *(const void **)a2, 4 * v11);
  unsigned __int16 v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v11); v12 != v11; uint64_t result = BlueFin::GlSetIterator::operator++(&v11))
  {
    unsigned __int16 v5 = v13;
    if (v13 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    uint64_t v6 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v13;
    char v7 = *v6;
    LODWORD(v6) = v6[1];
    v8[0] = v7;
    int v9 = (int)v6;
    unsigned __int16 v10 = v13;
    if (((*(uint64_t (**)(void, unsigned char *, uint64_t))(**((void **)this + 2) + 72))(*((void *)this + 2), v8, 3) & 1) == 0)BlueFin::GlSetBase::Remove((uint64_t)a2, (__int16)v5); {
  }
    }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavMeasSelect::RemoveHighUra(BlueFin::GlPeNavMeasSelect *this, BlueFin::GlSignalIdSet *a2)
{
  unsigned __int8 v11 = *((unsigned char *)a2 + 8);
  memcpy(v15, *(const void **)a2, 4 * v11);
  unsigned __int16 v13 = 0;
  unsigned __int8 v12 = 0;
  int v14 = v15[0];
  for (uint64_t result = BlueFin::GlSetIterator::operator++(&v11); v12 != v11; uint64_t result = BlueFin::GlSetIterator::operator++(&v11))
  {
    unsigned __int16 v5 = v13;
    if (v13 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    uint64_t v6 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v13;
    char v7 = *v6;
    LODWORD(v6) = v6[1];
    v8[0] = v7;
    int v9 = (int)v6;
    unsigned __int16 v10 = v13;
    if ((*(float (**)(void, unsigned char *))(**((void **)this + 2) + 40))(*((void *)this + 2), v8) >= 200.0) {
      BlueFin::GlSetBase::Remove((uint64_t)a2, (__int16)v5);
    }
  }
  return result;
}

unsigned __int8 *BlueFin::GlPeNavMeasSelect::SelectADR(BlueFin::GlPeNavMeasSelect *this, BlueFin::GlSignalIdSet *a2)
{
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v21, (unsigned int *)v22, 0x13u, (const void **)a2);
  BlueFin::GlSignalIdSet::Print(a2, 0x6Fu);
  unsigned __int8 v16 = *((unsigned char *)a2 + 8);
  memcpy(v20, *(const void **)a2, 4 * v16);
  unsigned __int16 v18 = 0;
  unsigned __int8 v17 = 0;
  int v19 = v20[0];
  BlueFin::GlSetIterator::operator++(&v16);
  while (v17 != v16)
  {
    unsigned __int16 v4 = v18;
    if (v18 >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    unsigned __int16 v5 = (BlueFin::GlPeMsmtMgr *)*((void *)this + 3);
    uint64_t v6 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v18;
    char v7 = *v6;
    LODWORD(v6) = v6[1];
    v13[0] = v7;
    int v14 = (int)v6;
    unsigned __int16 v15 = v18;
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v5, (const BlueFin::GlSignalId *)v13, 0, 0);
    if (MeMeas && (MeMeas[13] & 0x10) == 0) {
      BlueFin::GlSetBase::Remove((uint64_t)v21, (__int16)v4);
    }
    BlueFin::GlSetIterator::operator++(&v16);
  }
  int v9 = (BlueFin::GlSignalIdSet *)BlueFin::GlSetBase::operator=((uint64_t)a2, (uint64_t)v21);
  long long v10 = v22[0];
  *(_OWORD *)((char *)a2 + 28) = v22[1];
  long long v11 = *(_OWORD *)v23;
  *(_OWORD *)((char *)a2 + 44) = v22[2];
  *(_OWORD *)((char *)a2 + 60) = v11;
  *(_OWORD *)((char *)a2 + 72) = *(_OWORD *)&v23[12];
  *(_OWORD *)((char *)a2 + 12) = v10;
  return BlueFin::GlSignalIdSet::Print(v9, 0x6Fu);
}

unint64_t BlueFin::GlPeSubsets::FindBestFitResidSubset(BlueFin::GlPeSubsets *this)
{
  BlueFin::GlPeSubsetIterator::GlPeSubsetIterator(&v4, (unint64_t *)this);
  if (v5 >= v4) {
    return 0;
  }
  unint64_t v1 = 0;
  do
  {
    unint64_t v2 = BlueFin::GlPeSubsetIterator::operator->(&v4);
    if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v2 + 24)) >= 5
      && *(float *)(BlueFin::GlPeSubsetIterator::operator->(&v4) + 156) > 0.1)
    {
      if (!v1) {
        unint64_t v1 = BlueFin::GlPeSubsetIterator::operator->(&v4);
      }
      if (*(float *)(BlueFin::GlPeSubsetIterator::operator->(&v4) + 156) < *(float *)(v1 + 156)) {
        unint64_t v1 = BlueFin::GlPeSubsetIterator::operator->(&v4);
      }
    }
    v5 += 160;
  }
  while (v5 < v4);
  return v1;
}

BOOL BlueFin::GlPeNavUtil::PackSkfMeas_RR_SignalId(uint64_t a1, uint64_t a2, BlueFin::GlSignalId *a3, int a4)
{
  unint64_t v5 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
  uint64_t v6 = (1 << (*((_WORD *)a3 + 4) & 0x1F)) & *(unsigned int *)(*((void *)v5 + 1) + 4 * (*((__int16 *)a3 + 4) >> 5));
  if (v6)
  {
    int v10 = -7200001;
    uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(v5, a3, 0);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 24) = -1;
    *(_WORD *)(a2 + 49) = 0;
    *(unsigned char *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 36) = -1;
    *(_WORD *)(a2 + 40) = 575;
    *(_DWORD *)(a2 + 44) = 2;
    unsigned __int8 v12 = *(int **)(a1 + 8);
    int v13 = *v12;
    *(_DWORD *)(a2 + 16) = *v12;
    if (v13 != -7200001)
    {
      int v14 = v12[1];
      int v15 = v13 - v14;
      if (v14 == -7200001) {
        int v10 = -7200001;
      }
      else {
        int v10 = v15;
      }
    }
    *(_DWORD *)(a2 + 20) = v10;
    if ((BlueFin::GlSignalId *)(a2 + 32) != a3)
    {
      *(unsigned char *)(a2 + 32) = *(unsigned char *)a3;
      *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 1);
      *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 4);
    }
    if ((*(unsigned char *)a3 + 117) >= 0x24u && (int v16 = *((_DWORD *)a3 + 1), (v16 - 1) >= 2))
    {
      if (v16 != 3 || (a4 & 1) == 0) {
        goto LABEL_16;
      }
    }
    else if (!a4)
    {
      goto LABEL_16;
    }
    double v17 = *(double *)(PeMeas + 280);
    if (v17 < 0.0000000159999995)
    {
      *(double *)a2 = *(double *)(PeMeas + 272) * -299792458.0;
      *(double *)(a2 + 8) = v17 * 299792458.0;
      *(unsigned char *)(a2 + 50) = 1;
LABEL_17:
      *(unsigned char *)(a2 + 48) = 1;
      return v6 != 0;
    }
LABEL_16:
    *(float64x2_t *)a2 = vmulq_f64(*(float64x2_t *)(PeMeas + 232), (float64x2_t)xmmword_263BBC820);
    goto LABEL_17;
  }
  return v6 != 0;
}

uint64_t BlueFin::GlPeNavUtil::PackSkfMeas_ADR_SignalId(uint64_t a1, uint64_t a2, BlueFin::GlSignalId *a3, int a4)
{
  uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), a3, 0);
  uint64_t result = 0;
  int v10 = *(unsigned __int8 *)(PeMeas + 250);
  int v11 = *(unsigned __int8 *)(PeMeas + 251);
  if (v10 | v11)
  {
    int v12 = -7200001;
    int v13 = *(BlueFin::GlPeMsmtMgr **)(a1 + 8);
    if (*(_DWORD *)v13 == -7200001 || (int v14 = *((_DWORD *)v13 + 1), v14 == -7200001))
    {
      uint64_t result = 0;
      *(_DWORD *)(a2 + 20) = -7200001;
    }
    else
    {
      int v15 = *(_DWORD *)v13 - v14;
      *(_DWORD *)(a2 + 20) = v15;
      if (v15 != -7200001
        && ((int v16 = *(unsigned __int8 *)(PeMeas + 76), !a4) && (v10 ? (v17 = v16 == 0) : (v17 = 0), v17)
         || a4 == 1 && (v10 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 1), !v18)
         || a4 == 3
         || a4 == 2 && v11))
      {
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v13, a3, 0, 0);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 24) = -1;
        *(_WORD *)(a2 + 48) = 0;
        *(unsigned char *)(a2 + 50) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 36) = -1;
        *(_WORD *)(a2 + 40) = 575;
        *(_DWORD *)(a2 + 44) = 10;
        long long v20 = *(int **)(a1 + 8);
        int v21 = *v20;
        *(_DWORD *)(a2 + 16) = *v20;
        if (v21 != -7200001)
        {
          int v22 = v20[1];
          int v23 = v21 - v22;
          if (v22 == -7200001) {
            int v12 = -7200001;
          }
          else {
            int v12 = v23;
          }
        }
        *(_DWORD *)(a2 + 20) = v12;
        if ((BlueFin::GlSignalId *)(a2 + 32) != a3)
        {
          *(unsigned char *)(a2 + 32) = *(unsigned char *)a3;
          *(_DWORD *)(a2 + 36) = *((_DWORD *)a3 + 1);
          *(_WORD *)(a2 + 40) = *((_WORD *)a3 + 4);
        }
        double v24 = *((float *)MeMeas + 23);
        *(void *)a2 = *(void *)(PeMeas + 24);
        *(double *)(a2 + 8) = v24;
        if (*(unsigned char *)(PeMeas + 76)) {
          *(double *)(a2 + 8) = v24 + 0.0025;
        }
        if (*(unsigned char *)(PeMeas + 251)) {
          *(double *)(a2 + 8) = *((float *)MeMeas + 29);
        }
        uint64_t result = 1;
        *(unsigned char *)(a2 + 48) = 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void BlueFin::GlPeNavUtil::ComputeWeightedRangeResid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  int v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v22 = (uint64_t)v10;
  uint64_t v23 = v9;
  v71[695] = *MEMORY[0x263EF8340];
  if (v24) {
    int v25 = 1225;
  }
  else {
    int v25 = 1217;
  }
  if (v11) {
    unsigned int v26 = v25;
  }
  else {
    unsigned int v26 = v25 & 0xFFFFFFBF;
  }
  if (BlueFin::GlSetBase::Cnt(v10) >= 0x65)
  {
    long long v33 = "otThisSignalSet.Cnt() <= GL_CHANNELS";
    DeviceFaultNotify("glpe_navutil.cpp", 804, "ComputeWeightedRangeResid", (char)"otThisSignalSet.Cnt() <= GL_CHANNELS");
    long long v34 = "glpe_navutil.cpp";
    int v35 = 804;
    goto LABEL_30;
  }
  uint64_t v27 = v71;
  uint64_t v28 = 100;
  do
  {
    *((unsigned char *)v27 - 8) = 0;
    *((_DWORD *)v27 - 1) = -1;
    *uint64_t v27 = 575;
    v27 += 28;
    --v28;
  }
  while (v28);
  LODWORD(v67) = *(unsigned __int8 *)(v22 + 8);
  memcpy(&v68, *(const void **)v22, 4 * v67);
  HIDWORD(v67) = v68;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v67);
  uint64_t v46 = v15;
  int v29 = 0;
  while (BYTE1(v67) != v67)
  {
    __int16 v30 = WORD1(v67);
    if (WORD1(v67) >= 0x23FuLL)
    {
      long long v33 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      long long v34 = "glsignalid.h";
      int v35 = 577;
      goto LABEL_30;
    }
    char v31 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v67);
    char v32 = *v31;
    LODWORD(v31) = v31[1];
    LOBYTE(v64) = v32;
    HIDWORD(v64) = v31;
    LOWORD(v65) = WORD1(v67);
    if (BlueFin::GlPeNavUtil::PackSkfMeas_PR_SignalId(v23, (uint64_t)&v70[7 * v29], (BlueFin::GlSignalId *)&v64, a9))
    {
      if (LODWORD(v70[7 * v29 + 3]) == -1) {
        v26 |= 0x40000u;
      }
      ++v29;
    }
    else
    {
      BlueFin::GlSetBase::Remove(v22, v30);
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v67);
  }
  long long v67 = v69;
  uint64_t v68 = 0x6400000000;
  bzero(v69, 0x328uLL);
  double v64 = v66;
  uint64_t v65 = 0x6400000000;
  bzero(v66, 0x328uLL);
  v62[0] = v63;
  v62[1] = 0x6400000000;
  bzero(v63, 0x328uLL);
  v60[0] = v61;
  v60[1] = 0x6400000000;
  bzero(v61, 0x328uLL);
  v51[0] = v62;
  v51[1] = v19;
  v51[2] = v21;
  int v52 = v17;
  int v53 = 0;
  unsigned int v54 = v26;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v59 = 0x4008000000000000;
  v50[0] = &v67;
  v50[1] = &v64;
  void v50[2] = 0;
  v50[3] = v60;
  unsigned char v50[4] = v13;
  v50[5] = v46;
  memset(&v50[6], 0, 24);
  double v47 = v49;
  char v48 = 4;
  v49[1] = 0;
  v49[0] = 0;
  BlueFin::GlSetBase::SetAllLower(&v47, v29);
  if (!(*(unsigned int (**)(void, void *, void *, void *, void **))(**(void **)(v23 + 16) + 16))(*(void *)(v23 + 16), v51, v50, v70, &v47))
  {
    if (!(_BYTE)v29) {
      return;
    }
    uint64_t v36 = v29;
    int v37 = (double *)(v64 + 8);
    double v38 = (double *)(v67 + 8);
    uint64_t v39 = (double *)(v60[0] + 8);
    double v40 = 0.0;
    double v41 = 0.0;
    do
    {
      if (*v39 <= 0.0)
      {
        long long v33 = "otR(i) > 0.0";
        DeviceFaultNotify("glpe_navutil.cpp", 842, "ComputeWeightedRangeResid", (char)"otR(i) > 0.0");
        long long v34 = "glpe_navutil.cpp";
        int v35 = 842;
        goto LABEL_30;
      }
      double v42 = *v38++;
      double v43 = v42;
      double v44 = *v37++;
      double v45 = 1.0 / sqrt(*v39);
      double v41 = v41 + vabdd_f64(v43, v44) * v45;
      double v40 = v40 + v45;
      ++v39;
      --v36;
    }
    while (v36);
    if (v40 > 0.0) {
      return;
    }
LABEL_20:
    long long v33 = "dSumRInv > 0.0";
    DeviceFaultNotify("glpe_navutil.cpp", 864, "ComputeWeightedRangeResid", (char)"dSumRInv > 0.0");
    long long v34 = "glpe_navutil.cpp";
    int v35 = 864;
LABEL_30:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v34, v35, v33);
  }
  bzero(*(void **)v22, ((4 * *(unsigned __int8 *)(v22 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  if ((_BYTE)v29) {
    goto LABEL_20;
  }
}

uint64_t BlueFin::GlPeNavUtil::ComputeRrateResidVec(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = v3;
  int v43 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v2;
  int v16 = v15;
  uint64_t v74 = *MEMORY[0x263EF8340];
  int v17 = v15 + 2;
  v15[1] = 0x6400000000;
  bzero(v15 + 2, 0x328uLL);
  uint64_t v18 = 0;
  *int v16 = v17;
  do
  {
    uint64_t v19 = &v70[v18 + 808];
    *uint64_t v19 = 0;
    *((_DWORD *)v19 + 1) = -1;
    *((_WORD *)v19 + 4) = 575;
    *((void *)v19 + 2) = 0;
    v18 += 24;
  }
  while (v18 != 2184);
  v69[0] = v70;
  v69[1] = 0x6400000000;
  bzero(v70, 0x328uLL);
  v67[0] = v68;
  v67[1] = 0x6400000000;
  bzero(v68, 0x328uLL);
  v63[0] = v64;
  v63[1] = 0x6400000000;
  bzero(v64, 0x328uLL);
  v55[0] = v63;
  v55[1] = v7;
  v55[2] = v13;
  int v56 = v43;
  uint64_t v57 = 0x4C100000002;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0x4008000000000000;
  v50[0] = v69;
  v50[1] = v67;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v54 = 0;
  *(_OWORD *)&v64[8] = *(_OWORD *)v4;
  uint64_t v65 = *(void *)(v4 + 16);
  uint64_t v66 = v11;
  v47[32] = 0;
  int v48 = -1;
  __int16 v49 = 575;
  LOBYTE(v72) = *(unsigned char *)(v9 + 8);
  memcpy((char *)&v72 + 8, *(const void **)v9, 4 * v72);
  WORD1(v72) = 0;
  BYTE1(v72) = 0;
  DWORD1(v72) = DWORD2(v72);
  uint64_t result = (uint64_t)BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v72);
  if (BYTE1(v72) != v72)
  {
    unsigned __int8 v21 = 0;
    do
    {
      __int16 v22 = WORD1(v72);
      if (WORD1(v72) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v23 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v72);
      char v24 = *v23;
      int v25 = v23[1];
      v44[0] = *v23;
      int v45 = v25;
      __int16 v46 = WORD1(v72);
      if (BlueFin::GlPeNavUtil::PackSkfMeas_RR_SignalId(v14, (uint64_t)v47, (BlueFin::GlSignalId *)v44, 0)
        && !(*(unsigned int (**)(void, void *, void *, unsigned char *, _UNKNOWN **))(**(void **)(v14 + 16)
                                                                                             + 16))(*(void *)(v14 + 16), v55, v50, v47, &BlueFin::GlSet128::BIT0))
      {
        unsigned int v26 = (double *)&v70[24 * ++v21 + 808];
        *(v26 - 1) = *(double *)(v69[0] + 8) - *(double *)(v67[0] + 8);
        *((unsigned char *)v26 - 24) = v24;
        *((_DWORD *)v26 - 5) = v25;
        *((_WORD *)v26 - 8) = v22;
      }
      else
      {
        BlueFin::GlSetBase::Remove(v9, v22);
      }
      uint64_t result = (uint64_t)BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v72);
    }
    while (BYTE1(v72) != v72);
    if (v21 <= 0x10u)
    {
      unsigned __int8 v38 = v21;
      if (!v21) {
        return result;
      }
    }
    else
    {
      uint64_t v27 = 1;
      do
      {
        uint64_t v28 = (double *)&v70[24 * v27 + 808];
        double v29 = *(double *)&v71[3 * v27 - 3];
        double v30 = -v29;
        if (v29 >= 0.0) {
          double v30 = *(double *)&v71[3 * v27 - 3];
        }
        double v31 = v28[2];
        if (v31 < 0.0) {
          double v31 = -v31;
        }
        if (v30 > v31)
        {
          int v32 = v27 - 1;
          if (v27 != 1)
          {
            int v33 = 0;
            do
            {
              int v34 = v32 + v33;
              if (v32 + v33 < 0 != __OFADD__(v32, v33)) {
                ++v34;
              }
              int v35 = v34 >> 1;
              double v36 = *(double *)&v71[3 * v35];
              if (v36 < 0.0) {
                double v36 = -v36;
              }
              if (v36 <= v31) {
                int v33 = v35 + 1;
              }
              else {
                int v32 = v35;
              }
            }
            while (v33 != v32);
          }
          long long v72 = *(_OWORD *)v28;
          uint64_t v73 = *((void *)v28 + 2);
          int v37 = &v70[24 * v32 + 808];
          memmove(&v70[24 * v32 + 832], v37, 24 * ((int)v27 - v32));
          *(_OWORD *)int v37 = v72;
          void v37[2] = v73;
        }
        ++v27;
      }
      while (v27 != v21);
      bzero(*(void **)v9, ((4 * *(unsigned __int8 *)(v9 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      unsigned __int8 v38 = 16;
    }
    uint64_t v39 = 0;
    uint64_t v40 = v38;
    double v41 = v71;
    do
    {
      if (v21 >= 0x11u) {
        *(_DWORD *)(*(void *)v9 + 4 * (*((__int16 *)v41 - 4) >> 5)) |= 1 << *((_WORD *)v41 - 4);
      }
      uint64_t result = BlueFin::SKFVector::AddLen((uint64_t)v16);
      uint64_t v42 = *v41;
      v41 += 3;
      *(void *)(*v16 + 8 * v39++ + 8) = v42;
    }
    while (v40 != v39);
  }
  return result;
}

BlueFin::SKFVector *BlueFin::GlPeNavUtil::ComputeRrateResidVec(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v4 = v3;
  uint64_t v6 = v5;
  int v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  double v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v19 = v2;
  __int16 v49 = v20;
  uint64_t v21 = 0;
  v83[275] = *MEMORY[0x263EF8340];
  do
  {
    __int16 v22 = &v83[v21 + 2];
    *(unsigned char *)__int16 v22 = 0;
    *((_DWORD *)v22 + 1) = -1;
    *((_WORD *)v22 + 4) = 575;
    _OWORD v22[2] = 0;
    v21 += 3;
  }
  while (v21 != 273);
  v82[0] = v83;
  v82[1] = 0x100000000;
  v83[1] = 0;
  v83[0] = 0;
  v80[0] = v81;
  v80[1] = 0x100000000;
  v81[1] = 0;
  v81[0] = 0;
  v75[0] = &v76;
  v75[1] = 0x400000000;
  uint64_t v76 = 0;
  long long v72 = (double *)v74;
  uint64_t v73 = 0x5B00000000;
  bzero(v74, 0x2E0uLL);
  v64[0] = v75;
  v64[1] = v10;
  v64[2] = v18;
  int v65 = v8;
  uint64_t v66 = 0x4C100000002;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  uint64_t v71 = 0x4008000000000000;
  v59[0] = v82;
  v59[1] = v80;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  uint64_t v63 = 0;
  long long v77 = *v6;
  uint64_t v78 = *((void *)v6 + 2);
  uint64_t v79 = v16;
  v56[32] = 0;
  int v57 = -1;
  __int16 v58 = 575;
  LODWORD(v50) = *(unsigned __int8 *)(v12 + 8);
  memcpy(&v51, *(const void **)v12, 4 * v50);
  HIDWORD(v50) = v51;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v50);
  if (BYTE1(v50) == v50)
  {
    uint64_t v51 = 0x5B00000000;
    bzero(v52, 0x2E0uLL);
    double v50 = v52;
    return BlueFin::SKFVectorDim<100>::SKFVectorDim(v49, (const BlueFin::SKFVector *)&v50);
  }
  unsigned __int8 v23 = 0;
  do
  {
    __int16 v24 = WORD1(v50);
    if (WORD1(v50) >= 0x23FuLL)
    {
      __int16 v46 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      double v47 = "glsignalid.h";
      int v48 = 577;
      goto LABEL_31;
    }
    int v25 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v50);
    char v26 = *v25;
    int v27 = v25[1];
    v53[0] = *v25;
    int v54 = v27;
    __int16 v55 = WORD1(v50);
    if (BlueFin::GlPeNavUtil::PackSkfMeas_RR_SignalId(v19, (uint64_t)v56, (BlueFin::GlSignalId *)v53, v4))
    {
      if ((*(unsigned int (**)(void, void *, void *, unsigned char *, _UNKNOWN **))(**(void **)(v19 + 16)
                                                                                            + 16))(*(void *)(v19 + 16), v64, v59, v56, &BlueFin::GlSet128::BIT0))
      {
        BlueFin::GlSetBase::Remove(v12, v24);
        uint64_t v28 = *(void *)(v19 + 8);
        v53[0] = v26;
        int v54 = v27;
        __int16 v55 = v24;
        uint64_t v29 = BlueFin::GlSignalIdArray::Get(*(void *)(v28 + 19176), (uint64_t)v53);
        if (v29) {
          *(unsigned char *)(v29 + 449) = 39;
        }
      }
      else
      {
        double v32 = *(double *)(v82[0] + 8) - *(double *)(v80[0] + 8);
        int v33 = (double *)&v83[3 * ++v23 + 2];
        *(v33 - 1) = v32;
        *((unsigned char *)v33 - 24) = v26;
        *((_DWORD *)v33 - 5) = v27;
        *((_WORD *)v33 - 8) = v24;
        BlueFin::SKFVector::AddLen((uint64_t)&v72);
        v72[(int)v73] = v32;
      }
    }
    else
    {
      BlueFin::GlSetBase::Remove(v12, v24);
      uint64_t v30 = *(void *)(v19 + 8);
      v53[0] = v26;
      int v54 = v27;
      __int16 v55 = v24;
      uint64_t v31 = BlueFin::GlSignalIdArray::Get(*(void *)(v30 + 19176), (uint64_t)v53);
      if (v31) {
        *(unsigned char *)(v31 + 449) = 42;
      }
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v50);
  }
  while (BYTE1(v50) != v50);
  double v50 = v52;
  LODWORD(v51) = v23;
  HIDWORD(v51) = 91;
  if (v23 >= 0x5Cu)
  {
    __int16 v46 = "LEN >= len";
    DeviceFaultNotify("glpe_matrix.h", 497, "SKFVectorDim", (char)"LEN >= len");
    double v47 = "glpe_matrix.h";
    int v48 = 497;
LABEL_31:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v47, v48, v46);
  }
  uint64_t v34 = v73;
  bzero(v52, 0x2E0uLL);
  double v50 = v52;
  if ((int)v34 < 1)
  {
    double v39 = 0.0;
  }
  else
  {
    double v35 = v72[1];
    if (v34 != 1)
    {
      uint64_t v36 = v34 - 1;
      int v37 = v72 + 2;
      do
      {
        double v38 = *v37++;
        double v35 = v35 + v38;
        --v36;
      }
      while (v36);
    }
    double v39 = v35 / (double)(int)v34;
  }
  if (v23)
  {
    __int16 v40 = 0;
    int v41 = 0;
    do
    {
      int v42 = v40;
      double v43 = *(double *)&v83[3 * v40 + 4];
      if (vabdd_f64(v43, v39) <= v14)
      {
        *(double *)&v50[8 * (__int16)v41++ + 8] = v43;
      }
      else
      {
        BlueFin::GlSetBase::Remove(v12, SLOWORD(v83[3 * v40 + 3]));
        uint64_t v44 = BlueFin::GlSignalIdArray::Get(*(void *)(*(void *)(v19 + 8) + 19176), (uint64_t)&v83[3 * v42 + 2]);
        if (v44) {
          *(unsigned char *)(v44 + 449) = 33;
        }
      }
      __int16 v40 = v42 + 1;
    }
    while (v23 > (__int16)(v42 + 1));
  }
  return BlueFin::SKFVectorDim<100>::SKFVectorDim(v49, (const BlueFin::SKFVector *)&v50);
}

void BlueFin::GlPeNavUtil::ComputeL5BiasFromMeas(uint64_t a1, float *a2, float *a3, double *a4, uint64_t *a5, unsigned int a6, uint64_t a7, unsigned int a8)
{
  long long v61 = v63;
  char v62 = 8;
  memset(v63, 0, 32);
  if (a8)
  {
    uint64_t v11 = *a5;
    uint64_t v12 = a8;
    double v13 = (_DWORD *)(a7 + 44);
    uint64_t v14 = a8;
    do
    {
      if (!*v13
        && *(v13 - 2) == 2
        && (((unint64_t)*(unsigned int *)(v11 + 4 * (*((__int16 *)v13 - 2) >> 5)) >> (*(_WORD *)(v13 - 1) & 0x1F)) & 1) != 0)
      {
        *(_DWORD *)&v63[((unint64_t)*((unsigned __int8 *)v13 - 12) >> 3) & 0x1C] |= 1 << *((unsigned char *)v13 - 12);
      }
      v13 += 14;
      --v14;
    }
    while (v14);
    unsigned __int8 v15 = 0;
    __int16 v58 = v60;
    char v59 = 8;
    memset(v60, 0, 32);
    uint64_t v16 = (unsigned __int8 *)(a7 + 32);
    uint64_t v17 = a8;
    do
    {
      if (!*((_DWORD *)v16 + 3))
      {
        int v18 = *((_DWORD *)v16 + 1);
        if ((v18 == 3 || v18 == 0)
          && (((unint64_t)*(unsigned int *)(*a5 + 4 * (*((__int16 *)v16 + 4) >> 5)) >> (*((_WORD *)v16 + 4) & 0x1F)) & 1) != 0)
        {
          unint64_t v20 = *v16;
          unint64_t v21 = v20 >> 5;
          char v22 = v20 & 0x1F;
          if (((*(unsigned int *)&v61[4 * (v20 >> 5)] >> (v20 & 0x1F)) & 1) != 0
            && *(__int16 *)(BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v16, 0)+ 78) >= 16)
          {
            *(_DWORD *)&v58[4 * v21] |= 1 << v22;
            ++v15;
          }
        }
      }
      v16 += 56;
      --v17;
    }
    while (v17);
    if (v15 >= 3u)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (!*(_DWORD *)(a7 + 56 * i + 44))
        {
          uint64_t v24 = a7 + 56 * i;
          if (*(_DWORD *)(v24 + 36) == 2)
          {
            int v25 = (const BlueFin::GlSignalId *)(v24 + 32);
            if (((unint64_t)*(unsigned int *)&v58[((unint64_t)*(unsigned __int8 *)(v24 + 32) >> 3) & 0x1C] >> (*(unsigned char *)(v24 + 32) & 0x1F)))
            {
              MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), v25, 0, 0);
              if (MeMeas)
              {
                if ((*((_DWORD *)MeMeas + 5) - 1) <= 1)
                {
                  uint64_t v27 = v12;
                  uint64_t v28 = (unsigned __int8 *)(a7 + 32);
                  while (1)
                  {
                    if (!*((_DWORD *)v28 + 3) && *(unsigned __int8 *)v25 == *v28)
                    {
                      int v29 = *((_DWORD *)v28 + 1);
                      if (v29 == 3 || v29 == 0)
                      {
                        uint64_t v31 = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)v28, 0, 0);
                        if (v31)
                        {
                          if ((*((_DWORD *)v31 + 5) - 1) <= 1) {
                            break;
                          }
                        }
                      }
                    }
                    v28 += 56;
                    if (!--v27) {
                      goto LABEL_40;
                    }
                  }
                  __int16 v55 = v57;
                  char v56 = 19;
                  memset(v57, 0, sizeof(v57));
                  v57[*((__int16 *)v28 + 4) >> 5] |= 1 << *((_WORD *)v28 + 4);
                  uint64_t v32 = a7 + 56 * i;
                  int v34 = *(__int16 *)(v32 + 40);
                  int v33 = (unsigned __int16 *)(v32 + 40);
                  v57[v34 >> 5] |= 1 << v34;
                  uint64_t v35 = a1 + *(void *)(*(void *)a1 - 24);
                  long long v51 = *(_OWORD *)(v35 + 8);
                  uint64_t v52 = *(void *)(v35 + 24);
                  BlueFin::GlPeNavUtil::ComputeRangeResidVec(a1, (uint64_t)&v55, (uint64_t)&v51, a6, 0, 0, 0, 1, 1, 1);
                  if (v54 == 2)
                  {
                    float v36 = *(double *)(v53 + 16);
                    float v37 = *(double *)(v53 + 8);
                    float v38 = v36 - v37;
                    if (*v33 < *((unsigned __int16 *)v28 + 4)) {
                      float v38 = -v38;
                    }
                    float v39 = *a2;
                    double v40 = *a2;
                    double v41 = *a4 * *a3;
                    double v42 = 1.0
                        / (*((double *)v28 - 3) * *((double *)v28 - 3)
                         + *(double *)(a7 + 56 * i + 8) * *(double *)(a7 + 56 * i + 8));
                    double v43 = *a4 + v42;
                    *a4 = v43;
                    double v44 = v38;
                    double v45 = v40 + v42 / v43 * (v38 - v40);
                    double v46 = v42 * (float)(v38 - v39);
                    *(float *)&double v42 = v45;
                    *a2 = *(float *)&v42;
                    *(float *)&double v46 = (v41 + v46 * (v44 - v45)) / v43;
                    *a3 = *(float *)&v46;
                  }
                }
              }
            }
          }
        }
LABEL_40:
        ;
      }
    }
  }
}

unsigned __int8 *BlueFin::GlPeNavUtil::ComputeCrossTrackElevMask(BlueFin::GlPeNavUtil *this, float a2, const void **a3, int **a4)
{
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v26, 0x13u, a3);
  uint64_t v28 = &v30;
  LOBYTE(v29) = 19;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  memset(v33, 0, 28);
  BlueFin::GlSetBase::OperatorBinaryOr((uint64_t)&__src, (int **)&v28, a4);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v28);
  v26[1] = v31;
  _OWORD v26[2] = v32;
  *(_OWORD *)uint64_t v27 = v33[0];
  *(_OWORD *)&v27[12] = *(_OWORD *)((char *)v33 + 12);
  v26[0] = v30;
  LOBYTE(v28) = v25;
  memcpy(&v29, __src, 4 * v25);
  WORD1(v28) = 0;
  BYTE1(v28) = 0;
  HIDWORD(v28) = v29;
  uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v28);
  if (BYTE1(v28) != v28)
  {
    while (1)
    {
      __int16 v9 = WORD1(v28);
      if (WORD1(v28) >= 0x23FuLL)
      {
        unint64_t v21 = "usIndex < NUM_SIGNAL_IDS";
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        char v22 = "glsignalid.h";
        int v23 = 577;
        goto LABEL_28;
      }
      uint64_t v10 = (BlueFin::GlPeMsmtMgr *)*((void *)this + 1);
      uint64_t v11 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v28);
      char v12 = *v11;
      LODWORD(v11) = v11[1];
      LOBYTE(__src) = v12;
      HIDWORD(__src) = v11;
      __int16 v25 = WORD1(v28);
      uint64_t PeMeas = BlueFin::GlPeMsmtMgr::GetPeMeas(v10, (const BlueFin::GlSignalId *)&__src, 0);
      uint64_t v14 = PeMeas;
      for (double i = a2 + (double)*(__int16 *)(PeMeas + 80) * -0.0174532925; i > 3.14159265; double i = i + -6.28318531)
        ;
      while (i <= -3.14159265)
        double i = i + 6.28318531;
      double v16 = fabs(i);
      if (v16 > 1.57079633) {
        double v16 = 3.14159265 - v16;
      }
      int v17 = (int)(v16 * 57.2957795 + -0.1);
      if (v17 < -29 || (v17 / 30) >= 4)
      {
        unint64_t v21 = "!(iIdx < 0 || iIdx >= _DIM(iMasksDeg))";
        DeviceFaultNotify("glpe_navutil.cpp", 1290, "ComputeCrossTrackElevMask", (char)"!(iIdx < 0 || iIdx >= _DIM(iMasksDeg))");
        char v22 = "glpe_navutil.cpp";
        int v23 = 1290;
LABEL_28:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v22, v23, v21);
      }
      if (*(__int16 *)(PeMeas + 78) < (int)((double)dword_263BBC840[v17 / 30]
                                           + (double)(dword_263BBC840[v17 / 30 + 1] - dword_263BBC840[v17 / 30])
                                           / 30.0
                                           * (double)(v17 % 30)))
        BlueFin::GlSetBase::Remove((uint64_t)a3, v9);
      if (v17 <= 39) {
        break;
      }
      if (v17 >= 0x32)
      {
        double v19 = (double)v17 * -1.5 + 135.0;
        goto LABEL_21;
      }
      int v20 = 60;
LABEL_22:
      if (v20 > *(__int16 *)(v14 + 78)) {
        BlueFin::GlSetBase::Remove((uint64_t)a4, v9);
      }
      uint64_t result = BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v28);
      if (BYTE1(v28) == v28) {
        return result;
      }
    }
    double v19 = (double)v17 * 1.5;
LABEL_21:
    int v20 = (int)v19;
    goto LABEL_22;
  }
  return result;
}

uint64_t BlueFin::GlPeKfBiasData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_navutil.cpp", 1433, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_navutil.cpp", 1433, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v12 = 113;
    char v13 = v5;
    uint64_t v14 = 0x1000000000000;
    uint64_t v11 = &unk_270EBA550;
    char v15 = v5;
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v11, *(_DWORD *)(v2 + 16));
    __int16 v9 = *(float **)(v7 + 8);
    uint64_t v8 = v7 + 8;
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *v9);
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 4));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 8));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 12));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 16));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 20));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 24));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v11, *(float *)(*(void *)v8 + 28));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v11, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeKfBiasData::Deserialize()
{
  return 0;
}

void BlueFin::GlPeKfBiasData::~GlPeKfBiasData(BlueFin::GlPeKfBiasData *this)
{
}

uint64_t BlueFin::GlPePolaroid::RunPolaroid(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  unsigned int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v330 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = v2;
  uint64_t v427 = *MEMORY[0x263EF8340];
  *(_OWORD *)(v2 + 64) = *(_OWORD *)v8;
  *(void *)(v2 + 80) = *(void *)(v8 + 16);
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(v8 + 24);
  uint64_t v331 = v2 + 88;
  *(_WORD *)(v2 + 92) = *(_WORD *)(v8 + 28);
  *(unsigned char *)(v2 + 94) = *(unsigned char *)(v8 + 30);
  *(_DWORD *)(v2 + 96) = *(_DWORD *)(v8 + 32);
  *(unsigned char *)(v2 + 100) = *(unsigned char *)(v8 + 36);
  *(void *)(v2 + 104) = *(void *)(v8 + 40);
  *(_DWORD *)(v2 + 112) = *(_DWORD *)(v8 + 48);
  *(unsigned char *)(v2 + 116) = *(unsigned char *)(v8 + 52);
  BlueFin::GlPeNavGnssState::operator=(v2 + *(void *)(*(void *)v2 - 24), *(void *)v8);
  int v350 = v352;
  unsigned __int8 v351 = 19;
  memset(v352, 0, sizeof(v352));
  uint64_t v347 = v349;
  unsigned __int8 v348 = 19;
  memset(v349, 0, sizeof(v349));
  double v344 = v346;
  char v345 = 19;
  memset(v346, 0, sizeof(v346));
  uint64_t v335 = (BlueFin::GlSetBase *)v6;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v342, v343, 0x13u, v6);
  uint64_t v329 = (BlueFin::GlSetBase *)v4;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v340, v341, 0x13u, v4);
  uint64_t v11 = (BlueFin::GlPeNavUtil *)v10;
  uint64_t v12 = *(void *)(v10 + 32);
  double v336 = (BlueFin::GlPeNavUtil *)v10;
  if (*(_DWORD *)(v12 + 8))
  {
    char v337 = *(unsigned char *)(v10 + 91) != 0;
    char v13 = v6;
    if (*(_DWORD *)(v12 + 16))
    {
      if (!*((unsigned char *)v11 + 90) && !*((unsigned char *)v11 + 92))
      {
        double v14 = 0.0;
        if (*((_DWORD *)v11 + 24) > 0xFu) {
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    char v337 = *(unsigned char *)(v10 + 91) != 0;
    char v13 = v6;
  }
  if (BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v13))
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v353, (unsigned int *)v354 + 1, 0x13u, v13);
    char v15 = (char *)v336 + *(void *)(*(void *)v336 - 24);
    long long v396 = *(_OWORD *)(v15 + 8);
    *(void *)unsigned int v397 = *((void *)v15 + 3);
    BlueFin::GlPeNavUtil::ComputeRangeResidVec((uint64_t)v336, (uint64_t)&v353, (uint64_t)&v396, **((unsigned int **)v336 + 3), 0, 0, 0, 1, *((unsigned char *)v336 + 88), 1);
    uint64_t v19 = *(unsigned int *)v407;
    if (*(int *)v407 >= 1)
    {
      int v20 = (double *)(*(void *)&v406 + 8);
      do
      {
        *int v20 = fabs(*v20);
        ++v20;
        --v19;
      }
      while (v19);
    }
    double v21 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v406, v16, v17, v18);
    double v22 = v21 + v21;
    int v23 = v336;
    uint64_t v24 = *((void *)v336 + 6);
    if (*(double *)(v24 + 24) >= v22) {
      double v14 = *(double *)(v24 + 24);
    }
    else {
      double v14 = v22;
    }
  }
  else
  {
    double v14 = 0.0;
    int v23 = v336;
  }
  if (*((unsigned char *)v23 + 90) && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)v4))
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v353, (unsigned int *)v354 + 1, 0x13u, v4);
    __int16 v25 = (char *)v336 + *(void *)(*(void *)v336 - 24);
    v386[0] = *(_OWORD *)(v25 + 8);
    *(void *)&v386[1] = *((void *)v25 + 3);
    BlueFin::GlPeNavUtil::ComputeRrateResidVec((uint64_t)v336, (uint64_t)&v353);
    uint64_t v29 = *(unsigned int *)v407;
    if (*(int *)v407 >= 1)
    {
      long long v30 = (double *)(*(void *)&v406 + 8);
      do
      {
        *long long v30 = fabs(*v30);
        ++v30;
        --v29;
      }
      while (v29);
    }
    BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v406, v26, v27, v28);
  }
  uint64_t v11 = v336;
LABEL_23:
  if (*(unsigned char *)(v9 + 30)
    && (uint64_t v31 = *((void *)v11 + 4), (*(_DWORD *)(v31 + 8) - 1) <= 1)
    && !*(unsigned char *)(v31 + 1988))
  {
    *((unsigned char *)v11 + 126) = 1;
    BlueFin::GlPeNavUtil::ComputeCrossTrackElevMask(v11, *(float *)(v9 + 48), (const void **)&v342, &v340);
    uint64_t v11 = v336;
  }
  else
  {
    *((unsigned char *)v11 + 126) = 0;
  }
  long long v32 = &v407[16];
  *(_OWORD *)&v407[8] = xmmword_263BBC540;
  double v406 = COERCE_DOUBLE(&v407[24]);
  *(void *)unsigned int v407 = &v424;
  uint64_t v424 = 0;
  for (uint64_t i = 8; i != 176; i += 8)
  {
    *(void *)(*(void *)v407 + i) = v32;
    v32 += 168;
  }
  uint64_t v34 = 0;
  *(void *)&v386[0] = &v386[1];
  *((void *)&v386[0] + 1) = 0x1500000000;
  memset(&v386[1], 0, 176);
  double v366 = (char *)v367 + 8;
  *(void *)&v367[0] = 0x1500000000;
  *(_OWORD *)((char *)v367 + 8) = 0u;
  *(_OWORD *)((char *)&v367[1] + 8) = 0u;
  *(_OWORD *)((char *)&v367[2] + 8) = 0u;
  *(_OWORD *)((char *)&v367[3] + 8) = 0u;
  *(_OWORD *)((char *)&v367[4] + 8) = 0u;
  *(_OWORD *)((char *)&v367[5] + 8) = 0u;
  *(_OWORD *)((char *)&v367[6] + 8) = 0u;
  *(_OWORD *)((char *)&v367[7] + 8) = 0u;
  *(_OWORD *)((char *)&v367[8] + 8) = 0u;
  *(_OWORD *)((char *)&v367[9] + 8) = 0u;
  *(_OWORD *)((char *)&v367[10] + 8) = 0u;
  unsigned int v425 = (char *)v426 + 8;
  *(void *)&v426[0] = 0x1500000000;
  *(_OWORD *)((char *)v426 + 8) = 0u;
  *(_OWORD *)((char *)&v426[1] + 8) = 0u;
  *(_OWORD *)((char *)&v426[2] + 8) = 0u;
  *(_OWORD *)((char *)&v426[3] + 8) = 0u;
  *(_OWORD *)((char *)&v426[4] + 8) = 0u;
  *(_OWORD *)((char *)&v426[5] + 8) = 0u;
  *(_OWORD *)((char *)&v426[6] + 8) = 0u;
  *(_OWORD *)((char *)&v426[7] + 8) = 0u;
  *(_OWORD *)((char *)&v426[8] + 8) = 0u;
  *(_OWORD *)((char *)&v426[9] + 8) = 0u;
  *(_OWORD *)((char *)&v426[10] + 8) = 0u;
  unsigned __int8 v404 = &v405[8];
  *(void *)float v405 = 0xD00000000;
  memset(&v405[8], 0, 112);
  uint64_t v35 = (char *)v11 + *(void *)(*(void *)v11 - 24);
  uint64_t v36 = *((void *)v35 + 11);
  int v37 = **((_DWORD **)v11 + 3);
  double v38 = *((float *)v35 + 52);
  double v39 = *((float *)v35 + 54);
  double v40 = *((float *)v35 + 56);
  double v41 = *((float *)v35 + 58);
  *(double *)&__src = COERCE_DOUBLE(&v425);
  *(void *)double v356 = v35 + 8;
  *(void *)&v356[8] = v36;
  *(_DWORD *)&v356[16] = v37;
  *(void *)double v357 = 0x4C100000003;
  *(void *)&v357[12] = v35 + 104;
  *(void *)&v357[20] = 0;
  *(void *)&v357[28] = v35 + 152;
  *(double *)&v357[36] = v38;
  *(double *)&v357[44] = v39;
  *(double *)&v357[52] = v40;
  double v358 = v41;
  long long v359 = xmmword_263BBC830;
  double v392 = COERCE_DOUBLE(v386);
  unsigned int v393 = &v366;
  v394[0] = &v406;
  memset(&v394[1], 0, 48);
  do
  {
    double v42 = &v397[v34 - 16];
    v42[32] = 0;
    *((_DWORD *)v42 + 9) = -1;
    *((_WORD *)v42 + 20) = 575;
    v34 += 56;
  }
  while (v34 != 1176);
  v388[0] = (char *)&v388[1] + 4;
  LOBYTE(v388[1]) = 4;
  *(_OWORD *)((char *)&v388[1] + 4) = 0uLL;
  bzero(*((void **)v11 + 238), ((4 * *((unsigned __int8 *)v11 + 1912) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::BigMatrixDim<21,21>::BigMatrixDim((BlueFin::BigMatrix *)&v353, 1, 12);
  uint64_t v43 = (uint64_t)v336;
  if (*((char *)v336 + 100) < 1)
  {
    unsigned __int8 v46 = 0;
    int v45 = 0;
  }
  else
  {
    LOBYTE(v44) = 0;
    int v45 = 0;
    unsigned __int8 v46 = 0;
    uint64_t v47 = v330;
    do
    {
      if (!*(_DWORD *)(v47 + 44)
        && (((unint64_t)*((unsigned int *)*v13 + (*(__int16 *)(v47 + 40) >> 5)) >> (*(_WORD *)(v47 + 40) & 0x1F)) & 1) != 0)
      {
        if (BlueFin::GlPeNavUtil::PackSkfMeas_PR_SignalId(v43, (uint64_t)&v397[56 * v46 - 16], (BlueFin::GlSignalId *)(v47 + 32), *(unsigned char *)(v43 + 88))&& (*((_DWORD *)v388[0] + (v46 >> 5)) |= 1 << v46, ++v46, v46 >= 0x15u))
        {
          (*(void (**)(void, void **, double *, long long *, void **))(**((void **)v336 + 2) + 16))(*((void *)v336 + 2), &__src, &v392, &v396, v388);
          uint64_t v48 = (uint64_t)v336;
          uint64_t v49 = 0;
          do
          {
            uint64_t v50 = v49 + 1;
            uint64_t v51 = *(void *)(*(void *)v407 + 8 * (v49 + 1));
            uint64_t v52 = *(void *)(*(void *)&v354[0] + 8);
            for (uint64_t j = 8; j != 104; j += 8)
              *(void *)(v52 + j) = *(void *)(v51 + j);
            uint64_t v54 = v48 + 24 * v45;
            *(double *)(v54 + 128) = *(double *)(*(void *)&v386[0] + 8 * v50) - *(double *)&v366[8 * v50];
            BlueFin::GlPePolaroid::GetPInLOS(v48, (uint64_t)&v353, 0);
            uint64_t v48 = (uint64_t)v336;
            __int16 v55 = (double *)&v397[56 * v49 - 16];
            *(double *)(v54 + 136) = v55[1] * v55[1];
            *(void *)(v54 + 144) = v56;
            LODWORD(v55) = *((__int16 *)v55 + 20);
            *((unsigned char *)v336 + (unsigned __int16)v55 + 1328) = v45;
            *(_DWORD *)(*((void *)v336 + 238) + 4 * ((int)v55 >> 5)) |= 1 << (char)v55;
            ++v45;
            ++v49;
          }
          while (v50 != v46);
          bzero(v388[0], ((4 * LOBYTE(v388[1]) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
          char v13 = (const void **)v335;
          uint64_t v43 = (uint64_t)v336;
          unsigned __int8 v46 = 0;
        }
        else
        {
          uint64_t v43 = (uint64_t)v336;
        }
      }
      int v44 = (char)(v44 + 1);
      v47 += 56;
    }
    while (v44 < *(char *)(v43 + 100));
  }
  (*(void (**)(void, void **, double *, long long *, void **))(**(void **)(v43 + 16) + 16))(*(void *)(v43 + 16), &__src, &v392, &v396, v388);
  uint64_t v57 = (uint64_t)v336;
  if (v46)
  {
    uint64_t v58 = 0;
    uint64_t v59 = v46;
    do
    {
      uint64_t v60 = v58 + 1;
      uint64_t v61 = *(void *)(*(void *)v407 + 8 * (v58 + 1));
      uint64_t v62 = *(void *)(*(void *)&v354[0] + 8);
      for (uint64_t k = 8; k != 104; k += 8)
        *(void *)(v62 + k) = *(void *)(v61 + k);
      uint64_t v64 = v57 + 24 * v45;
      *(double *)(v64 + 128) = *(double *)(*(void *)&v386[0] + 8 * v60) - *(double *)&v366[8 * v60];
      BlueFin::GlPePolaroid::GetPInLOS(v57, (uint64_t)&v353, 0);
      uint64_t v57 = (uint64_t)v336;
      int v65 = (double *)&v397[56 * v58 - 16];
      *(double *)(v64 + 136) = v65[1] * v65[1];
      *(void *)(v64 + 144) = v66;
      LODWORD(v65) = *((__int16 *)v65 + 20);
      *((unsigned char *)v336 + (unsigned __int16)v65 + 1328) = v45;
      *(_DWORD *)(*((void *)v336 + 238) + 4 * ((int)v65 >> 5)) |= 1 << (char)v65;
      ++v45;
      ++v58;
    }
    while (v60 != v59);
  }
  memset(v339, 0, sizeof(v339));
  double v67 = *(double *)(v57 + 16);
  LODWORD(v392) = 0;
  unsigned int v393 = (char **)((char *)v394 + 4);
  LOBYTE(v394[0]) = 8;
  memset((char *)v394 + 4, 0, 32);
  *(_OWORD *)&v394[5] = xmmword_263BBA380;
  int32x2_t v68 = vdup_n_s32(0x42C60000u);
  v394[7] = v68;
  int v395 = 1120272384;
  BlueFin::stDops::stDops((uint64_t)&__src, (uint64_t)&v392);
  double v358 = v67;
  LODWORD(v388[0]) = 0;
  v388[1] = (char *)&v388[2] + 4;
  LOBYTE(v388[2]) = 8;
  *(_OWORD *)((char *)&v388[2] + 4) = 0u;
  *(_OWORD *)((char *)&v388[4] + 4) = 0u;
  long long v389 = xmmword_263BBA380;
  int32x2_t v390 = v68;
  int v391 = 1120272384;
  uint64_t v387 = 0x3FF0000000000000;
  int v353 = (char *)v354 + 8;
  *(void *)&v354[0] = 0x6400000000;
  bzero((char *)v354 + 8, 0x328uLL);
  *(void *)&long long v396 = v397;
  *((void *)&v396 + 1) = 0x6400000000;
  bzero(v397, 0x328uLL);
  unint64_t v69 = 0;
  v412[0] = &v425;
  v412[1] = &v406;
  v412[2] = &v404;
  uint64_t v413 = 0x23F000000000008;
  unsigned __int16 v414 = 50;
  do
    *(_WORD *)&v407[2 * v69++ - 8] = -1;
  while (v69 < HIWORD(v413));
  uint64_t v70 = v414;
  if (v414)
  {
    uint64_t v71 = 0;
    do
    {
      *(_WORD *)&v405[2 * v71 - 8] = v71;
      ++v71;
    }
    while (v70 != v71);
    __int16 v72 = v70 - 1;
  }
  else
  {
    __int16 v72 = -1;
  }
  __int16 v415 = v72;
  *(void *)&v386[0] = &v386[1];
  *((void *)&v386[0] + 1) = 0x6400000000;
  bzero(&v386[1], 0x328uLL);
  uint64_t v73 = v336;
  int v74 = *(_DWORD *)(*((void *)v336 + 4) + 16);
  double v381 = &v382[4];
  v382[0] = 19;
  *(_OWORD *)&v382[4] = 0u;
  long long v383 = 0u;
  long long v384 = 0u;
  memset(v385, 0, sizeof(v385));
  BOOL v379 = (double *)((char *)v380 + 4);
  LOBYTE(v380[0]) = 8;
  memset((char *)v380 + 4, 0, 32);
  double v377 = (double *)((char *)v378 + 4);
  LOBYTE(v378[0]) = 8;
  memset((char *)v378 + 4, 0, 32);
  *(void *)double v375 = &v375[12];
  v375[8] = 8;
  *(_OWORD *)&v375[12] = 0u;
  long long v376 = 0u;
  double v332 = (BlueFin::GlPeMsmtMgr **)((char *)v336 + 8);
  if (*((char *)v336 + 100) < 1)
  {
    unsigned __int8 v79 = 0;
    unsigned __int8 v78 = 0;
    unsigned __int8 v103 = 0;
    unsigned __int8 v104 = 0;
    unsigned __int8 v326 = 0;
    LOBYTE(v333) = 0;
    unsigned __int8 v107 = 0;
    unsigned __int8 v106 = 0;
    float v102 = 0.0;
    float v105 = 0.0;
  }
  else
  {
    int v324 = v74;
    LOBYTE(v75) = 0;
    int v328 = 0;
    int v327 = 0;
    int v333 = 0;
    unsigned __int8 v326 = 0;
    unsigned __int8 v76 = 0;
    unsigned __int8 v77 = 0;
    unsigned __int8 v78 = 0;
    unsigned __int8 v79 = 0;
    float v80 = 0.0;
    int v81 = (unsigned __int8 *)(v330 + 32);
    float v82 = 99.0;
    float v83 = 0.0;
    do
    {
      int v84 = *((_DWORD *)v81 + 3);
      if ((v84 | 2) != 2)
      {
        uint64_t v321 = "(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)";
        DeviceFaultNotify("glpe_polaroid.cpp", 284, "RunMeasPreselection", (char)"(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
        uint64_t v322 = "glpe_polaroid.cpp";
        int v323 = 284;
        goto LABEL_419;
      }
      *(void *)&long long v364 = 0;
      double v362 = 0.0;
      if (!v84
        && (((unint64_t)*(unsigned int *)(*(void *)v335 + 4 * (*((__int16 *)v81 + 4) >> 5)) >> (*((_WORD *)v81 + 4) & 0x1F)) & 1) != 0)
      {
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*v332, (const BlueFin::GlSignalId *)v81, 0, 0);
        if (*((float *)MeMeas + 27) >= 17.0)
        {
          unsigned __int16 v86 = MeMeas;
          unint64_t v87 = *v81;
          *((_DWORD *)v379 + (v87 >> 5)) |= 1 << v87;
          uint64_t v88 = (uint64_t)v336;
          uint64_t v89 = 28;
          if (!*((unsigned char *)v336 + 93)) {
            uint64_t v89 = 20;
          }
          unsigned int v90 = *(_DWORD *)&v86[v89] - 1;
          if (v90 <= 1)
          {
            ++v78;
            *(_DWORD *)&v381[4 * (*((__int16 *)v81 + 4) >> 5)] |= 1 << *((_WORD *)v81 + 4);
            *(_DWORD *)(*(void *)v375 + 4 * (v87 >> 5)) |= 1 << v87;
          }
          if (v82 > 10.0)
          {
            uint64_t v91 = **((unsigned int **)v336 + 1);
            uint64_t v360 = *(void *)(v331 + *(void *)(*(void *)v336 - 24));
            int v374 = **((_DWORD **)v336 + 3);
            int v373 = 0;
            BlueFin::GlPeDops::GetDops((uint64_t)&__src, v91);
            BlueFin::stDops::operator=((uint64_t)v388, (uint64_t)&v366);
            uint64_t v88 = (uint64_t)v336;
            LOBYTE(v87) = *v81;
          }
          v370[0] = v87;
          int v371 = *((_DWORD *)v81 + 1);
          __int16 v372 = *((_WORD *)v81 + 4);
          if (BlueFin::GlPePolaroid::PolaroidInnovPR(v88, (uint64_t)v370, (double *)&v364, (double *)&v387, &v362, 0x32u, 0, v337, v82, v14))
          {
            float v92 = *((float *)v86 + 27);
            float v82 = *((float *)&v389 + 1);
            double v93 = v362;
            BlueFin::SKFVector::AddLen((uint64_t)&v353);
            *((double *)v353 + SLODWORD(v354[0])) = v93;
            if (v90 <= 1)
            {
              *(_DWORD *)((char *)v377 + (((unint64_t)*v81 >> 3) & 0x1C)) |= 1 << *v81;
              ++v326;
            }
            float v83 = v83 + v92;
            ++v77;
            int v96 = v327;
            if (v93 < 15.0) {
              int v96 = v327 + 1;
            }
            int v327 = v96;
            int v97 = v328;
            if (v93 >= 15.0) {
              int v97 = v328 + 1;
            }
            int v328 = v97;
          }
          else
          {
            BlueFin::GlSetBase::Remove((uint64_t)&v379, *v81);
            float v94 = *((float *)v86 + 27);
            double v93 = v362;
            BlueFin::SKFVector::AddLen((uint64_t)&v396);
            float v80 = v80 + v94;
            ++v76;
            *(double *)(v396 + 8 * SDWORD2(v396)) = v93;
            int v95 = v333;
            if (v90 < 2) {
              int v95 = v333 + 1;
            }
            int v333 = v95;
          }
          ++v79;
          double v98 = *(double *)&v364;
          if (*(double *)&v364 > 0.0)
          {
            double v99 = (double *)BlueFin::GlBigArray::Add((BlueFin::GlBigArray *)v412, *((unsigned __int16 *)v81 + 4));
            if (!v99)
            {
              uint64_t v321 = "pdSlot";
              DeviceFaultNotify("glpe_polaroid.cpp", 347, "RunMeasPreselection", (char)"pdSlot");
              uint64_t v322 = "glpe_polaroid.cpp";
              int v323 = 347;
              goto LABEL_419;
            }
            if (v93 <= 0.0)
            {
              double v100 = 0.0;
              if (v93 < 0.0) {
                double v100 = -1.0;
              }
              double *v99 = v98 * v100;
            }
            else
            {
              double *v99 = v98;
              double v100 = 1.0;
            }
            double v101 = v98 * v100;
            BlueFin::SKFVector::AddLen((uint64_t)v386);
            *(double *)(*(void *)&v386[0] + 8 * SDWORD2(v386[0])) = v101;
          }
        }
        uint64_t v73 = v336;
      }
      int v75 = (char)(v75 + 1);
      v81 += 56;
    }
    while (v75 < *((char *)v73 + 100));
    if (v77) {
      float v102 = v83 / (float)v77;
    }
    else {
      float v102 = 0.0;
    }
    unsigned __int8 v103 = v77;
    if (v76) {
      unsigned __int8 v104 = v76;
    }
    else {
      unsigned __int8 v104 = 0;
    }
    if (v76) {
      float v105 = v80 / (float)v76;
    }
    else {
      float v105 = 0.0;
    }
    int v74 = v324;
    unsigned __int8 v106 = v328;
    unsigned __int8 v107 = v327;
  }
  uint64_t v108 = **((unsigned int **)v73 + 1);
  *(void *)&long long v364 = *(void *)((char *)v73 + *(void *)(*(void *)v73 - 24) + 88);
  LODWORD(v362) = **((_DWORD **)v73 + 3);
  int v374 = 0;
  uint64_t v109 = (uint64_t)v73;
  BlueFin::GlPeDops::GetDops((uint64_t)&__src, v108);
  BlueFin::stDops::operator=((uint64_t)v388, (uint64_t)&v366);
  uint64_t v110 = **(unsigned int **)(v109 + 8);
  *(void *)&long long v364 = *(void *)(v109 + *(void *)(*(void *)v109 - 24) + 88);
  LODWORD(v362) = **(_DWORD **)(v109 + 24);
  int v369 = 0;
  BlueFin::GlPeDops::GetDops((uint64_t)&__src, v110);
  BlueFin::stDops::operator=((uint64_t)v388, (uint64_t)&v366);
  uint64_t v111 = **(unsigned int **)(v109 + 8);
  *(void *)&long long v364 = *(void *)(v109 + *(void *)(*(void *)v109 - 24) + 88);
  LODWORD(v362) = **(_DWORD **)(v109 + 24);
  int v368 = 0;
  BlueFin::GlPeDops::GetDops((uint64_t)&__src, v111);
  BlueFin::stDops::operator=((uint64_t)v388, (uint64_t)&v366);
  float v112 = *((float *)&v389 + 1);
  uint64_t v113 = v109 + *(void *)(*(void *)v109 - 24);
  long long v364 = *(_OWORD *)(v113 + 8);
  uint64_t v365 = *(void *)(v113 + 24);
  BlueFin::GlPeNavUtil::ComputeRangeResidVec(v109, (uint64_t)&v381, (uint64_t)&v364, **(unsigned int **)(v109 + 24), 0, 0, 0, 1, *(unsigned char *)(v109 + 88), 1);
  double v114 = BlueFin::SKFVector::Var((BlueFin::SKFVector *)&v353);
  double v118 = BlueFin::SKFVector::Var((BlueFin::SKFVector *)&v396);
  if (v112 <= 2.0) {
    BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v366, v115, v116, v117);
  }
  double v119 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)v386, v115, v116, v117);
  double v362 = COERCE_DOUBLE(v412);
  unsigned __int16 v363 = v415 + 1;
  if (v414 > (unsigned __int16)(v415 + 1))
  {
    double v120 = v119;
    do
    {
      BlueFin::GlSignalIdArrayIterator::Next((BlueFin::GlSignalIdArrayIterator *)&v362, (uint64_t)&v360);
      BOOL v121 = (double *)BlueFin::GlSignalIdArray::Get((uint64_t)&v406, (uint64_t)&v360);
      if (v121 && *v121 < v120) {
        *(_DWORD *)&v339[4 * (v361 >> 5)] |= 1 << v361;
      }
    }
    while (v363 < *(unsigned __int16 *)(*(void *)&v362 + 32));
  }
  if (v337) {
    goto LABEL_163;
  }
  uint64_t v122 = 0;
  float v123 = sqrt(v114);
  float v124 = sqrt(v118);
  BOOL v125 = v103 > 2u && v104 > 2u;
  float v126 = (float)v326;
  int v127 = v125;
  float v128 = (float)v333;
  float v129 = v126 / v128;
  if (!(_BYTE)v333) {
    float v129 = 0.0;
  }
  float v130 = v124 / v123;
  if (v123 <= 0.0) {
    float v131 = 0.0;
  }
  else {
    float v131 = v130;
  }
  float v132 = (float)v107 / (float)v106;
  if (!v106) {
    float v132 = 0.0;
  }
  float v133 = v102 - v105;
  if (!v127) {
    float v133 = 0.0;
  }
  float v134 = (float)v103;
  float v135 = v134 / (float)v79;
  if (!v79) {
    float v135 = 0.0;
  }
  float v136 = v126 / (float)v78;
  if (!v78) {
    float v136 = 0.0;
  }
  float v137 = v126 / v134;
  if (!v103) {
    float v137 = 0.0;
  }
  float v138 = 1.0;
  if ((v74 & 0xFFFFFFFE) != 2) {
    float v138 = 0.0;
  }
  int v139 = *((unsigned __int8 *)v336 + 56);
  int v140 = (float *)&BlueFin::KF_CONF_COEFS_NAV2;
  float v141 = (float *)&BlueFin::KF_CONF_COEFS_SPIDER;
  do
  {
    if (v139) {
      unint64_t v142 = v141;
    }
    else {
      unint64_t v142 = v140;
    }
    *(float *)&v407[v122 - 8] = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v142 + (float)(v142[1] * 0.0)) + (float)(v142[2] * v138)) + (float)(v142[3] * v134)) + (float)(v142[4] * v126))
                                                                                              + (float)(v142[5] * v128))
                                                                                      + (float)(v142[6] * v129))
                                                                              + (float)(v142[7] * v131))
                                                                      + (float)(v142[8] * v132))
                                                              + (float)(v142[9] * v133))
                                                      + (float)(v142[10] * (float)((float)v103 - (float)v104)))
                                              + (float)(v142[11] * v135))
                                      + (float)(v142[12] * v137))
                              + (float)(v142[13] * v136);
    v122 += 4;
    v140 += 14;
    v141 += 14;
  }
  while (v122 != 12);
  if (*(float *)&v406 < *((float *)&v406 + 1) || *(float *)&v406 < *(float *)v407)
  {
    char v145 = *((unsigned char *)v336 + 125);
    char v144 = *((unsigned char *)v336 + 124) + 1;
    if (*(float *)v407 < *((float *)&v406 + 1) || *(float *)v407 <= *(float *)&v406) {
      char v143 = v145 - 1;
    }
    else {
      char v143 = v145 + 1;
    }
  }
  else
  {
    char v143 = *((unsigned char *)v336 + 125) - 1;
    char v144 = *((unsigned char *)v336 + 124) - 1;
  }
  int v146 = v143 & ~(v143 >> 31);
  int v147 = v144 & ~(v144 >> 31);
  if (v146 >= 10) {
    LOBYTE(v148) = 10;
  }
  else {
    LOBYTE(v148) = v146;
  }
  *((unsigned char *)v336 + 125) = v148;
  if (v147 >= 10) {
    unsigned __int8 v149 = 10;
  }
  else {
    unsigned __int8 v149 = v147;
  }
  *((unsigned char *)v336 + 124) = v149;
  int v150 = *((_DWORD *)v336 + 30);
  if (v150 == 1)
  {
    unsigned int v148 = v148;
    BOOL v152 = v149 != 0;
    goto LABEL_159;
  }
  if (v150 != 2)
  {
    unsigned int v148 = v148;
    BOOL v152 = v149 > 2u;
LABEL_159:
    if (v148 <= 2) {
      int v151 = v152;
    }
    else {
      int v151 = 2;
    }
    goto LABEL_162;
  }
  if ((_BYTE)v148) {
    int v151 = 2;
  }
  else {
    int v151 = 1;
  }
LABEL_162:
  *((_DWORD *)v336 + 30) = v151;
LABEL_163:
  unsigned __int8 v404 = &v405[4];
  v405[0] = 19;
  memset(&v405[4], 0, 76);
  double v366 = (char *)v367 + 4;
  LOBYTE(v367[0]) = 8;
  *(_OWORD *)((char *)v367 + 4) = 0u;
  *(_OWORD *)((char *)&v367[1] + 4) = 0u;
  *(double *)&__src = 0.0;
  double v392 = 1.0;
  v388[0] = 0;
  uint64_t v153 = *((void *)v336 + 2);
  LODWORD(v353) = 0;
  *(void *)&v354[0] = (char *)v354 + 12;
  BYTE8(v354[0]) = 8;
  memset((char *)v354 + 12, 0, 32);
  void v354[3] = xmmword_263BBA380;
  int32x2_t v154 = vdup_n_s32(0x42C60000u);
  *(int32x2_t *)&v354[4] = v154;
  DWORD2(v354[4]) = 1120272384;
  BlueFin::stDops::stDops((uint64_t)&v406, (uint64_t)&v353);
  uint64_t v155 = (uint64_t)v336;
  uint64_t v408 = v153;
  LODWORD(v396) = 0;
  *((void *)&v396 + 1) = &v397[4];
  v397[0] = 8;
  *(_OWORD *)&v397[4] = 0u;
  *(_OWORD *)float v398 = 0u;
  long long v399 = xmmword_263BBA380;
  double v400 = *(double *)&v154;
  LODWORD(v401) = 1120272384;
  float v156 = 99.0;
  char v157 = 1;
  LOBYTE(v158) = *((unsigned char *)v336 + 100);
  double v159 = (const void **)v335;
  do
  {
    char v160 = v157;
    if ((char)v158 >= 1)
    {
      LOBYTE(v161) = 0;
      uint64_t v162 = v330;
      do
      {
        int v163 = *(_DWORD *)(v162 + 44);
        if ((v163 | 2) != 2)
        {
          uint64_t v321 = "(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)";
          DeviceFaultNotify("glpe_polaroid.cpp", 424, "RunMeasSelectionPR", (char)"(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
          uint64_t v322 = "glpe_polaroid.cpp";
          int v323 = 424;
          goto LABEL_419;
        }
        uint64_t v164 = 1 << (*(_WORD *)(v162 + 40) & 0x1F);
        if (v160)
        {
          if (!v163 && (v164 & *(_DWORD *)&v339[4 * (*(__int16 *)(v162 + 40) >> 5)]) != 0) {
            goto LABEL_173;
          }
        }
        else if (!v163 && (v164 & *(_DWORD *)&v339[4 * (*(__int16 *)(v162 + 40) >> 5)]) == 0)
        {
LABEL_173:
          if ((v164 & *((_DWORD *)*v159 + ((uint64_t)*(__int16 *)(v162 + 40) >> 5))) != 0)
          {
            unsigned int v165 = 0;
            LOBYTE(v425) = *(unsigned char *)(v162 + 32);
            HIDWORD(v425) = *(_DWORD *)(v162 + 36);
            LOWORD(v426[0]) = *(_WORD *)(v162 + 40);
            double v166 = &v350[4 * v351 - 4];
            do
            {
              if (*v166)
              {
                unsigned int v167 = *v166 - (((*v166 >> 1) & 0x5B6DB6DB) + ((*v166 >> 2) & 0x9249249));
                unsigned int v165 = ((v167 + (v167 >> 3)) & 0xC71C71C7) + v165 - 63 * (((v167 + (v167 >> 3)) & 0xC71C71C7) / 0x3F);
              }
              --v166;
            }
            while (v166 >= (_DWORD *)v350);
            if ((unsigned __int16)v165 <= v103) {
              unsigned int v168 = v103;
            }
            else {
              unsigned int v168 = (unsigned __int16)v165;
            }
            uint64_t v169 = v155;
            if (BlueFin::GlPePolaroid::PolaroidInnovPR(v155, (uint64_t)&v425, (double *)&__src, &v392, (double *)v388, v168, *(_DWORD *)(v155 + 120), v337, v156, v14))
            {
              *(_DWORD *)&v366[((unint64_t)*(unsigned __int8 *)(v162 + 32) >> 3) & 0x1C] |= 1 << *(unsigned char *)(v162 + 32);
              uint64_t v155 = v169;
              if (*(double *)&__src > v392)
              {
                char v170 = v337;
                if (*(_DWORD *)(v169 + 120) == 2) {
                  char v170 = 1;
                }
                if ((v170 & 1) == 0
                  && (*(_DWORD *)(v169 + 96) > 0xFu
                   || *(double *)(*(void *)(v169 + 48) + 24) < 20.0
                   || *(double *)v388 > 0.0))
                {
                  double v171 = exp(*(double *)&__src / v392);
                  uint64_t v155 = (uint64_t)v336;
                  *(double *)(v162 + 8) = fmin(sqrt(v171), 10000.0) * *(double *)(v162 + 8);
                }
              }
              *(_DWORD *)&v350[4 * (*(__int16 *)(v162 + 40) >> 5)] |= 1 << *(_WORD *)(v162 + 40);
              double v159 = (const void **)v335;
              if (v156 > 10.0)
              {
                uint64_t v177 = **(unsigned int **)(v155 + 8);
                double v381 = *(unsigned char **)(v331 + *(void *)(*(void *)v155 - 24));
                LODWORD(v379) = **(_DWORD **)(v155 + 24);
                LODWORD(v377) = 0;
                BlueFin::GlPeDops::GetDops((uint64_t)&v406, v177);
                BlueFin::stDops::operator=((uint64_t)&v396, (uint64_t)v386);
                uint64_t v155 = (uint64_t)v336;
              }
              float v156 = *((float *)&v399 + 1);
              int v173 = v388[0];
            }
            else
            {
              int v172 = *(__int16 *)(v162 + 40);
              *(_DWORD *)&v344[4 * (v172 >> 5)] |= 1 << *(_WORD *)(v162 + 40);
              int v173 = v388[0];
              if (*(double *)v388 >= 0.0) {
                double v174 = *(double *)v388;
              }
              else {
                double v174 = -*(double *)v388;
              }
              double v175 = *(double *)(*(void *)(v169 + 48) + 24);
              BOOL v176 = v174 < v175 && *(double *)&__src < 3.0;
              uint64_t v155 = v169;
              double v159 = (const void **)v335;
              if (v176 && *(_DWORD *)(*(void *)(v155 + 32) + 8) == 1
                || v175 > 20.0 && *(_DWORD *)(*(void *)(v155 + 32) + 8) == 2)
              {
                BlueFin::GlSetBase::Remove((uint64_t)&v344, (__int16)v172);
                uint64_t v155 = (uint64_t)v336;
              }
            }
            if (*(double *)&v173 < 0.0) {
              *(_DWORD *)&v404[4 * (*(__int16 *)(v162 + 40) >> 5)] |= 1 << *(_WORD *)(v162 + 40);
            }
          }
        }
        v162 += 56;
        int v161 = (char)(v161 + 1);
        int v158 = *(char *)(v155 + 100);
      }
      while (v161 < v158);
    }
    char v157 = 0;
  }
  while ((v160 & 1) != 0);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v353, (unsigned int *)v354 + 1, 0x13u, v159);
  double v406 = COERCE_DOUBLE(&v407[4]);
  v407[0] = 19;
  memset(&v407[4], 0, 76);
  BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&v353, (int **)&v406, (int **)v329);
  BlueFin::GlSetBase::operator=((uint64_t)&v353, (uint64_t)&v406);
  *(_OWORD *)((char *)&v354[1] + 4) = *(_OWORD *)&v407[20];
  *(_OWORD *)((char *)&v354[2] + 4) = *(_OWORD *)&v407[36];
  *(_OWORD *)((char *)&v354[3] + 4) = *(_OWORD *)&v407[52];
  v354[4] = *(_OWORD *)&v407[64];
  *(_OWORD *)((char *)v354 + 4) = *(_OWORD *)&v407[4];
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&v356[4], 0x13u, (const void **)&v353);
  double v406 = COERCE_DOUBLE(&v407[4]);
  v407[0] = 19;
  memset(&v407[4], 0, 76);
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v406, (int **)v329);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v406);
  *(_OWORD *)double v357 = *(_OWORD *)&v407[20];
  *(_OWORD *)&v357[16] = *(_OWORD *)&v407[36];
  *(_OWORD *)&v357[32] = *(_OWORD *)&v407[52];
  *(_OWORD *)&v357[44] = *(_OWORD *)&v407[64];
  *(_OWORD *)&v356[4] = *(_OWORD *)&v407[4];
  LOBYTE(v406) = v356[0];
  memcpy(v407, __src, 4 * v356[0]);
  WORD1(v406) = 0;
  BYTE1(v406) = 0;
  HIDWORD(v406) = *(_DWORD *)v407;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v406);
  while (BYTE1(v406) != LOBYTE(v406))
  {
    unint64_t v178 = WORD1(v406);
    if (WORD1(v406) >= 0x23FuLL)
    {
      uint64_t v321 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      uint64_t v322 = "glsignalid.h";
      int v323 = 577;
      goto LABEL_419;
    }
    uint64_t v179 = *v332;
    int v180 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v406);
    char v181 = *v180;
    LODWORD(v180) = v180[1];
    LOBYTE(v353) = v181;
    HIDWORD(v353) = v180;
    LOWORD(v354[0]) = WORD1(v406);
    uint64_t v182 = BlueFin::GlSignalIdArray::Get(*((void *)v179 + 2397), (uint64_t)&v353);
    if (v182 && *(unsigned char *)(v182 + 448) == 15) {
      *(_DWORD *)&v344[(v178 >> 3) & 0x1FFC] |= 1 << v178;
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v406);
  }
  double v183 = v336;
  uint64_t v184 = *((void *)v336 + 8);
  if (v184)
  {
    int v185 = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v184 + 440));
    double v183 = v336;
    BOOL v186 = v185 == 0;
  }
  else
  {
    BOOL v186 = 1;
  }
  BOOL v338 = v186;
  int v187 = *(_DWORD *)(*((void *)v183 + 4) + 16);
  *(void *)&v386[0] = (char *)v386 + 12;
  BYTE8(v386[0]) = 19;
  memset((char *)v386 + 12, 0, 64);
  *(_OWORD *)((char *)&v386[4] + 8) = 0u;
  double v366 = (char *)v367 + 4;
  LOBYTE(v367[0]) = 19;
  *(_OWORD *)((char *)v367 + 4) = 0u;
  *(_OWORD *)((char *)&v367[1] + 4) = 0u;
  *(_OWORD *)((char *)&v367[2] + 4) = 0u;
  *(_OWORD *)((char *)&v367[3] + 4) = 0u;
  v367[4] = 0u;
  unsigned int v425 = (char *)v426 + 4;
  LOBYTE(v426[0]) = 19;
  *(_OWORD *)((char *)v426 + 4) = 0u;
  *(_OWORD *)((char *)&v426[1] + 4) = 0u;
  *(_OWORD *)((char *)&v426[2] + 4) = 0u;
  *(_OWORD *)((char *)&v426[3] + 4) = 0u;
  v426[4] = 0u;
  int v188 = *((char *)v183 + 100);
  if (v188 >= 1)
  {
    LOBYTE(v189) = 0;
    unsigned int v334 = v187 & 0xFFFFFFFE;
    float v325 = (float64x2_t *)((char *)v183 + 2008);
    uint64_t v190 = v330;
    while (1)
    {
      int v191 = *(_DWORD *)(v190 + 44);
      if (v191 == 2)
      {
        __int16 v193 = *(_WORD *)(v190 + 40);
        uint64_t v194 = (uint64_t)v193 >> 5;
        uint64_t v195 = 1 << (v193 & 0x1F);
        BOOL v192 = (v195 & *(_DWORD *)(*(void *)v329 + 4 * (v193 >> 5))) != 0;
      }
      else
      {
        if (v191)
        {
          uint64_t v321 = "(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)";
          DeviceFaultNotify("glpe_polaroid.cpp", 488, "RunMeasSelectionRR", (char)"(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
          uint64_t v322 = "glpe_polaroid.cpp";
          int v323 = 488;
LABEL_419:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v322, v323, v321);
        }
        BOOL v192 = 0;
        __int16 v193 = *(_WORD *)(v190 + 40);
        uint64_t v194 = (uint64_t)v193 >> 5;
        uint64_t v195 = 1 << (v193 & 0x1F);
      }
      BOOL v196 = (v195 & *(_DWORD *)&v344[4 * v194]) != 0 && v334 == 2;
      BOOL v197 = !v196 || *((_DWORD *)v183 + 24) < 0x10u;
      if (v338)
      {
        unsigned int v198 = BlueFin::GlSetBase::Cnt(v329);
        double v183 = v336;
        BOOL v199 = v198 > 0xB;
      }
      else
      {
        BOOL v199 = 0;
      }
      if (v192 && v197) {
        break;
      }
LABEL_317:
      v190 += 56;
      int v189 = (char)(v189 + 1);
      if (v189 >= (char)v188) {
        goto LABEL_318;
      }
    }
    BOOL v200 = v199;
    *(_DWORD *)(*(void *)&v386[0] + 4 * (v193 >> 5)) |= 1 << v193;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v353, (unsigned int *)v354 + 1, 0x13u, (const void **)v329);
    BlueFin::GlSetBase::operator=((uint64_t)&v425, (uint64_t)v329);
    long long v201 = *(_OWORD *)((char *)v329 + 60);
    *(_OWORD *)((char *)&v426[2] + 4) = *(_OWORD *)((char *)v329 + 44);
    *(_OWORD *)((char *)&v426[3] + 4) = v201;
    v426[4] = *(_OWORD *)((char *)v329 + 72);
    long long v202 = *(_OWORD *)((char *)v329 + 28);
    *(_OWORD *)((char *)v426 + 4) = *(_OWORD *)((char *)v329 + 12);
    *(_OWORD *)((char *)&v426[1] + 4) = v202;
    BlueFin::GlSetBase::Remove((uint64_t)&v425, *(__int16 *)(v190 + 40));
    unsigned int v203 = 0;
    uint64_t v204 = &v425[4 * LOBYTE(v426[0]) - 4];
    do
    {
      if (*(_DWORD *)v204)
      {
        unsigned int v205 = *(_DWORD *)v204 - (((*(_DWORD *)v204 >> 2) & 0x9249249) + ((*(_DWORD *)v204 >> 1) & 0x5B6DB6DB));
        unsigned int v203 = ((v205 + (v205 >> 3)) & 0xC71C71C7) + v203 - 63 * (((v205 + (v205 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      v204 -= 4;
    }
    while (v204 >= v425);
    double v206 = -1.0;
    uint64_t v207 = (uint64_t)v336;
    if ((unsigned __int16)v203 >= 3u
      && (*((unsigned char *)v336 + 90) || *((unsigned char *)v336 + 92) || *((_DWORD *)v336 + 24) <= 0xFu))
    {
      float v208 = (char *)v336 + *(void *)(*(void *)v336 - 24);
      *(_OWORD *)double v375 = *(_OWORD *)(v208 + 8);
      *(void *)&v375[16] = *((void *)v208 + 3);
      BlueFin::GlPeNavUtil::ComputeRrateResidVec((uint64_t)v336, (uint64_t)&v425);
      uint64_t v212 = *(unsigned int *)v407;
      if (*(int *)v407 >= 1)
      {
        float v213 = (double *)(*(void *)&v406 + 8);
        do
        {
          double *v213 = fabs(*v213);
          ++v213;
          --v212;
        }
        while (v212);
      }
      double v206 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v406, v209, v210, v211);
      uint64_t v207 = (uint64_t)v336;
    }
    LOBYTE(v364) = *(unsigned char *)(v190 + 32);
    DWORD1(v364) = *(_DWORD *)(v190 + 36);
    WORD4(v364) = *(_WORD *)(v190 + 40);
    *(void *)unsigned int v407 = 0;
    double v406 = 0.0;
    *(void *)&v407[8] = 0;
    LOBYTE(v396) = v364;
    DWORD1(v396) = *(_DWORD *)(v190 + 36);
    WORD4(v396) = *(_WORD *)(v190 + 40);
    if (!BlueFin::GlPePolaroid::GetMetrics(v207, (uint64_t)&v406, (unsigned __int16 *)&v396, 1)) {
      goto LABEL_310;
    }
    BOOL v214 = BlueFin::GlPeMsmtMgr::GetMeMeas(*v332, (const BlueFin::GlSignalId *)&v364, 0, 0);
    *(double *)&float v215 = v406;
    float v216 = v336;
    if (*((_DWORD *)v214 + 8) != 3)
    {
      float v217 = v406 * v406;
      uint64_t v218 = *((unsigned __int8 *)v336 + 2000);
      *((float *)v336 + v218 + 498) = *((float *)v336 + v218 + 498) + v217;
      ++*((unsigned char *)v336 + v218 + 2001);
      *float v325 = vaddq_f64(*(float64x2_t *)v407, *v325);
    }
    double v219 = *(double *)&v215;
    if (v338)
    {
      uint64_t v220 = *((void *)v336 + 6);
      if (*(unsigned char *)(v220 + 6544)) {
        double v221 = *(double *)(v220 + 6536);
      }
      else {
        double v221 = 0.0;
      }
      double v219 = *(double *)&v215 - v221;
    }
    double v222 = sqrt(*(double *)&v407[8] + *(double *)v407);
    if (v219 / v222 >= 0.0) {
      double v223 = v219 / v222;
    }
    else {
      double v223 = -(v219 / v222);
    }
    uint64_t v224 = *((void *)v336 + 4);
    uint64_t v225 = *(unsigned int *)(v224 + 8);
    double v226 = BlueFin::GlPePolaroid::Design::RR_THRESH[v225];
    int v227 = *(_DWORD *)(v224 + 16);
    if (v227 != 1)
    {
      if ((v225 - 3) > 2)
      {
        if (v225 != 6) {
          goto LABEL_265;
        }
        double v228 = 1.67;
      }
      else
      {
        double v228 = 1.33;
        if (v227 != 9) {
          double v228 = 2.0;
        }
      }
      double v226 = v226 / v228;
    }
LABEL_265:
    if (v219 < 0.0) {
      double v219 = -v219;
    }
    if (v219 <= v206 * 3.0) {
      BOOL v229 = 1;
    }
    else {
      BOOL v229 = v219 <= 5.0 && *((_DWORD *)v336 + 24) < 0x10u;
    }
    if (v225 == 1 && *((unsigned char *)v336 + 56))
    {
      double v226 = v226 * 0.5;
      if (v227 == 9
        && (*(double *)(*((void *)v336 + 6) + 32) + *(double *)(*((void *)v336 + 6) + 32)) / v222 >= v226)
      {
        double v226 = (*(double *)(*((void *)v336 + 6) + 32) + *(double *)(*((void *)v336 + 6) + 32)) / v222;
      }
      goto LABEL_294;
    }
    if (v206 > 0.0)
    {
      if (*((unsigned char *)v336 + 90) || *((unsigned char *)v336 + 92))
      {
        if (v229) {
          goto LABEL_282;
        }
      }
      else
      {
        char v233 = *((_DWORD *)v336 + 24) > 0xFu || v229;
        if (v233) {
          goto LABEL_282;
        }
      }
      double v226 = 0.0;
      goto LABEL_294;
    }
LABEL_282:
    float v230 = BlueFin::GlPeMsmtMgr::GetMeMeas(*((BlueFin::GlPeMsmtMgr **)v336 + 1), (const BlueFin::GlSignalId *)&v364, 0, 0);
    float v216 = v336;
    uint64_t v231 = 28;
    if (!*((unsigned char *)v336 + 93)) {
      uint64_t v231 = 20;
    }
    int v232 = *(_DWORD *)&v230[v231];
    if ((v232 - 1) > 1)
    {
      if (v232 == 4) {
        double v223 = v223 + v223;
      }
    }
    else
    {
      double v223 = v223 * 0.5;
    }
LABEL_294:
    if (fabs(*(double *)&v215) > 0.200000003 && v200)
    {
      uint64_t v235 = *((void *)v216 + 6);
      double v236 = *(double *)(v235 + 80);
      double v237 = *(double *)(v235 + 64);
      float v238 = (v236 - v237) * 0.75;
      double v239 = v238;
      BOOL v240 = v237 - v239 > *(double *)&v215;
      if (v236 + v239 < *(double *)&v215) {
        BOOL v240 = 1;
      }
      if (v236 <= v237) {
        BOOL v240 = 0;
      }
    }
    else
    {
      BOOL v240 = 0;
    }
    char v241 = *((unsigned char *)v216 + 90);
    if (v241) {
      char v241 = *(double *)(*((void *)v216 + 6) + 32) > v222 * 3.0;
    }
    if (v223 > v226) {
      BOOL v240 = 1;
    }
    if (!v240 || (v241 & 1) != 0)
    {
      if (v223 >= v226 * 0.6)
      {
        double v183 = v336;
        int v242 = &v366;
        if (!*((unsigned char *)v336 + 56)) {
          int v242 = &v347;
        }
      }
      else
      {
        int v242 = &v347;
        double v183 = v336;
      }
      *(_DWORD *)&(*v242)[4 * (*(__int16 *)(v190 + 40) >> 5)] |= 1 << *(_WORD *)(v190 + 40);
      goto LABEL_316;
    }
LABEL_310:
    double v183 = v336;
LABEL_316:
    LOBYTE(v188) = *((unsigned char *)v183 + 100);
    goto LABEL_317;
  }
  if (!v338) {
    goto LABEL_328;
  }
  double v243 = *((double *)v183 + 252);
  if (v243 <= 0.000001) {
    goto LABEL_328;
  }
LABEL_318:
  uint64_t v244 = 0;
  char v245 = 0;
  unsigned __int16 v246 = 0;
  char v247 = 1;
  do
  {
    char v248 = v247;
    int v249 = *((unsigned __int8 *)v183 + v244 + 2001);
    v246 += v249;
    if (v249) {
      ++v245;
    }
    uint64_t v244 = 1;
    char v247 = 0;
  }
  while ((v248 & 1) != 0);
  if (v245 == 2 && v246 >= 8u)
  {
    uint64_t v287 = 0;
    double v288 = 0.0;
    char v289 = 1;
    do
    {
      char v290 = v289;
      double v288 = v288 + *((float *)v183 + v287 + 498);
      uint64_t v287 = 1;
      char v289 = 0;
    }
    while ((v290 & 1) != 0);
    double v251 = sqrt(fabs((v288 * 0.5 - *((double *)v183 + 251)) / v243)) * 0.6 + *((double *)v183 + 253) * 0.4;
  }
  else
  {
LABEL_328:
    double v251 = *((double *)v183 + 253) * 0.7 + 0.3;
  }
  *((double *)v183 + 253) = v251;
  unsigned int v252 = 0;
  int v253 = *((unsigned __int8 *)v183 + 2000);
  if (v253 == 1) {
    unsigned __int8 v254 = 0;
  }
  else {
    unsigned __int8 v254 = v253 + 1;
  }
  *((unsigned char *)v183 + 2000) = v254;
  *((unsigned char *)v183 + v254 + 2001) = 0;
  *((_DWORD *)v183 + v254 + 498) = 0;
  *(_OWORD *)((char *)v183 + 2008) = 0u;
  unsigned int v255 = v347;
  uint64_t v256 = &v347[4 * v348 - 4];
  do
  {
    if (*(_DWORD *)v256)
    {
      unsigned int v257 = *(_DWORD *)v256 - (((*(_DWORD *)v256 >> 1) & 0x5B6DB6DB) + ((*(_DWORD *)v256 >> 2) & 0x9249249));
      unsigned int v252 = ((v257 + (v257 >> 3)) & 0xC71C71C7) + v252 - 63 * (((v257 + (v257 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    v256 -= 4;
  }
  while (v256 >= v347);
  if ((unsigned __int16)v252 > 4u)
  {
    unsigned int v263 = 0;
    char v264 = &v366[4 * LOBYTE(v367[0]) - 4];
    do
    {
      if (*(_DWORD *)v264)
      {
        unsigned int v265 = *(_DWORD *)v264 - (((*(_DWORD *)v264 >> 2) & 0x9249249) + ((*(_DWORD *)v264 >> 1) & 0x5B6DB6DB));
        unsigned int v263 = ((v265 + (v265 >> 3)) & 0xC71C71C7) + v263 - 63 * (((v265 + (v265 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      v264 -= 4;
    }
    while (v264 >= v366);
    if ((unsigned __int16)v252 <= 0xFu && (_WORD)v263)
    {
      float v266 = (char *)v183 + *(void *)(*(void *)v183 - 24);
      uint64_t v267 = *((void *)v266 + 11);
      int v268 = **((_DWORD **)v183 + 3);
      double v381 = v266 + 8;
      *(void *)float v382 = v267;
      v382[12] = 15;
      *(_DWORD *)&v382[8] = v268;
      *(_DWORD *)&v382[16] = 21;
      *(int64x2_t *)&v407[24] = vdupq_n_s64(0x4079000000000000uLL);
      *(void *)&v407[40] = 0x4079000000000000;
      *(void *)&v407[56] = 0x6400000000;
      int v269 = v183;
      bzero(&v407[64], 0x328uLL);
      *(void *)&v407[48] = &v407[64];
      uint64_t v410 = 0x6400000000;
      bzero(v411, 0x328uLL);
      uint64_t v409 = v411;
      int v417 = 0;
      long long v421 = xmmword_263BBA380;
      memset(v420, 0, 32);
      unint64_t v418 = v420;
      char v419 = 8;
      int32x2_t v422 = vdup_n_s32(0x42C60000u);
      int v423 = 1120272384;
      *(void *)&v407[8] = 0;
      double v406 = 0.0;
      *(void *)unsigned int v407 = 0;
      *(void *)&v407[16] = *((void *)v266 + 19);
      long long v270 = *(_OWORD *)((char *)v269 + 8);
      int v416 = **((_DWORD **)v269 + 1);
      *(_OWORD *)int v388 = v270;
      memset(&v388[2], 0, 24);
      if (BlueFin::GlPeLsq::LsVelDeals((BlueFin::GlPeMsmtMgr **)v388, (uint64_t)&v381, (const void **)&v347, (uint64_t)&v406))
      {
        float v271 = *(double *)(*((void *)v269 + 6) + 32);
        if (v271 < 0.58) {
          float v271 = 0.58;
        }
        int v272 = *((char *)v269 + 100);
        double v183 = v269;
        if (v272 >= 1)
        {
          LOBYTE(v273) = 0;
          float v274 = fminf(v271, 1.74);
          uint64_t v275 = v330;
          do
          {
            if (*(_DWORD *)(v275 + 44) == 2)
            {
              uint64_t v276 = 1 << (*(_WORD *)(v275 + 40) & 0x1F);
              if ((v276 & *(_DWORD *)&v366[4 * (*(__int16 *)(v275 + 40) >> 5)]) != 0
                && (v276 & *(_DWORD *)&v347[4 * ((uint64_t)*(__int16 *)(v275 + 40) >> 5)]) == 0)
              {
                BOOL v379 = (double *)&v380[1];
                v380[0] = 0x100000000;
                v380[1] = 0;
                v380[2] = 0;
                double v377 = (double *)&v378[1];
                v378[0] = 0x100000000;
                v378[1] = 0;
                v378[2] = 0;
                int v353 = (char *)v354 + 8;
                *(void *)&v354[0] = 0xC00000000;
                memset((char *)v354 + 8, 0, 104);
                int v277 = (char *)v183 + *(void *)(*(void *)v183 - 24);
                uint64_t v278 = *((void *)v277 + 11);
                uint64_t v279 = *((void *)v183 + 2);
                int v280 = **((_DWORD **)v183 + 3);
                double v281 = *((float *)v277 + 52);
                double v282 = *((float *)v277 + 54);
                double v283 = *((float *)v277 + 56);
                double v284 = *((float *)v277 + 58);
                *(void *)&long long v396 = &v353;
                *((void *)&v396 + 1) = v277 + 8;
                *(void *)unsigned int v397 = v278;
                *(_DWORD *)&v397[8] = v280;
                *(void *)&v397[12] = 0x4C100000003;
                *(void *)&v398[4] = &v406;
                *(void *)&v398[12] = 0;
                *(void *)&long long v399 = &v407[16];
                *((double *)&v399 + 1) = v281;
                double v400 = v282;
                double v401 = v283;
                double v402 = v284;
                long long v403 = xmmword_263BBC830;
                double v392 = COERCE_DOUBLE(&v379);
                unsigned int v393 = (char **)&v377;
                memset(v394, 0, 56);
                (*(void (**)(uint64_t, long long *, double *, uint64_t, _UNKNOWN **))(*(void *)v279 + 16))(v279, &v396, &v392, v275, &BlueFin::GlSet128::BIT0);
                double v285 = v379[1] - v377[1];
                if (v285 < 0.0) {
                  double v285 = -v285;
                }
                float v286 = v285;
                if (v274 > v286) {
                  *(_DWORD *)&v347[4 * (*(__int16 *)(v275 + 40) >> 5)] |= 1 << *(_WORD *)(v275 + 40);
                }
                double v183 = v336;
                LOBYTE(v272) = *((unsigned char *)v336 + 100);
              }
            }
            v275 += 56;
            int v273 = (char)(v273 + 1);
          }
          while (v273 < (char)v272);
        }
      }
      else
      {
        int v291 = *((char *)v269 + 100);
        double v183 = v269;
        if (v291 >= 1)
        {
          unsigned int v292 = v366;
          unsigned int v293 = v347;
          float v294 = (_DWORD *)(v330 + 44);
          do
          {
            if (*v294 == 2)
            {
              uint64_t v295 = 1 << (*(_WORD *)(v294 - 1) & 0x1F);
              if ((v295 & *(_DWORD *)&v292[4 * (*((__int16 *)v294 - 2) >> 5)]) != 0)
              {
                uint64_t v296 = (uint64_t)*((__int16 *)v294 - 2) >> 5;
                if ((v295 & *(_DWORD *)&v293[4 * v296]) == 0) {
                  *(_DWORD *)&v293[4 * v296] |= 1 << (*(_WORD *)(v294 - 1) & 0x1F);
                }
              }
            }
            v294 += 14;
            --v291;
          }
          while (v291);
        }
      }
    }
  }
  else
  {
    int v258 = (char)v188;
    if ((char)v188 >= 1)
    {
      BOOL v259 = v366;
      long long v260 = (_DWORD *)(v330 + 44);
      do
      {
        if (*v260 == 2)
        {
          uint64_t v261 = 1 << (*(_WORD *)(v260 - 1) & 0x1F);
          if ((v261 & *(_DWORD *)&v259[4 * (*((__int16 *)v260 - 2) >> 5)]) != 0)
          {
            uint64_t v262 = (uint64_t)*((__int16 *)v260 - 2) >> 5;
            if ((v261 & *(_DWORD *)&v255[4 * v262]) == 0) {
              *(_DWORD *)&v255[4 * v262] |= 1 << (*(_WORD *)(v260 - 1) & 0x1F);
            }
          }
        }
        v260 += 14;
        --v258;
      }
      while (v258);
    }
  }
  if (*((unsigned char *)v183 + 126))
  {
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v342, (uint64_t)&v353);
    BlueFin::GlPeNavUtil::ComputeDops(v336, (const BlueFin::GlSvIdSet *)&v353);
    float v297 = 6.0 - *(float *)&v407[52];
    if (*(float *)&v407[52] < 1.0) {
      float v297 = 5.0;
    }
    if (*(float *)&v407[52] <= 5.0) {
      float v298 = v297;
    }
    else {
      float v298 = 1.0;
    }
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v340, (uint64_t)&v353);
    BlueFin::GlPeNavUtil::ComputeDops(v336, (const BlueFin::GlSvIdSet *)&v353);
    double v183 = v336;
    v299.n128_u32[0] = *(_DWORD *)&v407[52];
    v300.n128_f32[0] = (float)(5.0 - *(float *)&v407[52]) * 0.5;
    if (*(float *)&v407[52] < 1.0) {
      v300.n128_f32[0] = 3.0;
    }
    if (*(float *)&v407[52] <= 5.0) {
      float v301 = v300.n128_f32[0];
    }
    else {
      float v301 = 1.0;
    }
    LODWORD(v302) = *((char *)v336 + 100);
    if ((int)v302 >= 1)
    {
      uint64_t v303 = 0;
      do
      {
        uint64_t v304 = v330 + 56 * v303;
        if (*(_DWORD *)(v304 + 36) == 2) {
          float v305 = 0.5;
        }
        else {
          float v305 = 1.0;
        }
        int v306 = *(_DWORD *)(v304 + 44);
        if (v306 == 2)
        {
          uint64_t v317 = 1 << (*(_WORD *)(v330 + 56 * v303 + 40) & 0x1F);
          if ((v317 & v340[*(__int16 *)(v330 + 56 * v303 + 40) >> 5]) == 0
            && (v317 & *(_DWORD *)&v347[4 * ((uint64_t)*(__int16 *)(v330 + 56 * v303 + 40) >> 5)]) != 0)
          {
            uint64_t v318 = v330 + 56 * v303;
            v300.n128_u64[0] = *(void *)(v318 + 8);
            v299.n128_f64[0] = v300.n128_f64[0] * fmaxf(v301 * v305, 1.0);
            *(void *)(v318 + 8) = v299.n128_u64[0];
          }
        }
        else if (!v306)
        {
          uint64_t v307 = 1 << (*(_WORD *)(v330 + 56 * v303 + 40) & 0x1F);
          if ((v307 & v342[*(__int16 *)(v330 + 56 * v303 + 40) >> 5]) == 0)
          {
            uint64_t v308 = (uint64_t)*(__int16 *)(v330 + 56 * v303 + 40) >> 5;
            if ((v307 & *(_DWORD *)&v404[4 * v308]) == 0
              && (v307 & *(_DWORD *)&v350[4 * v308]) != 0)
            {
              float v309 = (unsigned __int8 *)(v304 + 32);
              uint64_t v310 = (*(uint64_t (**)(void, uint64_t, __n128, __n128))(**((void **)v183 + 2) + 64))(*((void *)v183 + 2), v304 + 32, v299, v300);
              if (v310)
              {
                uint64_t v311 = v310;
                BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v350, (uint64_t)&v353);
                BlueFin::GlSetBase::Remove((uint64_t)&v353, *v309);
                LOBYTE(v406) = v354[0];
                memcpy(v407, v353, 4 * LOBYTE(v354[0]));
                WORD1(v406) = 0;
                BYTE1(v406) = 0;
                HIDWORD(v406) = *(_DWORD *)v407;
                BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v406);
                unsigned __int16 v312 = 0;
                if (BYTE1(v406) != LOBYTE(v406))
                {
                  unsigned __int16 v312 = 0;
                  do
                  {
                    uint64_t v313 = *((void *)v336 + 2);
                    LOBYTE(v396) = BYTE2(v406);
                    uint64_t v314 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v313 + 64))(v313, &v396);
                    if (v314)
                    {
                      float v315 = *(float *)(v311 + 8) - *(float *)(v314 + 8);
                      if (v315 < 0.0) {
                        float v315 = -v315;
                      }
                      if (v315 < 15.0)
                      {
                        float v316 = *(float *)(v311 + 4) - *(float *)(v314 + 4);
                        if (v316 < 0.0) {
                          float v316 = -v316;
                        }
                        if (v316 < 15.0) {
                          ++v312;
                        }
                      }
                    }
                    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v406);
                  }
                  while (BYTE1(v406) != LOBYTE(v406));
                }
              }
              else
              {
                unsigned __int16 v312 = 0;
              }
              double v183 = v336;
              uint64_t v302 = v330 + 56 * v303;
              v300.n128_u64[0] = *(void *)(v302 + 8);
              v299.n128_f64[0] = v300.n128_f64[0] * fmaxf(v305 * (float)(v298 * (float)(v312 + 1)), 1.0);
              *(void *)(v302 + 8) = v299.n128_u64[0];
              LOBYTE(v302) = *((unsigned char *)v336 + 100);
            }
          }
        }
        ++v303;
      }
      while (v303 < (char)v302);
    }
  }
  double v319 = v183;
  BlueFin::GlSetBase::operator&=((uint64_t)v335, (uint64_t)&v350);
  BlueFin::GlSetBase::operator&=((uint64_t)v329, (uint64_t)&v347);
  return *((char *)v319 + 100);
}