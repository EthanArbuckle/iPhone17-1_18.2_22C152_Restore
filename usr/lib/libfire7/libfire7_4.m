uint64_t BlueFin::GlPePolaroid::PolaroidInnovPR(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, unsigned int a6, int a7, char a8, double a9, double a10)
{
  BOOL Metrics;
  uint64_t result;
  uint64_t v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  unsigned int v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  unsigned int v32;
  double v33;
  uint64_t v34;
  int v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  double v41;
  unsigned __int8 *MeMeas;
  uint64_t v43;
  int v44;
  double v45;
  double v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  double v50;
  BOOL v52;
  BOOL v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  uint64_t v68;
  const char *v69;
  int v70;
  unsigned __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  double v75;
  double v76;

  v74 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  LOBYTE(v71) = *(unsigned char *)a2;
  v72 = *(_DWORD *)(a2 + 4);
  v73 = *(_WORD *)(a2 + 8);
  Metrics = BlueFin::GlPePolaroid::GetMetrics(a1, (uint64_t)&v74, &v71, 0);
  result = 0;
  if (!Metrics) {
    return result;
  }
  v22 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v22 + 3320))
  {
    v23 = (double *)(v22 + 3312);
  }
  else
  {
    v24 = 0.0;
    if (*(_DWORD *)(a1 + 96) > 0xFu) {
      goto LABEL_7;
    }
    v23 = (double *)(v22 + 48);
  }
  v24 = *v23;
LABEL_7:
  v25 = v74 - v24;
  *a5 = v74 - v24;
  if (a7 == 2)
  {
    v32 = *(unsigned __int8 *)(a1 + 125);
    if (v32 < 0xB)
    {
      v33 = (double)(char)v32 + -3.0 + 1.0;
      v29 = v33 / 7.0 + 2.0;
      v30 = v33 < 1.0;
      v31 = 2.14285714;
      goto LABEL_13;
    }
    v69 = "m_scKfStateConfLowCnt >= 0 && m_scKfStateConfLowCnt <= Design::KF_CONF_CNT_MAX_THRESH";
    DeviceFaultNotify("glpe_polaroid.cpp", 687, "PolaroidInnovPR", (char)"m_scKfStateConfLowCnt >= 0 && m_scKfStateConfLowCnt <= Design::KF_CONF_CNT_MAX_THRESH");
    v70 = 687;
LABEL_119:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_polaroid.cpp", v70, v69);
  }
  v26 = 1.0;
  if (a7 != 1) {
    goto LABEL_16;
  }
  v27 = *(unsigned __int8 *)(a1 + 124);
  if (v27 >= 0xB)
  {
    v69 = "m_scKfStateConfMedCnt >= 0 && m_scKfStateConfMedCnt <= Design::KF_CONF_CNT_MAX_THRESH";
    DeviceFaultNotify("glpe_polaroid.cpp", 682, "PolaroidInnovPR", (char)"m_scKfStateConfMedCnt >= 0 && m_scKfStateConfMedCnt <= Design::KF_CONF_CNT_MAX_THRESH");
    v70 = 682;
    goto LABEL_119;
  }
  v28 = (double)(char)v27 + -3.0 + 1.0;
  v29 = v28 / 7.0 + 1.0;
  v30 = v28 < 1.0;
  v31 = 1.14285714;
LABEL_13:
  if (!v30) {
    v31 = v29;
  }
  v26 = v31 * v31;
LABEL_16:
  v34 = *(void *)(a1 + 32);
  v35 = *(_DWORD *)(v34 + 16);
  v36 = v76 + v75;
  if (v35 == 1)
  {
    v37 = sqrt(v36);
    v38 = v25 / v37;
    if (v38 < 0.0) {
      v38 = -v38;
    }
    v39 = v38 / sqrt(v26);
  }
  else
  {
    v39 = v25 / sqrt(v75 + v76 * v26);
    if (v39 < 0.0) {
      v39 = -v39;
    }
    v37 = sqrt(v36);
  }
  v40 = *(_DWORD *)(v34 + 8);
  *a3 = v39;
  v41 = (*(double *)(v22 + 24) + *(double *)(v22 + 24)) / v37;
  if (v41 > 2.0) {
    v41 = 2.0;
  }
  if (v41 < 1.0) {
    v41 = 1.0;
  }
  *a4 = v41;
  if (*(_DWORD *)(a1 + 96) <= 0xFu && *(double *)(v22 + 24) <= a10) {
    a10 = *(double *)(v22 + 24);
  }
  MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(a1 + 8), (const BlueFin::GlSignalId *)a2, 0, 0);
  v43 = 28;
  if (!*(unsigned char *)(a1 + 93)) {
    v43 = 20;
  }
  v44 = *(_DWORD *)&MeMeas[v43];
  v45 = 0.75;
  if ((v44 - 1) < 2) {
    v45 = 1.0;
  }
  v46 = a10 * v45;
  if ((a8 & 1) != 0 || *(_DWORD *)(a1 + 96) <= 0xFu)
  {
    if (*(unsigned char *)(a1 + 89)) {
      return *a3 < 1.0;
    }
    v56 = *a5;
    if (a9 >= 10.0)
    {
      v57 = -v56;
    }
    else
    {
      v57 = -v56;
      if (v56 >= 0.0) {
        v58 = *a5;
      }
      else {
        v58 = -v56;
      }
      if (v58 > v46) {
        return 0;
      }
    }
    if (v56 < 0.0) {
      v56 = v57;
    }
    v59 = v46 * 5.0;
    return v56 <= v59;
  }
  if (a9 >= 10.0)
  {
    if (*(unsigned __int8 *)(a1 + 116) > a6) {
      goto LABEL_69;
    }
    v64 = *a5;
    v65 = *(double *)(*(void *)(a1 + 48) + 24);
    if (*a5 <= fmin(v65, 20.0))
    {
      if (v35 != 1) {
        goto LABEL_69;
      }
      if (v64 < 0.0) {
        v64 = -v64;
      }
      if (v64 <= v65 * 3.0)
      {
LABEL_69:
        *a4 = 5.0;
        v60 = *(_DWORD *)(a1 + 120);
        v61 = *a5;
        if (a6 >= 9 && !v60)
        {
          v62 = -v61;
          if (v61 >= 0.0) {
            v62 = *a5;
          }
          v63 = 3.0;
          if (v62 > *(double *)(*(void *)(a1 + 48) + 24) * 5.0) {
            goto LABEL_77;
          }
        }
        v55 = 5.0;
        if (v60 == 2 || v61 < 0.0)
        {
          v63 = 7.5;
          if ((*(_DWORD *)(*(void *)(a1 + 32) + 8) - 1) <= 1)
          {
LABEL_77:
            *a4 = v63;
            v55 = v63;
          }
        }
        v50 = *a3;
        return v50 <= v55;
      }
    }
  }
  v47 = *(void *)(a1 + 32);
  if (!*(_DWORD *)(v47 + 16) || (v48 = *(_DWORD *)(v47 + 8)) == 0)
  {
    v59 = v46 / v37;
    if (v59 > 3.0) {
      v59 = 3.0;
    }
    if (v59 < 1.0) {
      v59 = 1.0;
    }
    goto LABEL_85;
  }
  result = 0;
  v49 = v35 & 0xFFFFFFFE;
  v50 = *a3;
  v52 = *a3 > 4.0 && v49 == 2;
  v54 = v50 > 3.0 && v40 != 6 && v35 == 1;
  if (!v54 && !v52)
  {
    if (v35 != 1) {
      goto LABEL_95;
    }
    if (v48 - 3 <= 2)
    {
      v55 = 1.5;
      return v50 <= v55;
    }
    if (v40 == 6)
    {
      v68 = 0x4010000000000000;
    }
    else
    {
LABEL_95:
      if (v48 <= 2)
      {
        if ((v44 | 4) == 4)
        {
          v59 = *a4;
          v66 = 0.5;
        }
        else
        {
          v59 = *a4;
          if (v44 == 3) {
            v66 = 1.0;
          }
          else {
            v66 = 1.5;
          }
        }
        if (v59 > v66) {
          v59 = v66;
        }
LABEL_85:
        *a4 = v59;
        v56 = *a3;
        return v56 <= v59;
      }
      if (v49 == 2) {
        return v50 <= 2.0 || v48 - 6 < 0xFFFFFFFD;
      }
      if (v48 != 3) {
        return 1;
      }
      v68 = 0x4008000000000000;
    }
    *(void *)a4 = v68;
    v50 = *a3;
    v55 = 4.0;
    return v50 <= v55;
  }
  return result;
}

BOOL BlueFin::GlPePolaroid::GetMetrics(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4)
{
  if (a4)
  {
    char v48 = 0;
    int v49 = -1;
    __int16 v50 = 575;
    BOOL v6 = BlueFin::GlPeNavUtil::PackSkfMeas_RR_SignalId(a1, (uint64_t)v45, (BlueFin::GlSignalId *)a3, (*(_DWORD *)(*(void *)(a1 + 32) + 8) - 1) < 2);
    if (v6)
    {
      long long v42 = xmmword_263BBC890;
      v41[0] = &v43;
      v41[1] = v44;
      v44[0] = 0;
      v44[1] = (char *)&v42 + 8;
      if (v47 == -1) {
        int v7 = 263361;
      }
      else {
        int v7 = 1217;
      }
      v38[1] = 0;
      v39[0] = v40;
      v39[1] = 0x100000000;
      v40[0] = 0;
      v40[1] = 0;
      v37[0] = v38;
      v37[1] = 0x100000000;
      v38[0] = 0;
      v35[0] = v36;
      v35[1] = 0xD00000000;
      memset(v36, 0, sizeof(v36));
      uint64_t v8 = a1 + *(void *)(*(void *)a1 - 24);
      uint64_t v9 = *(void *)(v8 + 88);
      uint64_t v10 = *(void *)(a1 + 16);
      int v11 = **(_DWORD **)(a1 + 24);
      double v12 = *(float *)(v8 + 208);
      double v13 = *(float *)(v8 + 216);
      double v14 = *(float *)(v8 + 224);
      double v15 = *(float *)(v8 + 232);
      v23[0] = v35;
      v23[1] = v8 + 8;
      v23[2] = v9;
      int v24 = v11;
      int v25 = 3;
      int v26 = v7;
      uint64_t v27 = v8 + 104;
      uint64_t v28 = 0;
      uint64_t v29 = v8 + 152;
      double v30 = v12;
      double v31 = v13;
      double v32 = v14;
      double v33 = v15;
      long long v34 = xmmword_263BBC830;
      v19[0] = v39;
      v19[1] = v37;
      v19[2] = v41;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      if ((*(unsigned int (**)(uint64_t, void *, void *, char *, _UNKNOWN **))(*(void *)v10 + 16))(v10, v23, v19, v45, &BlueFin::GlSet128::BIT0))
      {
        DeviceFaultNotify("glpe_polaroid.cpp", 1209, "GetMetrics", (char)"m_rotComputeZRH.Compute(otInp, otOut, &otSkfMeas, GlSet128::BIT0) == SKF_ZRH_OK");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_polaroid.cpp", 1209, "m_rotComputeZRH.Compute(otInp, otOut, &otSkfMeas, GlSet128::BIT0) == SKF_ZRH_OK");
      }
      *(double *)a2 = *(double *)(v39[0] + 8) - *(double *)(v37[0] + 8);
      BlueFin::GlPePolaroid::GetPInLOS(a1, (uint64_t)v41, 1);
      *(double *)(a2 + 8) = v46 * v46;
      *(void *)(a2 + 16) = v16;
    }
  }
  else if (((unint64_t)*(unsigned int *)(*(void *)(a1 + 1904) + 4 * ((__int16)a3[4] >> 5)) >> (a3[4] & 0x1F)))
  {
    uint64_t v17 = a1 + 24 * *(unsigned __int8 *)(a1 + a3[4] + 1328);
    *(void *)(a2 + 16) = *(void *)(v17 + 144);
    *(_OWORD *)a2 = *(_OWORD *)(v17 + 128);
    return 1;
  }
  else
  {
    GlCustomLog(14, "GetMetrics missing svId %d\n", *(unsigned __int8 *)a3);
    return 0;
  }
  return v6;
}

void BlueFin::GlPePolaroid::GetPInLOS(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  else if (a3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    BOOL v6 = *(double **)(v5 + 8);
    double v7 = v6[2];
    double v8 = v6[4];
    double v9 = v6[6];
    __float2 v10 = __sincosf_stret(*(float *)(a1 + 104));
    v6[2] = v8 * v10.__sinval + v7 * v10.__cosval;
    v6[4] = (v8 * v10.__cosval - v7 * v10.__sinval) * *(float *)(a1 + 108);
    v6[6] = -v9;
  }
  else
  {
    int v11 = *(double **)(*(void *)(a2 + 8) + 8);
    double v12 = v11[3];
    double v13 = v11[5];
    v31[0] = v11[1];
    v31[1] = v12;
    *(void *)&v31[16] = 0x300000001;
    v31[2] = v13;
    BlueFin::Matrix::mult((BlueFin::Matrix *)&v26, *(const BlueFin::Matrix **)(a1 + 72), 1, (const BlueFin::Matrix *)v31, v31[0]);
    int v14 = v30[16];
    uint64_t v5 = *(void *)(a2 + 8);
    double v15 = *(void **)(v5 + 8);
    v15[1] = v26;
    BOOL v16 = v14 == 1;
    if (v14 == 1) {
      uint64_t v17 = &v27;
    }
    else {
      uint64_t v17 = &v29;
    }
    v15[3] = *v17;
    v18 = &v28;
    if (!v16) {
      v18 = (uint64_t *)v30;
    }
    v15[5] = *v18;
  }
  uint64_t v19 = *(void *)(v5 + 8);
  double v20 = 0.0;
  for (uint64_t i = 1; i != 13; ++i)
  {
    double v22 = *(double *)(v19 + 8 * i);
    if (v22 != 0.0)
    {
      double v23 = 0.0;
      for (uint64_t j = 8; j != 104; j += 16)
      {
        float64x2_t v25 = vmulq_f64(*(float64x2_t *)(*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 8 * i) + j), *(float64x2_t *)(v19 + j));
        double v23 = v23 + v25.f64[0] + v25.f64[1];
      }
      double v20 = v20 + v23 * v22;
    }
  }
}

void BlueFin::GlPePolaroid::~GlPePolaroid(BlueFin::GlPePolaroid *this)
{
}

void virtual thunk to'BlueFin::GlPePolaroid::~GlPePolaroid(BlueFin::GlPePolaroid *this)
{
}

BlueFin::BigMatrix *BlueFin::BigMatrixDim<21,21>::BigMatrixDim(BlueFin::BigMatrix *this, int a2, int a3)
{
  v4 = (char *)this + 24;
  *((_OWORD *)this + 1) = xmmword_263BBC540;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 3560;
  *((void *)this + 445) = 0;
  for (uint64_t i = 8; i != 176; i += 8)
  {
    *(void *)(*((void *)this + 1) + i) = v4;
    v4 += 168;
  }
  BlueFin::BigMatrix::Clone(this, a2, a3);
  return this;
}

uint64_t BlueFin::GlPePolaroidGnssKF::Polaroid(BlueFin::GlPePolaroidGnssKF *this, double a2, int a3, double a4, int a5, const BlueFin::GlSignalId *a6, float a7, int a8)
{
  double v8 = fabs(a2);
  if (a4 >= 64.0 && (a4 >= 400.0 || a4 * 3.0 >= v8)) {
    goto LABEL_24;
  }
  double v10 = *(double *)this;
  if (a3 > 4) {
    a8 = 1;
  }
  if (a5 < 3001) {
    a8 = 1;
  }
  if (v10 > 400.0) {
    a8 = 1;
  }
  if (!a8) {
    double v10 = 400.0;
  }
  if (v8 > 400.0) {
    return 1;
  }
  if (a2 >= 0.0)
  {
    if (v8 <= v10) {
      goto LABEL_24;
    }
    return 1;
  }
  if (a2 * a2 > a7 * 9.0 || v8 > v10) {
    return 1;
  }
LABEL_24:
  float v14 = a2;
  BlueFin::GlPePolaroidGnssKF::UpdateFilter(this, 0, v14, a6);
  return 0;
}

float BlueFin::GlPePolaroidGnssKF::UpdateFilter(BlueFin::GlPePolaroidGnssKF *this, int a2, float a3, const BlueFin::GlSignalId *a4)
{
  float v4 = 0.0;
  if (a2) {
    float v4 = 1.0;
  }
  uint64_t v5 = *(unsigned __int8 *)a4;
  if ((v5 + 67) <= 0x43u)
  {
    DeviceFaultNotify("glpe_polaroidgnsskf.cpp", 119, "UpdateFilter", (char)"IS_SVID(*rotSignalId.GetSvId())");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_polaroidgnsskf.cpp", 119, "IS_SVID(*rotSignalId.GetSvId())");
  }
  uint64_t v6 = v5 - 1;
  double v7 = (float *)((char *)this + 4 * v5 + 764);
  float v8 = *v7;
  if (*v7 <= 600.0)
  {
    float v9 = -a3;
  }
  else
  {
    float v9 = -a3;
    if (a3 >= 0.0) {
      float v10 = a3;
    }
    else {
      float v10 = -a3;
    }
    if (v10 < 100.0)
    {
      *((_DWORD *)this + v6 + 4) = 0;
      *double v7 = 0.0;
      float v4 = 1.0;
      float v8 = 0.0;
    }
  }
  float v11 = *((float *)this + 380);
  *((float *)this + v6 + 4) = (float)(v11 * *((float *)this + v6 + 4)) + (float)((float)(1.0 - v11) * v4);
  if (a3 < 0.0) {
    a3 = v9;
  }
  *double v7 = v8 * v11;
  float result = (float)(v8 * v11) + (float)((float)(1.0 - *((float *)this + 380)) * a3);
  *double v7 = result;
  return result;
}

uint64_t BlueFin::GlPePosInfo::PackPosInfoTrack(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5, char a6, _DWORD *a7, uint64_t a8, double a9)
{
  if ((a6 & 1) == 0)
  {
    float v9 = *(float *)(a2 + 72);
    float v10 = a9;
    if (v9 < v10 || *(unsigned char *)(a2 + 68) == 0 || *(unsigned char *)(a2 + 80) == 0)
    {
      if (!*(unsigned char *)(result + 414))
      {
        if (*(unsigned char *)(result + 413)
          && (*(__int16 *)(*(void *)(result + 512) + 2) < 1
           || *(unsigned char *)(a2 + 68)
           || (*(_DWORD *)(a8 + 32) & 0x8000) != 0
           || !*(unsigned char *)(a8 + 49)))
        {
          float v21 = *(double *)(result + 352);
          *(float *)(a2 + 60) = v21;
        }
        else
        {
          *(unsigned char *)(a2 + 68) = 0;
        }
        goto LABEL_34;
      }
    }
    else if (a3 < 2 || a3 == 2 && (float v13 = a9 * 4.0, v9 < v13))
    {
      if (!*(unsigned char *)(*(void *)(result + 512) + 1))
      {
        float v14 = *(double *)(a5 + 24);
        *(float *)(a2 + 60) = v14;
      }
      char v15 = 1;
      goto LABEL_24;
    }
  }
  char v15 = 0;
LABEL_24:
  *(double *)(result + 352) = *(float *)(a2 + 60);
  if (!*(unsigned char *)(result + 413))
  {
    if ((char)*(_WORD *)(result + 400) < 1) {
      char v15 = 1;
    }
    if (v15)
    {
      *(_WORD *)(result + 400) = 1;
      int v16 = *(_DWORD *)(a2 + 12);
    }
    else
    {
      int v16 = *(_DWORD *)(a2 + 12);
      if (v16 - *(_DWORD *)(result + 408) > 1001) {
        __int16 v17 = 1;
      }
      else {
        __int16 v17 = *(_WORD *)(result + 400) + 1;
      }
      *(_WORD *)(result + 400) = v17;
    }
    *(_DWORD *)(result + 408) = v16;
    *(unsigned char *)(result + 413) = 1;
  }
LABEL_34:
  float v18 = flt_263BBCAA0[*a7 == 3];
  if (*a7 == 2) {
    float v18 = 0.17453;
  }
  float v19 = v18 * v18;
  if (v19 < *(float *)(a2 + 64)) {
    float v19 = *(float *)(a2 + 64);
  }
  *(float *)(a2 + 64) = v19;
  char v20 = *(unsigned char *)(result + 60) | *(unsigned char *)(a2 + 68);
  *(unsigned char *)(result + 60) = v20;
  if (v20)
  {
    if ((a4 & 1) == 0) {
      *(unsigned char *)(a2 + 68) = 1;
    }
  }
  return result;
}

uint64_t BlueFin::GlPePosInfo::PackPosInfoSpeed(uint64_t a1, uint64_t a2, BlueFin::GlSetBase *this, int a4, uint64_t a5, double a6, uint64_t a7, int a8, int a9)
{
  double v16 = sqrtf(*(float *)(a2 + 76)) * 0.5;
  if (v16 >= a6) {
    a6 = v16;
  }
  int v17 = *(_DWORD *)(a2 + 4);
  if (v17) {
    double v18 = a6;
  }
  else {
    double v18 = a6 * 0.25;
  }
  uint64_t result = BlueFin::GlSetBase::Cnt(this);
  if (result >= 2)
  {
    float v20 = *(float *)(a2 + 72);
  }
  else
  {
    float v20 = *(double *)(a5 + 48);
    if (*(float *)(a2 + 72) <= v20) {
      float v20 = *(float *)(a2 + 72);
    }
    *(float *)(a2 + 72) = v20;
  }
  *(unsigned char *)(a1 + 412) = 0;
  if (v18 > v20 && !*(unsigned char *)(a1 + 414) && a8 && *(_DWORD *)(a2 + 4))
  {
    *(_DWORD *)(a2 + 72) = 0;
    *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 12);
    *(void *)(a1 + 360) = 0;
    *(unsigned char *)(a1 + 412) = 1;
  }
  else if (*(unsigned char *)(a2 + 80))
  {
    if (a9)
    {
      float v20 = *(double *)(a5 + 48);
      *(float *)(a2 + 72) = v20;
      if (!v17)
      {
        double v21 = *(double *)(a1 + 360);
        BOOL v22 = v21 < v20;
        *(float *)&double v21 = v21;
        float v20 = (float)(flt_263BBCAA8[v22] * *(float *)&v21) + (float)((float)(1.0 - flt_263BBCAA8[v22]) * v20);
        *(float *)(a2 + 72) = v20;
      }
    }
    *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 12);
    *(double *)(a1 + 360) = v20;
  }
  else if (*(_DWORD *)(a2 + 12) - *(_DWORD *)(a1 + 404) <= 1001)
  {
    float v23 = *(double *)(a1 + 360);
    *(float *)(a2 + 72) = v23;
  }
  if (a4)
  {
    if (*(unsigned char *)(a2 + 80))
    {
      uint64_t v24 = *(void *)(a1 + 520);
      int v29 = 0;
      double v30 = v32;
      char v31 = 8;
      memset(v32, 0, 32);
      long long v33 = xmmword_263BBA380;
      int32x2_t v34 = vdup_n_s32(0x42C60000u);
      int v35 = 1120272384;
      BlueFin::stDops::stDops((uint64_t)v36, (uint64_t)&v29);
      uint64_t v37 = v24;
      uint64_t v25 = *(unsigned int *)(a2 + 12);
      BlueFin::GlSignalIdSet::GetSvIdSet(this, (uint64_t)v26);
      uint64_t result = BlueFin::GlPeDops::GetDops((uint64_t)v36, v25);
      if (v27 > 2.0 || v28 > 2.0) {
        *(unsigned char *)(a2 + 80) = 0;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 60))
  {
    *(unsigned char *)(a2 + 80) = 1;
  }
  return result;
}

void BlueFin::GlPePosInfo::PackPosInfoPos(uint64_t a1, uint64_t a2, int a3, char a4, char a5, int a6, uint64_t a7)
{
  if (fabsf(*(float *)(a2 + 72)) >= 0.277)
  {
    BOOL v12 = 0;
    uint64_t v10 = a1 + 352;
    *(unsigned char *)(a1 + 448) = 0;
  }
  else
  {
    uint64_t v10 = a1 + 352;
    int v11 = *(unsigned __int8 *)(a1 + 448);
    BOOL v12 = *(unsigned char *)(a1 + 448) != 0;
    int v13 = 1;
    *(unsigned char *)(a1 + 448) = 1;
    if (v11 && (a4 & 1) != 0)
    {
      char v14 = 0;
      goto LABEL_7;
    }
  }
  int v13 = 0;
  char v14 = !v12 | a5;
LABEL_7:
  double v15 = *(double *)(a2 + 32);
  float64x2_t v34 = *(float64x2_t *)(a2 + 16);
  double v35 = v15;
  int v16 = *(_DWORD *)(a7 + 32);
  BlueFin::lla2ned(v34.f64, (double *)(v10 + 16), 0, &v32);
  double v18 = v32;
  double v17 = v33;
  for (double i = atan2(v33, v32) - *(float *)(a2 + 60); i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  if (fabs(i) > 1.57079633)
  {
    BOOL v20 = sqrt(v18 * v18 + v17 * v17) < 30.0 && *(float *)(a2 + 72) < 1.25;
    BOOL v21 = v20 && (v16 & 0x8000) == 0;
    if (v21 && a3 != 0)
    {
      int v13 = 1;
LABEL_27:
      int v25 = *(_DWORD *)(a2 + 12);
      if (v25 - *(_DWORD *)(v10 + 64) <= 2000 && (a3 & 1) != 0)
      {
        unsigned int v26 = (unsigned __int16)++*(_WORD *)(v10 + 68);
        *(_DWORD *)(v10 + 64) = v25;
        if (v26 < 0x12D)
        {
          *(float64x2_t *)(v10 + 72) = v34;
          double v27 = v35;
        }
        else
        {
          double v27 = v35 * 0.00166389998 + *(double *)(v10 + 88) * 0.9983361;
          *(float64x2_t *)(v10 + 72) = vmlaq_f64(vmulq_f64(v34, (float64x2_t)vdupq_n_s64(0x3F5B42E700000000uLL)), (float64x2_t)vdupq_n_s64(0x3FEFF25E8C800000uLL), *(float64x2_t *)(v10 + 72));
        }
        *(double *)(v10 + 88) = v27;
        int v28 = 1;
      }
      else
      {
        *(float64x2_t *)(v10 + 72) = v34;
        *(double *)(v10 + 88) = v35;
        int v28 = 1;
        *(_WORD *)(v10 + 68) = 1;
        *(_DWORD *)(v10 + 64) = v25;
      }
      goto LABEL_35;
    }
  }
  if (v14)
  {
    *(_WORD *)(v10 + 68) = 0;
    float64x2_t v23 = v34;
    *(float64x2_t *)(v10 + 72) = v34;
    double v24 = v35;
    *(double *)(v10 + 88) = v35;
    *(float64x2_t *)(v10 + 16) = v23;
    *(double *)(v10 + 32) = v24;
    *(double *)(v10 + 40) = *(float *)(a2 + 780);
    return;
  }
  if (v13)
  {
    int v13 = 0;
    goto LABEL_27;
  }
  int v28 = 0;
  *(_WORD *)(v10 + 68) = 0;
  *(float64x2_t *)(v10 + 72) = v34;
  *(double *)(v10 + 88) = v35;
LABEL_35:
  BlueFin::lla2ned((double *)(v10 + 72), (double *)(v10 + 16), 0, &v36);
  float v29 = *(float *)(a2 + 780);
  float v30 = 5.0;
  if (v28)
  {
    if (*(unsigned __int16 *)(v10 + 68) >= 0x12Cu) {
      float v30 = 8.0;
    }
    if (v13) {
      float v30 = 30.0;
    }
  }
  else
  {
    float v30 = fmaxf(fminf(v29, 10.0), 5.0);
  }
  if (a6 == 1 || sqrt(v37 * v37 + v36 * v36) > v30)
  {
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v10 + 72);
    double v31 = v29;
    *(void *)(v10 + 32) = *(void *)(v10 + 88);
    *(double *)(v10 + 40) = v31;
  }
  else
  {
    double v31 = *(double *)(v10 + 40);
  }
  if (v31 < 50.0) {
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(v10 + 16);
  }
}

void BlueFin::PESmoothTrackStatus::update(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = (char)(*(unsigned char *)(a1 + 1) + 1);
  if (v4 <= 9)
  {
    BOOL v5 = *(unsigned char *)a1 == 0;
  }
  else
  {
    BOOL v5 = 0;
    int v4 = 0;
    *(unsigned char *)a1 = 1;
  }
  *(_DWORD *)(a1 + 4 * v4 + 248) = a3;
  uint64_t v6 = a1 + 24 * v4;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)a2;
  *(void *)(v6 + 24) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 1) = v4;
  if (v4 < 9) {
    int v7 = v4 + 1;
  }
  else {
    int v7 = 0;
  }
  if (v5
    || (v7 & 0x80) != 0
    || (a3 - *(_DWORD *)(a1 + 4 * v7 + 248)) >= 0x2EE1
    || (BlueFin::lla2ned((double *)a2, (double *)(a1 + 24 * v7 + 8), 0, &v21),
        float v8 = sqrt(v22 * v22 + v21 * v21),
        v8 < 10.0))
  {
    *(unsigned char *)(a1 + 2) = 0;
  }
  else
  {
    BlueFin::lla2ned((double *)(a1 + 24 * *(char *)(a1 + 1) + 8), (double *)(a1 + 24 * v7 + 8), 0, &v21);
    double v9 = atan2(v22, v21);
    char v10 = 0;
    if (v7 <= 8u) {
      int v11 = v7 + 1;
    }
    else {
      int v11 = 0;
    }
    double v12 = 0.0;
    do
    {
      if (v11 == v7) {
        break;
      }
      BlueFin::lla2ned((double *)(a1 + 24 * (char)v11 + 8), (double *)(a1 + 24 * v7 + 8), 0, &v19);
      double v14 = v19;
      double v13 = v20;
      long double v15 = atan2(v20, v19);
      double v12 = v12 + sqrt(v14 * v14 + v13 * v13) * sin(v9 - v15);
      ++v10;
      int v16 = (char)(v11 + 1) <= 9 ? v11 + 1 : 0;
      BOOL v17 = *(unsigned __int8 *)(a1 + 1) == v11;
      int v11 = v16;
    }
    while (!v17);
    if (v10 >= 1) {
      double v12 = v12 / (double)v10;
    }
    *(unsigned char *)(a1 + 2) = v12 <= 10.0;
    float v18 = v9 * 57.2957795;
    *(float *)(a1 + 4) = v18;
  }
}

float BlueFin::GlPePosInfo::CalculateSpeedFromDeltaPos(uint64_t a1, uint64_t a2, _DWORD *a3, float *a4)
{
  float v8 = *a4;
  float v9 = *a4;
  if (*(_DWORD *)(a1 + 480))
  {
    int v10 = *(_DWORD *)(a1 + 488);
    BlueFin::lla2ned((double *)(a1 + 456), (double *)a2, 0, &v17);
    float v11 = (double)(*a3 - *(_DWORD *)(a1 + 480)) * 0.001;
    float v9 = v8;
    if (v11 > 0.0)
    {
      float v12 = sqrt(v18 * v18 + v17 * v17);
      float v13 = v12 / v11;
      float v14 = v8 + v8;
      if ((float)(v8 + v8) < 3.0) {
        float v14 = 3.0;
      }
      if (v13 >= v14)
      {
        unsigned int v15 = 1;
        float v9 = v8;
      }
      else
      {
        float v9 = (float)((float)(1.0 - (float)(2.0 / (float)(v10 + 3))) * *(float *)(a1 + 484))
           + (float)(v13 * (float)(2.0 / (float)(v10 + 3)));
        unsigned int v15 = *(_DWORD *)(a1 + 488) + 1;
      }
      *(float *)(a1 + 484) = v9;
      if (v15 >= *(_DWORD *)(a1 + 492)) {
        unsigned int v15 = *(_DWORD *)(a1 + 492);
      }
      *(_DWORD *)(a1 + 488) = v15;
    }
  }
  if (v8 <= 0.5)
  {
    *(void *)(a1 + 480) = 0xBF80000000000000;
    *(_DWORD *)(a1 + 488) = 1;
  }
  else
  {
    *(_OWORD *)(a1 + 456) = *(_OWORD *)a2;
    *(void *)(a1 + 472) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 480) = *a3;
    if (*(float *)(a1 + 484) < 0.0) {
      *(float *)(a1 + 484) = v8;
    }
  }
  float result = (float)(v8 * 0.25) + (float)(v9 * 0.75);
  *a4 = result;
  return result;
}

double BlueFin::GlPePosInfo::CalculateSpeedFromDeltaPosSwimming(uint64_t a1, double *a2, int *a3, float *a4)
{
  if (*(_DWORD *)(a1 + 480))
  {
    BlueFin::lla2ned((double *)(a1 + 456), a2, 0, &v15);
    int v8 = *a3;
    float v9 = (double)(*a3 - *(_DWORD *)(a1 + 480)) * 0.001;
    float v10 = *a4;
    if (v9 > 0.0)
    {
      float v11 = sqrt(v16 * v16 + v15 * v15);
      float v12 = v11 / v9;
      if (v10 >= v12) {
        float v10 = v12;
      }
      float v13 = *(float *)(a1 + 484);
      if (v13 >= 0.0) {
        float v10 = (float)(v13 * 0.967) + (float)(v10 * 0.033);
      }
      *a4 = v10;
    }
    *(float *)(a1 + 484) = v10;
  }
  else
  {
    int v8 = *a3;
  }
  *(_OWORD *)(a1 + 456) = *(_OWORD *)a2;
  double result = a2[2];
  *(double *)(a1 + 472) = result;
  *(_DWORD *)(a1 + 480) = v8;
  return result;
}

unsigned __int8 *BlueFin::GlPePosInfo::PackPosInfoSvIds(uint64_t a1, const void **a2, const void **a3, const void **a4, const void **a5, uint64_t a6)
{
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v38, v40, 0x13u, a3);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v35, v37, 0x13u, a4);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v32, v34, 0x13u, a2);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v29, v31, 0x13u, a5);
  BlueFin::GlSetBase::operator=(a6 + 624, a1);
  long long v11 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)(a6 + 652) = *(_OWORD *)(a1 + 28);
  *(_OWORD *)(a6 + 636) = v11;
  if (!*(unsigned char *)(a6 + 8))
  {
    bzero(v38, ((4 * v39 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(v35, ((4 * v36 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(v32, ((4 * v33 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(v29, ((4 * v30 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    double v16 = (void **)(a6 + 624);
    goto LABEL_10;
  }
  float v12 = *(float *)(a6 + 780);
  if (v12 > 8.0)
  {
    unsigned int v13 = 0;
    float v14 = (char *)v29 + 4 * v30 - 4;
    do
    {
      if (*v14)
      {
        unsigned int v15 = *v14 - (((*v14 >> 1) & 0x5B6DB6DB) + ((*v14 >> 2) & 0x9249249));
        unsigned int v13 = ((v15 + (v15 >> 3)) & 0xC71C71C7) + v13 - 63 * (((v15 + (v15 >> 3)) & 0xC71C71C7) / 0x3F);
      }
      --v14;
    }
    while (v14 >= v29);
    if ((_WORD)v13)
    {
      GlCustomLog(15, "Clear DGNSS designation due to high estimated accuracy %lf\n", v12);
      double v16 = &v29;
LABEL_10:
      bzero(*v16, ((4 * *((unsigned __int8 *)v16 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    }
  }
  double result = (unsigned __int8 *)BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(a6 + 624));
  unsigned int v18 = 0;
  *(_WORD *)(a6 + 106) = result;
  long double v19 = (char *)v32 + 4 * v33 - 4;
  do
  {
    if (*v19)
    {
      unsigned int v20 = *v19 - (((*v19 >> 1) & 0x5B6DB6DB) + ((*v19 >> 2) & 0x9249249));
      unsigned int v18 = ((v20 + (v20 >> 3)) & 0xC71C71C7) + v18 - 63 * (((v20 + (v20 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v19;
  }
  while (v19 >= v32);
  if ((_WORD)v18)
  {
    uint64_t v21 = 0;
    long double v22 = (_OWORD *)(a6 + 368);
    do
    {
      uint64_t v23 = *(void *)(a1 + 496);
      BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)&v38, v21, (uint64_t)v28);
      BlueFin::GlPeAsstMgr::ConvertSvIdSet2ConstellMask(v23, (uint64_t)v28, v22 - 16);
      uint64_t v24 = *(void *)(a1 + 496);
      BlueFin::GlSignalIdSet::GetSvIdSetBySignalIndex((BlueFin::GlSetBase *)&v35, v21, (uint64_t)v28);
      BlueFin::GlPeAsstMgr::ConvertSvIdSet2ConstellMask(v24, (uint64_t)v28, v22);
      ++v21;
      v22 += 4;
    }
    while (v21 != 4);
    uint64_t v25 = *(void *)(a1 + 496);
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v29, (uint64_t)v28);
    double result = BlueFin::GlPeAsstMgr::ConvertSvIdSet2ConstellMask(v25, (uint64_t)v28, (_OWORD *)(a6 + 672));
  }
  if (*(_DWORD *)v29) {
    goto LABEL_20;
  }
  if (v30 >= 2uLL)
  {
    if (*((_DWORD *)v29 + 1))
    {
LABEL_20:
      *(_WORD *)(a6 + 736) = -1;
      *(_DWORD *)(a6 + 740) = 0;
      return result;
    }
    uint64_t v26 = 2;
    while (v30 != v26)
    {
      if (*((_DWORD *)v29 + v26++))
      {
        if (v26 - 1 < (unint64_t)v30) {
          goto LABEL_20;
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPePosReport::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!v4 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  if (v3) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = 5;
  }
  if (v7 >= 6)
  {
    DeviceFaultNotify("glpe_posreport.cpp", 128, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 5");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_posreport.cpp", 128, "ucVersion >= 1 && ucVersion <= 5");
  }
  int v20 = 92;
  char v21 = v7;
  uint64_t v22 = 0x1000000000000;
  long double v19 = &unk_270EBA2F0;
  char v23 = v7;
  if (*(unsigned char *)(v2 + 56))
  {
    DeviceFaultNotify("glpe_posreport.cpp", 131, "SerializeImpl", (char)"!m_bHaveOptionalSection");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_posreport.cpp", 131, "!m_bHaveOptionalSection");
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, 0);
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v6 + 60));
  BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, *(_DWORD *)(v6 + 8));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 64));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 72));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 80));
  BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v19, *(_WORD *)(v6 + 88));
  if (v7 > 3)
  {
    if (v7 == 4)
    {
      for (uint64_t i = 0; i != 64; i += 8)
        BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v19, *(void *)(v6 + 96 + i));
      for (uint64_t j = 0; j != 64; j += 8)
        BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v19, *(void *)(v6 + 352 + j));
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, 4);
      uint64_t v13 = 0;
      uint64_t v14 = v6 + 96;
      do
      {
        for (uint64_t k = 0; k != 64; k += 8)
          BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v19, *(void *)(v14 + k));
        ++v13;
        v14 += 64;
      }
      while (v13 != 4);
      uint64_t v16 = 0;
      uint64_t v17 = v6 + 352;
      do
      {
        for (uint64_t m = 0; m != 64; m += 8)
          BlueFin::GlSysLogEntry::PutU64((BlueFin::GlSysLogEntry *)&v19, *(void *)(v17 + m));
        ++v16;
        v17 += 64;
      }
      while (v16 != 4);
    }
  }
  else
  {
    for (uint64_t n = 0; n != 64; n += 8)
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, *(_DWORD *)(v6 + 96 + n));
    for (iuint64_t i = 0; ii != 64; ii += 8)
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, *(_DWORD *)(v6 + 352 + ii));
  }
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 608));
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 616));
  if (v7 >= 2)
  {
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v19, *(_WORD *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 24));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v19, *(_WORD *)(v6 + 32));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v6 + 34));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v6 + 35));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v6 + 36));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *(unsigned char *)(v6 + 37));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 40));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v19, *(double *)(v6 + 48));
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v19, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPePosReport::Deserialize(BlueFin::GlPePosReport *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 92 || *((unsigned __int8 *)a2 + 12) - 6 < 0xFFFFFFFB) {
    return 0;
  }
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((unsigned char *)this + 56) = U8 != 0;
  if (U8)
  {
    DeviceFaultNotify("glpe_posreport.cpp", 215, "Deserialize", (char)"!m_bHaveOptionalSection");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_posreport.cpp", 215, "!m_bHaveOptionalSection");
  }
  *((_DWORD *)this + 15) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((double *)this + 8) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 9) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 10) = BlueFin::GlSysLogEntry::GetD64(a2);
  __int16 S16 = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_OWORD *)this + 6) = 0u;
  unsigned int v7 = (char *)this + 96;
  *((_WORD *)this + 44) = S16;
  int v8 = (char *)this + 352;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  unsigned int v9 = *((unsigned __int8 *)a2 + 12);
  if (v9 > 3)
  {
    if (v9 == 4)
    {
      for (uint64_t i = 0; i != 64; i += 8)
        *(void *)&v7[i] = BlueFin::GlSysLogEntry::GetU64(a2);
      for (uint64_t j = 0; j != 64; j += 8)
        *(void *)&v8[j] = BlueFin::GlSysLogEntry::GetU64(a2);
    }
    else
    {
      unsigned int v14 = BlueFin::GlSysLogEntry::GetU8(a2);
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v14;
        do
        {
          for (uint64_t k = 0; k != 64; k += 8)
            *(void *)&v7[k] = BlueFin::GlSysLogEntry::GetU64(a2);
          ++v15;
          v7 += 64;
        }
        while (v15 != v16);
        for (uint64_t m = 0; m != v16; ++m)
        {
          for (uint64_t n = 0; n != 64; n += 8)
            *(void *)&v8[n] = BlueFin::GlSysLogEntry::GetU64(a2);
          v8 += 64;
        }
      }
    }
  }
  else
  {
    for (iuint64_t i = 0; ii != 64; ii += 8)
      *(void *)&v7[ii] = BlueFin::GlSysLogEntry::GetU32(a2);
    for (juint64_t j = 0; jj != 64; jj += 8)
      *(void *)&v8[jj] = BlueFin::GlSysLogEntry::GetU32(a2);
  }
  *((double *)this + 76) = BlueFin::GlSysLogEntry::GetD64(a2);
  *((double *)this + 77) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned char *)a2 + 12) == 1)
  {
    *((_WORD *)this + 8) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 3) = 0;
    *(void *)((char *)this + 30) = 0;
    double D64 = 4287767300.0;
  }
  else
  {
    *((_WORD *)this + 8) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((double *)this + 3) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((_WORD *)this + 16) = BlueFin::GlSysLogEntry::GetU16(a2);
    *((unsigned char *)this + 34) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 35) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 36) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 37) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((double *)this + 5) = BlueFin::GlSysLogEntry::GetD64(a2);
    double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  *((double *)this + 6) = D64;
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 303);
  return 1;
}

void BlueFin::GlPePosReport::~GlPePosReport(BlueFin::GlPePosReport *this)
{
}

uint64_t BlueFin::GlPeProcessNoise::CalcQValues(uint64_t a1, uint64_t *a2, float64x2_t *a3, float64x2_t *a4, double *a5, float64x2_t *a6)
{
  uint64_t v13 = *(void *)(a1 + 208);
  uint64_t v12 = *(void *)(a1 + 216);
  int v14 = *(_DWORD *)(v12 + 8);
  BOOL v16 = v14 == 6 && *((_DWORD *)a2 + 10) > 0x7D0u;
  if (*(__int16 *)(v13 + 2) < 1)
  {
    BOOL v18 = 0;
  }
  else
  {
    double v17 = vabdd_f64(*(double *)(v13 + 64), *(float *)(a2[1] + 176));
    if (v17 > 3.14159265) {
      double v17 = 6.28318531 - v17;
    }
    BOOL v18 = v17 > 0.122173048;
    if ((v14 - 1) <= 1)
    {
      BOOL v19 = *(unsigned char *)(v13 + 45) == 0;
      goto LABEL_14;
    }
  }
  BOOL v19 = 0;
LABEL_14:
  int v20 = *(_DWORD *)(v12 + 16);
  unsigned int v21 = v14 - 3;
  BOOL v23 = v20 == 1 && v21 < 4;
  double v24 = 0.5;
  double v25 = 1.0;
  if (!v16 && !v18 && !v19 && !v23 && v14 != 6)
  {
    if (v21 <= 2 && (*(unsigned char *)(a2[4] + 1) & 0x10) != 0)
    {
      double v24 = 1.5;
LABEL_32:
      double v25 = 0.1;
      goto LABEL_33;
    }
    double v26 = sqrt(*(double *)(a2[1] + 112) * *(double *)(a2[1] + 112) + *(double *)(a2[1] + 104) * *(double *)(a2[1] + 104));
    double v24 = 0.5;
    if (v26 > 10.0)
    {
      double v25 = 0.5;
      goto LABEL_33;
    }
    double v25 = 0.25;
    if (v26 <= 3.0)
    {
      if (v26 < 0.278)
      {
        double v25 = 0.01;
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
LABEL_33:
  if (v25 >= v24) {
    double v27 = v25;
  }
  else {
    double v27 = v24;
  }
  uint64_t v28 = *a2;
  double v29 = sqrt(*(double *)(*a2 + 112) * *(double *)(*a2 + 112) + *(double *)(*a2 + 104) * *(double *)(*a2 + 104));
  if (*(_DWORD *)(*a2 + 204) == 1)
  {
    double v30 = (v29 - *(double *)(a1 + 152)) * 0.497 + *(double *)(a1 + 160) * 0.503;
    *(double *)(a1 + 152) = v29;
    *(double *)(a1 + 160) = v30;
  }
  else
  {
    double v30 = *(double *)(a1 + 160);
  }
  double v31 = fabs(v30);
  if (v31 < v25 || (double v25 = v27, v31 > v27))
  {
    if (v30 <= 0.0) {
      double v25 = -v25;
    }
    *(double *)(a1 + 160) = v25;
  }
  int v32 = *(_DWORD *)a2[4];
  double v33 = 100.0;
  if ((v32 & 0x100) != 0) {
    double v33 = 25.0;
  }
  if (v29 < 1.0) {
    double v33 = 25.0;
  }
  float64x2_t v34 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0);
  if ((v32 & 0x1000) != 0)
  {
    float64x2_t v35 = vaddq_f64(v34, *a6);
    unsigned __int8 v36 = a6;
  }
  else
  {
    float64x2_t v35 = vaddq_f64(v34, *a4);
    unsigned __int8 v36 = a4;
  }
  *unsigned __int8 v36 = v35;
  v36[1].f64[0] = v33 + v36[1].f64[0];
  if (*(float *)(v28 + 248) >= *(float *)(v28 + 80)) {
    float v37 = *(float *)(v28 + 248);
  }
  else {
    float v37 = *(float *)(v28 + 80);
  }
  if (*(float *)(v28 + 252) >= *(float *)(v28 + 84)) {
    float v38 = *(float *)(v28 + 252);
  }
  else {
    float v38 = *(float *)(v28 + 84);
  }
  BlueFin::lla2ned((double *)(v28 + 8), (double *)(a2[1] + 8), 0, v175.f64);
  float64x2_t v39 = v175;
  float64x2_t v177 = v175;
  double v40 = v176;
  *(double *)&long long v178 = v176;
  BlueFin::ned2hlu((long long *)&v177, (const BlueFin::Matrix *)a2[3], &v175);
  int v41 = *(_DWORD *)a2[4];
  if (v37 >= 400.0)
  {
    if ((v41 & 0x1000) != 0) {
      f64 = (void *)a6->f64;
    }
    else {
      f64 = (void *)a4->f64;
    }
    void *f64 = 0;
    f64[1] = 0;
  }
  uint64_t v43 = *(void *)(a1 + 216);
  int v44 = *(_DWORD *)(v43 + 16);
  float v45 = 50.0;
  if (v37 >= 50.0) {
    float v46 = v37;
  }
  else {
    float v46 = 50.0;
  }
  if (v38 >= 50.0) {
    float v45 = v38;
  }
  if (v44 == 1)
  {
    float v46 = v37;
    float v45 = v38;
  }
  if ((v41 & 0x1001) == 1) {
    float64x2_t v175 = vnegq_f64(v175);
  }
  *(double *)&uint64_t v47 = (float)(v46 * v46);
  if ((v41 & 0x1000) != 0)
  {
    _D5 = v39.f64[1] - a5[1];
    _Q1 = vdivq_f64(*a6, vaddq_f64(*a6, (float64x2_t)vdupq_lane_s64(v47, 0)));
    __asm { FMLA            D3, D5, V1.D[1] }
    *a5 = vmlad_n_f64(*a5, v39.f64[0] - *a5, _Q1.f64[0]);
    *((void *)a5 + 1) = _D3;
    *a6 = vmlsq_f64(*a6, *a6, _Q1);
    float64_t v55 = a6[1].f64[0] / (a6[1].f64[0] + (float)(v45 * v45));
    a5[2] = a5[2] + v55 * (v40 - a5[2]);
    a6[1].f64[0] = a6[1].f64[0] - v55 * a6[1].f64[0];
  }
  else
  {
    float64x2_t v48 = vdivq_f64(*a4, vaddq_f64(*a4, (float64x2_t)vdupq_lane_s64(v47, 0)));
    *a3 = vmlaq_f64(*a3, vsubq_f64(v175, *a3), v48);
    *a4 = vmlsq_f64(*a4, *a4, v48);
    float64_t v49 = a4[1].f64[0] / (a4[1].f64[0] + (float)(v45 * v45));
    a3[1].f64[0] = a3[1].f64[0] + v49 * (v176 - a3[1].f64[0]);
    a4[1].f64[0] = a4[1].f64[0] - v49 * a4[1].f64[0];
  }
  uint64_t v56 = *a2;
  uint64_t v57 = a2[1];
  double v58 = *(float *)(v57 + 176);
  for (double i = *(float *)(*a2 + 176) - v58; i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  if (i < 0.0) {
    double i = -i;
  }
  float v60 = *(float *)(a1 + 184) + 0.030462;
  float v61 = i;
  float v62 = v60
      / (float)(v60
              + (float)((float)(*(float *)(v56 + 184) * *(float *)(v56 + 184))
                      + (float)(*(float *)(v57 + 184) * *(float *)(v57 + 184))));
  float v63 = *(float *)(a1 + 180) + (float)(v62 * (float)(v61 - *(float *)(a1 + 180)));
  *(float *)(a1 + 180) = v63;
  *(float *)(a1 + 184) = v60 * (float)(1.0 - v62);
  double v64 = sqrt(*(double *)(v57 + 112) * *(double *)(v57 + 112) + *(double *)(v57 + 104) * *(double *)(v57 + 104));
  float v65 = *(float *)(v56 + 128);
  double v66 = v64;
  if (v65 <= 300.0) {
    double v66 = sqrt(*(double *)(v56 + 112) * *(double *)(v56 + 112) + *(double *)(v56 + 104) * *(double *)(v56 + 104));
  }
  unsigned int v67 = *(_DWORD *)(v43 + 8);
  if (v67 > 6)
  {
    float v70 = 0.69813;
  }
  else
  {
    float v68 = v66;
    if (((1 << v67) & 0x79) == 0)
    {
      float v72 = 0.0;
      float v74 = 0.0;
      if (v68 >= 0.25)
      {
        if (v68 >= 1.0)
        {
          float v74 = 0.69813;
        }
        else
        {
          double v75 = fmax(v68, 0.25);
          if (v75 >= 1.0) {
            double v76 = 0.69813168;
          }
          else {
            double v76 = (v75 + -0.25) * 0.69813168 / 0.75 + 0.0;
          }
          float v74 = v76;
        }
      }
      float v70 = 0.2618;
      if (sqrt(*(double *)(v56 + 112) * *(double *)(v56 + 112) + *(double *)(v56 + 104) * *(double *)(v56 + 104)) <= 1.5) {
        float v70 = v74;
      }
      uint64_t v71 = *(void *)(a1 + 208);
      if (*(unsigned char *)(v71 + 1)) {
        float v72 = v70;
      }
      goto LABEL_102;
    }
    float v69 = v68 / 5.0;
    float v70 = 4.9033 / v68;
    if (v69 < v70) {
      float v70 = v69;
    }
  }
  uint64_t v71 = *(void *)(a1 + 208);
  float v72 = 0.0;
  if (*(unsigned char *)(v71 + 1)) {
    float v72 = v70;
  }
  if (v67 - 1 >= 2)
  {
    v73 = (unsigned char *)a2[4];
    goto LABEL_105;
  }
LABEL_102:
  v73 = (unsigned char *)a2[4];
  if ((v44 & 0xFFFFFFFE) == 2 && (*v73 & 0x20) != 0) {
    float v72 = 0.69813;
  }
LABEL_105:
  if (v72 >= v63) {
    float v63 = v72;
  }
  if (v63 >= v70) {
    float v77 = v70;
  }
  else {
    float v77 = v63;
  }
  double v78 = *(double *)(a1 + 160);
  unsigned int v79 = *((_DWORD *)a2 + 10);
  unsigned int v80 = v67 - 1;
  if (v67 - 1 >= 2)
  {
    unsigned int v82 = v67 - 3;
    if (v67 - 3 > 2 || v79 < 0x3E9)
    {
      if (v67 == 6)
      {
        double v87 = 1.0;
        double v88 = 0.0;
        if (v78 < 0.0) {
          double v88 = -1.0;
        }
        if (v78 <= 0.0) {
          double v87 = v88;
        }
        double v89 = 10.0;
        if (v78 <= 10.0) {
          double v89 = *(double *)(a1 + 160);
        }
        double v90 = v89 * v87;
        if (v79 >= 0x3E9) {
          double v78 = v90;
        }
      }
    }
    else
    {
      double v85 = 1.0;
      double v86 = 0.0;
      if (v78 < 0.0) {
        double v86 = -1.0;
      }
      if (v78 <= 0.0) {
        double v85 = v86;
      }
      if (v78 > 5.0) {
        double v78 = 5.0;
      }
      double v78 = v78 * v85;
    }
    BOOL v83 = 0;
    BOOL v84 = v44 != 1;
  }
  else
  {
    if ((v44 - 4) >= 0xFFFFFFFE && (*(_DWORD *)v73 & 0x10) != 0) {
      double v78 = v78 * 0.25;
    }
    unsigned int v82 = v67 - 3;
    BOOL v83 = (*(_DWORD *)v73 & 8) == 0;
    BOOL v84 = v44 != 1;
    if (v44 == 1) {
      BOOL v84 = 0;
    }
    else {
      BOOL v83 = 0;
    }
  }
  int v91 = *(unsigned __int16 *)(v71 + 2);
  if (*(_WORD *)(v71 + 2) || v79 > 0x7D0 || v83)
  {
    BOOL v92 = v67 == 6 && *(_DWORD *)(v71 + 12) <= v79;
    double v93 = 1.0;
    if (*(_WORD *)(v71 + 2)) {
      goto LABEL_156;
    }
  }
  else
  {
    BOOL v92 = 0;
    if (v44 == 7) {
      double v93 = 1.0;
    }
    else {
      double v93 = 0.25;
    }
  }
  char v95 = v67 != 6 || v84;
  if ((v95 & 1) == 0)
  {
    float v77 = fmaxf(v77, 0.087266);
    double v93 = 1.0;
  }
LABEL_156:
  unint64_t v96 = *(unsigned int *)v73;
  double v97 = v78 * 0.5 * (v78 * 0.5);
  double v98 = v78 * v78;
  if ((v96 & 0x80) != 0) {
    double v99 = 0.04;
  }
  else {
    double v99 = 1.0;
  }
  if ((v96 & 0x1800) == 0x800 && (__int16)v91 >= 1 && (v96 & 0x600) == 0x600) {
    double v97 = *((double *)a2 + 6) * v77 * (*((double *)a2 + 6) * v77) + *((double *)a2 + 7) * *((double *)a2 + 7);
  }
  if (v82 > 2)
  {
    double v102 = 1.0;
    double v104 = 1.0;
    double v101 = 1.0;
    if (v67 == 6)
    {
      double v102 = 10.0;
      double v101 = 1.2;
      double v104 = 10.0;
    }
  }
  else
  {
    double v100 = 5.0;
    double v101 = 1.0;
    if ((v96 & 0x1000) != 0) {
      double v102 = 5.0;
    }
    else {
      double v102 = 1.0;
    }
    double v103 = 1.2;
    if ((v96 & 0x1000) != 0) {
      double v101 = 1.2;
    }
    double v104 = 0.5;
    if (v64 >= 0.277)
    {
      double v104 = 3.0;
      if ((v96 & 0x1000) == 0)
      {
        if ((v96 & 0x200) == 0)
        {
          double v103 = 1.0;
          goto LABEL_195;
        }
        double v93 = v93 * 0.25;
        double v101 = 1.0;
        double v104 = 2.0;
        LODWORD(v105) = 1;
        goto LABEL_177;
      }
      goto LABEL_187;
    }
  }
  if ((v96 & 0x1000) == 0)
  {
    uint64_t v105 = (v96 >> 9) & 1;
LABEL_177:
    double v106 = 0.5;
    if ((v96 & 0x400) == 0) {
      double v106 = v104;
    }
    double v107 = 0.25;
    if ((v96 & 0x400) == 0) {
      double v107 = v101;
    }
    if (!v105)
    {
      double v106 = v104;
      double v107 = v101;
    }
    if ((__int16)v91 < 1)
    {
      double v103 = v101;
    }
    else
    {
      double v104 = v106;
      double v103 = v107;
    }
    goto LABEL_195;
  }
  double v103 = v101;
  double v100 = v102;
LABEL_187:
  if (*(unsigned char *)(v56 + 240) && (v96 & 0x200) == 0 && !*(unsigned char *)(v71 + 1))
  {
    double v171 = sqrt(*(double *)(v56 + 112) * *(double *)(v56 + 112) + *(double *)(v56 + 104) * *(double *)(v56 + 104));
    double v172 = v58;
    double v173 = v99;
    float v174 = v77;
    long double v108 = sin(fmin(v77, 0.17453292));
    double v58 = v172;
    double v99 = v173;
    float v77 = v174;
    double v109 = v108 * v171 * (v108 * v171);
    if (v109 < v103) {
      double v109 = v103;
    }
    if (v109 >= v100) {
      double v103 = v100;
    }
    else {
      double v103 = v109;
    }
  }
LABEL_195:
  double v110 = v98 * 0.5 * 1.0;
  double v111 = 10.5;
  if ((v96 & 4) == 0) {
    double v111 = v104;
  }
  if (v111 >= v97) {
    double v97 = v111;
  }
  if ((v96 & 4) != 0)
  {
    if (v65 > 100000.0 || v65 > 500.0)
    {
      double v110 = v97 * 0.5;
      double v112 = v97;
      if ((v96 & 0x1000) != 0) {
        goto LABEL_206;
      }
    }
    else
    {
      double v112 = v98 * 100.0;
      if ((v96 & 0x1000) != 0) {
        goto LABEL_206;
      }
    }
  }
  else
  {
    double v112 = v98;
    if ((v96 & 0x1000) != 0) {
      goto LABEL_206;
    }
  }
  if ((~(_WORD)v96 & 0x600) == 0 && (__int16)v91 > 0) {
    double v110 = v110 * 0.5;
  }
LABEL_206:
  if (v80 <= 1 && (v44 & 0xFFFFFFFE) == 2 && (v96 & 0x20) != 0) {
    double v112 = v97;
  }
  double v114 = v98 * v99;
  if ((v96 & 0x1000) != 0)
  {
    if (v103 >= v112) {
      double v125 = v103;
    }
    else {
      double v125 = v112;
    }
    double v126 = 0.0;
    if ((v96 & 2) != 0) {
      double v126 = v58;
    }
    else {
      double v93 = 1.0;
    }
    __double2 v129 = __sincos_stret(v126);
    double cosval = v129.__cosval;
    double sinval = v129.__sinval;
    v130 = *(double **)a1;
    v130[1] = v129.__sinval * v129.__sinval * (v93 * v97) + v97 * (v129.__cosval * v129.__cosval);
    v130[2] = v129.__cosval * v129.__cosval * (v93 * v97) + v97 * (v129.__sinval * v129.__sinval);
    v130[14] = v129.__cosval * (v129.__sinval * (v97 - v93 * v97));
    v130[12] = 0.0;
    v130[13] = 0.0;
    unsigned int v131 = *(_DWORD *)(*(void *)(a1 + 216) + 8) - 1;
    double v132 = (sinval * sinval * (v93 * v125) + v125 * (cosval * cosval)) * 0.5;
    double v133 = (cosval * cosval * (v93 * v125) + v125 * (sinval * sinval)) * 0.5;
    if (v131 <= 1) {
      double v134 = v132;
    }
    else {
      double v134 = v125 * 0.5;
    }
    if (v131 > 1) {
      double v133 = v125 * 0.5;
    }
    v130[4] = v134;
    v130[5] = v133;
    v130[16] = 0.0;
    v117 = *(double **)a1;
    int v124 = *(_DWORD *)a2[4];
  }
  else
  {
    if (*(unsigned char *)(v43 + 1764)) {
      unsigned int v115 = 60;
    }
    else {
      unsigned int v115 = 180;
    }
    if (*(float *)(v43 + 1328) > 4.0
      && *(float *)(v43 + 1320) < 20.0
      && *(_DWORD *)(v43 + 76) >= v115
      && (*(unsigned char *)(v43 + 1764) || *(_DWORD *)(v43 + 64) == 1)
      && *(unsigned char *)(v43 + 1988))
    {
      double v103 = v112;
    }
    if (v103 >= v112) {
      double v112 = v103;
    }
    uint64_t v116 = (v96 >> 9) & 1;
    if (v91) {
      LOBYTE(v116) = 0;
    }
    if (v82 >= 3) {
      LOBYTE(v116) = 0;
    }
    if ((v116 & (v112 < v114)) != 0) {
      double v114 = v112;
    }
    v117 = *(double **)a1;
    double v118 = v93 * v97;
    v117[1] = v97;
    v117[2] = v93 * v97;
    v117[3] = v110;
    v117[4] = v112;
    v117[5] = (float)(v77 * v77);
    if (v92)
    {
      double v118 = v118 + v112;
      v117[2] = v118;
    }
    if (v91)
    {
      float v119 = v112;
      float v120 = sqrtf(v119);
      float v121 = fmin(sqrtf(v77 * v77) * 3.0, 1.57079633);
      float v122 = sinf(v121);
      double v123 = (float)(v122 * v120) * (float)(v122 * v120);
      if (v123 < v118) {
        double v123 = v118;
      }
      v117[2] = v123;
    }
    LOWORD(v124) = v96;
  }
  double v135 = v114 / 3.0;
  double v136 = 0.01;
  if ((v96 & 0x80) == 0) {
    double v136 = 0.25;
  }
  double v137 = v136 * v97;
  if (v137 >= v135) {
    double v135 = v137;
  }
  v117[6] = v135;
  v117[7] = v114 * 0.5;
  v117[8] = v114;
  float v138 = *((float *)a2 + 20);
  if ((v124 & 0x4000) != 0)
  {
    *(_DWORD *)(a1 + 200) = *((_DWORD *)a2 + 11);
    double v143 = *(double *)(a1 + 192);
    if (*((double *)a2 + 11) >= v143) {
      double v143 = *((double *)a2 + 11);
    }
    *(double *)(a1 + 192) = v143;
    double v141 = *((double *)a2 + 12);
    double v142 = 9.0;
    goto LABEL_262;
  }
  int v139 = *(_DWORD *)(a1 + 200);
  double v140 = 1.0;
  if (!v139) {
    goto LABEL_263;
  }
  if ((*((_DWORD *)a2 + 11) - v139) <= 0x7530)
  {
    double v141 = *((double *)a2 + 12);
    double v142 = 3.0;
LABEL_262:
    double v140 = v141 * v142;
    goto LABEL_263;
  }
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
LABEL_263:
  float v144 = v138 * v138;
  double v145 = v138;
  double v146 = fmin(v140 * 0.0900000036 * v138, 8.9875536);
  double v147 = v145 + v146 / 3.0 * v144;
  v117[10] = v146 * 0.5 * v145;
  v117[11] = v146;
  v117[9] = v147;
  if ((v124 & 0x400) != 0)
  {
    if ((v124 & 0x2000) != 0)
    {
      double v148 = *((double *)a2 + 7);
      if (v148 < 0.5) {
        double v148 = 0.5;
      }
      double v149 = v148 * v145;
      v117[1] = v149;
      v117[2] = v149 * 0.25;
      double v150 = *((double *)a2 + 8);
      if (v150 < 0.00030461742) {
        double v150 = 0.00030461742;
      }
      v117[5] = v150 * v145;
    }
    v117[4] = *((double *)a2 + 7) * v145;
    v117[3] = 0.0;
  }
  double v151 = v117[1];
  double v152 = v117[8];
  if ((v124 & 2) != 0)
  {
    double v154 = v117[2];
    float64x2_t v155 = *(float64x2_t *)(v117 + 4);
  }
  else
  {
    double v153 = fmax(v117[4], 0.01);
    if (v152 < 0.01)
    {
      *((_OWORD *)v117 + 3) = xmmword_263BBCB60;
      double v152 = 0.01;
    }
    double v154 = fmax(v151, 0.01);
    v117[3] = 0.0;
    float64x2_t v155 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v153, 0);
    double v151 = v154;
  }
  v117[1] = fmax(v151, 1.0e-12);
  v117[2] = fmax(v154, 1.0e-12);
  *((float64x2_t *)v117 + 2) = vmaxnmq_f64(v155, (float64x2_t)vdupq_n_s64(0x3D719799812DEA11uLL));
  v117[6] = fmax(v117[6], 1.0e-12);
  v117[8] = fmax(v152, 1.0e-12);
  v117[9] = fmax(v147, 1.0e-12);
  v117[11] = fmax(v146, 1.0e-12);
  v156 = (char *)&v178 + 8;
  long long v178 = xmmword_263BBC4D0;
  *(void *)&v177.f64[0] = &v179;
  *(void *)&v177.f64[1] = &v180;
  uint64_t v180 = 0;
  for (uint64_t j = 8; j != 104; j += 8)
  {
    *(void *)(*(void *)&v177.f64[1] + j) = v156;
    v156 += 96;
  }
  BlueFin::BigMatrix::Null((BlueFin::BigMatrix *)&v177, 12, 12);
  v158 = *(double **)a1;
  float64_t v159 = v177.f64[1];
  uint64_t v160 = *(void *)(*(void *)&v177.f64[1] + 8);
  *(void *)(v160 + 8) = *(void *)(*(void *)a1 + 8);
  uint64_t v161 = *(void *)(*(void *)&v159 + 16);
  *(double *)(v161 + 16) = v158[4];
  *(double *)(*(void *)(*(void *)&v159 + 24) + 24) = v158[2];
  *(double *)(*(void *)(*(void *)&v159 + 32) + 32) = v158[5];
  uint64_t v162 = *(void *)(*(void *)&v159 + 40);
  *(double *)(v162 + 40) = v158[6];
  uint64_t v163 = *(void *)(*(void *)&v159 + 48);
  *(double *)(v163 + 48) = v158[8];
  uint64_t v164 = *(void *)(*(void *)&v159 + 56);
  *(double *)(v164 + 56) = v158[9];
  uint64_t v165 = *(void *)(*(void *)&v159 + 64);
  *(double *)(v165 + 64) = v158[11];
  uint64_t v166 = *((void *)v158 + 3);
  *(void *)(v160 + 16) = v166;
  *(void *)(v161 + 8) = v166;
  uint64_t v167 = *((void *)v158 + 10);
  *(void *)(v164 + 64) = v167;
  *(void *)(v165 + 56) = v167;
  uint64_t v168 = *((void *)v158 + 7);
  *(void *)(v162 + 48) = v168;
  *(void *)(v163 + 40) = v168;
  for (uint64_t k = 72; k != 104; k += 8)
    *(void *)(*(void *)(*(void *)&v159 + k) + k) = a2[9];
  uint64_t result = BlueFin::CheckCovMat((BlueFin *)&v177, (const BlueFin::BigMatrix *)0x6F);
  if ((result & 1) == 0)
  {
    DeviceFaultNotify("glpe_processnoise.cpp", 641, "CheckQ", (char)"CheckCovMat(otQM)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_processnoise.cpp", 641, "CheckCovMat(otQM)");
  }
  return result;
}

void BlueFin::computeResidual(double *a1, double *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v7 = a5;
  double v8 = *a1;
  double v9 = a1[1];
  double v10 = a1[2];
  double v11 = sqrt((v9 - a2[1]) * (v9 - a2[1]) + (*a1 - *a2) * (*a1 - *a2) + (v10 - a2[2]) * (v10 - a2[2]));
  double v12 = log(v11 / 10.0);
  double v13 = 1.0;
  if (v11 <= 0.0) {
    double v12 = 1.0;
  }
  if (v12 >= 1.0) {
    double v13 = v12;
  }
  int v14 = (double *)(a3 + 32);
  uint64_t v15 = (double *)(a4 + 16);
  double v16 = 0.0;
  do
  {
    double v17 = v8 - *(v15 - 2);
    double v18 = v9 - *(v15 - 1);
    double v19 = *v15;
    v15 += 3;
    double v20 = v13 * *v14 * (*(v14 - 1) - sqrt(v18 * v18 + v17 * v17 + (v10 - v19) * (v10 - v19)));
    double v16 = v16 + v20 * v20;
    v14 += 6;
    --v7;
  }
  while (v7);
}

uint64_t BlueFin::stRtdMgr::add(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned __int16 *)(result + 800);
  if (*(__int16 *)(result + 800) >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)result;
    do
    {
      uint64_t v6 = *v5;
      v5 += 6;
      if (*a2 == v6)
      {
        return BlueFin::stRtdMgr::updateWlanSta(result, (__int16)v4, (uint64_t)a2);
      }
      ++v4;
    }
    while (v3 != v4);
    if ((__int16)v3 > 15) {
      return result;
    }
  }
  *(_WORD *)(result + 800) = v3 + 1;
  if ((v3 & 0x8000) == 0)
  {
    uint64_t result = BlueFin::stRtdMgr::updateWlanSta(result, (__int16)v3, (uint64_t)a2);
    if ((result & 1) == 0) {
      --*(_WORD *)(v2 + 800);
    }
  }
  return result;
}

uint64_t BlueFin::stRtdMgr::updateWlanSta(uint64_t a1, int a2, uint64_t a3)
{
  float v3 = *(float *)(a3 + 32);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  float v4 = *(float *)(a3 + 40);
  if (v4 > -10.0) {
    return 0;
  }
  uint64_t v5 = 0;
  BOOL v6 = v4 >= -80.0 && v3 <= 50.0;
  if (v6 && v3 >= 0.1)
  {
    uint64_t v7 = a1 + 48 * a2;
    double v8 = (float *)(v7 + 32);
    float v9 = *(float *)(v7 + 32);
    long long v11 = *(_OWORD *)(a3 + 16);
    long long v10 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
    *(_OWORD *)(v7 + 16) = v11;
    *(_OWORD *)(v7 + 32) = v10;
    if (*(double *)(v7 + 8) != 0.0)
    {
      uint64_t v12 = a1 + 2 * a2;
      int v13 = *(__int16 *)(v12 + 768);
      float v14 = v3 + (float)(v9 * (float)v13++);
      *double v8 = v14 / (float)v13;
      *(_WORD *)(v12 + 768) = v13;
      return 1;
    }
    return 0;
  }
  return v5;
}

#error "263B2C5A4: call analysis failed (funcsize=21)"

uint64_t BlueFin::stRtdMgr::RtdCompute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,__int16 a22,uint64_t a23,unint64_t a24,unint64_t a25,double a26,uint64_t a27,uint64_t a28,long long a29,uint64_t a30,uint64_t a31,int a32)
{
  uint64_t v24 = MEMORY[0x270FA5388](a1, a2);
  STACK[0x12F8] = *MEMORY[0x263EF8340];
  if (*(__int16 *)(v24 + 800) >= 3)
  {
    int v26 = v25;
    uint64_t v27 = v24;
    uint64_t v28 = 0;
    unsigned __int8 v29 = *(_WORD *)(v24 + 800);
    do
    {
      if (*(float *)(v24 + v28 + 32) < 0.0) {
        return 0;
      }
      v28 += 48;
    }
    while (48 * *(unsigned __int16 *)(v24 + 800) != v28);
    bzero(&STACK[0xEA0], 0x300uLL);
    uint64_t v30 = 0;
    char v31 = 0;
    do
    {
      if (*(unsigned __int8 *)(v27 + v30 + 820) >= 4u) {
        v31 |= (v26 - *(_DWORD *)(v27 + v30 + 824)) >> 3 < 0x271;
      }
      v30 += 8;
    }
    while (v30 != 32);
    uint64_t v32 = *(unsigned __int8 *)(v27 + 852);
    uint64_t v33 = v27 + 8 * v32;
    *(_DWORD *)(v33 + 824) = v26;
    *(unsigned char *)(v33 + 820) = v29;
    if ((((_BYTE)v32 + 1) & 0xFC) != 0) {
      char v34 = 0;
    }
    else {
      char v34 = v32 + 1;
    }
    *(unsigned char *)(v27 + 852) = v34;
    unsigned __int8 v35 = v29;
    if (v31)
    {
      if (v29 < 4u)
      {
        if (v29)
        {
          uint64_t v36 = v29;
          float v37 = (float *)(v27 + 36);
          float v38 = (float *)&STACK[0xECC];
          float v39 = 0.0;
          uint64_t v40 = v29;
          do
          {
            float v41 = *v37;
            if (*v37 <= 1.0) {
              float v41 = 1.0;
            }
            *(double *)(v38 - 3) = v41;
            float *v38 = v41;
            float v42 = *(v37 - 1);
            if (v42 > 25.0)
            {
              float v41 = v41 + (float)(v42 + -25.0);
              float *v38 = v41;
            }
            float v39 = v39 + v41;
            v37 += 12;
            v38 += 12;
            --v40;
          }
          while (v40);
          if (v39 > 0.00001)
          {
            uint64_t v43 = (float *)&STACK[0xECC];
            do
            {
              *uint64_t v43 = *v43 / v39;
              v43 += 12;
              --v36;
            }
            while (v36);
          }
        }
        return 0;
      }
      uint64_t v61 = 0;
      float v62 = (float *)(v27 + 32);
      float v63 = -1.0;
      __int16 v64 = -1;
      uint64_t v65 = v29;
      do
      {
        float v66 = *v62;
        v62 += 12;
        float v67 = v66;
        if (v66 > v63)
        {
          float v63 = v67;
          __int16 v64 = v61;
        }
        ++v61;
      }
      while (v29 != v61);
      unsigned __int8 v35 = 0;
      uint64_t v68 = v64;
      float v69 = (float *)(v27 + 40);
      float v70 = 0.0;
      do
      {
        if (v68)
        {
          float v71 = *(v69 - 2);
          if (v71 <= 30.0)
          {
            float v72 = &STACK[0xEA0] + 6 * v35;
            *(_OWORD *)float v72 = *((_OWORD *)v69 - 2);
            float v73 = *(v69 - 1);
            if (v73 <= 1.0) {
              float v73 = 1.0;
            }
            v72[2] = *((void *)v69 - 2);
            *((double *)v72 + 3) = v71;
            *((double *)v72 + 4) = v73;
            *((float *)v72 + 10) = *v69;
            *((float *)v72 + 11) = v73;
            float v70 = v73 + (float)(v70 + v73);
            ++v35;
          }
        }
        v69 += 12;
        --v68;
        --v65;
      }
      while (v65);
      if (v70 > 0.0 && v35 != 0)
      {
        uint64_t v75 = v35;
        double v76 = (float *)&STACK[0xECC];
        do
        {
          *double v76 = *v76 / v70;
          v76 += 12;
          --v75;
        }
        while (v75);
      }
      if (v35 < 3u) {
        return 0;
      }
    }
    else if (v29)
    {
      uint64_t v44 = 0;
      unsigned __int16 v45 = 0;
      float v46 = 0.0;
      do
      {
        uint64_t v47 = (double *)(v27 + 48 * v44);
        double v48 = v47[1];
        double v49 = v47[2];
        double v50 = v47[3];
        if ((__int16)v45 <= 0)
        {
          int v52 = (__int16)v45;
LABEL_35:
          v54 = &STACK[0xEA0] + 6 * v52;
          *(double *)v54 = v48;
          *((double *)v54 + 1) = v49;
          uint64_t v55 = v27 + 48 * v44;
          float v57 = *(float *)(v55 + 32);
          float v56 = *(float *)(v55 + 36);
          if (v56 <= 1.0) {
            float v56 = 1.0;
          }
          *((double *)v54 + 2) = v50;
          *((double *)v54 + 3) = v57;
          *((double *)v54 + 4) = v56;
          float v58 = *((double *)&STACK[0xEA0] + 6 * v44 + 4);
          *((_DWORD *)v54 + 10) = *(_DWORD *)(v55 + 40);
          *((float *)v54 + 11) = v58;
          float v46 = v46 + v58;
          ++v45;
        }
        else
        {
          LOWORD(v51) = 0;
          int v52 = v45;
          v53 = (double *)(&STACK[0xEA0] + 6 * v45);
          while (*v53 != v48 || v53[1] != v49 || v53[2] != v50)
          {
            int v51 = (__int16)(v51 + 1);
            if (v51 >= (__int16)v45) {
              goto LABEL_35;
            }
          }
        }
        ++v44;
      }
      while (v44 != v29);
      if ((__int16)v45 >= 1)
      {
        unsigned __int8 v35 = v45;
        if (v46 < 0.0) {
          goto LABEL_63;
        }
        uint64_t v59 = v45;
        float v60 = (float *)&STACK[0xECC];
        do
        {
          *float v60 = *v60 / v46;
          v60 += 12;
          --v59;
        }
        while (v59);
      }
      unsigned __int8 v35 = v45;
    }
LABEL_63:
    long long v170 = *(_OWORD *)&STACK[0xEA0];
    unint64_t v171 = STACK[0xEB0];
    unsigned __int8 v78 = v35;
    if ((char)v35 > 1)
    {
      unsigned __int8 v79 = v35;
      uint64_t v80 = v35;
      bzero(&a17, 0x2A0uLL);
      uint64_t v81 = 0;
      uint64_t v82 = 8 * (2 * v80 + v79);
      BOOL v83 = (double *)&STACK[0xEA0];
      do
      {
        BlueFin::lla2ned(v83, (double *)&v170, 0, (double *)&STACK[0x1290]);
        BOOL v84 = (char *)&a17 + v81;
        *(_OWORD *)BOOL v84 = *(_OWORD *)&STACK[0x1290];
        *((void *)v84 + 2) = STACK[0x12A0];
        v81 += 24;
        v83 += 6;
      }
      while (v82 != v81);
      int v164 = v26;
      int v168 = 0;
      STACK[0x11F0] = 0;
      STACK[0x1200] = 0;
      STACK[0x11F8] = 0;
      *(int64x2_t *)&STACK[0x11B0] = vdupq_n_s64(0x3F847AE147AE147BuLL);
      STACK[0x11C0] = 0x3F847AE147AE147BLL;
      STACK[0x11D0] = 0;
      STACK[0x11E0] = 0;
      STACK[0x11D8] = 0;
      memset(v172, 0, sizeof(v172));
      long long v85 = 0uLL;
      *(_OWORD *)&STACK[0x1290] = 0u;
      *(_OWORD *)&STACK[0x12A0] = 0u;
      *(_OWORD *)&STACK[0x12B0] = 0u;
      *(_OWORD *)&STACK[0x12C0] = 0u;
      STACK[0x12D0] = 0;
      STACK[0x1270] = 0;
      STACK[0x1280] = 0;
      STACK[0x1278] = 0;
      int v167 = 200;
      STACK[0x1250] = 0;
      STACK[0x1260] = 0;
      STACK[0x1258] = 0;
      STACK[0x1238] = 0;
      double v86 = 1.0;
      unint64_t v87 = 0;
      STACK[0x1248] = 0;
      STACK[0x1240] = 0;
      STACK[0x1210] = 0;
      STACK[0x1220] = 0;
      STACK[0x1218] = 0;
      while (1)
      {
        *(_OWORD *)&STACK[0x12D8] = *(_OWORD *)&STACK[0x11F0];
        STACK[0x12E8] = STACK[0x1200];
        long long v173 = v85;
        unint64_t vars0 = v87;
        BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
        uint64_t v88 = 0;
        STACK[0x1228] = v89;
        double v90 = &STACK[0x1290];
        do
        {
          double v91 = *(double *)((char *)&STACK[0x11F0] + v88);
          *(double *)((char *)&STACK[0x11F0] + v88) = v91 + *(double *)((char *)&STACK[0x11B0] + v88) * v86;
          *(_OWORD *)double v90 = *(_OWORD *)&STACK[0x11F0];
          v90[2] = STACK[0x1200];
          unint64_t v92 = STACK[0x1200];
          long long v173 = *(_OWORD *)&STACK[0x11F0];
          unint64_t vars0 = v92;
          BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
          *(unint64_t *)((char *)&STACK[0x1210] + v88) = v93;
          *(double *)((char *)&STACK[0x11F0] + v88) = v91;
          v88 += 8;
          v90 += 3;
        }
        while (v88 != 24);
        int v94 = 0;
        double v95 = *(double *)&STACK[0x1210];
        for (uint64_t i = 1; i != 4; ++i)
        {
          if (*((double *)&STACK[0x1210] + i) < v95)
          {
            int v94 = i;
            double v95 = *((double *)&STACK[0x1210] + i);
          }
        }
        int v97 = v168 + 4;
        double v98 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6;
        if (v168 + 3 <= 498)
        {
          do
          {
            double v99 = *(double *)&STACK[0x1210];
            while (1)
            {
              int v100 = 0;
              int v169 = v97;
              for (uint64_t j = 1; j != 4; ++j)
              {
                if (v99 < *((double *)&STACK[0x1210] + j))
                {
                  double v99 = *((double *)&STACK[0x1210] + j);
                  int v100 = j;
                }
              }
              uint64_t v102 = 0;
              uint64_t v103 = 3 * v100;
              double v104 = &STACK[0x1290];
              do
              {
                uint64_t v105 = 0;
                double v106 = 0.0;
                do
                {
                  double v106 = v106 + *(double *)&v104[v105];
                  v105 += 3;
                }
                while (v105 != 12);
                *((double *)&STACK[0x1238] + v102) = (v106 - *((double *)&STACK[0x1290] + v102 + v103)) / 3.0;
                ++v102;
                ++v104;
              }
              while (v102 != 3);
              for (uint64_t k = 0; k != 24; k += 8)
                *(double *)((char *)&STACK[0x1270] + k) = *(double *)((char *)&STACK[0x1238] + k)
                                                        + *(double *)((char *)&STACK[0x1238] + k)
                                                        - *(double *)((char *)&STACK[0x1290] + 8 * v103 + k);
              unint64_t v108 = STACK[0x1280];
              long long v173 = *(_OWORD *)&STACK[0x1270];
              unint64_t vars0 = v108;
              BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
              unint64_t v110 = v109;
              if (*(double *)&v109 < v95)
              {
                double v166 = *(double *)&v109;
                for (uint64_t m = 0; m != 24; m += 8)
                  *(double *)((char *)&STACK[0x1250] + m) = *(double *)((char *)&STACK[0x1238] + m)
                                                          + (*(double *)((char *)&STACK[0x1270] + m)
                                                           - *(double *)((char *)&STACK[0x1238] + m))
                                                          * 2.0;
                unint64_t v131 = STACK[0x1260];
                long long v173 = *(_OWORD *)&STACK[0x1250];
                unint64_t vars0 = v131;
                BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
                int v97 = v169 + 2;
                v128 = &STACK[0x1290] + v103;
                uint64_t v129 = v100;
                *(double *)&unint64_t v110 = v166;
                if (v166 >= v127) {
                  goto LABEL_105;
                }
                goto LABEL_109;
              }
              float64x2_t v111 = (float64x2_t)vdupq_lane_s64(v109, 0);
              int32x4_t v112 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(*(float64x2_t *)&STACK[0x1210], v111), (int32x4_t)vcgtq_f64(*(float64x2_t *)&STACK[0x1220], v111)), (int8x16_t)xmmword_263BAC4B0);
              v112.i32[0] = vaddvq_s32(v112);
              uint8x8_t v113 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v112.i8);
              v113.i16[0] = vaddlv_u8(v113);
              if (v113.i32[0] > 1u)
              {
                int v97 = v169 + 1;
                double v132 = &STACK[0x1290] + v103;
                *(_OWORD *)double v132 = *(_OWORD *)&STACK[0x1270];
                v132[2] = STACK[0x1280];
                *(&STACK[0x1210] + v100) = v110;
                goto LABEL_113;
              }
              if ((v113.i8[0] & 0xF) != 0) {
                break;
              }
              for (uint64_t n = 0; n != 24; n += 8)
                *(double *)((char *)&STACK[0x1250] + n) = *(double *)((char *)&STACK[0x1238] + n)
                                                        + (*(double *)((char *)&STACK[0x1290] + 8 * v103 + n)
                                                         - *(double *)((char *)&STACK[0x1238] + n))
                                                        * 0.5;
              unint64_t v115 = STACK[0x1260];
              long long v173 = *(_OWORD *)&STACK[0x1250];
              unint64_t vars0 = v115;
              BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
              *(double *)&unint64_t v110 = v116;
              if (*((double *)&STACK[0x1210] + v100) >= v116)
              {
                double v133 = &STACK[0x1290] + v103;
                *(_OWORD *)double v133 = *(_OWORD *)&STACK[0x1250];
                int v97 = v169 + 2;
                v133[2] = STACK[0x1260];
                *((double *)&STACK[0x1210] + v100) = v116;
                goto LABEL_113;
              }
              uint64_t v117 = 0;
              double v118 = &STACK[0x1290];
              float v119 = &STACK[0x1290] + 3 * v94;
              do
              {
                for (iuint64_t i = 0; ii != 3; ++ii)
                {
                  double v121 = (*(double *)&v118[ii] + *(double *)&v119[ii]) * 0.5;
                  *(double *)&v118[ii] = v121;
                  *(double *)((char *)&STACK[0x11D0] + ii * 8) = v121;
                }
                unint64_t v122 = STACK[0x11E0];
                long long v173 = *(_OWORD *)&STACK[0x11D0];
                unint64_t vars0 = v122;
                BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
                *(&STACK[0x1210] + v117++) = v123;
                v118 += 3;
              }
              while (v117 != 4);
              int v94 = 0;
              double v99 = *(double *)&STACK[0x1210];
              uint64_t v124 = 1;
              double v95 = *(double *)&STACK[0x1210];
              do
              {
                if (*((double *)&STACK[0x1210] + v124) < v95)
                {
                  int v94 = v124;
                  double v95 = *((double *)&STACK[0x1210] + v124);
                }
                ++v124;
              }
              while (v124 != 4);
              int v97 = v169 + 6;
              if (v169 + 5 > 498)
              {
                double v98 = "meManager::SetCurrentAsicLms(%u)  TimeSources:{";
                goto LABEL_124;
              }
            }
            if ((v113.i8[0] & 0xF) == 1)
            {
              double v165 = *(double *)&v110;
              for (juint64_t j = 0; jj != 24; jj += 8)
                *(double *)((char *)&STACK[0x1250] + jj) = *(double *)((char *)&STACK[0x1238] + jj)
                                                         + (*(double *)((char *)&STACK[0x1270] + jj)
                                                          - *(double *)((char *)&STACK[0x1238] + jj))
                                                         * 0.5;
              unint64_t v126 = STACK[0x1260];
              long long v173 = *(_OWORD *)&STACK[0x1250];
              unint64_t vars0 = v126;
              BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
              int v97 = v169 + 2;
              v128 = &STACK[0x1290] + v103;
              uint64_t v129 = v100;
              *(double *)&unint64_t v110 = v165;
              if (v127 <= v165)
              {
LABEL_105:
                *(_OWORD *)v128 = *(_OWORD *)&STACK[0x1250];
                v128[2] = STACK[0x1260];
                *((double *)&STACK[0x1210] + v129) = v127;
                *(double *)&unint64_t v110 = v127;
                goto LABEL_113;
              }
LABEL_109:
              *(_OWORD *)v128 = *(_OWORD *)&STACK[0x1270];
              v128[2] = STACK[0x1280];
              *(&STACK[0x1210] + v129) = v110;
              goto LABEL_113;
            }
            int v97 = v169 + 1;
            unint64_t v110 = *(&STACK[0x1210] + v100);
LABEL_113:
            if (*(double *)&v110 < v95)
            {
              int v94 = v100;
              double v95 = *(double *)&v110;
            }
            if (v167-- <= 1)
            {
              double v98 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6;
              if (v97 <= 500)
              {
                uint64_t v135 = 0;
                double v136 = 0.0;
                do
                {
                  double v136 = v136 + *(double *)((char *)&STACK[0x1210] + v135);
                  v135 += 8;
                }
                while (v135 != 32);
                uint64_t v137 = 0;
                float64x2_t v138 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v136 * 0.25), 0);
                double v139 = 0.0;
                do
                {
                  float64x2_t v140 = vsubq_f64(*(float64x2_t *)((char *)&STACK[0x1210] + v137), v138);
                  float64x2_t v141 = vmulq_f64(v140, v140);
                  double v139 = v139 + v141.f64[0] + v141.f64[1];
                  v137 += 16;
                }
                while (v137 != 32);
                int v167 = 200;
                if (v139 <= 0.003) {
                  break;
                }
              }
            }
            else
            {
              double v98 = "GlPeTimeManager::SetCurrentAsicLms(%u)  TimeSources:{" + 6;
            }
          }
          while (v97 < 500);
        }
LABEL_124:
        double v142 = &STACK[0x1290] + 3 * v94;
        *(_OWORD *)&STACK[0x11D0] = *(_OWORD *)v142;
        STACK[0x11E0] = v142[2];
        if (v97 > 500) {
          break;
        }
        uint64_t v143 = 0;
        double v144 = *((double *)&STACK[0x1210] + v94);
        int v145 = v97 + 1;
        while (1)
        {
          double v86 = *((double *)v98 + 209);
          double v146 = *(double *)((char *)&STACK[0x11B0] + v143) * v86;
          double v147 = *(double *)((char *)&STACK[0x11D0] + v143) + v146;
          *(double *)((char *)&STACK[0x11D0] + v143) = v147;
          unint64_t v148 = STACK[0x11E0];
          long long v173 = *(_OWORD *)&STACK[0x11D0];
          unint64_t vars0 = v148;
          BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
          if (v149 < v144) {
            break;
          }
          double v150 = v147 - v146 - v146;
          *(double *)((char *)&STACK[0x11D0] + v143) = v150;
          unint64_t v151 = STACK[0x11E0];
          long long v173 = *(_OWORD *)&STACK[0x11D0];
          unint64_t vars0 = v151;
          BlueFin::computeResidual((double *)&v173, v172, (uint64_t)&STACK[0xEA0], (uint64_t)&a17, v78);
          if (v152 < v144)
          {
            ++v145;
            break;
          }
          *(double *)((char *)&STACK[0x11D0] + v143) = v146 + v150;
          v145 += 2;
          v143 += 8;
          if (v143 == 24) {
            goto LABEL_132;
          }
        }
        int v168 = v145;
        *(_OWORD *)&STACK[0x11F0] = *(_OWORD *)&STACK[0x11D0];
        STACK[0x1200] = STACK[0x11E0];
        long long v85 = *(_OWORD *)&STACK[0x11F0];
        unint64_t v87 = STACK[0x1200];
      }
LABEL_132:
      unint64_t v153 = STACK[0x11E0];
      *(_OWORD *)&STACK[0x1210] = *(_OWORD *)&STACK[0x11D0];
      STACK[0x1220] = v153;
      BlueFin::ned2lla((double *)&v170, (double *)&STACK[0x1210], (double *)&STACK[0x1290]);
      int v26 = v164;
      if (*(void *)(v27 + 808))
      {
        unint64_t v154 = STACK[0x1290];
        unint64_t v155 = STACK[0x1298];
        double v156 = *(double *)&STACK[0x12A0];
        bzero(&a19, 0xDE0uLL);
        LOBYTE(STACK[0x1290]) = 10;
        int v157 = BlueFin::GlExtSensorType::Get((BlueFin::GlExtSensorType *)&STACK[0x1290]);
        float v158 = v156;
        a17 = v157;
        a18 = 2;
        a22 = 1;
        a24 = v154;
        a25 = v155;
        a26 = v158;
        a32 = 3;
        __asm { FMOV            V0.2D, #3.0 }
        a29 = _Q0;
        a31 = 0x402E000000000000;
        *(_DWORD *)(v27 + 816) = v164;
        BlueFin::GlPeHula::Update(*(void *)(v27 + 808), (uint64_t)&a17, *(double *)&_Q0, v163);
        STACK[0x1290] = (unint64_t)&unk_270EC3318;
        STACK[0x1298] = (unint64_t)&a17;
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          off_270EC3330((uint64_t)&STACK[0x1290], 0);
        }
        BlueFin::GlExtSensDataIf::OutputDebugMsg((BlueFin::GlExtSensDataIf *)&a17);
        bzero((void *)v27, 0x322uLL);
      }
    }
    if ((v26 - *(_DWORD *)(v27 + 816)) >> 4 >= 0x753) {
      bzero((void *)v27, 0x322uLL);
    }
    return 1;
  }
  return 0;
}

BOOL BlueFin::GlPeSatPos::IsCached(BlueFin::GlPeTimeMgrUtil *a1, unsigned __int8 *a2, double a3)
{
  int v5 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(a1, a3);
  unint64_t v6 = *a2;
  if (v6 >= 0xBD)
  {
    DeviceFaultNotify("glpe_satpos.cpp", 942, "IsMiniEphAvailable", (char)"*rotSvId <= MAX_SVID");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_satpos.cpp", 942, "*rotSvId <= MAX_SVID");
  }
  unint64_t v7 = *((unsigned __int8 *)a1 + v6 + 17512);
  if (v7 > 0x5A) {
    return 0;
  }
  int v9 = v5;
  long double v10 = *((double *)a1 + 24 * v7 + 8);
  double v11 = fmod(v10, 4294967300.0);
  if (v10 <= 4294967300.0) {
    double v11 = v10;
  }
  if (v11 < -4294967300.0) {
    double v11 = -fmod(-v11, 4294967300.0);
  }
  if (v11 < 0.0) {
    unsigned int v12 = --v11;
  }
  else {
    unsigned int v12 = v11;
  }
  int v13 = v9 - v12;
  if (v13 < 0) {
    int v13 = -v13;
  }
  return v13 < 0x3A99;
}

BOOL BlueFin::GlPeSatPos::GetSatPos(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double *a4, uint64_t a5, uint64_t a6)
{
  long double v10 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(a1 + 17720) + 119744);
  int v18 = 7;
  unsigned __int8 v19 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v10, a2, (uint64_t)&v18);
  BOOL result = 0;
  if (v19 - 1 <= 0x3E)
  {
    uint64_t v11 = *(void *)(a1 + 17720);
    double v12 = *a4;
    unsigned __int8 v20 = v19;
    Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(v11 + 384), v18);
    if (Mgr)
    {
      float v14 = Mgr;
      uint64_t v15 = (*(uint64_t (**)(void *, unsigned __int8 *, uint64_t))(*Mgr + 112))(Mgr, &v20, 1);
      if (v15)
      {
        uint64_t v16 = v15;
        if (!(*(unsigned int (**)(void *, uint64_t, void, double))(*v14 + 72))(v14, v15, 0, *(double *)(a3 + 16))&& ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v16 + 112))(v16, a3, a6, v12) & 1) != 0)
        {
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeSatPos::IsEphValid(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  return BlueFin::GlPeAsstMgr::IsEphValid(*(void *)(a1 + 17720), a2, a3);
}

void *BlueFin::GlPeSatPos::GetSatClkInfo(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, double a5)
{
  BOOL result = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(a1 + 17720) + 384), *a2);
  if (result)
  {
    BOOL result = (void *)(*(uint64_t (**)(void *, int *, uint64_t))(*result + 112))(result, a2 + 1, 1);
    if (result)
    {
      uint64_t v11 = result;
      BlueFin::GlPeTimeManager::GetTime(*(unsigned int **)(a1 + 17728), a5, 0, (uint64_t)v12);
      return (void *)(*(uint64_t (**)(void *, unsigned char *, uint64_t, uint64_t))(*v11 + 120))(v11, v12, a3, a4);
    }
  }
  return result;
}

void BlueFin::GlPeSatPos::~GlPeSatPos(BlueFin::GlPeSatPos *this)
{
}

BOOL BlueFin::GlPeSatPosCache::GetLOSFromCache(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = (1 << (v3 & 0x1F)) & *(unsigned int *)(*(void *)(a1 + 24) + ((v3 >> 3) & 0x1C));
  if (v4)
  {
    uint64_t v5 = **(void **)(a1 + 264) + 104 * *(unsigned __int8 *)(v3 + a1 + 71);
    double v6 = (float)-*(float *)(v5 + 100);
    *(void *)(a3 + 128) = 0x300000001;
    *(float64x2_t *)a3 = vcvtq_f64_f32(vneg_f32(*(float32x2_t *)(v5 + 92)));
    *(double *)(a3 + 16) = v6;
  }
  return v4 != 0;
}

double BlueFin::GlPeSatPosCache::UpdateSatPosCache(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = *a2;
  if ((*(unsigned int *)(*(void *)(a1 + 24) + ((v3 >> 3) & 0x1C)) >> (v3 & 0x1F)))
  {
    uint64_t v4 = **(void **)(a1 + 264) + 104 * *(unsigned __int8 *)(v3 + a1 + 71);
    *(void *)(v4 + 8) = *(void *)a3;
    *(void *)(v4 + 16) = *(void *)(a3 + 8);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)(a3 + 16);
    *(void *)(v4 + 40) = *(void *)(a3 + 32);
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a3 + 40);
    *(void *)(v4 + 64) = *(void *)(a3 + 56);
    *(_DWORD *)(v4 + 72) = *(_DWORD *)(a3 + 64);
    double result = *(double *)(a3 + 72);
    *(double *)(v4 + 80) = result;
  }
  return result;
}

float BlueFin::GlPeSatPosCache::AddToSatPosCache(BlueFin::GlSetBase *this, unsigned __int8 *a2, uint64_t a3, float64x2_t *a4, float a5)
{
  double v8 = (char *)this + 24;
  uint64_t v9 = *((void *)this + 3);
  long double v10 = (unsigned __int8 **)*((void *)this + 33);
  uint64_t v11 = *((unsigned int *)v10 + 2);
  unint64_t v12 = *a2;
  unint64_t v13 = *(unsigned int *)(v9 + 4 * (v12 >> 5));
  if (((v13 >> (v12 & 0x1F)) & 1) != 0 && *v10)
  {
    float v14 = &(*v10)[104 * *((unsigned __int8 *)this + v12 + 71)];
  }
  else
  {
    int v25 = a2;
    int v26 = a4;
    if (v11 <= BlueFin::GlSetBase::Cnt(this)) {
      goto LABEL_11;
    }
    int v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    uint64_t v18 = *(void *)this;
    while ((((unint64_t)*(unsigned int *)(v18 + 4 * (v15 >> 21)) >> (v17 & 0x1F)) & 1) != 0)
    {
      ++v17;
      v16 -= 104;
      v15 += 0x10000;
      if (v11 == v17) {
        goto LABEL_11;
      }
    }
    *(_DWORD *)(v9 + 4 * (v12 >> 5)) = (1 << (v12 & 0x1F)) | v13;
    *((unsigned char *)this + v12 + 71) = v17;
    *(_DWORD *)(v18 + 4 * (v15 >> 21)) |= 1 << (v17 & 0x1F);
    long double v10 = (unsigned __int8 **)*((void *)this + 33);
    if (*v10)
    {
      float v14 = &(*v10)[-v16];
      a2 = v25;
      a4 = v26;
    }
    else
    {
LABEL_11:
      float v14 = *v10;
      if (v11 < 2)
      {
        char v19 = 0;
      }
      else
      {
        char v19 = 0;
        unsigned __int8 v20 = v14 + 104;
        for (uint64_t i = 1; i != v11; ++i)
        {
          if (*((double *)v20 + 10) < *((double *)v14 + 10))
          {
            float v14 = v20;
            char v19 = i;
          }
          v20 += 104;
        }
      }
      BlueFin::GlSetBase::Remove((uint64_t)v8, *v14);
      a2 = v25;
      a4 = v26;
      unint64_t v22 = *v25;
      *(_DWORD *)(*((void *)this + 3) + ((v22 >> 3) & 0x1C)) |= 1 << v22;
      *((unsigned char *)this + v22 + 71) = v19;
    }
  }
  *float v14 = *a2;
  *((void *)v14 + 1) = *(void *)a3;
  *((void *)v14 + 2) = *(void *)(a3 + 8);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 16);
  *((void *)v14 + 5) = *(void *)(a3 + 32);
  *((_OWORD *)v14 + 3) = *(_OWORD *)(a3 + 40);
  *((void *)v14 + 8) = *(void *)(a3 + 56);
  *((_DWORD *)v14 + 18) = *(_DWORD *)(a3 + 64);
  *((void *)v14 + 10) = *(void *)(a3 + 72);
  *((float *)v14 + 22) = a5;
  *(float32x2_t *)(v14 + 92) = vneg_f32(vcvt_f32_f64(*a4));
  float v23 = a4[1].f64[0];
  float result = -v23;
  *((float *)v14 + 25) = result;
  return result;
}

float64x2_t BlueFin::GlPeSlowFilter::SubmitVelEst(uint64_t a1, float64x2_t *a2, double a3)
{
  if (a3 <= -0.00000011920929 || a3 >= 1.00000012)
  {
    DeviceFaultNotify("glpe_slowfilter.cpp", 44, "SubmitVelEst", (char)"a > -FLT_EPSILON && a < 1.0f + FLT_EPSILON");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_slowfilter.cpp", 44, "a > -FLT_EPSILON && a < 1.0f + FLT_EPSILON");
  }
  float64x2_t result = vmlaq_n_f64(vmulq_n_f64(*a2, a3), *(float64x2_t *)a1, 1.0 - a3);
  *(float64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 80) = 1;
  return result;
}

double BlueFin::GlPeSlowFilter::SubmitTrackRadEst(BlueFin::GlPeSlowFilter *this, double a2, double a3)
{
  if (a3 <= -0.00000011920929 || a3 >= 1.00000012)
  {
    DeviceFaultNotify("glpe_slowfilter.cpp", 53, "SubmitTrackRadEst", (char)"a > -FLT_EPSILON && a < 1.0f + FLT_EPSILON");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_slowfilter.cpp", 53, "a > -FLT_EPSILON && a < 1.0f + FLT_EPSILON");
  }
  double v3 = *((double *)this + 3);
  for (double i = a2 - v3; i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  double result = v3 + a3 * fmax(fmin(i, 0.785398163), -0.785398163);
  *((double *)this + 3) = result;
  double v6 = 6.28318531;
  if (result >= 0.0)
  {
    if (result <= 6.28318531) {
      return result;
    }
    double v6 = -6.28318531;
  }
  double result = result + v6;
  *((double *)this + 3) = result;
  return result;
}

double BlueFin::GlPeSlowFilter::SubmitSpeedEst(BlueFin::GlPeSlowFilter *this, double a2, double a3)
{
  if (a3 <= -0.00000011920929 || a3 >= 1.00000012)
  {
    DeviceFaultNotify("glpe_slowfilter.cpp", 110, "SubmitSpeedEst", (char)"dCoeff > -FLT_EPSILON && dCoeff < 1.0f + FLT_EPSILON");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_slowfilter.cpp", 110, "dCoeff > -FLT_EPSILON && dCoeff < 1.0f + FLT_EPSILON");
  }
  double result = a2 * a3 + (1.0 - a3) * *((double *)this + 6);
  *((double *)this + 6) = result;
  return result;
}

double BlueFin::GlPeSlowFilter::GetSpdSmoothCoeff(BlueFin::GlPeSlowFilter *this, char a2, unsigned int a3, unsigned int a4, double a5)
{
  if (a5 < 0.417 || (a2 & 1) != 0 || *((double *)this + 6) == 0.0)
  {
    *((_DWORD *)this + 14) = a3;
    return 1.0;
  }
  else
  {
    double result = 0.5;
    if (a4 >= 0x1F)
    {
      unsigned int v6 = *((_DWORD *)this + 14);
      double result = 0.1;
      if (v6)
      {
        BOOL v7 = a3 >= v6;
        unsigned int v8 = a3 - v6;
        if (v8 != 0 && v7 && v8 >> 5 <= 0x752)
        {
          double v9 = (double)v8 * 0.001;
          if (v9 < 10.0) {
            return fmax(v9 / -10.0 + 1.0, 0.1);
          }
        }
      }
    }
  }
  return result;
}

double BlueFin::SmoothThresh(BlueFin *this, double a2, double a3, double a4)
{
  if (a4 > a3) {
    return 1024.0;
  }
  double v4 = 1.0;
  if (a4 < a2) {
    return v4;
  }
  double v6 = (a4 - a2) / (a3 - a2) * 10.0;
  int v7 = vcvtmd_s64_f64(v6);
  return (double)(1 << v7) + ((double)(1 << vcvtpd_s64_f64(v6)) - (double)(1 << v7)) * (v6 - (double)v7);
}

float BlueFin::GlPeUrbanPosAsstRegion::unpackRegion(int *a1, uint64_t a2, float a3, float a4)
{
  int v6 = *a1;
  unsigned int v5 = a1[1];
  int v7 = (unsigned __int16)v5 - 0x7FFF;
  int v8 = HIWORD(v5) - 0x7FFF;
  int v9 = (*a1 >> 12) & 0xFFF;
  if ((*a1 & 0x10000000) != 0) {
    int v10 = 25;
  }
  else {
    int v10 = 15;
  }
  if ((v6 & 0x20000000) != 0) {
    int v10 = 35;
  }
  if ((v6 & 0x40000000) != 0) {
    int v10 = 60;
  }
  if (v6 >= 0) {
    int v11 = v10;
  }
  else {
    int v11 = v10 - 5;
  }
  double v12 = a3;
  float v13 = ((float)-(float)v7 / 6367456.73 + a3 * 0.0174532925) * 57.2957795;
  double v14 = a4;
  float v15 = a3 * 0.0174532925;
  float v16 = ((float)-(float)v8 / (cosf(v15) * 6367456.73) + a4 * 0.0174532925) * 57.2957795;
  if (v16 > 180.0) {
    float v16 = 360.0 - v16;
  }
  *(float *)a2 = v13;
  *(float *)(a2 + 4) = v16;
  float v17 = (float)v9 / 10.0;
  *(float *)(a2 + 8) = (float)v11;
  *(float *)(a2 + 12) = v17;
  if (fabs(v17 + -239.6) < 1.0
    && v11 == 45
    && *(unsigned char *)(a2 + 20)
    && !*(unsigned char *)(a2 + 22)
    && fabs(v12 + -47.614338) < 0.0001
    && fabs(v14 + 122.332742) < 0.0001)
  {
    *(_DWORD *)(a2 + 8) = 1117126656;
  }
  float result = (float)(v6 & 0xFFF);
  *(float *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 20) = (v6 & 0x2000000) != 0;
  *(unsigned char *)(a2 + 21) = (v6 & 0x4000000) != 0;
  *(unsigned char *)(a2 + 22) = (v6 & 0x8000000) != 0;
  return result;
}

uint64_t BlueFin::GlPeUrbanPosAsst::findRegion(uint64_t a1, float64x2_t *a2, int a3, unsigned char *a4, unsigned char *a5, uint64_t a6, char a7, uint64_t a8, double a9, unsigned __int8 a10)
{
  *a4 = 0;
  uint64_t v19 = *(void *)(a1 + 8);
  float v20 = -(float)((float)((float)*(unsigned int *)(v19 + 4) * 0.00000011921) * 90.0);
  if ((*(_WORD *)v19 & 1) == 0) {
    float v20 = (float)((float)*(unsigned int *)(v19 + 4) * 0.00000011921) * 90.0;
  }
  float v21 = (float)((float)*(int *)(v19 + 8) * 0.000000059605) * 360.0;
  if (v21 > 180.0) {
    float v21 = 360.0 - v21;
  }
  double v22 = v20;
  double v23 = v21;
  *(double *)(a8 + 264) = v22;
  *(double *)(a8 + 272) = v23;
  float32x2_t v36 = vcvt_f32_f64(*a2);
  float64x2_t v43 = vcvtq_f64_f32(v36);
  uint64_t v44 = 0;
  double v40 = v22;
  double v41 = v23;
  uint64_t v42 = 0;
  BlueFin::lla2ned(v43.f64, &v40, 0, &v37);
  if (sqrt(v38 * v38 + v37 * v37) >= 30000.0
    || (((unint64_t)*(unsigned int *)(a1 + 24) >> a7) & 1) == 0
    || (uint64_t v24 = *(unsigned __int16 *)(a1 + 16), *(void *)(a8 + 256) = *(void *)a1, !v24))
  {
LABEL_30:
    *(void *)(a8 + 256) = 0;
    return 0xFFFFFFFFLL;
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  while (1)
  {
    float v27 = *(double *)(a8 + 264);
    float v28 = *(double *)(a8 + 272);
    BlueFin::GlPeUrbanPosAsstRegion::unpackRegion((int *)(*(void *)(a8 + 256) + v25), (uint64_t)&v40, v27, v28);
    int v29 = BYTE5(v42);
    if (!*(unsigned char *)a6) {
      break;
    }
LABEL_10:
    if (v29) {
      goto LABEL_11;
    }
LABEL_22:
    ++v26;
    v25 += 8;
    if (v24 == v26) {
      goto LABEL_30;
    }
  }
  if (BYTE5(v42)) {
    goto LABEL_22;
  }
  unsigned int v34 = *(_DWORD *)(a6 + 4);
  if (v34 < 2) {
    goto LABEL_11;
  }
  int v29 = BYTE6(v42);
  if (v34 != 3)
  {
    if (v34 != 2) {
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  if (BYTE6(v42)) {
    goto LABEL_22;
  }
LABEL_11:
  float v30 = *(float *)&v41 * 0.0000175;
  float v31 = *(float *)&v42 * 0.0000175;
  if ((float)((float)(*((float *)&v40 + 1) - (float)(*(float *)&v42 * 0.0000175)) - (float)(*(float *)&v41 * 0.0000175)) > v36.f32[1]) {
    goto LABEL_22;
  }
  BOOL v32 = (float)(v30 + (float)(*((float *)&v40 + 1) + v31)) < v36.f32[1]
     || (float)((float)(*(float *)&v40 - v31) - v30) > v36.f32[0];
  if (v32 || (float)(v30 + (float)(v31 + *(float *)&v40)) < v36.f32[0]) {
    goto LABEL_22;
  }
  *a4 = 1;
  BlueFin::UrbanPosAsstRegionExt::UrbanPosAsstRegionExt((uint64_t)&v37, (uint64_t)&v40);
  BlueFin::lla2ned(a2->f64, &v39, 0, v43.f64);
  if (!BlueFin::UrbanPosAsstRegionExt::isNedPosInside((uint64_t)&v37, v43.f64, a3, a5, a10, a9)) {
    goto LABEL_22;
  }
  *(_DWORD *)(a8 + 4) = 0;
  return v26;
}

BOOL BlueFin::UrbanPosAsstRegionExt::isPosInside(uint64_t a1, double *a2, int a3, unsigned char *a4, int a5, double a6)
{
  BlueFin::lla2ned(a2, (double *)(a1 + 32), 0, v12);
  return BlueFin::UrbanPosAsstRegionExt::isNedPosInside(a1, v12, a3, a4, a5, a6);
}

uint64_t BlueFin::UrbanPosAsstRegionExt::UrbanPosAsstRegionExt(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  float v5 = *(float *)(a2 + 8);
  float v4 = *(float *)(a2 + 12);
  *(float *)a1 = v5;
  if (v4 < 0.0 || (float v6 = v4, v4 >= 360.0))
  {
    float v6 = fmodf(v4, 360.0);
    if (v6 < 0.0) {
      float v6 = v6 + 360.0;
    }
  }
  float v7 = v6 * 0.017453;
  *(float *)(a1 + 4) = v6 * 0.017453;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 20);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 21);
  *(unsigned char *)(a1 + 11) = 0;
  float v8 = *(float *)(a2 + 16);
  *(float *)(a1 + 12) = v8;
  *(float64x2_t *)(a1 + 32) = vcvtq_f64_f32(*(float32x2_t *)a2);
  __float2 v9 = __sincosf_stret(v6 * 0.017453);
  *(float *)(a1 + 16) = v9.__cosval;
  *(void *)(a1 + 20) = LODWORD(v9.__sinval);
  if ((v7 > 1.58 || v7 < 1.56) && (v7 > 4.72 || v7 < 4.71)) {
    *(float *)(a1 + 24) = v9.__sinval / v9.__cosval;
  }
  float v10 = v5 * v9.__cosval;
  float v11 = v5 * v9.__sinval;
  float v12 = (float)(v5 * v9.__cosval) * 0.6;
  float v13 = (float)(v5 * v9.__sinval) * 0.6;
  float v14 = v9.__cosval * v8;
  float v15 = v9.__sinval * v8;
  float v16 = -(float)(v5 * v9.__cosval);
  *(double *)(a1 + 152) = (float)(v5 * v9.__sinval);
  *(double *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = 0;
  float v17 = (float)(v5 * v9.__sinval) + (float)(v9.__cosval * v8);
  *(double *)(a1 + 176) = v17;
  *(double *)(a1 + 184) = (float)((float)(v9.__sinval * v8) - (float)(v5 * v9.__cosval));
  *(void *)(a1 + 192) = 0;
  *(double *)(a1 + 200) = (float)-(float)(v5 * v9.__sinval);
  *(double *)(a1 + 208) = (float)(v5 * v9.__cosval);
  *(void *)(a1 + 216) = 0;
  *(double *)(a1 + 224) = (float)(v9.__cosval * v8);
  *(double *)(a1 + 232) = (float)(v9.__sinval * v8);
  *(void *)(a1 + 240) = 0;
  if (v4 < 0.0 || v4 > 90.0)
  {
    if (v4 <= 90.0 || v4 > 180.0)
    {
      if (v4 <= 180.0 || v4 > 270.0)
      {
        float v18 = 0.0;
        if (v4 <= 270.0)
        {
          float v16 = 0.0;
          float v23 = 0.0;
          float v17 = 0.0;
          float v19 = 0.0;
          float v20 = 0.0;
          float v21 = 0.0;
          float v22 = 0.0;
        }
        else
        {
          float v16 = 0.0;
          float v23 = 0.0;
          float v17 = 0.0;
          float v19 = 0.0;
          float v20 = 0.0;
          float v21 = 0.0;
          float v22 = 0.0;
          if (v4 < 360.0)
          {
            float v17 = v14 - v11;
            float v19 = v15 - v12;
            float v18 = (float)(v9.__sinval * v8) - (float)(v5 * v9.__cosval);
            float v22 = v14 - v13;
            float v16 = v5 * v9.__cosval;
            float v23 = v5 * v9.__sinval;
            float v20 = (float)(v5 * v9.__cosval) * 0.6;
            float v21 = (float)(v5 * v9.__sinval) * 0.6;
          }
        }
      }
      else
      {
        float v18 = v10 + v15;
        float v19 = v12 + v15;
        float v20 = -v12;
        float v21 = v13 + v14;
        float v23 = (float)(v5 * v9.__sinval) + (float)(v9.__cosval * v8);
        float v17 = -(float)(v5 * v9.__sinval);
        float v22 = -v13;
      }
    }
    else
    {
      float v23 = v14 - v11;
      float v20 = v15 - v12;
      float v18 = v5 * v9.__cosval;
      float v21 = v14 - v13;
      float v16 = (float)(v9.__sinval * v8) - (float)(v5 * v9.__cosval);
      float v17 = v5 * v9.__sinval;
      float v19 = (float)(v5 * v9.__cosval) * 0.6;
      float v22 = (float)(v5 * v9.__sinval) * 0.6;
    }
  }
  else
  {
    float v18 = -(float)(v5 * v9.__cosval);
    float v16 = v10 + v15;
    float v19 = -v12;
    float v20 = v12 + v15;
    float v21 = -v13;
    float v22 = v13 + v14;
    float v23 = -(float)(v5 * v9.__sinval);
  }
  *(double *)(a1 + 56) = v23;
  *(double *)(a1 + 64) = v18;
  *(void *)(a1 + 72) = 0;
  *(double *)(a1 + 80) = v17;
  *(double *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = 0;
  *(double *)(a1 + 104) = v21;
  *(double *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = 0;
  *(double *)(a1 + 128) = v22;
  *(double *)(a1 + 136) = v20;
  *(void *)(a1 + 144) = 0;
  return a1;
}

BlueFin::UrbanPosAsstRegionExt *BlueFin::UrbanPosAsstRegionExt::UrbanPosAsstRegionExt(BlueFin::UrbanPosAsstRegionExt *this, double a2, double a3, float a4, float a5, float a6, float a7, unsigned int a8)
{
  v16.i64[1] = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(float *)this = a7;
  BOOL v17 = a6 >= 0.0 && a6 < 360.0;
  *(float *)v16.i32 = a6;
  if (!v17)
  {
    *(float *)v16.i32 = fmodf(a6, 360.0);
    if (*(float *)v16.i32 < 0.0) {
      *(float *)v16.i32 = *(float *)v16.i32 + 360.0;
    }
  }
  float v18 = *(float *)v16.i32 * 0.017453;
  v16.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(a8) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
  *((float *)this + 1) = v18;
  *((_DWORD *)this + 2) = vmovn_s16(v16).u32[0];
  *((float *)this + 3) = a5;
  *((double *)this + 4) = a2;
  *((double *)this + 5) = a3;
  *((double *)this + 6) = a4;
  __float2 v19 = __sincosf_stret(v18);
  *((_DWORD *)this + 4) = LODWORD(v19.__cosval);
  *(void *)((char *)this + 20) = LODWORD(v19.__sinval);
  if ((v18 > 1.58 || v18 < 1.56) && (v18 > 4.72 || v18 < 4.71)) {
    *((float *)this + 6) = v19.__sinval / v19.__cosval;
  }
  float v20 = v19.__cosval * a7;
  float v21 = v19.__sinval * a7;
  float v22 = (float)(v19.__cosval * a7) * 0.6;
  float v23 = (float)(v19.__sinval * a7) * 0.6;
  float v24 = v19.__cosval * a5;
  float v25 = v19.__sinval * a5;
  float v26 = -(float)(v19.__cosval * a7);
  *((double *)this + 19) = (float)(v19.__sinval * a7);
  *((double *)this + 20) = v26;
  *((void *)this + 21) = 0;
  float v27 = (float)(v19.__cosval * a5) + (float)(v19.__sinval * a7);
  *((double *)this + 22) = v27;
  *((double *)this + 23) = (float)((float)(v19.__sinval * a5) - (float)(v19.__cosval * a7));
  *((void *)this + 24) = 0;
  *((double *)this + 25) = (float)-(float)(v19.__sinval * a7);
  *((double *)this + 26) = (float)(v19.__cosval * a7);
  *((void *)this + 27) = 0;
  *((double *)this + 28) = (float)(v19.__cosval * a5);
  *((double *)this + 29) = (float)(v19.__sinval * a5);
  *((void *)this + 30) = 0;
  if (a6 < 0.0 || a6 > 90.0)
  {
    if (a6 <= 90.0 || a6 > 180.0)
    {
      if (a6 <= 180.0 || a6 > 270.0)
      {
        float v28 = 0.0;
        if (a6 <= 270.0)
        {
          float v26 = 0.0;
          float v33 = 0.0;
          float v27 = 0.0;
          float v29 = 0.0;
          float v30 = 0.0;
          float v31 = 0.0;
          float v32 = 0.0;
        }
        else
        {
          float v26 = 0.0;
          float v33 = 0.0;
          float v27 = 0.0;
          float v29 = 0.0;
          float v30 = 0.0;
          float v31 = 0.0;
          float v32 = 0.0;
          if (a6 < 360.0)
          {
            float v27 = v24 - v21;
            float v29 = v25 - v22;
            float v28 = (float)(v19.__sinval * a5) - (float)(v19.__cosval * a7);
            float v32 = v24 - v23;
            float v26 = v19.__cosval * a7;
            float v33 = v19.__sinval * a7;
            float v30 = (float)(v19.__cosval * a7) * 0.6;
            float v31 = (float)(v19.__sinval * a7) * 0.6;
          }
        }
      }
      else
      {
        float v28 = v25 + v20;
        float v29 = v25 + v22;
        float v30 = -v22;
        float v31 = v24 + v23;
        float v33 = (float)(v19.__cosval * a5) + (float)(v19.__sinval * a7);
        float v27 = -(float)(v19.__sinval * a7);
        float v32 = -v23;
      }
    }
    else
    {
      float v33 = v24 - v21;
      float v30 = v25 - v22;
      float v28 = v19.__cosval * a7;
      float v31 = v24 - v23;
      float v26 = (float)(v19.__sinval * a5) - (float)(v19.__cosval * a7);
      float v27 = v19.__sinval * a7;
      float v29 = (float)(v19.__cosval * a7) * 0.6;
      float v32 = (float)(v19.__sinval * a7) * 0.6;
    }
  }
  else
  {
    float v28 = -(float)(v19.__cosval * a7);
    float v26 = v25 + v20;
    float v29 = -v22;
    float v30 = v25 + v22;
    float v31 = -v23;
    float v32 = v24 + v23;
    float v33 = -(float)(v19.__sinval * a7);
  }
  *((double *)this + 7) = v33;
  *((double *)this + 8) = v28;
  *((void *)this + 9) = 0;
  *((double *)this + 10) = v27;
  *((double *)this + 11) = v26;
  *((void *)this + 12) = 0;
  *((double *)this + 13) = v31;
  *((double *)this + 14) = v29;
  *((void *)this + 15) = 0;
  *((double *)this + 16) = v32;
  *((double *)this + 17) = v30;
  *((void *)this + 18) = 0;
  return this;
}

uint64_t BlueFin::UrbanPosAsstRegionExt::operator=(uint64_t a1, uint64_t a2)
{
  BlueFin::UrbanPosAsstRegionExt::UrbanPosAsstRegionExt((uint64_t)&v10, a2);
  *(void *)a1 = v10;
  *(unsigned char *)(a1 + 8) = v11;
  *(_WORD *)(a1 + 9) = v12;
  *(unsigned char *)(a1 + 11) = 0;
  long long v3 = v15;
  *(_OWORD *)(a1 + 32) = v14;
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = v21;
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = v6;
  long long v7 = v23;
  *(_OWORD *)(a1 + 160) = v22;
  *(_OWORD *)(a1 + 176) = v7;
  long long v8 = v25;
  *(_OWORD *)(a1 + 192) = v24;
  *(_OWORD *)(a1 + 208) = v8;
  *(_OWORD *)(a1 + 224) = v26;
  *(void *)(a1 + 240) = v27;
  *(_OWORD *)(a1 + 12) = v13;
  return a1;
}

BOOL BlueFin::UrbanPosAsstRegionExt::isAngleWithinRange(BlueFin::UrbanPosAsstRegionExt *this, int a2, double a3)
{
  if (!a2) {
    return 1;
  }
  for (double i = *((float *)this + 1) - a3; i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  double v4 = fabs(i);
  int v5 = *((unsigned __int8 *)this + 8);
  BOOL v6 = v4 < 0.785;
  if (v4 > 5.498) {
    BOOL v6 = 1;
  }
  if (*((unsigned char *)this + 8)) {
    BOOL result = v6;
  }
  else {
    BOOL result = 1;
  }
  if (!v5 && !v6) {
    return v4 <= 3.92659265 && v4 >= 2.35659265;
  }
  return result;
}

BOOL BlueFin::UrbanPosAsstRegionExt::isOkToUse(BlueFin::UrbanPosAsstRegionExt *this, double *a2, int a3, unsigned char *a4, int a5, double a6)
{
  if (*((unsigned char *)this + 11))
  {
    return BlueFin::UrbanPosAsstRegionExt::isAngleWithinRange(this, a3, a6);
  }
  else
  {
    BlueFin::lla2ned(a2, (double *)this + 4, 0, v12);
    return BlueFin::UrbanPosAsstRegionExt::isNedPosInside((uint64_t)this, v12, a3, a4, a5, a6);
  }
}

BOOL BlueFin::UrbanPosAsstRegionExt::isNedPosInside(uint64_t a1, double *a2, int a3, unsigned char *a4, int a5, double a6)
{
  *a4 = 0;
  double v6 = *a2;
  double v7 = a2[1];
  long long v8 = (double *)(a1 + 56);
  __float2 v9 = (double *)(a1 + 64);
  uint64_t v10 = (double *)(a1 + 80);
  char v11 = (double *)(a1 + 88);
  if (a5)
  {
    uint64_t v10 = (double *)(a1 + 128);
    long long v8 = (double *)(a1 + 104);
    char v11 = (double *)(a1 + 136);
    __float2 v9 = (double *)(a1 + 112);
  }
  if (v7 < *v9 || v7 > *v11 || v6 < *v8 || v6 > *v10) {
    return 0;
  }
  float v16 = *(float *)(a1 + 4);
  if (v16 > 0.01 && v16 < 6.27 && (v16 < 3.13 || v16 >= 3.15))
  {
    double v17 = *(float *)(a1 + 16);
    if (v17 >= 0.01 || v17 <= -0.01)
    {
      double v18 = *(double *)(a1 + 152);
      if (a5)
      {
        double v18 = v18 * 0.6;
        double v19 = *(double *)(a1 + 160) * 0.6;
        float64x2_t v20 = (float64x2_t)vdupq_n_s64(0x3FE3333333333333uLL);
        float64x2_t v21 = vmlaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 224), (float64x2_t)vdupq_n_s64(0x3FD999999999999AuLL)), v20, *(float64x2_t *)(a1 + 176));
        float64x2_t v22 = vmulq_f64(*(float64x2_t *)(a1 + 200), v20);
      }
      else
      {
        double v19 = *(double *)(a1 + 160);
        float64x2_t v21 = *(float64x2_t *)(a1 + 176);
        float64x2_t v22 = *(float64x2_t *)(a1 + 200);
      }
      double v23 = v6 - v18;
      double v24 = v7 - v19;
      double v25 = v24 * (v21.f64[1] - v19) + (v21.f64[0] - v18) * v23;
      double v26 = (v21.f64[1] - v19) * (v21.f64[1] - v19) + (v21.f64[0] - v18) * (v21.f64[0] - v18);
      if (v25 < 0.0 || v25 > v26) {
        return 0;
      }
      double v28 = v22.f64[0] - v18;
      double v29 = v22.f64[1] - v19;
      double v30 = v24 * v29 + v28 * v23;
      if (v30 < 0.0 || v30 > v29 * v29 + v28 * v28) {
        return 0;
      }
    }
  }
  *a4 = 1;
  return BlueFin::UrbanPosAsstRegionExt::isAngleWithinRange((BlueFin::UrbanPosAsstRegionExt *)a1, a3, a6);
}

uint64_t BlueFin::UrbanPosAsstRegionExt::findCenterline(uint64_t a1, float64x2_t *a2, double *a3)
{
  *a3 = 0.0;
  a3[1] = 0.0;
  a3[2] = 0.0;
  float64x2_t v3 = *a2;
  float64x2_t v4 = *(float64x2_t *)(a1 + 56);
  float64x2_t v5 = *(float64x2_t *)(a1 + 80);
  if (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v5, *a2), (int32x4_t)vcgeq_f64(*a2, v4)))), 0xFuLL))))return 0; {
  float v7 = *(float *)(a1 + 4);
  }
  if (v7 > 0.01 && v7 < 6.27 && (v7 < 3.13 || v7 >= 3.15))
  {
    if ((v7 > 1.58 || v7 < 1.56) && (v7 > 4.72 || v7 < 4.71))
    {
      float v10 = *(float *)(a1 + 24);
      if (v10 >= -0.00001 && v10 <= 0.00001) {
        return 0;
      }
      double v11 = v10;
      double v8 = a2->f64[1];
      v3.f64[0] = v3.f64[1] / v11;
    }
    else
    {
      double v9 = vaddq_f64(v4, v5).f64[0];
      double v8 = a2->f64[1];
      v3.f64[0] = 0.5 * v9;
    }
  }
  else
  {
    double v8 = vmuld_lane_f64(0.5, vaddq_f64(v4, v5), 1);
  }
  *a3 = v3.f64[0];
  a3[1] = v8;
  uint64_t result = 1;
  a3[2] = 0.0;
  return result;
}

uint64_t BlueFin::UrbanPosAsstRegionExt::getXtrackPos(uint64_t a1, double *a2, uint64_t a3)
{
  float64x2_t v15 = 0uLL;
  uint64_t v16 = 0;
  float64x2_t v5 = (double *)(a1 + 32);
  BlueFin::lla2ned(a2, (double *)(a1 + 32), 0, v14.f64);
  uint64_t Centerline = BlueFin::UrbanPosAsstRegionExt::findCenterline(a1, &v14, v15.f64);
  if (Centerline)
  {
    float v7 = *(float *)(a1 + 4);
    if ((v7 > 1.58 || v7 < 1.56) && (v7 > 4.72 || v7 < 4.71) && v7 > 0.01 && v7 < 6.27 && (v7 < 3.13 || v7 >= 3.15))
    {
      float64x2_t v9 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 16));
      float64x2_t v12 = vmlaq_n_f64(v15, v9, -(v15.f64[0] - v14.f64[0]) * v9.f64[0]);
      uint64_t v13 = 0;
    }
    else
    {
      float64x2_t v12 = v15;
      uint64_t v13 = v16;
    }
    BlueFin::ned2lla(v5, v12.f64, (double *)&v10);
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 16) = v11;
  }
  return Centerline;
}

BOOL BlueFin::GlPeShrimpKf::IsNotTurning(BlueFin::GlPeShrimpKf *this, double a2)
{
  uint64_t v2 = (unsigned __int16 *)*((void *)this + 655);
  return v2
      && (*((_DWORD *)v2 + 42) > *((_DWORD *)v2 + 41) + (a2 * 1000.0)
       || v2[81] >= *v2
       && (!*((unsigned char *)this + *(void *)(*(void *)this - 24) + 240) || *((double *)this + 630) < 6.0822));
}

void BlueFin::GlPeShrimpKf::DoInitNoneGnss(BlueFin::GlPeShrimpKf *this, const BlueFin::GlPeNavGnssState *a2)
{
  BlueFin::GlPeShrimpKf::SetInsLla((uint64_t)this, (uint64_t)a2 + 8);
  *((_OWORD *)this + 335) = *(_OWORD *)((char *)this + 4584);
  *((void *)this + 672) = *((void *)this + 575);
  double v4 = (float)(*((float *)a2 + 20) * *((float *)a2 + 20)) * 0.5;
  float64x2_t v5 = (void *)*((void *)this + 83);
  *(double *)(v5[1] + 8) = v4;
  *(double *)(v5[2] + 16) = v4;
  *(double *)(v5[3] + 24) = (float)(*((float *)a2 + 21) * *((float *)a2 + 21));
  uint64_t v6 = *(void *)this;
  *(void *)((char *)this + *(void *)(*(void *)this - 24) + 88) = *((void *)a2 + 11);
  *(double *)(v5[7] + 56) = (float)(*((float *)a2 + 24) * *((float *)a2 + 24));
  *(void *)((char *)this + *(void *)(v6 - 24) + 152) = *((void *)a2 + 19);
  *(double *)(v5[8] + 64) = (float)(*((float *)a2 + 40) * *((float *)a2 + 40));
  float v7 = (unsigned __int16 *)*((void *)this + 655);
  if (!*((unsigned char *)v7 + 584)) {
    return;
  }
  double v8 = (_OWORD *)((char *)this + 4872);
  if (*((unsigned char *)a2 + 240)) {
    *((double *)this + 666) = sqrt(*((double *)a2 + 14) * *((double *)a2 + 14)+ *((double *)a2 + 13) * *((double *)a2 + 13));
  }
  int v9 = *((_DWORD *)a2 + 51);
  if (v9)
  {
    if (!BlueFin::GlPeShrimpKf::IsNotTurning(this, 1.0)) {
      goto LABEL_32;
    }
    int v9 = 0;
    if (*((float *)a2 + 46) >= 0.174532925 || *((float *)a2 + 35) >= 1.0) {
      goto LABEL_33;
    }
    if (v7[80] < *v7) {
      goto LABEL_32;
    }
    int v9 = *((unsigned __int8 *)this + 649);
    if (*((unsigned char *)this + 649))
    {
      double v10 = *((double *)this + 76);
      double v11 = -v10;
      if (v10 >= 0.0) {
        double v11 = *((double *)this + 76);
      }
      if (v11 < 0.5)
      {
        double v12 = *((double *)this + 72);
        if (v12 < 0.0) {
          double v12 = -v12;
        }
        if (v12 < 0.5)
        {
          double v13 = *((double *)this + 80);
          double v14 = *((double *)this + 68) - v13;
          double v15 = -v14;
          if (v14 >= 0.0) {
            double v15 = *((double *)this + 68) - v13;
          }
          if (v15 < 0.5)
          {
            unint64_t v16 = 0;
            double v17 = (double *)((char *)this + 616);
            do
            {
              unint64_t v18 = v16;
              if (v16 == 2) {
                break;
              }
              double v19 = *v17;
              if (*v17 < 0.0) {
                double v19 = -*v17;
              }
              if (v19 >= 0.5) {
                break;
              }
              double v20 = *(v17 - 4);
              if (v20 < 0.0) {
                double v20 = -v20;
              }
              if (v20 >= 0.5) {
                break;
              }
              double v21 = *(v17 - 8) - v13;
              if (v21 < 0.0) {
                double v21 = -v21;
              }
              ++v17;
              ++v16;
            }
            while (v21 < 0.5);
            if (v18 >= 2)
            {
              int v9 = *((unsigned char *)this + 4904) == 0;
              goto LABEL_33;
            }
          }
        }
      }
LABEL_32:
      int v9 = 0;
    }
  }
LABEL_33:
  if (v7[81] >= v7[1])
  {
    *((unsigned char *)this + 4904) = 1;
    *((void *)this + 609) = 0;
    *((void *)this + 611) = 0;
    *((void *)this + 610) = 0;
  }
  else
  {
    if (!v9) {
      return;
    }
    *((unsigned char *)this + 4904) = 0;
    *double v8 = *(_OWORD *)((char *)a2 + 104);
    *((void *)this + 611) = *((void *)a2 + 15);
  }
  double v22 = *((double *)v7 + 97) * 0.0174532925;
  double v23 = *((double *)v7 + 109);
  *((double *)this + 579) = *((double *)v7 + 85) * 0.0174532925;
  *((double *)this + 580) = v22;
  *((double *)this + 581) = v23 * 0.0174532925;
  uint64_t v57 = 0;
  double v25 = *((double *)v7 + 41);
  v55[0] = *((double *)v7 + 29);
  double v24 = v55[0];
  v55[1] = v25;
  uint64_t v56 = *((void *)v7 + 53);
  uint64_t v26 = v56;
  BlueFin::QuaternionD::rotateV1toV2((double *)this + 586, v55, BlueFin::GlPeShrimpKf::Design::GRAVITY_VEC);
  v54[16] = 0x100000003;
  v54[0] = 0;
  v54[4] = 0;
  v54[8] = 0xC0239EB851EB851FLL;
  *(double *)v53 = v24;
  *(double *)&v53[4] = v25;
  v53[16] = 0x100000003;
  v53[8] = v26;
  uint64_t v52 = 0;
  double v45 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4688));
  uint64_t v46 = v27;
  uint64_t v47 = v28;
  uint64_t v48 = v29;
  BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)&v45, (const BlueFin::Matrix *)v54, (BlueFin::Matrix *)v51);
  BlueFin::Matrix::operator-((uint64_t)v53, (uint64_t)v51, (uint64_t)&v45);
  uint64_t v30 = v49;
  uint64_t v31 = v50;
  *((double *)this + 576) = v45;
  *((void *)this + 577) = v30;
  *((void *)this + 578) = v31;
  uint64_t v32 = *(void *)this;
  float v33 = (char *)this + *(void *)(*(void *)this - 24);
  *(_OWORD *)(v33 + 104) = *v8;
  *((void *)v33 + 15) = *((void *)this + 611);
  *((_DWORD *)this + 2) = 1;
  *((_DWORD *)this + 1217) = *(_DWORD *)((char *)this + *(void *)(v32 - 24) + 200);
  *((void *)this + 612) = 0;
  double v45 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4688));
  uint64_t v46 = v34;
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v45, &v44, &v43, &v42);
  if (!*((_DWORD *)this + 1212))
  {
    double v45 = 1.0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    *((double *)this + 602) = BlueFin::QuaternionD::operator*(&v45, (double *)this + 586);
    *((void *)this + 603) = v37;
    *((void *)this + 604) = v38;
    *((void *)this + 605) = v39;
  }
  double v40 = (double *)*((void *)this + 655);
  double v41 = (void *)*((void *)this + 83);
  *(double *)(v41[17] + 136) = v40[86] * 0.00030461742;
  *(double *)(v41[18] + 144) = v40[98] * 0.00030461742;
  *(double *)(v41[19] + 152) = v40[110] * 0.00030461742;
}

void BlueFin::GlPeShrimpKf::UpdatePlacementContext(uint64_t a1, double *a2, double *a3, int a4)
{
  double v5 = *a3 - *(double *)(a1 + 4632);
  double v6 = a3[1] - *(double *)(a1 + 4640);
  double v7 = a3[2] - *(double *)(a1 + 4648);
  double v8 = (double)(a4 - *(_DWORD *)(a1 + 4856)) * 0.001;
  if (v5 >= 0.0) {
    double v9 = *a3 - *(double *)(a1 + 4632);
  }
  else {
    double v9 = -v5;
  }
  double v10 = v9 * 57.2957795;
  BOOL v11 = v9 * 57.2957795 < 200.0;
  double v12 = -v6;
  double v13 = -v7;
  if (v11
    && (v6 >= 0.0 ? (double v14 = a3[1] - *(double *)(a1 + 4640)) : (double v14 = -v6),
        v14 * 57.2957795 < 200.0
     && (v7 >= 0.0 ? (double v15 = a3[2] - *(double *)(a1 + 4648)) : (double v15 = -v7), v15 * 57.2957795 < 200.0)))
  {
    *(unsigned char *)(a1 + 470) = 0;
  }
  else
  {
    if (v10 >= 200.0)
    {
      char v16 = *(unsigned char *)(a1 + 470);
      *(unsigned char *)(a1 + 470) = v16 + 1;
      if (v10 >= 400.0) {
        *(unsigned char *)(a1 + 470) = v16 + 2;
      }
    }
    if (v6 >= 0.0) {
      double v12 = v6;
    }
    double v17 = v12 * 57.2957795;
    if (v17 >= 200.0)
    {
      char v18 = *(unsigned char *)(a1 + 470);
      *(unsigned char *)(a1 + 470) = v18 + 1;
      if (v17 >= 400.0) {
        *(unsigned char *)(a1 + 470) = v18 + 2;
      }
    }
    if (v7 >= 0.0) {
      double v13 = v7;
    }
    double v19 = v13 * 57.2957795;
    if (v19 >= 200.0)
    {
      char v20 = *(unsigned char *)(a1 + 470);
      *(unsigned char *)(a1 + 470) = v20 + 1;
      if (v19 >= 400.0) {
        *(unsigned char *)(a1 + 470) = v20 + 2;
      }
    }
  }
  if (v8 >= 0.5
    || (double v21 = sqrt(v6 * v6 + v5 * v5 + v7 * v7), v21 * 57.2957795 <= 60.0)
    || (unsigned int v22 = *(unsigned __int8 *)(a1 + 471), v22 > 0x15))
  {
    *(unsigned char *)(a1 + 471) = 0;
    *(void *)(a1 + 472) = 0;
    double v23 = 0.0;
  }
  else
  {
    *(unsigned char *)(a1 + 471) = v22 + 1;
    double v23 = *(double *)(a1 + 472) + v21 * 57.2957795 * v8;
    *(double *)(a1 + 472) = v23;
  }
  uint64_t v24 = 0;
  double v25 = (char *)(a1 + 464);
  uint64_t v26 = a1 + 512;
  do
  {
    double v27 = v5;
    if ((_BYTE)v24)
    {
      if (v24 == 1) {
        double v27 = v6;
      }
      else {
        double v27 = v7;
      }
    }
    if (v27 < 0.0) {
      double v27 = -v27;
    }
    if (v8 >= 0.5 || v27 < 0.523598776 || (unsigned int v28 = *(unsigned __int8 *)(v26 + v24), v28 > 0x15))
    {
      *(unsigned char *)(v26 + v24) = 0;
      uint64_t v31 = (void *)(a1 + 480);
      if ((_BYTE)v24)
      {
        if (v24 == 1) {
          uint64_t v31 = (void *)(a1 + 488);
        }
        else {
          uint64_t v31 = (void *)(a1 + 496);
        }
      }
      *uint64_t v31 = 0;
    }
    else
    {
      *(unsigned char *)(v26 + v24) = v28 + 1;
      double v29 = v5;
      uint64_t v30 = (double *)(a1 + 480);
      if ((_BYTE)v24)
      {
        if (v24 == 1) {
          double v29 = v6;
        }
        else {
          double v29 = v7;
        }
        if (v24 == 1) {
          uint64_t v30 = (double *)(a1 + 488);
        }
        else {
          uint64_t v30 = (double *)(a1 + 496);
        }
      }
      *uint64_t v30 = *v30 + v29 * v8;
    }
    ++v24;
  }
  while (v24 != 3);
  for (uint64_t i = 0; i != 3; ++i)
  {
    if (*(unsigned __int8 *)(a1 + 512 + i) <= 0xBu)
    {
      float v33 = (double *)(a1 + 480);
      if ((_BYTE)i)
      {
        if (i == 1) {
          float v33 = (double *)(a1 + 488);
        }
        else {
          float v33 = (double *)(a1 + 496);
        }
      }
      double v34 = *v33;
      if (*v33 < 0.0) {
        double v34 = -*v33;
      }
      if (v34 >= 0.741764932) {
        goto LABEL_73;
      }
    }
    uint64_t v35 = (double *)(a1 + 480);
    if ((_BYTE)i)
    {
      if (i == 1) {
        uint64_t v35 = (double *)(a1 + 488);
      }
      else {
        uint64_t v35 = (double *)(a1 + 496);
      }
    }
    double v36 = *v35;
    if (*v35 < 0.0) {
      double v36 = -*v35;
    }
    if (v36 >= 1.04719755) {
LABEL_73:
    }
      *(unsigned char *)(a1 + 469) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 470) > 2u || v23 > 60.0) {
    *(unsigned char *)(a1 + 469) = 1;
  }
  double v37 = a2[1] - *(double *)(a1 + 4616);
  double v38 = a2[2] - *(double *)(a1 + 4624);
  v55[0] = *a2 - *(double *)(a1 + 4608);
  double v56 = v37;
  double v57 = v38;
  if (*(unsigned char *)(a1 + 467))
  {
    char v39 = *v25;
LABEL_80:
    if (v55[4 * *(unsigned __int8 *)(a1 + 465) - 4] * (double)v39 < 0.0) {
      *(unsigned char *)(a1 + 468) = 1;
    }
  }
  else
  {
    double v40 = v55;
    uint64_t v41 = 1;
    while (1)
    {
      double v42 = *v40;
      double v43 = -*v40;
      if (*v40 >= 0.0) {
        double v43 = *v40;
      }
      if (v43 > 6.9) {
        break;
      }
      ++v41;
      v40 += 4;
      if (v41 == 4)
      {
        unsigned __int8 v44 = *(unsigned char *)(a1 + 466);
        goto LABEL_96;
      }
    }
    if (*(unsigned char *)(a1 + 465))
    {
      if (*(unsigned __int8 *)(a1 + 465) != v41) {
        goto LABEL_101;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 465) = v41;
    }
    unsigned __int8 v44 = *(unsigned char *)(a1 + 466) + 1;
    *(unsigned char *)(a1 + 466) = v44;
    char v45 = *(unsigned char *)(a1 + 464);
    if (v42 > 0.0) {
      char v46 = v45 + 1;
    }
    else {
      char v46 = v45 - 1;
    }
    *(unsigned char *)(a1 + 464) = v46;
LABEL_96:
    if (v44 < 0x3Du) {
      goto LABEL_102;
    }
    char v39 = *v25;
    int v47 = *v25;
    if (v47 < 0) {
      int v47 = -v47;
    }
    if (v47 >= 0x3Du)
    {
      *(unsigned char *)(a1 + 467) = 1;
      goto LABEL_80;
    }
LABEL_101:
    *(void *)(a1 + 528) = 0;
    *(void *)(a1 + 520) = 0;
    *(_WORD *)(a1 + 536) = 0;
    *(_OWORD *)double v25 = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_DWORD *)(a1 + 511) = 0;
  }
LABEL_102:
  v60[16] = 0;
  *(double *)float v60 = v5;
  *(double *)&v60[4] = v6;
  *(double *)&v60[8] = v7;
  BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)(a1 + 4688), (const BlueFin::Matrix *)v60, (BlueFin::Matrix *)v58);
  int v48 = 0;
  uint64_t v49 = *(void *)(a1 + 5232);
  if (v8 > 2.0 || v8 < 0.0) {
    goto LABEL_120;
  }
  int v50 = *(_DWORD *)(v49 + 24);
  float v51 = sqrt(v59 * v59 + v58[0] * v58[0]);
  double v52 = v51;
  if (v50 == 2) {
    goto LABEL_112;
  }
  if (v52 <= 0.523598776)
  {
    if (v52 >= 0.174532925)
    {
      *(void *)(a1 + 528) = 0;
    }
    else
    {
      *(void *)(a1 + 520) = 0;
      *(unsigned char *)(a1 + 536) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 537) = 0;
    *(void *)(a1 + 528) = 0;
    double v53 = v8 + *(double *)(a1 + 520);
    *(double *)(a1 + 520) = v53;
    if (v53 > 1.0)
    {
      *(unsigned char *)(a1 + 536) = 1;
      *(void *)(a1 + 520) = 0;
    }
  }
  if (v50 != 1)
  {
LABEL_112:
    if (v52 >= 0.174532925)
    {
      *(void *)(a1 + 528) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 536) = 0;
      double v54 = v8 + *(double *)(a1 + 528);
      *(double *)(a1 + 528) = v54;
      if (v54 > 2.0)
      {
        *(unsigned char *)(a1 + 537) = 1;
        *(void *)(a1 + 528) = 0;
        *(void *)(a1 + 520) = 0;
      }
    }
  }
  if (*(unsigned char *)(a1 + 468) || *(unsigned char *)(a1 + 469) || *(unsigned char *)(a1 + 536))
  {
    int v48 = 2;
LABEL_120:
    *(_DWORD *)(v49 + 24) = v48;
    return;
  }
  if (*(unsigned char *)(a1 + 537))
  {
    int v48 = 1;
    goto LABEL_120;
  }
}

void *BlueFin::GlPeShrimpKf::SaveAprioriState(BlueFin::GlPeShrimpKf *this)
{
  BlueFin::GlPeShrimpKf::stReducedNavState::stReducedNavState((uint64_t)v8, (uint64_t)this + *(void *)(*(void *)this - 24), (uint64_t)this + 4608, (uint64_t)this + 4632, (_OWORD *)this + 301, (long long *)this + 293, (uint64_t)this + 656);
  long long v2 = v8[1];
  *(_OWORD *)((char *)this + 56) = v8[0];
  *(_OWORD *)((char *)this + 72) = v2;
  long long v3 = v8[3];
  *(_OWORD *)((char *)this + 88) = v8[2];
  *(_OWORD *)((char *)this + 104) = v3;
  *((void *)this + 15) = v9;
  *((_OWORD *)this + 8) = v10;
  long long v4 = v13;
  *(_OWORD *)((char *)this + 152) = v12;
  *(_OWORD *)((char *)this + 168) = v4;
  long long v5 = v15;
  *(_OWORD *)((char *)this + 184) = v14;
  *(_OWORD *)((char *)this + 200) = v5;
  long long v6 = v17;
  *(_OWORD *)((char *)this + 216) = v16;
  *((void *)this + 18) = v11;
  *(_OWORD *)((char *)this + 232) = v6;
  *(_OWORD *)((char *)this + 248) = v18;
  uint64_t result = BlueFin::SKFVector::Clone((BlueFin::GlPeShrimpKf *)((char *)this + 264), (const BlueFin::SKFVector *)v19);
  *((_WORD *)this + 228) = v19[96];
  return result;
}

uint64_t BlueFin::GlPeShrimpKf::ApplyCrossTrackPosMeas(BlueFin::GlPeShrimpKf *this, double a2, double a3, double a4, int a5)
{
  v12[0] = v13;
  v13[0] = 0;
  v12[1] = 0x1500000015;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v23 = 0;
  __double2 v9 = __sincos_stret(a4);
  *(double *)&v13[1] = -v9.__sinval;
  v13[2] = *(void *)&v9.__cosval;
  return BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)v12, 18, a2, a3 * a3, 3.0, v10, a5);
}

void BlueFin::GlPeShrimpKf::ApplyYawMeas(BlueFin::GlPeShrimpKf *this, double a2, double a3)
{
  double v72 = 0.0;
  double v73 = 0.0;
  long long v6 = (double *)((char *)this + 4688);
  double v7 = (BlueFin::GlPeShrimpKf *)((char *)this + 4816);
  double v42 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
  uint64_t v43 = v8;
  *(void *)&v44[0] = v9;
  *((void *)&v44[0] + 1) = v10;
  double v60 = BlueFin::QuaternionD::operator*(v6, &v42);
  double v61 = v11;
  double v62 = v12;
  uint64_t v63 = v13;
  double v42 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v60);
  uint64_t v43 = v14;
  *(void *)&v44[0] = v15;
  *((void *)&v44[0] + 1) = v16;
  BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v42, &v73, &v72, &v71);
  double v18 = v72;
  double v17 = v73;
  uint64_t v70 = 0x300000003;
  __double2 v19 = __sincos_stret(a2);
  __double2 v20 = __sincos_stret(v18);
  __double2 v21 = __sincos_stret(v17);
  double v60 = v19.__cosval * v20.__cosval;
  double v61 = v19.__sinval * v20.__cosval;
  double v62 = -v20.__sinval;
  double v64 = v19.__cosval * (v21.__sinval * v20.__sinval) - v21.__cosval * v19.__sinval;
  double v65 = v19.__sinval * (v21.__sinval * v20.__sinval) + v21.__cosval * v19.__cosval;
  double v66 = v21.__sinval * v20.__cosval;
  double v67 = v19.__cosval * (v21.__cosval * v20.__sinval) + v21.__sinval * v19.__sinval;
  double v68 = v19.__sinval * (v21.__cosval * v20.__sinval) - v21.__sinval * v19.__cosval;
  double v69 = v21.__cosval * v20.__cosval;
  double v52 = BlueFin::QuaternionD::conj(v7);
  double v53 = v22;
  uint64_t v54 = v23;
  uint64_t v55 = v24;
  BlueFin::QuaternionD::q2Rot((BlueFin::QuaternionD *)&v52, (uint64_t)&v42);
  BlueFin::Matrix::operator*((uint64_t)&v42, (uint64_t)&v60, (uint64_t)v59);
  v58[0] = 1.0;
  memset(&v58[1], 0, 24);
  if ((BlueFin::QuaternionD::rot2Q((BlueFin::QuaternionD *)v58, (const BlueFin::Matrix *)v59) & 1) == 0)
  {
    DeviceFaultNotify("glpe_shrimpkf.cpp", 2059, "ApplyYawMeas", (char)"otQnb_.rot2Q(otCnb_)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", 2059, "otQnb_.rot2Q(otCnb_)");
  }
  v57[0] = BlueFin::QuaternionD::operator*(v6, v58);
  v57[1] = v25;
  v57[2] = v26;
  v57[3] = v27;
  BlueFin::QuaternionD::normalize((BlueFin::QuaternionD *)v57);
  BlueFin::QuaternionD::q2Rot((BlueFin::QuaternionD *)v57, (uint64_t)&v52);
  uint64_t v43 = 0x1500000015;
  memset(v44, 0, sizeof(v44));
  uint64_t v45 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  double v42 = COERCE_DOUBLE(v44);
  uint64_t v46 = 0x3FF0000000000000;
  BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v42, 15, (v53 - v56) * 0.5, a3 * a3, 5.0, v28, 1);
  double v74 = BlueFin::QuaternionD::conj(v7);
  uint64_t v75 = v29;
  uint64_t v76 = v30;
  uint64_t v77 = v31;
  v38[0] = BlueFin::QuaternionD::operator*(v6, &v74);
  v38[1] = v32;
  void v38[2] = v33;
  v38[3] = v34;
  double v74 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v38);
  uint64_t v75 = v35;
  uint64_t v76 = v36;
  uint64_t v77 = v37;
  BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v74, &v41, &v40, &v39);
}

uint64_t *BlueFin::GlPeShrimpKf::GetVelVeh(uint64_t *this, BlueFin::Matrix *a2)
{
  if (*((_DWORD *)this + 2) == 2)
  {
    long long v3 = this;
    long long v4 = (uint64_t *)((char *)this + *(void *)(*this - 24));
    uint64_t v5 = v4[14];
    uint64_t v6 = v4[15];
    v22[0] = v4[13];
    v22[4] = v5;
    v22[16] = 0x100000003;
    v22[8] = v6;
    double v7 = (double *)(this + 586);
    uint64_t v8 = (BlueFin::QuaternionD *)(this + 602);
    double v24 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)(this + 602));
    uint64_t v25 = v9;
    uint64_t v26 = v10;
    uint64_t v27 = v11;
    v23[0] = BlueFin::QuaternionD::operator*(v7, &v24);
    v23[1] = v12;
    v23[2] = v13;
    void v23[3] = v14;
    double v24 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v23);
    uint64_t v25 = v15;
    uint64_t v26 = v16;
    uint64_t v27 = v17;
    BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)&v24, (const BlueFin::Matrix *)v22, a2);
    uint64_t v30 = 0;
    uint64_t v18 = v3[624];
    double v24 = *((double *)v3 + 623);
    uint64_t v28 = v18;
    uint64_t v29 = v3[625];
    BlueFin::QuaternionD::rotVec(v8, (const BlueFin::Matrix *)&v24, (BlueFin::Matrix *)v23);
    double v24 = *(double *)v23;
    uint64_t v28 = v23[4];
    uint64_t v30 = 0x100000003;
    uint64_t v29 = v23[8];
    BlueFin::vcross((BlueFin *)&v24, (uint64_t)v23);
    v20[0] = (uint64_t)v21;
    v20[1] = 0x300000000;
    memset(v21, 0, sizeof(v21));
    this = BlueFin::SKFVector::mult(v20, (const BlueFin::Matrix *)v23, (const BlueFin::SKFVector *)(v3 + 659));
    uint64_t v19 = v20[0];
    *(double *)a2 = *(double *)a2 - *(double *)(v20[0] + 8);
    *((double *)a2 + 4) = *((double *)a2 + 4) - *(double *)(v19 + 16);
    *((double *)a2 + 8) = *((double *)a2 + 8) - *(double *)(v19 + 24);
  }
  return this;
}

uint64_t BlueFin::GlPeShrimpKf::DoInitTiltSensor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((double)(a4 - *(_DWORD *)(a1 + 4856)) * 0.001 <= 0.0)
  {
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1273, "DoInitTiltSensor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", 1273, "0");
  }
  long long v4 = **(uint64_t (***)(void))a1;

  return v4();
}

void BlueFin::GlPeShrimpKf::DoInitDoneSensor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v4 = (double)(a4 - *(_DWORD *)(a1 + 4856));
  if (v4 * 0.001 <= 0.0)
  {
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1284, "DoInitDoneSensor", (char)"0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", 1284, "0");
  }
  (**(void (***)(uint64_t, uint64_t, uint64_t, double))a1)(a1, a3, a2, v4 * 0.001);

  BlueFin::GlPeShrimpKf::PropKf(a1, a2);
}

void BlueFin::GlPeShrimpKf::PropKf(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  double v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  uint64_t v149 = *MEMORY[0x263EF8340];
  BlueFin::BigMatrixDim<21,21>::BigMatrixDim((BlueFin::BigMatrix *)&v134, 21, 21);
  BlueFin::QuaternionD::q2Rot((BlueFin::QuaternionD *)(v7 + 4688), (uint64_t)v132);
  uint64_t v8 = v6[1];
  uint64_t v125 = *v6;
  uint64_t v129 = v8;
  uint64_t v9 = v6[2];
  uint64_t v131 = 0x100000003;
  uint64_t v130 = v9;
  uint64_t v145 = 0;
  BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)(v7 + 4688), (const BlueFin::Matrix *)&v125, (BlueFin::Matrix *)v144);
  BlueFin::vcross((BlueFin *)v144, (uint64_t)v137);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v135;
  do
  {
    uint64_t v13 = 0;
    uint64_t v14 = &v12[v11];
    uint64_t v15 = v14[4];
    uint64_t v16 = v14[9] + 136;
    uint64_t v17 = v15 + 72;
    do
    {
      uint64_t v18 = (double *)(v17 + v13 * 8);
      double *v18 = -v137[v10 + v13];
      double v19 = -*(double *)&v132[v10 * 8 + v13 * 8];
      v18[3] = v19;
      *(double *)(v16 + v13 * 8) = v19;
      ++v13;
    }
    while (v13 != 3);
    *(void *)(v12[v11 + 12] + 8 * v11 + 96) = 0xBEE4F8B588E368F1;
    *(void *)(v12[v11 + 17] + 8 * v11 + 136) = 0xBF1A36E2EB1C432DLL;
    ++v11;
    v10 += 4;
  }
  while (v11 != 3);
  *(void *)(v12[1] + 32) = 0x3FF0000000000000;
  *(void *)(v12[2] + 40) = 0x3FF0000000000000;
  *(void *)(v12[3] + 48) = 0x3FF0000000000000;
  *(void *)(v12[7] + 64) = 0x3FF0000000000000;
  BlueFin::BigMatrixDim<21,21>::BigMatrixDim((BlueFin::BigMatrix *)v132, (const BlueFin::BigMatrix *)(v7 + 656));
  uint64_t v20 = *(unsigned int *)(v7 + 672);
  unsigned int v21 = *(_DWORD *)(v7 + 676);
  if (v20 != v21 || __PAIR64__(v21, v20) != v136) {
    goto LABEL_130;
  }
  if ((int)v20 < 1) {
    goto LABEL_61;
  }
  uint64_t v22 = v20 + 1;
  uint64_t v23 = v133;
  uint64_t v24 = 1;
  do
  {
    uint64_t v25 = 0;
    uint64_t v26 = v135;
    uint64_t v27 = *(void *)(v23 + 8 * v24);
    uint64_t v28 = *(void *)(*(void *)(v7 + 664) + 8 * v24) + 72;
    do
    {
      uint64_t v29 = 0;
      double v30 = 0.0;
      do
      {
        double v30 = v30 + *(double *)(v28 + v29) * *(double *)(v26[v25 + 4] + 72 + v29);
        v29 += 8;
      }
      while (v29 != 24);
      *(double *)(v27 + 8 * (v25 + 4)) = *(double *)(v27 + 8 * (v25 + 4)) + v4 * v30;
      ++v25;
    }
    while (v25 != 3);
    ++v24;
  }
  while (v24 != v22);
  if (v20 != v136 || v20 != HIDWORD(v136)) {
    goto LABEL_130;
  }
  uint64_t v31 = 1;
  do
  {
    uint64_t v32 = 0;
    uint64_t v33 = v135;
    uint64_t v34 = *(void *)(v23 + 8 * v31);
    uint64_t v35 = *(void *)(*(void *)(v7 + 664) + 8 * v31) + 96;
    do
    {
      uint64_t v36 = 0;
      double v37 = 0.0;
      do
      {
        double v37 = v37 + *(double *)(v35 + v36) * *(double *)(v33[v32 + 4] + 96 + v36);
        v36 += 8;
      }
      while (v36 != 24);
      *(double *)(v34 + 8 * (v32 + 4)) = *(double *)(v34 + 8 * (v32 + 4)) + v4 * v37;
      ++v32;
    }
    while (v32 != 3);
    ++v31;
  }
  while (v31 != v22);
  if (v20 != v136 || v20 != HIDWORD(v136))
  {
LABEL_130:
    DeviceFaultNotify("glpe_matrix.h", 553, "mult_sparse_add", (char)"otA.m_NbRows == otA.m_NbCols && otA.m_NbRows == otB.m_NbRows && otA.m_NbCols == otB.m_NbCols");
    int v124 = 553;
    goto LABEL_132;
  }
  uint64_t v38 = 1;
  do
  {
    uint64_t v39 = 0;
    long double v40 = v135;
    uint64_t v41 = *(void *)(v23 + 8 * v38);
    uint64_t v42 = *(void *)(*(void *)(v7 + 664) + 8 * v38) + 136;
    do
    {
      uint64_t v43 = 0;
      double v44 = 0.0;
      do
      {
        double v44 = v44 + *(double *)(v42 + v43) * *(double *)(v40[v39 + 9] + 136 + v43);
        v43 += 8;
      }
      while (v43 != 24);
      *(double *)(v41 + 8 * (v39 + 9)) = *(double *)(v41 + 8 * (v39 + 9)) + v4 * v44;
      ++v39;
    }
    while (v39 != 3);
    ++v38;
  }
  while (v38 != v22);
  if (v20 != v136 || v20 != HIDWORD(v136)) {
    goto LABEL_128;
  }
  uint64_t v45 = *(void *)(v7 + 664);
  uint64_t v46 = v135;
  uint64_t v47 = 1;
  do
  {
    uint64_t v48 = *(void *)(v45 + 8 * v47);
    uint64_t v49 = *(void *)(v23 + 8 * v47);
    for (uint64_t i = 96; i != 120; i += 8)
      *(double *)(v49 + i) = *(double *)(v49 + i)
                           + *(double *)(v48 + i) * v4 * *(double *)(v46[(unint64_t)i / 8] + i);
    ++v47;
  }
  while (v47 != v22);
  if (v20 != v136 || v20 != HIDWORD(v136)) {
    goto LABEL_128;
  }
  uint64_t v52 = *(void *)(v7 + 664);
  double v53 = v135;
  uint64_t v54 = 1;
  do
  {
    uint64_t v55 = *(void *)(v52 + 8 * v54);
    uint64_t v56 = *(void *)(v23 + 8 * v54);
    for (uint64_t j = 136; j != 160; j += 8)
      *(double *)(v56 + j) = *(double *)(v56 + j)
                           + *(double *)(v55 + j) * v4 * *(double *)(v53[(unint64_t)j / 8] + j);
    ++v54;
  }
  while (v54 != v22);
  if (v20 != v136 || v20 != HIDWORD(v136)) {
    goto LABEL_128;
  }
  uint64_t v59 = *(void *)(v7 + 664);
  double v60 = v135 + 1;
  uint64_t v61 = 1;
  do
  {
    unint64_t v62 = 0;
    uint64_t v63 = *(void *)(v23 + 8 * v61) + 8;
    uint64_t v64 = *(void *)(v59 + 8 * v61) + 32;
    do
    {
      *(double *)(v63 + v62) = *(double *)(v63 + v62)
                             + *(double *)(v64 + v62) * v4 * *(double *)(v60[v62 / 8] + v62 + 32);
      v62 += 8;
    }
    while (v62 != 24);
    ++v61;
  }
  while (v61 != v22);
  if (v20 != v136 || v20 != HIDWORD(v136))
  {
LABEL_128:
    DeviceFaultNotify("glpe_matrix.h", 594, "mult_sparse_diag_add", (char)"otA.m_NbRows == otA.m_NbCols && otA.m_NbRows == otB.m_NbRows && otA.m_NbCols == otB.m_NbCols");
    int v124 = 594;
    goto LABEL_132;
  }
  uint64_t v66 = v135[7];
  uint64_t v67 = v22 - 1;
  double v68 = (uint64_t *)(v23 + 8);
  double v69 = (uint64_t *)(*(void *)(v7 + 664) + 8);
  do
  {
    uint64_t v71 = *v69++;
    uint64_t v70 = v71;
    uint64_t v72 = *v68++;
    *(double *)(v72 + 56) = *(double *)(v72 + 56) + *(double *)(v70 + 64) * v4 * *(double *)(v66 + 64);
    --v67;
  }
  while (v67);
LABEL_61:
  BlueFin::BigMatrixDim<21,21>::BigMatrixDim((BlueFin::BigMatrix *)&v125, (const BlueFin::BigMatrix *)v132);
  int v73 = v136;
  if (v136 != HIDWORD(v136) || v136 != v127 || HIDWORD(v136) != v128)
  {
LABEL_131:
    DeviceFaultNotify("glpe_matrix.h", 573, "mult_sparse_add", (char)"otA.m_NbRows == otA.m_NbCols && otA.m_NbRows == otB.m_NbRows && otA.m_NbCols == otB.m_NbCols");
    int v124 = 573;
LABEL_132:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_matrix.h", v124, "otA.m_NbRows == otA.m_NbCols && otA.m_NbRows == otB.m_NbRows && otA.m_NbCols == otB.m_NbCols");
  }
  if ((int)v136 >= 1)
  {
    uint64_t v76 = v136 + 1;
    uint64_t v77 = v133;
    uint64_t v78 = 1;
    do
    {
      uint64_t v79 = 0;
      uint64_t v80 = v135;
      uint64_t v81 = v126 + 72;
      do
      {
        uint64_t v82 = 0;
        double v83 = 0.0;
        do
        {
          double v83 = v83 + *(double *)(v80[v79 + 4] + 72 + v82) * *(double *)(*(void *)(v81 + v82) + 8 * v78);
          v82 += 8;
        }
        while (v82 != 24);
        *(double *)(*(void *)(v77 + 8 * (v79 + 4)) + 8 * v78) = *(double *)(*(void *)(v77 + 8 * (v79 + 4)) + 8 * v78)
                                                                + v4 * v83;
        ++v79;
      }
      while (v79 != 3);
      ++v78;
    }
    while (v78 != v76);
    if (v73 != v127 || v73 != v128) {
      goto LABEL_131;
    }
    uint64_t v84 = 1;
    do
    {
      uint64_t v85 = 0;
      double v86 = v135;
      uint64_t v87 = v126 + 96;
      do
      {
        uint64_t v88 = 0;
        double v89 = 0.0;
        do
        {
          double v89 = v89 + *(double *)(v86[v85 + 4] + 96 + v88) * *(double *)(*(void *)(v87 + v88) + 8 * v84);
          v88 += 8;
        }
        while (v88 != 24);
        *(double *)(*(void *)(v77 + 8 * (v85 + 4)) + 8 * v84) = *(double *)(*(void *)(v77 + 8 * (v85 + 4)) + 8 * v84)
                                                                + v4 * v89;
        ++v85;
      }
      while (v85 != 3);
      ++v84;
    }
    while (v84 != v76);
    if (v73 != v127 || v73 != v128) {
      goto LABEL_131;
    }
    uint64_t v90 = 1;
    do
    {
      uint64_t v91 = 0;
      unint64_t v92 = v135;
      uint64_t v93 = v126 + 136;
      do
      {
        uint64_t v94 = 0;
        double v95 = 0.0;
        do
        {
          double v95 = v95 + *(double *)(v92[v91 + 9] + 136 + v94) * *(double *)(*(void *)(v93 + v94) + 8 * v90);
          v94 += 8;
        }
        while (v94 != 24);
        *(double *)(*(void *)(v77 + 8 * (v91 + 9)) + 8 * v90) = *(double *)(*(void *)(v77 + 8 * (v91 + 9)) + 8 * v90)
                                                                + v4 * v95;
        ++v91;
      }
      while (v91 != 3);
      ++v90;
    }
    while (v90 != v76);
    if (v73 != v127 || v73 != v128) {
      goto LABEL_129;
    }
    unint64_t v96 = v135;
    uint64_t v97 = v126;
    uint64_t v98 = 1;
    do
    {
      for (uint64_t k = 96; k != 120; k += 8)
        *(double *)(*(void *)(v77 + k) + 8 * v98) = *(double *)(*(void *)(v77 + k) + 8 * v98)
                                                    + *(double *)(v96[(unint64_t)k / 8] + k)
                                                    * v4
                                                    * *(double *)(*(void *)(v97 + k) + 8 * v98);
      ++v98;
    }
    while (v98 != v76);
    if (v73 != v127 || v73 != v128) {
      goto LABEL_129;
    }
    int v100 = v135;
    uint64_t v101 = v126;
    uint64_t v102 = 1;
    do
    {
      for (uint64_t m = 136; m != 160; m += 8)
        *(double *)(*(void *)(v77 + m) + 8 * v102) = *(double *)(*(void *)(v77 + m) + 8 * v102)
                                                     + *(double *)(v100[(unint64_t)m / 8] + m)
                                                     * v4
                                                     * *(double *)(*(void *)(v101 + m) + 8 * v102);
      ++v102;
    }
    while (v102 != v76);
    if (v73 != v127 || v73 != v128) {
      goto LABEL_129;
    }
    uint64_t v104 = v126 + 32;
    uint64_t v105 = v135 + 1;
    uint64_t v106 = 1;
    do
    {
      for (unint64_t n = 0; n != 24; n += 8)
        *(double *)(*(void *)(v77 + 8 + n) + 8 * v106) = *(double *)(*(void *)(v77 + 8 + n) + 8 * v106)
                                                         + *(double *)(v105[n / 8] + n + 32)
                                                         * v4
                                                         * *(double *)(*(void *)(v104 + n) + 8 * v106);
      ++v106;
    }
    while (v106 != v76);
    if (v73 != v127 || v73 != v128)
    {
LABEL_129:
      DeviceFaultNotify("glpe_matrix.h", 609, "mult_sparse_diag_add", (char)"otA.m_NbRows == otA.m_NbCols && otA.m_NbRows == otB.m_NbRows && otA.m_NbCols == otB.m_NbCols");
      int v124 = 609;
      goto LABEL_132;
    }
    uint64_t v108 = v135[7];
    uint64_t v109 = v76 - 1;
    unint64_t v110 = (double *)(*(void *)(v77 + 56) + 8);
    float64x2_t v111 = (double *)(*(void *)(v126 + 64) + 8);
    do
    {
      double v112 = *v111++;
      *unint64_t v110 = *v110 + *(double *)(v108 + 64) * v4 * v112;
      ++v110;
      --v109;
    }
    while (v109);
  }
  BlueFin::BigMatrix::Clone((_DWORD *)(v7 + 656), (const BlueFin::BigMatrix *)v132);
  BlueFin::QuaternionD::q2Rot((BlueFin::QuaternionD *)(v7 + 4688), (uint64_t)v144);
  v137[2] = 0.0;
  v137[1] = 0.0;
  uint64_t v147 = 0;
  uint64_t v148 = 0;
  uint8x8_t v113 = *(double **)(v7 + 5240);
  double v114 = v113[65] * v113[65];
  double v115 = v113[66] * v113[66];
  v137[0] = v113[64] * v113[64];
  v137[4] = 0.0;
  double v138 = v114;
  uint64_t v139 = 0;
  uint64_t v141 = 0;
  long long v140 = v146;
  double v142 = v115;
  uint64_t v143 = 0x300000003;
  BlueFin::Matrix::RotateCovMatrix((BlueFin::Matrix *)v137, (BlueFin::Matrix *)v144);
  double v138 = v138 + 0.01;
  double v142 = v142 + 0.01;
  double v116 = *(void **)(v7 + 664);
  *(double *)(v116[4] + 32) = *(double *)(v116[4] + 32) + (v137[0] + 0.01) * v4 * v4;
  *(double *)(v116[5] + 40) = *(double *)(v116[5] + 40) + v138 * v4 * v4;
  *(double *)(v116[6] + 48) = *(double *)(v116[6] + 48) + v142 * v4 * v4;
  uint64_t v117 = *(double **)(v7 + 5240);
  double v118 = v117[113] * 0.0174532925 * (v117[113] * 0.0174532925) + 0.0000761543549;
  double v119 = v117[114] * 0.0174532925 * (v117[114] * 0.0174532925) + 0.0000761543549;
  double v120 = v117[115] * 0.0174532925 * (v117[115] * 0.0174532925) + 0.0000761543549;
  *(double *)(v116[9] + 72) = *(double *)(v116[9] + 72) + v118 * v4 * v4;
  *(double *)(v116[10] + 80) = *(double *)(v116[10] + 80) + v119 * v4 * v4;
  *(double *)(v116[11] + 88) = *(double *)(v116[11] + 88) + v120 * v4 * v4;
  *(double *)(v116[12] + 96) = v4 * 0.000000025 + *(double *)(v116[12] + 96);
  *(double *)(v116[13] + 104) = v4 * 0.000000025 + *(double *)(v116[13] + 104);
  *(double *)(v116[14] + 112) = v4 * 0.000000025 + *(double *)(v116[14] + 112);
  *(double *)(v116[17] + 136) = v4 * 0.00000000121846968 + *(double *)(v116[17] + 136);
  *(double *)(v116[18] + 144) = v4 * 0.00000000121846968 + *(double *)(v116[18] + 144);
  *(double *)(v116[19] + 152) = v4 * 0.00000000121846968 + *(double *)(v116[19] + 152);
  if (!*(_DWORD *)(*(void *)(v7 + 5248) + 84))
  {
    *(double *)(v116[1] + 8) = *(double *)(v116[1] + 8) + v4 * 0.199809;
    *(double *)(v116[2] + 16) = *(double *)(v116[2] + 16) + v4 * 0.199809;
    *(double *)(v116[3] + 24) = *(double *)(v116[3] + 24) + v4 * 0.799236;
    double v121 = *(double *)(v7 + 5560) / *(double *)(v7 + 5584);
    if (*(double *)(v7 + 5776) / *(double *)(v7 + 5800) >= v121) {
      double v121 = *(double *)(v7 + 5776) / *(double *)(v7 + 5800);
    }
    if (v121 > 10.0 && v121 > 1.0) {
      double v121 = 10.0;
    }
    if (v119 >= v118) {
      double v118 = v119;
    }
    if (v120 >= v118) {
      double v118 = v120;
    }
    double v123 = v118 * (v121 * v121) * v4 * v4;
    *(double *)(v116[15] + 120) = *(double *)(v116[15] + 120) + v123;
    *(double *)(v116[16] + 128) = *(double *)(v116[16] + 128) + v123;
  }
  *(double *)(v116[20] + 160) = *(double *)(v116[20] + 160) + v4 * 0.000001;
  *(double *)(v116[21] + 168) = *(double *)(v116[21] + 168) + v4 * 0.000025;
}

void BlueFin::GlPeShrimpKf::GnssUpdate(BlueFin::GlPeShrimpKf *this, const BlueFin::GlPeNavGnssState *a2)
{
  uint64_t v510 = *MEMORY[0x263EF8340];
  int v5 = *(_DWORD *)(*((void *)this + 654) + 8);
  if (v5 == 3)
  {
    if (!*((unsigned char *)this + 48))
    {
      uint64_t v6 = (void *)((char *)this + 16);
LABEL_7:
      *uint64_t v6 = 0x3FB999999999999ALL;
      char v7 = 1;
      double v8 = 12.5;
      char v9 = 10;
      double v10 = 1.5;
      goto LABEL_10;
    }
LABEL_6:
    char v7 = 1;
    goto LABEL_11;
  }
  uint64_t v6 = (void *)((char *)this + 16);
  char v7 = *((unsigned char *)this + 48);
  if (v5 == 2)
  {
    if (!*((unsigned char *)this + 48)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (!*((unsigned char *)this + 48)) {
    goto LABEL_11;
  }
  char v7 = 0;
  *uint64_t v6 = 0x3FD999999999999ALL;
  char v9 = 3;
  double v10 = 2.0;
  double v8 = 83.3000031;
LABEL_10:
  *((double *)this + 3) = v10;
  *((unsigned char *)this + 32) = v9;
  *((double *)this + 5) = v8;
LABEL_11:
  *((unsigned char *)this + 48) = v7;
  int v11 = *((_DWORD *)a2 + 50);
  if (v11 == *((_DWORD *)this + 1215))
  {
    v405 = "ulIntervalMs > 0";
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1324, "GnssUpdate", (char)"ulIntervalMs > 0");
    int v406 = 1324;
    goto LABEL_374;
  }
  uint64_t v12 = (char *)this + 5392;
  uint64_t v13 = (_OWORD *)((char *)this + 5112);
  uint64_t v14 = (double *)((char *)this + 4584);
  uint64_t v15 = (_OWORD *)((char *)this + 544);
  if (!*((unsigned char *)a2 + 240))
  {
    *((_DWORD *)this + 163) = 0;
    *uint64_t v15 = 0u;
    *((_OWORD *)this + 35) = 0u;
    *((_OWORD *)this + 38) = 0u;
    *((_OWORD *)this + 39) = 0u;
    *(_OWORD *)((char *)this + 634) = 0u;
    goto LABEL_28;
  }
  int v16 = *((_DWORD *)this + 163);
  if (v16)
  {
    unsigned int v17 = v11 - v16;
    if (!v17 || v17 >= 0x5DC)
    {
      *((_DWORD *)this + 163) = 0;
      *uint64_t v15 = 0u;
      *((_OWORD *)this + 35) = 0u;
      *((_OWORD *)this + 38) = 0u;
      *((_OWORD *)this + 39) = 0u;
      *(_OWORD *)((char *)this + 634) = 0u;
    }
  }
  double v18 = sqrt(*((double *)a2 + 14) * *((double *)a2 + 14) + *((double *)a2 + 13) * *((double *)a2 + 13));
  double v19 = *((float *)a2 + 32);
  double v20 = v18 - *((double *)this + 68);
  *((double *)this + 80) = *((double *)this + 80) + (v18 - *((double *)this + 80)) * 0.899999976;
  uint64_t v21 = *((unsigned __int8 *)this + 648);
  if (*((char *)this + 648) <= 0)
  {
    *((double *)this + 68) = v18;
    *((double *)this + 72) = v19;
    char v25 = v21 + 1;
    *((double *)this + 76) = v20;
LABEL_26:
    *((unsigned char *)this + 648) = v25;
    goto LABEL_27;
  }
  uint64_t v22 = (void *)((char *)this + 8 * v21 + 608);
  unint64_t v23 = *((unsigned __int8 *)this + 648);
  do
  {
    *(v22 - 8) = *((void *)v15 + (v23 - 1));
    uint64_t v24 = (char *)this + 8 * (v23 - 1);
    *(v22 - 4) = *((void *)v24 + 72);
    *v22-- = *((void *)v24 + 76);
    BOOL v400 = v23-- > 1;
  }
  while (v400);
  *((double *)this + 68) = v18;
  *((double *)this + 72) = v19;
  *((double *)this + 76) = v20;
  *((unsigned char *)this + 648) = v21 + 1;
  if ((v21 + 1) == 4)
  {
    *((unsigned char *)this + 649) = 1;
LABEL_25:
    char v25 = 3;
    goto LABEL_26;
  }
  if ((char)(v21 + 1) >= 4) {
    goto LABEL_25;
  }
LABEL_27:
  *((_DWORD *)this + 163) = v11;
LABEL_28:
  uint64_t v26 = (double *)((char *)this + 4688);
  *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4720));
  *((void *)&v502 + 1) = v27;
  *(void *)&v503[0] = v28;
  *((void *)&v503[0] + 1) = v29;
  *((double *)this + 598) = BlueFin::QuaternionD::operator*((double *)this + 586, (double *)&v502);
  *((void *)this + 599) = v30;
  *((void *)this + 600) = v31;
  *((void *)this + 601) = v32;
  long long v33 = *((_OWORD *)this + 294);
  v414[0] = *((_OWORD *)this + 293);
  v414[1] = v33;
  int v34 = *((_DWORD *)this + 2);
  if (v34 != 2)
  {
    if (v34 != 1)
    {
      if (!v34)
      {
        BlueFin::GlPeShrimpKf::DoInitNoneGnss(this, a2);
        goto LABEL_207;
      }
      v405 = "false";
      DeviceFaultNotify("glpe_shrimpkf.cpp", 1365, "GnssUpdate", (char)"false");
      int v406 = 1365;
LABEL_374:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", v406, v405);
    }
    BlueFin::GlPeShrimpKf::DoInitNoneGnss(this, a2);
    int v37 = *((_DWORD *)this + 1212);
    if (!v37)
    {
      if (*(_DWORD *)(*((void *)this + 654) + 8) == 3) {
        goto LABEL_50;
      }
      if (!BlueFin::GlPeShrimpKf::IsNotTurning(this, 2.0)) {
        goto LABEL_50;
      }
      uint64_t v38 = (char *)this + *(void *)(*(void *)this - 24);
      if ((*((_DWORD *)v38 + 50) - *((_DWORD *)this + 1217)) >> 4 > 0x752) {
        goto LABEL_50;
      }
      *(void *)&v503[7] = 0;
      uint64_t v39 = *((void *)this + 616);
      *(void *)&long long v502 = *((void *)this + 615);
      *(void *)&v503[1] = v39;
      *(void *)&v503[3] = *((void *)this + 617);
      BlueFin::QuaternionD::rotVec((BlueFin::GlPeShrimpKf *)((char *)this + 4816), (const BlueFin::Matrix *)&v502, (BlueFin::Matrix *)v427);
      int v37 = 0;
      *((void *)&v450 + 1) = *((void *)this + 618);
      double v448 = *(double *)v427;
      double v449 = *(double *)v429;
      *(void *)&long long v450 = 0;
      if (sqrt(v449 * v449 + v448 * v448) > 0.8)
      {
        float v40 = sqrt(*((double *)v38 + 14) * *((double *)v38 + 14) + *((double *)v38 + 13) * *((double *)v38 + 13))
            - *((double *)this + 630);
        float v41 = -v40;
        if (v40 >= 0.0) {
          float v41 = v40;
        }
        if (v41 > 1.0)
        {
          *(double *)&long long v502 = v40;
          *((void *)&v502 + 1) = 0;
          v503[0] = 0uLL;
          v427[0] = (BlueFin::SKFVector *)0x3FF0000000000000;
          v427[1] = 0;
          long long v428 = 0uLL;
          BlueFin::QuaternionD::rotateV1toV2((double *)v427, &v448, (double *)&v502);
          *((double *)this + 602) = BlueFin::QuaternionD::operator*((double *)v427, (double *)this + 602);
          *((void *)this + 603) = v42;
          *((void *)this + 604) = v43;
          *((void *)this + 605) = v44;
          *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
          *((void *)&v444 + 1) = v45;
          *(void *)&long long v445 = v46;
          *((void *)&v445 + 1) = v47;
          BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v444, &v439, &v454, &v479);
          int v37 = 1;
          *((_DWORD *)this + 1212) = 1;
          goto LABEL_51;
        }
LABEL_50:
        int v37 = 0;
      }
    }
LABEL_51:
    if (*((float *)a2 + 20) >= 15.0 || *((float *)a2 + 32) >= 1.0 || !*((_DWORD *)a2 + 51)) {
      goto LABEL_207;
    }
    double v48 = *((double *)a2 + 13);
    double v49 = *((double *)a2 + 14);
    double v50 = sqrt(v48 * v48 + v49 * v49);
    uint64_t v497 = 0;
    uint64_t v496 = 0;
    double v51 = *((double *)this + 609);
    double v52 = *((double *)this + 610);
    double v494 = v48 - v51;
    double v495 = v49 - v52;
    double v53 = sqrt(v495 * v495 + v494 * v494);
    uint64_t v54 = *(void *)this;
    uint64_t v55 = (double *)((char *)this + *(void *)(*(void *)this - 24));
    double v56 = v55[14];
    double v411 = v55[15];
    double v490 = v55[13] - v51;
    double v491 = v56 - v52;
    uint64_t v493 = 0;
    uint64_t v492 = 0;
    double v57 = sqrt(v491 * v491 + v490 * v490);
    double v58 = vabdd_f64(v53, v57);
    if (v58 > *((double *)this + 612)) {
      *((double *)this + 612) = v58;
    }
    double v59 = atan2(v49, v48);
    double v60 = *((double *)this + 3);
    if (v50 > v60 && BlueFin::GlPeShrimpKf::IsNotTurning(this, 2.0) && *((float *)a2 + 46) < 0.174532925)
    {
      for (double i = v59 - *((double *)this + 614); i > 3.14159265; double i = i + -6.28318531)
        ;
      for (; i <= -3.14159265; double i = i + 6.28318531)
        ;
      BOOL v62 = fabs(i) >= 0.174532925;
    }
    else
    {
      BOOL v62 = 1;
    }
    *((double *)this + 614) = v59;
    if (v37 == 2)
    {
      char v63 = (*(_DWORD *)((char *)this + *(void *)(v54 - 24) + 200) - *((_DWORD *)this + 1259)) > 0x927BF
         || v62;
      if (v63)
      {
        if (v58 <= 5.0) {
          goto LABEL_174;
        }
LABEL_73:
        *((_DWORD *)this + 2) = 0;
        goto LABEL_207;
      }
      v503[0] = 0uLL;
      *(double *)&long long v502 = v48;
      *((double *)&v502 + 1) = v49;
      long long v428 = 0uLL;
      v427[0] = (BlueFin::SKFVector *)0x3FF0000000000000;
      v427[1] = 0;
      double v448 = 1.0;
      double v449 = 0.0;
      long long v450 = 0uLL;
      BlueFin::QuaternionD::rotateV1toV2(&v448, (double *)&v502, (double *)v427);
      double v479 = 0.0;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v448, &v439, &v454, &v479);
      float v74 = v479;
      *(float *)((char *)this + *(void *)(*(void *)this - 24) + 176) = v74;
      *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
      *((void *)&v444 + 1) = v75;
      *(void *)&long long v445 = v76;
      *((void *)&v445 + 1) = v77;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v444, &v439, &v454, &v479);
      *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v448);
      *((void *)&v444 + 1) = v78;
      *(void *)&long long v445 = v79;
      *((void *)&v445 + 1) = v80;
      *((double *)this + 586) = BlueFin::QuaternionD::operator*((double *)&v444, (double *)this + 602);
      *((void *)this + 587) = v81;
      *((void *)this + 588) = v82;
      *((void *)this + 589) = v83;
      *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4688));
      *((void *)&v444 + 1) = v84;
      *(void *)&long long v445 = v85;
      *((void *)&v445 + 1) = v86;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v444, &v439, &v454, &v479);
      uint64_t v87 = *(void *)this;
      uint64_t v88 = (char *)this + *(void *)(*(void *)this - 24);
      *(_OWORD *)(v88 + 104) = *(_OWORD *)((char *)a2 + 104);
      *((void *)v88 + 15) = *((void *)a2 + 15);
      *((_DWORD *)this + 2) = 2;
    }
    else
    {
      if (v58 > 5.0) {
        goto LABEL_73;
      }
      if (v37 != 1) {
        goto LABEL_174;
      }
      BOOL v89 = v57 <= v60;
      if (v53 <= v60) {
        BOOL v89 = 1;
      }
      if (v89 || v62) {
        goto LABEL_174;
      }
      long long v450 = 0uLL;
      double v448 = v48;
      double v449 = v49;
      long long v445 = 0uLL;
      long long v444 = 0x3FF0000000000000uLL;
      double v439 = 1.0;
      v440 = 0;
      long long v441 = 0uLL;
      BlueFin::QuaternionD::rotateV1toV2(&v439, &v448, (double *)&v444);
      *(void *)&long long v462 = 0;
      v461[0] = 0.0;
      v460[0] = 0.0;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v439, (long double *)&v462, v461, v460);
      long double v90 = v460[0];
      float v91 = v460[0];
      *(float *)((char *)this + *(void *)(*(void *)this - 24) + 176) = v91;
      *((long double *)this + 628) = v90;
      double v454 = 1.0;
      v455 = 0;
      uint64_t v457 = 0;
      uint64_t v456 = 0;
      BlueFin::QuaternionD::rotateV1toV2(&v454, &v490, &v494);
      double v479 = BlueFin::QuaternionD::operator*(&v454, (double *)this + 586);
      uint64_t v480 = v92;
      uint64_t v481 = v93;
      uint64_t v482 = v94;
      v478[0] = BlueFin::QuaternionD::operator*(&v439, &v479);
      v478[1] = v95;
      v478[2] = v96;
      v478[3] = v97;
      double v471 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v478);
      uint64_t v472 = v98;
      uint64_t v473 = v99;
      uint64_t v474 = v100;
      *(void *)&v503[7] = 0;
      *(void *)&long long v502 = 0x3FF0000000000000;
      *(void *)&v503[1] = 0;
      *(void *)&v503[3] = 0;
      BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)&v471, (const BlueFin::Matrix *)&v502, (BlueFin::Matrix *)v427);
      uint64_t v101 = v427[0];
      double v102 = *(double *)v429;
      double v103 = *(double *)&v430;
      double v471 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
      uint64_t v472 = v104;
      uint64_t v473 = v105;
      uint64_t v474 = v106;
      *(void *)&v503[7] = 0;
      *(void *)&long long v502 = 0x3FF0000000000000;
      *(void *)&v503[1] = 0;
      *(void *)&v503[3] = 0;
      BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)&v471, (const BlueFin::Matrix *)&v502, (BlueFin::Matrix *)v427);
      double v107 = v102 * *(double *)v429 + *(double *)&v101 * *(double *)v427 + v103 * *(double *)&v430;
      if (fabs(v107) <= 0.7)
      {
        *((_DWORD *)this + 1212) = 0;
        goto LABEL_174;
      }
      if (v107 < 0.0)
      {
        v455 = 0;
        double v454 = 0.0;
        uint64_t v456 = 0;
        uint64_t v457 = 0x3FF0000000000000;
        *((double *)this + 602) = BlueFin::QuaternionD::operator*(&v454, (double *)this + 602);
        *((void *)this + 603) = v108;
        *((void *)this + 604) = v109;
        *((void *)this + 605) = v110;
      }
      *((_DWORD *)this + 1212) = 2;
      *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
      *((void *)&v502 + 1) = v111;
      *(void *)&v503[0] = v112;
      *((void *)&v503[0] + 1) = v113;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v502, (long double *)&v462, v461, v460);
      *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v439);
      *((void *)&v502 + 1) = v114;
      *(void *)&v503[0] = v115;
      *((void *)&v503[0] + 1) = v116;
      *((double *)this + 586) = BlueFin::QuaternionD::operator*((double *)&v502, (double *)this + 602);
      *((void *)this + 587) = v117;
      *((void *)this + 588) = v118;
      *((void *)this + 589) = v119;
      *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4688));
      *((void *)&v502 + 1) = v120;
      *(void *)&v503[0] = v121;
      *((void *)&v503[0] + 1) = v122;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v502, (long double *)&v462, v461, v460);
      uint64_t v87 = *(void *)this;
      double v123 = (char *)this + *(void *)(*(void *)this - 24);
      *(_OWORD *)(v123 + 104) = *(_OWORD *)((char *)a2 + 104);
      *((void *)v123 + 15) = *((void *)a2 + 15);
      *((_DWORD *)this + 2) = 2;
    }
    *(_DWORD *)((char *)this + *(void *)(v87 - 24) + 204) = 1;
    *((unsigned char *)this + *(void *)(v87 - 24) + 241) = 1;
    *((unsigned char *)this + *(void *)(v87 - 24) + 240) = 1;
    *((_DWORD *)this + 1254) = *((_DWORD *)a2 + 50);
    *(_DWORD *)((char *)this + *(void *)(v87 - 24) + 196) = 0;
LABEL_174:
    if (*((_DWORD *)this + 2) == 1 && *((double *)this + 612) < 2.0)
    {
      double v213 = *((double *)this + 3);
      BOOL v214 = v53 <= v213;
      if (v57 <= v213) {
        BOOL v214 = 1;
      }
      if (!v62 && !v214)
      {
        double v408 = v53 - v57;
        *(double *)&v409 = v53;
        v489[0] = 1.0;
        memset(&v489[1], 0, 24);
        BlueFin::QuaternionD::rotateV1toV2(v489, &v490, &v494);
        *((double *)this + 586) = BlueFin::QuaternionD::operator*(v489, (double *)this + 586);
        *((void *)this + 587) = v215;
        *((void *)this + 588) = v216;
        *((void *)this + 589) = v217;
        v488[3] = 0.0;
        v488[2] = 0.0;
        v488[0] = v48;
        v488[1] = v49;
        v487[0] = 1.0;
        memset(&v487[1], 0, 24);
        v486[0] = 1.0;
        memset(&v486[1], 0, 24);
        BlueFin::QuaternionD::rotateV1toV2(v486, v488, v487);
        *((double *)this + 602) = BlueFin::QuaternionD::operator*(v486, (double *)this + 586);
        *((void *)this + 603) = v218;
        *((void *)this + 604) = v219;
        *((void *)this + 605) = v220;
        double v479 = v490;
        double v483 = v491;
        double v221 = *((double *)this + 611);
        uint64_t v485 = 0x100000003;
        double v484 = v411 - v221;
        v478[16] = 0.0;
        BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)v489, (const BlueFin::Matrix *)&v479, (BlueFin::Matrix *)v478);
        long double v222 = *((double *)this + 610) + v478[4];
        long double v223 = v221 + v478[8];
        v224 = (double *)((char *)this + *(void *)(*(void *)this - 24));
        v224[13] = *((double *)this + 609) + v478[0];
        v224[14] = v222;
        v224[15] = v223;
        double v477 = 0.0;
        double v476 = 0.0;
        double v475 = 0.0;
        *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4688));
        *((void *)&v502 + 1) = v225;
        *(void *)&v503[0] = v226;
        *((void *)&v503[0] + 1) = v227;
        BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v502, &v477, &v476, &v475);
        BlueFin::QuaternionD::q2Rot((BlueFin::GlPeShrimpKf *)((char *)this + 4688), (uint64_t)&v471);
        uint64_t v470 = 0x300000003;
        long long v462 = xmmword_263BBBCC0;
        __double2 v228 = __sincos_stret(v476);
        double v463 = -v228.__sinval;
        uint64_t v464 = 0;
        __double2 v229 = __sincos_stret(v477);
        double cosval = v229.__cosval;
        double v466 = v228.__cosval * v229.__sinval;
        uint64_t v467 = 0;
        double sinval = v228.__sinval;
        double v469 = v228.__cosval * v229.__cosval;
        v461[16] = 0.0;
        BlueFin::Matrix::mult((uint64_t)v461, (const BlueFin::Matrix *)&v471, (const BlueFin::Matrix *)&v462);
        v230 = (char *)v503 + 8;
        v503[0] = xmmword_263BBCD30;
        *(void *)&long long v502 = &v503[1];
        *((void *)&v502 + 1) = v507;
        *(void *)&v507[0] = 0;
        for (uint64_t j = 8; j != 56; j += 8)
        {
          *(void *)(*((void *)&v502 + 1) + j) = v230;
          v230 += 48;
        }
        BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v502, 6, 6);
        v232 = (void *)*((void *)&v502 + 1);
        v233 = *(long double **)(*((void *)&v502 + 1) + 8);
        v233[1] = v461[0];
        v233[2] = v461[1];
        v233[3] = v461[2];
        v234 = (long double *)v232[2];
        v234[1] = v461[4];
        v234[2] = v461[5];
        v234[3] = v461[6];
        v235 = (long double *)v232[3];
        v235[1] = v461[8];
        v235[2] = v461[9];
        v235[3] = v461[10];
        *(void *)(v232[4] + 32) = 0x3FF0000000000000;
        *(void *)(v232[5] + 40) = 0x3FF0000000000000;
        *(void *)(v232[6] + 48) = 0x3FF0000000000000;
        v236 = (double *)*((void *)this + 655);
        double v237 = v236[29];
        double v238 = v236[30];
        double v240 = v236[41];
        double v239 = v236[42];
        double v241 = v236[53];
        double v242 = v236[54];
        *(void *)&v460[16] = 0x100000003;
        v460[0] = 0.0;
        v460[4] = 0.0;
        v460[8] = -9.81;
        double v412 = v237;
        *(double *)v459 = v237;
        *(double *)&v459[4] = v240;
        v459[16] = 0x100000003;
        double v407 = v241;
        *(double *)&v459[8] = v241;
        BlueFin::Matrix::mult((uint64_t)v458, 0, (const BlueFin::Matrix *)&v471, (const BlueFin::Matrix *)v460);
        BlueFin::Matrix::operator-((uint64_t)v459, (uint64_t)v458, (uint64_t)v427);
        v243 = v427[0];
        double v244 = *(double *)v429;
        double v245 = *(double *)&v430;
        BlueFin::BigMatrixDim<4,4>::BigMatrixDim((BlueFin::BigMatrix *)&v454, 4, 4);
        v246 = v455;
        *(double *)(v455[1] + 8) = v238 * v238 + *(double *)&v243 * *(double *)&v243;
        *(double *)(v246[2] + 16) = v239 * v239 + v244 * v244;
        *(double *)(v246[3] + 24) = v242 * v242 + v245 * v245;
        *(double *)(v246[4] + 32) = (float)(*((float *)a2 + 46) * *((float *)a2 + 46));
        v247 = (char *)&v450 + 8;
        long long v450 = xmmword_263BBCD40;
        double v448 = COERCE_DOUBLE(v451);
        double v449 = COERCE_DOUBLE(v453);
        v453[0] = 0;
        for (uint64_t k = 8; k != 56; k += 8)
        {
          *(void *)(*(void *)&v449 + k) = v247;
          v247 += 32;
        }
        BlueFin::BigMatrix::Clone((BlueFin::BigMatrix *)&v448, 6, 4);
        double v249 = v407;
        double v250 = sqrt(v240 * v240 + v249 * v249);
        double v251 = v249 * v249 + v412 * v412 + v240 * v240;
        double v252 = v449;
        uint64_t v253 = *(void *)(*(void *)&v449 + 8);
        *(double *)(v253 + 16) = v407 / (v250 * v250);
        *(double *)(v253 + 24) = -v240 / (v250 * v250);
        double v254 = v250 / v251;
        v255 = *(double **)(*(void *)&v252 + 16);
        double v256 = v251 * v250;
        v255[1] = v254;
        v255[2] = -(v412 * v240) / v256;
        v255[3] = -(v412 * v407) / v256;
        *(void *)(*(void *)(*(void *)&v252 + 24) + 32) = 0x3FF0000000000000;
        *(void *)(*(void *)(*(void *)&v252 + 32) + 8) = 0x3FF0000000000000;
        *(void *)(*(void *)(*(void *)&v252 + 40) + 16) = 0x3FF0000000000000;
        *(void *)(*(void *)(*(void *)&v252 + 48) + 24) = 0x3FF0000000000000;
        v257 = (char *)&v445 + 8;
        long long v445 = xmmword_263BBCD40;
        *(void *)&long long v444 = &v446;
        *((void *)&v444 + 1) = &v447;
        uint64_t v447 = 0;
        for (uint64_t m = 8; m != 56; m += 8)
        {
          *(void *)(*((void *)&v444 + 1) + m) = v257;
          v257 += 32;
        }
        BlueFin::BigMatrix::mult((uint64_t)&v444, (const BlueFin::BigMatrix *)&v502, (const BlueFin::BigMatrix *)&v448);
        v259 = (char *)&v441 + 8;
        long long v441 = xmmword_263BBCD50;
        double v439 = COERCE_DOUBLE(&v442);
        v440 = &v443;
        uint64_t v443 = 0;
        for (uint64_t n = 1; n != 5; ++n)
        {
          v440[n] = (uint64_t)v259;
          v259 += 48;
        }
        BlueFin::BigMatrix::mult((uint64_t)&v439, (const BlueFin::BigMatrix *)&v454, 1, (const BlueFin::BigMatrix *)&v444);
        v261 = (char *)&v428 + 8;
        long long v428 = xmmword_263BBCD30;
        v427[0] = (BlueFin::SKFVector *)v429;
        v427[1] = (BlueFin::SKFVector *)&v438;
        uint64_t v438 = 0;
        for (idouble i = 8; ii != 56; ii += 8)
        {
          *(void *)((char *)v427[1] + ii) = v261;
          v261 += 48;
        }
        BlueFin::BigMatrix::mult((uint64_t)v427, (const BlueFin::BigMatrix *)&v444, (const BlueFin::BigMatrix *)&v439);
        double v420 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
        uint64_t v421 = v263;
        uint64_t v422 = v264;
        uint64_t v423 = v265;
        BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v420, &v477, &v476, &v475);
        *((_DWORD *)this + 1212) = 2;
        double v420 = v58 * 0.5 * (v58 * 0.5);
        uint64_t v421 = 0;
        uint64_t v424 = 0;
        double v425 = v420;
        uint64_t v426 = 0x200000002;
        BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)v489, (const BlueFin::Matrix *)&v479, (BlueFin::Matrix *)v416);
        uint64_t v419 = 0x200000002;
        uint64_t v417 = 0;
        uint64_t v418 = 0;
        BlueFin::Matrix::RotateCovMatrix((BlueFin::Matrix *)&v420, (BlueFin::Matrix *)v416);
        v266 = (void *)*((void *)this + 83);
        uint64_t v267 = v266[4];
        double v268 = *(double *)(v267 + 32);
        if (v420 >= v268) {
          double v268 = v420;
        }
        *(double *)(v267 + 32) = v268;
        uint64_t v269 = v266[5];
        double v270 = *(double *)(v269 + 40);
        HIDWORD(v271) = HIDWORD(v425);
        if (v425 >= v270) {
          double v270 = v425;
        }
        *(double *)(v269 + 40) = v270;
        LODWORD(v270) = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
        LODWORD(v271) = *((_DWORD *)this + 1217);
        double v272 = ((double)*(unint64_t *)&v270 - (double)v271) * 0.001;
        uint64_t v273 = v266[9];
        double v274 = *(double *)(v273 + 72);
        v275 = v427[1];
        if (v274 >= v272 * *(double *)(*((void *)v427[1] + 1) + 8)) {
          double v274 = v272 * *(double *)(*((void *)v427[1] + 1) + 8);
        }
        *(double *)(v273 + 72) = v274;
        uint64_t v276 = v266[10];
        double v277 = *(double *)(v276 + 80);
        uint64_t v278 = *((void *)v275 + 2);
        if (v277 >= v272 * *(double *)(v278 + 16)) {
          double v277 = v272 * *(double *)(v278 + 16);
        }
        *(double *)(v276 + 80) = v277;
        uint64_t v279 = v266[11];
        double v280 = *(double *)(v279 + 88);
        float v281 = v408;
        float v282 = *(double *)&v409;
        float v283 = atan2f(fabsf(v281), v282);
        float v284 = v283 + v283;
        if (*((float *)a2 + 46) >= v284) {
          float v284 = *((float *)a2 + 46);
        }
        double v285 = (float)(v284 * v284);
        if (v280 <= v285) {
          double v286 = v285;
        }
        else {
          double v286 = v280;
        }
        *(double *)(v279 + 88) = v286;
        uint64_t v287 = v266[15];
        double v288 = *(double *)(v287 + 120);
        if (v288 >= v272 * *(double *)(v278 + 16)) {
          double v288 = v272 * *(double *)(v278 + 16);
        }
        *(double *)(v287 + 120) = v288;
        uint64_t v289 = v266[16];
        if (*(double *)(v289 + 128) > v285) {
          double v285 = *(double *)(v289 + 128);
        }
        *(double *)(v289 + 128) = v285;
        double v498 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
        uint64_t v499 = v290;
        uint64_t v500 = v291;
        uint64_t v501 = v292;
        uint64_t v26 = (double *)((char *)this + 4688);
        v415[0] = BlueFin::QuaternionD::operator*((double *)this + 586, &v498);
        v415[1] = v293;
        v415[2] = v294;
        v415[3] = v295;
        double v498 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v415);
        uint64_t v499 = v296;
        uint64_t v500 = v297;
        uint64_t v501 = v298;
        BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v498, &v477, &v476, &v475);
        uint64_t v299 = *(void *)this;
        long double v300 = v475;
        float v301 = v475;
        *(float *)((char *)this + *(void *)(*(void *)this - 24) + 176) = v301;
        *((long double *)this + 628) = v300;
        *((_DWORD *)this + 2) = 2;
        *(_DWORD *)((char *)this + *(void *)(v299 - 24) + 204) = 1;
        *((unsigned char *)this + *(void *)(v299 - 24) + 241) = 1;
        *((unsigned char *)this + *(void *)(v299 - 24) + 240) = 1;
        *((_DWORD *)this + 1254) = *((_DWORD *)a2 + 50);
        *(_DWORD *)((char *)this + *(void *)(v299 - 24) + 196) = 0;
        uint64_t v14 = (double *)((char *)this + 4584);
      }
    }
    goto LABEL_207;
  }
  *((_WORD *)this + 2660) = 0;
  if (*(unsigned __int16 *)(*((void *)this + 655) + 162) >= **((unsigned __int16 **)this + 655)
    && (!*((unsigned char *)this + *(void *)(*(void *)this - 24) + 240) || *((double *)this + 630) < 6.0822)
    && ((*(void (**)(BlueFin::GlPeShrimpKf *, const BlueFin::GlPeNavGnssState *))(*(void *)this + 24))(this, a2), int v35 = *((unsigned __int8 *)a2 + 240), *((unsigned char *)this + 5320) = v35, v35)|| *((unsigned char *)this + 5322))
  {
    *((double *)this + 666) = sqrt(*((double *)a2 + 14) * *((double *)a2 + 14)+ *((double *)a2 + 13) * *((double *)a2 + 13));
    *((_DWORD *)this + 1259) = *((_DWORD *)a2 + 50);
    if (*((_DWORD *)this + 2) != 2 || !*((unsigned char *)this + 5824))
    {
      if (*((unsigned char *)this + 5825))
      {
        LODWORD(v36) = 1;
      }
      else
      {
        double v448 = 0.0;
        *(void *)&long long v444 = 0;
        double v439 = 0.0;
        *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
        *((void *)&v502 + 1) = v64;
        *(void *)&v503[0] = v65;
        *((void *)&v503[0] + 1) = v66;
        v427[0] = COERCE_BLUEFIN_SKFVECTOR_(BlueFin::QuaternionD::operator*((double *)this + 586, (double *)&v502));
        v427[1] = v67;
        *(void *)&long long v428 = v68;
        *((void *)&v428 + 1) = v69;
        *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v427);
        *((void *)&v502 + 1) = v70;
        *(void *)&v503[0] = v71;
        *((void *)&v503[0] + 1) = v72;
        BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v502, &v448, (long double *)&v444, &v439);
        for (juint64_t j = v439 - *((double *)this + 628); jj > 3.14159265; juint64_t j = jj + -6.28318531)
          ;
        for (; jj <= -3.14159265; juint64_t j = jj + 6.28318531)
          ;
        if (jj < 0.0) {
          juint64_t j = -jj;
        }
        LODWORD(v36) = jj >= 0.785398163;
        *((unsigned char *)this + 5825) = (_BYTE)v36;
      }
      if ((*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200)
                        - *((_DWORD *)this + 1254)) <= 0xEA60)
      {
        if (v36)
        {
          uint64_t v36 = (void *)*((void *)this + 83);
          LOBYTE(v36) = *(double *)(v36[12] + 96) < 0.0025
                     && *(double *)(v36[13] + 104) < 0.0025
                     && *(double *)(v36[14] + 112) < 0.0025;
        }
      }
      else
      {
        LOBYTE(v36) = 1;
      }
      *((unsigned char *)this + 5824) = (_BYTE)v36;
    }
  }
  int v124 = (int *)*((void *)this + 658);
  int v125 = *v124;
  if (*v124 != 1) {
    *((_WORD *)this + 2426) = 1;
  }
  uint64_t v126 = *(void *)this;
  uint64_t v127 = *(void *)this;
  uint64_t v128 = *(void *)(*(void *)this - 24);
  if (!*((unsigned char *)this + 5827))
  {
    uint64_t v129 = (double *)((char *)this + v128);
    int v130 = *(_DWORD *)((char *)this + v128 + 200);
    uint64_t v131 = *((void *)this + 656);
    if ((double)(v130 - *(_DWORD *)(v131 + 100)) * 0.001 > 40.0
      && *(_DWORD *)(v131 + 84) != 1
      && BlueFin::GlPeShrimpKf::IsNotTurning(this, 3.0)
      && (*(unsigned __int16 *)(*((void *)this + 655) + 162) >= **((unsigned __int16 **)this + 655)
       && (!*((unsigned char *)v129 + 240) || *((double *)this + 630) < 6.0822)
       || sqrt(v129[14] * v129[14] + v129[13] * v129[13]) < 1.5))
    {
      if (v125 == 1 && *((unsigned char *)this + 4852)) {
        *((_WORD *)this + 2426) = 256;
      }
      if (!*((unsigned char *)this + 4853)) {
        goto LABEL_115;
      }
      *(_OWORD *)v427 = *((_OWORD *)v124 + 3);
      *(void *)&long long v428 = *((void *)v124 + 8);
      BlueFin::lla2ned((double *)v427, (double *)((char *)this + *(void *)(v127 - 24) + 8), 0, (double *)&v502);
      if (sqrt(*((double *)&v502 + 1) * *((double *)&v502 + 1) + *(double *)v503 * *(double *)v503) < 1000.0)
      {
        uint64_t v126 = *(void *)this;
LABEL_115:
        BlueFin::lla2ned((double *)((char *)this + *(void *)(v126 - 24) + 32), (double *)((char *)this + *(void *)(v126 - 24) + 8), 0, (double *)&v502);
        *(void *)&v429[0] = *((void *)&v502 + 1);
        v427[0] = (BlueFin::SKFVector *)v502;
        *(void *)&long long v434 = 0x100000003;
        *(void *)&long long v430 = *(void *)&v503[0];
        *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 232));
        *((void *)&v502 + 1) = v132;
        *(void *)&v503[0] = v133;
        *((void *)&v503[0] + 1) = v134;
        *(void *)&long long v444 = BlueFin::QuaternionD::operator*((double *)this + 25, (double *)&v502);
        *((void *)&v444 + 1) = v135;
        *(void *)&long long v445 = v136;
        *((void *)&v445 + 1) = v137;
        uint64_t v452 = 0;
        BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)&v444, (const BlueFin::Matrix *)v427, (BlueFin::Matrix *)&v448);
        double v2 = v451[0];
        double v138 = *(float *)((char *)this + *(void *)(*(void *)this - 24) + 180);
        *(void *)&long long v502 = v503;
        *((void *)&v502 + 1) = 0x1500000015;
        memset((char *)&v503[1] + 8, 0, 152);
        *(void *)&v503[0] = 0;
        __double2 v139 = __sincos_stret(v138);
        *((double *)v503 + 1) = -v139.__sinval;
        *(double *)&v503[1] = v139.__cosval;
        BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 18, v2, 0.01, 3.0, v140, 0);
      }
    }
  }
  int v141 = *((_DWORD *)a2 + 51);
  uint64_t v26 = (double *)((char *)this + 4688);
  if (*((unsigned char *)this + 5827) && v141)
  {
    double v142 = *((float *)a2 + 20);
    double v143 = *((float *)a2 + 21);
    BlueFin::lla2ned((double *)a2 + 1, (double *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, (double *)&v502);
    long long v144 = v502;
    double v2 = *(double *)v503;
    *((void *)&v502 + 1) = 0x1500000015;
    *(void *)&long long v502 = v503;
    memset(&v503[1], 0, 160);
    *(void *)&v503[0] = 0;
    *((void *)&v503[0] + 1) = 0x3FF0000000000000;
    *(void *)&v503[10] = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 104);
    long double v145 = v142 * v142;
    BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 0, *(double *)&v144, v145, 5.0, v146, 0);
    uint64_t v147 = v502;
    bzero((void *)(v502 + 8), 8 * SDWORD2(v502));
    *(void *)(v147 + 16) = 0x3FF0000000000000;
    *(void *)(v147 + 160) = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 112);
    BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 1, *((double *)&v144 + 1), v145, 5.0, v148, 0);
    uint64_t v149 = v502;
    bzero((void *)(v502 + 8), 8 * SDWORD2(v502));
    *(void *)(v149 + 24) = 0x3FF0000000000000;
    *(void *)(v149 + 160) = *(void *)((char *)this + *(void *)(*(void *)this - 24) + 120);
    BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 2, v2, v143 * v143, 5.0, v150, 0);
    *((unsigned char *)this + 5321) = 1;
    int v141 = *((_DWORD *)a2 + 51);
  }
  if (v141 == 3) {
    BlueFin::GlPeShrimpKf::ApplyYawMeas(this, *((float *)a2 + 44), *((float *)a2 + 46));
  }
  (*(void (**)(BlueFin::GlPeShrimpKf *))(*(void *)this + 32))(this);
  uint64_t v14 = (double *)((char *)this + 4584);
  if (*(unsigned __int16 *)(*((void *)this + 655) + 162) >= **((unsigned __int16 **)this + 655)
    && (!*((unsigned char *)this + *(void *)(*(void *)this - 24) + 240) || *((double *)this + 630) < 6.0822))
  {
    (*(void (**)(BlueFin::GlPeShrimpKf *))(*(void *)this + 40))(this);
    double v152 = (double *)*((void *)this + 655);
    double v153 = v152[80] * 0.0174532925;
    double v154 = v152[92] * 0.0174532925;
    double v155 = v152[104] * 0.0174532925;
    BOOL v156 = v153 < 2.22044605e-16 || v154 < 2.22044605e-16;
    if (!v156 && v155 >= 2.22044605e-16)
    {
      double v158 = v152[79] * 0.0174532925 - *((double *)this + 579);
      *((void *)&v502 + 1) = 0x1500000015;
      *(void *)&long long v502 = v503;
      memset((char *)&v503[8] + 8, 0, 40);
      memset(v503, 0, 136);
      *((void *)&v503[8] + 1) = 0x3FF0000000000000;
      BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 8, v158, v153 * v153, 5.0, v151, 0);
      double v159 = *(double *)(*((void *)this + 655) + 728) * 0.0174532925 - *((double *)this + 580);
      uint64_t v160 = v502;
      bzero((void *)(v502 + 8), 8 * SDWORD2(v502));
      *(void *)(v160 + 144) = 0x3FF0000000000000;
      BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 9, v159, v154 * v154, 5.0, v161, 0);
      double v2 = *(double *)(*((void *)this + 655) + 824) * 0.0174532925 - *((double *)this + 581);
      uint64_t v162 = v502;
      bzero((void *)(v502 + 8), 8 * SDWORD2(v502));
      *(void *)(v162 + 152) = 0x3FF0000000000000;
      BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v502, 10, v2, v155 * v155, 5.0, v163, 0);
    }
  }
  *(void *)&long long v502 = 0;
  v427[0] = 0;
  int ExtAlt = BlueFin::GlPeAltMgr::GetExtAlt(*((uint64_t **)this + 657), (double *)((char *)this + *(void *)(*(void *)this - 24) + 8), (double *)&v502, (double *)v427);
  switch(ExtAlt)
  {
    case 4:
      uint64_t v171 = *((void *)this + 654);
      BOOL v172 = *(_DWORD *)(v171 + 20) == 1 && (*(_DWORD *)(v171 + 16) & 0xFFFFFFFE) == 2;
      uint64_t v208 = *((void *)this + 656);
      int v209 = *(_DWORD *)(v208 + 8);
      uint64_t v210 = *(void *)this;
      if (v209) {
        BOOL v211 = (*(_DWORD *)((char *)this + *(void *)(v210 - 24) + 200) - v209) >> 5 < 0x271;
      }
      else {
        BOOL v211 = 0;
      }
      if (BlueFin::GlSetBase::Cnt((BlueFin::GlPeShrimpKf *)((char *)this + *(void *)(v210 - 24) + 264)) < 0xB
        || v211
        || *(unsigned char *)(v208 + 1))
      {
        break;
      }
      BOOL v212 = *(__int16 *)(v208 + 2) < 1 || *(unsigned char *)(v208 + 45) != 0;
      if (!v172 || !v212) {
        break;
      }
      double v168 = *(double *)&v502;
      int v169 = v427[0];
      double v170 = 7.0;
      goto LABEL_139;
    case 2:
      double v168 = *(double *)&v502;
      int v169 = v427[0];
      double v170 = 3.0;
      goto LABEL_139;
    case 1:
      double v168 = *(double *)&v502;
      int v169 = v427[0];
      double v170 = 5.0;
LABEL_139:
      BlueFin::GlPeShrimpKf::ApplyAltMeas(this, v168, *(double *)&v169, v170, v165, v166, v167);
      break;
  }
  if (*((_DWORD *)this + 2) == 2)
  {
    uint64_t v173 = 0;
    uint64_t v452 = 0x100000003;
    do
    {
      float v174 = &v503[v173 - 1];
      v503[v173] = 0uLL;
      *(void *)float v174 = &v503[v173];
      *((void *)v174 + 1) = 0x1500000000;
      v174[2] = 0uLL;
      v174[3] = 0uLL;
      v174[4] = 0uLL;
      v174[5] = 0uLL;
      v174[6] = 0uLL;
      v174[7] = 0uLL;
      v174[8] = 0uLL;
      v174[9] = 0uLL;
      v173 += 12;
      v174[10] = 0uLL;
      v174[11] = 0uLL;
    }
    while (v173 != 36);
    BlueFin::GlPeShrimpKf::GetVehConstraintHVec((uint64_t)this, &v502);
    uint64_t v175 = 0;
    v427[1] = (BlueFin::SKFVector *)0x1500000015;
    long long v428 = 0u;
    memset(v429, 0, sizeof(v429));
    long long v430 = 0u;
    long long v431 = 0u;
    long long v432 = 0u;
    long long v433 = 0u;
    long long v434 = 0u;
    long long v435 = 0u;
    long long v436 = 0u;
    v427[0] = (BlueFin::SKFVector *)&v428;
    double v176 = &v448;
    long long v437 = 0u;
    do
    {
      *double v176 = BlueFin::GlPeShrimpKf::KalmanGain(this, *(const BlueFin::SKFVector **)&v503[v175 - 1], v427[0]);
      v176 += 4;
      v175 += 12;
    }
    while (v175 != 36);
    double v2 = v451[0];
  }
  *(void *)&long long v434 = 0;
  BlueFin::GlPeShrimpKf::GetVelVeh((uint64_t *)this, (BlueFin::Matrix *)v427);
  int v177 = *((unsigned __int8 *)this + 5610);
  *((double *)this + *((char *)this + 5609) + 702) = -*(double *)v429 / sqrt(v2);
  int v178 = *((unsigned __int8 *)this + 5609);
  if (v178 == 19) {
    char v179 = 0;
  }
  else {
    char v179 = v178 + 1;
  }
  *((unsigned char *)this + 5609) = v179;
  if (v177 == 20) {
    *((unsigned char *)this + 5608) = v179;
  }
  else {
    *((unsigned char *)this + 5610) = v177 + 1;
  }
  int v180 = *((unsigned __int8 *)this + 5394);
  *((double *)this + *((char *)this + 5393) + 675) = -*(double *)&v430 / sqrt(v451[4]);
  int v181 = *((unsigned __int8 *)this + 5393);
  if (v181 == 19) {
    char v182 = 0;
  }
  else {
    char v182 = v181 + 1;
  }
  *((unsigned char *)this + 5393) = v182;
  if (v180 == 20) {
    *uint64_t v12 = v182;
  }
  else {
    *((unsigned char *)this + 5394) = v180 + 1;
  }
  v183 = (char *)this + *(void *)(*(void *)this - 24);
  long long v502 = *(_OWORD *)(v183 + 8);
  v503[0] = *((unint64_t *)v183 + 3);
  v503[2] = *(_OWORD *)(v183 + 104);
  *(void *)&v503[3] = *((void *)v183 + 15);
  DWORD2(v503[3]) = *((_DWORD *)v183 + 44);
  uint64_t v184 = *((void *)v183 + 19);
  *(void *)&v503[4] = *((void *)v183 + 11);
  *((void *)&v503[4] + 1) = v184;
  long long v185 = *((_OWORD *)this + 289);
  v503[5] = *((_OWORD *)this + 288);
  v503[6] = v185;
  long long v186 = *((_OWORD *)this + 301);
  v503[7] = *((_OWORD *)this + 290);
  v503[8] = v186;
  long long v187 = *(_OWORD *)v26;
  long long v188 = *((_OWORD *)this + 294);
  v503[9] = *((_OWORD *)this + 302);
  v503[10] = v187;
  v503[1] = 0uLL;
  v503[11] = v188;
  v504 = v506;
  uint64_t v505 = 0x1500000000;
  memset(v506, 0, sizeof(v506));
  memset(v507, 0, sizeof(v507));
  char v509 = 1;
  if (*((unsigned char *)this + 457))
  {
    char v508 = 1;
    BlueFin::lla2ned((double *)&v502, (double *)this + 7, 0, (double *)&v444);
    *(_OWORD *)((char *)v503 + 8) = v444;
    *((void *)&v503[1] + 1) = v445;
    v503[2] = vsubq_f64((float64x2_t)v503[2], *(float64x2_t *)((char *)this + 104));
    *(double *)&v503[3] = *(double *)&v503[3] - *((double *)this + 15);
    float64x2_t v189 = vsubq_f64((float64x2_t)v503[5], *(float64x2_t *)((char *)this + 152));
    v503[4] = vsubq_f64((float64x2_t)v503[4], *(float64x2_t *)((char *)this + 136));
    v503[5] = v189;
    float64x2_t v190 = vsubq_f64((float64x2_t)v503[6], *(float64x2_t *)((char *)this + 168));
    float64x2_t v191 = vsubq_f64((float64x2_t)v503[7], *(float64x2_t *)((char *)this + 184));
    *(void *)&v503[0] = 0;
    long long v502 = 0uLL;
    v503[6] = v190;
    v503[7] = v191;
    *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 200));
    *((void *)&v444 + 1) = v192;
    *(void *)&long long v445 = v193;
    *((void *)&v445 + 1) = v194;
    *(void *)&v503[8] = BlueFin::QuaternionD::operator*((double *)&v503[8], (double *)&v444);
    *((void *)&v503[8] + 1) = v195;
    *(void *)&v503[9] = v196;
    *((void *)&v503[9] + 1) = v197;
    *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 232));
    *((void *)&v444 + 1) = v198;
    *(void *)&long long v445 = v199;
    *((void *)&v445 + 1) = v200;
    double v201 = BlueFin::QuaternionD::operator*((double *)&v503[10], (double *)&v444);
    *(double *)&v503[10] = v201;
    if (v508)
    {
      *((_OWORD *)this + 316) = v503[2];
      *((void *)this + 634) = *(void *)&v503[3];
      long long v205 = v503[4];
      *uint64_t v13 = v503[5];
      uint64_t v206 = *((void *)&v503[7] + 1);
      *((void *)this + 641) = *(void *)&v503[6];
      *((double *)this + 635) = v201;
      *((void *)this + 636) = v202;
      *((void *)this + 637) = v203;
      *((void *)this + 638) = v204;
      long long v207 = v503[9];
      *((_OWORD *)this + 321) = v503[8];
      *((_OWORD *)this + 322) = v207;
      *((_OWORD *)this + 323) = *(_OWORD *)((char *)v503 + 8);
      *((void *)this + 648) = *((void *)&v503[1] + 1);
      *(_OWORD *)((char *)this + 5192) = *(_OWORD *)((char *)&v503[6] + 8);
      *((void *)this + 651) = v206;
      *((_OWORD *)this + 326) = v205;
    }
  }
LABEL_207:
  *(void *)&long long v502 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v414);
  *((void *)&v502 + 1) = v302;
  *(void *)&v503[0] = v303;
  *((void *)&v503[0] + 1) = v304;
  double v454 = BlueFin::QuaternionD::operator*(v26, (double *)&v502);
  v455 = v305;
  uint64_t v456 = v306;
  uint64_t v457 = v307;
  *((double *)this + 594) = BlueFin::QuaternionD::operator*(&v454, (double *)this + 594);
  *((void *)this + 595) = v308;
  *((void *)this + 596) = v309;
  *((void *)this + 597) = v310;
  *((_OWORD *)this + 295) = *((_OWORD *)this + 293);
  *((_OWORD *)this + 296) = *((_OWORD *)this + 294);
  v311 = (void *)*((void *)this + 83);
  uint64_t v312 = *(void *)this;
  float v313 = sqrt(*(double *)(v311[9] + 72)+ *(double *)(v311[10] + 80)+ *(double *)(v311[11] + 88)+ *(double *)(v311[15] + 120)+ *(double *)(v311[16] + 128));
  *(float *)((char *)this + *(void *)(*(void *)this - 24) + 184) = v313;
  float v314 = *(double *)(v311[1] + 8) + *(double *)(v311[2] + 16);
  *(float *)((char *)this + *(void *)(v312 - 24) + 80) = sqrtf(v314);
  float v315 = *(double *)(v311[3] + 24);
  *(float *)((char *)this + *(void *)(v312 - 24) + 84) = sqrtf(v315);
  float v316 = sqrt(*(double *)(v311[4] + 32) + *(double *)(v311[5] + 40));
  *(float *)((char *)this + *(void *)(v312 - 24) + 128) = v316;
  float v317 = sqrt(*(double *)(v311[6] + 48));
  *(float *)((char *)this + *(void *)(v312 - 24) + 140) = v317;
  v318 = (char *)this + *(void *)(v312 - 24);
  *((_OWORD *)v318 + 2) = *(_OWORD *)(v318 + 8);
  *((void *)v318 + 6) = *((void *)v318 + 3);
  *(_DWORD *)((char *)this + *(void *)(v312 - 24) + 180) = *(_DWORD *)((char *)this + *(void *)(v312 - 24) + 176);
  float v319 = sqrt(*(double *)(v311[7] + 56));
  *(float *)((char *)this + *(void *)(v312 - 24) + 96) = v319;
  float v320 = sqrt(*(double *)(v311[8] + 64));
  *(float *)((char *)this + *(void *)(v312 - 24) + 160) = v320;
  v321 = (double *)((char *)this + *(void *)(v312 - 24));
  double v322 = v321[13];
  double v323 = v321[14];
  double v324 = v321[15];
  *(void *)&v503[7] = 0x100000003;
  *(void *)&long long v502 = 0;
  *(void *)&v503[1] = 0;
  *(void *)&v503[3] = 0;
  BlueFin::GlPeShrimpKf::GetVelVeh((uint64_t *)this, (BlueFin::Matrix *)&v502);
  v478[0] = 0.0;
  v325 = (double *)&unk_263BB1000;
  if (!*((_DWORD *)this + 2))
  {
    int v332 = 0;
    int v333 = 0;
    goto LABEL_230;
  }
  if (*(unsigned __int8 *)(*((void *)this + 655) + 592) | *(unsigned __int8 *)(*((void *)this + 655) + 586)) {
    int v326 = 10;
  }
  else {
    int v326 = 0;
  }
  if (!*((unsigned char *)v14 + 464)) {
    int v326 = 10;
  }
  if (*((unsigned char *)v14 + 465)) {
    int v327 = 10;
  }
  else {
    int v327 = v326;
  }
  *((unsigned char *)v14 + 464) = 0;
  if (fabs(*((double *)this + 576)) > 2.943
    || fabs(*((double *)this + 577)) > 2.943
    || fabs(*((double *)this + 578)) > 2.943)
  {
    int v327 = 20;
  }
  double v448 = 0.0;
  *(void *)&long long v444 = 0;
  v427[0] = COERCE_BLUEFIN_SKFVECTOR_(BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4784)));
  v427[1] = v328;
  *(void *)&long long v428 = v329;
  *((void *)&v428 + 1) = v330;
  BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)v427, &v448, (long double *)&v444, v478);
  double v331 = fabs(v448 * 57.2957795);
  if (v331 <= 10.0 && fabs(*(double *)&v444 * 57.2957795) <= 10.0)
  {
    int v332 = 0;
LABEL_229:
    int v333 = v327;
    goto LABEL_230;
  }
  int v332 = 0;
  int v333 = 13;
  if (v331 <= 25.0 && *((_DWORD *)this + 2) == 2)
  {
    if (fabs(*(double *)&v444 * 57.2957795) > 45.0)
    {
      int v332 = 0;
      goto LABEL_230;
    }
    int v332 = 1024;
    goto LABEL_229;
  }
LABEL_230:
  uint64_t v334 = *((void *)this + 654);
  if (*(_DWORD *)(v334 + 24) == 2)
  {
    *(_DWORD *)(v334 + 24) = 0;
    int v333 = 23;
  }
  if (*((_DWORD *)this + 2) == 2)
  {
    double v471 = 0.0;
    *(void *)&long long v462 = 0;
    v461[0] = 0.0;
    v427[0] = COERCE_BLUEFIN_SKFVECTOR_(BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816)));
    v427[1] = v335;
    *(void *)&long long v428 = v336;
    *((void *)&v428 + 1) = v337;
    double v448 = BlueFin::QuaternionD::operator*(v26, (double *)v427);
    double v449 = v338;
    *(void *)&long long v450 = v339;
    *((void *)&v450 + 1) = v340;
    v427[0] = COERCE_BLUEFIN_SKFVECTOR_(BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v448));
    v427[1] = v341;
    *(void *)&long long v428 = v342;
    *((void *)&v428 + 1) = v343;
    BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)v427, &v471, (long double *)&v462, v461);
    if (fabs(*(double *)&v462) <= 0.785398163) {
      int v344 = v333;
    }
    else {
      int v344 = 12;
    }
    int v345 = *((unsigned __int8 *)this + 5827);
    v410 = v26;
    if (!*((unsigned char *)this + 5827) && sqrt(v323 * v323 + v322 * v322 + v324 * v324) > *((double *)this + 5)) {
      int v344 = 15;
    }
    int v413 = v344;
    uint64_t v346 = *((void *)this + 656);
    uint64_t v347 = *(void *)this;
    int v348 = *(_DWORD *)(v346 + 84);
    if (v348 == 1)
    {
      v349 = v14;
      int v350 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
      BOOL IsParkingGarage = BlueFin::GlPeNavGnssBlocked::IsParkingGarage((BlueFin::GlPeNavGnssBlocked *)v346, v350);
      double v352 = *(double *)&v502;
      if (!IsParkingGarage && *(double *)&v502 < *(float *)(v346 + 128))
      {
        ++*((unsigned char *)this + 5353);
        int v350 = *(_DWORD *)((char *)this + *(void *)(v347 - 24) + 200);
      }
      if (BlueFin::GlPeNavGnssBlocked::IsParkingGarage((BlueFin::GlPeNavGnssBlocked *)v346, v350)
        || !*(unsigned char *)(v346 + 133))
      {
        uint64_t v14 = v349;
        uint64_t v12 = (char *)this + 5392;
        v325 = (double *)&unk_263BB1000;
      }
      else
      {
        unsigned int v354 = v350 - *((_DWORD *)this + 1254);
        double v355 = 1.0;
        if (v354 <= 0x493DF) {
          double v355 = (double)v354 / 300000.0;
        }
        float v356 = *(float *)(v346 + 136);
        float v353 = v352;
        double v357 = v353;
        uint64_t v14 = v349;
        uint64_t v12 = (char *)this + 5392;
        v325 = (double *)&unk_263BB1000;
        if (v356 != 0.0 && *((double *)this + 666) - v355 * v356 >= v357
          || (float v358 = *(float *)(v346 + 140), v358 != 0.0) && *((double *)this + 666) + v355 * v358 <= v357)
        {
          ++*((unsigned char *)this + 5354);
        }
      }
    }
    else
    {
      double v352 = *(double *)&v502;
    }
    if (BlueFin::GlPeNavGnssBlocked::IsParkingGarage((BlueFin::GlPeNavGnssBlocked *)v346, *(_DWORD *)((char *)this + *(void *)(v347 - 24) + 200))&& v352 > *(float *)(v346 + 124))
    {
      ++*((unsigned char *)this + 5355);
    }
    if (v348 != 1)
    {
      *(_WORD *)((char *)this + 5353) = 0;
      *((unsigned char *)this + 5355) = 0;
    }
    int v359 = *((unsigned __int8 *)this + 5323);
    if (!v345 || *((unsigned char *)this + 5323))
    {
      BlueFin::lla2ned(v14, (double *)this + 670, 0, &v479);
      v427[0] = *(BlueFin::SKFVector **)&v479;
      *(void *)&v429[0] = v480;
      *(void *)&long long v434 = 0x100000003;
      *(void *)&long long v430 = v481;
      uint64_t v452 = 0;
      *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
      *((void *)&v444 + 1) = v360;
      *(void *)&long long v445 = v361;
      *((void *)&v445 + 1) = v362;
      double v439 = BlueFin::QuaternionD::operator*(v410, (double *)&v444);
      v440 = v363;
      *(void *)&long long v441 = v364;
      *((void *)&v441 + 1) = v365;
      *(void *)&long long v444 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v439);
      *((void *)&v444 + 1) = v366;
      *(void *)&long long v445 = v367;
      *((void *)&v445 + 1) = v368;
      BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)&v444, (const BlueFin::Matrix *)v427, (BlueFin::Matrix *)&v448);
      double v369 = v448;
      if (v448 >= -1.0)
      {
        if (v448 > 0.0)
        {
          *((unsigned char *)this + 5336) = 0;
          *((_DWORD *)this + 1335) = 0;
        }
      }
      else
      {
        ++*((unsigned char *)this + 5336);
        float v370 = v369;
        *((float *)this + 1335) = *((float *)this + 1335) + v370;
      }
      double v371 = sqrt(*(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 104)+ *(double *)((char *)this + *(void *)(*(void *)this - 24) + 112)* *(double *)((char *)this + *(void *)(*(void *)this - 24) + 112));
      if (v371 <= 30.0) {
        double v372 = v371;
      }
      else {
        double v372 = 30.0;
      }
      if (v478[0] * v372 >= 0.0) {
        double v373 = v478[0] * v372;
      }
      else {
        double v373 = -(v478[0] * v372);
      }
      if (BlueFin::GlPeShrimpKf::IsNotTurning(this, 1.0))
      {
        if (*((_DWORD *)this + 2) == 2 && v12[432] && (double v374 = v451[0], fabs(v451[0]) >= fmax(v373, 1.2)))
        {
          ++*((unsigned char *)this + 5344);
          float v375 = v374;
          *((float *)this + 1337) = *((float *)this + 1337) + v375;
        }
        else if (*((unsigned char *)this + 5344) && v451[0] * *((float *)this + 1337) < 0.0)
        {
          *((unsigned char *)this + 5344) = 0;
          *((_DWORD *)this + 1337) = 0;
        }
      }
      *((_OWORD *)this + 335) = *(_OWORD *)v14;
      *((void *)this + 672) = *((void *)this + 575);
      double v376 = fmax(v372 * 0.03, 0.5);
      if (BlueFin::GlPeShrimpKf::IsNotTurning(this, 1.0))
      {
        double v377 = fabs(*(double *)&v503[1]);
        if (v377 >= v376)
        {
          ++*((unsigned char *)this + 5356);
        }
        else if (v377 < 0.5)
        {
          *((unsigned char *)this + 5356) = 0;
        }
      }
      if (fabs(*(double *)&v503[3]) >= v376) {
        char v378 = *((unsigned char *)this + 5357) + 1;
      }
      else {
        char v378 = 0;
      }
      *((unsigned char *)this + 5357) = v378;
    }
    if (*((unsigned __int8 *)this + 5358) <= 3u) {
      int v333 = v413;
    }
    else {
      int v333 = 16;
    }
    v379 = (double *)*((void *)this + 655);
    double v380 = v325[221];
    v382 = (void *)*((void *)this + 83);
    double v383 = (v379[86] + *(double *)(v382[17] + 136)) * 49.0;
    if (v383 < 0.0225) {
      double v383 = 0.0225;
    }
    double v381 = -(v379[85] - *((double *)this + 579) * v380);
    if (v381 * v381 > v383) {
      goto LABEL_300;
    }
    double v384 = -(v379[97] - *((double *)this + 580) * v380);
    double v385 = v384 * v384;
    double v386 = (v379[98] + *(double *)(v382[18] + 144)) * 49.0;
    if (v386 < 0.0225) {
      double v386 = 0.0225;
    }
    if (v385 > v386) {
      goto LABEL_300;
    }
    double v387 = -(v379[109] - *((double *)this + 581) * v380);
    double v388 = v387 * v387;
    double v389 = (v379[110] + *(double *)(v382[19] + 152)) * 49.0;
    if (v389 < 0.0225) {
      double v389 = 0.0225;
    }
    if (v388 <= v389) {
      *((unsigned char *)this + 5352) = 0;
    }
    else {
LABEL_300:
    }
      ++*((unsigned char *)this + 5352);
    BlueFin::GlPeShrimpNhcMonitor::RunDetector((uint64_t)this + 5392);
    BlueFin::GlPeShrimpNhcMonitor::RunDetector((uint64_t)this + 5608);
    uint64_t v390 = *((void *)this + 654);
    if ((*(_DWORD *)(v390 + 8) - 1) <= 1 && *(_DWORD *)(v390 + 12) == 1) {
      int v333 = 17;
    }
    int v391 = *((unsigned __int8 *)this + 5322);
    if (*((unsigned char *)this + 5320))
    {
      int v392 = 0;
      BOOL v393 = 0;
      v394 = (BOOL *)this + 5384;
      *((unsigned char *)this + 5384) = 0;
      if (v391) {
        goto LABEL_317;
      }
    }
    else
    {
      if (*((unsigned char *)this + 5322))
      {
        int v392 = 0;
        BOOL v393 = 0;
        v394 = (BOOL *)this + 5384;
        *((unsigned char *)this + 5384) = 0;
        goto LABEL_317;
      }
      v395 = (BlueFin::GlPeNavGnssBlocked *)*((void *)this + 656);
      if (*((_DWORD *)v395 + 21) == 1)
      {
        BOOL v396 = BlueFin::GlPeNavGnssBlocked::PublishIndoorPropagation(v395, *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200));
        v394 = (BOOL *)this + 5384;
        *((unsigned char *)this + 5384) = !v396;
        if (!v396) {
          goto LABEL_316;
        }
      }
      else
      {
        v394 = (BOOL *)this + 5384;
        *((unsigned char *)this + 5384) = 0;
      }
    }
    if (*((_DWORD *)this + 2) == 2)
    {
      BOOL v393 = v12[432] == 0;
      int v392 = 1;
      goto LABEL_317;
    }
LABEL_316:
    int v392 = 1;
    BOOL v393 = 1;
LABEL_317:
    BOOL *v394 = v393;
    if (v359)
    {
      if (v12[435])
      {
        if (!*((unsigned char *)this + 5336) && !*((unsigned char *)this + 5356) && !*((unsigned char *)this + 5357)) {
          --v12[434];
        }
        if (!v12[434]) {
          v12[435] = 0;
        }
        *(_WORD *)((char *)this + 5353) = 0;
        *((unsigned char *)this + 5355) = 0;
        *((_OWORD *)this + 335) = *(_OWORD *)v14;
        *((void *)this + 672) = *((void *)this + 575);
        *((unsigned char *)this + 5384) = 0;
      }
      else if ((v332 & 0x400) != 0)
      {
        *((_WORD *)v12 + 217) = 259;
      }
      if (*((unsigned __int8 *)this + 5344) < 8u) {
        goto LABEL_337;
      }
      float v397 = *((float *)this + 1337);
      if (v397 < 0.0) {
        float v397 = -v397;
      }
      if (v397 < 20.0 && *((unsigned __int8 *)this + 5356) <= 9u)
      {
LABEL_337:
        if (*((unsigned __int8 *)this + 5336) >= 0xAu && *((float *)this + 1335) <= -30.0) {
          int v333 = 22;
        }
      }
      else
      {
        int v333 = 21;
      }
    }
    else if (v12[435])
    {
      v12[434] = 3;
      *(_WORD *)((char *)this + 5353) = 0;
      *((unsigned char *)this + 5355) = 0;
      *((_OWORD *)this + 335) = *(_OWORD *)v14;
      *((void *)this + 672) = *((void *)this + 575);
      *((unsigned char *)this + 5384) = 0;
    }
    else if (v392)
    {
      float v398 = *((float *)this + 1335);
      BOOL v400 = (v398 > -15.0 || *((unsigned __int8 *)this + 5336) < 5u) && v398 > -30.0;
      if (v400) {
        int v401 = 0;
      }
      else {
        int v401 = 2;
      }
      if (*((unsigned char *)this + 5353)) {
        v401 |= 4u;
      }
      if (*((unsigned char *)this + 5354)) {
        v401 |= 8u;
      }
      if (*((unsigned char *)this + 5355)) {
        v401 |= 0x10u;
      }
      if (*((unsigned __int8 *)this + 5356) > 2u) {
        v401 |= 0x40u;
      }
      if (*((unsigned __int8 *)this + 5357) > *((unsigned __int8 *)this + 32)) {
        v401 |= 0x80u;
      }
      if (*((unsigned __int8 *)this + 5352) > 4u) {
        v401 |= 0x800u;
      }
      if (*((unsigned char *)this + 5384)) {
        v401 |= 0x100u;
      }
      v402 = (void *)*((void *)this + 83);
      double v403 = sqrt(*(double *)(v402[4] + 32) + *(double *)(v402[5] + 40));
      if (sqrt(*(double *)(v402[1] + 8) + *(double *)(v402[2] + 16)) > 55.0 || v403 > 4.5) {
        v401 |= 0x200u;
      }
      if (v401 | v332) {
        *((_WORD *)v12 + 217) = 259;
      }
    }
  }
  if (v333) {
    BlueFin::GlPeShrimpKf::ResetINS((uint64_t *)this, v333);
  }
  *((_DWORD *)this + 1215) = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
  *((_DWORD *)this + 1216) = *((_DWORD *)this + 1214);
}

BOOL BlueFin::GlPeShrimpKf::SensorUpdate(uint64_t a1, double *a2, double *a3, int a4)
{
  BlueFin::GlPeShrimpKf::UpdatePlacementContext(a1, a2, a3, a4);
  int v8 = *(_DWORD *)(a1 + 8);
  if (v8)
  {
    if (v8 == 2)
    {
      BlueFin::GlPeShrimpKf::DoInitDoneSensor(a1, (uint64_t)a2, (uint64_t)a3, a4);
    }
    else
    {
      if (v8 != 1)
      {
        DeviceFaultNotify("glpe_shrimpkf.cpp", 1459, "SensorUpdate", (char)"false");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", 1459, "false");
      }
      BlueFin::GlPeShrimpKf::DoInitTiltSensor(a1, (uint64_t)a2, (uint64_t)a3, a4);
    }
  }
  *(unsigned char *)(a1 + 5048) = 1;
  *(_DWORD *)(a1 + 4856) = a4;
  if (*(unsigned char *)(a1 + 5050))
  {
    *(double *)(a1 + 5040) = sqrt(*(double *)(a1 + *(void *)(*(void *)a1 - 24) + 112)* *(double *)(a1 + *(void *)(*(void *)a1 - 24) + 112)+ *(double *)(a1 + *(void *)(*(void *)a1 - 24) + 104)* *(double *)(a1 + *(void *)(*(void *)a1 - 24) + 104));
    *(unsigned char *)(a1 + 5050) = 0;
    *(_OWORD *)(a1 + 4920) = 0u;
    *(_OWORD *)(a1 + 4936) = 0u;
    *(_OWORD *)(a1 + 4952) = 0u;
    *(_OWORD *)(a1 + 4968) = 0u;
  }
  return *(_DWORD *)(a1 + 8) != 2
      || !*(unsigned char *)(a1 + 5824)
      || (int)(*(_DWORD *)(a1 + 4864) - a4 + ((*(double *)(a1 + 4656) + 1.0) * 1000.0)) > 25;
}

double BlueFin::GlPeShrimpKf::KalmanGain(BlueFin::GlPeShrimpKf *this, const BlueFin::SKFVector *a2, BlueFin::SKFVector *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((unsigned int *)this + 169);
  double result = 0.0;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 0x10000;
    do
    {
      ++v5;
      if (*((double *)a2 + (v7 >> 16)) != 0.0) {
        v17[v6++] = v5;
      }
      v7 += 0x10000;
    }
    while (v3 != v5);
    uint64_t v8 = v3 + 1;
    uint64_t v9 = v6;
    uint64_t v10 = 1;
    do
    {
      while (v6 < 1)
      {
        *((void *)a3 + (__int16)v10++) = 0;
        if (v10 == v8) {
          return result;
        }
      }
      double v11 = 0.0;
      uint64_t v12 = v17;
      uint64_t v13 = v6;
      do
      {
        unsigned int v14 = *v12++;
        double v11 = v11 + *(double *)(*(void *)(*((void *)this + 83) + 8 * v10) + 8 * v14) * *((double *)a2 + v14);
        --v13;
      }
      while (v13);
      *((double *)a3 + (__int16)v10++) = v11;
    }
    while (v10 != v8);
    double result = 0.0;
    uint64_t v15 = v17;
    do
    {
      unsigned int v16 = *v15++;
      double result = result + *((double *)a3 + v16) * *((double *)a2 + v16);
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t BlueFin::GlPeShrimpKf::MeasUpdateINS(BlueFin::GlPeShrimpKf *this, uint64_t a2, int a3, double a4, long double a5, double a6, uint64_t a7, int a8)
{
  unint64_t v8 = *((unsigned int *)this + 169);
  if (*(_DWORD *)(a2 + 8) != v8)
  {
    long double v90 = "otH.GetLen() == iRSize";
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1648, "MeasUpdateINS", (char)"otH.GetLen() == iRSize");
    int v91 = 1648;
    goto LABEL_33;
  }
  if (v8 != *((_DWORD *)this + 168))
  {
    long double v90 = "iRSize == m_P.GetRowSize()";
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1649, "MeasUpdateINS", (char)"iRSize == m_P.GetRowSize()");
    int v91 = 1649;
    goto LABEL_33;
  }
  if ((int)v8 >= 22)
  {
    long double v90 = "iRSize <= BIG_MATR_MAX_COL_DIM";
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1650, "MeasUpdateINS", (char)"iRSize <= BIG_MATR_MAX_COL_DIM");
    int v91 = 1650;
    goto LABEL_33;
  }
  v117[1] = 0x1500000015;
  memset(v118, 0, sizeof(v118));
  v117[0] = v118;
  double v15 = BlueFin::GlPeShrimpKf::KalmanGain(this, *(const BlueFin::SKFVector **)a2, (BlueFin::SKFVector *)v118);
  double v16 = v15;
  if (!a8)
  {
LABEL_14:
    BlueFin::SKFVectorDim<21>::SKFVectorDim((BlueFin::SKFVector *)&v115, (const BlueFin::SKFVector *)v117);
    uint64_t v19 = v116;
    if (v116 >= 1)
    {
      uint64_t v20 = v115;
      uint64_t v21 = v116 + 1;
      uint64_t v22 = (double *)(v115 + 8);
      do
      {
        *uint64_t v22 = 1.0 / (v16 + a5) * *v22;
        ++v22;
        --v19;
      }
      while (v19);
      uint64_t v23 = v21 - 1;
      uint64_t v24 = (double *)(*((void *)this + 549) + 8);
      char v25 = (double *)(v20 + 8);
      do
      {
        double v26 = *v25++;
        *uint64_t v24 = *v24 + v26 * a4;
        ++v24;
        --v23;
      }
      while (v23);
    }
    if ((int)v8 >= 1)
    {
      unint64_t v27 = 0;
      uint64_t v28 = *((void *)this + 83);
      uint64_t v29 = v115;
      uint64_t v30 = v117[0] + 8;
      uint64_t v31 = 1;
      do
      {
        uint64_t v32 = *(void *)(v28 + 8 * v31) + 8;
        unint64_t v33 = v27;
        do
        {
          double v34 = *(double *)(v32 + 8 * v33) - *(double *)(v29 + 8 * v31) * *(double *)(v30 + 8 * v33);
          *(double *)(v32 + 8 * v33) = v34;
          *(double *)(*(void *)(v28 + 8 + 8 * v33++) + 8 * v31) = v34;
        }
        while (v33 < v8);
        ++v31;
        ++v27;
      }
      while (v31 != v8 + 1);
    }
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
    }
    uint64_t v35 = *((void *)this + 549);
    uint64_t v36 = *(void *)(v35 + 24);
    long long v119 = *(_OWORD *)(v35 + 8);
    uint64_t v120 = v36;
    BlueFin::ned2lla((double *)this + 573, (double *)&v119, &v99);
    BlueFin::GlPeShrimpKf::SetInsLla((uint64_t)this, (uint64_t)&v99);
    uint64_t v37 = *(void *)this;
    uint64_t v38 = (char *)this + *(void *)(*(void *)this - 24);
    uint64_t v39 = *((void *)this + 549);
    double v40 = *((double *)v38 + 15) + *(double *)(v39 + 48);
    *(float64x2_t *)(v38 + 104) = vaddq_f64(*(float64x2_t *)(v38 + 104), *(float64x2_t *)(v39 + 32));
    *((double *)v38 + 15) = v40;
    *(double *)((char *)this + *(void *)(v37 - 24) + 88) = *(double *)((char *)this + *(void *)(v37 - 24) + 88)
                                                           + *(double *)(v39 + 56);
    *(double *)((char *)this + *(void *)(v37 - 24) + 152) = *(double *)((char *)this + *(void *)(v37 - 24) + 152)
                                                            + *(double *)(v39 + 64);
    double v41 = *((double *)this + 578) + *(double *)(v39 + 112);
    *((float64x2_t *)this + 288) = vaddq_f64(*((float64x2_t *)this + 288), *(float64x2_t *)(v39 + 96));
    *((double *)this + 578) = v41;
    double v42 = *((double *)this + 581) + *(double *)(v39 + 152);
    *(float64x2_t *)((char *)this + 4632) = vaddq_f64(*(float64x2_t *)((char *)this + 4632), *(float64x2_t *)(v39 + 136));
    *((double *)this + 581) = v42;
    *((double *)this + 582) = *(double *)(v39 + 160) + *((double *)this + 582);
    *(double *)(*((void *)this + 659) + 8) = *(double *)(v39 + 168) + *(double *)(*((void *)this + 659) + 8);
    *(void *)&long long v113 = 0x3FF0000000000000;
    *((double *)&v113 + 1) = *(double *)(v39 + 72) * 0.5;
    __asm { FMOV            V1.2D, #0.5 }
    float64x2_t v92 = _Q1;
    float64x2_t v114 = vmulq_f64(*(float64x2_t *)(v39 + 80), _Q1);
    *((double *)this + 586) = BlueFin::QuaternionD::operator*((double *)&v113, (double *)this + 586);
    *((void *)this + 587) = v48;
    *((void *)this + 588) = v49;
    *((void *)this + 589) = v50;
    float64x2_t v51 = vmulq_f64(*(float64x2_t *)(*((void *)this + 549) + 120), v92);
    long long v113 = xmmword_263BBBCC0;
    float64x2_t v114 = v51;
    *((double *)this + 602) = BlueFin::QuaternionD::operator*((double *)&v113, (double *)this + 602);
    *((void *)this + 603) = v52;
    *((void *)this + 604) = v53;
    *((void *)this + 605) = v54;
    double v110 = 0.0;
    double v111 = 0.0;
    double v99 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
    double v100 = v55;
    double v101 = v56;
    uint64_t v102 = v57;
    *(void *)&long long v119 = BlueFin::QuaternionD::operator*((double *)this + 586, &v99);
    *((void *)&v119 + 1) = v58;
    uint64_t v120 = v59;
    uint64_t v121 = v60;
    double v99 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v119);
    double v100 = v61;
    double v101 = v62;
    uint64_t v102 = v63;
    BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v99, &v112, &v111, &v110);
    double v64 = v111;
    uint64_t v109 = 0x300000003;
    __double2 v65 = __sincos_stret(v110);
    __double2 v66 = __sincos_stret(v64);
    double v99 = v66.__cosval * v65.__cosval;
    double v100 = v66.__cosval * v65.__sinval;
    double v101 = -v66.__sinval;
    double v103 = v66.__sinval * 0.0 * v65.__cosval - v65.__sinval;
    double v104 = v65.__cosval + v66.__sinval * 0.0 * v65.__sinval;
    double v105 = v66.__cosval * 0.0;
    double v106 = v66.__sinval * v65.__cosval + v65.__sinval * 0.0;
    double v107 = v66.__sinval * v65.__sinval + v65.__cosval * -0.0;
    double cosval = v66.__cosval;
    v98[0] = 0x3FF0000000000000;
    memset(&v98[1], 0, 24);
    if (BlueFin::QuaternionD::rot2Q((BlueFin::QuaternionD *)v98, (const BlueFin::Matrix *)&v99))
    {
      double v94 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4688));
      uint64_t v95 = v67;
      uint64_t v96 = v68;
      uint64_t v97 = v69;
      v93[0] = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v98);
      v93[1] = v70;
      v93[2] = v71;
      v93[3] = v72;
      *(void *)&long long v119 = BlueFin::QuaternionD::operator*(&v94, v93);
      *((void *)&v119 + 1) = v73;
      uint64_t v120 = v74;
      uint64_t v121 = v75;
      *((double *)this + 602) = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v119);
      *((void *)this + 603) = v76;
      *((void *)this + 604) = v77;
      *((void *)this + 605) = v78;
      BlueFin::QuaternionD::normalize((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
      *(void *)&long long v119 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
      *((void *)&v119 + 1) = v79;
      uint64_t v120 = v80;
      uint64_t v121 = v81;
      double v94 = BlueFin::QuaternionD::operator*((double *)this + 586, (double *)&v119);
      uint64_t v95 = v82;
      uint64_t v96 = v83;
      uint64_t v97 = v84;
      *(void *)&long long v119 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v94);
      *((void *)&v119 + 1) = v85;
      uint64_t v120 = v86;
      uint64_t v121 = v87;
      BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v119, &v112, &v111, &v110);
      float v88 = v110;
      *(float *)((char *)this + *(void *)(*(void *)this - 24) + 176) = v88;
      bzero((void *)(*((void *)this + 549) + 8), 8 * *((int *)this + 1100));
      return 1;
    }
    long double v90 = "otQnv_.rot2Q(otCnv_)";
    DeviceFaultNotify("glpe_shrimpkf.cpp", 1819, "MeasUpdateINS", (char)"otQnv_.rot2Q(otCnv_)");
    int v91 = 1819;
LABEL_33:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", v91, v90);
  }
  double v17 = a4 / sqrt(v15 + a5);
  if (v17 < 0.0) {
    double v17 = -v17;
  }
  if ((a3 - 6) < 0xFFFFFFFD || v17 < a6)
  {
    if (v17 < a6) {
      goto LABEL_14;
    }
  }
  else
  {
    int v18 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
    if ((v18 - *((_DWORD *)this + 1254)) >> 4 < 0x753
      || (v18 - *((_DWORD *)this + 1258)) > 0x7530)
    {
      goto LABEL_14;
    }
    if (v17 < fmax(a6, 5.0))
    {
      a5 = exp(v17 / fmin(a6, 5.0)) * a5;
      goto LABEL_14;
    }
  }
  return 0;
}

double BlueFin::GlPeShrimpKf::SetInsLla(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (double *)(a1 + 4584);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  *(void *)(a1 + 4600) = *(void *)(a2 + 16);
  double v4 = *(double *)(a1 + 4656);
  if (v4 == 0.0)
  {
    uint64_t v7 = a1 + *(void *)(*(void *)a1 - 24);
    *(_OWORD *)(v7 + 8) = *(_OWORD *)a2;
    double result = *(double *)(a2 + 16);
    *(double *)(v7 + 24) = result;
  }
  else
  {
    uint64_t v5 = a1 + *(void *)(*(void *)a1 - 24);
    float64x2_t v10 = vmulq_n_f64(*(float64x2_t *)(v5 + 104), v4);
    double v11 = v4 * *(double *)(v5 + 120);
    BlueFin::ned2lla(v3, v10.f64, (double *)&v8);
    *(_OWORD *)(v5 + 8) = v8;
    double result = v9;
    *(double *)(v5 + 24) = v9;
  }
  return result;
}

BlueFin::GlPeShrimpKf *BlueFin::GlPeShrimpKf::ApplyZupt(BlueFin::GlPeShrimpKf *this, const BlueFin::GlPeNavGnssState *a2, uint64_t a3, uint64_t a4)
{
  double v4 = 5.0;
  if (*((unsigned char *)a2 + 240)) {
    double v4 = 10.0;
  }
  uint64_t v5 = (double *)((char *)this + *(void *)(*(void *)this - 24));
  double v6 = v5[13];
  if (sqrt(v5[14] * v5[14] + v6 * v6) <= v4 * *((float *)v5 + 32))
  {
    uint64_t v7 = this;
    uint64_t v15 = 0x1500000015;
    uint64_t v16 = 0;
    unsigned int v14 = &v16;
    uint64_t v18 = 0;
    long long v17 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v28 = 0;
    uint64_t v19 = 0x3FF0000000000000;
    BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v14, 3, -v6, 0.0004, 5.0, a4, 0);
    double v8 = -*(double *)((char *)v7 + *(void *)(*(void *)v7 - 24) + 112);
    double v9 = v14;
    bzero(v14 + 1, 8 * (int)v15);
    v9[5] = 0x3FF0000000000000;
    BlueFin::GlPeShrimpKf::MeasUpdateINS(v7, (uint64_t)&v14, 4, v8, 0.0004, 5.0, v10, 0);
    double v11 = -*(double *)((char *)v7 + *(void *)(*(void *)v7 - 24) + 120);
    uint64_t v12 = v14;
    bzero(v14 + 1, 8 * (int)v15);
    v12[6] = 0x3FF0000000000000;
    return (BlueFin::GlPeShrimpKf *)BlueFin::GlPeShrimpKf::MeasUpdateINS(v7, (uint64_t)&v14, 5, v11, 0.0004, 5.0, v13, 0);
  }
  return this;
}

uint64_t BlueFin::GlPeShrimpKf::ApplyAltMeas(BlueFin::GlPeShrimpKf *this, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v9[0] = &v10;
  uint64_t v10 = 0;
  v9[1] = 0x1500000015;
  long long v11 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  long long v12 = 0xBFF0000000000000;
  double v7 = fmax(a3, 1.0);
  return BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)v9, 2, a2 - *(double *)((char *)this + *(void *)(*(void *)this - 24) + 24), v7 * v7, a4, a7, 1);
}

double BlueFin::GlPeShrimpKf::GetVehConstraintHVec(uint64_t a1, _DWORD *a2)
{
  uint64_t v29 = 0;
  BlueFin::GlPeShrimpKf::GetVelVeh((uint64_t *)a1, (BlueFin::Matrix *)v28);
  if (HIDWORD(v29) != 1 || v29 != 3)
  {
    DeviceFaultNotify("glpe_shrimpkf.cpp", 2219, "GetVehConstraintHVec", (char)"otVv.GetColSize() == 1 && otVv.GetRowSize() == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.cpp", 2219, "otVv.GetColSize() == 1 && otVv.GetRowSize() == 3");
  }
  uint64_t v34 = 0;
  uint64_t v5 = *(void *)(a1 + 4992);
  v31[0] = *(void *)(a1 + 4984);
  uint64_t v32 = v5;
  uint64_t v33 = *(void *)(a1 + 5000);
  BlueFin::QuaternionD::rotVec((BlueFin::QuaternionD *)(a1 + 4816), (const BlueFin::Matrix *)v31, (BlueFin::Matrix *)v30);
  v31[0] = v30[0];
  uint64_t v32 = v30[4];
  uint64_t v34 = 0x100000003;
  uint64_t v33 = v30[8];
  BlueFin::vcross((BlueFin *)v31, (uint64_t)v30);
  v26[1] = 0x300000003;
  v27[0] = 0;
  v26[0] = v27;
  v27[1] = v28[0];
  v27[2] = v28[4];
  v27[3] = v28[8];
  BlueFin::MatSkewCross::MatSkewCross(&v25, (const BlueFin::SKFVector *)v26);
  v24[0] = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)(a1 + 4816));
  v24[1] = v6;
  v24[2] = v7;
  v24[3] = v8;
  v22[0] = BlueFin::QuaternionD::operator*((double *)(a1 + 4688), v24);
  v22[1] = v9;
  v22[2] = v10;
  v22[3] = v11;
  v23[0] = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v22);
  v23[1] = v12;
  v23[2] = v13;
  void v23[3] = v14;
  BlueFin::QuaternionD::q2Rot((BlueFin::QuaternionD *)v23, (uint64_t)v24);
  uint64_t v15 = 0;
  int v16 = 1;
  do
  {
    a2[2] = 21;
    uint64_t v17 = *(void *)a2;
    *(void *)(v17 + 168) = 0;
    *(_OWORD *)(v17 + 152) = 0u;
    *(_OWORD *)(v17 + 136) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 8) = 0u;
    uint64_t v18 = *(void *)a2;
    *(_OWORD *)(v18 + 32) = *(_OWORD *)&v24[v15];
    *(double *)(v18 + 48) = v24[v15 + 2];
    *(double *)(*(void *)a2 + 72) = BlueFin::MatSkewCross::operator()((uint64_t)&v25, v16, 1);
    *(double *)(*(void *)a2 + 80) = BlueFin::MatSkewCross::operator()((uint64_t)&v25, v16, 2);
    *(double *)(*(void *)a2 + 88) = BlueFin::MatSkewCross::operator()((uint64_t)&v25, v16, 3);
    *(double *)(*(void *)a2 + 120) = -BlueFin::MatSkewCross::operator()((uint64_t)&v25, v16, 2);
    double v19 = BlueFin::MatSkewCross::operator()((uint64_t)&v25, v16, 3);
    uint64_t v20 = *(void *)a2;
    a2 += 48;
    *(double *)(v20 + 128) = -v19;
    double result = -*(double *)&v30[v15];
    *(double *)(v20 + 168) = result;
    v15 += 4;
    ++v16;
  }
  while (v15 != 12);
  return result;
}

uint64_t BlueFin::GlPeShrimpKf::ApplyVehConstraint(BlueFin::GlPeShrimpKf *this)
{
  v14[24] = *MEMORY[0x263EF8340];
  v11[16] = 0.0;
  BlueFin::GlPeShrimpKf::GetVelVeh((uint64_t *)this, (BlueFin::Matrix *)v11);
  for (uint64_t i = 0; i != 144; i += 48)
  {
    uint64_t v3 = &v12[i];
    *(_OWORD *)&v12[i + 4] = 0uLL;
    *(void *)uint64_t v3 = &v12[i + 4];
    *((void *)v3 + 1) = 0x1500000000;
    *((_OWORD *)v3 + 2) = 0uLL;
    *((_OWORD *)v3 + 3) = 0uLL;
    *((_OWORD *)v3 + 4) = 0uLL;
    *((_OWORD *)v3 + 5) = 0uLL;
    *((_OWORD *)v3 + 6) = 0uLL;
    *((_OWORD *)v3 + 7) = 0uLL;
    *((_OWORD *)v3 + 8) = 0uLL;
    *((_OWORD *)v3 + 9) = 0uLL;
    *((_OWORD *)v3 + 10) = 0uLL;
    *((_OWORD *)v3 + 11) = 0uLL;
  }
  BlueFin::GlPeShrimpKf::GetVehConstraintHVec((uint64_t)this, v12);
  BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)&v13, 6, -v11[4], *((double *)this + 2) * *((double *)this + 2), 5.0, v4, 0);
  double v6 = (BlueFin::GlPeNavGnssBlocked *)*((void *)this + 656);
  double v7 = (char *)this + *(void *)(*(void *)this - 24);
  if (*((_DWORD *)v6 + 21) != 1
    || (BOOL IsParkingGarage = BlueFin::GlPeNavGnssBlocked::IsParkingGarage(v6, *((_DWORD *)v7 + 50)),
        double v9 = 6.0,
        IsParkingGarage))
  {
    double v9 = sqrt(*((double *)v7 + 13) * *((double *)v7 + 13) + *((double *)v7 + 14) * *((double *)v7 + 14)) * 0.2;
  }
  if (v9 < *((double *)this + 2)) {
    double v9 = *((double *)this + 2);
  }
  return BlueFin::GlPeShrimpKf::MeasUpdateINS(this, (uint64_t)v14, 7, -v11[8], v9 * v9, 5.0, v5, 0);
}

void BlueFin::GlPeShrimpKf::ApplyNoTurnConstraint(BlueFin::GlPeShrimpKf *this)
{
  double v2 = (double *)((char *)this + 4720);
  uint64_t v3 = (BlueFin::GlPeShrimpKf *)((char *)this + 4816);
  double v34 = BlueFin::QuaternionD::conj((BlueFin::GlPeShrimpKf *)((char *)this + 4816));
  double v35 = v4;
  double v36 = v5;
  uint64_t v37 = v6;
  v53[0] = BlueFin::QuaternionD::operator*(v2, &v34);
  v53[1] = v7;
  v53[2] = v8;
  v53[3] = v9;
  double v51 = 0.0;
  double v52 = 0.0;
  double v49 = 0.0;
  double v34 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)v53);
  double v35 = v10;
  double v36 = v11;
  uint64_t v37 = v12;
  BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v34, &v52, &v51, &v49);
  double v34 = BlueFin::QuaternionD::conj(v3);
  double v35 = v13;
  double v36 = v14;
  uint64_t v37 = v15;
  double v45 = BlueFin::QuaternionD::operator*((double *)this + 586, &v34);
  uint64_t v46 = v16;
  uint64_t v47 = v17;
  uint64_t v48 = v18;
  double v34 = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v45);
  double v35 = v19;
  double v36 = v20;
  uint64_t v37 = v21;
  BlueFin::QuaternionD::qnb2Eul((BlueFin::QuaternionD *)&v34, &v52, &v51, &v50);
  double v23 = v51;
  double v22 = v52;
  uint64_t v44 = 0x300000003;
  __double2 v24 = __sincos_stret(v49);
  __double2 v25 = __sincos_stret(v23);
  __double2 v26 = __sincos_stret(v22);
  double v34 = v25.__cosval * v24.__cosval;
  double v35 = v25.__cosval * v24.__sinval;
  double v36 = -v25.__sinval;
  double v38 = v26.__sinval * v25.__sinval * v24.__cosval - v26.__cosval * v24.__sinval;
  double v39 = v26.__sinval * v25.__sinval * v24.__sinval + v26.__cosval * v24.__cosval;
  double v40 = v26.__sinval * v25.__cosval;
  double v41 = v26.__cosval * v25.__sinval * v24.__cosval + v26.__sinval * v24.__sinval;
  double v42 = v26.__cosval * v25.__sinval * v24.__sinval - v26.__sinval * v24.__cosval;
  double v43 = v26.__cosval * v25.__cosval;
  double v45 = 1.0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  BlueFin::QuaternionD::rot2Q((BlueFin::QuaternionD *)&v45, (const BlueFin::Matrix *)&v34);
  v33[0] = BlueFin::QuaternionD::conj((BlueFin::QuaternionD *)&v45);
  v33[1] = v27;
  v33[2] = v28;
  v33[3] = v29;
  *((double *)this + 586) = BlueFin::QuaternionD::operator*(v33, (double *)v3);
  *((void *)this + 587) = v30;
  *((void *)this + 588) = v31;
  *((void *)this + 589) = v32;
}

void BlueFin::GlPeShrimpKf::PropStates(double *a1, __n128 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  double v8 = *((double *)v7 + 15);
  uint64_t v9 = a1 + 586;
  double v10 = a1 + 573;
  float64x2_t v19 = *(float64x2_t *)(v7 + 104);
  long long v11 = *((_OWORD *)a1 + 294);
  v21[0] = *((_OWORD *)a1 + 293);
  v21[1] = v11;
  (*(void (**)(void))(v6 + 8))();
  (*(void (**)(double *, _OWORD *, _OWORD *, uint64_t, __n128))(*(void *)a1 + 16))(a1, v21, v9, a4, a2);
  uint64_t v12 = (char *)a1 + *(void *)(*(void *)a1 - 24);
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v18 = vmulq_n_f64(vmulq_f64(vaddq_f64(v19, *(float64x2_t *)(v12 + 104)), _Q1), a2.n128_f64[0]);
  _Q1.f64[0] = (v8 + *((double *)v12 + 15)) * 0.5 * a2.n128_f64[0];
  float64x2_t v22 = v18;
  float64_t v23 = _Q1.f64[0];
  BlueFin::ned2lla(v10, v22.f64, v24);
  BlueFin::GlPeShrimpKf::SetInsLla((uint64_t)a1, (uint64_t)v24);
}

float64_t BlueFin::GlPeShrimpKf::PropAttitude(uint64_t a1, uint64_t a2, double a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  float64x2_t v9 = *(float64x2_t *)a2;
  long long v10 = v4;
  double v5 = *(double *)(a1 + 4648);
  float64x2_t v9 = vsubq_f64(v9, *(float64x2_t *)(a1 + 4632));
  *(double *)&long long v10 = *(double *)&v4 - v5;
  uint64_t v6 = (BlueFin::QuaternionD *)(a1 + 4688);
  BlueFin::QuaternionD::gyroIntegration(a1 + 4688, &v9, a3);
  BlueFin::QuaternionD::normalize(v6);
  float64_t result = v9.f64[0];
  long long v8 = v10;
  *(float64x2_t *)(a1 + 4984) = v9;
  *(_OWORD *)(a1 + 5000) = v8;
  return result;
}

double BlueFin::GlPeShrimpKf::PropVelocity(uint64_t a1, BlueFin::QuaternionD *a2, BlueFin::QuaternionD *this, double *a4, double a5)
{
  BlueFin::QuaternionD::q2Rot(this, (uint64_t)v36);
  BlueFin::QuaternionD::q2Rot(a2, (uint64_t)v35);
  double v9 = *a4;
  double v10 = a4[1];
  v30[16] = 0x100000003;
  v31[0] = v9;
  double v32 = v10;
  double v11 = a4[2];
  uint64_t v34 = 0x100000003;
  double v33 = v11;
  uint64_t v12 = *(void *)(a1 + 4616);
  uint64_t v13 = *(void *)(a1 + 4624);
  v30[0] = *(void *)(a1 + 4608);
  v30[4] = v12;
  v30[8] = v13;
  BlueFin::Matrix::operator+=((uint64_t)v36, (uint64_t)v35);
  BlueFin::Matrix::operator-=((uint64_t)v31, (uint64_t)v30);
  double v14 = v32;
  *(double *)(a1 + 4920) = *(double *)(a1 + 4920) + v31[0] * a5;
  *(double *)(a1 + 4928) = *(double *)(a1 + 4928) + v14 * a5;
  *(double *)(a1 + 4936) = *(double *)(a1 + 4936) + v33 * a5;
  uint64_t v15 = v34;
  if ((int)v34 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = HIDWORD(v34);
    float64x2_t v18 = v31;
    do
    {
      float64x2_t v19 = v18;
      uint64_t v20 = v17;
      if ((int)v17 >= 1)
      {
        do
        {
          *float64x2_t v19 = *v19 * 0.5;
          ++v19;
          --v20;
        }
        while (v20);
      }
      ++v16;
      v18 += 4;
    }
    while (v16 != v15);
  }
  BlueFin::Matrix::mult((uint64_t)v28, (const BlueFin::Matrix *)v36, (const BlueFin::Matrix *)v31);
  double v21 = v28[0];
  double v22 = v28[4];
  *(double *)(a1 + 4952) = *(double *)(a1 + 4952) + v28[0] * a5;
  *(double *)(a1 + 4960) = *(double *)(a1 + 4960) + v22 * a5;
  double v23 = v29;
  *(double *)(a1 + 4968) = *(double *)(a1 + 4968) + v29 * a5;
  *(double *)(a1 + 4664) = v21;
  *(double *)(a1 + 4672) = v22;
  double v24 = v23 + 9.81;
  *(double *)(a1 + 4680) = v24;
  __double2 v25 = (double *)(a1 + *(void *)(*(void *)a1 - 24));
  double v26 = v25[14] + v22 * a5;
  double result = v25[15] + v24 * a5;
  v25[13] = v25[13] + v21 * a5;
  v25[14] = v26;
  v25[15] = result;
  return result;
}

double BlueFin::GlPeShrimpKf::PropClock(BlueFin::GlPeShrimpKf *this, double a2)
{
  *(double *)((char *)this + *(void *)(*(void *)this - 24) + 88) = *(double *)((char *)this
                                                                                   + *(void *)(*(void *)this - 24)
                                                                                   + 88)
                                                                       + *(double *)((char *)this
                                                                                   + *(void *)(*(void *)this - 24)
                                                                                   + 152)
                                                                       * a2;
  if (*((unsigned char *)this + 5828)) {
    double v2 = fmax((float)(*((float *)this + 1458) * *((float *)this + 1458)) * 0.5, 4.0);
  }
  else {
    double v2 = 0.09;
  }
  double v3 = a2 * a2 * v2;
  uint64_t v4 = *((void *)this + 83);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v5 = *(void *)(v4 + 64);
  double v7 = *(double *)(v6 + 56) + v3 * a2 / 3.0;
  double v8 = v3 * 0.5 + *(double *)(v6 + 64);
  *(double *)(v6 + 56) = v7 + a2;
  *(double *)(v6 + 64) = v8;
  double result = *(double *)(v5 + 64) + v2 * a2;
  *(double *)(v5 + 56) = v8;
  *(double *)(v5 + 64) = result;
  return result;
}

uint64_t BlueFin::GlPeShrimpNhcMonitor::RunDetector(uint64_t this)
{
  if (*(unsigned char *)(this + 2) == 20)
  {
    uint64_t v1 = this;
    *(void *)(this + 168) = 0;
    for (unsigned int i = 19; i != 9; --i)
    {
      double v3 = (double *)BlueFin::GlPeShrimpNhcMonitor::at((BlueFin::GlPeShrimpNhcMonitor *)v1, i);
      *(double *)(v1 + 168) = *(double *)(v1 + 168) + *v3 * *v3;
    }
    unsigned int v4 = 0;
    int v5 = 0;
    unsigned int v6 = 0;
    int v7 = 1;
    do
    {
      this = BlueFin::GlPeShrimpNhcMonitor::at((BlueFin::GlPeShrimpNhcMonitor *)v1, v4);
      if (*(double *)this < 0.0) {
        ++v6;
      }
      unsigned int v8 = v7;
      if (v4 <= 0x12)
      {
        do
        {
          double v9 = *(double *)BlueFin::GlPeShrimpNhcMonitor::at((BlueFin::GlPeShrimpNhcMonitor *)v1, v8);
          this = BlueFin::GlPeShrimpNhcMonitor::at((BlueFin::GlPeShrimpNhcMonitor *)v1, v4);
          if (v9 > *(double *)this) {
            ++v5;
          }
          else {
            --v5;
          }
          ++v8;
        }
        while (v8 != 20);
      }
      ++v4;
      ++v7;
    }
    while (v4 != 20);
    if (v5 >= 0) {
      int v10 = v5;
    }
    else {
      int v10 = -v5;
    }
    *(float *)(v1 + 176) = (float)(v10 - 1) / 30.822;
    BOOL v11 = v6 >= 0x10 && v5 < 0 || v6 < 5 && v5 > 0;
    *(unsigned char *)(v1 + 180) = v11;
  }
  return this;
}

uint64_t BlueFin::GlPeShrimpNhcMonitor::at(BlueFin::GlPeShrimpNhcMonitor *this, unsigned int a2)
{
  if (*((unsigned __int8 *)this + 2) <= a2)
  {
    DeviceFaultNotify("glpe_shrimpkf.h", 86, "at", (char)"idx < size()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.h", 86, "idx < size()");
  }
  return (uint64_t)this + 8 * ((*(char *)this + a2) % 0x14) + 8;
}

void BlueFin::GlPeShrimpKf::~GlPeShrimpKf(BlueFin::GlPeShrimpKf *this)
{
}

void virtual thunk to'BlueFin::GlPeShrimpKf::~GlPeShrimpKf(BlueFin::GlPeShrimpKf *this)
{
}

double BlueFin::GlPeShrimpKf::stReducedNavState::stReducedNavState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, long long *a6, uint64_t a7)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 64) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 80) = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a3;
  *(void *)(a1 + 112) = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(void *)(a1 + 136) = *(void *)(a4 + 16);
  long long v7 = a5[1];
  *(_OWORD *)(a1 + 144) = *a5;
  *(_OWORD *)(a1 + 160) = v7;
  long long v8 = *a6;
  long long v9 = a6[1];
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 192) = v9;
  *(void *)(a1 + 208) = a1 + 224;
  *(void *)&double result = 0x1500000000;
  *(void *)(a1 + 216) = 0x1500000000;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_WORD *)(a1 + 400) = 256;
  if (a7)
  {
    int v11 = *(_DWORD *)(a7 + 20);
    if (v11 != *(_DWORD *)(a7 + 16))
    {
      DeviceFaultNotify("glpe_shrimpkf.h", 372, "stReducedNavState", (char)"potP->GetColSize() == potP->GetRowSize()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_shrimpkf.h", 372, "potP->GetColSize() == potP->GetRowSize()");
    }
    *(_DWORD *)(a1 + 216) = (__int16)v11;
    if (v11 >= 1)
    {
      uint64_t v12 = *(void *)(a7 + 8);
      int v13 = 1;
      do
      {
        double result = *(double *)(*(void *)(v12 + 8 * (unsigned __int16)v13) + 8 * (unsigned __int16)v13);
        *(double *)(a1 + 224 + 8 * (unsigned __int16)v13++) = result;
      }
      while (v11 >= (unsigned __int16)v13);
    }
  }
  return result;
}

BlueFin::BigMatrix *BlueFin::BigMatrixDim<21,21>::BigMatrixDim(BlueFin::BigMatrix *this, const BlueFin::BigMatrix *a2)
{
  double v3 = (char *)this + 24;
  *((_OWORD *)this + 1) = xmmword_263BBC540;
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 3560;
  *((void *)this + 445) = 0;
  for (uint64_t i = 8; i != 176; i += 8)
  {
    *(void *)(*((void *)this + 1) + i) = v3;
    v3 += 168;
  }
  BlueFin::BigMatrix::Clone(this, a2);
  return this;
}

uint64_t BlueFin::GlPeTurnDetector::DoWaitForTurn(uint64_t this, double a2)
{
  for (double i = a2 - *(double *)(this + 8); i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  double v4 = *(double *)(this + 16);
  double v3 = (double *)(this + 16);
  if (v4 >= i) {
    double v4 = i;
  }
  if (i < *(double *)(this + 24)) {
    double i = *(double *)(this + 24);
  }
  *double v3 = v4;
  *(double *)(this + 24) = i;
  if (v4 >= -0.785398163)
  {
    if (i <= 0.785398163) {
      return this;
    }
    int v5 = 2;
  }
  else
  {
    int v5 = 1;
  }
  *double v3 = 0.0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)this = 2;
  *(_DWORD *)(this + 4) = v5;
  *(double *)(this + 8) = a2;
  return this;
}

uint64_t BlueFin::GlPeTurnDetector::DoTurnIdentified(uint64_t result, uint64_t a2, int a3, double a4)
{
  int v4 = *(_DWORD *)(result + 4);
  if (!v4)
  {
    DeviceFaultNotify("glpe_turndetector.cpp", 86, "DoTurnIdentified", (char)"m_eDirection != NONE");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_turndetector.cpp", 86, "m_eDirection != NONE");
  }
  for (double i = a4 - *(double *)(result + 8); i > 3.14159265; double i = i + -6.28318531)
    ;
  for (; i <= -3.14159265; double i = i + 6.28318531)
    ;
  if (v4 == 1 && i >= 0.0)
  {
    ++*(_DWORD *)(result + 32);
LABEL_12:
    *(void *)double result = 1;
    *(_DWORD *)(result + 40) = a3;
    *(_OWORD *)(result + 48) = *(_OWORD *)a2;
    *(void *)(result + 64) = *(void *)(a2 + 16);
    goto LABEL_13;
  }
  if (v4 == 2 && i <= 0.0)
  {
    ++*(_DWORD *)(result + 36);
    goto LABEL_12;
  }
LABEL_13:
  *(double *)(result + 8) = a4;
  return result;
}

uint64_t BlueFin::GlPeTurnDetector::Update(uint64_t result, uint64_t a2, int a3, double a4)
{
  int v4 = *(_DWORD *)result;
  if (*(_DWORD *)result == 2)
  {
    return BlueFin::GlPeTurnDetector::DoTurnIdentified(result, a2, a3, a4);
  }
  else if (v4 == 1)
  {
    return BlueFin::GlPeTurnDetector::DoWaitForTurn(result, a4);
  }
  else
  {
    if (v4)
    {
      DeviceFaultNotify("glpe_turndetector.cpp", 128, "Update", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_turndetector.cpp", 128, "false");
    }
    *(double *)(result + 8) = a4;
    *(_DWORD *)double result = 1;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 16) = 0;
  }
  return result;
}

double BlueFin::GlPeTightPolaroid::stInnovData::Norm(BlueFin::GlPeTightPolaroid::stInnovData *this)
{
  double v1 = *((double *)this + 3);
  if (v1 == 0.0 || (double v2 = *((double *)this + 4), v2 == 0.0))
  {
    DeviceFaultNotify("glpe_prawnkf.h", 149, "Norm", (char)"IsValid()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.h", 149, "IsValid()");
  }
  float v3 = v1 + v2;
  return *((double *)this + 2) / sqrtf(v3);
}

uint64_t BlueFin::GlPeMeasList::push_back(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 800);
  if (v2 >= 0x64)
  {
    DeviceFaultNotify("glpe_prawnkf.h", 74, "push_back", (char)"m_nMeas < _DIM(m_pastSkfMeas)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.h", 74, "m_nMeas < _DIM(m_pastSkfMeas)");
  }
  *(_DWORD *)(result + 800) = v2 + 1;
  *(void *)(result + 8 * v2) = a2;
  return result;
}

void BlueFin::GlPePrawnKf::Reset(uint64_t a1, int a2)
{
  float v3 = (unsigned __int8 *)(a1 + 21264);
  BlueFin::GlPeShrimpKf::ResetINS((uint64_t *)a1, a2);
  bzero(*(void **)(a1 + 21256), ((4 * *v3 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(a1 + 21344), ((4 * v3[88] + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  v3[256] = 1;
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::Reset(uint64_t a1, int a2)
{
}

void BlueFin::GlPePrawnKf::ComputePosition(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v344 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(v3 + 3) & 4) == 0)
  {
    DeviceFaultNotify("glpe_prawnkf.cpp", 696, "ComputePosition", (char)"rotSettings.Has(TCKF_ENABLE)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 696, "rotSettings.Has(TCKF_ENABLE)");
  }
  uint64_t v5 = v2;
  uint64_t v6 = v2 + 5050;
  uint64_t v7 = *(void *)v2;
  *(_DWORD *)(v2 + *(void *)(*(void *)v2 - 24) + 256) &= ~1u;
  *(_DWORD *)(v2 + *(void *)(v7 - 24) + 256) &= ~2u;
  *(_WORD *)(v2 + 5050) = 1;
  if (*(_DWORD *)(v2 + 8) != 2)
  {
    *(_DWORD *)(v2 + *(void *)(v7 - 24) + 200) = **(_DWORD **)(v2 + 5856);
    return;
  }
  uint64_t v8 = v4;
  uint64_t v248 = v3;
  if (sqrt(*(double *)(v2 + 4960) * *(double *)(v2 + 4960)+ *(double *)(v2 + 4952) * *(double *)(v2 + 4952)+ (*(double *)(v2 + 4968) + 9.81) * (*(double *)(v2 + 4968) + 9.81)) > 2.943)*(unsigned char *)(v2 + 5051) = 1; {
  uint64_t v252 = v2 + 19192;
  }
  *(_DWORD *)(v2 + *(void *)(v7 - 24) + 200) = **(_DWORD **)(v2 + 5856);
  double v9 = (double)(*(_DWORD *)(v2 + *(void *)(v7 - 24) + 200) - *(_DWORD *)(v2 + 4860)) * 0.001;
  BlueFin::GlPeShrimpKf::PropClock((BlueFin::GlPeShrimpKf *)v2, v9);
  if (*(_DWORD *)(v5 + 8)) {
    *(double *)(v5 + 4656) = *(double *)(v5 + 4656)
  }
                           + v9
                           + (double)(*(_DWORD *)(v5 + 4856) - *(_DWORD *)(v5 + 4864)) * -0.001;
  uint64_t v249 = v8;
  uint64_t v250 = v6;
  int v10 = &v338;
  uint64_t v11 = 100;
  do
  {
    *((unsigned char *)v10 - 8) = 0;
    *((_DWORD *)v10 - 1) = -1;
    *(_WORD *)int v10 = 575;
    v10 += 7;
    --v11;
  }
  while (v11);
  uint64_t v12 = *(_OWORD **)(v5 + 5856);
  uint64_t v13 = v5 + *(void *)(*(void *)v5 - 24);
  uint64_t v14 = BlueFin::GlSetBase::operator=(v13 + 264, (uint64_t)v12 + 184);
  *(_OWORD *)(v14 + 12) = *(_OWORD *)((char *)v12 + 196);
  long long v15 = *(_OWORD *)((char *)v12 + 212);
  long long v16 = *(_OWORD *)((char *)v12 + 228);
  long long v17 = *(_OWORD *)((char *)v12 + 244);
  *(_OWORD *)(v13 + 336) = v12[16];
  *(_OWORD *)(v14 + 60) = v17;
  *(_OWORD *)(v14 + 44) = v16;
  *(_OWORD *)(v14 + 28) = v15;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)__src, (unsigned int *)&__src[12], 0x13u, (const void **)(v5 + *(void *)(*(void *)v5 - 24) + 264));
  BlueFin::GlPeNavMeasSelect::GlPeNavMeasSelect((uint64_t)&v339, *(void *)(v5 + 5864), *(void *)(v5 + 5856));
  BlueFin::GlPeNavMeasSelect::RemoveTimeFail((BlueFin::GlPeNavMeasSelect *)&v339, (BlueFin::GlSignalIdSet *)__src);
  BlueFin::GlPeNavMeasSelect::RemoveHighUra((BlueFin::GlPeNavMeasSelect *)&v339, (BlueFin::GlSignalIdSet *)__src);
  LODWORD(v254) = __src[8];
  memcpy(&v255, *(const void **)__src, 4 * __src[8]);
  HIDWORD(v254) = v255;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v254);
  while (BYTE1(v254) != v254)
  {
    if (WORD1(v254) >= 0x23FuLL)
    {
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
    }
    float64x2_t v18 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v254);
    char v19 = *v18;
    LODWORD(v18) = v18[1];
    LOBYTE(v301) = v19;
    HIDWORD(v301) = v18;
    *(_WORD *)uint64_t v302 = WORD1(v254);
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 5856), (const BlueFin::GlSignalId *)&v301, 0, 0);
    PeMeas = (BlueFin::stPeSigMeasKF *)BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 5856), (const BlueFin::GlSignalId *)&v301, 0);
    if ((MeMeas[13] & 0x80) != 0
      || *((float *)MeMeas + 25) * 1000000000.0 > 999.0
      || (BlueFin::stPeSigMeasKF::IsPRValidForNav(PeMeas) & 1) == 0)
    {
      BlueFin::GlSetBase::Remove((uint64_t)__src, *(__int16 *)v302);
    }
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v254);
  }
  uint64_t v22 = v5 + *(void *)(*(void *)v5 - 24);
  uint64_t v23 = BlueFin::GlSetBase::operator=(v22 + 264, (uint64_t)__src);
  uint64_t v24 = 0;
  long long v25 = *(_OWORD *)&__src[12];
  *(_OWORD *)(v23 + 28) = v332;
  long long v26 = v334[0];
  *(_OWORD *)(v23 + 44) = v333;
  *(_OWORD *)(v23 + 60) = v26;
  *(_OWORD *)(v22 + 336) = *(_OWORD *)((char *)v334 + 12);
  *(_OWORD *)(v23 + 12) = v25;
  double v27 = *(BlueFin::GlPeMsmtMgr **)(v5 + 5856);
  uint64_t v28 = *(void *)(*(void *)v5 - 24);
  do
  {
    double v29 = &v340[v24 - 8];
    v29[12] = 0;
    *((_DWORD *)v29 + 4) = -1;
    *((_WORD *)v29 + 10) = 575;
    v24 += 24;
  }
  while (v24 != 2400);
  uint64_t v30 = v5 + v28;
  double v254 = &v256;
  LOBYTE(v255) = 19;
  long long v256 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  memset(v259, 0, 28);
  uint64_t v31 = *(unsigned __int8 *)(v5 + v28 + 272);
  __src[0] = v31;
  memcpy(&__src[8], *(const void **)(v30 + 264), 4 * v31);
  *(_WORD *)&__src[2] = 0;
  __src[1] = 0;
  *(_DWORD *)&__src[4] = *(_DWORD *)&__src[8];
  BlueFin::GlSetIterator::operator++(__src);
  if (__src[1] != __src[0])
  {
    double v32 = (double **)&v339;
    do
    {
      if (*(unsigned __int16 *)&__src[2] >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      double v33 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * *(unsigned __int16 *)&__src[2];
      char v34 = *v33;
      LODWORD(v33) = v33[1];
      LOBYTE(v301) = v34;
      HIDWORD(v301) = v33;
      *(_WORD *)uint64_t v302 = *(_WORD *)&__src[2];
      if ((((unint64_t)*(unsigned int *)(*((void *)v27 + 1)
                                               + (((unint64_t)*(unsigned __int16 *)&__src[2] >> 3) & 0x1FFC)) >> (__src[2] & 0x1F)) & 1) != 0)
      {
        if ((char *)v32 - (char *)&v339 >= 2400)
        {
          DeviceFaultNotify("glpe_prawnkf.cpp", 156, "SortSignalIdsByCN0", (char)"(pLastPrMeas - astPrMeasCNoForSort) < GL_CHANNELS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 156, "(pLastPrMeas - astPrMeasCNoForSort) < GL_CHANNELS");
        }
        double v35 = BlueFin::GlPeMsmtMgr::GetMeMeas(v27, (const BlueFin::GlSignalId *)&v301, 0, 0);
        if ((void **)((char *)v32 + 12) != &v301)
        {
          *((unsigned char *)v32 + 12) = (_BYTE)v301;
          *((_DWORD *)v32 + 4) = HIDWORD(v301);
          *((_WORD *)v32 + 10) = *(_WORD *)v302;
        }
        *(double *)double v32 = *((float *)v35 + 27);
        v32 += 3;
      }
      BlueFin::GlSetIterator::operator++(__src);
    }
    while (__src[1] != __src[0]);
    if (v32 != (double **)&v339)
    {
      if ((int)(-1426063360 * (((char *)v32 - (char *)&v339) >> 3)) > 0x1000000)
      {
        uint64_t v36 = 1;
        do
        {
          uint64_t v37 = &v340[24 * v36 - 8];
          if (*((double *)v37 - 3) < *(double *)v37)
          {
            int v38 = v36 - 1;
            if (v36 != 1)
            {
              int v39 = 0;
              do
              {
                int v40 = v38 + v39;
                if (v38 + v39 < 0 != __OFADD__(v38, v39)) {
                  ++v40;
                }
                int v41 = v40 >> 1;
                if (*(double *)&v340[24 * v41 - 8] >= *(double *)v37) {
                  int v39 = v41 + 1;
                }
                else {
                  int v38 = v41;
                }
              }
              while (v39 != v38);
            }
            *(_OWORD *)__src = *(_OWORD *)v37;
            *(void *)&__src[16] = *((void *)v37 + 2);
            double v42 = (void *)&v340[24 * v38 - 8];
            memmove(v340 + 24 * v38 + 16, v42, 24 * ((int)v36 - v38));
            *(_OWORD *)double v42 = *(_OWORD *)__src;
            v42[2] = *(void *)&__src[16];
          }
          ++v36;
        }
        while (v36 != (-85 * (((char *)v32 - (char *)&v339) >> 3)));
      }
      double v43 = v254;
      uint64_t v44 = 20;
      do
      {
        *((_DWORD *)v43 + (*(__int16 *)&v340[v44 - 8] >> 5)) |= 1 << *(_WORD *)&v340[v44 - 8];
        if ((double **)&v340[v44 - 4] == v32) {
          break;
        }
        uint64_t v45 = v44 + 4;
        v44 += 24;
      }
      while (v45 < 1177);
    }
  }
  uint64_t v46 = v5 + *(void *)(*(void *)v5 - 24);
  uint64_t v47 = BlueFin::GlSetBase::operator=(v46 + 264, (uint64_t)&v254);
  long long v48 = v256;
  *(_OWORD *)(v47 + 28) = v257;
  long long v49 = v259[0];
  *(_OWORD *)(v47 + 44) = v258;
  *(_OWORD *)(v47 + 60) = v49;
  *(_OWORD *)(v46 + 336) = *(_OWORD *)((char *)v259 + 12);
  *(_OWORD *)(v47 + 12) = v48;
  long double v50 = (_OWORD *)(v5 + *(void *)(*(void *)v5 - 24));
  uint64_t v51 = BlueFin::GlSetBase::operator=((uint64_t)(v50 + 22), (uint64_t)v50 + 264);
  *(_OWORD *)(v51 + 72) = v50[21];
  *(_OWORD *)(v51 + 28) = *(_OWORD *)((char *)v50 + 292);
  *(_OWORD *)(v51 + 44) = *(_OWORD *)((char *)v50 + 308);
  *(_OWORD *)(v51 + 60) = *(_OWORD *)((char *)v50 + 324);
  *(_OWORD *)(v51 + 12) = *(_OWORD *)((char *)v50 + 276);
  uint64_t v52 = v5 + *(void *)(*(void *)v5 - 24);
  *(_OWORD *)(v52 + 56) = *(_OWORD *)(v52 + 8);
  *(void *)(v52 + 72) = *(void *)(v52 + 24);
  double v251 = (BlueFin::GlSetBase *)(v249 + 440);
  *(unsigned char *)(v252 + 2328) = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v249 + 440));
  BlueFin::GlPeNavMeasSelect::GlPeNavMeasSelect((uint64_t)&v339, *(void *)(v5 + 5864), *(void *)(v5 + 5856));
  uint64_t v53 = *(void *)v5;
  double v54 = sqrt(*(double *)(v5 + *(void *)(*(void *)v5 - 24) + 112)* *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 112)+ *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 104)* *(double *)(v5 + *(void *)(*(void *)v5 - 24) + 104))* 3.0;
  if (v54 < 7.5) {
    double v54 = 7.5;
  }
  double v343 = v54;
  uint64_t v55 = v5 + *(void *)(v53 - 24);
  uint64_t v56 = *(void *)(v5 + 5248);
  int v57 = *(__int16 *)(v56 + 2) >= 1 && *(unsigned __int8 *)(v56 + 45) == 0;
  int v58 = **(_DWORD **)(v5 + 5872);
  int v59 = (*(uint64_t (**)(uint64_t))(v53 + 120))(v5);
  uint64_t v253 = (BlueFin::GlPeNavUtil *)(v5 + 5848);
  BlueFin::GlPeNavMeasSelect::SelectRr((uint64_t)&v339, (const BlueFin::GlPeNavUtil *)(v5 + 5848), (BlueFin::GlSetBase *)(v55 + 352), v55 + 8, v58, v55 + 104, v57, v59, 0);
  BlueFin::GlPeNavMeasSelect::SelectPr((BlueFin::GlPeNavMeasSelect *)&v339, (const BlueFin::GlPeNavUtil *)(v5 + 5848), (BlueFin::GlSignalIdSet *)(v5 + *(void *)(*(void *)v5 - 24) + 264), 0);
  bzero(*(void **)(v5 + 21256), ((4 * *(unsigned __int8 *)(v252 + 2072) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  bzero(*(void **)(v5 + 21344), ((4 * *(unsigned __int8 *)(v252 + 2160) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v60 = v5 + *(void *)(*(void *)v5 - 24);
  bzero(__src, 0x328uLL);
  double v339 = COERCE_DOUBLE(&v340[4]);
  v340[0] = 19;
  memset(&v340[4], 0, 48);
  memset(v341, 0, sizeof(v341));
  int v61 = *(_DWORD *)(*(void *)(v5 + 5232) + 8);
  LOBYTE(v254) = *(unsigned char *)(v60 + 360);
  memcpy(&v255, *(const void **)(v60 + 352), 4 * v254);
  WORD1(v254) = 0;
  BYTE1(v254) = 0;
  HIDWORD(v254) = v255;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v254);
  if (BYTE1(v254) != v254)
  {
    unsigned int v62 = 0;
    unsigned int v63 = v61 - 1;
    double v64 = v337;
    do
    {
      unint64_t v65 = WORD1(v254);
      if (WORD1(v254) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      __double2 v66 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v254);
      char v67 = *v66;
      LODWORD(v66) = v66[1];
      LOBYTE(v301) = v67;
      HIDWORD(v301) = v66;
      *(_WORD *)uint64_t v302 = WORD1(v254);
      BlueFin::GlPeNavUtil::PackSkfMeas_RR_SignalId((uint64_t)v253, (uint64_t)v64, (BlueFin::GlSignalId *)&v301, v63 < 2);
      *(_DWORD *)(*(void *)&v339 + ((v65 >> 3) & 0x1FFC)) |= 1 << v65;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v254);
      if (BYTE1(v254) == v254) {
        break;
      }
      v64 += 7;
    }
    while (v62++ < 0x31);
  }
  uint64_t v69 = (BlueFin::GlSetBase *)BlueFin::GlSetBase::operator=(v60 + 352, (uint64_t)&v339);
  long long v70 = *(_OWORD *)&v340[4];
  *(_OWORD *)(v60 + 380) = *(_OWORD *)&v340[20];
  long long v71 = *(_OWORD *)v341;
  *(_OWORD *)(v60 + 396) = *(_OWORD *)&v340[36];
  *(_OWORD *)(v60 + 412) = v71;
  *(_OWORD *)(v60 + 424) = *(_OWORD *)&v341[12];
  *(_OWORD *)(v60 + 364) = v70;
  unsigned int v72 = BlueFin::GlSetBase::Cnt(v69);
  uint64_t v73 = &v337[7 * v72];
  if (100 - v72 >= 0x32) {
    unsigned int v74 = 50;
  }
  else {
    unsigned int v74 = 100 - v72;
  }
  double v339 = COERCE_DOUBLE(&v340[4]);
  v340[0] = 19;
  memset(&v340[4], 0, 48);
  memset(v341, 0, sizeof(v341));
  LOBYTE(v254) = *(unsigned char *)(v60 + 272);
  memcpy(&v255, *(const void **)(v60 + 264), 4 * v254);
  WORD1(v254) = 0;
  BYTE1(v254) = 0;
  HIDWORD(v254) = v255;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v254);
  if (v74 && BYTE1(v254) != v254)
  {
    unsigned int v75 = 1;
    uint64_t v76 = (uint64_t)v73;
    do
    {
      unint64_t v77 = WORD1(v254);
      if (WORD1(v254) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      uint64_t v78 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v254);
      char v79 = *v78;
      LODWORD(v78) = v78[1];
      LOBYTE(v301) = v79;
      HIDWORD(v301) = v78;
      *(_WORD *)uint64_t v302 = WORD1(v254);
      char v80 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 248))(v5);
      BlueFin::GlPeNavUtil::PackSkfMeas_PR_SignalId((uint64_t)v253, v76, (BlueFin::GlSignalId *)&v301, v80);
      *(_DWORD *)(*(void *)&v339 + ((v77 >> 3) & 0x1FFC)) |= 1 << v77;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v254);
      if (BYTE1(v254) == v254) {
        break;
      }
      v76 += 56;
      BOOL v177 = v74 > v75++;
    }
    while (v177);
  }
  uint64_t v81 = (BlueFin::GlSetBase *)BlueFin::GlSetBase::operator=(v60 + 264, (uint64_t)&v339);
  long long v82 = *(_OWORD *)&v340[4];
  *(_OWORD *)(v60 + 292) = *(_OWORD *)&v340[20];
  long long v83 = *(_OWORD *)v341;
  *(_OWORD *)(v60 + 308) = *(_OWORD *)&v340[36];
  *(_OWORD *)(v60 + 324) = v83;
  *(_OWORD *)(v60 + 336) = *(_OWORD *)&v341[12];
  *(_OWORD *)(v60 + 276) = v82;
  unsigned int v84 = -1227133513
      * ((unint64_t)((char *)&v73[7 * BlueFin::GlSetBase::Cnt(v81)] - (char *)v337) >> 3);
  if (v84)
  {
    uint64_t v85 = &v337[7 * v84];
    uint64_t v86 = v337;
    do
    {
      BlueFin::GlPeMeasList::push_back((uint64_t)__src, (uint64_t)v86);
      v86 += 7;
    }
    while (v86 < v85);
  }
  bzero(&v254, 0x328uLL);
  BlueFin::GlPeShrimpKf::SaveAprioriState((BlueFin::GlPeShrimpKf *)v5);
  uint64_t v87 = *(void *)(v5 + 21544);
  if (v87 && *(unsigned char *)v87 && (*(unsigned char *)(v87 + 3) || *(double *)(v5 + 19168) > 3.0))
  {
    uint64_t v88 = *(void *)v5;
    int v89 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200);
    *(_DWORD *)(v252 + 2360) = v89;
    *(_DWORD *)(v5 + 5832) = *(_DWORD *)(v87 + 8);
    if (!v89)
    {
LABEL_73:
      BOOL v90 = 0;
      goto LABEL_76;
    }
  }
  else
  {
    *(_DWORD *)(v5 + 5832) = 0;
    int v89 = *(_DWORD *)(v252 + 2360);
    uint64_t v88 = *(void *)v5;
    if (!v89) {
      goto LABEL_73;
    }
  }
  BOOL v90 = (*(_DWORD *)(v5 + *(void *)(v88 - 24) + 200) - v89) >> 3 < 0x753;
LABEL_76:
  *(unsigned char *)(v250 + 778) = v90;
  if (*(unsigned char *)(*(void *)(v5 + 5248) + 44)
    && BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)(v5 + *(void *)(v88 - 24) + 264)) < 2)
  {
    goto LABEL_207;
  }
  uint64_t v91 = v5 + *(void *)(v88 - 24);
  if (v89) {
    BOOL v247 = (*(_DWORD *)(v91 + 200) - v89) >> 3 < 0x753;
  }
  else {
    BOOL v247 = 0;
  }
  v262 = v264;
  char v263 = 19;
  memset(v264, 0, sizeof(v264));
  bzero(&v254, 0x328uLL);
  for (uint64_t i = 0; i != 4000; i += 40)
  {
    uint64_t v96 = &v340[i - 8];
    *uint64_t v96 = 0;
    *((_DWORD *)v96 + 1) = -1;
    *((_WORD *)v96 + 4) = 575;
    *((void *)v96 + 3) = 0;
    *((void *)v96 + 4) = 0;
    *((void *)v96 + 2) = 0;
  }
  float v301 = &v302[8];
  *(void *)uint64_t v302 = 0x3200000000;
  memset(&v302[8], 0, 408);
  double v299 = COERCE_DOUBLE((_OWORD *)((char *)v300 + 8));
  *(void *)&v300[0] = 0x3200000000;
  memset((char *)v300 + 8, 0, 408);
  double v272 = v274;
  uint64_t v273 = 0x3200000000;
  memset(v274, 0, sizeof(v274));
  long long v275 = 0u;
  long long v276 = 0u;
  long long v277 = 0u;
  long long v278 = 0u;
  long long v279 = 0u;
  long long v280 = 0u;
  long long v281 = 0u;
  long long v282 = 0u;
  long long v283 = 0u;
  long long v284 = 0u;
  long long v285 = 0u;
  long long v286 = 0u;
  long long v287 = 0u;
  long long v288 = 0u;
  long long v289 = 0u;
  long long v290 = 0u;
  long long v291 = 0u;
  long long v292 = 0u;
  long long v293 = 0u;
  long long v294 = 0u;
  long long v295 = 0u;
  long long v296 = 0u;
  long long v297 = 0u;
  uint64_t v298 = 0;
  *(void *)&long long v270 = v271;
  *((void *)&v270 + 1) = 0x3200000000;
  memset(v271, 0, sizeof(v271));
  if (!v335) {
    goto LABEL_115;
  }
  int v97 = 0;
  uint64_t v98 = &__src[8 * v336];
  do
  {
    uint64_t v99 = *(void *)v98;
    long long v328 = xmmword_263BBC570;
    int v326 = &v329;
    int v327 = v330;
    v330[0] = 0;
    v330[1] = (char *)&v328 + 8;
    if (*(_DWORD *)(v99 + 24) == -1) {
      int v100 = 263361;
    }
    else {
      int v100 = 1217;
    }
    v324[0] = v325;
    v324[1] = 0x100000000;
    v325[0] = 0;
    v325[1] = 0;
    v322[0] = v323;
    v322[1] = 0x100000000;
    v323[0] = 0;
    v323[1] = 0;
    v319[0] = v320;
    v319[1] = 0xC00000000;
    memset(v320, 0, sizeof(v320));
    uint64_t v321 = 0;
    uint64_t v101 = *(void *)(v91 + 88);
    int v102 = **(_DWORD **)(v5 + 19144);
    double v103 = *(float *)(v91 + 208);
    double v104 = *(float *)(v91 + 216);
    double v105 = *(float *)(v91 + 224);
    double v106 = *(float *)(v91 + 232);
    v307[0] = v319;
    v307[1] = v91 + 8;
    v307[2] = v101;
    int v308 = v102;
    int v309 = 3;
    int v310 = v100;
    uint64_t v311 = v91 + 104;
    uint64_t v312 = 0;
    uint64_t v313 = v91 + 152;
    double v314 = v103;
    double v315 = v104;
    double v316 = v105;
    double v317 = v106;
    long long v318 = xmmword_263BBC830;
    v303[0] = v324;
    v303[1] = v322;
    v303[2] = &v326;
    long long v304 = 0u;
    long long v305 = 0u;
    long long v306 = 0u;
    if ((*(unsigned int (**)(void, void *, void *, uint64_t, _UNKNOWN **))(**(void **)(v5 + 12560)
                                                                                          + 16))(*(void *)(v5 + 12560), v307, v303, v99, &BlueFin::GlSet128::BIT0))
    {
      DeviceFaultNotify("glpe_prawnkf.cpp", 505, "ComputeInnov", (char)"m_rotComputeZRH.Compute(otInp, otOut, potSkfMeas, GlSet128::BIT0) == SKF_ZRH_OK");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 505, "m_rotComputeZRH.Compute(otInp, otOut, potSkfMeas, GlSet128::BIT0) == SKF_ZRH_OK");
    }
    double v107 = *(void **)(*(void *)(v5 + 19152) + 8);
    uint64_t v108 = (double *)v327[1];
    if (*(_DWORD *)(v99 + 44))
    {
      uint64_t v109 = (double *)v107[4];
      double v110 = (double *)v107[5];
      double v111 = v108[2];
      double v112 = v108[4];
      double v113 = v108[6];
      double v114 = v108[8];
      uint64_t v115 = (double *)v107[6];
      double v116 = (v109[4] * v111 + 0.0 + v109[5] * v112 + v109[6] * v113 + v109[8] * v114) * v111
           + 0.0
           + (v110[4] * v111 + 0.0 + v110[5] * v112 + v110[6] * v113 + v110[8] * v114) * v112
           + (v115[4] * v111 + 0.0 + v115[5] * v112 + v115[6] * v113 + v115[8] * v114) * v113;
      uint64_t v117 = (double *)v107[8];
      double v118 = v117[4] * v111 + 0.0 + v117[5] * v112 + v117[6] * v113;
      double v119 = v117[8];
    }
    else
    {
      uint64_t v120 = (double *)v107[1];
      uint64_t v121 = (double *)v107[2];
      double v122 = v108[1];
      double v123 = v108[3];
      double v124 = v108[5];
      double v114 = v108[7];
      int v125 = (double *)v107[3];
      double v116 = (v120[1] * v122 + 0.0 + v120[2] * v123 + v120[3] * v124 + v120[7] * v114) * v122
           + 0.0
           + (v121[1] * v122 + 0.0 + v121[2] * v123 + v121[3] * v124 + v121[7] * v114) * v123
           + (v125[1] * v122 + 0.0 + v125[2] * v123 + v125[3] * v124 + v125[7] * v114) * v124;
      uint64_t v126 = (double *)v107[7];
      double v118 = v126[1] * v122 + 0.0 + v126[2] * v123 + v126[3] * v124;
      double v119 = v126[7];
    }
    double v127 = v116 + (v118 + v119 * v114) * v114;
    double v128 = *(double *)(v324[0] + 8) - *(double *)(v322[0] + 8);
    char v130 = *(unsigned char *)(v99 + 32);
    uint64_t v129 = v99 + 32;
    double v131 = *(double *)(v129 - 24) * *(double *)(v129 - 24);
    v265[0] = v130;
    __int16 v267 = *(_WORD *)(v129 + 8);
    int v266 = *(_DWORD *)(v129 + 4);
    *(double *)&long long v268 = v128;
    *((double *)&v268 + 1) = v127;
    double v269 = v131;
    uint64_t v132 = &v340[40 * v97 - 8];
    *uint64_t v132 = v130;
    *((_DWORD *)v132 + 1) = v266;
    *((_WORD *)v132 + 4) = v267;
    *((_OWORD *)v132 + 1) = v268;
    *((double *)v132 + 4) = v269;
    int v133 = *(_DWORD *)(v129 + 12);
    if (v133 == 2)
    {
      uint64_t v135 = (int **)&v270;
      uint64_t v136 = (void **)&v272;
      goto LABEL_97;
    }
    if (v133)
    {
      DeviceFaultNotify("glpe_prawnkf.cpp", 444, "PrePolaroidRun", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 444, "false");
    }
    uint64_t v134 = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 12552), (const BlueFin::GlSignalId *)v129, 0, 0);
    uint64_t v135 = (int **)&v299;
    if ((*((_DWORD *)v134 + 5) - 1) < 2)
    {
      uint64_t v136 = &v301;
LABEL_97:
      BlueFin::SKFVector::AddLen((uint64_t)v136);
      double v137 = BlueFin::GlPeTightPolaroid::stInnovData::Norm((BlueFin::GlPeTightPolaroid::stInnovData *)v265);
      if (v137 < 0.0) {
        double v137 = -v137;
      }
      *((double *)*v136 + *((int *)v136 + 2)) = v137;
    }
    if (v128 < 0.0) {
      double v128 = -v128;
    }
    BlueFin::SKFVector::AddLen((uint64_t)v135);
    *(double *)&(*v135)[2 * *((int *)v135 + 2)] = v128;
    v98 += 8;
    ++v97;
  }
  while (v98 != &__src[8 * v336 + 8 * v335]);
  if (*(int *)v302 > 2)
  {
    *(double *)(v5 + 19176) = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v299, v92, v93, v94);
    double v141 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v301, v138, v139, v140);
    if (v141 >= 1.5) {
      double v142 = v141;
    }
    else {
      double v142 = 1.5;
    }
    *(double *)(v5 + 19160) = v142;
    if (v142 > 5.0
      && *(double *)(v5 + 19176) > 400.0
      && sqrt(BlueFin::SKFVector::Var((BlueFin::SKFVector *)&v301)) < v142 * 0.1)
    {
      double v143 = v142 + v142 * 0.1;
      goto LABEL_114;
    }
    if (!v247)
    {
      double v143 = 5.0;
      if (v142 <= 5.0) {
        double v143 = v142;
      }
LABEL_114:
      *(double *)(v5 + 19160) = v143;
    }
  }
LABEL_115:
  if ((int)v273 >= 3)
  {
    *(double *)(v5 + 19184) = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v270, v92, v93, v94);
    double v147 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v272, v144, v145, v146);
    uint64_t v148 = *(void *)(v5 + 12568);
    double v149 = 1.0;
    if ((*(_DWORD *)(v148 + 16) & 0xFFFFFFFE) == 2 && (*(_DWORD *)(v148 + 8) - 3) < 3) {
      double v149 = 0.5;
    }
    if (v147 >= v149) {
      double v150 = v147;
    }
    else {
      double v150 = v149;
    }
    *(double *)(v5 + 19168) = v150;
    if (v150 > 5.0
      && *(double *)(v5 + 19184) > 30.0
      && sqrt(BlueFin::SKFVector::Var((BlueFin::SKFVector *)&v272)) < v150 * 0.1)
    {
      double v151 = v150 + v150 * 0.1;
      goto LABEL_129;
    }
    if (!v247)
    {
      double v151 = 5.0;
      if (v150 <= 5.0) {
        double v151 = v150;
      }
LABEL_129:
      *(double *)(v5 + 19168) = v151;
    }
  }
  uint64_t v152 = v335;
  if (v335)
  {
    int v153 = 0;
    uint64_t v154 = v336;
    double v155 = &__src[8 * v336];
    do
    {
      uint64_t v156 = *(void *)v155;
      int v157 = *(_DWORD *)(*(void *)v155 + 44);
      if (v157)
      {
        if (v157 != 2)
        {
          DeviceFaultNotify("glpe_prawnkf.cpp", 293, "RunPolaroid", (char)"(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 293, "(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
        }
      }
      else
      {
        double v158 = &v340[40 * v153 - 8];
        LOBYTE(v301) = *v158;
        HIDWORD(v301) = *((_DWORD *)v158 + 1);
        *(_WORD *)uint64_t v302 = *((_WORD *)v158 + 4);
        *(_OWORD *)&v302[8] = *((_OWORD *)v158 + 1);
        *(void *)&v302[24] = *((void *)v158 + 4);
        if (__PAIR64__(HIDWORD(v301), v301) != __PAIR64__(*(_DWORD *)(v156 + 36), *(unsigned __int8 *)(v156 + 32)))
        {
          DeviceFaultNotify("glpe_prawnkf.cpp", 298, "RunPolaroid", (char)"otInnov.m_otSignalId == pMeas->otSignalId");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 298, "otInnov.m_otSignalId == pMeas->otSignalId");
        }
        double v159 = BlueFin::GlPeTightPolaroid::stInnovData::Norm((BlueFin::GlPeTightPolaroid::stInnovData *)&v301);
        uint64_t v160 = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 12552), (const BlueFin::GlSignalId *)(v156 + 32), 0, 0);
        if (v159 >= 0.0) {
          double v161 = v159;
        }
        else {
          double v161 = -v159;
        }
        double v162 = *(double *)(v5 + 19160);
        if (v161 <= v162 || v159 >= -5.0 && v159 < -v162 && (*((_DWORD *)v160 + 5) - 1) <= 1)
        {
          BlueFin::GlPeMeasList::push_back((uint64_t)&v254, v156);
          *(_DWORD *)&v262[4 * (*(__int16 *)(v156 + 40) >> 5)] |= 1 << *(_WORD *)(v156 + 40);
        }
        if (fabs(*(double *)&v302[8]) > 400.0) {
          *(_DWORD *)(*(void *)(v5 + 21256) + 4 * (*(__int16 *)(v156 + 40) >> 5)) |= 1 << *(_WORD *)(v156 + 40);
        }
        uint64_t v154 = v336;
        uint64_t v152 = v335;
      }
      v155 += 8;
      ++v153;
    }
    while (v155 != &__src[8 * v154 + 8 * v152]);
  }
  else
  {
    uint64_t v152 = 0;
  }
  if (BlueFin::GlSetBase::HasAny(v251))
  {
    *(_DWORD *)uint64_t v252 = 0;
  }
  else if (*(_DWORD *)(*(void *)(v5 + 12568) + 16) != 6)
  {
    ++*(_DWORD *)v252;
  }
  if (v152)
  {
    int v163 = 0;
    int v164 = &__src[8 * v336];
    if (v247) {
      double v165 = 1.0;
    }
    else {
      double v165 = 0.5;
    }
    while (1)
    {
      uint64_t v166 = *(void *)v164;
      if ((*(_DWORD *)(*(void *)v164 + 44) | 2) != 2)
      {
        DeviceFaultNotify("glpe_prawnkf.cpp", 341, "RunPolaroid", (char)"(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 341, "(pMeas->eMeasType == SKF_MEAS_PR) || (pMeas->eMeasType == SKF_MEAS_RR)");
      }
      uint64_t v167 = (unsigned char *)(v166 + 32);
      uint64_t v168 = BlueFin::GlPeMsmtMgr::GetPeMeas(*(BlueFin::GlPeMsmtMgr **)(v5 + 12552), (const BlueFin::GlSignalId *)(v166 + 32), 0);
      if (*(unsigned char *)(v168 + 250)) {
        BOOL v169 = *(unsigned char *)(v168 + 76) == 0;
      }
      else {
        BOOL v169 = 0;
      }
      char v170 = !v169;
      if (*(_DWORD *)(v166 + 44) != 2) {
        goto LABEL_193;
      }
      int v171 = *(__int16 *)(v166 + 40);
      uint64_t v172 = *(unsigned int *)&v262[4 * (v171 >> 5)];
      uint64_t v173 = &v340[40 * v163 - 8];
      LOBYTE(v299) = *v173;
      HIDWORD(v299) = *((_DWORD *)v173 + 1);
      LOWORD(v300[0]) = *((_WORD *)v173 + 4);
      *(_OWORD *)((char *)v300 + 8) = *((_OWORD *)v173 + 1);
      *((void *)&v300[1] + 1) = *((void *)v173 + 4);
      if (LOBYTE(v299) != *v167 || HIDWORD(v299) != *(_DWORD *)(v166 + 36))
      {
        DeviceFaultNotify("glpe_prawnkf.cpp", 352, "RunPolaroid", (char)"otInnov.m_otSignalId == pMeas->otSignalId");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 352, "otInnov.m_otSignalId == pMeas->otSignalId");
      }
      uint64_t v174 = 1 << (v171 & 0x1F);
      if (!*(_DWORD *)v252) {
        break;
      }
      uint64_t v175 = v174 & v172;
      if (*(_DWORD *)v252 > 2u)
      {
        if (v175)
        {
          double v178 = BlueFin::GlPeTightPolaroid::stInnovData::Norm((BlueFin::GlPeTightPolaroid::stInnovData *)&v299);
          if (v178 < 0.0) {
            double v178 = -v178;
          }
          double v179 = *(double *)(v5 + 19168);
          BOOL v177 = v178 > v179;
          if (v178 <= v179) {
            char v180 = 1;
          }
          else {
            char v180 = v170;
          }
          if (v180) {
            goto LABEL_184;
          }
        }
        else if (v170)
        {
          goto LABEL_193;
        }
        goto LABEL_188;
      }
      if (v175)
      {
        double v176 = BlueFin::GlPeTightPolaroid::stInnovData::Norm((BlueFin::GlPeTightPolaroid::stInnovData *)&v299);
        if (v176 < 0.0) {
          double v176 = -v176;
        }
        BOOL v177 = v176 > v165 * *(double *)(v5 + 19168);
LABEL_184:
        if (v177) {
          goto LABEL_193;
        }
LABEL_192:
        BlueFin::GlPeMeasList::push_back((uint64_t)&v254, v166);
      }
LABEL_193:
      v164 += 8;
      ++v163;
      if (v164 == &__src[8 * v336 + 8 * v335])
      {
        if (*(unsigned char *)(v249 + 241) && v335)
        {
          unint64_t v183 = 0;
          uint64_t v184 = (_DWORD *)&v338 + 1;
          do
          {
            if (*v184 == 2)
            {
              BlueFin::GlPeMeasList::GetRrSignalIds((uint64_t)&v339, (uint64_t)&v254);
              if (((unint64_t)*(unsigned int *)(*(void *)&v339 + 4 * (*((__int16 *)v184 - 2) >> 5)) >> (*(_WORD *)(v184 - 1) & 0x1F)))
              {
                BlueFin::GlSignalIdSet::GetSvIdSet(v251, (uint64_t)&v301);
                if ((((unint64_t)*(unsigned int *)((char *)v301
                                                         + (((unint64_t)*((unsigned __int8 *)v184 - 12) >> 3) & 0x1C)) >> (*(unsigned char *)(v184 - 3) & 0x1F)) & 1) != 0)
                  *(double *)(v184 - 9) = *(double *)(v184 - 9) / 3.0;
              }
            }
            ++v183;
            v184 += 14;
          }
          while (v183 < v335);
        }
        goto LABEL_207;
      }
    }
    if (v170) {
      goto LABEL_193;
    }
    if ((v174 & *(_DWORD *)(*(void *)v251 + 4 * ((uint64_t)v171 >> 5))) != 0)
    {
LABEL_188:
      double v181 = BlueFin::GlPeTightPolaroid::stInnovData::Norm((BlueFin::GlPeTightPolaroid::stInnovData *)&v299);
      if (v181 < 0.0) {
        double v181 = -v181;
      }
      double v182 = *(double *)(v5 + 19168) + *(double *)(v5 + 19168);
    }
    else
    {
      BlueFin::GlSignalIdSet::GetSvIdSet(v251, (uint64_t)&v301);
      if ((((unint64_t)*(unsigned int *)((char *)v301 + (((unint64_t)*v167 >> 3) & 0x1C)) >> (*v167 & 0x1F)) & 1) == 0) {
        goto LABEL_193;
      }
      double v181 = BlueFin::GlPeTightPolaroid::stInnovData::Norm((BlueFin::GlPeTightPolaroid::stInnovData *)&v299);
      if (v181 < 0.0) {
        double v181 = -v181;
      }
      double v182 = *(double *)(v5 + 19168);
    }
    if (v181 < v182) {
      goto LABEL_192;
    }
    goto LABEL_193;
  }
LABEL_207:
  uint64_t v185 = *(void *)(v5 + 5864);
  LODWORD(v301) = 0;
  *(void *)uint64_t v302 = &v302[12];
  v302[8] = 8;
  memset(&v302[12], 0, 32);
  *(_OWORD *)&v302[48] = xmmword_263BBA380;
  *(int32x2_t *)&v302[64] = vdup_n_s32(0x42C60000u);
  *(_DWORD *)&v302[72] = 1120272384;
  BlueFin::stDops::stDops((uint64_t)&v339, (uint64_t)&v301);
  uint64_t v342 = v185;
  uint64_t v186 = *(unsigned int *)(v5 + *(void *)(*(void *)v5 - 24) + 200);
  BlueFin::GlPeMeasList::GetPrSignalIds((uint64_t)&v272, (uint64_t)&v254);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v272, (uint64_t)&v270);
  int v326 = *(uint64_t **)(v5 + *(void *)(*(void *)v5 - 24) + 88);
  LODWORD(v319[0]) = **(_DWORD **)(v5 + 5872);
  LODWORD(v307[0]) = 0;
  BlueFin::GlPeDops::GetDops((uint64_t)&v339, v186);
  uint64_t v187 = *(unsigned int *)(v5 + *(void *)(*(void *)v5 - 24) + 200);
  BlueFin::GlPeMeasList::GetRrSignalIds((uint64_t)&v270, (uint64_t)&v254);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&v270, (uint64_t)&v326);
  v319[0] = *(void *)(v5 + *(void *)(*(void *)v5 - 24) + 88);
  LODWORD(v262) = **(_DWORD **)(v5 + 5872);
  LODWORD(v303[0]) = 0;
  BlueFin::GlPeDops::GetDops((uint64_t)&v339, v187);
  int v189 = *(_DWORD *)(*(void *)(v5 + 5248) + 8);
  if (v189) {
    BOOL v190 = (*(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200) - v189) >> 4 < 0x271;
  }
  else {
    BOOL v190 = 0;
  }
  int v191 = *(_DWORD *)(v5 + 5036);
  if (v191) {
    int v191 = (*(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200) - v191) > 0x3A98;
  }
  int v192 = *(_DWORD *)(*(void *)(v5 + 5232) + 16);
  if (v192 == 6) {
    goto LABEL_312;
  }
  if ((v192 & 0xFFFFFFFE) != 2) {
    BOOL v190 = 0;
  }
  if (v190)
  {
LABEL_312:
    if (*((float *)&v300[3] + 1) >= 2.0)
    {
      unsigned int v193 = v260;
      if (v260)
      {
        unsigned int v194 = v261;
        uint64_t v195 = &v254 + v261;
        do
        {
          if (!*((_DWORD *)*v195 + 11))
          {
            unsigned int v261 = ++v194;
            unsigned int v260 = --v193;
          }
          ++v195;
        }
        while (v195 != &v254 + v194 + v193);
      }
    }
    v188.n128_u32[0] = HIDWORD(v275);
    if (*((float *)&v275 + 3) >= 2.0)
    {
      if (v260)
      {
        int v196 = 0;
        uint64_t v197 = (uint64_t *)(&v254 + v261);
        uint64_t v198 = 8 * v260;
        do
        {
          uint64_t v199 = *v197++;
          if (*(_DWORD *)(v199 + 44) == 2) {
            ++v196;
          }
          v198 -= 8;
        }
        while (v198);
      }
      else
      {
        int v196 = 0;
      }
      v260 -= v196;
    }
  }
  else
  {
    v188.n128_u32[0] = HIDWORD(v275);
  }
  if (v192 == 1) {
    int v200 = 1;
  }
  else {
    int v200 = v191;
  }
  if (v200 == 1 && v188.n128_f32[0] >= 5.0)
  {
    unsigned int v201 = v261;
    uint64_t v202 = &v254 + v261;
    if (v260)
    {
      int v203 = 0;
      uint64_t v204 = 8 * v260;
      long long v205 = (uint64_t *)(&v254 + v261);
      do
      {
        uint64_t v206 = *v205++;
        if (*(_DWORD *)(v206 + 44) == 2) {
          ++v203;
        }
        v204 -= 8;
      }
      while (v204);
    }
    else
    {
      int v203 = 0;
    }
    unsigned int v207 = v260 - v203;
    unsigned int v260 = v207;
    if (!v207) {
      int v191 = 0;
    }
    if (v191 == 1)
    {
      do
      {
        if (!*((_DWORD *)*v202 + 11))
        {
          unsigned int v261 = ++v201;
          unsigned int v260 = --v207;
        }
        ++v202;
      }
      while (v202 != &v254 + v201 + v207);
    }
  }
  uint64_t v208 = *(unsigned __int16 **)(v5 + 5240);
  unsigned int v209 = v208[81];
  unsigned int v210 = *v208;
  uint64_t v211 = *(void *)v5;
  if (v209 >= v210)
  {
    if (*(unsigned char *)(v5 + *(void *)(v211 - 24) + 240))
    {
      v188.n128_u64[0] = *(void *)(v5 + 5040);
      BOOL v212 = v188.n128_f64[0] < 6.0822;
    }
    else
    {
      BOOL v212 = 1;
    }
  }
  else
  {
    BOOL v212 = 0;
  }
  (*(void (**)(uint64_t, long long **, uint64_t, BOOL, __n128))(v211 + 440))(v5, &v254, v248, v212, v188);
  BlueFin::GlPeMeasList::GetPrSignalIds((uint64_t)&v339, (uint64_t)&v254);
  uint64_t v213 = v5 + *(void *)(*(void *)v5 - 24);
  uint64_t v214 = BlueFin::GlSetBase::operator=(v213 + 264, (uint64_t)&v339);
  *(_OWORD *)(v213 + 336) = *(_OWORD *)&v341[12];
  *(_OWORD *)(v214 + 28) = *(_OWORD *)&v340[20];
  *(_OWORD *)(v214 + 44) = *(_OWORD *)&v340[36];
  *(_OWORD *)(v214 + 60) = *(_OWORD *)v341;
  *(_OWORD *)(v214 + 12) = *(_OWORD *)&v340[4];
  BlueFin::GlPeMeasList::GetRrSignalIds((uint64_t)&v339, (uint64_t)&v254);
  uint64_t v215 = BlueFin::GlSetBase::operator=(v5 + *(void *)(*(void *)v5 - 24) + 352, (uint64_t)&v339);
  *(_OWORD *)(v215 + 28) = *(_OWORD *)&v340[20];
  *(_OWORD *)(v215 + 44) = *(_OWORD *)&v340[36];
  *(_OWORD *)(v215 + 60) = *(_OWORD *)v341;
  *(_OWORD *)(v215 + 72) = *(_OWORD *)&v341[12];
  *(_OWORD *)(v215 + 12) = *(_OWORD *)&v340[4];
  if ((BlueFin::CheckCovMat((BlueFin *)(v5 + 656), (const BlueFin::BigMatrix *)0x6F) & 1) == 0) {
    BlueFin::GlPeShrimpKf::ResetINS((uint64_t *)v5, 18);
  }
  uint64_t v216 = v250;
  if (*(_DWORD *)(v5 + 8) == 2 && *(unsigned char *)(v250 + 774))
  {
    int v217 = 16 * *(unsigned __int8 *)(v5 + *(void *)(*(void *)v5 - 24) + 240);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5) >= 0x15
      && *(__int16 *)(*(void *)(v5 + 5248) + 2) < 1)
    {
      v217 |= 4u;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 96))(v5) <= 0x5A) {
      int v218 = v217;
    }
    else {
      int v218 = v217 | 2;
    }
    int v219 = *(_DWORD *)(*(void *)(v5 + 5248) + 8);
    if (v219)
    {
      uint64_t v220 = *(void *)v5;
      unsigned int v221 = v218 & 0xFFFFFFDF | (32
                                * ((*(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200) - v219) >> 5 < 0x753));
    }
    else
    {
      unsigned int v221 = v218 & 0xFFFFFFDF;
      uint64_t v220 = *(void *)v5;
    }
    uint64_t v222 = v220;
    uint64_t v223 = v5 + *(void *)(v220 - 24);
    int v224 = *(unsigned __int8 *)(v223 + 241);
    double v225 = *(double *)(v223 + 112) * *(double *)(v223 + 112) + *(double *)(v223 + 104) * *(double *)(v223 + 104);
    uint64_t v226 = *(void *)(v223 + 8);
    uint64_t v227 = *(void *)(v223 + 16);
    uint64_t v228 = *(void *)(v223 + 24);
    int v229 = *(_DWORD *)(v223 + 176);
    LODWORD(v223) = *(_DWORD *)(v223 + 200);
    double v339 = sqrt(v225);
    *(void *)uint64_t v340 = v226;
    *(void *)&v340[8] = v227;
    *(void *)&v340[16] = v228;
    *(void *)&v340[24] = v226;
    *(void *)&v340[32] = v227;
    *(void *)&v340[40] = v228;
    *(_DWORD *)&v340[48] = v229;
    *(_DWORD *)v341 = v223;
    *(_DWORD *)&v341[4] = v229;
    *(_DWORD *)&v341[8] = v221 & 0xFFFFFFF7 | (8 * v224);
    uint64_t v230 = (*(uint64_t (**)(uint64_t))(v222 + 280))(v5);
    BlueFin::GlPeGnssNavUpa::SetUrbanPosAssist(v230, (uint64_t)&v339, (uint64_t)&v301);
    if (v302[32])
    {
      v231 = (BlueFin::GlPeGnssNavUpa *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 280))(v5);
      double v232 = BlueFin::GlPeGnssNavUpa::UnravelHeadingRad(v231, *(float *)(v5 + *(void *)(*(void *)v5 - 24) + 176), *(float *)&v302[36]);
      for (double j = *(float *)(v5 + *(void *)(*(void *)v5 - 24) + 176) - v232; j > 3.14159265; double j = j + -6.28318531)
        ;
      for (; j <= -3.14159265; double j = j + 6.28318531)
        ;
      if (j < 0.0) {
        double j = -j;
      }
      if (j >= 1.57079633)
      {
        DeviceFaultNotify("glpe_prawnkf.cpp", 1243, "ApplyXtc", (char)"ABS(AngleDiffRad(GetHeadingRad(), dSegmentHdgRad)) < 90.0*D2R");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", 1243, "ABS(AngleDiffRad(GetHeadingRad(), dSegmentHdgRad)) < 90.0*D2R");
      }
      *(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)v5 + 280))(v5) + 1) = 1;
      *(_WORD *)(v252 + 18) = 257;
      int v234 = *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200);
      *(double *)(v5 + 21528) = v232;
      *(_DWORD *)(v252 + 2344) = v234;
      double v235 = 0.0174532925;
      if (*(float *)&v302[40] <= 0.0174532925) {
        double v235 = *(float *)&v302[40];
      }
      BlueFin::GlPeShrimpKf::ApplyYawMeas((BlueFin::GlPeShrimpKf *)v5, v232, v235);
      if ((_BYTE)v301 && v302[32])
      {
        BlueFin::lla2ned((double *)v302, (double *)(v5 + *(void *)(*(void *)v5 - 24) + 8), 0, &v299);
        *(double *)&v236 = v299;
        double v237 = *(double *)v300;
        float v238 = *(float *)&v302[36];
        __float2 v239 = __sincosf_stret(*(float *)&v302[36]);
        float v240 = *(float *)&v302[24];
        if (*(float *)&v302[24] >= *(float *)&v302[28]) {
          float v240 = *(float *)&v302[28];
        }
        BlueFin::GlPeShrimpKf::ApplyCrossTrackPosMeas((BlueFin::GlPeShrimpKf *)v5, v237 * v239.__cosval - *(double *)&v236 * v239.__sinval, v240, v238, 0);
      }
    }
    uint64_t v216 = v250;
  }
  if (!*(unsigned char *)(v216 + 273)
    || (int v241 = *(_DWORD *)(v252 + 2360)) != 0
    && (*(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 200) - v241) >> 3 < 0x753
    || *(double *)(v5 + 19176) >= 400.0)
  {
    bzero(*(void **)(v5 + 21256), ((4 * *(unsigned __int8 *)(v252 + 2072) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    bzero(*(void **)(v5 + 21344), ((4 * *(unsigned __int8 *)(v252 + 2160) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  }
  else
  {
    uint64_t v242 = *(void *)(v5 + 5856);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v299, (unsigned int *)v300 + 1, 0x13u, (const void **)(v5 + *(void *)(*(void *)v5 - 24) + 264));
    double v339 = COERCE_DOUBLE(&v340[4]);
    v340[0] = 19;
    memset(&v340[4], 0, 48);
    memset(v341, 0, sizeof(v341));
    BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)&v299, (int **)&v339);
    BlueFin::GlSetBase::operator=((uint64_t)&v299, (uint64_t)&v339);
    *(_OWORD *)((char *)&v300[2] + 4) = *(_OWORD *)&v340[36];
    *(_OWORD *)((char *)&v300[3] + 4) = *(_OWORD *)v341;
    v300[4] = *(_OWORD *)&v341[12];
    *(_OWORD *)((char *)v300 + 4) = *(_OWORD *)&v340[4];
    *(_OWORD *)((char *)&v300[1] + 4) = *(_OWORD *)&v340[20];
    BlueFin::GlSignalIdSet::setSignalIdLimits((BlueFin::GlSignalIdSet *)&v299);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v301, (unsigned int *)&v302[4], 0x13u, (const void **)(v242 + 184));
    double v339 = COERCE_DOUBLE(&v340[4]);
    v340[0] = 19;
    memset(&v340[4], 0, 48);
    memset(v341, 0, sizeof(v341));
    BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&v301, (int **)&v339, (int **)&v299);
    BlueFin::GlSetBase::operator=((uint64_t)&v301, (uint64_t)&v339);
    *(_OWORD *)&v302[36] = *(_OWORD *)&v340[36];
    *(_OWORD *)&v302[52] = *(_OWORD *)v341;
    *(_OWORD *)&v302[64] = *(_OWORD *)&v341[12];
    *(_OWORD *)&v302[4] = *(_OWORD *)&v340[4];
    *(_OWORD *)&v302[20] = *(_OWORD *)&v340[20];
    LOBYTE(v272) = v302[0];
    memcpy(&v273, v301, 4 * v302[0]);
    WORD1(v272) = 0;
    BYTE1(v272) = 0;
    HIDWORD(v272) = v273;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v272);
    while (BYTE1(v272) != v272)
    {
      double v299 = COERCE_DOUBLE((_OWORD *)((char *)v300 + 4));
      LOBYTE(v300[0]) = 19;
      memset((char *)v300 + 4, 0, 64);
      v300[4] = 0u;
      if (WORD1(v272) >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      int v243 = *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v272) + 1);
      unsigned int v244 = WORD1(v272) >> 5;
      int v245 = 1 << SBYTE2(v272);
      *((_DWORD *)v300 + v244 + 1) |= 1 << SBYTE2(v272);
      if (!v243)
      {
        uint64_t v246 = v5 + *(void *)(*(void *)v5 - 24);
        long long v270 = *(_OWORD *)(v246 + 8);
        v271[0] = *(void *)(v246 + 24);
        BlueFin::GlPeNavUtil::ComputeRangeResidVec((uint64_t)v253, (uint64_t)&v299, (uint64_t)&v270, **(unsigned int **)(v5 + 5872), 0, 0, 0, 1, 0, 1);
        if (fabs(*(double *)(*(void *)&v339 + 8)) > 600.0) {
          *(_DWORD *)(*(void *)(v5 + 21344) + 4 * v244) |= v245;
        }
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v272);
    }
  }
}

uint64_t BlueFin::GlPeMeasList::GetRrSignalIds(uint64_t this, uint64_t a2)
{
  *(_OWORD *)(this + 12) = 0u;
  *(void *)this = this + 12;
  *(unsigned char *)(this + 8) = 19;
  *(_OWORD *)(this + 28) = 0u;
  *(_OWORD *)(this + 44) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  uint64_t v2 = *(unsigned int *)(a2 + 800);
  if (v2)
  {
    uint64_t v3 = a2 + 8 * *(unsigned int *)(a2 + 804);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*(_DWORD *)(*(void *)v3 + 44) == 2) {
        *(_DWORD *)(this + 12 + 4 * (*(__int16 *)(*(void *)v3 + 40) >> 5)) |= 1 << *(_WORD *)(*(void *)v3 + 40);
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

uint64_t BlueFin::GlPeMeasList::GetPrSignalIds(uint64_t this, uint64_t a2)
{
  *(_OWORD *)(this + 12) = 0u;
  *(void *)this = this + 12;
  *(unsigned char *)(this + 8) = 19;
  *(_OWORD *)(this + 28) = 0u;
  *(_OWORD *)(this + 44) = 0u;
  *(_OWORD *)(this + 60) = 0u;
  *(_OWORD *)(this + 72) = 0u;
  uint64_t v2 = *(unsigned int *)(a2 + 800);
  if (v2)
  {
    uint64_t v3 = a2 + 8 * *(unsigned int *)(a2 + 804);
    uint64_t v4 = 8 * v2;
    do
    {
      if (!*(_DWORD *)(*(void *)v3 + 44)) {
        *(_DWORD *)(this + 12 + 4 * (*(__int16 *)(*(void *)v3 + 40) >> 5)) |= 1 << *(_WORD *)(*(void *)v3 + 40);
      }
      v3 += 8;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::ComputePosition(uint64_t a1, uint64_t a2)
{
}

uint64_t BlueFin::GlPePrawnKf::InitializeNavGnssKF(BlueFin::GlPePrawnKf *this, const BlueFin::GlPeNavGnssState *a2)
{
  return (*(uint64_t (**)(BlueFin::GlPePrawnKf *, uint64_t))(*(void *)this + 64))(this, 3);
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::InitializeNavGnssKF(BlueFin::GlPePrawnKf *this, const BlueFin::GlPeNavGnssState *a2)
{
  return (*(uint64_t (**)(char *, uint64_t))(*((void *)this - 731) + 64))((char *)this - 5848, 3);
}

uint64_t BlueFin::GlPePrawnKf::IsAdrUsed(BlueFin::GlPePrawnKf *this)
{
  return 0;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::IsAdrUsed(BlueFin::GlPePrawnKf *this)
{
  return 0;
}

unint64_t BlueFin::GlPePrawnKf::GetTimeSinceResetS(BlueFin::GlPePrawnKf *this)
{
  return (*(unsigned int (**)(BlueFin::GlPePrawnKf *))(*(void *)this + 104))(this) / 0x3E8uLL;
}

unint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetTimeSinceResetS(BlueFin::GlPePrawnKf *this)
{
  return (*(unsigned int (**)(char *))(*((void *)this - 731) + 104))((char *)this - 5848) / 0x3E8uLL;
}

uint64_t BlueFin::GlPePrawnKf::GetTimeSinceResetMs(BlueFin::GlPePrawnKf *this)
{
  if (*((_DWORD *)this + 2) == 2) {
    return (**((_DWORD **)this + 732) - *((_DWORD *)this + 1254));
  }
  else {
    return 4287767295;
  }
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetTimeSinceResetMs(BlueFin::GlPePrawnKf *this)
{
  if (*((_DWORD *)this - 1460) == 2) {
    return (**((_DWORD **)this + 1) - *((_DWORD *)this - 208));
  }
  else {
    return 4287767295;
  }
}

uint64_t BlueFin::GlPePrawnKf::GetTimeSinceFullFixMs(BlueFin::GlPePrawnKf *this)
{
  if (*((_DWORD *)this + 2) == 2) {
    return 0;
  }
  else {
    return 4287767295;
  }
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetTimeSinceFullFixMs(BlueFin::GlPePrawnKf *this)
{
  if (*((_DWORD *)this - 1460) == 2) {
    return 0;
  }
  else {
    return 4287767295;
  }
}

uint64_t BlueFin::GlPePrawnKf::GetTimeFullFixMs(BlueFin::GlPePrawnKf *this)
{
  if (*((_DWORD *)this + 2) == 2) {
    return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 200);
  }
  else {
    return 4287767295;
  }
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetTimeFullFixMs(BlueFin::GlPePrawnKf *this)
{
  if (*((_DWORD *)this - 1460) == 2) {
    return *(unsigned int *)((char *)this + *(void *)(*((void *)this - 731) - 24) - 5648);
  }
  else {
    return 4287767295;
  }
}

void BlueFin::GlPePrawnKf::ComputeAltQualForCalibration(BlueFin::GlPePrawnKf *this)
{
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::ComputeAltQualForCalibration(BlueFin::GlPePrawnKf *this)
{
}

BlueFin::GlSetBase *BlueFin::GlPePrawnKf::GetBadSvsFromAprioriResids@<X0>(const void **this@<X0>, unsigned int *a2@<X8>)
{
  return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, a2 + 3, 0x13u, this + 2657);
}

BlueFin::GlSetBase *non-virtual thunk to'BlueFin::GlPePrawnKf::GetBadSvsFromAprioriResids@<X0>(const void **this@<X0>, unsigned int *a2@<X8>)
{
  return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, a2 + 3, 0x13u, this + 1926);
}

BlueFin::GlSetBase *BlueFin::GlPePrawnKf::GetBadSvsFromAposterioriResids@<X0>(const void **this@<X0>, unsigned int *a2@<X8>)
{
  return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, a2 + 3, 0x13u, this + 2668);
}

BlueFin::GlSetBase *non-virtual thunk to'BlueFin::GlPePrawnKf::GetBadSvsFromAposterioriResids@<X0>(const void **this@<X0>, unsigned int *a2@<X8>)
{
  return BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a2, a2 + 3, 0x13u, this + 1937);
}

void BlueFin::GlPePrawnKf::GetInfoForPosHulaSource(BlueFin::GlPePrawnKf *this, unsigned int *a2, unsigned __int8 *a3, BOOL *a4, BOOL *a5)
{
  *a2 = 5000;
  *a3 = 3;
  *a4 = 0;
  *a5 = 0;
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::GetInfoForPosHulaSource(BlueFin::GlPePrawnKf *this, unsigned int *a2, unsigned __int8 *a3, BOOL *a4, BOOL *a5)
{
  *a2 = 5000;
  *a3 = 3;
  *a4 = 0;
  *a5 = 0;
}

double BlueFin::GlPePrawnKf::GetStP(BlueFin::GlPePrawnKf *this, double *a2, double *a3, double *a4)
{
  uint64_t v4 = *((void *)this + 83);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  *a2 = *(double *)(v6 + 8);
  *a3 = *(double *)(v6 + 16);
  double result = *(double *)(v5 + 16);
  *a4 = result;
  return result;
}

double non-virtual thunk to'BlueFin::GlPePrawnKf::GetStP(BlueFin::GlPePrawnKf *this, double *a2, double *a3, double *a4)
{
  uint64_t v4 = *((void *)this - 648);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  *a2 = *(double *)(v6 + 8);
  *a3 = *(double *)(v6 + 16);
  double result = *(double *)(v5 + 16);
  *a4 = result;
  return result;
}

uint64_t BlueFin::GlPePrawnKf::GetQualGood4AltCal(BlueFin::GlPePrawnKf *this)
{
  return 0;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetQualGood4AltCal(BlueFin::GlPePrawnKf *this)
{
  return 0;
}

BOOL BlueFin::GlPePrawnKf::IsKFConverged(BlueFin::GlPePrawnKf *this)
{
  return (*(float (**)(BlueFin::GlPePrawnKf *))(*(void *)this + 304))(this) <= 50.0
      && *((_DWORD *)this + 2) == 2
      && !*((unsigned char *)this + 5827)
      && (*(_DWORD *)(*((void *)this + 654) + 8) - 3) < 4;
}

BOOL non-virtual thunk to'BlueFin::GlPePrawnKf::IsKFConverged(BlueFin::GlPePrawnKf *this)
{
  return BlueFin::GlPePrawnKf::IsKFConverged((BlueFin::GlPePrawnKf *)((char *)this - 5848));
}

BOOL BlueFin::GlPePrawnKf::IsExtLocAvailable(BlueFin::GlPePrawnKf *this, char a2)
{
  uint64_t v4 = (BlueFin::GlPeExtLoc *)*((void *)this + 1557);
  int v5 = (*(uint64_t (**)(BlueFin::GlPePrawnKf *))(*(void *)this + 184))(this);
  int v6 = (*(uint64_t (**)(BlueFin::GlPePrawnKf *))(*(void *)this + 216))(this);
  BOOL result = BlueFin::GlPeExtLoc::IsPosLocMeasAvailable(v4, v5, v6, a2);
  if (result)
  {
    uint64_t v8 = *(void *)(*((void *)this + 1557) + 136);
    return !v8 || *(unsigned char *)(v8 + 3009) == 0;
  }
  return result;
}

BOOL non-virtual thunk to'BlueFin::GlPePrawnKf::IsExtLocAvailable(BlueFin::GlPePrawnKf *this, char a2)
{
  return BlueFin::GlPePrawnKf::IsExtLocAvailable((BlueFin::GlPePrawnKf *)((char *)this - 5848), a2);
}

BOOL BlueFin::GlPePrawnKf::IsFirstFixConditionForExtLoc(BlueFin::GlPePrawnKf *this)
{
  int v2 = *((_DWORD *)this + 2);
  int v3 = (*(uint64_t (**)(BlueFin::GlPePrawnKf *))(*(void *)this + 96))(this);
  BOOL result = v3 == 1 || v2 == 2;
  if (v2 == 2 && v3 != 1)
  {
    int v6 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 200);
    return (v6 - (*(unsigned int (**)(BlueFin::GlPePrawnKf *))(*(void *)this + 120))(this)) >> 4 > 0x36A;
  }
  return result;
}

BOOL non-virtual thunk to'BlueFin::GlPePrawnKf::IsFirstFixConditionForExtLoc(BlueFin::GlPePrawnKf *this)
{
  return BlueFin::GlPePrawnKf::IsFirstFixConditionForExtLoc((BlueFin::GlPePrawnKf *)((char *)this - 5848));
}

uint64_t BlueFin::GlPePrawnKf::GetResidMon(BlueFin::GlPePrawnKf *this)
{
  return (uint64_t)this + 5888;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetResidMon(BlueFin::GlPePrawnKf *this)
{
  return (uint64_t)this + 40;
}

float BlueFin::GlPePrawnKf::Update(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*((_DWORD *)a1 + 2) != 2)
  {
    uint64_t v36 = "IsKfInit()";
    DeviceFaultNotify("glpe_prawnkf.cpp", 985, "Update", (char)"IsKfInit()");
    int v37 = 985;
    goto LABEL_35;
  }
  uint64_t v4 = a2;
  if (*(_DWORD *)(a2 + 800))
  {
    uint64_t v38 = 0;
    int v40 = a1 + 32;
    int v6 = (uint64_t *)(a2 + 8 * *(unsigned int *)(a2 + 804));
    double v42 = a1 + 573;
    int v41 = a1 + 583;
    while (1)
    {
      uint64_t v7 = *v6;
      if (!*(unsigned char *)(*v6 + 48))
      {
        uint64_t v36 = "(*it)->bValid";
        DeviceFaultNotify("glpe_prawnkf.cpp", 990, "Update", (char)"(*it)->bValid");
        int v37 = 990;
        goto LABEL_35;
      }
      v90[0] = v91;
      v90[1] = 0x100000000;
      v91[0] = 0;
      v91[1] = 0;
      v88[0] = v89;
      v88[1] = 0x100000000;
      v89[0] = 0;
      v89[1] = 0;
      v86[0] = v87;
      v86[1] = 0x100000000;
      v87[0] = 0;
      v87[1] = 0;
      v84[1] = 0xD00000000;
      memset(v85, 0, sizeof(v85));
      long long v81 = xmmword_263BBC890;
      char v79 = v82;
      char v80 = v83;
      v83[0] = 0;
      v83[1] = (char *)&v81 + 8;
      v84[0] = v85;
      if (*(_DWORD *)(v7 + 24) == -1) {
        int v8 = 394305;
      }
      else {
        int v8 = 132161;
      }
      uint64_t v9 = (uint64_t)a1 + *(void *)(*a1 - 24);
      uint64_t v10 = *(void *)(v9 + 88);
      int v11 = *(_DWORD *)a1[734];
      double v12 = *(float *)(v9 + 208);
      double v13 = *(float *)(v9 + 216);
      double v14 = *(float *)(v9 + 224);
      double v15 = *(float *)(v9 + 232);
      uint64_t v16 = a1[582];
      v66[0] = v84;
      v66[1] = v42;
      v66[2] = v10;
      int v67 = v11;
      int v68 = 3;
      int v69 = v8;
      uint64_t v70 = v9 + 104;
      long long v71 = v41;
      uint64_t v72 = v9 + 152;
      double v73 = v12;
      double v74 = v13;
      double v75 = v14;
      double v76 = v15;
      uint64_t v77 = v16;
      uint64_t v78 = 0x4008000000000000;
      v62[0] = v90;
      v62[1] = v88;
      v62[2] = &v79;
      v62[3] = v86;
      long long v63 = 0uLL;
      long long v64 = 0uLL;
      uint64_t v65 = 0;
      if ((*(unsigned int (**)(uint64_t, void *, void *))(*(void *)a1[733] + 16))(a1[733], v66, v62))
      {
        uint64_t v36 = "m_rotComputeZRH.Compute(otInp, otOut, *it, GlSet128::BIT0) == SKF_ZRH_OK";
        DeviceFaultNotify("glpe_prawnkf.cpp", 1005, "Update", (char)"m_rotComputeZRH.Compute(otInp, otOut, *it, GlSet128::BIT0) == SKF_ZRH_OK");
        int v37 = 1005;
        goto LABEL_35;
      }
      double v17 = *(double *)(v90[0] + 8);
      double v18 = *(double *)(v88[0] + 8);
      long double v19 = *(double *)(v86[0] + 8);
      uint64_t v20 = *v6;
      int v21 = *(_DWORD *)(*v6 + 44);
      if (v21)
      {
        if (v21 != 2)
        {
          uint64_t v36 = "false";
          DeviceFaultNotify("glpe_prawnkf.cpp", 1021, "Update", (char)"false");
          int v37 = 1021;
LABEL_35:
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", v37, v36);
        }
        int v22 = 0;
        int v23 = 12;
      }
      else
      {
        int v23 = 11;
        int v21 = 1;
        int v22 = 1;
      }
      *(_DWORD *)((char *)v40 + *(void *)(*a1 - 24)) |= v21;
      if (DWORD1(v81) != 13)
      {
        uint64_t v36 = "otH.GetColSize() == (IsStateEnabled(ID_STATE_GITO) ? KF_STATE_GITO : KF_MAX_STATE)";
        DeviceFaultNotify("glpe_prawnkf.cpp", 1025, "Update", (char)"otH.GetColSize() == (IsStateEnabled(ID_STATE_GITO) ? KF_STATE_GITO : KF_MAX_STATE)");
        int v37 = 1025;
        goto LABEL_35;
      }
      if (v81 != 1)
      {
        uint64_t v36 = "otH.GetRowSize() == 1";
        DeviceFaultNotify("glpe_prawnkf.cpp", 1026, "Update", (char)"otH.GetRowSize() == 1");
        int v37 = 1026;
        goto LABEL_35;
      }
      v50[1] = 0x1500000015;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      v50[0] = &v51;
      uint64_t v24 = (void *)v80[1];
      if ((a4 & 1) == 0)
      {
        *((void *)&v51 + 1) = v24[1];
        *(void *)&long long v52 = v24[3];
        *((void *)&v52 + 1) = v24[5];
        *(void *)&long long v53 = v24[2];
        *((void *)&v53 + 1) = v24[4];
        *(void *)&long long v54 = v24[6];
        *(void *)&long long v61 = v24[13];
      }
      *((void *)&v54 + 1) = v24[7];
      *(void *)&long long v55 = v24[8];
      if (BlueFin::GlPeShrimpKf::MeasUpdateINS((BlueFin::GlPeShrimpKf *)a1, (uint64_t)v50, v23, v17 - v18, v19, 5.0, v20, 0))
      {
        if (v22) {
          LOBYTE(v38) = v38 + 1;
        }
        else {
          ++BYTE4(v38);
        }
      }
      ++v6;
      uint64_t v4 = a2;
      if (v6 == (uint64_t *)(a2 + 8 * *(unsigned int *)(a2 + 804) + 8 * *(unsigned int *)(a2 + 800))) {
        goto LABEL_24;
      }
    }
  }
  uint64_t v38 = 0;
LABEL_24:
  uint64_t v25 = a1[733];
  int v44 = 0;
  uint64_t v45 = v47;
  char v46 = 8;
  memset(v47, 0, 32);
  *(_OWORD *)&v47[9] = xmmword_263BBA380;
  int32x2_t v48 = vdup_n_s32(0x42C60000u);
  int v49 = 1120272384;
  BlueFin::stDops::stDops((uint64_t)v50, (uint64_t)&v44);
  *((void *)&v55 + 1) = v25;
  uint64_t v26 = *(unsigned int *)((char *)a1 + *(void *)(*a1 - 24) + 200);
  BlueFin::GlPeMeasList::GetPrSignalIds((uint64_t)v84, v4);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)v84, (uint64_t)v66);
  v62[0] = *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 88);
  LODWORD(v90[0]) = *(_DWORD *)a1[734];
  BlueFin::GlPeDops::GetDops((uint64_t)v50, v26);
  BOOL v28 = v38 > 2u || BYTE4(v38) > 2u;
  *((unsigned char *)a1 + 5322) = v28;
  *((unsigned char *)a1 + 5323) = v82[7] <= 3.0;
  uint64_t v29 = *a1;
  uint64_t v30 = (void *)a1[83];
  float v31 = *(double *)(v30[1] + 8) + *(double *)(v30[2] + 16);
  *(float *)((char *)a1 + *(void *)(*a1 - 24) + 80) = sqrtf(v31);
  float v32 = *(double *)(v30[3] + 24);
  *(float *)((char *)a1 + *(void *)(v29 - 24) + 84) = sqrtf(v32);
  float v33 = *(double *)(v30[4] + 32) + *(double *)(v30[5] + 40);
  *(float *)((char *)a1 + *(void *)(v29 - 24) + 128) = sqrtf(v33);
  float v34 = *(double *)(v30[6] + 48);
  float result = sqrtf(v34);
  *(float *)((char *)a1 + *(void *)(v29 - 24) + 140) = result;
  return result;
}

void BlueFin::GlPePrawnKf::GetGnssStatesForDrCalibration(BlueFin::GlPePrawnKf *this, BlueFin::GlPeNavGnssState *a2, BlueFin::GlPeNavGnssState *a3, BlueFin::GlPeNavGnssState *a4, unsigned int *a5, unsigned int *a6, int *a7)
{
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::GetGnssStatesForDrCalibration(BlueFin::GlPePrawnKf *this, BlueFin::GlPeNavGnssState *a2, BlueFin::GlPeNavGnssState *a3, BlueFin::GlPeNavGnssState *a4, unsigned int *a5, unsigned int *a6, int *a7)
{
}

double BlueFin::GlPePrawnKf::GetXtcTaHdg(BlueFin::GlPePrawnKf *this, double *a2, unsigned int *a3)
{
  double result = *((double *)this + 2691);
  *a2 = result;
  *a3 = *((_DWORD *)this + 5384);
  return result;
}

double non-virtual thunk to'BlueFin::GlPePrawnKf::GetXtcTaHdg(BlueFin::GlPePrawnKf *this, double *a2, unsigned int *a3)
{
  double result = *((double *)this + 1960);
  *a2 = result;
  *a3 = *((_DWORD *)this + 3922);
  return result;
}

uint64_t BlueFin::GlPePrawnKf::SetExtSensInfo(uint64_t result, uint64_t a2, int a3)
{
  if (*(__int16 *)(a2 + 32) < 0)
  {
    double v14 = "rotData.sNumSamples >= 0";
    DeviceFaultNotify("glpe_prawnkf.cpp", 1097, "SetExtSensInfo", (char)"rotData.sNumSamples >= 0");
    int v15 = 1097;
    goto LABEL_18;
  }
  if (*(unsigned __int16 *)(a2 + 32) >= 0x29u)
  {
    double v14 = "rotData.sNumSamples <= GL_EXT_SENS_MAX_SAMPLES";
    DeviceFaultNotify("glpe_prawnkf.cpp", 1098, "SetExtSensInfo", (char)"rotData.sNumSamples <= GL_EXT_SENS_MAX_SAMPLES");
    int v15 = 1098;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.cpp", v15, v14);
  }
  unsigned int v3 = *(_DWORD *)a2;
  if (*(_WORD *)(a2 + 32)) {
    BOOL v4 = v3 > 5;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 21232;
    uint64_t v7 = result + 19552;
    double result = BlueFin::GlPeShrimpSensBuffer::Write(result + 19552, a3, a2 + 40, *(unsigned __int16 *)(a2 + 32), v3);
    if (*(_DWORD *)(v6 + 4) == *(_DWORD *)v6)
    {
      if (*(unsigned char *)(v6 + 16)) {
        *(unsigned char *)(v5 + 5049) = 1;
      }
      unsigned int v8 = *(_DWORD *)(v6 + 8);
      if ((int)(*(_DWORD *)(v6 + 12) - v8 + ((int)(*(_DWORD *)(v6 + 12) - v8) < 0 ? 0x3C : 0)) >= 1)
      {
        float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D34uLL);
        do
        {
          uint64_t v9 = v7 + 28 * v8;
          float v10 = *(float *)(v9 + 8);
          float v11 = *(float *)(v9 + 20);
          int v12 = *(_DWORD *)(v9 + 24);
          *(_DWORD *)(v9 + 24) = 0;
          *(_DWORD *)(v6 + 4) = 0;
          *(_DWORD *)(v6 + 8) = (v8 + 1) % 0x3C;
          *(unsigned char *)(v6 + 16) = 0;
          float64x2_t v20 = vcvtq_f64_f32(*(float32x2_t *)v9);
          double v21 = v10;
          uint64_t v22 = 0;
          float64x2_t v17 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v9 + 12)), v16);
          double v18 = v11 * 0.0174532925;
          uint64_t v19 = 0;
          double result = BlueFin::GlPeShrimpKf::SensorUpdate(v5, v20.f64, v17.f64, v12);
          unsigned int v8 = *(_DWORD *)(v6 + 8);
        }
        while ((int)(*(_DWORD *)(v6 + 12) - v8 + ((int)(*(_DWORD *)(v6 + 12) - v8) < 0 ? 0x3C : 0)) >= 1
             && (result & 1) != 0);
      }
      uint64_t v13 = *(void *)v5;
      *(_DWORD *)(v5 + *(void *)(*(void *)v5 - 24) + 256) |= 8u;
      *(_DWORD *)(v5 + *(void *)(v13 - 24) + 256) |= 4u;
    }
  }
  return result;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::SetExtSensInfo(uint64_t a1, uint64_t a2, int a3)
{
  return BlueFin::GlPePrawnKf::SetExtSensInfo(a1 - 5848, a2, a3);
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::DrUpdate(BlueFin::GlPePrawnKf *this, const BlueFin::GlPeNavGnssState *a2)
{
}

void BlueFin::GlPePrawnKf::~GlPePrawnKf(BlueFin::GlPePrawnKf *this)
{
}

double BlueFin::GlPePrawnKf::GetMaxResid(BlueFin::GlPePrawnKf *this)
{
  return *((double *)this + 748);
}

void BlueFin::GlPePrawnKf::GetGnssStateForHula(BlueFin::GlPePrawnKf *this)
{
}

uint64_t BlueFin::GlPePrawnKf::GetUseRawPr(BlueFin::GlPePrawnKf *this)
{
  return *((unsigned __int8 *)this + 21520);
}

void BlueFin::GlPePrawnKf::GetSlowFilter(BlueFin::GlPePrawnKf *this)
{
}

{
  DeviceFaultNotify("glpe_prawnkf.h", 265, "GetSlowFilter", (char)"false");
  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.h", 265, "false");
}

uint64_t BlueFin::GlPePrawnKf::GetExtLocReport(BlueFin::GlPePrawnKf *this)
{
  return (uint64_t)this + 19200;
}

uint64_t BlueFin::GlPePrawnKf::GetGnssNavUpa(BlueFin::GlPePrawnKf *this)
{
  return (uint64_t)this + 19216;
}

float BlueFin::GlPePrawnKf::GetEstPosErr(BlueFin::GlPePrawnKf *this)
{
  float result = 6378100.0;
  if (*((_DWORD *)this + 2) == 2
    && !*((unsigned char *)this + 5827)
    && (*(_DWORD *)(*((void *)this + 654) + 8) - 3) <= 3)
  {
    return *(float *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  }
  return result;
}

uint64_t BlueFin::GlPePrawnKf::GetDrResetType(BlueFin::GlPePrawnKf *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 196);
}

void BlueFin::GlPePrawnKf::GetPrSignalIdsForEnvironmentDetection(BlueFin::GlPePrawnKf *this)
{
}

uint64_t BlueFin::GlPePrawnKf::IsHighDynamicFromIMU(BlueFin::GlPePrawnKf *this)
{
  return *((unsigned __int8 *)this + 5051);
}

double BlueFin::GlPePrawnKf::GetInfoForPdrCalibration(uint64_t *a1, uint64_t a2, double *a3, uint64_t a4, double *a5, double *a6)
{
  uint64_t v9 = *a1;
  float v10 = (char *)a1 + *(void *)(*a1 - 24);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 8);
  *(void *)(a2 + 16) = *((void *)v10 + 3);
  *a3 = (*(float (**)(void))(v9 + 304))();
  uint64_t v11 = *a1;
  *a5 = *(float *)((char *)a1 + *(void *)(*a1 - 24) + 176);
  double result = *(float *)((char *)a1 + *(void *)(v11 - 24) + 184);
  *a6 = result;
  return result;
}

uint64_t BlueFin::GlPePrawnKf::GetClockAnomalyFlag(BlueFin::GlPePrawnKf *this)
{
  return 0;
}

void BlueFin::GlPePrawnKf::ResetKFStateForPdrPropagation(BlueFin::GlPePrawnKf *this)
{
}

uint64_t BlueFin::GlPePrawnKf::SetKFEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 21521) = a2;
  return this;
}

uint64_t BlueFin::GlPePrawnKf::IsKFEnabled(BlueFin::GlPePrawnKf *this)
{
  return *((unsigned __int8 *)this + 21521);
}

uint64_t BlueFin::GlPePrawnKf::SetTcxoMitigationState(uint64_t result, uint64_t a2)
{
  *(void *)(result + 21544) = a2;
  return result;
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::~GlPePrawnKf(BlueFin::GlPePrawnKf *this)
{
}

double non-virtual thunk to'BlueFin::GlPePrawnKf::GetMaxResid(BlueFin::GlPePrawnKf *this)
{
  return *((double *)this + 17);
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetUseRawPr(BlueFin::GlPePrawnKf *this)
{
  return *((unsigned __int8 *)this + 15672);
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::GetSlowFilter(BlueFin::GlPePrawnKf *this)
{
}

{
  DeviceFaultNotify("glpe_prawnkf.h", 265, "GetSlowFilter", (char)"false");
  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_prawnkf.h", 265, "false");
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::GetGnssStateForHula(BlueFin::GlPePrawnKf *this)
{
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetExtLocReport(BlueFin::GlPePrawnKf *this)
{
  return (uint64_t)this + 13352;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetGnssNavUpa(BlueFin::GlPePrawnKf *this)
{
  return (uint64_t)this + 13368;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetClockAnomalyFlag(BlueFin::GlPePrawnKf *this)
{
  return 0;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::SetTcxoMitigationState(uint64_t result, uint64_t a2)
{
  *(void *)(result + 15696) = a2;
  return result;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::GetDrResetType(BlueFin::GlPePrawnKf *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*((void *)this - 731) - 24) - 5652);
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::GetPrSignalIdsForEnvironmentDetection(BlueFin::GlPePrawnKf *this)
{
}

BOOL non-virtual thunk to'BlueFin::GlPePrawnKf::GetQbv(BlueFin::GlPePrawnKf *this, BlueFin::QuaternionD *a2)
{
  return BlueFin::GlPePrawnKf::GetQbv((BlueFin::GlPePrawnKf *)((char *)this - 5848), a2);
}

BOOL non-virtual thunk to'BlueFin::GlPePrawnKf::GetAccBias(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 - 1240);
  *(void *)(a2 + 16) = *(void *)(a1 - 1224);
  return *(_DWORD *)(a1 - 5840) == 2
      && !*(unsigned char *)(a1 - 21)
      && (*(_DWORD *)(*(void *)(a1 - 616) + 8) - 3) < 4;
}

uint64_t non-virtual thunk to'BlueFin::GlPePrawnKf::IsHighDynamicFromIMU(BlueFin::GlPePrawnKf *this)
{
  return *((unsigned __int8 *)this - 797);
}

double non-virtual thunk to'BlueFin::GlPePrawnKf::GetInfoForPdrCalibration(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double *a5, double *a6)
{
  unsigned int v8 = (uint64_t *)(a1 - 5848);
  uint64_t v9 = *(void *)(a1 - 5848);
  uint64_t v10 = a1 - 5848 + *(void *)(v9 - 24);
  *(_OWORD *)a2 = *(_OWORD *)(v10 + 8);
  *(void *)(a2 + 16) = *(void *)(v10 + 24);
  *a3 = (*(float (**)(uint64_t))(v9 + 304))(a1 - 5848);
  uint64_t v11 = *v8;
  *a5 = *(float *)((char *)v8 + *(void *)(*v8 - 24) + 176);
  double result = *(float *)((char *)v8 + *(void *)(v11 - 24) + 184);
  *a6 = result;
  return result;
}

void non-virtual thunk to'BlueFin::GlPePrawnKf::ResetKFStateForPdrPropagation(BlueFin::GlPePrawnKf *this)
{
}

void virtual thunk to'BlueFin::GlPePrawnKf::~GlPePrawnKf(BlueFin::GlPePrawnKf *this)
{
}

float virtual thunk to'BlueFin::GlPePrawnKf::GetEstPosErr(BlueFin::GlPePrawnKf *this)
{
  double v1 = (char *)this + *(void *)(*(void *)this - 32);
  float result = 6378100.0;
  if (*((_DWORD *)v1 + 2) == 2 && !v1[5827] && (*(_DWORD *)(*((void *)v1 + 654) + 8) - 3) <= 3) {
    return *(float *)&v1[*(void *)(*(void *)v1 - 24) + 80];
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssMotion::IsNotMoving(BlueFin::GlPeNavGnssMotion *this, double a2)
{
  BOOL result = !*((unsigned char *)this + 84) && *((unsigned char *)this + 48) && *((_DWORD *)this + 20) >= *((_DWORD *)this + 19);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (unsigned char *)(*(void *)this + 4224);
  int v6 = *(_DWORD *)(v4 + 4216);
  if (v6 == 6 || v6 == 1)
  {
    if (*v5)
    {
      if (!v5[2]) {
        return 1;
      }
    }
  }
  return result;
}

double BlueFin::GlPeNavGnssMotion::GetNotMovingFactor(BlueFin::GlPeNavGnssMotion *this)
{
  int v1 = *(_DWORD *)(*(void *)this + 4216);
  if ((v1 == 6 || v1 == 1) && *(unsigned char *)(*(void *)this + 4224) && !*(unsigned char *)(*(void *)this + 4226)) {
    return 1.0;
  }
  double v2 = *((double *)this + 5);
  double v3 = *((double *)this + 8);
  double result = 0.0;
  if (v2 < v3) {
    return 1.0 - v2 / v3;
  }
  return result;
}

BOOL BlueFin::GlPeNavGnssMotion::IsNotTurning(BlueFin::GlPeNavGnssMotion *this, double a2)
{
  if (*(_DWORD *)(*(void *)this + 4200) == 1) {
    return 1;
  }
  if (*((unsigned char *)this + 48) && (a2 = fabs(*((double *)this + 4)), a2 < *((double *)this + 7))) {
    return 1;
  }
  else {
    return BlueFin::GlPeNavGnssMotion::IsNotMoving(this, a2);
  }
}

uint64_t BlueFin::GlPeNavGnssMotion::SetNoMotionSpeedAndTrigger(uint64_t this, double a2, double a3, unsigned int a4, int a5)
{
  double v5 = fabs(a2);
  *(double *)(this + 40) = v5;
  if (*(unsigned char *)(this + 48))
  {
    double v6 = *(double *)(this + 64);
    int v7 = *(_DWORD *)(*(void *)(this + 16) + 8);
    if (a5) {
      double v8 = *(double *)(this + 64);
    }
    else {
      double v8 = v6 * 0.5;
    }
    if (v7 == 3 || v7 == 5) {
      double v6 = v6 * 0.5;
    }
    if ((v7 - 1) < 2) {
      double v6 = v8;
    }
    if (v6 <= v5) {
      *(_DWORD *)(this + 80) = 0;
    }
    else {
      ++*(_DWORD *)(this + 80);
    }
    return this;
  }
  double v10 = a3 * 0.3;
  if (v10 < 0.5) {
    double v10 = 0.5;
  }
  int v11 = *(_DWORD *)(this + 52);
  if (v5 <= v10)
  {
    if (v11)
    {
      *(_DWORD *)(this + 52) = 0;
      return this;
    }
    if (a4 < 0x1F) {
      return this;
    }
LABEL_25:
    *(unsigned char *)(this + 48) = 1;
    return this;
  }
  int v12 = **(_DWORD **)(this + 8);
  if (!v11)
  {
    *(_DWORD *)(this + 52) = v12;
    return this;
  }
  if ((v12 - v11) > *(_DWORD *)(this + 72)) {
    goto LABEL_25;
  }
  return this;
}

void BlueFin::GlPeNavGnssResidMon::UpdateRange(BlueFin::GlPeNavGnssResidMon *this, const BlueFin::GlPeNavUtil *a2, const BlueFin::GlSignalIdSet *a3, const BlueFin::GlSignalIdSet *a4, uint64_t a5, char a6, int a7)
{
  uint64_t v124 = *MEMORY[0x263EF8340];
  if (a7)
  {
    __asm { FMOV            V0.2D, #20.0 }
    *(_OWORD *)((char *)this + 8) = _Q0;
    *(_OWORD *)((char *)this + 24) = xmmword_263BBCDD0;
    *((_DWORD *)this + 22) = 0;
    *((_OWORD *)this + 6) = xmmword_263BBCDD0;
    *((void *)this + 414) = 0;
    *((unsigned char *)this + 3320) = 0;
    *((_DWORD *)this + 831) = 0;
    *((_WORD *)this + 1664) = 0;
    *((void *)this + 817) = 0;
    *((unsigned char *)this + 6544) = 0;
    *((_DWORD *)this + 1637) = 0;
    *((_WORD *)this + 3276) = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    return;
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  unsigned int v17 = BlueFin::GlSetBase::Cnt(a3);
  if (v17)
  {
    unsigned int v18 = v17;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v116, (unsigned int *)v117, 0x13u, (const void **)a3);
    uint64_t v19 = (char *)a2 + *(void *)(*(void *)a2 - 24);
    long long v112 = *(_OWORD *)(v19 + 8);
    uint64_t v113 = *((void *)v19 + 3);
    BlueFin::GlPeNavUtil::ComputeRangeResidVec((uint64_t)a2, (uint64_t)v116, (uint64_t)&v112, a5, 0, 0, 0, 1, a6, 1);
    if (v115)
    {
      char v91 = a6;
      int v105 = 0;
      double v106 = v108;
      char v107 = 8;
      memset(v108, 0, 32);
      long long v109 = xmmword_263BBA380;
      int32x2_t v110 = vdup_n_s32(0x42C60000u);
      int v111 = 1120272384;
      int v102 = v104;
      uint64_t v103 = 0x6400000000;
      bzero(v104, 0x328uLL);
      unsigned __int8 v119 = *((unsigned char *)a3 + 8);
      memcpy(v123, *(const void **)a3, 4 * v119);
      unsigned __int16 v121 = 0;
      unsigned __int8 v120 = 0;
      int v122 = v123[0];
      BlueFin::GlSetIterator::operator++(&v119);
      if (v120 != v119)
      {
        unsigned __int8 v22 = 1;
        while (v121 < 0x23FuLL)
        {
          int v23 = (BlueFin::GlPeMsmtMgr *)*((void *)this + 820);
          uint64_t v24 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v121;
          unsigned __int8 v25 = *v24;
          LODWORD(v24) = (char)v24[1];
          unsigned __int8 v94 = v25;
          int v97 = (int)v24;
          LOWORD(v98[0]) = v121;
          if (*((float *)BlueFin::GlPeMsmtMgr::GetMeMeas(v23, (const BlueFin::GlSignalId *)&v94, 0, 0) + 27) > 17.0)
          {
            uint64_t v26 = *(void *)(v114 + 8 * v22);
            BlueFin::SKFVector::AddLen((uint64_t)&v102);
            *(void *)&v102[8 * (int)v103] = v26;
          }
          BlueFin::GlSetIterator::operator++(&v119);
          ++v22;
          if (v120 == v119) {
            goto LABEL_11;
          }
        }
LABEL_84:
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
LABEL_11:
      BlueFin::SKFVector::Quartiles(&v114, (double *)this + 5, v20, v21);
      uint64_t v30 = v115;
      if (v115 < 1)
      {
        double v36 = 0.0;
        char v35 = v91;
      }
      else
      {
        uint64_t v31 = v114;
        float v32 = (double *)(v114 + 8);
        uint64_t v33 = v115;
        do
        {
          *float v32 = fabs(*v32);
          ++v32;
          --v33;
        }
        while (v33);
        double v34 = *(double *)(v31 + 8);
        if (v30 == 1)
        {
          char v35 = v91;
        }
        else
        {
          uint64_t v37 = v30 - 1;
          uint64_t v38 = (double *)(v31 + 16);
          char v35 = v91;
          do
          {
            double v39 = *v38++;
            double v34 = v34 + v39;
            --v37;
          }
          while (v37);
        }
        double v36 = v34 / (double)(int)v30;
      }
      double v42 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v114, v27, v28, v29);
      if ((int)v103 > 4)
      {
        BlueFin::SKFVector::Quartiles((uint64_t *)&v102, (double *)this + 5, v40, v41);
        uint64_t v46 = v103;
        if ((int)v103 >= 1)
        {
          uint64_t v47 = (double *)(v102 + 8);
          do
          {
            *uint64_t v47 = fabs(*v47);
            ++v47;
            --v46;
          }
          while (v46);
        }
        double v42 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v102, v43, v44, v45);
      }
      double v48 = v42;
      if (v18 > 6)
      {
        for (uint64_t i = 0; i != 1200; i += 12)
        {
          long long v56 = &v119 + i;
          *long long v56 = 0;
          *((_DWORD *)v56 + 1) = -1;
          *((_WORD *)v56 + 4) = 575;
        }
        unsigned __int8 v94 = *((unsigned char *)a3 + 8);
        memcpy(v98, *(const void **)a3, 4 * v94);
        unsigned __int16 v96 = 0;
        unsigned __int8 v95 = 0;
        int v97 = v98[0];
        BlueFin::GlSetIterator::operator++(&v94);
        if (v95 != v94)
        {
          long long v57 = &v119;
          do
          {
            unsigned __int16 v58 = v96;
            if (v96 >= 0x23FuLL) {
              goto LABEL_84;
            }
            long long v59 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v96;
            int v60 = (char)v59[1];
            *long long v57 = *v59;
            *((_DWORD *)v57 + 1) = v60;
            *((_WORD *)v57 + 4) = v58;
            BlueFin::GlSetIterator::operator++(&v94);
            v57 += 12;
          }
          while (v95 != v94);
        }
        uint64_t v99 = v101;
        char v100 = 8;
        memset(v101, 0, sizeof(v101));
        if (v115 > 1)
        {
          double v62 = fabs(*(double *)(v114 + 8));
          LODWORD(v61) = 1;
          uint64_t v63 = 2;
          do
          {
            double v64 = fabs(*(double *)(v114 + 8 * v63));
            if (v62 > v64)
            {
              double v62 = v64;
              LODWORD(v61) = v63;
            }
            ++v63;
          }
          while (v115 + 1 != v63);
          uint64_t v61 = (int)v61;
        }
        else
        {
          uint64_t v61 = 1;
        }
        if (v115 < 1)
        {
          double v69 = 1.0;
        }
        else
        {
          uint64_t v65 = 0;
          double v66 = 0.0;
          do
          {
            double v67 = fabs(*(double *)(v114 + 8 + v65));
            if (v66 < v67 || v65 == 0) {
              double v66 = v67;
            }
            v65 += 8;
          }
          while (8 * v115 != v65);
          double v69 = v66 + 1.0;
        }
        unsigned __int8 v70 = 0;
        double v71 = *(double *)(v114 + 8 * v61);
        *((double *)this + 12) = v69;
        do
        {
          uint64_t v72 = v114;
          if (v115 >= 2)
          {
            double v74 = fabs(*(double *)(v114 + 8));
            int v73 = 1;
            uint64_t v75 = 2;
            do
            {
              double v76 = fabs(*(double *)(v114 + 8 * v75));
              if (v74 > v76)
              {
                double v74 = v76;
                int v73 = v75;
              }
              ++v75;
            }
            while (v115 + 1 != v75);
          }
          else
          {
            int v73 = 1;
          }
          unint64_t v77 = *(&v119 + 12 * v73 - 12);
          *(_DWORD *)((char *)v99 + ((v77 >> 3) & 0x1C)) |= 1 << v77;
          double v78 = *(double *)(v72 + 8 * v73);
          ++v70;
          *(void *)(v72 + 8 * v73) = *((void *)this + 12);
          if (v70 >= 3u)
          {
            BlueFin::GlPeNavUtil::ComputeDops(a2, (const BlueFin::GlSvIdSet *)&v99);
            BlueFin::stDops::operator=((uint64_t)&v105, (uint64_t)&v94);
          }
        }
        while (v18 > v70 && (v70 < 7u || *((float *)&v109 + 1) > 2.0));
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        }
        double v52 = v78 - v71;
        uint64_t v50 = v114;
        int v49 = v115;
        a5 = a5;
        char v35 = v91;
      }
      else
      {
        int v49 = v115;
        uint64_t v50 = v114;
        if (v115 < 1)
        {
          double v52 = 0.0;
        }
        else
        {
          uint64_t v51 = 0;
          double v52 = 0.0;
          do
          {
            double v53 = fabs(*(double *)(v114 + v51 + 8));
            if (v52 < v53 || v51 == 0) {
              double v52 = v53;
            }
            v51 += 8;
          }
          while (8 * v115 != v51);
        }
      }
      bzero((void *)(v50 + 8), 8 * v49);
      BlueFin::GlSetBase::operator=((uint64_t)v116, (uint64_t)a4);
      long long v79 = *(_OWORD *)((char *)a4 + 28);
      long long v80 = *(_OWORD *)((char *)a4 + 60);
      void v117[2] = *(_OWORD *)((char *)a4 + 44);
      *(_OWORD *)double v118 = v80;
      *(_OWORD *)&v118[12] = *(_OWORD *)((char *)a4 + 72);
      v117[0] = *(_OWORD *)((char *)a4 + 12);
      v117[1] = v79;
      long long v81 = (char *)a2 + *(void *)(*(void *)a2 - 24);
      long long v92 = *(_OWORD *)(v81 + 8);
      uint64_t v93 = *((void *)v81 + 3);
      BlueFin::GlPeNavUtil::ComputeRangeResidVec((uint64_t)a2, (uint64_t)v116, (uint64_t)&v92, a5, 0, 0, 0, 1, v35, 1);
      BlueFin::SKFVector::Clone((BlueFin::SKFVector *)&v114, (const BlueFin::SKFVector *)&v119);
      if (BlueFin::GlSetBase::Cnt(a3) <= 9)
      {
        double v89 = *(double *)this;
      }
      else
      {
        uint64_t v82 = v115;
        if (v115 >= 1)
        {
          long long v83 = (double *)(v114 + 8);
          do
          {
            *long long v83 = fabs(*v83);
            ++v83;
            --v82;
          }
          while (v82);
        }
        unsigned int v84 = BlueFin::GlSetBase::Cnt(a4);
        double v88 = v48;
        if (v84 >= 0xA) {
          double v88 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v114, v85, v86, v87);
        }
        double v89 = *(double *)this;
        *((double *)this + 13) = *((double *)this + 13) + *(double *)this * (v88 - *((double *)this + 13));
      }
      double v90 = *((double *)this + 2);
      *((double *)this + 1) = *((double *)this + 1) + v89 * (v52 - *((double *)this + 1));
      *((double *)this + 2) = v90 + v89 * (v36 - v90);
      *((double *)this + 3) = *((double *)this + 3) + v89 * (v48 - *((double *)this + 3));
      ++*((_DWORD *)this + 22);
    }
  }
}

void BlueFin::GlPeNavGnssResidMon::UpdateRrate(BlueFin::GlPeNavGnssResidMon *this, const BlueFin::GlPeNavUtil *a2, const BlueFin::GlSignalIdSet *a3)
{
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  double v6 = (double *)((char *)this + 64);
  *((void *)this + 10) = 0;
  if (BlueFin::GlSetBase::Cnt(a3)
    && (BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v18, v19, 0x13u, (const void **)a3),
        BlueFin::GlPeNavUtil::ComputeRrateResidVec((uint64_t)a2, (uint64_t)v18),
        v17))
  {
    BlueFin::SKFVector::Quartiles(&v16, v6, v7, v8);
    uint64_t v12 = v17;
    if (v17 >= 1)
    {
      uint64_t v13 = (double *)(v16 + 8);
      do
      {
        *uint64_t v13 = fabs(*v13);
        ++v13;
        --v12;
      }
      while (v12);
    }
    double v14 = BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v16, v9, v10, v11);
  }
  else
  {
    double v14 = 0.0;
  }
  double v15 = *((double *)this + 4) + (v14 - *((double *)this + 4)) * 0.9;
  if (v15 < 0.1) {
    double v15 = 0.1;
  }
  *((double *)this + 4) = v15;
}

void BlueFin::GlPeNavGnssResidMon::RunBcMon(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t *a5, int a6)
{
  uint64_t v12 = 0;
  v83[100] = *MEMORY[0x263EF8340];
  do
  {
    uint64_t v13 = &v82[v12 + 100];
    *uint64_t v13 = 0;
    *((_DWORD *)v13 + 1) = -1;
    *((_WORD *)v13 + 4) = 575;
    v12 += 12;
  }
  while (v12 != 1200);
  long long v79 = v81;
  uint64_t v80 = 0x6400000000;
  bzero(v81, 0x328uLL);
  double v76 = (double *)v78;
  uint64_t v77 = 0x6400000000;
  bzero(v78, 0x328uLL);
  uint64_t v15 = 3336;
  if (a6) {
    uint64_t v15 = 112;
  }
  uint64_t v16 = a1 + v15;
  if ((a2 - *(_DWORD *)(a1 + v15 + 3212)) > 0x5DB)
  {
    BOOL v45 = 0;
    LODWORD(v29) = 0;
LABEL_54:
    *(unsigned char *)(v16 + 3208) = 0;
    goto LABEL_76;
  }
  unsigned __int8 v17 = 0;
  unsigned int v18 = 0;
  uint64_t v19 = *a5;
  uint64_t v20 = a4;
  do
  {
    int v21 = *(unsigned __int8 *)(v20 + 20);
    if ((v21 - 1) >= 0xBC) {
      break;
    }
    __int16 v22 = *(_WORD *)(v20 + 28);
    unint64_t v14 = v22 & 0x1F;
    if (((unint64_t)*(unsigned int *)(v19 + 4 * (v22 >> 5)) >> (v22 & 0x1F)))
    {
      unint64_t v23 = 0;
      int v24 = *(_DWORD *)(v20 + 24);
      LOBYTE(v14) = 1;
      unsigned __int8 v25 = (_DWORD *)(a1 + 136);
      while (*((unsigned __int8 *)v25 - 4) != v21 || *v25 != v24)
      {
        unint64_t v14 = v23 < 0x63;
        v25 += 8;
        if (++v23 == 100) {
          goto LABEL_19;
        }
      }
      unint64_t v14 = v14 & ((*(_DWORD *)(v20 + 16) - 1) < 2);
      if (v14 == 1)
      {
        float v26 = *(float *)(v20 + 8);
        if (a6) {
          float v27 = sqrtf(15.0 / v26);
        }
        else {
          float v27 = 3.0 / v26;
        }
        *(double *)&v83[v17] = (float)((float)((float)(*(float *)(v20 + 4) / -40.0)
                                             * (float)((float)*(__int16 *)(v20 + 12) / 90.0))
                                     * v27);
        unint64_t v14 = (unint64_t)&v82[12 * v17 + 100];
        *(unsigned char *)unint64_t v14 = v21;
        *(_DWORD *)(v14 + 4) = v24;
        *(_WORD *)(v14 + 8) = v22;
        ++v17;
      }
    }
LABEL_19:
    v20 += 32;
    BOOL v28 = v18++ >= 0x63;
  }
  while (!v28);
  LODWORD(v29) = v17;
  BlueFin::GlSortDoubles((uint64_t)v83, (const double *)v17, v82, (unsigned __int8 *)v14);
  if (v29 >= 6) {
    uint64_t v29 = 6;
  }
  else {
    uint64_t v29 = v29;
  }
  if (v29)
  {
    uint64_t v33 = 0;
    double v34 = (_DWORD *)(a1 + 136);
    do
    {
      uint64_t v35 = 0;
      double v36 = &v82[12 * v82[v33] + 100];
      int v37 = *v36;
      int v38 = *((_DWORD *)v36 + 1);
      double v39 = v34;
      while (*((unsigned __int8 *)v39 - 4) != v37 || *v39 != v38)
      {
        ++v35;
        v39 += 8;
        if (v35 == 100)
        {
          LOBYTE(v35) = 0;
          break;
        }
      }
      unsigned int v40 = 0;
      uint64_t v41 = a4;
      while (*(unsigned __int8 *)(v41 + 20) != v37 || *(_DWORD *)(v41 + 24) != v38)
      {
        v41 += 32;
        BOOL v28 = v40++ >= 0x63;
        if (v28) {
          goto LABEL_38;
        }
      }
      double v42 = (float)(*(float *)v41 - *(float *)(v16 + 32 * v35));
      BlueFin::SKFVector::AddLen((uint64_t)&v79);
      *(double *)&v79[8 * (int)v80] = v42;
      double v43 = *(float *)v41;
      BlueFin::SKFVector::AddLen((uint64_t)&v76);
      v76[(int)v77] = v43;
LABEL_38:
      ++v33;
    }
    while (v33 != v29);
  }
  if ((a6 & 1) != 0 && fabs(BlueFin::SKFVector::Median((BlueFin::SKFVector *)&v76, v30, v31, v32)) < 15.0) {
    uint64_t v44 = (double **)&v79;
  }
  else {
    uint64_t v44 = &v76;
  }
  int v46 = *((_DWORD *)v44 + 2);
  *(double *)(v16 + 3200) = BlueFin::SKFVector::Median((BlueFin::SKFVector *)v44, v30, v31, v32);
  if (v46 < 3)
  {
    BOOL v45 = 0;
    goto LABEL_54;
  }
  float v47 = BlueFin::GlPeNavGnssResidMon::Design::STUDENT_T_CRIT_VALUES[v46 - 2];
  if (a6) {
    double v48 = 5.0;
  }
  else {
    double v48 = 0.5;
  }
  float v49 = sqrtf((float)v46);
  uint64_t v50 = *((unsigned int *)v44 + 2);
  if ((int)v50 < 1)
  {
    double v55 = 0.0;
  }
  else
  {
    double v51 = (*v44)[1];
    if (v50 != 1)
    {
      uint64_t v52 = v50 - 1;
      double v53 = *v44 + 2;
      do
      {
        double v54 = *v53++;
        double v51 = v51 + v54;
        --v52;
      }
      while (v52);
    }
    double v55 = v51 / (double)(int)v50;
  }
  double v56 = v48 + v55;
  double v57 = sqrt(BlueFin::SKFVector::Var((BlueFin::SKFVector *)v44));
  float v58 = v56 / v57;
  if ((float)(v49 * v58) < (float)-v47) {
    goto LABEL_64;
  }
  if ((int)v50 < 1)
  {
    double v63 = 0.0;
  }
  else
  {
    double v59 = (*v44)[1];
    if (v50 != 1)
    {
      uint64_t v60 = v50 - 1;
      uint64_t v61 = *v44 + 2;
      do
      {
        double v62 = *v61++;
        double v59 = v59 + v62;
        --v60;
      }
      while (v60);
    }
    double v63 = v59 / (double)(int)v50;
  }
  float v64 = (v63 - v48) / v57;
  if ((float)(v49 * v64) <= v47)
  {
    BOOL v45 = 0;
  }
  else
  {
LABEL_64:
    if ((int)v77 >= 2)
    {
      double v66 = fabs(v76[1]);
      LODWORD(v65) = 1;
      uint64_t v67 = 2;
      do
      {
        double v68 = fabs(v76[v67]);
        if (v66 > v68)
        {
          double v66 = v68;
          LODWORD(v65) = v67;
        }
        ++v67;
      }
      while (v77 + 1 != v67);
      uint64_t v65 = (int)v65;
    }
    else
    {
      uint64_t v65 = 1;
    }
    double v69 = v76[v65];
    if (v69 < 0.0) {
      double v69 = -v69;
    }
    BOOL v45 = v69 > v48;
  }
  *(unsigned char *)(v16 + 3208) = v45;
LABEL_76:
  *(unsigned char *)(v16 + 3217) = (int)(v29 - *(unsigned __int8 *)(v16 + 3216)) < -2;
  *(unsigned char *)(v16 + 3216) = v29;
  if (a3 <= 0x5DB)
  {
    *(_DWORD *)(v16 + 3212) = a2;
    uint64_t v70 = -3200;
    do
    {
      uint64_t v71 = a4 + v70;
      uint64_t v72 = v16 + v70;
      float v73 = *(float *)(a4 + v70 + 3200);
      *(void *)(v16 + v70 + 3204) = *(void *)(a4 + v70 + 3204);
      *(_WORD *)(v72 + 3212) = *(_WORD *)(a4 + v70 + 3212);
      *(_DWORD *)(v72 + 3216) = *(_DWORD *)(a4 + v70 + 3216);
      if (a4 != v16)
      {
        *(unsigned char *)(v72 + 3220) = *(unsigned char *)(v71 + 3220);
        *(_DWORD *)(v72 + 3224) = *(_DWORD *)(v71 + 3224);
        *(_WORD *)(v72 + 3228) = *(_WORD *)(v71 + 3228);
      }
      if (v45) {
        double v74 = *(double *)(v16 + 3200);
      }
      else {
        double v74 = 0.0;
      }
      float v75 = v74;
      *(float *)(v72 + 3200) = v73 - v75;
      v70 += 32;
    }
    while (v70);
  }
}

void *BlueFin::GlPeSubsetsKf::GlPeSubsetsKf(void *this)
{
  uint64_t v1 = 0;
  *this = this + 4;
  this[1] = this + 4;
  this[2] = this + 344;
  int32x4_t v2 = vdupq_n_s32(0x43C80000u);
  do
  {
    uint64_t v3 = *this + v1;
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 36) = 0uLL;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = v3 + 36;
    *(unsigned char *)(v3 + 32) = 19;
    *(_OWORD *)(v3 + 52) = 0uLL;
    *(_OWORD *)(v3 + 68) = 0uLL;
    *(_OWORD *)(v3 + 84) = 0uLL;
    *(_OWORD *)(v3 + 100) = 0uLL;
    *(_OWORD *)(v3 + 112) = 0uLL;
    *(int32x4_t *)(v3 + 128) = v2;
    *(int32x4_t *)(v3 + 144) = v2;
    v1 += 160;
  }
  while (v1 != 2720);
  return this;
}

unsigned __int8 *BlueFin::GlPeFixStatus::UpdateSvAzEl(unsigned __int8 *this)
{
  if (*((__int16 *)this + 22) >= 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    uint64_t v3 = *((void *)this + 979) + 32;
    uint64_t v4 = BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
    double v5 = this + 54;
    do
    {
      unsigned __int8 v9 = *((unsigned char *)&BlueFin::GlImplGnss::m_aucFromImplSvIdToEnabledSvId + 256 * v4 + *((unsigned __int8 *)v5 - 5));
      if (v9 - 1 <= 0xBB)
      {
        this = BlueFin::GlPeSatAidInfo::GetAidBySvId(v3, &v9);
        uint64_t v4 = BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion;
        if (this)
        {
          int v6 = *((unsigned __int16 *)this + 37);
          *(v5 - 1) = v6;
          int v7 = *((unsigned __int16 *)this + 36);
          if (v7 == 360) {
            int v7 = 0;
          }
          *double v5 = v7;
          if (v6 == 1 && v7 == 0) {
            *(v5 - 1) = 2;
          }
        }
        else
        {
          *(_DWORD *)(v5 - 1) = 1;
        }
      }
      ++v2;
      v5 += 20;
    }
    while (v2 < *((__int16 *)v1 + 22));
  }
  return this;
}

double BlueFin::GlPeFixStatus::UpdateAccumDist(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(_DWORD *)(a1 + 7076);
  BOOL v6 = v4 != 6 && v4 != 1;
  long long v10 = *(_OWORD *)(a1 + 4072);
  uint64_t v11 = 0;
  BOOL v7 = *(unsigned __int8 *)(a1 + 4192) == 1;
  double v9 = *(double *)(a1 + 4200) * 0.5144444;
  BlueFin::GlPeAsstMgr::UpdateAccumDist((int *)a1, (uint64_t)&v10, a2, a3, a4, v7, &v9, v6, *(_DWORD *)(a1 + 4064));
  return result;
}

uint64_t BlueFin::GlPeLocationHubCb::OnDataToAsic(BlueFin::GlPeLocationHubCb *this, unsigned __int8 *a2, __int16 a3)
{
  return (*(uint64_t (**)(void, unsigned __int8 *, void))(**(void **)(*((void *)this + 1) + 112)
                                                                      + 16))(*(void *)(*((void *)this + 1) + 112), a2, a3);
}

uint64_t BlueFin::GlPeLocationHubCb::OnGetTime(BlueFin::GlPeLocationHubCb *this)
{
  return *(unsigned int *)(BlueFin::GlUtils::m_pInstance + 1092);
}

uint64_t BlueFin::GlPeLocationHubCb::OnTimerSet(uint64_t this, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(v2 + 168) = v2;
    this = BlueFin::GlTimer::arm((BlueFin::GlTimer *)(v2 + 136), 55, 0, a2);
    *(unsigned char *)(v2 + 160) = 1;
  }
  return this;
}

uint64_t BlueFin::GlPeLocationHubCb::OnLog(uint64_t a1, int a2, const char *a3)
{
  switch(a2)
  {
    case 1:
      uint64_t v4 = 15;
      break;
    case 4:
      uint64_t v4 = 11;
      break;
    case 2:
      uint64_t v4 = 14;
      break;
    default:
      (*(void (**)(uint64_t, uint64_t, const char *, const char *, uint64_t))(*(void *)a1 + 72))(a1, 2, "Using Wrong loggging level", "/Library/Caches/com.apple.xbs/Sources/FIREGPS7/proprietary/deliverables/gll_dev/glposeng/req_mgr/glpe_location_hub_mgr.cpp", 74);
      uint64_t v4 = 8;
      break;
  }
  return BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, v4, "%s", a3);
}

uint64_t BlueFin::GlPeLocationHubCb::OnLhStart(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v4 + 200))
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    uint64_t v4 = *(void *)(a1 + 8);
  }
  uint64_t v5 = *(void *)(v4 + 128);
  uint64_t v6 = *(unsigned int *)(v5 + 88);
  if (v6 > 0x22) {
    goto LABEL_16;
  }
  if (((1 << v6) & 0x255504C40) != 0)
  {
    BOOL v7 = 1;
    goto LABEL_6;
  }
  if (v6 == 34) {
    BOOL v7 = (*(unsigned char *)(v5 + 92) & 3) != 0;
  }
  else {
LABEL_16:
  }
    BOOL v7 = 0;
LABEL_6:
  (*(void (**)(uint64_t, BOOL))(*(void *)a2 + 40))(a2, v7);
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 128);
  if (*(unsigned char *)(v8 + 11567))
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 64))(a2);
    uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 128);
  }
  uint64_t v9 = *(unsigned __int8 *)(v8 + 156);
  uint64_t v12 = v8 + 144;
  int v10 = *(_DWORD *)(v8 + 144);
  int v11 = *(_DWORD *)(v12 + 4);
  unsigned int v13 = *(unsigned char *)(v12 + 4) == 0xFF;
  if ((~v11 & 0x7F) == 0) {
    v13 |= 2u;
  }
  if ((~v11 & 0xF) != 0) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = v13 | 4;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v9, 4294959103, v14, (v10 << 22 >> 31) & 0xF);
  return 1;
}

uint64_t BlueFin::GlPeLocationHubCb::OnResource(uint64_t result, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(result + 8) + 112);
    if (a3)
    {
      uint64_t v4 = *(uint64_t (**)(void, void))(v3 + 72);
      if (v4 && !*(unsigned char *)(v3 + 296))
      {
        double result = v4(*(void *)(v3 + 8), 0);
        if (!result) {
          *(unsigned char *)(v3 + 296) = 1;
        }
      }
    }
    else
    {
      uint64_t v5 = *(uint64_t (**)(void, void))(v3 + 80);
      if (v5)
      {
        double result = v5(*(void *)(v3 + 8), 0);
        *(unsigned char *)(v3 + 296) = 0;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeLocationHubCb::OnLhStop(uint64_t result, int a2, const char *a3, const char *a4, int a5)
{
  if (a2)
  {
    uint64_t v5 = result;
    BlueFin::GlUtils::SysLogForce((BlueFin::GlUtils *)BlueFin::GlUtils::m_pInstance, 2, "LH FAILED: %s AT %s:%d\n", a3, a4, a5);
    uint64_t v6 = (BlueFin::GlQueue *)(*(void *)(*(void *)(v5 + 8) + 120) + 126184);
    return BlueFin::GlQueue::putFIFO(v6, 67, 0);
  }
  return result;
}

uint64_t BlueFin::GlPeLocationHubCb::OnPatchOpen(BlueFin::GlPeLocationHubCb *this)
{
  return 1;
}

uint64_t BlueFin::GlPeLocationHubCb::OnPatchRead(BlueFin::GlPeLocationHubCb *this, unsigned __int8 *a2, int a3)
{
  int v8 = a3;
  uint64_t v3 = *(void *)(*((void *)this + 1) + 112);
  uint64_t v4 = *(uint64_t (**)(void, unsigned __int8 *, int *))(v3 + 264);
  if (v4)
  {
    int v5 = v4(*(void *)(v3 + 8), a2, &v8);
    __int16 v6 = v8;
    if (!v5) {
      return -1;
    }
  }
  else
  {
    return -1;
  }
  return v6;
}

uint64_t BlueFin::GlPeLocationHubCb::OnPatchClose(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 8) + 112);
  uint64_t v2 = *(uint64_t (**)(void, void, void))(v1 + 264);
  if (v2) {
    return v2(*(void *)(v1 + 8), 0, 0);
  }
  return this;
}

uint64_t BlueFin::GlPeLocationHubCb::OnFailSafeOpen(BlueFin::GlPeLocationHubCb *this)
{
  return 0;
}

uint64_t BlueFin::GlPeLocationHubCb::OnGnssTurnedOn(BlueFin::GlPeLocationHubCb *this, int a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 120);
  uint64_t v3 = (BlueFin::GlQueue *)(v2 + 126184);
  if (a2)
  {
    uint64_t result = BlueFin::GlQueue::putFIFO(v3, 52, 0);
    *(unsigned char *)(v2 + 126254) = 1;
  }
  else
  {
    return BlueFin::GlQueue::putFIFO(v3, 54, 0);
  }
  return result;
}

__int16 *BlueFin::GlPeLocationHubCb::OnGnssData(__int16 *this, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int16 v3 = a3;
  uint64_t v4 = a2;
  int v5 = this;
  if (a3 >= 0x10D)
  {
    if ((__int16)a3 >= 1)
    {
      do
      {
        if ((__int16)v3 >= 268) {
          int v7 = 268;
        }
        else {
          int v7 = (__int16)v3;
        }
        unsigned int v8 = v3;
        BlueFin::GlReqSm::ReceiveChipData((BlueFin::GlReqSm *)(*(void *)(*((void *)v5 + 1) + 120) + 126144), v4, v7);
        this = BlueFin::GlReqSm::ProcessChipData((__int16 *)(*(void *)(*((void *)v5 + 1) + 120) + 126144), v9);
        v4 += 268;
        v3 -= 268;
      }
      while (v8 > 0x10C);
    }
  }
  else
  {
    __int16 v6 = (BlueFin::GlReqSm *)(*(void *)(*((void *)this + 1) + 120) + 126144);
    return (__int16 *)BlueFin::GlReqSm::ReceiveChipData(v6, a2, (__int16)a3);
  }
  return this;
}

uint64_t BlueFin::GlPeLocationHubCb::OnSensorData(uint64_t this, unsigned __int8 *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(this + 8);
    uint64_t v5 = a3;
    int v6 = *(_DWORD *)(v4 + 204);
    while (2)
    {
      unsigned int v8 = *a2++;
      unsigned int v7 = v8;
      switch(v6)
      {
        case 0:
          if (v7 == 91)
          {
            int v6 = 2;
            goto LABEL_40;
          }
          int v6 = 0;
          goto LABEL_41;
        case 1:
          if (v7 == 93) {
            goto LABEL_16;
          }
          int v6 = 1;
          goto LABEL_41;
        case 2:
          if (v7 <= 0x14 && (v7 & 3) == 0)
          {
            *(_WORD *)(v4 + 208) = v7 - 3;
            *(_WORD *)(v4 + 210) = 0;
            *(unsigned char *)(v4 + 212) = v7;
            int v6 = 3;
          }
          else
          {
LABEL_16:
            int v6 = 0;
          }
          goto LABEL_40;
        case 3:
          *(unsigned char *)(v4 + 212) += v7;
          uint64_t v12 = *(unsigned __int16 *)(v4 + 210);
          *(_WORD *)(v4 + 210) = v12 + 1;
          *(unsigned char *)(v4 + v12 + 213) = v7;
          if (*(unsigned __int16 *)(v4 + 208) == (unsigned __int16)(v12 + 1))
          {
            int v6 = 4;
            goto LABEL_40;
          }
          int v6 = 3;
          goto LABEL_41;
        case 4:
          if (*(unsigned __int8 *)(v4 + 212) != v7) {
            goto LABEL_39;
          }
          int v17 = 1;
          unsigned int v18 = v19;
          unsigned int v9 = *(unsigned __int8 *)(v4 + 213);
          if (v9 > 0xF)
          {
            switch(v9)
            {
              case 0x10u:
LABEL_26:
                v19[0] = 2;
                int v10 = 1;
                break;
              case 0x13u:
                int v10 = 0;
                v19[0] = 8;
                break;
              case 0x50u:
                int v10 = 0;
                v19[0] = 10;
                break;
              default:
                goto LABEL_39;
            }
LABEL_31:
            v19[1] = *(_DWORD *)(v4 + 214);
            int v13 = *(unsigned __int16 *)(v4 + 208);
            if (v13 != 5)
            {
              if (v13 == 9)
              {
                LODWORD(v20) = *(_DWORD *)(v4 + 218);
              }
              else
              {
                if (v13 != 17) {
                  goto LABEL_39;
                }
                if (v10)
                {
                  float v14 = (float)(*(float *)(v4 + 218) * -180.0) / 3.14159265;
                  *(float *)&uint64_t v20 = v14;
                  float v15 = (float)(*(float *)(v4 + 222) * -180.0) / 3.14159265;
                  *((float *)&v20 + 1) = v15;
                  float v16 = (float)(*(float *)(v4 + 226) * -180.0) / 3.14159265;
                  float v21 = v16;
                }
                else
                {
                  uint64_t v20 = *(void *)(v4 + 218);
                  float v21 = *(float *)(v4 + 226);
                }
              }
            }
            this = (*(uint64_t (**)(void, int *))(**(void **)(v4 + 120) + 344))(*(void *)(v4 + 120), &v17);
          }
          else
          {
            switch(*(unsigned char *)(v4 + 213))
            {
              case 1:
                int v10 = 0;
                v19[0] = 0;
                goto LABEL_31;
              case 2:
                int v10 = 0;
                v19[0] = 1;
                goto LABEL_31;
              case 3:
                int v10 = 0;
                v19[0] = 3;
                goto LABEL_31;
              case 4:
                goto LABEL_26;
              case 6:
                int v10 = 0;
                v19[0] = 4;
                goto LABEL_31;
              default:
                break;
            }
          }
LABEL_39:
          int v6 = 1;
LABEL_40:
          *(_DWORD *)(v4 + 204) = v6;
LABEL_41:
          if (!--v5) {
            return this;
          }
          continue;
        default:
          goto LABEL_41;
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeLocationHubCb::OnGnssControl(BlueFin::GlPeLocationHubCb *this, unsigned __int8 *a2)
{
  return GlCustomLog(14, "\tOnGnssControl - ignored\n");
}

void BlueFin::GlPeLocationHubMgr::~GlPeLocationHubMgr(BlueFin::GlPeLocationHubMgr *this)
{
}

void BlueFin::GlPeLocationHubMgr::StartInitializationProcess(BlueFin::GlPeLocationHubMgr *this)
{
}

void BlueFin::GlPeLocationHubCb::~GlPeLocationHubCb(BlueFin::GlPeLocationHubCb *this)
{
}

double BlueFin::GlPeMeasFilter::UpdateRng(uint64_t a1, unsigned int a2, unsigned __int8 *a3, int a4, int a5, char a6, double result, double a8)
{
  double v8 = *(double *)(a1 + 24);
  if (a5)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 8);
    unsigned int v10 = v9 + 500;
    if (v9 + 500 >= a2) {
      int v11 = 0;
    }
    else {
      int v11 = *(_DWORD *)(a1 + 8);
    }
    double v12 = -(double)(a2 - v11);
    unsigned int v13 = *a3;
    if (v13 < 0x42) {
      char v14 = 1;
    }
    else {
      char v14 = a6;
    }
    if (v13 >= 0x34) {
      a6 = v14;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 36))
    {
      *(void *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 12) = 0;
      *(_DWORD *)(a1 + 16) = 1;
      *(void *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 36) = 0;
      return result;
    }
    unsigned int v9 = *(_DWORD *)(a1 + 8);
    unsigned int v10 = v9 + 500;
    double v12 = -1000.0;
  }
  double v15 = result * 1000.0;
  uint64_t result = v12 * a8;
  int v16 = *(_DWORD *)(a1 + 16);
  if (v16 > 59) {
    char v17 = 1;
  }
  else {
    char v17 = a6;
  }
  BOOL v18 = v10 < a2 && v9 + 5000 >= a2;
  if (!v18 || (v17 & 1) != 0 || (a4 - *(_DWORD *)(a1 + 32)) >= 0x9C5)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 12) = 0;
    int v16 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 36) = 0;
    if (v17) {
      return result;
    }
    if (v9 >= a2) {
      double v8 = 0.0;
    }
    goto LABEL_28;
  }
  if (v16 > 2)
  {
    double v21 = result * 299792458.0 / 1000.0;
    if ((a5 & 1) == 0) {
      double v21 = v21 + v8 * -299792458.0 / 1000.0;
    }
    float v22 = v21;
    if (v22 <= 262140.0)
    {
      if (v22 >= -262140.0) {
        goto LABEL_40;
      }
      float v23 = 524290.0;
    }
    else
    {
      float v23 = -524290.0;
    }
    float v22 = v22 + v23;
LABEL_40:
    float v24 = (float)(v22 * -1000.0) / 299792458.0;
    double v25 = *(double *)a1 + v24;
    double v26 = 1.0;
    if (v25 <= 1.0)
    {
      if (v25 >= 0.0)
      {
LABEL_44:
        double v27 = v15 - floor(v15);
        if (vabdd_f64(v27, v25) > 0.5)
        {
          if (v27 <= v25) {
            double v27 = v27 + 1.0;
          }
          else {
            double v25 = v25 + 1.0;
          }
        }
        double v19 = v25 * (float)(1.0 - (float)(1.0 / (float)v16)) + (float)(1.0 / (float)v16) * v27;
        if (v19 >= 1.0) {
          double v19 = v19 + -1.0;
        }
        goto LABEL_29;
      }
    }
    else
    {
      double v26 = -1.0;
    }
    double v25 = v25 + v26;
    goto LABEL_44;
  }
LABEL_28:
  double v19 = v15 - floor(v15);
LABEL_29:
  *(double *)a1 = v19;
  *(_DWORD *)(a1 + 8) = a2;
  double v20 = -0.0;
  if (a5) {
    double v20 = v8;
  }
  uint64_t result = result + v20;
  *(double *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 36) = a5;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 16) = v16 + 1;
  return result;
}

char *BlueFin::GlPeNmeaGen::FormatNmeaGNS(uint64_t a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  int v6 = (char *)this + (int)a4 - 1;
  *(unsigned char *)this = 0;
  uint64_t v7 = *(__int16 *)(a2 + 4274);
  if (!*(unsigned char *)(a2 + 4048) || (*(unsigned char *)(a2 + 4068) & 8) != 0)
  {
    if (v6 > (char *)this) {
      double v26 = (char *)(int)a4;
    }
    else {
      double v26 = 0;
    }
    BOOL v28 = (BlueFin::GlFormat *)((char *)this
                              + BlueFin::GlFormat::glsnprintf(this, v26, "$GNGNS,%s,", a4, a1 + 1767));
    uint64_t v29 = v6 + 1;
    if (v6 <= (char *)v28) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = (char *)(v6 + 1 - (char *)v28);
    }
    if (*(unsigned char *)(a2 + 4049))
    {
      uint64_t v63 = *(void *)(a2 + 4096);
      double v65 = *(float *)(a2 + 4112);
      uint64_t v61 = *(void *)(a2 + 4120);
      uint64_t v59 = v7;
      uint64_t v31 = ",,,,%c%c%c%c%c%c,%02d,%.1f,%.1f,%.1f,,";
    }
    else
    {
      uint64_t v61 = *(void *)(a2 + 4120);
      uint64_t v59 = v7;
      uint64_t v31 = ",,,,%c%c%c%c%c%c,%02d,%.1f,,,,";
    }
    unsigned int v32 = BlueFin::GlFormat::glsnprintf(v28, v30, (unsigned __int8 *)v31, v27, 78, 78, 78, 78, 78, 78, v59, v61, v63, *(void *)&v65);
  }
  else
  {
    double v8 = *(double *)(a2 + 4072);
    double v9 = fabs(v8);
    double v10 = fabs(*(double *)(a2 + 4080));
    uint64_t v11 = (int)v9;
    uint64_t v12 = (int)v10;
    double v13 = (v9 - (double)(int)v11) * 60.0;
    uint64_t v14 = (int)v13;
    double v15 = (v13 - (double)(int)v14) * 1000000.0;
    double v16 = (v10 - (double)(int)v12) * 60.0;
    uint64_t v70 = (int)v16;
    uint64_t v71 = v12;
    double v17 = (v16 - (double)(int)v70) * 1000000.0;
    uint64_t v18 = 78;
    if ((int)v7 < 1)
    {
      uint64_t v20 = 69;
      uint64_t v67 = 78;
      uint64_t v68 = 78;
      uint64_t v25 = 78;
      uint64_t v69 = 78;
    }
    else
    {
      if (*(void *)(a2 + 5624)) {
        unsigned int v19 = 68;
      }
      else {
        unsigned int v19 = 78;
      }
      if (*(void *)(a2 + 4280)) {
        uint64_t v20 = 65;
      }
      else {
        uint64_t v20 = v19;
      }
      if (*(void *)(a2 + 4296)) {
        uint64_t v21 = 65;
      }
      else {
        uint64_t v21 = 78;
      }
      uint64_t v69 = v21;
      if (*(void *)(a2 + 4328)) {
        uint64_t v22 = 65;
      }
      else {
        uint64_t v22 = 78;
      }
      if (*(void *)(a2 + 4320)) {
        uint64_t v23 = 65;
      }
      else {
        uint64_t v23 = 78;
      }
      uint64_t v68 = v23;
      if (*(void *)(a2 + 4304)) {
        uint64_t v24 = 65;
      }
      else {
        uint64_t v24 = 78;
      }
      uint64_t v67 = v24;
      if (*(void *)(a2 + 4336)) {
        uint64_t v25 = 65;
      }
      else {
        uint64_t v25 = 78;
      }
      uint64_t v18 = v22;
    }
    uint64_t v34 = (int)v17;
    int v35 = *(_DWORD *)(a2 + 4060);
    if (v35 == 7 || v35 == 4) {
      uint64_t v20 = 77;
    }
    if (v6 > (char *)this) {
      double v36 = (char *)(int)a4;
    }
    else {
      double v36 = 0;
    }
    uint64_t v53 = v11;
    uint64_t v37 = 83;
    if (v8 >= 0.0) {
      uint64_t v37 = 78;
    }
    unsigned int v38 = BlueFin::GlFormat::glsnprintf(this, v36, "$GNGNS,%s,%02d%02d.%06d,%c,", a4, a1 + 1767, v53, v14, (int)v15, v37);
    unsigned int v40 = (char *)this + v38;
    uint64_t v29 = v6 + 1;
    if (v6 <= v40) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = (char *)(v6 + 1 - v40);
    }
    uint64_t v42 = 87;
    if (*(double *)(a2 + 4080) >= 0.0) {
      uint64_t v42 = 69;
    }
    uint64_t v44 = (BlueFin::GlFormat *)&v40[BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v38), v41, "%03d%02d.%06d,%c,%c%c%c%c%c%c,%02d,", v39, v71, v70, v34, v42, v20, v69, v18, v68, v67, v25, v7)];
    if (v6 <= (char *)v44) {
      BOOL v45 = 0;
    }
    else {
      BOOL v45 = (char *)(v29 - (char *)v44);
    }
    BOOL v28 = (BlueFin::GlFormat *)((char *)v44
                              + BlueFin::GlFormat::glsnprintf(v44, v45, "%.1f,%.1f,%.1f,", v43, *(void *)(a2 + 4120), *(void *)(a2 + 4096), *(float *)(a2 + 4112)));
    if (v6 <= (char *)v28) {
      float v47 = 0;
    }
    else {
      float v47 = (char *)(v29 - (char *)v28);
    }
    if (*(void *)(a2 + 5624)) {
      unsigned int v32 = BlueFin::GlFormat::glsnprintf(v28, v47, "%.1f,%04d", v46, *(float *)(a2 + 7300), *(unsigned __int16 *)(a2 + 7296), v55, v56, v57, v58, v60, v62, v64, v66);
    }
    else {
      unsigned int v32 = BlueFin::GlFormat::glsnprintf(v28, v47, ",", v46, v52, v54, v55, v56, v57, v58, v60, v62, v64, v66);
    }
  }
  double v48 = (BlueFin::GlFormat *)((char *)v28 + v32);
  if (v6 <= (char *)v48) {
    float v49 = 0;
  }
  else {
    float v49 = (char *)(v29 - (char *)v48);
  }
  BlueFin::GlFormat::glsnprintf(v48, v49, ",%c", v33, 86);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v6, v50);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaFTS(uint64_t a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  uint64_t v7 = (char *)this + (int)a4;
  double v8 = v7 - 1;
  if (v7 - 1 <= (char *)this) {
    double v9 = 0;
  }
  else {
    double v9 = (char *)(int)a4;
  }
  unsigned int v10 = BlueFin::GlFormat::glsnprintf(this, v9, "$PGLOR,%d,FTS,", a4, 11);
  int v12 = *(unsigned __int16 *)(a2 + 12);
  if ((unsigned __int16)(v12 - 1) >= 0x20u)
  {
    if ((v12 - 52) >= 0xE)
    {
      if ((v12 - 33) >= 0x13)
      {
        if ((v12 - 66) >= 0xA)
        {
          if ((v12 - 76) >= 0x3F)
          {
            if ((v12 - 139) >= 0x24)
            {
              if ((v12 - 175) >= 0xE) {
                uint64_t v13 = 120;
              }
              else {
                uint64_t v13 = 78;
              }
            }
            else
            {
              uint64_t v13 = 69;
            }
          }
          else
          {
            uint64_t v13 = 66;
          }
        }
        else
        {
          uint64_t v13 = 81;
        }
      }
      else
      {
        uint64_t v13 = 83;
      }
    }
    else
    {
      uint64_t v13 = 82;
    }
  }
  else
  {
    uint64_t v13 = 71;
  }
  uint64_t v14 = (BlueFin::GlFormat *)((char *)this + v10);
  int v15 = *(unsigned __int8 *)(a2 + 320);
  if (v15 == 3)
  {
    uint64_t v13 = 65;
  }
  else if (v15 == 4)
  {
    uint64_t v13 = 67;
  }
  if (*(_DWORD *)a2)
  {
    if ((v12 - 52) > 0xDu) {
      uint64_t v16 = BlueFin::GlSvId::s_aucSvId2prn[*(_WORD *)(a2 + 12)];
    }
    else {
      uint64_t v16 = (char)(v12 - 59);
    }
    if (v8 <= (char *)v14) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = (char *)(v7 - (char *)v14);
    }
    double v27 = (BlueFin::GlFormat *)((char *)v14
                              + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v10), v25, "%d,", v11, v16));
    if (*(_WORD *)(a2 + 14) && *(_WORD *)(a2 + 206))
    {
      if (v8 <= (char *)v27) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = (char *)(v7 - (char *)v27);
      }
      double v29 = *(double *)(a2 + 56);
      if (*(_WORD *)(a2 + 16))
      {
        unsigned int v30 = BlueFin::GlFormat::glsnprintf(v27, v28, "%.1lf,%.1lf,dBm,%.1lf,%.1lf,%.1lf,%.1lf,dBHz,", v26, *(double *)(a2 + 24) + v29, v29 + *(double *)(a2 + 32), v29 + *(double *)(a2 + 40), v29 + *(double *)(a2 + 48), *(void *)(a2 + 40), *(void *)(a2 + 48));
        goto LABEL_97;
      }
      double v129 = v29 + *(double *)(a2 + 40);
      uint64_t v133 = *(void *)(a2 + 40);
      double v119 = *(double *)(a2 + 24) + v29;
      unsigned int v32 = "%.1lf,,dBm,%.1lf,,%.1lf,,dBHz,";
    }
    else
    {
      if (v8 <= (char *)v27) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = (char *)(v7 - (char *)v27);
      }
      unsigned int v32 = ",,dBm,,,,,dBHz,";
    }
    unsigned int v30 = BlueFin::GlFormat::glsnprintf(v27, v28, (unsigned __int8 *)v32, v26, *(void *)&v119, *(void *)&v129, v133);
LABEL_97:
    double v51 = (BlueFin::GlFormat *)((char *)v27 + v30);
    if (v8 <= (char *)v51) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = (char *)(v7 - (char *)v51);
    }
    if (*(_WORD *)(a2 + 64)) {
      unsigned int v53 = BlueFin::GlFormat::glsnprintf(v51, v52, "%.1lf,%.1lf,", v31, *(double *)(a2 + 72) * 1000000000.0, *(double *)(a2 + 80) * 1000000000.0);
    }
    else {
      unsigned int v53 = BlueFin::GlFormat::glsnprintf(v51, v52, ",,", v31, v120, v131);
    }
    uint64_t v55 = (BlueFin::GlFormat *)((char *)v51 + v53);
    if (v8 <= (char *)v55) {
      uint64_t v56 = 0;
    }
    else {
      uint64_t v56 = (char *)(v7 - (char *)v55);
    }
    if (*(_WORD *)(a2 + 120)) {
      unsigned int v57 = BlueFin::GlFormat::glsnprintf(v55, v56, "%.1lf,", v54, *(double *)(a2 + 128) * 1000000.0);
    }
    else {
      unsigned int v57 = BlueFin::GlFormat::glsnprintf(v55, v56, ",", v54, v123);
    }
    uint64_t v59 = (BlueFin::GlFormat *)((char *)v55 + v57);
    int v60 = *(unsigned __int8 *)(*(void *)(a1 + 1832) + 136);
    unsigned int v61 = *(_DWORD *)(a2 + 100);
    if (*(unsigned char *)(*(void *)(a1 + 1832) + 136))
    {
      GlCustomLog(20, "<FTCW> CNTIN was requested, etCntInStatus (%d) \n", *(_DWORD *)(a2 + 100));
      unsigned int v61 = *(_DWORD *)(a2 + 100);
      if (v61) {
        int v60 = 0;
      }
      else {
        int v60 = 3;
      }
    }
    if (v8 <= (char *)v59) {
      uint64_t v62 = 0;
    }
    else {
      uint64_t v62 = (char *)(v7 - (char *)v59);
    }
    if (v61 > 5) {
      unsigned int v63 = BlueFin::GlFormat::glsnprintf(v59, v62, ",", v58, v124);
    }
    else {
      unsigned int v63 = BlueFin::GlFormat::glsnprintf(v59, v62, "%s,", v58, (&off_2655E0208[v60])[v61]);
    }
    double v65 = (char *)v59 + v63;
    if (v8 <= v65) {
      uint64_t v66 = 0;
    }
    else {
      uint64_t v66 = (char *)(v7 - v65);
    }
    if (*(_WORD *)(a2 + 104)) {
      int v67 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v59 + v63), v66, "%.1lf,", v64, *(double *)(a2 + 112) * 1000000000.0);
    }
    else {
      int v67 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v59 + v63), v66, ",", v64, v125);
    }
    uint64_t v69 = (BlueFin::GlFormat *)&v65[v67];
    uint64_t v70 = *(unsigned int *)(a2 + 96);
    if (v8 <= (char *)v69) {
      uint64_t v71 = 0;
    }
    else {
      uint64_t v71 = (char *)(v7 - (char *)v69);
    }
    if (v70 && *(_WORD *)(a2 + 14)) {
      unsigned int v72 = BlueFin::GlFormat::glsnprintf(v69, v71, "%d,%d,%.2lf,", v68, *(unsigned int *)(a2 + 92), v70, 100.0 - (double)*(int *)(a2 + 92) * 100.0 / (double)(int)v70);
    }
    else {
      unsigned int v72 = BlueFin::GlFormat::glsnprintf(v69, v71, ",,,", v68, v126, v132, v134);
    }
    double v74 = (BlueFin::GlFormat *)((char *)v69 + v72);
    if (v8 <= (char *)v74) {
      float v75 = 0;
    }
    else {
      float v75 = (char *)(v7 - (char *)v74);
    }
    uint64_t v77 = (BlueFin::GlFormat *)((char *)v74
                              + BlueFin::GlFormat::glsnprintf(v74, v75, "%u,", v73, *(unsigned int *)(a2 + 200)));
    int v78 = *(unsigned __int16 *)(a2 + 12);
    unsigned int v79 = (unsigned __int16)(v78 - 1);
    if (*(unsigned char *)(a2 + 152))
    {
      if (v79 >= 0x20)
      {
        if ((v78 - 52) < 0xE)
        {
          if (v8 <= (char *)v77) {
            uint64_t v80 = 0;
          }
          else {
            uint64_t v80 = (char *)(v7 - (char *)v77);
          }
          long long v81 = ",,";
          goto LABEL_156;
        }
        if ((unsigned __int16)(v78 - 52) > 0xFFECu
          || (unsigned __int16)(v78 - 76) > 0xFFF5u
          || (unsigned __int16)(v78 - 139) >= 0x24u)
        {
          goto LABEL_157;
        }
      }
    }
    else if (v79 >= 0x20)
    {
      if ((v78 - 52) < 0xE)
      {
        if (v8 <= (char *)v77) {
          uint64_t v80 = 0;
        }
        else {
          uint64_t v80 = (char *)(v7 - (char *)v77);
        }
        float v82 = *(float *)(a2 + 164);
        float v83 = *(float *)(a2 + 168);
        goto LABEL_155;
      }
      if ((v78 - 33) < 0x13 || (unsigned __int16)(v78 - 66) < 0xAu) {
        goto LABEL_244;
      }
      if ((v78 - 76) < 0x3F)
      {
        if (v8 <= (char *)v77) {
          uint64_t v80 = 0;
        }
        else {
          uint64_t v80 = (char *)(v7 - (char *)v77);
        }
        float v82 = *(float *)(a2 + 172);
        float v83 = *(float *)(a2 + 176);
        goto LABEL_155;
      }
      if ((v78 - 139) > 0x23)
      {
LABEL_244:
        if (v8 <= (char *)v77) {
          uint64_t v80 = 0;
        }
        else {
          uint64_t v80 = (char *)(v7 - (char *)v77);
        }
        long long v81 = ",";
        goto LABEL_156;
      }
    }
    if (v8 <= (char *)v77) {
      uint64_t v80 = 0;
    }
    else {
      uint64_t v80 = (char *)(v7 - (char *)v77);
    }
    float v82 = *(float *)(a2 + 156);
    float v83 = *(float *)(a2 + 160);
LABEL_155:
    double v127 = (float)(v82 + v83);
    long long v81 = "%.1lf,";
LABEL_156:
    uint64_t v77 = (BlueFin::GlFormat *)((char *)v77
                              + BlueFin::GlFormat::glsnprintf(v77, v80, (unsigned __int8 *)v81, v76, *(void *)&v127));
LABEL_157:
    if (v8 <= (char *)v77) {
      unsigned int v84 = 0;
    }
    else {
      unsigned int v84 = (char *)(v7 - (char *)v77);
    }
    uint64_t v86 = (BlueFin::GlFormat *)((char *)v77 + BlueFin::GlFormat::glsnprintf(v77, v84, "%c,", v76, 67));
    if (v8 <= (char *)v86) {
      uint64_t v87 = 0;
    }
    else {
      uint64_t v87 = (char *)(v7 - (char *)v86);
    }
    double v89 = (BlueFin::GlFormat *)((char *)v86
                              + BlueFin::GlFormat::glsnprintf(v86, v87, "%c,", v85, v13));
    int v90 = *(_DWORD *)(a2 + 4);
    if (v90 != 5 && v90 != 3)
    {
      if (v8 <= (char *)v89) {
        unsigned __int8 v94 = 0;
      }
      else {
        unsigned __int8 v94 = (char *)(v7 - (char *)v89);
      }
      unsigned __int8 v95 = ",,";
      unsigned __int16 v96 = v89;
      goto LABEL_193;
    }
    int v91 = *(unsigned __int16 *)(a2 + 304);
    if (v91 == 1)
    {
      if (v8 <= (char *)v89) {
        long long v92 = 0;
      }
      else {
        long long v92 = (char *)(v7 - (char *)v89);
      }
      uint64_t v97 = 80;
    }
    else
    {
      if (v91 == 2)
      {
        if (v8 <= (char *)v89) {
          long long v92 = 0;
        }
        else {
          long long v92 = (char *)(v7 - (char *)v89);
        }
        uint64_t v93 = ",";
        goto LABEL_184;
      }
      if (v8 <= (char *)v89) {
        long long v92 = 0;
      }
      else {
        long long v92 = (char *)(v7 - (char *)v89);
      }
      uint64_t v97 = 70;
    }
    double v128 = *(double *)&v97;
    uint64_t v93 = "%c,";
LABEL_184:
    uint64_t v99 = (BlueFin::GlFormat *)((char *)v89
                              + BlueFin::GlFormat::glsnprintf(v89, v92, (unsigned __int8 *)v93, v88, *(void *)&v128));
    if (v8 <= (char *)v99) {
      char v100 = 0;
    }
    else {
      char v100 = (char *)(v7 - (char *)v99);
    }
    unsigned int v101 = BlueFin::GlFormat::glsnprintf(v99, v100, "%0.1lf,", v98, *(float *)(a2 + 308));
    float v103 = *(float *)(a2 + 312);
    if (v103 == 0.0 && *(_WORD *)(a2 + 304) != 1) {
      goto LABEL_194;
    }
    unsigned __int16 v96 = (BlueFin::GlFormat *)((char *)v99 + v101);
    if (v8 <= (char *)v96) {
      unsigned __int8 v94 = 0;
    }
    else {
      unsigned __int8 v94 = (char *)(v7 - (char *)v96);
    }
    double v128 = v103;
    unsigned __int8 v95 = "%0.1lf";
LABEL_193:
    BlueFin::GlFormat::glsnprintf(v96, v94, (unsigned __int8 *)v95, v88, *(void *)&v128);
LABEL_194:
    return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7 - 1, v102);
  }
  __int16 v136 = 0;
  uint64_t v135 = 0;
  if (v13 == 82)
  {
    unsigned int v17 = v12 - 52;
    LODWORD(v18) = (char)(v12 - 59);
    if (v17 >= 0xE) {
      uint64_t v18 = 4294967288;
    }
    else {
      uint64_t v18 = v18;
    }
    BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)&v135, (char *)0xA, "(%d)", v11, v18);
  }
  if (*(_WORD *)(a2 + 204))
  {
    double v19 = *(double *)(a2 + 224);
    if (v19 >= -118.5 && !*(unsigned char *)(*(void *)(a1 + 1832) + 26014)
      || (double v20 = *(double *)(a2 + 208), v20 == 1.79769313e308)
      || (double v21 = *(double *)(a2 + 216), v21 == 1.79769313e308))
    {
      if (v8 <= (char *)v14) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = (char *)(v7 - (char *)v14);
      }
      unsigned int v23 = BlueFin::GlFormat::glsnprintf(v14, v33, "CW,%.1lf,dBm,,,ppb,%c%s,", v11, *(void *)&v19, v13, &v135);
    }
    else
    {
      if (v8 <= (char *)v14) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = (char *)(v7 - (char *)v14);
      }
      unsigned int v23 = BlueFin::GlFormat::glsnprintf(v14, v22, "CW,%.1lf,dBm,%.0lf,%.1lf,ppb,%c%s,", v11, v19 + 0.05, v20 * 1000000000.0 + 0.5, v21 * 1000000000.0 + 0.05, v13, &v135);
    }
  }
  else
  {
    if (v8 <= (char *)v14) {
      uint64_t v34 = 0;
    }
    else {
      uint64_t v34 = (char *)(v7 - (char *)v14);
    }
    unsigned int v23 = BlueFin::GlFormat::glsnprintf(v14, v34, "CW,,dBm,,,ppb,%c%s,", v11, v13, &v135);
  }
  int v35 = (BlueFin::GlFormat *)((char *)v14 + v23);
  int v36 = *(unsigned __int8 *)(*(void *)(a1 + 1832) + 136);
  unsigned int v37 = *(_DWORD *)(a2 + 100);
  if (*(unsigned char *)(*(void *)(a1 + 1832) + 136))
  {
    GlCustomLog(20, "<FTCW> CNTIN was requested, etCntInStatus (%d) \n", *(_DWORD *)(a2 + 100));
    unsigned int v37 = *(_DWORD *)(a2 + 100);
    if (v37) {
      int v36 = 0;
    }
    else {
      int v36 = 3;
    }
  }
  if (v8 <= (char *)v35) {
    unsigned int v38 = 0;
  }
  else {
    unsigned int v38 = (char *)(v7 - (char *)v35);
  }
  if (v37 > 5) {
    unsigned int v39 = BlueFin::GlFormat::glsnprintf(v35, v38, ",", v24, v118);
  }
  else {
    unsigned int v39 = BlueFin::GlFormat::glsnprintf(v35, v38, "%s,", v24, (&off_2655E0208[v36])[v37]);
  }
  uint64_t v41 = (BlueFin::GlFormat *)((char *)v35 + v39);
  if (*(_WORD *)(a2 + 104))
  {
    if (v8 <= (char *)v41) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = (char *)(v7 - (char *)v41);
    }
    uint64_t v41 = (BlueFin::GlFormat *)((char *)v41
                              + BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)v35 + v39), v42, "%.1lf", v40, *(double *)(a2 + 112) * 1000000000.0));
  }
  if (!*(_WORD *)(a2 + 204))
  {
    if (v8 <= (char *)v41) {
      int v46 = 0;
    }
    else {
      int v46 = (char *)(v7 - (char *)v41);
    }
    float v47 = ",,dBHz,,ppb";
LABEL_213:
    unsigned int v49 = BlueFin::GlFormat::glsnprintf(v41, v46, (unsigned __int8 *)v47, v40, *(void *)&v121, *(void *)&v130);
    goto LABEL_214;
  }
  double v43 = *(double *)(a2 + 208);
  if (v43 != 1.79769313e308 && *(double *)(a2 + 216) != 1.79769313e308)
  {
    int v44 = *(unsigned __int16 *)(a2 + 12);
    if ((v44 - 52) < 0xE || (int v45 = *(unsigned __int8 *)(a2 + 320), v45 == 4))
    {
      if (v8 <= (char *)v41) {
        int v46 = 0;
      }
      else {
        int v46 = (char *)(v7 - (char *)v41);
      }
      double v121 = *(double *)(a2 + 224) + 174.0;
      double v130 = v43 * 1000000000.0 + 0.5;
    }
    else
    {
      double v105 = dbl_263BBCEB0[v45 == 3];
      if ((v44 - 76) < 0x3F) {
        double v105 = 128114.95;
      }
      if (v8 <= (char *)v41) {
        int v46 = 0;
      }
      else {
        int v46 = (char *)(v7 - (char *)v41);
      }
      double v106 = v43 * 1000000000.0 + 0.5;
      if (*(_WORD *)(a2 + 136)) {
        double v105 = 0.0;
      }
      double v121 = *(double *)(a2 + 224) + 174.0;
      double v130 = v106 - v105;
    }
    float v47 = ",%.1lf,dBHz,%.0lf,ppb";
    goto LABEL_213;
  }
  if (v8 <= (char *)v41) {
    double v48 = 0;
  }
  else {
    double v48 = (char *)(v7 - (char *)v41);
  }
  unsigned int v49 = BlueFin::GlFormat::glsnprintf(v41, v48, ",%.1lf,dBHz,,ppb", v40, *(double *)(a2 + 224) + 174.0, *(void *)&v130);
LABEL_214:
  char v107 = (BlueFin::GlFormat *)((char *)v41 + v49);
  int v108 = *(unsigned __int16 *)(a2 + 12);
  unsigned int v109 = v108 - 1;
  if (*(unsigned char *)(a2 + 152))
  {
    if (v8 <= (char *)v107) {
      int32x2_t v110 = 0;
    }
    else {
      int32x2_t v110 = (char *)(v7 - (char *)v107);
    }
    if (v109 >= 0x20 && (v108 - 139) > 0x23) {
      goto LABEL_220;
    }
    goto LABEL_225;
  }
  if (v109 < 0x20) {
    goto LABEL_222;
  }
  if ((v108 - 52) < 0xE)
  {
    if (v8 <= (char *)v107) {
      int32x2_t v110 = 0;
    }
    else {
      int32x2_t v110 = (char *)(v7 - (char *)v107);
    }
    float v112 = *(float *)(a2 + 164);
    float v113 = *(float *)(a2 + 168);
    goto LABEL_226;
  }
  if ((v108 - 33) >= 0x13 && (v108 - 66) >= 0xA)
  {
    if ((v108 - 76) < 0x3F)
    {
      if (v8 <= (char *)v107) {
        int32x2_t v110 = 0;
      }
      else {
        int32x2_t v110 = (char *)(v7 - (char *)v107);
      }
      float v112 = *(float *)(a2 + 172);
      float v113 = *(float *)(a2 + 176);
      goto LABEL_226;
    }
    if ((v108 - 139) <= 0x23)
    {
LABEL_222:
      if (v8 <= (char *)v107) {
        int32x2_t v110 = 0;
      }
      else {
        int32x2_t v110 = (char *)(v7 - (char *)v107);
      }
LABEL_225:
      float v112 = *(float *)(a2 + 156);
      float v113 = *(float *)(a2 + 160);
LABEL_226:
      double v122 = (float)(v112 + v113);
      int v111 = ",%.1lf";
      goto LABEL_227;
    }
  }
  if (v8 <= (char *)v107) {
    int32x2_t v110 = 0;
  }
  else {
    int32x2_t v110 = (char *)(v7 - (char *)v107);
  }
LABEL_220:
  int v111 = ",";
LABEL_227:
  uint64_t v114 = (BlueFin::GlFormat *)((char *)v107
                             + BlueFin::GlFormat::glsnprintf(v107, v110, (unsigned __int8 *)v111, v50, *(void *)&v122));
  if (v8 <= (char *)v114) {
    double v116 = 0;
  }
  else {
    double v116 = (char *)(v7 - (char *)v114);
  }
  BlueFin::GlFormat::glsnprintf(v114, v116, ",%c", v115, 67);
  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v7 - 1, v117);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaSVD(BlueFin::GlPeNmeaGen *this, const BlueFin::GlMePlatfStat *a2, BlueFin::GlFormat *a3, const char *a4)
{
  int v6 = (char *)a3 + (int)a4 - 1;
  *(unsigned char *)a3 = 0;
  uint64_t v7 = *((__int16 *)a2 + 111);
  if ((int)a4 != 1 && v6 >= (char *)a3) {
    double v8 = (char *)(int)a4;
  }
  else {
    double v8 = 0;
  }
  unsigned int v9 = BlueFin::GlFormat::glsnprintf(a3, v8, "$PGLOR,%d,SVD,%d", a4, 0, v7);
  if (*((__int16 *)a2 + 111) >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (BlueFin::GlFormat *)((char *)a3 + v9);
    uint64_t v14 = (__int16 *)((char *)a2 + 226);
    do
    {
      uint64_t v15 = *(v14 - 1);
      if ((*(v14 - 1) - 52) > 0xDu) {
        uint64_t v16 = BlueFin::GlSvId::s_aucSvId2prn[v15];
      }
      else {
        uint64_t v16 = (char)(v15 - 59);
      }
      if (v6 <= (char *)v13) {
        unsigned int v17 = 0;
      }
      else {
        unsigned int v17 = (char *)(v6 + 1 - (char *)v13);
      }
      uint64_t v18 = *v14;
      v14 += 2;
      uint64_t v13 = (BlueFin::GlFormat *)((char *)v13
                                + BlueFin::GlFormat::glsnprintf(v13, v17, ",%02d,%d", v11, v16, v18));
      ++v12;
    }
    while (v12 < *((__int16 *)a2 + 111));
  }

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a3, v6, v10);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaPFA(int a1, uint64_t a2, unsigned int a3, BlueFin::GlFormat *this, int a5)
{
  if (a3 >= 6)
  {
    if (a3 == 6) {
      uint64_t v6 = 78;
    }
    else {
      uint64_t v6 = 120;
    }
  }
  else
  {
    uint64_t v6 = dword_263BBCF88[a3];
  }
  uint64_t v7 = *(unsigned __int16 **)(a2 + 160);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    switch(a3)
    {
      case 0u:
        goto LABEL_12;
      case 1u:
      case 3u:
        break;
      case 2u:
        v7 += 8;
        goto LABEL_12;
      case 4u:
        v7 += 16;
        goto LABEL_12;
      case 5u:
        v7 += 24;
LABEL_12:
        uint64_t v12 = *v7;
        uint64_t v11 = v7[1];
        uint64_t v10 = v7[2];
        uint64_t v8 = *((unsigned int *)v7 + 2);
        uint64_t v9 = *((unsigned int *)v7 + 3);
        break;
      default:
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        break;
    }
    uint64_t v13 = a5;
    BlueFin::GlFormat::glsnprintf(this, (char *)a5, "$PGLOR,%d,PFA,%c,Detect,%u,Xcorr,%u,Attempt,%u,ValidPR,%u,ValidRR,%u", (const char *)this, 0, v6, v11, v10, v12, v8, v9);
  }
  else
  {
    uint64_t v13 = a5;
    BlueFin::GlFormat::glsnprintf(this, (char *)a5, "$PGLOR,%d,PFA,%c,Detect,,Xcorr,,Attempt,,ValidPR,,ValidRR,", (const char *)this, 0, v6);
  }

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, (char *)this + v13 - 1, v14);
}

void BlueFin::GlPeNmeaGen::FormatNmeaCN0(int a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  if (*(unsigned char *)a2)
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 1);
    unint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[v5];
    if (v6 >= 6)
    {
      if (v6 == 6) {
        uint64_t v7 = 78;
      }
      else {
        uint64_t v7 = 120;
      }
    }
    else
    {
      uint64_t v7 = dword_263BBCF88[v6];
    }
    uint64_t v8 = (int)a4;
    if ((v5 - 52) > 0xDu) {
      BlueFin::GlFormat::glsnprintf(this, (char *)(int)a4, "$PGLOR,%d,CN0,%c,PRN,%d,BAND,%d,MOM,%.1f,SNV,%.1f,NC,%.1f,NT,%.1f", a4, 0, v7, BlueFin::GlSvId::s_aucSvId2prn[v5], *(unsigned __int16 *)(a2 + 2), *(float *)(a2 + 4), *(float *)(a2 + 8), *(float *)(a2 + 12), *(float *)(a2 + 16));
    }
    else {
      BlueFin::GlFormat::glsnprintf(this, (char *)(int)a4, "$PGLOR,%d,CN0,%c,FCN,%d,BAND,%d,MOM,%.1f,SNV,%.1f,NC,%.1f,NT,%.1f", a4, 0, v7, (char)(v5 - 59), *(unsigned __int16 *)(a2 + 2), *(float *)(a2 + 4), *(float *)(a2 + 8), *(float *)(a2 + 12), *(float *)(a2 + 16));
    }
    BlueFin::GlPeNmeaGen::nmeaAddChksum(this, (char *)this + v8 - 1, v9);
  }
}

char *BlueFin::GlPeNmeaGen::FormatNmeaFIN(BlueFin::GlPeNmeaGen *this, uint64_t a2, unsigned int a3, const char *a4, unsigned int a5, BlueFin::GlFormat *a6, int a7)
{
  if (a4)
  {
    float v12 = (float)a5 * 100.0 / (float)a4 + 0.5;
    float v13 = fmodf(v12, 4295000000.0);
    if (v12 <= 4295000000.0) {
      float v13 = v12;
    }
    if (v13 < -4295000000.0) {
      float v13 = -fmodf(-v13, 4295000000.0);
    }
    if (v13 < 0.0) {
      LODWORD(v14) = -(float)-v13;
    }
    else {
      LOWORD(v14) = v13;
    }
    uint64_t v14 = (unsigned __int16)v14;
    uint64_t v15 = "$PGLOR,%d,FIN,%d,%hu,%u,%hu";
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = "$PGLOR,%d,FIN,%d,%hu,,";
  }
  BlueFin::GlFormat::glsnprintf(a6, (char *)a7, (unsigned __int8 *)v15, a4, 2, a2, a3, a4, v14);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(a6, (char *)a6 + a7 - 1, v16);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaPPS(int a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  unint64_t v6 = (char *)this + (int)a4;
  uint64_t v7 = v6 - 1;
  if ((int)a4 != 1 && v6 - 1 >= (char *)this) {
    uint64_t v8 = (char *)(int)a4;
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = BlueFin::GlFormat::glsnprintf(this, v8, "$PGLOR,%d,PPS,%02d%02d%02d,%02d%02d%02d.%03d,", a4, 0, *(unsigned __int16 *)(a2 + 8), *(unsigned __int16 *)(a2 + 6), *(_WORD *)(a2 + 4) % 0x64u, *(unsigned __int16 *)(a2 + 10), *(unsigned __int16 *)(a2 + 12), *(unsigned __int16 *)(a2 + 14), *(unsigned __int16 *)(a2 + 16));
  uint64_t v11 = (char *)this + v9;
  if (v7 <= v11) {
    float v12 = 0;
  }
  else {
    float v12 = (char *)(v6 - v11);
  }
  if (*(_WORD *)(a2 + 7248)) {
    int v13 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v9), v12, "%02d%02d%02d,%02d%02d%02d.%03d,", v10, *(unsigned __int16 *)(a2 + 7252), *(unsigned __int16 *)(a2 + 7250), *(unsigned __int16 *)(a2 + 7248) % 0x64u, *(unsigned __int16 *)(a2 + 7254), *(unsigned __int16 *)(a2 + 7256), *(unsigned __int16 *)(a2 + 7258), *(unsigned __int16 *)(a2 + 7260));
  }
  else {
    int v13 = BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v9), v12, ",,", v10, v28, v30, v32, v34, v36, v38, v39);
  }
  uint64_t v15 = (BlueFin::GlFormat *)&v11[v13];
  unsigned int v16 = *(_DWORD *)(a2 + 7268);
  if (v16 == 0x7FFFFFFF)
  {
    if (v7 <= (char *)v15) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = (char *)(v6 - (char *)v15);
    }
    uint64_t v18 = ",,,,";
  }
  else
  {
    unsigned int v19 = v16 / 0x3E8;
    int v20 = *(_DWORD *)(a2 + 7264);
    if (v20) {
      unsigned int v19 = sqrtf((float)(v19 * v19 + v20 * v20));
    }
    if (v7 <= (char *)v15) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = (char *)(v6 - (char *)v15);
    }
    unint64_t v21 = v19 / 0x3E8uLL;
    uint64_t v22 = v19 % 0x3E8;
    uint64_t v23 = 48;
    if (*(unsigned char *)(a2 + 7274)) {
      uint64_t v24 = 49;
    }
    else {
      uint64_t v24 = 48;
    }
    if (*(unsigned char *)(a2 + 7273)) {
      uint64_t v25 = 49;
    }
    else {
      uint64_t v25 = 48;
    }
    if (*(unsigned char *)(a2 + 7272)) {
      uint64_t v23 = 49;
    }
    uint64_t v35 = v25;
    uint64_t v37 = v24;
    uint64_t v31 = v22;
    uint64_t v33 = v23;
    unint64_t v29 = v21;
    uint64_t v18 = "%03d.%03d,%c,%c,%c,";
  }
  BlueFin::GlFormat::glsnprintf(v15, v17, (unsigned __int8 *)v18, v14, v29, v31, v33, v35, v37);

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v6 - 1, v26);
}

char *BlueFin::GlPeNmeaGen::FormatNmeaSPA(int a1, uint64_t a2, BlueFin::GlFormat *this, const char *a4)
{
  uint64_t v6 = *(_WORD *)(a2 + 12);
  if ((*(_WORD *)(a2 + 12) + 67) >= 0x44u)
  {
    uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss[v6];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v9] == 255)
    {
      unsigned __int16 v8 = 575;
      uint64_t v7 = -1;
    }
    else
    {
      uint64_t v7 = 0;
      unsigned __int16 v8 = BlueFin::GlSignalId::s_ausGnss2signalId[v9] + v6 - BlueFin::GlSvId::s_aucGnss2minSvId[v9];
    }
  }
  else
  {
    uint64_t v7 = 0;
    unsigned __int16 v8 = 575;
  }
  uint64_t v10 = (char *)this + (int)a4;
  uint64_t v11 = v10 - 1;
  if ((int)a4 != 1 && v10 - 1 >= (char *)this) {
    float v12 = (char *)(int)a4;
  }
  else {
    float v12 = 0;
  }
  unsigned int v13 = BlueFin::GlFormat::glsnprintf(this, v12, "$PGLOR,%d,SPA,", a4, 2);
  uint64_t v15 = (char *)this + v13;
  if (v11 <= v15) {
    unsigned int v16 = 0;
  }
  else {
    unsigned int v16 = (char *)(v10 - v15);
  }
  uint64_t v17 = 82;
  if ((((_BYTE)v6 - 1) & 0xE0) == 0) {
    uint64_t v17 = 71;
  }
  unsigned int v19 = (BlueFin::GlFormat *)&v15[BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)((char *)this + v13), v16, "%c,", v14, v17)];
  if (v11 <= (char *)v19) {
    int v20 = 0;
  }
  else {
    int v20 = (char *)(v10 - (char *)v19);
  }
  uint64_t v22 = (BlueFin::GlFormat *)((char *)v19
                            + BlueFin::GlFormat::glsnprintf(v19, v20, "%.3f,dBm,", v18, *(void *)(a2 + 224)));
  double v23 = *(double *)(a2 + 208);
  if (v11 <= (char *)v22) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = (char *)(v10 - (char *)v22);
  }
  if (v23 == 1.79769313e308)
  {
    uint64_t v25 = ",Hz";
  }
  else
  {
    if (v8 >= 0x23Fu)
    {
      DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
    }
    uint64_t v26 = BlueFin::GlSvId::s_aucSvId2gnss[v6];
    double v27 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v7 - v7 + v26]];
    if (v26 == 2)
    {
      double v28 = (double)(char)(v6 - 59);
      if ((v6 - 52) >= 0xE) {
        double v28 = -8.0;
      }
      double v27 = v27 + v28 * 562500.0;
    }
    double v34 = v23 * v27;
    uint64_t v25 = "%.0f,Hz";
  }
  unint64_t v29 = (BlueFin::GlFormat *)((char *)v22
                            + BlueFin::GlFormat::glsnprintf(v22, v24, (unsigned __int8 *)v25, v21, *(void *)&v34));
  if (v11 <= (char *)v29) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = (char *)(v10 - (char *)v29);
  }
  BlueFin::GlFormat::glsnprintf(v29, v31, ",AGC_AD_IQ,%d,%d,%.1f,%.1f", v30, (int)*(float *)(a2 + 156), (int)*(float *)(a2 + 160), *(float *)(a2 + 164), *(float *)(a2 + 168));

  return BlueFin::GlPeNmeaGen::nmeaAddChksum(this, v10 - 1, v32);
}

uint64_t BlueFin::GlPePendingBag::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)double v51 = *(_OWORD *)(a2 + 52);
    *(_OWORD *)&v51[12] = *(_OWORD *)(a2 + 64);
    long long v4 = *(_OWORD *)(a2 + 4);
    long long v5 = *(_OWORD *)(a2 + 36);
    long long v6 = *(_OWORD *)(a2 + 20);
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_OWORD *)(a1 + 20) = v6;
    *(_OWORD *)(a1 + 36) = v5;
    *(_OWORD *)(a1 + 4) = v4;
    *(_OWORD *)(a1 + 52) = *(_OWORD *)v51;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v51[12];
    BlueFin::GlGnssSet::operator=(a1 + 96, a2 + 96);
    long long v7 = *(_OWORD *)(a2 + 288);
    long long v8 = *(_OWORD *)(a2 + 304);
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 288) = v7;
    *(_OWORD *)(a1 + 304) = v8;
    long long v9 = *(_OWORD *)(a2 + 340);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
    *(_OWORD *)(a1 + 340) = v9;
    long long v10 = *(_OWORD *)(a2 + 356);
    *(void *)(a1 + 372) = *(void *)(a2 + 372);
    *(_OWORD *)(a1 + 356) = v10;
    uint64_t v11 = BlueFin::GlSetBase::operator=(a1 + 384, a2 + 384);
    uint64_t v12 = *(void *)(a2 + 396);
    *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
    *(void *)(v11 + 12) = v12;
    uint64_t v13 = BlueFin::GlSetBase::operator=(a1 + 408, a2 + 408);
    uint64_t v14 = *(void *)(a2 + 420);
    *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
    *(void *)(v13 + 12) = v14;
    uint64_t v15 = BlueFin::GlSetBase::operator=(a1 + 432, a2 + 432);
    uint64_t v16 = *(void *)(a2 + 444);
    *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
    *(void *)(v15 + 12) = v16;
    *(void *)(a1 + 456) = *(void *)(a2 + 456);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
    long long v17 = *(_OWORD *)(a2 + 480);
    *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = v17;
    memcpy((void *)(a1 + 500), (const void *)(a2 + 500), 0x158uLL);
    memcpy((void *)(a1 + 844), (const void *)(a2 + 844), 0x13CuLL);
    memcpy((void *)(a1 + 1160), (const void *)(a2 + 1160), 0x13CuLL);
    memcpy((void *)(a1 + 1476), (const void *)(a2 + 1476), 0x13CuLL);
    memcpy((void *)(a1 + 1792), (const void *)(a2 + 1792), 0x108uLL);
    uint64_t v18 = *(void *)(a2 + 2056);
    *(_DWORD *)(a1 + 2064) = *(_DWORD *)(a2 + 2064);
    *(void *)(a1 + 2056) = v18;
    *(_DWORD *)(a1 + 2068) = *(_DWORD *)(a2 + 2068);
    *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
    *(_DWORD *)(a1 + 2080) = *(_DWORD *)(a2 + 2080);
    *(unsigned char *)(a1 + 3144) = *(unsigned char *)(a2 + 3144);
    for (uint64_t i = 56; i != 1080; i += 64)
    {
      uint64_t v20 = *(void *)(a2 + 3136);
      uint64_t v21 = *(void *)(a1 + 3136);
      if (v21 != v20)
      {
        uint64_t v22 = (_DWORD *)(v20 + i);
        double v23 = (_DWORD *)(v21 + i);
        long long v24 = *(_OWORD *)(v22 - 14);
        long long v25 = *(_OWORD *)(v22 - 10);
        *((void *)v23 - 3) = *((void *)v22 - 3);
        *(_OWORD *)(v23 - 10) = v25;
        *(_OWORD *)(v23 - 14) = v24;
        *((void *)v23 - 2) = *((void *)v22 - 2);
        *(v23 - 2) = *(v22 - 2);
        *((unsigned char *)v23 - 4) = *((unsigned char *)v22 - 4);
        *double v23 = *v22;
      }
    }
    uint64_t v26 = 0;
    long long v27 = *(_OWORD *)(a2 + 3168);
    *(_DWORD *)(a1 + 3184) = *(_DWORD *)(a2 + 3184);
    *(_OWORD *)(a1 + 3168) = v27;
    long long v28 = *(_OWORD *)(a2 + 3192);
    long long v29 = *(_OWORD *)(a2 + 3208);
    *(void *)(a1 + 3224) = *(void *)(a2 + 3224);
    *(_OWORD *)(a1 + 3192) = v28;
    *(_OWORD *)(a1 + 3208) = v29;
    long long v30 = *(_OWORD *)(a2 + 3232);
    *(_DWORD *)(a1 + 3248) = *(_DWORD *)(a2 + 3248);
    *(_OWORD *)(a1 + 3232) = v30;
    *(_OWORD *)(a1 + 3252) = *(_OWORD *)(a2 + 3252);
    long long v31 = *(_OWORD *)(a2 + 3336);
    long long v33 = *(_OWORD *)(a2 + 3288);
    long long v32 = *(_OWORD *)(a2 + 3304);
    *(_OWORD *)(a1 + 3320) = *(_OWORD *)(a2 + 3320);
    *(_OWORD *)(a1 + 3336) = v31;
    *(_OWORD *)(a1 + 3288) = v33;
    *(_OWORD *)(a1 + 3304) = v32;
    long long v35 = *(_OWORD *)(a2 + 3368);
    long long v34 = *(_OWORD *)(a2 + 3384);
    long long v36 = *(_OWORD *)(a2 + 3352);
    *(void *)(a1 + 3400) = *(void *)(a2 + 3400);
    *(_OWORD *)(a1 + 3368) = v35;
    *(_OWORD *)(a1 + 3384) = v34;
    *(_OWORD *)(a1 + 3352) = v36;
    *(_OWORD *)(a1 + 3272) = *(_OWORD *)(a2 + 3272);
    *(_OWORD *)(a1 + 3408) = *(_OWORD *)(a2 + 3408);
    long long v37 = *(_OWORD *)(a2 + 3424);
    *(void *)(a1 + 3440) = *(void *)(a2 + 3440);
    *(_OWORD *)(a1 + 3424) = v37;
    long long v38 = *(_OWORD *)(a2 + 3512);
    long long v40 = *(_OWORD *)(a2 + 3464);
    long long v39 = *(_OWORD *)(a2 + 3480);
    *(_OWORD *)(a1 + 3496) = *(_OWORD *)(a2 + 3496);
    *(_OWORD *)(a1 + 3512) = v38;
    *(_OWORD *)(a1 + 3464) = v40;
    *(_OWORD *)(a1 + 3480) = v39;
    long long v42 = *(_OWORD *)(a2 + 3544);
    long long v41 = *(_OWORD *)(a2 + 3560);
    long long v43 = *(_OWORD *)(a2 + 3528);
    *(unsigned char *)(a1 + 3576) = *(unsigned char *)(a2 + 3576);
    *(_OWORD *)(a1 + 3544) = v42;
    *(_OWORD *)(a1 + 3560) = v41;
    *(_OWORD *)(a1 + 3528) = v43;
    *(_OWORD *)(a1 + 3448) = *(_OWORD *)(a2 + 3448);
    *(_OWORD *)(a1 + 3580) = *(_OWORD *)(a2 + 3580);
    *(_DWORD *)(a1 + 3596) = *(_DWORD *)(a2 + 3596);
    *(void *)(a1 + 3600) = *(void *)(a2 + 3600);
    *(_OWORD *)(a1 + 3608) = *(_OWORD *)(a2 + 3608);
    *(_WORD *)(a1 + 3768) = *(_WORD *)(a2 + 3768);
    *(unsigned char *)(a1 + 3624) = *(unsigned char *)(a2 + 3624);
    *(_OWORD *)(a1 + 3632) = *(_OWORD *)(a2 + 3632);
    long long v44 = *(_OWORD *)(a2 + 3648);
    long long v45 = *(_OWORD *)(a2 + 3664);
    long long v46 = *(_OWORD *)(a2 + 3680);
    *(_OWORD *)(a1 + 3696) = *(_OWORD *)(a2 + 3696);
    *(_OWORD *)(a1 + 3680) = v46;
    *(_OWORD *)(a1 + 3664) = v45;
    *(_OWORD *)(a1 + 3648) = v44;
    long long v47 = *(_OWORD *)(a2 + 3712);
    long long v48 = *(_OWORD *)(a2 + 3728);
    long long v49 = *(_OWORD *)(a2 + 3744);
    *(void *)(a1 + 3760) = *(void *)(a2 + 3760);
    *(_OWORD *)(a1 + 3744) = v49;
    *(_OWORD *)(a1 + 3728) = v48;
    *(_OWORD *)(a1 + 3712) = v47;
    do
    {
      *(void *)(a1 + 3776 + v26) = *(void *)(a2 + 3776 + v26);
      v26 += 8;
    }
    while (v26 != 576);
    *(_DWORD *)(a1 + 4352) = *(_DWORD *)(a2 + 4352);
  }
  return a1;
}

uint64_t BlueFin::GlPePendingBag::TerminateRequest(uint64_t this, BlueFin::GlRequestImpl *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 3768);
  if (v2 > 0x47)
  {
    uint64_t v11 = "m_sReqNum < _DIM(m_aptReqList)";
    DeviceFaultNotify("glpe_pendingbag.cpp", 307, "TerminateRequest", (char)"m_sReqNum < _DIM(m_aptReqList)");
    int v12 = 307;
LABEL_16:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", v12, v11);
  }
  if (!*(_WORD *)(this + 3768)) {
    return this;
  }
  uint64_t v4 = this;
  uint64_t v5 = 0;
  for (uint64_t i = (void *)(this + 3784); ; ++i)
  {
    long long v7 = (BlueFin::GlRequestImpl *)*(i - 1);
    if (!v7)
    {
      uint64_t v11 = "pTempReq != nullptr";
      DeviceFaultNotify("glpe_pendingbag.cpp", 312, "TerminateRequest", (char)"pTempReq != nullptr");
      int v12 = 312;
      goto LABEL_16;
    }
    if (v7 == a2) {
      break;
    }
    if (v2 == ++v5) {
      return this;
    }
  }
  long long v8 = (void (*)(BlueFin::GlRequestImpl *))*((void *)a2 + 7);
  if (v8) {
    v8(a2);
  }
  this = BlueFin::GlRequestBase::Destroy((uint64_t)a2);
  __int16 v9 = *(_WORD *)(v4 + 3768);
  if (v9 > (__int16)(v5 + 1))
  {
    uint64_t v10 = *(unsigned __int16 *)(v4 + 3768);
    do
    {
      *(i - 1) = *i;
      --v10;
      ++i;
    }
    while (v5 + 1 != v10);
  }
  *(_WORD *)(v4 + 3768) = v9 - 1;
  return this;
}

uint64_t BlueFin::GlPePendingBag::TerminateAll(uint64_t this)
{
  int v1 = *(unsigned __int16 *)(this + 3768);
  if (v1 > 0x47)
  {
    long long v7 = "m_sReqNum < _DIM(m_aptReqList)";
    DeviceFaultNotify("glpe_pendingbag.cpp", 330, "TerminateAll", (char)"m_sReqNum < _DIM(m_aptReqList)");
    int v8 = 330;
    goto LABEL_10;
  }
  if (*(_WORD *)(this + 3768))
  {
    uint64_t v2 = this;
    while (1)
    {
      unsigned __int16 v3 = v1 - 1;
      *(_WORD *)(v2 + 3768) = v3;
      uint64_t v4 = v2 + 8 * v3;
      uint64_t v5 = *(void *)(v4 + 3776);
      *(void *)(v4 + 3776) = 0;
      if (!v5) {
        break;
      }
      long long v6 = *(void (**)(uint64_t))(v5 + 56);
      if (v6) {
        v6(v5);
      }
      this = BlueFin::GlRequestBase::Destroy(v5);
      int v1 = *(__int16 *)(v2 + 3768);
      if (v1 <= 0) {
        return this;
      }
    }
    long long v7 = "pReq != nullptr";
    DeviceFaultNotify("glpe_pendingbag.cpp", 335, "TerminateAll", (char)"pReq != nullptr");
    int v8 = 335;
LABEL_10:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", v8, v7);
  }
  return this;
}

uint64_t BlueFin::GlPePendingBag::GetNonInstantaneousRequests@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = *(unsigned __int16 *)(this + 3768);
  if (v2 >= 0x48)
  {
    DeviceFaultNotify("glpe_pendingbag.cpp", 387, "GetNonInstantaneousRequests", (char)"m_sReqNum < _DIM(m_aptReqList)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", 387, "m_sReqNum < _DIM(m_aptReqList)");
  }
  *a2 = 0;
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = (uint64_t *)(this + 3776);
    do
    {
      uint64_t v5 = *v4;
      if (*v4)
      {
        int v6 = *(_DWORD *)(v5 + 16);
        if (v6 != 1 || *(_WORD *)(v5 + 22))
        {
          v3 |= 1 << v6;
          *a2 = v3;
        }
      }
      ++v4;
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t BlueFin::GlPePendingBag::GetFactTestItem(BlueFin::GlPePendingBag *this)
{
  uint64_t v1 = *((unsigned __int16 *)this + 1884);
  if (v1 > 0x47)
  {
    int v6 = "m_sReqNum < _DIM(m_aptReqList)";
    DeviceFaultNotify("glpe_pendingbag.cpp", 432, "GetFactTestItem", (char)"m_sReqNum < _DIM(m_aptReqList)");
    int v7 = 432;
LABEL_12:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", v7, v6);
  }
  if (!*((_WORD *)this + 1884)) {
    return 8;
  }
  for (uint64_t i = (_DWORD **)((char *)this + 3776); ; ++i)
  {
    int v3 = *i;
    if (!*i)
    {
      int v6 = "pReq != nullptr";
      DeviceFaultNotify("glpe_pendingbag.cpp", 437, "GetFactTestItem", (char)"pReq != nullptr");
      int v7 = 437;
      goto LABEL_12;
    }
    if (v3[4] == 8) {
      break;
    }
    if (!--v1) {
      return 8;
    }
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v3 + 360);

  return v5();
}

BOOL BlueFin::GlPePendingBag::HasNILRReq(BlueFin::GlPePendingBag *this)
{
  unint64_t v1 = *((unsigned __int16 *)this + 1884);
  if (v1 > 0x47)
  {
    DeviceFaultNotify("glpe_pendingbag.cpp", 554, "HasNILRReq", (char)"m_sReqNum < _DIM(m_aptReqList)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", 554, "m_sReqNum < _DIM(m_aptReqList)");
  }
  if (*((_WORD *)this + 1884))
  {
    uint64_t v2 = 0;
    BOOL v3 = 1;
    do
    {
      uint64_t v4 = *((void *)this + v2 + 472);
      if (v4 && (*(_DWORD *)(v4 + 16) - 1) < 2) {
        break;
      }
      BOOL v3 = ++v2 < v1;
    }
    while (v1 != v2);
  }
  else
  {
    return 0;
  }
  return v3;
}

BOOL BlueFin::GlPePendingBag::HasPosReq(BlueFin::GlPePendingBag *this)
{
  unint64_t v1 = *((unsigned __int16 *)this + 1884);
  if (v1 > 0x47)
  {
    DeviceFaultNotify("glpe_pendingbag.cpp", 575, "HasPosReq", (char)"m_sReqNum < _DIM(m_aptReqList)");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_pendingbag.cpp", 575, "m_sReqNum < _DIM(m_aptReqList)");
  }
  if (*((_WORD *)this + 1884))
  {
    uint64_t v2 = 0;
    BOOL v3 = 1;
    do
    {
      uint64_t v4 = *((void *)this + v2 + 472);
      if (v4 && !*(_DWORD *)(v4 + 16)) {
        break;
      }
      BOOL v3 = ++v2 < v1;
    }
    while (v1 != v2);
  }
  else
  {
    return 0;
  }
  return v3;
}

_DWORD *BlueFin::GlPePlatfStatMgr::ReportStatic(_DWORD *this, void *a2, const char *a3)
{
  if (this)
  {
    uint64_t v3 = (uint64_t)this;
    this = (_DWORD *)GlCustomLog(13, "GLP,DTIN,%u,%u,DTOUT,%u,%u,HATMD,%d\n", this[11], this[13], this[12], this[14], this[40]);
    *(void *)(v3 + 52) = 0;
    *(void *)(v3 + 44) = 0;
  }
  return this;
}

uint64_t BlueFin::GlPePlatfStatMgr::SetDataSubFrmMeas(uint64_t this, const BlueFin::GlDataSubFrmMeas *a2)
{
  if ((((unint64_t)*(unsigned int *)(*(void *)(this + 1256)
                                           + (((unint64_t)*((unsigned __int8 *)a2 + 8) >> 3) & 0x1C)) >> (*((unsigned char *)a2 + 8) & 0x1F)) & 1) != 0)
  {
    for (uint64_t i = 20; i != 60; i += 4)
    {
      int v3 = *(_DWORD *)((char *)a2 + i);
      if ((v3 & 0x40000000) == 0)
      {
        if ((v3 & 0x80000000) == 0) {
          ++*(_DWORD *)(this + 1308);
        }
        ++*(_DWORD *)(this + 1304);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPePlatfStat::SetOscDrift(uint64_t this, int a2, int a3, float a4, float a5)
{
  if (a2 == 10)
  {
    int v5 = *(_DWORD *)(this + 240);
    if (v5 == 2)
    {
      if (a3) {
        return this;
      }
      int v6 = 2;
    }
    else
    {
      if (a3) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
      *(_DWORD *)(this + 240) = v6;
    }
    double v9 = (1.0 - (float)((float)(a4 - a5) / (float)(a4 + a5))) * 100.0;
    if (v9 >= 0.0)
    {
      if (v9 <= 100.0)
      {
        int v10 = (int)(v9 + 0.5);
        if (v9 <= 0.0) {
          LOBYTE(v10) = 0;
        }
      }
      else
      {
        LOBYTE(v10) = 100;
      }
    }
    else
    {
      LOBYTE(v10) = 0;
    }
    *(unsigned char *)(this + 249) = v10;
  }
  else if (a2 == 1)
  {
    int v5 = *(_DWORD *)(this + 244);
    if (v5 == 2)
    {
      if (a3) {
        return this;
      }
      int v6 = 2;
    }
    else
    {
      if (a3) {
        int v6 = 1;
      }
      else {
        int v6 = 2;
      }
      *(_DWORD *)(this + 244) = v6;
    }
    double v11 = (1.0 - (float)((float)(a4 - a5) / (float)(a4 + a5))) * 100.0;
    if (v11 >= 0.0)
    {
      if (v11 <= 100.0)
      {
        int v12 = (int)(v11 + 0.5);
        if (v11 <= 0.0) {
          LOBYTE(v12) = 0;
        }
      }
      else
      {
        LOBYTE(v12) = 100;
      }
    }
    else
    {
      LOBYTE(v12) = 0;
    }
    *(unsigned char *)(this + 250) = v12;
  }
  else
  {
    if (a2) {
      return this;
    }
    int v5 = *(_DWORD *)(this + 236);
    if (a3) {
      int v6 = 1;
    }
    else {
      int v6 = 2;
    }
    *(_DWORD *)(this + 236) = v6;
    double v7 = (1.0 - (float)((float)(a4 - a5) / (float)(a4 + a5))) * 100.0;
    if (v7 >= 0.0)
    {
      if (v7 <= 100.0)
      {
        int v8 = (int)(v7 + 0.5);
        if (v7 <= 0.0) {
          LOBYTE(v8) = 0;
        }
      }
      else
      {
        LOBYTE(v8) = 100;
      }
    }
    else
    {
      LOBYTE(v8) = 0;
    }
    *(unsigned char *)(this + 248) = v8;
  }
  if (v5 != v6) {
    *(unsigned char *)(this + 232) = 1;
  }
  return this;
}

void BlueFin::GlPePwrStateMgr::~GlPePwrStateMgr(BlueFin::GlPePwrStateMgr *this)
{
}

uint64_t (*(*BlueFin::GlPePwrStateMgr::Wait4Me(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlPePwrStateMgr *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) < 2) {
    return 0;
  }
  if (v2 != 47) {
    return BlueFin::GlPePwrStateMgr::PowerSaveMode;
  }
  if (BlueFin::GlPePwrStateMgr::LpExit((BlueFin::GlPePwrStateMgr *)a1))
  {
    uint64_t v4 = "&GlPePwrStateMgr::Wait4Exit";
    int v5 = (uint64_t (*)())BlueFin::GlPePwrStateMgr::Wait4Exit;
LABEL_8:
    BlueFin::QHsm::tran((void *)a1, v5, (uint64_t)v4);
    return 0;
  }
  if (*(unsigned char *)(a1 + 210))
  {
    uint64_t v4 = "&GlPePwrStateMgr::SteadyPowerSave";
    int v5 = (uint64_t (*)())BlueFin::GlPePwrStateMgr::SteadyPowerSave;
    goto LABEL_8;
  }
  return 0;
}

uint64_t (*BlueFin::GlPePwrStateMgr::PowerSaveMode(BlueFin::GlPePwrStateMgr *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 48)
  {
    uint64_t v3 = 0;
    *((unsigned char *)a1 + 208) = a2[1] != 0;
  }
  else
  {
    if (v2 != 3)
    {
      if (v2 != 2) {
        return BlueFin::QHsm::top;
      }
      *((unsigned char *)a1 + 211) = 1;
      BlueFin::GlPePwrStateMgr::ComputeLowPowerState(a1);
    }
    return 0;
  }
  return (uint64_t (*)())v3;
}

uint64_t BlueFin::GlPePwrStateMgr::LpExit(BlueFin::GlPePwrStateMgr *this)
{
  if (*((unsigned char *)this + 208))
  {
    *((unsigned char *)this + 248) = 0;
    int v8 = 0;
    memset(v6, 0, 13);
    v6[2] = 0;
    v7[0] = 0;
    *(void *)((char *)v7 + 6) = 0;
    BlueFin::GlPeKF::GetDataForLowPowerDecision(*((void *)this + 19), (uint64_t)v6);
    *((unsigned char *)this + 248) = BlueFin::GlPePwrStateMgr::LowPowerAllowed((uint64_t)this, 0, *((unsigned __int8 *)this + 209), *((unsigned __int8 *)this + 210), *((unsigned __int8 *)this + 211), (unsigned __int8 *)v6);
    int v2 = BlueFin::GlPePwrStateMgr::ComputeLowPowerState(this);
    char v3 = v2;
    uint64_t v4 = v2 ^ 1u;
    BlueFin::GlPePwrStateMgr::Print((unint64_t)this, "Exit", v4);
    if ((v3 & 1) == 0) {
      *(unsigned char *)(*((void *)this + 15) + 54844) = 0;
    }
  }
  else
  {
    GlCustomLog(15, "PMM::pe +LpExit disabled must exit\n");
    return 1;
  }
  return v4;
}

uint64_t (*(*BlueFin::GlPePwrStateMgr::Wait4Exit(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlPePwrStateMgr *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) < 2) {
    return 0;
  }
  if (v2 != 47) {
    return BlueFin::GlPePwrStateMgr::PowerSaveMode;
  }
  if (BlueFin::GlPePwrStateMgr::LpExit((BlueFin::GlPePwrStateMgr *)a1))
  {
    uint64_t v4 = "&GlPePwrStateMgr::SteadyNormalMode";
    int v5 = BlueFin::GlPePwrStateMgr::SteadyNormalMode;
LABEL_8:
    BlueFin::QHsm::tran((void *)a1, v5, (uint64_t)v4);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 210))
  {
    uint64_t v4 = "&GlPePwrStateMgr::Wait4Me";
    int v5 = BlueFin::GlPePwrStateMgr::Wait4Me;
    goto LABEL_8;
  }
  return 0;
}

uint64_t (*(*BlueFin::GlPePwrStateMgr::SteadyPowerSave(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlPePwrStateMgr *a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if ((v2 - 2) < 2) {
    return 0;
  }
  if (v2 != 47) {
    return BlueFin::GlPePwrStateMgr::PowerSaveMode;
  }
  if (BlueFin::GlPePwrStateMgr::LpExit((BlueFin::GlPePwrStateMgr *)a1))
  {
    uint64_t v4 = "&GlPePwrStateMgr::Wait4Exit";
    int v5 = (uint64_t (*)())BlueFin::GlPePwrStateMgr::Wait4Exit;
LABEL_8:
    BlueFin::QHsm::tran((void *)a1, v5, (uint64_t)v4);
    return 0;
  }
  if (!*(unsigned char *)(a1 + 210))
  {
    uint64_t v4 = "&GlPePwrStateMgr::Wait4Me";
    int v5 = BlueFin::GlPePwrStateMgr::Wait4Me;
    goto LABEL_8;
  }
  return 0;
}

uint64_t BlueFin::GlPePwrStateMgr::LowPowerAllowed(uint64_t a1, int a2, int a3, int a4, int a5, unsigned __int8 *a6)
{
  double v7 = *(uint64_t (**)(unsigned __int8 *))(a1 + 280);
  if (v7)
  {
    char v8 = v7(a6);
    if (a6[11]) {
      uint64_t v9 = 84;
    }
    else {
      uint64_t v9 = 70;
    }
    if (a6[9]) {
      uint64_t v10 = 84;
    }
    else {
      uint64_t v10 = 70;
    }
    if (a6[7]) {
      uint64_t v11 = 84;
    }
    else {
      uint64_t v11 = 70;
    }
    GlCustomLog(15, "GlPePwrStateMgr::LowPowerAllowed: EnoughGoodPMMSvCnt:%c  GoodForNav:%c  SpeedValid:%c\n", v11, v10, v9);
    GlCustomLog(15, "GlPePwrStateMgr::LowPowerAllowed: User LowPowerAllowed function returned:%c\n");
    return v8 & 1;
  }
  *(unsigned char *)(a1 + 210) = a4;
  *(unsigned char *)(a1 + 211) = a5;
  double v17 = *((double *)a6 + 3);
  float v18 = *((float *)a6 + 10);
  int v19 = a6[10];
  if (a6[11]) {
    BOOL v20 = v17 < 1.0;
  }
  else {
    BOOL v20 = 0;
  }
  if (!v20 || v18 < -1.0)
  {
    if (a6[10])
    {
      double v28 = (double)(*((_DWORD *)a6 + 8) - *(_DWORD *)(a1 + 264)) * 0.001;
      double v27 = 0.0;
      if (v28 > 0.0)
      {
        double v22 = vabdd_f64(*((double *)a6 + 2), *(float *)(a1 + 260));
        if (v22 > 180.0) {
          double v22 = 360.0 - v22;
        }
        if (v28 < 0.5) {
          double v28 = 0.5;
        }
        double v27 = v22 / v28;
      }
      if (a6[2]) {
        BOOL v23 = 1;
      }
      else {
        BOOL v23 = v17 <= 19.0;
      }
      double v24 = 5.0;
      if (!v23) {
        double v24 = 2.0;
      }
      BOOL v25 = v27 > v24;
    }
    else
    {
      BOOL v25 = 0;
      double v27 = 0.0;
      double v28 = 0.0;
    }
    BOOL v29 = v18 < -1.0;
    if (v17 >= 10.0) {
      BOOL v29 = 0;
    }
    if (a6[11]) {
      BOOL v30 = v29;
    }
    else {
      BOOL v30 = 0;
    }
    int v26 = !v30 && !v25;
  }
  else
  {
    int v26 = 1;
    double v27 = 0.0;
    double v28 = 0.0;
  }
  double v31 = *((double *)a6 + 2);
  float v32 = v31;
  *(float *)(a1 + 260) = v32;
  *(_DWORD *)(a1 + 264) = *((_DWORD *)a6 + 8);
  double v33 = v32;
  double v34 = v18;
  if (a6[12]) {
    uint64_t v35 = 84;
  }
  else {
    uint64_t v35 = 70;
  }
  uint64_t v71 = v35;
  if (a5) {
    uint64_t v36 = 84;
  }
  else {
    uint64_t v36 = 70;
  }
  if (a4) {
    uint64_t v37 = 84;
  }
  else {
    uint64_t v37 = 70;
  }
  uint64_t v70 = v36;
  if (a2) {
    uint64_t v38 = 84;
  }
  else {
    uint64_t v38 = 70;
  }
  if (v19) {
    uint64_t v39 = 84;
  }
  else {
    uint64_t v39 = 70;
  }
  GlCustomLog(14, "PMM::KF td:%.3f,TRK:%.1f,%.1f,headRate:%.1f,dAcc:%.1f,speed:%.1f,speedVal:%c,bReportMore:%c,bMeInPMM:%c,bPeInPMM:%c, bIsStatic:%c\n", v28, v33, v31, v27, v34, v17, v39, v38, v37, v70, v71);
  if (*a6) {
    BOOL v40 = a6[12] == 0;
  }
  else {
    BOOL v40 = 0;
  }
  int v41 = !v40;
  BOOL v42 = !*a6 && a6[5] && *((double *)a6 + 3) > 5.0 || (a6[5] | *a6) == 0;
  if (v42 && a3) {
    BOOL v42 = a6[1] != 0;
  }
  BOOL v43 = 0;
  double v44 = (double)(char)a6[36] / ((double)(char)a6[37] * 0.01);
  int v45 = a6[4];
  if (a6[4]) {
    char v46 = 1;
  }
  else {
    char v46 = (v41 | a3) ^ 1;
  }
  int v47 = a6[9];
  int v48 = a6[8];
  if ((v46 & 1) == 0)
  {
    BOOL v49 = v44 <= 50.0 || v47 == 0;
    if (!v49 && v48 != 0) {
      BOOL v43 = a6[3] != 0;
    }
  }
  int v51 = a6[6];
  if (a6[6]) {
    BOOL v52 = 0;
  }
  else {
    BOOL v52 = !v42;
  }
  char v53 = v43 & v26 & v52;
  *(_WORD *)(a1 + 276) = 0;
  int v54 = a4 & a5 ^ 1;
  if (*(unsigned char *)(a1 + 273) && (v54 & 1) == 0 && a6[5])
  {
    BOOL v55 = 0;
    *(_WORD *)(a1 + 272) = 1;
  }
  else
  {
    BOOL v55 = *(unsigned char *)(a1 + 272) == 0;
  }
  if (v53 & 1 | (v55 || !v43)) {
    goto LABEL_90;
  }
  if (((a4 ^ 1) & a5 | a2) & v26 & v42)
  {
    BOOL v40 = a6[7] == 0;
    char v8 = a6[7] != 0;
    *(_WORD *)(a1 + 274) = 0;
    *(_DWORD *)(a1 + 268) = 0;
    uint64_t v56 = (const char *)&unk_263B6E70D;
    if (!v40) {
      uint64_t v56 = "DRIVE // ";
    }
    if ((v8 & 1) == 0) {
      goto LABEL_107;
    }
    goto LABEL_106;
  }
  int v57 = v27 > 4.0 ? 1 : v26;
  if ((v57 & !v42 | v54))
  {
LABEL_90:
    *(_WORD *)(a1 + 274) = 0;
    *(_DWORD *)(a1 + 268) = 0;
    uint64_t v56 = (const char *)&unk_263B6E70D;
    char v8 = v53;
    if ((v53 & 1) == 0)
    {
LABEL_107:
      unsigned int v61 = "CITY";
      if (!a6[1]) {
        unsigned int v61 = "DRIVE";
      }
      if (v8) {
        uint64_t v62 = 43;
      }
      else {
        uint64_t v62 = 45;
      }
      goto LABEL_112;
    }
LABEL_106:
    if (!a2) {
      return v8 & 1;
    }
    goto LABEL_107;
  }
  int v58 = *((_DWORD *)a6 + 8);
  int v59 = *(_DWORD *)(a1 + 268);
  if (v59 && (v58 - v59) >= 0x3E9)
  {
    *(_WORD *)(a1 + 274) = 0;
    *(_DWORD *)(a1 + 268) = v58;
LABEL_105:
    uint64_t v56 = "PED // ";
    char v8 = 1;
    goto LABEL_106;
  }
  int v60 = (__int16)++*(_WORD *)(a1 + 274);
  *(_DWORD *)(a1 + 268) = v58;
  if (v60 < 4) {
    goto LABEL_105;
  }
  char v8 = 0;
  *(_WORD *)(a1 + 274) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  if (a6[1]) {
    unsigned int v61 = "CITY";
  }
  else {
    unsigned int v61 = "DRIVE";
  }
  uint64_t v62 = 45;
  uint64_t v56 = "!ped // ";
LABEL_112:
  if (v41 | a3) {
    unsigned int v63 = "!walk";
  }
  else {
    unsigned int v63 = "WALK";
  }
  BOOL v40 = !v42;
  uint64_t v64 = "DGNSS";
  if (v40) {
    unsigned int v61 = "!drive";
  }
  BOOL v40 = v51 == 0;
  double v65 = "!tunnel";
  if (v40) {
    uint64_t v64 = "!dgnss";
  }
  BOOL v40 = v45 == 0;
  uint64_t v66 = "!sigdeg";
  if (!v40) {
    double v65 = "TUNNEL";
  }
  if (v44 <= 50.0) {
    uint64_t v66 = "SIGDEG";
  }
  if (v47) {
    int v67 = "NAV";
  }
  else {
    int v67 = "!nav";
  }
  if (v48) {
    uint64_t v68 = "POLAROID";
  }
  else {
    uint64_t v68 = "!polaroid";
  }
  GlCustomLog(14, "PMM::pe %cLowPowerAllowed = %s(!%s !%s !%s !%s !%s %s %s %s %s)=%s%s%s BasicOk %d\n", v62, v56, v63, v61, v64, v65, v66, v67, v68);
  return v8 & 1;
}

unint64_t BlueFin::GlPePwrStateMgr::Print(unint64_t this, const char *a2, int a3)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xE);
    if (this)
    {
      if (*(unsigned char *)(v5 + 257)) {
        uint64_t v6 = 43;
      }
      else {
        uint64_t v6 = 45;
      }
      if (*(unsigned char *)(v5 + 248)) {
        uint64_t v7 = 43;
      }
      else {
        uint64_t v7 = 45;
      }
      uint64_t v14 = v7;
      if (a3) {
        uint64_t v8 = 43;
      }
      else {
        uint64_t v8 = 45;
      }
      GlCustomLog(14, "PMM::pe %cLp%s %cKF %cFIX %u/%u", v8, a2, v14, v6, *(_DWORD *)(v5 + 240), *(_DWORD *)(v5 + 244));
      if (*(unsigned char *)(v5 + 208))
      {
        if (*(unsigned char *)(v5 + 210)) {
          uint64_t v9 = 43;
        }
        else {
          uint64_t v9 = 45;
        }
        if (*(unsigned char *)(v5 + 210)) {
          BOOL v10 = (**(_DWORD **)(v5 + 216) & 2) == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10) {
          uint64_t v11 = 45;
        }
        else {
          uint64_t v11 = 43;
        }
        if (*(unsigned char *)(*(void *)(v5 + 120) + 54557)) {
          int v12 = "eph";
        }
        else {
          int v12 = "alm";
        }
        if (*(unsigned char *)(v5 + 258)) {
          uint64_t v13 = 43;
        }
        else {
          uint64_t v13 = 45;
        }
        GlCustomLog(14, "  %cPMM{%cME %c%s}", v11, v9, v13, v12);
      }
      return GlCustomLog(14, "\n");
    }
  }
  return this;
}

uint64_t BlueFin::GlPeReqBag::TerminateAll(BlueFin::GlPeReqBag *this)
{
  uint64_t v2 = 0;
  uint64_t v4 = (char *)this + 3233;
  char v5 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  do
  {
    uint64_t result = *(void *)((char *)this + v2);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 280))(result);
    }
    v2 += 8;
  }
  while (v2 != 576);
  unsigned char *v4 = v5;
  return result;
}

void sub_263B3E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

void BlueFin::GlPeReqBagCleanUpProtector::~GlPeReqBagCleanUpProtector(BlueFin::GlPeReqBagCleanUpProtector *this)
{
  *(void *)this = &unk_270EC4BC0;
  **((unsigned char **)this + 1) = *((unsigned char *)this + 16);
}

{
  *(void *)this = &unk_270EC4BC0;
  **((unsigned char **)this + 1) = *((unsigned char *)this + 16);
  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeReqBag::TerminateRequest(uint64_t this, BlueFin::GlRequestImpl *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned char *)(this + 3233);
  uint64_t v8 = (unsigned char *)(this + 3233);
  char v5 = *(unsigned char *)(this + 3233);
  char v9 = v5;
  *(unsigned char *)(this + 3233) = 0;
  while (1)
  {
    uint64_t v6 = *(void *)(this + v3);
    if (v6)
    {
      if (*(BlueFin::GlRequestImpl **)(v6 + 8) == a2) {
        break;
      }
    }
    v3 += 8;
    if (v3 == 576) {
      goto LABEL_7;
    }
  }
  uint64_t v7 = BlueFin::GlRequestImpl::GlRequestTypeToString(a2);
  GlCustomLog(14, "GlPeReqBag: terminate request %s\n", v7);
  this = (*(uint64_t (**)(void))(**(void **)(v2 + v3) + 280))(*(void *)(v2 + v3));
  char v5 = v9;
  uint64_t v4 = v8;
LABEL_7:
  unsigned char *v4 = v5;
  return this;
}

void sub_263B3E9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::GetNonInstantaneousRequests@<X0>(uint64_t this@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = 0;
  int v3 = 0;
  *a2 = 0;
  do
  {
    uint64_t v4 = *(void *)(this + v2);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      int v6 = *(_DWORD *)(v5 + 16);
      if (v6 != 1 || *(_WORD *)(v5 + 22))
      {
        v3 |= 1 << v6;
        *a2 = v3;
      }
    }
    v2 += 8;
  }
  while (v2 != 576);
  return this;
}

uint64_t BlueFin::GlPeReqBag::HandleFactoryTestFailure(BlueFin::GlPeReqBag *this, const BlueFin::GlMePlatfStat *a2)
{
  uint64_t result = GlCustomLog(14, "GlPeReqBag:%s \n", "HandleFactoryTestFailure");
  for (uint64_t i = 0; i != 576; i += 8)
  {
    uint64_t v6 = *(void *)((char *)this + i);
    if (v6)
    {
      if (*(_DWORD *)(*(void *)(v6 + 8) + 16) == 8)
      {
        GlCustomLog(14, " GlPeReqBag::Calling HandleFailure\n");
        uint64_t result = (*(uint64_t (**)(void, const BlueFin::GlMePlatfStat *))(**(void **)((char *)this + i)
                                                                                   + 176))(*(void *)((char *)this + i), a2);
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeReqBag::GetAccuracymask(BlueFin::GlPeReqBag *this)
{
  unint64_t v1 = (char *)this + 3233;
  uint64_t v6 = (char *)this + 3233;
  char v2 = *((unsigned char *)this + 3233);
  char v7 = v2;
  *((unsigned char *)this + 3233) = 0;
  uint64_t v3 = *((unsigned int *)this + 329);
  if ((v3 & 0x80000000) != 0)
  {
    if (v3 == -1) {
      uint64_t result = 0xFFFFFFFFLL;
    }
    else {
      uint64_t result = *((unsigned int *)this + 812);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*((void *)this + v3) + 8);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 152))(v4);
    char v2 = v7;
    unint64_t v1 = v6;
  }
  *unint64_t v1 = v2;
  return result;
}

void sub_263B3EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::GetFactTestSvIds(BlueFin::GlPeReqBag *this, void **a2)
{
  double v33 = &unk_270EC4BC0;
  double v34 = (char *)this + 3233;
  char v35 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  bzero(*a2, ((4 * *((unsigned __int8 *)a2 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  uint64_t v4 = 0;
  char v5 = 0;
  do
  {
    uint64_t v6 = *(void *)((char *)this + v4);
    if (!v6) {
      goto LABEL_58;
    }
    char v7 = *(_DWORD **)(v6 + 8);
    if (v7[4] != 8) {
      goto LABEL_58;
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(*(void *)v7 + 240))(&v32);
    if (v32 != 255)
    {
      if ((v32 + 67) < 0x44u
        || (uint64_t v8 = BlueFin::GlSvId::s_aucSvId2gnss[v32],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v8] == 255))
      {
        __int16 v9 = 575;
      }
      else
      {
        __int16 v9 = BlueFin::GlSignalId::s_ausGnss2signalId[v8] + v32 - BlueFin::GlSvId::s_aucGnss2minSvId[v8];
      }
      char v5 = 1;
      *((_DWORD *)*a2 + (v9 >> 5)) |= 1 << v9;
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(v6 + 8) + 248))(&v31);
    if (v31 != 255)
    {
      if ((v31 + 67) < 0x44u
        || (uint64_t v10 = BlueFin::GlSvId::s_aucSvId2gnss[v31],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v10] == 255))
      {
        __int16 v11 = 575;
      }
      else
      {
        __int16 v11 = BlueFin::GlSignalId::s_ausGnss2signalId[v10]
            + v31
            - BlueFin::GlSvId::s_aucGnss2minSvId[v10];
      }
      char v5 = 1;
      *((_DWORD *)*a2 + (v11 >> 5)) |= 1 << v11;
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(v6 + 8) + 272))(&v30);
    if (v30 != 255)
    {
      uint64_t v12 = *((void *)this + 72);
      if ((*(_DWORD *)(v12 + 48) - 3) >= 2)
      {
        if (*(unsigned char *)(v12 + 26286) && *(int *)(v12 + 88) >= 37) {
          unsigned int v13 = (*(unsigned __int8 *)(*(void *)(v12 + 26224) + 1) << 27 >> 31) & 3;
        }
        else {
          unsigned int v13 = 0;
        }
        if ((v30 + 67) < 0x44u
          || (uint64_t v14 = BlueFin::GlSvId::s_aucSvId2gnss[v30],
              BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v13 - v13 + v14] == 255))
        {
          __int16 v15 = 575;
        }
        else
        {
          __int16 v15 = BlueFin::GlSignalId::s_ausGnss2signalId[v14]
              + v30
              - BlueFin::GlSvId::s_aucGnss2minSvId[v14]
              + v13 * BlueFin::GlSvId::s_aucGnss2numSvId[v14];
        }
        char v5 = 1;
        *((_DWORD *)*a2 + (v15 >> 5)) |= 1 << v15;
      }
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(v6 + 8) + 280))(&v29);
    if (v29 != 255)
    {
      if ((v29 + 67) < 0x44u
        || (uint64_t v16 = BlueFin::GlSvId::s_aucSvId2gnss[v29],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v16] == 255))
      {
        __int16 v17 = 575;
      }
      else
      {
        __int16 v17 = BlueFin::GlSignalId::s_ausGnss2signalId[v16]
            + v29
            - BlueFin::GlSvId::s_aucGnss2minSvId[v16];
      }
      char v5 = 1;
      *((_DWORD *)*a2 + (v17 >> 5)) |= 1 << v17;
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(v6 + 8) + 288))(&v28);
    if (v28 != 255)
    {
      if (!v28) {
        goto LABEL_60;
      }
      if (v28 >= 0x21u)
      {
        if (v28 < 0x8Bu)
        {
          if (v28 < 0x42u)
          {
LABEL_60:
            DeviceFaultNotify("glpe_reqbag.cpp", 1242, "GetFactTestSvIds", (char)"0");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqbag.cpp", 1242, "0");
          }
        }
        else if (v28 >= 0xAFu)
        {
          if (v28 > 0xBCu) {
            goto LABEL_60;
          }
          uint64_t v18 = BlueFin::GlSvId::s_aucSvId2gnss[v28];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v18] != 255)
          {
            __int16 v19 = BlueFin::GlSignalId::s_ausGnss2signalId[v18]
                + v28
                - BlueFin::GlSvId::s_aucGnss2minSvId[v18];
LABEL_45:
            char v5 = 1;
            *((_DWORD *)*a2 + (v19 >> 5)) |= 1 << v19;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      uint64_t v20 = BlueFin::GlSvId::s_aucSvId2gnss[v28];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v20 + 14] != 255)
      {
        __int16 v19 = BlueFin::GlSignalId::s_ausGnss2signalId[v20]
            + v28
            - BlueFin::GlSvId::s_aucGnss2minSvId[v20]
            + 2 * BlueFin::GlSvId::s_aucGnss2numSvId[v20];
        goto LABEL_45;
      }
LABEL_44:
      __int16 v19 = 575;
      goto LABEL_45;
    }
LABEL_46:
    (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(v6 + 8) + 296))(&v27);
    if (v27 != 255)
    {
      if ((v27 + 67) < 0x44u
        || (uint64_t v21 = BlueFin::GlSvId::s_aucSvId2gnss[v27],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v21 + 7] == 255))
      {
        __int16 v22 = 575;
      }
      else
      {
        __int16 v22 = BlueFin::GlSignalId::s_ausGnss2signalId[v21]
            + v27
            + BlueFin::GlSvId::s_aucGnss2numSvId[v21]
            - BlueFin::GlSvId::s_aucGnss2minSvId[v21];
      }
      char v5 = 1;
      *((_DWORD *)*a2 + (v22 >> 5)) |= 1 << v22;
    }
    (*(void (**)(unsigned __int8 *__return_ptr))(**(void **)(v6 + 8) + 312))(&v26);
    if (v26 != 255)
    {
      if ((v26 + 67) < 0x44u
        || (uint64_t v23 = BlueFin::GlSvId::s_aucSvId2gnss[v26],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v23] == 255))
      {
        __int16 v24 = 575;
      }
      else
      {
        __int16 v24 = BlueFin::GlSignalId::s_ausGnss2signalId[v23]
            + v26
            - BlueFin::GlSvId::s_aucGnss2minSvId[v23];
      }
      char v5 = 1;
      *((_DWORD *)*a2 + (v24 >> 5)) |= 1 << v24;
    }
LABEL_58:
    v4 += 8;
  }
  while (v4 != 576);
  *double v34 = v35;
  return v5 & 1;
}

void sub_263B3F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::GetFactTestItem(BlueFin::GlPeReqBag *this)
{
  unint64_t v1 = 0;
  BOOL v2 = 0;
  uint64_t v3 = (char *)this + 3233;
  uint64_t v8 = (char *)this + 3233;
  char v4 = *((unsigned char *)this + 3233);
  char v9 = v4;
  *((unsigned char *)this + 3233) = 0;
  while (1)
  {
    uint64_t v5 = *((void *)this + v1);
    if (v5)
    {
      uint64_t v6 = *(_DWORD **)(v5 + 8);
      if (v6[4] == 8) {
        break;
      }
    }
    BOOL v2 = v1++ > 0x46;
    if (v1 == 72) {
      goto LABEL_7;
    }
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v6 + 360))(v6);
  char v4 = v9;
  uint64_t v3 = v8;
  if (!v2) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t result = 0xFFFFFFFFLL;
LABEL_8:
  *uint64_t v3 = v4;
  return result;
}

void sub_263B3F2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::PopRequest(BlueFin::GlPeReqBag *this)
{
  uint64_t v2 = 0;
  uint64_t v14 = (char *)this + 3233;
  char v15 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  while (1)
  {
    uint64_t v3 = *((void *)this + v2);
    if (v3) {
      break;
    }
    if (++v2 == 72)
    {
      uint64_t v4 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v4 = *(void *)(v3 + 8);
  int v5 = *(_DWORD *)(v4 + 16);
  BlueFin::GlSetBase::Remove((uint64_t)this + 624, (__int16)v2);
  if (v5 == 12)
  {
    uint64_t v6 = (_DWORD *)BlueFin::GlUtils::m_pInstance;
    ++*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1088);
    int v7 = (*(uint64_t (**)(void))(**(void **)v6 + 48))();
    v6[273] = v7;
    *((_DWORD *)this + 5172) = v7;
  }
  uint64_t v8 = *((void *)this + v2);
  char v9 = (void (*)(uint64_t))(*(uint64_t (**)(void))(**((void **)this + 77) + 96))(*((void *)this + 77));
  if (v9) {
    v9(v8);
  }
  uint64_t v10 = 0;
  *((void *)this + v2) = 0;
  int v11 = *((_DWORD *)this + 328);
  *((_DWORD *)this + 328) = v11 & ~(1 << v5);
  while (1)
  {
    uint64_t v12 = *(void *)((char *)this + v10);
    if (v12)
    {
      if (*(_DWORD *)(*(void *)(v12 + 8) + 16) == v5) {
        break;
      }
    }
    v10 += 8;
    if (v10 == 576) {
      goto LABEL_15;
    }
  }
  *((_DWORD *)this + 328) = v11 | (1 << v5);
LABEL_15:
  *uint64_t v14 = v15;
  return v4;
}

void sub_263B3F488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

void *BlueFin::GlPeReqBag::SetInterPolateFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  int v4 = v3;
  uint64_t v6 = v5;
  int v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v2;
  uint64_t v56 = *MEMORY[0x263EF8340];
  __int16 v22 = &unk_270EC4BC0;
  uint64_t v23 = (unsigned char *)(v2 + 3233);
  char v24 = *(unsigned char *)(v2 + 3233);
  *(unsigned char *)(v2 + 3233) = 0;
  bzero(v25, 0x1CF0uLL);
  uint64_t v12 = 0;
  memset(v30, 248, sizeof(v30));
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v13 = v6[1];
  *(_OWORD *)__int16 v19 = *v6;
  *(_OWORD *)&v19[16] = v13;
  long long v14 = v6[3];
  long long v20 = v6[2];
  long long v21 = v14;
  do
  {
    uint64_t result = *(void **)(v11 + v12);
    if (result)
    {
      if (*(_DWORD *)(result[1] + 16) == 13)
      {
        (*(void (**)(void *, uint64_t))(*result + 24))(result, v10);
        uint64_t result = (void *)(*(uint64_t (**)(void, unsigned char *, uint64_t))(**(void **)(v11 + v12) + 248))(*(void *)(v11 + v12), v25, v10);
        if (v25[4048])
        {
          uint64_t v16 = *(void *)(*(void *)(v11 + v12) + 8);
          if ((*(unsigned char *)(v16 + 172) & 8) != 0)
          {
            v19[4] = 1;
            *(void *)&v19[24] = v27;
            *(_OWORD *)&v19[8] = v26;
            uint64_t result = (void *)BlueFin::GlPeReqBag::GetAvgOfTop4Cn0((uint64_t)v25);
            LOWORD(v20) = (_WORD)result;
            DWORD1(v20) = 0;
            if (v28)
            {
              float v17 = v29 / 1.9438445;
              *((float *)&v20 + 1) = v17;
            }
            *(_DWORD *)__int16 v19 = v8;
            uint64_t v18 = *(uint64_t (**)(uint64_t, unsigned char *, void))(v16 + 184);
            if (v18) {
              uint64_t result = (void *)v18(v16, v19, 0);
            }
          }
        }
      }
      else if (v4)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 304))(result, 0);
      }
    }
    v12 += 8;
  }
  while (v12 != 576);
  *uint64_t v23 = v24;
  return result;
}

void sub_263B3F728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned char *a19, char a20)
{
  *a19 = a20;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::ResetInterpolation(uint64_t this)
{
  uint64_t v1 = this;
  for (uint64_t i = 0; i != 576; i += 8)
  {
    uint64_t v3 = *(void *)(v1 + i);
    if (v3)
    {
      (*(void (**)(void, void))(**(void **)(v3 + 8) + 464))(*(void *)(v3 + 8), 0);
      this = (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + i) + 8) + 488))();
    }
  }
  return this;
}

uint64_t BlueFin::GlPeReqBag::SetCntinMeas(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v11 = (unsigned char *)(a1 + 3233);
  char v12 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  if (a2 >= 5)
  {
    int v8 = "UNKNOWN";
    if (a2 == 5) {
      int v8 = "GL_CNTIN_USER_CANCEL";
    }
  }
  else
  {
    int v8 = off_2655E02B0[(int)a2];
  }
  GlCustomLog(14, "CNTIN:SetCntinMeas(%s, %.1f, %.1f)[PPB]\n", v8, a3 * 1000000000.0, a4);
  for (uint64_t i = 0; i != 576; i += 8)
  {
    uint64_t result = *(void *)(a1 + i);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(*(void *)result + 48))(result, a2, a3, a4);
    }
  }
  *uint64_t v11 = v12;
  return result;
}

void sub_263B3F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned char *a13, char a14)
{
  *a13 = a14;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::CWResults(BlueFin::GlPeReqBag *this, uint64_t a2, uint64_t a3, double a4, double a5, double a6, uint64_t a7)
{
  uint64_t v14 = 0;
  uint64_t v16 = (char *)this + 3233;
  char v17 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  do
  {
    uint64_t result = *(void *)((char *)this + v14);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double))(*(void *)result + 56))(result, a2, a3, a7, a4, a5, a6);
    }
    v14 += 8;
  }
  while (v14 != 576);
  *uint64_t v16 = v17;
  return result;
}

void sub_263B3FA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::GetFactoryTestStatus(uint64_t result)
{
  uint64_t v1 = 0;
  while (1)
  {
    uint64_t v2 = *(void **)(result + v1);
    if (v2)
    {
      if (*(_DWORD *)(v2[1] + 16) == 8) {
        break;
      }
    }
    v1 += 8;
    if (v1 == 576) {
      return result;
    }
  }
  return (*(uint64_t (**)(void))(*v2 + 64))(*(void *)(result + v1));
}

uint64_t BlueFin::GlPeReqBag::SpaResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = (unsigned char *)(a1 + 3233);
  char v7 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v4);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 80))(result, a2);
    }
    v4 += 8;
  }
  while (v4 != 576);
  *uint64_t v6 = v7;
  return result;
}

void sub_263B3FB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::InitializeCWTest(uint64_t a1, char *a2, char *a3, char *a4, char *a5, char *a6, char *a7, char *a8, char *a9)
{
  uint64_t v17 = 0;
  uint64_t v27 = &unk_270EC4BC0;
  char v28 = (unsigned char *)(a1 + 3233);
  char v29 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v17);
    if (result)
    {
      char v26 = *a2;
      char v25 = *a3;
      char v24 = *a4;
      char v23 = *a5;
      char v22 = *a6;
      char v21 = *a7;
      char v20 = *a8;
      char v19 = *a9;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, char *, char *, char *, char *, char *, char *, char *))(*(void *)result + 88))(result, &v26, &v25, &v24, &v23, &v22, &v21, &v20, &v19);
    }
    v17 += 8;
  }
  while (v17 != 576);
  *char v28 = v29;
  return result;
}

void sub_263B3FC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned char *a13, char a14)
{
  *a13 = a14;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::GetCWRequest(BlueFin::GlPeReqBag *this)
{
  uint64_t v2 = 0;
  uint64_t v6 = (char *)this + 3233;
  char v7 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  while (1)
  {
    uint64_t v3 = *(void *)((char *)this + v2);
    if (v3)
    {
      uint64_t v4 = *(_DWORD **)(v3 + 8);
      if (v4[4] == 8 && !(*(unsigned int (**)(_DWORD *))(*(void *)v4 + 360))(v4)) {
        break;
      }
    }
    v2 += 8;
    if (v2 == 576)
    {
      uint64_t result = 0;
      goto LABEL_8;
    }
  }
  uint64_t result = *(void *)(*(void *)((char *)this + v2) + 8);
LABEL_8:
  *uint64_t v6 = v7;
  return result;
}

void sub_263B3FD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::SetDataSubFrmMeas(BlueFin::GlPeReqBag *this, BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = (char *)this + 3233;
  char v7 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  do
  {
    uint64_t result = *(void *)((char *)this + v4);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlDataSubFrmMeas *))(*(void *)result + 112))(result, a2);
    }
    v4 += 8;
  }
  while (v4 != 576);
  *uint64_t v6 = v7;
  return result;
}

void sub_263B3FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::SetGlonassDataString(BlueFin::GlPeReqBag *this, BlueFin::GlGlonassDataString *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  int v8 = (char *)this + 3233;
  char v9 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  do
  {
    uint64_t result = *(void *)((char *)this + v6);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlGlonassDataString *, uint64_t))(*(void *)result + 120))(result, a2, a3);
    }
    v6 += 8;
  }
  while (v6 != 576);
  *int v8 = v9;
  return result;
}

void sub_263B3FED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::SetGalileoDataPage(BlueFin::GlPeReqBag *this, BlueFin::GlGalileoINavPage *a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = (char *)this + 3233;
  char v7 = *((unsigned char *)this + 3233);
  *((unsigned char *)this + 3233) = 0;
  do
  {
    uint64_t result = *(void *)((char *)this + v4);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, BlueFin::GlGalileoINavPage *))(*(void *)result + 128))(result, a2);
    }
    v4 += 8;
  }
  while (v4 != 576);
  *uint64_t v6 = v7;
  return result;
}

void sub_263B3FF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeReqBag::SetAsstStat(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v6 = (unsigned char *)(a1 + 3233);
  char v7 = *(unsigned char *)(a1 + 3233);
  *(unsigned char *)(a1 + 3233) = 0;
  do
  {
    uint64_t result = *(void *)(a1 + v4);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 136))(result, a2);
    }
    v4 += 8;
  }
  while (v4 != 576);
  *uint64_t v6 = v7;
  return result;
}

void sub_263B40054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned char *a11, char a12)
{
  *a11 = a12;
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlPeReqBagData::Deserialize(BlueFin::GlPeReqBagData *this, BlueFin::GlSysLogEntry *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 12);
  if (v2 <= 3)
  {
    if (v2 < 2) {
      char S8 = -2;
    }
    else {
      char S8 = BlueFin::GlSysLogEntry::GetS8(a2);
    }
    *((unsigned char *)this + 8) = S8;
    *((_WORD *)this + 5) = BlueFin::GlSysLogEntry::GetS16(a2);
    unsigned int v6 = *((unsigned __int8 *)a2 + 12);
    unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
    unsigned int v8 = U32;
    if (v6 < 2)
    {
      unsigned int v9 = BlueFin::GlSysLogEntry::GetU32(a2);
      unsigned int v10 = v8 - v9;
      if (v8 < v9) {
        unsigned int v10 = 0;
      }
      *((_DWORD *)this + 4) = v10;
      int v11 = *((__int16 *)this + 5);
      if (v11 >= (__int16)v10) {
        *((_DWORD *)this + 3) = v11 - v10;
      }
      else {
        *((_DWORD *)this + 3) = 0;
      }
    }
    else
    {
      *((_DWORD *)this + 3) = U32;
      *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    }
    if (*((unsigned char *)a2 + 12) == 2) {
      int S16 = BlueFin::GlSysLogEntry::GetS16(a2);
    }
    else {
      int S16 = BlueFin::GlSysLogEntry::GetS32(a2);
    }
    *((_DWORD *)this + 5) = S16;
    BOOL v13 = *((unsigned char *)a2 + 12) != 1 && BlueFin::GlSysLogEntry::GetU8(a2) != 0;
    *((unsigned char *)this + 24) = v13;
    if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
    {
      DeviceFaultNotify("glpe_reqbag.cpp", 3440, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqbag.cpp", 3440, "otEntry.DataSize() == otEntry.ReadIdx()");
    }
  }
  return v2 < 4;
}

uint64_t BlueFin::GlPeReqBagData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = 3;
  }
  if ((v5 & 0xFE) != 2)
  {
    DeviceFaultNotify("glpe_reqbag.cpp", 3504, "SerializeImpl", (char)"ucVersion >= 2 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqbag.cpp", 3504, "ucVersion >= 2 && ucVersion <= 3");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v11 = 46;
    char v12 = v5;
    uint64_t v13 = 0x1000000000000;
    unsigned int v10 = &unk_270EBA2F0;
    char v14 = v5;
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v7 + 10));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 16));
    int v8 = *(_DWORD *)(v7 + 20);
    if (v5 == 2) {
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, v8);
    }
    else {
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v10, v8);
    }
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 24));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v6, 4);
  }
  return 1;
}

BlueFin::GlBitBuffer *BlueFin::GlPeReqBag::GetPreviousPositionBuffer(BlueFin::GlPeReqBag *this, unsigned int *a2, int a3, unsigned int *a4)
{
  long long v8 = *((_OWORD *)this + 1290);
  char v9 = *((unsigned char *)this + 20656);
  int v10 = *((_DWORD *)this + 5165);
  unsigned int v5 = *((_DWORD *)this + 5167);
  uint64_t v13 = *((void *)this + 2584);
  v7[8] = 0;
  BlueFin::GlBitBuffer::Initialize((uint64_t)v7, a2, a3);
  unsigned int v11 = v5;
  int v12 = 0;
  char v14 = 0;
  uint64_t result = BlueFin::GlBitBuffer::Put((BlueFin::GlBitBuffer *)v7, (BlueFin::GlBitBuffer *)&v8, v5);
  *a4 = v7[7];
  return result;
}

BlueFin::GlBitBuffer *BlueFin::GlPeReqBag::SetPreviousPositionBuffer(BlueFin::GlPeReqBag *this, const unsigned int *a2, int a3, unsigned int a4)
{
  uint64_t v6 = (unsigned int *)((char *)this + 20660);
  int v11 = 0;
  BlueFin::GlBitBuffer::InitializeForRead((uint64_t)v9, a2, a3);
  v6[4] = 0;
  *(void *)(v6 + 1) = *v6;
  *((unsigned char *)v6 + 20) = 0;
  BlueFin::GlBitBuffer::Position((uint64_t)v9, a4);
  unsigned int v7 = v10;
  v9[6] = v10;
  unsigned int v10 = 0;
  char v12 = 0;
  return BlueFin::GlBitBuffer::Put((BlueFin::GlPeReqBag *)((char *)this + 20640), (BlueFin::GlBitBuffer *)v9, v7);
}

BOOL BlueFin::GlPeReqBag::ReadPreviousPosition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 20668);
  if (v4 / 0x12E > a2)
  {
    uint64_t v6 = (BlueFin::GlBitBuffer *)(a1 + 20640);
    unsigned int v7 = (BlueFin::GlBitBuffer *)BlueFin::GlBitBuffer::Position(a1 + 20640, 302 * a2);
    *(unsigned char *)a3 = BlueFin::GlBitBuffer::GetU(v7, 1u) != 0;
    *(unsigned char *)(a3 + 1) = BlueFin::GlBitBuffer::GetU(v6, 1u) != 0;
    *(unsigned char *)(a3 + 2) = BlueFin::GlBitBuffer::GetU(v6, 1u) != 0;
    *(unsigned char *)(a3 + 3) = BlueFin::GlBitBuffer::GetU(v6, 1u) != 0;
    *(_DWORD *)(a3 + 8) = BlueFin::GlBitBuffer::GetU(v6, 0x20u);
    *(_WORD *)(a3 + 12) = BlueFin::GlBitBuffer::GetU(v6, 0x10u);
    *(double *)(a3 + 16) = (double)(int)BlueFin::GlBitBuffer::GetU(v6, 0x20u) * 0.0000000419095166;
    *(double *)(a3 + 24) = (double)(int)BlueFin::GlBitBuffer::GetU(v6, 0x20u) * 0.0000000838190367;
    int v8 = BlueFin::GlBitBuffer::GetU(v6, 0x10u);
    if ((v8 & 0xFFFF8000) == 0x8000) {
      int v9 = -65536;
    }
    else {
      int v9 = 0;
    }
    *(double *)(a3 + 32) = (double)(v9 + v8);
    *(double *)(a3 + 40) = (double)BlueFin::GlBitBuffer::GetU(v6, 0x10u) * 0.0158730159;
    int v10 = BlueFin::GlBitBuffer::GetU(v6, 0x10u);
    if ((v10 & 0xFFFF8000) == 0x8000) {
      int v11 = -65536;
    }
    else {
      int v11 = 0;
    }
    *(double *)(a3 + 48) = (double)(v11 + v10) * 0.010989011;
    *(unsigned char *)(a3 + 5) = BlueFin::GlBitBuffer::GetU(v6, 1u) != 0;
    *(unsigned char *)(a3 + 4) = BlueFin::GlBitBuffer::GetU(v6, 1u) != 0;
    float v12 = (double)BlueFin::GlBitBuffer::GetU(v6, 0x10u) * 0.01;
    *(float *)(a3 + 56) = v12;
    *(float *)(a3 + 60) = (float)BlueFin::GlBitBuffer::GetU(v6, 0x20u);
    *(void *)(a3 + 64) = BlueFin::GlBitBuffer::GetU(v6, 0x20u) << 32;
    *(void *)(a3 + 64) |= BlueFin::GlBitBuffer::GetU(v6, 0x20u);
    float v13 = (double)(BlueFin::GlBitBuffer::GetU(v6, 0x18u) - 2000000) * 0.001;
    *(float *)(a3 + 72) = v13;
    BlueFin::GlBitBuffer::Position((uint64_t)v6, v4);
  }
  return v4 / 0x12E > a2;
}

void BlueFin::GlPeReqBagData::~GlPeReqBagData(BlueFin::GlPeReqBagData *this)
{
}

uint64_t BlueFin::GlPeRqHdlr::SetCurrentTimeOsMs(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  unsigned int v2 = 1000 * *(__int16 *)(v1 + 22);
  unsigned int v3 = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(v1 + 28);
  unsigned int v4 = 1000 * *(_DWORD *)(v1 + 36);
  if (v3 > v2) {
    *(unsigned char *)(this + 23) = 1;
  }
  if (v3 > v4) {
    *(unsigned char *)(this + 24) = 1;
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlr::FinalizeNmea(BlueFin::GlPeRqHdlr *this, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](this, a2);
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 18))
  {
    unsigned int v5 = v4;
    uint64_t v6 = v3;
    uint64_t v7 = result;
    memset(v43, 0, 320);
    bzero(v17, 0x1CF0uLL);
    memset(&v17[7408], 248, 24);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    BlueFin::GlPeNmeaGen::FormatNmeaPFM(**(BlueFin::GlPeNmeaGen ***)(v7 + 56), (const BlueFin::GlPePlatfStat *)(*(void *)(*(void *)(v7 + 56) + 88) + 31808), (BlueFin::GlFormat *)v43, (const char *)0x140);
    __int16 v8 = strlen(v43);
    if ((*(unsigned int (**)(uint64_t, void, unsigned char *, char *, void))(*(void *)v7 + 40))(v7, 0, v17, v43, v8))
    {
      GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v7 + 48), v43);
    }
    int v9 = *(void **)(v7 + 56);
    uint64_t v10 = v9[11];
    uint64_t v11 = *(void *)(v10 + 33048);
    if (v11)
    {
      BlueFin::GlPeNmeaGen::FormatNmeaPFA(*v9, *(void *)(v10 + 33048), 0, (BlueFin::GlFormat *)v43, 320);
      __int16 v12 = strlen(v43);
      if ((*(unsigned int (**)(uint64_t, void, unsigned char *, char *, void))(*(void *)v7 + 40))(v7, 0, v17, v43, v12))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v7 + 48), v43);
      }
      BlueFin::GlPeNmeaGen::FormatNmeaPFA(**(void **)(v7 + 56), v11, 2u, (BlueFin::GlFormat *)v43, 320);
      __int16 v13 = strlen(v43);
      if ((*(unsigned int (**)(uint64_t, void, unsigned char *, char *, void))(*(void *)v7 + 40))(v7, 0, v17, v43, v13))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v7 + 48), v43);
      }
      BlueFin::GlPeNmeaGen::FormatNmeaPFA(**(void **)(v7 + 56), v11, 4u, (BlueFin::GlFormat *)v43, 320);
      __int16 v14 = strlen(v43);
      if ((*(unsigned int (**)(uint64_t, void, unsigned char *, char *, void))(*(void *)v7 + 40))(v7, 0, v17, v43, v14))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v7 + 48), v43);
      }
      BlueFin::GlPeNmeaGen::FormatNmeaPFA(**(void **)(v7 + 56), v11, 5u, (BlueFin::GlFormat *)v43, 320);
      __int16 v15 = strlen(v43);
      if ((*(unsigned int (**)(uint64_t, void, unsigned char *, char *, void))(*(void *)v7 + 40))(v7, 0, v17, v43, v15))
      {
        GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v7 + 48), v43);
      }
    }
    BlueFin::GlPeNmeaGen::FormatNmeaFIN(**(BlueFin::GlPeNmeaGen ***)(v7 + 56), *(unsigned int *)(v7 + 44), *(unsigned __int16 *)(v7 + 48), v6, v5, (BlueFin::GlFormat *)v43, 320);
    __int16 v16 = strlen(v43);
    uint64_t result = (*(uint64_t (**)(uint64_t, void, unsigned char *, char *, void))(*(void *)v7 + 40))(v7, 0, v17, v43, v16);
    if (result) {
      uint64_t result = GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v7 + 48), v43);
    }
    *(unsigned char *)(v7 + 18) = 1;
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlr::SetCntinMeas(uint64_t result)
{
  if (!*(unsigned char *)(result + 20)) {
    return (*(uint64_t (**)(void))(**(void **)(result + 8) + 528))();
  }
  return result;
}

BOOL BlueFin::GlPeRqHdlr::CheckAccyMaskTimeout(BlueFin::GlPeRqHdlr *this, int a2, int a3, int a4)
{
  return a2 >= 1 && 1000 * (unsigned __int16)a2 - a3 <= *((__int16 *)this + 21) + a4;
}

uint64_t BlueFin::GlPeRqHdlr::GetDynAccyMask_ToutForSmartphoneFF(uint64_t result, _DWORD *a2, unsigned int a3, _DWORD *a4, _WORD *a5)
{
  uint64_t v9 = result;
  switch(*a2)
  {
    case 0:
    case 2:
      unsigned int v10 = 1000
          * (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 384))(*(void *)(result + 8), 2);
      uint64_t v11 = **(void **)(v9 + 8);
      if (v10 <= a3) {
        goto LABEL_12;
      }
      unsigned int v12 = 1000 * (*(uint64_t (**)(void))(v11 + 384))();
      uint64_t v11 = **(void **)(v9 + 8);
      if (v12 <= a3) {
        goto LABEL_12;
      }
      if (1000 * (*(unsigned int (**)(void))(v11 + 384))() > a3) {
        goto LABEL_11;
      }
      *a4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 8) + 392))(*(void *)(v9 + 8), 1);
      __int16 v13 = *(uint64_t (**)(void))(**(void **)(v9 + 8) + 384);
      goto LABEL_15;
    case 1:
      unsigned int v14 = 1000
          * (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 384))(*(void *)(result + 8), 4);
      uint64_t v11 = **(void **)(v9 + 8);
      if (v14 <= a3) {
        goto LABEL_12;
      }
      if (1000 * (*(unsigned int (**)(void))(v11 + 384))() <= a3) {
        goto LABEL_14;
      }
      goto LABEL_11;
    case 3:
      unsigned int v15 = 1000
          * (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 8) + 384))(*(void *)(result + 8), 6);
      uint64_t v11 = **(void **)(v9 + 8);
      if (v15 <= a3)
      {
LABEL_12:
        *a4 = (*(uint64_t (**)(void))(v11 + 392))();
        __int16 v13 = *(uint64_t (**)(void))(**(void **)(v9 + 8) + 384);
      }
      else
      {
        if (1000 * (*(unsigned int (**)(void))(v11 + 384))() > a3)
        {
LABEL_11:
          uint64_t result = BlueFin::GlPeRqHdlr::GetReqSmartMaskAccyM_Startup(v9, a2);
          *a4 = result;
          return result;
        }
LABEL_14:
        *a4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 8) + 392))(*(void *)(v9 + 8), 2);
        __int16 v13 = *(uint64_t (**)(void))(**(void **)(v9 + 8) + 384);
      }
LABEL_15:
      uint64_t result = v13();
      *a5 = result;
      return result;
    default:
      return result;
  }
}

uint64_t BlueFin::GlPeReqHdlrParams::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (v4)
  {
    unsigned int v7 = v4;
    if (v4 >= 5)
    {
      DeviceFaultNotify("glpe_reqhdlr.cpp", 379, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 4");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr.cpp", 379, "ucVersion >= 1 && ucVersion <= 4");
    }
    if (v3)
    {
LABEL_8:
      int v14 = 57;
      char v15 = v7;
      uint64_t v16 = 0x1000000000000;
      __int16 v13 = &unk_270EBA2F0;
      char v17 = v7;
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v2 + 8));
      BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 12));
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 16));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 20));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 24));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 28));
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 32));
      if (v7 == 2)
      {
        for (uint64_t i = 0; i != 12; i += 4)
          BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 40 + i));
        for (uint64_t j = 0; j != 12; j += 2)
          BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 54 + j));
      }
      else
      {
        if (v7 < 3)
        {
LABEL_21:
          BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v13, v5, 4);
          return 1;
        }
        for (uint64_t k = 0; k != 16; k += 4)
          BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 36 + k));
        for (uint64_t m = 0; m != 14; m += 2)
          BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 52 + m));
      }
      if (v7 >= 4)
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 68));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 72));
      }
      goto LABEL_21;
    }
  }
  else
  {
    unsigned int v7 = 4;
    if (v3) {
      goto LABEL_8;
    }
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    goto LABEL_8;
  }
  return 1;
}

uint64_t BlueFin::GlPeReqHdlrParams::Deserialize(BlueFin::GlPeReqHdlrParams *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 57 || *((unsigned __int8 *)a2 + 12) - 5 < 0xFFFFFFFC) {
    return 0;
  }
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_WORD *)this + 6) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_WORD *)this + 16) = BlueFin::GlSysLogEntry::GetU16(a2);
  unsigned int v5 = *((unsigned __int8 *)a2 + 12);
  if (v5 == 2)
  {
    uint64_t v7 = 0;
    *((_DWORD *)this + 9) = 50;
    do
    {
      *(_DWORD *)((char *)this + v7 + 40) = BlueFin::GlSysLogEntry::GetU32(a2);
      v7 += 4;
    }
    while (v7 != 12);
    uint64_t v8 = 0;
    *((_WORD *)this + 26) = 90;
    do
    {
      *(_WORD *)((char *)this + v8 + 54) = BlueFin::GlSysLogEntry::GetU16(a2);
      v8 += 2;
    }
    while (v8 != 12);
    unsigned int v5 = *((unsigned __int8 *)a2 + 12);
  }
  else if (v5 == 1)
  {
    uint64_t v6 = 0;
    *(int32x4_t *)((char *)this + 36) = vmovl_s16((int16x4_t)BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default);
    do
    {
      *(_WORD *)((char *)this + v6 + 52) = *(_WORD *)((char *)&BlueFin::GlRequestImplPos::m_asSmartMaskToutS_default + v6);
      v6 += 2;
    }
    while (v6 != 14);
LABEL_21:
    int U32 = 0;
    *((_DWORD *)this + 17) = 0;
    goto LABEL_22;
  }
  if (v5 < 3) {
    goto LABEL_21;
  }
  for (uint64_t i = 0; i != 16; i += 4)
    *(_DWORD *)((char *)this + i + 36) = BlueFin::GlSysLogEntry::GetU32(a2);
  for (uint64_t j = 0; j != 14; j += 2)
    *(_WORD *)((char *)this + j + 52) = BlueFin::GlSysLogEntry::GetU16(a2);
  if (*((unsigned __int8 *)a2 + 12) < 4u) {
    goto LABEL_21;
  }
  *((_DWORD *)this + 17) = BlueFin::GlSysLogEntry::GetU32(a2);
  int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
LABEL_22:
  *((_DWORD *)this + 18) = U32;
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 505);
  return 1;
}

uint64_t BlueFin::GlPeReqStopEvent::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_reqhdlr.cpp", 524, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr.cpp", 524, "ucVersion == 1");
  }
  uint64_t v5 = v3;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v8 = 61;
    char v9 = 1;
    uint64_t v10 = 0x1000000000000;
    uint64_t v7 = &unk_270EBA2F0;
    char v11 = 1;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v7, *(_WORD *)(v2 + 8));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v7, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeReqStopEvent::Deserialize(BlueFin::GlPeReqStopEvent *this, BlueFin::GlSysLogEntry *a2)
{
  BOOL v2 = *((_DWORD *)a2 + 2) == 61 && *((unsigned char *)a2 + 12) == 1;
  uint64_t v3 = v2;
  if (v2)
  {
    *((_WORD *)this + 4) = BlueFin::GlSysLogEntry::GetU16(a2);
    BlueFin::GlSysLogEntry::CheckConsumed(a2, 548);
  }
  return v3;
}

double BlueFin::GlPeRqHdlr::GetSyncinPulseLms(BlueFin::GlPeRqHdlr *this)
{
  return 0.0;
}

uint64_t BlueFin::GlPeRqHdlr::GetSyncinTime()
{
  return 0;
}

uint64_t BlueFin::GlPeRqHdlr::GetInternalWarmStandbyPeriodOfReq(BlueFin::GlPeRqHdlr *this)
{
  return 0;
}

uint64_t BlueFin::GlPeRqHdlr::GetFixStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t BlueFin::GlPeRqHdlr::SetFailureStatus(uint64_t this)
{
  *(_DWORD *)(this + 44) = 1;
  return this;
}

uint64_t BlueFin::GlPeRqHdlr::Terminate(uint64_t this)
{
  *(unsigned char *)(this + 20) = 1;
  return this;
}

void BlueFin::GlPeReqHdlrParams::~GlPeReqHdlrParams(BlueFin::GlPeReqHdlrParams *this)
{
}

void BlueFin::GlPeReqStopEvent::~GlPeReqStopEvent(BlueFin::GlPeReqStopEvent *this)
{
}

uint64_t BlueFin::GlPeRqHdlrAsstStat::SetAsstStat(uint64_t result)
{
  if (!*(unsigned char *)(result + 20))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 8);
    BOOL v2 = *(uint64_t (**)(void))(result + 80);
    if (v2) {
      uint64_t result = v2();
    }
    *(unsigned char *)(v1 + 19) = 1;
  }
  return result;
}

void BlueFin::GlPeRqHdlrAsstStat::~GlPeRqHdlrAsstStat(BlueFin::GlPeRqHdlrAsstStat *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrCntin::SetCntinMeas(uint64_t result)
{
  if (!*(unsigned char *)(result + 20))
  {
    uint64_t v1 = result;
    uint64_t result = *(void *)(result + 8);
    if (*(_DWORD *)(result + 16) == 5) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 528))(result);
    }
    *(unsigned char *)(v1 + 19) = 1;
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrCntin::Cleanup(uint64_t this)
{
  if (*(unsigned char *)(this + 23)) {
    *(unsigned char *)(this + 19) = 1;
  }
  return BlueFin::GlPeRqHdlr::Cleanup(this);
}

void BlueFin::GlPeRqHdlrCntin::~GlPeRqHdlrCntin(BlueFin::GlPeRqHdlrCntin *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrCollectEph::SetFixStatus(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 20))
  {
    if (*(unsigned char *)(a2 + 4048)) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrCollectEph::SetSIGMeasuement(uint64_t this, const void **a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,float a23,unsigned __int8 a24,unsigned __int8 a25,unsigned __int16 a26,int a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,char a52,int a53,char a54,uint64_t a55,uint64_t a56,char a57,int a58,unsigned __int16 a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a80 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(this + 20))
  {
    uint64_t v73 = this;
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, &v100, 0x13u, a2 + 1);
    bzero(*(void **)(v73 + 64), ((4 * *(unsigned __int8 *)(v73 + 72) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    a24 = v99;
    memcpy(&a28, __src, 4 * v99);
    a26 = 0;
    a25 = 0;
    a27 = a28;
    BlueFin::GlSetIterator::operator++(&a24);
    while (a25 != a24)
    {
      if (a26 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      double v74 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * a26;
      char v75 = *v74;
      LODWORD(v74) = v74[1];
      a57 = v75;
      a58 = (int)v74;
      a59 = a26;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)a2, (const BlueFin::GlSignalId *)&a57, 0, 0);
      if ((MeMeas[13] & 0x40) != 0 && *((float *)MeMeas + 27) >= 30.0) {
        *(_DWORD *)(*(void *)(v73 + 64) + (((unint64_t)*MeMeas >> 3) & 0x1C)) |= 1 << *MeMeas;
      }
      BlueFin::GlSetIterator::operator++(&a24);
    }
    uint64_t v77 = 0;
    a79 = &a57;
    do
    {
      int v78 = &a79[v77];
      unsigned int v79 = &a79[v77];
      *(void *)(v79 + 12) = 0;
      *(void *)int v78 = v79 + 12;
      v78[8] = 2;
      v77 += 24;
    }
    while (v77 != 168);
    int v97 = 66;
    this = (uint64_t)BlueFin::GlGnssSetIterator::GlGnssSetIterator((BlueFin::GlGnssSetIterator *)&a24, (const BlueFin::GlGnssSet *)(*(void *)(*(void *)(v73 + 56) + 24) + 120032));
    int v80 = a51;
    for (char i = a52; a51 != 6 || a52 != 14; char i = a52)
    {
      a53 = v80;
      a54 = i;
      HIDWORD(v95) = v80;
      char v96 = i;
      float v83 = *(uint64_t **)(*(void *)(v73 + 56) + 24);
      unsigned int v84 = *(_DWORD *)(v73 + 92);
      a23 = -90.0;
      int v85 = BlueFin::GlPeAsstMgr::computeAzElCommon(v83, (unsigned int *)&v95 + 1, v84, 0, (uint64_t)&v97, 0, &a23);
      if (a23 >= 0.0) {
        int v86 = v85;
      }
      else {
        int v86 = 0;
      }
      if (v86 == 1) {
        BlueFin::GlGnssSet::Add((uint64_t)&a57, (int *)&v95 + 1);
      }
      this = BlueFin::GlGnssSetIterator::operator++((uint64_t)&a24);
      int v80 = a51;
    }
    if (*(unsigned char *)(v73 + 88))
    {
      uint64_t v87 = 0;
      unsigned __int8 v88 = 0;
      double v89 = a79;
      do
      {
        this = BlueFin::GlSetBase::Cnt((BlueFin::GlSetBase *)&v89[v87]);
        v88 += this;
        v87 += 24;
      }
      while (v87 != 168);
      if (v88 >= 6u) {
        *(unsigned char *)(v73 + 19) = 1;
      }
    }
    int v90 = *(_DWORD *)(v73 + 36);
    if (v90 != -1)
    {
      unsigned int v91 = *(_DWORD *)(*(void *)(v73 + 8) + 28);
      unsigned int v92 = *(_DWORD *)(v73 + 32) + v90;
      BOOL v93 = v92 >= v91;
      unsigned int v94 = v92 - v91;
      if (v93)
      {
        if (v94 >> 5 > 0x752
          || v94 >> 4 >= 0x271 && (this = BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v73 + 64)), (this & 1) == 0))
        {
          *(unsigned char *)(v73 + 19) = 1;
        }
      }
    }
  }
  return this;
}

void BlueFin::GlPeRqHdlrCollectEph::~GlPeRqHdlrCollectEph(BlueFin::GlPeRqHdlrCollectEph *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::SPASerializer::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (v4) {
    char v7 = v4;
  }
  else {
    char v7 = 10;
  }
  int v13 = 93;
  char v14 = v7;
  uint64_t v15 = 0x1000000000000;
  uint64_t v12 = &unk_270EBA2F0;
  char v16 = v7;
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 0;
  }
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, *(_WORD *)(v2 + 8));
  int v8 = *(_DWORD *)(v6 + 8);
  if (v8)
  {
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, 500000);
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v6 + 24));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v6 + 28));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v6 + 32));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 36));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v6 + 40));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 44));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 45));
    int v8 = *(_DWORD *)(v6 + 8);
  }
  if ((v8 & 2) != 0)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 56));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 57));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 58));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 59));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, *(_WORD *)(v6 + 60));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v12, *(double *)(v6 + 240));
    int v8 = *(_DWORD *)(v6 + 8);
  }
  if ((v8 & 0x80) != 0)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 248));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 249));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 250));
    int v8 = *(_DWORD *)(v6 + 8);
  }
  if ((v8 & 0x74) != 0)
  {
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, *(_WORD *)(v6 + 64));
    BlueFin::GlSysLogEntry::PutBuffer((BlueFin::GlSysLogEntry *)&v12, *(const unsigned __int8 **)(v6 + 48), *(unsigned __int16 *)(v6 + 68));
    int v8 = *(_DWORD *)(v6 + 8);
  }
  if ((v8 & 8) != 0)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v12, *(unsigned char *)(v6 + 232));
    if (*(unsigned char *)(v6 + 232))
    {
      unint64_t v9 = 0;
      do
      {
        unint64_t v10 = v6 + 4 * v9;
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v10 + 152));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v10 + 72));
        ++v9;
      }
      while (v9 < *(unsigned __int8 *)(v6 + 232));
    }
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v5, 4);
  return 1;
}

uint64_t BlueFin::SPASerializer::Deserialize(BlueFin::SPASerializer *this, BlueFin::GlSysLogEntry *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)a2 + 2) != 93 || *((unsigned __int8 *)a2 + 12) > 0xAu) {
    return 0;
  }
  uint64_t v5 = (int *)((char *)this + 8);
  unint64_t v10 = (char *)this + 8;
  char v11 = 1;
  BlueFin::GlSysLogEntry::GetGlSet(a2, &v10);
  if (*((unsigned char *)this + 8))
  {
    *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU32(a2);
    BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 6) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 8) = BlueFin::GlSysLogEntry::GetU32(a2);
    if (*((unsigned __int8 *)a2 + 12) >= 3u) {
      *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetU8(a2);
    }
  }
  int v6 = *v5;
  if ((*v5 & 2) != 0)
  {
    *((double *)this + 30) = BlueFin::GlSysLogEntry::GetD64(a2);
    *((_DWORD *)this + 15) = BlueFin::GlSysLogEntry::GetU32(a2);
    int v6 = *((_DWORD *)this + 2);
  }
  if ((v6 & 0x64) != 0)
  {
    *((_DWORD *)this + 16) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 17) = BlueFin::GlSysLogEntry::GetBuffer(a2, (unsigned __int8 *)&v10, 0x1F4u);
    int v6 = *((_DWORD *)this + 2);
  }
  if ((v6 & 8) != 0)
  {
    if (*((unsigned char *)a2 + 12) == 1)
    {
      *((unsigned char *)this + 232) = 1;
      *((_DWORD *)this + 18) = BlueFin::GlSysLogEntry::GetU32(a2);
      *((_DWORD *)this + 38) = BlueFin::GlSysLogEntry::GetU32(a2);
    }
    else
    {
      int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
      *((unsigned char *)this + 232) = U8;
      if (U8)
      {
        unint64_t v8 = 0;
        do
        {
          unint64_t v9 = (char *)this + 4 * v8;
          *((_DWORD *)v9 + 38) = BlueFin::GlSysLogEntry::GetU32(a2);
          *((_DWORD *)v9 + 18) = BlueFin::GlSysLogEntry::GetU32(a2);
          ++v8;
        }
        while (v8 < *((unsigned __int8 *)this + 232));
      }
    }
  }
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 337);
  return 1;
}

uint64_t BlueFin::GlPeRqHdlrFactTest::GlPeRqHdlrFactTest(uint64_t a1, _DWORD *a2, int a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10 = BlueFin::GlPeRqHdlr::GlPeRqHdlr(a1, a2, a3, a4, a5);
  *(void *)uint64_t v10 = &unk_270EC52C8;
  *(void *)(v10 + 88) = 0;
  char v11 = (unsigned int *)(v10 + 88);
  *(void *)(v10 + 96) = 0;
  *(void *)(v10 + 102) = 0;
  *(unsigned char *)(v10 + 296) = 0;
  *(void *)(v10 + 64) = &unk_270EC5298;
  *(void *)(v10 + 72) = 0;
  *(void *)(v10 + 77) = 0;
  *(void *)(v10 + 120) = 0;
  *(void *)(v10 + 128) = 0;
  *(void *)(v10 + 112) = 0;
  *(void *)(v10 + 304) = 0;
  *(_DWORD *)(v10 + 311) = 0;
  *(void *)(v10 + 320) = a6;
  *(void *)(v10 + 328) = a6 + 344;
  *(void *)(v10 + 336) = a6 + 688;
  *(void *)(v10 + 344) = a6 + 1032;
  *(void *)(v10 + 352) = a6 + 1376;
  *(void *)(v10 + 360) = a6 + 1720;
  *(void *)(v10 + 368) = a6 + 2064;
  *(void *)(v10 + 376) = a6 + 2408;
  *(void *)(v10 + 384) = a6 + 2752;
  *(void *)(v10 + 392) = a6 + 3096;
  *(void *)(v10 + 400) = a6 + 3440;
  *(void *)(v10 + 408) = a6 + 3784;
  *(void *)(v10 + 416) = a6 + 4128;
  *(void *)(v10 + 424) = a6 + 4472;
  *(void *)(v10 + 432) = a6 + 4816;
  *(void *)(v10 + 440) = a6 + 5160;
  *(void *)(v10 + 448) = a6 + 5504;
  *(void *)(v10 + 456) = a6 + 5848;
  *(void *)(v10 + 464) = a6 + 6192;
  *(void *)(v10 + 472) = a6 + 6536;
  *(void *)(v10 + 480) = a2;
  *(_DWORD *)(v10 + 488) = 0;
  *(unsigned char *)(v10 + 492) = 0;
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(v10 + 8) + 240))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(a6, (unsigned __int8 *)v40, 0);
  uint64_t v12 = *(void *)(a1 + 328);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 240))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v12, (unsigned __int8 *)v40, 0);
  uint64_t v13 = *(void *)(a1 + 336);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 248))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v13, (unsigned __int8 *)v40, 1);
  uint64_t v14 = *(void *)(a1 + 344);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 248))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v14, (unsigned __int8 *)v40, 1);
  uint64_t v15 = *(void *)(a1 + 352);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 272))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v15, (unsigned __int8 *)v40, 2);
  uint64_t v16 = *(void *)(a1 + 360);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 272))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v16, (unsigned __int8 *)v40, 2);
  uint64_t v17 = *(void *)(a1 + 368);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 280))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v17, (unsigned __int8 *)v40, 0);
  uint64_t v18 = *(void *)(a1 + 376);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 280))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v18, (unsigned __int8 *)v40, 0);
  uint64_t v19 = *(void *)(a1 + 384);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 288))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v19, (unsigned __int8 *)v40, 3);
  uint64_t v20 = *(void *)(a1 + 392);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 288))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v20, (unsigned __int8 *)v40, 3);
  uint64_t v21 = *(void *)(a1 + 400);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 296))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v21, (unsigned __int8 *)v40, 4);
  uint64_t v22 = *(void *)(a1 + 408);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 296))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v22, (unsigned __int8 *)v40, 4);
  uint64_t v23 = *(void *)(a1 + 416);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 256))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v23, (unsigned __int8 *)v40, 7);
  uint64_t v24 = *(void *)(a1 + 424);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 256))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v24, (unsigned __int8 *)v40, 7);
  uint64_t v25 = *(void *)(a1 + 432);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 264))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v25, (unsigned __int8 *)v40, 8);
  uint64_t v26 = *(void *)(a1 + 440);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 264))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v26, (unsigned __int8 *)v40, 8);
  uint64_t v27 = *(void *)(a1 + 448);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 304))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v27, (unsigned __int8 *)v40, 5);
  uint64_t v28 = *(void *)(a1 + 456);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 304))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v28, (unsigned __int8 *)v40, 5);
  uint64_t v29 = *(void *)(a1 + 464);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 312))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v29, (unsigned __int8 *)v40, 9);
  uint64_t v30 = *(void *)(a1 + 472);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 8) + 312))(v40);
  BlueFin::GL_FACT_TEST_STATUS_wrapper::init(v30, (unsigned __int8 *)v40, 9);
  unsigned int v47 = 0;
  unsigned __int16 v48 = 0;
  int v49 = 0;
  int v50 = 16776961;
  memset(v40, 0, sizeof(v40));
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v46 = 0;
  (*(void (**)(void))(**(void **)(a1 + 480) + 456))();
  uint64_t v31 = *(unsigned int *)(a5[7] + 88);
  if (v31 <= 0x28) {
    int v32 = BlueFin::ulRfType2AsicNumber[v31];
  }
  else {
    int v32 = 0;
  }
  int v33 = DWORD2(v41);
  *(_DWORD *)(a1 + 76) = v40[0];
  *(_DWORD *)(a1 + 80) = v33;
  unsigned int v34 = v47;
  if (v47) {
    unsigned int v35 = 0xF4240 / v47;
  }
  else {
    unsigned int v35 = 0;
  }
  *char v11 = v35;
  unsigned int v36 = v34 * v48;
  if (v36) {
    unsigned int v37 = 0xF4240 / v36;
  }
  else {
    unsigned int v37 = 0;
  }
  int v38 = v49;
  *(_DWORD *)(a1 + 92) = v37;
  *(_DWORD *)(a1 + 96) = v38;
  *(_DWORD *)(a1 + 104) = v32;
  *(_DWORD *)(a1 + 72) |= 1u;
  *(unsigned char *)(a1 + 493) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 344))();
  *(unsigned char *)(a1 + 494) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 352))(*(void *)(a1 + 8));
  return a1;
}

void sub_263B42A8C(_Unwind_Exception *a1)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(v1);
  _Unwind_Resume(a1);
}

uint64_t BlueFin::GlPeRqHdlrFactTest::SetCntinMeas(uint64_t result, int a2, double a3)
{
  v8[7] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(result + 336);
  v8[0] = *(void *)(result + 320);
  v8[1] = v3;
  uint64_t v4 = *(void *)(result + 368);
  v8[2] = *(void *)(result + 352);
  v8[3] = v4;
  uint64_t v5 = *(void *)(result + 400);
  _OWORD v8[4] = *(void *)(result + 384);
  v8[5] = v5;
  v8[6] = *(void *)(result + 464);
  if (!*(unsigned char *)(result + 20))
  {
    for (uint64_t i = 0; i != 7; ++i)
    {
      uint64_t v7 = v8[i];
      if (*(_WORD *)(v7 + 12) != 255)
      {
        *(_DWORD *)(v7 + 100) = a2;
        *(_WORD *)(v7 + 104) = a2 == 1;
        *(double *)(v7 + 112) = a3;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrFactTest::SetPlatfStat(uint64_t this, const BlueFin::GlPePlatfStat *a2)
{
  v69[7] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(this + 336);
  v69[0] = *(void *)(this + 320);
  v69[1] = v2;
  uint64_t v3 = *(void *)(this + 368);
  v69[2] = *(void *)(this + 352);
  v69[3] = v3;
  uint64_t v4 = *(void *)(this + 400);
  v69[4] = *(void *)(this + 384);
  v69[5] = v4;
  v69[6] = *(void *)(this + 464);
  if (*(unsigned char *)(this + 20)) {
    return this;
  }
  uint64_t v6 = this;
  uint64_t v7 = 0;
  unint64_t v8 = (long long *)((char *)a2 + 252);
  unint64_t v9 = (char *)a2 + 332;
  uint64_t v10 = (char *)a2 + 336;
  char v11 = (char *)a2 + 84;
  uint64_t v12 = (char *)a2 + 88;
  uint64_t v13 = (char *)a2 + 76;
  uint64_t v14 = (char *)a2 + 80;
  uint64_t v15 = (char *)a2 + 68;
  uint64_t v16 = (char *)a2 + 72;
  this = (uint64_t)a2 + 60;
  uint64_t v17 = (char *)a2 + 64;
  uint64_t v18 = v69;
  uint64_t v19 = 1;
  uint64_t v20 = 3;
  do
  {
    uint64_t v21 = v69[v7];
    int v22 = *(unsigned __int16 *)(v21 + 12);
    if (v22 != 255)
    {
      *(_WORD *)(v21 + 120) = *((unsigned __int8 *)a2 + 196);
      *(double *)(v21 + 128) = *((float *)a2 + 50);
      *(unsigned char *)(v21 + 152) = *((unsigned char *)a2 + 251);
      long long v23 = *v8;
      long long v24 = v8[1];
      *(_OWORD *)(v21 + 184) = *(long long *)((char *)v8 + 28);
      *(_OWORD *)(v21 + 172) = v24;
      *(_OWORD *)(v21 + 156) = v23;
      if ((v22 - 52) <= 0xD && !*(_DWORD *)(v21 + 4))
      {
        uint64_t v25 = *(void *)(v6 + 416);
        if (*(_WORD *)(v25 + 12) != 255)
        {
          *(_WORD *)(v25 + 120) = *((unsigned __int8 *)a2 + 196);
          *(double *)(v25 + 128) = *((float *)a2 + 50);
          *(unsigned char *)(v25 + 152) = *((unsigned char *)a2 + 251);
          long long v26 = *v8;
          long long v27 = v8[1];
          *(_OWORD *)(v25 + 184) = *(long long *)((char *)v8 + 28);
          *(_OWORD *)(v25 + 172) = v27;
          *(_OWORD *)(v25 + 156) = v26;
        }
        uint64_t v28 = *(void *)(v6 + 432);
        if (*(_WORD *)(v28 + 12) != 255)
        {
          *(_WORD *)(v28 + 120) = *((unsigned __int8 *)a2 + 196);
          *(double *)(v28 + 128) = *((float *)a2 + 50);
          *(unsigned char *)(v28 + 152) = *((unsigned char *)a2 + 251);
          long long v29 = *v8;
          long long v30 = v8[1];
          *(_OWORD *)(v28 + 184) = *(long long *)((char *)v8 + 28);
          *(_OWORD *)(v28 + 172) = v30;
          *(_OWORD *)(v28 + 156) = v29;
        }
      }
      if (*((unsigned char *)a2 + 170))
      {
        int v31 = *(unsigned __int16 *)(v21 + 12);
        if ((v31 - 1) > 0x1F)
        {
          if ((v31 - 52) > 0xD)
          {
            if ((v31 - 76) > 0x3E)
            {
              if ((v31 - 139) > 0x23)
              {
                if ((v31 - 66) <= 9)
                {
                  int v32 = v9;
                  int v33 = v10;
                  if (*((unsigned char *)a2 + 328))
                  {
LABEL_25:
                    *(_DWORD *)(v21 + 96) = *v32;
                    *(_DWORD *)(v21 + 92) = *(_DWORD *)v33;
                    *(_WORD *)(v21 + 88) = 1;
                    *(_DWORD *)uint64_t v21 = 3;
                  }
                }
              }
              else
              {
                int v32 = v11;
                int v33 = v12;
                if (*((unsigned char *)a2 + 174)) {
                  goto LABEL_25;
                }
              }
            }
            else
            {
              int v32 = v13;
              int v33 = v14;
              if (*((unsigned char *)a2 + 173)) {
                goto LABEL_25;
              }
            }
          }
          else
          {
            int v32 = v15;
            int v33 = v16;
            if (*((unsigned char *)a2 + 172)) {
              goto LABEL_25;
            }
          }
        }
        else
        {
          int v32 = (_DWORD *)this;
          int v33 = v17;
          if (*((unsigned char *)a2 + 171)) {
            goto LABEL_25;
          }
        }
      }
    }
    ++v7;
  }
  while (v7 != 7);
  uint64_t v34 = 0;
  unsigned int v35 = BlueFin::GlSvId::s_aucSvId2gnss;
  unsigned int v36 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType;
  do
  {
    uint64_t v37 = v69[v34];
    int v38 = *(_DWORD *)(v37 + 4);
    if (v38 == 5 || v38 == 3)
    {
      int v40 = *(unsigned __int16 *)(v37 + 12);
      if ((v40 - 76) < 0x63
        || ((v41 = v40 - 1, unsigned int v42 = v40 - 52, v41 >= 0x20) ? (v43 = v42 > 0xD) : (v43 = 0), !v43))
      {
        *(_WORD *)(v6 + 488) = (*(uint64_t (**)(void, char *, void *, uint64_t, uint64_t))(**(void **)(v6 + 8) + 328))(*(void *)(v6 + 8), v17, v18, v19, v20);
        uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(v6 + 8) + 336))();
        *(_WORD *)(v6 + 490) = v44;
        *(_DWORD *)(v37 + 308) = *(_DWORD *)(*(void *)(*(void *)(v6 + 56) + 56) + 912);
        uint64_t v45 = *(_WORD *)(v37 + 12);
        int v46 = 2 * (*(unsigned char *)(v37 + 320) == 3);
        v66[0] = *(_WORD *)(v37 + 12);
        int v67 = v46;
        __int16 v68 = 575;
        if ((v66[0] + 67) >= 0x44u)
        {
          uint64_t v47 = v35[v45];
          if (v36[8 * v46 - v46 + v47] == 255)
          {
            int v46 = -1;
            int v67 = -1;
          }
          else
          {
            __int16 v68 = BlueFin::GlSignalId::s_ausGnss2signalId[v47]
                + v45
                - BlueFin::GlSvId::s_aucGnss2minSvId[v47]
                + v46 * BlueFin::GlSvId::s_aucGnss2numSvId[v47];
          }
        }
        this = BlueFin::GlIqData::Svid2EnumGnssIQ(v44, v66, v46);
        if (this <= 7 && *((_DWORD *)a2 + this + 24))
        {
          unsigned __int16 v48 = *(_WORD *)(v37 + 316) + 1;
          *(_WORD *)(v37 + 316) = v48;
          if (*(unsigned __int16 *)(v6 + 490) < v48 && *(unsigned char *)(v37 + 321))
          {
            int v49 = v36;
            int v50 = v35;
            uint64_t v51 = BlueFin::GlIqData::Svid2EnumGnssIQ(this, v66, v46);
            if (v51 > 7) {
              unsigned int v52 = 0;
            }
            else {
              unsigned int v52 = *((_DWORD *)a2 + v51 + 24);
            }
            unsigned int v53 = BlueFin::GlIqData::Svid2EnumGnssIQ(v51, v66, v46);
            if (v53 > 7) {
              unsigned int v54 = 0;
            }
            else {
              unsigned int v54 = *((_DWORD *)a2 + v53 + 32);
            }
            double v55 = *(double *)(v37 + 288) + (double)v52;
            double v56 = *(double *)(v37 + 296) + (double)v54;
            *(double *)(v37 + 288) = v55;
            *(double *)(v37 + 296) = v56;
            float v57 = v55 / v56;
            *(float *)&double v55 = *(double *)(v37 + 40);
            float v58 = (float)(__exp10f(*(float *)&v55 / 10.0) * 20.0) / 1000.0;
            float v59 = (float)((float)((float)((float)((float)(v58 * 2.0) + 1.0) - v57)
                                / (float)((float)(v57 + 1.0) * (float)(v58 + v58)))
                        * -4.0)
                + 1.0;
            unsigned int v35 = v50;
            uint64_t v60 = v50[v45];
            unsigned int v36 = v49;
            GlCustomLog(20, "<FTPHN> Svid,%d, %s, CN0,%.2f,DbgArgSqrt,%.3f,IQRatio %.3f, ", *(__int16 *)(v37 + 12), BlueFin::GlSignalId::s_ausSignalType2str[v49[8 * v46 - v46 + v60]], *(double *)(v37 + 40), v59, v57);
            unsigned int v61 = "Phase noise is too high, variance cannot be computed,";
            if (v59 >= 0.0
              && (float v62 = (float)(1.0 - sqrtf(v59)) * 0.5,
                  GlCustomLog(20, "var,%.4f,rho,%.2f,", v62, v58),
                  unsigned int v61 = "Unique Error: value,",
                  v59 <= 1.0))
            {
              float v64 = sqrtf(v62) * 57.2957795;
              *(float *)(v37 + 312) = v64;
              float v65 = *(float *)(v37 + 308);
              *(_WORD *)(v37 + 304) = v65 > v64;
              GlCustomLog(20, "StdDev(degrees),%.2f,Threshold(degrees),%.2f,", v64, v65);
            }
            else
            {
              GlCustomLog(20, v61);
              *(_WORD *)(v37 + 304) = 0;
            }
            this = GlCustomLog(20, "%s\n");
          }
          else
          {
            this = GlCustomLog(20, "<FTPHN> Counter=%hu,Neglect=%hu,Svid=%d,CN0=%.2f, \n");
          }
        }
        uint64_t v63 = *(void *)(v6 + 320);
        if (*(unsigned __int16 *)(v63 + 316) - *(unsigned __int16 *)(v6 + 490) == *(unsigned __int16 *)(v6 + 488)
          && *(_DWORD *)(v63 + 4) == 5)
        {
          *(unsigned char *)(v6 + 492) = 1;
        }
      }
    }
    ++v34;
  }
  while (v34 != 7);
  return this;
}

BOOL BlueFin::GlPeRqHdlrFactTest::SetNmeaSentence(uint64_t a1, int a2, uint64_t a3, const char *a4, uint64_t a5)
{
  v105[10] = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)(a1 + 20);
  if (!*(unsigned char *)(a1 + 20))
  {
    uint64_t v10 = *(void *)(a1 + 328);
    uint64_t v11 = *(void *)(a1 + 336);
    uint64_t v12 = *(void *)(a1 + 344);
    v105[0] = *(void *)(a1 + 320);
    v105[1] = v11;
    uint64_t v13 = *(void *)(a1 + 360);
    uint64_t v14 = *(void *)(a1 + 368);
    uint64_t v15 = *(void *)(a1 + 376);
    v105[2] = *(void *)(a1 + 352);
    v105[3] = v14;
    uint64_t v16 = *(void *)(a1 + 392);
    uint64_t v17 = *(void *)(a1 + 400);
    uint64_t v18 = *(void *)(a1 + 408);
    v105[4] = *(void *)(a1 + 384);
    v105[5] = v17;
    uint64_t v19 = *(void *)(a1 + 416);
    uint64_t v20 = *(void *)(a1 + 424);
    uint64_t v22 = *(void *)(a1 + 432);
    uint64_t v21 = *(void *)(a1 + 440);
    v105[6] = v19;
    v105[7] = v22;
    uint64_t v23 = *(void *)(a1 + 456);
    uint64_t v24 = *(void *)(a1 + 464);
    uint64_t v25 = *(void *)(a1 + 472);
    v105[8] = *(void *)(a1 + 448);
    v105[9] = v24;
    v104[0] = v10;
    v104[1] = v12;
    v104[2] = v13;
    v104[3] = v15;
    v104[4] = v16;
    v104[5] = v18;
    v104[6] = v20;
    v104[7] = v21;
    v104[8] = v23;
    v104[9] = v25;
    if (!*(unsigned char *)(a1 + 16))
    {
      *(unsigned char *)(a1 + 16) = 1;
      BlueFin::GlPeNmeaGen::FormatNmeaRID(**(BlueFin::GlPeNmeaGen ***)(a1 + 56), (BlueFin::GlFormat *)__s, 80, a4);
      GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(a1 + 48), __s);
      __int16 v26 = strlen(__s);
      (*(void (**)(void, char *, void))(**(void **)(a1 + 480) + 504))(*(void *)(a1 + 480), __s, v26);
    }
    (*(void (**)(void, const char *, uint64_t))(**(void **)(a1 + 480) + 504))(*(void *)(a1 + 480), a4, a5);
    if (a2 != 1)
    {
      if (a2 != 8) {
        goto LABEL_179;
      }
      uint64_t v27 = 0;
      __s[0] = 0;
      while (1)
      {
        uint64_t v28 = (int *)v105[v27];
        if (*((_WORD *)v28 + 6) == 255) {
          goto LABEL_18;
        }
        int v29 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 360))(*(void *)(a1 + 8));
        int v30 = *v28;
        BOOL v31 = *v28 < v29 || v30 == 8;
        if (v31 && !*(unsigned char *)(a1 + 23)) {
          goto LABEL_18;
        }
        if (!v30)
        {
          if (!*((_WORD *)v28 + 7)) {
            goto LABEL_18;
          }
          uint64_t v32 = *(void *)(a1 + 320);
          BOOL v33 = *(_WORD *)(v32 + 12) == 255 || *(unsigned __int16 *)(v32 + 14) != 0;
          uint64_t v46 = *(void *)(a1 + 336);
          if (*(_WORD *)(v46 + 12) != 255 && !*(_WORD *)(v46 + 14)) {
            BOOL v33 = 0;
          }
          uint64_t v47 = *(void *)(a1 + 352);
          if (*(_WORD *)(v47 + 12) != 255 && !*(_WORD *)(v47 + 14)) {
            BOOL v33 = 0;
          }
          uint64_t v48 = *(void *)(a1 + 384);
          if (*(_WORD *)(v48 + 12) != 255 && !*(_WORD *)(v48 + 14)) {
            BOOL v33 = 0;
          }
          uint64_t v49 = *(void *)(a1 + 400);
          if (*(_WORD *)(v49 + 12) != 255 && !*(_WORD *)(v49 + 14)) {
            BOOL v33 = 0;
          }
          uint64_t v50 = *(void *)(a1 + 448);
          if (*(_WORD *)(v50 + 12) == 255)
          {
            if (!v33) {
              goto LABEL_18;
            }
          }
          else
          {
            if (!*(_WORD *)(v50 + 14)) {
              LOBYTE(v33) = 0;
            }
            if (!v33) {
              goto LABEL_18;
            }
          }
        }
        if ((v29 - 1) <= 2 && !v28[2])
        {
          uint64_t v34 = *(void *)(a1 + 320);
          unsigned int v35 = *(_DWORD *)(v34 + 4);
          if (*(unsigned __int16 *)(v34 + 12) <= 0xFFu)
          {
            switch(v35)
            {
              case 0u:
                if (!*(_DWORD *)v34) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v51 = *(_DWORD *)v34;
                BOOL v52 = v51 <= 4 && v51 >= v35;
                if (!v52) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              case 6u:
              case 7u:
                break;
              default:
                goto LABEL_184;
            }
          }
          uint64_t v36 = *(void *)(a1 + 336);
          unsigned int v37 = *(_DWORD *)(v36 + 4);
          if (*(unsigned __int16 *)(v36 + 12) <= 0xFFu)
          {
            switch(v37)
            {
              case 0u:
                if (!*(_DWORD *)v36) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v53 = *(_DWORD *)v36;
                if (v53 > 4 || v53 < v37) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              case 6u:
              case 7u:
                break;
              default:
                goto LABEL_184;
            }
          }
          uint64_t v38 = *(void *)(a1 + 352);
          unsigned int v39 = *(_DWORD *)(v38 + 4);
          if (*(unsigned __int16 *)(v38 + 12) <= 0xFFu)
          {
            switch(v39)
            {
              case 0u:
                if (!*(_DWORD *)v38) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v55 = *(_DWORD *)v38;
                if (v55 > 4 || v55 < v39) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              case 6u:
              case 7u:
                break;
              default:
                goto LABEL_184;
            }
          }
          uint64_t v40 = *(void *)(a1 + 368);
          if (*(_WORD *)(v40 + 12) != 255)
          {
            unsigned int v56 = *(_DWORD *)(v40 + 4);
            switch(v56)
            {
              case 0u:
                if (!*(_DWORD *)v40) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v57 = *(_DWORD *)v40;
                if (v57 > 4 || v57 < v56) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              default:
                break;
            }
          }
          uint64_t v41 = *(void *)(a1 + 384);
          if (*(_WORD *)(v41 + 12) != 255)
          {
            unsigned int v58 = *(_DWORD *)(v41 + 4);
            switch(v58)
            {
              case 0u:
                if (!*(_DWORD *)v41) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v59 = *(_DWORD *)v41;
                if (v59 > 4 || v59 < v58) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              default:
                break;
            }
          }
          uint64_t v42 = *(void *)(a1 + 400);
          if (*(_WORD *)(v42 + 12) != 255)
          {
            unsigned int v60 = *(_DWORD *)(v42 + 4);
            switch(v60)
            {
              case 0u:
                if (!*(_DWORD *)v42) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v61 = *(_DWORD *)v42;
                if (v61 > 4 || v61 < v60) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              default:
                break;
            }
          }
          uint64_t v43 = *(void *)(a1 + 448);
          if (*(_WORD *)(v43 + 12) != 255)
          {
            unsigned int v62 = *(_DWORD *)(v43 + 4);
            switch(v62)
            {
              case 0u:
                if (!*(_DWORD *)v43) {
                  break;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v63 = *(_DWORD *)v43;
                if (v63 > 4 || v63 < v62) {
                  goto LABEL_18;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_18;
              default:
                break;
            }
          }
          uint64_t v44 = *(void *)(a1 + 464);
          if (*(_WORD *)(v44 + 12) != 255)
          {
            unsigned int v45 = *(_DWORD *)(v44 + 4);
            switch(v45)
            {
              case 0u:
                if (v30 != 8 && !*(_DWORD *)v44) {
                  goto LABEL_106;
                }
                goto LABEL_18;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                if (v30 != 8 && *(_DWORD *)v44 <= 4u && *(_DWORD *)v44 >= v45) {
                  goto LABEL_106;
                }
                goto LABEL_18;
              case 5u:
              case 8u:
                goto LABEL_18;
              default:
                break;
            }
          }
        }
        if (v30 != 8)
        {
LABEL_106:
          int v64 = *(_DWORD *)(a1 + 36);
          if (v64 == -1)
          {
            int v66 = *(_DWORD *)(a1 + 32);
            int v69 = 1;
          }
          else
          {
            unsigned int v65 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
            int v66 = *(_DWORD *)(a1 + 32);
            unsigned int v67 = v66 + v64;
            BOOL v52 = v67 >= v65;
            int v68 = v67 - v65;
            if (v52) {
              int v69 = v68;
            }
            else {
              int v69 = 1;
            }
          }
          BlueFin::GlPeNmeaGen::FormatNmeaFIX(**(BlueFin::GlPeNmeaGen ***)(a1 + 56), v69, v66 - *(_DWORD *)(a1 + 28), (BlueFin::GlFormat *)__s, 120);
          GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(a1 + 48), __s);
          __int16 v102 = strlen(__s);
          (*(void (**)(void, char *, void))(**(void **)(a1 + 480) + 504))(*(void *)(a1 + 480), __s, v102);
          goto LABEL_179;
        }
LABEL_18:
        if (++v27 == 10) {
          goto LABEL_179;
        }
      }
    }
    for (uint64_t i = 0; i != 10; ++i)
    {
      uint64_t v71 = v105[i];
      if (*(_WORD *)(v71 + 12) != 255)
      {
        if (*(_WORD *)(v71 + 14)) {
          *(unsigned char *)(v71 + 333) = 1;
        }
        *(_WORD *)(v71 + 136) = *(unsigned __int8 *)(a1 + 493);
        *(_DWORD *)(v71 + 8) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 368))(*(void *)(a1 + 8));
        *(_WORD *)(v71 + 206) = 1;
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 360))() == 2 && !*(_DWORD *)(v71 + 8))
        {
          uint64_t v72 = *(void *)(a1 + 320);
          unsigned int v73 = *(_DWORD *)(v72 + 4);
          if (*(unsigned __int16 *)(v72 + 12) <= 0xFFu)
          {
            switch(v73)
            {
              case 0u:
                if (!*(_DWORD *)v72) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v85 = *(_DWORD *)v72;
                if (v85 > 4 || v85 < v73) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
LABEL_172:
                *(_WORD *)(v71 + 206) = 0;
                goto LABEL_173;
              case 6u:
              case 7u:
                break;
              default:
LABEL_184:
                JUMPOUT(0);
            }
          }
          uint64_t v74 = *(void *)(a1 + 336);
          if (*(_WORD *)(v74 + 12) != 255)
          {
            unsigned int v87 = *(_DWORD *)(v74 + 4);
            switch(v87)
            {
              case 0u:
                if (!*(_DWORD *)v74) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v88 = *(_DWORD *)v74;
                if (v88 > 4 || v88 < v87) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
          uint64_t v75 = *(void *)(a1 + 352);
          if (*(_WORD *)(v75 + 12) != 255)
          {
            unsigned int v89 = *(_DWORD *)(v75 + 4);
            switch(v89)
            {
              case 0u:
                if (!*(_DWORD *)v75) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v90 = *(_DWORD *)v75;
                if (v90 > 4 || v90 < v89) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
          uint64_t v76 = *(void *)(a1 + 368);
          if (*(_WORD *)(v76 + 12) != 255)
          {
            unsigned int v91 = *(_DWORD *)(v76 + 4);
            switch(v91)
            {
              case 0u:
                if (!*(_DWORD *)v76) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v92 = *(_DWORD *)v76;
                if (v92 > 4 || v92 < v91) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
          uint64_t v77 = *(void *)(a1 + 384);
          if (*(_WORD *)(v77 + 12) != 255)
          {
            unsigned int v93 = *(_DWORD *)(v77 + 4);
            switch(v93)
            {
              case 0u:
                if (!*(_DWORD *)v77) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v94 = *(_DWORD *)v77;
                if (v94 > 4 || v94 < v93) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
          uint64_t v78 = *(void *)(a1 + 400);
          if (*(_WORD *)(v78 + 12) != 255)
          {
            unsigned int v79 = *(_DWORD *)(v78 + 4);
            switch(v79)
            {
              case 0u:
                if (!*(_DWORD *)v78) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v80 = *(_DWORD *)v78;
                if (v80 <= 4 && v80 >= v79) {
                  break;
                }
                goto LABEL_172;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
          uint64_t v81 = *(void *)(a1 + 448);
          if (*(_WORD *)(v81 + 12) != 255)
          {
            unsigned int v95 = *(_DWORD *)(v81 + 4);
            switch(v95)
            {
              case 0u:
                if (!*(_DWORD *)v81) {
                  break;
                }
                goto LABEL_172;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v96 = *(_DWORD *)v81;
                if (v96 > 4 || v96 < v95) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
          uint64_t v82 = *(void *)(a1 + 464);
          if (*(_WORD *)(v82 + 12) != 255)
          {
            unsigned int v83 = *(_DWORD *)(v82 + 4);
            switch(v83)
            {
              case 0u:
                if (*(_DWORD *)v82) {
                  goto LABEL_172;
                }
                break;
              case 1u:
              case 2u:
              case 3u:
              case 4u:
                unsigned int v84 = *(_DWORD *)v82;
                if (v84 > 4 || v84 < v83) {
                  goto LABEL_172;
                }
                break;
              case 5u:
              case 8u:
                goto LABEL_172;
              default:
                break;
            }
          }
        }
LABEL_173:
        if (*(unsigned char *)(v71 + 333) && !*(_WORD *)(v71 + 14))
        {
          uint64_t v97 = **(void **)(a1 + 56);
          uint64_t v98 = v104[i];
        }
        else
        {
          uint64_t v97 = **(void **)(a1 + 56);
          uint64_t v98 = v71;
        }
        BlueFin::GlPeNmeaGen::FormatNmeaFTS(v97, v98, (BlueFin::GlFormat *)__s, (const char *)0x96);
        __int16 v99 = strlen(__s);
        (*(void (**)(void, char *, void))(**(void **)(a1 + 480) + 504))(*(void *)(a1 + 480), __s, v99);
        GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(a1 + 48), __s);
      }
    }
LABEL_179:
    for (uint64_t j = 0; j != 10; ++j)
      memcpy((void *)v104[j], (const void *)v105[j], 0x158uLL);
  }
  return v5 == 0;
}

uint64_t BlueFin::GlPeRqHdlrFactTest::SetSIGMeasuement(uint64_t this, BlueFin::GlPeMsmtMgr *a2)
{
  if (!*(unsigned char *)(this + 20))
  {
    uint64_t v3 = (void *)this;
    uint64_t v4 = *(void *)(this + 320);
    if (*(_WORD *)(v4 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement(this, a2, v4, 0);
    }
    uint64_t v5 = v3[42];
    if (*(_WORD *)(v5 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v5, 0);
    }
    uint64_t v6 = v3[52];
    if (*(_WORD *)(v6 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v6, 0);
    }
    uint64_t v7 = v3[54];
    if (*(_WORD *)(v7 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v7, 0);
    }
    uint64_t v8 = v3[44];
    uint64_t v9 = *(unsigned __int16 *)(v8 + 12);
    if (v9 != 255)
    {
      if ((v9 + 67) < 0x44u
        || (uint64_t v10 = *(_WORD *)(v8 + 12),
            uint64_t v11 = BlueFin::GlSvId::s_aucSvId2gnss[v10],
            BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v11] == 255))
      {
        int v12 = 575;
      }
      else
      {
        int v12 = (__int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v11]
                      + v10
                      - BlueFin::GlSvId::s_aucGnss2minSvId[v11]);
      }
      if (((unint64_t)*(unsigned int *)(*((void *)a2 + 12) + 4 * (v12 >> 5)) >> (v12 & 0x1F))) {
        unsigned int v13 = 0;
      }
      else {
        unsigned int v13 = 3;
      }
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v8, v13);
    }
    uint64_t v14 = v3[46];
    if (*(_WORD *)(v14 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v14, 0);
    }
    uint64_t v15 = v3[48];
    int v16 = *(unsigned __int16 *)(v15 + 12);
    if (v16 != 255)
    {
      unsigned int v17 = 2;
      if ((v16 - 1) >= 0x20 && (v16 - 66) >= 0x6D)
      {
        if ((v16 - 175) >= 0xE)
        {
          DeviceFaultNotify("glpe_reqhdlr_fact_test.cpp", 842, "SetSIGMeasuement", (char)"0");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_fact_test.cpp", 842, "0");
        }
        unsigned int v17 = 0;
      }
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v15, v17);
    }
    uint64_t v18 = v3[50];
    if (*(_WORD *)(v18 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v18, 1u);
    }
    uint64_t v19 = v3[56];
    if (*(_WORD *)(v19 + 12) != 255) {
      this = BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v19, 0);
    }
    uint64_t v20 = v3[58];
    if (*(_WORD *)(v20 + 12) != 255)
    {
      return BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement((uint64_t)v3, a2, v20, 0);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlrFactTest::SetSIGMeasurement(uint64_t result, BlueFin::GlPeMsmtMgr *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = result;
  *(_WORD *)(a3 + 16) = 0;
  uint64_t v8 = *(_WORD *)(a3 + 12);
  v33[0] = *(_WORD *)(a3 + 12);
  int v34 = a4;
  __int16 v35 = 575;
  if ((v33[0] + 67) >= 0x44u)
  {
    uint64_t v9 = BlueFin::GlSvId::s_aucSvId2gnss[v8];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * a4 - a4 + v9] != 255)
    {
      __int16 v10 = BlueFin::GlSignalId::s_ausGnss2signalId[v9]
          + v8
          - BlueFin::GlSvId::s_aucGnss2minSvId[v9]
          + BlueFin::GlSvId::s_aucGnss2numSvId[v9] * (_WORD)a4;
      __int16 v35 = v10;
      goto LABEL_8;
    }
    int v34 = -1;
  }
  else if (v8 == 255)
  {
    return result;
  }
  __int16 v10 = 575;
LABEL_8:
  if ((*(unsigned int (**)(void))(**(void **)(result + 8) + 360))(*(void *)(result + 8)))
  {
    unsigned int v11 = 0x2030400u >> (8 * a4);
    if (a4 >= 4) {
      LOBYTE(v11) = 0;
    }
    *(unsigned char *)(a3 + 320) = v11;
  }
  if ((((unint64_t)*(unsigned int *)(*((void *)a2 + 1) + 4 * (v10 >> 5)) >> (v10 & 0x1F)) & 1) == 0)
  {
    int v18 = *(_DWORD *)(a3 + 4);
    if (!v18) {
      goto LABEL_59;
    }
    goto LABEL_54;
  }
  MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(a2, (const BlueFin::GlSignalId *)v33, 0, 0);
  unsigned int v13 = (float *)MeMeas;
  if (MeMeas)
  {
    if ((*((_DWORD *)MeMeas + 3) & 0x8002) != 2)
    {
      LOBYTE(v13) = 0;
      goto LABEL_46;
    }
    if (*((_DWORD *)MeMeas + 10)) {
      *(unsigned char *)(a3 + 332) = 1;
    }
    *(double *)(a3 + 56) = *(float *)(*(void *)(*(void *)(v7 + 56) + 56) + 40);
    double v14 = (float)(*((float *)MeMeas + 27) + -174.0);
    *(double *)(a3 + 24) = v14;
    if (*(_DWORD *)a3 == 8)
    {
      *(_DWORD *)a3 = 1;
      *(double *)(a3 + 32) = v14;
    }
    int v15 = *(_DWORD *)(a3 + 328);
    if (v15)
    {
      double v16 = *(double *)(a3 + 32);
      unsigned int v17 = *(_DWORD *)(a3 + 336);
    }
    else
    {
      int v19 = *(_DWORD *)a2;
      unsigned int v17 = v19 + 1000 * (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 320))(*(void *)(v7 + 8)) - 1100;
      *(_DWORD *)(a3 + 336) = v17;
      double v14 = *(double *)(a3 + 24);
      double v16 = 0.0;
    }
    double v20 = v16 + v14;
    *(double *)(a3 + 32) = v20;
    *(_DWORD *)(a3 + 328) = v15 + 1;
    if ((v15 & 0x80000000) == 0 && *(_DWORD *)a2 > v17)
    {
      double v20 = v20 / (double)(v15 + 1);
      *(double *)(a3 + 32) = v20;
      *(_DWORD *)(a3 + 328) = 0;
      *(_WORD *)(a3 + 16) = 1;
    }
    *(double *)(a3 + 40) = v14 + 174.0;
    *(double *)(a3 + 48) = v20 + 174.0;
    double v21 = v13[25];
    if (v21 >= 0.000000015)
    {
      *(_WORD *)(a3 + 64) = 0;
LABEL_34:
      if (*((unsigned char *)v13 + 13))
      {
        *(_WORD *)(a3 + 232) = 1;
        *(_WORD *)(a3 + 14) = 1;
      }
      int v23 = *(_DWORD *)(a3 + 4);
      if (*(_DWORD *)(a3 + 8) || v23 != 1)
      {
        if (!v23)
        {
LABEL_45:
          LOBYTE(v13) = 1;
          goto LABEL_46;
        }
      }
      else
      {
        *(_WORD *)(a3 + 14) = 1;
      }
      unsigned int v24 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v13 + 1)
                                                                   - *((int *)v13 + 1)
                                                                   + BlueFin::GlSvId::s_aucSvId2gnss[*(unsigned __int8 *)v13]];
      if (v24 <= 0xC && ((1 << v24) & 0x1041) != 0) {
        BOOL v25 = *((_DWORD *)v13 + 34) == 2;
      }
      else {
        BOOL v25 = *((_DWORD *)v13 + 34) > 2;
      }
      *(unsigned char *)(a3 + 321) = v25;
      goto LABEL_45;
    }
    unsigned int v22 = *(_DWORD *)a3;
    if ((*(_DWORD *)a3 - 1) >= 4)
    {
      if (v22 != 8) {
        goto LABEL_32;
      }
    }
    else if (v22 > 1)
    {
LABEL_32:
      *(_WORD *)(a3 + 64) = 1;
      *(double *)(a3 + 72) = (float)-v13[24];
      *(double *)(a3 + 80) = v21;
      goto LABEL_34;
    }
    *(_DWORD *)a3 = 2;
    goto LABEL_32;
  }
LABEL_46:
  int v26 = *(_DWORD *)(a3 + 328);
  double v27 = (double)v26;
  if (!v26) {
    double v27 = 1.0;
  }
  double v28 = *(double *)(a3 + 32) / v27;
  double v29 = *(double *)(a3 + 48);
  if (!*(_WORD *)(a3 + 16)) {
    double v29 = 0.0;
  }
  uint64_t v30 = 84;
  if (!*(_WORD *)(a3 + 14)) {
    uint64_t v30 = 70;
  }
  GlCustomLog(14, "<FT> SetSIGMeasurement SVID=%hd, CarrBand %d, NrgyFnd=%c, SigStr=%.2fdBm, AvgSigStr=%.2fdBm, Snr=%.2fdBHz, AvgSnr=%.2f\n", v33[0], v34, v30, *(double *)(a3 + 24), v28, *(double *)(a3 + 40), v29);
  int v18 = *(_DWORD *)(a3 + 4);
  if ((v13 & 1) == 0 && v18)
  {
LABEL_54:
    *(_DWORD *)(a3 + 14) = 0;
    *(_WORD *)(a3 + 64) = 0;
    if (*(unsigned char *)(a3 + 332)) {
      ++*(_DWORD *)(a3 + 200);
    }
  }
  if (v18 == 7)
  {
    int v31 = *(_DWORD *)(v7 + 32);
    if ((v31 - 1000) <= 0x3E7)
    {
      *(_WORD *)(a3 + 318) = 1;
      GlCustomLog(14, "<FT> GlPeRqHdlrFactTest::Sending Plat Sleep Ok as part of callback @CurrentLms (%u)\n", v31);
      goto LABEL_60;
    }
  }
LABEL_59:
  *(_WORD *)(a3 + 318) = 0;
LABEL_60:
  uint64_t result = *(void *)(v7 + 480);
  uint64_t v32 = *(uint64_t (**)(void))(result + 80);
  if (v32) {
    return v32();
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrFactTest::HandleFailure(BlueFin::GlPeRqHdlrFactTest *this, const BlueFin::GlMePlatfStat *a2)
{
  GlCustomLog(14, "<FT> GlPeRqHdlrFactTest::HandleFailure \n");
  uint64_t v4 = *((void *)this + 40);
  *(_DWORD *)(v4 + 236) = 1;
  uint64_t v5 = (_DWORD *)*((void *)this + 42);
  v5[59] = 1;
  uint64_t result = *((void *)this + 44);
  *(_DWORD *)(result + 236) = 1;
  uint64_t v7 = (_DWORD *)*((void *)this + 46);
  v7[59] = 1;
  uint64_t v8 = (_DWORD *)*((void *)this + 48);
  v8[59] = 1;
  uint64_t v9 = (_DWORD *)*((void *)this + 50);
  v9[59] = 1;
  __int16 v10 = (_DWORD *)*((void *)this + 56);
  v10[59] = 1;
  unsigned int v11 = (_DWORD *)*((void *)this + 58);
  v11[59] = 1;
  if (a2)
  {
    int v12 = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v4 + 272) = v12;
    int v13 = *((_DWORD *)a2 + 5);
    int v14 = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v4 + 256) = v13;
    int v16 = *((_DWORD *)a2 + 7);
    int v15 = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v4 + 264) = v16;
    *(_DWORD *)(v4 + 268) = v15;
    int v17 = *((_DWORD *)a2 + 3);
    int v18 = *((_DWORD *)a2 + 4);
    *(_DWORD *)(v4 + 248) = v17;
    *(_DWORD *)(v4 + 252) = v18;
    int v19 = *((_DWORD *)a2 + 1);
    int v20 = *((_DWORD *)a2 + 2);
    *(_DWORD *)(v4 + 240) = v19;
    *(_DWORD *)(v4 + 244) = v20;
    *(_DWORD *)(v4 + 260) = v14;
    v5[68] = v12;
    v5[63] = v18;
    v5[64] = v13;
    v5[66] = v16;
    v5[67] = v15;
    v5[61] = v20;
    v5[62] = v17;
    v5[60] = v19;
    v5[65] = v14;
    *(_DWORD *)(result + 272) = v12;
    *(_DWORD *)(result + 252) = v18;
    *(_DWORD *)(result + 256) = v13;
    *(_DWORD *)(result + 264) = v16;
    *(_DWORD *)(result + 268) = v15;
    *(_DWORD *)(result + 244) = v20;
    *(_DWORD *)(result + 248) = v17;
    *(_DWORD *)(result + 240) = v19;
    *(_DWORD *)(result + 260) = v14;
    v7[68] = v12;
    v7[63] = v18;
    v7[64] = v13;
    v7[66] = v16;
    v7[67] = v15;
    v7[61] = v20;
    v7[62] = v17;
    v7[60] = v19;
    v7[65] = v14;
    v8[68] = v12;
    v8[63] = v18;
    v8[64] = v13;
    v8[66] = v16;
    v8[67] = v15;
    v8[61] = v20;
    v8[62] = v17;
    v8[60] = v19;
    v8[65] = v14;
    v9[68] = v12;
    v9[63] = v18;
    v9[64] = v13;
    v9[66] = v16;
    v9[67] = v15;
    v9[61] = v20;
    v9[62] = v17;
    v9[60] = v19;
    v9[65] = v14;
    v10[68] = v12;
    v10[63] = v18;
    v10[64] = v13;
    v10[66] = v16;
    v10[67] = v15;
    v10[61] = v20;
    v10[62] = v17;
    v10[60] = v19;
    v10[65] = v14;
    v11[68] = v12;
    v11[63] = v18;
    v11[64] = v13;
    v11[66] = v16;
    v11[67] = v15;
    v11[61] = v20;
    v11[62] = v17;
    v11[60] = v19;
    v11[65] = v14;
  }
  if (*(_WORD *)(v4 + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    double v21 = *(uint64_t (**)(void))(result + 80);
    if (v21) {
      uint64_t result = v21();
    }
  }
  if (*(_WORD *)(*((void *)this + 42) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    unsigned int v22 = *(uint64_t (**)(void))(result + 80);
    if (v22) {
      uint64_t result = v22();
    }
  }
  if (*(_WORD *)(*((void *)this + 44) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    int v23 = *(uint64_t (**)(void))(result + 80);
    if (v23) {
      uint64_t result = v23();
    }
  }
  if (*(_WORD *)(*((void *)this + 46) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    unsigned int v24 = *(uint64_t (**)(void))(result + 80);
    if (v24) {
      uint64_t result = v24();
    }
  }
  if (*(_WORD *)(*((void *)this + 48) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    BOOL v25 = *(uint64_t (**)(void))(result + 80);
    if (v25) {
      uint64_t result = v25();
    }
  }
  if (*(_WORD *)(*((void *)this + 50) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    int v26 = *(uint64_t (**)(void))(result + 80);
    if (v26) {
      uint64_t result = v26();
    }
  }
  if (*(_WORD *)(*((void *)this + 56) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    double v27 = *(uint64_t (**)(void))(result + 80);
    if (v27) {
      uint64_t result = v27();
    }
  }
  if (*(_WORD *)(*((void *)this + 58) + 12) != 255)
  {
    uint64_t result = *((void *)this + 60);
    double v28 = *(uint64_t (**)(void))(result + 80);
    if (v28)
    {
      return v28();
    }
  }
  return result;
}

void *BlueFin::GlPeRqHdlrFactTest::SetMePlatfStats(void *this, const BlueFin::GlMePlatfStat *a2)
{
  if (a2)
  {
    uint64_t v2 = (_DWORD *)this[40];
    int v3 = *((_DWORD *)a2 + 9);
    v2[68] = v3;
    int v4 = *((_DWORD *)a2 + 5);
    int v5 = *((_DWORD *)a2 + 6);
    v2[64] = v4;
    int v6 = *((_DWORD *)a2 + 7);
    int v7 = *((_DWORD *)a2 + 8);
    v2[66] = v6;
    v2[67] = v7;
    int v8 = *((_DWORD *)a2 + 3);
    int v9 = *((_DWORD *)a2 + 4);
    v2[62] = v8;
    v2[63] = v9;
    int v10 = *((_DWORD *)a2 + 1);
    int v11 = *((_DWORD *)a2 + 2);
    v2[60] = v10;
    v2[61] = v11;
    v2[65] = v5;
    int v12 = (_DWORD *)this[42];
    v12[68] = v3;
    v12[63] = v9;
    v12[64] = v4;
    v12[66] = v6;
    v12[67] = v7;
    v12[61] = v11;
    v12[62] = v8;
    v12[60] = v10;
    v12[65] = v5;
    int v13 = (_DWORD *)this[44];
    v13[68] = v3;
    v13[63] = v9;
    v13[64] = v4;
    v13[66] = v6;
    v13[67] = v7;
    v13[61] = v11;
    v13[62] = v8;
    v13[60] = v10;
    v13[65] = v5;
    int v14 = (_DWORD *)this[46];
    v14[68] = v3;
    v14[63] = v9;
    v14[64] = v4;
    v14[66] = v6;
    v14[67] = v7;
    v14[61] = v11;
    v14[62] = v8;
    v14[60] = v10;
    v14[65] = v5;
    int v15 = (_DWORD *)this[58];
    v15[68] = v3;
    v15[63] = v9;
    v15[64] = v4;
    v15[66] = v6;
    v15[67] = v7;
    v15[61] = v11;
    v15[62] = v8;
    v15[60] = v10;
    v15[65] = v5;
  }
  return this;
}

uint64_t BlueFin::GlPeRqHdlrFactTest::CWResults(uint64_t this, __int16 a2, char a3, double a4, double a5, double a6, int a7)
{
  uint64_t v8 = this;
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v9 = (uint64_t *)(this + 320);
  switch(a7)
  {
    case 1:
      int v9 = (uint64_t *)(this + 336);
      break;
    case 2:
      int v9 = (uint64_t *)(this + 352);
      break;
    case 3:
      int v9 = (uint64_t *)(this + 384);
      break;
    case 4:
      int v9 = (uint64_t *)(this + 400);
      break;
    case 5:
      int v9 = (uint64_t *)(this + 448);
      break;
    case 7:
      int v9 = (uint64_t *)(this + 416);
      break;
    case 8:
      int v9 = (uint64_t *)(this + 432);
      break;
    default:
      break;
  }
  uint64_t v10 = *v9;
  *(_WORD *)(v10 + 204) = a2;
  *(double *)(v10 + 208) = a5;
  *(double *)(v10 + 216) = a6;
  *(double *)(v10 + 224) = a4;
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 320) = a7;
  double v11 = -a5;
  if (a5 >= 0.0) {
    double v11 = a5;
  }
  if (v11 <= 2.22044605e-16) {
    goto LABEL_19;
  }
  double v12 = -a6;
  if (a6 >= 0.0) {
    double v12 = a6;
  }
  if (v12 <= 2.22044605e-16) {
    goto LABEL_19;
  }
  double v13 = -a4;
  if (a4 >= 0.0) {
    double v13 = a4;
  }
  if (v13 <= 2.22044605e-16)
  {
LABEL_19:
    *(_WORD *)(v10 + 14) = 0;
    char v14 = 1;
  }
  else
  {
    char v14 = 0;
    *(_WORD *)(v10 + 14) = 1;
    double v15 = *(float *)(*(void *)(*(void *)(this + 56) + 56) + 40);
    *(double *)(v10 + 56) = v15;
    *(double *)(v10 + 224) = v15 + a4;
  }
  BOOL v16 = a5 == 1.79769313e308 || a6 == 1.79769313e308;
  __int16 v17 = !v16 && a6 < 0.00000005;
  *(_WORD *)(v10 + 64) = v17;
  if (a5 == 1.79769313e308 || a6 == 1.79769313e308 || (a3 & 1) == 0)
  {
    BlueFin::GlPeNmeaGen::FormatNmeaSPA(**(void **)(this + 56), v10, (BlueFin::GlFormat *)__s, (const char *)0x50);
    __int16 v18 = strlen(__s);
    (*(void (**)(void, char *, void))(**(void **)(v8 + 480) + 504))(*(void *)(v8 + 480), __s, v18);
    return GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(v8 + 48), __s);
  }
  else if ((v14 & 1) == 0)
  {
    *(unsigned char *)(this + 19) = 1;
  }
  return this;
}

char *BlueFin::GlPeRqHdlrFactTest::SpaResults(char *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(a2 + 185))
  {
    result[19] = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      *((_DWORD *)result + 25) = *(_DWORD *)(a2 + 220);
      result[108] = *(unsigned char *)(a2 + 224);
      result[109] = *(unsigned char *)(a2 + 235);
      int v5 = *(_DWORD *)(a2 + 228);
      if (v4 == 1)
      {
        if ((v5 & 0x400000) != 0)
        {
          result[312] = *(unsigned char *)(a2 + 232);
          *(_WORD *)(result + 313) = *(_WORD *)(a2 + 233);
          *((_DWORD *)result + 18) |= 0x80u;
          int v4 = 1;
        }
        else
        {
          *((void *)result + 38) = *(void *)(a2 + 192);
          int16x8_t v6 = *(int16x8_t *)(a2 + 200);
          *(int16x4_t *)v6.i8 = vrev32_s16(vmovn_s32((int32x4_t)v6));
          *((_DWORD *)result + 30) = vmovn_s16(v6).u32[0];
          *((_DWORD *)result + 31) = *(_DWORD *)a2;
          int v7 = *((_DWORD *)result + 18);
          *((_DWORD *)result + 18) = v7 | 2;
          uint64_t v8 = *(unsigned __int8 *)(a2 + 184);
          result[296] = v8;
          size_t v9 = 4 * v8;
          memcpy(result + 136, (const void *)(a2 + 24), 4 * v8);
          uint64_t result = (char *)memcpy(v2 + 216, (const void *)(a2 + 104), v9);
          *((_DWORD *)v2 + 18) = v7 | 0xA;
          int v5 = *(_DWORD *)(a2 + 228);
          int v4 = *(_DWORD *)(a2 + 4);
        }
        *((_DWORD *)v2 + 24) = v5;
      }
      int v10 = *(_DWORD *)(a2 + 8);
      uint64_t v11 = *(void *)(a2 + 16);
      if ((v5 & 0x400000) != 0)
      {
        int v12 = 64;
      }
      else if (*(unsigned char *)(a2 + 217))
      {
        int v12 = 32;
      }
      else
      {
        int v12 = 4;
      }
      *((_DWORD *)v2 + 32) = v4;
      *((_DWORD *)v2 + 33) = v10;
      *((void *)v2 + 14) = v11;
      int v13 = *((_DWORD *)v2 + 18) | v12;
      *((_DWORD *)v2 + 18) = v13;
      if (BlueFin::GlUtils::m_pInstance)
      {
        if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
        {
          uint64_t result = (char *)(*(uint64_t (**)(char *, void, void))(*((void *)v2 + 8) + 24))(v2 + 64, 0, 0);
          int v13 = *((_DWORD *)v2 + 18);
        }
      }
      *((_DWORD *)v2 + 18) = v13 & 0xFFFFFF00;
    }
  }
  return result;
}

void *BlueFin::GlPeRqHdlrFactTest::InitializeCWTest(void *result, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  if (*a2 != 255)
  {
    uint64_t v9 = result[40];
    *(_DWORD *)uint64_t v9 = 0;
    *(_WORD *)(v9 + 14) = 0;
    *(void *)(v9 + 224) = 0;
    *(_WORD *)(v9 + 64) = 0;
  }
  int v10 = *a3;
  if (v10 != 255)
  {
    uint64_t v11 = result[42];
    *(_DWORD *)uint64_t v11 = 0;
    *(_WORD *)(v11 + 14) = 0;
    *(void *)(v11 + 224) = 0;
    *(_WORD *)(v11 + 12) = v10;
    *(_WORD *)(v11 + 64) = 0;
    int v12 = *a7;
    if (v12 != 255)
    {
      uint64_t v13 = result[52];
      *(_DWORD *)uint64_t v13 = 0;
      *(_WORD *)(v13 + 14) = 0;
      *(void *)(v13 + 224) = 0;
      *(_WORD *)(v13 + 12) = v12;
      *(_WORD *)(v13 + 64) = 0;
    }
    int v14 = *a8;
    if (v14 != 255)
    {
      uint64_t v15 = result[54];
      *(_DWORD *)uint64_t v15 = 0;
      *(_WORD *)(v15 + 14) = 0;
      *(void *)(v15 + 224) = 0;
      *(_WORD *)(v15 + 12) = v14;
      *(_WORD *)(v15 + 64) = 0;
    }
  }
  if (*a4 != 255)
  {
    uint64_t v16 = result[44];
    *(_DWORD *)uint64_t v16 = 0;
    *(_WORD *)(v16 + 14) = 0;
    *(void *)(v16 + 224) = 0;
    *(_WORD *)(v16 + 64) = 0;
  }
  if (*a5 != 255)
  {
    uint64_t v17 = result[48];
    *(_DWORD *)uint64_t v17 = 0;
    *(_WORD *)(v17 + 14) = 0;
    *(void *)(v17 + 224) = 0;
    *(_WORD *)(v17 + 64) = 0;
  }
  if (*a6 != 255)
  {
    uint64_t v18 = result[50];
    *(_DWORD *)uint64_t v18 = 0;
    *(_WORD *)(v18 + 14) = 0;
    *(void *)(v18 + 224) = 0;
    *(_WORD *)(v18 + 64) = 0;
  }
  if (*a9 != 255)
  {
    uint64_t v19 = result[56];
    *(_DWORD *)uint64_t v19 = 0;
    *(_WORD *)(v19 + 14) = 0;
    *(void *)(v19 + 224) = 0;
    *(_WORD *)(v19 + 64) = 0;
  }
  return result;
}

void *BlueFin::GlPeRqHdlrFactTest::GetFactoryTestStatus(const void **a1, int a2, void *__dst)
{
  switch(a2)
  {
    case 0:
      int v3 = a1 + 41;
      break;
    case 1:
      int v3 = a1 + 43;
      break;
    case 2:
      int v3 = a1 + 45;
      break;
    case 3:
      int v3 = a1 + 49;
      break;
    default:
      DeviceFaultNotify("glpe_reqhdlr_fact_test.cpp", 1350, "GetFactoryTestStatus", (char)"0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_fact_test.cpp", 1350, "0");
  }
  int v4 = *v3;

  return memcpy(__dst, v4, 0x148uLL);
}

uint64_t BlueFin::GlPeRqHdlrFactTest::Cleanup(BlueFin::GlPeRqHdlrFactTest *this)
{
  int v2 = *(_DWORD *)(*(void *)(*((void *)this + 7) + 56) + 88);
  *(_DWORD *)(*((void *)this + 40) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))(*((void *)this + 1));
  *(_DWORD *)(*((void *)this + 42) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  *(_DWORD *)(*((void *)this + 44) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  *(_DWORD *)(*((void *)this + 46) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  *(_DWORD *)(*((void *)this + 48) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  *(_DWORD *)(*((void *)this + 50) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  *(_DWORD *)(*((void *)this + 56) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  *(_DWORD *)(*((void *)this + 58) + 4) = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))();
  BOOL v4 = (v2 - 5) <= 1
    && (uint64_t v3 = *((void *)this + 42), *(_WORD *)(v3 + 12) != 255)
    && *(unsigned __int16 *)(v3 + 232) == 0;
  if (!(*(unsigned int (**)(void))(**((void **)this + 1) + 368))(*((void *)this + 1))
    && (*(unsigned int (**)(void))(**((void **)this + 1) + 360))(*((void *)this + 1)))
  {
    uint64_t v15 = *((void *)this + 40);
    if (*(_WORD *)(v15 + 12) == 255)
    {
LABEL_35:
      uint64_t v16 = *((void *)this + 44);
      if (*(_WORD *)(v16 + 12) == 255)
      {
LABEL_36:
        uint64_t v17 = *((void *)this + 42);
        if (*(_WORD *)(v17 + 12) == 255)
        {
          BOOL v18 = 1;
LABEL_55:
          if (!v4 && v18)
          {
            uint64_t v23 = *((void *)this + 46);
            if (*(_WORD *)(v23 + 12) == 255)
            {
LABEL_60:
              uint64_t v25 = *((void *)this + 48);
              if (*(_WORD *)(v25 + 12) == 255)
              {
LABEL_61:
                uint64_t v26 = *((void *)this + 50);
                if (*(_WORD *)(v26 + 12) == 255)
                {
LABEL_62:
                  uint64_t v27 = *((void *)this + 56);
                  if (*(_WORD *)(v27 + 12) == 255)
                  {
LABEL_63:
                    uint64_t v28 = *((void *)this + 58);
                    if (*(_WORD *)(v28 + 12) == 255)
                    {
LABEL_64:
                      if (*(_WORD *)(v15 + 232)
                        || *(_WORD *)(v17 + 232)
                        || *(_WORD *)(v16 + 232)
                        || *(_WORD *)(v23 + 232)
                        || *(_WORD *)(v26 + 232)
                        || *(_WORD *)(v25 + 232)
                        || *(_WORD *)(v28 + 232))
                      {
                        *((unsigned char *)this + 19) = 1;
                      }
                    }
                    else
                    {
                      unsigned int v33 = *(_DWORD *)(v28 + 4);
                      switch(v33)
                      {
                        case 0u:
                          if (!*(_DWORD *)v28) {
                            goto LABEL_64;
                          }
                          break;
                        case 1u:
                        case 2u:
                        case 3u:
                        case 4u:
                          if (*(_DWORD *)v28 <= 4u && *(_DWORD *)v28 >= v33) {
                            goto LABEL_64;
                          }
                          break;
                        case 5u:
                        case 8u:
                          break;
                        default:
                          goto LABEL_64;
                      }
                    }
                  }
                  else
                  {
                    unsigned int v31 = *(_DWORD *)(v27 + 4);
                    switch(v31)
                    {
                      case 0u:
                        if (!*(_DWORD *)v27) {
                          goto LABEL_63;
                        }
                        break;
                      case 1u:
                      case 2u:
                      case 3u:
                      case 4u:
                        unsigned int v32 = *(_DWORD *)v27;
                        if (v32 <= 4 && v32 >= v31) {
                          goto LABEL_63;
                        }
                        break;
                      case 5u:
                      case 8u:
                        break;
                      default:
                        goto LABEL_63;
                    }
                  }
                }
                else
                {
                  unsigned int v30 = *(_DWORD *)(v26 + 4);
                  switch(v30)
                  {
                    case 0u:
                      if (!*(_DWORD *)v26) {
                        goto LABEL_62;
                      }
                      break;
                    case 1u:
                    case 2u:
                    case 3u:
                    case 4u:
                      if (*(_DWORD *)v26 <= 4u && *(_DWORD *)v26 >= v30) {
                        goto LABEL_62;
                      }
                      break;
                    case 5u:
                    case 8u:
                      break;
                    default:
                      goto LABEL_62;
                  }
                }
              }
              else
              {
                unsigned int v29 = *(_DWORD *)(v25 + 4);
                switch(v29)
                {
                  case 0u:
                    if (!*(_DWORD *)v25) {
                      goto LABEL_61;
                    }
                    break;
                  case 1u:
                  case 2u:
                  case 3u:
                  case 4u:
                    if (*(_DWORD *)v25 <= 4u && *(_DWORD *)v25 >= v29) {
                      goto LABEL_61;
                    }
                    break;
                  case 5u:
                  case 8u:
                    break;
                  default:
                    goto LABEL_61;
                }
              }
            }
            else
            {
              unsigned int v24 = *(_DWORD *)(v23 + 4);
              switch(v24)
              {
                case 0u:
                  if (!*(_DWORD *)v23) {
                    goto LABEL_60;
                  }
                  break;
                case 1u:
                case 2u:
                case 3u:
                case 4u:
                  if (*(_DWORD *)v23 <= 4u && *(_DWORD *)v23 >= v24) {
                    goto LABEL_60;
                  }
                  break;
                case 5u:
                case 8u:
                  break;
                default:
                  goto LABEL_60;
              }
            }
          }
        }
        else
        {
          unsigned int v21 = *(_DWORD *)(v17 + 4);
          BOOL v18 = 1;
          switch(v21)
          {
            case 0u:
              BOOL v18 = *(_DWORD *)v17 == 0;
              goto LABEL_55;
            case 1u:
            case 2u:
            case 3u:
            case 4u:
              BOOL v18 = *(_DWORD *)v17 < 5u && *(_DWORD *)v17 >= v21;
              goto LABEL_55;
            case 5u:
            case 8u:
              break;
            default:
              goto LABEL_55;
          }
        }
      }
      else
      {
        unsigned int v20 = *(_DWORD *)(v16 + 4);
        switch(v20)
        {
          case 0u:
            if (!*(_DWORD *)v16) {
              goto LABEL_36;
            }
            break;
          case 1u:
          case 2u:
          case 3u:
          case 4u:
            if (*(_DWORD *)v16 <= 4u && *(_DWORD *)v16 >= v20) {
              goto LABEL_36;
            }
            break;
          case 5u:
          case 8u:
            break;
          default:
            goto LABEL_36;
        }
      }
    }
    else
    {
      unsigned int v19 = *(_DWORD *)(v15 + 4);
      switch(v19)
      {
        case 0u:
          if (!*(_DWORD *)v15) {
            goto LABEL_35;
          }
          break;
        case 1u:
        case 2u:
        case 3u:
        case 4u:
          if (*(_DWORD *)v15 <= 4u && *(_DWORD *)v15 >= v19) {
            goto LABEL_35;
          }
          break;
        case 5u:
        case 8u:
          break;
        default:
          goto LABEL_35;
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 360))(*((void *)this + 1));
  if (result == 5)
  {
    if (*((unsigned char *)this + 492))
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 368))(*((void *)this + 1));
      if (!result) {
        *((unsigned char *)this + 19) = 1;
      }
    }
  }
  uint64_t v6 = *((void *)this + 40);
  if (!*(_DWORD *)v6)
  {
    *(_WORD *)(v6 + 204) = 0;
    *(_WORD *)(v6 + 14) = 0;
    *(void *)(v6 + 216) = 0;
    *(void *)(v6 + 224) = 0;
    *(void *)(v6 + 208) = 0;
  }
  uint64_t v7 = *((void *)this + 42);
  if (!*(_DWORD *)v7)
  {
    *(_WORD *)(v7 + 204) = 0;
    *(_WORD *)(v7 + 14) = 0;
    *(void *)(v7 + 216) = 0;
    *(void *)(v7 + 224) = 0;
    *(void *)(v7 + 208) = 0;
  }
  uint64_t v8 = *((void *)this + 52);
  if (!*(_DWORD *)v8)
  {
    *(_WORD *)(v8 + 204) = 0;
    *(_WORD *)(v8 + 14) = 0;
    *(void *)(v8 + 216) = 0;
    *(void *)(v8 + 224) = 0;
    *(void *)(v8 + 208) = 0;
  }
  uint64_t v9 = *((void *)this + 54);
  if (!*(_DWORD *)v9)
  {
    *(_WORD *)(v9 + 204) = 0;
    *(_WORD *)(v9 + 14) = 0;
    *(void *)(v9 + 216) = 0;
    *(void *)(v9 + 224) = 0;
    *(void *)(v9 + 208) = 0;
  }
  uint64_t v10 = *((void *)this + 44);
  if (!*(_DWORD *)v10)
  {
    *(_WORD *)(v10 + 204) = 0;
    *(_WORD *)(v10 + 14) = 0;
    *(void *)(v10 + 216) = 0;
    *(void *)(v10 + 224) = 0;
    *(void *)(v10 + 208) = 0;
  }
  uint64_t v11 = *((void *)this + 48);
  if (!*(_DWORD *)v11)
  {
    *(_WORD *)(v11 + 204) = 0;
    *(_WORD *)(v11 + 14) = 0;
    *(void *)(v11 + 216) = 0;
    *(void *)(v11 + 224) = 0;
    *(void *)(v11 + 208) = 0;
  }
  uint64_t v12 = *((void *)this + 50);
  if (!*(_DWORD *)v12)
  {
    *(_WORD *)(v12 + 204) = 0;
    *(_WORD *)(v12 + 14) = 0;
    *(void *)(v12 + 216) = 0;
    *(void *)(v12 + 224) = 0;
    *(void *)(v12 + 208) = 0;
  }
  uint64_t v13 = *((void *)this + 56);
  if (!*(_DWORD *)v13)
  {
    *(_WORD *)(v13 + 204) = 0;
    *(_WORD *)(v13 + 14) = 0;
    *(void *)(v13 + 216) = 0;
    *(void *)(v13 + 224) = 0;
    *(void *)(v13 + 208) = 0;
  }
  if (*((unsigned char *)this + 23) || *((unsigned char *)this + 20))
  {
    *((unsigned char *)this + 19) = 1;
  }
  else if (!*((unsigned char *)this + 19))
  {
    return result;
  }
  (*(void (**)(BlueFin::GlPeRqHdlrFactTest *, void, void))(*(void *)this + 272))(this, 0, 0);
  uint64_t result = *((void *)this + 1);
  int v14 = *(uint64_t (**)(void))(result + 56);
  if (v14)
  {
    return v14();
  }
  return result;
}

void BlueFin::SPASerializer::~SPASerializer(BlueFin::SPASerializer *this)
{
}

void BlueFin::GlPeRqHdlrFactTest::~GlPeRqHdlrFactTest(BlueFin::GlPeRqHdlrFactTest *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::SetDataSubFrmMeas(uint64_t this, BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = this + 39944;
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 39952) = 0;
  *(void *)(this + 39960) = 0;
  *(void *)(this + 39944) = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v22 = 0;
  uint64_t v4 = *((unsigned __int8 *)a2 + 8);
  unsigned int v5 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
  if (v5 > 6 || ((1 << v5) & 0x5B) == 0) {
    return this;
  }
  *(_WORD *)(this + 39948) = BlueFin::GlSvId::s_aucSvId2prn[v4];
  switch(v5)
  {
    case 0u:
      __int16 v8 = 257;
      goto LABEL_13;
    case 1u:
      __int16 v8 = 513;
      goto LABEL_13;
    case 3u:
      __int16 v8 = 1025;
      goto LABEL_13;
    case 4u:
      if ((v4 - 81) > 0x34) {
        __int16 v8 = 1282;
      }
      else {
        __int16 v8 = 1281;
      }
      goto LABEL_13;
    case 6u:
      __int16 v8 = 1793;
LABEL_13:
      *(_WORD *)(this + 39950) = v8;
      break;
    default:
      break;
  }
  *(_DWORD *)uint64_t v2 = 24;
  int v9 = *((unsigned __int8 *)a2 + 9);
  *(_WORD *)(this + 39954) = v9;
  unsigned int v10 = *((_DWORD *)a2 + 4);
  if (!v10)
  {
    unsigned int v10 = 604800;
    *((_DWORD *)a2 + 4) = 604800;
  }
  if ((v9 & 0xFE) == 4)
  {
    LOWORD(v11) = -1;
    switch(v5)
    {
      case 0u:
      case 3u:
        int v12 = (int)(float)(fmodf((float)((float)((float)v10 + -6.0) + (float)((float)(v9 - 1) * -6.0)) / 30.0, 25.0)
                         + 1.0);
        goto LABEL_20;
      case 1u:
        goto LABEL_22;
      case 4u:
        float v13 = (float)v10;
        if ((v4 - 81) > 0x34)
        {
          float v14 = (float)(v13 + -3.0) / 3.0;
          float v15 = 120.0;
        }
        else
        {
          float v14 = (float)((float)(v13 + -6.0) + (float)((float)(v9 - 1) * -6.0)) / 30.0;
          float v15 = 24.0;
        }
        int v11 = (int)(float)(fmodf(v14, v15) + 1.0);
        goto LABEL_28;
      case 6u:
        goto LABEL_28;
      default:
        goto LABEL_29;
    }
    goto LABEL_29;
  }
  LOWORD(v12) = -1;
LABEL_20:
  *(_WORD *)(v2 + 8) = v12;
  if (v5 == 6)
  {
    LOWORD(v11) = -1;
  }
  else
  {
    if (v5 != 1) {
      goto LABEL_29;
    }
LABEL_22:
    int v11 = (*((_DWORD *)a2 + 5) >> 18) & 0x3F;
  }
LABEL_28:
  *(_WORD *)(v2 + 8) = v11;
LABEL_29:
  char v16 = 0;
  uint64_t v17 = 0;
  *(_DWORD *)(v2 + 12) = 40;
  int64x2_t v18 = (int64x2_t)xmmword_263BB2870;
  int64x2_t v19 = vdupq_n_s64(2uLL);
  do
  {
    unsigned int v20 = (_DWORD *)((char *)a2 + (v17 & 0xFFFFFFFC) + 20);
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x28uLL), (uint64x2_t)v18)).u8[0]) {
      *((unsigned char *)v21 + v17) = (*v20 & 0x3FFFFFFFu) >> (v16 & 0x10 ^ 0x18);
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x28uLL), *(uint64x2_t *)&v18)).i32[1]) {
      *((unsigned char *)v21 + v17 + 1) = (*v20 & 0x3FFFFFFFu) >> (~v16 & 0x10);
    }
    v17 += 2;
    int64x2_t v18 = vaddq_s64(v18, v19);
    v16 += 16;
  }
  while (v17 != 40);
  *(void *)(v2 + 16) = v21;
  return BlueFin::GlRequestImplGnssMeasData::OnNavData(v3, v2);
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::SetGlonassDataString(BlueFin::GlPeRqHdlrGnssMeasData *this, BlueFin::GlGlonassDataString *a2)
{
  _OWORD v21[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 39944;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 4994) = 0;
  *((void *)this + 4995) = 0;
  *((void *)this + 4993) = 0;
  memset(v21, 0, 11);
  int v5 = *((unsigned __int8 *)a2 + 8);
  *((_WORD *)this + 19974) = v5 + 41;
  uint64_t v6 = *(BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(*((void *)this + 7) + 24) + 48);
  if (v6)
  {
    unsigned int v7 = v5 - 52;
    char v8 = v5 - 59;
    if (v7 >= 0xE) {
      char v8 = -8;
    }
    unsigned __int8 v20 = 0;
    BlueFin::GlPeGloFcnOsnMgr::FCN2OSN(v6, v8, &v20);
    if (v20) {
      *((_WORD *)v3 + 2) |= v20 << 8;
    }
  }
  *((_WORD *)v3 + 3) = 769;
  *(_DWORD *)uint64_t v3 = 24;
  int v9 = (*((_DWORD *)a2 + 5) >> 27) & 0xF;
  *((_WORD *)v3 + 5) = (*((_DWORD *)a2 + 5) >> 27) & 0xF;
  unsigned int v10 = *((_DWORD *)a2 + 3);
  if (!v10)
  {
    unsigned int v10 = 86400000;
    *((_DWORD *)a2 + 3) = 86400000;
  }
  if (*((_WORD *)a2 + 5))
  {
    float v12 = -((float)((float)(v9 - 1) + (float)(v9 - 1)) - (double)v10 * 0.001) / 30.0;
    int v11 = (int)(float)(fmodf(v12, 5.0) + 1.0);
  }
  else
  {
    LOWORD(v11) = -1;
  }
  char v13 = 0;
  uint64_t v14 = 0;
  *((_WORD *)v3 + 4) = v11;
  *((_DWORD *)v3 + 3) = 11;
  int64x2_t v15 = (int64x2_t)xmmword_263BB2870;
  int64x2_t v16 = vdupq_n_s64(2uLL);
  do
  {
    uint64_t v17 = (_DWORD *)((char *)a2 + (v14 & 0xFFFFFFFC) + 20);
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xBuLL), (uint64x2_t)v15)).u8[0])
    {
      if (v14) {
        char v18 = -1;
      }
      else {
        char v18 = 15;
      }
      *((unsigned char *)v21 + v14) = (*v17 >> (v13 & 0x10 ^ 0x18)) & v18;
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xBuLL), *(uint64x2_t *)&v15)).i32[1]) {
      *((unsigned char *)v21 + v14 + 1) = *v17 >> (~v13 & 0x10);
    }
    v14 += 2;
    int64x2_t v15 = vaddq_s64(v15, v16);
    v13 += 16;
  }
  while (v14 != 12);
  *((void *)v3 + 2) = v21;
  return BlueFin::GlRequestImplGnssMeasData::OnNavData(v4, (uint64_t)v3);
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::SetGalileoDataPage(BlueFin::GlPeRqHdlrGnssMeasData *this, BlueFin::GlGalileoINavPage *a2)
{
  v14[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 39944;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 4994) = 0;
  *((void *)this + 4995) = 0;
  *((void *)this + 4993) = 0;
  uint64_t v13 = 0;
  memset(v14, 0, 13);
  uint64_t v12 = 0;
  *((_WORD *)this + 19974) = *((unsigned __int8 *)a2 + 8) - 138;
  *((_WORD *)this + 19975) = 1537;
  *((_DWORD *)this + 9986) = 24;
  *((_WORD *)this + 19977) = *((unsigned __int8 *)a2 + 10);
  int v5 = *((_DWORD *)a2 + 4);
  if (!v5)
  {
    int v5 = 604800;
    *((_DWORD *)a2 + 4) = 604800;
  }
  float v6 = fmodf((float)((v5 - 2) / 0x1Eu), 24.0);
  char v7 = 0;
  unint64_t v8 = 0;
  *((_WORD *)v3 + 4) = (int)(float)(v6 + 1.0);
  *((_DWORD *)v3 + 3) = 29;
  while (1)
  {
    unsigned int v9 = *(_DWORD *)((char *)a2 + (v8 & 0xFFFFFFFC) + 20);
    if (v8 < 0xE)
    {
      unsigned int v10 = v9 >> (~v7 & 0x18);
LABEL_10:
      *((unsigned char *)&v12 + v8) = v10;
      goto LABEL_11;
    }
    if (v8 != 14) {
      break;
    }
    BYTE6(v13) = BYTE1(v9) & 0xC0;
LABEL_11:
    ++v8;
    v7 += 8;
    if (v8 == 30) {
      goto LABEL_14;
    }
  }
  unsigned int v10 = v9 >> (~v7 & 0x18);
  if (v8 != 29)
  {
    *((unsigned char *)&v12 + (v8 - 1)) |= (v10 & 0xFC) >> 2;
    LOBYTE(v10) = (_BYTE)v10 << 6;
    goto LABEL_10;
  }
  BYTE4(v14[1]) |= (v10 >> 2) & 0x30;
LABEL_14:
  *((void *)v3 + 2) = &v12;
  return BlueFin::GlRequestImplGnssMeasData::OnNavData(v4, (uint64_t)v3);
}

uint64_t BlueFin::GlPeGnssDataLogger::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= 4)
  {
    DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1596, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1596, "ucVersion >= 1 && ucVersion <= 3");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v16 = 109;
    char v17 = v5;
    uint64_t v18 = 0x1000000000000;
    int64x2_t v15 = &unk_270EBA5A8;
    char v19 = v5;
    if (*(_DWORD *)(*(void *)(v2 + 8) + 4) >= 0x65u)
    {
      DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1602, "SerializeImpl", (char)"m_oMeasData.uiMmeasurementCount <= GL_GNSS_MAX_MEASUREMENT");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1602, "m_oMeasData.uiMmeasurementCount <= GL_GNSS_MAX_MEASUREMENT");
    }
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)(v2 + 8) + 4));
    uint64_t v8 = *(void *)(v7 + 8);
    if (*(_DWORD *)(v8 + 4))
    {
      unint64_t v9 = 0;
      uint64_t v10 = 176;
      do
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(v8 + v10 - 164));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v8 + v10 - 160));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v8 + v10 - 158));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(v8 + v10 - 144));
        BlueFin::GlSysLogEntry::PutS64((BlueFin::GlSysLogEntry *)&v15, *(void *)(v8 + v10 - 136));
        uint64_t v11 = *(void *)(v8 + v10 - 128);
        if ((unint64_t)(v11 - 1) >= 0xFFFFFFFF)
        {
          DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1613, "SerializeImpl", (char)"meas.sllReceivedGnssTimeUncNs > 0 && meas.sllReceivedGnssTimeUncNs <= MAX_RCVD_SYS_TIME_UNC_NS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1613, "meas.sllReceivedGnssTimeUncNs > 0 && meas.sllReceivedGnssTimeUncNs <= MAX_RCVD_SYS_TIME_UNC_NS");
        }
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v11);
        float v12 = *(double *)(v8 + v10 - 120);
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, v12);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v8 + v10 - 112));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v8 + v10 - 104));
        if (*(unsigned __int16 *)(v8 + v10 - 96) >= 0x100u)
        {
          DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1618, "SerializeImpl", (char)"meas.adrsAccumulatedDeltaRangeState < 256");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1618, "meas.adrsAccumulatedDeltaRangeState < 256");
        }
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(v8 + v10 - 96));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v8 + v10 - 88));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(v8 + v10 - 80));
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, *(float *)(v8 + v10 - 48));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v8 + v10 - 16));
        float v13 = *(double *)(v8 + v10);
        BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v15, v13);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v8 + v10 - 157));
        ++v9;
        uint64_t v8 = *(void *)(v7 + 8);
        v10 += 392;
      }
      while (v9 < *(unsigned int *)(v8 + 4));
    }
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, *(_WORD *)(v8 + 39212));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(*(void *)(v7 + 8) + 39216));
    BlueFin::GlSysLogEntry::PutS64((BlueFin::GlSysLogEntry *)&v15, *(void *)(*(void *)(v7 + 8) + 39224));
    BlueFin::GlSysLogEntry::PutS64((BlueFin::GlSysLogEntry *)&v15, *(void *)(*(void *)(v7 + 8) + 39240));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(v7 + 8) + 39256));
    if (v5 > 2)
    {
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(v7 + 8) + 39264));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, *(double *)(*(void *)(v7 + 8) + 39272));
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(*(void *)(v7 + 8) + 39280));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeGnssDataLogger::Deserialize(BlueFin::GlPeGnssDataLogger *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 109 || *((unsigned __int8 *)a2 + 12) - 4 < 0xFFFFFFFD) {
    return 0;
  }
  unsigned int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  if (U8)
  {
    unsigned int v5 = U8;
    for (unsigned int i = 0; i < v5; ++i)
    {
      BlueFin::GlSysLogEntry::GetU32(a2);
      BlueFin::GlSysLogEntry::GetU8(a2);
      BlueFin::GlSysLogEntry::GetU8(a2);
      BlueFin::GlSysLogEntry::GetU32(a2);
      BlueFin::GlSysLogEntry::GetS64(a2);
      BlueFin::GlSysLogEntry::GetU32(a2);
      BlueFin::GlSysLogEntry::GetF32(a2);
      BlueFin::GlSysLogEntry::GetD64(a2);
      BlueFin::GlSysLogEntry::GetD64(a2);
      BlueFin::GlSysLogEntry::GetU8(a2);
      BlueFin::GlSysLogEntry::GetD64(a2);
      BlueFin::GlSysLogEntry::GetD64(a2);
      BlueFin::GlSysLogEntry::GetF32(a2);
      BlueFin::GlSysLogEntry::GetU8(a2);
      BlueFin::GlSysLogEntry::GetF32(a2);
      BlueFin::GlSysLogEntry::GetU8(a2);
    }
  }
  BlueFin::GlSysLogEntry::GetU16(a2);
  BlueFin::GlSysLogEntry::GetU8(a2);
  BlueFin::GlSysLogEntry::GetS64(a2);
  BlueFin::GlSysLogEntry::GetS64(a2);
  BlueFin::GlSysLogEntry::GetD64(a2);
  if (*((unsigned __int8 *)a2 + 12) > 2u)
  {
    BlueFin::GlSysLogEntry::GetD64(a2);
    BlueFin::GlSysLogEntry::GetD64(a2);
  }
  BlueFin::GlSysLogEntry::GetU32(a2);
  return 1;
}

uint64_t BlueFin::GlPeGnssNavDataLogger::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1708, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1708, "ucVersion >= 1 && ucVersion <= 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v14 = 110;
    char v15 = v5;
    uint64_t v16 = 0x1000000000000;
    float v13 = &unk_270EBA2F0;
    char v17 = v5;
    uint64_t v8 = v2 + 8;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(*(void *)(v2 + 8) + 4));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(*(void *)v8 + 6));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(*(void *)v8 + 8));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(*(void *)v8 + 10));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(*(void *)v8 + 12));
    uint64_t v9 = *(void *)v8;
    unsigned int v10 = *(_DWORD *)(*(void *)v8 + 12);
    if (v10 >= 5120 - HIWORD(v16))
    {
      DeviceFaultNotify("glpe_reqhdlr_gnss_meas_data.cpp", 1719, "SerializeImpl", (char)"m_oNavData.ulDataLength < (GlIntU32) (MAX_SYS_LOG_ENTRY_LONG_SIZE - otEntry.DataSize())");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_gnss_meas_data.cpp", 1719, "m_oNavData.ulDataLength < (GlIntU32) (MAX_SYS_LOG_ENTRY_LONG_SIZE - otEntry.DataSize())");
    }
    if (v10)
    {
      unint64_t v11 = 0;
      do
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, *(unsigned char *)(*(void *)(v9 + 16) + v11++));
        uint64_t v9 = *(void *)(v7 + 8);
      }
      while (v11 < *(unsigned int *)(v9 + 12));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v13, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeGnssNavDataLogger::Deserialize()
{
  return 0;
}

uint64_t BlueFin::GlPeRqHdlrGnssMeasData::ReportIqData(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(void))(result + 112);
  if (v2) {
    return v2();
  }
  return result;
}

void BlueFin::GlPeGnssDataLogger::~GlPeGnssDataLogger(BlueFin::GlPeGnssDataLogger *this)
{
}

void BlueFin::GlPeGnssNavDataLogger::~GlPeGnssNavDataLogger(BlueFin::GlPeGnssNavDataLogger *this)
{
}

void BlueFin::GlPeRqHdlrGnssMeasData::~GlPeRqHdlrGnssMeasData(BlueFin::GlPeRqHdlrGnssMeasData *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD70);
}

uint64_t BlueFin::GlPeRqHdlrGpsData::Cleanup(BlueFin::GlPeRqHdlrGpsData *this)
{
  if (!*((unsigned char *)this + 20) && !*((unsigned char *)this + 19))
  {
    uint64_t v2 = *((void *)this + 1);
    int v3 = *(_DWORD *)(v2 + 88);
    unsigned int v4 = *(void (**)(void, void, void))(v2 + 80);
    if (v4) {
      v4(*((void *)this + 1), 0, 0);
    }
    if (v3)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 7) + 40) + 304))(__src);
      v46.i32[0] = LOBYTE(__src[1]);
      memcpy(v47, __src[0], 4 * LOBYTE(__src[1]));
      v46.i32[1] = v47[0];
      while (1)
      {
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v46);
        if (v46.u8[1] == v46.u8[0]) {
          break;
        }
        uint64_t v5 = *(void *)(*((void *)this + 7) + 40);
        __int8 v45 = v46.i8[2];
        uint64_t v6 = (*(uint64_t (**)(uint64_t, __int8 *, uint64_t))(*(void *)v5 + 112))(v5, &v45, 1);
        if (v6)
        {
          uint64_t v7 = v6;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 152))(v6) == 1)
          {
            (*(void (**)(uint64_t, void **))(*(void *)v7 + 272))(v7, __src);
            uint64_t v8 = *(void (**)(uint64_t, uint64_t, void **))(v2 + 80);
            if (v8) {
              v8(v2, 1, __src);
            }
          }
        }
      }
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
      if (v9) {
        v9(v2, 1, 0);
      }
    }
    if ((v3 & 2) != 0)
    {
      unsigned __int8 v10 = 1;
      do
      {
        unsigned int v11 = v10;
        if (BlueFin::GlPeAlmMgr::GetAsstAlm(*(uint64_t **)(*((void *)this + 7) + 32), 0, v10, (int32x2_t *)__src))
        {
          float v12 = *(void (**)(uint64_t, uint64_t, void **))(v2 + 80);
          if (v12) {
            v12(v2, 2, __src);
          }
        }
        ++v10;
      }
      while (v11 < 0x20);
      float v13 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
      if (v13) {
        v13(v2, 2, 0);
      }
    }
    if ((v3 & 4) != 0)
    {
      int v14 = *(unsigned int **)(*((void *)this + 7) + 8);
      unsigned int v15 = v14[642];
      double v16 = (double)(int)v15;
      if (v15 <= 0xFF9222FE) {
        double v16 = (double)v15;
      }
      v17.n128_f64[0] = BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v14, 0, 1, (uint64_t)__src, v16);
      int v18 = HIDWORD(__src[1]);
      if (HIDWORD(__src[1]) != -1)
      {
        if (HIDWORD(__src[1]) <= 0xF4240) {
          int v18 = 1000000;
        }
        HIDWORD(__src[1]) = v18;
      }
      char v19 = *(void (**)(uint64_t, uint64_t, void **, __n128))(v2 + 80);
      if (v19) {
        v19(v2, 4, __src, v17);
      }
    }
    if ((v3 & 8) != 0)
    {
      *(_OWORD *)__src = 0u;
      memset(v49, 0, sizeof(v49));
      uint64_t v20 = *(void *)(*((void *)this + 7) + 64);
      if (*(_DWORD *)(v20 + 44) == -1)
      {
        unsigned int v21 = 0;
      }
      else
      {
        unsigned int v21 = __src;
        if (__src != (void **)v20)
        {
          *(void *)uint64_t v49 = *(void *)(v20 + 16);
          *(_OWORD *)__src = *(_OWORD *)v20;
          *(_OWORD *)&v49[8] = *(_OWORD *)(v20 + 24);
          unsigned int v21 = __src;
        }
      }
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, void **))(v2 + 80);
      if (v22) {
        v22(v2, 8, v21);
      }
    }
    if ((v3 & 0x10) != 0)
    {
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
      if (v23) {
        v23(v2, 16, 0);
      }
    }
    if ((v3 & 0x20) != 0)
    {
      uint64_t v24 = *(void *)(*((void *)this + 7) + 8);
      int v25 = *(_DWORD *)(v24 + 136);
      if (v25 == 2) {
        *(_OWORD *)__src = *(_OWORD *)(v24 + 160);
      }
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, void **))(v2 + 80);
      if (v26)
      {
        if (v25 == 2) {
          uint64_t v27 = __src;
        }
        else {
          uint64_t v27 = 0;
        }
        v26(v2, 32, v27);
      }
    }
    if ((v3 & 0x40) != 0)
    {
      int v56 = 7;
      char v57 = 0;
      LODWORD(__src[0]) = -65536;
      __src[1] = 0;
      *(_DWORD *)uint64_t v49 = 0;
      *(_OWORD *)&v49[8] = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      __int16 v53 = 0;
      int v54 = -1;
      unsigned __int8 v28 = 1;
      char v55 = 0;
      do
      {
        unsigned int v29 = v28;
        if (BlueFin::GlPeAlmMgr::GetAlm(*(void *)(*((void *)this + 7) + 32), 1u, v28, (uint64_t)__src, 0, 1))
        {
          double v30 = BlueFin::GlPeAlmanac::Export((uint64_t)__src, &v46);
          unsigned int v31 = *(void (**)(uint64_t, uint64_t, int32x2_t *, double))(v2 + 80);
          if (v31) {
            v31(v2, 64, &v46, v30);
          }
        }
        ++v28;
      }
      while (v29 < 0x13);
      unsigned int v32 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
      if (v32) {
        v32(v2, 64, 0);
      }
    }
    if ((v3 & 0x80) != 0)
    {
      int v56 = 7;
      char v57 = 0;
      LODWORD(__src[0]) = -65536;
      __src[1] = 0;
      *(_DWORD *)uint64_t v49 = 0;
      *(_OWORD *)&v49[8] = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      __int16 v53 = 0;
      int v54 = -1;
      unsigned __int8 v33 = 1;
      char v55 = 0;
      do
      {
        unsigned int v34 = v33;
        if (BlueFin::GlPeAlmMgr::GetAlm(*(void *)(*((void *)this + 7) + 32), 2u, v33, (uint64_t)__src, 0, 1))
        {
          double v35 = BlueFin::GlPeAlmanac::Export((uint64_t)__src, &v46);
          uint64_t v36 = *(void (**)(uint64_t, uint64_t, int32x2_t *, double))(v2 + 80);
          if (v36) {
            v36(v2, 128, &v46, v35);
          }
        }
        ++v33;
      }
      while (v34 < 0x18);
      unsigned int v37 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
      if (v37) {
        v37(v2, 128, 0);
      }
    }
    if ((v3 & 0x100) != 0)
    {
      int v56 = 7;
      char v57 = 0;
      LODWORD(__src[0]) = -65536;
      __src[1] = 0;
      *(_DWORD *)uint64_t v49 = 0;
      *(_OWORD *)&v49[8] = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      __int16 v53 = 0;
      int v54 = -1;
      unsigned __int8 v38 = 1;
      char v55 = 0;
      do
      {
        unsigned int v39 = v38;
        if (BlueFin::GlPeAlmMgr::GetAlm(*(void *)(*((void *)this + 7) + 32), 3u, v38, (uint64_t)__src, 0, 1))
        {
          double v40 = BlueFin::GlPeAlmanac::Export((uint64_t)__src, &v46);
          uint64_t v41 = *(void (**)(uint64_t, uint64_t, int32x2_t *, double))(v2 + 80);
          if (v41) {
            v41(v2, 256, &v46, v40);
          }
        }
        ++v38;
      }
      while (v39 < 0xA);
      uint64_t v42 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
      if (v42) {
        v42(v2, 256, 0);
      }
    }
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, void))(v2 + 80);
    if (v43) {
      v43(v2, 0x8000, 0);
    }
    *((unsigned char *)this + 19) = 1;
  }

  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

void BlueFin::GlPeRqHdlrGpsData::~GlPeRqHdlrGpsData(BlueFin::GlPeRqHdlrGpsData *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrMeas_SortPrns(BlueFin *this, double *a2, const void *a3)
{
  double v3 = *((double *)this + 2) - a2[2];
  if (v3 >= 0.0) {
    unsigned int v4 = 0;
  }
  else {
    unsigned int v4 = -1;
  }
  if (v3 > 0.0) {
    return 1;
  }
  else {
    return v4;
  }
}

void BlueFin::GlPeMeasStatus::Start(BlueFin::GlPeMeasStatus *this, unsigned int a2)
{
  BlueFin::GlPeTowFilter::init((BlueFin::GlPeMeasStatus *)((char *)this + 4), *(const BlueFin::GlPeTimeManager **)(*((void *)this + 3) + 8), a2);
  uint64_t v3 = *(void *)(*((void *)this + 3) + 56);
  if (*(unsigned char *)(v3 + 26056) && (unsigned int v4 = *(_DWORD *)(v3 + 48), v4 <= 8)) {
    unsigned int v5 = (0x1F4u >> v4) & 1;
  }
  else {
    LOBYTE(v5) = 0;
  }
  *((unsigned char *)this + 9808) = v5;
}

unsigned __int8 *BlueFin::GlPeMeasStatus::SetSatellitesDetectedAndQaAndStoreMeas(BlueFin::GlPeMeasStatus *this, BlueFin::GlPeMsmtMgr *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__src, unsigned __int8 a18, unsigned int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,long long a50,long long a51)
{
  uint64_t v51 = MEMORY[0x270FA5388](this, a2);
  __int16 v53 = v52;
  uint64_t v54 = v51;
  uint64_t v162 = v55;
  uint64_t v56 = 0;
  STACK[0x12B8] = *MEMORY[0x263EF8340];
  int v163 = *(_DWORD *)v52;
  *(_OWORD *)(v51 + 32) = xmmword_263BBD410;
  *(_OWORD *)&STACK[0xC10] = 0u;
  *(_OWORD *)&STACK[0xC00] = 0u;
  *(_OWORD *)&STACK[0xBF0] = 0u;
  *(_OWORD *)&STACK[0xBE0] = 0u;
  *(_OWORD *)&STACK[0xBD0] = 0u;
  *(_OWORD *)&STACK[0xBC0] = 0u;
  *(_OWORD *)&STACK[0xBB0] = 0u;
  *(_OWORD *)&STACK[0xBA0] = 0u;
  *(_OWORD *)&STACK[0xB90] = 0u;
  *(_OWORD *)&STACK[0xB80] = 0u;
  *(_OWORD *)&STACK[0xB70] = 0u;
  *(_OWORD *)&STACK[0xB60] = 0u;
  *(_OWORD *)&STACK[0xB50] = 0u;
  *(_OWORD *)&STACK[0xB40] = 0u;
  *(_OWORD *)&STACK[0xB30] = 0u;
  *(_OWORD *)&STACK[0xB20] = 0u;
  *(_OWORD *)&STACK[0xB10] = 0u;
  *(_OWORD *)&STACK[0xB00] = 0u;
  *(_OWORD *)&STACK[0xAF0] = 0u;
  *(_OWORD *)&STACK[0xAE0] = 0u;
  *(_OWORD *)&STACK[0xAD0] = 0u;
  *(_OWORD *)&STACK[0xAC0] = 0u;
  *(_OWORD *)&STACK[0xAB0] = 0u;
  *(_OWORD *)&STACK[0xAA0] = 0u;
  *(_OWORD *)&STACK[0xA90] = 0u;
  *(_OWORD *)&STACK[0xA80] = 0u;
  *(_OWORD *)&STACK[0xA70] = 0u;
  *(_OWORD *)&STACK[0xA60] = 0u;
  *(_OWORD *)&STACK[0xA50] = 0u;
  *(_OWORD *)&STACK[0xA40] = 0u;
  *(_OWORD *)&STACK[0xA30] = 0u;
  *(_OWORD *)&STACK[0xA20] = 0u;
  do
  {
    char v57 = (char *)&STACK[0xA20] + v56;
    *char v57 = 0;
    *((_DWORD *)v57 + 1) = -1;
    *((_WORD *)v57 + 4) = 575;
    *((void *)v57 + 2) = 0;
    v56 += 24;
  }
  while (v56 != 2184);
  uint64_t v58 = 0;
  *(_OWORD *)&STACK[0x360] = 0u;
  *(_OWORD *)&STACK[0x370] = 0u;
  *(_OWORD *)&STACK[0x340] = 0u;
  *(_OWORD *)&STACK[0x350] = 0u;
  *(_OWORD *)&STACK[0x320] = 0u;
  *(_OWORD *)&STACK[0x330] = 0u;
  *(_OWORD *)&STACK[0x300] = 0u;
  *(_OWORD *)&STACK[0x310] = 0u;
  *(_OWORD *)&STACK[0x2E0] = 0u;
  *(_OWORD *)&STACK[0x2F0] = 0u;
  *(_OWORD *)&STACK[0x2C0] = 0u;
  *(_OWORD *)&STACK[0x2D0] = 0u;
  *(_OWORD *)&STACK[0x2A0] = 0u;
  *(_OWORD *)&STACK[0x2B0] = 0u;
  a51 = 0u;
  *(_OWORD *)&STACK[0x290] = 0u;
  a49 = 0u;
  a50 = 0u;
  a47 = 0u;
  a48 = 0u;
  a45 = 0u;
  a46 = 0u;
  a43 = 0u;
  a44 = 0u;
  a41 = 0u;
  a42 = 0u;
  a39 = 0u;
  a40 = 0u;
  a37 = 0u;
  a38 = 0u;
  a35 = 0u;
  a36 = 0u;
  do
  {
    unsigned int v59 = (char *)&a35 + v58;
    *unsigned int v59 = 0;
    *((_DWORD *)v59 + 1) = -1;
    *((_WORD *)v59 + 4) = 575;
    *((void *)v59 + 2) = 0;
    v58 += 24;
  }
  while (v58 != 2184);
  uint64_t v60 = *(void *)(*(void *)(v51 + 24) + 48);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, &a19, 0x13u, v52 + 1);
  LOBYTE(a29) = a18;
  memcpy(&a30, __src, 4 * a18);
  WORD1(a29) = 0;
  BYTE1(a29) = 0;
  HIDWORD(a29) = a30;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a29);
  if (BYTE1(a29) == a29)
  {
    unsigned __int8 v62 = 0;
    unint64_t v63 = 0;
    *(_DWORD *)(v54 + 44) = 100;
    *(_DWORD *)(v54 + 52) = 0xFFFF;
    goto LABEL_105;
  }
  unsigned __int8 v62 = 0;
  unsigned int v64 = 0;
  unint64_t v63 = 0;
  double v159 = (BlueFin::GlArray *)(v54 + 456);
  uint64_t v158 = v60 + 32;
  float v65 = -30.0;
  do
  {
    if (WORD1(a29) >= 0x23FuLL) {
      goto LABEL_182;
    }
    int v66 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(a29);
    char v67 = *v66;
    unsigned int v68 = v66[1];
    int v69 = v66[1];
    LOBYTE(v170[0]) = v67;
    v170[1] = v68;
    LOWORD(vars0) = WORD1(a29);
    if (*(unsigned char *)(v54 + 9808))
    {
      if (v69 != 2) {
        goto LABEL_84;
      }
    }
    else if (v69)
    {
      goto LABEL_84;
    }
    MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)v53, (const BlueFin::GlSignalId *)v170, 0, 0);
    if (MeMeas)
    {
      uint64_t v71 = (float32x2_t *)MeMeas;
      unsigned int v72 = *MeMeas;
      if (*MeMeas)
      {
        if (v72 < 0x21 || v72 - 52 <= 0xD)
        {
          if (*(unsigned char *)(v54 + 58)
            && (((unint64_t)*(unsigned int *)(*(void *)(v54 + 496)
                                                   + (((unint64_t)LOBYTE(v170[0]) >> 3) & 0x1C)) >> (v170[0] & 0x1F)) & 1) == 0)
          {
            GlCustomLog(14, "Do not have aiding for SV %d\n", LOBYTE(v170[0]));
            goto LABEL_84;
          }
          if ((*((_DWORD *)MeMeas + 3) & 0x8002) != 2) {
            goto LABEL_84;
          }
          double v73 = *((float *)MeMeas + 22) * 299792458.0;
          double v74 = fmod(v73, 4294967300.0);
          if (v73 <= 4294967300.0) {
            double v74 = v73;
          }
          unsigned int v161 = v64;
          unint64_t v75 = v63;
          if (v74 < -4294967300.0) {
            double v74 = -fmod(-v74, 4294967300.0);
          }
          if (v74 < 0.0) {
            unsigned int v76 = --v74;
          }
          else {
            unsigned int v76 = v74;
          }
          unsigned int v160 = v76;
          int v77 = LOBYTE(v170[0]);
          BlueFin::GlArray::EnsureValidHandle((uint64_t)v159, LOBYTE(v170[0]));
          int v78 = *(unsigned __int8 *)(*(void *)(v54 + 472) + v77 - *(unsigned __int8 *)(v54 + 492));
          unsigned int v79 = BlueFin::GlArray::Add(v159, LOBYTE(v170[0]));
          if (v79)
          {
            unsigned int v80 = v79;
            if (v78 == 255) {
              *unsigned int v79 = 0;
            }
            float v81 = v71[13].f32[1] + 0.5;
            float v82 = fmodf(v81, 4295000000.0);
            if (v81 <= 4295000000.0) {
              float v82 = v81;
            }
            unsigned int v83 = (BlueFin::GlArray *)(v54 + 616);
            if (v82 < -4295000000.0) {
              float v82 = -fmodf(-v82, 4295000000.0);
            }
            if (v82 < 0.0) {
              unsigned int v84 = -(float)-v82;
            }
            else {
              LOBYTE(v84) = v82;
            }
            *unsigned int v80 = v84;
            if (v84 >= 0x25u)
            {
              ++*(_DWORD *)(v54 + 40);
              LOBYTE(v84) = *v80;
            }
            if (v84 <= 0x1Bu)
            {
              ++*(_DWORD *)(v54 + 36);
              LOBYTE(v84) = *v80;
            }
            if (v65 < (float)v84) {
              float v65 = (float)v84;
            }
          }
          else
          {
            unsigned int v83 = (BlueFin::GlArray *)(v54 + 616);
          }
          if (v71->u8[0] - 1 <= 0x1F) {
            ++*(_DWORD *)(v54 + 32);
          }
          if (v71[2].i32[1] == 4)
          {
            *(unsigned char *)(v54 + 60) = 0;
            char v85 = 1;
            goto LABEL_51;
          }
          int v86 = (*(unsigned char *)(v54 + 60))++ + 1;
          if (v86 == 5)
          {
            char v85 = 0;
LABEL_51:
            *(unsigned char *)(v54 + 59) = v85;
          }
          double v87 = BlueFin::GlPeMeasStatus::MsaLogic((unsigned __int8 *)v71);
          double v88 = v87;
          if (v87 > 0.0)
          {
            unsigned int v89 = &STACK[0xA20] + 3 * (int)v75;
            if (v89 != (unint64_t *)v71)
            {
              *(unsigned char *)unsigned int v89 = v71->i8[0];
              *((_DWORD *)v89 + 1) = v71->i32[1];
              *((_WORD *)v89 + 4) = v71[1].i16[0];
            }
            *((double *)&STACK[0xA20] + 3 * (int)v75 + 2) = v87;
            unsigned int v90 = (float32x2_t *)&a35 + 3 * (int)v75;
            if (v90 != v71)
            {
              v90->i8[0] = v71->i8[0];
              v90->i32[1] = v71->i32[1];
              v90[1].i16[0] = v71[1].i16[0];
            }
            *((double *)&a35 + 3 * (int)v75 + 2) = v71[13].f32[1];
            unint64_t v75 = (v75 + 1);
          }
          int v91 = v71->u8[0];
          BlueFin::GlArray::EnsureValidHandle((uint64_t)v83, v91);
          int v92 = v71->u8[0];
          if (*(unsigned __int8 *)(*(void *)(v54 + 632) + v91 - *(unsigned __int8 *)(v54 + 652)) == 255)
          {
            unsigned int v94 = BlueFin::GlArray::Add(v83, v92);
            if (!v94)
            {
              double v155 = "potStoredMeas != nullptr";
              DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 220, "SetSatellitesDetectedAndQaAndStoreMeas", (char)"potStoredMeas != nullptr");
              uint64_t v156 = "glpe_reqhdlr_meas.cpp";
              int v157 = 220;
              goto LABEL_183;
            }
            uint64_t v93 = (uint64_t)v94;
            v94[10] = -1065353216;
          }
          else
          {
            uint64_t v93 = BlueFin::GlArray::Get(v83, v92);
            if (!v93)
            {
              double v155 = "potStoredMeas != nullptr";
              DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 224, "SetSatellitesDetectedAndQaAndStoreMeas", (char)"potStoredMeas != nullptr");
              uint64_t v156 = "glpe_reqhdlr_meas.cpp";
              int v157 = 224;
              goto LABEL_183;
            }
          }
          *(_DWORD *)(v93 + 48) = v163;
          *(unsigned char *)uint64_t v93 = v71->i8[0];
          *(float64x2_t *)(v93 + 8) = vcvtq_f64_f32(v71[12]);
          *(float32x2_t *)(v93 + 24) = v71[7];
          *(double *)(v93 + 32) = v71[11].f32[0];
          *(double *)(v93 + 56) = v88;
          if ((float32x2_t *)(v93 + 64) != v71)
          {
            *(unsigned char *)(v93 + 64) = v71->i8[0];
            *(_DWORD *)(v93 + 68) = v71->i32[1];
            *(_WORD *)(v93 + 72) = v71[1].i16[0];
          }
          int v95 = *(_DWORD *)(v93 + 52);
          if (v95 == -7200001 || (v163 - v95) < 0x7D1)
          {
            if (v95 == -7200001) {
              goto LABEL_69;
            }
            int v96 = v71[2].i32[1];
          }
          else
          {
            *(_DWORD *)(v93 + 52) = -7200001;
LABEL_69:
            int v96 = v71[2].i32[1];
            if (v96 < 3 || (*(_DWORD *)(v93 + 52) = v163, v163 == -7200001))
            {
LABEL_76:
              ++v62;
              unsigned int v64 = v161 + v160 * v160;
              uint64_t v98 = *(void *)(*(void *)(v54 + 24) + 8);
              if (*(_DWORD *)(v98 + 2576) == 3 || (*(unsigned char *)(v98 + 2744) & 8) != 0)
              {
                float v99 = v71[13].f32[1];
                if (*(float *)(v93 + 40) <= v99) {
                  goto LABEL_80;
                }
              }
              else
              {
                float v99 = v71[13].f32[1];
LABEL_80:
                *(float *)(v93 + 40) = v99;
                AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v158, (unsigned __int8 *)v170);
                if (AidBySvId) {
                  *(double *)(v93 + 80) = (float)(*((float *)AidBySvId + 11) - v71[12].f32[0]) * 1000000000.0;
                }
                else {
                  *(void *)(v93 + 80) = 0;
                }
              }
              unint64_t v63 = v75;
              goto LABEL_84;
            }
          }
          int v97 = *(_DWORD *)(v93 + 44);
          if (v96 <= v97) {
            *((_DWORD *)BlueFin::GlPeMsmtMgr::AccessMeMeas((BlueFin::GlPeMsmtMgr *)v53, (const BlueFin::GlSignalId *)v170, 1, 0)+ 5) = v97;
          }
          else {
            *(_DWORD *)(v93 + 44) = v96;
          }
          goto LABEL_76;
        }
      }
    }
LABEL_84:
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a29);
  }
  while (BYTE1(a29) != a29);
  if (v62 >= 3u)
  {
    if (v62 >= 8u) {
      int v103 = 1;
    }
    else {
      int v103 = 2;
    }
    if (v62 == 5) {
      int v102 = 4;
    }
    else {
      int v102 = v103;
    }
    if (v62 < 5u) {
      int v102 = 20;
    }
    *(_DWORD *)(v54 + 44) = v102;
    unsigned int v101 = (unsigned int *)(v54 + 52);
  }
  else
  {
    *(_DWORD *)(v54 + 52) = 0xFFFF;
    unsigned int v101 = (unsigned int *)(v54 + 52);
    int v102 = 100;
    *(_DWORD *)(v54 + 44) = 100;
    if (!v62)
    {
      unsigned __int8 v62 = 0;
      goto LABEL_105;
    }
  }
  float v104 = sqrtf((float)v64 / (float)v62) * (float)v102;
  float v105 = fmodf(v104, 4295000000.0);
  if (v104 <= 4295000000.0) {
    float v105 = v104;
  }
  if (v105 < -4295000000.0) {
    float v105 = -fmodf(-v105, 4295000000.0);
  }
  if (v105 < 0.0) {
    unsigned int v106 = -(float)-v105;
  }
  else {
    unsigned int v106 = v105;
  }
  *unsigned int v101 = v106;
LABEL_105:
  *(unsigned char *)(v54 + 49) = 0;
  if (*(unsigned char *)(v54 + 59) && *(int *)(v54 + 32) < 6 || v62 <= 6u && v62 - *(_DWORD *)(v54 + 36) <= 4) {
    *(unsigned char *)(v54 + 49) = 1;
  }
  if ((v63 - 1) <= 3)
  {
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a29, (unsigned int *)&a30 + 1, 0x13u, v53 + 181);
    LOBYTE(v170[0]) = a30;
    memcpy(&vars0, a29, 4 * a30);
    HIWORD(v170[0]) = 0;
    BYTE1(v170[0]) = 0;
    v170[1] = vars0;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v170);
    if (BYTE1(v170[0]) != LOBYTE(v170[0]))
    {
      while (HIWORD(v170[0]) < 0x23FuLL)
      {
        char v107 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * HIWORD(v170[0]);
        char v108 = *v107;
        LODWORD(v107) = v107[1];
        LOBYTE(v167[0]) = v108;
        int v168 = (int)v107;
        __int16 v169 = HIWORD(v170[0]);
        unsigned int v109 = (unsigned __int8 *)BlueFin::GlPeMsmtMgr::AccessPropagatedMeMeas((BlueFin::GlPeMsmtMgr *)v53, (const BlueFin::GlSignalId *)v167);
        int32x2_t v110 = v109;
        if (!*(unsigned char *)(v54 + 58)
          || (int v111 = *v109,
              BlueFin::GlArray::EnsureValidHandle(v54 + 456, v111),
              *(unsigned __int8 *)(*(void *)(v54 + 472) + v111 - *(unsigned __int8 *)(v54 + 492)) != 255))
        {
          double v112 = BlueFin::GlPeMeasStatus::MsaLogic(v110);
          if (v112 > 0.0)
          {
            float v113 = &STACK[0xA20] + 3 * (int)v63;
            if (v113 != (unint64_t *)v110)
            {
              *(unsigned char *)float v113 = *v110;
              *((_DWORD *)v113 + 1) = *((_DWORD *)v110 + 1);
              *((_WORD *)v113 + 4) = *((_WORD *)v110 + 4);
            }
            *((double *)&STACK[0xA20] + 3 * (int)v63 + 2) = v112;
            uint64_t v114 = (unsigned __int8 *)&a35 + 24 * (int)v63;
            if (v114 != v110)
            {
              *uint64_t v114 = *v110;
              *((_DWORD *)v114 + 1) = *((_DWORD *)v110 + 1);
              *((_WORD *)v114 + 4) = *((_WORD *)v110 + 4);
            }
            *((double *)&a35 + 3 * (int)v63 + 2) = *((float *)v110 + 27);
            unint64_t v63 = (v63 + 1);
            GlCustomLog(14, "<PropMeasQa> PRN %02d Carrband %d\n", *v110, *((_DWORD *)v110 + 1));
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v170);
        if (BYTE1(v170[0]) == LOBYTE(v170[0])) {
          goto LABEL_122;
        }
      }
LABEL_182:
      double v155 = "usIndex < NUM_SIGNAL_IDS";
      DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
      uint64_t v156 = "glsignalid.h";
      int v157 = 577;
LABEL_183:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v156, v157, v155);
    }
  }
LABEL_122:
  BlueFin::GlStdLib::QsortImpl((char *)&STACK[0xA20], (void *)v63, 0x18u, (uint64_t (*)(char *, char *))BlueFin::GlPeRqHdlrMeas_SortPrns, (int (*)(const void *, const void *))&a29, v61);
  BlueFin::GlStdLib::QsortImpl((char *)&a35, (void *)v63, 0x18u, (uint64_t (*)(char *, char *))BlueFin::GlPeRqHdlrMeas_SortPrns, (int (*)(const void *, const void *))&a29, v115);
  a29 = (char *)&a30 + 4;
  LOBYTE(a30) = 19;
  *(long long *)((char *)&a30 + 4) = 0u;
  *(long long *)((char *)&a31 + 4) = 0u;
  *(long long *)((char *)&a32 + 4) = 0u;
  *(long long *)((char *)&a33 + 4) = 0u;
  a34 = 0u;
  double v116 = *(unsigned int **)(*(void *)(v54 + 24) + 8);
  unsigned int v117 = v116[642];
  double v118 = (double)(int)v117;
  if (v117 <= 0xFF9222FE) {
    double v118 = (double)v117;
  }
  double v119 = BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v116, 2u, 0, (uint64_t)v167, v118);
  uint64_t v120 = *(void *)(*(void *)(v54 + 24) + 8);
  int v121 = *(_DWORD *)(v120 + 2576);
  if (v121) {
    BOOL v122 = v167[0] >= 0x7E4u;
  }
  else {
    BOOL v122 = 1;
  }
  int v123 = !v122;
  *(unsigned char *)uint64_t v54 = v123;
  if (v121 != 3)
  {
    if ((v123 & (*(unsigned __int8 *)(v120 + 2744) >> 3) & 1) == 0) {
      goto LABEL_132;
    }
    goto LABEL_156;
  }
  if (v123)
  {
LABEL_156:
    if ((int)v63 >= 1)
    {
      uint64_t v140 = 0;
      double v141 = a29;
      double v142 = (char *)a29 + 4 * a30 - 4;
      double v119 = 1000.0;
      do
      {
        unsigned int v143 = 0;
        uint64_t v144 = v142;
        do
        {
          if (*v144)
          {
            unsigned int v145 = *v144 - (((*v144 >> 1) & 0x5B6DB6DB) + ((*v144 >> 2) & 0x9249249));
            unsigned int v143 = ((v145 + (v145 >> 3)) & 0xC71C71C7) + v143 - 63 * (((v145 + (v145 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          --v144;
        }
        while (v144 >= v141);
        if ((v143 & 0xFFF8) != 0 && *((double *)&STACK[0xA20] + 3 * v140 + 2) >= 1000.0) {
          break;
        }
        int v146 = *((__int16 *)&STACK[0xA20] + 12 * v140 + 4);
        v141[v146 >> 5] |= 1 << v146;
        ++v140;
      }
      while (v140 != v63);
    }
    goto LABEL_176;
  }
LABEL_132:
  uint64_t v124 = a29;
  if ((int)v63 >= 1)
  {
    uint64_t v125 = v63;
    uint64_t v126 = &STACK[0xA28];
    do
    {
      int v127 = *(__int16 *)v126;
      v126 += 3;
      v124[v127 >> 5] |= 1 << v127;
      --v125;
    }
    while (v125);
  }
  unsigned int v128 = 0;
  double v129 = &v124[a30 - 1];
  do
  {
    if (*v129)
    {
      unsigned int v130 = *v129 - (((*v129 >> 1) & 0x5B6DB6DB) + ((*v129 >> 2) & 0x9249249));
      unsigned int v128 = ((v130 + (v130 >> 3)) & 0xC71C71C7) + v128 - 63 * (((v130 + (v130 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v129;
  }
  while (v129 >= v124);
  if ((unsigned __int16)v128 < 7u) {
    char v131 = 1;
  }
  else {
    char v131 = v123;
  }
  if (v131)
  {
    char v132 = v123 ^ 1;
    if ((int)v63 < 1) {
      char v132 = 1;
    }
    if ((v132 & 1) == 0)
    {
      uint64_t v133 = (unsigned __int8 *)&a35;
      uint64_t v134 = (BlueFin::GlArray *)(v54 + 616);
      uint64_t v135 = BlueFin::GlArray::Get((BlueFin::GlArray *)(v54 + 616), *((unsigned __int8 *)&a35 + 24 * (v63 - 1)));
      uint64_t v136 = v63;
      while (1)
      {
        int v138 = *v133;
        v133 += 24;
        int v137 = v138;
        uint64_t v139 = BlueFin::GlArray::Get(v134, v138);
        if (!v139) {
          break;
        }
        LODWORD(v119) = *(_DWORD *)(v139 + 40);
        if (*(float *)&v119 < 18.0)
        {
          double v119 = *(double *)(v135 + 80) - *(double *)(v139 + 80);
          if (v119 < 0.0) {
            double v119 = -v119;
          }
          if (v119 > 12.0)
          {
            BlueFin::GlSetBase::Remove((uint64_t)&a29, *(__int16 *)(v139 + 72));
            GlCustomLog(14, "<SvQa> Remove PRN %02d, Ghost SV detected\n", v137);
          }
        }
        if (!--v136) {
          goto LABEL_176;
        }
      }
      double v155 = "potStoredMeas != nullptr";
      DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 424, "SetSatellitesDetectedAndQaAndStoreMeas", (char)"potStoredMeas != nullptr");
      uint64_t v156 = "glpe_reqhdlr_meas.cpp";
      int v157 = 424;
      goto LABEL_183;
    }
  }
  else
  {
    LOBYTE(v170[0]) = a30;
    memcpy(&vars0, v124, 4 * a30);
    HIWORD(v170[0]) = 0;
    BYTE1(v170[0]) = 0;
    v170[1] = vars0;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)v170);
    if (BYTE1(v170[0]) != LOBYTE(v170[0]))
    {
      while (HIWORD(v170[0]) < 0x23FuLL)
      {
        double v147 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * HIWORD(v170[0]);
        char v148 = *v147;
        LODWORD(v147) = v147[1];
        char v164 = v148;
        int v165 = (int)v147;
        __int16 v166 = HIWORD(v170[0]);
        double v149 = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)v53, (const BlueFin::GlSignalId *)&v164, 1, 0);
        double v150 = v149;
        unsigned int v151 = 0;
        uint64_t v152 = (char *)a29 + 4 * a30 - 4;
        do
        {
          if (*v152)
          {
            unsigned int v153 = *v152 - (((*v152 >> 1) & 0x5B6DB6DB) + ((*v152 >> 2) & 0x9249249));
            unsigned int v151 = ((v153 + (v153 >> 3)) & 0xC71C71C7) + v151 - 63 * (((v153 + (v153 >> 3)) & 0xC71C71C7) / 0x3F);
          }
          --v152;
        }
        while (v152 >= a29);
        if ((unsigned __int16)v151 >= 7u && *((_DWORD *)v149 + 5) == 4)
        {
          BlueFin::GlSetBase::Remove((uint64_t)&a29, *((__int16 *)v149 + 4));
          GlCustomLog(14, "<SvQa> Remove PRN %02d, high MP\n", *v150);
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)v170);
        if (BYTE1(v170[0]) == LOBYTE(v170[0])) {
          goto LABEL_176;
        }
      }
      goto LABEL_182;
    }
  }
LABEL_176:
  GlCustomLog(14, "<HdlrMeas::MeasQa><PreQaSort=", v119);
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&__src, (uint64_t)v170);
  BlueFin::GlSetBase::Print((uint64_t)v170, 0xEu);
  GlCustomLog(14, "\n");
  GlCustomLog(14, "<HdlrMeas::MeasQa><PostQaSort=");
  BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&a29, (uint64_t)v170);
  BlueFin::GlSetBase::Print((uint64_t)v170, 0xEu);
  GlCustomLog(14, "\n");
  LOBYTE(v170[0]) = a18;
  memcpy(&vars0, __src, 4 * a18);
  HIWORD(v170[0]) = 0;
  BYTE1(v170[0]) = 0;
  v170[1] = vars0;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)v170);
  if (BYTE1(v170[0]) != LOBYTE(v170[0]))
  {
    while (HIWORD(v170[0]) < 0x23Fu)
    {
      if ((((unint64_t)*(unsigned int *)((char *)a29 + (((unint64_t)HIWORD(v170[0]) >> 3) & 0x1FFC)) >> (BYTE2(v170[0]) & 0x1F)) & 1) == 0) {
        GlCustomLog(14, "SVIDMSA %d is missing from fresh list\n", *((unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * HIWORD(v170[0])));
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v170);
      if (BYTE1(v170[0]) == LOBYTE(v170[0])) {
        return BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&a29, v162);
      }
    }
    goto LABEL_182;
  }
  return BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)&a29, v162);
}

double BlueFin::GlPeMeasStatus::MsaLogic(unsigned __int8 *a1)
{
  int v1 = *((_DWORD *)a1 + 3);
  double v2 = -1.0;
  if ((v1 & 0x8002) != 2) {
    return v2;
  }
  int v4 = *((_DWORD *)a1 + 5);
  float v5 = *((float *)a1 + 27);
  if (v5 >= 16.0) {
    float v6 = 0.0;
  }
  else {
    float v6 = 1.0;
  }
  unsigned int v7 = v4 - 3;
  if ((v1 & 0x100) == 0)
  {
    double v8 = *((float *)a1 + 25);
    if (v5 >= 24.0)
    {
      double v10 = 0.0;
      double v9 = 1.0;
      if (v8 < 0.000000014) {
        double v9 = 0.0;
      }
    }
    else
    {
      double v9 = 0.0;
      if (v8 >= 0.000000014) {
        double v10 = (float)((float)(fabsf(v5) / 1000.0) + 1.0);
      }
      else {
        double v10 = 0.0;
      }
    }
    goto LABEL_28;
  }
  unsigned int v11 = *((_DWORD *)a1 + 10);
  float v12 = fmodf((float)v11, 1000.0);
  double v10 = 0.0;
  if (v12 > 50.0 && v12 < 950.0) {
    goto LABEL_26;
  }
  if (v5 < 24.0)
  {
    if (v11 >= 0xFA0) {
      double v13 = 1.0;
    }
    else {
      double v13 = 0.0;
    }
    if (v11 >= 0xFA0) {
      double v14 = 0.0;
    }
    else {
      double v14 = 1.0;
    }
    double v9 = 0.0;
    goto LABEL_29;
  }
  if (v7 > 1)
  {
LABEL_26:
    double v9 = 0.0;
LABEL_28:
    double v13 = 0.0;
    double v14 = 0.0;
LABEL_29:
    double v16 = 0.0;
    double v17 = 0.0;
    goto LABEL_30;
  }
  if (v11 >> 6 < 0x7D)
  {
    double v9 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    if (v11 < 0xFA0) {
      goto LABEL_30;
    }
    int v15 = *((_DWORD *)a1 + 12);
LABEL_40:
    if (v15 <= 3) {
      double v17 = 0.0;
    }
    else {
      double v17 = 1.0;
    }
    double v9 = 0.0;
    double v16 = 0.0;
    goto LABEL_30;
  }
  int v15 = *((_DWORD *)a1 + 12);
  double v16 = 1.0;
  double v9 = 0.0;
  double v13 = 0.0;
  double v14 = 0.0;
  double v17 = 0.0;
  if (v15 <= 7) {
    goto LABEL_40;
  }
LABEL_30:
  double v18 = v6;
  if (v4 == 4) {
    double v19 = 1.0;
  }
  else {
    double v19 = 0.0;
  }
  double v20 = v10 * 10000000.0 + v6 * 100000000.0 + v19 * 1000000.0 + v14 * 100000.0;
  if (v7 >= 2) {
    double v21 = 0.0;
  }
  else {
    double v21 = 1.0;
  }
  double v22 = *((float *)a1 + 22);
  double v2 = v20 + v21 * 100000.0 + v13 * 10000.0 + v9 * 1000.0 + v17 * 100.0 + v16 * 10.0 + v22;
  GlCustomLog(14, "<HdlrMeas::MeasQa><PRN=%i,CN0=%.1f,o=%g,HMp=%.1f,MMp=%.1f,Vlss=%.1f,LssM1=%5.4f,LssTrk=%.1f,HssM1=%.1f,HssEpShort=%.1f,HssEpLong%.1f,Metric=%10g,EpCnt=%u>\n", *a1, v5, v22 * 1000000.0, v19, v21, v18, v10, v13, v9, v17, v16, v2, *((_DWORD *)a1 + 10));
  return v2;
}

BOOL BlueFin::GlPeMeasStatus::PositionPossible(BlueFin::GlPeMeasStatus *this, BlueFin::GlPeMsmtMgr *a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)(*((void *)this + 3) + 8) + 2568);
  if (v2 <= 0xFF9222FE) {
    double v3 = (double)v2;
  }
  else {
    double v3 = (double)(int)v2;
  }
  double v13 = (char *)this + 456;
  unsigned __int8 v14 = *((unsigned char *)this + 495) + 1;
  if (*((unsigned __int8 *)this + 494) <= v14) {
    return 0;
  }
  int v5 = 0;
  do
  {
    unsigned __int8 v12 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v13);
    float v6 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(*((void *)this + 3) + 24) + 119744);
    int v15 = 7;
    unsigned __int8 v16 = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(v6, &v12, (uint64_t)&v15);
    unsigned __int8 v7 = v16;
    if (v16 - 64 >= 0xFFFFFFC1 && v15 != 1)
    {
      Mgr = BlueFin::GlPeGnssEphemerisMgr::GetMgr((void *)(*(void *)(*((void *)this + 3) + 24) + 384), v15);
      if (Mgr)
      {
        LOBYTE(v15) = v7;
        if (!(*(unsigned int (**)(void *, int *, uint64_t, double))(*Mgr + 64))(Mgr, &v15, 1, v3)) {
          ++v5;
        }
      }
    }
  }
  while (v14 < v13[38]);
  if (v5 <= 3) {
    return 0;
  }
  uint64_t v10 = *((void *)this + 3);
  return *(_DWORD *)(*(void *)(v10 + 64) + 44) != -1 && *(_DWORD *)(*(void *)(v10 + 8) + 2576) != 0;
}

uint64_t BlueFin::GlPeMeasStatus::ComputeReferencePosition(BlueFin::GlPeMeasStatus *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, long long a14, uint64_t a15, uint64_t a16, char *a17, long long a18, long long a19, long long a20,long long a21,long long a22,uint64_t a23,char *a24,long long a25,long long a26,uint64_t a27,long long a28,int32x2_t a29,int a30,int a31,int a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,char *a37,long long a38,long long a39,uint64_t a40,void (**a41)(BlueFin::GlGpsTime *__hidden this),unint64_t *a42,uint64_t a43,uint64_t *a44,uint64_t a45,int a46,char a47,int a48,uint64_t a49,uint64_t a50,int a51,unsigned int a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,unint64_t a59,char *a60,long long a61,long long a62)
{
  uint64_t result = MEMORY[0x270FA5388](this, a2);
  STACK[0x2558] = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 57))
  {
    uint64_t v63 = result;
    uint64_t v64 = result + 24;
    (*(void (**)(unint64_t *__return_ptr))(**(void **)(*(void *)(result + 24) + 40) + 120))(&STACK[0x288]);
    uint64_t v65 = *(void *)v64;
    uint64_t v66 = *(void *)(*(void *)v64 + 48);
    float v67 = *(float *)(v66 + 9232);
    unsigned int v68 = v67 >= 10.0 ? 0 : (const BlueFin::GlSatAidInfo *)(v66 + 9216);
    uint64_t result = BlueFin::GlPeTimeManager::TimeKnown(*(void *)(v65 + 8), 0, 0x200B20u);
    if (result)
    {
      unint64_t v69 = STACK[0x288];
      if (*(_DWORD *)STACK[0x288]) {
        goto LABEL_7;
      }
      unint64_t v90 = LOBYTE(STACK[0x290]);
      if (v90 >= 2)
      {
        if (*(_DWORD *)(v69 + 4)) {
          goto LABEL_7;
        }
        uint64_t v91 = 2;
        while (v90 != v91)
        {
          if (*(_DWORD *)(v69 + 4 * v91++))
          {
            unint64_t v93 = v91 - 1;
            goto LABEL_35;
          }
        }
        unint64_t v93 = LOBYTE(STACK[0x290]);
LABEL_35:
        if (v93 < v90)
        {
LABEL_7:
          if (v67 < 10.0)
          {
            *(unsigned char *)(v63 + 57) = 1;
            BlueFin::GlSatAidInfo::GlSatAidInfo((BlueFin::GlSatAidInfo *)&STACK[0x2C0], v68);
            a60 = (char *)&a61 + 4;
            LOBYTE(a61) = 19;
            *(long long *)((char *)&a61 + 4) = 0u;
            *(long long *)((char *)&a62 + 4) = 0u;
            *(_OWORD *)&STACK[0x25C] = 0u;
            *(_OWORD *)&STACK[0x26C] = 0u;
            uint64_t v70 = 91;
            *(_OWORD *)&STACK[0x278] = 0u;
            uint64_t v71 = (unsigned __int8 *)STACK[0x2528];
            do
            {
              unsigned int v73 = *v71;
              v71 += 96;
              uint64_t v72 = v73;
              if (v73 - 1 > 0xBB) {
                break;
              }
              uint64_t v74 = BlueFin::GlSvId::s_aucSvId2gnss[v72];
              __int16 v75 = BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v74] == 255
                  ? 575
                  : BlueFin::GlSignalId::s_ausGnss2signalId[v74]
                  + v72
                  - BlueFin::GlSvId::s_aucGnss2minSvId[v74];
              *((_DWORD *)&a61 + (v75 >> 5) + 1) |= 1 << v75;
              --v70;
            }
            while (v70);
            if (LODWORD(STACK[0x2E4]) == -7200001)
            {
              BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(*(void *)(v63 + 24) + 8), 1, (__n128 *)&a13);
              unsigned int v94 = &off_270EBC600;
              uint64_t v95 = 0;
              BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&a13, (BlueFin::GlGpsTime *)&v94);
              BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v94, *(long double *)&STACK[0x2C8], &vars8);
              a42 = vars8;
              a41 = &off_270EBC600;
              Time = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeManager::GetTime(*(BlueFin::GlPeTimeManager **)(*(void *)(v63 + 24) + 8), (const BlueFin::GlGpsTime *)&a41, 0, (uint64_t)&a13);
              LODWORD(STACK[0x2E4]) = BlueFin::GlPeTimeMgrUtil::DoubleToLms(Time, *(double *)&a14);
            }
            uint64_t v77 = *(void *)(v63 + 24);
            int v78 = *(BlueFin::GlPeKF **)(v77 + 16);
            BOOL v79 = BlueFin::GlPeKF::InFlightMode(v78);
            int v80 = *(_DWORD *)(*(void *)(v77 + 24) + 120012);
            a58 = 0;
            a57 = 0;
            a59 = 0xC158548D40000000;
            int v81 = *((_DWORD *)v78 + 22198);
            *(void *)&a13 = (char *)&a13 + 12;
            BYTE8(a13) = 8;
            *(long long *)((char *)&a13 + 12) = 0u;
            *(long long *)((char *)&a14 + 12) = 0u;
            if (v79) {
              int v82 = 1297;
            }
            else {
              int v82 = 273;
            }
            if (v80 == 1) {
              int v83 = v82 | 0x2000;
            }
            else {
              int v83 = v82;
            }
            if (BlueFin::GlPeFirstFix::m_bReqTimeOutReached) {
              v83 |= 0x100000u;
            }
            a41 = (void (**)(BlueFin::GlGpsTime *__hidden))&a60;
            a42 = &STACK[0x2C0];
            a43 = 0;
            a44 = &a57;
            a45 = 0;
            a46 = v81;
            a47 = 1;
            a48 = v83;
            a49 = 0;
            BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a50, &a52, 8u, (const void **)&a13);
            *(long long *)((char *)&a14 + 10) = 0u;
            a17 = (char *)&a18 + 4;
            LOBYTE(a18) = 19;
            *(long long *)((char *)&a18 + 4) = 0u;
            *(long long *)((char *)&a19 + 4) = 0u;
            *(long long *)((char *)&a20 + 4) = 0u;
            *(long long *)((char *)&a21 + 4) = 0u;
            *(long long *)((char *)&a22 + 4) = 0u;
            a24 = (char *)&a25 + 4;
            LOBYTE(a25) = 8;
            *(long long *)((char *)&a25 + 4) = 0u;
            *(long long *)((char *)&a26 + 4) = 0u;
            a28 = xmmword_263BBA380;
            a29 = vdup_n_s32(0x42C60000u);
            a30 = 1120272384;
            a32 = 0;
            a33 = 0;
            a34 = 0;
            a36 = 0;
            a35 = 0;
            *(long long *)((char *)&a39 + 4) = 0u;
            *(long long *)((char *)&a38 + 4) = 0u;
            a37 = (char *)&a38 + 4;
            LOBYTE(a38) = 8;
            uint64_t v84 = *(void *)(v63 + 24);
            a13 = 0u;
            a14 = 0u;
            uint64_t result = BlueFin::GlPeLsq::LsPos(*(void *)(v84 + 16) + 22720, (uint64_t)&a41, (uint64_t)&a13);
            if (result)
            {
              uint64_t vars8 = (unint64_t *)a13;
              LODWORD(v95) = 419;
              int v96 = &BlueFin::GlPeCityFine::m_aotRegions;
              LODWORD(v97) = 102;
              uint64_t v98 = &BlueFin::GlPeCityFine::m_aotIndex;
              LODWORD(vars0) = -39;
              unsigned int v94 = (void (**)(BlueFin::GlGpsTime *__hidden))&unk_270EC34B8;
              float v85 = *(double *)&a13;
              float v86 = *((double *)&a13 + 1);
              BlueFin::GlPeLatLonRegionSet::findRegion((BlueFin::GlPeLatLonRegionSet *)&v94, v85, v86);
              uint64_t v87 = *(void *)(*(void *)(v63 + 24) + 64);
              double v88 = (double)SLODWORD(STACK[0x2E4]);
              int v89 = *(_DWORD *)(v87 + 40);
              if (LODWORD(STACK[0x2E4]) <= 0xFF9222FE) {
                double v88 = (double)LODWORD(STACK[0x2E4]);
              }
              LODWORD(STACK[0x2A0]) = 2;
              *(double *)&STACK[0x2A8] = v88 + -60000.0;
              STACK[0x2B8] = 0;
              STACK[0x2B0] = (unint64_t)&off_270EBC600;
              return BlueFin::GlPeAsstPosMgr::processAssistance(v87, (long long *)&vars8, v89, 2, (BlueFin::stTimeOfAsstPos *)&STACK[0x2A0], 0, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

#error "263B48A40: call analysis failed (funcsize=62)"

void BlueFin::GlPeRqHdlrMeas::SetSIGMeasuement(BlueFin::GlPeRqHdlrMeas *this, BlueFin::GlPeMsmtMgr *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this, a2);
  int v192 = v3;
  uint64_t v217 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(v2 + 20)) {
    return;
  }
  uint64_t v4 = *(void *)(v2 + 8);
  unsigned int v5 = 1000 * *(__int16 *)(v4 + 22);
  int v6 = *(_DWORD *)(v2 + 36);
  if (v6 == -1)
  {
    int v10 = 1;
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    unsigned int v8 = *(_DWORD *)(v2 + 32) + v6;
    BOOL v9 = v8 >= v7;
    int v10 = v8 - v7;
    if (!v9) {
      int v10 = 1;
    }
  }
  unsigned int v11 = v10 + 6000;
  uint64_t v190 = v2;
  uint64_t v12 = *(void *)(v2 + 72);
  BOOL v13 = v11 > v5 && *(unsigned char *)(v12 + 16) == 4 || *(_DWORD *)(v12 + 12) < 0xDu;
  unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 152))(v4);
  uint64_t v16 = *(void *)(v190 + 72);
  if (v15) {
    unsigned int v15 = *(_DWORD *)(v16 + 52) <= v15;
  }
  if (*(unsigned char *)(v16 + 49)) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v13;
  }
  if (v17)
  {
    if (*(int *)(v16 + 44) < 100) {
      unsigned int v18 = v15;
    }
    else {
      unsigned int v18 = 0;
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  int v19 = *(_DWORD *)(v190 + 36);
  if (v19 == -1)
  {
    unsigned int v23 = 1;
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(*(void *)(v190 + 8) + 28);
    unsigned int v21 = *(_DWORD *)(v190 + 32) + v19;
    BOOL v9 = v21 >= v20;
    unsigned int v22 = v21 - v20;
    if (v9) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 1;
    }
  }
  BOOL v25 = BlueFin::GlPeMeasStatus::PositionPossible((BlueFin::GlPeMeasStatus *)v16, v14);
  uint64_t v26 = *(void *)(v190 + 72);
  BOOL v27 = v25 && *(unsigned char *)(v26 + 56) == 0;
  if (*(unsigned char *)(v26 + 48))
  {
    BOOL v28 = BlueFin::GlPeMeasStatus::PositionPossible((BlueFin::GlPeMeasStatus *)v26, v24);
    uint64_t v29 = v190;
    uint64_t v26 = *(void *)(v190 + 72);
  }
  else
  {
    BOOL v28 = 0;
    uint64_t v29 = v190;
  }
  char v30 = *(unsigned char *)(v26 + 494);
  char v31 = ~*(unsigned char *)(v26 + 495);
  int v32 = *(unsigned __int8 *)(v26 + 61);
  *(unsigned char *)(v29 + 64) = v32;
  if (v32)
  {
    int v33 = 1;
  }
  else
  {
    uint64_t v34 = v4;
    BOOL v35 = *(_DWORD *)(v26 + 40) != 5 || *(_DWORD *)(v26 + 32) != 5;
    if (((*(uint64_t (**)(void))(**(void **)(v190 + 8) + 216))(*(void *)(v190 + 8)) & 1) == 0 && !v35) {
      BOOL v35 = *(_DWORD *)(*(void *)(v190 + 72) + 32) - *(_DWORD *)(*(void *)(v190 + 72) + 36) > 5;
    }
    int v33 = (v18 & !v28) == 1 && v35 && !v27;
    uint64_t v4 = v34;
    *(unsigned char *)(v190 + 64) = v33;
    uint64_t v26 = *(void *)(v190 + 72);
  }
  unsigned __int8 v36 = v30 + v31;
  if (*(_DWORD *)(v26 + 52) >= 0xFFFFu) {
    unsigned int v37 = 0xFFFF;
  }
  else {
    unsigned int v37 = *(_DWORD *)(v26 + 52);
  }
  if (v28)
  {
    if (*(unsigned char *)(v26 + 56)) {
      uint64_t v38 = 84;
    }
    else {
      uint64_t v38 = 70;
    }
  }
  else
  {
    uint64_t v38 = 66;
  }
  unsigned int v39 = v36;
  if (v18) {
    uint64_t v40 = 84;
  }
  else {
    uint64_t v40 = 70;
  }
  if (v33) {
    uint64_t v41 = 84;
  }
  else {
    uint64_t v41 = 70;
  }
  if (*(unsigned char *)(v26 + 59)) {
    uint64_t v42 = 84;
  }
  else {
    uint64_t v42 = 70;
  }
  if (*(unsigned char *)(v190 + 65)) {
    uint64_t v43 = 84;
  }
  else {
    uint64_t v43 = 70;
  }
  if (*(unsigned char *)(v190 + 23)) {
    uint64_t v44 = 84;
  }
  else {
    uint64_t v44 = 70;
  }
  if (v11 > v5 && *(unsigned char *)(v26 + 16) == 4) {
    int v45 = 12;
  }
  else {
    int v45 = *(_DWORD *)(v26 + 12);
  }
  GlCustomLog(14, "<HdlrMeas>[PosV=%c][bGM=%c][bGVM=%c][MPD=%c][PerExp=%c][ToExp=%c][ElpTm=%u/%u][EAm=%hu][Tunc=%u][D%d H%d L%d]\n", v38, v40, v41, v42, v43, v44, v23, 1000 * *(__int16 *)(*(void *)(v190 + 8) + 22), v37, v45, v39, *(_DWORD *)(v26 + 40), *(_DWORD *)(v26 + 36));
  int32x2_t v46 = *(__int16 **)(v190 + 8);
  if (v46[11] >= 11
    && (*(unsigned int (**)(__int16 *))(*(void *)v46 + 184))(v46) <= 0x1388
    && !*(unsigned char *)(v190 + 23))
  {
    if ((uint64_t v47 = *(void *)(v190 + 72), *(unsigned char *)(v47 + 59)) && v39 < 6
      || (v11 <= v5 || *(unsigned char *)(v47 + 16) != 4 ? (BOOL v48 = *(_DWORD *)(v47 + 12) < 0xEu) : (BOOL v48 = 1), v27 || !v48))
    {
      LOWORD(v37) = -1;
    }
  }
  if (v23 >> 3 <= 0x270) {
    *(unsigned char *)(v190 + 64) = 0;
  }
  if (*(unsigned char *)(*(void *)(v190 + 72) + 9808))
  {
    int v49 = *(unsigned __int8 *)(v190 + 23);
    if (*(unsigned char *)(v190 + 64))
    {
      uint64_t v50 = v190;
      if (!*(unsigned char *)(v190 + 23))
      {
        *(unsigned char *)(v190 + 64) = 0;
        goto LABEL_91;
      }
      goto LABEL_92;
    }
  }
  else
  {
    int v49 = *(unsigned __int8 *)(v190 + 23);
  }
  uint64_t v50 = v190;
  if (!v49 && !*(unsigned char *)(v190 + 64))
  {
LABEL_91:
    if (!*(unsigned char *)(v50 + 65)) {
      return;
    }
  }
LABEL_92:
  GlCustomLog(14, "RequestResponse ");
  (*(void (**)(void, uint64_t))(**(void **)(v50 + 8) + 136))(*(void *)(v50 + 8), 14);
  uint64_t v52 = *(void *)(v50 + 56);
  uint64_t v53 = *(void *)(v52 + 8);
  if ((*(_DWORD *)(v53 + 2576) == 3 || (*(unsigned char *)(v53 + 2744) & 8) != 0)
    && (*(unsigned int (**)(uint64_t))(*(void *)(*(void *)(v52 + 16) + 27744) + 128))(*(void *)(v52 + 16) + 27744)
    && (uint64_t v54 = (char *)(*(void *)(*(void *)(v190 + 56) + 16) + 27744),
        float v55 = (*(float (**)(char *))(*(void *)&v54[*(void *)(*(void *)v54 - 24)] + 16))(&v54[*(void *)(*(void *)v54 - 24)]),
        v55 < 110.0))
  {
    float v56 = fmodf(v55, 4295000000.0);
    if (v55 <= 4295000000.0) {
      float v56 = v55;
    }
    if (v56 < -4295000000.0) {
      float v56 = -fmodf(-v56, 4295000000.0);
    }
    if (v56 < 0.0) {
      unsigned int v37 = -(float)-v56;
    }
    else {
      unsigned int v37 = v56;
    }
    GlCustomLog(14, "Fine Time EMSA, EstErro %d\n", (unsigned __int16)v37);
    char v57 = 1;
  }
  else
  {
    char v57 = 0;
  }
  if (!*(void *)(v4 + 80)) {
    return;
  }
  uint64_t v58 = *(BlueFin::GlPeMeasStatus **)(v190 + 72);
  __int16 v188 = v37;
  uint64_t v189 = v4;
  if (*((unsigned char *)v58 + 48))
  {
    BOOL v59 = !BlueFin::GlPeMeasStatus::PositionPossible(v58, v51);
    uint64_t v58 = *(BlueFin::GlPeMeasStatus **)(v190 + 72);
  }
  else
  {
    BOOL v59 = 1;
  }
  int v60 = (*(uint64_t (**)(void))(**(void **)(v190 + 8) + 216))(*(void *)(v190 + 8));
  BlueFin::GlPeMeasStatus::GetMeas((uint64_t)v58, (uint64_t)v192, (unsigned int *)v194, v59, v60, v57, v11 > v5);
  uint64_t v61 = *(void *)(v190 + 72);
  v193[0] = *(_DWORD *)(v61 + 608);
  int v62 = *(unsigned __int8 *)(v61 + 9808);
  if (*(unsigned char *)(v61 + 9808)) {
    char v63 = 3;
  }
  else {
    char v63 = 4;
  }
  LOBYTE(v193[1]) = v63;
  v193[2] = 3;
  LOBYTE(v193[3]) = 1;
  LOWORD(v193[4]) = 0;
  BYTE2(v193[4]) = 0;
  v193[77] = 5;
  LOBYTE(v193[78]) = 1;
  LOWORD(v193[79]) = 0;
  BYTE2(v193[79]) = 0;
  v193[152] = 6;
  LOBYTE(v193[153]) = 1;
  LOWORD(v193[154]) = 0;
  BYTE2(v193[154]) = 0;
  if (!v62)
  {
    v193[227] = 1;
    LOBYTE(v193[228]) = 1;
    LOWORD(v193[229]) = 13;
    BYTE2(v193[229]) = 0;
  }
  unint64_t v64 = 0;
  do
  {
    unsigned int v65 = v193[75 * v64 + 2];
    if (*(unsigned char *)(v61 + 9808)) {
      BOOL v66 = 0;
    }
    else {
      BOOL v66 = v65 == 1;
    }
    if (v66)
    {
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v214, 0x13u, (const void **)v192 + 1);
      LOBYTE(v207) = v213;
      memcpy(&v208, __src, 4 * v213);
      WORD1(v207) = 0;
      BYTE1(v207) = 0;
      HIDWORD(v207) = v208;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v207);
      LOBYTE(v67) = 0;
      if (BYTE1(v207) == v207) {
        goto LABEL_197;
      }
      LODWORD(v67) = 0;
      while (1)
      {
        if (WORD1(v207) >= 0x23FuLL)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        unsigned int v68 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v207);
        unsigned int v69 = *v68;
        int v70 = (char)v68[1];
        LOBYTE(v204) = v69;
        HIDWORD(v204) = v70;
        __int16 v205 = WORD1(v207);
        if (!v69) {
          goto LABEL_154;
        }
        if (v69 > 0x20 || v70 != 2) {
          goto LABEL_154;
        }
        MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v192, (const BlueFin::GlSignalId *)&v204, 1, 0);
        uint64_t v73 = (uint64_t)MeMeas;
        if (!MeMeas || (*((_DWORD *)MeMeas + 3) & 0x8002) != 2) {
          goto LABEL_154;
        }
        v193[75 * v64 + 5 + 6 * (int)v67] = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
                                            + 256
                                            * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                                            + *MeMeas)
                                          - 1;
        float v74 = *((float *)MeMeas + 27);
        uint64_t v75 = *(void *)(*(void *)(v61 + 24) + 56);
        float v76 = *(float *)(v75 + 40);
        uint64_t v77 = 64;
        if (!*((_DWORD *)MeMeas + 1)) {
          uint64_t v77 = 60;
        }
        if (*(float *)(v75 + v77) >= 0.0) {
          float v76 = *(float *)(v75 + v77);
        }
        float v78 = v74 + v76;
        float v79 = fmodf(v74 + v76, 4295000000.0);
        if (v78 <= 4295000000.0) {
          float v79 = v78;
        }
        if (v79 < -4295000000.0) {
          float v79 = -fmodf(-v79, 4295000000.0);
        }
        unsigned int v80 = v79 < 0.0 ? -(float)-v79 : v79;
        v193[75 * v64 + 6 + 6 * (int)v67] = v80;
        unsigned int v81 = *(_DWORD *)(v73 + 20) - 1;
        int v82 = v81 > 3 ? 0 : dword_263BBD430[v81];
        int v83 = &v193[75 * v64 + 6 * (int)v67];
        v83[7] = v82;
        CodePhase = (BlueFin::GlPeMeasStatus *)BlueFin::GlPeMeasStatus::GetCodePhase(v61, v73, (uint64_t)v192);
        v83[8] = CodePhase;
        float v85 = *(float *)(v73 + 88) * 299792458.0;
        if (v85 > 90.0) {
          goto LABEL_154;
        }
        v193[75 * v64 + 9 + 6 * (int)v67] = BlueFin::GlPeMeasStatus::CalcRmsField(CodePhase, v85);
        double v86 = (*(double *)(v61 + 600) + *(float *)(v73 + 96)) * 299792458.0 * 25.0;
        if (v86 > 0.0) {
          break;
        }
        if (v86 < 0.0)
        {
          double v87 = v86 + -0.5;
          goto LABEL_152;
        }
        int v88 = 0;
LABEL_153:
        v193[75 * v64 + 10 + 6 * (int)v67] = v88;
        LODWORD(v67) = v67 + 1;
LABEL_154:
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v207);
        if (BYTE1(v207) == v207) {
          goto LABEL_197;
        }
      }
      double v87 = v86 + 0.5;
LABEL_152:
      int v88 = (int)v87;
      goto LABEL_153;
    }
    if (v65 == 1)
    {
      uint64_t v67 = 0;
    }
    else if (v65 < 7 && ((0x4Du >> v65) & 1) != 0)
    {
      uint64_t v67 = qword_263BBD4B0[v65];
    }
    else if (v65 == 5)
    {
      uint64_t v67 = 5;
    }
    else
    {
      uint64_t v67 = 7;
    }
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v204, (unsigned int *)v206, 8u, (const void **)(v61 + 544));
    int v89 = &BlueFin::GlSvIdSet::csm_aulGlSvIdSet[2 * v67];
    __src = v214;
    LOBYTE(v213) = 8;
    long long v90 = v89[1];
    *(_OWORD *)uint64_t v214 = *v89;
    *(_OWORD *)&v214[16] = v90;
    BlueFin::GlSetBase::operator&=((uint64_t)&v204, (uint64_t)&__src);
    BlueFin::GlSignalIdSet::GlSignalIdSet((uint64_t)&__src, (uint64_t)&v204, 0);
    LOBYTE(v207) = v213;
    memcpy(&v208, __src, 4 * v213);
    WORD1(v207) = 0;
    BYTE1(v207) = 0;
    HIDWORD(v207) = v208;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v207);
    LOBYTE(v67) = 0;
    if (BYTE1(v207) != v207)
    {
      LODWORD(v67) = 0;
      do
      {
        unint64_t v91 = WORD1(v207);
        if (WORD1(v207) >= 0x23FuLL)
        {
          DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
        }
        int v92 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v207);
        int v93 = *v92;
        LODWORD(v92) = (char)v92[1];
        LOBYTE(__src) = v93;
        HIDWORD(__src) = v92;
        LOWORD(v213) = WORD1(v207);
        if (v92 != 2)
        {
          unsigned int v94 = BlueFin::GlPeMsmtMgr::GetMeMeas(v192, (const BlueFin::GlSignalId *)&__src, 1, 0);
          uint64_t v95 = (uint64_t)v94;
          if (v94)
          {
            if ((*((_DWORD *)v94 + 3) & 0x8002) == 2)
            {
              if ((*(unsigned int *)(*((void *)v192 + 181) + ((v91 >> 3) & 0x1FFC)) >> (v91 & 0x1F))) {
                GlCustomLog(14, "<GetMeasProp> GLONASS SvId %02d\n");
              }
              else {
                GlCustomLog(14, "<GetMeasNoProp> GLONASS SvId %02d\n");
              }
              int v96 = (BlueFin::GlPeMeasStatus *)BlueFin::GlPeMeasStatus::GetCodePhase(v61, v95, (uint64_t)v192);
              v193[75 * v64 + 8 + 6 * (int)v67] = v96;
              float v97 = *(float *)(v95 + 88) * 299792458.0;
              if (v97 <= 90.0)
              {
                v193[75 * v64 + 9 + 6 * (int)v67] = BlueFin::GlPeMeasStatus::CalcRmsField(v96, v97);
                unsigned int v99 = *(_DWORD *)(v95 + 20) - 1;
                if (v99 > 3) {
                  int v100 = 0;
                }
                else {
                  int v100 = dword_263BBD430[v99];
                }
                v193[75 * v64 + 7 + 6 * (int)v67] = v100;
                double v101 = (*(double *)(v61 + 600) + *(float *)(v95 + 96)) * 299792458.0 * 25.0;
                int v102 = (int)(v101 + -0.5);
                if (v101 >= 0.0) {
                  int v102 = 0;
                }
                if (v101 > 0.0) {
                  int v102 = (int)(v101 + 0.5);
                }
                v193[75 * v64 + 10 + 6 * (int)v67] = v102;
                float v103 = *(float *)(v95 + 108);
                int v104 = *(_DWORD *)(v95 + 4);
                uint64_t v105 = *(void *)(v61 + 24);
                uint64_t v106 = *(void *)(v105 + 56);
                float v107 = *(float *)(v106 + 40);
                BOOL v66 = v104 == 0;
                uint64_t v108 = 64;
                if (v66) {
                  uint64_t v108 = 60;
                }
                if (*(float *)(v106 + v108) >= 0.0) {
                  float v107 = *(float *)(v106 + v108);
                }
                float v109 = v103 + v107;
                float v110 = fmodf(v103 + v107, 4295000000.0);
                if (v109 <= 4295000000.0) {
                  float v110 = v109;
                }
                if (v110 < -4295000000.0) {
                  float v110 = -fmodf(-v110, 4295000000.0);
                }
                if (v110 < 0.0) {
                  unsigned int v111 = -(float)-v110;
                }
                else {
                  unsigned int v111 = v110;
                }
                v193[75 * v64 + 6 + 6 * (int)v67] = v111;
                double v112 = (BlueFin::GlPeGloFcnOsnMgr **)(*(void *)(v105 + 24) + 119744);
                LODWORD(v204) = 7;
                BYTE4(v204) = 0;
                BlueFin::GlPeSvIdConverter::SvId2Gnss(v112, (unsigned __int8 *)&__src, (uint64_t)&v204);
                unsigned int v113 = BYTE4(v204) - 1;
                if (v113 >= 0x3F)
                {
                  GlCustomLog(14, "Could not find OSN for SVID %d\n", __src);
                }
                else
                {
                  v193[75 * v64 + 5 + 6 * (int)v67] = v113;
                  if ((int)v67 >= 11)
                  {
                    LOBYTE(v67) = v67 + 1;
                    break;
                  }
                  LODWORD(v67) = v67 + 1;
                }
              }
              else
              {
                uint64_t v98 = BlueFin::GlArray::Get((BlueFin::GlArray *)(v61 + 616), v93);
                if (!v98)
                {
                  DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1432, "GetGanssMeas", (char)"potStoredMeas != nullptr");
                  __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas.cpp", 1432, "potStoredMeas != nullptr");
                }
                GlCustomLog(14, "<GlPeMeasStatus::GetMeas, force RMS> PRN %02d, %.8fs, %.8f, %.3f\n", v93, *(double *)(v98 + 32), *(double *)(v98 + 16) * 1000000000.0, v97);
              }
            }
          }
        }
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v207);
      }
      while (BYTE1(v207) != v207);
    }
LABEL_197:
    BYTE2(v193[75 * v64++ + 4]) = v67;
    uint64_t v114 = LOBYTE(v193[1]);
  }
  while (v64 < LOBYTE(v193[1]));
  int v115 = 0;
  if (LOBYTE(v193[1]))
  {
    double v116 = (unsigned __int8 *)&v193[4] + 2;
    __int16 v118 = v37;
    uint64_t v117 = v189;
    do
    {
      v115 += *v116;
      v116 += 300;
      --v114;
    }
    while (v114);
  }
  else
  {
    __int16 v118 = v37;
    uint64_t v117 = v189;
  }
  if ((*(_DWORD *)&v194[16] + v115) < 5)
  {
    uint64_t v119 = *(void *)(v190 + 72);
    int v191 = *(_DWORD *)v192;
    unsigned int v201 = v203;
    char v202 = 8;
    memset(v203, 0, 32);
    *(void *)int v200 = 0;
    uint64_t v120 = (BlueFin::GlArray *)(v119 + 616);
    __src = (void *)(v119 + 616);
    LOBYTE(v213) = *(unsigned char *)(v119 + 655) + 1;
    if (*(unsigned __int8 *)(v119 + 654) > v213)
    {
      do
      {
        unsigned __int8 v121 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&__src);
        v201[v121 >> 5] |= 1 << v121;
      }
      while (v213 < *((unsigned __int8 *)__src + 38));
    }
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v198, (unsigned int *)v199, 8u, (const void **)&v201);
    __src = v214;
    LOBYTE(v213) = 8;
    memset(v214, 0, 32);
    BlueFin::GlSetBase::OperatorBinaryXor((uint64_t)&v198, (int **)&__src, (int **)(v119 + 9760));
    BlueFin::GlSetBase::operator=((uint64_t)&v198, (uint64_t)&__src);
    uint64_t v122 = 0;
    v199[0] = *(_OWORD *)v214;
    v199[1] = *(_OWORD *)&v214[16];
    do
    {
      int v123 = (char *)&__src + v122;
      *int v123 = 0;
      *((_DWORD *)v123 + 1) = -1;
      *((_WORD *)v123 + 4) = 575;
      *((void *)v123 + 2) = 0;
      v122 += 24;
    }
    while (v122 != 2184);
    BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v195, v197, 8u, &v198);
    uint64_t v204 = v206;
    LOBYTE(v205) = 8;
    v206[0] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
    v206[1] = *(_OWORD *)algn_263BAA84C;
    BlueFin::GlSetBase::operator&=((uint64_t)&v195, (uint64_t)&v204);
    LOBYTE(v207) = v196;
    memcpy(&v208, v195, 4 * v196);
    WORD1(v207) = 0;
    BYTE1(v207) = 0;
    HIDWORD(v207) = v208;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v207);
    if (BYTE1(v207) != v207)
    {
      LODWORD(v124) = 0;
      uint64_t v125 = (unsigned __int8 *)(v119 + 9808);
      uint64_t v126 = &v213;
      do
      {
        char v127 = BYTE2(v207);
        unsigned int v128 = 2 * *v125;
        if ((BYTE2(v207) + 67) >= 0x44u)
        {
          uint64_t v130 = BlueFin::GlSvId::s_aucSvId2gnss[BYTE2(v207)];
          if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v128 - v128 + v130] == 255)
          {
            __int16 v129 = 575;
            unsigned int v128 = -1;
          }
          else
          {
            __int16 v129 = BlueFin::GlSignalId::s_ausGnss2signalId[v130]
                 + BYTE2(v207)
                 - BlueFin::GlSvId::s_aucGnss2minSvId[v130]
                 + v128 * BlueFin::GlSvId::s_aucGnss2numSvId[v130];
          }
        }
        else
        {
          __int16 v129 = 575;
        }
        uint64_t v131 = BlueFin::GlArray::Get((BlueFin::GlArray *)(v119 + 616), BYTE2(v207));
        if (!v131)
        {
          DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1501, "GetStoredMeas", (char)"potStoredMeas != nullptr");
          __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas.cpp", 1501, "potStoredMeas != nullptr");
        }
        *((unsigned char *)v126 - 8) = v127;
        *(v126 - 1) = v128;
        *(_WORD *)uint64_t v126 = v129;
        *((void *)v126 + 1) = *(void *)(v131 + 56);
        BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v207);
        unint64_t v124 = (v124 + 1);
        v126 += 6;
      }
      while (BYTE1(v207) != v207);
      BlueFin::GlStdLib::QsortImpl((char *)&__src, (void *)v124, 0x18u, (uint64_t (*)(char *, char *))BlueFin::GlPeRqHdlrMeas_SortPrns, (int (*)(const void *, const void *))&v207, v132);
      if (v124)
      {
        for (unsigned int i = 0; i < v124; ++i)
        {
          uint64_t v134 = *((unsigned __int8 *)&__src + 24 * i);
          unsigned int v135 = 2 * *v125;
          if ((v134 + 67) >= 0x44u)
          {
            uint64_t v137 = BlueFin::GlSvId::s_aucSvId2gnss[v134];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v135 - v135 + v137] == 255)
            {
              unsigned int v136 = 575;
              unsigned int v135 = -1;
            }
            else
            {
              unsigned int v136 = (unsigned __int16)(BlueFin::GlSignalId::s_ausGnss2signalId[v137]
                                      + v134
                                      - BlueFin::GlSvId::s_aucGnss2minSvId[v137]
                                      + v135 * BlueFin::GlSvId::s_aucGnss2numSvId[v137]);
            }
          }
          else
          {
            unsigned int v136 = 575;
          }
          uint64_t v138 = BlueFin::GlArray::Get(v120, *((unsigned __int8 *)&__src + 24 * i));
          uint64_t v139 = v138;
          if (!v138)
          {
            DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1514, "GetStoredMeas", (char)"potStoredMeas != nullptr");
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas.cpp", 1514, "potStoredMeas != nullptr");
          }
          double v140 = (double)(v191 - *(_DWORD *)(v138 + 48)) * 0.001;
          GlCustomLog(14, "<GetStoredMeasProp> PRN %02d, %.3fs\n", v134, v140);
          if (v140 <= 5.0)
          {
            double v142 = *(double *)(v139 + 24);
            double v143 = -0.0;
            if (v142 > 1.0) {
              double v143 = v140;
            }
            double v144 = *(double *)(v139 + 8);
            double v145 = *(double *)(v119 + 592) + (v142 + v143 + v144 * v140) * 1000.0;
            BOOL v146 = v145 < 0.0;
            if (v145 == (double)(int)v145) {
              BOOL v146 = 0;
            }
            BlueFin::GlPeMeasStatus::CalcRangeField((int *)&v200[1], (double)((int)v145 - v146) - v145 + 1.0, v200, v141);
            uint64_t v147 = *(unsigned int *)&v194[16];
            char v148 = &v194[32 * *(unsigned int *)&v194[16]];
            unsigned int v149 = v200[0];
            v148[8] = v200[1];
            v148[9] = v149;
            v148[12] = 0;
            if ((v134 - 1) >= 0x20u)
            {
              DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1541, "GetStoredMeas", (char)"IS_GPS_SVID(*otSvId)");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas.cpp", 1541, "IS_GPS_SVID(*otSvId)");
            }
            v148[5] = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
                      + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                      + v134)
                    - 1;
            float v150 = *(float *)(v139 + 40);
            uint64_t v151 = *(void *)(*(void *)(v119 + 24) + 56);
            float v152 = *(float *)(v151 + 40);
            uint64_t v153 = 64;
            if (!v135) {
              uint64_t v153 = 60;
            }
            if (*(float *)(v151 + v153) >= 0.0) {
              float v152 = *(float *)(v151 + v153);
            }
            float v154 = v150 + v152;
            float v156 = fmodf(v150 + v152, 4295000000.0);
            if (v154 <= 4295000000.0) {
              float v156 = v154;
            }
            if (v156 < -4295000000.0) {
              float v156 = -fmodf(-v156, 4295000000.0);
            }
            unsigned int v157 = v156;
            if (v156 < 0.0) {
              unsigned int v157 = -(float)-v156;
            }
            uint64_t v158 = &v194[32 * v147];
            *((_DWORD *)v158 + 6) = v157;
            if (v136 >= 0x23F)
            {
              DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 650, "IsValid()");
            }
            uint64_t v159 = BlueFin::GlSvId::s_aucSvId2gnss[v134];
            double v160 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * (int)v135 - (int)v135 + v159]];
            if (v159 == 2) {
              double v160 = v160 + -4500000.0;
            }
            *((_DWORD *)v158 + 7) = (int)((v144 + *(double *)(v119 + 600)) * v160 * 5.0);
            double v161 = *(double *)(v139 + 32);
            float v162 = (v161 + *(double *)(v139 + 16) * v140) * 299792458.0;
            if (v162 <= 110.0)
            {
              uint64_t v125 = (unsigned __int8 *)(v119 + 9808);
            }
            else
            {
              double v155 = (BlueFin::GlPeMeasStatus *)GlCustomLog(14, "<GetStoredMeasProp> PRN %02d, %.8fs, %.8f, %.3f\n", v134, v161, *(double *)(v139 + 16), v162);
              uint64_t v125 = (unsigned __int8 *)(v119 + 9808);
              uint64_t v147 = *(unsigned int *)&v194[16];
              if (*(_DWORD *)&v194[16] > 4u) {
                continue;
              }
              float v162 = 110.0;
            }
            int v163 = BlueFin::GlPeMeasStatus::CalcRmsField(v155, v162);
            char v164 = &v194[32 * v147];
            *((_DWORD *)v164 + 11) = v163;
            unsigned int v165 = *(_DWORD *)(v139 + 44) - 1;
            if (v165 > 3) {
              int v166 = 0;
            }
            else {
              int v166 = dword_263BBD430[v165];
            }
            *((_DWORD *)v164 + 10) = v166;
            *(_DWORD *)&v194[16] = v147 + 1;
            if ((v147 + 1) > 0xB) {
              break;
            }
          }
          else
          {
            BlueFin::GlArray::Remove(v120, v134);
          }
        }
      }
    }
    __int16 v118 = v188;
    uint64_t v117 = v189;
  }
  *(_WORD *)&v194[12] = v118;
  uint64_t v167 = *(void (**)(void))(v117 + 80);
  if (v167) {
    v167();
  }
  int v168 = *(_DWORD *)(*(void *)(v190 + 8) + 16);
  __src = &unk_270EC5808;
  int v213 = v168;
  int v216 = 0;
  memcpy(v214, v194, sizeof(v214));
  memcpy(v215, v193, sizeof(v215));
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    BlueFin::GlPeMsaMeasData::SerializeImpl((uint64_t)&__src, 0);
    int v168 = *(_DWORD *)(*(void *)(v190 + 8) + 16);
  }
  GlCustomLog(14, "MSAMEASHeader: %d, %d, %u, %hu, %u\n", *(_DWORD *)v194, v168, *(_DWORD *)&v194[8], *(unsigned __int16 *)&v194[12], *(_DWORD *)&v194[16]);
  if (*(_DWORD *)&v194[16])
  {
    int v169 = 0;
    do
    {
      char v170 = &v194[32 * v169];
      GlCustomLog(14, "MSAMEAS: %u, %u, %d, %u, %u, %u, %u, %u\n", v170[5], v170[6], v170[7], v170[8], v170[9], v170[10], v170[11], v170[12]);
      ++v169;
    }
    while (*(_DWORD *)&v194[16] > v169);
  }
  if (LOBYTE(v193[1]))
  {
    unint64_t v171 = 0;
    uint64_t v172 = &v193[10];
    do
    {
      uint64_t v173 = (int)v193[75 * v171 + 2];
      uint64_t v174 = "<->";
      if (v173 <= 6) {
        uint64_t v174 = off_2655E02D8[v173];
      }
      uint64_t v175 = &v193[75 * v171];
      int v176 = v175[18];
      v175 += 18;
      BOOL v177 = v175 - 2;
      GlCustomLog(14, "MSAGANSSMEASHeader: %u, %d, %d, %d\n", v193[0], v173, *(v175 - 2), v176);
      if (*v175)
      {
        unint64_t v178 = 0;
        double v179 = v172;
        do
        {
          GlCustomLog(14, "MSAMEAS(%s): %u, %u, %d, %u, %u, %u\n", v174, *(v179 - 5), *(v179 - 4), *v179, *(v179 - 2), *(v179 - 3), *(v179 - 1));
          ++v178;
          v179 += 6;
        }
        while (v178 < v177[2]);
      }
      ++v171;
      v172 += 75;
    }
    while (v171 < LOBYTE(v193[1]));
  }
  uint64_t v180 = *(void *)(*(void *)(v190 + 56) + 8);
  if (*(_DWORD *)(v180 + 2576) == 3 || (*(unsigned char *)(v180 + 2744) & 8) != 0)
  {
    uint64_t v181 = *(void *)(v190 + 72);
    int v182 = (*(uint64_t (**)(void))(**(void **)(v190 + 8) + 216))(*(void *)(v190 + 8));
    BlueFin::GlPeMeasStatus::GetMeas(v181, (uint64_t)v192, (unsigned int *)v194, v182, 0, 0, 0);
    unint64_t v183 = (char *)(*(void *)(*(void *)(v190 + 56) + 16) + 27744);
    float v184 = (*(float (**)(char *))(*(void *)&v183[*(void *)(*(void *)v183 - 24)] + 16))(&v183[*(void *)(*(void *)v183 - 24)]);
    double v185 = fmod(v184, 4294967300.0);
    if (v184 <= 4295000000.0) {
      double v185 = v184;
    }
    if (v185 < -4294967300.0) {
      double v185 = -fmod(-v185, 4294967300.0);
    }
    if (v185 < 0.0) {
      unsigned int v186 = --v185;
    }
    else {
      LOWORD(v186) = v185;
    }
    *(_WORD *)&v194[12] = v186;
    int v187 = *(_DWORD *)(*(void *)(v190 + 8) + 16);
    unsigned int v207 = &unk_270EC5808;
    int v208 = v187;
    int v211 = 2;
    memcpy(v209, v194, sizeof(v209));
    memcpy(v210, v193, sizeof(v210));
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        BlueFin::GlPeMsaMeasData::SerializeImpl((uint64_t)&v207, 0);
      }
    }
  }
}

void BlueFin::GlPeMeasStatus::GetMeas(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5, char a6, int a7)
{
  double v12 = (double)*(int *)a2;
  BOOL v13 = *(unsigned int **)(*(void *)(a1 + 24) + 8);
  unsigned int v155 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 <= 0xFF9222FE) {
    double v12 = (double)*(unsigned int *)a2;
  }
  BlueFin::GlPeTimeManager::lmsToLegacyGlStruct(v13, 0, 1, (uint64_t)v171, v12);
  unsigned int v15 = v175;
  unsigned int v16 = v172;
  *(void *)char v170 = 0;
  a3[4] = 0;
  int v153 = a7;
  if (v15 <= 0x3E7)
  {
    uint64_t v17 = *(void *)(a1 + 24);
    unsigned int v18 = v16;
    LOWORD(v14) = v173;
    *(double *)&unint64_t v19 = (double)v14;
    double v20 = (double)v16 + *(double *)&v19 * 0.001;
    LOWORD(v19) = v174;
    double v21 = v20
        + (double)v19 * 0.000001
        + *(float *)(*(void *)(*(void *)(v17 + 16) + 92344) + 25952) * 0.001
        + 0.0000005;
    double v22 = fmod(v21, 4294967300.0);
    if (v21 <= 4294967300.0) {
      double v22 = v21;
    }
    if (v22 < -4294967300.0) {
      double v22 = -fmod(-v22, 4294967300.0);
    }
    if (v22 < 0.0) {
      unsigned int v23 = --v22;
    }
    else {
      unsigned int v23 = v22;
    }
    unsigned int v172 = v23;
    double v24 = fmod((double)v23 * -1000.0 + v21 * 1000.0, 4294967300.0);
    if ((double)v23 * -1000.0 + v21 * 1000.0 <= 4294967300.0) {
      double v24 = (double)v23 * -1000.0 + v21 * 1000.0;
    }
    if (v24 < -4294967300.0) {
      double v24 = -fmod(-v24, 4294967300.0);
    }
    if (v24 < 0.0) {
      unsigned int v25 = --v24;
    }
    else {
      LOWORD(v25) = v24;
    }
    __int16 v173 = v25;
    unsigned int v26 = (unsigned __int16)v25;
    double v27 = (double)v23 * -1000000.0 + v21 * 1000000.0 + (double)(unsigned __int16)v25 * -1000.0;
    double v28 = fmod(v27, 4294967300.0);
    if (v27 <= 4294967300.0) {
      double v28 = v27;
    }
    if (v28 < -4294967300.0) {
      double v28 = -fmod(-v28, 4294967300.0);
    }
    if (v28 < 0.0) {
      unsigned int v29 = --v28;
    }
    else {
      LOWORD(v29) = v28;
    }
    __int16 v174 = v29;
    int v30 = (unsigned __int16)v29;
    double v31 = (double)(unsigned __int16)v29 * 0.000001 + (double)v26 * 0.001;
    if (v23 < v155) {
      double v31 = v31 + -1.0;
    }
    double v32 = -v31;
    *(double *)(a1 + 592) = v32;
    double v33 = (double)*(__int16 *)(*(void *)(v17 + 80) + 2) * 0.000000001;
    *(double *)(a1 + 600) = v33;
    if (BlueFin::GlUtils::m_ucEnabled)
    {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
      double v33 = *(double *)(a1 + 600);
      double v32 = *(double *)(a1 + 592);
    }
    GlCustomLog(14, "MSACommonBias: %u, %u, %hu, %hu, %.3f,%.5f\n", v155, v23, v26, v30, v33 * 1000000000.0, v32);
    unsigned int v16 = v18;
    a7 = v153;
  }
  uint64_t v34 = (unsigned __int8 *)(a1 + 9768);
  unsigned int v148 = v16;
  if (a7 && *(unsigned char *)(a1 + 16) == 4)
  {
    BOOL v35 = 1;
  }
  else
  {
    unsigned int v36 = *(_DWORD *)(a1 + 12);
    BOOL v35 = v36 < 0xE;
    if (a5 && v36 >= 0xE) {
      BOOL v35 = (*(unsigned char *)(a1 + 494) + ~*(unsigned char *)(a1 + 495)) > 4u;
    }
  }
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, v169, 0x13u, (const void **)(a2 + 8));
  LODWORD(v159) = v168;
  memcpy(&v160, __src, 4 * v168);
  HIDWORD(v159) = v160;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v159);
  int v38 = 0;
  if (BYTE1(v159) != v159)
  {
    int v38 = 0;
    while (1)
    {
      if (WORD1(v159) >= 0x23FuLL)
      {
LABEL_188:
        double v140 = "usIndex < NUM_SIGNAL_IDS";
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        double v141 = "glsignalid.h";
        int v142 = 577;
        goto LABEL_189;
      }
      uint64_t v40 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(v159);
      unsigned __int8 v41 = *v40;
      LODWORD(v40) = (char)v40[1];
      unsigned __int8 v162 = v41;
      int v165 = (int)v40;
      LOWORD(v166[0]) = WORD1(v159);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)a2, (const BlueFin::GlSignalId *)&v162, 1, 0);
      if (!MeMeas || v162 - 33 < 0xFFFFFFE0) {
        goto LABEL_50;
      }
      if (!*(unsigned char *)(a1 + 9808)) {
        break;
      }
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)MeMeas + 1)
                                                                  - *((int *)MeMeas + 1)
                                                                  + BlueFin::GlSvId::s_aucSvId2gnss[*MeMeas]] == 2)
        goto LABEL_49;
LABEL_50:
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&v159);
      if (BYTE1(v159) == v159) {
        goto LABEL_37;
      }
    }
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)MeMeas + 1)
                                                                - *((int *)MeMeas + 1)
                                                                + BlueFin::GlSvId::s_aucSvId2gnss[*MeMeas]])
      goto LABEL_50;
LABEL_49:
    ++v38;
    goto LABEL_50;
  }
LABEL_37:
  unsigned int v39 = v15 / 0x3E8;
  if (*(unsigned char *)a1 || (a6 & 1) != 0)
  {
    if (*(unsigned char *)a1) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 56)
    && *(unsigned char *)(a1 + 48)
    && BlueFin::GlPeMeasStatus::PositionPossible((BlueFin::GlPeMeasStatus *)a1, v37))
  {
LABEL_55:
    BlueFin::GlPeRangeAidGen::RecomputeAidingNow(*(void *)(*(void *)(a1 + 24) + 48), 1, v155, 0, 0);
    uint64_t v43 = *(unsigned __int8 **)(*(void *)(a1 + 24) + 48);
    uint64_t v44 = v43 + 9190;
    if (v43[9191] + 1 == v43[9190]) {
      goto LABEL_56;
    }
    int v94 = 0;
    uint64_t v95 = (uint64_t)(v43 + 32);
    uint64_t v159 = (void *)(a1 + 456);
    LOBYTE(v160) = *(unsigned char *)(a1 + 495) + 1;
    float v96 = 0.0;
    while (v160 < *((unsigned __int8 *)v159 + 38))
    {
      int v97 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v159);
      if ((v97 - 1) <= 0x1F)
      {
        int v98 = v97;
        unsigned __int8 v162 = v97;
        AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId((uint64_t)(v43 + 32), &v162);
        if (AidBySvId)
        {
          if ((*((_DWORD *)AidBySvId + 3) | 2) == 3)
          {
            LOBYTE(v100) = *(unsigned char *)BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 456), v98);
            float v96 = v96 + (float)v100;
            ++v94;
          }
        }
        else
        {
          GlCustomLog(14, "No aiding for SV %d\n", v98);
        }
      }
    }
    if (v94) {
      float v96 = v96 / (float)v94;
    }
    uint64_t v101 = *(void *)(*(void *)(a1 + 24) + 16);
    if (*(float *)(v101 + 964) >= 0.8) {
      float v102 = *(float *)(v101 + 964);
    }
    else {
      float v102 = 0.8;
    }
    uint64_t v103 = v101 + 27744 + *(void *)(*(void *)(v101 + 27744) - 24);
    int v104 = (BlueFin::GlPeMeasStatus *)(*(uint64_t (**)(uint64_t))(*(void *)v103 + 16))(v103);
    unsigned int v156 = BlueFin::GlPeMeasStatus::CalcRmsField(v104, v105 / v102);
    uint64_t v159 = v43 + 9152;
    unsigned __int8 v106 = v43[9191] + 1;
    LOBYTE(v160) = v106;
    float v107 = fmodf(v96, 4295000000.0);
    if (v96 > 4295000000.0) {
      float v96 = v107;
    }
    float v108 = -fmodf(-v96, 4295000000.0);
    if (v96 >= -4295000000.0) {
      float v108 = v96;
    }
    if (v108 < 0.0) {
      unsigned int v109 = -(float)-v108;
    }
    else {
      unsigned int v109 = v108;
    }
    if (v109 <= 0x11) {
      int v110 = 17;
    }
    else {
      int v110 = v109;
    }
    if (*v44 <= v106 || a3[4] > 0xB) {
      goto LABEL_186;
    }
    BOOL v111 = v94 < 6;
    int v112 = 6 - v94;
    while (1)
    {
      int v113 = BlueFin::GlArrayIterator::Next((BlueFin::GlArrayIterator *)&v159);
      if ((v113 - 1) < 0x20)
      {
        int v114 = v113;
        a3[8 * a3[4] + 12] = 0;
        BlueFin::GlArray::EnsureValidHandle(a1 + 456, v113);
        if (*(unsigned __int8 *)(*(void *)(a1 + 472) + v114 - *(unsigned __int8 *)(a1 + 492)) == 255
          && !v111)
        {
          goto LABEL_184;
        }
        unsigned __int8 v162 = v114;
        int v115 = BlueFin::GlPeSatAidInfo::GetAidBySvId(v95, &v162);
        if (v115)
        {
          uint64_t v117 = v115;
          if ((*((_DWORD *)v115 + 3) | 2) == 3)
          {
            BlueFin::GlArray::EnsureValidHandle(a1 + 456, v114);
            if (*(unsigned __int8 *)(*(void *)(a1 + 472) + v114 - *(unsigned __int8 *)(a1 + 492)) == 255)
            {
              --v112;
              int v118 = v110;
            }
            else
            {
              int v118 = *(unsigned __int8 *)BlueFin::GlArray::Get((BlueFin::GlArray *)(a1 + 456), v114);
            }
            uint64_t v119 = *v117;
            int v144 = v110;
            int v145 = v112;
            int v152 = v118;
            if ((v119 + 67) < 0x44u)
            {
              uint64_t v120 = 0;
              __int16 v121 = 575;
              goto LABEL_161;
            }
            uint64_t v122 = BlueFin::GlSvId::s_aucSvId2gnss[v119];
            if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v122] == 255)
            {
              int v123 = 0;
              unsigned __int16 v147 = 575;
              uint64_t v120 = -1;
            }
            else
            {
              uint64_t v120 = 0;
              __int16 v121 = BlueFin::GlSignalId::s_ausGnss2signalId[v122]
                   + v119
                   - BlueFin::GlSvId::s_aucGnss2minSvId[v122];
LABEL_161:
              unsigned __int16 v147 = v121;
              int v123 = 1;
            }
            uint64_t v124 = a3[4];
            uint64_t v125 = &a3[8 * v124];
            v125[5] = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
                      + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
                      + v119)
                    - 1;
            uint64_t v126 = *(void *)(*(void *)(a1 + 24) + 56);
            BOOL v59 = v123 == 0;
            uint64_t v127 = 64;
            if (!v59) {
              uint64_t v127 = 60;
            }
            if (*(float *)(v126 + v127) >= 0.0) {
              float v128 = *(float *)(v126 + v127);
            }
            else {
              float v128 = *(float *)(v126 + 40);
            }
            float v130 = fmodf(v128, 4295000000.0);
            if (v128 <= 4295000000.0) {
              float v130 = v128;
            }
            if (v130 < -4295000000.0) {
              float v130 = -fmodf(-v130, 4295000000.0);
            }
            if (v130 < 0.0) {
              unsigned int v131 = -(float)-v130;
            }
            else {
              unsigned int v131 = v130;
            }
            v125[6] = v131 + v152;
            if (v147 >= 0x23Fu)
            {
LABEL_191:
              double v140 = "IsValid()";
              DeviceFaultNotify("glsignalid.h", 650, "GetRfCarrierFrqHz", (char)"IsValid()");
              double v141 = "glsignalid.h";
              int v142 = 650;
              goto LABEL_189;
            }
            uint64_t v132 = BlueFin::GlSvId::s_aucSvId2gnss[v119];
            double v133 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v120 - v120 + v132]];
            if (v132 == 2)
            {
              double v134 = (double)(char)(v119 - 59);
              if ((v119 - 52) >= 0xE) {
                double v134 = -8.0;
              }
              double v133 = v133 + v134 * 562500.0;
            }
            int v110 = v144;
            unsigned int v135 = &a3[8 * v124];
            v135[7] = (int)(v133 * *((float *)v117 + 11) * 5.0);
            double v136 = *((double *)v117 + 4);
            if (v136 < 0.0) {
              double v136 = -v136;
            }
            double v137 = v136 * 1000.0;
            BOOL v138 = v137 < 0.0;
            if (v137 == (double)(int)v137) {
              BOOL v138 = 0;
            }
            BlueFin::GlPeMeasStatus::CalcRangeField((int *)&v170[1], v137 - (double)((int)v137 - v138), v170, v129);
            unsigned int v139 = v170[0];
            v135[8] = v170[1];
            *(void *)(v135 + 9) = v139;
            v135[11] = v156;
            a3[4] = v124 + 1;
            int v112 = v145;
          }
LABEL_184:
          BOOL v111 = v112 > 0;
          goto LABEL_147;
        }
        GlCustomLog(14, "No aiding for SV %d\n", v114);
      }
LABEL_147:
      if (v160 >= *((unsigned __int8 *)v159 + 38) || a3[4] >= 0xC) {
        goto LABEL_186;
      }
    }
  }
LABEL_56:
  if (!v35)
  {
    if (a4)
    {
      unsigned int v46 = v148;
      if ((!v153 || *(unsigned char *)(a1 + 16) != 4) && *(_DWORD *)(a1 + 12) >= 0xEu) {
        a3[4] = 0;
      }
      goto LABEL_187;
    }
    a3[4] = 0;
LABEL_186:
    unsigned int v46 = v148;
    goto LABEL_187;
  }
  if (v153 && *(unsigned char *)(a1 + 16) == 4) {
    unsigned int v45 = 12;
  }
  else {
    unsigned int v45 = *(_DWORD *)(a1 + 12);
  }
  int v149 = *(_DWORD *)(a1 + 8);
  int v151 = *(_DWORD *)(a1 + 4);
  if (v45 <= 1) {
    unsigned int v45 = 1;
  }
  unsigned int v154 = v45;
  bzero(*(void **)(a1 + 9760), ((4 * *v34 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)v157, v158, 8u, (const void **)(a1 + 544));
  uint64_t v159 = v161;
  LOBYTE(v160) = 8;
  v161[0] = BlueFin::GlSvIdSet::csm_aulGlSvIdSet[0];
  v161[1] = *(_OWORD *)algn_263BAA84C;
  BlueFin::GlSetBase::operator&=((uint64_t)v157, (uint64_t)&v159);
  BlueFin::GlSignalIdSet::GlSignalIdSet((uint64_t)&v159, (uint64_t)v157, 0);
  unsigned __int8 v162 = v160;
  memcpy(v166, v159, 4 * v160);
  unsigned __int16 v164 = 0;
  unsigned __int8 v163 = 0;
  int v165 = v166[0];
  BlueFin::GlSetIterator::operator++(&v162);
  if (v163 != v162)
  {
    uint64_t v47 = (BlueFin::GlArray *)(a1 + 616);
    int v143 = v38;
    while (1)
    {
      unint64_t v48 = v164;
      if (v164 >= 0x23FuLL) {
        goto LABEL_188;
      }
      int v49 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v164;
      int v50 = *v49;
      LODWORD(v49) = (char)v49[1];
      LOBYTE(v159) = v50;
      HIDWORD(v159) = v49;
      LOWORD(v160) = v164;
      uint64_t v51 = BlueFin::GlPeMsmtMgr::AccessMeMeas((BlueFin::GlPeMsmtMgr *)a2, (const BlueFin::GlSignalId *)&v159, 1, 0);
      if (!v51) {
        goto LABEL_115;
      }
      uint64_t v52 = v51;
      if ((*((_DWORD *)v51 + 3) & 0x8002) != 2) {
        goto LABEL_115;
      }
      uint64_t v53 = *v51;
      if (v34[40])
      {
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v51 + 1)
                                                                    - *((int *)v51 + 1)
                                                                    + BlueFin::GlSvId::s_aucSvId2gnss[v53]] != 2)
          goto LABEL_115;
      }
      else if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * *((int *)v51 + 1) {
                                                                       - *((int *)v51 + 1)
      }
                                                                       + BlueFin::GlSvId::s_aucSvId2gnss[v53]])
      {
        goto LABEL_115;
      }
      BlueFin::GlArray::EnsureValidHandle((uint64_t)v47, *v51);
      if (*(unsigned __int8 *)(*(void *)(a1 + 632) + v53 - *(unsigned __int8 *)(a1 + 652)) != 255)
      {
        uint64_t v54 = BlueFin::GlArray::Get(v47, *v52);
        if (!v54)
        {
          double v140 = "potStoredMeas != nullptr";
          DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1202, "GetMeas", (char)"potStoredMeas != nullptr");
          double v141 = "glpe_reqhdlr_meas.cpp";
          int v142 = 1202;
          goto LABEL_189;
        }
        float v55 = *(float *)(v54 + 40);
        if (v55 > *((float *)v52 + 27))
        {
          *((float *)v52 + 27) = v55;
          *(float *)(v54 + 40) = v55 + -0.1;
        }
      }
      *(_DWORD *)(*(void *)(a1 + 9760) + (((unint64_t)*v52 >> 3) & 0x1C)) |= 1 << *v52;
      unint64_t v56 = v48 >> 5;
      uint64_t v57 = *(unsigned int *)(*(void *)(a2 + 1448) + 4 * (v48 >> 5));
      uint64_t v58 = 1 << (v48 & 0x1F);
      BOOL v59 = (v58 & v57) == 0;
      int v60 = (const char *)&unk_263B6E70D;
      if (v59) {
        int v60 = "No";
      }
      GlCustomLog(14, "<GetMeas%sProp> PRN %02d\n", v60, v50);
      float InterSystemHwBiasM = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(*(void *)(*(void *)(a1 + 24) + 120), v52, 0, 0);
      double v63 = *(double *)(a1 + 592);
      double v64 = *((double *)v52 + 8);
      double v65 = InterSystemHwBiasM / 299792.458;
      double v66 = v65 + v63 + *((double *)v52 + 7) * 1000.0;
      BOOL v67 = v66 < 0.0;
      if (v66 == (double)(int)v66) {
        BOOL v67 = 0;
      }
      double v68 = (double)((int)v66 - v67) - v66 + 1.0;
      double v69 = v65 + v63 + v64;
      BOOL v70 = v69 < 0.0;
      if (v69 == (double)(int)v69) {
        BOOL v70 = 0;
      }
      if (v64 != 0.0 && (v58 & *(_DWORD *)(*(void *)(a2 + 1448) + 4 * v56)) == 0)
      {
        double v71 = (double)((int)v69 - v70) - v69 + 1.0;
        if (fabs(v71 - v68) <= 0.01) {
          double v68 = v71;
        }
      }
      uint64_t v72 = (BlueFin::GlPeMeasStatus *)BlueFin::GlPeMeasStatus::CalcRangeField((int *)&v170[1], v68, v170, v61);
      unsigned int v73 = v170[0];
      float v74 = &a3[8 * a3[4]];
      v74[8] = v170[1];
      v74[9] = v73;
      float v75 = *((float *)v52 + 22) * 299792458.0;
      if (v75 <= 90.0) {
        goto LABEL_96;
      }
      uint64_t v76 = BlueFin::GlArray::Get(v47, v50);
      if (!v76)
      {
        double v140 = "potStoredMeas != nullptr";
        DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1254, "GetMeas", (char)"potStoredMeas != nullptr");
        double v141 = "glpe_reqhdlr_meas.cpp";
        int v142 = 1254;
LABEL_189:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v141, v142, v140);
      }
      uint64_t v72 = (BlueFin::GlPeMeasStatus *)GlCustomLog(14, "<GlPeMeasStatus::GetMeas, force RMS> PRN %02d, %.8fs, %.8f, %.3f\n", v50, *(double *)(v76 + 32), *(double *)(v76 + 16) * 1000000000.0, v75);
      if (v38 < 6 || *(unsigned char *)a1) {
        break;
      }
LABEL_115:
      BlueFin::GlSetIterator::operator++(&v162);
      if (v163 == v162) {
        goto LABEL_116;
      }
    }
    float v75 = 50.0;
LABEL_96:
    unsigned int v77 = BlueFin::GlPeMeasStatus::CalcRmsField(v72, v75);
    uint64_t v78 = a3[4];
    float v79 = &a3[8 * v78];
    v79[11] = v77;
    int v80 = *((_DWORD *)v52 + 5) - 1;
    if (v80 > 3) {
      unsigned int v81 = 0;
    }
    else {
      unsigned int v81 = dword_263BBD430[v80];
    }
    v79[10] = v81;
    v79[12] = 0;
    uint64_t v82 = *v52;
    if ((v82 - 1) >= 0x20)
    {
      double v140 = "IS_GPS_SVID(*pSigMeas->m_otSignalId.GetSvId())";
      DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1273, "GetMeas", (char)"IS_GPS_SVID(*pSigMeas->m_otSignalId.GetSvId())");
      double v141 = "glpe_reqhdlr_meas.cpp";
      int v142 = 1273;
      goto LABEL_189;
    }
    int v83 = v47;
    uint64_t v84 = &a3[8 * v78];
    v84[5] = *((unsigned __int8 *)&BlueFin::GlImplGnss::m_aucFromEnabledSvIdToImplSvId
             + 256 * (unint64_t)BlueFin::GlImplGnss::m_ucActiveSvIdMapVersion
             + v82)
           - 1;
    uint64_t v85 = *((int *)v52 + 1);
    uint64_t v86 = *(void *)(*(void *)(a1 + 24) + 56);
    float v87 = *(float *)(v86 + 40);
    uint64_t v88 = 64;
    if (!v85) {
      uint64_t v88 = 60;
    }
    if (*(float *)(v86 + v88) >= 0.0) {
      float v87 = *(float *)(v86 + v88);
    }
    float v89 = (float)(*((float *)v52 + 27) + v87) + 0.5;
    float v90 = fmodf(v89, 4295000000.0);
    if (v89 <= 4295000000.0) {
      float v90 = v89;
    }
    if (v90 < -4295000000.0) {
      float v90 = -fmodf(-v90, 4295000000.0);
    }
    if (v90 < 0.0) {
      unsigned int v91 = -(float)-v90;
    }
    else {
      unsigned int v91 = v90;
    }
    v84[6] = v91;
    if (*((unsigned __int16 *)v52 + 4) >= 0x23Fu) {
      goto LABEL_191;
    }
    uint64_t v92 = BlueFin::GlSvId::s_aucSvId2gnss[v82];
    double v93 = BlueFin::GlSignalId::s_adSignalType2ctrFreqHz[BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[8 * v85 - v85 + v92]];
    if (v92 == 2) {
      double v93 = v93 + -4500000.0;
    }
    a3[8 * v78 + 7] = (int)((*(double *)(a1 + 600) + *((float *)v52 + 24)) * v93 * 5.0);
    a3[4] = v78 + 1;
    uint64_t v47 = v83;
    int v38 = v143;
    uint64_t v34 = (unsigned __int8 *)(a1 + 9768);
    if ((v78 + 1) > 0xB) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }
LABEL_116:
  unsigned int v39 = v154;
  unsigned int v46 = (v155 - v151 + v149) % 0x240C8400;
LABEL_187:
  a3[1] = v46 % 0xDBBA00;
  a3[2] = v46;
  *a3 = v39;
  *(_DWORD *)(a1 + 608) = v46 % 0xDBBA00 - 1000 * *(char *)(*(void *)(*(void *)(a1 + 24) + 8) + 2588) + 10800000;
}

int *BlueFin::GlPeMeasStatus::CalcRangeField(int *this, double a2, unsigned int *a3, unsigned int *a4)
{
  double v4 = a2 * 1023.0;
  BOOL v5 = v4 < 0.0;
  if (v4 == (double)(int)v4) {
    BOOL v5 = 0;
  }
  int v6 = (int)v4 - v5;
  double v7 = (v4 - (double)v6) * 1024.0;
  if (v7 <= 0.0)
  {
    if (v7 >= 0.0)
    {
      int v9 = 0;
      goto LABEL_9;
    }
    double v8 = -0.5;
  }
  else
  {
    double v8 = 0.5;
  }
  int v9 = (int)(v7 + v8);
LABEL_9:
  if (v9 > 1023)
  {
    ++v6;
    v9 -= 1024;
  }
  if (v6 > 1022) {
    v6 -= 1023;
  }
  *this = v6;
  *a3 = v9;
  return this;
}

uint64_t BlueFin::GlPeMeasStatus::CalcRmsField(BlueFin::GlPeMeasStatus *this, float a2)
{
  if (a2 >= 0.5)
  {
    if (a2 >= 112.0)
    {
      char v3 = 56;
      LOBYTE(v2) = 7;
    }
    else
    {
      char v4 = 0;
      do
      {
        char v5 = v4;
        int v6 = 1 << v4++;
      }
      while ((float)v6 < a2);
      float v7 = a2 * 16.0;
      float v8 = fmodf(a2 * 16.0, 4295000000.0);
      if (v7 <= 4295000000.0) {
        float v8 = v7;
      }
      if (v8 < -4295000000.0) {
        float v8 = -fmodf(-v8, 4295000000.0);
      }
      if (v8 < 0.0) {
        signed int v9 = -(float)-v8;
      }
      else {
        signed int v9 = v8;
      }
      int v2 = ((v9 / v6) + 1) & 7;
      char v10 = v4 & 7;
      if (v2) {
        char v10 = v5;
      }
      char v3 = 8 * v10;
    }
  }
  else
  {
    LOBYTE(v2) = 0;
    char v3 = 0;
  }
  return (char)(v3 | v2);
}

uint64_t BlueFin::GlPeMeasStatus::GetCodePhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float InterSystemHwBiasM = BlueFin::GlPeGnssHwBiasMgr::GetInterSystemHwBiasM(*(void *)(*(void *)(a1 + 24) + 120), (unsigned __int8 *)a2, 0, 0);
  double v7 = *(double *)(a1 + 592);
  double v8 = *(double *)(a2 + 64);
  double v9 = InterSystemHwBiasM / 299792.458;
  double v10 = v9 + v7 + *(double *)(a2 + 56) * 1000.0;
  BOOL v11 = v10 < 0.0;
  if (v10 == (double)(int)v10) {
    BOOL v11 = 0;
  }
  double v12 = (double)((int)v10 - v11) - v10 + 1.0;
  double v13 = v9 + v7 + v8;
  BOOL v14 = v13 < 0.0;
  if (v13 == (double)(int)v13) {
    BOOL v14 = 0;
  }
  if (v8 != 0.0
    && (((unint64_t)*(unsigned int *)(*(void *)(a3 + 1448) + 4 * (*(__int16 *)(a2 + 8) >> 5)) >> (*(_WORD *)(a2 + 8) & 0x1F)) & 1) == 0
    && fabs((double)((int)v13 - v14) - v13 + 1.0 - v12) <= 0.01)
  {
    double v12 = (double)((int)v13 - v14) - v13 + 1.0;
  }
  double v15 = v12 * 2097152.0;
  double v16 = fmod(v12 * 2097152.0, 4294967300.0);
  if (v15 <= 4294967300.0) {
    double v16 = v15;
  }
  if (v16 < -4294967300.0) {
    double v16 = -fmod(-v16, 4294967300.0);
  }
  if (v16 < 0.0) {
    return --v16;
  }
  else {
    return v16;
  }
}

uint64_t BlueFin::GlPeMsaMeasData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((v4 & 0xFFFFFFFB) != 0)
  {
    DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1717, "SerializeImpl", (char)"ucVersion == 4");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas.cpp", 1717, "ucVersion == 4");
  }
  uint64_t v5 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v18 = v3;
    int v21 = 16;
    char v22 = 4;
    uint64_t v23 = 0x1000000000000;
    double v20 = &unk_270EBA2F0;
    char v24 = 4;
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v2 + 12));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v5 + 8));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v5 + 2524));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v5 + 20));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v20, *(_WORD *)(v5 + 24));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v5 + 28));
    if (*(_DWORD *)(v5 + 28))
    {
      int v6 = 0;
      do
      {
        uint64_t v7 = v5 + 32 * v6;
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v20, *(_WORD *)(v7 + 32));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v7 + 36));
        BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v7 + 40));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v7 + 44));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v7 + 48));
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v7 + 52));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v7 + 56));
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v7 + 60));
        ++v6;
      }
      while (*(_DWORD *)(v5 + 28) > v6);
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(_DWORD *)(v5 + 416));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v5 + 420));
    if (*(unsigned char *)(v5 + 420))
    {
      unint64_t v8 = 0;
      unint64_t v19 = (int *)(v5 + 456);
      do
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v5 + 300 * v8 + 424));
        unint64_t v9 = v5 + 300 * v8;
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v9 + 428));
        double v10 = (unsigned __int8 *)(v9 + 428);
        if (*(unsigned char *)(v9 + 428))
        {
          unint64_t v11 = 0;
          double v12 = v19;
          do
          {
            uint64_t v13 = v5 + 300 * v8 + 292 * v11;
            BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *(unsigned char *)(v13 + 434));
            BOOL v14 = (unsigned __int8 *)(v13 + 434);
            if (*(unsigned char *)(v13 + 434))
            {
              unint64_t v15 = 0;
              double v16 = v12;
              do
              {
                BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v20, *((_WORD *)v16 - 10));
                BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(v16 - 4));
                BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v20, *v16);
                BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(v16 - 2));
                BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v20, *((unsigned char *)v16 - 12));
                BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v20, *(v16 - 1));
                ++v15;
                v16 += 6;
              }
              while (v15 < *v14);
            }
            ++v11;
            v12 += 73;
          }
          while (v11 < *v10);
        }
        ++v8;
        v19 += 75;
      }
      while (v8 < *(unsigned __int8 *)(v5 + 420));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v20, v18, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeMsaMeasData::Deserialize(BlueFin::GlPeMsaMeasData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 16 || *((unsigned __int8 *)a2 + 12) - 5 < 0xFFFFFFFE) {
    return 0;
  }
  *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetS32(a2);
  if (*((unsigned char *)a2 + 12) == 1)
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  }
  else
  {
    *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU8(a2);
    *((_DWORD *)this + 631) = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_WORD *)this + 12) = BlueFin::GlSysLogEntry::GetU16(a2);
  int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 7) = U8;
  if (U8)
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = (_DWORD *)((char *)this + 32 * v6);
      v7[8] = BlueFin::GlSysLogEntry::GetU16(a2);
      v7[9] = BlueFin::GlSysLogEntry::GetU32(a2);
      v7[10] = BlueFin::GlSysLogEntry::GetS32(a2);
      v7[11] = BlueFin::GlSysLogEntry::GetU32(a2);
      _DWORD v7[12] = BlueFin::GlSysLogEntry::GetU32(a2);
      v7[13] = BlueFin::GlSysLogEntry::GetU8(a2);
      v7[14] = BlueFin::GlSysLogEntry::GetU32(a2);
      v7[15] = BlueFin::GlSysLogEntry::GetU32(a2);
      ++v6;
    }
    while (*((_DWORD *)this + 7) > v6);
  }
  int v8 = *((unsigned __int8 *)a2 + 12);
  if (v8 == 3)
  {
    *((_DWORD *)this + 104) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 106) = BlueFin::GlSysLogEntry::GetU8(a2);
    int v9 = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 434) = v9;
    if (v9)
    {
      unint64_t v10 = 0;
      unint64_t v11 = (_DWORD *)((char *)this + 456);
      do
      {
        *(v11 - 5) = BlueFin::GlSysLogEntry::GetU16(a2);
        *(v11 - 4) = BlueFin::GlSysLogEntry::GetU32(a2);
        *unint64_t v11 = BlueFin::GlSysLogEntry::GetS32(a2);
        *(v11 - 2) = BlueFin::GlSysLogEntry::GetU32(a2);
        *(v11 - 3) = BlueFin::GlSysLogEntry::GetU8(a2);
        *(v11 - 1) = BlueFin::GlSysLogEntry::GetU32(a2);
        ++v10;
        v11 += 6;
      }
      while (v10 < *((unsigned __int8 *)this + 434));
    }
    int v8 = *((unsigned __int8 *)a2 + 12);
  }
  if (v8 == 4)
  {
    *((_DWORD *)this + 104) = BlueFin::GlSysLogEntry::GetU32(a2);
    int v12 = BlueFin::GlSysLogEntry::GetU8(a2);
    *((unsigned char *)this + 420) = v12;
    if (v12)
    {
      unint64_t v13 = 0;
      char v24 = (char *)this + 456;
      do
      {
        BOOL v14 = (char *)this + 300 * v13;
        *((_DWORD *)v14 + 106) = BlueFin::GlSysLogEntry::GetU8(a2);
        int v15 = BlueFin::GlSysLogEntry::GetU8(a2);
        v14[428] = v15;
        if (v15)
        {
          unint64_t v16 = 0;
          uint64_t v17 = (unsigned __int8 *)(v14 + 428);
          uint64_t v18 = v24;
          do
          {
            int v19 = BlueFin::GlSysLogEntry::GetU8(a2);
            double v20 = (char *)this + 300 * v13 + 292 * v16;
            v20[434] = v19;
            if (v19)
            {
              unint64_t v21 = 0;
              char v22 = (unsigned __int8 *)(v20 + 434);
              uint64_t v23 = v18;
              do
              {
                *(v23 - 5) = BlueFin::GlSysLogEntry::GetU16(a2);
                *(v23 - 4) = BlueFin::GlSysLogEntry::GetU32(a2);
                *uint64_t v23 = BlueFin::GlSysLogEntry::GetS32(a2);
                *(v23 - 2) = BlueFin::GlSysLogEntry::GetU32(a2);
                *(v23 - 3) = BlueFin::GlSysLogEntry::GetU8(a2);
                *(v23 - 1) = BlueFin::GlSysLogEntry::GetU32(a2);
                ++v21;
                v23 += 6;
              }
              while (v21 < *v22);
            }
            ++v16;
            v18 += 73;
          }
          while (v16 < *v17);
        }
        ++v13;
        v24 += 300;
      }
      while (v13 < *((unsigned __int8 *)this + 420));
    }
  }
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glpe_reqhdlr_meas.cpp", 1848, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas.cpp", 1848, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlPeRqHdlrMeas::SetFixStatus(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(result + 72) + 56) = *(unsigned char *)(a2 + 4048) != 0;
  return result;
}

uint64_t BlueFin::GlPeRqHdlrMeas::GlPeRqHdlrMeas(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9 = BlueFin::GlPeRqHdlr::GlPeRqHdlr(a1, a2, a3, a4, a5);
  *(void *)uint64_t v9 = &unk_270EC5838;
  *(_WORD *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = a6;
  *(unsigned char *)(a6 + 48) = (*(uint64_t (**)(void))(**(void **)(v9 + 8) + 208))(*(void *)(v9 + 8));
  BlueFin::GlPeMeasStatus::Start(*(BlueFin::GlPeMeasStatus **)(a1 + 72), a3);
  BlueFin::GlArray::Clear(*(void *)(a1 + 72) + 616);
  return a1;
}

void sub_263B4C114(_Unwind_Exception *a1)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(v1);
  _Unwind_Resume(a1);
}

void BlueFin::GlPeMsaMeasData::~GlPeMsaMeasData(BlueFin::GlPeMsaMeasData *this)
{
}

void BlueFin::GlPeRqHdlrMeas::~GlPeRqHdlrMeas(BlueFin::GlPeRqHdlrMeas *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrMeasData::SetDataSubFrmMeas(BlueFin::GlPeRqHdlrMeasData *this, BlueFin::GlDataSubFrmMeas *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = *((void *)this + 1);
  *((void *)this + 978) = 0;
  *((void *)this + 980) = 0;
  *((void *)this + 979) = 0;
  memset(v11, 0, sizeof(v11));
  uint64_t v12 = 0;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if ((v4 - 1) <= 0x1F)
  {
    char v5 = 0;
    uint64_t v6 = 0;
    *((unsigned char *)this + 7828) = v4;
    *((unsigned char *)this + 7829) = 1;
    *((_DWORD *)this + 1956) = 24;
    *((_WORD *)this + 3916) = *((unsigned __int8 *)a2 + 9);
    *((_DWORD *)this + 1959) = 40;
    __n128 v7 = (__n128)xmmword_263BB2870;
    int64x2_t v8 = vdupq_n_s64(2uLL);
    do
    {
      uint64_t v9 = (_DWORD *)((char *)a2 + (v6 & 0xFFFFFFFC) + 20);
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x28uLL), (uint64x2_t)v7)).u8[0]) {
        *((unsigned char *)v11 + v6) = *v9 >> (v5 & 0x10 ^ 0x18);
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x28uLL), *(uint64x2_t *)&v7)).i32[1]) {
        *((unsigned char *)v11 + v6 + 1) = *v9 >> (~v5 & 0x10);
      }
      v6 += 2;
      __n128 v7 = (__n128)vaddq_s64((int64x2_t)v7, v8);
      v5 += 16;
    }
    while (v6 != 40);
    *((void *)this + 980) = v11;
    unint64_t v10 = *(uint64_t (**)(__n128))(result + 88);
    if (v10) {
      return v10(v7);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrMeasData::SetGlonassDataString(BlueFin::GlPeRqHdlrMeasData *this, BlueFin::GlGlonassDataString *a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  _OWORD v11[2] = *MEMORY[0x263EF8340];
  char v5 = (char *)this + 7828;
  uint64_t result = *((void *)this + 1);
  *((void *)this + 980) = 0;
  *((void *)this + 979) = 0;
  *((void *)this + 978) = 0;
  memset(v11, 0, 11);
  *char v5 = *((unsigned char *)a2 + 8);
  v5[1] = 5;
  *((_DWORD *)this + 1956) = 24;
  *((_WORD *)this + 3916) = (*((_DWORD *)a2 + 5) >> 27) & 0xF;
  *((_DWORD *)this + 1959) = 11;
  __n128 v7 = (__n128)xmmword_263BB2870;
  int64x2_t v8 = vdupq_n_s64(2uLL);
  do
  {
    uint64_t v9 = (_DWORD *)((char *)a2 + (v4 & 0xFFFFFFFC) + 20);
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xBuLL), (uint64x2_t)v7)).u8[0]) {
      *((unsigned char *)v11 + v4) = *v9 >> (v3 & 0x10 ^ 0x18);
    }
    if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0xBuLL), *(uint64x2_t *)&v7)).i32[1]) {
      *((unsigned char *)v11 + v4 + 1) = *v9 >> (~v3 & 0x10);
    }
    v4 += 2;
    __n128 v7 = (__n128)vaddq_s64((int64x2_t)v7, v8);
    v3 += 16;
  }
  while (v4 != 12);
  *((void *)this + 980) = v11;
  unint64_t v10 = *(uint64_t (**)(__n128))(result + 88);
  if (v10) {
    return v10(v7);
  }
  return result;
}

double BlueFin::GlPeRqHdlrMeasData::SetSIGMeasuement(BlueFin::GlPeRqHdlrMeasData *this, BlueFin::GlPeMsmtMgr *a2)
{
  bzero((char *)this + 64, 0x1E50uLL);
  unsigned __int8 v38 = *((unsigned char *)a2 + 16);
  memcpy(v42, *((const void **)a2 + 1), 4 * v38);
  unsigned __int16 v40 = 0;
  unsigned __int8 v39 = 0;
  int v41 = v42[0];
  BlueFin::GlSetIterator::operator++(&v38);
  if (v39 != v38)
  {
    int64x2_t v4 = vdupq_n_s64(0x41B1DE784A000000uLL);
    float64x2_t v33 = (float64x2_t)v4;
    float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL);
    do
    {
      if (*((_DWORD *)this + 17) > 0x1Fu) {
        break;
      }
      if (v40 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      char v5 = (unsigned __int8 *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v40;
      uint64_t v6 = *v5;
      LODWORD(v5) = (char)v5[1];
      v35[0] = v6;
      int v36 = (int)v5;
      unsigned __int16 v37 = v40;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(a2, (const BlueFin::GlSignalId *)v35, 0, 0);
      unsigned int v8 = *MeMeas;
      if (v8 < 0x34)
      {
        if (v8 - 1 <= 0x1F)
        {
LABEL_9:
          unsigned int v9 = *((_DWORD *)this + 17);
          unint64_t v10 = (char *)this + 240 * v9;
          *((_DWORD *)v10 + 18) = 240;
          v10[80] = v8;
          *((void *)v10 + 11) = 0;
          unsigned int v11 = *((_DWORD *)MeMeas + 3);
          *((_WORD *)v10 + 48) = (8 * v11) & 0x20 | (v11 >> 2) & 0xE | (v11 >> 1) & 1;
          v12.f64[0] = *((float64_t *)MeMeas + 7);
          v12.f64[1] = *((float *)MeMeas + 22);
          *(int64x2_t *)(v10 + 104) = vcvtq_s64_f64(vmulq_f64(v12, v34));
          uint64_t v13 = 56;
          if (!*((_DWORD *)MeMeas + 1)) {
            uint64_t v13 = 52;
          }
          float v14 = *(float *)(*(void *)(*((void *)this + 7) + 56) + v13);
          if (v14 < 0.0) {
            float v14 = 0.0;
          }
          *((double *)v10 + 15) = (float)(*((float *)MeMeas + 27) + v14);
          v15.f32[0] = -*((float *)MeMeas + 24);
          v15.i32[1] = *((_DWORD *)MeMeas + 25);
          *((float64x2_t *)v10 + 8) = vmulq_f64(vcvtq_f64_f32(v15), v33);
          if ((v11 & 2) == 0)
          {
            unint64_t v16 = (char *)this + 240 * v9;
            *((void *)v16 + 17) = 0x41B1DE784A000000;
            *((void *)v16 + 14) = 1000000000;
          }
          *((_DWORD *)v10 + 19) = 0x40000;
          uint64_t v17 = (char *)this + 240 * v9;
          int v18 = (v11 >> 4) & 4 | (v11 >> 12) & 1;
          *((_WORD *)v17 + 72) = (v11 >> 4) & 4 | (v11 >> 12) & 1;
          int v19 = v17 + 144;
          if ((v11 & 0x100) != 0)
          {
            unsigned int v20 = *((_DWORD *)MeMeas + 10);
            uint64_t v21 = v6 - 1;
            if (v20 < *((_DWORD *)this + v6 + 1961)) {
              *int v19 = v18 | 2;
            }
          }
          else
          {
            *int v19 = v18 | 2;
            unsigned int v20 = *((_DWORD *)MeMeas + 10);
            uint64_t v21 = v6 - 1;
          }
          *((_DWORD *)this + v21 + 1962) = v20;
          double v22 = *((double *)MeMeas + 10);
          double v23 = -v22;
          char v24 = (double *)((char *)this + 8 * v21);
          double v25 = v24[1075];
          double v26 = v24[1263];
          if (v22 > 131072.0 && v25 > 131072.0) {
            double v26 = v26 + 524288.0;
          }
          BOOL v28 = v22 < -131072.0 && v25 < -131072.0;
          double v29 = v26 + -524288.0;
          if (!v28) {
            double v29 = v26;
          }
          double v30 = v23 - v25 + v29;
          v24[1075] = v23;
          v24[1263] = v30;
          double v31 = (char *)this + 240 * v9;
          *((double *)v31 + 19) = v30;
          *((double *)v31 + 20) = *((float *)MeMeas + 23);
          *(_DWORD *)(v31 + 234) = 0;
          *(_OWORD *)(v31 + 168) = 0u;
          *(_OWORD *)(v31 + 184) = 0u;
          *((_DWORD *)v31 + 50) = 0;
          *((void *)v31 + 27) = 0;
          *((void *)v31 + 28) = 0;
          *((void *)v31 + 26) = 0;
          v31[232] = 0;
          *((void *)v31 + 30) = 0;
          *((void *)v31 + 31) = 0;
          v31[256] = *((_DWORD *)MeMeas + 5) == 4;
          *(_OWORD *)(v31 + 289) = 0u;
          *(_OWORD *)(v31 + 264) = 0u;
          *(_OWORD *)(v31 + 280) = 0u;
          *((_DWORD *)this + 17) = v9 + 1;
        }
      }
      else if (v8 < 0x42)
      {
        goto LABEL_9;
      }
      BlueFin::GlSetIterator::operator++(&v38);
    }
    while (v39 != v38);
  }
  *((void *)this + 969) = 72;
  *((unsigned char *)this + 7760) = 1;
  v4.i32[0] = *(_DWORD *)a2;
  *((void *)this + 971) = (uint64_t)((double)v4.u64[0] * 1000000.0);
  double result = 0.0;
  *((_OWORD *)this + 488) = 0u;
  *((_OWORD *)this + 487) = 0u;
  *((_OWORD *)this + 486) = 0u;
  return result;
}

void BlueFin::GlPeRqHdlrMeasData::SetFixStatus(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 68);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    while (1)
    {
      int v7 = *(char *)(a1 + 240 * v6 + 80);
      if (v7 < 0)
      {
        BOOL v28 = "m_oMeasData.aotMeasurements[iLoop].scPrn >= 0";
        DeviceFaultNotify("glpe_reqhdlr_meas_data.cpp", 285, "SetFixStatus", (char)"m_oMeasData.aotMeasurements[iLoop].scPrn >= 0");
        int v29 = 285;
        goto LABEL_31;
      }
      unsigned int v8 = *(unsigned __int8 *)(a1 + 240 * v6 + 80);
      if (v8 > 0x20) {
        break;
      }
      uint64_t v15 = a1 + 240 * v6;
      int v16 = *(_DWORD *)(v15 + 76);
      unsigned int v11 = (int *)(v15 + 76);
      int v13 = v16 | 0x20000;
      *unsigned int v11 = v16 | 0x20000;
      if (v8)
      {
        uint64_t v14 = 0;
        char v9 = v8;
LABEL_15:
        if ((*(void *)&a2[2 * v14 + 1070] >> (v9 - 1))) {
          *(unsigned char *)(a1 + 240 * v6 + 304) = 1;
        }
      }
      if (*((__int16 *)a2 + 22) >= 1)
      {
        uint64_t v17 = *((unsigned __int16 *)a2 + 22);
        int v18 = (__int16 *)a2 + 27;
        while (*((unsigned __int8 *)v18 - 5) != v8)
        {
          v18 += 20;
          if (!--v17) {
            goto LABEL_23;
          }
        }
        uint64_t v19 = a1 + 240 * v6;
        *(double *)(v19 + 288) = (double)*v18;
        *(void *)(v19 + 296) = 0x3FF0000000000000;
        *(double *)(v19 + 272) = (double)*(v18 - 1);
        *(void *)(v19 + 280) = 0x3FF0000000000000;
        *unsigned int v11 = v13 | 0x1E;
      }
LABEL_23:
      if (++v6 == v5) {
        goto LABEL_24;
      }
    }
    char v9 = v7 - 51;
    uint64_t v10 = a1 + 240 * v6;
    int v12 = *(_DWORD *)(v10 + 76);
    unsigned int v11 = (int *)(v10 + 76);
    int v13 = v12 | 0x20000;
    *unsigned int v11 = v12 | 0x20000;
    if (v8 < 0x42) {
      uint64_t v14 = 2;
    }
    else {
      uint64_t v14 = 3;
    }
    if (v8 > 0x4B) {
      uint64_t v14 = 4;
    }
    if (v8 < 0x34) {
      uint64_t v14 = 1;
    }
    goto LABEL_15;
  }
LABEL_24:
  unsigned int v20 = *(unsigned int **)(*(void *)(a1 + 56) + 8);
  if (v20[644])
  {
    double v31 = &off_270EBC600;
    uint64_t v32 = 0;
    BlueFin::GlPeTimeManager::GetTime(v20, *a2, 1, (uint64_t)v30);
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v30, (BlueFin::GlGpsTime *)&v31);
    double v22 = v21;
    unint64_t v23 = ((unsigned int (*)(void))v31[4])(&v31) / 0x93A80uLL;
    __n128 v24 = ((__n128 (*)(void))v31[4])(&v31);
    v24.n128_u32[0] = v32;
    *(void *)(a1 + 7792) = 0;
    *(double *)(a1 + 7800) = v22 * 1000.0;
    int64_t v26 = -604800000000000 * v23
        - 1000000000 * (v25 % 0x93A80)
        - (unint64_t)((double)v24.n128_u64[0] * 2.32830644e-10 * 1000000000.0)
        + 1000000 * *a2;
    *(void *)(a1 + 7784) = v26;
    if (v26 >= 1)
    {
      BOOL v28 = "m_oMeasData.otClock.sllFullBiasNs <= 0";
      DeviceFaultNotify("glpe_reqhdlr_meas_data.cpp", 342, "SetFixStatus", (char)"m_oMeasData.otClock.sllFullBiasNs <= 0");
      int v29 = 342;
LABEL_31:
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_meas_data.cpp", v29, v28);
    }
    *(_WORD *)(a1 + 7756) = 28;
  }
  double v27 = *(void (**)(uint64_t, uint64_t))(v4 + 80);
  if (v27) {
    v27(v4, a1 + 64);
  }
}

void BlueFin::GlPeRqHdlrMeasData::~GlPeRqHdlrMeasData(BlueFin::GlPeRqHdlrMeasData *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

void BlueFin::GlPeRqHdlrMeasPeriodic::SetSIGMeasuement(BlueFin::GlPeRqHdlrMeasPeriodic *this, BlueFin::GlPeMsmtMgr *a2)
{
  if (*((unsigned char *)this + 20))
  {
    BOOL v4 = 0;
    goto LABEL_13;
  }
  if (!*((unsigned char *)this + 80))
  {
    BOOL v4 = 0;
LABEL_11:
    unsigned int v12 = *((_DWORD *)this + 8) - *((_DWORD *)this + 21) + 300;
    if (v12 > (*(unsigned int (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1))) {
      BOOL v4 = 1;
    }
    goto LABEL_13;
  }
  int v5 = *((_DWORD *)this + 9);
  uint64_t v6 = (_DWORD *)*((void *)this + 1);
  unsigned int v7 = 1001;
  if (v5 != -1)
  {
    unsigned int v8 = v6[7];
    unsigned int v9 = *((_DWORD *)this + 8) + v5;
    BOOL v10 = v9 >= v8;
    int v11 = v9 - v8 + 1000;
    if (v10) {
      unsigned int v7 = v11;
    }
    else {
      unsigned int v7 = 1001;
    }
  }
  BOOL v4 = v7 > (*(unsigned int (**)(_DWORD *))(*(void *)v6 + 184))(v6);
  if (!*((unsigned char *)this + 80)) {
    goto LABEL_11;
  }
LABEL_13:
  *((unsigned char *)this + 65) = v4;
  if (*((unsigned char *)this + 80)) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = !v4;
  }
  if (!v13)
  {
    BlueFin::GlPeRqHdlrMeas::SetSIGMeasuement(this, a2);
    if (*((unsigned char *)this + 64) || *((unsigned char *)this + 65))
    {
      *((_DWORD *)this + 21) = *((_DWORD *)this + 8);
      *((unsigned char *)this + 80) = 0;
    }
  }
}

uint64_t BlueFin::GlPeRqHdlrMeasPeriodic::Cleanup(BlueFin::GlPeRqHdlrMeasPeriodic *this)
{
  if (*((unsigned char *)this + 20) || *((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 19) = 1;
    (*(void (**)(BlueFin::GlPeRqHdlrMeasPeriodic *, void, void))(*(void *)this + 272))(this, 0, 0);
    char v3 = &unk_270EC4DB8;
    __int16 v4 = *((_WORD *)this + 24);
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      off_270EC4DD0((uint64_t)&v3, 0);
    }
  }
  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

void BlueFin::GlPeRqHdlrMeasPeriodic::~GlPeRqHdlrMeasPeriodic(BlueFin::GlPeRqHdlrMeasPeriodic *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrMeasSingleShot::Cleanup(BlueFin::GlPeRqHdlrMeasSingleShot *this)
{
  if (*((unsigned char *)this + 64) || *((unsigned char *)this + 23) || *((unsigned char *)this + 20))
  {
    *((unsigned char *)this + 19) = 1;
    char v3 = &unk_270EC4DB8;
    __int16 v4 = *((_WORD *)this + 24);
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      off_270EC4DD0((uint64_t)&v3, 0);
    }
  }
  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

void BlueFin::GlPeRqHdlrMeasSingleShot::~GlPeRqHdlrMeasSingleShot(BlueFin::GlPeRqHdlrMeasSingleShot *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrPlatformTest::Cleanup(BlueFin::GlPeRqHdlrPlatformTest *this)
{
  if (*((unsigned char *)this + 20) || *((unsigned char *)this + 19) || *((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 19) = 1;
    (*(void (**)(BlueFin::GlPeRqHdlrPlatformTest *, void, void))(*(void *)this + 272))(this, 0, 0);
  }

  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

uint64_t BlueFin::GlPeRqHdlrPlatformTest::SetFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (v3)
  {
    uint64_t v4 = result;
    if (!*(unsigned char *)(result + 20))
    {
      uint64_t v5 = v3;
      bzero(v7, 0x1CF0uLL);
      memset(&v7[926], 248, 24);
      memset(v8, 0, sizeof(v8));
      if (v7 != (void *)v5)
      {
        memcpy(v7, (const void *)v5, sizeof(v7));
        memcpy(v8, (const void *)(v5 + 7432), sizeof(v8));
      }
      uint64_t result = *(void *)(v4 + 8);
      uint64_t v6 = *(uint64_t (**)(void))(result + 48);
      if (v6) {
        return v6();
      }
    }
  }
  return result;
}

void BlueFin::GlPeRqHdlrPlatformTest::~GlPeRqHdlrPlatformTest(BlueFin::GlPeRqHdlrPlatformTest *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::GetInternalWarmStandbyPeriodOfReq(BlueFin::GlPeRqHdlrPosPeriodic *this)
{
  if (*(_DWORD *)(*(void *)(*((void *)this + 7) + 56) + 88) == 39
    || (*(unsigned int (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1)) < 0x7531
    || !*((unsigned char *)this + 168)
    || (*((_DWORD *)this + 8) - (*((_DWORD *)this + 7) + *((_DWORD *)this + 26))) > 0x7D0)
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 1) + 184);

  return v2();
}

void BlueFin::GlPeRqHdlrPosPeriodic::~GlPeRqHdlrPosPeriodic(BlueFin::GlPeRqHdlrPosPeriodic *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::SetPosValidFlag(uint64_t this, char a2)
{
  *(unsigned char *)(this + 168) = a2;
  return this;
}

uint64_t BlueFin::GlPeRqHdlrPosPeriodic::GetHdlrStats(BlueFin::GlPeRqHdlrPosPeriodic *this)
{
  return *((void *)this + 22);
}

unsigned char *BlueFin::GlPeRqHdlrPosSigleShot::GlPeRqHdlrPosSigleShot(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v7 = BlueFin::GlPeRqHdlr::GlPeRqHdlr((uint64_t)v2, v3, v4, v5, v6);
  *(void *)uint64_t v7 = &unk_270EC6180;
  *(unsigned char *)(v7 + 64) = 0;
  *(void *)(v7 + 68) = 0x19000000000;
  *(_WORD *)(v7 + 76) = 0;
  if (!*(_WORD *)(*(void *)(v7 + 8) + 22))
  {
    BlueFin::GlPeRqHdlr::ToSlog((uint64_t)v2);
    v2[23] = 1;
    bzero(v10, 0x1CF0uLL);
    memset(&v10[7408], 248, 24);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    double inited = BlueFin::GlPeFixStatus::InitFixStatus((uint64_t)v10);
    (*(void (**)(unsigned char *, unsigned char *, double))(*(void *)v2 + 24))(v2, v10, inited);
    v2[20] = 1;
  }
  return v2;
}

void sub_263B4D2F0(_Unwind_Exception *a1)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(v1);
  _Unwind_Resume(a1);
}

BOOL BlueFin::GlPeRqHdlrPosSigleShot::SetNmeaSentence(uint64_t a1, int a2, uint64_t a3, char *a4, __int16 a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)(a1 + 20);
  if (!*(unsigned char *)(a1 + 20))
  {
    if (*(_DWORD *)a3) {
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a3 + 4048) != 0;
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 416))(*(void *)(a1 + 8))
      && !*(unsigned char *)(a1 + 23))
    {
      *(unsigned char *)(a1 + 64) = 0;
    }
    if (!*(unsigned char *)(a1 + 16))
    {
      *(unsigned char *)(a1 + 16) = 1;
      BlueFin::GlPeNmeaGen::FormatNmeaRID(**(BlueFin::GlPeNmeaGen ***)(a1 + 56), (BlueFin::GlFormat *)__s, 80, v10);
      GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(a1 + 48), __s);
      __int16 v11 = strlen(__s);
      BlueFin::GlPeRqHdlr::OnNmea((BlueFin::GlPeRqHdlr *)a1, __s, v11, v12);
    }
    if (a2 == 8 && *(unsigned char *)(a1 + 64))
    {
      int v13 = *(_DWORD *)(a1 + 36);
      if (v13 == -1)
      {
        int v15 = *(_DWORD *)(a1 + 32);
        int v19 = 1;
      }
      else
      {
        unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
        int v15 = *(_DWORD *)(a1 + 32);
        unsigned int v16 = v15 + v13;
        BOOL v17 = v16 >= v14;
        int v18 = v16 - v14;
        if (v17) {
          int v19 = v18;
        }
        else {
          int v19 = 1;
        }
      }
      BlueFin::GlPeNmeaGen::FormatNmeaFIX(**(BlueFin::GlPeNmeaGen ***)(a1 + 56), v19, v15 - *(_DWORD *)(a1 + 28), (BlueFin::GlFormat *)__s, 80);
      GlCustomLog(20, "GL_NMEA[%d][%s", *(unsigned __int16 *)(a1 + 48), __s);
      __int16 v20 = strlen(__s);
      BlueFin::GlPeRqHdlr::OnNmea((BlueFin::GlPeRqHdlr *)a1, __s, v20, v21);
    }
    BlueFin::GlPeRqHdlr::OnNmea((BlueFin::GlPeRqHdlr *)a1, a4, a5, v10);
  }
  return v5 == 0;
}

uint64_t BlueFin::GlPeRqHdlrPosSigleShot::SetFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  uint64_t v76 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(result + 20))
  {
    int v4 = v3;
    uint64_t v5 = result;
    bzero(v49, 0x1CF0uLL);
    memset(&v50[3360], 248, 24);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    BlueFin::GlPeRqHdlrPosSigleShot::ApplyLocalUpdates(v5, v49, v4);
    uint64_t v6 = *(void *)(v5 + 56);
    unsigned int v7 = *(_DWORD *)(*(void *)(v6 + 16) + 88796);
    uint64_t v8 = *(void *)(*(void *)(v6 + 24) + 120968);
    BOOL v9 = !BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)v8)
      || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 24))
      || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 48))
      || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 72))
      || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 96))
      || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 120))
      || BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(v8 + 144));
    int v10 = v7 < 0x2EE1 || v9;
    if (v50[0]
      && v10
      && (*(unsigned char *)(v5 + 64) = 1, (v50[2960] & 7) != 4)
      && !(*(unsigned int (**)(void))(**(void **)(v5 + 8) + 416))(*(void *)(v5 + 8)))
    {
      if (*(unsigned char *)(v5 + 64)) {
        GlCustomLog(13, "\tttff=%u:%02u.%01u\n", (*(_DWORD *)v49 + 50) / 0xEA60u, (*(_DWORD *)v49 + 50) / 0x3E8u - 60 * ((71582789 * (unint64_t)((*(_DWORD *)v49 + 50) / 0x3E8u)) >> 32), (*(_DWORD *)v49 + 50) / 0x64u - 10 * ((429496730 * (unint64_t)((*(_DWORD *)v49 + 50) / 0x64u)) >> 32));
      }
    }
    else
    {
      *(unsigned char *)(v5 + 64) = 0;
    }
    __int16 v11 = v50;
    bzero(v22, 0x1CF0uLL);
    memset(&v23[3360], 248, 24);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    if (*(unsigned char *)(v5 + 23) || *(unsigned char *)(v5 + 64))
    {
      GlCustomLog(14, "RequestResponse ");
      (*(void (**)(void, uint64_t))(**(void **)(v5 + 8) + 136))(*(void *)(v5 + 8), 14);
      if (*(unsigned char *)(v5 + 64))
      {
        uint64_t v12 = 1;
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 272))(v5, v12, v13);
      int v14 = v50[0];
      if (v50[0])
      {
        int v15 = *(void (**)(void))(*(void *)(v5 + 8) + 48);
        if (v15)
        {
          v15();
          int v14 = v50[0];
        }
        int v16 = *(_DWORD *)(v5 + 68);
        BOOL v17 = "SS ";
        int v18 = v49;
        uint64_t v19 = v5;
        return BlueFin::GlPeRqHdlr::LogGL007(v19, v17, (uint64_t)v18, v16, v14);
      }
      __int16 v20 = v49;
      if (BlueFin::GlPeRqHdlrPosSigleShot::UpdateFixStatusTimeout(v5, (uint64_t)v49, (uint64_t)v22))
      {
        __int16 v20 = v22;
        __int16 v11 = v23;
      }
      long long v21 = *(void (**)(void))(*(void *)(v5 + 8) + 48);
      if (v21) {
        v21();
      }
    }
    else
    {
      __int16 v20 = v49;
    }
    int v16 = *(_DWORD *)(v5 + 68);
    int v14 = *v11;
    BOOL v17 = "ss ";
    uint64_t v19 = v5;
    int v18 = v20;
    return BlueFin::GlPeRqHdlr::LogGL007(v19, v17, (uint64_t)v18, v16, v14);
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrPosSigleShot::ApplyLocalUpdates(uint64_t a1, char *__dst, char *__src)
{
  if (__dst != __src)
  {
    memcpy(__dst, __src, 0x1CF0uLL);
    uint64_t v6 = *((void *)__src + 928);
    *((_OWORD *)__dst + 463) = *((_OWORD *)__src + 463);
    *((void *)__dst + 928) = v6;
    memcpy(__dst + 7432, __src + 7432, 0x190uLL);
  }
  if (!__src[4048])
  {
    BOOL v8 = 1;
LABEL_8:
    unsigned int v7 = (unsigned char *)(a1 + 76);
    if (!*(unsigned char *)(a1 + 76) && v8) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  if (!*(unsigned char *)(a1 + 77))
  {
    *(unsigned char *)(a1 + 77) = (*((_DWORD *)__src + 1752) & 3) != 0;
    BOOL v8 = __src[4048] == 0;
    goto LABEL_8;
  }
  unsigned int v7 = (unsigned char *)(a1 + 76);
LABEL_10:
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8)))
  {
    (*(void (**)(void, void))(**(void **)(a1 + 8) + 424))(*(void *)(a1 + 8), *((unsigned int *)__src + 1752));
    *((_DWORD *)__dst + 1752) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 432))();
  }
LABEL_12:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8));
  if (result && !*(unsigned char *)(a1 + 77))
  {
    *unsigned int v7 = 0;
    goto LABEL_20;
  }
  int v10 = *v7;
  __dst[4048] = v10;
  if (!v10)
  {
LABEL_20:
    __dst[4048] = 0;
    *(_OWORD *)(__dst + 4280) = 0u;
    *(_OWORD *)(__dst + 4296) = 0u;
    *(_OWORD *)(__dst + 4312) = 0u;
    *(_OWORD *)(__dst + 4328) = 0u;
    *(_OWORD *)(__dst + 4856) = 0u;
    *(_OWORD *)(__dst + 4872) = 0u;
    *(_OWORD *)(__dst + 4888) = 0u;
    *(_OWORD *)(__dst + 4904) = 0u;
    *(_OWORD *)(__dst + 4920) = 0u;
    *(_OWORD *)(__dst + 4936) = 0u;
    *(_OWORD *)(__dst + 4952) = 0u;
    *(_OWORD *)(__dst + 4968) = 0u;
    *(_OWORD *)(__dst + 4984) = 0u;
    *(_OWORD *)(__dst + 5000) = 0u;
    *(_OWORD *)(__dst + 5016) = 0u;
    *(_OWORD *)(__dst + 5032) = 0u;
    *(_OWORD *)(__dst + 5048) = 0u;
    *(_OWORD *)(__dst + 5064) = 0u;
    *(_OWORD *)(__dst + 5080) = 0u;
    *(_OWORD *)(__dst + 5096) = 0u;
    *(_OWORD *)(__dst + 5592) = 0u;
    *(_OWORD *)(__dst + 5608) = 0u;
    *(_OWORD *)(__dst + 5560) = 0u;
    *(_OWORD *)(__dst + 5576) = 0u;
    *(_OWORD *)(__dst + 5528) = 0u;
    *(_OWORD *)(__dst + 5544) = 0u;
    *(_OWORD *)(__dst + 5496) = 0u;
    *(_OWORD *)(__dst + 5512) = 0u;
    *(_OWORD *)(__dst + 5464) = 0u;
    *(_OWORD *)(__dst + 5480) = 0u;
    *(_OWORD *)(__dst + 5432) = 0u;
    *(_OWORD *)(__dst + 5448) = 0u;
    *(_OWORD *)(__dst + 5400) = 0u;
    *(_OWORD *)(__dst + 5416) = 0u;
    *(_OWORD *)(__dst + 5368) = 0u;
    *(_OWORD *)(__dst + 5384) = 0u;
    return result;
  }
  int v11 = *(_DWORD *)(a1 + 36);
  if (v11 == -1)
  {
    double v16 = 1.0;
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
    unsigned int v13 = *(_DWORD *)(a1 + 32) + v11;
    BOOL v14 = v13 >= v12;
    unsigned int v15 = v13 - v12;
    if (!v14) {
      unsigned int v15 = 1;
    }
    double v16 = (double)v15;
  }
  *((double *)__dst + 863) = v16;
  return result;
}

uint64_t BlueFin::GlPeRqHdlrPosSigleShot::UpdateFixStatusTimeout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 23) || *(unsigned char *)(a2 + 4048)) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = *(_DWORD *)(v7 + 2576);
  BOOL v9 = BlueFin::GlPeTimeManager::TimeKnown(v7, 0, 0x200B20u);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 64);
  if (*(_DWORD *)(v10 + 44) == -1)
  {
    BOOL v153 = 0;
    unsigned int AgeS = -1;
  }
  else
  {
    unsigned int AgeS = BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)(v10 + 56), *(BlueFin::GlPeTimeManager **)(v10 + 296));
    BOOL v153 = AgeS != -1;
  }
  unsigned int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 200))(*(void *)(a1 + 8));
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 64);
  int v14 = *(_DWORD *)(v13 + 44);
  if (v14 == -1)
  {
    long long v167 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v168 = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(v13 + 24);
    uint64_t v16 = *(void *)(v13 + 32);
    long long v167 = *(_OWORD *)(v13 + 88);
    uint64_t v168 = *(void *)(v13 + 104);
  }
  long long v165 = 0uLL;
  uint64_t v166 = 0;
  BOOL v17 = BlueFin::ecef2lla((double *)&v167, (uint64_t)&v165);
  BOOL v18 = v17;
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 64);
  int v20 = *(_DWORD *)(v19 + 44);
  BOOL v152 = v9;
  if (v8) {
    BOOL v21 = v9;
  }
  else {
    BOOL v21 = 0;
  }
  int v22 = *(unsigned __int8 *)(v19 + 48);
  int v23 = v21 && v153;
  BOOL v25 = v20 == 1 || v22 != 0;
  if (v23 != 1 || AgeS > v12 || v14 == -1 || !v17 || !v25) {
    goto LABEL_34;
  }
  int v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8));
  int v30 = v39 ^ 1;
  if (((v39 ^ 1) & 1) != 0 || v20 != 1) {
    goto LABEL_35;
  }
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8))) {
LABEL_34:
  }
    int v30 = 0;
  else {
    int v30 = *(unsigned char *)(a1 + 77) != 0;
  }
LABEL_35:
  if (v8) {
    BOOL v31 = v14 == -1;
  }
  else {
    BOOL v31 = 1;
  }
  BOOL v32 = !v31 && v18;
  if (v32 && (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8))) {
    unsigned int v33 = (v22 == 0) & ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 432))(*(void *)(a1 + 8)) >> 2);
  }
  else {
    unsigned int v33 = 0;
  }
  GlCustomLog(14, "AgedFix (Time %d GpsTime %d PosAge %d AgeOK %d (%u <= %u) PosQual %d xyz %d ecef %d PosFromKF %d) = OK %d, ForcedFix = %d\n", v8 != 0, v152, v153, AgeS <= v12, AgeS, v12, v14 != -1, v14 != -1, v18, v20 == 1, v30, v33);
  uint64_t v3 = v30 | v33;
  if (v3 == 1)
  {
    BlueFin::GlPeFixStatus::InitFixStatus(a3);
    long long v34 = *(unsigned int **)(*(void *)(a1 + 56) + 8);
    unsigned int v35 = v34[642];
    double v36 = (double)(int)v35;
    if (v35 <= 0xFF9222FE) {
      double v36 = (double)v35;
    }
    BlueFin::GlPeTimeManager::GetTime(v34, v36, 1, (uint64_t)v164);
    double v37 = (double)AgeS;
    BlueFin::GlPeGnssTime::operator-=(v164, (double)AgeS);
    *(_DWORD *)(a3 + 4060) = 5;
    *(_WORD *)(a3 + 4048) = 257;
    *(_DWORD *)a3 = *(_DWORD *)a2;
    if (((v30 | v33 ^ 1) & 1) != 0 || v20 == 1)
    {
      *(_OWORD *)(a3 + 4072) = v165;
      *(void *)(a3 + 4088) = v166;
      *(void *)(a3 + 4144) = v15;
      *(void *)(a3 + 4152) = v15;
      *(void *)(a3 + 4160) = v16;
      *(void *)(a3 + 6952) = v15;
      *(void *)(a3 + 6960) = v15;
      BOOL v38 = v20 == 1
         && (uint64_t v40 = *(void *)(*(void *)(a1 + 56) + 64), *(_DWORD *)(v40 + 44) != -1)
         && BlueFin::stTimeOfAsstPos::GetAgeS((BlueFin::stTimeOfAsstPos *)(v40 + 56), *(BlueFin::GlPeTimeManager **)(v40 + 296)) == 0;
    }
    else
    {
      *(void *)(a3 + 4072) = *(void *)(a2 + 4072);
      *(_OWORD *)(a3 + 4080) = *(_OWORD *)(a2 + 4080);
      *(_OWORD *)(a3 + 4144) = *(_OWORD *)(a2 + 4144);
      *(void *)(a3 + 4160) = *(void *)(a2 + 4160);
      *(void *)(a3 + 6952) = *(void *)(a2 + 6952);
      *(void *)(a3 + 6960) = *(void *)(a2 + 6960);
      BOOL v38 = 1;
    }
    *(void *)(a3 + 6968) = 0;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8))) {
      *(_DWORD *)(a3 + 7008) = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 432))(*(void *)(a1 + 8));
    }
    unsigned __int8 v162 = &off_270EBC600;
    uint64_t v163 = 0;
    BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)v164, (BlueFin::GlGpsTime *)&v162);
    long double v42 = v41;
    *(_WORD *)(a3 + 24) = ((unsigned int (*)(void))v162[4])(&v162) / 0x93A80;
    unsigned int v43 = ((uint64_t (*)(void))v162[4])(&v162);
    LODWORD(v44) = v163;
    double v45 = ((double)v44 * 2.32830644e-10 + (double)(v43 % 0x93A80)) * 1000.0;
    double v47 = fmod(v45, 4294967300.0);
    if (v45 <= 4294967300.0) {
      double v47 = v45;
    }
    if (v47 < -4294967300.0) {
      double v47 = -fmod(-v47, 4294967300.0);
    }
    if (v47 < 0.0) {
      unsigned int v48 = --v47;
    }
    else {
      unsigned int v48 = v47;
    }
    *(_DWORD *)(a3 + 28) = v48;
    BlueFin::GlPeTimeMgrUtil::BreakDownFracSec((BlueFin::GlPeTimeMgrUtil *)v161, (v45 - (double)v48) * 0.001, (unsigned __int16 *)(a3 + 32), (unsigned __int16 *)(a3 + 34), v46);
    double v49 = fmod(v42, 4294967300.0);
    if (v42 <= 4294967300.0) {
      double v49 = v42;
    }
    if (v49 < -4294967300.0) {
      double v49 = -fmod(-v49, 4294967300.0);
    }
    if (v49 < 0.0) {
      unsigned int v50 = --v49;
    }
    else {
      unsigned int v50 = v49;
    }
    *(_DWORD *)(a3 + 36) = v50;
    unsigned int v155 = &unk_270EC23C8;
    uint64_t v156 = 0;
    BOOL v51 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
    if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
      BOOL v51 = 0;
    }
    BOOL v52 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
    BOOL v53 = v51 && v52;
    if (v51 && v52) {
      int v54 = 431999;
    }
    else {
      int v54 = 432000;
    }
    unsigned int v55 = v54 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
    __int16 v157 = 1980;
    __int16 v158 = v55 / 0x15180 + 1;
    LOBYTE(v159) = 1;
    BYTE1(v159) = v55 / 0x15180 + 1;
    LOBYTE(v54) = 60;
    if (v53)
    {
      LOBYTE(v56) = 59;
      LOBYTE(v57) = 23;
    }
    else
    {
      unsigned int v57 = v55 % 0x15180 / 0xE10;
      unsigned int v56 = (2185 * (v55 - 3600 * ((1193047 * (unint64_t)v55) >> 32))) >> 17;
      int v54 = v55 - 60 * ((71582789 * (unint64_t)v55) >> 32);
    }
    BYTE2(v159) = v57;
    HIBYTE(v159) = v56;
    char v160 = v54;
    BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)v164, (BlueFin::GlUtcTime *)&v155);
    long double v59 = *(double *)&v58;
    *(_WORD *)(a3 + 4) = v157;
    v58.i32[0] = v159;
    unint64_t v60 = vmovl_u8(v58).u64[0];
    *(void *)(a3 + 6) = v60;
    LOBYTE(v60) = v160;
    LODWORD(v61) = v156;
    double v62 = (double)v61 * 2.32830644e-10 + (double)v60;
    double v63 = fmod(v62, 4294967300.0);
    if (v62 <= 4294967300.0) {
      double v63 = v62;
    }
    if (v63 < -4294967300.0) {
      double v63 = -fmod(-v63, 4294967300.0);
    }
    if (v63 < 0.0) {
      unsigned int v64 = --v63;
    }
    else {
      LOWORD(v64) = v63;
    }
    *(_WORD *)(a3 + 14) = v64;
    double v65 = 1.0;
    double v66 = fmod(v62, 1.0);
    BlueFin::GlPeTimeMgrUtil::BreakDownFracSec((BlueFin::GlPeTimeMgrUtil *)(a3 + 16), v66, (unsigned __int16 *)(a3 + 18), &v154, v67);
    double v68 = fmod(v59, 4294967300.0);
    if (v59 <= 4294967300.0) {
      double v68 = v59;
    }
    if (v68 < -4294967300.0) {
      double v68 = -fmod(-v68, 4294967300.0);
    }
    if (v68 < 0.0) {
      unsigned int v69 = --v68;
    }
    else {
      unsigned int v69 = v68;
    }
    *(_DWORD *)(a3 + 20) = v69;
    int v70 = *(_DWORD *)(a1 + 36);
    if (v70 != -1)
    {
      unsigned int v71 = *(_DWORD *)(*(void *)(a1 + 8) + 28);
      unsigned int v72 = *(_DWORD *)(a1 + 32) + v70;
      BOOL v73 = v72 >= v71;
      unsigned int v74 = v72 - v71;
      if (!v73) {
        unsigned int v74 = 1;
      }
      double v65 = (double)v74;
    }
    *(double *)(a3 + 6904) = v65;
    uint64_t v75 = *(void *)(*(void *)(a1 + 56) + 8);
    *(unsigned char *)(a3 + 4051) = *(unsigned char *)(v75 + 2589) == 0;
    *(unsigned char *)(a3 + 4176) = *(unsigned char *)(v75 + 2588);
    *(_WORD *)(a3 + 44) = *(_WORD *)(a2 + 44);
    memcpy((void *)(a3 + 48), (const void *)(a2 + 48), 0xFA0uLL);
    if (v38)
    {
      *(_WORD *)(a3 + 4274) = *(_WORD *)(a2 + 4274);
      long long v76 = *(_OWORD *)(a2 + 4280);
      long long v77 = *(_OWORD *)(a2 + 4296);
      long long v78 = *(_OWORD *)(a2 + 4328);
      *(_OWORD *)(a3 + 4312) = *(_OWORD *)(a2 + 4312);
      *(_OWORD *)(a3 + 4328) = v78;
      *(_OWORD *)(a3 + 4280) = v76;
      *(_OWORD *)(a3 + 4296) = v77;
      long long v79 = *(_OWORD *)(a2 + 4456);
      long long v81 = *(_OWORD *)(a2 + 4408);
      long long v80 = *(_OWORD *)(a2 + 4424);
      *(_OWORD *)(a3 + 4440) = *(_OWORD *)(a2 + 4440);
      *(_OWORD *)(a3 + 4456) = v79;
      *(_OWORD *)(a3 + 4408) = v81;
      *(_OWORD *)(a3 + 4424) = v80;
      long long v82 = *(_OWORD *)(a2 + 4520);
      long long v84 = *(_OWORD *)(a2 + 4472);
      long long v83 = *(_OWORD *)(a2 + 4488);
      *(_OWORD *)(a3 + 4504) = *(_OWORD *)(a2 + 4504);
      *(_OWORD *)(a3 + 4520) = v82;
      *(_OWORD *)(a3 + 4472) = v84;
      *(_OWORD *)(a3 + 4488) = v83;
      long long v85 = *(_OWORD *)(a2 + 4584);
      long long v87 = *(_OWORD *)(a2 + 4536);
      long long v86 = *(_OWORD *)(a2 + 4552);
      *(_OWORD *)(a3 + 4568) = *(_OWORD *)(a2 + 4568);
      *(_OWORD *)(a3 + 4584) = v85;
      *(_OWORD *)(a3 + 4536) = v87;
      *(_OWORD *)(a3 + 4552) = v86;
      long long v88 = *(_OWORD *)(a2 + 4344);
      long long v89 = *(_OWORD *)(a2 + 4360);
      long long v90 = *(_OWORD *)(a2 + 4392);
      *(_OWORD *)(a3 + 4376) = *(_OWORD *)(a2 + 4376);
      *(_OWORD *)(a3 + 4392) = v90;
      *(_OWORD *)(a3 + 4344) = v88;
      *(_OWORD *)(a3 + 4360) = v89;
      long long v91 = *(_OWORD *)(a2 + 4600);
      long long v92 = *(_OWORD *)(a2 + 4616);
      long long v93 = *(_OWORD *)(a2 + 4648);
      *(_OWORD *)(a3 + 4632) = *(_OWORD *)(a2 + 4632);
      *(_OWORD *)(a3 + 4648) = v93;
      *(_OWORD *)(a3 + 4600) = v91;
      *(_OWORD *)(a3 + 4616) = v92;
      long long v94 = *(_OWORD *)(a2 + 4664);
      long long v95 = *(_OWORD *)(a2 + 4680);
      long long v96 = *(_OWORD *)(a2 + 4712);
      *(_OWORD *)(a3 + 4696) = *(_OWORD *)(a2 + 4696);
      *(_OWORD *)(a3 + 4712) = v96;
      *(_OWORD *)(a3 + 4664) = v94;
      *(_OWORD *)(a3 + 4680) = v95;
      long long v97 = *(_OWORD *)(a2 + 4728);
      long long v98 = *(_OWORD *)(a2 + 4744);
      long long v99 = *(_OWORD *)(a2 + 4776);
      *(_OWORD *)(a3 + 4760) = *(_OWORD *)(a2 + 4760);
      *(_OWORD *)(a3 + 4776) = v99;
      *(_OWORD *)(a3 + 4728) = v97;
      *(_OWORD *)(a3 + 4744) = v98;
      long long v100 = *(_OWORD *)(a2 + 4792);
      long long v101 = *(_OWORD *)(a2 + 4808);
      long long v102 = *(_OWORD *)(a2 + 4840);
      *(_OWORD *)(a3 + 4824) = *(_OWORD *)(a2 + 4824);
      *(_OWORD *)(a3 + 4840) = v102;
      *(_OWORD *)(a3 + 4792) = v100;
      *(_OWORD *)(a3 + 4808) = v101;
      long long v103 = *(_OWORD *)(a2 + 5112);
      long long v104 = *(_OWORD *)(a2 + 5128);
      long long v105 = *(_OWORD *)(a2 + 5160);
      *(_OWORD *)(a3 + 5144) = *(_OWORD *)(a2 + 5144);
      *(_OWORD *)(a3 + 5160) = v105;
      *(_OWORD *)(a3 + 5112) = v103;
      *(_OWORD *)(a3 + 5128) = v104;
      long long v106 = *(_OWORD *)(a2 + 5176);
      long long v107 = *(_OWORD *)(a2 + 5192);
      long long v108 = *(_OWORD *)(a2 + 5224);
      *(_OWORD *)(a3 + 5208) = *(_OWORD *)(a2 + 5208);
      *(_OWORD *)(a3 + 5224) = v108;
      *(_OWORD *)(a3 + 5176) = v106;
      *(_OWORD *)(a3 + 5192) = v107;
      long long v109 = *(_OWORD *)(a2 + 5240);
      long long v110 = *(_OWORD *)(a2 + 5256);
      long long v111 = *(_OWORD *)(a2 + 5288);
      *(_OWORD *)(a3 + 5272) = *(_OWORD *)(a2 + 5272);
      *(_OWORD *)(a3 + 5288) = v111;
      *(_OWORD *)(a3 + 5240) = v109;
      *(_OWORD *)(a3 + 5256) = v110;
      long long v112 = *(_OWORD *)(a2 + 5304);
      long long v113 = *(_OWORD *)(a2 + 5320);
      long long v114 = *(_OWORD *)(a2 + 5352);
      *(_OWORD *)(a3 + 5336) = *(_OWORD *)(a2 + 5336);
      *(_OWORD *)(a3 + 5352) = v114;
      *(_OWORD *)(a3 + 5304) = v112;
      *(_OWORD *)(a3 + 5320) = v113;
      long long v115 = *(_OWORD *)(a2 + 4856);
      long long v116 = *(_OWORD *)(a2 + 4872);
      long long v117 = *(_OWORD *)(a2 + 4904);
      *(_OWORD *)(a3 + 4888) = *(_OWORD *)(a2 + 4888);
      *(_OWORD *)(a3 + 4904) = v117;
      *(_OWORD *)(a3 + 4856) = v115;
      *(_OWORD *)(a3 + 4872) = v116;
      long long v118 = *(_OWORD *)(a2 + 4920);
      long long v119 = *(_OWORD *)(a2 + 4936);
      long long v120 = *(_OWORD *)(a2 + 4968);
      *(_OWORD *)(a3 + 4952) = *(_OWORD *)(a2 + 4952);
      *(_OWORD *)(a3 + 4968) = v120;
      *(_OWORD *)(a3 + 4920) = v118;
      *(_OWORD *)(a3 + 4936) = v119;
      long long v121 = *(_OWORD *)(a2 + 4984);
      long long v122 = *(_OWORD *)(a2 + 5000);
      long long v123 = *(_OWORD *)(a2 + 5032);
      *(_OWORD *)(a3 + 5016) = *(_OWORD *)(a2 + 5016);
      *(_OWORD *)(a3 + 5032) = v123;
      *(_OWORD *)(a3 + 4984) = v121;
      *(_OWORD *)(a3 + 5000) = v122;
      long long v124 = *(_OWORD *)(a2 + 5048);
      long long v125 = *(_OWORD *)(a2 + 5064);
      long long v126 = *(_OWORD *)(a2 + 5096);
      *(_OWORD *)(a3 + 5080) = *(_OWORD *)(a2 + 5080);
      *(_OWORD *)(a3 + 5096) = v126;
      *(_OWORD *)(a3 + 5048) = v124;
      *(_OWORD *)(a3 + 5064) = v125;
      long long v127 = *(_OWORD *)(a2 + 5368);
      long long v128 = *(_OWORD *)(a2 + 5384);
      long long v129 = *(_OWORD *)(a2 + 5416);
      *(_OWORD *)(a3 + 5400) = *(_OWORD *)(a2 + 5400);
      *(_OWORD *)(a3 + 5416) = v129;
      *(_OWORD *)(a3 + 5368) = v127;
      *(_OWORD *)(a3 + 5384) = v128;
      long long v130 = *(_OWORD *)(a2 + 5432);
      long long v131 = *(_OWORD *)(a2 + 5448);
      long long v132 = *(_OWORD *)(a2 + 5480);
      *(_OWORD *)(a3 + 5464) = *(_OWORD *)(a2 + 5464);
      *(_OWORD *)(a3 + 5480) = v132;
      *(_OWORD *)(a3 + 5432) = v130;
      *(_OWORD *)(a3 + 5448) = v131;
      long long v133 = *(_OWORD *)(a2 + 5496);
      long long v134 = *(_OWORD *)(a2 + 5512);
      long long v135 = *(_OWORD *)(a2 + 5544);
      *(_OWORD *)(a3 + 5528) = *(_OWORD *)(a2 + 5528);
      *(_OWORD *)(a3 + 5544) = v135;
      *(_OWORD *)(a3 + 5496) = v133;
      *(_OWORD *)(a3 + 5512) = v134;
      long long v136 = *(_OWORD *)(a2 + 5560);
      long long v137 = *(_OWORD *)(a2 + 5576);
      long long v138 = *(_OWORD *)(a2 + 5608);
      *(_OWORD *)(a3 + 5592) = *(_OWORD *)(a2 + 5592);
      *(_OWORD *)(a3 + 5608) = v138;
      *(_OWORD *)(a3 + 5560) = v136;
      *(_OWORD *)(a3 + 5576) = v137;
      long long v139 = *(_OWORD *)(a2 + 5816);
      long long v140 = *(_OWORD *)(a2 + 5832);
      long long v141 = *(_OWORD *)(a2 + 5864);
      *(_OWORD *)(a3 + 5848) = *(_OWORD *)(a2 + 5848);
      *(_OWORD *)(a3 + 5864) = v141;
      *(_OWORD *)(a3 + 5816) = v139;
      *(_OWORD *)(a3 + 5832) = v140;
      long long v142 = *(_OWORD *)(a2 + 5880);
      long long v143 = *(_OWORD *)(a2 + 5896);
      long long v144 = *(_OWORD *)(a2 + 5928);
      *(_OWORD *)(a3 + 5912) = *(_OWORD *)(a2 + 5912);
      *(_OWORD *)(a3 + 5928) = v144;
      *(_OWORD *)(a3 + 5880) = v142;
      *(_OWORD *)(a3 + 5896) = v143;
      long long v145 = *(_OWORD *)(a2 + 5944);
      long long v146 = *(_OWORD *)(a2 + 5960);
      long long v147 = *(_OWORD *)(a2 + 5992);
      *(_OWORD *)(a3 + 5976) = *(_OWORD *)(a2 + 5976);
      *(_OWORD *)(a3 + 5992) = v147;
      *(_OWORD *)(a3 + 5944) = v145;
      *(_OWORD *)(a3 + 5960) = v146;
      long long v148 = *(_OWORD *)(a2 + 6008);
      long long v149 = *(_OWORD *)(a2 + 6024);
      long long v150 = *(_OWORD *)(a2 + 6056);
      *(_OWORD *)(a3 + 6040) = *(_OWORD *)(a2 + 6040);
      *(_OWORD *)(a3 + 6056) = v150;
      *(_OWORD *)(a3 + 6008) = v148;
      *(_OWORD *)(a3 + 6024) = v149;
      *(void *)(a3 + 4120) = *(void *)(a2 + 4120);
      *(void *)(a3 + 4128) = *(void *)(a2 + 4128);
    }
    GlCustomLog(14, "AgedFix %1.6f %1.6f %1.0f  (%0.1f hours old)\n", *(double *)(a3 + 4072), *(double *)(a3 + 4080), *(double *)(a3 + 4088), v37 / 3600.0);
  }
  return v3;
}

uint64_t BlueFin::GlPeRqHdlrPosSigleShot::UpdateFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v2;
  uint64_t v61 = *MEMORY[0x263EF8340];
  *(unsigned char *)(v2 + 76) = *(unsigned char *)(v5 + 4048);
  bzero(v35, 0x1CF0uLL);
  memset(&v35[7408], 248, 24);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t result = BlueFin::GlPeRqHdlrPosSigleShot::UpdateFixStatusTimeout(v7, v6, (uint64_t)v35);
  if ((result & 1) == 0 && (*(unsigned char *)(v6 + 4048) || (*(unsigned char *)(v6 + 4068) & 0x10) != 0))
  {
    int v9 = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 400))(*(void *)(v7 + 8));
    if (v9) {
      (*(void (**)(void, void))(**(void **)(v7 + 8) + 424))(*(void *)(v7 + 8), *(unsigned int *)(v6 + 7008));
    }
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 152))(*(void *)(v7 + 8));
    int v10 = result;
    if ((int)result <= 400) {
      int v11 = 400;
    }
    else {
      int v11 = result;
    }
    *(_DWORD *)(v7 + 72) = v11;
    uint64_t v12 = *(void *)(v7 + 8);
    int v13 = *(_DWORD *)(v7 + 36);
    if (v13 == -1)
    {
      uint64_t v18 = 1;
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(v12 + 28);
      unsigned int v15 = *(_DWORD *)(v7 + 32) + v13;
      BOOL v16 = v15 >= v14;
      unsigned int v17 = v15 - v14;
      if (v16) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 1;
      }
    }
    __int16 v19 = *(_WORD *)(v12 + 22);
    if (v4)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v7 + 16))(v7, v19, v18, 0);
      int v11 = v10;
      if (result) {
        int v11 = *(_DWORD *)(v7 + 72);
      }
    }
    else
    {
      __int16 v34 = *(_WORD *)(v12 + 22);
      if (*(_DWORD *)(v7 + 68) != v11)
      {
        if (BlueFin::GlPeKF::CheckMinWaitTimeWithFewSats(*(BlueFin::GlPeKF **)(*(void *)(v7 + 56) + 16), v18, &v33, 0, 0))
        {
          int ReqSmartMaskAccyM_Startup = 0;
        }
        else
        {
          int ReqSmartMaskAccyM_Startup = v10;
        }
        int GllStartupType = BlueFin::GlPeKF::GetGllStartupType(*(BlueFin::GlPeKF **)(*(void *)(v7 + 56) + 16));
        int v31 = *(_DWORD *)(v7 + 72);
        int v32 = GllStartupType;
        if (v10 == -1)
        {
          __int16 v34 = -1;
          int ReqSmartMaskAccyM_Startup = BlueFin::GlPeRqHdlr::GetReqSmartMaskAccyM_Startup(v7, &v32);
          int v31 = ReqSmartMaskAccyM_Startup;
          int v23 = *(_DWORD *)(*(void *)(*(void *)(v7 + 56) + 16) + 27384);
          if (v23 != -7200001)
          {
            int v24 = *(_DWORD *)(v7 + 36);
            if (v24 == -1)
            {
              uint64_t v18 = 1;
            }
            else
            {
              unsigned int v25 = *(_DWORD *)(*(void *)(v7 + 8) + 28);
              int v26 = *(_DWORD *)(v7 + 32);
              unsigned int v27 = v26 + v24;
              BOOL v16 = v27 >= v25;
              unsigned int v28 = v27 - v25;
              if (!v16) {
                unsigned int v28 = 1;
              }
              unsigned int v29 = v26 - v23;
              if (v29 >= v28) {
                uint64_t v18 = v28;
              }
              else {
                uint64_t v18 = v29;
              }
            }
          }
          BlueFin::GlPeRqHdlr::GetDynAccyMask_ToutForSmartphoneFF(v7, &v32, v18, &v31, &v34);
          int v22 = "Smartphone";
          __int16 v19 = v34;
        }
        else
        {
          int v22 = "Constant";
        }
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, void))(*(void *)v7 + 16))(v7, v19, v18, 0))
        {
          int v11 = v31;
        }
        else
        {
          int v11 = ReqSmartMaskAccyM_Startup;
        }
        uint64_t result = GlCustomLog(14, "AccyMask[%hu]SS %s %s Current %dm\n", *(unsigned __int16 *)(v7 + 48), v22, off_2655E0330[v32], v11);
      }
    }
    if (*(double *)(v6 + 4144) < (double)v11 + 0.01
      && (!v9
       || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 416))(*(void *)(v7 + 8)),
           (result & 1) != 0)
       || (double v30 = *(double *)(v6 + 4160),
           uint64_t result = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 440))(*(void *)(v7 + 8)),
           v30 <= (double)(int)result)))
    {
      *(unsigned char *)(v7 + 76) = 1;
      if (v11 == *(_DWORD *)(v7 + 72)) {
        *(_DWORD *)(v7 + 68) = v10;
      }
      *(unsigned char *)(*(void *)(*(void *)(v7 + 56) + 16) + 92896) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 76) = 0;
      *(_DWORD *)(v7 + 68) = v11;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeRqHdlrPosSigleShot::GetFixStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = v2;
  uint64_t v11 = *MEMORY[0x263EF8340];
  BlueFin::GlPeRqHdlrPosSigleShot::ApplyLocalUpdates(v2, v3, v6);
  bzero(v9, 0x1CF0uLL);
  memset(&v9[926], 248, 24);
  memset(v10, 0, sizeof(v10));
  int updated = BlueFin::GlPeRqHdlrPosSigleShot::UpdateFixStatusTimeout(v5, v4, (uint64_t)v9);
  if (v9 != (void *)v4 && updated)
  {
    memcpy((void *)v4, v9, 0x1CF0uLL);
    *(_OWORD *)(v4 + 7408) = *(_OWORD *)&v9[926];
    *(void *)(v4 + 7424) = v9[928];
    memcpy((void *)(v4 + 7432), v10, 0x190uLL);
  }
  return v4;
}

uint64_t BlueFin::GlPeRqHdlrPosSigleShot::Cleanup(BlueFin::GlPeRqHdlrPosSigleShot *this)
{
  if (*((unsigned char *)this + 64) || *((unsigned char *)this + 23) || *((unsigned char *)this + 20))
  {
    *((unsigned char *)this + 19) = 1;
    *((unsigned char *)this + 77) = 0;
    char v3 = &unk_270EC4DB8;
    __int16 v4 = *((_WORD *)this + 24);
    if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      off_270EC4DD0((uint64_t)&v3, 0);
    }
  }
  return BlueFin::GlPeRqHdlr::Cleanup((uint64_t)this);
}

void BlueFin::GlPeRqHdlrPosSigleShot::~GlPeRqHdlrPosSigleShot(BlueFin::GlPeRqHdlrPosSigleShot *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlPePulseTimeData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2;
  }
  if (v5 >= 3)
  {
    DeviceFaultNotify("glpe_reqhdlr_syncin.cpp", 258, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 2");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_reqhdlr_syncin.cpp", 258, "ucVersion >= 1 && ucVersion <= 2");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v33 = 91;
    char v34 = v5;
    uint64_t v35 = 0x1000000000000;
    int v32 = &unk_270EBA2F0;
    char v36 = v5;
    BOOL v8 = v5 == 1;
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v32, *(double *)(v2 + 8));
    if (v8)
    {
      unsigned int v9 = *(_DWORD *)(v7 + 24);
      int v30 = *(_DWORD *)(v7 + 20);
      unsigned int v31 = v9;
      unsigned int v29 = &off_270EBC600;
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v32, v9 / 0x93A80);
      unsigned int v10 = off_270EBC620((BlueFin::GlGpsTime *)&v29);
      LODWORD(v11) = v30;
      double v12 = ((double)v11 * 2.32830644e-10 + (double)(v10 % 0x93A80)) * 1000.0;
      double v13 = fmod(v12, 4294967300.0);
      if (v12 <= 4294967300.0) {
        double v13 = v12;
      }
      if (v13 < -4294967300.0) {
        double v13 = -fmod(-v13, 4294967300.0);
      }
      if (v13 < 0.0) {
        unsigned int v14 = --v13;
      }
      else {
        unsigned int v14 = v13;
      }
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v32, v14);
      double v15 = (v12 - (double)v14) * 1000.0;
      double v16 = fmod(v15, 4294967300.0);
      if (v15 <= 4294967300.0) {
        double v16 = v15;
      }
      if (v16 < -4294967300.0) {
        double v16 = -fmod(-v16, 4294967300.0);
      }
      if (v16 < 0.0) {
        unsigned int v17 = --v16;
      }
      else {
        LOWORD(v17) = v16;
      }
      unsigned int v18 = (unsigned __int16)v17;
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v32, v17);
      double v19 = (v15 - (double)v18) * 1000.0;
      double v20 = fmod(v19, 4294967300.0);
      if (v19 <= 4294967300.0) {
        double v20 = v19;
      }
      if (v20 < -4294967300.0) {
        double v20 = -fmod(-v20, 4294967300.0);
      }
      if (v20 < 0.0) {
        unsigned int v21 = --v20;
      }
      else {
        LOWORD(v21) = v20;
      }
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v32, v21);
      long double v22 = *(double *)(v7 + 32);
      double v23 = fmod(v22, 4294967300.0);
      if (v22 <= 4294967300.0) {
        double v23 = v22;
      }
      if (v23 < -4294967300.0) {
        double v23 = -fmod(-v23, 4294967300.0);
      }
      if (v23 < 0.0) {
        int v24 = --v23;
      }
      else {
        int v24 = v23;
      }
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v32, v24);
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v32, *(unsigned char *)(v7 + 16));
      BlueFin::GlDateTime::getByTimeSys((double *)(v7 + 20), *(_DWORD *)(v7 + 16), &v29);
      int v25 = HIDWORD(v29);
      unsigned int v26 = HIDWORD(v29) / 0x93A80;
      BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v32, HIDWORD(v29) / 0x93A80);
      LODWORD(v27) = *(_DWORD *)(v7 + 20);
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v32, (double)v27 * 2.32830644e-10 + (double)(v25 - 604800 * v26));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v32, *(double *)(v7 + 32));
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v32, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPePulseTimeData::Deserialize(BlueFin::GlPePulseTimeData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 91) {
    return 0;
  }
  int v3 = *((unsigned __int8 *)a2 + 12);
  if ((v3 - 3) < 0xFFFFFFFE) {
    return 0;
  }
  *((double *)this + 1) = BlueFin::GlSysLogEntry::GetD64(a2);
  if (v3 == 1)
  {
    int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
    unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
    unsigned int v8 = BlueFin::GlSysLogEntry::GetU16(a2);
    unsigned int v9 = BlueFin::GlSysLogEntry::GetU16(a2);
    unsigned int v10 = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 4) = 0;
    long double v22 = &off_270EBC600;
    double v11 = fmod(((double)U32 + (double)v8 * 0.001 + (double)v9 * 0.000001) * 0.001, 1.0);
    if (v11 < 0.0 || v11 >= 1.0)
    {
LABEL_19:
      DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
    }
    double v13 = v11 * 4294967300.0 + 0.5;
    unsigned int v14 = v13;
    if (v13 >= 4294967300.0) {
      unsigned int v14 = -1;
    }
    *((_DWORD *)this + 5) = v14;
    *((_DWORD *)this + 6) = (((double)U32 + (double)v8 * 0.001 + (double)v9 * 0.000001) * 0.001)
                          + 604800 * U16;
    double v15 = (double)v10;
  }
  else
  {
    *((_DWORD *)this + 4) = BlueFin::GlSysLogEntry::GetU8(a2);
    int S32 = BlueFin::GlSysLogEntry::GetS32(a2);
    long double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
    double v18 = fmod(D64, 1.0);
    if (v18 < 0.0 || v18 >= 1.0) {
      goto LABEL_19;
    }
    double v19 = v18 * 4294967300.0 + 0.5;
    unsigned int v20 = v19;
    if (v19 >= 4294967300.0) {
      unsigned int v20 = -1;
    }
    LODWORD(v21) = v20;
    HIDWORD(v21) = D64 + 604800 * S32;
    BlueFin::GlDateTime::GlDateTime((BlueFin::GlUtcTime *)&v22, &v21, *((_DWORD *)this + 4));
    *(void *)((char *)this + 20) = v22;
    double v15 = BlueFin::GlSysLogEntry::GetD64(a2);
  }
  *((double *)this + 4) = v15;
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 328);
  return 1;
}

void BlueFin::GlPePulseTimeData::~GlPePulseTimeData(BlueFin::GlPePulseTimeData *this)
{
}

void BlueFin::GlPeRqHdlrSyncin::~GlPeRqHdlrSyncin(BlueFin::GlPeRqHdlrSyncin *this)
{
  BlueFin::GlPeRqHdlr::~GlPeRqHdlr(this);

  JUMPOUT(0x263E6DD80);
}

uint64_t BlueFin::GlReqSm::SetSimSigAiding(BlueFin::GlReqSm *this, const BlueFin::GlMeSignalAidInfo *a2, const BlueFin::GlSvIdSet *a3, BlueFin::GlMeSignalAidInfo *a4)
{
  unsigned int v8 = (void *)((char *)this + 54352);
  long long v57 = v59;
  char v58 = 8;
  memset(v59, 0, sizeof(v59));
  if (*(unsigned __int8 *)(*((void *)this + 789) + 9191) + 1 != *(unsigned __int8 *)(*((void *)this + 789)
                                                                                        + 9190)
    && *((unsigned char *)a2 + 14))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *((void *)this + 789) + 32;
      __int16 v12 = *(_WORD *)(*((void *)a2 + 2) + v9);
      LOBYTE(v54) = v12;
      if (BlueFin::GlPeSatAidInfo::GetAidBySvId(v11, (unsigned __int8 *)&v54))
      {
        char v13 = v12;
        unint64_t v14 = (unint64_t)v12 >> 5;
        char v15 = v13 & 0x1F;
        uint64_t v16 = 1 << (v13 & 0x1F);
        if ((v16 & *(_DWORD *)(*v8 + 4 * v14)) == 0
          && (v16 & *(_DWORD *)(v8[12] + 4 * v14)) == 0)
        {
          BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)a4, (__int16 *)(*((void *)a2 + 2) + v9));
          *((_DWORD *)v57 + v14) |= 1 << v15;
        }
      }
      ++v10;
      v9 += 8;
    }
    while (v10 < *((unsigned __int8 *)a2 + 14));
  }
  uint64_t result = BlueFin::GlSetBase::HasAny(a3);
  if (result)
  {
    __int16 v18 = *((_WORD *)a2 + 7);
    if ((_BYTE)v18)
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = (__int16 *)(*((void *)a2 + 2) + v19);
        uint64_t v22 = *v21 >> 5;
        __int16 v23 = *v21 & 0x1F;
        uint64_t v24 = 1 << (*v21 & 0x1F);
        if ((v24 & *(_DWORD *)(*(void *)a3 + 4 * v22)) != 0
          && (v24 & *(_DWORD *)(*v8 + 4 * v22)) == 0
          && (v24 & *(_DWORD *)(v8[12] + 4 * v22)) == 0
          && (v24 & *((_DWORD *)v57 + v22)) == 0)
        {
          uint64_t result = BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)a4, v21);
          *((_DWORD *)v57 + v22) |= 1 << v23;
          __int16 v18 = *((_WORD *)a2 + 7);
        }
        ++v20;
        v19 += 8;
      }
      while (v20 < v18);
    }
  }
  int v25 = *((_DWORD *)this + 3048);
  if ((v25 & 6) != 0 && (v25 & 9) == 0)
  {
    uint64_t v26 = *((unsigned int *)this + 3049);
    if ((v26 & 0x80000000) == 0)
    {
      unint64_t v27 = (__int16 *)(*(void *)(*((void *)this + v26 + 1360) + 8) + 22);
      goto LABEL_24;
    }
    if (v26 != -1)
    {
      unint64_t v27 = (__int16 *)((char *)this + 14118);
LABEL_24:
      if (*v27 != -1) {
        return result;
      }
    }
  }
  uint64_t v28 = *((void *)this + 805);
  if (!*(unsigned char *)(v28 + 32) && !*(unsigned char *)(v28 + 31)
    || *(unsigned __int8 *)(*((void *)this + 789) + 9191) + 1 == *(unsigned __int8 *)(*((void *)this + 789)
                                                                                        + 9190))
  {
    unsigned int v29 = (unsigned int *)((char *)this + 53536);
    unsigned int v30 = *((_DWORD *)this + 13384);
    unsigned int v31 = *(_DWORD *)(*((void *)this + 785) + 2568);
    if (v30 - 1 >= v31)
    {
      *unsigned int v29 = v31;
      unsigned int v30 = v31;
    }
    long long v51 = a4;
    unsigned int v32 = v31 - v30;
    int v33 = *((unsigned __int8 *)this + 53540);
    if (v32 >= 0x186A1)
    {
      v33 ^= 1u;
      *((unsigned char *)this + 53540) = v33;
      *unsigned int v29 = v31;
    }
    if (v33) {
      int v34 = 63;
    }
    else {
      int v34 = 1;
    }
    if (v33) {
      __int16 v35 = -1;
    }
    else {
      __int16 v35 = 1;
    }
    int v52 = (v33 == 0) << 6;
    __int16 v53 = v35;
    __int16 v36 = v34;
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
      {
        if (dword_263BBD630[dword_263BBD620[i]] >= v34)
        {
          long long v38 = (BlueFin::GlPeGloFcnOsnMgr *)(*((void *)this + 786) + 119744);
          int v54 = dword_263BBD620[i];
          char v55 = v36;
          uint64_t result = (uint64_t)BlueFin::GlPeSvIdConverter::Gnss2SvId(v38, (unsigned int *)&v54, &v56);
          if (v56 - 1 <= 0xBB)
          {
            uint64_t v39 = v56 >> 5;
            char v40 = v56 & 0x1F;
            uint64_t v41 = 1 << (v56 & 0x1F);
            if ((v41 & *((_DWORD *)v57 + v39)) == 0
              && (v41 & *(_DWORD *)(*v8 + 4 * v39)) == 0
              && (v41 & *(_DWORD *)(v8[12] + 4 * v39)) == 0)
            {
              uint64_t v42 = *((unsigned __int16 *)a2 + 7);
              if (*((_WORD *)a2 + 7))
              {
                long long v43 = (__int16 *)*((void *)a2 + 2);
                while (*v43 != v56)
                {
                  v43 += 4;
                  if (!--v42) {
                    goto LABEL_45;
                  }
                }
                uint64_t result = BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)v51, v43);
                *((_DWORD *)v57 + v39) |= 1 << v40;
              }
            }
          }
        }
LABEL_45:
        ;
      }
      v36 += v53;
      int v34 = v36;
    }
    while (v52 != v36);
    __int16 v44 = *((_WORD *)a2 + 7);
    if ((_BYTE)v44)
    {
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      do
      {
        long long v47 = (__int16 *)(*((void *)a2 + 2) + v45);
        uint64_t v48 = *v47 >> 5;
        __int16 v49 = *v47 & 0x1F;
        uint64_t v50 = 1 << (*v47 & 0x1F);
        if ((v50 & *(_DWORD *)(*v8 + 4 * v48)) == 0
          && (v50 & *(_DWORD *)(v8[12] + 4 * v48)) == 0
          && (v50 & *((_DWORD *)v57 + v48)) == 0)
        {
          uint64_t result = BlueFin::GlMeSignalAidInfo::AddSignal((uint64_t)v51, v47);
          *((_DWORD *)v57 + v48) |= 1 << v49;
          __int16 v44 = *((_WORD *)a2 + 7);
        }
        ++v46;
        v45 += 8;
      }
      while (v46 < v44);
    }
  }
  return result;
}

uint64_t BlueFin::GlSignalIdSet::operator~(uint64_t a1, const void **a2)
{
  int v3 = BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)a1, (unsigned int *)(a1 + 12), 0x13u, a2);
  uint64_t v6 = &v8;
  char v7 = 19;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  BlueFin::GlSetBase::OperatorBinaryInversion((uint64_t)v3, (int **)&v6);
  unsigned int v4 = (BlueFin::GlSignalIdSet *)BlueFin::GlSetBase::operator=(a1, (uint64_t)&v6);
  *(_OWORD *)(a1 + 28) = v9;
  *(_OWORD *)(a1 + 44) = v10;
  *(_OWORD *)(a1 + 60) = *(_OWORD *)v11;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v11[12];
  *(_OWORD *)(a1 + 12) = v8;
  return BlueFin::GlSignalIdSet::setSignalIdLimits(v4);
}

uint64_t BlueFin::GlReqSm::sendMeSignalAidingTestFPGA(BlueFin::GlReqSm *this, const BlueFin::GlMeSignalAidInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unsigned __int8 a13, unsigned int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, int a20,char a21,unsigned __int16 a22,long long *a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49)
{
  uint64_t v51 = 0;
  STACK[0xBB8] = *MEMORY[0x263EF8340];
  *(_OWORD *)&STACK[0x880] = 0u;
  *(_OWORD *)&STACK[0x890] = 0u;
  *(_OWORD *)&STACK[0x860] = 0u;
  *(_OWORD *)&STACK[0x870] = 0u;
  *(_OWORD *)&STACK[0x840] = 0u;
  *(_OWORD *)&STACK[0x850] = 0u;
  a48 = 0u;
  a49 = 0u;
  a46 = 0u;
  a47 = 0u;
  a44 = 0u;
  a45 = 0u;
  a42 = 0u;
  a43 = 0u;
  a40 = 0u;
  a41 = 0u;
  a38 = 0u;
  a39 = 0u;
  a36 = 0u;
  a37 = 0u;
  a34 = 0u;
  a35 = 0u;
  a32 = 0u;
  a33 = 0u;
  a30 = 0u;
  a31 = 0u;
  a28 = 0u;
  a29 = 0u;
  a26 = 0u;
  a27 = 0u;
  a24 = 0u;
  a25 = 0u;
  a19 = &unk_270EBA358;
  a21 = -96;
  a22 = 0;
  a23 = &a24;
  do
  {
    int v52 = (char *)&a24 + v51;
    *(_WORD *)int v52 = 0;
    *((_DWORD *)v52 + 1) = 0;
    v51 += 8;
  }
  while (v51 != 1280);
  a20 = *((_DWORD *)a2 + 2);
  unsigned int v53 = *(_DWORD *)(*((void *)this + 788) + 92336);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&a12, &a14, 8u, (const void **)(*((void *)this + 784) + 208));
  unsigned int v54 = 0;
  char v55 = (_DWORD *)(a12 + 4 * a13 - 4);
  do
  {
    if (*v55)
    {
      unsigned int v56 = *v55 - (((*v55 >> 1) & 0x5B6DB6DB) + ((*v55 >> 2) & 0x9249249));
      unsigned int v54 = ((v56 + (v56 >> 3)) & 0xC71C71C7) + v54 - 63 * (((v56 + (v56 >> 3)) & 0xC71C71C7) / 0x3F);
    }
    --v55;
  }
  while ((unint64_t)v55 >= a12);
  if (v53 <= 0x1E && (v54 > 0x20u || *(_DWORD *)(*((void *)this + 788) + 92336) < 2u))
  {
    uint64_t v93 = *((unsigned __int16 *)a2 + 7);
    if (*((_WORD *)a2 + 7))
    {
      unsigned __int16 v94 = a22;
      long long v95 = a23;
      uint64_t v96 = *((void *)a2 + 2) + 4;
      do
      {
        if (*(_WORD *)(v96 - 4) - 1 <= 0x1F)
        {
          long long v97 = (char *)v95 + 8 * v94;
          *(_WORD *)long long v97 = *(_WORD *)(v96 - 4);
          int v98 = *(_DWORD *)v96;
          *((_DWORD *)v97 + 1) = *(_DWORD *)v96;
          long long v99 = (unsigned int *)(v97 + 4);
          if (v54 >= 0x21u && (*(unsigned char *)(v96 + 1) & 6) != 0) {
            *long long v99 = v98 & 0xFFFFF9FF;
          }
          a22 = ++v94;
        }
        v96 += 8;
        --v93;
      }
      while (v93);
    }
    goto LABEL_63;
  }
  if (!*((_WORD *)a2 + 7)) {
    goto LABEL_63;
  }
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  int v59 = 0;
  int v60 = 0;
  uint64_t v61 = *((void *)this + 789) + 32;
  int v101 = 15;
  int v62 = 4;
  while (v54 >= 0x21u && *(unsigned __int8 *)(*((void *)a2 + 2) + v57) - 1 <= 0x1F)
  {
    GlCustomLog(14, "Has none GPS \n");
LABEL_31:
    ++v58;
    unint64_t v76 = *((unsigned __int16 *)a2 + 7);
    v57 += 8;
    if (v58 >= v76) {
      goto LABEL_32;
    }
  }
  LOBYTE(v102) = *(unsigned char *)(*((void *)a2 + 2) + v57);
  AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v61, (unsigned __int8 *)&v102);
  if (!AidBySvId || *((__int16 *)AidBySvId + 37) < 5 || *((_DWORD *)AidBySvId + 3) == 4) {
    goto LABEL_31;
  }
  uint64_t v64 = *((void *)a2 + 2);
  uint64_t v65 = v64 + v57;
  int v66 = *(_DWORD *)(v64 + v57 + 4);
  if ((v66 & 0x600) != 0)
  {
    unsigned __int16 v67 = a22;
    double v68 = (char *)a23 + 8 * a22;
    *(_WORD *)double v68 = *(_WORD *)(v64 + v57);
    *((_DWORD *)v68 + 1) = v66;
    unsigned int v69 = (unsigned int *)(v68 + 4);
    BOOL v70 = (*(_DWORD *)(v65 + 4) & 0x200) == 0;
    if ((*(_DWORD *)(v65 + 4) & 0x200) != 0) {
      int v71 = 2;
    }
    else {
      int v71 = 1;
    }
    v60 += v71;
    int v72 = v101;
    if (!v70) {
      int v72 = 11;
    }
    int v101 = v72;
    if (!v70) {
      int v62 = 2;
    }
    if (v59 >= v62) {
      *unsigned int v69 = v66 & 0xFFFFF9FF;
    }
    else {
      ++v60;
    }
    ++v59;
    unsigned __int16 v74 = v67 + 1;
    a22 = v74;
  }
  else
  {
    __int16 v73 = *(_WORD *)(v64 + v57);
    unsigned __int16 v74 = a22;
    if ((v73 + 81) <= 0xDu)
    {
      uint64_t v75 = (char *)a23 + 8 * a22;
      *(_WORD *)uint64_t v75 = v73;
      *((_DWORD *)v75 + 1) = v66;
      a22 = ++v74;
      ++v60;
    }
  }
  if (v62 > v74) {
    goto LABEL_31;
  }
  LODWORD(v76) = *((unsigned __int16 *)a2 + 7);
LABEL_32:
  if (v60 < v101 && v76)
  {
    for (unint64_t i = 0; i < *((unsigned __int16 *)a2 + 7); ++i)
    {
      if (*(unsigned __int8 *)(*((void *)a2 + 2) + 8 * i) - 1 <= 0x1F)
      {
        LOBYTE(v102) = *(unsigned char *)(*((void *)a2 + 2) + 8 * i);
        long long v78 = BlueFin::GlPeSatAidInfo::GetAidBySvId(v61, (unsigned __int8 *)&v102);
        if (v78)
        {
          if (*((__int16 *)v78 + 37) >= 5 && *((_DWORD *)v78 + 3) != 4)
          {
            uint64_t v79 = *((void *)a2 + 2);
            __int16 v80 = *(_WORD *)(v79 + 8 * i);
            uint64_t v81 = a22;
            if (a22)
            {
              long long v82 = (unsigned __int16 *)a23;
              uint64_t v83 = a22;
              while (1)
              {
                int v84 = *v82;
                v82 += 4;
                if (v84 == *(_WORD *)(v79 + 8 * i)) {
                  break;
                }
                if (!--v83) {
                  goto LABEL_43;
                }
              }
            }
            else
            {
LABEL_43:
              uint64_t v85 = v79 + 8 * i;
              int v88 = *(_DWORD *)(v85 + 4);
              uint64_t v87 = v85 + 4;
              int v86 = v88;
              if (v54 > 0x20u || (v86 & 0x600) == 0)
              {
                long long v89 = a23;
                *((_WORD *)a23 + 4 * a22) = v80;
                long long v90 = (char *)v89 + 8 * v81;
                *((_DWORD *)v90 + 1) = v86;
                long long v91 = (unsigned int *)(v90 + 4);
                int v92 = v60 + 1;
                if ((*(unsigned char *)(v87 + 1) & 6) != 0)
                {
                  if (v59 >= v62) {
                    *long long v91 = v86 & 0xFFFFF9FF;
                  }
                  else {
                    int v92 = v60 + 2;
                  }
                  ++v59;
                }
                a22 = v81 + 1;
                int v60 = v92;
                if (v92 >= v101) {
                  break;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_63:
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    (*((void (**)(void **, void, void))a19 + 3))(&a19, 0, 0);
  }
  BlueFin::GlMeSignalAidInfo::Print((uint64_t)&a19, 0xEu, 0);
  BlueFin::GlMeSignalAidInfo::GetSignalIds((char *)&a19, (uint64_t)&v102);
  (*(void (**)(void, uint64_t *))(**((void **)this + 787) + 96))(*((void *)this + 787), &v102);
  return (*(uint64_t (**)(void, void **))(**((void **)this + 39) + 232))(*((void *)this + 39), &a19);
}

uint64_t BlueFin::GlReqSm::sendMeSignalAidingSwitch2L5Only(BlueFin::GlReqSm *this, const BlueFin::GlMeSignalAidInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, char a20,__int16 a21,long long *a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48)
{
  uint64_t v49 = 0;
  STACK[0xB38] = *MEMORY[0x263EF8340];
  *(_OWORD *)&STACK[0x800] = 0u;
  *(_OWORD *)&STACK[0x810] = 0u;
  *(_OWORD *)&STACK[0x7E0] = 0u;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  *(_OWORD *)&STACK[0x7C0] = 0u;
  *(_OWORD *)&STACK[0x7D0] = 0u;
  a47 = 0u;
  a48 = 0u;
  a45 = 0u;
  a46 = 0u;
  a43 = 0u;
  a44 = 0u;
  a41 = 0u;
  a42 = 0u;
  a39 = 0u;
  a40 = 0u;
  a37 = 0u;
  a38 = 0u;
  a35 = 0u;
  a36 = 0u;
  a33 = 0u;
  a34 = 0u;
  a31 = 0u;
  a32 = 0u;
  a29 = 0u;
  a30 = 0u;
  a27 = 0u;
  a28 = 0u;
  a25 = 0u;
  a26 = 0u;
  a23 = 0u;
  a24 = 0u;
  a18 = &unk_270EBA358;
  a20 = -96;
  a22 = &a23;
  do
  {
    uint64_t v50 = (char *)&a23 + v49;
    *(_WORD *)uint64_t v50 = 0;
    *((_DWORD *)v50 + 1) = 0;
    v49 += 8;
  }
  while (v49 != 1280);
  a19 = *((_DWORD *)a2 + 2);
  a21 = 0;
  uint64_t v51 = *((unsigned __int16 *)a2 + 7);
  if (*((_WORD *)a2 + 7))
  {
    int v52 = 0;
    unsigned __int16 v53 = 0;
    unsigned int v54 = (_DWORD *)(*((void *)a2 + 2) + 4);
    do
    {
      int v55 = *v54;
      if ((*v54 & 0x400) != 0)
      {
        unsigned int v56 = (char *)&a23 + 8 * v53;
        *(_WORD *)unsigned int v56 = *((_WORD *)v54 - 2);
        *((_DWORD *)v56 + 1) = v55;
        a21 = ++v52;
        unsigned __int16 v53 = v52;
      }
      v54 += 2;
      --v51;
    }
    while (v51);
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    off_270EBA370((uint64_t)&a18, 0);
  }
  BlueFin::GlMeSignalAidInfo::Print((uint64_t)&a18, 0xEu, 0);
  BlueFin::GlMeSignalAidInfo::GetSignalIds((char *)&a18, (uint64_t)&vars0);
  (*(void (**)(void, uint64_t *))(**((void **)this + 787) + 96))(*((void *)this + 787), &vars0);
  return (*(uint64_t (**)(void, void **))(**((void **)this + 39) + 232))(*((void *)this + 39), &a18);
}

uint64_t BlueFin::GlReqSm::sendMeSignalAidingWithBDSPriority(BlueFin::GlReqSm *this, const BlueFin::GlMeSignalAidInfo *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, int a19, char a20,__int16 a21,long long *a22,long long a23,long long a24,long long a25,long long a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48)
{
  uint64_t v49 = 0;
  STACK[0xB38] = *MEMORY[0x263EF8340];
  *(_OWORD *)&STACK[0x800] = 0u;
  *(_OWORD *)&STACK[0x810] = 0u;
  *(_OWORD *)&STACK[0x7E0] = 0u;
  *(_OWORD *)&STACK[0x7F0] = 0u;
  *(_OWORD *)&STACK[0x7C0] = 0u;
  *(_OWORD *)&STACK[0x7D0] = 0u;
  a47 = 0u;
  a48 = 0u;
  a45 = 0u;
  a46 = 0u;
  a43 = 0u;
  a44 = 0u;
  a41 = 0u;
  a42 = 0u;
  a39 = 0u;
  a40 = 0u;
  a37 = 0u;
  a38 = 0u;
  a35 = 0u;
  a36 = 0u;
  a33 = 0u;
  a34 = 0u;
  a31 = 0u;
  a32 = 0u;
  a29 = 0u;
  a30 = 0u;
  a27 = 0u;
  a28 = 0u;
  a25 = 0u;
  a26 = 0u;
  a23 = 0u;
  a24 = 0u;
  a18 = &unk_270EBA358;
  a20 = -96;
  a22 = &a23;
  do
  {
    uint64_t v50 = (char *)&a23 + v49;
    *(_WORD *)uint64_t v50 = 0;
    *((_DWORD *)v50 + 1) = 0;
    v49 += 8;
  }
  while (v49 != 1280);
  a19 = *((_DWORD *)a2 + 2);
  a21 = 0;
  uint64_t v51 = *((unsigned __int16 *)a2 + 7);
  if (*((_WORD *)a2 + 7))
  {
    int v52 = 0;
    unsigned __int16 v53 = 0;
    uint64_t v54 = *((void *)a2 + 2);
    int v55 = (_DWORD *)(v54 + 4);
    uint64_t v56 = *((unsigned __int16 *)a2 + 7);
    do
    {
      if (*((_WORD *)v55 - 2) - 76 <= 0x3E)
      {
        uint64_t v57 = (char *)&a23 + 8 * v53;
        *(_WORD *)uint64_t v57 = *((_WORD *)v55 - 2);
        *((_DWORD *)v57 + 1) = *v55;
        a21 = ++v52;
        unsigned __int16 v53 = v52;
      }
      v55 += 2;
      --v56;
    }
    while (v56);
    unint64_t v58 = (_DWORD *)(v54 + 4);
    do
    {
      if (*((_WORD *)v58 - 2) - 76 >= 0x3F)
      {
        int v59 = (char *)&a23 + 8 * v53;
        *(_WORD *)int v59 = *((_WORD *)v58 - 2);
        *((_DWORD *)v59 + 1) = *v58;
        a21 = ++v52;
        unsigned __int16 v53 = v52;
      }
      v58 += 2;
      --v51;
    }
    while (v51);
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    off_270EBA370((uint64_t)&a18, 0);
  }
  BlueFin::GlMeSignalAidInfo::Print((uint64_t)&a18, 0xEu, 0);
  BlueFin::GlMeSignalAidInfo::GetSignalIds((char *)&a18, (uint64_t)&vars0);
  (*(void (**)(void, uint64_t *))(**((void **)this + 787) + 96))(*((void *)this + 787), &vars0);
  return (*(uint64_t (**)(void, void **))(**((void **)this + 39) + 232))(*((void *)this + 39), &a18);
}

#error "263B508C4: call analysis failed (funcsize=625)"

unsigned __int8 *BlueFin::stDebugSelectedStats::getSortedSet(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,long long a47,long long a48,long long a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  a53 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
      uint64_t v54 = a1 + 232;
      goto LABEL_8;
    case 1:
      uint64_t v54 = a1 + 280;
      goto LABEL_8;
    case 2:
      uint64_t v54 = a1 + 328;
      goto LABEL_8;
    case 3:
      uint64_t v54 = a1 + 376;
      goto LABEL_8;
    case 4:
      uint64_t v54 = a1 + 424;
LABEL_8:
      a48 = 0u;
      a49 = 0u;
      a46 = 0u;
      a47 = 0u;
      a44 = 0u;
      a45 = 0u;
      a42 = 0u;
      a43 = 0u;
      a40 = 0u;
      a41 = 0u;
      a38 = 0u;
      a39 = 0u;
      __source[0] = v54[8];
      memcpy(&v77, *(const void **)v54, 4 * __source[0]);
      *(_WORD *)&__source[2] = 0;
      __source[1] = 0;
      *(_DWORD *)&__source[4] = v77;
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)__source);
      unsigned __int8 v57 = 0;
      if (__source[1] == __source[0]) {
        goto LABEL_17;
      }
      unsigned __int8 v57 = 0;
      uint64_t v58 = *a1;
      break;
    default:
      int v55 = a1 + 480;
      strcpy((char *)a1 + 480, "{}");
      return v55;
  }
  do
  {
    unsigned __int8 v59 = __source[2];
    *((unsigned char *)&a38 + v57) = __source[2];
    *(&a14 + v57) = 0;
    if ((char)v58 >= 1)
    {
      int v60 = (unsigned __int8 *)*((void *)a1 + 16);
      uint64_t v61 = v58;
      int v62 = (char *)(a1 + 136);
      while (1)
      {
        int v63 = *v60++;
        if (v63 == v59) {
          break;
        }
        ++v62;
        if (!--v61) {
          goto LABEL_16;
        }
      }
      *(&a14 + v57) = *v62;
    }
LABEL_16:
    ++v57;
    BlueFin::GlSetIterator::operator++((unsigned __int8 *)__source);
  }
  while (__source[1] != __source[0]);
LABEL_17:
  int v55 = a1 + 480;
  BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)(a1 + 480), (char *)0x5E0, "(%2d){", v56, v57);
  if (v57)
  {
    for (int i = 0; i != v57; ++i)
    {
      if (v57 == 1)
      {
        uint64_t v65 = 0;
      }
      else
      {
        uint64_t v65 = 0;
        char v66 = a14;
        uint64_t v67 = 1;
        do
        {
          if (*(&a14 + v67) > v66)
          {
            uint64_t v65 = v67;
            char v66 = *(&a14 + v67);
          }
          ++v67;
        }
        while (v57 != v67);
      }
      unsigned __int8 v75 = *((unsigned char *)&a38 + v65);
      double v68 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)a1 + 59);
      HIDWORD(v73) = 7;
      unsigned __int8 v74 = 0;
      BlueFin::GlPeSvIdConverter::SvId2Gnss(v68, &v75, (uint64_t)&v73 + 4);
      if (HIDWORD(v73) >= 6)
      {
        if (HIDWORD(v73) == 6) {
          uint64_t v70 = 78;
        }
        else {
          uint64_t v70 = 120;
        }
      }
      else
      {
        uint64_t v70 = dword_263BBD658[SHIDWORD(v73)];
      }
      int v71 = &a14 + v65;
      BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)__source, (char *)0x14, " %c%02d:%02d", v69, v70, v74, *v71);
      strlcat((char *)a1 + 480, __source, 0x5E0uLL);
      *int v71 = -90;
    }
  }
  strlcat((char *)a1 + 480, "}", 0x5E0uLL);
  return v55;
}

uint64_t BlueFin::GlReqSm::SatelliteSelectionPrint(BlueFin::stDebugSelectedStats &)const::PrintSet::operator()(unsigned __int8 *a1, const char *a2, const char *a3, char *__s)
{
  unsigned int v4 = __s;
  uint64_t v29 = *MEMORY[0x263EF8340];
  int64_t v8 = strlen(__s);
  long long v9 = &v4[v8];
  long long v10 = __sa;
  if (v8 >= 1)
  {
    do
    {
      int v11 = *v4;
      if (v11 == 123) {
        break;
      }
      ++v4;
      *v10++ = v11;
    }
    while (v4 < v9);
  }
  __int16 v13 = *(_WORD *)v4;
  __int16 v12 = v4 + 2;
  *(_WORD *)long long v10 = v13;
  v10[2] = 0;
  GlCustomLog(15, "%s%s", a2, __sa);
  size_t v14 = strlen(a2);
  size_t v15 = strlen(__sa);
  BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v27, (char *)0x14, "\n%%%ds", v16, v15 + v14);
  size_t v17 = strlen(a3);
  size_t v18 = strlen(__sa);
  BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v26, (char *)0x14, "\n%%%ds", v19, v18 + v17);
  if (v12 < v9)
  {
    int v20 = 0;
    do
    {
      for (uint64_t i = 0; ; ++i)
      {
        int v22 = v12[i];
        if (v22 == 32 || v22 == 125) {
          break;
        }
        __sa[i] = v22;
      }
      v12 += i + 1;
      __int16 v23 = &__sa[i];
      *__int16 v23 = v22;
      v23[1] = 0;
      GlCustomLog(15, "%s", __sa);
      if (++v20 % *a1) {
        BOOL v24 = 1;
      }
      else {
        BOOL v24 = v12 >= v9;
      }
      if (!v24) {
        GlCustomLog(15, "%s", v27);
      }
    }
    while (v12 < v9);
  }
  return GlCustomLog(15, "\n");
}

BOOL BlueFin::GlReqSm::stSbasState::CheckPermanentlyDisable(BlueFin::GlReqSm::stSbasState *this, BlueFin::GlPeSbasMgr *a2, const BlueFin::GlPeGnssTime *a3)
{
  char v13 = *(unsigned char *)this - 32;
  uint64_t v6 = (*(uint64_t (**)(BlueFin::GlPeSbasMgr *, char *, uint64_t))(*(void *)a2 + 112))(a2, &v13, 1);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = (*(uint64_t (**)(uint64_t, const BlueFin::GlPeGnssTime *))(*(void *)v6 + 248))(v6, a3);
    if (v8)
    {
      int v9 = v8;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 152))(v7) == 1
        && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 192))(v7, 4) >= 7)
      {
        *((_DWORD *)this + 2) = 4;
        int v10 = *(unsigned __int8 *)this;
        int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 192))(v7, 4);
        GlCustomLog(14, "SbasStateMachine: Permantently disabled SvId:%u due to URA:%u.  EphTimeLeft:%u\n", v10, v11, v9);
      }
    }
  }
  if (BlueFin::GlPeSbasMgr::GetMsg0ReceivedLms((uint64_t)a2, &v13))
  {
    *((_DWORD *)this + 2) = 4;
    GlCustomLog(14, "SbasStateMachine: Permantently disabled SvId:%u due to Msg 0 received.\n", *(unsigned __int8 *)this);
  }
  return *((_DWORD *)this + 2) == 4;
}

uint64_t BlueFin::GlReqSm::SetAsstEph(BlueFin::GlReqSm *this, const BlueFin::GlPeEphemeris *a2)
{
  *((_DWORD *)this + 2712) |= 4u;
  (*(void (**)(const BlueFin::GlPeEphemeris *, char *))(*(void *)a2 + 264))(a2, (char *)this + 6496);
  int v4 = *((unsigned __int8 *)a2 + 8) >> 4;
  (*(void (**)(char *__return_ptr, const BlueFin::GlPeEphemeris *))(*(void *)a2 + 136))((char *)&v9 + 4, a2);
  LODWORD(v9) = v4;
  BlueFin::GlGnssSet::Add((uint64_t)this + 6592, (int *)&v9);
  __int16 v8 = 10;
  uint64_t v5 = *((void *)this + 4);
  unint64_t v6 = *((void *)this + 1);
  *((void *)this + 4) = v6;
  do
  {
    unint64_t v9 = 0;
    if (BlueFin::patch_dispatch(v6, (uint64_t)this, (unsigned __int8 *)&v8, &v9)) {
      unint64_t v6 = v9;
    }
    else {
      unint64_t v6 = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v8);
    }
    *((void *)this + 4) = v6;
  }
  while (v6);
  *((void *)this + 4) = v5;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstAlm(uint64_t a1, unsigned __int8 *a2)
{
  *(_DWORD *)(a1 + 10848) |= 2u;
  long long v3 = *(_OWORD *)a2;
  long long v4 = *((_OWORD *)a2 + 1);
  *(_DWORD *)(a1 + 6816) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 6800) = v4;
  *(_OWORD *)(a1 + 6784) = v3;
  *(_DWORD *)(*(void *)(a1 + 6928) + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
  __int16 v8 = 10;
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v6;
  do
  {
    unint64_t v9 = 0;
    if (BlueFin::patch_dispatch(v6, a1, (unsigned __int8 *)&v8, &v9)) {
      unint64_t v6 = v9;
    }
    else {
      unint64_t v6 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v8);
    }
    *(void *)(a1 + 32) = v6;
  }
  while (v6);
  *(void *)(a1 + 32) = v5;
  return 1;
}

{
  long long v3;
  uint64_t v4;
  unint64_t v5;
  __int16 v7;
  unint64_t v8;

  *(_DWORD *)(a1 + 10848) |= 0x1000000u;
  long long v3 = *(_OWORD *)a2;
  *(void *)(a1 + 6868) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 6852) = v3;
  *(_DWORD *)(*(void *)(a1 + 6904) + (((unint64_t)*a2 >> 3) & 0x1C)) |= 1 << *a2;
  uint64_t v7 = 10;
  long long v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v5;
  do
  {
    __int16 v8 = 0;
    if (BlueFin::patch_dispatch(v5, a1, (unsigned __int8 *)&v7, &v8)) {
      uint64_t v5 = v8;
    }
    else {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v7);
    }
    *(void *)(a1 + 32) = v5;
  }
  while (v5);
  *(void *)(a1 + 32) = v4;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstAlm(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x20000u;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 6820) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 6836) = v3;
  *(_DWORD *)(*(void *)(a1 + 6880) + (((unint64_t)*(unsigned __int8 *)(a2 + 2) >> 3) & 0x1C)) |= 1 << *(unsigned char *)(a2 + 2);
  __int16 v7 = 10;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v5;
  do
  {
    unint64_t v8 = 0;
    if (BlueFin::patch_dispatch(v5, a1, (unsigned __int8 *)&v7, &v8)) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v5 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v7);
    }
    *(void *)(a1 + 32) = v5;
  }
  while (v5);
  *(void *)(a1 + 32) = v4;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstIono(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x10u;
  *(void *)(a1 + 6952) = *a2;
  __int16 v6 = 10;
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v4;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(v4, a1, (unsigned __int8 *)&v6, &v7)) {
      unint64_t v4 = v7;
    }
    else {
      unint64_t v4 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v6);
    }
    *(void *)(a1 + 32) = v4;
  }
  while (v4);
  *(void *)(a1 + 32) = v3;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstUtc(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x20u;
  *(_OWORD *)(a1 + 6960) = *a2;
  __int16 v6 = 10;
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v4;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(v4, a1, (unsigned __int8 *)&v6, &v7)) {
      unint64_t v4 = v7;
    }
    else {
      unint64_t v4 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v6);
    }
    *(void *)(a1 + 32) = v4;
  }
  while (v4);
  *(void *)(a1 + 32) = v3;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstUtc(uint64_t a1, long long *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x40000u;
  long long v3 = *a2;
  *(_DWORD *)(a1 + 6992) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 6976) = v3;
  __int16 v7 = 10;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v5;
  do
  {
    unint64_t v8 = 0;
    if (BlueFin::patch_dispatch(v5, a1, (unsigned __int8 *)&v7, &v8)) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v5 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v7);
    }
    *(void *)(a1 + 32) = v5;
  }
  while (v5);
  *(void *)(a1 + 32) = v4;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstAcq(uint64_t a1, const void *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x40u;
  memcpy((void *)(a1 + 6996), a2, 0x158uLL);
  int v3 = *(_DWORD *)(*(void *)(a1 + 6280) + 2568);
  if (v3 == -7200001) {
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 10084) = v3;
  *(_DWORD *)(a1 + 10088) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  __int16 v7 = 10;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v5;
  do
  {
    unint64_t v8 = 0;
    if (BlueFin::patch_dispatch(v5, a1, (unsigned __int8 *)&v7, &v8)) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v5 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v7);
    }
    *(void *)(a1 + 32) = v5;
  }
  while (v5);
  *(void *)(a1 + 32) = v4;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstAcq(uint64_t a1, int *a2)
{
  uint64_t v4 = *a2;
  if v4 < 6 && ((0x2Fu >> v4))
  {
    unint64_t v5 = off_2655E0388[v4];
  }
  else if (v4 == 6)
  {
    unint64_t v5 = "BDS";
  }
  else
  {
    unint64_t v5 = "Unknown";
  }
  GlCustomLog(14, "GlReqSm::SetAsstAcq(%s)\n", v5);
  int v6 = *a2;
  if (*a2 == 6)
  {
    *(_DWORD *)(a1 + 10848) |= 0x10000000u;
    uint64_t v7 = 7972;
  }
  else if (v6 == 5)
  {
    *(_DWORD *)(a1 + 10848) |= 0x8000000u;
    uint64_t v7 = 7656;
  }
  else
  {
    if (v6 != 3) {
      return 0;
    }
    *(_DWORD *)(a1 + 10848) |= 0x80u;
    uint64_t v7 = 7340;
  }
  memcpy((void *)(a1 + v7), a2, 0x13CuLL);
  __int16 v11 = 10;
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v9;
  do
  {
    unint64_t v12 = 0;
    if (BlueFin::patch_dispatch(v9, a1, (unsigned __int8 *)&v11, &v12)) {
      unint64_t v9 = v12;
    }
    else {
      unint64_t v9 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v11);
    }
    *(void *)(a1 + 32) = v9;
  }
  while (v9);
  *(void *)(a1 + 32) = v8;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstGnssTimeModel(uint64_t a1, _OWORD *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x80000u;
  *(_OWORD *)(a1 + 9904) = *a2;
  __int16 v6 = 10;
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v4;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(v4, a1, (unsigned __int8 *)&v6, &v7)) {
      unint64_t v4 = v7;
    }
    else {
      unint64_t v4 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v6);
    }
    *(void *)(a1 + 32) = v4;
  }
  while (v4);
  *(void *)(a1 + 32) = v3;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstGlnsAuxiliaryMsg(uint64_t a1, long long *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x100000u;
  long long v3 = *a2;
  *(void *)(a1 + 9936) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 9920) = v3;
  __int16 v7 = 10;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v5;
  do
  {
    unint64_t v8 = 0;
    if (BlueFin::patch_dispatch(v5, a1, (unsigned __int8 *)&v7, &v8)) {
      unint64_t v5 = v8;
    }
    else {
      unint64_t v5 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v7);
    }
    *(void *)(a1 + 32) = v5;
  }
  while (v5);
  *(void *)(a1 + 32) = v4;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstGpsAuxiliaryMsg(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 10848) |= 1u;
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 10072) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 9944) = *(_OWORD *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 9992) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 10008) = v8;
  *(_OWORD *)(a1 + 9960) = v6;
  *(_OWORD *)(a1 + 9976) = v7;
  *(_OWORD *)(a1 + 10040) = v4;
  *(_OWORD *)(a1 + 10056) = v5;
  *(_OWORD *)(a1 + 10024) = v3;
  __int16 v12 = 10;
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v10;
  do
  {
    unint64_t v13 = 0;
    if (BlueFin::patch_dispatch(v10, a1, (unsigned __int8 *)&v12, &v13)) {
      unint64_t v10 = v13;
    }
    else {
      unint64_t v10 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v12);
    }
    *(void *)(a1 + 32) = v10;
  }
  while (v10);
  *(void *)(a1 + 32) = v9;
  return 1;
}

uint64_t BlueFin::GlReqSm::SetAsstTime(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  *(_DWORD *)(a1 + 10848) |= 0x400u;
  __int16 v12 = *(BlueFin::GlPeTimeManagerData **)(a1 + 6280);
  if (*((_DWORD *)v12 + 642) == -7200001 && (*(unsigned char *)(*(void *)(a1 + 6272) + 33) & 0x40) == 0) {
    BlueFin::GlPeTimeManager::TimeAsstPending(v12);
  }
  uint64_t v13 = *a2;
  *(_DWORD *)(a1 + 8560) = *((_DWORD *)a2 + 2);
  *(void *)(a1 + 8552) = v13;
  *(void *)(a1 + 8568) = a3;
  BlueFin::GlUtcTime::MakeRelativeToGps0((_WORD *)(a1 + 8552), (unsigned __int16 *)(a1 + 8554), (unsigned __int16 *)(a1 + 8556), (unsigned __int16 *)(a1 + 8558), (unsigned __int16 *)(a1 + 8560), (unsigned __int16 *)(a1 + 8562), (unsigned __int16 *)(a1 + 8568), a8);
  *(_DWORD *)(a1 + 8576) = a4;
  *(_DWORD *)(a1 + 10080) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
  __int16 v17 = 10;
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = v15;
  do
  {
    unint64_t v18 = 0;
    if (BlueFin::patch_dispatch(v15, a1, (unsigned __int8 *)&v17, &v18)) {
      unint64_t v15 = v18;
    }
    else {
      unint64_t v15 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v17);
    }
    *(void *)(a1 + 32) = v15;
  }
  while (v15);
  *(void *)(a1 + 32) = v14;
  return 1;
}

BOOL BlueFin::GlReqSm::SetAsstFixStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  long long v6 = (__int16 *)(a1 + 10264);
  if (BlueFin::GlSetBase::HasAny((BlueFin::GlSetBase *)(a1 + 11504)))
  {
    GlCustomLog(14, "SetFixStatus [  %.6f %.6f %.1f ] %s \n", *(double *)(a2 + 4072), *(double *)(a2 + 4080), *(double *)(a2 + 4088), "Some Request actv");
    goto LABEL_6;
  }
  double v7 = *(double *)(a2 + 4072);
  double v8 = *(double *)(a2 + 4080);
  double v9 = *(double *)(a2 + 4088);
  if (*v6 < 1)
  {
    GlCustomLog(14, "SetFixStatus [  %.6f %.6f %.1f ] %s \n", v7, v8, v9, "No Requests actv");
    return 0;
  }
  GlCustomLog(14, "SetFixStatus [  %.6f %.6f %.1f ] %s \n", v7, v8, v9, "Some Request actv");
LABEL_6:
  BlueFin::GlPeReqBag::UpdateFixStatus(a1 + 10880, a2, a3, 0, 0);
  __int16 v28 = 0;
  uint64_t v27 = 0;
  memset(v29, 0, sizeof(v29));
  uint64_t v30 = 0;
  __int16 v31 = 0;
  uint64_t v32 = 0;
  __int16 v33 = 0;
  char v34 = 1;
  __int16 v37 = 0;
  uint64_t v35 = 0;
  __int16 v36 = 0;
  uint64_t v70 = v72;
  char v71 = 8;
  __int16 v73 = -1;
  uint64_t v75 = 0;
  long long v74 = 0u;
  int32x4_t v76 = vdupq_n_s32(0x42C60000u);
  int v77 = 1176255488;
  int32x2_t v78 = vdup_n_s32(0x461C3C00u);
  uint64_t v79 = 0;
  uint64_t v87 = 0;
  char v88 = 0;
  int64x2_t v89 = vdupq_n_s64(0x40C3878000000000uLL);
  uint64_t v90 = 0;
  char v91 = 0;
  __int16 v94 = 0;
  int v111 = 0;
  char v112 = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  uint64_t v113 = _D1;
  char v114 = 0;
  memset(v72, 0, 32);
  memset(&v86[32], 0, 96);
  memset(&v72[36], 0, 64);
  uint64_t v92 = 0;
  int v93 = 0;
  long long v110 = 0u;
  long long v109 = 0u;
  long long v108 = 0u;
  long long v107 = 0u;
  long long v106 = 0u;
  long long v105 = 0u;
  long long v104 = 0u;
  long long v103 = 0u;
  long long v102 = 0u;
  long long v101 = 0u;
  long long v100 = 0u;
  long long v99 = 0u;
  long long v98 = 0u;
  long long v97 = 0u;
  long long v96 = 0u;
  long long v95 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v85 = 0u;
  memset(v86, 0, 28);
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  *(_OWORD *)&v29[4] = *(_OWORD *)(a2 + 4072);
  *(void *)&v29[20] = *(void *)(a2 + 4088);
  BlueFin::GlPeFixStatus::SetPosition(*(BlueFin::GlPeFixStatus **)(a1 + 31800), (uint64_t)&v27, 0, 0, 0);
  *(_DWORD *)(*(void *)(a1 + 31800) + 4060) = *(_DWORD *)(a2 + 4060);
  BlueFin::GlReqSm::GenerateNMEA(a1);
  BOOL v15 = *(unsigned char *)(a2 + 4048) != 0;
  if (*(unsigned char *)(a2 + 4048))
  {
    uint64_t v16 = *((void *)v6 + 2866);
    __int16 v17 = *(void (**)(void, uint64_t, void))(v16 + 160);
    if (v17) {
      v17(*(void *)(v16 + 8), a2, 0);
    }
    __int16 v23 = &v25;
    char v24 = 3;
    uint64_t v25 = 0;
    int v26 = 0;
    BlueFin::GlPeReqBag::SetFixStatus(a1 + 10880, a2);
    *(_DWORD *)(a1 + 10848) |= 0x1000u;
    long long v18 = *(_OWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 9744) = *(_DWORD *)(a2 + 20);
    *(_OWORD *)(a1 + 9728) = v18;
    *(_OWORD *)(a1 + 9748) = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 10092) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092);
    *(void *)(a1 + 9688) = *(void *)(a2 + 4072);
    *(_OWORD *)(a1 + 9696) = *(_OWORD *)(a2 + 4080);
    *(void *)(a1 + 9712) = *(void *)(a2 + 4144);
    *(void *)(a1 + 9720) = *(void *)(a2 + 4160);
    __int16 v22 = 10;
    uint64_t v19 = *(void *)(a1 + 32);
    unint64_t v20 = *(void *)(a1 + 8);
    *(void *)(a1 + 32) = v20;
    do
    {
      unint64_t v115 = 0;
      if (BlueFin::patch_dispatch(v20, a1, (unsigned __int8 *)&v22, &v115)) {
        unint64_t v20 = v115;
      }
      else {
        unint64_t v20 = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v22);
      }
      *(void *)(a1 + 32) = v20;
    }
    while (v20);
    *(void *)(a1 + 32) = v19;
    BlueFin::GlPeReqBag::Cleanup(a1 + 10880);
    BlueFin::GlTimer::disarm(a1 + 31584);
  }
  return v15;
}

unint64_t BlueFin::GlReqSm::SetRefFreqStatus(uint64_t a1, long long *a2)
{
  *(_DWORD *)(a1 + 10848) |= 0x800u;
  long long v3 = *a2;
  *(_DWORD *)(a1 + 9680) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 9664) = v3;
  __int16 v6 = 10;
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 32) = result;
  do
  {
    unint64_t v7 = 0;
    if (BlueFin::patch_dispatch(result, a1, (unsigned __int8 *)&v6, &v7)) {
      unint64_t result = v7;
    }
    else {
      unint64_t result = (*(uint64_t (**)(uint64_t, __int16 *))(a1 + 32))(a1, &v6);
    }
    *(void *)(a1 + 32) = result;
  }
  while (result);
  *(void *)(a1 + 32) = v4;
  return result;
}

void BlueFin::GlReqSm::UpdateOscAidingFromBit(BlueFin::GlReqSm *this, const void **a2)
{
  uint64_t v4 = (char *)this + 53548;
  uint64_t v5 = *((void *)this + 789);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&v33, v34, 0x13u, a2 + 1);
  unsigned int v6 = 0;
  uint64_t v21 = (int *)v23;
  char v22 = 19;
  memset(v23, 0, sizeof(v23));
  do
  {
    *(_DWORD *)&v23[4 * (v6 >> 5)] |= 1 << v6;
    ++v6;
  }
  while (v6 != 128);
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)v26, 0x13u, &v33);
  uint64_t v35 = &v37;
  LOBYTE(v36) = 19;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  memset(v40, 0, sizeof(v40));
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, (int **)&v35, &v21);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&v35);
  v26[1] = v38;
  void v26[2] = v39;
  v27[0] = *(_OWORD *)v40;
  *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)&v40[12];
  v26[0] = v37;
  unsigned __int8 v28 = v25;
  memcpy(v32, __src, 4 * v25);
  unsigned __int16 v30 = 0;
  unsigned __int8 v29 = 0;
  int v31 = v32[0];
  BlueFin::GlSetIterator::operator++(&v28);
  if (v29 != v28)
  {
    __int16 v7 = 0;
    uint64_t v8 = v5 + 32;
    double v9 = 0.0;
    do
    {
      if (v30 >= 0x23FuLL)
      {
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsignalid.h", 577, "usIndex < NUM_SIGNAL_IDS");
      }
      unint64_t v10 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * v30;
      char v11 = *v10;
      LODWORD(v10) = v10[1];
      LOBYTE(v35) = v11;
      HIDWORD(v35) = v10;
      unsigned __int16 v36 = v30;
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)a2, (const BlueFin::GlSignalId *)&v35, 0, 0);
      if (MeMeas)
      {
        uint64_t v13 = MeMeas;
        if (*((float *)MeMeas + 25) < 0.000000016)
        {
          AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(v8, MeMeas);
          if (AidBySvId)
          {
            double v9 = v9 + (float)(*((float *)AidBySvId + 11) - *((float *)v13 + 24));
            ++v7;
          }
        }
      }
      BlueFin::GlSetIterator::operator++(&v28);
    }
    while (v29 != v28);
    if (v7 > 0)
    {
      unsigned int v15 = *(_DWORD *)v4 + 1;
      *(_DWORD *)uint64_t v4 = v15;
      double v16 = v9 / (double)v7 + *(double *)(v4 + 4);
      *(double *)(v4 + 4) = v16;
      __int16 v17 = (__int16 *)*((void *)this + 807);
      double v18 = v16 / (double)v15;
      double v19 = (double)v17[5] * 0.000000001;
      if (BlueFin::GlUtils::m_ucEnabled)
      {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        __int16 v17 = (__int16 *)*((void *)this + 807);
      }
      if (v19 * 1000000000.0 <= 98.0) {
        double v20 = v19;
      }
      else {
        double v20 = 0.0000000979999939;
      }
      BlueFin::GlPeOscMgr::SetOscOff((BlueFin::GlPeOscMgr *)v17, v18, v20, 0);
    }
  }
}

void BlueFin::GlPeTowFilter::init(BlueFin::GlPeTowFilter *this, const BlueFin::GlPeTimeManager *a2, unsigned int a3)
{
  if (!*(_DWORD *)this)
  {
    *(_DWORD *)this = a3;
    double v4 = (double)(int)a3;
    *((unsigned char *)this + 12) = 0;
    if (a3 <= 0xFF9222FE) {
      double v4 = (double)a3;
    }
    BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)a2, 0, 0, (uint64_t)v6, v4);
    unsigned int v5 = v6[3] / 0x3E8u;
    *((_DWORD *)this + 1) = v6[1];
    *((_DWORD *)this + 2) = v5;
  }
}

void BlueFin::GlPeTowFilter::UpdateTowMeas(BlueFin::GlPeTowFilter *this, const BlueFin::GlPeTimeManager *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, int a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int16 a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int *a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  unsigned int v50 = 0;
  a48 = *MEMORY[0x263EF8340];
  a43 = 0u;
  a44 = 0u;
  a41 = 0u;
  a42 = 0u;
  a39 = 0u;
  a40 = 0u;
  a37 = 0u;
  a38 = 0u;
  a35 = 0u;
  a36 = 0u;
  long long v118 = &v120;
  char v119 = 19;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  memset(var18_4, 0, sizeof(var18_4));
  do
  {
    *((_DWORD *)&v120 + (v50 >> 5)) |= 1 << v50;
    ++v50;
  }
  while (v50 != 128);
  unint64_t v115 = a3 + 1;
  BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&a9 + 1, 0x13u, a3 + 1);
  a29 = (int *)&a30 + 1;
  LOBYTE(a30) = 19;
  *(long long *)((char *)&a30 + 4) = 0u;
  *(long long *)((char *)&a31 + 4) = 0u;
  *(long long *)((char *)&a32 + 4) = 0u;
  *(long long *)((char *)&a33 + 4) = 0u;
  a34 = 0u;
  BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, &a29, (int **)&v118);
  BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&a29);
  *(long long *)((char *)&a10 + 4) = *(long long *)((char *)&a31 + 4);
  *(long long *)((char *)&a11 + 4) = *(long long *)((char *)&a32 + 4);
  *(long long *)((char *)&a12 + 4) = *(long long *)((char *)&a33 + 4);
  a13 = a34;
  *(long long *)((char *)&a9 + 4) = *(long long *)((char *)&a30 + 4);
  LOBYTE(a29) = a9;
  memcpy(&a30, __src, 4 * a9);
  WORD1(a29) = 0;
  BYTE1(a29) = 0;
  HIDWORD(a29) = a30;
  BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a29);
  if (BYTE1(a29) == a29)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    do
    {
      if (WORD1(a29) >= 0x23FuLL)
      {
LABEL_121:
        char v112 = "usIndex < NUM_SIGNAL_IDS";
        DeviceFaultNotify("glsignalid.h", 577, "GetSignalIdFromIndex", (char)"usIndex < NUM_SIGNAL_IDS");
        uint64_t v113 = "glsignalid.h";
        int v114 = 577;
        goto LABEL_122;
      }
      long long v52 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * WORD1(a29);
      char v53 = *v52;
      LODWORD(v52) = v52[1];
      LOBYTE(__src) = v53;
      HIDWORD(__src) = v52;
      LOBYTE(a9) = BYTE2(a29);
      MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)a3, (const BlueFin::GlSignalId *)&__src, 0, 0);
      long long v48 = MeMeas;
      BOOL v55 = 0;
      int v56 = *((_DWORD *)MeMeas + 3);
      if ((~v56 & 0x110) == 0)
      {
        if (*((float *)MeMeas + 27) >= 30.0)
        {
          double v57 = *((double *)MeMeas + 7) * 1000.0;
          double v58 = fmod(v57, 4294967300.0);
          if (v57 <= 4294967300.0) {
            double v58 = v57;
          }
          if (v58 < -4294967300.0) {
            double v58 = -fmod(-v58, 4294967300.0);
          }
          if (v58 < 0.0) {
            unsigned int v59 = --v58;
          }
          else {
            unsigned int v59 = v58;
          }
          BOOL v55 = v59 - 5924 < 0xFFFFE88F;
        }
        else
        {
          BOOL v55 = 0;
        }
      }
      if ((v56 & 0x130) == 0x130 || v55)
      {
        double v61 = *((double *)v48 + 7) * 1000.0;
        double v62 = fmod(v61, 4294967300.0);
        if (v61 <= 4294967300.0) {
          double v62 = v61;
        }
        if (v62 < -4294967300.0) {
          double v62 = -fmod(-v62, 4294967300.0);
        }
        if (v62 < 0.0) {
          unsigned int v63 = --v62;
        }
        else {
          unsigned int v63 = v62;
        }
        long long v64 = &a35 + v51;
        unsigned int v65 = *(_DWORD *)a3;
        *((_DWORD *)v64 + 1) = 12;
        *((_DWORD *)v64 + 2) = v65;
        *(_DWORD *)long long v64 = v63 + 77;
        *((unsigned char *)v64 + 12) = (_BYTE)__src;
        ++v51;
      }
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)&a29);
    }
    while (BYTE1(a29) != a29 && v51 < 0xA);
  }
  long long v66 = this;
  unsigned int v67 = *((unsigned __int8 *)this + 12);
  if (v67 == 1 && *((_DWORD *)this + 2) <= 0xBu)
  {
    unsigned int v68 = *(_DWORD *)a3;
    double v69 = (double)*(int *)a3;
    if (*(_DWORD *)a3 <= 0xFF9222FE) {
      double v69 = (double)v68;
    }
    BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)a2, 0, 1, (uint64_t)&a29, v69);
    unsigned int v70 = DWORD1(a30) / 0x3E8;
    if (*((_DWORD *)this + 2) >= DWORD1(a30) / 0x3E8)
    {
LABEL_37:
      LODWORD(v48) = HIDWORD(a29);
      *(_DWORD *)long long v66 = v68;
      char v71 = 1;
      *((_DWORD *)v66 + 2) = v70;
LABEL_59:
      *((_DWORD *)v66 + 1) = v48;
      *((unsigned char *)v66 + 12) = v71;
    }
  }
  else
  {
    if (v51 >= 2 && v67 <= 6)
    {
      unint64_t v72 = 0;
      __int16 v73 = &a35;
      while (2)
      {
        unint64_t v74 = (unint64_t)(&a35 + v72);
        LODWORD(v48) = *(_DWORD *)v74;
        uint64_t v75 = (unsigned __int8 *)(v74 | 0xC);
        int32x4_t v76 = v73;
        unint64_t v77 = v72;
        do
        {
          int v78 = v48 - *(_DWORD *)v76;
          int v79 = v78 + 604800000;
          if (v78 >= -302400000) {
            int v79 = v48 - *(_DWORD *)v76;
          }
          if (v78 <= 302400000) {
            int v80 = v79;
          }
          else {
            int v80 = v78 - 604800000;
          }
          if (v80 < 0) {
            int v80 = -v80;
          }
          if (v80 <= 0x63 && *v75 != *((unsigned __int8 *)v76 + 12))
          {
            *(_DWORD *)this = *((_DWORD *)&a35 + 4 * v72 + 2);
            *((_DWORD *)this + 2) = 12;
            char v71 = 6;
            goto LABEL_59;
          }
          ++v77;
          ++v76;
        }
        while (v77 < v51);
        ++v72;
        ++v73;
        if (v72 != v51) {
          continue;
        }
        break;
      }
    }
    if (v67 <= 5)
    {
      unsigned int v81 = 0;
      long long v118 = &v120;
      char v119 = 19;
      long long v120 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      memset(var18_4, 0, sizeof(var18_4));
      do
      {
        *((_DWORD *)&v120 + (v81 >> 5)) |= 1 << v81;
        ++v81;
      }
      while (v81 != 128);
      BlueFin::GlSetBase::GlSetBase((BlueFin::GlSetBase *)&__src, (unsigned int *)&a9 + 1, 0x13u, v115);
      a29 = (int *)&a30 + 1;
      LOBYTE(a30) = 19;
      p_src = &__src;
      *(long long *)((char *)&a30 + 4) = 0u;
      *(long long *)((char *)&a31 + 4) = 0u;
      *(long long *)((char *)&a32 + 4) = 0u;
      *(long long *)((char *)&a33 + 4) = 0u;
      a34 = 0u;
      BlueFin::GlSetBase::OperatorBinaryAnd((uint64_t)&__src, &a29, (int **)&v118);
      BlueFin::GlSetBase::operator=((uint64_t)&__src, (uint64_t)&a29);
      *(long long *)((char *)&a10 + 4) = *(long long *)((char *)&a31 + 4);
      *(long long *)((char *)&a11 + 4) = *(long long *)((char *)&a32 + 4);
      *(long long *)((char *)&a12 + 4) = *(long long *)((char *)&a33 + 4);
      a13 = a34;
      *(long long *)((char *)&a9 + 4) = *(long long *)((char *)&a30 + 4);
      a15 = a9;
      memcpy(&a19, __src, 4 * a9);
      a17 = 0;
      a16 = 0;
      a18 = a19;
      BlueFin::GlSetIterator::operator++(&a15);
      if (a16 == a15)
      {
        char v83 = 0;
      }
      else
      {
        char v84 = 0;
        int v85 = 5000;
        do
        {
          if (a17 >= 0x23FuLL) {
            goto LABEL_121;
          }
          int v86 = (char *)&BlueFin::GlSignalId::s_aotIndex2signalId + 2 * a17;
          char v87 = *v86;
          LODWORD(v86) = v86[1];
          LOBYTE(__src) = v87;
          HIDWORD(__src) = v86;
          char v88 = BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)a3, (const BlueFin::GlSignalId *)&__src, 0, 0);
          if ((*((_DWORD *)v88 + 3) & 0x130) == 0x110)
          {
            int64x2_t v89 = (double *)v88;
            double v90 = (double)*(int *)a3;
            if (*(_DWORD *)a3 <= 0xFF9222FE) {
              double v90 = (double)*(unsigned int *)a3;
            }
            BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)a2, 0, 1, (uint64_t)&a29, v90);
            if (*(unsigned __int8 *)v89 - 1 >= 0x20)
            {
              char v112 = "IS_GPS_SVID(*pSigMeas->m_otSignalId.GetSvId())";
              DeviceFaultNotify("glpe_towfilter.cpp", 89, "GetMeFrmSyncTowMeas", (char)"IS_GPS_SVID(*pSigMeas->m_otSignalId.GetSvId())");
              uint64_t v113 = "glpe_towfilter.cpp";
              int v114 = 89;
LABEL_122:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v113, v114, v112);
            }
            unsigned int v91 = DWORD1(a30);
            unsigned int v92 = HIDWORD(a29);
            double v93 = v89[7] * 1000.0;
            double v94 = fmod(v93, 4294967300.0);
            if (v93 <= 4294967300.0) {
              double v94 = v93;
            }
            if (v94 < -4294967300.0) {
              double v94 = -fmod(-v94, 4294967300.0);
            }
            unsigned int v95 = v91 / 0x3E8;
            unsigned int v96 = v92 % 0x1770;
            if (v94 < 0.0) {
              unsigned int v97 = --v94;
            }
            else {
              unsigned int v97 = v94;
            }
            unsigned int v98 = (v97 + 77) % 0x1770;
            unsigned int v99 = v98 + v92 - v96;
            int v100 = (v98 - v96) << 16;
            unsigned int v101 = v99 - 6000;
            if (v100 < -196608000) {
              v99 += 6000;
            }
            if (v100 <= 196608000) {
              LODWORD(v48) = v99;
            }
            else {
              LODWORD(v48) = v101;
            }
            int v102 = v92 - v48 + 604800000;
            if ((int)(v92 - v48) >= -302400000) {
              int v102 = v92 - v48;
            }
            if ((int)(v92 - v48) <= 302400000) {
              int v103 = v102;
            }
            else {
              int v103 = v92 - v48 - 604800000;
            }
            if (v103 < 0) {
              int v103 = -v103;
            }
            if (v103 <= 10 * v95) {
              int v85 = 13;
            }
            LODWORD(p_src) = *(_DWORD *)a3;
            char v84 = (char)__src;
          }
          BlueFin::GlSetIterator::operator++(&a15);
        }
        while (a16 != a15);
        if (v85 == 13)
        {
          long long v66 = this;
          char v83 = 1;
          if (*((unsigned __int8 *)this + 12) <= 5u && v51)
          {
            long long v104 = (char *)&a35 + 8;
            unint64_t v105 = v51;
            while (1)
            {
              int v106 = *((_DWORD *)v104 - 2);
              int v107 = v106 - v48 + 604800000;
              if (v106 - (int)v48 >= -302400000) {
                int v107 = v106 - v48;
              }
              if (v106 - (int)v48 <= 302400000) {
                int v108 = v107;
              }
              else {
                int v108 = v106 - v48 - 604800000;
              }
              if (v108 < 0) {
                int v108 = -v108;
              }
              if (v108 <= 0x63 && v104[4] != v84) {
                break;
              }
              v104 += 16;
              if (!--v105)
              {
                char v83 = 1;
                goto LABEL_106;
              }
            }
            *(_DWORD *)this = *(_DWORD *)v104;
            *((_DWORD *)this + 2) = 12;
            char v71 = 5;
            LODWORD(v48) = v106;
            goto LABEL_59;
          }
        }
        else
        {
          char v83 = 0;
          long long v66 = this;
        }
      }
LABEL_106:
      unsigned int v109 = *((_DWORD *)v66 + 2);
      if (v109 >= 0xD && v51 && *((unsigned __int8 *)v66 + 12) <= 4u)
      {
        LODWORD(v48) = a35;
        *(_DWORD *)long long v66 = DWORD2(a35);
        *((_DWORD *)v66 + 2) = 13;
        char v71 = 4;
        goto LABEL_59;
      }
      char v110 = v83 ^ 1;
      if (v109 < 0xD) {
        char v110 = 1;
      }
      if (v110)
      {
        if (v109 >= 0xD && *((unsigned __int8 *)v66 + 12) <= 1u)
        {
          unsigned int v68 = *(_DWORD *)a3;
          double v111 = (double)*(int *)a3;
          if (*(_DWORD *)a3 <= 0xFF9222FE) {
            double v111 = (double)v68;
          }
          BlueFin::GlPeTimeManager::lmsToLegacyGlStruct((unsigned int *)a2, 0, 1, (uint64_t)&a29, v111);
          unsigned int v70 = DWORD1(a30) / 0x3E8;
          if (*((_DWORD *)v66 + 2) > DWORD1(a30) / 0x3E8) {
            goto LABEL_37;
          }
        }
      }
      else if (*((unsigned __int8 *)v66 + 12) <= 2u)
      {
        *(_DWORD *)long long v66 = p_src;
        *((_DWORD *)v66 + 2) = 13;
        char v71 = 2;
        goto LABEL_59;
      }
    }
  }
}

void BlueFin::GlReqSm::~GlReqSm(BlueFin::GlReqSm *this)
{
  *(void *)this = &unk_270EC64D8;
  uint64_t v2 = (char *)this + 10880;
  BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
  BlueFin::GlPeReqBag::Cleanup((uint64_t)v2);
  BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
}

{
  uint64_t vars8;

  BlueFin::GlReqSm::~GlReqSm(this);

  JUMPOUT(0x263E6DD70);
}

unint64_t BlueFin::GlReqSm::SetPendingBag(BlueFin::GlReqSm *this, BlueFin::GlPePendingBag *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v3 = (char *)this + 6496;
  double v4 = v3 + 3768;
  if (*((__int16 *)v3 + 1884) <= 0)
  {
    unint64_t result = BlueFin::GlPePendingBag::operator=((uint64_t)v3, (uint64_t)a2);
    LOWORD(v10) = *v4;
  }
  else
  {
    unsigned __int16 v5 = 0;
    unint64_t v6 = *((unsigned __int16 *)v3 + 1884) + 1;
    memset(v16, 0, 512);
    do
    {
      __int16 v7 = (char *)this + 8 * (unsigned __int16)(v6 - 2);
      uint64_t v8 = *((void *)v7 + 1284);
      *((void *)v7 + 1284) = 0;
      if (v8) {
        *((void *)v16 + (__int16)v5++) = v8;
      }
      --v6;
    }
    while (v6 > 1);
    _WORD *v4 = 0;
    unint64_t result = BlueFin::GlPePendingBag::operator=((uint64_t)v3, (uint64_t)a2);
    unsigned int v10 = (unsigned __int16)*v4;
    if ((__int16)v5 >= 1)
    {
      unint64_t v11 = v5 + 1;
      do
      {
        if (v10 <= 0x47)
        {
          *((void *)this + v10++ + 1284) = *((void *)v16 + (unsigned __int16)(v11 - 2));
          _WORD *v4 = v10;
        }
        --v11;
      }
      while (v11 > 1);
    }
  }
  if ((__int16)v10 >= 1)
  {
    __int16 v14 = 7;
    uint64_t v12 = *((void *)this + 4);
    unint64_t result = *((void *)this + 1);
    *((void *)this + 4) = result;
    do
    {
      unint64_t v15 = 0;
      if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v14, &v15)) {
        unint64_t result = v15;
      }
      else {
        unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v14);
      }
      *((void *)this + 4) = result;
    }
    while (result);
    *((void *)this + 4) = v12;
  }
  if (*((_DWORD *)this + 2712))
  {
    __int16 v14 = 10;
    uint64_t v13 = *((void *)this + 4);
    unint64_t result = *((void *)this + 1);
    *((void *)this + 4) = result;
    do
    {
      unint64_t v15 = 0;
      if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v14, &v15)) {
        unint64_t result = v15;
      }
      else {
        unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v14);
      }
      *((void *)this + 4) = result;
    }
    while (result);
    *((void *)this + 4) = v13;
  }
  return result;
}

unint64_t BlueFin::GlReqSm::SetSIGMeasuement5Hz(BlueFin::GlReqSm *this)
{
  __int16 v4 = 20;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t BlueFin::GlReqSm::SetCntinMeas(unint64_t a1, uint64_t a2, double a3, double a4)
{
  double v4 = a4;
  double v5 = a3;
  uint64_t v6 = a2;
  unint64_t v8 = a1 + 32028;
  double v9 = a3 * 1000000000.0;
  int v10 = (int)(a3 * 1000000000.0);
  GlCustomLog(14, "GlReqSm::SetCntinMeas(%d, %.1fpb, %.1fppb)\n", a2, a3 * 1000000000.0, a4);
  if (v6 == 1)
  {
    if (*(_DWORD *)v8 > 7u || ((1 << *(_DWORD *)v8) & 0xB8) == 0)
    {
      *(unsigned char *)(v8 + 12) = 1;
      *(_DWORD *)unint64_t v8 = 4;
      *(_DWORD *)(v8 + 4) = v10;
    }
    double v12 = -v5;
    if (v5 >= 0.0) {
      double v12 = v5;
    }
    if (v12 >= 0.00001)
    {
      GlCustomLog(14, "Osc Manager not updated with CNTIN because Freq out of range (|%f| > 10000PPB)\n", v9);
      if (*(_DWORD *)v8 > 7u || ((1 << *(_DWORD *)v8) & 0xA8) == 0)
      {
        *(unsigned char *)(v8 + 12) = 1;
        *(_DWORD *)unint64_t v8 = 5;
        *(_DWORD *)(v8 + 4) = v10;
      }
      uint64_t v6 = 2;
    }
    else
    {
      uint64_t v13 = *(__int16 **)(a1 + 6456);
      int v14 = v13[1];
      double v15 = (double)v13[5] * 0.000000001;
      if (BlueFin::GlUtils::m_ucEnabled)
      {
        BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0x6F);
        uint64_t v13 = *(__int16 **)(a1 + 6456);
      }
      double v4 = v4 + -3.0;
      int v16 = (int)(v9 + -0.5);
      if (v9 >= 0.0) {
        LOWORD(v16) = 0;
      }
      if (v9 > 0.0) {
        LOWORD(v16) = (int)(v9 + 0.5);
      }
      void v13[3] = v16;
      GlCustomLog(14, "CntinDebug Meas %d\n", (__int16)v16);
      if (v4 <= v15 * 1000000000.0)
      {
        uint64_t v17 = *(void *)(a1 + 6272);
        double v5 = (double)*(__int16 *)(v17 + 832) * 0.000000001 + v5;
        double v9 = v5 * 1000000000.0;
        double v18 = (double)v14 * 0.000000001 * 1000000000.0;
        if (v18 == 0.0) {
          goto LABEL_32;
        }
        int v19 = *(_DWORD *)(v17 + 32) & 0x40;
        if (v15 * 1000000000.0 > 301.0 || v19 == 0) {
          goto LABEL_32;
        }
        double v21 = v18 - v9;
        if (v18 - v9 < 0.0) {
          double v21 = -(v18 - v9);
        }
        if (v21 <= 1500.0)
        {
LABEL_32:
          BlueFin::GlPeOscMgr::SetOscOff(*(BlueFin::GlPeOscMgr **)(a1 + 6456), v5, v4 * 0.000000001, 1);
          BlueFin::GlPeOscMgr::Serialize(*(BlueFin::GlPeOscMgr **)(a1 + 6456), 0, v22, v23);
          BlueFin::GlReqSm::SetOscOffsAiding(a1, 0);
        }
        else
        {
          GlCustomLog(14, "Osc Manager not updated with CNTIN because delta(Available Osc and Measured Cntin is large (Osc %f,CNTIN %f)\n");
        }
      }
      else
      {
        GlCustomLog(14, "Osc Manager not updated with CNTIN because uncertainty not better(%f > %f)\n");
      }
      uint64_t v24 = *(void *)(a1 + 6440);
      if (*(_DWORD *)(v24 + 44) == -7200001) {
        *(_DWORD *)(v24 + 44) = *(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(v24 + 40);
      }
      uint64_t v6 = 1;
      if (*(_DWORD *)v8 > 7u || ((1 << *(_DWORD *)v8) & 0xB8) == 0)
      {
        *(unsigned char *)(v8 + 12) = 1;
        *(_DWORD *)unint64_t v8 = 4;
        *(_DWORD *)(v8 + 4) = (int)v9;
      }
    }
  }
  else
  {
    *(unsigned char *)(v8 + 12) = 1;
    *(_DWORD *)unint64_t v8 = 3;
    *(_DWORD *)(v8 + 4) = v10;
    *(_DWORD *)(v8 + 8) = v6;
  }

  return BlueFin::GlPeReqBag::SetCntinMeas(a1 + 10880, v6, v5, v4);
}

uint64_t BlueFin::GlReqSm::CWResults(BlueFin::GlReqSm *this, uint64_t a2, unsigned int a3, double a4, double a5, double a6, uint64_t a7)
{
  uint64_t v13 = (BlueFin::GlReqSm *)((char *)this + 10880);
  uint64_t result = BlueFin::GlPeReqBag::GetCWRequest((BlueFin::GlReqSm *)((char *)this + 10880));
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 368))(result) == 1) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = a3;
    }
    return BlueFin::GlPeReqBag::CWResults(v13, a2, v15, a4, a5, a6, a7);
  }
  return result;
}

uint64_t (*BlueFin::GlReqSm::warmstandbystate(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlReqSm *this)
{
  unsigned int v3 = *a2;
  double v4 = BlueFin::GlReqSm::processing;
  if (v3 <= 6)
  {
    if (v3 == 2)
    {
      int v8 = *(_DWORD *)(a1 + 31792);
      *(_DWORD *)(a1 + 54548) = *(_DWORD *)(*(void *)(a1 + 6336) + 8);
      *(void *)(a1 + 31784) = a1;
      BlueFin::GlTimer::arm((BlueFin::GlTimer *)(a1 + 31752), 51, 0, v8 - 10000);
      *(unsigned char *)(a1 + 31776) = 1;
      GlCustomLog(14, "Start Internal Warm Standby Timer: %ums Ignore 0x%x\n", v8, *(_DWORD *)(a1 + 54548));
    }
    else
    {
      if (v3 != 3) {
        return v4;
      }
      BlueFin::GlTimer::disarm(a1 + 31752);
    }
    return 0;
  }
  if (v3 - 7 >= 3)
  {
    if (v3 != 51) {
      return v4;
    }
    uint64_t v5 = *(void *)(a1 + 31800);
    uint64_t v6 = *(unsigned int **)(a1 + 6320);
    uint64_t v7 = *v6;
    BlueFin::GlSignalIdSet::GetSvIdSet((BlueFin::GlSignalIdSet *)(v6 + 2), (uint64_t)v10);
    BlueFin::GlReqSm::GenerateAiding(a1, v7, v10, v5, 1);
    BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlReqSm::processing, (uint64_t)"&GlReqSm::processing");
    return 0;
  }
  double v4 = BlueFin::GlReqSm::processing;
  BlueFin::QHsm::tran((void *)a1, (uint64_t (*)())BlueFin::GlReqSm::processing, (uint64_t)"&GlReqSm::processing");
  return v4;
}

uint64_t BlueFin::GlReqSm::StopRequest(BlueFin::GlReqSm *this, BlueFin::GlRequestImpl *a2)
{
  if (!*((_DWORD *)a2 + 4)) {
    BlueFin::GlReqSm::StartWarmStandBy(this);
  }
  *((void *)this + 4148) = a2;
  double v4 = BlueFin::GlRequestImpl::GlRequestTypeToString(a2);
  GlCustomLog(14, "GlReqSm: Received StopRequest For %s\n", v4);

  return BlueFin::GlQueue::putFIFO((BlueFin::GlReqSm *)((char *)this + 40), 8, 0);
}

uint64_t BlueFin::GlReqSm::StartWarmStandBy(BlueFin::GlReqSm *this)
{
  uint64_t result = BlueFin::QHsm::isIn((uint64_t)this, (uint64_t (*)(uint64_t, unsigned __int8 *))BlueFin::GlReqSm::host_based_positioning);
  if (result)
  {
    uint64_t v5 = (_DWORD *)((char *)this + 54548);
    uint64_t v6 = *((void *)this + 784);
    unsigned int v7 = *(_DWORD *)(v6 + 848);
    unsigned int v8 = *(_DWORD *)(v6 + 852);
    if (v7)
    {
      *uint64_t v5 = *(_DWORD *)(*((void *)this + 792) + 8);
      *((void *)this + 3957) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 31624), 28, 0, v7);
      *((unsigned char *)this + 31648) = 1;
      uint64_t result = GlCustomLog(14, "Start Warm Standby Timer1: %ums Ignore 0x%x\n", v7, *v5);
    }
    if (v8)
    {
      *uint64_t v5 = *(_DWORD *)(*((void *)this + 792) + 8);
      *((void *)this + 3962) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 31664), 29, 0, v8);
      *((unsigned char *)this + 31688) = 1;
      uint64_t result = GlCustomLog(14, "Start Warm Standby Timer2: %ums Ignore 0x%x\n", v8, *v5);
    }
    if (v8 | v7)
    {
      double v9 = *(uint64_t (**)(__n128, __n128))(**((void **)this + 799) + 272);
      v3.n128_u64[0] = 0;
      v4.n128_u64[0] = 0;
      return v9(v3, v4);
    }
  }
  return result;
}

unint64_t BlueFin::GlReqSm::StopAllRequests(BlueFin::GlReqSm *this, int a2)
{
  __int16 v5 = 9;
  if (a2)
  {
    HIBYTE(v5) = 1;
    BlueFin::GlTimer::disarm((uint64_t)this + 31624);
    BlueFin::GlTimer::disarm((uint64_t)this + 31664);
    BlueFin::GlTimer::disarm((uint64_t)this + 31752);
  }
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v5);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v3;
  return result;
}

uint64_t (*BlueFin::GlReqSm::initialize_location_hub(BlueFin::GlReqSm *this, uint64_t a2))()
{
  unint64_t result = 0;
  switch(*(unsigned char *)a2)
  {
    case 2:
      *((void *)this + 6705) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53608), 31, 0, 5u);
      unint64_t result = 0;
      *((unsigned char *)this + 53632) = 1;
      goto LABEL_8;
    case 3:
      BlueFin::GlTimer::disarm((uint64_t)this + 53608);
      goto LABEL_29;
    case 6:
    case 0xB:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x29:
    case 0x32:
    case 0x33:
    case 0x35:
    case 0x36:
      return result;
    case 7:
      unint64_t result = 0;
      *((unsigned char *)this + 54568) = 1;
      return result;
    case 8:
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *((BlueFin::GlRequestImpl **)this + 4148));
      goto LABEL_29;
    case 9:
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
      unint64_t result = 0;
LABEL_8:
      *((unsigned char *)this + 54568) = 0;
      return result;
    case 0xA:
    case 0x31:
      BlueFin::GlReqSm::SetAsstFromPend(this, 0, 0);
      goto LABEL_29;
    case 0xC:
      BlueFin::GlReqSm::ProcessChipData((__int16 *)this, (const char *)a2);
      goto LABEL_29;
    case 0x1F:
      if (!*(unsigned char *)(a2 + 1))
      {
        unsigned int v12 = 100000;
        if ((*((_DWORD *)this + 3048) & 0x100) == 0)
        {
          if (BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 8)) {
            unsigned int v12 = 100000;
          }
          else {
            unsigned int v12 = 30000;
          }
        }
        BlueFin::GlTimer::fireIn((BlueFin::GlReqSm *)((char *)this + 53608), this, 31, 1, v12);
        BlueFin::GlPeLocationHubMgr::StartInitializationProcess(*((BlueFin::GlPeLocationHubMgr **)this + 4150));
      }
      int v13 = *((_DWORD *)this + 3048);
      if ((v13 & 0x100) != 0 || BlueFin::GlPePendingBag::HasReq((uint64_t)this + 6496, 8))
      {
        double v9 = (const BlueFin::GlMePlatfStat *)*((void *)this + 4131);
        GlCustomLog(14, "GlReqSm::initialize_location_hub calling HandleFactoryTestFailure\n");
        if ((v13 & 0x100) == 0) {
          BlueFin::GlReqSm::CreateNewReqFromPend(this);
        }
        BlueFin::GlPeReqBag::HandleFactoryTestFailure((BlueFin::GlReqSm *)((char *)this + 10880), v9);
        BlueFin::GlPeReqBag::TerminateAll((BlueFin::GlReqSm *)((char *)this + 10880));
        BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      }
      BlueFin::GlQueue::putFIFO((BlueFin::GlReqSm *)((char *)this + 40), 9, 0);
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      *((_DWORD *)this + 2712) = 0;
      uint64_t v10 = *((void *)this + 4149);
      if (*(unsigned char *)(v10 + 296))
      {
        unint64_t v11 = *(void (**)(void, void))(v10 + 80);
        if (v11)
        {
          v11(*(void *)(v10 + 8), 0);
          *(unsigned char *)(v10 + 296) = 0;
          uint64_t v10 = *((void *)this + 4149);
        }
      }
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v10 + 80))(v10, 6, 0);
      int v8 = 2704;
      goto LABEL_27;
    case 0x34:
      if (*((unsigned char *)this + 54568))
      {
        BlueFin::GlQueue::putFIFO((BlueFin::GlReqSm *)((char *)this + 40), 7, 0);
        *((unsigned char *)this + 54568) = 0;
      }
      (*(void (**)(void, uint64_t))(**((void **)this + 784) + 1120))(*((void *)this + 784), 1);
      __n128 v4 = "&GlReqSm::retention_check";
      __int16 v5 = (uint64_t (*)())BlueFin::GlReqSm::retention_check;
      goto LABEL_28;
    case 0x43:
      uint64_t v6 = *((void *)this + 4149);
      if (*(unsigned char *)(v6 + 296))
      {
        unsigned int v7 = *(void (**)(void, void))(v6 + 80);
        if (v7)
        {
          v7(*(void *)(v6 + 8), 0);
          *(unsigned char *)(v6 + 296) = 0;
          uint64_t v6 = *((void *)this + 4149);
        }
      }
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 80))(v6, 6, 0);
      int v8 = 2748;
LABEL_27:
      GlCustomLog(11, "GlReqSm::communication breakdown at %s: %d. GLL will be restarted!\n", "initialize_location_hub", v8);
      __n128 v4 = "&GlReqSm::restart";
      __int16 v5 = (uint64_t (*)())BlueFin::GlReqSm::restart;
LABEL_28:
      BlueFin::QHsm::tran(this, v5, (uint64_t)v4);
LABEL_29:
      unint64_t result = 0;
      break;
    default:
      unint64_t result = BlueFin::QHsm::top;
      break;
  }
  return result;
}

uint64_t (*BlueFin::GlReqSm::restart(uint64_t a1, unsigned __int8 *a2))()
{
  int v2 = *a2;
  if (v2 == 3) {
    return 0;
  }
  if (v2 == 2)
  {
    *(unsigned char *)(a1 + 108) = 1;
    if (*(unsigned char *)(a1 + 54033))
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 6272) + 1088))(*(void *)(a1 + 6272))) {
        __n128 v4 = "chip";
      }
      else {
        __n128 v4 = "host";
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 6272) + 1104))()) {
        __int16 v5 = "chip";
      }
      else {
        __int16 v5 = "host";
      }
      GlCustomLog(13, "GlReqSm::restart: ME switch from on-%s to on-%s required--switching now.\n", v4, v5);
    }
    return 0;
  }
  return BlueFin::QHsm::top;
}

uint64_t (*(*(*BlueFin::GlReqSm::wait4nullme(BlueFin::GlReqSm *this, unsigned char *a2))(uint64_t a1, unsigned __int8 *a2))(BlueFin::GlReqSm *this, const char *a2))()
{
  unint64_t result = 0;
  switch(*a2)
  {
    case 2:
      *((void *)this + 6700) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53568), 35, 0, 1u);
      unint64_t result = 0;
      *((unsigned char *)this + 53592) = 1;
      return result;
    case 3:
      uint64_t v9 = 53608;
      goto LABEL_13;
    case 6:
    case 7:
    case 0xB:
    case 0x12:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x24:
    case 0x26:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
      return result;
    case 8:
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *((BlueFin::GlRequestImpl **)this + 4148));
      return 0;
    case 9:
      GlCustomLog(14, "GlReqSm: remove all requests\n");
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      uint64_t v9 = 31584;
LABEL_13:
      BlueFin::GlTimer::disarm((uint64_t)this + v9);
      return 0;
    case 0xA:
      BlueFin::GlReqSm::SetAsstFromPend(this, 0, 0);
      return 0;
    case 0x11:
      if (*((__int16 *)this + 5132) > 0
        || *((_DWORD *)this + 2712)
        || *((unsigned char *)this + 31608)
        || *((unsigned char *)this + 31648)
        || *((unsigned char *)this + 31688))
      {
        goto LABEL_25;
      }
      BlueFin::GlReqSm::SetAsstFromPend(this, 0, 0);
      goto LABEL_6;
    case 0x13:
    case 0x23:
      int MinimumPeriod = BlueFin::GlPeReqBag::GetMinimumPeriod((BlueFin::GlReqSm *)((char *)this + 10880));
      *((void *)this + 6705) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53608), 31, 0, MinimumPeriod + 10000);
      *((unsigned char *)this + 53632) = 1;
      uint64_t v5 = *((void *)this + 785);
      if (!*(unsigned char *)(v5 + 2768) || (*(_DWORD *)(v5 + 2568) + 7201002) < 0x3E8) {
        goto LABEL_24;
      }
      int v6 = *(_DWORD *)(*((void *)this + 784) + 32);
      if ((v6 & 0x10000) != 0)
      {
        if ((v6 & 0x4000) == 0) {
          (*(void (**)(void, uint64_t, void))(**((void **)this + 792) + 16))(*((void *)this + 792), 0x10000, 0);
        }
LABEL_24:
        BlueFin::GlReqSm::ProcessNewMeas(this);
LABEL_25:
        BlueFin::GlReqSm::CreateMeJob(this);
        unsigned int v7 = "&GlReqSm::processing";
        int v8 = (uint64_t (*)())BlueFin::GlReqSm::processing;
      }
      else
      {
        BlueFin::GlPosEng::SetDeathCause(*((void *)this + 783), 2);
        (*(void (**)(void, uint64_t, void))(**((void **)this + 792) + 16))(*((void *)this + 792), 327680, 0);
LABEL_6:
        unsigned int v7 = "&GlReqSm::standby";
        int v8 = (uint64_t (*)())BlueFin::GlReqSm::standby;
      }
LABEL_26:
      BlueFin::QHsm::tran(this, v8, (uint64_t)v7);
      return 0;
    case 0x1A:
      BlueFin::GlTimer::disarm((uint64_t)this + 31584);
      unint64_t result = 0;
      *((_DWORD *)this + 2712) = 0;
      return result;
    case 0x1F:
    case 0x25:
      BlueFin::GlPosEng::SetDeathCause(*((void *)this + 783), 1);
      BlueFin::GlQueue::putFIFO((BlueFin::GlReqSm *)((char *)this + 40), 9, 0);
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      *((_DWORD *)this + 2712) = 0;
      unsigned int v7 = "&GlReqSm::restart";
      int v8 = (uint64_t (*)())BlueFin::GlReqSm::restart;
      goto LABEL_26;
    default:
      return BlueFin::GlReqSm::host_based_positioning;
  }
}

uint64_t (*BlueFin::GlReqSm::standby(BlueFin::GlReqSm *this, const char *a2))()
{
  unint64_t result = 0;
  switch(*a2)
  {
    case 2:
      BlueFin::GlReqSm::ToggleCoexGpio((uint64_t)this, 0);
      (*(void (**)(void))(**((void **)this + 39) + 224))(*((void *)this + 39));
      *((void *)this + 6705) = this;
      BlueFin::GlTimer::arm((BlueFin::GlReqSm *)((char *)this + 53608), 31, 0, 0x4E20u);
      *((unsigned char *)this + 53632) = 1;
      bzero(*((void **)this + 866), ((4 * *((unsigned __int8 *)this + 6936) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      uint64_t v8 = 0;
      uint64_t v9 = *((void *)this + 845);
      do
      {
        bzero(*(void **)(v9 + v8), ((4 * *(unsigned __int8 *)(v9 + v8 + 8) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
        v8 += 24;
      }
      while (v8 != 168);
      bzero(*((void **)this + 860), ((4 * *((unsigned __int8 *)this + 6888) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      bzero(*((void **)this + 863), ((4 * *((unsigned __int8 *)this + 6912) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
      if (!(*(unsigned int (**)(void))(**((void **)this + 784) + 1040))()) {
        goto LABEL_23;
      }
      int v6 = (BlueFin::GlReqSm *)((char *)this + 40);
      int v7 = 18;
      goto LABEL_8;
    case 3:
      BlueFin::GlTimer::disarm((uint64_t)this + 53608);
      BlueFin::GlTimer::disarm((uint64_t)this + 53568);
      unint64_t result = 0;
      *((unsigned char *)this + 31744) = 0;
      return result;
    case 6:
    case 7:
    case 0xB:
    case 0x11:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x26:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
      return result;
    case 8:
      BlueFin::GlPeReqBag::TerminateRequest((uint64_t)this + 10880, *((BlueFin::GlRequestImpl **)this + 4148));
      BlueFin::GlPeReqBag::Cleanup((uint64_t)this + 10880);
      BlueFin::GlPePendingBag::TerminateRequest((uint64_t)this + 6496, *((BlueFin::GlRequestImpl **)this + 4148));
      if (*((__int16 *)this + 5132) > 0 || BlueFin::GlSetBase::HasAny((BlueFin::GlReqSm *)((char *)this + 11504))) {
        goto LABEL_23;
      }
      unint64_t result = 0;
      *((_DWORD *)this + 2712) = 0;
      break;
    case 9:
      *((_DWORD *)this + 2712) = 0;
      BlueFin::GlPePendingBag::TerminateAll((uint64_t)this + 6496);
      uint64_t v10 = (BlueFin::GlReqSm *)((char *)this + 10880);
      BlueFin::GlPeReqBag::TerminateAll(v10);
      BlueFin::GlPeReqBag::Cleanup((uint64_t)v10);
      goto LABEL_23;
    case 0xA:
      BlueFin::GlReqSm::SetAsstFromPend(this, 0, 0);
      goto LABEL_23;
    case 0xC:
      BlueFin::GlReqSm::ProcessChipData((__int16 *)this, a2);
      goto LABEL_23;
    case 0x12:
      if (!*(unsigned char *)(*((void *)this + 784) + 25964)) {
        goto LABEL_22;
      }
      goto LABEL_23;
    case 0x1F:
    case 0x25:
      if (((*(uint64_t (**)(void))(**((void **)this + 784) + 1040))(*((void *)this + 784)) & 1) == 0)
      {
        uint64_t v4 = *((void *)this + 4149);
        if (*(unsigned char *)(v4 + 296))
        {
          uint64_t v5 = *(void (**)(void, void))(v4 + 80);
          if (v5)
          {
            v5(*(void *)(v4 + 8), 0);
            *(unsigned char *)(v4 + 296) = 0;
            uint64_t v4 = *((void *)this + 4149);
          }
        }
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v4 + 80))(v4, 6, 0);
        GlCustomLog(11, "GlReqSm::communication breakdown at %s: %d. GLL will be restarted!\n", "standby", 4695);
      }
      int v6 = (BlueFin::GlReqSm *)((char *)this + 40);
      int v7 = 44;
LABEL_8:
      BlueFin::GlQueue::putFIFO(v6, v7, 0);
      goto LABEL_23;
    case 0x2C:
    case 0x36:
LABEL_22:
      BlueFin::QHsm::tran(this, (uint64_t (*)())BlueFin::GlReqSm::restart, (uint64_t)"&GlReqSm::restart");
LABEL_23:
      unint64_t result = 0;
      break;
    default:
      unint64_t result = BlueFin::QHsm::top;
      break;
  }
  return result;
}

uint64_t BlueFin::GlReqSm::ToggleCoexGpio(uint64_t this, int a2)
{
  if (*(unsigned char *)(*(void *)(this + 6272) + 26328))
  {
    uint64_t v2 = this;
    if (*(unsigned __int8 *)(this + 54901) != a2)
    {
      *(unsigned char *)(this + 54901) = a2;
      uint64_t v3 = "LOW";
      if (a2) {
        uint64_t v3 = "HIGH";
      }
      this = GlCustomLog(14, "GPS_FIX_STA toggle %s\n", v3);
      int v4 = *(_DWORD *)(*(void *)(v2 + 6272) + 88);
      if ((v4 - 37) >= 2)
      {
        if (v4 == 40)
        {
          int v6 = *(uint64_t (**)(void))(**(void **)(v2 + 312) + 576);
          return v6();
        }
      }
      else
      {
        this = *(void *)(*(void *)(v2 + 6264) + 48);
        if (this)
        {
          uint64_t v5 = *(uint64_t (**)(void))(*(void *)this + 112);
          return v5();
        }
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlReqSm::BypassLteFilter(BlueFin::GlReqSm *this, unsigned __int8 a2)
{
  v5[0] = 68;
  v5[1] = a2;
  uint64_t v3 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v6 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, v5, &v6)) {
      unint64_t result = v6;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, unsigned __int8 *))this + 4))(this, v5);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v3;
  return result;
}

unint64_t BlueFin::GlReqSm::UpdateLteFilter(BlueFin::GlReqSm *this)
{
  __int16 v4 = 71;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

unint64_t BlueFin::GlReqSm::UpdateL5HardwareDelayInMeters(BlueFin::GlReqSm *this)
{
  __int16 v4 = 72;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

unint64_t BlueFin::GlReqSm::UpdateL5DeltaHardwareDelayInMeters(BlueFin::GlReqSm *this)
{
  __int16 v4 = 73;
  uint64_t v2 = *((void *)this + 4);
  unint64_t result = *((void *)this + 1);
  *((void *)this + 4) = result;
  do
  {
    unint64_t v5 = 0;
    if (BlueFin::patch_dispatch(result, (uint64_t)this, (unsigned __int8 *)&v4, &v5)) {
      unint64_t result = v5;
    }
    else {
      unint64_t result = (*((uint64_t (**)(BlueFin::GlReqSm *, __int16 *))this + 4))(this, &v4);
    }
    *((void *)this + 4) = result;
  }
  while (result);
  *((void *)this + 4) = v2;
  return result;
}

uint64_t BlueFin::GlReqSm::SetMIAdjustmentFromApi(uint64_t this, int a2)
{
  uint64_t v2 = this + 33192;
  int v3 = *(_DWORD *)(this + 54584);
  if (v3)
  {
    if ((*(_DWORD *)(*(void *)(this + 6280) + 2568) - v3) >= 0x1771)
    {
      *(_WORD *)(this + 54588) = a2;
      LOBYTE(v3) = a2 != 0;
      uint64_t v4 = 1;
      goto LABEL_6;
    }
    LOBYTE(v3) = 0;
  }
  uint64_t v4 = 3;
LABEL_6:
  *(unsigned char *)(this + 54590) = v3;
  unint64_t v5 = *(uint64_t (**)(void, uint64_t))(*(void *)v2 + 288);
  if (v5) {
    return v5(*(void *)(*(void *)v2 + 8), v4);
  }
  return this;
}

uint64_t BlueFin::GlReqSm::ToggleNotchFilterConfig(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 6272);
  do
  {
    uint64_t v8 = v7 + v6;
    *(_WORD *)(v8 + 1104) = 0;
    *(_DWORD *)(v8 + 1108) = 0;
    v6 += 8;
  }
  while (v6 != 192);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)v7 + 328))(v7, a2, a3);
  if (v3)
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t result = GlCustomLog(15, "GlReqSm::Toggle Notch Filter %d Band %d FreqHz %d LC %d\n", v10++, *v4, *((_DWORD *)v4 + 1), v4[1]);
      v4 += 8;
    }
    while (v3 != v10);
  }
  *(unsigned char *)(a1 + 108) = 1;
  return result;
}

BOOL GlReqSm_lowPowerAllowed(unsigned char *a1)
{
  if (a1[3]) {
    BOOL v1 = a1[9] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1 && a1[11] != 0 && (char)a1[36] > 7;
}

uint64_t BlueFin::GlReqSm::SetDwellPeriodMs(BlueFin::GlReqSm *this, int a2, int a3)
{
  char v4 = a2;
  uint64_t v6 = (char *)this + 33425;
  uint64_t v7 = 70;
  if (a2) {
    uint64_t v7 = 84;
  }
  GlCustomLog(14, "GlReqSm::SetDwellPeriodMs: LMS:%u  bSet:%c  DwellPeriodMs:%d", *(_DWORD *)(*((void *)this + 785) + 2568), v7, a3);
  if (v4)
  {
    *(void *)(v6 + 71) = GlReqSm_lowPowerAllowed;
    BlueFin::GlPePwrStateMgr::EnableLowPower((BlueFin::GlReqSm *)((char *)this + 33216), 1u);
    *uint64_t v6 = 1;
    GlCustomLog(14, "GlPePwrStateMgr::EnablePedestrianLowPower %s\n", "True");
    BlueFin::GlPePwrStateMgr::EnableLowPower((BlueFin::GlReqSm *)((char *)this + 33216), 1u);
    unsigned int v8 = (5243
                      * ((unsigned __int16)(200 * ((21474837 * (unint64_t)(a3 + 100)) >> 32)) >> 3)) >> 17;
    if (!(200 * (unsigned __int16)((21474837 * (unint64_t)(a3 + 100)) >> 32))) {
      LOBYTE(v8) = 1;
    }
    GlCustomLog(14, "  DwellBlocks:%d\n", v8);
    uint64_t v9 = *(uint64_t (**)(void))(**((void **)this + 39) + 144);
    return v9();
  }
  else
  {
    *(void *)(v6 + 71) = 0;
    BlueFin::GlPePwrStateMgr::EnableLowPower((BlueFin::GlReqSm *)((char *)this + 33216), 0);
    return GlCustomLog(14, "\n");
  }
}

uint64_t BlueFin::GlReqSm::SetMeasurementIntervalSec(BlueFin::GlReqSm *this, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v6 = 70;
  if (a2) {
    uint64_t v6 = 84;
  }
  GlCustomLog(14, "GlReqSm::SetMeasurementIntervalSec: LMS:%u  bSet:%c  MeasurementIntervalSec:%d\n", *(_DWORD *)(*((void *)this + 785) + 2568), v6, a3);
  if (v3 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = v3;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**((void **)this + 39) + 152))(*((void *)this + 39), a2, 1, v3);
  *((unsigned char *)this + 54616) = v3;
  return result;
}

BlueFin::GlFormat *BlueFin::GlReqSm::ReportDump(BlueFin::GlReqSm *this)
{
  uint64_t v2 = (unsigned __int8 *)this + 31608;
  uint64_t v3 = (BlueFin::GlReqSm *)((char *)this + 54845);
  *(_OWORD *)((char *)this + 54845) = 0u;
  *(_OWORD *)((char *)this + 54861) = 0u;
  char v4 = (char *)this + 10880;
  BOOL HasAny = BlueFin::GlSetBase::HasAny((BlueFin::GlReqSm *)((char *)this + 11504));
  int v6 = *v2;
  int v7 = v2[40];
  int v8 = v2[80];
  int v9 = (*(uint64_t (**)(void))(**((void **)this + 784) + 1088))();
  int InternalWarmStandbyPeriodIfAllowed = BlueFin::GlPeReqBag::GetInternalWarmStandbyPeriodIfAllowed((uint64_t)v4);
  if (BlueFin::GlReqSm::ShouldTransitionToInternalWarmStandby(this, InternalWarmStandbyPeriodIfAllowed)) {
    uint64_t v12 = 73;
  }
  else {
    uint64_t v12 = 105;
  }
  uint64_t v13 = 111;
  if (v9) {
    uint64_t v13 = 79;
  }
  uint64_t v20 = v12;
  uint64_t v19 = v13;
  uint64_t v14 = 65;
  if (v8) {
    uint64_t v15 = 65;
  }
  else {
    uint64_t v15 = 97;
  }
  if (v7) {
    uint64_t v16 = 65;
  }
  else {
    uint64_t v16 = 97;
  }
  if (!v6) {
    uint64_t v14 = 97;
  }
  uint64_t v17 = 69;
  if (HasAny) {
    uint64_t v17 = 101;
  }
  BlueFin::GlFormat::glsnprintf(v3, (char *)0x20, "%c%c%c%c%c%c%c", v11, v17, v14, v16, v15, v19, 104, v20);
  return v3;
}

uint64_t BlueFin::GlReqSm::SetBlankingConfigOnTheFly(uint64_t a1, _DWORD *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v14 = 0;
  uint64_t v13 = 0;
  int v2 = a2[2];
  switch(*a2)
  {
    case 0:
      switch(a2[1])
      {
        case 1:
          int v3 = 1;
          goto LABEL_20;
        case 2:
          int v3 = 2;
          goto LABEL_20;
        case 3:
          int v3 = 3;
          goto LABEL_20;
        case 5:
          int v3 = 6;
          goto LABEL_20;
        case 6:
          int v3 = 7;
LABEL_20:
          LODWORD(v11) = v3;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    case 1:
      switch(a2[1])
      {
        case 1:
          int v7 = 1;
          goto LABEL_40;
        case 2:
          int v7 = 2;
          goto LABEL_40;
        case 3:
          int v7 = 3;
          goto LABEL_40;
        case 5:
          int v7 = 6;
          goto LABEL_40;
        case 6:
          int v7 = 7;
LABEL_40:
          HIDWORD(v11) = v7;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    case 2:
      switch(a2[1])
      {
        case 1:
          int v4 = 1;
          goto LABEL_25;
        case 2:
          int v4 = 2;
          goto LABEL_25;
        case 3:
          int v4 = 3;
          goto LABEL_25;
        case 5:
          int v4 = 6;
          goto LABEL_25;
        case 6:
          int v4 = 7;
LABEL_25:
          LODWORD(v12) = v4;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    case 3:
      switch(a2[1])
      {
        case 1:
          int v5 = 1;
          goto LABEL_30;
        case 2:
          int v5 = 2;
          goto LABEL_30;
        case 3:
          int v5 = 3;
          goto LABEL_30;
        case 5:
          int v5 = 6;
          goto LABEL_30;
        case 6:
          int v5 = 7;
LABEL_30:
          HIDWORD(v12) = v5;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    case 4:
      switch(a2[1])
      {
        case 1:
          int v6 = 1;
          goto LABEL_35;
        case 2:
          int v6 = 2;
          goto LABEL_35;
        case 3:
          int v6 = 3;
          goto LABEL_35;
        case 5:
          int v6 = 6;
          goto LABEL_35;
        case 6:
          int v6 = 7;
LABEL_35:
          LODWORD(v13) = v6;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    case 5:
      switch(a2[1])
      {
        case 1:
          int v8 = 1;
          goto LABEL_45;
        case 2:
          int v8 = 2;
          goto LABEL_45;
        case 3:
          int v8 = 3;
          goto LABEL_45;
        case 5:
          int v8 = 6;
          goto LABEL_45;
        case 6:
          int v8 = 7;
LABEL_45:
          HIDWORD(v13) = v8;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    case 6:
      switch(a2[1])
      {
        case 1:
          int v9 = 1;
          goto LABEL_50;
        case 2:
          int v9 = 2;
          goto LABEL_50;
        case 3:
          int v9 = 3;
          goto LABEL_50;
        case 5:
          int v9 = 6;
          goto LABEL_50;
        case 6:
          int v9 = 7;
LABEL_50:
          int v14 = v9;
          break;
        default:
          return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
      }
      break;
    default:
      return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
  }
  return (*(uint64_t (**)(void, uint64_t *, BOOL, void, void, void, void, void))(**(void **)(a1 + 312) + 120))(*(void *)(a1 + 312), &v11, v2 == 1, 0, 0, *(unsigned int *)(*(void *)(a1 + 6272) + 26004), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26008), *(unsigned __int16 *)(*(void *)(a1 + 6272) + 26010));
}

int32x4_t BlueFin::GlRequestImpl::GetHdlrParams(BlueFin::GlRequestImpl *this, BlueFin::GlPeReqHdlrParams *a2)
{
  *((_DWORD *)a2 + 2) = *((_DWORD *)this + 4);
  *((_WORD *)a2 + 6) = *((_WORD *)this + 11);
  *((void *)a2 + 2) = 100;
  *((void *)a2 + 3) = *(void *)((char *)this + 28);
  *((_WORD *)a2 + 16) = 0;
  int32x4_t result = vmovl_s16((int16x4_t)BlueFin::GlRequestImplPos::m_asSmartMaskAccyM_default);
  *(int32x4_t *)((char *)a2 + 36) = result;
  *(void *)((char *)a2 + 52) = 0x800AF005A001ELL;
  *(void *)((char *)a2 + 58) = 0xD0003000D0008;
  *((_DWORD *)a2 + 17) = 0;
  *((_DWORD *)a2 + 18) = 0;
  return result;
}

uint64_t BlueFin::GlRequestImplBreadcrumb::GetHdlrParams(BlueFin::GlRequestImplBreadcrumb *this, BlueFin::GlPeReqHdlrParams *a2)
{
  int32x4_t HdlrParams = BlueFin::GlRequestImpl::GetHdlrParams(this, a2);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplBreadcrumb *, int32x4_t))(*(void *)this + 184))(this, HdlrParams);
  *((_DWORD *)a2 + 5) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplPos::GetHdlrParams(BlueFin::GlRequestImplPos *this, BlueFin::GlPeReqHdlrParams *a2)
{
  int32x4_t HdlrParams = BlueFin::GlRequestImpl::GetHdlrParams(this, a2);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplPos *, int32x4_t))(*(void *)this + 152))(this, HdlrParams);
  uint64_t v6 = 0;
  *((_DWORD *)a2 + 4) = result;
  *(int32x4_t *)((char *)a2 + 36) = vmovl_s16(*(int16x4_t *)((char *)this + 84));
  do
  {
    *(_WORD *)((char *)a2 + v6 + 52) = *(_WORD *)((char *)this + v6 + 92);
    v6 += 2;
  }
  while (v6 != 14);
  return result;
}

uint64_t BlueFin::GlRequestImplPosPeriodic::GetHdlrParams(BlueFin::GlRequestImplPosPeriodic *this, BlueFin::GlPeReqHdlrParams *a2)
{
  BlueFin::GlRequestImplPos::GetHdlrParams(this, a2);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplPosPeriodic *))(*(void *)this + 184))(this);
  *((_DWORD *)a2 + 5) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplPosSingleShot::GetHdlrParams(BlueFin::GlRequestImplPosSingleShot *this, BlueFin::GlPeReqHdlrParams *a2)
{
  BlueFin::GlRequestImplPos::GetHdlrParams(this, a2);
  *((_WORD *)a2 + 16) = (*(uint64_t (**)(BlueFin::GlRequestImplPosSingleShot *))(*(void *)this + 200))(this);
  *((_DWORD *)a2 + 17) = *((unsigned __int8 *)this + 108) | (2 * *((unsigned __int8 *)this + 109)) | (4 * *((unsigned __int8 *)this + 110));
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplPosSingleShot *))(*(void *)this + 440))(this);
  *((_DWORD *)a2 + 19) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplMeas::GetHdlrParams(BlueFin::GlRequestImplMeas *this, BlueFin::GlPeReqHdlrParams *a2)
{
  int32x4_t HdlrParams = BlueFin::GlRequestImpl::GetHdlrParams(this, a2);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplMeas *, int32x4_t))(*(void *)this + 152))(this, HdlrParams);
  *((_DWORD *)a2 + 4) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplMeasPeriodic::GetHdlrParams(BlueFin::GlRequestImplMeasPeriodic *this, BlueFin::GlPeReqHdlrParams *a2)
{
  int32x4_t HdlrParams = BlueFin::GlRequestImpl::GetHdlrParams(this, a2);
  *((_DWORD *)a2 + 4) = (*(uint64_t (**)(BlueFin::GlRequestImplMeasPeriodic *, int32x4_t))(*(void *)this + 152))(this, HdlrParams);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplMeasPeriodic *))(*(void *)this + 184))(this);
  *((_DWORD *)a2 + 5) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplGnssMeasData::OnNavData(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  v5[0] = &unk_270EC5650;
  v5[1] = a2;
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    uint64_t result = off_270EC5668((uint64_t)v5, 0);
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88);
  if (v4) {
    return v4(v3, a2);
  }
  return result;
}

uint64_t BlueFin::GlRequestImplCollectEphemeris::GetHdlrParams(BlueFin::GlRequestImplCollectEphemeris *this, BlueFin::GlPeReqHdlrParams *a2)
{
  int32x4_t HdlrParams = BlueFin::GlRequestImpl::GetHdlrParams(this, a2);
  uint64_t result = (*(uint64_t (**)(BlueFin::GlRequestImplCollectEphemeris *, int32x4_t))(*(void *)this + 152))(this, HdlrParams);
  *((_DWORD *)a2 + 4) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GlRequestImplFactoryTest(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6, char a7, int a8, int a9, __int16 a10, __int16 a11, __int16 a12, __int16 a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,__int16 a25,__int16 a26,char a27,char a28,char a29,char a30,char a31)
{
  *(_DWORD *)(a1 + 16) = 8;
  *(_WORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 22) = -1;
  *(void *)(a1 + 28) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_270EC6510;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 228) = 0;
  *(_WORD *)(a1 + 236) = -255;
  *(unsigned char *)(a1 + 238) = -1;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 239) = 0u;
  *(_OWORD *)(a1 + 255) = 0u;
  *(_WORD *)(a1 + 271) = 0;
  *(_DWORD *)(a1 + 36) = a10;
  if (a29)
  {
    *(_DWORD *)(a1 + 232) = 0x2000000;
    int v32 = 34609152;
  }
  else
  {
    int v32 = 1054720;
  }
  if (a14)
  {
    *(_DWORD *)(a1 + 232) = v32;
    *(unsigned char *)(a1 + 272) = a14;
  }
  *(unsigned char *)(a1 + 88) = a4;
  if ((a5 + 7) >= 0xE) {
    char v33 = 0;
  }
  else {
    char v33 = a5 + 59;
  }
  *(unsigned char *)(a1 + 89) = v33;
  *(unsigned char *)(a1 + 90) = a6;
  *(unsigned char *)(a1 + 91) = a7;
  *(_DWORD *)(a1 + 92) = a8;
  *(_DWORD *)(a1 + 96) = a9;
  *(_WORD *)(a1 + 100) = a11;
  *(_WORD *)(a1 + 268) = a12;
  *(_WORD *)(a1 + 270) = a13;
  *(unsigned char *)(a1 + 273) = a15;
  *(unsigned char *)(a1 + 274) = a16;
  *(unsigned char *)(a1 + 276) = a20;
  *(unsigned char *)(a1 + 278) = a23;
  *(unsigned char *)(a1 + 279) = a24;
  *(unsigned char *)(a1 + 275) = a18;
  *(unsigned char *)(a1 + 277) = a22;
  if ((a25 + 7) >= 0xE) {
    char v34 = 0;
  }
  else {
    char v34 = a25 + 59;
  }
  *(unsigned char *)(a1 + 280) = v34;
  if ((a26 + 7) >= 0xE) {
    char v35 = 0;
  }
  else {
    char v35 = a26 + 59;
  }
  *(unsigned char *)(a1 + 281) = v35;
  *(unsigned char *)(a1 + 282) = a27;
  *(unsigned char *)(a1 + 283) = a31;
  BlueFin::GlRequestImplFactoryTest::Initialize(a1, a1 + 88);
  return a1;
}

uint64_t BlueFin::GlRequestImplFactoryTest::Initialize(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 88) = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 3);
  *(void *)(a1 + 92) = *(void *)(a2 + 4);
  *(_WORD *)(a1 + 100) = *(_WORD *)(a2 + 12);
  uint64_t result = BlueFin::GL_FACT_CW_PARAMS::Copy(a1 + 104, a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a2 + 164);
  *(_OWORD *)(a1 + 240) = v7;
  *(_WORD *)(a1 + 268) = *(_WORD *)(a2 + 180);
  *(_WORD *)(a1 + 270) = *(_WORD *)(a2 + 182);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 184);
  *(unsigned char *)(a1 + 273) = *(unsigned char *)(a2 + 185);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 186);
  *(unsigned char *)(a1 + 274) = v5;
  int v6 = *(unsigned __int8 *)(a2 + 187);
  *(unsigned char *)(a1 + 275) = v6;
  LODWORD(v7) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 276) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 192);
  *(unsigned char *)(a1 + 280) = v8;
  int v9 = *(unsigned __int8 *)(a2 + 193);
  *(unsigned char *)(a1 + 281) = v9;
  int v10 = *(unsigned __int8 *)(a2 + 194);
  *(unsigned char *)(a1 + 282) = v10;
  char v11 = *(unsigned char *)(a2 + 195);
  *(unsigned char *)(a1 + 283) = v11;
  *(_WORD *)(a1 + 22) = *(_DWORD *)(a1 + 36);
  int v12 = *(unsigned __int8 *)(a1 + 88);
  if ((v12 - 1) >= 0x20) {
    LOBYTE(v12) = -1;
  }
  *(unsigned char *)(a1 + 88) = v12;
  if (*(unsigned __int8 *)(a1 + 89) - 52 >= 0xE) {
    *(unsigned char *)(a1 + 89) = -1;
  }
  if ((v8 - 52) >= 0xE) {
    *(unsigned char *)(a1 + 280) = -1;
  }
  if ((v9 - 52) >= 0xE) {
    *(unsigned char *)(a1 + 281) = -1;
  }
  int v13 = *(unsigned __int8 *)(a1 + 90);
  unsigned int v14 = v13 - 1;
  char v15 = v13 + 75;
  if (v14 >= 0x3F) {
    char v15 = -1;
  }
  *(unsigned char *)(a1 + 90) = v15;
  int v16 = *(unsigned __int8 *)(a1 + 91);
  unsigned int v17 = v16 - 1;
  char v18 = v16 - 118;
  if (v17 >= 0x24) {
    char v18 = -1;
  }
  *(unsigned char *)(a1 + 91) = v18;
  if (v5 != 255)
  {
    int v19 = v6 - 1;
    char v20 = -118;
    switch(v19)
    {
      case 0:
        if (!v5) {
          goto LABEL_28;
        }
        if (v5 < 0x21) {
          goto LABEL_29;
        }
        if ((v5 + 63) > 9u) {
          goto LABEL_28;
        }
        LOBYTE(v5) = v5 - 127;
        goto LABEL_29;
      case 3:
        char v20 = -127;
        goto LABEL_22;
      case 4:
        char v20 = 75;
        goto LABEL_22;
      case 5:
        goto LABEL_22;
      case 6:
        char v20 = -82;
LABEL_22:
        LOBYTE(v5) = v20 + v5;
        if (!(_BYTE)v5) {
          goto LABEL_28;
        }
        if (v5 < 0x21u) {
          goto LABEL_29;
        }
        if (v5 < 0x8Bu)
        {
          if (v5 > 0x41u) {
            goto LABEL_29;
          }
        }
        else if (v5 < 0xBDu)
        {
          goto LABEL_29;
        }
LABEL_28:
        LOBYTE(v5) = -1;
LABEL_29:
        *(unsigned char *)(a1 + 274) = v5;
        break;
      default:
        DeviceFaultNotify("glrequest.cpp", 569, "Initialize", (char)"0");
        int v28 = 569;
        goto LABEL_47;
    }
  }
  unsigned __int32 v21 = vmovl_u8(*(uint8x8_t *)&v7).u32[0];
  if ((_BYTE)v21 != 0xFF)
  {
    if (HIWORD(v21) == 5)
    {
      char v22 = 75;
    }
    else
    {
      if (HIWORD(v21) != 6)
      {
        DeviceFaultNotify("glrequest.cpp", 624, "Initialize", (char)"0");
        int v28 = 624;
LABEL_47:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", v28, "0");
      }
      char v22 = -118;
    }
    char v23 = v22 + v21;
    if ((v22 + v21 - 76) >= 0x63u) {
      char v23 = -1;
    }
    *(unsigned char *)(a1 + 276) = v23;
  }
  if (v10 != 255)
  {
    unsigned int v24 = v10 - 1;
    char v25 = v10 - 82;
    if (v24 >= 0xE) {
      char v25 = -1;
    }
    *(unsigned char *)(a1 + 282) = v25;
  }
  unsigned int v26 = (v11 + 63);
  char v27 = v11 - 127;
  if (v26 >= 0xA) {
    char v27 = -1;
  }
  *(unsigned char *)(a1 + 283) = v27;
  return result;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GlRequestImplFactoryTest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, char a10)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0xFFFF000100000008;
  *(_WORD *)(a1 + 24) = -1;
  *(void *)(a1 + 28) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  int v16 = (unsigned char *)(a1 + 88);
  *(void *)a1 = &unk_270EC6510;
  *(_DWORD *)(a1 + 224) = 0;
  *(_WORD *)(a1 + 228) = 0;
  *(_WORD *)(a1 + 236) = -255;
  *(unsigned char *)(a1 + 238) = -1;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 239) = 0u;
  *(_OWORD *)(a1 + 255) = 0u;
  *(_DWORD *)(a1 + 36) = -1;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = -1;
  *(_WORD *)(a1 + 88) = -1;
  *(unsigned char *)(a1 + 90) = -1;
  *(unsigned char *)(a1 + 274) = -1;
  *(unsigned char *)(a1 + 276) = -1;
  *(_DWORD *)(a1 + 280) = -1;
  if ((a9 & 2) != 0)
  {
    *int v16 = 1;
  }
  else if ((a9 & 0x20) != 0)
  {
    *(unsigned char *)(a1 + 89) = 59;
  }
  else
  {
    long long v20 = xmmword_263BAA8BC;
    long long v21 = unk_263BAA8CC;
    v19[0] = 8;
    v19[1] = 0;
    while (1)
    {
      BlueFin::GlSetIterator::operator++((unsigned __int8 *)v19);
      if (BYTE1(v19[0]) == LOBYTE(v19[0])) {
        break;
      }
      if (BYTE2(v19[0]) - 81 <= 0x34)
      {
        *(unsigned char *)(a1 + 90) = BYTE2(v19[0]);
        break;
      }
    }
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_WORD *)(a1 + 237) = -1;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(void *)(a1 + 220) = 0;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_DWORD *)(a1 + 104) = a4;
  *(_DWORD *)(a1 + 144) = a5;
  *(_DWORD *)(a1 + 184) = a6;
  if (a7 && a8)
  {
    *(_DWORD *)(a1 + 224) = 0xF4240 / a7;
    *(_WORD *)(a1 + 228) = 0xF4240 / a8 / (0xF4240 / a7);
  }
  uint64_t v17 = 89;
  if ((a9 & 0x20) == 0) {
    uint64_t v17 = 90;
  }
  if ((a9 & 2) != 0) {
    uint64_t v17 = 88;
  }
  *(unsigned char *)(a1 + 236) = *(unsigned char *)(a1 + v17);
  *(_DWORD *)(a1 + 232) = a9 | 1;
  *(unsigned char *)(a1 + 239) = a10;
  BlueFin::GlRequestImplFactoryTest::Initialize(a1, (uint64_t)v16);
  return a1;
}

uint64_t BlueFin::GlRequestImplGeofence::Destroy(uint64_t this, uint64_t (*a2)(uint64_t))
{
  if (a2) {
    return a2(this);
  }
  return this;
}

unint64_t BlueFin::GlRequestImpl::Print(unint64_t this, unsigned __int8 a2, const char *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        long long v7 = 0uLL;
        memset(v13, 0, sizeof(v13));
        if (*(int *)(v5 + 36) >= 1)
        {
          BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v13, (char *)0x20, " Duration=%ds", v6, *(unsigned int *)(v5 + 36));
          long long v7 = 0uLL;
        }
        v12[0] = v7;
        v12[1] = v7;
        if (*(__int16 *)(v5 + 22) >= 1) {
          BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v12, (char *)0x20, " timeout=%ds", v6, *(unsigned __int16 *)(v5 + 22));
        }
        int v8 = BlueFin::GlRequestImpl::GlRequestTypeToString((BlueFin::GlRequestImpl *)v5);
        uint64_t v9 = 80;
        if (!*(void *)(v5 + 56)) {
          uint64_t v9 = 112;
        }
        uint64_t v10 = 82;
        if (!*(void *)(v5 + 48)) {
          uint64_t v10 = 114;
        }
        uint64_t v11 = 83;
        if (!*(void *)(v5 + 40)) {
          uint64_t v11 = 115;
        }
        return GlCustomLog(a2, "%s(%hu) ET=%0.3fs cb=(%c%c%c)%s%s %s\n", v8, *(unsigned __int16 *)(v5 + 24), (float)(*(_DWORD *)(BlueFin::GlUtils::m_pInstance + 1092) - *(_DWORD *)(v5 + 28))/ 1000.0, v11, v10, v9, (const char *)v13, (const char *)v12, a3);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlRequestImplTimer::Print(uint64_t this, unsigned __int8 a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        if (*(void *)(v3 + 64)) {
          uint64_t v5 = (const char *)&str_8_26;
        }
        else {
          uint64_t v5 = "!";
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v6, (char *)0x28, "%scbTimer TO=%ums X %u", v4, v5, *(unsigned int *)(v3 + 76), *(unsigned int *)(v3 + 72));
        return BlueFin::GlRequestImpl::Print(v3, a2, v6);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlRequestImplNmea::Print(uint64_t this, unsigned __int8 a2, const char *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        if (*(void *)(v5 + 72)) {
          uint64_t v7 = (const char *)&str_8_26;
        }
        else {
          uint64_t v7 = "!";
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v8, (char *)0xC8, "%scbNmea %s", v6, v7, a3);
        return BlueFin::GlRequestImpl::Print(v5, a2, v8);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlRequestImplCntin::Print(BlueFin::GlRequestImplCntin *this, unsigned __int8 a2)
{
  if (*((void *)this + 10)) {
    int v2 = "cbCntin";
  }
  else {
    int v2 = "!cbCntin";
  }
  return BlueFin::GlRequestImplNmea::Print((uint64_t)this, a2, v2);
}

unint64_t BlueFin::GlRequestImplFactoryTest::Print(unint64_t this, unsigned __int8 a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        int v4 = (const char *)&str_8_26;
        if (*(void *)(v3 + 80)) {
          unint64_t v5 = (const char *)&str_8_26;
        }
        else {
          unint64_t v5 = "!";
        }
        int v6 = *(unsigned __int8 *)(v3 + 275);
        char v7 = v6 - 1;
        if (v6 - 1) < 6 && ((0x39u >> v7))
        {
          int v4 = off_2655E04D8[v7];
        }
        else if (v6 == 7)
        {
          int v4 = "NIC";
        }
        int v8 = "true";
        if (*(unsigned char *)(v3 + 272)) {
          uint64_t v9 = "true";
        }
        else {
          uint64_t v9 = "false";
        }
        if (*(unsigned char *)(v3 + 273)) {
          uint64_t v10 = "true";
        }
        else {
          uint64_t v10 = "false";
        }
        if ((*(_DWORD *)(v3 + 232) & 0x2000000) == 0) {
          int v8 = "false";
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v11, (char *)0x200, "%scbFactTest SVID(GPS%hd,GLO%hd,BDS%hd,GAL%hd,%sL5a%hd,GLO2%hd,GLO3%hd,NIC%hd,QZSS%hd) items=%d mode=%d DisableFreqOffset=%s EnableExtendedCw=%s 5HzCW=%s", (const char *)*(unsigned int *)(v3 + 92), v5, *(unsigned __int8 *)(v3 + 88), *(unsigned __int8 *)(v3 + 89), *(unsigned __int8 *)(v3 + 90), *(unsigned __int8 *)(v3 + 91), v4, *(unsigned __int8 *)(v3 + 274), *(unsigned __int8 *)(v3 + 280), *(unsigned __int8 *)(v3 + 281), *(unsigned __int8 *)(v3 + 282), *(unsigned __int8 *)(v3 + 283), *(unsigned int *)(v3 + 92), *(unsigned int *)(v3 + 96), v9,
          v10,
          v8);
        return BlueFin::GlRequestImplNmea::Print(v3, a2, v11);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplPos::Print(unint64_t this, unsigned __int8 a2, const char *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v5 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        v7[0] = 0;
        if (*(_DWORD *)(v5 + 80) == -1) {
          BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v7, (char *)0x64, " acc=SmartMask %s", v6, a3);
        }
        else {
          BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v7, (char *)0x64, " acc=%d %s", v6, *(unsigned int *)(v5 + 80), a3);
        }
        return BlueFin::GlRequestImplNmea::Print(v5, a2, v7);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlRequestImplPosSingleShot::Print(uint64_t this, unsigned __int8 a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        if (*(unsigned char *)(v3 + 109)) {
          uint64_t v5 = "Set";
        }
        else {
          uint64_t v5 = "UnSet";
        }
        int v6 = "On";
        if (!*(unsigned char *)(v3 + 110)) {
          int v6 = "Off";
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v7, (char *)0x64, " age=%hu EmergencyReq=%s EarlyExit=%s VerAccacc=%d", v4, *(unsigned __int16 *)(v3 + 106), v5, v6, *(unsigned int *)(v3 + 116));
        return BlueFin::GlRequestImplPos::Print(v3, a2, v7);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplMeasData::Print(unint64_t this, unsigned __int8 a2)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        return BlueFin::GlRequestImplNmea::Print(v3, a2, (const char *)&str_8_26);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplComStressTest::Print(unint64_t this, unsigned __int8 a2)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        return BlueFin::GlRequestImplNmea::Print(v3, a2, (const char *)&str_8_26);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplMeas::Print(unint64_t this, unsigned __int8 a2, const char *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v5 = (unsigned __int8 *)this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        int v6 = v5[88];
        if (v5[89]) {
          char v7 = " preferCoarseTime";
        }
        else {
          char v7 = (const char *)&str_8_26;
        }
        uint64_t v10 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v5 + 152))(v5);
        uint64_t v9 = 69;
        if (!v6) {
          uint64_t v9 = 65;
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v11, (char *)0x64, " MS-%c%s acc=%dm %s", v8, v9, v7, v10, a3);
        return BlueFin::GlRequestImplNmea::Print((uint64_t)v5, a2, v11);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlRequestImplMeasPeriodic::Print(uint64_t this, unsigned __int8 a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v5, (char *)0x32, " per=%u", v4, *(unsigned int *)(v3 + 96));
        return BlueFin::GlRequestImplMeas::Print(v3, a2, v5);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlRequestImplMeasSingleShot::Print(uint64_t this, unsigned __int8 a2)
{
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    unint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        return BlueFin::GlRequestImplMeas::Print(v3, a2, (const char *)&str_8_26);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplPlatformTest::Print(unint64_t this, unsigned __int8 a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        int v4 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 536))(v3);
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v6, (char *)0x32, " test=%d p0=%d p1=%d p2=%d p3=%d p4=%d p5=%d", v5, *v4, v4[1], v4[2], v4[3], v4[4], v4[5], v4[6]);
        return BlueFin::GlRequestImplNmea::Print(v3, a2, v6);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplGetGpsData::Print(unint64_t this, unsigned __int8 a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v5, (char *)0x32, "data=0x%x", v4, *(unsigned int *)(v3 + 88));
        return BlueFin::GlRequestImplNmea::Print(v3, a2, v5);
      }
    }
  }
  return this;
}

unint64_t BlueFin::GlRequestImplGeofence::Print(unint64_t this, unsigned __int8 a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (BlueFin::GlUtils::m_ucEnabled)
  {
    uint64_t v3 = this;
    this = BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)a2);
    if (this)
    {
      if (((1 << (a2 >> 3)) & 0x2000800E) != 0)
      {
        uint64_t v5 = "Out";
        int v6 = *(_DWORD *)(v3 + 108);
        if (v6 == 1) {
          uint64_t v5 = "In";
        }
        if (v6 == 4) {
          uint64_t v5 = "Unknown";
        }
        uint64_t v7 = "Uni";
        if (*(unsigned char *)(v3 + 112)) {
          uint64_t v7 = "I";
        }
        BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v8, (char *)0x3E8, "Geofence{%.6f,%.6f r=%um %sside %snit}", v4, *(void *)(v3 + 88), *(void *)(v3 + 96), *(unsigned int *)(v3 + 104), v5, v7);
        return BlueFin::GlRequestImplNmea::Print(v3, a2, v8);
      }
    }
  }
  return this;
}

uint64_t BlueFin::GL_FACT_CW_PARAMS::Copy(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 40; i != 80; i += 4)
  {
    uint64_t v3 = (_DWORD *)(result + i);
    *(v3 - 10) = *(_DWORD *)(a2 + i - 40);
    *uint64_t v3 = *(_DWORD *)(a2 + i);
    v3[10] = *(_DWORD *)(a2 + i + 40);
  }
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 120);
  *(_WORD *)(result + 124) = *(_WORD *)(a2 + 124);
  *(unsigned char *)(result + 132) = *(unsigned char *)(a2 + 132);
  *(unsigned char *)(result + 133) = *(unsigned char *)(a2 + 133);
  *(unsigned char *)(result + 134) = *(unsigned char *)(a2 + 134);
  *(_DWORD *)(result + 128) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(result + 135) = *(unsigned char *)(a2 + 135);
  return result;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetFreqScanParams(uint64_t a1, uint64_t a2)
{
  return BlueFin::GL_FACT_CW_PARAMS::Copy(a2, a1 + 104);
}

__n128 BlueFin::GlRequestImplPlatformTest::GlRequestImplPlatformTest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 16) = 11;
  *(_WORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 22) = -1;
  *(void *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 36) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)a1 = &unk_270EC6748;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 220) = 0;
  *(void *)(a1 + 86) = 0;
  *(_WORD *)(a1 + 228) = -255;
  *(unsigned char *)(a1 + 230) = -1;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 231) = 0u;
  *(_OWORD *)(a1 + 247) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  __n128 result = *(__n128 *)a4;
  *(_OWORD *)(a1 + 244) = *(_OWORD *)(a4 + 12);
  *(__n128 *)(a1 + 232) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplBreadcrumb::GetPeriodMs(BlueFin::GlRequestImplBreadcrumb *this, double a2)
{
  LODWORD(a2) = *((_DWORD *)this + 41);
  double v2 = (double)*(unint64_t *)&a2 * 1000.0;
  double v3 = fmod(v2, 4294967300.0);
  if (v2 <= 4294967300.0) {
    double v3 = v2;
  }
  if (v3 < -4294967300.0) {
    double v3 = -fmod(-v3, 4294967300.0);
  }
  if (v3 < 0.0) {
    return --v3;
  }
  else {
    return v3;
  }
}

uint64_t BlueFin::GlRequestImplBreadcrumb::ReportBatchOptions(BlueFin::GlRequestImplBreadcrumb *this, int a2)
{
  double v2 = "Immediate";
  if (a2) {
    double v2 = "Pending";
  }
  int v3 = *((_DWORD *)this + 43);
  int v4 = " ON_FIFO_FULL";
  if ((v3 & 1) == 0) {
    int v4 = (const char *)&str_8_26;
  }
  uint64_t v5 = " ON_LOCATION_FIX";
  if ((v3 & 2) == 0) {
    uint64_t v5 = (const char *)&str_8_26;
  }
  int v6 = " ON_STOP";
  if ((v3 & 0x40) == 0) {
    int v6 = (const char *)&str_8_26;
  }
  uint64_t v7 = " WAKEUP_FIRST_FIX";
  if ((v3 & 0x400) == 0) {
    uint64_t v7 = (const char *)&str_8_26;
  }
  if ((v3 & 0x1000) != 0) {
    uint64_t v8 = " WAKEUP_INDOOR";
  }
  else {
    uint64_t v8 = (const char *)&str_8_26;
  }
  return GlCustomLog(14, "Update %s BatchOptions %s%s%s%s%s\n", v2, v4, v5, v6, v7, v8);
}

uint64_t BlueFin::GlRequestImplFactoryTest::Create(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, char a10)
{
  if (!a1)
  {
    DeviceFaultNotify("glrequest.cpp", 1165, "Create", (char)"pvBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1165, "pvBuffer != nullptr");
  }

  return BlueFin::GlRequestImplFactoryTest::GlRequestImplFactoryTest(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t BlueFin::GlRequestImplFactoryTest::Create(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, char a6, char a7, int a8, int a9, __int16 a10, __int16 a11, __int16 a12, __int16 a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,__int16 a25,__int16 a26,char a27,char a28,char a29,char a30,char a31)
{
  if (!a1)
  {
    DeviceFaultNotify("glrequest.cpp", 1174, "Create", (char)"pvBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1174, "pvBuffer != nullptr");
  }

  return BlueFin::GlRequestImplFactoryTest::GlRequestImplFactoryTest(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

__n128 BlueFin::GlRequestImplComStressTest::Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, __n128 *a6)
{
  if (!a1)
  {
    DeviceFaultNotify("glrequest.cpp", 1241, "Create", (char)"pvBuffer != nullptr");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glrequest.cpp", 1241, "pvBuffer != nullptr");
  }
  *(_DWORD *)(a1 + 16) = 16;
  *(_WORD *)(a1 + 20) = 1;
  *(_WORD *)(a1 + 24) = -1;
  *(void *)(a1 + 28) = -1;
  *(_DWORD *)(a1 + 36) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a4;
  *(void *)a1 = &unk_270EC7C18;
  *(void *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 22) = a5;
  __n128 result = *a6;
  *(__n128 *)(a1 + 88) = *a6;
  return result;
}

uint64_t BlueFin::GlRequestImpl::StopAfter(uint64_t this, int a2, int a3, int a4)
{
  if ((a4 & 0x80000000) == 0)
  {
    *(_WORD *)(this + 22) = a4;
    *(_DWORD *)(this + 36) = a4;
  }
  return this;
}

uint64_t BlueFin::GlRequestImpl::SetUserData(uint64_t this, void *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

uint64_t BlueFin::GlRequestImpl::GetAccuracyMeters(BlueFin::GlRequestImpl *this)
{
  return 100;
}

uint64_t BlueFin::GlRequestImpl::GetMaxValidFixCount(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetMaxTotalFixCount(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetMaxNbSyncinMeas(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetPeriodMs(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetNumTimerEvents(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetMaxLocAgeSec(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::IsEnhancedEnabled(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::IsCoarseTimePreferred(BlueFin::GlRequestImpl *this)
{
  return 0;
}

void BlueFin::GlRequestImpl::GetGpsFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetGloFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetGloFactTestSvId2(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetGloFactTestSvId3(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetBdsFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetGalFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetL5aFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetL5bFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetNicFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

void BlueFin::GlRequestImpl::GetQzssFactTestSvId(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

uint64_t BlueFin::GlRequestImpl::GetFactTestAvgIntrvlSec(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetFactTestIntegTimeSec(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetFactTestNeglectIQSec(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::IsFreqOffsetDisable(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::IsExtendedCwTest(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetTestItems(BlueFin::GlRequestImpl *this)
{
  return 8;
}

uint64_t BlueFin::GlRequestImpl::GetTestMode(BlueFin::GlRequestImpl *this)
{
  return 2;
}

uint64_t BlueFin::GlRequestImpl::GetSmartMaskToutS()
{
  return 0xFFFFFFFFLL;
}

uint64_t BlueFin::GlRequestImpl::GetSmartMaskAccyM()
{
  return 0xFFFFFFFFLL;
}

uint64_t BlueFin::GlRequestImpl::IsEarlyExitFlagUnset(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetHulaPosSource(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetVerAccuracyMeters(BlueFin::GlRequestImpl *this)
{
  return 7;
}

uint64_t BlueFin::GlRequestImpl::IsHostSwitching(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::IsWaitingForFlush(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::HasOnNmea(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetGsvRate(BlueFin::GlRequestImpl *this)
{
  return 0;
}

uint64_t BlueFin::GlRequestImpl::GetPlatformTestParams(BlueFin::GlRequestImpl *this)
{
  return 0;
}

void BlueFin::GlRequestImplTimer::~GlRequestImplTimer(BlueFin::GlRequestImplTimer *this)
{
}

uint64_t BlueFin::GlRequestImplTimer::SetOnTimer(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t BlueFin::GlRequestImplTimer::GetPeriodMs(BlueFin::GlRequestImplTimer *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t BlueFin::GlRequestImplTimer::GetNumTimerEvents(BlueFin::GlRequestImplTimer *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t BlueFin::GlRequestImplTimer::SetNumTimerEvents(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t BlueFin::GlRequestImplNmea::SetGsvRate(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 64) = a2;
  return this;
}

uint64_t BlueFin::GlRequestImplPos::GetSmartMaskToutS(uint64_t a1, unsigned int a2)
{
  return *(__int16 *)(a1 + 2 * a2 + 92);
}

void BlueFin::GlRequestImplPosPeriodic::~GlRequestImplPosPeriodic(BlueFin::GlRequestImplPosPeriodic *this)
{
}

uint64_t BlueFin::GlRequestImplPosPeriodic::StopAfter(uint64_t this, int a2, int a3, int a4)
{
  *(_DWORD *)(this + 112) = a2;
  *(_DWORD *)(this + 116) = a3;
  if ((a4 & 0x80000000) == 0)
  {
    *(_WORD *)(this + 22) = a4;
    *(_DWORD *)(this + 36) = a4;
  }
  return this;
}

void BlueFin::GlRequestImplPosSingleShot::~GlRequestImplPosSingleShot(BlueFin::GlRequestImplPosSingleShot *this)
{
}

uint64_t BlueFin::GlRequestImplPosSingleShot::GetMaxLocAgeSec(BlueFin::GlRequestImplPosSingleShot *this)
{
  return *((unsigned __int16 *)this + 53);
}

uint64_t BlueFin::GlRequestImplPosSingleShot::IsEnhancedEmergencyRequest(BlueFin::GlRequestImplPosSingleShot *this)
{
  return *((unsigned __int8 *)this + 109);
}

uint64_t BlueFin::GlRequestImplPosSingleShot::ClearEnhancedEmergencyTag(uint64_t this)
{
  *(unsigned char *)(this + 109) = 0;
  return this;
}

BOOL BlueFin::GlRequestImplPosSingleShot::IsEarlyExitFlagUnset(BlueFin::GlRequestImplPosSingleShot *this)
{
  return *((unsigned char *)this + 110) == 0;
}

uint64_t BlueFin::GlRequestImplPosSingleShot::UpdateHulaPosSource(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 112) | a2;
  if ((~v2 & 3) == 0) {
    v2 &= ~1u;
  }
  if ((v2 & 0xC) != 0 && (v2 & 0x18000) != 0) {
    v2 &= 0xFFFE7FFF;
  }
  if ((~v2 & 0x18000) == 0) {
    v2 &= ~0x10000u;
  }
  *(_DWORD *)(this + 112) = v2;
  return this;
}

uint64_t BlueFin::GlRequestImplPosSingleShot::GetHulaPosSource(BlueFin::GlRequestImplPosSingleShot *this)
{
  return *((unsigned int *)this + 28);
}

uint64_t BlueFin::GlRequestImplPosSingleShot::GetVerAccuracyMeters(BlueFin::GlRequestImplPosSingleShot *this)
{
  int v1 = *((_DWORD *)this + 29);
  if (v1 <= 0) {
    return 7;
  }
  else {
    return v1;
  }
}

void BlueFin::GlRequestImplGeofence::~GlRequestImplGeofence(BlueFin::GlRequestImplGeofence *this)
{
}

__n128 BlueFin::GlRequestImplGeofence::SetGeofenceData(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 104) = v3;
  *(__n128 *)(a1 + 88) = result;
  return result;
}

uint64_t BlueFin::GlRequestImplMeas::SetOnSIGMeasurement(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t BlueFin::GlRequestImplMeas::GetAccuracyMeters(BlueFin::GlRequestImplMeas *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t BlueFin::GlRequestImplMeas::IsEnhancedEnabled(BlueFin::GlRequestImplMeas *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t BlueFin::GlRequestImplMeas::IsCoarseTimePreferred(BlueFin::GlRequestImplMeas *this)
{
  return *((unsigned __int8 *)this + 89);
}

uint64_t BlueFin::GlRequestImplMeas::SetEnhancedEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 88) = a2;
  return this;
}

void BlueFin::GlRequestImplMeasSingleShot::~GlRequestImplMeasSingleShot(BlueFin::GlRequestImplMeasSingleShot *this)
{
}

uint64_t BlueFin::GlRequestImplMeasSingleShot::GetPeriodMs(BlueFin::GlRequestImplMeasSingleShot *this)
{
  return 0;
}

void BlueFin::GlRequestImplMeasPeriodic::~GlRequestImplMeasPeriodic(BlueFin::GlRequestImplMeasPeriodic *this)
{
}

uint64_t BlueFin::GlRequestImplMeasPeriodic::GetPeriodMs(BlueFin::GlRequestImplMeasPeriodic *this)
{
  return *((unsigned int *)this + 24);
}

void BlueFin::GlRequestImplMeasData::~GlRequestImplMeasData(BlueFin::GlRequestImplMeasData *this)
{
}

void BlueFin::GlRequestImplGnssMeasData::~GlRequestImplGnssMeasData(BlueFin::GlRequestImplGnssMeasData *this)
{
}

void BlueFin::GlRequestImplComStressTest::~GlRequestImplComStressTest(BlueFin::GlRequestImplComStressTest *this)
{
}

uint64_t BlueFin::GlRequestImplComStressTest::Destroy(uint64_t this, uint64_t (*a2)(uint64_t))
{
  if (a2) {
    return a2(this);
  }
  return this;
}

void BlueFin::GlRequestImplSyncin::~GlRequestImplSyncin(BlueFin::GlRequestImplSyncin *this)
{
}

uint64_t BlueFin::GlRequestImplSyncin::StopAfter(uint64_t this, int a2, int a3, int a4, __int16 a5)
{
  *(_WORD *)(this + 112) = a5;
  if ((a4 & 0x80000000) == 0)
  {
    *(_WORD *)(this + 22) = a4;
    *(_DWORD *)(this + 36) = a4;
  }
  return this;
}

uint64_t BlueFin::GlRequestImplSyncin::GetMaxNbSyncinMeas(BlueFin::GlRequestImplSyncin *this)
{
  return *((__int16 *)this + 56);
}

void BlueFin::GlRequestImplCntin::~GlRequestImplCntin(BlueFin::GlRequestImplCntin *this)
{
}

uint64_t BlueFin::GlRequestImplCntin::SetOnCntin(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t BlueFin::GlRequestImplCntin::OnCntin(uint64_t result)
{
  int v1 = *(uint64_t (**)(void))(result + 80);
  if (v1) {
    return v1();
  }
  return result;
}

void BlueFin::GlRequestImplGetGpsData::~GlRequestImplGetGpsData(BlueFin::GlRequestImplGetGpsData *this)
{
}

void BlueFin::GlRequestImplCollectEphemeris::~GlRequestImplCollectEphemeris(BlueFin::GlRequestImplCollectEphemeris *this)
{
}

uint64_t BlueFin::GlRequestImplCollectEphemeris::Print(BlueFin::GlRequestImplCollectEphemeris *this, unsigned __int8 a2)
{
  return BlueFin::GlRequestImplNmea::Print((uint64_t)this, a2, (const char *)&str_8_26);
}

uint64_t BlueFin::GlRequestImplCollectEphemeris::GetAccuracyMeters(BlueFin::GlRequestImplCollectEphemeris *this)
{
  return *((unsigned int *)this + 20);
}

void BlueFin::GlRequestImplBreadcrumb::~GlRequestImplBreadcrumb(BlueFin::GlRequestImplBreadcrumb *this)
{
}

uint64_t BlueFin::GlRequestImplBreadcrumb::SetOnExerciseMeasurement(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

uint64_t BlueFin::GlRequestImplBreadcrumb::Print(BlueFin::GlRequestImplBreadcrumb *this, unsigned __int8 a2)
{
  return BlueFin::GlRequestImplNmea::Print((uint64_t)this, a2, (const char *)&str_8_26);
}

uint64_t BlueFin::GlRequestImplBreadcrumb::SetHostSwitching(uint64_t this, char a2)
{
  *(unsigned char *)(this + 194) = a2;
  return this;
}

uint64_t BlueFin::GlRequestImplBreadcrumb::IsHostSwitching(BlueFin::GlRequestImplBreadcrumb *this)
{
  return *((unsigned __int8 *)this + 194);
}

uint64_t BlueFin::GlRequestImplBreadcrumb::IsWaitingForFlush(BlueFin::GlRequestImplBreadcrumb *this)
{
  return *((unsigned __int8 *)this + 196);
}

uint64_t BlueFin::GlRequestImplBreadcrumb::SetInterpolationNeeded(uint64_t this, char a2)
{
  *(unsigned char *)(this + 195) = a2;
  return this;
}

BOOL BlueFin::GlRequestImplBreadcrumb::GetInterpolationNeeded(BlueFin::GlRequestImplBreadcrumb *this)
{
  return *((unsigned char *)this + 194) && *((unsigned char *)this + 195) && *((_DWORD *)this + 41) == 1;
}

void BlueFin::GlRequestImplFactoryTest::~GlRequestImplFactoryTest(BlueFin::GlRequestImplFactoryTest *this)
{
}

uint64_t BlueFin::GlRequestImplFactoryTest::SetOnFactTest(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetGpsFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 88);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetGloFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 89);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetGloFactTestSvId2@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 280);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetGloFactTestSvId3@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 281);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetBdsFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 90);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetGalFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 91);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetL5aFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 274);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetL5bFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 276);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetNicFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 282);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetQzssFactTestSvId@<X0>(uint64_t this@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(this + 283);
  return this;
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetFactTestAvgIntrvlSec(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((__int16 *)this + 50);
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetFactTestIntegTimeSec(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((__int16 *)this + 134);
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetFactTestNeglectIQSec(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((__int16 *)this + 135);
}

uint64_t BlueFin::GlRequestImplFactoryTest::IsFreqOffsetDisable(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((unsigned __int8 *)this + 272);
}

uint64_t BlueFin::GlRequestImplFactoryTest::IsExtendedCwTest(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((unsigned __int8 *)this + 273);
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetTestItems(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t BlueFin::GlRequestImplFactoryTest::GetTestMode(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((unsigned int *)this + 24);
}

BOOL BlueFin::GlRequestImplFactoryTest::HasOnFactTest(BlueFin::GlRequestImplFactoryTest *this)
{
  return *((void *)this + 10) != 0;
}

void BlueFin::GlRequestImplPlatformTest::~GlRequestImplPlatformTest(BlueFin::GlRequestImplPlatformTest *this)
{
}

uint64_t BlueFin::GlRequestImplPlatformTest::GetPlatformTestParams(BlueFin::GlRequestImplPlatformTest *this)
{
  return (uint64_t)this + 232;
}

void BlueFin::GlRequestImplAssistanceStatus::~GlRequestImplAssistanceStatus(BlueFin::GlRequestImplAssistanceStatus *this)
{
}

uint64_t BlueFin::GlRequestImplAssistanceStatus::Print(BlueFin::GlRequestImplAssistanceStatus *this, unsigned __int8 a2)
{
  return BlueFin::GlRequestImplNmea::Print((uint64_t)this, a2, (const char *)&str_8_26);
}

BlueFin::GlRequestImplBreadcrumb *BlueFin::GlRequestImplBreadcrumb::GlRequestImplBreadcrumb(BlueFin::GlRequestImplBreadcrumb *this, uint64_t a2, uint64_t a3, __int16 a4, int a5, int a6, int a7, uint64_t a8)
{
  *((_DWORD *)this + 4) = 13;
  *((_WORD *)this + 10) = 1;
  *(_DWORD *)((char *)this + 22) = -1;
  *(void *)((char *)this + 28) = -1;
  *((_DWORD *)this + 9) = -1;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)this + 32) = 1;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *(void *)this = &unk_270EC8780;
  *((void *)this + 1) = a2;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 41) = a5;
  *((_DWORD *)this + 42) = a6;
  *((_DWORD *)this + 43) = a7;
  *((void *)this + 22) = a8;
  *((void *)this + 23) = 0;
  *((_WORD *)this + 96) = a4;
  *(_DWORD *)((char *)this + 194) = 0;
  if (!a5) {
    *((_DWORD *)this + 41) = 10;
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((_DWORD *)this + 26) = -7200001;
  BlueFin::GlRequestImplBreadcrumb::ReportBatchOptions(this, 0);
  return this;
}

uint64_t BlueFin::GlRequestImplGeofence::GlRequestImplGeofence(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, double a9, double a10, double a11, int a12, uint64_t a13)
{
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = 0xFFFF00010000000CLL;
  *(_WORD *)(result + 24) = -1;
  *(void *)(result + 28) = -1;
  *(_DWORD *)(result + 36) = -1;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 40) = a3;
  *(_WORD *)(result + 64) = 1;
  *(void *)(result + 72) = 0;
  *(void *)__n128 result = &unk_270EC7098;
  *(_DWORD *)(result + 80) = a4;
  *(double *)(result + 88) = a9;
  *(double *)(result + 96) = a10;
  *(_DWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 108) = a5;
  *(unsigned char *)(result + 112) = 0;
  *(_DWORD *)(result + 116) = a6;
  *(_DWORD *)(result + 120) = a7;
  *(_DWORD *)(result + 124) = a8;
  *(_DWORD *)(result + 128) = a12;
  if ((int)a11 >= 1) {
    *(_DWORD *)(result + 104) = (int)a11;
  }
  *(unsigned char *)(result + 136) = 0;
  *(void *)(result + 144) = a13;
  return result;
}

BlueFin::GlRequestImplPos *BlueFin::GlRequestImplPosSingleShot::GlRequestImplPosSingleShot(BlueFin::GlRequestImplPos *this, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int *a8, unsigned __int16 a9, __int16 *a10, char a11, char a12, char a13, int a14)
{
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = 1;
  *((_WORD *)this + 10) = 1;
  *((_WORD *)this + 12) = -1;
  *(void *)((char *)this + 28) = -1;
  *((_DWORD *)this + 9) = -1;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = a3;
  *((_WORD *)this + 32) = 1;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = a6;
  *((_WORD *)this + 11) = a5;
  *(void *)((char *)this + 92) = 0;
  *(void *)((char *)this + 84) = 0;
  *(void *)((char *)this + 98) = 0;
  *(void *)this = &unk_270EC6E50;
  *((_WORD *)this + 53) = a4;
  *((unsigned char *)this + 108) = a11;
  *((unsigned char *)this + 109) = a12;
  *((unsigned char *)this + 110) = a13;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 29) = a14;
  if (!a4 && a5 >= 1) {
    *((_WORD *)this + 53) = a5;
  }
  BlueFin::GlRequestImplPos::InitSmartMask((uint64_t)this, a9, a10, a7, a8);
  return this;
}

BOOL BlueFin::getRotationMatrix(BlueFin *this, float *a2, float *a3, float *a4)
{
  float v4 = *a2;
  float v5 = a2[1];
  float v6 = a2[2];
  float v7 = a3[1];
  float v8 = a3[2];
  float v9 = (float)(v7 * v6) - (float)(v8 * v5);
  float v10 = (float)(v8 * *a2) - (float)(*a3 * v6);
  float v11 = (float)(*a3 * v5) - (float)(v7 * *a2);
  float v12 = sqrtf((float)((float)(v10 * v10) + (float)(v9 * v9)) + (float)(v11 * v11));
  if (v12 >= 0.1)
  {
    float v13 = v9 * (float)(1.0 / v12);
    float v14 = v10 * (float)(1.0 / v12);
    float v15 = v11 * (float)(1.0 / v12);
    float v16 = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
    float v17 = v4 * (float)(1.0 / v16);
    float v18 = v5 * (float)(1.0 / v16);
    float v19 = v6 * (float)(1.0 / v16);
    *(float *)this = v13;
    *((float *)this + 1) = v14;
    *((float *)this + 2) = v15;
    *((float *)this + 3) = (float)(v18 * v15) - (float)(v19 * v14);
    *((float *)this + 4) = (float)(v19 * v13) - (float)(v17 * v15);
    *((float *)this + 5) = (float)(v17 * v14) - (float)(v18 * v13);
    *((float *)this + 6) = v17;
    *((float *)this + 7) = v18;
    *((float *)this + 8) = v19;
  }
  return v12 >= 0.1;
}

double BlueFin::getHeading(BlueFin *this, float *a2, float *a3, float *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!BlueFin::getRotationMatrix((BlueFin *)v7, (float *)this, a2, a4)) {
    return 0.0;
  }
  float v4 = v8;
  float v5 = v9;

  *(float *)&double result = atan2f(v4, v5);
  return result;
}

void BlueFin::SensorMagnetometer::~SensorMagnetometer(BlueFin::SensorMagnetometer *this)
{
}

uint64_t BlueFin::SensorMagnetometer::updateOri(uint64_t this, int a2, float a3)
{
  if (a3 < 0.0 || a3 > 360.0) {
    return this;
  }
  float v4 = *(float *)(this + 116);
  float v5 = a3 - v4;
  if (v5 <= 180.0)
  {
    if (v5 >= -180.0) {
      goto LABEL_11;
    }
    float v6 = 360.0;
  }
  else
  {
    float v6 = -360.0;
  }
  float v5 = v5 + v6;
LABEL_11:
  float v7 = v4 + v5;
  float v8 = (float)(v7 + (float)(v4 * 16.0)) / 17.0;
  float v9 = v8 + 360.0;
  if (v8 >= 0.0) {
    float v9 = v8;
  }
  if (v8 >= 360.0) {
    float v10 = v8 + -360.0;
  }
  else {
    float v10 = v9;
  }
  *(float *)(this + 116) = v10;
  float v11 = v7 - v10;
  if (v11 <= 180.0)
  {
    float v13 = v11;
    if (v11 >= -180.0) {
      goto LABEL_21;
    }
    float v12 = 360.0;
  }
  else
  {
    float v12 = -360.0;
  }
  float v13 = v11 + v12;
LABEL_21:
  float v14 = (float)(v13 + (float)(*(float *)(this + 128) * 16.0)) / 17.0;
  if (v14 <= 180.0)
  {
    if (v14 >= -180.0) {
      goto LABEL_26;
    }
    float v15 = 360.0;
  }
  else
  {
    float v15 = -360.0;
  }
  float v14 = v14 + v15;
LABEL_26:
  *(float *)(this + 128) = v14;
  float v16 = v11 - v14;
  if (v16 > 180.0)
  {
    float v17 = -360.0;
LABEL_30:
    float v16 = v16 + v17;
    goto LABEL_31;
  }
  if (v16 < -180.0)
  {
    float v17 = 360.0;
    goto LABEL_30;
  }
LABEL_31:
  *(float *)(this + 124) = (float)(fabsf(v16) + (float)(*(float *)(this + 124) * 32.0)) / 33.0;
  ++*(_DWORD *)(this + 152);
  int v18 = *(_DWORD *)(this + 104);
  if (!v18)
  {
    *(_DWORD *)(this + 104) = a2;
    int v18 = a2;
  }
  *(unsigned char *)(this + 16) = 1;
  unsigned int v19 = (a2 - v18) / 0x64u;
  if (v19 == *(_DWORD *)(this + 112))
  {
    ++*(_DWORD *)(this + 100);
    *(float *)(this + 32) = v7 + *(float *)(this + 32);
  }
  else
  {
    uint64_t v20 = *(int *)(this + 108);
    if ((int)v20 <= 15)
    {
      int v21 = *(_DWORD *)(this + 100);
      if (v21 >= 1)
      {
        float v22 = 1.0;
        if (v21 != 1) {
          float v22 = 1.0 / (float)v21;
        }
        *(float *)(this + 4 * v20 + 36) = v22 * *(float *)(this + 32);
        *(_DWORD *)(this + 108) = v20 + 1;
      }
      *(_DWORD *)(this + 112) = v19;
      *(_DWORD *)(this + 100) = 1;
      *(float *)(this + 32) = v7;
    }
  }
  if (*(float *)(this + 20) == 0.0) {
    *(float *)(this + 20) = v7;
  }
  *(_DWORD *)(this + 28) = a2;
  return this;
}

float BlueFin::SensorMagnetometer::updateAcc(BlueFin::SensorMagnetometer *this, int a2, float a3, float a4, float a5)
{
  *((float *)this + 60) = a3;
  *((float *)this + 61) = a4;
  *((float *)this + 62) = a5;
  *((_DWORD *)this + 63) = a2;
  float v5 = *((float *)this + 57);
  if (v5 == 0.0) {
    float v5 = 9.8067;
  }
  float v6 = (float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5);
  float v7 = (float)(sqrtf(v6) + (float)(v5 * 5000.0)) / 5001.0;
  *((float *)this + 57) = v7;
  float v8 = v6 - (float)(v7 * v7);
  float v9 = sqrtf(v8);
  BOOL v10 = v8 <= 0.0;
  float v11 = 0.0;
  if (!v10) {
    float v11 = v9;
  }
  float result = (float)((float)(v11 - *((float *)this + 33)) + (float)(*((float *)this + 33) * 50.0)) / 51.0;
  *((float *)this + 33) = result;
  return result;
}

uint64_t BlueFin::SensorMagnetometer::updateMag(uint64_t this, uint64_t a2, float a3, float a4, float a5, float *a6, float *a7)
{
  float v7 = sqrtf((float)((float)(a4 * a4) + (float)(a3 * a3)) + (float)(a5 * a5));
  float v8 = *(float *)(this + 176);
  if (v8 == 0.0) {
    float v8 = v7;
  }
  float v9 = (float)(v7 + (float)(v8 * 100.0)) / 101.0;
  *(float *)(this + 176) = v9;
  *(float *)(this + 180) = v7;
  *(float *)(this + 136) = (float)((float)(v7 - v9) + (float)(*(float *)(this + 136) * 10.0)) / 11.0;
  *(unsigned char *)(this + 184) = 1;
  int v10 = *(_DWORD *)(this + 252) - a2;
  if (v10 < 0) {
    int v10 = a2 - *(_DWORD *)(this + 252);
  }
  if (v10 <= 0x3E7)
  {
    float v12 = (unsigned char *)this;
    v16[0] = a3;
    v16[1] = a4;
    v16[2] = a5;
    LODWORD(v16[3]) = a2;
    v14.n128_f64[0] = BlueFin::getHeading((BlueFin *)(this + 240), v16, a6, a7);
    v13.n128_u32[1] = 1078765020;
    v14.n128_f64[0] = v14.n128_f32[0] * 57.2957795;
    v14.n128_f32[0] = v14.n128_f64[0];
    if (v12[149]) {
      v14.n128_f32[0] = v14.n128_f32[0] + -90.0;
    }
    v13.n128_u32[0] = 1135869952;
    float v15 = v14.n128_f32[0] + 360.0;
    if (v14.n128_f32[0] >= 0.0) {
      float v15 = v14.n128_f32[0];
    }
    if (v14.n128_f32[0] >= 360.0) {
      v14.n128_f32[0] = v14.n128_f32[0] + -360.0;
    }
    else {
      v14.n128_f32[0] = v15;
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t, __n128, __n128))(*(void *)v12 + 16))(v12, a2, v14, v13);
  }
  return this;
}

uint64_t BlueFin::SensorMagnetometer::updateGyr(uint64_t this, float a2, float a3, float a4)
{
  float v4 = (float)((float)(a3 * a3) + (float)(a2 * a2)) + (float)(a4 * a4);
  if (v4 == 0.0)
  {
    char v5 = 0;
  }
  else
  {
    int v6 = *(_DWORD *)(this + 156);
    int v7 = *(_DWORD *)(this + 160);
    float v8 = (float)(v6 + 1);
    float v9 = sqrtf(v4);
    float v10 = (float)(v9 + (float)(*(float *)(this + 140) * (float)v6)) / v8;
    *(float *)(this + 140) = v10;
    *(float *)(this + 164) = (float)(vabds_f32(v10, v9) + (float)(*(float *)(this + 164) * (float)v6)) / v8;
    *(float *)(this + 168) = v9;
    *(_DWORD *)(this + 160) = v7 + 1;
    char v5 = 1;
  }
  *(unsigned char *)(this + 172) = v5;
  return this;
}

uint64_t BlueFin::SensorMagnetometer::timeout(BlueFin::SensorMagnetometer *this)
{
  *((_DWORD *)this + 39) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 38) = 0;
  if (*((unsigned char *)this + 16))
  {
    int v1 = *((_DWORD *)this + 25);
    if (v1 >= 1)
    {
      uint64_t v2 = *((int *)this + 27);
      if ((int)v2 <= 15)
      {
        float v3 = 1.0;
        if (v1 >= 2) {
          float v3 = 1.0 / (float)v1;
        }
        *((float *)this + v2 + 9) = v3 * *((float *)this + 8);
        *((_DWORD *)this + 27) = v2 + 1;
      }
    }
  }
  return 0;
}

double BlueFin::SensorMagnetometer::fillInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 16) = 0;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 3))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 108);
    if (v4)
    {
      if ((int)v4 <= 0)
      {
        float v14 = 0.0 / (float)(int)v4;
        float v10 = v14;
      }
      else
      {
        char v5 = (float *)(a1 + 36);
        float v6 = 0.0;
        uint64_t v7 = *(unsigned int *)(a1 + 108);
        do
        {
          float v8 = *v5++;
          float v6 = v6 + v8;
          --v7;
        }
        while (v7);
        float v9 = (float)(int)v4;
        float v10 = v6 / (float)(int)v4;
        float v11 = (float *)(a1 + 36);
        float v12 = 0.0;
        do
        {
          float v13 = *v11++;
          float v12 = v12 + (float)((float)(v13 - v10) * (float)(v13 - v10));
          --v4;
        }
        while (v4);
        float v14 = v12 / v9;
      }
      float v15 = sqrtf(v14);
      if (v15 < 20.0) {
        float v15 = 20.0;
      }
      *(_WORD *)(a2 + 3560) = 1;
      *(_DWORD *)(*(void *)(a2 + 3568) + 8) = 0;
      *(_WORD *)(a2 + 32) = 1;
      *(void *)a2 = 0x20000000FLL;
      *(_WORD *)(a2 + 40) = 0;
      *(float *)(a2 + 48) = v10;
      *(float *)(a2 + 88) = v15;
      if (*(_WORD *)(a2 + 3560)) {
        (*(void (**)(void, uint64_t))(**(void **)(a2 + 3576) + 16))(*(void *)(a2 + 3576), a2 + 3560);
      }
    }
  }
  float v16 = *(unsigned char **)(a1 + 8);
  if (v16[1])
  {
    float v17 = *(float *)(a1 + 212);
    if (v17 == 0.0)
    {
      float v17 = *(float *)(a1 + 116);
      *(float *)(a1 + 212) = v17;
    }
    float v18 = *(float *)(a1 + 128);
    float v19 = v18 + *(float *)(a1 + 216);
    *(float *)(a1 + 216) = v19;
    int v20 = *(unsigned __int8 *)(a1 + 148);
    if (*(unsigned char *)(a1 + 210)) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    int v22 = v21;
    *(unsigned char *)(a1 + 210) = v20;
    if (*(unsigned char *)(a1 + 256)) {
      *(unsigned char *)(a1 + 211) = 1;
    }
    if (*(unsigned char *)(a1 + 257))
    {
      BOOL v23 = 1;
    }
    else
    {
      float v24 = *(float *)(a1 + 264);
      if (v24 == 0.0)
      {
        BOOL v23 = 0;
      }
      else
      {
        BOOL v23 = v24 < 6.0;
        *(unsigned char *)(a1 + 257) = v23;
      }
    }
    int v25 = *(unsigned __int8 *)(a1 + 209);
    if (!v20 && *(unsigned char *)(a1 + 209)) {
      ++*(_DWORD *)(a1 + 204);
    }
    if (!v23 || !*(unsigned char *)(a1 + 258))
    {
LABEL_57:
      int v38 = 0;
      if (*(int *)(a1 + 100) < 1 || v20) {
        goto LABEL_63;
      }
      float v39 = *(float *)(a1 + 124);
      if (v39 > 20.0 || *(float *)(a1 + 132) > 2.0 || fabsf(*(float *)(a1 + 136)) > 8.0)
      {
LABEL_62:
        int v38 = 0;
        goto LABEL_63;
      }
      float v51 = fabsf(v18);
      if (v51 >= (float)(v39 + 6.0))
      {
        *(unsigned char *)(a1 + 208) = 1;
      }
      else if (!*(unsigned char *)(a1 + 208))
      {
        goto LABEL_111;
      }
      float v52 = v17 - *(float *)(a1 + 116);
      if (v52 <= 180.0)
      {
        if (v52 >= -180.0) {
          goto LABEL_109;
        }
        float v53 = 360.0;
      }
      else
      {
        float v53 = -360.0;
      }
      float v52 = v52 + v53;
LABEL_109:
      if (fabsf(v52) > 45.0)
      {
        *(_WORD *)(a1 + 208) = 256;
        int v38 = 2;
        goto LABEL_121;
      }
LABEL_111:
      int v38 = 0;
      if (v51 > (float)(v39 + 3.0) || fabsf(v19) > 15.0) {
        goto LABEL_63;
      }
      if (fabsf(*(float *)(a1 + 200)) > 15.0) {
        goto LABEL_62;
      }
      if (!v23 && v25)
      {
        int v38 = 0;
        int v54 = *(unsigned char *)(a1 + 211) ? 30 : 0;
        if (*(_DWORD *)(a1 + 204) <= v54)
        {
LABEL_63:
          if (*(unsigned char *)(a1 + 184)) {
            BOOL v40 = *(unsigned char *)(a1 + 185) == 0;
          }
          else {
            BOOL v40 = 1;
          }
          if (v40) {
            int v41 = 0;
          }
          else {
            int v41 = v38;
          }
          *(unsigned char *)(a1 + 184) = 0;
          if (!*(unsigned char *)(a1 + 172)) {
            goto LABEL_82;
          }
          if (v16[2] && *(float *)(a1 + 164) < 11.4591559)
          {
            double v42 = *(float *)(a1 + 140);
            if (v42 <= 28.6478898)
            {
              if (v42 >= 5.72957795) {
                goto LABEL_78;
              }
              BOOL v43 = v41 == 2;
            }
            else
            {
              BOOL v43 = v41 == 1;
            }
            if (v43) {
              int v41 = 0;
            }
          }
LABEL_78:
          if (v16[3] && *(float *)(a1 + 164) < 11.4591559)
          {
            double v44 = *(float *)(a1 + 140);
            if (v44 > 11.4591559)
            {
              int v41 = 2;
              goto LABEL_83;
            }
            if (v44 < 5.72957795)
            {
              int v41 = 1;
LABEL_83:
              int v45 = *(_DWORD *)(a1 + 236);
              *(_DWORD *)(a1 + 236) = v45 + 1;
              if (v45 >= 4) {
                int v46 = v41;
              }
              else {
                int v46 = 0;
              }
              if (!v22) {
                goto LABEL_88;
              }
LABEL_87:
              *(_DWORD *)(a1 + 216) = 0;
              *(unsigned char *)(a1 + 210) = 0;
LABEL_88:
              if ((v46 & 1) == 0) {
                *(_DWORD *)(a1 + 216) = 0;
              }
              if (v46 != *(_DWORD *)(a1 + 224))
              {
                *(_DWORD *)(a1 + 224) = v46;
                *(_WORD *)(a2 + 3560) = 1;
                *(_DWORD *)(*(void *)(a2 + 3568) + 8) = 0;
                *(_WORD *)(a2 + 32) = 1;
                *(void *)a2 = 0x200000012;
                *(_WORD *)(a2 + 40) = 0;
                *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 224);
                *(_DWORD *)(a2 + 88) = -1082130432;
                if (*(_WORD *)(a2 + 3560)) {
                  (*(void (**)(void, uint64_t))(**(void **)(a2 + 3576) + 16))(*(void *)(a2 + 3576), a2 + 3560);
                }
              }
              goto LABEL_93;
            }
LABEL_98:
            int v46 = 0;
            *(_DWORD *)(a1 + 236) = 0;
            if (!v22) {
              goto LABEL_88;
            }
            goto LABEL_87;
          }
LABEL_82:
          if (v41) {
            goto LABEL_83;
          }
          goto LABEL_98;
        }
      }
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a1 + 116);
      *(_WORD *)(a1 + 208) = 0;
      *(unsigned char *)(a1 + 211) = 0;
      int v38 = 1;
LABEL_121:
      *(_DWORD *)(a1 + 204) = 0;
      goto LABEL_63;
    }
    float v26 = *(float *)(a1 + 260);
    *(float *)(a1 + 144) = v26;
    float v27 = *(float *)(a1 + 188);
    if (v27 == 0.0) {
      float v27 = v26;
    }
    float v28 = *(float *)(a1 + 196);
    if (v28 == 0.0) {
      float v28 = *(float *)(a1 + 116);
    }
    float v29 = v26 - v27;
    if (v29 <= 180.0)
    {
      if (v29 >= -180.0) {
        goto LABEL_45;
      }
      float v30 = 360.0;
    }
    else
    {
      float v30 = -360.0;
    }
    float v29 = v29 + v30;
LABEL_45:
    if (fabsf(v29) <= 2.0)
    {
      *(_DWORD *)(a1 + 192) = 0;
      unsigned __int16 v36 = (_DWORD *)(a1 + 200);
      float v32 = *(float *)(a1 + 116);
    }
    else
    {
      float v31 = v29 + *(float *)(a1 + 192);
      *(float *)(a1 + 192) = v31;
      float v32 = *(float *)(a1 + 116);
      float v33 = v32 - v28;
      float v34 = v33 + 360.0;
      if (v33 >= -180.0) {
        float v34 = v33;
      }
      if (v33 > 180.0) {
        float v35 = v33 + -360.0;
      }
      else {
        float v35 = v34;
      }
      unsigned __int16 v36 = (_DWORD *)(a1 + 200);
      float v37 = v35 + *(float *)(a1 + 200);
      *(float *)(a1 + 200) = v37;
      if (fabsf(v31) <= 45.0 || *(unsigned char *)(a1 + 185)) {
        goto LABEL_56;
      }
      *(unsigned char *)(a1 + 185) = fabsf(v37) > 10.0;
      *(_DWORD *)(a1 + 192) = 0;
    }
    *unsigned __int16 v36 = 0;
LABEL_56:
    *(float *)(a1 + 196) = v32;
    *(float *)(a1 + 188) = v26;
    goto LABEL_57;
  }
LABEL_93:
  int v47 = *(_DWORD *)(a1 + 108);
  BOOL v48 = __OFSUB__(v47, 1);
  int v49 = v47 - 1;
  if (v49 < 0 == v48)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 4 * v49 + 36);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 28);
  }
  *(unsigned char *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t BlueFin::SensorMagnetometer::setStop(uint64_t this, char a2)
{
  *(unsigned char *)(this + 148) = a2;
  return this;
}

uint64_t BlueFin::SensorMagnetometer::setFixStatus(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    *(_WORD *)(result + 256) = 0;
    *(_DWORD *)(result + 264) = 0;
LABEL_9:
    *(unsigned char *)(result + 258) = 0;
    float v7 = 0.0;
    goto LABEL_12;
  }
  if (*(unsigned char *)(a2 + 4048)) {
    BOOL v2 = *(_WORD *)(a2 + 4274) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  *(unsigned char *)(result + 256) = v2;
  unsigned int v3 = *(_DWORD *)(a2 + 4068);
  *(unsigned char *)(result + 257) = (v3 & 2) != 0;
  double v4 = *(double *)(a2 + 6976);
  float v5 = sqrt(v4) * 57.2957795;
  BOOL v6 = v4 < 1000000.0;
  float v7 = 0.0;
  if (!v6) {
    float v5 = 0.0;
  }
  *(float *)(result + 264) = v5;
  if (((v3 >> 1) & 1) == 0) {
    goto LABEL_9;
  }
  int v8 = *(unsigned __int8 *)(a2 + 4208);
  *(unsigned char *)(result + 258) = *(unsigned char *)(a2 + 4208) != 0;
  if (v8) {
    float v7 = *(double *)(a2 + 4216);
  }
LABEL_12:
  *(float *)(result + 260) = v7;
  return result;
}

uint64_t BlueFin::SensorMagnetometer::setRotation(uint64_t this, char a2)
{
  *(unsigned char *)(this + 149) = a2;
  return this;
}

uint64_t BlueFin::GlPeSensListener::SetExtSensInfo(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, double a9, double a10)
{
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10) {
    BOOL v11 = *a2 < 1;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    return 0;
  }
  else {
    return BlueFin::GlPosEng::InjectExtSensInfo(v10, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
}

uint64_t BlueFin::GlPeSensorsMgr::Update(uint64_t result, __int16 *a2)
{
  if (!result)
  {
    DeviceFaultNotify("glpe_sensmgr.cpp", 280, "Update", (char)"GetSensorsConfig()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensmgr.cpp", 280, "GetSensorsConfig()");
  }
  if (*a2 >= 1)
  {
    uint64_t v3 = result;
    int v4 = 0;
    uint64_t v5 = result + 24;
    uint64_t v6 = result + 296;
    uint64_t v7 = result + 2264;
    int v8 = (float32x2_t *)(*((void *)a2 + 1) + 8);
    do
    {
      switch(v8[-1].i32[0])
      {
        case 0:
          if (*(unsigned char *)(v3 + 1) || *(unsigned char *)(v3 + 2)) {
            double result = (*(uint64_t (**)(uint64_t, void, float32_t, float32_t, float32_t))(*(void *)v5 + 24))(v5, v8[-1].u32[1], v8->f32[0], v8->f32[1], v8[1].f32[0]);
          }
          if (*(unsigned char *)(v3 + 7))
          {
            float v9 = (void *)*v8;
            LODWORD(v10) = v8[1].i32[0];
            HIDWORD(v10) = v8[-1].i32[1];
            double result = (*(uint64_t (**)(uint64_t, void **))(*(void *)(v3 + 296) + 24))(v6, &v9);
            ++*(_DWORD *)(v3 + 2384);
          }
          break;
        case 1:
          if (*(unsigned char *)(v3 + 1) || *(unsigned char *)(v3 + 2)) {
            double result = (*(uint64_t (**)(uint64_t, void, float32_t, float32_t, float32_t))(*(void *)v5 + 32))(v5, v8[-1].u32[1], v8->f32[0], v8->f32[1], v8[1].f32[0]);
          }
          ++*(_DWORD *)(v3 + 2396);
          break;
        case 2:
          if (*(unsigned char *)(v3 + 1) || *(unsigned char *)(v3 + 2)) {
            double result = (*(uint64_t (**)(uint64_t, void, float32_t, float32_t, float32_t))(*(void *)v5 + 40))(v5, v8[-1].u32[1], v8->f32[0], v8->f32[1], v8[1].f32[0]);
          }
          if (*(unsigned char *)(v3 + 7))
          {
            float v9 = (void *)vneg_f32(*v8);
            *(float *)&uint64_t v10 = -v8[1].f32[0];
            HIDWORD(v10) = v8[-1].i32[1];
            double result = (*(uint64_t (**)(uint64_t, void **))(*(void *)(v3 + 296) + 32))(v6, &v9);
            ++*(_DWORD *)(v3 + 2388);
          }
          break;
        case 3:
          if (*(unsigned char *)(v3 + 1) || *(unsigned char *)(v3 + 2)) {
            double result = (*(uint64_t (**)(uint64_t, void, float32_t))(*(void *)v5 + 16))(v5, v8[-1].u32[1], v8->f32[0]);
          }
          ++*(_DWORD *)(v3 + 2408);
          break;
        case 4:
          if (*(unsigned char *)(v3 + 8)) {
            double result = (*(uint64_t (**)(uint64_t, void, double))(*(void *)v6 + 48))(v6, v8[-1].u32[1], v8->f32[0]);
          }
          ++*(_DWORD *)(v3 + 2400);
          break;
        case 5:
          ++*(_DWORD *)(v3 + 2404);
          break;
        case 0xA:
          double result = (*(uint64_t (**)(uint64_t, void, float32_t, float32_t, float32_t))(*(void *)v7 + 16))(v7, v8[-1].u32[1], v8->f32[0], v8->f32[1], v8[1].f32[0]);
          break;
        default:
          break;
      }
      ++v4;
      int v8 = (float32x2_t *)((char *)v8 + 20);
    }
    while (v4 < *a2);
  }
  float v9 = &unk_270EC8CD0;
  uint64_t v10 = a2;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      return BlueFin::GlPeSensorsData::SerializeImpl((uint64_t)&v9, 0);
    }
  }
  return result;
}

uint64_t BlueFin::GlPeSensorsData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 4;
  }
  if (v5 >= 5)
  {
    float v17 = "ucVersion >= 1 && ucVersion <= 4";
    DeviceFaultNotify("glpe_sensmgr.cpp", 898, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 4");
    int v18 = 898;
    goto LABEL_38;
  }
  uint64_t v6 = v3;
  if (!v3 && (!BlueFin::GlUtils::m_pInstance || !*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))) {
    return 1;
  }
  uint64_t v7 = *(unsigned __int16 **)(v2 + 8);
  if (!v7)
  {
    float v17 = "m_potData != nullptr";
    DeviceFaultNotify("glpe_sensmgr.cpp", 902, "SerializeImpl", (char)"m_potData != nullptr");
    int v18 = 902;
    goto LABEL_38;
  }
  unsigned int v8 = *v7;
  if (v8 >= 0x12D)
  {
    float v17 = "otData.sSensNum >= 0 && otData.sSensNum <= GL_MAX_SENS_RAW_DATA";
    DeviceFaultNotify("glpe_sensmgr.cpp", 906, "SerializeImpl", (char)"otData.sSensNum >= 0 && otData.sSensNum <= GL_MAX_SENS_RAW_DATA");
    int v18 = 906;
LABEL_38:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensmgr.cpp", v18, v17);
  }
  int v20 = 48;
  unsigned __int8 v21 = v5;
  uint64_t v22 = 0x1000000000000;
  float v19 = &unk_270EBA2F0;
  char v23 = v5;
  if (v5 > 3)
  {
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v19, v8);
  }
  else
  {
    if (v8 >= 0x100)
    {
      DeviceFaultNotify("glpe_sensmgr.cpp", 913, "SerializeImpl", (char)"otData.sSensNum < 256");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensmgr.cpp", 913, "otData.sSensNum < 256");
    }
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, v8);
  }
  if ((__int16)*v7 >= 1)
  {
    int v9 = 0;
    uint64_t v10 = (float *)*((void *)v7 + 1);
    BOOL v11 = v10 + 3;
    do
    {
      float v12 = v11 - 3;
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v19, *((unsigned char *)v11 - 12));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v19, *((_DWORD *)v11 - 2));
      int v13 = *((_DWORD *)v11 - 3);
      switch(v13)
      {
        case 0:
        case 1:
        case 2:
        case 7:
        case 11:
        case 12:
        case 13:
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(v11 - 1));
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *v11);
          float v14 = v10 + 4;
          break;
        case 3:
          goto LABEL_17;
        case 4:
        case 5:
          if (v21 < 2u) {
            goto LABEL_29;
          }
LABEL_17:
          float v14 = v10 + 2;
          break;
        case 6:
          if (v21 >= 3u) {
            goto LABEL_21;
          }
          goto LABEL_29;
        case 8:
          if (v21 < 3u) {
            goto LABEL_29;
          }
LABEL_21:
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(v11 - 1));
          float v14 = v10 + 3;
          break;
        default:
          if (v13 != 10 || v21 < 3u) {
            goto LABEL_29;
          }
          BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *(v11 - 1));
          float v14 = v11;
          break;
      }
      BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v19, *v14);
LABEL_29:
      ++v9;
      v11 += 5;
      uint64_t v10 = v12 + 5;
    }
    while (v9 < (__int16)*v7);
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v19, v6, 4);
  return 1;
}

uint64_t BlueFin::GlPeSensorsData::Deserialize(BlueFin::GlPeSensorsData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 48)
  {
    int v9 = "otEntry.eType == GLPE_LOG_ENTRY_RAWSENS";
    DeviceFaultNotify("glpe_sensmgr.cpp", 1003, "Deserialize", (char)"otEntry.eType == GLPE_LOG_ENTRY_RAWSENS");
    int v10 = 1003;
    goto LABEL_21;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 > 4) {
    return 0;
  }
  unsigned int v5 = (__int16 *)*((void *)this + 1);
  if (!v5)
  {
    int v9 = "m_potData != nullptr";
    DeviceFaultNotify("glpe_sensmgr.cpp", 1011, "Deserialize", (char)"m_potData != nullptr");
    int v10 = 1011;
LABEL_21:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensmgr.cpp", v10, v9);
  }
  if (v3 > 3)
  {
    int S16 = BlueFin::GlSysLogEntry::GetS16(a2);
    *unsigned int v5 = S16;
    if (S16 >= 301)
    {
      GlCustomLog(11, " OVERFLOW\n");
      return 0;
    }
  }
  else
  {
    int S16 = BlueFin::GlSysLogEntry::GetU8(a2);
    *unsigned int v5 = S16;
  }
  if (S16 >= 1)
  {
    int v7 = 0;
    unsigned int v8 = (float *)(*((void *)v5 + 1) + 8);
    do
    {
      *((_DWORD *)v8 - 2) = BlueFin::GlSysLogEntry::GetU8(a2);
      *((_DWORD *)v8 - 1) = BlueFin::GlSysLogEntry::GetU32(a2);
      switch(*((_DWORD *)v8 - 2))
      {
        case 0:
        case 1:
        case 2:
        case 7:
        case 0xB:
        case 0xC:
        case 0xD:
          *unsigned int v8 = BlueFin::GlSysLogEntry::GetF32(a2);
          v8[1] = BlueFin::GlSysLogEntry::GetF32(a2);
          v8[2] = BlueFin::GlSysLogEntry::GetF32(a2);
          break;
        case 3:
          goto LABEL_15;
        case 4:
        case 5:
          if (*((unsigned __int8 *)a2 + 12) >= 2u) {
LABEL_15:
          }
            *unsigned int v8 = BlueFin::GlSysLogEntry::GetF32(a2);
          break;
        case 6:
        case 8:
        case 0xA:
          if (*((unsigned __int8 *)a2 + 12) >= 3u)
          {
            *unsigned int v8 = BlueFin::GlSysLogEntry::GetF32(a2);
            v8[1] = BlueFin::GlSysLogEntry::GetF32(a2);
          }
          break;
        default:
          break;
      }
      ++v7;
      v8 += 5;
    }
    while (v7 < *v5);
  }
  return 1;
}

void BlueFin::GlPeSensorsData::~GlPeSensorsData(BlueFin::GlPeSensorsData *this)
{
}

void BlueFin::GlPeSensListener::~GlPeSensListener(BlueFin::GlPeSensListener *this)
{
}

void BlueFin::SensorWheelInfo::~SensorWheelInfo(BlueFin::SensorWheelInfo *this)
{
}

uint64_t BlueFin::SensorWheelInfo::update(uint64_t this, unsigned int a2, float a3, float a4, float a5)
{
  float v5 = (float)a2 * 0.001;
  if (*(_DWORD *)(this + 16))
  {
    float v6 = *(float *)(this + 20);
    if (v5 > v6)
    {
      *(float *)(this + 28) = 2.14 / (float)(v5 - v6);
      *(unsigned char *)(this + 24) = 1;
    }
  }
  *(_DWORD *)(this + 16) = a2;
  *(float *)(this + 20) = v5;
  return this;
}

uint64_t BlueFin::SensorsDownsampleFilt::Update(BlueFin::SensorsDownsampleFilt *this, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 12);
  if (!*((unsigned char *)this + 832))
  {
    *((_DWORD *)this + 212) = v4;
    *((_DWORD *)this + 211) = v4;
    *((_DWORD *)this + 213) = 1;
    float v6 = *((float *)this + 214);
LABEL_13:
    float v10 = (float)(4.0 / v6) * 3.14159265;
    float v11 = tanf(v10);
    uint64_t v12 = 0;
    float v13 = v11 / 3.14159265;
    float v14 = 1.0 / (v13 * 3.14159265);
    float v15 = v14 * v14;
    float v16 = v14 * -1.4142;
    float v17 = (float)(v15 - v16) + 1.0;
    *((float *)this + 223) = v17;
    *((float *)this + 224) = (float)(v15 * -2.0) + 2.0;
    float v18 = (float)(v15 + v16) + 1.0;
    *((float *)this + 225) = v18;
    float v19 = 1.0 - (float)(1.0 / v17);
    float v20 = (float)(1.0 - v18) / v17;
    do
    {
      unsigned __int8 v21 = (float *)((char *)this + v12);
      v21[215] = v19 * *(float *)(a2 + v12);
      v21[219] = v20 * *(float *)(a2 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    goto LABEL_17;
  }
  unsigned int v5 = *((_DWORD *)this + 213);
  float v6 = (float)((float)v5 * 1000.0) / (float)(v4 - *((_DWORD *)this + 211));
  *((_DWORD *)this + 213) = v5 + 1;
  if (((v5 + 1) & 7) == 1)
  {
    float v7 = (float)(v4 - *((_DWORD *)this + 212)) * 0.125;
    *((_DWORD *)this + 212) = v4;
    float v8 = (float)((float)(v6 * v7) / 1000.0) + -1.0;
    if (v8 < 0.0) {
      float v8 = -v8;
    }
    if (v7 == 0.0 || v8 > 0.2)
    {
      *((_DWORD *)this + 211) = v4;
      *((_DWORD *)this + 213) = 1;
      goto LABEL_17;
    }
  }
  if (v5 + 1 >= 0x81)
  {
    *((_DWORD *)this + 211) = v4;
    *((_DWORD *)this + 213) = 1;
    float v9 = (float)(v6 / *((float *)this + 214)) + -1.0;
    if (v9 < 0.0) {
      float v9 = -v9;
    }
    if (v9 > 0.1)
    {
      *((float *)this + 214) = v6;
      goto LABEL_13;
    }
  }
LABEL_17:
  for (uint64_t i = 0; i != 12; i += 4)
  {
    float v23 = *(float *)(a2 + i);
    float v24 = *((float *)this + 223);
    int v25 = (float *)((char *)this + i);
    float v26 = (float)(v23 / v24) + *(float *)((char *)this + i + 860);
    *(float *)((char *)&v41 + i) = v26;
    v25[215] = *(float *)((char *)this + i + 876)
             + (float)((float)((float)(v23 * 2.0) - (float)(v26 * *((float *)this + 224))) / v24);
    v25[219] = (float)(*(float *)(a2 + i) - (float)(v26 * *((float *)this + 225))) / *((float *)this + 223);
  }
  HIDWORD(v41) = v4;
  BlueFin::SensorsDownsampleFilt::Flush((unsigned int *)this);
  uint64_t v27 = *(unsigned int *)(a2 + 12);
  uint64_t v28 = *((unsigned int *)this + 209);
  int v29 = v27 - v28;
  if (v27 < v28 && v28 - (unint64_t)v27 >= 0x80000001) {
    *((unsigned char *)this + 840) = 1;
  }
  uint64_t v30 = 2 * v27;
  if (*((unsigned char *)this + 832))
  {
    uint64_t v31 = *((void *)this + 103);
    *((_DWORD *)this + 209) = v27;
    if (v29 < -50 || (int)v30 - (int)v31 >= 250)
    {
      uint64_t result = 0;
      *((_DWORD *)this + 209) = 0;
      *((void *)this + 103) = 0;
      *((unsigned char *)this + 832) = 0;
      *((unsigned char *)this + 840) = 0;
      *((_OWORD *)this + 50) = 0u;
      *((_DWORD *)this + 204) = 0;
      return result;
    }
    if ((int)v30 - (int)v31 >= 50)
    {
      unint64_t v32 = *((unsigned int *)this + 201);
      if (v32)
      {
        unint64_t v33 = (*((void *)this + 101) / v32) >> 1;
        uint64_t v34 = *((unsigned int *)this + 200);
        *((_DWORD *)this + 4 * v34 + 3) = v33;
      }
      else
      {
        LODWORD(v34) = *((_DWORD *)this + 200);
      }
      *((void *)this + 101) = 0;
      *((unsigned char *)this + 840) = 0;
      *((void *)this + 103) = v31 + 100;
      *((void *)this + 100) = (v34 + 1);
    }
  }
  else
  {
    *((void *)this + 103) = 100
                            * (((unint64_t)(v30 + 50) * (unsigned __int128)0x28F5C28F5C28F5DuLL) >> 64);
    *((unsigned char *)this + 832) = 1;
    *((_DWORD *)this + 209) = v27;
  }
  uint64_t v36 = *((unsigned int *)this + 200);
  if (v36 < 0x32)
  {
    int v37 = *((_DWORD *)this + 201);
    *((_DWORD *)this + 201) = v37 + 1;
    uint64_t v38 = *((void *)this + 101) + v30;
    *((void *)this + 101) = v38;
    if (*((unsigned char *)this + 840)) {
      *((void *)this + 101) = v38 + 0x200000000;
    }
    if (v37 == -1)
    {
      DeviceFaultNotify("glpe_sensors_data.cpp", 216, "Update", (char)"rawCnt != 0");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensors_data.cpp", 216, "rawCnt != 0");
    }
    float v39 = (_OWORD *)((char *)this + 16 * v36);
    if (v37)
    {
      for (uint64_t j = 0; j != 12; j += 4)
        *(float *)((char *)v39 + j) = *(float *)((char *)v39 + j)
                                    + (float)((float)(*(float *)((char *)&v41 + j) - *(float *)((char *)v39 + j))
                                            / (float)(v37 + 1));
    }
    else
    {
      *float v39 = v41;
    }
    return 1;
  }
  else
  {
    uint64_t result = 0;
    *((_DWORD *)this + 200) = 50;
  }
  return result;
}

uint64_t BlueFin::SensorsData::addpressure(uint64_t this, int a2, double a3)
{
  if (fabs(a3 + -1013.25) <= 100.0)
  {
    uint64_t v3 = *(unsigned int *)(this + 1952);
    if (v3 <= 8)
    {
      *(double *)(this + 8 * v3 + 1832) = a3;
      *(_DWORD *)(this + 4 * v3 + 1912) = a2;
      ++*(_DWORD *)(this + 1952);
    }
  }
  return this;
}

uint64_t BlueFin::SensorsData::addgyr(uint64_t result, float *a2)
{
  if (fabsf(*a2) < 750.0 && fabsf(a2[1]) < 750.0 && fabsf(a2[2]) < 750.0)
  {
    uint64_t v2 = (_DWORD *)result;
    uint64_t result = BlueFin::SensorsDownsampleFilt::Update((BlueFin::SensorsDownsampleFilt *)(result + 912), (uint64_t)a2);
    if ((result & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 224))(v2);
      v2[206] = v2[202];
      v2[432] = v2[428];
    }
  }
  return result;
}

uint64_t BlueFin::SensorsData::addacc(uint64_t result, float *a2)
{
  if (fabsf(*a2) < 100.0 && fabsf(a2[1]) < 100.0 && fabsf(a2[2]) < 100.0)
  {
    uint64_t v2 = (_DWORD *)result;
    uint64_t result = BlueFin::SensorsDownsampleFilt::Update((BlueFin::SensorsDownsampleFilt *)(result + 8), (uint64_t)a2);
    if ((result & 1) == 0)
    {
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 232))(v2);
      v2[206] = v2[202];
      v2[432] = v2[428];
    }
  }
  return result;
}

uint64_t BlueFin::SensorsData::addtemp(uint64_t result, _OWORD *a2)
{
  uint64_t v2 = (_OWORD *)(result + 1816);
  if (*(_DWORD *)(result + 1828))
  {
    *(_DWORD *)(result + 1828) = 0;
    *(_DWORD *)(result + 1960) = 1;
LABEL_3:
    *uint64_t v2 = *a2;
    *(_DWORD *)(result + 1828) = 0;
    return result;
  }
  int v3 = *(_DWORD *)(result + 1960);
  int v4 = v3 + 1;
  *(_DWORD *)(result + 1960) = v3 + 1;
  if (!v3) {
    goto LABEL_3;
  }
  for (uint64_t i = 0; i != 12; i += 4)
    *(float *)((char *)v2 + i) = *(float *)((char *)v2 + i)
                               + (float)((float)(*(float *)((char *)a2 + i) - *(float *)((char *)v2 + i)) / (float)v4);
  return result;
}

void BlueFin::SensorsData::~SensorsData(BlueFin::SensorsData *this)
{
}

float BlueFin::SensorsData::getAcc(BlueFin::SensorsData *this, int a2, int a3)
{
  return *((float *)this + 4 * a2 + a3 + 2);
}

float BlueFin::SensorsData::getGyr(BlueFin::SensorsData *this, int a2, int a3)
{
  return *((float *)this + 4 * a2 + a3 + 228);
}

float BlueFin::SensorsData::getTemp(BlueFin::SensorsData *this, int a2, int a3)
{
  return *((float *)this + a3 + 454);
}

double BlueFin::SensorsData::getPressure(BlueFin::SensorsData *this, unsigned int a2)
{
  if (*((_DWORD *)this + 488) < a2)
  {
    DeviceFaultNotify("glpe_sensors_mgr.h", 142, "getPressure", (char)"i <= m_ulPressureIdx");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensors_mgr.h", 142, "i <= m_ulPressureIdx");
  }
  return *((double *)this + a2 + 229);
}

uint64_t BlueFin::SensorsData::getAccTimeMs(BlueFin::SensorsData *this, int a2)
{
  return *((unsigned int *)this + 4 * a2 + 5);
}

uint64_t BlueFin::SensorsData::getGyrTimeMs(BlueFin::SensorsData *this, int a2)
{
  return *((unsigned int *)this + 4 * a2 + 231);
}

uint64_t BlueFin::SensorsData::getPressureTimeMs(BlueFin::SensorsData *this, unsigned int a2)
{
  if (*((_DWORD *)this + 488) < a2)
  {
    DeviceFaultNotify("glpe_sensors_mgr.h", 145, "getPressureTimeMs", (char)"i <= m_ulPressureIdx");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sensors_mgr.h", 145, "i <= m_ulPressureIdx");
  }
  return *((unsigned int *)this + a2 + 478);
}

float BlueFin::SensorsData::getAccSampleRateHz(BlueFin::SensorsData *this)
{
  return *((float *)this + 216);
}

float BlueFin::SensorsData::getGyrSampleRateHz(BlueFin::SensorsData *this)
{
  return *((float *)this + 442);
}

unsigned int *BlueFin::SensorsData::discardAccSamples(BlueFin::SensorsData *this, int a2)
{
  *((_DWORD *)this + 206) = a2;
  return BlueFin::SensorsDownsampleFilt::Flush((unsigned int *)this + 2);
}

unsigned int *BlueFin::SensorsData::discardGyrSamples(BlueFin::SensorsData *this, int a2)
{
  *((_DWORD *)this + 432) = a2;
  return BlueFin::SensorsDownsampleFilt::Flush((unsigned int *)this + 228);
}

uint64_t BlueFin::SensorsData::discardPressureSamples(uint64_t this)
{
  *(_DWORD *)(this + 1952) = 0;
  return this;
}

uint64_t BlueFin::SensorsData::HasGyroOverflowed(BlueFin::SensorsData *this)
{
  return *((unsigned __int8 *)this + 1956);
}

uint64_t BlueFin::SensorsData::HasAccOverflowed(BlueFin::SensorsData *this)
{
  return *((unsigned __int8 *)this + 1957);
}

uint64_t BlueFin::SensorsData::HasTempOverflowed(BlueFin::SensorsData *this)
{
  return 0;
}

uint64_t BlueFin::SensorsData::SetGyroOverflow(uint64_t this)
{
  *(unsigned char *)(this + 1956) = 1;
  return this;
}

uint64_t BlueFin::SensorsData::SetAccOverflow(uint64_t this)
{
  *(unsigned char *)(this + 1957) = 1;
  return this;
}

void BlueFin::GlPeSensStats::updateGnssState(BlueFin::GlPeSensStats *this, const BlueFin::GlPeNavGnssState *a2, double a3)
{
  double v6 = *((double *)this + 22);
  double v7 = *((double *)this + 6);
  int v8 = *((_DWORD *)a2 + 50);
  if (v6 - v7 >= 0.0)
  {
    int v10 = *((_DWORD *)this + 1);
    unsigned int v11 = v8 - *((_DWORD *)this + 46);
    double v12 = fmod(v6 - v7, 4294967300.0);
    if (v6 - v7 <= 4294967300.0) {
      double v12 = v6 - v7;
    }
    if (v12 < -4294967300.0) {
      double v12 = -fmod(-v12, 4294967300.0);
    }
    if (v12 < 0.0) {
      unsigned int v13 = --v12;
    }
    else {
      unsigned int v13 = v12;
    }
    unsigned int v14 = v10 + 2000 * v13;
    int v9 = v11 > 0x5DC && v11 < v14;
  }
  else
  {
    int v9 = 0;
  }
  if (*((unsigned char *)a2 + 240))
  {
    double v16 = sqrt(*((double *)a2 + 14) * *((double *)a2 + 14) + *((double *)a2 + 13) * *((double *)a2 + 13));
    double v17 = *((double *)this + 15);
    if (v16 >= v17) {
      int v9 = 1;
    }
    if (v9 != 1)
    {
      if (v16 >= v17) {
        double v17 = v16;
      }
      if (v17 * 3.0 >= *((float *)a2 + 32))
      {
        *((_DWORD *)this + 43) = 0;
        goto LABEL_32;
      }
      int v9 = -1;
    }
    *((_DWORD *)this + 43) = v9;
LABEL_32:
    *((double *)this + 22) = v16;
    *((_DWORD *)this + 46) = v8;
    return;
  }
  BOOL v18 = v6 > v7 * 0.5;
  if (v7 * 0.5 >= a3) {
    BOOL v18 = 0;
  }
  if ((v18 | v9)) {
    int v19 = 1;
  }
  else {
    int v19 = -1;
  }
  *((_DWORD *)this + 43) = v19;
}

uint64_t BlueFin::GlPeSensStats::UpdateTurningState(BlueFin::GlPeSensStats *this, int a2)
{
  char v2 = *((unsigned __int16 *)this + 81) < *(unsigned __int16 *)this;
  if (*((unsigned char *)this + 584))
  {
    uint64_t v3 = 0;
    char v2 = 0;
    do
    {
      double v4 = *(double *)((char *)this + v3 + 632) - *(double *)((char *)this + v3 + 680);
      if (v4 < 0.0) {
        double v4 = -v4;
      }
      v2 |= v4 > *((double *)this + 18);
      v3 += 96;
    }
    while (v3 != 288);
  }
  if (v2) {
    *((_DWORD *)this + 41) = a2;
  }
  *((_DWORD *)this + 42) = a2;
  return v2 & 1;
}

double BlueFin::GlPeSensStats::ProcessSensData(uint64_t a1, unsigned int a2, uint64_t a3, float64x2_t *a4)
{
  double v4 = a4->f64[0];
  __int16 v5 = *(_WORD *)(a3 + 40);
  double v6 = (double)v5;
  a4->f64[0] = v6;
  a4[1].f64[0] = v4;
  a4[1].f64[1] = -(v4 - ((double)a2 + v6) * 0.001);
  double v7 = *(float *)(a3 + 48);
  v8.f64[1] = 0.0;
  v8.f64[0] = v7 * v7;
  double v9 = 0.0;
  if (*(__int16 *)(a3 + 32) < 2)
  {
    double v14 = -1000.0;
    double v15 = 1000.0;
    double v19 = 1000.0;
  }
  else
  {
    __int16 v10 = 0;
    uint64_t v11 = *(unsigned __int16 *)(a3 + 32);
    uint64_t v12 = v11 - 1;
    unsigned int v13 = (float *)(a3 + 136);
    double v14 = -1000.0;
    double v15 = 1000.0;
    do
    {
      __int16 v16 = *((_WORD *)v13 - 4);
      int v17 = (__int16)(v16 - v5);
      if (v17 <= 0)
      {
        DeviceFaultNotify("glpe_sens_stats.cpp", 113, "ProcessSensData", (char)"sTimeDiff > 0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sens_stats.cpp", 113, "sTimeDiff > 0");
      }
      a4->f64[0] = (double)v16;
      v18.f64[0] = *v13;
      double v7 = v7 + v18.f64[0];
      if (v14 < v18.f64[0]) {
        double v14 = *v13;
      }
      if (v15 > v18.f64[0]) {
        double v15 = *v13;
      }
      v18.f64[1] = (v18.f64[0] - *(v13 - 22)) * 0.5;
      v10 += v17;
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v18, v18));
      v13 += 22;
      __int16 v5 = v16;
      --v12;
    }
    while (v12);
    double v19 = (double)v10 / ((double)(__int16)v11 + -1.0);
    double v7 = v7 / (double)(__int16)v11;
    float64x2_t v8 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(__int16)v11), 0));
    if (v8.f64[0] - v7 * v7 >= 0.0) {
      double v9 = v8.f64[0] - v7 * v7;
    }
  }
  a4->f64[0] = (double)a2 * 0.001;
  a4->f64[1] = v19 * 0.001;
  a4[2].f64[0] = v7;
  a4[2].f64[1] = sqrt(v9);
  double result = v14 - v15;
  a4[3].f64[0] = v14 - v15;
  a4[4] = v8;
  return result;
}

BOOL BlueFin::GlPeSensStats::CheckForLargeCorrection(BlueFin::GlPeSensStats *this)
{
  for (uint64_t i = 0; i != 288; i += 96)
  {
    if (*(double *)((char *)this + i + 688) <= 0.0) {
      return 1;
    }
  }
  uint64_t v2 = 0;
  while (1)
  {
    float v3 = *(double *)((char *)this + v2 + 632) - *(double *)((char *)this + v2 + 680);
    if (v3 < 0.0) {
      float v3 = -v3;
    }
    float v4 = *(double *)((char *)this + v2 + 688);
    float v5 = *((float *)this + 19) * sqrtf(v4);
    if (*((float *)this + 18) < v5) {
      float v5 = *((float *)this + 18);
    }
    if (v3 > v5) {
      break;
    }
    v2 += 96;
    if (v2 == 288)
    {
      *(void *)((char *)this + 993) = 0;
      *(void *)((char *)this + 988) = 0;
      return 1;
    }
  }
  char v8 = *((unsigned char *)this + 1000);
  if (v8)
  {
    uint64_t v9 = 0;
    __int16 v10 = (double *)((char *)this + 632);
    uint64_t v11 = (char *)this + 976;
    while (1)
    {
      float v12 = *(float *)&v11[v9];
      double v13 = *v10 - v12;
      float v14 = v10[7];
      float v15 = sqrtf(v14);
      if (v15 >= v12) {
        float v12 = v15;
      }
      *(float *)&v11[v9 + 12] = v12;
      if (v13 < 0.0) {
        double v13 = -v13;
      }
      if (v13 > v12) {
        break;
      }
      v9 += 4;
      v10 += 12;
      if (v9 == 12)
      {
        unsigned __int8 v16 = v8 + 1;
        *((unsigned char *)this + 1000) = v16;
        return *((unsigned __int8 *)this + 80) <= v16;
      }
    }
    uint64_t v6 = 0;
    *((unsigned char *)this + 1000) = 0;
  }
  else
  {
    uint64_t v17 = 0;
    *((unsigned char *)this + 1000) = 1;
    float64x2_t v18 = (double *)((char *)this + 688);
    do
    {
      float v19 = *(v18 - 7);
      float v20 = (float *)((char *)this + v17 + 976);
      *float v20 = v19;
      double v21 = *v18;
      v18 += 12;
      float v22 = v21;
      v20[3] = sqrtf(v22);
      v17 += 4;
    }
    while (v17 != 12);
    return 0;
  }
  return v6;
}

double BlueFin::GlPeSensStats::computeWeight(BlueFin::GlPeSensStats *this, unsigned int a2)
{
  double v2 = *((double *)this + 12 * a2 + 80);
  if (v2 > 0.0 && *((double *)this + 12 * a2 + 81) * 0.33 >= v2) {
    double v2 = *((double *)this + 12 * a2 + 81) * 0.33;
  }
  double result = 0.0;
  if (v2 > 0.0)
  {
    double v4 = *((double *)this + 12 * a2 + 86);
    double result = 1.0;
    if (v4 > 0.0) {
      return v4 / (v2 * v2 + v4);
    }
  }
  return result;
}

double BlueFin::GlPeSensStats::updateGyr(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, double result)
{
  if (a3 <= 2)
  {
    *(unsigned char *)(a1 + 585) = 1;
    double v5 = *(float *)(a4 + 88);
    if (fabs(v5 + 999.0) < 0.1)
    {
      if (a2 - *(_DWORD *)(a1 + 588) <= 0xEA60) {
        char v6 = *(unsigned char *)(a1 + 586) + 1;
      }
      else {
        char v6 = 1;
      }
      *(_DWORD *)(a1 + 588) = a2;
      *(unsigned char *)(a1 + 586) = v6;
    }
    if (fabs(v5 + 998.0) < 0.1) {
      *(unsigned char *)(a1 + 592) = 1;
    }
    return BlueFin::GlPeSensStats::ProcessSensData(a1, a2, a4, (float64x2_t *)(a1 + 96 * a3 + 600));
  }
  return result;
}

uint64_t BlueFin::GlPeSensStats::UpdateNoMotionState(uint64_t this, unsigned int a2, char a3)
{
  uint64_t v4 = this;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v51 = *MEMORY[0x263EF8340];
  do
  {
    *(double *)&v50[v5 + 24] = *(double *)(this + v6 + 232) - *(double *)(this + v5 + 488);
    *(double *)&v50[v5] = *(double *)(this + v6 + 632) - *(double *)(this + v5 + 952);
    v6 += 96;
    v5 += 8;
  }
  while (v6 != 288);
  if (*(unsigned char *)(this + 188))
  {
    uint64_t v7 = 0;
    char v8 = 0;
    unsigned __int8 v9 = 0;
    double v11 = *(double *)(this + 96);
    double v10 = *(double *)(this + 104);
    double v12 = *(double *)(this + 8);
    int v13 = *(unsigned __int8 *)(this + 1001);
    float v14 = (double *)(this + 560);
    uint64_t v15 = this + 240;
    char v16 = 1;
    do
    {
      double v17 = *(double *)(v15 + v7 - 8) - *(v14 - 9);
      if (v17 < 0.0) {
        double v17 = -v17;
      }
      if (v13)
      {
        if (v10 >= *(v14 - 3) * 3.0) {
          double v18 = *(v14 - 3) * 3.0;
        }
        else {
          double v18 = v10;
        }
        double v19 = *v14;
        double v20 = *v14 * 3.0;
        if (v11 < v20) {
          double v20 = v11;
        }
      }
      else
      {
        double v19 = *v14;
        double v18 = v10;
        double v20 = v11;
      }
      BOOL v21 = v17 < v20;
      double v22 = *(double *)(v15 + v7);
      if (v22 <= v18) {
        ++v9;
      }
      if (v22 <= v10 * 0.25) {
        ++v8;
      }
      double v23 = 1.0;
      if (v19 != v12) {
        double v23 = *(double *)(this + 24);
      }
      v16 &= v21;
      *float v14 = v19 + v23 * (v17 - v19);
      *(v14 - 9) = *(double *)(v15 + v7 - 8);
      ++v14;
      v7 += 96;
    }
    while (v7 != 288);
    if (v8) {
      BOOL v24 = 1;
    }
    else {
      BOOL v24 = v9 > 1u;
    }
    if (v24) {
      char v25 = v16;
    }
    else {
      char v25 = 0;
    }
  }
  else
  {
    this = BlueFin::GlPeSensStats::reset(this);
    char v25 = 0;
  }
  if (*(unsigned char *)(v4 + 585))
  {
    uint64_t v26 = 0;
    double v27 = *(double *)(v4 + 88);
    double v28 = *(double *)(v4 + 112);
    int v29 = (double *)(v4 + 640);
    uint64_t v30 = v4 + 952;
    char v31 = 1;
    int v32 = *(unsigned __int8 *)(v4 + 1001);
    do
    {
      double v33 = v27;
      if (v32)
      {
        double v33 = *(double *)(v30 + v26 - 24) * 3.0;
        if (v27 < v33) {
          double v33 = v27;
        }
      }
      BOOL v34 = *v29 < v33;
      double v35 = *(v29 - 1);
      double v36 = *(double *)(v30 + v26) - v35;
      if (v36 < 0.0) {
        double v36 = -v36;
      }
      if (v36 >= v28) {
        BOOL v34 = 0;
      }
      v31 &= v34;
      *(double *)(v30 + v26) = v35;
      v26 += 8;
      v29 += 12;
    }
    while (v26 != 24);
    if (v31)
    {
      if (*(_DWORD *)(v4 + 172) != -1) {
        goto LABEL_41;
      }
      uint64_t v45 = 0;
      unsigned __int8 v46 = 0;
      unsigned __int8 v47 = 0;
      do
      {
        double v48 = *(double *)(v4 + 648 + v45);
        if (v48 > *(double *)(v4 + 128)) {
          ++v47;
        }
        if (v48 > *(double *)(v4 + 136)) {
          ++v46;
        }
        v45 += 96;
      }
      while (v45 != 288);
      if (v46 <= 1u && (!v46 || v47 < 2u))
      {
LABEL_41:
        char v37 = 1;
        goto LABEL_44;
      }
    }
  }
  else
  {
    this = BlueFin::GlPeSensStats::reset(v4);
  }
  char v37 = 0;
LABEL_44:
  char v38 = v25 & v37;
  if (*(_DWORD *)(v4 + 172) == 1) {
    char v38 = 0;
  }
  if (v38 & 1) != 0 || (a3)
  {
    ++*(_WORD *)(v4 + 162);
LABEL_64:
    ++*(_WORD *)(v4 + 160);
  }
  else
  {
    *(_WORD *)(v4 + 162) = 0;
    if (*(_DWORD *)(v4 + 152) == 1)
    {
      uint64_t v39 = 0;
      double v40 = *(double *)(v4 + 112);
      long long v41 = (double *)v4;
      while (1)
      {
        double v42 = v41[79] - v41[85];
        if (v42 < 0.0) {
          double v42 = -v42;
        }
        if (v42 > v40 || v41[81] > *(double *)(v4 + 56)) {
          break;
        }
        double v43 = *(double *)&v50[v39];
        if (v43 < 0.0) {
          double v43 = -v43;
        }
        if (v43 > v40 || v41[30] > *(double *)(v4 + 64)) {
          break;
        }
        double v44 = *(double *)&v50[v39 + 24];
        if (v44 < 0.0) {
          double v44 = -v44;
        }
        if (v44 > *(double *)(v4 + 96)) {
          break;
        }
        v39 += 8;
        v41 += 12;
        if (v39 == 24) {
          goto LABEL_64;
        }
      }
      *(_WORD *)(v4 + 160) = 0;
    }
  }
  return this;
}

void BlueFin::GlPeSensStats::UpdateGyroBias(BlueFin::GlPeSensStats *this, unsigned int a2)
{
  unsigned int v4 = *((unsigned __int16 *)this + 81);
  if (*((_WORD *)this + 81))
  {
    BlueFin::GlPeSensStats::FilterSigmas((uint64_t)this);
    unsigned int v4 = *((unsigned __int16 *)this + 81);
  }
  if (v4 >= *(unsigned __int16 *)this)
  {
    if (BlueFin::GlPeSensStats::CheckForLargeCorrection(this))
    {
      uint64_t v5 = 222;
      uint64_t v6 = 512;
      uint64_t v7 = 688;
      do
      {
        double v8 = BlueFin::GlPeSensStats::computeWeight(this, (int)v5 - 222);
        if (v8 > 0.0)
        {
          unsigned __int8 v9 = (double *)((char *)this + v7);
          double v10 = *(double *)((char *)this + v7 - 8);
          double v11 = *(double *)((char *)this + v7 - 56) - v10;
          double v12 = v10 + v11 * v8;
          double v13 = v8 * *(double *)((char *)this + v7 - 48) * (v8 * *(double *)((char *)this + v7 - 48))
              + (1.0 - v8) * (1.0 - v8) * *(double *)((char *)this + v7)
              + v8 * (1.0 - v8) * (v11 * v11);
          *(v9 - 1) = v12;
          *unsigned __int8 v9 = v13;
          *((_DWORD *)this + v5) = a2;
        }
        float v14 = (void *)((char *)this + v6);
        *float v14 = *(void *)((char *)this + v6 + 24);
        v14[49] = *(void *)((char *)this + v6 + 416);
        ++v5;
        v6 += 8;
        v7 += 96;
      }
      while (v5 != 225);
    }
    else
    {
      *((_WORD *)this + 81) = *(_WORD *)this - 1;
    }
  }
  uint64_t v15 = 0;
  char v16 = (double *)((char *)this + 688);
  double v17 = (char *)this + 888;
  do
  {
    if ((unint64_t)*(unsigned int *)&v17[v15] + 1000 < a2 && *v16 > 0.0)
    {
      float v18 = *v16;
      float v19 = sqrtf(v18);
      *char v16 = (*((double *)this + 4) + v19) * (*((double *)this + 4) + v19);
      *(_DWORD *)&v17[v15] = a2;
    }
    v15 += 4;
    v16 += 12;
  }
  while (v15 != 12);
  uint64_t v20 = 0;
  while (1)
  {
    double v21 = *(double *)((char *)this + v20 + 688);
    if (v21 <= 0.0 || v21 > *((double *)this + 5)) {
      break;
    }
    v20 += 96;
    if (v20 == 288)
    {
      *((unsigned char *)this + 584) = 1;
      return;
    }
  }
}

uint64_t BlueFin::GlPeSensStats::FilterSigmas(uint64_t this)
{
  int v1 = *(unsigned __int8 *)(this + 1001);
  if (*(unsigned char *)(this + 1001)) {
    double v2 = *(double *)(this + 24);
  }
  else {
    double v2 = 1.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = this + 928;
  uint64_t v5 = (double *)(this + 536);
  do
  {
    double v6 = *(double *)(v4 + v3 - 688);
    if (!v1) {
      double v6 = v6 + v6;
    }
    *uint64_t v5 = *v5 + v2 * (v6 - *v5);
    double v7 = *(double *)(v4 + v3 - 288);
    if (!v1) {
      double v7 = v7 + v7;
    }
    v5[49] = v5[49] + v2 * (v7 - v5[49]);
    v3 += 96;
    ++v5;
  }
  while (v3 != 288);
  *(unsigned char *)(this + 1001) = 1;
  return this;
}

double BlueFin::GlPeContextThresholds::SetContext(uint64_t a1, unsigned int a2)
{
  if (!a2)
  {
    double v8 = "etContext != UNKNOWN";
    DeviceFaultNotify("glpe_sens_stats.cpp", 560, "SetContext", (char)"etContext != UNKNOWN");
    int v9 = 560;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 64) == a2) {
    return result;
  }
  if (a2 >= 5)
  {
    double v8 = "false";
    DeviceFaultNotify("glpe_sens_stats.cpp", 592, "SetContext", (char)"false");
    int v9 = 592;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_sens_stats.cpp", v9, v8);
  }
  double result = dbl_263BBDBC8[a2 - 1];
  uint64_t v3 = qword_263BBDBE8[a2 - 1];
  uint64_t v4 = qword_263BBDC08[a2 - 1];
  uint64_t v5 = qword_263BBDC28[a2 - 1];
  uint64_t v6 = qword_263BBDC48[a2 - 1];
  uint64_t v7 = qword_263BBDC68[a2 - 1];
  *(double *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = 0x4014000000000000;
  *(_DWORD *)(a1 + 64) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetFarStart(uint64_t this, char a2, int a3, int a4, int a5, int a6, int a7)
{
  *(unsigned char *)(this + 796) = a2;
  *(_DWORD *)(this + 800) = a3;
  *(_DWORD *)(this + 804) = a4;
  *(_DWORD *)(this + 808) = a5;
  *(_DWORD *)(this + 812) = a6;
  *(_DWORD *)(this + 816) = a7;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPlatformSpecificFlags(uint64_t this, int a2)
{
  if (!a2)
  {
    *(_DWORD *)(this + 32) = 0;
    return this;
  }
  if ((~a2 & 3) == 0)
  {
    double v2 = "(!otPsfSS) || (otPsfSS == PSF_SIGNAL_STRENGTH_REFERENCE) || (otPsfSS == PSF_SIGNAL_STRENGTH_HIGH) ||(otPsfSS =="
         " PSF_SIGNAL_STRENGTH_LOW)";
    DeviceFaultNotify("glsettings.cpp", 1057, "SetPlatformSpecificFlags", (char)"(!otPsfSS) || (otPsfSS == PSF_SIGNAL_STRENGTH_REFERENCE) || (otPsfSS == PSF_SIGNAL_STRENGTH_HIGH) ||(otPsfSS == PSF_SIGNAL_STRENGTH_LOW)");
    int v3 = 1057;
    goto LABEL_11;
  }
  if ((a2 & 0x10) != 0 && (a2 & 0x18) != 0x10)
  {
    double v2 = "(!otPsfClkVar) || (otPsfClkVar == PSF_CLOCK_VARIATION_REFERENCE) || (otPsfClkVar == PSF_CLOCK_VARIATION_MEDIUM)"
         " ||(otPsfClkVar == PSF_CLOCK_VARIATION_HIGH)";
    DeviceFaultNotify("glsettings.cpp", 1060, "SetPlatformSpecificFlags", (char)"(!otPsfClkVar) || (otPsfClkVar == PSF_CLOCK_VARIATION_REFERENCE) || (otPsfClkVar == PSF_CLOCK_VARIATION_MEDIUM) ||(otPsfClkVar == PSF_CLOCK_VARIATION_HIGH)");
    int v3 = 1060;
LABEL_11:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", v3, v2);
  }
  *(_DWORD *)(this + 32) = a2;
  if ((a2 & 0x18) != 0) {
    *(void *)(this + 904) = 0x4008000000000000;
  }
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetL5HardwareDelayInMeters(uint64_t this, float a2)
{
  *(unsigned char *)(this + 917) = 1;
  *(float *)(this + 984) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetGgtoInNs(uint64_t this, float a2)
{
  *(unsigned char *)(this + 919) = 1;
  *(float *)(this + 992) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::EnableGal14_18(uint64_t this, char a2)
{
  *(unsigned char *)(this + 923) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::EnableL5Msa(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26056) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::EnableL5Msb(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26057) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPrecisePositionMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 44) = a2;
  if (a2) {
    *(unsigned char *)(result + 265) = 1;
  }
  return result;
}

uint64_t BlueFin::GlSettingsImplData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 15;
  }
  if (v5 >= 0x10)
  {
    DeviceFaultNotify("glsettings.cpp", 1305, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 15");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 1305, "ucVersion >= 1 && ucVersion <= 15");
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v6 = v3;
    uint64_t v7 = v2;
    int v11 = 26;
    unsigned __int8 v12 = v5;
    uint64_t v13 = 0x1000000000000;
    double v10 = &unk_270EBA2F0;
    char v14 = v5;
    if (v5 < 0xD)
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v2 + 8));
      if (v5 < 2)
      {
LABEL_22:
        if (v12 >= 0xCu)
        {
          BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v10, *(_WORD *)(v7 + 60));
          if (v12 >= 0xFu)
          {
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 64));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 68));
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 72));
          }
        }
        BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v10, v6, 4);
        return 1;
      }
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v2 + 62));
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 8));
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(unsigned __int8 *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(unsigned __int8 *)(v7 + 17));
    if (v5 != 2)
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, 0);
      if (v5 >= 4)
      {
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 12));
        if (v5 != 4)
        {
          BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, *(_DWORD *)(v7 + 20));
          if (v5 >= 6)
          {
            int v8 = v5 >= 9
               ? *(_DWORD *)(v7 + 24)
               : *(_DWORD *)(v7 + 24) & 0xFFFFFBDF | (((*(_DWORD *)(v7 + 24) >> 5) & 1) << 10);
            BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v10, v8);
            if (v5 != 6)
            {
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 28));
              if (v5 >= 8)
              {
                BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 32));
                if (v5 >= 0xA)
                {
                  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 36));
                  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v10, *(unsigned char *)(v7 + 40));
                  if (v5 != 10) {
                    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v10, *(float *)(v7 + 44));
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_22;
  }
  return 1;
}

uint64_t BlueFin::GlSettingsImplData::Deserialize(BlueFin::GlSettingsImplData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 26) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 16 < 0xFFFFFFF1) {
    return 0;
  }
  if (v3 < 0xD) {
    char U8 = 0;
  }
  else {
    char U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  *((unsigned char *)this + 62) = U8;
  *((_DWORD *)this + 2) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) < 2u
    || (*((unsigned char *)this + 16) = BlueFin::GlSysLogEntry::GetU32(a2) != 0,
        *((unsigned char *)this + 17) = BlueFin::GlSysLogEntry::GetU32(a2) != 0,
        *((unsigned __int8 *)a2 + 12) < 3u)
    || (BlueFin::GlSysLogEntry::GetU32(a2), *((unsigned __int8 *)a2 + 12) < 4u)
    || (*((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2), *((unsigned __int8 *)a2 + 12) <= 4u))
  {
    *((_DWORD *)this + 5) = 0;
    goto LABEL_24;
  }
  *((_DWORD *)this + 5) = BlueFin::GlSysLogEntry::GetU32(a2);
  if (*((unsigned __int8 *)a2 + 12) < 6u)
  {
LABEL_24:
    *((_DWORD *)this + 6) = 0;
LABEL_25:
    *((_DWORD *)this + 7) = 1;
    goto LABEL_26;
  }
  unsigned int U32 = BlueFin::GlSysLogEntry::GetU32(a2);
  *((_DWORD *)this + 6) = U32;
  unsigned int v8 = *((unsigned __int8 *)a2 + 12);
  if (v8 < 9)
  {
    *((_DWORD *)this + 6) = (U32 >> 5) & 0x20 | U32 & 0xFFFFFBDF;
    if (v8 <= 6) {
      goto LABEL_25;
    }
  }
  *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetU8(a2);
  if (*((unsigned __int8 *)a2 + 12) <= 7u)
  {
LABEL_26:
    *((_DWORD *)this + 8) = 1082130432;
    goto LABEL_27;
  }
  *((float *)this + 8) = BlueFin::GlSysLogEntry::GetF32(a2);
  if (*((unsigned __int8 *)a2 + 12) <= 9u)
  {
LABEL_27:
    *((_DWORD *)this + 9) = 0;
    *((_DWORD *)this + 10) = 0;
    goto LABEL_28;
  }
  *((_DWORD *)this + 9) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_DWORD *)this + 10) = BlueFin::GlSysLogEntry::GetU8(a2);
  if (*((unsigned __int8 *)a2 + 12) <= 0xAu)
  {
LABEL_28:
    *((_DWORD *)this + 11) = 0;
    goto LABEL_29;
  }
  *((float *)this + 11) = BlueFin::GlSysLogEntry::GetF32(a2);
  if (*((unsigned __int8 *)a2 + 12) < 0xCu)
  {
LABEL_29:
    __int16 v11 = 1200;
LABEL_30:
    *((_WORD *)this + 30) = v11;
    goto LABEL_31;
  }
  int S16 = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_WORD *)this + 30) = S16;
  unsigned int v10 = *((unsigned __int8 *)a2 + 12);
  if (v10 <= 0xD && S16 == -1)
  {
    if (v10 == 12) {
      __int16 v11 = 1200;
    }
    else {
      __int16 v11 = 1203;
    }
    goto LABEL_30;
  }
  if (v10 >= 0xF)
  {
    *((_DWORD *)this + 16) = BlueFin::GlSysLogEntry::GetU32(a2);
    *((_DWORD *)this + 17) = BlueFin::GlSysLogEntry::GetU32(a2);
    int v12 = BlueFin::GlSysLogEntry::GetU32(a2);
    goto LABEL_32;
  }
LABEL_31:
  int v12 = 0;
  *((void *)this + 8) = 0;
LABEL_32:
  *((_DWORD *)this + 18) = v12;
  if (*((unsigned __int16 *)a2 + 11) != *((unsigned __int16 *)a2 + 10))
  {
    DeviceFaultNotify("glsettings.cpp", 1519, "Deserialize", (char)"otEntry.DataSize() == otEntry.ReadIdx()");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 1519, "otEntry.DataSize() == otEntry.ReadIdx()");
  }
  return 1;
}

uint64_t BlueFin::GlSettingsImpl::SetDynamicMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetAGCFreezeState(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1296) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetAGCForceValue(uint64_t this, char a2, int a3)
{
  *(unsigned char *)(this + 1306) = a2;
  *(_DWORD *)(this + 1308) = a3;
  return this;
}

size_t BlueFin::GlSettingsImpl::SetDbgParam(BlueFin::GlSettingsImpl *this, const char (*a2)[64], const char (*a3)[256])
{
  uint64_t v3 = *((int *)this + 2890);
  if ((int)v3 >= 32)
  {
    DeviceFaultNotify("glsettings.cpp", 1726, "SetDbgParam", (char)"m_iDbgParam < GL_MAX_DBG_NAME_VALUE_PAIRS");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 1726, "m_iDbgParam < GL_MAX_DBG_NAME_VALUE_PAIRS");
  }
  strlcpy((char *)this + 64 * v3 + 1319, (const char *)a2, 0x40uLL);
  size_t result = strlcpy((char *)this + 256 * (uint64_t)*((int *)this + 2890) + 3367, (const char *)a3, 0x100uLL);
  ++*((_DWORD *)this + 2890);
  return result;
}

size_t BlueFin::GlSettingsImpl::GetDbgParam(BlueFin::GlSettingsImpl *this, int a2, char (*__dst)[64], char (*a4)[256])
{
  if (*((_DWORD *)this + 2890) <= a2)
  {
    DeviceFaultNotify("glsettings.cpp", 1735, "GetDbgParam", (char)"iDbgParam < m_iDbgParam");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.cpp", 1735, "iDbgParam < m_iDbgParam");
  }
  uint64_t v6 = a2;
  strlcpy((char *)__dst, (const char *)this + 64 * (uint64_t)a2 + 1319, 0x40uLL);

  return strlcpy((char *)a4, (const char *)this + 256 * v6 + 3367, 0x100uLL);
}

uint64_t BlueFin::GlSettingsImpl::SetDbgMode(uint64_t this, int a2)
{
  if ((a2 - 1) >= 3) {
    int v2 = 0;
  }
  else {
    int v2 = a2;
  }
  *(_DWORD *)(this + 36) = v2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipBdsSignalType(uint64_t this, const unsigned __int8 (*a2)[63])
{
  uint64_t v2 = 0;
  *(unsigned char *)(this + 26164) = 1;
  do
  {
    *(unsigned char *)(this + 26097 + v2) = (*a2)[v2];
    ++v2;
  }
  while (v2 != 63);
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipGpsSignalType(uint64_t this, const unsigned __int8 (*a2)[32])
{
  uint64_t v2 = 0;
  *(unsigned char *)(this + 26163) = 1;
  do
  {
    *(unsigned char *)(this + 26065 + v2) = (*a2)[v2];
    ++v2;
  }
  while (v2 != 32);
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetSearch3G(uint64_t this, const unsigned __int8 (*a2)[3])
{
  for (uint64_t i = 0; i != 3; ++i)
    *(unsigned char *)(this + 26160 + i) = (*a2)[i];
  return this;
}

uint64_t BlueFin::GlSettingsImpl::GetOnChipBdsSignalType(uint64_t this, unsigned __int8 (*a2)[63])
{
  for (uint64_t i = 0; i != 63; ++i)
    (*a2)[i] = *(unsigned char *)(this + 26097 + i);
  return this;
}

uint64_t BlueFin::GlSettingsImpl::GetOnChipGpsSignalType(uint64_t this, unsigned __int8 (*a2)[32])
{
  for (uint64_t i = 0; i != 32; ++i)
    (*a2)[i] = *(unsigned char *)(this + 26065 + i);
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetForcedSvList(BlueFin::GlSettingsImpl *this, char *__s1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  memset(v48, 0, sizeof(v48));
  if (!strcmp(__s1, "all"))
  {
    char v37 = (void *)*((void *)this + 26);
    double v36 = (unsigned __int8 *)this + 208;
    memset(v37, 255, 4 * v36[8]);
    int ULong = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)v36, 0);
    BlueFin::GlSetBase::SetULong((uint64_t)v36, 0, ULong & 0xFFFFFFFE);
    unsigned int v39 = (unsigned __int16)(32 * (v36[8] & 0x3F) - 1);
    if (v39 >= 0xBE)
    {
      unsigned int v40 = 189;
      char v41 = -67;
      do
      {
        __int16 v42 = v41 & 0x1F;
        if ((v41 & 0x1F) != 0)
        {
          int v43 = BlueFin::GlSetBase::GetULong((BlueFin::GlSetBase *)v36, (v40 >> 5));
          BlueFin::GlSetBase::SetULong((uint64_t)v36, (v40 >> 5), v43 & ~(-1 << v42));
          LOWORD(v40) = v40 - v42;
        }
        else
        {
          BlueFin::GlSetBase::SetULong((uint64_t)v36, (v40 >> 5), 0);
        }
        char v41 = v40 + 32;
        unsigned int v40 = (unsigned __int16)(v40 + 32);
      }
      while (v40 < v39);
    }
    return 1;
  }
  else
  {
    unsigned int v4 = strchr(__s1, 91);
    unsigned int v5 = strchr(__s1, 93);
    uint64_t result = 0;
    if (v4 && v5)
    {
      unint64_t v7 = (unint64_t)v48;
      unsigned int v8 = v4 + 1;
      char v47 = 91;
      if (v8 >= v5)
      {
LABEL_66:
        *(unsigned char *)unint64_t v7 = 93;
        *((unsigned char *)this + 26313) = 1;
        return BlueFin::GlSvIdSet::SetStr((void **)this + 26, &v47);
      }
      else
      {
        do
        {
          do
          {
            int v9 = *(unsigned __int8 *)v8;
            if (v9 != 44 && v9 != 32) {
              break;
            }
            ++v8;
          }
          while (v8 < v5);
          uint64_t v10 = 0;
          do
          {
            uint64_t v11 = v10;
            int v12 = &v8[v10];
            uint64_t v13 = (char *)&v8[v10 + 1];
            if (v13 >= v5) {
              break;
            }
            unsigned int v14 = *v13;
            ++v10;
            BOOL v15 = v14 > 0x3A;
            uint64_t v16 = (1 << v14) & 0x400100100000000;
          }
          while (v15 || v16 == 0);
          __int16 v46 = 0;
          *(void *)__dst = 0;
          strlcpy(__dst, v8, v11 + 1);
          if (__dst[0] - 65 >= 0x1A)
          {
            if (v8 < v13)
            {
              do
              {
                if (v7 >= (unint64_t)&v48[254]) {
                  break;
                }
                BOOL v25 = v8 >= v12;
                char v26 = *v8++;
                *(unsigned char *)v7++ = v26;
              }
              while (!v25);
            }
          }
          else
          {
            unsigned int v8 = v13;
            if (__dst[1] - 65 >= 0x1A)
            {
              uint64_t v27 = 0;
              while (1)
              {
                unint64_t v28 = 0x4E454251525347uLL >> (8 * v27);
                if (v27 >= 7) {
                  LOBYTE(v28) = 120;
                }
                if (__dst[0] == (v28 & 0x7F)) {
                  break;
                }
                if (++v27 == 7) {
                  return 0;
                }
              }
              if (v27 == 7) {
                return 0;
              }
              unsigned __int8 v29 = atoi(&__dst[1]);
              int v31 = v29;
              if (v27 == 2)
              {
                if (v29 - 1 > 0x17 || *v13 == 58) {
                  return 0;
                }
                int v31 = (BlueFin::GlPeGloFcnOsnMgr::GetHardcodedFcn((BlueFin::GlPeGloFcnOsnMgr *)v29) + 8);
              }
              else if (!v29 {
                     || v27 > 6u
              }
                     || v29 > *(_DWORD *)&asc_263BBDFE4[4 * (char)v27])
              {
                return 0;
              }
              BlueFin::GlFormat::glsprintf((BlueFin::GlFormat *)v44, "%d", v30, v31 + BlueFin::GlSvId::s_aucGnss2minSvId[v27] - 1);
            }
            else
            {
              if (v13 != v5)
              {
                int v18 = *v13;
                if (v18 != 44 && v18 != 32) {
                  return 0;
                }
              }
              uint64_t v19 = 0;
              int v20 = 7;
              do
              {
                double v21 = "INV";
                if (v19 <= 6) {
                  double v21 = off_2655E0508[v19];
                }
                if (!strcmp(__dst, v21))
                {
                  int v20 = v19;
                  goto LABEL_48;
                }
                double v23 = "INV";
                if (v19 <= 6) {
                  double v23 = off_2655E0540[v19];
                }
                int v24 = strcmp(__dst, v23);
                if (!v24) {
                  int v20 = v19;
                }
                if (v19 > 5) {
                  break;
                }
                ++v19;
              }
              while (v24);
              if (v20 == 7) {
                return 0;
              }
LABEL_48:
              BlueFin::GlFormat::glsnprintf((BlueFin::GlFormat *)v44, (char *)0xA, "%d:%d", v22, BlueFin::GlSvId::s_aucGnss2minSvId[v20], BlueFin::GlSvId::s_aucGnss2maxSvId[v20]);
            }
            if (v7 >= (unint64_t)&v48[254])
            {
              double v33 = v44;
LABEL_59:
              if (*v33) {
                return 0;
              }
            }
            else
            {
              int v32 = &v48[-v7 + 254];
              double v33 = v44;
              while (1)
              {
                char v34 = *v33;
                if (!*v33) {
                  break;
                }
                ++v33;
                *(unsigned char *)v7++ = v34;
                if (!--v32) {
                  goto LABEL_59;
                }
              }
            }
          }
          if (v8 < v5 && v7 < (unint64_t)&v48[254])
          {
            char v35 = *v8++;
            *(unsigned char *)v7++ = v35;
          }
        }
        while (v8 < v5 && v7 < (unint64_t)&v48[254]);
        if ((unsigned char *)v7 != &v48[254]) {
          goto LABEL_66;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t BlueFin::GlSettingsImpl::EnableNmeaV411(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26248) = a2;
  return this;
}

__n128 BlueFin::GlSettingsImpl::SetSpoofCarrierThresh(__n128 *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 4);
  a1[1642].n128_u64[0] = *(void *)(a2 + 20);
  a1[1641] = result;
  a1[1640].n128_u16[6] = *(_WORD *)a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetAllowUnverifiedTimetoNvmem(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26296) = a2;
  return this;
}

size_t BlueFin::GlSettingsImpl::SetOnChipConfigParameters(BlueFin::GlSettingsImpl *this, const char *a2)
{
  return strlcpy((char *)this + 540, a2, 0x100uLL);
}

double BlueFin::GlSettingsImpl::SetAdcCapture(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 26316) = *(_WORD *)a2;
  double result = *(double *)(a2 + 4);
  *(double *)(a1 + 26320) = result;
  return result;
}

void BlueFin::GlSettingsImplData::~GlSettingsImplData(BlueFin::GlSettingsImplData *this)
{
}

void BlueFin::GlSettingsImpl::~GlSettingsImpl(BlueFin::GlSettingsImpl *this)
{
}

uint64_t BlueFin::GlSettingsImpl::SetRfAtt(uint64_t result, int a2)
{
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetRfLoss_dB_Ap(uint64_t this, float a2)
{
  *(float *)(this + 52) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetRfLoss_dB_Ap_L5(uint64_t this, float a2)
{
  *(float *)(this + 56) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetRfLoss_dB_Cp(uint64_t this, float a2)
{
  *(float *)(this + 60) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetRfLoss_dB_Cp_L5(uint64_t this, float a2)
{
  *(float *)(this + 64) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetDegreeThresholdForPhn(uint64_t this, float a2)
{
  *(float *)(this + 912) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPadNum(uint64_t this, char a2)
{
  *(unsigned char *)(this + 283) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPMMSettings(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 1298) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetUartFlowControlSettings(uint64_t result, unsigned int a2, int a3, int a4)
{
  if (a2 >= 3)
  {
    unsigned int v4 = "eFlowControl == UART_FLOW_CONTROL_DISABLED || eFlowControl == UART_HW_FLOW_CONTROL || eFlowControl == UART_SW_FLOW_CONTROL";
    DeviceFaultNotify("glsettings.h", 144, "SetUartFlowControlSettings", (char)"eFlowControl == UART_FLOW_CONTROL_DISABLED || eFlowControl == UART_HW_FLOW_CONTROL || eFlowControl == UART_SW_FLOW_CONTROL");
    int v5 = 144;
    goto LABEL_7;
  }
  if (a2 == 2 && a3 == a4)
  {
    unsigned int v4 = "eFlowControl != UART_SW_FLOW_CONTROL || (ucXonChar != ucXoffChar)";
    DeviceFaultNotify("glsettings.h", 145, "SetUartFlowControlSettings", (char)"eFlowControl != UART_SW_FLOW_CONTROL || (ucXonChar != ucXoffChar)");
    int v5 = 145;
LABEL_7:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glsettings.h", v5, v4);
  }
  *(_DWORD *)(result + 1312) = a2;
  *(unsigned char *)(result + 1316) = a3;
  *(unsigned char *)(result + 1317) = a4;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetGulpLogFacMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 152) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetGulpLogPriMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 156) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::EnableLtoCbeeQATest(uint64_t this)
{
  *(unsigned char *)(this + 856) = 1;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetNvMemWritePeriodMs(uint64_t this, int a2)
{
  *(_DWORD *)(this + 820) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetAsstFlags(uint64_t this, int a2)
{
  *(_DWORD *)(this + 828) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetCntinOffsetPpb(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 832) = a2;
  return this;
}

unsigned char *BlueFin::GlSettingsImpl::SetBurstMode(unsigned char *this, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  this[834] = a2;
  this[835] = a3;
  this[836] = a4;
  this[837] = a5;
  this[838] = a6;
  this[839] = a7;
  this[840] = a8;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::DisableGpsMeasurementEngine(uint64_t this)
{
  *(unsigned char *)(this + 896) = 1;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetWait4UserTimeoutMs(uint64_t this, int a2)
{
  *(_DWORD *)(this + 844) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetWarmStandbyTimeoutsMs(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 848) = a2;
  *(_DWORD *)(this + 852) = a3;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetTimeSyncGroupDelay(uint64_t this, float a2)
{
  *(float *)(this + 25952) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetSyncInPolarityHigh(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25956) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetLocationHubEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25964) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::DisableSensor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26049) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetNanoEngineKeepPatchLoaded(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25965) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBreadcrumbAccuracyMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 25980) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBreadcrumbSelfWakeupTime(uint64_t this, int a2)
{
  *(_DWORD *)(this + 25984) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBreadcrumbMaxMsmtsToRetrieve(uint64_t this, int a2)
{
  *(_DWORD *)(this + 25988) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetGeofenceEnableNoMotionDetection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25992) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBlankingMonitorParams(uint64_t this, int a2, int a3, int a4, __int16 a5, __int16 a6)
{
  *(_DWORD *)(this + 25996) = a2;
  *(_DWORD *)(this + 26000) = a3;
  *(_DWORD *)(this + 26004) = a4;
  *(_WORD *)(this + 26008) = a5;
  *(_WORD *)(this + 26010) = a6;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPvtBatchingMode(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 26012) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetHighPwrCwTestEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26014) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetLMSRollOverUpperLimit(uint64_t this, int a2)
{
  *(_DWORD *)(this + 26016) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::EnableOnChipMiCtrl(uint64_t this, char a2)
{
  *(unsigned char *)(this + 11566) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetBreadcrumbWakeupDistance(BlueFin::GlSettingsImpl *this, int a2)
{
  *((_DWORD *)this + 6494) = a2;
  if (a2) {
    return GlCustomLog(14, "BatchOptions WAKE_UP_ON_DISTANCE %u\n", a2);
  }

  return GlCustomLog(14, "BatchOptions DO_NOT_WAKE_UP_ON_DISTANCE\n");
}

uint64_t BlueFin::GlSettingsImpl::SetGLOBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26024) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetBDSBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26028) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetGALE5aBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26032) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetGALE5bBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26036) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetGPSL2cBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26040) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetNICBlankingType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26044) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::EnableNmeaReqId(uint64_t this)
{
  *(unsigned char *)(this + 11569) = 1;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetSwTrackAgc(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26048) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipStopNotification(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 26050) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipRfMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 26060) = a2;
  return result;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipLnaMask(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26064) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipMaxNumChannels(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 26174) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipAccMask(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 26176) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetLowGainAntenna(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26172) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetIndoorVdrPropTimeMsThresh(uint64_t this, int a2)
{
  *(_DWORD *)(this + 26180) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetTrackChannelForGPSGALOnlyMode(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 26184) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetIndoorVdrPropDistMThresh(uint64_t this, float a2)
{
  *(float *)(this + 26188) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipEnableSpeedFilter(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26208) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::TurnOnGalDataBits(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26209) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOnChipEnableAdaptivePmm(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26213) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetDisableBlindSrch(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26214) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetIndoorVdrMinSpeedMps(uint64_t this, float a2)
{
  *(float *)(this + 26192) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetIndoorVdrSpeedThreshMps(uint64_t this, float a2)
{
  *(float *)(this + 26196) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetTunnelVdrLowerSpeedMps(uint64_t this, float a2)
{
  *(float *)(this + 26200) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetTunnelVdrUpperSpeedMps(uint64_t this, float a2)
{
  *(float *)(this + 26204) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetGlitchRecoveryEnable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26211) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetRtcDutyCycleEnable(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26212) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetGnssPropagateInStandby(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26215) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetDisablePA(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26216) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPowerMode(uint64_t this, char a2, char a3)
{
  *(unsigned char *)(this + 26217) = a2;
  *(unsigned char *)(this + 26219) = a3;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetGalBitsAlwaysOn(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26218) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetRTICacheTimeoutSec(uint64_t this, int a2)
{
  *(_DWORD *)(this + 26280) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetPpsSyncInMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26284) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetExtBlankingPolarityToLow(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26285) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetEnableB1CSearch(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26332) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetEnableL1C(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26287) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetExtSuspendEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26288) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetTestFPGA(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26289) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetEnableVLP(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26290) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetEnableCoex(uint64_t this, char a2)
{
  unsigned int v2 = *(_DWORD *)(this + 88);
  BOOL v3 = v2 > 0x28;
  uint64_t v4 = (1 << v2) & 0x16000000000;
  if (!v3 && v4 != 0) {
    *(unsigned char *)(this + 26328) = a2;
  }
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetOscCalFromTempSensor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26330) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetEphValidityCheckDelayMs(uint64_t this, int a2)
{
  *(_DWORD *)(this + 824) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::GetSvIdMapVersion(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 70);
}

uint64_t BlueFin::GlSettingsImpl::SetInDualMeMode(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25966) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::SetShouldBeUsingOnChipMe(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26052) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::CurrentOnChipMeStateKnown(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 25968);
}

uint64_t BlueFin::GlSettingsImpl::SetLocationHubInitialized(uint64_t this, char a2)
{
  *(unsigned char *)(this + 25993) = a2;
  return this;
}

uint64_t BlueFin::GlSettingsImpl::GetOnChipRfMode(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned int *)this + 6515);
}

uint64_t BlueFin::GlSettingsImpl::GetOnChipLnaMask(BlueFin::GlSettingsImpl *this)
{
  return *((unsigned __int8 *)this + 26064);
}

uint64_t BlueFin::GlPeBdsUtcModelData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if ((v5 & 0xFE) != 2)
  {
    DeviceFaultNotify("glpe_bdstimemgr.cpp", 70, "SerializeImpl", (char)"ucVersion == 2 || ucVersion == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdstimemgr.cpp", 70, "ucVersion == 2 || ucVersion == 3");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 32;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    int v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v2 + 8));
    if (v5 >= 3) {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 12));
    }
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 25));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 26));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 27));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeBdsSysOffsetsData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (v4 && v4 != 3)
  {
    DeviceFaultNotify("glpe_bdstimemgr.cpp", 188, "SerializeImpl", (char)"ucVersion == 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdstimemgr.cpp", 188, "ucVersion == 3");
  }
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v9 = 33;
    char v10 = 3;
    uint64_t v11 = 0x1000000000000;
    unsigned int v8 = &unk_270EBA2F0;
    char v12 = 3;
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v8, *(_DWORD *)(v6 + 12));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v8, *(unsigned char *)(v6 + 16));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 20));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 22));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 24));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 26));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 28));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v8, *(_WORD *)(v6 + 30));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v8, v5, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeBdsSysOffsetsData::Deserialize(BlueFin::GlPeBdsSysOffsetsData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 33) {
    return 0;
  }
  unsigned int v3 = *((unsigned __int8 *)a2 + 12);
  if (v3 - 4 < 0xFFFFFFFD) {
    return 0;
  }
  if (v3 < 2 || (*((_WORD *)this + 4) = BlueFin::GlSysLogEntry::GetU16(a2), *((unsigned __int8 *)a2 + 12) < 3u))
  {
    *((_DWORD *)this + 3) = 0;
    int U8 = 3;
  }
  else
  {
    *((_DWORD *)this + 3) = BlueFin::GlSysLogEntry::GetU32(a2);
    int U8 = BlueFin::GlSysLogEntry::GetU8(a2);
  }
  *((_DWORD *)this + 4) = U8;
  *((_WORD *)this + 10) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_WORD *)this + 11) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_WORD *)this + 12) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_WORD *)this + 13) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_WORD *)this + 14) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((_WORD *)this + 15) = BlueFin::GlSysLogEntry::GetS16(a2);
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 249);
  return 1;
}

uint64_t BlueFin::GlPeBdsSingleSysOffsetData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_bdstimemgr.cpp", 380, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_bdstimemgr.cpp", 380, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 34;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    int v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 32));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

double BlueFin::GlPeBdsTimeMgr::ResetMgr(BlueFin::GlPeBdsTimeMgr *this)
{
  *(void *)&double result = *((void *)this + 1) & 0xFFFFFFFCFFFFFFFCLL;
  *((double *)this + 1) = result;
  *((_WORD *)this + 9) = 0;
  *((_DWORD *)this + 5) = 0;
  return result;
}

double BlueFin::GlPeBdsTimeMgr::ResetModels(BlueFin::GlPeBdsTimeMgr *this)
{
  *(void *)&double result = *((void *)this + 1) & 0xFFFFFF83FFFFFF83;
  *((double *)this + 1) = result;
  *((_DWORD *)this + 10) = 2;
  *((_WORD *)this + 22) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 20) = 2;
  *((_WORD *)this + 42) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 30) = 2;
  *((_WORD *)this + 62) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 40) = 2;
  *((_WORD *)this + 82) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 0;
  return result;
}

uint64_t BlueFin::GlPeBdsTimeMgr::OnSystemModeDetermined(uint64_t this, char a2)
{
  *(unsigned char *)(this + 16) = 1;
  *(unsigned char *)(this + 17) = a2;
  return this;
}

uint64_t BlueFin::GlPeBdsTimeMgr::Serialize(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 8);
  if ((v4 & 0x60) != 0)
  {
    char v5 = &unk_270EC93F8;
    __int16 v6 = 0;
    long long v7 = 0uLL;
    if ((v4 & 0x20) != 0)
    {
      __int16 v6 = *(_WORD *)(result + 44);
      *(int32x2_t *)((char *)&v7 + 4) = vrev64_s32(vmovn_s64(vcvtq_s64_f64(vmulq_f64(*(float64x2_t *)(result + 56), (float64x2_t)xmmword_263BBE000))));
    }
    if ((v4 & 0x40) != 0) {
      HIDWORD(v7) = *(_DWORD *)(result + 24);
    }
    double result = BlueFin::GlPeBdsUtcModelData::SerializeImpl((uint64_t)&v5, a2);
    int v4 = *(_DWORD *)(v3 + 8);
  }
  if ((v4 & 4) != 0)
  {
    double result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v3 + 72) + 24))(v3 + 72, a2, 0);
    int v4 = *(_DWORD *)(v3 + 8);
    if ((v4 & 8) == 0)
    {
LABEL_9:
      if ((v4 & 0x10) == 0) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v3 + 152) + 24))(v3 + 152, a2, 0);
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_9;
  }
  double result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v3 + 112) + 24))(v3 + 112, a2, 0);
  if ((*(_DWORD *)(v3 + 8) & 0x10) == 0) {
    return result;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v3 + 152) + 24))(v3 + 152, a2, 0);
}

uint64_t BlueFin::GlPeBdsTimeMgr::SetTime(uint64_t this, int a2, int a3)
{
  int v3 = *(_DWORD *)(this + 8);
  if ((v3 & 2) == 0 || *(_DWORD *)(this + 20) != a3)
  {
    *(_DWORD *)(this + 20) = a3;
    v3 |= 2u;
    int v4 = *(_DWORD *)(this + 12) | 2;
    *(_DWORD *)(this + 8) = v3;
    *(_DWORD *)(this + 12) = v4;
  }
  if ((v3 & 1) == 0 || *(unsigned __int16 *)(this + 18) != a2)
  {
    *(_WORD *)(this + 18) = a2;
    int v5 = *(_DWORD *)(this + 12) | 1;
    *(_DWORD *)(this + 8) = v3 | 1;
    *(_DWORD *)(this + 12) = v5;
  }
  return this;
}

uint64_t BlueFin::GlPeBdsTimeMgr::GetBds2GloSysOffsetS(uint64_t this, const BlueFin::GlBdsTime *a2)
{
  if ((*(unsigned char *)(this + 8) & 8) != 0 && a2)
  {
    if (*(_WORD *)(this + 124)) {
      return (*(uint64_t (**)(const BlueFin::GlBdsTime *))(*(void *)a2 + 32))(a2);
    }
  }
  return this;
}

void BlueFin::GlPeBdsUtcModelData::~GlPeBdsUtcModelData(BlueFin::GlPeBdsUtcModelData *this)
{
}

void BlueFin::GlPeBdsSysOffsetsData::~GlPeBdsSysOffsetsData(BlueFin::GlPeBdsSysOffsetsData *this)
{
}

void BlueFin::GlPeBdsSingleSysOffsetData::~GlPeBdsSingleSysOffsetData(BlueFin::GlPeBdsSingleSysOffsetData *this)
{
}

void BlueFin::GlPeBdsTimeMgr::~GlPeBdsTimeMgr(BlueFin::GlPeBdsTimeMgr *this)
{
}

BlueFin::GlUtcTime *BlueFin::GlDateTime::GlDateTime(BlueFin::GlUtcTime *this, void *a2, int a3)
{
  *(void *)this = 0;
  switch(a3)
  {
    case 0:
      *((void *)this + 1) = *a2;
      int v4 = &off_270EBC600;
      goto LABEL_8;
    case 1:
      *((void *)this + 1) = *a2;
      int v4 = &off_270EBF4E8;
      goto LABEL_8;
    case 2:
      *((void *)this + 1) = *a2;
      *(void *)this = &unk_270EC23C8;
      BlueFin::GlUtcTime::breakdownFct((uint64_t)this);
      return this;
    case 3:
      *((void *)this + 1) = *a2;
      int v4 = &off_270EBF538;
      goto LABEL_8;
    case 4:
      *((void *)this + 1) = *a2;
      int v4 = &off_270EBF588;
      goto LABEL_8;
    case 5:
      *((void *)this + 1) = *a2;
      int v4 = &off_270EBF080;
LABEL_8:
      *(void *)this = v4;
      return this;
    default:
      DeviceFaultNotify("glpe_datetime.cpp", 65, "GlDateTime", (char)"false");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_datetime.cpp", 65, "false");
  }
}

double BlueFin::GlDateTime::getByTimeSys@<D0>(double *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 >= 6)
  {
    DeviceFaultNotify("glpe_datetime.cpp", 82, "getByTimeSys", (char)"false");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_datetime.cpp", 82, "false");
  }
  double result = *a1;
  *a3 = *(void *)a1;
  return result;
}

uint64_t BlueFin::GlPeGalUtcModelData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_galtimemgr.cpp", 143, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galtimemgr.cpp", 143, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 95;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    int v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 30));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 28));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 29));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 31));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 32));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 33));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeGalGpsOffsetData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4 <= 1) {
    char v5 = 1;
  }
  else {
    char v5 = v4;
  }
  if (v4 >= 2)
  {
    DeviceFaultNotify("glpe_galtimemgr.cpp", 272, "SerializeImpl", (char)"ucVersion == 1");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_galtimemgr.cpp", 272, "ucVersion == 1");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v10 = 96;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    int v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 12));
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v9, *(_DWORD *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 20));
    BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 22));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 25));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeGalTimeMgr::ResetMgr(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(_WORD *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  return this;
}

__n128 BlueFin::GlPeGalTimeMgr::ResetModels(BlueFin::GlPeGalTimeMgr *this)
{
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 8) = 0;
  __n128 result = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  *((_WORD *)this + 44) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 21) = 0;
  *((unsigned char *)this + 56) = 0;
  *((unsigned char *)this + 96) = 0;
  return result;
}

uint64_t BlueFin::GlPeGalTimeMgr::SetGalileoDataPage(uint64_t this, const BlueFin::GlGalileoINavPage *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = 0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v4 = *((_DWORD *)a2 + 5);
  do
  {
    unsigned int v5 = *(_DWORD *)((char *)a2 + v3 + 24);
    *(unsigned int *)((char *)&v25 + v3) = __PAIR64__(v4, v5) >> 30;
    v3 += 4;
    unsigned int v4 = v5;
  }
  while (v3 != 12);
  unsigned int v6 = *((_DWORD *)a2 + 9);
  HIDWORD(v8) = *((_DWORD *)a2 + 8);
  LODWORD(v8) = v6;
  unsigned int v7 = v8 >> 30;
  unsigned int v9 = (v6 >> 22) | ((v8 >> 30) << 8);
  unsigned int v10 = v9 | v7 & 0xFFFF0000;
  unsigned int v11 = *((unsigned __int8 *)a2 + 10);
  if (v11 > 5)
  {
    if (v11 == 6)
    {
      uint64_t v14 = &unk_270EC9528;
      int v15 = 1;
      __int16 v16 = *(_WORD *)(this + 10);
      int v13 = 1000 * *(_DWORD *)(this + 12);
      int v19 = __PAIR64__(v25, v26) >> 26;
      int v17 = v13;
      int v18 = (char)(v26 >> 2);
      char v22 = (__PAIR64__(v26, v27) >> 2) >> 24;
      char v20 = v27 >> 18;
      char v21 = v27 >> 10;
      char v23 = v27 >> 2;
      unsigned int v24 = (__PAIR64__(v27, v7) >> 2) >> 29;
      *(_WORD *)((char *)&v24 + 1) = (v7 >> 23);
      this = BlueFin::GlPeGalTimeMgr::SetUtcModel((BlueFin::GlPeGalTimeMgr *)this, (const BlueFin::GlPeGalUtcModelData *)&v14);
      if (this && BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        return (*(uint64_t (**)(uint64_t, void, void))(*(void *)(v2 + 16) + 24))(v2 + 16, 0, 0);
      }
    }
    else if (v11 == 10)
    {
      uint64_t v14 = &unk_270EC9558;
      int v15 = 1;
      __int16 v16 = *(_WORD *)(this + 10);
      int v17 = 1000 * *(_DWORD *)(this + 12);
      LOWORD(v18) = (__PAIR64__(v27, v7) >> 10) >> 16;
      HIWORD(v18) = (__int16)(v10 >> 10) >> 4;
      LOBYTE(v19) = v9 >> 6;
      BYTE1(v19) = (v6 >> 22) & 0x3F;
      this = BlueFin::GlPeGalTimeMgr::SetGpsOffset((BlueFin::GlPeGalTimeMgr *)this, (const BlueFin::GlPeGalGpsOffsetData *)&v14);
      if (this)
      {
        if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
          return BlueFin::GlPeGalGpsOffsetData::SerializeImpl((uint64_t)&v14, 0);
        }
      }
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + 10))
    {
      if ((v25 & 0x3000000) != 0x2000000) {
        return this;
      }
      unsigned int v12 = v9 & 0xFFFFF | v7 & 0xF0000;
      goto LABEL_16;
    }
    if (v11 == 5 && (v27 & 0x6800000) == 0)
    {
      unsigned int v10 = v27 << 9;
      unsigned int v12 = (__PAIR64__(v27, v7) >> 11) >> 12;
LABEL_16:
      if (v12 <= 0x93A7F)
      {
        *(_WORD *)(this + 10) = v10 >> 20;
        *(_DWORD *)(this + 12) = v12;
        *(unsigned char *)(this + 8) = 1;
      }
    }
  }
  return this;
}

uint64_t BlueFin::GlPeGalTimeMgr::Serialize(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  uint64_t v3 = this;
  if ((*(_DWORD *)(this + 24) | 4) != 4) {
    this = (*(uint64_t (**)(void))(*(void *)(this + 16) + 24))();
  }
  if ((*(_DWORD *)(v3 + 72) | 4) != 4)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t, BlueFin::GlPeEngineCallBacks *, void))(*(void *)(v3 + 64) + 24);
    return v4(v3 + 64, a2, 0);
  }
  return this;
}

void BlueFin::GlPeGalUtcModelData::~GlPeGalUtcModelData(BlueFin::GlPeGalUtcModelData *this)
{
}

void BlueFin::GlPeGalGpsOffsetData::~GlPeGalGpsOffsetData(BlueFin::GlPeGalGpsOffsetData *this)
{
}

void BlueFin::GlPeGalTimeMgr::~GlPeGalTimeMgr(BlueFin::GlPeGalTimeMgr *this)
{
}

uint64_t BlueFin::GlPeGlnTimeData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= 4)
  {
    DeviceFaultNotify("glpe_glntimemgr.cpp", 164, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glntimemgr.cpp", 164, "ucVersion >= 1 && ucVersion <= 3");
  }
  uint64_t v6 = v3;
  if (v5 == 1)
  {
    int v10 = 31;
    char v11 = 1;
    uint64_t v12 = 0x1000000000000;
    unsigned int v9 = &unk_270EBA2F0;
    char v13 = 1;
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v3, 4);
  }
  else
  {
    uint64_t v7 = v2;
    int v10 = 31;
    char v11 = v5;
    uint64_t v12 = 0x1000000000000;
    unsigned int v9 = &unk_270EBA2F0;
    char v13 = v5;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v9, *(_WORD *)(v7 + 10));
    if (v5 >= 3) {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 12));
    }
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 16));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 24));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 32));
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v9, *(double *)(v7 + 40));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 48));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 49));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v9, *(unsigned char *)(v7 + 50));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v9, *(float *)(v7 + 52));
    BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v9, *(float *)(v7 + 56));
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v9, v6, 4);
  }
  return 1;
}

uint64_t BlueFin::GlPeGlnTimeMgr::CheckGlonassStringTime(BlueFin::GlPeGlnTimeMgr *this, unsigned int a2, int a3)
{
  uint64_t v6 = *((void *)this + 228);
  uint64_t v8 = v6 + 112 * a2;
  unsigned int v9 = (double *)(v8 + 96);
  int v10 = (double *)(v8 + 8 * a3 + 48);
  if (a3 == 14) {
    int v10 = v9;
  }
  double v11 = *v10 * 1000.0;
  uint64_t v12 = a2 >> 5;
  uint64_t v13 = 1 << (a2 & 0x1F);
  if ((v13 & *(_DWORD *)(*((void *)this + 232) + 4 * v12)) != 0)
  {
    double v14 = *(double *)(v6 + 112 * a2 + 64);
    double v15 = v11 + v14 * -1000.0;
    if (v15 <= 0.0)
    {
      double v16 = 0.0;
      if (v15 < 0.0) {
        double v16 = ceil(v15 + -0.5);
      }
    }
    else
    {
      double v16 = floor(v15 + 0.5);
    }
    double v17 = fmod(v16 + (double)(a3 - 2) * -2000.0, 30000.0);
    double v18 = -v17;
    if (v17 >= 0.0) {
      double v18 = v17;
    }
    if (v18 < 100.0)
    {
      uint64_t v19 = 1;
      goto LABEL_16;
    }
    unsigned int v20 = a2 + 52;
    if (a2 >= 0xE) {
      unsigned int v20 = 0;
    }
    GlCustomLog(14, "GlPeGlnTimeMgr(%u)[%u]:  string%d LMS%.f does not match string2 LMS %.f, dDiffModMs %.f\n", v20, **((_DWORD **)this + 1), a3, v11, v14 * 1000.0, v17);
  }
  uint64_t v19 = 0;
LABEL_16:
  if ((v13 & *(_DWORD *)(*((void *)this + 235) + 4 * v12)) != 0)
  {
    double v21 = *(double *)(*((void *)this + 228) + 112 * a2 + 72);
    double v22 = v11 + v21 * -1000.0;
    if (v22 <= 0.0)
    {
      double v23 = 0.0;
      if (v22 < 0.0) {
        double v23 = ceil(v22 + -0.5);
      }
    }
    else
    {
      double v23 = floor(v22 + 0.5);
    }
    double v24 = fmod(v23 + (double)(a3 - 3) * -2000.0, 30000.0);
    double v25 = -v24;
    if (v24 >= 0.0) {
      double v25 = v24;
    }
    if (v25 < 100.0) {
      return 1;
    }
    unsigned int v26 = a2 + 52;
    if (a2 >= 0xE) {
      unsigned int v26 = 0;
    }
    GlCustomLog(14, "GlPeGlnTimeMgr(%u)[%u]:  string%d LMS%.f does not match string2 LMS %.f, dDiffModMs %.f\n", v26, **((_DWORD **)this + 1), a3, v11, v21 * 1000.0, v24);
  }
  if (a3 > 5) {
    char v27 = 1;
  }
  else {
    char v27 = v19;
  }
  if ((v27 & 1) == 0)
  {
    uint64_t v28 = (char *)this + 1856;
    switch(a3)
    {
      case 1:
        uint64_t v28 = (char *)this + 1832;
        goto LABEL_37;
      case 2:
        goto LABEL_37;
      case 3:
        uint64_t v28 = (char *)this + 1880;
        goto LABEL_37;
      case 4:
        uint64_t v28 = (char *)this + 1904;
        goto LABEL_37;
      case 5:
        uint64_t v28 = (char *)this + 1928;
LABEL_37:
        BlueFin::GlSetBase::Remove((uint64_t)v28, a2);
        break;
      default:
        return 0;
    }
    return 0;
  }
  return v19;
}

void BlueFin::GlPeGlnTimeMgr::SetGlonassDataString(float32x2_t *this, const BlueFin::GlGlonassDataString *a2)
{
  unsigned int v2 = *((_DWORD *)a2 + 5);
  uint64_t v3 = (v2 >> 27) & 0xF;
  if ((v3 - 1) >= 5 && v3 != 14)
  {
    unsigned int v70 = "WantsString(ucStringNum)";
    DeviceFaultNotify("glpe_glntimemgr.cpp", 413, "SetGlonassDataString", (char)"WantsString(ucStringNum)");
    int v71 = 413;
    goto LABEL_139;
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 8);
  unsigned int v7 = v6 - 52;
  if ((v6 - 52) > 0xD)
  {
    unsigned int v70 = "ucIdx >= 0";
    DeviceFaultNotify("glpe_glntimemgr.cpp", 420, "SetGlonassDataString", (char)"ucIdx >= 0");
    int v71 = 420;
LABEL_139:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_glntimemgr.cpp", v71, v70);
  }
  uint64_t v9 = **(unsigned int **)&this[1];
  char v10 = *((unsigned char *)a2 + 9);
  float32x2_t v11 = this[228];
  switch((int)v3)
  {
    case 1:
      uint64_t v12 = *(void *)&v11 + 112 * v7;
      *(_DWORD *)uint64_t v12 = v2;
      *(_DWORD *)(v12 + 4) = *((_DWORD *)a2 + 6);
      *(_DWORD *)(v12 + 8) = *((_DWORD *)a2 + 7);
      *(_DWORD *)(*(void *)&this[229] + 4 * (v7 >> 5)) |= 1 << v7;
      *(_DWORD *)(v12 + 36) = v9;
      *(void *)(v12 + 56) = *((void *)a2 + 4);
      goto LABEL_42;
    case 2:
      double v25 = (char *)(*(void *)&v11 + 112 * v7 + 104);
      if ((v2 & 0x4000000) != 0)
      {
        char v27 = -2;
      }
      else
      {
        int v26 = *v25;
        if (v26 > 1) {
          goto LABEL_39;
        }
        char v27 = v26 + 1;
      }
      *double v25 = v27;
LABEL_39:
      *(_DWORD *)(*(void *)&this[232] + 4 * (v7 >> 5)) |= 1 << v7;
      *(void *)(*(void *)&v11 + 112 * v7 + 64) = *((void *)a2 + 4);
      goto LABEL_42;
    case 3:
      uint64_t v13 = (char *)(*(void *)&v11 + 112 * v7 + 104);
      if ((v2 & 0x800) != 0)
      {
        char v15 = -2;
      }
      else
      {
        int v14 = *v13;
        if (v14 > 1) {
          goto LABEL_36;
        }
        char v15 = v14 + 1;
      }
      *uint64_t v13 = v15;
LABEL_36:
      *(_DWORD *)(*(void *)&this[235] + 4 * (v7 >> 5)) |= 1 << v7;
      *(void *)(*(void *)&v11 + 112 * v7 + 72) = *((void *)a2 + 4);
      goto LABEL_42;
    case 4:
      uint64_t v28 = *(void *)&v11 + 112 * v7;
      *(_DWORD *)(v28 + 12) = v2;
      *(_DWORD *)(v28 + 16) = *((_DWORD *)a2 + 6);
      *(_DWORD *)(v28 + 20) = *((_DWORD *)a2 + 7);
      *(_DWORD *)(*(void *)&this[238] + 4 * (v7 >> 5)) |= 1 << v7;
      *(_DWORD *)(v28 + 40) = v9;
      *(void *)(v28 + 80) = *((void *)a2 + 4);
      goto LABEL_42;
    case 5:
      uint64_t v29 = *(void *)&v11 + 112 * v7;
      *(_DWORD *)(v29 + 24) = v2;
      uint64_t v30 = v29 + 24;
      *(_DWORD *)(v30 + 4) = *((_DWORD *)a2 + 6);
      *(_DWORD *)(v30 + 8) = *((_DWORD *)a2 + 7);
      *(_DWORD *)(*(void *)&this[241] + 4 * (v7 >> 5)) |= 1 << v7;
      *(_DWORD *)(v30 + 20) = v9;
      int v31 = (unsigned char *)(v30 + 80);
      if ((*(unsigned char *)(v30 + 10) & 8) != 0)
      {
        *int v31 = -2;
      }
      else
      {
        int v32 = (char)*v31;
        if (v32 > 1 || (*int v31 = v32 + 1, (v32 & 0x80000000) == 0))
        {
          this[16].i32[0] = 1;
          double v33 = this + 24;
          HIDWORD(v35) = *(_DWORD *)v30;
          LODWORD(v35) = *(_DWORD *)(v30 + 4);
          int v34 = v35 >> 16;
          uint64_t v36 = (v35 >> 16) & 0x7FFFFFFF;
          if (v34 < 0) {
            int v34 = -(int)v36;
          }
          BlueFin::GlPeGlnTimeMgr::stTauMgr::Update((uint64_t)v33, 2, v9, (double)v34 * 4.65661287e-10);
          HIDWORD(v38) = *(_DWORD *)(v30 + 4);
          LODWORD(v38) = *(_DWORD *)(v30 + 8);
          int v37 = v38 >> 10;
          if (v37 < 0) {
            int v39 = -((v37 >> 10) & 0x1FFFFF);
          }
          else {
            int v39 = v37 >> 10;
          }
          BlueFin::GlPeGlnTimeMgr::TauGpsMgr::Update((uint64_t)&this[17], 2u, v9, (double)v39 * 9.31322575e-10);
        }
      }
      *(void *)(*(void *)&v11 + 112 * v7 + 88) = *((void *)a2 + 4);
      goto LABEL_42;
    case 14:
      *(void *)(*(void *)&v11 + 112 * v7 + 96) = *((void *)a2 + 4);
      if ((*((_DWORD *)a2 + 3) % 0x249F0u - 120000) >> 4 > 0x752) {
        goto LABEL_42;
      }
      int8x8_t v16 = (int8x8_t)vdup_n_s32(v2);
      int8x8_t v17 = (int8x8_t)vshl_u32((uint32x2_t)v16, (uint32x2_t)0xFFFFFFFAFFFFFFF0);
      int8x8_t v18 = (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v16, (int8x8_t)0x800004000000));
      int8x8_t v19 = vorr_s8(vand_s8(vand_s8(v17, (int8x8_t)0x3FF000007FFLL), v18), vbic_s8((int8x8_t)vneg_s32((int32x2_t)vand_s8(v17, (int8x8_t)0x1FF000003FFLL)), v18));
      v20.i64[0] = v19.i32[0];
      v20.i64[1] = v19.i32[1];
      float32x2_t v21 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v20), (float64x2_t)xmmword_263BBE1A0));
      if (fabsf(v21.f32[0]) > 0.9 || v21.f32[1] < -0.0045 || v21.f32[1] > 0.0035)
      {
        double v75 = this[31].f32[0];
        double v76 = this[31].f32[1];
        uint64_t v73 = v9;
        uint64_t v74 = this[30].i8[1];
        uint64_t v72 = v6;
        uint64_t v45 = "GlPeGlnTimeMgr(%hu)[%u]:  [Invalid] Kp:%d  B1:%.6f B2:%.6f\n";
        goto LABEL_64;
      }
      int v22 = v2 << 26;
      int v23 = (int)(v2 << 26) >> 30;
      __int8 v24 = this[3].i8[5];
      if ((v24 & 4) != 0)
      {
        int v47 = this[30].i8[1];
        if ((this[3].i8[5] & 8) != 0)
        {
          if (v23 == v47)
          {
            this[30].i8[2] = 0;
          }
          else
          {
            unsigned int v49 = ++this[30].i8[2];
            if (v49 >= 3)
            {
              this[3].i8[5] = v24 & 0xF7;
              this[30].i8[1] = v22 >> 30;
            }
          }
        }
        else if (v23 == v47)
        {
          this[3].i8[5] = v24 | 8;
          this[30].i8[2] = 0;
          unsigned int v83 = 0;
          unsigned __int8 v82 = 0;
          unsigned __int16 v81 = 0;
          unsigned int v80 = 0;
          if (BlueFin::GlPeGlnTimeMgr::GetInitialTime((BlueFin::GlPeGlnTimeMgr *)this, &v83, &v82, &v81, &v80))
          {
            if (v82 && v81 && v81 <= 0x5B5u && v80 <= 0x5265BFF)
            {
              LODWORD(v48) = this[4].i32[1];
              BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)v79, v82, v81, (double)v48 * 0.001);
              BlueFin::GlTimeDelta::GlTimeDelta((BlueFin::GlTimeDelta *)v78, (double)(v9 - v83) * 0.001);
              BlueFin::GlWeekTowTime::operator+=((uint64_t)v79, v78);
              BlueFin::GlPeGlnTimeMgr::serialize((BlueFin::GlPeGlnTimeMgr *)this, 0, (const BlueFin::GlGlnsTime *)v79, 0);
            }
            else
            {
              __int8 v60 = this[3].i8[1];
              __int8 v61 = this[3].i8[2];
              this[3].i8[0] &= 0xF3u;
              this[3].i8[1] = v60 & 0xF3;
              this[3].i8[2] = v61 & 0xF3;
            }
          }
          GlCustomLog(15, "GlPeGlnTimeMgr(%hu)[%u]:  [Verified] Kp:%d  B1:%.6f B2:%.6f\n");
        }
        else
        {
          this[3].i8[5] = v24 & 0xFB;
        }
      }
      else
      {
        this[30].i8[4] = 1;
        this[31] = v21;
        if (!this[30].i8[0] || v23 != this[30].i8[1]) {
          this[30].i8[3] = 1;
        }
        this[30].i8[0] = 1;
        this[30].i8[1] = v22 >> 30;
        this[3].i8[5] = v24 | 4;
        GlCustomLog(15, "GlPeGlnTimeMgr(%hu)[%u]:  [Unverified] Kp:%d  B1:%.6f B2:%.6f\n");
      }
LABEL_42:
      if (this[2].i32[1] != -7200001) {
        return;
      }
      int v40 = *(unsigned __int8 *)(*(void *)&v11 + 112 * v7 + 104);
      if (!*(unsigned char *)(*(void *)&v11 + 112 * v7 + 104))
      {
        uint64_t v72 = v6;
        uint64_t v73 = v9;
        uint64_t v45 = "GlPeGlnTimeMgr(%hu)[%u]: SV health unknown so cannot use for time yet\n";
LABEL_64:
        uint64_t v46 = 15;
LABEL_65:
        GlCustomLog(v46, v45, v72, v73, v74, *(void *)&v75, *(void *)&v76);
        return;
      }
      if ((v40 & 0x80) != 0)
      {
        BlueFin::GlSetBase::Remove((uint64_t)&this[229], (__int16)v7);
        BlueFin::GlSetBase::Remove((uint64_t)&this[238], (__int16)v7);
        BlueFin::GlSetBase::Remove((uint64_t)&this[241], (__int16)v7);
        uint64_t v72 = v6;
        uint64_t v73 = v9;
        uint64_t v45 = "GlPeGlnTimeMgr(%hu)[%u]: SV not healthy so cannot use for time\n";
        goto LABEL_64;
      }
      if (v40 != 2)
      {
        uint64_t v72 = v6;
        uint64_t v73 = v9;
        uint64_t v45 = "GlPeGlnTimeMgr(%hu)[%u]: SV health not verified so cannot use for time yet\n";
        goto LABEL_64;
      }
      if ((*((_WORD *)a2 + 5) & 1) == 0) {
        return;
      }
      int v77 = *((_DWORD *)a2 + 3);
      double v41 = *((double *)a2 + 4) * 1000.0 + 0.5;
      double v42 = fmod(v41, 4294967300.0);
      if (v41 <= 4294967300.0) {
        double v42 = v41;
      }
      if (v42 < -4294967300.0) {
        double v42 = -fmod(-v42, 4294967300.0);
      }
      if (v42 < 0.0) {
        unsigned int v43 = --v42;
      }
      else {
        unsigned int v43 = v42;
      }
      if (!v43)
      {
        unsigned int v43 = BlueFin::GlPeGlnTimeMgr::computeLocalTimeStampMs((BlueFin::GlPeGlnTimeMgr *)this, a2);
        if (!v43)
        {
          uint64_t v73 = v9;
          uint64_t v74 = v3;
          uint64_t v72 = v6;
          uint64_t v45 = "GlPeGlnTimeMgr(%hu)[%u]:  computeLocalTimeStampMs failed for string number %u\n";
          goto LABEL_79;
        }
      }
      if ((BlueFin::GlPeGlnTimeMgr::CheckGlonassStringTime((BlueFin::GlPeGlnTimeMgr *)this, (v6 - 52), v3) & 1) == 0)
      {
        uint64_t v73 = v9;
        uint64_t v74 = v3;
        uint64_t v72 = v6;
        uint64_t v45 = "GlPeGlnTimeMgr(%hu)[%u]:  CheckGlonassStringTime failed for string number %u\n";
LABEL_79:
        uint64_t v46 = 13;
        goto LABEL_65;
      }
      switch((int)v3)
      {
        case 1:
          int v44 = v77;
          if ((this[3].i8[0] & 8) == 0)
          {
            int v50 = 60000 * ((*((_DWORD *)a2 + 5) >> 12) & 0x3F)
                + 3600000 * ((*((_DWORD *)a2 + 5) >> 18) & 0x1F)
                + (((int)(*((_DWORD *)a2 + 5) << 20) >> 31) & 0x7530);
            if (v77 == v50) {
              BlueFin::GlPeGlnTimeMgr::ProcessSystemTime((uint64_t)this, v43, v77);
            }
            else {
              GlCustomLog(13, "GlPeGlnTimeMgr(%hu)[%u]:  System Time in string/ME mismatch: %u!=%u\n", v6, v9, v77, v50);
            }
          }
          BlueFin::GlSetBase::Remove((uint64_t)&this[229], (__int16)v7);
          goto LABEL_104;
        case 2:
        case 3:
          int v44 = v77;
          if ((this[3].i8[0] & 8) == 0) {
            BlueFin::GlPeGlnTimeMgr::ProcessString1((BlueFin::GlPeGlnTimeMgr *)this, v10, v43, v77);
          }
LABEL_104:
          BlueFin::GlPeGlnTimeMgr::ProcessString4((BlueFin::GlPeGlnTimeMgr *)this, v10, v43, v44);
          double v62 = (BlueFin::GlPeGlnTimeMgr *)this;
          char v63 = v10;
          goto LABEL_122;
        case 4:
          int v44 = v77;
          if ((this[3].i8[0] & 8) == 0)
          {
            BlueFin::GlPeGlnTimeMgr::ProcessString1((BlueFin::GlPeGlnTimeMgr *)this, v10, v43, v77);
            if (!this[3].i8[0]) {
              goto LABEL_121;
            }
          }
          __int8 v51 = this[3].i8[1];
          if ((v51 & 8) != 0) {
            goto LABEL_121;
          }
          unsigned int v52 = this[4].u32[0];
          if (v43 <= v52) {
            goto LABEL_121;
          }
          HIDWORD(v54) = *((_DWORD *)a2 + 6);
          LODWORD(v54) = *((_DWORD *)a2 + 7);
          unsigned int v53 = v54 >> 5;
          if ((v53 >> 21) - 1462 <= 0xFFFFFA4A)
          {
            GlCustomLog(13, "GlPeGlnTimeMgr(%hu)[%u]:  Nt out of range:%hu\n");
LABEL_107:
            long long v64 = this + 238;
            goto LABEL_114;
          }
          if (v43 - v52 > 0x5265BFF)
          {
            GlCustomLog(13, "GlPeGlnTimeMgr(%hu)[%u]:  DeltaAsicTimeMs on string 4 exceeded:%u\n");
            goto LABEL_107;
          }
          if (!this[3].i8[1])
          {
            this[5].i16[0] = v53 >> 21;
            this[5].i32[1] = v77;
            char v66 = 4;
            goto LABEL_119;
          }
          int v65 = this[5].u16[0];
          if (v65 == v53 >> 21)
          {
            char v66 = v51 | 8;
LABEL_119:
            this[3].i8[1] = v66;
            goto LABEL_121;
          }
          this[3].i8[1] = v51 & 0xFB;
          GlCustomLog(12, "GlPeGlnTimeMgr(%hu)[%u]:  NT mismatch detected!  %hu!=%hu\n", v6, v9, v65, v53 >> 21);
LABEL_121:
          BlueFin::GlSetBase::Remove((uint64_t)&this[238], (__int16)v7);
          char v63 = v10;
          double v62 = (BlueFin::GlPeGlnTimeMgr *)this;
LABEL_122:
          BlueFin::GlPeGlnTimeMgr::ProcessString5(v62, v63, v43, v44);
LABEL_123:
          if ((this[3].i8[0] & 8) == 0 || (this[3].i8[1] & 8) == 0 || (this[3].i8[2] & 8) == 0 || !this[19].i8[0]) {
            return;
          }
          __int32 v68 = this[2].i32[0];
          if (v68 == -7200001)
          {
            this[2].i32[0] = v9;
LABEL_132:
            unsigned int v83 = 0;
            unsigned __int8 v82 = 0;
            unsigned __int16 v81 = 0;
            if (BlueFin::GlPeGlnTimeMgr::GetInitialTime((BlueFin::GlPeGlnTimeMgr *)this, &v83, &v82, &v81, &v80))
            {
              LODWORD(v69) = this[4].i32[1];
              BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)v79, v82, v81, (double)v69 * 0.001);
              BlueFin::GlTimeDelta::GlTimeDelta((BlueFin::GlTimeDelta *)v78, (double)(v9 - v83) * 0.001);
              BlueFin::GlWeekTowTime::operator+=((uint64_t)v79, v78);
              BlueFin::GlPeGlnTimeMgr::serialize((BlueFin::GlPeGlnTimeMgr *)this, 0, (const BlueFin::GlGlnsTime *)v79, v68 != -7200001);
            }
            return;
          }
          if (this[2].i32[1] == -7200001 && (v9 - v68) >= 0x61A9)
          {
            this[2].i32[1] = v9;
            goto LABEL_132;
          }
          break;
        case 5:
          int v55 = v77;
          if ((this[3].i8[0] & 8) == 0) {
            BlueFin::GlPeGlnTimeMgr::ProcessString1((BlueFin::GlPeGlnTimeMgr *)this, v10, v43, v77);
          }
          if (!this[3].i8[1]) {
            goto LABEL_137;
          }
          if (!this[3].i8[0]) {
            goto LABEL_137;
          }
          __int8 v56 = this[3].i8[2];
          if ((v56 & 8) != 0) {
            goto LABEL_137;
          }
          unsigned __int32 v57 = this[4].u32[0];
          unsigned int v58 = v43 - v57;
          if (v43 <= v57) {
            goto LABEL_137;
          }
          int v59 = (*((_DWORD *)a2 + 6) >> 10) & 0x1F;
          if ((v59 - 13) > 0xFFFFFFF3)
          {
            if (v58 <= 0x5265BFF)
            {
              if (this[3].i8[2])
              {
                int v67 = this[6].u8[0];
                if (v67 == v59)
                {
                  this[3].i8[2] = v56 | 8;
                }
                else
                {
                  this[3].i8[2] = v56 & 0xFB;
                  GlCustomLog(12, "GlPeGlnTimeMgr(%hu)[%u]:  N4 mismatch detected!  %d!=%d\n", v6, v9, v67, v59);
                }
                int v55 = v77;
              }
              else
              {
                this[6].i8[0] = v59;
                int v55 = v77;
                this[6].i32[1] = v77;
                this[3].i8[2] = 4;
              }
LABEL_137:
              BlueFin::GlSetBase::Remove((uint64_t)&this[241], (__int16)v7);
              BlueFin::GlPeGlnTimeMgr::ProcessString4((BlueFin::GlPeGlnTimeMgr *)this, v10, v43, v55);
              goto LABEL_123;
            }
            GlCustomLog(13, "GlPeGlnTimeMgr(%hu)[%u]:  DeltaAsicTimeMs on string 5 exceeded:%u\n");
          }
          else
          {
            GlCustomLog(13, "GlPeGlnTimeMgr(%hu)[%u]:  N4 out of range:%u\n");
          }
          long long v64 = this + 241;
LABEL_114:
          BlueFin::GlSetBase::Remove((uint64_t)v64, (__int16)v7);
          return;
        case 14:
          goto LABEL_123;
        default:
          unsigned int v70 = "false";
          DeviceFaultNotify("glpe_glntimemgr.cpp", 806, "SetGlonassDataString", (char)"false");
          int v71 = 806;
          goto LABEL_139;
      }
      return;
    default:
      goto LABEL_42;
  }
}

uint64_t BlueFin::GlPeGlnTimeMgr::GetInitialTime(BlueFin::GlPeGlnTimeMgr *this, unsigned int *a2, unsigned __int8 *a3, unsigned __int16 *a4, unsigned int *a5)
{
  if ((*((unsigned char *)this + 24) & 8) == 0 || (*((unsigned char *)this + 25) & 8) == 0 || (*((unsigned char *)this + 26) & 8) == 0)
  {
    uint64_t result = 0;
    *a2 = -7200001;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    return result;
  }
  *a2 = *((_DWORD *)this + 8);
  *a3 = *((unsigned char *)this + 48);
  unsigned int v6 = *((unsigned __int16 *)this + 20);
  *a4 = v6;
  *a5 = *((_DWORD *)this + 9);
  int v7 = *((_DWORD *)this + 9);
  int v8 = *((_DWORD *)this + 11) - v7;
  if (v8 >= -43199999)
  {
    if (v8 <= 43200000)
    {
      LOWORD(v6) = *a4;
      goto LABEL_15;
    }
    if (v6 < 0x5B5) {
      LOWORD(v6) = v6 + 1;
    }
    else {
      LOWORD(v6) = 1;
    }
  }
  else
  {
    BOOL v9 = v6-- != 0;
    if (v6 == 0 || !v9) {
      LOWORD(v6) = 1461;
    }
  }
  *a4 = v6;
LABEL_15:
  int v10 = *((_DWORD *)this + 13) - v7;
  if (v10 < -43199999 && (unsigned __int16)v6 == 1461)
  {
    --*a3;
    return 1;
  }
  else
  {
    uint64_t result = 1;
    if (v10 > 43200000 && (unsigned __int16)v6 == 1) {
      ++*a3;
    }
  }
  return result;
}

BlueFin::GlTimeDelta *BlueFin::GlTimeDelta::GlTimeDelta(BlueFin::GlTimeDelta *this, double a2)
{
  double v4 = fabs(a2);
  double v5 = fmod(v4, 1.0);
  double v6 = v5 * 4294967300.0 + 0.5;
  unsigned int v7 = v6;
  if (v6 >= 4294967300.0) {
    unsigned int v7 = -1;
  }
  *(_DWORD *)this = v7;
  if (v5 < 0.0 || v5 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  *((_DWORD *)this + 1) = v4;
  *((unsigned char *)this + 8) = a2 < 0.0;
  return this;
}

uint64_t BlueFin::GlWeekTowTime::operator+=(uint64_t result, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  unsigned int v3 = *(_DWORD *)(result + 12);
  unsigned int v4 = a2[1];
  if (*((unsigned char *)a2 + 8))
  {
    unsigned int v5 = *a2;
    int v6 = v3 - v4;
    if (v3 > v4 || (v3 == v4 ? (BOOL v7 = v2 >= v5) : (BOOL v7 = 0), v7))
    {
      BOOL v7 = v2 >= v5;
      LODWORD(v2) = v2 - v5;
      int v10 = !v7;
      int v9 = v6 - v10;
    }
    else
    {
      if (v4 - v3 != v2 > v5 || v5 != v2)
      {
        DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_datetime.h", 425, "!tDelta.isNegative()");
      }
      int v9 = 0;
      LODWORD(v2) = 0;
    }
  }
  else
  {
    v2 += *a2;
    int v9 = v4 + v3 + HIDWORD(v2);
  }
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v9;
  return result;
}

double BlueFin::GlPeGlnTimeMgr::serialize(BlueFin::GlPeGlnTimeMgr *this, BlueFin::GlPeEngineCallBacks *a2, const BlueFin::GlGlnsTime *a3, int a4)
{
  float32x2_t v21 = (void (**)(void **, BlueFin::GlPeEngineCallBacks *, void))&unk_270EC9610;
  char v22 = 0;
  __int16 v23 = 0;
  int v24 = 0;
  char v25 = 0;
  double v26 = 0.0;
  char v27 = 0;
  unint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  if (a3)
  {
    int v8 = 0;
    if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
      && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
    {
      if (*((_DWORD *)a3 + 3) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
        int v8 = -1;
      }
      else {
        int v8 = 0;
      }
    }
    int v9 = 0;
    char v22 = ((*(unsigned int (**)(const BlueFin::GlGlnsTime *))(*(void *)a3 + 32))(a3) + v8) / 0x7861F80
        + 1;
    if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
      && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
    {
      if (*((_DWORD *)a3 + 3) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
        int v9 = -1;
      }
      else {
        int v9 = 0;
      }
    }
    unsigned int v10 = (((203613265
                         * (unint64_t)(((*(unsigned int (**)(const BlueFin::GlGlnsTime *))(*(void *)a3 + 32))(a3)
                                             + v9)
                                            % 0x7861F80)) >> 32) >> 12)
        + 1;
  }
  else
  {
    char v22 = *((unsigned char *)this + 57);
    unsigned int v10 = *((unsigned __int16 *)this + 29);
  }
  __int16 v23 = v10;
  int v12 = *((_DWORD *)this + 32);
  int v24 = v12;
  int v13 = *((unsigned __int8 *)this + 208);
  char v25 = *((unsigned char *)this + 208);
  double v14 = *((double *)this + 27);
  double v26 = v14;
  int v15 = *((unsigned __int8 *)this + 152);
  char v27 = *((unsigned char *)this + 152);
  double v16 = *((double *)this + 20);
  *(double *)uint64_t v28 = v16;
  int v17 = *((unsigned __int8 *)this + 240);
  double v28[8] = *((unsigned char *)this + 240);
  int v18 = *((unsigned __int8 *)this + 241);
  v28[9] = *((unsigned char *)this + 241);
  int v19 = *((unsigned __int8 *)this + 244);
  v28[10] = *((unsigned char *)this + 244);
  float v20 = *((float *)this + 62);
  LODWORD(result) = *((_DWORD *)this + 63);
  unint64_t v29 = __PAIR64__(LODWORD(result), LODWORD(v20));
  if (a2 || !a4)
  {
    if (a2)
    {
LABEL_32:
      v21[3]((void **)&v21, a2, 0);
      goto LABEL_33;
    }
  }
  else if (v22 == *((unsigned char *)this + 72) {
         && v10 == *((unsigned __int16 *)this + 37)
  }
         && v12 == *((_DWORD *)this + 19)
         && v13 == *((unsigned __int8 *)this + 80)
         && v14 == *((double *)this + 11)
         && v15 == *((unsigned __int8 *)this + 96)
         && v16 == *((double *)this + 13)
         && v17 == *((unsigned __int8 *)this + 112)
         && v18 == *((unsigned __int8 *)this + 113)
         && v19 == *((unsigned __int8 *)this + 114)
         && v20 == *((float *)this + 29)
         && *(float *)&result == *((float *)this + 30))
  {
    return result;
  }
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
    goto LABEL_32;
  }
LABEL_33:
  if (!a2 && (void (***)(void **, BlueFin::GlPeEngineCallBacks *, void))((char *)this + 64) != &v21)
  {
    *((unsigned char *)this + 72) = v22;
    *((_WORD *)this + 37) = v23;
    *((_DWORD *)this + 19) = v24;
    *((unsigned char *)this + 80) = v25;
    *((double *)this + 11) = v26;
    *((unsigned char *)this + 96) = v27;
    *((void *)this + 13) = *(void *)v28;
    *((_WORD *)this + 56) = *(_WORD *)&v28[8];
    *((unsigned char *)this + 114) = v28[10];
    *(void *)&double result = v29;
    *(void *)((char *)this + 116) = v29;
  }
  return result;
}

uint64_t BlueFin::GlPeGlnTimeMgr::computeLocalTimeStampMs(BlueFin::GlPeGlnTimeMgr *this, const BlueFin::GlGlonassDataString *a2)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 8);
  v25[0] = v4;
  int v26 = 0;
  int v5 = 575;
  __int16 v27 = 575;
  if ((v4 + 67) >= 0x44u)
  {
    uint64_t v6 = BlueFin::GlSvId::s_aucSvId2gnss[v4];
    if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v6] == 255)
    {
      int v26 = -1;
      int v5 = 575;
    }
    else
    {
      __int16 v27 = BlueFin::GlSignalId::s_ausGnss2signalId[v6] + v4 - BlueFin::GlSvId::s_aucGnss2minSvId[v6];
      int v5 = v27;
    }
  }
  BOOL v7 = (BlueFin::GlPeMsmtMgr *)*((void *)this + 1);
  if ((((unint64_t)*(unsigned int *)(*((void *)v7 + 1) + 4 * (v5 >> 5)) >> (v5 & 0x1F)) & 1) == 0) {
    return 0;
  }
  MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(v7, (const BlueFin::GlSignalId *)v25, 0, 0);
  uint64_t v9 = 0;
  if ((*((_WORD *)a2 + 5) & 1) != 0 && (*((_DWORD *)MeMeas + 3) & 0x20) != 0)
  {
    unsigned int v10 = *((_DWORD *)a2 + 3);
    unsigned int v11 = *((unsigned __int16 *)a2 + 8);
    double v12 = *((double *)MeMeas + 7) * 1000.0;
    double v13 = 0.5;
    if (v12 > 0.0 || (double v13 = -0.5, v12 < 0.0))
    {
      unsigned int v16 = (int)(v12 + v13);
      unsigned int v17 = *((unsigned __int16 *)MeMeas + 22);
      BOOL v15 = v10 < v16;
      if (v10 < v16 && v17 < v11)
      {
        v17 |= 0x10000u;
        BOOL v15 = 1;
        goto LABEL_21;
      }
    }
    else
    {
      BOOL v15 = 0;
      unsigned int v16 = 0;
      unsigned int v17 = *((unsigned __int16 *)MeMeas + 22);
    }
    if (v17 > v11 && v10 > v16) {
      v11 |= 0x10000u;
    }
LABEL_21:
    unsigned int v19 = v10 - v16;
    if (v10 > v16 || v11 > v17)
    {
      char v21 = v17 > v11 || v15;
      if (v21) {
        return 0;
      }
      unsigned int v22 = v11 - v17;
      int v23 = -v19;
    }
    else
    {
      unsigned int v19 = v16 - v10;
      unsigned int v22 = v17 - v11;
      int v23 = v16 - v10;
    }
    if (v19 == v22) {
      return (**((_DWORD **)this + 1) - v23);
    }
    return 0;
  }
  return v9;
}

uint64_t BlueFin::GlPeGlnTimeMgr::ProcessSystemTime(uint64_t this, int a2, int a3)
{
  char v3 = *(unsigned char *)(this + 24);
  if (!v3)
  {
    *(_DWORD *)(this + 32) = a2;
    *(_DWORD *)(this + 36) = a3;
    char v8 = 4;
    goto LABEL_12;
  }
  int v4 = *(_DWORD *)(this + 36);
  int v5 = a3 - v4 + 86400000;
  if (a3 - v4 >= -43199999) {
    int v5 = a3 - v4;
  }
  if (a3 - v4 <= 43200000) {
    int v6 = v5;
  }
  else {
    int v6 = a3 - v4 - 86400000;
  }
  int v7 = a2 - *(_DWORD *)(this + 32) - v6;
  if (v7 < 0) {
    int v7 = v6 - (a2 - *(_DWORD *)(this + 32));
  }
  if (v7 < 0x3E9)
  {
    char v8 = v3 | 8;
LABEL_12:
    *(unsigned char *)(this + 24) = v8;
    return this;
  }
  *(unsigned char *)(this + 24) = v3 & 0xFB;
  return GlCustomLog(12, "GlPeGlnTimeMgr[%u]:  Tod mismatch detected!  %u!=%u\n", **(_DWORD **)(this + 8), v4, a3);
}

uint64_t BlueFin::GlPeGlnTimeMgr::ProcessString4(BlueFin::GlPeGlnTimeMgr *this, char a2, unsigned int a3, int a4)
{
  unsigned __int8 v4 = a2 + 7;
  int v5 = (char *)this + 1904;
  if (((unint64_t)*(unsigned int *)(*((void *)this + 238) + 4 * ((a2 + 7) >> 5)) >> ((a2 + 7) & 0x1F)))
  {
    if (BlueFin::GlPeGlnTimeMgr::CheckGlonassStringTime(this, (a2 + 7), 4))
    {
      if (*((unsigned char *)this + 24))
      {
        char v9 = *((unsigned char *)this + 25);
        if ((v9 & 8) == 0)
        {
          uint64_t v10 = *((void *)this + 228);
          unsigned int v11 = *(_DWORD *)(v10 + 112 * v4 + 40);
          BOOL v12 = v11 >= a3;
          unsigned int v13 = v11 - a3;
          if (v13 == 0 || !v12)
          {
            uint64_t v14 = v10 + 112 * v4;
            HIDWORD(v16) = *(_DWORD *)(v14 + 16);
            LODWORD(v16) = *(_DWORD *)(v14 + 20);
            unsigned int v15 = v16 >> 5;
            if ((v15 >> 21) - 1462 < 0xFFFFFA4B) {
              goto LABEL_10;
            }
            int v17 = v13 + a4 + ((int)(v13 + a4) < 0 ? 0x5265C00 : 0) - *((_DWORD *)this + 9);
            if (v17 < 0) {
              int v17 = -v17;
            }
            if (v17 >= 0x2932E01)
            {
LABEL_10:
              GlCustomLog(12, "GlPeGlnTimeMgr(%u)[%u]:  Nt out of range from saved string4:%hu\n");
              goto LABEL_11;
            }
            if (!*((unsigned char *)this + 25))
            {
              *((_WORD *)this + 20) = v15 >> 21;
              *((_DWORD *)this + 11) = a4;
              char v19 = 4;
              goto LABEL_18;
            }
            if (*((_WORD *)this + 20) == v15 >> 21)
            {
              char v19 = v9 | 8;
LABEL_18:
              *((unsigned char *)this + 25) = v19;
              goto LABEL_11;
            }
            *((unsigned char *)this + 25) = v9 & 0xFB;
            GlCustomLog(12, "GlPeGlnTimeMgr(%u)[%u]:  Nt mismatch in saved string4:%hu %hu\n");
          }
        }
      }
    }
  }
LABEL_11:

  return BlueFin::GlSetBase::Remove((uint64_t)v5, v4);
}

uint64_t BlueFin::GlPeGlnTimeMgr::ProcessString5(BlueFin::GlPeGlnTimeMgr *this, char a2, unsigned int a3, int a4)
{
  unsigned __int8 v4 = a2 + 7;
  int v5 = (char *)this + 1928;
  if (((unint64_t)*(unsigned int *)(*((void *)this + 241) + 4 * ((a2 + 7) >> 5)) >> ((a2 + 7) & 0x1F)))
  {
    if (BlueFin::GlPeGlnTimeMgr::CheckGlonassStringTime(this, (a2 + 7), 5))
    {
      if (*((unsigned char *)this + 24))
      {
        char v9 = *((unsigned char *)this + 26);
        if ((v9 & 8) == 0)
        {
          uint64_t v10 = *((void *)this + 228);
          unsigned int v11 = *(_DWORD *)(v10 + 112 * v4 + 44);
          BOOL v12 = v11 >= a3;
          unsigned int v13 = v11 - a3;
          if (v13 == 0 || !v12)
          {
            int v14 = (*(_DWORD *)(v10 + 112 * v4 + 28) >> 10) & 0x1F;
            if (!v14) {
              goto LABEL_10;
            }
            int v15 = v13 + a4 + ((int)(v13 + a4) < 0 ? 0x5265C00 : 0) - *((_DWORD *)this + 9);
            if (v15 < 0) {
              int v15 = -v15;
            }
            if (v15 >= 0x2932E01)
            {
LABEL_10:
              GlCustomLog(12, "GlPeGlnTimeMgr(%u)[%u]:  N4 out of range in saved string5:%hu\n");
              goto LABEL_16;
            }
            if (!*((unsigned char *)this + 26))
            {
              *((unsigned char *)this + 48) = v14;
              *((_DWORD *)this + 13) = a4;
              char v16 = 4;
              goto LABEL_15;
            }
            if (*((unsigned __int8 *)this + 48) == v14)
            {
              char v16 = v9 | 8;
LABEL_15:
              *((unsigned char *)this + 26) = v16;
              goto LABEL_16;
            }
            *((unsigned char *)this + 26) = v9 & 0xFB;
            GlCustomLog(12, "GlPeGlnTimeMgr(%u)[%u]:  N4 mismatch in saved string4: %hu!=%hu\n");
          }
        }
      }
    }
  }
LABEL_16:

  return BlueFin::GlSetBase::Remove((uint64_t)v5, v4);
}

uint64_t BlueFin::GlPeGlnTimeMgr::ProcessString1(BlueFin::GlPeGlnTimeMgr *this, char a2, int a3, int a4)
{
  unsigned __int8 v5 = a2 + 7;
  if (*(char *)(*((void *)this + 228) + 112 * (a2 + 7) + 104) >= 1
    && (((unint64_t)*(unsigned int *)(*((void *)this + 229) + 4 * (v5 >> 5)) >> (v5 & 0x1F)) & 1) != 0
    && (*((unsigned char *)this + 24) & 8) == 0)
  {
    BlueFin::GlPeGlnTimeMgr::ProcessSystemTime((uint64_t)this, a3, a4);
  }

  return BlueFin::GlSetBase::Remove((uint64_t)this + 1832, v5);
}

double BlueFin::GlPeGlnTimeMgr::Serialize(BlueFin::GlPeGlnTimeMgr *this, BlueFin::GlPeEngineCallBacks *a2, const BlueFin::GlGlnsTime *a3)
{
  if (*((unsigned char *)this + 208) || *((unsigned char *)this + 152) || *((unsigned char *)this + 240) || *((unsigned char *)this + 244)) {
    return BlueFin::GlPeGlnTimeMgr::serialize(this, a2, a3, 0);
  }
  return result;
}

void BlueFin::GlPeGlnTimeMgr::SetAsst(BlueFin::GlPeGlnTimeMgr *this, const BlueFin::GlPeGlnTimeData *a2)
{
  v3.n128_f64[0] = BlueFin::GlPeGlnTimeMgr::initializeTimeData((uint64_t)this, (uint64_t)a2, 0);
  if (BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    unsigned __int8 v4 = *(void (**)(const BlueFin::GlPeGlnTimeData *, void, void, __n128))(*(void *)a2 + 24);
    v4(a2, 0, 0, v3);
  }
}

void BlueFin::GlPeGlnTimeData::~GlPeGlnTimeData(BlueFin::GlPeGlnTimeData *this)
{
}

void BlueFin::GlPeGlnTimeMgr::~GlPeGlnTimeMgr(BlueFin::GlPeGlnTimeMgr *this)
{
}

uint64_t BlueFin::GlPeAltMgr::GetExtAlt(uint64_t *a1, double *a2, double *a3, double *a4)
{
  uint64_t v8 = *a1;
  if (*(unsigned char *)(*a1 + 1161)) {
    BOOL v9 = (*(_DWORD *)a1[1] - *(_DWORD *)(v8 + 1136)) < 0xBB8;
  }
  else {
    BOOL v9 = 0;
  }
  if (*((unsigned char *)a1 + 50)) {
    BOOL v10 = *((unsigned char *)a1 + 48) != 0;
  }
  else {
    BOOL v10 = 0;
  }
  BOOL v11 = !*(unsigned char *)(v8 + 3008)
     || *(double *)(v8 + 3040) * *(double *)(v8 + 3040) + *(double *)(v8 + 3048) * *(double *)(v8 + 3048) >= 160000.0
     || *(double *)(v8 + 3064) >= 50.0;
  int v12 = BlueFin::GlPeKFAltAsst::altAsstFromCitySetFine((__int16 *)a1 + 32, (uint64_t)&v23, a2);
  if ((v10 & v12) == 1)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    double v25 = 0.0;
    float v26 = 2000.0;
    if ((BlueFin::GlPeKFAltAsst::altAsstFromCitySetFine((__int16 *)a1 + 32, (uint64_t)&v23, a2) & 1) == 0)
    {
      DeviceFaultNotify("glpe_altmgr.cpp", 80, "GetExtAlt", (char)"m_otAltAsst.altAsstFromCitySetFine(otAltAsst, rotLla)");
      int v22 = 80;
      goto LABEL_37;
    }
    long double v13 = pow(*((double *)a1 + 2) * 100.0 / *((double *)a1 + 3), 0.190263);
    double v14 = (1.0 - v13) * 44330.77 - v25;
    if (v14 < 0.0) {
      double v14 = -v14;
    }
    double v15 = sqrt(*((double *)a1 + 4) * *((double *)a1 + 4) + (float)(v26 * v26));
    BOOL v10 = v14 < v15 + v15;
  }
  if (v9)
  {
    uint64_t v16 = *a1;
    *a3 = *(double *)(*a1 + 1112);
    double v17 = *(double *)(v16 + 1120);
    *a4 = v17;
    BOOL v18 = v17 > 0.0 && *a3 > -999.0;
    if (v18) {
      goto LABEL_25;
    }
  }
  else
  {
    BOOL v18 = 0;
  }
  if (v10)
  {
    *a3 = (1.0 - pow(*((double *)a1 + 2) * 100.0 / *((double *)a1 + 3), 0.190263)) * 44330.77;
    *(void *)a4 = a1[4];
    return 2;
  }
LABEL_25:
  if (v18 || v11)
  {
    uint64_t result = v18;
  }
  else
  {
    uint64_t v20 = *a1;
    *a3 = *(double *)(*a1 + 3032);
    double v21 = *(double *)(v20 + 3064);
    *a4 = v21;
    if (*a3 > -999.0 && v21 > 0.0) {
      uint64_t result = 3;
    }
    else {
      uint64_t result = v18;
    }
    LODWORD(v18) = *a3 > -999.0 && v21 > 0.0;
  }
  if (!(v18 | v12 ^ 1u))
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    double v25 = 0.0;
    float v26 = 2000.0;
    if (BlueFin::GlPeKFAltAsst::altAsstFromCitySetFine((__int16 *)a1 + 32, (uint64_t)&v23, a2))
    {
      *a3 = v25;
      *a4 = v26;
      return 4;
    }
    DeviceFaultNotify("glpe_altmgr.cpp", 132, "GetExtAlt", (char)"m_otAltAsst.altAsstFromCitySetFine(otAltAsst, rotLla)");
    int v22 = 132;
LABEL_37:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_altmgr.cpp", v22, "m_otAltAsst.altAsstFromCitySetFine(otAltAsst, rotLla)");
  }
  return result;
}

uint64_t BlueFin::GlPeGpsUtcModel::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= 4)
  {
    DeviceFaultNotify("glpe_gpstimemgr.cpp", 169, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_gpstimemgr.cpp", 169, "ucVersion >= 1 && ucVersion <= 3");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  int v16 = 43;
  char v17 = v5;
  uint64_t v18 = 0x1000000000000;
  double v15 = &unk_270EBA2F0;
  char v19 = v5;
  if (v5 == 3)
  {
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v2 + 8));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(v7 + 36));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v15, *(_DWORD *)(v7 + 32));
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 42));
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 40));
  }
  else
  {
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, (double)*(int *)(v2 + 36) * 9.31322575e-10);
    BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v15, (double)*(int *)(v7 + 32) * 8.8817842e-16);
    BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 42));
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v15, *(unsigned __int8 *)(v7 + 40) << 12);
  }
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 41));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 43));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 44));
  BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v15, *(unsigned char *)(v7 + 45));
  if (v5 >= 2)
  {
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 32))(v7 + 16);
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v15, v8 / 0x93A80);
    unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 32))(v7 + 16);
    LODWORD(v10) = *(_DWORD *)(v7 + 24);
    double v11 = ((double)v10 * 2.32830644e-10 + (double)(v9 % 0x93A80)) * 1000.0;
    double v12 = fmod(v11, 4294967300.0);
    if (v11 <= 4294967300.0) {
      double v12 = v11;
    }
    if (v12 < -4294967300.0) {
      double v12 = -fmod(-v12, 4294967300.0);
    }
    if (v12 < 0.0) {
      int v13 = --v12;
    }
    else {
      int v13 = v12;
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v15, v13);
  }
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v15, v6, 4);
  return 1;
}

void BlueFin::GlPeGpsTimeMgr::SetDataSubFrmMeas(BlueFin::GlPeGpsTimeMgr *this, const BlueFin::GlDataSubFrmMeas *a2, const BlueFin::GlGpsTime *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  unint64_t v3 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a2 + 8) || (v3 >= 0x21 ? (BOOL v4 = (v3 - 66) >= 0xA) : (BOOL v4 = 0), v4))
  {
    DeviceFaultNotify("glpe_gpstimemgr.cpp", 292, "SetDataSubFrmMeas", (char)"IS_GPS_SVID(*rotDataSubFrmMeas.otSvId) INC_QZS(|| IS_QZSS_SVID(*rotDataSubFrmMeas.otSvId))");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_gpstimemgr.cpp", 292, "IS_GPS_SVID(*rotDataSubFrmMeas.otSvId) INC_QZS(|| IS_QZSS_SVID(*rotDataSubFrmMeas.otSvId))");
  }
  int v7 = *((unsigned __int8 *)a2 + 9);
  if (v7 == 5)
  {
    unsigned int v8 = (void *)*((void *)this + 2);
    size_t v9 = ((4 * *((unsigned __int8 *)this + 24) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4;
    bzero(v8, v9);
  }
  else if (v7 == 1)
  {
    if ((*((_DWORD *)a2 + 7) & 0xC0003F00) == 0) {
      *(_DWORD *)(*((void *)this + 2) + ((v3 >> 3) & 0x1C)) |= 1 << v3;
    }
  }
  else if (v7 == 4 {
         && ((1 << (v3 & 0x1F)) & *(unsigned int *)(*((void *)this + 2) + 4 * (v3 >> 5))) != 0)
  }
  {
    int v10 = *((_DWORD *)a2 + 7);
    if ((v10 & 0x30000000) == 0x10000000 && (v10 & 0xCFC00000) == 0xE000000)
    {
      v11.i64[0] = 0xC0000000C0000000;
      v11.i64[1] = 0xC0000000C0000000;
      if ((vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(*(uint32x4_t *)((char *)a2 + 40), v11), (int8x16_t)xmmword_263BAC4B0)) & 0xF) == 0&& *((_DWORD *)a2 + 14) >> 30 == 0)
      {
        uint64_t v14 = 0;
        v38[0] = (uint64_t)&v43;
        v38[1] = 0;
        char v39 = 0;
        int v41 = 0;
        long long v40 = xmmword_263BB2640;
        char v42 = 0;
        do
        {
          BlueFin::GlBitBuffer::PutU(v38, *(_DWORD *)((char *)a2 + v14 + 40) >> 6, 0x18u);
          v14 += 4;
        }
        while (v14 != 20);
        BlueFin::GlBitBuffer::Position((uint64_t)v38, 0);
        int v15 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 0x18u);
        int v16 = (v15 & 0xFF800000) == 0x800000 ? -16777216 : 0;
        int v24 = v16;
        int v17 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 0x20u);
        char v18 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 8u);
        char v19 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 8u);
        char v20 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 8u);
        char v21 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 8u);
        unsigned __int8 v22 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 8u);
        char v23 = BlueFin::GlBitBuffer::GetU((BlueFin::GlBitBuffer *)v38, 8u);
        if (*((unsigned __int8 *)a2 + 8) - 1 >= 0x20
          || (char)v22 >= 1 && (v18 & 0xFCu) <= 0x93 && v22 <= 7u)
        {
          double v25 = &unk_270EC96B0;
          int v26 = 1;
          char v27 = 0;
          uint64_t v28 = &off_270EBC600;
          uint64_t v29 = 0;
          int v30 = v24 + v15;
          int v31 = v17;
          char v32 = v18;
          char v33 = v19;
          char v34 = v20;
          char v35 = v21;
          unsigned __int8 v36 = v22;
          char v37 = v23;
          BlueFin::GlPeGpsTimeMgr::updateModelIfBetter(this, (const BlueFin::GlPeGpsUtcModel *)&v25, a3);
        }
      }
    }
  }
}

uint64_t BlueFin::GlPeGpsTimeMgr::Serialize(uint64_t this, BlueFin::GlPeEngineCallBacks *a2)
{
  if (*(_DWORD *)(this + 72))
  {
    uint64_t v3 = this;
    this = (*(uint64_t (**)(void))(*(void *)(this + 80) + 32))();
    if (this >= 0x93A80)
    {
      BOOL v4 = *(uint64_t (**)(uint64_t, BlueFin::GlPeEngineCallBacks *, void))(*(void *)(v3 + 64) + 24);
      return v4(v3 + 64, a2, 0);
    }
  }
  return this;
}

uint64_t BlueFin::GlPeGpsTimeMgr::ResetMgr(uint64_t this)
{
  *(_WORD *)(this + 8) = 0;
  *(_WORD *)(this + 114) = 0;
  return this;
}

uint64_t BlueFin::GlPeGpsTimeMgr::ResetModels(uint64_t this)
{
  *(_DWORD *)(this + 72) = 0;
  *(unsigned char *)(this + 76) = 0;
  *(void *)(this + 96) = 0;
  *(void *)(this + 104) = 0;
  *(void *)(this + 88) = 0;
  *(unsigned char *)(this + 112) = 0;
  return this;
}

BlueFin::GlPeGpsTimeMgr *BlueFin::GlPeGpsTimeMgr::OnSystemModeDetermined(BlueFin::GlPeGpsTimeMgr *this, int a2)
{
  *((unsigned char *)this + 8) = 1;
  *((unsigned char *)this + 9) = a2;
  if (a2)
  {
    uint64_t v2 = &unk_270EC96B0;
    char v4 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unsigned int v5 = &off_270EBC600;
    uint64_t v6 = 0;
    int v3 = 4;
    return (BlueFin::GlPeGpsTimeMgr *)BlueFin::GlPeGpsTimeMgr::updateModelIfBetter(this, (const BlueFin::GlPeGpsUtcModel *)&v2, 0);
  }
  return this;
}

void BlueFin::GlPeGpsUtcModel::~GlPeGpsUtcModel(BlueFin::GlPeGpsUtcModel *this)
{
}

void BlueFin::GlPeGpsTimeMgr::~GlPeGpsTimeMgr(BlueFin::GlPeGpsTimeMgr *this)
{
}

BlueFin::GlGalTime *BlueFin::GlGalTime::GlGalTime(BlueFin::GlGalTime *this, int a2, long double a3)
{
  *(void *)this = &off_270EBF538;
  double v6 = fmod(a3, 1.0);
  if (v6 < 0.0 || v6 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v8 = v6 * 4294967300.0 + 0.5;
  unsigned int v9 = v8;
  if (v8 >= 4294967300.0) {
    unsigned int v9 = -1;
  }
  *((_DWORD *)this + 2) = v9;
  *((_DWORD *)this + 3) = a3 + 604800 * a2 + 619315200;
  *(void *)this = &off_270EBF538;
  return this;
}

BlueFin::GlBdsTime *BlueFin::GlBdsTime::GlBdsTime(BlueFin::GlBdsTime *this, int a2, long double a3)
{
  *(void *)this = &off_270EBF588;
  double v6 = fmod(a3, 1.0);
  if (v6 < 0.0 || v6 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v8 = v6 * 4294967300.0 + 0.5;
  unsigned int v9 = v8;
  if (v8 >= 4294967300.0) {
    unsigned int v9 = -1;
  }
  *((_DWORD *)this + 2) = v9;
  *((_DWORD *)this + 3) = a3 + 604800 * a2 + 820108814;
  *(void *)this = &off_270EBF588;
  return this;
}

BlueFin::GlNicTime *BlueFin::GlNicTime::GlNicTime(BlueFin::GlNicTime *this, int a2, long double a3)
{
  *(void *)this = &off_270EBF080;
  double v6 = fmod(a3, 1.0);
  if (v6 < 0.0 || v6 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v8 = v6 * 4294967300.0 + 0.5;
  unsigned int v9 = v8;
  if (v8 >= 4294967300.0) {
    unsigned int v9 = -1;
  }
  *((_DWORD *)this + 2) = v9;
  *((_DWORD *)this + 3) = a3 + 604800 * a2 + 619315200;
  *(void *)this = &off_270EBF080;
  return this;
}

uint64_t BlueFin::GlPeGnssTime::GetUtc@<X0>(BlueFin::GlPeGnssTime *this@<X0>, BlueFin::GlUtcTime *a2@<X8>)
{
  *(void *)a2 = &unk_270EC23C8;
  *((void *)a2 + 1) = 0;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)a2);

  return BlueFin::GlPeGnssTime::GetUtc(this, a2);
}

uint64_t BlueFin::GlGlnsTime::getN4(BlueFin::GlGlnsTime *this)
{
  if (BlueFin::GlWeekTowTime::m_ucNextLs < BlueFin::GlWeekTowTime::m_ucCurrentLs
    || BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0)
  {
    int v2 = 0;
  }
  else if (*((_DWORD *)this + 3) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
  {
    int v2 = -1;
  }
  else
  {
    int v2 = 0;
  }
  return ((*(unsigned int (**)(BlueFin::GlGlnsTime *))(*(void *)this + 32))(this) + v2) / 0x7861F80 + 1;
}

uint64_t BlueFin::GlGlnsTime::getNt(BlueFin::GlGlnsTime *this)
{
  if (BlueFin::GlWeekTowTime::m_ucNextLs < BlueFin::GlWeekTowTime::m_ucCurrentLs
    || BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0)
  {
    int v2 = 0;
  }
  else if (*((_DWORD *)this + 3) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
  {
    int v2 = -1;
  }
  else
  {
    int v2 = 0;
  }
  return (unsigned __int16)((((203613265
                                           * (unint64_t)(((*(unsigned int (**)(BlueFin::GlGlnsTime *))(*(void *)this + 32))(this)
                                                               + v2)
                                                              % 0x7861F80)) >> 32) >> 12)
                          + 1);
}

uint64_t BlueFin::GlPeTimeManagerData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v167 = *MEMORY[0x263EF8340];
  if (v7) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= 0xB)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 1104, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 10");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 1104, "ucVersion >= 1 && ucVersion <= 10");
  }
  uint64_t v9 = v5;
  if (v6 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    uint64_t v148 = v6;
    if (v8 > 7)
    {
      int v163 = 30;
      unsigned __int8 v164 = v8;
      uint64_t v165 = 0x1000000000000;
      unsigned __int8 v162 = &unk_270EBA2F0;
      char v166 = v8;
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, *(_WORD *)(v5 + 8));
      if (*(unsigned char *)(v9 + 8))
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, *(unsigned char *)(v9 + 16));
        if (*(_DWORD *)(v9 + 32) && BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 0) > 5.0)
        {
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, *(unsigned char *)(v9 + 32));
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, *(double *)(v9 + 40));
          switch(*(_DWORD *)(v9 + 32))
          {
            case 0:
              int v151 = &off_270EBC600;
              uint64_t v152 = 0;
              BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGpsTime *)&v151);
              unsigned int v12 = ((uint64_t (*)(void))v151[4])(&v151);
              BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v12 / 0x93A80);
              unsigned int v13 = ((uint64_t (*)(void))v151[4])(&v151);
              LODWORD(v14) = v152;
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, (double)v14 * 2.32830644e-10 + (double)(v13 % 0x93A80));
              break;
            case 1:
              int v151 = &off_270EBF4E8;
              uint64_t v152 = 0;
              BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGlnsTime *)&v151);
              char N4 = BlueFin::GlGlnsTime::getN4((BlueFin::GlGlnsTime *)&v151);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, N4);
              __int16 Nt = BlueFin::GlGlnsTime::getNt((BlueFin::GlGlnsTime *)&v151);
              BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, Nt);
              double TodS = BlueFin::GlGlnsTime::getTodS((BlueFin::GlGlnsTime *)&v151);
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, TodS);
              break;
            case 2:
              BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlUtcTime *)&v151);
              BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v153);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v155);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v156);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v157);
              BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v158);
              LOBYTE(v123) = v159;
              LODWORD(v124) = v152;
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, (double)v124 * 2.32830644e-10 + (double)v123);
              break;
            case 3:
              int v151 = &off_270EBF538;
              uint64_t v152 = 0;
              BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGalTime *)&v151);
              unsigned int v125 = ((uint64_t (*)(void))v151[4])(&v151);
              BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v125 / 0x93A80);
              unsigned int v126 = ((uint64_t (*)(void))v151[4])(&v151);
              LODWORD(v127) = v152;
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, (double)v127 * 2.32830644e-10 + (double)(v126 % 0x93A80));
              break;
            case 4:
              int v151 = &off_270EBF588;
              uint64_t v152 = 0;
              BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlBdsTime *)&v151);
              unsigned int v128 = ((uint64_t (*)(void))v151[4])(&v151);
              BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v128 / 0x93A80);
              unsigned int v129 = ((uint64_t (*)(void))v151[4])(&v151);
              LODWORD(v130) = v152;
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, (double)v130 * 2.32830644e-10 + (double)(v129 % 0x93A80));
              break;
            case 5:
              int v151 = &off_270EBF080;
              uint64_t v152 = 0;
              BlueFin::GlPeGnssTime::GetNic((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlNicTime *)&v151);
              unsigned int v131 = ((uint64_t (*)(void))v151[4])(&v151);
              BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v131 / 0x93A80);
              unsigned int v132 = ((uint64_t (*)(void))v151[4])(&v151);
              LODWORD(v133) = v152;
              BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, (double)v133 * 2.32830644e-10 + (double)(v132 % 0x93A80));
              break;
            default:
              break;
          }
        }
        else
        {
          int v151 = &off_270EBC600;
          uint64_t v152 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGpsTime *)&v151);
          BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, 0);
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, *(double *)(v9 + 40));
          unsigned int v27 = ((uint64_t (*)(void))v151[4])(&v151);
          BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v27 / 0x93A80);
          unsigned int v28 = ((uint64_t (*)(void))v151[4])(&v151);
          LODWORD(v29) = v152;
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, (double)v29 * 2.32830644e-10 + (double)(v28 % 0x93A80));
        }
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, *(double *)(v9 + 48));
        if (v8 >= 0xA) {
          BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, *(_DWORD *)(v9 + 56));
        }
      }
      int v30 = *(_DWORD *)(v9 + 8);
      if ((v30 & 0x40) != 0)
      {
        double v147 = *(double *)(v9 + 40);
        if (*(_DWORD *)(v9 + 32) == -1)
        {
          LOWORD(v35) = 0;
          LOWORD(v36) = 0;
          char v143 = 0;
          LOWORD(v37) = 0;
          *(void *)long long v144 = 0;
          char v38 = 0;
          __int16 v39 = 0;
          unsigned __int16 v40 = 0;
          char v41 = 0;
          LOWORD(v42) = 0;
          double v43 = 0.0;
          double v140 = 0.0;
          double v141 = 0.0;
          double v44 = 0.0;
          double v45 = 0.0;
          double v46 = 0.0;
          double v142 = 0.0;
          double v47 = 0.0;
          double v34 = 0.0;
          double v48 = 0.0;
          double UncUs = 0.0;
          double v49 = 0.0;
        }
        else
        {
          char v160 = &off_270EBC600;
          uint64_t v161 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGpsTime *)&v160);
          unsigned int v139 = ((uint64_t (*)(void))v160[4])(&v160);
          unsigned int v138 = ((uint64_t (*)(void))v160[4])(&v160);
          LODWORD(v2) = v161;
          double UncUs = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 0);
          unint64_t v137 = v2;
          if (((unsigned int (*)(void))v160[4])(&v160) >= 0x1E11BC50)
          {
            int v151 = &off_270EBF4E8;
            uint64_t v152 = 0;
            BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGlnsTime *)&v151);
            unsigned int v50 = BlueFin::GlWeekTowTime::m_ucNextLs;
            unsigned int v51 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
            int v52 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
            int v53 = HIDWORD(v152);
            int v145 = ((uint64_t (*)(void))v151[4])(&v151);
            BOOL v56 = v50 >= v51 && v52 != 0 && v53 == v52;
            unsigned int v57 = BlueFin::GlWeekTowTime::m_ucNextLs;
            unsigned int v58 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
            int v59 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
            int v60 = HIDWORD(v152);
            int v61 = ((uint64_t (*)(void))v151[4])(&v151);
            BOOL v62 = 0;
            BOOL v65 = v57 >= v58 && v59 != 0 && v60 == v59;
            if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
              && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
            {
              BOOL v62 = HIDWORD(v152) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
            }
            unsigned int v66 = ((uint64_t (*)(void))v151[4])(&v151);
            if (v62) {
              double v67 = 10799.0;
            }
            else {
              double v67 = (double)(v66 % 0x15180);
            }
            unsigned int v68 = v152;
            double v34 = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 1);
            unsigned int v32 = (v145 - v56) / 0x7861F80u + 1;
            unsigned int v31 = (v61 - v65) % 0x7861F80u / 0x15180 + 1;
            double v33 = v67 + (double)v68 * 2.32830644e-10;
          }
          else
          {
            LOWORD(v31) = 0;
            LOBYTE(v32) = 0;
            double v33 = 0.0;
            double v34 = 4294967300.0;
          }
          int v151 = (void (**)(BlueFin::GlGalTime *__hidden))&unk_270EC23C8;
          uint64_t v152 = 0;
          BOOL v69 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs;
          if (!BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent) {
            BOOL v69 = 0;
          }
          BOOL v70 = BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent == 0;
          BOOL v71 = v69 && v70;
          if (v69 && v70) {
            int v72 = 431999;
          }
          else {
            int v72 = 432000;
          }
          unsigned int v73 = v72 - BlueFin::GlWeekTowTime::m_ucCurrentLs;
          unsigned __int16 v153 = 1980;
          __int16 v154 = v73 / 0x15180 + 1;
          unsigned __int8 v155 = 1;
          unsigned __int8 v156 = v73 / 0x15180 + 1;
          LOBYTE(v72) = 60;
          if (v71)
          {
            LOBYTE(v74) = 59;
            LOBYTE(v75) = 23;
          }
          else
          {
            unsigned int v75 = v73 % 0x15180 / 0xE10;
            unsigned int v74 = (2185 * (v73 - 3600 * ((1193047 * (unint64_t)v73) >> 32))) >> 17;
            int v72 = v73 - 60 * ((71582789 * (unint64_t)v73) >> 32);
          }
          char v135 = v32;
          __int16 v136 = v31;
          unsigned __int8 v157 = v75;
          unsigned __int8 v158 = v74;
          char v159 = v72;
          BlueFin::GlPeGnssTime::GetUtc((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlUtcTime *)&v151);
          unsigned __int16 v40 = v153;
          v144[0] = v156;
          v144[4] = v155;
          char v143 = v157;
          unsigned __int8 v134 = v158;
          LOBYTE(v3) = v159;
          LODWORD(v4) = v152;
          double v142 = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 2);
          unsigned int v76 = ((uint64_t (*)(void))v160[4])(&v160);
          LODWORD(v77) = v161;
          if ((double)v77 * 2.32830644e-10 + (double)v76 >= 619315200.0)
          {
            long long v149 = &off_270EBF538;
            uint64_t v150 = 0;
            BlueFin::GlPeGnssTime::GetGal((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGalTime *)&v149);
            unsigned int v78 = ((uint64_t (*)(void))v149[4])(&v149);
            unsigned int v79 = ((uint64_t (*)(void))v149[4])(&v149);
            unsigned int v80 = v150;
            double v141 = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 3);
            unsigned int v37 = v78 / 0x93A80;
            double v43 = (double)v80 * 2.32830644e-10 + (double)(v79 % 0x93A80);
          }
          else
          {
            LOWORD(v37) = 0;
            double v43 = 0.0;
            double v141 = 4294967300.0;
          }
          unsigned int v81 = ((uint64_t (*)(void))v160[4])(&v160);
          LODWORD(v82) = v161;
          if ((double)v82 * 2.32830644e-10 + (double)v81 >= 820108814.0)
          {
            long long v149 = &off_270EBF588;
            uint64_t v150 = 0;
            BlueFin::GlPeGnssTime::GetBds((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlBdsTime *)&v149);
            unsigned int v83 = ((uint64_t (*)(void))v149[4])(&v149);
            unsigned int v84 = ((uint64_t (*)(void))v149[4])(&v149);
            unsigned int v85 = v150;
            double v45 = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 4);
            double v44 = (double)v85 * 2.32830644e-10 + (double)(v84 % 0x93A80);
            unsigned int v36 = v83 / 0x93A80;
          }
          else
          {
            LOWORD(v36) = 0;
            double v44 = 0.0;
            double v45 = 4294967300.0;
          }
          unsigned int v86 = ((uint64_t (*)(void))v160[4])(&v160);
          LODWORD(v87) = v161;
          if ((double)v87 * 2.32830644e-10 + (double)v86 >= 619315200.0)
          {
            long long v149 = &off_270EBF080;
            uint64_t v150 = 0;
            BlueFin::GlPeGnssTime::GetNic((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlNicTime *)&v149);
            double v48 = v33;
            unsigned int v88 = ((uint64_t (*)(void))v149[4])(&v149);
            unsigned int v89 = ((uint64_t (*)(void))v149[4])(&v149);
            unsigned int v90 = v150;
            double v140 = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 5);
            unsigned int v35 = v88 / 0x93A80;
            double v46 = (double)v90 * 2.32830644e-10 + (double)(v89 % 0x93A80);
          }
          else
          {
            double v48 = v33;
            LOWORD(v35) = 0;
            double v46 = 0.0;
            double v140 = 4294967300.0;
          }
          unint64_t v91 = v4;
          unsigned int v42 = v139 / 0x93A80;
          double v49 = (double)v137 * 2.32830644e-10 + (double)(v138 % 0x93A80);
          double v47 = (double)v91 * 2.32830644e-10 + (double)v3;
          char v41 = v135;
          __int16 v39 = v136;
          char v38 = v134;
        }
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, 32831);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v147);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v42);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v49);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, UncUs);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v41);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v39);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v48);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v34);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v40);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v144[4]);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v144[0]);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v143);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v38);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v47);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v142);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v37);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v43);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v141);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v36);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v44);
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v45);
        if (v8 >= 9)
        {
          BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v35);
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v46);
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v140);
        }
        int v30 = *(_DWORD *)(v9 + 8);
      }
      if ((v30 & 2) != 0)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, 6);
        uint64_t v92 = 0;
        uint64_t v93 = v9 + 112;
        do
        {
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, *(double *)(v93 + 8 * v92 - 48));
          BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, *(float *)(v93 + 4 * v92++));
        }
        while (v92 != 6);
        int v30 = *(_DWORD *)(v9 + 8);
      }
      if ((v30 & 4) != 0)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, *(unsigned char *)(v9 + 136));
        int v30 = *(_DWORD *)(v9 + 8);
      }
      if ((v30 & 8) != 0)
      {
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, *(double *)(v9 + 144));
        int v30 = *(_DWORD *)(v9 + 8);
      }
      if ((v30 & 0x10) != 0) {
        BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v162, *(unsigned char *)(v9 + 152));
      }
      goto LABEL_151;
    }
    int v163 = 30;
    unsigned __int8 v164 = v8;
    uint64_t v165 = 0x1000000000000;
    unsigned __int8 v162 = &unk_270EBA2F0;
    char v166 = v8;
    if (*(unsigned char *)(v5 + 8))
    {
      int v10 = (uint64_t *)(v5 + 40);
      double v11 = *(double *)(v5 + 48);
    }
    else
    {
      int v10 = &BlueFin::GlPeTimeMgrUtil::INVALID_LMS_D;
      double v11 = 4294967300.0;
    }
    double v15 = *(double *)v10;
    int v16 = BlueFin::GlPeTimeMgrUtil::precUsToUlong((BlueFin::GlPeTimeMgrUtil *)v5, v11);
    int v17 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, v16);
    if (v8 <= 2) {
      int v17 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v162, 0);
    }
    char v18 = (BlueFin::GlPeTimeMgrUtil *)BlueFin::GlPeTimeMgrUtil::DoubleToLms(v17, v15);
    int v19 = *(_DWORD *)(v9 + 8);
    if ((v19 & 4) != 0)
    {
      int v21 = BlueFin::GlPeTimeMgrUtil::DoubleToLms(v18, -(double)(*(_DWORD *)(v9 + 136) + 1));
    }
    else
    {
      if ((v19 & 0x20) != 0) {
        int v20 = 1;
      }
      else {
        int v20 = (int)v18;
      }
      if ((v19 & 8) != 0) {
        int v21 = 0;
      }
      else {
        int v21 = v20;
      }
    }
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, v21);
    int v151 = &off_270EBC600;
    uint64_t v152 = 0;
    if (*(_DWORD *)(v9 + 32) != -1
      && *(double *)(v9 + 48) != 4294967300.0
      && BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 0) <= 2100000.0)
    {
      char v160 = &off_270EBC600;
      uint64_t v161 = 0;
      BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGpsTime *)&v160);
      uint64_t v152 = v161;
    }
    unsigned __int8 v22 = (BlueFin::GlPeTimeMgrUtil *)((uint64_t (*)(void))v151[4])(&v151);
    LODWORD(v23) = v152;
    int v24 = BlueFin::GlPeTimeMgrUtil::towMsToUlong(v22, ((double)v23 * 2.32830644e-10 + (double)(v22 % 0x93A80)) * 1000.0);
    BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, v24);
    unsigned int v25 = ((uint64_t (*)(void))v151[4])(&v151);
    BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, v25 / 0x93A80);
    if (v8 >= 2)
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, -1);
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, 0xFFFF);
      if (v8 >= 4)
      {
        char v160 = &off_270EBF4E8;
        uint64_t v161 = 0;
        if (*(_DWORD *)(v9 + 32) != -1
          && *(double *)(v9 + 48) != 4294967300.0
          && BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 1) <= 2100000.0)
        {
          long long v149 = &off_270EBF4E8;
          uint64_t v150 = 0;
          BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)(v9 + 24), (BlueFin::GlGlnsTime *)&v149);
          uint64_t v161 = v150;
        }
        BOOL v26 = 0;
        if (BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
          && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent)
        {
          BOOL v26 = HIDWORD(v161) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
        }
        double v94 = (BlueFin::GlPeTimeMgrUtil *)((uint64_t (*)(void))v160[4])(&v160);
        if (v26) {
          double v96 = 10799.0;
        }
        else {
          double v96 = (double)(v94 % 0x15180);
        }
        LODWORD(v95) = v161;
        int v97 = BlueFin::GlPeTimeMgrUtil::todMsToUlong(v94, (v96 + (double)v95 * 2.32830644e-10) * 1000.0);
        BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, v97);
        uint64_t ConversionTable = BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeGnssTime *)(v9 + 24));
        double v99 = fmod(-*(double *)(ConversionTable + 8), 1.0) + -1.0;
        double v100 = fabs(v99);
        BOOL v101 = v100 > 1.0e-10;
        BOOL v102 = v100 < 0.0005;
        BOOL v103 = v101 && v102;
        if (!v101 || !v102) {
          double v99 = 0.0;
        }
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v162, v99);
        int v106 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
            && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
            && HIDWORD(v161) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
        int v107 = ((uint64_t (*)(void))v160[4])(&v160);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, ((v107 + (v106 << 31 >> 31)) / 0x7861F80u + 1));
        int v110 = BlueFin::GlWeekTowTime::m_ucNextLs >= BlueFin::GlWeekTowTime::m_ucCurrentLs
            && BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent != 0
            && HIDWORD(v161) == BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent;
        int v111 = ((uint64_t (*)(void))v160[4])(&v160);
        BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v162, (v111 + (v110 << 31 >> 31)) % 0x7861F80u / 0x15180 + 1);
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v103);
      }
    }
    if (v164 < 5u)
    {
LABEL_151:
      BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v162, v148, 4);
      return 1;
    }
    BOOL v112 = *(_DWORD *)(v9 + 32) != -1
        && *(double *)(v9 + 48) != 4294967300.0
        && BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 0) <= 2100000.0;
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v112);
    if (*(_DWORD *)(v9 + 32) == -1 || *(double *)(v9 + 48) == 4294967300.0)
    {
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, 0);
    }
    else
    {
      double v113 = BlueFin::GlPeGnssTime::GetUncUs(v9 + 24, 1);
      BOOL v114 = v113 <= 2100000.0;
      BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, v113 <= 2100000.0);
      if (v112 && v114)
      {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, 1);
        int v115 = 1000 * *(char *)(v9 + 152);
        goto LABEL_141;
      }
    }
    BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, 0);
    int v115 = 0;
LABEL_141:
    BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v162, v115);
    if (v164 >= 6u)
    {
      double v116 = *(double *)(v9 + 144) * 0.001 + 0.5;
      double v117 = fmod(v116, 4294967300.0);
      if (v116 <= 4294967300.0) {
        double v117 = v116;
      }
      if (v117 < -4294967300.0) {
        double v117 = -fmod(-v117, 4294967300.0);
      }
      if (v117 < 0.0) {
        int v118 = --v117;
      }
      else {
        int v118 = v117;
      }
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v162, v118);
      if (v164 >= 7u) {
        BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v162, 0);
      }
    }
    goto LABEL_151;
  }
  return 1;
}

uint64_t BlueFin::GlPeGnssTimeModelData::Deserialize(BlueFin::GlPeGnssTimeModelData *this, BlueFin::GlSysLogEntry *a2)
{
  if (*((_DWORD *)a2 + 2) != 98 || *((unsigned __int8 *)a2 + 12) - 1 > 1) {
    return 0;
  }
  int U16 = BlueFin::GlSysLogEntry::GetU16(a2);
  long double D64 = BlueFin::GlSysLogEntry::GetD64(a2);
  double v6 = fmod(D64, 1.0);
  if (v6 < 0.0 || v6 >= 1.0)
  {
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
  }
  double v8 = v6 * 4294967300.0 + 0.5;
  unsigned int v9 = v8;
  if (v8 >= 4294967300.0) {
    unsigned int v9 = -1;
  }
  *((_DWORD *)this + 4) = v9;
  *((_DWORD *)this + 5) = D64 + 604800 * U16;
  *((unsigned char *)this + 24) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_WORD *)this + 13) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((_DWORD *)this + 7) = BlueFin::GlSysLogEntry::GetS32(a2);
  *((_WORD *)this + 16) = BlueFin::GlSysLogEntry::GetS16(a2);
  *((unsigned char *)this + 34) = BlueFin::GlSysLogEntry::GetS8(a2);
  *((unsigned char *)this + 35) = BlueFin::GlSysLogEntry::GetU8(a2);
  *((_WORD *)this + 18) = BlueFin::GlSysLogEntry::GetU16(a2);
  *((unsigned char *)this + 38) = BlueFin::GlSysLogEntry::GetS8(a2);
  if (*((unsigned __int8 *)a2 + 12) < 2u) {
    float F32 = 4295000000.0;
  }
  else {
    float F32 = BlueFin::GlSysLogEntry::GetF32(a2);
  }
  *((float *)this + 10) = F32;
  BlueFin::GlSysLogEntry::CheckConsumed(a2, 1579);
  return 1;
}

uint64_t BlueFin::GlPeGnssTimeModelData::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (v3) {
    char v7 = v3;
  }
  else {
    char v7 = 2;
  }
  int v14 = 98;
  char v15 = v7;
  uint64_t v16 = 0x1000000000000;
  unsigned int v13 = &unk_270EBA2F0;
  char v17 = v7;
  uint64_t v8 = v2 + 8;
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 8) + 32))(v2 + 8);
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, v9 / 0x93A80);
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  LODWORD(v11) = *(_DWORD *)(v6 + 16);
  BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v13, (double)v11 * 2.32830644e-10 + (double)(v10 % 0x93A80));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, *(unsigned char *)(v6 + 24));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 26));
  BlueFin::GlSysLogEntry::PutS32((BlueFin::GlSysLogEntry *)&v13, *(_DWORD *)(v6 + 28));
  BlueFin::GlSysLogEntry::PutS16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 32));
  BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v13, *(unsigned char *)(v6 + 34));
  BlueFin::GlSysLogEntry::PutU8((BlueFin::GlSysLogEntry *)&v13, *(unsigned char *)(v6 + 35));
  BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v13, *(_WORD *)(v6 + 36));
  BlueFin::GlSysLogEntry::PutS8((BlueFin::GlSysLogEntry *)&v13, *(unsigned char *)(v6 + 38));
  BlueFin::GlSysLogEntry::PutF32((BlueFin::GlSysLogEntry *)&v13, *(float *)(v6 + 40));
  BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v13, v5, 4);
  return 1;
}

uint64_t BlueFin::GlPeRtcModel::SerializeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if (v5 >= 4)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 1916, "SerializeImpl", (char)"ucVersion >= 1 && ucVersion <= 3");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 1916, "ucVersion >= 1 && ucVersion <= 3");
  }
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  if (v3 || BlueFin::GlUtils::m_pInstance && *(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122))
  {
    int v13 = 103;
    char v14 = v5;
    uint64_t v15 = 0x1000000000000;
    unsigned int v12 = &unk_270EBA2F0;
    char v16 = v5;
    if (v5 == 1)
    {
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v12, *(double *)(v2 + 32));
      unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 16) + 32))(v7 + 16);
      BlueFin::GlSysLogEntry::PutU16((BlueFin::GlSysLogEntry *)&v12, v8 / 0x93A80);
      __n128 v9 = ((__n128 (*)(uint64_t))*(void *)(*(void *)(v7 + 16) + 32))(v7 + 16);
      v9.n128_u32[0] = *(_DWORD *)(v7 + 24);
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, ((double)v9.n128_u64[0] * 2.32830644e-10 * 1000.0) + 1000 * (v10 % 0x93A80));
    }
    else
    {
      BlueFin::GlSysLogEntry::PutU32((BlueFin::GlSysLogEntry *)&v12, *(_DWORD *)(v2 + 12));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v12, *(double *)(v7 + 32));
      BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v12, *(double *)(v7 + 40));
      if (v5 >= 3)
      {
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v12, *(double *)(v7 + 48));
        BlueFin::GlSysLogEntry::PutD64((BlueFin::GlSysLogEntry *)&v12, *(double *)(v7 + 56));
      }
    }
    BlueFin::GlUtlGlSysLogEntryCodec::PrintEntry((uint64_t)&v12, v6, 4);
  }
  return 1;
}

void BlueFin::GlPeTimeManager::SetDataSubFrmMeas(BlueFin::GlPeTimeManager *this, const BlueFin::GlDataSubFrmMeas *a2)
{
  unsigned int v5 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)this + 5);
  uint64_t v6 = (unsigned __int8 *)a2 + 8;
  int v103 = 7;
  char v104 = 0;
  BlueFin::GlPeSvIdConverter::SvId2Gnss(v5, (unsigned __int8 *)a2 + 8, (uint64_t)&v103);
  switch(v103)
  {
    case 0:
    case 3:
      if (!BlueFin::GlPeSvHealthHelper::IsUsable(*((void *)this + 3) + 32, &v103)) {
        return;
      }
      int v7 = *((unsigned __int8 *)a2 + 9);
      unsigned int v8 = *((_DWORD *)a2 + 7);
      int v9 = (v8 >> 13) & 1;
      if (v7 != 1) {
        LOBYTE(v9) = 0;
      }
      if ((*((_DWORD *)a2 + 6) | *((_DWORD *)a2 + 5)) < 0
        || (*((_DWORD *)a2 + 9) | *((_DWORD *)a2 + 8)) < 0
        || (v9 & 1) != 0
        || v8 >> 30)
      {
        return;
      }
      if (*((_DWORD *)this + 858) && *((_DWORD *)this + 877)) {
        goto LABEL_135;
      }
      unsigned int v10 = *((_DWORD *)a2 + 15);
      int v11 = v8 >> 20;
      if (v7 == 1) {
        int v12 = v11;
      }
      else {
        int v12 = 0;
      }
      LODWORD(v2) = *((_DWORD *)a2 + 4);
      double v102 = 0.0;
      unsigned int v101 = 0;
      BlueFin::GlPeTimeManager::getFlightTimeMs((uint64_t)this, v6, (uint64_t *)&v102, (int *)&v101);
      uint64_t v13 = *v6;
      LOBYTE(v98) = v13;
      int v99 = 0;
      __int16 v14 = 575;
      __int16 v100 = 575;
      if ((v13 + 67) >= 0x44u)
      {
        uint64_t v15 = BlueFin::GlSvId::s_aucSvId2gnss[v13];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v15] == 255)
        {
          int v99 = -1;
          __int16 v14 = 575;
        }
        else
        {
          __int16 v14 = BlueFin::GlSignalId::s_ausGnss2signalId[v15]
              + v13
              - BlueFin::GlSvId::s_aucGnss2minSvId[v15];
          __int16 v100 = v14;
        }
      }
      double v50 = (double)v2;
      if ((((unint64_t)*(unsigned int *)(*(void *)(*(void *)this + 8) + 4 * (v14 >> 5)) >> (v14 & 0x1F)) & 1) != 0
        && (MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)this, (const BlueFin::GlSignalId *)&v98, 0, 0)) != 0&& (MeMeas[12] & 0x20) != 0)
      {
        unsigned int v10 = **(_DWORD **)this;
        double v60 = v50 - *((double *)MeMeas + 7);
        if (v60 <= 302400.0)
        {
          if (v60 <= -302400.0) {
            --v12;
          }
        }
        else
        {
          ++v12;
        }
        double v50 = *((double *)MeMeas + 7);
      }
      else
      {
        v101 += 1000;
      }
      double v52 = (double)v10;
      if (v101 <= 0x7D0) {
        unsigned int v53 = 2000;
      }
      else {
        unsigned int v53 = v101;
      }
      double v54 = v50 + v102 * 0.001;
      if (*((_DWORD *)this + 877)) {
        goto LABEL_98;
      }
      unint64_t v95 = &off_270EBC600;
      double v55 = fmod(v54, 1.0);
      if (v55 < 0.0 || v55 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v57 = v55 * 4294967300.0 + 0.5;
      unsigned int v58 = v57;
      if (v57 >= 4294967300.0) {
        unsigned int v58 = -1;
      }
      LODWORD(v96) = v58;
      HIDWORD(v96) = v54;
      unint64_t v95 = &off_270EBC600;
      double v59 = *((double *)this + 439);
      if (v59 == -7199999.0)
      {
        *((double *)this + 439) = v52;
        *((_DWORD *)this + 882) = v58;
        *((_DWORD *)this + 883) = v54;
        *((_DWORD *)this + 884) = v53;
        goto LABEL_98;
      }
      double v61 = v52 - v59;
      if (*((double *)this + 443) != -7199999.0)
      {
        double v65 = *((double *)this + 441);
        double v109 = *((double *)this + 439);
        double v111 = v65;
        int v110 = &off_270EBC600;
        LODWORD(v112) = *((_DWORD *)this + 884);
        BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)&v109, v61 * 0.001);
        double v109 = (double)v10;
        double v66 = *((double *)this + 445);
        double v105 = *((double *)this + 443);
        double v107 = v66;
        *(double *)&int v106 = COERCE_DOUBLE(&off_270EBC600);
        int v108 = *((_DWORD *)this + 892);
        BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)&v105, (v52 - v105) * 0.001);
        int v67 = v96;
        int v68 = HIDWORD(v96);
        if (fabs(BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(v96, HIDWORD(v96), LODWORD(v111), HIDWORD(v111))) > (double)(LODWORD(v112) + v53) * 0.000001)
        {
          if (fabs(BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(v96, HIDWORD(v96), LODWORD(v107), HIDWORD(v107))) > (double)(v108 + v53) * 0.000001)
          {
            *((void *)this + 439) = *((void *)this + 443);
            *((void *)this + 441) = *((void *)this + 445);
            *((_DWORD *)this + 884) = *((_DWORD *)this + 892);
            *((double *)this + 443) = v52;
            *((_DWORD *)this + 890) = v67;
            *((_DWORD *)this + 891) = v68;
            *((_DWORD *)this + 892) = v53;
            goto LABEL_98;
          }
          int v69 = 2;
          goto LABEL_97;
        }
LABEL_95:
        int v69 = 1;
LABEL_97:
        *((_DWORD *)this + 877) = v69;
        goto LABEL_98;
      }
      if (v61 > 5000.0)
      {
        double v62 = *((double *)this + 441);
        double v109 = *((double *)this + 439);
        double v111 = v62;
        int v110 = &off_270EBC600;
        LODWORD(v112) = *((_DWORD *)this + 884);
        BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)&v109, v61 * 0.001);
        *((double *)this + 443) = v52;
        unsigned int v63 = v96;
        unsigned int v64 = HIDWORD(v96);
        *((_DWORD *)this + 890) = v96;
        *((_DWORD *)this + 891) = v64;
        *((_DWORD *)this + 892) = v53;
        if (fabs(BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(v63, v64, LODWORD(v111), HIDWORD(v111))) <= (double)(LODWORD(v112) + v53) * 0.000001) {
          goto LABEL_95;
        }
      }
LABEL_98:
      BOOL v70 = (int *)((char *)this + 3432);
      int v71 = *((_DWORD *)this + 858);
      if (*((unsigned char *)a2 + 9) != 1 || v71) {
        goto LABEL_122;
      }
      if (v12 < 0) {
        LOWORD(v12) = 1023;
      }
      unint64_t v95 = &off_270EBC600;
      double v72 = fmod(v54, 1.0);
      if (v72 < 0.0 || v72 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v74 = v72 * 4294967300.0 + 0.5;
      unsigned int v75 = v74;
      if (v74 >= 4294967300.0) {
        unsigned int v75 = -1;
      }
      unsigned int v76 = v54 + 604800 * (unsigned __int16)v12;
      *(double *)&unint64_t v96 = COERCE_DOUBLE(__PAIR64__(v76, v75));
      unint64_t v95 = &off_270EBC600;
      double v77 = *((double *)this + 430);
      if (v77 == -7199999.0)
      {
        *((double *)this + 430) = v52;
        *((_DWORD *)this + 864) = v75;
        *((_DWORD *)this + 865) = v76;
        *((_DWORD *)this + 866) = v53;
        goto LABEL_121;
      }
      if (*((double *)this + 434) != -7199999.0)
      {
        double v80 = *((double *)this + 432);
        double v109 = *((double *)this + 430);
        double v111 = v80;
        int v110 = &off_270EBC600;
        LODWORD(v112) = *((_DWORD *)this + 866);
        BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)&v109, (v52 - v77) * 0.001);
        double v109 = v52;
        double v81 = *((double *)this + 436);
        double v105 = *((double *)this + 434);
        double v107 = v81;
        *(double *)&int v106 = COERCE_DOUBLE(&off_270EBC600);
        int v108 = *((_DWORD *)this + 874);
        BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)&v105, (v52 - v105) * 0.001);
        int v82 = v96;
        int v83 = HIDWORD(v96);
        if (fabs(BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(v96, HIDWORD(v96), LODWORD(v111), HIDWORD(v111))) > (double)(LODWORD(v112) + v53) * 0.000001)
        {
          if (fabs(BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(v96, HIDWORD(v96), LODWORD(v107), HIDWORD(v107))) > (double)(v108 + v53) * 0.000001)
          {
            *((void *)this + 430) = *((void *)this + 434);
            *((void *)this + 432) = *((void *)this + 436);
            *((_DWORD *)this + 866) = *((_DWORD *)this + 874);
            *((double *)this + 434) = v52;
            *((_DWORD *)this + 872) = v82;
            *((_DWORD *)this + 873) = v83;
            *((_DWORD *)this + 874) = v53;
            goto LABEL_121;
          }
          int v84 = 2;
          goto LABEL_120;
        }
LABEL_118:
        int v84 = 1;
LABEL_120:
        *BOOL v70 = v84;
        goto LABEL_121;
      }
      if (v52 - v77 > 25000.0)
      {
        *((double *)this + 434) = v52;
        *((_DWORD *)this + 872) = v75;
        *((_DWORD *)this + 873) = v76;
        *((_DWORD *)this + 874) = v53;
        double v78 = *((double *)this + 432);
        double v109 = v77;
        double v111 = v78;
        int v110 = &off_270EBC600;
        LODWORD(v112) = *((_DWORD *)this + 866);
        BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)&v109, (v52 - v77) * 0.001);
        double v79 = BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(*((_DWORD *)this + 872), *((_DWORD *)this + 873), LODWORD(v111), HIDWORD(v111));
        if (fabs(v79) <= (double)(*((_DWORD *)this + 874) + LODWORD(v112)) * 0.000001) {
          goto LABEL_118;
        }
      }
LABEL_121:
      int v71 = *v70;
LABEL_122:
      unsigned int v85 = *((_DWORD *)this + 642);
      if (v85 <= 0xFF9222FE) {
        double v86 = (double)v85;
      }
      else {
        double v86 = (double)(int)v85;
      }
      if (v71 && !*((unsigned char *)this + 3504))
      {
        BlueFin::GlPeVerifySubframeTime::GetVerifiedWeek((BlueFin::GlPeVerifySubframeTime *)&v105, v86, (int *)this + 858);
        LODWORD(v88) = v108;
        double v109 = v107;
        LODWORD(v110) = 0;
        double v111 = v105;
        double v112 = (double)v88;
        *((unsigned char *)this + 3504) = 1;
        *((unsigned char *)this + 3576) = 1;
        unsigned int v87 = 5;
        goto LABEL_134;
      }
      if (*((_DWORD *)this + 877) && !*((unsigned char *)this + 3504) && !*((unsigned char *)this + 3576) && *((_DWORD *)this + 644))
      {
        BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, v86, 1, (uint64_t)&v95);
        v97[0] = (uint64_t)&off_270EBC600;
        v97[1] = 0;
        BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeGnssTime *)&v95, (BlueFin::GlGpsTime *)v97);
        BlueFin::GlPeVerifySubframeTime::GetVerifiedTow((BlueFin::GlPeVerifySubframeTime *)&v105, v86, (BlueFin::GlPeTimeManager *)((char *)this + 3432), (BlueFin::GlWeekTowTime *)v97);
        LODWORD(v91) = v108;
        double v109 = v107;
        LODWORD(v110) = 0;
        double v111 = v105;
        double v112 = (double)v91;
        *((unsigned char *)this + 3576) = 1;
        unsigned int v87 = 6;
        goto LABEL_134;
      }
      if (*((unsigned char *)a2 + 9) == 1 && !*((_DWORD *)this + 644))
      {
        BlueFin::GlGpsTime::GlGpsTime((BlueFin::GlGpsTime *)&v105, (unsigned __int16)v12, v54);
        double v109 = *(double *)&v106;
        LODWORD(v110) = 0;
        double v111 = v52;
        double v112 = (double)v53;
        unsigned int v87 = 4;
LABEL_134:
        BlueFin::GlPeTimeManager::SetTime(this, (BlueFin::GlPeGnssTime *)&v109, v87, v6);
      }
LABEL_135:
      if (!BlueFin::GlSvId::s_aucSvId2gnss[*v6])
      {
        double v105 = COERCE_DOUBLE(&off_270EBC600);
        *(double *)&int v106 = 0.0;
        if (*((_DWORD *)this + 644))
        {
          BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *((_DWORD *)a2 + 15), 1, (uint64_t)&v109);
          *(double *)&int v106 = v109;
          unsigned int v89 = (const BlueFin::GlGpsTime *)&v105;
        }
        else
        {
          unsigned int v89 = 0;
        }
        BlueFin::GlPeGpsTimeMgr::SetDataSubFrmMeas((BlueFin::GlPeTimeManager *)((char *)this + 64), a2, v89);
        int v90 = *((unsigned __int8 *)this + 176);
        *((unsigned char *)this + 176) = 0;
        if (v90) {
          BlueFin::GlPeTimeManager::UpdateLeapSecFromGpsUtcModel(this);
        }
      }
      return;
    case 1:
    case 4:
      return;
    case 6:
      BlueFin::GlPeNicTimeMgr::SetDataSubFrmMeas((BlueFin::GlPeTimeManager *)((char *)this + 2440), a2);
      *((unsigned char *)this + 2504) = 0;
      int v16 = *((unsigned __int8 *)this + 2544);
      *((unsigned char *)this + 2544) = 0;
      if (v16) {
        BlueFin::GlPeTimeManager::updateConversionTable(this);
      }
      if (*((_DWORD *)this + 644) || !*((unsigned char *)this + 2448)) {
        return;
      }
      int v17 = *((unsigned __int16 *)this + 1225);
      unsigned int v18 = *((_DWORD *)this + 614);
      unsigned int v19 = *((_DWORD *)this + 613);
      v97[0] = 0;
      int v98 = 0;
      BlueFin::GlPeTimeManager::getFlightTimeMs((uint64_t)this, v6, v97, &v98);
      int v20 = v98;
      double v105 = COERCE_DOUBLE(&off_270EBF080);
      double v21 = fmod((double)v18, 1.0);
      if (v21 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v22 = v21 * 4294967300.0 + 0.5;
      if (v22 >= 4294967300.0) {
        unsigned int v23 = -1;
      }
      else {
        unsigned int v23 = v22;
      }
      unsigned int v24 = v18 + 604800 * v17 + 619315200;
      *(double *)&int v106 = COERCE_DOUBLE(__PAIR64__(v24, v23));
      unsigned int v25 = *((_DWORD *)this + 642);
      double v26 = (double)(int)v25;
      double v105 = COERCE_DOUBLE(&off_270EBF080);
      if (v25 <= 0xFF9222FE) {
        double v26 = (double)v25;
      }
      double v27 = (double)v19;
      if (v19 > 0xFF9222FE) {
        double v27 = (double)(int)v19;
      }
      double v28 = (*(double *)v97 + v26 - v27) * 0.001;
      double v29 = fabs(v28);
      double v30 = fmod(v29, 1.0);
      double v31 = v30 * 4294967300.0 + 0.5;
      LODWORD(v32) = v31;
      if (v31 >= 4294967300.0) {
        uint64_t v32 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v32 = v32;
      }
      if (v30 < 0.0 || v30 >= 1.0)
      {
        uint64_t v92 = "dFracSec >= 0.0 && dFracSec < 1.0";
        int v93 = 173;
        double v94 = "glpe_timepoint.h";
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        goto LABEL_145;
      }
      unsigned int v34 = v29;
      if (v28 < 0.0)
      {
        unsigned int v36 = v24 - v34;
        if (v24 > v34 || (v24 == v34 ? (BOOL v37 = v23 >= v32) : (BOOL v37 = 0), v37))
        {
          BOOL v37 = v23 >= v32;
          LODWORD(v32) = v23 - v32;
          int v39 = !v37;
          int v35 = v36 - v39;
        }
        else
        {
          if (v34 - v24 != v23 > v32 || v23 != v32)
          {
            uint64_t v92 = "!tDelta.isNegative()";
            int v93 = 425;
            double v94 = "glpe_datetime.h";
            DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
LABEL_145:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v94, v93, v92);
          }
          int v35 = 0;
          LODWORD(v32) = 0;
        }
      }
      else
      {
        v32 += v23;
        int v35 = v24 + v34 + HIDWORD(v32);
      }
      *(double *)&int v106 = COERCE_DOUBLE(__PAIR64__(v35, v32));
      unsigned int v40 = v35 - 619315200;
      unsigned int v41 = v40 / 0x93A80;
      double v42 = (double)v32 * 2.32830644e-10 + (double)(v40 % 0x93A80);
      unint64_t v95 = &off_270EBC600;
      double v43 = fmod(v42, 1.0);
      if (v43 < 0.0 || v43 >= 1.0)
      {
        DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timepoint.h", 173, "dFracSec >= 0.0 && dFracSec < 1.0");
      }
      double v45 = v43 * 4294967300.0 + 0.5;
      unsigned int v46 = v45;
      if (v45 >= 4294967300.0) {
        unsigned int v46 = -1;
      }
      LODWORD(v96) = v46;
      HIDWORD(v96) = v42 + 604800 * (v41 & 0x3FF);
      unint64_t v95 = &off_270EBC600;
      double v47 = *(float *)(BlueFin::GlPeGnssTime::GetConversionTable((BlueFin::GlPeTimeManager *)((char *)this + 2608)) + 68)
          + 0.0
          + (double)(v20 + 1000);
      unsigned int v48 = *((_DWORD *)this + 642);
      double v49 = (double)(int)v48;
      if (v48 <= 0xFF9222FE) {
        double v49 = (double)v48;
      }
      double v109 = *(double *)&v96;
      LODWORD(v110) = 0;
      double v111 = v49;
      double v112 = v47;
      BlueFin::GlPeTimeManager::SetTime(this, (BlueFin::GlPeGnssTime *)&v109, 4u, v6);
      return;
    default:
      DeviceFaultNotify("glpe_timemgr.cpp", 2480, "SetDataSubFrmMeas", (char)"otGnss.eGnss == GNSS_GPS INC_QZS(|| otGnss.eGnss == GNSS_QZSS) INC_NIC(|| otGnss.eGnss == GNSS_NAVIC)");
      __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 2480, "otGnss.eGnss == GNSS_GPS INC_QZS(|| otGnss.eGnss == GNSS_QZSS) INC_NIC(|| otGnss.eGnss == GNSS_NAVIC)");
  }
}

uint64_t BlueFin::GlPeTimeManager::getFlightTimeMs(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, int *a4)
{
  AidBySvId = BlueFin::GlPeSatAidInfo::GetAidBySvId(*(void *)(a1 + 16) + 32, a2);
  if (AidBySvId && (AidBySvId[24] & 8) != 0)
  {
    *(double *)a3 = *((double *)AidBySvId + 4) * -1000.0;
    uint64_t result = BlueFin::GlPeTimeMgrUtil::precUsToUlong((BlueFin::GlPeTimeMgrUtil *)AidBySvId, *((float *)AidBySvId + 10) * 1000000.0);
    *a4 = result;
  }
  else
  {
    return BlueFin::GlPeTimeManager::GetAvgFlightTimeMs(a1, a2, a3, a4);
  }
  return result;
}

void BlueFin::GlPeVerifySubframeTime::GetVerifiedWeek(BlueFin::GlPeVerifySubframeTime *this, double a2, int *a3)
{
  int v3 = *a3;
  if (!*a3)
  {
    DeviceFaultNotify("glpe_timemgr.cpp", 8055, "GetVerifiedWeek", (char)"m_iCorrectWeekNode != 0");
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, "glpe_timemgr.cpp", 8055, "m_iCorrectWeekNode != 0");
  }
  *(void *)this = 0xC15B773FC0000000;
  *((void *)this + 1) = &off_270EBC600;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v3 != 1)
  {
    if (a3 + 10 != (int *)this)
    {
      double v6 = *((double *)a3 + 5);
      *(double *)this = v6;
      *((void *)this + 2) = *((void *)a3 + 7);
      int v7 = a3 + 16;
      goto LABEL_7;
    }
LABEL_8:
    double v6 = -7199999.0;
    goto LABEL_9;
  }
  if (a3 + 2 == (int *)this) {
    goto LABEL_8;
  }
  double v6 = *((double *)a3 + 1);
  *(double *)this = v6;
  *((void *)this + 2) = *((void *)a3 + 3);
  int v7 = a3 + 8;
LABEL_7:
  *((_DWORD *)this + 6) = *v7;
LABEL_9:
  BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)this, (a2 - v6) * 0.001);
  *(double *)this = a2;
}

void BlueFin::GlPeVerifySubframeTime::GetVerifiedTow(BlueFin::GlPeVerifySubframeTime *this, double a2, const BlueFin::GlGpsTime *a3, BlueFin::GlWeekTowTime *a4)
{
  int v4 = *((_DWORD *)a3 + 19);
  if (!v4)
  {
    unsigned int v19 = "m_iCorrectTowNode != 0";
    DeviceFaultNotify("glpe_timemgr.cpp", 8085, "GetVerifiedTow", (char)"m_iCorrectTowNode != 0");
    int v20 = "glpe_timemgr.cpp";
    int v21 = 8085;
LABEL_18:
    __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v20, v21, v19);
  }
  unsigned int v8 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *(void *)this = 0xC15B773FC0000000;
  *((void *)this + 1) = &off_270EBC600;
  *((_DWORD *)this + 6) = 0;
  if (v4 == 1)
  {
    if ((const BlueFin::GlGpsTime *)((char *)a3 + 80) != this)
    {
      double v9 = *((double *)a3 + 10);
      *(double *)this = v9;
      *((void *)this + 2) = *((void *)a3 + 12);
      unsigned int v10 = (char *)a3 + 104;
LABEL_7:
      *((_DWORD *)this + 6) = *(_DWORD *)v10;
      goto LABEL_9;
    }
  }
  else if ((const BlueFin::GlGpsTime *)((char *)a3 + 112) != this)
  {
    double v9 = *((double *)a3 + 14);
    *(double *)this = v9;
    *((void *)this + 2) = *((void *)a3 + 16);
    unsigned int v10 = (char *)a3 + 136;
    goto LABEL_7;
  }
  double v9 = -7199999.0;
LABEL_9:
  BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=((uint64_t)this, (a2 - v9) * 0.001);
  *(double *)this = a2;
  unsigned int v11 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 32))(v8);
  LODWORD(v12) = *((_DWORD *)this + 4);
  BlueFin::GlWeekTowTime::resolveTowAmbiguity(a4, (double)v12 * 2.32830644e-10 + (double)(v11 % 0x93A80), v22);
  v22[3] = v22[0];
  unsigned int v13 = HIDWORD(v22[0]) / 0x93A80;
  v22[2] = &off_270EBC600;
  double v14 = (double)LODWORD(v22[0]) * 2.32830644e-10 + (double)(HIDWORD(v22[0]) % 0x93A80);
  v22[0] = &off_270EBC600;
  double v15 = fmod(v14, 1.0);
  if (v15 < 0.0 || v15 >= 1.0)
  {
    unsigned int v19 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v20 = "glpe_timepoint.h";
    int v21 = 173;
    goto LABEL_18;
  }
  double v17 = v15 * 4294967300.0 + 0.5;
  unsigned int v18 = v17;
  if (v17 >= 4294967300.0) {
    unsigned int v18 = -1;
  }
  *((_DWORD *)this + 4) = v18;
  *((_DWORD *)this + 5) = v14 + 604800 * (v13 & 0x3FF);
}

void BlueFin::GlPeTimeManager::SetGalileoDataPage(BlueFin::GlPeTimeManager *this, const BlueFin::GlGalileoINavPage *a2)
{
  unsigned int v2 = *((unsigned __int8 *)a2 + 10);
  BOOL v3 = v2 > 0xA;
  int v4 = (1 << v2) & 0x461;
  if (!v3 && v4 != 0)
  {
    uint64_t v8 = *((unsigned __int8 *)a2 + 8);
    v66[0] = v8;
    int v67 = 0;
    __int16 v9 = 575;
    __int16 v68 = 575;
    if ((v8 + 67) >= 0x44u)
    {
      uint64_t v10 = BlueFin::GlSvId::s_aucSvId2gnss[v8];
      if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v10] == 255)
      {
        int v67 = -1;
      }
      else
      {
        __int16 v9 = BlueFin::GlSignalId::s_ausGnss2signalId[v10]
           + v8
           - BlueFin::GlSvId::s_aucGnss2minSvId[v10];
        __int16 v68 = v9;
      }
    }
    unsigned int v11 = (BlueFin::GlPeGloFcnOsnMgr **)*((void *)this + 5);
    int v64 = 7;
    char v65 = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(v11, v66, (uint64_t)&v64);
    if (BlueFin::GlPeSvHealthHelper::IsUsable(*((void *)this + 3) + 32, &v64))
    {
      BlueFin::GlPeGalTimeMgr::SetGalileoDataPage((uint64_t)this + 2336, a2);
      if (!*((unsigned char *)this + 2344) || !*((unsigned char *)a2 + 11))
      {
LABEL_57:
        int v48 = *((unsigned __int8 *)this + 2432);
        *((unsigned char *)this + 2432) = 0;
        int v49 = *((unsigned __int8 *)this + 2392);
        *((unsigned char *)this + 2392) = 0;
        if (v49 | v48) {
          BlueFin::GlPeTimeManager::updateConversionTable(this);
        }
        return;
      }
      int v12 = *((unsigned __int16 *)this + 1173);
      unsigned int v13 = *((_DWORD *)this + 587);
      double v61 = &off_270EBF538;
      double v14 = fmod((double)v13, 1.0);
      if (v14 >= 1.0) {
        goto LABEL_60;
      }
      double v15 = v14 * 4294967300.0 + 0.5;
      unsigned int v16 = v15;
      if (v15 >= 4294967300.0) {
        unsigned int v16 = -1;
      }
      int v17 = 604800 * v12;
      unsigned int v62 = v16;
      unsigned int v63 = v13 + 619315200 + v17;
      double v61 = &off_270EBF538;
      unsigned int v18 = *((_DWORD *)a2 + 4);
      double v59 = &off_270EBF538;
      double v19 = fmod((double)v18, 1.0);
      if (v19 >= 1.0) {
        goto LABEL_60;
      }
      double v20 = v19 * 4294967300.0 + 0.5;
      unsigned int v21 = v20;
      if (v20 >= 4294967300.0) {
        unsigned int v21 = -1;
      }
      LODWORD(v60) = v21;
      HIDWORD(v60) = v17 + v18 + 619315200;
      double v59 = &off_270EBF538;
      double v22 = 0.0;
      if ((((unint64_t)*(unsigned int *)(*(void *)(*(void *)this + 8) + 4 * (v9 >> 5)) >> (v9 & 0x1F)) & 1) != 0
        && (MeMeas = BlueFin::GlPeMsmtMgr::GetMeMeas(*(BlueFin::GlPeMsmtMgr **)this, (const BlueFin::GlSignalId *)v66, 0, 0)) != 0&& (MeMeas[12] & 0x20) != 0)
      {
        LODWORD(v24) = **(_DWORD **)this;
        double v22 = (double)v24;
        BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v59, *((long double *)MeMeas + 7), &v53);
        unint64_t v60 = v53;
        char v25 = 1;
      }
      else
      {
        char v25 = 0;
      }
      unsigned int v26 = *((_DWORD *)a2 + 13);
      double v27 = (double)v26;
      if (!v26) {
        double v27 = v22;
      }
      if (v22 == 0.0) {
        double v28 = v27;
      }
      else {
        double v28 = v22;
      }
      if (v28 != 0.0)
      {
        double v58 = 0.0;
        int v57 = 0;
        BlueFin::GlPeTimeManager::getFlightTimeMs((uint64_t)this, v66, (uint64_t *)&v58, &v57);
        if ((v25 & 1) == 0) {
          v57 += 1000;
        }
        double v29 = v58 * 0.001;
        double v30 = fabs(v58 * 0.001);
        double v31 = fmod(v30, 1.0);
        double v32 = v31 * 4294967300.0 + 0.5;
        unsigned int v33 = v32;
        if (v32 >= 4294967300.0) {
          unsigned int v33 = -1;
        }
        if (v31 < 0.0 || v31 >= 1.0) {
          goto LABEL_60;
        }
        unsigned int v34 = v30;
        if (v29 < 0.0)
        {
          if (v60 < __PAIR64__(v34, v33))
          {
            if (v34 - HIDWORD(v60) != v60 > v33 || v33 != v60)
            {
              double v50 = "!tDelta.isNegative()";
              DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
              unsigned int v51 = "glpe_datetime.h";
              int v52 = 425;
              goto LABEL_61;
            }
            int v36 = 0;
            LODWORD(v35) = 0;
          }
          else
          {
            BOOL v37 = v60 >= v33;
            LODWORD(v35) = v60 - v33;
            int v38 = !v37;
            int v36 = HIDWORD(v60) - v34 - v38;
          }
        }
        else
        {
          unint64_t v35 = v60 + (unint64_t)v33;
          int v36 = HIDWORD(v60) + v34 + HIDWORD(v35);
        }
        unint64_t v60 = __PAIR64__(v36, v35);
        if (!*((_DWORD *)this + 644))
        {
          unsigned int v40 = ((uint64_t (*)(void))v59[4])(&v59);
          unsigned int v41 = ((uint64_t (*)(void))v59[4])(&v59);
          LODWORD(v42) = v60;
          double v43 = (double)v42 * 2.32830644e-10 + (double)(v41 % 0x93A80);
          double v44 = fmod(v43, 1.0);
          if (v44 < 0.0 || v44 >= 1.0)
          {
LABEL_60:
            double v50 = "dFracSec >= 0.0 && dFracSec < 1.0";
            DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
            unsigned int v51 = "glpe_timepoint.h";
            int v52 = 173;
LABEL_61:
            __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v51, v52, v50);
          }
          double v46 = v44 * 4294967300.0 + 0.5;
          unsigned int v47 = v46;
          if (v46 >= 4294967300.0) {
            unsigned int v47 = -1;
          }
          LODWORD(v46) = v57;
          LODWORD(v53) = v47;
          HIDWORD(v53) = v43 + 604800 * (v40 / 0x93A80) + 619315200;
          int v54 = 0;
          double v55 = v28;
          double v56 = (double)*(unint64_t *)&v46;
          BlueFin::GlPeTimeManager::SetTime(this, (BlueFin::GlPeGnssTime *)&v53, 4u, v66);
        }
        goto LABEL_57;
      }
    }
  }
}

uint64_t BlueFin::GlPeTimeManager::SetGlonassDataString(uint64_t this, const BlueFin::GlGlonassDataString *a2)
{
  int v2 = (*((_DWORD *)a2 + 5) >> 27) & 0xF;
  if ((v2 - 1) < 5 || v2 == 14)
  {
    unsigned int v5 = (float32x2_t *)this;
    unsigned __int8 v44 = *((unsigned char *)a2 + 8);
    double v6 = *(BlueFin::GlPeGloFcnOsnMgr ***)(this + 40);
    int v42 = 7;
    unsigned __int8 v43 = 0;
    BlueFin::GlPeSvIdConverter::SvId2Gnss(v6, &v44, (uint64_t)&v42);
    if (v42 > 6
      || v43 - 1 > 0x3E
      || (this = BlueFin::GlPeSvHealthHelper::IsUsable(*(void *)&v5[3] + 32, &v42), this))
    {
      __int32 v7 = v5[26].i32[1];
      BlueFin::GlPeGlnTimeMgr::SetGlonassDataString(v5 + 24, a2);
      BOOL v8 = v7 == -7200001 && v5[26].i32[1] != -7200001;
      unsigned int v41 = 0;
      unsigned __int8 v40 = 0;
      unsigned __int16 v39 = 0;
      unsigned int v38 = 0;
      this = BlueFin::GlPeGlnTimeMgr::GetInitialTime((BlueFin::GlPeGlnTimeMgr *)&v5[24], &v41, &v40, &v39, &v38);
      if (v5[322].i32[0]) {
        int v10 = v8;
      }
      else {
        int v10 = 1;
      }
      if (v10 == 1 && this)
      {
        LODWORD(v9) = v38;
        BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)v35, v40, v39, (double)v9 * 0.001);
        double v34 = 0.0;
        unsigned int v33 = 0;
        BlueFin::GlPeTimeManager::getFlightTimeMs((uint64_t)v5, &v44, (uint64_t *)&v34, (int *)&v33);
        if (v33 <= 0x7D0) {
          unsigned int v11 = 2000;
        }
        else {
          unsigned int v11 = v33;
        }
        double v12 = v34 * 0.001;
        double v13 = fabs(v34 * 0.001);
        double v14 = fmod(v13, 1.0);
        double v15 = v14 * 4294967300.0 + 0.5;
        unsigned int v16 = v15;
        if (v15 >= 4294967300.0) {
          unsigned int v16 = -1;
        }
        if (v14 < 0.0 || v14 >= 1.0)
        {
          double v27 = "dFracSec >= 0.0 && dFracSec < 1.0";
          DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
          double v28 = "glpe_timepoint.h";
          int v29 = 173;
          goto LABEL_54;
        }
        unsigned int v18 = v13;
        if (v12 < 0.0)
        {
          if (v37 > v18 || (v37 == v18 ? (BOOL v21 = v36 >= v16) : (BOOL v21 = 0), v21))
          {
            BOOL v21 = v36 >= v16;
            LODWORD(v19) = v36 - v16;
            int v23 = !v21;
            int v20 = v37 - v18 - v23;
          }
          else
          {
            if (v18 - v37 != v36 > v16 || v16 != v36)
            {
              double v27 = "!tDelta.isNegative()";
              DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
              double v28 = "glpe_datetime.h";
              int v29 = 425;
LABEL_54:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v28, v29, v27);
            }
            int v20 = 0;
            LODWORD(v19) = 0;
          }
        }
        else
        {
          unint64_t v19 = v36 + (unint64_t)v16;
          int v20 = v37 + v18 + HIDWORD(v19);
        }
        unsigned int v36 = v19;
        unsigned int v37 = v20;
        LODWORD(v14) = v41;
        v30[0] = v19;
        v30[1] = v20;
        v30[2] = 1;
        double v31 = (double)*(unint64_t *)&v14;
        double v32 = (double)v11;
        if (v5[26].i32[1] == -7200001) {
          unsigned int v24 = 4;
        }
        else {
          unsigned int v24 = 5;
        }
        this = BlueFin::GlPeTimeManager::SetTime((BlueFin::GlPeTimeManager *)v5, (BlueFin::GlPeGnssTime *)v30, v24, &v44);
      }
      if (v5[54].i8[3]) {
        this = BlueFin::GlPeTimeManager::updateLeapSecFromGlnsKp((BlueFin::GlPeTimeManager *)v5);
      }
      int v25 = v5[43].u8[1];
      v5[43].i8[1] = 0;
      if (v25) {
        return BlueFin::GlPeTimeManager::updateConversionTable((BlueFin::GlPeTimeManager *)v5);
      }
      int v26 = v5[50].u8[1];
      v5[50].i8[1] = 0;
      if (v26) {
        return BlueFin::GlPeTimeManager::updateConversionTable((BlueFin::GlPeTimeManager *)v5);
      }
    }
  }
  return this;
}

BOOL BlueFin::GlPeTimeManager::SetBdsTime(BlueFin::GlPeTimeManager *this, char a2, int a3)
{
  uint64_t v5 = *((void *)this + 3);
  int v8 = 4;
  char v9 = a2;
  BOOL result = BlueFin::GlPeSvHealthHelper::IsUsable(v5 + 32, &v8);
  if (result)
  {
    int v7 = *((_DWORD *)this + 538);
    if ((v7 & 2) == 0 || *((_DWORD *)this + 541) != a3)
    {
      *((_DWORD *)this + 541) = a3;
      *((_DWORD *)this + 538) = v7 | 2;
      *((_DWORD *)this + 539) |= 2u;
    }
  }
  return result;
}

uint64_t BlueFin::GlPeTimeManager::SetBdsTime(BlueFin::GlPeTimeManager *this, int a2, int a3, unsigned int a4)
{
  uint64_t v8 = *((void *)this + 3);
  LODWORD(v39) = 4;
  BYTE4(v39) = a2;
  uint64_t result = BlueFin::GlPeSvHealthHelper::IsUsable(v8 + 32, (int *)&v39);
  if (result)
  {
    uint64_t result = BlueFin::GlPeBdsTimeMgr::SetTime((uint64_t)this + 2144, a3, a4);
    if (!*((_DWORD *)this + 644))
    {
      v50[0] = a2 + 75;
      int v51 = 0;
      int v10 = 575;
      __int16 v52 = 575;
      if ((a2 - 114) >= 0x44)
      {
        uint64_t v11 = BlueFin::GlSvId::s_aucSvId2gnss[(a2 + 75)];
        if (BlueFin::GlSignalId::s_aascSignalIndexAndGnss2signalType[v11] == 255)
        {
          int v51 = -1;
          int v10 = 575;
        }
        else
        {
          __int16 v52 = BlueFin::GlSignalId::s_ausGnss2signalId[v11]
              + (a2 + 75)
              - BlueFin::GlSvId::s_aucGnss2minSvId[v11];
          int v10 = v52;
        }
      }
      uint64_t result = *(void *)this;
      if (((unint64_t)*(unsigned int *)(*(void *)(*(void *)this + 8) + 4 * (v10 >> 5)) >> (v10 & 0x1F)))
      {
        uint64_t result = (uint64_t)BlueFin::GlPeMsmtMgr::GetMeMeas((BlueFin::GlPeMsmtMgr *)result, (const BlueFin::GlSignalId *)v50, 0, 0);
        if (result)
        {
          uint64_t v12 = result;
          if ((*(unsigned char *)(result + 12) & 0x20) != 0)
          {
            int v48 = &off_270EBF588;
            double v13 = fmod((double)a4, 1.0);
            if (v13 >= 1.0) {
              goto LABEL_42;
            }
            double v14 = v13 * 4294967300.0 + 0.5;
            unsigned int v15 = v14;
            if (v14 >= 4294967300.0) {
              unsigned int v15 = -1;
            }
            LODWORD(v49) = v15;
            HIDWORD(v49) = a4 + 604800 * a3 + 820108814;
            int v48 = &off_270EBF588;
            BlueFin::GlWeekTowTime::resolveTowAmbiguity((BlueFin::GlWeekTowTime *)&v48, *(long double *)(v12 + 56), &v39);
            unint64_t v49 = v39;
            double v47 = 0.0;
            unsigned int v46 = 0;
            BlueFin::GlPeTimeManager::getFlightTimeMs((uint64_t)this, v50, (uint64_t *)&v47, (int *)&v46);
            if (v46 <= 0x7D0) {
              unsigned int v16 = 2000;
            }
            else {
              unsigned int v16 = v46;
            }
            double v17 = v47 * 0.001;
            double v18 = fabs(v47 * 0.001);
            double v19 = fmod(v18, 1.0);
            double v20 = v19 * 4294967300.0 + 0.5;
            unsigned int v21 = v20;
            if (v20 >= 4294967300.0) {
              unsigned int v21 = -1;
            }
            if (v19 < 0.0 || v19 >= 1.0) {
              goto LABEL_42;
            }
            unsigned int v22 = v18;
            if (v17 < 0.0)
            {
              if (v49 < __PAIR64__(v22, v21))
              {
                if (v22 - HIDWORD(v49) != v49 > v21 || v21 != v49)
                {
                  unsigned int v36 = "!tDelta.isNegative()";
                  DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
                  unsigned int v37 = "glpe_datetime.h";
                  int v38 = 425;
                  goto LABEL_43;
                }
                int v24 = 0;
                LODWORD(v23) = 0;
              }
              else
              {
                BOOL v25 = v49 >= v21;
                LODWORD(v23) = v49 - v21;
                BOOL v26 = !v25;
                int v24 = HIDWORD(v49) - v22 - v26;
              }
            }
            else
            {
              unint64_t v23 = v49 + (unint64_t)v21;
              int v24 = HIDWORD(v49) + v22 + HIDWORD(v23);
            }
            unint64_t v49 = __PAIR64__(v24, v23);
            unsigned int v28 = ((uint64_t (*)(void))v48[4])(&v48);
            unsigned int v29 = ((uint64_t (*)(void))v48[4])(&v48);
            LODWORD(v30) = v49;
            double v31 = (double)v30 * 2.32830644e-10 + (double)(v29 % 0x93A80) + 14.0;
            unsigned __int8 v43 = &off_270EBC600;
            double v32 = fmod(v31, 1.0);
            if (v32 < 0.0 || v32 >= 1.0)
            {
LABEL_42:
              unsigned int v36 = "dFracSec >= 0.0 && dFracSec < 1.0";
              DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
              unsigned int v37 = "glpe_timepoint.h";
              int v38 = 173;
LABEL_43:
              __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v37, v38, v36);
            }
            double v34 = v32 * 4294967300.0 + 0.5;
            unsigned int v35 = v34;
            if (v34 >= 4294967300.0) {
              unsigned int v35 = -1;
            }
            unsigned int v44 = v35;
            unsigned int v45 = 604800 * (v28 / 0x93A80) + 820108800 + v31;
            unsigned __int8 v43 = &off_270EBC600;
            LODWORD(v34) = **(_DWORD **)this;
            unint64_t v39 = __PAIR64__(v45, v35);
            int v40 = 0;
            double v41 = (double)*(unint64_t *)&v34;
            double v42 = (double)v16;
            return BlueFin::GlPeTimeManager::SetTime(this, (BlueFin::GlPeGnssTime *)&v39, 4u, v50);
          }
        }
      }
    }
  }
  return result;
}

BlueFin::GlPeTimeManagerData *BlueFin::GlPeTimeManager::AddErrorToRtc(BlueFin::GlPeTimeManagerData *this, int a2)
{
  if (a2)
  {
    int v2 = this;
    *((double *)this + 319) = *((double *)this + 319) - (double)a2;
    GlCustomLog(14, "GlPeTimeManager::AddErrorToRtc: RTC ERROR of %+d ms introduced\n", a2);
    this = BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v3);
    v4 |= 8u;
    uint64_t v5 = *((void *)v2 + 319);
    if (BlueFin::GlUtils::m_pInstance)
    {
      if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
        return (BlueFin::GlPeTimeManagerData *)(*(uint64_t (**)(uint64_t *, void, void))(v3 + 24))(&v3, 0, 0);
      }
    }
  }
  return this;
}

BOOL BlueFin::GlPeTimeManager::GetTimeOfGlnsAsst(BlueFin::GlPeTimeManager *this, BlueFin::GlGlnsTime *a2)
{
  int v2 = *((unsigned __int8 *)this + 248);
  if (*((unsigned char *)this + 248))
  {
    BlueFin::GlGlnsTime::GlGlnsTime((uint64_t)v5, *((unsigned __int8 *)this + 249), *((unsigned __int16 *)this + 125), 0.0);
    *((void *)a2 + 1) = v5[1];
  }
  return v2 != 0;
}

uint64_t BlueFin::GlPeTimeManager::saveNvRamAndRtc(BlueFin::GlPeTimeManager *this, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  GlCustomLog(14, "GlPeTimeManager::saveNvRamAndRtc(%u):  ", *((_DWORD *)this + 642));
  if (*((void *)this + 1))
  {
    unsigned int v28 = 0;
    if (*((unsigned char *)this + 2565)) {
      int v4 = *((unsigned __int8 *)this + 2566) << 16;
    }
    else {
      int v4 = 0;
    }
    int v29 = v4;
    int v31 = 0;
    double v6 = 0.0;
    if (a2)
    {
      uint64_t v7 = 84;
    }
    else
    {
      if (*((_DWORD *)this + 722) != -1 && *((double *)this + 363) != 4294967300.0)
      {
        double v8 = BlueFin::GlPeGnssTime::GetUncUs((uint64_t)this + 2880, 0) + 0.5;
        double v9 = fmod(v8, 4294967300.0);
        if (v8 <= 4294967300.0) {
          double v9 = v8;
        }
        if (v9 < -4294967300.0) {
          double v9 = -fmod(-v9, 4294967300.0);
        }
        if (v9 < 0.0) {
          unsigned int v10 = --v9;
        }
        else {
          unsigned int v10 = v9;
        }
        if (v10 <= 1) {
          unsigned int v11 = 1;
        }
        else {
          unsigned int v11 = v10;
        }
        if (v11 <= 0x200B1F)
        {
          BOOL v26 = &off_270EBC600;
          uint64_t v27 = 0;
          BlueFin::GlPeGnssTime::GetGps((BlueFin::GlPeTimeManager *)((char *)this + 2880), (BlueFin::GlGpsTime *)&v26);
          unsigned int v12 = ((uint64_t (*)(void))v26[4])(&v26);
          unsigned int v13 = ((uint64_t (*)(void))v26[4])(&v26);
          unsigned int v14 = v12 / 0x93A80;
          LODWORD(v15) = v27;
          double v16 = (double)v15 * 2.32830644e-10 + (double)(v13 % 0x93A80);
          double v17 = fmod(v16 * 7101.46709 + 0.5, 4294967300.0);
          if (v16 * 7101.46709 + 0.5 <= 4294967300.0) {
            double v17 = v16 * 7101.46709 + 0.5;
          }
          if (v17 < -4294967300.0) {
            double v17 = -fmod(-v17, 4294967300.0);
          }
          if (v17 < 0.0) {
            unsigned int v18 = --v17;
          }
          else {
            unsigned int v18 = v17;
          }
          if (v16 > 604799.0 && v18 == 0) {
            unsigned int v20 = v14 + 1;
          }
          else {
            unsigned int v20 = v14;
          }
          if (v11 >= 2) {
            int v21 = 0x8000;
          }
          else {
            int v21 = 49152;
          }
          int v22 = v21 | v4;
          LOWORD(v4) = v20 | v22;
          unsigned int v28 = v18;
          int v29 = v20 | v22;
          double v6 = (double)v18 * 0.000140815973;
        }
      }
      uint64_t v7 = 70;
    }
    int v30 = *((_DWORD *)this + 1169);
    uint64_t v23 = 89;
    if ((v4 & 0x8000) == 0) {
      uint64_t v23 = 78;
    }
    uint64_t v24 = 84;
    if (!*((unsigned char *)this + 2565)) {
      uint64_t v24 = 70;
    }
    GlCustomLog(14, "Invalidate:%c  UnitIdValid:%c  UnitId:%02x  GpsValid:%c  ", v7, v24, *((unsigned __int8 *)this + 2566), v23);
    if ((v4 & 0x8000) != 0)
    {
      uint64_t v25 = 89;
      if ((v4 & 0x4000) == 0) {
        uint64_t v25 = 78;
      }
      GlCustomLog(14, "GpsPrecise:%c  GpsWeek:%u  GpsTowS:%.6lf", v25, v4 & 0x3FFF, v6);
    }
    GlCustomLog(14, "\n");
    return (*(uint64_t (**)(void, void, unsigned int *, uint64_t))(**((void **)this + 1) + 328))(*((void *)this + 1), *((unsigned int *)this + 642), &v28, a2);
  }
  else
  {
    return GlCustomLog(14, "MeasEng does not exist! No data daved to NVRAM.\n");
  }
}

BlueFin::GlPeTimeManager *BlueFin::GlPeTimeManager::Reset(BlueFin::GlPeTimeManager *this, int a2)
{
  uint64_t v3 = this;
  BOOL v4 = a2 != 4 || !*((unsigned char *)this + 4873) || !*((unsigned char *)this + 2561) || *((unsigned char *)this + 2562) != 0;
  BOOL v5 = a2 != 6 && v4;
  if (a2 == 1 || !v4)
  {
    if (!v5) {
      return this;
    }
    goto LABEL_14;
  }
  BlueFin::GlPeTimeManager::resetTimeModels((unint64_t)this);
  if (v5)
  {
LABEL_14:
    BlueFin::GlPeTimeManager::resetMgr(v3);
    if ((a2 | 4) != 5)
    {
      *((void *)v3 + 351) = 0;
      *((_DWORD *)v3 + 704) = -1;
      *((void *)v3 + 353) = 0xC15B773FC0000000;
      *((void *)v3 + 354) = 0x41EFFFFFFFE00000;
      *((unsigned char *)v3 + 2840) = 0x80;
    }
    if (*((unsigned char *)v3 + 2560)) {
      BlueFin::GlPeTimeManager::saveNvRamAndRtc(v3, 1);
    }
  }
  double v6 = BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v7);
  v8 |= 4u;
  int v9 = a2;
  if (BlueFin::GlUtils::m_pInstance)
  {
    if (*(unsigned char *)(BlueFin::GlUtils::m_pInstance + 1122)) {
      double v6 = (BlueFin::GlPeTimeManagerData *)(*(uint64_t (**)(uint64_t *, void, void))(v7 + 24))(&v7, 0, 0);
    }
  }
  return (BlueFin::GlPeTimeManager *)BlueFin::GlPeTimeManager::outputDebugResetReason((uint64_t)v6, a2);
}

uint64_t BlueFin::GlPeTimeManager::outputDebugResetReason(uint64_t a1, int a2)
{
  int v2 = a2 - 1;
  if ((a2 - 1) > 5)
  {
    BOOL v4 = "<unknown>";
    LOBYTE(v3) = 11;
  }
  else
  {
    unint64_t v3 = 0xE0E0E0C0B0EuLL >> (8 * v2);
    BOOL v4 = off_2655E06A0[v2];
  }
  return GlCustomLog(v3, "GlPeTimeManager::Reset:  Resetting Time Manager.  Reason:%s\n", v4);
}

uint64_t BlueFin::GlPeTimeManager::SerializeTime(BlueFin::GlPeTimeManager *this, BlueFin::GlPeEngineCallBacks *a2)
{
  BOOL v4 = (char *)this + 3640;
  if (*((unsigned char *)this + 3648))
  {
    *((_DWORD *)this + 913) = *((_DWORD *)this + 642);
    *((unsigned char *)this + 3648) = 0;
  }
  if (BlueFin::GlPeRtcModel::IsValid((BlueFin::GlPeTimeManager *)((char *)this + 3640))) {
    (*(void (**)(char *, BlueFin::GlPeEngineCallBacks *, void))(*(void *)v4 + 24))(v4, a2, 0);
  }
  BlueFin::GlPeTimeManagerData::GlPeTimeManagerData((BlueFin::GlPeTimeManagerData *)&v41);
  unsigned int v5 = *((_DWORD *)this + 642);
  if (v5 <= 0xFF9222FE) {
    double v6 = (double)v5;
  }
  else {
    double v6 = (double)(int)v5;
  }
  BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, v6, 1, (uint64_t)&v54);
  if (*((unsigned char *)this + 4875)) {
    int IsTimeUncVerified = *((_DWORD *)this + 644) != 0;
  }
  else {
    int IsTimeUncVerified = BlueFin::GlPeTimeManager::IsTimeUncVerified(this);
  }
  int v8 = *((_DWORD *)this + 704);
  double v9 = *((double *)this + 354);
  unsigned int v10 = -1;
  if (v8 != -1 && v9 != 4294967300.0)
  {
    int v11 = *((_DWORD *)this + 718);
    int v12 = v11 + v6;
    if (__CFADD__(v11, v6)) {
      int v12 = -1;
    }
    if (v6 >= 4294967300.0 || v11 == -1) {
      unsigned int v10 = -1;
    }
    else {
      unsigned int v10 = v12;
    }
  }
  uint64_t v50 = *((void *)this + 351);
  int v51 = v8;
  double v52 = *((double *)this + 353);
  double v53 = v9;
  BlueFin::GlPeGnssTime::operator+=((unsigned int *)&v50, (v6 - v52) * 0.001);
  double v14 = *((double *)this + 357) + *((double *)this + 358) * (v6 * 0.001);
  double v52 = v6;
  double v53 = v14;
  if (BlueFin::GlUtils::m_ucEnabled
    && BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF))
  {
    BlueFin::GlPeTimeManager::IsTimeUncVerified(this);
  }
  unint64_t v15 = (uint64_t *)((char *)this + 2880);
  if (v10 >= 0x5265C00) {
    unsigned int v16 = 86400000;
  }
  else {
    unsigned int v16 = v10;
  }
  unint64_t v17 = (68719477 * (unint64_t)v16) >> 36;
  int v18 = *((unsigned __int8 *)this + 4875);
  int v19 = BlueFin::GlPeTimeManager::IsTimeUncVerified(this);
  uint64_t v20 = 78;
  if (*((_DWORD *)this + 645) == 5) {
    uint64_t v21 = 89;
  }
  else {
    uint64_t v21 = 78;
  }
  if (v19) {
    uint64_t v22 = 89;
  }
  else {
    uint64_t v22 = 78;
  }
  uint64_t v39 = v22;
  uint64_t v40 = v21;
  if (IsTimeUncVerified) {
    uint64_t v23 = 89;
  }
  else {
    uint64_t v23 = 78;
  }
  if (v10 <= 0x5265BFF) {
    uint64_t v24 = 89;
  }
  else {
    uint64_t v24 = 78;
  }
  if (v18) {
    uint64_t v20 = 89;
  }
  GlCustomLog(14, "GlPeTimeManager::SaveTimetoNvmem(%.0lf): VerNvMemAgeS:%lu  AllowUnver:%c  NvMemTimeUsable:%c  TimeMgrUsable:%c  TimeUncVerified():%c  TimeMgrFullSatVer:%c  ", v6, v17, v20, v24, v23, v39, v40);
  if (IsTimeUncVerified)
  {
    if (*((_DWORD *)this + 645) == 5 || v10 > 0x5265BFF || (double v25 = v53, v53 >= *((double *)&v56 + 1)))
    {
      if (&v54 != v15)
      {
        *((void *)this + 360) = v54;
        *((_DWORD *)this + 722) = v55;
        *((_OWORD *)this + 181) = v56;
      }
      double v25 = v53;
LABEL_61:
      if (v51 == -1 || v25 == 4294967300.0)
      {
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
        }
        GlCustomLog(14, "NvMemUncUs:---  TmUncUs:%.3lf  Tm-Nv(s):---  SaveTmSrc:%s  SaveTmUncUs:%.3lf\n");
      }
      else
      {
        BlueFin::GlPeGnssTime::operator-((unsigned int *)&v54, (uint64_t)&v50);
        if (BlueFin::GlUtils::m_ucEnabled) {
          BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
        }
        GlCustomLog(14, "NvMemUncUs:%.3lf  TmMgrUncUs:%.3lf  Tm-Nv(s):%+.6lf  SaveTmSrc:%s  SaveTmUncUs:%.3lf\n");
      }
      goto LABEL_69;
    }
LABEL_59:
    if (&v50 != v15)
    {
      *((void *)this + 360) = v50;
      *((_DWORD *)this + 722) = v51;
      *((double *)this + 362) = v52;
      *((double *)this + 363) = v25;
    }
    goto LABEL_61;
  }
  if (v10 <= 0x5265BFF)
  {
    if (*((double *)&v56 + 1) >= 1.0)
    {
      double v25 = v53;
    }
    else
    {
      double v26 = fabs(BlueFin::GlPeGnssTime::operator-((unsigned int *)&v54, (uint64_t)&v50));
      double v25 = v53;
      if (v26 < v53)
      {
        if (&v54 != v15)
        {
          *((void *)this + 360) = v54;
          *((_DWORD *)this + 722) = v55;
          *((_OWORD *)this + 181) = v56;
        }
        goto LABEL_61;
      }
    }
    goto LABEL_59;
  }
  *((double *)this + 362) = v6;
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
  }
  GlCustomLog(14, "Time not saved to NVMEM\n", v34, v35, v36, v37, v38);
LABEL_69:
  if (BlueFin::GlUtils::m_ucEnabled) {
    BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
  }
  int v27 = *((_DWORD *)this + 722);
  if (v27 != -1)
  {
    double v28 = *((double *)this + 363);
    if (v28 != 4294967300.0)
    {
      v42 |= 1u;
      int v43 = 1;
      if (&v44 != v15)
      {
        uint64_t v44 = *((void *)this + 360);
        int v45 = v27;
        uint64_t v46 = *((void *)this + 362);
        double v47 = v28;
      }
      if (*((_DWORD *)this + 645) == 5)
      {
        int v29 = 0;
      }
      else
      {
        int v29 = *((_DWORD *)this + 704);
        if (v29 != -1)
        {
          if (*((double *)this + 354) == 4294967300.0)
          {
            int v29 = -1;
          }
          else
          {
            double v30 = *((double *)this + 362);
            int v29 = -1;
            if (v30 < 4294967300.0)
            {
              int v31 = *((_DWORD *)this + 718);
              if (v31 != -1)
              {
                int v29 = v31 + v30;
                if (__CFADD__(v31, v30)) {
                  int v29 = -1;
                }
              }
            }
          }
        }
      }
      int v48 = v29;
    }
  }
  if (!*((unsigned char *)this + 2912))
  {
    if (BlueFin::GlUtils::m_ucEnabled) {
      BlueFin::GlUtils::IsSysLogEnabledCompleteCheck((BlueFin::GlUtils *)0xF);
    }
    GlCustomLog(14, "GlPeTimeManager::RtcSummary(%u): SleepTime:%.6lf(s)  Precise Time not achieved in this session  TimeMgrUnc:%.1lf(us)\n", *((_DWORD *)this + 642), *((double *)this + 319) * 0.001, *((double *)this + 342));
    *((unsigned char *)this + 2912) = 1;
  }
  if (*((_DWORD *)this + 646))
  {
    v42 |= 0x10u;
    LOBYTE(v32) = *((unsigned char *)this + 2588);
LABEL_94:
    char v49 = v32;
    return (*(uint64_t (**)(uint64_t *, BlueFin::GlPeEngineCallBacks *, void))(v41 + 24))(&v41, a2, 0);
  }
  int v32 = *((unsigned __int8 *)this + 2840);
  if (v32 != 128)
  {
    v42 |= 0x10u;
    goto LABEL_94;
  }
  return (*(uint64_t (**)(uint64_t *, BlueFin::GlPeEngineCallBacks *, void))(v41 + 24))(&v41, a2, 0);
}

uint64_t BlueFin::GlPeTimeManager::SerializeModels(BlueFin::GlPeTimeManager *this, BlueFin::GlPeEngineCallBacks *a2)
{
  BlueFin::GlPeGpsTimeMgr::Serialize((uint64_t)this + 64, a2);
  if (BlueFin::GlPeTimeManager::TimeKnown((uint64_t)this, 1, 0x3938700u))
  {
    BlueFin::GlPeTimeManager::GetTime(this, 1, v8);
    v9[0] = &off_270EBF4E8;
    v9[1] = 0;
    BlueFin::GlPeGnssTime::GetGlns((BlueFin::GlPeGnssTime *)v8, (BlueFin::GlGlnsTime *)v9);
    BOOL v4 = (BlueFin::GlPeTimeManager *)((char *)this + 192);
    unsigned int v5 = (const BlueFin::GlGlnsTime *)v9;
    double v6 = a2;
  }
  else
  {
    BOOL v4 = (BlueFin::GlPeTimeManager *)((char *)this + 192);
    double v6 = a2;
    unsigned int v5 = 0;
  }
  BlueFin::GlPeGlnTimeMgr::Serialize(v4, v6, v5);
  BlueFin::GlPeBdsTimeMgr::Serialize((uint64_t)this + 2144, (uint64_t)a2);
  BlueFin::GlPeGalTimeMgr::Serialize((uint64_t)this + 2336, a2);
  return BlueFin::GlPeNicTimeMgr::Serialize((uint64_t)this + 2440, a2);
}

__n128 BlueFin::GlPeTimeManager::ClearSystemOffsets(BlueFin::GlPeTimeManager *this)
{
  *((_DWORD *)this + 34) = 0;
  *((unsigned char *)this + 140) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 176) = 0;
  BlueFin::GlPeGlnTimeMgr::ResetModels((BlueFin::GlPeTimeManager *)((char *)this + 192));
  *((void *)this + 269) &= 0xFFFFFF83FFFFFF83;
  *((_DWORD *)this + 546) = 2;
  *((_WORD *)this + 1094) = 0;
  *((void *)this + 274) = 0;
  *((void *)this + 276) = 0;
  *((void *)this + 275) = 0;
  *((_DWORD *)this + 556) = 2;
  *((_WORD *)this + 1114) = 0;
  *((void *)this + 279) = 0;
  *((void *)this + 281) = 0;
  *((void *)this + 280) = 0;
  *((_DWORD *)this + 566) = 2;
  *((_WORD *)this + 1134) = 0;
  *((void *)this + 284) = 0;
  *((void *)this + 286) = 0;
  *((void *)this + 285) = 0;
  *((_DWORD *)this + 576) = 2;
  *((_WORD *)this + 1154) = 0;
  *((void *)this + 290) = 0;
  *((void *)this + 289) = 0;
  *((void *)this + 291) = 0;
  *((_DWORD *)this + 542) = 0;
  *((_WORD *)this + 1086) = 0;
  *((_DWORD *)this + 590) = 0;
  *((_WORD *)this + 1182) = 0;
  *((_DWORD *)this + 592) = 0;
  __n128 result = 0u;
  *(_OWORD *)((char *)this + 2372) = 0u;
  *((_DWORD *)this + 602) = 0;
  *((_WORD *)this + 1206) = 0;
  *((_DWORD *)this + 604) = 0;
  *((_WORD *)this + 1212) = 0;
  *((_DWORD *)this + 605) = 0;
  *((unsigned char *)this + 2392) = 0;
  *((unsigned char *)this + 2432) = 0;
  *((_DWORD *)this + 618) = 0;
  *((_WORD *)this + 1238) = 0;
  *((_DWORD *)this + 620) = 0;
  *(void *)((char *)this + 2484) = 0;
  *(void *)((char *)this + 2490) = 0;
  *((_DWORD *)this + 630) = 0;
  *((_WORD *)this + 1262) = 0;
  *((_DWORD *)this + 632) = 0;
  *(void *)((char *)this + 2532) = 0;
  *((_DWORD *)this + 635) = 0;
  *((unsigned char *)this + 2504) = 0;
  *((unsigned char *)this + 2544) = 0;
  return result;
}

BOOL BlueFin::GlPeTimeManager::DelayedReset(BlueFin::GlPeTimeManager *this)
{
  int v1 = (char *)this + 4672;
  int v2 = *((unsigned __int8 *)this + 4672);
  if (*((unsigned char *)this + 4672))
  {
    GlCustomLog(14, "GlPeTimeManager::Reset:  Resetting Time Manager.  Reason:%s\n", "Ignore Time");
    BlueFin::GlPeTimeManager::resetMgr(this);
    *int v1 = 0;
  }
  return v2 != 0;
}

uint64_t BlueFin::GlPeTimeManager::GetRtcAnalyticsInfo(BlueFin::GlPeTimeManager *this, uint64_t a2)
{
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 4) = *((_DWORD *)this + 642);
  if (*((_DWORD *)this + 704) != -1 && *((double *)this + 354) != 4294967300.0)
  {
    *(_DWORD *)(a2 + 8) = *((double *)this + 319);
    *(void *)(a2 + 16) = *((void *)this + 357);
    *(double *)(a2 + 24) = *((double *)this + 356) * 1000000000.0;
    double v4 = *((double *)this + 358) * 1000.0;
    *(double *)(a2 + 32) = v4;
    LODWORD(v4) = *((_DWORD *)this + 718);
    *(_DWORD *)(a2 + 40) = ((double)*(unint64_t *)&v4 * 0.001);
    *(unsigned char *)a2 = 1;
    if (*((_DWORD *)this + 644))
    {
      BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *((double *)this + 353), 1, (uint64_t)v9);
      BlueFin::GlPeTimeManager::GetTime((unsigned int *)this, *((double *)this + 353), 1, (uint64_t)v8);
      double v5 = BlueFin::GlPeGnssTime::operator-(v8, (uint64_t)this + 2808);
      uint64_t v6 = v10;
      *(double *)(a2 + 48) = v5 * 1000.0;
      *(void *)(a2 + 56) = v6;
      *(unsigned char *)a2 |= 2u;
    }
  }
  if (BlueFin::GlPeRtcModel::IsValid((BlueFin::GlPeTimeManager *)((char *)this + 3640))
    && !*((unsigned char *)this + 3648))
  {
    *(double *)(a2 + 64) = *((double *)this + 459) * 1000000000.0;
    *(void *)(a2 + 72) = *((void *)this + 460);
    *(unsigned char *)a2 |= 4u;
  }
  return 1;
}

double BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator-(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char v4 = a4 | a3;
  if (a4 | a3)
  {
    if (a2 > a4 || a2 == a4 && a1 >= a3)
    {
      char v4 = 0;
      BOOL v5 = a1 >= a3;
      a1 -= a3;
      int v6 = !v5;
      a2 = a2 - a4 - v6;
    }
    else
    {
      BOOL v5 = a3 >= a1;
      a1 = a3 - a1;
      int v7 = !v5;
      a2 = a4 - a2 - v7;
      char v4 = 1;
    }
  }
  double result = (double)a1 * 2.32830644e-10 + (double)a2;
  if ((v4 & ((a2 | a1) != 0)) != 0) {
    return -result;
  }
  return result;
}

void BlueFin::GlPeVerifySubframeTime::stSubframeTime::operator+=(uint64_t a1, double a2)
{
  double v4 = fabs(a2);
  double v5 = fmod(v4, 1.0);
  double v6 = v5 * 4294967300.0 + 0.5;
  unsigned int v7 = v6;
  if (v6 >= 4294967300.0) {
    unsigned int v7 = -1;
  }
  if (v5 < 0.0 || v5 >= 1.0)
  {
    unint64_t v17 = "dFracSec >= 0.0 && dFracSec < 1.0";
    DeviceFaultNotify("glpe_timepoint.h", 173, "GlTimeFracSec", (char)"dFracSec >= 0.0 && dFracSec < 1.0");
    int v18 = "glpe_timepoint.h";
    int v19 = 173;
    goto LABEL_26;
  }
  unsigned int v9 = v4;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  unsigned int v11 = *(_DWORD *)(a1 + 20);
  if (a2 < 0.0)
  {
    if (v11 > v9 || (v11 == v9 ? (BOOL v14 = v10 >= v7) : (BOOL v14 = 0), v14))
    {
      BOOL v14 = v10 >= v7;
      LODWORD(v12) = v10 - v7;
      int v16 = !v14;
      int v13 = v11 - v9 - v16;
    }
    else
    {
      if (v9 - v11 != v10 > v7 || v7 != v10)
      {
        unint64_t v17 = "!tDelta.isNegative()";
        DeviceFaultNotify("glpe_datetime.h", 425, "operator+=", (char)"!tDelta.isNegative()");
        int v18 = "glpe_datetime.h";
        int v19 = 425;
LABEL_26:
        __assert_rtn((const char *)0xFFFFFFFFFFFFFFFFLL, v18, v19, v17);
      }
      int v13 = 0;
      LODWORD(v12) = 0;
    }
  }
  else
  {
    uint64_t v12 = v10 + v7;
    int v13 = v11 + v9 + HIDWORD(v12);
  }
  *(_DWORD *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 20) = v13;
}

void BlueFin::GlPeRtcModel::~GlPeRtcModel(BlueFin::GlPeRtcModel *this)
{
}

void BlueFin::GlPeTimeManagerData::~GlPeTimeManagerData(BlueFin::GlPeTimeManagerData *this)
{
}

void BlueFin::GlPeGnssTimeModelData::~GlPeGnssTimeModelData(BlueFin::GlPeGnssTimeModelData *this)
{
}

uint64_t _GLOBAL__sub_I_glpe_timemgr_cpp()
{
  BlueFin::GlPeSpecialTimeEvents::m_aotKnownLeapSeconds[0] = 14;
  qword_26B4341A8 = 0x30E1DE0D00000000;
  qword_26B4341A0 = (uint64_t)&off_270EBC600;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= (BlueFin::GlWeekTowTime::m_ucCurrentLs | 0x30E1DE00u)) {
    unsigned __int8 v0 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v0 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B4341B8 = 0;
  unk_26B4341BC = v0 | 0x30E1DE00;
  qword_26B4341B0 = (uint64_t)&off_270EBF4E8;
  dword_26B4341C8 = 0;
  unk_26B4341CC = v0 | 0x30E1DE00;
  qword_26B4341C0 = (uint64_t)&unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B4341C0);
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B4341C0);
  qword_26B4341E8 = 0x30E1DE0D00000000;
  qword_26B4341E0 = (uint64_t)&off_270EBF538;
  qword_26B4341F8 = 0x30E1DE0E00000000;
  qword_26B4341F0 = (uint64_t)&off_270EBF588;
  qword_26B434208 = 0x30E1DE0D00000000;
  qword_26B434200 = (uint64_t)&off_270EBF080;
  byte_26B434210 = 15;
  qword_26B434220 = 0x3686CA0E00000000;
  qword_26B434218 = (uint64_t)&off_270EBC600;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= (BlueFin::GlWeekTowTime::m_ucCurrentLs | 0x3686CA00u)) {
    unsigned __int8 v1 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v1 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B434230 = 0;
  unk_26B434234 = v1 | 0x3686CA00;
  qword_26B434228 = (uint64_t)&off_270EBF4E8;
  dword_26B434240 = 0;
  unk_26B434244 = v1 | 0x3686CA00;
  qword_26B434238 = (uint64_t)&unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B434238);
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B434238);
  qword_26B434260 = 0x3686CA0E00000000;
  qword_26B434258 = (uint64_t)&off_270EBF538;
  qword_26B434270 = 0x3686CA0E00000000;
  qword_26B434268 = (uint64_t)&off_270EBF588;
  qword_26B434280 = 0x3686CA0E00000000;
  qword_26B434278 = (uint64_t)&off_270EBF080;
  byte_26B434288 = 16;
  qword_26B434298 = 0x3D1A558F00000000;
  qword_26B434290 = (uint64_t)&off_270EBC600;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= BlueFin::GlWeekTowTime::m_ucCurrentLs
                                                           + 1025136000)
    unsigned __int8 v2 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v2 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B4342A8 = 0;
  dword_26B4342AC = v2 + 1025136000;
  qword_26B4342A0 = (uint64_t)&off_270EBF4E8;
  dword_26B4342B8 = 0;
  dword_26B4342BC = v2 + 1025136000;
  qword_26B4342B0 = (uint64_t)&unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B4342B0);
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B4342B0);
  qword_26B4342D8 = 0x3D1A558F00000000;
  qword_26B4342D0 = (uint64_t)&off_270EBF538;
  qword_26B4342E8 = 0x3D1A558F00000000;
  qword_26B4342E0 = (uint64_t)&off_270EBF588;
  qword_26B4342F8 = 0x3D1A558F00000000;
  qword_26B4342F0 = (uint64_t)&off_270EBF080;
  byte_26B434300 = 17;
  qword_26B434310 = 0x42BDF01000000000;
  qword_26B434308 = (uint64_t)&off_270EBC600;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= (BlueFin::GlWeekTowTime::m_ucCurrentLs | 0x42BDF000u)) {
    unsigned __int8 v3 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v3 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B434320 = 0;
  dword_26B434324 = v3 | 0x42BDF000;
  qword_26B434318 = (uint64_t)&off_270EBF4E8;
  dword_26B434330 = 0;
  dword_26B434334 = v3 | 0x42BDF000;
  qword_26B434328 = (uint64_t)&unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B434328);
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B434328);
  qword_26B434350 = 0x42BDF01000000000;
  qword_26B434348 = (uint64_t)&off_270EBF538;
  qword_26B434360 = 0x42BDF01000000000;
  qword_26B434358 = (uint64_t)&off_270EBF588;
  qword_26B434370 = 0x42BDF01000000000;
  qword_26B434368 = (uint64_t)&off_270EBF080;
  byte_26B434378 = 18;
  qword_26B434388 = 0x4593091100000000;
  qword_26B434380 = (uint64_t)&off_270EBC600;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= (BlueFin::GlWeekTowTime::m_ucCurrentLs | 0x45930900u)) {
    unsigned __int8 v4 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v4 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B434398 = 0;
  dword_26B43439C = v4 | 0x45930900;
  qword_26B434390 = (uint64_t)&off_270EBF4E8;
  dword_26B4343A8 = 0;
  dword_26B4343AC = v4 | 0x45930900;
  qword_26B4343A0 = (uint64_t)&unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B4343A0);
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B4343A0);
  qword_26B4343C8 = 0x4593091100000000;
  qword_26B4343C0 = (uint64_t)&off_270EBF538;
  qword_26B4343D8 = 0x4593091100000000;
  qword_26B4343D0 = (uint64_t)&off_270EBF588;
  qword_26B4343E8 = 0x4593091100000000;
  qword_26B4343E0 = (uint64_t)&off_270EBF080;
  byte_26B4343F0 = 19;
  qword_26B434400 = 0x4E07C81100000000;
  qword_26B4343F8 = (uint64_t)&off_270EBC600;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= BlueFin::GlWeekTowTime::m_ucCurrentLs
                                                           + 1309132799)
    unsigned __int8 v5 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  else {
    unsigned __int8 v5 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B434410 = 0;
  dword_26B434414 = v5 + 1309132799;
  qword_26B434408 = (uint64_t)&off_270EBF4E8;
  if (BlueFin::GlWeekTowTime::m_ulCtFctOfNextLsEvent - 1 >= (BlueFin::GlWeekTowTime::m_ucCurrentLs | 0x4E07C800u)) {
    unsigned __int8 v6 = BlueFin::GlWeekTowTime::m_ucCurrentLs;
  }
  else {
    unsigned __int8 v6 = BlueFin::GlWeekTowTime::m_ucNextLs;
  }
  dword_26B434420 = 0;
  dword_26B434424 = v6 | 0x4E07C800;
  qword_26B434418 = (uint64_t)&unk_270EC23C8;
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B434418);
  BlueFin::GlUtcTime::breakdownFct((uint64_t)&qword_26B434418);
  qword_26B434440 = 0x4E07C81100000000;
  qword_26B434438 = (uint64_t)&off_270EBF538;
  qword_26B434450 = 0x4E07C81100000000;
  qword_26B434448 = (uint64_t)&off_270EBF588;
  qword_26B434460 = 0x4E07C81100000000;
  qword_26B434458 = (uint64_t)&off_270EBF080;

  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_2638D2000);
}

uint64_t BlueFin::GlPeTimeMgrUtil::towMsToUlong(BlueFin::GlPeTimeMgrUtil *this, double a2)
{
  if (a2 >= 604800000.0) {
    return 604799999;
  }
  double v2 = a2 + 0.5;
  double v3 = fmod(a2 + 0.5, 4294967300.0);
  if (v2 <= 4294967300.0) {
    double v3 = v2;
  }
  if (v3 < -4294967300.0) {
    double v3 = -fmod(-v3, 4294967300.0);
  }
  if (v3 < 0.0) {
    return --v3;
  }
  else {
    return v3;
  }
}

uint64_t BlueFin::GlPeTimeMgrUtil::todMsToUlong(BlueFin::GlPeTimeMgrUtil *this, double a2)
{
  if (a2 >= 86399999.5) {
    return 86399999;
  }
  double v2 = a2 + 0.5;
  double v3 = fmod(a2 + 0.5, 4294967300.0);
  if (v2 <= 4294967300.0) {
    double v3 = v2;
  }
  if (v3 < -4294967300.0) {
    double v3 = -fmod(-v3, 4294967300.0);
  }
  if (v3 < 0.0) {
    return --v3;
  }
  else {
    return v3;
  }
}

void _Exit(int a1)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x270F98DF8](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_free_exception(void *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

float __exp10f(float a1)
{
  MEMORY[0x270ED7DD0](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__double cosval = v2;
  result.__double sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__double cosval = v2;
  result.__double sinval = v1;
  return result;
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

long double asin(long double __x)
{
  MEMORY[0x270ED8610](__x);
  return result;
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x270ED86A0](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

double atof(const char *a1)
{
  MEMORY[0x270ED86E0](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x270ED86F0](a1);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

long double frexp(long double __x, int *__e)
{
  MEMORY[0x270ED9A68](__e, __x);
  return result;
}

float frexpf(float a1, int *a2)
{
  MEMORY[0x270ED9A70](a2, a1);
  return result;
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x270EDA028](*(void *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  MEMORY[0x270EDA030](*(void *)&a2, a1);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x270EDA0B0](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x270EDA0B8](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x270EDA5A8](__y, __x);
  return result;
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

void srand(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strcspn(const char *__s, const char *__charset)
{
  return MEMORY[0x270EDB5C8](__s, __charset);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB5F8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x270EDB600](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

long double tan(long double __x)
{
  MEMORY[0x270EDB810](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}